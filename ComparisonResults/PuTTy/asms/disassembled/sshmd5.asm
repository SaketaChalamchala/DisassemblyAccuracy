.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 062B1D57B020DEF9597412F27AC6E418
.data:00000000 ; Input CRC32 : FF3C3CD3
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshmd5.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG6164         db 'hmac-md5',0         ; DATA XREF: .rdata:0000003Co
.data:00000009                 align 4
.data:0000000C $SG6165         db 'HMAC-MD5',0         ; DATA XREF: .rdata:00000044o
.data:00000015                 align 4
.data:00000015 _data           ends
.data:00000015
.rdata:00000018 ; ===========================================================================
.rdata:00000018
.rdata:00000018 ; Segment type: Pure data
.rdata:00000018 ; Segment permissions: Read
.rdata:00000018 _rdata          segment dword public 'DATA' use32
.rdata:00000018                 assume cs:_rdata
.rdata:00000018                 ;org 18h
.rdata:00000018                 public _ssh_hmac_md5
.rdata:00000018 _ssh_hmac_md5   dd offset _hmacmd5_make_context
.rdata:0000001C                 dd offset _hmacmd5_free_context
.rdata:00000020                 dd offset _hmacmd5_key_16
.rdata:00000024                 dd offset _hmacmd5_generate
.rdata:00000028                 dd offset _hmacmd5_verify
.rdata:0000002C                 dd offset _hmacmd5_start
.rdata:00000030                 dd offset _hmacmd5_bytes
.rdata:00000034                 dd offset _hmacmd5_genresult
.rdata:00000038                 dd offset _hmacmd5_verresult
.rdata:0000003C                 dd offset $SG6164       ; "hmac-md5"
.rdata:00000040                 db  10h
.rdata:00000041                 db    0
.rdata:00000042                 db    0
.rdata:00000043                 db    0
.rdata:00000044                 dd offset $SG6165       ; "HMAC-MD5"
.rdata:00000044 _rdata          ends
.rdata:00000044
.text:00000048 ; ===========================================================================
.text:00000048
.text:00000048 ; Segment type: Pure code
.text:00000048 ; Segment permissions: Read/Execute
.text:00000048 _text           segment para public 'CODE' use32
.text:00000048                 assume cs:_text
.text:00000048                 ;org 48h
.text:00000048                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000048
.text:00000048 ; =============== S U B R O U T I N E =======================================
.text:00000048
.text:00000048 ; Attributes: bp-based frame
.text:00000048
.text:00000048                 public _MD5Init
.text:00000048 _MD5Init        proc near               ; CODE XREF: _MD5Simple+24p
.text:00000048                                         ; _hmacmd5_key+7Cp ...
.text:00000048
.text:00000048 arg_0           = dword ptr  8
.text:00000048
.text:00000048                 push    ebp
.text:00000049                 mov     ebp, esp
.text:0000004B                 mov     eax, [ebp+arg_0]
.text:0000004E                 push    eax
.text:0000004F                 call    _MD5_Core_Init
.text:00000054                 add     esp, 4
.text:00000057                 mov     ecx, [ebp+arg_0]
.text:0000005A                 mov     dword ptr [ecx+50h], 0
.text:00000061                 mov     edx, [ebp+arg_0]
.text:00000064                 mov     dword ptr [edx+58h], 0
.text:0000006B                 mov     eax, [ebp+arg_0]
.text:0000006E                 mov     dword ptr [eax+54h], 0
.text:00000075                 cmp     ebp, esp
.text:00000077                 call    __RTC_CheckEsp
.text:0000007C                 pop     ebp
.text:0000007D                 retn
.text:0000007D _MD5Init        endp
.text:0000007D
.text:0000007D ; ---------------------------------------------------------------------------
.text:0000007E                 db 0Ah dup(0CCh)
.text:00000088
.text:00000088 ; =============== S U B R O U T I N E =======================================
.text:00000088
.text:00000088 ; Attributes: bp-based frame
.text:00000088
.text:00000088 _MD5_Core_Init  proc near               ; CODE XREF: _MD5Init+7p
.text:00000088
.text:00000088 arg_0           = dword ptr  8
.text:00000088
.text:00000088                 push    ebp
.text:00000089                 mov     ebp, esp
.text:0000008B                 mov     eax, [ebp+arg_0]
.text:0000008E                 mov     dword ptr [eax], 67452301h
.text:00000094                 mov     ecx, [ebp+arg_0]
.text:00000097                 mov     dword ptr [ecx+4], 0EFCDAB89h
.text:0000009E                 mov     edx, [ebp+arg_0]
.text:000000A1                 mov     dword ptr [edx+8], 98BADCFEh
.text:000000A8                 mov     eax, [ebp+arg_0]
.text:000000AB                 mov     dword ptr [eax+0Ch], 10325476h
.text:000000B2                 pop     ebp
.text:000000B3                 retn
.text:000000B3 _MD5_Core_Init  endp
.text:000000B3
.text:000000B3 ; ---------------------------------------------------------------------------
.text:000000B4                 align 8
.text:000000B8
.text:000000B8 ; =============== S U B R O U T I N E =======================================
.text:000000B8
.text:000000B8 ; Attributes: bp-based frame
.text:000000B8
.text:000000B8 ; int __cdecl MD5Update(int, int, size_t)
.text:000000B8                 public _MD5Update
.text:000000B8 _MD5Update      proc near               ; CODE XREF: _MD5Final+8Cp
.text:000000B8                                         ; _MD5Final+10Ep ...
.text:000000B8
.text:000000B8 var_58          = dword ptr -58h
.text:000000B8 var_54          = dword ptr -54h
.text:000000B8 var_4C          = dword ptr -4Ch
.text:000000B8 var_8           = dword ptr -8
.text:000000B8 var_4           = dword ptr -4
.text:000000B8 arg_0           = dword ptr  8
.text:000000B8 arg_4           = dword ptr  0Ch
.text:000000B8 arg_8           = dword ptr  10h
.text:000000B8
.text:000000B8                 push    ebp
.text:000000B9                 mov     ebp, esp
.text:000000BB                 sub     esp, 58h
.text:000000BE                 push    edi
.text:000000BF                 lea     edi, [ebp+var_58]
.text:000000C2                 mov     ecx, 16h
.text:000000C7                 mov     eax, 0CCCCCCCCh
.text:000000CC                 rep stosd
.text:000000CE                 mov     eax, dword ptr ds:___security_cookie
.text:000000D3                 xor     eax, ebp
.text:000000D5                 mov     [ebp+var_4], eax
.text:000000D8                 mov     eax, [ebp+arg_4]
.text:000000DB                 mov     [ebp+var_8], eax
.text:000000DE                 mov     ecx, [ebp+arg_8]
.text:000000E1                 mov     [ebp+var_54], ecx
.text:000000E4                 mov     edx, [ebp+arg_0]
.text:000000E7                 mov     eax, [edx+58h]
.text:000000EA                 add     eax, [ebp+var_54]
.text:000000ED                 mov     ecx, [ebp+arg_0]
.text:000000F0                 mov     [ecx+58h], eax
.text:000000F3                 mov     edx, [ebp+arg_0]
.text:000000F6                 mov     eax, [edx+58h]
.text:000000F9                 cmp     eax, [ebp+var_54]
.text:000000FC                 sbb     ecx, ecx
.text:000000FE                 neg     ecx
.text:00000100                 mov     edx, [ebp+arg_0]
.text:00000103                 add     ecx, [edx+54h]
.text:00000106                 mov     eax, [ebp+arg_0]
.text:00000109                 mov     [eax+54h], ecx
.text:0000010C                 mov     ecx, [ebp+arg_0]
.text:0000010F                 mov     edx, [ecx+50h]
.text:00000112                 add     edx, [ebp+arg_8]
.text:00000115                 cmp     edx, 40h ; '@'
.text:00000118                 jnb     short loc_14C
.text:0000011A                 mov     eax, [ebp+arg_8]
.text:0000011D                 push    eax             ; size_t
.text:0000011E                 mov     ecx, [ebp+var_8]
.text:00000121                 push    ecx             ; void *
.text:00000122                 mov     edx, [ebp+arg_0]
.text:00000125                 mov     eax, [edx+50h]
.text:00000128                 mov     ecx, [ebp+arg_0]
.text:0000012B                 lea     edx, [ecx+eax+10h]
.text:0000012F                 push    edx             ; void *
.text:00000130                 call    _memcpy
.text:00000135                 add     esp, 0Ch
.text:00000138                 mov     eax, [ebp+arg_0]
.text:0000013B                 mov     ecx, [eax+50h]
.text:0000013E                 add     ecx, [ebp+arg_8]
.text:00000141                 mov     edx, [ebp+arg_0]
.text:00000144                 mov     [edx+50h], ecx
.text:00000147                 jmp     loc_243
.text:0000014C ; ---------------------------------------------------------------------------
.text:0000014C
.text:0000014C loc_14C:                                ; CODE XREF: _MD5Update+60j
.text:0000014C                                         ; _MD5Update+166j
.text:0000014C                 mov     eax, [ebp+arg_0]
.text:0000014F                 mov     ecx, [eax+50h]
.text:00000152                 add     ecx, [ebp+arg_8]
.text:00000155                 cmp     ecx, 40h ; '@'
.text:00000158                 jb      loc_223
.text:0000015E                 mov     edx, [ebp+arg_0]
.text:00000161                 mov     eax, 40h ; '@'
.text:00000166                 sub     eax, [edx+50h]
.text:00000169                 push    eax             ; size_t
.text:0000016A                 mov     ecx, [ebp+var_8]
.text:0000016D                 push    ecx             ; void *
.text:0000016E                 mov     edx, [ebp+arg_0]
.text:00000171                 mov     eax, [edx+50h]
.text:00000174                 mov     ecx, [ebp+arg_0]
.text:00000177                 lea     edx, [ecx+eax+10h]
.text:0000017B                 push    edx             ; void *
.text:0000017C                 call    _memcpy
.text:00000181                 add     esp, 0Ch
.text:00000184                 mov     eax, [ebp+arg_0]
.text:00000187                 mov     ecx, 40h ; '@'
.text:0000018C                 sub     ecx, [eax+50h]
.text:0000018F                 add     ecx, [ebp+var_8]
.text:00000192                 mov     [ebp+var_8], ecx
.text:00000195                 mov     edx, [ebp+arg_0]
.text:00000198                 mov     eax, 40h ; '@'
.text:0000019D                 sub     eax, [edx+50h]
.text:000001A0                 mov     ecx, [ebp+arg_8]
.text:000001A3                 sub     ecx, eax
.text:000001A5                 mov     [ebp+arg_8], ecx
.text:000001A8                 mov     [ebp+var_58], 0
.text:000001AF                 jmp     short loc_1BA
.text:000001B1 ; ---------------------------------------------------------------------------
.text:000001B1
.text:000001B1 loc_1B1:                                ; CODE XREF: _MD5Update+14Aj
.text:000001B1                 mov     edx, [ebp+var_58]
.text:000001B4                 add     edx, 1
.text:000001B7                 mov     [ebp+var_58], edx
.text:000001BA
.text:000001BA loc_1BA:                                ; CODE XREF: _MD5Update+F7j
.text:000001BA                 cmp     [ebp+var_58], 10h
.text:000001BE                 jge     short loc_204
.text:000001C0                 mov     eax, [ebp+var_58]
.text:000001C3                 mov     ecx, [ebp+arg_0]
.text:000001C6                 movzx   edx, byte ptr [ecx+eax*4+13h]
.text:000001CB                 shl     edx, 18h
.text:000001CE                 mov     eax, [ebp+var_58]
.text:000001D1                 mov     ecx, [ebp+arg_0]
.text:000001D4                 movzx   eax, byte ptr [ecx+eax*4+12h]
.text:000001D9                 shl     eax, 10h
.text:000001DC                 or      edx, eax
.text:000001DE                 mov     ecx, [ebp+var_58]
.text:000001E1                 mov     eax, [ebp+arg_0]
.text:000001E4                 movzx   ecx, byte ptr [eax+ecx*4+11h]
.text:000001E9                 shl     ecx, 8
.text:000001EC                 or      edx, ecx
.text:000001EE                 mov     eax, [ebp+var_58]
.text:000001F1                 mov     ecx, [ebp+arg_0]
.text:000001F4                 movzx   eax, byte ptr [ecx+eax*4+10h]
.text:000001F9                 or      edx, eax
.text:000001FB                 mov     ecx, [ebp+var_58]
.text:000001FE                 mov     [ebp+ecx*4+var_4C], edx
.text:00000202                 jmp     short loc_1B1
.text:00000204 ; ---------------------------------------------------------------------------
.text:00000204
.text:00000204 loc_204:                                ; CODE XREF: _MD5Update+106j
.text:00000204                 lea     edx, [ebp+var_4C]
.text:00000207                 push    edx
.text:00000208                 mov     eax, [ebp+arg_0]
.text:0000020B                 push    eax
.text:0000020C                 call    _MD5_Block
.text:00000211                 add     esp, 8
.text:00000214                 mov     ecx, [ebp+arg_0]
.text:00000217                 mov     dword ptr [ecx+50h], 0
.text:0000021E                 jmp     loc_14C
.text:00000223 ; ---------------------------------------------------------------------------
.text:00000223
.text:00000223 loc_223:                                ; CODE XREF: _MD5Update+A0j
.text:00000223                 mov     edx, [ebp+arg_8]
.text:00000226                 push    edx             ; size_t
.text:00000227                 mov     eax, [ebp+var_8]
.text:0000022A                 push    eax             ; void *
.text:0000022B                 mov     ecx, [ebp+arg_0]
.text:0000022E                 add     ecx, 10h
.text:00000231                 push    ecx             ; void *
.text:00000232                 call    _memcpy
.text:00000237                 add     esp, 0Ch
.text:0000023A                 mov     edx, [ebp+arg_0]
.text:0000023D                 mov     eax, [ebp+arg_8]
.text:00000240                 mov     [edx+50h], eax
.text:00000243
.text:00000243 loc_243:                                ; CODE XREF: _MD5Update+8Fj
.text:00000243                 push    edx
.text:00000244                 mov     ecx, ebp
.text:00000246                 push    eax
.text:00000247                 lea     edx, $LN12
.text:0000024D                 call    @_RTC_CheckStackVars@8
.text:00000252                 pop     eax
.text:00000253                 pop     edx
.text:00000254                 pop     edi
.text:00000255                 mov     ecx, [ebp+var_4]
.text:00000258                 xor     ecx, ebp
.text:0000025A                 call    @__security_check_cookie@4
.text:0000025F                 add     esp, 58h
.text:00000262                 cmp     ebp, esp
.text:00000264                 call    __RTC_CheckEsp
.text:00000269                 mov     esp, ebp
.text:0000026B                 pop     ebp
.text:0000026C                 retn
.text:0000026C _MD5Update      endp
.text:0000026C
.text:0000026C ; ---------------------------------------------------------------------------
.text:0000026D                 align 10h
.text:00000270 $LN12           dd 1                    ; DATA XREF: _MD5Update+18Fo
.text:00000274                 dd offset $LN11
.text:00000278 $LN11           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000274o
.text:00000280                 dd offset $LN10         ; "wordblock"
.text:00000284 $LN10           db 'wordblock',0        ; DATA XREF: .text:00000280o
.text:0000028E                 db 0Ah dup(0CCh)
.text:00000298
.text:00000298 ; =============== S U B R O U T I N E =======================================
.text:00000298
.text:00000298 ; Attributes: bp-based frame
.text:00000298
.text:00000298 _MD5_Block      proc near               ; CODE XREF: _MD5Update+154p
.text:00000298
.text:00000298 var_10          = dword ptr -10h
.text:00000298 var_C           = dword ptr -0Ch
.text:00000298 var_8           = dword ptr -8
.text:00000298 var_4           = dword ptr -4
.text:00000298 arg_0           = dword ptr  8
.text:00000298 arg_4           = dword ptr  0Ch
.text:00000298
.text:00000298                 push    ebp
.text:00000299                 mov     ebp, esp
.text:0000029B                 sub     esp, 10h
.text:0000029E                 mov     eax, 0CCCCCCCCh
.text:000002A3                 mov     [ebp+var_10], eax
.text:000002A6                 mov     [ebp+var_C], eax
.text:000002A9                 mov     [ebp+var_8], eax
.text:000002AC                 mov     [ebp+var_4], eax
.text:000002AF                 mov     eax, [ebp+arg_0]
.text:000002B2                 mov     ecx, [eax]
.text:000002B4                 mov     [ebp+var_4], ecx
.text:000002B7                 mov     edx, [ebp+arg_0]
.text:000002BA                 mov     eax, [edx+4]
.text:000002BD                 mov     [ebp+var_8], eax
.text:000002C0                 mov     ecx, [ebp+arg_0]
.text:000002C3                 mov     edx, [ecx+8]
.text:000002C6                 mov     [ebp+var_C], edx
.text:000002C9                 mov     eax, [ebp+arg_0]
.text:000002CC                 mov     ecx, [eax+0Ch]
.text:000002CF                 mov     [ebp+var_10], ecx
.text:000002D2                 mov     edx, [ebp+var_8]
.text:000002D5                 and     edx, [ebp+var_C]
.text:000002D8                 mov     eax, [ebp+var_8]
.text:000002DB                 not     eax
.text:000002DD                 and     eax, [ebp+var_10]
.text:000002E0                 or      edx, eax
.text:000002E2                 add     edx, [ebp+var_4]
.text:000002E5                 mov     ecx, [ebp+arg_4]
.text:000002E8                 mov     eax, [ecx]
.text:000002EA                 lea     ecx, [edx+eax-28955B88h]
.text:000002F1                 shl     ecx, 7
.text:000002F4                 mov     edx, [ebp+var_8]
.text:000002F7                 and     edx, [ebp+var_C]
.text:000002FA                 mov     eax, [ebp+var_8]
.text:000002FD                 not     eax
.text:000002FF                 and     eax, [ebp+var_10]
.text:00000302                 or      edx, eax
.text:00000304                 add     edx, [ebp+var_4]
.text:00000307                 mov     eax, [ebp+arg_4]
.text:0000030A                 mov     eax, [eax]
.text:0000030C                 lea     edx, [edx+eax-28955B88h]
.text:00000313                 shr     edx, 19h
.text:00000316                 or      ecx, edx
.text:00000318                 add     ecx, [ebp+var_8]
.text:0000031B                 mov     [ebp+var_4], ecx
.text:0000031E                 mov     eax, [ebp+var_4]
.text:00000321                 and     eax, [ebp+var_8]
.text:00000324                 mov     ecx, [ebp+var_4]
.text:00000327                 not     ecx
.text:00000329                 and     ecx, [ebp+var_C]
.text:0000032C                 or      eax, ecx
.text:0000032E                 add     eax, [ebp+var_10]
.text:00000331                 mov     edx, [ebp+arg_4]
.text:00000334                 mov     ecx, [edx+4]
.text:00000337                 lea     edx, [eax+ecx-173848AAh]
.text:0000033E                 shl     edx, 0Ch
.text:00000341                 mov     eax, [ebp+var_4]
.text:00000344                 and     eax, [ebp+var_8]
.text:00000347                 mov     ecx, [ebp+var_4]
.text:0000034A                 not     ecx
.text:0000034C                 and     ecx, [ebp+var_C]
.text:0000034F                 or      eax, ecx
.text:00000351                 add     eax, [ebp+var_10]
.text:00000354                 mov     ecx, [ebp+arg_4]
.text:00000357                 mov     ecx, [ecx+4]
.text:0000035A                 lea     eax, [eax+ecx-173848AAh]
.text:00000361                 shr     eax, 14h
.text:00000364                 or      edx, eax
.text:00000366                 add     edx, [ebp+var_4]
.text:00000369                 mov     [ebp+var_10], edx
.text:0000036C                 mov     ecx, [ebp+var_10]
.text:0000036F                 and     ecx, [ebp+var_4]
.text:00000372                 mov     edx, [ebp+var_10]
.text:00000375                 not     edx
.text:00000377                 and     edx, [ebp+var_8]
.text:0000037A                 or      ecx, edx
.text:0000037C                 add     ecx, [ebp+var_C]
.text:0000037F                 mov     eax, [ebp+arg_4]
.text:00000382                 mov     edx, [eax+8]
.text:00000385                 lea     eax, [ecx+edx+242070DBh]
.text:0000038C                 shl     eax, 11h
.text:0000038F                 mov     ecx, [ebp+var_10]
.text:00000392                 and     ecx, [ebp+var_4]
.text:00000395                 mov     edx, [ebp+var_10]
.text:00000398                 not     edx
.text:0000039A                 and     edx, [ebp+var_8]
.text:0000039D                 or      ecx, edx
.text:0000039F                 add     ecx, [ebp+var_C]
.text:000003A2                 mov     edx, [ebp+arg_4]
.text:000003A5                 mov     edx, [edx+8]
.text:000003A8                 lea     ecx, [ecx+edx+242070DBh]
.text:000003AF                 shr     ecx, 0Fh
.text:000003B2                 or      eax, ecx
.text:000003B4                 add     eax, [ebp+var_10]
.text:000003B7                 mov     [ebp+var_C], eax
.text:000003BA                 mov     edx, [ebp+var_C]
.text:000003BD                 and     edx, [ebp+var_10]
.text:000003C0                 mov     eax, [ebp+var_C]
.text:000003C3                 not     eax
.text:000003C5                 and     eax, [ebp+var_4]
.text:000003C8                 or      edx, eax
.text:000003CA                 add     edx, [ebp+var_8]
.text:000003CD                 mov     ecx, [ebp+arg_4]
.text:000003D0                 mov     eax, [ecx+0Ch]
.text:000003D3                 lea     ecx, [edx+eax-3E423112h]
.text:000003DA                 shl     ecx, 16h
.text:000003DD                 mov     edx, [ebp+var_C]
.text:000003E0                 and     edx, [ebp+var_10]
.text:000003E3                 mov     eax, [ebp+var_C]
.text:000003E6                 not     eax
.text:000003E8                 and     eax, [ebp+var_4]
.text:000003EB                 or      edx, eax
.text:000003ED                 add     edx, [ebp+var_8]
.text:000003F0                 mov     eax, [ebp+arg_4]
.text:000003F3                 mov     eax, [eax+0Ch]
.text:000003F6                 lea     edx, [edx+eax-3E423112h]
.text:000003FD                 shr     edx, 0Ah
.text:00000400                 or      ecx, edx
.text:00000402                 add     ecx, [ebp+var_C]
.text:00000405                 mov     [ebp+var_8], ecx
.text:00000408                 mov     eax, [ebp+var_8]
.text:0000040B                 and     eax, [ebp+var_C]
.text:0000040E                 mov     ecx, [ebp+var_8]
.text:00000411                 not     ecx
.text:00000413                 and     ecx, [ebp+var_10]
.text:00000416                 or      eax, ecx
.text:00000418                 add     eax, [ebp+var_4]
.text:0000041B                 mov     edx, [ebp+arg_4]
.text:0000041E                 mov     ecx, [edx+10h]
.text:00000421                 lea     edx, [eax+ecx-0A83F051h]
.text:00000428                 shl     edx, 7
.text:0000042B                 mov     eax, [ebp+var_8]
.text:0000042E                 and     eax, [ebp+var_C]
.text:00000431                 mov     ecx, [ebp+var_8]
.text:00000434                 not     ecx
.text:00000436                 and     ecx, [ebp+var_10]
.text:00000439                 or      eax, ecx
.text:0000043B                 add     eax, [ebp+var_4]
.text:0000043E                 mov     ecx, [ebp+arg_4]
.text:00000441                 mov     ecx, [ecx+10h]
.text:00000444                 lea     eax, [eax+ecx-0A83F051h]
.text:0000044B                 shr     eax, 19h
.text:0000044E                 or      edx, eax
.text:00000450                 add     edx, [ebp+var_8]
.text:00000453                 mov     [ebp+var_4], edx
.text:00000456                 mov     ecx, [ebp+var_4]
.text:00000459                 and     ecx, [ebp+var_8]
.text:0000045C                 mov     edx, [ebp+var_4]
.text:0000045F                 not     edx
.text:00000461                 and     edx, [ebp+var_C]
.text:00000464                 or      ecx, edx
.text:00000466                 add     ecx, [ebp+var_10]
.text:00000469                 mov     eax, [ebp+arg_4]
.text:0000046C                 mov     edx, [eax+14h]
.text:0000046F                 lea     eax, [ecx+edx+4787C62Ah]
.text:00000476                 shl     eax, 0Ch
.text:00000479                 mov     ecx, [ebp+var_4]
.text:0000047C                 and     ecx, [ebp+var_8]
.text:0000047F                 mov     edx, [ebp+var_4]
.text:00000482                 not     edx
.text:00000484                 and     edx, [ebp+var_C]
.text:00000487                 or      ecx, edx
.text:00000489                 add     ecx, [ebp+var_10]
.text:0000048C                 mov     edx, [ebp+arg_4]
.text:0000048F                 mov     edx, [edx+14h]
.text:00000492                 lea     ecx, [ecx+edx+4787C62Ah]
.text:00000499                 shr     ecx, 14h
.text:0000049C                 or      eax, ecx
.text:0000049E                 add     eax, [ebp+var_4]
.text:000004A1                 mov     [ebp+var_10], eax
.text:000004A4                 mov     edx, [ebp+var_10]
.text:000004A7                 and     edx, [ebp+var_4]
.text:000004AA                 mov     eax, [ebp+var_10]
.text:000004AD                 not     eax
.text:000004AF                 and     eax, [ebp+var_8]
.text:000004B2                 or      edx, eax
.text:000004B4                 add     edx, [ebp+var_C]
.text:000004B7                 mov     ecx, [ebp+arg_4]
.text:000004BA                 mov     eax, [ecx+18h]
.text:000004BD                 lea     ecx, [edx+eax-57CFB9EDh]
.text:000004C4                 shl     ecx, 11h
.text:000004C7                 mov     edx, [ebp+var_10]
.text:000004CA                 and     edx, [ebp+var_4]
.text:000004CD                 mov     eax, [ebp+var_10]
.text:000004D0                 not     eax
.text:000004D2                 and     eax, [ebp+var_8]
.text:000004D5                 or      edx, eax
.text:000004D7                 add     edx, [ebp+var_C]
.text:000004DA                 mov     eax, [ebp+arg_4]
.text:000004DD                 mov     eax, [eax+18h]
.text:000004E0                 lea     edx, [edx+eax-57CFB9EDh]
.text:000004E7                 shr     edx, 0Fh
.text:000004EA                 or      ecx, edx
.text:000004EC                 add     ecx, [ebp+var_10]
.text:000004EF                 mov     [ebp+var_C], ecx
.text:000004F2                 mov     eax, [ebp+var_C]
.text:000004F5                 and     eax, [ebp+var_10]
.text:000004F8                 mov     ecx, [ebp+var_C]
.text:000004FB                 not     ecx
.text:000004FD                 and     ecx, [ebp+var_4]
.text:00000500                 or      eax, ecx
.text:00000502                 add     eax, [ebp+var_8]
.text:00000505                 mov     edx, [ebp+arg_4]
.text:00000508                 mov     ecx, [edx+1Ch]
.text:0000050B                 lea     edx, [eax+ecx-2B96AFFh]
.text:00000512                 shl     edx, 16h
.text:00000515                 mov     eax, [ebp+var_C]
.text:00000518                 and     eax, [ebp+var_10]
.text:0000051B                 mov     ecx, [ebp+var_C]
.text:0000051E                 not     ecx
.text:00000520                 and     ecx, [ebp+var_4]
.text:00000523                 or      eax, ecx
.text:00000525                 add     eax, [ebp+var_8]
.text:00000528                 mov     ecx, [ebp+arg_4]
.text:0000052B                 mov     ecx, [ecx+1Ch]
.text:0000052E                 lea     eax, [eax+ecx-2B96AFFh]
.text:00000535                 shr     eax, 0Ah
.text:00000538                 or      edx, eax
.text:0000053A                 add     edx, [ebp+var_C]
.text:0000053D                 mov     [ebp+var_8], edx
.text:00000540                 mov     ecx, [ebp+var_8]
.text:00000543                 and     ecx, [ebp+var_C]
.text:00000546                 mov     edx, [ebp+var_8]
.text:00000549                 not     edx
.text:0000054B                 and     edx, [ebp+var_10]
.text:0000054E                 or      ecx, edx
.text:00000550                 add     ecx, [ebp+var_4]
.text:00000553                 mov     eax, [ebp+arg_4]
.text:00000556                 mov     edx, [eax+20h]
.text:00000559                 lea     eax, [ecx+edx+698098D8h]
.text:00000560                 shl     eax, 7
.text:00000563                 mov     ecx, [ebp+var_8]
.text:00000566                 and     ecx, [ebp+var_C]
.text:00000569                 mov     edx, [ebp+var_8]
.text:0000056C                 not     edx
.text:0000056E                 and     edx, [ebp+var_10]
.text:00000571                 or      ecx, edx
.text:00000573                 add     ecx, [ebp+var_4]
.text:00000576                 mov     edx, [ebp+arg_4]
.text:00000579                 mov     edx, [edx+20h]
.text:0000057C                 lea     ecx, [ecx+edx+698098D8h]
.text:00000583                 shr     ecx, 19h
.text:00000586                 or      eax, ecx
.text:00000588                 add     eax, [ebp+var_8]
.text:0000058B                 mov     [ebp+var_4], eax
.text:0000058E                 mov     edx, [ebp+var_4]
.text:00000591                 and     edx, [ebp+var_8]
.text:00000594                 mov     eax, [ebp+var_4]
.text:00000597                 not     eax
.text:00000599                 and     eax, [ebp+var_C]
.text:0000059C                 or      edx, eax
.text:0000059E                 add     edx, [ebp+var_10]
.text:000005A1                 mov     ecx, [ebp+arg_4]
.text:000005A4                 mov     eax, [ecx+24h]
.text:000005A7                 lea     ecx, [edx+eax-74BB0851h]
.text:000005AE                 shl     ecx, 0Ch
.text:000005B1                 mov     edx, [ebp+var_4]
.text:000005B4                 and     edx, [ebp+var_8]
.text:000005B7                 mov     eax, [ebp+var_4]
.text:000005BA                 not     eax
.text:000005BC                 and     eax, [ebp+var_C]
.text:000005BF                 or      edx, eax
.text:000005C1                 add     edx, [ebp+var_10]
.text:000005C4                 mov     eax, [ebp+arg_4]
.text:000005C7                 mov     eax, [eax+24h]
.text:000005CA                 lea     edx, [edx+eax-74BB0851h]
.text:000005D1                 shr     edx, 14h
.text:000005D4                 or      ecx, edx
.text:000005D6                 add     ecx, [ebp+var_4]
.text:000005D9                 mov     [ebp+var_10], ecx
.text:000005DC                 mov     eax, [ebp+var_10]
.text:000005DF                 and     eax, [ebp+var_4]
.text:000005E2                 mov     ecx, [ebp+var_10]
.text:000005E5                 not     ecx
.text:000005E7                 and     ecx, [ebp+var_8]
.text:000005EA                 or      eax, ecx
.text:000005EC                 add     eax, [ebp+var_C]
.text:000005EF                 mov     edx, [ebp+arg_4]
.text:000005F2                 mov     ecx, [edx+28h]
.text:000005F5                 lea     edx, [eax+ecx-0A44Fh]
.text:000005FC                 shl     edx, 11h
.text:000005FF                 mov     eax, [ebp+var_10]
.text:00000602                 and     eax, [ebp+var_4]
.text:00000605                 mov     ecx, [ebp+var_10]
.text:00000608                 not     ecx
.text:0000060A                 and     ecx, [ebp+var_8]
.text:0000060D                 or      eax, ecx
.text:0000060F                 add     eax, [ebp+var_C]
.text:00000612                 mov     ecx, [ebp+arg_4]
.text:00000615                 mov     ecx, [ecx+28h]
.text:00000618                 lea     eax, [eax+ecx-0A44Fh]
.text:0000061F                 shr     eax, 0Fh
.text:00000622                 or      edx, eax
.text:00000624                 add     edx, [ebp+var_10]
.text:00000627                 mov     [ebp+var_C], edx
.text:0000062A                 mov     ecx, [ebp+var_C]
.text:0000062D                 and     ecx, [ebp+var_10]
.text:00000630                 mov     edx, [ebp+var_C]
.text:00000633                 not     edx
.text:00000635                 and     edx, [ebp+var_4]
.text:00000638                 or      ecx, edx
.text:0000063A                 add     ecx, [ebp+var_8]
.text:0000063D                 mov     eax, [ebp+arg_4]
.text:00000640                 mov     edx, [eax+2Ch]
.text:00000643                 lea     eax, [ecx+edx-76A32842h]
.text:0000064A                 shl     eax, 16h
.text:0000064D                 mov     ecx, [ebp+var_C]
.text:00000650                 and     ecx, [ebp+var_10]
.text:00000653                 mov     edx, [ebp+var_C]
.text:00000656                 not     edx
.text:00000658                 and     edx, [ebp+var_4]
.text:0000065B                 or      ecx, edx
.text:0000065D                 add     ecx, [ebp+var_8]
.text:00000660                 mov     edx, [ebp+arg_4]
.text:00000663                 mov     edx, [edx+2Ch]
.text:00000666                 lea     ecx, [ecx+edx-76A32842h]
.text:0000066D                 shr     ecx, 0Ah
.text:00000670                 or      eax, ecx
.text:00000672                 add     eax, [ebp+var_C]
.text:00000675                 mov     [ebp+var_8], eax
.text:00000678                 mov     edx, [ebp+var_8]
.text:0000067B                 and     edx, [ebp+var_C]
.text:0000067E                 mov     eax, [ebp+var_8]
.text:00000681                 not     eax
.text:00000683                 and     eax, [ebp+var_10]
.text:00000686                 or      edx, eax
.text:00000688                 add     edx, [ebp+var_4]
.text:0000068B                 mov     ecx, [ebp+arg_4]
.text:0000068E                 mov     eax, [ecx+30h]
.text:00000691                 lea     ecx, [edx+eax+6B901122h]
.text:00000698                 shl     ecx, 7
.text:0000069B                 mov     edx, [ebp+var_8]
.text:0000069E                 and     edx, [ebp+var_C]
.text:000006A1                 mov     eax, [ebp+var_8]
.text:000006A4                 not     eax
.text:000006A6                 and     eax, [ebp+var_10]
.text:000006A9                 or      edx, eax
.text:000006AB                 add     edx, [ebp+var_4]
.text:000006AE                 mov     eax, [ebp+arg_4]
.text:000006B1                 mov     eax, [eax+30h]
.text:000006B4                 lea     edx, [edx+eax+6B901122h]
.text:000006BB                 shr     edx, 19h
.text:000006BE                 or      ecx, edx
.text:000006C0                 add     ecx, [ebp+var_8]
.text:000006C3                 mov     [ebp+var_4], ecx
.text:000006C6                 mov     eax, [ebp+var_4]
.text:000006C9                 and     eax, [ebp+var_8]
.text:000006CC                 mov     ecx, [ebp+var_4]
.text:000006CF                 not     ecx
.text:000006D1                 and     ecx, [ebp+var_C]
.text:000006D4                 or      eax, ecx
.text:000006D6                 add     eax, [ebp+var_10]
.text:000006D9                 mov     edx, [ebp+arg_4]
.text:000006DC                 mov     ecx, [edx+34h]
.text:000006DF                 lea     edx, [eax+ecx-2678E6Dh]
.text:000006E6                 shl     edx, 0Ch
.text:000006E9                 mov     eax, [ebp+var_4]
.text:000006EC                 and     eax, [ebp+var_8]
.text:000006EF                 mov     ecx, [ebp+var_4]
.text:000006F2                 not     ecx
.text:000006F4                 and     ecx, [ebp+var_C]
.text:000006F7                 or      eax, ecx
.text:000006F9                 add     eax, [ebp+var_10]
.text:000006FC                 mov     ecx, [ebp+arg_4]
.text:000006FF                 mov     ecx, [ecx+34h]
.text:00000702                 lea     eax, [eax+ecx-2678E6Dh]
.text:00000709                 shr     eax, 14h
.text:0000070C                 or      edx, eax
.text:0000070E                 add     edx, [ebp+var_4]
.text:00000711                 mov     [ebp+var_10], edx
.text:00000714                 mov     ecx, [ebp+var_10]
.text:00000717                 and     ecx, [ebp+var_4]
.text:0000071A                 mov     edx, [ebp+var_10]
.text:0000071D                 not     edx
.text:0000071F                 and     edx, [ebp+var_8]
.text:00000722                 or      ecx, edx
.text:00000724                 add     ecx, [ebp+var_C]
.text:00000727                 mov     eax, [ebp+arg_4]
.text:0000072A                 mov     edx, [eax+38h]
.text:0000072D                 lea     eax, [ecx+edx-5986BC72h]
.text:00000734                 shl     eax, 11h
.text:00000737                 mov     ecx, [ebp+var_10]
.text:0000073A                 and     ecx, [ebp+var_4]
.text:0000073D                 mov     edx, [ebp+var_10]
.text:00000740                 not     edx
.text:00000742                 and     edx, [ebp+var_8]
.text:00000745                 or      ecx, edx
.text:00000747                 add     ecx, [ebp+var_C]
.text:0000074A                 mov     edx, [ebp+arg_4]
.text:0000074D                 mov     edx, [edx+38h]
.text:00000750                 lea     ecx, [ecx+edx-5986BC72h]
.text:00000757                 shr     ecx, 0Fh
.text:0000075A                 or      eax, ecx
.text:0000075C                 add     eax, [ebp+var_10]
.text:0000075F                 mov     [ebp+var_C], eax
.text:00000762                 mov     edx, [ebp+var_C]
.text:00000765                 and     edx, [ebp+var_10]
.text:00000768                 mov     eax, [ebp+var_C]
.text:0000076B                 not     eax
.text:0000076D                 and     eax, [ebp+var_4]
.text:00000770                 or      edx, eax
.text:00000772                 add     edx, [ebp+var_8]
.text:00000775                 mov     ecx, [ebp+arg_4]
.text:00000778                 mov     eax, [ecx+3Ch]
.text:0000077B                 lea     ecx, [edx+eax+49B40821h]
.text:00000782                 shl     ecx, 16h
.text:00000785                 mov     edx, [ebp+var_C]
.text:00000788                 and     edx, [ebp+var_10]
.text:0000078B                 mov     eax, [ebp+var_C]
.text:0000078E                 not     eax
.text:00000790                 and     eax, [ebp+var_4]
.text:00000793                 or      edx, eax
.text:00000795                 add     edx, [ebp+var_8]
.text:00000798                 mov     eax, [ebp+arg_4]
.text:0000079B                 mov     eax, [eax+3Ch]
.text:0000079E                 lea     edx, [edx+eax+49B40821h]
.text:000007A5                 shr     edx, 0Ah
.text:000007A8                 or      ecx, edx
.text:000007AA                 add     ecx, [ebp+var_C]
.text:000007AD                 mov     [ebp+var_8], ecx
.text:000007B0                 mov     eax, [ebp+var_8]
.text:000007B3                 and     eax, [ebp+var_10]
.text:000007B6                 mov     ecx, [ebp+var_10]
.text:000007B9                 not     ecx
.text:000007BB                 and     ecx, [ebp+var_C]
.text:000007BE                 or      eax, ecx
.text:000007C0                 add     eax, [ebp+var_4]
.text:000007C3                 mov     edx, [ebp+arg_4]
.text:000007C6                 mov     ecx, [edx+4]
.text:000007C9                 lea     edx, [eax+ecx-9E1DA9Eh]
.text:000007D0                 shl     edx, 5
.text:000007D3                 mov     eax, [ebp+var_8]
.text:000007D6                 and     eax, [ebp+var_10]
.text:000007D9                 mov     ecx, [ebp+var_10]
.text:000007DC                 not     ecx
.text:000007DE                 and     ecx, [ebp+var_C]
.text:000007E1                 or      eax, ecx
.text:000007E3                 add     eax, [ebp+var_4]
.text:000007E6                 mov     ecx, [ebp+arg_4]
.text:000007E9                 mov     ecx, [ecx+4]
.text:000007EC                 lea     eax, [eax+ecx-9E1DA9Eh]
.text:000007F3                 shr     eax, 1Bh
.text:000007F6                 or      edx, eax
.text:000007F8                 add     edx, [ebp+var_8]
.text:000007FB                 mov     [ebp+var_4], edx
.text:000007FE                 mov     ecx, [ebp+var_4]
.text:00000801                 and     ecx, [ebp+var_C]
.text:00000804                 mov     edx, [ebp+var_C]
.text:00000807                 not     edx
.text:00000809                 and     edx, [ebp+var_8]
.text:0000080C                 or      ecx, edx
.text:0000080E                 add     ecx, [ebp+var_10]
.text:00000811                 mov     eax, [ebp+arg_4]
.text:00000814                 mov     edx, [eax+18h]
.text:00000817                 lea     eax, [ecx+edx-3FBF4CC0h]
.text:0000081E                 shl     eax, 9
.text:00000821                 mov     ecx, [ebp+var_4]
.text:00000824                 and     ecx, [ebp+var_C]
.text:00000827                 mov     edx, [ebp+var_C]
.text:0000082A                 not     edx
.text:0000082C                 and     edx, [ebp+var_8]
.text:0000082F                 or      ecx, edx
.text:00000831                 add     ecx, [ebp+var_10]
.text:00000834                 mov     edx, [ebp+arg_4]
.text:00000837                 mov     edx, [edx+18h]
.text:0000083A                 lea     ecx, [ecx+edx-3FBF4CC0h]
.text:00000841                 shr     ecx, 17h
.text:00000844                 or      eax, ecx
.text:00000846                 add     eax, [ebp+var_4]
.text:00000849                 mov     [ebp+var_10], eax
.text:0000084C                 mov     edx, [ebp+var_10]
.text:0000084F                 and     edx, [ebp+var_8]
.text:00000852                 mov     eax, [ebp+var_8]
.text:00000855                 not     eax
.text:00000857                 and     eax, [ebp+var_4]
.text:0000085A                 or      edx, eax
.text:0000085C                 add     edx, [ebp+var_C]
.text:0000085F                 mov     ecx, [ebp+arg_4]
.text:00000862                 mov     eax, [ecx+2Ch]
.text:00000865                 lea     ecx, [edx+eax+265E5A51h]
.text:0000086C                 shl     ecx, 0Eh
.text:0000086F                 mov     edx, [ebp+var_10]
.text:00000872                 and     edx, [ebp+var_8]
.text:00000875                 mov     eax, [ebp+var_8]
.text:00000878                 not     eax
.text:0000087A                 and     eax, [ebp+var_4]
.text:0000087D                 or      edx, eax
.text:0000087F                 add     edx, [ebp+var_C]
.text:00000882                 mov     eax, [ebp+arg_4]
.text:00000885                 mov     eax, [eax+2Ch]
.text:00000888                 lea     edx, [edx+eax+265E5A51h]
.text:0000088F                 shr     edx, 12h
.text:00000892                 or      ecx, edx
.text:00000894                 add     ecx, [ebp+var_10]
.text:00000897                 mov     [ebp+var_C], ecx
.text:0000089A                 mov     eax, [ebp+var_C]
.text:0000089D                 and     eax, [ebp+var_4]
.text:000008A0                 mov     ecx, [ebp+var_4]
.text:000008A3                 not     ecx
.text:000008A5                 and     ecx, [ebp+var_10]
.text:000008A8                 or      eax, ecx
.text:000008AA                 add     eax, [ebp+var_8]
.text:000008AD                 mov     edx, [ebp+arg_4]
.text:000008B0                 mov     ecx, [edx]
.text:000008B2                 lea     edx, [eax+ecx-16493856h]
.text:000008B9                 shl     edx, 14h
.text:000008BC                 mov     eax, [ebp+var_C]
.text:000008BF                 and     eax, [ebp+var_4]
.text:000008C2                 mov     ecx, [ebp+var_4]
.text:000008C5                 not     ecx
.text:000008C7                 and     ecx, [ebp+var_10]
.text:000008CA                 or      eax, ecx
.text:000008CC                 add     eax, [ebp+var_8]
.text:000008CF                 mov     ecx, [ebp+arg_4]
.text:000008D2                 mov     ecx, [ecx]
.text:000008D4                 lea     eax, [eax+ecx-16493856h]
.text:000008DB                 shr     eax, 0Ch
.text:000008DE                 or      edx, eax
.text:000008E0                 add     edx, [ebp+var_C]
.text:000008E3                 mov     [ebp+var_8], edx
.text:000008E6                 mov     ecx, [ebp+var_8]
.text:000008E9                 and     ecx, [ebp+var_10]
.text:000008EC                 mov     edx, [ebp+var_10]
.text:000008EF                 not     edx
.text:000008F1                 and     edx, [ebp+var_C]
.text:000008F4                 or      ecx, edx
.text:000008F6                 add     ecx, [ebp+var_4]
.text:000008F9                 mov     eax, [ebp+arg_4]
.text:000008FC                 mov     edx, [eax+14h]
.text:000008FF                 lea     eax, [ecx+edx-29D0EFA3h]
.text:00000906                 shl     eax, 5
.text:00000909                 mov     ecx, [ebp+var_8]
.text:0000090C                 and     ecx, [ebp+var_10]
.text:0000090F                 mov     edx, [ebp+var_10]
.text:00000912                 not     edx
.text:00000914                 and     edx, [ebp+var_C]
.text:00000917                 or      ecx, edx
.text:00000919                 add     ecx, [ebp+var_4]
.text:0000091C                 mov     edx, [ebp+arg_4]
.text:0000091F                 mov     edx, [edx+14h]
.text:00000922                 lea     ecx, [ecx+edx-29D0EFA3h]
.text:00000929                 shr     ecx, 1Bh
.text:0000092C                 or      eax, ecx
.text:0000092E                 add     eax, [ebp+var_8]
.text:00000931                 mov     [ebp+var_4], eax
.text:00000934                 mov     edx, [ebp+var_4]
.text:00000937                 and     edx, [ebp+var_C]
.text:0000093A                 mov     eax, [ebp+var_C]
.text:0000093D                 not     eax
.text:0000093F                 and     eax, [ebp+var_8]
.text:00000942                 or      edx, eax
.text:00000944                 add     edx, [ebp+var_10]
.text:00000947                 mov     ecx, [ebp+arg_4]
.text:0000094A                 mov     eax, [ecx+28h]
.text:0000094D                 lea     ecx, [edx+eax+2441453h]
.text:00000954                 shl     ecx, 9
.text:00000957                 mov     edx, [ebp+var_4]
.text:0000095A                 and     edx, [ebp+var_C]
.text:0000095D                 mov     eax, [ebp+var_C]
.text:00000960                 not     eax
.text:00000962                 and     eax, [ebp+var_8]
.text:00000965                 or      edx, eax
.text:00000967                 add     edx, [ebp+var_10]
.text:0000096A                 mov     eax, [ebp+arg_4]
.text:0000096D                 mov     eax, [eax+28h]
.text:00000970                 lea     edx, [edx+eax+2441453h]
.text:00000977                 shr     edx, 17h
.text:0000097A                 or      ecx, edx
.text:0000097C                 add     ecx, [ebp+var_4]
.text:0000097F                 mov     [ebp+var_10], ecx
.text:00000982                 mov     eax, [ebp+var_10]
.text:00000985                 and     eax, [ebp+var_8]
.text:00000988                 mov     ecx, [ebp+var_8]
.text:0000098B                 not     ecx
.text:0000098D                 and     ecx, [ebp+var_4]
.text:00000990                 or      eax, ecx
.text:00000992                 add     eax, [ebp+var_C]
.text:00000995                 mov     edx, [ebp+arg_4]
.text:00000998                 mov     ecx, [edx+3Ch]
.text:0000099B                 lea     edx, [eax+ecx-275E197Fh]
.text:000009A2                 shl     edx, 0Eh
.text:000009A5                 mov     eax, [ebp+var_10]
.text:000009A8                 and     eax, [ebp+var_8]
.text:000009AB                 mov     ecx, [ebp+var_8]
.text:000009AE                 not     ecx
.text:000009B0                 and     ecx, [ebp+var_4]
.text:000009B3                 or      eax, ecx
.text:000009B5                 add     eax, [ebp+var_C]
.text:000009B8                 mov     ecx, [ebp+arg_4]
.text:000009BB                 mov     ecx, [ecx+3Ch]
.text:000009BE                 lea     eax, [eax+ecx-275E197Fh]
.text:000009C5                 shr     eax, 12h
.text:000009C8                 or      edx, eax
.text:000009CA                 add     edx, [ebp+var_10]
.text:000009CD                 mov     [ebp+var_C], edx
.text:000009D0                 mov     ecx, [ebp+var_C]
.text:000009D3                 and     ecx, [ebp+var_4]
.text:000009D6                 mov     edx, [ebp+var_4]
.text:000009D9                 not     edx
.text:000009DB                 and     edx, [ebp+var_10]
.text:000009DE                 or      ecx, edx
.text:000009E0                 add     ecx, [ebp+var_8]
.text:000009E3                 mov     eax, [ebp+arg_4]
.text:000009E6                 mov     edx, [eax+10h]
.text:000009E9                 lea     eax, [ecx+edx-182C0438h]
.text:000009F0                 shl     eax, 14h
.text:000009F3                 mov     ecx, [ebp+var_C]
.text:000009F6                 and     ecx, [ebp+var_4]
.text:000009F9                 mov     edx, [ebp+var_4]
.text:000009FC                 not     edx
.text:000009FE                 and     edx, [ebp+var_10]
.text:00000A01                 or      ecx, edx
.text:00000A03                 add     ecx, [ebp+var_8]
.text:00000A06                 mov     edx, [ebp+arg_4]
.text:00000A09                 mov     edx, [edx+10h]
.text:00000A0C                 lea     ecx, [ecx+edx-182C0438h]
.text:00000A13                 shr     ecx, 0Ch
.text:00000A16                 or      eax, ecx
.text:00000A18                 add     eax, [ebp+var_C]
.text:00000A1B                 mov     [ebp+var_8], eax
.text:00000A1E                 mov     edx, [ebp+var_8]
.text:00000A21                 and     edx, [ebp+var_10]
.text:00000A24                 mov     eax, [ebp+var_10]
.text:00000A27                 not     eax
.text:00000A29                 and     eax, [ebp+var_C]
.text:00000A2C                 or      edx, eax
.text:00000A2E                 add     edx, [ebp+var_4]
.text:00000A31                 mov     ecx, [ebp+arg_4]
.text:00000A34                 mov     eax, [ecx+24h]
.text:00000A37                 lea     ecx, [edx+eax+21E1CDE6h]
.text:00000A3E                 shl     ecx, 5
.text:00000A41                 mov     edx, [ebp+var_8]
.text:00000A44                 and     edx, [ebp+var_10]
.text:00000A47                 mov     eax, [ebp+var_10]
.text:00000A4A                 not     eax
.text:00000A4C                 and     eax, [ebp+var_C]
.text:00000A4F                 or      edx, eax
.text:00000A51                 add     edx, [ebp+var_4]
.text:00000A54                 mov     eax, [ebp+arg_4]
.text:00000A57                 mov     eax, [eax+24h]
.text:00000A5A                 lea     edx, [edx+eax+21E1CDE6h]
.text:00000A61                 shr     edx, 1Bh
.text:00000A64                 or      ecx, edx
.text:00000A66                 add     ecx, [ebp+var_8]
.text:00000A69                 mov     [ebp+var_4], ecx
.text:00000A6C                 mov     eax, [ebp+var_4]
.text:00000A6F                 and     eax, [ebp+var_C]
.text:00000A72                 mov     ecx, [ebp+var_C]
.text:00000A75                 not     ecx
.text:00000A77                 and     ecx, [ebp+var_8]
.text:00000A7A                 or      eax, ecx
.text:00000A7C                 add     eax, [ebp+var_10]
.text:00000A7F                 mov     edx, [ebp+arg_4]
.text:00000A82                 mov     ecx, [edx+38h]
.text:00000A85                 lea     edx, [eax+ecx-3CC8F82Ah]
.text:00000A8C                 shl     edx, 9
.text:00000A8F                 mov     eax, [ebp+var_4]
.text:00000A92                 and     eax, [ebp+var_C]
.text:00000A95                 mov     ecx, [ebp+var_C]
.text:00000A98                 not     ecx
.text:00000A9A                 and     ecx, [ebp+var_8]
.text:00000A9D                 or      eax, ecx
.text:00000A9F                 add     eax, [ebp+var_10]
.text:00000AA2                 mov     ecx, [ebp+arg_4]
.text:00000AA5                 mov     ecx, [ecx+38h]
.text:00000AA8                 lea     eax, [eax+ecx-3CC8F82Ah]
.text:00000AAF                 shr     eax, 17h
.text:00000AB2                 or      edx, eax
.text:00000AB4                 add     edx, [ebp+var_4]
.text:00000AB7                 mov     [ebp+var_10], edx
.text:00000ABA                 mov     ecx, [ebp+var_10]
.text:00000ABD                 and     ecx, [ebp+var_8]
.text:00000AC0                 mov     edx, [ebp+var_8]
.text:00000AC3                 not     edx
.text:00000AC5                 and     edx, [ebp+var_4]
.text:00000AC8                 or      ecx, edx
.text:00000ACA                 add     ecx, [ebp+var_C]
.text:00000ACD                 mov     eax, [ebp+arg_4]
.text:00000AD0                 mov     edx, [eax+0Ch]
.text:00000AD3                 lea     eax, [ecx+edx-0B2AF279h]
.text:00000ADA                 shl     eax, 0Eh
.text:00000ADD                 mov     ecx, [ebp+var_10]
.text:00000AE0                 and     ecx, [ebp+var_8]
.text:00000AE3                 mov     edx, [ebp+var_8]
.text:00000AE6                 not     edx
.text:00000AE8                 and     edx, [ebp+var_4]
.text:00000AEB                 or      ecx, edx
.text:00000AED                 add     ecx, [ebp+var_C]
.text:00000AF0                 mov     edx, [ebp+arg_4]
.text:00000AF3                 mov     edx, [edx+0Ch]
.text:00000AF6                 lea     ecx, [ecx+edx-0B2AF279h]
.text:00000AFD                 shr     ecx, 12h
.text:00000B00                 or      eax, ecx
.text:00000B02                 add     eax, [ebp+var_10]
.text:00000B05                 mov     [ebp+var_C], eax
.text:00000B08                 mov     edx, [ebp+var_C]
.text:00000B0B                 and     edx, [ebp+var_4]
.text:00000B0E                 mov     eax, [ebp+var_4]
.text:00000B11                 not     eax
.text:00000B13                 and     eax, [ebp+var_10]
.text:00000B16                 or      edx, eax
.text:00000B18                 add     edx, [ebp+var_8]
.text:00000B1B                 mov     ecx, [ebp+arg_4]
.text:00000B1E                 mov     eax, [ecx+20h]
.text:00000B21                 lea     ecx, [edx+eax+455A14EDh]
.text:00000B28                 shl     ecx, 14h
.text:00000B2B                 mov     edx, [ebp+var_C]
.text:00000B2E                 and     edx, [ebp+var_4]
.text:00000B31                 mov     eax, [ebp+var_4]
.text:00000B34                 not     eax
.text:00000B36                 and     eax, [ebp+var_10]
.text:00000B39                 or      edx, eax
.text:00000B3B                 add     edx, [ebp+var_8]
.text:00000B3E                 mov     eax, [ebp+arg_4]
.text:00000B41                 mov     eax, [eax+20h]
.text:00000B44                 lea     edx, [edx+eax+455A14EDh]
.text:00000B4B                 shr     edx, 0Ch
.text:00000B4E                 or      ecx, edx
.text:00000B50                 add     ecx, [ebp+var_C]
.text:00000B53                 mov     [ebp+var_8], ecx
.text:00000B56                 mov     eax, [ebp+var_8]
.text:00000B59                 and     eax, [ebp+var_10]
.text:00000B5C                 mov     ecx, [ebp+var_10]
.text:00000B5F                 not     ecx
.text:00000B61                 and     ecx, [ebp+var_C]
.text:00000B64                 or      eax, ecx
.text:00000B66                 add     eax, [ebp+var_4]
.text:00000B69                 mov     edx, [ebp+arg_4]
.text:00000B6C                 mov     ecx, [edx+34h]
.text:00000B6F                 lea     edx, [eax+ecx-561C16FBh]
.text:00000B76                 shl     edx, 5
.text:00000B79                 mov     eax, [ebp+var_8]
.text:00000B7C                 and     eax, [ebp+var_10]
.text:00000B7F                 mov     ecx, [ebp+var_10]
.text:00000B82                 not     ecx
.text:00000B84                 and     ecx, [ebp+var_C]
.text:00000B87                 or      eax, ecx
.text:00000B89                 add     eax, [ebp+var_4]
.text:00000B8C                 mov     ecx, [ebp+arg_4]
.text:00000B8F                 mov     ecx, [ecx+34h]
.text:00000B92                 lea     eax, [eax+ecx-561C16FBh]
.text:00000B99                 shr     eax, 1Bh
.text:00000B9C                 or      edx, eax
.text:00000B9E                 add     edx, [ebp+var_8]
.text:00000BA1                 mov     [ebp+var_4], edx
.text:00000BA4                 mov     ecx, [ebp+var_4]
.text:00000BA7                 and     ecx, [ebp+var_C]
.text:00000BAA                 mov     edx, [ebp+var_C]
.text:00000BAD                 not     edx
.text:00000BAF                 and     edx, [ebp+var_8]
.text:00000BB2                 or      ecx, edx
.text:00000BB4                 add     ecx, [ebp+var_10]
.text:00000BB7                 mov     eax, [ebp+arg_4]
.text:00000BBA                 mov     edx, [eax+8]
.text:00000BBD                 lea     eax, [ecx+edx-3105C08h]
.text:00000BC4                 shl     eax, 9
.text:00000BC7                 mov     ecx, [ebp+var_4]
.text:00000BCA                 and     ecx, [ebp+var_C]
.text:00000BCD                 mov     edx, [ebp+var_C]
.text:00000BD0                 not     edx
.text:00000BD2                 and     edx, [ebp+var_8]
.text:00000BD5                 or      ecx, edx
.text:00000BD7                 add     ecx, [ebp+var_10]
.text:00000BDA                 mov     edx, [ebp+arg_4]
.text:00000BDD                 mov     edx, [edx+8]
.text:00000BE0                 lea     ecx, [ecx+edx-3105C08h]
.text:00000BE7                 shr     ecx, 17h
.text:00000BEA                 or      eax, ecx
.text:00000BEC                 add     eax, [ebp+var_4]
.text:00000BEF                 mov     [ebp+var_10], eax
.text:00000BF2                 mov     edx, [ebp+var_10]
.text:00000BF5                 and     edx, [ebp+var_8]
.text:00000BF8                 mov     eax, [ebp+var_8]
.text:00000BFB                 not     eax
.text:00000BFD                 and     eax, [ebp+var_4]
.text:00000C00                 or      edx, eax
.text:00000C02                 add     edx, [ebp+var_C]
.text:00000C05                 mov     ecx, [ebp+arg_4]
.text:00000C08                 mov     eax, [ecx+1Ch]
.text:00000C0B                 lea     ecx, [edx+eax+676F02D9h]
.text:00000C12                 shl     ecx, 0Eh
.text:00000C15                 mov     edx, [ebp+var_10]
.text:00000C18                 and     edx, [ebp+var_8]
.text:00000C1B                 mov     eax, [ebp+var_8]
.text:00000C1E                 not     eax
.text:00000C20                 and     eax, [ebp+var_4]
.text:00000C23                 or      edx, eax
.text:00000C25                 add     edx, [ebp+var_C]
.text:00000C28                 mov     eax, [ebp+arg_4]
.text:00000C2B                 mov     eax, [eax+1Ch]
.text:00000C2E                 lea     edx, [edx+eax+676F02D9h]
.text:00000C35                 shr     edx, 12h
.text:00000C38                 or      ecx, edx
.text:00000C3A                 add     ecx, [ebp+var_10]
.text:00000C3D                 mov     [ebp+var_C], ecx
.text:00000C40                 mov     eax, [ebp+var_C]
.text:00000C43                 and     eax, [ebp+var_4]
.text:00000C46                 mov     ecx, [ebp+var_4]
.text:00000C49                 not     ecx
.text:00000C4B                 and     ecx, [ebp+var_10]
.text:00000C4E                 or      eax, ecx
.text:00000C50                 add     eax, [ebp+var_8]
.text:00000C53                 mov     edx, [ebp+arg_4]
.text:00000C56                 mov     ecx, [edx+30h]
.text:00000C59                 lea     edx, [eax+ecx-72D5B376h]
.text:00000C60                 shl     edx, 14h
.text:00000C63                 mov     eax, [ebp+var_C]
.text:00000C66                 and     eax, [ebp+var_4]
.text:00000C69                 mov     ecx, [ebp+var_4]
.text:00000C6C                 not     ecx
.text:00000C6E                 and     ecx, [ebp+var_10]
.text:00000C71                 or      eax, ecx
.text:00000C73                 add     eax, [ebp+var_8]
.text:00000C76                 mov     ecx, [ebp+arg_4]
.text:00000C79                 mov     ecx, [ecx+30h]
.text:00000C7C                 lea     eax, [eax+ecx-72D5B376h]
.text:00000C83                 shr     eax, 0Ch
.text:00000C86                 or      edx, eax
.text:00000C88                 add     edx, [ebp+var_C]
.text:00000C8B                 mov     [ebp+var_8], edx
.text:00000C8E                 mov     ecx, [ebp+var_8]
.text:00000C91                 xor     ecx, [ebp+var_C]
.text:00000C94                 xor     ecx, [ebp+var_10]
.text:00000C97                 add     ecx, [ebp+var_4]
.text:00000C9A                 mov     edx, [ebp+arg_4]
.text:00000C9D                 mov     eax, [edx+14h]
.text:00000CA0                 lea     ecx, [ecx+eax-5C6BEh]
.text:00000CA7                 shl     ecx, 4
.text:00000CAA                 mov     edx, [ebp+var_8]
.text:00000CAD                 xor     edx, [ebp+var_C]
.text:00000CB0                 xor     edx, [ebp+var_10]
.text:00000CB3                 add     edx, [ebp+var_4]
.text:00000CB6                 mov     eax, [ebp+arg_4]
.text:00000CB9                 mov     eax, [eax+14h]
.text:00000CBC                 lea     edx, [edx+eax-5C6BEh]
.text:00000CC3                 shr     edx, 1Ch
.text:00000CC6                 or      ecx, edx
.text:00000CC8                 add     ecx, [ebp+var_8]
.text:00000CCB                 mov     [ebp+var_4], ecx
.text:00000CCE                 mov     eax, [ebp+var_4]
.text:00000CD1                 xor     eax, [ebp+var_8]
.text:00000CD4                 xor     eax, [ebp+var_C]
.text:00000CD7                 add     eax, [ebp+var_10]
.text:00000CDA                 mov     ecx, [ebp+arg_4]
.text:00000CDD                 mov     edx, [ecx+20h]
.text:00000CE0                 lea     eax, [eax+edx-788E097Fh]
.text:00000CE7                 shl     eax, 0Bh
.text:00000CEA                 mov     ecx, [ebp+var_4]
.text:00000CED                 xor     ecx, [ebp+var_8]
.text:00000CF0                 xor     ecx, [ebp+var_C]
.text:00000CF3                 add     ecx, [ebp+var_10]
.text:00000CF6                 mov     edx, [ebp+arg_4]
.text:00000CF9                 mov     edx, [edx+20h]
.text:00000CFC                 lea     ecx, [ecx+edx-788E097Fh]
.text:00000D03                 shr     ecx, 15h
.text:00000D06                 or      eax, ecx
.text:00000D08                 add     eax, [ebp+var_4]
.text:00000D0B                 mov     [ebp+var_10], eax
.text:00000D0E                 mov     edx, [ebp+var_10]
.text:00000D11                 xor     edx, [ebp+var_4]
.text:00000D14                 xor     edx, [ebp+var_8]
.text:00000D17                 add     edx, [ebp+var_C]
.text:00000D1A                 mov     eax, [ebp+arg_4]
.text:00000D1D                 mov     ecx, [eax+2Ch]
.text:00000D20                 lea     edx, [edx+ecx+6D9D6122h]
.text:00000D27                 shl     edx, 10h
.text:00000D2A                 mov     eax, [ebp+var_10]
.text:00000D2D                 xor     eax, [ebp+var_4]
.text:00000D30                 xor     eax, [ebp+var_8]
.text:00000D33                 add     eax, [ebp+var_C]
.text:00000D36                 mov     ecx, [ebp+arg_4]
.text:00000D39                 mov     ecx, [ecx+2Ch]
.text:00000D3C                 lea     eax, [eax+ecx+6D9D6122h]
.text:00000D43                 shr     eax, 10h
.text:00000D46                 or      edx, eax
.text:00000D48                 add     edx, [ebp+var_10]
.text:00000D4B                 mov     [ebp+var_C], edx
.text:00000D4E                 mov     ecx, [ebp+var_C]
.text:00000D51                 xor     ecx, [ebp+var_10]
.text:00000D54                 xor     ecx, [ebp+var_4]
.text:00000D57                 add     ecx, [ebp+var_8]
.text:00000D5A                 mov     edx, [ebp+arg_4]
.text:00000D5D                 mov     eax, [edx+38h]
.text:00000D60                 lea     ecx, [ecx+eax-21AC7F4h]
.text:00000D67                 shl     ecx, 17h
.text:00000D6A                 mov     edx, [ebp+var_C]
.text:00000D6D                 xor     edx, [ebp+var_10]
.text:00000D70                 xor     edx, [ebp+var_4]
.text:00000D73                 add     edx, [ebp+var_8]
.text:00000D76                 mov     eax, [ebp+arg_4]
.text:00000D79                 mov     eax, [eax+38h]
.text:00000D7C                 lea     edx, [edx+eax-21AC7F4h]
.text:00000D83                 shr     edx, 9
.text:00000D86                 or      ecx, edx
.text:00000D88                 add     ecx, [ebp+var_C]
.text:00000D8B                 mov     [ebp+var_8], ecx
.text:00000D8E                 mov     eax, [ebp+var_8]
.text:00000D91                 xor     eax, [ebp+var_C]
.text:00000D94                 xor     eax, [ebp+var_10]
.text:00000D97                 add     eax, [ebp+var_4]
.text:00000D9A                 mov     ecx, [ebp+arg_4]
.text:00000D9D                 mov     edx, [ecx+4]
.text:00000DA0                 lea     eax, [eax+edx-5B4115BCh]
.text:00000DA7                 shl     eax, 4
.text:00000DAA                 mov     ecx, [ebp+var_8]
.text:00000DAD                 xor     ecx, [ebp+var_C]
.text:00000DB0                 xor     ecx, [ebp+var_10]
.text:00000DB3                 add     ecx, [ebp+var_4]
.text:00000DB6                 mov     edx, [ebp+arg_4]
.text:00000DB9                 mov     edx, [edx+4]
.text:00000DBC                 lea     ecx, [ecx+edx-5B4115BCh]
.text:00000DC3                 shr     ecx, 1Ch
.text:00000DC6                 or      eax, ecx
.text:00000DC8                 add     eax, [ebp+var_8]
.text:00000DCB                 mov     [ebp+var_4], eax
.text:00000DCE                 mov     edx, [ebp+var_4]
.text:00000DD1                 xor     edx, [ebp+var_8]
.text:00000DD4                 xor     edx, [ebp+var_C]
.text:00000DD7                 add     edx, [ebp+var_10]
.text:00000DDA                 mov     eax, [ebp+arg_4]
.text:00000DDD                 mov     ecx, [eax+10h]
.text:00000DE0                 lea     edx, [edx+ecx+4BDECFA9h]
.text:00000DE7                 shl     edx, 0Bh
.text:00000DEA                 mov     eax, [ebp+var_4]
.text:00000DED                 xor     eax, [ebp+var_8]
.text:00000DF0                 xor     eax, [ebp+var_C]
.text:00000DF3                 add     eax, [ebp+var_10]
.text:00000DF6                 mov     ecx, [ebp+arg_4]
.text:00000DF9                 mov     ecx, [ecx+10h]
.text:00000DFC                 lea     eax, [eax+ecx+4BDECFA9h]
.text:00000E03                 shr     eax, 15h
.text:00000E06                 or      edx, eax
.text:00000E08                 add     edx, [ebp+var_4]
.text:00000E0B                 mov     [ebp+var_10], edx
.text:00000E0E                 mov     ecx, [ebp+var_10]
.text:00000E11                 xor     ecx, [ebp+var_4]
.text:00000E14                 xor     ecx, [ebp+var_8]
.text:00000E17                 add     ecx, [ebp+var_C]
.text:00000E1A                 mov     edx, [ebp+arg_4]
.text:00000E1D                 mov     eax, [edx+1Ch]
.text:00000E20                 lea     ecx, [ecx+eax-944B4A0h]
.text:00000E27                 shl     ecx, 10h
.text:00000E2A                 mov     edx, [ebp+var_10]
.text:00000E2D                 xor     edx, [ebp+var_4]
.text:00000E30                 xor     edx, [ebp+var_8]
.text:00000E33                 add     edx, [ebp+var_C]
.text:00000E36                 mov     eax, [ebp+arg_4]
.text:00000E39                 mov     eax, [eax+1Ch]
.text:00000E3C                 lea     edx, [edx+eax-944B4A0h]
.text:00000E43                 shr     edx, 10h
.text:00000E46                 or      ecx, edx
.text:00000E48                 add     ecx, [ebp+var_10]
.text:00000E4B                 mov     [ebp+var_C], ecx
.text:00000E4E                 mov     eax, [ebp+var_C]
.text:00000E51                 xor     eax, [ebp+var_10]
.text:00000E54                 xor     eax, [ebp+var_4]
.text:00000E57                 add     eax, [ebp+var_8]
.text:00000E5A                 mov     ecx, [ebp+arg_4]
.text:00000E5D                 mov     edx, [ecx+28h]
.text:00000E60                 lea     eax, [eax+edx-41404390h]
.text:00000E67                 shl     eax, 17h
.text:00000E6A                 mov     ecx, [ebp+var_C]
.text:00000E6D                 xor     ecx, [ebp+var_10]
.text:00000E70                 xor     ecx, [ebp+var_4]
.text:00000E73                 add     ecx, [ebp+var_8]
.text:00000E76                 mov     edx, [ebp+arg_4]
.text:00000E79                 mov     edx, [edx+28h]
.text:00000E7C                 lea     ecx, [ecx+edx-41404390h]
.text:00000E83                 shr     ecx, 9
.text:00000E86                 or      eax, ecx
.text:00000E88                 add     eax, [ebp+var_C]
.text:00000E8B                 mov     [ebp+var_8], eax
.text:00000E8E                 mov     edx, [ebp+var_8]
.text:00000E91                 xor     edx, [ebp+var_C]
.text:00000E94                 xor     edx, [ebp+var_10]
.text:00000E97                 add     edx, [ebp+var_4]
.text:00000E9A                 mov     eax, [ebp+arg_4]
.text:00000E9D                 mov     ecx, [eax+34h]
.text:00000EA0                 lea     edx, [edx+ecx+289B7EC6h]
.text:00000EA7                 shl     edx, 4
.text:00000EAA                 mov     eax, [ebp+var_8]
.text:00000EAD                 xor     eax, [ebp+var_C]
.text:00000EB0                 xor     eax, [ebp+var_10]
.text:00000EB3                 add     eax, [ebp+var_4]
.text:00000EB6                 mov     ecx, [ebp+arg_4]
.text:00000EB9                 mov     ecx, [ecx+34h]
.text:00000EBC                 lea     eax, [eax+ecx+289B7EC6h]
.text:00000EC3                 shr     eax, 1Ch
.text:00000EC6                 or      edx, eax
.text:00000EC8                 add     edx, [ebp+var_8]
.text:00000ECB                 mov     [ebp+var_4], edx
.text:00000ECE                 mov     ecx, [ebp+var_4]
.text:00000ED1                 xor     ecx, [ebp+var_8]
.text:00000ED4                 xor     ecx, [ebp+var_C]
.text:00000ED7                 add     ecx, [ebp+var_10]
.text:00000EDA                 mov     edx, [ebp+arg_4]
.text:00000EDD                 mov     eax, [edx]
.text:00000EDF                 lea     ecx, [ecx+eax-155ED806h]
.text:00000EE6                 shl     ecx, 0Bh
.text:00000EE9                 mov     edx, [ebp+var_4]
.text:00000EEC                 xor     edx, [ebp+var_8]
.text:00000EEF                 xor     edx, [ebp+var_C]
.text:00000EF2                 add     edx, [ebp+var_10]
.text:00000EF5                 mov     eax, [ebp+arg_4]
.text:00000EF8                 mov     eax, [eax]
.text:00000EFA                 lea     edx, [edx+eax-155ED806h]
.text:00000F01                 shr     edx, 15h
.text:00000F04                 or      ecx, edx
.text:00000F06                 add     ecx, [ebp+var_4]
.text:00000F09                 mov     [ebp+var_10], ecx
.text:00000F0C                 mov     eax, [ebp+var_10]
.text:00000F0F                 xor     eax, [ebp+var_4]
.text:00000F12                 xor     eax, [ebp+var_8]
.text:00000F15                 add     eax, [ebp+var_C]
.text:00000F18                 mov     ecx, [ebp+arg_4]
.text:00000F1B                 mov     edx, [ecx+0Ch]
.text:00000F1E                 lea     eax, [eax+edx-2B10CF7Bh]
.text:00000F25                 shl     eax, 10h
.text:00000F28                 mov     ecx, [ebp+var_10]
.text:00000F2B                 xor     ecx, [ebp+var_4]
.text:00000F2E                 xor     ecx, [ebp+var_8]
.text:00000F31                 add     ecx, [ebp+var_C]
.text:00000F34                 mov     edx, [ebp+arg_4]
.text:00000F37                 mov     edx, [edx+0Ch]
.text:00000F3A                 lea     ecx, [ecx+edx-2B10CF7Bh]
.text:00000F41                 shr     ecx, 10h
.text:00000F44                 or      eax, ecx
.text:00000F46                 add     eax, [ebp+var_10]
.text:00000F49                 mov     [ebp+var_C], eax
.text:00000F4C                 mov     edx, [ebp+var_C]
.text:00000F4F                 xor     edx, [ebp+var_10]
.text:00000F52                 xor     edx, [ebp+var_4]
.text:00000F55                 add     edx, [ebp+var_8]
.text:00000F58                 mov     eax, [ebp+arg_4]
.text:00000F5B                 mov     ecx, [eax+18h]
.text:00000F5E                 lea     edx, [edx+ecx+4881D05h]
.text:00000F65                 shl     edx, 17h
.text:00000F68                 mov     eax, [ebp+var_C]
.text:00000F6B                 xor     eax, [ebp+var_10]
.text:00000F6E                 xor     eax, [ebp+var_4]
.text:00000F71                 add     eax, [ebp+var_8]
.text:00000F74                 mov     ecx, [ebp+arg_4]
.text:00000F77                 mov     ecx, [ecx+18h]
.text:00000F7A                 lea     eax, [eax+ecx+4881D05h]
.text:00000F81                 shr     eax, 9
.text:00000F84                 or      edx, eax
.text:00000F86                 add     edx, [ebp+var_C]
.text:00000F89                 mov     [ebp+var_8], edx
.text:00000F8C                 mov     ecx, [ebp+var_8]
.text:00000F8F                 xor     ecx, [ebp+var_C]
.text:00000F92                 xor     ecx, [ebp+var_10]
.text:00000F95                 add     ecx, [ebp+var_4]
.text:00000F98                 mov     edx, [ebp+arg_4]
.text:00000F9B                 mov     eax, [edx+24h]
.text:00000F9E                 lea     ecx, [ecx+eax-262B2FC7h]
.text:00000FA5                 shl     ecx, 4
.text:00000FA8                 mov     edx, [ebp+var_8]
.text:00000FAB                 xor     edx, [ebp+var_C]
.text:00000FAE                 xor     edx, [ebp+var_10]
.text:00000FB1                 add     edx, [ebp+var_4]
.text:00000FB4                 mov     eax, [ebp+arg_4]
.text:00000FB7                 mov     eax, [eax+24h]
.text:00000FBA                 lea     edx, [edx+eax-262B2FC7h]
.text:00000FC1                 shr     edx, 1Ch
.text:00000FC4                 or      ecx, edx
.text:00000FC6                 add     ecx, [ebp+var_8]
.text:00000FC9                 mov     [ebp+var_4], ecx
.text:00000FCC                 mov     eax, [ebp+var_4]
.text:00000FCF                 xor     eax, [ebp+var_8]
.text:00000FD2                 xor     eax, [ebp+var_C]
.text:00000FD5                 add     eax, [ebp+var_10]
.text:00000FD8                 mov     ecx, [ebp+arg_4]
.text:00000FDB                 mov     edx, [ecx+30h]
.text:00000FDE                 lea     eax, [eax+edx-1924661Bh]
.text:00000FE5                 shl     eax, 0Bh
.text:00000FE8                 mov     ecx, [ebp+var_4]
.text:00000FEB                 xor     ecx, [ebp+var_8]
.text:00000FEE                 xor     ecx, [ebp+var_C]
.text:00000FF1                 add     ecx, [ebp+var_10]
.text:00000FF4                 mov     edx, [ebp+arg_4]
.text:00000FF7                 mov     edx, [edx+30h]
.text:00000FFA                 lea     ecx, [ecx+edx-1924661Bh]
.text:00001001                 shr     ecx, 15h
.text:00001004                 or      eax, ecx
.text:00001006                 add     eax, [ebp+var_4]
.text:00001009                 mov     [ebp+var_10], eax
.text:0000100C                 mov     edx, [ebp+var_10]
.text:0000100F                 xor     edx, [ebp+var_4]
.text:00001012                 xor     edx, [ebp+var_8]
.text:00001015                 add     edx, [ebp+var_C]
.text:00001018                 mov     eax, [ebp+arg_4]
.text:0000101B                 mov     ecx, [eax+3Ch]
.text:0000101E                 lea     edx, [edx+ecx+1FA27CF8h]
.text:00001025                 shl     edx, 10h
.text:00001028                 mov     eax, [ebp+var_10]
.text:0000102B                 xor     eax, [ebp+var_4]
.text:0000102E                 xor     eax, [ebp+var_8]
.text:00001031                 add     eax, [ebp+var_C]
.text:00001034                 mov     ecx, [ebp+arg_4]
.text:00001037                 mov     ecx, [ecx+3Ch]
.text:0000103A                 lea     eax, [eax+ecx+1FA27CF8h]
.text:00001041                 shr     eax, 10h
.text:00001044                 or      edx, eax
.text:00001046                 add     edx, [ebp+var_10]
.text:00001049                 mov     [ebp+var_C], edx
.text:0000104C                 mov     ecx, [ebp+var_C]
.text:0000104F                 xor     ecx, [ebp+var_10]
.text:00001052                 xor     ecx, [ebp+var_4]
.text:00001055                 add     ecx, [ebp+var_8]
.text:00001058                 mov     edx, [ebp+arg_4]
.text:0000105B                 mov     eax, [edx+8]
.text:0000105E                 lea     ecx, [ecx+eax-3B53A99Bh]
.text:00001065                 shl     ecx, 17h
.text:00001068                 mov     edx, [ebp+var_C]
.text:0000106B                 xor     edx, [ebp+var_10]
.text:0000106E                 xor     edx, [ebp+var_4]
.text:00001071                 add     edx, [ebp+var_8]
.text:00001074                 mov     eax, [ebp+arg_4]
.text:00001077                 mov     eax, [eax+8]
.text:0000107A                 lea     edx, [edx+eax-3B53A99Bh]
.text:00001081                 shr     edx, 9
.text:00001084                 or      ecx, edx
.text:00001086                 add     ecx, [ebp+var_C]
.text:00001089                 mov     [ebp+var_8], ecx
.text:0000108C                 mov     eax, [ebp+var_10]
.text:0000108F                 not     eax
.text:00001091                 or      eax, [ebp+var_8]
.text:00001094                 xor     eax, [ebp+var_C]
.text:00001097                 add     eax, [ebp+var_4]
.text:0000109A                 mov     ecx, [ebp+arg_4]
.text:0000109D                 mov     edx, [ecx]
.text:0000109F                 lea     eax, [eax+edx-0BD6DDBCh]
.text:000010A6                 shl     eax, 6
.text:000010A9                 mov     ecx, [ebp+var_10]
.text:000010AC                 not     ecx
.text:000010AE                 or      ecx, [ebp+var_8]
.text:000010B1                 xor     ecx, [ebp+var_C]
.text:000010B4                 add     ecx, [ebp+var_4]
.text:000010B7                 mov     edx, [ebp+arg_4]
.text:000010BA                 mov     edx, [edx]
.text:000010BC                 lea     ecx, [ecx+edx-0BD6DDBCh]
.text:000010C3                 shr     ecx, 1Ah
.text:000010C6                 or      eax, ecx
.text:000010C8                 add     eax, [ebp+var_8]
.text:000010CB                 mov     [ebp+var_4], eax
.text:000010CE                 mov     edx, [ebp+var_C]
.text:000010D1                 not     edx
.text:000010D3                 or      edx, [ebp+var_4]
.text:000010D6                 xor     edx, [ebp+var_8]
.text:000010D9                 add     edx, [ebp+var_10]
.text:000010DC                 mov     eax, [ebp+arg_4]
.text:000010DF                 mov     ecx, [eax+1Ch]
.text:000010E2                 lea     edx, [edx+ecx+432AFF97h]
.text:000010E9                 shl     edx, 0Ah
.text:000010EC                 mov     eax, [ebp+var_C]
.text:000010EF                 not     eax
.text:000010F1                 or      eax, [ebp+var_4]
.text:000010F4                 xor     eax, [ebp+var_8]
.text:000010F7                 add     eax, [ebp+var_10]
.text:000010FA                 mov     ecx, [ebp+arg_4]
.text:000010FD                 mov     ecx, [ecx+1Ch]
.text:00001100                 lea     eax, [eax+ecx+432AFF97h]
.text:00001107                 shr     eax, 16h
.text:0000110A                 or      edx, eax
.text:0000110C                 add     edx, [ebp+var_4]
.text:0000110F                 mov     [ebp+var_10], edx
.text:00001112                 mov     ecx, [ebp+var_8]
.text:00001115                 not     ecx
.text:00001117                 or      ecx, [ebp+var_10]
.text:0000111A                 xor     ecx, [ebp+var_4]
.text:0000111D                 add     ecx, [ebp+var_C]
.text:00001120                 mov     edx, [ebp+arg_4]
.text:00001123                 mov     eax, [edx+38h]
.text:00001126                 lea     ecx, [ecx+eax-546BDC59h]
.text:0000112D                 shl     ecx, 0Fh
.text:00001130                 mov     edx, [ebp+var_8]
.text:00001133                 not     edx
.text:00001135                 or      edx, [ebp+var_10]
.text:00001138                 xor     edx, [ebp+var_4]
.text:0000113B                 add     edx, [ebp+var_C]
.text:0000113E                 mov     eax, [ebp+arg_4]
.text:00001141                 mov     eax, [eax+38h]
.text:00001144                 lea     edx, [edx+eax-546BDC59h]
.text:0000114B                 shr     edx, 11h
.text:0000114E                 or      ecx, edx
.text:00001150                 add     ecx, [ebp+var_10]
.text:00001153                 mov     [ebp+var_C], ecx
.text:00001156                 mov     eax, [ebp+var_4]
.text:00001159                 not     eax
.text:0000115B                 or      eax, [ebp+var_C]
.text:0000115E                 xor     eax, [ebp+var_10]
.text:00001161                 add     eax, [ebp+var_8]
.text:00001164                 mov     ecx, [ebp+arg_4]
.text:00001167                 mov     edx, [ecx+14h]
.text:0000116A                 lea     eax, [eax+edx-36C5FC7h]
.text:00001171                 shl     eax, 15h
.text:00001174                 mov     ecx, [ebp+var_4]
.text:00001177                 not     ecx
.text:00001179                 or      ecx, [ebp+var_C]
.text:0000117C                 xor     ecx, [ebp+var_10]
.text:0000117F                 add     ecx, [ebp+var_8]
.text:00001182                 mov     edx, [ebp+arg_4]
.text:00001185                 mov     edx, [edx+14h]
.text:00001188                 lea     ecx, [ecx+edx-36C5FC7h]
.text:0000118F                 shr     ecx, 0Bh
.text:00001192                 or      eax, ecx
.text:00001194                 add     eax, [ebp+var_C]
.text:00001197                 mov     [ebp+var_8], eax
.text:0000119A                 mov     edx, [ebp+var_10]
.text:0000119D                 not     edx
.text:0000119F                 or      edx, [ebp+var_8]
.text:000011A2                 xor     edx, [ebp+var_C]
.text:000011A5                 add     edx, [ebp+var_4]
.text:000011A8                 mov     eax, [ebp+arg_4]
.text:000011AB                 mov     ecx, [eax+30h]
.text:000011AE                 lea     edx, [edx+ecx+655B59C3h]
.text:000011B5                 shl     edx, 6
.text:000011B8                 mov     eax, [ebp+var_10]
.text:000011BB                 not     eax
.text:000011BD                 or      eax, [ebp+var_8]
.text:000011C0                 xor     eax, [ebp+var_C]
.text:000011C3                 add     eax, [ebp+var_4]
.text:000011C6                 mov     ecx, [ebp+arg_4]
.text:000011C9                 mov     ecx, [ecx+30h]
.text:000011CC                 lea     eax, [eax+ecx+655B59C3h]
.text:000011D3                 shr     eax, 1Ah
.text:000011D6                 or      edx, eax
.text:000011D8                 add     edx, [ebp+var_8]
.text:000011DB                 mov     [ebp+var_4], edx
.text:000011DE                 mov     ecx, [ebp+var_C]
.text:000011E1                 not     ecx
.text:000011E3                 or      ecx, [ebp+var_4]
.text:000011E6                 xor     ecx, [ebp+var_8]
.text:000011E9                 add     ecx, [ebp+var_10]
.text:000011EC                 mov     edx, [ebp+arg_4]
.text:000011EF                 mov     eax, [edx+0Ch]
.text:000011F2                 lea     ecx, [ecx+eax-70F3336Eh]
.text:000011F9                 shl     ecx, 0Ah
.text:000011FC                 mov     edx, [ebp+var_C]
.text:000011FF                 not     edx
.text:00001201                 or      edx, [ebp+var_4]
.text:00001204                 xor     edx, [ebp+var_8]
.text:00001207                 add     edx, [ebp+var_10]
.text:0000120A                 mov     eax, [ebp+arg_4]
.text:0000120D                 mov     eax, [eax+0Ch]
.text:00001210                 lea     edx, [edx+eax-70F3336Eh]
.text:00001217                 shr     edx, 16h
.text:0000121A                 or      ecx, edx
.text:0000121C                 add     ecx, [ebp+var_4]
.text:0000121F                 mov     [ebp+var_10], ecx
.text:00001222                 mov     eax, [ebp+var_8]
.text:00001225                 not     eax
.text:00001227                 or      eax, [ebp+var_10]
.text:0000122A                 xor     eax, [ebp+var_4]
.text:0000122D                 add     eax, [ebp+var_C]
.text:00001230                 mov     ecx, [ebp+arg_4]
.text:00001233                 mov     edx, [ecx+28h]
.text:00001236                 lea     eax, [eax+edx-100B83h]
.text:0000123D                 shl     eax, 0Fh
.text:00001240                 mov     ecx, [ebp+var_8]
.text:00001243                 not     ecx
.text:00001245                 or      ecx, [ebp+var_10]
.text:00001248                 xor     ecx, [ebp+var_4]
.text:0000124B                 add     ecx, [ebp+var_C]
.text:0000124E                 mov     edx, [ebp+arg_4]
.text:00001251                 mov     edx, [edx+28h]
.text:00001254                 lea     ecx, [ecx+edx-100B83h]
.text:0000125B                 shr     ecx, 11h
.text:0000125E                 or      eax, ecx
.text:00001260                 add     eax, [ebp+var_10]
.text:00001263                 mov     [ebp+var_C], eax
.text:00001266                 mov     edx, [ebp+var_4]
.text:00001269                 not     edx
.text:0000126B                 or      edx, [ebp+var_C]
.text:0000126E                 xor     edx, [ebp+var_10]
.text:00001271                 add     edx, [ebp+var_8]
.text:00001274                 mov     eax, [ebp+arg_4]
.text:00001277                 mov     ecx, [eax+4]
.text:0000127A                 lea     edx, [edx+ecx-7A7BA22Fh]
.text:00001281                 shl     edx, 15h
.text:00001284                 mov     eax, [ebp+var_4]
.text:00001287                 not     eax
.text:00001289                 or      eax, [ebp+var_C]
.text:0000128C                 xor     eax, [ebp+var_10]
.text:0000128F                 add     eax, [ebp+var_8]
.text:00001292                 mov     ecx, [ebp+arg_4]
.text:00001295                 mov     ecx, [ecx+4]
.text:00001298                 lea     eax, [eax+ecx-7A7BA22Fh]
.text:0000129F                 shr     eax, 0Bh
.text:000012A2                 or      edx, eax
.text:000012A4                 add     edx, [ebp+var_C]
.text:000012A7                 mov     [ebp+var_8], edx
.text:000012AA                 mov     ecx, [ebp+var_10]
.text:000012AD                 not     ecx
.text:000012AF                 or      ecx, [ebp+var_8]
.text:000012B2                 xor     ecx, [ebp+var_C]
.text:000012B5                 add     ecx, [ebp+var_4]
.text:000012B8                 mov     edx, [ebp+arg_4]
.text:000012BB                 mov     eax, [edx+20h]
.text:000012BE                 lea     ecx, [ecx+eax+6FA87E4Fh]
.text:000012C5                 shl     ecx, 6
.text:000012C8                 mov     edx, [ebp+var_10]
.text:000012CB                 not     edx
.text:000012CD                 or      edx, [ebp+var_8]
.text:000012D0                 xor     edx, [ebp+var_C]
.text:000012D3                 add     edx, [ebp+var_4]
.text:000012D6                 mov     eax, [ebp+arg_4]
.text:000012D9                 mov     eax, [eax+20h]
.text:000012DC                 lea     edx, [edx+eax+6FA87E4Fh]
.text:000012E3                 shr     edx, 1Ah
.text:000012E6                 or      ecx, edx
.text:000012E8                 add     ecx, [ebp+var_8]
.text:000012EB                 mov     [ebp+var_4], ecx
.text:000012EE                 mov     eax, [ebp+var_C]
.text:000012F1                 not     eax
.text:000012F3                 or      eax, [ebp+var_4]
.text:000012F6                 xor     eax, [ebp+var_8]
.text:000012F9                 add     eax, [ebp+var_10]
.text:000012FC                 mov     ecx, [ebp+arg_4]
.text:000012FF                 mov     edx, [ecx+3Ch]
.text:00001302                 lea     eax, [eax+edx-1D31920h]
.text:00001309                 shl     eax, 0Ah
.text:0000130C                 mov     ecx, [ebp+var_C]
.text:0000130F                 not     ecx
.text:00001311                 or      ecx, [ebp+var_4]
.text:00001314                 xor     ecx, [ebp+var_8]
.text:00001317                 add     ecx, [ebp+var_10]
.text:0000131A                 mov     edx, [ebp+arg_4]
.text:0000131D                 mov     edx, [edx+3Ch]
.text:00001320                 lea     ecx, [ecx+edx-1D31920h]
.text:00001327                 shr     ecx, 16h
.text:0000132A                 or      eax, ecx
.text:0000132C                 add     eax, [ebp+var_4]
.text:0000132F                 mov     [ebp+var_10], eax
.text:00001332                 mov     edx, [ebp+var_8]
.text:00001335                 not     edx
.text:00001337                 or      edx, [ebp+var_10]
.text:0000133A                 xor     edx, [ebp+var_4]
.text:0000133D                 add     edx, [ebp+var_C]
.text:00001340                 mov     eax, [ebp+arg_4]
.text:00001343                 mov     ecx, [eax+18h]
.text:00001346                 lea     edx, [edx+ecx-5CFEBCECh]
.text:0000134D                 shl     edx, 0Fh
.text:00001350                 mov     eax, [ebp+var_8]
.text:00001353                 not     eax
.text:00001355                 or      eax, [ebp+var_10]
.text:00001358                 xor     eax, [ebp+var_4]
.text:0000135B                 add     eax, [ebp+var_C]
.text:0000135E                 mov     ecx, [ebp+arg_4]
.text:00001361                 mov     ecx, [ecx+18h]
.text:00001364                 lea     eax, [eax+ecx-5CFEBCECh]
.text:0000136B                 shr     eax, 11h
.text:0000136E                 or      edx, eax
.text:00001370                 add     edx, [ebp+var_10]
.text:00001373                 mov     [ebp+var_C], edx
.text:00001376                 mov     ecx, [ebp+var_4]
.text:00001379                 not     ecx
.text:0000137B                 or      ecx, [ebp+var_C]
.text:0000137E                 xor     ecx, [ebp+var_10]
.text:00001381                 add     ecx, [ebp+var_8]
.text:00001384                 mov     edx, [ebp+arg_4]
.text:00001387                 mov     eax, [edx+34h]
.text:0000138A                 lea     ecx, [ecx+eax+4E0811A1h]
.text:00001391                 shl     ecx, 15h
.text:00001394                 mov     edx, [ebp+var_4]
.text:00001397                 not     edx
.text:00001399                 or      edx, [ebp+var_C]
.text:0000139C                 xor     edx, [ebp+var_10]
.text:0000139F                 add     edx, [ebp+var_8]
.text:000013A2                 mov     eax, [ebp+arg_4]
.text:000013A5                 mov     eax, [eax+34h]
.text:000013A8                 lea     edx, [edx+eax+4E0811A1h]
.text:000013AF                 shr     edx, 0Bh
.text:000013B2                 or      ecx, edx
.text:000013B4                 add     ecx, [ebp+var_C]
.text:000013B7                 mov     [ebp+var_8], ecx
.text:000013BA                 mov     eax, [ebp+var_10]
.text:000013BD                 not     eax
.text:000013BF                 or      eax, [ebp+var_8]
.text:000013C2                 xor     eax, [ebp+var_C]
.text:000013C5                 add     eax, [ebp+var_4]
.text:000013C8                 mov     ecx, [ebp+arg_4]
.text:000013CB                 mov     edx, [ecx+10h]
.text:000013CE                 lea     eax, [eax+edx-8AC817Eh]
.text:000013D5                 shl     eax, 6
.text:000013D8                 mov     ecx, [ebp+var_10]
.text:000013DB                 not     ecx
.text:000013DD                 or      ecx, [ebp+var_8]
.text:000013E0                 xor     ecx, [ebp+var_C]
.text:000013E3                 add     ecx, [ebp+var_4]
.text:000013E6                 mov     edx, [ebp+arg_4]
.text:000013E9                 mov     edx, [edx+10h]
.text:000013EC                 lea     ecx, [ecx+edx-8AC817Eh]
.text:000013F3                 shr     ecx, 1Ah
.text:000013F6                 or      eax, ecx
.text:000013F8                 add     eax, [ebp+var_8]
.text:000013FB                 mov     [ebp+var_4], eax
.text:000013FE                 mov     edx, [ebp+var_C]
.text:00001401                 not     edx
.text:00001403                 or      edx, [ebp+var_4]
.text:00001406                 xor     edx, [ebp+var_8]
.text:00001409                 add     edx, [ebp+var_10]
.text:0000140C                 mov     eax, [ebp+arg_4]
.text:0000140F                 mov     ecx, [eax+2Ch]
.text:00001412                 lea     edx, [edx+ecx-42C50DCBh]
.text:00001419                 shl     edx, 0Ah
.text:0000141C                 mov     eax, [ebp+var_C]
.text:0000141F                 not     eax
.text:00001421                 or      eax, [ebp+var_4]
.text:00001424                 xor     eax, [ebp+var_8]
.text:00001427                 add     eax, [ebp+var_10]
.text:0000142A                 mov     ecx, [ebp+arg_4]
.text:0000142D                 mov     ecx, [ecx+2Ch]
.text:00001430                 lea     eax, [eax+ecx-42C50DCBh]
.text:00001437                 shr     eax, 16h
.text:0000143A                 or      edx, eax
.text:0000143C                 add     edx, [ebp+var_4]
.text:0000143F                 mov     [ebp+var_10], edx
.text:00001442                 mov     ecx, [ebp+var_8]
.text:00001445                 not     ecx
.text:00001447                 or      ecx, [ebp+var_10]
.text:0000144A                 xor     ecx, [ebp+var_4]
.text:0000144D                 add     ecx, [ebp+var_C]
.text:00001450                 mov     edx, [ebp+arg_4]
.text:00001453                 mov     eax, [edx+8]
.text:00001456                 lea     ecx, [ecx+eax+2AD7D2BBh]
.text:0000145D                 shl     ecx, 0Fh
.text:00001460                 mov     edx, [ebp+var_8]
.text:00001463                 not     edx
.text:00001465                 or      edx, [ebp+var_10]
.text:00001468                 xor     edx, [ebp+var_4]
.text:0000146B                 add     edx, [ebp+var_C]
.text:0000146E                 mov     eax, [ebp+arg_4]
.text:00001471                 mov     eax, [eax+8]
.text:00001474                 lea     edx, [edx+eax+2AD7D2BBh]
.text:0000147B                 shr     edx, 11h
.text:0000147E                 or      ecx, edx
.text:00001480                 add     ecx, [ebp+var_10]
.text:00001483                 mov     [ebp+var_C], ecx
.text:00001486                 mov     eax, [ebp+var_4]
.text:00001489                 not     eax
.text:0000148B                 or      eax, [ebp+var_C]
.text:0000148E                 xor     eax, [ebp+var_10]
.text:00001491                 add     eax, [ebp+var_8]
.text:00001494                 mov     ecx, [ebp+arg_4]
.text:00001497                 mov     edx, [ecx+24h]
.text:0000149A                 lea     eax, [eax+edx-14792C6Fh]
.text:000014A1                 shl     eax, 15h
.text:000014A4                 mov     ecx, [ebp+var_4]
.text:000014A7                 not     ecx
.text:000014A9                 or      ecx, [ebp+var_C]
.text:000014AC                 xor     ecx, [ebp+var_10]
.text:000014AF                 add     ecx, [ebp+var_8]
.text:000014B2                 mov     edx, [ebp+arg_4]
.text:000014B5                 mov     edx, [edx+24h]
.text:000014B8                 lea     ecx, [ecx+edx-14792C6Fh]
.text:000014BF                 shr     ecx, 0Bh
.text:000014C2                 or      eax, ecx
.text:000014C4                 add     eax, [ebp+var_C]
.text:000014C7                 mov     [ebp+var_8], eax
.text:000014CA                 mov     edx, [ebp+arg_0]
.text:000014CD                 mov     eax, [edx]
.text:000014CF                 add     eax, [ebp+var_4]
.text:000014D2                 mov     ecx, [ebp+arg_0]
.text:000014D5                 mov     [ecx], eax
.text:000014D7                 mov     edx, [ebp+arg_0]
.text:000014DA                 mov     eax, [edx+4]
.text:000014DD                 add     eax, [ebp+var_8]
.text:000014E0                 mov     ecx, [ebp+arg_0]
.text:000014E3                 mov     [ecx+4], eax
.text:000014E6                 mov     edx, [ebp+arg_0]
.text:000014E9                 mov     eax, [edx+8]
.text:000014EC                 add     eax, [ebp+var_C]
.text:000014EF                 mov     ecx, [ebp+arg_0]
.text:000014F2                 mov     [ecx+8], eax
.text:000014F5                 mov     edx, [ebp+arg_0]
.text:000014F8                 mov     eax, [edx+0Ch]
.text:000014FB                 add     eax, [ebp+var_10]
.text:000014FE                 mov     ecx, [ebp+arg_0]
.text:00001501                 mov     [ecx+0Ch], eax
.text:00001504                 mov     esp, ebp
.text:00001506                 pop     ebp
.text:00001507                 retn
.text:00001507 _MD5_Block      endp
.text:00001507
.text:00001508
.text:00001508 ; =============== S U B R O U T I N E =======================================
.text:00001508
.text:00001508 ; Attributes: bp-based frame
.text:00001508
.text:00001508                 public _MD5Final
.text:00001508 _MD5Final       proc near               ; CODE XREF: _MD5Simple+48p
.text:00001508                                         ; _hmacmd5_genresult+48p ...
.text:00001508
.text:00001508 var_5C          = dword ptr -5Ch
.text:00001508 var_58          = dword ptr -58h
.text:00001508 var_50          = dword ptr -50h
.text:00001508 var_4C          = byte ptr -4Ch
.text:00001508 var_4B          = byte ptr -4Bh
.text:00001508 var_4A          = byte ptr -4Ah
.text:00001508 var_49          = byte ptr -49h
.text:00001508 var_C           = dword ptr -0Ch
.text:00001508 var_8           = dword ptr -8
.text:00001508 var_4           = dword ptr -4
.text:00001508 arg_0           = dword ptr  8
.text:00001508 arg_4           = dword ptr  0Ch
.text:00001508
.text:00001508                 push    ebp
.text:00001509                 mov     ebp, esp
.text:0000150B                 sub     esp, 5Ch
.text:0000150E                 push    edi
.text:0000150F                 lea     edi, [ebp+var_5C]
.text:00001512                 mov     ecx, 17h
.text:00001517                 mov     eax, 0CCCCCCCCh
.text:0000151C                 rep stosd
.text:0000151E                 mov     eax, dword ptr ds:___security_cookie
.text:00001523                 xor     eax, ebp
.text:00001525                 mov     [ebp+var_4], eax
.text:00001528                 mov     eax, [ebp+arg_4]
.text:0000152B                 cmp     dword ptr [eax+50h], 38h ; '8'
.text:0000152F                 jl      short loc_1541
.text:00001531                 mov     ecx, [ebp+arg_4]
.text:00001534                 mov     edx, 78h ; 'x'
.text:00001539                 sub     edx, [ecx+50h]
.text:0000153C                 mov     [ebp+var_C], edx
.text:0000153F                 jmp     short loc_154F
.text:00001541 ; ---------------------------------------------------------------------------
.text:00001541
.text:00001541 loc_1541:                               ; CODE XREF: _MD5Final+27j
.text:00001541                 mov     eax, [ebp+arg_4]
.text:00001544                 mov     ecx, 38h ; '8'
.text:00001549                 sub     ecx, [eax+50h]
.text:0000154C                 mov     [ebp+var_C], ecx
.text:0000154F
.text:0000154F loc_154F:                               ; CODE XREF: _MD5Final+37j
.text:0000154F                 mov     edx, [ebp+arg_4]
.text:00001552                 mov     eax, [edx+54h]
.text:00001555                 shl     eax, 3
.text:00001558                 mov     ecx, [ebp+arg_4]
.text:0000155B                 mov     edx, [ecx+58h]
.text:0000155E                 shr     edx, 1Dh
.text:00001561                 or      eax, edx
.text:00001563                 mov     [ebp+var_58], eax
.text:00001566                 mov     eax, [ebp+arg_4]
.text:00001569                 mov     ecx, [eax+58h]
.text:0000156C                 shl     ecx, 3
.text:0000156F                 mov     [ebp+var_5C], ecx
.text:00001572                 mov     edx, [ebp+var_C]
.text:00001575                 push    edx             ; size_t
.text:00001576                 push    0               ; int
.text:00001578                 lea     eax, [ebp+var_50]
.text:0000157B                 push    eax             ; void *
.text:0000157C                 call    _memset
.text:00001581                 add     esp, 0Ch
.text:00001584                 mov     byte ptr [ebp+var_50], 80h ; 'Ç'
.text:00001588                 mov     ecx, [ebp+var_C]
.text:0000158B                 push    ecx             ; size_t
.text:0000158C                 lea     edx, [ebp+var_50]
.text:0000158F                 push    edx             ; int
.text:00001590                 mov     eax, [ebp+arg_4]
.text:00001593                 push    eax             ; int
.text:00001594                 call    _MD5Update
.text:00001599                 add     esp, 0Ch
.text:0000159C                 mov     ecx, [ebp+var_58]
.text:0000159F                 shr     ecx, 18h
.text:000015A2                 and     ecx, 0FFh
.text:000015A8                 mov     [ebp+var_49], cl
.text:000015AB                 mov     edx, [ebp+var_58]
.text:000015AE                 shr     edx, 10h
.text:000015B1                 and     edx, 0FFh
.text:000015B7                 mov     [ebp+var_4A], dl
.text:000015BA                 mov     eax, [ebp+var_58]
.text:000015BD                 shr     eax, 8
.text:000015C0                 and     eax, 0FFh
.text:000015C5                 mov     [ebp+var_4B], al
.text:000015C8                 mov     ecx, [ebp+var_58]
.text:000015CB                 and     ecx, 0FFh
.text:000015D1                 mov     [ebp+var_4C], cl
.text:000015D4                 mov     edx, [ebp+var_5C]
.text:000015D7                 shr     edx, 18h
.text:000015DA                 and     edx, 0FFh
.text:000015E0                 mov     byte ptr [ebp+var_50+3], dl
.text:000015E3                 mov     eax, [ebp+var_5C]
.text:000015E6                 shr     eax, 10h
.text:000015E9                 and     eax, 0FFh
.text:000015EE                 mov     byte ptr [ebp+var_50+2], al
.text:000015F1                 mov     ecx, [ebp+var_5C]
.text:000015F4                 shr     ecx, 8
.text:000015F7                 and     ecx, 0FFh
.text:000015FD                 mov     byte ptr [ebp+var_50+1], cl
.text:00001600                 mov     edx, [ebp+var_5C]
.text:00001603                 and     edx, 0FFh
.text:00001609                 mov     byte ptr [ebp+var_50], dl
.text:0000160C                 push    8               ; size_t
.text:0000160E                 lea     eax, [ebp+var_50]
.text:00001611                 push    eax             ; int
.text:00001612                 mov     ecx, [ebp+arg_4]
.text:00001615                 push    ecx             ; int
.text:00001616                 call    _MD5Update
.text:0000161B                 add     esp, 0Ch
.text:0000161E                 mov     [ebp+var_8], 0
.text:00001625                 jmp     short loc_1630
.text:00001627 ; ---------------------------------------------------------------------------
.text:00001627
.text:00001627 loc_1627:                               ; CODE XREF: _MD5Final+199j
.text:00001627                 mov     edx, [ebp+var_8]
.text:0000162A                 add     edx, 1
.text:0000162D                 mov     [ebp+var_8], edx
.text:00001630
.text:00001630 loc_1630:                               ; CODE XREF: _MD5Final+11Dj
.text:00001630                 cmp     [ebp+var_8], 4
.text:00001634                 jge     short loc_16A3
.text:00001636                 mov     eax, [ebp+var_8]
.text:00001639                 mov     ecx, [ebp+arg_4]
.text:0000163C                 mov     edx, [ecx+eax*4]
.text:0000163F                 shr     edx, 18h
.text:00001642                 and     edx, 0FFh
.text:00001648                 mov     eax, [ebp+var_8]
.text:0000164B                 mov     ecx, [ebp+arg_0]
.text:0000164E                 mov     [ecx+eax*4+3], dl
.text:00001652                 mov     edx, [ebp+var_8]
.text:00001655                 mov     eax, [ebp+arg_4]
.text:00001658                 mov     ecx, [eax+edx*4]
.text:0000165B                 shr     ecx, 10h
.text:0000165E                 and     ecx, 0FFh
.text:00001664                 mov     edx, [ebp+var_8]
.text:00001667                 mov     eax, [ebp+arg_0]
.text:0000166A                 mov     [eax+edx*4+2], cl
.text:0000166E                 mov     ecx, [ebp+var_8]
.text:00001671                 mov     edx, [ebp+arg_4]
.text:00001674                 mov     eax, [edx+ecx*4]
.text:00001677                 shr     eax, 8
.text:0000167A                 and     eax, 0FFh
.text:0000167F                 mov     ecx, [ebp+var_8]
.text:00001682                 mov     edx, [ebp+arg_0]
.text:00001685                 mov     [edx+ecx*4+1], al
.text:00001689                 mov     eax, [ebp+var_8]
.text:0000168C                 mov     ecx, [ebp+arg_4]
.text:0000168F                 mov     edx, [ecx+eax*4]
.text:00001692                 and     edx, 0FFh
.text:00001698                 mov     eax, [ebp+var_8]
.text:0000169B                 mov     ecx, [ebp+arg_0]
.text:0000169E                 mov     [ecx+eax*4], dl
.text:000016A1                 jmp     short loc_1627
.text:000016A3 ; ---------------------------------------------------------------------------
.text:000016A3
.text:000016A3 loc_16A3:                               ; CODE XREF: _MD5Final+12Cj
.text:000016A3                 push    edx
.text:000016A4                 mov     ecx, ebp
.text:000016A6                 push    eax
.text:000016A7                 lea     edx, $LN10_0
.text:000016AD                 call    @_RTC_CheckStackVars@8
.text:000016B2                 pop     eax
.text:000016B3                 pop     edx
.text:000016B4                 pop     edi
.text:000016B5                 mov     ecx, [ebp+var_4]
.text:000016B8                 xor     ecx, ebp
.text:000016BA                 call    @__security_check_cookie@4
.text:000016BF                 add     esp, 5Ch
.text:000016C2                 cmp     ebp, esp
.text:000016C4                 call    __RTC_CheckEsp
.text:000016C9                 mov     esp, ebp
.text:000016CB                 pop     ebp
.text:000016CC                 retn
.text:000016CC _MD5Final       endp
.text:000016CC
.text:000016CC ; ---------------------------------------------------------------------------
.text:000016CD                 align 10h
.text:000016D0 $LN10_0         dd 1                    ; DATA XREF: _MD5Final+19Fo
.text:000016D4                 dd offset $LN9
.text:000016D8 $LN9            dd 0FFFFFFB0h, 40h      ; DATA XREF: .text:000016D4o
.text:000016E0                 dd offset $LN8
.text:000016E4 $LN8            dd 0CCCC0063h           ; DATA XREF: .text:000016E0o
.text:000016E8
.text:000016E8 ; =============== S U B R O U T I N E =======================================
.text:000016E8
.text:000016E8 ; Attributes: bp-based frame
.text:000016E8
.text:000016E8 ; int __cdecl MD5Simple(int, size_t, int)
.text:000016E8                 public _MD5Simple
.text:000016E8 _MD5Simple      proc near
.text:000016E8
.text:000016E8 var_68          = byte ptr -68h
.text:000016E8 var_64          = dword ptr -64h
.text:000016E8 var_4           = dword ptr -4
.text:000016E8 arg_0           = dword ptr  8
.text:000016E8 arg_4           = dword ptr  0Ch
.text:000016E8 arg_8           = dword ptr  10h
.text:000016E8
.text:000016E8                 push    ebp
.text:000016E9                 mov     ebp, esp
.text:000016EB                 sub     esp, 68h
.text:000016EE                 push    edi
.text:000016EF                 lea     edi, [ebp+var_68]
.text:000016F2                 mov     ecx, 1Ah
.text:000016F7                 mov     eax, 0CCCCCCCCh
.text:000016FC                 rep stosd
.text:000016FE                 mov     eax, dword ptr ds:___security_cookie
.text:00001703                 xor     eax, ebp
.text:00001705                 mov     [ebp+var_4], eax
.text:00001708                 lea     eax, [ebp+var_64]
.text:0000170B                 push    eax
.text:0000170C                 call    _MD5Init
.text:00001711                 add     esp, 4
.text:00001714                 mov     ecx, [ebp+arg_4]
.text:00001717                 push    ecx             ; size_t
.text:00001718                 mov     edx, [ebp+arg_0]
.text:0000171B                 push    edx             ; int
.text:0000171C                 lea     eax, [ebp+var_64]
.text:0000171F                 push    eax             ; int
.text:00001720                 call    _MD5Update
.text:00001725                 add     esp, 0Ch
.text:00001728                 lea     ecx, [ebp+var_64]
.text:0000172B                 push    ecx
.text:0000172C                 mov     edx, [ebp+arg_8]
.text:0000172F                 push    edx
.text:00001730                 call    _MD5Final
.text:00001735                 add     esp, 8
.text:00001738                 push    edx
.text:00001739                 mov     ecx, ebp
.text:0000173B                 push    eax
.text:0000173C                 lea     edx, $LN5
.text:00001742                 call    @_RTC_CheckStackVars@8
.text:00001747                 pop     eax
.text:00001748                 pop     edx
.text:00001749                 pop     edi
.text:0000174A                 mov     ecx, [ebp+var_4]
.text:0000174D                 xor     ecx, ebp
.text:0000174F                 call    @__security_check_cookie@4
.text:00001754                 add     esp, 68h
.text:00001757                 cmp     ebp, esp
.text:00001759                 call    __RTC_CheckEsp
.text:0000175E                 mov     esp, ebp
.text:00001760                 pop     ebp
.text:00001761                 retn
.text:00001761 _MD5Simple      endp
.text:00001761
.text:00001761 ; ---------------------------------------------------------------------------
.text:00001762                 align 4
.text:00001764 $LN5            dd 1                    ; DATA XREF: _MD5Simple+54o
.text:00001768                 dd offset $LN4
.text:0000176C $LN4            dd 0FFFFFF9Ch, 5Ch      ; DATA XREF: .text:00001768o
.text:00001774                 dd offset $LN3
.text:00001778 $LN3            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00001774o
.text:00001788
.text:00001788 ; =============== S U B R O U T I N E =======================================
.text:00001788
.text:00001788 ; Attributes: bp-based frame
.text:00001788
.text:00001788                 public _hmacmd5_make_context
.text:00001788 _hmacmd5_make_context proc near         ; DATA XREF: .rdata:_ssh_hmac_md5o
.text:00001788                 push    ebp
.text:00001789                 mov     ebp, esp
.text:0000178B                 push    5Ch ; '\'
.text:0000178D                 push    3
.text:0000178F                 call    _safemalloc
.text:00001794                 add     esp, 8
.text:00001797                 cmp     ebp, esp
.text:00001799                 call    __RTC_CheckEsp
.text:0000179E                 pop     ebp
.text:0000179F                 retn
.text:0000179F _hmacmd5_make_context endp
.text:0000179F
.text:0000179F ; ---------------------------------------------------------------------------
.text:000017A0                 db 8 dup(0CCh)
.text:000017A8
.text:000017A8 ; =============== S U B R O U T I N E =======================================
.text:000017A8
.text:000017A8 ; Attributes: bp-based frame
.text:000017A8
.text:000017A8                 public _hmacmd5_free_context
.text:000017A8 _hmacmd5_free_context proc near         ; DATA XREF: .rdata:0000001Co
.text:000017A8
.text:000017A8 arg_0           = dword ptr  8
.text:000017A8
.text:000017A8                 push    ebp
.text:000017A9                 mov     ebp, esp
.text:000017AB                 mov     eax, [ebp+arg_0]
.text:000017AE                 push    eax
.text:000017AF                 call    _safefree
.text:000017B4                 add     esp, 4
.text:000017B7                 cmp     ebp, esp
.text:000017B9                 call    __RTC_CheckEsp
.text:000017BE                 pop     ebp
.text:000017BF                 retn
.text:000017BF _hmacmd5_free_context endp
.text:000017BF
.text:000017BF ; ---------------------------------------------------------------------------
.text:000017C0                 db 8 dup(0CCh)
.text:000017C8
.text:000017C8 ; =============== S U B R O U T I N E =======================================
.text:000017C8
.text:000017C8 ; Attributes: bp-based frame
.text:000017C8
.text:000017C8                 public _hmacmd5_key
.text:000017C8 _hmacmd5_key    proc near               ; CODE XREF: _hmacmd5_key_16+Dp
.text:000017C8
.text:000017C8 var_58          = dword ptr -58h
.text:000017C8 var_54          = dword ptr -54h
.text:000017C8 var_4C          = dword ptr -4Ch
.text:000017C8 var_8           = dword ptr -8
.text:000017C8 var_4           = dword ptr -4
.text:000017C8 arg_0           = dword ptr  8
.text:000017C8 arg_4           = dword ptr  0Ch
.text:000017C8 arg_8           = dword ptr  10h
.text:000017C8
.text:000017C8                 push    ebp
.text:000017C9                 mov     ebp, esp
.text:000017CB                 sub     esp, 58h
.text:000017CE                 push    edi
.text:000017CF                 lea     edi, [ebp+var_58]
.text:000017D2                 mov     ecx, 16h
.text:000017D7                 mov     eax, 0CCCCCCCCh
.text:000017DC                 rep stosd
.text:000017DE                 mov     eax, dword ptr ds:___security_cookie
.text:000017E3                 xor     eax, ebp
.text:000017E5                 mov     [ebp+var_4], eax
.text:000017E8                 mov     eax, [ebp+arg_0]
.text:000017EB                 mov     [ebp+var_8], eax
.text:000017EE                 mov     ecx, [ebp+arg_4]
.text:000017F1                 mov     [ebp+var_54], ecx
.text:000017F4                 push    40h ; '@'       ; size_t
.text:000017F6                 push    36h ; '6'       ; int
.text:000017F8                 lea     edx, [ebp+var_4C]
.text:000017FB                 push    edx             ; void *
.text:000017FC                 call    _memset
.text:00001801                 add     esp, 0Ch
.text:00001804                 mov     [ebp+var_58], 0
.text:0000180B                 jmp     short loc_1816
.text:0000180D ; ---------------------------------------------------------------------------
.text:0000180D
.text:0000180D loc_180D:                               ; CODE XREF: _hmacmd5_key+76j
.text:0000180D                 mov     eax, [ebp+var_58]
.text:00001810                 add     eax, 1
.text:00001813                 mov     [ebp+var_58], eax
.text:00001816
.text:00001816 loc_1816:                               ; CODE XREF: _hmacmd5_key+43j
.text:00001816                 mov     ecx, [ebp+var_58]
.text:00001819                 cmp     ecx, [ebp+arg_8]
.text:0000181C                 jge     short loc_1840
.text:0000181E                 cmp     [ebp+var_58], 40h ; '@'
.text:00001822                 jge     short loc_1840
.text:00001824                 mov     edx, [ebp+var_54]
.text:00001827                 add     edx, [ebp+var_58]
.text:0000182A                 movzx   eax, byte ptr [edx]
.text:0000182D                 mov     ecx, [ebp+var_58]
.text:00001830                 movzx   edx, byte ptr [ebp+ecx+var_4C]
.text:00001835                 xor     edx, eax
.text:00001837                 mov     eax, [ebp+var_58]
.text:0000183A                 mov     byte ptr [ebp+eax+var_4C], dl
.text:0000183E                 jmp     short loc_180D
.text:00001840 ; ---------------------------------------------------------------------------
.text:00001840
.text:00001840 loc_1840:                               ; CODE XREF: _hmacmd5_key+54j
.text:00001840                                         ; _hmacmd5_key+5Aj
.text:00001840                 mov     ecx, [ebp+var_8]
.text:00001843                 push    ecx
.text:00001844                 call    _MD5Init
.text:00001849                 add     esp, 4
.text:0000184C                 push    40h ; '@'       ; size_t
.text:0000184E                 lea     edx, [ebp+var_4C]
.text:00001851                 push    edx             ; int
.text:00001852                 mov     eax, [ebp+var_8]
.text:00001855                 push    eax             ; int
.text:00001856                 call    _MD5Update
.text:0000185B                 add     esp, 0Ch
.text:0000185E                 push    40h ; '@'       ; size_t
.text:00001860                 push    5Ch ; '\'       ; int
.text:00001862                 lea     ecx, [ebp+var_4C]
.text:00001865                 push    ecx             ; void *
.text:00001866                 call    _memset
.text:0000186B                 add     esp, 0Ch
.text:0000186E                 mov     [ebp+var_58], 0
.text:00001875                 jmp     short loc_1880
.text:00001877 ; ---------------------------------------------------------------------------
.text:00001877
.text:00001877 loc_1877:                               ; CODE XREF: _hmacmd5_key+E0j
.text:00001877                 mov     edx, [ebp+var_58]
.text:0000187A                 add     edx, 1
.text:0000187D                 mov     [ebp+var_58], edx
.text:00001880
.text:00001880 loc_1880:                               ; CODE XREF: _hmacmd5_key+ADj
.text:00001880                 mov     eax, [ebp+var_58]
.text:00001883                 cmp     eax, [ebp+arg_8]
.text:00001886                 jge     short loc_18AA
.text:00001888                 cmp     [ebp+var_58], 40h ; '@'
.text:0000188C                 jge     short loc_18AA
.text:0000188E                 mov     ecx, [ebp+var_54]
.text:00001891                 add     ecx, [ebp+var_58]
.text:00001894                 movzx   edx, byte ptr [ecx]
.text:00001897                 mov     eax, [ebp+var_58]
.text:0000189A                 movzx   ecx, byte ptr [ebp+eax+var_4C]
.text:0000189F                 xor     ecx, edx
.text:000018A1                 mov     edx, [ebp+var_58]
.text:000018A4                 mov     byte ptr [ebp+edx+var_4C], cl
.text:000018A8                 jmp     short loc_1877
.text:000018AA ; ---------------------------------------------------------------------------
.text:000018AA
.text:000018AA loc_18AA:                               ; CODE XREF: _hmacmd5_key+BEj
.text:000018AA                                         ; _hmacmd5_key+C4j
.text:000018AA                 mov     eax, [ebp+var_8]
.text:000018AD                 add     eax, 5Ch ; '\'
.text:000018B0                 push    eax
.text:000018B1                 call    _MD5Init
.text:000018B6                 add     esp, 4
.text:000018B9                 push    40h ; '@'       ; size_t
.text:000018BB                 lea     ecx, [ebp+var_4C]
.text:000018BE                 push    ecx             ; int
.text:000018BF                 mov     edx, [ebp+var_8]
.text:000018C2                 add     edx, 5Ch ; '\'
.text:000018C5                 push    edx             ; int
.text:000018C6                 call    _MD5Update
.text:000018CB                 add     esp, 0Ch
.text:000018CE                 push    40h ; '@'
.text:000018D0                 lea     eax, [ebp+var_4C]
.text:000018D3                 push    eax
.text:000018D4                 call    _smemclr
.text:000018D9                 add     esp, 8
.text:000018DC                 push    edx
.text:000018DD                 mov     ecx, ebp
.text:000018DF                 push    eax
.text:000018E0                 lea     edx, $LN11_0
.text:000018E6                 call    @_RTC_CheckStackVars@8
.text:000018EB                 pop     eax
.text:000018EC                 pop     edx
.text:000018ED                 pop     edi
.text:000018EE                 mov     ecx, [ebp+var_4]
.text:000018F1                 xor     ecx, ebp
.text:000018F3                 call    @__security_check_cookie@4
.text:000018F8                 add     esp, 58h
.text:000018FB                 cmp     ebp, esp
.text:000018FD                 call    __RTC_CheckEsp
.text:00001902                 mov     esp, ebp
.text:00001904                 pop     ebp
.text:00001905                 retn
.text:00001905 _hmacmd5_key    endp
.text:00001905
.text:00001905 ; ---------------------------------------------------------------------------
.text:00001906                 align 4
.text:00001908 $LN11_0         dd 1                    ; DATA XREF: _hmacmd5_key+118o
.text:0000190C                 dd offset $LN10_1
.text:00001910 $LN10_1         dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:0000190Co
.text:00001918                 dd offset $LN9_0
.text:0000191C $LN9_0          dd 6F6F66h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001918o
.text:00001928
.text:00001928 ; =============== S U B R O U T I N E =======================================
.text:00001928
.text:00001928 ; Attributes: bp-based frame
.text:00001928
.text:00001928 _hmacmd5_key_16 proc near               ; DATA XREF: .rdata:00000020o
.text:00001928
.text:00001928 arg_0           = dword ptr  8
.text:00001928 arg_4           = dword ptr  0Ch
.text:00001928
.text:00001928                 push    ebp
.text:00001929                 mov     ebp, esp
.text:0000192B                 push    10h
.text:0000192D                 mov     eax, [ebp+arg_4]
.text:00001930                 push    eax
.text:00001931                 mov     ecx, [ebp+arg_0]
.text:00001934                 push    ecx
.text:00001935                 call    _hmacmd5_key
.text:0000193A                 add     esp, 0Ch
.text:0000193D                 cmp     ebp, esp
.text:0000193F                 call    __RTC_CheckEsp
.text:00001944                 pop     ebp
.text:00001945                 retn
.text:00001945 _hmacmd5_key_16 endp
.text:00001945
.text:00001945 ; ---------------------------------------------------------------------------
.text:00001946                 align 4
.text:00001948
.text:00001948 ; =============== S U B R O U T I N E =======================================
.text:00001948
.text:00001948 ; Attributes: bp-based frame
.text:00001948
.text:00001948 _hmacmd5_start  proc near               ; CODE XREF: _hmacmd5_do_hmac_internal+7p
.text:00001948                                         ; DATA XREF: .rdata:0000002Co
.text:00001948
.text:00001948 var_4           = dword ptr -4
.text:00001948 arg_0           = dword ptr  8
.text:00001948
.text:00001948                 push    ebp
.text:00001949                 mov     ebp, esp
.text:0000194B                 push    ecx
.text:0000194C                 push    esi
.text:0000194D                 push    edi
.text:0000194E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001955                 mov     eax, [ebp+arg_0]
.text:00001958                 mov     [ebp+var_4], eax
.text:0000195B                 mov     esi, [ebp+var_4]
.text:0000195E                 mov     edi, [ebp+var_4]
.text:00001961                 add     edi, 0B8h ; '+'
.text:00001967                 mov     ecx, 17h
.text:0000196C                 rep movsd
.text:0000196E                 pop     edi
.text:0000196F                 pop     esi
.text:00001970                 mov     esp, ebp
.text:00001972                 pop     ebp
.text:00001973                 retn
.text:00001973 _hmacmd5_start  endp
.text:00001973
.text:00001973 ; ---------------------------------------------------------------------------
.text:00001974                 align 8
.text:00001978
.text:00001978 ; =============== S U B R O U T I N E =======================================
.text:00001978
.text:00001978 ; Attributes: bp-based frame
.text:00001978
.text:00001978 ; int __cdecl hmacmd5_bytes(int, int, size_t)
.text:00001978 _hmacmd5_bytes  proc near               ; CODE XREF: _hmacmd5_do_hmac_internal+1Bp
.text:00001978                                         ; _hmacmd5_do_hmac_internal+35p
.text:00001978                                         ; DATA XREF: ...
.text:00001978
.text:00001978 var_4           = dword ptr -4
.text:00001978 arg_0           = dword ptr  8
.text:00001978 arg_4           = dword ptr  0Ch
.text:00001978 arg_8           = dword ptr  10h
.text:00001978
.text:00001978                 push    ebp
.text:00001979                 mov     ebp, esp
.text:0000197B                 push    ecx
.text:0000197C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001983                 mov     eax, [ebp+arg_0]
.text:00001986                 mov     [ebp+var_4], eax
.text:00001989                 mov     ecx, [ebp+arg_8]
.text:0000198C                 push    ecx             ; size_t
.text:0000198D                 mov     edx, [ebp+arg_4]
.text:00001990                 push    edx             ; int
.text:00001991                 mov     eax, [ebp+var_4]
.text:00001994                 add     eax, 0B8h ; '+'
.text:00001999                 push    eax             ; int
.text:0000199A                 call    _MD5Update
.text:0000199F                 add     esp, 0Ch
.text:000019A2                 add     esp, 4
.text:000019A5                 cmp     ebp, esp
.text:000019A7                 call    __RTC_CheckEsp
.text:000019AC                 mov     esp, ebp
.text:000019AE                 pop     ebp
.text:000019AF                 retn
.text:000019AF _hmacmd5_bytes  endp
.text:000019AF
.text:000019AF ; ---------------------------------------------------------------------------
.text:000019B0                 db 8 dup(0CCh)
.text:000019B8
.text:000019B8 ; =============== S U B R O U T I N E =======================================
.text:000019B8
.text:000019B8 ; Attributes: bp-based frame
.text:000019B8
.text:000019B8 _hmacmd5_genresult proc near            ; CODE XREF: _hmacmd5_verresult+32p
.text:000019B8                                         ; _hmacmd5_do_hmac_internal+45p
.text:000019B8                                         ; DATA XREF: ...
.text:000019B8
.text:000019B8 var_84          = byte ptr -84h
.text:000019B8 var_80          = dword ptr -80h
.text:000019B8 var_68          = dword ptr -68h
.text:000019B8 var_8           = dword ptr -8
.text:000019B8 var_4           = dword ptr -4
.text:000019B8 arg_0           = dword ptr  8
.text:000019B8 arg_4           = dword ptr  0Ch
.text:000019B8
.text:000019B8                 push    ebp
.text:000019B9                 mov     ebp, esp
.text:000019BB                 sub     esp, 84h
.text:000019C1                 push    esi
.text:000019C2                 push    edi
.text:000019C3                 lea     edi, [ebp+var_84]
.text:000019C9                 mov     ecx, 21h ; '!'
.text:000019CE                 mov     eax, 0CCCCCCCCh
.text:000019D3                 rep stosd
.text:000019D5                 mov     eax, dword ptr ds:___security_cookie
.text:000019DA                 xor     eax, ebp
.text:000019DC                 mov     [ebp+var_4], eax
.text:000019DF                 mov     eax, [ebp+arg_0]
.text:000019E2                 mov     [ebp+var_8], eax
.text:000019E5                 mov     esi, [ebp+var_8]
.text:000019E8                 add     esi, 0B8h ; '+'
.text:000019EE                 mov     ecx, 17h
.text:000019F3                 lea     edi, [ebp+var_68]
.text:000019F6                 rep movsd
.text:000019F8                 lea     ecx, [ebp+var_68]
.text:000019FB                 push    ecx
.text:000019FC                 lea     edx, [ebp+var_80]
.text:000019FF                 push    edx
.text:00001A00                 call    _MD5Final
.text:00001A05                 add     esp, 8
.text:00001A08                 mov     esi, [ebp+var_8]
.text:00001A0B                 add     esi, 5Ch ; '\'
.text:00001A0E                 mov     ecx, 17h
.text:00001A13                 lea     edi, [ebp+var_68]
.text:00001A16                 rep movsd
.text:00001A18                 push    10h             ; size_t
.text:00001A1A                 lea     eax, [ebp+var_80]
.text:00001A1D                 push    eax             ; int
.text:00001A1E                 lea     ecx, [ebp+var_68]
.text:00001A21                 push    ecx             ; int
.text:00001A22                 call    _MD5Update
.text:00001A27                 add     esp, 0Ch
.text:00001A2A                 lea     edx, [ebp+var_68]
.text:00001A2D                 push    edx
.text:00001A2E                 mov     eax, [ebp+arg_4]
.text:00001A31                 push    eax
.text:00001A32                 call    _MD5Final
.text:00001A37                 add     esp, 8
.text:00001A3A                 push    edx
.text:00001A3B                 mov     ecx, ebp
.text:00001A3D                 push    eax
.text:00001A3E                 lea     edx, $LN6
.text:00001A44                 call    @_RTC_CheckStackVars@8
.text:00001A49                 pop     eax
.text:00001A4A                 pop     edx
.text:00001A4B                 pop     edi
.text:00001A4C                 pop     esi
.text:00001A4D                 mov     ecx, [ebp+var_4]
.text:00001A50                 xor     ecx, ebp
.text:00001A52                 call    @__security_check_cookie@4
.text:00001A57                 add     esp, 84h
.text:00001A5D                 cmp     ebp, esp
.text:00001A5F                 call    __RTC_CheckEsp
.text:00001A64                 mov     esp, ebp
.text:00001A66                 pop     ebp
.text:00001A67                 retn
.text:00001A67 _hmacmd5_genresult endp
.text:00001A67
.text:00001A67 ; ---------------------------------------------------------------------------
.text:00001A68 $LN6            dd 2                    ; DATA XREF: _hmacmd5_genresult+86o
.text:00001A6C                 dd offset $LN5_0
.text:00001A70 $LN5_0          dd 0FFFFFF98h, 5Ch      ; DATA XREF: .text:00001A6Co
.text:00001A78                 dd offset $LN3_0
.text:00001A7C                 dd 0FFFFFF80h, 10h
.text:00001A84                 dd offset $LN4_0        ; "intermediate"
.text:00001A88 $LN4_0          db 'intermediate',0     ; DATA XREF: .text:00001A84o
.text:00001A95 ; ---------------------------------------------------------------------------
.text:00001A95
.text:00001A95 $LN3_0:                                 ; DATA XREF: .text:00001A78o
.text:00001A95                 jnb     short $+2
.text:00001A97
.text:00001A97 loc_1A97:                               ; CODE XREF: .text:$LN3_0j
.text:00001A97                 int     3               ; Trap to Debugger
.text:00001A98
.text:00001A98 ; =============== S U B R O U T I N E =======================================
.text:00001A98
.text:00001A98 ; Attributes: bp-based frame
.text:00001A98
.text:00001A98 ; int __cdecl hmacmd5_verresult(int, void *)
.text:00001A98 _hmacmd5_verresult proc near            ; DATA XREF: .rdata:00000038o
.text:00001A98
.text:00001A98 var_1C          = dword ptr -1Ch
.text:00001A98 var_18          = dword ptr -18h
.text:00001A98 var_14          = dword ptr -14h
.text:00001A98 var_10          = dword ptr -10h
.text:00001A98 var_C           = dword ptr -0Ch
.text:00001A98 var_8           = dword ptr -8
.text:00001A98 var_4           = dword ptr -4
.text:00001A98 arg_0           = dword ptr  8
.text:00001A98 arg_4           = dword ptr  0Ch
.text:00001A98
.text:00001A98                 push    ebp
.text:00001A99                 mov     ebp, esp
.text:00001A9B                 sub     esp, 1Ch
.text:00001A9E                 mov     eax, 0CCCCCCCCh
.text:00001AA3                 mov     [ebp+var_1C], eax
.text:00001AA6                 mov     [ebp+var_18], eax
.text:00001AA9                 mov     [ebp+var_14], eax
.text:00001AAC                 mov     [ebp+var_10], eax
.text:00001AAF                 mov     [ebp+var_C], eax
.text:00001AB2                 mov     [ebp+var_8], eax
.text:00001AB5                 mov     [ebp+var_4], eax
.text:00001AB8                 mov     eax, dword ptr ds:___security_cookie
.text:00001ABD                 xor     eax, ebp
.text:00001ABF                 mov     [ebp+var_4], eax
.text:00001AC2                 lea     eax, [ebp+var_18]
.text:00001AC5                 push    eax
.text:00001AC6                 mov     ecx, [ebp+arg_0]
.text:00001AC9                 push    ecx
.text:00001ACA                 call    _hmacmd5_genresult
.text:00001ACF                 add     esp, 8
.text:00001AD2                 push    10h             ; size_t
.text:00001AD4                 mov     edx, [ebp+arg_4]
.text:00001AD7                 push    edx             ; void *
.text:00001AD8                 lea     eax, [ebp+var_18]
.text:00001ADB                 push    eax             ; void *
.text:00001ADC                 call    _memcmp
.text:00001AE1                 add     esp, 0Ch
.text:00001AE4                 neg     eax
.text:00001AE6                 sbb     eax, eax
.text:00001AE8                 add     eax, 1
.text:00001AEB                 push    edx
.text:00001AEC                 mov     ecx, ebp
.text:00001AEE                 push    eax
.text:00001AEF                 lea     edx, $LN5_1
.text:00001AF5                 call    @_RTC_CheckStackVars@8
.text:00001AFA                 pop     eax
.text:00001AFB                 pop     edx
.text:00001AFC                 mov     ecx, [ebp+var_4]
.text:00001AFF                 xor     ecx, ebp
.text:00001B01                 call    @__security_check_cookie@4
.text:00001B06                 add     esp, 1Ch
.text:00001B09                 cmp     ebp, esp
.text:00001B0B                 call    __RTC_CheckEsp
.text:00001B10                 mov     esp, ebp
.text:00001B12                 pop     ebp
.text:00001B13                 retn
.text:00001B13 _hmacmd5_verresult endp
.text:00001B13
.text:00001B13 ; ---------------------------------------------------------------------------
.text:00001B14 $LN5_1          dd 1                    ; DATA XREF: _hmacmd5_verresult+57o
.text:00001B18                 dd offset $LN4_1
.text:00001B1C $LN4_1          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001B18o
.text:00001B24                 dd offset $LN3_1        ; "correct"
.text:00001B28 $LN3_1          db 'correct',0          ; DATA XREF: .text:00001B24o
.text:00001B30                 db 8 dup(0CCh)
.text:00001B38
.text:00001B38 ; =============== S U B R O U T I N E =======================================
.text:00001B38
.text:00001B38 ; Attributes: bp-based frame
.text:00001B38
.text:00001B38 ; int __cdecl hmacmd5_do_hmac(int, int, size_t, int)
.text:00001B38                 public _hmacmd5_do_hmac
.text:00001B38 _hmacmd5_do_hmac proc near
.text:00001B38
.text:00001B38 arg_0           = dword ptr  8
.text:00001B38 arg_4           = dword ptr  0Ch
.text:00001B38 arg_8           = dword ptr  10h
.text:00001B38 arg_C           = dword ptr  14h
.text:00001B38
.text:00001B38                 push    ebp
.text:00001B39                 mov     ebp, esp
.text:00001B3B                 mov     eax, [ebp+arg_C]
.text:00001B3E                 push    eax             ; int
.text:00001B3F                 push    0               ; size_t
.text:00001B41                 push    0               ; int
.text:00001B43                 mov     ecx, [ebp+arg_8]
.text:00001B46                 push    ecx             ; size_t
.text:00001B47                 mov     edx, [ebp+arg_4]
.text:00001B4A                 push    edx             ; int
.text:00001B4B                 mov     eax, [ebp+arg_0]
.text:00001B4E                 push    eax             ; int
.text:00001B4F                 call    _hmacmd5_do_hmac_internal
.text:00001B54                 add     esp, 18h
.text:00001B57                 cmp     ebp, esp
.text:00001B59                 call    __RTC_CheckEsp
.text:00001B5E                 pop     ebp
.text:00001B5F                 retn
.text:00001B5F _hmacmd5_do_hmac endp
.text:00001B5F
.text:00001B5F ; ---------------------------------------------------------------------------
.text:00001B60                 db 8 dup(0CCh)
.text:00001B68
.text:00001B68 ; =============== S U B R O U T I N E =======================================
.text:00001B68
.text:00001B68 ; Attributes: bp-based frame
.text:00001B68
.text:00001B68 ; int __cdecl hmacmd5_do_hmac_internal(int, int, size_t, int, size_t, int)
.text:00001B68 _hmacmd5_do_hmac_internal proc near     ; CODE XREF: _hmacmd5_do_hmac+17p
.text:00001B68                                         ; _hmacmd5_do_hmac_ssh+61p
.text:00001B68
.text:00001B68 arg_0           = dword ptr  8
.text:00001B68 arg_4           = dword ptr  0Ch
.text:00001B68 arg_8           = dword ptr  10h
.text:00001B68 arg_C           = dword ptr  14h
.text:00001B68 arg_10          = dword ptr  18h
.text:00001B68 arg_14          = dword ptr  1Ch
.text:00001B68
.text:00001B68                 push    ebp
.text:00001B69                 mov     ebp, esp
.text:00001B6B                 mov     eax, [ebp+arg_0]
.text:00001B6E                 push    eax
.text:00001B6F                 call    _hmacmd5_start
.text:00001B74                 add     esp, 4
.text:00001B77                 mov     ecx, [ebp+arg_8]
.text:00001B7A                 push    ecx             ; size_t
.text:00001B7B                 mov     edx, [ebp+arg_4]
.text:00001B7E                 push    edx             ; int
.text:00001B7F                 mov     eax, [ebp+arg_0]
.text:00001B82                 push    eax             ; int
.text:00001B83                 call    _hmacmd5_bytes
.text:00001B88                 add     esp, 0Ch
.text:00001B8B                 cmp     [ebp+arg_C], 0
.text:00001B8F                 jz      short loc_1BA5
.text:00001B91                 mov     ecx, [ebp+arg_10]
.text:00001B94                 push    ecx             ; size_t
.text:00001B95                 mov     edx, [ebp+arg_C]
.text:00001B98                 push    edx             ; int
.text:00001B99                 mov     eax, [ebp+arg_0]
.text:00001B9C                 push    eax             ; int
.text:00001B9D                 call    _hmacmd5_bytes
.text:00001BA2                 add     esp, 0Ch
.text:00001BA5
.text:00001BA5 loc_1BA5:                               ; CODE XREF: _hmacmd5_do_hmac_internal+27j
.text:00001BA5                 mov     ecx, [ebp+arg_14]
.text:00001BA8                 push    ecx
.text:00001BA9                 mov     edx, [ebp+arg_0]
.text:00001BAC                 push    edx
.text:00001BAD                 call    _hmacmd5_genresult
.text:00001BB2                 add     esp, 8
.text:00001BB5                 cmp     ebp, esp
.text:00001BB7                 call    __RTC_CheckEsp
.text:00001BBC                 pop     ebp
.text:00001BBD                 retn
.text:00001BBD _hmacmd5_do_hmac_internal endp
.text:00001BBD
.text:00001BBD ; ---------------------------------------------------------------------------
.text:00001BBE                 db 0Ah dup(0CCh)
.text:00001BC8
.text:00001BC8 ; =============== S U B R O U T I N E =======================================
.text:00001BC8
.text:00001BC8 ; Attributes: bp-based frame
.text:00001BC8
.text:00001BC8 ; int __cdecl hmacmd5_generate(int, int, size_t, int)
.text:00001BC8 _hmacmd5_generate proc near             ; DATA XREF: .rdata:00000024o
.text:00001BC8
.text:00001BC8 arg_0           = dword ptr  8
.text:00001BC8 arg_4           = dword ptr  0Ch
.text:00001BC8 arg_8           = dword ptr  10h
.text:00001BC8 arg_C           = dword ptr  14h
.text:00001BC8
.text:00001BC8                 push    ebp
.text:00001BC9                 mov     ebp, esp
.text:00001BCB                 mov     eax, [ebp+arg_4]
.text:00001BCE                 add     eax, [ebp+arg_8]
.text:00001BD1                 push    eax             ; int
.text:00001BD2                 mov     ecx, [ebp+arg_C]
.text:00001BD5                 push    ecx             ; int
.text:00001BD6                 mov     edx, [ebp+arg_8]
.text:00001BD9                 push    edx             ; size_t
.text:00001BDA                 mov     eax, [ebp+arg_4]
.text:00001BDD                 push    eax             ; int
.text:00001BDE                 mov     ecx, [ebp+arg_0]
.text:00001BE1                 push    ecx             ; int
.text:00001BE2                 call    _hmacmd5_do_hmac_ssh
.text:00001BE7                 add     esp, 14h
.text:00001BEA                 cmp     ebp, esp
.text:00001BEC                 call    __RTC_CheckEsp
.text:00001BF1                 pop     ebp
.text:00001BF2                 retn
.text:00001BF2 _hmacmd5_generate endp
.text:00001BF2
.text:00001BF2 ; ---------------------------------------------------------------------------
.text:00001BF3                 align 8
.text:00001BF8
.text:00001BF8 ; =============== S U B R O U T I N E =======================================
.text:00001BF8
.text:00001BF8 ; Attributes: bp-based frame
.text:00001BF8
.text:00001BF8 ; int __cdecl hmacmd5_do_hmac_ssh(int, int, size_t, int, int)
.text:00001BF8 _hmacmd5_do_hmac_ssh proc near          ; CODE XREF: _hmacmd5_generate+1Ap
.text:00001BF8                                         ; _hmacmd5_verify+3Ep
.text:00001BF8
.text:00001BF8 var_1C          = dword ptr -1Ch
.text:00001BF8 var_18          = dword ptr -18h
.text:00001BF8 var_14          = dword ptr -14h
.text:00001BF8 var_10          = dword ptr -10h
.text:00001BF8 var_C           = dword ptr -0Ch
.text:00001BF8 var_8           = dword ptr -8
.text:00001BF8 var_4           = dword ptr -4
.text:00001BF8 arg_0           = dword ptr  8
.text:00001BF8 arg_4           = dword ptr  0Ch
.text:00001BF8 arg_8           = dword ptr  10h
.text:00001BF8 arg_C           = dword ptr  14h
.text:00001BF8 arg_10          = dword ptr  18h
.text:00001BF8
.text:00001BF8                 push    ebp
.text:00001BF9                 mov     ebp, esp
.text:00001BFB                 sub     esp, 1Ch
.text:00001BFE                 mov     eax, 0CCCCCCCCh
.text:00001C03                 mov     [ebp+var_1C], eax
.text:00001C06                 mov     [ebp+var_18], eax
.text:00001C09                 mov     [ebp+var_14], eax
.text:00001C0C                 mov     [ebp+var_10], eax
.text:00001C0F                 mov     [ebp+var_C], eax
.text:00001C12                 mov     [ebp+var_8], eax
.text:00001C15                 mov     [ebp+var_4], eax
.text:00001C18                 mov     eax, dword ptr ds:___security_cookie
.text:00001C1D                 xor     eax, ebp
.text:00001C1F                 mov     [ebp+var_4], eax
.text:00001C22                 mov     eax, [ebp+arg_C]
.text:00001C25                 shr     eax, 18h
.text:00001C28                 mov     byte ptr [ebp+var_18], al
.text:00001C2B                 mov     ecx, [ebp+arg_C]
.text:00001C2E                 shr     ecx, 10h
.text:00001C31                 mov     byte ptr [ebp+var_18+1], cl
.text:00001C34                 mov     edx, [ebp+arg_C]
.text:00001C37                 shr     edx, 8
.text:00001C3A                 mov     byte ptr [ebp+var_18+2], dl
.text:00001C3D                 mov     al, byte ptr [ebp+arg_C]
.text:00001C40                 mov     byte ptr [ebp+var_18+3], al
.text:00001C43                 mov     ecx, [ebp+arg_10]
.text:00001C46                 push    ecx             ; int
.text:00001C47                 mov     edx, [ebp+arg_8]
.text:00001C4A                 push    edx             ; size_t
.text:00001C4B                 mov     eax, [ebp+arg_4]
.text:00001C4E                 push    eax             ; int
.text:00001C4F                 push    4               ; size_t
.text:00001C51                 lea     ecx, [ebp+var_18]
.text:00001C54                 push    ecx             ; int
.text:00001C55                 mov     edx, [ebp+arg_0]
.text:00001C58                 push    edx             ; int
.text:00001C59                 call    _hmacmd5_do_hmac_internal
.text:00001C5E                 add     esp, 18h
.text:00001C61                 push    edx
.text:00001C62                 mov     ecx, ebp
.text:00001C64                 push    eax
.text:00001C65                 lea     edx, $LN5_2
.text:00001C6B                 call    @_RTC_CheckStackVars@8
.text:00001C70                 pop     eax
.text:00001C71                 pop     edx
.text:00001C72                 mov     ecx, [ebp+var_4]
.text:00001C75                 xor     ecx, ebp
.text:00001C77                 call    @__security_check_cookie@4
.text:00001C7C                 add     esp, 1Ch
.text:00001C7F                 cmp     ebp, esp
.text:00001C81                 call    __RTC_CheckEsp
.text:00001C86                 mov     esp, ebp
.text:00001C88                 pop     ebp
.text:00001C89                 retn
.text:00001C89 _hmacmd5_do_hmac_ssh endp
.text:00001C89
.text:00001C89 ; ---------------------------------------------------------------------------
.text:00001C8A                 align 4
.text:00001C8C $LN5_2          dd 1                    ; DATA XREF: _hmacmd5_do_hmac_ssh+6Do
.text:00001C90                 dd offset $LN4_2
.text:00001C94 $LN4_2          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001C90o
.text:00001C9C                 dd offset $LN3_2        ; "seqbuf"
.text:00001CA0 $LN3_2          db 'seqbuf',0           ; DATA XREF: .text:00001C9Co
.text:00001CA7                 align 4
.text:00001CA8
.text:00001CA8 ; =============== S U B R O U T I N E =======================================
.text:00001CA8
.text:00001CA8 ; Attributes: bp-based frame
.text:00001CA8
.text:00001CA8 ; int __cdecl hmacmd5_verify(int, int, size_t, int)
.text:00001CA8 _hmacmd5_verify proc near               ; DATA XREF: .rdata:00000028o
.text:00001CA8
.text:00001CA8 var_1C          = dword ptr -1Ch
.text:00001CA8 var_18          = dword ptr -18h
.text:00001CA8 var_14          = dword ptr -14h
.text:00001CA8 var_10          = dword ptr -10h
.text:00001CA8 var_C           = dword ptr -0Ch
.text:00001CA8 var_8           = dword ptr -8
.text:00001CA8 var_4           = dword ptr -4
.text:00001CA8 arg_0           = dword ptr  8
.text:00001CA8 arg_4           = dword ptr  0Ch
.text:00001CA8 arg_8           = dword ptr  10h
.text:00001CA8 arg_C           = dword ptr  14h
.text:00001CA8
.text:00001CA8                 push    ebp
.text:00001CA9                 mov     ebp, esp
.text:00001CAB                 sub     esp, 1Ch
.text:00001CAE                 mov     eax, 0CCCCCCCCh
.text:00001CB3                 mov     [ebp+var_1C], eax
.text:00001CB6                 mov     [ebp+var_18], eax
.text:00001CB9                 mov     [ebp+var_14], eax
.text:00001CBC                 mov     [ebp+var_10], eax
.text:00001CBF                 mov     [ebp+var_C], eax
.text:00001CC2                 mov     [ebp+var_8], eax
.text:00001CC5                 mov     [ebp+var_4], eax
.text:00001CC8                 mov     eax, dword ptr ds:___security_cookie
.text:00001CCD                 xor     eax, ebp
.text:00001CCF                 mov     [ebp+var_4], eax
.text:00001CD2                 lea     eax, [ebp+var_18]
.text:00001CD5                 push    eax             ; int
.text:00001CD6                 mov     ecx, [ebp+arg_C]
.text:00001CD9                 push    ecx             ; int
.text:00001CDA                 mov     edx, [ebp+arg_8]
.text:00001CDD                 push    edx             ; size_t
.text:00001CDE                 mov     eax, [ebp+arg_4]
.text:00001CE1                 push    eax             ; int
.text:00001CE2                 mov     ecx, [ebp+arg_0]
.text:00001CE5                 push    ecx             ; int
.text:00001CE6                 call    _hmacmd5_do_hmac_ssh
.text:00001CEB                 add     esp, 14h
.text:00001CEE                 push    10h             ; size_t
.text:00001CF0                 mov     edx, [ebp+arg_4]
.text:00001CF3                 add     edx, [ebp+arg_8]
.text:00001CF6                 push    edx             ; void *
.text:00001CF7                 lea     eax, [ebp+var_18]
.text:00001CFA                 push    eax             ; void *
.text:00001CFB                 call    _memcmp
.text:00001D00                 add     esp, 0Ch
.text:00001D03                 neg     eax
.text:00001D05                 sbb     eax, eax
.text:00001D07                 add     eax, 1
.text:00001D0A                 push    edx
.text:00001D0B                 mov     ecx, ebp
.text:00001D0D                 push    eax
.text:00001D0E                 lea     edx, $LN5_3
.text:00001D14                 call    @_RTC_CheckStackVars@8
.text:00001D19                 pop     eax
.text:00001D1A                 pop     edx
.text:00001D1B                 mov     ecx, [ebp+var_4]
.text:00001D1E                 xor     ecx, ebp
.text:00001D20                 call    @__security_check_cookie@4
.text:00001D25                 add     esp, 1Ch
.text:00001D28                 cmp     ebp, esp
.text:00001D2A                 call    __RTC_CheckEsp
.text:00001D2F                 mov     esp, ebp
.text:00001D31                 pop     ebp
.text:00001D32                 retn
.text:00001D32 _hmacmd5_verify endp
.text:00001D32
.text:00001D32 ; ---------------------------------------------------------------------------
.text:00001D33                 align 4
.text:00001D34 $LN5_3          dd 1                    ; DATA XREF: _hmacmd5_verify+66o
.text:00001D38                 dd offset $LN4_3
.text:00001D3C $LN4_3          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001D38o
.text:00001D44                 dd offset $LN3_3        ; "correct"
.text:00001D48 $LN3_3          db 'correct',0          ; DATA XREF: .text:00001D44o
.text:00001D48 _text           ends
.text:00001D48
.rtc$TMZ:00001D50 ; ===========================================================================
.rtc$TMZ:00001D50
.rtc$TMZ:00001D50 ; Segment type: Pure data
.rtc$TMZ:00001D50 ; Segment permissions: Read
.rtc$TMZ:00001D50 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001D50                 assume cs:_rtc$TMZ
.rtc$TMZ:00001D50                 ;org 1D50h
.rtc$TMZ:00001D50 ; COMDAT (pick any)
.rtc$TMZ:00001D50 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001D50 _rtc$TMZ        ends
.rtc$TMZ:00001D50
.rtc$IMZ:00001D54 ; ===========================================================================
.rtc$IMZ:00001D54
.rtc$IMZ:00001D54 ; Segment type: Pure data
.rtc$IMZ:00001D54 ; Segment permissions: Read
.rtc$IMZ:00001D54 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001D54                 assume cs:_rtc$IMZ
.rtc$IMZ:00001D54                 ;org 1D54h
.rtc$IMZ:00001D54 ; COMDAT (pick any)
.rtc$IMZ:00001D54 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001D54 _rtc$IMZ        ends
.rtc$IMZ:00001D54
UNDEF:00001D60 ; ===========================================================================
UNDEF:00001D60
UNDEF:00001D60 ; Segment type: Externs
UNDEF:00001D60 ; UNDEF
UNDEF:00001D60                 extrn __RTC_CheckEsp:near ; CODE XREF: _MD5Init+2Fp
UNDEF:00001D60                                         ; _MD5Update+1ACp ...
UNDEF:00001D64                 extrn __RTC_Shutdown:near
UNDEF:00001D64                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001D68                 extrn __RTC_InitBase:near
UNDEF:00001D68                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001D6C ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00001D6C                 extrn _memcpy:near      ; CODE XREF: _MD5Update+78p
UNDEF:00001D6C                                         ; _MD5Update+C4p ...
UNDEF:00001D70                 extrn ___security_cookie:near ; DATA XREF: _MD5Update+16r
UNDEF:00001D70                                         ; _MD5Final+16r ...
UNDEF:00001D74                 extrn @__security_check_cookie@4:near
UNDEF:00001D74                                         ; CODE XREF: _MD5Update+1A2p
UNDEF:00001D74                                         ; _MD5Final+1B2p ...
UNDEF:00001D78                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001D78                                         ; CODE XREF: _MD5Update+195p
UNDEF:00001D78                                         ; _MD5Final+1A5p ...
UNDEF:00001D7C ; void *__cdecl memset(void *, int, size_t)
UNDEF:00001D7C                 extrn _memset:near      ; CODE XREF: _MD5Final+74p
UNDEF:00001D7C                                         ; _hmacmd5_key+34p ...
UNDEF:00001D80                 extrn _safemalloc:near  ; CODE XREF: _hmacmd5_make_context+7p
UNDEF:00001D84                 extrn _safefree:near    ; CODE XREF: _hmacmd5_free_context+7p
UNDEF:00001D88                 extrn _smemclr:near     ; CODE XREF: _hmacmd5_key+10Cp
UNDEF:00001D8C ; int __cdecl memcmp(const void *, const void *, size_t)
UNDEF:00001D8C                 extrn _memcmp:near      ; CODE XREF: _hmacmd5_verresult+44p
UNDEF:00001D8C                                         ; _hmacmd5_verify+53p
UNDEF:00001D8C
UNDEF:00001D8C
UNDEF:00001D8C                 end