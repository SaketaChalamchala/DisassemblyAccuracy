.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 8A3EABA3EB2BBC55C05BBF08C6E5F7E9
.data:00000000 ; Input CRC32 : DB41DAB7
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winhandl.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; wchar_t _SG85795
.data:00000000 $SG85795:                               ; DATA XREF: _handle_write+10o
.data:00000000                 unicode 0, <..\..\winhandl.c>,0
.data:00000022                 align 4
.data:00000024 ; wchar_t _SG85796
.data:00000024 $SG85796:                               ; DATA XREF: _handle_write+15o
.data:00000024                 unicode 0, <h->
.data:00000024                 dw 3Eh
.data:00000024                 unicode 0, <type == HT_OUTPUT>,0
.data:0000004E                 align 10h
.data:00000050 ; wchar_t _SG85798
.data:00000050 $SG85798:                               ; DATA XREF: _handle_write+30o
.data:00000050                 unicode 0, <..\..\winhandl.c>,0
.data:00000072                 align 4
.data:00000074 ; wchar_t _SG85799
.data:00000074 $SG85799:                               ; DATA XREF: _handle_write+35o
.data:00000074                 unicode 0, <h->
.data:00000074                 dw 3Eh
.data:00000074                 unicode 0, <u.o.outgoingeof == EOF_NO>,0
.data:000000AE                 align 10h
.data:000000B0 ; wchar_t _SG85804
.data:000000B0 $SG85804:                               ; DATA XREF: _handle_write_eof+10o
.data:000000B0                 unicode 0, <..\..\winhandl.c>,0
.data:000000D2                 align 4
.data:000000D4 ; wchar_t _SG85805
.data:000000D4 $SG85805:                               ; DATA XREF: _handle_write_eof+15o
.data:000000D4                 unicode 0, <h->
.data:000000D4                 dw 3Eh
.data:000000D4                 unicode 0, <type == HT_OUTPUT>,0
.data:000000FE                 align 10h
.data:00000100 ; wchar_t _SG85835
.data:00000100 $SG85835:                               ; DATA XREF: _handle_free+18o
.data:00000100                 unicode 0, <..\..\winhandl.c>,0
.data:00000122                 align 4
.data:00000124 ; wchar_t _SG85836
.data:00000124 $SG85836:                               ; DATA XREF: _handle_free+1Do
.data:00000124                 unicode 0, <h && !h->
.data:00000124                 dw 3Eh
.data:00000124                 unicode 0, <u.g.moribund>,0
.data:00000150 ; wchar_t _SG85846
.data:00000150 $SG85846:                               ; DATA XREF: _handle_got_event+2Ao
.data:00000150                 unicode 0, <..\..\winhandl.c>,0
.data:00000172                 align 4
.data:00000174 ; wchar_t _SG85847
.data:00000174 $SG85847:                               ; DATA XREF: _handle_got_event+2Fo
.data:00000174                 unicode 0, <handles_by_evtomain>,0
.data:0000019C ; wchar_t _SG85871
.data:0000019C $SG85871:                               ; DATA XREF: _handle_unthrottle+10o
.data:0000019C                 unicode 0, <..\..\winhandl.c>,0
.data:000001BE                 align 10h
.data:000001C0 ; wchar_t _SG85872
.data:000001C0 $SG85872:                               ; DATA XREF: _handle_unthrottle+15o
.data:000001C0                 unicode 0, <h->
.data:000001C0                 dw 3Eh
.data:000001C0                 unicode 0, <type == HT_INPUT>,0
.data:000001E8 ; wchar_t _SG85877
.data:000001E8 $SG85877:                               ; DATA XREF: _handle_backlog+10o
.data:000001E8                 unicode 0, <..\..\winhandl.c>,0
.data:0000020A                 align 4
.data:0000020C ; wchar_t _SG85878
.data:0000020C $SG85878:                               ; DATA XREF: _handle_backlog+15o
.data:0000020C                 unicode 0, <h->
.data:0000020C                 dw 3Eh
.data:0000020C                 unicode 0, <type == HT_OUTPUT>,0
.data:00000236                 align 4
.data:00000236 _data           ends
.data:00000236
.text:00000238 ; ===========================================================================
.text:00000238
.text:00000238 ; Segment type: Pure code
.text:00000238 ; Segment permissions: Read/Execute
.text:00000238 _text           segment para public 'CODE' use32
.text:00000238                 assume cs:_text
.text:00000238                 ;org 238h
.text:00000238                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000238
.text:00000238 ; =============== S U B R O U T I N E =======================================
.text:00000238
.text:00000238 ; Attributes: bp-based frame
.text:00000238
.text:00000238                 public _handle_input_new
.text:00000238 _handle_input_new proc near
.text:00000238
.text:00000238 var_10          = dword ptr -10h
.text:00000238 ThreadId        = dword ptr -0Ch
.text:00000238 var_8           = dword ptr -8
.text:00000238 var_4           = dword ptr -4
.text:00000238 arg_0           = dword ptr  8
.text:00000238 arg_4           = dword ptr  0Ch
.text:00000238 arg_8           = dword ptr  10h
.text:00000238 arg_C           = dword ptr  14h
.text:00000238
.text:00000238                 push    ebp
.text:00000239                 mov     ebp, esp
.text:0000023B                 sub     esp, 10h
.text:0000023E                 push    esi
.text:0000023F                 mov     eax, 0CCCCCCCCh
.text:00000244                 mov     [ebp+var_10], eax
.text:00000247                 mov     [ebp+ThreadId], eax
.text:0000024A                 mov     [ebp+var_8], eax
.text:0000024D                 mov     [ebp+var_4], eax
.text:00000250                 push    1034h
.text:00000255                 push    1
.text:00000257                 call    _safemalloc
.text:0000025C                 add     esp, 8
.text:0000025F                 mov     [ebp+var_4], eax
.text:00000262                 mov     eax, [ebp+var_4]
.text:00000265                 mov     dword ptr [eax], 0
.text:0000026B                 mov     ecx, [ebp+var_4]
.text:0000026E                 mov     edx, [ebp+arg_0]
.text:00000271                 mov     [ecx+4], edx
.text:00000274                 mov     esi, esp
.text:00000276                 push    0               ; lpName
.text:00000278                 push    0               ; bInitialState
.text:0000027A                 push    0               ; bManualReset
.text:0000027C                 push    0               ; lpEventAttributes
.text:0000027E                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:00000284                 cmp     esi, esp
.text:00000286                 call    __RTC_CheckEsp
.text:0000028B                 mov     ecx, [ebp+var_4]
.text:0000028E                 mov     [ecx+8], eax
.text:00000291                 mov     esi, esp
.text:00000293                 push    0               ; lpName
.text:00000295                 push    0               ; bInitialState
.text:00000297                 push    0               ; bManualReset
.text:00000299                 push    0               ; lpEventAttributes
.text:0000029B                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:000002A1                 cmp     esi, esp
.text:000002A3                 call    __RTC_CheckEsp
.text:000002A8                 mov     edx, [ebp+var_4]
.text:000002AB                 mov     [edx+0Ch], eax
.text:000002AE                 mov     eax, [ebp+var_4]
.text:000002B1                 mov     ecx, [ebp+arg_4]
.text:000002B4                 mov     [eax+1030h], ecx
.text:000002BA                 mov     edx, [ebp+var_4]
.text:000002BD                 mov     dword ptr [edx+18h], 0
.text:000002C4                 mov     eax, [ebp+var_4]
.text:000002C7                 mov     dword ptr [eax+10h], 0
.text:000002CE                 mov     ecx, [ebp+var_4]
.text:000002D1                 mov     dword ptr [ecx+14h], 0
.text:000002D8                 mov     edx, [ebp+var_4]
.text:000002DB                 mov     eax, [ebp+arg_8]
.text:000002DE                 mov     [edx+20h], eax
.text:000002E1                 mov     ecx, [ebp+var_4]
.text:000002E4                 mov     edx, [ebp+arg_C]
.text:000002E7                 mov     [ecx+24h], edx
.text:000002EA                 cmp     ds:_handles_by_evtomain, 0
.text:000002F1                 jnz     short loc_305
.text:000002F3                 push    offset _handle_cmp_evtomain
.text:000002F8                 call    _newtree234
.text:000002FD                 add     esp, 4
.text:00000300                 mov     ds:_handles_by_evtomain, eax
.text:00000305
.text:00000305 loc_305:                                ; CODE XREF: _handle_input_new+B9j
.text:00000305                 mov     eax, [ebp+var_4]
.text:00000308                 push    eax
.text:00000309                 mov     ecx, ds:_handles_by_evtomain
.text:0000030F                 push    ecx
.text:00000310                 call    _add234
.text:00000315                 add     esp, 8
.text:00000318                 mov     esi, esp
.text:0000031A                 lea     edx, [ebp+ThreadId]
.text:0000031D                 push    edx             ; lpThreadId
.text:0000031E                 push    0               ; dwCreationFlags
.text:00000320                 mov     eax, [ebp+var_4]
.text:00000323                 add     eax, 4
.text:00000326                 push    eax             ; lpParameter
.text:00000327                 push    offset _handle_input_threadfunc@4 ; lpStartAddress
.text:0000032C                 push    0               ; dwStackSize
.text:0000032E                 push    0               ; lpThreadAttributes
.text:00000330                 call    dword ptr ds:__imp__CreateThread@24 ; CreateThread(x,x,x,x,x,x)
.text:00000336                 cmp     esi, esp
.text:00000338                 call    __RTC_CheckEsp
.text:0000033D                 mov     ecx, [ebp+var_4]
.text:00000340                 mov     dword ptr [ecx+1Ch], 1
.text:00000347                 mov     eax, [ebp+var_4]
.text:0000034A                 push    edx
.text:0000034B                 mov     ecx, ebp
.text:0000034D                 push    eax
.text:0000034E                 lea     edx, $LN6
.text:00000354                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000359                 pop     eax
.text:0000035A                 pop     edx
.text:0000035B                 pop     esi
.text:0000035C                 add     esp, 10h
.text:0000035F                 cmp     ebp, esp
.text:00000361                 call    __RTC_CheckEsp
.text:00000366                 mov     esp, ebp
.text:00000368                 pop     ebp
.text:00000369                 retn
.text:00000369 _handle_input_new endp
.text:00000369
.text:00000369 ; ---------------------------------------------------------------------------
.text:0000036A                 align 4
.text:0000036C $LN6            dd 1                    ; DATA XREF: _handle_input_new+116o
.text:00000370                 dd offset $LN5
.text:00000374 $LN5            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000370o
.text:0000037C                 dd offset $LN4          ; "in_threadid"
.text:00000380 $LN4            db 'in_threadid',0      ; DATA XREF: .text:0000037Co
.text:0000038C                 db 0Ch dup(0CCh)
.text:00000398
.text:00000398 ; =============== S U B R O U T I N E =======================================
.text:00000398
.text:00000398 ; Attributes: bp-based frame
.text:00000398
.text:00000398 ; DWORD __stdcall handle_input_threadfunc(LPVOID lpThreadParameter)
.text:00000398 _handle_input_threadfunc@4 proc near    ; DATA XREF: _handle_input_new+EFo
.text:00000398
.text:00000398 var_34          = byte ptr -34h
.text:00000398 var_31          = byte ptr -31h
.text:00000398 nNumberOfBytesToRead= dword ptr -30h
.text:00000398 var_2C          = dword ptr -2Ch
.text:00000398 hObject         = dword ptr -28h
.text:00000398 Dst             = dword ptr -24h
.text:00000398 var_1C          = byte ptr -1Ch
.text:00000398 var_4           = dword ptr -4
.text:00000398 lpThreadParameter= dword ptr  8
.text:00000398
.text:00000398                 push    ebp
.text:00000399                 mov     ebp, esp
.text:0000039B                 sub     esp, 34h
.text:0000039E                 push    esi
.text:0000039F                 push    edi
.text:000003A0                 lea     edi, [ebp+var_34]
.text:000003A3                 mov     ecx, 0Dh
.text:000003A8                 mov     eax, 0CCCCCCCCh
.text:000003AD                 rep stosd
.text:000003AF                 mov     [ebp+var_31], 0
.text:000003B3                 mov     eax, [ebp+lpThreadParameter]
.text:000003B6                 mov     [ebp+var_4], eax
.text:000003B9                 mov     ecx, [ebp+var_4]
.text:000003BC                 mov     edx, [ecx+20h]
.text:000003BF                 and     edx, 1
.text:000003C2                 jz      short loc_3EA
.text:000003C4                 lea     eax, [ebp+var_1C]
.text:000003C7                 mov     [ebp+Dst], eax
.text:000003CA                 mov     esi, esp
.text:000003CC                 push    0               ; lpName
.text:000003CE                 push    0               ; bInitialState
.text:000003D0                 push    1               ; bManualReset
.text:000003D2                 push    0               ; lpEventAttributes
.text:000003D4                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:000003DA                 cmp     esi, esp
.text:000003DC                 call    __RTC_CheckEsp
.text:000003E1                 mov     [ebp+var_31], 1
.text:000003E5                 mov     [ebp+hObject], eax
.text:000003E8                 jmp     short loc_3F1
.text:000003EA ; ---------------------------------------------------------------------------
.text:000003EA
.text:000003EA loc_3EA:                                ; CODE XREF: handle_input_threadfunc(x)+2Aj
.text:000003EA                 mov     [ebp+Dst], 0
.text:000003F1
.text:000003F1 loc_3F1:                                ; CODE XREF: handle_input_threadfunc(x)+50j
.text:000003F1                 mov     ecx, [ebp+var_4]
.text:000003F4                 mov     edx, [ecx+20h]
.text:000003F7                 and     edx, 4
.text:000003FA                 jz      short loc_405
.text:000003FC                 mov     [ebp+nNumberOfBytesToRead], 1
.text:00000403                 jmp     short loc_40C
.text:00000405 ; ---------------------------------------------------------------------------
.text:00000405
.text:00000405 loc_405:                                ; CODE XREF: handle_input_threadfunc(x)+62j
.text:00000405                 mov     [ebp+nNumberOfBytesToRead], 1000h
.text:0000040C
.text:0000040C loc_40C:                                ; CODE XREF: handle_input_threadfunc(x)+6Bj
.text:0000040C                                         ; handle_input_threadfunc(x)+1E5j ...
.text:0000040C                 mov     eax, 1
.text:00000411                 test    eax, eax
.text:00000413                 jz      loc_5E4
.text:00000419                 cmp     [ebp+Dst], 0
.text:0000041D                 jz      short loc_44B
.text:0000041F                 push    14h             ; Size
.text:00000421                 push    0               ; Val
.text:00000423                 mov     ecx, [ebp+Dst]
.text:00000426                 push    ecx             ; Dst
.text:00000427                 call    _memset
.text:0000042C                 add     esp, 0Ch
.text:0000042F                 cmp     [ebp+var_31], 0
.text:00000433                 jnz     short loc_442
.text:00000435                 push    offset $LN23
.text:0000043A                 call    __RTC_UninitUse
.text:0000043F                 add     esp, 4
.text:00000442
.text:00000442 loc_442:                                ; CODE XREF: handle_input_threadfunc(x)+9Bj
.text:00000442                 mov     edx, [ebp+Dst]
.text:00000445                 mov     eax, [ebp+hObject]
.text:00000448                 mov     [edx+10h], eax
.text:0000044B
.text:0000044B loc_44B:                                ; CODE XREF: handle_input_threadfunc(x)+85j
.text:0000044B                 mov     esi, esp
.text:0000044D                 mov     ecx, [ebp+Dst]
.text:00000450                 push    ecx             ; lpOverlapped
.text:00000451                 mov     edx, [ebp+var_4]
.text:00000454                 add     edx, 1024h
.text:0000045A                 push    edx             ; lpNumberOfBytesRead
.text:0000045B                 mov     eax, [ebp+nNumberOfBytesToRead]
.text:0000045E                 push    eax             ; nNumberOfBytesToRead
.text:0000045F                 mov     ecx, [ebp+var_4]
.text:00000462                 add     ecx, 24h ; '$'
.text:00000465                 push    ecx             ; lpBuffer
.text:00000466                 mov     edx, [ebp+var_4]
.text:00000469                 mov     eax, [edx]
.text:0000046B                 push    eax             ; hFile
.text:0000046C                 call    dword ptr ds:__imp__ReadFile@20 ; ReadFile(x,x,x,x,x)
.text:00000472                 cmp     esi, esp
.text:00000474                 call    __RTC_CheckEsp
.text:00000479                 mov     [ebp+var_2C], eax
.text:0000047C                 cmp     [ebp+var_2C], 0
.text:00000480                 jnz     short loc_49C
.text:00000482                 mov     esi, esp
.text:00000484                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000048A                 cmp     esi, esp
.text:0000048C                 call    __RTC_CheckEsp
.text:00000491                 mov     ecx, [ebp+var_4]
.text:00000494                 mov     [ecx+1028h], eax
.text:0000049A                 jmp     short loc_4A9
.text:0000049C ; ---------------------------------------------------------------------------
.text:0000049C
.text:0000049C loc_49C:                                ; CODE XREF: handle_input_threadfunc(x)+E8j
.text:0000049C                 mov     edx, [ebp+var_4]
.text:0000049F                 mov     dword ptr [edx+1028h], 0
.text:000004A9
.text:000004A9 loc_4A9:                                ; CODE XREF: handle_input_threadfunc(x)+102j
.text:000004A9                 cmp     [ebp+Dst], 0
.text:000004AD                 jz      loc_534
.text:000004B3                 cmp     [ebp+var_2C], 0
.text:000004B7                 jnz     short loc_534
.text:000004B9                 mov     eax, [ebp+var_4]
.text:000004BC                 cmp     dword ptr [eax+1028h], 3E5h
.text:000004C6                 jnz     short loc_534
.text:000004C8                 mov     esi, esp
.text:000004CA                 push    0FFFFFFFFh      ; dwMilliseconds
.text:000004CC                 mov     ecx, [ebp+Dst]
.text:000004CF                 mov     edx, [ecx+10h]
.text:000004D2                 push    edx             ; hHandle
.text:000004D3                 call    dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:000004D9                 cmp     esi, esp
.text:000004DB                 call    __RTC_CheckEsp
.text:000004E0                 mov     esi, esp
.text:000004E2                 push    0               ; bWait
.text:000004E4                 mov     eax, [ebp+var_4]
.text:000004E7                 add     eax, 1024h
.text:000004EC                 push    eax             ; lpNumberOfBytesTransferred
.text:000004ED                 mov     ecx, [ebp+Dst]
.text:000004F0                 push    ecx             ; lpOverlapped
.text:000004F1                 mov     edx, [ebp+var_4]
.text:000004F4                 mov     eax, [edx]
.text:000004F6                 push    eax             ; hFile
.text:000004F7                 call    dword ptr ds:__imp__GetOverlappedResult@16 ; GetOverlappedResult(x,x,x,x)
.text:000004FD                 cmp     esi, esp
.text:000004FF                 call    __RTC_CheckEsp
.text:00000504                 mov     [ebp+var_2C], eax
.text:00000507                 cmp     [ebp+var_2C], 0
.text:0000050B                 jnz     short loc_527
.text:0000050D                 mov     esi, esp
.text:0000050F                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000515                 cmp     esi, esp
.text:00000517                 call    __RTC_CheckEsp
.text:0000051C                 mov     ecx, [ebp+var_4]
.text:0000051F                 mov     [ecx+1028h], eax
.text:00000525                 jmp     short loc_534
.text:00000527 ; ---------------------------------------------------------------------------
.text:00000527
.text:00000527 loc_527:                                ; CODE XREF: handle_input_threadfunc(x)+173j
.text:00000527                 mov     edx, [ebp+var_4]
.text:0000052A                 mov     dword ptr [edx+1028h], 0
.text:00000534
.text:00000534 loc_534:                                ; CODE XREF: handle_input_threadfunc(x)+115j
.text:00000534                                         ; handle_input_threadfunc(x)+11Fj ...
.text:00000534                 cmp     [ebp+var_2C], 0
.text:00000538                 jnz     short loc_560
.text:0000053A                 mov     eax, [ebp+var_4]
.text:0000053D                 cmp     dword ptr [eax+1028h], 6Dh ; 'm'
.text:00000544                 jnz     short loc_553
.text:00000546                 mov     ecx, [ebp+var_4]
.text:00000549                 mov     dword ptr [ecx+1028h], 0
.text:00000553
.text:00000553 loc_553:                                ; CODE XREF: handle_input_threadfunc(x)+1ACj
.text:00000553                 mov     edx, [ebp+var_4]
.text:00000556                 mov     dword ptr [edx+1024h], 0
.text:00000560
.text:00000560 loc_560:                                ; CODE XREF: handle_input_threadfunc(x)+1A0j
.text:00000560                 cmp     [ebp+var_2C], 0
.text:00000564                 jz      short loc_582
.text:00000566                 mov     eax, [ebp+var_4]
.text:00000569                 cmp     dword ptr [eax+1024h], 0
.text:00000570                 jnz     short loc_582
.text:00000572                 mov     ecx, [ebp+var_4]
.text:00000575                 mov     edx, [ecx+20h]
.text:00000578                 and     edx, 2
.text:0000057B                 jz      short loc_582
.text:0000057D                 jmp     loc_40C
.text:00000582 ; ---------------------------------------------------------------------------
.text:00000582
.text:00000582 loc_582:                                ; CODE XREF: handle_input_threadfunc(x)+1CCj
.text:00000582                                         ; handle_input_threadfunc(x)+1D8j ...
.text:00000582                 mov     esi, esp
.text:00000584                 mov     eax, [ebp+var_4]
.text:00000587                 mov     ecx, [eax+4]
.text:0000058A                 push    ecx             ; hEvent
.text:0000058B                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:00000591                 cmp     esi, esp
.text:00000593                 call    __RTC_CheckEsp
.text:00000598                 mov     edx, [ebp+var_4]
.text:0000059B                 cmp     dword ptr [edx+1024h], 0
.text:000005A2                 jnz     short loc_5A6
.text:000005A4                 jmp     short loc_5E4
.text:000005A6 ; ---------------------------------------------------------------------------
.text:000005A6
.text:000005A6 loc_5A6:                                ; CODE XREF: handle_input_threadfunc(x)+20Aj
.text:000005A6                 mov     esi, esp
.text:000005A8                 push    0FFFFFFFFh      ; dwMilliseconds
.text:000005AA                 mov     eax, [ebp+var_4]
.text:000005AD                 mov     ecx, [eax+8]
.text:000005B0                 push    ecx             ; hHandle
.text:000005B1                 call    dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:000005B7                 cmp     esi, esp
.text:000005B9                 call    __RTC_CheckEsp
.text:000005BE                 mov     edx, [ebp+var_4]
.text:000005C1                 cmp     dword ptr [edx+10h], 0
.text:000005C5                 jz      short loc_5DF
.text:000005C7                 mov     esi, esp
.text:000005C9                 mov     eax, [ebp+var_4]
.text:000005CC                 mov     ecx, [eax+4]
.text:000005CF                 push    ecx             ; hEvent
.text:000005D0                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:000005D6                 cmp     esi, esp
.text:000005D8                 call    __RTC_CheckEsp
.text:000005DD                 jmp     short loc_5E4
.text:000005DF ; ---------------------------------------------------------------------------
.text:000005DF
.text:000005DF loc_5DF:                                ; CODE XREF: handle_input_threadfunc(x)+22Dj
.text:000005DF                 jmp     loc_40C
.text:000005E4 ; ---------------------------------------------------------------------------
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: handle_input_threadfunc(x)+7Bj
.text:000005E4                                         ; handle_input_threadfunc(x)+20Cj ...
.text:000005E4                 cmp     [ebp+Dst], 0
.text:000005E8                 jz      short loc_610
.text:000005EA                 cmp     [ebp+var_31], 0
.text:000005EE                 jnz     short loc_5FD
.text:000005F0                 push    offset $LN23
.text:000005F5                 call    __RTC_UninitUse
.text:000005FA                 add     esp, 4
.text:000005FD
.text:000005FD loc_5FD:                                ; CODE XREF: handle_input_threadfunc(x)+256j
.text:000005FD                 mov     esi, esp
.text:000005FF                 mov     edx, [ebp+hObject]
.text:00000602                 push    edx             ; hObject
.text:00000603                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000609                 cmp     esi, esp
.text:0000060B                 call    __RTC_CheckEsp
.text:00000610
.text:00000610 loc_610:                                ; CODE XREF: handle_input_threadfunc(x)+250j
.text:00000610                 xor     eax, eax
.text:00000612                 push    edx
.text:00000613                 mov     ecx, ebp
.text:00000615                 push    eax
.text:00000616                 lea     edx, $LN27
.text:0000061C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000621                 pop     eax
.text:00000622                 pop     edx
.text:00000623                 pop     edi
.text:00000624                 pop     esi
.text:00000625                 add     esp, 34h
.text:00000628                 cmp     ebp, esp
.text:0000062A                 call    __RTC_CheckEsp
.text:0000062F                 mov     esp, ebp
.text:00000631                 pop     ebp
.text:00000632                 retn    4
.text:00000632 _handle_input_threadfunc@4 endp
.text:00000632
.text:00000632 ; ---------------------------------------------------------------------------
.text:00000635                 align 4
.text:00000638 $LN27           dd 1                    ; DATA XREF: handle_input_threadfunc(x)+27Eo
.text:0000063C                 dd offset $LN26
.text:00000640 $LN26           dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:0000063Co
.text:00000648                 dd offset $LN25
.text:0000064C $LN25           dd 6C766Fh              ; DATA XREF: .text:00000648o
.text:00000650 $LN23           dd 76656Fh, 0CCCCCCCCh  ; DATA XREF: handle_input_threadfunc(x)+9Do
.text:00000650                                         ; handle_input_threadfunc(x)+258o
.text:00000658
.text:00000658 ; =============== S U B R O U T I N E =======================================
.text:00000658
.text:00000658 ; Attributes: bp-based frame
.text:00000658
.text:00000658 _handle_cmp_evtomain proc near          ; DATA XREF: _handle_input_new+BBo
.text:00000658                                         ; _handle_output_new+DBo ...
.text:00000658
.text:00000658 var_8           = dword ptr -8
.text:00000658 var_4           = dword ptr -4
.text:00000658 arg_0           = dword ptr  8
.text:00000658 arg_4           = dword ptr  0Ch
.text:00000658
.text:00000658                 push    ebp
.text:00000659                 mov     ebp, esp
.text:0000065B                 sub     esp, 8
.text:0000065E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000665                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000066C                 mov     eax, [ebp+arg_0]
.text:0000066F                 mov     [ebp+var_4], eax
.text:00000672                 mov     ecx, [ebp+arg_4]
.text:00000675                 mov     [ebp+var_8], ecx
.text:00000678                 mov     edx, [ebp+var_4]
.text:0000067B                 mov     eax, [ebp+var_8]
.text:0000067E                 mov     ecx, [edx+8]
.text:00000681                 cmp     ecx, [eax+8]
.text:00000684                 jnb     short loc_68D
.text:00000686                 or      eax, 0FFFFFFFFh
.text:00000689                 jmp     short loc_6A6
.text:0000068B ; ---------------------------------------------------------------------------
.text:0000068B                 jmp     short loc_6A6
.text:0000068D ; ---------------------------------------------------------------------------
.text:0000068D
.text:0000068D loc_68D:                                ; CODE XREF: _handle_cmp_evtomain+2Cj
.text:0000068D                 mov     edx, [ebp+var_4]
.text:00000690                 mov     eax, [ebp+var_8]
.text:00000693                 mov     ecx, [edx+8]
.text:00000696                 cmp     ecx, [eax+8]
.text:00000699                 jbe     short loc_6A4
.text:0000069B                 mov     eax, 1
.text:000006A0                 jmp     short loc_6A6
.text:000006A2 ; ---------------------------------------------------------------------------
.text:000006A2                 jmp     short loc_6A6
.text:000006A4 ; ---------------------------------------------------------------------------
.text:000006A4
.text:000006A4 loc_6A4:                                ; CODE XREF: _handle_cmp_evtomain+41j
.text:000006A4                 xor     eax, eax
.text:000006A6
.text:000006A6 loc_6A6:                                ; CODE XREF: _handle_cmp_evtomain+31j
.text:000006A6                                         ; _handle_cmp_evtomain+33j ...
.text:000006A6                 mov     esp, ebp
.text:000006A8                 pop     ebp
.text:000006A9                 retn
.text:000006A9 _handle_cmp_evtomain endp
.text:000006A9
.text:000006A9 ; ---------------------------------------------------------------------------
.text:000006AA                 db 0Eh dup(0CCh)
.text:000006B8
.text:000006B8 ; =============== S U B R O U T I N E =======================================
.text:000006B8
.text:000006B8 ; Attributes: bp-based frame
.text:000006B8
.text:000006B8                 public _handle_output_new
.text:000006B8 _handle_output_new proc near
.text:000006B8
.text:000006B8 var_10          = dword ptr -10h
.text:000006B8 ThreadId        = dword ptr -0Ch
.text:000006B8 var_8           = dword ptr -8
.text:000006B8 var_4           = dword ptr -4
.text:000006B8 arg_0           = dword ptr  8
.text:000006B8 arg_4           = dword ptr  0Ch
.text:000006B8 arg_8           = dword ptr  10h
.text:000006B8 arg_C           = dword ptr  14h
.text:000006B8
.text:000006B8                 push    ebp
.text:000006B9                 mov     ebp, esp
.text:000006BB                 sub     esp, 10h
.text:000006BE                 push    esi
.text:000006BF                 mov     eax, 0CCCCCCCCh
.text:000006C4                 mov     [ebp+var_10], eax
.text:000006C7                 mov     [ebp+ThreadId], eax
.text:000006CA                 mov     [ebp+var_8], eax
.text:000006CD                 mov     [ebp+var_4], eax
.text:000006D0                 push    1034h
.text:000006D5                 push    1
.text:000006D7                 call    _safemalloc
.text:000006DC                 add     esp, 8
.text:000006DF                 mov     [ebp+var_4], eax
.text:000006E2                 mov     eax, [ebp+var_4]
.text:000006E5                 mov     dword ptr [eax], 1
.text:000006EB                 mov     ecx, [ebp+var_4]
.text:000006EE                 mov     edx, [ebp+arg_0]
.text:000006F1                 mov     [ecx+4], edx
.text:000006F4                 mov     esi, esp
.text:000006F6                 push    0               ; lpName
.text:000006F8                 push    0               ; bInitialState
.text:000006FA                 push    0               ; bManualReset
.text:000006FC                 push    0               ; lpEventAttributes
.text:000006FE                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:00000704                 cmp     esi, esp
.text:00000706                 call    __RTC_CheckEsp
.text:0000070B                 mov     ecx, [ebp+var_4]
.text:0000070E                 mov     [ecx+8], eax
.text:00000711                 mov     esi, esp
.text:00000713                 push    0               ; lpName
.text:00000715                 push    0               ; bInitialState
.text:00000717                 push    0               ; bManualReset
.text:00000719                 push    0               ; lpEventAttributes
.text:0000071B                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:00000721                 cmp     esi, esp
.text:00000723                 call    __RTC_CheckEsp
.text:00000728                 mov     edx, [ebp+var_4]
.text:0000072B                 mov     [edx+0Ch], eax
.text:0000072E                 mov     eax, [ebp+var_4]
.text:00000731                 mov     dword ptr [eax+1Ch], 0
.text:00000738                 mov     ecx, [ebp+var_4]
.text:0000073B                 mov     dword ptr [ecx+18h], 0
.text:00000742                 mov     edx, [ebp+var_4]
.text:00000745                 mov     dword ptr [edx+10h], 0
.text:0000074C                 mov     eax, [ebp+var_4]
.text:0000074F                 mov     dword ptr [eax+14h], 0
.text:00000756                 mov     ecx, [ebp+var_4]
.text:00000759                 mov     edx, [ebp+arg_8]
.text:0000075C                 mov     [ecx+20h], edx
.text:0000075F                 mov     eax, [ebp+var_4]
.text:00000762                 add     eax, 38h ; '8'
.text:00000765                 push    eax
.text:00000766                 call    _bufchain_init
.text:0000076B                 add     esp, 4
.text:0000076E                 mov     ecx, [ebp+var_4]
.text:00000771                 mov     dword ptr [ecx+44h], 0
.text:00000778                 mov     edx, [ebp+var_4]
.text:0000077B                 mov     eax, [ebp+arg_4]
.text:0000077E                 mov     [edx+48h], eax
.text:00000781                 mov     ecx, [ebp+var_4]
.text:00000784                 mov     edx, [ebp+arg_C]
.text:00000787                 mov     [ecx+24h], edx
.text:0000078A                 cmp     ds:_handles_by_evtomain, 0
.text:00000791                 jnz     short loc_7A5
.text:00000793                 push    offset _handle_cmp_evtomain
.text:00000798                 call    _newtree234
.text:0000079D                 add     esp, 4
.text:000007A0                 mov     ds:_handles_by_evtomain, eax
.text:000007A5
.text:000007A5 loc_7A5:                                ; CODE XREF: _handle_output_new+D9j
.text:000007A5                 mov     eax, [ebp+var_4]
.text:000007A8                 push    eax
.text:000007A9                 mov     ecx, ds:_handles_by_evtomain
.text:000007AF                 push    ecx
.text:000007B0                 call    _add234
.text:000007B5                 add     esp, 8
.text:000007B8                 mov     esi, esp
.text:000007BA                 lea     edx, [ebp+ThreadId]
.text:000007BD                 push    edx             ; lpThreadId
.text:000007BE                 push    0               ; dwCreationFlags
.text:000007C0                 mov     eax, [ebp+var_4]
.text:000007C3                 add     eax, 4
.text:000007C6                 push    eax             ; lpParameter
.text:000007C7                 push    offset _handle_output_threadfunc@4 ; lpStartAddress
.text:000007CC                 push    0               ; dwStackSize
.text:000007CE                 push    0               ; lpThreadAttributes
.text:000007D0                 call    dword ptr ds:__imp__CreateThread@24 ; CreateThread(x,x,x,x,x,x)
.text:000007D6                 cmp     esi, esp
.text:000007D8                 call    __RTC_CheckEsp
.text:000007DD                 mov     eax, [ebp+var_4]
.text:000007E0                 push    edx
.text:000007E1                 mov     ecx, ebp
.text:000007E3                 push    eax
.text:000007E4                 lea     edx, $LN6_0
.text:000007EA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007EF                 pop     eax
.text:000007F0                 pop     edx
.text:000007F1                 pop     esi
.text:000007F2                 add     esp, 10h
.text:000007F5                 cmp     ebp, esp
.text:000007F7                 call    __RTC_CheckEsp
.text:000007FC                 mov     esp, ebp
.text:000007FE                 pop     ebp
.text:000007FF                 retn
.text:000007FF _handle_output_new endp
.text:000007FF
.text:000007FF ; ---------------------------------------------------------------------------
.text:00000800 $LN6_0          dd 1                    ; DATA XREF: _handle_output_new+12Co
.text:00000804                 dd offset $LN5_0
.text:00000808 $LN5_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000804o
.text:00000810                 dd offset $LN4_0        ; "out_threadid"
.text:00000814 $LN4_0          db 'out_threadid',0     ; DATA XREF: .text:00000810o
.text:00000821                 align 8
.text:00000828
.text:00000828 ; =============== S U B R O U T I N E =======================================
.text:00000828
.text:00000828 ; Attributes: bp-based frame
.text:00000828
.text:00000828 ; DWORD __stdcall handle_output_threadfunc(LPVOID lpThreadParameter)
.text:00000828 _handle_output_threadfunc@4 proc near   ; DATA XREF: _handle_output_new+10Fo
.text:00000828
.text:00000828 var_30          = byte ptr -30h
.text:00000828 var_2D          = byte ptr -2Dh
.text:00000828 var_2C          = dword ptr -2Ch
.text:00000828 hObject         = dword ptr -28h
.text:00000828 Dst             = dword ptr -24h
.text:00000828 var_1C          = byte ptr -1Ch
.text:00000828 var_4           = dword ptr -4
.text:00000828 lpThreadParameter= dword ptr  8
.text:00000828
.text:00000828                 push    ebp
.text:00000829                 mov     ebp, esp
.text:0000082B                 sub     esp, 30h
.text:0000082E                 push    esi
.text:0000082F                 push    edi
.text:00000830                 lea     edi, [ebp+var_30]
.text:00000833                 mov     ecx, 0Ch
.text:00000838                 mov     eax, 0CCCCCCCCh
.text:0000083D                 rep stosd
.text:0000083F                 mov     [ebp+var_2D], 0
.text:00000843                 mov     eax, [ebp+lpThreadParameter]
.text:00000846                 mov     [ebp+var_4], eax
.text:00000849                 mov     ecx, [ebp+var_4]
.text:0000084C                 mov     edx, [ecx+20h]
.text:0000084F                 and     edx, 1
.text:00000852                 jz      short loc_87A
.text:00000854                 lea     eax, [ebp+var_1C]
.text:00000857                 mov     [ebp+Dst], eax
.text:0000085A                 mov     esi, esp
.text:0000085C                 push    0               ; lpName
.text:0000085E                 push    0               ; bInitialState
.text:00000860                 push    1               ; bManualReset
.text:00000862                 push    0               ; lpEventAttributes
.text:00000864                 call    dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
.text:0000086A                 cmp     esi, esp
.text:0000086C                 call    __RTC_CheckEsp
.text:00000871                 mov     [ebp+var_2D], 1
.text:00000875                 mov     [ebp+hObject], eax
.text:00000878                 jmp     short loc_881
.text:0000087A ; ---------------------------------------------------------------------------
.text:0000087A
.text:0000087A loc_87A:                                ; CODE XREF: handle_output_threadfunc(x)+2Aj
.text:0000087A                 mov     [ebp+Dst], 0
.text:00000881
.text:00000881 loc_881:                                ; CODE XREF: handle_output_threadfunc(x)+50j
.text:00000881                                         ; handle_output_threadfunc(x):loc_9E0j
.text:00000881                 mov     ecx, 1
.text:00000886                 test    ecx, ecx
.text:00000888                 jz      loc_9E5
.text:0000088E                 mov     esi, esp
.text:00000890                 push    0FFFFFFFFh      ; dwMilliseconds
.text:00000892                 mov     edx, [ebp+var_4]
.text:00000895                 mov     eax, [edx+8]
.text:00000898                 push    eax             ; hHandle
.text:00000899                 call    dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:0000089F                 cmp     esi, esp
.text:000008A1                 call    __RTC_CheckEsp
.text:000008A6                 mov     ecx, [ebp+var_4]
.text:000008A9                 cmp     dword ptr [ecx+10h], 0
.text:000008AD                 jz      short loc_8CA
.text:000008AF                 mov     esi, esp
.text:000008B1                 mov     edx, [ebp+var_4]
.text:000008B4                 mov     eax, [edx+4]
.text:000008B7                 push    eax             ; hEvent
.text:000008B8                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:000008BE                 cmp     esi, esp
.text:000008C0                 call    __RTC_CheckEsp
.text:000008C5                 jmp     loc_9E5
.text:000008CA ; ---------------------------------------------------------------------------
.text:000008CA
.text:000008CA loc_8CA:                                ; CODE XREF: handle_output_threadfunc(x)+85j
.text:000008CA                 cmp     [ebp+Dst], 0
.text:000008CE                 jz      short loc_8FC
.text:000008D0                 push    14h             ; Size
.text:000008D2                 push    0               ; Val
.text:000008D4                 mov     ecx, [ebp+Dst]
.text:000008D7                 push    ecx             ; Dst
.text:000008D8                 call    _memset
.text:000008DD                 add     esp, 0Ch
.text:000008E0                 cmp     [ebp+var_2D], 0
.text:000008E4                 jnz     short loc_8F3
.text:000008E6                 push    offset $LN17
.text:000008EB                 call    __RTC_UninitUse
.text:000008F0                 add     esp, 4
.text:000008F3
.text:000008F3 loc_8F3:                                ; CODE XREF: handle_output_threadfunc(x)+BCj
.text:000008F3                 mov     edx, [ebp+Dst]
.text:000008F6                 mov     eax, [ebp+hObject]
.text:000008F9                 mov     [edx+10h], eax
.text:000008FC
.text:000008FC loc_8FC:                                ; CODE XREF: handle_output_threadfunc(x)+A6j
.text:000008FC                 mov     esi, esp
.text:000008FE                 mov     ecx, [ebp+Dst]
.text:00000901                 push    ecx             ; lpOverlapped
.text:00000902                 mov     edx, [ebp+var_4]
.text:00000905                 add     edx, 2Ch ; ','
.text:00000908                 push    edx             ; lpNumberOfBytesWritten
.text:00000909                 mov     eax, [ebp+var_4]
.text:0000090C                 mov     ecx, [eax+28h]
.text:0000090F                 push    ecx             ; nNumberOfBytesToWrite
.text:00000910                 mov     edx, [ebp+var_4]
.text:00000913                 mov     eax, [edx+24h]
.text:00000916                 push    eax             ; lpBuffer
.text:00000917                 mov     ecx, [ebp+var_4]
.text:0000091A                 mov     edx, [ecx]
.text:0000091C                 push    edx             ; hFile
.text:0000091D                 call    dword ptr ds:__imp__WriteFile@20 ; WriteFile(x,x,x,x,x)
.text:00000923                 cmp     esi, esp
.text:00000925                 call    __RTC_CheckEsp
.text:0000092A                 mov     [ebp+var_2C], eax
.text:0000092D                 cmp     [ebp+var_2C], 0
.text:00000931                 jnz     short loc_94A
.text:00000933                 mov     esi, esp
.text:00000935                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000093B                 cmp     esi, esp
.text:0000093D                 call    __RTC_CheckEsp
.text:00000942                 mov     ecx, [ebp+var_4]
.text:00000945                 mov     [ecx+30h], eax
.text:00000948                 jmp     short loc_954
.text:0000094A ; ---------------------------------------------------------------------------
.text:0000094A
.text:0000094A loc_94A:                                ; CODE XREF: handle_output_threadfunc(x)+109j
.text:0000094A                 mov     edx, [ebp+var_4]
.text:0000094D                 mov     dword ptr [edx+30h], 0
.text:00000954
.text:00000954 loc_954:                                ; CODE XREF: handle_output_threadfunc(x)+120j
.text:00000954                 cmp     [ebp+Dst], 0
.text:00000958                 jz      short loc_9C2
.text:0000095A                 cmp     [ebp+var_2C], 0
.text:0000095E                 jnz     short loc_9C2
.text:00000960                 mov     esi, esp
.text:00000962                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000968                 cmp     esi, esp
.text:0000096A                 call    __RTC_CheckEsp
.text:0000096F                 cmp     eax, 3E5h
.text:00000974                 jnz     short loc_9C2
.text:00000976                 mov     esi, esp
.text:00000978                 push    1               ; bWait
.text:0000097A                 mov     eax, [ebp+var_4]
.text:0000097D                 add     eax, 2Ch ; ','
.text:00000980                 push    eax             ; lpNumberOfBytesTransferred
.text:00000981                 mov     ecx, [ebp+Dst]
.text:00000984                 push    ecx             ; lpOverlapped
.text:00000985                 mov     edx, [ebp+var_4]
.text:00000988                 mov     eax, [edx]
.text:0000098A                 push    eax             ; hFile
.text:0000098B                 call    dword ptr ds:__imp__GetOverlappedResult@16 ; GetOverlappedResult(x,x,x,x)
.text:00000991                 cmp     esi, esp
.text:00000993                 call    __RTC_CheckEsp
.text:00000998                 mov     [ebp+var_2C], eax
.text:0000099B                 cmp     [ebp+var_2C], 0
.text:0000099F                 jnz     short loc_9B8
.text:000009A1                 mov     esi, esp
.text:000009A3                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000009A9                 cmp     esi, esp
.text:000009AB                 call    __RTC_CheckEsp
.text:000009B0                 mov     ecx, [ebp+var_4]
.text:000009B3                 mov     [ecx+30h], eax
.text:000009B6                 jmp     short loc_9C2
.text:000009B8 ; ---------------------------------------------------------------------------
.text:000009B8
.text:000009B8 loc_9B8:                                ; CODE XREF: handle_output_threadfunc(x)+177j
.text:000009B8                 mov     edx, [ebp+var_4]
.text:000009BB                 mov     dword ptr [edx+30h], 0
.text:000009C2
.text:000009C2 loc_9C2:                                ; CODE XREF: handle_output_threadfunc(x)+130j
.text:000009C2                                         ; handle_output_threadfunc(x)+136j ...
.text:000009C2                 mov     esi, esp
.text:000009C4                 mov     eax, [ebp+var_4]
.text:000009C7                 mov     ecx, [eax+4]
.text:000009CA                 push    ecx             ; hEvent
.text:000009CB                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:000009D1                 cmp     esi, esp
.text:000009D3                 call    __RTC_CheckEsp
.text:000009D8                 cmp     [ebp+var_2C], 0
.text:000009DC                 jnz     short loc_9E0
.text:000009DE                 jmp     short loc_9E5
.text:000009E0 ; ---------------------------------------------------------------------------
.text:000009E0
.text:000009E0 loc_9E0:                                ; CODE XREF: handle_output_threadfunc(x)+1B4j
.text:000009E0                 jmp     loc_881
.text:000009E5 ; ---------------------------------------------------------------------------
.text:000009E5
.text:000009E5 loc_9E5:                                ; CODE XREF: handle_output_threadfunc(x)+60j
.text:000009E5                                         ; handle_output_threadfunc(x)+9Dj ...
.text:000009E5                 cmp     [ebp+Dst], 0
.text:000009E9                 jz      short loc_A11
.text:000009EB                 cmp     [ebp+var_2D], 0
.text:000009EF                 jnz     short loc_9FE
.text:000009F1                 push    offset $LN17
.text:000009F6                 call    __RTC_UninitUse
.text:000009FB                 add     esp, 4
.text:000009FE
.text:000009FE loc_9FE:                                ; CODE XREF: handle_output_threadfunc(x)+1C7j
.text:000009FE                 mov     esi, esp
.text:00000A00                 mov     edx, [ebp+hObject]
.text:00000A03                 push    edx             ; hObject
.text:00000A04                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000A0A                 cmp     esi, esp
.text:00000A0C                 call    __RTC_CheckEsp
.text:00000A11
.text:00000A11 loc_A11:                                ; CODE XREF: handle_output_threadfunc(x)+1C1j
.text:00000A11                 xor     eax, eax
.text:00000A13                 push    edx
.text:00000A14                 mov     ecx, ebp
.text:00000A16                 push    eax
.text:00000A17                 lea     edx, $LN21
.text:00000A1D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A22                 pop     eax
.text:00000A23                 pop     edx
.text:00000A24                 pop     edi
.text:00000A25                 pop     esi
.text:00000A26                 add     esp, 30h
.text:00000A29                 cmp     ebp, esp
.text:00000A2B                 call    __RTC_CheckEsp
.text:00000A30                 mov     esp, ebp
.text:00000A32                 pop     ebp
.text:00000A33                 retn    4
.text:00000A33 _handle_output_threadfunc@4 endp
.text:00000A33
.text:00000A33 ; ---------------------------------------------------------------------------
.text:00000A36                 align 4
.text:00000A38 $LN21           dd 1                    ; DATA XREF: handle_output_threadfunc(x)+1EFo
.text:00000A3C                 dd offset $LN20
.text:00000A40 $LN20           dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:00000A3Co
.text:00000A48                 dd offset $LN19
.text:00000A4C $LN19           dd 6C766Fh              ; DATA XREF: .text:00000A48o
.text:00000A50 $LN17           dd 76656Fh, 0CCCCCCCCh  ; DATA XREF: handle_output_threadfunc(x)+BEo
.text:00000A50                                         ; handle_output_threadfunc(x)+1C9o
.text:00000A58
.text:00000A58 ; =============== S U B R O U T I N E =======================================
.text:00000A58
.text:00000A58 ; Attributes: bp-based frame
.text:00000A58
.text:00000A58                 public _handle_add_foreign_event
.text:00000A58 _handle_add_foreign_event proc near
.text:00000A58
.text:00000A58 var_4           = dword ptr -4
.text:00000A58 arg_0           = dword ptr  8
.text:00000A58 arg_4           = dword ptr  0Ch
.text:00000A58 arg_8           = dword ptr  10h
.text:00000A58
.text:00000A58                 push    ebp
.text:00000A59                 mov     ebp, esp
.text:00000A5B                 push    ecx
.text:00000A5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A63                 push    1034h
.text:00000A68                 push    1
.text:00000A6A                 call    _safemalloc
.text:00000A6F                 add     esp, 8
.text:00000A72                 mov     [ebp+var_4], eax
.text:00000A75                 mov     eax, [ebp+var_4]
.text:00000A78                 mov     dword ptr [eax], 2
.text:00000A7E                 mov     ecx, [ebp+var_4]
.text:00000A81                 mov     dword ptr [ecx+4], 0FFFFFFFFh
.text:00000A88                 mov     edx, [ebp+var_4]
.text:00000A8B                 mov     eax, [ebp+arg_0]
.text:00000A8E                 mov     [edx+8], eax
.text:00000A91                 mov     ecx, [ebp+var_4]
.text:00000A94                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:00000A9B                 mov     edx, [ebp+var_4]
.text:00000A9E                 mov     dword ptr [edx+18h], 1
.text:00000AA5                 mov     eax, [ebp+var_4]
.text:00000AA8                 mov     dword ptr [eax+10h], 0
.text:00000AAF                 mov     ecx, [ebp+var_4]
.text:00000AB2                 mov     dword ptr [ecx+14h], 0
.text:00000AB9                 mov     edx, [ebp+var_4]
.text:00000ABC                 mov     dword ptr [edx+20h], 0
.text:00000AC3                 mov     eax, [ebp+var_4]
.text:00000AC6                 mov     ecx, [ebp+arg_4]
.text:00000AC9                 mov     [eax+24h], ecx
.text:00000ACC                 mov     edx, [ebp+var_4]
.text:00000ACF                 mov     eax, [ebp+arg_8]
.text:00000AD2                 mov     [edx+28h], eax
.text:00000AD5                 mov     ecx, [ebp+var_4]
.text:00000AD8                 mov     dword ptr [ecx+1Ch], 1
.text:00000ADF                 cmp     ds:_handles_by_evtomain, 0
.text:00000AE6                 jnz     short loc_AFA
.text:00000AE8                 push    offset _handle_cmp_evtomain
.text:00000AED                 call    _newtree234
.text:00000AF2                 add     esp, 4
.text:00000AF5                 mov     ds:_handles_by_evtomain, eax
.text:00000AFA
.text:00000AFA loc_AFA:                                ; CODE XREF: _handle_add_foreign_event+8Ej
.text:00000AFA                 mov     edx, [ebp+var_4]
.text:00000AFD                 push    edx
.text:00000AFE                 mov     eax, ds:_handles_by_evtomain
.text:00000B03                 push    eax
.text:00000B04                 call    _add234
.text:00000B09                 add     esp, 8
.text:00000B0C                 mov     eax, [ebp+var_4]
.text:00000B0F                 add     esp, 4
.text:00000B12                 cmp     ebp, esp
.text:00000B14                 call    __RTC_CheckEsp
.text:00000B19                 mov     esp, ebp
.text:00000B1B                 pop     ebp
.text:00000B1C                 retn
.text:00000B1C _handle_add_foreign_event endp
.text:00000B1C
.text:00000B1C ; ---------------------------------------------------------------------------
.text:00000B1D                 db 0Bh dup(0CCh)
.text:00000B28
.text:00000B28 ; =============== S U B R O U T I N E =======================================
.text:00000B28
.text:00000B28 ; Attributes: bp-based frame
.text:00000B28
.text:00000B28                 public _handle_write
.text:00000B28 _handle_write   proc near
.text:00000B28
.text:00000B28 arg_0           = dword ptr  8
.text:00000B28 arg_4           = dword ptr  0Ch
.text:00000B28 arg_8           = dword ptr  10h
.text:00000B28
.text:00000B28                 push    ebp
.text:00000B29                 mov     ebp, esp
.text:00000B2B                 mov     eax, [ebp+arg_0]
.text:00000B2E                 cmp     dword ptr [eax], 1
.text:00000B31                 jz      short loc_B4A
.text:00000B33                 push    1E9h            ; Line
.text:00000B38                 push    offset $SG85795 ; "..\\..\\winhandl.c"
.text:00000B3D                 push    offset $SG85796 ; "h->type == HT_OUTPUT"
.text:00000B42                 call    __wassert
.text:00000B47 ; ---------------------------------------------------------------------------
.text:00000B47                 add     esp, 0Ch
.text:00000B4A
.text:00000B4A loc_B4A:                                ; CODE XREF: _handle_write+9j
.text:00000B4A                 mov     edx, [ebp+arg_0]
.text:00000B4D                 cmp     dword ptr [edx+44h], 0
.text:00000B51                 jz      short loc_B6A
.text:00000B53                 push    1EAh            ; Line
.text:00000B58                 push    offset $SG85798 ; "..\\..\\winhandl.c"
.text:00000B5D                 push    offset $SG85799 ; "h->u.o.outgoingeof == EOF_NO"
.text:00000B62                 call    __wassert
.text:00000B67 ; ---------------------------------------------------------------------------
.text:00000B67                 add     esp, 0Ch
.text:00000B6A
.text:00000B6A loc_B6A:                                ; CODE XREF: _handle_write+29j
.text:00000B6A                 mov     ecx, [ebp+arg_8]
.text:00000B6D                 push    ecx
.text:00000B6E                 mov     edx, [ebp+arg_4]
.text:00000B71                 push    edx
.text:00000B72                 mov     eax, [ebp+arg_0]
.text:00000B75                 add     eax, 38h ; '8'
.text:00000B78                 push    eax
.text:00000B79                 call    _bufchain_add
.text:00000B7E                 add     esp, 0Ch
.text:00000B81                 mov     ecx, [ebp+arg_0]
.text:00000B84                 add     ecx, 4
.text:00000B87                 push    ecx
.text:00000B88                 call    _handle_try_output
.text:00000B8D                 add     esp, 4
.text:00000B90                 mov     edx, [ebp+arg_0]
.text:00000B93                 add     edx, 38h ; '8'
.text:00000B96                 push    edx
.text:00000B97                 call    _bufchain_size
.text:00000B9C                 add     esp, 4
.text:00000B9F                 cmp     ebp, esp
.text:00000BA1                 call    __RTC_CheckEsp
.text:00000BA6                 pop     ebp
.text:00000BA7                 retn
.text:00000BA7 _handle_write   endp
.text:00000BA7
.text:00000BA8
.text:00000BA8 ; =============== S U B R O U T I N E =======================================
.text:00000BA8
.text:00000BA8 ; Attributes: bp-based frame
.text:00000BA8
.text:00000BA8 _handle_try_output proc near            ; CODE XREF: _handle_write+60p
.text:00000BA8                                         ; _handle_write_eof+43p ...
.text:00000BA8
.text:00000BA8 var_18          = dword ptr -18h
.text:00000BA8 var_14          = dword ptr -14h
.text:00000BA8 var_10          = dword ptr -10h
.text:00000BA8 var_C           = dword ptr -0Ch
.text:00000BA8 var_8           = dword ptr -8
.text:00000BA8 var_4           = dword ptr -4
.text:00000BA8 arg_0           = dword ptr  8
.text:00000BA8
.text:00000BA8                 push    ebp
.text:00000BA9                 mov     ebp, esp
.text:00000BAB                 sub     esp, 18h
.text:00000BAE                 push    esi
.text:00000BAF                 mov     eax, 0CCCCCCCCh
.text:00000BB4                 mov     [ebp+var_18], eax
.text:00000BB7                 mov     [ebp+var_14], eax
.text:00000BBA                 mov     [ebp+var_10], eax
.text:00000BBD                 mov     [ebp+var_C], eax
.text:00000BC0                 mov     [ebp+var_8], eax
.text:00000BC3                 mov     [ebp+var_4], eax
.text:00000BC6                 mov     eax, [ebp+arg_0]
.text:00000BC9                 cmp     dword ptr [eax+18h], 0
.text:00000BCD                 jnz     short loc_C2D
.text:00000BCF                 mov     ecx, [ebp+arg_0]
.text:00000BD2                 add     ecx, 34h ; '4'
.text:00000BD5                 push    ecx
.text:00000BD6                 call    _bufchain_size
.text:00000BDB                 add     esp, 4
.text:00000BDE                 test    eax, eax
.text:00000BE0                 jz      short loc_C2D
.text:00000BE2                 lea     edx, [ebp+var_14]
.text:00000BE5                 push    edx
.text:00000BE6                 lea     eax, [ebp+var_8]
.text:00000BE9                 push    eax
.text:00000BEA                 mov     ecx, [ebp+arg_0]
.text:00000BED                 add     ecx, 34h ; '4'
.text:00000BF0                 push    ecx
.text:00000BF1                 call    _bufchain_prefix
.text:00000BF6                 add     esp, 0Ch
.text:00000BF9                 mov     edx, [ebp+arg_0]
.text:00000BFC                 mov     eax, [ebp+var_8]
.text:00000BFF                 mov     [edx+24h], eax
.text:00000C02                 mov     ecx, [ebp+arg_0]
.text:00000C05                 mov     edx, [ebp+var_14]
.text:00000C08                 mov     [ecx+28h], edx
.text:00000C0B                 mov     esi, esp
.text:00000C0D                 mov     eax, [ebp+arg_0]
.text:00000C10                 mov     ecx, [eax+8]
.text:00000C13                 push    ecx             ; hEvent
.text:00000C14                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:00000C1A                 cmp     esi, esp
.text:00000C1C                 call    __RTC_CheckEsp
.text:00000C21                 mov     edx, [ebp+arg_0]
.text:00000C24                 mov     dword ptr [edx+18h], 1
.text:00000C2B                 jmp     short loc_C7A
.text:00000C2D ; ---------------------------------------------------------------------------
.text:00000C2D
.text:00000C2D loc_C2D:                                ; CODE XREF: _handle_try_output+25j
.text:00000C2D                                         ; _handle_try_output+38j
.text:00000C2D                 mov     eax, [ebp+arg_0]
.text:00000C30                 cmp     dword ptr [eax+18h], 0
.text:00000C34                 jnz     short loc_C7A
.text:00000C36                 mov     ecx, [ebp+arg_0]
.text:00000C39                 add     ecx, 34h ; '4'
.text:00000C3C                 push    ecx
.text:00000C3D                 call    _bufchain_size
.text:00000C42                 add     esp, 4
.text:00000C45                 test    eax, eax
.text:00000C47                 jnz     short loc_C7A
.text:00000C49                 mov     edx, [ebp+arg_0]
.text:00000C4C                 cmp     dword ptr [edx+40h], 1
.text:00000C50                 jnz     short loc_C7A
.text:00000C52                 mov     esi, esp
.text:00000C54                 mov     eax, [ebp+arg_0]
.text:00000C57                 mov     ecx, [eax]
.text:00000C59                 push    ecx             ; hObject
.text:00000C5A                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000C60                 cmp     esi, esp
.text:00000C62                 call    __RTC_CheckEsp
.text:00000C67                 mov     edx, [ebp+arg_0]
.text:00000C6A                 mov     dword ptr [edx], 0FFFFFFFFh
.text:00000C70                 mov     eax, [ebp+arg_0]
.text:00000C73                 mov     dword ptr [eax+40h], 2
.text:00000C7A
.text:00000C7A loc_C7A:                                ; CODE XREF: _handle_try_output+83j
.text:00000C7A                                         ; _handle_try_output+8Cj ...
.text:00000C7A                 push    edx
.text:00000C7B                 mov     ecx, ebp
.text:00000C7D                 push    eax
.text:00000C7E                 lea     edx, $LN9
.text:00000C84                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C89                 pop     eax
.text:00000C8A                 pop     edx
.text:00000C8B                 pop     esi
.text:00000C8C                 add     esp, 18h
.text:00000C8F                 cmp     ebp, esp
.text:00000C91                 call    __RTC_CheckEsp
.text:00000C96                 mov     esp, ebp
.text:00000C98                 pop     ebp
.text:00000C99                 retn
.text:00000C99 _handle_try_output endp
.text:00000C99
.text:00000C99 ; ---------------------------------------------------------------------------
.text:00000C9A                 align 4
.text:00000C9C $LN9            dd 2                    ; DATA XREF: _handle_try_output+D6o
.text:00000CA0                 dd offset $LN8
.text:00000CA4 $LN8            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000CA0o
.text:00000CAC                 dd offset $LN6_1        ; "senddata"
.text:00000CB0                 dd 0FFFFFFECh, 4
.text:00000CB8                 dd offset $LN7          ; "sendlen"
.text:00000CBC $LN7            db 'sendlen',0          ; DATA XREF: .text:00000CB8o
.text:00000CC4 $LN6_1          db 'senddata',0         ; DATA XREF: .text:00000CACo
.text:00000CCD                 db 0Bh dup(0CCh)
.text:00000CD8
.text:00000CD8 ; =============== S U B R O U T I N E =======================================
.text:00000CD8
.text:00000CD8 ; Attributes: bp-based frame
.text:00000CD8
.text:00000CD8                 public _handle_write_eof
.text:00000CD8 _handle_write_eof proc near
.text:00000CD8
.text:00000CD8 arg_0           = dword ptr  8
.text:00000CD8
.text:00000CD8                 push    ebp
.text:00000CD9                 mov     ebp, esp
.text:00000CDB                 mov     eax, [ebp+arg_0]
.text:00000CDE                 cmp     dword ptr [eax], 1
.text:00000CE1                 jz      short loc_CFA
.text:00000CE3                 push    1F9h            ; Line
.text:00000CE8                 push    offset $SG85804 ; "..\\..\\winhandl.c"
.text:00000CED                 push    offset $SG85805 ; "h->type == HT_OUTPUT"
.text:00000CF2                 call    __wassert
.text:00000CF7 ; ---------------------------------------------------------------------------
.text:00000CF7                 add     esp, 0Ch
.text:00000CFA
.text:00000CFA loc_CFA:                                ; CODE XREF: _handle_write_eof+9j
.text:00000CFA                 mov     edx, [ebp+arg_0]
.text:00000CFD                 xor     eax, eax
.text:00000CFF                 cmp     dword ptr [edx+44h], 0
.text:00000D03                 setz    al
.text:00000D06                 test    eax, eax
.text:00000D08                 jnz     short loc_D23
.text:00000D0A                 mov     ecx, [ebp+arg_0]
.text:00000D0D                 mov     dword ptr [ecx+44h], 1
.text:00000D14                 mov     edx, [ebp+arg_0]
.text:00000D17                 add     edx, 4
.text:00000D1A                 push    edx
.text:00000D1B                 call    _handle_try_output
.text:00000D20                 add     esp, 4
.text:00000D23
.text:00000D23 loc_D23:                                ; CODE XREF: _handle_write_eof+30j
.text:00000D23                 cmp     ebp, esp
.text:00000D25                 call    __RTC_CheckEsp
.text:00000D2A                 pop     ebp
.text:00000D2B                 retn
.text:00000D2B _handle_write_eof endp
.text:00000D2B
.text:00000D2B ; ---------------------------------------------------------------------------
.text:00000D2C                 db 0Ch dup(0CCh)
.text:00000D38
.text:00000D38 ; =============== S U B R O U T I N E =======================================
.text:00000D38
.text:00000D38 ; Attributes: bp-based frame
.text:00000D38
.text:00000D38                 public _handle_get_events
.text:00000D38 _handle_get_events proc near
.text:00000D38
.text:00000D38 var_14          = dword ptr -14h
.text:00000D38 var_10          = dword ptr -10h
.text:00000D38 var_C           = dword ptr -0Ch
.text:00000D38 var_8           = dword ptr -8
.text:00000D38 var_4           = dword ptr -4
.text:00000D38 arg_0           = dword ptr  8
.text:00000D38
.text:00000D38                 push    ebp
.text:00000D39                 mov     ebp, esp
.text:00000D3B                 sub     esp, 14h
.text:00000D3E                 mov     eax, 0CCCCCCCCh
.text:00000D43                 mov     [ebp+var_14], eax
.text:00000D46                 mov     [ebp+var_10], eax
.text:00000D49                 mov     [ebp+var_C], eax
.text:00000D4C                 mov     [ebp+var_8], eax
.text:00000D4F                 mov     [ebp+var_4], eax
.text:00000D52                 mov     [ebp+var_4], 0
.text:00000D59                 mov     [ebp+var_14], 0
.text:00000D60                 mov     eax, [ebp+var_14]
.text:00000D63                 mov     [ebp+var_10], eax
.text:00000D66                 cmp     ds:_handles_by_evtomain, 0
.text:00000D6D                 jz      short loc_DE5
.text:00000D6F                 mov     [ebp+var_C], 0
.text:00000D76                 jmp     short loc_D81
.text:00000D78 ; ---------------------------------------------------------------------------
.text:00000D78
.text:00000D78 loc_D78:                                ; CODE XREF: _handle_get_events:loc_DE3j
.text:00000D78                 mov     ecx, [ebp+var_C]
.text:00000D7B                 add     ecx, 1
.text:00000D7E                 mov     [ebp+var_C], ecx
.text:00000D81
.text:00000D81 loc_D81:                                ; CODE XREF: _handle_get_events+3Ej
.text:00000D81                 mov     edx, [ebp+var_C]
.text:00000D84                 push    edx
.text:00000D85                 mov     eax, ds:_handles_by_evtomain
.text:00000D8A                 push    eax
.text:00000D8B                 call    _index234
.text:00000D90                 add     esp, 8
.text:00000D93                 mov     [ebp+var_8], eax
.text:00000D96                 cmp     [ebp+var_8], 0
.text:00000D9A                 jz      short loc_DE5
.text:00000D9C                 mov     ecx, [ebp+var_8]
.text:00000D9F                 cmp     dword ptr [ecx+1Ch], 0
.text:00000DA3                 jz      short loc_DE3
.text:00000DA5                 mov     edx, [ebp+var_10]
.text:00000DA8                 cmp     edx, [ebp+var_14]
.text:00000DAB                 jl      short loc_DCB
.text:00000DAD                 mov     eax, [ebp+var_14]
.text:00000DB0                 add     eax, 20h ; ' '
.text:00000DB3                 mov     [ebp+var_14], eax
.text:00000DB6                 push    4
.text:00000DB8                 mov     ecx, [ebp+var_14]
.text:00000DBB                 push    ecx
.text:00000DBC                 mov     edx, [ebp+var_4]
.text:00000DBF                 push    edx
.text:00000DC0                 call    _saferealloc
.text:00000DC5                 add     esp, 0Ch
.text:00000DC8                 mov     [ebp+var_4], eax
.text:00000DCB
.text:00000DCB loc_DCB:                                ; CODE XREF: _handle_get_events+73j
.text:00000DCB                 mov     eax, [ebp+var_10]
.text:00000DCE                 mov     ecx, [ebp+var_4]
.text:00000DD1                 mov     edx, [ebp+var_8]
.text:00000DD4                 mov     edx, [edx+8]
.text:00000DD7                 mov     [ecx+eax*4], edx
.text:00000DDA                 mov     eax, [ebp+var_10]
.text:00000DDD                 add     eax, 1
.text:00000DE0                 mov     [ebp+var_10], eax
.text:00000DE3
.text:00000DE3 loc_DE3:                                ; CODE XREF: _handle_get_events+6Bj
.text:00000DE3                 jmp     short loc_D78
.text:00000DE5 ; ---------------------------------------------------------------------------
.text:00000DE5
.text:00000DE5 loc_DE5:                                ; CODE XREF: _handle_get_events+35j
.text:00000DE5                                         ; _handle_get_events+62j
.text:00000DE5                 mov     ecx, [ebp+arg_0]
.text:00000DE8                 mov     edx, [ebp+var_10]
.text:00000DEB                 mov     [ecx], edx
.text:00000DED                 mov     eax, [ebp+var_4]
.text:00000DF0                 add     esp, 14h
.text:00000DF3                 cmp     ebp, esp
.text:00000DF5                 call    __RTC_CheckEsp
.text:00000DFA                 mov     esp, ebp
.text:00000DFC                 pop     ebp
.text:00000DFD                 retn
.text:00000DFD _handle_get_events endp
.text:00000DFD
.text:00000DFD ; ---------------------------------------------------------------------------
.text:00000DFE                 db 0Ah dup(0CCh)
.text:00000E08
.text:00000E08 ; =============== S U B R O U T I N E =======================================
.text:00000E08
.text:00000E08 ; Attributes: bp-based frame
.text:00000E08
.text:00000E08                 public _handle_free
.text:00000E08 _handle_free    proc near
.text:00000E08
.text:00000E08 arg_0           = dword ptr  8
.text:00000E08
.text:00000E08                 push    ebp
.text:00000E09                 mov     ebp, esp
.text:00000E0B                 push    esi
.text:00000E0C                 cmp     [ebp+arg_0], 0
.text:00000E10                 jz      short loc_E1B
.text:00000E12                 mov     eax, [ebp+arg_0]
.text:00000E15                 cmp     dword ptr [eax+10h], 0
.text:00000E19                 jz      short loc_E32
.text:00000E1B
.text:00000E1B loc_E1B:                                ; CODE XREF: _handle_free+8j
.text:00000E1B                 push    22Eh            ; Line
.text:00000E20                 push    offset $SG85835 ; "..\\..\\winhandl.c"
.text:00000E25                 push    offset $SG85836 ; "h && !h->u.g.moribund"
.text:00000E2A                 call    __wassert
.text:00000E2F ; ---------------------------------------------------------------------------
.text:00000E2F                 add     esp, 0Ch
.text:00000E32
.text:00000E32 loc_E32:                                ; CODE XREF: _handle_free+11j
.text:00000E32                 mov     edx, [ebp+arg_0]
.text:00000E35                 cmp     dword ptr [edx+1Ch], 0
.text:00000E39                 jz      short loc_E47
.text:00000E3B                 mov     eax, [ebp+arg_0]
.text:00000E3E                 mov     dword ptr [eax+10h], 1
.text:00000E45                 jmp     short loc_E92
.text:00000E47 ; ---------------------------------------------------------------------------
.text:00000E47
.text:00000E47 loc_E47:                                ; CODE XREF: _handle_free+31j
.text:00000E47                 mov     ecx, [ebp+arg_0]
.text:00000E4A                 cmp     dword ptr [ecx+18h], 0
.text:00000E4E                 jz      short loc_E5E
.text:00000E50                 mov     edx, [ebp+arg_0]
.text:00000E53                 push    edx
.text:00000E54                 call    _handle_destroy
.text:00000E59                 add     esp, 4
.text:00000E5C                 jmp     short loc_E92
.text:00000E5E ; ---------------------------------------------------------------------------
.text:00000E5E
.text:00000E5E loc_E5E:                                ; CODE XREF: _handle_free+46j
.text:00000E5E                 mov     eax, [ebp+arg_0]
.text:00000E61                 mov     dword ptr [eax+10h], 1
.text:00000E68                 mov     ecx, [ebp+arg_0]
.text:00000E6B                 mov     dword ptr [ecx+14h], 1
.text:00000E72                 mov     edx, [ebp+arg_0]
.text:00000E75                 mov     dword ptr [edx+1Ch], 1
.text:00000E7C                 mov     esi, esp
.text:00000E7E                 mov     eax, [ebp+arg_0]
.text:00000E81                 mov     ecx, [eax+0Ch]
.text:00000E84                 push    ecx             ; hEvent
.text:00000E85                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:00000E8B                 cmp     esi, esp
.text:00000E8D                 call    __RTC_CheckEsp
.text:00000E92
.text:00000E92 loc_E92:                                ; CODE XREF: _handle_free+3Dj
.text:00000E92                                         ; _handle_free+54j
.text:00000E92                 pop     esi
.text:00000E93                 cmp     ebp, esp
.text:00000E95                 call    __RTC_CheckEsp
.text:00000E9A                 pop     ebp
.text:00000E9B                 retn
.text:00000E9B _handle_free    endp
.text:00000E9B
.text:00000E9B ; ---------------------------------------------------------------------------
.text:00000E9C                 db 0Ch dup(0CCh)
.text:00000EA8
.text:00000EA8 ; =============== S U B R O U T I N E =======================================
.text:00000EA8
.text:00000EA8 ; Attributes: bp-based frame
.text:00000EA8
.text:00000EA8 _handle_destroy proc near               ; CODE XREF: _handle_free+4Cp
.text:00000EA8                                         ; _handle_got_event+78p
.text:00000EA8
.text:00000EA8 arg_0           = dword ptr  8
.text:00000EA8
.text:00000EA8                 push    ebp
.text:00000EA9                 mov     ebp, esp
.text:00000EAB                 push    esi
.text:00000EAC                 mov     eax, [ebp+arg_0]
.text:00000EAF                 cmp     dword ptr [eax], 1
.text:00000EB2                 jnz     short loc_EC3
.text:00000EB4                 mov     ecx, [ebp+arg_0]
.text:00000EB7                 add     ecx, 38h ; '8'
.text:00000EBA                 push    ecx
.text:00000EBB                 call    _bufchain_clear
.text:00000EC0                 add     esp, 4
.text:00000EC3
.text:00000EC3 loc_EC3:                                ; CODE XREF: _handle_destroy+Aj
.text:00000EC3                 mov     esi, esp
.text:00000EC5                 mov     edx, [ebp+arg_0]
.text:00000EC8                 mov     eax, [edx+0Ch]
.text:00000ECB                 push    eax             ; hObject
.text:00000ECC                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000ED2                 cmp     esi, esp
.text:00000ED4                 call    __RTC_CheckEsp
.text:00000ED9                 mov     esi, esp
.text:00000EDB                 mov     ecx, [ebp+arg_0]
.text:00000EDE                 mov     edx, [ecx+8]
.text:00000EE1                 push    edx             ; hObject
.text:00000EE2                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000EE8                 cmp     esi, esp
.text:00000EEA                 call    __RTC_CheckEsp
.text:00000EEF                 mov     eax, [ebp+arg_0]
.text:00000EF2                 push    eax
.text:00000EF3                 mov     ecx, ds:_handles_by_evtomain
.text:00000EF9                 push    ecx
.text:00000EFA                 call    _del234
.text:00000EFF                 add     esp, 8
.text:00000F02                 mov     edx, [ebp+arg_0]
.text:00000F05                 push    edx
.text:00000F06                 call    _safefree
.text:00000F0B                 add     esp, 4
.text:00000F0E                 pop     esi
.text:00000F0F                 cmp     ebp, esp
.text:00000F11                 call    __RTC_CheckEsp
.text:00000F16                 pop     ebp
.text:00000F17                 retn
.text:00000F17 _handle_destroy endp
.text:00000F17
.text:00000F18
.text:00000F18 ; =============== S U B R O U T I N E =======================================
.text:00000F18
.text:00000F18 ; Attributes: bp-based frame
.text:00000F18
.text:00000F18                 public _handle_got_event
.text:00000F18 _handle_got_event proc near
.text:00000F18
.text:00000F18 var_C           = dword ptr -0Ch
.text:00000F18 var_8           = dword ptr -8
.text:00000F18 var_4           = dword ptr -4
.text:00000F18 arg_0           = byte ptr  8
.text:00000F18
.text:00000F18                 push    ebp
.text:00000F19                 mov     ebp, esp
.text:00000F1B                 sub     esp, 0Ch
.text:00000F1E                 push    esi
.text:00000F1F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000F26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F34                 cmp     ds:_handles_by_evtomain, 0
.text:00000F3B                 jnz     short loc_F54
.text:00000F3D                 push    24Ch            ; Line
.text:00000F42                 push    offset $SG85846 ; "..\\..\\winhandl.c"
.text:00000F47                 push    offset $SG85847 ; "handles_by_evtomain"
.text:00000F4C                 call    __wassert
.text:00000F51 ; ---------------------------------------------------------------------------
.text:00000F51                 add     esp, 0Ch
.text:00000F54
.text:00000F54 loc_F54:                                ; CODE XREF: _handle_got_event+23j
.text:00000F54                 push    offset _handle_find_evtomain
.text:00000F59                 lea     ecx, [ebp+arg_0]
.text:00000F5C                 push    ecx
.text:00000F5D                 mov     edx, ds:_handles_by_evtomain
.text:00000F63                 push    edx
.text:00000F64                 call    _find234
.text:00000F69                 add     esp, 0Ch
.text:00000F6C                 mov     [ebp+var_4], eax
.text:00000F6F                 cmp     [ebp+var_4], 0
.text:00000F73                 jnz     short loc_F7A
.text:00000F75                 jmp     loc_112C
.text:00000F7A ; ---------------------------------------------------------------------------
.text:00000F7A
.text:00000F7A loc_F7A:                                ; CODE XREF: _handle_got_event+5Bj
.text:00000F7A                 mov     eax, [ebp+var_4]
.text:00000F7D                 cmp     dword ptr [eax+10h], 0
.text:00000F81                 jz      short loc_FC9
.text:00000F83                 mov     ecx, [ebp+var_4]
.text:00000F86                 cmp     dword ptr [ecx+14h], 0
.text:00000F8A                 jz      short loc_F9A
.text:00000F8C                 mov     edx, [ebp+var_4]
.text:00000F8F                 push    edx
.text:00000F90                 call    _handle_destroy
.text:00000F95                 add     esp, 4
.text:00000F98                 jmp     short loc_FC4
.text:00000F9A ; ---------------------------------------------------------------------------
.text:00000F9A
.text:00000F9A loc_F9A:                                ; CODE XREF: _handle_got_event+72j
.text:00000F9A                 mov     eax, [ebp+var_4]
.text:00000F9D                 mov     dword ptr [eax+14h], 1
.text:00000FA4                 mov     ecx, [ebp+var_4]
.text:00000FA7                 mov     dword ptr [ecx+1Ch], 1
.text:00000FAE                 mov     esi, esp
.text:00000FB0                 mov     edx, [ebp+var_4]
.text:00000FB3                 mov     eax, [edx+0Ch]
.text:00000FB6                 push    eax             ; hEvent
.text:00000FB7                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:00000FBD                 cmp     esi, esp
.text:00000FBF                 call    __RTC_CheckEsp
.text:00000FC4
.text:00000FC4 loc_FC4:                                ; CODE XREF: _handle_got_event+80j
.text:00000FC4                 jmp     loc_112C
.text:00000FC9 ; ---------------------------------------------------------------------------
.text:00000FC9
.text:00000FC9 loc_FC9:                                ; CODE XREF: _handle_got_event+69j
.text:00000FC9                 mov     ecx, [ebp+var_4]
.text:00000FCC                 mov     edx, [ecx]
.text:00000FCE                 mov     [ebp+var_C], edx
.text:00000FD1                 cmp     [ebp+var_C], 0
.text:00000FD5                 jz      short loc_FF0
.text:00000FD7                 cmp     [ebp+var_C], 1
.text:00000FDB                 jz      loc_1082
.text:00000FE1                 cmp     [ebp+var_C], 2
.text:00000FE5                 jz      loc_1111
.text:00000FEB                 jmp     loc_112C
.text:00000FF0 ; ---------------------------------------------------------------------------
.text:00000FF0
.text:00000FF0 loc_FF0:                                ; CODE XREF: _handle_got_event+BDj
.text:00000FF0                 mov     eax, [ebp+var_4]
.text:00000FF3                 mov     dword ptr [eax+1Ch], 0
.text:00000FFA                 mov     ecx, [ebp+var_4]
.text:00000FFD                 cmp     dword ptr [ecx+1028h], 0
.text:00001004                 jnz     short loc_103B
.text:00001006                 mov     edx, [ebp+var_4]
.text:00001009                 mov     dword ptr [edx+18h], 1
.text:00001010                 mov     eax, [ebp+var_4]
.text:00001013                 mov     ecx, [eax+102Ch]
.text:00001019                 neg     ecx
.text:0000101B                 mov     esi, esp
.text:0000101D                 push    ecx
.text:0000101E                 push    0
.text:00001020                 mov     edx, [ebp+var_4]
.text:00001023                 push    edx
.text:00001024                 mov     eax, [ebp+var_4]
.text:00001027                 mov     ecx, [eax+1030h]
.text:0000102D                 call    ecx
.text:0000102F                 add     esp, 0Ch
.text:00001032                 cmp     esi, esp
.text:00001034                 call    __RTC_CheckEsp
.text:00001039                 jmp     short loc_107D
.text:0000103B ; ---------------------------------------------------------------------------
.text:0000103B
.text:0000103B loc_103B:                               ; CODE XREF: _handle_got_event+ECj
.text:0000103B                 mov     esi, esp
.text:0000103D                 mov     edx, [ebp+var_4]
.text:00001040                 mov     eax, [edx+1028h]
.text:00001046                 push    eax
.text:00001047                 mov     ecx, [ebp+var_4]
.text:0000104A                 add     ecx, 28h ; '('
.text:0000104D                 push    ecx
.text:0000104E                 mov     edx, [ebp+var_4]
.text:00001051                 push    edx
.text:00001052                 mov     eax, [ebp+var_4]
.text:00001055                 mov     ecx, [eax+1030h]
.text:0000105B                 call    ecx
.text:0000105D                 add     esp, 0Ch
.text:00001060                 cmp     esi, esp
.text:00001062                 call    __RTC_CheckEsp
.text:00001067                 mov     [ebp+var_8], eax
.text:0000106A                 mov     edx, [ebp+var_8]
.text:0000106D                 push    edx
.text:0000106E                 mov     eax, [ebp+var_4]
.text:00001071                 add     eax, 4
.text:00001074                 push    eax
.text:00001075                 call    _handle_throttle
.text:0000107A                 add     esp, 8
.text:0000107D
.text:0000107D loc_107D:                               ; CODE XREF: _handle_got_event+121j
.text:0000107D                 jmp     loc_112C
.text:00001082 ; ---------------------------------------------------------------------------
.text:00001082
.text:00001082 loc_1082:                               ; CODE XREF: _handle_got_event+C3j
.text:00001082                 mov     ecx, [ebp+var_4]
.text:00001085                 mov     dword ptr [ecx+1Ch], 0
.text:0000108C                 mov     edx, [ebp+var_4]
.text:0000108F                 cmp     dword ptr [edx+34h], 0
.text:00001093                 jz      short loc_10C2
.text:00001095                 mov     eax, [ebp+var_4]
.text:00001098                 mov     dword ptr [eax+18h], 1
.text:0000109F                 mov     ecx, [ebp+var_4]
.text:000010A2                 mov     edx, [ecx+34h]
.text:000010A5                 neg     edx
.text:000010A7                 mov     esi, esp
.text:000010A9                 push    edx
.text:000010AA                 mov     eax, [ebp+var_4]
.text:000010AD                 push    eax
.text:000010AE                 mov     ecx, [ebp+var_4]
.text:000010B1                 mov     edx, [ecx+48h]
.text:000010B4                 call    edx
.text:000010B6                 add     esp, 8
.text:000010B9                 cmp     esi, esp
.text:000010BB                 call    __RTC_CheckEsp
.text:000010C0                 jmp     short loc_110F
.text:000010C2 ; ---------------------------------------------------------------------------
.text:000010C2
.text:000010C2 loc_10C2:                               ; CODE XREF: _handle_got_event+17Bj
.text:000010C2                 mov     eax, [ebp+var_4]
.text:000010C5                 mov     ecx, [eax+30h]
.text:000010C8                 push    ecx
.text:000010C9                 mov     edx, [ebp+var_4]
.text:000010CC                 add     edx, 38h ; '8'
.text:000010CF                 push    edx
.text:000010D0                 call    _bufchain_consume
.text:000010D5                 add     esp, 8
.text:000010D8                 mov     eax, [ebp+var_4]
.text:000010DB                 add     eax, 38h ; '8'
.text:000010DE                 push    eax
.text:000010DF                 call    _bufchain_size
.text:000010E4                 add     esp, 4
.text:000010E7                 mov     esi, esp
.text:000010E9                 push    eax
.text:000010EA                 mov     ecx, [ebp+var_4]
.text:000010ED                 push    ecx
.text:000010EE                 mov     edx, [ebp+var_4]
.text:000010F1                 mov     eax, [edx+48h]
.text:000010F4                 call    eax
.text:000010F6                 add     esp, 8
.text:000010F9                 cmp     esi, esp
.text:000010FB                 call    __RTC_CheckEsp
.text:00001100                 mov     ecx, [ebp+var_4]
.text:00001103                 add     ecx, 4
.text:00001106                 push    ecx
.text:00001107                 call    _handle_try_output
.text:0000110C                 add     esp, 4
.text:0000110F
.text:0000110F loc_110F:                               ; CODE XREF: _handle_got_event+1A8j
.text:0000110F                 jmp     short loc_112C
.text:00001111 ; ---------------------------------------------------------------------------
.text:00001111
.text:00001111 loc_1111:                               ; CODE XREF: _handle_got_event+CDj
.text:00001111                 mov     esi, esp
.text:00001113                 mov     edx, [ebp+var_4]
.text:00001116                 mov     eax, [edx+28h]
.text:00001119                 push    eax
.text:0000111A                 mov     ecx, [ebp+var_4]
.text:0000111D                 mov     edx, [ecx+24h]
.text:00001120                 call    edx
.text:00001122                 add     esp, 4
.text:00001125                 cmp     esi, esp
.text:00001127                 call    __RTC_CheckEsp
.text:0000112C
.text:0000112C loc_112C:                               ; CODE XREF: _handle_got_event+5Dj
.text:0000112C                                         ; _handle_got_event:loc_FC4j ...
.text:0000112C                 pop     esi
.text:0000112D                 add     esp, 0Ch
.text:00001130                 cmp     ebp, esp
.text:00001132                 call    __RTC_CheckEsp
.text:00001137                 mov     esp, ebp
.text:00001139                 pop     ebp
.text:0000113A                 retn
.text:0000113A _handle_got_event endp
.text:0000113A
.text:0000113A ; ---------------------------------------------------------------------------
.text:0000113B                 db 0Dh dup(0CCh)
.text:00001148
.text:00001148 ; =============== S U B R O U T I N E =======================================
.text:00001148
.text:00001148 ; Attributes: bp-based frame
.text:00001148
.text:00001148 _handle_throttle proc near              ; CODE XREF: _handle_got_event+15Dp
.text:00001148                                         ; _handle_unthrottle+2Dp
.text:00001148
.text:00001148 arg_0           = dword ptr  8
.text:00001148 arg_4           = dword ptr  0Ch
.text:00001148
.text:00001148                 push    ebp
.text:00001149                 mov     ebp, esp
.text:0000114B                 push    esi
.text:0000114C                 mov     eax, [ebp+arg_0]
.text:0000114F                 cmp     dword ptr [eax+14h], 0
.text:00001153                 jz      short loc_1157
.text:00001155                 jmp     short loc_118B
.text:00001157 ; ---------------------------------------------------------------------------
.text:00001157
.text:00001157 loc_1157:                               ; CODE XREF: _handle_throttle+Bj
.text:00001157                 mov     ecx, [ebp+arg_0]
.text:0000115A                 cmp     dword ptr [ecx+18h], 0
.text:0000115E                 jz      short loc_1162
.text:00001160                 jmp     short loc_118B
.text:00001162 ; ---------------------------------------------------------------------------
.text:00001162
.text:00001162 loc_1162:                               ; CODE XREF: _handle_throttle+16j
.text:00001162                 cmp     [ebp+arg_4], 8000h
.text:00001169                 jge     short loc_118B
.text:0000116B                 mov     esi, esp
.text:0000116D                 mov     edx, [ebp+arg_0]
.text:00001170                 mov     eax, [edx+8]
.text:00001173                 push    eax             ; hEvent
.text:00001174                 call    dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
.text:0000117A                 cmp     esi, esp
.text:0000117C                 call    __RTC_CheckEsp
.text:00001181                 mov     ecx, [ebp+arg_0]
.text:00001184                 mov     dword ptr [ecx+18h], 1
.text:0000118B
.text:0000118B loc_118B:                               ; CODE XREF: _handle_throttle+Dj
.text:0000118B                                         ; _handle_throttle+18j ...
.text:0000118B                 pop     esi
.text:0000118C                 cmp     ebp, esp
.text:0000118E                 call    __RTC_CheckEsp
.text:00001193                 pop     ebp
.text:00001194                 retn
.text:00001194 _handle_throttle endp
.text:00001194
.text:00001194 ; ---------------------------------------------------------------------------
.text:00001195                 align 4
.text:00001198
.text:00001198 ; =============== S U B R O U T I N E =======================================
.text:00001198
.text:00001198 ; Attributes: bp-based frame
.text:00001198
.text:00001198 _handle_find_evtomain proc near         ; DATA XREF: _handle_got_event:loc_F54o
.text:00001198
.text:00001198 var_8           = dword ptr -8
.text:00001198 var_4           = dword ptr -4
.text:00001198 arg_0           = dword ptr  8
.text:00001198 arg_4           = dword ptr  0Ch
.text:00001198
.text:00001198                 push    ebp
.text:00001199                 mov     ebp, esp
.text:0000119B                 sub     esp, 8
.text:0000119E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000011A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011AC                 mov     eax, [ebp+arg_0]
.text:000011AF                 mov     [ebp+var_4], eax
.text:000011B2                 mov     ecx, [ebp+arg_4]
.text:000011B5                 mov     [ebp+var_8], ecx
.text:000011B8                 mov     edx, [ebp+var_4]
.text:000011BB                 mov     eax, [ebp+var_8]
.text:000011BE                 mov     ecx, [edx]
.text:000011C0                 cmp     ecx, [eax+8]
.text:000011C3                 jnb     short loc_11CC
.text:000011C5                 or      eax, 0FFFFFFFFh
.text:000011C8                 jmp     short loc_11E4
.text:000011CA ; ---------------------------------------------------------------------------
.text:000011CA                 jmp     short loc_11E4
.text:000011CC ; ---------------------------------------------------------------------------
.text:000011CC
.text:000011CC loc_11CC:                               ; CODE XREF: _handle_find_evtomain+2Bj
.text:000011CC                 mov     edx, [ebp+var_4]
.text:000011CF                 mov     eax, [ebp+var_8]
.text:000011D2                 mov     ecx, [edx]
.text:000011D4                 cmp     ecx, [eax+8]
.text:000011D7                 jbe     short loc_11E2
.text:000011D9                 mov     eax, 1
.text:000011DE                 jmp     short loc_11E4
.text:000011E0 ; ---------------------------------------------------------------------------
.text:000011E0                 jmp     short loc_11E4
.text:000011E2 ; ---------------------------------------------------------------------------
.text:000011E2
.text:000011E2 loc_11E2:                               ; CODE XREF: _handle_find_evtomain+3Fj
.text:000011E2                 xor     eax, eax
.text:000011E4
.text:000011E4 loc_11E4:                               ; CODE XREF: _handle_find_evtomain+30j
.text:000011E4                                         ; _handle_find_evtomain+32j ...
.text:000011E4                 mov     esp, ebp
.text:000011E6                 pop     ebp
.text:000011E7                 retn
.text:000011E7 _handle_find_evtomain endp
.text:000011E7
.text:000011E8
.text:000011E8 ; =============== S U B R O U T I N E =======================================
.text:000011E8
.text:000011E8 ; Attributes: bp-based frame
.text:000011E8
.text:000011E8                 public _handle_unthrottle
.text:000011E8 _handle_unthrottle proc near
.text:000011E8
.text:000011E8 arg_0           = dword ptr  8
.text:000011E8 arg_4           = dword ptr  0Ch
.text:000011E8
.text:000011E8                 push    ebp
.text:000011E9                 mov     ebp, esp
.text:000011EB                 mov     eax, [ebp+arg_0]
.text:000011EE                 cmp     dword ptr [eax], 0
.text:000011F1                 jz      short loc_120A
.text:000011F3                 push    2A0h            ; Line
.text:000011F8                 push    offset $SG85871 ; "..\\..\\winhandl.c"
.text:000011FD                 push    offset $SG85872 ; "h->type == HT_INPUT"
.text:00001202                 call    __wassert
.text:00001207 ; ---------------------------------------------------------------------------
.text:00001207                 add     esp, 0Ch
.text:0000120A
.text:0000120A loc_120A:                               ; CODE XREF: _handle_unthrottle+9j
.text:0000120A                 mov     edx, [ebp+arg_4]
.text:0000120D                 push    edx
.text:0000120E                 mov     eax, [ebp+arg_0]
.text:00001211                 add     eax, 4
.text:00001214                 push    eax
.text:00001215                 call    _handle_throttle
.text:0000121A                 add     esp, 8
.text:0000121D                 cmp     ebp, esp
.text:0000121F                 call    __RTC_CheckEsp
.text:00001224                 pop     ebp
.text:00001225                 retn
.text:00001225 _handle_unthrottle endp
.text:00001225
.text:00001225 ; ---------------------------------------------------------------------------
.text:00001226                 align 4
.text:00001228
.text:00001228 ; =============== S U B R O U T I N E =======================================
.text:00001228
.text:00001228 ; Attributes: bp-based frame
.text:00001228
.text:00001228                 public _handle_backlog
.text:00001228 _handle_backlog proc near
.text:00001228
.text:00001228 arg_0           = dword ptr  8
.text:00001228
.text:00001228                 push    ebp
.text:00001229                 mov     ebp, esp
.text:0000122B                 mov     eax, [ebp+arg_0]
.text:0000122E                 cmp     dword ptr [eax], 1
.text:00001231                 jz      short loc_124A
.text:00001233                 push    2A6h            ; Line
.text:00001238                 push    offset $SG85877 ; "..\\..\\winhandl.c"
.text:0000123D                 push    offset $SG85878 ; "h->type == HT_OUTPUT"
.text:00001242                 call    __wassert
.text:00001247 ; ---------------------------------------------------------------------------
.text:00001247                 add     esp, 0Ch
.text:0000124A
.text:0000124A loc_124A:                               ; CODE XREF: _handle_backlog+9j
.text:0000124A                 mov     edx, [ebp+arg_0]
.text:0000124D                 add     edx, 38h ; '8'
.text:00001250                 push    edx
.text:00001251                 call    _bufchain_size
.text:00001256                 add     esp, 4
.text:00001259                 cmp     ebp, esp
.text:0000125B                 call    __RTC_CheckEsp
.text:00001260                 pop     ebp
.text:00001261                 retn
.text:00001261 _handle_backlog endp
.text:00001261
.text:00001261 ; ---------------------------------------------------------------------------
.text:00001262                 align 8
.text:00001268
.text:00001268 ; =============== S U B R O U T I N E =======================================
.text:00001268
.text:00001268 ; Attributes: bp-based frame
.text:00001268
.text:00001268                 public _handle_get_privdata
.text:00001268 _handle_get_privdata proc near
.text:00001268
.text:00001268 arg_0           = dword ptr  8
.text:00001268
.text:00001268                 push    ebp
.text:00001269                 mov     ebp, esp
.text:0000126B                 mov     eax, [ebp+arg_0]
.text:0000126E                 mov     eax, [eax+20h]
.text:00001271                 pop     ebp
.text:00001272                 retn
.text:00001272 _handle_get_privdata endp
.text:00001272
.text:00001272 ; ---------------------------------------------------------------------------
.text:00001273                 align 4
.text:00001273 _text           ends
.text:00001273
.bss:00001274 ; ===========================================================================
.bss:00001274
.bss:00001274 ; Segment type: Uninitialized
.bss:00001274 ; Segment permissions: Read/Write
.bss:00001274 _bss            segment dword public 'BSS' use32
.bss:00001274                 assume cs:_bss
.bss:00001274                 ;org 1274h
.bss:00001274                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00001274 _handles_by_evtomain dd ?               ; DATA XREF: _handle_input_new+B2r
.bss:00001274                                         ; _handle_input_new+C8w ...
.bss:00001274 _bss            ends
.bss:00001274
.rtc$TMZ:00001278 ; ===========================================================================
.rtc$TMZ:00001278
.rtc$TMZ:00001278 ; Segment type: Pure data
.rtc$TMZ:00001278 ; Segment permissions: Read
.rtc$TMZ:00001278 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001278                 assume cs:_rtc$TMZ
.rtc$TMZ:00001278                 ;org 1278h
.rtc$TMZ:00001278 ; COMDAT (pick any)
.rtc$TMZ:00001278 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001278 _rtc$TMZ        ends
.rtc$TMZ:00001278
.rtc$IMZ:0000127C ; ===========================================================================
.rtc$IMZ:0000127C
.rtc$IMZ:0000127C ; Segment type: Pure data
.rtc$IMZ:0000127C ; Segment permissions: Read
.rtc$IMZ:0000127C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000127C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000127C                 ;org 127Ch
.rtc$IMZ:0000127C ; COMDAT (pick any)
.rtc$IMZ:0000127C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000127C _rtc$IMZ        ends
.rtc$IMZ:0000127C
UNDEF:00001280 ; ===========================================================================
UNDEF:00001280
UNDEF:00001280 ; Segment type: Externs
UNDEF:00001280 ; UNDEF
UNDEF:00001280 ; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
UNDEF:00001280                 extrn __imp__CreateThread@24:near
UNDEF:00001280                                         ; CODE XREF: _handle_input_new+F8p
UNDEF:00001280                                         ; _handle_output_new+118p
UNDEF:00001280                                         ; DATA XREF: ...
UNDEF:00001284                 extrn _add234:near      ; CODE XREF: _handle_input_new+D8p
UNDEF:00001284                                         ; _handle_output_new+F8p ...
UNDEF:00001288                 extrn _newtree234:near  ; CODE XREF: _handle_input_new+C0p
UNDEF:00001288                                         ; _handle_output_new+E0p ...
UNDEF:0000128C ; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName)
UNDEF:0000128C                 extrn __imp__CreateEventA@16:near
UNDEF:0000128C                                         ; CODE XREF: _handle_input_new+46p
UNDEF:0000128C                                         ; _handle_input_new+63p ...
UNDEF:00001290                 extrn _safemalloc:near  ; CODE XREF: _handle_input_new+1Fp
UNDEF:00001290                                         ; _handle_output_new+1Fp ...
UNDEF:00001294 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001294                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001294                                         ; CODE XREF: _handle_input_new+11Cp
UNDEF:00001294                                         ; handle_input_threadfunc(x)+284p ...
UNDEF:00001298                 extrn __RTC_CheckEsp:near ; CODE XREF: _handle_input_new+4Ep
UNDEF:00001298                                         ; _handle_input_new+6Bp ...
UNDEF:0000129C                 extrn __RTC_Shutdown:near
UNDEF:0000129C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000012A0                 extrn __RTC_InitBase:near
UNDEF:000012A0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000012A4 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:000012A4                 extrn __imp__CloseHandle@4:near
UNDEF:000012A4                                         ; CODE XREF: handle_input_threadfunc(x)+26Bp
UNDEF:000012A4                                         ; handle_output_threadfunc(x)+1DCp ...
UNDEF:000012A8 ; BOOL __stdcall SetEvent(HANDLE hEvent)
UNDEF:000012A8                 extrn __imp__SetEvent@4:near
UNDEF:000012A8                                         ; CODE XREF: handle_input_threadfunc(x)+1F3p
UNDEF:000012A8                                         ; handle_input_threadfunc(x)+238p ...
UNDEF:000012AC ; BOOL __stdcall GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait)
UNDEF:000012AC                 extrn __imp__GetOverlappedResult@16:near
UNDEF:000012AC                                         ; CODE XREF: handle_input_threadfunc(x)+15Fp
UNDEF:000012AC                                         ; handle_output_threadfunc(x)+163p
UNDEF:000012AC                                         ; DATA XREF: ...
UNDEF:000012B0 ; DWORD __stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
UNDEF:000012B0                 extrn __imp__WaitForSingleObject@8:near
UNDEF:000012B0                                         ; CODE XREF: handle_input_threadfunc(x)+13Bp
UNDEF:000012B0                                         ; handle_input_threadfunc(x)+219p ...
UNDEF:000012B4 ; DWORD __stdcall GetLastError()
UNDEF:000012B4                 extrn __imp__GetLastError@0:near
UNDEF:000012B4                                         ; CODE XREF: handle_input_threadfunc(x)+ECp
UNDEF:000012B4                                         ; handle_input_threadfunc(x)+177p ...
UNDEF:000012B8 ; BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
UNDEF:000012B8                 extrn __imp__ReadFile@20:near
UNDEF:000012B8                                         ; CODE XREF: handle_input_threadfunc(x)+D4p
UNDEF:000012B8                                         ; DATA XREF: handle_input_threadfunc(x)+D4r
UNDEF:000012BC ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000012BC                 extrn _memset:near      ; CODE XREF: handle_input_threadfunc(x)+8Fp
UNDEF:000012BC                                         ; handle_output_threadfunc(x)+B0p
UNDEF:000012C0                 extrn __RTC_UninitUse:near
UNDEF:000012C0                                         ; CODE XREF: handle_input_threadfunc(x)+A2p
UNDEF:000012C0                                         ; handle_input_threadfunc(x)+25Dp ...
UNDEF:000012C4                 extrn _bufchain_init:near ; CODE XREF: _handle_output_new+AEp
UNDEF:000012C8 ; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
UNDEF:000012C8                 extrn __imp__WriteFile@20:near
UNDEF:000012C8                                         ; CODE XREF: handle_output_threadfunc(x)+F5p
UNDEF:000012C8                                         ; DATA XREF: handle_output_threadfunc(x)+F5r
UNDEF:000012CC                 extrn _bufchain_size:near ; CODE XREF: _handle_write+6Fp
UNDEF:000012CC                                         ; _handle_try_output+2Ep ...
UNDEF:000012D0                 extrn _bufchain_add:near ; CODE XREF: _handle_write+51p
UNDEF:000012D4 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000012D4                 extrn __wassert:near    ; CODE XREF: _handle_write+1Ap
UNDEF:000012D4                                         ; _handle_write+3Ap ...
UNDEF:000012D8                 extrn _bufchain_prefix:near
UNDEF:000012D8                                         ; CODE XREF: _handle_try_output+49p
UNDEF:000012DC                 extrn _saferealloc:near ; CODE XREF: _handle_get_events+88p
UNDEF:000012E0                 extrn _index234:near    ; CODE XREF: _handle_get_events+53p
UNDEF:000012E4                 extrn _safefree:near    ; CODE XREF: _handle_destroy+5Ep
UNDEF:000012E8                 extrn _del234:near      ; CODE XREF: _handle_destroy+52p
UNDEF:000012EC                 extrn _bufchain_clear:near ; CODE XREF: _handle_destroy+13p
UNDEF:000012F0                 extrn _bufchain_consume:near
UNDEF:000012F0                                         ; CODE XREF: _handle_got_event+1B8p
UNDEF:000012F4                 extrn _find234:near     ; CODE XREF: _handle_got_event+4Cp
UNDEF:000012F4
UNDEF:000012F4
UNDEF:000012F4                 end