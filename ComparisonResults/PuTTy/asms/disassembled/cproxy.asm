.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : CF0F649BAD9A3D3234B48100ED5EEA74
.data:00000000 ; Input CRC32 : 53297691
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\cproxy.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG87169        db 'Proxy error: SOCKS proxy wants a different CHAP version',0
.data:00000000                                         ; DATA XREF: _proxy_socks5_handlechap+C0o
.data:00000038 $SG87171        db 'Proxy error: SOCKS proxy won',27h,'t negotiate CHAP with us',0
.data:00000038                                         ; DATA XREF: _proxy_socks5_handlechap+101o
.data:0000006E                 align 10h
.data:00000070 $SG87182        db 'Proxy error: SOCKS proxy refused CHAP authentication',0
.data:00000070                                         ; DATA XREF: _proxy_socks5_handlechap+21Co
.data:000000A5                 align 4
.data:000000A8 $SG87187        db 'Proxy error: Server chose CHAP of other than HMAC-MD5 but we didn'
.data:000000A8                                         ; DATA XREF: _proxy_socks5_handlechap+2DFo
.data:000000A8                 db 27h,'t offer it!',0
.data:000000F6                 align 4
.data:000000F8 $SG87201        db 'Proxy error: Server chose CHAP authentication but we didn',27h,'t of'
.data:000000F8                                         ; DATA XREF: _proxy_socks5_selectchap+166o
.data:000000F8                 db 'fer it!',0
.data:0000013E                 align 10h
.data:0000013E _data           ends
.data:0000013E
.text:00000140 ; ===========================================================================
.text:00000140
.text:00000140 ; Segment type: Pure code
.text:00000140 ; Segment permissions: Read/Execute
.text:00000140 _text           segment para public 'CODE' use32
.text:00000140                 assume cs:_text
.text:00000140                 ;org 140h
.text:00000140                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000140
.text:00000140 ; =============== S U B R O U T I N E =======================================
.text:00000140
.text:00000140 ; Attributes: bp-based frame
.text:00000140
.text:00000140                 public _proxy_socks5_offerencryptedauth
.text:00000140 _proxy_socks5_offerencryptedauth proc near
.text:00000140
.text:00000140 arg_0           = dword ptr  8
.text:00000140 arg_4           = dword ptr  0Ch
.text:00000140
.text:00000140                 push    ebp
.text:00000141                 mov     ebp, esp
.text:00000143                 mov     eax, [ebp+arg_4]
.text:00000146                 mov     ecx, [eax]
.text:00000148                 mov     edx, [ebp+arg_0]
.text:0000014B                 mov     byte ptr [edx+ecx], 3
.text:0000014F                 mov     eax, [ebp+arg_4]
.text:00000152                 mov     ecx, [eax]
.text:00000154                 add     ecx, 1
.text:00000157                 mov     edx, [ebp+arg_4]
.text:0000015A                 mov     [edx], ecx
.text:0000015C                 pop     ebp
.text:0000015D                 retn
.text:0000015D _proxy_socks5_offerencryptedauth endp
.text:0000015D
.text:0000015D ; ---------------------------------------------------------------------------
.text:0000015E                 align 10h
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160                 public _proxy_socks5_handlechap
.text:00000160 _proxy_socks5_handlechap proc near
.text:00000160
.text:00000160 var_130         = dword ptr -130h
.text:00000160 var_128         = byte ptr -128h
.text:00000160 var_127         = byte ptr -127h
.text:00000160 var_126         = byte ptr -126h
.text:00000160 var_125         = byte ptr -125h
.text:00000160 var_124         = dword ptr -124h
.text:00000160 var_10C         = dword ptr -10Ch
.text:00000160 var_4           = dword ptr -4
.text:00000160 arg_0           = dword ptr  8
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 sub     esp, 130h
.text:00000169                 push    esi
.text:0000016A                 push    edi
.text:0000016B                 lea     edi, [ebp+var_130]
.text:00000171                 mov     ecx, 4Ch ; 'L'
.text:00000176                 mov     eax, 0CCCCCCCCh
.text:0000017B                 rep stosd
.text:0000017D                 mov     eax, dword ptr ds:___security_cookie
.text:00000182                 xor     eax, ebp
.text:00000184                 mov     [ebp+var_4], eax
.text:00000187
.text:00000187 loc_187:                                ; CODE XREF: _proxy_socks5_handlechap:loc_4BDj
.text:00000187                 mov     eax, [ebp+arg_0]
.text:0000018A                 cmp     dword ptr [eax+78h], 0
.text:0000018E                 jz      short loc_1A2
.text:00000190                 mov     ecx, [ebp+arg_0]
.text:00000193                 mov     edx, [ebp+arg_0]
.text:00000196                 mov     eax, [ecx+7Ch]
.text:00000199                 cmp     eax, [edx+78h]
.text:0000019C                 jge     loc_4C2
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: _proxy_socks5_handlechap+2Ej
.text:000001A2                 mov     ecx, [ebp+arg_0]
.text:000001A5                 cmp     dword ptr [ecx+78h], 0
.text:000001A9                 jz      short loc_1B7
.text:000001AB                 mov     edx, [ebp+arg_0]
.text:000001AE                 cmp     dword ptr [edx+80h], 0FFFFFFFFh
.text:000001B5                 jnz     short loc_1FE
.text:000001B7
.text:000001B7 loc_1B7:                                ; CODE XREF: _proxy_socks5_handlechap+49j
.text:000001B7                 mov     eax, [ebp+arg_0]
.text:000001BA                 add     eax, 34h ; '4'
.text:000001BD                 push    eax
.text:000001BE                 call    _bufchain_size
.text:000001C3                 add     esp, 4
.text:000001C6                 cmp     eax, 2
.text:000001C9                 jge     short loc_1D5
.text:000001CB                 mov     eax, 1
.text:000001D0                 jmp     loc_4C4
.text:000001D5 ; ---------------------------------------------------------------------------
.text:000001D5
.text:000001D5 loc_1D5:                                ; CODE XREF: _proxy_socks5_handlechap+69j
.text:000001D5                 push    2
.text:000001D7                 lea     ecx, [ebp+var_10C]
.text:000001DD                 push    ecx
.text:000001DE                 mov     edx, [ebp+arg_0]
.text:000001E1                 add     edx, 34h ; '4'
.text:000001E4                 push    edx
.text:000001E5                 call    _bufchain_fetch
.text:000001EA                 add     esp, 0Ch
.text:000001ED                 push    2
.text:000001EF                 mov     eax, [ebp+arg_0]
.text:000001F2                 add     eax, 34h ; '4'
.text:000001F5                 push    eax
.text:000001F6                 call    _bufchain_consume
.text:000001FB                 add     esp, 8
.text:000001FE
.text:000001FE loc_1FE:                                ; CODE XREF: _proxy_socks5_handlechap+55j
.text:000001FE                 mov     ecx, [ebp+arg_0]
.text:00000201                 cmp     dword ptr [ecx+78h], 0
.text:00000205                 jnz     loc_2A0
.text:0000020B                 movzx   edx, byte ptr [ebp+var_10C]
.text:00000212                 cmp     edx, 1
.text:00000215                 jz      short loc_24D
.text:00000217                 mov     esi, esp
.text:00000219                 push    0
.text:0000021B                 push    1F40h
.text:00000220                 push    offset $SG87169 ; "Proxy error: SOCKS proxy wants a differ"...
.text:00000225                 mov     eax, [ebp+arg_0]
.text:00000228                 mov     ecx, [eax+0Ch]
.text:0000022B                 push    ecx
.text:0000022C                 mov     edx, [ebp+arg_0]
.text:0000022F                 mov     eax, [edx+0Ch]
.text:00000232                 mov     ecx, [eax]
.text:00000234                 mov     edx, [ecx+4]
.text:00000237                 call    edx
.text:00000239                 add     esp, 10h
.text:0000023C                 cmp     esi, esp
.text:0000023E                 call    __RTC_CheckEsp
.text:00000243                 mov     eax, 1
.text:00000248                 jmp     loc_4C4
.text:0000024D ; ---------------------------------------------------------------------------
.text:0000024D
.text:0000024D loc_24D:                                ; CODE XREF: _proxy_socks5_handlechap+B5j
.text:0000024D                 movzx   eax, byte ptr [ebp+var_10C+1]
.text:00000254                 test    eax, eax
.text:00000256                 jnz     short loc_28E
.text:00000258                 mov     esi, esp
.text:0000025A                 push    0
.text:0000025C                 push    1F40h
.text:00000261                 push    offset $SG87171 ; "Proxy error: SOCKS proxy won't negotiat"...
.text:00000266                 mov     ecx, [ebp+arg_0]
.text:00000269                 mov     edx, [ecx+0Ch]
.text:0000026C                 push    edx
.text:0000026D                 mov     eax, [ebp+arg_0]
.text:00000270                 mov     ecx, [eax+0Ch]
.text:00000273                 mov     edx, [ecx]
.text:00000275                 mov     eax, [edx+4]
.text:00000278                 call    eax
.text:0000027A                 add     esp, 10h
.text:0000027D                 cmp     esi, esp
.text:0000027F                 call    __RTC_CheckEsp
.text:00000284                 mov     eax, 1
.text:00000289                 jmp     loc_4C4
.text:0000028E ; ---------------------------------------------------------------------------
.text:0000028E
.text:0000028E loc_28E:                                ; CODE XREF: _proxy_socks5_handlechap+F6j
.text:0000028E                 movzx   ecx, byte ptr [ebp+var_10C+1]
.text:00000295                 mov     edx, [ebp+arg_0]
.text:00000298                 mov     [edx+78h], ecx
.text:0000029B                 jmp     loc_485
.text:000002A0 ; ---------------------------------------------------------------------------
.text:000002A0
.text:000002A0 loc_2A0:                                ; CODE XREF: _proxy_socks5_handlechap+A5j
.text:000002A0                 mov     eax, [ebp+arg_0]
.text:000002A3                 cmp     dword ptr [eax+80h], 0FFFFFFFFh
.text:000002AA                 jnz     short loc_2CC
.text:000002AC                 movzx   ecx, byte ptr [ebp+var_10C]
.text:000002B3                 mov     edx, [ebp+arg_0]
.text:000002B6                 mov     [edx+80h], ecx
.text:000002BC                 movzx   eax, byte ptr [ebp+var_10C+1]
.text:000002C3                 mov     ecx, [ebp+arg_0]
.text:000002C6                 mov     [ecx+84h], eax
.text:000002CC
.text:000002CC loc_2CC:                                ; CODE XREF: _proxy_socks5_handlechap+14Aj
.text:000002CC                 mov     edx, [ebp+arg_0]
.text:000002CF                 add     edx, 34h ; '4'
.text:000002D2                 push    edx
.text:000002D3                 call    _bufchain_size
.text:000002D8                 add     esp, 4
.text:000002DB                 mov     ecx, [ebp+arg_0]
.text:000002DE                 cmp     eax, [ecx+84h]
.text:000002E4                 jge     short loc_2F0
.text:000002E6                 mov     eax, 1
.text:000002EB                 jmp     loc_4C4
.text:000002F0 ; ---------------------------------------------------------------------------
.text:000002F0
.text:000002F0 loc_2F0:                                ; CODE XREF: _proxy_socks5_handlechap+184j
.text:000002F0                 mov     edx, [ebp+arg_0]
.text:000002F3                 mov     eax, [edx+84h]
.text:000002F9                 push    eax
.text:000002FA                 lea     ecx, [ebp+var_10C]
.text:00000300                 push    ecx
.text:00000301                 mov     edx, [ebp+arg_0]
.text:00000304                 add     edx, 34h ; '4'
.text:00000307                 push    edx
.text:00000308                 call    _bufchain_fetch
.text:0000030D                 add     esp, 0Ch
.text:00000310                 mov     eax, [ebp+arg_0]
.text:00000313                 mov     ecx, [eax+84h]
.text:00000319                 push    ecx
.text:0000031A                 mov     edx, [ebp+arg_0]
.text:0000031D                 add     edx, 34h ; '4'
.text:00000320                 push    edx
.text:00000321                 call    _bufchain_consume
.text:00000326                 add     esp, 8
.text:00000329                 mov     eax, [ebp+arg_0]
.text:0000032C                 mov     ecx, [eax+80h]
.text:00000332                 mov     [ebp+var_130], ecx
.text:00000338                 cmp     [ebp+var_130], 0
.text:0000033F                 jz      short loc_35C
.text:00000341                 cmp     [ebp+var_130], 3
.text:00000348                 jz      short loc_3AE
.text:0000034A                 cmp     [ebp+var_130], 11h
.text:00000351                 jz      loc_427
.text:00000357                 jmp     loc_469
.text:0000035C ; ---------------------------------------------------------------------------
.text:0000035C
.text:0000035C loc_35C:                                ; CODE XREF: _proxy_socks5_handlechap+1DFj
.text:0000035C                 movzx   edx, byte ptr [ebp+var_10C]
.text:00000363                 test    edx, edx
.text:00000365                 jnz     short loc_373
.text:00000367                 mov     eax, [ebp+arg_0]
.text:0000036A                 mov     dword ptr [eax+44h], 2
.text:00000371                 jmp     short loc_3A9
.text:00000373 ; ---------------------------------------------------------------------------
.text:00000373
.text:00000373 loc_373:                                ; CODE XREF: _proxy_socks5_handlechap+205j
.text:00000373                 mov     esi, esp
.text:00000375                 push    0
.text:00000377                 push    1F40h
.text:0000037C                 push    offset $SG87182 ; "Proxy error: SOCKS proxy refused CHAP a"...
.text:00000381                 mov     ecx, [ebp+arg_0]
.text:00000384                 mov     edx, [ecx+0Ch]
.text:00000387                 push    edx
.text:00000388                 mov     eax, [ebp+arg_0]
.text:0000038B                 mov     ecx, [eax+0Ch]
.text:0000038E                 mov     edx, [ecx]
.text:00000390                 mov     eax, [edx+4]
.text:00000393                 call    eax
.text:00000395                 add     esp, 10h
.text:00000398                 cmp     esi, esp
.text:0000039A                 call    __RTC_CheckEsp
.text:0000039F                 mov     eax, 1
.text:000003A4                 jmp     loc_4C4
.text:000003A9 ; ---------------------------------------------------------------------------
.text:000003A9
.text:000003A9 loc_3A9:                                ; CODE XREF: _proxy_socks5_handlechap+211j
.text:000003A9                 jmp     loc_469
.text:000003AE ; ---------------------------------------------------------------------------
.text:000003AE
.text:000003AE loc_3AE:                                ; CODE XREF: _proxy_socks5_handlechap+1E8j
.text:000003AE                 mov     [ebp+var_128], 1
.text:000003B5                 mov     [ebp+var_127], 1
.text:000003BC                 mov     [ebp+var_126], 4
.text:000003C3                 mov     [ebp+var_125], 10h
.text:000003CA                 lea     ecx, [ebp+var_124]
.text:000003D0                 push    ecx             ; int
.text:000003D1                 push    11h
.text:000003D3                 mov     edx, [ebp+arg_0]
.text:000003D6                 mov     eax, [edx+74h]
.text:000003D9                 push    eax
.text:000003DA                 call    _conf_get_str
.text:000003DF                 add     esp, 8
.text:000003E2                 push    eax             ; char *
.text:000003E3                 mov     ecx, [ebp+arg_0]
.text:000003E6                 mov     edx, [ecx+84h]
.text:000003EC                 push    edx             ; int
.text:000003ED                 lea     eax, [ebp+var_10C]
.text:000003F3                 push    eax             ; int
.text:000003F4                 call    _hmacmd5_chap
.text:000003F9                 add     esp, 10h
.text:000003FC                 mov     esi, esp
.text:000003FE                 push    14h
.text:00000400                 lea     ecx, [ebp+var_128]
.text:00000406                 push    ecx
.text:00000407                 mov     edx, [ebp+arg_0]
.text:0000040A                 mov     eax, [edx+8]
.text:0000040D                 push    eax
.text:0000040E                 mov     ecx, [ebp+arg_0]
.text:00000411                 mov     edx, [ecx+8]
.text:00000414                 mov     eax, [edx]
.text:00000416                 mov     ecx, [eax+8]
.text:00000419                 call    ecx
.text:0000041B                 add     esp, 0Ch
.text:0000041E                 cmp     esi, esp
.text:00000420                 call    __RTC_CheckEsp
.text:00000425                 jmp     short loc_469
.text:00000427 ; ---------------------------------------------------------------------------
.text:00000427
.text:00000427 loc_427:                                ; CODE XREF: _proxy_socks5_handlechap+1F1j
.text:00000427                 movzx   edx, byte ptr [ebp+var_10C]
.text:0000042E                 cmp     edx, 85h ; 'à'
.text:00000434                 jz      short loc_469
.text:00000436                 mov     esi, esp
.text:00000438                 push    0
.text:0000043A                 push    1F40h
.text:0000043F                 push    offset $SG87187 ; "Proxy error: Server chose CHAP of other"...
.text:00000444                 mov     eax, [ebp+arg_0]
.text:00000447                 mov     ecx, [eax+0Ch]
.text:0000044A                 push    ecx
.text:0000044B                 mov     edx, [ebp+arg_0]
.text:0000044E                 mov     eax, [edx+0Ch]
.text:00000451                 mov     ecx, [eax]
.text:00000453                 mov     edx, [ecx+4]
.text:00000456                 call    edx
.text:00000458                 add     esp, 10h
.text:0000045B                 cmp     esi, esp
.text:0000045D                 call    __RTC_CheckEsp
.text:00000462                 mov     eax, 1
.text:00000467                 jmp     short loc_4C4
.text:00000469 ; ---------------------------------------------------------------------------
.text:00000469
.text:00000469 loc_469:                                ; CODE XREF: _proxy_socks5_handlechap+1F7j
.text:00000469                                         ; _proxy_socks5_handlechap:loc_3A9j ...
.text:00000469                 mov     eax, [ebp+arg_0]
.text:0000046C                 mov     dword ptr [eax+80h], 0FFFFFFFFh
.text:00000476                 mov     ecx, [ebp+arg_0]
.text:00000479                 mov     edx, [ecx+7Ch]
.text:0000047C                 add     edx, 1
.text:0000047F                 mov     eax, [ebp+arg_0]
.text:00000482                 mov     [eax+7Ch], edx
.text:00000485
.text:00000485 loc_485:                                ; CODE XREF: _proxy_socks5_handlechap+13Bj
.text:00000485                 mov     ecx, [ebp+arg_0]
.text:00000488                 cmp     dword ptr [ecx+44h], 8
.text:0000048C                 jnz     short loc_4BD
.text:0000048E                 mov     edx, [ebp+arg_0]
.text:00000491                 mov     eax, [ebp+arg_0]
.text:00000494                 mov     ecx, [edx+7Ch]
.text:00000497                 cmp     ecx, [eax+78h]
.text:0000049A                 jl      short loc_4BD
.text:0000049C                 mov     edx, [ebp+arg_0]
.text:0000049F                 mov     dword ptr [edx+78h], 0
.text:000004A6                 mov     eax, [ebp+arg_0]
.text:000004A9                 mov     dword ptr [eax+7Ch], 0
.text:000004B0                 mov     ecx, [ebp+arg_0]
.text:000004B3                 mov     dword ptr [ecx+84h], 0
.text:000004BD
.text:000004BD loc_4BD:                                ; CODE XREF: _proxy_socks5_handlechap+32Cj
.text:000004BD                                         ; _proxy_socks5_handlechap+33Aj
.text:000004BD                 jmp     loc_187
.text:000004C2 ; ---------------------------------------------------------------------------
.text:000004C2
.text:000004C2 loc_4C2:                                ; CODE XREF: _proxy_socks5_handlechap+3Cj
.text:000004C2                 xor     eax, eax
.text:000004C4
.text:000004C4 loc_4C4:                                ; CODE XREF: _proxy_socks5_handlechap+70j
.text:000004C4                                         ; _proxy_socks5_handlechap+E8j ...
.text:000004C4                 push    edx
.text:000004C5                 mov     ecx, ebp
.text:000004C7                 push    eax
.text:000004C8                 lea     edx, $LN27
.text:000004CE                 call    @_RTC_CheckStackVars@8
.text:000004D3                 pop     eax
.text:000004D4                 pop     edx
.text:000004D5                 pop     edi
.text:000004D6                 pop     esi
.text:000004D7                 mov     ecx, [ebp+var_4]
.text:000004DA                 xor     ecx, ebp
.text:000004DC                 call    @__security_check_cookie@4
.text:000004E1                 add     esp, 130h
.text:000004E7                 cmp     ebp, esp
.text:000004E9                 call    __RTC_CheckEsp
.text:000004EE                 mov     esp, ebp
.text:000004F0                 pop     ebp
.text:000004F1                 retn
.text:000004F1 _proxy_socks5_handlechap endp
.text:000004F1
.text:000004F1 ; ---------------------------------------------------------------------------
.text:000004F2                 align 4
.text:000004F4 $LN27           dd 2                    ; DATA XREF: _proxy_socks5_handlechap+368o
.text:000004F8                 dd offset $LN26
.text:000004FC $LN26           dd 0FFFFFEF4h, 104h     ; DATA XREF: .text:000004F8o
.text:00000504                 dd offset $LN24         ; "data"
.text:00000508                 dd 0FFFFFED8h, 14h
.text:00000510                 dd offset $LN25         ; "outbuf"
.text:00000514 $LN25           db 'outbuf',0           ; DATA XREF: .text:00000510o
.text:0000051B $LN24           db 'data',0             ; DATA XREF: .text:00000504o
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520 ; int __cdecl hmacmd5_chap(int, int, char *, int)
.text:00000520 _hmacmd5_chap   proc near               ; CODE XREF: _proxy_socks5_handlechap+294p
.text:00000520
.text:00000520 var_24          = dword ptr -24h
.text:00000520 var_20          = dword ptr -20h
.text:00000520 var_1C          = dword ptr -1Ch
.text:00000520 var_18          = dword ptr -18h
.text:00000520 var_14          = dword ptr -14h
.text:00000520 var_10          = dword ptr -10h
.text:00000520 var_C           = dword ptr -0Ch
.text:00000520 var_8           = dword ptr -8
.text:00000520 var_4           = dword ptr -4
.text:00000520 arg_0           = dword ptr  8
.text:00000520 arg_4           = dword ptr  0Ch
.text:00000520 arg_8           = dword ptr  10h
.text:00000520 arg_C           = dword ptr  14h
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 sub     esp, 24h
.text:00000526                 mov     eax, 0CCCCCCCCh
.text:0000052B                 mov     [ebp+var_24], eax
.text:0000052E                 mov     [ebp+var_20], eax
.text:00000531                 mov     [ebp+var_1C], eax
.text:00000534                 mov     [ebp+var_18], eax
.text:00000537                 mov     [ebp+var_14], eax
.text:0000053A                 mov     [ebp+var_10], eax
.text:0000053D                 mov     [ebp+var_C], eax
.text:00000540                 mov     [ebp+var_8], eax
.text:00000543                 mov     [ebp+var_4], eax
.text:00000546                 mov     eax, dword ptr ds:___security_cookie
.text:0000054B                 xor     eax, ebp
.text:0000054D                 mov     [ebp+var_4], eax
.text:00000550                 call    _hmacmd5_make_context
.text:00000555                 mov     [ebp+var_8], eax
.text:00000558                 mov     eax, [ebp+arg_8]
.text:0000055B                 push    eax             ; char *
.text:0000055C                 call    _strlen
.text:00000561                 add     esp, 4
.text:00000564                 mov     [ebp+var_C], eax
.text:00000567                 cmp     [ebp+var_C], 40h ; '@'
.text:0000056B                 jle     short loc_595
.text:0000056D                 lea     ecx, [ebp+var_20]
.text:00000570                 push    ecx
.text:00000571                 mov     edx, [ebp+var_C]
.text:00000574                 push    edx
.text:00000575                 mov     eax, [ebp+arg_8]
.text:00000578                 push    eax
.text:00000579                 call    _MD5Simple
.text:0000057E                 add     esp, 0Ch
.text:00000581                 push    10h
.text:00000583                 lea     ecx, [ebp+var_20]
.text:00000586                 push    ecx
.text:00000587                 mov     edx, [ebp+var_8]
.text:0000058A                 push    edx
.text:0000058B                 call    _hmacmd5_key
.text:00000590                 add     esp, 0Ch
.text:00000593                 jmp     short loc_5A9
.text:00000595 ; ---------------------------------------------------------------------------
.text:00000595
.text:00000595 loc_595:                                ; CODE XREF: _hmacmd5_chap+4Bj
.text:00000595                 mov     eax, [ebp+var_C]
.text:00000598                 push    eax
.text:00000599                 mov     ecx, [ebp+arg_8]
.text:0000059C                 push    ecx
.text:0000059D                 mov     edx, [ebp+var_8]
.text:000005A0                 push    edx
.text:000005A1                 call    _hmacmd5_key
.text:000005A6                 add     esp, 0Ch
.text:000005A9
.text:000005A9 loc_5A9:                                ; CODE XREF: _hmacmd5_chap+73j
.text:000005A9                 mov     eax, [ebp+arg_C]
.text:000005AC                 push    eax
.text:000005AD                 mov     ecx, [ebp+arg_4]
.text:000005B0                 push    ecx
.text:000005B1                 mov     edx, [ebp+arg_0]
.text:000005B4                 push    edx
.text:000005B5                 mov     eax, [ebp+var_8]
.text:000005B8                 push    eax
.text:000005B9                 call    _hmacmd5_do_hmac
.text:000005BE                 add     esp, 10h
.text:000005C1                 mov     ecx, [ebp+var_8]
.text:000005C4                 push    ecx
.text:000005C5                 call    _hmacmd5_free_context
.text:000005CA                 add     esp, 4
.text:000005CD                 push    edx
.text:000005CE                 mov     ecx, ebp
.text:000005D0                 push    eax
.text:000005D1                 lea     edx, $LN7
.text:000005D7                 call    @_RTC_CheckStackVars@8
.text:000005DC                 pop     eax
.text:000005DD                 pop     edx
.text:000005DE                 mov     ecx, [ebp+var_4]
.text:000005E1                 xor     ecx, ebp
.text:000005E3                 call    @__security_check_cookie@4
.text:000005E8                 add     esp, 24h
.text:000005EB                 cmp     ebp, esp
.text:000005ED                 call    __RTC_CheckEsp
.text:000005F2                 mov     esp, ebp
.text:000005F4                 pop     ebp
.text:000005F5                 retn
.text:000005F5 _hmacmd5_chap   endp
.text:000005F5
.text:000005F5 ; ---------------------------------------------------------------------------
.text:000005F6                 align 4
.text:000005F8 $LN7            dd 1                    ; DATA XREF: _hmacmd5_chap+B1o
.text:000005FC                 dd offset $LN6
.text:00000600 $LN6            dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:000005FCo
.text:00000608                 dd offset $LN5          ; "md5buf"
.text:0000060C $LN5            db 'md5buf',0           ; DATA XREF: .text:00000608o
.text:00000613                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620                 public _proxy_socks5_selectchap
.text:00000620 _proxy_socks5_selectchap proc near
.text:00000620
.text:00000620 var_21C         = dword ptr -21Ch
.text:00000620 var_214         = byte ptr -214h
.text:00000620 var_213         = byte ptr -213h
.text:00000620 var_212         = byte ptr -212h
.text:00000620 var_211         = byte ptr -211h
.text:00000620 var_210         = byte ptr -210h
.text:00000620 var_20F         = byte ptr -20Fh
.text:00000620 var_20E         = byte ptr -20Eh
.text:00000620 var_20D         = byte ptr -20Dh
.text:00000620 var_C           = dword ptr -0Ch
.text:00000620 var_8           = dword ptr -8
.text:00000620 var_4           = dword ptr -4
.text:00000620 arg_0           = dword ptr  8
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 sub     esp, 21Ch
.text:00000629                 push    esi
.text:0000062A                 push    edi
.text:0000062B                 lea     edi, [ebp+var_21C]
.text:00000631                 mov     ecx, 87h ; 'ç'
.text:00000636                 mov     eax, 0CCCCCCCCh
.text:0000063B                 rep stosd
.text:0000063D                 mov     eax, dword ptr ds:___security_cookie
.text:00000642                 xor     eax, ebp
.text:00000644                 mov     [ebp+var_4], eax
.text:00000647                 push    10h
.text:00000649                 mov     eax, [ebp+arg_0]
.text:0000064C                 mov     ecx, [eax+74h]
.text:0000064F                 push    ecx
.text:00000650                 call    _conf_get_str
.text:00000655                 add     esp, 8
.text:00000658                 mov     [ebp+var_8], eax
.text:0000065B                 push    11h
.text:0000065D                 mov     edx, [ebp+arg_0]
.text:00000660                 mov     eax, [edx+74h]
.text:00000663                 push    eax
.text:00000664                 call    _conf_get_str
.text:00000669                 add     esp, 8
.text:0000066C                 mov     [ebp+var_C], eax
.text:0000066F                 mov     ecx, [ebp+var_8]
.text:00000672                 movsx   edx, byte ptr [ecx]
.text:00000675                 test    edx, edx
.text:00000677                 jnz     short loc_687
.text:00000679                 mov     eax, [ebp+var_C]
.text:0000067C                 movsx   ecx, byte ptr [eax]
.text:0000067F                 test    ecx, ecx
.text:00000681                 jz      loc_77D
.text:00000687
.text:00000687 loc_687:                                ; CODE XREF: _proxy_socks5_selectchap+57j
.text:00000687                 mov     [ebp+var_214], 1
.text:0000068E                 mov     [ebp+var_213], 2
.text:00000695                 mov     [ebp+var_212], 11h
.text:0000069C                 mov     [ebp+var_211], 1
.text:000006A3                 mov     [ebp+var_210], 85h ; 'à'
.text:000006AA                 mov     [ebp+var_20F], 2
.text:000006B1                 mov     edx, [ebp+var_8]
.text:000006B4                 push    edx             ; char *
.text:000006B5                 call    _strlen
.text:000006BA                 add     esp, 4
.text:000006BD                 mov     [ebp+var_21C], eax
.text:000006C3                 cmp     [ebp+var_21C], 0FFh
.text:000006CD                 jle     short loc_6D9
.text:000006CF                 mov     [ebp+var_21C], 0FFh
.text:000006D9
.text:000006D9 loc_6D9:                                ; CODE XREF: _proxy_socks5_selectchap+ADj
.text:000006D9                 cmp     [ebp+var_21C], 1
.text:000006E0                 jge     short loc_6EC
.text:000006E2                 mov     [ebp+var_21C], 1
.text:000006EC
.text:000006EC loc_6EC:                                ; CODE XREF: _proxy_socks5_selectchap+C0j
.text:000006EC                 mov     al, byte ptr [ebp+var_21C]
.text:000006F2                 mov     [ebp+var_20E], al
.text:000006F8                 mov     ecx, [ebp+var_21C]
.text:000006FE                 push    ecx             ; size_t
.text:000006FF                 mov     edx, [ebp+var_8]
.text:00000702                 push    edx             ; void *
.text:00000703                 lea     eax, [ebp+var_20D]
.text:00000709                 push    eax             ; void *
.text:0000070A                 call    _memcpy
.text:0000070F                 add     esp, 0Ch
.text:00000712                 mov     ecx, [ebp+var_21C]
.text:00000718                 add     ecx, 7
.text:0000071B                 mov     esi, esp
.text:0000071D                 push    ecx
.text:0000071E                 lea     edx, [ebp+var_214]
.text:00000724                 push    edx
.text:00000725                 mov     eax, [ebp+arg_0]
.text:00000728                 mov     ecx, [eax+8]
.text:0000072B                 push    ecx
.text:0000072C                 mov     edx, [ebp+arg_0]
.text:0000072F                 mov     eax, [edx+8]
.text:00000732                 mov     ecx, [eax]
.text:00000734                 mov     edx, [ecx+8]
.text:00000737                 call    edx
.text:00000739                 add     esp, 0Ch
.text:0000073C                 cmp     esi, esp
.text:0000073E                 call    __RTC_CheckEsp
.text:00000743                 mov     eax, [ebp+arg_0]
.text:00000746                 mov     dword ptr [eax+78h], 0
.text:0000074D                 mov     ecx, [ebp+arg_0]
.text:00000750                 mov     dword ptr [ecx+7Ch], 0
.text:00000757                 mov     edx, [ebp+arg_0]
.text:0000075A                 mov     dword ptr [edx+80h], 0FFFFFFFFh
.text:00000764                 mov     eax, [ebp+arg_0]
.text:00000767                 mov     dword ptr [eax+84h], 0
.text:00000771                 mov     ecx, [ebp+arg_0]
.text:00000774                 mov     dword ptr [ecx+44h], 8
.text:0000077B                 jmp     short loc_7A9
.text:0000077D ; ---------------------------------------------------------------------------
.text:0000077D
.text:0000077D loc_77D:                                ; CODE XREF: _proxy_socks5_selectchap+61j
.text:0000077D                 mov     esi, esp
.text:0000077F                 push    0
.text:00000781                 push    1F40h
.text:00000786                 push    offset $SG87201 ; "Proxy error: Server chose CHAP authenti"...
.text:0000078B                 mov     edx, [ebp+arg_0]
.text:0000078E                 mov     eax, [edx+0Ch]
.text:00000791                 push    eax
.text:00000792                 mov     ecx, [ebp+arg_0]
.text:00000795                 mov     edx, [ecx+0Ch]
.text:00000798                 mov     eax, [edx]
.text:0000079A                 mov     ecx, [eax+4]
.text:0000079D                 call    ecx
.text:0000079F                 add     esp, 10h
.text:000007A2                 cmp     esi, esp
.text:000007A4                 call    __RTC_CheckEsp
.text:000007A9
.text:000007A9 loc_7A9:                                ; CODE XREF: _proxy_socks5_selectchap+15Bj
.text:000007A9                 mov     eax, 1
.text:000007AE                 push    edx
.text:000007AF                 mov     ecx, ebp
.text:000007B1                 push    eax
.text:000007B2                 lea     edx, $LN10
.text:000007B8                 call    @_RTC_CheckStackVars@8
.text:000007BD                 pop     eax
.text:000007BE                 pop     edx
.text:000007BF                 pop     edi
.text:000007C0                 pop     esi
.text:000007C1                 mov     ecx, [ebp+var_4]
.text:000007C4                 xor     ecx, ebp
.text:000007C6                 call    @__security_check_cookie@4
.text:000007CB                 add     esp, 21Ch
.text:000007D1                 cmp     ebp, esp
.text:000007D3                 call    __RTC_CheckEsp
.text:000007D8                 mov     esp, ebp
.text:000007DA                 pop     ebp
.text:000007DB                 retn
.text:000007DB _proxy_socks5_selectchap endp
.text:000007DB
.text:000007DB ; ---------------------------------------------------------------------------
.text:000007DC $LN10           dd 1                    ; DATA XREF: _proxy_socks5_selectchap+192o
.text:000007E0                 dd offset $LN9
.text:000007E4 $LN9            dd 0FFFFFDECh, 202h     ; DATA XREF: .text:000007E0o
.text:000007EC                 dd offset $LN8          ; "chapbuf"
.text:000007F0 $LN8            db 'chapbuf',0          ; DATA XREF: .text:000007ECo
.text:000007F0 _text           ends
.text:000007F0
.rtc$TMZ:000007F8 ; ===========================================================================
.rtc$TMZ:000007F8
.rtc$TMZ:000007F8 ; Segment type: Pure data
.rtc$TMZ:000007F8 ; Segment permissions: Read
.rtc$TMZ:000007F8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000007F8                 assume cs:_rtc$TMZ
.rtc$TMZ:000007F8                 ;org 7F8h
.rtc$TMZ:000007F8 ; COMDAT (pick any)
.rtc$TMZ:000007F8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000007F8 _rtc$TMZ        ends
.rtc$TMZ:000007F8
.rtc$IMZ:000007FC ; ===========================================================================
.rtc$IMZ:000007FC
.rtc$IMZ:000007FC ; Segment type: Pure data
.rtc$IMZ:000007FC ; Segment permissions: Read
.rtc$IMZ:000007FC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000007FC                 assume cs:_rtc$IMZ
.rtc$IMZ:000007FC                 ;org 7FCh
.rtc$IMZ:000007FC ; COMDAT (pick any)
.rtc$IMZ:000007FC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000007FC _rtc$IMZ        ends
.rtc$IMZ:000007FC
UNDEF:00000800 ; ===========================================================================
UNDEF:00000800
UNDEF:00000800 ; Segment type: Externs
UNDEF:00000800 ; UNDEF
UNDEF:00000800                 extrn __RTC_Shutdown:near
UNDEF:00000800                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000804                 extrn __RTC_InitBase:near
UNDEF:00000804                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000808                 extrn _conf_get_str:near
UNDEF:00000808                                         ; CODE XREF: _proxy_socks5_handlechap+27Ap
UNDEF:00000808                                         ; _proxy_socks5_selectchap+30p ...
UNDEF:0000080C                 extrn _bufchain_consume:near
UNDEF:0000080C                                         ; CODE XREF: _proxy_socks5_handlechap+96p
UNDEF:0000080C                                         ; _proxy_socks5_handlechap+1C1p
UNDEF:00000810                 extrn _bufchain_fetch:near
UNDEF:00000810                                         ; CODE XREF: _proxy_socks5_handlechap+85p
UNDEF:00000810                                         ; _proxy_socks5_handlechap+1A8p
UNDEF:00000814                 extrn _bufchain_size:near
UNDEF:00000814                                         ; CODE XREF: _proxy_socks5_handlechap+5Ep
UNDEF:00000814                                         ; _proxy_socks5_handlechap+173p
UNDEF:00000818                 extrn ___security_cookie:near
UNDEF:00000818                                         ; DATA XREF: _proxy_socks5_handlechap+1Dr
UNDEF:00000818                                         ; _hmacmd5_chap+26r ...
UNDEF:0000081C                 extrn @__security_check_cookie@4:near
UNDEF:0000081C                                         ; CODE XREF: _proxy_socks5_handlechap+37Cp
UNDEF:0000081C                                         ; _hmacmd5_chap+C3p ...
UNDEF:00000820                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000820                                         ; CODE XREF: _proxy_socks5_handlechap+36Ep
UNDEF:00000820                                         ; _hmacmd5_chap+B7p ...
UNDEF:00000824                 extrn __RTC_CheckEsp:near
UNDEF:00000824                                         ; CODE XREF: _proxy_socks5_handlechap+DEp
UNDEF:00000824                                         ; _proxy_socks5_handlechap+11Fp ...
UNDEF:00000828                 extrn _hmacmd5_free_context:near
UNDEF:00000828                                         ; CODE XREF: _hmacmd5_chap+A5p
UNDEF:0000082C                 extrn _hmacmd5_do_hmac:near ; CODE XREF: _hmacmd5_chap+99p
UNDEF:00000830                 extrn _hmacmd5_key:near ; CODE XREF: _hmacmd5_chap+6Bp
UNDEF:00000830                                         ; _hmacmd5_chap+81p
UNDEF:00000834                 extrn _MD5Simple:near   ; CODE XREF: _hmacmd5_chap+59p
UNDEF:00000838 ; size_t __cdecl strlen(const char *)
UNDEF:00000838                 extrn _strlen:near      ; CODE XREF: _hmacmd5_chap+3Cp
UNDEF:00000838                                         ; _proxy_socks5_selectchap+95p
UNDEF:0000083C                 extrn _hmacmd5_make_context:near
UNDEF:0000083C                                         ; CODE XREF: _hmacmd5_chap+30p
UNDEF:00000840 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00000840                 extrn _memcpy:near      ; CODE XREF: _proxy_socks5_selectchap+EAp
UNDEF:00000840
UNDEF:00000840
UNDEF:00000840                 end