.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : D05C02886383A0B6C2659E55165C790B
.data:00000000 ; Input CRC32 : 98F676ED
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\logging.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85578:                               ; DATA XREF: _logwrite+4Do
.data:00000000                 unicode 0, <..\..\..\logging.c>,0
.data:00000026                 align 4
.data:00000028 $SG85579:                               ; DATA XREF: _logwrite+52o
.data:00000028                 unicode 0, <ctx->
.data:00000028                 dw 3Eh
.data:00000028                 unicode 0, <lgfp>,0
.data:0000003C $SG85582        db 'Disabled writing session log due to error while writing',0
.data:0000003C                                         ; DATA XREF: _logwrite+92o
.data:00000074 $SG85616        db 'ab',0               ; DATA XREF: _logfopen_callback+45o
.data:00000077                 align 4
.data:00000078 $SG85617        db 'wb',0               ; DATA XREF: _logfopen_callback:loc_525o
.data:0000007B                 align 4
.data:0000007C ; char _SG85621[]
.data:0000007C $SG85621        db '%Y.%m.%d %H:%M:%S',0 ; DATA XREF: _logfopen_callback+D0o
.data:0000008E                 align 10h
.data:00000090 $SG85622        db '=~=~=~=~=~=~=~=~=~=~=~= PuTTY log %s =~=~=~=~=~=~=~=~=~=~=~=',0Dh,0Ah,0
.data:00000090                                         ; DATA XREF: _logfopen_callback+EDo
.data:000000CF                 align 10h
.data:000000D0 $SG85623        db 'ASCII',0            ; DATA XREF: _logfopen_callback+107o
.data:000000D6                 align 4
.data:000000D8 $SG85624        db 'raw',0              ; DATA XREF: _logfopen_callback+11Co
.data:000000DC $SG85625        db 'SSH packets',0      ; DATA XREF: _logfopen_callback+131o
.data:000000E8 $SG85626        db 'SSH raw data',0     ; DATA XREF: _logfopen_callback+146o
.data:000000F5                 align 4
.data:000000F8 $SG85627        db 'unknown',0          ; DATA XREF: _logfopen_callback:loc_626o
.data:00000100 $SG85628        db 'Disabled writing',0 ; DATA XREF: _logfopen_callback+18Fo
.data:00000111                 align 4
.data:00000114 $SG85629        db 'Error writing',0    ; DATA XREF: _logfopen_callback:loc_66Fo
.data:00000122                 align 4
.data:00000124 $SG85630        db 'Appending',0        ; DATA XREF: _logfopen_callback+1B9o
.data:0000012E                 align 10h
.data:00000130 $SG85631        db 'Writing new',0      ; DATA XREF: _logfopen_callback:loc_699o
.data:0000013C $SG85632        db '%s session log (%s mode) to file: %s',0
.data:0000013C                                         ; DATA XREF: _logfopen_callback+1F9o
.data:00000161                 align 4
.data:00000164 $SG85634:                               ; DATA XREF: _logfopen_callback+23Co
.data:00000164                 unicode 0, <..\..\..\logging.c>,0
.data:0000018A                 align 4
.data:0000018C $SG85635:                               ; DATA XREF: _logfopen_callback+241o
.data:0000018C                 unicode 0, <ctx->
.data:0000018C                 dw 3Eh
.data:0000018C                 unicode 0, <state != L_OPENING>,0
.data:000001BC ; char _SG85651[]
.data:000001BC $SG85651        dd offset $SG85582+36h  ; DATA XREF: _logfopen+A9o
.data:000001BC                                         ; "g"
.data:000001C0 ; char _SG85685[4]
.data:000001C0 $SG85685        db '%s',0Ah,0           ; DATA XREF: _log_eventlog+2Bo
.data:000001C4 $SG85688        db 'Event Log: %s',0Dh,0Ah,0 ; DATA XREF: _log_eventlog+72o
.data:000001D4 $SG85723        db 'Incoming',0         ; DATA XREF: _log_packet+76o
.data:000001DD                 align 10h
.data:000001E0 $SG85724        db 'Outgoing',0         ; DATA XREF: _log_packet:loc_AE6o
.data:000001E9                 align 4
.data:000001EC $SG85725        db '%s packet ',0       ; DATA XREF: _log_packet+93o
.data:000001F7                 align 4
.data:000001F8 $SG85727        db '#0x%lx, ',0         ; DATA XREF: _log_packet+B0o
.data:00000201                 align 4
.data:00000204 $SG85728        db 'type %d / 0x%02x (%s)',0 ; DATA XREF: _log_packet+CDo
.data:0000021A                 align 4
.data:0000021C $SG85730        db ' on behalf of downstream #%u',0
.data:0000021C                                         ; DATA XREF: _log_packet+E8o
.data:00000239                 align 4
.data:0000023C $SG85732        db ' (%s)',0            ; DATA XREF: _log_packet+103o
.data:00000242                 align 4
.data:00000244 $SG85733        dd offset loc_A0D       ; DATA XREF: _log_packet:loc_B78o
.data:00000248 ; char _SG85737[]
.data:00000248 $SG85737        db '%Y-%m-%d %H:%M:%S',0 ; DATA XREF: _log_packet+14Co
.data:0000025A                 align 4
.data:0000025C $SG85738        db 'Incoming',0         ; DATA XREF: _log_packet+168o
.data:00000265                 align 4
.data:00000268 $SG85739        db 'Outgoing',0         ; DATA XREF: _log_packet:loc_BD8o
.data:00000271                 align 4
.data:00000274 $SG85740        db '%s raw data at %s',0Dh,0Ah,0
.data:00000274                                         ; DATA XREF: _log_packet+18Co
.data:00000288 $SG85751        dd offset $SG85582+37h  ; DATA XREF: _log_packet:loc_CB3o
.data:00000288                                         ; ""
.data:0000028C $SG85752        db '  (%d byte%s omitted)',0Dh,0Ah,0
.data:0000028C                                         ; DATA XREF: _log_packet+264o
.data:000002A4 ; char _SG85755[]
.data:000002A4 $SG85755        db '  %08x%*s',0Dh,0Ah,0 ; DATA XREF: _log_packet+2A4o
.data:000002B0 ; char _SG85760[]
.data:000002B0 $SG85760        db 'XX',0               ; DATA XREF: _log_packet+2DFo
.data:000002B3                 align 4
.data:000002B4 ; char _SG85763[]
.data:000002B4 $SG85763        db '%02x',0             ; DATA XREF: _log_packet+308o
.data:000002B9                 align 4
.data:000002BC ; char _SG85767[]
.data:000002BC $SG85767        dd offset loc_A0D       ; DATA XREF: _log_packet+3D7o
.data:000002C0 $SG85770        dd offset $SG85582+37h  ; DATA XREF: _log_packet:loc_E91o
.data:000002C0                                         ; ""
.data:000002C4 $SG85771        db '  (%d byte%s omitted)',0Dh,0Ah,0
.data:000002C4                                         ; DATA XREF: _log_packet+442o
.data:000002DC ; char _SG85830[]
.data:000002DC $SG85830        db '%Y',0               ; DATA XREF: _xlatlognam+D8o
.data:000002DF                 align 10h
.data:000002E0 ; char _SG85832[]
.data:000002E0 $SG85832        db '%m',0               ; DATA XREF: _xlatlognam+F7o
.data:000002E3                 align 4
.data:000002E4 ; char _SG85834[]
.data:000002E4 $SG85834        db '%d',0               ; DATA XREF: _xlatlognam+113o
.data:000002E7                 align 4
.data:000002E8 ; char _SG85836[]
.data:000002E8 $SG85836        db '%H%M%S',0           ; DATA XREF: _xlatlognam+12Fo
.data:000002EF                 align 10h
.data:000002EF _data           ends
.data:000002EF
.bss:000002F0 ; ===========================================================================
.bss:000002F0
.bss:000002F0 ; Segment type: Uninitialized
.bss:000002F0 ; Segment permissions: Read/Write
.bss:000002F0 _bss            segment byte public 'BSS' use32
.bss:000002F0                 assume cs:_bss
.bss:000002F0                 ;org 2F0h
.bss:000002F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000002F0 $SG85750        db    ? ;               ; DATA XREF: _log_packet+243o
.bss:000002F1 $SG85754        db    ? ;               ; DATA XREF: _log_packet+288o
.bss:000002F2 $SG85769        db    ? ;               ; DATA XREF: _log_packet+421o
.bss:000002F3                 align 4
.bss:000002F3 _bss            ends
.bss:000002F3
.text:000002F4 ; ===========================================================================
.text:000002F4
.text:000002F4 ; Segment type: Pure code
.text:000002F4 ; Segment permissions: Read/Execute
.text:000002F4 _text           segment para public 'CODE' use32
.text:000002F4                 assume cs:_text
.text:000002F4                 ;org 2F4h
.text:000002F4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000002F4
.text:000002F4 ; =============== S U B R O U T I N E =======================================
.text:000002F4
.text:000002F4 ; Attributes: bp-based frame
.text:000002F4
.text:000002F4                 public _logflush
.text:000002F4 _logflush       proc near               ; CODE XREF: _log_eventlog+87p
.text:000002F4                                         ; _log_packet+457p
.text:000002F4
.text:000002F4 var_4           = dword ptr -4
.text:000002F4 arg_0           = dword ptr  8
.text:000002F4
.text:000002F4                 push    ebp
.text:000002F5                 mov     ebp, esp
.text:000002F7                 push    ecx
.text:000002F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002FF                 mov     eax, [ebp+arg_0]
.text:00000302                 mov     [ebp+var_4], eax
.text:00000305                 mov     ecx, [ebp+var_4]
.text:00000308                 cmp     dword ptr [ecx+20h], 0
.text:0000030C                 jle     short loc_325
.text:0000030E                 mov     edx, [ebp+var_4]
.text:00000311                 cmp     dword ptr [edx+4], 2
.text:00000315                 jnz     short loc_325
.text:00000317                 mov     eax, [ebp+var_4]
.text:0000031A                 mov     ecx, [eax]
.text:0000031C                 push    ecx             ; FILE *
.text:0000031D                 call    _fflush
.text:00000322                 add     esp, 4
.text:00000325
.text:00000325 loc_325:                                ; CODE XREF: _logflush+18j
.text:00000325                                         ; _logflush+21j
.text:00000325                 add     esp, 4
.text:00000328                 cmp     ebp, esp
.text:0000032A                 call    __RTC_CheckEsp
.text:0000032F                 mov     esp, ebp
.text:00000331                 pop     ebp
.text:00000332                 retn
.text:00000332 _logflush       endp
.text:00000332
.text:00000332 ; ---------------------------------------------------------------------------
.text:00000333                 align 4
.text:00000334
.text:00000334 ; =============== S U B R O U T I N E =======================================
.text:00000334
.text:00000334 ; Attributes: bp-based frame
.text:00000334
.text:00000334                 public _logfopen
.text:00000334 _logfopen       proc near               ; CODE XREF: _logwrite+10p
.text:00000334                                         ; _log_reconfig+D1p
.text:00000334
.text:00000334 var_60          = byte ptr -60h
.text:00000334 var_3C          = dword ptr -3Ch
.text:00000334 var_38          = dword ptr -38h
.text:00000334 var_30          = tm ptr -30h
.text:00000334 var_8           = dword ptr -8
.text:00000334 var_4           = dword ptr -4
.text:00000334 arg_0           = dword ptr  8
.text:00000334
.text:00000334                 push    ebp
.text:00000335                 mov     ebp, esp
.text:00000337                 sub     esp, 60h
.text:0000033A                 push    esi
.text:0000033B                 push    edi
.text:0000033C                 lea     edi, [ebp+var_60]
.text:0000033F                 mov     ecx, 18h
.text:00000344                 mov     eax, 0CCCCCCCCh
.text:00000349                 rep stosd
.text:0000034B                 mov     eax, dword ptr ds:___security_cookie
.text:00000350                 xor     eax, ebp
.text:00000352                 mov     [ebp+var_4], eax
.text:00000355                 mov     eax, [ebp+arg_0]
.text:00000358                 mov     [ebp+var_8], eax
.text:0000035B                 mov     ecx, [ebp+var_8]
.text:0000035E                 cmp     dword ptr [ecx+4], 0
.text:00000362                 jz      short loc_369
.text:00000364                 jmp     loc_487
.text:00000369 ; ---------------------------------------------------------------------------
.text:00000369
.text:00000369 loc_369:                                ; CODE XREF: _logfopen+2Ej
.text:00000369                 mov     edx, [ebp+var_8]
.text:0000036C                 cmp     dword ptr [edx+20h], 0
.text:00000370                 jnz     short loc_377
.text:00000372                 jmp     loc_487
.text:00000377 ; ---------------------------------------------------------------------------
.text:00000377
.text:00000377 loc_377:                                ; CODE XREF: _logfopen+3Cj
.text:00000377                 lea     eax, [ebp+var_60]
.text:0000037A                 push    eax
.text:0000037B                 call    _ltime
.text:00000380                 add     esp, 4
.text:00000383                 mov     ecx, 9
.text:00000388                 mov     esi, eax
.text:0000038A                 lea     edi, [ebp+var_30]
.text:0000038D                 rep movsd
.text:0000038F                 mov     ecx, [ebp+var_8]
.text:00000392                 cmp     dword ptr [ecx+14h], 0
.text:00000396                 jz      short loc_3A7
.text:00000398                 mov     edx, [ebp+var_8]
.text:0000039B                 mov     eax, [edx+14h]
.text:0000039E                 push    eax
.text:0000039F                 call    _filename_free
.text:000003A4                 add     esp, 4
.text:000003A7
.text:000003A7 loc_3A7:                                ; CODE XREF: _logfopen+62j
.text:000003A7                 lea     ecx, [ebp+var_30]
.text:000003AA                 push    ecx             ; struct tm *
.text:000003AB                 push    0
.text:000003AD                 mov     edx, [ebp+var_8]
.text:000003B0                 mov     eax, [edx+1Ch]
.text:000003B3                 push    eax
.text:000003B4                 call    _conf_get_str
.text:000003B9                 add     esp, 8
.text:000003BC                 push    eax             ; int
.text:000003BD                 push    72h ; 'r'
.text:000003BF                 mov     ecx, [ebp+var_8]
.text:000003C2                 mov     edx, [ecx+1Ch]
.text:000003C5                 push    edx
.text:000003C6                 call    _conf_get_filename
.text:000003CB                 add     esp, 8
.text:000003CE                 push    eax             ; int
.text:000003CF                 call    _xlatlognam
.text:000003D4                 add     esp, 0Ch
.text:000003D7                 mov     ecx, [ebp+var_8]
.text:000003DA                 mov     [ecx+14h], eax
.text:000003DD                 push    offset $SG85651 ; char *
.text:000003E2                 mov     edx, [ebp+var_8]
.text:000003E5                 mov     eax, [edx+14h]
.text:000003E8                 mov     ecx, [eax]
.text:000003EA                 push    ecx             ; char *
.text:000003EB                 call    _fopen
.text:000003F0                 add     esp, 8
.text:000003F3                 mov     edx, [ebp+var_8]
.text:000003F6                 mov     [edx], eax
.text:000003F8                 mov     eax, [ebp+var_8]
.text:000003FB                 cmp     dword ptr [eax], 0
.text:000003FE                 jz      short loc_45E
.text:00000400                 push    74h ; 't'
.text:00000402                 mov     ecx, [ebp+var_8]
.text:00000405                 mov     edx, [ecx+1Ch]
.text:00000408                 push    edx
.text:00000409                 call    _conf_get_int
.text:0000040E                 add     esp, 8
.text:00000411                 mov     [ebp+var_3C], eax
.text:00000414                 mov     eax, [ebp+var_8]
.text:00000417                 mov     ecx, [eax]
.text:00000419                 push    ecx             ; FILE *
.text:0000041A                 call    _fclose
.text:0000041F                 add     esp, 4
.text:00000422                 cmp     [ebp+var_3C], 0FFFFFFFFh
.text:00000426                 jz      short loc_43A
.text:00000428                 mov     edx, [ebp+var_3C]
.text:0000042B                 sub     edx, 1
.text:0000042E                 neg     edx
.text:00000430                 sbb     edx, edx
.text:00000432                 add     edx, 2
.text:00000435                 mov     [ebp+var_38], edx
.text:00000438                 jmp     short loc_45C
.text:0000043A ; ---------------------------------------------------------------------------
.text:0000043A
.text:0000043A loc_43A:                                ; CODE XREF: _logfopen+F2j
.text:0000043A                 mov     eax, [ebp+var_8]
.text:0000043D                 push    eax
.text:0000043E                 push    offset _logfopen_callback
.text:00000443                 mov     ecx, [ebp+var_8]
.text:00000446                 mov     edx, [ecx+14h]
.text:00000449                 push    edx
.text:0000044A                 mov     eax, [ebp+var_8]
.text:0000044D                 mov     ecx, [eax+18h]
.text:00000450                 push    ecx
.text:00000451                 call    _askappend
.text:00000456                 add     esp, 10h
.text:00000459                 mov     [ebp+var_38], eax
.text:0000045C
.text:0000045C loc_45C:                                ; CODE XREF: _logfopen+104j
.text:0000045C                 jmp     short loc_465
.text:0000045E ; ---------------------------------------------------------------------------
.text:0000045E
.text:0000045E loc_45E:                                ; CODE XREF: _logfopen+CAj
.text:0000045E                 mov     [ebp+var_38], 2
.text:00000465
.text:00000465 loc_465:                                ; CODE XREF: _logfopen:loc_45Cj
.text:00000465                 cmp     [ebp+var_38], 0
.text:00000469                 jge     short loc_477
.text:0000046B                 mov     edx, [ebp+var_8]
.text:0000046E                 mov     dword ptr [edx+4], 1
.text:00000475                 jmp     short loc_487
.text:00000477 ; ---------------------------------------------------------------------------
.text:00000477
.text:00000477 loc_477:                                ; CODE XREF: _logfopen+135j
.text:00000477                 mov     eax, [ebp+var_38]
.text:0000047A                 push    eax
.text:0000047B                 mov     ecx, [ebp+var_8]
.text:0000047E                 push    ecx
.text:0000047F                 call    _logfopen_callback
.text:00000484                 add     esp, 8
.text:00000487
.text:00000487 loc_487:                                ; CODE XREF: _logfopen+30j
.text:00000487                                         ; _logfopen+3Ej ...
.text:00000487                 push    edx
.text:00000488                 mov     ecx, ebp
.text:0000048A                 push    eax
.text:0000048B                 lea     edx, $LN14
.text:00000491                 call    @_RTC_CheckStackVars@8
.text:00000496                 pop     eax
.text:00000497                 pop     edx
.text:00000498                 pop     edi
.text:00000499                 pop     esi
.text:0000049A                 mov     ecx, [ebp+var_4]
.text:0000049D                 xor     ecx, ebp
.text:0000049F                 call    @__security_check_cookie@4
.text:000004A4                 add     esp, 60h
.text:000004A7                 cmp     ebp, esp
.text:000004A9                 call    __RTC_CheckEsp
.text:000004AE                 mov     esp, ebp
.text:000004B0                 pop     ebp
.text:000004B1                 retn
.text:000004B1 _logfopen       endp
.text:000004B1
.text:000004B1 ; ---------------------------------------------------------------------------
.text:000004B2                 align 4
.text:000004B4 $LN14           dd 1                    ; DATA XREF: _logfopen+157o
.text:000004B8                 dd offset $LN13
.text:000004BC $LN13           dd 0FFFFFFD0h, 24h      ; DATA XREF: .text:000004B8o
.text:000004C4                 dd offset $LN12
.text:000004C8 $LN12           dd 0CC006D74h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000004C4o
.text:000004D4
.text:000004D4 ; =============== S U B R O U T I N E =======================================
.text:000004D4
.text:000004D4 ; Attributes: bp-based frame
.text:000004D4
.text:000004D4 _logfopen_callback proc near            ; CODE XREF: _logfopen+14Bp
.text:000004D4                                         ; DATA XREF: _logfopen+10Ao
.text:000004D4
.text:000004D4 var_1A0         = dword ptr -1A0h
.text:000004D4 var_19C         = dword ptr -19Ch
.text:000004D4 var_198         = dword ptr -198h
.text:000004D4 var_194         = dword ptr -194h
.text:000004D4 var_190         = dword ptr -190h
.text:000004D4 var_18C         = dword ptr -18Ch
.text:000004D4 var_188         = dword ptr -188h
.text:000004D4 var_184         = dword ptr -184h
.text:000004D4 var_180         = byte ptr -180h
.text:000004D4 var_158         = dword ptr -158h
.text:000004D4 var_14C         = dword ptr -14Ch
.text:000004D4 var_144         = dword ptr -144h
.text:000004D4 var_13C         = tm ptr -13Ch
.text:000004D4 var_114         = dword ptr -114h
.text:000004D4 var_10C         = byte ptr -10Ch
.text:000004D4 var_8           = dword ptr -8
.text:000004D4 var_4           = dword ptr -4
.text:000004D4 arg_0           = dword ptr  8
.text:000004D4 arg_4           = dword ptr  0Ch
.text:000004D4
.text:000004D4                 push    ebp
.text:000004D5                 mov     ebp, esp
.text:000004D7                 sub     esp, 1A0h
.text:000004DD                 push    esi
.text:000004DE                 push    edi
.text:000004DF                 lea     edi, [ebp+var_1A0]
.text:000004E5                 mov     ecx, 68h ; 'h'
.text:000004EA                 mov     eax, 0CCCCCCCCh
.text:000004EF                 rep stosd
.text:000004F1                 mov     eax, dword ptr ds:___security_cookie
.text:000004F6                 xor     eax, ebp
.text:000004F8                 mov     [ebp+var_4], eax
.text:000004FB                 mov     eax, [ebp+arg_0]
.text:000004FE                 mov     [ebp+var_8], eax
.text:00000501                 cmp     [ebp+arg_4], 0
.text:00000505                 jnz     short loc_513
.text:00000507                 mov     ecx, [ebp+var_8]
.text:0000050A                 mov     dword ptr [ecx+4], 3
.text:00000511                 jmp     short loc_576
.text:00000513 ; ---------------------------------------------------------------------------
.text:00000513
.text:00000513 loc_513:                                ; CODE XREF: _logfopen_callback+31j
.text:00000513                 cmp     [ebp+arg_4], 1
.text:00000517                 jnz     short loc_525
.text:00000519                 mov     [ebp+var_184], offset $SG85616 ; "ab"
.text:00000523                 jmp     short loc_52F
.text:00000525 ; ---------------------------------------------------------------------------
.text:00000525
.text:00000525 loc_525:                                ; CODE XREF: _logfopen_callback+43j
.text:00000525                 mov     [ebp+var_184], offset $SG85617 ; "wb"
.text:0000052F
.text:0000052F loc_52F:                                ; CODE XREF: _logfopen_callback+4Fj
.text:0000052F                 mov     edx, [ebp+var_184]
.text:00000535                 mov     [ebp+var_144], edx
.text:0000053B                 mov     eax, [ebp+var_144]
.text:00000541                 push    eax             ; char *
.text:00000542                 mov     ecx, [ebp+var_8]
.text:00000545                 mov     edx, [ecx+14h]
.text:00000548                 mov     eax, [edx]
.text:0000054A                 push    eax             ; char *
.text:0000054B                 call    _fopen
.text:00000550                 add     esp, 8
.text:00000553                 mov     ecx, [ebp+var_8]
.text:00000556                 mov     [ecx], eax
.text:00000558                 mov     edx, [ebp+var_8]
.text:0000055B                 cmp     dword ptr [edx], 0
.text:0000055E                 jz      short loc_56C
.text:00000560                 mov     eax, [ebp+var_8]
.text:00000563                 mov     dword ptr [eax+4], 2
.text:0000056A                 jmp     short loc_576
.text:0000056C ; ---------------------------------------------------------------------------
.text:0000056C
.text:0000056C loc_56C:                                ; CODE XREF: _logfopen_callback+8Aj
.text:0000056C                 mov     ecx, [ebp+var_8]
.text:0000056F                 mov     dword ptr [ecx+4], 3
.text:00000576
.text:00000576 loc_576:                                ; CODE XREF: _logfopen_callback+3Dj
.text:00000576                                         ; _logfopen_callback+96j
.text:00000576                 mov     edx, [ebp+var_8]
.text:00000579                 cmp     dword ptr [edx+4], 2
.text:0000057D                 jnz     short loc_5D2
.text:0000057F                 lea     eax, [ebp+var_180]
.text:00000585                 push    eax
.text:00000586                 call    _ltime
.text:0000058B                 add     esp, 4
.text:0000058E                 mov     ecx, 9
.text:00000593                 mov     esi, eax
.text:00000595                 lea     edi, [ebp+var_13C]
.text:0000059B                 rep movsd
.text:0000059D                 lea     ecx, [ebp+var_13C]
.text:000005A3                 push    ecx             ; struct tm *
.text:000005A4                 push    offset $SG85621 ; "%Y.%m.%d %H:%M:%S"
.text:000005A9                 push    18h             ; size_t
.text:000005AB                 lea     edx, [ebp+var_10C]
.text:000005B1                 push    edx             ; char *
.text:000005B2                 call    _strftime
.text:000005B7                 add     esp, 10h
.text:000005BA                 lea     eax, [ebp+var_10C]
.text:000005C0                 push    eax
.text:000005C1                 push    offset $SG85622 ; "=~=~=~=~=~=~=~=~=~=~=~= PuTTY log %s =~"...
.text:000005C6                 mov     ecx, [ebp+var_8]
.text:000005C9                 push    ecx
.text:000005CA                 call    _logprintf
.text:000005CF                 add     esp, 0Ch
.text:000005D2
.text:000005D2 loc_5D2:                                ; CODE XREF: _logfopen_callback+A9j
.text:000005D2                 mov     edx, [ebp+var_8]
.text:000005D5                 cmp     dword ptr [edx+20h], 1
.text:000005D9                 jnz     short loc_5E7
.text:000005DB                 mov     [ebp+var_188], offset $SG85623 ; "ASCII"
.text:000005E5                 jmp     short loc_654
.text:000005E7 ; ---------------------------------------------------------------------------
.text:000005E7
.text:000005E7 loc_5E7:                                ; CODE XREF: _logfopen_callback+105j
.text:000005E7                 mov     eax, [ebp+var_8]
.text:000005EA                 cmp     dword ptr [eax+20h], 2
.text:000005EE                 jnz     short loc_5FC
.text:000005F0                 mov     [ebp+var_18C], offset $SG85624 ; "raw"
.text:000005FA                 jmp     short loc_648
.text:000005FC ; ---------------------------------------------------------------------------
.text:000005FC
.text:000005FC loc_5FC:                                ; CODE XREF: _logfopen_callback+11Aj
.text:000005FC                 mov     ecx, [ebp+var_8]
.text:000005FF                 cmp     dword ptr [ecx+20h], 3
.text:00000603                 jnz     short loc_611
.text:00000605                 mov     [ebp+var_190], offset $SG85625 ; "SSH packets"
.text:0000060F                 jmp     short loc_63C
.text:00000611 ; ---------------------------------------------------------------------------
.text:00000611
.text:00000611 loc_611:                                ; CODE XREF: _logfopen_callback+12Fj
.text:00000611                 mov     edx, [ebp+var_8]
.text:00000614                 cmp     dword ptr [edx+20h], 4
.text:00000618                 jnz     short loc_626
.text:0000061A                 mov     [ebp+var_194], offset $SG85626 ; "SSH raw data"
.text:00000624                 jmp     short loc_630
.text:00000626 ; ---------------------------------------------------------------------------
.text:00000626
.text:00000626 loc_626:                                ; CODE XREF: _logfopen_callback+144j
.text:00000626                 mov     [ebp+var_194], offset $SG85627 ; "unknown"
.text:00000630
.text:00000630 loc_630:                                ; CODE XREF: _logfopen_callback+150j
.text:00000630                 mov     eax, [ebp+var_194]
.text:00000636                 mov     [ebp+var_190], eax
.text:0000063C
.text:0000063C loc_63C:                                ; CODE XREF: _logfopen_callback+13Bj
.text:0000063C                 mov     ecx, [ebp+var_190]
.text:00000642                 mov     [ebp+var_18C], ecx
.text:00000648
.text:00000648 loc_648:                                ; CODE XREF: _logfopen_callback+126j
.text:00000648                 mov     edx, [ebp+var_18C]
.text:0000064E                 mov     [ebp+var_188], edx
.text:00000654
.text:00000654 loc_654:                                ; CODE XREF: _logfopen_callback+111j
.text:00000654                 mov     eax, [ebp+var_8]
.text:00000657                 cmp     dword ptr [eax+4], 3
.text:0000065B                 jnz     short loc_687
.text:0000065D                 cmp     [ebp+arg_4], 0
.text:00000661                 jnz     short loc_66F
.text:00000663                 mov     [ebp+var_198], offset $SG85628 ; "Disabled writing"
.text:0000066D                 jmp     short loc_679
.text:0000066F ; ---------------------------------------------------------------------------
.text:0000066F
.text:0000066F loc_66F:                                ; CODE XREF: _logfopen_callback+18Dj
.text:0000066F                 mov     [ebp+var_198], offset $SG85629 ; "Error writing"
.text:00000679
.text:00000679 loc_679:                                ; CODE XREF: _logfopen_callback+199j
.text:00000679                 mov     ecx, [ebp+var_198]
.text:0000067F                 mov     [ebp+var_19C], ecx
.text:00000685                 jmp     short loc_6AF
.text:00000687 ; ---------------------------------------------------------------------------
.text:00000687
.text:00000687 loc_687:                                ; CODE XREF: _logfopen_callback+187j
.text:00000687                 cmp     [ebp+arg_4], 1
.text:0000068B                 jnz     short loc_699
.text:0000068D                 mov     [ebp+var_1A0], offset $SG85630 ; "Appending"
.text:00000697                 jmp     short loc_6A3
.text:00000699 ; ---------------------------------------------------------------------------
.text:00000699
.text:00000699 loc_699:                                ; CODE XREF: _logfopen_callback+1B7j
.text:00000699                 mov     [ebp+var_1A0], offset $SG85631 ; "Writing new"
.text:000006A3
.text:000006A3 loc_6A3:                                ; CODE XREF: _logfopen_callback+1C3j
.text:000006A3                 mov     edx, [ebp+var_1A0]
.text:000006A9                 mov     [ebp+var_19C], edx
.text:000006AF
.text:000006AF loc_6AF:                                ; CODE XREF: _logfopen_callback+1B1j
.text:000006AF                 mov     eax, [ebp+var_8]
.text:000006B2                 mov     ecx, [eax+14h]
.text:000006B5                 push    ecx
.text:000006B6                 call    _filename_to_str
.text:000006BB                 add     esp, 4
.text:000006BE                 push    eax
.text:000006BF                 mov     edx, [ebp+var_188]
.text:000006C5                 push    edx
.text:000006C6                 mov     eax, [ebp+var_19C]
.text:000006CC                 push    eax
.text:000006CD                 push    offset $SG85632 ; "%s session log (%s mode) to file: %s"
.text:000006D2                 call    _dupprintf
.text:000006D7                 add     esp, 10h
.text:000006DA                 mov     [ebp+var_114], eax
.text:000006E0                 mov     ecx, [ebp+var_114]
.text:000006E6                 push    ecx
.text:000006E7                 mov     edx, [ebp+var_8]
.text:000006EA                 mov     eax, [edx+18h]
.text:000006ED                 push    eax
.text:000006EE                 call    _logevent
.text:000006F3                 add     esp, 8
.text:000006F6                 mov     ecx, [ebp+var_114]
.text:000006FC                 push    ecx
.text:000006FD                 call    _safefree
.text:00000702                 add     esp, 4
.text:00000705                 mov     edx, [ebp+var_8]
.text:00000708                 cmp     dword ptr [edx+4], 1
.text:0000070C                 jnz     short loc_722
.text:0000070E                 push    7Fh ; ''
.text:00000710                 push    offset $SG85634 ; "..\\..\\..\\logging.c"
.text:00000715                 push    offset $SG85635 ; "ctx->state != L_OPENING"
.text:0000071A                 call    __wassert
.text:0000071F ; ---------------------------------------------------------------------------
.text:0000071F                 add     esp, 0Ch
.text:00000722
.text:00000722 loc_722:                                ; CODE XREF: _logfopen_callback+238j
.text:00000722                                         ; _logfopen_callback+2AEj
.text:00000722                 mov     ecx, [ebp+var_8]
.text:00000725                 add     ecx, 8
.text:00000728                 push    ecx
.text:00000729                 call    _bufchain_size
.text:0000072E                 add     esp, 4
.text:00000731                 test    eax, eax
.text:00000733                 jz      short loc_784
.text:00000735                 lea     edx, [ebp+var_158]
.text:0000073B                 push    edx
.text:0000073C                 lea     eax, [ebp+var_14C]
.text:00000742                 push    eax
.text:00000743                 mov     ecx, [ebp+var_8]
.text:00000746                 add     ecx, 8
.text:00000749                 push    ecx
.text:0000074A                 call    _bufchain_prefix
.text:0000074F                 add     esp, 0Ch
.text:00000752                 mov     edx, [ebp+var_158]
.text:00000758                 push    edx             ; size_t
.text:00000759                 mov     eax, [ebp+var_14C]
.text:0000075F                 push    eax             ; void *
.text:00000760                 mov     ecx, [ebp+var_8]
.text:00000763                 push    ecx             ; int
.text:00000764                 call    _logwrite
.text:00000769                 add     esp, 0Ch
.text:0000076C                 mov     edx, [ebp+var_158]
.text:00000772                 push    edx
.text:00000773                 mov     eax, [ebp+var_8]
.text:00000776                 add     eax, 8
.text:00000779                 push    eax
.text:0000077A                 call    _bufchain_consume
.text:0000077F                 add     esp, 8
.text:00000782                 jmp     short loc_722
.text:00000784 ; ---------------------------------------------------------------------------
.text:00000784
.text:00000784 loc_784:                                ; CODE XREF: _logfopen_callback+25Fj
.text:00000784                 push    edx
.text:00000785                 mov     ecx, ebp
.text:00000787                 push    eax
.text:00000788                 lea     edx, $LN32
.text:0000078E                 call    @_RTC_CheckStackVars@8
.text:00000793                 pop     eax
.text:00000794                 pop     edx
.text:00000795                 pop     edi
.text:00000796                 pop     esi
.text:00000797                 mov     ecx, [ebp+var_4]
.text:0000079A                 xor     ecx, ebp
.text:0000079C                 call    @__security_check_cookie@4
.text:000007A1                 add     esp, 1A0h
.text:000007A7                 cmp     ebp, esp
.text:000007A9                 call    __RTC_CheckEsp
.text:000007AE                 mov     esp, ebp
.text:000007B0                 pop     ebp
.text:000007B1                 retn
.text:000007B1 _logfopen_callback endp
.text:000007B1
.text:000007B1 ; ---------------------------------------------------------------------------
.text:000007B2                 align 4
.text:000007B4 $LN32           dd 4                    ; DATA XREF: _logfopen_callback+2B4o
.text:000007B8                 dd offset $LN31
.text:000007BC $LN31           dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:000007B8o
.text:000007C4                 dd offset $LN27         ; "buf"
.text:000007C8                 dd 0FFFFFEC4h, 24h
.text:000007D0                 dd offset $LN28         ; "tm"
.text:000007D4                 dd 0FFFFFEB4h, 4
.text:000007DC                 dd offset $LN29         ; "data"
.text:000007E0                 dd 0FFFFFEA8h, 4
.text:000007E8                 dd offset $LN30
.text:000007EC $LN30           dd 6E656Ch              ; DATA XREF: .text:000007E8o
.text:000007F0 $LN29           db 'data',0             ; DATA XREF: .text:000007DCo
.text:000007F5 $LN28           db 'tm',0               ; DATA XREF: .text:000007D0o
.text:000007F8 $LN27           db 'buf',0              ; DATA XREF: .text:000007C4o
.text:000007FC                 db 8 dup(0CCh)
.text:00000804
.text:00000804 ; =============== S U B R O U T I N E =======================================
.text:00000804
.text:00000804 ; Attributes: bp-based frame
.text:00000804
.text:00000804 ; int __cdecl logwrite(int, void *, size_t)
.text:00000804 _logwrite       proc near               ; CODE XREF: _logfopen_callback+290p
.text:00000804                                         ; _logprintf+49p ...
.text:00000804
.text:00000804 arg_0           = dword ptr  8
.text:00000804 arg_4           = dword ptr  0Ch
.text:00000804 arg_8           = dword ptr  10h
.text:00000804
.text:00000804                 push    ebp
.text:00000805                 mov     ebp, esp
.text:00000807                 mov     eax, [ebp+arg_0]
.text:0000080A                 cmp     dword ptr [eax+4], 0
.text:0000080E                 jnz     short loc_81C
.text:00000810                 mov     ecx, [ebp+arg_0]
.text:00000813                 push    ecx
.text:00000814                 call    _logfopen
.text:00000819                 add     esp, 4
.text:0000081C
.text:0000081C loc_81C:                                ; CODE XREF: _logwrite+Aj
.text:0000081C                 mov     edx, [ebp+arg_0]
.text:0000081F                 cmp     dword ptr [edx+4], 1
.text:00000823                 jnz     short loc_83E
.text:00000825                 mov     eax, [ebp+arg_8]
.text:00000828                 push    eax
.text:00000829                 mov     ecx, [ebp+arg_4]
.text:0000082C                 push    ecx
.text:0000082D                 mov     edx, [ebp+arg_0]
.text:00000830                 add     edx, 8
.text:00000833                 push    edx
.text:00000834                 call    _bufchain_add
.text:00000839                 add     esp, 0Ch
.text:0000083C                 jmp     short loc_8AA
.text:0000083E ; ---------------------------------------------------------------------------
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: _logwrite+1Fj
.text:0000083E                 mov     eax, [ebp+arg_0]
.text:00000841                 cmp     dword ptr [eax+4], 2
.text:00000845                 jnz     short loc_8AA
.text:00000847                 mov     ecx, [ebp+arg_0]
.text:0000084A                 cmp     dword ptr [ecx], 0
.text:0000084D                 jnz     short loc_863
.text:0000084F                 push    2Eh ; '.'
.text:00000851                 push    offset $SG85578 ; "..\\..\\..\\logging.c"
.text:00000856                 push    offset $SG85579 ; "ctx->lgfp"
.text:0000085B                 call    __wassert
.text:00000860 ; ---------------------------------------------------------------------------
.text:00000860                 add     esp, 0Ch
.text:00000863
.text:00000863 loc_863:                                ; CODE XREF: _logwrite+49j
.text:00000863                 mov     eax, [ebp+arg_0]
.text:00000866                 mov     ecx, [eax]
.text:00000868                 push    ecx             ; FILE *
.text:00000869                 mov     edx, [ebp+arg_8]
.text:0000086C                 push    edx             ; size_t
.text:0000086D                 push    1               ; size_t
.text:0000086F                 mov     eax, [ebp+arg_4]
.text:00000872                 push    eax             ; void *
.text:00000873                 call    _fwrite
.text:00000878                 add     esp, 10h
.text:0000087B                 cmp     eax, [ebp+arg_8]
.text:0000087E                 jnb     short loc_8AA
.text:00000880                 mov     ecx, [ebp+arg_0]
.text:00000883                 push    ecx
.text:00000884                 call    _logfclose
.text:00000889                 add     esp, 4
.text:0000088C                 mov     edx, [ebp+arg_0]
.text:0000088F                 mov     dword ptr [edx+4], 3
.text:00000896                 push    offset $SG85582 ; "Disabled writing session log due to err"...
.text:0000089B                 mov     eax, [ebp+arg_0]
.text:0000089E                 mov     ecx, [eax+18h]
.text:000008A1                 push    ecx
.text:000008A2                 call    _logevent
.text:000008A7                 add     esp, 8
.text:000008AA
.text:000008AA loc_8AA:                                ; CODE XREF: _logwrite+38j
.text:000008AA                                         ; _logwrite+41j ...
.text:000008AA                 cmp     ebp, esp
.text:000008AC                 call    __RTC_CheckEsp
.text:000008B1                 pop     ebp
.text:000008B2                 retn
.text:000008B2 _logwrite       endp
.text:000008B2
.text:000008B2 ; ---------------------------------------------------------------------------
.text:000008B3                 align 4
.text:000008B4
.text:000008B4 ; =============== S U B R O U T I N E =======================================
.text:000008B4
.text:000008B4 ; Attributes: bp-based frame
.text:000008B4
.text:000008B4 _logprintf      proc near               ; CODE XREF: _logfopen_callback+F6p
.text:000008B4                                         ; _log_eventlog+7Bp ...
.text:000008B4
.text:000008B4 var_8           = dword ptr -8
.text:000008B4 var_4           = dword ptr -4
.text:000008B4 arg_0           = dword ptr  8
.text:000008B4 arg_4           = dword ptr  0Ch
.text:000008B4 arg_8           = byte ptr  10h
.text:000008B4
.text:000008B4                 push    ebp
.text:000008B5                 mov     ebp, esp
.text:000008B7                 sub     esp, 8
.text:000008BA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008C8                 lea     eax, [ebp+arg_8]
.text:000008CB                 mov     [ebp+var_4], eax
.text:000008CE                 mov     ecx, [ebp+var_4]
.text:000008D1                 push    ecx
.text:000008D2                 mov     edx, [ebp+arg_4]
.text:000008D5                 push    edx
.text:000008D6                 call    _dupvprintf
.text:000008DB                 add     esp, 8
.text:000008DE                 mov     [ebp+var_8], eax
.text:000008E1                 mov     [ebp+var_4], 0
.text:000008E8                 mov     eax, [ebp+var_8]
.text:000008EB                 push    eax             ; char *
.text:000008EC                 call    _strlen
.text:000008F1                 add     esp, 4
.text:000008F4                 push    eax             ; size_t
.text:000008F5                 mov     ecx, [ebp+var_8]
.text:000008F8                 push    ecx             ; void *
.text:000008F9                 mov     edx, [ebp+arg_0]
.text:000008FC                 push    edx             ; int
.text:000008FD                 call    _logwrite
.text:00000902                 add     esp, 0Ch
.text:00000905                 mov     eax, [ebp+var_8]
.text:00000908                 push    eax
.text:00000909                 call    _safefree
.text:0000090E                 add     esp, 4
.text:00000911                 add     esp, 8
.text:00000914                 cmp     ebp, esp
.text:00000916                 call    __RTC_CheckEsp
.text:0000091B                 mov     esp, ebp
.text:0000091D                 pop     ebp
.text:0000091E                 retn
.text:0000091E _logprintf      endp
.text:0000091E
.text:0000091E ; ---------------------------------------------------------------------------
.text:0000091F                 db 5 dup(0CCh)
.text:00000924
.text:00000924 ; =============== S U B R O U T I N E =======================================
.text:00000924
.text:00000924 ; Attributes: bp-based frame
.text:00000924
.text:00000924                 public _logfclose
.text:00000924 _logfclose      proc near               ; CODE XREF: _logwrite+80p
.text:00000924                                         ; _log_free+15p ...
.text:00000924
.text:00000924 var_4           = dword ptr -4
.text:00000924 arg_0           = dword ptr  8
.text:00000924
.text:00000924                 push    ebp
.text:00000925                 mov     ebp, esp
.text:00000927                 push    ecx
.text:00000928                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000092F                 mov     eax, [ebp+arg_0]
.text:00000932                 mov     [ebp+var_4], eax
.text:00000935                 mov     ecx, [ebp+var_4]
.text:00000938                 cmp     dword ptr [ecx], 0
.text:0000093B                 jz      short loc_954
.text:0000093D                 mov     edx, [ebp+var_4]
.text:00000940                 mov     eax, [edx]
.text:00000942                 push    eax             ; FILE *
.text:00000943                 call    _fclose
.text:00000948                 add     esp, 4
.text:0000094B                 mov     ecx, [ebp+var_4]
.text:0000094E                 mov     dword ptr [ecx], 0
.text:00000954
.text:00000954 loc_954:                                ; CODE XREF: _logfclose+17j
.text:00000954                 mov     edx, [ebp+var_4]
.text:00000957                 mov     dword ptr [edx+4], 0
.text:0000095E                 add     esp, 4
.text:00000961                 cmp     ebp, esp
.text:00000963                 call    __RTC_CheckEsp
.text:00000968                 mov     esp, ebp
.text:0000096A                 pop     ebp
.text:0000096B                 retn
.text:0000096B _logfclose      endp
.text:0000096B
.text:0000096B ; ---------------------------------------------------------------------------
.text:0000096C                 db 8 dup(0CCh)
.text:00000974
.text:00000974 ; =============== S U B R O U T I N E =======================================
.text:00000974
.text:00000974 ; Attributes: bp-based frame
.text:00000974
.text:00000974                 public _logtraffic
.text:00000974 _logtraffic     proc near
.text:00000974
.text:00000974 var_4           = dword ptr -4
.text:00000974 arg_0           = dword ptr  8
.text:00000974 arg_4           = byte ptr  0Ch
.text:00000974 arg_8           = dword ptr  10h
.text:00000974
.text:00000974                 push    ebp
.text:00000975                 mov     ebp, esp
.text:00000977                 push    ecx
.text:00000978                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000097F                 mov     eax, [ebp+arg_0]
.text:00000982                 mov     [ebp+var_4], eax
.text:00000985                 mov     ecx, [ebp+var_4]
.text:00000988                 cmp     dword ptr [ecx+20h], 0
.text:0000098C                 jle     short loc_9AB
.text:0000098E                 mov     edx, [ebp+var_4]
.text:00000991                 mov     eax, [edx+20h]
.text:00000994                 cmp     eax, [ebp+arg_8]
.text:00000997                 jnz     short loc_9AB
.text:00000999                 push    1               ; size_t
.text:0000099B                 lea     ecx, [ebp+arg_4]
.text:0000099E                 push    ecx             ; void *
.text:0000099F                 mov     edx, [ebp+var_4]
.text:000009A2                 push    edx             ; int
.text:000009A3                 call    _logwrite
.text:000009A8                 add     esp, 0Ch
.text:000009AB
.text:000009AB loc_9AB:                                ; CODE XREF: _logtraffic+18j
.text:000009AB                                         ; _logtraffic+23j
.text:000009AB                 add     esp, 4
.text:000009AE                 cmp     ebp, esp
.text:000009B0                 call    __RTC_CheckEsp
.text:000009B5                 mov     esp, ebp
.text:000009B7                 pop     ebp
.text:000009B8                 retn
.text:000009B8 _logtraffic     endp
.text:000009B8
.text:000009B8 ; ---------------------------------------------------------------------------
.text:000009B9                 db 0Bh dup(0CCh)
.text:000009C4
.text:000009C4 ; =============== S U B R O U T I N E =======================================
.text:000009C4
.text:000009C4 ; Attributes: bp-based frame
.text:000009C4
.text:000009C4                 public _log_eventlog
.text:000009C4 _log_eventlog   proc near
.text:000009C4
.text:000009C4 var_4           = dword ptr -4
.text:000009C4 arg_0           = dword ptr  8
.text:000009C4 arg_4           = dword ptr  0Ch
.text:000009C4
.text:000009C4                 push    ebp
.text:000009C5                 mov     ebp, esp
.text:000009C7                 push    ecx
.text:000009C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009CF                 mov     eax, [ebp+arg_0]
.text:000009D2                 mov     [ebp+var_4], eax
.text:000009D5                 mov     ecx, dword ptr ds:_flags
.text:000009DB                 and     ecx, 2
.text:000009DE                 jz      short loc_A16
.text:000009E0                 mov     edx, dword ptr ds:_flags
.text:000009E6                 and     edx, 1
.text:000009E9                 jz      short loc_A16
.text:000009EB                 mov     eax, [ebp+arg_4]
.text:000009EE                 push    eax
.text:000009EF                 push    offset $SG85685 ; "%s\n"
.text:000009F4                 call    ___iob_func
.text:000009F9                 add     eax, 40h ; '@'
.text:000009FC                 push    eax             ; FILE *
.text:000009FD                 call    _fprintf
.text:00000A02                 add     esp, 0Ch
.text:00000A05                 call    ___iob_func
.text:00000A0A                 add     eax, 40h ; '@'
.text:00000A0D
.text:00000A0D loc_A0D:                                ; DATA XREF: .data:$SG85733o
.text:00000A0D                                         ; .data:$SG85767o
.text:00000A0D                 push    eax             ; FILE *
.text:00000A0E                 call    _fflush
.text:00000A13                 add     esp, 4
.text:00000A16
.text:00000A16 loc_A16:                                ; CODE XREF: _log_eventlog+1Aj
.text:00000A16                                         ; _log_eventlog+25j
.text:00000A16                 cmp     [ebp+var_4], 0
.text:00000A1A                 jnz     short loc_A1E
.text:00000A1C                 jmp     short loc_A53
.text:00000A1E ; ---------------------------------------------------------------------------
.text:00000A1E
.text:00000A1E loc_A1E:                                ; CODE XREF: _log_eventlog+56j
.text:00000A1E                 mov     ecx, [ebp+var_4]
.text:00000A21                 cmp     dword ptr [ecx+20h], 3
.text:00000A25                 jz      short loc_A32
.text:00000A27                 mov     edx, [ebp+var_4]
.text:00000A2A                 cmp     dword ptr [edx+20h], 4
.text:00000A2E                 jz      short loc_A32
.text:00000A30                 jmp     short loc_A53
.text:00000A32 ; ---------------------------------------------------------------------------
.text:00000A32
.text:00000A32 loc_A32:                                ; CODE XREF: _log_eventlog+61j
.text:00000A32                                         ; _log_eventlog+6Aj
.text:00000A32                 mov     eax, [ebp+arg_4]
.text:00000A35                 push    eax
.text:00000A36                 push    offset $SG85688 ; "Event Log: %s\r\n"
.text:00000A3B                 mov     ecx, [ebp+var_4]
.text:00000A3E                 push    ecx
.text:00000A3F                 call    _logprintf
.text:00000A44                 add     esp, 0Ch
.text:00000A47                 mov     edx, [ebp+var_4]
.text:00000A4A                 push    edx
.text:00000A4B                 call    _logflush
.text:00000A50                 add     esp, 4
.text:00000A53
.text:00000A53 loc_A53:                                ; CODE XREF: _log_eventlog+58j
.text:00000A53                                         ; _log_eventlog+6Cj
.text:00000A53                 add     esp, 4
.text:00000A56                 cmp     ebp, esp
.text:00000A58                 call    __RTC_CheckEsp
.text:00000A5D                 mov     esp, ebp
.text:00000A5F                 pop     ebp
.text:00000A60                 retn
.text:00000A60 _log_eventlog   endp
.text:00000A60
.text:00000A60 ; ---------------------------------------------------------------------------
.text:00000A61                 align 4
.text:00000A64
.text:00000A64 ; =============== S U B R O U T I N E =======================================
.text:00000A64
.text:00000A64 ; Attributes: bp-based frame
.text:00000A64
.text:00000A64                 public _log_packet
.text:00000A64 _log_packet     proc near
.text:00000A64
.text:00000A64 var_1F4         = dword ptr -1F4h
.text:00000A64 var_1F0         = dword ptr -1F0h
.text:00000A64 var_1EC         = dword ptr -1ECh
.text:00000A64 var_1E8         = dword ptr -1E8h
.text:00000A64 var_1E4         = dword ptr -1E4h
.text:00000A64 var_1E0         = byte ptr -1E0h
.text:00000A64 var_1BC         = dword ptr -1BCh
.text:00000A64 var_1B8         = dword ptr -1B8h
.text:00000A64 var_1B0         = tm ptr -1B0h
.text:00000A64 var_184         = byte ptr -184h
.text:00000A64 var_80          = dword ptr -80h
.text:00000A64 var_7C          = dword ptr -7Ch
.text:00000A64 var_78          = dword ptr -78h
.text:00000A64 var_74          = dword ptr -74h
.text:00000A64 var_6C          = byte ptr -6Ch
.text:00000A64 var_6B          = byte ptr -6Bh
.text:00000A64 var_5C          = byte ptr -5Ch
.text:00000A64 var_50          = byte ptr -50h
.text:00000A64 var_4F          = byte ptr -4Fh
.text:00000A64 var_1F          = byte ptr -1Fh
.text:00000A64 var_8           = dword ptr -8
.text:00000A64 var_4           = dword ptr -4
.text:00000A64 arg_0           = dword ptr  8
.text:00000A64 arg_4           = dword ptr  0Ch
.text:00000A64 arg_8           = dword ptr  10h
.text:00000A64 arg_C           = dword ptr  14h
.text:00000A64 arg_10          = dword ptr  18h
.text:00000A64 arg_14          = dword ptr  1Ch
.text:00000A64 arg_18          = dword ptr  20h
.text:00000A64 arg_1C          = dword ptr  24h
.text:00000A64 arg_20          = dword ptr  28h
.text:00000A64 arg_24          = dword ptr  2Ch
.text:00000A64 arg_28          = dword ptr  30h
.text:00000A64
.text:00000A64                 push    ebp
.text:00000A65                 mov     ebp, esp
.text:00000A67                 sub     esp, 1F4h
.text:00000A6D                 push    esi
.text:00000A6E                 push    edi
.text:00000A6F                 lea     edi, [ebp+var_1F4]
.text:00000A75                 mov     ecx, 7Dh ; '}'
.text:00000A7A                 mov     eax, 0CCCCCCCCh
.text:00000A7F                 rep stosd
.text:00000A81                 mov     eax, dword ptr ds:___security_cookie
.text:00000A86                 xor     eax, ebp
.text:00000A88                 mov     [ebp+var_4], eax
.text:00000A8B                 mov     eax, [ebp+arg_0]
.text:00000A8E                 mov     [ebp+var_8], eax
.text:00000A91                 mov     [ebp+var_74], 0
.text:00000A98                 mov     [ebp+var_78], 0
.text:00000A9F                 mov     [ebp+var_7C], 0
.text:00000AA6                 mov     [ebp+var_80], 0
.text:00000AAD                 mov     ecx, [ebp+var_8]
.text:00000AB0                 cmp     dword ptr [ecx+20h], 4
.text:00000AB4                 jz      short loc_ACA
.text:00000AB6                 mov     edx, [ebp+var_8]
.text:00000AB9                 cmp     dword ptr [edx+20h], 3
.text:00000ABD                 jnz     short loc_AC5
.text:00000ABF                 cmp     [ebp+arg_C], 0
.text:00000AC3                 jnz     short loc_ACA
.text:00000AC5
.text:00000AC5 loc_AC5:                                ; CODE XREF: _log_packet+59j
.text:00000AC5                 jmp     loc_EC3
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACA
.text:00000ACA loc_ACA:                                ; CODE XREF: _log_packet+50j
.text:00000ACA                                         ; _log_packet+5Fj
.text:00000ACA                 cmp     [ebp+arg_C], 0
.text:00000ACE                 jz      loc_B8B
.text:00000AD4                 cmp     [ebp+arg_4], 0
.text:00000AD8                 jnz     short loc_AE6
.text:00000ADA                 mov     [ebp+var_1E4], offset $SG85723 ; "Incoming"
.text:00000AE4                 jmp     short loc_AF0
.text:00000AE6 ; ---------------------------------------------------------------------------
.text:00000AE6
.text:00000AE6 loc_AE6:                                ; CODE XREF: _log_packet+74j
.text:00000AE6                 mov     [ebp+var_1E4], offset $SG85724 ; "Outgoing"
.text:00000AF0
.text:00000AF0 loc_AF0:                                ; CODE XREF: _log_packet+80j
.text:00000AF0                 mov     eax, [ebp+var_1E4]
.text:00000AF6                 push    eax
.text:00000AF7                 push    offset $SG85725 ; "%s packet "
.text:00000AFC                 mov     ecx, [ebp+var_8]
.text:00000AFF                 push    ecx
.text:00000B00                 call    _logprintf
.text:00000B05                 add     esp, 0Ch
.text:00000B08                 cmp     [ebp+arg_20], 0
.text:00000B0C                 jz      short loc_B25
.text:00000B0E                 mov     edx, [ebp+arg_20]
.text:00000B11                 mov     eax, [edx]
.text:00000B13                 push    eax
.text:00000B14                 push    offset $SG85727 ; "#0x%lx, "
.text:00000B19                 mov     ecx, [ebp+var_8]
.text:00000B1C                 push    ecx
.text:00000B1D                 call    _logprintf
.text:00000B22                 add     esp, 0Ch
.text:00000B25
.text:00000B25 loc_B25:                                ; CODE XREF: _log_packet+A8j
.text:00000B25                 mov     edx, [ebp+arg_C]
.text:00000B28                 push    edx
.text:00000B29                 mov     eax, [ebp+arg_8]
.text:00000B2C                 push    eax
.text:00000B2D                 mov     ecx, [ebp+arg_8]
.text:00000B30                 push    ecx
.text:00000B31                 push    offset $SG85728 ; "type %d / 0x%02x (%s)"
.text:00000B36                 mov     edx, [ebp+var_8]
.text:00000B39                 push    edx
.text:00000B3A                 call    _logprintf
.text:00000B3F                 add     esp, 14h
.text:00000B42                 cmp     [ebp+arg_24], 0
.text:00000B46                 jz      short loc_B78
.text:00000B48                 mov     eax, [ebp+arg_24]
.text:00000B4B                 push    eax
.text:00000B4C                 push    offset $SG85730 ; " on behalf of downstream #%u"
.text:00000B51                 mov     ecx, [ebp+var_8]
.text:00000B54                 push    ecx
.text:00000B55                 call    _logprintf
.text:00000B5A                 add     esp, 0Ch
.text:00000B5D                 cmp     [ebp+arg_28], 0
.text:00000B61                 jz      short loc_B78
.text:00000B63                 mov     edx, [ebp+arg_28]
.text:00000B66                 push    edx
.text:00000B67                 push    offset $SG85732 ; " (%s)"
.text:00000B6C                 mov     eax, [ebp+var_8]
.text:00000B6F                 push    eax
.text:00000B70                 call    _logprintf
.text:00000B75                 add     esp, 0Ch
.text:00000B78
.text:00000B78 loc_B78:                                ; CODE XREF: _log_packet+E2j
.text:00000B78                                         ; _log_packet+FDj
.text:00000B78                 push    offset $SG85733
.text:00000B7D                 mov     ecx, [ebp+var_8]
.text:00000B80                 push    ecx
.text:00000B81                 call    _logprintf
.text:00000B86                 add     esp, 8
.text:00000B89                 jmp     short loc_C01
.text:00000B8B ; ---------------------------------------------------------------------------
.text:00000B8B
.text:00000B8B loc_B8B:                                ; CODE XREF: _log_packet+6Aj
.text:00000B8B                 lea     edx, [ebp+var_1E0]
.text:00000B91                 push    edx
.text:00000B92                 call    _ltime
.text:00000B97                 add     esp, 4
.text:00000B9A                 mov     ecx, 9
.text:00000B9F                 mov     esi, eax
.text:00000BA1                 lea     edi, [ebp+var_1B0]
.text:00000BA7                 rep movsd
.text:00000BA9                 lea     eax, [ebp+var_1B0]
.text:00000BAF                 push    eax             ; struct tm *
.text:00000BB0                 push    offset $SG85737 ; "%Y-%m-%d %H:%M:%S"
.text:00000BB5                 push    18h             ; size_t
.text:00000BB7                 lea     ecx, [ebp+var_184]
.text:00000BBD                 push    ecx             ; char *
.text:00000BBE                 call    _strftime
.text:00000BC3                 add     esp, 10h
.text:00000BC6                 cmp     [ebp+arg_4], 0
.text:00000BCA                 jnz     short loc_BD8
.text:00000BCC                 mov     [ebp+var_1E8], offset $SG85738 ; "Incoming"
.text:00000BD6                 jmp     short loc_BE2
.text:00000BD8 ; ---------------------------------------------------------------------------
.text:00000BD8
.text:00000BD8 loc_BD8:                                ; CODE XREF: _log_packet+166j
.text:00000BD8                 mov     [ebp+var_1E8], offset $SG85739 ; "Outgoing"
.text:00000BE2
.text:00000BE2 loc_BE2:                                ; CODE XREF: _log_packet+172j
.text:00000BE2                 lea     edx, [ebp+var_184]
.text:00000BE8                 push    edx
.text:00000BE9                 mov     eax, [ebp+var_1E8]
.text:00000BEF                 push    eax
.text:00000BF0                 push    offset $SG85740 ; "%s raw data at %s\r\n"
.text:00000BF5                 mov     ecx, [ebp+var_8]
.text:00000BF8                 push    ecx
.text:00000BF9                 call    _logprintf
.text:00000BFE                 add     esp, 10h
.text:00000C01
.text:00000C01 loc_C01:                                ; CODE XREF: _log_packet+125j
.text:00000C01                                         ; _log_packet:loc_E74j
.text:00000C01                 mov     edx, [ebp+var_74]
.text:00000C04                 cmp     edx, [ebp+arg_14]
.text:00000C07                 jge     loc_E79
.text:00000C0D
.text:00000C0D loc_C0D:                                ; CODE XREF: _log_packet+1D8j
.text:00000C0D                 mov     eax, [ebp+var_78]
.text:00000C10                 cmp     eax, [ebp+arg_18]
.text:00000C13                 jge     short loc_C3E
.text:00000C15                 mov     ecx, [ebp+var_78]
.text:00000C18                 imul    ecx, 0Ch
.text:00000C1B                 mov     edx, [ebp+var_78]
.text:00000C1E                 imul    edx, 0Ch
.text:00000C21                 mov     eax, [ebp+arg_1C]
.text:00000C24                 mov     ecx, [eax+ecx]
.text:00000C27                 mov     eax, [ebp+arg_1C]
.text:00000C2A                 add     ecx, [eax+edx+4]
.text:00000C2E                 cmp     [ebp+var_74], ecx
.text:00000C31                 jl      short loc_C3E
.text:00000C33                 mov     ecx, [ebp+var_78]
.text:00000C36                 add     ecx, 1
.text:00000C39                 mov     [ebp+var_78], ecx
.text:00000C3C                 jmp     short loc_C0D
.text:00000C3E ; ---------------------------------------------------------------------------
.text:00000C3E
.text:00000C3E loc_C3E:                                ; CODE XREF: _log_packet+1AFj
.text:00000C3E                                         ; _log_packet+1CDj
.text:00000C3E                 mov     [ebp+var_1B8], 0
.text:00000C48                 mov     edx, [ebp+var_78]
.text:00000C4B                 cmp     edx, [ebp+arg_18]
.text:00000C4E                 jge     short loc_C92
.text:00000C50                 mov     eax, [ebp+var_78]
.text:00000C53                 imul    eax, 0Ch
.text:00000C56                 mov     ecx, [ebp+arg_1C]
.text:00000C59                 mov     edx, [ebp+var_74]
.text:00000C5C                 cmp     edx, [ecx+eax]
.text:00000C5F                 jl      short loc_C92
.text:00000C61                 mov     eax, [ebp+var_78]
.text:00000C64                 imul    eax, 0Ch
.text:00000C67                 mov     ecx, [ebp+var_78]
.text:00000C6A                 imul    ecx, 0Ch
.text:00000C6D                 mov     edx, [ebp+arg_1C]
.text:00000C70                 mov     eax, [edx+eax]
.text:00000C73                 mov     edx, [ebp+arg_1C]
.text:00000C76                 add     eax, [edx+ecx+4]
.text:00000C7A                 cmp     [ebp+var_74], eax
.text:00000C7D                 jge     short loc_C92
.text:00000C7F                 mov     eax, [ebp+var_78]
.text:00000C82                 imul    eax, 0Ch
.text:00000C85                 mov     ecx, [ebp+arg_1C]
.text:00000C88                 mov     edx, [ecx+eax+8]
.text:00000C8C                 mov     [ebp+var_1B8], edx
.text:00000C92
.text:00000C92 loc_C92:                                ; CODE XREF: _log_packet+1EAj
.text:00000C92                                         ; _log_packet+1FBj ...
.text:00000C92                 cmp     [ebp+var_1B8], 2
.text:00000C99                 jz      short loc_CE0
.text:00000C9B                 cmp     [ebp+var_7C], 0
.text:00000C9F                 jz      short loc_CE0
.text:00000CA1                 cmp     [ebp+var_7C], 1
.text:00000CA5                 jnz     short loc_CB3
.text:00000CA7                 mov     [ebp+var_1EC], offset $SG85750
.text:00000CB1                 jmp     short loc_CBD
.text:00000CB3 ; ---------------------------------------------------------------------------
.text:00000CB3
.text:00000CB3 loc_CB3:                                ; CODE XREF: _log_packet+241j
.text:00000CB3                 mov     [ebp+var_1EC], offset $SG85751
.text:00000CBD
.text:00000CBD loc_CBD:                                ; CODE XREF: _log_packet+24Dj
.text:00000CBD                 mov     eax, [ebp+var_1EC]
.text:00000CC3                 push    eax
.text:00000CC4                 mov     ecx, [ebp+var_7C]
.text:00000CC7                 push    ecx
.text:00000CC8                 push    offset $SG85752 ; "  (%d byte%s omitted)\r\n"
.text:00000CCD                 mov     edx, [ebp+var_8]
.text:00000CD0                 push    edx
.text:00000CD1                 call    _logprintf
.text:00000CD6                 add     esp, 10h
.text:00000CD9                 mov     [ebp+var_7C], 0
.text:00000CE0
.text:00000CE0 loc_CE0:                                ; CODE XREF: _log_packet+235j
.text:00000CE0                                         ; _log_packet+23Bj
.text:00000CE0                 cmp     [ebp+var_80], 0
.text:00000CE4                 jnz     short loc_D19
.text:00000CE6                 cmp     [ebp+var_7C], 0
.text:00000CEA                 jnz     short loc_D19
.text:00000CEC                 push    offset $SG85754
.text:00000CF1                 push    43h ; 'C'
.text:00000CF3                 mov     eax, [ebp+var_74]
.text:00000CF6                 and     eax, 8000000Fh
.text:00000CFB                 jns     short loc_D02
.text:00000CFD                 dec     eax
.text:00000CFE                 or      eax, 0FFFFFFF0h
.text:00000D01                 inc     eax
.text:00000D02
.text:00000D02 loc_D02:                                ; CODE XREF: _log_packet+297j
.text:00000D02                 mov     ecx, [ebp+var_74]
.text:00000D05                 sub     ecx, eax
.text:00000D07                 push    ecx
.text:00000D08                 push    offset $SG85755 ; "  %08x%*s\r\n"
.text:00000D0D                 lea     edx, [ebp+var_5C]
.text:00000D10                 push    edx             ; char *
.text:00000D11                 call    _sprintf
.text:00000D16                 add     esp, 14h
.text:00000D19
.text:00000D19 loc_D19:                                ; CODE XREF: _log_packet+280j
.text:00000D19                                         ; _log_packet+286j
.text:00000D19                 cmp     [ebp+var_1B8], 2
.text:00000D20                 jnz     short loc_D30
.text:00000D22                 mov     eax, [ebp+var_7C]
.text:00000D25                 add     eax, 1
.text:00000D28                 mov     [ebp+var_7C], eax
.text:00000D2B                 jmp     loc_E0A
.text:00000D30 ; ---------------------------------------------------------------------------
.text:00000D30
.text:00000D30 loc_D30:                                ; CODE XREF: _log_packet+2BCj
.text:00000D30                 cmp     [ebp+var_1B8], 1
.text:00000D37                 jnz     short loc_D56
.text:00000D39                 mov     [ebp+var_1BC], 58h ; 'X'
.text:00000D43                 push    offset $SG85760 ; "XX"
.text:00000D48                 lea     ecx, [ebp+var_6C]
.text:00000D4B                 push    ecx             ; char *
.text:00000D4C                 call    _sprintf
.text:00000D51                 add     esp, 8
.text:00000D54                 jmp     short loc_D7D
.text:00000D56 ; ---------------------------------------------------------------------------
.text:00000D56
.text:00000D56 loc_D56:                                ; CODE XREF: _log_packet+2D3j
.text:00000D56                 mov     edx, [ebp+arg_10]
.text:00000D59                 add     edx, [ebp+var_74]
.text:00000D5C                 movzx   eax, byte ptr [edx]
.text:00000D5F                 mov     [ebp+var_1BC], eax
.text:00000D65                 mov     ecx, [ebp+var_1BC]
.text:00000D6B                 push    ecx
.text:00000D6C                 push    offset $SG85763 ; "%02x"
.text:00000D71                 lea     edx, [ebp+var_6C]
.text:00000D74                 push    edx             ; char *
.text:00000D75                 call    _sprintf
.text:00000D7A                 add     esp, 0Ch
.text:00000D7D
.text:00000D7D loc_D7D:                                ; CODE XREF: _log_packet+2F0j
.text:00000D7D                 mov     eax, [ebp+var_74]
.text:00000D80                 and     eax, 8000000Fh
.text:00000D85                 jns     short loc_D8C
.text:00000D87                 dec     eax
.text:00000D88                 or      eax, 0FFFFFFF0h
.text:00000D8B                 inc     eax
.text:00000D8C
.text:00000D8C loc_D8C:                                ; CODE XREF: _log_packet+321j
.text:00000D8C                 imul    eax, 3
.text:00000D8F                 mov     cl, [ebp+var_6C]
.text:00000D92                 mov     [ebp+eax+var_50], cl
.text:00000D96                 mov     edx, [ebp+var_74]
.text:00000D99                 and     edx, 8000000Fh
.text:00000D9F                 jns     short loc_DA6
.text:00000DA1                 dec     edx
.text:00000DA2                 or      edx, 0FFFFFFF0h
.text:00000DA5                 inc     edx
.text:00000DA6
.text:00000DA6 loc_DA6:                                ; CODE XREF: _log_packet+33Bj
.text:00000DA6                 imul    edx, 3
.text:00000DA9                 mov     al, [ebp+var_6B]
.text:00000DAC                 mov     [ebp+edx+var_4F], al
.text:00000DB0                 mov     ecx, [ebp+var_1BC]
.text:00000DB6                 push    ecx             ; int
.text:00000DB7                 call    _isprint
.text:00000DBC                 add     esp, 4
.text:00000DBF                 test    eax, eax
.text:00000DC1                 jz      short loc_DD1
.text:00000DC3                 mov     edx, [ebp+var_1BC]
.text:00000DC9                 mov     [ebp+var_1F0], edx
.text:00000DCF                 jmp     short loc_DDB
.text:00000DD1 ; ---------------------------------------------------------------------------
.text:00000DD1
.text:00000DD1 loc_DD1:                                ; CODE XREF: _log_packet+35Dj
.text:00000DD1                 mov     [ebp+var_1F0], 2Eh ; '.'
.text:00000DDB
.text:00000DDB loc_DDB:                                ; CODE XREF: _log_packet+36Bj
.text:00000DDB                 mov     eax, [ebp+var_74]
.text:00000DDE                 and     eax, 8000000Fh
.text:00000DE3                 jns     short loc_DEA
.text:00000DE5                 dec     eax
.text:00000DE6                 or      eax, 0FFFFFFF0h
.text:00000DE9                 inc     eax
.text:00000DEA
.text:00000DEA loc_DEA:                                ; CODE XREF: _log_packet+37Fj
.text:00000DEA                 mov     cl, byte ptr [ebp+var_1F0]
.text:00000DF0                 mov     [ebp+eax+var_1F], cl
.text:00000DF4                 mov     edx, [ebp+var_74]
.text:00000DF7                 and     edx, 8000000Fh
.text:00000DFD                 jns     short loc_E04
.text:00000DFF                 dec     edx
.text:00000E00                 or      edx, 0FFFFFFF0h
.text:00000E03                 inc     edx
.text:00000E04
.text:00000E04 loc_E04:                                ; CODE XREF: _log_packet+399j
.text:00000E04                 add     edx, 1
.text:00000E07                 mov     [ebp+var_80], edx
.text:00000E0A
.text:00000E0A loc_E0A:                                ; CODE XREF: _log_packet+2C7j
.text:00000E0A                 mov     eax, [ebp+var_74]
.text:00000E0D                 add     eax, 1
.text:00000E10                 mov     [ebp+var_74], eax
.text:00000E13                 mov     ecx, [ebp+var_74]
.text:00000E16                 and     ecx, 8000000Fh
.text:00000E1C                 jns     short loc_E23
.text:00000E1E                 dec     ecx
.text:00000E1F                 or      ecx, 0FFFFFFF0h
.text:00000E22                 inc     ecx
.text:00000E23
.text:00000E23 loc_E23:                                ; CODE XREF: _log_packet+3B8j
.text:00000E23                 test    ecx, ecx
.text:00000E25                 jz      short loc_E35
.text:00000E27                 mov     edx, [ebp+var_74]
.text:00000E2A                 cmp     edx, [ebp+arg_14]
.text:00000E2D                 jz      short loc_E35
.text:00000E2F                 cmp     [ebp+var_7C], 0
.text:00000E33                 jz      short loc_E74
.text:00000E35
.text:00000E35 loc_E35:                                ; CODE XREF: _log_packet+3C1j
.text:00000E35                                         ; _log_packet+3C9j
.text:00000E35                 cmp     [ebp+var_80], 0
.text:00000E39                 jz      short loc_E74
.text:00000E3B                 push    offset $SG85767 ; char *
.text:00000E40                 mov     eax, [ebp+var_80]
.text:00000E43                 lea     ecx, [ebp+eax+var_1F]
.text:00000E47                 push    ecx             ; char *
.text:00000E48                 call    _strcpy
.text:00000E4D                 add     esp, 8
.text:00000E50                 lea     edx, [ebp+var_5C]
.text:00000E53                 push    edx             ; char *
.text:00000E54                 call    _strlen
.text:00000E59                 add     esp, 4
.text:00000E5C                 push    eax             ; size_t
.text:00000E5D                 lea     eax, [ebp+var_5C]
.text:00000E60                 push    eax             ; void *
.text:00000E61                 mov     ecx, [ebp+var_8]
.text:00000E64                 push    ecx             ; int
.text:00000E65                 call    _logwrite
.text:00000E6A                 add     esp, 0Ch
.text:00000E6D                 mov     [ebp+var_80], 0
.text:00000E74
.text:00000E74 loc_E74:                                ; CODE XREF: _log_packet+3CFj
.text:00000E74                                         ; _log_packet+3D5j
.text:00000E74                 jmp     loc_C01
.text:00000E79 ; ---------------------------------------------------------------------------
.text:00000E79
.text:00000E79 loc_E79:                                ; CODE XREF: _log_packet+1A3j
.text:00000E79                 cmp     [ebp+var_7C], 0
.text:00000E7D                 jz      short loc_EB7
.text:00000E7F                 cmp     [ebp+var_7C], 1
.text:00000E83                 jnz     short loc_E91
.text:00000E85                 mov     [ebp+var_1F4], offset $SG85769
.text:00000E8F                 jmp     short loc_E9B
.text:00000E91 ; ---------------------------------------------------------------------------
.text:00000E91
.text:00000E91 loc_E91:                                ; CODE XREF: _log_packet+41Fj
.text:00000E91                 mov     [ebp+var_1F4], offset $SG85770
.text:00000E9B
.text:00000E9B loc_E9B:                                ; CODE XREF: _log_packet+42Bj
.text:00000E9B                 mov     edx, [ebp+var_1F4]
.text:00000EA1                 push    edx
.text:00000EA2                 mov     eax, [ebp+var_7C]
.text:00000EA5                 push    eax
.text:00000EA6                 push    offset $SG85771 ; "  (%d byte%s omitted)\r\n"
.text:00000EAB                 mov     ecx, [ebp+var_8]
.text:00000EAE                 push    ecx
.text:00000EAF                 call    _logprintf
.text:00000EB4                 add     esp, 10h
.text:00000EB7
.text:00000EB7 loc_EB7:                                ; CODE XREF: _log_packet+419j
.text:00000EB7                 mov     edx, [ebp+var_8]
.text:00000EBA                 push    edx
.text:00000EBB                 call    _logflush
.text:00000EC0                 add     esp, 4
.text:00000EC3
.text:00000EC3 loc_EC3:                                ; CODE XREF: _log_packet:loc_AC5j
.text:00000EC3                 push    edx
.text:00000EC4                 mov     ecx, ebp
.text:00000EC6                 push    eax
.text:00000EC7                 lea     edx, $LN40
.text:00000ECD                 call    @_RTC_CheckStackVars@8
.text:00000ED2                 pop     eax
.text:00000ED3                 pop     edx
.text:00000ED4                 pop     edi
.text:00000ED5                 pop     esi
.text:00000ED6                 mov     ecx, [ebp+var_4]
.text:00000ED9                 xor     ecx, ebp
.text:00000EDB                 call    @__security_check_cookie@4
.text:00000EE0                 add     esp, 1F4h
.text:00000EE6                 cmp     ebp, esp
.text:00000EE8                 call    __RTC_CheckEsp
.text:00000EED                 mov     esp, ebp
.text:00000EEF                 pop     ebp
.text:00000EF0                 retn
.text:00000EF0 _log_packet     endp
.text:00000EF0
.text:00000EF0 ; ---------------------------------------------------------------------------
.text:00000EF1                 align 4
.text:00000EF4 $LN40           dd 4                    ; DATA XREF: _log_packet+463o
.text:00000EF8                 dd offset $LN39
.text:00000EFC $LN39           dd 0FFFFFFA4h, 50h      ; DATA XREF: .text:00000EF8o
.text:00000F04                 dd offset $LN35         ; "dumpdata"
.text:00000F08                 dd 0FFFFFF94h, 5
.text:00000F10                 dd offset $LN36         ; "smalldata"
.text:00000F14                 dd 0FFFFFE7Ch, 100h
.text:00000F1C                 dd offset $LN37
.text:00000F20                 dd 0FFFFFE50h, 24h
.text:00000F28                 dd offset $LN38
.text:00000F2C $LN38           db 74h, 6Dh, 0          ; DATA XREF: .text:00000F28o
.text:00000F2F $LN37           db 62h                  ; DATA XREF: .text:00000F1Co
.text:00000F30                 db 75h, 66h, 0
.text:00000F33 $LN36           db 'smalldata',0        ; DATA XREF: .text:00000F10o
.text:00000F3D $LN35           db 'dumpdata',0         ; DATA XREF: .text:00000F04o
.text:00000F46                 db 0Eh dup(0CCh)
.text:00000F54
.text:00000F54 ; =============== S U B R O U T I N E =======================================
.text:00000F54
.text:00000F54 ; Attributes: bp-based frame
.text:00000F54
.text:00000F54                 public _log_init
.text:00000F54 _log_init       proc near
.text:00000F54
.text:00000F54 var_4           = dword ptr -4
.text:00000F54 arg_0           = dword ptr  8
.text:00000F54 arg_4           = dword ptr  0Ch
.text:00000F54
.text:00000F54                 push    ebp
.text:00000F55                 mov     ebp, esp
.text:00000F57                 push    ecx
.text:00000F58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F5F                 push    24h ; '$'
.text:00000F61                 push    1
.text:00000F63                 call    _safemalloc
.text:00000F68                 add     esp, 8
.text:00000F6B                 mov     [ebp+var_4], eax
.text:00000F6E                 mov     eax, [ebp+var_4]
.text:00000F71                 mov     dword ptr [eax], 0
.text:00000F77                 mov     ecx, [ebp+var_4]
.text:00000F7A                 mov     dword ptr [ecx+4], 0
.text:00000F81                 mov     edx, [ebp+var_4]
.text:00000F84                 mov     eax, [ebp+arg_0]
.text:00000F87                 mov     [edx+18h], eax
.text:00000F8A                 mov     ecx, [ebp+arg_4]
.text:00000F8D                 push    ecx
.text:00000F8E                 call    _conf_copy
.text:00000F93                 add     esp, 4
.text:00000F96                 mov     edx, [ebp+var_4]
.text:00000F99                 mov     [edx+1Ch], eax
.text:00000F9C                 push    73h ; 's'
.text:00000F9E                 mov     eax, [ebp+var_4]
.text:00000FA1                 mov     ecx, [eax+1Ch]
.text:00000FA4                 push    ecx
.text:00000FA5                 call    _conf_get_int
.text:00000FAA                 add     esp, 8
.text:00000FAD                 mov     edx, [ebp+var_4]
.text:00000FB0                 mov     [edx+20h], eax
.text:00000FB3                 mov     eax, [ebp+var_4]
.text:00000FB6                 mov     dword ptr [eax+14h], 0
.text:00000FBD                 mov     ecx, [ebp+var_4]
.text:00000FC0                 add     ecx, 8
.text:00000FC3                 push    ecx
.text:00000FC4                 call    _bufchain_init
.text:00000FC9                 add     esp, 4
.text:00000FCC                 mov     eax, [ebp+var_4]
.text:00000FCF                 add     esp, 4
.text:00000FD2                 cmp     ebp, esp
.text:00000FD4                 call    __RTC_CheckEsp
.text:00000FD9                 mov     esp, ebp
.text:00000FDB                 pop     ebp
.text:00000FDC                 retn
.text:00000FDC _log_init       endp
.text:00000FDC
.text:00000FDC ; ---------------------------------------------------------------------------
.text:00000FDD                 db 7 dup(0CCh)
.text:00000FE4
.text:00000FE4 ; =============== S U B R O U T I N E =======================================
.text:00000FE4
.text:00000FE4 ; Attributes: bp-based frame
.text:00000FE4
.text:00000FE4                 public _log_free
.text:00000FE4 _log_free       proc near
.text:00000FE4
.text:00000FE4 var_4           = dword ptr -4
.text:00000FE4 arg_0           = dword ptr  8
.text:00000FE4
.text:00000FE4                 push    ebp
.text:00000FE5                 mov     ebp, esp
.text:00000FE7                 push    ecx
.text:00000FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FEF                 mov     eax, [ebp+arg_0]
.text:00000FF2                 mov     [ebp+var_4], eax
.text:00000FF5                 mov     ecx, [ebp+var_4]
.text:00000FF8                 push    ecx
.text:00000FF9                 call    _logfclose
.text:00000FFE                 add     esp, 4
.text:00001001                 mov     edx, [ebp+var_4]
.text:00001004                 add     edx, 8
.text:00001007                 push    edx
.text:00001008                 call    _bufchain_clear
.text:0000100D                 add     esp, 4
.text:00001010                 mov     eax, [ebp+var_4]
.text:00001013                 cmp     dword ptr [eax+14h], 0
.text:00001017                 jz      short loc_1028
.text:00001019                 mov     ecx, [ebp+var_4]
.text:0000101C                 mov     edx, [ecx+14h]
.text:0000101F                 push    edx
.text:00001020                 call    _filename_free
.text:00001025                 add     esp, 4
.text:00001028
.text:00001028 loc_1028:                               ; CODE XREF: _log_free+33j
.text:00001028                 mov     eax, [ebp+var_4]
.text:0000102B                 mov     ecx, [eax+1Ch]
.text:0000102E                 push    ecx
.text:0000102F                 call    _conf_free
.text:00001034                 add     esp, 4
.text:00001037                 mov     edx, [ebp+var_4]
.text:0000103A                 push    edx
.text:0000103B                 call    _safefree
.text:00001040                 add     esp, 4
.text:00001043                 add     esp, 4
.text:00001046                 cmp     ebp, esp
.text:00001048                 call    __RTC_CheckEsp
.text:0000104D                 mov     esp, ebp
.text:0000104F                 pop     ebp
.text:00001050                 retn
.text:00001050 _log_free       endp
.text:00001050
.text:00001050 ; ---------------------------------------------------------------------------
.text:00001051                 align 4
.text:00001054
.text:00001054 ; =============== S U B R O U T I N E =======================================
.text:00001054
.text:00001054 ; Attributes: bp-based frame
.text:00001054
.text:00001054                 public _log_reconfig
.text:00001054 _log_reconfig   proc near
.text:00001054
.text:00001054 var_8           = dword ptr -8
.text:00001054 var_4           = dword ptr -4
.text:00001054 arg_0           = dword ptr  8
.text:00001054 arg_4           = dword ptr  0Ch
.text:00001054
.text:00001054                 push    ebp
.text:00001055                 mov     ebp, esp
.text:00001057                 sub     esp, 8
.text:0000105A                 push    esi
.text:0000105B                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001062                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001069                 mov     eax, [ebp+arg_0]
.text:0000106C                 mov     [ebp+var_4], eax
.text:0000106F                 push    72h ; 'r'
.text:00001071                 mov     ecx, [ebp+arg_4]
.text:00001074                 push    ecx
.text:00001075                 call    _conf_get_filename
.text:0000107A                 add     esp, 8
.text:0000107D                 push    eax
.text:0000107E                 push    72h ; 'r'
.text:00001080                 mov     edx, [ebp+var_4]
.text:00001083                 mov     eax, [edx+1Ch]
.text:00001086                 push    eax
.text:00001087                 call    _conf_get_filename
.text:0000108C                 add     esp, 8
.text:0000108F                 push    eax
.text:00001090                 call    _filename_equal
.text:00001095                 add     esp, 8
.text:00001098                 test    eax, eax
.text:0000109A                 jz      short loc_10C1
.text:0000109C                 push    73h ; 's'
.text:0000109E                 mov     ecx, [ebp+var_4]
.text:000010A1                 mov     edx, [ecx+1Ch]
.text:000010A4                 push    edx
.text:000010A5                 call    _conf_get_int
.text:000010AA                 add     esp, 8
.text:000010AD                 mov     esi, eax
.text:000010AF                 push    73h ; 's'
.text:000010B1                 mov     eax, [ebp+arg_4]
.text:000010B4                 push    eax
.text:000010B5                 call    _conf_get_int
.text:000010BA                 add     esp, 8
.text:000010BD                 cmp     esi, eax
.text:000010BF                 jz      short loc_10CA
.text:000010C1
.text:000010C1 loc_10C1:                               ; CODE XREF: _log_reconfig+46j
.text:000010C1                 mov     [ebp+var_8], 1
.text:000010C8                 jmp     short loc_10D1
.text:000010CA ; ---------------------------------------------------------------------------
.text:000010CA
.text:000010CA loc_10CA:                               ; CODE XREF: _log_reconfig+6Bj
.text:000010CA                 mov     [ebp+var_8], 0
.text:000010D1
.text:000010D1 loc_10D1:                               ; CODE XREF: _log_reconfig+74j
.text:000010D1                 cmp     [ebp+var_8], 0
.text:000010D5                 jz      short loc_10E3
.text:000010D7                 mov     ecx, [ebp+var_4]
.text:000010DA                 push    ecx
.text:000010DB                 call    _logfclose
.text:000010E0                 add     esp, 4
.text:000010E3
.text:000010E3 loc_10E3:                               ; CODE XREF: _log_reconfig+81j
.text:000010E3                 mov     edx, [ebp+var_4]
.text:000010E6                 mov     eax, [edx+1Ch]
.text:000010E9                 push    eax
.text:000010EA                 call    _conf_free
.text:000010EF                 add     esp, 4
.text:000010F2                 mov     ecx, [ebp+arg_4]
.text:000010F5                 push    ecx
.text:000010F6                 call    _conf_copy
.text:000010FB                 add     esp, 4
.text:000010FE                 mov     edx, [ebp+var_4]
.text:00001101                 mov     [edx+1Ch], eax
.text:00001104                 push    73h ; 's'
.text:00001106                 mov     eax, [ebp+var_4]
.text:00001109                 mov     ecx, [eax+1Ch]
.text:0000110C                 push    ecx
.text:0000110D                 call    _conf_get_int
.text:00001112                 add     esp, 8
.text:00001115                 mov     edx, [ebp+var_4]
.text:00001118                 mov     [edx+20h], eax
.text:0000111B                 cmp     [ebp+var_8], 0
.text:0000111F                 jz      short loc_112D
.text:00001121                 mov     eax, [ebp+var_4]
.text:00001124                 push    eax
.text:00001125                 call    _logfopen
.text:0000112A                 add     esp, 4
.text:0000112D
.text:0000112D loc_112D:                               ; CODE XREF: _log_reconfig+CBj
.text:0000112D                 pop     esi
.text:0000112E                 add     esp, 8
.text:00001131                 cmp     ebp, esp
.text:00001133                 call    __RTC_CheckEsp
.text:00001138                 mov     esp, ebp
.text:0000113A                 pop     ebp
.text:0000113B                 retn
.text:0000113B _log_reconfig   endp
.text:0000113B
.text:0000113B ; ---------------------------------------------------------------------------
.text:0000113C                 db 8 dup(0CCh)
.text:00001144
.text:00001144 ; =============== S U B R O U T I N E =======================================
.text:00001144
.text:00001144 ; Attributes: bp-based frame
.text:00001144
.text:00001144 ; int __cdecl xlatlognam(int, int, struct tm *)
.text:00001144 _xlatlognam     proc near               ; CODE XREF: _logfopen+9Bp
.text:00001144
.text:00001144 var_3C          = dword ptr -3Ch
.text:00001144 var_35          = byte ptr -35h
.text:00001144 var_34          = dword ptr -34h
.text:00001144 var_30          = dword ptr -30h
.text:00001144 var_2C          = dword ptr -2Ch
.text:00001144 var_28          = dword ptr -28h
.text:00001144 var_24          = dword ptr -24h
.text:00001144 var_20          = dword ptr -20h
.text:00001144 var_1C          = dword ptr -1Ch
.text:00001144 var_14          = byte ptr -14h
.text:00001144 var_4           = dword ptr -4
.text:00001144 arg_0           = dword ptr  8
.text:00001144 arg_4           = dword ptr  0Ch
.text:00001144 arg_8           = dword ptr  10h
.text:00001144
.text:00001144                 push    ebp
.text:00001145                 mov     ebp, esp
.text:00001147                 sub     esp, 3Ch
.text:0000114A                 push    edi
.text:0000114B                 lea     edi, [ebp+var_3C]
.text:0000114E                 mov     ecx, 0Fh
.text:00001153                 mov     eax, 0CCCCCCCCh
.text:00001158                 rep stosd
.text:0000115A                 mov     eax, dword ptr ds:___security_cookie
.text:0000115F                 xor     eax, ebp
.text:00001161                 mov     [ebp+var_4], eax
.text:00001164                 mov     [ebp+var_2C], 104h
.text:0000116B                 push    1
.text:0000116D                 mov     eax, [ebp+var_2C]
.text:00001170                 push    eax
.text:00001171                 call    _safemalloc
.text:00001176                 add     esp, 8
.text:00001179                 mov     [ebp+var_24], eax
.text:0000117C                 mov     [ebp+var_28], 0
.text:00001183                 mov     ecx, [ebp+arg_0]
.text:00001186                 push    ecx
.text:00001187                 call    _filename_to_str
.text:0000118C                 add     esp, 4
.text:0000118F                 mov     [ebp+var_30], eax
.text:00001192
.text:00001192 loc_1192:                               ; CODE XREF: _xlatlognam+1F9j
.text:00001192                 mov     edx, [ebp+var_30]
.text:00001195                 movsx   eax, byte ptr [edx]
.text:00001198                 test    eax, eax
.text:0000119A                 jz      loc_1342
.text:000011A0                 lea     ecx, [ebp+var_14]
.text:000011A3                 mov     [ebp+var_1C], ecx
.text:000011A6                 mov     edx, [ebp+var_30]
.text:000011A9                 movsx   eax, byte ptr [edx]
.text:000011AC                 cmp     eax, 26h ; '&'
.text:000011AF                 jnz     loc_12CB
.text:000011B5                 mov     ecx, [ebp+var_30]
.text:000011B8                 add     ecx, 1
.text:000011BB                 mov     [ebp+var_30], ecx
.text:000011BE                 mov     [ebp+var_20], 0
.text:000011C5                 mov     edx, [ebp+var_30]
.text:000011C8                 movsx   eax, byte ptr [edx]
.text:000011CB                 test    eax, eax
.text:000011CD                 jz      loc_12C9
.text:000011D3                 mov     ecx, [ebp+var_30]
.text:000011D6                 mov     dl, [ecx]
.text:000011D8                 mov     [ebp+var_35], dl
.text:000011DB                 mov     eax, [ebp+var_30]
.text:000011DE                 add     eax, 1
.text:000011E1                 mov     [ebp+var_30], eax
.text:000011E4                 movzx   ecx, [ebp+var_35]
.text:000011E8                 push    ecx             ; int
.text:000011E9                 call    _tolower
.text:000011EE                 add     esp, 4
.text:000011F1                 mov     [ebp+var_3C], eax
.text:000011F4                 mov     edx, [ebp+var_3C]
.text:000011F7                 sub     edx, 64h ; 'd'
.text:000011FA                 mov     [ebp+var_3C], edx
.text:000011FD                 cmp     [ebp+var_3C], 15h ; switch 22 cases
.text:00001201                 ja      $LN4            ; jumptable 00001211 default case
.text:00001207                 mov     eax, [ebp+var_3C]
.text:0000120A                 movzx   ecx, ds:$LN18[eax]
.text:00001211                 jmp     ds:$LN22[ecx*4] ; switch jump
.text:00001218 ; ---------------------------------------------------------------------------
.text:00001218
.text:00001218 $LN9:                                   ; CODE XREF: _xlatlognam+CDj
.text:00001218                                         ; DATA XREF: .text:$LN22o
.text:00001218                 mov     edx, [ebp+arg_8] ; jumptable 00001211 case 21
.text:0000121B                 push    edx             ; struct tm *
.text:0000121C                 push    offset $SG85830 ; "%Y"
.text:00001221                 push    0Ah             ; size_t
.text:00001223                 lea     eax, [ebp+var_14]
.text:00001226                 push    eax             ; char *
.text:00001227                 call    _strftime
.text:0000122C                 add     esp, 10h
.text:0000122F                 mov     [ebp+var_20], eax
.text:00001232                 jmp     loc_12C9
.text:00001237 ; ---------------------------------------------------------------------------
.text:00001237
.text:00001237 $LN8:                                   ; CODE XREF: _xlatlognam+CDj
.text:00001237                                         ; DATA XREF: .text:$LN22o
.text:00001237                 mov     ecx, [ebp+arg_8] ; jumptable 00001211 case 9
.text:0000123A                 push    ecx             ; struct tm *
.text:0000123B                 push    offset $SG85832 ; "%m"
.text:00001240                 push    0Ah             ; size_t
.text:00001242                 lea     edx, [ebp+var_14]
.text:00001245                 push    edx             ; char *
.text:00001246                 call    _strftime
.text:0000124B                 add     esp, 10h
.text:0000124E                 mov     [ebp+var_20], eax
.text:00001251                 jmp     short loc_12C9
.text:00001253 ; ---------------------------------------------------------------------------
.text:00001253
.text:00001253 $LN7:                                   ; CODE XREF: _xlatlognam+CDj
.text:00001253                                         ; DATA XREF: .text:$LN22o
.text:00001253                 mov     eax, [ebp+arg_8] ; jumptable 00001211 case 0
.text:00001256                 push    eax             ; struct tm *
.text:00001257                 push    offset $SG85834 ; "%d"
.text:0000125C                 push    0Ah             ; size_t
.text:0000125E                 lea     ecx, [ebp+var_14]
.text:00001261                 push    ecx             ; char *
.text:00001262                 call    _strftime
.text:00001267                 add     esp, 10h
.text:0000126A                 mov     [ebp+var_20], eax
.text:0000126D                 jmp     short loc_12C9
.text:0000126F ; ---------------------------------------------------------------------------
.text:0000126F
.text:0000126F $LN6:                                   ; CODE XREF: _xlatlognam+CDj
.text:0000126F                                         ; DATA XREF: .text:$LN22o
.text:0000126F                 mov     edx, [ebp+arg_8] ; jumptable 00001211 case 16
.text:00001272                 push    edx             ; struct tm *
.text:00001273                 push    offset $SG85836 ; "%H%M%S"
.text:00001278                 push    0Ah             ; size_t
.text:0000127A                 lea     eax, [ebp+var_14]
.text:0000127D                 push    eax             ; char *
.text:0000127E                 call    _strftime
.text:00001283                 add     esp, 10h
.text:00001286                 mov     [ebp+var_20], eax
.text:00001289                 jmp     short loc_12C9
.text:0000128B ; ---------------------------------------------------------------------------
.text:0000128B
.text:0000128B $LN5:                                   ; CODE XREF: _xlatlognam+CDj
.text:0000128B                                         ; DATA XREF: .text:$LN22o
.text:0000128B                 mov     ecx, [ebp+arg_4] ; jumptable 00001211 case 4
.text:0000128E                 mov     [ebp+var_1C], ecx
.text:00001291                 mov     edx, [ebp+var_1C]
.text:00001294                 push    edx             ; char *
.text:00001295                 call    _strlen
.text:0000129A                 add     esp, 4
.text:0000129D                 mov     [ebp+var_20], eax
.text:000012A0                 jmp     short loc_12C9
.text:000012A2 ; ---------------------------------------------------------------------------
.text:000012A2
.text:000012A2 $LN4:                                   ; CODE XREF: _xlatlognam+BDj
.text:000012A2                                         ; _xlatlognam+CDj
.text:000012A2                                         ; DATA XREF: ...
.text:000012A2                 mov     [ebp+var_14], 26h ; '&' ; jumptable 00001211 default case
.text:000012A6                 mov     [ebp+var_20], 1
.text:000012AD                 movsx   eax, [ebp+var_35]
.text:000012B1                 cmp     eax, 26h ; '&'
.text:000012B4                 jz      short loc_12C9
.text:000012B6                 mov     ecx, [ebp+var_20]
.text:000012B9                 mov     dl, [ebp+var_35]
.text:000012BC                 mov     [ebp+ecx+var_14], dl
.text:000012C0                 mov     eax, [ebp+var_20]
.text:000012C3                 add     eax, 1
.text:000012C6                 mov     [ebp+var_20], eax
.text:000012C9
.text:000012C9 loc_12C9:                               ; CODE XREF: _xlatlognam+89j
.text:000012C9                                         ; _xlatlognam+EEj ...
.text:000012C9                 jmp     short loc_12E3
.text:000012CB ; ---------------------------------------------------------------------------
.text:000012CB
.text:000012CB loc_12CB:                               ; CODE XREF: _xlatlognam+6Bj
.text:000012CB                 mov     ecx, [ebp+var_30]
.text:000012CE                 mov     dl, [ecx]
.text:000012D0                 mov     [ebp+var_14], dl
.text:000012D3                 mov     eax, [ebp+var_30]
.text:000012D6                 add     eax, 1
.text:000012D9                 mov     [ebp+var_30], eax
.text:000012DC                 mov     [ebp+var_20], 1
.text:000012E3
.text:000012E3 loc_12E3:                               ; CODE XREF: _xlatlognam:loc_12C9j
.text:000012E3                 mov     ecx, [ebp+var_28]
.text:000012E6                 add     ecx, [ebp+var_20]
.text:000012E9                 cmp     [ebp+var_2C], ecx
.text:000012EC                 jg      short loc_131D
.text:000012EE                 mov     eax, [ebp+var_28]
.text:000012F1                 add     eax, [ebp+var_20]
.text:000012F4                 imul    eax, 5
.text:000012F7                 cdq
.text:000012F8                 and     edx, 3
.text:000012FB                 add     eax, edx
.text:000012FD                 sar     eax, 2
.text:00001300                 add     eax, 200h
.text:00001305                 mov     [ebp+var_2C], eax
.text:00001308                 push    1
.text:0000130A                 mov     edx, [ebp+var_2C]
.text:0000130D                 push    edx
.text:0000130E                 mov     eax, [ebp+var_24]
.text:00001311                 push    eax
.text:00001312                 call    _saferealloc
.text:00001317                 add     esp, 0Ch
.text:0000131A                 mov     [ebp+var_24], eax
.text:0000131D
.text:0000131D loc_131D:                               ; CODE XREF: _xlatlognam+1A8j
.text:0000131D                 mov     ecx, [ebp+var_20]
.text:00001320                 push    ecx             ; size_t
.text:00001321                 mov     edx, [ebp+var_1C]
.text:00001324                 push    edx             ; void *
.text:00001325                 mov     eax, [ebp+var_24]
.text:00001328                 add     eax, [ebp+var_28]
.text:0000132B                 push    eax             ; void *
.text:0000132C                 call    _memcpy
.text:00001331                 add     esp, 0Ch
.text:00001334                 mov     ecx, [ebp+var_28]
.text:00001337                 add     ecx, [ebp+var_20]
.text:0000133A                 mov     [ebp+var_28], ecx
.text:0000133D                 jmp     loc_1192
.text:00001342 ; ---------------------------------------------------------------------------
.text:00001342
.text:00001342 loc_1342:                               ; CODE XREF: _xlatlognam+56j
.text:00001342                 mov     edx, [ebp+var_24]
.text:00001345                 add     edx, [ebp+var_28]
.text:00001348                 mov     byte ptr [edx], 0
.text:0000134B                 mov     eax, [ebp+var_24]
.text:0000134E                 push    eax
.text:0000134F                 call    _filename_from_str
.text:00001354                 add     esp, 4
.text:00001357                 mov     [ebp+var_34], eax
.text:0000135A                 mov     ecx, [ebp+var_24]
.text:0000135D                 push    ecx
.text:0000135E                 call    _safefree
.text:00001363                 add     esp, 4
.text:00001366                 mov     eax, [ebp+var_34]
.text:00001369                 push    edx
.text:0000136A                 mov     ecx, ebp
.text:0000136C                 push    eax
.text:0000136D                 lea     edx, $LN21
.text:00001373                 call    @_RTC_CheckStackVars@8
.text:00001378                 pop     eax
.text:00001379                 pop     edx
.text:0000137A                 pop     edi
.text:0000137B                 mov     ecx, [ebp+var_4]
.text:0000137E                 xor     ecx, ebp
.text:00001380                 call    @__security_check_cookie@4
.text:00001385                 add     esp, 3Ch
.text:00001388                 cmp     ebp, esp
.text:0000138A                 call    __RTC_CheckEsp
.text:0000138F                 mov     esp, ebp
.text:00001391                 pop     ebp
.text:00001392                 retn
.text:00001392 _xlatlognam     endp
.text:00001392
.text:00001392 ; ---------------------------------------------------------------------------
.text:00001393                 align 4
.text:00001394 $LN21           dd 1                    ; DATA XREF: _xlatlognam+229o
.text:00001398                 dd offset $LN20
.text:0000139C $LN20           dd 0FFFFFFECh, 0Ah      ; DATA XREF: .text:00001398o
.text:000013A4                 dd offset $LN19
.text:000013A8 $LN19           dd 667562h              ; DATA XREF: .text:000013A4o
.text:000013AC $LN22           dd offset $LN7          ; DATA XREF: _xlatlognam+CDr
.text:000013AC                 dd offset $LN5          ; jump table for switch statement
.text:000013AC                 dd offset $LN8
.text:000013AC                 dd offset $LN6
.text:000013AC                 dd offset $LN9
.text:000013AC                 dd offset $LN4
.text:000013C4 $LN18           db      0,     5,     5,     5 ; DATA XREF: _xlatlognam+C6r
.text:000013C4                 db      1,     5,     5,     5 ; indirect table for switch statement
.text:000013C4                 db      5,     2,     5,     5
.text:000013C4                 db      5,     5,     5,     5
.text:000013C4                 db      3,     5,     5,     5
.text:000013C4                 db      5,     4
.text:000013DA                 align 4
.text:000013DA _text           ends
.text:000013DA
.rtc$TMZ:000013DC ; ===========================================================================
.rtc$TMZ:000013DC
.rtc$TMZ:000013DC ; Segment type: Pure data
.rtc$TMZ:000013DC ; Segment permissions: Read
.rtc$TMZ:000013DC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000013DC                 assume cs:_rtc$TMZ
.rtc$TMZ:000013DC                 ;org 13DCh
.rtc$TMZ:000013DC ; COMDAT (pick any)
.rtc$TMZ:000013DC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000013DC _rtc$TMZ        ends
.rtc$TMZ:000013DC
.rtc$IMZ:000013E0 ; ===========================================================================
.rtc$IMZ:000013E0
.rtc$IMZ:000013E0 ; Segment type: Pure data
.rtc$IMZ:000013E0 ; Segment permissions: Read
.rtc$IMZ:000013E0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000013E0                 assume cs:_rtc$IMZ
.rtc$IMZ:000013E0                 ;org 13E0h
.rtc$IMZ:000013E0 ; COMDAT (pick any)
.rtc$IMZ:000013E0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000013E0 _rtc$IMZ        ends
.rtc$IMZ:000013E0
UNDEF:000013F0 ; ===========================================================================
UNDEF:000013F0
UNDEF:000013F0 ; Segment type: Externs
UNDEF:000013F0 ; UNDEF
UNDEF:000013F0 ; int __cdecl fflush(FILE *)
UNDEF:000013F0                 extrn _fflush:near      ; CODE XREF: _logflush+29p
UNDEF:000013F0                                         ; _log_eventlog+4Ap
UNDEF:000013F4                 extrn __RTC_CheckEsp:near ; CODE XREF: _logflush+36p
UNDEF:000013F4                                         ; _logfopen+175p ...
UNDEF:000013F8                 extrn __RTC_Shutdown:near
UNDEF:000013F8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000013FC                 extrn __RTC_InitBase:near
UNDEF:000013FC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001400                 extrn _askappend:near   ; CODE XREF: _logfopen+11Dp
UNDEF:00001404 ; int __cdecl fclose(FILE *)
UNDEF:00001404                 extrn _fclose:near      ; CODE XREF: _logfopen+E6p
UNDEF:00001404                                         ; _logfclose+1Fp
UNDEF:00001408                 extrn _conf_get_int:near ; CODE XREF: _logfopen+D5p
UNDEF:00001408                                         ; _log_init+51p ...
UNDEF:0000140C ; FILE *__cdecl fopen(const char *, const char *)
UNDEF:0000140C                 extrn _fopen:near       ; CODE XREF: _logfopen+B7p
UNDEF:0000140C                                         ; _logfopen_callback+77p
UNDEF:00001410                 extrn _conf_get_filename:near ; CODE XREF: _logfopen+92p
UNDEF:00001410                                         ; _log_reconfig+21p ...
UNDEF:00001414                 extrn _conf_get_str:near ; CODE XREF: _logfopen+80p
UNDEF:00001418                 extrn _filename_free:near ; CODE XREF: _logfopen+6Bp
UNDEF:00001418                                         ; _log_free+3Cp
UNDEF:0000141C                 extrn _ltime:near       ; CODE XREF: _logfopen+47p
UNDEF:0000141C                                         ; _logfopen_callback+B2p ...
UNDEF:00001420                 extrn ___security_cookie:near ; DATA XREF: _logfopen+17r
UNDEF:00001420                                         ; _logfopen_callback+1Dr ...
UNDEF:00001424                 extrn @__security_check_cookie@4:near
UNDEF:00001424                                         ; CODE XREF: _logfopen+16Bp
UNDEF:00001424                                         ; _logfopen_callback+2C8p ...
UNDEF:00001428                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _logfopen+15Dp
UNDEF:00001428                                         ; _logfopen_callback+2BAp ...
UNDEF:0000142C                 extrn _bufchain_consume:near
UNDEF:0000142C                                         ; CODE XREF: _logfopen_callback+2A6p
UNDEF:00001430                 extrn _bufchain_prefix:near
UNDEF:00001430                                         ; CODE XREF: _logfopen_callback+276p
UNDEF:00001434                 extrn _bufchain_size:near
UNDEF:00001434                                         ; CODE XREF: _logfopen_callback+255p
UNDEF:00001438                 extrn __wassert:near    ; CODE XREF: _logfopen_callback+246p
UNDEF:00001438                                         ; _logwrite+57p
UNDEF:0000143C                 extrn _safefree:near    ; CODE XREF: _logfopen_callback+229p
UNDEF:0000143C                                         ; _logprintf+55p ...
UNDEF:00001440                 extrn _logevent:near    ; CODE XREF: _logfopen_callback+21Ap
UNDEF:00001440                                         ; _logwrite+9Ep
UNDEF:00001444                 extrn _dupprintf:near   ; CODE XREF: _logfopen_callback+1FEp
UNDEF:00001448                 extrn _filename_to_str:near
UNDEF:00001448                                         ; CODE XREF: _logfopen_callback+1E2p
UNDEF:00001448                                         ; _xlatlognam+43p
UNDEF:0000144C ; size_t __cdecl strftime(char *, size_t, const char *, const struct tm *)
UNDEF:0000144C                 extrn _strftime:near    ; CODE XREF: _logfopen_callback+DEp
UNDEF:0000144C                                         ; _log_packet+15Ap ...
UNDEF:00001450 ; size_t __cdecl fwrite(const void *, size_t, size_t, FILE *)
UNDEF:00001450                 extrn _fwrite:near      ; CODE XREF: _logwrite+6Fp
UNDEF:00001454                 extrn _bufchain_add:near ; CODE XREF: _logwrite+30p
UNDEF:00001458 ; size_t __cdecl strlen(const char *)
UNDEF:00001458                 extrn _strlen:near      ; CODE XREF: _logprintf+38p
UNDEF:00001458                                         ; _log_packet+3F0p ...
UNDEF:0000145C                 extrn _dupvprintf:near  ; CODE XREF: _logprintf+22p
UNDEF:00001460 ; int fprintf(FILE *, const char *, ...)
UNDEF:00001460                 extrn _fprintf:near     ; CODE XREF: _log_eventlog+39p
UNDEF:00001464                 extrn ___iob_func:near  ; CODE XREF: _log_eventlog+30p
UNDEF:00001464                                         ; _log_eventlog+41p
UNDEF:00001468                 extrn _flags:near       ; DATA XREF: _log_eventlog+11r
UNDEF:00001468                                         ; _log_eventlog+1Cr
UNDEF:0000146C ; char *__cdecl strcpy(char *, const char *)
UNDEF:0000146C                 extrn _strcpy:near      ; CODE XREF: _log_packet+3E4p
UNDEF:00001470 ; int __cdecl isprint(int)
UNDEF:00001470                 extrn _isprint:near     ; CODE XREF: _log_packet+353p
UNDEF:00001474 ; int sprintf(char *, const char *, ...)
UNDEF:00001474                 extrn _sprintf:near     ; CODE XREF: _log_packet+2ADp
UNDEF:00001474                                         ; _log_packet+2E8p ...
UNDEF:00001478                 extrn _bufchain_init:near ; CODE XREF: _log_init+70p
UNDEF:0000147C                 extrn _conf_copy:near   ; CODE XREF: _log_init+3Ap
UNDEF:0000147C                                         ; _log_reconfig+A2p
UNDEF:00001480                 extrn _safemalloc:near  ; CODE XREF: _log_init+Fp
UNDEF:00001480                                         ; _xlatlognam+2Dp
UNDEF:00001484                 extrn _conf_free:near   ; CODE XREF: _log_free+4Bp
UNDEF:00001484                                         ; _log_reconfig+96p
UNDEF:00001488                 extrn _bufchain_clear:near ; CODE XREF: _log_free+24p
UNDEF:0000148C                 extrn _filename_equal:near ; CODE XREF: _log_reconfig+3Cp
UNDEF:00001490                 extrn _filename_from_str:near ; CODE XREF: _xlatlognam+20Bp
UNDEF:00001494 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00001494                 extrn _memcpy:near      ; CODE XREF: _xlatlognam+1E8p
UNDEF:00001498                 extrn _saferealloc:near ; CODE XREF: _xlatlognam+1CEp
UNDEF:0000149C ; int __cdecl tolower(int)
UNDEF:0000149C                 extrn _tolower:near     ; CODE XREF: _xlatlognam+A5p
UNDEF:0000149C
UNDEF:0000149C
UNDEF:0000149C                 end