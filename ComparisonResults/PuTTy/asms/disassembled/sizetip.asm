.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : A0A13369B40FEF77C9EA1649F2956993
.bss:00000000 ; Input CRC32 : 773AE9D5
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sizetip.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000 ; COLORREF tip_bg
.bss:00000000 _tip_bg         dd ?                    ; DATA XREF: _UpdateSizeTip+E4w
.bss:00000000                                         ; SizeTipWndProc(x,x,x,x)+C7r ...
.bss:00000004 ; HGDIOBJ tip_font
.bss:00000004 _tip_font       dd ?                    ; DATA XREF: _UpdateSizeTip+154w
.bss:00000004                                         ; SizeTipWndProc(x,x,x,x)+89r ...
.bss:00000008 ; COLORREF tip_text
.bss:00000008 _tip_text       dd ?                    ; DATA XREF: _UpdateSizeTip+FAw
.bss:00000008                                         ; SizeTipWndProc(x,x,x,x)+17Br
.bss:0000000C _tip_class      dw ?                    ; DATA XREF: _UpdateSizeTip+42r
.bss:0000000C                                         ; _UpdateSizeTip+CDw ...
.bss:0000000E                 align 10h
.bss:00000010 ; HWND tip_wnd
.bss:00000010 _tip_wnd        dd ?                    ; DATA XREF: _UpdateSizeTip:loc_65r
.bss:00000010                                         ; _UpdateSizeTip+172r ...
.bss:00000014 _tip_enabled    dd ?                    ; DATA XREF: _UpdateSizeTip+27r
.bss:00000014                                         ; _EnableSizeTip+35w
.bss:00000014 _bss            ends
.bss:00000014
.data:00000018 ; ===========================================================================
.data:00000018
.data:00000018 ; Segment type: Pure data
.data:00000018 ; Segment permissions: Read/Write
.data:00000018 _data           segment dword public 'DATA' use32
.data:00000018                 assume cs:_data
.data:00000018                 ;org 18h
.data:00000018 $SG87463        db 'SizeTipClass',0     ; DATA XREF: _UpdateSizeTip+ADo
.data:00000025                 align 4
.data:00000028 ; char _SG87467[]
.data:00000028 $SG87467        db '%dx%d',0            ; DATA XREF: _UpdateSizeTip+161o
.data:0000002E                 align 10h
.data:0000002E _data           ends
.data:0000002E
.text:00000030 ; ===========================================================================
.text:00000030
.text:00000030 ; Segment type: Pure code
.text:00000030 ; Segment permissions: Read/Execute
.text:00000030 _text           segment para public 'CODE' use32
.text:00000030                 assume cs:_text
.text:00000030                 ;org 30h
.text:00000030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; int __cdecl UpdateSizeTip(HWND hWnd, int, int)
.text:00000030                 public _UpdateSizeTip
.text:00000030 _UpdateSizeTip  proc near
.text:00000030
.text:00000030 Y               = dword ptr -1F0h
.text:00000030 X               = dword ptr -1ECh
.text:00000030 Rect            = tagRECT ptr -1E4h
.text:00000030 psizl           = tagSIZE ptr -1CCh
.text:00000030 hdc             = dword ptr -1C0h
.text:00000030 WndClass        = WNDCLASSA ptr -1B8h
.text:00000030 Dst             = dword ptr -188h
.text:00000030 lf              = LOGFONTA ptr -0ACh
.text:00000030 Dest            = byte ptr -28h
.text:00000030 var_4           = dword ptr -4
.text:00000030 hWnd            = dword ptr  8
.text:00000030 arg_4           = dword ptr  0Ch
.text:00000030 arg_8           = dword ptr  10h
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 sub     esp, 1F0h
.text:00000039                 push    esi
.text:0000003A                 push    edi
.text:0000003B                 lea     edi, [ebp+Y]
.text:00000041                 mov     ecx, 7Ch ; '|'
.text:00000046                 mov     eax, 0CCCCCCCCh
.text:0000004B                 rep stosd
.text:0000004D                 mov     eax, dword ptr ds:___security_cookie
.text:00000052                 xor     eax, ebp
.text:00000054                 mov     [ebp+var_4], eax
.text:00000057                 cmp     ds:_tip_enabled, 0
.text:0000005E                 jnz     short loc_65
.text:00000060                 jmp     loc_2ED
.text:00000065 ; ---------------------------------------------------------------------------
.text:00000065
.text:00000065 loc_65:                                 ; CODE XREF: _UpdateSizeTip+2Ej
.text:00000065                 cmp     ds:_tip_wnd, 0
.text:0000006C                 jnz     loc_189
.text:00000072                 movzx   eax, ds:_tip_class
.text:00000079                 test    eax, eax
.text:0000007B                 jnz     loc_103
.text:00000081                 mov     [ebp+WndClass.style], 3
.text:0000008B                 mov     [ebp+WndClass.lpfnWndProc], offset _SizeTipWndProc@16 ; SizeTipWndProc(x,x,x,x)
.text:00000095                 mov     [ebp+WndClass.cbClsExtra], 0
.text:0000009F                 mov     [ebp+WndClass.cbWndExtra], 0
.text:000000A9                 mov     ecx, dword ptr ds:_hinst
.text:000000AF                 mov     [ebp+WndClass.hInstance], ecx
.text:000000B5                 mov     [ebp+WndClass.hIcon], 0
.text:000000BF                 mov     [ebp+WndClass.hCursor], 0
.text:000000C9                 mov     [ebp+WndClass.hbrBackground], 0
.text:000000D3                 mov     [ebp+WndClass.lpszMenuName], 0
.text:000000DD                 mov     [ebp+WndClass.lpszClassName], offset $SG87463 ; "SizeTipClass"
.text:000000E7                 mov     esi, esp
.text:000000E9                 lea     edx, [ebp+WndClass]
.text:000000EF                 push    edx             ; lpWndClass
.text:000000F0                 call    dword ptr ds:__imp__RegisterClassA@4 ; RegisterClassA(x)
.text:000000F6                 cmp     esi, esp
.text:000000F8                 call    __RTC_CheckEsp
.text:000000FD                 mov     ds:_tip_class, ax
.text:00000103
.text:00000103 loc_103:                                ; CODE XREF: _UpdateSizeTip+4Bj
.text:00000103                 mov     esi, esp
.text:00000105                 push    18h             ; nIndex
.text:00000107                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text:0000010D                 cmp     esi, esp
.text:0000010F                 call    __RTC_CheckEsp
.text:00000114                 mov     ds:_tip_bg, eax
.text:00000119                 mov     esi, esp
.text:0000011B                 push    17h             ; nIndex
.text:0000011D                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text:00000123                 cmp     esi, esp
.text:00000125                 call    __RTC_CheckEsp
.text:0000012A                 mov     ds:_tip_text, eax
.text:0000012F                 push    158h            ; Size
.text:00000134                 push    0               ; Val
.text:00000136                 lea     eax, [ebp+Dst]
.text:0000013C                 push    eax             ; Dst
.text:0000013D                 call    _memset
.text:00000142                 add     esp, 0Ch
.text:00000145                 mov     [ebp+Dst], 158h
.text:0000014F                 mov     esi, esp
.text:00000151                 push    0               ; fWinIni
.text:00000153                 lea     ecx, [ebp+Dst]
.text:00000159                 push    ecx             ; pvParam
.text:0000015A                 push    158h            ; uiParam
.text:0000015F                 push    29h ; ')'       ; uiAction
.text:00000161                 call    dword ptr ds:__imp__SystemParametersInfoA@16 ; SystemParametersInfoA(x,x,x,x)
.text:00000167                 cmp     esi, esp
.text:00000169                 call    __RTC_CheckEsp
.text:0000016E                 mov     esi, esp
.text:00000170                 lea     edx, [ebp+lf]
.text:00000176                 push    edx             ; lplf
.text:00000177                 call    dword ptr ds:__imp__CreateFontIndirectA@4 ; CreateFontIndirectA(x)
.text:0000017D                 cmp     esi, esp
.text:0000017F                 call    __RTC_CheckEsp
.text:00000184                 mov     ds:_tip_font, eax
.text:00000189
.text:00000189 loc_189:                                ; CODE XREF: _UpdateSizeTip+3Cj
.text:00000189                 mov     eax, [ebp+arg_8]
.text:0000018C                 push    eax
.text:0000018D                 mov     ecx, [ebp+arg_4]
.text:00000190                 push    ecx
.text:00000191                 push    offset $SG87467 ; "%dx%d"
.text:00000196                 lea     edx, [ebp+Dest]
.text:00000199                 push    edx             ; Dest
.text:0000019A                 call    _sprintf
.text:0000019F                 add     esp, 10h
.text:000001A2                 cmp     ds:_tip_wnd, 0
.text:000001A9                 jnz     loc_2D4
.text:000001AF                 mov     esi, esp
.text:000001B1                 push    0               ; hdc
.text:000001B3                 call    dword ptr ds:__imp__CreateCompatibleDC@4 ; CreateCompatibleDC(x)
.text:000001B9                 cmp     esi, esp
.text:000001BB                 call    __RTC_CheckEsp
.text:000001C0                 mov     [ebp+hdc], eax
.text:000001C6                 mov     esi, esp
.text:000001C8                 lea     eax, [ebp+psizl]
.text:000001CE                 push    eax             ; psizl
.text:000001CF                 lea     ecx, [ebp+Dest]
.text:000001D2                 push    ecx             ; Str
.text:000001D3                 call    _strlen
.text:000001D8                 add     esp, 4
.text:000001DB                 push    eax             ; c
.text:000001DC                 lea     edx, [ebp+Dest]
.text:000001DF                 push    edx             ; lpString
.text:000001E0                 mov     eax, [ebp+hdc]
.text:000001E6                 push    eax             ; hdc
.text:000001E7                 call    dword ptr ds:__imp__GetTextExtentPoint32A@16 ; GetTextExtentPoint32A(x,x,x,x)
.text:000001ED                 cmp     esi, esp
.text:000001EF                 call    __RTC_CheckEsp
.text:000001F4                 mov     esi, esp
.text:000001F6                 mov     ecx, [ebp+hdc]
.text:000001FC                 push    ecx             ; hdc
.text:000001FD                 call    dword ptr ds:__imp__DeleteDC@4 ; DeleteDC(x)
.text:00000203                 cmp     esi, esp
.text:00000205                 call    __RTC_CheckEsp
.text:0000020A                 mov     esi, esp
.text:0000020C                 lea     edx, [ebp+Rect]
.text:00000212                 push    edx             ; lpRect
.text:00000213                 mov     eax, [ebp+hWnd]
.text:00000216                 push    eax             ; hWnd
.text:00000217                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:0000021D                 cmp     esi, esp
.text:0000021F                 call    __RTC_CheckEsp
.text:00000224                 mov     ecx, [ebp+Rect.left]
.text:0000022A                 mov     [ebp+X], ecx
.text:00000230                 cmp     [ebp+X], 10h
.text:00000237                 jge     short loc_243
.text:00000239                 mov     [ebp+X], 10h
.text:00000243
.text:00000243 loc_243:                                ; CODE XREF: _UpdateSizeTip+207j
.text:00000243                 mov     edx, [ebp+Rect.top]
.text:00000249                 sub     edx, [ebp+psizl.cy]
.text:0000024F                 mov     [ebp+Y], edx
.text:00000255                 cmp     [ebp+Y], 10h
.text:0000025C                 jge     short loc_268
.text:0000025E                 mov     [ebp+Y], 10h
.text:00000268
.text:00000268 loc_268:                                ; CODE XREF: _UpdateSizeTip+22Cj
.text:00000268                 mov     esi, esp
.text:0000026A                 push    0               ; lpParam
.text:0000026C                 mov     eax, dword ptr ds:_hinst
.text:00000271                 push    eax             ; hInstance
.text:00000272                 push    0               ; hMenu
.text:00000274                 push    0               ; hWndParent
.text:00000276                 mov     ecx, [ebp+psizl.cy]
.text:0000027C                 push    ecx             ; nHeight
.text:0000027D                 mov     edx, [ebp+psizl._cx]
.text:00000283                 push    edx             ; nWidth
.text:00000284                 mov     eax, [ebp+Y]
.text:0000028A                 push    eax             ; Y
.text:0000028B                 mov     ecx, [ebp+X]
.text:00000291                 push    ecx             ; X
.text:00000292                 push    80000000h       ; dwStyle
.text:00000297                 lea     edx, [ebp+Dest]
.text:0000029A                 push    edx             ; lpWindowName
.text:0000029B                 movzx   eax, ds:_tip_class
.text:000002A2                 push    eax             ; lpClassName
.text:000002A3                 push    88h ; 'ê'       ; dwExStyle
.text:000002A8                 call    dword ptr ds:__imp__CreateWindowExA@48 ; CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)
.text:000002AE                 cmp     esi, esp
.text:000002B0                 call    __RTC_CheckEsp
.text:000002B5                 mov     ds:_tip_wnd, eax
.text:000002BA                 mov     esi, esp
.text:000002BC                 push    4               ; nCmdShow
.text:000002BE                 mov     ecx, ds:_tip_wnd
.text:000002C4                 push    ecx             ; hWnd
.text:000002C5                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:000002CB                 cmp     esi, esp
.text:000002CD                 call    __RTC_CheckEsp
.text:000002D2                 jmp     short loc_2ED
.text:000002D4 ; ---------------------------------------------------------------------------
.text:000002D4
.text:000002D4 loc_2D4:                                ; CODE XREF: _UpdateSizeTip+179j
.text:000002D4                 mov     esi, esp
.text:000002D6                 lea     edx, [ebp+Dest]
.text:000002D9                 push    edx             ; lpString
.text:000002DA                 mov     eax, ds:_tip_wnd
.text:000002DF                 push    eax             ; hWnd
.text:000002E0                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:000002E6                 cmp     esi, esp
.text:000002E8                 call    __RTC_CheckEsp
.text:000002ED
.text:000002ED loc_2ED:                                ; CODE XREF: _UpdateSizeTip+30j
.text:000002ED                                         ; _UpdateSizeTip+2A2j
.text:000002ED                 push    edx
.text:000002EE                 mov     ecx, ebp
.text:000002F0                 push    eax
.text:000002F1                 lea     edx, $LN16
.text:000002F7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002FC                 pop     eax
.text:000002FD                 pop     edx
.text:000002FE                 pop     edi
.text:000002FF                 pop     esi
.text:00000300                 mov     ecx, [ebp+var_4]
.text:00000303                 xor     ecx, ebp
.text:00000305                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000030A                 add     esp, 1F0h
.text:00000310                 cmp     ebp, esp
.text:00000312                 call    __RTC_CheckEsp
.text:00000317                 mov     esp, ebp
.text:00000319                 pop     ebp
.text:0000031A                 retn
.text:0000031A _UpdateSizeTip  endp
.text:0000031A
.text:0000031A ; ---------------------------------------------------------------------------
.text:0000031B                 align 4
.text:0000031C $LN16           dd 5                    ; DATA XREF: _UpdateSizeTip+2C1o
.text:00000320                 dd offset $LN15
.text:00000324 $LN15           dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:00000320o
.text:0000032C                 dd offset $LN10
.text:00000330                 dd 0FFFFFE78h, 158h
.text:00000338                 dd offset $LN11
.text:0000033C                 dd 0FFFFFE48h, 28h
.text:00000344                 dd offset $LN12
.text:00000348                 dd 0FFFFFE34h, 8
.text:00000350                 dd offset $LN13
.text:00000354                 dd 0FFFFFE1Ch, 10h
.text:0000035C                 dd offset $LN14
.text:00000360 $LN14           db 77h, 72h, 0          ; DATA XREF: .text:0000035Co
.text:00000363 $LN13           db 73h                  ; DATA XREF: .text:00000350o
.text:00000364                 db 7Ah, 0
.text:00000366 $LN12           dw 6377h                ; DATA XREF: .text:00000344o
.text:00000368                 db 0
.text:00000369 $LN11           db 6Eh, 63h, 69h        ; DATA XREF: .text:00000338o
.text:0000036C                 db 0
.text:0000036D $LN10           db 73h, 74h, 72h        ; DATA XREF: .text:0000032Co
.text:00000370                 align 20h
.text:00000380
.text:00000380 ; =============== S U B R O U T I N E =======================================
.text:00000380
.text:00000380 ; Attributes: bp-based frame
.text:00000380
.text:00000380 ; int __stdcall SizeTipWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.text:00000380 _SizeTipWndProc@16 proc near            ; DATA XREF: _UpdateSizeTip+5Bo
.text:00000380
.text:00000380 var_94          = dword ptr -94h
.text:00000380 var_90          = dword ptr -90h
.text:00000380 psizl           = tagSIZE ptr -88h
.text:00000380 Str             = dword ptr -7Ch
.text:00000380 Paint           = tagPAINTSTRUCT ptr -74h
.text:00000380 hdc             = dword ptr -30h
.text:00000380 lpString        = dword ptr -2Ch
.text:00000380 c               = dword ptr -28h
.text:00000380 Rect            = tagRECT ptr -20h
.text:00000380 var_C           = dword ptr -0Ch
.text:00000380 h               = dword ptr -8
.text:00000380 var_4           = dword ptr -4
.text:00000380 hWnd            = dword ptr  8
.text:00000380 Msg             = dword ptr  0Ch
.text:00000380 wParam          = dword ptr  10h
.text:00000380 lParam          = dword ptr  14h
.text:00000380
.text:00000380                 push    ebp
.text:00000381                 mov     ebp, esp
.text:00000383                 sub     esp, 94h
.text:00000389                 push    esi
.text:0000038A                 push    edi
.text:0000038B                 lea     edi, [ebp+var_94]
.text:00000391                 mov     ecx, 25h ; '%'
.text:00000396                 mov     eax, 0CCCCCCCCh
.text:0000039B                 rep stosd
.text:0000039D                 mov     eax, dword ptr ds:___security_cookie
.text:000003A2                 xor     eax, ebp
.text:000003A4                 mov     [ebp+var_4], eax
.text:000003A7                 mov     eax, [ebp+Msg]
.text:000003AA                 mov     [ebp+var_94], eax
.text:000003B0                 mov     ecx, [ebp+var_94]
.text:000003B6                 sub     ecx, 2
.text:000003B9                 mov     [ebp+var_94], ecx
.text:000003BF                 cmp     [ebp+var_94], 82h ; 'é' ; switch 131 cases
.text:000003C9                 ja      $LN6            ; jumptable 000003DC default case
.text:000003CF                 mov     edx, [ebp+var_94]
.text:000003D5                 movzx   eax, ds:$LN10_0[edx]
.text:000003DC                 jmp     ds:$LN16_0[eax*4] ; switch jump
.text:000003E3 ; ---------------------------------------------------------------------------
.text:000003E3
.text:000003E3 $LN5:                                   ; CODE XREF: SizeTipWndProc(x,x,x,x)+5Cj
.text:000003E3                                         ; DATA XREF: .text:$LN16_0o
.text:000003E3                 mov     eax, 1          ; jumptable 000003DC case 18
.text:000003E8                 jmp     loc_6B8
.text:000003ED ; ---------------------------------------------------------------------------
.text:000003ED
.text:000003ED $LN4:                                   ; CODE XREF: SizeTipWndProc(x,x,x,x)+5Cj
.text:000003ED                                         ; DATA XREF: .text:$LN16_0o
.text:000003ED                 mov     esi, esp        ; jumptable 000003DC case 13
.text:000003EF                 lea     ecx, [ebp+Paint]
.text:000003F2                 push    ecx             ; lpPaint
.text:000003F3                 mov     edx, [ebp+hWnd]
.text:000003F6                 push    edx             ; hWnd
.text:000003F7                 call    dword ptr ds:__imp__BeginPaint@8 ; BeginPaint(x,x)
.text:000003FD                 cmp     esi, esp
.text:000003FF                 call    __RTC_CheckEsp
.text:00000404                 mov     [ebp+hdc], eax
.text:00000407                 mov     esi, esp
.text:00000409                 mov     eax, ds:_tip_font
.text:0000040E                 push    eax             ; h
.text:0000040F                 mov     ecx, [ebp+hdc]
.text:00000412                 push    ecx             ; hdc
.text:00000413                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00000419                 cmp     esi, esp
.text:0000041B                 call    __RTC_CheckEsp
.text:00000420                 mov     esi, esp
.text:00000422                 push    7               ; i
.text:00000424                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text:0000042A                 cmp     esi, esp
.text:0000042C                 call    __RTC_CheckEsp
.text:00000431                 mov     esi, esp
.text:00000433                 push    eax             ; h
.text:00000434                 mov     edx, [ebp+hdc]
.text:00000437                 push    edx             ; hdc
.text:00000438                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000043E                 cmp     esi, esp
.text:00000440                 call    __RTC_CheckEsp
.text:00000445                 mov     esi, esp
.text:00000447                 mov     eax, ds:_tip_bg
.text:0000044C                 push    eax             ; color
.text:0000044D                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text:00000453                 cmp     esi, esp
.text:00000455                 call    __RTC_CheckEsp
.text:0000045A                 mov     [ebp+h], eax
.text:0000045D                 mov     esi, esp
.text:0000045F                 mov     ecx, [ebp+h]
.text:00000462                 push    ecx             ; h
.text:00000463                 mov     edx, [ebp+hdc]
.text:00000466                 push    edx             ; hdc
.text:00000467                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000046D                 cmp     esi, esp
.text:0000046F                 call    __RTC_CheckEsp
.text:00000474                 mov     [ebp+var_C], eax
.text:00000477                 mov     esi, esp
.text:00000479                 lea     eax, [ebp+Rect]
.text:0000047C                 push    eax             ; lpRect
.text:0000047D                 mov     ecx, [ebp+hWnd]
.text:00000480                 push    ecx             ; hWnd
.text:00000481                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text:00000487                 cmp     esi, esp
.text:00000489                 call    __RTC_CheckEsp
.text:0000048E                 mov     esi, esp
.text:00000490                 mov     edx, [ebp+Rect.bottom]
.text:00000493                 push    edx             ; bottom
.text:00000494                 mov     eax, [ebp+Rect.right]
.text:00000497                 push    eax             ; right
.text:00000498                 mov     ecx, [ebp+Rect.top]
.text:0000049B                 push    ecx             ; top
.text:0000049C                 mov     edx, [ebp+Rect.left]
.text:0000049F                 push    edx             ; left
.text:000004A0                 mov     eax, [ebp+hdc]
.text:000004A3                 push    eax             ; hdc
.text:000004A4                 call    dword ptr ds:__imp__Rectangle@20 ; Rectangle(x,x,x,x,x)
.text:000004AA                 cmp     esi, esp
.text:000004AC                 call    __RTC_CheckEsp
.text:000004B1                 mov     esi, esp
.text:000004B3                 mov     ecx, [ebp+hWnd]
.text:000004B6                 push    ecx             ; hWnd
.text:000004B7                 call    dword ptr ds:__imp__GetWindowTextLengthA@4 ; GetWindowTextLengthA(x)
.text:000004BD                 cmp     esi, esp
.text:000004BF                 call    __RTC_CheckEsp
.text:000004C4                 mov     [ebp+c], eax
.text:000004C7                 push    1
.text:000004C9                 mov     edx, [ebp+c]
.text:000004CC                 add     edx, 1
.text:000004CF                 push    edx
.text:000004D0                 call    _safemalloc
.text:000004D5                 add     esp, 8
.text:000004D8                 mov     [ebp+lpString], eax
.text:000004DB                 mov     eax, [ebp+c]
.text:000004DE                 add     eax, 1
.text:000004E1                 mov     esi, esp
.text:000004E3                 push    eax             ; nMaxCount
.text:000004E4                 mov     ecx, [ebp+lpString]
.text:000004E7                 push    ecx             ; lpString
.text:000004E8                 mov     edx, [ebp+hWnd]
.text:000004EB                 push    edx             ; hWnd
.text:000004EC                 call    dword ptr ds:__imp__GetWindowTextA@12 ; GetWindowTextA(x,x,x)
.text:000004F2                 cmp     esi, esp
.text:000004F4                 call    __RTC_CheckEsp
.text:000004F9                 mov     esi, esp
.text:000004FB                 mov     eax, ds:_tip_text
.text:00000500                 push    eax             ; color
.text:00000501                 mov     ecx, [ebp+hdc]
.text:00000504                 push    ecx             ; hdc
.text:00000505                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text:0000050B                 cmp     esi, esp
.text:0000050D                 call    __RTC_CheckEsp
.text:00000512                 mov     esi, esp
.text:00000514                 mov     edx, ds:_tip_bg
.text:0000051A                 push    edx             ; color
.text:0000051B                 mov     eax, [ebp+hdc]
.text:0000051E                 push    eax             ; hdc
.text:0000051F                 call    dword ptr ds:__imp__SetBkColor@8 ; SetBkColor(x,x)
.text:00000525                 cmp     esi, esp
.text:00000527                 call    __RTC_CheckEsp
.text:0000052C                 mov     esi, esp
.text:0000052E                 mov     ecx, [ebp+c]
.text:00000531                 push    ecx             ; c
.text:00000532                 mov     edx, [ebp+lpString]
.text:00000535                 push    edx             ; lpString
.text:00000536                 mov     eax, [ebp+Rect.top]
.text:00000539                 add     eax, 3
.text:0000053C                 push    eax             ; y
.text:0000053D                 mov     ecx, [ebp+Rect.left]
.text:00000540                 add     ecx, 3
.text:00000543                 push    ecx             ; x
.text:00000544                 mov     edx, [ebp+hdc]
.text:00000547                 push    edx             ; hdc
.text:00000548                 call    dword ptr ds:__imp__TextOutA@20 ; TextOutA(x,x,x,x,x)
.text:0000054E                 cmp     esi, esp
.text:00000550                 call    __RTC_CheckEsp
.text:00000555                 mov     eax, [ebp+lpString]
.text:00000558                 push    eax
.text:00000559                 call    _safefree
.text:0000055E                 add     esp, 4
.text:00000561                 mov     esi, esp
.text:00000563                 mov     ecx, [ebp+var_C]
.text:00000566                 push    ecx             ; h
.text:00000567                 mov     edx, [ebp+hdc]
.text:0000056A                 push    edx             ; hdc
.text:0000056B                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00000571                 cmp     esi, esp
.text:00000573                 call    __RTC_CheckEsp
.text:00000578                 mov     esi, esp
.text:0000057A                 mov     eax, [ebp+h]
.text:0000057D                 push    eax             ; ho
.text:0000057E                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:00000584                 cmp     esi, esp
.text:00000586                 call    __RTC_CheckEsp
.text:0000058B                 mov     esi, esp
.text:0000058D                 lea     ecx, [ebp+Paint]
.text:00000590                 push    ecx             ; lpPaint
.text:00000591                 mov     edx, [ebp+hWnd]
.text:00000594                 push    edx             ; hWnd
.text:00000595                 call    dword ptr ds:__imp__EndPaint@8 ; EndPaint(x,x)
.text:0000059B                 cmp     esi, esp
.text:0000059D                 call    __RTC_CheckEsp
.text:000005A2                 xor     eax, eax
.text:000005A4                 jmp     loc_6B8
.text:000005A9 ; ---------------------------------------------------------------------------
.text:000005A9
.text:000005A9 $LN3:                                   ; CODE XREF: SizeTipWndProc(x,x,x,x)+5Cj
.text:000005A9                                         ; DATA XREF: .text:$LN16_0o
.text:000005A9                 or      eax, 0FFFFFFFFh ; jumptable 000003DC case 130
.text:000005AC                 jmp     loc_6B8
.text:000005B1 ; ---------------------------------------------------------------------------
.text:000005B1
.text:000005B1 $LN2:                                   ; CODE XREF: SizeTipWndProc(x,x,x,x)+5Cj
.text:000005B1                                         ; DATA XREF: .text:$LN16_0o
.text:000005B1                 mov     esi, esp        ; jumptable 000003DC case 0
.text:000005B3                 mov     eax, ds:_tip_font
.text:000005B8                 push    eax             ; ho
.text:000005B9                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:000005BF                 cmp     esi, esp
.text:000005C1                 call    __RTC_CheckEsp
.text:000005C6                 mov     ds:_tip_font, 0
.text:000005D0                 jmp     $LN6            ; jumptable 000003DC default case
.text:000005D5 ; ---------------------------------------------------------------------------
.text:000005D5
.text:000005D5 $LN1:                                   ; CODE XREF: SizeTipWndProc(x,x,x,x)+5Cj
.text:000005D5                                         ; DATA XREF: .text:$LN16_0o
.text:000005D5                 mov     ecx, [ebp+lParam] ; jumptable 000003DC case 10
.text:000005D8                 mov     [ebp+Str], ecx
.text:000005DB                 mov     esi, esp
.text:000005DD                 push    0               ; hdc
.text:000005DF                 call    dword ptr ds:__imp__CreateCompatibleDC@4 ; CreateCompatibleDC(x)
.text:000005E5                 cmp     esi, esp
.text:000005E7                 call    __RTC_CheckEsp
.text:000005EC                 mov     [ebp+var_90], eax
.text:000005F2                 mov     esi, esp
.text:000005F4                 mov     edx, ds:_tip_font
.text:000005FA                 push    edx             ; h
.text:000005FB                 mov     eax, [ebp+var_90]
.text:00000601                 push    eax             ; hdc
.text:00000602                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00000608                 cmp     esi, esp
.text:0000060A                 call    __RTC_CheckEsp
.text:0000060F                 mov     esi, esp
.text:00000611                 lea     ecx, [ebp+psizl]
.text:00000617                 push    ecx             ; psizl
.text:00000618                 mov     edx, [ebp+Str]
.text:0000061B                 push    edx             ; Str
.text:0000061C                 call    _strlen
.text:00000621                 add     esp, 4
.text:00000624                 push    eax             ; c
.text:00000625                 mov     eax, [ebp+Str]
.text:00000628                 push    eax             ; lpString
.text:00000629                 mov     ecx, [ebp+var_90]
.text:0000062F                 push    ecx             ; hdc
.text:00000630                 call    dword ptr ds:__imp__GetTextExtentPoint32A@16 ; GetTextExtentPoint32A(x,x,x,x)
.text:00000636                 cmp     esi, esp
.text:00000638                 call    __RTC_CheckEsp
.text:0000063D                 mov     esi, esp
.text:0000063F                 push    16h             ; uFlags
.text:00000641                 mov     edx, [ebp+psizl.cy]
.text:00000647                 add     edx, 6
.text:0000064A                 push    edx             ; cy
.text:0000064B                 mov     eax, [ebp+psizl._cx]
.text:00000651                 add     eax, 6
.text:00000654                 push    eax             ; cx
.text:00000655                 push    0               ; Y
.text:00000657                 push    0               ; X
.text:00000659                 push    0               ; hWndInsertAfter
.text:0000065B                 mov     ecx, [ebp+hWnd]
.text:0000065E                 push    ecx             ; hWnd
.text:0000065F                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:00000665                 cmp     esi, esp
.text:00000667                 call    __RTC_CheckEsp
.text:0000066C                 mov     esi, esp
.text:0000066E                 push    0               ; bErase
.text:00000670                 push    0               ; lpRect
.text:00000672                 mov     edx, [ebp+hWnd]
.text:00000675                 push    edx             ; hWnd
.text:00000676                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:0000067C                 cmp     esi, esp
.text:0000067E                 call    __RTC_CheckEsp
.text:00000683                 mov     esi, esp
.text:00000685                 mov     eax, [ebp+var_90]
.text:0000068B                 push    eax             ; hdc
.text:0000068C                 call    dword ptr ds:__imp__DeleteDC@4 ; DeleteDC(x)
.text:00000692                 cmp     esi, esp
.text:00000694                 call    __RTC_CheckEsp
.text:00000699
.text:00000699 $LN6:                                   ; CODE XREF: SizeTipWndProc(x,x,x,x)+49j
.text:00000699                                         ; SizeTipWndProc(x,x,x,x)+5Cj ...
.text:00000699                 mov     esi, esp        ; jumptable 000003DC default case
.text:0000069B                 mov     ecx, [ebp+lParam]
.text:0000069E                 push    ecx             ; lParam
.text:0000069F                 mov     edx, [ebp+wParam]
.text:000006A2                 push    edx             ; wParam
.text:000006A3                 mov     eax, [ebp+Msg]
.text:000006A6                 push    eax             ; Msg
.text:000006A7                 mov     ecx, [ebp+hWnd]
.text:000006AA                 push    ecx             ; hWnd
.text:000006AB                 call    dword ptr ds:__imp__DefWindowProcA@16 ; DefWindowProcA(x,x,x,x)
.text:000006B1                 cmp     esi, esp
.text:000006B3                 call    __RTC_CheckEsp
.text:000006B8
.text:000006B8 loc_6B8:                                ; CODE XREF: SizeTipWndProc(x,x,x,x)+68j
.text:000006B8                                         ; SizeTipWndProc(x,x,x,x)+224j ...
.text:000006B8                 push    edx
.text:000006B9                 mov     ecx, ebp
.text:000006BB                 push    eax
.text:000006BC                 lea     edx, $LN15_0
.text:000006C2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006C7                 pop     eax
.text:000006C8                 pop     edx
.text:000006C9                 pop     edi
.text:000006CA                 pop     esi
.text:000006CB                 mov     ecx, [ebp+var_4]
.text:000006CE                 xor     ecx, ebp
.text:000006D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000006D5                 add     esp, 94h
.text:000006DB                 cmp     ebp, esp
.text:000006DD                 call    __RTC_CheckEsp
.text:000006E2                 mov     esp, ebp
.text:000006E4                 pop     ebp
.text:000006E5                 retn    10h
.text:000006E5 _SizeTipWndProc@16 endp
.text:000006E5
.text:000006E5 ; ---------------------------------------------------------------------------
.text:000006E8 $LN15_0         dd 3                    ; DATA XREF: SizeTipWndProc(x,x,x,x)+33Co
.text:000006EC                 dd offset $LN14_0
.text:000006F0 $LN14_0         dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:000006ECo
.text:000006F8                 dd offset $LN11_0
.text:000006FC                 dd 0FFFFFF8Ch, 40h
.text:00000704                 dd offset $LN12_0
.text:00000708                 dd 0FFFFFF78h, 8
.text:00000710                 dd offset $LN13_0
.text:00000714 $LN13_0         db 73h, 7Ah, 0          ; DATA XREF: .text:00000710o
.text:00000717 $LN12_0         db 70h                  ; DATA XREF: .text:00000704o
.text:00000718                 db 73h, 0
.text:0000071A $LN11_0         dw 7263h                ; DATA XREF: .text:000006F8o
.text:0000071C                 align 10h
.text:00000720 $LN16_0         dd offset $LN2, offset $LN1, offset $LN4, offset $LN5
.text:00000720                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+5Cr
.text:00000720                 dd offset $LN3, offset $LN6 ; jump table for switch statement
.text:00000738 $LN10_0         db      0,     5,     5,     5
.text:00000738                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+55r
.text:00000738                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:00000738                 db      5,     5,     1,     5
.text:00000738                 db      5,     2,     5,     5
.text:00000738                 db      5,     5,     3,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     5,     5
.text:00000738                 db      5,     5,     4
.text:000007BB                 align 10h
.text:000007C0
.text:000007C0 ; =============== S U B R O U T I N E =======================================
.text:000007C0
.text:000007C0 ; Attributes: bp-based frame
.text:000007C0
.text:000007C0                 public _EnableSizeTip
.text:000007C0 _EnableSizeTip  proc near
.text:000007C0
.text:000007C0 arg_0           = dword ptr  8
.text:000007C0
.text:000007C0                 push    ebp
.text:000007C1                 mov     ebp, esp
.text:000007C3                 push    esi
.text:000007C4                 cmp     ds:_tip_wnd, 0
.text:000007CB                 jz      short loc_7F2
.text:000007CD                 cmp     [ebp+arg_0], 0
.text:000007D1                 jnz     short loc_7F2
.text:000007D3                 mov     esi, esp
.text:000007D5                 mov     eax, ds:_tip_wnd
.text:000007DA                 push    eax             ; hWnd
.text:000007DB                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:000007E1                 cmp     esi, esp
.text:000007E3                 call    __RTC_CheckEsp
.text:000007E8                 mov     ds:_tip_wnd, 0
.text:000007F2
.text:000007F2 loc_7F2:                                ; CODE XREF: _EnableSizeTip+Bj
.text:000007F2                                         ; _EnableSizeTip+11j
.text:000007F2                 mov     ecx, [ebp+arg_0]
.text:000007F5                 mov     ds:_tip_enabled, ecx
.text:000007FB                 pop     esi
.text:000007FC                 cmp     ebp, esp
.text:000007FE                 call    __RTC_CheckEsp
.text:00000803                 pop     ebp
.text:00000804                 retn
.text:00000804 _EnableSizeTip  endp
.text:00000804
.text:00000804 ; ---------------------------------------------------------------------------
.text:00000805                 align 4
.text:00000805 _text           ends
.text:00000805
.rtc$TMZ:00000808 ; ===========================================================================
.rtc$TMZ:00000808
.rtc$TMZ:00000808 ; Segment type: Pure data
.rtc$TMZ:00000808 ; Segment permissions: Read
.rtc$TMZ:00000808 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000808                 assume cs:_rtc$TMZ
.rtc$TMZ:00000808                 ;org 808h
.rtc$TMZ:00000808 ; COMDAT (pick any)
.rtc$TMZ:00000808 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000808 _rtc$TMZ        ends
.rtc$TMZ:00000808
.rtc$IMZ:0000080C ; ===========================================================================
.rtc$IMZ:0000080C
.rtc$IMZ:0000080C ; Segment type: Pure data
.rtc$IMZ:0000080C ; Segment permissions: Read
.rtc$IMZ:0000080C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000080C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000080C                 ;org 80Ch
.rtc$IMZ:0000080C ; COMDAT (pick any)
.rtc$IMZ:0000080C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000080C _rtc$IMZ        ends
.rtc$IMZ:0000080C
UNDEF:00000810 ; ===========================================================================
UNDEF:00000810
UNDEF:00000810 ; Segment type: Externs
UNDEF:00000810 ; UNDEF
UNDEF:00000810 ; BOOL __stdcall SetWindowTextA(HWND hWnd, LPCSTR lpString)
UNDEF:00000810                 extrn __imp__SetWindowTextA@8:near
UNDEF:00000810                                         ; CODE XREF: _UpdateSizeTip+2B0p
UNDEF:00000810                                         ; DATA XREF: _UpdateSizeTip+2B0r
UNDEF:00000814 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:00000814                 extrn __imp__ShowWindow@8:near
UNDEF:00000814                                         ; CODE XREF: _UpdateSizeTip+295p
UNDEF:00000814                                         ; DATA XREF: _UpdateSizeTip+295r
UNDEF:00000818 ; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:00000818                 extrn __imp__CreateWindowExA@48:near
UNDEF:00000818                                         ; CODE XREF: _UpdateSizeTip+278p
UNDEF:00000818                                         ; DATA XREF: _UpdateSizeTip+278r
UNDEF:0000081C ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:0000081C                 extrn __imp__GetWindowRect@8:near
UNDEF:0000081C                                         ; CODE XREF: _UpdateSizeTip+1E7p
UNDEF:0000081C                                         ; DATA XREF: _UpdateSizeTip+1E7r
UNDEF:00000820 ; BOOL __stdcall DeleteDC(HDC hdc)
UNDEF:00000820                 extrn __imp__DeleteDC@4:near ; CODE XREF: _UpdateSizeTip+1CDp
UNDEF:00000820                                         ; SizeTipWndProc(x,x,x,x)+30Cp
UNDEF:00000820                                         ; DATA XREF: ...
UNDEF:00000824 ; BOOL __stdcall GetTextExtentPoint32A(HDC hdc, LPCSTR lpString, int c, LPSIZE psizl)
UNDEF:00000824                 extrn __imp__GetTextExtentPoint32A@16:near
UNDEF:00000824                                         ; CODE XREF: _UpdateSizeTip+1B7p
UNDEF:00000824                                         ; SizeTipWndProc(x,x,x,x)+2B0p
UNDEF:00000824                                         ; DATA XREF: ...
UNDEF:00000828 ; size_t __cdecl strlen(const char *Str)
UNDEF:00000828                 extrn _strlen:near      ; CODE XREF: _UpdateSizeTip+1A3p
UNDEF:00000828                                         ; SizeTipWndProc(x,x,x,x)+29Cp
UNDEF:0000082C ; HDC __stdcall CreateCompatibleDC(HDC hdc)
UNDEF:0000082C                 extrn __imp__CreateCompatibleDC@4:near
UNDEF:0000082C                                         ; CODE XREF: _UpdateSizeTip+183p
UNDEF:0000082C                                         ; SizeTipWndProc(x,x,x,x)+25Fp
UNDEF:0000082C                                         ; DATA XREF: ...
UNDEF:00000830 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:00000830                 extrn _sprintf:near     ; CODE XREF: _UpdateSizeTip+16Ap
UNDEF:00000834 ; HFONT __stdcall CreateFontIndirectA(const LOGFONTA *lplf)
UNDEF:00000834                 extrn __imp__CreateFontIndirectA@4:near
UNDEF:00000834                                         ; CODE XREF: _UpdateSizeTip+147p
UNDEF:00000834                                         ; DATA XREF: _UpdateSizeTip+147r
UNDEF:00000838 ; BOOL __stdcall SystemParametersInfoA(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni)
UNDEF:00000838                 extrn __imp__SystemParametersInfoA@16:near
UNDEF:00000838                                         ; CODE XREF: _UpdateSizeTip+131p
UNDEF:00000838                                         ; DATA XREF: _UpdateSizeTip+131r
UNDEF:0000083C ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000083C                 extrn _memset:near      ; CODE XREF: _UpdateSizeTip+10Dp
UNDEF:00000840 ; DWORD __stdcall GetSysColor(int nIndex)
UNDEF:00000840                 extrn __imp__GetSysColor@4:near
UNDEF:00000840                                         ; CODE XREF: _UpdateSizeTip+D7p
UNDEF:00000840                                         ; _UpdateSizeTip+EDp
UNDEF:00000840                                         ; DATA XREF: ...
UNDEF:00000844 ; ATOM __stdcall RegisterClassA(const WNDCLASSA *lpWndClass)
UNDEF:00000844                 extrn __imp__RegisterClassA@4:near
UNDEF:00000844                                         ; CODE XREF: _UpdateSizeTip+C0p
UNDEF:00000844                                         ; DATA XREF: _UpdateSizeTip+C0r
UNDEF:00000848 ; HINSTANCE hinst
UNDEF:00000848                 extrn _hinst:near       ; DATA XREF: _UpdateSizeTip+79r
UNDEF:00000848                                         ; _UpdateSizeTip+23Cr
UNDEF:0000084C                 extrn ___security_cookie:near ; DATA XREF: _UpdateSizeTip+1Dr
UNDEF:0000084C                                         ; SizeTipWndProc(x,x,x,x)+1Dr
UNDEF:00000850 ; __fastcall __security_check_cookie(x)
UNDEF:00000850                 extrn @__security_check_cookie@4:near
UNDEF:00000850                                         ; CODE XREF: _UpdateSizeTip+2D5p
UNDEF:00000850                                         ; SizeTipWndProc(x,x,x,x)+350p
UNDEF:00000854 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000854                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000854                                         ; CODE XREF: _UpdateSizeTip+2C7p
UNDEF:00000854                                         ; SizeTipWndProc(x,x,x,x)+342p
UNDEF:00000858                 extrn __RTC_CheckEsp:near ; CODE XREF: _UpdateSizeTip+C8p
UNDEF:00000858                                         ; _UpdateSizeTip+DFp ...
UNDEF:0000085C                 extrn __RTC_Shutdown:near
UNDEF:0000085C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000860                 extrn __RTC_InitBase:near
UNDEF:00000860                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000864 ; LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00000864                 extrn __imp__DefWindowProcA@16:near
UNDEF:00000864                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+32Bp
UNDEF:00000864                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+32Br
UNDEF:00000868 ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:00000868                 extrn __imp__InvalidateRect@12:near
UNDEF:00000868                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+2F6p
UNDEF:00000868                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+2F6r
UNDEF:0000086C ; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
UNDEF:0000086C                 extrn __imp__SetWindowPos@28:near
UNDEF:0000086C                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+2DFp
UNDEF:0000086C                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+2DFr
UNDEF:00000870 ; BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint)
UNDEF:00000870                 extrn __imp__EndPaint@8:near
UNDEF:00000870                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+215p
UNDEF:00000870                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+215r
UNDEF:00000874 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:00000874                 extrn __imp__DeleteObject@4:near
UNDEF:00000874                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+1FEp
UNDEF:00000874                                         ; SizeTipWndProc(x,x,x,x)+239p
UNDEF:00000874                                         ; DATA XREF: ...
UNDEF:00000878                 extrn _safefree:near    ; CODE XREF: SizeTipWndProc(x,x,x,x)+1D9p
UNDEF:0000087C ; BOOL __stdcall TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c)
UNDEF:0000087C                 extrn __imp__TextOutA@20:near
UNDEF:0000087C                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+1C8p
UNDEF:0000087C                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+1C8r
UNDEF:00000880 ; COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color)
UNDEF:00000880                 extrn __imp__SetBkColor@8:near
UNDEF:00000880                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+19Fp
UNDEF:00000880                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+19Fr
UNDEF:00000884 ; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
UNDEF:00000884                 extrn __imp__SetTextColor@8:near
UNDEF:00000884                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+185p
UNDEF:00000884                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+185r
UNDEF:00000888 ; int __stdcall GetWindowTextA(HWND hWnd, LPSTR lpString, int nMaxCount)
UNDEF:00000888                 extrn __imp__GetWindowTextA@12:near
UNDEF:00000888                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+16Cp
UNDEF:00000888                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+16Cr
UNDEF:0000088C                 extrn _safemalloc:near  ; CODE XREF: SizeTipWndProc(x,x,x,x)+150p
UNDEF:00000890 ; int __stdcall GetWindowTextLengthA(HWND hWnd)
UNDEF:00000890                 extrn __imp__GetWindowTextLengthA@4:near
UNDEF:00000890                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+137p
UNDEF:00000890                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+137r
UNDEF:00000894 ; BOOL __stdcall Rectangle(HDC hdc, int left, int top, int right, int bottom)
UNDEF:00000894                 extrn __imp__Rectangle@20:near
UNDEF:00000894                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+124p
UNDEF:00000894                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+124r
UNDEF:00000898 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:00000898                 extrn __imp__GetClientRect@8:near
UNDEF:00000898                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+101p
UNDEF:00000898                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+101r
UNDEF:0000089C ; HBRUSH __stdcall CreateSolidBrush(COLORREF color)
UNDEF:0000089C                 extrn __imp__CreateSolidBrush@4:near
UNDEF:0000089C                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+CDp
UNDEF:0000089C                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+CDr
UNDEF:000008A0 ; HGDIOBJ __stdcall GetStockObject(int i)
UNDEF:000008A0                 extrn __imp__GetStockObject@4:near
UNDEF:000008A0                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+A4p
UNDEF:000008A0                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+A4r
UNDEF:000008A4 ; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
UNDEF:000008A4                 extrn __imp__SelectObject@8:near
UNDEF:000008A4                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+93p
UNDEF:000008A4                                         ; SizeTipWndProc(x,x,x,x)+B8p ...
UNDEF:000008A8 ; HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint)
UNDEF:000008A8                 extrn __imp__BeginPaint@8:near
UNDEF:000008A8                                         ; CODE XREF: SizeTipWndProc(x,x,x,x)+77p
UNDEF:000008A8                                         ; DATA XREF: SizeTipWndProc(x,x,x,x)+77r
UNDEF:000008AC ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:000008AC                 extrn __imp__DestroyWindow@4:near
UNDEF:000008AC                                         ; CODE XREF: _EnableSizeTip+1Bp
UNDEF:000008AC                                         ; DATA XREF: _EnableSizeTip+1Br
UNDEF:000008AC
UNDEF:000008AC
UNDEF:000008AC                 end