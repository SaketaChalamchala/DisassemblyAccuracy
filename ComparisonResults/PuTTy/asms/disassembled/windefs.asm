.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : D72D44A19618DE476FC17F7AAE83FE8D
.data:00000000 ; Input CRC32 : B17946B9
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\windefs.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG87946[]
.data:00000000 $SG87946        db 'Font',0             ; DATA XREF: _platform_default_fontspec+3o
.data:00000005                 align 4
.data:00000008 $SG87947        db 'Courier New',0      ; DATA XREF: _platform_default_fontspec+1Eo
.data:00000014 ; char _SG87954[]
.data:00000014 $SG87954        db 'LogFileName',0      ; DATA XREF: _platform_default_filename+3o
.data:00000020 $SG87955        db 'putty.log',0        ; DATA XREF: _platform_default_filename+18o
.data:0000002A                 align 4
.data:0000002C ; char _SG87962[]
.data:0000002C $SG87962        db 'SerialLine',0       ; DATA XREF: _platform_default_s+3o
.data:00000037                 align 4
.data:00000038 $SG87963        db 'COM1',0             ; DATA XREF: _platform_default_s+18o
.data:0000003D                 align 10h
.data:0000003D _data           ends
.data:0000003D
.bss:00000040 ; ===========================================================================
.bss:00000040
.bss:00000040 ; Segment type: Uninitialized
.bss:00000040 ; Segment permissions: Read/Write
.bss:00000040 _bss            segment byte public 'BSS' use32
.bss:00000040                 assume cs:_bss
.bss:00000040                 ;org 40h
.bss:00000040                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000040 $SG87949        db    ? ;               ; DATA XREF: _platform_default_fontspec+35o
.bss:00000041 $SG87957        db    ? ;               ; DATA XREF: _platform_default_filename:loc_BDo
.bss:00000042                 align 4
.bss:00000042 _bss            ends
.bss:00000042
.text:00000044 ; ===========================================================================
.text:00000044
.text:00000044 ; Segment type: Pure code
.text:00000044 ; Segment permissions: Read/Execute
.text:00000044 _text           segment para public 'CODE' use32
.text:00000044                 assume cs:_text
.text:00000044                 ;org 44h
.text:00000044                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000044
.text:00000044 ; =============== S U B R O U T I N E =======================================
.text:00000044
.text:00000044 ; Attributes: bp-based frame
.text:00000044
.text:00000044 ; int __cdecl platform_default_fontspec(char *)
.text:00000044                 public _platform_default_fontspec
.text:00000044 _platform_default_fontspec proc near
.text:00000044
.text:00000044 arg_0           = dword ptr  8
.text:00000044
.text:00000044                 push    ebp
.text:00000045                 mov     ebp, esp
.text:00000047                 push    offset $SG87946 ; "Font"
.text:0000004C                 mov     eax, [ebp+arg_0]
.text:0000004F                 push    eax             ; char *
.text:00000050                 call    _strcmp
.text:00000055                 add     esp, 8
.text:00000058                 test    eax, eax
.text:0000005A                 jnz     short loc_73
.text:0000005C                 push    0
.text:0000005E                 push    0Ah
.text:00000060                 push    0
.text:00000062                 push    offset $SG87947 ; "Courier New"
.text:00000067                 call    _fontspec_new
.text:0000006C                 add     esp, 10h
.text:0000006F                 jmp     short loc_86
.text:00000071 ; ---------------------------------------------------------------------------
.text:00000071                 jmp     short loc_86
.text:00000073 ; ---------------------------------------------------------------------------
.text:00000073
.text:00000073 loc_73:                                 ; CODE XREF: _platform_default_fontspec+16j
.text:00000073                 push    0
.text:00000075                 push    0
.text:00000077                 push    0
.text:00000079                 push    offset $SG87949
.text:0000007E                 call    _fontspec_new
.text:00000083                 add     esp, 10h
.text:00000086
.text:00000086 loc_86:                                 ; CODE XREF: _platform_default_fontspec+2Bj
.text:00000086                                         ; _platform_default_fontspec+2Dj
.text:00000086                 cmp     ebp, esp
.text:00000088                 call    __RTC_CheckEsp
.text:0000008D                 pop     ebp
.text:0000008E                 retn
.text:0000008E _platform_default_fontspec endp
.text:0000008E
.text:0000008E ; ---------------------------------------------------------------------------
.text:0000008F                 db 5 dup(0CCh)
.text:00000094
.text:00000094 ; =============== S U B R O U T I N E =======================================
.text:00000094
.text:00000094 ; Attributes: bp-based frame
.text:00000094
.text:00000094 ; int __cdecl platform_default_filename(char *)
.text:00000094                 public _platform_default_filename
.text:00000094 _platform_default_filename proc near
.text:00000094
.text:00000094 arg_0           = dword ptr  8
.text:00000094
.text:00000094                 push    ebp
.text:00000095                 mov     ebp, esp
.text:00000097                 push    offset $SG87954 ; "LogFileName"
.text:0000009C                 mov     eax, [ebp+arg_0]
.text:0000009F                 push    eax             ; char *
.text:000000A0                 call    _strcmp
.text:000000A5                 add     esp, 8
.text:000000A8                 test    eax, eax
.text:000000AA                 jnz     short loc_BD
.text:000000AC                 push    offset $SG87955 ; "putty.log"
.text:000000B1                 call    _filename_from_str
.text:000000B6                 add     esp, 4
.text:000000B9                 jmp     short loc_CA
.text:000000BB ; ---------------------------------------------------------------------------
.text:000000BB                 jmp     short loc_CA
.text:000000BD ; ---------------------------------------------------------------------------
.text:000000BD
.text:000000BD loc_BD:                                 ; CODE XREF: _platform_default_filename+16j
.text:000000BD                 push    offset $SG87957
.text:000000C2                 call    _filename_from_str
.text:000000C7                 add     esp, 4
.text:000000CA
.text:000000CA loc_CA:                                 ; CODE XREF: _platform_default_filename+25j
.text:000000CA                                         ; _platform_default_filename+27j
.text:000000CA                 cmp     ebp, esp
.text:000000CC                 call    __RTC_CheckEsp
.text:000000D1                 pop     ebp
.text:000000D2                 retn
.text:000000D2 _platform_default_filename endp
.text:000000D2
.text:000000D2 ; ---------------------------------------------------------------------------
.text:000000D3                 align 4
.text:000000D4
.text:000000D4 ; =============== S U B R O U T I N E =======================================
.text:000000D4
.text:000000D4 ; Attributes: bp-based frame
.text:000000D4
.text:000000D4 ; int __cdecl platform_default_s(char *)
.text:000000D4                 public _platform_default_s
.text:000000D4 _platform_default_s proc near
.text:000000D4
.text:000000D4 arg_0           = dword ptr  8
.text:000000D4
.text:000000D4                 push    ebp
.text:000000D5                 mov     ebp, esp
.text:000000D7                 push    offset $SG87962 ; "SerialLine"
.text:000000DC                 mov     eax, [ebp+arg_0]
.text:000000DF                 push    eax             ; char *
.text:000000E0                 call    _strcmp
.text:000000E5                 add     esp, 8
.text:000000E8                 test    eax, eax
.text:000000EA                 jnz     short loc_FB
.text:000000EC                 push    offset $SG87963 ; "COM1"
.text:000000F1                 call    _dupstr
.text:000000F6                 add     esp, 4
.text:000000F9                 jmp     short loc_FD
.text:000000FB ; ---------------------------------------------------------------------------
.text:000000FB
.text:000000FB loc_FB:                                 ; CODE XREF: _platform_default_s+16j
.text:000000FB                 xor     eax, eax
.text:000000FD
.text:000000FD loc_FD:                                 ; CODE XREF: _platform_default_s+25j
.text:000000FD                 cmp     ebp, esp
.text:000000FF                 call    __RTC_CheckEsp
.text:00000104                 pop     ebp
.text:00000105                 retn
.text:00000105 _platform_default_s endp
.text:00000105
.text:00000105 ; ---------------------------------------------------------------------------
.text:00000106                 db 0Eh dup(0CCh)
.text:00000114
.text:00000114 ; =============== S U B R O U T I N E =======================================
.text:00000114
.text:00000114 ; Attributes: bp-based frame
.text:00000114
.text:00000114                 public _platform_default_i
.text:00000114 _platform_default_i proc near
.text:00000114
.text:00000114 arg_4           = dword ptr  0Ch
.text:00000114
.text:00000114                 push    ebp
.text:00000115                 mov     ebp, esp
.text:00000117                 mov     eax, [ebp+arg_4]
.text:0000011A                 pop     ebp
.text:0000011B                 retn
.text:0000011B _platform_default_i endp
.text:0000011B
.text:0000011B _text           ends
.text:0000011B
.rtc$TMZ:0000011C ; ===========================================================================
.rtc$TMZ:0000011C
.rtc$TMZ:0000011C ; Segment type: Pure data
.rtc$TMZ:0000011C ; Segment permissions: Read
.rtc$TMZ:0000011C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000011C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000011C                 ;org 11Ch
.rtc$TMZ:0000011C ; COMDAT (pick any)
.rtc$TMZ:0000011C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000011C _rtc$TMZ        ends
.rtc$TMZ:0000011C
.rtc$IMZ:00000120 ; ===========================================================================
.rtc$IMZ:00000120
.rtc$IMZ:00000120 ; Segment type: Pure data
.rtc$IMZ:00000120 ; Segment permissions: Read
.rtc$IMZ:00000120 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000120                 assume cs:_rtc$IMZ
.rtc$IMZ:00000120                 ;org 120h
.rtc$IMZ:00000120 ; COMDAT (pick any)
.rtc$IMZ:00000120 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000120 _rtc$IMZ        ends
.rtc$IMZ:00000120
UNDEF:00000130 ; ===========================================================================
UNDEF:00000130
UNDEF:00000130 ; Segment type: Externs
UNDEF:00000130 ; UNDEF
UNDEF:00000130                 extrn _fontspec_new:near
UNDEF:00000130                                         ; CODE XREF: _platform_default_fontspec+23p
UNDEF:00000130                                         ; _platform_default_fontspec+3Ap
UNDEF:00000134 ; int __cdecl strcmp(const char *, const char *)
UNDEF:00000134                 extrn _strcmp:near      ; CODE XREF: _platform_default_fontspec+Cp
UNDEF:00000134                                         ; _platform_default_filename+Cp ...
UNDEF:00000138                 extrn __RTC_CheckEsp:near
UNDEF:00000138                                         ; CODE XREF: _platform_default_fontspec+44p
UNDEF:00000138                                         ; _platform_default_filename+38p ...
UNDEF:0000013C                 extrn __RTC_Shutdown:near
UNDEF:0000013C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000140                 extrn __RTC_InitBase:near
UNDEF:00000140                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000144                 extrn _filename_from_str:near
UNDEF:00000144                                         ; CODE XREF: _platform_default_filename+1Dp
UNDEF:00000144                                         ; _platform_default_filename+2Ep
UNDEF:00000148                 extrn _dupstr:near      ; CODE XREF: _platform_default_s+1Dp
UNDEF:00000148
UNDEF:00000148
UNDEF:00000148                 end