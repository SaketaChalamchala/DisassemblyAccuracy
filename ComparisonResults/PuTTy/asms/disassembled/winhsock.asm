.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 62C1D3EC68820F51DD4F8ABEE47362BB
.data:00000000 ; Input CRC32 : 60C80881
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winhsock.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85572        db 'Read error from handle',0
.data:00000000                                         ; DATA XREF: _handle_gotdata+27o
.data:00000017                 align 4
.data:00000018 ; wchar_t _SG85578
.data:00000018 $SG85578:                               ; DATA XREF: _handle_gotdata+98o
.data:00000018                 unicode 0, <..\..\winhsock.c>,0
.data:0000003A                 align 10h
.data:00000040 ; wchar_t _SG85579
.data:00000040 $SG85579:                               ; DATA XREF: _handle_gotdata+9Do
.data:00000040                 unicode 0, <ps->
.data:00000040                 dw 3Eh
.data:00000040                 unicode 0, <frozen != FREEZING && ps->
.data:00000040                 dw 3Eh
.data:00000040                 unicode 0, <frozen != THAWING>,0
.data:000000A0 ; wchar_t _SG85646
.data:000000A0 $SG85646:                               ; DATA XREF: _handle_socket_unfreeze+5Ao
.data:000000A0                 unicode 0, <..\..\winhsock.c>,0
.data:000000C2                 align 4
.data:000000C4 ; wchar_t _SG85647
.data:000000C4 $SG85647:                               ; DATA XREF: _handle_socket_unfreeze+5Fo
.data:000000C4                 unicode 0, <len >
.data:000000C4                 dw 3Eh
.data:000000C4                 unicode 0, < 0>,0
.data:000000D4 ; wchar_t _SG85674
.data:000000D4 $SG85674:                               ; DATA XREF: _sk_handle_set_frozen+90o
.data:000000D4                 unicode 0, <..\..\winhsock.c>,0
.data:000000F6                 align 4
.data:000000F8 ; wchar_t _SG85675
.data:000000F8 $SG85675:                               ; DATA XREF: _sk_handle_set_frozen+95o
.data:000000F8                 unicode 0, <bufchain_size(&ps->
.data:000000F8                 dw 3Eh
.data:000000F8                 unicode 0, <inputdata) == 0>,0
.data:0000013E                 align 10h
.data:0000013E _data           ends
.data:0000013E
.rdata:00000140 ; ===========================================================================
.rdata:00000140
.rdata:00000140 ; Segment type: Pure data
.rdata:00000140 ; Segment permissions: Read
.rdata:00000140 _rdata          segment dword public 'DATA' use32
.rdata:00000140                 assume cs:_rdata
.rdata:00000140                 ;org 140h
.rdata:00000140 ; `make_handle_socket'::`2'::socket_fn_table
.rdata:00000140 ?socket_fn_table@?1??make_handle_socket@@9@9 dd offset _sk_handle_plug
.rdata:00000140                                         ; DATA XREF: _make_handle_socket+32o
.rdata:00000144                 dd offset _sk_handle_close
.rdata:00000148                 dd offset _sk_handle_write
.rdata:0000014C                 dd offset _sk_handle_write_oob
.rdata:00000150                 dd offset _sk_handle_write_eof
.rdata:00000154                 dd offset _sk_handle_flush
.rdata:00000158                 dd offset _sk_handle_set_frozen
.rdata:0000015C                 dd offset _sk_handle_socket_error
.rdata:0000015C _rdata          ends
.rdata:0000015C
.text:00000160 ; ===========================================================================
.text:00000160
.text:00000160 ; Segment type: Pure code
.text:00000160 ; Segment permissions: Read/Execute
.text:00000160 _text           segment para public 'CODE' use32
.text:00000160                 assume cs:_text
.text:00000160                 ;org 160h
.text:00000160                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160 _sk_handle_plug proc near               ; DATA XREF: .rdata:`make_handle_socket'::`2'::socket_fn_tableo
.text:00000160
.text:00000160 var_8           = dword ptr -8
.text:00000160 var_4           = dword ptr -4
.text:00000160 arg_0           = dword ptr  8
.text:00000160 arg_4           = dword ptr  0Ch
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 sub     esp, 8
.text:00000166                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000016D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000174                 mov     eax, [ebp+arg_0]
.text:00000177                 mov     [ebp+var_4], eax
.text:0000017A                 mov     ecx, [ebp+var_4]
.text:0000017D                 mov     edx, [ecx+28h]
.text:00000180                 mov     [ebp+var_8], edx
.text:00000183                 cmp     [ebp+arg_4], 0
.text:00000187                 jz      short loc_192
.text:00000189                 mov     eax, [ebp+var_4]
.text:0000018C                 mov     ecx, [ebp+arg_4]
.text:0000018F                 mov     [eax+28h], ecx
.text:00000192
.text:00000192 loc_192:                                ; CODE XREF: _sk_handle_plug+27j
.text:00000192                 mov     eax, [ebp+var_8]
.text:00000195                 mov     esp, ebp
.text:00000197                 pop     ebp
.text:00000198                 retn
.text:00000198 _sk_handle_plug endp
.text:00000198
.text:00000198 ; ---------------------------------------------------------------------------
.text:00000199                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 _sk_handle_close proc near              ; DATA XREF: .rdata:00000144o
.text:000001A0
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 arg_0           = dword ptr  8
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 push    ecx
.text:000001A4                 push    esi
.text:000001A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001AC                 mov     eax, [ebp+arg_0]
.text:000001AF                 mov     [ebp+var_4], eax
.text:000001B2                 mov     ecx, [ebp+var_4]
.text:000001B5                 mov     edx, [ecx+0Ch]
.text:000001B8                 push    edx
.text:000001B9                 call    _handle_free
.text:000001BE                 add     esp, 4
.text:000001C1                 mov     eax, [ebp+var_4]
.text:000001C4                 mov     ecx, [eax+10h]
.text:000001C7                 push    ecx
.text:000001C8                 call    _handle_free
.text:000001CD                 add     esp, 4
.text:000001D0                 mov     esi, esp
.text:000001D2                 mov     edx, [ebp+var_4]
.text:000001D5                 mov     eax, [edx+4]
.text:000001D8                 push    eax             ; hObject
.text:000001D9                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000001DF                 cmp     esi, esp
.text:000001E1                 call    __RTC_CheckEsp
.text:000001E6                 mov     ecx, [ebp+var_4]
.text:000001E9                 mov     edx, [ebp+var_4]
.text:000001EC                 mov     eax, [ecx+8]
.text:000001EF                 cmp     eax, [edx+4]
.text:000001F2                 jz      short loc_20A
.text:000001F4                 mov     esi, esp
.text:000001F6                 mov     ecx, [ebp+var_4]
.text:000001F9                 mov     edx, [ecx+8]
.text:000001FC                 push    edx             ; hObject
.text:000001FD                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000203                 cmp     esi, esp
.text:00000205                 call    __RTC_CheckEsp
.text:0000020A
.text:0000020A loc_20A:                                ; CODE XREF: _sk_handle_close+52j
.text:0000020A                 mov     eax, [ebp+var_4]
.text:0000020D                 add     eax, 18h
.text:00000210                 push    eax
.text:00000211                 call    _bufchain_clear
.text:00000216                 add     esp, 4
.text:00000219                 mov     ecx, [ebp+var_4]
.text:0000021C                 push    ecx
.text:0000021D                 call    _safefree
.text:00000222                 add     esp, 4
.text:00000225                 pop     esi
.text:00000226                 add     esp, 4
.text:00000229                 cmp     ebp, esp
.text:0000022B                 call    __RTC_CheckEsp
.text:00000230                 mov     esp, ebp
.text:00000232                 pop     ebp
.text:00000233                 retn
.text:00000233 _sk_handle_close endp
.text:00000233
.text:00000233 ; ---------------------------------------------------------------------------
.text:00000234                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 _sk_handle_write proc near              ; CODE XREF: _sk_handle_write_oob+Fp
.text:00000240                                         ; DATA XREF: .rdata:00000148o
.text:00000240
.text:00000240 var_4           = dword ptr -4
.text:00000240 arg_0           = dword ptr  8
.text:00000240 arg_4           = dword ptr  0Ch
.text:00000240 arg_8           = dword ptr  10h
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 push    ecx
.text:00000244                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000024B                 mov     eax, [ebp+arg_0]
.text:0000024E                 mov     [ebp+var_4], eax
.text:00000251                 mov     ecx, [ebp+arg_8]
.text:00000254                 push    ecx
.text:00000255                 mov     edx, [ebp+arg_4]
.text:00000258                 push    edx
.text:00000259                 mov     eax, [ebp+var_4]
.text:0000025C                 mov     ecx, [eax+0Ch]
.text:0000025F                 push    ecx
.text:00000260                 call    _handle_write
.text:00000265                 add     esp, 0Ch
.text:00000268                 add     esp, 4
.text:0000026B                 cmp     ebp, esp
.text:0000026D                 call    __RTC_CheckEsp
.text:00000272                 mov     esp, ebp
.text:00000274                 pop     ebp
.text:00000275                 retn
.text:00000275 _sk_handle_write endp
.text:00000275
.text:00000275 ; ---------------------------------------------------------------------------
.text:00000276                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 _sk_handle_write_oob proc near          ; DATA XREF: .rdata:0000014Co
.text:00000280
.text:00000280 arg_0           = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280 arg_8           = dword ptr  10h
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 mov     eax, [ebp+arg_8]
.text:00000286                 push    eax
.text:00000287                 mov     ecx, [ebp+arg_4]
.text:0000028A                 push    ecx
.text:0000028B                 mov     edx, [ebp+arg_0]
.text:0000028E                 push    edx
.text:0000028F                 call    _sk_handle_write
.text:00000294                 add     esp, 0Ch
.text:00000297                 cmp     ebp, esp
.text:00000299                 call    __RTC_CheckEsp
.text:0000029E                 pop     ebp
.text:0000029F                 retn
.text:0000029F _sk_handle_write_oob endp
.text:0000029F
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 _sk_handle_write_eof proc near          ; DATA XREF: .rdata:00000150o
.text:000002A0
.text:000002A0 var_4           = dword ptr -4
.text:000002A0 arg_0           = dword ptr  8
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 push    ecx
.text:000002A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002AB                 mov     eax, [ebp+arg_0]
.text:000002AE                 mov     [ebp+var_4], eax
.text:000002B1                 mov     ecx, [ebp+var_4]
.text:000002B4                 mov     edx, [ecx+0Ch]
.text:000002B7                 push    edx
.text:000002B8                 call    _handle_write_eof
.text:000002BD                 add     esp, 4
.text:000002C0                 add     esp, 4
.text:000002C3                 cmp     ebp, esp
.text:000002C5                 call    __RTC_CheckEsp
.text:000002CA                 mov     esp, ebp
.text:000002CC                 pop     ebp
.text:000002CD                 retn
.text:000002CD _sk_handle_write_eof endp
.text:000002CD
.text:000002CD ; ---------------------------------------------------------------------------
.text:000002CE                 align 10h
.text:000002D0
.text:000002D0 ; =============== S U B R O U T I N E =======================================
.text:000002D0
.text:000002D0 ; Attributes: bp-based frame
.text:000002D0
.text:000002D0 _sk_handle_flush proc near              ; DATA XREF: .rdata:00000154o
.text:000002D0                 push    ebp
.text:000002D1                 mov     ebp, esp
.text:000002D3                 pop     ebp
.text:000002D4                 retn
.text:000002D4 _sk_handle_flush endp
.text:000002D4
.text:000002D4 ; ---------------------------------------------------------------------------
.text:000002D5                 align 10h
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 _sk_handle_set_frozen proc near         ; DATA XREF: .rdata:00000158o
.text:000002E0
.text:000002E0 var_C           = dword ptr -0Ch
.text:000002E0 var_8           = dword ptr -8
.text:000002E0 var_4           = dword ptr -4
.text:000002E0 arg_0           = dword ptr  8
.text:000002E0 arg_4           = dword ptr  0Ch
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 sub     esp, 0Ch
.text:000002E6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000002ED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002FB                 mov     eax, [ebp+arg_0]
.text:000002FE                 mov     [ebp+var_4], eax
.text:00000301                 cmp     [ebp+arg_4], 0
.text:00000305                 jz      short loc_33D
.text:00000307                 mov     ecx, [ebp+var_4]
.text:0000030A                 mov     edx, [ecx+14h]
.text:0000030D                 mov     [ebp+var_8], edx
.text:00000310                 cmp     [ebp+var_8], 3  ; switch 4 cases
.text:00000314                 ja      short loc_33B   ; jumptable 00000319 default case
.text:00000316                 mov     eax, [ebp+var_8]
.text:00000319                 jmp     ds:$LN16[eax*4] ; switch jump
.text:00000320 ; ---------------------------------------------------------------------------
.text:00000320
.text:00000320 $LN9:                                   ; CODE XREF: _sk_handle_set_frozen+39j
.text:00000320                                         ; DATA XREF: .text:$LN16o
.text:00000320                 jmp     loc_3A9         ; jumptable 00000319 cases 1,2
.text:00000325 ; ---------------------------------------------------------------------------
.text:00000325
.text:00000325 $LN8:                                   ; CODE XREF: _sk_handle_set_frozen+39j
.text:00000325                                         ; DATA XREF: .text:$LN16o
.text:00000325                 mov     ecx, [ebp+var_4] ; jumptable 00000319 case 3
.text:00000328                 mov     dword ptr [ecx+14h], 2
.text:0000032F                 jmp     short loc_33B   ; jumptable 00000319 default case
.text:00000331 ; ---------------------------------------------------------------------------
.text:00000331
.text:00000331 $LN7:                                   ; CODE XREF: _sk_handle_set_frozen+39j
.text:00000331                                         ; DATA XREF: .text:$LN16o
.text:00000331                 mov     edx, [ebp+var_4] ; jumptable 00000319 case 0
.text:00000334                 mov     dword ptr [edx+14h], 1
.text:0000033B
.text:0000033B loc_33B:                                ; CODE XREF: _sk_handle_set_frozen+34j
.text:0000033B                                         ; _sk_handle_set_frozen+4Fj
.text:0000033B                 jmp     short loc_3A9   ; jumptable 00000319 default case
.text:0000033D ; ---------------------------------------------------------------------------
.text:0000033D
.text:0000033D loc_33D:                                ; CODE XREF: _sk_handle_set_frozen+25j
.text:0000033D                 mov     eax, [ebp+var_4]
.text:00000340                 mov     ecx, [eax+14h]
.text:00000343                 mov     [ebp+var_C], ecx
.text:00000346                 cmp     [ebp+var_C], 3  ; switch 4 cases
.text:0000034A                 ja      short loc_3A9   ; jumptable 0000034F default case
.text:0000034C                 mov     edx, [ebp+var_C]
.text:0000034F                 jmp     ds:$LN17[edx*4] ; switch jump
.text:00000356 ; ---------------------------------------------------------------------------
.text:00000356
.text:00000356 $LN3:                                   ; CODE XREF: _sk_handle_set_frozen+6Fj
.text:00000356                                         ; DATA XREF: .text:$LN17o
.text:00000356                 jmp     short loc_3A9   ; jumptable 0000034F cases 0,3
.text:00000358 ; ---------------------------------------------------------------------------
.text:00000358
.text:00000358 $LN2:                                   ; CODE XREF: _sk_handle_set_frozen+6Fj
.text:00000358                                         ; DATA XREF: .text:$LN17o
.text:00000358                 mov     eax, [ebp+var_4] ; jumptable 0000034F case 1
.text:0000035B                 add     eax, 18h
.text:0000035E                 push    eax
.text:0000035F                 call    _bufchain_size
.text:00000364                 add     esp, 4
.text:00000367                 test    eax, eax
.text:00000369                 jz      short loc_382
.text:0000036B                 push    0D8h ; '+'      ; Line
.text:00000370                 push    offset $SG85674 ; "..\\..\\winhsock.c"
.text:00000375                 push    offset $SG85675 ; "bufchain_size(&ps->inputdata) == 0"
.text:0000037A                 call    __wassert
.text:0000037F ; ---------------------------------------------------------------------------
.text:0000037F                 add     esp, 0Ch
.text:00000382
.text:00000382 loc_382:                                ; CODE XREF: _sk_handle_set_frozen+89j
.text:00000382                 mov     edx, [ebp+var_4]
.text:00000385                 mov     dword ptr [edx+14h], 0
.text:0000038C                 jmp     short loc_3A9   ; jumptable 0000034F default case
.text:0000038E ; ---------------------------------------------------------------------------
.text:0000038E
.text:0000038E $LN1:                                   ; CODE XREF: _sk_handle_set_frozen+6Fj
.text:0000038E                                         ; DATA XREF: .text:$LN17o
.text:0000038E                 mov     eax, [ebp+var_4] ; jumptable 0000034F case 2
.text:00000391                 mov     dword ptr [eax+14h], 3
.text:00000398                 mov     ecx, [ebp+var_4]
.text:0000039B                 push    ecx
.text:0000039C                 push    offset _handle_socket_unfreeze
.text:000003A1                 call    _queue_toplevel_callback
.text:000003A6                 add     esp, 8
.text:000003A9
.text:000003A9 loc_3A9:                                ; CODE XREF: _sk_handle_set_frozen:$LN9j
.text:000003A9                                         ; _sk_handle_set_frozen:loc_33Bj ...
.text:000003A9                 add     esp, 0Ch        ; jumptable 0000034F default case
.text:000003AC                 cmp     ebp, esp
.text:000003AE                 call    __RTC_CheckEsp
.text:000003B3                 mov     esp, ebp
.text:000003B5                 pop     ebp
.text:000003B6                 retn
.text:000003B6 _sk_handle_set_frozen endp
.text:000003B6
.text:000003B6 ; ---------------------------------------------------------------------------
.text:000003B7                 align 4
.text:000003B8 $LN16           dd offset $LN7          ; DATA XREF: _sk_handle_set_frozen+39r
.text:000003B8                 dd offset $LN9          ; jump table for switch statement
.text:000003B8                 dd offset $LN9
.text:000003B8                 dd offset $LN8
.text:000003C8 $LN17           dd offset $LN3          ; DATA XREF: _sk_handle_set_frozen+6Fr
.text:000003C8                 dd offset $LN2          ; jump table for switch statement
.text:000003C8                 dd offset $LN1
.text:000003C8                 dd offset $LN3
.text:000003D8                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 _handle_socket_unfreeze proc near       ; DATA XREF: _sk_handle_set_frozen+BCo
.text:000003E0                                         ; _handle_socket_unfreeze+B0o
.text:000003E0
.text:000003E0 var_20          = dword ptr -20h
.text:000003E0 var_1C          = dword ptr -1Ch
.text:000003E0 var_18          = dword ptr -18h
.text:000003E0 var_14          = dword ptr -14h
.text:000003E0 var_10          = dword ptr -10h
.text:000003E0 var_C           = dword ptr -0Ch
.text:000003E0 var_8           = dword ptr -8
.text:000003E0 var_4           = dword ptr -4
.text:000003E0 arg_0           = dword ptr  8
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 sub     esp, 20h
.text:000003E6                 push    esi
.text:000003E7                 mov     eax, 0CCCCCCCCh
.text:000003EC                 mov     [ebp+var_20], eax
.text:000003EF                 mov     [ebp+var_1C], eax
.text:000003F2                 mov     [ebp+var_18], eax
.text:000003F5                 mov     [ebp+var_14], eax
.text:000003F8                 mov     [ebp+var_10], eax
.text:000003FB                 mov     [ebp+var_C], eax
.text:000003FE                 mov     [ebp+var_8], eax
.text:00000401                 mov     [ebp+var_4], eax
.text:00000404                 mov     eax, [ebp+arg_0]
.text:00000407                 mov     [ebp+var_4], eax
.text:0000040A                 mov     ecx, [ebp+var_4]
.text:0000040D                 cmp     dword ptr [ecx+14h], 3
.text:00000411                 jz      short loc_418
.text:00000413                 jmp     loc_4BC
.text:00000418 ; ---------------------------------------------------------------------------
.text:00000418
.text:00000418 loc_418:                                ; CODE XREF: _handle_socket_unfreeze+31j
.text:00000418                 lea     edx, [ebp+var_18]
.text:0000041B                 push    edx
.text:0000041C                 lea     eax, [ebp+var_C]
.text:0000041F                 push    eax
.text:00000420                 mov     ecx, [ebp+var_4]
.text:00000423                 add     ecx, 18h
.text:00000426                 push    ecx
.text:00000427                 call    _bufchain_prefix
.text:0000042C                 add     esp, 0Ch
.text:0000042F                 cmp     [ebp+var_18], 0
.text:00000433                 jg      short loc_44C
.text:00000435                 push    9Ah ; 'Ü'       ; Line
.text:0000043A                 push    offset $SG85646 ; "..\\..\\winhsock.c"
.text:0000043F                 push    offset $SG85647 ; "len > 0"
.text:00000444                 call    __wassert
.text:00000449 ; ---------------------------------------------------------------------------
.text:00000449                 add     esp, 0Ch
.text:0000044C
.text:0000044C loc_44C:                                ; CODE XREF: _handle_socket_unfreeze+53j
.text:0000044C                 mov     esi, esp
.text:0000044E                 mov     eax, [ebp+var_18]
.text:00000451                 push    eax
.text:00000452                 mov     ecx, [ebp+var_C]
.text:00000455                 push    ecx
.text:00000456                 push    0
.text:00000458                 mov     edx, [ebp+var_4]
.text:0000045B                 mov     eax, [edx+28h]
.text:0000045E                 push    eax
.text:0000045F                 mov     ecx, [ebp+var_4]
.text:00000462                 mov     edx, [ecx+28h]
.text:00000465                 mov     eax, [edx]
.text:00000467                 mov     ecx, [eax+8]
.text:0000046A                 call    ecx
.text:0000046C                 add     esp, 10h
.text:0000046F                 cmp     esi, esp
.text:00000471                 call    __RTC_CheckEsp
.text:00000476                 mov     [ebp+var_20], eax
.text:00000479                 mov     edx, [ebp+var_4]
.text:0000047C                 add     edx, 18h
.text:0000047F                 push    edx
.text:00000480                 call    _bufchain_size
.text:00000485                 add     esp, 4
.text:00000488                 test    eax, eax
.text:0000048A                 jle     short loc_49F
.text:0000048C                 mov     eax, [ebp+var_4]
.text:0000048F                 push    eax
.text:00000490                 push    offset _handle_socket_unfreeze
.text:00000495                 call    _queue_toplevel_callback
.text:0000049A                 add     esp, 8
.text:0000049D                 jmp     short loc_4BC
.text:0000049F ; ---------------------------------------------------------------------------
.text:0000049F
.text:0000049F loc_49F:                                ; CODE XREF: _handle_socket_unfreeze+AAj
.text:0000049F                 mov     ecx, [ebp+var_4]
.text:000004A2                 mov     dword ptr [ecx+14h], 0
.text:000004A9                 mov     edx, [ebp+var_20]
.text:000004AC                 push    edx
.text:000004AD                 mov     eax, [ebp+var_4]
.text:000004B0                 mov     ecx, [eax+10h]
.text:000004B3                 push    ecx
.text:000004B4                 call    _handle_unthrottle
.text:000004B9                 add     esp, 8
.text:000004BC
.text:000004BC loc_4BC:                                ; CODE XREF: _handle_socket_unfreeze+33j
.text:000004BC                                         ; _handle_socket_unfreeze+BDj
.text:000004BC                 push    edx
.text:000004BD                 mov     ecx, ebp
.text:000004BF                 push    eax
.text:000004C0                 lea     edx, $LN10
.text:000004C6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004CB                 pop     eax
.text:000004CC                 pop     edx
.text:000004CD                 pop     esi
.text:000004CE                 add     esp, 20h
.text:000004D1                 cmp     ebp, esp
.text:000004D3                 call    __RTC_CheckEsp
.text:000004D8                 mov     esp, ebp
.text:000004DA                 pop     ebp
.text:000004DB                 retn
.text:000004DB _handle_socket_unfreeze endp
.text:000004DB
.text:000004DB ; ---------------------------------------------------------------------------
.text:000004DC $LN10           dd 2                    ; DATA XREF: _handle_socket_unfreeze+E0o
.text:000004E0                 dd offset $LN9_0
.text:000004E4 $LN9_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000004E0o
.text:000004EC                 dd offset $LN7_0        ; "data"
.text:000004F0                 dd 0FFFFFFE8h, 4
.text:000004F8                 dd offset $LN8_0
.text:000004FC $LN8_0          dd 6E656Ch              ; DATA XREF: .text:000004F8o
.text:00000500 $LN7_0          db 'data',0             ; DATA XREF: .text:000004ECo
.text:00000505                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 _sk_handle_socket_error proc near       ; DATA XREF: .rdata:0000015Co
.text:00000510
.text:00000510 var_4           = dword ptr -4
.text:00000510 arg_0           = dword ptr  8
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 push    ecx
.text:00000514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000051B                 mov     eax, [ebp+arg_0]
.text:0000051E                 mov     [ebp+var_4], eax
.text:00000521                 mov     ecx, [ebp+var_4]
.text:00000524                 mov     eax, [ecx+24h]
.text:00000527                 mov     esp, ebp
.text:00000529                 pop     ebp
.text:0000052A                 retn
.text:0000052A _sk_handle_socket_error endp
.text:0000052A
.text:0000052A ; ---------------------------------------------------------------------------
.text:0000052B                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530                 public _make_handle_socket
.text:00000530 _make_handle_socket proc near
.text:00000530
.text:00000530 var_8           = dword ptr -8
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = dword ptr  8
.text:00000530 arg_4           = dword ptr  0Ch
.text:00000530 arg_8           = dword ptr  10h
.text:00000530 arg_C           = dword ptr  14h
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 sub     esp, 8
.text:00000536                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000053D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000544                 xor     eax, eax
.text:00000546                 cmp     [ebp+arg_C], 0
.text:0000054A                 setnz   al
.text:0000054D                 mov     [ebp+var_8], eax
.text:00000550                 push    2Ch ; ','
.text:00000552                 push    1
.text:00000554                 call    _safemalloc
.text:00000559                 add     esp, 8
.text:0000055C                 mov     [ebp+var_4], eax
.text:0000055F                 mov     ecx, [ebp+var_4]
.text:00000562                 mov     dword ptr [ecx], offset ?socket_fn_table@?1??make_handle_socket@@9@9 ; `make_handle_socket'::`2'::socket_fn_table
.text:00000568                 mov     edx, [ebp+var_4]
.text:0000056B                 mov     eax, [ebp+arg_8]
.text:0000056E                 mov     [edx+28h], eax
.text:00000571                 mov     ecx, [ebp+var_4]
.text:00000574                 mov     dword ptr [ecx+24h], 0
.text:0000057B                 mov     edx, [ebp+var_4]
.text:0000057E                 mov     dword ptr [edx+14h], 0
.text:00000585                 mov     eax, [ebp+var_4]
.text:00000588                 add     eax, 18h
.text:0000058B                 push    eax
.text:0000058C                 call    _bufchain_init
.text:00000591                 add     esp, 4
.text:00000594                 mov     ecx, [ebp+var_4]
.text:00000597                 mov     edx, [ebp+arg_4]
.text:0000059A                 mov     [ecx+8], edx
.text:0000059D                 mov     eax, [ebp+var_8]
.text:000005A0                 push    eax
.text:000005A1                 mov     ecx, [ebp+var_4]
.text:000005A4                 push    ecx
.text:000005A5                 push    offset _handle_gotdata
.text:000005AA                 mov     edx, [ebp+var_4]
.text:000005AD                 mov     eax, [edx+8]
.text:000005B0                 push    eax
.text:000005B1                 call    _handle_input_new
.text:000005B6                 add     esp, 10h
.text:000005B9                 mov     ecx, [ebp+var_4]
.text:000005BC                 mov     [ecx+10h], eax
.text:000005BF                 mov     edx, [ebp+var_4]
.text:000005C2                 mov     eax, [ebp+arg_0]
.text:000005C5                 mov     [edx+4], eax
.text:000005C8                 mov     ecx, [ebp+var_8]
.text:000005CB                 push    ecx
.text:000005CC                 mov     edx, [ebp+var_4]
.text:000005CF                 push    edx
.text:000005D0                 push    offset _handle_sentdata
.text:000005D5                 mov     eax, [ebp+var_4]
.text:000005D8                 mov     ecx, [eax+4]
.text:000005DB                 push    ecx
.text:000005DC                 call    _handle_output_new
.text:000005E1                 add     esp, 10h
.text:000005E4                 mov     edx, [ebp+var_4]
.text:000005E7                 mov     [edx+0Ch], eax
.text:000005EA                 mov     eax, [ebp+var_4]
.text:000005ED                 add     esp, 8
.text:000005F0                 cmp     ebp, esp
.text:000005F2                 call    __RTC_CheckEsp
.text:000005F7                 mov     esp, ebp
.text:000005F9                 pop     ebp
.text:000005FA                 retn
.text:000005FA _make_handle_socket endp
.text:000005FA
.text:000005FA ; ---------------------------------------------------------------------------
.text:000005FB                 align 10h
.text:00000600
.text:00000600 ; =============== S U B R O U T I N E =======================================
.text:00000600
.text:00000600 ; Attributes: bp-based frame
.text:00000600
.text:00000600 _handle_gotdata proc near               ; DATA XREF: _make_handle_socket+75o
.text:00000600
.text:00000600 var_4           = dword ptr -4
.text:00000600 arg_0           = dword ptr  8
.text:00000600 arg_4           = dword ptr  0Ch
.text:00000600 arg_8           = dword ptr  10h
.text:00000600
.text:00000600                 push    ebp
.text:00000601                 mov     ebp, esp
.text:00000603                 push    ecx
.text:00000604                 push    esi
.text:00000605                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000060C                 mov     eax, [ebp+arg_0]
.text:0000060F                 push    eax
.text:00000610                 call    _handle_get_privdata
.text:00000615                 add     esp, 4
.text:00000618                 mov     [ebp+var_4], eax
.text:0000061B                 cmp     [ebp+arg_8], 0
.text:0000061F                 jge     short loc_654
.text:00000621                 mov     esi, esp
.text:00000623                 push    0
.text:00000625                 push    0
.text:00000627                 push    offset $SG85572 ; "Read error from handle"
.text:0000062C                 mov     ecx, [ebp+var_4]
.text:0000062F                 mov     edx, [ecx+28h]
.text:00000632                 push    edx
.text:00000633                 mov     eax, [ebp+var_4]
.text:00000636                 mov     ecx, [eax+28h]
.text:00000639                 mov     edx, [ecx]
.text:0000063B                 mov     eax, [edx+4]
.text:0000063E                 call    eax
.text:00000640                 add     esp, 10h
.text:00000643                 cmp     esi, esp
.text:00000645                 call    __RTC_CheckEsp
.text:0000064A                 jmp     loc_6FD
.text:0000064F ; ---------------------------------------------------------------------------
.text:0000064F                 jmp     loc_6FD
.text:00000654 ; ---------------------------------------------------------------------------
.text:00000654
.text:00000654 loc_654:                                ; CODE XREF: _handle_gotdata+1Fj
.text:00000654                 cmp     [ebp+arg_8], 0
.text:00000658                 jnz     short loc_684
.text:0000065A                 mov     esi, esp
.text:0000065C                 push    0
.text:0000065E                 push    0
.text:00000660                 push    0
.text:00000662                 mov     ecx, [ebp+var_4]
.text:00000665                 mov     edx, [ecx+28h]
.text:00000668                 push    edx
.text:00000669                 mov     eax, [ebp+var_4]
.text:0000066C                 mov     ecx, [eax+28h]
.text:0000066F                 mov     edx, [ecx]
.text:00000671                 mov     eax, [edx+4]
.text:00000674                 call    eax
.text:00000676                 add     esp, 10h
.text:00000679                 cmp     esi, esp
.text:0000067B                 call    __RTC_CheckEsp
.text:00000680                 jmp     short loc_6FD
.text:00000682 ; ---------------------------------------------------------------------------
.text:00000682                 jmp     short loc_6FD
.text:00000684 ; ---------------------------------------------------------------------------
.text:00000684
.text:00000684 loc_684:                                ; CODE XREF: _handle_gotdata+58j
.text:00000684                 mov     ecx, [ebp+var_4]
.text:00000687                 cmp     dword ptr [ecx+14h], 1
.text:0000068B                 jz      short loc_696
.text:0000068D                 mov     edx, [ebp+var_4]
.text:00000690                 cmp     dword ptr [edx+14h], 3
.text:00000694                 jnz     short loc_6AA
.text:00000696
.text:00000696 loc_696:                                ; CODE XREF: _handle_gotdata+8Bj
.text:00000696                 push    39h ; '9'       ; Line
.text:00000698                 push    offset $SG85578 ; "..\\..\\winhsock.c"
.text:0000069D                 push    offset $SG85579 ; "ps->frozen != FREEZING && ps->frozen !="...
.text:000006A2                 call    __wassert
.text:000006A7 ; ---------------------------------------------------------------------------
.text:000006A7                 add     esp, 0Ch
.text:000006AA
.text:000006AA loc_6AA:                                ; CODE XREF: _handle_gotdata+94j
.text:000006AA                 mov     ecx, [ebp+var_4]
.text:000006AD                 cmp     dword ptr [ecx+14h], 1
.text:000006B1                 jnz     short loc_6D3
.text:000006B3                 mov     edx, [ebp+arg_8]
.text:000006B6                 push    edx
.text:000006B7                 mov     eax, [ebp+arg_4]
.text:000006BA                 push    eax
.text:000006BB                 mov     ecx, [ebp+var_4]
.text:000006BE                 add     ecx, 18h
.text:000006C1                 push    ecx
.text:000006C2                 call    _bufchain_add
.text:000006C7                 add     esp, 0Ch
.text:000006CA                 mov     eax, 7FFFFFFFh
.text:000006CF                 jmp     short loc_6FD
.text:000006D1 ; ---------------------------------------------------------------------------
.text:000006D1                 jmp     short loc_6FD
.text:000006D3 ; ---------------------------------------------------------------------------
.text:000006D3
.text:000006D3 loc_6D3:                                ; CODE XREF: _handle_gotdata+B1j
.text:000006D3                 mov     esi, esp
.text:000006D5                 mov     edx, [ebp+arg_8]
.text:000006D8                 push    edx
.text:000006D9                 mov     eax, [ebp+arg_4]
.text:000006DC                 push    eax
.text:000006DD                 push    0
.text:000006DF                 mov     ecx, [ebp+var_4]
.text:000006E2                 mov     edx, [ecx+28h]
.text:000006E5                 push    edx
.text:000006E6                 mov     eax, [ebp+var_4]
.text:000006E9                 mov     ecx, [eax+28h]
.text:000006EC                 mov     edx, [ecx]
.text:000006EE                 mov     eax, [edx+8]
.text:000006F1                 call    eax
.text:000006F3                 add     esp, 10h
.text:000006F6                 cmp     esi, esp
.text:000006F8                 call    __RTC_CheckEsp
.text:000006FD
.text:000006FD loc_6FD:                                ; CODE XREF: _handle_gotdata+4Aj
.text:000006FD                                         ; _handle_gotdata+4Fj ...
.text:000006FD                 pop     esi
.text:000006FE                 add     esp, 4
.text:00000701                 cmp     ebp, esp
.text:00000703                 call    __RTC_CheckEsp
.text:00000708                 mov     esp, ebp
.text:0000070A                 pop     ebp
.text:0000070B                 retn
.text:0000070B _handle_gotdata endp
.text:0000070B
.text:0000070B ; ---------------------------------------------------------------------------
.text:0000070C                 align 10h
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710 _handle_sentdata proc near              ; DATA XREF: _make_handle_socket+A0o
.text:00000710
.text:00000710 var_4           = dword ptr -4
.text:00000710 arg_0           = dword ptr  8
.text:00000710 arg_4           = dword ptr  0Ch
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 push    ecx
.text:00000714                 push    esi
.text:00000715                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071C                 mov     eax, [ebp+arg_0]
.text:0000071F                 push    eax
.text:00000720                 call    _handle_get_privdata
.text:00000725                 add     esp, 4
.text:00000728                 mov     [ebp+var_4], eax
.text:0000072B                 mov     esi, esp
.text:0000072D                 mov     ecx, [ebp+arg_4]
.text:00000730                 push    ecx
.text:00000731                 mov     edx, [ebp+var_4]
.text:00000734                 mov     eax, [edx+28h]
.text:00000737                 push    eax
.text:00000738                 mov     ecx, [ebp+var_4]
.text:0000073B                 mov     edx, [ecx+28h]
.text:0000073E                 mov     eax, [edx]
.text:00000740                 mov     ecx, [eax+0Ch]
.text:00000743                 call    ecx
.text:00000745                 add     esp, 8
.text:00000748                 cmp     esi, esp
.text:0000074A                 call    __RTC_CheckEsp
.text:0000074F                 pop     esi
.text:00000750                 add     esp, 4
.text:00000753                 cmp     ebp, esp
.text:00000755                 call    __RTC_CheckEsp
.text:0000075A                 mov     esp, ebp
.text:0000075C                 pop     ebp
.text:0000075D                 retn
.text:0000075D _handle_sentdata endp
.text:0000075D
.text:0000075D ; ---------------------------------------------------------------------------
.text:0000075E                 align 10h
.text:0000075E _text           ends
.text:0000075E
.rtc$TMZ:00000760 ; ===========================================================================
.rtc$TMZ:00000760
.rtc$TMZ:00000760 ; Segment type: Pure data
.rtc$TMZ:00000760 ; Segment permissions: Read
.rtc$TMZ:00000760 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000760                 assume cs:_rtc$TMZ
.rtc$TMZ:00000760                 ;org 760h
.rtc$TMZ:00000760 ; COMDAT (pick any)
.rtc$TMZ:00000760 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000760 _rtc$TMZ        ends
.rtc$TMZ:00000760
.rtc$IMZ:00000764 ; ===========================================================================
.rtc$IMZ:00000764
.rtc$IMZ:00000764 ; Segment type: Pure data
.rtc$IMZ:00000764 ; Segment permissions: Read
.rtc$IMZ:00000764 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000764                 assume cs:_rtc$IMZ
.rtc$IMZ:00000764                 ;org 764h
.rtc$IMZ:00000764 ; COMDAT (pick any)
.rtc$IMZ:00000764 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000764 _rtc$IMZ        ends
.rtc$IMZ:00000764
UNDEF:00000770 ; ===========================================================================
UNDEF:00000770
UNDEF:00000770 ; Segment type: Externs
UNDEF:00000770 ; UNDEF
UNDEF:00000770                 extrn __RTC_Shutdown:near
UNDEF:00000770                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000774                 extrn __RTC_InitBase:near
UNDEF:00000774                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000778                 extrn _safefree:near    ; CODE XREF: _sk_handle_close+7Dp
UNDEF:0000077C                 extrn _bufchain_clear:near ; CODE XREF: _sk_handle_close+71p
UNDEF:00000780 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:00000780                 extrn __imp__CloseHandle@4:near
UNDEF:00000780                                         ; CODE XREF: _sk_handle_close+39p
UNDEF:00000780                                         ; _sk_handle_close+5Dp
UNDEF:00000780                                         ; DATA XREF: ...
UNDEF:00000784                 extrn _handle_free:near ; CODE XREF: _sk_handle_close+19p
UNDEF:00000784                                         ; _sk_handle_close+28p
UNDEF:00000788                 extrn __RTC_CheckEsp:near ; CODE XREF: _sk_handle_close+41p
UNDEF:00000788                                         ; _sk_handle_close+65p ...
UNDEF:0000078C                 extrn _handle_write:near ; CODE XREF: _sk_handle_write+20p
UNDEF:00000790                 extrn _handle_write_eof:near
UNDEF:00000790                                         ; CODE XREF: _sk_handle_write_eof+18p
UNDEF:00000794                 extrn _queue_toplevel_callback:near
UNDEF:00000794                                         ; CODE XREF: _sk_handle_set_frozen+C1p
UNDEF:00000794                                         ; _handle_socket_unfreeze+B5p
UNDEF:00000798 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00000798                 extrn __wassert:near    ; CODE XREF: _sk_handle_set_frozen+9Ap
UNDEF:00000798                                         ; _handle_socket_unfreeze+64p ...
UNDEF:0000079C                 extrn _bufchain_size:near
UNDEF:0000079C                                         ; CODE XREF: _sk_handle_set_frozen+7Fp
UNDEF:0000079C                                         ; _handle_socket_unfreeze+A0p
UNDEF:000007A0                 extrn _handle_unthrottle:near
UNDEF:000007A0                                         ; CODE XREF: _handle_socket_unfreeze+D4p
UNDEF:000007A4                 extrn _bufchain_prefix:near
UNDEF:000007A4                                         ; CODE XREF: _handle_socket_unfreeze+47p
UNDEF:000007A8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000007A8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000007A8                                         ; CODE XREF: _handle_socket_unfreeze+E6p
UNDEF:000007AC                 extrn _handle_output_new:near
UNDEF:000007AC                                         ; CODE XREF: _make_handle_socket+ACp
UNDEF:000007B0                 extrn _handle_input_new:near
UNDEF:000007B0                                         ; CODE XREF: _make_handle_socket+81p
UNDEF:000007B4                 extrn _bufchain_init:near
UNDEF:000007B4                                         ; CODE XREF: _make_handle_socket+5Cp
UNDEF:000007B8                 extrn _safemalloc:near  ; CODE XREF: _make_handle_socket+24p
UNDEF:000007BC                 extrn _bufchain_add:near ; CODE XREF: _handle_gotdata+C2p
UNDEF:000007C0                 extrn _handle_get_privdata:near
UNDEF:000007C0                                         ; CODE XREF: _handle_gotdata+10p
UNDEF:000007C0                                         ; _handle_sentdata+10p
UNDEF:000007C0
UNDEF:000007C0
UNDEF:000007C0                 end