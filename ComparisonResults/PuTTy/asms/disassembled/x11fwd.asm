.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : CDB5CCFBED950BCAAE334A9C43372965
.data:00000000 ; Input CRC32 : 0C7D6259
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\x11fwd.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG87067        db 'MIT-MAGIC-COOKIE-1',0 ; DATA XREF: .rdata:Str2o
.data:00000013                 align 4
.data:00000014 $SG87068        db 'XDM-AUTHORIZATION-1',0 ; DATA XREF: .rdata:off_448o
.data:00000028 ; wchar_t _SG87171
.data:00000028 $SG87171:                               ; DATA XREF: _x11_invent_fake_auth+D1o
.data:00000028                                         ; .data:$SG87529o
.data:00000028                 unicode 0, <..\..\..\x11fwd.c>,0
.data:0000004C ; wchar_t _SG87172
.data:0000004C $SG87172:                               ; DATA XREF: _x11_invent_fake_auth+D6o
.data:0000004C                 unicode 0, <authtype == X11_XDM>,0
.data:00000074 ; char _SG87189[]
.data:00000074 $SG87189        db '%02x',0             ; DATA XREF: _x11_invent_fake_auth+247o
.data:00000079                 align 4
.data:0000007C ; wchar_t _SG87221
.data:0000007C $SG87221:                               ; DATA XREF: _x11_authcmp+ACo
.data:0000007C                 unicode 0, <..\..\..\x11fwd.c>,0
.data:000000A0 ; wchar_t _SG87222
.data:000000A0 $SG87222:                               ; DATA XREF: _x11_authcmp+B1o
.data:000000A0                 unicode 0, <a->
.data:000000A0                 dw 3Eh
.data:000000A0                 unicode 0, <proto == X11_XDM>,0
.data:000000C8 $SG87236        db ':0',0               ; DATA XREF: _x11_setup_display+5Ao
.data:000000CB                 align 4
.data:000000CC ; char _SG87257[]
.data:000000CC $SG87257        db 'local',0            ; DATA XREF: _x11_setup_display+1DEo
.data:000000D2                 align 4
.data:000000D4 ; char _SG87258[]
.data:000000D4 $SG87258        db 'unix',0             ; DATA XREF: _x11_setup_display+1F3o
.data:000000D9                 align 4
.data:000000DC ; char _SG87262[]
.data:000000DC $SG87262        db 'unix',0             ; DATA XREF: _x11_setup_display+22Co
.data:000000E1                 align 4
.data:000000E4 $SG87265        db 'localhost',0        ; DATA XREF: _x11_setup_display+268o
.data:000000EE                 align 10h
.data:000000F0 $SG87287        db 'unix:%d',0          ; DATA XREF: _x11_setup_display+473o
.data:000000F8 $SG87315        db 'Unsupported authorisation protocol',0
.data:000000F8                                         ; DATA XREF: _x11_verify:loc_20ABo
.data:0000011B                 align 4
.data:0000011C $SG87318        db 'Authorisation not recognised',0
.data:0000011C                                         ; DATA XREF: _x11_verify+8Co
.data:00000139                 align 4
.data:0000013C $SG87326        db 'XDM-AUTHORIZATION-1 data was wrong length',0
.data:0000013C                                         ; DATA XREF: _x11_verify+A8o
.data:00000166                 align 4
.data:00000168 $SG87328        db 'cannot do XDM-AUTHORIZATION-1 without remote address data',0
.data:00000168                                         ; DATA XREF: _x11_verify+B8o
.data:000001A2                 align 4
.data:000001A4 $SG87330        db 'XDM-AUTHORIZATION-1 data failed check',0
.data:000001A4                                         ; DATA XREF: _x11_verify+F3o
.data:000001CA                 align 4
.data:000001CC $SG87340        db 'XDM-AUTHORIZATION-1 data failed check',0
.data:000001CC                                         ; DATA XREF: _x11_verify+12Do
.data:000001F2                 align 4
.data:000001F4 $SG87347        db 'XDM-AUTHORIZATION-1 data failed check',0
.data:000001F4                                         ; DATA XREF: _x11_verify+14Fo
.data:0000021A                 align 4
.data:0000021C $SG87360        db 'XDM-AUTHORIZATION-1 data failed check',0
.data:0000021C                                         ; DATA XREF: _x11_verify+1ACo
.data:00000242                 align 4
.data:00000244 $SG87363        db 'XDM-AUTHORIZATION-1 time stamp was too far out',0
.data:00000244                                         ; DATA XREF: _x11_verify+1E3o
.data:00000273                 align 4
.data:00000274 ; wchar_t _SG87368
.data:00000274 $SG87368:                               ; DATA XREF: _x11_verify+22Ao
.data:00000274                 unicode 0, <..\..\..\x11fwd.c>,0
.data:00000298 ; wchar_t _SG87369
.data:00000298 $SG87369:                               ; DATA XREF: _x11_verify+22Fo
.data:00000298                 unicode 0, <auth->
.data:00000298                 dw 3Eh
.data:00000298                 unicode 0, <xdmseen != NULL>,0
.data:000002C4 $SG87371        db 'XDM-AUTHORIZATION-1 data replayed',0
.data:000002C4                                         ; DATA XREF: _x11_verify+266o
.data:000002E6                 align 4
.data:000002E8 ; wchar_t _SG87377
.data:000002E8 $SG87377:                               ; DATA XREF: _x11_verify+28Co
.data:000002E8                 unicode 0, <..\..\..\x11fwd.c>,0
.data:0000030C ; wchar_t _SG87378
.data:0000030C $SG87378:                               ; DATA XREF: _x11_verify+291o
.data:0000030C                 unicode 0, <seen != NULL>,0
.data:00000326                 align 4
.data:00000328 ; char _SG87396[]
.data:00000328 $SG87396        db 'rb',0               ; DATA XREF: _x11_get_auth_from_authfile+67o
.data:0000032B                 align 4
.data:0000032C $SG87498        db 'unable to connect to forwarded X server: %s',0
.data:0000032C                                         ; DATA XREF: _x11_closing+2Do
.data:00000358 $SG87527        dd offset $SG87171+12h  ; DATA XREF: _x11_get_screen_number+Bo
.data:00000358                                         ; "x11fwd.c"
.data:0000035C ; char _SG87529[]
.data:0000035C $SG87529        dd offset $SG87171+6    ; DATA XREF: _x11_get_screen_number:loc_1554o
.data:0000035C                                         ; "..\\..\\x11fwd.c"
.data:00000360 $SG87577        db '%s X11 proxy: %s',0Ah,0
.data:00000360                                         ; DATA XREF: _x11_send_init_error+2Bo
.data:00000372                 align 4
.data:00000374 ; char _SG87593[]
.data:00000374 $SG87593        db '%d.%d.%d.%d',0      ; DATA XREF: _x11_parse_ip+40o
.data:00000380 ; wchar_t _SG87668
.data:00000380 $SG87668:                               ; DATA XREF: _x11_send+2F4o
.data:00000380                 unicode 0, <..\..\..\x11fwd.c>,0
.data:000003A4 ; wchar_t _SG87669
.data:000003A4 $SG87669:                               ; DATA XREF: _x11_send+2F9o
.data:000003A4                 unicode 0, <!xconn->
.data:000003A4                 dw 3Eh
.data:000003A4                 unicode 0, <s>,0
.data:000003B8 ; wchar_t _SG87674
.data:000003B8 $SG87674:                               ; DATA XREF: _x11_send+3A1o
.data:000003B8                 unicode 0, <..\..\..\x11fwd.c>,0
.data:000003DC ; wchar_t _SG87675
.data:000003DC $SG87675:                               ; DATA XREF: _x11_send+3A6o
.data:000003DC                 unicode 0, <auth_matched>,0
.data:000003F6                 align 4
.data:000003F8 $SG87681        db 'unable to connect to forwarded X server: %s',0
.data:000003F8                                         ; DATA XREF: _x11_send+49Fo
.data:00000424 ; char _SG87684[]
.data:00000424 $SG87684        db '%d.%d.%d.%d',0      ; DATA XREF: _x11_send+517o
.data:00000430 ; char _SG87690[]
.data:00000430 $SG87690        db '0.0.0.0',0          ; DATA XREF: _x11_send:loc_1EC4o
.data:00000438 ; char _SG87720[]
.data:00000438 $SG87720        db '%x',0               ; DATA XREF: _x11_dehexify+8Ao
.data:0000043B                 align 4
.data:0000043B _data           ends
.data:0000043B
.bss:0000043C ; ===========================================================================
.bss:0000043C
.bss:0000043C ; Segment type: Uninitialized
.bss:0000043C ; Segment permissions: Read/Write
.bss:0000043C _bss            segment byte public 'BSS' use32
.bss:0000043C                 assume cs:_bss
.bss:0000043C                 ;org 43Ch
.bss:0000043C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000043C $SG87066        db    ? ;               ; DATA XREF: .rdata:_x11_authnameso
.bss:0000043D                 align 10h
.bss:0000043D _bss            ends
.bss:0000043D
.rdata:00000440 ; ===========================================================================
.rdata:00000440
.rdata:00000440 ; Segment type: Pure data
.rdata:00000440 ; Segment permissions: Read
.rdata:00000440 _rdata          segment dword public 'DATA' use32
.rdata:00000440                 assume cs:_rdata
.rdata:00000440                 ;org 440h
.rdata:00000440                 public _x11_authnames
.rdata:00000440 ; char *x11_authnames
.rdata:00000440 _x11_authnames  dd offset $SG87066      ; DATA XREF: _x11_invent_fake_auth+1EBr
.rdata:00000440                                         ; _x11_get_auth_from_authfile+248r ...
.rdata:00000444 ; char *Str2
.rdata:00000444 Str2            dd offset $SG87067      ; DATA XREF: _x11_verify+16r
.rdata:00000444                                         ; "MIT-MAGIC-COOKIE-1"
.rdata:00000448 ; char *off_448
.rdata:00000448 off_448         dd offset $SG87068      ; DATA XREF: _x11_verify:loc_2085r
.rdata:00000448                                         ; "XDM-AUTHORIZATION-1"
.rdata:0000044C _dummy_plug     dd offset _dummy_plug_log
.rdata:0000044C                                         ; DATA XREF: _x11_setup_display+386o
.rdata:00000450                 dd offset _dummy_plug_closing
.rdata:00000454                 dd offset _dummy_plug_receive
.rdata:00000458                 dd offset _dummy_plug_sent
.rdata:0000045C                 dd offset _dummy_plug_accepting
.rdata:00000460 ; `x11_init'::`2'::fn_table
.rdata:00000460 ?fn_table@?1??x11_init@@9@9 dd offset _x11_log ; DATA XREF: _x11_init+26o
.rdata:00000464                 dd offset _x11_closing
.rdata:00000468                 dd offset _x11_receive
.rdata:0000046C                 dd offset _x11_sent
.rdata:00000470                 db    0
.rdata:00000471                 db    0
.rdata:00000472                 db    0
.rdata:00000473                 db    0
.rdata:00000473 _rdata          ends
.rdata:00000473
.text:00000474 ; ===========================================================================
.text:00000474
.text:00000474 ; Segment type: Pure code
.text:00000474 ; Segment permissions: Read/Execute
.text:00000474 _text           segment para public 'CODE' use32
.text:00000474                 assume cs:_text
.text:00000474                 ;org 474h
.text:00000474                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000474
.text:00000474 ; =============== S U B R O U T I N E =======================================
.text:00000474
.text:00000474 ; Attributes: bp-based frame
.text:00000474
.text:00000474 _dummy_plug_log proc near               ; DATA XREF: .rdata:_dummy_plugo
.text:00000474                 push    ebp
.text:00000475                 mov     ebp, esp
.text:00000477                 pop     ebp
.text:00000478                 retn
.text:00000478 _dummy_plug_log endp
.text:00000478
.text:00000478 ; ---------------------------------------------------------------------------
.text:00000479                 db 0Bh dup(0CCh)
.text:00000484
.text:00000484 ; =============== S U B R O U T I N E =======================================
.text:00000484
.text:00000484 ; Attributes: bp-based frame
.text:00000484
.text:00000484 _dummy_plug_closing proc near           ; DATA XREF: .rdata:00000450o
.text:00000484                 push    ebp
.text:00000485                 mov     ebp, esp
.text:00000487                 mov     eax, 1
.text:0000048C                 pop     ebp
.text:0000048D                 retn
.text:0000048D _dummy_plug_closing endp
.text:0000048D
.text:0000048D ; ---------------------------------------------------------------------------
.text:0000048E                 db 6 dup(0CCh)
.text:00000494
.text:00000494 ; =============== S U B R O U T I N E =======================================
.text:00000494
.text:00000494 ; Attributes: bp-based frame
.text:00000494
.text:00000494 _dummy_plug_receive proc near           ; DATA XREF: .rdata:00000454o
.text:00000494                 push    ebp
.text:00000495                 mov     ebp, esp
.text:00000497                 mov     eax, 1
.text:0000049C                 pop     ebp
.text:0000049D                 retn
.text:0000049D _dummy_plug_receive endp
.text:0000049D
.text:0000049D ; ---------------------------------------------------------------------------
.text:0000049E                 db 6 dup(0CCh)
.text:000004A4
.text:000004A4 ; =============== S U B R O U T I N E =======================================
.text:000004A4
.text:000004A4 ; Attributes: bp-based frame
.text:000004A4
.text:000004A4 _dummy_plug_sent proc near              ; DATA XREF: .rdata:00000458o
.text:000004A4                 push    ebp
.text:000004A5                 mov     ebp, esp
.text:000004A7                 pop     ebp
.text:000004A8                 retn
.text:000004A8 _dummy_plug_sent endp
.text:000004A8
.text:000004A8 ; ---------------------------------------------------------------------------
.text:000004A9                 db 0Bh dup(0CCh)
.text:000004B4
.text:000004B4 ; =============== S U B R O U T I N E =======================================
.text:000004B4
.text:000004B4 ; Attributes: bp-based frame
.text:000004B4
.text:000004B4 _dummy_plug_accepting proc near         ; DATA XREF: .rdata:0000045Co
.text:000004B4                 push    ebp
.text:000004B5                 mov     ebp, esp
.text:000004B7                 mov     eax, 1
.text:000004BC                 pop     ebp
.text:000004BD                 retn
.text:000004BD _dummy_plug_accepting endp
.text:000004BD
.text:000004BD ; ---------------------------------------------------------------------------
.text:000004BE                 db 6 dup(0CCh)
.text:000004C4
.text:000004C4 ; =============== S U B R O U T I N E =======================================
.text:000004C4
.text:000004C4 ; Attributes: bp-based frame
.text:000004C4
.text:000004C4                 public _x11_invent_fake_auth
.text:000004C4 _x11_invent_fake_auth proc near
.text:000004C4
.text:000004C4 var_C           = dword ptr -0Ch
.text:000004C4 var_8           = dword ptr -8
.text:000004C4 var_4           = dword ptr -4
.text:000004C4 arg_0           = dword ptr  8
.text:000004C4 arg_4           = dword ptr  0Ch
.text:000004C4
.text:000004C4                 push    ebp
.text:000004C5                 mov     ebp, esp
.text:000004C7                 sub     esp, 0Ch
.text:000004CA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000004D1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004DF                 push    28h ; '('
.text:000004E1                 push    1
.text:000004E3                 call    _safemalloc
.text:000004E8                 add     esp, 8
.text:000004EB                 mov     [ebp+var_4], eax
.text:000004EE                 cmp     [ebp+arg_4], 1
.text:000004F2                 jnz     loc_58D
.text:000004F8                 mov     eax, [ebp+var_4]
.text:000004FB                 mov     dword ptr [eax], 1
.text:00000501                 mov     ecx, [ebp+var_4]
.text:00000504                 mov     dword ptr [ecx+8], 10h
.text:0000050B                 push    1
.text:0000050D                 mov     edx, [ebp+var_4]
.text:00000510                 mov     eax, [edx+8]
.text:00000513                 push    eax
.text:00000514                 call    _safemalloc
.text:00000519                 add     esp, 8
.text:0000051C                 mov     ecx, [ebp+var_4]
.text:0000051F                 mov     [ecx+4], eax
.text:00000522                 mov     edx, [ebp+var_4]
.text:00000525                 mov     dword ptr [edx+14h], 0
.text:0000052C
.text:0000052C loc_52C:                                ; CODE XREF: _x11_invent_fake_auth:loc_57Cj
.text:0000052C                 mov     eax, 1
.text:00000531                 test    eax, eax
.text:00000533                 jz      short loc_57E
.text:00000535                 mov     [ebp+var_8], 0
.text:0000053C                 jmp     short loc_547
.text:0000053E ; ---------------------------------------------------------------------------
.text:0000053E
.text:0000053E loc_53E:                                ; CODE XREF: _x11_invent_fake_auth+9Fj
.text:0000053E                 mov     ecx, [ebp+var_8]
.text:00000541                 add     ecx, 1
.text:00000544                 mov     [ebp+var_8], ecx
.text:00000547
.text:00000547 loc_547:                                ; CODE XREF: _x11_invent_fake_auth+78j
.text:00000547                 mov     edx, [ebp+var_4]
.text:0000054A                 mov     eax, [ebp+var_8]
.text:0000054D                 cmp     eax, [edx+8]
.text:00000550                 jge     short loc_565
.text:00000552                 call    _random_byte
.text:00000557                 mov     ecx, [ebp+var_4]
.text:0000055A                 mov     edx, [ecx+4]
.text:0000055D                 mov     ecx, [ebp+var_8]
.text:00000560                 mov     [edx+ecx], al
.text:00000563                 jmp     short loc_53E
.text:00000565 ; ---------------------------------------------------------------------------
.text:00000565
.text:00000565 loc_565:                                ; CODE XREF: _x11_invent_fake_auth+8Cj
.text:00000565                 mov     edx, [ebp+var_4]
.text:00000568                 push    edx
.text:00000569                 mov     eax, [ebp+arg_0]
.text:0000056C                 push    eax
.text:0000056D                 call    _add234
.text:00000572                 add     esp, 8
.text:00000575                 cmp     eax, [ebp+var_4]
.text:00000578                 jnz     short loc_57C
.text:0000057A                 jmp     short loc_57E
.text:0000057C ; ---------------------------------------------------------------------------
.text:0000057C
.text:0000057C loc_57C:                                ; CODE XREF: _x11_invent_fake_auth+B4j
.text:0000057C                 jmp     short loc_52C
.text:0000057E ; ---------------------------------------------------------------------------
.text:0000057E
.text:0000057E loc_57E:                                ; CODE XREF: _x11_invent_fake_auth+6Fj
.text:0000057E                                         ; _x11_invent_fake_auth+B6j
.text:0000057E                 mov     ecx, [ebp+var_4]
.text:00000581                 mov     dword ptr [ecx+18h], 0
.text:00000588                 jmp     loc_6AA
.text:0000058D ; ---------------------------------------------------------------------------
.text:0000058D
.text:0000058D loc_58D:                                ; CODE XREF: _x11_invent_fake_auth+2Ej
.text:0000058D                 cmp     [ebp+arg_4], 2
.text:00000591                 jz      short loc_5A7
.text:00000593                 push    78h ; 'x'       ; Line
.text:00000595                 push    offset $SG87171 ; "..\\..\\..\\x11fwd.c"
.text:0000059A                 push    offset $SG87172 ; "authtype == X11_XDM"
.text:0000059F                 call    __wassert
.text:000005A4 ; ---------------------------------------------------------------------------
.text:000005A4                 add     esp, 0Ch
.text:000005A7
.text:000005A7 loc_5A7:                                ; CODE XREF: _x11_invent_fake_auth+CDj
.text:000005A7                 mov     eax, [ebp+var_4]
.text:000005AA                 mov     dword ptr [eax], 2
.text:000005B0                 mov     ecx, [ebp+var_4]
.text:000005B3                 mov     dword ptr [ecx+8], 10h
.text:000005BA                 push    1
.text:000005BC                 mov     edx, [ebp+var_4]
.text:000005BF                 mov     eax, [edx+8]
.text:000005C2                 push    eax
.text:000005C3                 call    _safemalloc
.text:000005C8                 add     esp, 8
.text:000005CB                 mov     ecx, [ebp+var_4]
.text:000005CE                 mov     [ecx+4], eax
.text:000005D1                 push    1
.text:000005D3                 push    8
.text:000005D5                 call    _safemalloc
.text:000005DA                 add     esp, 8
.text:000005DD                 mov     edx, [ebp+var_4]
.text:000005E0                 mov     [edx+14h], eax
.text:000005E3                 push    8               ; Size
.text:000005E5                 push    0               ; Val
.text:000005E7                 mov     eax, [ebp+var_4]
.text:000005EA                 mov     ecx, [eax+14h]
.text:000005ED                 push    ecx             ; Dst
.text:000005EE                 call    _memset
.text:000005F3                 add     esp, 0Ch
.text:000005F6
.text:000005F6 loc_5F6:                                ; CODE XREF: _x11_invent_fake_auth:loc_692j
.text:000005F6                 mov     edx, 1
.text:000005FB                 test    edx, edx
.text:000005FD                 jz      loc_697
.text:00000603                 mov     [ebp+var_8], 0
.text:0000060A                 jmp     short loc_615
.text:0000060C ; ---------------------------------------------------------------------------
.text:0000060C
.text:0000060C loc_60C:                                ; CODE XREF: _x11_invent_fake_auth+182j
.text:0000060C                 mov     eax, [ebp+var_8]
.text:0000060F                 add     eax, 1
.text:00000612                 mov     [ebp+var_8], eax
.text:00000615
.text:00000615 loc_615:                                ; CODE XREF: _x11_invent_fake_auth+146j
.text:00000615                 mov     ecx, [ebp+var_4]
.text:00000618                 mov     edx, [ebp+var_8]
.text:0000061B                 cmp     edx, [ecx+8]
.text:0000061E                 jge     short loc_648
.text:00000620                 cmp     [ebp+var_8], 8
.text:00000624                 jnz     short loc_62F
.text:00000626                 mov     [ebp+var_C], 0
.text:0000062D                 jmp     short loc_637
.text:0000062F ; ---------------------------------------------------------------------------
.text:0000062F
.text:0000062F loc_62F:                                ; CODE XREF: _x11_invent_fake_auth+160j
.text:0000062F                 call    _random_byte
.text:00000634                 mov     [ebp+var_C], eax
.text:00000637
.text:00000637 loc_637:                                ; CODE XREF: _x11_invent_fake_auth+169j
.text:00000637                 mov     eax, [ebp+var_4]
.text:0000063A                 mov     ecx, [eax+4]
.text:0000063D                 mov     edx, [ebp+var_8]
.text:00000640                 mov     al, byte ptr [ebp+var_C]
.text:00000643                 mov     [ecx+edx], al
.text:00000646                 jmp     short loc_60C
.text:00000648 ; ---------------------------------------------------------------------------
.text:00000648
.text:00000648 loc_648:                                ; CODE XREF: _x11_invent_fake_auth+15Aj
.text:00000648                 push    8               ; Size
.text:0000064A                 mov     ecx, [ebp+var_4]
.text:0000064D                 mov     edx, [ecx+4]
.text:00000650                 push    edx             ; Src
.text:00000651                 mov     eax, [ebp+var_4]
.text:00000654                 mov     ecx, [eax+14h]
.text:00000657                 push    ecx             ; Dst
.text:00000658                 call    _memcpy
.text:0000065D                 add     esp, 0Ch
.text:00000660                 push    8
.text:00000662                 mov     edx, [ebp+var_4]
.text:00000665                 mov     eax, [edx+14h]
.text:00000668                 push    eax
.text:00000669                 mov     ecx, [ebp+var_4]
.text:0000066C                 mov     edx, [ecx+4]
.text:0000066F                 add     edx, 9
.text:00000672                 push    edx
.text:00000673                 call    _des_encrypt_xdmauth
.text:00000678                 add     esp, 0Ch
.text:0000067B                 mov     eax, [ebp+var_4]
.text:0000067E                 push    eax
.text:0000067F                 mov     ecx, [ebp+arg_0]
.text:00000682                 push    ecx
.text:00000683                 call    _add234
.text:00000688                 add     esp, 8
.text:0000068B                 cmp     eax, [ebp+var_4]
.text:0000068E                 jnz     short loc_692
.text:00000690                 jmp     short loc_697
.text:00000692 ; ---------------------------------------------------------------------------
.text:00000692
.text:00000692 loc_692:                                ; CODE XREF: _x11_invent_fake_auth+1CAj
.text:00000692                 jmp     loc_5F6
.text:00000697 ; ---------------------------------------------------------------------------
.text:00000697
.text:00000697 loc_697:                                ; CODE XREF: _x11_invent_fake_auth+139j
.text:00000697                                         ; _x11_invent_fake_auth+1CCj
.text:00000697                 push    offset _xdmseen_cmp
.text:0000069C                 call    _newtree234
.text:000006A1                 add     esp, 4
.text:000006A4                 mov     edx, [ebp+var_4]
.text:000006A7                 mov     [edx+18h], eax
.text:000006AA
.text:000006AA loc_6AA:                                ; CODE XREF: _x11_invent_fake_auth+C4j
.text:000006AA                 mov     eax, [ebp+var_4]
.text:000006AD                 mov     ecx, [eax]
.text:000006AF                 mov     edx, ds:_x11_authnames[ecx*4]
.text:000006B6                 push    edx
.text:000006B7                 call    _dupstr
.text:000006BC                 add     esp, 4
.text:000006BF                 mov     ecx, [ebp+var_4]
.text:000006C2                 mov     [ecx+0Ch], eax
.text:000006C5                 push    1
.text:000006C7                 mov     edx, [ebp+var_4]
.text:000006CA                 mov     eax, [edx+8]
.text:000006CD                 lea     ecx, [eax+eax+1]
.text:000006D1                 push    ecx
.text:000006D2                 call    _safemalloc
.text:000006D7                 add     esp, 8
.text:000006DA                 mov     edx, [ebp+var_4]
.text:000006DD                 mov     [edx+10h], eax
.text:000006E0                 mov     [ebp+var_8], 0
.text:000006E7                 jmp     short loc_6F2
.text:000006E9 ; ---------------------------------------------------------------------------
.text:000006E9
.text:000006E9 loc_6E9:                                ; CODE XREF: _x11_invent_fake_auth+261j
.text:000006E9                 mov     eax, [ebp+var_8]
.text:000006EC                 add     eax, 1
.text:000006EF                 mov     [ebp+var_8], eax
.text:000006F2
.text:000006F2 loc_6F2:                                ; CODE XREF: _x11_invent_fake_auth+223j
.text:000006F2                 mov     ecx, [ebp+var_4]
.text:000006F5                 mov     edx, [ebp+var_8]
.text:000006F8                 cmp     edx, [ecx+8]
.text:000006FB                 jge     short loc_727
.text:000006FD                 mov     eax, [ebp+var_4]
.text:00000700                 mov     ecx, [eax+4]
.text:00000703                 mov     edx, [ebp+var_8]
.text:00000706                 movzx   eax, byte ptr [ecx+edx]
.text:0000070A                 push    eax
.text:0000070B                 push    offset $SG87189 ; "%02x"
.text:00000710                 mov     ecx, [ebp+var_4]
.text:00000713                 mov     edx, [ecx+10h]
.text:00000716                 mov     eax, [ebp+var_8]
.text:00000719                 lea     ecx, [edx+eax*2]
.text:0000071C                 push    ecx             ; Dest
.text:0000071D                 call    _sprintf
.text:00000722                 add     esp, 0Ch
.text:00000725                 jmp     short loc_6E9
.text:00000727 ; ---------------------------------------------------------------------------
.text:00000727
.text:00000727 loc_727:                                ; CODE XREF: _x11_invent_fake_auth+237j
.text:00000727                 mov     edx, [ebp+var_4]
.text:0000072A                 mov     dword ptr [edx+1Ch], 0
.text:00000731                 mov     eax, [ebp+var_4]
.text:00000734                 mov     dword ptr [eax+24h], 0
.text:0000073B                 mov     ecx, [ebp+var_4]
.text:0000073E                 mov     dword ptr [ecx+20h], 0
.text:00000745                 mov     eax, [ebp+var_4]
.text:00000748                 add     esp, 0Ch
.text:0000074B                 cmp     ebp, esp
.text:0000074D                 call    __RTC_CheckEsp
.text:00000752                 mov     esp, ebp
.text:00000754                 pop     ebp
.text:00000755                 retn
.text:00000755 _x11_invent_fake_auth endp
.text:00000755
.text:00000755 ; ---------------------------------------------------------------------------
.text:00000756                 db 0Eh dup(0CCh)
.text:00000764
.text:00000764 ; =============== S U B R O U T I N E =======================================
.text:00000764
.text:00000764 ; Attributes: bp-based frame
.text:00000764
.text:00000764 _xdmseen_cmp    proc near               ; DATA XREF: _x11_invent_fake_auth:loc_697o
.text:00000764
.text:00000764 var_10          = dword ptr -10h
.text:00000764 var_C           = dword ptr -0Ch
.text:00000764 var_8           = dword ptr -8
.text:00000764 var_4           = dword ptr -4
.text:00000764 arg_0           = dword ptr  8
.text:00000764 arg_4           = dword ptr  0Ch
.text:00000764
.text:00000764                 push    ebp
.text:00000765                 mov     ebp, esp
.text:00000767                 sub     esp, 10h
.text:0000076A                 mov     eax, 0CCCCCCCCh
.text:0000076F                 mov     [ebp+var_10], eax
.text:00000772                 mov     [ebp+var_C], eax
.text:00000775                 mov     [ebp+var_8], eax
.text:00000778                 mov     [ebp+var_4], eax
.text:0000077B                 mov     eax, [ebp+arg_0]
.text:0000077E                 mov     [ebp+var_4], eax
.text:00000781                 mov     ecx, [ebp+arg_4]
.text:00000784                 mov     [ebp+var_8], ecx
.text:00000787                 mov     edx, [ebp+var_4]
.text:0000078A                 mov     eax, [ebp+var_8]
.text:0000078D                 mov     ecx, [edx]
.text:0000078F                 cmp     ecx, [eax]
.text:00000791                 jbe     short loc_79C
.text:00000793                 mov     [ebp+var_C], 1
.text:0000079A                 jmp     short loc_7D2
.text:0000079C ; ---------------------------------------------------------------------------
.text:0000079C
.text:0000079C loc_79C:                                ; CODE XREF: _xdmseen_cmp+2Dj
.text:0000079C                 mov     edx, [ebp+var_4]
.text:0000079F                 mov     eax, [ebp+var_8]
.text:000007A2                 mov     ecx, [edx]
.text:000007A4                 cmp     ecx, [eax]
.text:000007A6                 jnb     short loc_7B1
.text:000007A8                 mov     [ebp+var_10], 0FFFFFFFFh
.text:000007AF                 jmp     short loc_7CC
.text:000007B1 ; ---------------------------------------------------------------------------
.text:000007B1
.text:000007B1 loc_7B1:                                ; CODE XREF: _xdmseen_cmp+42j
.text:000007B1                 push    6               ; Size
.text:000007B3                 mov     edx, [ebp+var_8]
.text:000007B6                 add     edx, 4
.text:000007B9                 push    edx             ; Buf2
.text:000007BA                 mov     eax, [ebp+var_4]
.text:000007BD                 add     eax, 4
.text:000007C0                 push    eax             ; Buf1
.text:000007C1                 call    _memcmp
.text:000007C6                 add     esp, 0Ch
.text:000007C9                 mov     [ebp+var_10], eax
.text:000007CC
.text:000007CC loc_7CC:                                ; CODE XREF: _xdmseen_cmp+4Bj
.text:000007CC                 mov     ecx, [ebp+var_10]
.text:000007CF                 mov     [ebp+var_C], ecx
.text:000007D2
.text:000007D2 loc_7D2:                                ; CODE XREF: _xdmseen_cmp+36j
.text:000007D2                 mov     eax, [ebp+var_C]
.text:000007D5                 add     esp, 10h
.text:000007D8                 cmp     ebp, esp
.text:000007DA                 call    __RTC_CheckEsp
.text:000007DF                 mov     esp, ebp
.text:000007E1                 pop     ebp
.text:000007E2                 retn
.text:000007E2 _xdmseen_cmp    endp
.text:000007E2
.text:000007E2 ; ---------------------------------------------------------------------------
.text:000007E3                 align 4
.text:000007E4
.text:000007E4 ; =============== S U B R O U T I N E =======================================
.text:000007E4
.text:000007E4 ; Attributes: bp-based frame
.text:000007E4
.text:000007E4                 public _x11_free_fake_auth
.text:000007E4 _x11_free_fake_auth proc near
.text:000007E4
.text:000007E4 var_4           = dword ptr -4
.text:000007E4 arg_0           = dword ptr  8
.text:000007E4
.text:000007E4                 push    ebp
.text:000007E5                 mov     ebp, esp
.text:000007E7                 push    ecx
.text:000007E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007EF                 mov     eax, [ebp+arg_0]
.text:000007F2                 cmp     dword ptr [eax+4], 0
.text:000007F6                 jz      short loc_80E
.text:000007F8                 mov     ecx, [ebp+arg_0]
.text:000007FB                 mov     edx, [ecx+8]
.text:000007FE                 push    edx
.text:000007FF                 mov     eax, [ebp+arg_0]
.text:00000802                 mov     ecx, [eax+4]
.text:00000805                 push    ecx
.text:00000806                 call    _smemclr
.text:0000080B                 add     esp, 8
.text:0000080E
.text:0000080E loc_80E:                                ; CODE XREF: _x11_free_fake_auth+12j
.text:0000080E                 mov     edx, [ebp+arg_0]
.text:00000811                 mov     eax, [edx+4]
.text:00000814                 push    eax
.text:00000815                 call    _safefree
.text:0000081A                 add     esp, 4
.text:0000081D                 mov     ecx, [ebp+arg_0]
.text:00000820                 mov     edx, [ecx+0Ch]
.text:00000823                 push    edx
.text:00000824                 call    _safefree
.text:00000829                 add     esp, 4
.text:0000082C                 mov     eax, [ebp+arg_0]
.text:0000082F                 mov     ecx, [eax+10h]
.text:00000832                 push    ecx
.text:00000833                 call    _safefree
.text:00000838                 add     esp, 4
.text:0000083B                 mov     edx, [ebp+arg_0]
.text:0000083E                 mov     eax, [edx+14h]
.text:00000841                 push    eax
.text:00000842                 call    _safefree
.text:00000847                 add     esp, 4
.text:0000084A                 mov     ecx, [ebp+arg_0]
.text:0000084D                 cmp     dword ptr [ecx+18h], 0
.text:00000851                 jz      short loc_88A
.text:00000853
.text:00000853 loc_853:                                ; CODE XREF: _x11_free_fake_auth+95j
.text:00000853                 push    0
.text:00000855                 mov     edx, [ebp+arg_0]
.text:00000858                 mov     eax, [edx+18h]
.text:0000085B                 push    eax
.text:0000085C                 call    _delpos234
.text:00000861                 add     esp, 8
.text:00000864                 mov     [ebp+var_4], eax
.text:00000867                 cmp     [ebp+var_4], 0
.text:0000086B                 jz      short loc_87B
.text:0000086D                 mov     ecx, [ebp+var_4]
.text:00000870                 push    ecx
.text:00000871                 call    _safefree
.text:00000876                 add     esp, 4
.text:00000879                 jmp     short loc_853
.text:0000087B ; ---------------------------------------------------------------------------
.text:0000087B
.text:0000087B loc_87B:                                ; CODE XREF: _x11_free_fake_auth+87j
.text:0000087B                 mov     edx, [ebp+arg_0]
.text:0000087E                 mov     eax, [edx+18h]
.text:00000881                 push    eax
.text:00000882                 call    _freetree234
.text:00000887                 add     esp, 4
.text:0000088A
.text:0000088A loc_88A:                                ; CODE XREF: _x11_free_fake_auth+6Dj
.text:0000088A                 mov     ecx, [ebp+arg_0]
.text:0000088D                 push    ecx
.text:0000088E                 call    _safefree
.text:00000893                 add     esp, 4
.text:00000896                 add     esp, 4
.text:00000899                 cmp     ebp, esp
.text:0000089B                 call    __RTC_CheckEsp
.text:000008A0                 mov     esp, ebp
.text:000008A2                 pop     ebp
.text:000008A3                 retn
.text:000008A3 _x11_free_fake_auth endp
.text:000008A3
.text:000008A4
.text:000008A4 ; =============== S U B R O U T I N E =======================================
.text:000008A4
.text:000008A4 ; Attributes: bp-based frame
.text:000008A4
.text:000008A4                 public _x11_authcmp
.text:000008A4 _x11_authcmp    proc near
.text:000008A4
.text:000008A4 var_8           = dword ptr -8
.text:000008A4 var_4           = dword ptr -4
.text:000008A4 arg_0           = dword ptr  8
.text:000008A4 arg_4           = dword ptr  0Ch
.text:000008A4
.text:000008A4                 push    ebp
.text:000008A5                 mov     ebp, esp
.text:000008A7                 sub     esp, 8
.text:000008AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008B8                 mov     eax, [ebp+arg_0]
.text:000008BB                 mov     [ebp+var_4], eax
.text:000008BE                 mov     ecx, [ebp+arg_4]
.text:000008C1                 mov     [ebp+var_8], ecx
.text:000008C4                 mov     edx, [ebp+var_4]
.text:000008C7                 mov     eax, [ebp+var_8]
.text:000008CA                 mov     ecx, [edx]
.text:000008CC                 cmp     ecx, [eax]
.text:000008CE                 jge     short loc_8DA
.text:000008D0                 or      eax, 0FFFFFFFFh
.text:000008D3                 jmp     loc_97A
.text:000008D8 ; ---------------------------------------------------------------------------
.text:000008D8                 jmp     short loc_8F0
.text:000008DA ; ---------------------------------------------------------------------------
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: _x11_authcmp+2Aj
.text:000008DA                 mov     edx, [ebp+var_4]
.text:000008DD                 mov     eax, [ebp+var_8]
.text:000008E0                 mov     ecx, [edx]
.text:000008E2                 cmp     ecx, [eax]
.text:000008E4                 jle     short loc_8F0
.text:000008E6                 mov     eax, 1
.text:000008EB                 jmp     loc_97A
.text:000008F0 ; ---------------------------------------------------------------------------
.text:000008F0
.text:000008F0 loc_8F0:                                ; CODE XREF: _x11_authcmp+34j
.text:000008F0                                         ; _x11_authcmp+40j
.text:000008F0                 mov     edx, [ebp+var_4]
.text:000008F3                 cmp     dword ptr [edx], 1
.text:000008F6                 jnz     short loc_943
.text:000008F8                 mov     eax, [ebp+var_4]
.text:000008FB                 mov     ecx, [ebp+var_8]
.text:000008FE                 mov     edx, [eax+8]
.text:00000901                 cmp     edx, [ecx+8]
.text:00000904                 jge     short loc_90D
.text:00000906                 or      eax, 0FFFFFFFFh
.text:00000909                 jmp     short loc_97A
.text:0000090B ; ---------------------------------------------------------------------------
.text:0000090B                 jmp     short loc_922
.text:0000090D ; ---------------------------------------------------------------------------
.text:0000090D
.text:0000090D loc_90D:                                ; CODE XREF: _x11_authcmp+60j
.text:0000090D                 mov     eax, [ebp+var_4]
.text:00000910                 mov     ecx, [ebp+var_8]
.text:00000913                 mov     edx, [eax+8]
.text:00000916                 cmp     edx, [ecx+8]
.text:00000919                 jle     short loc_922
.text:0000091B                 mov     eax, 1
.text:00000920                 jmp     short loc_97A
.text:00000922 ; ---------------------------------------------------------------------------
.text:00000922
.text:00000922 loc_922:                                ; CODE XREF: _x11_authcmp+67j
.text:00000922                                         ; _x11_authcmp+75j
.text:00000922                 mov     eax, [ebp+var_4]
.text:00000925                 mov     ecx, [eax+8]
.text:00000928                 push    ecx             ; Size
.text:00000929                 mov     edx, [ebp+var_8]
.text:0000092C                 mov     eax, [edx+4]
.text:0000092F                 push    eax             ; Buf2
.text:00000930                 mov     ecx, [ebp+var_4]
.text:00000933                 mov     edx, [ecx+4]
.text:00000936                 push    edx             ; Buf1
.text:00000937                 call    _memcmp
.text:0000093C                 add     esp, 0Ch
.text:0000093F                 jmp     short loc_97A
.text:00000941 ; ---------------------------------------------------------------------------
.text:00000941                 jmp     short loc_97A
.text:00000943 ; ---------------------------------------------------------------------------
.text:00000943
.text:00000943 loc_943:                                ; CODE XREF: _x11_authcmp+52j
.text:00000943                 mov     eax, [ebp+var_4]
.text:00000946                 cmp     dword ptr [eax], 2
.text:00000949                 jz      short loc_962
.text:0000094B                 push    0BBh ; '+'      ; Line
.text:00000950                 push    offset $SG87221 ; "..\\..\\..\\x11fwd.c"
.text:00000955                 push    offset $SG87222 ; "a->proto == X11_XDM"
.text:0000095A                 call    __wassert
.text:0000095F ; ---------------------------------------------------------------------------
.text:0000095F                 add     esp, 0Ch
.text:00000962
.text:00000962 loc_962:                                ; CODE XREF: _x11_authcmp+A5j
.text:00000962                 push    8               ; Size
.text:00000964                 mov     edx, [ebp+var_8]
.text:00000967                 mov     eax, [edx+14h]
.text:0000096A                 push    eax             ; Buf2
.text:0000096B                 mov     ecx, [ebp+var_4]
.text:0000096E                 mov     edx, [ecx+14h]
.text:00000971                 push    edx             ; Buf1
.text:00000972                 call    _memcmp
.text:00000977                 add     esp, 0Ch
.text:0000097A
.text:0000097A loc_97A:                                ; CODE XREF: _x11_authcmp+2Fj
.text:0000097A                                         ; _x11_authcmp+47j ...
.text:0000097A                 add     esp, 8
.text:0000097D                 cmp     ebp, esp
.text:0000097F                 call    __RTC_CheckEsp
.text:00000984                 mov     esp, ebp
.text:00000986                 pop     ebp
.text:00000987                 retn
.text:00000987 _x11_authcmp    endp
.text:00000987
.text:00000987 ; ---------------------------------------------------------------------------
.text:00000988                 db 0Ch dup(0CCh)
.text:00000994
.text:00000994 ; =============== S U B R O U T I N E =======================================
.text:00000994
.text:00000994 ; Attributes: bp-based frame
.text:00000994
.text:00000994                 public _x11_setup_display
.text:00000994 _x11_setup_display proc near
.text:00000994
.text:00000994 var_40          = dword ptr -40h
.text:00000994 var_3C          = dword ptr -3Ch
.text:00000994 var_38          = dword ptr -38h
.text:00000994 var_30          = dword ptr -30h
.text:00000994 var_28          = dword ptr -28h
.text:00000994 var_24          = dword ptr -24h
.text:00000994 var_20          = dword ptr -20h
.text:00000994 var_1C          = dword ptr -1Ch
.text:00000994 Str1            = dword ptr -18h
.text:00000994 var_14          = dword ptr -14h
.text:00000994 var_10          = dword ptr -10h
.text:00000994 Str             = dword ptr -0Ch
.text:00000994 var_8           = dword ptr -8
.text:00000994 var_4           = dword ptr -4
.text:00000994 arg_0           = dword ptr  8
.text:00000994 arg_4           = dword ptr  0Ch
.text:00000994
.text:00000994                 push    ebp
.text:00000995                 mov     ebp, esp
.text:00000997                 sub     esp, 40h
.text:0000099A                 push    esi
.text:0000099B                 push    edi
.text:0000099C                 lea     edi, [ebp+var_40]
.text:0000099F                 mov     ecx, 10h
.text:000009A4                 mov     eax, 0CCCCCCCCh
.text:000009A9                 rep stosd
.text:000009AB                 push    2Ch ; ','
.text:000009AD                 push    1
.text:000009AF                 call    _safemalloc
.text:000009B4                 add     esp, 8
.text:000009B7                 mov     [ebp+var_4], eax
.text:000009BA                 cmp     [ebp+arg_0], 0
.text:000009BE                 jz      short loc_9CA
.text:000009C0                 mov     eax, [ebp+arg_0]
.text:000009C3                 movsx   ecx, byte ptr [eax]
.text:000009C6                 test    ecx, ecx
.text:000009C8                 jnz     short loc_A00
.text:000009CA
.text:000009CA loc_9CA:                                ; CODE XREF: _x11_setup_display+2Aj
.text:000009CA                 call    _platform_get_x_display
.text:000009CF                 mov     [ebp+var_8], eax
.text:000009D2                 cmp     [ebp+var_8], 0
.text:000009D6                 jz      short loc_9E2
.text:000009D8                 mov     edx, [ebp+var_8]
.text:000009DB                 movsx   eax, byte ptr [edx]
.text:000009DE                 test    eax, eax
.text:000009E0                 jnz     short loc_9FE
.text:000009E2
.text:000009E2 loc_9E2:                                ; CODE XREF: _x11_setup_display+42j
.text:000009E2                 mov     ecx, [ebp+var_8]
.text:000009E5                 push    ecx
.text:000009E6                 call    _safefree
.text:000009EB                 add     esp, 4
.text:000009EE                 push    offset $SG87236 ; ":0"
.text:000009F3                 call    _dupstr
.text:000009F8                 add     esp, 4
.text:000009FB                 mov     [ebp+var_8], eax
.text:000009FE
.text:000009FE loc_9FE:                                ; CODE XREF: _x11_setup_display+4Cj
.text:000009FE                 jmp     short loc_A0F
.text:00000A00 ; ---------------------------------------------------------------------------
.text:00000A00
.text:00000A00 loc_A00:                                ; CODE XREF: _x11_setup_display+34j
.text:00000A00                 mov     edx, [ebp+arg_0]
.text:00000A03                 push    edx
.text:00000A04                 call    _dupstr
.text:00000A09                 add     esp, 4
.text:00000A0C                 mov     [ebp+var_8], eax
.text:00000A0F
.text:00000A0F loc_A0F:                                ; CODE XREF: _x11_setup_display:loc_9FEj
.text:00000A0F                 mov     eax, [ebp+var_8]
.text:00000A12                 movsx   ecx, byte ptr [eax]
.text:00000A15                 cmp     ecx, 2Fh ; '/'
.text:00000A18                 jnz     short loc_A59
.text:00000A1A                 mov     edx, [ebp+var_4]
.text:00000A1D                 mov     eax, [ebp+var_8]
.text:00000A20                 mov     [edx+10h], eax
.text:00000A23                 mov     ecx, [ebp+var_4]
.text:00000A26                 mov     dword ptr [ecx], 1
.text:00000A2C                 mov     edx, [ebp+var_4]
.text:00000A2F                 mov     dword ptr [edx+4], 0
.text:00000A36                 mov     eax, [ebp+var_4]
.text:00000A39                 mov     dword ptr [eax+8], 0FFFFFFFFh
.text:00000A40                 mov     ecx, [ebp+var_4]
.text:00000A43                 mov     dword ptr [ecx+0Ch], 0
.text:00000A4A                 mov     edx, [ebp+var_4]
.text:00000A4D                 mov     dword ptr [edx+14h], 0
.text:00000A54                 jmp     loc_C2F
.text:00000A59 ; ---------------------------------------------------------------------------
.text:00000A59
.text:00000A59 loc_A59:                                ; CODE XREF: _x11_setup_display+84j
.text:00000A59                 push    3Ah ; ':'
.text:00000A5B                 mov     eax, [ebp+var_8]
.text:00000A5E                 push    eax
.text:00000A5F                 call    _host_strrchr
.text:00000A64                 add     esp, 8
.text:00000A67                 mov     [ebp+Str], eax
.text:00000A6A                 cmp     [ebp+Str], 0
.text:00000A6E                 jnz     short loc_A8F
.text:00000A70                 mov     ecx, [ebp+var_4]
.text:00000A73                 push    ecx
.text:00000A74                 call    _safefree
.text:00000A79                 add     esp, 4
.text:00000A7C                 mov     edx, [ebp+var_8]
.text:00000A7F                 push    edx
.text:00000A80                 call    _safefree
.text:00000A85                 add     esp, 4
.text:00000A88                 xor     eax, eax
.text:00000A8A                 jmp     loc_E55
.text:00000A8F ; ---------------------------------------------------------------------------
.text:00000A8F
.text:00000A8F loc_A8F:                                ; CODE XREF: _x11_setup_display+DAj
.text:00000A8F                 mov     eax, [ebp+Str]
.text:00000A92                 mov     byte ptr [eax], 0
.text:00000A95                 mov     ecx, [ebp+Str]
.text:00000A98                 add     ecx, 1
.text:00000A9B                 mov     [ebp+Str], ecx
.text:00000A9E                 push    2Eh ; '.'       ; Val
.text:00000AA0                 mov     edx, [ebp+Str]
.text:00000AA3                 push    edx             ; Str
.text:00000AA4                 call    _strchr
.text:00000AA9                 add     esp, 8
.text:00000AAC                 mov     [ebp+var_10], eax
.text:00000AAF                 cmp     [ebp+var_10], 0
.text:00000AB3                 jz      short loc_AC4
.text:00000AB5                 mov     eax, [ebp+var_10]
.text:00000AB8                 mov     byte ptr [eax], 0
.text:00000ABB                 mov     ecx, [ebp+var_10]
.text:00000ABE                 add     ecx, 1
.text:00000AC1                 mov     [ebp+var_10], ecx
.text:00000AC4
.text:00000AC4 loc_AC4:                                ; CODE XREF: _x11_setup_display+11Fj
.text:00000AC4                 mov     edx, [ebp+Str]
.text:00000AC7                 push    edx             ; Str
.text:00000AC8                 call    _atoi
.text:00000ACD                 add     esp, 4
.text:00000AD0                 mov     ecx, [ebp+var_4]
.text:00000AD3                 mov     [ecx+8], eax
.text:00000AD6                 cmp     [ebp+var_10], 0
.text:00000ADA                 jz      short loc_AF0
.text:00000ADC                 mov     edx, [ebp+var_10]
.text:00000ADF                 push    edx             ; Str
.text:00000AE0                 call    _atoi
.text:00000AE5                 add     esp, 4
.text:00000AE8                 mov     ecx, [ebp+var_4]
.text:00000AEB                 mov     [ecx+0Ch], eax
.text:00000AEE                 jmp     short loc_AFA
.text:00000AF0 ; ---------------------------------------------------------------------------
.text:00000AF0
.text:00000AF0 loc_AF0:                                ; CODE XREF: _x11_setup_display+146j
.text:00000AF0                 mov     edx, [ebp+var_4]
.text:00000AF3                 mov     dword ptr [edx+0Ch], 0
.text:00000AFA
.text:00000AFA loc_AFA:                                ; CODE XREF: _x11_setup_display+15Aj
.text:00000AFA                 mov     [ebp+Str1], 0
.text:00000B01                 mov     eax, [ebp+var_8]
.text:00000B04                 mov     [ebp+var_1C], eax
.text:00000B07                 mov     ecx, [ebp+Str]
.text:00000B0A                 cmp     ecx, [ebp+var_8]
.text:00000B0D                 jbe     short loc_B41
.text:00000B0F                 push    2Fh ; '/'       ; Val
.text:00000B11                 mov     edx, [ebp+var_8]
.text:00000B14                 push    edx             ; Str
.text:00000B15                 call    _strchr
.text:00000B1A                 add     esp, 8
.text:00000B1D                 mov     [ebp+var_14], eax
.text:00000B20                 cmp     [ebp+var_14], 0
.text:00000B24                 jz      short loc_B41
.text:00000B26                 mov     eax, [ebp+var_14]
.text:00000B29                 mov     byte ptr [eax], 0
.text:00000B2C                 mov     ecx, [ebp+var_14]
.text:00000B2F                 add     ecx, 1
.text:00000B32                 mov     [ebp+var_14], ecx
.text:00000B35                 mov     edx, [ebp+var_8]
.text:00000B38                 mov     [ebp+Str1], edx
.text:00000B3B                 mov     eax, [ebp+var_14]
.text:00000B3E                 mov     [ebp+var_1C], eax
.text:00000B41
.text:00000B41 loc_B41:                                ; CODE XREF: _x11_setup_display+179j
.text:00000B41                                         ; _x11_setup_display+190j
.text:00000B41                 mov     ecx, [ebp+var_1C]
.text:00000B44                 movsx   edx, byte ptr [ecx]
.text:00000B47                 test    edx, edx
.text:00000B49                 jz      short loc_B5C
.text:00000B4B                 mov     eax, [ebp+var_1C]
.text:00000B4E                 push    eax
.text:00000B4F                 call    _dupstr
.text:00000B54                 add     esp, 4
.text:00000B57                 mov     [ebp+var_3C], eax
.text:00000B5A                 jmp     short loc_B63
.text:00000B5C ; ---------------------------------------------------------------------------
.text:00000B5C
.text:00000B5C loc_B5C:                                ; CODE XREF: _x11_setup_display+1B5j
.text:00000B5C                 mov     [ebp+var_3C], 0
.text:00000B63
.text:00000B63 loc_B63:                                ; CODE XREF: _x11_setup_display+1C6j
.text:00000B63                 mov     ecx, [ebp+var_4]
.text:00000B66                 mov     edx, [ebp+var_3C]
.text:00000B69                 mov     [ecx+4], edx
.text:00000B6C                 cmp     [ebp+Str1], 0
.text:00000B70                 jz      short loc_BB6
.text:00000B72                 push    offset $SG87257 ; "local"
.text:00000B77                 mov     eax, [ebp+Str1]
.text:00000B7A                 push    eax             ; Str1
.text:00000B7B                 call    _strcmp
.text:00000B80                 add     esp, 8
.text:00000B83                 test    eax, eax
.text:00000B85                 jz      short loc_BA5
.text:00000B87                 push    offset $SG87258 ; "unix"
.text:00000B8C                 mov     ecx, [ebp+Str1]
.text:00000B8F                 push    ecx             ; Str1
.text:00000B90                 call    _strcmp
.text:00000B95                 add     esp, 8
.text:00000B98                 test    eax, eax
.text:00000B9A                 jz      short loc_BA5
.text:00000B9C                 mov     [ebp+var_40], 0
.text:00000BA3                 jmp     short loc_BAC
.text:00000BA5 ; ---------------------------------------------------------------------------
.text:00000BA5
.text:00000BA5 loc_BA5:                                ; CODE XREF: _x11_setup_display+1F1j
.text:00000BA5                                         ; _x11_setup_display+206j
.text:00000BA5                 mov     [ebp+var_40], 1
.text:00000BAC
.text:00000BAC loc_BAC:                                ; CODE XREF: _x11_setup_display+20Fj
.text:00000BAC                 mov     edx, [ebp+var_4]
.text:00000BAF                 mov     eax, [ebp+var_40]
.text:00000BB2                 mov     [edx], eax
.text:00000BB4                 jmp     short loc_BEB
.text:00000BB6 ; ---------------------------------------------------------------------------
.text:00000BB6
.text:00000BB6 loc_BB6:                                ; CODE XREF: _x11_setup_display+1DCj
.text:00000BB6                 mov     ecx, [ebp+var_1C]
.text:00000BB9                 movsx   edx, byte ptr [ecx]
.text:00000BBC                 test    edx, edx
.text:00000BBE                 jz      short loc_BD5
.text:00000BC0                 push    offset $SG87262 ; "unix"
.text:00000BC5                 mov     eax, [ebp+var_1C]
.text:00000BC8                 push    eax             ; Str1
.text:00000BC9                 call    _strcmp
.text:00000BCE                 add     esp, 8
.text:00000BD1                 test    eax, eax
.text:00000BD3                 jnz     short loc_BE2
.text:00000BD5
.text:00000BD5 loc_BD5:                                ; CODE XREF: _x11_setup_display+22Aj
.text:00000BD5                 mov     ecx, [ebp+var_4]
.text:00000BD8                 mov     edx, dword ptr ds:_platform_uses_x11_unix_by_default
.text:00000BDE                 mov     [ecx], edx
.text:00000BE0                 jmp     short loc_BEB
.text:00000BE2 ; ---------------------------------------------------------------------------
.text:00000BE2
.text:00000BE2 loc_BE2:                                ; CODE XREF: _x11_setup_display+23Fj
.text:00000BE2                 mov     eax, [ebp+var_4]
.text:00000BE5                 mov     dword ptr [eax], 0
.text:00000BEB
.text:00000BEB loc_BEB:                                ; CODE XREF: _x11_setup_display+220j
.text:00000BEB                                         ; _x11_setup_display+24Cj
.text:00000BEB                 mov     ecx, [ebp+var_4]
.text:00000BEE                 cmp     dword ptr [ecx+4], 0
.text:00000BF2                 jnz     short loc_C0F
.text:00000BF4                 mov     edx, [ebp+var_4]
.text:00000BF7                 cmp     dword ptr [edx], 0
.text:00000BFA                 jnz     short loc_C0F
.text:00000BFC                 push    offset $SG87265 ; "localhost"
.text:00000C01                 call    _dupstr
.text:00000C06                 add     esp, 4
.text:00000C09                 mov     ecx, [ebp+var_4]
.text:00000C0C                 mov     [ecx+4], eax
.text:00000C0F
.text:00000C0F loc_C0F:                                ; CODE XREF: _x11_setup_display+25Ej
.text:00000C0F                                         ; _x11_setup_display+266j
.text:00000C0F                 mov     edx, [ebp+var_4]
.text:00000C12                 mov     dword ptr [edx+10h], 0
.text:00000C19                 mov     eax, [ebp+var_4]
.text:00000C1C                 mov     dword ptr [eax+14h], 0
.text:00000C23                 mov     ecx, [ebp+var_8]
.text:00000C26                 push    ecx
.text:00000C27                 call    _safefree
.text:00000C2C                 add     esp, 4
.text:00000C2F
.text:00000C2F loc_C2F:                                ; CODE XREF: _x11_setup_display+C0j
.text:00000C2F                 mov     edx, [ebp+var_4]
.text:00000C32                 cmp     dword ptr [edx], 0
.text:00000C35                 jnz     loc_CCE
.text:00000C3B                 mov     eax, [ebp+var_4]
.text:00000C3E                 mov     ecx, [eax+8]
.text:00000C41                 add     ecx, 1770h
.text:00000C47                 mov     edx, [ebp+var_4]
.text:00000C4A                 mov     [edx+18h], ecx
.text:00000C4D                 push    0
.text:00000C4F                 mov     eax, [ebp+arg_4]
.text:00000C52                 push    eax
.text:00000C53                 mov     ecx, [ebp+var_4]
.text:00000C56                 add     ecx, 1Ch
.text:00000C59                 push    ecx
.text:00000C5A                 mov     edx, [ebp+var_4]
.text:00000C5D                 mov     eax, [edx+18h]
.text:00000C60                 push    eax
.text:00000C61                 mov     ecx, [ebp+var_4]
.text:00000C64                 mov     edx, [ecx+4]
.text:00000C67                 push    edx
.text:00000C68                 call    _name_lookup
.text:00000C6D                 add     esp, 14h
.text:00000C70                 mov     ecx, [ebp+var_4]
.text:00000C73                 mov     [ecx+14h], eax
.text:00000C76                 mov     edx, [ebp+var_4]
.text:00000C79                 mov     eax, [edx+14h]
.text:00000C7C                 push    eax
.text:00000C7D                 call    _sk_addr_error
.text:00000C82                 add     esp, 4
.text:00000C85                 mov     [ebp+var_20], eax
.text:00000C88                 cmp     [ebp+var_20], 0
.text:00000C8C                 jz      short loc_CCE
.text:00000C8E                 mov     ecx, [ebp+var_4]
.text:00000C91                 mov     edx, [ecx+14h]
.text:00000C94                 push    edx
.text:00000C95                 call    _sk_addr_free
.text:00000C9A                 add     esp, 4
.text:00000C9D                 mov     eax, [ebp+var_4]
.text:00000CA0                 mov     ecx, [eax+4]
.text:00000CA3                 push    ecx
.text:00000CA4                 call    _safefree
.text:00000CA9                 add     esp, 4
.text:00000CAC                 mov     edx, [ebp+var_4]
.text:00000CAF                 mov     eax, [edx+10h]
.text:00000CB2                 push    eax
.text:00000CB3                 call    _safefree
.text:00000CB8                 add     esp, 4
.text:00000CBB                 mov     ecx, [ebp+var_4]
.text:00000CBE                 push    ecx
.text:00000CBF                 call    _safefree
.text:00000CC4                 add     esp, 4
.text:00000CC7                 xor     eax, eax
.text:00000CC9                 jmp     loc_E55
.text:00000CCE ; ---------------------------------------------------------------------------
.text:00000CCE
.text:00000CCE loc_CCE:                                ; CODE XREF: _x11_setup_display+2A1j
.text:00000CCE                                         ; _x11_setup_display+2F8j
.text:00000CCE                 mov     edx, [ebp+var_4]
.text:00000CD1                 cmp     dword ptr [edx], 0
.text:00000CD4                 jnz     loc_DB3
.text:00000CDA                 mov     eax, [ebp+var_4]
.text:00000CDD                 mov     ecx, [eax+14h]
.text:00000CE0                 push    ecx
.text:00000CE1                 call    _sk_address_is_local
.text:00000CE6                 add     esp, 4
.text:00000CE9                 test    eax, eax
.text:00000CEB                 jz      loc_DB3
.text:00000CF1                 mov     edx, [ebp+var_4]
.text:00000CF4                 mov     eax, [edx+8]
.text:00000CF7                 push    eax
.text:00000CF8                 push    0
.text:00000CFA                 call    _platform_get_x11_unix_address
.text:00000CFF                 add     esp, 8
.text:00000D02                 mov     [ebp+var_24], eax
.text:00000D05                 mov     ecx, [ebp+var_24]
.text:00000D08                 push    ecx
.text:00000D09                 call    _sk_addr_error
.text:00000D0E                 add     esp, 4
.text:00000D11                 mov     [ebp+var_28], eax
.text:00000D14                 cmp     [ebp+var_28], 0
.text:00000D18                 jnz     short loc_D7E
.text:00000D1A                 mov     [ebp+var_30], offset _dummy_plug
.text:00000D21                 lea     edx, [ebp+var_30]
.text:00000D24                 push    edx
.text:00000D25                 push    0
.text:00000D27                 push    0
.text:00000D29                 push    0
.text:00000D2B                 push    0
.text:00000D2D                 push    0
.text:00000D2F                 mov     eax, [ebp+var_24]
.text:00000D32                 push    eax
.text:00000D33                 call    _sk_addr_dup
.text:00000D38                 add     esp, 4
.text:00000D3B                 push    eax
.text:00000D3C                 call    _sk_new
.text:00000D41                 add     esp, 1Ch
.text:00000D44                 mov     [ebp+var_38], eax
.text:00000D47                 mov     esi, esp
.text:00000D49                 mov     ecx, [ebp+var_38]
.text:00000D4C                 push    ecx
.text:00000D4D                 mov     edx, [ebp+var_38]
.text:00000D50                 mov     eax, [edx]
.text:00000D52                 mov     ecx, [eax+1Ch]
.text:00000D55                 call    ecx
.text:00000D57                 add     esp, 4
.text:00000D5A                 cmp     esi, esp
.text:00000D5C                 call    __RTC_CheckEsp
.text:00000D61                 mov     [ebp+var_28], eax
.text:00000D64                 mov     esi, esp
.text:00000D66                 mov     edx, [ebp+var_38]
.text:00000D69                 push    edx
.text:00000D6A                 mov     eax, [ebp+var_38]
.text:00000D6D                 mov     ecx, [eax]
.text:00000D6F                 mov     edx, [ecx+4]
.text:00000D72                 call    edx
.text:00000D74                 add     esp, 4
.text:00000D77                 cmp     esi, esp
.text:00000D79                 call    __RTC_CheckEsp
.text:00000D7E
.text:00000D7E loc_D7E:                                ; CODE XREF: _x11_setup_display+384j
.text:00000D7E                 cmp     [ebp+var_28], 0
.text:00000D82                 jz      short loc_D92
.text:00000D84                 mov     eax, [ebp+var_24]
.text:00000D87                 push    eax
.text:00000D88                 call    _sk_addr_free
.text:00000D8D                 add     esp, 4
.text:00000D90                 jmp     short loc_DB3
.text:00000D92 ; ---------------------------------------------------------------------------
.text:00000D92
.text:00000D92 loc_D92:                                ; CODE XREF: _x11_setup_display+3EEj
.text:00000D92                 mov     ecx, [ebp+var_4]
.text:00000D95                 mov     edx, [ecx+14h]
.text:00000D98                 push    edx
.text:00000D99                 call    _sk_addr_free
.text:00000D9E                 add     esp, 4
.text:00000DA1                 mov     eax, [ebp+var_4]
.text:00000DA4                 mov     dword ptr [eax], 1
.text:00000DAA                 mov     ecx, [ebp+var_4]
.text:00000DAD                 mov     edx, [ebp+var_24]
.text:00000DB0                 mov     [ecx+14h], edx
.text:00000DB3
.text:00000DB3 loc_DB3:                                ; CODE XREF: _x11_setup_display+340j
.text:00000DB3                                         ; _x11_setup_display+357j ...
.text:00000DB3                 mov     eax, [ebp+var_4]
.text:00000DB6                 cmp     dword ptr [eax], 0
.text:00000DB9                 jz      short loc_E24
.text:00000DBB                 mov     ecx, [ebp+var_4]
.text:00000DBE                 cmp     dword ptr [ecx+14h], 0
.text:00000DC2                 jnz     short loc_DE0
.text:00000DC4                 mov     edx, [ebp+var_4]
.text:00000DC7                 mov     eax, [edx+8]
.text:00000DCA                 push    eax
.text:00000DCB                 mov     ecx, [ebp+var_4]
.text:00000DCE                 mov     edx, [ecx+10h]
.text:00000DD1                 push    edx
.text:00000DD2                 call    _platform_get_x11_unix_address
.text:00000DD7                 add     esp, 8
.text:00000DDA                 mov     ecx, [ebp+var_4]
.text:00000DDD                 mov     [ecx+14h], eax
.text:00000DE0
.text:00000DE0 loc_DE0:                                ; CODE XREF: _x11_setup_display+42Ej
.text:00000DE0                 mov     edx, [ebp+var_4]
.text:00000DE3                 cmp     dword ptr [edx+10h], 0
.text:00000DE7                 jz      short loc_E00
.text:00000DE9                 mov     eax, [ebp+var_4]
.text:00000DEC                 mov     ecx, [eax+10h]
.text:00000DEF                 push    ecx
.text:00000DF0                 call    _dupstr
.text:00000DF5                 add     esp, 4
.text:00000DF8                 mov     edx, [ebp+var_4]
.text:00000DFB                 mov     [edx+1Ch], eax
.text:00000DFE                 jmp     short loc_E1A
.text:00000E00 ; ---------------------------------------------------------------------------
.text:00000E00
.text:00000E00 loc_E00:                                ; CODE XREF: _x11_setup_display+453j
.text:00000E00                 mov     eax, [ebp+var_4]
.text:00000E03                 mov     ecx, [eax+8]
.text:00000E06                 push    ecx
.text:00000E07                 push    offset $SG87287 ; "unix:%d"
.text:00000E0C                 call    _dupprintf
.text:00000E11                 add     esp, 8
.text:00000E14                 mov     edx, [ebp+var_4]
.text:00000E17                 mov     [edx+1Ch], eax
.text:00000E1A
.text:00000E1A loc_E1A:                                ; CODE XREF: _x11_setup_display+46Aj
.text:00000E1A                 mov     eax, [ebp+var_4]
.text:00000E1D                 mov     dword ptr [eax+18h], 0
.text:00000E24
.text:00000E24 loc_E24:                                ; CODE XREF: _x11_setup_display+425j
.text:00000E24                 mov     ecx, [ebp+var_4]
.text:00000E27                 mov     dword ptr [ecx+20h], 0
.text:00000E2E                 mov     edx, [ebp+var_4]
.text:00000E31                 mov     dword ptr [edx+24h], 0
.text:00000E38                 mov     eax, [ebp+var_4]
.text:00000E3B                 mov     dword ptr [eax+28h], 0
.text:00000E42                 mov     ecx, [ebp+arg_4]
.text:00000E45                 push    ecx
.text:00000E46                 mov     edx, [ebp+var_4]
.text:00000E49                 push    edx
.text:00000E4A                 call    _platform_get_x11_auth
.text:00000E4F                 add     esp, 8
.text:00000E52                 mov     eax, [ebp+var_4]
.text:00000E55
.text:00000E55 loc_E55:                                ; CODE XREF: _x11_setup_display+F6j
.text:00000E55                                         ; _x11_setup_display+335j
.text:00000E55                 push    edx
.text:00000E56                 mov     ecx, ebp
.text:00000E58                 push    eax
.text:00000E59                 lea     edx, $LN38
.text:00000E5F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E64                 pop     eax
.text:00000E65                 pop     edx
.text:00000E66                 pop     edi
.text:00000E67                 pop     esi
.text:00000E68                 add     esp, 40h
.text:00000E6B                 cmp     ebp, esp
.text:00000E6D                 call    __RTC_CheckEsp
.text:00000E72                 mov     esp, ebp
.text:00000E74                 pop     ebp
.text:00000E75                 retn
.text:00000E75 _x11_setup_display endp
.text:00000E75
.text:00000E75 ; ---------------------------------------------------------------------------
.text:00000E76                 align 4
.text:00000E78 $LN38           dd 1                    ; DATA XREF: _x11_setup_display+4C5o
.text:00000E7C                 dd offset $LN37
.text:00000E80 $LN37           dd 0FFFFFFD0h, 4        ; DATA XREF: .text:00000E7Co
.text:00000E88                 dd offset $LN36         ; "dummy"
.text:00000E8C $LN36           db 'dummy',0            ; DATA XREF: .text:00000E88o
.text:00000E92                 align 4
.text:00000E94
.text:00000E94 ; =============== S U B R O U T I N E =======================================
.text:00000E94
.text:00000E94 ; Attributes: bp-based frame
.text:00000E94
.text:00000E94                 public _x11_free_display
.text:00000E94 _x11_free_display proc near
.text:00000E94
.text:00000E94 arg_0           = dword ptr  8
.text:00000E94
.text:00000E94                 push    ebp
.text:00000E95                 mov     ebp, esp
.text:00000E97                 mov     eax, [ebp+arg_0]
.text:00000E9A                 mov     ecx, [eax+4]
.text:00000E9D                 push    ecx
.text:00000E9E                 call    _safefree
.text:00000EA3                 add     esp, 4
.text:00000EA6                 mov     edx, [ebp+arg_0]
.text:00000EA9                 mov     eax, [edx+10h]
.text:00000EAC                 push    eax
.text:00000EAD                 call    _safefree
.text:00000EB2                 add     esp, 4
.text:00000EB5                 mov     ecx, [ebp+arg_0]
.text:00000EB8                 cmp     dword ptr [ecx+24h], 0
.text:00000EBC                 jz      short loc_ED4
.text:00000EBE                 mov     edx, [ebp+arg_0]
.text:00000EC1                 mov     eax, [edx+28h]
.text:00000EC4                 push    eax
.text:00000EC5                 mov     ecx, [ebp+arg_0]
.text:00000EC8                 mov     edx, [ecx+24h]
.text:00000ECB                 push    edx
.text:00000ECC                 call    _smemclr
.text:00000ED1                 add     esp, 8
.text:00000ED4
.text:00000ED4 loc_ED4:                                ; CODE XREF: _x11_free_display+28j
.text:00000ED4                 mov     eax, [ebp+arg_0]
.text:00000ED7                 mov     ecx, [eax+24h]
.text:00000EDA                 push    ecx
.text:00000EDB                 call    _safefree
.text:00000EE0                 add     esp, 4
.text:00000EE3                 mov     edx, [ebp+arg_0]
.text:00000EE6                 mov     eax, [edx+14h]
.text:00000EE9                 push    eax
.text:00000EEA                 call    _sk_addr_free
.text:00000EEF                 add     esp, 4
.text:00000EF2                 mov     ecx, [ebp+arg_0]
.text:00000EF5                 push    ecx
.text:00000EF6                 call    _safefree
.text:00000EFB                 add     esp, 4
.text:00000EFE                 cmp     ebp, esp
.text:00000F00                 call    __RTC_CheckEsp
.text:00000F05                 pop     ebp
.text:00000F06                 retn
.text:00000F06 _x11_free_display endp
.text:00000F06
.text:00000F06 ; ---------------------------------------------------------------------------
.text:00000F07                 db 0Dh dup(0CCh)
.text:00000F14
.text:00000F14 ; =============== S U B R O U T I N E =======================================
.text:00000F14
.text:00000F14 ; Attributes: bp-based frame
.text:00000F14
.text:00000F14 ; int __cdecl x11_get_auth_from_authfile(int, char *Filename)
.text:00000F14                 public _x11_get_auth_from_authfile
.text:00000F14 _x11_get_auth_from_authfile proc near
.text:00000F14
.text:00000F14 var_90          = dword ptr -90h
.text:00000F14 var_8C          = dword ptr -8Ch
.text:00000F14 var_84          = byte ptr -84h
.text:00000F14 Buf2            = byte ptr -6Ch
.text:00000F14 var_64          = dword ptr -64h
.text:00000F14 var_60          = dword ptr -60h
.text:00000F14 var_5C          = dword ptr -5Ch
.text:00000F14 var_58          = dword ptr -58h
.text:00000F14 var_54          = dword ptr -54h
.text:00000F14 var_50          = dword ptr -50h
.text:00000F14 var_4C          = dword ptr -4Ch
.text:00000F14 var_48          = dword ptr -48h
.text:00000F14 var_44          = dword ptr -44h
.text:00000F14 var_3C          = dword ptr -3Ch
.text:00000F14 Size            = dword ptr -30h
.text:00000F14 Buf1            = dword ptr -24h
.text:00000F14 Str             = dword ptr -20h
.text:00000F14 Str1            = dword ptr -1Ch
.text:00000F14 Src             = dword ptr -18h
.text:00000F14 var_10          = dword ptr -10h
.text:00000F14 var_C           = dword ptr -0Ch
.text:00000F14 File            = dword ptr -8
.text:00000F14 var_4           = dword ptr -4
.text:00000F14 arg_0           = dword ptr  8
.text:00000F14 Filename        = dword ptr  0Ch
.text:00000F14
.text:00000F14                 push    ebp
.text:00000F15                 mov     ebp, esp
.text:00000F17                 sub     esp, 90h
.text:00000F1D                 push    edi
.text:00000F1E                 lea     edi, [ebp+var_90]
.text:00000F24                 mov     ecx, 24h ; '$'
.text:00000F29                 mov     eax, 0CCCCCCCCh
.text:00000F2E                 rep stosd
.text:00000F30                 mov     eax, dword ptr ds:___security_cookie
.text:00000F35                 xor     eax, ebp
.text:00000F37                 mov     [ebp+var_4], eax
.text:00000F3A                 mov     [ebp+var_4C], 0
.text:00000F41                 mov     eax, [ebp+arg_0]
.text:00000F44                 cmp     dword ptr [eax], 0
.text:00000F47                 jnz     short loc_F68
.text:00000F49                 mov     ecx, [ebp+arg_0]
.text:00000F4C                 mov     edx, [ecx+14h]
.text:00000F4F                 push    edx
.text:00000F50                 call    _sk_address_is_local
.text:00000F55                 add     esp, 4
.text:00000F58                 test    eax, eax
.text:00000F5A                 jz      short loc_F68
.text:00000F5C                 mov     [ebp+var_8C], 1
.text:00000F66                 jmp     short loc_F72
.text:00000F68 ; ---------------------------------------------------------------------------
.text:00000F68
.text:00000F68 loc_F68:                                ; CODE XREF: _x11_get_auth_from_authfile+33j
.text:00000F68                                         ; _x11_get_auth_from_authfile+46j
.text:00000F68                 mov     [ebp+var_8C], 0
.text:00000F72
.text:00000F72 loc_F72:                                ; CODE XREF: _x11_get_auth_from_authfile+52j
.text:00000F72                 mov     eax, [ebp+var_8C]
.text:00000F78                 mov     [ebp+var_54], eax
.text:00000F7B                 push    offset $SG87396 ; "rb"
.text:00000F80                 mov     ecx, [ebp+Filename]
.text:00000F83                 push    ecx             ; Filename
.text:00000F84                 call    _fopen
.text:00000F89                 add     esp, 8
.text:00000F8C                 mov     [ebp+File], eax
.text:00000F8F                 cmp     [ebp+File], 0
.text:00000F93                 jnz     short loc_F9A
.text:00000F95                 jmp     loc_133D
.text:00000F9A ; ---------------------------------------------------------------------------
.text:00000F9A
.text:00000F9A loc_F9A:                                ; CODE XREF: _x11_get_auth_from_authfile+7Fj
.text:00000F9A                 call    _get_hostname
.text:00000F9F                 mov     [ebp+var_50], eax
.text:00000FA2                 push    1
.text:00000FA4                 push    40004h
.text:00000FA9                 call    _safemalloc
.text:00000FAE                 add     esp, 8
.text:00000FB1                 mov     [ebp+var_C], eax
.text:00000FB4
.text:00000FB4 loc_FB4:                                ; CODE XREF: _x11_get_auth_from_authfile:loc_113Cj
.text:00000FB4                                         ; _x11_get_auth_from_authfile+26Aj ...
.text:00000FB4                 cmp     [ebp+var_4C], 0
.text:00000FB8                 jnz     $done$87411
.text:00000FBE                 mov     [ebp+var_64], 0
.text:00000FC5
.text:00000FC5 loc_FC5:                                ; CODE XREF: _x11_get_auth_from_authfile+D4j
.text:00000FC5                 mov     edx, [ebp+File]
.text:00000FC8                 push    edx             ; File
.text:00000FC9                 call    _fgetc
.text:00000FCE                 add     esp, 4
.text:00000FD1                 mov     [ebp+var_58], eax
.text:00000FD4                 cmp     [ebp+var_58], 0FFFFFFFFh
.text:00000FD8                 jnz     short loc_FDF
.text:00000FDA                 jmp     $done$87411
.text:00000FDF ; ---------------------------------------------------------------------------
.text:00000FDF
.text:00000FDF loc_FDF:                                ; CODE XREF: _x11_get_auth_from_authfile+C4j
.text:00000FDF                 movzx   eax, byte ptr [ebp+var_58]
.text:00000FE3                 mov     [ebp+var_58], eax
.text:00000FE6                 xor     ecx, ecx
.text:00000FE8                 jnz     short loc_FC5
.text:00000FEA                 mov     edx, [ebp+var_58]
.text:00000FED                 mov     [ebp+var_44], edx
.text:00000FF0
.text:00000FF0 loc_FF0:                                ; CODE XREF: _x11_get_auth_from_authfile+FFj
.text:00000FF0                 mov     eax, [ebp+File]
.text:00000FF3                 push    eax             ; File
.text:00000FF4                 call    _fgetc
.text:00000FF9                 add     esp, 4
.text:00000FFC                 mov     [ebp+var_58], eax
.text:00000FFF                 cmp     [ebp+var_58], 0FFFFFFFFh
.text:00001003                 jnz     short loc_100A
.text:00001005                 jmp     $done$87411
.text:0000100A ; ---------------------------------------------------------------------------
.text:0000100A
.text:0000100A loc_100A:                               ; CODE XREF: _x11_get_auth_from_authfile+EFj
.text:0000100A                 movzx   ecx, byte ptr [ebp+var_58]
.text:0000100E                 mov     [ebp+var_58], ecx
.text:00001011                 xor     edx, edx
.text:00001013                 jnz     short loc_FF0
.text:00001015                 mov     eax, [ebp+var_44]
.text:00001018                 shl     eax, 8
.text:0000101B                 or      eax, [ebp+var_58]
.text:0000101E                 mov     [ebp+var_44], eax
.text:00001021                 mov     ecx, [ebp+var_C]
.text:00001024                 mov     [ebp+var_10], ecx
.text:00001027                 mov     [ebp+var_5C], 0
.text:0000102E                 jmp     short loc_1039
.text:00001030 ; ---------------------------------------------------------------------------
.text:00001030
.text:00001030 loc_1030:                               ; CODE XREF: _x11_get_auth_from_authfile+206j
.text:00001030                 mov     edx, [ebp+var_5C]
.text:00001033                 add     edx, 1
.text:00001036                 mov     [ebp+var_5C], edx
.text:00001039
.text:00001039 loc_1039:                               ; CODE XREF: _x11_get_auth_from_authfile+11Aj
.text:00001039                 cmp     [ebp+var_5C], 4
.text:0000103D                 jge     loc_111F
.text:00001043
.text:00001043 loc_1043:                               ; CODE XREF: _x11_get_auth_from_authfile+152j
.text:00001043                 mov     eax, [ebp+File]
.text:00001046                 push    eax             ; File
.text:00001047                 call    _fgetc
.text:0000104C                 add     esp, 4
.text:0000104F                 mov     [ebp+var_58], eax
.text:00001052                 cmp     [ebp+var_58], 0FFFFFFFFh
.text:00001056                 jnz     short loc_105D
.text:00001058                 jmp     $done$87411
.text:0000105D ; ---------------------------------------------------------------------------
.text:0000105D
.text:0000105D loc_105D:                               ; CODE XREF: _x11_get_auth_from_authfile+142j
.text:0000105D                 movzx   ecx, byte ptr [ebp+var_58]
.text:00001061                 mov     [ebp+var_58], ecx
.text:00001064                 xor     edx, edx
.text:00001066                 jnz     short loc_1043
.text:00001068                 mov     eax, [ebp+var_5C]
.text:0000106B                 mov     ecx, [ebp+var_58]
.text:0000106E                 mov     [ebp+eax*4+var_3C], ecx
.text:00001072
.text:00001072 loc_1072:                               ; CODE XREF: _x11_get_auth_from_authfile+181j
.text:00001072                 mov     edx, [ebp+File]
.text:00001075                 push    edx             ; File
.text:00001076                 call    _fgetc
.text:0000107B                 add     esp, 4
.text:0000107E                 mov     [ebp+var_58], eax
.text:00001081                 cmp     [ebp+var_58], 0FFFFFFFFh
.text:00001085                 jnz     short loc_108C
.text:00001087                 jmp     $done$87411
.text:0000108C ; ---------------------------------------------------------------------------
.text:0000108C
.text:0000108C loc_108C:                               ; CODE XREF: _x11_get_auth_from_authfile+171j
.text:0000108C                 movzx   eax, byte ptr [ebp+var_58]
.text:00001090                 mov     [ebp+var_58], eax
.text:00001093                 xor     ecx, ecx
.text:00001095                 jnz     short loc_1072
.text:00001097                 mov     edx, [ebp+var_5C]
.text:0000109A                 mov     eax, [ebp+edx*4+var_3C]
.text:0000109E                 shl     eax, 8
.text:000010A1                 or      eax, [ebp+var_58]
.text:000010A4                 mov     ecx, [ebp+var_5C]
.text:000010A7                 mov     [ebp+ecx*4+var_3C], eax
.text:000010AB                 mov     edx, [ebp+var_5C]
.text:000010AE                 mov     eax, [ebp+var_10]
.text:000010B1                 mov     [ebp+edx*4+Buf1], eax
.text:000010B5                 mov     [ebp+var_60], 0
.text:000010BC                 jmp     short loc_10C7
.text:000010BE ; ---------------------------------------------------------------------------
.text:000010BE
.text:000010BE loc_10BE:                               ; CODE XREF: _x11_get_auth_from_authfile+1F5j
.text:000010BE                 mov     ecx, [ebp+var_60]
.text:000010C1                 add     ecx, 1
.text:000010C4                 mov     [ebp+var_60], ecx
.text:000010C7
.text:000010C7 loc_10C7:                               ; CODE XREF: _x11_get_auth_from_authfile+1A8j
.text:000010C7                 mov     edx, [ebp+var_5C]
.text:000010CA                 mov     eax, [ebp+var_60]
.text:000010CD                 cmp     eax, [ebp+edx*4+var_3C]
.text:000010D1                 jge     short loc_110B
.text:000010D3
.text:000010D3 loc_10D3:                               ; CODE XREF: _x11_get_auth_from_authfile+1E2j
.text:000010D3                 mov     ecx, [ebp+File]
.text:000010D6                 push    ecx             ; File
.text:000010D7                 call    _fgetc
.text:000010DC                 add     esp, 4
.text:000010DF                 mov     [ebp+var_58], eax
.text:000010E2                 cmp     [ebp+var_58], 0FFFFFFFFh
.text:000010E6                 jnz     short loc_10ED
.text:000010E8                 jmp     $done$87411
.text:000010ED ; ---------------------------------------------------------------------------
.text:000010ED
.text:000010ED loc_10ED:                               ; CODE XREF: _x11_get_auth_from_authfile+1D2j
.text:000010ED                 movzx   edx, byte ptr [ebp+var_58]
.text:000010F1                 mov     [ebp+var_58], edx
.text:000010F4                 xor     eax, eax
.text:000010F6                 jnz     short loc_10D3
.text:000010F8                 mov     ecx, [ebp+var_10]
.text:000010FB                 mov     dl, byte ptr [ebp+var_58]
.text:000010FE                 mov     [ecx], dl
.text:00001100                 mov     eax, [ebp+var_10]
.text:00001103                 add     eax, 1
.text:00001106                 mov     [ebp+var_10], eax
.text:00001109                 jmp     short loc_10BE
.text:0000110B ; ---------------------------------------------------------------------------
.text:0000110B
.text:0000110B loc_110B:                               ; CODE XREF: _x11_get_auth_from_authfile+1BDj
.text:0000110B                 mov     ecx, [ebp+var_10]
.text:0000110E                 mov     byte ptr [ecx], 0
.text:00001111                 mov     edx, [ebp+var_10]
.text:00001114                 add     edx, 1
.text:00001117                 mov     [ebp+var_10], edx
.text:0000111A                 jmp     loc_1030
.text:0000111F ; ---------------------------------------------------------------------------
.text:0000111F
.text:0000111F loc_111F:                               ; CODE XREF: _x11_get_auth_from_authfile+129j
.text:0000111F                 mov     eax, [ebp+arg_0]
.text:00001122                 cmp     dword ptr [eax+8], 0
.text:00001126                 jl      short loc_113C
.text:00001128                 mov     ecx, [ebp+Str]
.text:0000112B                 push    ecx             ; Str
.text:0000112C                 call    _atoi
.text:00001131                 add     esp, 4
.text:00001134                 mov     edx, [ebp+arg_0]
.text:00001137                 cmp     [edx+8], eax
.text:0000113A                 jz      short loc_1141
.text:0000113C
.text:0000113C loc_113C:                               ; CODE XREF: _x11_get_auth_from_authfile+212j
.text:0000113C                 jmp     loc_FB4
.text:00001141 ; ---------------------------------------------------------------------------
.text:00001141
.text:00001141 loc_1141:                               ; CODE XREF: _x11_get_auth_from_authfile+226j
.text:00001141                 mov     [ebp+var_48], 1
.text:00001148                 jmp     short loc_1153
.text:0000114A ; ---------------------------------------------------------------------------
.text:0000114A
.text:0000114A loc_114A:                               ; CODE XREF: _x11_get_auth_from_authfile:loc_1176j
.text:0000114A                 mov     eax, [ebp+var_48]
.text:0000114D                 add     eax, 1
.text:00001150                 mov     [ebp+var_48], eax
.text:00001153
.text:00001153 loc_1153:                               ; CODE XREF: _x11_get_auth_from_authfile+234j
.text:00001153                 cmp     [ebp+var_48], 3
.text:00001157                 jnb     short loc_1178
.text:00001159                 mov     ecx, [ebp+var_48]
.text:0000115C                 mov     edx, ds:_x11_authnames[ecx*4]
.text:00001163                 push    edx             ; Str2
.text:00001164                 mov     eax, [ebp+Str1]
.text:00001167                 push    eax             ; Str1
.text:00001168                 call    _strcmp
.text:0000116D                 add     esp, 8
.text:00001170                 test    eax, eax
.text:00001172                 jnz     short loc_1176
.text:00001174                 jmp     short loc_1178
.text:00001176 ; ---------------------------------------------------------------------------
.text:00001176
.text:00001176 loc_1176:                               ; CODE XREF: _x11_get_auth_from_authfile+25Ej
.text:00001176                 jmp     short loc_114A
.text:00001178 ; ---------------------------------------------------------------------------
.text:00001178
.text:00001178 loc_1178:                               ; CODE XREF: _x11_get_auth_from_authfile+243j
.text:00001178                                         ; _x11_get_auth_from_authfile+260j
.text:00001178                 cmp     [ebp+var_48], 3
.text:0000117C                 jnz     short loc_1183
.text:0000117E                 jmp     loc_FB4
.text:00001183 ; ---------------------------------------------------------------------------
.text:00001183
.text:00001183 loc_1183:                               ; CODE XREF: _x11_get_auth_from_authfile+268j
.text:00001183                 mov     ecx, [ebp+var_44]
.text:00001186                 mov     [ebp+var_90], ecx
.text:0000118C                 cmp     [ebp+var_90], 0
.text:00001193                 jz      short loc_11B3
.text:00001195                 cmp     [ebp+var_90], 6
.text:0000119C                 jz      short loc_1216
.text:0000119E                 cmp     [ebp+var_90], 100h
.text:000011A8                 jz      loc_127C
.text:000011AE                 jmp     loc_12B1
.text:000011B3 ; ---------------------------------------------------------------------------
.text:000011B3
.text:000011B3 loc_11B3:                               ; CODE XREF: _x11_get_auth_from_authfile+27Fj
.text:000011B3                 mov     edx, [ebp+arg_0]
.text:000011B6                 cmp     dword ptr [edx], 0
.text:000011B9                 jnz     short loc_1211
.text:000011BB                 mov     eax, [ebp+arg_0]
.text:000011BE                 mov     ecx, [eax+14h]
.text:000011C1                 push    ecx
.text:000011C2                 call    _sk_addrtype
.text:000011C7                 add     esp, 4
.text:000011CA                 cmp     eax, 1
.text:000011CD                 jnz     short loc_1211
.text:000011CF                 lea     edx, [ebp+Buf2]
.text:000011D2                 push    edx
.text:000011D3                 mov     eax, [ebp+arg_0]
.text:000011D6                 mov     ecx, [eax+14h]
.text:000011D9                 push    ecx
.text:000011DA                 call    _sk_addrcopy
.text:000011DF                 add     esp, 8
.text:000011E2                 cmp     [ebp+var_3C], 4
.text:000011E6                 jnz     short loc_1211
.text:000011E8                 push    4               ; Size
.text:000011EA                 lea     edx, [ebp+Buf2]
.text:000011ED                 push    edx             ; Buf2
.text:000011EE                 mov     eax, [ebp+Buf1]
.text:000011F1                 push    eax             ; Buf1
.text:000011F2                 call    _memcmp
.text:000011F7                 add     esp, 0Ch
.text:000011FA                 test    eax, eax
.text:000011FC                 jnz     short loc_1211
.text:000011FE                 mov     [ebp+var_64], 1
.text:00001205                 xor     ecx, ecx
.text:00001207                 cmp     [ebp+var_54], 0
.text:0000120B                 setz    cl
.text:0000120E                 mov     [ebp+var_4C], ecx
.text:00001211
.text:00001211 loc_1211:                               ; CODE XREF: _x11_get_auth_from_authfile+2A5j
.text:00001211                                         ; _x11_get_auth_from_authfile+2B9j ...
.text:00001211                 jmp     loc_12B1
.text:00001216 ; ---------------------------------------------------------------------------
.text:00001216
.text:00001216 loc_1216:                               ; CODE XREF: _x11_get_auth_from_authfile+288j
.text:00001216                 mov     edx, [ebp+arg_0]
.text:00001219                 cmp     dword ptr [edx], 0
.text:0000121C                 jnz     short loc_127A
.text:0000121E                 mov     eax, [ebp+arg_0]
.text:00001221                 mov     ecx, [eax+14h]
.text:00001224                 push    ecx
.text:00001225                 call    _sk_addrtype
.text:0000122A                 add     esp, 4
.text:0000122D                 cmp     eax, 2
.text:00001230                 jnz     short loc_127A
.text:00001232                 lea     edx, [ebp+var_84]
.text:00001238                 push    edx
.text:00001239                 mov     eax, [ebp+arg_0]
.text:0000123C                 mov     ecx, [eax+14h]
.text:0000123F                 push    ecx
.text:00001240                 call    _sk_addrcopy
.text:00001245                 add     esp, 8
.text:00001248                 cmp     [ebp+var_3C], 10h
.text:0000124C                 jnz     short loc_127A
.text:0000124E                 push    10h             ; Size
.text:00001250                 lea     edx, [ebp+var_84]
.text:00001256                 push    edx             ; Buf2
.text:00001257                 mov     eax, [ebp+Buf1]
.text:0000125A                 push    eax             ; Buf1
.text:0000125B                 call    _memcmp
.text:00001260                 add     esp, 0Ch
.text:00001263                 test    eax, eax
.text:00001265                 jnz     short loc_127A
.text:00001267                 mov     [ebp+var_64], 1
.text:0000126E                 xor     ecx, ecx
.text:00001270                 cmp     [ebp+var_54], 0
.text:00001274                 setz    cl
.text:00001277                 mov     [ebp+var_4C], ecx
.text:0000127A
.text:0000127A loc_127A:                               ; CODE XREF: _x11_get_auth_from_authfile+308j
.text:0000127A                                         ; _x11_get_auth_from_authfile+31Cj ...
.text:0000127A                 jmp     short loc_12B1
.text:0000127C ; ---------------------------------------------------------------------------
.text:0000127C
.text:0000127C loc_127C:                               ; CODE XREF: _x11_get_auth_from_authfile+294j
.text:0000127C                 mov     edx, [ebp+arg_0]
.text:0000127F                 cmp     dword ptr [edx], 0
.text:00001282                 jnz     short loc_128A
.text:00001284                 cmp     [ebp+var_54], 0
.text:00001288                 jz      short loc_12B1
.text:0000128A
.text:0000128A loc_128A:                               ; CODE XREF: _x11_get_auth_from_authfile+36Ej
.text:0000128A                 cmp     [ebp+var_50], 0
.text:0000128E                 jz      short loc_12B1
.text:00001290                 mov     eax, [ebp+Buf1]
.text:00001293                 push    eax             ; Str2
.text:00001294                 mov     ecx, [ebp+var_50]
.text:00001297                 push    ecx             ; Str1
.text:00001298                 call    _strcmp
.text:0000129D                 add     esp, 8
.text:000012A0                 test    eax, eax
.text:000012A2                 jnz     short loc_12B1
.text:000012A4                 mov     [ebp+var_4C], 1
.text:000012AB                 mov     edx, [ebp+var_4C]
.text:000012AE                 mov     [ebp+var_64], edx
.text:000012B1
.text:000012B1 loc_12B1:                               ; CODE XREF: _x11_get_auth_from_authfile+29Aj
.text:000012B1                                         ; _x11_get_auth_from_authfile:loc_1211j ...
.text:000012B1                 cmp     [ebp+var_64], 0
.text:000012B5                 jz      short loc_1303
.text:000012B7                 mov     eax, [ebp+arg_0]
.text:000012BA                 mov     ecx, [ebp+var_48]
.text:000012BD                 mov     [eax+20h], ecx
.text:000012C0                 mov     edx, [ebp+arg_0]
.text:000012C3                 mov     eax, [edx+24h]
.text:000012C6                 push    eax
.text:000012C7                 call    _safefree
.text:000012CC                 add     esp, 4
.text:000012CF                 push    1
.text:000012D1                 mov     ecx, [ebp+Size]
.text:000012D4                 push    ecx
.text:000012D5                 call    _safemalloc
.text:000012DA                 add     esp, 8
.text:000012DD                 mov     edx, [ebp+arg_0]
.text:000012E0                 mov     [edx+24h], eax
.text:000012E3                 mov     eax, [ebp+Size]
.text:000012E6                 push    eax             ; Size
.text:000012E7                 mov     ecx, [ebp+Src]
.text:000012EA                 push    ecx             ; Src
.text:000012EB                 mov     edx, [ebp+arg_0]
.text:000012EE                 mov     eax, [edx+24h]
.text:000012F1                 push    eax             ; Dst
.text:000012F2                 call    _memcpy
.text:000012F7                 add     esp, 0Ch
.text:000012FA                 mov     ecx, [ebp+arg_0]
.text:000012FD                 mov     edx, [ebp+Size]
.text:00001300                 mov     [ecx+28h], edx
.text:00001303
.text:00001303 loc_1303:                               ; CODE XREF: _x11_get_auth_from_authfile+3A1j
.text:00001303                 jmp     loc_FB4
.text:00001308 ; ---------------------------------------------------------------------------
.text:00001308
.text:00001308 $done$87411:                            ; CODE XREF: _x11_get_auth_from_authfile+A4j
.text:00001308                                         ; _x11_get_auth_from_authfile+C6j ...
.text:00001308                 mov     eax, [ebp+File]
.text:0000130B                 push    eax             ; File
.text:0000130C                 call    _fclose
.text:00001311                 add     esp, 4
.text:00001314                 push    40004h
.text:00001319                 mov     ecx, [ebp+var_C]
.text:0000131C                 push    ecx
.text:0000131D                 call    _smemclr
.text:00001322                 add     esp, 8
.text:00001325                 mov     edx, [ebp+var_C]
.text:00001328                 push    edx
.text:00001329                 call    _safefree
.text:0000132E                 add     esp, 4
.text:00001331                 mov     eax, [ebp+var_50]
.text:00001334                 push    eax
.text:00001335                 call    _safefree
.text:0000133A                 add     esp, 4
.text:0000133D
.text:0000133D loc_133D:                               ; CODE XREF: _x11_get_auth_from_authfile+81j
.text:0000133D                 push    edx
.text:0000133E                 mov     ecx, ebp
.text:00001340                 push    eax
.text:00001341                 lea     edx, $LN60
.text:00001347                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000134C                 pop     eax
.text:0000134D                 pop     edx
.text:0000134E                 pop     edi
.text:0000134F                 mov     ecx, [ebp+var_4]
.text:00001352                 xor     ecx, ebp
.text:00001354                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001359                 add     esp, 90h
.text:0000135F                 cmp     ebp, esp
.text:00001361                 call    __RTC_CheckEsp
.text:00001366                 mov     esp, ebp
.text:00001368                 pop     ebp
.text:00001369                 retn
.text:00001369 _x11_get_auth_from_authfile endp
.text:00001369
.text:00001369 ; ---------------------------------------------------------------------------
.text:0000136A                 align 4
.text:0000136C $LN60           dd 4                    ; DATA XREF: _x11_get_auth_from_authfile+42Do
.text:00001370                 dd offset $LN59
.text:00001374 $LN59           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00001370o
.text:0000137C                 dd offset $LN55
.text:00001380                 dd 0FFFFFFC4h, 10h
.text:00001388                 dd offset $LN56
.text:0000138C                 dd 0FFFFFF94h, 4
.text:00001394                 dd offset $LN57
.text:00001398                 dd 0FFFFFF7Ch, 10h
.text:000013A0                 dd offset $LN58
.text:000013A4 $LN58           dd 667562h              ; DATA XREF: .text:000013A0o
.text:000013A8 $LN57           dd 667562h              ; DATA XREF: .text:00001394o
.text:000013AC $LN56           dd 6E656Ch              ; DATA XREF: .text:00001388o
.text:000013B0 $LN55           dd 727473h              ; DATA XREF: .text:0000137Co
.text:000013B4
.text:000013B4 ; =============== S U B R O U T I N E =======================================
.text:000013B4
.text:000013B4 ; Attributes: bp-based frame
.text:000013B4
.text:000013B4 _x11_log        proc near               ; DATA XREF: .rdata:`x11_init'::`2'::fn_tableo
.text:000013B4                 push    ebp
.text:000013B5                 mov     ebp, esp
.text:000013B7                 pop     ebp
.text:000013B8                 retn
.text:000013B8 _x11_log        endp
.text:000013B8
.text:000013B8 ; ---------------------------------------------------------------------------
.text:000013B9                 db 0Bh dup(0CCh)
.text:000013C4
.text:000013C4 ; =============== S U B R O U T I N E =======================================
.text:000013C4
.text:000013C4 ; Attributes: bp-based frame
.text:000013C4
.text:000013C4 _x11_closing    proc near               ; DATA XREF: .rdata:00000464o
.text:000013C4
.text:000013C4 var_8           = dword ptr -8
.text:000013C4 var_4           = dword ptr -4
.text:000013C4 arg_0           = dword ptr  8
.text:000013C4 arg_4           = dword ptr  0Ch
.text:000013C4
.text:000013C4                 push    ebp
.text:000013C5                 mov     ebp, esp
.text:000013C7                 sub     esp, 8
.text:000013CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000013D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013D8                 mov     eax, [ebp+arg_0]
.text:000013DB                 mov     [ebp+var_4], eax
.text:000013DE                 cmp     [ebp+arg_4], 0
.text:000013E2                 jz      short loc_1432
.text:000013E4                 mov     ecx, [ebp+var_4]
.text:000013E7                 cmp     dword ptr [ecx+40h], 0
.text:000013EB                 jz      short loc_141D
.text:000013ED                 mov     edx, [ebp+arg_4]
.text:000013F0                 push    edx
.text:000013F1                 push    offset $SG87498 ; "unable to connect to forwarded X server"...
.text:000013F6                 call    _dupprintf
.text:000013FB                 add     esp, 8
.text:000013FE                 mov     [ebp+var_8], eax
.text:00001401                 mov     eax, [ebp+var_8]
.text:00001404                 push    eax
.text:00001405                 mov     ecx, [ebp+var_4]
.text:00001408                 push    ecx
.text:00001409                 call    _x11_send_init_error
.text:0000140E                 add     esp, 8
.text:00001411                 mov     edx, [ebp+var_8]
.text:00001414                 push    edx
.text:00001415                 call    _safefree
.text:0000141A                 add     esp, 4
.text:0000141D
.text:0000141D loc_141D:                               ; CODE XREF: _x11_closing+27j
.text:0000141D                 mov     eax, [ebp+arg_4]
.text:00001420                 push    eax
.text:00001421                 mov     ecx, [ebp+var_4]
.text:00001424                 mov     edx, [ecx+4Ch]
.text:00001427                 push    edx
.text:00001428                 call    _sshfwd_unclean_close
.text:0000142D                 add     esp, 8
.text:00001430                 jmp     short loc_144A
.text:00001432 ; ---------------------------------------------------------------------------
.text:00001432
.text:00001432 loc_1432:                               ; CODE XREF: _x11_closing+1Ej
.text:00001432                 mov     eax, [ebp+var_4]
.text:00001435                 cmp     dword ptr [eax+4Ch], 0
.text:00001439                 jz      short loc_144A
.text:0000143B                 mov     ecx, [ebp+var_4]
.text:0000143E                 mov     edx, [ecx+4Ch]
.text:00001441                 push    edx
.text:00001442                 call    _sshfwd_write_eof
.text:00001447                 add     esp, 4
.text:0000144A
.text:0000144A loc_144A:                               ; CODE XREF: _x11_closing+6Cj
.text:0000144A                                         ; _x11_closing+75j
.text:0000144A                 mov     eax, 1
.text:0000144F                 add     esp, 8
.text:00001452                 cmp     ebp, esp
.text:00001454                 call    __RTC_CheckEsp
.text:00001459                 mov     esp, ebp
.text:0000145B                 pop     ebp
.text:0000145C                 retn
.text:0000145C _x11_closing    endp
.text:0000145C
.text:0000145C ; ---------------------------------------------------------------------------
.text:0000145D                 db 7 dup(0CCh)
.text:00001464
.text:00001464 ; =============== S U B R O U T I N E =======================================
.text:00001464
.text:00001464 ; Attributes: bp-based frame
.text:00001464
.text:00001464 _x11_receive    proc near               ; DATA XREF: .rdata:00000468o
.text:00001464
.text:00001464 var_4           = dword ptr -4
.text:00001464 arg_0           = dword ptr  8
.text:00001464 arg_8           = dword ptr  10h
.text:00001464 arg_C           = dword ptr  14h
.text:00001464
.text:00001464                 push    ebp
.text:00001465                 mov     ebp, esp
.text:00001467                 push    ecx
.text:00001468                 push    esi
.text:00001469                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001470                 mov     eax, [ebp+arg_0]
.text:00001473                 mov     [ebp+var_4], eax
.text:00001476                 mov     ecx, [ebp+arg_C]
.text:00001479                 push    ecx
.text:0000147A                 mov     edx, [ebp+arg_8]
.text:0000147D                 push    edx
.text:0000147E                 mov     eax, [ebp+var_4]
.text:00001481                 mov     ecx, [eax+4Ch]
.text:00001484                 push    ecx
.text:00001485                 call    _sshfwd_write
.text:0000148A                 add     esp, 0Ch
.text:0000148D                 test    eax, eax
.text:0000148F                 jle     short loc_14C7
.text:00001491                 mov     edx, [ebp+var_4]
.text:00001494                 mov     dword ptr [edx+38h], 1
.text:0000149B                 mov     eax, [ebp+var_4]
.text:0000149E                 mov     dword ptr [eax+40h], 0
.text:000014A5                 mov     esi, esp
.text:000014A7                 push    1
.text:000014A9                 mov     ecx, [ebp+var_4]
.text:000014AC                 mov     edx, [ecx+50h]
.text:000014AF                 push    edx
.text:000014B0                 mov     eax, [ebp+var_4]
.text:000014B3                 mov     ecx, [eax+50h]
.text:000014B6                 mov     edx, [ecx]
.text:000014B8                 mov     eax, [edx+18h]
.text:000014BB                 call    eax
.text:000014BD                 add     esp, 8
.text:000014C0                 cmp     esi, esp
.text:000014C2                 call    __RTC_CheckEsp
.text:000014C7
.text:000014C7 loc_14C7:                               ; CODE XREF: _x11_receive+2Bj
.text:000014C7                 mov     eax, 1
.text:000014CC                 pop     esi
.text:000014CD                 add     esp, 4
.text:000014D0                 cmp     ebp, esp
.text:000014D2                 call    __RTC_CheckEsp
.text:000014D7                 mov     esp, ebp
.text:000014D9                 pop     ebp
.text:000014DA                 retn
.text:000014DA _x11_receive    endp
.text:000014DA
.text:000014DA ; ---------------------------------------------------------------------------
.text:000014DB                 db 9 dup(0CCh)
.text:000014E4
.text:000014E4 ; =============== S U B R O U T I N E =======================================
.text:000014E4
.text:000014E4 ; Attributes: bp-based frame
.text:000014E4
.text:000014E4 _x11_sent       proc near               ; DATA XREF: .rdata:0000046Co
.text:000014E4
.text:000014E4 var_4           = dword ptr -4
.text:000014E4 arg_0           = dword ptr  8
.text:000014E4 arg_4           = dword ptr  0Ch
.text:000014E4
.text:000014E4                 push    ebp
.text:000014E5                 mov     ebp, esp
.text:000014E7                 push    ecx
.text:000014E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014EF                 mov     eax, [ebp+arg_0]
.text:000014F2                 mov     [ebp+var_4], eax
.text:000014F5                 mov     ecx, [ebp+arg_4]
.text:000014F8                 push    ecx
.text:000014F9                 mov     edx, [ebp+var_4]
.text:000014FC                 mov     eax, [edx+4Ch]
.text:000014FF                 push    eax
.text:00001500                 call    _sshfwd_unthrottle
.text:00001505                 add     esp, 8
.text:00001508                 add     esp, 4
.text:0000150B                 cmp     ebp, esp
.text:0000150D                 call    __RTC_CheckEsp
.text:00001512                 mov     esp, ebp
.text:00001514                 pop     ebp
.text:00001515                 retn
.text:00001515 _x11_sent       endp
.text:00001515
.text:00001515 ; ---------------------------------------------------------------------------
.text:00001516                 db 0Eh dup(0CCh)
.text:00001524
.text:00001524 ; =============== S U B R O U T I N E =======================================
.text:00001524
.text:00001524 ; Attributes: bp-based frame
.text:00001524
.text:00001524 ; int __cdecl x11_get_screen_number(char *Str)
.text:00001524                 public _x11_get_screen_number
.text:00001524 _x11_get_screen_number proc near
.text:00001524
.text:00001524 var_4           = dword ptr -4
.text:00001524 Str             = dword ptr  8
.text:00001524
.text:00001524                 push    ebp
.text:00001525                 mov     ebp, esp
.text:00001527                 push    ecx
.text:00001528                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000152F                 push    offset $SG87527
.text:00001534                 mov     eax, [ebp+Str]
.text:00001537                 push    eax
.text:00001538                 call    _host_strcspn
.text:0000153D                 add     esp, 8
.text:00001540                 mov     [ebp+var_4], eax
.text:00001543                 mov     ecx, [ebp+Str]
.text:00001546                 add     ecx, [ebp+var_4]
.text:00001549                 movsx   edx, byte ptr [ecx]
.text:0000154C                 test    edx, edx
.text:0000154E                 jnz     short loc_1554
.text:00001550                 xor     eax, eax
.text:00001552                 jmp     short loc_158C
.text:00001554 ; ---------------------------------------------------------------------------
.text:00001554
.text:00001554 loc_1554:                               ; CODE XREF: _x11_get_screen_number+2Aj
.text:00001554                 push    offset $SG87529 ; Control
.text:00001559                 mov     eax, [ebp+Str]
.text:0000155C                 push    eax             ; Str
.text:0000155D                 call    _strcspn
.text:00001562                 add     esp, 8
.text:00001565                 mov     [ebp+var_4], eax
.text:00001568                 mov     ecx, [ebp+Str]
.text:0000156B                 add     ecx, [ebp+var_4]
.text:0000156E                 movsx   edx, byte ptr [ecx]
.text:00001571                 test    edx, edx
.text:00001573                 jnz     short loc_1579
.text:00001575                 xor     eax, eax
.text:00001577                 jmp     short loc_158C
.text:00001579 ; ---------------------------------------------------------------------------
.text:00001579
.text:00001579 loc_1579:                               ; CODE XREF: _x11_get_screen_number+4Fj
.text:00001579                 mov     eax, [ebp+var_4]
.text:0000157C                 mov     ecx, [ebp+Str]
.text:0000157F                 lea     edx, [ecx+eax+1]
.text:00001583                 push    edx             ; Str
.text:00001584                 call    _atoi
.text:00001589                 add     esp, 4
.text:0000158C
.text:0000158C loc_158C:                               ; CODE XREF: _x11_get_screen_number+2Ej
.text:0000158C                                         ; _x11_get_screen_number+53j
.text:0000158C                 add     esp, 4
.text:0000158F                 cmp     ebp, esp
.text:00001591                 call    __RTC_CheckEsp
.text:00001596                 mov     esp, ebp
.text:00001598                 pop     ebp
.text:00001599                 retn
.text:00001599 _x11_get_screen_number endp
.text:00001599
.text:00001599 ; ---------------------------------------------------------------------------
.text:0000159A                 db 0Ah dup(0CCh)
.text:000015A4
.text:000015A4 ; =============== S U B R O U T I N E =======================================
.text:000015A4
.text:000015A4 ; Attributes: bp-based frame
.text:000015A4
.text:000015A4                 public _x11_init
.text:000015A4 _x11_init       proc near
.text:000015A4
.text:000015A4 var_8           = dword ptr -8
.text:000015A4 var_4           = dword ptr -4
.text:000015A4 arg_0           = dword ptr  8
.text:000015A4 arg_4           = dword ptr  0Ch
.text:000015A4 arg_8           = dword ptr  10h
.text:000015A4 arg_C           = dword ptr  14h
.text:000015A4
.text:000015A4                 push    ebp
.text:000015A5                 mov     ebp, esp
.text:000015A7                 sub     esp, 8
.text:000015AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000015B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015B8                 push    54h ; 'T'
.text:000015BA                 push    1
.text:000015BC                 call    _safemalloc
.text:000015C1                 add     esp, 8
.text:000015C4                 mov     [ebp+var_4], eax
.text:000015C7                 mov     eax, [ebp+var_4]
.text:000015CA                 mov     dword ptr [eax], offset ?fn_table@?1??x11_init@@9@9 ; `x11_init'::`2'::fn_table
.text:000015D0                 mov     ecx, [ebp+var_4]
.text:000015D3                 mov     dword ptr [ecx+18h], 0
.text:000015DA                 mov     edx, [ebp+var_4]
.text:000015DD                 mov     eax, [ebp+arg_0]
.text:000015E0                 mov     [edx+10h], eax
.text:000015E3                 mov     ecx, [ebp+var_4]
.text:000015E6                 mov     dword ptr [ecx+34h], 0
.text:000015ED                 mov     edx, [ebp+var_4]
.text:000015F0                 mov     dword ptr [edx+20h], 0
.text:000015F7                 mov     eax, [ebp+var_4]
.text:000015FA                 mov     dword ptr [eax+3Ch], 0
.text:00001601                 mov     ecx, [ebp+var_4]
.text:00001604                 mov     dword ptr [ecx+38h], 0
.text:0000160B                 mov     edx, [ebp+var_4]
.text:0000160E                 mov     dword ptr [edx+40h], 1
.text:00001615                 mov     eax, [ebp+var_4]
.text:00001618                 mov     ecx, [ebp+arg_4]
.text:0000161B                 mov     [eax+4Ch], ecx
.text:0000161E                 mov     edx, [ebp+var_4]
.text:00001621                 mov     dword ptr [edx+14h], 0
.text:00001628                 mov     eax, [ebp+var_4]
.text:0000162B                 mov     dword ptr [eax+50h], 0
.text:00001632                 cmp     [ebp+arg_8], 0
.text:00001636                 jz      short loc_1649
.text:00001638                 mov     ecx, [ebp+arg_8]
.text:0000163B                 push    ecx
.text:0000163C                 call    _dupstr
.text:00001641                 add     esp, 4
.text:00001644                 mov     [ebp+var_8], eax
.text:00001647                 jmp     short loc_1650
.text:00001649 ; ---------------------------------------------------------------------------
.text:00001649
.text:00001649 loc_1649:                               ; CODE XREF: _x11_init+92j
.text:00001649                 mov     [ebp+var_8], 0
.text:00001650
.text:00001650 loc_1650:                               ; CODE XREF: _x11_init+A3j
.text:00001650                 mov     edx, [ebp+var_4]
.text:00001653                 mov     eax, [ebp+var_8]
.text:00001656                 mov     [edx+44h], eax
.text:00001659                 mov     ecx, [ebp+var_4]
.text:0000165C                 mov     edx, [ebp+arg_C]
.text:0000165F                 mov     [ecx+48h], edx
.text:00001662                 mov     eax, [ebp+var_4]
.text:00001665                 add     esp, 8
.text:00001668                 cmp     ebp, esp
.text:0000166A                 call    __RTC_CheckEsp
.text:0000166F                 mov     esp, ebp
.text:00001671                 pop     ebp
.text:00001672                 retn
.text:00001672 _x11_init       endp
.text:00001672
.text:00001672 ; ---------------------------------------------------------------------------
.text:00001673                 align 4
.text:00001674
.text:00001674 ; =============== S U B R O U T I N E =======================================
.text:00001674
.text:00001674 ; Attributes: bp-based frame
.text:00001674
.text:00001674                 public _x11_close
.text:00001674 _x11_close      proc near
.text:00001674
.text:00001674 arg_0           = dword ptr  8
.text:00001674
.text:00001674                 push    ebp
.text:00001675                 mov     ebp, esp
.text:00001677                 push    esi
.text:00001678                 cmp     [ebp+arg_0], 0
.text:0000167C                 jnz     short loc_1680
.text:0000167E                 jmp     short loc_16EB
.text:00001680 ; ---------------------------------------------------------------------------
.text:00001680
.text:00001680 loc_1680:                               ; CODE XREF: _x11_close+8j
.text:00001680                 mov     eax, [ebp+arg_0]
.text:00001683                 cmp     dword ptr [eax+18h], 0
.text:00001687                 jz      short loc_16A7
.text:00001689                 mov     ecx, [ebp+arg_0]
.text:0000168C                 mov     edx, [ecx+18h]
.text:0000168F                 push    edx
.text:00001690                 call    _safefree
.text:00001695                 add     esp, 4
.text:00001698                 mov     eax, [ebp+arg_0]
.text:0000169B                 mov     ecx, [eax+1Ch]
.text:0000169E                 push    ecx
.text:0000169F                 call    _safefree
.text:000016A4                 add     esp, 4
.text:000016A7
.text:000016A7 loc_16A7:                               ; CODE XREF: _x11_close+13j
.text:000016A7                 mov     edx, [ebp+arg_0]
.text:000016AA                 cmp     dword ptr [edx+50h], 0
.text:000016AE                 jz      short loc_16D0
.text:000016B0                 mov     esi, esp
.text:000016B2                 mov     eax, [ebp+arg_0]
.text:000016B5                 mov     ecx, [eax+50h]
.text:000016B8                 push    ecx
.text:000016B9                 mov     edx, [ebp+arg_0]
.text:000016BC                 mov     eax, [edx+50h]
.text:000016BF                 mov     ecx, [eax]
.text:000016C1                 mov     edx, [ecx+4]
.text:000016C4                 call    edx
.text:000016C6                 add     esp, 4
.text:000016C9                 cmp     esi, esp
.text:000016CB                 call    __RTC_CheckEsp
.text:000016D0
.text:000016D0 loc_16D0:                               ; CODE XREF: _x11_close+3Aj
.text:000016D0                 mov     eax, [ebp+arg_0]
.text:000016D3                 mov     ecx, [eax+44h]
.text:000016D6                 push    ecx
.text:000016D7                 call    _safefree
.text:000016DC                 add     esp, 4
.text:000016DF                 mov     edx, [ebp+arg_0]
.text:000016E2                 push    edx
.text:000016E3                 call    _safefree
.text:000016E8                 add     esp, 4
.text:000016EB
.text:000016EB loc_16EB:                               ; CODE XREF: _x11_close+Aj
.text:000016EB                 pop     esi
.text:000016EC                 cmp     ebp, esp
.text:000016EE                 call    __RTC_CheckEsp
.text:000016F3                 pop     ebp
.text:000016F4                 retn
.text:000016F4 _x11_close      endp
.text:000016F4
.text:000016F4 ; ---------------------------------------------------------------------------
.text:000016F5                 db 0Fh dup(0CCh)
.text:00001704
.text:00001704 ; =============== S U B R O U T I N E =======================================
.text:00001704
.text:00001704 ; Attributes: bp-based frame
.text:00001704
.text:00001704                 public _x11_unthrottle
.text:00001704 _x11_unthrottle proc near
.text:00001704
.text:00001704 var_4           = dword ptr -4
.text:00001704 arg_0           = dword ptr  8
.text:00001704
.text:00001704                 push    ebp
.text:00001705                 mov     ebp, esp
.text:00001707                 push    ecx
.text:00001708                 push    esi
.text:00001709                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001710                 cmp     [ebp+arg_0], 0
.text:00001714                 jnz     short loc_1718
.text:00001716                 jmp     short loc_1771
.text:00001718 ; ---------------------------------------------------------------------------
.text:00001718
.text:00001718 loc_1718:                               ; CODE XREF: _x11_unthrottle+10j
.text:00001718                 mov     eax, [ebp+arg_0]
.text:0000171B                 mov     dword ptr [eax+38h], 0
.text:00001722                 mov     ecx, [ebp+arg_0]
.text:00001725                 cmp     dword ptr [ecx+50h], 0
.text:00001729                 jz      short loc_1771
.text:0000172B                 mov     edx, [ebp+arg_0]
.text:0000172E                 cmp     dword ptr [edx+38h], 0
.text:00001732                 jnz     short loc_1746
.text:00001734                 mov     eax, [ebp+arg_0]
.text:00001737                 cmp     dword ptr [eax+3Ch], 0
.text:0000173B                 jnz     short loc_1746
.text:0000173D                 mov     [ebp+var_4], 0
.text:00001744                 jmp     short loc_174D
.text:00001746 ; ---------------------------------------------------------------------------
.text:00001746
.text:00001746 loc_1746:                               ; CODE XREF: _x11_unthrottle+2Ej
.text:00001746                                         ; _x11_unthrottle+37j
.text:00001746                 mov     [ebp+var_4], 1
.text:0000174D
.text:0000174D loc_174D:                               ; CODE XREF: _x11_unthrottle+40j
.text:0000174D                 mov     esi, esp
.text:0000174F                 mov     ecx, [ebp+var_4]
.text:00001752                 push    ecx
.text:00001753                 mov     edx, [ebp+arg_0]
.text:00001756                 mov     eax, [edx+50h]
.text:00001759                 push    eax
.text:0000175A                 mov     ecx, [ebp+arg_0]
.text:0000175D                 mov     edx, [ecx+50h]
.text:00001760                 mov     eax, [edx]
.text:00001762                 mov     ecx, [eax+18h]
.text:00001765                 call    ecx
.text:00001767                 add     esp, 8
.text:0000176A                 cmp     esi, esp
.text:0000176C                 call    __RTC_CheckEsp
.text:00001771
.text:00001771 loc_1771:                               ; CODE XREF: _x11_unthrottle+12j
.text:00001771                                         ; _x11_unthrottle+25j
.text:00001771                 pop     esi
.text:00001772                 add     esp, 4
.text:00001775                 cmp     ebp, esp
.text:00001777                 call    __RTC_CheckEsp
.text:0000177C                 mov     esp, ebp
.text:0000177E                 pop     ebp
.text:0000177F                 retn
.text:0000177F _x11_unthrottle endp
.text:0000177F
.text:0000177F ; ---------------------------------------------------------------------------
.text:00001780                 db 4 dup(0CCh)
.text:00001784
.text:00001784 ; =============== S U B R O U T I N E =======================================
.text:00001784
.text:00001784 ; Attributes: bp-based frame
.text:00001784
.text:00001784                 public _x11_override_throttle
.text:00001784 _x11_override_throttle proc near
.text:00001784
.text:00001784 var_4           = dword ptr -4
.text:00001784 arg_0           = dword ptr  8
.text:00001784 arg_4           = dword ptr  0Ch
.text:00001784
.text:00001784                 push    ebp
.text:00001785                 mov     ebp, esp
.text:00001787                 push    ecx
.text:00001788                 push    esi
.text:00001789                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001790                 cmp     [ebp+arg_0], 0
.text:00001794                 jnz     short loc_1798
.text:00001796                 jmp     short loc_17F0
.text:00001798 ; ---------------------------------------------------------------------------
.text:00001798
.text:00001798 loc_1798:                               ; CODE XREF: _x11_override_throttle+10j
.text:00001798                 mov     eax, [ebp+arg_0]
.text:0000179B                 mov     ecx, [ebp+arg_4]
.text:0000179E                 mov     [eax+3Ch], ecx
.text:000017A1                 mov     edx, [ebp+arg_0]
.text:000017A4                 cmp     dword ptr [edx+50h], 0
.text:000017A8                 jz      short loc_17F0
.text:000017AA                 mov     eax, [ebp+arg_0]
.text:000017AD                 cmp     dword ptr [eax+38h], 0
.text:000017B1                 jnz     short loc_17C5
.text:000017B3                 mov     ecx, [ebp+arg_0]
.text:000017B6                 cmp     dword ptr [ecx+3Ch], 0
.text:000017BA                 jnz     short loc_17C5
.text:000017BC                 mov     [ebp+var_4], 0
.text:000017C3                 jmp     short loc_17CC
.text:000017C5 ; ---------------------------------------------------------------------------
.text:000017C5
.text:000017C5 loc_17C5:                               ; CODE XREF: _x11_override_throttle+2Dj
.text:000017C5                                         ; _x11_override_throttle+36j
.text:000017C5                 mov     [ebp+var_4], 1
.text:000017CC
.text:000017CC loc_17CC:                               ; CODE XREF: _x11_override_throttle+3Fj
.text:000017CC                 mov     esi, esp
.text:000017CE                 mov     edx, [ebp+var_4]
.text:000017D1                 push    edx
.text:000017D2                 mov     eax, [ebp+arg_0]
.text:000017D5                 mov     ecx, [eax+50h]
.text:000017D8                 push    ecx
.text:000017D9                 mov     edx, [ebp+arg_0]
.text:000017DC                 mov     eax, [edx+50h]
.text:000017DF                 mov     ecx, [eax]
.text:000017E1                 mov     edx, [ecx+18h]
.text:000017E4                 call    edx
.text:000017E6                 add     esp, 8
.text:000017E9                 cmp     esi, esp
.text:000017EB                 call    __RTC_CheckEsp
.text:000017F0
.text:000017F0 loc_17F0:                               ; CODE XREF: _x11_override_throttle+12j
.text:000017F0                                         ; _x11_override_throttle+24j
.text:000017F0                 pop     esi
.text:000017F1                 add     esp, 4
.text:000017F4                 cmp     ebp, esp
.text:000017F6                 call    __RTC_CheckEsp
.text:000017FB                 mov     esp, ebp
.text:000017FD                 pop     ebp
.text:000017FE                 retn
.text:000017FE _x11_override_throttle endp
.text:000017FE
.text:000017FE ; ---------------------------------------------------------------------------
.text:000017FF                 db 5 dup(0CCh)
.text:00001804
.text:00001804 ; =============== S U B R O U T I N E =======================================
.text:00001804
.text:00001804 ; Attributes: bp-based frame
.text:00001804
.text:00001804 _x11_send_init_error proc near          ; CODE XREF: _x11_closing+45p
.text:00001804                                         ; _x11_send+387p ...
.text:00001804
.text:00001804 var_1C          = dword ptr -1Ch
.text:00001804 var_18          = dword ptr -18h
.text:00001804 var_14          = dword ptr -14h
.text:00001804 var_10          = dword ptr -10h
.text:00001804 Size            = dword ptr -0Ch
.text:00001804 var_8           = dword ptr -8
.text:00001804 Str             = dword ptr -4
.text:00001804 arg_0           = dword ptr  8
.text:00001804 arg_4           = dword ptr  0Ch
.text:00001804
.text:00001804                 push    ebp
.text:00001805                 mov     ebp, esp
.text:00001807                 sub     esp, 1Ch
.text:0000180A                 mov     eax, 0CCCCCCCCh
.text:0000180F                 mov     [ebp+var_1C], eax
.text:00001812                 mov     [ebp+var_18], eax
.text:00001815                 mov     [ebp+var_14], eax
.text:00001818                 mov     [ebp+var_10], eax
.text:0000181B                 mov     [ebp+Size], eax
.text:0000181E                 mov     [ebp+var_8], eax
.text:00001821                 mov     [ebp+Str], eax
.text:00001824                 mov     eax, [ebp+arg_4]
.text:00001827                 push    eax
.text:00001828                 mov     ecx, dword ptr ds:_appname
.text:0000182E                 push    ecx
.text:0000182F                 push    offset $SG87577 ; "%s X11 proxy: %s\n"
.text:00001834                 call    _dupprintf
.text:00001839                 add     esp, 0Ch
.text:0000183C                 mov     [ebp+Str], eax
.text:0000183F                 mov     edx, [ebp+Str]
.text:00001842                 push    edx             ; Str
.text:00001843                 call    _strlen
.text:00001848                 add     esp, 4
.text:0000184B                 mov     [ebp+var_8], eax
.text:0000184E                 push    1
.text:00001850                 mov     eax, [ebp+var_8]
.text:00001853                 add     eax, 0Dh
.text:00001856                 push    eax
.text:00001857                 call    _safemalloc
.text:0000185C                 add     esp, 8
.text:0000185F                 mov     [ebp+var_10], eax
.text:00001862                 mov     ecx, [ebp+var_8]
.text:00001865                 add     ecx, 3
.text:00001868                 and     ecx, 0FFFFFFFCh
.text:0000186B                 mov     [ebp+Size], ecx
.text:0000186E                 mov     edx, [ebp+var_10]
.text:00001871                 mov     byte ptr [edx], 0
.text:00001874                 mov     eax, [ebp+var_10]
.text:00001877                 mov     cl, byte ptr [ebp+var_8]
.text:0000187A                 mov     [eax+1], cl
.text:0000187D                 push    4               ; Size
.text:0000187F                 mov     edx, [ebp+arg_0]
.text:00001882                 add     edx, 6
.text:00001885                 push    edx             ; Src
.text:00001886                 mov     eax, [ebp+var_10]
.text:00001889                 add     eax, 2
.text:0000188C                 push    eax             ; Dst
.text:0000188D                 call    _memcpy
.text:00001892                 add     esp, 0Ch
.text:00001895                 mov     ecx, [ebp+arg_0]
.text:00001898                 movzx   edx, byte ptr [ecx+4]
.text:0000189C                 cmp     edx, 42h ; 'B'
.text:0000189F                 jnz     short loc_18CB
.text:000018A1                 mov     eax, [ebp+Size]
.text:000018A4                 sar     eax, 2
.text:000018A7                 sar     eax, 8
.text:000018AA                 mov     ecx, [ebp+var_10]
.text:000018AD                 mov     [ecx+6], al
.text:000018B0                 mov     edx, [ebp+Size]
.text:000018B3                 sar     edx, 2
.text:000018B6                 mov     [ebp+var_14], edx
.text:000018B9                 mov     eax, [ebp+var_10]
.text:000018BC                 mov     cl, byte ptr [ebp+var_14]
.text:000018BF                 mov     [eax+7], cl
.text:000018C2                 movzx   edx, byte ptr [ebp+var_14]
.text:000018C6                 mov     [ebp+var_18], edx
.text:000018C9                 jmp     short loc_18F3
.text:000018CB ; ---------------------------------------------------------------------------
.text:000018CB
.text:000018CB loc_18CB:                               ; CODE XREF: _x11_send_init_error+9Bj
.text:000018CB                 mov     eax, [ebp+Size]
.text:000018CE                 sar     eax, 2
.text:000018D1                 mov     ecx, [ebp+var_10]
.text:000018D4                 mov     [ecx+6], al
.text:000018D7                 mov     edx, [ebp+Size]
.text:000018DA                 sar     edx, 2
.text:000018DD                 sar     edx, 8
.text:000018E0                 mov     [ebp+var_1C], edx
.text:000018E3                 mov     eax, [ebp+var_10]
.text:000018E6                 mov     cl, byte ptr [ebp+var_1C]
.text:000018E9                 mov     [eax+7], cl
.text:000018EC                 movzx   edx, byte ptr [ebp+var_1C]
.text:000018F0                 mov     [ebp+var_18], edx
.text:000018F3
.text:000018F3 loc_18F3:                               ; CODE XREF: _x11_send_init_error+C5j
.text:000018F3                 mov     eax, [ebp+Size]
.text:000018F6                 push    eax             ; Size
.text:000018F7                 push    0               ; Val
.text:000018F9                 mov     ecx, [ebp+var_10]
.text:000018FC                 add     ecx, 8
.text:000018FF                 push    ecx             ; Dst
.text:00001900                 call    _memset
.text:00001905                 add     esp, 0Ch
.text:00001908                 mov     edx, [ebp+var_8]
.text:0000190B                 push    edx             ; Size
.text:0000190C                 mov     eax, [ebp+Str]
.text:0000190F                 push    eax             ; Src
.text:00001910                 mov     ecx, [ebp+var_10]
.text:00001913                 add     ecx, 8
.text:00001916                 push    ecx             ; Dst
.text:00001917                 call    _memcpy
.text:0000191C                 add     esp, 0Ch
.text:0000191F                 mov     edx, [ebp+Size]
.text:00001922                 add     edx, 8
.text:00001925                 push    edx
.text:00001926                 mov     eax, [ebp+var_10]
.text:00001929                 push    eax
.text:0000192A                 mov     ecx, [ebp+arg_0]
.text:0000192D                 mov     edx, [ecx+4Ch]
.text:00001930                 push    edx
.text:00001931                 call    _sshfwd_write
.text:00001936                 add     esp, 0Ch
.text:00001939                 mov     eax, [ebp+arg_0]
.text:0000193C                 mov     ecx, [eax+4Ch]
.text:0000193F                 push    ecx
.text:00001940                 call    _sshfwd_write_eof
.text:00001945                 add     esp, 4
.text:00001948                 mov     edx, [ebp+arg_0]
.text:0000194B                 mov     dword ptr [edx+40h], 0
.text:00001952                 mov     eax, [ebp+var_10]
.text:00001955                 push    eax
.text:00001956                 call    _safefree
.text:0000195B                 add     esp, 4
.text:0000195E                 mov     ecx, [ebp+Str]
.text:00001961                 push    ecx
.text:00001962                 call    _safefree
.text:00001967                 add     esp, 4
.text:0000196A                 add     esp, 1Ch
.text:0000196D                 cmp     ebp, esp
.text:0000196F                 call    __RTC_CheckEsp
.text:00001974                 mov     esp, ebp
.text:00001976                 pop     ebp
.text:00001977                 retn
.text:00001977 _x11_send_init_error endp
.text:00001977
.text:00001977 ; ---------------------------------------------------------------------------
.text:00001978                 db 0Ch dup(0CCh)
.text:00001984
.text:00001984 ; =============== S U B R O U T I N E =======================================
.text:00001984
.text:00001984 ; Attributes: bp-based frame
.text:00001984
.text:00001984                 public _x11_send
.text:00001984 _x11_send       proc near
.text:00001984
.text:00001984 var_88          = dword ptr -88h
.text:00001984 var_84          = dword ptr -84h
.text:00001984 var_80          = dword ptr -80h
.text:00001984 var_7C          = dword ptr -7Ch
.text:00001984 var_75          = byte ptr -75h
.text:00001984 var_74          = dword ptr -74h
.text:00001984 var_70          = dword ptr -70h
.text:00001984 Dest            = byte ptr -68h
.text:00001984 var_44          = dword ptr -44h
.text:00001984 var_40          = dword ptr -40h
.text:00001984 var_38          = dword ptr -38h
.text:00001984 var_30          = dword ptr -30h
.text:00001984 var_2C          = dword ptr -2Ch
.text:00001984 var_28          = dword ptr -28h
.text:00001984 var_24          = dword ptr -24h
.text:00001984 var_1C          = dword ptr -1Ch
.text:00001984 var_10          = dword ptr -10h
.text:00001984 var_8           = dword ptr -8
.text:00001984 var_4           = dword ptr -4
.text:00001984 arg_0           = dword ptr  8
.text:00001984 arg_4           = dword ptr  0Ch
.text:00001984 arg_8           = dword ptr  10h
.text:00001984
.text:00001984                 push    ebp
.text:00001985                 mov     ebp, esp
.text:00001987                 sub     esp, 88h
.text:0000198D                 push    esi
.text:0000198E                 push    edi
.text:0000198F                 lea     edi, [ebp+var_88]
.text:00001995                 mov     ecx, 22h ; '"'
.text:0000199A                 mov     eax, 0CCCCCCCCh
.text:0000199F                 rep stosd
.text:000019A1                 mov     eax, dword ptr ds:___security_cookie
.text:000019A6                 xor     eax, ebp
.text:000019A8                 mov     [ebp+var_4], eax
.text:000019AB                 cmp     [ebp+arg_0], 0
.text:000019AF                 jnz     short loc_19B8
.text:000019B1                 xor     eax, eax
.text:000019B3                 jmp     loc_1F97
.text:000019B8 ; ---------------------------------------------------------------------------
.text:000019B8
.text:000019B8 loc_19B8:                               ; CODE XREF: _x11_send+2Bj
.text:000019B8                                         ; _x11_send+76j
.text:000019B8                 cmp     [ebp+arg_8], 0
.text:000019BC                 jle     short loc_19FC
.text:000019BE                 mov     eax, [ebp+arg_0]
.text:000019C1                 cmp     dword ptr [eax+20h], 0Ch
.text:000019C5                 jge     short loc_19FC
.text:000019C7                 mov     ecx, [ebp+arg_8]
.text:000019CA                 sub     ecx, 1
.text:000019CD                 mov     [ebp+arg_8], ecx
.text:000019D0                 mov     edx, [ebp+arg_0]
.text:000019D3                 mov     eax, [edx+20h]
.text:000019D6                 mov     ecx, [ebp+arg_0]
.text:000019D9                 mov     edx, [ebp+arg_4]
.text:000019DC                 mov     dl, [edx]
.text:000019DE                 mov     [ecx+eax+4], dl
.text:000019E2                 mov     eax, [ebp+arg_0]
.text:000019E5                 mov     ecx, [eax+20h]
.text:000019E8                 add     ecx, 1
.text:000019EB                 mov     edx, [ebp+arg_0]
.text:000019EE                 mov     [edx+20h], ecx
.text:000019F1                 mov     eax, [ebp+arg_4]
.text:000019F4                 add     eax, 1
.text:000019F7                 mov     [ebp+arg_4], eax
.text:000019FA                 jmp     short loc_19B8
.text:000019FC ; ---------------------------------------------------------------------------
.text:000019FC
.text:000019FC loc_19FC:                               ; CODE XREF: _x11_send+38j
.text:000019FC                                         ; _x11_send+41j
.text:000019FC                 mov     ecx, [ebp+arg_0]
.text:000019FF                 cmp     dword ptr [ecx+20h], 0Ch
.text:00001A03                 jge     short loc_1A0C
.text:00001A05                 xor     eax, eax
.text:00001A07                 jmp     loc_1F97
.text:00001A0C ; ---------------------------------------------------------------------------
.text:00001A0C
.text:00001A0C loc_1A0C:                               ; CODE XREF: _x11_send+7Fj
.text:00001A0C                 mov     edx, [ebp+arg_0]
.text:00001A0F                 cmp     dword ptr [edx+18h], 0
.text:00001A13                 jnz     loc_1AF4
.text:00001A19                 mov     eax, [ebp+arg_0]
.text:00001A1C                 movzx   ecx, byte ptr [eax+4]
.text:00001A20                 cmp     ecx, 42h ; 'B'
.text:00001A23                 jnz     short loc_1A3D
.text:00001A25                 mov     edx, [ebp+arg_0]
.text:00001A28                 movzx   eax, byte ptr [edx+0Ah]
.text:00001A2C                 shl     eax, 8
.text:00001A2F                 mov     ecx, [ebp+arg_0]
.text:00001A32                 movzx   edx, byte ptr [ecx+0Bh]
.text:00001A36                 or      eax, edx
.text:00001A38                 mov     [ebp+var_7C], eax
.text:00001A3B                 jmp     short loc_1A53
.text:00001A3D ; ---------------------------------------------------------------------------
.text:00001A3D
.text:00001A3D loc_1A3D:                               ; CODE XREF: _x11_send+9Fj
.text:00001A3D                 mov     eax, [ebp+arg_0]
.text:00001A40                 movzx   ecx, byte ptr [eax+0Ah]
.text:00001A44                 mov     edx, [ebp+arg_0]
.text:00001A47                 movzx   eax, byte ptr [edx+0Bh]
.text:00001A4B                 shl     eax, 8
.text:00001A4E                 or      ecx, eax
.text:00001A50                 mov     [ebp+var_7C], ecx
.text:00001A53
.text:00001A53 loc_1A53:                               ; CODE XREF: _x11_send+B7j
.text:00001A53                 mov     ecx, [ebp+arg_0]
.text:00001A56                 mov     edx, [ebp+var_7C]
.text:00001A59                 mov     [ecx+24h], edx
.text:00001A5C                 mov     eax, [ebp+arg_0]
.text:00001A5F                 movzx   ecx, byte ptr [eax+4]
.text:00001A63                 cmp     ecx, 42h ; 'B'
.text:00001A66                 jnz     short loc_1A80
.text:00001A68                 mov     edx, [ebp+arg_0]
.text:00001A6B                 movzx   eax, byte ptr [edx+0Ch]
.text:00001A6F                 shl     eax, 8
.text:00001A72                 mov     ecx, [ebp+arg_0]
.text:00001A75                 movzx   edx, byte ptr [ecx+0Dh]
.text:00001A79                 or      eax, edx
.text:00001A7B                 mov     [ebp+var_80], eax
.text:00001A7E                 jmp     short loc_1A96
.text:00001A80 ; ---------------------------------------------------------------------------
.text:00001A80
.text:00001A80 loc_1A80:                               ; CODE XREF: _x11_send+E2j
.text:00001A80                 mov     eax, [ebp+arg_0]
.text:00001A83                 movzx   ecx, byte ptr [eax+0Ch]
.text:00001A87                 mov     edx, [ebp+arg_0]
.text:00001A8A                 movzx   eax, byte ptr [edx+0Dh]
.text:00001A8E                 shl     eax, 8
.text:00001A91                 or      ecx, eax
.text:00001A93                 mov     [ebp+var_80], ecx
.text:00001A96
.text:00001A96 loc_1A96:                               ; CODE XREF: _x11_send+FAj
.text:00001A96                 mov     ecx, [ebp+arg_0]
.text:00001A99                 mov     edx, [ebp+var_80]
.text:00001A9C                 mov     [ecx+2Ch], edx
.text:00001A9F                 mov     eax, [ebp+arg_0]
.text:00001AA2                 mov     ecx, [eax+24h]
.text:00001AA5                 add     ecx, 3
.text:00001AA8                 and     ecx, 0FFFFFFFCh
.text:00001AAB                 mov     edx, [ebp+arg_0]
.text:00001AAE                 mov     [edx+28h], ecx
.text:00001AB1                 mov     eax, [ebp+arg_0]
.text:00001AB4                 mov     ecx, [eax+2Ch]
.text:00001AB7                 add     ecx, 3
.text:00001ABA                 and     ecx, 0FFFFFFFCh
.text:00001ABD                 mov     edx, [ebp+arg_0]
.text:00001AC0                 mov     [edx+30h], ecx
.text:00001AC3                 push    1
.text:00001AC5                 mov     eax, [ebp+arg_0]
.text:00001AC8                 mov     ecx, [eax+28h]
.text:00001ACB                 add     ecx, 1
.text:00001ACE                 push    ecx
.text:00001ACF                 call    _safemalloc
.text:00001AD4                 add     esp, 8
.text:00001AD7                 mov     edx, [ebp+arg_0]
.text:00001ADA                 mov     [edx+18h], eax
.text:00001ADD                 push    1
.text:00001ADF                 mov     eax, [ebp+arg_0]
.text:00001AE2                 mov     ecx, [eax+30h]
.text:00001AE5                 push    ecx
.text:00001AE6                 call    _safemalloc
.text:00001AEB                 add     esp, 8
.text:00001AEE                 mov     edx, [ebp+arg_0]
.text:00001AF1                 mov     [edx+1Ch], eax
.text:00001AF4
.text:00001AF4 loc_1AF4:                               ; CODE XREF: _x11_send+8Fj
.text:00001AF4                                         ; _x11_send+1BDj
.text:00001AF4                 cmp     [ebp+arg_8], 0
.text:00001AF8                 jle     short loc_1B43
.text:00001AFA                 mov     eax, [ebp+arg_0]
.text:00001AFD                 mov     ecx, [eax+28h]
.text:00001B00                 add     ecx, 0Ch
.text:00001B03                 mov     edx, [ebp+arg_0]
.text:00001B06                 cmp     [edx+20h], ecx
.text:00001B09                 jge     short loc_1B43
.text:00001B0B                 mov     eax, [ebp+arg_8]
.text:00001B0E                 sub     eax, 1
.text:00001B11                 mov     [ebp+arg_8], eax
.text:00001B14                 mov     ecx, [ebp+arg_0]
.text:00001B17                 mov     edx, [ecx+20h]
.text:00001B1A                 mov     eax, [ebp+arg_0]
.text:00001B1D                 mov     ecx, [eax+18h]
.text:00001B20                 mov     eax, [ebp+arg_4]
.text:00001B23                 mov     al, [eax]
.text:00001B25                 mov     [edx+ecx-0Ch], al
.text:00001B29                 mov     ecx, [ebp+arg_0]
.text:00001B2C                 mov     edx, [ecx+20h]
.text:00001B2F                 add     edx, 1
.text:00001B32                 mov     eax, [ebp+arg_0]
.text:00001B35                 mov     [eax+20h], edx
.text:00001B38                 mov     ecx, [ebp+arg_4]
.text:00001B3B                 add     ecx, 1
.text:00001B3E                 mov     [ebp+arg_4], ecx
.text:00001B41                 jmp     short loc_1AF4
.text:00001B43 ; ---------------------------------------------------------------------------
.text:00001B43
.text:00001B43 loc_1B43:                               ; CODE XREF: _x11_send+174j
.text:00001B43                                         ; _x11_send+185j ...
.text:00001B43                 cmp     [ebp+arg_8], 0
.text:00001B47                 jle     short loc_1BA1
.text:00001B49                 mov     edx, [ebp+arg_0]
.text:00001B4C                 mov     eax, [edx+28h]
.text:00001B4F                 mov     ecx, [ebp+arg_0]
.text:00001B52                 mov     edx, [ecx+30h]
.text:00001B55                 lea     eax, [eax+edx+0Ch]
.text:00001B59                 mov     ecx, [ebp+arg_0]
.text:00001B5C                 cmp     [ecx+20h], eax
.text:00001B5F                 jge     short loc_1BA1
.text:00001B61                 mov     edx, [ebp+arg_8]
.text:00001B64                 sub     edx, 1
.text:00001B67                 mov     [ebp+arg_8], edx
.text:00001B6A                 mov     eax, [ebp+arg_0]
.text:00001B6D                 mov     ecx, [eax+20h]
.text:00001B70                 sub     ecx, 0Ch
.text:00001B73                 mov     edx, [ebp+arg_0]
.text:00001B76                 sub     ecx, [edx+28h]
.text:00001B79                 mov     eax, [ebp+arg_0]
.text:00001B7C                 mov     edx, [eax+1Ch]
.text:00001B7F                 mov     eax, [ebp+arg_4]
.text:00001B82                 mov     al, [eax]
.text:00001B84                 mov     [ecx+edx], al
.text:00001B87                 mov     ecx, [ebp+arg_0]
.text:00001B8A                 mov     edx, [ecx+20h]
.text:00001B8D                 add     edx, 1
.text:00001B90                 mov     eax, [ebp+arg_0]
.text:00001B93                 mov     [eax+20h], edx
.text:00001B96                 mov     ecx, [ebp+arg_4]
.text:00001B99                 add     ecx, 1
.text:00001B9C                 mov     [ebp+arg_4], ecx
.text:00001B9F                 jmp     short loc_1B43
.text:00001BA1 ; ---------------------------------------------------------------------------
.text:00001BA1
.text:00001BA1 loc_1BA1:                               ; CODE XREF: _x11_send+1C3j
.text:00001BA1                                         ; _x11_send+1DBj
.text:00001BA1                 mov     edx, [ebp+arg_0]
.text:00001BA4                 mov     eax, [edx+28h]
.text:00001BA7                 mov     ecx, [ebp+arg_0]
.text:00001BAA                 mov     edx, [ecx+30h]
.text:00001BAD                 lea     eax, [eax+edx+0Ch]
.text:00001BB1                 mov     ecx, [ebp+arg_0]
.text:00001BB4                 cmp     [ecx+20h], eax
.text:00001BB7                 jge     short loc_1BC0
.text:00001BB9                 xor     eax, eax
.text:00001BBB                 jmp     loc_1F97
.text:00001BC0 ; ---------------------------------------------------------------------------
.text:00001BC0
.text:00001BC0 loc_1BC0:                               ; CODE XREF: _x11_send+233j
.text:00001BC0                 mov     edx, [ebp+arg_0]
.text:00001BC3                 cmp     dword ptr [edx+34h], 0
.text:00001BC7                 jnz     loc_1F6F
.text:00001BCD                 mov     [ebp+var_75], 0
.text:00001BD1                 mov     [ebp+var_10], 0
.text:00001BD8                 mov     eax, [ebp+arg_0]
.text:00001BDB                 movzx   ecx, byte ptr [eax+4]
.text:00001BDF                 cmp     ecx, 42h ; 'B'
.text:00001BE2                 jnz     short loc_1BFF
.text:00001BE4                 mov     edx, [ebp+arg_0]
.text:00001BE7                 movzx   eax, byte ptr [edx+6]
.text:00001BEB                 shl     eax, 8
.text:00001BEE                 mov     ecx, [ebp+arg_0]
.text:00001BF1                 movzx   edx, byte ptr [ecx+7]
.text:00001BF5                 or      eax, edx
.text:00001BF7                 mov     [ebp+var_84], eax
.text:00001BFD                 jmp     short loc_1C18
.text:00001BFF ; ---------------------------------------------------------------------------
.text:00001BFF
.text:00001BFF loc_1BFF:                               ; CODE XREF: _x11_send+25Ej
.text:00001BFF                 mov     eax, [ebp+arg_0]
.text:00001C02                 movzx   ecx, byte ptr [eax+6]
.text:00001C06                 mov     edx, [ebp+arg_0]
.text:00001C09                 movzx   eax, byte ptr [edx+7]
.text:00001C0D                 shl     eax, 8
.text:00001C10                 or      ecx, eax
.text:00001C12                 mov     [ebp+var_84], ecx
.text:00001C18
.text:00001C18 loc_1C18:                               ; CODE XREF: _x11_send+279j
.text:00001C18                 mov     ecx, [ebp+var_84]
.text:00001C1E                 mov     [ebp+var_28], ecx
.text:00001C21                 mov     edx, [ebp+arg_0]
.text:00001C24                 movzx   eax, byte ptr [edx+4]
.text:00001C28                 cmp     eax, 42h ; 'B'
.text:00001C2B                 jnz     short loc_1C48
.text:00001C2D                 mov     ecx, [ebp+arg_0]
.text:00001C30                 movzx   edx, byte ptr [ecx+8]
.text:00001C34                 shl     edx, 8
.text:00001C37                 mov     eax, [ebp+arg_0]
.text:00001C3A                 movzx   ecx, byte ptr [eax+9]
.text:00001C3E                 or      edx, ecx
.text:00001C40                 mov     [ebp+var_88], edx
.text:00001C46                 jmp     short loc_1C61
.text:00001C48 ; ---------------------------------------------------------------------------
.text:00001C48
.text:00001C48 loc_1C48:                               ; CODE XREF: _x11_send+2A7j
.text:00001C48                 mov     edx, [ebp+arg_0]
.text:00001C4B                 movzx   eax, byte ptr [edx+8]
.text:00001C4F                 mov     ecx, [ebp+arg_0]
.text:00001C52                 movzx   edx, byte ptr [ecx+9]
.text:00001C56                 shl     edx, 8
.text:00001C59                 or      eax, edx
.text:00001C5B                 mov     [ebp+var_88], eax
.text:00001C61
.text:00001C61 loc_1C61:                               ; CODE XREF: _x11_send+2C2j
.text:00001C61                 mov     eax, [ebp+var_88]
.text:00001C67                 mov     [ebp+var_2C], eax
.text:00001C6A                 mov     ecx, [ebp+arg_0]
.text:00001C6D                 cmp     dword ptr [ecx+50h], 0
.text:00001C71                 jz      short loc_1C8A
.text:00001C73                 push    370h            ; Line
.text:00001C78                 push    offset $SG87668 ; "..\\..\\..\\x11fwd.c"
.text:00001C7D                 push    offset $SG87669 ; "!xconn->s"
.text:00001C82                 call    __wassert
.text:00001C87 ; ---------------------------------------------------------------------------
.text:00001C87                 add     esp, 0Ch
.text:00001C8A
.text:00001C8A loc_1C8A:                               ; CODE XREF: _x11_send+2EDj
.text:00001C8A                 mov     eax, [ebp+arg_0]
.text:00001C8D                 mov     ecx, [eax+18h]
.text:00001C90                 mov     edx, [ebp+arg_0]
.text:00001C93                 mov     eax, [edx+24h]
.text:00001C96                 mov     byte ptr [ecx+eax], 0
.text:00001C9A                 mov     [ebp+var_1C], 0
.text:00001CA1                 lea     ecx, [ebp+var_1C]
.text:00001CA4                 push    ecx             ; int
.text:00001CA5                 mov     edx, [ebp+arg_0]
.text:00001CA8                 mov     eax, [edx+44h]
.text:00001CAB                 push    eax             ; Src
.text:00001CAC                 call    _x11_parse_ip
.text:00001CB1                 add     esp, 8
.text:00001CB4                 test    eax, eax
.text:00001CB6                 jz      short loc_1CC3
.text:00001CB8                 mov     ecx, [ebp+arg_0]
.text:00001CBB                 mov     edx, [ecx+48h]
.text:00001CBE                 mov     [ebp+var_24], edx
.text:00001CC1                 jmp     short loc_1CCA
.text:00001CC3 ; ---------------------------------------------------------------------------
.text:00001CC3
.text:00001CC3 loc_1CC3:                               ; CODE XREF: _x11_send+332j
.text:00001CC3                 mov     [ebp+var_24], 0FFFFFFFFh
.text:00001CCA
.text:00001CCA loc_1CCA:                               ; CODE XREF: _x11_send+33Dj
.text:00001CCA                 lea     eax, [ebp+var_10]
.text:00001CCD                 push    eax             ; int
.text:00001CCE                 mov     ecx, [ebp+arg_0]
.text:00001CD1                 mov     edx, [ecx+2Ch]
.text:00001CD4                 push    edx             ; int
.text:00001CD5                 mov     eax, [ebp+arg_0]
.text:00001CD8                 mov     ecx, [eax+1Ch]
.text:00001CDB                 push    ecx             ; Buf2
.text:00001CDC                 mov     edx, [ebp+arg_0]
.text:00001CDF                 mov     eax, [edx+18h]
.text:00001CE2                 push    eax             ; Str1
.text:00001CE3                 mov     ecx, [ebp+arg_0]
.text:00001CE6                 mov     edx, [ecx+10h]
.text:00001CE9                 push    edx             ; int
.text:00001CEA                 mov     eax, [ebp+var_24]
.text:00001CED                 push    eax             ; int
.text:00001CEE                 mov     ecx, [ebp+var_1C]
.text:00001CF1                 push    ecx             ; int
.text:00001CF2                 call    _x11_verify
.text:00001CF7                 add     esp, 1Ch
.text:00001CFA                 mov     [ebp+var_8], eax
.text:00001CFD                 cmp     [ebp+var_8], 0
.text:00001D01                 jz      short loc_1D1A
.text:00001D03                 mov     edx, [ebp+var_8]
.text:00001D06                 push    edx
.text:00001D07                 mov     eax, [ebp+arg_0]
.text:00001D0A                 push    eax
.text:00001D0B                 call    _x11_send_init_error
.text:00001D10                 add     esp, 8
.text:00001D13                 xor     eax, eax
.text:00001D15                 jmp     loc_1F97
.text:00001D1A ; ---------------------------------------------------------------------------
.text:00001D1A
.text:00001D1A loc_1D1A:                               ; CODE XREF: _x11_send+37Dj
.text:00001D1A                 cmp     [ebp+var_10], 0
.text:00001D1E                 jnz     short loc_1D37
.text:00001D20                 push    381h            ; Line
.text:00001D25                 push    offset $SG87674 ; "..\\..\\..\\x11fwd.c"
.text:00001D2A                 push    offset $SG87675 ; "auth_matched"
.text:00001D2F                 call    __wassert
.text:00001D34 ; ---------------------------------------------------------------------------
.text:00001D34                 add     esp, 0Ch
.text:00001D37
.text:00001D37 loc_1D37:                               ; CODE XREF: _x11_send+39Aj
.text:00001D37                 mov     edx, [ebp+var_10]
.text:00001D3A                 cmp     dword ptr [edx+20h], 0
.text:00001D3E                 jz      short loc_1D8A
.text:00001D40                 mov     eax, [ebp+arg_8]
.text:00001D43                 push    eax
.text:00001D44                 mov     ecx, [ebp+arg_4]
.text:00001D47                 push    ecx
.text:00001D48                 mov     edx, [ebp+var_2C]
.text:00001D4B                 push    edx
.text:00001D4C                 mov     eax, [ebp+var_28]
.text:00001D4F                 push    eax
.text:00001D50                 mov     ecx, [ebp+arg_0]
.text:00001D53                 movzx   edx, byte ptr [ecx+4]
.text:00001D57                 push    edx
.text:00001D58                 mov     eax, [ebp+arg_0]
.text:00001D5B                 mov     ecx, [eax+48h]
.text:00001D5E                 push    ecx
.text:00001D5F                 mov     edx, [ebp+arg_0]
.text:00001D62                 mov     eax, [edx+44h]
.text:00001D65                 push    eax
.text:00001D66                 mov     ecx, [ebp+var_10]
.text:00001D69                 mov     edx, [ecx+24h]
.text:00001D6C                 push    edx
.text:00001D6D                 mov     eax, [ebp+var_10]
.text:00001D70                 mov     ecx, [eax+20h]
.text:00001D73                 push    ecx
.text:00001D74                 mov     edx, [ebp+arg_0]
.text:00001D77                 mov     eax, [edx+4Ch]
.text:00001D7A                 push    eax
.text:00001D7B                 call    _sshfwd_x11_sharing_handover
.text:00001D80                 add     esp, 28h
.text:00001D83                 xor     eax, eax
.text:00001D85                 jmp     loc_1F97
.text:00001D8A ; ---------------------------------------------------------------------------
.text:00001D8A
.text:00001D8A loc_1D8A:                               ; CODE XREF: _x11_send+3BAj
.text:00001D8A                 mov     ecx, [ebp+arg_0]
.text:00001D8D                 mov     edx, [ecx+4Ch]
.text:00001D90                 push    edx
.text:00001D91                 call    _sshfwd_x11_is_local
.text:00001D96                 add     esp, 4
.text:00001D99                 mov     eax, [ebp+arg_0]
.text:00001D9C                 mov     ecx, [ebp+var_10]
.text:00001D9F                 mov     edx, [ecx+1Ch]
.text:00001DA2                 mov     [eax+14h], edx
.text:00001DA5                 mov     eax, [ebp+arg_0]
.text:00001DA8                 mov     ecx, [eax+4Ch]
.text:00001DAB                 push    ecx
.text:00001DAC                 call    _sshfwd_get_conf
.text:00001DB1                 add     esp, 4
.text:00001DB4                 push    eax
.text:00001DB5                 mov     edx, [ebp+arg_0]
.text:00001DB8                 push    edx
.text:00001DB9                 push    0
.text:00001DBB                 push    0
.text:00001DBD                 push    1
.text:00001DBF                 push    0
.text:00001DC1                 mov     eax, [ebp+arg_0]
.text:00001DC4                 mov     ecx, [eax+14h]
.text:00001DC7                 mov     edx, [ecx+18h]
.text:00001DCA                 push    edx
.text:00001DCB                 mov     eax, [ebp+arg_0]
.text:00001DCE                 mov     ecx, [eax+14h]
.text:00001DD1                 mov     edx, [ecx+1Ch]
.text:00001DD4                 push    edx
.text:00001DD5                 mov     eax, [ebp+arg_0]
.text:00001DD8                 mov     ecx, [eax+14h]
.text:00001DDB                 mov     edx, [ecx+14h]
.text:00001DDE                 push    edx
.text:00001DDF                 call    _sk_addr_dup
.text:00001DE4                 add     esp, 4
.text:00001DE7                 push    eax
.text:00001DE8                 call    _new_connection
.text:00001DED                 add     esp, 24h
.text:00001DF0                 mov     ecx, [ebp+arg_0]
.text:00001DF3                 mov     [ecx+50h], eax
.text:00001DF6                 mov     esi, esp
.text:00001DF8                 mov     edx, [ebp+arg_0]
.text:00001DFB                 mov     eax, [edx+50h]
.text:00001DFE                 push    eax
.text:00001DFF                 mov     ecx, [ebp+arg_0]
.text:00001E02                 mov     edx, [ecx+50h]
.text:00001E05                 mov     eax, [edx]
.text:00001E07                 mov     ecx, [eax+1Ch]
.text:00001E0A                 call    ecx
.text:00001E0C                 add     esp, 4
.text:00001E0F                 cmp     esi, esp
.text:00001E11                 call    __RTC_CheckEsp
.text:00001E16                 mov     [ebp+var_8], eax
.text:00001E19                 cmp     [ebp+var_8], 0
.text:00001E1D                 jz      short loc_1E56
.text:00001E1F                 mov     edx, [ebp+var_8]
.text:00001E22                 push    edx
.text:00001E23                 push    offset $SG87681 ; "unable to connect to forwarded X server"...
.text:00001E28                 call    _dupprintf
.text:00001E2D                 add     esp, 8
.text:00001E30                 mov     [ebp+var_74], eax
.text:00001E33                 mov     eax, [ebp+var_74]
.text:00001E36                 push    eax
.text:00001E37                 mov     ecx, [ebp+arg_0]
.text:00001E3A                 push    ecx
.text:00001E3B                 call    _x11_send_init_error
.text:00001E40                 add     esp, 8
.text:00001E43                 mov     edx, [ebp+var_74]
.text:00001E46                 push    edx
.text:00001E47                 call    _safefree
.text:00001E4C                 add     esp, 4
.text:00001E4F                 xor     eax, eax
.text:00001E51                 jmp     loc_1F97
.text:00001E56 ; ---------------------------------------------------------------------------
.text:00001E56
.text:00001E56 loc_1E56:                               ; CODE XREF: _x11_send+499j
.text:00001E56                 mov     [ebp+var_40], 0
.text:00001E5D                 cmp     [ebp+var_40], 0
.text:00001E61                 jz      short loc_1EC4
.text:00001E63                 cmp     [ebp+var_75], 0
.text:00001E67                 jnz     short loc_1E76
.text:00001E69                 push    offset $LN32    ; "socketdatalen"
.text:00001E6E                 call    __RTC_UninitUse
.text:00001E73                 add     esp, 4
.text:00001E76
.text:00001E76 loc_1E76:                               ; CODE XREF: _x11_send+4E3j
.text:00001E76                 cmp     [ebp+var_44], 6
.text:00001E7A                 jnz     short loc_1EC4
.text:00001E7C                 mov     eax, [ebp+var_40]
.text:00001E7F                 movzx   ecx, byte ptr [eax+3]
.text:00001E83                 push    ecx
.text:00001E84                 mov     edx, [ebp+var_40]
.text:00001E87                 movzx   eax, byte ptr [edx+2]
.text:00001E8B                 push    eax
.text:00001E8C                 mov     ecx, [ebp+var_40]
.text:00001E8F                 movzx   edx, byte ptr [ecx+1]
.text:00001E93                 push    edx
.text:00001E94                 mov     eax, [ebp+var_40]
.text:00001E97                 movzx   ecx, byte ptr [eax]
.text:00001E9A                 push    ecx
.text:00001E9B                 push    offset $SG87684 ; "%d.%d.%d.%d"
.text:00001EA0                 lea     edx, [ebp+Dest]
.text:00001EA3                 push    edx             ; Dest
.text:00001EA4                 call    _sprintf
.text:00001EA9                 add     esp, 18h
.text:00001EAC                 mov     eax, [ebp+var_40]
.text:00001EAF                 movzx   ecx, byte ptr [eax+4]
.text:00001EB3                 shl     ecx, 8
.text:00001EB6                 mov     edx, [ebp+var_40]
.text:00001EB9                 movzx   eax, byte ptr [edx+5]
.text:00001EBD                 or      ecx, eax
.text:00001EBF                 mov     [ebp+var_70], ecx
.text:00001EC2                 jmp     short loc_1EDC
.text:00001EC4 ; ---------------------------------------------------------------------------
.text:00001EC4
.text:00001EC4 loc_1EC4:                               ; CODE XREF: _x11_send+4DDj
.text:00001EC4                                         ; _x11_send+4F6j
.text:00001EC4                 push    offset $SG87690 ; "0.0.0.0"
.text:00001EC9                 lea     ecx, [ebp+Dest]
.text:00001ECC                 push    ecx             ; Dest
.text:00001ECD                 call    _strcpy
.text:00001ED2                 add     esp, 8
.text:00001ED5                 mov     [ebp+var_70], 0
.text:00001EDC
.text:00001EDC loc_1EDC:                               ; CODE XREF: _x11_send+53Ej
.text:00001EDC                 lea     edx, [ebp+var_38]
.text:00001EDF                 push    edx             ; int
.text:00001EE0                 mov     eax, [ebp+var_70]
.text:00001EE3                 push    eax             ; int
.text:00001EE4                 lea     ecx, [ebp+Dest]
.text:00001EE7                 push    ecx             ; char *
.text:00001EE8                 mov     edx, [ebp+arg_0]
.text:00001EEB                 mov     eax, [edx+14h]
.text:00001EEE                 mov     ecx, [eax+28h]
.text:00001EF1                 push    ecx             ; int
.text:00001EF2                 mov     edx, [ebp+arg_0]
.text:00001EF5                 mov     eax, [edx+14h]
.text:00001EF8                 mov     ecx, [eax+24h]
.text:00001EFB                 push    ecx             ; Src
.text:00001EFC                 mov     edx, [ebp+arg_0]
.text:00001EFF                 mov     eax, [edx+14h]
.text:00001F02                 mov     ecx, [eax+20h]
.text:00001F05                 push    ecx             ; int
.text:00001F06                 mov     edx, [ebp+var_2C]
.text:00001F09                 push    edx             ; int
.text:00001F0A                 mov     eax, [ebp+var_28]
.text:00001F0D                 push    eax             ; int
.text:00001F0E                 mov     ecx, [ebp+arg_0]
.text:00001F11                 movzx   edx, byte ptr [ecx+4]
.text:00001F15                 push    edx             ; int
.text:00001F16                 call    _x11_make_greeting
.text:00001F1B                 add     esp, 24h
.text:00001F1E                 mov     [ebp+var_30], eax
.text:00001F21                 mov     esi, esp
.text:00001F23                 mov     eax, [ebp+var_38]
.text:00001F26                 push    eax
.text:00001F27                 mov     ecx, [ebp+var_30]
.text:00001F2A                 push    ecx
.text:00001F2B                 mov     edx, [ebp+arg_0]
.text:00001F2E                 mov     eax, [edx+50h]
.text:00001F31                 push    eax
.text:00001F32                 mov     ecx, [ebp+arg_0]
.text:00001F35                 mov     edx, [ecx+50h]
.text:00001F38                 mov     eax, [edx]
.text:00001F3A                 mov     ecx, [eax+8]
.text:00001F3D                 call    ecx
.text:00001F3F                 add     esp, 0Ch
.text:00001F42                 cmp     esi, esp
.text:00001F44                 call    __RTC_CheckEsp
.text:00001F49                 mov     edx, [ebp+var_38]
.text:00001F4C                 push    edx
.text:00001F4D                 mov     eax, [ebp+var_30]
.text:00001F50                 push    eax
.text:00001F51                 call    _smemclr
.text:00001F56                 add     esp, 8
.text:00001F59                 mov     ecx, [ebp+var_30]
.text:00001F5C                 push    ecx
.text:00001F5D                 call    _safefree
.text:00001F62                 add     esp, 4
.text:00001F65                 mov     edx, [ebp+arg_0]
.text:00001F68                 mov     dword ptr [edx+34h], 1
.text:00001F6F
.text:00001F6F loc_1F6F:                               ; CODE XREF: _x11_send+243j
.text:00001F6F                 mov     esi, esp
.text:00001F71                 mov     eax, [ebp+arg_8]
.text:00001F74                 push    eax
.text:00001F75                 mov     ecx, [ebp+arg_4]
.text:00001F78                 push    ecx
.text:00001F79                 mov     edx, [ebp+arg_0]
.text:00001F7C                 mov     eax, [edx+50h]
.text:00001F7F                 push    eax
.text:00001F80                 mov     ecx, [ebp+arg_0]
.text:00001F83                 mov     edx, [ecx+50h]
.text:00001F86                 mov     eax, [edx]
.text:00001F88                 mov     ecx, [eax+8]
.text:00001F8B                 call    ecx
.text:00001F8D                 add     esp, 0Ch
.text:00001F90                 cmp     esi, esp
.text:00001F92                 call    __RTC_CheckEsp
.text:00001F97
.text:00001F97 loc_1F97:                               ; CODE XREF: _x11_send+2Fj
.text:00001F97                                         ; _x11_send+83j ...
.text:00001F97                 push    edx
.text:00001F98                 mov     ecx, ebp
.text:00001F9A                 push    eax
.text:00001F9B                 lea     edx, $LN38_0
.text:00001FA1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001FA6                 pop     eax
.text:00001FA7                 pop     edx
.text:00001FA8                 pop     edi
.text:00001FA9                 pop     esi
.text:00001FAA                 mov     ecx, [ebp+var_4]
.text:00001FAD                 xor     ecx, ebp
.text:00001FAF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001FB4                 add     esp, 88h
.text:00001FBA                 cmp     ebp, esp
.text:00001FBC                 call    __RTC_CheckEsp
.text:00001FC1                 mov     esp, ebp
.text:00001FC3                 pop     ebp
.text:00001FC4                 retn
.text:00001FC4 _x11_send       endp
.text:00001FC4
.text:00001FC4 ; ---------------------------------------------------------------------------
.text:00001FC5                 align 4
.text:00001FC8 $LN38_0         dd 4                    ; DATA XREF: _x11_send+617o
.text:00001FCC                 dd offset $LN37_0
.text:00001FD0 $LN37_0         dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00001FCCo
.text:00001FD8                 dd offset $LN33         ; "auth_matched"
.text:00001FDC                 dd 0FFFFFFE4h, 4
.text:00001FE4                 dd offset $LN34         ; "peer_ip"
.text:00001FE8                 dd 0FFFFFFC8h, 4
.text:00001FF0                 dd offset $LN35         ; "greeting_len"
.text:00001FF4                 dd 0FFFFFF98h, 20h
.text:00001FFC                 dd offset $LN36_0       ; "new_peer_addr"
.text:00002000 $LN36_0         db 'new_peer_addr',0    ; DATA XREF: .text:00001FFCo
.text:0000200E $LN35           db 'greeting_len',0     ; DATA XREF: .text:00001FF0o
.text:0000201B $LN34           db 'peer_ip',0          ; DATA XREF: .text:00001FE4o
.text:00002023 $LN33           db 'auth_matched',0     ; DATA XREF: .text:00001FD8o
.text:00002030 $LN32           db 'socketdatalen',0    ; DATA XREF: _x11_send+4E5o
.text:0000203E                 db 6 dup(0CCh)
.text:00002044
.text:00002044 ; =============== S U B R O U T I N E =======================================
.text:00002044
.text:00002044 ; Attributes: bp-based frame
.text:00002044
.text:00002044 ; int __cdecl x11_verify(int, int, int, char *Str1, void *Buf2, int, int)
.text:00002044 _x11_verify     proc near               ; CODE XREF: _x11_send+36Ep
.text:00002044
.text:00002044 var_4C          = dword ptr -4Ch
.text:00002044 var_48          = dword ptr -48h
.text:00002044 var_44          = dword ptr -44h
.text:00002044 var_40          = dword ptr -40h
.text:00002044 var_3C          = dword ptr -3Ch
.text:00002044 var_38          = dword ptr -38h
.text:00002044 var_34          = dword ptr -34h
.text:00002044 var_2C          = dword ptr -2Ch
.text:00002044 var_28          = dword ptr -28h
.text:00002044 var_24          = dword ptr -24h
.text:00002044 var_18          = dword ptr -18h
.text:00002044 arg_0           = dword ptr  8
.text:00002044 arg_4           = dword ptr  0Ch
.text:00002044 arg_8           = dword ptr  10h
.text:00002044 Str1            = dword ptr  14h
.text:00002044 Buf2            = dword ptr  18h
.text:00002044 arg_14          = dword ptr  1Ch
.text:00002044 arg_18          = dword ptr  20h
.text:00002044
.text:00002044                 push    ebp
.text:00002045                 mov     ebp, esp
.text:00002047                 sub     esp, 4Ch
.text:0000204A                 push    edi
.text:0000204B                 lea     edi, [ebp+var_4C]
.text:0000204E                 mov     ecx, 13h
.text:00002053                 mov     eax, 0CCCCCCCCh
.text:00002058                 rep stosd
.text:0000205A                 mov     eax, ds:Str2
.text:0000205F                 push    eax             ; Str2
.text:00002060                 mov     ecx, [ebp+Str1]
.text:00002063                 push    ecx             ; Str1
.text:00002064                 call    _strcmp
.text:00002069                 add     esp, 8
.text:0000206C                 test    eax, eax
.text:0000206E                 jnz     short loc_2085
.text:00002070                 mov     [ebp+var_2C], 1
.text:00002077                 mov     edx, [ebp+arg_14]
.text:0000207A                 mov     [ebp+var_24], edx
.text:0000207D                 mov     eax, [ebp+Buf2]
.text:00002080                 mov     [ebp+var_28], eax
.text:00002083                 jmp     short loc_20B5
.text:00002085 ; ---------------------------------------------------------------------------
.text:00002085
.text:00002085 loc_2085:                               ; CODE XREF: _x11_verify+2Aj
.text:00002085                 mov     ecx, ds:off_448
.text:0000208B                 push    ecx             ; Str2
.text:0000208C                 mov     edx, [ebp+Str1]
.text:0000208F                 push    edx             ; Str1
.text:00002090                 call    _strcmp
.text:00002095                 add     esp, 8
.text:00002098                 test    eax, eax
.text:0000209A                 jnz     short loc_20AB
.text:0000209C                 mov     [ebp+var_2C], 2
.text:000020A3                 mov     eax, [ebp+Buf2]
.text:000020A6                 mov     [ebp+var_18], eax
.text:000020A9                 jmp     short loc_20B5
.text:000020AB ; ---------------------------------------------------------------------------
.text:000020AB
.text:000020AB loc_20AB:                               ; CODE XREF: _x11_verify+56j
.text:000020AB                 mov     eax, offset $SG87315 ; "Unsupported authorisation protocol"
.text:000020B0                 jmp     loc_2319
.text:000020B5 ; ---------------------------------------------------------------------------
.text:000020B5
.text:000020B5 loc_20B5:                               ; CODE XREF: _x11_verify+3Fj
.text:000020B5                                         ; _x11_verify+65j
.text:000020B5                 push    0
.text:000020B7                 lea     ecx, [ebp+var_2C]
.text:000020BA                 push    ecx
.text:000020BB                 mov     edx, [ebp+arg_8]
.text:000020BE                 push    edx
.text:000020BF                 call    _find234
.text:000020C4                 add     esp, 0Ch
.text:000020C7                 mov     [ebp+var_34], eax
.text:000020CA                 cmp     [ebp+var_34], 0
.text:000020CE                 jnz     short loc_20DA
.text:000020D0                 mov     eax, offset $SG87318 ; "Authorisation not recognised"
.text:000020D5                 jmp     loc_2319
.text:000020DA ; ---------------------------------------------------------------------------
.text:000020DA
.text:000020DA loc_20DA:                               ; CODE XREF: _x11_verify+8Aj
.text:000020DA                 mov     eax, [ebp+var_34]
.text:000020DD                 cmp     dword ptr [eax], 2
.text:000020E0                 jnz     loc_230F
.text:000020E6                 cmp     [ebp+arg_14], 18h
.text:000020EA                 jz      short loc_20F6
.text:000020EC                 mov     eax, offset $SG87326 ; "XDM-AUTHORIZATION-1 data was wrong leng"...
.text:000020F1                 jmp     loc_2319
.text:000020F6 ; ---------------------------------------------------------------------------
.text:000020F6
.text:000020F6 loc_20F6:                               ; CODE XREF: _x11_verify+A6j
.text:000020F6                 cmp     [ebp+arg_4], 0FFFFFFFFh
.text:000020FA                 jnz     short loc_2106
.text:000020FC                 mov     eax, offset $SG87328 ; "cannot do XDM-AUTHORIZATION-1 without r"...
.text:00002101                 jmp     loc_2319
.text:00002106 ; ---------------------------------------------------------------------------
.text:00002106
.text:00002106 loc_2106:                               ; CODE XREF: _x11_verify+B6j
.text:00002106                 push    18h
.text:00002108                 mov     ecx, [ebp+Buf2]
.text:0000210B                 push    ecx
.text:0000210C                 mov     edx, [ebp+var_34]
.text:0000210F                 mov     eax, [edx+4]
.text:00002112                 add     eax, 9
.text:00002115                 push    eax
.text:00002116                 call    _des_decrypt_xdmauth
.text:0000211B                 add     esp, 0Ch
.text:0000211E                 push    8               ; Size
.text:00002120                 mov     ecx, [ebp+Buf2]
.text:00002123                 push    ecx             ; Buf2
.text:00002124                 mov     edx, [ebp+var_34]
.text:00002127                 mov     eax, [edx+4]
.text:0000212A                 push    eax             ; Buf1
.text:0000212B                 call    _memcmp
.text:00002130                 add     esp, 0Ch
.text:00002133                 test    eax, eax
.text:00002135                 jz      short loc_2141
.text:00002137                 mov     eax, offset $SG87330 ; "XDM-AUTHORIZATION-1 data failed check"
.text:0000213C                 jmp     loc_2319
.text:00002141 ; ---------------------------------------------------------------------------
.text:00002141
.text:00002141 loc_2141:                               ; CODE XREF: _x11_verify+F1j
.text:00002141                 mov     ecx, [ebp+Buf2]
.text:00002144                 movzx   edx, byte ptr [ecx+8]
.text:00002148                 shl     edx, 18h
.text:0000214B                 mov     eax, [ebp+Buf2]
.text:0000214E                 movzx   ecx, byte ptr [eax+9]
.text:00002152                 shl     ecx, 10h
.text:00002155                 or      edx, ecx
.text:00002157                 mov     eax, [ebp+Buf2]
.text:0000215A                 movzx   ecx, byte ptr [eax+0Ah]
.text:0000215E                 shl     ecx, 8
.text:00002161                 or      edx, ecx
.text:00002163                 mov     eax, [ebp+Buf2]
.text:00002166                 movzx   ecx, byte ptr [eax+0Bh]
.text:0000216A                 or      edx, ecx
.text:0000216C                 cmp     edx, [ebp+arg_0]
.text:0000216F                 jz      short loc_217B
.text:00002171                 mov     eax, offset $SG87340 ; "XDM-AUTHORIZATION-1 data failed check"
.text:00002176                 jmp     loc_2319
.text:0000217B ; ---------------------------------------------------------------------------
.text:0000217B
.text:0000217B loc_217B:                               ; CODE XREF: _x11_verify+12Bj
.text:0000217B                 mov     edx, [ebp+Buf2]
.text:0000217E                 movzx   eax, byte ptr [edx+0Ch]
.text:00002182                 shl     eax, 8
.text:00002185                 mov     ecx, [ebp+Buf2]
.text:00002188                 movzx   edx, byte ptr [ecx+0Dh]
.text:0000218C                 or      eax, edx
.text:0000218E                 cmp     eax, [ebp+arg_4]
.text:00002191                 jz      short loc_219D
.text:00002193                 mov     eax, offset $SG87347 ; "XDM-AUTHORIZATION-1 data failed check"
.text:00002198                 jmp     loc_2319
.text:0000219D ; ---------------------------------------------------------------------------
.text:0000219D
.text:0000219D loc_219D:                               ; CODE XREF: _x11_verify+14Dj
.text:0000219D                 mov     eax, [ebp+Buf2]
.text:000021A0                 movzx   ecx, byte ptr [eax+0Eh]
.text:000021A4                 shl     ecx, 18h
.text:000021A7                 mov     edx, [ebp+Buf2]
.text:000021AA                 movzx   eax, byte ptr [edx+0Fh]
.text:000021AE                 shl     eax, 10h
.text:000021B1                 or      ecx, eax
.text:000021B3                 mov     edx, [ebp+Buf2]
.text:000021B6                 movzx   eax, byte ptr [edx+10h]
.text:000021BA                 shl     eax, 8
.text:000021BD                 or      ecx, eax
.text:000021BF                 mov     edx, [ebp+Buf2]
.text:000021C2                 movzx   eax, byte ptr [edx+11h]
.text:000021C6                 or      ecx, eax
.text:000021C8                 mov     [ebp+var_38], ecx
.text:000021CB                 mov     [ebp+var_44], 12h
.text:000021D2                 jmp     short loc_21DD
.text:000021D4 ; ---------------------------------------------------------------------------
.text:000021D4
.text:000021D4 loc_21D4:                               ; CODE XREF: _x11_verify:loc_21FAj
.text:000021D4                 mov     ecx, [ebp+var_44]
.text:000021D7                 add     ecx, 1
.text:000021DA                 mov     [ebp+var_44], ecx
.text:000021DD
.text:000021DD loc_21DD:                               ; CODE XREF: _x11_verify+18Ej
.text:000021DD                 cmp     [ebp+var_44], 18h
.text:000021E1                 jge     short loc_21FC
.text:000021E3                 mov     edx, [ebp+Buf2]
.text:000021E6                 add     edx, [ebp+var_44]
.text:000021E9                 movzx   eax, byte ptr [edx]
.text:000021EC                 test    eax, eax
.text:000021EE                 jz      short loc_21FA
.text:000021F0                 mov     eax, offset $SG87360 ; "XDM-AUTHORIZATION-1 data failed check"
.text:000021F5                 jmp     loc_2319
.text:000021FA ; ---------------------------------------------------------------------------
.text:000021FA
.text:000021FA loc_21FA:                               ; CODE XREF: _x11_verify+1AAj
.text:000021FA                 jmp     short loc_21D4
.text:000021FC ; ---------------------------------------------------------------------------
.text:000021FC
.text:000021FC loc_21FC:                               ; CODE XREF: _x11_verify+19Dj
.text:000021FC                 push    0               ; Time
.text:000021FE                 call    _time
.text:00002203                 add     esp, 4
.text:00002206                 mov     [ebp+var_40], eax
.text:00002209                 mov     [ebp+var_3C], edx
.text:0000220C                 mov     ecx, [ebp+var_38]
.text:0000220F                 xor     edx, edx
.text:00002211                 sub     ecx, [ebp+var_40]
.text:00002214                 sbb     edx, [ebp+var_3C]
.text:00002217                 push    ecx             ; X
.text:00002218                 call    _abs
.text:0000221D                 add     esp, 4
.text:00002220                 cmp     eax, 4B0h
.text:00002225                 jle     short loc_2231
.text:00002227                 mov     eax, offset $SG87363 ; "XDM-AUTHORIZATION-1 time stamp was too "...
.text:0000222C                 jmp     loc_2319
.text:00002231 ; ---------------------------------------------------------------------------
.text:00002231
.text:00002231 loc_2231:                               ; CODE XREF: _x11_verify+1E1j
.text:00002231                 push    0Ch
.text:00002233                 push    1
.text:00002235                 call    _safemalloc
.text:0000223A                 add     esp, 8
.text:0000223D                 mov     [ebp+var_48], eax
.text:00002240                 mov     eax, [ebp+var_48]
.text:00002243                 mov     ecx, [ebp+var_38]
.text:00002246                 mov     [eax], ecx
.text:00002248                 push    6               ; Size
.text:0000224A                 mov     edx, [ebp+Buf2]
.text:0000224D                 add     edx, 8
.text:00002250                 push    edx             ; Src
.text:00002251                 mov     eax, [ebp+var_48]
.text:00002254                 add     eax, 4
.text:00002257                 push    eax             ; Dst
.text:00002258                 call    _memcpy
.text:0000225D                 add     esp, 0Ch
.text:00002260                 mov     ecx, [ebp+var_34]
.text:00002263                 cmp     dword ptr [ecx+18h], 0
.text:00002267                 jnz     short loc_2280
.text:00002269                 push    1ACh            ; Line
.text:0000226E                 push    offset $SG87368 ; "..\\..\\..\\x11fwd.c"
.text:00002273                 push    offset $SG87369 ; "auth->xdmseen != NULL"
.text:00002278                 call    __wassert
.text:0000227D ; ---------------------------------------------------------------------------
.text:0000227D                 add     esp, 0Ch
.text:00002280
.text:00002280 loc_2280:                               ; CODE XREF: _x11_verify+223j
.text:00002280                 mov     eax, [ebp+var_48]
.text:00002283                 push    eax
.text:00002284                 mov     ecx, [ebp+var_34]
.text:00002287                 mov     edx, [ecx+18h]
.text:0000228A                 push    edx
.text:0000228B                 call    _add234
.text:00002290                 add     esp, 8
.text:00002293                 mov     [ebp+var_4C], eax
.text:00002296                 mov     eax, [ebp+var_4C]
.text:00002299                 cmp     eax, [ebp+var_48]
.text:0000229C                 jz      short loc_22B1
.text:0000229E                 mov     ecx, [ebp+var_48]
.text:000022A1                 push    ecx
.text:000022A2                 call    _safefree
.text:000022A7                 add     esp, 4
.text:000022AA                 mov     eax, offset $SG87371 ; "XDM-AUTHORIZATION-1 data replayed"
.text:000022AF                 jmp     short loc_2319
.text:000022B1 ; ---------------------------------------------------------------------------
.text:000022B1
.text:000022B1 loc_22B1:                               ; CODE XREF: _x11_verify+258j
.text:000022B1                                         ; _x11_verify+2C9j
.text:000022B1                 push    0
.text:000022B3                 mov     edx, [ebp+var_34]
.text:000022B6                 mov     eax, [edx+18h]
.text:000022B9                 push    eax
.text:000022BA                 call    _index234
.text:000022BF                 add     esp, 8
.text:000022C2                 mov     [ebp+var_48], eax
.text:000022C5                 cmp     [ebp+var_48], 0
.text:000022C9                 jnz     short loc_22E2
.text:000022CB                 push    1B5h            ; Line
.text:000022D0                 push    offset $SG87377 ; "..\\..\\..\\x11fwd.c"
.text:000022D5                 push    offset $SG87378 ; "seen != NULL"
.text:000022DA                 call    __wassert
.text:000022DF ; ---------------------------------------------------------------------------
.text:000022DF                 add     esp, 0Ch
.text:000022E2
.text:000022E2 loc_22E2:                               ; CODE XREF: _x11_verify+285j
.text:000022E2                 mov     edx, [ebp+var_48]
.text:000022E5                 mov     eax, [ebp+var_38]
.text:000022E8                 sub     eax, [edx]
.text:000022EA                 cmp     eax, 4B0h
.text:000022EF                 ja      short loc_22F3
.text:000022F1                 jmp     short loc_230F
.text:000022F3 ; ---------------------------------------------------------------------------
.text:000022F3
.text:000022F3 loc_22F3:                               ; CODE XREF: _x11_verify+2ABj
.text:000022F3                 push    0
.text:000022F5                 mov     ecx, [ebp+var_34]
.text:000022F8                 mov     edx, [ecx+18h]
.text:000022FB                 push    edx
.text:000022FC                 call    _delpos234
.text:00002301                 add     esp, 8
.text:00002304                 push    eax
.text:00002305                 call    _safefree
.text:0000230A                 add     esp, 4
.text:0000230D                 jmp     short loc_22B1
.text:0000230F ; ---------------------------------------------------------------------------
.text:0000230F
.text:0000230F loc_230F:                               ; CODE XREF: _x11_verify+9Cj
.text:0000230F                                         ; _x11_verify+2ADj
.text:0000230F                 mov     eax, [ebp+arg_18]
.text:00002312                 mov     ecx, [ebp+var_34]
.text:00002315                 mov     [eax], ecx
.text:00002317                 xor     eax, eax
.text:00002319
.text:00002319 loc_2319:                               ; CODE XREF: _x11_verify+6Cj
.text:00002319                                         ; _x11_verify+91j ...
.text:00002319                 push    edx
.text:0000231A                 mov     ecx, ebp
.text:0000231C                 push    eax
.text:0000231D                 lea     edx, $LN27
.text:00002323                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002328                 pop     eax
.text:00002329                 pop     edx
.text:0000232A                 pop     edi
.text:0000232B                 add     esp, 4Ch
.text:0000232E                 cmp     ebp, esp
.text:00002330                 call    __RTC_CheckEsp
.text:00002335                 mov     esp, ebp
.text:00002337                 pop     ebp
.text:00002338                 retn
.text:00002338 _x11_verify     endp
.text:00002338
.text:00002338 ; ---------------------------------------------------------------------------
.text:00002339                 align 4
.text:0000233C $LN27           dd 1                    ; DATA XREF: _x11_verify+2D9o
.text:00002340                 dd offset $LN26
.text:00002344 $LN26           dd 0FFFFFFD4h, 28h      ; DATA XREF: .text:00002340o
.text:0000234C                 dd offset $LN25         ; "match_dummy"
.text:00002350 $LN25           db 'match_dummy',0      ; DATA XREF: .text:0000234Co
.text:0000235C                 db 8 dup(0CCh)
.text:00002364
.text:00002364 ; =============== S U B R O U T I N E =======================================
.text:00002364
.text:00002364 ; Attributes: bp-based frame
.text:00002364
.text:00002364 ; time_t __cdecl static time(time_t *Time)
.text:00002364 _time           proc near               ; CODE XREF: _x11_verify+1BAp
.text:00002364                                         ; _x11_make_greeting+F3p
.text:00002364
.text:00002364 Time            = dword ptr  8
.text:00002364
.text:00002364                 push    ebp
.text:00002365                 mov     ebp, esp
.text:00002367                 mov     eax, [ebp+Time]
.text:0000236A                 push    eax             ; Time
.text:0000236B                 call    __time64
.text:00002370                 add     esp, 4
.text:00002373                 cmp     ebp, esp
.text:00002375                 call    __RTC_CheckEsp
.text:0000237A                 pop     ebp
.text:0000237B                 retn
.text:0000237B _time           endp
.text:0000237B
.text:0000237B ; ---------------------------------------------------------------------------
.text:0000237C                 db 8 dup(0CCh)
.text:00002384
.text:00002384 ; =============== S U B R O U T I N E =======================================
.text:00002384
.text:00002384 ; Attributes: bp-based frame
.text:00002384
.text:00002384 ; int __cdecl x11_parse_ip(char *Src, int)
.text:00002384 _x11_parse_ip   proc near               ; CODE XREF: _x11_send+328p
.text:00002384                                         ; _x11_make_greeting+88p
.text:00002384
.text:00002384 var_1C          = dword ptr -1Ch
.text:00002384 var_18          = dword ptr -18h
.text:00002384 var_14          = dword ptr -14h
.text:00002384 var_10          = dword ptr -10h
.text:00002384 var_C           = dword ptr -0Ch
.text:00002384 var_8           = dword ptr -8
.text:00002384 var_4           = dword ptr -4
.text:00002384 Src             = dword ptr  8
.text:00002384 arg_4           = dword ptr  0Ch
.text:00002384
.text:00002384                 push    ebp
.text:00002385                 mov     ebp, esp
.text:00002387                 sub     esp, 1Ch
.text:0000238A                 mov     eax, 0CCCCCCCCh
.text:0000238F                 mov     [ebp+var_1C], eax
.text:00002392                 mov     [ebp+var_18], eax
.text:00002395                 mov     [ebp+var_14], eax
.text:00002398                 mov     [ebp+var_10], eax
.text:0000239B                 mov     [ebp+var_C], eax
.text:0000239E                 mov     [ebp+var_8], eax
.text:000023A1                 mov     [ebp+var_4], eax
.text:000023A4                 mov     eax, dword ptr ds:___security_cookie
.text:000023A9                 xor     eax, ebp
.text:000023AB                 mov     [ebp+var_4], eax
.text:000023AE                 cmp     [ebp+Src], 0
.text:000023B2                 jz      short loc_2401
.text:000023B4                 lea     eax, [ebp+var_C]
.text:000023B7                 push    eax
.text:000023B8                 lea     ecx, [ebp+var_10]
.text:000023BB                 push    ecx
.text:000023BC                 lea     edx, [ebp+var_14]
.text:000023BF                 push    edx
.text:000023C0                 lea     eax, [ebp+var_18]
.text:000023C3                 push    eax
.text:000023C4                 push    offset $SG87593 ; "%d.%d.%d.%d"
.text:000023C9                 mov     ecx, [ebp+Src]
.text:000023CC                 push    ecx             ; Src
.text:000023CD                 call    _sscanf
.text:000023D2                 add     esp, 18h
.text:000023D5                 cmp     eax, 4
.text:000023D8                 jnz     short loc_2401
.text:000023DA                 mov     edx, [ebp+var_18]
.text:000023DD                 shl     edx, 18h
.text:000023E0                 mov     eax, [ebp+var_14]
.text:000023E3                 shl     eax, 10h
.text:000023E6                 or      edx, eax
.text:000023E8                 mov     ecx, [ebp+var_10]
.text:000023EB                 shl     ecx, 8
.text:000023EE                 or      edx, ecx
.text:000023F0                 or      edx, [ebp+var_C]
.text:000023F3                 mov     eax, [ebp+arg_4]
.text:000023F6                 mov     [eax], edx
.text:000023F8                 mov     eax, 1
.text:000023FD                 jmp     short loc_2403
.text:000023FF ; ---------------------------------------------------------------------------
.text:000023FF                 jmp     short loc_2403
.text:00002401 ; ---------------------------------------------------------------------------
.text:00002401
.text:00002401 loc_2401:                               ; CODE XREF: _x11_parse_ip+2Ej
.text:00002401                                         ; _x11_parse_ip+54j
.text:00002401                 xor     eax, eax
.text:00002403
.text:00002403 loc_2403:                               ; CODE XREF: _x11_parse_ip+79j
.text:00002403                                         ; _x11_parse_ip+7Bj
.text:00002403                 push    edx
.text:00002404                 mov     ecx, ebp
.text:00002406                 push    eax
.text:00002407                 lea     edx, $LN7
.text:0000240D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002412                 pop     eax
.text:00002413                 pop     edx
.text:00002414                 mov     ecx, [ebp+var_4]
.text:00002417                 xor     ecx, ebp
.text:00002419                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000241E                 add     esp, 1Ch
.text:00002421                 cmp     ebp, esp
.text:00002423                 call    __RTC_CheckEsp
.text:00002428                 mov     esp, ebp
.text:0000242A                 pop     ebp
.text:0000242B                 retn
.text:0000242B _x11_parse_ip   endp
.text:0000242B
.text:0000242B ; ---------------------------------------------------------------------------
.text:0000242C $LN7            dd 1                    ; DATA XREF: _x11_parse_ip+83o
.text:00002430                 dd offset $LN6
.text:00002434 $LN6            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00002430o
.text:0000243C                 dd offset $LN5
.text:00002440 $LN5            dd 0CCCC0069h           ; DATA XREF: .text:0000243Co
.text:00002444
.text:00002444 ; =============== S U B R O U T I N E =======================================
.text:00002444
.text:00002444 ; Attributes: bp-based frame
.text:00002444
.text:00002444                 public _x11_send_eof
.text:00002444 _x11_send_eof   proc near
.text:00002444
.text:00002444 arg_0           = dword ptr  8
.text:00002444
.text:00002444                 push    ebp
.text:00002445                 mov     ebp, esp
.text:00002447                 push    esi
.text:00002448                 mov     eax, [ebp+arg_0]
.text:0000244B                 cmp     dword ptr [eax+50h], 0
.text:0000244F                 jz      short loc_2473
.text:00002451                 mov     esi, esp
.text:00002453                 mov     ecx, [ebp+arg_0]
.text:00002456                 mov     edx, [ecx+50h]
.text:00002459                 push    edx
.text:0000245A                 mov     eax, [ebp+arg_0]
.text:0000245D                 mov     ecx, [eax+50h]
.text:00002460                 mov     edx, [ecx]
.text:00002462                 mov     eax, [edx+10h]
.text:00002465                 call    eax
.text:00002467                 add     esp, 4
.text:0000246A                 cmp     esi, esp
.text:0000246C                 call    __RTC_CheckEsp
.text:00002471                 jmp     short loc_248B
.text:00002473 ; ---------------------------------------------------------------------------
.text:00002473
.text:00002473 loc_2473:                               ; CODE XREF: _x11_send_eof+Bj
.text:00002473                 mov     ecx, [ebp+arg_0]
.text:00002476                 cmp     dword ptr [ecx+4Ch], 0
.text:0000247A                 jz      short loc_248B
.text:0000247C                 mov     edx, [ebp+arg_0]
.text:0000247F                 mov     eax, [edx+4Ch]
.text:00002482                 push    eax
.text:00002483                 call    _sshfwd_write_eof
.text:00002488                 add     esp, 4
.text:0000248B
.text:0000248B loc_248B:                               ; CODE XREF: _x11_send_eof+2Dj
.text:0000248B                                         ; _x11_send_eof+36j
.text:0000248B                 pop     esi
.text:0000248C                 cmp     ebp, esp
.text:0000248E                 call    __RTC_CheckEsp
.text:00002493                 pop     ebp
.text:00002494                 retn
.text:00002494 _x11_send_eof   endp
.text:00002494
.text:00002494 ; ---------------------------------------------------------------------------
.text:00002495                 db 0Fh dup(0CCh)
.text:000024A4
.text:000024A4 ; =============== S U B R O U T I N E =======================================
.text:000024A4
.text:000024A4 ; Attributes: bp-based frame
.text:000024A4
.text:000024A4 ; int __cdecl x11_identify_auth_proto(char *Str1)
.text:000024A4                 public _x11_identify_auth_proto
.text:000024A4 _x11_identify_auth_proto proc near
.text:000024A4
.text:000024A4 var_4           = dword ptr -4
.text:000024A4 Str1            = dword ptr  8
.text:000024A4
.text:000024A4                 push    ebp
.text:000024A5                 mov     ebp, esp
.text:000024A7                 push    ecx
.text:000024A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024AF                 mov     [ebp+var_4], 1
.text:000024B6                 jmp     short loc_24C1
.text:000024B8 ; ---------------------------------------------------------------------------
.text:000024B8
.text:000024B8 loc_24B8:                               ; CODE XREF: _x11_identify_auth_proto:loc_24E7j
.text:000024B8                 mov     eax, [ebp+var_4]
.text:000024BB                 add     eax, 1
.text:000024BE                 mov     [ebp+var_4], eax
.text:000024C1
.text:000024C1 loc_24C1:                               ; CODE XREF: _x11_identify_auth_proto+12j
.text:000024C1                 cmp     [ebp+var_4], 3
.text:000024C5                 jnb     short loc_24E9
.text:000024C7                 mov     ecx, [ebp+var_4]
.text:000024CA                 mov     edx, ds:_x11_authnames[ecx*4]
.text:000024D1                 push    edx             ; Str2
.text:000024D2                 mov     eax, [ebp+Str1]
.text:000024D5                 push    eax             ; Str1
.text:000024D6                 call    _strcmp
.text:000024DB                 add     esp, 8
.text:000024DE                 test    eax, eax
.text:000024E0                 jnz     short loc_24E7
.text:000024E2                 mov     eax, [ebp+var_4]
.text:000024E5                 jmp     short loc_24EC
.text:000024E7 ; ---------------------------------------------------------------------------
.text:000024E7
.text:000024E7 loc_24E7:                               ; CODE XREF: _x11_identify_auth_proto+3Cj
.text:000024E7                 jmp     short loc_24B8
.text:000024E9 ; ---------------------------------------------------------------------------
.text:000024E9
.text:000024E9 loc_24E9:                               ; CODE XREF: _x11_identify_auth_proto+21j
.text:000024E9                 or      eax, 0FFFFFFFFh
.text:000024EC
.text:000024EC loc_24EC:                               ; CODE XREF: _x11_identify_auth_proto+41j
.text:000024EC                 add     esp, 4
.text:000024EF                 cmp     ebp, esp
.text:000024F1                 call    __RTC_CheckEsp
.text:000024F6                 mov     esp, ebp
.text:000024F8                 pop     ebp
.text:000024F9                 retn
.text:000024F9 _x11_identify_auth_proto endp
.text:000024F9
.text:000024F9 ; ---------------------------------------------------------------------------
.text:000024FA                 db 0Ah dup(0CCh)
.text:00002504
.text:00002504 ; =============== S U B R O U T I N E =======================================
.text:00002504
.text:00002504 ; Attributes: bp-based frame
.text:00002504
.text:00002504 ; int __cdecl x11_dehexify(char *Str, int)
.text:00002504                 public _x11_dehexify
.text:00002504 _x11_dehexify   proc near
.text:00002504
.text:00002504 var_24          = dword ptr -24h
.text:00002504 var_20          = dword ptr -20h
.text:00002504 var_1C          = dword ptr -1Ch
.text:00002504 var_18          = dword ptr -18h
.text:00002504 Src             = byte ptr -14h
.text:00002504 var_10          = dword ptr -10h
.text:00002504 var_C           = dword ptr -0Ch
.text:00002504 var_8           = dword ptr -8
.text:00002504 var_4           = dword ptr -4
.text:00002504 Str             = dword ptr  8
.text:00002504 arg_4           = dword ptr  0Ch
.text:00002504
.text:00002504                 push    ebp
.text:00002505                 mov     ebp, esp
.text:00002507                 sub     esp, 24h
.text:0000250A                 mov     eax, 0CCCCCCCCh
.text:0000250F                 mov     [ebp+var_24], eax
.text:00002512                 mov     [ebp+var_20], eax
.text:00002515                 mov     [ebp+var_1C], eax
.text:00002518                 mov     [ebp+var_18], eax
.text:0000251B                 mov     dword ptr [ebp+Src], eax
.text:0000251E                 mov     [ebp+var_10], eax
.text:00002521                 mov     [ebp+var_C], eax
.text:00002524                 mov     [ebp+var_8], eax
.text:00002527                 mov     [ebp+var_4], eax
.text:0000252A                 mov     eax, [ebp+Str]
.text:0000252D                 push    eax             ; Str
.text:0000252E                 call    _strlen
.text:00002533                 add     esp, 4
.text:00002536                 shr     eax, 1
.text:00002538                 mov     [ebp+var_4], eax
.text:0000253B                 push    1
.text:0000253D                 mov     ecx, [ebp+var_4]
.text:00002540                 push    ecx
.text:00002541                 call    _safemalloc
.text:00002546                 add     esp, 8
.text:00002549                 mov     [ebp+var_C], eax
.text:0000254C                 mov     [ebp+var_8], 0
.text:00002553                 jmp     short loc_255E
.text:00002555 ; ---------------------------------------------------------------------------
.text:00002555
.text:00002555 loc_2555:                               ; CODE XREF: _x11_dehexify+A6j
.text:00002555                 mov     edx, [ebp+var_8]
.text:00002558                 add     edx, 1
.text:0000255B                 mov     [ebp+var_8], edx
.text:0000255E
.text:0000255E loc_255E:                               ; CODE XREF: _x11_dehexify+4Fj
.text:0000255E                 mov     eax, [ebp+var_8]
.text:00002561                 cmp     eax, [ebp+var_4]
.text:00002564                 jge     short loc_25AC
.text:00002566                 mov     [ebp+var_20], 0
.text:0000256D                 mov     ecx, [ebp+var_8]
.text:00002570                 mov     edx, [ebp+Str]
.text:00002573                 mov     al, [edx+ecx*2]
.text:00002576                 mov     [ebp+Src], al
.text:00002579                 mov     ecx, [ebp+var_8]
.text:0000257C                 mov     edx, [ebp+Str]
.text:0000257F                 mov     al, [edx+ecx*2+1]
.text:00002583                 mov     [ebp+Src+1], al
.text:00002586                 mov     [ebp+Src+2], 0
.text:0000258A                 lea     ecx, [ebp+var_20]
.text:0000258D                 push    ecx
.text:0000258E                 push    offset $SG87720 ; "%x"
.text:00002593                 lea     edx, [ebp+Src]
.text:00002596                 push    edx             ; Src
.text:00002597                 call    _sscanf
.text:0000259C                 add     esp, 0Ch
.text:0000259F                 mov     eax, [ebp+var_C]
.text:000025A2                 add     eax, [ebp+var_8]
.text:000025A5                 mov     cl, byte ptr [ebp+var_20]
.text:000025A8                 mov     [eax], cl
.text:000025AA                 jmp     short loc_2555
.text:000025AC ; ---------------------------------------------------------------------------
.text:000025AC
.text:000025AC loc_25AC:                               ; CODE XREF: _x11_dehexify+60j
.text:000025AC                 mov     edx, [ebp+arg_4]
.text:000025AF                 mov     eax, [ebp+var_4]
.text:000025B2                 mov     [edx], eax
.text:000025B4                 mov     eax, [ebp+var_C]
.text:000025B7                 push    edx
.text:000025B8                 mov     ecx, ebp
.text:000025BA                 push    eax
.text:000025BB                 lea     edx, $LN9
.text:000025C1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000025C6                 pop     eax
.text:000025C7                 pop     edx
.text:000025C8                 add     esp, 24h
.text:000025CB                 cmp     ebp, esp
.text:000025CD                 call    __RTC_CheckEsp
.text:000025D2                 mov     esp, ebp
.text:000025D4                 pop     ebp
.text:000025D5                 retn
.text:000025D5 _x11_dehexify   endp
.text:000025D5
.text:000025D5 ; ---------------------------------------------------------------------------
.text:000025D6                 align 4
.text:000025D8 $LN9            dd 2                    ; DATA XREF: _x11_dehexify+B7o
.text:000025DC                 dd offset $LN8
.text:000025E0 $LN8            dd 0FFFFFFECh, 3        ; DATA XREF: .text:000025DCo
.text:000025E8                 dd offset $LN6_0        ; "bytestr"
.text:000025EC                 dd 0FFFFFFE0h, 4
.text:000025F4                 dd offset $LN7_0
.text:000025F8 $LN7_0          dd 6C6176h              ; DATA XREF: .text:000025F4o
.text:000025FC $LN6_0          db 'bytestr',0          ; DATA XREF: .text:000025E8o
.text:00002604
.text:00002604 ; =============== S U B R O U T I N E =======================================
.text:00002604
.text:00002604 ; Attributes: bp-based frame
.text:00002604
.text:00002604 ; int __cdecl x11_make_greeting(int, int, int, int, void *Src, int, char *, int, int)
.text:00002604                 public _x11_make_greeting
.text:00002604 _x11_make_greeting proc near            ; CODE XREF: _x11_send+592p
.text:00002604
.text:00002604 var_A0          = dword ptr -0A0h
.text:00002604 var_9C          = dword ptr -9Ch
.text:00002604 var_98          = dword ptr -98h
.text:00002604 var_94          = dword ptr -94h
.text:00002604 var_90          = dword ptr -90h
.text:00002604 var_8C          = dword ptr -8Ch
.text:00002604 var_88          = dword ptr -88h
.text:00002604 var_84          = dword ptr -84h
.text:00002604 var_7C          = dword ptr -7Ch
.text:00002604 var_74          = dword ptr -74h
.text:00002604 var_70          = dword ptr -70h
.text:00002604 var_6C          = dword ptr -6Ch
.text:00002604 var_68          = dword ptr -68h
.text:00002604 Size            = dword ptr -64h
.text:00002604 var_60          = dword ptr -60h
.text:00002604 var_5C          = dword ptr -5Ch
.text:00002604 var_58          = dword ptr -58h
.text:00002604 Str             = dword ptr -54h
.text:00002604 Dst             = byte ptr -4Ch
.text:00002604 var_44          = byte ptr -44h
.text:00002604 var_43          = byte ptr -43h
.text:00002604 var_42          = byte ptr -42h
.text:00002604 var_41          = byte ptr -41h
.text:00002604 var_40          = byte ptr -40h
.text:00002604 var_3F          = byte ptr -3Fh
.text:00002604 var_3E          = byte ptr -3Eh
.text:00002604 var_3D          = byte ptr -3Dh
.text:00002604 var_3C          = byte ptr -3Ch
.text:00002604 var_3B          = byte ptr -3Bh
.text:00002604 var_8           = dword ptr -8
.text:00002604 var_4           = dword ptr -4
.text:00002604 arg_0           = dword ptr  8
.text:00002604 arg_4           = dword ptr  0Ch
.text:00002604 arg_8           = dword ptr  10h
.text:00002604 arg_C           = dword ptr  14h
.text:00002604 Src             = dword ptr  18h
.text:00002604 arg_14          = dword ptr  1Ch
.text:00002604 arg_18          = dword ptr  20h
.text:00002604 arg_1C          = dword ptr  24h
.text:00002604 arg_20          = dword ptr  28h
.text:00002604
.text:00002604                 push    ebp
.text:00002605                 mov     ebp, esp
.text:00002607                 sub     esp, 0A0h
.text:0000260D                 push    edi
.text:0000260E                 lea     edi, [ebp+var_A0]
.text:00002614                 mov     ecx, 28h ; '('
.text:00002619                 mov     eax, 0CCCCCCCCh
.text:0000261E                 rep stosd
.text:00002620                 mov     eax, dword ptr ds:___security_cookie
.text:00002625                 xor     eax, ebp
.text:00002627                 mov     [ebp+var_4], eax
.text:0000262A                 mov     eax, [ebp+arg_C]
.text:0000262D                 mov     ecx, ds:_x11_authnames[eax*4]
.text:00002634                 mov     [ebp+Str], ecx
.text:00002637                 mov     edx, [ebp+Str]
.text:0000263A                 push    edx             ; Str
.text:0000263B                 call    _strlen
.text:00002640                 add     esp, 4
.text:00002643                 mov     [ebp+var_5C], eax
.text:00002646                 mov     eax, [ebp+var_5C]
.text:00002649                 add     eax, 3
.text:0000264C                 and     eax, 0FFFFFFFCh
.text:0000264F                 mov     [ebp+var_60], eax
.text:00002652                 cmp     [ebp+arg_C], 1
.text:00002656                 jnz     short loc_2669
.text:00002658                 mov     ecx, [ebp+Src]
.text:0000265B                 mov     [ebp+var_58], ecx
.text:0000265E                 mov     edx, [ebp+arg_14]
.text:00002661                 mov     [ebp+Size], edx
.text:00002664                 jmp     loc_2761
.text:00002669 ; ---------------------------------------------------------------------------
.text:00002669
.text:00002669 loc_2669:                               ; CODE XREF: _x11_make_greeting+52j
.text:00002669                 cmp     [ebp+arg_C], 2
.text:0000266D                 jnz     loc_2754
.text:00002673                 cmp     [ebp+arg_14], 10h
.text:00002677                 jnz     loc_2754
.text:0000267D                 mov     [ebp+var_7C], 0
.text:00002684                 lea     eax, [ebp+var_7C]
.text:00002687                 push    eax             ; int
.text:00002688                 mov     ecx, [ebp+arg_18]
.text:0000268B                 push    ecx             ; Src
.text:0000268C                 call    _x11_parse_ip
.text:00002691                 add     esp, 8
.text:00002694                 lea     edx, [ebp+Dst]
.text:00002697                 mov     [ebp+var_58], edx
.text:0000269A                 mov     [ebp+Size], 18h
.text:000026A1                 mov     eax, [ebp+Size]
.text:000026A4                 push    eax             ; Size
.text:000026A5                 push    0               ; Val
.text:000026A7                 lea     ecx, [ebp+Dst]
.text:000026AA                 push    ecx             ; Dst
.text:000026AB                 call    _memset
.text:000026B0                 add     esp, 0Ch
.text:000026B3                 push    8               ; Size
.text:000026B5                 mov     edx, [ebp+Src]
.text:000026B8                 push    edx             ; Src
.text:000026B9                 lea     eax, [ebp+Dst]
.text:000026BC                 push    eax             ; Dst
.text:000026BD                 call    _memcpy
.text:000026C2                 add     esp, 0Ch
.text:000026C5                 mov     ecx, [ebp+var_7C]
.text:000026C8                 shr     ecx, 18h
.text:000026CB                 mov     [ebp+var_44], cl
.text:000026CE                 mov     edx, [ebp+var_7C]
.text:000026D1                 shr     edx, 10h
.text:000026D4                 mov     [ebp+var_43], dl
.text:000026D7                 mov     eax, [ebp+var_7C]
.text:000026DA                 shr     eax, 8
.text:000026DD                 mov     [ebp+var_42], al
.text:000026E0                 mov     cl, byte ptr [ebp+var_7C]
.text:000026E3                 mov     [ebp+var_41], cl
.text:000026E6                 mov     edx, [ebp+arg_1C]
.text:000026E9                 sar     edx, 8
.text:000026EC                 mov     [ebp+var_40], dl
.text:000026EF                 mov     al, byte ptr [ebp+arg_1C]
.text:000026F2                 mov     [ebp+var_3F], al
.text:000026F5                 push    0               ; Time
.text:000026F7                 call    _time
.text:000026FC                 add     esp, 4
.text:000026FF                 mov     [ebp+var_74], eax
.text:00002702                 mov     [ebp+var_70], edx
.text:00002705                 mov     eax, [ebp+var_74]
.text:00002708                 mov     edx, [ebp+var_70]
.text:0000270B                 mov     cl, 18h
.text:0000270D                 call    __allshr
.text:00002712                 mov     [ebp+var_3E], al
.text:00002715                 mov     eax, [ebp+var_74]
.text:00002718                 mov     edx, [ebp+var_70]
.text:0000271B                 mov     cl, 10h
.text:0000271D                 call    __allshr
.text:00002722                 mov     [ebp+var_3D], al
.text:00002725                 mov     eax, [ebp+var_74]
.text:00002728                 mov     edx, [ebp+var_70]
.text:0000272B                 mov     cl, 8
.text:0000272D                 call    __allshr
.text:00002732                 mov     [ebp+var_3C], al
.text:00002735                 mov     cl, byte ptr [ebp+var_74]
.text:00002738                 mov     [ebp+var_3B], cl
.text:0000273B                 mov     edx, [ebp+Size]
.text:0000273E                 push    edx
.text:0000273F                 lea     eax, [ebp+Dst]
.text:00002742                 push    eax
.text:00002743                 mov     ecx, [ebp+Src]
.text:00002746                 add     ecx, 9
.text:00002749                 push    ecx
.text:0000274A                 call    _des_encrypt_xdmauth
.text:0000274F                 add     esp, 0Ch
.text:00002752                 jmp     short loc_2761
.text:00002754 ; ---------------------------------------------------------------------------
.text:00002754
.text:00002754 loc_2754:                               ; CODE XREF: _x11_make_greeting+69j
.text:00002754                                         ; _x11_make_greeting+73j
.text:00002754                 lea     edx, [ebp+Dst]
.text:00002757                 mov     [ebp+var_58], edx
.text:0000275A                 mov     [ebp+Size], 0
.text:00002761
.text:00002761 loc_2761:                               ; CODE XREF: _x11_make_greeting+60j
.text:00002761                                         ; _x11_make_greeting+14Ej
.text:00002761                 mov     eax, [ebp+Size]
.text:00002764                 add     eax, 3
.text:00002767                 and     eax, 0FFFFFFFCh
.text:0000276A                 mov     [ebp+var_68], eax
.text:0000276D                 mov     ecx, [ebp+var_68]
.text:00002770                 mov     edx, [ebp+var_60]
.text:00002773                 lea     eax, [edx+ecx+0Ch]
.text:00002777                 mov     [ebp+var_6C], eax
.text:0000277A                 push    1
.text:0000277C                 mov     ecx, [ebp+var_6C]
.text:0000277F                 push    ecx
.text:00002780                 call    _safemalloc
.text:00002785                 add     esp, 8
.text:00002788                 mov     [ebp+var_8], eax
.text:0000278B                 mov     edx, [ebp+var_6C]
.text:0000278E                 push    edx             ; Size
.text:0000278F                 push    0               ; Val
.text:00002791                 mov     eax, [ebp+var_8]
.text:00002794                 push    eax             ; Dst
.text:00002795                 call    _memset
.text:0000279A                 add     esp, 0Ch
.text:0000279D                 mov     ecx, [ebp+var_8]
.text:000027A0                 mov     dl, byte ptr [ebp+arg_0]
.text:000027A3                 mov     [ecx], dl
.text:000027A5                 cmp     [ebp+arg_0], 42h ; 'B'
.text:000027A9                 jnz     short loc_27CC
.text:000027AB                 mov     eax, [ebp+arg_4]
.text:000027AE                 sar     eax, 8
.text:000027B1                 mov     ecx, [ebp+var_8]
.text:000027B4                 mov     [ecx+2], al
.text:000027B7                 mov     edx, [ebp+var_8]
.text:000027BA                 mov     al, byte ptr [ebp+arg_4]
.text:000027BD                 mov     [edx+3], al
.text:000027C0                 movzx   ecx, byte ptr [ebp+arg_4]
.text:000027C4                 mov     [ebp+var_84], ecx
.text:000027CA                 jmp     short loc_27FA
.text:000027CC ; ---------------------------------------------------------------------------
.text:000027CC
.text:000027CC loc_27CC:                               ; CODE XREF: _x11_make_greeting+1A5j
.text:000027CC                 mov     edx, [ebp+var_8]
.text:000027CF                 mov     al, byte ptr [ebp+arg_4]
.text:000027D2                 mov     [edx+2], al
.text:000027D5                 mov     ecx, [ebp+arg_4]
.text:000027D8                 sar     ecx, 8
.text:000027DB                 mov     [ebp+var_88], ecx
.text:000027E1                 mov     edx, [ebp+var_8]
.text:000027E4                 mov     al, byte ptr [ebp+var_88]
.text:000027EA                 mov     [edx+3], al
.text:000027ED                 movzx   ecx, byte ptr [ebp+var_88]
.text:000027F4                 mov     [ebp+var_84], ecx
.text:000027FA
.text:000027FA loc_27FA:                               ; CODE XREF: _x11_make_greeting+1C6j
.text:000027FA                 cmp     [ebp+arg_0], 42h ; 'B'
.text:000027FE                 jnz     short loc_2821
.text:00002800                 mov     edx, [ebp+arg_8]
.text:00002803                 sar     edx, 8
.text:00002806                 mov     eax, [ebp+var_8]
.text:00002809                 mov     [eax+4], dl
.text:0000280C                 mov     ecx, [ebp+var_8]
.text:0000280F                 mov     dl, byte ptr [ebp+arg_8]
.text:00002812                 mov     [ecx+5], dl
.text:00002815                 movzx   eax, byte ptr [ebp+arg_8]
.text:00002819                 mov     [ebp+var_8C], eax
.text:0000281F                 jmp     short loc_284F
.text:00002821 ; ---------------------------------------------------------------------------
.text:00002821
.text:00002821 loc_2821:                               ; CODE XREF: _x11_make_greeting+1FAj
.text:00002821                 mov     ecx, [ebp+var_8]
.text:00002824                 mov     dl, byte ptr [ebp+arg_8]
.text:00002827                 mov     [ecx+4], dl
.text:0000282A                 mov     eax, [ebp+arg_8]
.text:0000282D                 sar     eax, 8
.text:00002830                 mov     [ebp+var_90], eax
.text:00002836                 mov     ecx, [ebp+var_8]
.text:00002839                 mov     dl, byte ptr [ebp+var_90]
.text:0000283F                 mov     [ecx+5], dl
.text:00002842                 movzx   eax, byte ptr [ebp+var_90]
.text:00002849                 mov     [ebp+var_8C], eax
.text:0000284F
.text:0000284F loc_284F:                               ; CODE XREF: _x11_make_greeting+21Bj
.text:0000284F                 cmp     [ebp+arg_0], 42h ; 'B'
.text:00002853                 jnz     short loc_2876
.text:00002855                 mov     ecx, [ebp+var_5C]
.text:00002858                 sar     ecx, 8
.text:0000285B                 mov     edx, [ebp+var_8]
.text:0000285E                 mov     [edx+6], cl
.text:00002861                 mov     eax, [ebp+var_8]
.text:00002864                 mov     cl, byte ptr [ebp+var_5C]
.text:00002867                 mov     [eax+7], cl
.text:0000286A                 movzx   edx, byte ptr [ebp+var_5C]
.text:0000286E                 mov     [ebp+var_94], edx
.text:00002874                 jmp     short loc_28A4
.text:00002876 ; ---------------------------------------------------------------------------
.text:00002876
.text:00002876 loc_2876:                               ; CODE XREF: _x11_make_greeting+24Fj
.text:00002876                 mov     eax, [ebp+var_8]
.text:00002879                 mov     cl, byte ptr [ebp+var_5C]
.text:0000287C                 mov     [eax+6], cl
.text:0000287F                 mov     edx, [ebp+var_5C]
.text:00002882                 sar     edx, 8
.text:00002885                 mov     [ebp+var_98], edx
.text:0000288B                 mov     eax, [ebp+var_8]
.text:0000288E                 mov     cl, byte ptr [ebp+var_98]
.text:00002894                 mov     [eax+7], cl
.text:00002897                 movzx   edx, byte ptr [ebp+var_98]
.text:0000289E                 mov     [ebp+var_94], edx
.text:000028A4
.text:000028A4 loc_28A4:                               ; CODE XREF: _x11_make_greeting+270j
.text:000028A4                 cmp     [ebp+arg_0], 42h ; 'B'
.text:000028A8                 jnz     short loc_28CB
.text:000028AA                 mov     eax, [ebp+Size]
.text:000028AD                 sar     eax, 8
.text:000028B0                 mov     ecx, [ebp+var_8]
.text:000028B3                 mov     [ecx+8], al
.text:000028B6                 mov     edx, [ebp+var_8]
.text:000028B9                 mov     al, byte ptr [ebp+Size]
.text:000028BC                 mov     [edx+9], al
.text:000028BF                 movzx   ecx, byte ptr [ebp+Size]
.text:000028C3                 mov     [ebp+var_9C], ecx
.text:000028C9                 jmp     short loc_28F9
.text:000028CB ; ---------------------------------------------------------------------------
.text:000028CB
.text:000028CB loc_28CB:                               ; CODE XREF: _x11_make_greeting+2A4j
.text:000028CB                 mov     edx, [ebp+var_8]
.text:000028CE                 mov     al, byte ptr [ebp+Size]
.text:000028D1                 mov     [edx+8], al
.text:000028D4                 mov     ecx, [ebp+Size]
.text:000028D7                 sar     ecx, 8
.text:000028DA                 mov     [ebp+var_A0], ecx
.text:000028E0                 mov     edx, [ebp+var_8]
.text:000028E3                 mov     al, byte ptr [ebp+var_A0]
.text:000028E9                 mov     [edx+9], al
.text:000028EC                 movzx   ecx, byte ptr [ebp+var_A0]
.text:000028F3                 mov     [ebp+var_9C], ecx
.text:000028F9
.text:000028F9 loc_28F9:                               ; CODE XREF: _x11_make_greeting+2C5j
.text:000028F9                 mov     edx, [ebp+var_5C]
.text:000028FC                 push    edx             ; Size
.text:000028FD                 mov     eax, [ebp+Str]
.text:00002900                 push    eax             ; Src
.text:00002901                 mov     ecx, [ebp+var_8]
.text:00002904                 add     ecx, 0Ch
.text:00002907                 push    ecx             ; Dst
.text:00002908                 call    _memcpy
.text:0000290D                 add     esp, 0Ch
.text:00002910                 mov     edx, [ebp+Size]
.text:00002913                 push    edx             ; Size
.text:00002914                 mov     eax, [ebp+var_58]
.text:00002917                 push    eax             ; Src
.text:00002918                 mov     ecx, [ebp+var_60]
.text:0000291B                 mov     edx, [ebp+var_8]
.text:0000291E                 lea     eax, [edx+ecx+0Ch]
.text:00002922                 push    eax             ; Dst
.text:00002923                 call    _memcpy
.text:00002928                 add     esp, 0Ch
.text:0000292B                 push    40h ; '@'
.text:0000292D                 lea     ecx, [ebp+Dst]
.text:00002930                 push    ecx
.text:00002931                 call    _smemclr
.text:00002936                 add     esp, 8
.text:00002939                 mov     edx, [ebp+arg_20]
.text:0000293C                 mov     eax, [ebp+var_6C]
.text:0000293F                 mov     [edx], eax
.text:00002941                 mov     eax, [ebp+var_8]
.text:00002944                 push    edx
.text:00002945                 mov     ecx, ebp
.text:00002947                 push    eax
.text:00002948                 lea     edx, $LN18
.text:0000294E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002953                 pop     eax
.text:00002954                 pop     edx
.text:00002955                 pop     edi
.text:00002956                 mov     ecx, [ebp+var_4]
.text:00002959                 xor     ecx, ebp
.text:0000295B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002960                 add     esp, 0A0h
.text:00002966                 cmp     ebp, esp
.text:00002968                 call    __RTC_CheckEsp
.text:0000296D                 mov     esp, ebp
.text:0000296F                 pop     ebp
.text:00002970                 retn
.text:00002970 _x11_make_greeting endp
.text:00002970
.text:00002970 ; ---------------------------------------------------------------------------
.text:00002971                 align 4
.text:00002974 $LN18           dd 2                    ; DATA XREF: _x11_make_greeting+344o
.text:00002978                 dd offset $LN17
.text:0000297C $LN17           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00002978o
.text:00002984                 dd offset $LN15         ; "realauthdata"
.text:00002988                 dd 0FFFFFF84h, 4
.text:00002990                 dd offset $LN16         ; "peer_ip"
.text:00002994 $LN16           db 'peer_ip',0          ; DATA XREF: .text:00002990o
.text:0000299C $LN15           db 'realauthdata',0     ; DATA XREF: .text:00002984o
.text:000029A9                 align 4
.text:000029A9 _text           ends
.text:000029A9
.rtc$TMZ:000029AC ; ===========================================================================
.rtc$TMZ:000029AC
.rtc$TMZ:000029AC ; Segment type: Pure data
.rtc$TMZ:000029AC ; Segment permissions: Read
.rtc$TMZ:000029AC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000029AC                 assume cs:_rtc$TMZ
.rtc$TMZ:000029AC                 ;org 29ACh
.rtc$TMZ:000029AC ; COMDAT (pick any)
.rtc$TMZ:000029AC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000029AC _rtc$TMZ        ends
.rtc$TMZ:000029AC
.rtc$IMZ:000029B0 ; ===========================================================================
.rtc$IMZ:000029B0
.rtc$IMZ:000029B0 ; Segment type: Pure data
.rtc$IMZ:000029B0 ; Segment permissions: Read
.rtc$IMZ:000029B0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000029B0                 assume cs:_rtc$IMZ
.rtc$IMZ:000029B0                 ;org 29B0h
.rtc$IMZ:000029B0 ; COMDAT (pick any)
.rtc$IMZ:000029B0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000029B0 _rtc$IMZ        ends
.rtc$IMZ:000029B0
UNDEF:000029C0 ; ===========================================================================
UNDEF:000029C0
UNDEF:000029C0 ; Segment type: Externs
UNDEF:000029C0 ; UNDEF
UNDEF:000029C0                 extrn __RTC_Shutdown:near
UNDEF:000029C0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000029C4                 extrn __RTC_InitBase:near
UNDEF:000029C4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000029C8 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:000029C8                 extrn _sprintf:near     ; CODE XREF: _x11_invent_fake_auth+259p
UNDEF:000029C8                                         ; _x11_send+520p
UNDEF:000029CC                 extrn _dupstr:near      ; CODE XREF: _x11_invent_fake_auth+1F3p
UNDEF:000029CC                                         ; _x11_setup_display+5Fp ...
UNDEF:000029D0                 extrn _newtree234:near  ; CODE XREF: _x11_invent_fake_auth+1D8p
UNDEF:000029D4                 extrn _des_encrypt_xdmauth:near
UNDEF:000029D4                                         ; CODE XREF: _x11_invent_fake_auth+1AFp
UNDEF:000029D4                                         ; _x11_make_greeting+146p
UNDEF:000029D8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000029D8                 extrn _memcpy:near      ; CODE XREF: _x11_invent_fake_auth+194p
UNDEF:000029D8                                         ; _x11_get_auth_from_authfile+3DEp ...
UNDEF:000029DC ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000029DC                 extrn _memset:near      ; CODE XREF: _x11_invent_fake_auth+12Ap
UNDEF:000029DC                                         ; _x11_send_init_error+FCp ...
UNDEF:000029E0 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000029E0                 extrn __wassert:near    ; CODE XREF: _x11_invent_fake_auth+DBp
UNDEF:000029E0                                         ; _x11_authcmp+B6p ...
UNDEF:000029E4                 extrn _add234:near      ; CODE XREF: _x11_invent_fake_auth+A9p
UNDEF:000029E4                                         ; _x11_invent_fake_auth+1BFp ...
UNDEF:000029E8                 extrn _random_byte:near ; CODE XREF: _x11_invent_fake_auth+8Ep
UNDEF:000029E8                                         ; _x11_invent_fake_auth:loc_62Fp
UNDEF:000029EC                 extrn _safemalloc:near  ; CODE XREF: _x11_invent_fake_auth+1Fp
UNDEF:000029EC                                         ; _x11_invent_fake_auth+50p ...
UNDEF:000029F0                 extrn __RTC_CheckEsp:near
UNDEF:000029F0                                         ; CODE XREF: _x11_invent_fake_auth+289p
UNDEF:000029F0                                         ; _xdmseen_cmp+76p ...
UNDEF:000029F4 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000029F4                 extrn _memcmp:near      ; CODE XREF: _xdmseen_cmp+5Dp
UNDEF:000029F4                                         ; _x11_authcmp+93p ...
UNDEF:000029F8                 extrn _freetree234:near ; CODE XREF: _x11_free_fake_auth+9Ep
UNDEF:000029FC                 extrn _delpos234:near   ; CODE XREF: _x11_free_fake_auth+78p
UNDEF:000029FC                                         ; _x11_verify+2B8p
UNDEF:00002A00                 extrn _safefree:near    ; CODE XREF: _x11_free_fake_auth+31p
UNDEF:00002A00                                         ; _x11_free_fake_auth+40p ...
UNDEF:00002A04                 extrn _smemclr:near     ; CODE XREF: _x11_free_fake_auth+22p
UNDEF:00002A04                                         ; _x11_free_display+38p ...
UNDEF:00002A08                 extrn _platform_get_x11_auth:near
UNDEF:00002A08                                         ; CODE XREF: _x11_setup_display+4B6p
UNDEF:00002A0C                 extrn _dupprintf:near   ; CODE XREF: _x11_setup_display+478p
UNDEF:00002A0C                                         ; _x11_closing+32p ...
UNDEF:00002A10                 extrn _sk_new:near      ; CODE XREF: _x11_setup_display+3A8p
UNDEF:00002A14                 extrn _sk_addr_dup:near ; CODE XREF: _x11_setup_display+39Fp
UNDEF:00002A14                                         ; _x11_send+45Bp
UNDEF:00002A18                 extrn _platform_get_x11_unix_address:near
UNDEF:00002A18                                         ; CODE XREF: _x11_setup_display+366p
UNDEF:00002A18                                         ; _x11_setup_display+43Ep
UNDEF:00002A1C                 extrn _sk_address_is_local:near
UNDEF:00002A1C                                         ; CODE XREF: _x11_setup_display+34Dp
UNDEF:00002A1C                                         ; _x11_get_auth_from_authfile+3Cp
UNDEF:00002A20                 extrn _sk_addr_free:near ; CODE XREF: _x11_setup_display+301p
UNDEF:00002A20                                         ; _x11_setup_display+3F4p ...
UNDEF:00002A24                 extrn _sk_addr_error:near
UNDEF:00002A24                                         ; CODE XREF: _x11_setup_display+2E9p
UNDEF:00002A24                                         ; _x11_setup_display+375p
UNDEF:00002A28                 extrn _name_lookup:near ; CODE XREF: _x11_setup_display+2D4p
UNDEF:00002A2C                 extrn _platform_uses_x11_unix_by_default:near
UNDEF:00002A2C                                         ; DATA XREF: _x11_setup_display+244r
UNDEF:00002A30 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00002A30                 extrn _strcmp:near      ; CODE XREF: _x11_setup_display+1E7p
UNDEF:00002A30                                         ; _x11_setup_display+1FCp ...
UNDEF:00002A34 ; int __cdecl atoi(const char *Str)
UNDEF:00002A34                 extrn _atoi:near        ; CODE XREF: _x11_setup_display+134p
UNDEF:00002A34                                         ; _x11_setup_display+14Cp ...
UNDEF:00002A38 ; char *__cdecl strchr(const char *Str, int Val)
UNDEF:00002A38                 extrn _strchr:near      ; CODE XREF: _x11_setup_display+110p
UNDEF:00002A38                                         ; _x11_setup_display+181p
UNDEF:00002A3C                 extrn _host_strrchr:near ; CODE XREF: _x11_setup_display+CBp
UNDEF:00002A40                 extrn _platform_get_x_display:near
UNDEF:00002A40                                         ; CODE XREF: _x11_setup_display:loc_9CAp
UNDEF:00002A44 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002A44                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002A44                                         ; CODE XREF: _x11_setup_display+4CBp
UNDEF:00002A44                                         ; _x11_get_auth_from_authfile+433p ...
UNDEF:00002A48 ; int __cdecl fclose(FILE *File)
UNDEF:00002A48                 extrn _fclose:near      ; CODE XREF: _x11_get_auth_from_authfile+3F8p
UNDEF:00002A4C                 extrn _sk_addrcopy:near ; CODE XREF: _x11_get_auth_from_authfile+2C6p
UNDEF:00002A4C                                         ; _x11_get_auth_from_authfile+32Cp
UNDEF:00002A50                 extrn _sk_addrtype:near ; CODE XREF: _x11_get_auth_from_authfile+2AEp
UNDEF:00002A50                                         ; _x11_get_auth_from_authfile+311p
UNDEF:00002A54 ; int __cdecl fgetc(FILE *File)
UNDEF:00002A54                 extrn _fgetc:near       ; CODE XREF: _x11_get_auth_from_authfile+B5p
UNDEF:00002A54                                         ; _x11_get_auth_from_authfile+E0p ...
UNDEF:00002A58                 extrn _get_hostname:near
UNDEF:00002A58                                         ; CODE XREF: _x11_get_auth_from_authfile:loc_F9Ap
UNDEF:00002A5C ; FILE *__cdecl fopen(const char *Filename, const char *Mode)
UNDEF:00002A5C                 extrn _fopen:near       ; CODE XREF: _x11_get_auth_from_authfile+70p
UNDEF:00002A60                 extrn ___security_cookie:near
UNDEF:00002A60                                         ; DATA XREF: _x11_get_auth_from_authfile+1Cr
UNDEF:00002A60                                         ; _x11_send+1Dr ...
UNDEF:00002A64 ; __fastcall __security_check_cookie(x)
UNDEF:00002A64                 extrn @__security_check_cookie@4:near
UNDEF:00002A64                                         ; CODE XREF: _x11_get_auth_from_authfile+440p
UNDEF:00002A64                                         ; _x11_send+62Bp ...
UNDEF:00002A68                 extrn _sshfwd_write_eof:near ; CODE XREF: _x11_closing+7Ep
UNDEF:00002A68                                         ; _x11_send_init_error+13Cp ...
UNDEF:00002A6C                 extrn _sshfwd_unclean_close:near
UNDEF:00002A6C                                         ; CODE XREF: _x11_closing+64p
UNDEF:00002A70                 extrn _sshfwd_write:near ; CODE XREF: _x11_receive+21p
UNDEF:00002A70                                         ; _x11_send_init_error+12Dp
UNDEF:00002A74                 extrn _sshfwd_unthrottle:near ; CODE XREF: _x11_sent+1Cp
UNDEF:00002A78 ; size_t __cdecl strcspn(const char *Str, const char *Control)
UNDEF:00002A78                 extrn _strcspn:near     ; CODE XREF: _x11_get_screen_number+39p
UNDEF:00002A7C                 extrn _host_strcspn:near
UNDEF:00002A7C                                         ; CODE XREF: _x11_get_screen_number+14p
UNDEF:00002A80 ; size_t __cdecl strlen(const char *Str)
UNDEF:00002A80                 extrn _strlen:near      ; CODE XREF: _x11_send_init_error+3Fp
UNDEF:00002A80                                         ; _x11_dehexify+2Ap ...
UNDEF:00002A84                 extrn _appname:near     ; DATA XREF: _x11_send_init_error+24r
UNDEF:00002A88 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00002A88                 extrn _strcpy:near      ; CODE XREF: _x11_send+549p
UNDEF:00002A8C                 extrn _new_connection:near ; CODE XREF: _x11_send+464p
UNDEF:00002A90                 extrn _sshfwd_get_conf:near ; CODE XREF: _x11_send+428p
UNDEF:00002A94                 extrn _sshfwd_x11_is_local:near ; CODE XREF: _x11_send+40Dp
UNDEF:00002A98                 extrn _sshfwd_x11_sharing_handover:near
UNDEF:00002A98                                         ; CODE XREF: _x11_send+3F7p
UNDEF:00002A9C                 extrn __RTC_UninitUse:near ; CODE XREF: _x11_send+4EAp
UNDEF:00002AA0                 extrn _index234:near    ; CODE XREF: _x11_verify+276p
UNDEF:00002AA4 ; int __cdecl abs(int X)
UNDEF:00002AA4                 extrn _abs:near         ; CODE XREF: _x11_verify+1D4p
UNDEF:00002AA8                 extrn _des_decrypt_xdmauth:near ; CODE XREF: _x11_verify+D2p
UNDEF:00002AAC                 extrn _find234:near     ; CODE XREF: _x11_verify+7Bp
UNDEF:00002AB0 ; __time64_t __cdecl _time64(__time64_t *Time)
UNDEF:00002AB0                 extrn __time64:near     ; CODE XREF: _time+7p
UNDEF:00002AB4 ; int sscanf(const char *Src, const char *Format, ...)
UNDEF:00002AB4                 extrn _sscanf:near      ; CODE XREF: _x11_parse_ip+49p
UNDEF:00002AB4                                         ; _x11_dehexify+93p
UNDEF:00002AB8                 extrn __allshr:near     ; CODE XREF: _x11_make_greeting+109p
UNDEF:00002AB8                                         ; _x11_make_greeting+119p ...
UNDEF:00002AB8
UNDEF:00002AB8
UNDEF:00002AB8                 end