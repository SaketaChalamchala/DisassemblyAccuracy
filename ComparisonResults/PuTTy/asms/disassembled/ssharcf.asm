.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 10246F9FDDBA5547E345718CA884997B
.data:00000000 ; Input CRC32 : D4E13695
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\ssharcf.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG5953:                                ; DATA XREF: _arcfour_setkey+3Do
.data:00000000                 unicode 0, <..\..\..\ssharcf.c>,0
.data:00000026                 align 4
.data:00000028 $SG5954:                                ; DATA XREF: _arcfour_setkey+42o
.data:00000028                 unicode 0, <keybytes >
.data:00000028                 dw 3Ch
.data:00000028                 unicode 0, <= 256>,0
.data:00000048 $SG6000         db 'arcfour128',0       ; DATA XREF: .rdata:00000090o
.data:00000053                 align 4
.data:00000054 $SG6001         db 'Arcfour-128',0      ; DATA XREF: .rdata:000000A0o
.data:00000060 $SG6003         db 'arcfour256',0       ; DATA XREF: .rdata:000000BCo
.data:0000006B                 align 4
.data:0000006C $SG6004         db 'Arcfour-256',0      ; DATA XREF: .rdata:000000CCo
.data:0000006C _data           ends
.data:0000006C
.rdata:00000078 ; ===========================================================================
.rdata:00000078
.rdata:00000078 ; Segment type: Pure data
.rdata:00000078 ; Segment permissions: Read
.rdata:00000078 _rdata          segment dword public 'DATA' use32
.rdata:00000078                 assume cs:_rdata
.rdata:00000078                 ;org 78h
.rdata:00000078                 public _ssh_arcfour128_ssh2
.rdata:00000078 _ssh_arcfour128_ssh2 dd offset _arcfour_make_context
.rdata:00000078                                         ; DATA XREF: .rdata:000000D4o
.rdata:0000007C                 dd offset _arcfour_free_context
.rdata:00000080                 dd offset _arcfour_iv
.rdata:00000084                 dd offset _arcfour128_key
.rdata:00000088                 dd offset _arcfour_block
.rdata:0000008C                 dd offset _arcfour_block
.rdata:00000090                 dd offset $SG6000       ; "arcfour128"
.rdata:00000094                 db    1
.rdata:00000095                 db    0
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098                 db  80h ; Ã‡
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 db    0
.rdata:0000009D                 db    0
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0                 dd offset $SG6001       ; "Arcfour-128"
.rdata:000000A4                 public _ssh_arcfour256_ssh2
.rdata:000000A4 _ssh_arcfour256_ssh2 dd offset _arcfour_make_context
.rdata:000000A4                                         ; DATA XREF: .rdata:_arcfour_listo
.rdata:000000A8                 dd offset _arcfour_free_context
.rdata:000000AC                 dd offset _arcfour_iv
.rdata:000000B0                 dd offset _arcfour256_key
.rdata:000000B4                 dd offset _arcfour_block
.rdata:000000B8                 dd offset _arcfour_block
.rdata:000000BC                 dd offset $SG6003       ; "arcfour256"
.rdata:000000C0                 db    1
.rdata:000000C1                 db    0
.rdata:000000C2                 db    0
.rdata:000000C3                 db    0
.rdata:000000C4                 db    0
.rdata:000000C5                 db    1
.rdata:000000C6                 db    0
.rdata:000000C7                 db    0
.rdata:000000C8                 db    0
.rdata:000000C9                 db    0
.rdata:000000CA                 db    0
.rdata:000000CB                 db    0
.rdata:000000CC                 dd offset $SG6004       ; "Arcfour-256"
.rdata:000000D0 _arcfour_list   dd offset _ssh_arcfour256_ssh2 ; DATA XREF: .rdata:000000DCo
.rdata:000000D4                 dd offset _ssh_arcfour128_ssh2
.rdata:000000D8                 public _ssh2_arcfour
.rdata:000000D8 _ssh2_arcfour   db    2
.rdata:000000D9                 db    0
.rdata:000000DA                 db    0
.rdata:000000DB                 db    0
.rdata:000000DC                 dd offset _arcfour_list
.rdata:000000DC _rdata          ends
.rdata:000000DC
.text:000000E0 ; ===========================================================================
.text:000000E0
.text:000000E0 ; Segment type: Pure code
.text:000000E0 ; Segment permissions: Read/Execute
.text:000000E0 _text           segment para public 'CODE' use32
.text:000000E0                 assume cs:_text
.text:000000E0                 ;org 0E0h
.text:000000E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 _arcfour_block  proc near               ; CODE XREF: _arcfour_stir+3Dp
.text:000000E0                                         ; DATA XREF: .rdata:00000088o ...
.text:000000E0
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_8           = dword ptr -8
.text:000000E0 var_4           = dword ptr -4
.text:000000E0 arg_0           = dword ptr  8
.text:000000E0 arg_4           = dword ptr  0Ch
.text:000000E0 arg_8           = dword ptr  10h
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 sub     esp, 10h
.text:000000E6                 push    esi
.text:000000E7                 mov     eax, 0CCCCCCCCh
.text:000000EC                 mov     [ebp+var_10], eax
.text:000000EF                 mov     [ebp+var_C], eax
.text:000000F2                 mov     [ebp+var_8], eax
.text:000000F5                 mov     [ebp+var_4], eax
.text:000000F8                 mov     eax, [ebp+arg_0]
.text:000000FB                 mov     [ebp+var_4], eax
.text:000000FE                 mov     ecx, [ebp+var_4]
.text:00000101                 add     ecx, 2
.text:00000104                 mov     [ebp+var_10], ecx
.text:00000107                 mov     edx, [ebp+var_4]
.text:0000010A                 mov     al, [edx]
.text:0000010C                 mov     byte ptr [ebp+var_C+2], al
.text:0000010F                 mov     ecx, [ebp+var_4]
.text:00000112                 mov     dl, [ecx+1]
.text:00000115                 mov     byte ptr [ebp+var_C+1], dl
.text:00000118                 mov     [ebp+var_8], 0
.text:0000011F                 jmp     short loc_12A
.text:00000121 ; ---------------------------------------------------------------------------
.text:00000121
.text:00000121 loc_121:                                ; CODE XREF: _arcfour_block+E5j
.text:00000121                 mov     eax, [ebp+var_8]
.text:00000124                 add     eax, 1
.text:00000127                 mov     [ebp+var_8], eax
.text:0000012A
.text:0000012A loc_12A:                                ; CODE XREF: _arcfour_block+3Fj
.text:0000012A                 mov     ecx, [ebp+var_8]
.text:0000012D                 cmp     ecx, [ebp+arg_8]
.text:00000130                 jge     loc_1CA
.text:00000136                 movzx   edx, byte ptr [ebp+var_C+2]
.text:0000013A                 add     edx, 1
.text:0000013D                 and     edx, 0FFh
.text:00000143                 mov     byte ptr [ebp+var_C+2], dl
.text:00000146                 movzx   eax, byte ptr [ebp+var_C+1]
.text:0000014A                 movzx   ecx, byte ptr [ebp+var_C+2]
.text:0000014E                 mov     edx, [ebp+var_10]
.text:00000151                 movzx   ecx, byte ptr [edx+ecx]
.text:00000155                 add     eax, ecx
.text:00000157                 and     eax, 0FFh
.text:0000015C                 mov     byte ptr [ebp+var_C+1], al
.text:0000015F                 movzx   edx, byte ptr [ebp+var_C+2]
.text:00000163                 mov     eax, [ebp+var_10]
.text:00000166                 mov     cl, [eax+edx]
.text:00000169                 mov     byte ptr [ebp+var_C+3], cl
.text:0000016C                 movzx   edx, byte ptr [ebp+var_C+1]
.text:00000170                 movzx   eax, byte ptr [ebp+var_C+2]
.text:00000174                 mov     ecx, [ebp+var_10]
.text:00000177                 mov     esi, [ebp+var_10]
.text:0000017A                 mov     dl, [esi+edx]
.text:0000017D                 mov     [ecx+eax], dl
.text:00000180                 movzx   eax, byte ptr [ebp+var_C+1]
.text:00000184                 mov     ecx, [ebp+var_10]
.text:00000187                 mov     dl, byte ptr [ebp+var_C+3]
.text:0000018A                 mov     [ecx+eax], dl
.text:0000018D                 movzx   eax, byte ptr [ebp+var_C+2]
.text:00000191                 mov     ecx, [ebp+var_10]
.text:00000194                 movzx   edx, byte ptr [ecx+eax]
.text:00000198                 movzx   eax, byte ptr [ebp+var_C+1]
.text:0000019C                 mov     ecx, [ebp+var_10]
.text:0000019F                 movzx   eax, byte ptr [ecx+eax]
.text:000001A3                 add     edx, eax
.text:000001A5                 and     edx, 0FFh
.text:000001AB                 mov     ecx, [ebp+var_10]
.text:000001AE                 movzx   edx, byte ptr [ecx+edx]
.text:000001B2                 mov     eax, [ebp+arg_4]
.text:000001B5                 add     eax, [ebp+var_8]
.text:000001B8                 movzx   ecx, byte ptr [eax]
.text:000001BB                 xor     ecx, edx
.text:000001BD                 mov     edx, [ebp+arg_4]
.text:000001C0                 add     edx, [ebp+var_8]
.text:000001C3                 mov     [edx], cl
.text:000001C5                 jmp     loc_121
.text:000001CA ; ---------------------------------------------------------------------------
.text:000001CA
.text:000001CA loc_1CA:                                ; CODE XREF: _arcfour_block+50j
.text:000001CA                 mov     eax, [ebp+var_4]
.text:000001CD                 mov     cl, byte ptr [ebp+var_C+2]
.text:000001D0                 mov     [eax], cl
.text:000001D2                 mov     edx, [ebp+var_4]
.text:000001D5                 mov     al, byte ptr [ebp+var_C+1]
.text:000001D8                 mov     [edx+1], al
.text:000001DB                 pop     esi
.text:000001DC                 mov     esp, ebp
.text:000001DE                 pop     ebp
.text:000001DF                 retn
.text:000001DF _arcfour_block  endp
.text:000001DF
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 _arcfour_make_context proc near         ; DATA XREF: .rdata:_ssh_arcfour128_ssh2o
.text:000001E0                                         ; .rdata:_ssh_arcfour256_ssh2o
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 push    102h
.text:000001E8                 push    1
.text:000001EA                 call    _safemalloc
.text:000001EF                 add     esp, 8
.text:000001F2                 cmp     ebp, esp
.text:000001F4                 call    __RTC_CheckEsp
.text:000001F9                 pop     ebp
.text:000001FA                 retn
.text:000001FA _arcfour_make_context endp
.text:000001FA
.text:000001FA ; ---------------------------------------------------------------------------
.text:000001FB                 align 10h
.text:00000200
.text:00000200 ; =============== S U B R O U T I N E =======================================
.text:00000200
.text:00000200 ; Attributes: bp-based frame
.text:00000200
.text:00000200 _arcfour_free_context proc near         ; DATA XREF: .rdata:0000007Co
.text:00000200                                         ; .rdata:000000A8o
.text:00000200
.text:00000200 arg_0           = dword ptr  8
.text:00000200
.text:00000200                 push    ebp
.text:00000201                 mov     ebp, esp
.text:00000203                 mov     eax, [ebp+arg_0]
.text:00000206                 push    eax
.text:00000207                 call    _safefree
.text:0000020C                 add     esp, 4
.text:0000020F                 cmp     ebp, esp
.text:00000211                 call    __RTC_CheckEsp
.text:00000216                 pop     ebp
.text:00000217                 retn
.text:00000217 _arcfour_free_context endp
.text:00000217
.text:00000217 ; ---------------------------------------------------------------------------
.text:00000218                 align 10h
.text:00000220
.text:00000220 ; =============== S U B R O U T I N E =======================================
.text:00000220
.text:00000220 ; Attributes: bp-based frame
.text:00000220
.text:00000220 _arcfour128_key proc near               ; DATA XREF: .rdata:00000084o
.text:00000220
.text:00000220 var_4           = dword ptr -4
.text:00000220 arg_0           = dword ptr  8
.text:00000220 arg_4           = dword ptr  0Ch
.text:00000220
.text:00000220                 push    ebp
.text:00000221                 mov     ebp, esp
.text:00000223                 push    ecx
.text:00000224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000022B                 mov     eax, [ebp+arg_0]
.text:0000022E                 mov     [ebp+var_4], eax
.text:00000231                 push    10h
.text:00000233                 mov     ecx, [ebp+arg_4]
.text:00000236                 push    ecx
.text:00000237                 mov     edx, [ebp+var_4]
.text:0000023A                 push    edx
.text:0000023B                 call    _arcfour_setkey
.text:00000240                 add     esp, 0Ch
.text:00000243                 mov     eax, [ebp+var_4]
.text:00000246                 push    eax
.text:00000247                 call    _arcfour_stir
.text:0000024C                 add     esp, 4
.text:0000024F                 add     esp, 4
.text:00000252                 cmp     ebp, esp
.text:00000254                 call    __RTC_CheckEsp
.text:00000259                 mov     esp, ebp
.text:0000025B                 pop     ebp
.text:0000025C                 retn
.text:0000025C _arcfour128_key endp
.text:0000025C
.text:0000025C ; ---------------------------------------------------------------------------
.text:0000025D                 align 10h
.text:00000260
.text:00000260 ; =============== S U B R O U T I N E =======================================
.text:00000260
.text:00000260 ; Attributes: bp-based frame
.text:00000260
.text:00000260 _arcfour_setkey proc near               ; CODE XREF: _arcfour128_key+1Bp
.text:00000260                                         ; _arcfour256_key+1Bp
.text:00000260
.text:00000260 var_11C         = dword ptr -11Ch
.text:00000260 var_118         = dword ptr -118h
.text:00000260 var_114         = dword ptr -114h
.text:00000260 var_10C         = byte ptr -10Ch
.text:00000260 var_5           = byte ptr -5
.text:00000260 var_4           = dword ptr -4
.text:00000260 arg_0           = dword ptr  8
.text:00000260 arg_4           = dword ptr  0Ch
.text:00000260 arg_8           = dword ptr  10h
.text:00000260
.text:00000260                 push    ebp
.text:00000261                 mov     ebp, esp
.text:00000263                 sub     esp, 11Ch
.text:00000269                 push    edi
.text:0000026A                 lea     edi, [ebp+var_11C]
.text:00000270                 mov     ecx, 47h ; 'G'
.text:00000275                 mov     eax, 0CCCCCCCCh
.text:0000027A                 rep stosd
.text:0000027C                 mov     eax, dword ptr ds:___security_cookie
.text:00000281                 xor     eax, ebp
.text:00000283                 mov     [ebp+var_4], eax
.text:00000286                 mov     eax, [ebp+arg_0]
.text:00000289                 add     eax, 2
.text:0000028C                 mov     [ebp+var_114], eax
.text:00000292                 cmp     [ebp+arg_8], 100h
.text:00000299                 jbe     short loc_2AF
.text:0000029B                 push    26h ; '&'
.text:0000029D                 push    offset $SG5953  ; "..\\..\\..\\ssharcf.c"
.text:000002A2                 push    offset $SG5954  ; "keybytes <= 256"
.text:000002A7                 call    __wassert
.text:000002AC ; ---------------------------------------------------------------------------
.text:000002AC                 add     esp, 0Ch
.text:000002AF
.text:000002AF loc_2AF:                                ; CODE XREF: _arcfour_setkey+39j
.text:000002AF                 mov     edx, [ebp+arg_0]
.text:000002B2                 mov     byte ptr [edx+1], 0
.text:000002B6                 mov     eax, [ebp+arg_0]
.text:000002B9                 mov     byte ptr [eax], 0
.text:000002BC                 mov     [ebp+var_118], 0
.text:000002C6                 jmp     short loc_2D7
.text:000002C8 ; ---------------------------------------------------------------------------
.text:000002C8
.text:000002C8 loc_2C8:                                ; CODE XREF: _arcfour_setkey+B5j
.text:000002C8                 mov     ecx, [ebp+var_118]
.text:000002CE                 add     ecx, 1
.text:000002D1                 mov     [ebp+var_118], ecx
.text:000002D7
.text:000002D7 loc_2D7:                                ; CODE XREF: _arcfour_setkey+66j
.text:000002D7                 cmp     [ebp+var_118], 100h
.text:000002E1                 jnb     short loc_317
.text:000002E3                 mov     edx, [ebp+var_114]
.text:000002E9                 add     edx, [ebp+var_118]
.text:000002EF                 mov     al, byte ptr [ebp+var_118]
.text:000002F5                 mov     [edx], al
.text:000002F7                 mov     eax, [ebp+var_118]
.text:000002FD                 xor     edx, edx
.text:000002FF                 div     [ebp+arg_8]
.text:00000302                 mov     ecx, [ebp+var_118]
.text:00000308                 mov     eax, [ebp+arg_4]
.text:0000030B                 mov     dl, [eax+edx]
.text:0000030E                 mov     [ebp+ecx+var_10C], dl
.text:00000315                 jmp     short loc_2C8
.text:00000317 ; ---------------------------------------------------------------------------
.text:00000317
.text:00000317 loc_317:                                ; CODE XREF: _arcfour_setkey+81j
.text:00000317                 mov     [ebp+var_11C], 0
.text:00000321                 mov     [ebp+var_118], 0
.text:0000032B                 jmp     short loc_33C
.text:0000032D ; ---------------------------------------------------------------------------
.text:0000032D
.text:0000032D loc_32D:                                ; CODE XREF: _arcfour_setkey+157j
.text:0000032D                 mov     eax, [ebp+var_118]
.text:00000333                 add     eax, 1
.text:00000336                 mov     [ebp+var_118], eax
.text:0000033C
.text:0000033C loc_33C:                                ; CODE XREF: _arcfour_setkey+CBj
.text:0000033C                 cmp     [ebp+var_118], 100h
.text:00000346                 jnb     short loc_3BC
.text:00000348                 mov     ecx, [ebp+var_114]
.text:0000034E                 add     ecx, [ebp+var_118]
.text:00000354                 movzx   edx, byte ptr [ecx]
.text:00000357                 add     edx, [ebp+var_11C]
.text:0000035D                 mov     eax, [ebp+var_118]
.text:00000363                 movzx   ecx, [ebp+eax+var_10C]
.text:0000036B                 add     edx, ecx
.text:0000036D                 and     edx, 0FFh
.text:00000373                 mov     [ebp+var_11C], edx
.text:00000379                 mov     edx, [ebp+var_114]
.text:0000037F                 add     edx, [ebp+var_118]
.text:00000385                 mov     al, [edx]
.text:00000387                 mov     [ebp+var_5], al
.text:0000038A                 mov     ecx, [ebp+var_114]
.text:00000390                 add     ecx, [ebp+var_118]
.text:00000396                 mov     edx, [ebp+var_114]
.text:0000039C                 add     edx, [ebp+var_11C]
.text:000003A2                 mov     al, [edx]
.text:000003A4                 mov     [ecx], al
.text:000003A6                 mov     ecx, [ebp+var_114]
.text:000003AC                 add     ecx, [ebp+var_11C]
.text:000003B2                 mov     dl, [ebp+var_5]
.text:000003B5                 mov     [ecx], dl
.text:000003B7                 jmp     loc_32D
.text:000003BC ; ---------------------------------------------------------------------------
.text:000003BC
.text:000003BC loc_3BC:                                ; CODE XREF: _arcfour_setkey+E6j
.text:000003BC                 push    edx
.text:000003BD                 mov     ecx, ebp
.text:000003BF                 push    eax
.text:000003C0                 lea     edx, $LN12
.text:000003C6                 call    @_RTC_CheckStackVars@8
.text:000003CB                 pop     eax
.text:000003CC                 pop     edx
.text:000003CD                 pop     edi
.text:000003CE                 mov     ecx, [ebp+var_4]
.text:000003D1                 xor     ecx, ebp
.text:000003D3                 call    @__security_check_cookie@4
.text:000003D8                 add     esp, 11Ch
.text:000003DE                 cmp     ebp, esp
.text:000003E0                 call    __RTC_CheckEsp
.text:000003E5                 mov     esp, ebp
.text:000003E7                 pop     ebp
.text:000003E8                 retn
.text:000003E8 _arcfour_setkey endp
.text:000003E8
.text:000003E8 ; ---------------------------------------------------------------------------
.text:000003E9                 align 4
.text:000003EC $LN12           dd 1                    ; DATA XREF: _arcfour_setkey+160o
.text:000003F0                 dd offset $LN11
.text:000003F4 $LN11           dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:000003F0o
.text:000003FC                 dd offset $LN10
.text:00000400 $LN10           dd 0CCCC006Bh, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000003FCo
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 _arcfour_stir   proc near               ; CODE XREF: _arcfour128_key+27p
.text:00000410                                         ; _arcfour256_key+27p
.text:00000410
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = dword ptr  8
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 push    ecx
.text:00000414                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000041B                 push    1
.text:0000041D                 push    600h
.text:00000422                 call    _safemalloc
.text:00000427                 add     esp, 8
.text:0000042A                 mov     [ebp+var_4], eax
.text:0000042D                 push    600h            ; size_t
.text:00000432                 push    0               ; int
.text:00000434                 mov     eax, [ebp+var_4]
.text:00000437                 push    eax             ; void *
.text:00000438                 call    _memset
.text:0000043D                 add     esp, 0Ch
.text:00000440                 push    600h
.text:00000445                 mov     ecx, [ebp+var_4]
.text:00000448                 push    ecx
.text:00000449                 mov     edx, [ebp+arg_0]
.text:0000044C                 push    edx
.text:0000044D                 call    _arcfour_block
.text:00000452                 add     esp, 0Ch
.text:00000455                 push    600h
.text:0000045A                 mov     eax, [ebp+var_4]
.text:0000045D                 push    eax
.text:0000045E                 call    _smemclr
.text:00000463                 add     esp, 8
.text:00000466                 mov     ecx, [ebp+var_4]
.text:00000469                 push    ecx
.text:0000046A                 call    _safefree
.text:0000046F                 add     esp, 4
.text:00000472                 add     esp, 4
.text:00000475                 cmp     ebp, esp
.text:00000477                 call    __RTC_CheckEsp
.text:0000047C                 mov     esp, ebp
.text:0000047E                 pop     ebp
.text:0000047F                 retn
.text:0000047F _arcfour_stir   endp
.text:0000047F
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 _arcfour256_key proc near               ; DATA XREF: .rdata:000000B0o
.text:00000480
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480 arg_4           = dword ptr  0Ch
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 push    ecx
.text:00000484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048B                 mov     eax, [ebp+arg_0]
.text:0000048E                 mov     [ebp+var_4], eax
.text:00000491                 push    20h ; ' '
.text:00000493                 mov     ecx, [ebp+arg_4]
.text:00000496                 push    ecx
.text:00000497                 mov     edx, [ebp+var_4]
.text:0000049A                 push    edx
.text:0000049B                 call    _arcfour_setkey
.text:000004A0                 add     esp, 0Ch
.text:000004A3                 mov     eax, [ebp+var_4]
.text:000004A6                 push    eax
.text:000004A7                 call    _arcfour_stir
.text:000004AC                 add     esp, 4
.text:000004AF                 add     esp, 4
.text:000004B2                 cmp     ebp, esp
.text:000004B4                 call    __RTC_CheckEsp
.text:000004B9                 mov     esp, ebp
.text:000004BB                 pop     ebp
.text:000004BC                 retn
.text:000004BC _arcfour256_key endp
.text:000004BC
.text:000004BC ; ---------------------------------------------------------------------------
.text:000004BD                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 _arcfour_iv     proc near               ; DATA XREF: .rdata:00000080o
.text:000004C0                                         ; .rdata:000000ACo
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 pop     ebp
.text:000004C4                 retn
.text:000004C4 _arcfour_iv     endp
.text:000004C4
.text:000004C4 ; ---------------------------------------------------------------------------
.text:000004C5                 align 4
.text:000004C5 _text           ends
.text:000004C5
.rtc$TMZ:000004C8 ; ===========================================================================
.rtc$TMZ:000004C8
.rtc$TMZ:000004C8 ; Segment type: Pure data
.rtc$TMZ:000004C8 ; Segment permissions: Read
.rtc$TMZ:000004C8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000004C8                 assume cs:_rtc$TMZ
.rtc$TMZ:000004C8                 ;org 4C8h
.rtc$TMZ:000004C8 ; COMDAT (pick any)
.rtc$TMZ:000004C8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000004C8 _rtc$TMZ        ends
.rtc$TMZ:000004C8
.rtc$IMZ:000004CC ; ===========================================================================
.rtc$IMZ:000004CC
.rtc$IMZ:000004CC ; Segment type: Pure data
.rtc$IMZ:000004CC ; Segment permissions: Read
.rtc$IMZ:000004CC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000004CC                 assume cs:_rtc$IMZ
.rtc$IMZ:000004CC                 ;org 4CCh
.rtc$IMZ:000004CC ; COMDAT (pick any)
.rtc$IMZ:000004CC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000004CC _rtc$IMZ        ends
.rtc$IMZ:000004CC
UNDEF:000004D0 ; ===========================================================================
UNDEF:000004D0
UNDEF:000004D0 ; Segment type: Externs
UNDEF:000004D0 ; UNDEF
UNDEF:000004D0                 extrn __RTC_Shutdown:near
UNDEF:000004D0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000004D4                 extrn __RTC_InitBase:near
UNDEF:000004D4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000004D8                 extrn _safemalloc:near  ; CODE XREF: _arcfour_make_context+Ap
UNDEF:000004D8                                         ; _arcfour_stir+12p
UNDEF:000004DC                 extrn __RTC_CheckEsp:near
UNDEF:000004DC                                         ; CODE XREF: _arcfour_make_context+14p
UNDEF:000004DC                                         ; _arcfour_free_context+11p ...
UNDEF:000004E0                 extrn _safefree:near    ; CODE XREF: _arcfour_free_context+7p
UNDEF:000004E0                                         ; _arcfour_stir+5Ap
UNDEF:000004E4                 extrn __wassert:near    ; CODE XREF: _arcfour_setkey+47p
UNDEF:000004E8                 extrn ___security_cookie:near
UNDEF:000004E8                                         ; DATA XREF: _arcfour_setkey+1Cr
UNDEF:000004EC                 extrn @__security_check_cookie@4:near
UNDEF:000004EC                                         ; CODE XREF: _arcfour_setkey+173p
UNDEF:000004F0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000004F0                                         ; CODE XREF: _arcfour_setkey+166p
UNDEF:000004F4                 extrn _smemclr:near     ; CODE XREF: _arcfour_stir+4Ep
UNDEF:000004F8 ; void *__cdecl memset(void *, int, size_t)
UNDEF:000004F8                 extrn _memset:near      ; CODE XREF: _arcfour_stir+28p
UNDEF:000004F8
UNDEF:000004F8
UNDEF:000004F8                 end