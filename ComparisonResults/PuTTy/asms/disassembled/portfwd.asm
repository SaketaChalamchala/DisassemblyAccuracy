.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 3285C16730247B35F48342B04205E9EF
.data:00000000 ; Input CRC32 : B561C1A9
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\portfwd.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG87209        db '%d.%d.%d.%d',0      ; DATA XREF: _pfd_receive+33Do
.data:0000000C $SG87249        db '%d.%d.%d.%d',0      ; DATA XREF: _pfd_receive+5C4o
.data:00000018 $SG87261        db 'forwarding',0       ; DATA XREF: _pfd_receive:loc_859o
.data:00000023                 align 4
.data:00000024 $SG87332        db 'forwarding',0       ; DATA XREF: _pfl_accepting:loc_D9Fo
.data:0000002F                 align 10h
.data:0000002F _data           ends
.data:0000002F
.rdata:00000030 ; ===========================================================================
.rdata:00000030
.rdata:00000030 ; Segment type: Pure data
.rdata:00000030 ; Segment permissions: Read
.rdata:00000030 _rdata          segment dword public 'DATA' use32
.rdata:00000030                 assume cs:_rdata
.rdata:00000030                 ;org 30h
.rdata:00000030 ; `pfd_connect'::`2'::fn_table
.rdata:00000030 ?fn_table@?1??pfd_connect@@9@9 dd offset _pfd_log
.rdata:00000030                                         ; DATA XREF: _pfd_connect+9Co
.rdata:00000034                 dd offset _pfd_closing
.rdata:00000038                 dd offset _pfd_receive
.rdata:0000003C                 dd offset _pfd_sent
.rdata:00000040                 db    0
.rdata:00000041                 db    0
.rdata:00000042                 db    0
.rdata:00000043                 db    0
.rdata:00000044 ; `pfl_accepting'::`2'::fn_table
.rdata:00000044 ?fn_table@?1??pfl_accepting@@9@9 dd offset _pfd_log
.rdata:00000044                                         ; DATA XREF: _pfl_accepting+29o
.rdata:00000048                 dd offset _pfd_closing
.rdata:0000004C                 dd offset _pfd_receive
.rdata:00000050                 dd offset _pfd_sent
.rdata:00000054                 align 8
.rdata:00000058 ; `pfl_listen'::`2'::fn_table
.rdata:00000058 ?fn_table@?1??pfl_listen@@9@9 dd offset _pfl_log
.rdata:00000058                                         ; DATA XREF: _pfl_listen+31o
.rdata:0000005C                 dd offset _pfl_closing
.rdata:00000060                 db    0
.rdata:00000061                 db    0
.rdata:00000062                 db    0
.rdata:00000063                 db    0
.rdata:00000064                 db    0
.rdata:00000065                 db    0
.rdata:00000066                 db    0
.rdata:00000067                 db    0
.rdata:00000068                 dd offset _pfl_accepting
.rdata:00000068 _rdata          ends
.rdata:00000068
.text:0000006C ; ===========================================================================
.text:0000006C
.text:0000006C ; Segment type: Pure code
.text:0000006C ; Segment permissions: Read/Execute
.text:0000006C _text           segment para public 'CODE' use32
.text:0000006C                 assume cs:_text
.text:0000006C                 ;org 6Ch
.text:0000006C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000006C
.text:0000006C ; =============== S U B R O U T I N E =======================================
.text:0000006C
.text:0000006C ; Attributes: bp-based frame
.text:0000006C
.text:0000006C _pfd_log        proc near               ; DATA XREF: .rdata:`pfd_connect'::`2'::fn_tableo
.text:0000006C                                         ; .rdata:`pfl_accepting'::`2'::fn_tableo
.text:0000006C                 push    ebp
.text:0000006D                 mov     ebp, esp
.text:0000006F                 pop     ebp
.text:00000070                 retn
.text:00000070 _pfd_log        endp
.text:00000070
.text:00000070 ; ---------------------------------------------------------------------------
.text:00000071                 db 0Bh dup(0CCh)
.text:0000007C
.text:0000007C ; =============== S U B R O U T I N E =======================================
.text:0000007C
.text:0000007C ; Attributes: bp-based frame
.text:0000007C
.text:0000007C _pfl_log        proc near               ; DATA XREF: .rdata:`pfl_listen'::`2'::fn_tableo
.text:0000007C                 push    ebp
.text:0000007D                 mov     ebp, esp
.text:0000007F                 pop     ebp
.text:00000080                 retn
.text:00000080 _pfl_log        endp
.text:00000080
.text:00000080 ; ---------------------------------------------------------------------------
.text:00000081                 db 0Bh dup(0CCh)
.text:0000008C
.text:0000008C ; =============== S U B R O U T I N E =======================================
.text:0000008C
.text:0000008C ; Attributes: bp-based frame
.text:0000008C
.text:0000008C _pfd_closing    proc near               ; DATA XREF: .rdata:00000034o
.text:0000008C                                         ; .rdata:00000048o
.text:0000008C
.text:0000008C var_4           = dword ptr -4
.text:0000008C arg_0           = dword ptr  8
.text:0000008C arg_4           = dword ptr  0Ch
.text:0000008C
.text:0000008C                 push    ebp
.text:0000008D                 mov     ebp, esp
.text:0000008F                 push    ecx
.text:00000090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000097                 mov     eax, [ebp+arg_0]
.text:0000009A                 mov     [ebp+var_4], eax
.text:0000009D                 cmp     [ebp+arg_4], 0
.text:000000A1                 jz      short loc_CF
.text:000000A3                 mov     ecx, [ebp+var_4]
.text:000000A6                 cmp     dword ptr [ecx+4], 0
.text:000000AA                 jz      short loc_C1
.text:000000AC                 mov     edx, [ebp+arg_4]
.text:000000AF                 push    edx
.text:000000B0                 mov     eax, [ebp+var_4]
.text:000000B3                 mov     ecx, [eax+4]
.text:000000B6                 push    ecx
.text:000000B7                 call    _sshfwd_unclean_close
.text:000000BC                 add     esp, 8
.text:000000BF                 jmp     short loc_CD
.text:000000C1 ; ---------------------------------------------------------------------------
.text:000000C1
.text:000000C1 loc_C1:                                 ; CODE XREF: _pfd_closing+1Ej
.text:000000C1                 mov     edx, [ebp+var_4]
.text:000000C4                 push    edx
.text:000000C5                 call    _pfd_close
.text:000000CA                 add     esp, 4
.text:000000CD
.text:000000CD loc_CD:                                 ; CODE XREF: _pfd_closing+33j
.text:000000CD                 jmp     short loc_E7
.text:000000CF ; ---------------------------------------------------------------------------
.text:000000CF
.text:000000CF loc_CF:                                 ; CODE XREF: _pfd_closing+15j
.text:000000CF                 mov     eax, [ebp+var_4]
.text:000000D2                 cmp     dword ptr [eax+4], 0
.text:000000D6                 jz      short loc_E7
.text:000000D8                 mov     ecx, [ebp+var_4]
.text:000000DB                 mov     edx, [ecx+4]
.text:000000DE                 push    edx
.text:000000DF                 call    _sshfwd_write_eof
.text:000000E4                 add     esp, 4
.text:000000E7
.text:000000E7 loc_E7:                                 ; CODE XREF: _pfd_closing:loc_CDj
.text:000000E7                                         ; _pfd_closing+4Aj
.text:000000E7                 mov     eax, 1
.text:000000EC                 add     esp, 4
.text:000000EF                 cmp     ebp, esp
.text:000000F1                 call    __RTC_CheckEsp
.text:000000F6                 mov     esp, ebp
.text:000000F8                 pop     ebp
.text:000000F9                 retn
.text:000000F9 _pfd_closing    endp
.text:000000F9
.text:000000F9 ; ---------------------------------------------------------------------------
.text:000000FA                 align 4
.text:000000FC
.text:000000FC ; =============== S U B R O U T I N E =======================================
.text:000000FC
.text:000000FC ; Attributes: bp-based frame
.text:000000FC
.text:000000FC _pfl_closing    proc near               ; DATA XREF: .rdata:0000005Co
.text:000000FC
.text:000000FC var_4           = dword ptr -4
.text:000000FC arg_0           = dword ptr  8
.text:000000FC
.text:000000FC                 push    ebp
.text:000000FD                 mov     ebp, esp
.text:000000FF                 push    ecx
.text:00000100                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000107                 mov     eax, [ebp+arg_0]
.text:0000010A                 mov     [ebp+var_4], eax
.text:0000010D                 mov     ecx, [ebp+var_4]
.text:00000110                 push    ecx
.text:00000111                 call    _pfl_terminate
.text:00000116                 add     esp, 4
.text:00000119                 mov     eax, 1
.text:0000011E                 add     esp, 4
.text:00000121                 cmp     ebp, esp
.text:00000123                 call    __RTC_CheckEsp
.text:00000128                 mov     esp, ebp
.text:0000012A                 pop     ebp
.text:0000012B                 retn
.text:0000012B _pfl_closing    endp
.text:0000012B
.text:0000012C
.text:0000012C ; =============== S U B R O U T I N E =======================================
.text:0000012C
.text:0000012C ; Attributes: bp-based frame
.text:0000012C
.text:0000012C ; int __cdecl pfd_receive(int, int, void *Src, size_t)
.text:0000012C _pfd_receive    proc near               ; DATA XREF: .rdata:00000038o
.text:0000012C                                         ; .rdata:0000004Co
.text:0000012C
.text:0000012C var_50          = dword ptr -50h
.text:0000012C var_4C          = dword ptr -4Ch
.text:0000012C var_48          = dword ptr -48h
.text:0000012C var_40          = byte ptr -40h
.text:0000012C var_3F          = byte ptr -3Fh
.text:0000012C var_3D          = byte ptr -3Dh
.text:0000012C var_2C          = byte ptr -2Ch
.text:0000012C var_2B          = byte ptr -2Bh
.text:0000012C var_24          = dword ptr -24h
.text:0000012C var_20          = dword ptr -20h
.text:0000012C Size            = dword ptr -1Ch
.text:0000012C Dst             = byte ptr -14h
.text:0000012C var_13          = byte ptr -13h
.text:0000012C var_8           = dword ptr -8
.text:0000012C var_4           = dword ptr -4
.text:0000012C arg_0           = dword ptr  8
.text:0000012C Src             = dword ptr  10h
.text:0000012C arg_C           = dword ptr  14h
.text:0000012C
.text:0000012C                 push    ebp
.text:0000012D                 mov     ebp, esp
.text:0000012F                 sub     esp, 50h
.text:00000132                 push    esi
.text:00000133                 push    edi
.text:00000134                 lea     edi, [ebp+var_50]
.text:00000137                 mov     ecx, 14h
.text:0000013C                 mov     eax, 0CCCCCCCCh
.text:00000141                 rep stosd
.text:00000143                 mov     eax, dword ptr ds:___security_cookie
.text:00000148                 xor     eax, ebp
.text:0000014A                 mov     [ebp+var_4], eax
.text:0000014D                 mov     eax, [ebp+arg_0]
.text:00000150                 mov     [ebp+var_8], eax
.text:00000153                 mov     ecx, [ebp+var_8]
.text:00000156                 cmp     dword ptr [ecx+1Ch], 0
.text:0000015A                 jz      loc_8BF
.text:00000160
.text:00000160 loc_160:                                ; CODE XREF: _pfd_receive+10Bj
.text:00000160                                         ; _pfd_receive+178j ...
.text:00000160                 mov     edx, [ebp+arg_C]
.text:00000163                 mov     [ebp+var_50], edx
.text:00000166                 mov     eax, [ebp+arg_C]
.text:00000169                 sub     eax, 1
.text:0000016C                 mov     [ebp+arg_C], eax
.text:0000016F                 cmp     [ebp+var_50], 0
.text:00000173                 jz      loc_7DA
.text:00000179                 mov     ecx, [ebp+var_8]
.text:0000017C                 mov     edx, [ebp+var_8]
.text:0000017F                 mov     eax, [ecx+2Ch]
.text:00000182                 cmp     eax, [edx+30h]
.text:00000185                 jl      short loc_1C2
.text:00000187                 mov     ecx, [ebp+var_8]
.text:0000018A                 mov     eax, [ecx+2Ch]
.text:0000018D                 imul    eax, 5
.text:00000190                 cdq
.text:00000191                 and     edx, 3
.text:00000194                 add     eax, edx
.text:00000196                 sar     eax, 2
.text:00000199                 add     eax, 100h
.text:0000019E                 mov     edx, [ebp+var_8]
.text:000001A1                 mov     [edx+30h], eax
.text:000001A4                 push    1
.text:000001A6                 mov     eax, [ebp+var_8]
.text:000001A9                 mov     ecx, [eax+30h]
.text:000001AC                 push    ecx
.text:000001AD                 mov     edx, [ebp+var_8]
.text:000001B0                 mov     eax, [edx+28h]
.text:000001B3                 push    eax
.text:000001B4                 call    _saferealloc
.text:000001B9                 add     esp, 0Ch
.text:000001BC                 mov     ecx, [ebp+var_8]
.text:000001BF                 mov     [ecx+28h], eax
.text:000001C2
.text:000001C2 loc_1C2:                                ; CODE XREF: _pfd_receive+59j
.text:000001C2                 mov     edx, [ebp+var_8]
.text:000001C5                 mov     eax, [edx+28h]
.text:000001C8                 mov     ecx, [ebp+var_8]
.text:000001CB                 mov     edx, [ecx+2Ch]
.text:000001CE                 mov     ecx, [ebp+Src]
.text:000001D1                 mov     cl, [ecx]
.text:000001D3                 mov     [eax+edx], cl
.text:000001D6                 mov     edx, [ebp+var_8]
.text:000001D9                 mov     eax, [edx+2Ch]
.text:000001DC                 add     eax, 1
.text:000001DF                 mov     ecx, [ebp+var_8]
.text:000001E2                 mov     [ecx+2Ch], eax
.text:000001E5                 mov     edx, [ebp+Src]
.text:000001E8                 add     edx, 1
.text:000001EB                 mov     [ebp+Src], edx
.text:000001EE                 mov     eax, [ebp+var_8]
.text:000001F1                 cmp     dword ptr [eax+1Ch], 1
.text:000001F5                 jz      short loc_209
.text:000001F7                 mov     ecx, [ebp+var_8]
.text:000001FA                 mov     edx, [ecx+1Ch]
.text:000001FD                 sar     edx, 0Ch
.text:00000200                 cmp     edx, 4
.text:00000203                 jnz     loc_481
.text:00000209
.text:00000209 loc_209:                                ; CODE XREF: _pfd_receive+C9j
.text:00000209                 mov     eax, [ebp+var_8]
.text:0000020C                 mov     ecx, [eax+28h]
.text:0000020F                 movsx   edx, byte ptr [ecx]
.text:00000212                 cmp     edx, 4
.text:00000215                 jnz     loc_481
.text:0000021B                 mov     eax, [ebp+var_8]
.text:0000021E                 cmp     dword ptr [eax+1Ch], 1
.text:00000222                 jnz     short loc_22E
.text:00000224                 mov     ecx, [ebp+var_8]
.text:00000227                 mov     dword ptr [ecx+1Ch], 4000h
.text:0000022E
.text:0000022E loc_22E:                                ; CODE XREF: _pfd_receive+F6j
.text:0000022E                 mov     edx, [ebp+var_8]
.text:00000231                 cmp     dword ptr [edx+2Ch], 2
.text:00000235                 jge     short loc_23C
.text:00000237                 jmp     loc_160
.text:0000023C ; ---------------------------------------------------------------------------
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: _pfd_receive+109j
.text:0000023C                 mov     eax, [ebp+var_8]
.text:0000023F                 mov     ecx, [eax+28h]
.text:00000242                 movsx   edx, byte ptr [ecx+1]
.text:00000246                 cmp     edx, 1
.text:00000249                 jz      short loc_29B
.text:0000024B                 push    8               ; Size
.text:0000024D                 push    0               ; Val
.text:0000024F                 lea     eax, [ebp+Dst]
.text:00000252                 push    eax             ; Dst
.text:00000253                 call    _memset
.text:00000258                 add     esp, 0Ch
.text:0000025B                 mov     [ebp+var_13], 5Bh ; '['
.text:0000025F                 mov     esi, esp
.text:00000261                 push    8
.text:00000263                 lea     ecx, [ebp+Dst]
.text:00000266                 push    ecx
.text:00000267                 mov     edx, [ebp+var_8]
.text:0000026A                 mov     eax, [edx+0Ch]
.text:0000026D                 push    eax
.text:0000026E                 mov     ecx, [ebp+var_8]
.text:00000271                 mov     edx, [ecx+0Ch]
.text:00000274                 mov     eax, [edx]
.text:00000276                 mov     ecx, [eax+8]
.text:00000279                 call    ecx
.text:0000027B                 add     esp, 0Ch
.text:0000027E                 cmp     esi, esp
.text:00000280                 call    __RTC_CheckEsp
.text:00000285                 mov     edx, [ebp+var_8]
.text:00000288                 push    edx
.text:00000289                 call    _pfd_close
.text:0000028E                 add     esp, 4
.text:00000291                 mov     eax, 1
.text:00000296                 jmp     loc_914
.text:0000029B ; ---------------------------------------------------------------------------
.text:0000029B
.text:0000029B loc_29B:                                ; CODE XREF: _pfd_receive+11Dj
.text:0000029B                 mov     eax, [ebp+var_8]
.text:0000029E                 cmp     dword ptr [eax+2Ch], 8
.text:000002A2                 jg      short loc_2A9
.text:000002A4                 jmp     loc_160
.text:000002A9 ; ---------------------------------------------------------------------------
.text:000002A9
.text:000002A9 loc_2A9:                                ; CODE XREF: _pfd_receive+176j
.text:000002A9                 mov     ecx, [ebp+var_8]
.text:000002AC                 mov     edx, [ecx+2Ch]
.text:000002AF                 mov     eax, [ebp+var_8]
.text:000002B2                 mov     ecx, [eax+28h]
.text:000002B5                 movsx   edx, byte ptr [ecx+edx-1]
.text:000002BA                 test    edx, edx
.text:000002BC                 jz      short loc_2C3
.text:000002BE                 jmp     loc_160
.text:000002C3 ; ---------------------------------------------------------------------------
.text:000002C3
.text:000002C3 loc_2C3:                                ; CODE XREF: _pfd_receive+190j
.text:000002C3                 mov     eax, [ebp+var_8]
.text:000002C6                 mov     ecx, [eax+28h]
.text:000002C9                 movsx   edx, byte ptr [ecx+4]
.text:000002CD                 test    edx, edx
.text:000002CF                 jnz     loc_3E2
.text:000002D5                 mov     eax, [ebp+var_8]
.text:000002D8                 mov     ecx, [eax+28h]
.text:000002DB                 movsx   edx, byte ptr [ecx+5]
.text:000002DF                 test    edx, edx
.text:000002E1                 jnz     loc_3E2
.text:000002E7                 mov     eax, [ebp+var_8]
.text:000002EA                 mov     ecx, [eax+28h]
.text:000002ED                 movsx   edx, byte ptr [ecx+6]
.text:000002F1                 test    edx, edx
.text:000002F3                 jnz     loc_3E2
.text:000002F9                 mov     eax, [ebp+var_8]
.text:000002FC                 mov     ecx, [eax+28h]
.text:000002FF                 movsx   edx, byte ptr [ecx+7]
.text:00000303                 test    edx, edx
.text:00000305                 jz      loc_3E2
.text:0000030B                 mov     eax, [ebp+var_8]
.text:0000030E                 cmp     dword ptr [eax+1Ch], 4000h
.text:00000315                 jnz     short loc_330
.text:00000317                 mov     ecx, [ebp+var_8]
.text:0000031A                 mov     dword ptr [ecx+1Ch], 4001h
.text:00000321                 mov     edx, [ebp+var_8]
.text:00000324                 mov     dword ptr [edx+2Ch], 8
.text:0000032B                 jmp     loc_160
.text:00000330 ; ---------------------------------------------------------------------------
.text:00000330
.text:00000330 loc_330:                                ; CODE XREF: _pfd_receive+1E9j
.text:00000330                 mov     eax, [ebp+var_8]
.text:00000333                 mov     ecx, [eax+28h]
.text:00000336                 mov     byte ptr [ecx], 0
.text:00000339                 mov     edx, [ebp+var_8]
.text:0000033C                 mov     eax, [edx+28h]
.text:0000033F                 mov     byte ptr [eax+1], 5Ah ; 'Z'
.text:00000343                 mov     esi, esp
.text:00000345                 push    8
.text:00000347                 mov     ecx, [ebp+var_8]
.text:0000034A                 mov     edx, [ecx+28h]
.text:0000034D                 push    edx
.text:0000034E                 mov     eax, [ebp+var_8]
.text:00000351                 mov     ecx, [eax+0Ch]
.text:00000354                 push    ecx
.text:00000355                 mov     edx, [ebp+var_8]
.text:00000358                 mov     eax, [edx+0Ch]
.text:0000035B                 mov     ecx, [eax]
.text:0000035D                 mov     edx, [ecx+8]
.text:00000360                 call    edx
.text:00000362                 add     esp, 0Ch
.text:00000365                 cmp     esi, esp
.text:00000367                 call    __RTC_CheckEsp
.text:0000036C                 mov     eax, [ebp+var_8]
.text:0000036F                 mov     ecx, [eax+2Ch]
.text:00000372                 sub     ecx, 8
.text:00000375                 mov     [ebp+Size], ecx
.text:00000378                 mov     edx, [ebp+var_8]
.text:0000037B                 mov     eax, [edx+28h]
.text:0000037E                 movzx   ecx, byte ptr [eax+2]
.text:00000382                 shl     ecx, 8
.text:00000385                 mov     edx, [ebp+var_8]
.text:00000388                 mov     eax, [edx+28h]
.text:0000038B                 movzx   edx, byte ptr [eax+3]
.text:0000038F                 or      ecx, edx
.text:00000391                 mov     eax, [ebp+var_8]
.text:00000394                 mov     [eax+24h], ecx
.text:00000397                 push    1
.text:00000399                 mov     ecx, [ebp+Size]
.text:0000039C                 add     ecx, 1
.text:0000039F                 push    ecx
.text:000003A0                 call    _safemalloc
.text:000003A5                 add     esp, 8
.text:000003A8                 mov     edx, [ebp+var_8]
.text:000003AB                 mov     [edx+20h], eax
.text:000003AE                 mov     eax, [ebp+var_8]
.text:000003B1                 mov     ecx, [eax+20h]
.text:000003B4                 mov     edx, [ebp+Size]
.text:000003B7                 mov     byte ptr [ecx+edx], 0
.text:000003BB                 mov     eax, [ebp+Size]
.text:000003BE                 push    eax             ; Size
.text:000003BF                 mov     ecx, [ebp+var_8]
.text:000003C2                 mov     edx, [ecx+28h]
.text:000003C5                 add     edx, 8
.text:000003C8                 push    edx             ; Src
.text:000003C9                 mov     eax, [ebp+var_8]
.text:000003CC                 mov     ecx, [eax+20h]
.text:000003CF                 push    ecx             ; Dst
.text:000003D0                 call    _memcpy
.text:000003D5                 add     esp, 0Ch
.text:000003D8                 jmp     $connect$87199
.text:000003DD ; ---------------------------------------------------------------------------
.text:000003DD                 jmp     loc_481
.text:000003E2 ; ---------------------------------------------------------------------------
.text:000003E2
.text:000003E2 loc_3E2:                                ; CODE XREF: _pfd_receive+1A3j
.text:000003E2                                         ; _pfd_receive+1B5j ...
.text:000003E2                 mov     edx, [ebp+var_8]
.text:000003E5                 mov     eax, [edx+28h]
.text:000003E8                 mov     byte ptr [eax], 0
.text:000003EB                 mov     ecx, [ebp+var_8]
.text:000003EE                 mov     edx, [ecx+28h]
.text:000003F1                 mov     byte ptr [edx+1], 5Ah ; 'Z'
.text:000003F5                 mov     esi, esp
.text:000003F7                 push    8
.text:000003F9                 mov     eax, [ebp+var_8]
.text:000003FC                 mov     ecx, [eax+28h]
.text:000003FF                 push    ecx
.text:00000400                 mov     edx, [ebp+var_8]
.text:00000403                 mov     eax, [edx+0Ch]
.text:00000406                 push    eax
.text:00000407                 mov     ecx, [ebp+var_8]
.text:0000040A                 mov     edx, [ecx+0Ch]
.text:0000040D                 mov     eax, [edx]
.text:0000040F                 mov     ecx, [eax+8]
.text:00000412                 call    ecx
.text:00000414                 add     esp, 0Ch
.text:00000417                 cmp     esi, esp
.text:00000419                 call    __RTC_CheckEsp
.text:0000041E                 mov     edx, [ebp+var_8]
.text:00000421                 mov     eax, [edx+28h]
.text:00000424                 movzx   ecx, byte ptr [eax+2]
.text:00000428                 shl     ecx, 8
.text:0000042B                 mov     edx, [ebp+var_8]
.text:0000042E                 mov     eax, [edx+28h]
.text:00000431                 movzx   edx, byte ptr [eax+3]
.text:00000435                 or      ecx, edx
.text:00000437                 mov     eax, [ebp+var_8]
.text:0000043A                 mov     [eax+24h], ecx
.text:0000043D                 mov     ecx, [ebp+var_8]
.text:00000440                 mov     edx, [ecx+28h]
.text:00000443                 movzx   eax, byte ptr [edx+7]
.text:00000447                 push    eax
.text:00000448                 mov     ecx, [ebp+var_8]
.text:0000044B                 mov     edx, [ecx+28h]
.text:0000044E                 movzx   eax, byte ptr [edx+6]
.text:00000452                 push    eax
.text:00000453                 mov     ecx, [ebp+var_8]
.text:00000456                 mov     edx, [ecx+28h]
.text:00000459                 movzx   eax, byte ptr [edx+5]
.text:0000045D                 push    eax
.text:0000045E                 mov     ecx, [ebp+var_8]
.text:00000461                 mov     edx, [ecx+28h]
.text:00000464                 movzx   eax, byte ptr [edx+4]
.text:00000468                 push    eax
.text:00000469                 push    offset $SG87209 ; "%d.%d.%d.%d"
.text:0000046E                 call    _dupprintf
.text:00000473                 add     esp, 14h
.text:00000476                 mov     ecx, [ebp+var_8]
.text:00000479                 mov     [ecx+20h], eax
.text:0000047C                 jmp     $connect$87199
.text:00000481 ; ---------------------------------------------------------------------------
.text:00000481
.text:00000481 loc_481:                                ; CODE XREF: _pfd_receive+D7j
.text:00000481                                         ; _pfd_receive+E9j ...
.text:00000481                 mov     edx, [ebp+var_8]
.text:00000484                 cmp     dword ptr [edx+1Ch], 1
.text:00000488                 jz      short loc_49C
.text:0000048A                 mov     eax, [ebp+var_8]
.text:0000048D                 mov     ecx, [eax+1Ch]
.text:00000490                 sar     ecx, 0Ch
.text:00000493                 cmp     ecx, 5
.text:00000496                 jnz     loc_7BF
.text:0000049C
.text:0000049C loc_49C:                                ; CODE XREF: _pfd_receive+35Cj
.text:0000049C                 mov     edx, [ebp+var_8]
.text:0000049F                 mov     eax, [edx+28h]
.text:000004A2                 movsx   ecx, byte ptr [eax]
.text:000004A5                 cmp     ecx, 5
.text:000004A8                 jnz     loc_7BF
.text:000004AE                 mov     edx, [ebp+var_8]
.text:000004B1                 cmp     dword ptr [edx+1Ch], 1
.text:000004B5                 jnz     short loc_4C1
.text:000004B7                 mov     eax, [ebp+var_8]
.text:000004BA                 mov     dword ptr [eax+1Ch], 5000h
.text:000004C1
.text:000004C1 loc_4C1:                                ; CODE XREF: _pfd_receive+389j
.text:000004C1                 mov     ecx, [ebp+var_8]
.text:000004C4                 cmp     dword ptr [ecx+1Ch], 5000h
.text:000004CB                 jnz     loc_587
.text:000004D1                 mov     edx, [ebp+var_8]
.text:000004D4                 cmp     dword ptr [edx+2Ch], 2
.text:000004D8                 jge     short loc_4DF
.text:000004DA                 jmp     loc_160
.text:000004DF ; ---------------------------------------------------------------------------
.text:000004DF
.text:000004DF loc_4DF:                                ; CODE XREF: _pfd_receive+3ACj
.text:000004DF                 mov     eax, [ebp+var_8]
.text:000004E2                 mov     ecx, [eax+28h]
.text:000004E5                 movzx   edx, byte ptr [ecx+1]
.text:000004E9                 add     edx, 2
.text:000004EC                 mov     eax, [ebp+var_8]
.text:000004EF                 cmp     [eax+2Ch], edx
.text:000004F2                 jge     short loc_4F9
.text:000004F4                 jmp     loc_160
.text:000004F9 ; ---------------------------------------------------------------------------
.text:000004F9
.text:000004F9 loc_4F9:                                ; CODE XREF: _pfd_receive+3C6j
.text:000004F9                 mov     [ebp+var_24], 0FFh
.text:00000500                 mov     [ebp+var_20], 0
.text:00000507                 jmp     short loc_512
.text:00000509 ; ---------------------------------------------------------------------------
.text:00000509
.text:00000509 loc_509:                                ; CODE XREF: _pfd_receive:loc_53Cj
.text:00000509                 mov     ecx, [ebp+var_20]
.text:0000050C                 add     ecx, 1
.text:0000050F                 mov     [ebp+var_20], ecx
.text:00000512
.text:00000512 loc_512:                                ; CODE XREF: _pfd_receive+3DBj
.text:00000512                 mov     edx, [ebp+var_8]
.text:00000515                 mov     eax, [edx+28h]
.text:00000518                 movzx   ecx, byte ptr [eax+1]
.text:0000051C                 cmp     [ebp+var_20], ecx
.text:0000051F                 jge     short loc_53E
.text:00000521                 mov     edx, [ebp+var_8]
.text:00000524                 mov     eax, [edx+28h]
.text:00000527                 mov     ecx, [ebp+var_20]
.text:0000052A                 movsx   edx, byte ptr [eax+ecx+2]
.text:0000052F                 test    edx, edx
.text:00000531                 jnz     short loc_53C
.text:00000533                 mov     [ebp+var_24], 0
.text:0000053A                 jmp     short loc_53E
.text:0000053C ; ---------------------------------------------------------------------------
.text:0000053C
.text:0000053C loc_53C:                                ; CODE XREF: _pfd_receive+405j
.text:0000053C                 jmp     short loc_509
.text:0000053E ; ---------------------------------------------------------------------------
.text:0000053E
.text:0000053E loc_53E:                                ; CODE XREF: _pfd_receive+3F3j
.text:0000053E                                         ; _pfd_receive+40Ej
.text:0000053E                 mov     [ebp+var_2C], 5
.text:00000542                 mov     al, byte ptr [ebp+var_24]
.text:00000545                 mov     [ebp+var_2B], al
.text:00000548                 mov     esi, esp
.text:0000054A                 push    2
.text:0000054C                 lea     ecx, [ebp+var_2C]
.text:0000054F                 push    ecx
.text:00000550                 mov     edx, [ebp+var_8]
.text:00000553                 mov     eax, [edx+0Ch]
.text:00000556                 push    eax
.text:00000557                 mov     ecx, [ebp+var_8]
.text:0000055A                 mov     edx, [ecx+0Ch]
.text:0000055D                 mov     eax, [edx]
.text:0000055F                 mov     ecx, [eax+8]
.text:00000562                 call    ecx
.text:00000564                 add     esp, 0Ch
.text:00000567                 cmp     esi, esp
.text:00000569                 call    __RTC_CheckEsp
.text:0000056E                 mov     edx, [ebp+var_8]
.text:00000571                 mov     dword ptr [edx+1Ch], 5001h
.text:00000578                 mov     eax, [ebp+var_8]
.text:0000057B                 mov     dword ptr [eax+2Ch], 0
.text:00000582                 jmp     loc_160
.text:00000587 ; ---------------------------------------------------------------------------
.text:00000587
.text:00000587 loc_587:                                ; CODE XREF: _pfd_receive+39Fj
.text:00000587                 mov     ecx, [ebp+var_8]
.text:0000058A                 cmp     dword ptr [ecx+1Ch], 5001h
.text:00000591                 jnz     loc_7BF
.text:00000597                 mov     [ebp+var_4C], 0
.text:0000059E                 push    0Ah             ; Size
.text:000005A0                 push    0               ; Val
.text:000005A2                 lea     edx, [ebp+var_40]
.text:000005A5                 push    edx             ; Dst
.text:000005A6                 call    _memset
.text:000005AB                 add     esp, 0Ch
.text:000005AE                 mov     [ebp+var_40], 5
.text:000005B2                 mov     [ebp+var_3D], 1
.text:000005B6                 mov     eax, [ebp+var_8]
.text:000005B9                 cmp     dword ptr [eax+2Ch], 6
.text:000005BD                 jge     short loc_5C4
.text:000005BF                 jmp     loc_160
.text:000005C4 ; ---------------------------------------------------------------------------
.text:000005C4
.text:000005C4 loc_5C4:                                ; CODE XREF: _pfd_receive+491j
.text:000005C4                 mov     ecx, [ebp+var_8]
.text:000005C7                 mov     edx, [ecx+28h]
.text:000005CA                 movzx   eax, byte ptr [edx+3]
.text:000005CE                 mov     [ebp+var_48], eax
.text:000005D1                 cmp     [ebp+var_48], 1
.text:000005D5                 jnz     short loc_5DE
.text:000005D7                 mov     [ebp+var_4C], 4
.text:000005DE
.text:000005DE loc_5DE:                                ; CODE XREF: _pfd_receive+4A9j
.text:000005DE                 cmp     [ebp+var_48], 4
.text:000005E2                 jnz     short loc_5EB
.text:000005E4                 mov     [ebp+var_4C], 10h
.text:000005EB
.text:000005EB loc_5EB:                                ; CODE XREF: _pfd_receive+4B6j
.text:000005EB                 cmp     [ebp+var_48], 3
.text:000005EF                 jnz     short loc_601
.text:000005F1                 mov     ecx, [ebp+var_8]
.text:000005F4                 mov     edx, [ecx+28h]
.text:000005F7                 movzx   eax, byte ptr [edx+4]
.text:000005FB                 add     eax, 1
.text:000005FE                 mov     [ebp+var_4C], eax
.text:00000601
.text:00000601 loc_601:                                ; CODE XREF: _pfd_receive+4C3j
.text:00000601                 mov     ecx, [ebp+var_4C]
.text:00000604                 add     ecx, 6
.text:00000607                 mov     edx, [ebp+var_8]
.text:0000060A                 cmp     [edx+2Ch], ecx
.text:0000060D                 jge     short loc_614
.text:0000060F                 jmp     loc_160
.text:00000614 ; ---------------------------------------------------------------------------
.text:00000614
.text:00000614 loc_614:                                ; CODE XREF: _pfd_receive+4E1j
.text:00000614                 mov     eax, [ebp+var_8]
.text:00000617                 mov     ecx, [eax+28h]
.text:0000061A                 movsx   edx, byte ptr [ecx+1]
.text:0000061E                 cmp     edx, 1
.text:00000621                 jnz     short loc_631
.text:00000623                 mov     eax, [ebp+var_8]
.text:00000626                 mov     ecx, [eax+28h]
.text:00000629                 movsx   edx, byte ptr [ecx+2]
.text:0000062D                 test    edx, edx
.text:0000062F                 jz      short loc_671
.text:00000631
.text:00000631 loc_631:                                ; CODE XREF: _pfd_receive+4F5j
.text:00000631                 mov     [ebp+var_3F], 1
.text:00000635                 mov     esi, esp
.text:00000637                 push    0Ah
.text:00000639                 lea     eax, [ebp+var_40]
.text:0000063C                 push    eax
.text:0000063D                 mov     ecx, [ebp+var_8]
.text:00000640                 mov     edx, [ecx+0Ch]
.text:00000643                 push    edx
.text:00000644                 mov     eax, [ebp+var_8]
.text:00000647                 mov     ecx, [eax+0Ch]
.text:0000064A                 mov     edx, [ecx]
.text:0000064C                 mov     eax, [edx+8]
.text:0000064F                 call    eax
.text:00000651                 add     esp, 0Ch
.text:00000654                 cmp     esi, esp
.text:00000656                 call    __RTC_CheckEsp
.text:0000065B                 mov     ecx, [ebp+var_8]
.text:0000065E                 push    ecx
.text:0000065F                 call    _pfd_close
.text:00000664                 add     esp, 4
.text:00000667                 mov     eax, 1
.text:0000066C                 jmp     loc_914
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: _pfd_receive+503j
.text:00000671                 mov     edx, [ebp+var_8]
.text:00000674                 mov     eax, [edx+28h]
.text:00000677                 mov     ecx, [ebp+var_4C]
.text:0000067A                 movzx   edx, byte ptr [eax+ecx+4]
.text:0000067F                 shl     edx, 8
.text:00000682                 mov     eax, [ebp+var_8]
.text:00000685                 mov     ecx, [eax+28h]
.text:00000688                 mov     eax, [ebp+var_4C]
.text:0000068B                 movzx   ecx, byte ptr [ecx+eax+5]
.text:00000690                 or      edx, ecx
.text:00000692                 mov     eax, [ebp+var_8]
.text:00000695                 mov     [eax+24h], edx
.text:00000698                 cmp     [ebp+var_48], 1
.text:0000069C                 jnz     short loc_70D
.text:0000069E                 mov     esi, esp
.text:000006A0                 push    0Ah
.text:000006A2                 lea     ecx, [ebp+var_40]
.text:000006A5                 push    ecx
.text:000006A6                 mov     edx, [ebp+var_8]
.text:000006A9                 mov     eax, [edx+0Ch]
.text:000006AC                 push    eax
.text:000006AD                 mov     ecx, [ebp+var_8]
.text:000006B0                 mov     edx, [ecx+0Ch]
.text:000006B3                 mov     eax, [edx]
.text:000006B5                 mov     ecx, [eax+8]
.text:000006B8                 call    ecx
.text:000006BA                 add     esp, 0Ch
.text:000006BD                 cmp     esi, esp
.text:000006BF                 call    __RTC_CheckEsp
.text:000006C4                 mov     edx, [ebp+var_8]
.text:000006C7                 mov     eax, [edx+28h]
.text:000006CA                 movzx   ecx, byte ptr [eax+7]
.text:000006CE                 push    ecx
.text:000006CF                 mov     edx, [ebp+var_8]
.text:000006D2                 mov     eax, [edx+28h]
.text:000006D5                 movzx   ecx, byte ptr [eax+6]
.text:000006D9                 push    ecx
.text:000006DA                 mov     edx, [ebp+var_8]
.text:000006DD                 mov     eax, [edx+28h]
.text:000006E0                 movzx   ecx, byte ptr [eax+5]
.text:000006E4                 push    ecx
.text:000006E5                 mov     edx, [ebp+var_8]
.text:000006E8                 mov     eax, [edx+28h]
.text:000006EB                 movzx   ecx, byte ptr [eax+4]
.text:000006EF                 push    ecx
.text:000006F0                 push    offset $SG87249 ; "%d.%d.%d.%d"
.text:000006F5                 call    _dupprintf
.text:000006FA                 add     esp, 14h
.text:000006FD                 mov     edx, [ebp+var_8]
.text:00000700                 mov     [edx+20h], eax
.text:00000703                 jmp     $connect$87199
.text:00000708 ; ---------------------------------------------------------------------------
.text:00000708                 jmp     loc_7BF
.text:0000070D ; ---------------------------------------------------------------------------
.text:0000070D
.text:0000070D loc_70D:                                ; CODE XREF: _pfd_receive+570j
.text:0000070D                 cmp     [ebp+var_48], 3
.text:00000711                 jnz     short loc_77F
.text:00000713                 mov     esi, esp
.text:00000715                 push    0Ah
.text:00000717                 lea     eax, [ebp+var_40]
.text:0000071A                 push    eax
.text:0000071B                 mov     ecx, [ebp+var_8]
.text:0000071E                 mov     edx, [ecx+0Ch]
.text:00000721                 push    edx
.text:00000722                 mov     eax, [ebp+var_8]
.text:00000725                 mov     ecx, [eax+0Ch]
.text:00000728                 mov     edx, [ecx]
.text:0000072A                 mov     eax, [edx+8]
.text:0000072D                 call    eax
.text:0000072F                 add     esp, 0Ch
.text:00000732                 cmp     esi, esp
.text:00000734                 call    __RTC_CheckEsp
.text:00000739                 push    1
.text:0000073B                 mov     ecx, [ebp+var_4C]
.text:0000073E                 push    ecx
.text:0000073F                 call    _safemalloc
.text:00000744                 add     esp, 8
.text:00000747                 mov     edx, [ebp+var_8]
.text:0000074A                 mov     [edx+20h], eax
.text:0000074D                 mov     eax, [ebp+var_8]
.text:00000750                 mov     ecx, [eax+20h]
.text:00000753                 mov     edx, [ebp+var_4C]
.text:00000756                 mov     byte ptr [edx+ecx-1], 0
.text:0000075B                 mov     eax, [ebp+var_4C]
.text:0000075E                 sub     eax, 1
.text:00000761                 push    eax             ; Size
.text:00000762                 mov     ecx, [ebp+var_8]
.text:00000765                 mov     edx, [ecx+28h]
.text:00000768                 add     edx, 5
.text:0000076B                 push    edx             ; Src
.text:0000076C                 mov     eax, [ebp+var_8]
.text:0000076F                 mov     ecx, [eax+20h]
.text:00000772                 push    ecx             ; Dst
.text:00000773                 call    _memcpy
.text:00000778                 add     esp, 0Ch
.text:0000077B                 jmp     short $connect$87199
.text:0000077D ; ---------------------------------------------------------------------------
.text:0000077D                 jmp     short loc_7BF
.text:0000077F ; ---------------------------------------------------------------------------
.text:0000077F
.text:0000077F loc_77F:                                ; CODE XREF: _pfd_receive+5E5j
.text:0000077F                 mov     [ebp+var_3F], 8
.text:00000783                 mov     esi, esp
.text:00000785                 push    0Ah
.text:00000787                 lea     edx, [ebp+var_40]
.text:0000078A                 push    edx
.text:0000078B                 mov     eax, [ebp+var_8]
.text:0000078E                 mov     ecx, [eax+0Ch]
.text:00000791                 push    ecx
.text:00000792                 mov     edx, [ebp+var_8]
.text:00000795                 mov     eax, [edx+0Ch]
.text:00000798                 mov     ecx, [eax]
.text:0000079A                 mov     edx, [ecx+8]
.text:0000079D                 call    edx
.text:0000079F                 add     esp, 0Ch
.text:000007A2                 cmp     esi, esp
.text:000007A4                 call    __RTC_CheckEsp
.text:000007A9                 mov     eax, [ebp+var_8]
.text:000007AC                 push    eax
.text:000007AD                 call    _pfd_close
.text:000007B2                 add     esp, 4
.text:000007B5                 mov     eax, 1
.text:000007BA                 jmp     loc_914
.text:000007BF ; ---------------------------------------------------------------------------
.text:000007BF
.text:000007BF loc_7BF:                                ; CODE XREF: _pfd_receive+36Aj
.text:000007BF                                         ; _pfd_receive+37Cj ...
.text:000007BF                 mov     ecx, [ebp+var_8]
.text:000007C2                 push    ecx
.text:000007C3                 call    _pfd_close
.text:000007C8                 add     esp, 4
.text:000007CB                 mov     eax, 1
.text:000007D0                 jmp     loc_914
.text:000007D5 ; ---------------------------------------------------------------------------
.text:000007D5                 jmp     loc_160
.text:000007DA ; ---------------------------------------------------------------------------
.text:000007DA
.text:000007DA loc_7DA:                                ; CODE XREF: _pfd_receive+47j
.text:000007DA                 mov     eax, 1
.text:000007DF                 jmp     loc_914
.text:000007E4 ; ---------------------------------------------------------------------------
.text:000007E4
.text:000007E4 $connect$87199:                         ; CODE XREF: _pfd_receive+2ACj
.text:000007E4                                         ; _pfd_receive+350j ...
.text:000007E4                 mov     edx, [ebp+var_8]
.text:000007E7                 mov     eax, [edx+28h]
.text:000007EA                 push    eax
.text:000007EB                 call    _safefree
.text:000007F0                 add     esp, 4
.text:000007F3                 mov     ecx, [ebp+var_8]
.text:000007F6                 mov     dword ptr [ecx+28h], 0
.text:000007FD                 mov     esi, esp
.text:000007FF                 push    1
.text:00000801                 mov     edx, [ebp+var_8]
.text:00000804                 mov     eax, [edx+0Ch]
.text:00000807                 push    eax
.text:00000808                 mov     ecx, [ebp+var_8]
.text:0000080B                 mov     edx, [ecx+0Ch]
.text:0000080E                 mov     eax, [edx]
.text:00000810                 mov     ecx, [eax+18h]
.text:00000813                 call    ecx
.text:00000815                 add     esp, 8
.text:00000818                 cmp     esi, esp
.text:0000081A                 call    __RTC_CheckEsp
.text:0000081F                 mov     edx, [ebp+var_8]
.text:00000822                 push    edx
.text:00000823                 mov     eax, [ebp+var_8]
.text:00000826                 mov     ecx, [eax+8]
.text:00000829                 push    ecx
.text:0000082A                 call    _new_sock_channel
.text:0000082F                 add     esp, 8
.text:00000832                 mov     edx, [ebp+var_8]
.text:00000835                 mov     [edx+4], eax
.text:00000838                 mov     eax, [ebp+var_8]
.text:0000083B                 cmp     dword ptr [eax+4], 0
.text:0000083F                 jnz     short loc_859
.text:00000841                 mov     ecx, [ebp+var_8]
.text:00000844                 push    ecx
.text:00000845                 call    _pfd_close
.text:0000084A                 add     esp, 4
.text:0000084D                 mov     eax, 1
.text:00000852                 jmp     loc_914
.text:00000857 ; ---------------------------------------------------------------------------
.text:00000857                 jmp     short loc_87B
.text:00000859 ; ---------------------------------------------------------------------------
.text:00000859
.text:00000859 loc_859:                                ; CODE XREF: _pfd_receive+713j
.text:00000859                 push    offset $SG87261 ; "forwarding"
.text:0000085E                 mov     edx, [ebp+var_8]
.text:00000861                 mov     eax, [edx+24h]
.text:00000864                 push    eax
.text:00000865                 mov     ecx, [ebp+var_8]
.text:00000868                 mov     edx, [ecx+20h]
.text:0000086B                 push    edx
.text:0000086C                 mov     eax, [ebp+var_8]
.text:0000086F                 mov     ecx, [eax+4]
.text:00000872                 push    ecx
.text:00000873                 call    _ssh_send_port_open
.text:00000878                 add     esp, 10h
.text:0000087B
.text:0000087B loc_87B:                                ; CODE XREF: _pfd_receive+72Bj
.text:0000087B                 mov     edx, [ebp+var_8]
.text:0000087E                 mov     dword ptr [edx+1Ch], 0
.text:00000885                 cmp     [ebp+arg_C], 0
.text:00000889                 jle     short loc_8BF
.text:0000088B                 push    1
.text:0000088D                 mov     eax, [ebp+arg_C]
.text:00000890                 push    eax
.text:00000891                 call    _safemalloc
.text:00000896                 add     esp, 8
.text:00000899                 mov     ecx, [ebp+var_8]
.text:0000089C                 mov     [ecx+34h], eax
.text:0000089F                 mov     edx, [ebp+arg_C]
.text:000008A2                 push    edx             ; Size
.text:000008A3                 mov     eax, [ebp+Src]
.text:000008A6                 push    eax             ; Src
.text:000008A7                 mov     ecx, [ebp+var_8]
.text:000008AA                 mov     edx, [ecx+34h]
.text:000008AD                 push    edx             ; Dst
.text:000008AE                 call    _memcpy
.text:000008B3                 add     esp, 0Ch
.text:000008B6                 mov     eax, [ebp+var_8]
.text:000008B9                 mov     ecx, [ebp+arg_C]
.text:000008BC                 mov     [eax+38h], ecx
.text:000008BF
.text:000008BF loc_8BF:                                ; CODE XREF: _pfd_receive+2Ej
.text:000008BF                                         ; _pfd_receive+75Dj
.text:000008BF                 mov     edx, [ebp+var_8]
.text:000008C2                 cmp     dword ptr [edx+18h], 0
.text:000008C6                 jz      short loc_90F
.text:000008C8                 mov     eax, [ebp+arg_C]
.text:000008CB                 push    eax
.text:000008CC                 mov     ecx, [ebp+Src]
.text:000008CF                 push    ecx
.text:000008D0                 mov     edx, [ebp+var_8]
.text:000008D3                 mov     eax, [edx+4]
.text:000008D6                 push    eax
.text:000008D7                 call    _sshfwd_write
.text:000008DC                 add     esp, 0Ch
.text:000008DF                 test    eax, eax
.text:000008E1                 jle     short loc_90F
.text:000008E3                 mov     ecx, [ebp+var_8]
.text:000008E6                 mov     dword ptr [ecx+10h], 1
.text:000008ED                 mov     esi, esp
.text:000008EF                 push    1
.text:000008F1                 mov     edx, [ebp+var_8]
.text:000008F4                 mov     eax, [edx+0Ch]
.text:000008F7                 push    eax
.text:000008F8                 mov     ecx, [ebp+var_8]
.text:000008FB                 mov     edx, [ecx+0Ch]
.text:000008FE                 mov     eax, [edx]
.text:00000900                 mov     ecx, [eax+18h]
.text:00000903                 call    ecx
.text:00000905                 add     esp, 8
.text:00000908                 cmp     esi, esp
.text:0000090A                 call    __RTC_CheckEsp
.text:0000090F
.text:0000090F loc_90F:                                ; CODE XREF: _pfd_receive+79Aj
.text:0000090F                                         ; _pfd_receive+7B5j
.text:0000090F                 mov     eax, 1
.text:00000914
.text:00000914 loc_914:                                ; CODE XREF: _pfd_receive+16Aj
.text:00000914                                         ; _pfd_receive+540j ...
.text:00000914                 push    edx
.text:00000915                 mov     ecx, ebp
.text:00000917                 push    eax
.text:00000918                 lea     edx, $LN56
.text:0000091E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000923                 pop     eax
.text:00000924                 pop     edx
.text:00000925                 pop     edi
.text:00000926                 pop     esi
.text:00000927                 mov     ecx, [ebp+var_4]
.text:0000092A                 xor     ecx, ebp
.text:0000092C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000931                 add     esp, 50h
.text:00000934                 cmp     ebp, esp
.text:00000936                 call    __RTC_CheckEsp
.text:0000093B                 mov     esp, ebp
.text:0000093D                 pop     ebp
.text:0000093E                 retn
.text:0000093E _pfd_receive    endp
.text:0000093E
.text:0000093E ; ---------------------------------------------------------------------------
.text:0000093F                 align 10h
.text:00000940 $LN56           dd 3                    ; DATA XREF: _pfd_receive+7ECo
.text:00000944                 dd offset $LN55
.text:00000948 $LN55           dd 0FFFFFFECh, 8        ; DATA XREF: .text:00000944o
.text:00000950                 dd offset $LN52         ; "data"
.text:00000954                 dd 0FFFFFFD4h, 2
.text:0000095C                 dd offset $LN53         ; "data"
.text:00000960                 dd 0FFFFFFC0h, 0Ah
.text:00000968                 dd offset $LN54         ; "reply"
.text:0000096C $LN54           db 'reply',0            ; DATA XREF: .text:00000968o
.text:00000972 $LN53           db 'data',0             ; DATA XREF: .text:0000095Co
.text:00000977 $LN52           db 'data',0             ; DATA XREF: .text:00000950o
.text:0000097C
.text:0000097C ; =============== S U B R O U T I N E =======================================
.text:0000097C
.text:0000097C ; Attributes: bp-based frame
.text:0000097C
.text:0000097C _pfd_sent       proc near               ; DATA XREF: .rdata:0000003Co
.text:0000097C                                         ; .rdata:00000050o
.text:0000097C
.text:0000097C var_4           = dword ptr -4
.text:0000097C arg_0           = dword ptr  8
.text:0000097C arg_4           = dword ptr  0Ch
.text:0000097C
.text:0000097C                 push    ebp
.text:0000097D                 mov     ebp, esp
.text:0000097F                 push    ecx
.text:00000980                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000987                 mov     eax, [ebp+arg_0]
.text:0000098A                 mov     [ebp+var_4], eax
.text:0000098D                 mov     ecx, [ebp+var_4]
.text:00000990                 cmp     dword ptr [ecx+4], 0
.text:00000994                 jz      short loc_9A9
.text:00000996                 mov     edx, [ebp+arg_4]
.text:00000999                 push    edx
.text:0000099A                 mov     eax, [ebp+var_4]
.text:0000099D                 mov     ecx, [eax+4]
.text:000009A0                 push    ecx
.text:000009A1                 call    _sshfwd_unthrottle
.text:000009A6                 add     esp, 8
.text:000009A9
.text:000009A9 loc_9A9:                                ; CODE XREF: _pfd_sent+18j
.text:000009A9                 add     esp, 4
.text:000009AC                 cmp     ebp, esp
.text:000009AE                 call    __RTC_CheckEsp
.text:000009B3                 mov     esp, ebp
.text:000009B5                 pop     ebp
.text:000009B6                 retn
.text:000009B6 _pfd_sent       endp
.text:000009B6
.text:000009B6 ; ---------------------------------------------------------------------------
.text:000009B7                 db 5 dup(0CCh)
.text:000009BC
.text:000009BC ; =============== S U B R O U T I N E =======================================
.text:000009BC
.text:000009BC ; Attributes: bp-based frame
.text:000009BC
.text:000009BC                 public _pfd_connect
.text:000009BC _pfd_connect    proc near
.text:000009BC
.text:000009BC var_20          = dword ptr -20h
.text:000009BC var_1C          = dword ptr -1Ch
.text:000009BC var_18          = dword ptr -18h
.text:000009BC var_14          = dword ptr -14h
.text:000009BC var_10          = dword ptr -10h
.text:000009BC var_C           = dword ptr -0Ch
.text:000009BC var_8           = dword ptr -8
.text:000009BC var_4           = dword ptr -4
.text:000009BC arg_0           = dword ptr  8
.text:000009BC arg_4           = dword ptr  0Ch
.text:000009BC arg_8           = dword ptr  10h
.text:000009BC arg_C           = dword ptr  14h
.text:000009BC arg_10          = dword ptr  18h
.text:000009BC arg_14          = dword ptr  1Ch
.text:000009BC
.text:000009BC                 push    ebp
.text:000009BD                 mov     ebp, esp
.text:000009BF                 sub     esp, 20h
.text:000009C2                 push    esi
.text:000009C3                 mov     eax, 0CCCCCCCCh
.text:000009C8                 mov     [ebp+var_20], eax
.text:000009CB                 mov     [ebp+var_1C], eax
.text:000009CE                 mov     [ebp+var_18], eax
.text:000009D1                 mov     [ebp+var_14], eax
.text:000009D4                 mov     [ebp+var_10], eax
.text:000009D7                 mov     [ebp+var_C], eax
.text:000009DA                 mov     [ebp+var_8], eax
.text:000009DD                 mov     [ebp+var_4], eax
.text:000009E0                 mov     eax, [ebp+arg_14]
.text:000009E3                 push    eax
.text:000009E4                 mov     ecx, [ebp+arg_10]
.text:000009E7                 push    ecx
.text:000009E8                 lea     edx, [ebp+var_10]
.text:000009EB                 push    edx
.text:000009EC                 mov     eax, [ebp+arg_8]
.text:000009EF                 push    eax
.text:000009F0                 mov     ecx, [ebp+arg_4]
.text:000009F3                 push    ecx
.text:000009F4                 call    _name_lookup
.text:000009F9                 add     esp, 14h
.text:000009FC                 mov     [ebp+var_4], eax
.text:000009FF                 mov     edx, [ebp+var_4]
.text:00000A02                 push    edx
.text:00000A03                 call    _sk_addr_error
.text:00000A08                 add     esp, 4
.text:00000A0B                 mov     [ebp+var_8], eax
.text:00000A0E                 cmp     [ebp+var_8], 0
.text:00000A12                 jz      short loc_A43
.text:00000A14                 mov     eax, [ebp+var_8]
.text:00000A17                 push    eax
.text:00000A18                 call    _dupstr
.text:00000A1D                 add     esp, 4
.text:00000A20                 mov     [ebp+var_1C], eax
.text:00000A23                 mov     ecx, [ebp+var_4]
.text:00000A26                 push    ecx
.text:00000A27                 call    _sk_addr_free
.text:00000A2C                 add     esp, 4
.text:00000A2F                 mov     edx, [ebp+var_10]
.text:00000A32                 push    edx
.text:00000A33                 call    _safefree
.text:00000A38                 add     esp, 4
.text:00000A3B                 mov     eax, [ebp+var_1C]
.text:00000A3E                 jmp     loc_B43
.text:00000A43 ; ---------------------------------------------------------------------------
.text:00000A43
.text:00000A43 loc_A43:                                ; CODE XREF: _pfd_connect+56j
.text:00000A43                 call    _new_portfwd_state
.text:00000A48                 mov     ecx, [ebp+arg_0]
.text:00000A4B                 mov     [ecx], eax
.text:00000A4D                 mov     edx, [ebp+arg_0]
.text:00000A50                 mov     eax, [edx]
.text:00000A52                 mov     [ebp+var_18], eax
.text:00000A55                 mov     ecx, [ebp+var_18]
.text:00000A58                 mov     dword ptr [ecx], offset ?fn_table@?1??pfd_connect@@9@9 ; `pfd_connect'::`2'::fn_table
.text:00000A5E                 mov     edx, [ebp+var_18]
.text:00000A61                 mov     dword ptr [edx+14h], 0
.text:00000A68                 mov     eax, [ebp+var_18]
.text:00000A6B                 mov     dword ptr [eax+10h], 0
.text:00000A72                 mov     ecx, [ebp+var_18]
.text:00000A75                 mov     dword ptr [ecx+18h], 1
.text:00000A7C                 mov     edx, [ebp+var_18]
.text:00000A7F                 mov     eax, [ebp+arg_C]
.text:00000A82                 mov     [edx+4], eax
.text:00000A85                 mov     ecx, [ebp+var_18]
.text:00000A88                 mov     dword ptr [ecx+8], 0
.text:00000A8F                 mov     edx, [ebp+var_18]
.text:00000A92                 mov     dword ptr [edx+1Ch], 0
.text:00000A99                 mov     eax, [ebp+arg_10]
.text:00000A9C                 push    eax
.text:00000A9D                 mov     ecx, [ebp+var_18]
.text:00000AA0                 push    ecx
.text:00000AA1                 push    0
.text:00000AA3                 push    0
.text:00000AA5                 push    1
.text:00000AA7                 push    0
.text:00000AA9                 mov     edx, [ebp+arg_8]
.text:00000AAC                 push    edx
.text:00000AAD                 mov     eax, [ebp+var_10]
.text:00000AB0                 push    eax
.text:00000AB1                 mov     ecx, [ebp+var_4]
.text:00000AB4                 push    ecx
.text:00000AB5                 call    _new_connection
.text:00000ABA                 add     esp, 24h
.text:00000ABD                 mov     edx, [ebp+var_18]
.text:00000AC0                 mov     [edx+0Ch], eax
.text:00000AC3                 mov     eax, [ebp+var_10]
.text:00000AC6                 push    eax
.text:00000AC7                 call    _safefree
.text:00000ACC                 add     esp, 4
.text:00000ACF                 mov     esi, esp
.text:00000AD1                 mov     ecx, [ebp+var_18]
.text:00000AD4                 mov     edx, [ecx+0Ch]
.text:00000AD7                 push    edx
.text:00000AD8                 mov     eax, [ebp+var_18]
.text:00000ADB                 mov     ecx, [eax+0Ch]
.text:00000ADE                 mov     edx, [ecx]
.text:00000AE0                 mov     eax, [edx+1Ch]
.text:00000AE3                 call    eax
.text:00000AE5                 add     esp, 4
.text:00000AE8                 cmp     esi, esp
.text:00000AEA                 call    __RTC_CheckEsp
.text:00000AEF                 mov     [ebp+var_8], eax
.text:00000AF2                 cmp     [ebp+var_8], 0
.text:00000AF6                 jz      short loc_B41
.text:00000AF8                 mov     ecx, [ebp+var_8]
.text:00000AFB                 push    ecx
.text:00000AFC                 call    _dupstr
.text:00000B01                 add     esp, 4
.text:00000B04                 mov     [ebp+var_20], eax
.text:00000B07                 mov     esi, esp
.text:00000B09                 mov     edx, [ebp+var_18]
.text:00000B0C                 mov     eax, [edx+0Ch]
.text:00000B0F                 push    eax
.text:00000B10                 mov     ecx, [ebp+var_18]
.text:00000B13                 mov     edx, [ecx+0Ch]
.text:00000B16                 mov     eax, [edx]
.text:00000B18                 mov     ecx, [eax+4]
.text:00000B1B                 call    ecx
.text:00000B1D                 add     esp, 4
.text:00000B20                 cmp     esi, esp
.text:00000B22                 call    __RTC_CheckEsp
.text:00000B27                 mov     edx, [ebp+var_18]
.text:00000B2A                 push    edx
.text:00000B2B                 call    _free_portfwd_state
.text:00000B30                 add     esp, 4
.text:00000B33                 mov     eax, [ebp+arg_0]
.text:00000B36                 mov     dword ptr [eax], 0
.text:00000B3C                 mov     eax, [ebp+var_20]
.text:00000B3F                 jmp     short loc_B43
.text:00000B41 ; ---------------------------------------------------------------------------
.text:00000B41
.text:00000B41 loc_B41:                                ; CODE XREF: _pfd_connect+13Aj
.text:00000B41                 xor     eax, eax
.text:00000B43
.text:00000B43 loc_B43:                                ; CODE XREF: _pfd_connect+82j
.text:00000B43                                         ; _pfd_connect+183j
.text:00000B43                 push    edx
.text:00000B44                 mov     ecx, ebp
.text:00000B46                 push    eax
.text:00000B47                 lea     edx, $LN7
.text:00000B4D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B52                 pop     eax
.text:00000B53                 pop     edx
.text:00000B54                 pop     esi
.text:00000B55                 add     esp, 20h
.text:00000B58                 cmp     ebp, esp
.text:00000B5A                 call    __RTC_CheckEsp
.text:00000B5F                 mov     esp, ebp
.text:00000B61                 pop     ebp
.text:00000B62                 retn
.text:00000B62 _pfd_connect    endp
.text:00000B62
.text:00000B62 ; ---------------------------------------------------------------------------
.text:00000B63                 align 4
.text:00000B64 $LN7            dd 1                    ; DATA XREF: _pfd_connect+18Bo
.text:00000B68                 dd offset $LN6
.text:00000B6C $LN6            dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00000B68o
.text:00000B74                 dd offset $LN5          ; "dummy_realhost"
.text:00000B78 $LN5            db 'dummy_realhost',0   ; DATA XREF: .text:00000B74o
.text:00000B87                 db 5 dup(0CCh)
.text:00000B8C
.text:00000B8C ; =============== S U B R O U T I N E =======================================
.text:00000B8C
.text:00000B8C ; Attributes: bp-based frame
.text:00000B8C
.text:00000B8C _new_portfwd_state proc near            ; CODE XREF: _pfd_connect:loc_A43p
.text:00000B8C                                         ; _pfl_accepting+1Ep
.text:00000B8C
.text:00000B8C var_4           = dword ptr -4
.text:00000B8C
.text:00000B8C                 push    ebp
.text:00000B8D                 mov     ebp, esp
.text:00000B8F                 push    ecx
.text:00000B90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B97                 push    3Ch ; '<'
.text:00000B99                 push    1
.text:00000B9B                 call    _safemalloc
.text:00000BA0                 add     esp, 8
.text:00000BA3                 mov     [ebp+var_4], eax
.text:00000BA6                 mov     eax, [ebp+var_4]
.text:00000BA9                 mov     dword ptr [eax+20h], 0
.text:00000BB0                 mov     ecx, [ebp+var_4]
.text:00000BB3                 mov     dword ptr [ecx+28h], 0
.text:00000BBA                 mov     edx, [ebp+var_4]
.text:00000BBD                 mov     dword ptr [edx+30h], 0
.text:00000BC4                 mov     eax, [ebp+var_4]
.text:00000BC7                 mov     dword ptr [eax+2Ch], 0
.text:00000BCE                 mov     ecx, [ebp+var_4]
.text:00000BD1                 mov     dword ptr [ecx+34h], 0
.text:00000BD8                 mov     eax, [ebp+var_4]
.text:00000BDB                 add     esp, 4
.text:00000BDE                 cmp     ebp, esp
.text:00000BE0                 call    __RTC_CheckEsp
.text:00000BE5                 mov     esp, ebp
.text:00000BE7                 pop     ebp
.text:00000BE8                 retn
.text:00000BE8 _new_portfwd_state endp
.text:00000BE8
.text:00000BE8 ; ---------------------------------------------------------------------------
.text:00000BE9                 align 4
.text:00000BEC
.text:00000BEC ; =============== S U B R O U T I N E =======================================
.text:00000BEC
.text:00000BEC ; Attributes: bp-based frame
.text:00000BEC
.text:00000BEC _free_portfwd_state proc near           ; CODE XREF: _pfd_connect+16Fp
.text:00000BEC                                         ; _pfl_accepting+8Fp ...
.text:00000BEC
.text:00000BEC arg_0           = dword ptr  8
.text:00000BEC
.text:00000BEC                 push    ebp
.text:00000BED                 mov     ebp, esp
.text:00000BEF                 cmp     [ebp+arg_0], 0
.text:00000BF3                 jnz     short loc_BF7
.text:00000BF5                 jmp     short loc_C30
.text:00000BF7 ; ---------------------------------------------------------------------------
.text:00000BF7
.text:00000BF7 loc_BF7:                                ; CODE XREF: _free_portfwd_state+7j
.text:00000BF7                 mov     eax, [ebp+arg_0]
.text:00000BFA                 mov     ecx, [eax+20h]
.text:00000BFD                 push    ecx
.text:00000BFE                 call    _safefree
.text:00000C03                 add     esp, 4
.text:00000C06                 mov     edx, [ebp+arg_0]
.text:00000C09                 mov     eax, [edx+28h]
.text:00000C0C                 push    eax
.text:00000C0D                 call    _safefree
.text:00000C12                 add     esp, 4
.text:00000C15                 mov     ecx, [ebp+arg_0]
.text:00000C18                 mov     edx, [ecx+34h]
.text:00000C1B                 push    edx
.text:00000C1C                 call    _safefree
.text:00000C21                 add     esp, 4
.text:00000C24                 mov     eax, [ebp+arg_0]
.text:00000C27                 push    eax
.text:00000C28                 call    _safefree
.text:00000C2D                 add     esp, 4
.text:00000C30
.text:00000C30 loc_C30:                                ; CODE XREF: _free_portfwd_state+9j
.text:00000C30                 cmp     ebp, esp
.text:00000C32                 call    __RTC_CheckEsp
.text:00000C37                 pop     ebp
.text:00000C38                 retn
.text:00000C38 _free_portfwd_state endp
.text:00000C38
.text:00000C38 ; ---------------------------------------------------------------------------
.text:00000C39                 align 4
.text:00000C3C
.text:00000C3C ; =============== S U B R O U T I N E =======================================
.text:00000C3C
.text:00000C3C ; Attributes: bp-based frame
.text:00000C3C
.text:00000C3C _pfl_accepting  proc near               ; DATA XREF: .rdata:00000068o
.text:00000C3C
.text:00000C3C var_10          = dword ptr -10h
.text:00000C3C var_C           = dword ptr -0Ch
.text:00000C3C var_8           = dword ptr -8
.text:00000C3C var_4           = dword ptr -4
.text:00000C3C arg_0           = dword ptr  8
.text:00000C3C arg_4           = dword ptr  0Ch
.text:00000C3C arg_8           = dword ptr  10h
.text:00000C3C
.text:00000C3C                 push    ebp
.text:00000C3D                 mov     ebp, esp
.text:00000C3F                 sub     esp, 10h
.text:00000C42                 push    esi
.text:00000C43                 mov     eax, 0CCCCCCCCh
.text:00000C48                 mov     [ebp+var_10], eax
.text:00000C4B                 mov     [ebp+var_C], eax
.text:00000C4E                 mov     [ebp+var_8], eax
.text:00000C51                 mov     [ebp+var_4], eax
.text:00000C54                 mov     eax, [ebp+arg_0]
.text:00000C57                 mov     [ebp+var_8], eax
.text:00000C5A                 call    _new_portfwd_state
.text:00000C5F                 mov     [ebp+var_4], eax
.text:00000C62                 mov     ecx, [ebp+var_4]
.text:00000C65                 mov     dword ptr [ecx], offset ?fn_table@?1??pfl_accepting@@9@9 ; `pfl_accepting'::`2'::fn_table
.text:00000C6B                 mov     edx, [ebp+var_4]
.text:00000C6E                 mov     dword ptr [edx+4], 0
.text:00000C75                 mov     eax, [ebp+var_4]
.text:00000C78                 mov     ecx, [ebp+var_8]
.text:00000C7B                 mov     edx, [ecx+4]
.text:00000C7E                 mov     [eax+8], edx
.text:00000C81                 mov     esi, esp
.text:00000C83                 mov     eax, [ebp+var_4]
.text:00000C86                 push    eax
.text:00000C87                 mov     ecx, [ebp+arg_8]
.text:00000C8A                 push    ecx
.text:00000C8B                 call    [ebp+arg_4]
.text:00000C8E                 add     esp, 8
.text:00000C91                 cmp     esi, esp
.text:00000C93                 call    __RTC_CheckEsp
.text:00000C98                 mov     [ebp+var_C], eax
.text:00000C9B                 mov     edx, [ebp+var_4]
.text:00000C9E                 mov     eax, [ebp+var_C]
.text:00000CA1                 mov     [edx+0Ch], eax
.text:00000CA4                 mov     esi, esp
.text:00000CA6                 mov     ecx, [ebp+var_C]
.text:00000CA9                 push    ecx
.text:00000CAA                 mov     edx, [ebp+var_C]
.text:00000CAD                 mov     eax, [edx]
.text:00000CAF                 mov     ecx, [eax+1Ch]
.text:00000CB2                 call    ecx
.text:00000CB4                 add     esp, 4
.text:00000CB7                 cmp     esi, esp
.text:00000CB9                 call    __RTC_CheckEsp
.text:00000CBE                 mov     [ebp+var_10], eax
.text:00000CC1                 cmp     [ebp+var_10], 0
.text:00000CC5                 jz      short loc_CE1
.text:00000CC7                 mov     edx, [ebp+var_4]
.text:00000CCA                 push    edx
.text:00000CCB                 call    _free_portfwd_state
.text:00000CD0                 add     esp, 4
.text:00000CD3                 xor     eax, eax
.text:00000CD5                 cmp     [ebp+var_10], 0
.text:00000CD9                 setnz   al
.text:00000CDC                 jmp     loc_DC3
.text:00000CE1 ; ---------------------------------------------------------------------------
.text:00000CE1
.text:00000CE1 loc_CE1:                                ; CODE XREF: _pfl_accepting+89j
.text:00000CE1                 mov     eax, [ebp+var_4]
.text:00000CE4                 mov     dword ptr [eax+14h], 0
.text:00000CEB                 mov     ecx, [ebp+var_4]
.text:00000CEE                 mov     dword ptr [ecx+10h], 0
.text:00000CF5                 mov     edx, [ebp+var_4]
.text:00000CF8                 mov     dword ptr [edx+18h], 0
.text:00000CFF                 mov     eax, [ebp+var_8]
.text:00000D02                 cmp     dword ptr [eax+0Ch], 0
.text:00000D06                 jz      short loc_D3D
.text:00000D08                 mov     ecx, [ebp+var_4]
.text:00000D0B                 mov     dword ptr [ecx+1Ch], 1
.text:00000D12                 mov     edx, [ebp+var_4]
.text:00000D15                 mov     dword ptr [edx+24h], 0
.text:00000D1C                 mov     esi, esp
.text:00000D1E                 push    0
.text:00000D20                 mov     eax, [ebp+var_C]
.text:00000D23                 push    eax
.text:00000D24                 mov     ecx, [ebp+var_C]
.text:00000D27                 mov     edx, [ecx]
.text:00000D29                 mov     eax, [edx+18h]
.text:00000D2C                 call    eax
.text:00000D2E                 add     esp, 8
.text:00000D31                 cmp     esi, esp
.text:00000D33                 call    __RTC_CheckEsp
.text:00000D38                 jmp     loc_DC1
.text:00000D3D ; ---------------------------------------------------------------------------
.text:00000D3D
.text:00000D3D loc_D3D:                                ; CODE XREF: _pfl_accepting+CAj
.text:00000D3D                 mov     ecx, [ebp+var_4]
.text:00000D40                 mov     dword ptr [ecx+1Ch], 0
.text:00000D47                 mov     edx, [ebp+var_8]
.text:00000D4A                 mov     eax, [edx+10h]
.text:00000D4D                 push    eax
.text:00000D4E                 call    _dupstr
.text:00000D53                 add     esp, 4
.text:00000D56                 mov     ecx, [ebp+var_4]
.text:00000D59                 mov     [ecx+20h], eax
.text:00000D5C                 mov     edx, [ebp+var_4]
.text:00000D5F                 mov     eax, [ebp+var_8]
.text:00000D62                 mov     ecx, [eax+14h]
.text:00000D65                 mov     [edx+24h], ecx
.text:00000D68                 mov     edx, [ebp+var_4]
.text:00000D6B                 push    edx
.text:00000D6C                 mov     eax, [ebp+var_8]
.text:00000D6F                 mov     ecx, [eax+4]
.text:00000D72                 push    ecx
.text:00000D73                 call    _new_sock_channel
.text:00000D78                 add     esp, 8
.text:00000D7B                 mov     edx, [ebp+var_4]
.text:00000D7E                 mov     [edx+4], eax
.text:00000D81                 mov     eax, [ebp+var_4]
.text:00000D84                 cmp     dword ptr [eax+4], 0
.text:00000D88                 jnz     short loc_D9F
.text:00000D8A                 mov     ecx, [ebp+var_4]
.text:00000D8D                 push    ecx
.text:00000D8E                 call    _free_portfwd_state
.text:00000D93                 add     esp, 4
.text:00000D96                 mov     eax, 1
.text:00000D9B                 jmp     short loc_DC3
.text:00000D9D ; ---------------------------------------------------------------------------
.text:00000D9D                 jmp     short loc_DC1
.text:00000D9F ; ---------------------------------------------------------------------------
.text:00000D9F
.text:00000D9F loc_D9F:                                ; CODE XREF: _pfl_accepting+14Cj
.text:00000D9F                 push    offset $SG87332 ; "forwarding"
.text:00000DA4                 mov     edx, [ebp+var_4]
.text:00000DA7                 mov     eax, [edx+24h]
.text:00000DAA                 push    eax
.text:00000DAB                 mov     ecx, [ebp+var_4]
.text:00000DAE                 mov     edx, [ecx+20h]
.text:00000DB1                 push    edx
.text:00000DB2                 mov     eax, [ebp+var_4]
.text:00000DB5                 mov     ecx, [eax+4]
.text:00000DB8                 push    ecx
.text:00000DB9                 call    _ssh_send_port_open
.text:00000DBE                 add     esp, 10h
.text:00000DC1
.text:00000DC1 loc_DC1:                                ; CODE XREF: _pfl_accepting+FCj
.text:00000DC1                                         ; _pfl_accepting+161j
.text:00000DC1                 xor     eax, eax
.text:00000DC3
.text:00000DC3 loc_DC3:                                ; CODE XREF: _pfl_accepting+A0j
.text:00000DC3                                         ; _pfl_accepting+15Fj
.text:00000DC3                 pop     esi
.text:00000DC4                 add     esp, 10h
.text:00000DC7                 cmp     ebp, esp
.text:00000DC9                 call    __RTC_CheckEsp
.text:00000DCE                 mov     esp, ebp
.text:00000DD0                 pop     ebp
.text:00000DD1                 retn
.text:00000DD1 _pfl_accepting  endp
.text:00000DD1
.text:00000DD1 ; ---------------------------------------------------------------------------
.text:00000DD2                 db 0Ah dup(0CCh)
.text:00000DDC
.text:00000DDC ; =============== S U B R O U T I N E =======================================
.text:00000DDC
.text:00000DDC ; Attributes: bp-based frame
.text:00000DDC
.text:00000DDC                 public _pfl_listen
.text:00000DDC _pfl_listen     proc near
.text:00000DDC
.text:00000DDC var_C           = dword ptr -0Ch
.text:00000DDC var_8           = dword ptr -8
.text:00000DDC var_4           = dword ptr -4
.text:00000DDC arg_0           = dword ptr  8
.text:00000DDC arg_4           = dword ptr  0Ch
.text:00000DDC arg_8           = dword ptr  10h
.text:00000DDC arg_C           = dword ptr  14h
.text:00000DDC arg_10          = dword ptr  18h
.text:00000DDC arg_14          = dword ptr  1Ch
.text:00000DDC arg_18          = dword ptr  20h
.text:00000DDC arg_1C          = dword ptr  24h
.text:00000DDC
.text:00000DDC                 push    ebp
.text:00000DDD                 mov     ebp, esp
.text:00000DDF                 sub     esp, 0Ch
.text:00000DE2                 push    esi
.text:00000DE3                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000DEA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DF8                 call    _new_portlistener_state
.text:00000DFD                 mov     ecx, [ebp+arg_18]
.text:00000E00                 mov     [ecx], eax
.text:00000E02                 mov     edx, [ebp+arg_18]
.text:00000E05                 mov     eax, [edx]
.text:00000E07                 mov     [ebp+var_8], eax
.text:00000E0A                 mov     ecx, [ebp+var_8]
.text:00000E0D                 mov     dword ptr [ecx], offset ?fn_table@?1??pfl_listen@@9@9 ; `pfl_listen'::`2'::fn_table
.text:00000E13                 cmp     [ebp+arg_0], 0
.text:00000E17                 jz      short loc_E40
.text:00000E19                 mov     edx, [ebp+arg_0]
.text:00000E1C                 push    edx
.text:00000E1D                 call    _dupstr
.text:00000E22                 add     esp, 4
.text:00000E25                 mov     ecx, [ebp+var_8]
.text:00000E28                 mov     [ecx+10h], eax
.text:00000E2B                 mov     edx, [ebp+var_8]
.text:00000E2E                 mov     eax, [ebp+arg_4]
.text:00000E31                 mov     [edx+14h], eax
.text:00000E34                 mov     ecx, [ebp+var_8]
.text:00000E37                 mov     dword ptr [ecx+0Ch], 0
.text:00000E3E                 jmp     short loc_E4A
.text:00000E40 ; ---------------------------------------------------------------------------
.text:00000E40
.text:00000E40 loc_E40:                                ; CODE XREF: _pfl_listen+3Bj
.text:00000E40                 mov     edx, [ebp+var_8]
.text:00000E43                 mov     dword ptr [edx+0Ch], 1
.text:00000E4A
.text:00000E4A loc_E4A:                                ; CODE XREF: _pfl_listen+62j
.text:00000E4A                 mov     eax, [ebp+var_8]
.text:00000E4D                 mov     ecx, [ebp+arg_10]
.text:00000E50                 mov     [eax+4], ecx
.text:00000E53                 mov     edx, [ebp+arg_1C]
.text:00000E56                 push    edx
.text:00000E57                 mov     eax, [ebp+arg_14]
.text:00000E5A                 push    eax
.text:00000E5B                 push    94h ; 'ö'
.text:00000E60                 mov     ecx, [ebp+arg_14]
.text:00000E63                 push    ecx
.text:00000E64                 call    _conf_get_int
.text:00000E69                 add     esp, 8
.text:00000E6C                 neg     eax
.text:00000E6E                 sbb     eax, eax
.text:00000E70                 add     eax, 1
.text:00000E73                 push    eax
.text:00000E74                 mov     edx, [ebp+var_8]
.text:00000E77                 push    edx
.text:00000E78                 mov     eax, [ebp+arg_C]
.text:00000E7B                 push    eax
.text:00000E7C                 mov     ecx, [ebp+arg_8]
.text:00000E7F                 push    ecx
.text:00000E80                 call    _new_listener
.text:00000E85                 add     esp, 18h
.text:00000E88                 mov     edx, [ebp+var_8]
.text:00000E8B                 mov     [edx+8], eax
.text:00000E8E                 mov     esi, esp
.text:00000E90                 mov     eax, [ebp+var_8]
.text:00000E93                 mov     ecx, [eax+8]
.text:00000E96                 push    ecx
.text:00000E97                 mov     edx, [ebp+var_8]
.text:00000E9A                 mov     eax, [edx+8]
.text:00000E9D                 mov     ecx, [eax]
.text:00000E9F                 mov     edx, [ecx+1Ch]
.text:00000EA2                 call    edx
.text:00000EA4                 add     esp, 4
.text:00000EA7                 cmp     esi, esp
.text:00000EA9                 call    __RTC_CheckEsp
.text:00000EAE                 mov     [ebp+var_4], eax
.text:00000EB1                 cmp     [ebp+var_4], 0
.text:00000EB5                 jz      short loc_F00
.text:00000EB7                 mov     eax, [ebp+var_4]
.text:00000EBA                 push    eax
.text:00000EBB                 call    _dupstr
.text:00000EC0                 add     esp, 4
.text:00000EC3                 mov     [ebp+var_C], eax
.text:00000EC6                 mov     esi, esp
.text:00000EC8                 mov     ecx, [ebp+var_8]
.text:00000ECB                 mov     edx, [ecx+8]
.text:00000ECE                 push    edx
.text:00000ECF                 mov     eax, [ebp+var_8]
.text:00000ED2                 mov     ecx, [eax+8]
.text:00000ED5                 mov     edx, [ecx]
.text:00000ED7                 mov     eax, [edx+4]
.text:00000EDA                 call    eax
.text:00000EDC                 add     esp, 4
.text:00000EDF                 cmp     esi, esp
.text:00000EE1                 call    __RTC_CheckEsp
.text:00000EE6                 mov     ecx, [ebp+var_8]
.text:00000EE9                 push    ecx
.text:00000EEA                 call    _free_portlistener_state
.text:00000EEF                 add     esp, 4
.text:00000EF2                 mov     edx, [ebp+arg_18]
.text:00000EF5                 mov     dword ptr [edx], 0
.text:00000EFB                 mov     eax, [ebp+var_C]
.text:00000EFE                 jmp     short loc_F02
.text:00000F00 ; ---------------------------------------------------------------------------
.text:00000F00
.text:00000F00 loc_F00:                                ; CODE XREF: _pfl_listen+D9j
.text:00000F00                 xor     eax, eax
.text:00000F02
.text:00000F02 loc_F02:                                ; CODE XREF: _pfl_listen+122j
.text:00000F02                 pop     esi
.text:00000F03                 add     esp, 0Ch
.text:00000F06                 cmp     ebp, esp
.text:00000F08                 call    __RTC_CheckEsp
.text:00000F0D                 mov     esp, ebp
.text:00000F0F                 pop     ebp
.text:00000F10                 retn
.text:00000F10 _pfl_listen     endp
.text:00000F10
.text:00000F10 ; ---------------------------------------------------------------------------
.text:00000F11                 db 0Bh dup(0CCh)
.text:00000F1C
.text:00000F1C ; =============== S U B R O U T I N E =======================================
.text:00000F1C
.text:00000F1C ; Attributes: bp-based frame
.text:00000F1C
.text:00000F1C _new_portlistener_state proc near       ; CODE XREF: _pfl_listen+1Cp
.text:00000F1C
.text:00000F1C var_4           = dword ptr -4
.text:00000F1C
.text:00000F1C                 push    ebp
.text:00000F1D                 mov     ebp, esp
.text:00000F1F                 push    ecx
.text:00000F20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F27                 push    18h
.text:00000F29                 push    1
.text:00000F2B                 call    _safemalloc
.text:00000F30                 add     esp, 8
.text:00000F33                 mov     [ebp+var_4], eax
.text:00000F36                 mov     eax, [ebp+var_4]
.text:00000F39                 mov     dword ptr [eax+10h], 0
.text:00000F40                 mov     eax, [ebp+var_4]
.text:00000F43                 add     esp, 4
.text:00000F46                 cmp     ebp, esp
.text:00000F48                 call    __RTC_CheckEsp
.text:00000F4D                 mov     esp, ebp
.text:00000F4F                 pop     ebp
.text:00000F50                 retn
.text:00000F50 _new_portlistener_state endp
.text:00000F50
.text:00000F50 ; ---------------------------------------------------------------------------
.text:00000F51                 db 0Bh dup(0CCh)
.text:00000F5C
.text:00000F5C ; =============== S U B R O U T I N E =======================================
.text:00000F5C
.text:00000F5C ; Attributes: bp-based frame
.text:00000F5C
.text:00000F5C _free_portlistener_state proc near      ; CODE XREF: _pfl_listen+10Ep
.text:00000F5C                                         ; _pfl_terminate+30p
.text:00000F5C
.text:00000F5C arg_0           = dword ptr  8
.text:00000F5C
.text:00000F5C                 push    ebp
.text:00000F5D                 mov     ebp, esp
.text:00000F5F                 cmp     [ebp+arg_0], 0
.text:00000F63                 jnz     short loc_F67
.text:00000F65                 jmp     short loc_F82
.text:00000F67 ; ---------------------------------------------------------------------------
.text:00000F67
.text:00000F67 loc_F67:                                ; CODE XREF: _free_portlistener_state+7j
.text:00000F67                 mov     eax, [ebp+arg_0]
.text:00000F6A                 mov     ecx, [eax+10h]
.text:00000F6D                 push    ecx
.text:00000F6E                 call    _safefree
.text:00000F73                 add     esp, 4
.text:00000F76                 mov     edx, [ebp+arg_0]
.text:00000F79                 push    edx
.text:00000F7A                 call    _safefree
.text:00000F7F                 add     esp, 4
.text:00000F82
.text:00000F82 loc_F82:                                ; CODE XREF: _free_portlistener_state+9j
.text:00000F82                 cmp     ebp, esp
.text:00000F84                 call    __RTC_CheckEsp
.text:00000F89                 pop     ebp
.text:00000F8A                 retn
.text:00000F8A _free_portlistener_state endp
.text:00000F8A
.text:00000F8A ; ---------------------------------------------------------------------------
.text:00000F8B                 align 4
.text:00000F8C
.text:00000F8C ; =============== S U B R O U T I N E =======================================
.text:00000F8C
.text:00000F8C ; Attributes: bp-based frame
.text:00000F8C
.text:00000F8C                 public _pfd_close
.text:00000F8C _pfd_close      proc near               ; CODE XREF: _pfd_closing+39p
.text:00000F8C                                         ; _pfd_receive+15Dp ...
.text:00000F8C
.text:00000F8C arg_0           = dword ptr  8
.text:00000F8C
.text:00000F8C                 push    ebp
.text:00000F8D                 mov     ebp, esp
.text:00000F8F                 push    esi
.text:00000F90                 cmp     [ebp+arg_0], 0
.text:00000F94                 jnz     short loc_F98
.text:00000F96                 jmp     short loc_FC4
.text:00000F98 ; ---------------------------------------------------------------------------
.text:00000F98
.text:00000F98 loc_F98:                                ; CODE XREF: _pfd_close+8j
.text:00000F98                 mov     esi, esp
.text:00000F9A                 mov     eax, [ebp+arg_0]
.text:00000F9D                 mov     ecx, [eax+0Ch]
.text:00000FA0                 push    ecx
.text:00000FA1                 mov     edx, [ebp+arg_0]
.text:00000FA4                 mov     eax, [edx+0Ch]
.text:00000FA7                 mov     ecx, [eax]
.text:00000FA9                 mov     edx, [ecx+4]
.text:00000FAC                 call    edx
.text:00000FAE                 add     esp, 4
.text:00000FB1                 cmp     esi, esp
.text:00000FB3                 call    __RTC_CheckEsp
.text:00000FB8                 mov     eax, [ebp+arg_0]
.text:00000FBB                 push    eax
.text:00000FBC                 call    _free_portfwd_state
.text:00000FC1                 add     esp, 4
.text:00000FC4
.text:00000FC4 loc_FC4:                                ; CODE XREF: _pfd_close+Aj
.text:00000FC4                 pop     esi
.text:00000FC5                 cmp     ebp, esp
.text:00000FC7                 call    __RTC_CheckEsp
.text:00000FCC                 pop     ebp
.text:00000FCD                 retn
.text:00000FCD _pfd_close      endp
.text:00000FCD
.text:00000FCD ; ---------------------------------------------------------------------------
.text:00000FCE                 db 0Eh dup(0CCh)
.text:00000FDC
.text:00000FDC ; =============== S U B R O U T I N E =======================================
.text:00000FDC
.text:00000FDC ; Attributes: bp-based frame
.text:00000FDC
.text:00000FDC                 public _pfl_terminate
.text:00000FDC _pfl_terminate  proc near               ; CODE XREF: _pfl_closing+15p
.text:00000FDC
.text:00000FDC arg_0           = dword ptr  8
.text:00000FDC
.text:00000FDC                 push    ebp
.text:00000FDD                 mov     ebp, esp
.text:00000FDF                 push    esi
.text:00000FE0                 cmp     [ebp+arg_0], 0
.text:00000FE4                 jnz     short loc_FE8
.text:00000FE6                 jmp     short loc_1014
.text:00000FE8 ; ---------------------------------------------------------------------------
.text:00000FE8
.text:00000FE8 loc_FE8:                                ; CODE XREF: _pfl_terminate+8j
.text:00000FE8                 mov     esi, esp
.text:00000FEA                 mov     eax, [ebp+arg_0]
.text:00000FED                 mov     ecx, [eax+8]
.text:00000FF0                 push    ecx
.text:00000FF1                 mov     edx, [ebp+arg_0]
.text:00000FF4                 mov     eax, [edx+8]
.text:00000FF7                 mov     ecx, [eax]
.text:00000FF9                 mov     edx, [ecx+4]
.text:00000FFC                 call    edx
.text:00000FFE                 add     esp, 4
.text:00001001                 cmp     esi, esp
.text:00001003                 call    __RTC_CheckEsp
.text:00001008                 mov     eax, [ebp+arg_0]
.text:0000100B                 push    eax
.text:0000100C                 call    _free_portlistener_state
.text:00001011                 add     esp, 4
.text:00001014
.text:00001014 loc_1014:                               ; CODE XREF: _pfl_terminate+Aj
.text:00001014                 pop     esi
.text:00001015                 cmp     ebp, esp
.text:00001017                 call    __RTC_CheckEsp
.text:0000101C                 pop     ebp
.text:0000101D                 retn
.text:0000101D _pfl_terminate  endp
.text:0000101D
.text:0000101D ; ---------------------------------------------------------------------------
.text:0000101E                 db 0Eh dup(0CCh)
.text:0000102C
.text:0000102C ; =============== S U B R O U T I N E =======================================
.text:0000102C
.text:0000102C ; Attributes: bp-based frame
.text:0000102C
.text:0000102C                 public _pfd_unthrottle
.text:0000102C _pfd_unthrottle proc near
.text:0000102C
.text:0000102C var_4           = dword ptr -4
.text:0000102C arg_0           = dword ptr  8
.text:0000102C
.text:0000102C                 push    ebp
.text:0000102D                 mov     ebp, esp
.text:0000102F                 push    ecx
.text:00001030                 push    esi
.text:00001031                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001038                 cmp     [ebp+arg_0], 0
.text:0000103C                 jnz     short loc_1040
.text:0000103E                 jmp     short loc_1090
.text:00001040 ; ---------------------------------------------------------------------------
.text:00001040
.text:00001040 loc_1040:                               ; CODE XREF: _pfd_unthrottle+10j
.text:00001040                 mov     eax, [ebp+arg_0]
.text:00001043                 mov     dword ptr [eax+10h], 0
.text:0000104A                 mov     ecx, [ebp+arg_0]
.text:0000104D                 cmp     dword ptr [ecx+10h], 0
.text:00001051                 jnz     short loc_1065
.text:00001053                 mov     edx, [ebp+arg_0]
.text:00001056                 cmp     dword ptr [edx+14h], 0
.text:0000105A                 jnz     short loc_1065
.text:0000105C                 mov     [ebp+var_4], 0
.text:00001063                 jmp     short loc_106C
.text:00001065 ; ---------------------------------------------------------------------------
.text:00001065
.text:00001065 loc_1065:                               ; CODE XREF: _pfd_unthrottle+25j
.text:00001065                                         ; _pfd_unthrottle+2Ej
.text:00001065                 mov     [ebp+var_4], 1
.text:0000106C
.text:0000106C loc_106C:                               ; CODE XREF: _pfd_unthrottle+37j
.text:0000106C                 mov     esi, esp
.text:0000106E                 mov     eax, [ebp+var_4]
.text:00001071                 push    eax
.text:00001072                 mov     ecx, [ebp+arg_0]
.text:00001075                 mov     edx, [ecx+0Ch]
.text:00001078                 push    edx
.text:00001079                 mov     eax, [ebp+arg_0]
.text:0000107C                 mov     ecx, [eax+0Ch]
.text:0000107F                 mov     edx, [ecx]
.text:00001081                 mov     eax, [edx+18h]
.text:00001084                 call    eax
.text:00001086                 add     esp, 8
.text:00001089                 cmp     esi, esp
.text:0000108B                 call    __RTC_CheckEsp
.text:00001090
.text:00001090 loc_1090:                               ; CODE XREF: _pfd_unthrottle+12j
.text:00001090                 pop     esi
.text:00001091                 add     esp, 4
.text:00001094                 cmp     ebp, esp
.text:00001096                 call    __RTC_CheckEsp
.text:0000109B                 mov     esp, ebp
.text:0000109D                 pop     ebp
.text:0000109E                 retn
.text:0000109E _pfd_unthrottle endp
.text:0000109E
.text:0000109E ; ---------------------------------------------------------------------------
.text:0000109F                 db 0Dh dup(0CCh)
.text:000010AC
.text:000010AC ; =============== S U B R O U T I N E =======================================
.text:000010AC
.text:000010AC ; Attributes: bp-based frame
.text:000010AC
.text:000010AC                 public _pfd_override_throttle
.text:000010AC _pfd_override_throttle proc near
.text:000010AC
.text:000010AC var_4           = dword ptr -4
.text:000010AC arg_0           = dword ptr  8
.text:000010AC arg_4           = dword ptr  0Ch
.text:000010AC
.text:000010AC                 push    ebp
.text:000010AD                 mov     ebp, esp
.text:000010AF                 push    ecx
.text:000010B0                 push    esi
.text:000010B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010B8                 cmp     [ebp+arg_0], 0
.text:000010BC                 jnz     short loc_10C0
.text:000010BE                 jmp     short loc_110F
.text:000010C0 ; ---------------------------------------------------------------------------
.text:000010C0
.text:000010C0 loc_10C0:                               ; CODE XREF: _pfd_override_throttle+10j
.text:000010C0                 mov     eax, [ebp+arg_0]
.text:000010C3                 mov     ecx, [ebp+arg_4]
.text:000010C6                 mov     [eax+14h], ecx
.text:000010C9                 mov     edx, [ebp+arg_0]
.text:000010CC                 cmp     dword ptr [edx+10h], 0
.text:000010D0                 jnz     short loc_10E4
.text:000010D2                 mov     eax, [ebp+arg_0]
.text:000010D5                 cmp     dword ptr [eax+14h], 0
.text:000010D9                 jnz     short loc_10E4
.text:000010DB                 mov     [ebp+var_4], 0
.text:000010E2                 jmp     short loc_10EB
.text:000010E4 ; ---------------------------------------------------------------------------
.text:000010E4
.text:000010E4 loc_10E4:                               ; CODE XREF: _pfd_override_throttle+24j
.text:000010E4                                         ; _pfd_override_throttle+2Dj
.text:000010E4                 mov     [ebp+var_4], 1
.text:000010EB
.text:000010EB loc_10EB:                               ; CODE XREF: _pfd_override_throttle+36j
.text:000010EB                 mov     esi, esp
.text:000010ED                 mov     ecx, [ebp+var_4]
.text:000010F0                 push    ecx
.text:000010F1                 mov     edx, [ebp+arg_0]
.text:000010F4                 mov     eax, [edx+0Ch]
.text:000010F7                 push    eax
.text:000010F8                 mov     ecx, [ebp+arg_0]
.text:000010FB                 mov     edx, [ecx+0Ch]
.text:000010FE                 mov     eax, [edx]
.text:00001100                 mov     ecx, [eax+18h]
.text:00001103                 call    ecx
.text:00001105                 add     esp, 8
.text:00001108                 cmp     esi, esp
.text:0000110A                 call    __RTC_CheckEsp
.text:0000110F
.text:0000110F loc_110F:                               ; CODE XREF: _pfd_override_throttle+12j
.text:0000110F                 pop     esi
.text:00001110                 add     esp, 4
.text:00001113                 cmp     ebp, esp
.text:00001115                 call    __RTC_CheckEsp
.text:0000111A                 mov     esp, ebp
.text:0000111C                 pop     ebp
.text:0000111D                 retn
.text:0000111D _pfd_override_throttle endp
.text:0000111D
.text:0000111D ; ---------------------------------------------------------------------------
.text:0000111E                 db 0Eh dup(0CCh)
.text:0000112C
.text:0000112C ; =============== S U B R O U T I N E =======================================
.text:0000112C
.text:0000112C ; Attributes: bp-based frame
.text:0000112C
.text:0000112C                 public _pfd_send
.text:0000112C _pfd_send       proc near
.text:0000112C
.text:0000112C arg_0           = dword ptr  8
.text:0000112C arg_4           = dword ptr  0Ch
.text:0000112C arg_8           = dword ptr  10h
.text:0000112C
.text:0000112C                 push    ebp
.text:0000112D                 mov     ebp, esp
.text:0000112F                 push    esi
.text:00001130                 cmp     [ebp+arg_0], 0
.text:00001134                 jnz     short loc_113A
.text:00001136                 xor     eax, eax
.text:00001138                 jmp     short loc_1162
.text:0000113A ; ---------------------------------------------------------------------------
.text:0000113A
.text:0000113A loc_113A:                               ; CODE XREF: _pfd_send+8j
.text:0000113A                 mov     esi, esp
.text:0000113C                 mov     eax, [ebp+arg_8]
.text:0000113F                 push    eax
.text:00001140                 mov     ecx, [ebp+arg_4]
.text:00001143                 push    ecx
.text:00001144                 mov     edx, [ebp+arg_0]
.text:00001147                 mov     eax, [edx+0Ch]
.text:0000114A                 push    eax
.text:0000114B                 mov     ecx, [ebp+arg_0]
.text:0000114E                 mov     edx, [ecx+0Ch]
.text:00001151                 mov     eax, [edx]
.text:00001153                 mov     ecx, [eax+8]
.text:00001156                 call    ecx
.text:00001158                 add     esp, 0Ch
.text:0000115B                 cmp     esi, esp
.text:0000115D                 call    __RTC_CheckEsp
.text:00001162
.text:00001162 loc_1162:                               ; CODE XREF: _pfd_send+Cj
.text:00001162                 pop     esi
.text:00001163                 cmp     ebp, esp
.text:00001165                 call    __RTC_CheckEsp
.text:0000116A                 pop     ebp
.text:0000116B                 retn
.text:0000116B _pfd_send       endp
.text:0000116B
.text:0000116C
.text:0000116C ; =============== S U B R O U T I N E =======================================
.text:0000116C
.text:0000116C ; Attributes: bp-based frame
.text:0000116C
.text:0000116C                 public _pfd_send_eof
.text:0000116C _pfd_send_eof   proc near
.text:0000116C
.text:0000116C arg_0           = dword ptr  8
.text:0000116C
.text:0000116C                 push    ebp
.text:0000116D                 mov     ebp, esp
.text:0000116F                 push    esi
.text:00001170                 mov     esi, esp
.text:00001172                 mov     eax, [ebp+arg_0]
.text:00001175                 mov     ecx, [eax+0Ch]
.text:00001178                 push    ecx
.text:00001179                 mov     edx, [ebp+arg_0]
.text:0000117C                 mov     eax, [edx+0Ch]
.text:0000117F                 mov     ecx, [eax]
.text:00001181                 mov     edx, [ecx+10h]
.text:00001184                 call    edx
.text:00001186                 add     esp, 4
.text:00001189                 cmp     esi, esp
.text:0000118B                 call    __RTC_CheckEsp
.text:00001190                 pop     esi
.text:00001191                 cmp     ebp, esp
.text:00001193                 call    __RTC_CheckEsp
.text:00001198                 pop     ebp
.text:00001199                 retn
.text:00001199 _pfd_send_eof   endp
.text:00001199
.text:00001199 ; ---------------------------------------------------------------------------
.text:0000119A                 align 4
.text:0000119C
.text:0000119C ; =============== S U B R O U T I N E =======================================
.text:0000119C
.text:0000119C ; Attributes: bp-based frame
.text:0000119C
.text:0000119C                 public _pfd_confirm
.text:0000119C _pfd_confirm    proc near
.text:0000119C
.text:0000119C arg_0           = dword ptr  8
.text:0000119C
.text:0000119C                 push    ebp
.text:0000119D                 mov     ebp, esp
.text:0000119F                 push    esi
.text:000011A0                 cmp     [ebp+arg_0], 0
.text:000011A4                 jnz     short loc_11AB
.text:000011A6                 jmp     loc_123A
.text:000011AB ; ---------------------------------------------------------------------------
.text:000011AB
.text:000011AB loc_11AB:                               ; CODE XREF: _pfd_confirm+8j
.text:000011AB                 mov     eax, [ebp+arg_0]
.text:000011AE                 mov     dword ptr [eax+18h], 1
.text:000011B5                 mov     esi, esp
.text:000011B7                 push    0
.text:000011B9                 mov     ecx, [ebp+arg_0]
.text:000011BC                 mov     edx, [ecx+0Ch]
.text:000011BF                 push    edx
.text:000011C0                 mov     eax, [ebp+arg_0]
.text:000011C3                 mov     ecx, [eax+0Ch]
.text:000011C6                 mov     edx, [ecx]
.text:000011C8                 mov     eax, [edx+18h]
.text:000011CB                 call    eax
.text:000011CD                 add     esp, 8
.text:000011D0                 cmp     esi, esp
.text:000011D2                 call    __RTC_CheckEsp
.text:000011D7                 mov     esi, esp
.text:000011D9                 push    0
.text:000011DB                 push    0
.text:000011DD                 mov     ecx, [ebp+arg_0]
.text:000011E0                 mov     edx, [ecx+0Ch]
.text:000011E3                 push    edx
.text:000011E4                 mov     eax, [ebp+arg_0]
.text:000011E7                 mov     ecx, [eax+0Ch]
.text:000011EA                 mov     edx, [ecx]
.text:000011EC                 mov     eax, [edx+8]
.text:000011EF                 call    eax
.text:000011F1                 add     esp, 0Ch
.text:000011F4                 cmp     esi, esp
.text:000011F6                 call    __RTC_CheckEsp
.text:000011FB                 mov     ecx, [ebp+arg_0]
.text:000011FE                 cmp     dword ptr [ecx+34h], 0
.text:00001202                 jz      short loc_123A
.text:00001204                 mov     edx, [ebp+arg_0]
.text:00001207                 mov     eax, [edx+38h]
.text:0000120A                 push    eax
.text:0000120B                 mov     ecx, [ebp+arg_0]
.text:0000120E                 mov     edx, [ecx+34h]
.text:00001211                 push    edx
.text:00001212                 mov     eax, [ebp+arg_0]
.text:00001215                 mov     ecx, [eax+4]
.text:00001218                 push    ecx
.text:00001219                 call    _sshfwd_write
.text:0000121E                 add     esp, 0Ch
.text:00001221                 mov     edx, [ebp+arg_0]
.text:00001224                 mov     eax, [edx+34h]
.text:00001227                 push    eax
.text:00001228                 call    _safefree
.text:0000122D                 add     esp, 4
.text:00001230                 mov     ecx, [ebp+arg_0]
.text:00001233                 mov     dword ptr [ecx+34h], 0
.text:0000123A
.text:0000123A loc_123A:                               ; CODE XREF: _pfd_confirm+Aj
.text:0000123A                                         ; _pfd_confirm+66j
.text:0000123A                 pop     esi
.text:0000123B                 cmp     ebp, esp
.text:0000123D                 call    __RTC_CheckEsp
.text:00001242                 pop     ebp
.text:00001243                 retn
.text:00001243 _pfd_confirm    endp
.text:00001243
.text:00001243 _text           ends
.text:00001243
.rtc$TMZ:00001244 ; ===========================================================================
.rtc$TMZ:00001244
.rtc$TMZ:00001244 ; Segment type: Pure data
.rtc$TMZ:00001244 ; Segment permissions: Read
.rtc$TMZ:00001244 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001244                 assume cs:_rtc$TMZ
.rtc$TMZ:00001244                 ;org 1244h
.rtc$TMZ:00001244 ; COMDAT (pick any)
.rtc$TMZ:00001244 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001244 _rtc$TMZ        ends
.rtc$TMZ:00001244
.rtc$IMZ:00001248 ; ===========================================================================
.rtc$IMZ:00001248
.rtc$IMZ:00001248 ; Segment type: Pure data
.rtc$IMZ:00001248 ; Segment permissions: Read
.rtc$IMZ:00001248 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001248                 assume cs:_rtc$IMZ
.rtc$IMZ:00001248                 ;org 1248h
.rtc$IMZ:00001248 ; COMDAT (pick any)
.rtc$IMZ:00001248 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001248 _rtc$IMZ        ends
.rtc$IMZ:00001248
UNDEF:00001250 ; ===========================================================================
UNDEF:00001250
UNDEF:00001250 ; Segment type: Externs
UNDEF:00001250 ; UNDEF
UNDEF:00001250                 extrn __RTC_Shutdown:near
UNDEF:00001250                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001254                 extrn __RTC_InitBase:near
UNDEF:00001254                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001258                 extrn _sshfwd_write_eof:near ; CODE XREF: _pfd_closing+53p
UNDEF:0000125C                 extrn _sshfwd_unclean_close:near
UNDEF:0000125C                                         ; CODE XREF: _pfd_closing+2Bp
UNDEF:00001260                 extrn __RTC_CheckEsp:near ; CODE XREF: _pfd_closing+65p
UNDEF:00001260                                         ; _pfl_closing+27p ...
UNDEF:00001264                 extrn _sshfwd_write:near ; CODE XREF: _pfd_receive+7ABp
UNDEF:00001264                                         ; _pfd_confirm+7Dp
UNDEF:00001268                 extrn _ssh_send_port_open:near ; CODE XREF: _pfd_receive+747p
UNDEF:00001268                                         ; _pfl_accepting+17Dp
UNDEF:0000126C                 extrn _new_sock_channel:near ; CODE XREF: _pfd_receive+6FEp
UNDEF:0000126C                                         ; _pfl_accepting+137p
UNDEF:00001270                 extrn _safefree:near    ; CODE XREF: _pfd_receive+6BFp
UNDEF:00001270                                         ; _pfd_connect+77p ...
UNDEF:00001274                 extrn _dupprintf:near   ; CODE XREF: _pfd_receive+342p
UNDEF:00001274                                         ; _pfd_receive+5C9p
UNDEF:00001278 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001278                 extrn _memcpy:near      ; CODE XREF: _pfd_receive+2A4p
UNDEF:00001278                                         ; _pfd_receive+647p ...
UNDEF:0000127C                 extrn _safemalloc:near  ; CODE XREF: _pfd_receive+274p
UNDEF:0000127C                                         ; _pfd_receive+613p ...
UNDEF:00001280 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00001280                 extrn _memset:near      ; CODE XREF: _pfd_receive+127p
UNDEF:00001280                                         ; _pfd_receive+47Ap
UNDEF:00001284                 extrn _saferealloc:near ; CODE XREF: _pfd_receive+88p
UNDEF:00001288                 extrn ___security_cookie:near ; DATA XREF: _pfd_receive+17r
UNDEF:0000128C ; __fastcall __security_check_cookie(x)
UNDEF:0000128C                 extrn @__security_check_cookie@4:near
UNDEF:0000128C                                         ; CODE XREF: _pfd_receive+800p
UNDEF:00001290 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001290                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001290                                         ; CODE XREF: _pfd_receive+7F2p
UNDEF:00001290                                         ; _pfd_connect+191p
UNDEF:00001294                 extrn _sshfwd_unthrottle:near ; CODE XREF: _pfd_sent+25p
UNDEF:00001298                 extrn _new_connection:near ; CODE XREF: _pfd_connect+F9p
UNDEF:0000129C                 extrn _sk_addr_free:near ; CODE XREF: _pfd_connect+6Bp
UNDEF:000012A0                 extrn _dupstr:near      ; CODE XREF: _pfd_connect+5Cp
UNDEF:000012A0                                         ; _pfd_connect+140p ...
UNDEF:000012A4                 extrn _sk_addr_error:near ; CODE XREF: _pfd_connect+47p
UNDEF:000012A8                 extrn _name_lookup:near ; CODE XREF: _pfd_connect+38p
UNDEF:000012AC                 extrn _new_listener:near ; CODE XREF: _pfl_listen+A4p
UNDEF:000012B0                 extrn _conf_get_int:near ; CODE XREF: _pfl_listen+88p
UNDEF:000012B0
UNDEF:000012B0
UNDEF:000012B0                 end