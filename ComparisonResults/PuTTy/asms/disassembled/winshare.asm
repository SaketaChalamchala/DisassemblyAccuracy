.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 133653974F0C208701CBFDDE17261FC9
.data:00000000 ; Input CRC32 : 8D0EBF8B
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winshare.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG88010[]
.data:00000000 $SG88010        db '%02x',0             ; DATA XREF: _obfuscate_name+163o
.data:00000005                 align 4
.data:00000008 $SG88019        db '%s.%s.%s',0         ; DATA XREF: _make_name+28o
.data:00000011                 align 4
.data:00000014 $SG88059        db 'Unable to call CryptProtectMemory: %s',0
.data:00000014                                         ; DATA XREF: _platform_ssh_share+45o
.data:0000003A                 align 4
.data:0000003C $SG88061        db 'Local\putty-connshare-mutex',0
.data:0000003C                                         ; DATA XREF: _platform_ssh_share+62o
.data:00000058 $SG88064        db 'CreateMutex("%s") failed: %s',0
.data:00000058                                         ; DATA XREF: _platform_ssh_share+111o
.data:00000075                 align 4
.data:00000078 $SG88065        db '\\.\pipe\putty-connshare',0
.data:00000078                                         ; DATA XREF: _platform_ssh_share+1B3o
.data:00000091                 align 4
.data:00000094 $SG88070        db '%s: %s',0           ; DATA XREF: _platform_ssh_share+28Eo
.data:0000009B                 align 4
.data:0000009C $SG88074        db '%s: %s',0           ; DATA XREF: _platform_ssh_share+37Co
.data:000000A3                 align 4
.data:000000A4 ; wchar_t _SG88076
.data:000000A4 $SG88076:                               ; DATA XREF: _platform_ssh_share+3C5o
.data:000000A4                 unicode 0, <..\..\winshare.c>,0
.data:000000C6                 align 4
.data:000000C8 ; wchar_t _SG88077
.data:000000C8 $SG88077:                               ; DATA XREF: _platform_ssh_share+3CAo
.data:000000C8                 unicode 0, <*logtext || *ds_err || *us_err>,0
.data:00000106                 align 4
.data:00000106 _data           ends
.data:00000106
.text:00000108 ; ===========================================================================
.text:00000108
.text:00000108 ; Segment type: Pure code
.text:00000108 ; Segment permissions: Read/Execute
.text:00000108 _text           segment para public 'CODE' use32
.text:00000108                 assume cs:_text
.text:00000108                 ;org 108h
.text:00000108                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000108
.text:00000108 ; =============== S U B R O U T I N E =======================================
.text:00000108
.text:00000108 ; Attributes: bp-based frame
.text:00000108
.text:00000108 ; int __cdecl platform_ssh_share(char *Str, int, int, int, int, int, int, int, int, int)
.text:00000108                 public _platform_ssh_share
.text:00000108 _platform_ssh_share proc near
.text:00000108
.text:00000108 var_40          = byte ptr -40h
.text:00000108 Dst             = dword ptr -3Ch
.text:00000108 var_38          = dword ptr -38h
.text:00000108 var_34          = dword ptr -34h
.text:00000108 var_28          = dword ptr -28h
.text:00000108 hMem            = dword ptr -1Ch
.text:00000108 var_14          = dword ptr -14h
.text:00000108 hHandle         = dword ptr -10h
.text:00000108 var_C           = dword ptr -0Ch
.text:00000108 lpName          = dword ptr -8
.text:00000108 var_4           = dword ptr -4
.text:00000108 Str             = dword ptr  8
.text:00000108 arg_8           = dword ptr  10h
.text:00000108 arg_C           = dword ptr  14h
.text:00000108 arg_10          = dword ptr  18h
.text:00000108 arg_14          = dword ptr  1Ch
.text:00000108 arg_18          = dword ptr  20h
.text:00000108 arg_1C          = dword ptr  24h
.text:00000108 arg_20          = dword ptr  28h
.text:00000108 arg_24          = dword ptr  2Ch
.text:00000108
.text:00000108                 push    ebp
.text:00000109                 mov     ebp, esp
.text:0000010B                 sub     esp, 40h
.text:0000010E                 push    esi
.text:0000010F                 push    edi
.text:00000110                 lea     edi, [ebp+var_40]
.text:00000113                 mov     ecx, 10h
.text:00000118                 mov     eax, 0CCCCCCCCh
.text:0000011D                 rep stosd
.text:0000011F                 mov     eax, [ebp+Str]
.text:00000122                 push    eax             ; Str
.text:00000123                 call    _obfuscate_name
.text:00000128                 add     esp, 4
.text:0000012B                 mov     [ebp+var_4], eax
.text:0000012E                 cmp     [ebp+var_4], 0
.text:00000132                 jnz     short loc_166
.text:00000134                 mov     esi, esp
.text:00000136                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000013C                 cmp     esi, esp
.text:0000013E                 call    __RTC_CheckEsp
.text:00000143                 push    eax
.text:00000144                 call    _win_strerror
.text:00000149                 add     esp, 4
.text:0000014C                 push    eax
.text:0000014D                 push    offset $SG88059 ; "Unable to call CryptProtectMemory: %s"
.text:00000152                 call    _dupprintf
.text:00000157                 add     esp, 8
.text:0000015A                 mov     ecx, [ebp+arg_14]
.text:0000015D                 mov     [ecx], eax
.text:0000015F                 xor     eax, eax
.text:00000161                 jmp     loc_51F
.text:00000166 ; ---------------------------------------------------------------------------
.text:00000166
.text:00000166 loc_166:                                ; CODE XREF: _platform_ssh_share+2Aj
.text:00000166                 mov     edx, [ebp+var_4]
.text:00000169                 push    edx
.text:0000016A                 push    offset $SG88061 ; "Local\\putty-connshare-mutex"
.text:0000016F                 call    _make_name
.text:00000174                 add     esp, 8
.text:00000177                 mov     [ebp+lpName], eax
.text:0000017A                 mov     eax, [ebp+arg_14]
.text:0000017D                 push    eax
.text:0000017E                 lea     ecx, [ebp+var_28]
.text:00000181                 push    ecx
.text:00000182                 lea     edx, [ebp+hMem]
.text:00000185                 push    edx
.text:00000186                 push    1F0001h
.text:0000018B                 call    _make_private_security_descriptor
.text:00000190                 add     esp, 10h
.text:00000193                 test    eax, eax
.text:00000195                 jnz     short loc_1B6
.text:00000197                 mov     eax, [ebp+lpName]
.text:0000019A                 push    eax
.text:0000019B                 call    _safefree
.text:000001A0                 add     esp, 4
.text:000001A3                 mov     ecx, [ebp+var_4]
.text:000001A6                 push    ecx
.text:000001A7                 call    _safefree
.text:000001AC                 add     esp, 4
.text:000001AF                 xor     eax, eax
.text:000001B1                 jmp     loc_51F
.text:000001B6 ; ---------------------------------------------------------------------------
.text:000001B6
.text:000001B6 loc_1B6:                                ; CODE XREF: _platform_ssh_share+8Dj
.text:000001B6                 push    0Ch             ; Size
.text:000001B8                 push    0               ; Val
.text:000001BA                 lea     edx, [ebp+Dst]
.text:000001BD                 push    edx             ; Dst
.text:000001BE                 call    _memset
.text:000001C3                 add     esp, 0Ch
.text:000001C6                 mov     [ebp+Dst], 0Ch
.text:000001CD                 mov     eax, [ebp+hMem]
.text:000001D0                 mov     [ebp+var_38], eax
.text:000001D3                 mov     [ebp+var_34], 0
.text:000001DA                 mov     esi, esp
.text:000001DC                 mov     ecx, [ebp+lpName]
.text:000001DF                 push    ecx             ; lpName
.text:000001E0                 push    0               ; bInitialOwner
.text:000001E2                 lea     edx, [ebp+Dst]
.text:000001E5                 push    edx             ; lpMutexAttributes
.text:000001E6                 call    dword ptr ds:__imp__CreateMutexA@12 ; CreateMutexA(x,x,x)
.text:000001EC                 cmp     esi, esp
.text:000001EE                 call    __RTC_CheckEsp
.text:000001F3                 mov     [ebp+hHandle], eax
.text:000001F6                 cmp     [ebp+hHandle], 0
.text:000001FA                 jnz     short loc_270
.text:000001FC                 mov     esi, esp
.text:000001FE                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000204                 cmp     esi, esp
.text:00000206                 call    __RTC_CheckEsp
.text:0000020B                 push    eax
.text:0000020C                 call    _win_strerror
.text:00000211                 add     esp, 4
.text:00000214                 push    eax
.text:00000215                 mov     eax, [ebp+lpName]
.text:00000218                 push    eax
.text:00000219                 push    offset $SG88064 ; "CreateMutex(\"%s\") failed: %s"
.text:0000021E                 call    _dupprintf
.text:00000223                 add     esp, 0Ch
.text:00000226                 mov     ecx, [ebp+arg_14]
.text:00000229                 mov     [ecx], eax
.text:0000022B                 mov     edx, [ebp+lpName]
.text:0000022E                 push    edx
.text:0000022F                 call    _safefree
.text:00000234                 add     esp, 4
.text:00000237                 mov     eax, [ebp+var_4]
.text:0000023A                 push    eax
.text:0000023B                 call    _safefree
.text:00000240                 add     esp, 4
.text:00000243                 mov     esi, esp
.text:00000245                 mov     ecx, [ebp+hMem]
.text:00000248                 push    ecx             ; hMem
.text:00000249                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:0000024F                 cmp     esi, esp
.text:00000251                 call    __RTC_CheckEsp
.text:00000256                 mov     esi, esp
.text:00000258                 mov     edx, [ebp+var_28]
.text:0000025B                 push    edx             ; hMem
.text:0000025C                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000262                 cmp     esi, esp
.text:00000264                 call    __RTC_CheckEsp
.text:00000269                 xor     eax, eax
.text:0000026B                 jmp     loc_51F
.text:00000270 ; ---------------------------------------------------------------------------
.text:00000270
.text:00000270 loc_270:                                ; CODE XREF: _platform_ssh_share+F2j
.text:00000270                 mov     eax, [ebp+lpName]
.text:00000273                 push    eax
.text:00000274                 call    _safefree
.text:00000279                 add     esp, 4
.text:0000027C                 mov     esi, esp
.text:0000027E                 mov     ecx, [ebp+hMem]
.text:00000281                 push    ecx             ; hMem
.text:00000282                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:00000288                 cmp     esi, esp
.text:0000028A                 call    __RTC_CheckEsp
.text:0000028F                 mov     esi, esp
.text:00000291                 mov     edx, [ebp+var_28]
.text:00000294                 push    edx             ; hMem
.text:00000295                 call    dword ptr ds:__imp__LocalFree@4 ; LocalFree(x)
.text:0000029B                 cmp     esi, esp
.text:0000029D                 call    __RTC_CheckEsp
.text:000002A2                 mov     esi, esp
.text:000002A4                 push    0FFFFFFFFh      ; dwMilliseconds
.text:000002A6                 mov     eax, [ebp+hHandle]
.text:000002A9                 push    eax             ; hHandle
.text:000002AA                 call    dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
.text:000002B0                 cmp     esi, esp
.text:000002B2                 call    __RTC_CheckEsp
.text:000002B7                 mov     ecx, [ebp+var_4]
.text:000002BA                 push    ecx
.text:000002BB                 push    offset $SG88065 ; "\\\\.\\pipe\\putty-connshare"
.text:000002C0                 call    _make_name
.text:000002C5                 add     esp, 8
.text:000002C8                 mov     [ebp+var_C], eax
.text:000002CB                 mov     edx, [ebp+arg_14]
.text:000002CE                 mov     dword ptr [edx], 0
.text:000002D4                 cmp     [ebp+arg_24], 0
.text:000002D8                 jz      loc_3C2
.text:000002DE                 mov     eax, [ebp+arg_8]
.text:000002E1                 push    eax
.text:000002E2                 mov     ecx, [ebp+var_C]
.text:000002E5                 push    ecx
.text:000002E6                 call    _new_named_pipe_client
.text:000002EB                 add     esp, 8
.text:000002EE                 mov     [ebp+var_14], eax
.text:000002F1                 mov     esi, esp
.text:000002F3                 mov     edx, [ebp+var_14]
.text:000002F6                 push    edx
.text:000002F7                 mov     eax, [ebp+var_14]
.text:000002FA                 mov     ecx, [eax]
.text:000002FC                 mov     edx, [ecx+1Ch]
.text:000002FF                 call    edx
.text:00000301                 add     esp, 4
.text:00000304                 cmp     esi, esp
.text:00000306                 call    __RTC_CheckEsp
.text:0000030B                 test    eax, eax
.text:0000030D                 jnz     short loc_369
.text:0000030F                 mov     eax, [ebp+arg_14]
.text:00000312                 mov     ecx, [eax]
.text:00000314                 push    ecx
.text:00000315                 call    _safefree
.text:0000031A                 add     esp, 4
.text:0000031D                 mov     edx, [ebp+arg_14]
.text:00000320                 mov     eax, [ebp+var_C]
.text:00000323                 mov     [edx], eax
.text:00000325                 mov     ecx, [ebp+arg_10]
.text:00000328                 mov     edx, [ebp+var_14]
.text:0000032B                 mov     [ecx], edx
.text:0000032D                 mov     eax, [ebp+var_4]
.text:00000330                 push    eax
.text:00000331                 call    _safefree
.text:00000336                 add     esp, 4
.text:00000339                 mov     esi, esp
.text:0000033B                 mov     ecx, [ebp+hHandle]
.text:0000033E                 push    ecx             ; hMutex
.text:0000033F                 call    dword ptr ds:__imp__ReleaseMutex@4 ; ReleaseMutex(x)
.text:00000345                 cmp     esi, esp
.text:00000347                 call    __RTC_CheckEsp
.text:0000034C                 mov     esi, esp
.text:0000034E                 mov     edx, [ebp+hHandle]
.text:00000351                 push    edx             ; hObject
.text:00000352                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000358                 cmp     esi, esp
.text:0000035A                 call    __RTC_CheckEsp
.text:0000035F                 mov     eax, 1
.text:00000364                 jmp     loc_51F
.text:00000369 ; ---------------------------------------------------------------------------
.text:00000369
.text:00000369 loc_369:                                ; CODE XREF: _platform_ssh_share+205j
.text:00000369                 mov     eax, [ebp+arg_18]
.text:0000036C                 mov     ecx, [eax]
.text:0000036E                 push    ecx
.text:0000036F                 call    _safefree
.text:00000374                 add     esp, 4
.text:00000377                 mov     esi, esp
.text:00000379                 mov     edx, [ebp+var_14]
.text:0000037C                 push    edx
.text:0000037D                 mov     eax, [ebp+var_14]
.text:00000380                 mov     ecx, [eax]
.text:00000382                 mov     edx, [ecx+1Ch]
.text:00000385                 call    edx
.text:00000387                 add     esp, 4
.text:0000038A                 cmp     esi, esp
.text:0000038C                 call    __RTC_CheckEsp
.text:00000391                 push    eax
.text:00000392                 mov     eax, [ebp+var_C]
.text:00000395                 push    eax
.text:00000396                 push    offset $SG88070 ; "%s: %s"
.text:0000039B                 call    _dupprintf
.text:000003A0                 add     esp, 0Ch
.text:000003A3                 mov     ecx, [ebp+arg_18]
.text:000003A6                 mov     [ecx], eax
.text:000003A8                 mov     esi, esp
.text:000003AA                 mov     edx, [ebp+var_14]
.text:000003AD                 push    edx
.text:000003AE                 mov     eax, [ebp+var_14]
.text:000003B1                 mov     ecx, [eax]
.text:000003B3                 mov     edx, [ecx+4]
.text:000003B6                 call    edx
.text:000003B8                 add     esp, 4
.text:000003BB                 cmp     esi, esp
.text:000003BD                 call    __RTC_CheckEsp
.text:000003C2
.text:000003C2 loc_3C2:                                ; CODE XREF: _platform_ssh_share+1D0j
.text:000003C2                 cmp     [ebp+arg_20], 0
.text:000003C6                 jz      loc_4B0
.text:000003CC                 mov     eax, [ebp+arg_C]
.text:000003CF                 push    eax
.text:000003D0                 mov     ecx, [ebp+var_C]
.text:000003D3                 push    ecx
.text:000003D4                 call    _new_named_pipe_listener
.text:000003D9                 add     esp, 8
.text:000003DC                 mov     [ebp+var_14], eax
.text:000003DF                 mov     esi, esp
.text:000003E1                 mov     edx, [ebp+var_14]
.text:000003E4                 push    edx
.text:000003E5                 mov     eax, [ebp+var_14]
.text:000003E8                 mov     ecx, [eax]
.text:000003EA                 mov     edx, [ecx+1Ch]
.text:000003ED                 call    edx
.text:000003EF                 add     esp, 4
.text:000003F2                 cmp     esi, esp
.text:000003F4                 call    __RTC_CheckEsp
.text:000003F9                 test    eax, eax
.text:000003FB                 jnz     short loc_457
.text:000003FD                 mov     eax, [ebp+arg_14]
.text:00000400                 mov     ecx, [eax]
.text:00000402                 push    ecx
.text:00000403                 call    _safefree
.text:00000408                 add     esp, 4
.text:0000040B                 mov     edx, [ebp+arg_14]
.text:0000040E                 mov     eax, [ebp+var_C]
.text:00000411                 mov     [edx], eax
.text:00000413                 mov     ecx, [ebp+arg_10]
.text:00000416                 mov     edx, [ebp+var_14]
.text:00000419                 mov     [ecx], edx
.text:0000041B                 mov     eax, [ebp+var_4]
.text:0000041E                 push    eax
.text:0000041F                 call    _safefree
.text:00000424                 add     esp, 4
.text:00000427                 mov     esi, esp
.text:00000429                 mov     ecx, [ebp+hHandle]
.text:0000042C                 push    ecx             ; hMutex
.text:0000042D                 call    dword ptr ds:__imp__ReleaseMutex@4 ; ReleaseMutex(x)
.text:00000433                 cmp     esi, esp
.text:00000435                 call    __RTC_CheckEsp
.text:0000043A                 mov     esi, esp
.text:0000043C                 mov     edx, [ebp+hHandle]
.text:0000043F                 push    edx             ; hObject
.text:00000440                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000446                 cmp     esi, esp
.text:00000448                 call    __RTC_CheckEsp
.text:0000044D                 mov     eax, 2
.text:00000452                 jmp     loc_51F
.text:00000457 ; ---------------------------------------------------------------------------
.text:00000457
.text:00000457 loc_457:                                ; CODE XREF: _platform_ssh_share+2F3j
.text:00000457                 mov     eax, [ebp+arg_1C]
.text:0000045A                 mov     ecx, [eax]
.text:0000045C                 push    ecx
.text:0000045D                 call    _safefree
.text:00000462                 add     esp, 4
.text:00000465                 mov     esi, esp
.text:00000467                 mov     edx, [ebp+var_14]
.text:0000046A                 push    edx
.text:0000046B                 mov     eax, [ebp+var_14]
.text:0000046E                 mov     ecx, [eax]
.text:00000470                 mov     edx, [ecx+1Ch]
.text:00000473                 call    edx
.text:00000475                 add     esp, 4
.text:00000478                 cmp     esi, esp
.text:0000047A                 call    __RTC_CheckEsp
.text:0000047F                 push    eax
.text:00000480                 mov     eax, [ebp+var_C]
.text:00000483                 push    eax
.text:00000484                 push    offset $SG88074 ; "%s: %s"
.text:00000489                 call    _dupprintf
.text:0000048E                 add     esp, 0Ch
.text:00000491                 mov     ecx, [ebp+arg_1C]
.text:00000494                 mov     [ecx], eax
.text:00000496                 mov     esi, esp
.text:00000498                 mov     edx, [ebp+var_14]
.text:0000049B                 push    edx
.text:0000049C                 mov     eax, [ebp+var_14]
.text:0000049F                 mov     ecx, [eax]
.text:000004A1                 mov     edx, [ecx+4]
.text:000004A4                 call    edx
.text:000004A6                 add     esp, 4
.text:000004A9                 cmp     esi, esp
.text:000004AB                 call    __RTC_CheckEsp
.text:000004B0
.text:000004B0 loc_4B0:                                ; CODE XREF: _platform_ssh_share+2BEj
.text:000004B0                 mov     eax, [ebp+arg_14]
.text:000004B3                 cmp     dword ptr [eax], 0
.text:000004B6                 jnz     short loc_4DF
.text:000004B8                 mov     ecx, [ebp+arg_18]
.text:000004BB                 cmp     dword ptr [ecx], 0
.text:000004BE                 jnz     short loc_4DF
.text:000004C0                 mov     edx, [ebp+arg_1C]
.text:000004C3                 cmp     dword ptr [edx], 0
.text:000004C6                 jnz     short loc_4DF
.text:000004C8                 push    0E1h ; 'ß'      ; Line
.text:000004CD                 push    offset $SG88076 ; "..\\..\\winshare.c"
.text:000004D2                 push    offset $SG88077 ; "*logtext || *ds_err || *us_err"
.text:000004D7                 call    __wassert
.text:000004DC ; ---------------------------------------------------------------------------
.text:000004DC                 add     esp, 0Ch
.text:000004DF
.text:000004DF loc_4DF:                                ; CODE XREF: _platform_ssh_share+3AEj
.text:000004DF                                         ; _platform_ssh_share+3B6j ...
.text:000004DF                 mov     ecx, [ebp+var_C]
.text:000004E2                 push    ecx
.text:000004E3                 call    _safefree
.text:000004E8                 add     esp, 4
.text:000004EB                 mov     edx, [ebp+var_4]
.text:000004EE                 push    edx
.text:000004EF                 call    _safefree
.text:000004F4                 add     esp, 4
.text:000004F7                 mov     esi, esp
.text:000004F9                 mov     eax, [ebp+hHandle]
.text:000004FC                 push    eax             ; hMutex
.text:000004FD                 call    dword ptr ds:__imp__ReleaseMutex@4 ; ReleaseMutex(x)
.text:00000503                 cmp     esi, esp
.text:00000505                 call    __RTC_CheckEsp
.text:0000050A                 mov     esi, esp
.text:0000050C                 mov     ecx, [ebp+hHandle]
.text:0000050F                 push    ecx             ; hObject
.text:00000510                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00000516                 cmp     esi, esp
.text:00000518                 call    __RTC_CheckEsp
.text:0000051D                 xor     eax, eax
.text:0000051F
.text:0000051F loc_51F:                                ; CODE XREF: _platform_ssh_share+59j
.text:0000051F                                         ; _platform_ssh_share+A9j ...
.text:0000051F                 push    edx
.text:00000520                 mov     ecx, ebp
.text:00000522                 push    eax
.text:00000523                 lea     edx, $LN15
.text:00000529                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000052E                 pop     eax
.text:0000052F                 pop     edx
.text:00000530                 pop     edi
.text:00000531                 pop     esi
.text:00000532                 add     esp, 40h
.text:00000535                 cmp     ebp, esp
.text:00000537                 call    __RTC_CheckEsp
.text:0000053C                 mov     esp, ebp
.text:0000053E                 pop     ebp
.text:0000053F                 retn
.text:0000053F _platform_ssh_share endp
.text:0000053F
.text:0000053F ; ---------------------------------------------------------------------------
.text:00000540 $LN15           dd 3                    ; DATA XREF: _platform_ssh_share+41Bo
.text:00000544                 dd offset $LN14
.text:00000548 $LN14           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000544o
.text:00000550                 dd offset $LN11
.text:00000554                 dd 0FFFFFFD8h, 4
.text:0000055C                 dd offset $LN12
.text:00000560                 dd 0FFFFFFC4h, 0Ch
.text:00000568                 dd offset $LN13
.text:0000056C $LN13           db 73h, 61h, 0          ; DATA XREF: .text:00000568o
.text:0000056F $LN12           db 61h                  ; DATA XREF: .text:0000055Co
.text:00000570                 db 63h, 6Ch, 0
.text:00000573 $LN11           db 70h                  ; DATA XREF: .text:00000550o
.text:00000574                 dd 0CC006473h
.text:00000578
.text:00000578 ; =============== S U B R O U T I N E =======================================
.text:00000578
.text:00000578 ; Attributes: bp-based frame
.text:00000578
.text:00000578 ; int __cdecl obfuscate_name(char *Str)
.text:00000578 _obfuscate_name proc near               ; CODE XREF: _platform_ssh_share+1Bp
.text:00000578
.text:00000578 var_104         = dword ptr -104h
.text:00000578 Dest            = byte ptr -0FCh
.text:00000578 var_B0          = byte ptr -0B0h
.text:00000578 var_88          = byte ptr -88h
.text:00000578 var_87          = byte ptr -87h
.text:00000578 var_86          = byte ptr -86h
.text:00000578 var_85          = byte ptr -85h
.text:00000578 var_7C          = byte ptr -7Ch
.text:00000578 Size            = dword ptr -0Ch
.text:00000578 Dst             = dword ptr -8
.text:00000578 var_4           = dword ptr -4
.text:00000578 Str             = dword ptr  8
.text:00000578
.text:00000578                 push    ebp
.text:00000579                 mov     ebp, esp
.text:0000057B                 sub     esp, 104h
.text:00000581                 push    esi
.text:00000582                 push    edi
.text:00000583                 lea     edi, [ebp+var_104]
.text:00000589                 mov     ecx, 41h ; 'A'
.text:0000058E                 mov     eax, 0CCCCCCCCh
.text:00000593                 rep stosd
.text:00000595                 mov     eax, dword ptr ds:___security_cookie
.text:0000059A                 xor     eax, ebp
.text:0000059C                 mov     [ebp+var_4], eax
.text:0000059F                 mov     eax, [ebp+Str]
.text:000005A2                 push    eax             ; Str
.text:000005A3                 call    _strlen
.text:000005A8                 add     esp, 4
.text:000005AB                 add     eax, 1
.text:000005AE                 mov     [ebp+Size], eax
.text:000005B1                 mov     ecx, [ebp+Size]
.text:000005B4                 add     ecx, 0Fh
.text:000005B7                 mov     [ebp+Size], ecx
.text:000005BA                 mov     eax, [ebp+Size]
.text:000005BD                 cdq
.text:000005BE                 and     edx, 0Fh
.text:000005C1                 add     eax, edx
.text:000005C3                 sar     eax, 4
.text:000005C6                 mov     [ebp+Size], eax
.text:000005C9                 mov     edx, [ebp+Size]
.text:000005CC                 shl     edx, 4
.text:000005CF                 mov     [ebp+Size], edx
.text:000005D2                 push    1
.text:000005D4                 mov     eax, [ebp+Size]
.text:000005D7                 push    eax
.text:000005D8                 call    _safemalloc
.text:000005DD                 add     esp, 8
.text:000005E0                 mov     [ebp+Dst], eax
.text:000005E3                 mov     ecx, [ebp+Size]
.text:000005E6                 push    ecx             ; Size
.text:000005E7                 push    0               ; Val
.text:000005E9                 mov     edx, [ebp+Dst]
.text:000005EC                 push    edx             ; Dst
.text:000005ED                 call    _memset
.text:000005F2                 add     esp, 0Ch
.text:000005F5                 mov     eax, [ebp+Str]
.text:000005F8                 push    eax             ; Source
.text:000005F9                 mov     ecx, [ebp+Dst]
.text:000005FC                 push    ecx             ; Dest
.text:000005FD                 call    _strcpy
.text:00000602                 add     esp, 8
.text:00000605                 call    _got_crypt
.text:0000060A                 test    eax, eax
.text:0000060C                 jz      short loc_627
.text:0000060E                 mov     esi, esp
.text:00000610                 push    1
.text:00000612                 mov     edx, [ebp+Size]
.text:00000615                 push    edx
.text:00000616                 mov     eax, [ebp+Dst]
.text:00000619                 push    eax
.text:0000061A                 call    dword ptr ds:_p_CryptProtectMemory
.text:00000620                 cmp     esi, esp
.text:00000622                 call    __RTC_CheckEsp
.text:00000627
.text:00000627 loc_627:                                ; CODE XREF: _obfuscate_name+94j
.text:00000627                 lea     ecx, [ebp+var_7C]
.text:0000062A                 push    ecx
.text:0000062B                 call    _SHA256_Init
.text:00000630                 add     esp, 4
.text:00000633                 mov     edx, [ebp+Size]
.text:00000636                 sar     edx, 18h
.text:00000639                 mov     [ebp+var_88], dl
.text:0000063F                 mov     eax, [ebp+Size]
.text:00000642                 sar     eax, 10h
.text:00000645                 mov     [ebp+var_87], al
.text:0000064B                 mov     ecx, [ebp+Size]
.text:0000064E                 sar     ecx, 8
.text:00000651                 mov     [ebp+var_86], cl
.text:00000657                 mov     dl, byte ptr [ebp+Size]
.text:0000065A                 mov     [ebp+var_85], dl
.text:00000660                 push    4
.text:00000662                 lea     eax, [ebp+var_88]
.text:00000668                 push    eax
.text:00000669                 lea     ecx, [ebp+var_7C]
.text:0000066C                 push    ecx
.text:0000066D                 call    _SHA256_Bytes
.text:00000672                 add     esp, 0Ch
.text:00000675                 mov     edx, [ebp+Size]
.text:00000678                 push    edx
.text:00000679                 mov     eax, [ebp+Dst]
.text:0000067C                 push    eax
.text:0000067D                 lea     ecx, [ebp+var_7C]
.text:00000680                 push    ecx
.text:00000681                 call    _SHA256_Bytes
.text:00000686                 add     esp, 0Ch
.text:00000689                 lea     edx, [ebp+var_B0]
.text:0000068F                 push    edx
.text:00000690                 lea     eax, [ebp+var_7C]
.text:00000693                 push    eax
.text:00000694                 call    _SHA256_Final
.text:00000699                 add     esp, 8
.text:0000069C                 mov     ecx, [ebp+Dst]
.text:0000069F                 push    ecx
.text:000006A0                 call    _safefree
.text:000006A5                 add     esp, 4
.text:000006A8                 mov     [ebp+var_104], 0
.text:000006B2                 jmp     short loc_6C3
.text:000006B4 ; ---------------------------------------------------------------------------
.text:000006B4
.text:000006B4 loc_6B4:                                ; CODE XREF: _obfuscate_name+17Ej
.text:000006B4                 mov     edx, [ebp+var_104]
.text:000006BA                 add     edx, 1
.text:000006BD                 mov     [ebp+var_104], edx
.text:000006C3
.text:000006C3 loc_6C3:                                ; CODE XREF: _obfuscate_name+13Aj
.text:000006C3                 cmp     [ebp+var_104], 20h ; ' '
.text:000006CA                 jge     short loc_6F8
.text:000006CC                 mov     eax, [ebp+var_104]
.text:000006D2                 movzx   ecx, [ebp+eax+var_B0]
.text:000006DA                 push    ecx
.text:000006DB                 push    offset $SG88010 ; "%02x"
.text:000006E0                 mov     edx, [ebp+var_104]
.text:000006E6                 lea     eax, [ebp+edx*2+Dest]
.text:000006ED                 push    eax             ; Dest
.text:000006EE                 call    _sprintf
.text:000006F3                 add     esp, 0Ch
.text:000006F6                 jmp     short loc_6B4
.text:000006F8 ; ---------------------------------------------------------------------------
.text:000006F8
.text:000006F8 loc_6F8:                                ; CODE XREF: _obfuscate_name+152j
.text:000006F8                 lea     ecx, [ebp+Dest]
.text:000006FE                 push    ecx
.text:000006FF                 call    _dupstr
.text:00000704                 add     esp, 4
.text:00000707                 push    edx
.text:00000708                 mov     ecx, ebp
.text:0000070A                 push    eax
.text:0000070B                 lea     edx, $LN12_0
.text:00000711                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000716                 pop     eax
.text:00000717                 pop     edx
.text:00000718                 pop     edi
.text:00000719                 pop     esi
.text:0000071A                 mov     ecx, [ebp+var_4]
.text:0000071D                 xor     ecx, ebp
.text:0000071F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000724                 add     esp, 104h
.text:0000072A                 cmp     ebp, esp
.text:0000072C                 call    __RTC_CheckEsp
.text:00000731                 mov     esp, ebp
.text:00000733                 pop     ebp
.text:00000734                 retn
.text:00000734 _obfuscate_name endp
.text:00000734
.text:00000734 ; ---------------------------------------------------------------------------
.text:00000735                 align 4
.text:00000738 $LN12_0         dd 4                    ; DATA XREF: _obfuscate_name+193o
.text:0000073C                 dd offset $LN11_0
.text:00000740 $LN11_0         dd 0FFFFFF84h, 6Ch      ; DATA XREF: .text:0000073Co
.text:00000748                 dd offset $LN7          ; "sha"
.text:0000074C                 dd 0FFFFFF78h, 4
.text:00000754                 dd offset $LN8          ; "lenbuf"
.text:00000758                 dd 0FFFFFF50h, 20h
.text:00000760                 dd offset $LN9          ; "digest"
.text:00000764                 dd 0FFFFFF04h, 41h
.text:0000076C                 dd offset $LN10         ; "retbuf"
.text:00000770 $LN10           db 'retbuf',0           ; DATA XREF: .text:0000076Co
.text:00000777 $LN9            db 'digest',0           ; DATA XREF: .text:00000760o
.text:0000077E $LN8            db 'lenbuf',0           ; DATA XREF: .text:00000754o
.text:00000785 $LN7            db 'sha',0              ; DATA XREF: .text:00000748o
.text:00000789                 db 0Fh dup(0CCh)
.text:00000798
.text:00000798 ; =============== S U B R O U T I N E =======================================
.text:00000798
.text:00000798 ; Attributes: bp-based frame
.text:00000798
.text:00000798 _make_name      proc near               ; CODE XREF: _platform_ssh_share+67p
.text:00000798                                         ; _platform_ssh_share+1B8p
.text:00000798
.text:00000798 var_8           = dword ptr -8
.text:00000798 var_4           = dword ptr -4
.text:00000798 arg_0           = dword ptr  8
.text:00000798 arg_4           = dword ptr  0Ch
.text:00000798
.text:00000798                 push    ebp
.text:00000799                 mov     ebp, esp
.text:0000079B                 sub     esp, 8
.text:0000079E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AC                 call    _get_username
.text:000007B1                 mov     [ebp+var_4], eax
.text:000007B4                 mov     eax, [ebp+arg_4]
.text:000007B7                 push    eax
.text:000007B8                 mov     ecx, [ebp+var_4]
.text:000007BB                 push    ecx
.text:000007BC                 mov     edx, [ebp+arg_0]
.text:000007BF                 push    edx
.text:000007C0                 push    offset $SG88019 ; "%s.%s.%s"
.text:000007C5                 call    _dupprintf
.text:000007CA                 add     esp, 10h
.text:000007CD                 mov     [ebp+var_8], eax
.text:000007D0                 mov     eax, [ebp+var_4]
.text:000007D3                 push    eax
.text:000007D4                 call    _safefree
.text:000007D9                 add     esp, 4
.text:000007DC                 mov     eax, [ebp+var_8]
.text:000007DF                 add     esp, 8
.text:000007E2                 cmp     ebp, esp
.text:000007E4                 call    __RTC_CheckEsp
.text:000007E9                 mov     esp, ebp
.text:000007EB                 pop     ebp
.text:000007EC                 retn
.text:000007EC _make_name      endp
.text:000007EC
.text:000007EC ; ---------------------------------------------------------------------------
.text:000007ED                 db 0Bh dup(0CCh)
.text:000007F8
.text:000007F8 ; =============== S U B R O U T I N E =======================================
.text:000007F8
.text:000007F8 ; Attributes: bp-based frame
.text:000007F8
.text:000007F8                 public _platform_ssh_share_cleanup
.text:000007F8 _platform_ssh_share_cleanup proc near
.text:000007F8                 push    ebp
.text:000007F9                 mov     ebp, esp
.text:000007FB                 pop     ebp
.text:000007FC                 retn
.text:000007FC _platform_ssh_share_cleanup endp
.text:000007FC
.text:000007FC ; ---------------------------------------------------------------------------
.text:000007FD                 align 10h
.text:000007FD _text           ends
.text:000007FD
.rtc$TMZ:00000800 ; ===========================================================================
.rtc$TMZ:00000800
.rtc$TMZ:00000800 ; Segment type: Pure data
.rtc$TMZ:00000800 ; Segment permissions: Read
.rtc$TMZ:00000800 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000800                 assume cs:_rtc$TMZ
.rtc$TMZ:00000800                 ;org 800h
.rtc$TMZ:00000800 ; COMDAT (pick any)
.rtc$TMZ:00000800 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000800 _rtc$TMZ        ends
.rtc$TMZ:00000800
.rtc$IMZ:00000804 ; ===========================================================================
.rtc$IMZ:00000804
.rtc$IMZ:00000804 ; Segment type: Pure data
.rtc$IMZ:00000804 ; Segment permissions: Read
.rtc$IMZ:00000804 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000804                 assume cs:_rtc$IMZ
.rtc$IMZ:00000804                 ;org 804h
.rtc$IMZ:00000804 ; COMDAT (pick any)
.rtc$IMZ:00000804 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000804 _rtc$IMZ        ends
.rtc$IMZ:00000804
UNDEF:00000810 ; ===========================================================================
UNDEF:00000810
UNDEF:00000810 ; Segment type: Externs
UNDEF:00000810 ; UNDEF
UNDEF:00000810 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00000810                 extrn __wassert:near    ; CODE XREF: _platform_ssh_share+3CFp
UNDEF:00000814                 extrn _new_named_pipe_listener:near
UNDEF:00000814                                         ; CODE XREF: _platform_ssh_share+2CCp
UNDEF:00000818 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:00000818                 extrn __imp__CloseHandle@4:near
UNDEF:00000818                                         ; CODE XREF: _platform_ssh_share+24Ap
UNDEF:00000818                                         ; _platform_ssh_share+338p ...
UNDEF:0000081C ; BOOL __stdcall ReleaseMutex(HANDLE hMutex)
UNDEF:0000081C                 extrn __imp__ReleaseMutex@4:near
UNDEF:0000081C                                         ; CODE XREF: _platform_ssh_share+237p
UNDEF:0000081C                                         ; _platform_ssh_share+325p ...
UNDEF:00000820                 extrn _new_named_pipe_client:near
UNDEF:00000820                                         ; CODE XREF: _platform_ssh_share+1DEp
UNDEF:00000824 ; DWORD __stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
UNDEF:00000824                 extrn __imp__WaitForSingleObject@8:near
UNDEF:00000824                                         ; CODE XREF: _platform_ssh_share+1A2p
UNDEF:00000824                                         ; DATA XREF: _platform_ssh_share+1A2r
UNDEF:00000828 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
UNDEF:00000828                 extrn __imp__LocalFree@4:near
UNDEF:00000828                                         ; CODE XREF: _platform_ssh_share+141p
UNDEF:00000828                                         ; _platform_ssh_share+154p ...
UNDEF:0000082C ; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
UNDEF:0000082C                 extrn __imp__CreateMutexA@12:near
UNDEF:0000082C                                         ; CODE XREF: _platform_ssh_share+DEp
UNDEF:0000082C                                         ; DATA XREF: _platform_ssh_share+DEr
UNDEF:00000830 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00000830                 extrn _memset:near      ; CODE XREF: _platform_ssh_share+B6p
UNDEF:00000830                                         ; _obfuscate_name+75p
UNDEF:00000834                 extrn _safefree:near    ; CODE XREF: _platform_ssh_share+93p
UNDEF:00000834                                         ; _platform_ssh_share+9Fp ...
UNDEF:00000838                 extrn _make_private_security_descriptor:near
UNDEF:00000838                                         ; CODE XREF: _platform_ssh_share+83p
UNDEF:0000083C                 extrn _dupprintf:near   ; CODE XREF: _platform_ssh_share+4Ap
UNDEF:0000083C                                         ; _platform_ssh_share+116p ...
UNDEF:00000840                 extrn _win_strerror:near ; CODE XREF: _platform_ssh_share+3Cp
UNDEF:00000840                                         ; _platform_ssh_share+104p
UNDEF:00000844 ; DWORD __stdcall GetLastError()
UNDEF:00000844                 extrn __imp__GetLastError@0:near
UNDEF:00000844                                         ; CODE XREF: _platform_ssh_share+2Ep
UNDEF:00000844                                         ; _platform_ssh_share+F6p
UNDEF:00000844                                         ; DATA XREF: ...
UNDEF:00000848 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000848                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000848                                         ; CODE XREF: _platform_ssh_share+421p
UNDEF:00000848                                         ; _obfuscate_name+199p
UNDEF:0000084C                 extrn __RTC_CheckEsp:near
UNDEF:0000084C                                         ; CODE XREF: _platform_ssh_share+36p
UNDEF:0000084C                                         ; _platform_ssh_share+E6p ...
UNDEF:00000850                 extrn __RTC_Shutdown:near
UNDEF:00000850                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000854                 extrn __RTC_InitBase:near
UNDEF:00000854                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000858                 extrn _dupstr:near      ; CODE XREF: _obfuscate_name+187p
UNDEF:0000085C ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:0000085C                 extrn _sprintf:near     ; CODE XREF: _obfuscate_name+176p
UNDEF:00000860                 extrn _SHA256_Final:near ; CODE XREF: _obfuscate_name+11Cp
UNDEF:00000864                 extrn _SHA256_Bytes:near ; CODE XREF: _obfuscate_name+F5p
UNDEF:00000864                                         ; _obfuscate_name+109p
UNDEF:00000868                 extrn _SHA256_Init:near ; CODE XREF: _obfuscate_name+B3p
UNDEF:0000086C                 extrn _p_CryptProtectMemory:near
UNDEF:0000086C                                         ; CODE XREF: _obfuscate_name+A2p
UNDEF:0000086C                                         ; DATA XREF: _obfuscate_name+A2r
UNDEF:00000870                 extrn _got_crypt:near   ; CODE XREF: _obfuscate_name+8Dp
UNDEF:00000874 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00000874                 extrn _strcpy:near      ; CODE XREF: _obfuscate_name+85p
UNDEF:00000878                 extrn _safemalloc:near  ; CODE XREF: _obfuscate_name+60p
UNDEF:0000087C ; size_t __cdecl strlen(const char *Str)
UNDEF:0000087C                 extrn _strlen:near      ; CODE XREF: _obfuscate_name+2Bp
UNDEF:00000880                 extrn ___security_cookie:near
UNDEF:00000880                                         ; DATA XREF: _obfuscate_name+1Dr
UNDEF:00000884 ; __fastcall __security_check_cookie(x)
UNDEF:00000884                 extrn @__security_check_cookie@4:near
UNDEF:00000884                                         ; CODE XREF: _obfuscate_name+1A7p
UNDEF:00000888                 extrn _get_username:near ; CODE XREF: _make_name+14p
UNDEF:00000888
UNDEF:00000888
UNDEF:00000888                 end