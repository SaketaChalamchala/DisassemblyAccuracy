.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : A60E3E2468D9258C8FDF51451E22996C
.data:00000000 ; Input CRC32 : F5DC9D56
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\ldisc.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG85836[]
.data:00000000 $SG85836        db '<%02X>',0           ; DATA XREF: _pwrite+FDo
.data:00000007                 align 4
.data:00000008 $SG85855        db 8,' ',8,0            ; DATA XREF: _bsb+22o
.data:0000000C $SG85904:                               ; DATA XREF: _ldisc_send+10Bo
.data:0000000C                 unicode 0, <..\..\..\ldisc.c>,0
.data:0000002E                 align 10h
.data:00000030 $SG85905:                               ; DATA XREF: _ldisc_send+110o
.data:00000030                 unicode 0, <ldisc->
.data:00000030                 dw 3Eh
.data:00000030                 unicode 0, <term>,0
.data:00000048 $SG85956        db '^R',0Dh,0Ah,0       ; DATA XREF: _ldisc_send+5B7o
.data:0000004D                 align 10h
.data:00000050 $SG85972        dd offset loc_A0C+1     ; DATA XREF: _ldisc_send+775o
.data:00000054 $SG85976        db  0Dh                 ; DATA XREF: _ldisc_send+7D0o
.data:00000055                 db    0
.data:00000056                 db    0
.data:00000057                 db    0
.data:00000058 $SG85980        dd offset loc_A0C+1     ; DATA XREF: _ldisc_send+83Do
.data:0000005C $SG86007        db  0Dh                 ; DATA XREF: _ldisc_send+A92o
.data:0000005D                 db    0
.data:0000005E                 align 10h
.data:0000005E _data           ends
.data:0000005E
.text:00000060 ; ===========================================================================
.text:00000060
.text:00000060 ; Segment type: Pure code
.text:00000060 ; Segment permissions: Read/Execute
.text:00000060 _text           segment para public 'CODE' use32
.text:00000060                 assume cs:_text
.text:00000060                 ;org 60h
.text:00000060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060                 public _ldisc_create
.text:00000060 _ldisc_create   proc near
.text:00000060
.text:00000060 var_4           = dword ptr -4
.text:00000060 arg_0           = dword ptr  8
.text:00000060 arg_4           = dword ptr  0Ch
.text:00000060 arg_8           = dword ptr  10h
.text:00000060 arg_C           = dword ptr  14h
.text:00000060 arg_10          = dword ptr  18h
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 push    ecx
.text:00000064                 push    esi
.text:00000065                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000006C                 push    34h ; '4'
.text:0000006E                 push    1
.text:00000070                 call    _safemalloc
.text:00000075                 add     esp, 8
.text:00000078                 mov     [ebp+var_4], eax
.text:0000007B                 mov     eax, [ebp+var_4]
.text:0000007E                 mov     dword ptr [eax+24h], 0
.text:00000085                 mov     ecx, [ebp+var_4]
.text:00000088                 mov     dword ptr [ecx+28h], 0
.text:0000008F                 mov     edx, [ebp+var_4]
.text:00000092                 mov     dword ptr [edx+2Ch], 0
.text:00000099                 mov     eax, [ebp+var_4]
.text:0000009C                 mov     dword ptr [eax+30h], 0
.text:000000A3                 mov     ecx, [ebp+var_4]
.text:000000A6                 mov     edx, [ebp+arg_8]
.text:000000A9                 mov     [ecx+4], edx
.text:000000AC                 mov     eax, [ebp+var_4]
.text:000000AF                 mov     ecx, [ebp+arg_C]
.text:000000B2                 mov     [eax+8], ecx
.text:000000B5                 mov     edx, [ebp+var_4]
.text:000000B8                 mov     eax, [ebp+arg_4]
.text:000000BB                 mov     [edx], eax
.text:000000BD                 mov     ecx, [ebp+var_4]
.text:000000C0                 mov     edx, [ebp+arg_10]
.text:000000C3                 mov     [ecx+0Ch], edx
.text:000000C6                 mov     eax, [ebp+arg_0]
.text:000000C9                 push    eax
.text:000000CA                 mov     ecx, [ebp+var_4]
.text:000000CD                 push    ecx
.text:000000CE                 call    _ldisc_configure
.text:000000D3                 add     esp, 8
.text:000000D6                 cmp     [ebp+arg_4], 0
.text:000000DA                 jz      short loc_E8
.text:000000DC                 mov     edx, [ebp+arg_4]
.text:000000DF                 mov     eax, [ebp+var_4]
.text:000000E2                 mov     [edx+1084h], eax
.text:000000E8
.text:000000E8 loc_E8:                                 ; CODE XREF: _ldisc_create+7Aj
.text:000000E8                 cmp     [ebp+arg_8], 0
.text:000000EC                 jz      short loc_10A
.text:000000EE                 mov     esi, esp
.text:000000F0                 mov     ecx, [ebp+var_4]
.text:000000F3                 push    ecx
.text:000000F4                 mov     edx, [ebp+arg_C]
.text:000000F7                 push    edx
.text:000000F8                 mov     eax, [ebp+arg_8]
.text:000000FB                 mov     ecx, [eax+30h]
.text:000000FE                 call    ecx
.text:00000100                 add     esp, 8
.text:00000103                 cmp     esi, esp
.text:00000105                 call    __RTC_CheckEsp
.text:0000010A
.text:0000010A loc_10A:                                ; CODE XREF: _ldisc_create+8Cj
.text:0000010A                 mov     eax, [ebp+var_4]
.text:0000010D                 pop     esi
.text:0000010E                 add     esp, 4
.text:00000111                 cmp     ebp, esp
.text:00000113                 call    __RTC_CheckEsp
.text:00000118                 mov     esp, ebp
.text:0000011A                 pop     ebp
.text:0000011B                 retn
.text:0000011B _ldisc_create   endp
.text:0000011B
.text:0000011B ; ---------------------------------------------------------------------------
.text:0000011C                 align 10h
.text:00000120
.text:00000120 ; =============== S U B R O U T I N E =======================================
.text:00000120
.text:00000120 ; Attributes: bp-based frame
.text:00000120
.text:00000120                 public _ldisc_configure
.text:00000120 _ldisc_configure proc near              ; CODE XREF: _ldisc_create+6Ep
.text:00000120
.text:00000120 var_4           = dword ptr -4
.text:00000120 arg_0           = dword ptr  8
.text:00000120 arg_4           = dword ptr  0Ch
.text:00000120
.text:00000120                 push    ebp
.text:00000121                 mov     ebp, esp
.text:00000123                 push    ecx
.text:00000124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000012B                 mov     eax, [ebp+arg_0]
.text:0000012E                 mov     [ebp+var_4], eax
.text:00000131                 push    4Ch ; 'L'
.text:00000133                 mov     ecx, [ebp+arg_4]
.text:00000136                 push    ecx
.text:00000137                 call    _conf_get_int
.text:0000013C                 add     esp, 8
.text:0000013F                 mov     edx, [ebp+var_4]
.text:00000142                 mov     [edx+10h], eax
.text:00000145                 push    4Dh ; 'M'
.text:00000147                 mov     eax, [ebp+arg_4]
.text:0000014A                 push    eax
.text:0000014B                 call    _conf_get_int
.text:00000150                 add     esp, 8
.text:00000153                 mov     ecx, [ebp+var_4]
.text:00000156                 mov     [ecx+14h], eax
.text:00000159                 push    2
.text:0000015B                 mov     edx, [ebp+arg_4]
.text:0000015E                 push    edx
.text:0000015F                 call    _conf_get_int
.text:00000164                 add     esp, 8
.text:00000167                 mov     ecx, [ebp+var_4]
.text:0000016A                 mov     [ecx+18h], eax
.text:0000016D                 push    51h ; 'Q'
.text:0000016F                 mov     edx, [ebp+arg_4]
.text:00000172                 push    edx
.text:00000173                 call    _conf_get_int
.text:00000178                 add     esp, 8
.text:0000017B                 mov     ecx, [ebp+var_4]
.text:0000017E                 mov     [ecx+1Ch], eax
.text:00000181                 push    52h ; 'R'
.text:00000183                 mov     edx, [ebp+arg_4]
.text:00000186                 push    edx
.text:00000187                 call    _conf_get_int
.text:0000018C                 add     esp, 8
.text:0000018F                 mov     ecx, [ebp+var_4]
.text:00000192                 mov     [ecx+20h], eax
.text:00000195                 add     esp, 4
.text:00000198                 cmp     ebp, esp
.text:0000019A                 call    __RTC_CheckEsp
.text:0000019F                 mov     esp, ebp
.text:000001A1                 pop     ebp
.text:000001A2                 retn
.text:000001A2 _ldisc_configure endp
.text:000001A2
.text:000001A2 ; ---------------------------------------------------------------------------
.text:000001A3                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0                 public _ldisc_free
.text:000001B0 _ldisc_free     proc near
.text:000001B0
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 arg_0           = dword ptr  8
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    ecx
.text:000001B4                 push    esi
.text:000001B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BC                 mov     eax, [ebp+arg_0]
.text:000001BF                 mov     [ebp+var_4], eax
.text:000001C2                 mov     ecx, [ebp+var_4]
.text:000001C5                 cmp     dword ptr [ecx], 0
.text:000001C8                 jz      short loc_1D9
.text:000001CA                 mov     edx, [ebp+var_4]
.text:000001CD                 mov     eax, [edx]
.text:000001CF                 mov     dword ptr [eax+1084h], 0
.text:000001D9
.text:000001D9 loc_1D9:                                ; CODE XREF: _ldisc_free+18j
.text:000001D9                 mov     ecx, [ebp+var_4]
.text:000001DC                 cmp     dword ptr [ecx+4], 0
.text:000001E0                 jz      short loc_202
.text:000001E2                 mov     esi, esp
.text:000001E4                 push    0
.text:000001E6                 mov     edx, [ebp+var_4]
.text:000001E9                 mov     eax, [edx+8]
.text:000001EC                 push    eax
.text:000001ED                 mov     ecx, [ebp+var_4]
.text:000001F0                 mov     edx, [ecx+4]
.text:000001F3                 mov     eax, [edx+30h]
.text:000001F6                 call    eax
.text:000001F8                 add     esp, 8
.text:000001FB                 cmp     esi, esp
.text:000001FD                 call    __RTC_CheckEsp
.text:00000202
.text:00000202 loc_202:                                ; CODE XREF: _ldisc_free+30j
.text:00000202                 mov     ecx, [ebp+var_4]
.text:00000205                 cmp     dword ptr [ecx+24h], 0
.text:00000209                 jz      short loc_21A
.text:0000020B                 mov     edx, [ebp+var_4]
.text:0000020E                 mov     eax, [edx+24h]
.text:00000211                 push    eax
.text:00000212                 call    _safefree
.text:00000217                 add     esp, 4
.text:0000021A
.text:0000021A loc_21A:                                ; CODE XREF: _ldisc_free+59j
.text:0000021A                 mov     ecx, [ebp+var_4]
.text:0000021D                 push    ecx
.text:0000021E                 call    _safefree
.text:00000223                 add     esp, 4
.text:00000226                 pop     esi
.text:00000227                 add     esp, 4
.text:0000022A                 cmp     ebp, esp
.text:0000022C                 call    __RTC_CheckEsp
.text:00000231                 mov     esp, ebp
.text:00000233                 pop     ebp
.text:00000234                 retn
.text:00000234 _ldisc_free     endp
.text:00000234
.text:00000234 ; ---------------------------------------------------------------------------
.text:00000235                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; int __cdecl ldisc_send(int, char *, int, int)
.text:00000240                 public _ldisc_send
.text:00000240 _ldisc_send     proc near
.text:00000240
.text:00000240 var_28          = dword ptr -28h
.text:00000240 var_24          = dword ptr -24h
.text:00000240 var_20          = dword ptr -20h
.text:00000240 var_1C          = dword ptr -1Ch
.text:00000240 var_18          = dword ptr -18h
.text:00000240 var_14          = dword ptr -14h
.text:00000240 var_10          = dword ptr -10h
.text:00000240 var_C           = dword ptr -0Ch
.text:00000240 var_8           = dword ptr -8
.text:00000240 var_4           = dword ptr -4
.text:00000240 arg_0           = dword ptr  8
.text:00000240 arg_4           = dword ptr  0Ch
.text:00000240 arg_8           = dword ptr  10h
.text:00000240 arg_C           = dword ptr  14h
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 sub     esp, 28h
.text:00000246                 push    esi
.text:00000247                 push    edi
.text:00000248                 lea     edi, [ebp+var_28]
.text:0000024B                 mov     ecx, 0Ah
.text:00000250                 mov     eax, 0CCCCCCCCh
.text:00000255                 rep stosd
.text:00000257                 mov     eax, [ebp+arg_0]
.text:0000025A                 mov     [ebp+var_4], eax
.text:0000025D                 mov     [ebp+var_8], 0
.text:00000264                 cmp     [ebp+arg_8], 0
.text:00000268                 jnz     loc_33E
.text:0000026E                 mov     ecx, [ebp+var_4]
.text:00000271                 cmp     dword ptr [ecx+20h], 0
.text:00000275                 jz      short loc_2C1
.text:00000277                 mov     edx, [ebp+var_4]
.text:0000027A                 cmp     dword ptr [edx+20h], 2
.text:0000027E                 jnz     short loc_2B8
.text:00000280                 mov     esi, esp
.text:00000282                 push    0
.text:00000284                 mov     eax, [ebp+var_4]
.text:00000287                 mov     ecx, [eax+8]
.text:0000028A                 push    ecx
.text:0000028B                 mov     edx, [ebp+var_4]
.text:0000028E                 mov     eax, [edx+4]
.text:00000291                 mov     ecx, [eax+2Ch]
.text:00000294                 call    ecx
.text:00000296                 add     esp, 8
.text:00000299                 cmp     esi, esp
.text:0000029B                 call    __RTC_CheckEsp
.text:000002A0                 test    eax, eax
.text:000002A2                 jnz     short loc_2C1
.text:000002A4                 push    0
.text:000002A6                 mov     edx, [ebp+var_4]
.text:000002A9                 mov     eax, [edx]
.text:000002AB                 push    eax
.text:000002AC                 call    _term_ldisc
.text:000002B1                 add     esp, 8
.text:000002B4                 test    eax, eax
.text:000002B6                 jnz     short loc_2C1
.text:000002B8
.text:000002B8 loc_2B8:                                ; CODE XREF: _ldisc_send+3Ej
.text:000002B8                 mov     [ebp+var_14], 0
.text:000002BF                 jmp     short loc_2C8
.text:000002C1 ; ---------------------------------------------------------------------------
.text:000002C1
.text:000002C1 loc_2C1:                                ; CODE XREF: _ldisc_send+35j
.text:000002C1                                         ; _ldisc_send+62j ...
.text:000002C1                 mov     [ebp+var_14], 1
.text:000002C8
.text:000002C8 loc_2C8:                                ; CODE XREF: _ldisc_send+7Fj
.text:000002C8                 mov     ecx, [ebp+var_4]
.text:000002CB                 cmp     dword ptr [ecx+1Ch], 0
.text:000002CF                 jz      short loc_31B
.text:000002D1                 mov     edx, [ebp+var_4]
.text:000002D4                 cmp     dword ptr [edx+1Ch], 2
.text:000002D8                 jnz     short loc_312
.text:000002DA                 mov     esi, esp
.text:000002DC                 push    1
.text:000002DE                 mov     eax, [ebp+var_4]
.text:000002E1                 mov     ecx, [eax+8]
.text:000002E4                 push    ecx
.text:000002E5                 mov     edx, [ebp+var_4]
.text:000002E8                 mov     eax, [edx+4]
.text:000002EB                 mov     ecx, [eax+2Ch]
.text:000002EE                 call    ecx
.text:000002F0                 add     esp, 8
.text:000002F3                 cmp     esi, esp
.text:000002F5                 call    __RTC_CheckEsp
.text:000002FA                 test    eax, eax
.text:000002FC                 jnz     short loc_31B
.text:000002FE                 push    1
.text:00000300                 mov     edx, [ebp+var_4]
.text:00000303                 mov     eax, [edx]
.text:00000305                 push    eax
.text:00000306                 call    _term_ldisc
.text:0000030B                 add     esp, 8
.text:0000030E                 test    eax, eax
.text:00000310                 jnz     short loc_31B
.text:00000312
.text:00000312 loc_312:                                ; CODE XREF: _ldisc_send+98j
.text:00000312                 mov     [ebp+var_18], 0
.text:00000319                 jmp     short loc_322
.text:0000031B ; ---------------------------------------------------------------------------
.text:0000031B
.text:0000031B loc_31B:                                ; CODE XREF: _ldisc_send+8Fj
.text:0000031B                                         ; _ldisc_send+BCj ...
.text:0000031B                 mov     [ebp+var_18], 1
.text:00000322
.text:00000322 loc_322:                                ; CODE XREF: _ldisc_send+D9j
.text:00000322                 mov     ecx, [ebp+var_14]
.text:00000325                 push    ecx
.text:00000326                 mov     edx, [ebp+var_18]
.text:00000329                 push    edx
.text:0000032A                 mov     eax, [ebp+var_4]
.text:0000032D                 mov     ecx, [eax+0Ch]
.text:00000330                 push    ecx
.text:00000331                 call    _ldisc_update
.text:00000336                 add     esp, 0Ch
.text:00000339                 jmp     loc_DC7
.text:0000033E ; ---------------------------------------------------------------------------
.text:0000033E
.text:0000033E loc_33E:                                ; CODE XREF: _ldisc_send+28j
.text:0000033E                 mov     edx, [ebp+var_4]
.text:00000341                 cmp     dword ptr [edx], 0
.text:00000344                 jnz     short loc_35D
.text:00000346                 push    98h ; 'ÿ'
.text:0000034B                 push    offset $SG85904 ; "..\\..\\..\\ldisc.c"
.text:00000350                 push    offset $SG85905 ; "ldisc->term"
.text:00000355                 call    __wassert
.text:0000035A ; ---------------------------------------------------------------------------
.text:0000035A                 add     esp, 0Ch
.text:0000035D
.text:0000035D loc_35D:                                ; CODE XREF: _ldisc_send+104j
.text:0000035D                 mov     ecx, [ebp+var_4]
.text:00000360                 mov     edx, [ecx+0Ch]
.text:00000363                 push    edx
.text:00000364                 call    _frontend_keypress
.text:00000369                 add     esp, 4
.text:0000036C                 cmp     [ebp+arg_C], 0
.text:00000370                 jz      short loc_380
.text:00000372                 mov     eax, [ebp+var_4]
.text:00000375                 mov     ecx, [eax]
.text:00000377                 push    ecx
.text:00000378                 call    _term_nopaste
.text:0000037D                 add     esp, 4
.text:00000380
.text:00000380 loc_380:                                ; CODE XREF: _ldisc_send+130j
.text:00000380                 cmp     [ebp+arg_8], 0
.text:00000384                 jge     short loc_39C
.text:00000386                 mov     edx, [ebp+arg_4]
.text:00000389                 push    edx             ; char *
.text:0000038A                 call    _strlen
.text:0000038F                 add     esp, 4
.text:00000392                 mov     [ebp+arg_8], eax
.text:00000395                 mov     [ebp+var_8], 100h
.text:0000039C
.text:0000039C loc_39C:                                ; CODE XREF: _ldisc_send+144j
.text:0000039C                 mov     eax, [ebp+var_4]
.text:0000039F                 cmp     dword ptr [eax+20h], 0
.text:000003A3                 jz      short loc_3EE
.text:000003A5                 mov     ecx, [ebp+var_4]
.text:000003A8                 cmp     dword ptr [ecx+20h], 2
.text:000003AC                 jnz     loc_B6A
.text:000003B2                 mov     esi, esp
.text:000003B4                 push    0
.text:000003B6                 mov     edx, [ebp+var_4]
.text:000003B9                 mov     eax, [edx+8]
.text:000003BC                 push    eax
.text:000003BD                 mov     ecx, [ebp+var_4]
.text:000003C0                 mov     edx, [ecx+4]
.text:000003C3                 mov     eax, [edx+2Ch]
.text:000003C6                 call    eax
.text:000003C8                 add     esp, 8
.text:000003CB                 cmp     esi, esp
.text:000003CD                 call    __RTC_CheckEsp
.text:000003D2                 test    eax, eax
.text:000003D4                 jnz     short loc_3EE
.text:000003D6                 push    0
.text:000003D8                 mov     ecx, [ebp+var_4]
.text:000003DB                 mov     edx, [ecx]
.text:000003DD                 push    edx
.text:000003DE                 call    _term_ldisc
.text:000003E3                 add     esp, 8
.text:000003E6                 test    eax, eax
.text:000003E8                 jz      loc_B6A
.text:000003EE
.text:000003EE loc_3EE:                                ; CODE XREF: _ldisc_send+163j
.text:000003EE                                         ; _ldisc_send+194j ...
.text:000003EE                 mov     eax, [ebp+arg_8]
.text:000003F1                 mov     [ebp+var_1C], eax
.text:000003F4                 mov     ecx, [ebp+arg_8]
.text:000003F7                 sub     ecx, 1
.text:000003FA                 mov     [ebp+arg_8], ecx
.text:000003FD                 cmp     [ebp+var_1C], 0
.text:00000401                 jz      loc_B65
.text:00000407                 mov     edx, [ebp+arg_4]
.text:0000040A                 movzx   eax, byte ptr [edx]
.text:0000040D                 add     eax, [ebp+var_8]
.text:00000410                 mov     [ebp+var_C], eax
.text:00000413                 mov     ecx, [ebp+arg_4]
.text:00000416                 add     ecx, 1
.text:00000419                 mov     [ebp+arg_4], ecx
.text:0000041C                 cmp     [ebp+arg_C], 0
.text:00000420                 jnz     short loc_434
.text:00000422                 cmp     [ebp+var_C], 0Dh
.text:00000426                 jnz     short loc_434
.text:00000428                 mov     edx, [ebp+var_C]
.text:0000042B                 add     edx, 100h
.text:00000431                 mov     [ebp+var_C], edx
.text:00000434
.text:00000434 loc_434:                                ; CODE XREF: _ldisc_send+1E0j
.text:00000434                                         ; _ldisc_send+1E6j
.text:00000434                 mov     eax, [ebp+var_4]
.text:00000437                 cmp     dword ptr [eax+30h], 0
.text:0000043B                 jz      short loc_446
.text:0000043D                 mov     [ebp+var_20], 20h ; ' '
.text:00000444                 jmp     short loc_44C
.text:00000446 ; ---------------------------------------------------------------------------
.text:00000446
.text:00000446 loc_446:                                ; CODE XREF: _ldisc_send+1FBj
.text:00000446                 mov     ecx, [ebp+var_C]
.text:00000449                 mov     [ebp+var_20], ecx
.text:0000044C
.text:0000044C loc_44C:                                ; CODE XREF: _ldisc_send+204j
.text:0000044C                 mov     edx, [ebp+var_20]
.text:0000044F                 mov     [ebp+var_24], edx
.text:00000452                 cmp     [ebp+var_24], 15h
.text:00000456                 jg      short loc_486
.text:00000458                 cmp     [ebp+var_24], 15h
.text:0000045C                 jz      $LN61           ; jumptable 0000047F case 0
.text:0000045C                                         ; jumptable 000004AE cases 4,6
.text:00000462                 mov     eax, [ebp+var_24]
.text:00000465                 sub     eax, 3
.text:00000468                 mov     [ebp+var_24], eax
.text:0000046B                 cmp     [ebp+var_24], 0Fh ; switch 16 cases
.text:0000046F                 ja      $default_case$85947 ; jumptable 0000047F default case
.text:00000475                 mov     ecx, [ebp+var_24]
.text:00000478                 movzx   edx, ds:$LN104[ecx]
.text:0000047F                 jmp     ds:$LN106[edx*4] ; switch jump
.text:00000486 ; ---------------------------------------------------------------------------
.text:00000486
.text:00000486 loc_486:                                ; CODE XREF: _ldisc_send+216j
.text:00000486                 cmp     [ebp+var_24], 108h
.text:0000048D                 jg      short loc_4B5
.text:0000048F                 cmp     [ebp+var_24], 108h
.text:00000496                 jz      short loc_4D0
.text:00000498                 mov     eax, [ebp+var_24]
.text:0000049B                 sub     eax, 16h
.text:0000049E                 mov     [ebp+var_24], eax
.text:000004A1                 cmp     [ebp+var_24], 6 ; switch 7 cases
.text:000004A5                 ja      $default_case$85947 ; jumptable 0000047F default case
.text:000004AB                 mov     ecx, [ebp+var_24]
.text:000004AE                 jmp     ds:$LN107[ecx*4] ; switch jump
.text:000004B5 ; ---------------------------------------------------------------------------
.text:000004B5
.text:000004B5 loc_4B5:                                ; CODE XREF: _ldisc_send+24Dj
.text:000004B5                 cmp     [ebp+var_24], 10Dh
.text:000004BC                 jz      loc_973
.text:000004C2                 cmp     [ebp+var_24], 17Fh
.text:000004C9                 jz      short loc_4D0
.text:000004CB                 jmp     $default_case$85947 ; jumptable 0000047F default case
.text:000004D0 ; ---------------------------------------------------------------------------
.text:000004D0
.text:000004D0 loc_4D0:                                ; CODE XREF: _ldisc_send+256j
.text:000004D0                                         ; _ldisc_send+289j
.text:000004D0                 mov     edx, [ebp+var_4]
.text:000004D3                 cmp     dword ptr [edx+28h], 0
.text:000004D7                 jle     loc_586
.text:000004DD
.text:000004DD loc_4DD:                                ; CODE XREF: _ldisc_send+340j
.text:000004DD                 mov     eax, [ebp+var_4]
.text:000004E0                 cmp     dword ptr [eax+1Ch], 0
.text:000004E4                 jz      short loc_527
.text:000004E6                 mov     ecx, [ebp+var_4]
.text:000004E9                 cmp     dword ptr [ecx+1Ch], 2
.text:000004ED                 jnz     short loc_552
.text:000004EF                 mov     esi, esp
.text:000004F1                 push    1
.text:000004F3                 mov     edx, [ebp+var_4]
.text:000004F6                 mov     eax, [edx+8]
.text:000004F9                 push    eax
.text:000004FA                 mov     ecx, [ebp+var_4]
.text:000004FD                 mov     edx, [ecx+4]
.text:00000500                 mov     eax, [edx+2Ch]
.text:00000503                 call    eax
.text:00000505                 add     esp, 8
.text:00000508                 cmp     esi, esp
.text:0000050A                 call    __RTC_CheckEsp
.text:0000050F                 test    eax, eax
.text:00000511                 jnz     short loc_527
.text:00000513                 push    1
.text:00000515                 mov     ecx, [ebp+var_4]
.text:00000518                 mov     edx, [ecx]
.text:0000051A                 push    edx
.text:0000051B                 call    _term_ldisc
.text:00000520                 add     esp, 8
.text:00000523                 test    eax, eax
.text:00000525                 jz      short loc_552
.text:00000527
.text:00000527 loc_527:                                ; CODE XREF: _ldisc_send+2A4j
.text:00000527                                         ; _ldisc_send+2D1j
.text:00000527                 mov     eax, [ebp+var_4]
.text:0000052A                 mov     ecx, [eax+28h]
.text:0000052D                 mov     edx, [ebp+var_4]
.text:00000530                 mov     eax, [edx+24h]
.text:00000533                 movzx   ecx, byte ptr [eax+ecx-1]
.text:00000538                 push    ecx
.text:00000539                 mov     edx, [ebp+var_4]
.text:0000053C                 push    edx
.text:0000053D                 call    _plen
.text:00000542                 add     esp, 8
.text:00000545                 push    eax
.text:00000546                 mov     eax, [ebp+var_4]
.text:00000549                 push    eax
.text:0000054A                 call    _bsb
.text:0000054F                 add     esp, 8
.text:00000552
.text:00000552 loc_552:                                ; CODE XREF: _ldisc_send+2ADj
.text:00000552                                         ; _ldisc_send+2E5j
.text:00000552                 mov     ecx, [ebp+var_4]
.text:00000555                 mov     edx, [ecx+28h]
.text:00000558                 sub     edx, 1
.text:0000055B                 mov     eax, [ebp+var_4]
.text:0000055E                 mov     [eax+28h], edx
.text:00000561                 mov     ecx, [ebp+var_4]
.text:00000564                 mov     edx, [ecx+24h]
.text:00000567                 mov     eax, [ebp+var_4]
.text:0000056A                 mov     ecx, [eax+28h]
.text:0000056D                 movzx   edx, byte ptr [edx+ecx]
.text:00000571                 push    edx
.text:00000572                 mov     eax, [ebp+var_4]
.text:00000575                 push    eax
.text:00000576                 call    _char_start
.text:0000057B                 add     esp, 8
.text:0000057E                 test    eax, eax
.text:00000580                 jz      loc_4DD
.text:00000586
.text:00000586 loc_586:                                ; CODE XREF: _ldisc_send+297j
.text:00000586                 jmp     loc_B60
.text:0000058B ; ---------------------------------------------------------------------------
.text:0000058B
.text:0000058B $LN68:                                  ; CODE XREF: _ldisc_send+26Ej
.text:0000058B                                         ; _ldisc_send:loc_662j
.text:0000058B                                         ; DATA XREF: ...
.text:0000058B                 mov     ecx, [ebp+var_4] ; jumptable 000004AE case 1
.text:0000058E                 cmp     dword ptr [ecx+28h], 0
.text:00000592                 jle     loc_667
.text:00000598                 mov     edx, [ebp+var_4]
.text:0000059B                 cmp     dword ptr [edx+1Ch], 0
.text:0000059F                 jz      short loc_5E2
.text:000005A1                 mov     eax, [ebp+var_4]
.text:000005A4                 cmp     dword ptr [eax+1Ch], 2
.text:000005A8                 jnz     short loc_60D
.text:000005AA                 mov     esi, esp
.text:000005AC                 push    1
.text:000005AE                 mov     ecx, [ebp+var_4]
.text:000005B1                 mov     edx, [ecx+8]
.text:000005B4                 push    edx
.text:000005B5                 mov     eax, [ebp+var_4]
.text:000005B8                 mov     ecx, [eax+4]
.text:000005BB                 mov     edx, [ecx+2Ch]
.text:000005BE                 call    edx
.text:000005C0                 add     esp, 8
.text:000005C3                 cmp     esi, esp
.text:000005C5                 call    __RTC_CheckEsp
.text:000005CA                 test    eax, eax
.text:000005CC                 jnz     short loc_5E2
.text:000005CE                 push    1
.text:000005D0                 mov     eax, [ebp+var_4]
.text:000005D3                 mov     ecx, [eax]
.text:000005D5                 push    ecx
.text:000005D6                 call    _term_ldisc
.text:000005DB                 add     esp, 8
.text:000005DE                 test    eax, eax
.text:000005E0                 jz      short loc_60D
.text:000005E2
.text:000005E2 loc_5E2:                                ; CODE XREF: _ldisc_send+35Fj
.text:000005E2                                         ; _ldisc_send+38Cj
.text:000005E2                 mov     edx, [ebp+var_4]
.text:000005E5                 mov     eax, [edx+28h]
.text:000005E8                 mov     ecx, [ebp+var_4]
.text:000005EB                 mov     edx, [ecx+24h]
.text:000005EE                 movzx   eax, byte ptr [edx+eax-1]
.text:000005F3                 push    eax
.text:000005F4                 mov     ecx, [ebp+var_4]
.text:000005F7                 push    ecx
.text:000005F8                 call    _plen
.text:000005FD                 add     esp, 8
.text:00000600                 push    eax
.text:00000601                 mov     edx, [ebp+var_4]
.text:00000604                 push    edx
.text:00000605                 call    _bsb
.text:0000060A                 add     esp, 8
.text:0000060D
.text:0000060D loc_60D:                                ; CODE XREF: _ldisc_send+368j
.text:0000060D                                         ; _ldisc_send+3A0j
.text:0000060D                 mov     eax, [ebp+var_4]
.text:00000610                 mov     ecx, [eax+28h]
.text:00000613                 sub     ecx, 1
.text:00000616                 mov     edx, [ebp+var_4]
.text:00000619                 mov     [edx+28h], ecx
.text:0000061C                 mov     eax, [ebp+var_4]
.text:0000061F                 cmp     dword ptr [eax+28h], 0
.text:00000623                 jle     short loc_662
.text:00000625                 mov     ecx, [ebp+var_4]
.text:00000628                 mov     edx, [ecx+28h]
.text:0000062B                 mov     eax, [ebp+var_4]
.text:0000062E                 mov     ecx, [eax+24h]
.text:00000631                 movzx   edx, byte ptr [ecx+edx-1]
.text:00000636                 push    edx             ; int
.text:00000637                 call    _isspace
.text:0000063C                 add     esp, 4
.text:0000063F                 test    eax, eax
.text:00000641                 jz      short loc_662
.text:00000643                 mov     eax, [ebp+var_4]
.text:00000646                 mov     ecx, [eax+24h]
.text:00000649                 mov     edx, [ebp+var_4]
.text:0000064C                 mov     eax, [edx+28h]
.text:0000064F                 movzx   ecx, byte ptr [ecx+eax]
.text:00000653                 push    ecx             ; int
.text:00000654                 call    _isspace
.text:00000659                 add     esp, 4
.text:0000065C                 test    eax, eax
.text:0000065E                 jnz     short loc_662
.text:00000660                 jmp     short loc_667
.text:00000662 ; ---------------------------------------------------------------------------
.text:00000662
.text:00000662 loc_662:                                ; CODE XREF: _ldisc_send+3E3j
.text:00000662                                         ; _ldisc_send+401j ...
.text:00000662                 jmp     $LN68           ; jumptable 000004AE case 1
.text:00000667 ; ---------------------------------------------------------------------------
.text:00000667
.text:00000667 loc_667:                                ; CODE XREF: _ldisc_send+352j
.text:00000667                                         ; _ldisc_send+420j
.text:00000667                 jmp     loc_B60
.text:0000066C ; ---------------------------------------------------------------------------
.text:0000066C
.text:0000066C $LN61:                                  ; CODE XREF: _ldisc_send+21Cj
.text:0000066C                                         ; _ldisc_send+23Fj ...
.text:0000066C                 mov     edx, [ebp+var_4] ; jumptable 0000047F case 0
.text:0000066C                                         ; jumptable 000004AE cases 4,6
.text:0000066F                 cmp     dword ptr [edx+28h], 0
.text:00000673                 jle     loc_702
.text:00000679                 mov     eax, [ebp+var_4]
.text:0000067C                 cmp     dword ptr [eax+1Ch], 0
.text:00000680                 jz      short loc_6C3
.text:00000682                 mov     ecx, [ebp+var_4]
.text:00000685                 cmp     dword ptr [ecx+1Ch], 2
.text:00000689                 jnz     short loc_6EE
.text:0000068B                 mov     esi, esp
.text:0000068D                 push    1
.text:0000068F                 mov     edx, [ebp+var_4]
.text:00000692                 mov     eax, [edx+8]
.text:00000695                 push    eax
.text:00000696                 mov     ecx, [ebp+var_4]
.text:00000699                 mov     edx, [ecx+4]
.text:0000069C                 mov     eax, [edx+2Ch]
.text:0000069F                 call    eax
.text:000006A1                 add     esp, 8
.text:000006A4                 cmp     esi, esp
.text:000006A6                 call    __RTC_CheckEsp
.text:000006AB                 test    eax, eax
.text:000006AD                 jnz     short loc_6C3
.text:000006AF                 push    1
.text:000006B1                 mov     ecx, [ebp+var_4]
.text:000006B4                 mov     edx, [ecx]
.text:000006B6                 push    edx
.text:000006B7                 call    _term_ldisc
.text:000006BC                 add     esp, 8
.text:000006BF                 test    eax, eax
.text:000006C1                 jz      short loc_6EE
.text:000006C3
.text:000006C3 loc_6C3:                                ; CODE XREF: _ldisc_send+440j
.text:000006C3                                         ; _ldisc_send+46Dj
.text:000006C3                 mov     eax, [ebp+var_4]
.text:000006C6                 mov     ecx, [eax+28h]
.text:000006C9                 mov     edx, [ebp+var_4]
.text:000006CC                 mov     eax, [edx+24h]
.text:000006CF                 movzx   ecx, byte ptr [eax+ecx-1]
.text:000006D4                 push    ecx
.text:000006D5                 mov     edx, [ebp+var_4]
.text:000006D8                 push    edx
.text:000006D9                 call    _plen
.text:000006DE                 add     esp, 8
.text:000006E1                 push    eax
.text:000006E2                 mov     eax, [ebp+var_4]
.text:000006E5                 push    eax
.text:000006E6                 call    _bsb
.text:000006EB                 add     esp, 8
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: _ldisc_send+449j
.text:000006EE                                         ; _ldisc_send+481j
.text:000006EE                 mov     ecx, [ebp+var_4]
.text:000006F1                 mov     edx, [ecx+28h]
.text:000006F4                 sub     edx, 1
.text:000006F7                 mov     eax, [ebp+var_4]
.text:000006FA                 mov     [eax+28h], edx
.text:000006FD                 jmp     $LN61           ; jumptable 0000047F case 0
.text:000006FD                                         ; jumptable 000004AE cases 4,6
.text:00000702 ; ---------------------------------------------------------------------------
.text:00000702
.text:00000702 loc_702:                                ; CODE XREF: _ldisc_send+433j
.text:00000702                 mov     esi, esp
.text:00000704                 push    4
.text:00000706                 mov     ecx, [ebp+var_4]
.text:00000709                 mov     edx, [ecx+8]
.text:0000070C                 push    edx
.text:0000070D                 mov     eax, [ebp+var_4]
.text:00000710                 mov     ecx, [eax+4]
.text:00000713                 mov     edx, [ecx+18h]
.text:00000716                 call    edx
.text:00000718                 add     esp, 8
.text:0000071B                 cmp     esi, esp
.text:0000071D                 call    __RTC_CheckEsp
.text:00000722                 mov     eax, [ebp+var_4]
.text:00000725                 cmp     dword ptr [eax+10h], 0
.text:00000729                 jnz     short loc_730
.text:0000072B                 jmp     $default_case$85947 ; jumptable 0000047F default case
.text:00000730 ; ---------------------------------------------------------------------------
.text:00000730
.text:00000730 loc_730:                                ; CODE XREF: _ldisc_send+4E9j
.text:00000730                 cmp     [ebp+var_C], 3
.text:00000734                 jnz     short loc_756
.text:00000736                 mov     esi, esp
.text:00000738                 push    9
.text:0000073A                 mov     ecx, [ebp+var_4]
.text:0000073D                 mov     edx, [ecx+8]
.text:00000740                 push    edx
.text:00000741                 mov     eax, [ebp+var_4]
.text:00000744                 mov     ecx, [eax+4]
.text:00000747                 mov     edx, [ecx+18h]
.text:0000074A                 call    edx
.text:0000074C                 add     esp, 8
.text:0000074F                 cmp     esi, esp
.text:00000751                 call    __RTC_CheckEsp
.text:00000756
.text:00000756 loc_756:                                ; CODE XREF: _ldisc_send+4F4j
.text:00000756                 cmp     [ebp+var_C], 1Ah
.text:0000075A                 jnz     short loc_77C
.text:0000075C                 mov     esi, esp
.text:0000075E                 push    0Ah
.text:00000760                 mov     eax, [ebp+var_4]
.text:00000763                 mov     ecx, [eax+8]
.text:00000766                 push    ecx
.text:00000767                 mov     edx, [ebp+var_4]
.text:0000076A                 mov     eax, [edx+4]
.text:0000076D                 mov     ecx, [eax+18h]
.text:00000770                 call    ecx
.text:00000772                 add     esp, 8
.text:00000775                 cmp     esi, esp
.text:00000777                 call    __RTC_CheckEsp
.text:0000077C
.text:0000077C loc_77C:                                ; CODE XREF: _ldisc_send+51Aj
.text:0000077C                 cmp     [ebp+var_C], 1Ch
.text:00000780                 jnz     short loc_7A2
.text:00000782                 mov     esi, esp
.text:00000784                 push    7
.text:00000786                 mov     edx, [ebp+var_4]
.text:00000789                 mov     eax, [edx+8]
.text:0000078C                 push    eax
.text:0000078D                 mov     ecx, [ebp+var_4]
.text:00000790                 mov     edx, [ecx+4]
.text:00000793                 mov     eax, [edx+18h]
.text:00000796                 call    eax
.text:00000798                 add     esp, 8
.text:0000079B                 cmp     esi, esp
.text:0000079D                 call    __RTC_CheckEsp
.text:000007A2
.text:000007A2 loc_7A2:                                ; CODE XREF: _ldisc_send+540j
.text:000007A2                 jmp     loc_B60
.text:000007A7 ; ---------------------------------------------------------------------------
.text:000007A7
.text:000007A7 $LN52:                                  ; CODE XREF: _ldisc_send+23Fj
.text:000007A7                                         ; DATA XREF: .text:$LN106o
.text:000007A7                 mov     ecx, [ebp+var_4] ; jumptable 0000047F case 15
.text:000007AA                 cmp     dword ptr [ecx+1Ch], 0
.text:000007AE                 jz      short loc_7F5
.text:000007B0                 mov     edx, [ebp+var_4]
.text:000007B3                 cmp     dword ptr [edx+1Ch], 2
.text:000007B7                 jnz     loc_841
.text:000007BD                 mov     esi, esp
.text:000007BF                 push    1
.text:000007C1                 mov     eax, [ebp+var_4]
.text:000007C4                 mov     ecx, [eax+8]
.text:000007C7                 push    ecx
.text:000007C8                 mov     edx, [ebp+var_4]
.text:000007CB                 mov     eax, [edx+4]
.text:000007CE                 mov     ecx, [eax+2Ch]
.text:000007D1                 call    ecx
.text:000007D3                 add     esp, 8
.text:000007D6                 cmp     esi, esp
.text:000007D8                 call    __RTC_CheckEsp
.text:000007DD                 test    eax, eax
.text:000007DF                 jnz     short loc_7F5
.text:000007E1                 push    1
.text:000007E3                 mov     edx, [ebp+var_4]
.text:000007E6                 mov     eax, [edx]
.text:000007E8                 push    eax
.text:000007E9                 call    _term_ldisc
.text:000007EE                 add     esp, 8
.text:000007F1                 test    eax, eax
.text:000007F3                 jz      short loc_841
.text:000007F5
.text:000007F5 loc_7F5:                                ; CODE XREF: _ldisc_send+56Ej
.text:000007F5                                         ; _ldisc_send+59Fj
.text:000007F5                 push    4
.text:000007F7                 push    offset $SG85956 ; "^R\r\n"
.text:000007FC                 mov     ecx, [ebp+var_4]
.text:000007FF                 push    ecx
.text:00000800                 call    _c_write
.text:00000805                 add     esp, 0Ch
.text:00000808                 mov     [ebp+var_10], 0
.text:0000080F                 jmp     short loc_81A
.text:00000811 ; ---------------------------------------------------------------------------
.text:00000811
.text:00000811 loc_811:                                ; CODE XREF: _ldisc_send+5FFj
.text:00000811                 mov     edx, [ebp+var_10]
.text:00000814                 add     edx, 1
.text:00000817                 mov     [ebp+var_10], edx
.text:0000081A
.text:0000081A loc_81A:                                ; CODE XREF: _ldisc_send+5CFj
.text:0000081A                 mov     eax, [ebp+var_4]
.text:0000081D                 mov     ecx, [ebp+var_10]
.text:00000820                 cmp     ecx, [eax+28h]
.text:00000823                 jge     short loc_841
.text:00000825                 mov     edx, [ebp+var_4]
.text:00000828                 mov     eax, [edx+24h]
.text:0000082B                 mov     ecx, [ebp+var_10]
.text:0000082E                 movzx   edx, byte ptr [eax+ecx]
.text:00000832                 push    edx
.text:00000833                 mov     eax, [ebp+var_4]
.text:00000836                 push    eax
.text:00000837                 call    _pwrite
.text:0000083C                 add     esp, 8
.text:0000083F                 jmp     short loc_811
.text:00000841 ; ---------------------------------------------------------------------------
.text:00000841
.text:00000841 loc_841:                                ; CODE XREF: _ldisc_send+577j
.text:00000841                                         ; _ldisc_send+5B3j ...
.text:00000841                 jmp     loc_B60
.text:00000846 ; ---------------------------------------------------------------------------
.text:00000846
.text:00000846 $LN45:                                  ; CODE XREF: _ldisc_send+26Ej
.text:00000846                                         ; DATA XREF: .text:$LN107o
.text:00000846                 mov     ecx, [ebp+var_4] ; jumptable 000004AE case 0
.text:00000849                 mov     dword ptr [ecx+30h], 1
.text:00000850                 jmp     loc_B60
.text:00000855 ; ---------------------------------------------------------------------------
.text:00000855
.text:00000855 $LN44:                                  ; CODE XREF: _ldisc_send+23Fj
.text:00000855                                         ; DATA XREF: .text:$LN106o
.text:00000855                 mov     edx, [ebp+var_4] ; jumptable 0000047F case 1
.text:00000858                 cmp     dword ptr [edx+28h], 0
.text:0000085C                 jnz     short loc_880
.text:0000085E                 mov     esi, esp
.text:00000860                 push    0Ch
.text:00000862                 mov     eax, [ebp+var_4]
.text:00000865                 mov     ecx, [eax+8]
.text:00000868                 push    ecx
.text:00000869                 mov     edx, [ebp+var_4]
.text:0000086C                 mov     eax, [edx+4]
.text:0000086F                 mov     ecx, [eax+18h]
.text:00000872                 call    ecx
.text:00000874                 add     esp, 8
.text:00000877                 cmp     esi, esp
.text:00000879                 call    __RTC_CheckEsp
.text:0000087E                 jmp     short loc_8B6
.text:00000880 ; ---------------------------------------------------------------------------
.text:00000880
.text:00000880 loc_880:                                ; CODE XREF: _ldisc_send+61Cj
.text:00000880                 mov     esi, esp
.text:00000882                 mov     edx, [ebp+var_4]
.text:00000885                 mov     eax, [edx+28h]
.text:00000888                 push    eax
.text:00000889                 mov     ecx, [ebp+var_4]
.text:0000088C                 mov     edx, [ecx+24h]
.text:0000088F                 push    edx
.text:00000890                 mov     eax, [ebp+var_4]
.text:00000893                 mov     ecx, [eax+8]
.text:00000896                 push    ecx
.text:00000897                 mov     edx, [ebp+var_4]
.text:0000089A                 mov     eax, [edx+4]
.text:0000089D                 mov     ecx, [eax+0Ch]
.text:000008A0                 call    ecx
.text:000008A2                 add     esp, 0Ch
.text:000008A5                 cmp     esi, esp
.text:000008A7                 call    __RTC_CheckEsp
.text:000008AC                 mov     edx, [ebp+var_4]
.text:000008AF                 mov     dword ptr [edx+28h], 0
.text:000008B6
.text:000008B6 loc_8B6:                                ; CODE XREF: _ldisc_send+63Ej
.text:000008B6                 jmp     loc_B60
.text:000008BB ; ---------------------------------------------------------------------------
.text:000008BB
.text:000008BB $LN41:                                  ; CODE XREF: _ldisc_send+23Fj
.text:000008BB                                         ; DATA XREF: .text:$LN106o
.text:000008BB                 mov     eax, [ebp+var_4] ; jumptable 0000047F case 7
.text:000008BE                 cmp     dword ptr [eax+18h], 0
.text:000008C2                 jnz     $default_case$85947 ; jumptable 0000047F default case
.text:000008C8                 mov     ecx, [ebp+var_4]
.text:000008CB                 cmp     dword ptr [ecx+28h], 0
.text:000008CF                 jle     $default_case$85947 ; jumptable 0000047F default case
.text:000008D5                 mov     edx, [ebp+var_4]
.text:000008D8                 mov     eax, [edx+28h]
.text:000008DB                 mov     ecx, [ebp+var_4]
.text:000008DE                 mov     edx, [ecx+24h]
.text:000008E1                 movsx   eax, byte ptr [edx+eax-1]
.text:000008E6                 cmp     eax, 0Dh
.text:000008E9                 jnz     $default_case$85947 ; jumptable 0000047F default case
.text:000008EF                 mov     ecx, [ebp+var_4]
.text:000008F2                 cmp     dword ptr [ecx+1Ch], 0
.text:000008F6                 jz      short loc_939
.text:000008F8                 mov     edx, [ebp+var_4]
.text:000008FB                 cmp     dword ptr [edx+1Ch], 2
.text:000008FF                 jnz     short loc_964
.text:00000901                 mov     esi, esp
.text:00000903                 push    1
.text:00000905                 mov     eax, [ebp+var_4]
.text:00000908                 mov     ecx, [eax+8]
.text:0000090B                 push    ecx
.text:0000090C                 mov     edx, [ebp+var_4]
.text:0000090F                 mov     eax, [edx+4]
.text:00000912                 mov     ecx, [eax+2Ch]
.text:00000915                 call    ecx
.text:00000917                 add     esp, 8
.text:0000091A                 cmp     esi, esp
.text:0000091C                 call    __RTC_CheckEsp
.text:00000921                 test    eax, eax
.text:00000923                 jnz     short loc_939
.text:00000925                 push    1
.text:00000927                 mov     edx, [ebp+var_4]
.text:0000092A                 mov     eax, [edx]
.text:0000092C                 push    eax
.text:0000092D                 call    _term_ldisc
.text:00000932                 add     esp, 8
.text:00000935                 test    eax, eax
.text:00000937                 jz      short loc_964
.text:00000939
.text:00000939 loc_939:                                ; CODE XREF: _ldisc_send+6B6j
.text:00000939                                         ; _ldisc_send+6E3j
.text:00000939                 mov     ecx, [ebp+var_4]
.text:0000093C                 mov     edx, [ecx+28h]
.text:0000093F                 mov     eax, [ebp+var_4]
.text:00000942                 mov     ecx, [eax+24h]
.text:00000945                 movzx   edx, byte ptr [ecx+edx-1]
.text:0000094A                 push    edx
.text:0000094B                 mov     eax, [ebp+var_4]
.text:0000094E                 push    eax
.text:0000094F                 call    _plen
.text:00000954                 add     esp, 8
.text:00000957                 push    eax
.text:00000958                 mov     ecx, [ebp+var_4]
.text:0000095B                 push    ecx
.text:0000095C                 call    _bsb
.text:00000961                 add     esp, 8
.text:00000964
.text:00000964 loc_964:                                ; CODE XREF: _ldisc_send+6BFj
.text:00000964                                         ; _ldisc_send+6F7j
.text:00000964                 mov     edx, [ebp+var_4]
.text:00000967                 mov     eax, [edx+28h]
.text:0000096A                 sub     eax, 1
.text:0000096D                 mov     ecx, [ebp+var_4]
.text:00000970                 mov     [ecx+28h], eax
.text:00000973
.text:00000973 loc_973:                                ; CODE XREF: _ldisc_send+27Cj
.text:00000973                 mov     edx, [ebp+var_4]
.text:00000976                 cmp     dword ptr [edx+28h], 0
.text:0000097A                 jle     short loc_9A8
.text:0000097C                 mov     esi, esp
.text:0000097E                 mov     eax, [ebp+var_4]
.text:00000981                 mov     ecx, [eax+28h]
.text:00000984                 push    ecx
.text:00000985                 mov     edx, [ebp+var_4]
.text:00000988                 mov     eax, [edx+24h]
.text:0000098B                 push    eax
.text:0000098C                 mov     ecx, [ebp+var_4]
.text:0000098F                 mov     edx, [ecx+8]
.text:00000992                 push    edx
.text:00000993                 mov     eax, [ebp+var_4]
.text:00000996                 mov     ecx, [eax+4]
.text:00000999                 mov     edx, [ecx+0Ch]
.text:0000099C                 call    edx
.text:0000099E                 add     esp, 0Ch
.text:000009A1                 cmp     esi, esp
.text:000009A3                 call    __RTC_CheckEsp
.text:000009A8
.text:000009A8 loc_9A8:                                ; CODE XREF: _ldisc_send+73Aj
.text:000009A8                 mov     eax, [ebp+var_4]
.text:000009AB                 cmp     dword ptr [eax+18h], 0
.text:000009AF                 jnz     short loc_9D8
.text:000009B1                 mov     esi, esp
.text:000009B3                 push    2
.text:000009B5                 push    offset $SG85972
.text:000009BA                 mov     ecx, [ebp+var_4]
.text:000009BD                 mov     edx, [ecx+8]
.text:000009C0                 push    edx
.text:000009C1                 mov     eax, [ebp+var_4]
.text:000009C4                 mov     ecx, [eax+4]
.text:000009C7                 mov     edx, [ecx+0Ch]
.text:000009CA                 call    edx
.text:000009CC                 add     esp, 0Ch
.text:000009CF                 cmp     esi, esp
.text:000009D1                 call    __RTC_CheckEsp
.text:000009D6                 jmp     short loc_A31
.text:000009D8 ; ---------------------------------------------------------------------------
.text:000009D8
.text:000009D8 loc_9D8:                                ; CODE XREF: _ldisc_send+76Fj
.text:000009D8                 mov     eax, [ebp+var_4]
.text:000009DB                 cmp     dword ptr [eax+18h], 1
.text:000009DF                 jnz     short loc_A0C
.text:000009E1                 mov     ecx, [ebp+var_4]
.text:000009E4                 cmp     dword ptr [ecx+14h], 0
.text:000009E8                 jz      short loc_A0C
.text:000009EA                 mov     esi, esp
.text:000009EC                 push    10h
.text:000009EE                 mov     edx, [ebp+var_4]
.text:000009F1                 mov     eax, [edx+8]
.text:000009F4                 push    eax
.text:000009F5                 mov     ecx, [ebp+var_4]
.text:000009F8                 mov     edx, [ecx+4]
.text:000009FB                 mov     eax, [edx+18h]
.text:000009FE                 call    eax
.text:00000A00                 add     esp, 8
.text:00000A03                 cmp     esi, esp
.text:00000A05                 call    __RTC_CheckEsp
.text:00000A0A                 jmp     short loc_A31
.text:00000A0C ; ---------------------------------------------------------------------------
.text:00000A0C
.text:00000A0C loc_A0C:                                ; CODE XREF: _ldisc_send+79Fj
.text:00000A0C                                         ; _ldisc_send+7A8j
.text:00000A0C                                         ; DATA XREF: ...
.text:00000A0C                 mov     esi, esp
.text:00000A0E                 push    1
.text:00000A10                 push    offset $SG85976
.text:00000A15                 mov     ecx, [ebp+var_4]
.text:00000A18                 mov     edx, [ecx+8]
.text:00000A1B                 push    edx
.text:00000A1C                 mov     eax, [ebp+var_4]
.text:00000A1F                 mov     ecx, [eax+4]
.text:00000A22                 mov     edx, [ecx+0Ch]
.text:00000A25                 call    edx
.text:00000A27                 add     esp, 0Ch
.text:00000A2A                 cmp     esi, esp
.text:00000A2C                 call    __RTC_CheckEsp
.text:00000A31
.text:00000A31 loc_A31:                                ; CODE XREF: _ldisc_send+796j
.text:00000A31                                         ; _ldisc_send+7CAj
.text:00000A31                 mov     eax, [ebp+var_4]
.text:00000A34                 cmp     dword ptr [eax+1Ch], 0
.text:00000A38                 jz      short loc_A7B
.text:00000A3A                 mov     ecx, [ebp+var_4]
.text:00000A3D                 cmp     dword ptr [ecx+1Ch], 2
.text:00000A41                 jnz     short loc_A8E
.text:00000A43                 mov     esi, esp
.text:00000A45                 push    1
.text:00000A47                 mov     edx, [ebp+var_4]
.text:00000A4A                 mov     eax, [edx+8]
.text:00000A4D                 push    eax
.text:00000A4E                 mov     ecx, [ebp+var_4]
.text:00000A51                 mov     edx, [ecx+4]
.text:00000A54                 mov     eax, [edx+2Ch]
.text:00000A57                 call    eax
.text:00000A59                 add     esp, 8
.text:00000A5C                 cmp     esi, esp
.text:00000A5E                 call    __RTC_CheckEsp
.text:00000A63                 test    eax, eax
.text:00000A65                 jnz     short loc_A7B
.text:00000A67                 push    1
.text:00000A69                 mov     ecx, [ebp+var_4]
.text:00000A6C                 mov     edx, [ecx]
.text:00000A6E                 push    edx
.text:00000A6F                 call    _term_ldisc
.text:00000A74                 add     esp, 8
.text:00000A77                 test    eax, eax
.text:00000A79                 jz      short loc_A8E
.text:00000A7B
.text:00000A7B loc_A7B:                                ; CODE XREF: _ldisc_send+7F8j
.text:00000A7B                                         ; _ldisc_send+825j
.text:00000A7B                 push    2
.text:00000A7D                 push    offset $SG85980
.text:00000A82                 mov     eax, [ebp+var_4]
.text:00000A85                 push    eax
.text:00000A86                 call    _c_write
.text:00000A8B                 add     esp, 0Ch
.text:00000A8E
.text:00000A8E loc_A8E:                                ; CODE XREF: _ldisc_send+801j
.text:00000A8E                                         ; _ldisc_send+839j
.text:00000A8E                 mov     ecx, [ebp+var_4]
.text:00000A91                 mov     dword ptr [ecx+28h], 0
.text:00000A98                 jmp     loc_B60
.text:00000A9D ; ---------------------------------------------------------------------------
.text:00000A9D
.text:00000A9D $default_case$85947:                    ; CODE XREF: _ldisc_send+22Fj
.text:00000A9D                                         ; _ldisc_send+23Fj ...
.text:00000A9D                 mov     edx, [ebp+var_4] ; jumptable 0000047F default case
.text:00000AA0                 mov     eax, [ebp+var_4]
.text:00000AA3                 mov     ecx, [edx+28h]
.text:00000AA6                 cmp     ecx, [eax+2Ch]
.text:00000AA9                 jl      short loc_ADA
.text:00000AAB                 mov     edx, [ebp+var_4]
.text:00000AAE                 mov     eax, [edx+28h]
.text:00000AB1                 add     eax, 100h
.text:00000AB6                 mov     ecx, [ebp+var_4]
.text:00000AB9                 mov     [ecx+2Ch], eax
.text:00000ABC                 push    1
.text:00000ABE                 mov     edx, [ebp+var_4]
.text:00000AC1                 mov     eax, [edx+2Ch]
.text:00000AC4                 push    eax
.text:00000AC5                 mov     ecx, [ebp+var_4]
.text:00000AC8                 mov     edx, [ecx+24h]
.text:00000ACB                 push    edx
.text:00000ACC                 call    _saferealloc
.text:00000AD1                 add     esp, 0Ch
.text:00000AD4                 mov     ecx, [ebp+var_4]
.text:00000AD7                 mov     [ecx+24h], eax
.text:00000ADA
.text:00000ADA loc_ADA:                                ; CODE XREF: _ldisc_send+869j
.text:00000ADA                 mov     edx, [ebp+var_4]
.text:00000ADD                 mov     eax, [edx+24h]
.text:00000AE0                 mov     ecx, [ebp+var_4]
.text:00000AE3                 mov     edx, [ecx+28h]
.text:00000AE6                 mov     cl, byte ptr [ebp+var_C]
.text:00000AE9                 mov     [eax+edx], cl
.text:00000AEC                 mov     edx, [ebp+var_4]
.text:00000AEF                 mov     eax, [edx+28h]
.text:00000AF2                 add     eax, 1
.text:00000AF5                 mov     ecx, [ebp+var_4]
.text:00000AF8                 mov     [ecx+28h], eax
.text:00000AFB                 mov     edx, [ebp+var_4]
.text:00000AFE                 cmp     dword ptr [edx+1Ch], 0
.text:00000B02                 jz      short loc_B45
.text:00000B04                 mov     eax, [ebp+var_4]
.text:00000B07                 cmp     dword ptr [eax+1Ch], 2
.text:00000B0B                 jnz     short loc_B56
.text:00000B0D                 mov     esi, esp
.text:00000B0F                 push    1
.text:00000B11                 mov     ecx, [ebp+var_4]
.text:00000B14                 mov     edx, [ecx+8]
.text:00000B17                 push    edx
.text:00000B18                 mov     eax, [ebp+var_4]
.text:00000B1B                 mov     ecx, [eax+4]
.text:00000B1E                 mov     edx, [ecx+2Ch]
.text:00000B21                 call    edx
.text:00000B23                 add     esp, 8
.text:00000B26                 cmp     esi, esp
.text:00000B28                 call    __RTC_CheckEsp
.text:00000B2D                 test    eax, eax
.text:00000B2F                 jnz     short loc_B45
.text:00000B31                 push    1
.text:00000B33                 mov     eax, [ebp+var_4]
.text:00000B36                 mov     ecx, [eax]
.text:00000B38                 push    ecx
.text:00000B39                 call    _term_ldisc
.text:00000B3E                 add     esp, 8
.text:00000B41                 test    eax, eax
.text:00000B43                 jz      short loc_B56
.text:00000B45
.text:00000B45 loc_B45:                                ; CODE XREF: _ldisc_send+8C2j
.text:00000B45                                         ; _ldisc_send+8EFj
.text:00000B45                 movzx   edx, byte ptr [ebp+var_C]
.text:00000B49                 push    edx
.text:00000B4A                 mov     eax, [ebp+var_4]
.text:00000B4D                 push    eax
.text:00000B4E                 call    _pwrite
.text:00000B53                 add     esp, 8
.text:00000B56
.text:00000B56 loc_B56:                                ; CODE XREF: _ldisc_send+8CBj
.text:00000B56                                         ; _ldisc_send+903j
.text:00000B56                 mov     ecx, [ebp+var_4]
.text:00000B59                 mov     dword ptr [ecx+30h], 0
.text:00000B60
.text:00000B60 loc_B60:                                ; CODE XREF: _ldisc_send:loc_586j
.text:00000B60                                         ; _ldisc_send:loc_667j ...
.text:00000B60                 jmp     loc_3EE
.text:00000B65 ; ---------------------------------------------------------------------------
.text:00000B65
.text:00000B65 loc_B65:                                ; CODE XREF: _ldisc_send+1C1j
.text:00000B65                 jmp     loc_DC7
.text:00000B6A ; ---------------------------------------------------------------------------
.text:00000B6A
.text:00000B6A loc_B6A:                                ; CODE XREF: _ldisc_send+16Cj
.text:00000B6A                                         ; _ldisc_send+1A8j
.text:00000B6A                 mov     edx, [ebp+var_4]
.text:00000B6D                 cmp     dword ptr [edx+28h], 0
.text:00000B71                 jz      short loc_BE4
.text:00000B73                 mov     esi, esp
.text:00000B75                 mov     eax, [ebp+var_4]
.text:00000B78                 mov     ecx, [eax+28h]
.text:00000B7B                 push    ecx
.text:00000B7C                 mov     edx, [ebp+var_4]
.text:00000B7F                 mov     eax, [edx+24h]
.text:00000B82                 push    eax
.text:00000B83                 mov     ecx, [ebp+var_4]
.text:00000B86                 mov     edx, [ecx+8]
.text:00000B89                 push    edx
.text:00000B8A                 mov     eax, [ebp+var_4]
.text:00000B8D                 mov     ecx, [eax+4]
.text:00000B90                 mov     edx, [ecx+0Ch]
.text:00000B93                 call    edx
.text:00000B95                 add     esp, 0Ch
.text:00000B98                 cmp     esi, esp
.text:00000B9A                 call    __RTC_CheckEsp
.text:00000B9F
.text:00000B9F loc_B9F:                                ; CODE XREF: _ldisc_send+9A2j
.text:00000B9F                 mov     eax, [ebp+var_4]
.text:00000BA2                 cmp     dword ptr [eax+28h], 0
.text:00000BA6                 jle     short loc_BE4
.text:00000BA8                 mov     ecx, [ebp+var_4]
.text:00000BAB                 mov     edx, [ecx+28h]
.text:00000BAE                 mov     eax, [ebp+var_4]
.text:00000BB1                 mov     ecx, [eax+24h]
.text:00000BB4                 movzx   edx, byte ptr [ecx+edx-1]
.text:00000BB9                 push    edx
.text:00000BBA                 mov     eax, [ebp+var_4]
.text:00000BBD                 push    eax
.text:00000BBE                 call    _plen
.text:00000BC3                 add     esp, 8
.text:00000BC6                 push    eax
.text:00000BC7                 mov     ecx, [ebp+var_4]
.text:00000BCA                 push    ecx
.text:00000BCB                 call    _bsb
.text:00000BD0                 add     esp, 8
.text:00000BD3                 mov     edx, [ebp+var_4]
.text:00000BD6                 mov     eax, [edx+28h]
.text:00000BD9                 sub     eax, 1
.text:00000BDC                 mov     ecx, [ebp+var_4]
.text:00000BDF                 mov     [ecx+28h], eax
.text:00000BE2                 jmp     short loc_B9F
.text:00000BE4 ; ---------------------------------------------------------------------------
.text:00000BE4
.text:00000BE4 loc_BE4:                                ; CODE XREF: _ldisc_send+931j
.text:00000BE4                                         ; _ldisc_send+966j
.text:00000BE4                 cmp     [ebp+arg_8], 0
.text:00000BE8                 jle     loc_DC7
.text:00000BEE                 mov     edx, [ebp+var_4]
.text:00000BF1                 cmp     dword ptr [edx+1Ch], 0
.text:00000BF5                 jz      short loc_C38
.text:00000BF7                 mov     eax, [ebp+var_4]
.text:00000BFA                 cmp     dword ptr [eax+1Ch], 2
.text:00000BFE                 jnz     short loc_C4C
.text:00000C00                 mov     esi, esp
.text:00000C02                 push    1
.text:00000C04                 mov     ecx, [ebp+var_4]
.text:00000C07                 mov     edx, [ecx+8]
.text:00000C0A                 push    edx
.text:00000C0B                 mov     eax, [ebp+var_4]
.text:00000C0E                 mov     ecx, [eax+4]
.text:00000C11                 mov     edx, [ecx+2Ch]
.text:00000C14                 call    edx
.text:00000C16                 add     esp, 8
.text:00000C19                 cmp     esi, esp
.text:00000C1B                 call    __RTC_CheckEsp
.text:00000C20                 test    eax, eax
.text:00000C22                 jnz     short loc_C38
.text:00000C24                 push    1
.text:00000C26                 mov     eax, [ebp+var_4]
.text:00000C29                 mov     ecx, [eax]
.text:00000C2B                 push    ecx
.text:00000C2C                 call    _term_ldisc
.text:00000C31                 add     esp, 8
.text:00000C34                 test    eax, eax
.text:00000C36                 jz      short loc_C4C
.text:00000C38
.text:00000C38 loc_C38:                                ; CODE XREF: _ldisc_send+9B5j
.text:00000C38                                         ; _ldisc_send+9E2j
.text:00000C38                 mov     edx, [ebp+arg_8]
.text:00000C3B                 push    edx
.text:00000C3C                 mov     eax, [ebp+arg_4]
.text:00000C3F                 push    eax
.text:00000C40                 mov     ecx, [ebp+var_4]
.text:00000C43                 push    ecx
.text:00000C44                 call    _c_write
.text:00000C49                 add     esp, 0Ch
.text:00000C4C
.text:00000C4C loc_C4C:                                ; CODE XREF: _ldisc_send+9BEj
.text:00000C4C                                         ; _ldisc_send+9F6j
.text:00000C4C                 cmp     [ebp+var_8], 0
.text:00000C50                 jz      loc_DA1
.text:00000C56                 mov     edx, [ebp+var_4]
.text:00000C59                 cmp     dword ptr [edx+18h], 1
.text:00000C5D                 jnz     loc_DA1
.text:00000C63                 cmp     [ebp+arg_8], 1
.text:00000C67                 jnz     loc_DA1
.text:00000C6D                 mov     eax, [ebp+arg_4]
.text:00000C70                 movsx   ecx, byte ptr [eax]
.text:00000C73                 mov     [ebp+var_28], ecx
.text:00000C76                 mov     edx, [ebp+var_28]
.text:00000C79                 sub     edx, 3
.text:00000C7C                 mov     [ebp+var_28], edx
.text:00000C7F                 cmp     [ebp+var_28], 7Ch ; '|' ; switch 125 cases
.text:00000C83                 ja      $LN2            ; jumptable 00000C93 default case
.text:00000C89                 mov     eax, [ebp+var_28]
.text:00000C8C                 movzx   ecx, ds:$LN105[eax]
.text:00000C93                 jmp     ds:$LN108[ecx*4] ; switch jump
.text:00000C9A ; ---------------------------------------------------------------------------
.text:00000C9A
.text:00000C9A $LN11:                                  ; CODE XREF: _ldisc_send+A53j
.text:00000C9A                                         ; DATA XREF: .text:$LN108o
.text:00000C9A                 mov     edx, [ebp+var_4] ; jumptable 00000C93 case 10
.text:00000C9D                 cmp     dword ptr [edx+18h], 1
.text:00000CA1                 jnz     short loc_CCE
.text:00000CA3                 mov     eax, [ebp+var_4]
.text:00000CA6                 cmp     dword ptr [eax+14h], 0
.text:00000CAA                 jz      short loc_CCE
.text:00000CAC                 mov     esi, esp
.text:00000CAE                 push    10h
.text:00000CB0                 mov     ecx, [ebp+var_4]
.text:00000CB3                 mov     edx, [ecx+8]
.text:00000CB6                 push    edx
.text:00000CB7                 mov     eax, [ebp+var_4]
.text:00000CBA                 mov     ecx, [eax+4]
.text:00000CBD                 mov     edx, [ecx+18h]
.text:00000CC0                 call    edx
.text:00000CC2                 add     esp, 8
.text:00000CC5                 cmp     esi, esp
.text:00000CC7                 call    __RTC_CheckEsp
.text:00000CCC                 jmp     short loc_CF3
.text:00000CCE ; ---------------------------------------------------------------------------
.text:00000CCE
.text:00000CCE loc_CCE:                                ; CODE XREF: _ldisc_send+A61j
.text:00000CCE                                         ; _ldisc_send+A6Aj
.text:00000CCE                 mov     esi, esp
.text:00000CD0                 push    1
.text:00000CD2                 push    offset $SG86007
.text:00000CD7                 mov     eax, [ebp+var_4]
.text:00000CDA                 mov     ecx, [eax+8]
.text:00000CDD                 push    ecx
.text:00000CDE                 mov     edx, [ebp+var_4]
.text:00000CE1                 mov     eax, [edx+4]
.text:00000CE4                 mov     ecx, [eax+0Ch]
.text:00000CE7                 call    ecx
.text:00000CE9                 add     esp, 0Ch
.text:00000CEC                 cmp     esi, esp
.text:00000CEE                 call    __RTC_CheckEsp
.text:00000CF3
.text:00000CF3 loc_CF3:                                ; CODE XREF: _ldisc_send+A8Cj
.text:00000CF3                 jmp     loc_D9F
.text:00000CF8 ; ---------------------------------------------------------------------------
.text:00000CF8
.text:00000CF8 $LN8:                                   ; CODE XREF: _ldisc_send+A53j
.text:00000CF8                                         ; DATA XREF: .text:$LN108o
.text:00000CF8                 mov     edx, [ebp+var_4] ; jumptable 00000C93 cases 5,124
.text:00000CFB                 cmp     dword ptr [edx+10h], 0
.text:00000CFF                 jz      short $LN6      ; jumptable 00000C93 case 0
.text:00000D01                 mov     esi, esp
.text:00000D03                 push    3
.text:00000D05                 mov     eax, [ebp+var_4]
.text:00000D08                 mov     ecx, [eax+8]
.text:00000D0B                 push    ecx
.text:00000D0C                 mov     edx, [ebp+var_4]
.text:00000D0F                 mov     eax, [edx+4]
.text:00000D12                 mov     ecx, [eax+18h]
.text:00000D15                 call    ecx
.text:00000D17                 add     esp, 8
.text:00000D1A                 cmp     esi, esp
.text:00000D1C                 call    __RTC_CheckEsp
.text:00000D21                 jmp     short loc_D9F
.text:00000D23 ; ---------------------------------------------------------------------------
.text:00000D23
.text:00000D23 $LN6:                                   ; CODE XREF: _ldisc_send+A53j
.text:00000D23                                         ; _ldisc_send+ABFj
.text:00000D23                                         ; DATA XREF: ...
.text:00000D23                 mov     edx, [ebp+var_4] ; jumptable 00000C93 case 0
.text:00000D26                 cmp     dword ptr [edx+10h], 0
.text:00000D2A                 jz      short $LN4      ; jumptable 00000C93 case 23
.text:00000D2C                 mov     esi, esp
.text:00000D2E                 push    9
.text:00000D30                 mov     eax, [ebp+var_4]
.text:00000D33                 mov     ecx, [eax+8]
.text:00000D36                 push    ecx
.text:00000D37                 mov     edx, [ebp+var_4]
.text:00000D3A                 mov     eax, [edx+4]
.text:00000D3D                 mov     ecx, [eax+18h]
.text:00000D40                 call    ecx
.text:00000D42                 add     esp, 8
.text:00000D45                 cmp     esi, esp
.text:00000D47                 call    __RTC_CheckEsp
.text:00000D4C                 jmp     short loc_D9F
.text:00000D4E ; ---------------------------------------------------------------------------
.text:00000D4E
.text:00000D4E $LN4:                                   ; CODE XREF: _ldisc_send+A53j
.text:00000D4E                                         ; _ldisc_send+AEAj
.text:00000D4E                                         ; DATA XREF: ...
.text:00000D4E                 mov     edx, [ebp+var_4] ; jumptable 00000C93 case 23
.text:00000D51                 cmp     dword ptr [edx+10h], 0
.text:00000D55                 jz      short $LN2      ; jumptable 00000C93 default case
.text:00000D57                 mov     esi, esp
.text:00000D59                 push    0Ah
.text:00000D5B                 mov     eax, [ebp+var_4]
.text:00000D5E                 mov     ecx, [eax+8]
.text:00000D61                 push    ecx
.text:00000D62                 mov     edx, [ebp+var_4]
.text:00000D65                 mov     eax, [edx+4]
.text:00000D68                 mov     ecx, [eax+18h]
.text:00000D6B                 call    ecx
.text:00000D6D                 add     esp, 8
.text:00000D70                 cmp     esi, esp
.text:00000D72                 call    __RTC_CheckEsp
.text:00000D77                 jmp     short loc_D9F
.text:00000D79 ; ---------------------------------------------------------------------------
.text:00000D79
.text:00000D79 $LN2:                                   ; CODE XREF: _ldisc_send+A43j
.text:00000D79                                         ; _ldisc_send+A53j ...
.text:00000D79                 mov     esi, esp        ; jumptable 00000C93 default case
.text:00000D7B                 mov     edx, [ebp+arg_8]
.text:00000D7E                 push    edx
.text:00000D7F                 mov     eax, [ebp+arg_4]
.text:00000D82                 push    eax
.text:00000D83                 mov     ecx, [ebp+var_4]
.text:00000D86                 mov     edx, [ecx+8]
.text:00000D89                 push    edx
.text:00000D8A                 mov     eax, [ebp+var_4]
.text:00000D8D                 mov     ecx, [eax+4]
.text:00000D90                 mov     edx, [ecx+0Ch]
.text:00000D93                 call    edx
.text:00000D95                 add     esp, 0Ch
.text:00000D98                 cmp     esi, esp
.text:00000D9A                 call    __RTC_CheckEsp
.text:00000D9F
.text:00000D9F loc_D9F:                                ; CODE XREF: _ldisc_send:loc_CF3j
.text:00000D9F                                         ; _ldisc_send+AE1j ...
.text:00000D9F                 jmp     short loc_DC7
.text:00000DA1 ; ---------------------------------------------------------------------------
.text:00000DA1
.text:00000DA1 loc_DA1:                                ; CODE XREF: _ldisc_send+A10j
.text:00000DA1                                         ; _ldisc_send+A1Dj ...
.text:00000DA1                 mov     esi, esp
.text:00000DA3                 mov     eax, [ebp+arg_8]
.text:00000DA6                 push    eax
.text:00000DA7                 mov     ecx, [ebp+arg_4]
.text:00000DAA                 push    ecx
.text:00000DAB                 mov     edx, [ebp+var_4]
.text:00000DAE                 mov     eax, [edx+8]
.text:00000DB1                 push    eax
.text:00000DB2                 mov     ecx, [ebp+var_4]
.text:00000DB5                 mov     edx, [ecx+4]
.text:00000DB8                 mov     eax, [edx+0Ch]
.text:00000DBB                 call    eax
.text:00000DBD                 add     esp, 0Ch
.text:00000DC0                 cmp     esi, esp
.text:00000DC2                 call    __RTC_CheckEsp
.text:00000DC7
.text:00000DC7 loc_DC7:                                ; CODE XREF: _ldisc_send+F9j
.text:00000DC7                                         ; _ldisc_send:loc_B65j ...
.text:00000DC7                 pop     edi
.text:00000DC8                 pop     esi
.text:00000DC9                 add     esp, 28h
.text:00000DCC                 cmp     ebp, esp
.text:00000DCE                 call    __RTC_CheckEsp
.text:00000DD3                 mov     esp, ebp
.text:00000DD5                 pop     ebp
.text:00000DD6                 retn
.text:00000DD6 _ldisc_send     endp
.text:00000DD6
.text:00000DD6 ; ---------------------------------------------------------------------------
.text:00000DD7                 align 4
.text:00000DD8 $LN106          dd offset $LN61         ; DATA XREF: _ldisc_send+23Fr
.text:00000DD8                 dd offset $LN44         ; jump table for switch statement
.text:00000DD8                 dd offset $LN41
.text:00000DD8                 dd offset $LN52
.text:00000DD8                 dd offset $default_case$85947
.text:00000DEC $LN104          db      0,     1,     4,     4 ; DATA XREF: _ldisc_send+238r
.text:00000DEC                 db      4,     4,     4,     2 ; indirect table for switch statement
.text:00000DEC                 db      4,     4,     4,     4
.text:00000DEC                 db      4,     4,     4,     3
.text:00000DFC $LN107          dd offset $LN45         ; DATA XREF: _ldisc_send+26Er
.text:00000DFC                 dd offset $LN68         ; jump table for switch statement
.text:00000DFC                 dd offset $default_case$85947
.text:00000DFC                 dd offset $default_case$85947
.text:00000DFC                 dd offset $LN61
.text:00000DFC                 dd offset $default_case$85947
.text:00000DFC                 dd offset $LN61
.text:00000E18 $LN108          dd offset $LN6, offset $LN8, offset $LN11, offset $LN4
.text:00000E18                                         ; DATA XREF: _ldisc_send+A53r
.text:00000E18                 dd offset $LN2          ; jump table for switch statement
.text:00000E2C $LN105          db      0,     4,     4,     4 ; DATA XREF: _ldisc_send+A4Cr
.text:00000E2C                 db      4,     1,     4,     4 ; indirect table for switch statement
.text:00000E2C                 db      4,     4,     2,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     3
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      4,     4,     4,     4
.text:00000E2C                 db      1
.text:00000EA9                 align 10h
.text:00000EB0
.text:00000EB0 ; =============== S U B R O U T I N E =======================================
.text:00000EB0
.text:00000EB0 ; Attributes: bp-based frame
.text:00000EB0
.text:00000EB0 _c_write        proc near               ; CODE XREF: _ldisc_send+5C0p
.text:00000EB0                                         ; _ldisc_send+846p ...
.text:00000EB0
.text:00000EB0 arg_0           = dword ptr  8
.text:00000EB0 arg_4           = dword ptr  0Ch
.text:00000EB0 arg_8           = dword ptr  10h
.text:00000EB0
.text:00000EB0                 push    ebp
.text:00000EB1                 mov     ebp, esp
.text:00000EB3                 mov     eax, [ebp+arg_8]
.text:00000EB6                 push    eax
.text:00000EB7                 mov     ecx, [ebp+arg_4]
.text:00000EBA                 push    ecx
.text:00000EBB                 push    0
.text:00000EBD                 mov     edx, [ebp+arg_0]
.text:00000EC0                 mov     eax, [edx+0Ch]
.text:00000EC3                 push    eax
.text:00000EC4                 call    _from_backend
.text:00000EC9                 add     esp, 10h
.text:00000ECC                 cmp     ebp, esp
.text:00000ECE                 call    __RTC_CheckEsp
.text:00000ED3                 pop     ebp
.text:00000ED4                 retn
.text:00000ED4 _c_write        endp
.text:00000ED4
.text:00000ED4 ; ---------------------------------------------------------------------------
.text:00000ED5                 align 10h
.text:00000EE0
.text:00000EE0 ; =============== S U B R O U T I N E =======================================
.text:00000EE0
.text:00000EE0 ; Attributes: bp-based frame
.text:00000EE0
.text:00000EE0 _plen           proc near               ; CODE XREF: _ldisc_send+2FDp
.text:00000EE0                                         ; _ldisc_send+3B8p ...
.text:00000EE0
.text:00000EE0 arg_0           = dword ptr  8
.text:00000EE0 arg_4           = byte ptr  0Ch
.text:00000EE0
.text:00000EE0                 push    ebp
.text:00000EE1                 mov     ebp, esp
.text:00000EE3                 movzx   eax, [ebp+arg_4]
.text:00000EE7                 cmp     eax, 20h ; ' '
.text:00000EEA                 jl      short loc_EF5
.text:00000EEC                 movzx   ecx, [ebp+arg_4]
.text:00000EF0                 cmp     ecx, 7Eh ; '~'
.text:00000EF3                 jle     short loc_F23
.text:00000EF5
.text:00000EF5 loc_EF5:                                ; CODE XREF: _plen+Aj
.text:00000EF5                 movzx   edx, [ebp+arg_4]
.text:00000EF9                 cmp     edx, 0A0h ; 'á'
.text:00000EFF                 jl      short loc_F32
.text:00000F01                 mov     eax, [ebp+arg_0]
.text:00000F04                 mov     ecx, [eax]
.text:00000F06                 cmp     dword ptr [ecx+0DCh], 0
.text:00000F0D                 jnz     short loc_F32
.text:00000F0F                 mov     edx, [ebp+arg_0]
.text:00000F12                 mov     eax, [edx]
.text:00000F14                 mov     ecx, [eax+1090h]
.text:00000F1A                 cmp     dword ptr [ecx+0Ch], 0FDE9h
.text:00000F21                 jz      short loc_F32
.text:00000F23
.text:00000F23 loc_F23:                                ; CODE XREF: _plen+13j
.text:00000F23                 mov     eax, 1
.text:00000F28                 jmp     loc_FC2
.text:00000F2D ; ---------------------------------------------------------------------------
.text:00000F2D                 jmp     loc_FC2
.text:00000F32 ; ---------------------------------------------------------------------------
.text:00000F32
.text:00000F32 loc_F32:                                ; CODE XREF: _plen+1Fj
.text:00000F32                                         ; _plen+2Dj ...
.text:00000F32                 movzx   edx, [ebp+arg_4]
.text:00000F36                 cmp     edx, 80h ; 'Ç'
.text:00000F3C                 jge     short loc_F47
.text:00000F3E                 mov     eax, 2
.text:00000F43                 jmp     short loc_FC2
.text:00000F45 ; ---------------------------------------------------------------------------
.text:00000F45                 jmp     short loc_FC2
.text:00000F47 ; ---------------------------------------------------------------------------
.text:00000F47
.text:00000F47 loc_F47:                                ; CODE XREF: _plen+5Cj
.text:00000F47                 mov     eax, [ebp+arg_0]
.text:00000F4A                 mov     ecx, [eax]
.text:00000F4C                 cmp     dword ptr [ecx+0DCh], 0
.text:00000F53                 jnz     short loc_F69
.text:00000F55                 mov     edx, [ebp+arg_0]
.text:00000F58                 mov     eax, [edx]
.text:00000F5A                 mov     ecx, [eax+1090h]
.text:00000F60                 cmp     dword ptr [ecx+0Ch], 0FDE9h
.text:00000F67                 jnz     short loc_F7E
.text:00000F69
.text:00000F69 loc_F69:                                ; CODE XREF: _plen+73j
.text:00000F69                 movzx   edx, [ebp+arg_4]
.text:00000F6D                 cmp     edx, 0C0h ; '+'
.text:00000F73                 jl      short loc_F7E
.text:00000F75                 mov     eax, 1
.text:00000F7A                 jmp     short loc_FC2
.text:00000F7C ; ---------------------------------------------------------------------------
.text:00000F7C                 jmp     short loc_FC2
.text:00000F7E ; ---------------------------------------------------------------------------
.text:00000F7E
.text:00000F7E loc_F7E:                                ; CODE XREF: _plen+87j
.text:00000F7E                                         ; _plen+93j
.text:00000F7E                 mov     eax, [ebp+arg_0]
.text:00000F81                 mov     ecx, [eax]
.text:00000F83                 cmp     dword ptr [ecx+0DCh], 0
.text:00000F8A                 jnz     short loc_FA0
.text:00000F8C                 mov     edx, [ebp+arg_0]
.text:00000F8F                 mov     eax, [edx]
.text:00000F91                 mov     ecx, [eax+1090h]
.text:00000F97                 cmp     dword ptr [ecx+0Ch], 0FDE9h
.text:00000F9E                 jnz     short loc_FBD
.text:00000FA0
.text:00000FA0 loc_FA0:                                ; CODE XREF: _plen+AAj
.text:00000FA0                 movzx   edx, [ebp+arg_4]
.text:00000FA4                 cmp     edx, 80h ; 'Ç'
.text:00000FAA                 jl      short loc_FBD
.text:00000FAC                 movzx   eax, [ebp+arg_4]
.text:00000FB0                 cmp     eax, 0C0h ; '+'
.text:00000FB5                 jge     short loc_FBD
.text:00000FB7                 xor     eax, eax
.text:00000FB9                 jmp     short loc_FC2
.text:00000FBB ; ---------------------------------------------------------------------------
.text:00000FBB                 jmp     short loc_FC2
.text:00000FBD ; ---------------------------------------------------------------------------
.text:00000FBD
.text:00000FBD loc_FBD:                                ; CODE XREF: _plen+BEj
.text:00000FBD                                         ; _plen+CAj ...
.text:00000FBD                 mov     eax, 4
.text:00000FC2
.text:00000FC2 loc_FC2:                                ; CODE XREF: _plen+48j
.text:00000FC2                                         ; _plen+4Dj ...
.text:00000FC2                 pop     ebp
.text:00000FC3                 retn
.text:00000FC3 _plen           endp
.text:00000FC3
.text:00000FC3 ; ---------------------------------------------------------------------------
.text:00000FC4                 align 10h
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 _pwrite         proc near               ; CODE XREF: _ldisc_send+5F7p
.text:00000FD0                                         ; _ldisc_send+90Ep
.text:00000FD0
.text:00000FD0 var_24          = dword ptr -24h
.text:00000FD0 var_20          = dword ptr -20h
.text:00000FD0 var_1C          = byte ptr -1Ch
.text:00000FD0 var_18          = dword ptr -18h
.text:00000FD0 var_14          = dword ptr -14h
.text:00000FD0 var_10          = dword ptr -10h
.text:00000FD0 var_C           = dword ptr -0Ch
.text:00000FD0 var_8           = dword ptr -8
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0 arg_0           = dword ptr  8
.text:00000FD0 arg_4           = byte ptr  0Ch
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 sub     esp, 24h
.text:00000FD6                 mov     eax, 0CCCCCCCCh
.text:00000FDB                 mov     [ebp+var_24], eax
.text:00000FDE                 mov     [ebp+var_20], eax
.text:00000FE1                 mov     dword ptr [ebp+var_1C], eax
.text:00000FE4                 mov     [ebp+var_18], eax
.text:00000FE7                 mov     [ebp+var_14], eax
.text:00000FEA                 mov     [ebp+var_10], eax
.text:00000FED                 mov     [ebp+var_C], eax
.text:00000FF0                 mov     [ebp+var_8], eax
.text:00000FF3                 mov     [ebp+var_4], eax
.text:00000FF6                 mov     eax, dword ptr ds:___security_cookie
.text:00000FFB                 xor     eax, ebp
.text:00000FFD                 mov     [ebp+var_4], eax
.text:00001000                 movzx   eax, [ebp+arg_4]
.text:00001004                 cmp     eax, 20h ; ' '
.text:00001007                 jl      short loc_1012
.text:00001009                 movzx   ecx, [ebp+arg_4]
.text:0000100D                 cmp     ecx, 7Eh ; '~'
.text:00001010                 jle     short loc_106E
.text:00001012
.text:00001012 loc_1012:                               ; CODE XREF: _pwrite+37j
.text:00001012                 mov     edx, [ebp+arg_0]
.text:00001015                 mov     eax, [edx]
.text:00001017                 cmp     dword ptr [eax+0DCh], 0
.text:0000101E                 jnz     short loc_1040
.text:00001020                 mov     ecx, [ebp+arg_0]
.text:00001023                 mov     edx, [ecx]
.text:00001025                 mov     eax, [edx+1090h]
.text:0000102B                 cmp     dword ptr [eax+0Ch], 0FDE9h
.text:00001032                 jz      short loc_1040
.text:00001034                 movzx   ecx, [ebp+arg_4]
.text:00001038                 cmp     ecx, 0A0h ; 'á'
.text:0000103E                 jge     short loc_106E
.text:00001040
.text:00001040 loc_1040:                               ; CODE XREF: _pwrite+4Ej
.text:00001040                                         ; _pwrite+62j
.text:00001040                 mov     edx, [ebp+arg_0]
.text:00001043                 mov     eax, [edx]
.text:00001045                 cmp     dword ptr [eax+0DCh], 0
.text:0000104C                 jnz     short loc_1062
.text:0000104E                 mov     ecx, [ebp+arg_0]
.text:00001051                 mov     edx, [ecx]
.text:00001053                 mov     eax, [edx+1090h]
.text:00001059                 cmp     dword ptr [eax+0Ch], 0FDE9h
.text:00001060                 jnz     short loc_1082
.text:00001062
.text:00001062 loc_1062:                               ; CODE XREF: _pwrite+7Cj
.text:00001062                 movzx   ecx, [ebp+arg_4]
.text:00001066                 cmp     ecx, 80h ; 'Ç'
.text:0000106C                 jl      short loc_1082
.text:0000106E
.text:0000106E loc_106E:                               ; CODE XREF: _pwrite+40j
.text:0000106E                                         ; _pwrite+6Ej
.text:0000106E                 push    1
.text:00001070                 lea     edx, [ebp+arg_4]
.text:00001073                 push    edx
.text:00001074                 mov     eax, [ebp+arg_0]
.text:00001077                 push    eax
.text:00001078                 call    _c_write
.text:0000107D                 add     esp, 0Ch
.text:00001080                 jmp     short loc_10F0
.text:00001082 ; ---------------------------------------------------------------------------
.text:00001082
.text:00001082 loc_1082:                               ; CODE XREF: _pwrite+90j
.text:00001082                                         ; _pwrite+9Cj
.text:00001082                 movzx   ecx, [ebp+arg_4]
.text:00001086                 cmp     ecx, 80h ; 'Ç'
.text:0000108C                 jge     short loc_10C8
.text:0000108E                 movzx   edx, [ebp+arg_4]
.text:00001092                 cmp     edx, 7Fh ; ''
.text:00001095                 jnz     short loc_10A0
.text:00001097                 mov     [ebp+var_24], 3Fh ; '?'
.text:0000109E                 jmp     short loc_10AA
.text:000010A0 ; ---------------------------------------------------------------------------
.text:000010A0
.text:000010A0 loc_10A0:                               ; CODE XREF: _pwrite+C5j
.text:000010A0                 movzx   eax, [ebp+arg_4]
.text:000010A4                 add     eax, 40h ; '@'
.text:000010A7                 mov     [ebp+var_24], eax
.text:000010AA
.text:000010AA loc_10AA:                               ; CODE XREF: _pwrite+CEj
.text:000010AA                 mov     cl, byte ptr [ebp+var_24]
.text:000010AD                 mov     byte ptr [ebp+var_C+1], cl
.text:000010B0                 mov     byte ptr [ebp+var_C], 5Eh ; '^'
.text:000010B4                 push    2
.text:000010B6                 lea     edx, [ebp+var_C]
.text:000010B9                 push    edx
.text:000010BA                 mov     eax, [ebp+arg_0]
.text:000010BD                 push    eax
.text:000010BE                 call    _c_write
.text:000010C3                 add     esp, 0Ch
.text:000010C6                 jmp     short loc_10F0
.text:000010C8 ; ---------------------------------------------------------------------------
.text:000010C8
.text:000010C8 loc_10C8:                               ; CODE XREF: _pwrite+BCj
.text:000010C8                 movzx   ecx, [ebp+arg_4]
.text:000010CC                 push    ecx
.text:000010CD                 push    offset $SG85836 ; "<%02X>"
.text:000010D2                 lea     edx, [ebp+var_1C]
.text:000010D5                 push    edx             ; char *
.text:000010D6                 call    _sprintf
.text:000010DB                 add     esp, 0Ch
.text:000010DE                 push    4
.text:000010E0                 lea     eax, [ebp+var_1C]
.text:000010E3                 push    eax
.text:000010E4                 mov     ecx, [ebp+arg_0]
.text:000010E7                 push    ecx
.text:000010E8                 call    _c_write
.text:000010ED                 add     esp, 0Ch
.text:000010F0
.text:000010F0 loc_10F0:                               ; CODE XREF: _pwrite+B0j
.text:000010F0                                         ; _pwrite+F6j
.text:000010F0                 push    edx
.text:000010F1                 mov     ecx, ebp
.text:000010F3                 push    eax
.text:000010F4                 lea     edx, $LN16
.text:000010FA                 call    @_RTC_CheckStackVars@8
.text:000010FF                 pop     eax
.text:00001100                 pop     edx
.text:00001101                 mov     ecx, [ebp+var_4]
.text:00001104                 xor     ecx, ebp
.text:00001106                 call    @__security_check_cookie@4
.text:0000110B                 add     esp, 24h
.text:0000110E                 cmp     ebp, esp
.text:00001110                 call    __RTC_CheckEsp
.text:00001115                 mov     esp, ebp
.text:00001117                 pop     ebp
.text:00001118                 retn
.text:00001118 _pwrite         endp
.text:00001118
.text:00001118 ; ---------------------------------------------------------------------------
.text:00001119                 align 4
.text:0000111C $LN16           dd 2                    ; DATA XREF: _pwrite+124o
.text:00001120                 dd offset $LN15
.text:00001124 $LN15           dd 0FFFFFFF4h, 2        ; DATA XREF: .text:00001120o
.text:0000112C                 dd offset $LN13
.text:00001130                 dd 0FFFFFFE4h, 5
.text:00001138                 dd offset $LN14
.text:0000113C $LN14           db 2 dup(63h), 0        ; DATA XREF: .text:00001138o
.text:0000113F $LN13           db 63h                  ; DATA XREF: .text:0000112Co
.text:00001140                 dd 0CCCC0063h, 3 dup(0CCCCCCCCh)
.text:00001150
.text:00001150 ; =============== S U B R O U T I N E =======================================
.text:00001150
.text:00001150 ; Attributes: bp-based frame
.text:00001150
.text:00001150 _char_start     proc near               ; CODE XREF: _ldisc_send+336p
.text:00001150
.text:00001150 var_4           = dword ptr -4
.text:00001150 arg_0           = dword ptr  8
.text:00001150 arg_4           = byte ptr  0Ch
.text:00001150
.text:00001150                 push    ebp
.text:00001151                 mov     ebp, esp
.text:00001153                 push    ecx
.text:00001154                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000115B                 mov     eax, [ebp+arg_0]
.text:0000115E                 mov     ecx, [eax]
.text:00001160                 cmp     dword ptr [ecx+0DCh], 0
.text:00001167                 jnz     short loc_117D
.text:00001169                 mov     edx, [ebp+arg_0]
.text:0000116C                 mov     eax, [edx]
.text:0000116E                 mov     ecx, [eax+1090h]
.text:00001174                 cmp     dword ptr [ecx+0Ch], 0FDE9h
.text:0000117B                 jnz     short loc_11AB
.text:0000117D
.text:0000117D loc_117D:                               ; CODE XREF: _char_start+17j
.text:0000117D                 movzx   edx, [ebp+arg_4]
.text:00001181                 cmp     edx, 80h ; 'Ç'
.text:00001187                 jl      short loc_119D
.text:00001189                 movzx   eax, [ebp+arg_4]
.text:0000118D                 cmp     eax, 0C0h ; '+'
.text:00001192                 jge     short loc_119D
.text:00001194                 mov     [ebp+var_4], 0
.text:0000119B                 jmp     short loc_11A4
.text:0000119D ; ---------------------------------------------------------------------------
.text:0000119D
.text:0000119D loc_119D:                               ; CODE XREF: _char_start+37j
.text:0000119D                                         ; _char_start+42j
.text:0000119D                 mov     [ebp+var_4], 1
.text:000011A4
.text:000011A4 loc_11A4:                               ; CODE XREF: _char_start+4Bj
.text:000011A4                 mov     eax, [ebp+var_4]
.text:000011A7                 jmp     short loc_11B0
.text:000011A9 ; ---------------------------------------------------------------------------
.text:000011A9                 jmp     short loc_11B0
.text:000011AB ; ---------------------------------------------------------------------------
.text:000011AB
.text:000011AB loc_11AB:                               ; CODE XREF: _char_start+2Bj
.text:000011AB                 mov     eax, 1
.text:000011B0
.text:000011B0 loc_11B0:                               ; CODE XREF: _char_start+57j
.text:000011B0                                         ; _char_start+59j
.text:000011B0                 mov     esp, ebp
.text:000011B2                 pop     ebp
.text:000011B3                 retn
.text:000011B3 _char_start     endp
.text:000011B3
.text:000011B3 ; ---------------------------------------------------------------------------
.text:000011B4                 align 10h
.text:000011C0
.text:000011C0 ; =============== S U B R O U T I N E =======================================
.text:000011C0
.text:000011C0 ; Attributes: bp-based frame
.text:000011C0
.text:000011C0 _bsb            proc near               ; CODE XREF: _ldisc_send+30Ap
.text:000011C0                                         ; _ldisc_send+3C5p ...
.text:000011C0
.text:000011C0 var_4           = dword ptr -4
.text:000011C0 arg_0           = dword ptr  8
.text:000011C0 arg_4           = dword ptr  0Ch
.text:000011C0
.text:000011C0                 push    ebp
.text:000011C1                 mov     ebp, esp
.text:000011C3                 push    ecx
.text:000011C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011CB
.text:000011CB loc_11CB:                               ; CODE XREF: _bsb+33j
.text:000011CB                 mov     eax, [ebp+arg_4]
.text:000011CE                 mov     [ebp+var_4], eax
.text:000011D1                 mov     ecx, [ebp+arg_4]
.text:000011D4                 sub     ecx, 1
.text:000011D7                 mov     [ebp+arg_4], ecx
.text:000011DA                 cmp     [ebp+var_4], 0
.text:000011DE                 jz      short loc_11F5
.text:000011E0                 push    3
.text:000011E2                 push    offset $SG85855 ; "\b \b"
.text:000011E7                 mov     edx, [ebp+arg_0]
.text:000011EA                 push    edx
.text:000011EB                 call    _c_write
.text:000011F0                 add     esp, 0Ch
.text:000011F3                 jmp     short loc_11CB
.text:000011F5 ; ---------------------------------------------------------------------------
.text:000011F5
.text:000011F5 loc_11F5:                               ; CODE XREF: _bsb+1Ej
.text:000011F5                 add     esp, 4
.text:000011F8                 cmp     ebp, esp
.text:000011FA                 call    __RTC_CheckEsp
.text:000011FF                 mov     esp, ebp
.text:00001201                 pop     ebp
.text:00001202                 retn
.text:00001202 _bsb            endp
.text:00001202
.text:00001202 ; ---------------------------------------------------------------------------
.text:00001203                 align 4
.text:00001203 _text           ends
.text:00001203
.rtc$TMZ:00001204 ; ===========================================================================
.rtc$TMZ:00001204
.rtc$TMZ:00001204 ; Segment type: Pure data
.rtc$TMZ:00001204 ; Segment permissions: Read
.rtc$TMZ:00001204 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001204                 assume cs:_rtc$TMZ
.rtc$TMZ:00001204                 ;org 1204h
.rtc$TMZ:00001204 ; COMDAT (pick any)
.rtc$TMZ:00001204 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001204 _rtc$TMZ        ends
.rtc$TMZ:00001204
.rtc$IMZ:00001208 ; ===========================================================================
.rtc$IMZ:00001208
.rtc$IMZ:00001208 ; Segment type: Pure data
.rtc$IMZ:00001208 ; Segment permissions: Read
.rtc$IMZ:00001208 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001208                 assume cs:_rtc$IMZ
.rtc$IMZ:00001208                 ;org 1208h
.rtc$IMZ:00001208 ; COMDAT (pick any)
.rtc$IMZ:00001208 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001208 _rtc$IMZ        ends
.rtc$IMZ:00001208
UNDEF:00001210 ; ===========================================================================
UNDEF:00001210
UNDEF:00001210 ; Segment type: Externs
UNDEF:00001210 ; UNDEF
UNDEF:00001210                 extrn _safemalloc:near  ; CODE XREF: _ldisc_create+10p
UNDEF:00001214                 extrn __RTC_CheckEsp:near ; CODE XREF: _ldisc_create+A5p
UNDEF:00001214                                         ; _ldisc_create+B3p ...
UNDEF:00001218                 extrn __RTC_Shutdown:near
UNDEF:00001218                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000121C                 extrn __RTC_InitBase:near
UNDEF:0000121C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001220                 extrn _conf_get_int:near ; CODE XREF: _ldisc_configure+17p
UNDEF:00001220                                         ; _ldisc_configure+2Bp ...
UNDEF:00001224                 extrn _safefree:near    ; CODE XREF: _ldisc_free+62p
UNDEF:00001224                                         ; _ldisc_free+6Ep
UNDEF:00001228                 extrn _saferealloc:near ; CODE XREF: _ldisc_send+88Cp
UNDEF:0000122C ; int __cdecl isspace(int)
UNDEF:0000122C                 extrn _isspace:near     ; CODE XREF: _ldisc_send+3F7p
UNDEF:0000122C                                         ; _ldisc_send+414p
UNDEF:00001230 ; size_t __cdecl strlen(const char *)
UNDEF:00001230                 extrn _strlen:near      ; CODE XREF: _ldisc_send+14Ap
UNDEF:00001234                 extrn _term_nopaste:near ; CODE XREF: _ldisc_send+138p
UNDEF:00001238                 extrn _frontend_keypress:near ; CODE XREF: _ldisc_send+124p
UNDEF:0000123C                 extrn __wassert:near    ; CODE XREF: _ldisc_send+115p
UNDEF:00001240                 extrn _ldisc_update:near ; CODE XREF: _ldisc_send+F1p
UNDEF:00001244                 extrn _term_ldisc:near  ; CODE XREF: _ldisc_send+6Cp
UNDEF:00001244                                         ; _ldisc_send+C6p ...
UNDEF:00001248                 extrn _from_backend:near ; CODE XREF: _c_write+14p
UNDEF:0000124C ; int sprintf(char *, const char *, ...)
UNDEF:0000124C                 extrn _sprintf:near     ; CODE XREF: _pwrite+106p
UNDEF:00001250                 extrn ___security_cookie:near ; DATA XREF: _pwrite+26r
UNDEF:00001254                 extrn @__security_check_cookie@4:near
UNDEF:00001254                                         ; CODE XREF: _pwrite+136p
UNDEF:00001258                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _pwrite+12Ap
UNDEF:00001258
UNDEF:00001258
UNDEF:00001258                 end