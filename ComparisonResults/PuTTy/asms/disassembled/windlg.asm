.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : AB47EAAEDD40A85757DBACDDBAE0EFD2
.bss:00000000 ; Input CRC32 : B2560B7B
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\windlg.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 ; Segment alignment 'qword' can not be represented in assembly
.bss:00000000 _bss            segment para public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000 _dp             dd ?                    ; DATA XREF: _do_config+33o
.bss:00000000                                         ; _do_config+47o ...
.bss:00000004                 db    ? ;
.bss:00000005                 db    ? ;
.bss:00000006                 db    ? ;
.bss:00000007                 db    ? ;
.bss:00000008                 db    ? ;
.bss:00000009                 db    ? ;
.bss:0000000A                 db    ? ;
.bss:0000000B                 db    ? ;
.bss:0000000C                 db    ? ;
.bss:0000000D                 db    ? ;
.bss:0000000E                 db    ? ;
.bss:0000000F                 db    ? ;
.bss:00000010                 db    ? ;
.bss:00000011                 db    ? ;
.bss:00000012                 db    ? ;
.bss:00000013                 db    ? ;
.bss:00000014                 db    ? ;
.bss:00000015                 db    ? ;
.bss:00000016                 db    ? ;
.bss:00000017                 db    ? ;
.bss:00000018                 db    ? ;
.bss:00000019                 db    ? ;
.bss:0000001A                 db    ? ;
.bss:0000001B                 db    ? ;
.bss:0000001C                 db    ? ;
.bss:0000001D                 db    ? ;
.bss:0000001E                 db    ? ;
.bss:0000001F                 db    ? ;
.bss:00000020                 db    ? ;
.bss:00000021                 db    ? ;
.bss:00000022                 db    ? ;
.bss:00000023                 db    ? ;
.bss:00000024                 db    ? ;
.bss:00000025                 db    ? ;
.bss:00000026                 db    ? ;
.bss:00000027                 db    ? ;
.bss:00000028 ; LPCSTR lpString
.bss:00000028 lpString        dd ?                    ; DATA XREF: _do_config+A6w
.bss:00000028                                         ; GenericMainDlgProc(x,x,x,x)+AFr ...
.bss:0000002C dword_2C        dd ?                    ; DATA XREF: .text:00000B68o
.bss:0000002C                                         ; _do_config+BEw ...
.bss:00000030 dword_30        dd ?                    ; DATA XREF: _do_config+C9w
.bss:00000030                                         ; _do_reconfig+104w
.bss:00000034                 db    ? ;
.bss:00000035                 db    ? ;
.bss:00000036                 db    ? ;
.bss:00000037                 db    ? ;
.bss:00000038                 db    ? ;
.bss:00000039                 db    ? ;
.bss:0000003A                 db    ? ;
.bss:0000003B                 db    ? ;
.bss:0000003C                 db    ? ;
.bss:0000003D                 db    ? ;
.bss:0000003E                 db    ? ;
.bss:0000003F                 db    ? ;
.bss:00000040                 db    ? ;
.bss:00000041                 db    ? ;
.bss:00000042                 db    ? ;
.bss:00000043                 db    ? ;
.bss:00000044                 db    ? ;
.bss:00000045                 db    ? ;
.bss:00000046                 db    ? ;
.bss:00000047                 db    ? ;
.bss:00000048                 db    ? ;
.bss:00000049                 db    ? ;
.bss:0000004A                 db    ? ;
.bss:0000004B                 db    ? ;
.bss:0000004C                 db    ? ;
.bss:0000004D                 db    ? ;
.bss:0000004E unk_4E          db    ? ;               ; DATA XREF: .data:`LogProc'::`5'::tabso
.bss:0000004F                 db    ? ;
.bss:00000050                 db    ? ;
.bss:00000051                 db    ? ;
.bss:00000052                 db    ? ;
.bss:00000053                 db    ? ;
.bss:00000054                 db    ? ;
.bss:00000055                 db    ? ;
.bss:00000056                 db    ? ;
.bss:00000057                 db    ? ;
.bss:00000058                 db    ? ;
.bss:00000059                 db    ? ;
.bss:0000005A                 db    ? ;
.bss:0000005B                 db    ? ;
.bss:0000005C                 db    ? ;
.bss:0000005D                 db    ? ;
.bss:0000005E                 db    ? ;
.bss:0000005F                 db    ? ;
.bss:00000060                 db    ? ;
.bss:00000061                 db    ? ;
.bss:00000062                 db    ? ;
.bss:00000063                 db    ? ;
.bss:00000064                 db    ? ;
.bss:00000065                 db    ? ;
.bss:00000066 ; CHAR byte_66[6]
.bss:00000066 byte_66         db 6 dup(?)             ; DATA XREF: _do_config+EAo
.bss:00000066                                         ; _do_reconfig+124o
.bss:0000006C unk_6C          db    ? ;               ; DATA XREF: .data:00000110o
.bss:0000006D                 db    ? ;
.bss:0000006E ; const CHAR byte_6E
.bss:0000006E byte_6E         db ?                    ; DATA XREF: _showeventlog+1Ao
.bss:0000006F ; CHAR TemplateName[52]
.bss:0000006F TemplateName    db 34h dup(?)           ; DATA XREF: _modal_about_box+26o
.bss:0000006F                                         ; _defuse_showwindow+17o ...
.bss:000000A3 byte_A3         db ?                    ; DATA XREF: _do_config+DCw
.bss:000000A3                                         ; _do_reconfig+116w
.bss:000000A4                 db    ? ;
.bss:000000A5                 db    ? ;
.bss:000000A6                 db    ? ;
.bss:000000A7                 db    ? ;
.bss:000000A8                 db    ? ;
.bss:000000A9                 db    ? ;
.bss:000000AA                 db    ? ;
.bss:000000AB                 db    ? ;
.bss:000000AC                 db    ? ;
.bss:000000AD                 db    ? ;
.bss:000000AE                 db    ? ;
.bss:000000AF                 db    ? ;
.bss:000000B0                 db    ? ;
.bss:000000B1                 db    ? ;
.bss:000000B2                 db    ? ;
.bss:000000B3                 db    ? ;
.bss:000000B4                 db    ? ;
.bss:000000B5                 db    ? ;
.bss:000000B6                 db    ? ;
.bss:000000B7                 db    ? ;
.bss:000000B8                 db    ? ;
.bss:000000B9                 db    ? ;
.bss:000000BA                 db    ? ;
.bss:000000BB                 db    ? ;
.bss:000000BC                 db    ? ;
.bss:000000BD                 db    ? ;
.bss:000000BE                 db    ? ;
.bss:000000BF                 db    ? ;
.bss:000000C0                 db    ? ;
.bss:000000C1                 db    ? ;
.bss:000000C2                 db    ? ;
.bss:000000C3                 db    ? ;
.bss:000000C4                 db    ? ;
.bss:000000C5                 db    ? ;
.bss:000000C6                 db    ? ;
.bss:000000C7                 db    ? ;
.bss:000000C8 dword_C8        dd ?                    ; DATA XREF: GenericMainDlgProc(x,x,x,x)+5CEr
.bss:000000C8                                         ; GenericMainDlgProc(x,x,x,x)+837r ...
.bss:000000CC dword_CC        dd ?                    ; DATA XREF: GenericMainDlgProc(x,x,x,x)+5D9r
.bss:000000CC                                         ; GenericMainDlgProc(x,x,x,x)+856r
.bss:000000D0                 db    ? ;
.bss:000000D1                 db    ? ;
.bss:000000D2                 db    ? ;
.bss:000000D3                 db    ? ;
.bss:000000D4 _ctrls_base     db    ? ;               ; DATA XREF: _do_config+54o
.bss:000000D4                                         ; _do_config+6Eo ...
.bss:000000D5                 db    ? ;
.bss:000000D6                 db    ? ;
.bss:000000D7                 db    ? ;
.bss:000000D8                 db    ? ;
.bss:000000D9                 db    ? ;
.bss:000000DA                 db    ? ;
.bss:000000DB                 db    ? ;
.bss:000000DC _ctrlbox        dd ?                    ; DATA XREF: _do_config+10w
.bss:000000DC                                         ; _do_config+1Br ...
.bss:000000E0 _ctrls_panel    db    ? ;               ; DATA XREF: _do_config+61o
.bss:000000E0                                         ; _do_config+80o ...
.bss:000000E1                 db    ? ;
.bss:000000E2                 db    ? ;
.bss:000000E3                 db    ? ;
.bss:000000E4                 db    ? ;
.bss:000000E5                 db    ? ;
.bss:000000E6                 db    ? ;
.bss:000000E7                 db    ? ;
.bss:000000E8 _events         dd ?                    ; DATA XREF: _logevent+5Er
.bss:000000E8                                         ; _logevent+6Dw ...
.bss:000000EC _nevents        dd ?                    ; DATA XREF: _logevent+3Ar
.bss:000000EC                                         ; _logevent+CDr ...
.bss:000000F0 _negsize        dd ?                    ; DATA XREF: _logevent+40r
.bss:000000F0                                         ; _logevent+48r ...
.bss:000000F4 ; `force_normal'::`2'::recurse
.bss:000000F4 ?recurse@?1??force_normal@@9@9 dd ?     ; DATA XREF: _force_normal+21r
.bss:000000F4                                         ; _force_normal:loc_AD4w ...
.bss:000000F8 $SG90447        db    ? ;               ; DATA XREF: GenericMainDlgProc(x,x,x,x)+9Co
.bss:000000F9 ; const CHAR _SG90477
.bss:000000F9 $SG90477        db ?                    ; DATA XREF: GenericMainDlgProc(x,x,x,x)+331o
.bss:000000FA                 align 4
.bss:000000FA _bss            ends
.bss:000000FA
.data:000000FC ; ===========================================================================
.data:000000FC
.data:000000FC ; Segment type: Pure data
.data:000000FC ; Segment permissions: Read/Write
.data:000000FC ; Segment alignment 'qword' can not be represented in assembly
.data:000000FC _data           segment para public 'DATA' use32
.data:000000FC                 assume cs:_data
.data:000000FC                 ;org 0FCh
.data:000000FC $SG90209        db '%s Event Log',0     ; DATA XREF: LogProc(x,x,x,x)+49o
.data:00000109                 align 4
.data:0000010C ; `LogProc'::`5'::tabs
.data:0000010C ?tabs@?4??LogProc@@9@9 dd offset unk_4E ; DATA XREF: LogProc(x,x,x,x)+7Eo
.data:00000110                 dd offset unk_6C
.data:00000114                 db    0
.data:00000115                 db    0
.data:00000116                 db    0
.data:00000117                 db    0
.data:00000118                 db    0
.data:00000119                 db    0
.data:0000011A                 db    0
.data:0000011B                 db    0
.data:0000011C ; `LogProc'::`9'::sel_nl
.data:0000011C ?sel_nl@?8??LogProc@@9@9 dd offset ?message@?1??old_keyfile_warning@@9@9+0C1h
.data:0000011C                                         ; DATA XREF: LogProc(x,x,x,x)+2F5o
.data:0000011C                                         ; "ormat,\nso we recommend you convert you"...
.data:00000120 $SG90281        db '%s Licence',0       ; DATA XREF: LicenceProc(x,x,x,x)+4Ao
.data:0000012B                 align 4
.data:0000012C $SG90307        db 'About %s',0         ; DATA XREF: AboutProc(x,x,x,x)+4Eo
.data:00000135                 align 4
.data:00000138 ; CHAR _SG90321[]
.data:00000138 $SG90321        db 'http://www.chiark.greenend.org.uk/~sgtatham/putty/',0
.data:00000138                                         ; DATA XREF: AboutProc(x,x,x,x)+197o
.data:0000016B                 align 4
.data:0000016C ; CHAR _SG90322[]
.data:0000016C $SG90322        db 'open',0             ; DATA XREF: AboutProc(x,x,x,x)+19Co
.data:00000171                 align 4
.data:00000174 $SG90348        db 'PuTTYConfigBox',0   ; DATA XREF: _SaneDialogBox+68o
.data:00000183                 align 4
.data:00000184 ; CHAR _SG90465[]
.data:00000184 $SG90465        db 'Cate&gory:',0       ; DATA XREF: GenericMainDlgProc(x,x,x,x)+277o
.data:0000018F                 align 10h
.data:00000190 ; CHAR _SG90466[]
.data:00000190 $SG90466        db 'STATIC',0           ; DATA XREF: GenericMainDlgProc(x,x,x,x)+27Co
.data:00000197                 align 4
.data:00000198 ; CHAR _SG90478[]
.data:00000198 $SG90478        db 'SysTreeView32',0    ; DATA XREF: GenericMainDlgProc(x,x,x,x)+336o
.data:000001A6                 align 4
.data:000001A8 ; wchar_t _SG90502
.data:000001A8 $SG90502:                               ; DATA XREF: GenericMainDlgProc(x,x,x,x)+479o
.data:000001A8                 unicode 0, <..\..\windlg.c>,0
.data:000001C6                 align 4
.data:000001C8 $SG90583        db '%s Configuration',0 ; DATA XREF: _do_config+99o
.data:000001D9                 align 4
.data:000001DC ; wchar_t _SG90503
.data:000001DC $SG90503:                               ; DATA XREF: GenericMainDlgProc(x,x,x,x)+47Eo
.data:000001DC                 unicode 0, <j == ctrl_path_elements(s->
.data:000001DC                 dw 3Eh
.data:000001DC                 unicode 0, <pathname) - 1>,0
.data:0000022E                 align 10h
.data:00000230 $SG90584        db '%s Error',0         ; DATA XREF: _do_config+B1o
.data:00000239                 align 4
.data:0000023C $SG90597        db '%s Reconfiguration',0 ; DATA XREF: _do_reconfig+D4o
.data:0000024F                 align 10h
.data:00000250 $SG90598        db '%s Error',0         ; DATA XREF: _do_reconfig+EDo
.data:00000259                 align 4
.data:0000025C ; char _SG90615[]
.data:0000025C $SG90615        db '%Y-%m-%d %H:%M:%S',9,0 ; DATA XREF: _logevent+91o
.data:0000026F                 align 10h
.data:00000270 ; wchar_t _SG90669
.data:00000270 $SG90669:                               ; DATA XREF: _verify_ssh_host_key+C8o
.data:00000270                 unicode 0, <..\..\windlg.c>,0
.data:0000028E                 align 10h
.data:00000290 $SG90728        db '%s Log to File',0   ; DATA XREF: _askappend+3Eo
.data:0000029F                 db    0
.data:000002A0                 db    0
.data:000002A1                 db    0
.data:000002A2                 db    0
.data:000002A3                 db    0
.data:000002A4 ; wchar_t _SG90670
.data:000002A4 $SG90670:                               ; DATA XREF: _verify_ssh_host_key+CDo
.data:000002A4                 unicode 0, <mbret==IDYES || mbret==IDNO || mbret==IDCANCEL>,0
.data:00000302                 align 4
.data:00000304 ; wchar_t _SG90680
.data:00000304 $SG90680:                               ; DATA XREF: _verify_ssh_host_key+1A0o
.data:00000304                 unicode 0, <..\..\windlg.c>,0
.data:00000322                 align 4
.data:00000324 ; wchar_t _SG90681
.data:00000324 $SG90681:                               ; DATA XREF: _verify_ssh_host_key+1A5o
.data:00000324                 unicode 0, <mbret==IDYES || mbret==IDNO || mbret==IDCANCEL>,0
.data:00000382                 align 4
.data:00000382 _data           ends
.data:00000382
.rdata:00000384 ; ===========================================================================
.rdata:00000384
.rdata:00000384 ; Segment type: Pure data
.rdata:00000384 ; Segment permissions: Read
.rdata:00000384 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000384 _rdata          segment para public 'DATA' use32
.rdata:00000384                 assume cs:_rdata
.rdata:00000384                 ;org 384h
.rdata:00000384 ; `verify_ssh_host_key'::`2'::absentmsg
.rdata:00000384 ?absentmsg@?1??verify_ssh_host_key@@9@9 db  54h ; T
.rdata:00000384                                         ; DATA XREF: _verify_ssh_host_key+149o
.rdata:00000385                 db  68h ; h
.rdata:00000386                 db  65h ; e
.rdata:00000387                 db  20h
.rdata:00000388                 db  73h ; s
.rdata:00000389                 db  65h ; e
.rdata:0000038A                 db  72h ; r
.rdata:0000038B                 db  76h ; v
.rdata:0000038C                 db  65h ; e
.rdata:0000038D                 db  72h ; r
.rdata:0000038E                 db  27h ; '
.rdata:0000038F                 db  73h ; s
.rdata:00000390                 db  20h
.rdata:00000391                 db  68h ; h
.rdata:00000392                 db  6Fh ; o
.rdata:00000393                 db  73h ; s
.rdata:00000394                 db  74h ; t
.rdata:00000395                 db  20h
.rdata:00000396                 db  6Bh ; k
.rdata:00000397                 db  65h ; e
.rdata:00000398                 db  79h ; y
.rdata:00000399                 db  20h
.rdata:0000039A                 db  69h ; i
.rdata:0000039B                 db  73h ; s
.rdata:0000039C                 db  20h
.rdata:0000039D                 db  6Eh ; n
.rdata:0000039E                 db  6Fh ; o
.rdata:0000039F                 db  74h ; t
.rdata:000003A0                 db  20h
.rdata:000003A1                 db  63h ; c
.rdata:000003A2                 db  61h ; a
.rdata:000003A3                 db  63h ; c
.rdata:000003A4                 db  68h ; h
.rdata:000003A5                 db  65h ; e
.rdata:000003A6                 db  64h ; d
.rdata:000003A7                 db  20h
.rdata:000003A8                 db  69h ; i
.rdata:000003A9                 db  6Eh ; n
.rdata:000003AA                 db  20h
.rdata:000003AB                 db  74h ; t
.rdata:000003AC                 db  68h ; h
.rdata:000003AD                 db  65h ; e
.rdata:000003AE                 db  20h
.rdata:000003AF                 db  72h ; r
.rdata:000003B0                 db  65h ; e
.rdata:000003B1                 db  67h ; g
.rdata:000003B2                 db  69h ; i
.rdata:000003B3                 db  73h ; s
.rdata:000003B4                 db  74h ; t
.rdata:000003B5                 db  72h ; r
.rdata:000003B6                 db  79h ; y
.rdata:000003B7                 db  2Eh ; .
.rdata:000003B8                 db  20h
.rdata:000003B9                 db  59h ; Y
.rdata:000003BA                 db  6Fh ; o
.rdata:000003BB                 db  75h ; u
.rdata:000003BC                 db  0Ah
.rdata:000003BD                 db  68h ; h
.rdata:000003BE                 db  61h ; a
.rdata:000003BF                 db  76h ; v
.rdata:000003C0                 db  65h ; e
.rdata:000003C1                 db  20h
.rdata:000003C2                 db  6Eh ; n
.rdata:000003C3                 db  6Fh ; o
.rdata:000003C4                 db  20h
.rdata:000003C5                 db  67h ; g
.rdata:000003C6                 db  75h ; u
.rdata:000003C7                 db  61h ; a
.rdata:000003C8                 db  72h ; r
.rdata:000003C9                 db  61h ; a
.rdata:000003CA                 db  6Eh ; n
.rdata:000003CB                 db  74h ; t
.rdata:000003CC                 db  65h ; e
.rdata:000003CD                 db  65h ; e
.rdata:000003CE                 db  20h
.rdata:000003CF                 db  74h ; t
.rdata:000003D0                 db  68h ; h
.rdata:000003D1                 db  61h ; a
.rdata:000003D2                 db  74h ; t
.rdata:000003D3                 db  20h
.rdata:000003D4                 db  74h ; t
.rdata:000003D5                 db  68h ; h
.rdata:000003D6                 db  65h ; e
.rdata:000003D7                 db  20h
.rdata:000003D8                 db  73h ; s
.rdata:000003D9                 db  65h ; e
.rdata:000003DA                 db  72h ; r
.rdata:000003DB                 db  76h ; v
.rdata:000003DC                 db  65h ; e
.rdata:000003DD                 db  72h ; r
.rdata:000003DE                 db  20h
.rdata:000003DF                 db  69h ; i
.rdata:000003E0                 db  73h ; s
.rdata:000003E1                 db  20h
.rdata:000003E2                 db  74h ; t
.rdata:000003E3                 db  68h ; h
.rdata:000003E4                 db  65h ; e
.rdata:000003E5                 db  20h
.rdata:000003E6                 db  63h ; c
.rdata:000003E7                 db  6Fh ; o
.rdata:000003E8                 db  6Dh ; m
.rdata:000003E9                 db  70h ; p
.rdata:000003EA                 db  75h ; u
.rdata:000003EB                 db  74h ; t
.rdata:000003EC                 db  65h ; e
.rdata:000003ED                 db  72h ; r
.rdata:000003EE                 db  20h
.rdata:000003EF ; struct HMENU__ unk_3EF
.rdata:000003EF unk_3EF         db  79h ; y             ; DATA XREF: GenericMainDlgProc(x,x,x,x)+253o
.rdata:000003F0 ; struct HMENU__ hMenu
.rdata:000003F0 hMenu           HMENU__ <740A756Fh>     ; DATA XREF: GenericMainDlgProc(x,x,x,x)+30Do
.rdata:000003F4 aHinkItIs_TheSe db 'hink it is.',0Ah
.rdata:000003F4                 db 'The server',27h,'s %s key fingerprint is:',0Ah
.rdata:000003F4                 db '%s',0Ah
.rdata:000003F4                 db 'If you trust this host, hit Yes to add the key to',0Ah
.rdata:000003F4                 db '%s',27h,'s cache and carry on connecting.',0Ah
.rdata:000003F4                 db 'If you want to carry on connecting just once, without',0Ah
.rdata:000003F4                 db 'adding the key to the cache, hit No.',0Ah
.rdata:000003F4                 db 'If you do not trust this host, hit Cancel to abandon the',0Ah
.rdata:000003F4                 db 'connection.',0Ah,0
.rdata:0000051E                 db    0
.rdata:0000051F                 db    0
.rdata:00000520                 db    0
.rdata:00000521                 db    0
.rdata:00000522                 db    0
.rdata:00000523                 db    0
.rdata:00000524 ; `verify_ssh_host_key'::`2'::wrongmsg
.rdata:00000524 ?wrongmsg@?1??verify_ssh_host_key@@9@9 db 'WARNING - POTENTIAL SECURITY BREACH!',0Ah
.rdata:00000524                                         ; DATA XREF: _verify_ssh_host_key+70o
.rdata:00000524                 db 0Ah
.rdata:00000524                 db 'The server',27h,'s host key does not match the one %s has',0Ah
.rdata:00000524                 db 'cached in the registry. This means that either the',0Ah
.rdata:00000524                 db 'server administrator has changed the host key, or you',0Ah
.rdata:00000524                 db 'have actually connected to another computer pretending',0Ah
.rdata:00000524                 db 'to be the server.',0Ah
.rdata:00000524                 db 'The new %s key fingerprint is:',0Ah
.rdata:00000524                 db '%s',0Ah
.rdata:00000524                 db 'If you were expecting this change and trust the new key,',0Ah
.rdata:00000524                 db 'hit Yes to update %s',27h,'s cache and continue connecting.',0Ah
.rdata:00000524                 db 'If you want to carry on connecting but without updating',0Ah
.rdata:00000524                 db 'the cache, hit No.',0Ah
.rdata:00000524                 db 'If you want to abandon the connection completely, hit',0Ah
.rdata:00000524                 db 'Cancel. Hitting Cancel is the ONLY guaranteed safe',0Ah
.rdata:00000524                 db 'choice.',0Ah,0
.rdata:0000077E                 align 10h
.rdata:00000780 ; `verify_ssh_host_key'::`2'::mbtitle
.rdata:00000780 ?mbtitle@?1??verify_ssh_host_key@@9@9 db '%s Security Alert',0
.rdata:00000780                                         ; DATA XREF: _verify_ssh_host_key+87o
.rdata:00000780                                         ; _verify_ssh_host_key+15Fo
.rdata:00000792                 align 4
.rdata:00000794 ; `askalg'::`2'::mbtitle
.rdata:00000794 ?mbtitle@?1??askalg@@9@9 db '%s Security Alert',0 ; DATA XREF: _askalg+3Bo
.rdata:000007A6                 db    0
.rdata:000007A7                 db    0
.rdata:000007A8                 db    0
.rdata:000007A9                 db    0
.rdata:000007AA                 db    0
.rdata:000007AB                 db    0
.rdata:000007AC ; `askalg'::`2'::msg
.rdata:000007AC ?msg@?1??askalg@@9@9 db 'The first %s supported by the server',0Ah
.rdata:000007AC                                         ; DATA XREF: _askalg+24o
.rdata:000007AC                 db 'is %.64s, which is below the configured',0Ah
.rdata:000007AC                 db 'warning threshold.',0Ah
.rdata:000007AC                 db 'Do you want to continue with this connection?',0Ah,0
.rdata:0000083B                 align 4
.rdata:0000083C ; `askappend'::`2'::msgtemplate
.rdata:0000083C ?msgtemplate@?1??askappend@@9@9 db 'The session log file "%.*s" already exists.',0Ah
.rdata:0000083C                                         ; DATA XREF: _askappend+27o
.rdata:0000083C                 db 'You can overwrite it with a new session log,',0Ah
.rdata:0000083C                 db 'append your session log to the end of it,',0Ah
.rdata:0000083C                 db 'or disable session logging for this session.',0Ah
.rdata:0000083C                 db 'Hit Yes to wipe the file, No to append to it,',0Ah
.rdata:0000083C                 db 'or Cancel to disable logging.',0
.rdata:00000938 ; `old_keyfile_warning'::`2'::mbtitle
.rdata:00000938 ?mbtitle@?1??old_keyfile_warning@@9@9 db '%s Key File Warning',0
.rdata:00000938                                         ; DATA XREF: _old_keyfile_warning+32o
.rdata:0000094C ; `old_keyfile_warning'::`2'::message
.rdata:0000094C ?message@?1??old_keyfile_warning@@9@9 db 'You are loading an SSH-2 private key which has an',0Ah
.rdata:0000094C                                         ; DATA XREF: _old_keyfile_warning+1Bo
.rdata:0000094C                 db 'old version of the file format. This means your key',0Ah
.rdata:0000094C                 db 'file is not fully tamperproof. Future versions of',0Ah
.rdata:0000094C                 db '%s may stop supporting this private key format,',0Ah
.rdata:0000094C                 db 'so we recommend you convert your key to the new',0Ah
.rdata:0000094C                 db 'format.',0Ah
.rdata:0000094C                 db 0Ah
.rdata:0000094C                 db 'You can perform this conversion by loading the key',0Ah
.rdata:0000094C                 db 'into PuTTYgen and then saving it again.',0
.rdata:0000094C _rdata          ends
.rdata:0000094C
.text:00000AA8 ; ===========================================================================
.text:00000AA8
.text:00000AA8 ; Segment type: Pure code
.text:00000AA8 ; Segment permissions: Read/Execute
.text:00000AA8 _text           segment para public 'CODE' use32
.text:00000AA8                 assume cs:_text
.text:00000AA8                 ;org 0AA8h
.text:00000AA8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000AA8
.text:00000AA8 ; =============== S U B R O U T I N E =======================================
.text:00000AA8
.text:00000AA8 ; Attributes: bp-based frame
.text:00000AA8
.text:00000AA8 ; int __cdecl force_normal(HWND hWnd)
.text:00000AA8                 public _force_normal
.text:00000AA8 _force_normal   proc near               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+8D2p
.text:00000AA8
.text:00000AA8 var_38          = byte ptr -38h
.text:00000AA8 wndpl           = WINDOWPLACEMENT ptr -34h
.text:00000AA8 var_4           = dword ptr -4
.text:00000AA8 hWnd            = dword ptr  8
.text:00000AA8
.text:00000AA8                 push    ebp
.text:00000AA9                 mov     ebp, esp
.text:00000AAB                 sub     esp, 38h
.text:00000AAE                 push    esi
.text:00000AAF                 push    edi
.text:00000AB0                 lea     edi, [ebp+var_38]
.text:00000AB3                 mov     ecx, 0Eh
.text:00000AB8                 mov     eax, 0CCCCCCCCh
.text:00000ABD                 rep stosd
.text:00000ABF                 mov     eax, dword ptr ds:___security_cookie
.text:00000AC4                 xor     eax, ebp
.text:00000AC6                 mov     [ebp+var_4], eax
.text:00000AC9                 cmp     ds:?recurse@?1??force_normal@@9@9, 0 ; `force_normal'::`2'::recurse
.text:00000AD0                 jz      short loc_AD4
.text:00000AD2                 jmp     short loc_B2E
.text:00000AD4 ; ---------------------------------------------------------------------------
.text:00000AD4
.text:00000AD4 loc_AD4:                                ; CODE XREF: _force_normal+28j
.text:00000AD4                 mov     ds:?recurse@?1??force_normal@@9@9, 1 ; `force_normal'::`2'::recurse
.text:00000ADE                 mov     [ebp+wndpl.length], 2Ch ; ','
.text:00000AE5                 mov     esi, esp
.text:00000AE7                 lea     eax, [ebp+wndpl]
.text:00000AEA                 push    eax             ; lpwndpl
.text:00000AEB                 mov     ecx, [ebp+hWnd]
.text:00000AEE                 push    ecx             ; hWnd
.text:00000AEF                 call    dword ptr ds:__imp__GetWindowPlacement@8 ; GetWindowPlacement(x,x)
.text:00000AF5                 cmp     esi, esp
.text:00000AF7                 call    __RTC_CheckEsp
.text:00000AFC                 test    eax, eax
.text:00000AFE                 jz      short loc_B24
.text:00000B00                 cmp     [ebp+wndpl.showCmd], 3
.text:00000B04                 jnz     short loc_B24
.text:00000B06                 mov     [ebp+wndpl.showCmd], 1
.text:00000B0D                 mov     esi, esp
.text:00000B0F                 lea     edx, [ebp+wndpl]
.text:00000B12                 push    edx             ; lpwndpl
.text:00000B13                 mov     eax, [ebp+hWnd]
.text:00000B16                 push    eax             ; hWnd
.text:00000B17                 call    dword ptr ds:__imp__SetWindowPlacement@8 ; SetWindowPlacement(x,x)
.text:00000B1D                 cmp     esi, esp
.text:00000B1F                 call    __RTC_CheckEsp
.text:00000B24
.text:00000B24 loc_B24:                                ; CODE XREF: _force_normal+56j
.text:00000B24                                         ; _force_normal+5Cj
.text:00000B24                 mov     ds:?recurse@?1??force_normal@@9@9, 0 ; `force_normal'::`2'::recurse
.text:00000B2E
.text:00000B2E loc_B2E:                                ; CODE XREF: _force_normal+2Aj
.text:00000B2E                 push    edx
.text:00000B2F                 mov     ecx, ebp
.text:00000B31                 push    eax
.text:00000B32                 lea     edx, $LN7
.text:00000B38                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B3D                 pop     eax
.text:00000B3E                 pop     edx
.text:00000B3F                 pop     edi
.text:00000B40                 pop     esi
.text:00000B41                 mov     ecx, [ebp+var_4]
.text:00000B44                 xor     ecx, ebp
.text:00000B46                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000B4B                 add     esp, 38h
.text:00000B4E                 cmp     ebp, esp
.text:00000B50                 call    __RTC_CheckEsp
.text:00000B55                 mov     esp, ebp
.text:00000B57                 pop     ebp
.text:00000B58                 retn
.text:00000B58 _force_normal   endp
.text:00000B58
.text:00000B58 ; ---------------------------------------------------------------------------
.text:00000B59                 align 4
.text:00000B5C $LN7            dd 1                    ; DATA XREF: _force_normal+8Ao
.text:00000B60                 dd offset $LN6
.text:00000B64 $LN6            db 0CCh                 ; DATA XREF: .text:00000B60o
.text:00000B65                 db 3 dup(0FFh)
.text:00000B68                 dd offset dword_2C
.text:00000B6C                 dd offset $LN5
.text:00000B70 $LN5            dd 0CC007077h, 0CCCCCCCCh ; DATA XREF: .text:00000B6Co
.text:00000B78
.text:00000B78 ; =============== S U B R O U T I N E =======================================
.text:00000B78
.text:00000B78 ; Attributes: bp-based frame
.text:00000B78
.text:00000B78 ; int __cdecl modal_about_box(HWND hWnd)
.text:00000B78                 public _modal_about_box
.text:00000B78 _modal_about_box proc near
.text:00000B78
.text:00000B78 hWnd            = dword ptr  8
.text:00000B78
.text:00000B78                 push    ebp
.text:00000B79                 mov     ebp, esp
.text:00000B7B                 push    esi
.text:00000B7C                 mov     esi, esp
.text:00000B7E                 push    0               ; bEnable
.text:00000B80                 mov     eax, [ebp+hWnd]
.text:00000B83                 push    eax             ; hWnd
.text:00000B84                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text:00000B8A                 cmp     esi, esp
.text:00000B8C                 call    __RTC_CheckEsp
.text:00000B91                 mov     esi, esp
.text:00000B93                 push    0               ; dwInitParam
.text:00000B95                 push    offset _AboutProc@16 ; lpDialogFunc
.text:00000B9A                 mov     ecx, [ebp+hWnd]
.text:00000B9D                 push    ecx             ; hWndParent
.text:00000B9E                 push    offset TemplateName ; lpTemplateName
.text:00000BA0                 mov     edx, dword ptr ds:_hinst
.text:00000BA6                 push    edx             ; hInstance
.text:00000BA7                 call    dword ptr ds:__imp__DialogBoxParamA@20 ; DialogBoxParamA(x,x,x,x,x)
.text:00000BAD                 cmp     esi, esp
.text:00000BAF                 call    __RTC_CheckEsp
.text:00000BB4                 mov     esi, esp
.text:00000BB6                 push    1               ; bEnable
.text:00000BB8                 mov     eax, [ebp+hWnd]
.text:00000BBB                 push    eax             ; hWnd
.text:00000BBC                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text:00000BC2                 cmp     esi, esp
.text:00000BC4                 call    __RTC_CheckEsp
.text:00000BC9                 mov     esi, esp
.text:00000BCB                 mov     ecx, [ebp+hWnd]
.text:00000BCE                 push    ecx             ; hWnd
.text:00000BCF                 call    dword ptr ds:__imp__SetActiveWindow@4 ; SetActiveWindow(x)
.text:00000BD5                 cmp     esi, esp
.text:00000BD7                 call    __RTC_CheckEsp
.text:00000BDC                 pop     esi
.text:00000BDD                 cmp     ebp, esp
.text:00000BDF                 call    __RTC_CheckEsp
.text:00000BE4                 pop     ebp
.text:00000BE5                 retn
.text:00000BE5 _modal_about_box endp
.text:00000BE5
.text:00000BE5 ; ---------------------------------------------------------------------------
.text:00000BE6                 align 4
.text:00000BE8
.text:00000BE8 ; =============== S U B R O U T I N E =======================================
.text:00000BE8
.text:00000BE8 ; Attributes: bp-based frame
.text:00000BE8
.text:00000BE8 ; INT_PTR __stdcall AboutProc(HWND, UINT, WPARAM, LPARAM)
.text:00000BE8 _AboutProc@16   proc near               ; DATA XREF: _modal_about_box+1Do
.text:00000BE8                                         ; _showabout+8o
.text:00000BE8
.text:00000BE8 var_C           = dword ptr -0Ch
.text:00000BE8 var_8           = dword ptr -8
.text:00000BE8 lpString        = dword ptr -4
.text:00000BE8 hWnd            = dword ptr  8
.text:00000BE8 arg_4           = dword ptr  0Ch
.text:00000BE8 arg_8           = dword ptr  10h
.text:00000BE8
.text:00000BE8                 push    ebp
.text:00000BE9                 mov     ebp, esp
.text:00000BEB                 sub     esp, 0Ch
.text:00000BEE                 push    esi
.text:00000BEF                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000BF6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BFD                 mov     [ebp+lpString], 0CCCCCCCCh
.text:00000C04                 mov     eax, [ebp+arg_4]
.text:00000C07                 mov     [ebp+var_8], eax
.text:00000C0A                 cmp     [ebp+var_8], 10h
.text:00000C0E                 jz      loc_DA2
.text:00000C14                 cmp     [ebp+var_8], 110h
.text:00000C1B                 jz      short loc_C2F
.text:00000C1D                 cmp     [ebp+var_8], 111h
.text:00000C24                 jz      loc_CAF
.text:00000C2A                 jmp     loc_DBB
.text:00000C2F ; ---------------------------------------------------------------------------
.text:00000C2F
.text:00000C2F loc_C2F:                                ; CODE XREF: AboutProc(x,x,x,x)+33j
.text:00000C2F                 mov     ecx, dword ptr ds:_appname
.text:00000C35                 push    ecx
.text:00000C36                 push    offset $SG90307 ; "About %s"
.text:00000C3B                 call    _dupprintf
.text:00000C40                 add     esp, 8
.text:00000C43                 mov     [ebp+lpString], eax
.text:00000C46                 mov     esi, esp
.text:00000C48                 mov     edx, [ebp+lpString]
.text:00000C4B                 push    edx             ; lpString
.text:00000C4C                 mov     eax, [ebp+hWnd]
.text:00000C4F                 push    eax             ; hWnd
.text:00000C50                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:00000C56                 cmp     esi, esp
.text:00000C58                 call    __RTC_CheckEsp
.text:00000C5D                 mov     ecx, [ebp+lpString]
.text:00000C60                 push    ecx
.text:00000C61                 call    _safefree
.text:00000C66                 add     esp, 4
.text:00000C69                 mov     esi, esp
.text:00000C6B                 mov     edx, dword ptr ds:_appname
.text:00000C71                 push    edx             ; lpString
.text:00000C72                 push    3EAh            ; nIDDlgItem
.text:00000C77                 mov     eax, [ebp+hWnd]
.text:00000C7A                 push    eax             ; hDlg
.text:00000C7B                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:00000C81                 cmp     esi, esp
.text:00000C83                 call    __RTC_CheckEsp
.text:00000C88                 mov     esi, esp
.text:00000C8A                 push    offset _ver     ; lpString
.text:00000C8F                 push    3EBh            ; nIDDlgItem
.text:00000C94                 mov     ecx, [ebp+hWnd]
.text:00000C97                 push    ecx             ; hDlg
.text:00000C98                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:00000C9E                 cmp     esi, esp
.text:00000CA0                 call    __RTC_CheckEsp
.text:00000CA5                 mov     eax, 1
.text:00000CAA                 jmp     loc_DBD
.text:00000CAF ; ---------------------------------------------------------------------------
.text:00000CAF
.text:00000CAF loc_CAF:                                ; CODE XREF: AboutProc(x,x,x,x)+3Cj
.text:00000CAF                 mov     edx, [ebp+arg_8]
.text:00000CB2                 and     edx, 0FFFFh
.text:00000CB8                 movzx   eax, dx
.text:00000CBB                 mov     [ebp+var_C], eax
.text:00000CBE                 cmp     [ebp+var_C], 3EDh
.text:00000CC5                 jg      short loc_CE5
.text:00000CC7                 cmp     [ebp+var_C], 3EDh
.text:00000CCE                 jz      short loc_D13
.text:00000CD0                 cmp     [ebp+var_C], 0
.text:00000CD4                 jle     loc_D9E
.text:00000CDA                 cmp     [ebp+var_C], 2
.text:00000CDE                 jle     short loc_CF7
.text:00000CE0                 jmp     loc_D9E
.text:00000CE5 ; ---------------------------------------------------------------------------
.text:00000CE5
.text:00000CE5 loc_CE5:                                ; CODE XREF: AboutProc(x,x,x,x)+DDj
.text:00000CE5                 cmp     [ebp+var_C], 3EEh
.text:00000CEC                 jz      loc_D77
.text:00000CF2                 jmp     loc_D9E
.text:00000CF7 ; ---------------------------------------------------------------------------
.text:00000CF7
.text:00000CF7 loc_CF7:                                ; CODE XREF: AboutProc(x,x,x,x)+F6j
.text:00000CF7                 mov     esi, esp
.text:00000CF9                 push    1               ; nResult
.text:00000CFB                 mov     ecx, [ebp+hWnd]
.text:00000CFE                 push    ecx             ; hDlg
.text:00000CFF                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text:00000D05                 cmp     esi, esp
.text:00000D07                 call    __RTC_CheckEsp
.text:00000D0C                 xor     eax, eax
.text:00000D0E                 jmp     loc_DBD
.text:00000D13 ; ---------------------------------------------------------------------------
.text:00000D13
.text:00000D13 loc_D13:                                ; CODE XREF: AboutProc(x,x,x,x)+E6j
.text:00000D13                 mov     esi, esp
.text:00000D15                 push    0               ; bEnable
.text:00000D17                 mov     edx, [ebp+hWnd]
.text:00000D1A                 push    edx             ; hWnd
.text:00000D1B                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text:00000D21                 cmp     esi, esp
.text:00000D23                 call    __RTC_CheckEsp
.text:00000D28                 mov     esi, esp
.text:00000D2A                 push    0               ; dwInitParam
.text:00000D2C                 push    offset _LicenceProc@16 ; lpDialogFunc
.text:00000D31                 mov     eax, [ebp+hWnd]
.text:00000D34                 push    eax             ; hWndParent
.text:00000D35                 push    (offset TemplateName+2) ; lpTemplateName
.text:00000D37                 mov     ecx, dword ptr ds:_hinst
.text:00000D3D                 push    ecx             ; hInstance
.text:00000D3E                 call    dword ptr ds:__imp__DialogBoxParamA@20 ; DialogBoxParamA(x,x,x,x,x)
.text:00000D44                 cmp     esi, esp
.text:00000D46                 call    __RTC_CheckEsp
.text:00000D4B                 mov     esi, esp
.text:00000D4D                 push    1               ; bEnable
.text:00000D4F                 mov     edx, [ebp+hWnd]
.text:00000D52                 push    edx             ; hWnd
.text:00000D53                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text:00000D59                 cmp     esi, esp
.text:00000D5B                 call    __RTC_CheckEsp
.text:00000D60                 mov     esi, esp
.text:00000D62                 mov     eax, [ebp+hWnd]
.text:00000D65                 push    eax             ; hWnd
.text:00000D66                 call    dword ptr ds:__imp__SetActiveWindow@4 ; SetActiveWindow(x)
.text:00000D6C                 cmp     esi, esp
.text:00000D6E                 call    __RTC_CheckEsp
.text:00000D73                 xor     eax, eax
.text:00000D75                 jmp     short loc_DBD
.text:00000D77 ; ---------------------------------------------------------------------------
.text:00000D77
.text:00000D77 loc_D77:                                ; CODE XREF: AboutProc(x,x,x,x)+104j
.text:00000D77                 mov     esi, esp
.text:00000D79                 push    0Ah             ; nShowCmd
.text:00000D7B                 push    0               ; lpDirectory
.text:00000D7D                 push    0               ; lpParameters
.text:00000D7F                 push    offset $SG90321 ; "http://www.chiark.greenend.org.uk/~sgta"...
.text:00000D84                 push    offset $SG90322 ; "open"
.text:00000D89                 mov     ecx, [ebp+hWnd]
.text:00000D8C                 push    ecx             ; hwnd
.text:00000D8D                 call    dword ptr ds:__imp__ShellExecuteA@24 ; ShellExecuteA(x,x,x,x,x,x)
.text:00000D93                 cmp     esi, esp
.text:00000D95                 call    __RTC_CheckEsp
.text:00000D9A                 xor     eax, eax
.text:00000D9C                 jmp     short loc_DBD
.text:00000D9E ; ---------------------------------------------------------------------------
.text:00000D9E
.text:00000D9E loc_D9E:                                ; CODE XREF: AboutProc(x,x,x,x)+ECj
.text:00000D9E                                         ; AboutProc(x,x,x,x)+F8j ...
.text:00000D9E                 xor     eax, eax
.text:00000DA0                 jmp     short loc_DBD
.text:00000DA2 ; ---------------------------------------------------------------------------
.text:00000DA2
.text:00000DA2 loc_DA2:                                ; CODE XREF: AboutProc(x,x,x,x)+26j
.text:00000DA2                 mov     esi, esp
.text:00000DA4                 push    1               ; nResult
.text:00000DA6                 mov     edx, [ebp+hWnd]
.text:00000DA9                 push    edx             ; hDlg
.text:00000DAA                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text:00000DB0                 cmp     esi, esp
.text:00000DB2                 call    __RTC_CheckEsp
.text:00000DB7                 xor     eax, eax
.text:00000DB9                 jmp     short loc_DBD
.text:00000DBB ; ---------------------------------------------------------------------------
.text:00000DBB
.text:00000DBB loc_DBB:                                ; CODE XREF: AboutProc(x,x,x,x)+42j
.text:00000DBB                 xor     eax, eax
.text:00000DBD
.text:00000DBD loc_DBD:                                ; CODE XREF: AboutProc(x,x,x,x)+C2j
.text:00000DBD                                         ; AboutProc(x,x,x,x)+126j ...
.text:00000DBD                 pop     esi
.text:00000DBE                 add     esp, 0Ch
.text:00000DC1                 cmp     ebp, esp
.text:00000DC3                 call    __RTC_CheckEsp
.text:00000DC8                 mov     esp, ebp
.text:00000DCA                 pop     ebp
.text:00000DCB                 retn    10h
.text:00000DCB _AboutProc@16   endp
.text:00000DCB
.text:00000DCB ; ---------------------------------------------------------------------------
.text:00000DCE                 db 0Ah dup(0CCh)
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8 ; INT_PTR __stdcall LicenceProc(HWND, UINT, WPARAM, LPARAM)
.text:00000DD8 _LicenceProc@16 proc near               ; DATA XREF: AboutProc(x,x,x,x)+144o
.text:00000DD8
.text:00000DD8 var_C           = dword ptr -0Ch
.text:00000DD8 var_8           = dword ptr -8
.text:00000DD8 lpString        = dword ptr -4
.text:00000DD8 hWnd            = dword ptr  8
.text:00000DD8 arg_4           = dword ptr  0Ch
.text:00000DD8 arg_8           = dword ptr  10h
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 sub     esp, 0Ch
.text:00000DDE                 push    esi
.text:00000DDF                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000DE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DED                 mov     [ebp+lpString], 0CCCCCCCCh
.text:00000DF4                 mov     eax, [ebp+arg_4]
.text:00000DF7                 mov     [ebp+var_8], eax
.text:00000DFA                 cmp     [ebp+var_8], 10h
.text:00000DFE                 jz      loc_E96
.text:00000E04                 cmp     [ebp+var_8], 110h
.text:00000E0B                 jz      short loc_E1B
.text:00000E0D                 cmp     [ebp+var_8], 111h
.text:00000E14                 jz      short loc_E5C
.text:00000E16                 jmp     loc_EAF
.text:00000E1B ; ---------------------------------------------------------------------------
.text:00000E1B
.text:00000E1B loc_E1B:                                ; CODE XREF: LicenceProc(x,x,x,x)+33j
.text:00000E1B                 mov     ecx, dword ptr ds:_appname
.text:00000E21                 push    ecx
.text:00000E22                 push    offset $SG90281 ; "%s Licence"
.text:00000E27                 call    _dupprintf
.text:00000E2C                 add     esp, 8
.text:00000E2F                 mov     [ebp+lpString], eax
.text:00000E32                 mov     esi, esp
.text:00000E34                 mov     edx, [ebp+lpString]
.text:00000E37                 push    edx             ; lpString
.text:00000E38                 mov     eax, [ebp+hWnd]
.text:00000E3B                 push    eax             ; hWnd
.text:00000E3C                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:00000E42                 cmp     esi, esp
.text:00000E44                 call    __RTC_CheckEsp
.text:00000E49                 mov     ecx, [ebp+lpString]
.text:00000E4C                 push    ecx
.text:00000E4D                 call    _safefree
.text:00000E52                 add     esp, 4
.text:00000E55                 mov     eax, 1
.text:00000E5A                 jmp     short loc_EB1
.text:00000E5C ; ---------------------------------------------------------------------------
.text:00000E5C
.text:00000E5C loc_E5C:                                ; CODE XREF: LicenceProc(x,x,x,x)+3Cj
.text:00000E5C                 mov     edx, [ebp+arg_8]
.text:00000E5F                 and     edx, 0FFFFh
.text:00000E65                 movzx   eax, dx
.text:00000E68                 mov     [ebp+var_C], eax
.text:00000E6B                 cmp     [ebp+var_C], 0
.text:00000E6F                 jle     short loc_E92
.text:00000E71                 cmp     [ebp+var_C], 2
.text:00000E75                 jle     short loc_E79
.text:00000E77                 jmp     short loc_E92
.text:00000E79 ; ---------------------------------------------------------------------------
.text:00000E79
.text:00000E79 loc_E79:                                ; CODE XREF: LicenceProc(x,x,x,x)+9Dj
.text:00000E79                 mov     esi, esp
.text:00000E7B                 push    1               ; nResult
.text:00000E7D                 mov     ecx, [ebp+hWnd]
.text:00000E80                 push    ecx             ; hDlg
.text:00000E81                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text:00000E87                 cmp     esi, esp
.text:00000E89                 call    __RTC_CheckEsp
.text:00000E8E                 xor     eax, eax
.text:00000E90                 jmp     short loc_EB1
.text:00000E92 ; ---------------------------------------------------------------------------
.text:00000E92
.text:00000E92 loc_E92:                                ; CODE XREF: LicenceProc(x,x,x,x)+97j
.text:00000E92                                         ; LicenceProc(x,x,x,x)+9Fj
.text:00000E92                 xor     eax, eax
.text:00000E94                 jmp     short loc_EB1
.text:00000E96 ; ---------------------------------------------------------------------------
.text:00000E96
.text:00000E96 loc_E96:                                ; CODE XREF: LicenceProc(x,x,x,x)+26j
.text:00000E96                 mov     esi, esp
.text:00000E98                 push    1               ; nResult
.text:00000E9A                 mov     edx, [ebp+hWnd]
.text:00000E9D                 push    edx             ; hDlg
.text:00000E9E                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text:00000EA4                 cmp     esi, esp
.text:00000EA6                 call    __RTC_CheckEsp
.text:00000EAB                 xor     eax, eax
.text:00000EAD                 jmp     short loc_EB1
.text:00000EAF ; ---------------------------------------------------------------------------
.text:00000EAF
.text:00000EAF loc_EAF:                                ; CODE XREF: LicenceProc(x,x,x,x)+3Ej
.text:00000EAF                 xor     eax, eax
.text:00000EB1
.text:00000EB1 loc_EB1:                                ; CODE XREF: LicenceProc(x,x,x,x)+82j
.text:00000EB1                                         ; LicenceProc(x,x,x,x)+B8j ...
.text:00000EB1                 pop     esi
.text:00000EB2                 add     esp, 0Ch
.text:00000EB5                 cmp     ebp, esp
.text:00000EB7                 call    __RTC_CheckEsp
.text:00000EBC                 mov     esp, ebp
.text:00000EBE                 pop     ebp
.text:00000EBF                 retn    10h
.text:00000EBF _LicenceProc@16 endp
.text:00000EBF
.text:00000EBF ; ---------------------------------------------------------------------------
.text:00000EC2                 align 8
.text:00000EC8
.text:00000EC8 ; =============== S U B R O U T I N E =======================================
.text:00000EC8
.text:00000EC8 ; Attributes: bp-based frame
.text:00000EC8
.text:00000EC8                 public _show_help
.text:00000EC8 _show_help      proc near
.text:00000EC8
.text:00000EC8 arg_0           = dword ptr  8
.text:00000EC8
.text:00000EC8                 push    ebp
.text:00000EC9                 mov     ebp, esp
.text:00000ECB                 push    0
.text:00000ECD                 mov     eax, [ebp+arg_0]
.text:00000ED0                 push    eax
.text:00000ED1                 call    _launch_help
.text:00000ED6                 add     esp, 8
.text:00000ED9                 cmp     ebp, esp
.text:00000EDB                 call    __RTC_CheckEsp
.text:00000EE0                 pop     ebp
.text:00000EE1                 retn
.text:00000EE1 _show_help      endp
.text:00000EE1
.text:00000EE1 ; ---------------------------------------------------------------------------
.text:00000EE2                 align 8
.text:00000EE8
.text:00000EE8 ; =============== S U B R O U T I N E =======================================
.text:00000EE8
.text:00000EE8 ; Attributes: bp-based frame
.text:00000EE8
.text:00000EE8                 public _defuse_showwindow
.text:00000EE8 _defuse_showwindow proc near
.text:00000EE8
.text:00000EE8 hWnd            = dword ptr -4
.text:00000EE8
.text:00000EE8                 push    ebp
.text:00000EE9                 mov     ebp, esp
.text:00000EEB                 push    ecx
.text:00000EEC                 push    esi
.text:00000EED                 mov     [ebp+hWnd], 0CCCCCCCCh
.text:00000EF4                 mov     esi, esp
.text:00000EF6                 push    0               ; dwInitParam
.text:00000EF8                 push    offset _NullDlgProc@16 ; lpDialogFunc
.text:00000EFD                 push    0               ; hWndParent
.text:00000EFF                 push    offset TemplateName ; lpTemplateName
.text:00000F01                 mov     eax, dword ptr ds:_hinst
.text:00000F06                 push    eax             ; hInstance
.text:00000F07                 call    dword ptr ds:__imp__CreateDialogParamA@20 ; CreateDialogParamA(x,x,x,x,x)
.text:00000F0D                 cmp     esi, esp
.text:00000F0F                 call    __RTC_CheckEsp
.text:00000F14                 mov     [ebp+hWnd], eax
.text:00000F17                 mov     esi, esp
.text:00000F19                 push    0               ; nCmdShow
.text:00000F1B                 mov     ecx, [ebp+hWnd]
.text:00000F1E                 push    ecx             ; hWnd
.text:00000F1F                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:00000F25                 cmp     esi, esp
.text:00000F27                 call    __RTC_CheckEsp
.text:00000F2C                 mov     esi, esp
.text:00000F2E                 mov     edx, [ebp+hWnd]
.text:00000F31                 push    edx             ; hWnd
.text:00000F32                 call    dword ptr ds:__imp__SetActiveWindow@4 ; SetActiveWindow(x)
.text:00000F38                 cmp     esi, esp
.text:00000F3A                 call    __RTC_CheckEsp
.text:00000F3F                 mov     esi, esp
.text:00000F41                 mov     eax, [ebp+hWnd]
.text:00000F44                 push    eax             ; hWnd
.text:00000F45                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:00000F4B                 cmp     esi, esp
.text:00000F4D                 call    __RTC_CheckEsp
.text:00000F52                 pop     esi
.text:00000F53                 add     esp, 4
.text:00000F56                 cmp     ebp, esp
.text:00000F58                 call    __RTC_CheckEsp
.text:00000F5D                 mov     esp, ebp
.text:00000F5F                 pop     ebp
.text:00000F60                 retn
.text:00000F60 _defuse_showwindow endp
.text:00000F60
.text:00000F60 ; ---------------------------------------------------------------------------
.text:00000F61                 align 8
.text:00000F68
.text:00000F68 ; =============== S U B R O U T I N E =======================================
.text:00000F68
.text:00000F68 ; Attributes: bp-based frame
.text:00000F68
.text:00000F68 ; INT_PTR __stdcall NullDlgProc(HWND, UINT, WPARAM, LPARAM)
.text:00000F68 _NullDlgProc@16 proc near               ; DATA XREF: _defuse_showwindow+10o
.text:00000F68                 push    ebp
.text:00000F69                 mov     ebp, esp
.text:00000F6B                 xor     eax, eax
.text:00000F6D                 pop     ebp
.text:00000F6E                 retn    10h
.text:00000F6E _NullDlgProc@16 endp
.text:00000F6E
.text:00000F6E ; ---------------------------------------------------------------------------
.text:00000F71                 align 8
.text:00000F78
.text:00000F78 ; =============== S U B R O U T I N E =======================================
.text:00000F78
.text:00000F78 ; Attributes: bp-based frame
.text:00000F78
.text:00000F78                 public _do_config
.text:00000F78 _do_config      proc near
.text:00000F78
.text:00000F78 var_4           = dword ptr -4
.text:00000F78
.text:00000F78                 push    ebp
.text:00000F79                 mov     ebp, esp
.text:00000F7B                 push    ecx
.text:00000F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F83                 call    _ctrl_new_box
.text:00000F88                 mov     ds:_ctrlbox, eax
.text:00000F8D                 push    0
.text:00000F8F                 push    0
.text:00000F91                 push    0
.text:00000F93                 mov     eax, ds:_ctrlbox
.text:00000F98                 push    eax
.text:00000F99                 call    _setup_config_box
.text:00000F9E                 add     esp, 10h
.text:00000FA1                 push    0
.text:00000FA3                 push    0
.text:00000FA5                 call    _has_help
.text:00000FAA                 push    eax
.text:00000FAB                 push    offset _dp
.text:00000FB0                 mov     ecx, ds:_ctrlbox
.text:00000FB6                 push    ecx
.text:00000FB7                 call    _win_setup_config_box
.text:00000FBC                 add     esp, 14h
.text:00000FBF                 push    offset _dp
.text:00000FC4                 call    _dp_init
.text:00000FC9                 add     esp, 4
.text:00000FCC                 push    offset _ctrls_base
.text:00000FD1                 call    _winctrl_init
.text:00000FD6                 add     esp, 4
.text:00000FD9                 push    offset _ctrls_panel
.text:00000FDE                 call    _winctrl_init
.text:00000FE3                 add     esp, 4
.text:00000FE6                 push    offset _ctrls_base
.text:00000FEB                 push    offset _dp
.text:00000FF0                 call    _dp_add_tree
.text:00000FF5                 add     esp, 8
.text:00000FF8                 push    offset _ctrls_panel
.text:00000FFD                 push    offset _dp
.text:00001002                 call    _dp_add_tree
.text:00001007                 add     esp, 8
.text:0000100A                 mov     edx, dword ptr ds:_appname
.text:00001010                 push    edx
.text:00001011                 push    offset $SG90583 ; "%s Configuration"
.text:00001016                 call    _dupprintf
.text:0000101B                 add     esp, 8
.text:0000101E                 mov     ds:lpString, eax
.text:00001023                 mov     eax, dword ptr ds:_appname
.text:00001028                 push    eax
.text:00001029                 push    offset $SG90584 ; "%s Error"
.text:0000102E                 call    _dupprintf
.text:00001033                 add     esp, 8
.text:00001036                 mov     ds:dword_2C, eax
.text:0000103B                 mov     ecx, dword ptr ds:_conf
.text:00001041                 mov     ds:dword_30, ecx
.text:00001047                 push    offset _dp
.text:0000104C                 call    _dlg_auto_set_fixed_pitch_flag
.text:00001051                 add     esp, 4
.text:00001054                 mov     ds:byte_A3, 1
.text:0000105B                 push    offset _GenericMainDlgProc@16 ; lpDialogFunc
.text:00001060                 push    0               ; hWndParent
.text:00001062                 push    offset byte_66  ; lpTemplateName
.text:00001064                 mov     edx, dword ptr ds:_hinst
.text:0000106A                 push    edx             ; hInstance
.text:0000106B                 call    _SaneDialogBox
.text:00001070                 add     esp, 10h
.text:00001073                 mov     [ebp+var_4], eax
.text:00001076                 mov     eax, ds:_ctrlbox
.text:0000107B                 push    eax
.text:0000107C                 call    _ctrl_free_box
.text:00001081                 add     esp, 4
.text:00001084                 push    offset _ctrls_panel
.text:00001089                 call    _winctrl_cleanup
.text:0000108E                 add     esp, 4
.text:00001091                 push    offset _ctrls_base
.text:00001096                 call    _winctrl_cleanup
.text:0000109B                 add     esp, 4
.text:0000109E                 push    offset _dp
.text:000010A3                 call    _dp_cleanup
.text:000010A8                 add     esp, 4
.text:000010AB                 mov     eax, [ebp+var_4]
.text:000010AE                 add     esp, 4
.text:000010B1                 cmp     ebp, esp
.text:000010B3                 call    __RTC_CheckEsp
.text:000010B8                 mov     esp, ebp
.text:000010BA                 pop     ebp
.text:000010BB                 retn
.text:000010BB _do_config      endp
.text:000010BB
.text:000010BB ; ---------------------------------------------------------------------------
.text:000010BC                 db 0Ch dup(0CCh)
.text:000010C8
.text:000010C8 ; =============== S U B R O U T I N E =======================================
.text:000010C8
.text:000010C8 ; Attributes: bp-based frame
.text:000010C8
.text:000010C8 ; int __cdecl SaneDialogBox(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc)
.text:000010C8 _SaneDialogBox  proc near               ; CODE XREF: _do_config+F3p
.text:000010C8                                         ; _do_reconfig+12Dp
.text:000010C8
.text:000010C8 var_64          = dword ptr -64h
.text:000010C8 var_60          = dword ptr -60h
.text:000010C8 var_5C          = dword ptr -5Ch
.text:000010C8 Msg             = tagMSG ptr -54h
.text:000010C8 hWnd            = dword ptr -34h
.text:000010C8 WndClass        = WNDCLASSA ptr -2Ch
.text:000010C8 hInstance       = dword ptr  8
.text:000010C8 lpTemplateName  = dword ptr  0Ch
.text:000010C8 hWndParent      = dword ptr  10h
.text:000010C8 lpDialogFunc    = dword ptr  14h
.text:000010C8
.text:000010C8                 push    ebp
.text:000010C9                 mov     ebp, esp
.text:000010CB                 sub     esp, 64h
.text:000010CE                 push    esi
.text:000010CF                 push    edi
.text:000010D0                 lea     edi, [ebp+var_64]
.text:000010D3                 mov     ecx, 19h
.text:000010D8                 mov     eax, 0CCCCCCCCh
.text:000010DD                 rep stosd
.text:000010DF                 mov     [ebp+WndClass.style], 2808h
.text:000010E6                 mov     eax, dword ptr ds:__imp__DefDlgProcA@16 ; DefDlgProcA(x,x,x,x)
.text:000010EB                 mov     [ebp+WndClass.lpfnWndProc], eax
.text:000010EE                 mov     [ebp+WndClass.cbClsExtra], 0
.text:000010F5                 mov     [ebp+WndClass.cbWndExtra], 26h ; '&'
.text:000010FC                 mov     ecx, [ebp+hInstance]
.text:000010FF                 mov     [ebp+WndClass.hInstance], ecx
.text:00001102                 mov     [ebp+WndClass.hIcon], 0
.text:00001109                 mov     esi, esp
.text:0000110B                 push    7F00h           ; lpCursorName
.text:00001110                 push    0               ; hInstance
.text:00001112                 call    dword ptr ds:__imp__LoadCursorA@8 ; LoadCursorA(x,x)
.text:00001118                 cmp     esi, esp
.text:0000111A                 call    __RTC_CheckEsp
.text:0000111F                 mov     [ebp+WndClass.hCursor], eax
.text:00001122                 mov     [ebp+WndClass.hbrBackground], 2
.text:00001129                 mov     [ebp+WndClass.lpszMenuName], 0
.text:00001130                 mov     [ebp+WndClass.lpszClassName], offset $SG90348 ; "PuTTYConfigBox"
.text:00001137                 mov     esi, esp
.text:00001139                 lea     edx, [ebp+WndClass]
.text:0000113C                 push    edx             ; lpWndClass
.text:0000113D                 call    dword ptr ds:__imp__RegisterClassA@4 ; RegisterClassA(x)
.text:00001143                 cmp     esi, esp
.text:00001145                 call    __RTC_CheckEsp
.text:0000114A                 mov     esi, esp
.text:0000114C                 push    0               ; dwInitParam
.text:0000114E                 mov     eax, [ebp+lpDialogFunc]
.text:00001151                 push    eax             ; lpDialogFunc
.text:00001152                 mov     ecx, [ebp+hWndParent]
.text:00001155                 push    ecx             ; hWndParent
.text:00001156                 mov     edx, [ebp+lpTemplateName]
.text:00001159                 push    edx             ; lpTemplateName
.text:0000115A                 mov     eax, [ebp+hInstance]
.text:0000115D                 push    eax             ; hInstance
.text:0000115E                 call    dword ptr ds:__imp__CreateDialogParamA@20 ; CreateDialogParamA(x,x,x,x,x)
.text:00001164                 cmp     esi, esp
.text:00001166                 call    __RTC_CheckEsp
.text:0000116B                 mov     [ebp+hWnd], eax
.text:0000116E                 mov     esi, esp
.text:00001170                 push    0               ; dwNewLong
.text:00001172                 push    1Eh             ; nIndex
.text:00001174                 mov     ecx, [ebp+hWnd]
.text:00001177                 push    ecx             ; hWnd
.text:00001178                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:0000117E                 cmp     esi, esp
.text:00001180                 call    __RTC_CheckEsp
.text:00001185                 mov     esi, esp
.text:00001187                 push    0               ; dwNewLong
.text:00001189                 push    22h ; '"'       ; nIndex
.text:0000118B                 mov     edx, [ebp+hWnd]
.text:0000118E                 push    edx             ; hWnd
.text:0000118F                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00001195                 cmp     esi, esp
.text:00001197                 call    __RTC_CheckEsp
.text:0000119C
.text:0000119C loc_119C:                               ; CODE XREF: _SaneDialogBox:loc_1216j
.text:0000119C                 mov     esi, esp
.text:0000119E                 push    0               ; wMsgFilterMax
.text:000011A0                 push    0               ; wMsgFilterMin
.text:000011A2                 push    0               ; hWnd
.text:000011A4                 lea     eax, [ebp+Msg]
.text:000011A7                 push    eax             ; lpMsg
.text:000011A8                 call    dword ptr ds:__imp__GetMessageA@16 ; GetMessageA(x,x,x,x)
.text:000011AE                 cmp     esi, esp
.text:000011B0                 call    __RTC_CheckEsp
.text:000011B5                 mov     [ebp+var_64], eax
.text:000011B8                 cmp     [ebp+var_64], 0
.text:000011BC                 jle     short loc_1218
.text:000011BE                 mov     esi, esp
.text:000011C0                 push    1Eh             ; nIndex
.text:000011C2                 mov     ecx, [ebp+hWnd]
.text:000011C5                 push    ecx             ; hWnd
.text:000011C6                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:000011CC                 cmp     esi, esp
.text:000011CE                 call    __RTC_CheckEsp
.text:000011D3                 mov     [ebp+var_5C], eax
.text:000011D6                 mov     edx, [ebp+var_5C]
.text:000011D9                 and     edx, 1
.text:000011DC                 jnz     short loc_120C
.text:000011DE                 mov     esi, esp
.text:000011E0                 lea     eax, [ebp+Msg]
.text:000011E3                 push    eax             ; lpMsg
.text:000011E4                 mov     ecx, [ebp+hWnd]
.text:000011E7                 push    ecx             ; hDlg
.text:000011E8                 call    dword ptr ds:__imp__IsDialogMessageA@8 ; IsDialogMessageA(x,x)
.text:000011EE                 cmp     esi, esp
.text:000011F0                 call    __RTC_CheckEsp
.text:000011F5                 test    eax, eax
.text:000011F7                 jnz     short loc_120C
.text:000011F9                 mov     esi, esp
.text:000011FB                 lea     edx, [ebp+Msg]
.text:000011FE                 push    edx             ; lpMsg
.text:000011FF                 call    dword ptr ds:__imp__DispatchMessageA@4 ; DispatchMessageA(x)
.text:00001205                 cmp     esi, esp
.text:00001207                 call    __RTC_CheckEsp
.text:0000120C
.text:0000120C loc_120C:                               ; CODE XREF: _SaneDialogBox+114j
.text:0000120C                                         ; _SaneDialogBox+12Fj
.text:0000120C                 mov     eax, [ebp+var_5C]
.text:0000120F                 and     eax, 1
.text:00001212                 jz      short loc_1216
.text:00001214                 jmp     short loc_1218
.text:00001216 ; ---------------------------------------------------------------------------
.text:00001216
.text:00001216 loc_1216:                               ; CODE XREF: _SaneDialogBox+14Aj
.text:00001216                 jmp     short loc_119C
.text:00001218 ; ---------------------------------------------------------------------------
.text:00001218
.text:00001218 loc_1218:                               ; CODE XREF: _SaneDialogBox+F4j
.text:00001218                                         ; _SaneDialogBox+14Cj
.text:00001218                 cmp     [ebp+var_64], 0
.text:0000121C                 jnz     short loc_1231
.text:0000121E                 mov     esi, esp
.text:00001220                 mov     ecx, [ebp+Msg.wParam]
.text:00001223                 push    ecx             ; nExitCode
.text:00001224                 call    dword ptr ds:__imp__PostQuitMessage@4 ; PostQuitMessage(x)
.text:0000122A                 cmp     esi, esp
.text:0000122C                 call    __RTC_CheckEsp
.text:00001231
.text:00001231 loc_1231:                               ; CODE XREF: _SaneDialogBox+154j
.text:00001231                 mov     esi, esp
.text:00001233                 push    22h ; '"'       ; nIndex
.text:00001235                 mov     edx, [ebp+hWnd]
.text:00001238                 push    edx             ; hWnd
.text:00001239                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:0000123F                 cmp     esi, esp
.text:00001241                 call    __RTC_CheckEsp
.text:00001246                 mov     [ebp+var_60], eax
.text:00001249                 mov     esi, esp
.text:0000124B                 mov     eax, [ebp+hWnd]
.text:0000124E                 push    eax             ; hWnd
.text:0000124F                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:00001255                 cmp     esi, esp
.text:00001257                 call    __RTC_CheckEsp
.text:0000125C                 mov     eax, [ebp+var_60]
.text:0000125F                 push    edx
.text:00001260                 mov     ecx, ebp
.text:00001262                 push    eax
.text:00001263                 lea     edx, $LN11
.text:00001269                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000126E                 pop     eax
.text:0000126F                 pop     edx
.text:00001270                 pop     edi
.text:00001271                 pop     esi
.text:00001272                 add     esp, 64h
.text:00001275                 cmp     ebp, esp
.text:00001277                 call    __RTC_CheckEsp
.text:0000127C                 mov     esp, ebp
.text:0000127E                 pop     ebp
.text:0000127F                 retn
.text:0000127F _SaneDialogBox  endp
.text:0000127F
.text:0000127F ; ---------------------------------------------------------------------------
.text:00001280 $LN11           dd 2                    ; DATA XREF: _SaneDialogBox+19Bo
.text:00001284                 dd offset $LN10
.text:00001288 $LN10           dd 0FFFFFFD4h, 28h      ; DATA XREF: .text:00001284o
.text:00001290                 dd offset $LN8
.text:00001294                 dd 0FFFFFFACh, 1Ch
.text:0000129C                 dd offset $LN9
.text:000012A0 $LN9            dd 67736Dh              ; DATA XREF: .text:0000129Co
.text:000012A4 $LN8            dd 0CC006377h           ; DATA XREF: .text:00001290o
.text:000012A8
.text:000012A8 ; =============== S U B R O U T I N E =======================================
.text:000012A8
.text:000012A8 ; Attributes: bp-based frame
.text:000012A8
.text:000012A8 ; int __stdcall GenericMainDlgProc(HWND hWnd, UINT, WPARAM, LPARAM)
.text:000012A8 _GenericMainDlgProc@16 proc near        ; DATA XREF: _do_config+E3o
.text:000012A8                                         ; _do_reconfig+11Do
.text:000012A8
.text:000012A8 var_134         = dword ptr -134h
.text:000012A8 var_130         = dword ptr -130h
.text:000012A8 var_12C         = dword ptr -12Ch
.text:000012A8 var_128         = dword ptr -128h
.text:000012A8 var_124         = dword ptr -124h
.text:000012A8 var_11C         = byte ptr -11Ch
.text:000012A8 var_D4          = dword ptr -0D4h
.text:000012A8 var_D0          = dword ptr -0D0h
.text:000012A8 var_C4          = dword ptr -0C4h
.text:000012A8 var_C0          = dword ptr -0C0h
.text:000012A8 var_B0          = dword ptr -0B0h
.text:000012A8 var_A8          = dword ptr -0A8h
.text:000012A8 var_A4          = dword ptr -0A4h
.text:000012A8 var_A0          = dword ptr -0A0h
.text:000012A8 Str             = dword ptr -9Ch
.text:000012A8 var_98          = dword ptr -98h
.text:000012A8 var_94          = dword ptr -94h
.text:000012A8 var_90          = dword ptr -90h
.text:000012A8 var_8C          = dword ptr -8Ch
.text:000012A8 var_88          = dword ptr -88h
.text:000012A8 lParam          = dword ptr -84h
.text:000012A8 var_80          = dword ptr -80h
.text:000012A8 wParam          = dword ptr -7Ch
.text:000012A8 var_74          = tagRECT ptr -74h
.text:000012A8 var_5C          = tagRECT ptr -5Ch
.text:000012A8 Rect            = tagRECT ptr -44h
.text:000012A8 var_30          = dword ptr -30h
.text:000012A8 var_2C          = dword ptr -2Ch
.text:000012A8 var_24          = dword ptr -24h
.text:000012A8 Dst             = byte ptr -20h
.text:000012A8 var_C           = dword ptr -0Ch
.text:000012A8 var_8           = dword ptr -8
.text:000012A8 var_4           = dword ptr -4
.text:000012A8 hWnd            = dword ptr  8
.text:000012A8 arg_4           = dword ptr  0Ch
.text:000012A8 arg_8           = dword ptr  10h
.text:000012A8 arg_C           = dword ptr  14h
.text:000012A8
.text:000012A8                 push    ebp
.text:000012A9                 mov     ebp, esp
.text:000012AB                 sub     esp, 134h
.text:000012B1                 push    esi
.text:000012B2                 push    edi
.text:000012B3                 lea     edi, [ebp+var_134]
.text:000012B9                 mov     ecx, 4Dh ; 'M'
.text:000012BE                 mov     eax, 0CCCCCCCCh
.text:000012C3                 rep stosd
.text:000012C5                 mov     eax, dword ptr ds:___security_cookie
.text:000012CA                 xor     eax, ebp
.text:000012CC                 mov     [ebp+var_4], eax
.text:000012CF                 mov     eax, [ebp+arg_4]
.text:000012D2                 mov     [ebp+var_130], eax
.text:000012D8                 cmp     [ebp+var_130], 53h ; 'S'
.text:000012DF                 ja      short loc_131A
.text:000012E1                 cmp     [ebp+var_130], 53h ; 'S'
.text:000012E8                 jz      loc_1B23
.text:000012EE                 cmp     [ebp+var_130], 5
.text:000012F5                 jz      loc_1B70
.text:000012FB                 cmp     [ebp+var_130], 10h
.text:00001302                 jz      loc_1B52
.text:00001308                 cmp     [ebp+var_130], 4Eh ; 'N'
.text:0000130F                 jz      loc_189D
.text:00001315                 jmp     loc_1AA9
.text:0000131A ; ---------------------------------------------------------------------------
.text:0000131A
.text:0000131A loc_131A:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+37j
.text:0000131A                 cmp     [ebp+var_130], 110h
.text:00001324                 jz      short loc_133B
.text:00001326                 cmp     [ebp+var_130], 202h
.text:00001330                 jz      loc_1867
.text:00001336                 jmp     loc_1AA9
.text:0000133B ; ---------------------------------------------------------------------------
.text:0000133B
.text:0000133B loc_133B:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+7Cj
.text:0000133B                 mov     ecx, [ebp+hWnd]
.text:0000133E                 mov     ds:_dp, ecx
.text:00001344                 push    offset $SG90447
.text:00001349                 mov     edx, [ebp+hWnd]
.text:0000134C                 push    edx
.text:0000134D                 call    _create_controls
.text:00001352                 add     esp, 8
.text:00001355                 mov     esi, esp
.text:00001357                 mov     eax, ds:lpString
.text:0000135C                 push    eax             ; lpString
.text:0000135D                 mov     ecx, [ebp+hWnd]
.text:00001360                 push    ecx             ; hWnd
.text:00001361                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:00001367                 cmp     esi, esp
.text:00001369                 call    __RTC_CheckEsp
.text:0000136E                 mov     esi, esp
.text:00001370                 push    0               ; dwNewLong
.text:00001372                 push    0FFFFFFEBh      ; nIndex
.text:00001374                 mov     edx, [ebp+hWnd]
.text:00001377                 push    edx             ; hWnd
.text:00001378                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:0000137E                 cmp     esi, esp
.text:00001380                 call    __RTC_CheckEsp
.text:00001385                 call    _has_help
.text:0000138A                 test    eax, eax
.text:0000138C                 jz      short loc_13C0
.text:0000138E                 mov     esi, esp
.text:00001390                 push    0FFFFFFECh      ; nIndex
.text:00001392                 mov     eax, [ebp+hWnd]
.text:00001395                 push    eax             ; hWnd
.text:00001396                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:0000139C                 cmp     esi, esp
.text:0000139E                 call    __RTC_CheckEsp
.text:000013A3                 or      eax, 400h
.text:000013A8                 mov     esi, esp
.text:000013AA                 push    eax             ; dwNewLong
.text:000013AB                 push    0FFFFFFECh      ; nIndex
.text:000013AD                 mov     ecx, [ebp+hWnd]
.text:000013B0                 push    ecx             ; hWnd
.text:000013B1                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:000013B7                 cmp     esi, esp
.text:000013B9                 call    __RTC_CheckEsp
.text:000013BE                 jmp     short loc_13F4
.text:000013C0 ; ---------------------------------------------------------------------------
.text:000013C0
.text:000013C0 loc_13C0:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+E4j
.text:000013C0                 mov     esi, esp
.text:000013C2                 push    3EDh            ; nIDDlgItem
.text:000013C7                 mov     edx, [ebp+hWnd]
.text:000013CA                 push    edx             ; hDlg
.text:000013CB                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text:000013D1                 cmp     esi, esp
.text:000013D3                 call    __RTC_CheckEsp
.text:000013D8                 mov     [ebp+var_30], eax
.text:000013DB                 cmp     [ebp+var_30], 0
.text:000013DF                 jz      short loc_13F4
.text:000013E1                 mov     esi, esp
.text:000013E3                 mov     eax, [ebp+var_30]
.text:000013E6                 push    eax             ; hWnd
.text:000013E7                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:000013ED                 cmp     esi, esp
.text:000013EF                 call    __RTC_CheckEsp
.text:000013F4
.text:000013F4 loc_13F4:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+116j
.text:000013F4                                         ; GenericMainDlgProc(x,x,x,x)+137j
.text:000013F4                 mov     esi, esp
.text:000013F6                 push    (offset dword_C8+1) ; lpIconName
.text:000013FB                 mov     ecx, dword ptr ds:_hinst
.text:00001401                 push    ecx             ; hInstance
.text:00001402                 call    dword ptr ds:__imp__LoadIconA@8 ; LoadIconA(x,x)
.text:00001408                 cmp     esi, esp
.text:0000140A                 call    __RTC_CheckEsp
.text:0000140F                 mov     esi, esp
.text:00001411                 push    eax             ; lParam
.text:00001412                 push    1               ; wParam
.text:00001414                 push    80h ; 'Ç'       ; Msg
.text:00001419                 mov     edx, [ebp+hWnd]
.text:0000141C                 push    edx             ; hWnd
.text:0000141D                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001423                 cmp     esi, esp
.text:00001425                 call    __RTC_CheckEsp
.text:0000142A                 mov     esi, esp
.text:0000142C                 call    dword ptr ds:__imp__GetDesktopWindow@0 ; GetDesktopWindow()
.text:00001432                 cmp     esi, esp
.text:00001434                 call    __RTC_CheckEsp
.text:00001439                 mov     [ebp+var_8], eax
.text:0000143C                 mov     esi, esp
.text:0000143E                 lea     eax, [ebp+Rect]
.text:00001441                 push    eax             ; lpRect
.text:00001442                 mov     ecx, [ebp+var_8]
.text:00001445                 push    ecx             ; hWnd
.text:00001446                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:0000144C                 cmp     esi, esp
.text:0000144E                 call    __RTC_CheckEsp
.text:00001453                 test    eax, eax
.text:00001455                 jz      short loc_14B9
.text:00001457                 mov     esi, esp
.text:00001459                 lea     edx, [ebp+var_5C]
.text:0000145C                 push    edx             ; lpRect
.text:0000145D                 mov     eax, [ebp+hWnd]
.text:00001460                 push    eax             ; hWnd
.text:00001461                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:00001467                 cmp     esi, esp
.text:00001469                 call    __RTC_CheckEsp
.text:0000146E                 test    eax, eax
.text:00001470                 jz      short loc_14B9
.text:00001472                 mov     esi, esp
.text:00001474                 push    1               ; bRepaint
.text:00001476                 mov     ecx, [ebp+var_5C.bottom]
.text:00001479                 sub     ecx, [ebp+var_5C.top]
.text:0000147C                 push    ecx             ; nHeight
.text:0000147D                 mov     edx, [ebp+var_5C.right]
.text:00001480                 sub     edx, [ebp+var_5C.left]
.text:00001483                 push    edx             ; nWidth
.text:00001484                 mov     eax, [ebp+Rect.bottom]
.text:00001487                 add     eax, [ebp+Rect.top]
.text:0000148A                 add     eax, [ebp+var_5C.top]
.text:0000148D                 sub     eax, [ebp+var_5C.bottom]
.text:00001490                 cdq
.text:00001491                 sub     eax, edx
.text:00001493                 sar     eax, 1
.text:00001495                 push    eax             ; Y
.text:00001496                 mov     eax, [ebp+Rect.right]
.text:00001499                 add     eax, [ebp+Rect.left]
.text:0000149C                 add     eax, [ebp+var_5C.left]
.text:0000149F                 sub     eax, [ebp+var_5C.right]
.text:000014A2                 cdq
.text:000014A3                 sub     eax, edx
.text:000014A5                 sar     eax, 1
.text:000014A7                 push    eax             ; X
.text:000014A8                 mov     eax, [ebp+hWnd]
.text:000014AB                 push    eax             ; hWnd
.text:000014AC                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text:000014B2                 cmp     esi, esp
.text:000014B4                 call    __RTC_CheckEsp
.text:000014B9
.text:000014B9 loc_14B9:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+1ADj
.text:000014B9                                         ; GenericMainDlgProc(x,x,x,x)+1C8j
.text:000014B9                 mov     [ebp+var_74.left], 3
.text:000014C0                 mov     ecx, [ebp+var_74.left]
.text:000014C3                 add     ecx, 5Fh ; '_'
.text:000014C6                 mov     [ebp+var_74.right], ecx
.text:000014C9                 mov     [ebp+var_74.top], 3
.text:000014D0                 mov     edx, [ebp+var_74.top]
.text:000014D3                 add     edx, 0Ah
.text:000014D6                 mov     [ebp+var_74.bottom], edx
.text:000014D9                 mov     esi, esp
.text:000014DB                 lea     eax, [ebp+var_74]
.text:000014DE                 push    eax             ; lpRect
.text:000014DF                 mov     ecx, [ebp+hWnd]
.text:000014E2                 push    ecx             ; hDlg
.text:000014E3                 call    dword ptr ds:__imp__MapDialogRect@8 ; MapDialogRect(x,x)
.text:000014E9                 cmp     esi, esp
.text:000014EB                 call    __RTC_CheckEsp
.text:000014F0                 mov     esi, esp
.text:000014F2                 push    0               ; lpParam
.text:000014F4                 mov     edx, dword ptr ds:_hinst
.text:000014FA                 push    edx             ; hInstance
.text:000014FB                 push    offset unk_3EF  ; hMenu
.text:00001500                 mov     eax, [ebp+hWnd]
.text:00001503                 push    eax             ; hWndParent
.text:00001504                 mov     ecx, [ebp+var_74.bottom]
.text:00001507                 sub     ecx, [ebp+var_74.top]
.text:0000150A                 push    ecx             ; nHeight
.text:0000150B                 mov     edx, [ebp+var_74.right]
.text:0000150E                 sub     edx, [ebp+var_74.left]
.text:00001511                 push    edx             ; nWidth
.text:00001512                 mov     eax, [ebp+var_74.top]
.text:00001515                 push    eax             ; Y
.text:00001516                 mov     ecx, [ebp+var_74.left]
.text:00001519                 push    ecx             ; X
.text:0000151A                 push    50000000h       ; dwStyle
.text:0000151F                 push    offset $SG90465 ; "Cate&gory:"
.text:00001524                 push    offset $SG90466 ; "STATIC"
.text:00001529                 push    0               ; dwExStyle
.text:0000152B                 call    dword ptr ds:__imp__CreateWindowExA@48 ; CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)
.text:00001531                 cmp     esi, esp
.text:00001533                 call    __RTC_CheckEsp
.text:00001538                 mov     [ebp+var_80], eax
.text:0000153B                 mov     esi, esp
.text:0000153D                 push    0               ; lParam
.text:0000153F                 push    0               ; wParam
.text:00001541                 push    31h ; '1'       ; Msg
.text:00001543                 mov     edx, [ebp+hWnd]
.text:00001546                 push    edx             ; hWnd
.text:00001547                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000154D                 cmp     esi, esp
.text:0000154F                 call    __RTC_CheckEsp
.text:00001554                 mov     [ebp+wParam], eax
.text:00001557                 mov     esi, esp
.text:00001559                 push    1               ; lParam
.text:0000155B                 mov     eax, [ebp+wParam]
.text:0000155E                 push    eax             ; wParam
.text:0000155F                 push    30h ; '0'       ; Msg
.text:00001561                 mov     ecx, [ebp+var_80]
.text:00001564                 push    ecx             ; hWnd
.text:00001565                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000156B                 cmp     esi, esp
.text:0000156D                 call    __RTC_CheckEsp
.text:00001572                 mov     [ebp+var_74.left], 3
.text:00001579                 mov     edx, [ebp+var_74.left]
.text:0000157C                 add     edx, 5Fh ; '_'
.text:0000157F                 mov     [ebp+var_74.right], edx
.text:00001582                 mov     [ebp+var_74.top], 0Dh
.text:00001589                 mov     eax, [ebp+var_74.top]
.text:0000158C                 add     eax, 0DBh ; '¦'
.text:00001591                 mov     [ebp+var_74.bottom], eax
.text:00001594                 mov     esi, esp
.text:00001596                 lea     ecx, [ebp+var_74]
.text:00001599                 push    ecx             ; lpRect
.text:0000159A                 mov     edx, [ebp+hWnd]
.text:0000159D                 push    edx             ; hDlg
.text:0000159E                 call    dword ptr ds:__imp__MapDialogRect@8 ; MapDialogRect(x,x)
.text:000015A4                 cmp     esi, esp
.text:000015A6                 call    __RTC_CheckEsp
.text:000015AB                 mov     esi, esp
.text:000015AD                 push    0               ; lpParam
.text:000015AF                 mov     eax, dword ptr ds:_hinst
.text:000015B4                 push    eax             ; hInstance
.text:000015B5                 push    offset hMenu    ; hMenu
.text:000015BA                 mov     ecx, [ebp+hWnd]
.text:000015BD                 push    ecx             ; hWndParent
.text:000015BE                 mov     edx, [ebp+var_74.bottom]
.text:000015C1                 sub     edx, [ebp+var_74.top]
.text:000015C4                 push    edx             ; nHeight
.text:000015C5                 mov     eax, [ebp+var_74.right]
.text:000015C8                 sub     eax, [ebp+var_74.left]
.text:000015CB                 push    eax             ; nWidth
.text:000015CC                 mov     ecx, [ebp+var_74.top]
.text:000015CF                 push    ecx             ; Y
.text:000015D0                 mov     edx, [ebp+var_74.left]
.text:000015D3                 push    edx             ; X
.text:000015D4                 push    50010037h       ; dwStyle
.text:000015D9                 push    offset $SG90477 ; lpWindowName
.text:000015DE                 push    offset $SG90478 ; "SysTreeView32"
.text:000015E3                 push    200h            ; dwExStyle
.text:000015E8                 call    dword ptr ds:__imp__CreateWindowExA@48 ; CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)
.text:000015EE                 cmp     esi, esp
.text:000015F0                 call    __RTC_CheckEsp
.text:000015F5                 mov     [ebp+var_C], eax
.text:000015F8                 mov     esi, esp
.text:000015FA                 push    0               ; lParam
.text:000015FC                 push    0               ; wParam
.text:000015FE                 push    31h ; '1'       ; Msg
.text:00001600                 mov     eax, [ebp+hWnd]
.text:00001603                 push    eax             ; hWnd
.text:00001604                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000160A                 cmp     esi, esp
.text:0000160C                 call    __RTC_CheckEsp
.text:00001611                 mov     [ebp+wParam], eax
.text:00001614                 mov     esi, esp
.text:00001616                 push    1               ; lParam
.text:00001618                 mov     ecx, [ebp+wParam]
.text:0000161B                 push    ecx             ; wParam
.text:0000161C                 push    30h ; '0'       ; Msg
.text:0000161E                 mov     edx, [ebp+var_C]
.text:00001621                 push    edx             ; hWnd
.text:00001622                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001628                 cmp     esi, esp
.text:0000162A                 call    __RTC_CheckEsp
.text:0000162F                 mov     eax, [ebp+var_C]
.text:00001632                 mov     [ebp+var_24], eax
.text:00001635                 push    10h             ; Size
.text:00001637                 push    0               ; Val
.text:00001639                 lea     ecx, [ebp+Dst]
.text:0000163C                 push    ecx             ; Dst
.text:0000163D                 call    _memset
.text:00001642                 add     esp, 0Ch
.text:00001645                 mov     [ebp+lParam], 0
.text:0000164F                 mov     [ebp+var_8C], 0
.text:00001659                 mov     [ebp+var_88], 0
.text:00001663                 jmp     short loc_1674
.text:00001665 ; ---------------------------------------------------------------------------
.text:00001665
.text:00001665 loc_1665:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+406j
.text:00001665                                         ; GenericMainDlgProc(x,x,x,x)+453j ...
.text:00001665                 mov     edx, [ebp+var_88]
.text:0000166B                 add     edx, 1
.text:0000166E                 mov     [ebp+var_88], edx
.text:00001674
.text:00001674 loc_1674:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+3BBj
.text:00001674                 mov     eax, ds:_ctrlbox
.text:00001679                 mov     ecx, [ebp+var_88]
.text:0000167F                 cmp     ecx, [eax]
.text:00001681                 jge     loc_17C5
.text:00001687                 mov     edx, ds:_ctrlbox
.text:0000168D                 mov     eax, [edx+8]
.text:00001690                 mov     ecx, [ebp+var_88]
.text:00001696                 mov     edx, [eax+ecx*4]
.text:00001699                 mov     [ebp+var_90], edx
.text:0000169F                 mov     eax, [ebp+var_90]
.text:000016A5                 mov     ecx, [eax]
.text:000016A7                 movsx   edx, byte ptr [ecx]
.text:000016AA                 test    edx, edx
.text:000016AC                 jnz     short loc_16B0
.text:000016AE                 jmp     short loc_1665
.text:000016B0 ; ---------------------------------------------------------------------------
.text:000016B0
.text:000016B0 loc_16B0:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+404j
.text:000016B0                 cmp     [ebp+var_8C], 0
.text:000016B7                 jz      short loc_16D9
.text:000016B9                 mov     eax, [ebp+var_8C]
.text:000016BF                 push    eax
.text:000016C0                 mov     ecx, [ebp+var_90]
.text:000016C6                 mov     edx, [ecx]
.text:000016C8                 push    edx
.text:000016C9                 call    _ctrl_path_compare
.text:000016CE                 add     esp, 8
.text:000016D1                 mov     [ebp+var_134], eax
.text:000016D7                 jmp     short loc_16E3
.text:000016D9 ; ---------------------------------------------------------------------------
.text:000016D9
.text:000016D9 loc_16D9:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+40Fj
.text:000016D9                 mov     [ebp+var_134], 0
.text:000016E3
.text:000016E3 loc_16E3:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+42Fj
.text:000016E3                 mov     eax, [ebp+var_134]
.text:000016E9                 mov     [ebp+var_98], eax
.text:000016EF                 cmp     [ebp+var_98], 7FFFFFFFh
.text:000016F9                 jnz     short loc_1700
.text:000016FB                 jmp     loc_1665
.text:00001700 ; ---------------------------------------------------------------------------
.text:00001700
.text:00001700 loc_1700:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+451j
.text:00001700                 mov     ecx, [ebp+var_90]
.text:00001706                 mov     edx, [ecx]
.text:00001708                 push    edx
.text:00001709                 call    _ctrl_path_elements
.text:0000170E                 add     esp, 4
.text:00001711                 sub     eax, 1
.text:00001714                 cmp     [ebp+var_98], eax
.text:0000171A                 jz      short loc_1733
.text:0000171C                 push    1E0h            ; Line
.text:00001721                 push    offset $SG90502 ; "..\\..\\windlg.c"
.text:00001726                 push    offset $SG90503 ; "j == ctrl_path_elements(s->pathname) - "...
.text:0000172B                 call    __wassert
.text:00001730 ; ---------------------------------------------------------------------------
.text:00001730                 add     esp, 0Ch
.text:00001733
.text:00001733 loc_1733:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+472j
.text:00001733                 push    2Fh ; '/'       ; Ch
.text:00001735                 mov     ecx, [ebp+var_90]
.text:0000173B                 mov     edx, [ecx]
.text:0000173D                 push    edx             ; Str
.text:0000173E                 call    _strrchr
.text:00001743                 add     esp, 8
.text:00001746                 mov     [ebp+Str], eax
.text:0000174C                 cmp     [ebp+Str], 0
.text:00001753                 jnz     short loc_1765
.text:00001755                 mov     eax, [ebp+var_90]
.text:0000175B                 mov     ecx, [eax]
.text:0000175D                 mov     [ebp+Str], ecx
.text:00001763                 jmp     short loc_1774
.text:00001765 ; ---------------------------------------------------------------------------
.text:00001765
.text:00001765 loc_1765:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+4ABj
.text:00001765                 mov     edx, [ebp+Str]
.text:0000176B                 add     edx, 1
.text:0000176E                 mov     [ebp+Str], edx
.text:00001774
.text:00001774 loc_1774:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+4BBj
.text:00001774                 mov     eax, [ebp+var_90]
.text:0000177A                 mov     ecx, [eax]
.text:0000177C                 push    ecx             ; int
.text:0000177D                 mov     edx, [ebp+Str]
.text:00001783                 push    edx             ; Str
.text:00001784                 mov     eax, [ebp+var_98]
.text:0000178A                 push    eax             ; int
.text:0000178B                 lea     ecx, [ebp+var_24]
.text:0000178E                 push    ecx             ; int
.text:0000178F                 call    _treeview_insert
.text:00001794                 add     esp, 10h
.text:00001797                 mov     [ebp+var_94], eax
.text:0000179D                 cmp     [ebp+lParam], 0
.text:000017A4                 jnz     short loc_17B2
.text:000017A6                 mov     edx, [ebp+var_94]
.text:000017AC                 mov     [ebp+lParam], edx
.text:000017B2
.text:000017B2 loc_17B2:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+4FCj
.text:000017B2                 mov     eax, [ebp+var_90]
.text:000017B8                 mov     ecx, [eax]
.text:000017BA                 mov     [ebp+var_8C], ecx
.text:000017C0                 jmp     loc_1665
.text:000017C5 ; ---------------------------------------------------------------------------
.text:000017C5
.text:000017C5 loc_17C5:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+3D9j
.text:000017C5                 mov     esi, esp
.text:000017C7                 mov     edx, [ebp+lParam]
.text:000017CD                 push    edx             ; lParam
.text:000017CE                 push    9               ; wParam
.text:000017D0                 push    110Bh           ; Msg
.text:000017D5                 mov     eax, [ebp+var_C]
.text:000017D8                 push    eax             ; hWnd
.text:000017D9                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:000017DF                 cmp     esi, esp
.text:000017E1                 call    __RTC_CheckEsp
.text:000017E6                 mov     [ebp+var_A0], 0
.text:000017F0                 jmp     short loc_1801
.text:000017F2 ; ---------------------------------------------------------------------------
.text:000017F2
.text:000017F2 loc_17F2:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x):loc_1847j
.text:000017F2                 mov     ecx, [ebp+var_A0]
.text:000017F8                 add     ecx, 1
.text:000017FB                 mov     [ebp+var_A0], ecx
.text:00001801
.text:00001801 loc_1801:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+548j
.text:00001801                 mov     edx, [ebp+var_A0]
.text:00001807                 push    edx
.text:00001808                 push    offset _ctrls_panel
.text:0000180D                 call    _winctrl_findbyindex
.text:00001812                 add     esp, 8
.text:00001815                 mov     [ebp+var_A4], eax
.text:0000181B                 cmp     [ebp+var_A4], 0
.text:00001822                 jz      short loc_1849
.text:00001824                 mov     eax, [ebp+var_A4]
.text:0000182A                 cmp     dword ptr [eax], 0
.text:0000182D                 jz      short loc_1847
.text:0000182F                 push    offset _dp
.text:00001834                 mov     ecx, [ebp+var_A4]
.text:0000183A                 mov     edx, [ecx]
.text:0000183C                 push    edx
.text:0000183D                 call    _dlg_set_focus
.text:00001842                 add     esp, 8
.text:00001845                 jmp     short loc_1849
.text:00001847 ; ---------------------------------------------------------------------------
.text:00001847
.text:00001847 loc_1847:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+585j
.text:00001847                 jmp     short loc_17F2
.text:00001849 ; ---------------------------------------------------------------------------
.text:00001849
.text:00001849 loc_1849:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+57Aj
.text:00001849                                         ; GenericMainDlgProc(x,x,x,x)+59Dj
.text:00001849                 mov     esi, esp
.text:0000184B                 push    1               ; dwNewLong
.text:0000184D                 push    0FFFFFFEBh      ; nIndex
.text:0000184F                 mov     eax, [ebp+hWnd]
.text:00001852                 push    eax             ; hWnd
.text:00001853                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00001859                 cmp     esi, esp
.text:0000185B                 call    __RTC_CheckEsp
.text:00001860                 xor     eax, eax
.text:00001862                 jmp     loc_1B88
.text:00001867 ; ---------------------------------------------------------------------------
.text:00001867
.text:00001867 loc_1867:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+88j
.text:00001867                 mov     esi, esp
.text:00001869                 call    dword ptr ds:__imp__ReleaseCapture@0 ; ReleaseCapture()
.text:0000186F                 cmp     esi, esp
.text:00001871                 call    __RTC_CheckEsp
.text:00001876                 cmp     ds:dword_C8, 0
.text:0000187D                 jz      short loc_1898
.text:0000187F                 xor     ecx, ecx
.text:00001881                 cmp     ds:dword_CC, 0
.text:00001888                 setnz   cl
.text:0000188B                 push    ecx             ; dwNewLong
.text:0000188C                 mov     edx, [ebp+hWnd]
.text:0000188F                 push    edx             ; hWnd
.text:00001890                 call    _SaneEndDialog
.text:00001895                 add     esp, 8
.text:00001898
.text:00001898 loc_1898:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+5D5j
.text:00001898                 jmp     loc_1B86
.text:0000189D ; ---------------------------------------------------------------------------
.text:0000189D
.text:0000189D loc_189D:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+67j
.text:0000189D                 mov     eax, [ebp+arg_8]
.text:000018A0                 and     eax, 0FFFFh
.text:000018A5                 movzx   ecx, ax
.text:000018A8                 cmp     ecx, 3F0h
.text:000018AE                 jnz     loc_1AA4
.text:000018B4                 mov     edx, [ebp+arg_C]
.text:000018B7                 cmp     dword ptr [edx+8], 0FFFFFE6Eh
.text:000018BE                 jnz     loc_1AA4
.text:000018C4                 mov     esi, esp
.text:000018C6                 push    0               ; lParam
.text:000018C8                 push    9               ; wParam
.text:000018CA                 push    110Ah           ; Msg
.text:000018CF                 mov     eax, [ebp+arg_C]
.text:000018D2                 mov     ecx, [eax]
.text:000018D4                 push    ecx             ; hWnd
.text:000018D5                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:000018DB                 cmp     esi, esp
.text:000018DD                 call    __RTC_CheckEsp
.text:000018E2                 mov     [ebp+var_A8], eax
.text:000018E8                 mov     esi, esp
.text:000018EA                 push    0               ; lParam
.text:000018EC                 push    0               ; wParam
.text:000018EE                 push    0Bh             ; Msg
.text:000018F0                 mov     edx, [ebp+hWnd]
.text:000018F3                 push    edx             ; hWnd
.text:000018F4                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:000018FA                 cmp     esi, esp
.text:000018FC                 call    __RTC_CheckEsp
.text:00001901                 mov     eax, [ebp+var_A8]
.text:00001907                 mov     [ebp+var_D0], eax
.text:0000190D                 lea     ecx, [ebp+var_11C]
.text:00001913                 mov     [ebp+var_C4], ecx
.text:00001919                 mov     [ebp+var_C0], 40h ; '@'
.text:00001923                 mov     [ebp+var_D4], 5
.text:0000192D                 mov     esi, esp
.text:0000192F                 lea     edx, [ebp+var_D4]
.text:00001935                 push    edx             ; lParam
.text:00001936                 push    0               ; wParam
.text:00001938                 push    110Ch           ; Msg
.text:0000193D                 mov     eax, [ebp+arg_C]
.text:00001940                 mov     ecx, [eax]
.text:00001942                 push    ecx             ; hWnd
.text:00001943                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001949                 cmp     esi, esp
.text:0000194B                 call    __RTC_CheckEsp
.text:00001950
.text:00001950 loc_1950:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+789j
.text:00001950                 push    0
.text:00001952                 push    offset _ctrls_panel
.text:00001957                 call    _winctrl_findbyindex
.text:0000195C                 add     esp, 8
.text:0000195F                 mov     [ebp+var_12C], eax
.text:00001965                 cmp     [ebp+var_12C], 0
.text:0000196C                 jz      loc_1A36
.text:00001972                 mov     [ebp+var_124], 0
.text:0000197C                 jmp     short loc_198D
.text:0000197E ; ---------------------------------------------------------------------------
.text:0000197E
.text:0000197E loc_197E:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x):loc_19E6j
.text:0000197E                 mov     edx, [ebp+var_124]
.text:00001984                 add     edx, 1
.text:00001987                 mov     [ebp+var_124], edx
.text:0000198D
.text:0000198D loc_198D:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+6D4j
.text:0000198D                 mov     eax, [ebp+var_12C]
.text:00001993                 mov     ecx, [ebp+var_124]
.text:00001999                 cmp     ecx, [eax+8]
.text:0000199C                 jge     short loc_19E8
.text:0000199E                 mov     edx, [ebp+var_12C]
.text:000019A4                 mov     eax, [edx+4]
.text:000019A7                 add     eax, [ebp+var_124]
.text:000019AD                 mov     esi, esp
.text:000019AF                 push    eax             ; nIDDlgItem
.text:000019B0                 mov     ecx, [ebp+hWnd]
.text:000019B3                 push    ecx             ; hDlg
.text:000019B4                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text:000019BA                 cmp     esi, esp
.text:000019BC                 call    __RTC_CheckEsp
.text:000019C1                 mov     [ebp+var_128], eax
.text:000019C7                 cmp     [ebp+var_128], 0
.text:000019CE                 jz      short loc_19E6
.text:000019D0                 mov     esi, esp
.text:000019D2                 mov     edx, [ebp+var_128]
.text:000019D8                 push    edx             ; hWnd
.text:000019D9                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:000019DF                 cmp     esi, esp
.text:000019E1                 call    __RTC_CheckEsp
.text:000019E6
.text:000019E6 loc_19E6:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+726j
.text:000019E6                 jmp     short loc_197E
.text:000019E8 ; ---------------------------------------------------------------------------
.text:000019E8
.text:000019E8 loc_19E8:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+6F4j
.text:000019E8                 mov     eax, [ebp+var_12C]
.text:000019EE                 push    eax
.text:000019EF                 push    offset _dp
.text:000019F4                 call    _winctrl_rem_shortcuts
.text:000019F9                 add     esp, 8
.text:000019FC                 mov     ecx, [ebp+var_12C]
.text:00001A02                 push    ecx
.text:00001A03                 push    offset _ctrls_panel
.text:00001A08                 call    _winctrl_remove
.text:00001A0D                 add     esp, 8
.text:00001A10                 mov     edx, [ebp+var_12C]
.text:00001A16                 mov     eax, [edx+1Ch]
.text:00001A19                 push    eax
.text:00001A1A                 call    _safefree
.text:00001A1F                 add     esp, 4
.text:00001A22                 mov     ecx, [ebp+var_12C]
.text:00001A28                 push    ecx
.text:00001A29                 call    _safefree
.text:00001A2E                 add     esp, 4
.text:00001A31                 jmp     loc_1950
.text:00001A36 ; ---------------------------------------------------------------------------
.text:00001A36
.text:00001A36 loc_1A36:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+6C4j
.text:00001A36                 mov     edx, [ebp+var_B0]
.text:00001A3C                 push    edx
.text:00001A3D                 mov     eax, [ebp+hWnd]
.text:00001A40                 push    eax
.text:00001A41                 call    _create_controls
.text:00001A46                 add     esp, 8
.text:00001A49                 push    offset _dp
.text:00001A4E                 push    0
.text:00001A50                 call    _dlg_refresh
.text:00001A55                 add     esp, 8
.text:00001A58                 mov     esi, esp
.text:00001A5A                 push    0               ; lParam
.text:00001A5C                 push    1               ; wParam
.text:00001A5E                 push    0Bh             ; Msg
.text:00001A60                 mov     ecx, [ebp+hWnd]
.text:00001A63                 push    ecx             ; hWnd
.text:00001A64                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001A6A                 cmp     esi, esp
.text:00001A6C                 call    __RTC_CheckEsp
.text:00001A71                 mov     esi, esp
.text:00001A73                 push    1               ; bErase
.text:00001A75                 push    0               ; lpRect
.text:00001A77                 mov     edx, [ebp+hWnd]
.text:00001A7A                 push    edx             ; hWnd
.text:00001A7B                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:00001A81                 cmp     esi, esp
.text:00001A83                 call    __RTC_CheckEsp
.text:00001A88                 mov     esi, esp
.text:00001A8A                 mov     eax, [ebp+arg_C]
.text:00001A8D                 mov     ecx, [eax]
.text:00001A8F                 push    ecx             ; hWnd
.text:00001A90                 call    dword ptr ds:__imp__SetFocus@4 ; SetFocus(x)
.text:00001A96                 cmp     esi, esp
.text:00001A98                 call    __RTC_CheckEsp
.text:00001A9D                 xor     eax, eax
.text:00001A9F                 jmp     loc_1B88
.text:00001AA4 ; ---------------------------------------------------------------------------
.text:00001AA4
.text:00001AA4 loc_1AA4:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+606j
.text:00001AA4                                         ; GenericMainDlgProc(x,x,x,x)+616j
.text:00001AA4                 jmp     loc_1B86
.text:00001AA9 ; ---------------------------------------------------------------------------
.text:00001AA9
.text:00001AA9 loc_1AA9:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+6Dj
.text:00001AA9                                         ; GenericMainDlgProc(x,x,x,x)+8Ej
.text:00001AA9                 mov     esi, esp
.text:00001AAB                 push    0FFFFFFEBh      ; nIndex
.text:00001AAD                 mov     edx, [ebp+hWnd]
.text:00001AB0                 push    edx             ; hWnd
.text:00001AB1                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:00001AB7                 cmp     esi, esp
.text:00001AB9                 call    __RTC_CheckEsp
.text:00001ABE                 cmp     eax, 1
.text:00001AC1                 jnz     short loc_1B17
.text:00001AC3                 mov     eax, [ebp+arg_C]
.text:00001AC6                 push    eax
.text:00001AC7                 mov     ecx, [ebp+arg_8]
.text:00001ACA                 push    ecx
.text:00001ACB                 mov     edx, [ebp+arg_4]
.text:00001ACE                 push    edx
.text:00001ACF                 push    offset _dp
.text:00001AD4                 call    _winctrl_handle_command
.text:00001AD9                 add     esp, 10h
.text:00001ADC                 mov     [ebp+var_2C], eax
.text:00001ADF                 cmp     ds:dword_C8, 0
.text:00001AE6                 jz      short loc_1B15
.text:00001AE8                 mov     esi, esp
.text:00001AEA                 call    dword ptr ds:__imp__GetCapture@0 ; GetCapture()
.text:00001AF0                 cmp     esi, esp
.text:00001AF2                 call    __RTC_CheckEsp
.text:00001AF7                 cmp     eax, [ebp+hWnd]
.text:00001AFA                 jz      short loc_1B15
.text:00001AFC                 xor     eax, eax
.text:00001AFE                 cmp     ds:dword_CC, 0
.text:00001B05                 setnz   al
.text:00001B08                 push    eax             ; dwNewLong
.text:00001B09                 mov     ecx, [ebp+hWnd]
.text:00001B0C                 push    ecx             ; hWnd
.text:00001B0D                 call    _SaneEndDialog
.text:00001B12                 add     esp, 8
.text:00001B15
.text:00001B15 loc_1B15:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+83Ej
.text:00001B15                                         ; GenericMainDlgProc(x,x,x,x)+852j
.text:00001B15                 jmp     short loc_1B1E
.text:00001B17 ; ---------------------------------------------------------------------------
.text:00001B17
.text:00001B17 loc_1B17:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+819j
.text:00001B17                 mov     [ebp+var_2C], 0
.text:00001B1E
.text:00001B1E loc_1B1E:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x):loc_1B15j
.text:00001B1E                 mov     eax, [ebp+var_2C]
.text:00001B21                 jmp     short loc_1B88
.text:00001B23 ; ---------------------------------------------------------------------------
.text:00001B23
.text:00001B23 loc_1B23:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+40j
.text:00001B23                 mov     edx, [ebp+arg_C]
.text:00001B26                 mov     eax, [edx+8]
.text:00001B29                 push    eax
.text:00001B2A                 mov     ecx, [ebp+hWnd]
.text:00001B2D                 push    ecx
.text:00001B2E                 push    offset _dp
.text:00001B33                 call    _winctrl_context_help
.text:00001B38                 add     esp, 0Ch
.text:00001B3B                 test    eax, eax
.text:00001B3D                 jnz     short loc_1B50
.text:00001B3F                 mov     esi, esp
.text:00001B41                 push    0               ; uType
.text:00001B43                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:00001B49                 cmp     esi, esp
.text:00001B4B                 call    __RTC_CheckEsp
.text:00001B50
.text:00001B50 loc_1B50:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+895j
.text:00001B50                 jmp     short loc_1B86
.text:00001B52 ; ---------------------------------------------------------------------------
.text:00001B52
.text:00001B52 loc_1B52:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+5Aj
.text:00001B52                 mov     edx, [ebp+hWnd]
.text:00001B55                 push    edx
.text:00001B56                 call    _quit_help
.text:00001B5B                 add     esp, 4
.text:00001B5E                 push    0               ; dwNewLong
.text:00001B60                 mov     eax, [ebp+hWnd]
.text:00001B63                 push    eax             ; hWnd
.text:00001B64                 call    _SaneEndDialog
.text:00001B69                 add     esp, 8
.text:00001B6C                 xor     eax, eax
.text:00001B6E                 jmp     short loc_1B88
.text:00001B70 ; ---------------------------------------------------------------------------
.text:00001B70
.text:00001B70 loc_1B70:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+4Dj
.text:00001B70                 cmp     [ebp+arg_8], 2
.text:00001B74                 jnz     short loc_1B82
.text:00001B76                 mov     ecx, [ebp+hWnd]
.text:00001B79                 push    ecx             ; hWnd
.text:00001B7A                 call    _force_normal
.text:00001B7F                 add     esp, 4
.text:00001B82
.text:00001B82 loc_1B82:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+8CCj
.text:00001B82                 xor     eax, eax
.text:00001B84                 jmp     short loc_1B88
.text:00001B86 ; ---------------------------------------------------------------------------
.text:00001B86
.text:00001B86 loc_1B86:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x):loc_1898j
.text:00001B86                                         ; GenericMainDlgProc(x,x,x,x):loc_1AA4j ...
.text:00001B86                 xor     eax, eax
.text:00001B88
.text:00001B88 loc_1B88:                               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+5BAj
.text:00001B88                                         ; GenericMainDlgProc(x,x,x,x)+7F7j ...
.text:00001B88                 push    edx
.text:00001B89                 mov     ecx, ebp
.text:00001B8B                 push    eax
.text:00001B8C                 lea     edx, $LN52
.text:00001B92                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001B97                 pop     eax
.text:00001B98                 pop     edx
.text:00001B99                 pop     edi
.text:00001B9A                 pop     esi
.text:00001B9B                 mov     ecx, [ebp+var_4]
.text:00001B9E                 xor     ecx, ebp
.text:00001BA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001BA5                 add     esp, 134h
.text:00001BAB                 cmp     ebp, esp
.text:00001BAD                 call    __RTC_CheckEsp
.text:00001BB2                 mov     esp, ebp
.text:00001BB4                 pop     ebp
.text:00001BB5                 retn    10h
.text:00001BB5 _GenericMainDlgProc@16 endp
.text:00001BB5
.text:00001BB5 ; ---------------------------------------------------------------------------
.text:00001BB8 $LN52           dd 6                    ; DATA XREF: GenericMainDlgProc(x,x,x,x)+8E4o
.text:00001BBC                 dd offset $LN51
.text:00001BC0 $LN51           dd 0FFFFFFDCh, 14h      ; DATA XREF: .text:00001BBCo
.text:00001BC8                 dd offset $LN45         ; "tvfaff"
.text:00001BCC                 dd 0FFFFFFBCh, 10h
.text:00001BD4                 dd offset $LN46         ; "rs"
.text:00001BD8                 dd 0FFFFFFA4h, 10h
.text:00001BE0                 dd offset $LN47         ; "rd"
.text:00001BE4                 dd 0FFFFFF8Ch, 10h
.text:00001BEC                 dd offset $LN48         ; "r"
.text:00001BF0                 dd 0FFFFFF2Ch, 28h
.text:00001BF8                 dd offset $LN49         ; "item"
.text:00001BFC                 dd 0FFFFFEE4h, 40h
.text:00001C04                 dd offset $LN50         ; "buffer"
.text:00001C08 $LN50           db 'buffer',0           ; DATA XREF: .text:00001C04o
.text:00001C0F $LN49           db 'item',0             ; DATA XREF: .text:00001BF8o
.text:00001C14 $LN48           db 'r',0                ; DATA XREF: .text:00001BECo
.text:00001C16 $LN47           db 'rd',0               ; DATA XREF: .text:00001BE0o
.text:00001C19 $LN46           db 'rs',0               ; DATA XREF: .text:00001BD4o
.text:00001C1C $LN45           db 'tvfaff',0           ; DATA XREF: .text:00001BC8o
.text:00001C23                 align 8
.text:00001C28
.text:00001C28 ; =============== S U B R O U T I N E =======================================
.text:00001C28
.text:00001C28 ; Attributes: bp-based frame
.text:00001C28
.text:00001C28 ; int __cdecl SaneEndDialog(HWND hWnd, LONG dwNewLong)
.text:00001C28 _SaneEndDialog  proc near               ; CODE XREF: GenericMainDlgProc(x,x,x,x)+5E8p
.text:00001C28                                         ; GenericMainDlgProc(x,x,x,x)+865p ...
.text:00001C28
.text:00001C28 hWnd            = dword ptr  8
.text:00001C28 dwNewLong       = dword ptr  0Ch
.text:00001C28
.text:00001C28                 push    ebp
.text:00001C29                 mov     ebp, esp
.text:00001C2B                 push    esi
.text:00001C2C                 mov     esi, esp
.text:00001C2E                 mov     eax, [ebp+dwNewLong]
.text:00001C31                 push    eax             ; dwNewLong
.text:00001C32                 push    22h ; '"'       ; nIndex
.text:00001C34                 mov     ecx, [ebp+hWnd]
.text:00001C37                 push    ecx             ; hWnd
.text:00001C38                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00001C3E                 cmp     esi, esp
.text:00001C40                 call    __RTC_CheckEsp
.text:00001C45                 mov     esi, esp
.text:00001C47                 push    1               ; dwNewLong
.text:00001C49                 push    1Eh             ; nIndex
.text:00001C4B                 mov     edx, [ebp+hWnd]
.text:00001C4E                 push    edx             ; hWnd
.text:00001C4F                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00001C55                 cmp     esi, esp
.text:00001C57                 call    __RTC_CheckEsp
.text:00001C5C                 pop     esi
.text:00001C5D                 cmp     ebp, esp
.text:00001C5F                 call    __RTC_CheckEsp
.text:00001C64                 pop     ebp
.text:00001C65                 retn
.text:00001C65 _SaneEndDialog  endp
.text:00001C65
.text:00001C65 ; ---------------------------------------------------------------------------
.text:00001C66                 align 4
.text:00001C68
.text:00001C68 ; =============== S U B R O U T I N E =======================================
.text:00001C68
.text:00001C68 ; Attributes: bp-based frame
.text:00001C68
.text:00001C68 ; int __cdecl treeview_insert(int, int, char *Str, int)
.text:00001C68 _treeview_insert proc near              ; CODE XREF: GenericMainDlgProc(x,x,x,x)+4E7p
.text:00001C68
.text:00001C68 var_58          = dword ptr -58h
.text:00001C68 var_54          = dword ptr -54h
.text:00001C68 var_50          = dword ptr -50h
.text:00001C68 lParam          = dword ptr -48h
.text:00001C68 var_44          = dword ptr -44h
.text:00001C68 var_40          = dword ptr -40h
.text:00001C68 var_30          = dword ptr -30h
.text:00001C68 var_2C          = dword ptr -2Ch
.text:00001C68 var_1C          = dword ptr -1Ch
.text:00001C68 arg_0           = dword ptr  8
.text:00001C68 arg_4           = dword ptr  0Ch
.text:00001C68 Str             = dword ptr  10h
.text:00001C68 arg_C           = dword ptr  14h
.text:00001C68
.text:00001C68                 push    ebp
.text:00001C69                 mov     ebp, esp
.text:00001C6B                 sub     esp, 58h
.text:00001C6E                 push    esi
.text:00001C6F                 push    edi
.text:00001C70                 lea     edi, [ebp+var_58]
.text:00001C73                 mov     ecx, 16h
.text:00001C78                 mov     eax, 0CCCCCCCCh
.text:00001C7D                 rep stosd
.text:00001C7F                 cmp     [ebp+arg_4], 0
.text:00001C83                 jle     short loc_1C93
.text:00001C85                 mov     eax, [ebp+arg_4]
.text:00001C88                 mov     ecx, [ebp+arg_0]
.text:00001C8B                 mov     edx, [ecx+eax*4]
.text:00001C8E                 mov     [ebp+var_58], edx
.text:00001C91                 jmp     short loc_1C9A
.text:00001C93 ; ---------------------------------------------------------------------------
.text:00001C93
.text:00001C93 loc_1C93:                               ; CODE XREF: _treeview_insert+1Bj
.text:00001C93                 mov     [ebp+var_58], 0FFFF0000h
.text:00001C9A
.text:00001C9A loc_1C9A:                               ; CODE XREF: _treeview_insert+29j
.text:00001C9A                 mov     eax, [ebp+var_58]
.text:00001C9D                 mov     [ebp+lParam], eax
.text:00001CA0                 mov     ecx, [ebp+arg_4]
.text:00001CA3                 mov     edx, [ebp+arg_0]
.text:00001CA6                 mov     eax, [edx+ecx*4+4]
.text:00001CAA                 mov     [ebp+var_44], eax
.text:00001CAD                 mov     [ebp+var_40], 5
.text:00001CB4                 mov     ecx, [ebp+Str]
.text:00001CB7                 mov     [ebp+var_30], ecx
.text:00001CBA                 mov     edx, [ebp+Str]
.text:00001CBD                 push    edx             ; Str
.text:00001CBE                 call    _strlen
.text:00001CC3                 add     esp, 4
.text:00001CC6                 add     eax, 1
.text:00001CC9                 mov     [ebp+var_2C], eax
.text:00001CCC                 mov     eax, [ebp+arg_C]
.text:00001CCF                 mov     [ebp+var_1C], eax
.text:00001CD2                 mov     esi, esp
.text:00001CD4                 lea     ecx, [ebp+lParam]
.text:00001CD7                 push    ecx             ; lParam
.text:00001CD8                 push    0               ; wParam
.text:00001CDA                 push    1100h           ; Msg
.text:00001CDF                 mov     edx, [ebp+arg_0]
.text:00001CE2                 mov     eax, [edx]
.text:00001CE4                 push    eax             ; hWnd
.text:00001CE5                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001CEB                 cmp     esi, esp
.text:00001CED                 call    __RTC_CheckEsp
.text:00001CF2                 mov     [ebp+var_54], eax
.text:00001CF5                 cmp     [ebp+arg_4], 0
.text:00001CF9                 jle     short loc_1D2C
.text:00001CFB                 mov     esi, esp
.text:00001CFD                 mov     ecx, [ebp+arg_4]
.text:00001D00                 mov     edx, [ebp+arg_0]
.text:00001D03                 mov     eax, [edx+ecx*4]
.text:00001D06                 push    eax             ; lParam
.text:00001D07                 xor     ecx, ecx
.text:00001D09                 cmp     [ebp+arg_4], 1
.text:00001D0D                 setle   cl
.text:00001D10                 add     ecx, 1
.text:00001D13                 push    ecx             ; wParam
.text:00001D14                 push    1102h           ; Msg
.text:00001D19                 mov     edx, [ebp+arg_0]
.text:00001D1C                 mov     eax, [edx]
.text:00001D1E                 push    eax             ; hWnd
.text:00001D1F                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001D25                 cmp     esi, esp
.text:00001D27                 call    __RTC_CheckEsp
.text:00001D2C
.text:00001D2C loc_1D2C:                               ; CODE XREF: _treeview_insert+91j
.text:00001D2C                 mov     ecx, [ebp+arg_4]
.text:00001D2F                 mov     edx, [ebp+arg_0]
.text:00001D32                 mov     eax, [ebp+var_54]
.text:00001D35                 mov     [edx+ecx*4+4], eax
.text:00001D39                 mov     ecx, [ebp+arg_4]
.text:00001D3C                 add     ecx, 1
.text:00001D3F                 mov     [ebp+var_50], ecx
.text:00001D42                 jmp     short loc_1D4D
.text:00001D44 ; ---------------------------------------------------------------------------
.text:00001D44
.text:00001D44 loc_1D44:                               ; CODE XREF: _treeview_insert+F9j
.text:00001D44                 mov     edx, [ebp+var_50]
.text:00001D47                 add     edx, 1
.text:00001D4A                 mov     [ebp+var_50], edx
.text:00001D4D
.text:00001D4D loc_1D4D:                               ; CODE XREF: _treeview_insert+DAj
.text:00001D4D                 cmp     [ebp+var_50], 4
.text:00001D51                 jge     short loc_1D63
.text:00001D53                 mov     eax, [ebp+var_50]
.text:00001D56                 mov     ecx, [ebp+arg_0]
.text:00001D59                 mov     dword ptr [ecx+eax*4+4], 0
.text:00001D61                 jmp     short loc_1D44
.text:00001D63 ; ---------------------------------------------------------------------------
.text:00001D63
.text:00001D63 loc_1D63:                               ; CODE XREF: _treeview_insert+E9j
.text:00001D63                 mov     eax, [ebp+var_54]
.text:00001D66                 push    edx
.text:00001D67                 mov     ecx, ebp
.text:00001D69                 push    eax
.text:00001D6A                 lea     edx, $LN11_0
.text:00001D70                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D75                 pop     eax
.text:00001D76                 pop     edx
.text:00001D77                 pop     edi
.text:00001D78                 pop     esi
.text:00001D79                 add     esp, 58h
.text:00001D7C                 cmp     ebp, esp
.text:00001D7E                 call    __RTC_CheckEsp
.text:00001D83                 mov     esp, ebp
.text:00001D85                 pop     ebp
.text:00001D86                 retn
.text:00001D86 _treeview_insert endp
.text:00001D86
.text:00001D86 ; ---------------------------------------------------------------------------
.text:00001D87                 align 4
.text:00001D88 $LN11_0         dd 1                    ; DATA XREF: _treeview_insert+102o
.text:00001D8C                 dd offset $LN10_0
.text:00001D90 $LN10_0         dd 0FFFFFFB8h, 44h      ; DATA XREF: .text:00001D8Co
.text:00001D98                 dd offset $LN9_0
.text:00001D9C $LN9_0          dd 736E69h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001D98o
.text:00001DA8
.text:00001DA8 ; =============== S U B R O U T I N E =======================================
.text:00001DA8
.text:00001DA8 ; Attributes: bp-based frame
.text:00001DA8
.text:00001DA8 _create_controls proc near              ; CODE XREF: GenericMainDlgProc(x,x,x,x)+A5p
.text:00001DA8                                         ; GenericMainDlgProc(x,x,x,x)+799p
.text:00001DA8
.text:00001DA8 var_44          = dword ptr -44h
.text:00001DA8 var_40          = dword ptr -40h
.text:00001DA8 var_38          = dword ptr -38h
.text:00001DA8 var_30          = dword ptr -30h
.text:00001DA8 var_28          = byte ptr -28h
.text:00001DA8 arg_0           = dword ptr  8
.text:00001DA8 arg_4           = dword ptr  0Ch
.text:00001DA8
.text:00001DA8                 push    ebp
.text:00001DA9                 mov     ebp, esp
.text:00001DAB                 sub     esp, 44h
.text:00001DAE                 push    edi
.text:00001DAF                 lea     edi, [ebp+var_44]
.text:00001DB2                 mov     ecx, 11h
.text:00001DB7                 mov     eax, 0CCCCCCCCh
.text:00001DBC                 rep stosd
.text:00001DBE                 mov     eax, [ebp+arg_4]
.text:00001DC1                 movsx   ecx, byte ptr [eax]
.text:00001DC4                 test    ecx, ecx
.text:00001DC6                 jnz     short loc_1DF1
.text:00001DC8                 push    0EBh ; 'd'
.text:00001DCD                 push    3
.text:00001DCF                 push    3
.text:00001DD1                 mov     edx, [ebp+arg_0]
.text:00001DD4                 push    edx
.text:00001DD5                 lea     eax, [ebp+var_28]
.text:00001DD8                 push    eax
.text:00001DD9                 call    _ctlposinit
.text:00001DDE                 add     esp, 14h
.text:00001DE1                 mov     [ebp+var_40], offset _ctrls_base
.text:00001DE8                 mov     [ebp+var_38], 3F1h
.text:00001DEF                 jmp     short loc_1E15
.text:00001DF1 ; ---------------------------------------------------------------------------
.text:00001DF1
.text:00001DF1 loc_1DF1:                               ; CODE XREF: _create_controls+1Ej
.text:00001DF1                 push    0Dh
.text:00001DF3                 push    3
.text:00001DF5                 push    64h ; 'd'
.text:00001DF7                 mov     ecx, [ebp+arg_0]
.text:00001DFA                 push    ecx
.text:00001DFB                 lea     edx, [ebp+var_28]
.text:00001DFE                 push    edx
.text:00001DFF                 call    _ctlposinit
.text:00001E04                 add     esp, 14h
.text:00001E07                 mov     [ebp+var_40], offset _ctrls_panel
.text:00001E0E                 mov     [ebp+var_38], 411h
.text:00001E15
.text:00001E15 loc_1E15:                               ; CODE XREF: _create_controls+47j
.text:00001E15                 mov     [ebp+var_30], 0FFFFFFFFh
.text:00001E1C
.text:00001E1C loc_1E1C:                               ; CODE XREF: _create_controls+C2j
.text:00001E1C                 mov     eax, [ebp+var_30]
.text:00001E1F                 push    eax
.text:00001E20                 mov     ecx, [ebp+arg_4]
.text:00001E23                 push    ecx
.text:00001E24                 mov     edx, ds:_ctrlbox
.text:00001E2A                 push    edx
.text:00001E2B                 call    _ctrl_find_path
.text:00001E30                 add     esp, 0Ch
.text:00001E33                 mov     [ebp+var_30], eax
.text:00001E36                 cmp     [ebp+var_30], 0
.text:00001E3A                 jl      short loc_1E6C
.text:00001E3C                 mov     eax, ds:_ctrlbox
.text:00001E41                 mov     ecx, [eax+8]
.text:00001E44                 mov     edx, [ebp+var_30]
.text:00001E47                 mov     eax, [ecx+edx*4]
.text:00001E4A                 mov     [ebp+var_44], eax
.text:00001E4D                 lea     ecx, [ebp+var_38]
.text:00001E50                 push    ecx
.text:00001E51                 mov     edx, [ebp+var_44]
.text:00001E54                 push    edx
.text:00001E55                 lea     eax, [ebp+var_28]
.text:00001E58                 push    eax
.text:00001E59                 mov     ecx, [ebp+var_40]
.text:00001E5C                 push    ecx
.text:00001E5D                 push    offset _dp
.text:00001E62                 call    _winctrl_layout
.text:00001E67                 add     esp, 14h
.text:00001E6A                 jmp     short loc_1E1C
.text:00001E6C ; ---------------------------------------------------------------------------
.text:00001E6C
.text:00001E6C loc_1E6C:                               ; CODE XREF: _create_controls+92j
.text:00001E6C                 push    edx
.text:00001E6D                 mov     ecx, ebp
.text:00001E6F                 push    eax
.text:00001E70                 lea     edx, $LN10_1
.text:00001E76                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001E7B                 pop     eax
.text:00001E7C                 pop     edx
.text:00001E7D                 pop     edi
.text:00001E7E                 add     esp, 44h
.text:00001E81                 cmp     ebp, esp
.text:00001E83                 call    __RTC_CheckEsp
.text:00001E88                 mov     esp, ebp
.text:00001E8A                 pop     ebp
.text:00001E8B                 retn
.text:00001E8B _create_controls endp
.text:00001E8B
.text:00001E8B ; ---------------------------------------------------------------------------
.text:00001E8C $LN10_1         dd 2                    ; DATA XREF: _create_controls+C8o
.text:00001E90                 dd offset $LN9_1
.text:00001E94 $LN9_1          dd 0FFFFFFD8h, 24h      ; DATA XREF: .text:00001E90o
.text:00001E9C                 dd offset $LN7_0        ; "cp"
.text:00001EA0                 dd 0FFFFFFC8h, 4
.text:00001EA8                 dd offset $LN8_0        ; "base_id"
.text:00001EAC $LN8_0          db 'base_id',0          ; DATA XREF: .text:00001EA8o
.text:00001EB4 $LN7_0          db 'cp',0               ; DATA XREF: .text:00001E9Co
.text:00001EB7                 align 4
.text:00001EB8
.text:00001EB8 ; =============== S U B R O U T I N E =======================================
.text:00001EB8
.text:00001EB8 ; Attributes: bp-based frame
.text:00001EB8
.text:00001EB8                 public _do_reconfig
.text:00001EB8 _do_reconfig    proc near
.text:00001EB8
.text:00001EB8 var_C           = dword ptr -0Ch
.text:00001EB8 var_8           = dword ptr -8
.text:00001EB8 var_4           = dword ptr -4
.text:00001EB8 arg_4           = dword ptr  0Ch
.text:00001EB8
.text:00001EB8                 push    ebp
.text:00001EB9                 mov     ebp, esp
.text:00001EBB                 sub     esp, 0Ch
.text:00001EBE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001EC5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001ECC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001ED3                 mov     eax, dword ptr ds:_conf
.text:00001ED8                 push    eax
.text:00001ED9                 call    _conf_copy
.text:00001EDE                 add     esp, 4
.text:00001EE1                 mov     [ebp+var_4], eax
.text:00001EE4                 call    _ctrl_new_box
.text:00001EE9                 mov     ds:_ctrlbox, eax
.text:00001EEE                 push    2
.text:00001EF0                 mov     ecx, dword ptr ds:_conf
.text:00001EF6                 push    ecx
.text:00001EF7                 call    _conf_get_int
.text:00001EFC                 add     esp, 8
.text:00001EFF                 mov     [ebp+var_C], eax
.text:00001F02                 mov     edx, [ebp+arg_4]
.text:00001F05                 push    edx
.text:00001F06                 mov     eax, [ebp+var_C]
.text:00001F09                 push    eax
.text:00001F0A                 push    1
.text:00001F0C                 mov     ecx, ds:_ctrlbox
.text:00001F12                 push    ecx
.text:00001F13                 call    _setup_config_box
.text:00001F18                 add     esp, 10h
.text:00001F1B                 mov     edx, [ebp+var_C]
.text:00001F1E                 push    edx
.text:00001F1F                 push    1
.text:00001F21                 call    _has_help
.text:00001F26                 push    eax
.text:00001F27                 push    offset _dp
.text:00001F2C                 mov     eax, ds:_ctrlbox
.text:00001F31                 push    eax
.text:00001F32                 call    _win_setup_config_box
.text:00001F37                 add     esp, 14h
.text:00001F3A                 push    offset _dp
.text:00001F3F                 call    _dp_init
.text:00001F44                 add     esp, 4
.text:00001F47                 push    offset _ctrls_base
.text:00001F4C                 call    _winctrl_init
.text:00001F51                 add     esp, 4
.text:00001F54                 push    offset _ctrls_panel
.text:00001F59                 call    _winctrl_init
.text:00001F5E                 add     esp, 4
.text:00001F61                 push    offset _ctrls_base
.text:00001F66                 push    offset _dp
.text:00001F6B                 call    _dp_add_tree
.text:00001F70                 add     esp, 8
.text:00001F73                 push    offset _ctrls_panel
.text:00001F78                 push    offset _dp
.text:00001F7D                 call    _dp_add_tree
.text:00001F82                 add     esp, 8
.text:00001F85                 mov     ecx, dword ptr ds:_appname
.text:00001F8B                 push    ecx
.text:00001F8C                 push    offset $SG90597 ; "%s Reconfiguration"
.text:00001F91                 call    _dupprintf
.text:00001F96                 add     esp, 8
.text:00001F99                 mov     ds:lpString, eax
.text:00001F9E                 mov     edx, dword ptr ds:_appname
.text:00001FA4                 push    edx
.text:00001FA5                 push    offset $SG90598 ; "%s Error"
.text:00001FAA                 call    _dupprintf
.text:00001FAF                 add     esp, 8
.text:00001FB2                 mov     ds:dword_2C, eax
.text:00001FB7                 mov     eax, dword ptr ds:_conf
.text:00001FBC                 mov     ds:dword_30, eax
.text:00001FC1                 push    offset _dp
.text:00001FC6                 call    _dlg_auto_set_fixed_pitch_flag
.text:00001FCB                 add     esp, 4
.text:00001FCE                 mov     ds:byte_A3, 1
.text:00001FD5                 push    offset _GenericMainDlgProc@16 ; lpDialogFunc
.text:00001FDA                 push    0               ; hWndParent
.text:00001FDC                 push    offset byte_66  ; lpTemplateName
.text:00001FDE                 mov     ecx, dword ptr ds:_hinst
.text:00001FE4                 push    ecx             ; hInstance
.text:00001FE5                 call    _SaneDialogBox
.text:00001FEA                 add     esp, 10h
.text:00001FED                 mov     [ebp+var_8], eax
.text:00001FF0                 mov     edx, ds:_ctrlbox
.text:00001FF6                 push    edx
.text:00001FF7                 call    _ctrl_free_box
.text:00001FFC                 add     esp, 4
.text:00001FFF                 push    offset _ctrls_base
.text:00002004                 call    _winctrl_cleanup
.text:00002009                 add     esp, 4
.text:0000200C                 push    offset _ctrls_panel
.text:00002011                 call    _winctrl_cleanup
.text:00002016                 add     esp, 4
.text:00002019                 push    offset _dp
.text:0000201E                 call    _dp_cleanup
.text:00002023                 add     esp, 4
.text:00002026                 cmp     [ebp+var_8], 0
.text:0000202A                 jnz     short loc_203F
.text:0000202C                 mov     eax, [ebp+var_4]
.text:0000202F                 push    eax
.text:00002030                 mov     ecx, dword ptr ds:_conf
.text:00002036                 push    ecx
.text:00002037                 call    _conf_copy_into
.text:0000203C                 add     esp, 8
.text:0000203F
.text:0000203F loc_203F:                               ; CODE XREF: _do_reconfig+172j
.text:0000203F                 mov     edx, [ebp+var_4]
.text:00002042                 push    edx
.text:00002043                 call    _conf_free
.text:00002048                 add     esp, 4
.text:0000204B                 mov     eax, [ebp+var_8]
.text:0000204E                 add     esp, 0Ch
.text:00002051                 cmp     ebp, esp
.text:00002053                 call    __RTC_CheckEsp
.text:00002058                 mov     esp, ebp
.text:0000205A                 pop     ebp
.text:0000205B                 retn
.text:0000205B _do_reconfig    endp
.text:0000205B
.text:0000205B ; ---------------------------------------------------------------------------
.text:0000205C                 db 0Ch dup(0CCh)
.text:00002068
.text:00002068 ; =============== S U B R O U T I N E =======================================
.text:00002068
.text:00002068 ; Attributes: bp-based frame
.text:00002068
.text:00002068 ; int __cdecl logevent(int, char *Str)
.text:00002068                 public _logevent
.text:00002068 _logevent       proc near
.text:00002068
.text:00002068 var_88          = byte ptr -88h
.text:00002068 var_64          = dword ptr -64h
.text:00002068 Tm              = tm ptr -5Ch
.text:00002068 Buf             = byte ptr -30h
.text:00002068 var_4           = dword ptr -4
.text:00002068 Str             = dword ptr  0Ch
.text:00002068
.text:00002068                 push    ebp
.text:00002069                 mov     ebp, esp
.text:0000206B                 sub     esp, 88h
.text:00002071                 push    esi
.text:00002072                 push    edi
.text:00002073                 lea     edi, [ebp+var_88]
.text:00002079                 mov     ecx, 22h ; '"'
.text:0000207E                 mov     eax, 0CCCCCCCCh
.text:00002083                 rep stosd
.text:00002085                 mov     eax, dword ptr ds:___security_cookie
.text:0000208A                 xor     eax, ebp
.text:0000208C                 mov     [ebp+var_4], eax
.text:0000208F                 mov     eax, [ebp+Str]
.text:00002092                 push    eax
.text:00002093                 mov     ecx, dword ptr ds:_logctx
.text:00002099                 push    ecx
.text:0000209A                 call    _log_eventlog
.text:0000209F                 add     esp, 8
.text:000020A2                 mov     edx, ds:_nevents
.text:000020A8                 cmp     edx, ds:_negsize
.text:000020AE                 jl      short loc_20DA
.text:000020B0                 mov     eax, ds:_negsize
.text:000020B5                 add     eax, 40h ; '@'
.text:000020B8                 mov     ds:_negsize, eax
.text:000020BD                 push    4
.text:000020BF                 mov     ecx, ds:_negsize
.text:000020C5                 push    ecx
.text:000020C6                 mov     edx, ds:_events
.text:000020CC                 push    edx
.text:000020CD                 call    _saferealloc
.text:000020D2                 add     esp, 0Ch
.text:000020D5                 mov     ds:_events, eax
.text:000020DA
.text:000020DA loc_20DA:                               ; CODE XREF: _logevent+46j
.text:000020DA                 lea     eax, [ebp+var_88]
.text:000020E0                 push    eax
.text:000020E1                 call    _ltime
.text:000020E6                 add     esp, 4
.text:000020E9                 mov     ecx, 9
.text:000020EE                 mov     esi, eax
.text:000020F0                 lea     edi, [ebp+Tm]
.text:000020F3                 rep movsd
.text:000020F5                 lea     ecx, [ebp+Tm]
.text:000020F8                 push    ecx             ; Tm
.text:000020F9                 push    offset $SG90615 ; "%Y-%m-%d %H:%M:%S\t"
.text:000020FE                 push    28h ; '('       ; SizeInBytes
.text:00002100                 lea     edx, [ebp+Buf]
.text:00002103                 push    edx             ; Buf
.text:00002104                 call    _strftime
.text:00002109                 add     esp, 10h
.text:0000210C                 push    1
.text:0000210E                 lea     eax, [ebp+Buf]
.text:00002111                 push    eax             ; Str
.text:00002112                 call    _strlen
.text:00002117                 add     esp, 4
.text:0000211A                 mov     esi, eax
.text:0000211C                 mov     ecx, [ebp+Str]
.text:0000211F                 push    ecx             ; Str
.text:00002120                 call    _strlen
.text:00002125                 add     esp, 4
.text:00002128                 lea     edx, [esi+eax+1]
.text:0000212C                 push    edx
.text:0000212D                 call    _safemalloc
.text:00002132                 add     esp, 8
.text:00002135                 mov     ecx, ds:_nevents
.text:0000213B                 mov     edx, ds:_events
.text:00002141                 mov     [edx+ecx*4], eax
.text:00002144                 lea     eax, [ebp+Buf]
.text:00002147                 push    eax             ; Source
.text:00002148                 mov     ecx, ds:_nevents
.text:0000214E                 mov     edx, ds:_events
.text:00002154                 mov     eax, [edx+ecx*4]
.text:00002157                 push    eax             ; Dest
.text:00002158                 call    _strcpy
.text:0000215D                 add     esp, 8
.text:00002160                 mov     ecx, [ebp+Str]
.text:00002163                 push    ecx             ; Source
.text:00002164                 mov     edx, ds:_nevents
.text:0000216A                 mov     eax, ds:_events
.text:0000216F                 mov     ecx, [eax+edx*4]
.text:00002172                 push    ecx             ; Dest
.text:00002173                 call    _strcat
.text:00002178                 add     esp, 8
.text:0000217B                 cmp     dword ptr ds:_logbox, 0
.text:00002182                 jz      loc_2208
.text:00002188                 mov     esi, esp
.text:0000218A                 mov     edx, ds:_nevents
.text:00002190                 mov     eax, ds:_events
.text:00002195                 mov     ecx, [eax+edx*4]
.text:00002198                 push    ecx             ; lParam
.text:00002199                 push    0               ; wParam
.text:0000219B                 push    180h            ; Msg
.text:000021A0                 push    3E9h            ; nIDDlgItem
.text:000021A5                 mov     edx, dword ptr ds:_logbox
.text:000021AB                 push    edx             ; hDlg
.text:000021AC                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000021B2                 cmp     esi, esp
.text:000021B4                 call    __RTC_CheckEsp
.text:000021B9                 mov     esi, esp
.text:000021BB                 push    0               ; lParam
.text:000021BD                 push    0               ; wParam
.text:000021BF                 push    18Bh            ; Msg
.text:000021C4                 push    3E9h            ; nIDDlgItem
.text:000021C9                 mov     eax, dword ptr ds:_logbox
.text:000021CE                 push    eax             ; hDlg
.text:000021CF                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000021D5                 cmp     esi, esp
.text:000021D7                 call    __RTC_CheckEsp
.text:000021DC                 mov     [ebp+var_64], eax
.text:000021DF                 mov     esi, esp
.text:000021E1                 push    0               ; lParam
.text:000021E3                 mov     ecx, [ebp+var_64]
.text:000021E6                 sub     ecx, 1
.text:000021E9                 push    ecx             ; wParam
.text:000021EA                 push    197h            ; Msg
.text:000021EF                 push    3E9h            ; nIDDlgItem
.text:000021F4                 mov     edx, dword ptr ds:_logbox
.text:000021FA                 push    edx             ; hDlg
.text:000021FB                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00002201                 cmp     esi, esp
.text:00002203                 call    __RTC_CheckEsp
.text:00002208
.text:00002208 loc_2208:                               ; CODE XREF: _logevent+11Aj
.text:00002208                 mov     eax, ds:_nevents
.text:0000220D                 add     eax, 1
.text:00002210                 mov     ds:_nevents, eax
.text:00002215                 push    edx
.text:00002216                 mov     ecx, ebp
.text:00002218                 push    eax
.text:00002219                 lea     edx, $LN8_1
.text:0000221F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002224                 pop     eax
.text:00002225                 pop     edx
.text:00002226                 pop     edi
.text:00002227                 pop     esi
.text:00002228                 mov     ecx, [ebp+var_4]
.text:0000222B                 xor     ecx, ebp
.text:0000222D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002232                 add     esp, 88h
.text:00002238                 cmp     ebp, esp
.text:0000223A                 call    __RTC_CheckEsp
.text:0000223F                 mov     esp, ebp
.text:00002241                 pop     ebp
.text:00002242                 retn
.text:00002242 _logevent       endp
.text:00002242
.text:00002242 ; ---------------------------------------------------------------------------
.text:00002243                 align 4
.text:00002244 $LN8_1          dd 2                    ; DATA XREF: _logevent+1B1o
.text:00002248                 dd offset $LN7_1
.text:0000224C $LN7_1          dd 0FFFFFFD0h, 28h      ; DATA XREF: .text:00002248o
.text:00002254                 dd offset $LN5_0        ; "timebuf"
.text:00002258                 dd 0FFFFFFA4h, 24h
.text:00002260                 dd offset $LN6_0
.text:00002264 $LN6_0          db 74h, 6Dh, 0          ; DATA XREF: .text:00002260o
.text:00002267 $LN5_0          db 'timebuf',0          ; DATA XREF: .text:00002254o
.text:0000226F                 db 9 dup(0CCh)
.text:00002278
.text:00002278 ; =============== S U B R O U T I N E =======================================
.text:00002278
.text:00002278 ; Attributes: bp-based frame
.text:00002278
.text:00002278 ; int __cdecl showeventlog(HWND hWndParent)
.text:00002278                 public _showeventlog
.text:00002278 _showeventlog   proc near
.text:00002278
.text:00002278 hWndParent      = dword ptr  8
.text:00002278
.text:00002278                 push    ebp
.text:00002279                 mov     ebp, esp
.text:0000227B                 push    esi
.text:0000227C                 cmp     dword ptr ds:_logbox, 0
.text:00002283                 jnz     short loc_22C5
.text:00002285                 mov     esi, esp
.text:00002287                 push    0               ; dwInitParam
.text:00002289                 push    offset _LogProc@16 ; lpDialogFunc
.text:0000228E                 mov     eax, [ebp+hWndParent]
.text:00002291                 push    eax             ; hWndParent
.text:00002292                 push    offset byte_6E  ; lpTemplateName
.text:00002294                 mov     ecx, dword ptr ds:_hinst
.text:0000229A                 push    ecx             ; hInstance
.text:0000229B                 call    dword ptr ds:__imp__CreateDialogParamA@20 ; CreateDialogParamA(x,x,x,x,x)
.text:000022A1                 cmp     esi, esp
.text:000022A3                 call    __RTC_CheckEsp
.text:000022A8                 mov     dword ptr ds:_logbox, eax
.text:000022AD                 mov     esi, esp
.text:000022AF                 push    1               ; nCmdShow
.text:000022B1                 mov     edx, dword ptr ds:_logbox
.text:000022B7                 push    edx             ; hWnd
.text:000022B8                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:000022BE                 cmp     esi, esp
.text:000022C0                 call    __RTC_CheckEsp
.text:000022C5
.text:000022C5 loc_22C5:                               ; CODE XREF: _showeventlog+Bj
.text:000022C5                 mov     esi, esp
.text:000022C7                 mov     eax, dword ptr ds:_logbox
.text:000022CC                 push    eax             ; hWnd
.text:000022CD                 call    dword ptr ds:__imp__SetActiveWindow@4 ; SetActiveWindow(x)
.text:000022D3                 cmp     esi, esp
.text:000022D5                 call    __RTC_CheckEsp
.text:000022DA                 pop     esi
.text:000022DB                 cmp     ebp, esp
.text:000022DD                 call    __RTC_CheckEsp
.text:000022E2                 pop     ebp
.text:000022E3                 retn
.text:000022E3 _showeventlog   endp
.text:000022E3
.text:000022E3 ; ---------------------------------------------------------------------------
.text:000022E4                 align 8
.text:000022E8
.text:000022E8 ; =============== S U B R O U T I N E =======================================
.text:000022E8
.text:000022E8 ; Attributes: bp-based frame
.text:000022E8
.text:000022E8 ; INT_PTR __stdcall LogProc(HWND, UINT, WPARAM, LPARAM)
.text:000022E8 _LogProc@16     proc near               ; DATA XREF: _showeventlog+11o
.text:000022E8
.text:000022E8 var_34          = dword ptr -34h
.text:000022E8 var_30          = dword ptr -30h
.text:000022E8 Size            = dword ptr -2Ch
.text:000022E8 Str             = dword ptr -28h
.text:000022E8 Dst             = dword ptr -24h
.text:000022E8 var_20          = dword ptr -20h
.text:000022E8 var_1C          = dword ptr -1Ch
.text:000022E8 var_18          = dword ptr -18h
.text:000022E8 var_14          = dword ptr -14h
.text:000022E8 lParam          = dword ptr -10h
.text:000022E8 wParam          = dword ptr -0Ch
.text:000022E8 lpString        = dword ptr -8
.text:000022E8 var_4           = dword ptr -4
.text:000022E8 hWnd            = dword ptr  8
.text:000022E8 arg_4           = dword ptr  0Ch
.text:000022E8 arg_8           = dword ptr  10h
.text:000022E8
.text:000022E8                 push    ebp
.text:000022E9                 mov     ebp, esp
.text:000022EB                 sub     esp, 34h
.text:000022EE                 push    esi
.text:000022EF                 push    edi
.text:000022F0                 lea     edi, [ebp+var_34]
.text:000022F3                 mov     ecx, 0Dh
.text:000022F8                 mov     eax, 0CCCCCCCCh
.text:000022FD                 rep stosd
.text:000022FF                 mov     eax, [ebp+arg_4]
.text:00002302                 mov     [ebp+var_30], eax
.text:00002305                 cmp     [ebp+var_30], 10h
.text:00002309                 jz      loc_266F
.text:0000230F                 cmp     [ebp+var_30], 110h
.text:00002316                 jz      short loc_232A
.text:00002318                 cmp     [ebp+var_30], 111h
.text:0000231F                 jz      loc_23DC
.text:00002325                 jmp     loc_26B3
.text:0000232A ; ---------------------------------------------------------------------------
.text:0000232A
.text:0000232A loc_232A:                               ; CODE XREF: LogProc(x,x,x,x)+2Ej
.text:0000232A                 mov     ecx, dword ptr ds:_appname
.text:00002330                 push    ecx
.text:00002331                 push    offset $SG90209 ; "%s Event Log"
.text:00002336                 call    _dupprintf
.text:0000233B                 add     esp, 8
.text:0000233E                 mov     [ebp+lpString], eax
.text:00002341                 mov     esi, esp
.text:00002343                 mov     edx, [ebp+lpString]
.text:00002346                 push    edx             ; lpString
.text:00002347                 mov     eax, [ebp+hWnd]
.text:0000234A                 push    eax             ; hWnd
.text:0000234B                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:00002351                 cmp     esi, esp
.text:00002353                 call    __RTC_CheckEsp
.text:00002358                 mov     ecx, [ebp+lpString]
.text:0000235B                 push    ecx
.text:0000235C                 call    _safefree
.text:00002361                 add     esp, 4
.text:00002364                 mov     esi, esp
.text:00002366                 push    offset ?tabs@?4??LogProc@@9@9 ; lParam
.text:0000236B                 push    2               ; wParam
.text:0000236D                 push    192h            ; Msg
.text:00002372                 push    3E9h            ; nIDDlgItem
.text:00002377                 mov     edx, [ebp+hWnd]
.text:0000237A                 push    edx             ; hDlg
.text:0000237B                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00002381                 cmp     esi, esp
.text:00002383                 call    __RTC_CheckEsp
.text:00002388                 mov     [ebp+var_4], 0
.text:0000238F                 jmp     short loc_239A
.text:00002391 ; ---------------------------------------------------------------------------
.text:00002391
.text:00002391 loc_2391:                               ; CODE XREF: LogProc(x,x,x,x)+E8j
.text:00002391                 mov     eax, [ebp+var_4]
.text:00002394                 add     eax, 1
.text:00002397                 mov     [ebp+var_4], eax
.text:0000239A
.text:0000239A loc_239A:                               ; CODE XREF: LogProc(x,x,x,x)+A7j
.text:0000239A                 mov     ecx, [ebp+var_4]
.text:0000239D                 cmp     ecx, ds:_nevents
.text:000023A3                 jge     short loc_23D2
.text:000023A5                 mov     esi, esp
.text:000023A7                 mov     edx, [ebp+var_4]
.text:000023AA                 mov     eax, ds:_events
.text:000023AF                 mov     ecx, [eax+edx*4]
.text:000023B2                 push    ecx             ; lParam
.text:000023B3                 push    0               ; wParam
.text:000023B5                 push    180h            ; Msg
.text:000023BA                 push    3E9h            ; nIDDlgItem
.text:000023BF                 mov     edx, [ebp+hWnd]
.text:000023C2                 push    edx             ; hDlg
.text:000023C3                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000023C9                 cmp     esi, esp
.text:000023CB                 call    __RTC_CheckEsp
.text:000023D0                 jmp     short loc_2391
.text:000023D2 ; ---------------------------------------------------------------------------
.text:000023D2
.text:000023D2 loc_23D2:                               ; CODE XREF: LogProc(x,x,x,x)+BBj
.text:000023D2                 mov     eax, 1
.text:000023D7                 jmp     loc_26B5
.text:000023DC ; ---------------------------------------------------------------------------
.text:000023DC
.text:000023DC loc_23DC:                               ; CODE XREF: LogProc(x,x,x,x)+37j
.text:000023DC                 mov     eax, [ebp+arg_8]
.text:000023DF                 and     eax, 0FFFFh
.text:000023E4                 movzx   ecx, ax
.text:000023E7                 mov     [ebp+var_34], ecx
.text:000023EA                 cmp     [ebp+var_34], 0
.text:000023EE                 jle     loc_266B
.text:000023F4                 cmp     [ebp+var_34], 2
.text:000023F8                 jle     short loc_2408
.text:000023FA                 cmp     [ebp+var_34], 3EAh
.text:00002401                 jz      short loc_244F
.text:00002403                 jmp     loc_266B
.text:00002408 ; ---------------------------------------------------------------------------
.text:00002408
.text:00002408 loc_2408:                               ; CODE XREF: LogProc(x,x,x,x)+110j
.text:00002408                 mov     dword ptr ds:_logbox, 0
.text:00002412                 mov     esi, esp
.text:00002414                 mov     edx, [ebp+hWnd]
.text:00002417                 push    edx             ; hWnd
.text:00002418                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text:0000241E                 cmp     esi, esp
.text:00002420                 call    __RTC_CheckEsp
.text:00002425                 mov     esi, esp
.text:00002427                 push    eax             ; hWnd
.text:00002428                 call    dword ptr ds:__imp__SetActiveWindow@4 ; SetActiveWindow(x)
.text:0000242E                 cmp     esi, esp
.text:00002430                 call    __RTC_CheckEsp
.text:00002435                 mov     esi, esp
.text:00002437                 mov     eax, [ebp+hWnd]
.text:0000243A                 push    eax             ; hWnd
.text:0000243B                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:00002441                 cmp     esi, esp
.text:00002443                 call    __RTC_CheckEsp
.text:00002448                 xor     eax, eax
.text:0000244A                 jmp     loc_26B5
.text:0000244F ; ---------------------------------------------------------------------------
.text:0000244F
.text:0000244F loc_244F:                               ; CODE XREF: LogProc(x,x,x,x)+119j
.text:0000244F                 mov     ecx, [ebp+arg_8]
.text:00002452                 shr     ecx, 10h
.text:00002455                 and     ecx, 0FFFFh
.text:0000245B                 movzx   edx, cx
.text:0000245E                 test    edx, edx
.text:00002460                 jz      short loc_2479
.text:00002462                 mov     eax, [ebp+arg_8]
.text:00002465                 shr     eax, 10h
.text:00002468                 and     eax, 0FFFFh
.text:0000246D                 movzx   ecx, ax
.text:00002470                 cmp     ecx, 5
.text:00002473                 jnz     loc_2667
.text:00002479
.text:00002479 loc_2479:                               ; CODE XREF: LogProc(x,x,x,x)+178j
.text:00002479                 mov     esi, esp
.text:0000247B                 push    0               ; lParam
.text:0000247D                 push    0               ; wParam
.text:0000247F                 push    190h            ; Msg
.text:00002484                 push    3E9h            ; nIDDlgItem
.text:00002489                 mov     edx, [ebp+hWnd]
.text:0000248C                 push    edx             ; hDlg
.text:0000248D                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00002493                 cmp     esi, esp
.text:00002495                 call    __RTC_CheckEsp
.text:0000249A                 mov     [ebp+wParam], eax
.text:0000249D                 cmp     [ebp+wParam], 0
.text:000024A1                 jnz     short loc_24B9
.text:000024A3                 mov     esi, esp
.text:000024A5                 push    0               ; uType
.text:000024A7                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:000024AD                 cmp     esi, esp
.text:000024AF                 call    __RTC_CheckEsp
.text:000024B4                 jmp     loc_266B
.text:000024B9 ; ---------------------------------------------------------------------------
.text:000024B9
.text:000024B9 loc_24B9:                               ; CODE XREF: LogProc(x,x,x,x)+1B9j
.text:000024B9                 push    4
.text:000024BB                 mov     eax, [ebp+wParam]
.text:000024BE                 push    eax
.text:000024BF                 call    _safemalloc
.text:000024C4                 add     esp, 8
.text:000024C7                 mov     [ebp+lParam], eax
.text:000024CA                 cmp     [ebp+lParam], 0
.text:000024CE                 jz      loc_2667
.text:000024D4                 mov     esi, esp
.text:000024D6                 mov     ecx, [ebp+lParam]
.text:000024D9                 push    ecx             ; lParam
.text:000024DA                 mov     edx, [ebp+wParam]
.text:000024DD                 push    edx             ; wParam
.text:000024DE                 push    191h            ; Msg
.text:000024E3                 push    3E9h            ; nIDDlgItem
.text:000024E8                 mov     eax, [ebp+hWnd]
.text:000024EB                 push    eax             ; hDlg
.text:000024EC                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000024F2                 cmp     esi, esp
.text:000024F4                 call    __RTC_CheckEsp
.text:000024F9                 mov     [ebp+var_14], eax
.text:000024FC                 cmp     [ebp+var_14], 0
.text:00002500                 jnz     short loc_2518
.text:00002502                 mov     esi, esp
.text:00002504                 push    0               ; uType
.text:00002506                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:0000250C                 cmp     esi, esp
.text:0000250E                 call    __RTC_CheckEsp
.text:00002513                 jmp     loc_266B
.text:00002518 ; ---------------------------------------------------------------------------
.text:00002518
.text:00002518 loc_2518:                               ; CODE XREF: LogProc(x,x,x,x)+218j
.text:00002518                 mov     [ebp+var_1C], 0
.text:0000251F                 mov     [ebp+var_18], 0
.text:00002526                 jmp     short loc_2531
.text:00002528 ; ---------------------------------------------------------------------------
.text:00002528
.text:00002528 loc_2528:                               ; CODE XREF: LogProc(x,x,x,x)+275j
.text:00002528                 mov     ecx, [ebp+var_18]
.text:0000252B                 add     ecx, 1
.text:0000252E                 mov     [ebp+var_18], ecx
.text:00002531
.text:00002531 loc_2531:                               ; CODE XREF: LogProc(x,x,x,x)+23Ej
.text:00002531                 mov     edx, [ebp+var_18]
.text:00002534                 cmp     edx, [ebp+var_14]
.text:00002537                 jge     short loc_255F
.text:00002539                 mov     eax, [ebp+var_18]
.text:0000253C                 mov     ecx, [ebp+lParam]
.text:0000253F                 mov     edx, [ecx+eax*4]
.text:00002542                 mov     eax, ds:_events
.text:00002547                 mov     ecx, [eax+edx*4]
.text:0000254A                 push    ecx             ; Str
.text:0000254B                 call    _strlen
.text:00002550                 add     esp, 4
.text:00002553                 mov     edx, [ebp+var_1C]
.text:00002556                 lea     eax, [edx+eax+2]
.text:0000255A                 mov     [ebp+var_1C], eax
.text:0000255D                 jmp     short loc_2528
.text:0000255F ; ---------------------------------------------------------------------------
.text:0000255F
.text:0000255F loc_255F:                               ; CODE XREF: LogProc(x,x,x,x)+24Fj
.text:0000255F                 push    1
.text:00002561                 mov     ecx, [ebp+var_1C]
.text:00002564                 push    ecx
.text:00002565                 call    _safemalloc
.text:0000256A                 add     esp, 8
.text:0000256D                 mov     [ebp+var_20], eax
.text:00002570                 cmp     [ebp+var_20], 0
.text:00002574                 jz      loc_2619
.text:0000257A                 mov     edx, [ebp+var_20]
.text:0000257D                 mov     [ebp+Dst], edx
.text:00002580                 mov     [ebp+var_18], 0
.text:00002587                 jmp     short loc_2592
.text:00002589 ; ---------------------------------------------------------------------------
.text:00002589
.text:00002589 loc_2589:                               ; CODE XREF: LogProc(x,x,x,x)+30Fj
.text:00002589                 mov     eax, [ebp+var_18]
.text:0000258C                 add     eax, 1
.text:0000258F                 mov     [ebp+var_18], eax
.text:00002592
.text:00002592 loc_2592:                               ; CODE XREF: LogProc(x,x,x,x)+29Fj
.text:00002592                 mov     ecx, [ebp+var_18]
.text:00002595                 cmp     ecx, [ebp+var_14]
.text:00002598                 jge     short loc_25F9
.text:0000259A                 mov     edx, [ebp+var_18]
.text:0000259D                 mov     eax, [ebp+lParam]
.text:000025A0                 mov     ecx, [eax+edx*4]
.text:000025A3                 mov     edx, ds:_events
.text:000025A9                 mov     eax, [edx+ecx*4]
.text:000025AC                 mov     [ebp+Str], eax
.text:000025AF                 mov     ecx, [ebp+Str]
.text:000025B2                 push    ecx             ; Str
.text:000025B3                 call    _strlen
.text:000025B8                 add     esp, 4
.text:000025BB                 mov     [ebp+Size], eax
.text:000025BE                 mov     edx, [ebp+Size]
.text:000025C1                 push    edx             ; Size
.text:000025C2                 mov     eax, [ebp+Str]
.text:000025C5                 push    eax             ; Src
.text:000025C6                 mov     ecx, [ebp+Dst]
.text:000025C9                 push    ecx             ; Dst
.text:000025CA                 call    _memcpy
.text:000025CF                 add     esp, 0Ch
.text:000025D2                 mov     edx, [ebp+Dst]
.text:000025D5                 add     edx, [ebp+Size]
.text:000025D8                 mov     [ebp+Dst], edx
.text:000025DB                 push    2               ; Size
.text:000025DD                 push    offset ?sel_nl@?8??LogProc@@9@9 ; Src
.text:000025E2                 mov     eax, [ebp+Dst]
.text:000025E5                 push    eax             ; Dst
.text:000025E6                 call    _memcpy
.text:000025EB                 add     esp, 0Ch
.text:000025EE                 mov     ecx, [ebp+Dst]
.text:000025F1                 add     ecx, 2
.text:000025F4                 mov     [ebp+Dst], ecx
.text:000025F7                 jmp     short loc_2589
.text:000025F9 ; ---------------------------------------------------------------------------
.text:000025F9
.text:000025F9 loc_25F9:                               ; CODE XREF: LogProc(x,x,x,x)+2B0j
.text:000025F9                 push    1
.text:000025FB                 mov     edx, [ebp+var_1C]
.text:000025FE                 push    edx
.text:000025FF                 mov     eax, [ebp+var_20]
.text:00002602                 push    eax
.text:00002603                 push    0
.text:00002605                 call    _write_aclip
.text:0000260A                 add     esp, 10h
.text:0000260D                 mov     ecx, [ebp+var_20]
.text:00002610                 push    ecx
.text:00002611                 call    _safefree
.text:00002616                 add     esp, 4
.text:00002619
.text:00002619 loc_2619:                               ; CODE XREF: LogProc(x,x,x,x)+28Cj
.text:00002619                 mov     edx, [ebp+lParam]
.text:0000261C                 push    edx
.text:0000261D                 call    _safefree
.text:00002622                 add     esp, 4
.text:00002625                 mov     [ebp+var_18], 0
.text:0000262C                 jmp     short loc_2637
.text:0000262E ; ---------------------------------------------------------------------------
.text:0000262E
.text:0000262E loc_262E:                               ; CODE XREF: LogProc(x,x,x,x)+37Dj
.text:0000262E                 mov     eax, [ebp+var_18]
.text:00002631                 add     eax, 1
.text:00002634                 mov     [ebp+var_18], eax
.text:00002637
.text:00002637 loc_2637:                               ; CODE XREF: LogProc(x,x,x,x)+344j
.text:00002637                 mov     ecx, [ebp+var_18]
.text:0000263A                 cmp     ecx, ds:_nevents
.text:00002640                 jge     short loc_2667
.text:00002642                 mov     esi, esp
.text:00002644                 mov     edx, [ebp+var_18]
.text:00002647                 push    edx             ; lParam
.text:00002648                 push    0               ; wParam
.text:0000264A                 push    185h            ; Msg
.text:0000264F                 push    3E9h            ; nIDDlgItem
.text:00002654                 mov     eax, [ebp+hWnd]
.text:00002657                 push    eax             ; hDlg
.text:00002658                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:0000265E                 cmp     esi, esp
.text:00002660                 call    __RTC_CheckEsp
.text:00002665                 jmp     short loc_262E
.text:00002667 ; ---------------------------------------------------------------------------
.text:00002667
.text:00002667 loc_2667:                               ; CODE XREF: LogProc(x,x,x,x)+18Bj
.text:00002667                                         ; LogProc(x,x,x,x)+1E6j ...
.text:00002667                 xor     eax, eax
.text:00002669                 jmp     short loc_26B5
.text:0000266B ; ---------------------------------------------------------------------------
.text:0000266B
.text:0000266B loc_266B:                               ; CODE XREF: LogProc(x,x,x,x)+106j
.text:0000266B                                         ; LogProc(x,x,x,x)+11Bj ...
.text:0000266B                 xor     eax, eax
.text:0000266D                 jmp     short loc_26B5
.text:0000266F ; ---------------------------------------------------------------------------
.text:0000266F
.text:0000266F loc_266F:                               ; CODE XREF: LogProc(x,x,x,x)+21j
.text:0000266F                 mov     dword ptr ds:_logbox, 0
.text:00002679                 mov     esi, esp
.text:0000267B                 mov     ecx, [ebp+hWnd]
.text:0000267E                 push    ecx             ; hWnd
.text:0000267F                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text:00002685                 cmp     esi, esp
.text:00002687                 call    __RTC_CheckEsp
.text:0000268C                 mov     esi, esp
.text:0000268E                 push    eax             ; hWnd
.text:0000268F                 call    dword ptr ds:__imp__SetActiveWindow@4 ; SetActiveWindow(x)
.text:00002695                 cmp     esi, esp
.text:00002697                 call    __RTC_CheckEsp
.text:0000269C                 mov     esi, esp
.text:0000269E                 mov     edx, [ebp+hWnd]
.text:000026A1                 push    edx             ; hWnd
.text:000026A2                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:000026A8                 cmp     esi, esp
.text:000026AA                 call    __RTC_CheckEsp
.text:000026AF                 xor     eax, eax
.text:000026B1                 jmp     short loc_26B5
.text:000026B3 ; ---------------------------------------------------------------------------
.text:000026B3
.text:000026B3 loc_26B3:                               ; CODE XREF: LogProc(x,x,x,x)+3Dj
.text:000026B3                 xor     eax, eax
.text:000026B5
.text:000026B5 loc_26B5:                               ; CODE XREF: LogProc(x,x,x,x)+EFj
.text:000026B5                                         ; LogProc(x,x,x,x)+162j ...
.text:000026B5                 pop     edi
.text:000026B6                 pop     esi
.text:000026B7                 add     esp, 34h
.text:000026BA                 cmp     ebp, esp
.text:000026BC                 call    __RTC_CheckEsp
.text:000026C1                 mov     esp, ebp
.text:000026C3                 pop     ebp
.text:000026C4                 retn    10h
.text:000026C4 _LogProc@16     endp
.text:000026C4
.text:000026C4 ; ---------------------------------------------------------------------------
.text:000026C7                 align 4
.text:000026C8
.text:000026C8 ; =============== S U B R O U T I N E =======================================
.text:000026C8
.text:000026C8 ; Attributes: bp-based frame
.text:000026C8
.text:000026C8 ; int __cdecl showabout(HWND hWndParent)
.text:000026C8                 public _showabout
.text:000026C8 _showabout      proc near
.text:000026C8
.text:000026C8 hWndParent      = dword ptr  8
.text:000026C8
.text:000026C8                 push    ebp
.text:000026C9                 mov     ebp, esp
.text:000026CB                 push    esi
.text:000026CC                 mov     esi, esp
.text:000026CE                 push    0               ; dwInitParam
.text:000026D0                 push    offset _AboutProc@16 ; lpDialogFunc
.text:000026D5                 mov     eax, [ebp+hWndParent]
.text:000026D8                 push    eax             ; hWndParent
.text:000026D9                 push    offset TemplateName ; lpTemplateName
.text:000026DB                 mov     ecx, dword ptr ds:_hinst
.text:000026E1                 push    ecx             ; hInstance
.text:000026E2                 call    dword ptr ds:__imp__DialogBoxParamA@20 ; DialogBoxParamA(x,x,x,x,x)
.text:000026E8                 cmp     esi, esp
.text:000026EA                 call    __RTC_CheckEsp
.text:000026EF                 pop     esi
.text:000026F0                 cmp     ebp, esp
.text:000026F2                 call    __RTC_CheckEsp
.text:000026F7                 pop     ebp
.text:000026F8                 retn
.text:000026F8 _showabout      endp
.text:000026F8
.text:000026F8 ; ---------------------------------------------------------------------------
.text:000026F9                 db 0Fh dup(0CCh)
.text:00002708
.text:00002708 ; =============== S U B R O U T I N E =======================================
.text:00002708
.text:00002708 ; Attributes: bp-based frame
.text:00002708
.text:00002708                 public _verify_ssh_host_key
.text:00002708 _verify_ssh_host_key proc near
.text:00002708
.text:00002708 var_1C          = dword ptr -1Ch
.text:00002708 var_18          = dword ptr -18h
.text:00002708 var_14          = dword ptr -14h
.text:00002708 var_10          = dword ptr -10h
.text:00002708 var_C           = dword ptr -0Ch
.text:00002708 var_8           = dword ptr -8
.text:00002708 var_4           = dword ptr -4
.text:00002708 arg_4           = dword ptr  0Ch
.text:00002708 arg_8           = dword ptr  10h
.text:00002708 arg_C           = dword ptr  14h
.text:00002708 arg_10          = dword ptr  18h
.text:00002708 arg_14          = dword ptr  1Ch
.text:00002708
.text:00002708                 push    ebp
.text:00002709                 mov     ebp, esp
.text:0000270B                 sub     esp, 1Ch
.text:0000270E                 mov     eax, 0CCCCCCCCh
.text:00002713                 mov     [ebp+var_1C], eax
.text:00002716                 mov     [ebp+var_18], eax
.text:00002719                 mov     [ebp+var_14], eax
.text:0000271C                 mov     [ebp+var_10], eax
.text:0000271F                 mov     [ebp+var_C], eax
.text:00002722                 mov     [ebp+var_8], eax
.text:00002725                 mov     [ebp+var_4], eax
.text:00002728                 mov     eax, [ebp+arg_10]
.text:0000272B                 push    eax
.text:0000272C                 mov     ecx, [ebp+arg_C]
.text:0000272F                 push    ecx
.text:00002730                 mov     edx, [ebp+arg_8]
.text:00002733                 push    edx
.text:00002734                 mov     eax, [ebp+arg_4]
.text:00002737                 push    eax
.text:00002738                 call    _verify_host_key
.text:0000273D                 add     esp, 10h
.text:00002740                 mov     [ebp+var_4], eax
.text:00002743                 cmp     [ebp+var_4], 0
.text:00002747                 jnz     short loc_2758
.text:00002749                 mov     eax, 1
.text:0000274E                 jmp     loc_2908
.text:00002753 ; ---------------------------------------------------------------------------
.text:00002753                 jmp     loc_2906
.text:00002758 ; ---------------------------------------------------------------------------
.text:00002758
.text:00002758 loc_2758:                               ; CODE XREF: _verify_ssh_host_key+3Fj
.text:00002758                 cmp     [ebp+var_4], 2
.text:0000275C                 jnz     loc_2839
.text:00002762                 mov     ecx, dword ptr ds:_appname
.text:00002768                 push    ecx
.text:00002769                 mov     edx, [ebp+arg_14]
.text:0000276C                 push    edx
.text:0000276D                 mov     eax, [ebp+arg_C]
.text:00002770                 push    eax
.text:00002771                 mov     ecx, dword ptr ds:_appname
.text:00002777                 push    ecx
.text:00002778                 push    offset ?wrongmsg@?1??verify_ssh_host_key@@9@9 ; "WARNING - POTENTIAL SECURITY BREACH!\n\"...
.text:0000277D                 call    _dupprintf
.text:00002782                 add     esp, 14h
.text:00002785                 mov     [ebp+var_C], eax
.text:00002788                 mov     edx, dword ptr ds:_appname
.text:0000278E                 push    edx
.text:0000278F                 push    offset ?mbtitle@?1??verify_ssh_host_key@@9@9 ; "%s Security Alert"
.text:00002794                 call    _dupprintf
.text:00002799                 add     esp, 8
.text:0000279C                 mov     [ebp+var_10], eax
.text:0000279F                 push    2
.text:000027A1                 push    233h
.text:000027A6                 mov     eax, [ebp+var_10]
.text:000027A9                 push    eax
.text:000027AA                 mov     ecx, [ebp+var_C]
.text:000027AD                 push    ecx
.text:000027AE                 call    _message_box
.text:000027B3                 add     esp, 10h
.text:000027B6                 mov     [ebp+var_8], eax
.text:000027B9                 cmp     [ebp+var_8], 6
.text:000027BD                 jz      short loc_27E2
.text:000027BF                 cmp     [ebp+var_8], 7
.text:000027C3                 jz      short loc_27E2
.text:000027C5                 cmp     [ebp+var_8], 2
.text:000027C9                 jz      short loc_27E2
.text:000027CB                 push    321h            ; Line
.text:000027D0                 push    offset $SG90669 ; "..\\..\\windlg.c"
.text:000027D5                 push    offset $SG90670 ; "mbret==IDYES || mbret==IDNO || mbret==I"...
.text:000027DA                 call    __wassert
.text:000027DF ; ---------------------------------------------------------------------------
.text:000027DF                 add     esp, 0Ch
.text:000027E2
.text:000027E2 loc_27E2:                               ; CODE XREF: _verify_ssh_host_key+B5j
.text:000027E2                                         ; _verify_ssh_host_key+BBj ...
.text:000027E2                 mov     eax, [ebp+var_C]
.text:000027E5                 push    eax
.text:000027E6                 call    _safefree
.text:000027EB                 add     esp, 4
.text:000027EE                 mov     ecx, [ebp+var_10]
.text:000027F1                 push    ecx
.text:000027F2                 call    _safefree
.text:000027F7                 add     esp, 4
.text:000027FA                 cmp     [ebp+var_8], 6
.text:000027FE                 jnz     short loc_2824
.text:00002800                 mov     edx, [ebp+arg_10]
.text:00002803                 push    edx
.text:00002804                 mov     eax, [ebp+arg_C]
.text:00002807                 push    eax
.text:00002808                 mov     ecx, [ebp+arg_8]
.text:0000280B                 push    ecx
.text:0000280C                 mov     edx, [ebp+arg_4]
.text:0000280F                 push    edx
.text:00002810                 call    _store_host_key
.text:00002815                 add     esp, 10h
.text:00002818                 mov     eax, 1
.text:0000281D                 jmp     loc_2908
.text:00002822 ; ---------------------------------------------------------------------------
.text:00002822                 jmp     short loc_2834
.text:00002824 ; ---------------------------------------------------------------------------
.text:00002824
.text:00002824 loc_2824:                               ; CODE XREF: _verify_ssh_host_key+F6j
.text:00002824                 cmp     [ebp+var_8], 7
.text:00002828                 jnz     short loc_2834
.text:0000282A                 mov     eax, 1
.text:0000282F                 jmp     loc_2908
.text:00002834 ; ---------------------------------------------------------------------------
.text:00002834
.text:00002834 loc_2834:                               ; CODE XREF: _verify_ssh_host_key+11Aj
.text:00002834                                         ; _verify_ssh_host_key+120j
.text:00002834                 jmp     loc_2906
.text:00002839 ; ---------------------------------------------------------------------------
.text:00002839
.text:00002839 loc_2839:                               ; CODE XREF: _verify_ssh_host_key+54j
.text:00002839                 cmp     [ebp+var_4], 1
.text:0000283D                 jnz     loc_2906
.text:00002843                 mov     eax, dword ptr ds:_appname
.text:00002848                 push    eax
.text:00002849                 mov     ecx, [ebp+arg_14]
.text:0000284C                 push    ecx
.text:0000284D                 mov     edx, [ebp+arg_C]
.text:00002850                 push    edx
.text:00002851                 push    offset ?absentmsg@?1??verify_ssh_host_key@@9@9 ; `verify_ssh_host_key'::`2'::absentmsg
.text:00002856                 call    _dupprintf
.text:0000285B                 add     esp, 10h
.text:0000285E                 mov     [ebp+var_18], eax
.text:00002861                 mov     eax, dword ptr ds:_appname
.text:00002866                 push    eax
.text:00002867                 push    offset ?mbtitle@?1??verify_ssh_host_key@@9@9 ; "%s Security Alert"
.text:0000286C                 call    _dupprintf
.text:00002871                 add     esp, 8
.text:00002874                 mov     [ebp+var_1C], eax
.text:00002877                 push    1
.text:00002879                 push    233h
.text:0000287E                 mov     ecx, [ebp+var_1C]
.text:00002881                 push    ecx
.text:00002882                 mov     edx, [ebp+var_18]
.text:00002885                 push    edx
.text:00002886                 call    _message_box
.text:0000288B                 add     esp, 10h
.text:0000288E                 mov     [ebp+var_14], eax
.text:00002891                 cmp     [ebp+var_14], 6
.text:00002895                 jz      short loc_28BA
.text:00002897                 cmp     [ebp+var_14], 7
.text:0000289B                 jz      short loc_28BA
.text:0000289D                 cmp     [ebp+var_14], 2
.text:000028A1                 jz      short loc_28BA
.text:000028A3                 push    330h            ; Line
.text:000028A8                 push    offset $SG90680 ; "..\\..\\windlg.c"
.text:000028AD                 push    offset $SG90681 ; "mbret==IDYES || mbret==IDNO || mbret==I"...
.text:000028B2                 call    __wassert
.text:000028B7 ; ---------------------------------------------------------------------------
.text:000028B7                 add     esp, 0Ch
.text:000028BA
.text:000028BA loc_28BA:                               ; CODE XREF: _verify_ssh_host_key+18Dj
.text:000028BA                                         ; _verify_ssh_host_key+193j ...
.text:000028BA                 mov     ecx, [ebp+var_18]
.text:000028BD                 push    ecx
.text:000028BE                 call    _safefree
.text:000028C3                 add     esp, 4
.text:000028C6                 mov     edx, [ebp+var_1C]
.text:000028C9                 push    edx
.text:000028CA                 call    _safefree
.text:000028CF                 add     esp, 4
.text:000028D2                 cmp     [ebp+var_14], 6
.text:000028D6                 jnz     short loc_28F9
.text:000028D8                 mov     eax, [ebp+arg_10]
.text:000028DB                 push    eax
.text:000028DC                 mov     ecx, [ebp+arg_C]
.text:000028DF                 push    ecx
.text:000028E0                 mov     edx, [ebp+arg_8]
.text:000028E3                 push    edx
.text:000028E4                 mov     eax, [ebp+arg_4]
.text:000028E7                 push    eax
.text:000028E8                 call    _store_host_key
.text:000028ED                 add     esp, 10h
.text:000028F0                 mov     eax, 1
.text:000028F5                 jmp     short loc_2908
.text:000028F7 ; ---------------------------------------------------------------------------
.text:000028F7                 jmp     short loc_2906
.text:000028F9 ; ---------------------------------------------------------------------------
.text:000028F9
.text:000028F9 loc_28F9:                               ; CODE XREF: _verify_ssh_host_key+1CEj
.text:000028F9                 cmp     [ebp+var_14], 7
.text:000028FD                 jnz     short loc_2906
.text:000028FF                 mov     eax, 1
.text:00002904                 jmp     short loc_2908
.text:00002906 ; ---------------------------------------------------------------------------
.text:00002906
.text:00002906 loc_2906:                               ; CODE XREF: _verify_ssh_host_key+4Bj
.text:00002906                                         ; _verify_ssh_host_key:loc_2834j ...
.text:00002906                 xor     eax, eax
.text:00002908
.text:00002908 loc_2908:                               ; CODE XREF: _verify_ssh_host_key+46j
.text:00002908                                         ; _verify_ssh_host_key+115j ...
.text:00002908                 add     esp, 1Ch
.text:0000290B                 cmp     ebp, esp
.text:0000290D                 call    __RTC_CheckEsp
.text:00002912                 mov     esp, ebp
.text:00002914                 pop     ebp
.text:00002915                 retn
.text:00002915 _verify_ssh_host_key endp
.text:00002915
.text:00002915 ; ---------------------------------------------------------------------------
.text:00002916                 align 4
.text:00002918
.text:00002918 ; =============== S U B R O U T I N E =======================================
.text:00002918
.text:00002918 ; Attributes: bp-based frame
.text:00002918
.text:00002918                 public _askalg
.text:00002918 _askalg         proc near
.text:00002918
.text:00002918 var_C           = dword ptr -0Ch
.text:00002918 lpCaption       = dword ptr -8
.text:00002918 lpText          = dword ptr -4
.text:00002918 arg_4           = dword ptr  0Ch
.text:00002918 arg_8           = dword ptr  10h
.text:00002918
.text:00002918                 push    ebp
.text:00002919                 mov     ebp, esp
.text:0000291B                 sub     esp, 0Ch
.text:0000291E                 push    esi
.text:0000291F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002926                 mov     [ebp+lpCaption], 0CCCCCCCCh
.text:0000292D                 mov     [ebp+lpText], 0CCCCCCCCh
.text:00002934                 mov     eax, [ebp+arg_8]
.text:00002937                 push    eax
.text:00002938                 mov     ecx, [ebp+arg_4]
.text:0000293B                 push    ecx
.text:0000293C                 push    offset ?msg@?1??askalg@@9@9 ; "The first %s supported by the server\ni"...
.text:00002941                 call    _dupprintf
.text:00002946                 add     esp, 0Ch
.text:00002949                 mov     [ebp+lpText], eax
.text:0000294C                 mov     edx, dword ptr ds:_appname
.text:00002952                 push    edx
.text:00002953                 push    offset ?mbtitle@?1??askalg@@9@9 ; "%s Security Alert"
.text:00002958                 call    _dupprintf
.text:0000295D                 add     esp, 8
.text:00002960                 mov     [ebp+lpCaption], eax
.text:00002963                 mov     esi, esp
.text:00002965                 push    134h            ; uType
.text:0000296A                 mov     eax, [ebp+lpCaption]
.text:0000296D                 push    eax             ; lpCaption
.text:0000296E                 mov     ecx, [ebp+lpText]
.text:00002971                 push    ecx             ; lpText
.text:00002972                 push    0               ; hWnd
.text:00002974                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:0000297A                 cmp     esi, esp
.text:0000297C                 call    __RTC_CheckEsp
.text:00002981                 mov     [ebp+var_C], eax
.text:00002984                 call    _socket_reselect_all
.text:00002989                 mov     edx, [ebp+lpText]
.text:0000298C                 push    edx
.text:0000298D                 call    _safefree
.text:00002992                 add     esp, 4
.text:00002995                 mov     eax, [ebp+lpCaption]
.text:00002998                 push    eax
.text:00002999                 call    _safefree
.text:0000299E                 add     esp, 4
.text:000029A1                 cmp     [ebp+var_C], 6
.text:000029A5                 jnz     short loc_29B0
.text:000029A7                 mov     eax, 1
.text:000029AC                 jmp     short loc_29B2
.text:000029AE ; ---------------------------------------------------------------------------
.text:000029AE                 jmp     short loc_29B2
.text:000029B0 ; ---------------------------------------------------------------------------
.text:000029B0
.text:000029B0 loc_29B0:                               ; CODE XREF: _askalg+8Dj
.text:000029B0                 xor     eax, eax
.text:000029B2
.text:000029B2 loc_29B2:                               ; CODE XREF: _askalg+94j
.text:000029B2                                         ; _askalg+96j
.text:000029B2                 pop     esi
.text:000029B3                 add     esp, 0Ch
.text:000029B6                 cmp     ebp, esp
.text:000029B8                 call    __RTC_CheckEsp
.text:000029BD                 mov     esp, ebp
.text:000029BF                 pop     ebp
.text:000029C0                 retn
.text:000029C0 _askalg         endp
.text:000029C0
.text:000029C0 ; ---------------------------------------------------------------------------
.text:000029C1                 align 8
.text:000029C8
.text:000029C8 ; =============== S U B R O U T I N E =======================================
.text:000029C8
.text:000029C8 ; Attributes: bp-based frame
.text:000029C8
.text:000029C8                 public _askappend
.text:000029C8 _askappend      proc near
.text:000029C8
.text:000029C8 var_C           = dword ptr -0Ch
.text:000029C8 lpCaption       = dword ptr -8
.text:000029C8 lpText          = dword ptr -4
.text:000029C8 arg_4           = dword ptr  0Ch
.text:000029C8
.text:000029C8                 push    ebp
.text:000029C9                 mov     ebp, esp
.text:000029CB                 sub     esp, 0Ch
.text:000029CE                 push    esi
.text:000029CF                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000029D6                 mov     [ebp+lpCaption], 0CCCCCCCCh
.text:000029DD                 mov     [ebp+lpText], 0CCCCCCCCh
.text:000029E4                 mov     eax, [ebp+arg_4]
.text:000029E7                 mov     ecx, [eax]
.text:000029E9                 push    ecx
.text:000029EA                 push    104h
.text:000029EF                 push    offset ?msgtemplate@?1??askappend@@9@9 ; "The session log file \"%.*s\" already e"...
.text:000029F4                 call    _dupprintf
.text:000029F9                 add     esp, 0Ch
.text:000029FC                 mov     [ebp+lpText], eax
.text:000029FF                 mov     edx, dword ptr ds:_appname
.text:00002A05                 push    edx
.text:00002A06                 push    offset $SG90728 ; "%s Log to File"
.text:00002A0B                 call    _dupprintf
.text:00002A10                 add     esp, 8
.text:00002A13                 mov     [ebp+lpCaption], eax
.text:00002A16                 mov     esi, esp
.text:00002A18                 push    223h            ; uType
.text:00002A1D                 mov     eax, [ebp+lpCaption]
.text:00002A20                 push    eax             ; lpCaption
.text:00002A21                 mov     ecx, [ebp+lpText]
.text:00002A24                 push    ecx             ; lpText
.text:00002A25                 push    0               ; hWnd
.text:00002A27                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00002A2D                 cmp     esi, esp
.text:00002A2F                 call    __RTC_CheckEsp
.text:00002A34                 mov     [ebp+var_C], eax
.text:00002A37                 call    _socket_reselect_all
.text:00002A3C                 mov     edx, [ebp+lpText]
.text:00002A3F                 push    edx
.text:00002A40                 call    _safefree
.text:00002A45                 add     esp, 4
.text:00002A48                 mov     eax, [ebp+lpCaption]
.text:00002A4B                 push    eax
.text:00002A4C                 call    _safefree
.text:00002A51                 add     esp, 4
.text:00002A54                 cmp     [ebp+var_C], 6
.text:00002A58                 jnz     short loc_2A63
.text:00002A5A                 mov     eax, 2
.text:00002A5F                 jmp     short loc_2A74
.text:00002A61 ; ---------------------------------------------------------------------------
.text:00002A61                 jmp     short loc_2A74
.text:00002A63 ; ---------------------------------------------------------------------------
.text:00002A63
.text:00002A63 loc_2A63:                               ; CODE XREF: _askappend+90j
.text:00002A63                 cmp     [ebp+var_C], 7
.text:00002A67                 jnz     short loc_2A72
.text:00002A69                 mov     eax, 1
.text:00002A6E                 jmp     short loc_2A74
.text:00002A70 ; ---------------------------------------------------------------------------
.text:00002A70                 jmp     short loc_2A74
.text:00002A72 ; ---------------------------------------------------------------------------
.text:00002A72
.text:00002A72 loc_2A72:                               ; CODE XREF: _askappend+9Fj
.text:00002A72                 xor     eax, eax
.text:00002A74
.text:00002A74 loc_2A74:                               ; CODE XREF: _askappend+97j
.text:00002A74                                         ; _askappend+99j ...
.text:00002A74                 pop     esi
.text:00002A75                 add     esp, 0Ch
.text:00002A78                 cmp     ebp, esp
.text:00002A7A                 call    __RTC_CheckEsp
.text:00002A7F                 mov     esp, ebp
.text:00002A81                 pop     ebp
.text:00002A82                 retn
.text:00002A82 _askappend      endp
.text:00002A82
.text:00002A82 ; ---------------------------------------------------------------------------
.text:00002A83                 align 8
.text:00002A88
.text:00002A88 ; =============== S U B R O U T I N E =======================================
.text:00002A88
.text:00002A88 ; Attributes: bp-based frame
.text:00002A88
.text:00002A88                 public _old_keyfile_warning
.text:00002A88 _old_keyfile_warning proc near
.text:00002A88
.text:00002A88 lpCaption       = dword ptr -8
.text:00002A88 lpText          = dword ptr -4
.text:00002A88
.text:00002A88                 push    ebp
.text:00002A89                 mov     ebp, esp
.text:00002A8B                 sub     esp, 8
.text:00002A8E                 push    esi
.text:00002A8F                 mov     [ebp+lpCaption], 0CCCCCCCCh
.text:00002A96                 mov     [ebp+lpText], 0CCCCCCCCh
.text:00002A9D                 mov     eax, dword ptr ds:_appname
.text:00002AA2                 push    eax
.text:00002AA3                 push    offset ?message@?1??old_keyfile_warning@@9@9 ; "You are loading an SSH-2 private key wh"...
.text:00002AA8                 call    _dupprintf
.text:00002AAD                 add     esp, 8
.text:00002AB0                 mov     [ebp+lpText], eax
.text:00002AB3                 mov     ecx, dword ptr ds:_appname
.text:00002AB9                 push    ecx
.text:00002ABA                 push    offset ?mbtitle@?1??old_keyfile_warning@@9@9 ; "%s Key File Warning"
.text:00002ABF                 call    _dupprintf
.text:00002AC4                 add     esp, 8
.text:00002AC7                 mov     [ebp+lpCaption], eax
.text:00002ACA                 mov     esi, esp
.text:00002ACC                 push    0               ; uType
.text:00002ACE                 mov     edx, [ebp+lpCaption]
.text:00002AD1                 push    edx             ; lpCaption
.text:00002AD2                 mov     eax, [ebp+lpText]
.text:00002AD5                 push    eax             ; lpText
.text:00002AD6                 push    0               ; hWnd
.text:00002AD8                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00002ADE                 cmp     esi, esp
.text:00002AE0                 call    __RTC_CheckEsp
.text:00002AE5                 call    _socket_reselect_all
.text:00002AEA                 mov     ecx, [ebp+lpText]
.text:00002AED                 push    ecx
.text:00002AEE                 call    _safefree
.text:00002AF3                 add     esp, 4
.text:00002AF6                 mov     edx, [ebp+lpCaption]
.text:00002AF9                 push    edx
.text:00002AFA                 call    _safefree
.text:00002AFF                 add     esp, 4
.text:00002B02                 pop     esi
.text:00002B03                 add     esp, 8
.text:00002B06                 cmp     ebp, esp
.text:00002B08                 call    __RTC_CheckEsp
.text:00002B0D                 mov     esp, ebp
.text:00002B0F                 pop     ebp
.text:00002B10                 retn
.text:00002B10 _old_keyfile_warning endp
.text:00002B10
.text:00002B10 ; ---------------------------------------------------------------------------
.text:00002B11                 align 4
.text:00002B11 _text           ends
.text:00002B11
.rtc$TMZ:00002B14 ; ===========================================================================
.rtc$TMZ:00002B14
.rtc$TMZ:00002B14 ; Segment type: Pure data
.rtc$TMZ:00002B14 ; Segment permissions: Read
.rtc$TMZ:00002B14 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002B14                 assume cs:_rtc$TMZ
.rtc$TMZ:00002B14                 ;org 2B14h
.rtc$TMZ:00002B14 ; COMDAT (pick any)
.rtc$TMZ:00002B14 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002B14 _rtc$TMZ        ends
.rtc$TMZ:00002B14
.rtc$IMZ:00002B18 ; ===========================================================================
.rtc$IMZ:00002B18
.rtc$IMZ:00002B18 ; Segment type: Pure data
.rtc$IMZ:00002B18 ; Segment permissions: Read
.rtc$IMZ:00002B18 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002B18                 assume cs:_rtc$IMZ
.rtc$IMZ:00002B18                 ;org 2B18h
.rtc$IMZ:00002B18 ; COMDAT (pick any)
.rtc$IMZ:00002B18 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002B18 _rtc$IMZ        ends
.rtc$IMZ:00002B18
UNDEF:00002B20 ; ===========================================================================
UNDEF:00002B20
UNDEF:00002B20 ; Segment type: Externs
UNDEF:00002B20 ; UNDEF
UNDEF:00002B20 ; BOOL __stdcall SetWindowPlacement(HWND hWnd, const WINDOWPLACEMENT *lpwndpl)
UNDEF:00002B20                 extrn __imp__SetWindowPlacement@8:near
UNDEF:00002B20                                         ; CODE XREF: _force_normal+6Fp
UNDEF:00002B20                                         ; DATA XREF: _force_normal+6Fr
UNDEF:00002B24 ; BOOL __stdcall GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT *lpwndpl)
UNDEF:00002B24                 extrn __imp__GetWindowPlacement@8:near
UNDEF:00002B24                                         ; CODE XREF: _force_normal+47p
UNDEF:00002B24                                         ; DATA XREF: _force_normal+47r
UNDEF:00002B28                 extrn ___security_cookie:near ; DATA XREF: _force_normal+17r
UNDEF:00002B28                                         ; GenericMainDlgProc(x,x,x,x)+1Dr ...
UNDEF:00002B2C ; __fastcall __security_check_cookie(x)
UNDEF:00002B2C                 extrn @__security_check_cookie@4:near
UNDEF:00002B2C                                         ; CODE XREF: _force_normal+9Ep
UNDEF:00002B2C                                         ; GenericMainDlgProc(x,x,x,x)+8F8p ...
UNDEF:00002B30 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002B30                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002B30                                         ; CODE XREF: _force_normal+90p
UNDEF:00002B30                                         ; _SaneDialogBox+1A1p ...
UNDEF:00002B34                 extrn __RTC_CheckEsp:near ; CODE XREF: _force_normal+4Fp
UNDEF:00002B34                                         ; _force_normal+77p ...
UNDEF:00002B38                 extrn __RTC_Shutdown:near
UNDEF:00002B38                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002B3C                 extrn __RTC_InitBase:near
UNDEF:00002B3C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002B40 ; HWND __stdcall SetActiveWindow(HWND hWnd)
UNDEF:00002B40                 extrn __imp__SetActiveWindow@4:near
UNDEF:00002B40                                         ; CODE XREF: _modal_about_box+57p
UNDEF:00002B40                                         ; AboutProc(x,x,x,x)+17Ep ...
UNDEF:00002B44 ; INT_PTR __stdcall DialogBoxParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
UNDEF:00002B44                 extrn __imp__DialogBoxParamA@20:near
UNDEF:00002B44                                         ; CODE XREF: _modal_about_box+2Fp
UNDEF:00002B44                                         ; AboutProc(x,x,x,x)+156p ...
UNDEF:00002B48 ; HINSTANCE hinst
UNDEF:00002B48                 extrn _hinst:near       ; DATA XREF: _modal_about_box+28r
UNDEF:00002B48                                         ; AboutProc(x,x,x,x)+14Fr ...
UNDEF:00002B4C ; BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable)
UNDEF:00002B4C                 extrn __imp__EnableWindow@8:near
UNDEF:00002B4C                                         ; CODE XREF: _modal_about_box+Cp
UNDEF:00002B4C                                         ; _modal_about_box+44p ...
UNDEF:00002B50 ; HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
UNDEF:00002B50                 extrn __imp__ShellExecuteA@24:near
UNDEF:00002B50                                         ; CODE XREF: AboutProc(x,x,x,x)+1A5p
UNDEF:00002B50                                         ; DATA XREF: AboutProc(x,x,x,x)+1A5r
UNDEF:00002B54 ; BOOL __stdcall EndDialog(HWND hDlg, INT_PTR nResult)
UNDEF:00002B54                 extrn __imp__EndDialog@8:near
UNDEF:00002B54                                         ; CODE XREF: AboutProc(x,x,x,x)+117p
UNDEF:00002B54                                         ; AboutProc(x,x,x,x)+1C2p ...
UNDEF:00002B58 ; const CHAR ver
UNDEF:00002B58                 extrn _ver:near         ; DATA XREF: AboutProc(x,x,x,x)+A2o
UNDEF:00002B5C ; BOOL __stdcall SetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPCSTR lpString)
UNDEF:00002B5C                 extrn __imp__SetDlgItemTextA@12:near
UNDEF:00002B5C                                         ; CODE XREF: AboutProc(x,x,x,x)+93p
UNDEF:00002B5C                                         ; AboutProc(x,x,x,x)+B0p
UNDEF:00002B5C                                         ; DATA XREF: ...
UNDEF:00002B60                 extrn _safefree:near    ; CODE XREF: AboutProc(x,x,x,x)+79p
UNDEF:00002B60                                         ; LicenceProc(x,x,x,x)+75p ...
UNDEF:00002B64 ; BOOL __stdcall SetWindowTextA(HWND hWnd, LPCSTR lpString)
UNDEF:00002B64                 extrn __imp__SetWindowTextA@8:near
UNDEF:00002B64                                         ; CODE XREF: AboutProc(x,x,x,x)+68p
UNDEF:00002B64                                         ; LicenceProc(x,x,x,x)+64p ...
UNDEF:00002B68                 extrn _dupprintf:near   ; CODE XREF: AboutProc(x,x,x,x)+53p
UNDEF:00002B68                                         ; LicenceProc(x,x,x,x)+4Fp ...
UNDEF:00002B6C ; LPCSTR appname
UNDEF:00002B6C                 extrn _appname:near     ; DATA XREF: AboutProc(x,x,x,x):loc_C2Fr
UNDEF:00002B6C                                         ; AboutProc(x,x,x,x)+83r ...
UNDEF:00002B70                 extrn _launch_help:near ; CODE XREF: _show_help+9p
UNDEF:00002B74 ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:00002B74                 extrn __imp__DestroyWindow@4:near
UNDEF:00002B74                                         ; CODE XREF: _defuse_showwindow+5Dp
UNDEF:00002B74                                         ; _SaneDialogBox+187p ...
UNDEF:00002B78 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:00002B78                 extrn __imp__ShowWindow@8:near
UNDEF:00002B78                                         ; CODE XREF: _defuse_showwindow+37p
UNDEF:00002B78                                         ; _showeventlog+40p
UNDEF:00002B78                                         ; DATA XREF: ...
UNDEF:00002B7C ; HWND __stdcall CreateDialogParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
UNDEF:00002B7C                 extrn __imp__CreateDialogParamA@20:near
UNDEF:00002B7C                                         ; CODE XREF: _defuse_showwindow+1Fp
UNDEF:00002B7C                                         ; _SaneDialogBox+96p ...
UNDEF:00002B80                 extrn _dp_cleanup:near  ; CODE XREF: _do_config+12Bp
UNDEF:00002B80                                         ; _do_reconfig+166p
UNDEF:00002B84                 extrn _winctrl_cleanup:near ; CODE XREF: _do_config+111p
UNDEF:00002B84                                         ; _do_config+11Ep ...
UNDEF:00002B88                 extrn _ctrl_free_box:near ; CODE XREF: _do_config+104p
UNDEF:00002B88                                         ; _do_reconfig+13Fp
UNDEF:00002B8C                 extrn _dlg_auto_set_fixed_pitch_flag:near
UNDEF:00002B8C                                         ; CODE XREF: _do_config+D4p
UNDEF:00002B8C                                         ; _do_reconfig+10Ep
UNDEF:00002B90                 extrn _conf:near        ; DATA XREF: _do_config+C3r
UNDEF:00002B90                                         ; _do_reconfig+1Br ...
UNDEF:00002B94                 extrn _dp_add_tree:near ; CODE XREF: _do_config+78p
UNDEF:00002B94                                         ; _do_config+8Ap ...
UNDEF:00002B98                 extrn _winctrl_init:near ; CODE XREF: _do_config+59p
UNDEF:00002B98                                         ; _do_config+66p ...
UNDEF:00002B9C                 extrn _dp_init:near     ; CODE XREF: _do_config+4Cp
UNDEF:00002B9C                                         ; _do_reconfig+87p
UNDEF:00002BA0                 extrn _win_setup_config_box:near ; CODE XREF: _do_config+3Fp
UNDEF:00002BA0                                         ; _do_reconfig+7Ap
UNDEF:00002BA4                 extrn _has_help:near    ; CODE XREF: _do_config+2Dp
UNDEF:00002BA4                                         ; GenericMainDlgProc(x,x,x,x)+DDp ...
UNDEF:00002BA8                 extrn _setup_config_box:near ; CODE XREF: _do_config+21p
UNDEF:00002BA8                                         ; _do_reconfig+5Bp
UNDEF:00002BAC                 extrn _ctrl_new_box:near ; CODE XREF: _do_config+Bp
UNDEF:00002BAC                                         ; _do_reconfig+2Cp
UNDEF:00002BB0 ; void __stdcall PostQuitMessage(int nExitCode)
UNDEF:00002BB0                 extrn __imp__PostQuitMessage@4:near
UNDEF:00002BB0                                         ; CODE XREF: _SaneDialogBox+15Cp
UNDEF:00002BB0                                         ; DATA XREF: _SaneDialogBox+15Cr
UNDEF:00002BB4 ; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
UNDEF:00002BB4                 extrn __imp__DispatchMessageA@4:near
UNDEF:00002BB4                                         ; CODE XREF: _SaneDialogBox+137p
UNDEF:00002BB4                                         ; DATA XREF: _SaneDialogBox+137r
UNDEF:00002BB8 ; BOOL __stdcall IsDialogMessageA(HWND hDlg, LPMSG lpMsg)
UNDEF:00002BB8                 extrn __imp__IsDialogMessageA@8:near
UNDEF:00002BB8                                         ; CODE XREF: _SaneDialogBox+120p
UNDEF:00002BB8                                         ; DATA XREF: _SaneDialogBox+120r
UNDEF:00002BBC ; LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex)
UNDEF:00002BBC                 extrn __imp__GetWindowLongA@8:near
UNDEF:00002BBC                                         ; CODE XREF: _SaneDialogBox+FEp
UNDEF:00002BBC                                         ; _SaneDialogBox+171p ...
UNDEF:00002BC0 ; BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
UNDEF:00002BC0                 extrn __imp__GetMessageA@16:near
UNDEF:00002BC0                                         ; CODE XREF: _SaneDialogBox+E0p
UNDEF:00002BC0                                         ; DATA XREF: _SaneDialogBox+E0r
UNDEF:00002BC4 ; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00002BC4                 extrn __imp__SetWindowLongA@12:near
UNDEF:00002BC4                                         ; CODE XREF: _SaneDialogBox+B0p
UNDEF:00002BC4                                         ; _SaneDialogBox+C7p ...
UNDEF:00002BC8 ; ATOM __stdcall RegisterClassA(const WNDCLASSA *lpWndClass)
UNDEF:00002BC8                 extrn __imp__RegisterClassA@4:near
UNDEF:00002BC8                                         ; CODE XREF: _SaneDialogBox+75p
UNDEF:00002BC8                                         ; DATA XREF: _SaneDialogBox+75r
UNDEF:00002BCC ; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
UNDEF:00002BCC                 extrn __imp__LoadCursorA@8:near
UNDEF:00002BCC                                         ; CODE XREF: _SaneDialogBox+4Ap
UNDEF:00002BCC                                         ; DATA XREF: _SaneDialogBox+4Ar
UNDEF:00002BD0 ; LRESULT __stdcall DefDlgProcA(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00002BD0                 extrn __imp__DefDlgProcA@16:near
UNDEF:00002BD0                                         ; DATA XREF: _SaneDialogBox+1Er
UNDEF:00002BD4                 extrn _quit_help:near   ; CODE XREF: GenericMainDlgProc(x,x,x,x)+8AEp
UNDEF:00002BD8 ; BOOL __stdcall MessageBeep(UINT uType)
UNDEF:00002BD8                 extrn __imp__MessageBeep@4:near
UNDEF:00002BD8                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+89Bp
UNDEF:00002BD8                                         ; LogProc(x,x,x,x)+1BFp ...
UNDEF:00002BDC                 extrn _winctrl_context_help:near
UNDEF:00002BDC                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+88Bp
UNDEF:00002BE0 ; HWND __stdcall GetCapture()
UNDEF:00002BE0                 extrn __imp__GetCapture@0:near
UNDEF:00002BE0                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+842p
UNDEF:00002BE0                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+842r
UNDEF:00002BE4                 extrn _winctrl_handle_command:near
UNDEF:00002BE4                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+82Cp
UNDEF:00002BE8 ; HWND __stdcall SetFocus(HWND hWnd)
UNDEF:00002BE8                 extrn __imp__SetFocus@4:near
UNDEF:00002BE8                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+7E8p
UNDEF:00002BE8                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+7E8r
UNDEF:00002BEC ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:00002BEC                 extrn __imp__InvalidateRect@12:near
UNDEF:00002BEC                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+7D3p
UNDEF:00002BEC                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+7D3r
UNDEF:00002BF0                 extrn _dlg_refresh:near ; CODE XREF: GenericMainDlgProc(x,x,x,x)+7A8p
UNDEF:00002BF4                 extrn _winctrl_remove:near
UNDEF:00002BF4                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+760p
UNDEF:00002BF8                 extrn _winctrl_rem_shortcuts:near
UNDEF:00002BF8                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+74Cp
UNDEF:00002BFC ; BOOL __stdcall ReleaseCapture()
UNDEF:00002BFC                 extrn __imp__ReleaseCapture@0:near
UNDEF:00002BFC                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+5C1p
UNDEF:00002BFC                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+5C1r
UNDEF:00002C00                 extrn _dlg_set_focus:near
UNDEF:00002C00                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+595p
UNDEF:00002C04                 extrn _winctrl_findbyindex:near
UNDEF:00002C04                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+565p
UNDEF:00002C04                                         ; GenericMainDlgProc(x,x,x,x)+6AFp
UNDEF:00002C08 ; char *__cdecl strrchr(const char *Str, int Ch)
UNDEF:00002C08                 extrn _strrchr:near     ; CODE XREF: GenericMainDlgProc(x,x,x,x)+496p
UNDEF:00002C0C ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00002C0C                 extrn __wassert:near    ; CODE XREF: GenericMainDlgProc(x,x,x,x)+483p
UNDEF:00002C0C                                         ; _verify_ssh_host_key+D2p ...
UNDEF:00002C10                 extrn _ctrl_path_elements:near
UNDEF:00002C10                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+461p
UNDEF:00002C14                 extrn _ctrl_path_compare:near
UNDEF:00002C14                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+421p
UNDEF:00002C18 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00002C18                 extrn _memset:near      ; CODE XREF: GenericMainDlgProc(x,x,x,x)+395p
UNDEF:00002C1C ; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:00002C1C                 extrn __imp__CreateWindowExA@48:near
UNDEF:00002C1C                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+283p
UNDEF:00002C1C                                         ; GenericMainDlgProc(x,x,x,x)+340p
UNDEF:00002C1C                                         ; DATA XREF: ...
UNDEF:00002C20 ; BOOL __stdcall MapDialogRect(HWND hDlg, LPRECT lpRect)
UNDEF:00002C20                 extrn __imp__MapDialogRect@8:near
UNDEF:00002C20                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+23Bp
UNDEF:00002C20                                         ; GenericMainDlgProc(x,x,x,x)+2F6p
UNDEF:00002C20                                         ; DATA XREF: ...
UNDEF:00002C24 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:00002C24                 extrn __imp__MoveWindow@24:near
UNDEF:00002C24                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+204p
UNDEF:00002C24                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+204r
UNDEF:00002C28 ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:00002C28                 extrn __imp__GetWindowRect@8:near
UNDEF:00002C28                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+19Ep
UNDEF:00002C28                                         ; GenericMainDlgProc(x,x,x,x)+1B9p
UNDEF:00002C28                                         ; DATA XREF: ...
UNDEF:00002C2C ; HWND __stdcall GetDesktopWindow()
UNDEF:00002C2C                 extrn __imp__GetDesktopWindow@0:near
UNDEF:00002C2C                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+184p
UNDEF:00002C2C                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+184r
UNDEF:00002C30 ; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00002C30                 extrn __imp__SendMessageA@16:near
UNDEF:00002C30                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+175p
UNDEF:00002C30                                         ; GenericMainDlgProc(x,x,x,x)+29Fp ...
UNDEF:00002C34 ; HICON __stdcall LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName)
UNDEF:00002C34                 extrn __imp__LoadIconA@8:near
UNDEF:00002C34                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+15Ap
UNDEF:00002C34                                         ; DATA XREF: GenericMainDlgProc(x,x,x,x)+15Ar
UNDEF:00002C38 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00002C38                 extrn __imp__GetDlgItem@8:near
UNDEF:00002C38                                         ; CODE XREF: GenericMainDlgProc(x,x,x,x)+123p
UNDEF:00002C38                                         ; GenericMainDlgProc(x,x,x,x)+70Cp
UNDEF:00002C38                                         ; DATA XREF: ...
UNDEF:00002C3C ; size_t __cdecl strlen(const char *Str)
UNDEF:00002C3C                 extrn _strlen:near      ; CODE XREF: _treeview_insert+56p
UNDEF:00002C3C                                         ; _logevent+AAp ...
UNDEF:00002C40                 extrn _winctrl_layout:near ; CODE XREF: _create_controls+BAp
UNDEF:00002C44                 extrn _ctrl_find_path:near ; CODE XREF: _create_controls+83p
UNDEF:00002C48                 extrn _ctlposinit:near  ; CODE XREF: _create_controls+31p
UNDEF:00002C48                                         ; _create_controls+57p
UNDEF:00002C4C                 extrn _conf_free:near   ; CODE XREF: _do_reconfig+18Bp
UNDEF:00002C50                 extrn _conf_copy_into:near ; CODE XREF: _do_reconfig+17Fp
UNDEF:00002C54                 extrn _conf_get_int:near ; CODE XREF: _do_reconfig+3Fp
UNDEF:00002C58                 extrn _conf_copy:near   ; CODE XREF: _do_reconfig+21p
UNDEF:00002C5C ; LRESULT __stdcall SendDlgItemMessageA(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00002C5C                 extrn __imp__SendDlgItemMessageA@20:near
UNDEF:00002C5C                                         ; CODE XREF: _logevent+144p
UNDEF:00002C5C                                         ; _logevent+167p ...
UNDEF:00002C60 ; HWND logbox
UNDEF:00002C60                 extrn _logbox:near      ; DATA XREF: _logevent+113r
UNDEF:00002C60                                         ; _logevent+13Dr ...
UNDEF:00002C64 ; char *__cdecl strcat(char *Dest, const char *Source)
UNDEF:00002C64                 extrn _strcat:near      ; CODE XREF: _logevent+10Bp
UNDEF:00002C68 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00002C68                 extrn _strcpy:near      ; CODE XREF: _logevent+F0p
UNDEF:00002C6C                 extrn _safemalloc:near  ; CODE XREF: _logevent+C5p
UNDEF:00002C6C                                         ; LogProc(x,x,x,x)+1D7p ...
UNDEF:00002C70 ; size_t __cdecl strftime(char *Buf, size_t SizeInBytes, const char *Format, const struct tm *Tm)
UNDEF:00002C70                 extrn _strftime:near    ; CODE XREF: _logevent+9Cp
UNDEF:00002C74                 extrn _ltime:near       ; CODE XREF: _logevent+79p
UNDEF:00002C78                 extrn _saferealloc:near ; CODE XREF: _logevent+65p
UNDEF:00002C7C                 extrn _log_eventlog:near ; CODE XREF: _logevent+32p
UNDEF:00002C80                 extrn _logctx:near      ; DATA XREF: _logevent+2Br
UNDEF:00002C84                 extrn _write_aclip:near ; CODE XREF: LogProc(x,x,x,x)+31Dp
UNDEF:00002C88 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00002C88                 extrn _memcpy:near      ; CODE XREF: LogProc(x,x,x,x)+2E2p
UNDEF:00002C88                                         ; LogProc(x,x,x,x)+2FEp
UNDEF:00002C8C ; HWND __stdcall GetParent(HWND hWnd)
UNDEF:00002C8C                 extrn __imp__GetParent@4:near
UNDEF:00002C8C                                         ; CODE XREF: LogProc(x,x,x,x)+130p
UNDEF:00002C8C                                         ; LogProc(x,x,x,x)+397p
UNDEF:00002C8C                                         ; DATA XREF: ...
UNDEF:00002C90                 extrn _store_host_key:near
UNDEF:00002C90                                         ; CODE XREF: _verify_ssh_host_key+108p
UNDEF:00002C90                                         ; _verify_ssh_host_key+1E0p
UNDEF:00002C94                 extrn _message_box:near ; CODE XREF: _verify_ssh_host_key+A6p
UNDEF:00002C94                                         ; _verify_ssh_host_key+17Ep
UNDEF:00002C98                 extrn _verify_host_key:near
UNDEF:00002C98                                         ; CODE XREF: _verify_ssh_host_key+30p
UNDEF:00002C9C                 extrn _socket_reselect_all:near ; CODE XREF: _askalg+6Cp
UNDEF:00002C9C                                         ; _askappend+6Fp ...
UNDEF:00002CA0 ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:00002CA0                 extrn __imp__MessageBoxA@16:near ; CODE XREF: _askalg+5Cp
UNDEF:00002CA0                                         ; _askappend+5Fp ...
UNDEF:00002CA0
UNDEF:00002CA0
UNDEF:00002CA0                 end