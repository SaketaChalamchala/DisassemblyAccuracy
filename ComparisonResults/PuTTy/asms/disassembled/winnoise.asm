.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 3C3DE00459CF62913F8CB104805D824F
.bss:00000000 ; Input CRC32 : B62351BD
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winnoise.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000 _p_CryptGenRandom dd ?                  ; DATA XREF: _noise_get_heavy+191w
.bss:00000000                                         ; _noise_get_heavy+1F2r ...
.bss:00000004 _p_CryptAcquireContextA dd ?            ; DATA XREF: _noise_get_heavy+14Fw
.bss:00000004                                         ; _noise_get_heavy+1E5r ...
.bss:00000008 _p_CryptReleaseContext dd ?             ; DATA XREF: _noise_get_heavy+1D2w
.bss:00000008                                         ; _noise_get_heavy+1FFr ...
.bss:0000000C ; HMODULE wincrypt_module
.bss:0000000C _wincrypt_module dd ?                   ; DATA XREF: _noise_get_heavy+F5r
.bss:0000000C                                         ; _noise_get_heavy+10Fw ...
.bss:0000000C _bss            ends
.bss:0000000C
.data:00000010 ; ===========================================================================
.data:00000010
.data:00000010 ; Segment type: Pure data
.data:00000010 ; Segment permissions: Read/Write
.data:00000010 _data           segment dword public 'DATA' use32
.data:00000010                 assume cs:_data
.data:00000010                 ;org 10h
.data:00000010 ; char _SG87199[3]
.data:00000010 $SG87199        db '\*',0               ; DATA XREF: _noise_get_heavy+42o
.data:00000013                 align 4
.data:00000014 $SG87207        db 'advapi32.dll',0     ; DATA XREF: _noise_get_heavy+102o
.data:00000014                                         ; .text:000006ECo
.data:00000021                 align 4
.data:00000024 ; CHAR _SG87210[]
.data:00000024 $SG87210        db 'CryptAcquireContextA',0
.data:00000024                                         ; DATA XREF: _noise_get_heavy+11Fo
.data:00000039                 align 4
.data:0000003C ; CHAR _SG87213[]
.data:0000003C $SG87213        db 'CryptGenRandom',0   ; DATA XREF: _noise_get_heavy+160o
.data:0000004B                 align 4
.data:0000004C ; CHAR _SG87216[]
.data:0000004C $SG87216        db 'CryptReleaseContext',0 ; DATA XREF: _noise_get_heavy+1A1o
.data:0000004C _data           ends
.data:0000004C
.text:00000060 ; ===========================================================================
.text:00000060
.text:00000060 ; Segment type: Pure code
.text:00000060 ; Segment permissions: Read/Execute
.text:00000060 _text           segment para public 'CODE' use32
.text:00000060                 assume cs:_text
.text:00000060                 ;org 60h
.text:00000060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060                 public _noise_get_heavy
.text:00000060 _noise_get_heavy proc near
.text:00000060
.text:00000060 var_2AC         = dword ptr -2ACh
.text:00000060 var_2A8         = dword ptr -2A8h
.text:00000060 var_2A4         = dword ptr -2A4h
.text:00000060 var_29C         = byte ptr -29Ch
.text:00000060 Buffer          = byte ptr -274h
.text:00000060 var_164         = dword ptr -164h
.text:00000060 var_158         = dword ptr -158h
.text:00000060 FindFileData    = _WIN32_FIND_DATAA ptr -14Ch
.text:00000060 hFindFile       = dword ptr -8
.text:00000060 var_4           = dword ptr -4
.text:00000060 arg_0           = dword ptr  8
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 sub     esp, 2ACh
.text:00000069                 push    esi
.text:0000006A                 push    edi
.text:0000006B                 lea     edi, [ebp+var_2AC]
.text:00000071                 mov     ecx, 0ABh ; 'Â½'
.text:00000076                 mov     eax, 0CCCCCCCCh
.text:0000007B                 rep stosd
.text:0000007D                 mov     eax, dword ptr ds:___security_cookie
.text:00000082                 xor     eax, ebp
.text:00000084                 mov     [ebp+var_4], eax
.text:00000087                 mov     esi, esp
.text:00000089                 push    107h            ; uSize
.text:0000008E                 lea     eax, [ebp+Buffer]
.text:00000094                 push    eax             ; lpBuffer
.text:00000095                 call    dword ptr ds:__imp__GetWindowsDirectoryA@8 ; GetWindowsDirectoryA(x,x)
.text:0000009B                 cmp     esi, esp
.text:0000009D                 call    __RTC_CheckEsp
.text:000000A2                 push    offset $SG87199 ; "\\*"
.text:000000A7                 lea     ecx, [ebp+Buffer]
.text:000000AD                 push    ecx             ; Dest
.text:000000AE                 call    _strcat
.text:000000B3                 add     esp, 8
.text:000000B6                 mov     esi, esp
.text:000000B8                 lea     edx, [ebp+FindFileData]
.text:000000BE                 push    edx             ; lpFindFileData
.text:000000BF                 lea     eax, [ebp+Buffer]
.text:000000C5                 push    eax             ; lpFileName
.text:000000C6                 call    dword ptr ds:__imp__FindFirstFileA@8 ; FindFirstFileA(x,x)
.text:000000CC                 cmp     esi, esp
.text:000000CE                 call    __RTC_CheckEsp
.text:000000D3                 mov     [ebp+hFindFile], eax
.text:000000D6                 cmp     [ebp+hFindFile], 0FFFFFFFFh
.text:000000DA                 jz      short loc_128
.text:000000DC
.text:000000DC loc_DC:                                 ; CODE XREF: _noise_get_heavy+B3j
.text:000000DC                 mov     esi, esp
.text:000000DE                 push    140h
.text:000000E3                 lea     ecx, [ebp+FindFileData]
.text:000000E9                 push    ecx
.text:000000EA                 call    [ebp+arg_0]
.text:000000ED                 add     esp, 8
.text:000000F0                 cmp     esi, esp
.text:000000F2                 call    __RTC_CheckEsp
.text:000000F7                 mov     esi, esp
.text:000000F9                 lea     edx, [ebp+FindFileData]
.text:000000FF                 push    edx             ; lpFindFileData
.text:00000100                 mov     eax, [ebp+hFindFile]
.text:00000103                 push    eax             ; hFindFile
.text:00000104                 call    dword ptr ds:__imp__FindNextFileA@8 ; FindNextFileA(x,x)
.text:0000010A                 cmp     esi, esp
.text:0000010C                 call    __RTC_CheckEsp
.text:00000111                 test    eax, eax
.text:00000113                 jnz     short loc_DC
.text:00000115                 mov     esi, esp
.text:00000117                 mov     ecx, [ebp+hFindFile]
.text:0000011A                 push    ecx             ; hFindFile
.text:0000011B                 call    dword ptr ds:__imp__FindClose@4 ; FindClose(x)
.text:00000121                 cmp     esi, esp
.text:00000123                 call    __RTC_CheckEsp
.text:00000128
.text:00000128 loc_128:                                ; CODE XREF: _noise_get_heavy+7Aj
.text:00000128                 mov     esi, esp
.text:0000012A                 call    dword ptr ds:__imp__GetCurrentProcessId@0 ; GetCurrentProcessId()
.text:00000130                 cmp     esi, esp
.text:00000132                 call    __RTC_CheckEsp
.text:00000137                 mov     [ebp+var_158], eax
.text:0000013D                 mov     esi, esp
.text:0000013F                 push    4
.text:00000141                 lea     edx, [ebp+var_158]
.text:00000147                 push    edx
.text:00000148                 call    [ebp+arg_0]
.text:0000014B                 add     esp, 8
.text:0000014E                 cmp     esi, esp
.text:00000150                 call    __RTC_CheckEsp
.text:00000155                 cmp     ds:_wincrypt_module, 0
.text:0000015C                 jnz     loc_238
.text:00000162                 push    offset $SG87207 ; "advapi32.dll"
.text:00000167                 call    _load_system32_dll
.text:0000016C                 add     esp, 4
.text:0000016F                 mov     ds:_wincrypt_module, eax
.text:00000174                 cmp     ds:_wincrypt_module, 0
.text:0000017B                 jz      short loc_19F
.text:0000017D                 mov     esi, esp
.text:0000017F                 push    offset $SG87210 ; "CryptAcquireContextA"
.text:00000184                 mov     eax, ds:_wincrypt_module
.text:00000189                 push    eax             ; hModule
.text:0000018A                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00000190                 cmp     esi, esp
.text:00000192                 call    __RTC_CheckEsp
.text:00000197                 mov     [ebp+var_2A4], eax
.text:0000019D                 jmp     short loc_1A9
.text:0000019F ; ---------------------------------------------------------------------------
.text:0000019F
.text:0000019F loc_19F:                                ; CODE XREF: _noise_get_heavy+11Bj
.text:0000019F                 mov     [ebp+var_2A4], 0
.text:000001A9
.text:000001A9 loc_1A9:                                ; CODE XREF: _noise_get_heavy+13Dj
.text:000001A9                 mov     ecx, [ebp+var_2A4]
.text:000001AF                 mov     ds:_p_CryptAcquireContextA, ecx
.text:000001B5                 cmp     ds:_wincrypt_module, 0
.text:000001BC                 jz      short loc_1E1
.text:000001BE                 mov     esi, esp
.text:000001C0                 push    offset $SG87213 ; "CryptGenRandom"
.text:000001C5                 mov     edx, ds:_wincrypt_module
.text:000001CB                 push    edx             ; hModule
.text:000001CC                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000001D2                 cmp     esi, esp
.text:000001D4                 call    __RTC_CheckEsp
.text:000001D9                 mov     [ebp+var_2A8], eax
.text:000001DF                 jmp     short loc_1EB
.text:000001E1 ; ---------------------------------------------------------------------------
.text:000001E1
.text:000001E1 loc_1E1:                                ; CODE XREF: _noise_get_heavy+15Cj
.text:000001E1                 mov     [ebp+var_2A8], 0
.text:000001EB
.text:000001EB loc_1EB:                                ; CODE XREF: _noise_get_heavy+17Fj
.text:000001EB                 mov     eax, [ebp+var_2A8]
.text:000001F1                 mov     ds:_p_CryptGenRandom, eax
.text:000001F6                 cmp     ds:_wincrypt_module, 0
.text:000001FD                 jz      short loc_222
.text:000001FF                 mov     esi, esp
.text:00000201                 push    offset $SG87216 ; "CryptReleaseContext"
.text:00000206                 mov     ecx, ds:_wincrypt_module
.text:0000020C                 push    ecx             ; hModule
.text:0000020D                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00000213                 cmp     esi, esp
.text:00000215                 call    __RTC_CheckEsp
.text:0000021A                 mov     [ebp+var_2AC], eax
.text:00000220                 jmp     short loc_22C
.text:00000222 ; ---------------------------------------------------------------------------
.text:00000222
.text:00000222 loc_222:                                ; CODE XREF: _noise_get_heavy+19Dj
.text:00000222                 mov     [ebp+var_2AC], 0
.text:0000022C
.text:0000022C loc_22C:                                ; CODE XREF: _noise_get_heavy+1C0j
.text:0000022C                 mov     edx, [ebp+var_2AC]
.text:00000232                 mov     ds:_p_CryptReleaseContext, edx
.text:00000238
.text:00000238 loc_238:                                ; CODE XREF: _noise_get_heavy+FCj
.text:00000238                 cmp     ds:_wincrypt_module, 0
.text:0000023F                 jz      loc_2E0
.text:00000245                 cmp     ds:_p_CryptAcquireContextA, 0
.text:0000024C                 jz      loc_2E0
.text:00000252                 cmp     ds:_p_CryptGenRandom, 0
.text:00000259                 jz      loc_2E0
.text:0000025F                 cmp     ds:_p_CryptReleaseContext, 0
.text:00000266                 jz      short loc_2E0
.text:00000268                 mov     esi, esp
.text:0000026A                 push    0F0000000h
.text:0000026F                 push    1
.text:00000271                 push    0
.text:00000273                 push    0
.text:00000275                 lea     eax, [ebp+var_164]
.text:0000027B                 push    eax
.text:0000027C                 call    ds:_p_CryptAcquireContextA
.text:00000282                 cmp     esi, esp
.text:00000284                 call    __RTC_CheckEsp
.text:00000289                 test    eax, eax
.text:0000028B                 jz      short loc_2E0
.text:0000028D                 mov     esi, esp
.text:0000028F                 lea     ecx, [ebp+var_29C]
.text:00000295                 push    ecx
.text:00000296                 push    20h ; ' '
.text:00000298                 mov     edx, [ebp+var_164]
.text:0000029E                 push    edx
.text:0000029F                 call    ds:_p_CryptGenRandom
.text:000002A5                 cmp     esi, esp
.text:000002A7                 call    __RTC_CheckEsp
.text:000002AC                 test    eax, eax
.text:000002AE                 jz      short loc_2C8
.text:000002B0                 mov     esi, esp
.text:000002B2                 push    20h ; ' '
.text:000002B4                 lea     eax, [ebp+var_29C]
.text:000002BA                 push    eax
.text:000002BB                 call    [ebp+arg_0]
.text:000002BE                 add     esp, 8
.text:000002C1                 cmp     esi, esp
.text:000002C3                 call    __RTC_CheckEsp
.text:000002C8
.text:000002C8 loc_2C8:                                ; CODE XREF: _noise_get_heavy+24Ej
.text:000002C8                 mov     esi, esp
.text:000002CA                 push    0
.text:000002CC                 mov     ecx, [ebp+var_164]
.text:000002D2                 push    ecx
.text:000002D3                 call    ds:_p_CryptReleaseContext
.text:000002D9                 cmp     esi, esp
.text:000002DB                 call    __RTC_CheckEsp
.text:000002E0
.text:000002E0 loc_2E0:                                ; CODE XREF: _noise_get_heavy+1DFj
.text:000002E0                                         ; _noise_get_heavy+1ECj ...
.text:000002E0                 mov     edx, [ebp+arg_0]
.text:000002E3                 push    edx
.text:000002E4                 call    _read_random_seed
.text:000002E9                 add     esp, 4
.text:000002EC                 call    _random_save_seed
.text:000002F1                 push    edx
.text:000002F2                 mov     ecx, ebp
.text:000002F4                 push    eax
.text:000002F5                 lea     edx, $LN22
.text:000002FB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000300                 pop     eax
.text:00000301                 pop     edx
.text:00000302                 pop     edi
.text:00000303                 pop     esi
.text:00000304                 mov     ecx, [ebp+var_4]
.text:00000307                 xor     ecx, ebp
.text:00000309                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000030E                 add     esp, 2ACh
.text:00000314                 cmp     ebp, esp
.text:00000316                 call    __RTC_CheckEsp
.text:0000031B                 mov     esp, ebp
.text:0000031D                 pop     ebp
.text:0000031E                 retn
.text:0000031E _noise_get_heavy endp
.text:0000031E
.text:0000031E ; ---------------------------------------------------------------------------
.text:0000031F                 align 10h
.text:00000320 $LN22           dd 5                    ; DATA XREF: _noise_get_heavy+295o
.text:00000324                 dd offset $LN21
.text:00000328 $LN21           dd 0FFFFFEB4h, 140h     ; DATA XREF: .text:00000324o
.text:00000330                 dd offset $LN16         ; "finddata"
.text:00000334                 dd 0FFFFFEA8h, 4
.text:0000033C                 dd offset $LN17         ; "pid"
.text:00000340                 dd 0FFFFFE9Ch, 4
.text:00000348                 dd offset $LN18         ; "crypt_provider"
.text:0000034C                 dd 0FFFFFD8Ch, 107h
.text:00000354                 dd offset $LN19         ; "winpath"
.text:00000358                 dd 0FFFFFD64h, 20h
.text:00000360                 dd offset $LN20
.text:00000364 $LN20           dd 667562h              ; DATA XREF: .text:00000360o
.text:00000368 $LN19           db 'winpath',0          ; DATA XREF: .text:00000354o
.text:00000370 $LN18           db 'crypt_provider',0   ; DATA XREF: .text:00000348o
.text:0000037F $LN17           db 'pid',0              ; DATA XREF: .text:0000033Co
.text:00000383 $LN16           db 'finddata',0         ; DATA XREF: .text:00000330o
.text:0000038C                 align 10h
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390                 public _random_save_seed
.text:00000390 _random_save_seed proc near             ; CODE XREF: _noise_get_heavy+28Cp
.text:00000390
.text:00000390 var_18          = dword ptr -18h
.text:00000390 var_14          = dword ptr -14h
.text:00000390 var_10          = dword ptr -10h
.text:00000390 var_C           = dword ptr -0Ch
.text:00000390 var_8           = dword ptr -8
.text:00000390 var_4           = dword ptr -4
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 sub     esp, 18h
.text:00000396                 mov     eax, 0CCCCCCCCh
.text:0000039B                 mov     [ebp+var_18], eax
.text:0000039E                 mov     [ebp+var_14], eax
.text:000003A1                 mov     [ebp+var_10], eax
.text:000003A4                 mov     [ebp+var_C], eax
.text:000003A7                 mov     [ebp+var_8], eax
.text:000003AA                 mov     [ebp+var_4], eax
.text:000003AD                 cmp     dword ptr ds:_random_active, 0
.text:000003B4                 jz      short loc_3E2
.text:000003B6                 lea     eax, [ebp+var_8]
.text:000003B9                 push    eax
.text:000003BA                 lea     ecx, [ebp+var_14]
.text:000003BD                 push    ecx
.text:000003BE                 call    _random_get_savedata
.text:000003C3                 add     esp, 8
.text:000003C6                 mov     edx, [ebp+var_8]
.text:000003C9                 push    edx
.text:000003CA                 mov     eax, [ebp+var_14]
.text:000003CD                 push    eax
.text:000003CE                 call    _write_random_seed
.text:000003D3                 add     esp, 8
.text:000003D6                 mov     ecx, [ebp+var_14]
.text:000003D9                 push    ecx
.text:000003DA                 call    _safefree
.text:000003DF                 add     esp, 4
.text:000003E2
.text:000003E2 loc_3E2:                                ; CODE XREF: _random_save_seed+24j
.text:000003E2                 push    edx
.text:000003E3                 mov     ecx, ebp
.text:000003E5                 push    eax
.text:000003E6                 lea     edx, $LN7
.text:000003EC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003F1                 pop     eax
.text:000003F2                 pop     edx
.text:000003F3                 add     esp, 18h
.text:000003F6                 cmp     ebp, esp
.text:000003F8                 call    __RTC_CheckEsp
.text:000003FD                 mov     esp, ebp
.text:000003FF                 pop     ebp
.text:00000400                 retn
.text:00000400 _random_save_seed endp
.text:00000400
.text:00000400 ; ---------------------------------------------------------------------------
.text:00000401                 align 4
.text:00000404 $LN7            dd 2                    ; DATA XREF: _random_save_seed+56o
.text:00000408                 dd offset $LN6
.text:0000040C $LN6            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000408o
.text:00000414                 dd offset $LN4          ; "len"
.text:00000418                 dd 0FFFFFFECh, 4
.text:00000420                 dd offset $LN5          ; "data"
.text:00000424 $LN5            db 'data',0             ; DATA XREF: .text:00000420o
.text:00000429 $LN4            db 'len',0              ; DATA XREF: .text:00000414o
.text:0000042D                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430                 public _noise_get_light
.text:00000430 _noise_get_light proc near
.text:00000430
.text:00000430 var_38          = byte ptr -38h
.text:00000430 TimeAdjustmentDisabled= dword ptr -34h
.text:00000430 TimeAdjustment  = dword ptr -28h
.text:00000430 TimeIncrement   = dword ptr -24h
.text:00000430 SystemTime      = _SYSTEMTIME ptr -18h
.text:00000430 var_4           = dword ptr -4
.text:00000430 arg_0           = dword ptr  8
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 38h
.text:00000436                 push    esi
.text:00000437                 push    edi
.text:00000438                 lea     edi, [ebp+var_38]
.text:0000043B                 mov     ecx, 0Eh
.text:00000440                 mov     eax, 0CCCCCCCCh
.text:00000445                 rep stosd
.text:00000447                 mov     eax, dword ptr ds:___security_cookie
.text:0000044C                 xor     eax, ebp
.text:0000044E                 mov     [ebp+var_4], eax
.text:00000451                 mov     esi, esp
.text:00000453                 lea     eax, [ebp+SystemTime]
.text:00000456                 push    eax             ; lpSystemTime
.text:00000457                 call    dword ptr ds:__imp__GetSystemTime@4 ; GetSystemTime(x)
.text:0000045D                 cmp     esi, esp
.text:0000045F                 call    __RTC_CheckEsp
.text:00000464                 mov     esi, esp
.text:00000466                 push    10h
.text:00000468                 lea     ecx, [ebp+SystemTime]
.text:0000046B                 push    ecx
.text:0000046C                 call    [ebp+arg_0]
.text:0000046F                 add     esp, 8
.text:00000472                 cmp     esi, esp
.text:00000474                 call    __RTC_CheckEsp
.text:00000479                 mov     esi, esp
.text:0000047B                 lea     edx, [ebp+TimeAdjustmentDisabled]
.text:0000047E                 push    edx             ; lpTimeAdjustmentDisabled
.text:0000047F                 lea     eax, [ebp+TimeIncrement]
.text:00000482                 push    eax             ; lpTimeIncrement
.text:00000483                 lea     ecx, [ebp+TimeAdjustment]
.text:00000486                 push    ecx             ; lpTimeAdjustment
.text:00000487                 call    dword ptr ds:__imp__GetSystemTimeAdjustment@12 ; GetSystemTimeAdjustment(x,x,x)
.text:0000048D                 cmp     esi, esp
.text:0000048F                 call    __RTC_CheckEsp
.text:00000494                 mov     esi, esp
.text:00000496                 push    8
.text:00000498                 lea     edx, [ebp+TimeAdjustment]
.text:0000049B                 push    edx
.text:0000049C                 call    [ebp+arg_0]
.text:0000049F                 add     esp, 8
.text:000004A2                 cmp     esi, esp
.text:000004A4                 call    __RTC_CheckEsp
.text:000004A9                 push    edx
.text:000004AA                 mov     ecx, ebp
.text:000004AC                 push    eax
.text:000004AD                 lea     edx, $LN7_0
.text:000004B3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004B8                 pop     eax
.text:000004B9                 pop     edx
.text:000004BA                 pop     edi
.text:000004BB                 pop     esi
.text:000004BC                 mov     ecx, [ebp+var_4]
.text:000004BF                 xor     ecx, ebp
.text:000004C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000004C6                 add     esp, 38h
.text:000004C9                 cmp     ebp, esp
.text:000004CB                 call    __RTC_CheckEsp
.text:000004D0                 mov     esp, ebp
.text:000004D2                 pop     ebp
.text:000004D3                 retn
.text:000004D3 _noise_get_light endp
.text:000004D3
.text:000004D3 ; ---------------------------------------------------------------------------
.text:000004D4 $LN7_0          dd 3                    ; DATA XREF: _noise_get_light+7Do
.text:000004D8                 dd offset $LN6_0
.text:000004DC $LN6_0          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000004D8o
.text:000004E4                 dd offset $LN3          ; "systime"
.text:000004E8                 dd 0FFFFFFD8h, 8
.text:000004F0                 dd offset $LN4_0        ; "adjust"
.text:000004F4                 db 0CCh
.text:000004F5                 db 3 dup(0FFh)
.text:000004F8                 dd 4
.text:000004FC                 dd offset $LN5_0        ; "rubbish"
.text:00000500 $LN5_0          db 'rubbish',0          ; DATA XREF: .text:000004FCo
.text:00000508 $LN4_0          db 'adjust',0           ; DATA XREF: .text:000004F0o
.text:0000050F $LN3            db 'systime',0          ; DATA XREF: .text:000004E4o
.text:00000517                 align 10h
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520                 public _noise_regular
.text:00000520 _noise_regular  proc near
.text:00000520
.text:00000520 var_7C          = byte ptr -7Ch
.text:00000520 CreationTime    = _FILETIME ptr -78h
.text:00000520 ExitTime        = _FILETIME ptr -70h
.text:00000520 KernelTime      = _FILETIME ptr -68h
.text:00000520 UserTime        = _FILETIME ptr -60h
.text:00000520 Buffer          = _MEMORYSTATUS ptr -50h
.text:00000520 Point           = tagPOINT ptr -28h
.text:00000520 var_18          = dword ptr -18h
.text:00000520 var_C           = dword ptr -0Ch
.text:00000520 var_4           = dword ptr -4
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 sub     esp, 7Ch
.text:00000526                 push    esi
.text:00000527                 push    edi
.text:00000528                 lea     edi, [ebp+var_7C]
.text:0000052B                 mov     ecx, 1Fh
.text:00000530                 mov     eax, 0CCCCCCCCh
.text:00000535                 rep stosd
.text:00000537                 mov     eax, dword ptr ds:___security_cookie
.text:0000053C                 xor     eax, ebp
.text:0000053E                 mov     [ebp+var_4], eax
.text:00000541                 mov     esi, esp
.text:00000543                 call    dword ptr ds:__imp__GetForegroundWindow@0 ; GetForegroundWindow()
.text:00000549                 cmp     esi, esp
.text:0000054B                 call    __RTC_CheckEsp
.text:00000550                 mov     [ebp+var_C], eax
.text:00000553                 push    4
.text:00000555                 lea     eax, [ebp+var_C]
.text:00000558                 push    eax
.text:00000559                 call    _random_add_noise
.text:0000055E                 add     esp, 8
.text:00000561                 mov     esi, esp
.text:00000563                 call    dword ptr ds:__imp__GetCapture@0 ; GetCapture()
.text:00000569                 cmp     esi, esp
.text:0000056B                 call    __RTC_CheckEsp
.text:00000570                 mov     [ebp+var_C], eax
.text:00000573                 push    4
.text:00000575                 lea     ecx, [ebp+var_C]
.text:00000578                 push    ecx
.text:00000579                 call    _random_add_noise
.text:0000057E                 add     esp, 8
.text:00000581                 mov     esi, esp
.text:00000583                 call    dword ptr ds:__imp__GetClipboardOwner@0 ; GetClipboardOwner()
.text:00000589                 cmp     esi, esp
.text:0000058B                 call    __RTC_CheckEsp
.text:00000590                 mov     [ebp+var_C], eax
.text:00000593                 push    4
.text:00000595                 lea     edx, [ebp+var_C]
.text:00000598                 push    edx
.text:00000599                 call    _random_add_noise
.text:0000059E                 add     esp, 8
.text:000005A1                 mov     esi, esp
.text:000005A3                 push    4BFh            ; flags
.text:000005A8                 call    dword ptr ds:__imp__GetQueueStatus@4 ; GetQueueStatus(x)
.text:000005AE                 cmp     esi, esp
.text:000005B0                 call    __RTC_CheckEsp
.text:000005B5                 mov     [ebp+var_18], eax
.text:000005B8                 push    4
.text:000005BA                 lea     eax, [ebp+var_18]
.text:000005BD                 push    eax
.text:000005BE                 call    _random_add_noise
.text:000005C3                 add     esp, 8
.text:000005C6                 mov     esi, esp
.text:000005C8                 lea     ecx, [ebp+Point]
.text:000005CB                 push    ecx             ; lpPoint
.text:000005CC                 call    dword ptr ds:__imp__GetCursorPos@4 ; GetCursorPos(x)
.text:000005D2                 cmp     esi, esp
.text:000005D4                 call    __RTC_CheckEsp
.text:000005D9                 push    8
.text:000005DB                 lea     edx, [ebp+Point]
.text:000005DE                 push    edx
.text:000005DF                 call    _random_add_noise
.text:000005E4                 add     esp, 8
.text:000005E7                 mov     esi, esp
.text:000005E9                 lea     eax, [ebp+Buffer]
.text:000005EC                 push    eax             ; lpBuffer
.text:000005ED                 call    dword ptr ds:__imp__GlobalMemoryStatus@4 ; GlobalMemoryStatus(x)
.text:000005F3                 cmp     esi, esp
.text:000005F5                 call    __RTC_CheckEsp
.text:000005FA                 push    20h ; ' '
.text:000005FC                 lea     ecx, [ebp+Buffer]
.text:000005FF                 push    ecx
.text:00000600                 call    _random_add_noise
.text:00000605                 add     esp, 8
.text:00000608                 lea     edx, [ebp+UserTime]
.text:0000060B                 mov     esi, esp
.text:0000060D                 push    edx             ; lpUserTime
.text:0000060E                 lea     eax, [ebp+KernelTime]
.text:00000611                 push    eax             ; lpKernelTime
.text:00000612                 lea     ecx, [ebp+ExitTime]
.text:00000615                 push    ecx             ; lpExitTime
.text:00000616                 lea     edx, [ebp+CreationTime]
.text:00000619                 push    edx             ; lpCreationTime
.text:0000061A                 mov     edi, esp
.text:0000061C                 call    dword ptr ds:__imp__GetCurrentThread@0 ; GetCurrentThread()
.text:00000622                 cmp     edi, esp
.text:00000624                 call    __RTC_CheckEsp
.text:00000629                 push    eax             ; hThread
.text:0000062A                 call    dword ptr ds:__imp__GetThreadTimes@20 ; GetThreadTimes(x,x,x,x,x)
.text:00000630                 cmp     esi, esp
.text:00000632                 call    __RTC_CheckEsp
.text:00000637                 push    20h ; ' '
.text:00000639                 lea     eax, [ebp+CreationTime]
.text:0000063C                 push    eax
.text:0000063D                 call    _random_add_noise
.text:00000642                 add     esp, 8
.text:00000645                 lea     ecx, [ebp+UserTime]
.text:00000648                 mov     esi, esp
.text:0000064A                 push    ecx             ; lpUserTime
.text:0000064B                 lea     edx, [ebp+KernelTime]
.text:0000064E                 push    edx             ; lpKernelTime
.text:0000064F                 lea     eax, [ebp+ExitTime]
.text:00000652                 push    eax             ; lpExitTime
.text:00000653                 lea     ecx, [ebp+CreationTime]
.text:00000656                 push    ecx             ; lpCreationTime
.text:00000657                 mov     edi, esp
.text:00000659                 call    dword ptr ds:__imp__GetCurrentProcess@0 ; GetCurrentProcess()
.text:0000065F                 cmp     edi, esp
.text:00000661                 call    __RTC_CheckEsp
.text:00000666                 push    eax             ; hProcess
.text:00000667                 call    dword ptr ds:__imp__GetProcessTimes@20 ; GetProcessTimes(x,x,x,x,x)
.text:0000066D                 cmp     esi, esp
.text:0000066F                 call    __RTC_CheckEsp
.text:00000674                 push    20h ; ' '
.text:00000676                 lea     edx, [ebp+CreationTime]
.text:00000679                 push    edx
.text:0000067A                 call    _random_add_noise
.text:0000067F                 add     esp, 8
.text:00000682                 push    edx
.text:00000683                 mov     ecx, ebp
.text:00000685                 push    eax
.text:00000686                 lea     edx, $LN9
.text:0000068C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000691                 pop     eax
.text:00000692                 pop     edx
.text:00000693                 pop     edi
.text:00000694                 pop     esi
.text:00000695                 mov     ecx, [ebp+var_4]
.text:00000698                 xor     ecx, ebp
.text:0000069A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000069F                 add     esp, 7Ch
.text:000006A2                 cmp     ebp, esp
.text:000006A4                 call    __RTC_CheckEsp
.text:000006A9                 mov     esp, ebp
.text:000006AB                 pop     ebp
.text:000006AC                 retn
.text:000006AC _noise_regular  endp
.text:000006AC
.text:000006AC ; ---------------------------------------------------------------------------
.text:000006AD                 align 10h
.text:000006B0 $LN9            dd 5                    ; DATA XREF: _noise_regular+166o
.text:000006B4                 dd offset $LN8
.text:000006B8 $LN8            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000006B4o
.text:000006C0                 dd offset $LN3_0        ; "w"
.text:000006C4                 dd 0FFFFFFE8h, 4
.text:000006CC                 dd offset $LN4_1        ; "z"
.text:000006D0                 dd 0FFFFFFD8h, 8
.text:000006D8                 dd offset $LN5_1        ; "pt"
.text:000006DC                 dd 0FFFFFFB0h, 20h
.text:000006E4                 dd offset $LN6_1        ; "memstat"
.text:000006E8                 db 88h, 0FFh
.text:000006EA                 dw 0FFFFh
.text:000006EC                 dd offset $SG87207+0Ch  ; ""
.text:000006F0                 dd offset $LN7_1        ; "times"
.text:000006F4 $LN7_1          db 'times',0            ; DATA XREF: .text:000006F0o
.text:000006FA $LN6_1          db 'memstat',0          ; DATA XREF: .text:000006E4o
.text:00000702 $LN5_1          db 'pt',0               ; DATA XREF: .text:000006D8o
.text:00000705 $LN4_1          db 'z',0                ; DATA XREF: .text:000006CCo
.text:00000707 $LN3_0          db 'w',0                ; DATA XREF: .text:000006C0o
.text:00000709                 align 10h
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710                 public _noise_ultralight
.text:00000710 _noise_ultralight proc near
.text:00000710
.text:00000710 var_1C          = dword ptr -1Ch
.text:00000710 PerformanceCount= LARGE_INTEGER ptr -18h
.text:00000710 var_10          = dword ptr -10h
.text:00000710 var_C           = dword ptr -0Ch
.text:00000710 var_8           = dword ptr -8
.text:00000710 var_4           = dword ptr -4
.text:00000710 arg_0           = byte ptr  8
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 sub     esp, 1Ch
.text:00000716                 push    esi
.text:00000717                 mov     eax, 0CCCCCCCCh
.text:0000071C                 mov     [ebp+var_1C], eax
.text:0000071F                 mov     dword ptr [ebp+PerformanceCount], eax
.text:00000722                 mov     dword ptr [ebp+PerformanceCount+4], eax
.text:00000725                 mov     [ebp+var_10], eax
.text:00000728                 mov     [ebp+var_C], eax
.text:0000072B                 mov     [ebp+var_8], eax
.text:0000072E                 mov     [ebp+var_4], eax
.text:00000731                 push    4
.text:00000733                 lea     eax, [ebp+arg_0]
.text:00000736                 push    eax
.text:00000737                 call    _random_add_noise
.text:0000073C                 add     esp, 8
.text:0000073F                 mov     esi, esp
.text:00000741                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:00000747                 cmp     esi, esp
.text:00000749                 call    __RTC_CheckEsp
.text:0000074E                 mov     [ebp+var_8], eax
.text:00000751                 push    4
.text:00000753                 lea     ecx, [ebp+var_8]
.text:00000756                 push    ecx
.text:00000757                 call    _random_add_noise
.text:0000075C                 add     esp, 8
.text:0000075F                 mov     esi, esp
.text:00000761                 lea     edx, [ebp+PerformanceCount]
.text:00000764                 push    edx             ; lpPerformanceCount
.text:00000765                 call    dword ptr ds:__imp__QueryPerformanceCounter@4 ; QueryPerformanceCounter(x)
.text:0000076B                 cmp     esi, esp
.text:0000076D                 call    __RTC_CheckEsp
.text:00000772                 test    eax, eax
.text:00000774                 jz      short loc_784
.text:00000776                 push    8
.text:00000778                 lea     eax, [ebp+PerformanceCount]
.text:0000077B                 push    eax
.text:0000077C                 call    _random_add_noise
.text:00000781                 add     esp, 8
.text:00000784
.text:00000784 loc_784:                                ; CODE XREF: _noise_ultralight+64j
.text:00000784                 push    edx
.text:00000785                 mov     ecx, ebp
.text:00000787                 push    eax
.text:00000788                 lea     edx, $LN7_2
.text:0000078E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000793                 pop     eax
.text:00000794                 pop     edx
.text:00000795                 pop     esi
.text:00000796                 add     esp, 1Ch
.text:00000799                 cmp     ebp, esp
.text:0000079B                 call    __RTC_CheckEsp
.text:000007A0                 mov     esp, ebp
.text:000007A2                 pop     ebp
.text:000007A3                 retn
.text:000007A3 _noise_ultralight endp
.text:000007A3
.text:000007A3 ; ---------------------------------------------------------------------------
.text:000007A4 $LN7_2          dd 2                    ; DATA XREF: _noise_ultralight+78o
.text:000007A8                 dd offset $LN6_2
.text:000007AC $LN6_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000007A8o
.text:000007B4                 dd offset $LN4_2        ; "wintime"
.text:000007B8                 dd 0FFFFFFE8h, 8
.text:000007C0                 dd offset $LN5_2        ; "perftime"
.text:000007C4 $LN5_2          db 'perftime',0         ; DATA XREF: .text:000007C0o
.text:000007CD $LN4_2          db 'wintime',0          ; DATA XREF: .text:000007B4o
.text:000007D5                 align 4
.text:000007D5 _text           ends
.text:000007D5
.rtc$TMZ:000007D8 ; ===========================================================================
.rtc$TMZ:000007D8
.rtc$TMZ:000007D8 ; Segment type: Pure data
.rtc$TMZ:000007D8 ; Segment permissions: Read
.rtc$TMZ:000007D8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000007D8                 assume cs:_rtc$TMZ
.rtc$TMZ:000007D8                 ;org 7D8h
.rtc$TMZ:000007D8 ; COMDAT (pick any)
.rtc$TMZ:000007D8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000007D8 _rtc$TMZ        ends
.rtc$TMZ:000007D8
.rtc$IMZ:000007DC ; ===========================================================================
.rtc$IMZ:000007DC
.rtc$IMZ:000007DC ; Segment type: Pure data
.rtc$IMZ:000007DC ; Segment permissions: Read
.rtc$IMZ:000007DC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000007DC                 assume cs:_rtc$IMZ
.rtc$IMZ:000007DC                 ;org 7DCh
.rtc$IMZ:000007DC ; COMDAT (pick any)
.rtc$IMZ:000007DC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000007DC _rtc$IMZ        ends
.rtc$IMZ:000007DC
UNDEF:000007E0 ; ===========================================================================
UNDEF:000007E0
UNDEF:000007E0 ; Segment type: Externs
UNDEF:000007E0 ; UNDEF
UNDEF:000007E0                 extrn _read_random_seed:near
UNDEF:000007E0                                         ; CODE XREF: _noise_get_heavy+284p
UNDEF:000007E4 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:000007E4                 extrn __imp__GetProcAddress@8:near
UNDEF:000007E4                                         ; CODE XREF: _noise_get_heavy+12Ap
UNDEF:000007E4                                         ; _noise_get_heavy+16Cp ...
UNDEF:000007E8                 extrn _load_system32_dll:near
UNDEF:000007E8                                         ; CODE XREF: _noise_get_heavy+107p
UNDEF:000007EC ; DWORD __stdcall GetCurrentProcessId()
UNDEF:000007EC                 extrn __imp__GetCurrentProcessId@0:near
UNDEF:000007EC                                         ; CODE XREF: _noise_get_heavy+CAp
UNDEF:000007EC                                         ; DATA XREF: _noise_get_heavy+CAr
UNDEF:000007F0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
UNDEF:000007F0                 extrn __imp__FindClose@4:near
UNDEF:000007F0                                         ; CODE XREF: _noise_get_heavy+BBp
UNDEF:000007F0                                         ; DATA XREF: _noise_get_heavy+BBr
UNDEF:000007F4 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
UNDEF:000007F4                 extrn __imp__FindNextFileA@8:near
UNDEF:000007F4                                         ; CODE XREF: _noise_get_heavy+A4p
UNDEF:000007F4                                         ; DATA XREF: _noise_get_heavy+A4r
UNDEF:000007F8 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
UNDEF:000007F8                 extrn __imp__FindFirstFileA@8:near
UNDEF:000007F8                                         ; CODE XREF: _noise_get_heavy+66p
UNDEF:000007F8                                         ; DATA XREF: _noise_get_heavy+66r
UNDEF:000007FC ; char *__cdecl strcat(char *Dest, const char *Source)
UNDEF:000007FC                 extrn _strcat:near      ; CODE XREF: _noise_get_heavy+4Ep
UNDEF:00000800 ; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
UNDEF:00000800                 extrn __imp__GetWindowsDirectoryA@8:near
UNDEF:00000800                                         ; CODE XREF: _noise_get_heavy+35p
UNDEF:00000800                                         ; DATA XREF: _noise_get_heavy+35r
UNDEF:00000804                 extrn ___security_cookie:near
UNDEF:00000804                                         ; DATA XREF: _noise_get_heavy+1Dr
UNDEF:00000804                                         ; _noise_get_light+17r ...
UNDEF:00000808 ; __fastcall __security_check_cookie(x)
UNDEF:00000808                 extrn @__security_check_cookie@4:near
UNDEF:00000808                                         ; CODE XREF: _noise_get_heavy+2A9p
UNDEF:00000808                                         ; _noise_get_light+91p ...
UNDEF:0000080C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000080C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000080C                                         ; CODE XREF: _noise_get_heavy+29Bp
UNDEF:0000080C                                         ; _random_save_seed+5Cp ...
UNDEF:00000810                 extrn __RTC_CheckEsp:near ; CODE XREF: _noise_get_heavy+3Dp
UNDEF:00000810                                         ; _noise_get_heavy+6Ep ...
UNDEF:00000814                 extrn __RTC_Shutdown:near
UNDEF:00000814                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000818                 extrn __RTC_InitBase:near
UNDEF:00000818                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000081C                 extrn _safefree:near    ; CODE XREF: _random_save_seed+4Ap
UNDEF:00000820                 extrn _write_random_seed:near
UNDEF:00000820                                         ; CODE XREF: _random_save_seed+3Ep
UNDEF:00000824                 extrn _random_get_savedata:near
UNDEF:00000824                                         ; CODE XREF: _random_save_seed+2Ep
UNDEF:00000828                 extrn _random_active:near ; DATA XREF: _random_save_seed+1Dr
UNDEF:0000082C ; BOOL __stdcall GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled)
UNDEF:0000082C                 extrn __imp__GetSystemTimeAdjustment@12:near
UNDEF:0000082C                                         ; CODE XREF: _noise_get_light+57p
UNDEF:0000082C                                         ; DATA XREF: _noise_get_light+57r
UNDEF:00000830 ; void __stdcall GetSystemTime(LPSYSTEMTIME lpSystemTime)
UNDEF:00000830                 extrn __imp__GetSystemTime@4:near
UNDEF:00000830                                         ; CODE XREF: _noise_get_light+27p
UNDEF:00000830                                         ; DATA XREF: _noise_get_light+27r
UNDEF:00000834 ; BOOL __stdcall GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
UNDEF:00000834                 extrn __imp__GetProcessTimes@20:near
UNDEF:00000834                                         ; CODE XREF: _noise_regular+147p
UNDEF:00000834                                         ; DATA XREF: _noise_regular+147r
UNDEF:00000838 ; HANDLE __stdcall GetCurrentProcess()
UNDEF:00000838                 extrn __imp__GetCurrentProcess@0:near
UNDEF:00000838                                         ; CODE XREF: _noise_regular+139p
UNDEF:00000838                                         ; DATA XREF: _noise_regular+139r
UNDEF:0000083C ; BOOL __stdcall GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
UNDEF:0000083C                 extrn __imp__GetThreadTimes@20:near
UNDEF:0000083C                                         ; CODE XREF: _noise_regular+10Ap
UNDEF:0000083C                                         ; DATA XREF: _noise_regular+10Ar
UNDEF:00000840 ; HANDLE __stdcall GetCurrentThread()
UNDEF:00000840                 extrn __imp__GetCurrentThread@0:near
UNDEF:00000840                                         ; CODE XREF: _noise_regular+FCp
UNDEF:00000840                                         ; DATA XREF: _noise_regular+FCr
UNDEF:00000844 ; void __stdcall GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)
UNDEF:00000844                 extrn __imp__GlobalMemoryStatus@4:near
UNDEF:00000844                                         ; CODE XREF: _noise_regular+CDp
UNDEF:00000844                                         ; DATA XREF: _noise_regular+CDr
UNDEF:00000848 ; BOOL __stdcall GetCursorPos(LPPOINT lpPoint)
UNDEF:00000848                 extrn __imp__GetCursorPos@4:near
UNDEF:00000848                                         ; CODE XREF: _noise_regular+ACp
UNDEF:00000848                                         ; DATA XREF: _noise_regular+ACr
UNDEF:0000084C ; DWORD __stdcall GetQueueStatus(UINT flags)
UNDEF:0000084C                 extrn __imp__GetQueueStatus@4:near
UNDEF:0000084C                                         ; CODE XREF: _noise_regular+88p
UNDEF:0000084C                                         ; DATA XREF: _noise_regular+88r
UNDEF:00000850 ; HWND __stdcall GetClipboardOwner()
UNDEF:00000850                 extrn __imp__GetClipboardOwner@0:near
UNDEF:00000850                                         ; CODE XREF: _noise_regular+63p
UNDEF:00000850                                         ; DATA XREF: _noise_regular+63r
UNDEF:00000854 ; HWND __stdcall GetCapture()
UNDEF:00000854                 extrn __imp__GetCapture@0:near
UNDEF:00000854                                         ; CODE XREF: _noise_regular+43p
UNDEF:00000854                                         ; DATA XREF: _noise_regular+43r
UNDEF:00000858                 extrn _random_add_noise:near ; CODE XREF: _noise_regular+39p
UNDEF:00000858                                         ; _noise_regular+59p ...
UNDEF:0000085C ; HWND __stdcall GetForegroundWindow()
UNDEF:0000085C                 extrn __imp__GetForegroundWindow@0:near
UNDEF:0000085C                                         ; CODE XREF: _noise_regular+23p
UNDEF:0000085C                                         ; DATA XREF: _noise_regular+23r
UNDEF:00000860 ; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
UNDEF:00000860                 extrn __imp__QueryPerformanceCounter@4:near
UNDEF:00000860                                         ; CODE XREF: _noise_ultralight+55p
UNDEF:00000860                                         ; DATA XREF: _noise_ultralight+55r
UNDEF:00000864 ; DWORD __stdcall GetTickCount()
UNDEF:00000864                 extrn __imp__GetTickCount@0:near
UNDEF:00000864                                         ; CODE XREF: _noise_ultralight+31p
UNDEF:00000864                                         ; DATA XREF: _noise_ultralight+31r
UNDEF:00000864
UNDEF:00000864
UNDEF:00000864                 end