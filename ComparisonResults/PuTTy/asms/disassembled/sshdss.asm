.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 5A9F793878CBA937323E5740C8548402
.data:00000000 ; Input CRC32 : E2AD9C80
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshdss.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG7243         db 'ssh-dss',0          ; DATA XREF: _dss_newkey+55o
.data:00000008 ; char _SG7278[]
.data:00000008 $SG7278         db '0x',0               ; DATA XREF: _dss_fmtkey+EAo
.data:0000000B                 align 4
.data:0000000C ; char _SG7283[]
.data:0000000C $SG7283         db ',0x',0              ; DATA XREF: _dss_fmtkey:loc_6BDo
.data:00000010 ; char _SG7288[]
.data:00000010 $SG7288         db ',0x',0              ; DATA XREF: _dss_fmtkey:loc_766o
.data:00000014 ; char _SG7293[]
.data:00000014 $SG7293         db ',0x',0              ; DATA XREF: _dss_fmtkey:loc_80Fo
.data:00000018 $SG7312         db    0                 ; DATA XREF: _dss_fingerprint+3Ao
.data:00000019                 db    0
.data:0000001A                 db    0
.data:0000001B                 db    7
.data:0000001C                 db  73h ; s
.data:0000001D                 db  73h ; s
.data:0000001E                 db  68h ; h
.data:0000001F                 db  2Dh ; -
.data:00000020                 db  64h ; d
.data:00000021                 db  73h ; s
.data:00000022                 db  73h ; s
.data:00000023                 db    0
.data:00000024 ; char _SG7345[]
.data:00000024 $SG7345         db 'ssh-dss %d ',0      ; DATA XREF: _dss_fingerprint+3B0o
.data:00000030 $SG7349         dd offset $SG7351+6     ; DATA XREF: _dss_fingerprint+3F1o
.data:00000030                                         ; ""
.data:00000034 ; char _SG7351[]
.data:00000034 $SG7351         db '%s%02x',0           ; DATA XREF: _dss_fingerprint+41Ao
.data:00000034                                         ; .data:$SG7349o
.data:0000003B                 align 4
.data:0000003C $SG7387         db 'ssh-dss',0          ; DATA XREF: _dss_verifysig+61o
.data:00000044 $SG7417         db 'ssh-dss',0          ; DATA XREF: _dss_public_blob+E3o
.data:0000004C $SG7447:                                ; DATA XREF: _dss_public_blob+2D8o
.data:0000004C                 unicode 0, <..\..\..\sshdss.c>,0
.data:00000070 $SG7448:                                ; DATA XREF: _dss_public_blob+2DDo
.data:00000070                                         ; .data:$SG7606o
.data:00000070                 unicode 0, <p == blob + bloblen>,0
.data:00000098 $SG7472:                                ; DATA XREF: _dss_private_blob+E7o
.data:00000098                 unicode 0, <..\..\..\sshdss.c>,0
.data:000000BC $SG7473:                                ; DATA XREF: _dss_private_blob+ECo
.data:000000BC                 unicode 0, <p == blob + bloblen>,0
.data:000000E4 $SG7600         db 'DSA deterministic k generator',0
.data:000000E4                                         ; DATA XREF: _dss_sign+55o
.data:00000102                 align 4
.data:00000104 $SG7606         dd offset $SG7448+8     ; DATA XREF: _dss_sign+196o
.data:00000104                                         ; " blob + bloblen"
.data:00000108 $SG7613         db 'ssh-dss',0          ; DATA XREF: _dss_sign+30Bo
.data:00000110 $SG7621         db 'ssh-dss',0          ; DATA XREF: .rdata:00000160o
.data:00000118 $SG7622         db 'dss',0              ; DATA XREF: .rdata:00000164o
.data:00000118 _data           ends
.data:00000118
.rdata:0000011C ; ===========================================================================
.rdata:0000011C
.rdata:0000011C ; Segment type: Pure data
.rdata:0000011C ; Segment permissions: Read
.rdata:0000011C _rdata          segment dword public 'DATA' use32
.rdata:0000011C                 assume cs:_rdata
.rdata:0000011C                 ;org 11Ch
.rdata:0000011C ?hex@?1??dss_fmtkey@@9@9 db 30h         ; DATA XREF: _dss_fmtkey+17Er
.rdata:0000011C                                         ; _dss_fmtkey+227r ...
.rdata:0000011D a123456789abcde db '123456789abcdef',0
.rdata:0000012D                 align 10h
.rdata:00000130                 public _ssh_dss
.rdata:00000130 _ssh_dss        dd offset _dss_newkey
.rdata:00000134                 dd offset _dss_freekey
.rdata:00000138                 dd offset _dss_fmtkey
.rdata:0000013C                 dd offset _dss_public_blob
.rdata:00000140                 dd offset _dss_private_blob
.rdata:00000144                 dd offset _dss_createkey
.rdata:00000148                 dd offset _dss_openssh_createkey
.rdata:0000014C                 dd offset _dss_openssh_fmtkey
.rdata:00000150                 dd offset _dss_pubkey_bits
.rdata:00000154                 dd offset _dss_fingerprint
.rdata:00000158                 dd offset _dss_verifysig
.rdata:0000015C                 dd offset _dss_sign
.rdata:00000160                 dd offset $SG7621       ; "ssh-dss"
.rdata:00000164                 dd offset $SG7622       ; "dss"
.rdata:00000164 _rdata          ends
.rdata:00000164
.bss:00000168 ; ===========================================================================
.bss:00000168
.bss:00000168 ; Segment type: Uninitialized
.bss:00000168 ; Segment permissions: Read/Write
.bss:00000168 _bss            segment byte public 'BSS' use32
.bss:00000168                 assume cs:_bss
.bss:00000168                 ;org 168h
.bss:00000168                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000168 $SG7350         db    ? ;               ; DATA XREF: _dss_fingerprint:loc_CD9o
.bss:00000169                 align 4
.bss:00000169 _bss            ends
.bss:00000169
.text:0000016C ; ===========================================================================
.text:0000016C
.text:0000016C ; Segment type: Pure code
.text:0000016C ; Segment permissions: Read/Execute
.text:0000016C _text           segment para public 'CODE' use32
.text:0000016C                 assume cs:_text
.text:0000016C                 ;org 16Ch
.text:0000016C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000016C
.text:0000016C ; =============== S U B R O U T I N E =======================================
.text:0000016C
.text:0000016C ; Attributes: bp-based frame
.text:0000016C
.text:0000016C _dss_newkey     proc near               ; CODE XREF: _dss_createkey+34p
.text:0000016C                                         ; _dss_pubkey_bits+1Cp
.text:0000016C                                         ; DATA XREF: ...
.text:0000016C
.text:0000016C var_1C          = dword ptr -1Ch
.text:0000016C var_18          = dword ptr -18h
.text:0000016C var_14          = dword ptr -14h
.text:0000016C var_10          = dword ptr -10h
.text:0000016C var_C           = dword ptr -0Ch
.text:0000016C var_8           = dword ptr -8
.text:0000016C var_4           = dword ptr -4
.text:0000016C arg_0           = byte ptr  8
.text:0000016C arg_4           = byte ptr  0Ch
.text:0000016C
.text:0000016C                 push    ebp
.text:0000016D                 mov     ebp, esp
.text:0000016F                 sub     esp, 1Ch
.text:00000172                 mov     eax, 0CCCCCCCCh
.text:00000177                 mov     [ebp+var_1C], eax
.text:0000017A                 mov     [ebp+var_18], eax
.text:0000017D                 mov     [ebp+var_14], eax
.text:00000180                 mov     [ebp+var_10], eax
.text:00000183                 mov     [ebp+var_C], eax
.text:00000186                 mov     [ebp+var_8], eax
.text:00000189                 mov     [ebp+var_4], eax
.text:0000018C                 push    14h
.text:0000018E                 push    1
.text:00000190                 call    _safemalloc
.text:00000195                 add     esp, 8
.text:00000198                 mov     [ebp+var_1C], eax
.text:0000019B                 lea     eax, [ebp+var_14]
.text:0000019E                 push    eax
.text:0000019F                 lea     ecx, [ebp+var_8]
.text:000001A2                 push    ecx
.text:000001A3                 lea     edx, [ebp+arg_4]
.text:000001A6                 push    edx
.text:000001A7                 lea     eax, [ebp+arg_0]
.text:000001AA                 push    eax
.text:000001AB                 call    _getstring
.text:000001B0                 add     esp, 10h
.text:000001B3                 cmp     [ebp+var_8], 0
.text:000001B7                 jz      short loc_1D6
.text:000001B9                 cmp     [ebp+var_14], 7
.text:000001BD                 jnz     short loc_1D6
.text:000001BF                 push    7               ; size_t
.text:000001C1                 push    offset $SG7243  ; "ssh-dss"
.text:000001C6                 mov     ecx, [ebp+var_8]
.text:000001C9                 push    ecx             ; void *
.text:000001CA                 call    _memcmp
.text:000001CF                 add     esp, 0Ch
.text:000001D2                 test    eax, eax
.text:000001D4                 jz      short loc_1E9
.text:000001D6
.text:000001D6 loc_1D6:                                ; CODE XREF: _dss_newkey+4Bj
.text:000001D6                                         ; _dss_newkey+51j
.text:000001D6                 mov     edx, [ebp+var_1C]
.text:000001D9                 push    edx
.text:000001DA                 call    _safefree
.text:000001DF                 add     esp, 4
.text:000001E2                 xor     eax, eax
.text:000001E4                 jmp     loc_2B3
.text:000001E9 ; ---------------------------------------------------------------------------
.text:000001E9
.text:000001E9 loc_1E9:                                ; CODE XREF: _dss_newkey+68j
.text:000001E9                 lea     eax, [ebp+arg_4]
.text:000001EC                 push    eax
.text:000001ED                 lea     ecx, [ebp+arg_0]
.text:000001F0                 push    ecx
.text:000001F1                 call    _getmp
.text:000001F6                 add     esp, 8
.text:000001F9                 mov     edx, [ebp+var_1C]
.text:000001FC                 mov     [edx], eax
.text:000001FE                 lea     eax, [ebp+arg_4]
.text:00000201                 push    eax
.text:00000202                 lea     ecx, [ebp+arg_0]
.text:00000205                 push    ecx
.text:00000206                 call    _getmp
.text:0000020B                 add     esp, 8
.text:0000020E                 mov     edx, [ebp+var_1C]
.text:00000211                 mov     [edx+4], eax
.text:00000214                 lea     eax, [ebp+arg_4]
.text:00000217                 push    eax
.text:00000218                 lea     ecx, [ebp+arg_0]
.text:0000021B                 push    ecx
.text:0000021C                 call    _getmp
.text:00000221                 add     esp, 8
.text:00000224                 mov     edx, [ebp+var_1C]
.text:00000227                 mov     [edx+8], eax
.text:0000022A                 lea     eax, [ebp+arg_4]
.text:0000022D                 push    eax
.text:0000022E                 lea     ecx, [ebp+arg_0]
.text:00000231                 push    ecx
.text:00000232                 call    _getmp
.text:00000237                 add     esp, 8
.text:0000023A                 mov     edx, [ebp+var_1C]
.text:0000023D                 mov     [edx+0Ch], eax
.text:00000240                 mov     eax, [ebp+var_1C]
.text:00000243                 mov     dword ptr [eax+10h], 0
.text:0000024A                 mov     ecx, [ebp+var_1C]
.text:0000024D                 cmp     dword ptr [ecx], 0
.text:00000250                 jz      short loc_2A0
.text:00000252                 mov     edx, [ebp+var_1C]
.text:00000255                 cmp     dword ptr [edx+4], 0
.text:00000259                 jz      short loc_2A0
.text:0000025B                 mov     eax, [ebp+var_1C]
.text:0000025E                 cmp     dword ptr [eax+8], 0
.text:00000262                 jz      short loc_2A0
.text:00000264                 mov     ecx, [ebp+var_1C]
.text:00000267                 cmp     dword ptr [ecx+0Ch], 0
.text:0000026B                 jz      short loc_2A0
.text:0000026D                 mov     edx, dword ptr ds:_Zero
.text:00000273                 push    edx
.text:00000274                 mov     eax, [ebp+var_1C]
.text:00000277                 mov     ecx, [eax+4]
.text:0000027A                 push    ecx
.text:0000027B                 call    _bignum_cmp
.text:00000280                 add     esp, 8
.text:00000283                 test    eax, eax
.text:00000285                 jz      short loc_2A0
.text:00000287                 mov     edx, dword ptr ds:_Zero
.text:0000028D                 push    edx
.text:0000028E                 mov     eax, [ebp+var_1C]
.text:00000291                 mov     ecx, [eax]
.text:00000293                 push    ecx
.text:00000294                 call    _bignum_cmp
.text:00000299                 add     esp, 8
.text:0000029C                 test    eax, eax
.text:0000029E                 jnz     short loc_2B0
.text:000002A0
.text:000002A0 loc_2A0:                                ; CODE XREF: _dss_newkey+E4j
.text:000002A0                                         ; _dss_newkey+EDj ...
.text:000002A0                 mov     edx, [ebp+var_1C]
.text:000002A3                 push    edx
.text:000002A4                 call    _dss_freekey
.text:000002A9                 add     esp, 4
.text:000002AC                 xor     eax, eax
.text:000002AE                 jmp     short loc_2B3
.text:000002B0 ; ---------------------------------------------------------------------------
.text:000002B0
.text:000002B0 loc_2B0:                                ; CODE XREF: _dss_newkey+132j
.text:000002B0                 mov     eax, [ebp+var_1C]
.text:000002B3
.text:000002B3 loc_2B3:                                ; CODE XREF: _dss_newkey+78j
.text:000002B3                                         ; _dss_newkey+142j
.text:000002B3                 push    edx
.text:000002B4                 mov     ecx, ebp
.text:000002B6                 push    eax
.text:000002B7                 lea     edx, $LN10
.text:000002BD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002C2                 pop     eax
.text:000002C3                 pop     edx
.text:000002C4                 add     esp, 1Ch
.text:000002C7                 cmp     ebp, esp
.text:000002C9                 call    __RTC_CheckEsp
.text:000002CE                 mov     esp, ebp
.text:000002D0                 pop     ebp
.text:000002D1                 retn
.text:000002D1 _dss_newkey     endp
.text:000002D1
.text:000002D1 ; ---------------------------------------------------------------------------
.text:000002D2                 align 4
.text:000002D4 $LN10           dd 2                    ; DATA XREF: _dss_newkey+14Bo
.text:000002D8                 dd offset $LN9
.text:000002DC $LN9            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000002D8o
.text:000002E4                 dd offset $LN7
.text:000002E8                 dd 0FFFFFFECh, 4
.text:000002F0                 dd offset $LN8          ; "slen"
.text:000002F4 $LN8            db 'slen',0             ; DATA XREF: .text:000002F0o
.text:000002F9 ; ---------------------------------------------------------------------------
.text:000002F9
.text:000002F9 $LN7:                                   ; DATA XREF: .text:000002E4o
.text:000002F9                 jo      short $+2
.text:000002FB
.text:000002FB loc_2FB:                                ; CODE XREF: .text:$LN7j
.text:000002FB                 int     3               ; Trap to Debugger
.text:000002FC
.text:000002FC ; =============== S U B R O U T I N E =======================================
.text:000002FC
.text:000002FC ; Attributes: bp-based frame
.text:000002FC
.text:000002FC _getstring      proc near               ; CODE XREF: _dss_newkey+3Fp
.text:000002FC                                         ; _getmp+30p ...
.text:000002FC
.text:000002FC arg_0           = dword ptr  8
.text:000002FC arg_4           = dword ptr  0Ch
.text:000002FC arg_8           = dword ptr  10h
.text:000002FC arg_C           = dword ptr  14h
.text:000002FC
.text:000002FC                 push    ebp
.text:000002FD                 mov     ebp, esp
.text:000002FF                 mov     eax, [ebp+arg_8]
.text:00000302                 mov     dword ptr [eax], 0
.text:00000308                 mov     ecx, [ebp+arg_4]
.text:0000030B                 cmp     dword ptr [ecx], 4
.text:0000030E                 jge     short loc_315
.text:00000310                 jmp     loc_3AF
.text:00000315 ; ---------------------------------------------------------------------------
.text:00000315
.text:00000315 loc_315:                                ; CODE XREF: _getstring+12j
.text:00000315                 mov     edx, [ebp+arg_0]
.text:00000318                 mov     eax, [edx]
.text:0000031A                 movzx   ecx, byte ptr [eax]
.text:0000031D                 shl     ecx, 18h
.text:00000320                 mov     edx, [ebp+arg_0]
.text:00000323                 mov     eax, [edx]
.text:00000325                 movzx   edx, byte ptr [eax+1]
.text:00000329                 shl     edx, 10h
.text:0000032C                 or      ecx, edx
.text:0000032E                 mov     eax, [ebp+arg_0]
.text:00000331                 mov     edx, [eax]
.text:00000333                 movzx   eax, byte ptr [edx+2]
.text:00000337                 shl     eax, 8
.text:0000033A                 or      ecx, eax
.text:0000033C                 mov     edx, [ebp+arg_0]
.text:0000033F                 mov     eax, [edx]
.text:00000341                 movzx   edx, byte ptr [eax+3]
.text:00000345                 or      ecx, edx
.text:00000347                 push    ecx
.text:00000348                 call    _toint
.text:0000034D                 add     esp, 4
.text:00000350                 mov     ecx, [ebp+arg_C]
.text:00000353                 mov     [ecx], eax
.text:00000355                 mov     edx, [ebp+arg_C]
.text:00000358                 cmp     dword ptr [edx], 0
.text:0000035B                 jge     short loc_35F
.text:0000035D                 jmp     short loc_3AF
.text:0000035F ; ---------------------------------------------------------------------------
.text:0000035F
.text:0000035F loc_35F:                                ; CODE XREF: _getstring+5Fj
.text:0000035F                 mov     eax, [ebp+arg_4]
.text:00000362                 mov     ecx, [eax]
.text:00000364                 sub     ecx, 4
.text:00000367                 mov     edx, [ebp+arg_4]
.text:0000036A                 mov     [edx], ecx
.text:0000036C                 mov     eax, [ebp+arg_0]
.text:0000036F                 mov     ecx, [eax]
.text:00000371                 add     ecx, 4
.text:00000374                 mov     edx, [ebp+arg_0]
.text:00000377                 mov     [edx], ecx
.text:00000379                 mov     eax, [ebp+arg_4]
.text:0000037C                 mov     ecx, [ebp+arg_C]
.text:0000037F                 mov     edx, [eax]
.text:00000381                 cmp     edx, [ecx]
.text:00000383                 jge     short loc_387
.text:00000385                 jmp     short loc_3AF
.text:00000387 ; ---------------------------------------------------------------------------
.text:00000387
.text:00000387 loc_387:                                ; CODE XREF: _getstring+87j
.text:00000387                 mov     eax, [ebp+arg_8]
.text:0000038A                 mov     ecx, [ebp+arg_0]
.text:0000038D                 mov     edx, [ecx]
.text:0000038F                 mov     [eax], edx
.text:00000391                 mov     eax, [ebp+arg_0]
.text:00000394                 mov     ecx, [eax]
.text:00000396                 mov     edx, [ebp+arg_C]
.text:00000399                 add     ecx, [edx]
.text:0000039B                 mov     eax, [ebp+arg_0]
.text:0000039E                 mov     [eax], ecx
.text:000003A0                 mov     ecx, [ebp+arg_4]
.text:000003A3                 mov     edx, [ebp+arg_C]
.text:000003A6                 mov     eax, [ecx]
.text:000003A8                 sub     eax, [edx]
.text:000003AA                 mov     ecx, [ebp+arg_4]
.text:000003AD                 mov     [ecx], eax
.text:000003AF
.text:000003AF loc_3AF:                                ; CODE XREF: _getstring+14j
.text:000003AF                                         ; _getstring+61j ...
.text:000003AF                 cmp     ebp, esp
.text:000003B1                 call    __RTC_CheckEsp
.text:000003B6                 pop     ebp
.text:000003B7                 retn
.text:000003B7 _getstring      endp
.text:000003B7
.text:000003B7 ; ---------------------------------------------------------------------------
.text:000003B8                 db 4 dup(0CCh)
.text:000003BC
.text:000003BC ; =============== S U B R O U T I N E =======================================
.text:000003BC
.text:000003BC ; Attributes: bp-based frame
.text:000003BC
.text:000003BC _getmp          proc near               ; CODE XREF: _dss_newkey+85p
.text:000003BC                                         ; _dss_newkey+9Ap ...
.text:000003BC
.text:000003BC var_1C          = dword ptr -1Ch
.text:000003BC var_18          = dword ptr -18h
.text:000003BC var_14          = dword ptr -14h
.text:000003BC var_10          = dword ptr -10h
.text:000003BC var_C           = dword ptr -0Ch
.text:000003BC var_8           = dword ptr -8
.text:000003BC var_4           = dword ptr -4
.text:000003BC arg_0           = dword ptr  8
.text:000003BC arg_4           = dword ptr  0Ch
.text:000003BC
.text:000003BC                 push    ebp
.text:000003BD                 mov     ebp, esp
.text:000003BF                 sub     esp, 1Ch
.text:000003C2                 mov     eax, 0CCCCCCCCh
.text:000003C7                 mov     [ebp+var_1C], eax
.text:000003CA                 mov     [ebp+var_18], eax
.text:000003CD                 mov     [ebp+var_14], eax
.text:000003D0                 mov     [ebp+var_10], eax
.text:000003D3                 mov     [ebp+var_C], eax
.text:000003D6                 mov     [ebp+var_8], eax
.text:000003D9                 mov     [ebp+var_4], eax
.text:000003DC                 lea     eax, [ebp+var_14]
.text:000003DF                 push    eax
.text:000003E0                 lea     ecx, [ebp+var_8]
.text:000003E3                 push    ecx
.text:000003E4                 mov     edx, [ebp+arg_4]
.text:000003E7                 push    edx
.text:000003E8                 mov     eax, [ebp+arg_0]
.text:000003EB                 push    eax
.text:000003EC                 call    _getstring
.text:000003F1                 add     esp, 10h
.text:000003F4                 cmp     [ebp+var_8], 0
.text:000003F8                 jnz     short loc_3FE
.text:000003FA                 xor     eax, eax
.text:000003FC                 jmp     short loc_426
.text:000003FE ; ---------------------------------------------------------------------------
.text:000003FE
.text:000003FE loc_3FE:                                ; CODE XREF: _getmp+3Cj
.text:000003FE                 mov     ecx, [ebp+var_8]
.text:00000401                 movsx   edx, byte ptr [ecx]
.text:00000404                 and     edx, 80h
.text:0000040A                 jz      short loc_410
.text:0000040C                 xor     eax, eax
.text:0000040E                 jmp     short loc_426
.text:00000410 ; ---------------------------------------------------------------------------
.text:00000410
.text:00000410 loc_410:                                ; CODE XREF: _getmp+4Ej
.text:00000410                 mov     eax, [ebp+var_14]
.text:00000413                 push    eax
.text:00000414                 mov     ecx, [ebp+var_8]
.text:00000417                 push    ecx
.text:00000418                 call    _bignum_from_bytes
.text:0000041D                 add     esp, 8
.text:00000420                 mov     [ebp+var_1C], eax
.text:00000423                 mov     eax, [ebp+var_1C]
.text:00000426
.text:00000426 loc_426:                                ; CODE XREF: _getmp+40j
.text:00000426                                         ; _getmp+52j
.text:00000426                 push    edx
.text:00000427                 mov     ecx, ebp
.text:00000429                 push    eax
.text:0000042A                 lea     edx, $LN8_0
.text:00000430                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000435                 pop     eax
.text:00000436                 pop     edx
.text:00000437                 add     esp, 1Ch
.text:0000043A                 cmp     ebp, esp
.text:0000043C                 call    __RTC_CheckEsp
.text:00000441                 mov     esp, ebp
.text:00000443                 pop     ebp
.text:00000444                 retn
.text:00000444 _getmp          endp
.text:00000444
.text:00000444 ; ---------------------------------------------------------------------------
.text:00000445                 align 4
.text:00000448 $LN8_0          dd 2                    ; DATA XREF: _getmp+6Eo
.text:0000044C                 dd offset $LN7_0
.text:00000450 $LN7_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000044Co
.text:00000458                 dd offset $LN5          ; "p"
.text:0000045C                 dd 0FFFFFFECh, 4
.text:00000464                 dd offset $LN6          ; "length"
.text:00000468 $LN6            db 'length',0           ; DATA XREF: .text:00000464o
.text:0000046F $LN5            db 'p',0                ; DATA XREF: .text:00000458o
.text:00000471                 db 0Bh dup(0CCh)
.text:0000047C
.text:0000047C ; =============== S U B R O U T I N E =======================================
.text:0000047C
.text:0000047C ; Attributes: bp-based frame
.text:0000047C
.text:0000047C _dss_freekey    proc near               ; CODE XREF: _dss_newkey+138p
.text:0000047C                                         ; _dss_createkey+6Fp ...
.text:0000047C
.text:0000047C var_4           = dword ptr -4
.text:0000047C arg_0           = dword ptr  8
.text:0000047C
.text:0000047C                 push    ebp
.text:0000047D                 mov     ebp, esp
.text:0000047F                 push    ecx
.text:00000480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000487                 mov     eax, [ebp+arg_0]
.text:0000048A                 mov     [ebp+var_4], eax
.text:0000048D                 mov     ecx, [ebp+var_4]
.text:00000490                 cmp     dword ptr [ecx], 0
.text:00000493                 jz      short loc_4A3
.text:00000495                 mov     edx, [ebp+var_4]
.text:00000498                 mov     eax, [edx]
.text:0000049A                 push    eax
.text:0000049B                 call    _freebn
.text:000004A0                 add     esp, 4
.text:000004A3
.text:000004A3 loc_4A3:                                ; CODE XREF: _dss_freekey+17j
.text:000004A3                 mov     ecx, [ebp+var_4]
.text:000004A6                 cmp     dword ptr [ecx+4], 0
.text:000004AA                 jz      short loc_4BB
.text:000004AC                 mov     edx, [ebp+var_4]
.text:000004AF                 mov     eax, [edx+4]
.text:000004B2                 push    eax
.text:000004B3                 call    _freebn
.text:000004B8                 add     esp, 4
.text:000004BB
.text:000004BB loc_4BB:                                ; CODE XREF: _dss_freekey+2Ej
.text:000004BB                 mov     ecx, [ebp+var_4]
.text:000004BE                 cmp     dword ptr [ecx+8], 0
.text:000004C2                 jz      short loc_4D3
.text:000004C4                 mov     edx, [ebp+var_4]
.text:000004C7                 mov     eax, [edx+8]
.text:000004CA                 push    eax
.text:000004CB                 call    _freebn
.text:000004D0                 add     esp, 4
.text:000004D3
.text:000004D3 loc_4D3:                                ; CODE XREF: _dss_freekey+46j
.text:000004D3                 mov     ecx, [ebp+var_4]
.text:000004D6                 cmp     dword ptr [ecx+0Ch], 0
.text:000004DA                 jz      short loc_4EB
.text:000004DC                 mov     edx, [ebp+var_4]
.text:000004DF                 mov     eax, [edx+0Ch]
.text:000004E2                 push    eax
.text:000004E3                 call    _freebn
.text:000004E8                 add     esp, 4
.text:000004EB
.text:000004EB loc_4EB:                                ; CODE XREF: _dss_freekey+5Ej
.text:000004EB                 mov     ecx, [ebp+var_4]
.text:000004EE                 cmp     dword ptr [ecx+10h], 0
.text:000004F2                 jz      short loc_503
.text:000004F4                 mov     edx, [ebp+var_4]
.text:000004F7                 mov     eax, [edx+10h]
.text:000004FA                 push    eax
.text:000004FB                 call    _freebn
.text:00000500                 add     esp, 4
.text:00000503
.text:00000503 loc_503:                                ; CODE XREF: _dss_freekey+76j
.text:00000503                 mov     ecx, [ebp+var_4]
.text:00000506                 push    ecx
.text:00000507                 call    _safefree
.text:0000050C                 add     esp, 4
.text:0000050F                 add     esp, 4
.text:00000512                 cmp     ebp, esp
.text:00000514                 call    __RTC_CheckEsp
.text:00000519                 mov     esp, ebp
.text:0000051B                 pop     ebp
.text:0000051C                 retn
.text:0000051C _dss_freekey    endp
.text:0000051C
.text:0000051C ; ---------------------------------------------------------------------------
.text:0000051D                 db 0Fh dup(0CCh)
.text:0000052C
.text:0000052C ; =============== S U B R O U T I N E =======================================
.text:0000052C
.text:0000052C ; Attributes: bp-based frame
.text:0000052C
.text:0000052C _dss_fmtkey     proc near               ; DATA XREF: .rdata:00000138o
.text:0000052C
.text:0000052C var_28          = dword ptr -28h
.text:0000052C var_24          = dword ptr -24h
.text:0000052C var_20          = dword ptr -20h
.text:0000052C var_1C          = dword ptr -1Ch
.text:0000052C var_18          = dword ptr -18h
.text:0000052C var_14          = dword ptr -14h
.text:0000052C var_10          = dword ptr -10h
.text:0000052C var_C           = dword ptr -0Ch
.text:0000052C var_8           = dword ptr -8
.text:0000052C var_4           = dword ptr -4
.text:0000052C arg_0           = dword ptr  8
.text:0000052C
.text:0000052C                 push    ebp
.text:0000052D                 mov     ebp, esp
.text:0000052F                 sub     esp, 28h
.text:00000532                 push    edi
.text:00000533                 lea     edi, [ebp+var_28]
.text:00000536                 mov     ecx, 0Ah
.text:0000053B                 mov     eax, 0CCCCCCCCh
.text:00000540                 rep stosd
.text:00000542                 mov     eax, [ebp+arg_0]
.text:00000545                 mov     [ebp+var_4], eax
.text:00000548                 mov     ecx, [ebp+var_4]
.text:0000054B                 cmp     dword ptr [ecx], 0
.text:0000054E                 jnz     short loc_557
.text:00000550                 xor     eax, eax
.text:00000552                 jmp     loc_8C4
.text:00000557 ; ---------------------------------------------------------------------------
.text:00000557
.text:00000557 loc_557:                                ; CODE XREF: _dss_fmtkey+22j
.text:00000557                 mov     [ebp+var_C], 0Dh
.text:0000055E                 mov     edx, [ebp+var_4]
.text:00000561                 mov     eax, [edx]
.text:00000563                 push    eax
.text:00000564                 call    _bignum_bitcount
.text:00000569                 add     esp, 4
.text:0000056C                 lea     eax, ds:3Ch[eax*4]
.text:00000573                 cdq
.text:00000574                 and     edx, 0Fh
.text:00000577                 add     eax, edx
.text:00000579                 sar     eax, 4
.text:0000057C                 add     eax, [ebp+var_C]
.text:0000057F                 mov     [ebp+var_C], eax
.text:00000582                 mov     ecx, [ebp+var_4]
.text:00000585                 mov     edx, [ecx+4]
.text:00000588                 push    edx
.text:00000589                 call    _bignum_bitcount
.text:0000058E                 add     esp, 4
.text:00000591                 lea     eax, ds:3Ch[eax*4]
.text:00000598                 cdq
.text:00000599                 and     edx, 0Fh
.text:0000059C                 add     eax, edx
.text:0000059E                 sar     eax, 4
.text:000005A1                 add     eax, [ebp+var_C]
.text:000005A4                 mov     [ebp+var_C], eax
.text:000005A7                 mov     eax, [ebp+var_4]
.text:000005AA                 mov     ecx, [eax+8]
.text:000005AD                 push    ecx
.text:000005AE                 call    _bignum_bitcount
.text:000005B3                 add     esp, 4
.text:000005B6                 lea     eax, ds:3Ch[eax*4]
.text:000005BD                 cdq
.text:000005BE                 and     edx, 0Fh
.text:000005C1                 add     eax, edx
.text:000005C3                 sar     eax, 4
.text:000005C6                 add     eax, [ebp+var_C]
.text:000005C9                 mov     [ebp+var_C], eax
.text:000005CC                 mov     edx, [ebp+var_4]
.text:000005CF                 mov     eax, [edx+0Ch]
.text:000005D2                 push    eax
.text:000005D3                 call    _bignum_bitcount
.text:000005D8                 add     esp, 4
.text:000005DB                 lea     eax, ds:3Ch[eax*4]
.text:000005E2                 cdq
.text:000005E3                 and     edx, 0Fh
.text:000005E6                 add     eax, edx
.text:000005E8                 sar     eax, 4
.text:000005EB                 add     eax, [ebp+var_C]
.text:000005EE                 mov     [ebp+var_C], eax
.text:000005F1                 push    1
.text:000005F3                 mov     ecx, [ebp+var_C]
.text:000005F6                 push    ecx
.text:000005F7                 call    _safemalloc
.text:000005FC                 add     esp, 8
.text:000005FF                 mov     [ebp+var_8], eax
.text:00000602                 cmp     [ebp+var_8], 0
.text:00000606                 jnz     short loc_60F
.text:00000608                 xor     eax, eax
.text:0000060A                 jmp     loc_8C4
.text:0000060F ; ---------------------------------------------------------------------------
.text:0000060F
.text:0000060F loc_60F:                                ; CODE XREF: _dss_fmtkey+DAj
.text:0000060F                 mov     [ebp+var_14], 0
.text:00000616                 push    offset $SG7278  ; "0x"
.text:0000061B                 mov     edx, [ebp+var_8]
.text:0000061E                 add     edx, [ebp+var_14]
.text:00000621                 push    edx             ; char *
.text:00000622                 call    _sprintf
.text:00000627                 add     esp, 8
.text:0000062A                 add     eax, [ebp+var_14]
.text:0000062D                 mov     [ebp+var_14], eax
.text:00000630                 mov     eax, [ebp+var_4]
.text:00000633                 mov     ecx, [eax]
.text:00000635                 push    ecx
.text:00000636                 call    _bignum_bitcount
.text:0000063B                 add     esp, 4
.text:0000063E                 add     eax, 3
.text:00000641                 cdq
.text:00000642                 and     edx, 3
.text:00000645                 add     eax, edx
.text:00000647                 sar     eax, 2
.text:0000064A                 mov     [ebp+var_18], eax
.text:0000064D                 cmp     [ebp+var_18], 1
.text:00000651                 jge     short loc_65A
.text:00000653                 mov     [ebp+var_18], 1
.text:0000065A
.text:0000065A loc_65A:                                ; CODE XREF: _dss_fmtkey+125j
.text:0000065A                 mov     edx, [ebp+var_18]
.text:0000065D                 mov     [ebp+var_10], edx
.text:00000660
.text:00000660 loc_660:                                ; CODE XREF: _dss_fmtkey+18Fj
.text:00000660                 mov     eax, [ebp+var_10]
.text:00000663                 mov     [ebp+var_1C], eax
.text:00000666                 mov     ecx, [ebp+var_10]
.text:00000669                 sub     ecx, 1
.text:0000066C                 mov     [ebp+var_10], ecx
.text:0000066F                 cmp     [ebp+var_1C], 0
.text:00000673                 jz      short loc_6BD
.text:00000675                 mov     eax, [ebp+var_10]
.text:00000678                 cdq
.text:00000679                 sub     eax, edx
.text:0000067B                 sar     eax, 1
.text:0000067D                 push    eax
.text:0000067E                 mov     edx, [ebp+var_4]
.text:00000681                 mov     eax, [edx]
.text:00000683                 push    eax
.text:00000684                 call    _bignum_byte
.text:00000689                 add     esp, 8
.text:0000068C                 mov     ecx, [ebp+var_10]
.text:0000068F                 and     ecx, 80000001h
.text:00000695                 jns     short loc_69C
.text:00000697                 dec     ecx
.text:00000698                 or      ecx, 0FFFFFFFEh
.text:0000069B                 inc     ecx
.text:0000069C
.text:0000069C loc_69C:                                ; CODE XREF: _dss_fmtkey+169j
.text:0000069C                 shl     ecx, 2
.text:0000069F                 sar     eax, cl
.text:000006A1                 and     eax, 0Fh
.text:000006A4                 mov     ecx, [ebp+var_8]
.text:000006A7                 add     ecx, [ebp+var_14]
.text:000006AA                 mov     dl, ds:?hex@?1??dss_fmtkey@@9@9[eax]
.text:000006B0                 mov     [ecx], dl
.text:000006B2                 mov     eax, [ebp+var_14]
.text:000006B5                 add     eax, 1
.text:000006B8                 mov     [ebp+var_14], eax
.text:000006BB                 jmp     short loc_660
.text:000006BD ; ---------------------------------------------------------------------------
.text:000006BD
.text:000006BD loc_6BD:                                ; CODE XREF: _dss_fmtkey+147j
.text:000006BD                 push    offset $SG7283  ; ",0x"
.text:000006C2                 mov     ecx, [ebp+var_8]
.text:000006C5                 add     ecx, [ebp+var_14]
.text:000006C8                 push    ecx             ; char *
.text:000006C9                 call    _sprintf
.text:000006CE                 add     esp, 8
.text:000006D1                 add     eax, [ebp+var_14]
.text:000006D4                 mov     [ebp+var_14], eax
.text:000006D7                 mov     edx, [ebp+var_4]
.text:000006DA                 mov     eax, [edx+4]
.text:000006DD                 push    eax
.text:000006DE                 call    _bignum_bitcount
.text:000006E3                 add     esp, 4
.text:000006E6                 add     eax, 3
.text:000006E9                 cdq
.text:000006EA                 and     edx, 3
.text:000006ED                 add     eax, edx
.text:000006EF                 sar     eax, 2
.text:000006F2                 mov     [ebp+var_18], eax
.text:000006F5                 cmp     [ebp+var_18], 1
.text:000006F9                 jge     short loc_702
.text:000006FB                 mov     [ebp+var_18], 1
.text:00000702
.text:00000702 loc_702:                                ; CODE XREF: _dss_fmtkey+1CDj
.text:00000702                 mov     ecx, [ebp+var_18]
.text:00000705                 mov     [ebp+var_10], ecx
.text:00000708
.text:00000708 loc_708:                                ; CODE XREF: _dss_fmtkey+238j
.text:00000708                 mov     edx, [ebp+var_10]
.text:0000070B                 mov     [ebp+var_20], edx
.text:0000070E                 mov     eax, [ebp+var_10]
.text:00000711                 sub     eax, 1
.text:00000714                 mov     [ebp+var_10], eax
.text:00000717                 cmp     [ebp+var_20], 0
.text:0000071B                 jz      short loc_766
.text:0000071D                 mov     eax, [ebp+var_10]
.text:00000720                 cdq
.text:00000721                 sub     eax, edx
.text:00000723                 sar     eax, 1
.text:00000725                 push    eax
.text:00000726                 mov     ecx, [ebp+var_4]
.text:00000729                 mov     edx, [ecx+4]
.text:0000072C                 push    edx
.text:0000072D                 call    _bignum_byte
.text:00000732                 add     esp, 8
.text:00000735                 mov     ecx, [ebp+var_10]
.text:00000738                 and     ecx, 80000001h
.text:0000073E                 jns     short loc_745
.text:00000740                 dec     ecx
.text:00000741                 or      ecx, 0FFFFFFFEh
.text:00000744                 inc     ecx
.text:00000745
.text:00000745 loc_745:                                ; CODE XREF: _dss_fmtkey+212j
.text:00000745                 shl     ecx, 2
.text:00000748                 sar     eax, cl
.text:0000074A                 and     eax, 0Fh
.text:0000074D                 mov     ecx, [ebp+var_8]
.text:00000750                 add     ecx, [ebp+var_14]
.text:00000753                 mov     dl, ds:?hex@?1??dss_fmtkey@@9@9[eax]
.text:00000759                 mov     [ecx], dl
.text:0000075B                 mov     eax, [ebp+var_14]
.text:0000075E                 add     eax, 1
.text:00000761                 mov     [ebp+var_14], eax
.text:00000764                 jmp     short loc_708
.text:00000766 ; ---------------------------------------------------------------------------
.text:00000766
.text:00000766 loc_766:                                ; CODE XREF: _dss_fmtkey+1EFj
.text:00000766                 push    offset $SG7288  ; ",0x"
.text:0000076B                 mov     ecx, [ebp+var_8]
.text:0000076E                 add     ecx, [ebp+var_14]
.text:00000771                 push    ecx             ; char *
.text:00000772                 call    _sprintf
.text:00000777                 add     esp, 8
.text:0000077A                 add     eax, [ebp+var_14]
.text:0000077D                 mov     [ebp+var_14], eax
.text:00000780                 mov     edx, [ebp+var_4]
.text:00000783                 mov     eax, [edx+8]
.text:00000786                 push    eax
.text:00000787                 call    _bignum_bitcount
.text:0000078C                 add     esp, 4
.text:0000078F                 add     eax, 3
.text:00000792                 cdq
.text:00000793                 and     edx, 3
.text:00000796                 add     eax, edx
.text:00000798                 sar     eax, 2
.text:0000079B                 mov     [ebp+var_18], eax
.text:0000079E                 cmp     [ebp+var_18], 1
.text:000007A2                 jge     short loc_7AB
.text:000007A4                 mov     [ebp+var_18], 1
.text:000007AB
.text:000007AB loc_7AB:                                ; CODE XREF: _dss_fmtkey+276j
.text:000007AB                 mov     ecx, [ebp+var_18]
.text:000007AE                 mov     [ebp+var_10], ecx
.text:000007B1
.text:000007B1 loc_7B1:                                ; CODE XREF: _dss_fmtkey+2E1j
.text:000007B1                 mov     edx, [ebp+var_10]
.text:000007B4                 mov     [ebp+var_24], edx
.text:000007B7                 mov     eax, [ebp+var_10]
.text:000007BA                 sub     eax, 1
.text:000007BD                 mov     [ebp+var_10], eax
.text:000007C0                 cmp     [ebp+var_24], 0
.text:000007C4                 jz      short loc_80F
.text:000007C6                 mov     eax, [ebp+var_10]
.text:000007C9                 cdq
.text:000007CA                 sub     eax, edx
.text:000007CC                 sar     eax, 1
.text:000007CE                 push    eax
.text:000007CF                 mov     ecx, [ebp+var_4]
.text:000007D2                 mov     edx, [ecx+8]
.text:000007D5                 push    edx
.text:000007D6                 call    _bignum_byte
.text:000007DB                 add     esp, 8
.text:000007DE                 mov     ecx, [ebp+var_10]
.text:000007E1                 and     ecx, 80000001h
.text:000007E7                 jns     short loc_7EE
.text:000007E9                 dec     ecx
.text:000007EA                 or      ecx, 0FFFFFFFEh
.text:000007ED                 inc     ecx
.text:000007EE
.text:000007EE loc_7EE:                                ; CODE XREF: _dss_fmtkey+2BBj
.text:000007EE                 shl     ecx, 2
.text:000007F1                 sar     eax, cl
.text:000007F3                 and     eax, 0Fh
.text:000007F6                 mov     ecx, [ebp+var_8]
.text:000007F9                 add     ecx, [ebp+var_14]
.text:000007FC                 mov     dl, ds:?hex@?1??dss_fmtkey@@9@9[eax]
.text:00000802                 mov     [ecx], dl
.text:00000804                 mov     eax, [ebp+var_14]
.text:00000807                 add     eax, 1
.text:0000080A                 mov     [ebp+var_14], eax
.text:0000080D                 jmp     short loc_7B1
.text:0000080F ; ---------------------------------------------------------------------------
.text:0000080F
.text:0000080F loc_80F:                                ; CODE XREF: _dss_fmtkey+298j
.text:0000080F                 push    offset $SG7293  ; ",0x"
.text:00000814                 mov     ecx, [ebp+var_8]
.text:00000817                 add     ecx, [ebp+var_14]
.text:0000081A                 push    ecx             ; char *
.text:0000081B                 call    _sprintf
.text:00000820                 add     esp, 8
.text:00000823                 add     eax, [ebp+var_14]
.text:00000826                 mov     [ebp+var_14], eax
.text:00000829                 mov     edx, [ebp+var_4]
.text:0000082C                 mov     eax, [edx+0Ch]
.text:0000082F                 push    eax
.text:00000830                 call    _bignum_bitcount
.text:00000835                 add     esp, 4
.text:00000838                 add     eax, 3
.text:0000083B                 cdq
.text:0000083C                 and     edx, 3
.text:0000083F                 add     eax, edx
.text:00000841                 sar     eax, 2
.text:00000844                 mov     [ebp+var_18], eax
.text:00000847                 cmp     [ebp+var_18], 1
.text:0000084B                 jge     short loc_854
.text:0000084D                 mov     [ebp+var_18], 1
.text:00000854
.text:00000854 loc_854:                                ; CODE XREF: _dss_fmtkey+31Fj
.text:00000854                 mov     ecx, [ebp+var_18]
.text:00000857                 mov     [ebp+var_10], ecx
.text:0000085A
.text:0000085A loc_85A:                                ; CODE XREF: _dss_fmtkey+38Aj
.text:0000085A                 mov     edx, [ebp+var_10]
.text:0000085D                 mov     [ebp+var_28], edx
.text:00000860                 mov     eax, [ebp+var_10]
.text:00000863                 sub     eax, 1
.text:00000866                 mov     [ebp+var_10], eax
.text:00000869                 cmp     [ebp+var_28], 0
.text:0000086D                 jz      short loc_8B8
.text:0000086F                 mov     eax, [ebp+var_10]
.text:00000872                 cdq
.text:00000873                 sub     eax, edx
.text:00000875                 sar     eax, 1
.text:00000877                 push    eax
.text:00000878                 mov     ecx, [ebp+var_4]
.text:0000087B                 mov     edx, [ecx+0Ch]
.text:0000087E                 push    edx
.text:0000087F                 call    _bignum_byte
.text:00000884                 add     esp, 8
.text:00000887                 mov     ecx, [ebp+var_10]
.text:0000088A                 and     ecx, 80000001h
.text:00000890                 jns     short loc_897
.text:00000892                 dec     ecx
.text:00000893                 or      ecx, 0FFFFFFFEh
.text:00000896                 inc     ecx
.text:00000897
.text:00000897 loc_897:                                ; CODE XREF: _dss_fmtkey+364j
.text:00000897                 shl     ecx, 2
.text:0000089A                 sar     eax, cl
.text:0000089C                 and     eax, 0Fh
.text:0000089F                 mov     ecx, [ebp+var_8]
.text:000008A2                 add     ecx, [ebp+var_14]
.text:000008A5                 mov     dl, ds:?hex@?1??dss_fmtkey@@9@9[eax]
.text:000008AB                 mov     [ecx], dl
.text:000008AD                 mov     eax, [ebp+var_14]
.text:000008B0                 add     eax, 1
.text:000008B3                 mov     [ebp+var_14], eax
.text:000008B6                 jmp     short loc_85A
.text:000008B8 ; ---------------------------------------------------------------------------
.text:000008B8
.text:000008B8 loc_8B8:                                ; CODE XREF: _dss_fmtkey+341j
.text:000008B8                 mov     ecx, [ebp+var_8]
.text:000008BB                 add     ecx, [ebp+var_14]
.text:000008BE                 mov     byte ptr [ecx], 0
.text:000008C1                 mov     eax, [ebp+var_8]
.text:000008C4
.text:000008C4 loc_8C4:                                ; CODE XREF: _dss_fmtkey+26j
.text:000008C4                                         ; _dss_fmtkey+DEj
.text:000008C4                 pop     edi
.text:000008C5                 add     esp, 28h
.text:000008C8                 cmp     ebp, esp
.text:000008CA                 call    __RTC_CheckEsp
.text:000008CF                 mov     esp, ebp
.text:000008D1                 pop     ebp
.text:000008D2                 retn
.text:000008D2 _dss_fmtkey     endp
.text:000008D2
.text:000008D2 ; ---------------------------------------------------------------------------
.text:000008D3                 db 9 dup(0CCh)
.text:000008DC
.text:000008DC ; =============== S U B R O U T I N E =======================================
.text:000008DC
.text:000008DC ; Attributes: bp-based frame
.text:000008DC
.text:000008DC _dss_fingerprint proc near              ; DATA XREF: .rdata:00000154o
.text:000008DC
.text:000008DC var_140         = dword ptr -140h
.text:000008DC var_13C         = dword ptr -13Ch
.text:000008DC var_138         = dword ptr -138h
.text:000008DC var_134         = dword ptr -134h
.text:000008DC var_130         = dword ptr -130h
.text:000008DC var_125         = byte ptr -125h
.text:000008DC var_119         = byte ptr -119h
.text:000008DC var_10D         = byte ptr -10Dh
.text:000008DC var_101         = byte ptr -101h
.text:000008DC var_FC          = dword ptr -0FCh
.text:000008DC var_F8          = dword ptr -0F8h
.text:000008DC var_F4          = dword ptr -0F4h
.text:000008DC var_EC          = byte ptr -0ECh
.text:000008DC var_8C          = byte ptr -8Ch
.text:000008DC var_8B          = byte ptr -8Bh
.text:000008DC var_8A          = byte ptr -8Ah
.text:000008DC var_89          = byte ptr -89h
.text:000008DC var_80          = byte ptr -80h
.text:000008DC var_68          = byte ptr -68h
.text:000008DC var_8           = dword ptr -8
.text:000008DC var_4           = dword ptr -4
.text:000008DC arg_0           = dword ptr  8
.text:000008DC
.text:000008DC                 push    ebp
.text:000008DD                 mov     ebp, esp
.text:000008DF                 sub     esp, 140h
.text:000008E5                 push    edi
.text:000008E6                 lea     edi, [ebp+var_140]
.text:000008EC                 mov     ecx, 50h ; 'P'
.text:000008F1                 mov     eax, 0CCCCCCCCh
.text:000008F6                 rep stosd
.text:000008F8                 mov     eax, dword ptr ds:___security_cookie
.text:000008FD                 xor     eax, ebp
.text:000008FF                 mov     [ebp+var_4], eax
.text:00000902                 mov     eax, [ebp+arg_0]
.text:00000905                 mov     [ebp+var_8], eax
.text:00000908                 lea     ecx, [ebp+var_68]
.text:0000090B                 push    ecx
.text:0000090C                 call    _MD5Init
.text:00000911                 add     esp, 4
.text:00000914                 push    0Bh
.text:00000916                 push    offset $SG7312
.text:0000091B                 lea     edx, [ebp+var_68]
.text:0000091E                 push    edx
.text:0000091F                 call    _MD5Update
.text:00000924                 add     esp, 0Ch
.text:00000927                 mov     eax, [ebp+var_8]
.text:0000092A                 mov     ecx, [eax]
.text:0000092C                 push    ecx
.text:0000092D                 call    _bignum_bitcount
.text:00000932                 add     esp, 4
.text:00000935                 add     eax, 8
.text:00000938                 cdq
.text:00000939                 and     edx, 7
.text:0000093C                 add     eax, edx
.text:0000093E                 sar     eax, 3
.text:00000941                 mov     [ebp+var_F8], eax
.text:00000947                 mov     edx, [ebp+var_F8]
.text:0000094D                 sar     edx, 18h
.text:00000950                 mov     [ebp+var_8C], dl
.text:00000956                 mov     eax, [ebp+var_F8]
.text:0000095C                 sar     eax, 10h
.text:0000095F                 mov     [ebp+var_8B], al
.text:00000965                 mov     ecx, [ebp+var_F8]
.text:0000096B                 sar     ecx, 8
.text:0000096E                 mov     [ebp+var_8A], cl
.text:00000974                 mov     dl, byte ptr [ebp+var_F8]
.text:0000097A                 mov     [ebp+var_89], dl
.text:00000980                 push    4
.text:00000982                 lea     eax, [ebp+var_8C]
.text:00000988                 push    eax
.text:00000989                 lea     ecx, [ebp+var_68]
.text:0000098C                 push    ecx
.text:0000098D                 call    _MD5Update
.text:00000992                 add     esp, 0Ch
.text:00000995                 mov     edx, [ebp+var_F8]
.text:0000099B                 mov     [ebp+var_FC], edx
.text:000009A1
.text:000009A1 loc_9A1:                                ; CODE XREF: _dss_fingerprint+119j
.text:000009A1                 mov     eax, [ebp+var_FC]
.text:000009A7                 mov     [ebp+var_130], eax
.text:000009AD                 mov     ecx, [ebp+var_FC]
.text:000009B3                 sub     ecx, 1
.text:000009B6                 mov     [ebp+var_FC], ecx
.text:000009BC                 cmp     [ebp+var_130], 0
.text:000009C3                 jz      short loc_9F7
.text:000009C5                 mov     edx, [ebp+var_FC]
.text:000009CB                 push    edx
.text:000009CC                 mov     eax, [ebp+var_8]
.text:000009CF                 mov     ecx, [eax]
.text:000009D1                 push    ecx
.text:000009D2                 call    _bignum_byte
.text:000009D7                 add     esp, 8
.text:000009DA                 mov     [ebp+var_101], al
.text:000009E0                 push    1
.text:000009E2                 lea     edx, [ebp+var_101]
.text:000009E8                 push    edx
.text:000009E9                 lea     eax, [ebp+var_68]
.text:000009EC                 push    eax
.text:000009ED                 call    _MD5Update
.text:000009F2                 add     esp, 0Ch
.text:000009F5                 jmp     short loc_9A1
.text:000009F7 ; ---------------------------------------------------------------------------
.text:000009F7
.text:000009F7 loc_9F7:                                ; CODE XREF: _dss_fingerprint+E7j
.text:000009F7                 mov     ecx, [ebp+var_8]
.text:000009FA                 mov     edx, [ecx+4]
.text:000009FD                 push    edx
.text:000009FE                 call    _bignum_bitcount
.text:00000A03                 add     esp, 4
.text:00000A06                 add     eax, 8
.text:00000A09                 cdq
.text:00000A0A                 and     edx, 7
.text:00000A0D                 add     eax, edx
.text:00000A0F                 sar     eax, 3
.text:00000A12                 mov     [ebp+var_F8], eax
.text:00000A18                 mov     eax, [ebp+var_F8]
.text:00000A1E                 sar     eax, 18h
.text:00000A21                 mov     [ebp+var_8C], al
.text:00000A27                 mov     ecx, [ebp+var_F8]
.text:00000A2D                 sar     ecx, 10h
.text:00000A30                 mov     [ebp+var_8B], cl
.text:00000A36                 mov     edx, [ebp+var_F8]
.text:00000A3C                 sar     edx, 8
.text:00000A3F                 mov     [ebp+var_8A], dl
.text:00000A45                 mov     al, byte ptr [ebp+var_F8]
.text:00000A4B                 mov     [ebp+var_89], al
.text:00000A51                 push    4
.text:00000A53                 lea     ecx, [ebp+var_8C]
.text:00000A59                 push    ecx
.text:00000A5A                 lea     edx, [ebp+var_68]
.text:00000A5D                 push    edx
.text:00000A5E                 call    _MD5Update
.text:00000A63                 add     esp, 0Ch
.text:00000A66                 mov     eax, [ebp+var_F8]
.text:00000A6C                 mov     [ebp+var_FC], eax
.text:00000A72
.text:00000A72 loc_A72:                                ; CODE XREF: _dss_fingerprint+1EBj
.text:00000A72                 mov     ecx, [ebp+var_FC]
.text:00000A78                 mov     [ebp+var_134], ecx
.text:00000A7E                 mov     edx, [ebp+var_FC]
.text:00000A84                 sub     edx, 1
.text:00000A87                 mov     [ebp+var_FC], edx
.text:00000A8D                 cmp     [ebp+var_134], 0
.text:00000A94                 jz      short loc_AC9
.text:00000A96                 mov     eax, [ebp+var_FC]
.text:00000A9C                 push    eax
.text:00000A9D                 mov     ecx, [ebp+var_8]
.text:00000AA0                 mov     edx, [ecx+4]
.text:00000AA3                 push    edx
.text:00000AA4                 call    _bignum_byte
.text:00000AA9                 add     esp, 8
.text:00000AAC                 mov     [ebp+var_10D], al
.text:00000AB2                 push    1
.text:00000AB4                 lea     eax, [ebp+var_10D]
.text:00000ABA                 push    eax
.text:00000ABB                 lea     ecx, [ebp+var_68]
.text:00000ABE                 push    ecx
.text:00000ABF                 call    _MD5Update
.text:00000AC4                 add     esp, 0Ch
.text:00000AC7                 jmp     short loc_A72
.text:00000AC9 ; ---------------------------------------------------------------------------
.text:00000AC9
.text:00000AC9 loc_AC9:                                ; CODE XREF: _dss_fingerprint+1B8j
.text:00000AC9                 mov     edx, [ebp+var_8]
.text:00000ACC                 mov     eax, [edx+8]
.text:00000ACF                 push    eax
.text:00000AD0                 call    _bignum_bitcount
.text:00000AD5                 add     esp, 4
.text:00000AD8                 add     eax, 8
.text:00000ADB                 cdq
.text:00000ADC                 and     edx, 7
.text:00000ADF                 add     eax, edx
.text:00000AE1                 sar     eax, 3
.text:00000AE4                 mov     [ebp+var_F8], eax
.text:00000AEA                 mov     ecx, [ebp+var_F8]
.text:00000AF0                 sar     ecx, 18h
.text:00000AF3                 mov     [ebp+var_8C], cl
.text:00000AF9                 mov     edx, [ebp+var_F8]
.text:00000AFF                 sar     edx, 10h
.text:00000B02                 mov     [ebp+var_8B], dl
.text:00000B08                 mov     eax, [ebp+var_F8]
.text:00000B0E                 sar     eax, 8
.text:00000B11                 mov     [ebp+var_8A], al
.text:00000B17                 mov     cl, byte ptr [ebp+var_F8]
.text:00000B1D                 mov     [ebp+var_89], cl
.text:00000B23                 push    4
.text:00000B25                 lea     edx, [ebp+var_8C]
.text:00000B2B                 push    edx
.text:00000B2C                 lea     eax, [ebp+var_68]
.text:00000B2F                 push    eax
.text:00000B30                 call    _MD5Update
.text:00000B35                 add     esp, 0Ch
.text:00000B38                 mov     ecx, [ebp+var_F8]
.text:00000B3E                 mov     [ebp+var_FC], ecx
.text:00000B44
.text:00000B44 loc_B44:                                ; CODE XREF: _dss_fingerprint+2BDj
.text:00000B44                 mov     edx, [ebp+var_FC]
.text:00000B4A                 mov     [ebp+var_138], edx
.text:00000B50                 mov     eax, [ebp+var_FC]
.text:00000B56                 sub     eax, 1
.text:00000B59                 mov     [ebp+var_FC], eax
.text:00000B5F                 cmp     [ebp+var_138], 0
.text:00000B66                 jz      short loc_B9B
.text:00000B68                 mov     ecx, [ebp+var_FC]
.text:00000B6E                 push    ecx
.text:00000B6F                 mov     edx, [ebp+var_8]
.text:00000B72                 mov     eax, [edx+8]
.text:00000B75                 push    eax
.text:00000B76                 call    _bignum_byte
.text:00000B7B                 add     esp, 8
.text:00000B7E                 mov     [ebp+var_119], al
.text:00000B84                 push    1
.text:00000B86                 lea     ecx, [ebp+var_119]
.text:00000B8C                 push    ecx
.text:00000B8D                 lea     edx, [ebp+var_68]
.text:00000B90                 push    edx
.text:00000B91                 call    _MD5Update
.text:00000B96                 add     esp, 0Ch
.text:00000B99                 jmp     short loc_B44
.text:00000B9B ; ---------------------------------------------------------------------------
.text:00000B9B
.text:00000B9B loc_B9B:                                ; CODE XREF: _dss_fingerprint+28Aj
.text:00000B9B                 mov     eax, [ebp+var_8]
.text:00000B9E                 mov     ecx, [eax+0Ch]
.text:00000BA1                 push    ecx
.text:00000BA2                 call    _bignum_bitcount
.text:00000BA7                 add     esp, 4
.text:00000BAA                 add     eax, 8
.text:00000BAD                 cdq
.text:00000BAE                 and     edx, 7
.text:00000BB1                 add     eax, edx
.text:00000BB3                 sar     eax, 3
.text:00000BB6                 mov     [ebp+var_F8], eax
.text:00000BBC                 mov     edx, [ebp+var_F8]
.text:00000BC2                 sar     edx, 18h
.text:00000BC5                 mov     [ebp+var_8C], dl
.text:00000BCB                 mov     eax, [ebp+var_F8]
.text:00000BD1                 sar     eax, 10h
.text:00000BD4                 mov     [ebp+var_8B], al
.text:00000BDA                 mov     ecx, [ebp+var_F8]
.text:00000BE0                 sar     ecx, 8
.text:00000BE3                 mov     [ebp+var_8A], cl
.text:00000BE9                 mov     dl, byte ptr [ebp+var_F8]
.text:00000BEF                 mov     [ebp+var_89], dl
.text:00000BF5                 push    4
.text:00000BF7                 lea     eax, [ebp+var_8C]
.text:00000BFD                 push    eax
.text:00000BFE                 lea     ecx, [ebp+var_68]
.text:00000C01                 push    ecx
.text:00000C02                 call    _MD5Update
.text:00000C07                 add     esp, 0Ch
.text:00000C0A                 mov     edx, [ebp+var_F8]
.text:00000C10                 mov     [ebp+var_FC], edx
.text:00000C16
.text:00000C16 loc_C16:                                ; CODE XREF: _dss_fingerprint+38Fj
.text:00000C16                 mov     eax, [ebp+var_FC]
.text:00000C1C                 mov     [ebp+var_13C], eax
.text:00000C22                 mov     ecx, [ebp+var_FC]
.text:00000C28                 sub     ecx, 1
.text:00000C2B                 mov     [ebp+var_FC], ecx
.text:00000C31                 cmp     [ebp+var_13C], 0
.text:00000C38                 jz      short loc_C6D
.text:00000C3A                 mov     edx, [ebp+var_FC]
.text:00000C40                 push    edx
.text:00000C41                 mov     eax, [ebp+var_8]
.text:00000C44                 mov     ecx, [eax+0Ch]
.text:00000C47                 push    ecx
.text:00000C48                 call    _bignum_byte
.text:00000C4D                 add     esp, 8
.text:00000C50                 mov     [ebp+var_125], al
.text:00000C56                 push    1
.text:00000C58                 lea     edx, [ebp+var_125]
.text:00000C5E                 push    edx
.text:00000C5F                 lea     eax, [ebp+var_68]
.text:00000C62                 push    eax
.text:00000C63                 call    _MD5Update
.text:00000C68                 add     esp, 0Ch
.text:00000C6B                 jmp     short loc_C16
.text:00000C6D ; ---------------------------------------------------------------------------
.text:00000C6D
.text:00000C6D loc_C6D:                                ; CODE XREF: _dss_fingerprint+35Cj
.text:00000C6D                 lea     ecx, [ebp+var_68]
.text:00000C70                 push    ecx
.text:00000C71                 lea     edx, [ebp+var_80]
.text:00000C74                 push    edx
.text:00000C75                 call    _MD5Final
.text:00000C7A                 add     esp, 8
.text:00000C7D                 mov     eax, [ebp+var_8]
.text:00000C80                 mov     ecx, [eax]
.text:00000C82                 push    ecx
.text:00000C83                 call    _bignum_bitcount
.text:00000C88                 add     esp, 4
.text:00000C8B                 push    eax
.text:00000C8C                 push    offset $SG7345  ; "ssh-dss %d "
.text:00000C91                 lea     edx, [ebp+var_EC]
.text:00000C97                 push    edx             ; char *
.text:00000C98                 call    _sprintf
.text:00000C9D                 add     esp, 0Ch
.text:00000CA0                 mov     [ebp+var_FC], 0
.text:00000CAA                 jmp     short loc_CBB
.text:00000CAC ; ---------------------------------------------------------------------------
.text:00000CAC
.text:00000CAC loc_CAC:                                ; CODE XREF: _dss_fingerprint+43Ej
.text:00000CAC                 mov     eax, [ebp+var_FC]
.text:00000CB2                 add     eax, 1
.text:00000CB5                 mov     [ebp+var_FC], eax
.text:00000CBB
.text:00000CBB loc_CBB:                                ; CODE XREF: _dss_fingerprint+3CEj
.text:00000CBB                 cmp     [ebp+var_FC], 10h
.text:00000CC2                 jge     short loc_D1C
.text:00000CC4                 cmp     [ebp+var_FC], 0
.text:00000CCB                 jz      short loc_CD9
.text:00000CCD                 mov     [ebp+var_140], offset $SG7349
.text:00000CD7                 jmp     short loc_CE3
.text:00000CD9 ; ---------------------------------------------------------------------------
.text:00000CD9
.text:00000CD9 loc_CD9:                                ; CODE XREF: _dss_fingerprint+3EFj
.text:00000CD9                 mov     [ebp+var_140], offset $SG7350
.text:00000CE3
.text:00000CE3 loc_CE3:                                ; CODE XREF: _dss_fingerprint+3FBj
.text:00000CE3                 mov     ecx, [ebp+var_FC]
.text:00000CE9                 movzx   edx, [ebp+ecx+var_80]
.text:00000CEE                 push    edx
.text:00000CEF                 mov     eax, [ebp+var_140]
.text:00000CF5                 push    eax
.text:00000CF6                 push    offset $SG7351  ; "%s%02x"
.text:00000CFB                 lea     ecx, [ebp+var_EC]
.text:00000D01                 push    ecx             ; char *
.text:00000D02                 call    _strlen
.text:00000D07                 add     esp, 4
.text:00000D0A                 lea     edx, [ebp+eax+var_EC]
.text:00000D11                 push    edx             ; char *
.text:00000D12                 call    _sprintf
.text:00000D17                 add     esp, 10h
.text:00000D1A                 jmp     short loc_CAC
.text:00000D1C ; ---------------------------------------------------------------------------
.text:00000D1C
.text:00000D1C loc_D1C:                                ; CODE XREF: _dss_fingerprint+3E6j
.text:00000D1C                 push    1
.text:00000D1E                 lea     eax, [ebp+var_EC]
.text:00000D24                 push    eax             ; char *
.text:00000D25                 call    _strlen
.text:00000D2A                 add     esp, 4
.text:00000D2D                 add     eax, 1
.text:00000D30                 push    eax
.text:00000D31                 call    _safemalloc
.text:00000D36                 add     esp, 8
.text:00000D39                 mov     [ebp+var_F4], eax
.text:00000D3F                 cmp     [ebp+var_F4], 0
.text:00000D46                 jz      short loc_D5E
.text:00000D48                 lea     ecx, [ebp+var_EC]
.text:00000D4E                 push    ecx             ; char *
.text:00000D4F                 mov     edx, [ebp+var_F4]
.text:00000D55                 push    edx             ; char *
.text:00000D56                 call    _strcpy
.text:00000D5B                 add     esp, 8
.text:00000D5E
.text:00000D5E loc_D5E:                                ; CODE XREF: _dss_fingerprint+46Aj
.text:00000D5E                 mov     eax, [ebp+var_F4]
.text:00000D64                 push    edx
.text:00000D65                 mov     ecx, ebp
.text:00000D67                 push    eax
.text:00000D68                 lea     edx, $LN26
.text:00000D6E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D73                 pop     eax
.text:00000D74                 pop     edx
.text:00000D75                 pop     edi
.text:00000D76                 mov     ecx, [ebp+var_4]
.text:00000D79                 xor     ecx, ebp
.text:00000D7B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000D80                 add     esp, 140h
.text:00000D86                 cmp     ebp, esp
.text:00000D88                 call    __RTC_CheckEsp
.text:00000D8D                 mov     esp, ebp
.text:00000D8F                 pop     ebp
.text:00000D90                 retn
.text:00000D90 _dss_fingerprint endp
.text:00000D90
.text:00000D90 ; ---------------------------------------------------------------------------
.text:00000D91                 align 4
.text:00000D94 $LN26           dd 8                    ; DATA XREF: _dss_fingerprint+48Co
.text:00000D98                 dd offset $LN25
.text:00000D9C $LN25           dd 0FFFFFF98h, 5Ch      ; DATA XREF: .text:00000D98o
.text:00000DA4                 dd offset $LN17         ; "md5c"
.text:00000DA8                 dd 0FFFFFF80h, 10h
.text:00000DB0                 dd offset $LN18         ; "digest"
.text:00000DB4                 dd 0FFFFFF74h, 4
.text:00000DBC                 dd offset $LN19         ; "lenbuf"
.text:00000DC0                 dd 0FFFFFF14h, 58h
.text:00000DC8                 dd offset $LN20         ; "buffer"
.text:00000DCC                 dd 0FFFFFEFFh, 1
.text:00000DD4                 dd offset $LN21
.text:00000DD8                 dd 0FFFFFEF3h, 1
.text:00000DE0                 dd offset $LN22
.text:00000DE4                 dd 0FFFFFEE7h, 1
.text:00000DEC                 dd offset $LN23
.text:00000DF0                 dd 0FFFFFEDBh, 1
.text:00000DF8                 dd offset $LN24
.text:00000DFC $LN24           db  63h ; c             ; DATA XREF: .text:00000DF8o
.text:00000DFD                 align 2
.text:00000DFE $LN23           dw 63h                  ; DATA XREF: .text:00000DECo
.text:00000E00 $LN22           db 63h, 0               ; DATA XREF: .text:00000DE0o
.text:00000E02 $LN21           dw 63h                  ; DATA XREF: .text:00000DD4o
.text:00000E04 $LN20           db 'buffer',0           ; DATA XREF: .text:00000DC8o
.text:00000E0B $LN19           db 'lenbuf',0           ; DATA XREF: .text:00000DBCo
.text:00000E12 $LN18           db 'digest',0           ; DATA XREF: .text:00000DB0o
.text:00000E19 $LN17           db 'md5c',0             ; DATA XREF: .text:00000DA4o
.text:00000E1E                 db 0Eh dup(0CCh)
.text:00000E2C
.text:00000E2C ; =============== S U B R O U T I N E =======================================
.text:00000E2C
.text:00000E2C ; Attributes: bp-based frame
.text:00000E2C
.text:00000E2C _dss_verifysig  proc near               ; DATA XREF: .rdata:00000158o
.text:00000E2C
.text:00000E2C var_68          = dword ptr -68h
.text:00000E2C var_64          = dword ptr -64h
.text:00000E2C var_60          = dword ptr -60h
.text:00000E2C var_5C          = dword ptr -5Ch
.text:00000E2C var_58          = dword ptr -58h
.text:00000E2C var_54          = dword ptr -54h
.text:00000E2C var_50          = dword ptr -50h
.text:00000E2C var_4C          = dword ptr -4Ch
.text:00000E2C var_48          = dword ptr -48h
.text:00000E2C var_44          = dword ptr -44h
.text:00000E2C var_40          = dword ptr -40h
.text:00000E2C var_38          = byte ptr -38h
.text:00000E2C var_1C          = dword ptr -1Ch
.text:00000E2C var_10          = dword ptr -10h
.text:00000E2C var_8           = dword ptr -8
.text:00000E2C var_4           = dword ptr -4
.text:00000E2C arg_0           = dword ptr  8
.text:00000E2C arg_4           = dword ptr  0Ch
.text:00000E2C arg_8           = dword ptr  10h
.text:00000E2C arg_C           = dword ptr  14h
.text:00000E2C arg_10          = dword ptr  18h
.text:00000E2C
.text:00000E2C                 push    ebp
.text:00000E2D                 mov     ebp, esp
.text:00000E2F                 sub     esp, 68h
.text:00000E32                 push    edi
.text:00000E33                 lea     edi, [ebp+var_68]
.text:00000E36                 mov     ecx, 1Ah
.text:00000E3B                 mov     eax, 0CCCCCCCCh
.text:00000E40                 rep stosd
.text:00000E42                 mov     eax, dword ptr ds:___security_cookie
.text:00000E47                 xor     eax, ebp
.text:00000E49                 mov     [ebp+var_4], eax
.text:00000E4C                 mov     eax, [ebp+arg_0]
.text:00000E4F                 mov     [ebp+var_8], eax
.text:00000E52                 mov     ecx, [ebp+var_8]
.text:00000E55                 cmp     dword ptr [ecx], 0
.text:00000E58                 jnz     short loc_E61
.text:00000E5A                 xor     eax, eax
.text:00000E5C                 jmp     loc_10F2
.text:00000E61 ; ---------------------------------------------------------------------------
.text:00000E61
.text:00000E61 loc_E61:                                ; CODE XREF: _dss_verifysig+2Cj
.text:00000E61                 cmp     [ebp+arg_8], 28h ; '('
.text:00000E65                 jz      short loc_EBB
.text:00000E67                 lea     edx, [ebp+var_1C]
.text:00000E6A                 push    edx
.text:00000E6B                 lea     eax, [ebp+var_10]
.text:00000E6E                 push    eax
.text:00000E6F                 lea     ecx, [ebp+arg_8]
.text:00000E72                 push    ecx
.text:00000E73                 lea     edx, [ebp+arg_4]
.text:00000E76                 push    edx
.text:00000E77                 call    _getstring
.text:00000E7C                 add     esp, 10h
.text:00000E7F                 cmp     [ebp+var_10], 0
.text:00000E83                 jz      short loc_EA2
.text:00000E85                 cmp     [ebp+var_1C], 7
.text:00000E89                 jnz     short loc_EA2
.text:00000E8B                 push    7               ; size_t
.text:00000E8D                 push    offset $SG7387  ; "ssh-dss"
.text:00000E92                 mov     eax, [ebp+var_10]
.text:00000E95                 push    eax             ; void *
.text:00000E96                 call    _memcmp
.text:00000E9B                 add     esp, 0Ch
.text:00000E9E                 test    eax, eax
.text:00000EA0                 jz      short loc_EA9
.text:00000EA2
.text:00000EA2 loc_EA2:                                ; CODE XREF: _dss_verifysig+57j
.text:00000EA2                                         ; _dss_verifysig+5Dj
.text:00000EA2                 xor     eax, eax
.text:00000EA4                 jmp     loc_10F2
.text:00000EA9 ; ---------------------------------------------------------------------------
.text:00000EA9
.text:00000EA9 loc_EA9:                                ; CODE XREF: _dss_verifysig+74j
.text:00000EA9                 mov     ecx, [ebp+arg_4]
.text:00000EAC                 add     ecx, 4
.text:00000EAF                 mov     [ebp+arg_4], ecx
.text:00000EB2                 mov     edx, [ebp+arg_8]
.text:00000EB5                 sub     edx, 4
.text:00000EB8                 mov     [ebp+arg_8], edx
.text:00000EBB
.text:00000EBB loc_EBB:                                ; CODE XREF: _dss_verifysig+39j
.text:00000EBB                 lea     eax, [ebp+arg_8]
.text:00000EBE                 push    eax
.text:00000EBF                 lea     ecx, [ebp+arg_4]
.text:00000EC2                 push    ecx
.text:00000EC3                 call    _get160
.text:00000EC8                 add     esp, 8
.text:00000ECB                 mov     [ebp+var_40], eax
.text:00000ECE                 lea     edx, [ebp+arg_8]
.text:00000ED1                 push    edx
.text:00000ED2                 lea     eax, [ebp+arg_4]
.text:00000ED5                 push    eax
.text:00000ED6                 call    _get160
.text:00000EDB                 add     esp, 8
.text:00000EDE                 mov     [ebp+var_44], eax
.text:00000EE1                 cmp     [ebp+var_40], 0
.text:00000EE5                 jz      short loc_EED
.text:00000EE7                 cmp     [ebp+var_44], 0
.text:00000EEB                 jnz     short loc_F18
.text:00000EED
.text:00000EED loc_EED:                                ; CODE XREF: _dss_verifysig+B9j
.text:00000EED                 cmp     [ebp+var_40], 0
.text:00000EF1                 jz      short loc_EFF
.text:00000EF3                 mov     ecx, [ebp+var_40]
.text:00000EF6                 push    ecx
.text:00000EF7                 call    _freebn
.text:00000EFC                 add     esp, 4
.text:00000EFF
.text:00000EFF loc_EFF:                                ; CODE XREF: _dss_verifysig+C5j
.text:00000EFF                 cmp     [ebp+var_44], 0
.text:00000F03                 jz      short loc_F11
.text:00000F05                 mov     edx, [ebp+var_44]
.text:00000F08                 push    edx
.text:00000F09                 call    _freebn
.text:00000F0E                 add     esp, 4
.text:00000F11
.text:00000F11 loc_F11:                                ; CODE XREF: _dss_verifysig+D7j
.text:00000F11                 xor     eax, eax
.text:00000F13                 jmp     loc_10F2
.text:00000F18 ; ---------------------------------------------------------------------------
.text:00000F18
.text:00000F18 loc_F18:                                ; CODE XREF: _dss_verifysig+BFj
.text:00000F18                 mov     eax, dword ptr ds:_Zero
.text:00000F1D                 push    eax
.text:00000F1E                 mov     ecx, [ebp+var_44]
.text:00000F21                 push    ecx
.text:00000F22                 call    _bignum_cmp
.text:00000F27                 add     esp, 8
.text:00000F2A                 test    eax, eax
.text:00000F2C                 jnz     short loc_F4D
.text:00000F2E                 mov     edx, [ebp+var_40]
.text:00000F31                 push    edx
.text:00000F32                 call    _freebn
.text:00000F37                 add     esp, 4
.text:00000F3A                 mov     eax, [ebp+var_44]
.text:00000F3D                 push    eax
.text:00000F3E                 call    _freebn
.text:00000F43                 add     esp, 4
.text:00000F46                 xor     eax, eax
.text:00000F48                 jmp     loc_10F2
.text:00000F4D ; ---------------------------------------------------------------------------
.text:00000F4D
.text:00000F4D loc_F4D:                                ; CODE XREF: _dss_verifysig+100j
.text:00000F4D                 mov     ecx, [ebp+var_8]
.text:00000F50                 mov     edx, [ecx+4]
.text:00000F53                 push    edx
.text:00000F54                 mov     eax, [ebp+var_44]
.text:00000F57                 push    eax
.text:00000F58                 call    _modinv
.text:00000F5D                 add     esp, 8
.text:00000F60                 mov     [ebp+var_48], eax
.text:00000F63                 cmp     [ebp+var_48], 0
.text:00000F67                 jnz     short loc_F88
.text:00000F69                 mov     ecx, [ebp+var_40]
.text:00000F6C                 push    ecx
.text:00000F6D                 call    _freebn
.text:00000F72                 add     esp, 4
.text:00000F75                 mov     edx, [ebp+var_44]
.text:00000F78                 push    edx
.text:00000F79                 call    _freebn
.text:00000F7E                 add     esp, 4
.text:00000F81                 xor     eax, eax
.text:00000F83                 jmp     loc_10F2
.text:00000F88 ; ---------------------------------------------------------------------------
.text:00000F88
.text:00000F88 loc_F88:                                ; CODE XREF: _dss_verifysig+13Bj
.text:00000F88                 lea     eax, [ebp+var_38]
.text:00000F8B                 push    eax
.text:00000F8C                 mov     ecx, [ebp+arg_10]
.text:00000F8F                 push    ecx
.text:00000F90                 mov     edx, [ebp+arg_C]
.text:00000F93                 push    edx
.text:00000F94                 call    _SHA_Simple
.text:00000F99                 add     esp, 0Ch
.text:00000F9C                 lea     eax, [ebp+var_38]
.text:00000F9F                 mov     [ebp+var_10], eax
.text:00000FA2                 mov     [ebp+var_1C], 14h
.text:00000FA9                 lea     ecx, [ebp+var_1C]
.text:00000FAC                 push    ecx
.text:00000FAD                 lea     edx, [ebp+var_10]
.text:00000FB0                 push    edx
.text:00000FB1                 call    _get160
.text:00000FB6                 add     esp, 8
.text:00000FB9                 mov     [ebp+var_60], eax
.text:00000FBC                 mov     eax, [ebp+var_8]
.text:00000FBF                 mov     ecx, [eax+4]
.text:00000FC2                 push    ecx
.text:00000FC3                 mov     edx, [ebp+var_48]
.text:00000FC6                 push    edx
.text:00000FC7                 mov     eax, [ebp+var_60]
.text:00000FCA                 push    eax
.text:00000FCB                 call    _modmul
.text:00000FD0                 add     esp, 0Ch
.text:00000FD3                 mov     [ebp+var_58], eax
.text:00000FD6                 mov     ecx, [ebp+var_8]
.text:00000FD9                 mov     edx, [ecx+4]
.text:00000FDC                 push    edx
.text:00000FDD                 mov     eax, [ebp+var_48]
.text:00000FE0                 push    eax
.text:00000FE1                 mov     ecx, [ebp+var_40]
.text:00000FE4                 push    ecx
.text:00000FE5                 call    _modmul
.text:00000FEA                 add     esp, 0Ch
.text:00000FED                 mov     [ebp+var_5C], eax
.text:00000FF0                 mov     edx, [ebp+var_8]
.text:00000FF3                 mov     eax, [edx]
.text:00000FF5                 push    eax
.text:00000FF6                 mov     ecx, [ebp+var_58]
.text:00000FF9                 push    ecx
.text:00000FFA                 mov     edx, [ebp+var_8]
.text:00000FFD                 mov     eax, [edx+8]
.text:00001000                 push    eax
.text:00001001                 call    _modpow
.text:00001006                 add     esp, 0Ch
.text:00001009                 mov     [ebp+var_4C], eax
.text:0000100C                 mov     ecx, [ebp+var_8]
.text:0000100F                 mov     edx, [ecx]
.text:00001011                 push    edx
.text:00001012                 mov     eax, [ebp+var_5C]
.text:00001015                 push    eax
.text:00001016                 mov     ecx, [ebp+var_8]
.text:00001019                 mov     edx, [ecx+0Ch]
.text:0000101C                 push    edx
.text:0000101D                 call    _modpow
.text:00001022                 add     esp, 0Ch
.text:00001025                 mov     [ebp+var_50], eax
.text:00001028                 mov     eax, [ebp+var_8]
.text:0000102B                 mov     ecx, [eax]
.text:0000102D                 push    ecx
.text:0000102E                 mov     edx, [ebp+var_50]
.text:00001031                 push    edx
.text:00001032                 mov     eax, [ebp+var_4C]
.text:00001035                 push    eax
.text:00001036                 call    _modmul
.text:0000103B                 add     esp, 0Ch
.text:0000103E                 mov     [ebp+var_54], eax
.text:00001041                 mov     ecx, [ebp+var_8]
.text:00001044                 mov     edx, [ecx+4]
.text:00001047                 push    edx
.text:00001048                 mov     eax, dword ptr ds:_One
.text:0000104D                 push    eax
.text:0000104E                 mov     ecx, [ebp+var_54]
.text:00001051                 push    ecx
.text:00001052                 call    _modmul
.text:00001057                 add     esp, 0Ch
.text:0000105A                 mov     [ebp+var_64], eax
.text:0000105D                 mov     edx, [ebp+var_40]
.text:00001060                 push    edx
.text:00001061                 mov     eax, [ebp+var_64]
.text:00001064                 push    eax
.text:00001065                 call    _bignum_cmp
.text:0000106A                 add     esp, 8
.text:0000106D                 neg     eax
.text:0000106F                 sbb     eax, eax
.text:00001071                 add     eax, 1
.text:00001074                 mov     [ebp+var_68], eax
.text:00001077                 mov     ecx, [ebp+var_48]
.text:0000107A                 push    ecx
.text:0000107B                 call    _freebn
.text:00001080                 add     esp, 4
.text:00001083                 mov     edx, [ebp+var_60]
.text:00001086                 push    edx
.text:00001087                 call    _freebn
.text:0000108C                 add     esp, 4
.text:0000108F                 mov     eax, [ebp+var_58]
.text:00001092                 push    eax
.text:00001093                 call    _freebn
.text:00001098                 add     esp, 4
.text:0000109B                 mov     ecx, [ebp+var_5C]
.text:0000109E                 push    ecx
.text:0000109F                 call    _freebn
.text:000010A4                 add     esp, 4
.text:000010A7                 mov     edx, [ebp+var_4C]
.text:000010AA                 push    edx
.text:000010AB                 call    _freebn
.text:000010B0                 add     esp, 4
.text:000010B3                 mov     eax, [ebp+var_50]
.text:000010B6                 push    eax
.text:000010B7                 call    _freebn
.text:000010BC                 add     esp, 4
.text:000010BF                 mov     ecx, [ebp+var_54]
.text:000010C2                 push    ecx
.text:000010C3                 call    _freebn
.text:000010C8                 add     esp, 4
.text:000010CB                 mov     edx, [ebp+var_64]
.text:000010CE                 push    edx
.text:000010CF                 call    _freebn
.text:000010D4                 add     esp, 4
.text:000010D7                 mov     eax, [ebp+var_40]
.text:000010DA                 push    eax
.text:000010DB                 call    _freebn
.text:000010E0                 add     esp, 4
.text:000010E3                 mov     ecx, [ebp+var_44]
.text:000010E6                 push    ecx
.text:000010E7                 call    _freebn
.text:000010EC                 add     esp, 4
.text:000010EF                 mov     eax, [ebp+var_68]
.text:000010F2
.text:000010F2 loc_10F2:                               ; CODE XREF: _dss_verifysig+30j
.text:000010F2                                         ; _dss_verifysig+78j ...
.text:000010F2                 push    edx
.text:000010F3                 mov     ecx, ebp
.text:000010F5                 push    eax
.text:000010F6                 lea     edx, $LN17_0
.text:000010FC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001101                 pop     eax
.text:00001102                 pop     edx
.text:00001103                 pop     edi
.text:00001104                 mov     ecx, [ebp+var_4]
.text:00001107                 xor     ecx, ebp
.text:00001109                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000110E                 add     esp, 68h
.text:00001111                 cmp     ebp, esp
.text:00001113                 call    __RTC_CheckEsp
.text:00001118                 mov     esp, ebp
.text:0000111A                 pop     ebp
.text:0000111B                 retn
.text:0000111B _dss_verifysig  endp
.text:0000111B
.text:0000111B ; ---------------------------------------------------------------------------
.text:0000111C $LN17_0         dd 3                    ; DATA XREF: _dss_verifysig+2CAo
.text:00001120                 dd offset $LN16
.text:00001124 $LN16           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00001120o
.text:0000112C                 dd offset $LN13         ; "p"
.text:00001130                 dd 0FFFFFFE4h, 4
.text:00001138                 dd offset $LN14         ; "slen"
.text:0000113C                 dd 0FFFFFFC8h, 14h
.text:00001144                 dd offset $LN15         ; "hash"
.text:00001148 $LN15           db 'hash',0             ; DATA XREF: .text:00001144o
.text:0000114D $LN14           db 'slen',0             ; DATA XREF: .text:00001138o
.text:00001152 $LN13           db 'p',0                ; DATA XREF: .text:0000112Co
.text:00001154                 db 8 dup(0CCh)
.text:0000115C
.text:0000115C ; =============== S U B R O U T I N E =======================================
.text:0000115C
.text:0000115C ; Attributes: bp-based frame
.text:0000115C
.text:0000115C _get160         proc near               ; CODE XREF: _dss_verifysig+97p
.text:0000115C                                         ; _dss_verifysig+AAp ...
.text:0000115C
.text:0000115C var_4           = dword ptr -4
.text:0000115C arg_0           = dword ptr  8
.text:0000115C arg_4           = dword ptr  0Ch
.text:0000115C
.text:0000115C                 push    ebp
.text:0000115D                 mov     ebp, esp
.text:0000115F                 push    ecx
.text:00001160                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001167                 mov     eax, [ebp+arg_4]
.text:0000116A                 cmp     dword ptr [eax], 14h
.text:0000116D                 jge     short loc_1173
.text:0000116F                 xor     eax, eax
.text:00001171                 jmp     short loc_11A3
.text:00001173 ; ---------------------------------------------------------------------------
.text:00001173
.text:00001173 loc_1173:                               ; CODE XREF: _get160+11j
.text:00001173                 push    14h
.text:00001175                 mov     ecx, [ebp+arg_0]
.text:00001178                 mov     edx, [ecx]
.text:0000117A                 push    edx
.text:0000117B                 call    _bignum_from_bytes
.text:00001180                 add     esp, 8
.text:00001183                 mov     [ebp+var_4], eax
.text:00001186                 mov     eax, [ebp+arg_0]
.text:00001189                 mov     ecx, [eax]
.text:0000118B                 add     ecx, 14h
.text:0000118E                 mov     edx, [ebp+arg_0]
.text:00001191                 mov     [edx], ecx
.text:00001193                 mov     eax, [ebp+arg_4]
.text:00001196                 mov     ecx, [eax]
.text:00001198                 sub     ecx, 14h
.text:0000119B                 mov     edx, [ebp+arg_4]
.text:0000119E                 mov     [edx], ecx
.text:000011A0                 mov     eax, [ebp+var_4]
.text:000011A3
.text:000011A3 loc_11A3:                               ; CODE XREF: _get160+15j
.text:000011A3                 add     esp, 4
.text:000011A6                 cmp     ebp, esp
.text:000011A8                 call    __RTC_CheckEsp
.text:000011AD                 mov     esp, ebp
.text:000011AF                 pop     ebp
.text:000011B0                 retn
.text:000011B0 _get160         endp
.text:000011B0
.text:000011B0 ; ---------------------------------------------------------------------------
.text:000011B1                 db 0Bh dup(0CCh)
.text:000011BC
.text:000011BC ; =============== S U B R O U T I N E =======================================
.text:000011BC
.text:000011BC ; Attributes: bp-based frame
.text:000011BC
.text:000011BC _dss_public_blob proc near              ; DATA XREF: .rdata:0000013Co
.text:000011BC
.text:000011BC var_34          = dword ptr -34h
.text:000011BC var_30          = dword ptr -30h
.text:000011BC var_2C          = dword ptr -2Ch
.text:000011BC var_28          = dword ptr -28h
.text:000011BC var_24          = dword ptr -24h
.text:000011BC var_20          = dword ptr -20h
.text:000011BC var_1C          = dword ptr -1Ch
.text:000011BC var_18          = dword ptr -18h
.text:000011BC var_14          = dword ptr -14h
.text:000011BC var_10          = dword ptr -10h
.text:000011BC var_C           = dword ptr -0Ch
.text:000011BC var_8           = dword ptr -8
.text:000011BC var_4           = dword ptr -4
.text:000011BC arg_0           = dword ptr  8
.text:000011BC arg_4           = dword ptr  0Ch
.text:000011BC
.text:000011BC                 push    ebp
.text:000011BD                 mov     ebp, esp
.text:000011BF                 sub     esp, 34h
.text:000011C2                 push    edi
.text:000011C3                 lea     edi, [ebp+var_34]
.text:000011C6                 mov     ecx, 0Dh
.text:000011CB                 mov     eax, 0CCCCCCCCh
.text:000011D0                 rep stosd
.text:000011D2                 mov     eax, [ebp+arg_0]
.text:000011D5                 mov     [ebp+var_4], eax
.text:000011D8                 mov     ecx, [ebp+var_4]
.text:000011DB                 mov     edx, [ecx]
.text:000011DD                 push    edx
.text:000011DE                 call    _bignum_bitcount
.text:000011E3                 add     esp, 4
.text:000011E6                 add     eax, 8
.text:000011E9                 cdq
.text:000011EA                 and     edx, 7
.text:000011ED                 add     eax, edx
.text:000011EF                 sar     eax, 3
.text:000011F2                 mov     [ebp+var_8], eax
.text:000011F5                 mov     eax, [ebp+var_4]
.text:000011F8                 mov     ecx, [eax+4]
.text:000011FB                 push    ecx
.text:000011FC                 call    _bignum_bitcount
.text:00001201                 add     esp, 4
.text:00001204                 add     eax, 8
.text:00001207                 cdq
.text:00001208                 and     edx, 7
.text:0000120B                 add     eax, edx
.text:0000120D                 sar     eax, 3
.text:00001210                 mov     [ebp+var_C], eax
.text:00001213                 mov     edx, [ebp+var_4]
.text:00001216                 mov     eax, [edx+8]
.text:00001219                 push    eax
.text:0000121A                 call    _bignum_bitcount
.text:0000121F                 add     esp, 4
.text:00001222                 add     eax, 8
.text:00001225                 cdq
.text:00001226                 and     edx, 7
.text:00001229                 add     eax, edx
.text:0000122B                 sar     eax, 3
.text:0000122E                 mov     [ebp+var_10], eax
.text:00001231                 mov     ecx, [ebp+var_4]
.text:00001234                 mov     edx, [ecx+0Ch]
.text:00001237                 push    edx
.text:00001238                 call    _bignum_bitcount
.text:0000123D                 add     esp, 4
.text:00001240                 add     eax, 8
.text:00001243                 cdq
.text:00001244                 and     edx, 7
.text:00001247                 add     eax, edx
.text:00001249                 sar     eax, 3
.text:0000124C                 mov     [ebp+var_14], eax
.text:0000124F                 mov     eax, [ebp+var_C]
.text:00001252                 mov     ecx, [ebp+var_8]
.text:00001255                 lea     edx, [ecx+eax+1Bh]
.text:00001259                 add     edx, [ebp+var_10]
.text:0000125C                 add     edx, [ebp+var_14]
.text:0000125F                 mov     [ebp+var_18], edx
.text:00001262                 push    1
.text:00001264                 mov     eax, [ebp+var_18]
.text:00001267                 push    eax
.text:00001268                 call    _safemalloc
.text:0000126D                 add     esp, 8
.text:00001270                 mov     [ebp+var_20], eax
.text:00001273                 mov     ecx, [ebp+var_20]
.text:00001276                 mov     [ebp+var_24], ecx
.text:00001279                 mov     edx, [ebp+var_24]
.text:0000127C                 mov     byte ptr [edx], 0
.text:0000127F                 mov     eax, [ebp+var_24]
.text:00001282                 mov     byte ptr [eax+1], 0
.text:00001286                 mov     ecx, [ebp+var_24]
.text:00001289                 mov     byte ptr [ecx+2], 0
.text:0000128D                 mov     edx, [ebp+var_24]
.text:00001290                 mov     byte ptr [edx+3], 7
.text:00001294                 mov     eax, [ebp+var_24]
.text:00001297                 add     eax, 4
.text:0000129A                 mov     [ebp+var_24], eax
.text:0000129D                 push    7               ; size_t
.text:0000129F                 push    offset $SG7417  ; "ssh-dss"
.text:000012A4                 mov     ecx, [ebp+var_24]
.text:000012A7                 push    ecx             ; void *
.text:000012A8                 call    _memcpy
.text:000012AD                 add     esp, 0Ch
.text:000012B0                 mov     edx, [ebp+var_24]
.text:000012B3                 add     edx, 7
.text:000012B6                 mov     [ebp+var_24], edx
.text:000012B9                 mov     eax, [ebp+var_8]
.text:000012BC                 sar     eax, 18h
.text:000012BF                 mov     ecx, [ebp+var_24]
.text:000012C2                 mov     [ecx], al
.text:000012C4                 mov     edx, [ebp+var_8]
.text:000012C7                 sar     edx, 10h
.text:000012CA                 mov     eax, [ebp+var_24]
.text:000012CD                 mov     [eax+1], dl
.text:000012D0                 mov     ecx, [ebp+var_8]
.text:000012D3                 sar     ecx, 8
.text:000012D6                 mov     edx, [ebp+var_24]
.text:000012D9                 mov     [edx+2], cl
.text:000012DC                 mov     eax, [ebp+var_24]
.text:000012DF                 mov     cl, byte ptr [ebp+var_8]
.text:000012E2                 mov     [eax+3], cl
.text:000012E5                 mov     edx, [ebp+var_24]
.text:000012E8                 add     edx, 4
.text:000012EB                 mov     [ebp+var_24], edx
.text:000012EE                 mov     eax, [ebp+var_8]
.text:000012F1                 mov     [ebp+var_1C], eax
.text:000012F4
.text:000012F4 loc_12F4:                               ; CODE XREF: _dss_public_blob+16Dj
.text:000012F4                 mov     ecx, [ebp+var_1C]
.text:000012F7                 mov     [ebp+var_28], ecx
.text:000012FA                 mov     edx, [ebp+var_1C]
.text:000012FD                 sub     edx, 1
.text:00001300                 mov     [ebp+var_1C], edx
.text:00001303                 cmp     [ebp+var_28], 0
.text:00001307                 jz      short loc_132B
.text:00001309                 mov     eax, [ebp+var_1C]
.text:0000130C                 push    eax
.text:0000130D                 mov     ecx, [ebp+var_4]
.text:00001310                 mov     edx, [ecx]
.text:00001312                 push    edx
.text:00001313                 call    _bignum_byte
.text:00001318                 add     esp, 8
.text:0000131B                 mov     ecx, [ebp+var_24]
.text:0000131E                 mov     [ecx], al
.text:00001320                 mov     edx, [ebp+var_24]
.text:00001323                 add     edx, 1
.text:00001326                 mov     [ebp+var_24], edx
.text:00001329                 jmp     short loc_12F4
.text:0000132B ; ---------------------------------------------------------------------------
.text:0000132B
.text:0000132B loc_132B:                               ; CODE XREF: _dss_public_blob+14Bj
.text:0000132B                 mov     eax, [ebp+var_C]
.text:0000132E                 sar     eax, 18h
.text:00001331                 mov     ecx, [ebp+var_24]
.text:00001334                 mov     [ecx], al
.text:00001336                 mov     edx, [ebp+var_C]
.text:00001339                 sar     edx, 10h
.text:0000133C                 mov     eax, [ebp+var_24]
.text:0000133F                 mov     [eax+1], dl
.text:00001342                 mov     ecx, [ebp+var_C]
.text:00001345                 sar     ecx, 8
.text:00001348                 mov     edx, [ebp+var_24]
.text:0000134B                 mov     [edx+2], cl
.text:0000134E                 mov     eax, [ebp+var_24]
.text:00001351                 mov     cl, byte ptr [ebp+var_C]
.text:00001354                 mov     [eax+3], cl
.text:00001357                 mov     edx, [ebp+var_24]
.text:0000135A                 add     edx, 4
.text:0000135D                 mov     [ebp+var_24], edx
.text:00001360                 mov     eax, [ebp+var_C]
.text:00001363                 mov     [ebp+var_1C], eax
.text:00001366
.text:00001366 loc_1366:                               ; CODE XREF: _dss_public_blob+1E0j
.text:00001366                 mov     ecx, [ebp+var_1C]
.text:00001369                 mov     [ebp+var_2C], ecx
.text:0000136C                 mov     edx, [ebp+var_1C]
.text:0000136F                 sub     edx, 1
.text:00001372                 mov     [ebp+var_1C], edx
.text:00001375                 cmp     [ebp+var_2C], 0
.text:00001379                 jz      short loc_139E
.text:0000137B                 mov     eax, [ebp+var_1C]
.text:0000137E                 push    eax
.text:0000137F                 mov     ecx, [ebp+var_4]
.text:00001382                 mov     edx, [ecx+4]
.text:00001385                 push    edx
.text:00001386                 call    _bignum_byte
.text:0000138B                 add     esp, 8
.text:0000138E                 mov     ecx, [ebp+var_24]
.text:00001391                 mov     [ecx], al
.text:00001393                 mov     edx, [ebp+var_24]
.text:00001396                 add     edx, 1
.text:00001399                 mov     [ebp+var_24], edx
.text:0000139C                 jmp     short loc_1366
.text:0000139E ; ---------------------------------------------------------------------------
.text:0000139E
.text:0000139E loc_139E:                               ; CODE XREF: _dss_public_blob+1BDj
.text:0000139E                 mov     eax, [ebp+var_10]
.text:000013A1                 sar     eax, 18h
.text:000013A4                 mov     ecx, [ebp+var_24]
.text:000013A7                 mov     [ecx], al
.text:000013A9                 mov     edx, [ebp+var_10]
.text:000013AC                 sar     edx, 10h
.text:000013AF                 mov     eax, [ebp+var_24]
.text:000013B2                 mov     [eax+1], dl
.text:000013B5                 mov     ecx, [ebp+var_10]
.text:000013B8                 sar     ecx, 8
.text:000013BB                 mov     edx, [ebp+var_24]
.text:000013BE                 mov     [edx+2], cl
.text:000013C1                 mov     eax, [ebp+var_24]
.text:000013C4                 mov     cl, byte ptr [ebp+var_10]
.text:000013C7                 mov     [eax+3], cl
.text:000013CA                 mov     edx, [ebp+var_24]
.text:000013CD                 add     edx, 4
.text:000013D0                 mov     [ebp+var_24], edx
.text:000013D3                 mov     eax, [ebp+var_10]
.text:000013D6                 mov     [ebp+var_1C], eax
.text:000013D9
.text:000013D9 loc_13D9:                               ; CODE XREF: _dss_public_blob+253j
.text:000013D9                 mov     ecx, [ebp+var_1C]
.text:000013DC                 mov     [ebp+var_30], ecx
.text:000013DF                 mov     edx, [ebp+var_1C]
.text:000013E2                 sub     edx, 1
.text:000013E5                 mov     [ebp+var_1C], edx
.text:000013E8                 cmp     [ebp+var_30], 0
.text:000013EC                 jz      short loc_1411
.text:000013EE                 mov     eax, [ebp+var_1C]
.text:000013F1                 push    eax
.text:000013F2                 mov     ecx, [ebp+var_4]
.text:000013F5                 mov     edx, [ecx+8]
.text:000013F8                 push    edx
.text:000013F9                 call    _bignum_byte
.text:000013FE                 add     esp, 8
.text:00001401                 mov     ecx, [ebp+var_24]
.text:00001404                 mov     [ecx], al
.text:00001406                 mov     edx, [ebp+var_24]
.text:00001409                 add     edx, 1
.text:0000140C                 mov     [ebp+var_24], edx
.text:0000140F                 jmp     short loc_13D9
.text:00001411 ; ---------------------------------------------------------------------------
.text:00001411
.text:00001411 loc_1411:                               ; CODE XREF: _dss_public_blob+230j
.text:00001411                 mov     eax, [ebp+var_14]
.text:00001414                 sar     eax, 18h
.text:00001417                 mov     ecx, [ebp+var_24]
.text:0000141A                 mov     [ecx], al
.text:0000141C                 mov     edx, [ebp+var_14]
.text:0000141F                 sar     edx, 10h
.text:00001422                 mov     eax, [ebp+var_24]
.text:00001425                 mov     [eax+1], dl
.text:00001428                 mov     ecx, [ebp+var_14]
.text:0000142B                 sar     ecx, 8
.text:0000142E                 mov     edx, [ebp+var_24]
.text:00001431                 mov     [edx+2], cl
.text:00001434                 mov     eax, [ebp+var_24]
.text:00001437                 mov     cl, byte ptr [ebp+var_14]
.text:0000143A                 mov     [eax+3], cl
.text:0000143D                 mov     edx, [ebp+var_24]
.text:00001440                 add     edx, 4
.text:00001443                 mov     [ebp+var_24], edx
.text:00001446                 mov     eax, [ebp+var_14]
.text:00001449                 mov     [ebp+var_1C], eax
.text:0000144C
.text:0000144C loc_144C:                               ; CODE XREF: _dss_public_blob+2C6j
.text:0000144C                 mov     ecx, [ebp+var_1C]
.text:0000144F                 mov     [ebp+var_34], ecx
.text:00001452                 mov     edx, [ebp+var_1C]
.text:00001455                 sub     edx, 1
.text:00001458                 mov     [ebp+var_1C], edx
.text:0000145B                 cmp     [ebp+var_34], 0
.text:0000145F                 jz      short loc_1484
.text:00001461                 mov     eax, [ebp+var_1C]
.text:00001464                 push    eax
.text:00001465                 mov     ecx, [ebp+var_4]
.text:00001468                 mov     edx, [ecx+0Ch]
.text:0000146B                 push    edx
.text:0000146C                 call    _bignum_byte
.text:00001471                 add     esp, 8
.text:00001474                 mov     ecx, [ebp+var_24]
.text:00001477                 mov     [ecx], al
.text:00001479                 mov     edx, [ebp+var_24]
.text:0000147C                 add     edx, 1
.text:0000147F                 mov     [ebp+var_24], edx
.text:00001482                 jmp     short loc_144C
.text:00001484 ; ---------------------------------------------------------------------------
.text:00001484
.text:00001484 loc_1484:                               ; CODE XREF: _dss_public_blob+2A3j
.text:00001484                 mov     eax, [ebp+var_20]
.text:00001487                 add     eax, [ebp+var_18]
.text:0000148A                 cmp     [ebp+var_24], eax
.text:0000148D                 jz      short loc_14A6
.text:0000148F                 push    178h
.text:00001494                 push    offset $SG7447  ; "..\\..\\..\\sshdss.c"
.text:00001499                 push    offset $SG7448  ; "p == blob + bloblen"
.text:0000149E                 call    __wassert
.text:000014A3 ; ---------------------------------------------------------------------------
.text:000014A3                 add     esp, 0Ch
.text:000014A6
.text:000014A6 loc_14A6:                               ; CODE XREF: _dss_public_blob+2D1j
.text:000014A6                 mov     edx, [ebp+arg_4]
.text:000014A9                 mov     eax, [ebp+var_18]
.text:000014AC                 mov     [edx], eax
.text:000014AE                 mov     eax, [ebp+var_20]
.text:000014B1                 pop     edi
.text:000014B2                 add     esp, 34h
.text:000014B5                 cmp     ebp, esp
.text:000014B7                 call    __RTC_CheckEsp
.text:000014BC                 mov     esp, ebp
.text:000014BE                 pop     ebp
.text:000014BF                 retn
.text:000014BF _dss_public_blob endp
.text:000014BF
.text:000014BF ; ---------------------------------------------------------------------------
.text:000014C0                 db 0Ch dup(0CCh)
.text:000014CC
.text:000014CC ; =============== S U B R O U T I N E =======================================
.text:000014CC
.text:000014CC ; Attributes: bp-based frame
.text:000014CC
.text:000014CC _dss_private_blob proc near             ; DATA XREF: .rdata:00000140o
.text:000014CC
.text:000014CC var_1C          = dword ptr -1Ch
.text:000014CC var_18          = dword ptr -18h
.text:000014CC var_14          = dword ptr -14h
.text:000014CC var_10          = dword ptr -10h
.text:000014CC var_C           = dword ptr -0Ch
.text:000014CC var_8           = dword ptr -8
.text:000014CC var_4           = dword ptr -4
.text:000014CC arg_0           = dword ptr  8
.text:000014CC arg_4           = dword ptr  0Ch
.text:000014CC
.text:000014CC                 push    ebp
.text:000014CD                 mov     ebp, esp
.text:000014CF                 sub     esp, 1Ch
.text:000014D2                 mov     eax, 0CCCCCCCCh
.text:000014D7                 mov     [ebp+var_1C], eax
.text:000014DA                 mov     [ebp+var_18], eax
.text:000014DD                 mov     [ebp+var_14], eax
.text:000014E0                 mov     [ebp+var_10], eax
.text:000014E3                 mov     [ebp+var_C], eax
.text:000014E6                 mov     [ebp+var_8], eax
.text:000014E9                 mov     [ebp+var_4], eax
.text:000014EC                 mov     eax, [ebp+arg_0]
.text:000014EF                 mov     [ebp+var_4], eax
.text:000014F2                 mov     ecx, [ebp+var_4]
.text:000014F5                 mov     edx, [ecx+10h]
.text:000014F8                 push    edx
.text:000014F9                 call    _bignum_bitcount
.text:000014FE                 add     esp, 4
.text:00001501                 add     eax, 8
.text:00001504                 cdq
.text:00001505                 and     edx, 7
.text:00001508                 add     eax, edx
.text:0000150A                 sar     eax, 3
.text:0000150D                 mov     [ebp+var_8], eax
.text:00001510                 mov     eax, [ebp+var_8]
.text:00001513                 add     eax, 4
.text:00001516                 mov     [ebp+var_C], eax
.text:00001519                 push    1
.text:0000151B                 mov     ecx, [ebp+var_C]
.text:0000151E                 push    ecx
.text:0000151F                 call    _safemalloc
.text:00001524                 add     esp, 8
.text:00001527                 mov     [ebp+var_14], eax
.text:0000152A                 mov     edx, [ebp+var_14]
.text:0000152D                 mov     [ebp+var_18], edx
.text:00001530                 mov     eax, [ebp+var_8]
.text:00001533                 sar     eax, 18h
.text:00001536                 mov     ecx, [ebp+var_18]
.text:00001539                 mov     [ecx], al
.text:0000153B                 mov     edx, [ebp+var_8]
.text:0000153E                 sar     edx, 10h
.text:00001541                 mov     eax, [ebp+var_18]
.text:00001544                 mov     [eax+1], dl
.text:00001547                 mov     ecx, [ebp+var_8]
.text:0000154A                 sar     ecx, 8
.text:0000154D                 mov     edx, [ebp+var_18]
.text:00001550                 mov     [edx+2], cl
.text:00001553                 mov     eax, [ebp+var_18]
.text:00001556                 mov     cl, byte ptr [ebp+var_8]
.text:00001559                 mov     [eax+3], cl
.text:0000155C                 mov     edx, [ebp+var_18]
.text:0000155F                 add     edx, 4
.text:00001562                 mov     [ebp+var_18], edx
.text:00001565                 mov     eax, [ebp+var_8]
.text:00001568                 mov     [ebp+var_10], eax
.text:0000156B
.text:0000156B loc_156B:                               ; CODE XREF: _dss_private_blob+D5j
.text:0000156B                 mov     ecx, [ebp+var_10]
.text:0000156E                 mov     [ebp+var_1C], ecx
.text:00001571                 mov     edx, [ebp+var_10]
.text:00001574                 sub     edx, 1
.text:00001577                 mov     [ebp+var_10], edx
.text:0000157A                 cmp     [ebp+var_1C], 0
.text:0000157E                 jz      short loc_15A3
.text:00001580                 mov     eax, [ebp+var_10]
.text:00001583                 push    eax
.text:00001584                 mov     ecx, [ebp+var_4]
.text:00001587                 mov     edx, [ecx+10h]
.text:0000158A                 push    edx
.text:0000158B                 call    _bignum_byte
.text:00001590                 add     esp, 8
.text:00001593                 mov     ecx, [ebp+var_18]
.text:00001596                 mov     [ecx], al
.text:00001598                 mov     edx, [ebp+var_18]
.text:0000159B                 add     edx, 1
.text:0000159E                 mov     [ebp+var_18], edx
.text:000015A1                 jmp     short loc_156B
.text:000015A3 ; ---------------------------------------------------------------------------
.text:000015A3
.text:000015A3 loc_15A3:                               ; CODE XREF: _dss_private_blob+B2j
.text:000015A3                 mov     eax, [ebp+var_14]
.text:000015A6                 add     eax, [ebp+var_C]
.text:000015A9                 cmp     [ebp+var_18], eax
.text:000015AC                 jz      short loc_15C5
.text:000015AE                 push    190h
.text:000015B3                 push    offset $SG7472  ; "..\\..\\..\\sshdss.c"
.text:000015B8                 push    offset $SG7473  ; "p == blob + bloblen"
.text:000015BD                 call    __wassert
.text:000015C2 ; ---------------------------------------------------------------------------
.text:000015C2                 add     esp, 0Ch
.text:000015C5
.text:000015C5 loc_15C5:                               ; CODE XREF: _dss_private_blob+E0j
.text:000015C5                 mov     edx, [ebp+arg_4]
.text:000015C8                 mov     eax, [ebp+var_C]
.text:000015CB                 mov     [edx], eax
.text:000015CD                 mov     eax, [ebp+var_14]
.text:000015D0                 add     esp, 1Ch
.text:000015D3                 cmp     ebp, esp
.text:000015D5                 call    __RTC_CheckEsp
.text:000015DA                 mov     esp, ebp
.text:000015DC                 pop     ebp
.text:000015DD                 retn
.text:000015DD _dss_private_blob endp
.text:000015DD
.text:000015DD ; ---------------------------------------------------------------------------
.text:000015DE                 db 0Eh dup(0CCh)
.text:000015EC
.text:000015EC ; =============== S U B R O U T I N E =======================================
.text:000015EC
.text:000015EC ; Attributes: bp-based frame
.text:000015EC
.text:000015EC _dss_createkey  proc near               ; DATA XREF: .rdata:00000144o
.text:000015EC
.text:000015EC var_B4          = dword ptr -0B4h
.text:000015EC var_AC          = byte ptr -0ACh
.text:000015EC var_90          = byte ptr -90h
.text:000015EC var_28          = dword ptr -28h
.text:000015EC var_1C          = dword ptr -1Ch
.text:000015EC var_10          = dword ptr -10h
.text:000015EC var_8           = dword ptr -8
.text:000015EC var_4           = dword ptr -4
.text:000015EC arg_0           = dword ptr  8
.text:000015EC arg_4           = dword ptr  0Ch
.text:000015EC arg_8           = dword ptr  10h
.text:000015EC arg_C           = byte ptr  14h
.text:000015EC
.text:000015EC                 push    ebp
.text:000015ED                 mov     ebp, esp
.text:000015EF                 sub     esp, 0B4h
.text:000015F5                 push    edi
.text:000015F6                 lea     edi, [ebp+var_B4]
.text:000015FC                 mov     ecx, 2Dh ; '-'
.text:00001601                 mov     eax, 0CCCCCCCCh
.text:00001606                 rep stosd
.text:00001608                 mov     eax, dword ptr ds:___security_cookie
.text:0000160D                 xor     eax, ebp
.text:0000160F                 mov     [ebp+var_4], eax
.text:00001612                 mov     eax, [ebp+arg_8]
.text:00001615                 mov     [ebp+var_10], eax
.text:00001618                 mov     ecx, [ebp+arg_4]
.text:0000161B                 push    ecx
.text:0000161C                 mov     edx, [ebp+arg_0]
.text:0000161F                 push    edx
.text:00001620                 call    _dss_newkey
.text:00001625                 add     esp, 8
.text:00001628                 mov     [ebp+var_8], eax
.text:0000162B                 cmp     [ebp+var_8], 0
.text:0000162F                 jnz     short loc_1638
.text:00001631                 xor     eax, eax
.text:00001633                 jmp     loc_178F
.text:00001638 ; ---------------------------------------------------------------------------
.text:00001638
.text:00001638 loc_1638:                               ; CODE XREF: _dss_createkey+43j
.text:00001638                 lea     eax, [ebp+arg_C]
.text:0000163B                 push    eax
.text:0000163C                 lea     ecx, [ebp+var_10]
.text:0000163F                 push    ecx
.text:00001640                 call    _getmp
.text:00001645                 add     esp, 8
.text:00001648                 mov     edx, [ebp+var_8]
.text:0000164B                 mov     [edx+10h], eax
.text:0000164E                 mov     eax, [ebp+var_8]
.text:00001651                 cmp     dword ptr [eax+10h], 0
.text:00001655                 jnz     short loc_166A
.text:00001657                 mov     ecx, [ebp+var_8]
.text:0000165A                 push    ecx
.text:0000165B                 call    _dss_freekey
.text:00001660                 add     esp, 4
.text:00001663                 xor     eax, eax
.text:00001665                 jmp     loc_178F
.text:0000166A ; ---------------------------------------------------------------------------
.text:0000166A
.text:0000166A loc_166A:                               ; CODE XREF: _dss_createkey+69j
.text:0000166A                 mov     [ebp+var_28], 0FFFFFFFFh
.text:00001671                 lea     edx, [ebp+var_28]
.text:00001674                 push    edx
.text:00001675                 lea     eax, [ebp+var_1C]
.text:00001678                 push    eax
.text:00001679                 lea     ecx, [ebp+arg_C]
.text:0000167C                 push    ecx
.text:0000167D                 lea     edx, [ebp+var_10]
.text:00001680                 push    edx
.text:00001681                 call    _getstring
.text:00001686                 add     esp, 10h
.text:00001689                 cmp     [ebp+var_28], 14h
.text:0000168D                 jnz     loc_1722
.text:00001693                 lea     eax, [ebp+var_90]
.text:00001699                 push    eax
.text:0000169A                 call    _SHA_Init
.text:0000169F                 add     esp, 4
.text:000016A2                 mov     ecx, [ebp+var_8]
.text:000016A5                 mov     edx, [ecx]
.text:000016A7                 push    edx
.text:000016A8                 lea     eax, [ebp+var_90]
.text:000016AE                 push    eax
.text:000016AF                 call    _sha_mpint
.text:000016B4                 add     esp, 8
.text:000016B7                 mov     ecx, [ebp+var_8]
.text:000016BA                 mov     edx, [ecx+4]
.text:000016BD                 push    edx
.text:000016BE                 lea     eax, [ebp+var_90]
.text:000016C4                 push    eax
.text:000016C5                 call    _sha_mpint
.text:000016CA                 add     esp, 8
.text:000016CD                 mov     ecx, [ebp+var_8]
.text:000016D0                 mov     edx, [ecx+8]
.text:000016D3                 push    edx
.text:000016D4                 lea     eax, [ebp+var_90]
.text:000016DA                 push    eax
.text:000016DB                 call    _sha_mpint
.text:000016E0                 add     esp, 8
.text:000016E3                 lea     ecx, [ebp+var_AC]
.text:000016E9                 push    ecx
.text:000016EA                 lea     edx, [ebp+var_90]
.text:000016F0                 push    edx
.text:000016F1                 call    _SHA_Final
.text:000016F6                 add     esp, 8
.text:000016F9                 push    14h             ; size_t
.text:000016FB                 lea     eax, [ebp+var_AC]
.text:00001701                 push    eax             ; void *
.text:00001702                 mov     ecx, [ebp+var_1C]
.text:00001705                 push    ecx             ; void *
.text:00001706                 call    _memcmp
.text:0000170B                 add     esp, 0Ch
.text:0000170E                 test    eax, eax
.text:00001710                 jz      short loc_1722
.text:00001712                 mov     edx, [ebp+var_8]
.text:00001715                 push    edx
.text:00001716                 call    _dss_freekey
.text:0000171B                 add     esp, 4
.text:0000171E                 xor     eax, eax
.text:00001720                 jmp     short loc_178F
.text:00001722 ; ---------------------------------------------------------------------------
.text:00001722
.text:00001722 loc_1722:                               ; CODE XREF: _dss_createkey+A1j
.text:00001722                                         ; _dss_createkey+124j
.text:00001722                 mov     eax, [ebp+var_8]
.text:00001725                 mov     ecx, [eax]
.text:00001727                 push    ecx
.text:00001728                 mov     edx, [ebp+var_8]
.text:0000172B                 mov     eax, [edx+10h]
.text:0000172E                 push    eax
.text:0000172F                 mov     ecx, [ebp+var_8]
.text:00001732                 mov     edx, [ecx+8]
.text:00001735                 push    edx
.text:00001736                 call    _modpow
.text:0000173B                 add     esp, 0Ch
.text:0000173E                 mov     [ebp+var_B4], eax
.text:00001744                 mov     eax, [ebp+var_8]
.text:00001747                 mov     ecx, [eax+0Ch]
.text:0000174A                 push    ecx
.text:0000174B                 mov     edx, [ebp+var_B4]
.text:00001751                 push    edx
.text:00001752                 call    _bignum_cmp
.text:00001757                 add     esp, 8
.text:0000175A                 test    eax, eax
.text:0000175C                 jz      short loc_177D
.text:0000175E                 mov     eax, [ebp+var_8]
.text:00001761                 push    eax
.text:00001762                 call    _dss_freekey
.text:00001767                 add     esp, 4
.text:0000176A                 mov     ecx, [ebp+var_B4]
.text:00001770                 push    ecx
.text:00001771                 call    _freebn
.text:00001776                 add     esp, 4
.text:00001779                 xor     eax, eax
.text:0000177B                 jmp     short loc_178F
.text:0000177D ; ---------------------------------------------------------------------------
.text:0000177D
.text:0000177D loc_177D:                               ; CODE XREF: _dss_createkey+170j
.text:0000177D                 mov     edx, [ebp+var_B4]
.text:00001783                 push    edx
.text:00001784                 call    _freebn
.text:00001789                 add     esp, 4
.text:0000178C                 mov     eax, [ebp+var_8]
.text:0000178F
.text:0000178F loc_178F:                               ; CODE XREF: _dss_createkey+47j
.text:0000178F                                         ; _dss_createkey+79j ...
.text:0000178F                 push    edx
.text:00001790                 mov     ecx, ebp
.text:00001792                 push    eax
.text:00001793                 lea     edx, $LN14_0
.text:00001799                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000179E                 pop     eax
.text:0000179F                 pop     edx
.text:000017A0                 pop     edi
.text:000017A1                 mov     ecx, [ebp+var_4]
.text:000017A4                 xor     ecx, ebp
.text:000017A6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000017AB                 add     esp, 0B4h
.text:000017B1                 cmp     ebp, esp
.text:000017B3                 call    __RTC_CheckEsp
.text:000017B8                 mov     esp, ebp
.text:000017BA                 pop     ebp
.text:000017BB                 retn
.text:000017BB _dss_createkey  endp
.text:000017BB
.text:000017BB ; ---------------------------------------------------------------------------
.text:000017BC $LN14_0         dd 5                    ; DATA XREF: _dss_createkey+1A7o
.text:000017C0                 dd offset $LN13_0
.text:000017C4 $LN13_0         dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000017C0o
.text:000017CC                 dd offset $LN8_1        ; "pb"
.text:000017D0                 dd 0FFFFFFE4h, 4
.text:000017D8                 dd offset $LN9_0        ; "hash"
.text:000017DC                 dd 0FFFFFFD8h, 4
.text:000017E4                 dd offset $LN10_0       ; "hashlen"
.text:000017E8                 dd 0FFFFFF70h, 60h
.text:000017F0                 dd offset $LN11         ; "s"
.text:000017F4                 dd 0FFFFFF54h, 14h
.text:000017FC                 dd offset $LN12         ; "digest"
.text:00001800 $LN12           db 'digest',0           ; DATA XREF: .text:000017FCo
.text:00001807 $LN11           db 's',0                ; DATA XREF: .text:000017F0o
.text:00001809 $LN10_0         db 'hashlen',0          ; DATA XREF: .text:000017E4o
.text:00001811 $LN9_0          db 'hash',0             ; DATA XREF: .text:000017D8o
.text:00001816 $LN8_1          db 'pb',0               ; DATA XREF: .text:000017CCo
.text:00001819                 align 4
.text:0000181C
.text:0000181C ; =============== S U B R O U T I N E =======================================
.text:0000181C
.text:0000181C ; Attributes: bp-based frame
.text:0000181C
.text:0000181C _sha_mpint      proc near               ; CODE XREF: _dss_createkey+C3p
.text:0000181C                                         ; _dss_createkey+D9p ...
.text:0000181C
.text:0000181C var_14          = dword ptr -14h
.text:0000181C var_10          = dword ptr -10h
.text:0000181C var_C           = dword ptr -0Ch
.text:0000181C var_8           = dword ptr -8
.text:0000181C var_4           = dword ptr -4
.text:0000181C arg_0           = dword ptr  8
.text:0000181C arg_4           = dword ptr  0Ch
.text:0000181C
.text:0000181C                 push    ebp
.text:0000181D                 mov     ebp, esp
.text:0000181F                 sub     esp, 14h
.text:00001822                 mov     eax, 0CCCCCCCCh
.text:00001827                 mov     [ebp+var_14], eax
.text:0000182A                 mov     [ebp+var_10], eax
.text:0000182D                 mov     [ebp+var_C], eax
.text:00001830                 mov     [ebp+var_8], eax
.text:00001833                 mov     [ebp+var_4], eax
.text:00001836                 mov     eax, [ebp+arg_4]
.text:00001839                 push    eax
.text:0000183A                 call    _bignum_bitcount
.text:0000183F                 add     esp, 4
.text:00001842                 add     eax, 8
.text:00001845                 cdq
.text:00001846                 and     edx, 7
.text:00001849                 add     eax, edx
.text:0000184B                 sar     eax, 3
.text:0000184E                 mov     [ebp+var_10], eax
.text:00001851                 mov     ecx, [ebp+var_10]
.text:00001854                 sar     ecx, 18h
.text:00001857                 mov     byte ptr [ebp+var_8], cl
.text:0000185A                 mov     edx, [ebp+var_10]
.text:0000185D                 sar     edx, 10h
.text:00001860                 mov     byte ptr [ebp+var_8+1], dl
.text:00001863                 mov     eax, [ebp+var_10]
.text:00001866                 sar     eax, 8
.text:00001869                 mov     byte ptr [ebp+var_8+2], al
.text:0000186C                 mov     cl, byte ptr [ebp+var_10]
.text:0000186F                 mov     byte ptr [ebp+var_8+3], cl
.text:00001872                 push    4
.text:00001874                 lea     edx, [ebp+var_8]
.text:00001877                 push    edx
.text:00001878                 mov     eax, [ebp+arg_0]
.text:0000187B                 push    eax
.text:0000187C                 call    _SHA_Bytes
.text:00001881                 add     esp, 0Ch
.text:00001884
.text:00001884 loc_1884:                               ; CODE XREF: _sha_mpint+B3j
.text:00001884                 mov     ecx, [ebp+var_10]
.text:00001887                 mov     edx, [ebp+var_10]
.text:0000188A                 sub     edx, 1
.text:0000188D                 mov     [ebp+var_10], edx
.text:00001890                 test    ecx, ecx
.text:00001892                 jle     short loc_189D
.text:00001894                 mov     [ebp+var_14], 1
.text:0000189B                 jmp     short loc_18A4
.text:0000189D ; ---------------------------------------------------------------------------
.text:0000189D
.text:0000189D loc_189D:                               ; CODE XREF: _sha_mpint+76j
.text:0000189D                 mov     [ebp+var_14], 0
.text:000018A4
.text:000018A4 loc_18A4:                               ; CODE XREF: _sha_mpint+7Fj
.text:000018A4                 cmp     [ebp+var_14], 0
.text:000018A8                 jz      short loc_18D1
.text:000018AA                 mov     eax, [ebp+var_10]
.text:000018AD                 push    eax
.text:000018AE                 mov     ecx, [ebp+arg_4]
.text:000018B1                 push    ecx
.text:000018B2                 call    _bignum_byte
.text:000018B7                 add     esp, 8
.text:000018BA                 mov     byte ptr [ebp+var_8], al
.text:000018BD                 push    1
.text:000018BF                 lea     edx, [ebp+var_8]
.text:000018C2                 push    edx
.text:000018C3                 mov     eax, [ebp+arg_0]
.text:000018C6                 push    eax
.text:000018C7                 call    _SHA_Bytes
.text:000018CC                 add     esp, 0Ch
.text:000018CF                 jmp     short loc_1884
.text:000018D1 ; ---------------------------------------------------------------------------
.text:000018D1
.text:000018D1 loc_18D1:                               ; CODE XREF: _sha_mpint+8Cj
.text:000018D1                 push    4
.text:000018D3                 lea     ecx, [ebp+var_8]
.text:000018D6                 push    ecx
.text:000018D7                 call    _smemclr
.text:000018DC                 add     esp, 8
.text:000018DF                 push    edx
.text:000018E0                 mov     ecx, ebp
.text:000018E2                 push    eax
.text:000018E3                 lea     edx, $LN9_1
.text:000018E9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018EE                 pop     eax
.text:000018EF                 pop     edx
.text:000018F0                 add     esp, 14h
.text:000018F3                 cmp     ebp, esp
.text:000018F5                 call    __RTC_CheckEsp
.text:000018FA                 mov     esp, ebp
.text:000018FC                 pop     ebp
.text:000018FD                 retn
.text:000018FD _sha_mpint      endp
.text:000018FD
.text:000018FD ; ---------------------------------------------------------------------------
.text:000018FE                 align 10h
.text:00001900 $LN9_1          dd 1                    ; DATA XREF: _sha_mpint+C7o
.text:00001904                 dd offset $LN8_2
.text:00001908 $LN8_2          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001904o
.text:00001910                 dd offset $LN7_1        ; "lenbuf"
.text:00001914 $LN7_1          db 'lenbuf',0           ; DATA XREF: .text:00001910o
.text:0000191B                 align 4
.text:0000191C
.text:0000191C ; =============== S U B R O U T I N E =======================================
.text:0000191C
.text:0000191C ; Attributes: bp-based frame
.text:0000191C
.text:0000191C _dss_openssh_createkey proc near        ; DATA XREF: .rdata:00000148o
.text:0000191C
.text:0000191C var_8           = dword ptr -8
.text:0000191C var_4           = dword ptr -4
.text:0000191C arg_0           = dword ptr  8
.text:0000191C arg_4           = dword ptr  0Ch
.text:0000191C
.text:0000191C                 push    ebp
.text:0000191D                 mov     ebp, esp
.text:0000191F                 sub     esp, 8
.text:00001922                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001929                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001930                 mov     eax, [ebp+arg_0]
.text:00001933                 mov     [ebp+var_4], eax
.text:00001936                 push    14h
.text:00001938                 push    1
.text:0000193A                 call    _safemalloc
.text:0000193F                 add     esp, 8
.text:00001942                 mov     [ebp+var_8], eax
.text:00001945                 mov     ecx, [ebp+arg_4]
.text:00001948                 push    ecx
.text:00001949                 mov     edx, [ebp+var_4]
.text:0000194C                 push    edx
.text:0000194D                 call    _getmp
.text:00001952                 add     esp, 8
.text:00001955                 mov     ecx, [ebp+var_8]
.text:00001958                 mov     [ecx], eax
.text:0000195A                 mov     edx, [ebp+arg_4]
.text:0000195D                 push    edx
.text:0000195E                 mov     eax, [ebp+var_4]
.text:00001961                 push    eax
.text:00001962                 call    _getmp
.text:00001967                 add     esp, 8
.text:0000196A                 mov     ecx, [ebp+var_8]
.text:0000196D                 mov     [ecx+4], eax
.text:00001970                 mov     edx, [ebp+arg_4]
.text:00001973                 push    edx
.text:00001974                 mov     eax, [ebp+var_4]
.text:00001977                 push    eax
.text:00001978                 call    _getmp
.text:0000197D                 add     esp, 8
.text:00001980                 mov     ecx, [ebp+var_8]
.text:00001983                 mov     [ecx+8], eax
.text:00001986                 mov     edx, [ebp+arg_4]
.text:00001989                 push    edx
.text:0000198A                 mov     eax, [ebp+var_4]
.text:0000198D                 push    eax
.text:0000198E                 call    _getmp
.text:00001993                 add     esp, 8
.text:00001996                 mov     ecx, [ebp+var_8]
.text:00001999                 mov     [ecx+0Ch], eax
.text:0000199C                 mov     edx, [ebp+arg_4]
.text:0000199F                 push    edx
.text:000019A0                 mov     eax, [ebp+var_4]
.text:000019A3                 push    eax
.text:000019A4                 call    _getmp
.text:000019A9                 add     esp, 8
.text:000019AC                 mov     ecx, [ebp+var_8]
.text:000019AF                 mov     [ecx+10h], eax
.text:000019B2                 mov     edx, [ebp+var_8]
.text:000019B5                 cmp     dword ptr [edx], 0
.text:000019B8                 jz      short loc_1A11
.text:000019BA                 mov     eax, [ebp+var_8]
.text:000019BD                 cmp     dword ptr [eax+4], 0
.text:000019C1                 jz      short loc_1A11
.text:000019C3                 mov     ecx, [ebp+var_8]
.text:000019C6                 cmp     dword ptr [ecx+8], 0
.text:000019CA                 jz      short loc_1A11
.text:000019CC                 mov     edx, [ebp+var_8]
.text:000019CF                 cmp     dword ptr [edx+0Ch], 0
.text:000019D3                 jz      short loc_1A11
.text:000019D5                 mov     eax, [ebp+var_8]
.text:000019D8                 cmp     dword ptr [eax+10h], 0
.text:000019DC                 jz      short loc_1A11
.text:000019DE                 mov     ecx, dword ptr ds:_Zero
.text:000019E4                 push    ecx
.text:000019E5                 mov     edx, [ebp+var_8]
.text:000019E8                 mov     eax, [edx+4]
.text:000019EB                 push    eax
.text:000019EC                 call    _bignum_cmp
.text:000019F1                 add     esp, 8
.text:000019F4                 test    eax, eax
.text:000019F6                 jz      short loc_1A11
.text:000019F8                 mov     ecx, dword ptr ds:_Zero
.text:000019FE                 push    ecx
.text:000019FF                 mov     edx, [ebp+var_8]
.text:00001A02                 mov     eax, [edx]
.text:00001A04                 push    eax
.text:00001A05                 call    _bignum_cmp
.text:00001A0A                 add     esp, 8
.text:00001A0D                 test    eax, eax
.text:00001A0F                 jnz     short loc_1A21
.text:00001A11
.text:00001A11 loc_1A11:                               ; CODE XREF: _dss_openssh_createkey+9Cj
.text:00001A11                                         ; _dss_openssh_createkey+A5j ...
.text:00001A11                 mov     ecx, [ebp+var_8]
.text:00001A14                 push    ecx
.text:00001A15                 call    _dss_freekey
.text:00001A1A                 add     esp, 4
.text:00001A1D                 xor     eax, eax
.text:00001A1F                 jmp     short loc_1A24
.text:00001A21 ; ---------------------------------------------------------------------------
.text:00001A21
.text:00001A21 loc_1A21:                               ; CODE XREF: _dss_openssh_createkey+F3j
.text:00001A21                 mov     eax, [ebp+var_8]
.text:00001A24
.text:00001A24 loc_1A24:                               ; CODE XREF: _dss_openssh_createkey+103j
.text:00001A24                 add     esp, 8
.text:00001A27                 cmp     ebp, esp
.text:00001A29                 call    __RTC_CheckEsp
.text:00001A2E                 mov     esp, ebp
.text:00001A30                 pop     ebp
.text:00001A31                 retn
.text:00001A31 _dss_openssh_createkey endp
.text:00001A31
.text:00001A31 ; ---------------------------------------------------------------------------
.text:00001A32                 db 0Ah dup(0CCh)
.text:00001A3C
.text:00001A3C ; =============== S U B R O U T I N E =======================================
.text:00001A3C
.text:00001A3C ; Attributes: bp-based frame
.text:00001A3C
.text:00001A3C _dss_openssh_fmtkey proc near           ; DATA XREF: .rdata:0000014Co
.text:00001A3C
.text:00001A3C var_20          = dword ptr -20h
.text:00001A3C var_1C          = dword ptr -1Ch
.text:00001A3C var_18          = dword ptr -18h
.text:00001A3C var_14          = dword ptr -14h
.text:00001A3C var_10          = dword ptr -10h
.text:00001A3C var_C           = dword ptr -0Ch
.text:00001A3C var_8           = dword ptr -8
.text:00001A3C var_4           = dword ptr -4
.text:00001A3C arg_0           = dword ptr  8
.text:00001A3C arg_4           = dword ptr  0Ch
.text:00001A3C arg_8           = dword ptr  10h
.text:00001A3C
.text:00001A3C                 push    ebp
.text:00001A3D                 mov     ebp, esp
.text:00001A3F                 sub     esp, 20h
.text:00001A42                 push    esi
.text:00001A43                 mov     eax, 0CCCCCCCCh
.text:00001A48                 mov     [ebp+var_20], eax
.text:00001A4B                 mov     [ebp+var_1C], eax
.text:00001A4E                 mov     [ebp+var_18], eax
.text:00001A51                 mov     [ebp+var_14], eax
.text:00001A54                 mov     [ebp+var_10], eax
.text:00001A57                 mov     [ebp+var_C], eax
.text:00001A5A                 mov     [ebp+var_8], eax
.text:00001A5D                 mov     [ebp+var_4], eax
.text:00001A60                 mov     eax, [ebp+arg_0]
.text:00001A63                 mov     [ebp+var_4], eax
.text:00001A66                 mov     ecx, [ebp+var_4]
.text:00001A69                 mov     edx, [ecx]
.text:00001A6B                 push    edx
.text:00001A6C                 call    _ssh2_bignum_length
.text:00001A71                 add     esp, 4
.text:00001A74                 mov     esi, eax
.text:00001A76                 mov     eax, [ebp+var_4]
.text:00001A79                 mov     ecx, [eax+4]
.text:00001A7C                 push    ecx
.text:00001A7D                 call    _ssh2_bignum_length
.text:00001A82                 add     esp, 4
.text:00001A85                 add     esi, eax
.text:00001A87                 mov     edx, [ebp+var_4]
.text:00001A8A                 mov     eax, [edx+8]
.text:00001A8D                 push    eax
.text:00001A8E                 call    _ssh2_bignum_length
.text:00001A93                 add     esp, 4
.text:00001A96                 add     esi, eax
.text:00001A98                 mov     ecx, [ebp+var_4]
.text:00001A9B                 mov     edx, [ecx+0Ch]
.text:00001A9E                 push    edx
.text:00001A9F                 call    _ssh2_bignum_length
.text:00001AA4                 add     esp, 4
.text:00001AA7                 add     esi, eax
.text:00001AA9                 mov     eax, [ebp+var_4]
.text:00001AAC                 mov     ecx, [eax+10h]
.text:00001AAF                 push    ecx
.text:00001AB0                 call    _ssh2_bignum_length
.text:00001AB5                 add     esp, 4
.text:00001AB8                 add     esi, eax
.text:00001ABA                 mov     [ebp+var_8], esi
.text:00001ABD                 mov     edx, [ebp+var_8]
.text:00001AC0                 cmp     edx, [ebp+arg_8]
.text:00001AC3                 jle     short loc_1ACD
.text:00001AC5                 mov     eax, [ebp+var_8]
.text:00001AC8                 jmp     loc_1ED2
.text:00001ACD ; ---------------------------------------------------------------------------
.text:00001ACD
.text:00001ACD loc_1ACD:                               ; CODE XREF: _dss_openssh_fmtkey+87j
.text:00001ACD                 mov     [ebp+var_8], 0
.text:00001AD4                 mov     eax, [ebp+var_4]
.text:00001AD7                 mov     ecx, [eax]
.text:00001AD9                 push    ecx
.text:00001ADA                 call    _ssh2_bignum_length
.text:00001ADF                 add     esp, 4
.text:00001AE2                 sub     eax, 4
.text:00001AE5                 sar     eax, 18h
.text:00001AE8                 mov     edx, [ebp+arg_4]
.text:00001AEB                 add     edx, [ebp+var_8]
.text:00001AEE                 mov     [edx], al
.text:00001AF0                 mov     eax, [ebp+var_4]
.text:00001AF3                 mov     ecx, [eax]
.text:00001AF5                 push    ecx
.text:00001AF6                 call    _ssh2_bignum_length
.text:00001AFB                 add     esp, 4
.text:00001AFE                 sub     eax, 4
.text:00001B01                 sar     eax, 10h
.text:00001B04                 mov     edx, [ebp+arg_4]
.text:00001B07                 add     edx, [ebp+var_8]
.text:00001B0A                 mov     [edx+1], al
.text:00001B0D                 mov     eax, [ebp+var_4]
.text:00001B10                 mov     ecx, [eax]
.text:00001B12                 push    ecx
.text:00001B13                 call    _ssh2_bignum_length
.text:00001B18                 add     esp, 4
.text:00001B1B                 sub     eax, 4
.text:00001B1E                 sar     eax, 8
.text:00001B21                 mov     edx, [ebp+arg_4]
.text:00001B24                 add     edx, [ebp+var_8]
.text:00001B27                 mov     [edx+2], al
.text:00001B2A                 mov     eax, [ebp+var_4]
.text:00001B2D                 mov     ecx, [eax]
.text:00001B2F                 push    ecx
.text:00001B30                 call    _ssh2_bignum_length
.text:00001B35                 add     esp, 4
.text:00001B38                 sub     eax, 4
.text:00001B3B                 mov     edx, [ebp+arg_4]
.text:00001B3E                 add     edx, [ebp+var_8]
.text:00001B41                 mov     [edx+3], al
.text:00001B44                 mov     eax, [ebp+var_8]
.text:00001B47                 add     eax, 4
.text:00001B4A                 mov     [ebp+var_8], eax
.text:00001B4D                 mov     ecx, [ebp+var_4]
.text:00001B50                 mov     edx, [ecx]
.text:00001B52                 push    edx
.text:00001B53                 call    _ssh2_bignum_length
.text:00001B58                 add     esp, 4
.text:00001B5B                 sub     eax, 4
.text:00001B5E                 mov     [ebp+var_C], eax
.text:00001B61
.text:00001B61 loc_1B61:                               ; CODE XREF: _dss_openssh_fmtkey+15Dj
.text:00001B61                 mov     eax, [ebp+var_C]
.text:00001B64                 mov     [ebp+var_10], eax
.text:00001B67                 mov     ecx, [ebp+var_C]
.text:00001B6A                 sub     ecx, 1
.text:00001B6D                 mov     [ebp+var_C], ecx
.text:00001B70                 cmp     [ebp+var_10], 0
.text:00001B74                 jz      short loc_1B9B
.text:00001B76                 mov     edx, [ebp+var_C]
.text:00001B79                 push    edx
.text:00001B7A                 mov     eax, [ebp+var_4]
.text:00001B7D                 mov     ecx, [eax]
.text:00001B7F                 push    ecx
.text:00001B80                 call    _bignum_byte
.text:00001B85                 add     esp, 8
.text:00001B88                 mov     edx, [ebp+arg_4]
.text:00001B8B                 add     edx, [ebp+var_8]
.text:00001B8E                 mov     [edx], al
.text:00001B90                 mov     eax, [ebp+var_8]
.text:00001B93                 add     eax, 1
.text:00001B96                 mov     [ebp+var_8], eax
.text:00001B99                 jmp     short loc_1B61
.text:00001B9B ; ---------------------------------------------------------------------------
.text:00001B9B
.text:00001B9B loc_1B9B:                               ; CODE XREF: _dss_openssh_fmtkey+138j
.text:00001B9B                 mov     ecx, [ebp+var_4]
.text:00001B9E                 mov     edx, [ecx+4]
.text:00001BA1                 push    edx
.text:00001BA2                 call    _ssh2_bignum_length
.text:00001BA7                 add     esp, 4
.text:00001BAA                 sub     eax, 4
.text:00001BAD                 sar     eax, 18h
.text:00001BB0                 mov     ecx, [ebp+arg_4]
.text:00001BB3                 add     ecx, [ebp+var_8]
.text:00001BB6                 mov     [ecx], al
.text:00001BB8                 mov     edx, [ebp+var_4]
.text:00001BBB                 mov     eax, [edx+4]
.text:00001BBE                 push    eax
.text:00001BBF                 call    _ssh2_bignum_length
.text:00001BC4                 add     esp, 4
.text:00001BC7                 sub     eax, 4
.text:00001BCA                 sar     eax, 10h
.text:00001BCD                 mov     ecx, [ebp+arg_4]
.text:00001BD0                 add     ecx, [ebp+var_8]
.text:00001BD3                 mov     [ecx+1], al
.text:00001BD6                 mov     edx, [ebp+var_4]
.text:00001BD9                 mov     eax, [edx+4]
.text:00001BDC                 push    eax
.text:00001BDD                 call    _ssh2_bignum_length
.text:00001BE2                 add     esp, 4
.text:00001BE5                 sub     eax, 4
.text:00001BE8                 sar     eax, 8
.text:00001BEB                 mov     ecx, [ebp+arg_4]
.text:00001BEE                 add     ecx, [ebp+var_8]
.text:00001BF1                 mov     [ecx+2], al
.text:00001BF4                 mov     edx, [ebp+var_4]
.text:00001BF7                 mov     eax, [edx+4]
.text:00001BFA                 push    eax
.text:00001BFB                 call    _ssh2_bignum_length
.text:00001C00                 add     esp, 4
.text:00001C03                 sub     eax, 4
.text:00001C06                 mov     ecx, [ebp+arg_4]
.text:00001C09                 add     ecx, [ebp+var_8]
.text:00001C0C                 mov     [ecx+3], al
.text:00001C0F                 mov     edx, [ebp+var_8]
.text:00001C12                 add     edx, 4
.text:00001C15                 mov     [ebp+var_8], edx
.text:00001C18                 mov     eax, [ebp+var_4]
.text:00001C1B                 mov     ecx, [eax+4]
.text:00001C1E                 push    ecx
.text:00001C1F                 call    _ssh2_bignum_length
.text:00001C24                 add     esp, 4
.text:00001C27                 sub     eax, 4
.text:00001C2A                 mov     [ebp+var_C], eax
.text:00001C2D
.text:00001C2D loc_1C2D:                               ; CODE XREF: _dss_openssh_fmtkey+22Aj
.text:00001C2D                 mov     edx, [ebp+var_C]
.text:00001C30                 mov     [ebp+var_14], edx
.text:00001C33                 mov     eax, [ebp+var_C]
.text:00001C36                 sub     eax, 1
.text:00001C39                 mov     [ebp+var_C], eax
.text:00001C3C                 cmp     [ebp+var_14], 0
.text:00001C40                 jz      short loc_1C68
.text:00001C42                 mov     ecx, [ebp+var_C]
.text:00001C45                 push    ecx
.text:00001C46                 mov     edx, [ebp+var_4]
.text:00001C49                 mov     eax, [edx+4]
.text:00001C4C                 push    eax
.text:00001C4D                 call    _bignum_byte
.text:00001C52                 add     esp, 8
.text:00001C55                 mov     ecx, [ebp+arg_4]
.text:00001C58                 add     ecx, [ebp+var_8]
.text:00001C5B                 mov     [ecx], al
.text:00001C5D                 mov     edx, [ebp+var_8]
.text:00001C60                 add     edx, 1
.text:00001C63                 mov     [ebp+var_8], edx
.text:00001C66                 jmp     short loc_1C2D
.text:00001C68 ; ---------------------------------------------------------------------------
.text:00001C68
.text:00001C68 loc_1C68:                               ; CODE XREF: _dss_openssh_fmtkey+204j
.text:00001C68                 mov     eax, [ebp+var_4]
.text:00001C6B                 mov     ecx, [eax+8]
.text:00001C6E                 push    ecx
.text:00001C6F                 call    _ssh2_bignum_length
.text:00001C74                 add     esp, 4
.text:00001C77                 sub     eax, 4
.text:00001C7A                 sar     eax, 18h
.text:00001C7D                 mov     edx, [ebp+arg_4]
.text:00001C80                 add     edx, [ebp+var_8]
.text:00001C83                 mov     [edx], al
.text:00001C85                 mov     eax, [ebp+var_4]
.text:00001C88                 mov     ecx, [eax+8]
.text:00001C8B                 push    ecx
.text:00001C8C                 call    _ssh2_bignum_length
.text:00001C91                 add     esp, 4
.text:00001C94                 sub     eax, 4
.text:00001C97                 sar     eax, 10h
.text:00001C9A                 mov     edx, [ebp+arg_4]
.text:00001C9D                 add     edx, [ebp+var_8]
.text:00001CA0                 mov     [edx+1], al
.text:00001CA3                 mov     eax, [ebp+var_4]
.text:00001CA6                 mov     ecx, [eax+8]
.text:00001CA9                 push    ecx
.text:00001CAA                 call    _ssh2_bignum_length
.text:00001CAF                 add     esp, 4
.text:00001CB2                 sub     eax, 4
.text:00001CB5                 sar     eax, 8
.text:00001CB8                 mov     edx, [ebp+arg_4]
.text:00001CBB                 add     edx, [ebp+var_8]
.text:00001CBE                 mov     [edx+2], al
.text:00001CC1                 mov     eax, [ebp+var_4]
.text:00001CC4                 mov     ecx, [eax+8]
.text:00001CC7                 push    ecx
.text:00001CC8                 call    _ssh2_bignum_length
.text:00001CCD                 add     esp, 4
.text:00001CD0                 sub     eax, 4
.text:00001CD3                 mov     edx, [ebp+arg_4]
.text:00001CD6                 add     edx, [ebp+var_8]
.text:00001CD9                 mov     [edx+3], al
.text:00001CDC                 mov     eax, [ebp+var_8]
.text:00001CDF                 add     eax, 4
.text:00001CE2                 mov     [ebp+var_8], eax
.text:00001CE5                 mov     ecx, [ebp+var_4]
.text:00001CE8                 mov     edx, [ecx+8]
.text:00001CEB                 push    edx
.text:00001CEC                 call    _ssh2_bignum_length
.text:00001CF1                 add     esp, 4
.text:00001CF4                 sub     eax, 4
.text:00001CF7                 mov     [ebp+var_C], eax
.text:00001CFA
.text:00001CFA loc_1CFA:                               ; CODE XREF: _dss_openssh_fmtkey+2F7j
.text:00001CFA                 mov     eax, [ebp+var_C]
.text:00001CFD                 mov     [ebp+var_18], eax
.text:00001D00                 mov     ecx, [ebp+var_C]
.text:00001D03                 sub     ecx, 1
.text:00001D06                 mov     [ebp+var_C], ecx
.text:00001D09                 cmp     [ebp+var_18], 0
.text:00001D0D                 jz      short loc_1D35
.text:00001D0F                 mov     edx, [ebp+var_C]
.text:00001D12                 push    edx
.text:00001D13                 mov     eax, [ebp+var_4]
.text:00001D16                 mov     ecx, [eax+8]
.text:00001D19                 push    ecx
.text:00001D1A                 call    _bignum_byte
.text:00001D1F                 add     esp, 8
.text:00001D22                 mov     edx, [ebp+arg_4]
.text:00001D25                 add     edx, [ebp+var_8]
.text:00001D28                 mov     [edx], al
.text:00001D2A                 mov     eax, [ebp+var_8]
.text:00001D2D                 add     eax, 1
.text:00001D30                 mov     [ebp+var_8], eax
.text:00001D33                 jmp     short loc_1CFA
.text:00001D35 ; ---------------------------------------------------------------------------
.text:00001D35
.text:00001D35 loc_1D35:                               ; CODE XREF: _dss_openssh_fmtkey+2D1j
.text:00001D35                 mov     ecx, [ebp+var_4]
.text:00001D38                 mov     edx, [ecx+0Ch]
.text:00001D3B                 push    edx
.text:00001D3C                 call    _ssh2_bignum_length
.text:00001D41                 add     esp, 4
.text:00001D44                 sub     eax, 4
.text:00001D47                 sar     eax, 18h
.text:00001D4A                 mov     ecx, [ebp+arg_4]
.text:00001D4D                 add     ecx, [ebp+var_8]
.text:00001D50                 mov     [ecx], al
.text:00001D52                 mov     edx, [ebp+var_4]
.text:00001D55                 mov     eax, [edx+0Ch]
.text:00001D58                 push    eax
.text:00001D59                 call    _ssh2_bignum_length
.text:00001D5E                 add     esp, 4
.text:00001D61                 sub     eax, 4
.text:00001D64                 sar     eax, 10h
.text:00001D67                 mov     ecx, [ebp+arg_4]
.text:00001D6A                 add     ecx, [ebp+var_8]
.text:00001D6D                 mov     [ecx+1], al
.text:00001D70                 mov     edx, [ebp+var_4]
.text:00001D73                 mov     eax, [edx+0Ch]
.text:00001D76                 push    eax
.text:00001D77                 call    _ssh2_bignum_length
.text:00001D7C                 add     esp, 4
.text:00001D7F                 sub     eax, 4
.text:00001D82                 sar     eax, 8
.text:00001D85                 mov     ecx, [ebp+arg_4]
.text:00001D88                 add     ecx, [ebp+var_8]
.text:00001D8B                 mov     [ecx+2], al
.text:00001D8E                 mov     edx, [ebp+var_4]
.text:00001D91                 mov     eax, [edx+0Ch]
.text:00001D94                 push    eax
.text:00001D95                 call    _ssh2_bignum_length
.text:00001D9A                 add     esp, 4
.text:00001D9D                 sub     eax, 4
.text:00001DA0                 mov     ecx, [ebp+arg_4]
.text:00001DA3                 add     ecx, [ebp+var_8]
.text:00001DA6                 mov     [ecx+3], al
.text:00001DA9                 mov     edx, [ebp+var_8]
.text:00001DAC                 add     edx, 4
.text:00001DAF                 mov     [ebp+var_8], edx
.text:00001DB2                 mov     eax, [ebp+var_4]
.text:00001DB5                 mov     ecx, [eax+0Ch]
.text:00001DB8                 push    ecx
.text:00001DB9                 call    _ssh2_bignum_length
.text:00001DBE                 add     esp, 4
.text:00001DC1                 sub     eax, 4
.text:00001DC4                 mov     [ebp+var_C], eax
.text:00001DC7
.text:00001DC7 loc_1DC7:                               ; CODE XREF: _dss_openssh_fmtkey+3C4j
.text:00001DC7                 mov     edx, [ebp+var_C]
.text:00001DCA                 mov     [ebp+var_1C], edx
.text:00001DCD                 mov     eax, [ebp+var_C]
.text:00001DD0                 sub     eax, 1
.text:00001DD3                 mov     [ebp+var_C], eax
.text:00001DD6                 cmp     [ebp+var_1C], 0
.text:00001DDA                 jz      short loc_1E02
.text:00001DDC                 mov     ecx, [ebp+var_C]
.text:00001DDF                 push    ecx
.text:00001DE0                 mov     edx, [ebp+var_4]
.text:00001DE3                 mov     eax, [edx+0Ch]
.text:00001DE6                 push    eax
.text:00001DE7                 call    _bignum_byte
.text:00001DEC                 add     esp, 8
.text:00001DEF                 mov     ecx, [ebp+arg_4]
.text:00001DF2                 add     ecx, [ebp+var_8]
.text:00001DF5                 mov     [ecx], al
.text:00001DF7                 mov     edx, [ebp+var_8]
.text:00001DFA                 add     edx, 1
.text:00001DFD                 mov     [ebp+var_8], edx
.text:00001E00                 jmp     short loc_1DC7
.text:00001E02 ; ---------------------------------------------------------------------------
.text:00001E02
.text:00001E02 loc_1E02:                               ; CODE XREF: _dss_openssh_fmtkey+39Ej
.text:00001E02                 mov     eax, [ebp+var_4]
.text:00001E05                 mov     ecx, [eax+10h]
.text:00001E08                 push    ecx
.text:00001E09                 call    _ssh2_bignum_length
.text:00001E0E                 add     esp, 4
.text:00001E11                 sub     eax, 4
.text:00001E14                 sar     eax, 18h
.text:00001E17                 mov     edx, [ebp+arg_4]
.text:00001E1A                 add     edx, [ebp+var_8]
.text:00001E1D                 mov     [edx], al
.text:00001E1F                 mov     eax, [ebp+var_4]
.text:00001E22                 mov     ecx, [eax+10h]
.text:00001E25                 push    ecx
.text:00001E26                 call    _ssh2_bignum_length
.text:00001E2B                 add     esp, 4
.text:00001E2E                 sub     eax, 4
.text:00001E31                 sar     eax, 10h
.text:00001E34                 mov     edx, [ebp+arg_4]
.text:00001E37                 add     edx, [ebp+var_8]
.text:00001E3A                 mov     [edx+1], al
.text:00001E3D                 mov     eax, [ebp+var_4]
.text:00001E40                 mov     ecx, [eax+10h]
.text:00001E43                 push    ecx
.text:00001E44                 call    _ssh2_bignum_length
.text:00001E49                 add     esp, 4
.text:00001E4C                 sub     eax, 4
.text:00001E4F                 sar     eax, 8
.text:00001E52                 mov     edx, [ebp+arg_4]
.text:00001E55                 add     edx, [ebp+var_8]
.text:00001E58                 mov     [edx+2], al
.text:00001E5B                 mov     eax, [ebp+var_4]
.text:00001E5E                 mov     ecx, [eax+10h]
.text:00001E61                 push    ecx
.text:00001E62                 call    _ssh2_bignum_length
.text:00001E67                 add     esp, 4
.text:00001E6A                 sub     eax, 4
.text:00001E6D                 mov     edx, [ebp+arg_4]
.text:00001E70                 add     edx, [ebp+var_8]
.text:00001E73                 mov     [edx+3], al
.text:00001E76                 mov     eax, [ebp+var_8]
.text:00001E79                 add     eax, 4
.text:00001E7C                 mov     [ebp+var_8], eax
.text:00001E7F                 mov     ecx, [ebp+var_4]
.text:00001E82                 mov     edx, [ecx+10h]
.text:00001E85                 push    edx
.text:00001E86                 call    _ssh2_bignum_length
.text:00001E8B                 add     esp, 4
.text:00001E8E                 sub     eax, 4
.text:00001E91                 mov     [ebp+var_C], eax
.text:00001E94
.text:00001E94 loc_1E94:                               ; CODE XREF: _dss_openssh_fmtkey+491j
.text:00001E94                 mov     eax, [ebp+var_C]
.text:00001E97                 mov     [ebp+var_20], eax
.text:00001E9A                 mov     ecx, [ebp+var_C]
.text:00001E9D                 sub     ecx, 1
.text:00001EA0                 mov     [ebp+var_C], ecx
.text:00001EA3                 cmp     [ebp+var_20], 0
.text:00001EA7                 jz      short loc_1ECF
.text:00001EA9                 mov     edx, [ebp+var_C]
.text:00001EAC                 push    edx
.text:00001EAD                 mov     eax, [ebp+var_4]
.text:00001EB0                 mov     ecx, [eax+10h]
.text:00001EB3                 push    ecx
.text:00001EB4                 call    _bignum_byte
.text:00001EB9                 add     esp, 8
.text:00001EBC                 mov     edx, [ebp+arg_4]
.text:00001EBF                 add     edx, [ebp+var_8]
.text:00001EC2                 mov     [edx], al
.text:00001EC4                 mov     eax, [ebp+var_8]
.text:00001EC7                 add     eax, 1
.text:00001ECA                 mov     [ebp+var_8], eax
.text:00001ECD                 jmp     short loc_1E94
.text:00001ECF ; ---------------------------------------------------------------------------
.text:00001ECF
.text:00001ECF loc_1ECF:                               ; CODE XREF: _dss_openssh_fmtkey+46Bj
.text:00001ECF                 mov     eax, [ebp+var_8]
.text:00001ED2
.text:00001ED2 loc_1ED2:                               ; CODE XREF: _dss_openssh_fmtkey+8Cj
.text:00001ED2                 pop     esi
.text:00001ED3                 add     esp, 20h
.text:00001ED6                 cmp     ebp, esp
.text:00001ED8                 call    __RTC_CheckEsp
.text:00001EDD                 mov     esp, ebp
.text:00001EDF                 pop     ebp
.text:00001EE0                 retn
.text:00001EE0 _dss_openssh_fmtkey endp
.text:00001EE0
.text:00001EE0 ; ---------------------------------------------------------------------------
.text:00001EE1                 db 0Bh dup(0CCh)
.text:00001EEC
.text:00001EEC ; =============== S U B R O U T I N E =======================================
.text:00001EEC
.text:00001EEC ; Attributes: bp-based frame
.text:00001EEC
.text:00001EEC _dss_pubkey_bits proc near              ; DATA XREF: .rdata:00000150o
.text:00001EEC
.text:00001EEC var_8           = dword ptr -8
.text:00001EEC var_4           = dword ptr -4
.text:00001EEC arg_0           = dword ptr  8
.text:00001EEC arg_4           = dword ptr  0Ch
.text:00001EEC
.text:00001EEC                 push    ebp
.text:00001EED                 mov     ebp, esp
.text:00001EEF                 sub     esp, 8
.text:00001EF2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001EF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F00                 mov     eax, [ebp+arg_4]
.text:00001F03                 push    eax
.text:00001F04                 mov     ecx, [ebp+arg_0]
.text:00001F07                 push    ecx
.text:00001F08                 call    _dss_newkey
.text:00001F0D                 add     esp, 8
.text:00001F10                 mov     [ebp+var_4], eax
.text:00001F13                 cmp     [ebp+var_4], 0
.text:00001F17                 jnz     short loc_1F1E
.text:00001F19                 or      eax, 0FFFFFFFFh
.text:00001F1C                 jmp     short loc_1F3E
.text:00001F1E ; ---------------------------------------------------------------------------
.text:00001F1E
.text:00001F1E loc_1F1E:                               ; CODE XREF: _dss_pubkey_bits+2Bj
.text:00001F1E                 mov     edx, [ebp+var_4]
.text:00001F21                 mov     eax, [edx]
.text:00001F23                 push    eax
.text:00001F24                 call    _bignum_bitcount
.text:00001F29                 add     esp, 4
.text:00001F2C                 mov     [ebp+var_8], eax
.text:00001F2F                 mov     ecx, [ebp+var_4]
.text:00001F32                 push    ecx
.text:00001F33                 call    _dss_freekey
.text:00001F38                 add     esp, 4
.text:00001F3B                 mov     eax, [ebp+var_8]
.text:00001F3E
.text:00001F3E loc_1F3E:                               ; CODE XREF: _dss_pubkey_bits+30j
.text:00001F3E                 add     esp, 8
.text:00001F41                 cmp     ebp, esp
.text:00001F43                 call    __RTC_CheckEsp
.text:00001F48                 mov     esp, ebp
.text:00001F4A                 pop     ebp
.text:00001F4B                 retn
.text:00001F4B _dss_pubkey_bits endp
.text:00001F4B
.text:00001F4C
.text:00001F4C ; =============== S U B R O U T I N E =======================================
.text:00001F4C
.text:00001F4C ; Attributes: bp-based frame
.text:00001F4C
.text:00001F4C _dss_sign       proc near               ; DATA XREF: .rdata:0000015Co
.text:00001F4C
.text:00001F4C var_250         = byte ptr -250h
.text:00001F4C var_24C         = byte ptr -24Ch
.text:00001F4C var_174         = dword ptr -174h
.text:00001F4C var_170         = dword ptr -170h
.text:00001F4C var_16C         = dword ptr -16Ch
.text:00001F4C var_168         = dword ptr -168h
.text:00001F4C var_164         = dword ptr -164h
.text:00001F4C var_160         = dword ptr -160h
.text:00001F4C var_15C         = dword ptr -15Ch
.text:00001F4C var_158         = dword ptr -158h
.text:00001F4C var_154         = dword ptr -154h
.text:00001F4C var_150         = dword ptr -150h
.text:00001F4C var_14C         = dword ptr -14Ch
.text:00001F4C var_144         = byte ptr -144h
.text:00001F4C var_FC          = byte ptr -0FCh
.text:00001F4C var_E0          = byte ptr -0E0h
.text:00001F4C var_8           = dword ptr -8
.text:00001F4C var_4           = dword ptr -4
.text:00001F4C arg_0           = dword ptr  8
.text:00001F4C arg_4           = dword ptr  0Ch
.text:00001F4C arg_8           = dword ptr  10h
.text:00001F4C arg_C           = dword ptr  14h
.text:00001F4C
.text:00001F4C                 push    ebp
.text:00001F4D                 mov     ebp, esp
.text:00001F4F                 sub     esp, 250h
.text:00001F55                 push    esi
.text:00001F56                 push    edi
.text:00001F57                 lea     edi, [ebp+var_250]
.text:00001F5D                 mov     ecx, 94h ; 'ö'
.text:00001F62                 mov     eax, 0CCCCCCCCh
.text:00001F67                 rep stosd
.text:00001F69                 mov     eax, dword ptr ds:___security_cookie
.text:00001F6E                 xor     eax, ebp
.text:00001F70                 mov     [ebp+var_4], eax
.text:00001F73                 mov     eax, [ebp+arg_0]
.text:00001F76                 mov     [ebp+var_8], eax
.text:00001F79                 lea     ecx, [ebp+var_FC]
.text:00001F7F                 push    ecx
.text:00001F80                 mov     edx, [ebp+arg_8]
.text:00001F83                 push    edx
.text:00001F84                 mov     eax, [ebp+arg_4]
.text:00001F87                 push    eax
.text:00001F88                 call    _SHA_Simple
.text:00001F8D                 add     esp, 0Ch
.text:00001F90                 lea     ecx, [ebp+var_E0]
.text:00001F96                 push    ecx
.text:00001F97                 call    _SHA512_Init
.text:00001F9C                 add     esp, 4
.text:00001F9F                 push    1Eh
.text:00001FA1                 push    offset $SG7600  ; "DSA deterministic k generator"
.text:00001FA6                 lea     edx, [ebp+var_E0]
.text:00001FAC                 push    edx
.text:00001FAD                 call    _SHA512_Bytes
.text:00001FB2                 add     esp, 0Ch
.text:00001FB5                 mov     eax, [ebp+var_8]
.text:00001FB8                 mov     ecx, [eax+10h]
.text:00001FBB                 push    ecx
.text:00001FBC                 lea     edx, [ebp+var_E0]
.text:00001FC2                 push    edx
.text:00001FC3                 call    _sha512_mpint
.text:00001FC8                 add     esp, 8
.text:00001FCB                 lea     eax, [ebp+var_144]
.text:00001FD1                 push    eax
.text:00001FD2                 lea     ecx, [ebp+var_E0]
.text:00001FD8                 push    ecx
.text:00001FD9                 call    _SHA512_Final
.text:00001FDE                 add     esp, 8
.text:00001FE1                 lea     edx, [ebp+var_E0]
.text:00001FE7                 push    edx
.text:00001FE8                 call    _SHA512_Init
.text:00001FED                 add     esp, 4
.text:00001FF0                 push    40h ; '@'
.text:00001FF2                 lea     eax, [ebp+var_144]
.text:00001FF8                 push    eax
.text:00001FF9                 lea     ecx, [ebp+var_E0]
.text:00001FFF                 push    ecx
.text:00002000                 call    _SHA512_Bytes
.text:00002005                 add     esp, 0Ch
.text:00002008                 push    14h
.text:0000200A                 lea     edx, [ebp+var_FC]
.text:00002010                 push    edx
.text:00002011                 lea     eax, [ebp+var_E0]
.text:00002017                 push    eax
.text:00002018                 call    _SHA512_Bytes
.text:0000201D                 add     esp, 0Ch
.text:00002020
.text:00002020 loc_2020:                               ; CODE XREF: _dss_sign+1AAj
.text:00002020                                         ; _dss_sign+1B1j
.text:00002020                 mov     ecx, 1
.text:00002025                 test    ecx, ecx
.text:00002027                 jz      loc_2102
.text:0000202D                 mov     ecx, 35h ; '5'
.text:00002032                 lea     esi, [ebp+var_E0]
.text:00002038                 lea     edi, [ebp+var_24C]
.text:0000203E                 rep movsd
.text:00002040                 lea     edx, [ebp+var_144]
.text:00002046                 push    edx
.text:00002047                 lea     eax, [ebp+var_24C]
.text:0000204D                 push    eax
.text:0000204E                 call    _SHA512_Final
.text:00002053                 add     esp, 8
.text:00002056                 push    0D4h ; '+'
.text:0000205B                 lea     ecx, [ebp+var_24C]
.text:00002061                 push    ecx
.text:00002062                 call    _smemclr
.text:00002067                 add     esp, 8
.text:0000206A                 push    40h ; '@'
.text:0000206C                 lea     edx, [ebp+var_144]
.text:00002072                 push    edx
.text:00002073                 call    _bignum_from_bytes
.text:00002078                 add     esp, 8
.text:0000207B                 mov     [ebp+var_14C], eax
.text:00002081                 mov     eax, [ebp+var_8]
.text:00002084                 mov     ecx, [eax+4]
.text:00002087                 push    ecx
.text:00002088                 mov     edx, [ebp+var_14C]
.text:0000208E                 push    edx
.text:0000208F                 call    _bigmod
.text:00002094                 add     esp, 8
.text:00002097                 mov     [ebp+var_150], eax
.text:0000209D                 mov     eax, [ebp+var_14C]
.text:000020A3                 push    eax
.text:000020A4                 call    _freebn
.text:000020A9                 add     esp, 4
.text:000020AC                 mov     ecx, [ebp+var_8]
.text:000020AF                 mov     edx, [ecx+4]
.text:000020B2                 push    edx
.text:000020B3                 mov     eax, [ebp+var_150]
.text:000020B9                 push    eax
.text:000020BA                 call    _modinv
.text:000020BF                 add     esp, 8
.text:000020C2                 mov     [ebp+var_15C], eax
.text:000020C8                 cmp     [ebp+var_15C], 0
.text:000020CF                 jnz     short loc_20FB
.text:000020D1                 mov     ecx, [ebp+var_150]
.text:000020D7                 push    ecx
.text:000020D8                 call    _freebn
.text:000020DD                 add     esp, 4
.text:000020E0                 push    1
.text:000020E2                 push    offset $SG7606
.text:000020E7                 lea     edx, [ebp+var_E0]
.text:000020ED                 push    edx
.text:000020EE                 call    _SHA512_Bytes
.text:000020F3                 add     esp, 0Ch
.text:000020F6                 jmp     loc_2020
.text:000020FB ; ---------------------------------------------------------------------------
.text:000020FB
.text:000020FB loc_20FB:                               ; CODE XREF: _dss_sign+183j
.text:000020FB                 jmp     short loc_2102
.text:000020FD ; ---------------------------------------------------------------------------
.text:000020FD                 jmp     loc_2020
.text:00002102 ; ---------------------------------------------------------------------------
.text:00002102
.text:00002102 loc_2102:                               ; CODE XREF: _dss_sign+DBj
.text:00002102                                         ; _dss_sign:loc_20FBj
.text:00002102                 push    0D4h ; '+'
.text:00002107                 lea     eax, [ebp+var_E0]
.text:0000210D                 push    eax
.text:0000210E                 call    _smemclr
.text:00002113                 add     esp, 8
.text:00002116                 push    40h ; '@'
.text:00002118                 lea     ecx, [ebp+var_144]
.text:0000211E                 push    ecx
.text:0000211F                 call    _smemclr
.text:00002124                 add     esp, 8
.text:00002127                 mov     edx, [ebp+var_8]
.text:0000212A                 mov     eax, [edx]
.text:0000212C                 push    eax
.text:0000212D                 mov     ecx, [ebp+var_150]
.text:00002133                 push    ecx
.text:00002134                 mov     edx, [ebp+var_8]
.text:00002137                 mov     eax, [edx+8]
.text:0000213A                 push    eax
.text:0000213B                 call    _modpow
.text:00002140                 add     esp, 0Ch
.text:00002143                 mov     [ebp+var_154], eax
.text:00002149                 mov     ecx, [ebp+var_8]
.text:0000214C                 mov     edx, [ecx+4]
.text:0000214F                 push    edx
.text:00002150                 mov     eax, [ebp+var_154]
.text:00002156                 push    eax
.text:00002157                 call    _bigmod
.text:0000215C                 add     esp, 8
.text:0000215F                 mov     [ebp+var_164], eax
.text:00002165                 mov     ecx, [ebp+var_154]
.text:0000216B                 push    ecx
.text:0000216C                 call    _freebn
.text:00002171                 add     esp, 4
.text:00002174                 push    14h
.text:00002176                 lea     edx, [ebp+var_FC]
.text:0000217C                 push    edx
.text:0000217D                 call    _bignum_from_bytes
.text:00002182                 add     esp, 8
.text:00002185                 mov     [ebp+var_158], eax
.text:0000218B                 mov     eax, [ebp+var_158]
.text:00002191                 push    eax
.text:00002192                 mov     ecx, [ebp+var_164]
.text:00002198                 push    ecx
.text:00002199                 mov     edx, [ebp+var_8]
.text:0000219C                 mov     eax, [edx+10h]
.text:0000219F                 push    eax
.text:000021A0                 call    _bigmuladd
.text:000021A5                 add     esp, 0Ch
.text:000021A8                 mov     [ebp+var_160], eax
.text:000021AE                 mov     ecx, [ebp+var_8]
.text:000021B1                 mov     edx, [ecx+4]
.text:000021B4                 push    edx
.text:000021B5                 mov     eax, [ebp+var_160]
.text:000021BB                 push    eax
.text:000021BC                 mov     ecx, [ebp+var_15C]
.text:000021C2                 push    ecx
.text:000021C3                 call    _modmul
.text:000021C8                 add     esp, 0Ch
.text:000021CB                 mov     [ebp+var_168], eax
.text:000021D1                 mov     edx, [ebp+var_160]
.text:000021D7                 push    edx
.text:000021D8                 call    _freebn
.text:000021DD                 add     esp, 4
.text:000021E0                 mov     eax, [ebp+var_15C]
.text:000021E6                 push    eax
.text:000021E7                 call    _freebn
.text:000021EC                 add     esp, 4
.text:000021EF                 mov     ecx, [ebp+var_150]
.text:000021F5                 push    ecx
.text:000021F6                 call    _freebn
.text:000021FB                 add     esp, 4
.text:000021FE                 mov     edx, [ebp+var_158]
.text:00002204                 push    edx
.text:00002205                 call    _freebn
.text:0000220A                 add     esp, 4
.text:0000220D                 mov     [ebp+var_170], 37h ; '7'
.text:00002217                 push    1
.text:00002219                 mov     eax, [ebp+var_170]
.text:0000221F                 push    eax
.text:00002220                 call    _safemalloc
.text:00002225                 add     esp, 8
.text:00002228                 mov     [ebp+var_16C], eax
.text:0000222E                 mov     ecx, [ebp+var_16C]
.text:00002234                 mov     byte ptr [ecx], 0
.text:00002237                 mov     edx, [ebp+var_16C]
.text:0000223D                 mov     byte ptr [edx+1], 0
.text:00002241                 mov     eax, [ebp+var_16C]
.text:00002247                 mov     byte ptr [eax+2], 0
.text:0000224B                 mov     ecx, [ebp+var_16C]
.text:00002251                 mov     byte ptr [ecx+3], 7
.text:00002255                 push    7               ; size_t
.text:00002257                 push    offset $SG7613  ; "ssh-dss"
.text:0000225C                 mov     edx, [ebp+var_16C]
.text:00002262                 add     edx, 4
.text:00002265                 push    edx             ; void *
.text:00002266                 call    _memcpy
.text:0000226B                 add     esp, 0Ch
.text:0000226E                 mov     eax, [ebp+var_16C]
.text:00002274                 mov     byte ptr [eax+0Bh], 0
.text:00002278                 mov     ecx, [ebp+var_16C]
.text:0000227E                 mov     byte ptr [ecx+0Ch], 0
.text:00002282                 mov     edx, [ebp+var_16C]
.text:00002288                 mov     byte ptr [edx+0Dh], 0
.text:0000228C                 mov     eax, [ebp+var_16C]
.text:00002292                 mov     byte ptr [eax+0Eh], 28h ; '('
.text:00002296                 mov     [ebp+var_174], 0
.text:000022A0                 jmp     short loc_22B1
.text:000022A2 ; ---------------------------------------------------------------------------
.text:000022A2
.text:000022A2 loc_22A2:                               ; CODE XREF: _dss_sign+3C2j
.text:000022A2                 mov     ecx, [ebp+var_174]
.text:000022A8                 add     ecx, 1
.text:000022AB                 mov     [ebp+var_174], ecx
.text:000022B1
.text:000022B1 loc_22B1:                               ; CODE XREF: _dss_sign+354j
.text:000022B1                 cmp     [ebp+var_174], 14h
.text:000022B8                 jge     short loc_2310
.text:000022BA                 mov     edx, 13h
.text:000022BF                 sub     edx, [ebp+var_174]
.text:000022C5                 push    edx
.text:000022C6                 mov     eax, [ebp+var_164]
.text:000022CC                 push    eax
.text:000022CD                 call    _bignum_byte
.text:000022D2                 add     esp, 8
.text:000022D5                 mov     ecx, [ebp+var_16C]
.text:000022DB                 add     ecx, [ebp+var_174]
.text:000022E1                 mov     [ecx+0Fh], al
.text:000022E4                 mov     edx, 13h
.text:000022E9                 sub     edx, [ebp+var_174]
.text:000022EF                 push    edx
.text:000022F0                 mov     eax, [ebp+var_168]
.text:000022F6                 push    eax
.text:000022F7                 call    _bignum_byte
.text:000022FC                 add     esp, 8
.text:000022FF                 mov     ecx, [ebp+var_16C]
.text:00002305                 add     ecx, [ebp+var_174]
.text:0000230B                 mov     [ecx+23h], al
.text:0000230E                 jmp     short loc_22A2
.text:00002310 ; ---------------------------------------------------------------------------
.text:00002310
.text:00002310 loc_2310:                               ; CODE XREF: _dss_sign+36Cj
.text:00002310                 mov     edx, [ebp+var_164]
.text:00002316                 push    edx
.text:00002317                 call    _freebn
.text:0000231C                 add     esp, 4
.text:0000231F                 mov     eax, [ebp+var_168]
.text:00002325                 push    eax
.text:00002326                 call    _freebn
.text:0000232B                 add     esp, 4
.text:0000232E                 mov     ecx, [ebp+arg_C]
.text:00002331                 mov     edx, [ebp+var_170]
.text:00002337                 mov     [ecx], edx
.text:00002339                 mov     eax, [ebp+var_16C]
.text:0000233F                 push    edx
.text:00002340                 mov     ecx, ebp
.text:00002342                 push    eax
.text:00002343                 lea     edx, $LN14_1
.text:00002349                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000234E                 pop     eax
.text:0000234F                 pop     edx
.text:00002350                 pop     edi
.text:00002351                 pop     esi
.text:00002352                 mov     ecx, [ebp+var_4]
.text:00002355                 xor     ecx, ebp
.text:00002357                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000235C                 add     esp, 250h
.text:00002362                 cmp     ebp, esp
.text:00002364                 call    __RTC_CheckEsp
.text:00002369                 mov     esp, ebp
.text:0000236B                 pop     ebp
.text:0000236C                 retn
.text:0000236C _dss_sign       endp
.text:0000236C
.text:0000236C ; ---------------------------------------------------------------------------
.text:0000236D                 align 10h
.text:00002370 $LN14_1         dd 4                    ; DATA XREF: _dss_sign+3F7o
.text:00002374                 dd offset $LN13_1
.text:00002378 $LN13_1         dd 0FFFFFF20h, 0D4h     ; DATA XREF: .text:00002374o
.text:00002380                 dd offset $LN9_2        ; "ss"
.text:00002384                 dd 0FFFFFF04h, 14h
.text:0000238C                 dd offset $LN10_1       ; "digest"
.text:00002390                 dd 0FFFFFEBCh, 40h
.text:00002398                 dd offset $LN11_0       ; "digest512"
.text:0000239C                 dd 0FFFFFDB4h, 0D4h
.text:000023A4                 dd offset $LN12_0
.text:000023A8 $LN12_0         dd 327373h              ; DATA XREF: .text:000023A4o
.text:000023AC $LN11_0         db 'digest512',0        ; DATA XREF: .text:00002398o
.text:000023B6 $LN10_1         db 'digest',0           ; DATA XREF: .text:0000238Co
.text:000023BD $LN9_2          db 'ss',0               ; DATA XREF: .text:00002380o
.text:000023C0                 db 0Ch dup(0CCh)
.text:000023CC
.text:000023CC ; =============== S U B R O U T I N E =======================================
.text:000023CC
.text:000023CC ; Attributes: bp-based frame
.text:000023CC
.text:000023CC _sha512_mpint   proc near               ; CODE XREF: _dss_sign+77p
.text:000023CC
.text:000023CC var_14          = dword ptr -14h
.text:000023CC var_10          = dword ptr -10h
.text:000023CC var_C           = dword ptr -0Ch
.text:000023CC var_8           = dword ptr -8
.text:000023CC var_4           = dword ptr -4
.text:000023CC arg_0           = dword ptr  8
.text:000023CC arg_4           = dword ptr  0Ch
.text:000023CC
.text:000023CC                 push    ebp
.text:000023CD                 mov     ebp, esp
.text:000023CF                 sub     esp, 14h
.text:000023D2                 mov     eax, 0CCCCCCCCh
.text:000023D7                 mov     [ebp+var_14], eax
.text:000023DA                 mov     [ebp+var_10], eax
.text:000023DD                 mov     [ebp+var_C], eax
.text:000023E0                 mov     [ebp+var_8], eax
.text:000023E3                 mov     [ebp+var_4], eax
.text:000023E6                 mov     eax, [ebp+arg_4]
.text:000023E9                 push    eax
.text:000023EA                 call    _bignum_bitcount
.text:000023EF                 add     esp, 4
.text:000023F2                 add     eax, 8
.text:000023F5                 cdq
.text:000023F6                 and     edx, 7
.text:000023F9                 add     eax, edx
.text:000023FB                 sar     eax, 3
.text:000023FE                 mov     [ebp+var_10], eax
.text:00002401                 mov     ecx, [ebp+var_10]
.text:00002404                 sar     ecx, 18h
.text:00002407                 mov     byte ptr [ebp+var_8], cl
.text:0000240A                 mov     edx, [ebp+var_10]
.text:0000240D                 sar     edx, 10h
.text:00002410                 mov     byte ptr [ebp+var_8+1], dl
.text:00002413                 mov     eax, [ebp+var_10]
.text:00002416                 sar     eax, 8
.text:00002419                 mov     byte ptr [ebp+var_8+2], al
.text:0000241C                 mov     cl, byte ptr [ebp+var_10]
.text:0000241F                 mov     byte ptr [ebp+var_8+3], cl
.text:00002422                 push    4
.text:00002424                 lea     edx, [ebp+var_8]
.text:00002427                 push    edx
.text:00002428                 mov     eax, [ebp+arg_0]
.text:0000242B                 push    eax
.text:0000242C                 call    _SHA512_Bytes
.text:00002431                 add     esp, 0Ch
.text:00002434
.text:00002434 loc_2434:                               ; CODE XREF: _sha512_mpint+B3j
.text:00002434                 mov     ecx, [ebp+var_10]
.text:00002437                 mov     edx, [ebp+var_10]
.text:0000243A                 sub     edx, 1
.text:0000243D                 mov     [ebp+var_10], edx
.text:00002440                 test    ecx, ecx
.text:00002442                 jle     short loc_244D
.text:00002444                 mov     [ebp+var_14], 1
.text:0000244B                 jmp     short loc_2454
.text:0000244D ; ---------------------------------------------------------------------------
.text:0000244D
.text:0000244D loc_244D:                               ; CODE XREF: _sha512_mpint+76j
.text:0000244D                 mov     [ebp+var_14], 0
.text:00002454
.text:00002454 loc_2454:                               ; CODE XREF: _sha512_mpint+7Fj
.text:00002454                 cmp     [ebp+var_14], 0
.text:00002458                 jz      short loc_2481
.text:0000245A                 mov     eax, [ebp+var_10]
.text:0000245D                 push    eax
.text:0000245E                 mov     ecx, [ebp+arg_4]
.text:00002461                 push    ecx
.text:00002462                 call    _bignum_byte
.text:00002467                 add     esp, 8
.text:0000246A                 mov     byte ptr [ebp+var_8], al
.text:0000246D                 push    1
.text:0000246F                 lea     edx, [ebp+var_8]
.text:00002472                 push    edx
.text:00002473                 mov     eax, [ebp+arg_0]
.text:00002476                 push    eax
.text:00002477                 call    _SHA512_Bytes
.text:0000247C                 add     esp, 0Ch
.text:0000247F                 jmp     short loc_2434
.text:00002481 ; ---------------------------------------------------------------------------
.text:00002481
.text:00002481 loc_2481:                               ; CODE XREF: _sha512_mpint+8Cj
.text:00002481                 push    4
.text:00002483                 lea     ecx, [ebp+var_8]
.text:00002486                 push    ecx
.text:00002487                 call    _smemclr
.text:0000248C                 add     esp, 8
.text:0000248F                 push    edx
.text:00002490                 mov     ecx, ebp
.text:00002492                 push    eax
.text:00002493                 lea     edx, $LN9_3
.text:00002499                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000249E                 pop     eax
.text:0000249F                 pop     edx
.text:000024A0                 add     esp, 14h
.text:000024A3                 cmp     ebp, esp
.text:000024A5                 call    __RTC_CheckEsp
.text:000024AA                 mov     esp, ebp
.text:000024AC                 pop     ebp
.text:000024AD                 retn
.text:000024AD _sha512_mpint   endp
.text:000024AD
.text:000024AD ; ---------------------------------------------------------------------------
.text:000024AE                 align 10h
.text:000024B0 $LN9_3          dd 1                    ; DATA XREF: _sha512_mpint+C7o
.text:000024B4                 dd offset $LN8_3
.text:000024B8 $LN8_3          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000024B4o
.text:000024C0                 dd offset $LN7_2        ; "lenbuf"
.text:000024C4 $LN7_2          db 'lenbuf',0           ; DATA XREF: .text:000024C0o
.text:000024CB                 align 4
.text:000024CB _text           ends
.text:000024CB
.rtc$TMZ:000024CC ; ===========================================================================
.rtc$TMZ:000024CC
.rtc$TMZ:000024CC ; Segment type: Pure data
.rtc$TMZ:000024CC ; Segment permissions: Read
.rtc$TMZ:000024CC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000024CC                 assume cs:_rtc$TMZ
.rtc$TMZ:000024CC                 ;org 24CCh
.rtc$TMZ:000024CC ; COMDAT (pick any)
.rtc$TMZ:000024CC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000024CC _rtc$TMZ        ends
.rtc$TMZ:000024CC
.rtc$IMZ:000024D0 ; ===========================================================================
.rtc$IMZ:000024D0
.rtc$IMZ:000024D0 ; Segment type: Pure data
.rtc$IMZ:000024D0 ; Segment permissions: Read
.rtc$IMZ:000024D0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000024D0                 assume cs:_rtc$IMZ
.rtc$IMZ:000024D0                 ;org 24D0h
.rtc$IMZ:000024D0 ; COMDAT (pick any)
.rtc$IMZ:000024D0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000024D0 _rtc$IMZ        ends
.rtc$IMZ:000024D0
UNDEF:000024E0 ; ===========================================================================
UNDEF:000024E0
UNDEF:000024E0 ; Segment type: Externs
UNDEF:000024E0 ; UNDEF
UNDEF:000024E0                 extrn _bignum_cmp:near  ; CODE XREF: _dss_newkey+10Fp
UNDEF:000024E0                                         ; _dss_newkey+128p ...
UNDEF:000024E4                 extrn _Zero:near        ; DATA XREF: _dss_newkey+101r
UNDEF:000024E4                                         ; _dss_newkey+11Br ...
UNDEF:000024E8                 extrn _safefree:near    ; CODE XREF: _dss_newkey+6Ep
UNDEF:000024E8                                         ; _dss_freekey+8Bp
UNDEF:000024EC ; int __cdecl memcmp(const void *, const void *, size_t)
UNDEF:000024EC                 extrn _memcmp:near      ; CODE XREF: _dss_newkey+5Ep
UNDEF:000024EC                                         ; _dss_verifysig+6Ap ...
UNDEF:000024F0                 extrn _safemalloc:near  ; CODE XREF: _dss_newkey+24p
UNDEF:000024F0                                         ; _dss_fmtkey+CBp ...
UNDEF:000024F4                 extrn __RTC_CheckEsp:near ; CODE XREF: _dss_newkey+15Dp
UNDEF:000024F4                                         ; _getstring+B5p ...
UNDEF:000024F8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000024F8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000024F8                                         ; CODE XREF: _dss_newkey+151p
UNDEF:000024F8                                         ; _getmp+74p ...
UNDEF:000024FC                 extrn __RTC_Shutdown:near
UNDEF:000024FC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002500                 extrn __RTC_InitBase:near
UNDEF:00002500                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002504                 extrn _toint:near       ; CODE XREF: _getstring+4Cp
UNDEF:00002508                 extrn _bignum_from_bytes:near ; CODE XREF: _getmp+5Cp
UNDEF:00002508                                         ; _get160+1Fp ...
UNDEF:0000250C                 extrn _freebn:near      ; CODE XREF: _dss_freekey+1Fp
UNDEF:0000250C                                         ; _dss_freekey+37p ...
UNDEF:00002510                 extrn _bignum_byte:near ; CODE XREF: _dss_fmtkey+158p
UNDEF:00002510                                         ; _dss_fmtkey+201p ...
UNDEF:00002514 ; int sprintf(char *, const char *, ...)
UNDEF:00002514                 extrn _sprintf:near     ; CODE XREF: _dss_fmtkey+F6p
UNDEF:00002514                                         ; _dss_fmtkey+19Dp ...
UNDEF:00002518                 extrn _bignum_bitcount:near ; CODE XREF: _dss_fmtkey+38p
UNDEF:00002518                                         ; _dss_fmtkey+5Dp ...
UNDEF:0000251C ; char *__cdecl strcpy(char *, const char *)
UNDEF:0000251C                 extrn _strcpy:near      ; CODE XREF: _dss_fingerprint+47Ap
UNDEF:00002520 ; size_t __cdecl strlen(const char *)
UNDEF:00002520                 extrn _strlen:near      ; CODE XREF: _dss_fingerprint+426p
UNDEF:00002520                                         ; _dss_fingerprint+449p
UNDEF:00002524                 extrn _MD5Final:near    ; CODE XREF: _dss_fingerprint+399p
UNDEF:00002528                 extrn _MD5Update:near   ; CODE XREF: _dss_fingerprint+43p
UNDEF:00002528                                         ; _dss_fingerprint+B1p ...
UNDEF:0000252C                 extrn _MD5Init:near     ; CODE XREF: _dss_fingerprint+30p
UNDEF:00002530                 extrn ___security_cookie:near
UNDEF:00002530                                         ; DATA XREF: _dss_fingerprint+1Cr
UNDEF:00002530                                         ; _dss_verifysig+16r ...
UNDEF:00002534 ; __fastcall __security_check_cookie(x)
UNDEF:00002534                 extrn @__security_check_cookie@4:near
UNDEF:00002534                                         ; CODE XREF: _dss_fingerprint+49Fp
UNDEF:00002534                                         ; _dss_verifysig+2DDp ...
UNDEF:00002538                 extrn _One:near         ; DATA XREF: _dss_verifysig+21Cr
UNDEF:0000253C                 extrn _modpow:near      ; CODE XREF: _dss_verifysig+1D5p
UNDEF:0000253C                                         ; _dss_verifysig+1F1p ...
UNDEF:00002540                 extrn _modmul:near      ; CODE XREF: _dss_verifysig+19Fp
UNDEF:00002540                                         ; _dss_verifysig+1B9p ...
UNDEF:00002544                 extrn _SHA_Simple:near  ; CODE XREF: _dss_verifysig+168p
UNDEF:00002544                                         ; _dss_sign+3Cp
UNDEF:00002548                 extrn _modinv:near      ; CODE XREF: _dss_verifysig+12Cp
UNDEF:00002548                                         ; _dss_sign+16Ep
UNDEF:0000254C                 extrn __wassert:near    ; CODE XREF: _dss_public_blob+2E2p
UNDEF:0000254C                                         ; _dss_private_blob+F1p
UNDEF:00002550 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00002550                 extrn _memcpy:near      ; CODE XREF: _dss_public_blob+ECp
UNDEF:00002550                                         ; _dss_sign+31Ap
UNDEF:00002554                 extrn _SHA_Final:near   ; CODE XREF: _dss_createkey+105p
UNDEF:00002558                 extrn _SHA_Init:near    ; CODE XREF: _dss_createkey+AEp
UNDEF:0000255C                 extrn _smemclr:near     ; CODE XREF: _sha_mpint+BBp
UNDEF:0000255C                                         ; _dss_sign+116p ...
UNDEF:00002560                 extrn _SHA_Bytes:near   ; CODE XREF: _sha_mpint+60p
UNDEF:00002560                                         ; _sha_mpint+ABp
UNDEF:00002564                 extrn _ssh2_bignum_length:near
UNDEF:00002564                                         ; CODE XREF: _dss_openssh_fmtkey+30p
UNDEF:00002564                                         ; _dss_openssh_fmtkey+41p ...
UNDEF:00002568                 extrn _bigmuladd:near   ; CODE XREF: _dss_sign+254p
UNDEF:0000256C                 extrn _bigmod:near      ; CODE XREF: _dss_sign+143p
UNDEF:0000256C                                         ; _dss_sign+20Bp
UNDEF:00002570                 extrn _SHA512_Final:near ; CODE XREF: _dss_sign+8Dp
UNDEF:00002570                                         ; _dss_sign+102p
UNDEF:00002574                 extrn _SHA512_Bytes:near ; CODE XREF: _dss_sign+61p
UNDEF:00002574                                         ; _dss_sign+B4p ...
UNDEF:00002578                 extrn _SHA512_Init:near ; CODE XREF: _dss_sign+4Bp
UNDEF:00002578                                         ; _dss_sign+9Cp
UNDEF:00002578
UNDEF:00002578
UNDEF:00002578                 end