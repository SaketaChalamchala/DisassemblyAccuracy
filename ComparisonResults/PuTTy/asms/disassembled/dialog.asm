.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : AE63E3ED25E36AC1D555A0520550136D
.data:00000000 ; Input CRC32 : F702557B
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\dialog.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG86314:                               ; DATA XREF: _ctrl_columns+58o
.data:00000000                 unicode 0, <..\..\..\dialog.c>,0
.data:00000024                 align 8
.data:00000028 $SG86315:                               ; DATA XREF: _ctrl_columns+5Do
.data:00000028                 unicode 0, <s->
.data:00000028                 dw 3Eh
.data:00000028                 unicode 0, <ncolumns == 1 || ncolumns == 1>,0
.data:00000028 _data           ends
.data:00000028
.text:0000006C ; ===========================================================================
.text:0000006C
.text:0000006C ; Segment type: Pure code
.text:0000006C ; Segment permissions: Read/Execute
.text:0000006C _text           segment para public 'CODE' use32
.text:0000006C                 assume cs:_text
.text:0000006C                 ;org 6Ch
.text:0000006C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000006C
.text:0000006C ; =============== S U B R O U T I N E =======================================
.text:0000006C
.text:0000006C ; Attributes: bp-based frame
.text:0000006C
.text:0000006C                 public _I
.text:0000006C _I              proc near
.text:0000006C
.text:0000006C var_C           = dword ptr -0Ch
.text:0000006C var_8           = dword ptr -8
.text:0000006C var_4           = dword ptr -4
.text:0000006C arg_0           = dword ptr  8
.text:0000006C
.text:0000006C                 push    ebp
.text:0000006D                 mov     ebp, esp
.text:0000006F                 sub     esp, 0Ch
.text:00000072                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000079                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000080                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000087                 mov     eax, [ebp+arg_0]
.text:0000008A                 mov     [ebp+var_8], eax
.text:0000008D                 mov     eax, [ebp+var_8]
.text:00000090                 push    edx
.text:00000091                 mov     ecx, ebp
.text:00000093                 push    eax
.text:00000094                 lea     edx, $LN5
.text:0000009A                 call    @_RTC_CheckStackVars@8
.text:0000009F                 pop     eax
.text:000000A0                 pop     edx
.text:000000A1                 mov     esp, ebp
.text:000000A3                 pop     ebp
.text:000000A4                 retn
.text:000000A4 _I              endp
.text:000000A4
.text:000000A4 ; ---------------------------------------------------------------------------
.text:000000A5                 align 4
.text:000000A8 $LN5            dd 1                    ; DATA XREF: _I+28o
.text:000000AC                 dd offset $LN4
.text:000000B0 $LN4            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000000ACo
.text:000000B8                 dd offset $LN3
.text:000000BC $LN3            dd 746572h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000000B8o
.text:000000CC
.text:000000CC ; =============== S U B R O U T I N E =======================================
.text:000000CC
.text:000000CC ; Attributes: bp-based frame
.text:000000CC
.text:000000CC                 public _P
.text:000000CC _P              proc near               ; CODE XREF: _ctrl_columns+1Dp
.text:000000CC                                         ; _ctrl_columns+2Ap ...
.text:000000CC
.text:000000CC var_C           = dword ptr -0Ch
.text:000000CC var_8           = dword ptr -8
.text:000000CC var_4           = dword ptr -4
.text:000000CC arg_0           = dword ptr  8
.text:000000CC
.text:000000CC                 push    ebp
.text:000000CD                 mov     ebp, esp
.text:000000CF                 sub     esp, 0Ch
.text:000000D2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000000D9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000E7                 mov     eax, [ebp+arg_0]
.text:000000EA                 mov     [ebp+var_8], eax
.text:000000ED                 mov     eax, [ebp+var_8]
.text:000000F0                 push    edx
.text:000000F1                 mov     ecx, ebp
.text:000000F3                 push    eax
.text:000000F4                 lea     edx, $LN5_0
.text:000000FA                 call    @_RTC_CheckStackVars@8
.text:000000FF                 pop     eax
.text:00000100                 pop     edx
.text:00000101                 mov     esp, ebp
.text:00000103                 pop     ebp
.text:00000104                 retn
.text:00000104 _P              endp
.text:00000104
.text:00000104 ; ---------------------------------------------------------------------------
.text:00000105                 align 4
.text:00000108 $LN5_0          dd 1                    ; DATA XREF: _P+28o
.text:0000010C                 dd offset $LN4_0
.text:00000110 $LN4_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000010Co
.text:00000118                 dd offset $LN3_0
.text:0000011C $LN3_0          dd 746572h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000118o
.text:0000012C
.text:0000012C ; =============== S U B R O U T I N E =======================================
.text:0000012C
.text:0000012C ; Attributes: bp-based frame
.text:0000012C
.text:0000012C                 public _ctrl_path_elements
.text:0000012C _ctrl_path_elements proc near
.text:0000012C
.text:0000012C var_4           = dword ptr -4
.text:0000012C arg_0           = dword ptr  8
.text:0000012C
.text:0000012C                 push    ebp
.text:0000012D                 mov     ebp, esp
.text:0000012F                 push    ecx
.text:00000130                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000137                 mov     [ebp+var_4], 1
.text:0000013E
.text:0000013E loc_13E:                                ; CODE XREF: _ctrl_path_elements+39j
.text:0000013E                 mov     eax, [ebp+arg_0]
.text:00000141                 movsx   ecx, byte ptr [eax]
.text:00000144                 test    ecx, ecx
.text:00000146                 jz      short loc_167
.text:00000148                 mov     edx, [ebp+arg_0]
.text:0000014B                 movsx   eax, byte ptr [edx]
.text:0000014E                 cmp     eax, 2Fh ; '/'
.text:00000151                 jnz     short loc_15C
.text:00000153                 mov     ecx, [ebp+var_4]
.text:00000156                 add     ecx, 1
.text:00000159                 mov     [ebp+var_4], ecx
.text:0000015C
.text:0000015C loc_15C:                                ; CODE XREF: _ctrl_path_elements+25j
.text:0000015C                 mov     edx, [ebp+arg_0]
.text:0000015F                 add     edx, 1
.text:00000162                 mov     [ebp+arg_0], edx
.text:00000165                 jmp     short loc_13E
.text:00000167 ; ---------------------------------------------------------------------------
.text:00000167
.text:00000167 loc_167:                                ; CODE XREF: _ctrl_path_elements+1Aj
.text:00000167                 mov     eax, [ebp+var_4]
.text:0000016A                 mov     esp, ebp
.text:0000016C                 pop     ebp
.text:0000016D                 retn
.text:0000016D _ctrl_path_elements endp
.text:0000016D
.text:0000016D ; ---------------------------------------------------------------------------
.text:0000016E                 db 0Eh dup(0CCh)
.text:0000017C
.text:0000017C ; =============== S U B R O U T I N E =======================================
.text:0000017C
.text:0000017C ; Attributes: bp-based frame
.text:0000017C
.text:0000017C                 public _ctrl_path_compare
.text:0000017C _ctrl_path_compare proc near            ; CODE XREF: _ctrl_find_set+51p
.text:0000017C
.text:0000017C var_4           = dword ptr -4
.text:0000017C arg_0           = dword ptr  8
.text:0000017C arg_4           = dword ptr  0Ch
.text:0000017C
.text:0000017C                 push    ebp
.text:0000017D                 mov     ebp, esp
.text:0000017F                 push    ecx
.text:00000180                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000187                 mov     [ebp+var_4], 0
.text:0000018E
.text:0000018E loc_18E:                                ; CODE XREF: _ctrl_path_compare+80j
.text:0000018E                 mov     eax, [ebp+arg_0]
.text:00000191                 movsx   ecx, byte ptr [eax]
.text:00000194                 test    ecx, ecx
.text:00000196                 jnz     short loc_1A2
.text:00000198                 mov     edx, [ebp+arg_4]
.text:0000019B                 movsx   eax, byte ptr [edx]
.text:0000019E                 test    eax, eax
.text:000001A0                 jz      short loc_1FE
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: _ctrl_path_compare+1Aj
.text:000001A2                 mov     ecx, [ebp+arg_0]
.text:000001A5                 movsx   edx, byte ptr [ecx]
.text:000001A8                 cmp     edx, 2Fh ; '/'
.text:000001AB                 jz      short loc_1B7
.text:000001AD                 mov     eax, [ebp+arg_0]
.text:000001B0                 movsx   ecx, byte ptr [eax]
.text:000001B3                 test    ecx, ecx
.text:000001B5                 jnz     short loc_1D5
.text:000001B7
.text:000001B7 loc_1B7:                                ; CODE XREF: _ctrl_path_compare+2Fj
.text:000001B7                 mov     edx, [ebp+arg_4]
.text:000001BA                 movsx   eax, byte ptr [edx]
.text:000001BD                 cmp     eax, 2Fh ; '/'
.text:000001C0                 jz      short loc_1CC
.text:000001C2                 mov     ecx, [ebp+arg_4]
.text:000001C5                 movsx   edx, byte ptr [ecx]
.text:000001C8                 test    edx, edx
.text:000001CA                 jnz     short loc_1D5
.text:000001CC
.text:000001CC loc_1CC:                                ; CODE XREF: _ctrl_path_compare+44j
.text:000001CC                 mov     eax, [ebp+var_4]
.text:000001CF                 add     eax, 1
.text:000001D2                 mov     [ebp+var_4], eax
.text:000001D5
.text:000001D5 loc_1D5:                                ; CODE XREF: _ctrl_path_compare+39j
.text:000001D5                                         ; _ctrl_path_compare+4Ej
.text:000001D5                 mov     ecx, [ebp+arg_0]
.text:000001D8                 movsx   edx, byte ptr [ecx]
.text:000001DB                 mov     eax, [ebp+arg_4]
.text:000001DE                 movsx   ecx, byte ptr [eax]
.text:000001E1                 cmp     edx, ecx
.text:000001E3                 jz      short loc_1EA
.text:000001E5                 mov     eax, [ebp+var_4]
.text:000001E8                 jmp     short loc_203
.text:000001EA ; ---------------------------------------------------------------------------
.text:000001EA
.text:000001EA loc_1EA:                                ; CODE XREF: _ctrl_path_compare+67j
.text:000001EA                 mov     edx, [ebp+arg_0]
.text:000001ED                 add     edx, 1
.text:000001F0                 mov     [ebp+arg_0], edx
.text:000001F3                 mov     eax, [ebp+arg_4]
.text:000001F6                 add     eax, 1
.text:000001F9                 mov     [ebp+arg_4], eax
.text:000001FC                 jmp     short loc_18E
.text:000001FE ; ---------------------------------------------------------------------------
.text:000001FE
.text:000001FE loc_1FE:                                ; CODE XREF: _ctrl_path_compare+24j
.text:000001FE                 mov     eax, 7FFFFFFFh
.text:00000203
.text:00000203 loc_203:                                ; CODE XREF: _ctrl_path_compare+6Cj
.text:00000203                 mov     esp, ebp
.text:00000205                 pop     ebp
.text:00000206                 retn
.text:00000206 _ctrl_path_compare endp
.text:00000206
.text:00000206 ; ---------------------------------------------------------------------------
.text:00000207                 db 5 dup(0CCh)
.text:0000020C
.text:0000020C ; =============== S U B R O U T I N E =======================================
.text:0000020C
.text:0000020C ; Attributes: bp-based frame
.text:0000020C
.text:0000020C                 public _ctrl_new_box
.text:0000020C _ctrl_new_box   proc near
.text:0000020C
.text:0000020C var_4           = dword ptr -4
.text:0000020C
.text:0000020C                 push    ebp
.text:0000020D                 mov     ebp, esp
.text:0000020F                 push    ecx
.text:00000210                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000217                 push    1Ch
.text:00000219                 push    1
.text:0000021B                 call    _safemalloc
.text:00000220                 add     esp, 8
.text:00000223                 mov     [ebp+var_4], eax
.text:00000226                 mov     eax, [ebp+var_4]
.text:00000229                 mov     dword ptr [eax+4], 0
.text:00000230                 mov     ecx, [ebp+var_4]
.text:00000233                 mov     dword ptr [ecx], 0
.text:00000239                 mov     edx, [ebp+var_4]
.text:0000023C                 mov     dword ptr [edx+8], 0
.text:00000243                 mov     eax, [ebp+var_4]
.text:00000246                 mov     dword ptr [eax+10h], 0
.text:0000024D                 mov     ecx, [ebp+var_4]
.text:00000250                 mov     dword ptr [ecx+0Ch], 0
.text:00000257                 mov     edx, [ebp+var_4]
.text:0000025A                 mov     dword ptr [edx+14h], 0
.text:00000261                 mov     eax, [ebp+var_4]
.text:00000264                 mov     dword ptr [eax+18h], 0
.text:0000026B                 mov     eax, [ebp+var_4]
.text:0000026E                 add     esp, 4
.text:00000271                 cmp     ebp, esp
.text:00000273                 call    __RTC_CheckEsp
.text:00000278                 mov     esp, ebp
.text:0000027A                 pop     ebp
.text:0000027B                 retn
.text:0000027B _ctrl_new_box   endp
.text:0000027B
.text:0000027C
.text:0000027C ; =============== S U B R O U T I N E =======================================
.text:0000027C
.text:0000027C ; Attributes: bp-based frame
.text:0000027C
.text:0000027C                 public _ctrl_free_box
.text:0000027C _ctrl_free_box  proc near
.text:0000027C
.text:0000027C var_4           = dword ptr -4
.text:0000027C arg_0           = dword ptr  8
.text:0000027C
.text:0000027C                 push    ebp
.text:0000027D                 mov     ebp, esp
.text:0000027F                 push    ecx
.text:00000280                 push    esi
.text:00000281                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000288                 mov     [ebp+var_4], 0
.text:0000028F                 jmp     short loc_29A
.text:00000291 ; ---------------------------------------------------------------------------
.text:00000291
.text:00000291 loc_291:                                ; CODE XREF: _ctrl_free_box+3Dj
.text:00000291                 mov     eax, [ebp+var_4]
.text:00000294                 add     eax, 1
.text:00000297                 mov     [ebp+var_4], eax
.text:0000029A
.text:0000029A loc_29A:                                ; CODE XREF: _ctrl_free_box+13j
.text:0000029A                 mov     ecx, [ebp+arg_0]
.text:0000029D                 mov     edx, [ebp+var_4]
.text:000002A0                 cmp     edx, [ecx]
.text:000002A2                 jge     short loc_2BB
.text:000002A4                 mov     eax, [ebp+arg_0]
.text:000002A7                 mov     ecx, [eax+8]
.text:000002AA                 mov     edx, [ebp+var_4]
.text:000002AD                 mov     eax, [ecx+edx*4]
.text:000002B0                 push    eax
.text:000002B1                 call    _ctrl_free_set
.text:000002B6                 add     esp, 4
.text:000002B9                 jmp     short loc_291
.text:000002BB ; ---------------------------------------------------------------------------
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: _ctrl_free_box+26j
.text:000002BB                 mov     [ebp+var_4], 0
.text:000002C2                 jmp     short loc_2CD
.text:000002C4 ; ---------------------------------------------------------------------------
.text:000002C4
.text:000002C4 loc_2C4:                                ; CODE XREF: _ctrl_free_box+83j
.text:000002C4                 mov     ecx, [ebp+var_4]
.text:000002C7                 add     ecx, 1
.text:000002CA                 mov     [ebp+var_4], ecx
.text:000002CD
.text:000002CD loc_2CD:                                ; CODE XREF: _ctrl_free_box+46j
.text:000002CD                 mov     edx, [ebp+arg_0]
.text:000002D0                 mov     eax, [ebp+var_4]
.text:000002D3                 cmp     eax, [edx+0Ch]
.text:000002D6                 jge     short loc_301
.text:000002D8                 mov     ecx, [ebp+arg_0]
.text:000002DB                 mov     edx, [ecx+14h]
.text:000002DE                 mov     esi, esp
.text:000002E0                 mov     eax, [ebp+var_4]
.text:000002E3                 mov     ecx, [edx+eax*4]
.text:000002E6                 push    ecx
.text:000002E7                 mov     edx, [ebp+arg_0]
.text:000002EA                 mov     eax, [edx+18h]
.text:000002ED                 mov     ecx, [ebp+var_4]
.text:000002F0                 mov     edx, [eax+ecx*4]
.text:000002F3                 call    edx
.text:000002F5                 add     esp, 4
.text:000002F8                 cmp     esi, esp
.text:000002FA                 call    __RTC_CheckEsp
.text:000002FF                 jmp     short loc_2C4
.text:00000301 ; ---------------------------------------------------------------------------
.text:00000301
.text:00000301 loc_301:                                ; CODE XREF: _ctrl_free_box+5Aj
.text:00000301                 mov     eax, [ebp+arg_0]
.text:00000304                 mov     ecx, [eax+8]
.text:00000307                 push    ecx
.text:00000308                 call    _safefree
.text:0000030D                 add     esp, 4
.text:00000310                 mov     edx, [ebp+arg_0]
.text:00000313                 mov     eax, [edx+14h]
.text:00000316                 push    eax
.text:00000317                 call    _safefree
.text:0000031C                 add     esp, 4
.text:0000031F                 mov     ecx, [ebp+arg_0]
.text:00000322                 mov     edx, [ecx+18h]
.text:00000325                 push    edx
.text:00000326                 call    _safefree
.text:0000032B                 add     esp, 4
.text:0000032E                 mov     eax, [ebp+arg_0]
.text:00000331                 push    eax
.text:00000332                 call    _safefree
.text:00000337                 add     esp, 4
.text:0000033A                 pop     esi
.text:0000033B                 add     esp, 4
.text:0000033E                 cmp     ebp, esp
.text:00000340                 call    __RTC_CheckEsp
.text:00000345                 mov     esp, ebp
.text:00000347                 pop     ebp
.text:00000348                 retn
.text:00000348 _ctrl_free_box  endp
.text:00000348
.text:00000348 ; ---------------------------------------------------------------------------
.text:00000349                 align 4
.text:0000034C
.text:0000034C ; =============== S U B R O U T I N E =======================================
.text:0000034C
.text:0000034C ; Attributes: bp-based frame
.text:0000034C
.text:0000034C                 public _ctrl_free_set
.text:0000034C _ctrl_free_set  proc near               ; CODE XREF: _ctrl_free_box+35p
.text:0000034C
.text:0000034C var_4           = dword ptr -4
.text:0000034C arg_0           = dword ptr  8
.text:0000034C
.text:0000034C                 push    ebp
.text:0000034D                 mov     ebp, esp
.text:0000034F                 push    ecx
.text:00000350                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000357                 mov     eax, [ebp+arg_0]
.text:0000035A                 mov     ecx, [eax]
.text:0000035C                 push    ecx
.text:0000035D                 call    _safefree
.text:00000362                 add     esp, 4
.text:00000365                 mov     edx, [ebp+arg_0]
.text:00000368                 mov     eax, [edx+4]
.text:0000036B                 push    eax
.text:0000036C                 call    _safefree
.text:00000371                 add     esp, 4
.text:00000374                 mov     ecx, [ebp+arg_0]
.text:00000377                 mov     edx, [ecx+8]
.text:0000037A                 push    edx
.text:0000037B                 call    _safefree
.text:00000380                 add     esp, 4
.text:00000383                 mov     [ebp+var_4], 0
.text:0000038A                 jmp     short loc_395
.text:0000038C ; ---------------------------------------------------------------------------
.text:0000038C
.text:0000038C loc_38C:                                ; CODE XREF: _ctrl_free_set+69j
.text:0000038C                 mov     eax, [ebp+var_4]
.text:0000038F                 add     eax, 1
.text:00000392                 mov     [ebp+var_4], eax
.text:00000395
.text:00000395 loc_395:                                ; CODE XREF: _ctrl_free_set+3Ej
.text:00000395                 mov     ecx, [ebp+arg_0]
.text:00000398                 mov     edx, [ebp+var_4]
.text:0000039B                 cmp     edx, [ecx+10h]
.text:0000039E                 jge     short loc_3B7
.text:000003A0                 mov     eax, [ebp+arg_0]
.text:000003A3                 mov     ecx, [eax+18h]
.text:000003A6                 mov     edx, [ebp+var_4]
.text:000003A9                 mov     eax, [ecx+edx*4]
.text:000003AC                 push    eax
.text:000003AD                 call    _ctrl_free
.text:000003B2                 add     esp, 4
.text:000003B5                 jmp     short loc_38C
.text:000003B7 ; ---------------------------------------------------------------------------
.text:000003B7
.text:000003B7 loc_3B7:                                ; CODE XREF: _ctrl_free_set+52j
.text:000003B7                 mov     ecx, [ebp+arg_0]
.text:000003BA                 mov     edx, [ecx+18h]
.text:000003BD                 push    edx
.text:000003BE                 call    _safefree
.text:000003C3                 add     esp, 4
.text:000003C6                 mov     eax, [ebp+arg_0]
.text:000003C9                 push    eax
.text:000003CA                 call    _safefree
.text:000003CF                 add     esp, 4
.text:000003D2                 add     esp, 4
.text:000003D5                 cmp     ebp, esp
.text:000003D7                 call    __RTC_CheckEsp
.text:000003DC                 mov     esp, ebp
.text:000003DE                 pop     ebp
.text:000003DF                 retn
.text:000003DF _ctrl_free_set  endp
.text:000003DF
.text:000003DF ; ---------------------------------------------------------------------------
.text:000003E0                 db 0Ch dup(0CCh)
.text:000003EC
.text:000003EC ; =============== S U B R O U T I N E =======================================
.text:000003EC
.text:000003EC ; Attributes: bp-based frame
.text:000003EC
.text:000003EC ; int __cdecl ctrl_find_path(int, char *, int)
.text:000003EC                 public _ctrl_find_path
.text:000003EC _ctrl_find_path proc near
.text:000003EC
.text:000003EC arg_0           = dword ptr  8
.text:000003EC arg_4           = dword ptr  0Ch
.text:000003EC arg_8           = dword ptr  10h
.text:000003EC
.text:000003EC                 push    ebp
.text:000003ED                 mov     ebp, esp
.text:000003EF                 cmp     [ebp+arg_8], 0
.text:000003F3                 jge     short loc_40C
.text:000003F5                 push    1
.text:000003F7                 mov     eax, [ebp+arg_4]
.text:000003FA                 push    eax
.text:000003FB                 mov     ecx, [ebp+arg_0]
.text:000003FE                 push    ecx
.text:000003FF                 call    _ctrl_find_set
.text:00000404                 add     esp, 0Ch
.text:00000407                 mov     [ebp+arg_8], eax
.text:0000040A                 jmp     short loc_415
.text:0000040C ; ---------------------------------------------------------------------------
.text:0000040C
.text:0000040C loc_40C:                                ; CODE XREF: _ctrl_find_path+7j
.text:0000040C                 mov     edx, [ebp+arg_8]
.text:0000040F                 add     edx, 1
.text:00000412                 mov     [ebp+arg_8], edx
.text:00000415
.text:00000415 loc_415:                                ; CODE XREF: _ctrl_find_path+1Ej
.text:00000415                 mov     eax, [ebp+arg_0]
.text:00000418                 mov     ecx, [ebp+arg_8]
.text:0000041B                 cmp     ecx, [eax]
.text:0000041D                 jge     short loc_445
.text:0000041F                 mov     edx, [ebp+arg_0]
.text:00000422                 mov     eax, [edx+8]
.text:00000425                 mov     ecx, [ebp+arg_8]
.text:00000428                 mov     edx, [eax+ecx*4]
.text:0000042B                 mov     eax, [edx]
.text:0000042D                 push    eax             ; char *
.text:0000042E                 mov     ecx, [ebp+arg_4]
.text:00000431                 push    ecx             ; char *
.text:00000432                 call    _strcmp
.text:00000437                 add     esp, 8
.text:0000043A                 test    eax, eax
.text:0000043C                 jnz     short loc_445
.text:0000043E                 mov     eax, [ebp+arg_8]
.text:00000441                 jmp     short loc_448
.text:00000443 ; ---------------------------------------------------------------------------
.text:00000443                 jmp     short loc_448
.text:00000445 ; ---------------------------------------------------------------------------
.text:00000445
.text:00000445 loc_445:                                ; CODE XREF: _ctrl_find_path+31j
.text:00000445                                         ; _ctrl_find_path+50j
.text:00000445                 or      eax, 0FFFFFFFFh
.text:00000448
.text:00000448 loc_448:                                ; CODE XREF: _ctrl_find_path+55j
.text:00000448                                         ; _ctrl_find_path+57j
.text:00000448                 cmp     ebp, esp
.text:0000044A                 call    __RTC_CheckEsp
.text:0000044F                 pop     ebp
.text:00000450                 retn
.text:00000450 _ctrl_find_path endp
.text:00000450
.text:00000450 ; ---------------------------------------------------------------------------
.text:00000451                 db 0Bh dup(0CCh)
.text:0000045C
.text:0000045C ; =============== S U B R O U T I N E =======================================
.text:0000045C
.text:0000045C ; Attributes: bp-based frame
.text:0000045C
.text:0000045C _ctrl_find_set  proc near               ; CODE XREF: _ctrl_find_path+13p
.text:0000045C                                         ; _ctrl_settitle+2Dp ...
.text:0000045C
.text:0000045C var_C           = dword ptr -0Ch
.text:0000045C var_8           = dword ptr -8
.text:0000045C var_4           = dword ptr -4
.text:0000045C arg_0           = dword ptr  8
.text:0000045C arg_4           = dword ptr  0Ch
.text:0000045C arg_8           = dword ptr  10h
.text:0000045C
.text:0000045C                 push    ebp
.text:0000045D                 mov     ebp, esp
.text:0000045F                 sub     esp, 0Ch
.text:00000462                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000469                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000477                 mov     [ebp+var_8], 0
.text:0000047E                 mov     [ebp+var_4], 0
.text:00000485                 jmp     short loc_490
.text:00000487 ; ---------------------------------------------------------------------------
.text:00000487
.text:00000487 loc_487:                                ; CODE XREF: _ctrl_find_set+7Ej
.text:00000487                 mov     eax, [ebp+var_4]
.text:0000048A                 add     eax, 1
.text:0000048D                 mov     [ebp+var_4], eax
.text:00000490
.text:00000490 loc_490:                                ; CODE XREF: _ctrl_find_set+29j
.text:00000490                 mov     ecx, [ebp+arg_0]
.text:00000493                 mov     edx, [ebp+var_4]
.text:00000496                 cmp     edx, [ecx]
.text:00000498                 jge     short loc_4DC
.text:0000049A                 mov     eax, [ebp+arg_0]
.text:0000049D                 mov     ecx, [eax+8]
.text:000004A0                 mov     edx, [ebp+var_4]
.text:000004A3                 mov     eax, [ecx+edx*4]
.text:000004A6                 mov     ecx, [eax]
.text:000004A8                 push    ecx
.text:000004A9                 mov     edx, [ebp+arg_4]
.text:000004AC                 push    edx
.text:000004AD                 call    _ctrl_path_compare
.text:000004B2                 add     esp, 8
.text:000004B5                 mov     [ebp+var_C], eax
.text:000004B8                 cmp     [ebp+arg_8], 0
.text:000004BC                 jz      short loc_4C7
.text:000004BE                 cmp     [ebp+var_C], 7FFFFFFFh
.text:000004C5                 jz      short loc_4CF
.text:000004C7
.text:000004C7 loc_4C7:                                ; CODE XREF: _ctrl_find_set+60j
.text:000004C7                 mov     eax, [ebp+var_C]
.text:000004CA                 cmp     eax, [ebp+var_8]
.text:000004CD                 jge     short loc_4D4
.text:000004CF
.text:000004CF loc_4CF:                                ; CODE XREF: _ctrl_find_set+69j
.text:000004CF                 mov     eax, [ebp+var_4]
.text:000004D2                 jmp     short loc_4E1
.text:000004D4 ; ---------------------------------------------------------------------------
.text:000004D4
.text:000004D4 loc_4D4:                                ; CODE XREF: _ctrl_find_set+71j
.text:000004D4                 mov     ecx, [ebp+var_C]
.text:000004D7                 mov     [ebp+var_8], ecx
.text:000004DA                 jmp     short loc_487
.text:000004DC ; ---------------------------------------------------------------------------
.text:000004DC
.text:000004DC loc_4DC:                                ; CODE XREF: _ctrl_find_set+3Cj
.text:000004DC                 mov     edx, [ebp+arg_0]
.text:000004DF                 mov     eax, [edx]
.text:000004E1
.text:000004E1 loc_4E1:                                ; CODE XREF: _ctrl_find_set+76j
.text:000004E1                 add     esp, 0Ch
.text:000004E4                 cmp     ebp, esp
.text:000004E6                 call    __RTC_CheckEsp
.text:000004EB                 mov     esp, ebp
.text:000004ED                 pop     ebp
.text:000004EE                 retn
.text:000004EE _ctrl_find_set  endp
.text:000004EE
.text:000004EE ; ---------------------------------------------------------------------------
.text:000004EF                 db 0Dh dup(0CCh)
.text:000004FC
.text:000004FC ; =============== S U B R O U T I N E =======================================
.text:000004FC
.text:000004FC ; Attributes: bp-based frame
.text:000004FC
.text:000004FC                 public _ctrl_settitle
.text:000004FC _ctrl_settitle  proc near
.text:000004FC
.text:000004FC var_8           = dword ptr -8
.text:000004FC var_4           = dword ptr -4
.text:000004FC arg_0           = dword ptr  8
.text:000004FC arg_4           = dword ptr  0Ch
.text:000004FC arg_8           = dword ptr  10h
.text:000004FC
.text:000004FC                 push    ebp
.text:000004FD                 mov     ebp, esp
.text:000004FF                 sub     esp, 8
.text:00000502                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000509                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000510                 push    1Ch
.text:00000512                 push    1
.text:00000514                 call    _safemalloc
.text:00000519                 add     esp, 8
.text:0000051C                 mov     [ebp+var_4], eax
.text:0000051F                 push    1
.text:00000521                 mov     eax, [ebp+arg_4]
.text:00000524                 push    eax
.text:00000525                 mov     ecx, [ebp+arg_0]
.text:00000528                 push    ecx
.text:00000529                 call    _ctrl_find_set
.text:0000052E                 add     esp, 0Ch
.text:00000531                 mov     [ebp+var_8], eax
.text:00000534                 mov     edx, [ebp+arg_4]
.text:00000537                 push    edx
.text:00000538                 call    _dupstr
.text:0000053D                 add     esp, 4
.text:00000540                 mov     ecx, [ebp+var_4]
.text:00000543                 mov     [ecx], eax
.text:00000545                 mov     edx, [ebp+var_4]
.text:00000548                 mov     dword ptr [edx+4], 0
.text:0000054F                 mov     eax, [ebp+arg_8]
.text:00000552                 push    eax
.text:00000553                 call    _dupstr
.text:00000558                 add     esp, 4
.text:0000055B                 mov     ecx, [ebp+var_4]
.text:0000055E                 mov     [ecx+8], eax
.text:00000561                 mov     edx, [ebp+var_4]
.text:00000564                 mov     dword ptr [edx+14h], 0
.text:0000056B                 mov     eax, [ebp+var_4]
.text:0000056E                 mov     dword ptr [eax+10h], 0
.text:00000575                 mov     ecx, [ebp+var_4]
.text:00000578                 mov     dword ptr [ecx+0Ch], 0
.text:0000057F                 mov     edx, [ebp+var_4]
.text:00000582                 mov     dword ptr [edx+18h], 0
.text:00000589                 mov     eax, [ebp+arg_0]
.text:0000058C                 mov     ecx, [ebp+arg_0]
.text:0000058F                 mov     edx, [eax]
.text:00000591                 cmp     edx, [ecx+4]
.text:00000594                 jl      short loc_5C2
.text:00000596                 mov     eax, [ebp+arg_0]
.text:00000599                 mov     ecx, [eax]
.text:0000059B                 add     ecx, 20h ; ' '
.text:0000059E                 mov     edx, [ebp+arg_0]
.text:000005A1                 mov     [edx+4], ecx
.text:000005A4                 push    4
.text:000005A6                 mov     eax, [ebp+arg_0]
.text:000005A9                 mov     ecx, [eax+4]
.text:000005AC                 push    ecx
.text:000005AD                 mov     edx, [ebp+arg_0]
.text:000005B0                 mov     eax, [edx+8]
.text:000005B3                 push    eax
.text:000005B4                 call    _saferealloc
.text:000005B9                 add     esp, 0Ch
.text:000005BC                 mov     ecx, [ebp+arg_0]
.text:000005BF                 mov     [ecx+8], eax
.text:000005C2
.text:000005C2 loc_5C2:                                ; CODE XREF: _ctrl_settitle+98j
.text:000005C2                 mov     edx, [ebp+arg_0]
.text:000005C5                 mov     eax, [ebp+var_8]
.text:000005C8                 cmp     eax, [edx]
.text:000005CA                 jge     short loc_5FB
.text:000005CC                 mov     ecx, [ebp+arg_0]
.text:000005CF                 mov     edx, [ecx]
.text:000005D1                 sub     edx, [ebp+var_8]
.text:000005D4                 shl     edx, 2
.text:000005D7                 push    edx             ; size_t
.text:000005D8                 mov     eax, [ebp+arg_0]
.text:000005DB                 mov     ecx, [eax+8]
.text:000005DE                 mov     edx, [ebp+var_8]
.text:000005E1                 lea     eax, [ecx+edx*4]
.text:000005E4                 push    eax             ; void *
.text:000005E5                 mov     ecx, [ebp+arg_0]
.text:000005E8                 mov     edx, [ecx+8]
.text:000005EB                 mov     eax, [ebp+var_8]
.text:000005EE                 lea     ecx, [edx+eax*4+4]
.text:000005F2                 push    ecx             ; void *
.text:000005F3                 call    _memmove
.text:000005F8                 add     esp, 0Ch
.text:000005FB
.text:000005FB loc_5FB:                                ; CODE XREF: _ctrl_settitle+CEj
.text:000005FB                 mov     edx, [ebp+arg_0]
.text:000005FE                 mov     eax, [edx+8]
.text:00000601                 mov     ecx, [ebp+var_8]
.text:00000604                 mov     edx, [ebp+var_4]
.text:00000607                 mov     [eax+ecx*4], edx
.text:0000060A                 mov     eax, [ebp+arg_0]
.text:0000060D                 mov     ecx, [eax]
.text:0000060F                 add     ecx, 1
.text:00000612                 mov     edx, [ebp+arg_0]
.text:00000615                 mov     [edx], ecx
.text:00000617                 mov     eax, [ebp+var_4]
.text:0000061A                 add     esp, 8
.text:0000061D                 cmp     ebp, esp
.text:0000061F                 call    __RTC_CheckEsp
.text:00000624                 mov     esp, ebp
.text:00000626                 pop     ebp
.text:00000627                 retn
.text:00000627 _ctrl_settitle  endp
.text:00000627
.text:00000627 ; ---------------------------------------------------------------------------
.text:00000628                 db 4 dup(0CCh)
.text:0000062C
.text:0000062C ; =============== S U B R O U T I N E =======================================
.text:0000062C
.text:0000062C ; Attributes: bp-based frame
.text:0000062C
.text:0000062C ; int __cdecl ctrl_getset(int, char *, char *, int)
.text:0000062C                 public _ctrl_getset
.text:0000062C _ctrl_getset    proc near
.text:0000062C
.text:0000062C var_C           = dword ptr -0Ch
.text:0000062C var_8           = dword ptr -8
.text:0000062C var_4           = dword ptr -4
.text:0000062C arg_0           = dword ptr  8
.text:0000062C arg_4           = dword ptr  0Ch
.text:0000062C arg_8           = dword ptr  10h
.text:0000062C arg_C           = dword ptr  14h
.text:0000062C
.text:0000062C                 push    ebp
.text:0000062D                 mov     ebp, esp
.text:0000062F                 sub     esp, 0Ch
.text:00000632                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000639                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000647                 push    1
.text:00000649                 mov     eax, [ebp+arg_4]
.text:0000064C                 push    eax
.text:0000064D                 mov     ecx, [ebp+arg_0]
.text:00000650                 push    ecx
.text:00000651                 call    _ctrl_find_set
.text:00000656                 add     esp, 0Ch
.text:00000659                 mov     [ebp+var_8], eax
.text:0000065C
.text:0000065C loc_65C:                                ; CODE XREF: _ctrl_getset+A5j
.text:0000065C                 mov     edx, [ebp+arg_0]
.text:0000065F                 mov     eax, [ebp+var_8]
.text:00000662                 cmp     eax, [edx]
.text:00000664                 jge     short loc_6D3
.text:00000666                 mov     ecx, [ebp+arg_4]
.text:00000669                 push    ecx             ; char *
.text:0000066A                 mov     edx, [ebp+arg_0]
.text:0000066D                 mov     eax, [edx+8]
.text:00000670                 mov     ecx, [ebp+var_8]
.text:00000673                 mov     edx, [eax+ecx*4]
.text:00000676                 mov     eax, [edx]
.text:00000678                 push    eax             ; char *
.text:00000679                 call    _strcmp
.text:0000067E                 add     esp, 8
.text:00000681                 test    eax, eax
.text:00000683                 jnz     short loc_6D3
.text:00000685                 mov     ecx, [ebp+arg_0]
.text:00000688                 mov     edx, [ecx+8]
.text:0000068B                 mov     eax, [ebp+var_8]
.text:0000068E                 mov     ecx, [edx+eax*4]
.text:00000691                 cmp     dword ptr [ecx+4], 0
.text:00000695                 jz      short loc_6C8
.text:00000697                 mov     edx, [ebp+arg_8]
.text:0000069A                 push    edx             ; char *
.text:0000069B                 mov     eax, [ebp+arg_0]
.text:0000069E                 mov     ecx, [eax+8]
.text:000006A1                 mov     edx, [ebp+var_8]
.text:000006A4                 mov     eax, [ecx+edx*4]
.text:000006A7                 mov     ecx, [eax+4]
.text:000006AA                 push    ecx             ; char *
.text:000006AB                 call    _strcmp
.text:000006B0                 add     esp, 8
.text:000006B3                 test    eax, eax
.text:000006B5                 jnz     short loc_6C8
.text:000006B7                 mov     edx, [ebp+arg_0]
.text:000006BA                 mov     eax, [edx+8]
.text:000006BD                 mov     ecx, [ebp+var_8]
.text:000006C0                 mov     eax, [eax+ecx*4]
.text:000006C3                 jmp     loc_7E5
.text:000006C8 ; ---------------------------------------------------------------------------
.text:000006C8
.text:000006C8 loc_6C8:                                ; CODE XREF: _ctrl_getset+69j
.text:000006C8                                         ; _ctrl_getset+89j
.text:000006C8                 mov     edx, [ebp+var_8]
.text:000006CB                 add     edx, 1
.text:000006CE                 mov     [ebp+var_8], edx
.text:000006D1                 jmp     short loc_65C
.text:000006D3 ; ---------------------------------------------------------------------------
.text:000006D3
.text:000006D3 loc_6D3:                                ; CODE XREF: _ctrl_getset+38j
.text:000006D3                                         ; _ctrl_getset+57j
.text:000006D3                 push    1Ch
.text:000006D5                 push    1
.text:000006D7                 call    _safemalloc
.text:000006DC                 add     esp, 8
.text:000006DF                 mov     [ebp+var_4], eax
.text:000006E2                 mov     eax, [ebp+arg_4]
.text:000006E5                 push    eax
.text:000006E6                 call    _dupstr
.text:000006EB                 add     esp, 4
.text:000006EE                 mov     ecx, [ebp+var_4]
.text:000006F1                 mov     [ecx], eax
.text:000006F3                 mov     edx, [ebp+arg_8]
.text:000006F6                 push    edx
.text:000006F7                 call    _dupstr
.text:000006FC                 add     esp, 4
.text:000006FF                 mov     ecx, [ebp+var_4]
.text:00000702                 mov     [ecx+4], eax
.text:00000705                 cmp     [ebp+arg_C], 0
.text:00000709                 jz      short loc_71C
.text:0000070B                 mov     edx, [ebp+arg_C]
.text:0000070E                 push    edx
.text:0000070F                 call    _dupstr
.text:00000714                 add     esp, 4
.text:00000717                 mov     [ebp+var_C], eax
.text:0000071A                 jmp     short loc_723
.text:0000071C ; ---------------------------------------------------------------------------
.text:0000071C
.text:0000071C loc_71C:                                ; CODE XREF: _ctrl_getset+DDj
.text:0000071C                 mov     [ebp+var_C], 0
.text:00000723
.text:00000723 loc_723:                                ; CODE XREF: _ctrl_getset+EEj
.text:00000723                 mov     eax, [ebp+var_4]
.text:00000726                 mov     ecx, [ebp+var_C]
.text:00000729                 mov     [eax+8], ecx
.text:0000072C                 mov     edx, [ebp+var_4]
.text:0000072F                 mov     dword ptr [edx+0Ch], 1
.text:00000736                 mov     eax, [ebp+var_4]
.text:00000739                 mov     dword ptr [eax+14h], 0
.text:00000740                 mov     ecx, [ebp+var_4]
.text:00000743                 mov     dword ptr [ecx+10h], 0
.text:0000074A                 mov     edx, [ebp+var_4]
.text:0000074D                 mov     dword ptr [edx+18h], 0
.text:00000754                 mov     eax, [ebp+arg_0]
.text:00000757                 mov     ecx, [ebp+arg_0]
.text:0000075A                 mov     edx, [eax]
.text:0000075C                 cmp     edx, [ecx+4]
.text:0000075F                 jl      short loc_78D
.text:00000761                 mov     eax, [ebp+arg_0]
.text:00000764                 mov     ecx, [eax]
.text:00000766                 add     ecx, 20h ; ' '
.text:00000769                 mov     edx, [ebp+arg_0]
.text:0000076C                 mov     [edx+4], ecx
.text:0000076F                 push    4
.text:00000771                 mov     eax, [ebp+arg_0]
.text:00000774                 mov     ecx, [eax+4]
.text:00000777                 push    ecx
.text:00000778                 mov     edx, [ebp+arg_0]
.text:0000077B                 mov     eax, [edx+8]
.text:0000077E                 push    eax
.text:0000077F                 call    _saferealloc
.text:00000784                 add     esp, 0Ch
.text:00000787                 mov     ecx, [ebp+arg_0]
.text:0000078A                 mov     [ecx+8], eax
.text:0000078D
.text:0000078D loc_78D:                                ; CODE XREF: _ctrl_getset+133j
.text:0000078D                 mov     edx, [ebp+arg_0]
.text:00000790                 mov     eax, [ebp+var_8]
.text:00000793                 cmp     eax, [edx]
.text:00000795                 jge     short loc_7C6
.text:00000797                 mov     ecx, [ebp+arg_0]
.text:0000079A                 mov     edx, [ecx]
.text:0000079C                 sub     edx, [ebp+var_8]
.text:0000079F                 shl     edx, 2
.text:000007A2                 push    edx             ; size_t
.text:000007A3                 mov     eax, [ebp+arg_0]
.text:000007A6                 mov     ecx, [eax+8]
.text:000007A9                 mov     edx, [ebp+var_8]
.text:000007AC                 lea     eax, [ecx+edx*4]
.text:000007AF                 push    eax             ; void *
.text:000007B0                 mov     ecx, [ebp+arg_0]
.text:000007B3                 mov     edx, [ecx+8]
.text:000007B6                 mov     eax, [ebp+var_8]
.text:000007B9                 lea     ecx, [edx+eax*4+4]
.text:000007BD                 push    ecx             ; void *
.text:000007BE                 call    _memmove
.text:000007C3                 add     esp, 0Ch
.text:000007C6
.text:000007C6 loc_7C6:                                ; CODE XREF: _ctrl_getset+169j
.text:000007C6                 mov     edx, [ebp+arg_0]
.text:000007C9                 mov     eax, [edx+8]
.text:000007CC                 mov     ecx, [ebp+var_8]
.text:000007CF                 mov     edx, [ebp+var_4]
.text:000007D2                 mov     [eax+ecx*4], edx
.text:000007D5                 mov     eax, [ebp+arg_0]
.text:000007D8                 mov     ecx, [eax]
.text:000007DA                 add     ecx, 1
.text:000007DD                 mov     edx, [ebp+arg_0]
.text:000007E0                 mov     [edx], ecx
.text:000007E2                 mov     eax, [ebp+var_4]
.text:000007E5
.text:000007E5 loc_7E5:                                ; CODE XREF: _ctrl_getset+97j
.text:000007E5                 add     esp, 0Ch
.text:000007E8                 cmp     ebp, esp
.text:000007EA                 call    __RTC_CheckEsp
.text:000007EF                 mov     esp, ebp
.text:000007F1                 pop     ebp
.text:000007F2                 retn
.text:000007F2 _ctrl_getset    endp
.text:000007F2
.text:000007F2 ; ---------------------------------------------------------------------------
.text:000007F3                 db 9 dup(0CCh)
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC                 public _ctrl_alloc_with_free
.text:000007FC _ctrl_alloc_with_free proc near         ; CODE XREF: _ctrl_alloc+10p
.text:000007FC
.text:000007FC var_4           = dword ptr -4
.text:000007FC arg_0           = dword ptr  8
.text:000007FC arg_4           = dword ptr  0Ch
.text:000007FC arg_8           = dword ptr  10h
.text:000007FC
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 push    ecx
.text:00000800                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000807                 push    1
.text:00000809                 mov     eax, [ebp+arg_4]
.text:0000080C                 push    eax
.text:0000080D                 call    _safemalloc
.text:00000812                 add     esp, 8
.text:00000815                 mov     [ebp+var_4], eax
.text:00000818                 mov     ecx, [ebp+arg_0]
.text:0000081B                 mov     edx, [ebp+arg_0]
.text:0000081E                 mov     eax, [ecx+0Ch]
.text:00000821                 cmp     eax, [edx+10h]
.text:00000824                 jl      short loc_871
.text:00000826                 mov     ecx, [ebp+arg_0]
.text:00000829                 mov     edx, [ecx+0Ch]
.text:0000082C                 add     edx, 20h ; ' '
.text:0000082F                 mov     eax, [ebp+arg_0]
.text:00000832                 mov     [eax+10h], edx
.text:00000835                 push    4
.text:00000837                 mov     ecx, [ebp+arg_0]
.text:0000083A                 mov     edx, [ecx+10h]
.text:0000083D                 push    edx
.text:0000083E                 mov     eax, [ebp+arg_0]
.text:00000841                 mov     ecx, [eax+14h]
.text:00000844                 push    ecx
.text:00000845                 call    _saferealloc
.text:0000084A                 add     esp, 0Ch
.text:0000084D                 mov     edx, [ebp+arg_0]
.text:00000850                 mov     [edx+14h], eax
.text:00000853                 push    4
.text:00000855                 mov     eax, [ebp+arg_0]
.text:00000858                 mov     ecx, [eax+10h]
.text:0000085B                 push    ecx
.text:0000085C                 mov     edx, [ebp+arg_0]
.text:0000085F                 mov     eax, [edx+18h]
.text:00000862                 push    eax
.text:00000863                 call    _saferealloc
.text:00000868                 add     esp, 0Ch
.text:0000086B                 mov     ecx, [ebp+arg_0]
.text:0000086E                 mov     [ecx+18h], eax
.text:00000871
.text:00000871 loc_871:                                ; CODE XREF: _ctrl_alloc_with_free+28j
.text:00000871                 mov     edx, [ebp+arg_0]
.text:00000874                 mov     eax, [edx+0Ch]
.text:00000877                 mov     ecx, [ebp+arg_0]
.text:0000087A                 mov     edx, [ecx+14h]
.text:0000087D                 mov     ecx, [ebp+var_4]
.text:00000880                 mov     [edx+eax*4], ecx
.text:00000883                 mov     edx, [ebp+arg_0]
.text:00000886                 mov     eax, [edx+0Ch]
.text:00000889                 mov     ecx, [ebp+arg_0]
.text:0000088C                 mov     edx, [ecx+18h]
.text:0000088F                 mov     ecx, [ebp+arg_8]
.text:00000892                 mov     [edx+eax*4], ecx
.text:00000895                 mov     edx, [ebp+arg_0]
.text:00000898                 mov     eax, [edx+0Ch]
.text:0000089B                 add     eax, 1
.text:0000089E                 mov     ecx, [ebp+arg_0]
.text:000008A1                 mov     [ecx+0Ch], eax
.text:000008A4                 mov     eax, [ebp+var_4]
.text:000008A7                 add     esp, 4
.text:000008AA                 cmp     ebp, esp
.text:000008AC                 call    __RTC_CheckEsp
.text:000008B1                 mov     esp, ebp
.text:000008B3                 pop     ebp
.text:000008B4                 retn
.text:000008B4 _ctrl_alloc_with_free endp
.text:000008B4
.text:000008B4 ; ---------------------------------------------------------------------------
.text:000008B5                 db 7 dup(0CCh)
.text:000008BC
.text:000008BC ; =============== S U B R O U T I N E =======================================
.text:000008BC
.text:000008BC ; Attributes: bp-based frame
.text:000008BC
.text:000008BC                 public _ctrl_alloc
.text:000008BC _ctrl_alloc     proc near
.text:000008BC
.text:000008BC arg_0           = dword ptr  8
.text:000008BC arg_4           = dword ptr  0Ch
.text:000008BC
.text:000008BC                 push    ebp
.text:000008BD                 mov     ebp, esp
.text:000008BF                 push    offset _ctrl_default_free
.text:000008C4                 mov     eax, [ebp+arg_4]
.text:000008C7                 push    eax
.text:000008C8                 mov     ecx, [ebp+arg_0]
.text:000008CB                 push    ecx
.text:000008CC                 call    _ctrl_alloc_with_free
.text:000008D1                 add     esp, 0Ch
.text:000008D4                 cmp     ebp, esp
.text:000008D6                 call    __RTC_CheckEsp
.text:000008DB                 pop     ebp
.text:000008DC                 retn
.text:000008DC _ctrl_alloc     endp
.text:000008DC
.text:000008DC ; ---------------------------------------------------------------------------
.text:000008DD                 db 0Fh dup(0CCh)
.text:000008EC
.text:000008EC ; =============== S U B R O U T I N E =======================================
.text:000008EC
.text:000008EC ; Attributes: bp-based frame
.text:000008EC
.text:000008EC _ctrl_default_free proc near            ; DATA XREF: _ctrl_alloc+3o
.text:000008EC
.text:000008EC arg_0           = dword ptr  8
.text:000008EC
.text:000008EC                 push    ebp
.text:000008ED                 mov     ebp, esp
.text:000008EF                 mov     eax, [ebp+arg_0]
.text:000008F2                 push    eax
.text:000008F3                 call    _safefree
.text:000008F8                 add     esp, 4
.text:000008FB                 cmp     ebp, esp
.text:000008FD                 call    __RTC_CheckEsp
.text:00000902                 pop     ebp
.text:00000903                 retn
.text:00000903 _ctrl_default_free endp
.text:00000903
.text:00000903 ; ---------------------------------------------------------------------------
.text:00000904                 db 8 dup(0CCh)
.text:0000090C
.text:0000090C ; =============== S U B R O U T I N E =======================================
.text:0000090C
.text:0000090C ; Attributes: bp-based frame
.text:0000090C
.text:0000090C                 public _ctrl_columns
.text:0000090C _ctrl_columns   proc near
.text:0000090C
.text:0000090C var_C           = dword ptr -0Ch
.text:0000090C var_8           = dword ptr -8
.text:0000090C var_4           = dword ptr -4
.text:0000090C arg_0           = dword ptr  8
.text:0000090C arg_4           = dword ptr  0Ch
.text:0000090C arg_8           = byte ptr  10h
.text:0000090C
.text:0000090C                 push    ebp
.text:0000090D                 mov     ebp, esp
.text:0000090F                 sub     esp, 0Ch
.text:00000912                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000919                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000920                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000927                 push    0
.text:00000929                 call    _P
.text:0000092E                 add     esp, 4
.text:00000931                 push    eax
.text:00000932                 push    0
.text:00000934                 push    0
.text:00000936                 call    _P
.text:0000093B                 add     esp, 4
.text:0000093E                 push    eax
.text:0000093F                 push    6
.text:00000941                 mov     eax, [ebp+arg_0]
.text:00000944                 push    eax
.text:00000945                 call    _ctrl_new
.text:0000094A                 add     esp, 14h
.text:0000094D                 mov     [ebp+var_4], eax
.text:00000950                 mov     ecx, [ebp+arg_0]
.text:00000953                 cmp     dword ptr [ecx+0Ch], 1
.text:00000957                 jz      short loc_976
.text:00000959                 cmp     [ebp+arg_4], 1
.text:0000095D                 jz      short loc_976
.text:0000095F                 push    0F3h ; '='
.text:00000964                 push    offset $SG86314 ; "..\\..\\..\\dialog.c"
.text:00000969                 push    offset $SG86315 ; "s->ncolumns == 1 || ncolumns == 1"
.text:0000096E                 call    __wassert
.text:00000973 ; ---------------------------------------------------------------------------
.text:00000973                 add     esp, 0Ch
.text:00000976
.text:00000976 loc_976:                                ; CODE XREF: _ctrl_columns+4Bj
.text:00000976                                         ; _ctrl_columns+51j
.text:00000976                 mov     eax, [ebp+var_4]
.text:00000979                 mov     ecx, [ebp+arg_4]
.text:0000097C                 mov     [eax+1Ch], ecx
.text:0000097F                 mov     edx, [ebp+arg_0]
.text:00000982                 mov     eax, [ebp+arg_4]
.text:00000985                 mov     [edx+0Ch], eax
.text:00000988                 cmp     [ebp+arg_4], 1
.text:0000098C                 jnz     short loc_99A
.text:0000098E                 mov     ecx, [ebp+var_4]
.text:00000991                 mov     dword ptr [ecx+20h], 0
.text:00000998                 jmp     short loc_9F2
.text:0000099A ; ---------------------------------------------------------------------------
.text:0000099A
.text:0000099A loc_99A:                                ; CODE XREF: _ctrl_columns+80j
.text:0000099A                 push    4
.text:0000099C                 mov     edx, [ebp+arg_4]
.text:0000099F                 push    edx
.text:000009A0                 call    _safemalloc
.text:000009A5                 add     esp, 8
.text:000009A8                 mov     ecx, [ebp+var_4]
.text:000009AB                 mov     [ecx+20h], eax
.text:000009AE                 lea     edx, [ebp+arg_8]
.text:000009B1                 mov     [ebp+var_8], edx
.text:000009B4                 mov     [ebp+var_C], 0
.text:000009BB                 jmp     short loc_9C6
.text:000009BD ; ---------------------------------------------------------------------------
.text:000009BD
.text:000009BD loc_9BD:                                ; CODE XREF: _ctrl_columns+DDj
.text:000009BD                 mov     eax, [ebp+var_C]
.text:000009C0                 add     eax, 1
.text:000009C3                 mov     [ebp+var_C], eax
.text:000009C6
.text:000009C6 loc_9C6:                                ; CODE XREF: _ctrl_columns+AFj
.text:000009C6                 mov     ecx, [ebp+var_C]
.text:000009C9                 cmp     ecx, [ebp+arg_4]
.text:000009CC                 jge     short loc_9EB
.text:000009CE                 mov     edx, [ebp+var_8]
.text:000009D1                 add     edx, 4
.text:000009D4                 mov     [ebp+var_8], edx
.text:000009D7                 mov     eax, [ebp+var_4]
.text:000009DA                 mov     ecx, [eax+20h]
.text:000009DD                 mov     edx, [ebp+var_C]
.text:000009E0                 mov     eax, [ebp+var_8]
.text:000009E3                 mov     eax, [eax-4]
.text:000009E6                 mov     [ecx+edx*4], eax
.text:000009E9                 jmp     short loc_9BD
.text:000009EB ; ---------------------------------------------------------------------------
.text:000009EB
.text:000009EB loc_9EB:                                ; CODE XREF: _ctrl_columns+C0j
.text:000009EB                 mov     [ebp+var_8], 0
.text:000009F2
.text:000009F2 loc_9F2:                                ; CODE XREF: _ctrl_columns+8Cj
.text:000009F2                 mov     eax, [ebp+var_4]
.text:000009F5                 add     esp, 0Ch
.text:000009F8                 cmp     ebp, esp
.text:000009FA                 call    __RTC_CheckEsp
.text:000009FF                 mov     esp, ebp
.text:00000A01                 pop     ebp
.text:00000A02                 retn
.text:00000A02 _ctrl_columns   endp
.text:00000A02
.text:00000A02 ; ---------------------------------------------------------------------------
.text:00000A03                 db 9 dup(0CCh)
.text:00000A0C
.text:00000A0C ; =============== S U B R O U T I N E =======================================
.text:00000A0C
.text:00000A0C ; Attributes: bp-based frame
.text:00000A0C
.text:00000A0C _ctrl_new       proc near               ; CODE XREF: _ctrl_columns+39p
.text:00000A0C                                         ; _ctrl_editbox+26p ...
.text:00000A0C
.text:00000A0C var_4           = dword ptr -4
.text:00000A0C arg_0           = dword ptr  8
.text:00000A0C arg_4           = dword ptr  0Ch
.text:00000A0C arg_8           = dword ptr  10h
.text:00000A0C arg_C           = dword ptr  14h
.text:00000A0C arg_10          = dword ptr  18h
.text:00000A0C
.text:00000A0C                 push    ebp
.text:00000A0D                 mov     ebp, esp
.text:00000A0F                 push    ecx
.text:00000A10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A17                 push    3Ch ; '<'
.text:00000A19                 push    1
.text:00000A1B                 call    _safemalloc
.text:00000A20                 add     esp, 8
.text:00000A23                 mov     [ebp+var_4], eax
.text:00000A26                 mov     eax, [ebp+arg_0]
.text:00000A29                 mov     ecx, [ebp+arg_0]
.text:00000A2C                 mov     edx, [eax+10h]
.text:00000A2F                 cmp     edx, [ecx+14h]
.text:00000A32                 jl      short loc_A61
.text:00000A34                 mov     eax, [ebp+arg_0]
.text:00000A37                 mov     ecx, [eax+10h]
.text:00000A3A                 add     ecx, 20h ; ' '
.text:00000A3D                 mov     edx, [ebp+arg_0]
.text:00000A40                 mov     [edx+14h], ecx
.text:00000A43                 push    4
.text:00000A45                 mov     eax, [ebp+arg_0]
.text:00000A48                 mov     ecx, [eax+14h]
.text:00000A4B                 push    ecx
.text:00000A4C                 mov     edx, [ebp+arg_0]
.text:00000A4F                 mov     eax, [edx+18h]
.text:00000A52                 push    eax
.text:00000A53                 call    _saferealloc
.text:00000A58                 add     esp, 0Ch
.text:00000A5B                 mov     ecx, [ebp+arg_0]
.text:00000A5E                 mov     [ecx+18h], eax
.text:00000A61
.text:00000A61 loc_A61:                                ; CODE XREF: _ctrl_new+26j
.text:00000A61                 mov     edx, [ebp+arg_0]
.text:00000A64                 mov     eax, [edx+10h]
.text:00000A67                 mov     ecx, [ebp+arg_0]
.text:00000A6A                 mov     edx, [ecx+18h]
.text:00000A6D                 mov     ecx, [ebp+var_4]
.text:00000A70                 mov     [edx+eax*4], ecx
.text:00000A73                 mov     edx, [ebp+arg_0]
.text:00000A76                 mov     eax, [edx+10h]
.text:00000A79                 add     eax, 1
.text:00000A7C                 mov     ecx, [ebp+arg_0]
.text:00000A7F                 mov     [ecx+10h], eax
.text:00000A82                 mov     edx, [ebp+var_4]
.text:00000A85                 mov     eax, [ebp+arg_4]
.text:00000A88                 mov     [edx], eax
.text:00000A8A                 mov     ecx, [ebp+var_4]
.text:00000A8D                 mov     dword ptr [ecx+8], 0
.text:00000A94                 mov     edx, [ebp+arg_0]
.text:00000A97                 mov     eax, [edx+0Ch]
.text:00000A9A                 sub     eax, 1
.text:00000A9D                 shl     eax, 10h
.text:00000AA0                 mov     ecx, [ebp+var_4]
.text:00000AA3                 mov     [ecx+0Ch], eax
.text:00000AA6                 mov     edx, [ebp+var_4]
.text:00000AA9                 mov     eax, [ebp+arg_8]
.text:00000AAC                 mov     [edx+18h], eax
.text:00000AAF                 mov     ecx, [ebp+var_4]
.text:00000AB2                 mov     edx, [ebp+arg_C]
.text:00000AB5                 mov     [ecx+10h], edx
.text:00000AB8                 mov     eax, [ebp+var_4]
.text:00000ABB                 mov     ecx, [ebp+arg_10]
.text:00000ABE                 mov     [eax+14h], ecx
.text:00000AC1                 mov     edx, [ebp+var_4]
.text:00000AC4                 mov     dword ptr [edx+4], 0
.text:00000ACB                 mov     eax, [ebp+var_4]
.text:00000ACE                 add     esp, 4
.text:00000AD1                 cmp     ebp, esp
.text:00000AD3                 call    __RTC_CheckEsp
.text:00000AD8                 mov     esp, ebp
.text:00000ADA                 pop     ebp
.text:00000ADB                 retn
.text:00000ADB _ctrl_new       endp
.text:00000ADB
.text:00000ADC
.text:00000ADC ; =============== S U B R O U T I N E =======================================
.text:00000ADC
.text:00000ADC ; Attributes: bp-based frame
.text:00000ADC
.text:00000ADC                 public _ctrl_editbox
.text:00000ADC _ctrl_editbox   proc near
.text:00000ADC
.text:00000ADC var_8           = dword ptr -8
.text:00000ADC var_4           = dword ptr -4
.text:00000ADC arg_0           = dword ptr  8
.text:00000ADC arg_4           = dword ptr  0Ch
.text:00000ADC arg_8           = byte ptr  10h
.text:00000ADC arg_C           = dword ptr  14h
.text:00000ADC arg_10          = dword ptr  18h
.text:00000ADC arg_14          = dword ptr  1Ch
.text:00000ADC arg_18          = dword ptr  20h
.text:00000ADC arg_1C          = dword ptr  24h
.text:00000ADC
.text:00000ADC                 push    ebp
.text:00000ADD                 mov     ebp, esp
.text:00000ADF                 sub     esp, 8
.text:00000AE2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AE9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AF0                 mov     eax, [ebp+arg_18]
.text:00000AF3                 push    eax
.text:00000AF4                 mov     ecx, [ebp+arg_14]
.text:00000AF7                 push    ecx
.text:00000AF8                 mov     edx, [ebp+arg_10]
.text:00000AFB                 push    edx
.text:00000AFC                 push    1
.text:00000AFE                 mov     eax, [ebp+arg_0]
.text:00000B01                 push    eax
.text:00000B02                 call    _ctrl_new
.text:00000B07                 add     esp, 14h
.text:00000B0A                 mov     [ebp+var_4], eax
.text:00000B0D                 cmp     [ebp+arg_4], 0
.text:00000B11                 jz      short loc_B24
.text:00000B13                 mov     ecx, [ebp+arg_4]
.text:00000B16                 push    ecx
.text:00000B17                 call    _dupstr
.text:00000B1C                 add     esp, 4
.text:00000B1F                 mov     [ebp+var_8], eax
.text:00000B22                 jmp     short loc_B2B
.text:00000B24 ; ---------------------------------------------------------------------------
.text:00000B24
.text:00000B24 loc_B24:                                ; CODE XREF: _ctrl_editbox+35j
.text:00000B24                 mov     [ebp+var_8], 0
.text:00000B2B
.text:00000B2B loc_B2B:                                ; CODE XREF: _ctrl_editbox+46j
.text:00000B2B                 mov     edx, [ebp+var_4]
.text:00000B2E                 mov     eax, [ebp+var_8]
.text:00000B31                 mov     [edx+4], eax
.text:00000B34                 mov     ecx, [ebp+var_4]
.text:00000B37                 mov     dl, [ebp+arg_8]
.text:00000B3A                 mov     [ecx+1Ch], dl
.text:00000B3D                 mov     eax, [ebp+var_4]
.text:00000B40                 mov     ecx, [ebp+arg_C]
.text:00000B43                 mov     [eax+20h], ecx
.text:00000B46                 mov     edx, [ebp+var_4]
.text:00000B49                 mov     dword ptr [edx+24h], 0
.text:00000B50                 mov     eax, [ebp+var_4]
.text:00000B53                 mov     dword ptr [eax+28h], 0
.text:00000B5A                 mov     ecx, [ebp+var_4]
.text:00000B5D                 mov     edx, [ebp+arg_1C]
.text:00000B60                 mov     [ecx+2Ch], edx
.text:00000B63                 mov     eax, [ebp+var_4]
.text:00000B66                 add     esp, 8
.text:00000B69                 cmp     ebp, esp
.text:00000B6B                 call    __RTC_CheckEsp
.text:00000B70                 mov     esp, ebp
.text:00000B72                 pop     ebp
.text:00000B73                 retn
.text:00000B73 _ctrl_editbox   endp
.text:00000B73
.text:00000B73 ; ---------------------------------------------------------------------------
.text:00000B74                 db 8 dup(0CCh)
.text:00000B7C
.text:00000B7C ; =============== S U B R O U T I N E =======================================
.text:00000B7C
.text:00000B7C ; Attributes: bp-based frame
.text:00000B7C
.text:00000B7C                 public _ctrl_combobox
.text:00000B7C _ctrl_combobox  proc near
.text:00000B7C
.text:00000B7C var_8           = dword ptr -8
.text:00000B7C var_4           = dword ptr -4
.text:00000B7C arg_0           = dword ptr  8
.text:00000B7C arg_4           = dword ptr  0Ch
.text:00000B7C arg_8           = byte ptr  10h
.text:00000B7C arg_C           = dword ptr  14h
.text:00000B7C arg_10          = dword ptr  18h
.text:00000B7C arg_14          = dword ptr  1Ch
.text:00000B7C arg_18          = dword ptr  20h
.text:00000B7C arg_1C          = dword ptr  24h
.text:00000B7C
.text:00000B7C                 push    ebp
.text:00000B7D                 mov     ebp, esp
.text:00000B7F                 sub     esp, 8
.text:00000B82                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B90                 mov     eax, [ebp+arg_18]
.text:00000B93                 push    eax
.text:00000B94                 mov     ecx, [ebp+arg_14]
.text:00000B97                 push    ecx
.text:00000B98                 mov     edx, [ebp+arg_10]
.text:00000B9B                 push    edx
.text:00000B9C                 push    1
.text:00000B9E                 mov     eax, [ebp+arg_0]
.text:00000BA1                 push    eax
.text:00000BA2                 call    _ctrl_new
.text:00000BA7                 add     esp, 14h
.text:00000BAA                 mov     [ebp+var_4], eax
.text:00000BAD                 cmp     [ebp+arg_4], 0
.text:00000BB1                 jz      short loc_BC4
.text:00000BB3                 mov     ecx, [ebp+arg_4]
.text:00000BB6                 push    ecx
.text:00000BB7                 call    _dupstr
.text:00000BBC                 add     esp, 4
.text:00000BBF                 mov     [ebp+var_8], eax
.text:00000BC2                 jmp     short loc_BCB
.text:00000BC4 ; ---------------------------------------------------------------------------
.text:00000BC4
.text:00000BC4 loc_BC4:                                ; CODE XREF: _ctrl_combobox+35j
.text:00000BC4                 mov     [ebp+var_8], 0
.text:00000BCB
.text:00000BCB loc_BCB:                                ; CODE XREF: _ctrl_combobox+46j
.text:00000BCB                 mov     edx, [ebp+var_4]
.text:00000BCE                 mov     eax, [ebp+var_8]
.text:00000BD1                 mov     [edx+4], eax
.text:00000BD4                 mov     ecx, [ebp+var_4]
.text:00000BD7                 mov     dl, [ebp+arg_8]
.text:00000BDA                 mov     [ecx+1Ch], dl
.text:00000BDD                 mov     eax, [ebp+var_4]
.text:00000BE0                 mov     ecx, [ebp+arg_C]
.text:00000BE3                 mov     [eax+20h], ecx
.text:00000BE6                 mov     edx, [ebp+var_4]
.text:00000BE9                 mov     dword ptr [edx+24h], 0
.text:00000BF0                 mov     eax, [ebp+var_4]
.text:00000BF3                 mov     dword ptr [eax+28h], 1
.text:00000BFA                 mov     ecx, [ebp+var_4]
.text:00000BFD                 mov     edx, [ebp+arg_1C]
.text:00000C00                 mov     [ecx+2Ch], edx
.text:00000C03                 mov     eax, [ebp+var_4]
.text:00000C06                 add     esp, 8
.text:00000C09                 cmp     ebp, esp
.text:00000C0B                 call    __RTC_CheckEsp
.text:00000C10                 mov     esp, ebp
.text:00000C12                 pop     ebp
.text:00000C13                 retn
.text:00000C13 _ctrl_combobox  endp
.text:00000C13
.text:00000C13 ; ---------------------------------------------------------------------------
.text:00000C14                 db 8 dup(0CCh)
.text:00000C1C
.text:00000C1C ; =============== S U B R O U T I N E =======================================
.text:00000C1C
.text:00000C1C ; Attributes: bp-based frame
.text:00000C1C
.text:00000C1C                 public _ctrl_radiobuttons
.text:00000C1C _ctrl_radiobuttons proc near
.text:00000C1C
.text:00000C1C var_10          = dword ptr -10h
.text:00000C1C var_C           = dword ptr -0Ch
.text:00000C1C var_8           = dword ptr -8
.text:00000C1C var_4           = dword ptr -4
.text:00000C1C arg_0           = dword ptr  8
.text:00000C1C arg_4           = dword ptr  0Ch
.text:00000C1C arg_8           = byte ptr  10h
.text:00000C1C arg_C           = dword ptr  14h
.text:00000C1C arg_10          = dword ptr  18h
.text:00000C1C arg_14          = dword ptr  1Ch
.text:00000C1C arg_18          = dword ptr  20h
.text:00000C1C arg_1C          = byte ptr  24h
.text:00000C1C
.text:00000C1C                 push    ebp
.text:00000C1D                 mov     ebp, esp
.text:00000C1F                 sub     esp, 10h
.text:00000C22                 mov     eax, 0CCCCCCCCh
.text:00000C27                 mov     [ebp+var_10], eax
.text:00000C2A                 mov     [ebp+var_C], eax
.text:00000C2D                 mov     [ebp+var_8], eax
.text:00000C30                 mov     [ebp+var_4], eax
.text:00000C33                 mov     eax, [ebp+arg_18]
.text:00000C36                 push    eax
.text:00000C37                 mov     ecx, [ebp+arg_14]
.text:00000C3A                 push    ecx
.text:00000C3B                 mov     edx, [ebp+arg_10]
.text:00000C3E                 push    edx
.text:00000C3F                 push    2
.text:00000C41                 mov     eax, [ebp+arg_0]
.text:00000C44                 push    eax
.text:00000C45                 call    _ctrl_new
.text:00000C4A                 add     esp, 14h
.text:00000C4D                 mov     [ebp+var_C], eax
.text:00000C50                 cmp     [ebp+arg_4], 0
.text:00000C54                 jz      short loc_C67
.text:00000C56                 mov     ecx, [ebp+arg_4]
.text:00000C59                 push    ecx
.text:00000C5A                 call    _dupstr
.text:00000C5F                 add     esp, 4
.text:00000C62                 mov     [ebp+var_10], eax
.text:00000C65                 jmp     short loc_C6E
.text:00000C67 ; ---------------------------------------------------------------------------
.text:00000C67
.text:00000C67 loc_C67:                                ; CODE XREF: _ctrl_radiobuttons+38j
.text:00000C67                 mov     [ebp+var_10], 0
.text:00000C6E
.text:00000C6E loc_C6E:                                ; CODE XREF: _ctrl_radiobuttons+49j
.text:00000C6E                 mov     edx, [ebp+var_C]
.text:00000C71                 mov     eax, [ebp+var_10]
.text:00000C74                 mov     [edx+4], eax
.text:00000C77                 mov     ecx, [ebp+var_C]
.text:00000C7A                 mov     dl, [ebp+arg_8]
.text:00000C7D                 mov     [ecx+1Ch], dl
.text:00000C80                 mov     eax, [ebp+var_C]
.text:00000C83                 mov     ecx, [ebp+arg_C]
.text:00000C86                 mov     [eax+20h], ecx
.text:00000C89                 lea     edx, [ebp+arg_1C]
.text:00000C8C                 mov     [ebp+var_4], edx
.text:00000C8F                 mov     [ebp+var_8], 0
.text:00000C96
.text:00000C96 loc_C96:                                ; CODE XREF: _ctrl_radiobuttons+B2j
.text:00000C96                 mov     eax, [ebp+var_4]
.text:00000C99                 add     eax, 4
.text:00000C9C                 mov     [ebp+var_4], eax
.text:00000C9F                 mov     ecx, [ebp+var_4]
.text:00000CA2                 cmp     dword ptr [ecx-4], 0
.text:00000CA6                 jz      short loc_CD0
.text:00000CA8                 mov     edx, [ebp+var_8]
.text:00000CAB                 add     edx, 1
.text:00000CAE                 mov     [ebp+var_8], edx
.text:00000CB1                 mov     eax, [ebp+var_C]
.text:00000CB4                 movsx   ecx, byte ptr [eax+1Ch]
.text:00000CB8                 test    ecx, ecx
.text:00000CBA                 jnz     short loc_CC5
.text:00000CBC                 mov     edx, [ebp+var_4]
.text:00000CBF                 add     edx, 4
.text:00000CC2                 mov     [ebp+var_4], edx
.text:00000CC5
.text:00000CC5 loc_CC5:                                ; CODE XREF: _ctrl_radiobuttons+9Ej
.text:00000CC5                 mov     eax, [ebp+var_4]
.text:00000CC8                 add     eax, 4
.text:00000CCB                 mov     [ebp+var_4], eax
.text:00000CCE                 jmp     short loc_C96
.text:00000CD0 ; ---------------------------------------------------------------------------
.text:00000CD0
.text:00000CD0 loc_CD0:                                ; CODE XREF: _ctrl_radiobuttons+8Aj
.text:00000CD0                 mov     [ebp+var_4], 0
.text:00000CD7                 mov     ecx, [ebp+var_C]
.text:00000CDA                 mov     edx, [ebp+var_8]
.text:00000CDD                 mov     [ecx+24h], edx
.text:00000CE0                 mov     eax, [ebp+var_C]
.text:00000CE3                 movsx   ecx, byte ptr [eax+1Ch]
.text:00000CE7                 test    ecx, ecx
.text:00000CE9                 jnz     short loc_D04
.text:00000CEB                 push    1
.text:00000CED                 mov     edx, [ebp+var_C]
.text:00000CF0                 mov     eax, [edx+24h]
.text:00000CF3                 push    eax
.text:00000CF4                 call    _safemalloc
.text:00000CF9                 add     esp, 8
.text:00000CFC                 mov     ecx, [ebp+var_C]
.text:00000CFF                 mov     [ecx+2Ch], eax
.text:00000D02                 jmp     short loc_D0E
.text:00000D04 ; ---------------------------------------------------------------------------
.text:00000D04
.text:00000D04 loc_D04:                                ; CODE XREF: _ctrl_radiobuttons+CDj
.text:00000D04                 mov     edx, [ebp+var_C]
.text:00000D07                 mov     dword ptr [edx+2Ch], 0
.text:00000D0E
.text:00000D0E loc_D0E:                                ; CODE XREF: _ctrl_radiobuttons+E6j
.text:00000D0E                 push    4
.text:00000D10                 mov     eax, [ebp+var_C]
.text:00000D13                 mov     ecx, [eax+24h]
.text:00000D16                 push    ecx
.text:00000D17                 call    _safemalloc
.text:00000D1C                 add     esp, 8
.text:00000D1F                 mov     edx, [ebp+var_C]
.text:00000D22                 mov     [edx+28h], eax
.text:00000D25                 push    4
.text:00000D27                 mov     eax, [ebp+var_C]
.text:00000D2A                 mov     ecx, [eax+24h]
.text:00000D2D                 push    ecx
.text:00000D2E                 call    _safemalloc
.text:00000D33                 add     esp, 8
.text:00000D36                 mov     edx, [ebp+var_C]
.text:00000D39                 mov     [edx+30h], eax
.text:00000D3C                 lea     eax, [ebp+arg_1C]
.text:00000D3F                 mov     [ebp+var_4], eax
.text:00000D42                 mov     [ebp+var_8], 0
.text:00000D49                 jmp     short loc_D54
.text:00000D4B ; ---------------------------------------------------------------------------
.text:00000D4B
.text:00000D4B loc_D4B:                                ; CODE XREF: _ctrl_radiobuttons+1A8j
.text:00000D4B                 mov     ecx, [ebp+var_8]
.text:00000D4E                 add     ecx, 1
.text:00000D51                 mov     [ebp+var_8], ecx
.text:00000D54
.text:00000D54 loc_D54:                                ; CODE XREF: _ctrl_radiobuttons+12Dj
.text:00000D54                 mov     edx, [ebp+var_C]
.text:00000D57                 mov     eax, [ebp+var_8]
.text:00000D5A                 cmp     eax, [edx+24h]
.text:00000D5D                 jge     short loc_DC6
.text:00000D5F                 mov     ecx, [ebp+var_4]
.text:00000D62                 add     ecx, 4
.text:00000D65                 mov     [ebp+var_4], ecx
.text:00000D68                 mov     edx, [ebp+var_4]
.text:00000D6B                 mov     eax, [edx-4]
.text:00000D6E                 push    eax
.text:00000D6F                 call    _dupstr
.text:00000D74                 add     esp, 4
.text:00000D77                 mov     ecx, [ebp+var_C]
.text:00000D7A                 mov     edx, [ecx+28h]
.text:00000D7D                 mov     ecx, [ebp+var_8]
.text:00000D80                 mov     [edx+ecx*4], eax
.text:00000D83                 mov     edx, [ebp+var_C]
.text:00000D86                 movsx   eax, byte ptr [edx+1Ch]
.text:00000D8A                 test    eax, eax
.text:00000D8C                 jnz     short loc_DA9
.text:00000D8E                 mov     ecx, [ebp+var_4]
.text:00000D91                 add     ecx, 4
.text:00000D94                 mov     [ebp+var_4], ecx
.text:00000D97                 mov     edx, [ebp+var_C]
.text:00000D9A                 mov     eax, [edx+2Ch]
.text:00000D9D                 mov     ecx, [ebp+var_8]
.text:00000DA0                 mov     edx, [ebp+var_4]
.text:00000DA3                 mov     dl, [edx-4]
.text:00000DA6                 mov     [eax+ecx], dl
.text:00000DA9
.text:00000DA9 loc_DA9:                                ; CODE XREF: _ctrl_radiobuttons+170j
.text:00000DA9                 mov     eax, [ebp+var_4]
.text:00000DAC                 add     eax, 4
.text:00000DAF                 mov     [ebp+var_4], eax
.text:00000DB2                 mov     ecx, [ebp+var_4]
.text:00000DB5                 mov     edx, [ecx-4]
.text:00000DB8                 mov     eax, [ebp+var_C]
.text:00000DBB                 mov     ecx, [eax+30h]
.text:00000DBE                 mov     eax, [ebp+var_8]
.text:00000DC1                 mov     [ecx+eax*4], edx
.text:00000DC4                 jmp     short loc_D4B
.text:00000DC6 ; ---------------------------------------------------------------------------
.text:00000DC6
.text:00000DC6 loc_DC6:                                ; CODE XREF: _ctrl_radiobuttons+141j
.text:00000DC6                 mov     [ebp+var_4], 0
.text:00000DCD                 mov     eax, [ebp+var_C]
.text:00000DD0                 add     esp, 10h
.text:00000DD3                 cmp     ebp, esp
.text:00000DD5                 call    __RTC_CheckEsp
.text:00000DDA                 mov     esp, ebp
.text:00000DDC                 pop     ebp
.text:00000DDD                 retn
.text:00000DDD _ctrl_radiobuttons endp
.text:00000DDD
.text:00000DDD ; ---------------------------------------------------------------------------
.text:00000DDE                 db 0Eh dup(0CCh)
.text:00000DEC
.text:00000DEC ; =============== S U B R O U T I N E =======================================
.text:00000DEC
.text:00000DEC ; Attributes: bp-based frame
.text:00000DEC
.text:00000DEC                 public _ctrl_pushbutton
.text:00000DEC _ctrl_pushbutton proc near
.text:00000DEC
.text:00000DEC var_8           = dword ptr -8
.text:00000DEC var_4           = dword ptr -4
.text:00000DEC arg_0           = dword ptr  8
.text:00000DEC arg_4           = dword ptr  0Ch
.text:00000DEC arg_8           = byte ptr  10h
.text:00000DEC arg_C           = dword ptr  14h
.text:00000DEC arg_10          = dword ptr  18h
.text:00000DEC arg_14          = dword ptr  1Ch
.text:00000DEC
.text:00000DEC                 push    ebp
.text:00000DED                 mov     ebp, esp
.text:00000DEF                 sub     esp, 8
.text:00000DF2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E00                 mov     eax, [ebp+arg_14]
.text:00000E03                 push    eax
.text:00000E04                 mov     ecx, [ebp+arg_10]
.text:00000E07                 push    ecx
.text:00000E08                 mov     edx, [ebp+arg_C]
.text:00000E0B                 push    edx
.text:00000E0C                 push    4
.text:00000E0E                 mov     eax, [ebp+arg_0]
.text:00000E11                 push    eax
.text:00000E12                 call    _ctrl_new
.text:00000E17                 add     esp, 14h
.text:00000E1A                 mov     [ebp+var_4], eax
.text:00000E1D                 cmp     [ebp+arg_4], 0
.text:00000E21                 jz      short loc_E34
.text:00000E23                 mov     ecx, [ebp+arg_4]
.text:00000E26                 push    ecx
.text:00000E27                 call    _dupstr
.text:00000E2C                 add     esp, 4
.text:00000E2F                 mov     [ebp+var_8], eax
.text:00000E32                 jmp     short loc_E3B
.text:00000E34 ; ---------------------------------------------------------------------------
.text:00000E34
.text:00000E34 loc_E34:                                ; CODE XREF: _ctrl_pushbutton+35j
.text:00000E34                 mov     [ebp+var_8], 0
.text:00000E3B
.text:00000E3B loc_E3B:                                ; CODE XREF: _ctrl_pushbutton+46j
.text:00000E3B                 mov     edx, [ebp+var_4]
.text:00000E3E                 mov     eax, [ebp+var_8]
.text:00000E41                 mov     [edx+4], eax
.text:00000E44                 mov     ecx, [ebp+var_4]
.text:00000E47                 mov     dl, [ebp+arg_8]
.text:00000E4A                 mov     [ecx+1Ch], dl
.text:00000E4D                 mov     eax, [ebp+var_4]
.text:00000E50                 mov     dword ptr [eax+20h], 0
.text:00000E57                 mov     ecx, [ebp+var_4]
.text:00000E5A                 mov     dword ptr [ecx+24h], 0
.text:00000E61                 mov     eax, [ebp+var_4]
.text:00000E64                 add     esp, 8
.text:00000E67                 cmp     ebp, esp
.text:00000E69                 call    __RTC_CheckEsp
.text:00000E6E                 mov     esp, ebp
.text:00000E70                 pop     ebp
.text:00000E71                 retn
.text:00000E71 _ctrl_pushbutton endp
.text:00000E71
.text:00000E71 ; ---------------------------------------------------------------------------
.text:00000E72                 db 0Ah dup(0CCh)
.text:00000E7C
.text:00000E7C ; =============== S U B R O U T I N E =======================================
.text:00000E7C
.text:00000E7C ; Attributes: bp-based frame
.text:00000E7C
.text:00000E7C                 public _ctrl_listbox
.text:00000E7C _ctrl_listbox   proc near
.text:00000E7C
.text:00000E7C var_8           = dword ptr -8
.text:00000E7C var_4           = dword ptr -4
.text:00000E7C arg_0           = dword ptr  8
.text:00000E7C arg_4           = dword ptr  0Ch
.text:00000E7C arg_8           = byte ptr  10h
.text:00000E7C arg_C           = dword ptr  14h
.text:00000E7C arg_10          = dword ptr  18h
.text:00000E7C arg_14          = dword ptr  1Ch
.text:00000E7C
.text:00000E7C                 push    ebp
.text:00000E7D                 mov     ebp, esp
.text:00000E7F                 sub     esp, 8
.text:00000E82                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E90                 mov     eax, [ebp+arg_14]
.text:00000E93                 push    eax
.text:00000E94                 mov     ecx, [ebp+arg_10]
.text:00000E97                 push    ecx
.text:00000E98                 mov     edx, [ebp+arg_C]
.text:00000E9B                 push    edx
.text:00000E9C                 push    5
.text:00000E9E                 mov     eax, [ebp+arg_0]
.text:00000EA1                 push    eax
.text:00000EA2                 call    _ctrl_new
.text:00000EA7                 add     esp, 14h
.text:00000EAA                 mov     [ebp+var_4], eax
.text:00000EAD                 cmp     [ebp+arg_4], 0
.text:00000EB1                 jz      short loc_EC4
.text:00000EB3                 mov     ecx, [ebp+arg_4]
.text:00000EB6                 push    ecx
.text:00000EB7                 call    _dupstr
.text:00000EBC                 add     esp, 4
.text:00000EBF                 mov     [ebp+var_8], eax
.text:00000EC2                 jmp     short loc_ECB
.text:00000EC4 ; ---------------------------------------------------------------------------
.text:00000EC4
.text:00000EC4 loc_EC4:                                ; CODE XREF: _ctrl_listbox+35j
.text:00000EC4                 mov     [ebp+var_8], 0
.text:00000ECB
.text:00000ECB loc_ECB:                                ; CODE XREF: _ctrl_listbox+46j
.text:00000ECB                 mov     edx, [ebp+var_4]
.text:00000ECE                 mov     eax, [ebp+var_8]
.text:00000ED1                 mov     [edx+4], eax
.text:00000ED4                 mov     ecx, [ebp+var_4]
.text:00000ED7                 mov     dl, [ebp+arg_8]
.text:00000EDA                 mov     [ecx+1Ch], dl
.text:00000EDD                 mov     eax, [ebp+var_4]
.text:00000EE0                 mov     dword ptr [eax+20h], 5
.text:00000EE7                 mov     ecx, [ebp+var_4]
.text:00000EEA                 mov     dword ptr [ecx+24h], 0
.text:00000EF1                 mov     edx, [ebp+var_4]
.text:00000EF4                 mov     dword ptr [edx+28h], 0
.text:00000EFB                 mov     eax, [ebp+var_4]
.text:00000EFE                 mov     dword ptr [eax+2Ch], 64h ; 'd'
.text:00000F05                 mov     ecx, [ebp+var_4]
.text:00000F08                 mov     dword ptr [ecx+30h], 0
.text:00000F0F                 mov     edx, [ebp+var_4]
.text:00000F12                 mov     dword ptr [edx+34h], 0
.text:00000F19                 mov     eax, [ebp+var_4]
.text:00000F1C                 mov     dword ptr [eax+38h], 1
.text:00000F23                 mov     eax, [ebp+var_4]
.text:00000F26                 add     esp, 8
.text:00000F29                 cmp     ebp, esp
.text:00000F2B                 call    __RTC_CheckEsp
.text:00000F30                 mov     esp, ebp
.text:00000F32                 pop     ebp
.text:00000F33                 retn
.text:00000F33 _ctrl_listbox   endp
.text:00000F33
.text:00000F33 ; ---------------------------------------------------------------------------
.text:00000F34                 db 8 dup(0CCh)
.text:00000F3C
.text:00000F3C ; =============== S U B R O U T I N E =======================================
.text:00000F3C
.text:00000F3C ; Attributes: bp-based frame
.text:00000F3C
.text:00000F3C                 public _ctrl_droplist
.text:00000F3C _ctrl_droplist  proc near
.text:00000F3C
.text:00000F3C var_8           = dword ptr -8
.text:00000F3C var_4           = dword ptr -4
.text:00000F3C arg_0           = dword ptr  8
.text:00000F3C arg_4           = dword ptr  0Ch
.text:00000F3C arg_8           = byte ptr  10h
.text:00000F3C arg_C           = dword ptr  14h
.text:00000F3C arg_10          = dword ptr  18h
.text:00000F3C arg_14          = dword ptr  1Ch
.text:00000F3C arg_18          = dword ptr  20h
.text:00000F3C
.text:00000F3C                 push    ebp
.text:00000F3D                 mov     ebp, esp
.text:00000F3F                 sub     esp, 8
.text:00000F42                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F49                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F50                 mov     eax, [ebp+arg_18]
.text:00000F53                 push    eax
.text:00000F54                 mov     ecx, [ebp+arg_14]
.text:00000F57                 push    ecx
.text:00000F58                 mov     edx, [ebp+arg_10]
.text:00000F5B                 push    edx
.text:00000F5C                 push    5
.text:00000F5E                 mov     eax, [ebp+arg_0]
.text:00000F61                 push    eax
.text:00000F62                 call    _ctrl_new
.text:00000F67                 add     esp, 14h
.text:00000F6A                 mov     [ebp+var_4], eax
.text:00000F6D                 cmp     [ebp+arg_4], 0
.text:00000F71                 jz      short loc_F84
.text:00000F73                 mov     ecx, [ebp+arg_4]
.text:00000F76                 push    ecx
.text:00000F77                 call    _dupstr
.text:00000F7C                 add     esp, 4
.text:00000F7F                 mov     [ebp+var_8], eax
.text:00000F82                 jmp     short loc_F8B
.text:00000F84 ; ---------------------------------------------------------------------------
.text:00000F84
.text:00000F84 loc_F84:                                ; CODE XREF: _ctrl_droplist+35j
.text:00000F84                 mov     [ebp+var_8], 0
.text:00000F8B
.text:00000F8B loc_F8B:                                ; CODE XREF: _ctrl_droplist+46j
.text:00000F8B                 mov     edx, [ebp+var_4]
.text:00000F8E                 mov     eax, [ebp+var_8]
.text:00000F91                 mov     [edx+4], eax
.text:00000F94                 mov     ecx, [ebp+var_4]
.text:00000F97                 mov     dl, [ebp+arg_8]
.text:00000F9A                 mov     [ecx+1Ch], dl
.text:00000F9D                 mov     eax, [ebp+var_4]
.text:00000FA0                 mov     dword ptr [eax+20h], 0
.text:00000FA7                 mov     ecx, [ebp+var_4]
.text:00000FAA                 mov     dword ptr [ecx+24h], 0
.text:00000FB1                 mov     edx, [ebp+var_4]
.text:00000FB4                 mov     dword ptr [edx+28h], 0
.text:00000FBB                 mov     eax, [ebp+var_4]
.text:00000FBE                 mov     ecx, [ebp+arg_C]
.text:00000FC1                 mov     [eax+2Ch], ecx
.text:00000FC4                 mov     edx, [ebp+var_4]
.text:00000FC7                 mov     dword ptr [edx+30h], 0
.text:00000FCE                 mov     eax, [ebp+var_4]
.text:00000FD1                 mov     dword ptr [eax+34h], 0
.text:00000FD8                 mov     ecx, [ebp+var_4]
.text:00000FDB                 mov     dword ptr [ecx+38h], 0
.text:00000FE2                 mov     eax, [ebp+var_4]
.text:00000FE5                 add     esp, 8
.text:00000FE8                 cmp     ebp, esp
.text:00000FEA                 call    __RTC_CheckEsp
.text:00000FEF                 mov     esp, ebp
.text:00000FF1                 pop     ebp
.text:00000FF2                 retn
.text:00000FF2 _ctrl_droplist  endp
.text:00000FF2
.text:00000FF2 ; ---------------------------------------------------------------------------
.text:00000FF3                 db 9 dup(0CCh)
.text:00000FFC
.text:00000FFC ; =============== S U B R O U T I N E =======================================
.text:00000FFC
.text:00000FFC ; Attributes: bp-based frame
.text:00000FFC
.text:00000FFC                 public _ctrl_draglist
.text:00000FFC _ctrl_draglist  proc near
.text:00000FFC
.text:00000FFC var_8           = dword ptr -8
.text:00000FFC var_4           = dword ptr -4
.text:00000FFC arg_0           = dword ptr  8
.text:00000FFC arg_4           = dword ptr  0Ch
.text:00000FFC arg_8           = byte ptr  10h
.text:00000FFC arg_C           = dword ptr  14h
.text:00000FFC arg_10          = dword ptr  18h
.text:00000FFC arg_14          = dword ptr  1Ch
.text:00000FFC
.text:00000FFC                 push    ebp
.text:00000FFD                 mov     ebp, esp
.text:00000FFF                 sub     esp, 8
.text:00001002                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001009                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001010                 mov     eax, [ebp+arg_14]
.text:00001013                 push    eax
.text:00001014                 mov     ecx, [ebp+arg_10]
.text:00001017                 push    ecx
.text:00001018                 mov     edx, [ebp+arg_C]
.text:0000101B                 push    edx
.text:0000101C                 push    5
.text:0000101E                 mov     eax, [ebp+arg_0]
.text:00001021                 push    eax
.text:00001022                 call    _ctrl_new
.text:00001027                 add     esp, 14h
.text:0000102A                 mov     [ebp+var_4], eax
.text:0000102D                 cmp     [ebp+arg_4], 0
.text:00001031                 jz      short loc_1044
.text:00001033                 mov     ecx, [ebp+arg_4]
.text:00001036                 push    ecx
.text:00001037                 call    _dupstr
.text:0000103C                 add     esp, 4
.text:0000103F                 mov     [ebp+var_8], eax
.text:00001042                 jmp     short loc_104B
.text:00001044 ; ---------------------------------------------------------------------------
.text:00001044
.text:00001044 loc_1044:                               ; CODE XREF: _ctrl_draglist+35j
.text:00001044                 mov     [ebp+var_8], 0
.text:0000104B
.text:0000104B loc_104B:                               ; CODE XREF: _ctrl_draglist+46j
.text:0000104B                 mov     edx, [ebp+var_4]
.text:0000104E                 mov     eax, [ebp+var_8]
.text:00001051                 mov     [edx+4], eax
.text:00001054                 mov     ecx, [ebp+var_4]
.text:00001057                 mov     dl, [ebp+arg_8]
.text:0000105A                 mov     [ecx+1Ch], dl
.text:0000105D                 mov     eax, [ebp+var_4]
.text:00001060                 mov     dword ptr [eax+20h], 5
.text:00001067                 mov     ecx, [ebp+var_4]
.text:0000106A                 mov     dword ptr [ecx+24h], 1
.text:00001071                 mov     edx, [ebp+var_4]
.text:00001074                 mov     dword ptr [edx+28h], 0
.text:0000107B                 mov     eax, [ebp+var_4]
.text:0000107E                 mov     dword ptr [eax+2Ch], 64h ; 'd'
.text:00001085                 mov     ecx, [ebp+var_4]
.text:00001088                 mov     dword ptr [ecx+30h], 0
.text:0000108F                 mov     edx, [ebp+var_4]
.text:00001092                 mov     dword ptr [edx+34h], 0
.text:00001099                 mov     eax, [ebp+var_4]
.text:0000109C                 mov     dword ptr [eax+38h], 0
.text:000010A3                 mov     eax, [ebp+var_4]
.text:000010A6                 add     esp, 8
.text:000010A9                 cmp     ebp, esp
.text:000010AB                 call    __RTC_CheckEsp
.text:000010B0                 mov     esp, ebp
.text:000010B2                 pop     ebp
.text:000010B3                 retn
.text:000010B3 _ctrl_draglist  endp
.text:000010B3
.text:000010B3 ; ---------------------------------------------------------------------------
.text:000010B4                 db 8 dup(0CCh)
.text:000010BC
.text:000010BC ; =============== S U B R O U T I N E =======================================
.text:000010BC
.text:000010BC ; Attributes: bp-based frame
.text:000010BC
.text:000010BC                 public _ctrl_filesel
.text:000010BC _ctrl_filesel   proc near
.text:000010BC
.text:000010BC var_8           = dword ptr -8
.text:000010BC var_4           = dword ptr -4
.text:000010BC arg_0           = dword ptr  8
.text:000010BC arg_4           = dword ptr  0Ch
.text:000010BC arg_8           = byte ptr  10h
.text:000010BC arg_C           = dword ptr  14h
.text:000010BC arg_10          = dword ptr  18h
.text:000010BC arg_14          = dword ptr  1Ch
.text:000010BC arg_18          = dword ptr  20h
.text:000010BC arg_1C          = dword ptr  24h
.text:000010BC arg_20          = dword ptr  28h
.text:000010BC
.text:000010BC                 push    ebp
.text:000010BD                 mov     ebp, esp
.text:000010BF                 sub     esp, 8
.text:000010C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000010C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010D0                 mov     eax, [ebp+arg_20]
.text:000010D3                 push    eax
.text:000010D4                 mov     ecx, [ebp+arg_1C]
.text:000010D7                 push    ecx
.text:000010D8                 mov     edx, [ebp+arg_18]
.text:000010DB                 push    edx
.text:000010DC                 push    7
.text:000010DE                 mov     eax, [ebp+arg_0]
.text:000010E1                 push    eax
.text:000010E2                 call    _ctrl_new
.text:000010E7                 add     esp, 14h
.text:000010EA                 mov     [ebp+var_4], eax
.text:000010ED                 cmp     [ebp+arg_4], 0
.text:000010F1                 jz      short loc_1104
.text:000010F3                 mov     ecx, [ebp+arg_4]
.text:000010F6                 push    ecx
.text:000010F7                 call    _dupstr
.text:000010FC                 add     esp, 4
.text:000010FF                 mov     [ebp+var_8], eax
.text:00001102                 jmp     short loc_110B
.text:00001104 ; ---------------------------------------------------------------------------
.text:00001104
.text:00001104 loc_1104:                               ; CODE XREF: _ctrl_filesel+35j
.text:00001104                 mov     [ebp+var_8], 0
.text:0000110B
.text:0000110B loc_110B:                               ; CODE XREF: _ctrl_filesel+46j
.text:0000110B                 mov     edx, [ebp+var_4]
.text:0000110E                 mov     eax, [ebp+var_8]
.text:00001111                 mov     [edx+4], eax
.text:00001114                 mov     ecx, [ebp+var_4]
.text:00001117                 mov     dl, [ebp+arg_8]
.text:0000111A                 mov     [ecx+1Ch], dl
.text:0000111D                 mov     eax, [ebp+var_4]
.text:00001120                 mov     ecx, [ebp+arg_C]
.text:00001123                 mov     [eax+20h], ecx
.text:00001126                 mov     edx, [ebp+var_4]
.text:00001129                 mov     eax, [ebp+arg_10]
.text:0000112C                 mov     [edx+24h], eax
.text:0000112F                 mov     ecx, [ebp+arg_14]
.text:00001132                 push    ecx
.text:00001133                 call    _dupstr
.text:00001138                 add     esp, 4
.text:0000113B                 mov     edx, [ebp+var_4]
.text:0000113E                 mov     [edx+28h], eax
.text:00001141                 mov     eax, [ebp+var_4]
.text:00001144                 add     esp, 8
.text:00001147                 cmp     ebp, esp
.text:00001149                 call    __RTC_CheckEsp
.text:0000114E                 mov     esp, ebp
.text:00001150                 pop     ebp
.text:00001151                 retn
.text:00001151 _ctrl_filesel   endp
.text:00001151
.text:00001151 ; ---------------------------------------------------------------------------
.text:00001152                 db 0Ah dup(0CCh)
.text:0000115C
.text:0000115C ; =============== S U B R O U T I N E =======================================
.text:0000115C
.text:0000115C ; Attributes: bp-based frame
.text:0000115C
.text:0000115C                 public _ctrl_fontsel
.text:0000115C _ctrl_fontsel   proc near
.text:0000115C
.text:0000115C var_8           = dword ptr -8
.text:0000115C var_4           = dword ptr -4
.text:0000115C arg_0           = dword ptr  8
.text:0000115C arg_4           = dword ptr  0Ch
.text:0000115C arg_8           = byte ptr  10h
.text:0000115C arg_C           = dword ptr  14h
.text:0000115C arg_10          = dword ptr  18h
.text:0000115C arg_14          = dword ptr  1Ch
.text:0000115C
.text:0000115C                 push    ebp
.text:0000115D                 mov     ebp, esp
.text:0000115F                 sub     esp, 8
.text:00001162                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001169                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001170                 mov     eax, [ebp+arg_14]
.text:00001173                 push    eax
.text:00001174                 mov     ecx, [ebp+arg_10]
.text:00001177                 push    ecx
.text:00001178                 mov     edx, [ebp+arg_C]
.text:0000117B                 push    edx
.text:0000117C                 push    8
.text:0000117E                 mov     eax, [ebp+arg_0]
.text:00001181                 push    eax
.text:00001182                 call    _ctrl_new
.text:00001187                 add     esp, 14h
.text:0000118A                 mov     [ebp+var_4], eax
.text:0000118D                 cmp     [ebp+arg_4], 0
.text:00001191                 jz      short loc_11A4
.text:00001193                 mov     ecx, [ebp+arg_4]
.text:00001196                 push    ecx
.text:00001197                 call    _dupstr
.text:0000119C                 add     esp, 4
.text:0000119F                 mov     [ebp+var_8], eax
.text:000011A2                 jmp     short loc_11AB
.text:000011A4 ; ---------------------------------------------------------------------------
.text:000011A4
.text:000011A4 loc_11A4:                               ; CODE XREF: _ctrl_fontsel+35j
.text:000011A4                 mov     [ebp+var_8], 0
.text:000011AB
.text:000011AB loc_11AB:                               ; CODE XREF: _ctrl_fontsel+46j
.text:000011AB                 mov     edx, [ebp+var_4]
.text:000011AE                 mov     eax, [ebp+var_8]
.text:000011B1                 mov     [edx+4], eax
.text:000011B4                 mov     ecx, [ebp+var_4]
.text:000011B7                 mov     dl, [ebp+arg_8]
.text:000011BA                 mov     [ecx+1Ch], dl
.text:000011BD                 mov     eax, [ebp+var_4]
.text:000011C0                 add     esp, 8
.text:000011C3                 cmp     ebp, esp
.text:000011C5                 call    __RTC_CheckEsp
.text:000011CA                 mov     esp, ebp
.text:000011CC                 pop     ebp
.text:000011CD                 retn
.text:000011CD _ctrl_fontsel   endp
.text:000011CD
.text:000011CD ; ---------------------------------------------------------------------------
.text:000011CE                 db 0Eh dup(0CCh)
.text:000011DC
.text:000011DC ; =============== S U B R O U T I N E =======================================
.text:000011DC
.text:000011DC ; Attributes: bp-based frame
.text:000011DC
.text:000011DC                 public _ctrl_tabdelay
.text:000011DC _ctrl_tabdelay  proc near
.text:000011DC
.text:000011DC var_4           = dword ptr -4
.text:000011DC arg_0           = dword ptr  8
.text:000011DC arg_4           = dword ptr  0Ch
.text:000011DC
.text:000011DC                 push    ebp
.text:000011DD                 mov     ebp, esp
.text:000011DF                 push    ecx
.text:000011E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011E7                 push    0
.text:000011E9                 call    _P
.text:000011EE                 add     esp, 4
.text:000011F1                 push    eax
.text:000011F2                 push    0
.text:000011F4                 push    0
.text:000011F6                 call    _P
.text:000011FB                 add     esp, 4
.text:000011FE                 push    eax
.text:000011FF                 push    9
.text:00001201                 mov     eax, [ebp+arg_0]
.text:00001204                 push    eax
.text:00001205                 call    _ctrl_new
.text:0000120A                 add     esp, 14h
.text:0000120D                 mov     [ebp+var_4], eax
.text:00001210                 mov     ecx, [ebp+var_4]
.text:00001213                 mov     edx, [ebp+arg_4]
.text:00001216                 mov     [ecx+1Ch], edx
.text:00001219                 mov     eax, [ebp+var_4]
.text:0000121C                 add     esp, 4
.text:0000121F                 cmp     ebp, esp
.text:00001221                 call    __RTC_CheckEsp
.text:00001226                 mov     esp, ebp
.text:00001228                 pop     ebp
.text:00001229                 retn
.text:00001229 _ctrl_tabdelay  endp
.text:00001229
.text:00001229 ; ---------------------------------------------------------------------------
.text:0000122A                 align 4
.text:0000122C
.text:0000122C ; =============== S U B R O U T I N E =======================================
.text:0000122C
.text:0000122C ; Attributes: bp-based frame
.text:0000122C
.text:0000122C                 public _ctrl_text
.text:0000122C _ctrl_text      proc near
.text:0000122C
.text:0000122C var_4           = dword ptr -4
.text:0000122C arg_0           = dword ptr  8
.text:0000122C arg_4           = dword ptr  0Ch
.text:0000122C arg_8           = dword ptr  10h
.text:0000122C
.text:0000122C                 push    ebp
.text:0000122D                 mov     ebp, esp
.text:0000122F                 push    ecx
.text:00001230                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001237                 push    0
.text:00001239                 call    _P
.text:0000123E                 add     esp, 4
.text:00001241                 push    eax
.text:00001242                 push    0
.text:00001244                 mov     eax, [ebp+arg_8]
.text:00001247                 push    eax
.text:00001248                 push    0
.text:0000124A                 mov     ecx, [ebp+arg_0]
.text:0000124D                 push    ecx
.text:0000124E                 call    _ctrl_new
.text:00001253                 add     esp, 14h
.text:00001256                 mov     [ebp+var_4], eax
.text:00001259                 mov     edx, [ebp+arg_4]
.text:0000125C                 push    edx
.text:0000125D                 call    _dupstr
.text:00001262                 add     esp, 4
.text:00001265                 mov     ecx, [ebp+var_4]
.text:00001268                 mov     [ecx+4], eax
.text:0000126B                 mov     eax, [ebp+var_4]
.text:0000126E                 add     esp, 4
.text:00001271                 cmp     ebp, esp
.text:00001273                 call    __RTC_CheckEsp
.text:00001278                 mov     esp, ebp
.text:0000127A                 pop     ebp
.text:0000127B                 retn
.text:0000127B _ctrl_text      endp
.text:0000127B
.text:0000127C
.text:0000127C ; =============== S U B R O U T I N E =======================================
.text:0000127C
.text:0000127C ; Attributes: bp-based frame
.text:0000127C
.text:0000127C                 public _ctrl_checkbox
.text:0000127C _ctrl_checkbox  proc near
.text:0000127C
.text:0000127C var_8           = dword ptr -8
.text:0000127C var_4           = dword ptr -4
.text:0000127C arg_0           = dword ptr  8
.text:0000127C arg_4           = dword ptr  0Ch
.text:0000127C arg_8           = byte ptr  10h
.text:0000127C arg_C           = dword ptr  14h
.text:0000127C arg_10          = dword ptr  18h
.text:0000127C arg_14          = dword ptr  1Ch
.text:0000127C
.text:0000127C                 push    ebp
.text:0000127D                 mov     ebp, esp
.text:0000127F                 sub     esp, 8
.text:00001282                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001289                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001290                 mov     eax, [ebp+arg_14]
.text:00001293                 push    eax
.text:00001294                 mov     ecx, [ebp+arg_10]
.text:00001297                 push    ecx
.text:00001298                 mov     edx, [ebp+arg_C]
.text:0000129B                 push    edx
.text:0000129C                 push    3
.text:0000129E                 mov     eax, [ebp+arg_0]
.text:000012A1                 push    eax
.text:000012A2                 call    _ctrl_new
.text:000012A7                 add     esp, 14h
.text:000012AA                 mov     [ebp+var_4], eax
.text:000012AD                 cmp     [ebp+arg_4], 0
.text:000012B1                 jz      short loc_12C4
.text:000012B3                 mov     ecx, [ebp+arg_4]
.text:000012B6                 push    ecx
.text:000012B7                 call    _dupstr
.text:000012BC                 add     esp, 4
.text:000012BF                 mov     [ebp+var_8], eax
.text:000012C2                 jmp     short loc_12CB
.text:000012C4 ; ---------------------------------------------------------------------------
.text:000012C4
.text:000012C4 loc_12C4:                               ; CODE XREF: _ctrl_checkbox+35j
.text:000012C4                 mov     [ebp+var_8], 0
.text:000012CB
.text:000012CB loc_12CB:                               ; CODE XREF: _ctrl_checkbox+46j
.text:000012CB                 mov     edx, [ebp+var_4]
.text:000012CE                 mov     eax, [ebp+var_8]
.text:000012D1                 mov     [edx+4], eax
.text:000012D4                 mov     ecx, [ebp+var_4]
.text:000012D7                 mov     dl, [ebp+arg_8]
.text:000012DA                 mov     [ecx+1Ch], dl
.text:000012DD                 mov     eax, [ebp+var_4]
.text:000012E0                 add     esp, 8
.text:000012E3                 cmp     ebp, esp
.text:000012E5                 call    __RTC_CheckEsp
.text:000012EA                 mov     esp, ebp
.text:000012EC                 pop     ebp
.text:000012ED                 retn
.text:000012ED _ctrl_checkbox  endp
.text:000012ED
.text:000012ED ; ---------------------------------------------------------------------------
.text:000012EE                 db 0Eh dup(0CCh)
.text:000012FC
.text:000012FC ; =============== S U B R O U T I N E =======================================
.text:000012FC
.text:000012FC ; Attributes: bp-based frame
.text:000012FC
.text:000012FC                 public _ctrl_free
.text:000012FC _ctrl_free      proc near               ; CODE XREF: _ctrl_free_set+61p
.text:000012FC
.text:000012FC var_8           = dword ptr -8
.text:000012FC var_4           = dword ptr -4
.text:000012FC arg_0           = dword ptr  8
.text:000012FC
.text:000012FC                 push    ebp
.text:000012FD                 mov     ebp, esp
.text:000012FF                 sub     esp, 8
.text:00001302                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001309                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001310                 mov     eax, [ebp+arg_0]
.text:00001313                 mov     ecx, [eax+4]
.text:00001316                 push    ecx
.text:00001317                 call    _safefree
.text:0000131C                 add     esp, 4
.text:0000131F                 mov     edx, [ebp+arg_0]
.text:00001322                 mov     eax, [edx]
.text:00001324                 mov     [ebp+var_8], eax
.text:00001327                 mov     ecx, [ebp+var_8]
.text:0000132A                 sub     ecx, 2
.text:0000132D                 mov     [ebp+var_8], ecx
.text:00001330                 cmp     [ebp+var_8], 5  ; switch 6 cases
.text:00001334                 ja      $LN8            ; jumptable 0000133D default case
.text:0000133A                 mov     edx, [ebp+var_8]
.text:0000133D                 jmp     ds:$LN12[edx*4] ; switch jump
.text:00001344 ; ---------------------------------------------------------------------------
.text:00001344
.text:00001344 $LN7:                                   ; CODE XREF: _ctrl_free+41j
.text:00001344                                         ; DATA XREF: .text:$LN12o
.text:00001344                 mov     [ebp+var_4], 0  ; jumptable 0000133D case 0
.text:0000134B                 jmp     short loc_1356
.text:0000134D ; ---------------------------------------------------------------------------
.text:0000134D
.text:0000134D loc_134D:                               ; CODE XREF: _ctrl_free+7Aj
.text:0000134D                 mov     eax, [ebp+var_4]
.text:00001350                 add     eax, 1
.text:00001353                 mov     [ebp+var_4], eax
.text:00001356
.text:00001356 loc_1356:                               ; CODE XREF: _ctrl_free+4Fj
.text:00001356                 mov     ecx, [ebp+arg_0]
.text:00001359                 mov     edx, [ebp+var_4]
.text:0000135C                 cmp     edx, [ecx+24h]
.text:0000135F                 jge     short loc_1378
.text:00001361                 mov     eax, [ebp+arg_0]
.text:00001364                 mov     ecx, [eax+28h]
.text:00001367                 mov     edx, [ebp+var_4]
.text:0000136A                 mov     eax, [ecx+edx*4]
.text:0000136D                 push    eax
.text:0000136E                 call    _safefree
.text:00001373                 add     esp, 4
.text:00001376                 jmp     short loc_134D
.text:00001378 ; ---------------------------------------------------------------------------
.text:00001378
.text:00001378 loc_1378:                               ; CODE XREF: _ctrl_free+63j
.text:00001378                 mov     ecx, [ebp+arg_0]
.text:0000137B                 mov     edx, [ecx+28h]
.text:0000137E                 push    edx
.text:0000137F                 call    _safefree
.text:00001384                 add     esp, 4
.text:00001387                 mov     eax, [ebp+arg_0]
.text:0000138A                 mov     ecx, [eax+2Ch]
.text:0000138D                 push    ecx
.text:0000138E                 call    _safefree
.text:00001393                 add     esp, 4
.text:00001396                 mov     edx, [ebp+arg_0]
.text:00001399                 mov     eax, [edx+30h]
.text:0000139C                 push    eax
.text:0000139D                 call    _safefree
.text:000013A2                 add     esp, 4
.text:000013A5                 jmp     short $LN8      ; jumptable 0000133D default case
.text:000013A7 ; ---------------------------------------------------------------------------
.text:000013A7
.text:000013A7 $LN3_1:                                 ; CODE XREF: _ctrl_free+41j
.text:000013A7                                         ; DATA XREF: .text:$LN12o
.text:000013A7                 mov     ecx, [ebp+arg_0] ; jumptable 0000133D case 4
.text:000013AA                 mov     edx, [ecx+20h]
.text:000013AD                 push    edx
.text:000013AE                 call    _safefree
.text:000013B3                 add     esp, 4
.text:000013B6                 jmp     short $LN8      ; jumptable 0000133D default case
.text:000013B8 ; ---------------------------------------------------------------------------
.text:000013B8
.text:000013B8 $LN2:                                   ; CODE XREF: _ctrl_free+41j
.text:000013B8                                         ; DATA XREF: .text:$LN12o
.text:000013B8                 mov     eax, [ebp+arg_0] ; jumptable 0000133D case 3
.text:000013BB                 mov     ecx, [eax+34h]
.text:000013BE                 push    ecx
.text:000013BF                 call    _safefree
.text:000013C4                 add     esp, 4
.text:000013C7                 jmp     short $LN8      ; jumptable 0000133D default case
.text:000013C9 ; ---------------------------------------------------------------------------
.text:000013C9
.text:000013C9 $LN1:                                   ; CODE XREF: _ctrl_free+41j
.text:000013C9                                         ; DATA XREF: .text:$LN12o
.text:000013C9                 mov     edx, [ebp+arg_0] ; jumptable 0000133D case 5
.text:000013CC                 mov     eax, [edx+28h]
.text:000013CF                 push    eax
.text:000013D0                 call    _safefree
.text:000013D5                 add     esp, 4
.text:000013D8
.text:000013D8 $LN8:                                   ; CODE XREF: _ctrl_free+38j
.text:000013D8                                         ; _ctrl_free+41j ...
.text:000013D8                 mov     ecx, [ebp+arg_0] ; jumptable 0000133D default case
.text:000013DB                 push    ecx
.text:000013DC                 call    _safefree
.text:000013E1                 add     esp, 4
.text:000013E4                 add     esp, 8
.text:000013E7                 cmp     ebp, esp
.text:000013E9                 call    __RTC_CheckEsp
.text:000013EE                 mov     esp, ebp
.text:000013F0                 pop     ebp
.text:000013F1                 retn
.text:000013F1 _ctrl_free      endp
.text:000013F1
.text:000013F1 ; ---------------------------------------------------------------------------
.text:000013F2                 align 4
.text:000013F4 $LN12           dd offset $LN7          ; DATA XREF: _ctrl_free+41r
.text:000013F4                 dd offset $LN8          ; jump table for switch statement
.text:000013F4                 dd offset $LN8
.text:000013F4                 dd offset $LN2
.text:000013F4                 dd offset $LN3_1
.text:000013F4                 dd offset $LN1
.text:000013F4 _text           ends
.text:000013F4
.rtc$TMZ:0000140C ; ===========================================================================
.rtc$TMZ:0000140C
.rtc$TMZ:0000140C ; Segment type: Pure data
.rtc$TMZ:0000140C ; Segment permissions: Read
.rtc$TMZ:0000140C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000140C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000140C                 ;org 140Ch
.rtc$TMZ:0000140C ; COMDAT (pick any)
.rtc$TMZ:0000140C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000140C _rtc$TMZ        ends
.rtc$TMZ:0000140C
.rtc$IMZ:00001410 ; ===========================================================================
.rtc$IMZ:00001410
.rtc$IMZ:00001410 ; Segment type: Pure data
.rtc$IMZ:00001410 ; Segment permissions: Read
.rtc$IMZ:00001410 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001410                 assume cs:_rtc$IMZ
.rtc$IMZ:00001410                 ;org 1410h
.rtc$IMZ:00001410 ; COMDAT (pick any)
.rtc$IMZ:00001410 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001410 _rtc$IMZ        ends
.rtc$IMZ:00001410
UNDEF:00001420 ; ===========================================================================
UNDEF:00001420
UNDEF:00001420 ; Segment type: Externs
UNDEF:00001420 ; UNDEF
UNDEF:00001420                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _I+2Ep
UNDEF:00001420                                         ; _P+2Ep
UNDEF:00001424                 extrn __RTC_Shutdown:near
UNDEF:00001424                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001428                 extrn __RTC_InitBase:near
UNDEF:00001428                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000142C                 extrn _safemalloc:near  ; CODE XREF: _ctrl_new_box+Fp
UNDEF:0000142C                                         ; _ctrl_settitle+18p ...
UNDEF:00001430                 extrn __RTC_CheckEsp:near ; CODE XREF: _ctrl_new_box+67p
UNDEF:00001430                                         ; _ctrl_free_box+7Ep ...
UNDEF:00001434                 extrn _safefree:near    ; CODE XREF: _ctrl_free_box+8Cp
UNDEF:00001434                                         ; _ctrl_free_box+9Bp ...
UNDEF:00001438 ; int __cdecl strcmp(const char *, const char *)
UNDEF:00001438                 extrn _strcmp:near      ; CODE XREF: _ctrl_find_path+46p
UNDEF:00001438                                         ; _ctrl_getset+4Dp ...
UNDEF:0000143C ; void *__cdecl memmove(void *, const void *, size_t)
UNDEF:0000143C                 extrn _memmove:near     ; CODE XREF: _ctrl_settitle+F7p
UNDEF:0000143C                                         ; _ctrl_getset+192p
UNDEF:00001440                 extrn _saferealloc:near ; CODE XREF: _ctrl_settitle+B8p
UNDEF:00001440                                         ; _ctrl_getset+153p ...
UNDEF:00001444                 extrn _dupstr:near      ; CODE XREF: _ctrl_settitle+3Cp
UNDEF:00001444                                         ; _ctrl_settitle+57p ...
UNDEF:00001448                 extrn __wassert:near    ; CODE XREF: _ctrl_columns+62p
UNDEF:00001448
UNDEF:00001448
UNDEF:00001448                 end