.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : A1AF0F7AA0809527B22CCC30030C7646
.text:00000000 ; Input CRC32 : A9960E26
.text:00000000
.text:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\pinger.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "LIBCMTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000 .intel_syntax noprefix
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000                 public _pinger_new
.text:00000000 _pinger_new     proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 push    14h
.text:0000000D                 push    1
.text:0000000F                 call    _safemalloc
.text:00000014                 add     esp, 8
.text:00000017                 mov     [ebp+var_4], eax
.text:0000001A                 push    6
.text:0000001C                 mov     eax, [ebp+arg_0]
.text:0000001F                 push    eax
.text:00000020                 call    _conf_get_int
.text:00000025                 add     esp, 8
.text:00000028                 mov     ecx, [ebp+var_4]
.text:0000002B                 mov     [ecx], eax
.text:0000002D                 mov     edx, [ebp+var_4]
.text:00000030                 mov     dword ptr [edx+4], 0
.text:00000037                 mov     eax, [ebp+var_4]
.text:0000003A                 mov     ecx, [ebp+arg_4]
.text:0000003D                 mov     [eax+0Ch], ecx
.text:00000040                 mov     edx, [ebp+var_4]
.text:00000043                 mov     eax, [ebp+arg_8]
.text:00000046                 mov     [edx+10h], eax
.text:00000049                 mov     ecx, [ebp+var_4]
.text:0000004C                 push    ecx
.text:0000004D                 call    _pinger_schedule
.text:00000052                 add     esp, 4
.text:00000055                 mov     eax, [ebp+var_4]
.text:00000058                 add     esp, 4
.text:0000005B                 cmp     ebp, esp
.text:0000005D                 call    __RTC_CheckEsp
.text:00000062                 mov     esp, ebp
.text:00000064                 pop     ebp
.text:00000065                 retn
.text:00000065 _pinger_new     endp
.text:00000065
.text:00000065 ; ---------------------------------------------------------------------------
.text:00000066                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 _pinger_schedule proc near              ; CODE XREF: _pinger_new+4Dp
.text:00000070                                         ; _pinger_timer+54p ...
.text:00000070
.text:00000070 var_4           = dword ptr -4
.text:00000070 arg_0           = dword ptr  8
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 push    ecx
.text:00000074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000007B                 mov     eax, [ebp+arg_0]
.text:0000007E                 cmp     dword ptr [eax], 0
.text:00000081                 jnz     short loc_8F
.text:00000083                 mov     ecx, [ebp+arg_0]
.text:00000086                 mov     dword ptr [ecx+4], 0
.text:0000008D                 jmp     short loc_D6
.text:0000008F ; ---------------------------------------------------------------------------
.text:0000008F
.text:0000008F loc_8F:                                 ; CODE XREF: _pinger_schedule+11j
.text:0000008F                 mov     edx, [ebp+arg_0]
.text:00000092                 push    edx
.text:00000093                 push    offset _pinger_timer
.text:00000098                 mov     eax, [ebp+arg_0]
.text:0000009B                 mov     ecx, [eax]
.text:0000009D                 imul    ecx, 3E8h
.text:000000A3                 push    ecx
.text:000000A4                 call    _schedule_timer
.text:000000A9                 add     esp, 0Ch
.text:000000AC                 mov     [ebp+var_4], eax
.text:000000AF                 mov     edx, [ebp+arg_0]
.text:000000B2                 cmp     dword ptr [edx+4], 0
.text:000000B6                 jz      short loc_C3
.text:000000B8                 mov     eax, [ebp+arg_0]
.text:000000BB                 mov     ecx, [ebp+var_4]
.text:000000BE                 cmp     ecx, [eax+8]
.text:000000C1                 jnb     short loc_D6
.text:000000C3
.text:000000C3 loc_C3:                                 ; CODE XREF: _pinger_schedule+46j
.text:000000C3                 mov     edx, [ebp+arg_0]
.text:000000C6                 mov     eax, [ebp+var_4]
.text:000000C9                 mov     [edx+8], eax
.text:000000CC                 mov     ecx, [ebp+arg_0]
.text:000000CF                 mov     dword ptr [ecx+4], 1
.text:000000D6
.text:000000D6 loc_D6:                                 ; CODE XREF: _pinger_schedule+1Dj
.text:000000D6                                         ; _pinger_schedule+51j
.text:000000D6                 add     esp, 4
.text:000000D9                 cmp     ebp, esp
.text:000000DB                 call    __RTC_CheckEsp
.text:000000E0                 mov     esp, ebp
.text:000000E2                 pop     ebp
.text:000000E3                 retn
.text:000000E3 _pinger_schedule endp
.text:000000E3
.text:000000E3 ; ---------------------------------------------------------------------------
.text:000000E4                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 _pinger_timer   proc near               ; DATA XREF: _pinger_schedule+23o
.text:000000F0
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_0           = dword ptr  8
.text:000000F0 arg_4           = dword ptr  0Ch
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 push    ecx
.text:000000F4                 push    esi
.text:000000F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000FC                 mov     eax, [ebp+arg_0]
.text:000000FF                 mov     [ebp+var_4], eax
.text:00000102                 mov     ecx, [ebp+var_4]
.text:00000105                 cmp     dword ptr [ecx+4], 0
.text:00000109                 jz      short loc_14C
.text:0000010B                 mov     edx, [ebp+var_4]
.text:0000010E                 mov     eax, [ebp+arg_4]
.text:00000111                 cmp     eax, [edx+8]
.text:00000114                 jnz     short loc_14C
.text:00000116                 mov     esi, esp
.text:00000118                 push    0Fh
.text:0000011A                 mov     ecx, [ebp+var_4]
.text:0000011D                 mov     edx, [ecx+10h]
.text:00000120                 push    edx
.text:00000121                 mov     eax, [ebp+var_4]
.text:00000124                 mov     ecx, [eax+0Ch]
.text:00000127                 mov     edx, [ecx+18h]
.text:0000012A                 call    edx
.text:0000012C                 add     esp, 8
.text:0000012F                 cmp     esi, esp
.text:00000131                 call    __RTC_CheckEsp
.text:00000136                 mov     eax, [ebp+var_4]
.text:00000139                 mov     dword ptr [eax+4], 0
.text:00000140                 mov     ecx, [ebp+var_4]
.text:00000143                 push    ecx
.text:00000144                 call    _pinger_schedule
.text:00000149                 add     esp, 4
.text:0000014C
.text:0000014C loc_14C:                                ; CODE XREF: _pinger_timer+19j
.text:0000014C                                         ; _pinger_timer+24j
.text:0000014C                 pop     esi
.text:0000014D                 add     esp, 4
.text:00000150                 cmp     ebp, esp
.text:00000152                 call    __RTC_CheckEsp
.text:00000157                 mov     esp, ebp
.text:00000159                 pop     ebp
.text:0000015A                 retn
.text:0000015A _pinger_timer   endp
.text:0000015A
.text:0000015A ; ---------------------------------------------------------------------------
.text:0000015B                 align 10h
.text:00000160
.text:00000160 ; =============== S U B R O U T I N E =======================================
.text:00000160
.text:00000160 ; Attributes: bp-based frame
.text:00000160
.text:00000160                 public _pinger_reconfig
.text:00000160 _pinger_reconfig proc near
.text:00000160
.text:00000160 var_4           = dword ptr -4
.text:00000160 arg_0           = dword ptr  8
.text:00000160 arg_4           = dword ptr  0Ch
.text:00000160 arg_8           = dword ptr  10h
.text:00000160
.text:00000160                 push    ebp
.text:00000161                 mov     ebp, esp
.text:00000163                 push    ecx
.text:00000164                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000016B                 push    6
.text:0000016D                 mov     eax, [ebp+arg_8]
.text:00000170                 push    eax
.text:00000171                 call    _conf_get_int
.text:00000176                 add     esp, 8
.text:00000179                 mov     [ebp+var_4], eax
.text:0000017C                 push    6
.text:0000017E                 mov     ecx, [ebp+arg_4]
.text:00000181                 push    ecx
.text:00000182                 call    _conf_get_int
.text:00000187                 add     esp, 8
.text:0000018A                 cmp     eax, [ebp+var_4]
.text:0000018D                 jz      short loc_1A3
.text:0000018F                 mov     edx, [ebp+arg_0]
.text:00000192                 mov     eax, [ebp+var_4]
.text:00000195                 mov     [edx], eax
.text:00000197                 mov     ecx, [ebp+arg_0]
.text:0000019A                 push    ecx
.text:0000019B                 call    _pinger_schedule
.text:000001A0                 add     esp, 4
.text:000001A3
.text:000001A3 loc_1A3:                                ; CODE XREF: _pinger_reconfig+2Dj
.text:000001A3                 add     esp, 4
.text:000001A6                 cmp     ebp, esp
.text:000001A8                 call    __RTC_CheckEsp
.text:000001AD                 mov     esp, ebp
.text:000001AF                 pop     ebp
.text:000001B0                 retn
.text:000001B0 _pinger_reconfig endp
.text:000001B0
.text:000001B0 ; ---------------------------------------------------------------------------
.text:000001B1                 align 10h
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0                 public _pinger_free
.text:000001C0 _pinger_free    proc near
.text:000001C0
.text:000001C0 arg_0           = dword ptr  8
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 mov     eax, [ebp+arg_0]
.text:000001C6                 push    eax
.text:000001C7                 call    _expire_timer_context
.text:000001CC                 add     esp, 4
.text:000001CF                 mov     ecx, [ebp+arg_0]
.text:000001D2                 push    ecx
.text:000001D3                 call    _safefree
.text:000001D8                 add     esp, 4
.text:000001DB                 cmp     ebp, esp
.text:000001DD                 call    __RTC_CheckEsp
.text:000001E2                 pop     ebp
.text:000001E3                 retn
.text:000001E3 _pinger_free    endp
.text:000001E3
.text:000001E3 _text           ends
.text:000001E3
.rtc$TMZ:000001E4 ; ===========================================================================
.rtc$TMZ:000001E4
.rtc$TMZ:000001E4 ; Segment type: Pure data
.rtc$TMZ:000001E4 ; Segment permissions: Read
.rtc$TMZ:000001E4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000001E4                 assume cs:_rtc$TMZ
.rtc$TMZ:000001E4                 ;org 1E4h
.rtc$TMZ:000001E4 ; COMDAT (pick any)
.rtc$TMZ:000001E4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000001E4 _rtc$TMZ        ends
.rtc$TMZ:000001E4
.rtc$IMZ:000001E8 ; ===========================================================================
.rtc$IMZ:000001E8
.rtc$IMZ:000001E8 ; Segment type: Pure data
.rtc$IMZ:000001E8 ; Segment permissions: Read
.rtc$IMZ:000001E8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000001E8                 assume cs:_rtc$IMZ
.rtc$IMZ:000001E8                 ;org 1E8h
.rtc$IMZ:000001E8 ; COMDAT (pick any)
.rtc$IMZ:000001E8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000001E8 _rtc$IMZ        ends
.rtc$IMZ:000001E8
UNDEF:000001F0 ; ===========================================================================
UNDEF:000001F0
UNDEF:000001F0 ; Segment type: Externs
UNDEF:000001F0 ; UNDEF
UNDEF:000001F0                 extrn _conf_get_int:near ; CODE XREF: _pinger_new+20p
UNDEF:000001F0                                         ; _pinger_reconfig+11p ...
UNDEF:000001F4                 extrn _safemalloc:near  ; CODE XREF: _pinger_new+Fp
UNDEF:000001F8                 extrn __RTC_CheckEsp:near ; CODE XREF: _pinger_new+5Dp
UNDEF:000001F8                                         ; _pinger_schedule+6Bp ...
UNDEF:000001FC                 extrn __RTC_Shutdown:near
UNDEF:000001FC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000200                 extrn __RTC_InitBase:near
UNDEF:00000200                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000204                 extrn _schedule_timer:near ; CODE XREF: _pinger_schedule+34p
UNDEF:00000208                 extrn _safefree:near    ; CODE XREF: _pinger_free+13p
UNDEF:0000020C                 extrn _expire_timer_context:near ; CODE XREF: _pinger_free+7p
UNDEF:0000020C
UNDEF:0000020C
UNDEF:0000020C                 end