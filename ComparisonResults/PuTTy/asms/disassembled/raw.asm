.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 146DA0ABE557781A27BA1C9A14721B51
.data:00000000 ; Input CRC32 : A78C0C3A
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\raw.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85581        db 'Connecting to %s port %d',0 ; DATA XREF: _raw_log+55o
.data:00000019                 align 4
.data:0000001C $SG85583        db 'Failed to connect to %s: %s',0 ; DATA XREF: _raw_log+75o
.data:00000038 $SG85606        db '%s',0               ; DATA XREF: _raw_closing+7Bo
.data:0000003B                 align 4
.data:0000003C $SG85660        db ' (IPv4)',0          ; DATA XREF: _raw_init+99o
.data:00000044 $SG85661        db ' (IPv6)',0          ; DATA XREF: _raw_init+A8o
.data:0000004C $SG85663        db 'Looking up host "%s"%s',0 ; DATA XREF: _raw_init+C6o
.data:00000063                 align 4
.data:00000064 $SG85780        db 'raw',0              ; DATA XREF: .data:000000A8o
.data:00000068                 public _raw_backend
.data:00000068 _raw_backend    dd offset _raw_init
.data:0000006C                 dd offset _raw_free
.data:00000070                 dd offset _raw_reconfig
.data:00000074                 dd offset _raw_send
.data:00000078                 dd offset _raw_sendbuffer
.data:0000007C                 dd offset _raw_size
.data:00000080                 dd offset _raw_special
.data:00000084                 dd offset _raw_get_specials
.data:00000088                 dd offset _raw_connected
.data:0000008C                 dd offset _raw_exitcode
.data:00000090                 dd offset _raw_sendok
.data:00000094                 dd offset _raw_ldisc
.data:00000098                 dd offset _raw_provide_ldisc
.data:0000009C                 dd offset _raw_provide_logctx
.data:000000A0                 dd offset _raw_unthrottle
.data:000000A4                 dd offset _raw_cfg_info
.data:000000A8                 dd offset $SG85780      ; "raw"
.data:000000AC                 db    0
.data:000000AD                 db    0
.data:000000AE                 db    0
.data:000000AF                 db    0
.data:000000B0                 db    0
.data:000000B1                 db    0
.data:000000B2                 db    0
.data:000000B3                 db    0
.data:000000B3 _data           ends
.data:000000B3
.rdata:000000B4 ; ===========================================================================
.rdata:000000B4
.rdata:000000B4 ; Segment type: Pure data
.rdata:000000B4 ; Segment permissions: Read
.rdata:000000B4 _rdata          segment dword public 'DATA' use32
.rdata:000000B4                 assume cs:_rdata
.rdata:000000B4                 ;org 0B4h
.rdata:000000B4 ; `raw_init'::`2'::fn_table
.rdata:000000B4 ?fn_table@?1??raw_init@@9@9 dd offset _raw_log ; DATA XREF: _raw_init+39o
.rdata:000000B8                 dd offset _raw_closing
.rdata:000000BC                 dd offset _raw_receive
.rdata:000000C0                 dd offset _raw_sent
.rdata:000000C4                 align 8
.rdata:000000C4 _rdata          ends
.rdata:000000C4
.bss:000000C8 ; ===========================================================================
.bss:000000C8
.bss:000000C8 ; Segment type: Uninitialized
.bss:000000C8 ; Segment permissions: Read/Write
.bss:000000C8 _bss            segment byte public 'BSS' use32
.bss:000000C8                 assume cs:_bss
.bss:000000C8                 ;org 0C8h
.bss:000000C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000C8 $SG85662        db    ? ;               ; DATA XREF: _raw_init:loc_4CDo
.bss:000000C9                 align 4
.bss:000000C9 _bss            ends
.bss:000000C9
.text:000000CC ; ===========================================================================
.text:000000CC
.text:000000CC ; Segment type: Pure code
.text:000000CC ; Segment permissions: Read/Execute
.text:000000CC _text           segment para public 'CODE' use32
.text:000000CC                 assume cs:_text
.text:000000CC                 ;org 0CCh
.text:000000CC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000000CC
.text:000000CC ; =============== S U B R O U T I N E =======================================
.text:000000CC
.text:000000CC ; Attributes: bp-based frame
.text:000000CC
.text:000000CC _raw_log        proc near               ; DATA XREF: .rdata:`raw_init'::`2'::fn_tableo
.text:000000CC
.text:000000CC var_114         = dword ptr -114h
.text:000000CC var_10C         = byte ptr -10Ch
.text:000000CC var_8           = dword ptr -8
.text:000000CC var_4           = dword ptr -4
.text:000000CC arg_0           = dword ptr  8
.text:000000CC arg_4           = dword ptr  0Ch
.text:000000CC arg_8           = dword ptr  10h
.text:000000CC arg_C           = dword ptr  14h
.text:000000CC arg_10          = dword ptr  18h
.text:000000CC
.text:000000CC                 push    ebp
.text:000000CD                 mov     ebp, esp
.text:000000CF                 sub     esp, 114h
.text:000000D5                 push    edi
.text:000000D6                 lea     edi, [ebp+var_114]
.text:000000DC                 mov     ecx, 45h ; 'E'
.text:000000E1                 mov     eax, 0CCCCCCCCh
.text:000000E6                 rep stosd
.text:000000E8                 mov     eax, dword ptr ds:___security_cookie
.text:000000ED                 xor     eax, ebp
.text:000000EF                 mov     [ebp+var_4], eax
.text:000000F2                 mov     eax, [ebp+arg_0]
.text:000000F5                 mov     [ebp+var_8], eax
.text:000000F8                 push    100h
.text:000000FD                 lea     ecx, [ebp+var_10C]
.text:00000103                 push    ecx
.text:00000104                 mov     edx, [ebp+arg_8]
.text:00000107                 push    edx
.text:00000108                 call    _sk_getaddr
.text:0000010D                 add     esp, 0Ch
.text:00000110                 cmp     [ebp+arg_4], 0
.text:00000114                 jnz     short loc_136
.text:00000116                 mov     eax, [ebp+arg_C]
.text:00000119                 push    eax
.text:0000011A                 lea     ecx, [ebp+var_10C]
.text:00000120                 push    ecx
.text:00000121                 push    offset $SG85581 ; "Connecting to %s port %d"
.text:00000126                 call    _dupprintf
.text:0000012B                 add     esp, 0Ch
.text:0000012E                 mov     [ebp+var_114], eax
.text:00000134                 jmp     short loc_154
.text:00000136 ; ---------------------------------------------------------------------------
.text:00000136
.text:00000136 loc_136:                                ; CODE XREF: _raw_log+48j
.text:00000136                 mov     edx, [ebp+arg_10]
.text:00000139                 push    edx
.text:0000013A                 lea     eax, [ebp+var_10C]
.text:00000140                 push    eax
.text:00000141                 push    offset $SG85583 ; "Failed to connect to %s: %s"
.text:00000146                 call    _dupprintf
.text:0000014B                 add     esp, 0Ch
.text:0000014E                 mov     [ebp+var_114], eax
.text:00000154
.text:00000154 loc_154:                                ; CODE XREF: _raw_log+68j
.text:00000154                 mov     ecx, [ebp+var_114]
.text:0000015A                 push    ecx
.text:0000015B                 mov     edx, [ebp+var_8]
.text:0000015E                 mov     eax, [edx+10h]
.text:00000161                 push    eax
.text:00000162                 call    _logevent
.text:00000167                 add     esp, 8
.text:0000016A                 mov     ecx, [ebp+var_114]
.text:00000170                 push    ecx
.text:00000171                 call    _safefree
.text:00000176                 add     esp, 4
.text:00000179                 push    edx
.text:0000017A                 mov     ecx, ebp
.text:0000017C                 push    eax
.text:0000017D                 lea     edx, $LN7
.text:00000183                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000188                 pop     eax
.text:00000189                 pop     edx
.text:0000018A                 pop     edi
.text:0000018B                 mov     ecx, [ebp+var_4]
.text:0000018E                 xor     ecx, ebp
.text:00000190                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000195                 add     esp, 114h
.text:0000019B                 cmp     ebp, esp
.text:0000019D                 call    __RTC_CheckEsp
.text:000001A2                 mov     esp, ebp
.text:000001A4                 pop     ebp
.text:000001A5                 retn
.text:000001A5 _raw_log        endp
.text:000001A5
.text:000001A5 ; ---------------------------------------------------------------------------
.text:000001A6                 align 4
.text:000001A8 $LN7            dd 1                    ; DATA XREF: _raw_log+B1o
.text:000001AC                 dd offset $LN6
.text:000001B0 $LN6            dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:000001ACo
.text:000001B8                 dd offset $LN5          ; "addrbuf"
.text:000001BC $LN5            db 'addrbuf',0          ; DATA XREF: .text:000001B8o
.text:000001C4                 db 8 dup(0CCh)
.text:000001CC
.text:000001CC ; =============== S U B R O U T I N E =======================================
.text:000001CC
.text:000001CC ; Attributes: bp-based frame
.text:000001CC
.text:000001CC _raw_closing    proc near               ; DATA XREF: .rdata:000000B8o
.text:000001CC
.text:000001CC var_4           = dword ptr -4
.text:000001CC arg_0           = dword ptr  8
.text:000001CC arg_4           = dword ptr  0Ch
.text:000001CC
.text:000001CC                 push    ebp
.text:000001CD                 mov     ebp, esp
.text:000001CF                 push    ecx
.text:000001D0                 push    esi
.text:000001D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001D8                 mov     eax, [ebp+arg_0]
.text:000001DB                 mov     [ebp+var_4], eax
.text:000001DE                 cmp     [ebp+arg_4], 0
.text:000001E2                 jz      short loc_25D
.text:000001E4                 mov     ecx, [ebp+var_4]
.text:000001E7                 cmp     dword ptr [ecx+4], 0
.text:000001EB                 jz      short loc_230
.text:000001ED                 mov     esi, esp
.text:000001EF                 mov     edx, [ebp+var_4]
.text:000001F2                 mov     eax, [edx+4]
.text:000001F5                 push    eax
.text:000001F6                 mov     ecx, [ebp+var_4]
.text:000001F9                 mov     edx, [ecx+4]
.text:000001FC                 mov     eax, [edx]
.text:000001FE                 mov     ecx, [eax+4]
.text:00000201                 call    ecx
.text:00000203                 add     esp, 4
.text:00000206                 cmp     esi, esp
.text:00000208                 call    __RTC_CheckEsp
.text:0000020D                 mov     edx, [ebp+var_4]
.text:00000210                 mov     dword ptr [edx+4], 0
.text:00000217                 mov     eax, [ebp+var_4]
.text:0000021A                 mov     dword ptr [eax+8], 1
.text:00000221                 mov     ecx, [ebp+var_4]
.text:00000224                 mov     edx, [ecx+10h]
.text:00000227                 push    edx
.text:00000228                 call    _notify_remote_exit
.text:0000022D                 add     esp, 4
.text:00000230
.text:00000230 loc_230:                                ; CODE XREF: _raw_closing+1Fj
.text:00000230                 mov     eax, [ebp+arg_4]
.text:00000233                 push    eax
.text:00000234                 mov     ecx, [ebp+var_4]
.text:00000237                 mov     edx, [ecx+10h]
.text:0000023A                 push    edx
.text:0000023B                 call    _logevent
.text:00000240                 add     esp, 8
.text:00000243                 mov     eax, [ebp+arg_4]
.text:00000246                 push    eax
.text:00000247                 push    offset $SG85606 ; "%s"
.text:0000024C                 mov     ecx, [ebp+var_4]
.text:0000024F                 mov     edx, [ecx+10h]
.text:00000252                 push    edx
.text:00000253                 call    _connection_fatal
.text:00000258                 add     esp, 0Ch
.text:0000025B                 jmp     short loc_2CB
.text:0000025D ; ---------------------------------------------------------------------------
.text:0000025D
.text:0000025D loc_25D:                                ; CODE XREF: _raw_closing+16j
.text:0000025D                 mov     eax, [ebp+var_4]
.text:00000260                 cmp     dword ptr [eax+14h], 0
.text:00000264                 jnz     short loc_2B5
.text:00000266                 mov     ecx, [ebp+var_4]
.text:00000269                 mov     edx, [ecx+10h]
.text:0000026C                 push    edx
.text:0000026D                 call    _from_backend_eof
.text:00000272                 add     esp, 4
.text:00000275                 test    eax, eax
.text:00000277                 jz      short loc_2B5
.text:00000279                 mov     eax, [ebp+var_4]
.text:0000027C                 cmp     dword ptr [eax+18h], 0
.text:00000280                 jnz     short loc_2B5
.text:00000282                 mov     ecx, [ebp+var_4]
.text:00000285                 cmp     dword ptr [ecx+4], 0
.text:00000289                 jz      short loc_2AB
.text:0000028B                 mov     esi, esp
.text:0000028D                 mov     edx, [ebp+var_4]
.text:00000290                 mov     eax, [edx+4]
.text:00000293                 push    eax
.text:00000294                 mov     ecx, [ebp+var_4]
.text:00000297                 mov     edx, [ecx+4]
.text:0000029A                 mov     eax, [edx]
.text:0000029C                 mov     ecx, [eax+10h]
.text:0000029F                 call    ecx
.text:000002A1                 add     esp, 4
.text:000002A4                 cmp     esi, esp
.text:000002A6                 call    __RTC_CheckEsp
.text:000002AB
.text:000002AB loc_2AB:                                ; CODE XREF: _raw_closing+BDj
.text:000002AB                 mov     edx, [ebp+var_4]
.text:000002AE                 mov     dword ptr [edx+18h], 1
.text:000002B5
.text:000002B5 loc_2B5:                                ; CODE XREF: _raw_closing+98j
.text:000002B5                                         ; _raw_closing+ABj ...
.text:000002B5                 mov     eax, [ebp+var_4]
.text:000002B8                 mov     dword ptr [eax+14h], 1
.text:000002BF                 mov     ecx, [ebp+var_4]
.text:000002C2                 push    ecx
.text:000002C3                 call    _raw_check_close
.text:000002C8                 add     esp, 4
.text:000002CB
.text:000002CB loc_2CB:                                ; CODE XREF: _raw_closing+8Fj
.text:000002CB                 xor     eax, eax
.text:000002CD                 pop     esi
.text:000002CE                 add     esp, 4
.text:000002D1                 cmp     ebp, esp
.text:000002D3                 call    __RTC_CheckEsp
.text:000002D8                 mov     esp, ebp
.text:000002DA                 pop     ebp
.text:000002DB                 retn
.text:000002DB _raw_closing    endp
.text:000002DB
.text:000002DC
.text:000002DC ; =============== S U B R O U T I N E =======================================
.text:000002DC
.text:000002DC ; Attributes: bp-based frame
.text:000002DC
.text:000002DC _raw_check_close proc near              ; CODE XREF: _raw_closing+F7p
.text:000002DC                                         ; _raw_special+4Fp
.text:000002DC
.text:000002DC arg_0           = dword ptr  8
.text:000002DC
.text:000002DC                 push    ebp
.text:000002DD                 mov     ebp, esp
.text:000002DF                 push    esi
.text:000002E0                 mov     eax, [ebp+arg_0]
.text:000002E3                 cmp     dword ptr [eax+14h], 0
.text:000002E7                 jz      short loc_334
.text:000002E9                 mov     ecx, [ebp+arg_0]
.text:000002EC                 cmp     dword ptr [ecx+18h], 0
.text:000002F0                 jz      short loc_334
.text:000002F2                 mov     edx, [ebp+arg_0]
.text:000002F5                 cmp     dword ptr [edx+4], 0
.text:000002F9                 jz      short loc_334
.text:000002FB                 mov     esi, esp
.text:000002FD                 mov     eax, [ebp+arg_0]
.text:00000300                 mov     ecx, [eax+4]
.text:00000303                 push    ecx
.text:00000304                 mov     edx, [ebp+arg_0]
.text:00000307                 mov     eax, [edx+4]
.text:0000030A                 mov     ecx, [eax]
.text:0000030C                 mov     edx, [ecx+4]
.text:0000030F                 call    edx
.text:00000311                 add     esp, 4
.text:00000314                 cmp     esi, esp
.text:00000316                 call    __RTC_CheckEsp
.text:0000031B                 mov     eax, [ebp+arg_0]
.text:0000031E                 mov     dword ptr [eax+4], 0
.text:00000325                 mov     ecx, [ebp+arg_0]
.text:00000328                 mov     edx, [ecx+10h]
.text:0000032B                 push    edx
.text:0000032C                 call    _notify_remote_exit
.text:00000331                 add     esp, 4
.text:00000334
.text:00000334 loc_334:                                ; CODE XREF: _raw_check_close+Bj
.text:00000334                                         ; _raw_check_close+14j ...
.text:00000334                 pop     esi
.text:00000335                 cmp     ebp, esp
.text:00000337                 call    __RTC_CheckEsp
.text:0000033C                 pop     ebp
.text:0000033D                 retn
.text:0000033D _raw_check_close endp
.text:0000033D
.text:0000033D ; ---------------------------------------------------------------------------
.text:0000033E                 db 0Eh dup(0CCh)
.text:0000034C
.text:0000034C ; =============== S U B R O U T I N E =======================================
.text:0000034C
.text:0000034C ; Attributes: bp-based frame
.text:0000034C
.text:0000034C _raw_receive    proc near               ; DATA XREF: .rdata:000000BCo
.text:0000034C
.text:0000034C var_4           = dword ptr -4
.text:0000034C arg_0           = dword ptr  8
.text:0000034C arg_8           = dword ptr  10h
.text:0000034C arg_C           = dword ptr  14h
.text:0000034C
.text:0000034C                 push    ebp
.text:0000034D                 mov     ebp, esp
.text:0000034F                 push    ecx
.text:00000350                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000357                 mov     eax, [ebp+arg_0]
.text:0000035A                 mov     [ebp+var_4], eax
.text:0000035D                 mov     ecx, [ebp+arg_C]
.text:00000360                 push    ecx
.text:00000361                 mov     edx, [ebp+arg_8]
.text:00000364                 push    edx
.text:00000365                 mov     eax, [ebp+var_4]
.text:00000368                 push    eax
.text:00000369                 call    _c_write
.text:0000036E                 add     esp, 0Ch
.text:00000371                 mov     eax, 1
.text:00000376                 add     esp, 4
.text:00000379                 cmp     ebp, esp
.text:0000037B                 call    __RTC_CheckEsp
.text:00000380                 mov     esp, ebp
.text:00000382                 pop     ebp
.text:00000383                 retn
.text:00000383 _raw_receive    endp
.text:00000383
.text:00000383 ; ---------------------------------------------------------------------------
.text:00000384                 db 8 dup(0CCh)
.text:0000038C
.text:0000038C ; =============== S U B R O U T I N E =======================================
.text:0000038C
.text:0000038C ; Attributes: bp-based frame
.text:0000038C
.text:0000038C _c_write        proc near               ; CODE XREF: _raw_receive+1Dp
.text:0000038C
.text:0000038C var_4           = dword ptr -4
.text:0000038C arg_0           = dword ptr  8
.text:0000038C arg_4           = dword ptr  0Ch
.text:0000038C arg_8           = dword ptr  10h
.text:0000038C
.text:0000038C                 push    ebp
.text:0000038D                 mov     ebp, esp
.text:0000038F                 push    ecx
.text:00000390                 push    esi
.text:00000391                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000398                 mov     eax, [ebp+arg_8]
.text:0000039B                 push    eax
.text:0000039C                 mov     ecx, [ebp+arg_4]
.text:0000039F                 push    ecx
.text:000003A0                 push    0
.text:000003A2                 mov     edx, [ebp+arg_0]
.text:000003A5                 mov     eax, [edx+10h]
.text:000003A8                 push    eax
.text:000003A9                 call    _from_backend
.text:000003AE                 add     esp, 10h
.text:000003B1                 mov     [ebp+var_4], eax
.text:000003B4                 xor     ecx, ecx
.text:000003B6                 cmp     [ebp+var_4], 1000h
.text:000003BD                 setnle  cl
.text:000003C0                 mov     esi, esp
.text:000003C2                 push    ecx
.text:000003C3                 mov     edx, [ebp+arg_0]
.text:000003C6                 mov     eax, [edx+4]
.text:000003C9                 push    eax
.text:000003CA                 mov     ecx, [ebp+arg_0]
.text:000003CD                 mov     edx, [ecx+4]
.text:000003D0                 mov     eax, [edx]
.text:000003D2                 mov     ecx, [eax+18h]
.text:000003D5                 call    ecx
.text:000003D7                 add     esp, 8
.text:000003DA                 cmp     esi, esp
.text:000003DC                 call    __RTC_CheckEsp
.text:000003E1                 pop     esi
.text:000003E2                 add     esp, 4
.text:000003E5                 cmp     ebp, esp
.text:000003E7                 call    __RTC_CheckEsp
.text:000003EC                 mov     esp, ebp
.text:000003EE                 pop     ebp
.text:000003EF                 retn
.text:000003EF _c_write        endp
.text:000003EF
.text:000003EF ; ---------------------------------------------------------------------------
.text:000003F0                 db 0Ch dup(0CCh)
.text:000003FC
.text:000003FC ; =============== S U B R O U T I N E =======================================
.text:000003FC
.text:000003FC ; Attributes: bp-based frame
.text:000003FC
.text:000003FC _raw_sent       proc near               ; DATA XREF: .rdata:000000C0o
.text:000003FC
.text:000003FC var_4           = dword ptr -4
.text:000003FC arg_0           = dword ptr  8
.text:000003FC arg_4           = dword ptr  0Ch
.text:000003FC
.text:000003FC                 push    ebp
.text:000003FD                 mov     ebp, esp
.text:000003FF                 push    ecx
.text:00000400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000407                 mov     eax, [ebp+arg_0]
.text:0000040A                 mov     [ebp+var_4], eax
.text:0000040D                 mov     ecx, [ebp+var_4]
.text:00000410                 mov     edx, [ebp+arg_4]
.text:00000413                 mov     [ecx+0Ch], edx
.text:00000416                 mov     esp, ebp
.text:00000418                 pop     ebp
.text:00000419                 retn
.text:00000419 _raw_sent       endp
.text:00000419
.text:00000419 ; ---------------------------------------------------------------------------
.text:0000041A                 align 4
.text:0000041C
.text:0000041C ; =============== S U B R O U T I N E =======================================
.text:0000041C
.text:0000041C ; Attributes: bp-based frame
.text:0000041C
.text:0000041C _raw_init       proc near               ; DATA XREF: .data:_raw_backendo
.text:0000041C
.text:0000041C var_24          = dword ptr -24h
.text:0000041C var_20          = dword ptr -20h
.text:0000041C var_1C          = dword ptr -1Ch
.text:0000041C var_18          = dword ptr -18h
.text:0000041C var_14          = dword ptr -14h
.text:0000041C var_10          = dword ptr -10h
.text:0000041C var_C           = dword ptr -0Ch
.text:0000041C var_8           = dword ptr -8
.text:0000041C var_4           = dword ptr -4
.text:0000041C arg_0           = dword ptr  8
.text:0000041C arg_4           = dword ptr  0Ch
.text:0000041C arg_8           = dword ptr  10h
.text:0000041C arg_C           = dword ptr  14h
.text:0000041C arg_10          = dword ptr  18h
.text:0000041C arg_14          = dword ptr  1Ch
.text:0000041C arg_18          = dword ptr  20h
.text:0000041C arg_1C          = dword ptr  24h
.text:0000041C
.text:0000041C                 push    ebp
.text:0000041D                 mov     ebp, esp
.text:0000041F                 sub     esp, 24h
.text:00000422                 push    esi
.text:00000423                 mov     eax, 0CCCCCCCCh
.text:00000428                 mov     [ebp+var_24], eax
.text:0000042B                 mov     [ebp+var_20], eax
.text:0000042E                 mov     [ebp+var_1C], eax
.text:00000431                 mov     [ebp+var_18], eax
.text:00000434                 mov     [ebp+var_14], eax
.text:00000437                 mov     [ebp+var_10], eax
.text:0000043A                 mov     [ebp+var_C], eax
.text:0000043D                 mov     [ebp+var_8], eax
.text:00000440                 mov     [ebp+var_4], eax
.text:00000443                 push    1Ch
.text:00000445                 push    1
.text:00000447                 call    _safemalloc
.text:0000044C                 add     esp, 8
.text:0000044F                 mov     [ebp+var_C], eax
.text:00000452                 mov     eax, [ebp+var_C]
.text:00000455                 mov     dword ptr [eax], offset ?fn_table@?1??raw_init@@9@9 ; `raw_init'::`2'::fn_table
.text:0000045B                 mov     ecx, [ebp+var_C]
.text:0000045E                 mov     dword ptr [ecx+4], 0
.text:00000465                 mov     edx, [ebp+var_C]
.text:00000468                 mov     dword ptr [edx+8], 0
.text:0000046F                 mov     eax, [ebp+arg_4]
.text:00000472                 mov     ecx, [ebp+var_C]
.text:00000475                 mov     [eax], ecx
.text:00000477                 mov     edx, [ebp+var_C]
.text:0000047A                 mov     dword ptr [edx+18h], 0
.text:00000481                 mov     eax, [ebp+var_C]
.text:00000484                 mov     dword ptr [eax+14h], 0
.text:0000048B                 mov     ecx, [ebp+var_C]
.text:0000048E                 mov     dword ptr [ecx+0Ch], 0
.text:00000495                 mov     edx, [ebp+var_C]
.text:00000498                 mov     eax, [ebp+arg_0]
.text:0000049B                 mov     [edx+10h], eax
.text:0000049E                 push    3
.text:000004A0                 mov     ecx, [ebp+arg_8]
.text:000004A3                 push    ecx
.text:000004A4                 call    _conf_get_int
.text:000004A9                 add     esp, 8
.text:000004AC                 mov     [ebp+var_10], eax
.text:000004AF                 cmp     [ebp+var_10], 1
.text:000004B3                 jnz     short loc_4BE
.text:000004B5                 mov     [ebp+var_20], offset $SG85660 ; " (IPv4)"
.text:000004BC                 jmp     short loc_4DA
.text:000004BE ; ---------------------------------------------------------------------------
.text:000004BE
.text:000004BE loc_4BE:                                ; CODE XREF: _raw_init+97j
.text:000004BE                 cmp     [ebp+var_10], 2
.text:000004C2                 jnz     short loc_4CD
.text:000004C4                 mov     [ebp+var_24], offset $SG85661 ; " (IPv6)"
.text:000004CB                 jmp     short loc_4D4
.text:000004CD ; ---------------------------------------------------------------------------
.text:000004CD
.text:000004CD loc_4CD:                                ; CODE XREF: _raw_init+A6j
.text:000004CD                 mov     [ebp+var_24], offset $SG85662
.text:000004D4
.text:000004D4 loc_4D4:                                ; CODE XREF: _raw_init+AFj
.text:000004D4                 mov     edx, [ebp+var_24]
.text:000004D7                 mov     [ebp+var_20], edx
.text:000004DA
.text:000004DA loc_4DA:                                ; CODE XREF: _raw_init+A0j
.text:000004DA                 mov     eax, [ebp+var_20]
.text:000004DD                 push    eax
.text:000004DE                 mov     ecx, [ebp+arg_C]
.text:000004E1                 push    ecx
.text:000004E2                 push    offset $SG85663 ; "Looking up host \"%s\"%s"
.text:000004E7                 call    _dupprintf
.text:000004EC                 add     esp, 0Ch
.text:000004EF                 mov     [ebp+var_18], eax
.text:000004F2                 mov     edx, [ebp+var_18]
.text:000004F5                 push    edx
.text:000004F6                 mov     eax, [ebp+var_C]
.text:000004F9                 mov     ecx, [eax+10h]
.text:000004FC                 push    ecx
.text:000004FD                 call    _logevent
.text:00000502                 add     esp, 8
.text:00000505                 mov     edx, [ebp+var_18]
.text:00000508                 push    edx
.text:00000509                 call    _safefree
.text:0000050E                 add     esp, 4
.text:00000511                 mov     eax, [ebp+var_10]
.text:00000514                 push    eax
.text:00000515                 mov     ecx, [ebp+arg_8]
.text:00000518                 push    ecx
.text:00000519                 mov     edx, [ebp+arg_14]
.text:0000051C                 push    edx
.text:0000051D                 mov     eax, [ebp+arg_10]
.text:00000520                 push    eax
.text:00000521                 mov     ecx, [ebp+arg_C]
.text:00000524                 push    ecx
.text:00000525                 call    _name_lookup
.text:0000052A                 add     esp, 14h
.text:0000052D                 mov     [ebp+var_4], eax
.text:00000530                 mov     edx, [ebp+var_4]
.text:00000533                 push    edx
.text:00000534                 call    _sk_addr_error
.text:00000539                 add     esp, 4
.text:0000053C                 mov     [ebp+var_8], eax
.text:0000053F                 cmp     [ebp+var_8], 0
.text:00000543                 jz      short loc_559
.text:00000545                 mov     eax, [ebp+var_4]
.text:00000548                 push    eax
.text:00000549                 call    _sk_addr_free
.text:0000054E                 add     esp, 4
.text:00000551                 mov     eax, [ebp+var_8]
.text:00000554                 jmp     loc_628
.text:00000559 ; ---------------------------------------------------------------------------
.text:00000559
.text:00000559 loc_559:                                ; CODE XREF: _raw_init+127j
.text:00000559                 cmp     [ebp+arg_10], 0
.text:0000055D                 jge     short loc_566
.text:0000055F                 mov     [ebp+arg_10], 17h
.text:00000566
.text:00000566 loc_566:                                ; CODE XREF: _raw_init+141j
.text:00000566                 mov     ecx, [ebp+arg_8]
.text:00000569                 push    ecx
.text:0000056A                 mov     edx, [ebp+var_C]
.text:0000056D                 push    edx
.text:0000056E                 mov     eax, [ebp+arg_1C]
.text:00000571                 push    eax
.text:00000572                 mov     ecx, [ebp+arg_18]
.text:00000575                 push    ecx
.text:00000576                 push    1
.text:00000578                 push    0
.text:0000057A                 mov     edx, [ebp+arg_10]
.text:0000057D                 push    edx
.text:0000057E                 mov     eax, [ebp+arg_14]
.text:00000581                 mov     ecx, [eax]
.text:00000583                 push    ecx
.text:00000584                 mov     edx, [ebp+var_4]
.text:00000587                 push    edx
.text:00000588                 call    _new_connection
.text:0000058D                 add     esp, 24h
.text:00000590                 mov     ecx, [ebp+var_C]
.text:00000593                 mov     [ecx+4], eax
.text:00000596                 mov     esi, esp
.text:00000598                 mov     edx, [ebp+var_C]
.text:0000059B                 mov     eax, [edx+4]
.text:0000059E                 push    eax
.text:0000059F                 mov     ecx, [ebp+var_C]
.text:000005A2                 mov     edx, [ecx+4]
.text:000005A5                 mov     eax, [edx]
.text:000005A7                 mov     ecx, [eax+1Ch]
.text:000005AA                 call    ecx
.text:000005AC                 add     esp, 4
.text:000005AF                 cmp     esi, esp
.text:000005B1                 call    __RTC_CheckEsp
.text:000005B6                 mov     [ebp+var_8], eax
.text:000005B9                 cmp     [ebp+var_8], 0
.text:000005BD                 jz      short loc_5C4
.text:000005BF                 mov     eax, [ebp+var_8]
.text:000005C2                 jmp     short loc_628
.text:000005C4 ; ---------------------------------------------------------------------------
.text:000005C4
.text:000005C4 loc_5C4:                                ; CODE XREF: _raw_init+1A1j
.text:000005C4                 push    9
.text:000005C6                 mov     edx, [ebp+arg_8]
.text:000005C9                 push    edx
.text:000005CA                 call    _conf_get_str
.text:000005CF                 add     esp, 8
.text:000005D2                 mov     [ebp+var_14], eax
.text:000005D5                 mov     eax, [ebp+var_14]
.text:000005D8                 movsx   ecx, byte ptr [eax]
.text:000005DB                 test    ecx, ecx
.text:000005DD                 jz      short loc_626
.text:000005DF                 mov     edx, [ebp+arg_14]
.text:000005E2                 mov     eax, [edx]
.text:000005E4                 push    eax
.text:000005E5                 call    _safefree
.text:000005EA                 add     esp, 4
.text:000005ED                 mov     ecx, [ebp+var_14]
.text:000005F0                 push    ecx
.text:000005F1                 call    _dupstr
.text:000005F6                 add     esp, 4
.text:000005F9                 mov     edx, [ebp+arg_14]
.text:000005FC                 mov     [edx], eax
.text:000005FE                 push    3Ah ; ':'
.text:00000600                 mov     eax, [ebp+arg_14]
.text:00000603                 mov     ecx, [eax]
.text:00000605                 push    ecx
.text:00000606                 call    _host_strrchr
.text:0000060B                 add     esp, 8
.text:0000060E                 mov     [ebp+var_1C], eax
.text:00000611                 cmp     [ebp+var_1C], 0
.text:00000615                 jz      short loc_626
.text:00000617                 mov     edx, [ebp+var_1C]
.text:0000061A                 mov     byte ptr [edx], 0
.text:0000061D                 mov     eax, [ebp+var_1C]
.text:00000620                 add     eax, 1
.text:00000623                 mov     [ebp+var_1C], eax
.text:00000626
.text:00000626 loc_626:                                ; CODE XREF: _raw_init+1C1j
.text:00000626                                         ; _raw_init+1F9j
.text:00000626                 xor     eax, eax
.text:00000628
.text:00000628 loc_628:                                ; CODE XREF: _raw_init+138j
.text:00000628                                         ; _raw_init+1A6j
.text:00000628                 pop     esi
.text:00000629                 add     esp, 24h
.text:0000062C                 cmp     ebp, esp
.text:0000062E                 call    __RTC_CheckEsp
.text:00000633                 mov     esp, ebp
.text:00000635                 pop     ebp
.text:00000636                 retn
.text:00000636 _raw_init       endp
.text:00000636
.text:00000636 ; ---------------------------------------------------------------------------
.text:00000637                 db 5 dup(0CCh)
.text:0000063C
.text:0000063C ; =============== S U B R O U T I N E =======================================
.text:0000063C
.text:0000063C ; Attributes: bp-based frame
.text:0000063C
.text:0000063C _raw_free       proc near               ; DATA XREF: .data:0000006Co
.text:0000063C
.text:0000063C var_4           = dword ptr -4
.text:0000063C arg_0           = dword ptr  8
.text:0000063C
.text:0000063C                 push    ebp
.text:0000063D                 mov     ebp, esp
.text:0000063F                 push    ecx
.text:00000640                 push    esi
.text:00000641                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000648                 mov     eax, [ebp+arg_0]
.text:0000064B                 mov     [ebp+var_4], eax
.text:0000064E                 mov     ecx, [ebp+var_4]
.text:00000651                 cmp     dword ptr [ecx+4], 0
.text:00000655                 jz      short loc_677
.text:00000657                 mov     esi, esp
.text:00000659                 mov     edx, [ebp+var_4]
.text:0000065C                 mov     eax, [edx+4]
.text:0000065F                 push    eax
.text:00000660                 mov     ecx, [ebp+var_4]
.text:00000663                 mov     edx, [ecx+4]
.text:00000666                 mov     eax, [edx]
.text:00000668                 mov     ecx, [eax+4]
.text:0000066B                 call    ecx
.text:0000066D                 add     esp, 4
.text:00000670                 cmp     esi, esp
.text:00000672                 call    __RTC_CheckEsp
.text:00000677
.text:00000677 loc_677:                                ; CODE XREF: _raw_free+19j
.text:00000677                 mov     edx, [ebp+var_4]
.text:0000067A                 push    edx
.text:0000067B                 call    _safefree
.text:00000680                 add     esp, 4
.text:00000683                 pop     esi
.text:00000684                 add     esp, 4
.text:00000687                 cmp     ebp, esp
.text:00000689                 call    __RTC_CheckEsp
.text:0000068E                 mov     esp, ebp
.text:00000690                 pop     ebp
.text:00000691                 retn
.text:00000691 _raw_free       endp
.text:00000691
.text:00000691 ; ---------------------------------------------------------------------------
.text:00000692                 db 0Ah dup(0CCh)
.text:0000069C
.text:0000069C ; =============== S U B R O U T I N E =======================================
.text:0000069C
.text:0000069C ; Attributes: bp-based frame
.text:0000069C
.text:0000069C _raw_reconfig   proc near               ; DATA XREF: .data:00000070o
.text:0000069C                 push    ebp
.text:0000069D                 mov     ebp, esp
.text:0000069F                 pop     ebp
.text:000006A0                 retn
.text:000006A0 _raw_reconfig   endp
.text:000006A0
.text:000006A0 ; ---------------------------------------------------------------------------
.text:000006A1                 db 0Bh dup(0CCh)
.text:000006AC
.text:000006AC ; =============== S U B R O U T I N E =======================================
.text:000006AC
.text:000006AC ; Attributes: bp-based frame
.text:000006AC
.text:000006AC _raw_send       proc near               ; DATA XREF: .data:00000074o
.text:000006AC
.text:000006AC var_4           = dword ptr -4
.text:000006AC arg_0           = dword ptr  8
.text:000006AC arg_4           = dword ptr  0Ch
.text:000006AC arg_8           = dword ptr  10h
.text:000006AC
.text:000006AC                 push    ebp
.text:000006AD                 mov     ebp, esp
.text:000006AF                 push    ecx
.text:000006B0                 push    esi
.text:000006B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006B8                 mov     eax, [ebp+arg_0]
.text:000006BB                 mov     [ebp+var_4], eax
.text:000006BE                 mov     ecx, [ebp+var_4]
.text:000006C1                 cmp     dword ptr [ecx+4], 0
.text:000006C5                 jnz     short loc_6CB
.text:000006C7                 xor     eax, eax
.text:000006C9                 jmp     short loc_6FF
.text:000006CB ; ---------------------------------------------------------------------------
.text:000006CB
.text:000006CB loc_6CB:                                ; CODE XREF: _raw_send+19j
.text:000006CB                 mov     esi, esp
.text:000006CD                 mov     edx, [ebp+arg_8]
.text:000006D0                 push    edx
.text:000006D1                 mov     eax, [ebp+arg_4]
.text:000006D4                 push    eax
.text:000006D5                 mov     ecx, [ebp+var_4]
.text:000006D8                 mov     edx, [ecx+4]
.text:000006DB                 push    edx
.text:000006DC                 mov     eax, [ebp+var_4]
.text:000006DF                 mov     ecx, [eax+4]
.text:000006E2                 mov     edx, [ecx]
.text:000006E4                 mov     eax, [edx+8]
.text:000006E7                 call    eax
.text:000006E9                 add     esp, 0Ch
.text:000006EC                 cmp     esi, esp
.text:000006EE                 call    __RTC_CheckEsp
.text:000006F3                 mov     ecx, [ebp+var_4]
.text:000006F6                 mov     [ecx+0Ch], eax
.text:000006F9                 mov     edx, [ebp+var_4]
.text:000006FC                 mov     eax, [edx+0Ch]
.text:000006FF
.text:000006FF loc_6FF:                                ; CODE XREF: _raw_send+1Dj
.text:000006FF                 pop     esi
.text:00000700                 add     esp, 4
.text:00000703                 cmp     ebp, esp
.text:00000705                 call    __RTC_CheckEsp
.text:0000070A                 mov     esp, ebp
.text:0000070C                 pop     ebp
.text:0000070D                 retn
.text:0000070D _raw_send       endp
.text:0000070D
.text:0000070D ; ---------------------------------------------------------------------------
.text:0000070E                 db 0Eh dup(0CCh)
.text:0000071C
.text:0000071C ; =============== S U B R O U T I N E =======================================
.text:0000071C
.text:0000071C ; Attributes: bp-based frame
.text:0000071C
.text:0000071C _raw_sendbuffer proc near               ; DATA XREF: .data:00000078o
.text:0000071C
.text:0000071C var_4           = dword ptr -4
.text:0000071C arg_0           = dword ptr  8
.text:0000071C
.text:0000071C                 push    ebp
.text:0000071D                 mov     ebp, esp
.text:0000071F                 push    ecx
.text:00000720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000727                 mov     eax, [ebp+arg_0]
.text:0000072A                 mov     [ebp+var_4], eax
.text:0000072D                 mov     ecx, [ebp+var_4]
.text:00000730                 mov     eax, [ecx+0Ch]
.text:00000733                 mov     esp, ebp
.text:00000735                 pop     ebp
.text:00000736                 retn
.text:00000736 _raw_sendbuffer endp
.text:00000736
.text:00000736 ; ---------------------------------------------------------------------------
.text:00000737                 db 5 dup(0CCh)
.text:0000073C
.text:0000073C ; =============== S U B R O U T I N E =======================================
.text:0000073C
.text:0000073C ; Attributes: bp-based frame
.text:0000073C
.text:0000073C _raw_size       proc near               ; DATA XREF: .data:0000007Co
.text:0000073C                 push    ebp
.text:0000073D                 mov     ebp, esp
.text:0000073F                 pop     ebp
.text:00000740                 retn
.text:00000740 _raw_size       endp
.text:00000740
.text:00000740 ; ---------------------------------------------------------------------------
.text:00000741                 db 0Bh dup(0CCh)
.text:0000074C
.text:0000074C ; =============== S U B R O U T I N E =======================================
.text:0000074C
.text:0000074C ; Attributes: bp-based frame
.text:0000074C
.text:0000074C _raw_special    proc near               ; DATA XREF: .data:00000080o
.text:0000074C
.text:0000074C var_4           = dword ptr -4
.text:0000074C arg_0           = dword ptr  8
.text:0000074C arg_4           = dword ptr  0Ch
.text:0000074C
.text:0000074C                 push    ebp
.text:0000074D                 mov     ebp, esp
.text:0000074F                 push    ecx
.text:00000750                 push    esi
.text:00000751                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000758                 mov     eax, [ebp+arg_0]
.text:0000075B                 mov     [ebp+var_4], eax
.text:0000075E                 cmp     [ebp+arg_4], 0Ch
.text:00000762                 jnz     short loc_7A3
.text:00000764                 mov     ecx, [ebp+var_4]
.text:00000767                 cmp     dword ptr [ecx+4], 0
.text:0000076B                 jz      short loc_7A3
.text:0000076D                 mov     esi, esp
.text:0000076F                 mov     edx, [ebp+var_4]
.text:00000772                 mov     eax, [edx+4]
.text:00000775                 push    eax
.text:00000776                 mov     ecx, [ebp+var_4]
.text:00000779                 mov     edx, [ecx+4]
.text:0000077C                 mov     eax, [edx]
.text:0000077E                 mov     ecx, [eax+10h]
.text:00000781                 call    ecx
.text:00000783                 add     esp, 4
.text:00000786                 cmp     esi, esp
.text:00000788                 call    __RTC_CheckEsp
.text:0000078D                 mov     edx, [ebp+var_4]
.text:00000790                 mov     dword ptr [edx+18h], 1
.text:00000797                 mov     eax, [ebp+var_4]
.text:0000079A                 push    eax
.text:0000079B                 call    _raw_check_close
.text:000007A0                 add     esp, 4
.text:000007A3
.text:000007A3 loc_7A3:                                ; CODE XREF: _raw_special+16j
.text:000007A3                                         ; _raw_special+1Fj
.text:000007A3                 pop     esi
.text:000007A4                 add     esp, 4
.text:000007A7                 cmp     ebp, esp
.text:000007A9                 call    __RTC_CheckEsp
.text:000007AE                 mov     esp, ebp
.text:000007B0                 pop     ebp
.text:000007B1                 retn
.text:000007B1 _raw_special    endp
.text:000007B1
.text:000007B1 ; ---------------------------------------------------------------------------
.text:000007B2                 db 0Ah dup(0CCh)
.text:000007BC
.text:000007BC ; =============== S U B R O U T I N E =======================================
.text:000007BC
.text:000007BC ; Attributes: bp-based frame
.text:000007BC
.text:000007BC _raw_get_specials proc near             ; DATA XREF: .data:00000084o
.text:000007BC                 push    ebp
.text:000007BD                 mov     ebp, esp
.text:000007BF                 xor     eax, eax
.text:000007C1                 pop     ebp
.text:000007C2                 retn
.text:000007C2 _raw_get_specials endp
.text:000007C2
.text:000007C2 ; ---------------------------------------------------------------------------
.text:000007C3                 db 9 dup(0CCh)
.text:000007CC
.text:000007CC ; =============== S U B R O U T I N E =======================================
.text:000007CC
.text:000007CC ; Attributes: bp-based frame
.text:000007CC
.text:000007CC _raw_connected  proc near               ; DATA XREF: .data:00000088o
.text:000007CC
.text:000007CC var_4           = dword ptr -4
.text:000007CC arg_0           = dword ptr  8
.text:000007CC
.text:000007CC                 push    ebp
.text:000007CD                 mov     ebp, esp
.text:000007CF                 push    ecx
.text:000007D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007D7                 mov     eax, [ebp+arg_0]
.text:000007DA                 mov     [ebp+var_4], eax
.text:000007DD                 mov     ecx, [ebp+var_4]
.text:000007E0                 xor     eax, eax
.text:000007E2                 cmp     dword ptr [ecx+4], 0
.text:000007E6                 setnz   al
.text:000007E9                 mov     esp, ebp
.text:000007EB                 pop     ebp
.text:000007EC                 retn
.text:000007EC _raw_connected  endp
.text:000007EC
.text:000007EC ; ---------------------------------------------------------------------------
.text:000007ED                 db 0Fh dup(0CCh)
.text:000007FC
.text:000007FC ; =============== S U B R O U T I N E =======================================
.text:000007FC
.text:000007FC ; Attributes: bp-based frame
.text:000007FC
.text:000007FC _raw_sendok     proc near               ; DATA XREF: .data:00000090o
.text:000007FC                 push    ebp
.text:000007FD                 mov     ebp, esp
.text:000007FF                 mov     eax, 1
.text:00000804                 pop     ebp
.text:00000805                 retn
.text:00000805 _raw_sendok     endp
.text:00000805
.text:00000805 ; ---------------------------------------------------------------------------
.text:00000806                 db 6 dup(0CCh)
.text:0000080C
.text:0000080C ; =============== S U B R O U T I N E =======================================
.text:0000080C
.text:0000080C ; Attributes: bp-based frame
.text:0000080C
.text:0000080C _raw_unthrottle proc near               ; DATA XREF: .data:000000A0o
.text:0000080C
.text:0000080C var_4           = dword ptr -4
.text:0000080C arg_0           = dword ptr  8
.text:0000080C arg_4           = dword ptr  0Ch
.text:0000080C
.text:0000080C                 push    ebp
.text:0000080D                 mov     ebp, esp
.text:0000080F                 push    ecx
.text:00000810                 push    esi
.text:00000811                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000818                 mov     eax, [ebp+arg_0]
.text:0000081B                 mov     [ebp+var_4], eax
.text:0000081E                 xor     ecx, ecx
.text:00000820                 cmp     [ebp+arg_4], 1000h
.text:00000827                 setnle  cl
.text:0000082A                 mov     esi, esp
.text:0000082C                 push    ecx
.text:0000082D                 mov     edx, [ebp+var_4]
.text:00000830                 mov     eax, [edx+4]
.text:00000833                 push    eax
.text:00000834                 mov     ecx, [ebp+var_4]
.text:00000837                 mov     edx, [ecx+4]
.text:0000083A                 mov     eax, [edx]
.text:0000083C                 mov     ecx, [eax+18h]
.text:0000083F                 call    ecx
.text:00000841                 add     esp, 8
.text:00000844                 cmp     esi, esp
.text:00000846                 call    __RTC_CheckEsp
.text:0000084B                 pop     esi
.text:0000084C                 add     esp, 4
.text:0000084F                 cmp     ebp, esp
.text:00000851                 call    __RTC_CheckEsp
.text:00000856                 mov     esp, ebp
.text:00000858                 pop     ebp
.text:00000859                 retn
.text:00000859 _raw_unthrottle endp
.text:00000859
.text:00000859 ; ---------------------------------------------------------------------------
.text:0000085A                 align 4
.text:0000085C
.text:0000085C ; =============== S U B R O U T I N E =======================================
.text:0000085C
.text:0000085C ; Attributes: bp-based frame
.text:0000085C
.text:0000085C _raw_ldisc      proc near               ; DATA XREF: .data:00000094o
.text:0000085C
.text:0000085C arg_4           = dword ptr  0Ch
.text:0000085C
.text:0000085C                 push    ebp
.text:0000085D                 mov     ebp, esp
.text:0000085F                 cmp     [ebp+arg_4], 0
.text:00000863                 jz      short loc_86B
.text:00000865                 cmp     [ebp+arg_4], 1
.text:00000869                 jnz     short loc_872
.text:0000086B
.text:0000086B loc_86B:                                ; CODE XREF: _raw_ldisc+7j
.text:0000086B                 mov     eax, 1
.text:00000870                 jmp     short loc_874
.text:00000872 ; ---------------------------------------------------------------------------
.text:00000872
.text:00000872 loc_872:                                ; CODE XREF: _raw_ldisc+Dj
.text:00000872                 xor     eax, eax
.text:00000874
.text:00000874 loc_874:                                ; CODE XREF: _raw_ldisc+14j
.text:00000874                 pop     ebp
.text:00000875                 retn
.text:00000875 _raw_ldisc      endp
.text:00000875
.text:00000875 ; ---------------------------------------------------------------------------
.text:00000876                 db 6 dup(0CCh)
.text:0000087C
.text:0000087C ; =============== S U B R O U T I N E =======================================
.text:0000087C
.text:0000087C ; Attributes: bp-based frame
.text:0000087C
.text:0000087C _raw_provide_ldisc proc near            ; DATA XREF: .data:00000098o
.text:0000087C                 push    ebp
.text:0000087D                 mov     ebp, esp
.text:0000087F                 pop     ebp
.text:00000880                 retn
.text:00000880 _raw_provide_ldisc endp
.text:00000880
.text:00000880 ; ---------------------------------------------------------------------------
.text:00000881                 db 0Bh dup(0CCh)
.text:0000088C
.text:0000088C ; =============== S U B R O U T I N E =======================================
.text:0000088C
.text:0000088C ; Attributes: bp-based frame
.text:0000088C
.text:0000088C _raw_provide_logctx proc near           ; DATA XREF: .data:0000009Co
.text:0000088C                 push    ebp
.text:0000088D                 mov     ebp, esp
.text:0000088F                 pop     ebp
.text:00000890                 retn
.text:00000890 _raw_provide_logctx endp
.text:00000890
.text:00000890 ; ---------------------------------------------------------------------------
.text:00000891                 db 0Bh dup(0CCh)
.text:0000089C
.text:0000089C ; =============== S U B R O U T I N E =======================================
.text:0000089C
.text:0000089C ; Attributes: bp-based frame
.text:0000089C
.text:0000089C _raw_exitcode   proc near               ; DATA XREF: .data:0000008Co
.text:0000089C
.text:0000089C var_4           = dword ptr -4
.text:0000089C arg_0           = dword ptr  8
.text:0000089C
.text:0000089C                 push    ebp
.text:0000089D                 mov     ebp, esp
.text:0000089F                 push    ecx
.text:000008A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008A7                 mov     eax, [ebp+arg_0]
.text:000008AA                 mov     [ebp+var_4], eax
.text:000008AD                 mov     ecx, [ebp+var_4]
.text:000008B0                 cmp     dword ptr [ecx+4], 0
.text:000008B4                 jz      short loc_8BD
.text:000008B6                 or      eax, 0FFFFFFFFh
.text:000008B9                 jmp     short loc_8D1
.text:000008BB ; ---------------------------------------------------------------------------
.text:000008BB                 jmp     short loc_8D1
.text:000008BD ; ---------------------------------------------------------------------------
.text:000008BD
.text:000008BD loc_8BD:                                ; CODE XREF: _raw_exitcode+18j
.text:000008BD                 mov     edx, [ebp+var_4]
.text:000008C0                 cmp     dword ptr [edx+8], 0
.text:000008C4                 jz      short loc_8CF
.text:000008C6                 mov     eax, 7FFFFFFFh
.text:000008CB                 jmp     short loc_8D1
.text:000008CD ; ---------------------------------------------------------------------------
.text:000008CD                 jmp     short loc_8D1
.text:000008CF ; ---------------------------------------------------------------------------
.text:000008CF
.text:000008CF loc_8CF:                                ; CODE XREF: _raw_exitcode+28j
.text:000008CF                 xor     eax, eax
.text:000008D1
.text:000008D1 loc_8D1:                                ; CODE XREF: _raw_exitcode+1Dj
.text:000008D1                                         ; _raw_exitcode+1Fj ...
.text:000008D1                 mov     esp, ebp
.text:000008D3                 pop     ebp
.text:000008D4                 retn
.text:000008D4 _raw_exitcode   endp
.text:000008D4
.text:000008D4 ; ---------------------------------------------------------------------------
.text:000008D5                 db 7 dup(0CCh)
.text:000008DC
.text:000008DC ; =============== S U B R O U T I N E =======================================
.text:000008DC
.text:000008DC ; Attributes: bp-based frame
.text:000008DC
.text:000008DC _raw_cfg_info   proc near               ; DATA XREF: .data:000000A4o
.text:000008DC                 push    ebp
.text:000008DD                 mov     ebp, esp
.text:000008DF                 xor     eax, eax
.text:000008E1                 pop     ebp
.text:000008E2                 retn
.text:000008E2 _raw_cfg_info   endp
.text:000008E2
.text:000008E2 ; ---------------------------------------------------------------------------
.text:000008E3                 align 4
.text:000008E3 _text           ends
.text:000008E3
.rtc$TMZ:000008E4 ; ===========================================================================
.rtc$TMZ:000008E4
.rtc$TMZ:000008E4 ; Segment type: Pure data
.rtc$TMZ:000008E4 ; Segment permissions: Read
.rtc$TMZ:000008E4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000008E4                 assume cs:_rtc$TMZ
.rtc$TMZ:000008E4                 ;org 8E4h
.rtc$TMZ:000008E4 ; COMDAT (pick any)
.rtc$TMZ:000008E4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000008E4 _rtc$TMZ        ends
.rtc$TMZ:000008E4
.rtc$IMZ:000008E8 ; ===========================================================================
.rtc$IMZ:000008E8
.rtc$IMZ:000008E8 ; Segment type: Pure data
.rtc$IMZ:000008E8 ; Segment permissions: Read
.rtc$IMZ:000008E8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000008E8                 assume cs:_rtc$IMZ
.rtc$IMZ:000008E8                 ;org 8E8h
.rtc$IMZ:000008E8 ; COMDAT (pick any)
.rtc$IMZ:000008E8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000008E8 _rtc$IMZ        ends
.rtc$IMZ:000008E8
UNDEF:000008F0 ; ===========================================================================
UNDEF:000008F0
UNDEF:000008F0 ; Segment type: Externs
UNDEF:000008F0 ; UNDEF
UNDEF:000008F0                 extrn _safefree:near    ; CODE XREF: _raw_log+A5p
UNDEF:000008F0                                         ; _raw_init+EDp ...
UNDEF:000008F4                 extrn _logevent:near    ; CODE XREF: _raw_log+96p
UNDEF:000008F4                                         ; _raw_closing+6Fp ...
UNDEF:000008F8                 extrn _dupprintf:near   ; CODE XREF: _raw_log+5Ap
UNDEF:000008F8                                         ; _raw_log+7Ap ...
UNDEF:000008FC                 extrn _sk_getaddr:near  ; CODE XREF: _raw_log+3Cp
UNDEF:00000900                 extrn ___security_cookie:near ; DATA XREF: _raw_log+1Cr
UNDEF:00000904                 extrn __RTC_CheckEsp:near ; CODE XREF: _raw_log+D1p
UNDEF:00000904                                         ; _raw_closing+3Cp ...
UNDEF:00000908 ; __fastcall __security_check_cookie(x)
UNDEF:00000908                 extrn @__security_check_cookie@4:near
UNDEF:00000908                                         ; CODE XREF: _raw_log+C4p
UNDEF:0000090C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000090C                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _raw_log+B7p
UNDEF:00000910                 extrn __RTC_Shutdown:near
UNDEF:00000910                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000914                 extrn __RTC_InitBase:near
UNDEF:00000914                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000918                 extrn _from_backend_eof:near ; CODE XREF: _raw_closing+A1p
UNDEF:0000091C                 extrn _connection_fatal:near ; CODE XREF: _raw_closing+87p
UNDEF:00000920                 extrn _notify_remote_exit:near ; CODE XREF: _raw_closing+5Cp
UNDEF:00000920                                         ; _raw_check_close+50p
UNDEF:00000924                 extrn _from_backend:near ; CODE XREF: _c_write+1Dp
UNDEF:00000928                 extrn _host_strrchr:near ; CODE XREF: _raw_init+1EAp
UNDEF:0000092C                 extrn _dupstr:near      ; CODE XREF: _raw_init+1D5p
UNDEF:00000930                 extrn _conf_get_str:near ; CODE XREF: _raw_init+1AEp
UNDEF:00000934                 extrn _new_connection:near ; CODE XREF: _raw_init+16Cp
UNDEF:00000938                 extrn _sk_addr_free:near ; CODE XREF: _raw_init+12Dp
UNDEF:0000093C                 extrn _sk_addr_error:near ; CODE XREF: _raw_init+118p
UNDEF:00000940                 extrn _name_lookup:near ; CODE XREF: _raw_init+109p
UNDEF:00000944                 extrn _conf_get_int:near ; CODE XREF: _raw_init+88p
UNDEF:00000948                 extrn _safemalloc:near  ; CODE XREF: _raw_init+2Bp
UNDEF:00000948
UNDEF:00000948
UNDEF:00000948                 end