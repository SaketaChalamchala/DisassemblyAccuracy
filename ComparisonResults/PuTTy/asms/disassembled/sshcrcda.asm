.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : DF5A80CFE0087E1B2A56F1BF66E74D4D
.data:00000000 ; Input CRC32 : B061CF7B
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshcrcda.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000                 public _ONE
.data:00000000 _ONE            db    1                 ; DATA XREF: _check_crc+3Ao
.data:00000000                                         ; _check_crc+8Eo
.data:00000001                 db    0
.data:00000002                 db    0
.data:00000003                 db    0
.data:00000004 $SG5977:                                ; DATA XREF: _detect_attack+3Eo
.data:00000004                 unicode 0, <..\..\..\sshcrcda.c>,0
.data:0000002C                 align 10h
.data:00000030 $SG5978:                                ; DATA XREF: _detect_attack+43o
.data:00000030                 unicode 0, <!(len >
.data:00000030                 dw 3Eh
.data:00000030                 unicode 0, < (SSH_MAXBLOCKS * SSH_BLOCKSIZE) || len % SSH_BLOCKSIZE !>
.data:00000030                 unicode 0, <= 0)>,0
.data:000000BA                 align 4
.data:000000BA _data           ends
.data:000000BA
.bss:000000BC ; ===========================================================================
.bss:000000BC
.bss:000000BC ; Segment type: Uninitialized
.bss:000000BC ; Segment permissions: Read/Write
.bss:000000BC _bss            segment dword public 'BSS' use32
.bss:000000BC                 assume cs:_bss
.bss:000000BC                 ;org 0BCh
.bss:000000BC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000BC                 public _ZERO
.bss:000000BC _ZERO           db    ? ;               ; DATA XREF: _check_crc+4Bo
.bss:000000BC                                         ; _check_crc+9Fo ...
.bss:000000BD                 db    ? ;
.bss:000000BE                 db    ? ;
.bss:000000BF                 db    ? ;
.bss:000000BF _bss            ends
.bss:000000BF
.text:000000C0 ; ===========================================================================
.text:000000C0
.text:000000C0 ; Segment type: Pure code
.text:000000C0 ; Segment permissions: Read/Execute
.text:000000C0 _text           segment para public 'CODE' use32
.text:000000C0                 assume cs:_text
.text:000000C0                 ;org 0C0h
.text:000000C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0                 public _crcda_make_context
.text:000000C0 _crcda_make_context proc near
.text:000000C0
.text:000000C0 var_4           = dword ptr -4
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    ecx
.text:000000C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000CB                 push    8
.text:000000CD                 push    1
.text:000000CF                 call    _safemalloc
.text:000000D4                 add     esp, 8
.text:000000D7                 mov     [ebp+var_4], eax
.text:000000DA                 mov     eax, [ebp+var_4]
.text:000000DD                 mov     dword ptr [eax], 0
.text:000000E3                 mov     ecx, [ebp+var_4]
.text:000000E6                 mov     dword ptr [ecx+4], 1000h
.text:000000ED                 mov     eax, [ebp+var_4]
.text:000000F0                 add     esp, 4
.text:000000F3                 cmp     ebp, esp
.text:000000F5                 call    __RTC_CheckEsp
.text:000000FA                 mov     esp, ebp
.text:000000FC                 pop     ebp
.text:000000FD                 retn
.text:000000FD _crcda_make_context endp
.text:000000FD
.text:000000FD ; ---------------------------------------------------------------------------
.text:000000FE                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100                 public _crcda_free_context
.text:00000100 _crcda_free_context proc near
.text:00000100
.text:00000100 var_4           = dword ptr -4
.text:00000100 arg_0           = dword ptr  8
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 push    ecx
.text:00000104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000010B                 mov     eax, [ebp+arg_0]
.text:0000010E                 mov     [ebp+var_4], eax
.text:00000111                 cmp     [ebp+var_4], 0
.text:00000115                 jz      short loc_13A
.text:00000117                 mov     ecx, [ebp+var_4]
.text:0000011A                 mov     edx, [ecx]
.text:0000011C                 push    edx
.text:0000011D                 call    _safefree
.text:00000122                 add     esp, 4
.text:00000125                 mov     eax, [ebp+var_4]
.text:00000128                 mov     dword ptr [eax], 0
.text:0000012E                 mov     ecx, [ebp+var_4]
.text:00000131                 push    ecx
.text:00000132                 call    _safefree
.text:00000137                 add     esp, 4
.text:0000013A
.text:0000013A loc_13A:                                ; CODE XREF: _crcda_free_context+15j
.text:0000013A                 add     esp, 4
.text:0000013D                 cmp     ebp, esp
.text:0000013F                 call    __RTC_CheckEsp
.text:00000144                 mov     esp, ebp
.text:00000146                 pop     ebp
.text:00000147                 retn
.text:00000147 _crcda_free_context endp
.text:00000147
.text:00000147 ; ---------------------------------------------------------------------------
.text:00000148                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; int __cdecl detect_attack(int, int, int, void *)
.text:00000150                 public _detect_attack
.text:00000150 _detect_attack  proc near
.text:00000150
.text:00000150 var_18          = dword ptr -18h
.text:00000150 var_14          = dword ptr -14h
.text:00000150 var_10          = dword ptr -10h
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 var_8           = dword ptr -8
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150 arg_4           = dword ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150 arg_C           = dword ptr  14h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 18h
.text:00000156                 mov     eax, 0CCCCCCCCh
.text:0000015B                 mov     [ebp+var_18], eax
.text:0000015E                 mov     [ebp+var_14], eax
.text:00000161                 mov     [ebp+var_10], eax
.text:00000164                 mov     [ebp+var_C], eax
.text:00000167                 mov     [ebp+var_8], eax
.text:0000016A                 mov     [ebp+var_4], eax
.text:0000016D                 mov     eax, [ebp+arg_0]
.text:00000170                 mov     [ebp+var_4], eax
.text:00000173                 cmp     [ebp+arg_8], 40000h
.text:0000017A                 ja      short loc_18C
.text:0000017C                 mov     eax, [ebp+arg_8]
.text:0000017F                 xor     edx, edx
.text:00000181                 mov     ecx, 8
.text:00000186                 div     ecx
.text:00000188                 test    edx, edx
.text:0000018A                 jz      short loc_1A0
.text:0000018C
.text:0000018C loc_18C:                                ; CODE XREF: _detect_attack+2Aj
.text:0000018C                 push    72h ; 'r'
.text:0000018E                 push    offset $SG5977  ; "..\\..\\..\\sshcrcda.c"
.text:00000193                 push    offset $SG5978  ; "!(len > (SSH_MAXBLOCKS * SSH_BLOCKSIZE)"...
.text:00000198                 call    __wassert
.text:0000019D ; ---------------------------------------------------------------------------
.text:0000019D                 add     esp, 0Ch
.text:000001A0
.text:000001A0 loc_1A0:                                ; CODE XREF: _detect_attack+3Aj
.text:000001A0                 mov     eax, [ebp+var_4]
.text:000001A3                 mov     ecx, [eax+4]
.text:000001A6                 mov     [ebp+var_10], ecx
.text:000001A9                 jmp     short loc_1B4
.text:000001AB ; ---------------------------------------------------------------------------
.text:000001AB
.text:000001AB loc_1AB:                                ; CODE XREF: _detect_attack+74j
.text:000001AB                 mov     edx, [ebp+var_10]
.text:000001AE                 shl     edx, 2
.text:000001B1                 mov     [ebp+var_10], edx
.text:000001B4
.text:000001B4 loc_1B4:                                ; CODE XREF: _detect_attack+59j
.text:000001B4                 mov     eax, [ebp+arg_8]
.text:000001B7                 shr     eax, 3
.text:000001BA                 imul    eax, 3
.text:000001BD                 shr     eax, 1
.text:000001BF                 cmp     [ebp+var_10], eax
.text:000001C2                 jnb     short loc_1C6
.text:000001C4                 jmp     short loc_1AB
.text:000001C6 ; ---------------------------------------------------------------------------
.text:000001C6
.text:000001C6 loc_1C6:                                ; CODE XREF: _detect_attack+72j
.text:000001C6                 mov     ecx, [ebp+var_4]
.text:000001C9                 cmp     dword ptr [ecx], 0
.text:000001CC                 jnz     short loc_1EF
.text:000001CE                 mov     edx, [ebp+var_4]
.text:000001D1                 mov     eax, [ebp+var_10]
.text:000001D4                 mov     [edx+4], eax
.text:000001D7                 push    2
.text:000001D9                 mov     ecx, [ebp+var_4]
.text:000001DC                 mov     edx, [ecx+4]
.text:000001DF                 push    edx
.text:000001E0                 call    _safemalloc
.text:000001E5                 add     esp, 8
.text:000001E8                 mov     ecx, [ebp+var_4]
.text:000001EB                 mov     [ecx], eax
.text:000001ED                 jmp     short loc_21F
.text:000001EF ; ---------------------------------------------------------------------------
.text:000001EF
.text:000001EF loc_1EF:                                ; CODE XREF: _detect_attack+7Cj
.text:000001EF                 mov     edx, [ebp+var_4]
.text:000001F2                 mov     eax, [ebp+var_10]
.text:000001F5                 cmp     eax, [edx+4]
.text:000001F8                 jbe     short loc_21F
.text:000001FA                 mov     ecx, [ebp+var_4]
.text:000001FD                 mov     edx, [ebp+var_10]
.text:00000200                 mov     [ecx+4], edx
.text:00000203                 push    2
.text:00000205                 mov     eax, [ebp+var_4]
.text:00000208                 mov     ecx, [eax+4]
.text:0000020B                 push    ecx
.text:0000020C                 mov     edx, [ebp+var_4]
.text:0000020F                 mov     eax, [edx]
.text:00000211                 push    eax
.text:00000212                 call    _saferealloc
.text:00000217                 add     esp, 0Ch
.text:0000021A                 mov     ecx, [ebp+var_4]
.text:0000021D                 mov     [ecx], eax
.text:0000021F
.text:0000021F loc_21F:                                ; CODE XREF: _detect_attack+9Dj
.text:0000021F                                         ; _detect_attack+A8j
.text:0000021F                 cmp     [ebp+arg_8], 38h ; '8'
.text:00000223                 ja      loc_2F6
.text:00000229                 mov     edx, [ebp+arg_4]
.text:0000022C                 mov     [ebp+var_14], edx
.text:0000022F                 jmp     short loc_23A
.text:00000231 ; ---------------------------------------------------------------------------
.text:00000231
.text:00000231 loc_231:                                ; CODE XREF: _detect_attack:loc_2EAj
.text:00000231                 mov     eax, [ebp+var_14]
.text:00000234                 add     eax, 8
.text:00000237                 mov     [ebp+var_14], eax
.text:0000023A
.text:0000023A loc_23A:                                ; CODE XREF: _detect_attack+DFj
.text:0000023A                 mov     ecx, [ebp+arg_4]
.text:0000023D                 add     ecx, [ebp+arg_8]
.text:00000240                 cmp     [ebp+var_14], ecx
.text:00000243                 jnb     loc_2EF
.text:00000249                 cmp     [ebp+arg_C], 0
.text:0000024D                 jz      short loc_28F
.text:0000024F                 push    8               ; size_t
.text:00000251                 mov     edx, [ebp+arg_C]
.text:00000254                 push    edx             ; void *
.text:00000255                 mov     eax, [ebp+var_14]
.text:00000258                 push    eax             ; void *
.text:00000259                 call    _memcmp
.text:0000025E                 add     esp, 0Ch
.text:00000261                 test    eax, eax
.text:00000263                 jnz     short loc_28F
.text:00000265                 mov     ecx, [ebp+arg_C]
.text:00000268                 push    ecx             ; void *
.text:00000269                 mov     edx, [ebp+arg_8]
.text:0000026C                 push    edx             ; int
.text:0000026D                 mov     eax, [ebp+arg_4]
.text:00000270                 push    eax             ; int
.text:00000271                 mov     ecx, [ebp+var_14]
.text:00000274                 push    ecx             ; void *
.text:00000275                 call    _check_crc
.text:0000027A                 add     esp, 10h
.text:0000027D                 test    eax, eax
.text:0000027F                 jz      short loc_28D
.text:00000281                 mov     eax, 1
.text:00000286                 jmp     loc_4AB
.text:0000028B ; ---------------------------------------------------------------------------
.text:0000028B                 jmp     short loc_28F
.text:0000028D ; ---------------------------------------------------------------------------
.text:0000028D
.text:0000028D loc_28D:                                ; CODE XREF: _detect_attack+12Fj
.text:0000028D                 jmp     short loc_2EF
.text:0000028F ; ---------------------------------------------------------------------------
.text:0000028F
.text:0000028F loc_28F:                                ; CODE XREF: _detect_attack+FDj
.text:0000028F                                         ; _detect_attack+113j ...
.text:0000028F                 mov     edx, [ebp+arg_4]
.text:00000292                 mov     [ebp+var_18], edx
.text:00000295                 jmp     short loc_2A0
.text:00000297 ; ---------------------------------------------------------------------------
.text:00000297
.text:00000297 loc_297:                                ; CODE XREF: _detect_attack:loc_2E8j
.text:00000297                 mov     eax, [ebp+var_18]
.text:0000029A                 add     eax, 8
.text:0000029D                 mov     [ebp+var_18], eax
.text:000002A0
.text:000002A0 loc_2A0:                                ; CODE XREF: _detect_attack+145j
.text:000002A0                 mov     ecx, [ebp+var_18]
.text:000002A3                 cmp     ecx, [ebp+var_14]
.text:000002A6                 jnb     short loc_2EA
.text:000002A8                 push    8               ; size_t
.text:000002AA                 mov     edx, [ebp+var_18]
.text:000002AD                 push    edx             ; void *
.text:000002AE                 mov     eax, [ebp+var_14]
.text:000002B1                 push    eax             ; void *
.text:000002B2                 call    _memcmp
.text:000002B7                 add     esp, 0Ch
.text:000002BA                 test    eax, eax
.text:000002BC                 jnz     short loc_2E8
.text:000002BE                 mov     ecx, [ebp+arg_C]
.text:000002C1                 push    ecx             ; void *
.text:000002C2                 mov     edx, [ebp+arg_8]
.text:000002C5                 push    edx             ; int
.text:000002C6                 mov     eax, [ebp+arg_4]
.text:000002C9                 push    eax             ; int
.text:000002CA                 mov     ecx, [ebp+var_14]
.text:000002CD                 push    ecx             ; void *
.text:000002CE                 call    _check_crc
.text:000002D3                 add     esp, 10h
.text:000002D6                 test    eax, eax
.text:000002D8                 jz      short loc_2E6
.text:000002DA                 mov     eax, 1
.text:000002DF                 jmp     loc_4AB
.text:000002E4 ; ---------------------------------------------------------------------------
.text:000002E4                 jmp     short loc_2E8
.text:000002E6 ; ---------------------------------------------------------------------------
.text:000002E6
.text:000002E6 loc_2E6:                                ; CODE XREF: _detect_attack+188j
.text:000002E6                 jmp     short loc_2EA
.text:000002E8 ; ---------------------------------------------------------------------------
.text:000002E8
.text:000002E8 loc_2E8:                                ; CODE XREF: _detect_attack+16Cj
.text:000002E8                                         ; _detect_attack+194j
.text:000002E8                 jmp     short loc_297
.text:000002EA ; ---------------------------------------------------------------------------
.text:000002EA
.text:000002EA loc_2EA:                                ; CODE XREF: _detect_attack+156j
.text:000002EA                                         ; _detect_attack:loc_2E6j
.text:000002EA                 jmp     loc_231
.text:000002EF ; ---------------------------------------------------------------------------
.text:000002EF
.text:000002EF loc_2EF:                                ; CODE XREF: _detect_attack+F3j
.text:000002EF                                         ; _detect_attack:loc_28Dj
.text:000002EF                 xor     eax, eax
.text:000002F1                 jmp     loc_4AB
.text:000002F6 ; ---------------------------------------------------------------------------
.text:000002F6
.text:000002F6 loc_2F6:                                ; CODE XREF: _detect_attack+D3j
.text:000002F6                 mov     edx, [ebp+var_4]
.text:000002F9                 mov     eax, [edx+4]
.text:000002FC                 shl     eax, 1
.text:000002FE                 push    eax             ; size_t
.text:000002FF                 push    0FFh            ; int
.text:00000304                 mov     ecx, [ebp+var_4]
.text:00000307                 mov     edx, [ecx]
.text:00000309                 push    edx             ; void *
.text:0000030A                 call    _memset
.text:0000030F                 add     esp, 0Ch
.text:00000312                 cmp     [ebp+arg_C], 0
.text:00000316                 jz      short loc_35B
.text:00000318                 mov     eax, [ebp+arg_C]
.text:0000031B                 movzx   ecx, byte ptr [eax]
.text:0000031E                 shl     ecx, 18h
.text:00000321                 mov     edx, [ebp+arg_C]
.text:00000324                 movzx   eax, byte ptr [edx+1]
.text:00000328                 shl     eax, 10h
.text:0000032B                 or      ecx, eax
.text:0000032D                 mov     edx, [ebp+arg_C]
.text:00000330                 movzx   eax, byte ptr [edx+2]
.text:00000334                 shl     eax, 8
.text:00000337                 or      ecx, eax
.text:00000339                 mov     edx, [ebp+arg_C]
.text:0000033C                 movzx   eax, byte ptr [edx+3]
.text:00000340                 or      ecx, eax
.text:00000342                 mov     edx, [ebp+var_4]
.text:00000345                 mov     eax, [edx+4]
.text:00000348                 sub     eax, 1
.text:0000034B                 and     ecx, eax
.text:0000034D                 mov     edx, [ebp+var_4]
.text:00000350                 mov     eax, [edx]
.text:00000352                 mov     edx, 0FFFEh
.text:00000357                 mov     [eax+ecx*2], dx
.text:0000035B
.text:0000035B loc_35B:                                ; CODE XREF: _detect_attack+1C6j
.text:0000035B                 mov     eax, [ebp+arg_4]
.text:0000035E                 mov     [ebp+var_14], eax
.text:00000361                 mov     [ebp+var_C], 0
.text:00000368                 jmp     short loc_37C
.text:0000036A ; ---------------------------------------------------------------------------
.text:0000036A
.text:0000036A loc_36A:                                ; CODE XREF: _detect_attack+354j
.text:0000036A                 mov     ecx, [ebp+var_14]
.text:0000036D                 add     ecx, 8
.text:00000370                 mov     [ebp+var_14], ecx
.text:00000373                 mov     edx, [ebp+var_C]
.text:00000376                 add     edx, 1
.text:00000379                 mov     [ebp+var_C], edx
.text:0000037C
.text:0000037C loc_37C:                                ; CODE XREF: _detect_attack+218j
.text:0000037C                 mov     eax, [ebp+arg_4]
.text:0000037F                 add     eax, [ebp+arg_8]
.text:00000382                 cmp     [ebp+var_14], eax
.text:00000385                 jnb     loc_4A9
.text:0000038B                 mov     ecx, [ebp+var_14]
.text:0000038E                 movzx   edx, byte ptr [ecx]
.text:00000391                 shl     edx, 18h
.text:00000394                 mov     eax, [ebp+var_14]
.text:00000397                 movzx   ecx, byte ptr [eax+1]
.text:0000039B                 shl     ecx, 10h
.text:0000039E                 or      edx, ecx
.text:000003A0                 mov     eax, [ebp+var_14]
.text:000003A3                 movzx   ecx, byte ptr [eax+2]
.text:000003A7                 shl     ecx, 8
.text:000003AA                 or      edx, ecx
.text:000003AC                 mov     eax, [ebp+var_14]
.text:000003AF                 movzx   ecx, byte ptr [eax+3]
.text:000003B3                 or      edx, ecx
.text:000003B5                 mov     eax, [ebp+var_4]
.text:000003B8                 mov     ecx, [eax+4]
.text:000003BB                 sub     ecx, 1
.text:000003BE                 and     edx, ecx
.text:000003C0                 mov     [ebp+var_8], edx
.text:000003C3                 jmp     short loc_3D9
.text:000003C5 ; ---------------------------------------------------------------------------
.text:000003C5
.text:000003C5 loc_3C5:                                ; CODE XREF: _detect_attack:loc_48Fj
.text:000003C5                 mov     edx, [ebp+var_8]
.text:000003C8                 add     edx, 1
.text:000003CB                 mov     eax, [ebp+var_4]
.text:000003CE                 mov     ecx, [eax+4]
.text:000003D1                 sub     ecx, 1
.text:000003D4                 and     edx, ecx
.text:000003D6                 mov     [ebp+var_8], edx
.text:000003D9
.text:000003D9 loc_3D9:                                ; CODE XREF: _detect_attack+273j
.text:000003D9                 mov     edx, [ebp+var_4]
.text:000003DC                 mov     eax, [edx]
.text:000003DE                 mov     ecx, [ebp+var_8]
.text:000003E1                 movzx   edx, word ptr [eax+ecx*2]
.text:000003E5                 cmp     edx, 0FFFFh
.text:000003EB                 jz      loc_494
.text:000003F1                 mov     eax, [ebp+var_4]
.text:000003F4                 mov     ecx, [eax]
.text:000003F6                 mov     edx, [ebp+var_8]
.text:000003F9                 movzx   eax, word ptr [ecx+edx*2]
.text:000003FD                 cmp     eax, 0FFFEh
.text:00000402                 jnz     short loc_443
.text:00000404                 push    8               ; size_t
.text:00000406                 mov     ecx, [ebp+arg_C]
.text:00000409                 push    ecx             ; void *
.text:0000040A                 mov     edx, [ebp+var_14]
.text:0000040D                 push    edx             ; void *
.text:0000040E                 call    _memcmp
.text:00000413                 add     esp, 0Ch
.text:00000416                 test    eax, eax
.text:00000418                 jnz     short loc_441
.text:0000041A                 mov     eax, [ebp+arg_C]
.text:0000041D                 push    eax             ; void *
.text:0000041E                 mov     ecx, [ebp+arg_8]
.text:00000421                 push    ecx             ; int
.text:00000422                 mov     edx, [ebp+arg_4]
.text:00000425                 push    edx             ; int
.text:00000426                 mov     eax, [ebp+var_14]
.text:00000429                 push    eax             ; void *
.text:0000042A                 call    _check_crc
.text:0000042F                 add     esp, 10h
.text:00000432                 test    eax, eax
.text:00000434                 jz      short loc_43F
.text:00000436                 mov     eax, 1
.text:0000043B                 jmp     short loc_4AB
.text:0000043D ; ---------------------------------------------------------------------------
.text:0000043D                 jmp     short loc_441
.text:0000043F ; ---------------------------------------------------------------------------
.text:0000043F
.text:0000043F loc_43F:                                ; CODE XREF: _detect_attack+2E4j
.text:0000043F                 jmp     short loc_494
.text:00000441 ; ---------------------------------------------------------------------------
.text:00000441
.text:00000441 loc_441:                                ; CODE XREF: _detect_attack+2C8j
.text:00000441                                         ; _detect_attack+2EDj
.text:00000441                 jmp     short loc_48F
.text:00000443 ; ---------------------------------------------------------------------------
.text:00000443
.text:00000443 loc_443:                                ; CODE XREF: _detect_attack+2B2j
.text:00000443                 push    8               ; size_t
.text:00000445                 mov     ecx, [ebp+var_4]
.text:00000448                 mov     edx, [ecx]
.text:0000044A                 mov     eax, [ebp+var_8]
.text:0000044D                 movzx   ecx, word ptr [edx+eax*2]
.text:00000451                 mov     edx, [ebp+arg_4]
.text:00000454                 lea     eax, [edx+ecx*8]
.text:00000457                 push    eax             ; void *
.text:00000458                 mov     ecx, [ebp+var_14]
.text:0000045B                 push    ecx             ; void *
.text:0000045C                 call    _memcmp
.text:00000461                 add     esp, 0Ch
.text:00000464                 test    eax, eax
.text:00000466                 jnz     short loc_48F
.text:00000468                 mov     edx, [ebp+arg_C]
.text:0000046B                 push    edx             ; void *
.text:0000046C                 mov     eax, [ebp+arg_8]
.text:0000046F                 push    eax             ; int
.text:00000470                 mov     ecx, [ebp+arg_4]
.text:00000473                 push    ecx             ; int
.text:00000474                 mov     edx, [ebp+var_14]
.text:00000477                 push    edx             ; void *
.text:00000478                 call    _check_crc
.text:0000047D                 add     esp, 10h
.text:00000480                 test    eax, eax
.text:00000482                 jz      short loc_48D
.text:00000484                 mov     eax, 1
.text:00000489                 jmp     short loc_4AB
.text:0000048B ; ---------------------------------------------------------------------------
.text:0000048B                 jmp     short loc_48F
.text:0000048D ; ---------------------------------------------------------------------------
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: _detect_attack+332j
.text:0000048D                 jmp     short loc_494
.text:0000048F ; ---------------------------------------------------------------------------
.text:0000048F
.text:0000048F loc_48F:                                ; CODE XREF: _detect_attack:loc_441j
.text:0000048F                                         ; _detect_attack+316j ...
.text:0000048F                 jmp     loc_3C5
.text:00000494 ; ---------------------------------------------------------------------------
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: _detect_attack+29Bj
.text:00000494                                         ; _detect_attack:loc_43Fj ...
.text:00000494                 mov     eax, [ebp+var_4]
.text:00000497                 mov     ecx, [eax]
.text:00000499                 mov     edx, [ebp+var_8]
.text:0000049C                 mov     ax, word ptr [ebp+var_C]
.text:000004A0                 mov     [ecx+edx*2], ax
.text:000004A4                 jmp     loc_36A
.text:000004A9 ; ---------------------------------------------------------------------------
.text:000004A9
.text:000004A9 loc_4A9:                                ; CODE XREF: _detect_attack+235j
.text:000004A9                 xor     eax, eax
.text:000004AB
.text:000004AB loc_4AB:                                ; CODE XREF: _detect_attack+136j
.text:000004AB                                         ; _detect_attack+18Fj ...
.text:000004AB                 add     esp, 18h
.text:000004AE                 cmp     ebp, esp
.text:000004B0                 call    __RTC_CheckEsp
.text:000004B5                 mov     esp, ebp
.text:000004B7                 pop     ebp
.text:000004B8                 retn
.text:000004B8 _detect_attack  endp
.text:000004B8
.text:000004B8 ; ---------------------------------------------------------------------------
.text:000004B9                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; int __cdecl check_crc(void *, int, int, void *)
.text:000004C0 _check_crc      proc near               ; CODE XREF: _detect_attack+125p
.text:000004C0                                         ; _detect_attack+17Ep ...
.text:000004C0
.text:000004C0 var_10          = dword ptr -10h
.text:000004C0 var_C           = dword ptr -0Ch
.text:000004C0 var_8           = dword ptr -8
.text:000004C0 var_4           = dword ptr -4
.text:000004C0 arg_0           = dword ptr  8
.text:000004C0 arg_4           = dword ptr  0Ch
.text:000004C0 arg_8           = dword ptr  10h
.text:000004C0 arg_C           = dword ptr  14h
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 sub     esp, 10h
.text:000004C6                 mov     eax, 0CCCCCCCCh
.text:000004CB                 mov     [ebp+var_10], eax
.text:000004CE                 mov     [ebp+var_C], eax
.text:000004D1                 mov     [ebp+var_8], eax
.text:000004D4                 mov     [ebp+var_4], eax
.text:000004D7                 mov     [ebp+var_8], 0
.text:000004DE                 cmp     [ebp+arg_C], 0
.text:000004E2                 jz      short loc_51C
.text:000004E4                 push    8               ; size_t
.text:000004E6                 mov     eax, [ebp+arg_C]
.text:000004E9                 push    eax             ; void *
.text:000004EA                 mov     ecx, [ebp+arg_0]
.text:000004ED                 push    ecx             ; void *
.text:000004EE                 call    _memcmp
.text:000004F3                 add     esp, 0Ch
.text:000004F6                 test    eax, eax
.text:000004F8                 jnz     short loc_51C
.text:000004FA                 push    offset _ONE
.text:000004FF                 lea     edx, [ebp+var_8]
.text:00000502                 push    edx
.text:00000503                 call    _crc_update
.text:00000508                 add     esp, 8
.text:0000050B                 push    offset _ZERO
.text:00000510                 lea     eax, [ebp+var_8]
.text:00000513                 push    eax
.text:00000514                 call    _crc_update
.text:00000519                 add     esp, 8
.text:0000051C
.text:0000051C loc_51C:                                ; CODE XREF: _check_crc+22j
.text:0000051C                                         ; _check_crc+38j
.text:0000051C                 mov     ecx, [ebp+arg_4]
.text:0000051F                 mov     [ebp+var_10], ecx
.text:00000522                 jmp     short loc_52D
.text:00000524 ; ---------------------------------------------------------------------------
.text:00000524
.text:00000524 loc_524:                                ; CODE XREF: _check_crc:loc_594j
.text:00000524                 mov     edx, [ebp+var_10]
.text:00000527                 add     edx, 8
.text:0000052A                 mov     [ebp+var_10], edx
.text:0000052D
.text:0000052D loc_52D:                                ; CODE XREF: _check_crc+62j
.text:0000052D                 mov     eax, [ebp+arg_4]
.text:00000530                 add     eax, [ebp+arg_8]
.text:00000533                 cmp     [ebp+var_10], eax
.text:00000536                 jnb     short loc_596
.text:00000538                 push    8               ; size_t
.text:0000053A                 mov     ecx, [ebp+var_10]
.text:0000053D                 push    ecx             ; void *
.text:0000053E                 mov     edx, [ebp+arg_0]
.text:00000541                 push    edx             ; void *
.text:00000542                 call    _memcmp
.text:00000547                 add     esp, 0Ch
.text:0000054A                 test    eax, eax
.text:0000054C                 jnz     short loc_572
.text:0000054E                 push    offset _ONE
.text:00000553                 lea     eax, [ebp+var_8]
.text:00000556                 push    eax
.text:00000557                 call    _crc_update
.text:0000055C                 add     esp, 8
.text:0000055F                 push    offset _ZERO
.text:00000564                 lea     ecx, [ebp+var_8]
.text:00000567                 push    ecx
.text:00000568                 call    _crc_update
.text:0000056D                 add     esp, 8
.text:00000570                 jmp     short loc_594
.text:00000572 ; ---------------------------------------------------------------------------
.text:00000572
.text:00000572 loc_572:                                ; CODE XREF: _check_crc+8Cj
.text:00000572                 push    offset _ZERO
.text:00000577                 lea     edx, [ebp+var_8]
.text:0000057A                 push    edx
.text:0000057B                 call    _crc_update
.text:00000580                 add     esp, 8
.text:00000583                 push    offset _ZERO
.text:00000588                 lea     eax, [ebp+var_8]
.text:0000058B                 push    eax
.text:0000058C                 call    _crc_update
.text:00000591                 add     esp, 8
.text:00000594
.text:00000594 loc_594:                                ; CODE XREF: _check_crc+B0j
.text:00000594                 jmp     short loc_524
.text:00000596 ; ---------------------------------------------------------------------------
.text:00000596
.text:00000596 loc_596:                                ; CODE XREF: _check_crc+76j
.text:00000596                 xor     eax, eax
.text:00000598                 cmp     [ebp+var_8], 0
.text:0000059C                 setz    al
.text:0000059F                 push    edx
.text:000005A0                 mov     ecx, ebp
.text:000005A2                 push    eax
.text:000005A3                 lea     edx, $LN11
.text:000005A9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005AE                 pop     eax
.text:000005AF                 pop     edx
.text:000005B0                 add     esp, 10h
.text:000005B3                 cmp     ebp, esp
.text:000005B5                 call    __RTC_CheckEsp
.text:000005BA                 mov     esp, ebp
.text:000005BC                 pop     ebp
.text:000005BD                 retn
.text:000005BD _check_crc      endp
.text:000005BD
.text:000005BD ; ---------------------------------------------------------------------------
.text:000005BE                 align 10h
.text:000005C0 $LN11           dd 1                    ; DATA XREF: _check_crc+E3o
.text:000005C4                 dd offset $LN10
.text:000005C8 $LN10           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000005C4o
.text:000005D0                 dd offset $LN9
.text:000005D4 $LN9            dd 637263h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000005D0o
.text:000005E0
.text:000005E0 ; =============== S U B R O U T I N E =======================================
.text:000005E0
.text:000005E0 ; Attributes: bp-based frame
.text:000005E0
.text:000005E0 _crc_update     proc near               ; CODE XREF: _check_crc+43p
.text:000005E0                                         ; _check_crc+54p ...
.text:000005E0
.text:000005E0 arg_0           = dword ptr  8
.text:000005E0 arg_4           = dword ptr  0Ch
.text:000005E0
.text:000005E0                 push    ebp
.text:000005E1                 mov     ebp, esp
.text:000005E3                 push    4
.text:000005E5                 mov     eax, [ebp+arg_4]
.text:000005E8                 push    eax
.text:000005E9                 mov     ecx, [ebp+arg_0]
.text:000005EC                 mov     edx, [ecx]
.text:000005EE                 push    edx
.text:000005EF                 call    _crc32_update
.text:000005F4                 add     esp, 0Ch
.text:000005F7                 mov     ecx, [ebp+arg_0]
.text:000005FA                 mov     [ecx], eax
.text:000005FC                 cmp     ebp, esp
.text:000005FE                 call    __RTC_CheckEsp
.text:00000603                 pop     ebp
.text:00000604                 retn
.text:00000604 _crc_update     endp
.text:00000604
.text:00000604 ; ---------------------------------------------------------------------------
.text:00000605                 align 4
.text:00000605 _text           ends
.text:00000605
.rtc$TMZ:00000608 ; ===========================================================================
.rtc$TMZ:00000608
.rtc$TMZ:00000608 ; Segment type: Pure data
.rtc$TMZ:00000608 ; Segment permissions: Read
.rtc$TMZ:00000608 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000608                 assume cs:_rtc$TMZ
.rtc$TMZ:00000608                 ;org 608h
.rtc$TMZ:00000608 ; COMDAT (pick any)
.rtc$TMZ:00000608 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000608 _rtc$TMZ        ends
.rtc$TMZ:00000608
.rtc$IMZ:0000060C ; ===========================================================================
.rtc$IMZ:0000060C
.rtc$IMZ:0000060C ; Segment type: Pure data
.rtc$IMZ:0000060C ; Segment permissions: Read
.rtc$IMZ:0000060C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000060C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000060C                 ;org 60Ch
.rtc$IMZ:0000060C ; COMDAT (pick any)
.rtc$IMZ:0000060C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000060C _rtc$IMZ        ends
.rtc$IMZ:0000060C
UNDEF:00000610 ; ===========================================================================
UNDEF:00000610
UNDEF:00000610 ; Segment type: Externs
UNDEF:00000610 ; UNDEF
UNDEF:00000610                 extrn _safemalloc:near  ; CODE XREF: _crcda_make_context+Fp
UNDEF:00000610                                         ; _detect_attack+90p
UNDEF:00000614                 extrn __RTC_CheckEsp:near
UNDEF:00000614                                         ; CODE XREF: _crcda_make_context+35p
UNDEF:00000614                                         ; _crcda_free_context+3Fp ...
UNDEF:00000618                 extrn __RTC_Shutdown:near
UNDEF:00000618                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000061C                 extrn __RTC_InitBase:near
UNDEF:0000061C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000620                 extrn _safefree:near    ; CODE XREF: _crcda_free_context+1Dp
UNDEF:00000620                                         ; _crcda_free_context+32p
UNDEF:00000624 ; void *__cdecl memset(void *, int, size_t)
UNDEF:00000624                 extrn _memset:near      ; CODE XREF: _detect_attack+1BAp
UNDEF:00000628 ; int __cdecl memcmp(const void *, const void *, size_t)
UNDEF:00000628                 extrn _memcmp:near      ; CODE XREF: _detect_attack+109p
UNDEF:00000628                                         ; _detect_attack+162p ...
UNDEF:0000062C                 extrn _saferealloc:near ; CODE XREF: _detect_attack+C2p
UNDEF:00000630                 extrn __wassert:near    ; CODE XREF: _detect_attack+48p
UNDEF:00000634 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000634                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _check_crc+E9p
UNDEF:00000638                 extrn _crc32_update:near ; CODE XREF: _crc_update+Fp
UNDEF:00000638
UNDEF:00000638
UNDEF:00000638                 end