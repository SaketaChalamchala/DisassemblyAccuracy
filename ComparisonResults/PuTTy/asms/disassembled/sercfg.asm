.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 1BCC1673FB7619745CE84FB117AED658
.data:00000000 ; Input CRC32 : 73470D10
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sercfg.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG86263        db 'None',0             ; DATA XREF: .rdata:`serial_parity_handler'::`2'::paritieso
.data:00000005                 align 4
.data:00000008 $SG86264        db 'Odd',0              ; DATA XREF: .rdata:00000278o
.data:0000000C $SG86265        db 'Even',0             ; DATA XREF: .rdata:00000280o
.data:00000011                 align 4
.data:00000014 $SG86266        db 'Mark',0             ; DATA XREF: .rdata:00000288o
.data:00000019                 align 4
.data:0000001C $SG86267        db 'Space',0            ; DATA XREF: .rdata:00000290o
.data:00000022                 align 4
.data:00000024 $SG86305        db 'None',0             ; DATA XREF: .rdata:`serial_flow_handler'::`2'::flowso
.data:00000029                 align 4
.data:0000002C $SG86306        db 'XON/XOFF',0         ; DATA XREF: .rdata:000002A0o
.data:00000035                 align 4
.data:00000038 $SG86307        db 'RTS/CTS',0          ; DATA XREF: .rdata:000002A8o
.data:00000040 $SG86308        db 'DSR/DTR',0          ; DATA XREF: .rdata:000002B0o
.data:00000048 $SG86349        db 'Specify the destination you want to connect to',0
.data:00000048                                         ; DATA XREF: _ser_setup_config_box+25o
.data:00000077                 align 4
.data:00000078 $SG86350        db 'hostport',0         ; DATA XREF: _ser_setup_config_box+2Ao
.data:00000081                 align 4
.data:00000084 $SG86351        db 'Session',0          ; DATA XREF: _ser_setup_config_box+2Fo
.data:0000008C $SG86359        db 'Serial',0           ; DATA XREF: _ser_setup_config_box+CBo
.data:00000093                 align 4
.data:00000094 $SG86367        db 'Options controlling local serial lines',0
.data:00000094                                         ; DATA XREF: _ser_setup_config_box:loc_415o
.data:000000BB                 align 4
.data:000000BC $SG86368        db 'Connection/Serial',0
.data:000000BC                                         ; DATA XREF: _ser_setup_config_box+162o
.data:000000CE                 align 10h
.data:000000D0 $SG86370        db 'Select a serial line',0
.data:000000D0                                         ; DATA XREF: _ser_setup_config_box+179o
.data:000000E5                 align 4
.data:000000E8 $SG86371        db 'serline',0          ; DATA XREF: _ser_setup_config_box+17Eo
.data:000000F0 $SG86372        db 'Connection/Serial',0
.data:000000F0                                         ; DATA XREF: _ser_setup_config_box+183o
.data:00000102                 align 4
.data:00000104 $SG86373        db 'serial.line:config-serial-line',0
.data:00000104                                         ; DATA XREF: _ser_setup_config_box+1B2o
.data:00000123                 align 4
.data:00000124 $SG86374        db 'Serial line to connect to',0
.data:00000124                                         ; DATA XREF: _ser_setup_config_box+1C4o
.data:0000013E                 align 10h
.data:00000140 $SG86375        db 'Configure the serial line',0
.data:00000140                                         ; DATA XREF: _ser_setup_config_box:loc_48Do
.data:0000015A                 align 4
.data:0000015C $SG86376        db 'sercfg',0           ; DATA XREF: _ser_setup_config_box+1DAo
.data:00000163                 align 4
.data:00000164 $SG86377        db 'Connection/Serial',0
.data:00000164                                         ; DATA XREF: _ser_setup_config_box+1DFo
.data:00000176                 align 4
.data:00000178 $SG86378        db 'serial.speed:config-serial-speed',0
.data:00000178                                         ; DATA XREF: _ser_setup_config_box+20Eo
.data:00000199                 align 4
.data:0000019C $SG86379        db 'Speed (baud)',0     ; DATA XREF: _ser_setup_config_box+220o
.data:000001A9                 align 4
.data:000001AC $SG86380        db 'serial.databits:config-serial-databits',0
.data:000001AC                                         ; DATA XREF: _ser_setup_config_box+24Co
.data:000001D3                 align 4
.data:000001D4 $SG86381        db 'Data bits',0        ; DATA XREF: _ser_setup_config_box+25Eo
.data:000001DE                 align 10h
.data:000001E0 $SG86382        db 'serial.stopbits:config-serial-stopbits',0
.data:000001E0                                         ; DATA XREF: _ser_setup_config_box+28Ao
.data:00000207                 align 4
.data:00000208 $SG86383        db 'Stop bits',0        ; DATA XREF: _ser_setup_config_box+29Co
.data:00000212                 align 4
.data:00000214 $SG86384        db 'serial.parity:config-serial-parity',0
.data:00000214                                         ; DATA XREF: _ser_setup_config_box+2BFo
.data:00000237                 align 4
.data:00000238 $SG86385        db 'Parity',0           ; DATA XREF: _ser_setup_config_box+2D1o
.data:0000023F                 align 10h
.data:00000240 $SG86386        db 'serial.flow:config-serial-flow',0
.data:00000240                                         ; DATA XREF: _ser_setup_config_box+2F4o
.data:0000025F                 align 10h
.data:00000260 $SG86387        db 'Flow control',0     ; DATA XREF: _ser_setup_config_box+306o
.data:0000026D                 align 10h
.data:0000026D _data           ends
.data:0000026D
.rdata:00000270 ; ===========================================================================
.rdata:00000270
.rdata:00000270 ; Segment type: Pure data
.rdata:00000270 ; Segment permissions: Read
.rdata:00000270 _rdata          segment dword public 'DATA' use32
.rdata:00000270                 assume cs:_rdata
.rdata:00000270                 ;org 270h
.rdata:00000270 ; `serial_parity_handler'::`2'::parities
.rdata:00000270 ?parities@?1??serial_parity_handler@@9@9 dd offset $SG86263
.rdata:00000270                                         ; DATA XREF: _serial_parity_handler+9Cr
.rdata:00000270                                         ; "None"
.rdata:00000274 dword_274       dd 0                    ; DATA XREF: _serial_parity_handler+91r
.rdata:00000274                                         ; _serial_parity_handler+E9r
.rdata:00000278                 dd offset $SG86264      ; "Odd"
.rdata:0000027C                 db    1
.rdata:0000027D                 db    0
.rdata:0000027E                 db    0
.rdata:0000027F                 db    0
.rdata:00000280                 dd offset $SG86265      ; "Even"
.rdata:00000284                 db    2
.rdata:00000285                 db    0
.rdata:00000286                 db    0
.rdata:00000287                 db    0
.rdata:00000288                 dd offset $SG86266      ; "Mark"
.rdata:0000028C                 db    3
.rdata:0000028D                 db    0
.rdata:0000028E                 db    0
.rdata:0000028F                 db    0
.rdata:00000290                 dd offset $SG86267      ; "Space"
.rdata:00000294                 db    4
.rdata:00000295                 db    0
.rdata:00000296                 db    0
.rdata:00000297                 db    0
.rdata:00000298 ; `serial_flow_handler'::`2'::flows
.rdata:00000298 ?flows@?1??serial_flow_handler@@9@9 dd offset $SG86305
.rdata:00000298                                         ; DATA XREF: _serial_flow_handler+9Cr
.rdata:00000298                                         ; "None"
.rdata:0000029C dword_29C       dd 0                    ; DATA XREF: _serial_flow_handler+91r
.rdata:0000029C                                         ; _serial_flow_handler+E9r
.rdata:000002A0                 dd offset $SG86306      ; "XON/XOFF"
.rdata:000002A4                 db    1
.rdata:000002A5                 db    0
.rdata:000002A6                 db    0
.rdata:000002A7                 db    0
.rdata:000002A8                 dd offset $SG86307      ; "RTS/CTS"
.rdata:000002AC                 db    2
.rdata:000002AD                 db    0
.rdata:000002AE                 db    0
.rdata:000002AF                 db    0
.rdata:000002B0                 dd offset $SG86308      ; "DSR/DTR"
.rdata:000002B4                 db    3
.rdata:000002B5                 db    0
.rdata:000002B6                 db    0
.rdata:000002B7                 db    0
.rdata:000002B7 _rdata          ends
.rdata:000002B7
.text:000002B8 ; ===========================================================================
.text:000002B8
.text:000002B8 ; Segment type: Pure code
.text:000002B8 ; Segment permissions: Read/Execute
.text:000002B8 _text           segment para public 'CODE' use32
.text:000002B8                 assume cs:_text
.text:000002B8                 ;org 2B8h
.text:000002B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000002B8
.text:000002B8 ; =============== S U B R O U T I N E =======================================
.text:000002B8
.text:000002B8 ; Attributes: bp-based frame
.text:000002B8
.text:000002B8                 public _ser_setup_config_box
.text:000002B8 _ser_setup_config_box proc near
.text:000002B8
.text:000002B8 var_C           = dword ptr -0Ch
.text:000002B8 var_8           = dword ptr -8
.text:000002B8 var_4           = dword ptr -4
.text:000002B8 arg_0           = dword ptr  8
.text:000002B8 arg_4           = dword ptr  0Ch
.text:000002B8 arg_8           = dword ptr  10h
.text:000002B8 arg_C           = dword ptr  14h
.text:000002B8
.text:000002B8                 push    ebp
.text:000002B9                 mov     ebp, esp
.text:000002BB                 sub     esp, 0Ch
.text:000002BE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000002C5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002D3                 cmp     [ebp+arg_4], 0
.text:000002D7                 jnz     loc_415
.text:000002DD                 push    offset $SG86349 ; "Specify the destination you want to con"...
.text:000002E2                 push    offset $SG86350 ; "hostport"
.text:000002E7                 push    offset $SG86351 ; "Session"
.text:000002EC                 mov     eax, [ebp+arg_0]
.text:000002EF                 push    eax
.text:000002F0                 call    _ctrl_getset
.text:000002F5                 add     esp, 10h
.text:000002F8                 mov     [ebp+var_4], eax
.text:000002FB                 mov     [ebp+var_C], 0
.text:00000302                 jmp     short loc_30D
.text:00000304 ; ---------------------------------------------------------------------------
.text:00000304
.text:00000304 loc_304:                                ; CODE XREF: _ser_setup_config_box:loc_410j
.text:00000304                 mov     ecx, [ebp+var_C]
.text:00000307                 add     ecx, 1
.text:0000030A                 mov     [ebp+var_C], ecx
.text:0000030D
.text:0000030D loc_30D:                                ; CODE XREF: _ser_setup_config_box+4Aj
.text:0000030D                 mov     edx, [ebp+var_4]
.text:00000310                 mov     eax, [ebp+var_C]
.text:00000313                 cmp     eax, [edx+10h]
.text:00000316                 jge     loc_415
.text:0000031C                 mov     ecx, [ebp+var_4]
.text:0000031F                 mov     edx, [ecx+18h]
.text:00000322                 mov     eax, [ebp+var_C]
.text:00000325                 mov     ecx, [edx+eax*4]
.text:00000328                 mov     [ebp+var_8], ecx
.text:0000032B                 mov     edx, [ebp+var_8]
.text:0000032E                 cmp     dword ptr [edx], 2
.text:00000331                 jnz     loc_410
.text:00000337                 mov     eax, [ebp+var_8]
.text:0000033A                 cmp     dword ptr [eax+10h], offset _config_protocolbuttons_handler
.text:00000341                 jnz     loc_410
.text:00000347                 mov     ecx, [ebp+var_8]
.text:0000034A                 mov     edx, [ecx+24h]
.text:0000034D                 add     edx, 1
.text:00000350                 mov     eax, [ebp+var_8]
.text:00000353                 mov     [eax+24h], edx
.text:00000356                 mov     ecx, [ebp+var_8]
.text:00000359                 mov     edx, [ecx+20h]
.text:0000035C                 add     edx, 1
.text:0000035F                 mov     eax, [ebp+var_8]
.text:00000362                 mov     [eax+20h], edx
.text:00000365                 push    4
.text:00000367                 mov     ecx, [ebp+var_8]
.text:0000036A                 mov     edx, [ecx+24h]
.text:0000036D                 push    edx
.text:0000036E                 mov     eax, [ebp+var_8]
.text:00000371                 mov     ecx, [eax+28h]
.text:00000374                 push    ecx
.text:00000375                 call    _saferealloc
.text:0000037A                 add     esp, 0Ch
.text:0000037D                 mov     edx, [ebp+var_8]
.text:00000380                 mov     [edx+28h], eax
.text:00000383                 push    offset $SG86359 ; "Serial"
.text:00000388                 call    _dupstr
.text:0000038D                 add     esp, 4
.text:00000390                 mov     ecx, [ebp+var_8]
.text:00000393                 mov     edx, [ecx+24h]
.text:00000396                 mov     ecx, [ebp+var_8]
.text:00000399                 mov     ecx, [ecx+28h]
.text:0000039C                 mov     [ecx+edx*4-4], eax
.text:000003A0                 push    4
.text:000003A2                 mov     edx, [ebp+var_8]
.text:000003A5                 mov     eax, [edx+24h]
.text:000003A8                 push    eax
.text:000003A9                 mov     ecx, [ebp+var_8]
.text:000003AC                 mov     edx, [ecx+30h]
.text:000003AF                 push    edx
.text:000003B0                 call    _saferealloc
.text:000003B5                 add     esp, 0Ch
.text:000003B8                 mov     ecx, [ebp+var_8]
.text:000003BB                 mov     [ecx+30h], eax
.text:000003BE                 push    4
.text:000003C0                 call    _I
.text:000003C5                 add     esp, 4
.text:000003C8                 mov     edx, [ebp+var_8]
.text:000003CB                 mov     ecx, [edx+24h]
.text:000003CE                 mov     edx, [ebp+var_8]
.text:000003D1                 mov     edx, [edx+30h]
.text:000003D4                 mov     [edx+ecx*4-4], eax
.text:000003D8                 mov     eax, [ebp+var_8]
.text:000003DB                 cmp     dword ptr [eax+2Ch], 0
.text:000003DF                 jz      short loc_410
.text:000003E1                 push    1
.text:000003E3                 mov     ecx, [ebp+var_8]
.text:000003E6                 mov     edx, [ecx+24h]
.text:000003E9                 push    edx
.text:000003EA                 mov     eax, [ebp+var_8]
.text:000003ED                 mov     ecx, [eax+2Ch]
.text:000003F0                 push    ecx
.text:000003F1                 call    _saferealloc
.text:000003F6                 add     esp, 0Ch
.text:000003F9                 mov     edx, [ebp+var_8]
.text:000003FC                 mov     [edx+2Ch], eax
.text:000003FF                 mov     eax, [ebp+var_8]
.text:00000402                 mov     ecx, [eax+24h]
.text:00000405                 mov     edx, [ebp+var_8]
.text:00000408                 mov     eax, [edx+2Ch]
.text:0000040B                 mov     byte ptr [ecx+eax-1], 72h ; 'r'
.text:00000410
.text:00000410 loc_410:                                ; CODE XREF: _ser_setup_config_box+79j
.text:00000410                                         ; _ser_setup_config_box+89j ...
.text:00000410                 jmp     loc_304
.text:00000415 ; ---------------------------------------------------------------------------
.text:00000415
.text:00000415 loc_415:                                ; CODE XREF: _ser_setup_config_box+1Fj
.text:00000415                                         ; _ser_setup_config_box+5Ej
.text:00000415                 push    offset $SG86367 ; "Options controlling local serial lines"
.text:0000041A                 push    offset $SG86368 ; "Connection/Serial"
.text:0000041F                 mov     ecx, [ebp+arg_0]
.text:00000422                 push    ecx
.text:00000423                 call    _ctrl_settitle
.text:00000428                 add     esp, 0Ch
.text:0000042B                 cmp     [ebp+arg_4], 0
.text:0000042F                 jnz     short loc_48D
.text:00000431                 push    offset $SG86370 ; "Select a serial line"
.text:00000436                 push    offset $SG86371 ; "serline"
.text:0000043B                 push    offset $SG86372 ; "Connection/Serial"
.text:00000440                 mov     edx, [ebp+arg_0]
.text:00000443                 push    edx
.text:00000444                 call    _ctrl_getset
.text:00000449                 add     esp, 10h
.text:0000044C                 mov     [ebp+var_4], eax
.text:0000044F                 push    1
.text:00000451                 call    _I
.text:00000456                 add     esp, 4
.text:00000459                 push    eax
.text:0000045A                 push    37h ; '7'
.text:0000045C                 call    _I
.text:00000461                 add     esp, 4
.text:00000464                 push    eax
.text:00000465                 push    offset _conf_editbox_handler
.text:0000046A                 push    offset $SG86373 ; "serial.line:config-serial-line"
.text:0000046F                 call    _P
.text:00000474                 add     esp, 4
.text:00000477                 push    eax
.text:00000478                 push    28h ; '('
.text:0000047A                 push    6Ch ; 'l'
.text:0000047C                 push    offset $SG86374 ; "Serial line to connect to"
.text:00000481                 mov     eax, [ebp+var_4]
.text:00000484                 push    eax
.text:00000485                 call    _ctrl_editbox
.text:0000048A                 add     esp, 20h
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: _ser_setup_config_box+177j
.text:0000048D                 push    offset $SG86375 ; "Configure the serial line"
.text:00000492                 push    offset $SG86376 ; "sercfg"
.text:00000497                 push    offset $SG86377 ; "Connection/Serial"
.text:0000049C                 mov     ecx, [ebp+arg_0]
.text:0000049F                 push    ecx
.text:000004A0                 call    _ctrl_getset
.text:000004A5                 add     esp, 10h
.text:000004A8                 mov     [ebp+var_4], eax
.text:000004AB                 push    0FFFFFFFFh
.text:000004AD                 call    _I
.text:000004B2                 add     esp, 4
.text:000004B5                 push    eax
.text:000004B6                 push    38h ; '8'
.text:000004B8                 call    _I
.text:000004BD                 add     esp, 4
.text:000004C0                 push    eax
.text:000004C1                 push    offset _conf_editbox_handler
.text:000004C6                 push    offset $SG86378 ; "serial.speed:config-serial-speed"
.text:000004CB                 call    _P
.text:000004D0                 add     esp, 4
.text:000004D3                 push    eax
.text:000004D4                 push    28h ; '('
.text:000004D6                 push    73h ; 's'
.text:000004D8                 push    offset $SG86379 ; "Speed (baud)"
.text:000004DD                 mov     edx, [ebp+var_4]
.text:000004E0                 push    edx
.text:000004E1                 call    _ctrl_editbox
.text:000004E6                 add     esp, 20h
.text:000004E9                 push    0FFFFFFFFh
.text:000004EB                 call    _I
.text:000004F0                 add     esp, 4
.text:000004F3                 push    eax
.text:000004F4                 push    39h ; '9'
.text:000004F6                 call    _I
.text:000004FB                 add     esp, 4
.text:000004FE                 push    eax
.text:000004FF                 push    offset _conf_editbox_handler
.text:00000504                 push    offset $SG86380 ; "serial.databits:config-serial-databits"
.text:00000509                 call    _P
.text:0000050E                 add     esp, 4
.text:00000511                 push    eax
.text:00000512                 push    28h ; '('
.text:00000514                 push    62h ; 'b'
.text:00000516                 push    offset $SG86381 ; "Data bits"
.text:0000051B                 mov     eax, [ebp+var_4]
.text:0000051E                 push    eax
.text:0000051F                 call    _ctrl_editbox
.text:00000524                 add     esp, 20h
.text:00000527                 push    0FFFFFFFEh
.text:00000529                 call    _I
.text:0000052E                 add     esp, 4
.text:00000531                 push    eax
.text:00000532                 push    3Ah ; ':'
.text:00000534                 call    _I
.text:00000539                 add     esp, 4
.text:0000053C                 push    eax
.text:0000053D                 push    offset _conf_editbox_handler
.text:00000542                 push    offset $SG86382 ; "serial.stopbits:config-serial-stopbits"
.text:00000547                 call    _P
.text:0000054C                 add     esp, 4
.text:0000054F                 push    eax
.text:00000550                 push    28h ; '('
.text:00000552                 push    74h ; 't'
.text:00000554                 push    offset $SG86383 ; "Stop bits"
.text:00000559                 mov     ecx, [ebp+var_4]
.text:0000055C                 push    ecx
.text:0000055D                 call    _ctrl_editbox
.text:00000562                 add     esp, 20h
.text:00000565                 mov     edx, [ebp+arg_8]
.text:00000568                 push    edx
.text:00000569                 call    _I
.text:0000056E                 add     esp, 4
.text:00000571                 push    eax
.text:00000572                 push    offset _serial_parity_handler
.text:00000577                 push    offset $SG86384 ; "serial.parity:config-serial-parity"
.text:0000057C                 call    _P
.text:00000581                 add     esp, 4
.text:00000584                 push    eax
.text:00000585                 push    28h ; '('
.text:00000587                 push    70h ; 'p'
.text:00000589                 push    offset $SG86385 ; "Parity"
.text:0000058E                 mov     eax, [ebp+var_4]
.text:00000591                 push    eax
.text:00000592                 call    _ctrl_droplist
.text:00000597                 add     esp, 1Ch
.text:0000059A                 mov     ecx, [ebp+arg_C]
.text:0000059D                 push    ecx
.text:0000059E                 call    _I
.text:000005A3                 add     esp, 4
.text:000005A6                 push    eax
.text:000005A7                 push    offset _serial_flow_handler
.text:000005AC                 push    offset $SG86386 ; "serial.flow:config-serial-flow"
.text:000005B1                 call    _P
.text:000005B6                 add     esp, 4
.text:000005B9                 push    eax
.text:000005BA                 push    28h ; '('
.text:000005BC                 push    66h ; 'f'
.text:000005BE                 push    offset $SG86387 ; "Flow control"
.text:000005C3                 mov     edx, [ebp+var_4]
.text:000005C6                 push    edx
.text:000005C7                 call    _ctrl_droplist
.text:000005CC                 add     esp, 1Ch
.text:000005CF                 add     esp, 0Ch
.text:000005D2                 cmp     ebp, esp
.text:000005D4                 call    __RTC_CheckEsp
.text:000005D9                 mov     esp, ebp
.text:000005DB                 pop     ebp
.text:000005DC                 retn
.text:000005DC _ser_setup_config_box endp
.text:000005DC
.text:000005DC ; ---------------------------------------------------------------------------
.text:000005DD                 db 0Bh dup(0CCh)
.text:000005E8
.text:000005E8 ; =============== S U B R O U T I N E =======================================
.text:000005E8
.text:000005E8 ; Attributes: bp-based frame
.text:000005E8
.text:000005E8 _serial_parity_handler proc near        ; DATA XREF: _ser_setup_config_box+2BAo
.text:000005E8
.text:000005E8 var_18          = dword ptr -18h
.text:000005E8 var_14          = dword ptr -14h
.text:000005E8 var_10          = dword ptr -10h
.text:000005E8 var_C           = dword ptr -0Ch
.text:000005E8 var_8           = dword ptr -8
.text:000005E8 var_4           = dword ptr -4
.text:000005E8 arg_0           = dword ptr  8
.text:000005E8 arg_4           = dword ptr  0Ch
.text:000005E8 arg_8           = dword ptr  10h
.text:000005E8 arg_C           = dword ptr  14h
.text:000005E8
.text:000005E8                 push    ebp
.text:000005E9                 mov     ebp, esp
.text:000005EB                 sub     esp, 18h
.text:000005EE                 mov     eax, 0CCCCCCCCh
.text:000005F3                 mov     [ebp+var_18], eax
.text:000005F6                 mov     [ebp+var_14], eax
.text:000005F9                 mov     [ebp+var_10], eax
.text:000005FC                 mov     [ebp+var_C], eax
.text:000005FF                 mov     [ebp+var_8], eax
.text:00000602                 mov     [ebp+var_4], eax
.text:00000605                 mov     eax, [ebp+arg_0]
.text:00000608                 mov     ecx, [eax+14h]
.text:0000060B                 mov     [ebp+var_4], ecx
.text:0000060E                 mov     edx, [ebp+arg_8]
.text:00000611                 mov     [ebp+var_10], edx
.text:00000614                 cmp     [ebp+arg_C], 0
.text:00000618                 jnz     loc_73E
.text:0000061E                 push    3Bh ; ';'
.text:00000620                 mov     eax, [ebp+var_10]
.text:00000623                 push    eax
.text:00000624                 call    _conf_get_int
.text:00000629                 add     esp, 8
.text:0000062C                 mov     [ebp+var_14], eax
.text:0000062F                 mov     ecx, [ebp+arg_4]
.text:00000632                 push    ecx
.text:00000633                 mov     edx, [ebp+arg_0]
.text:00000636                 push    edx
.text:00000637                 call    _dlg_update_start
.text:0000063C                 add     esp, 8
.text:0000063F                 mov     eax, [ebp+arg_4]
.text:00000642                 push    eax
.text:00000643                 mov     ecx, [ebp+arg_0]
.text:00000646                 push    ecx
.text:00000647                 call    _dlg_listbox_clear
.text:0000064C                 add     esp, 8
.text:0000064F                 mov     [ebp+var_8], 0
.text:00000656                 jmp     short loc_661
.text:00000658 ; ---------------------------------------------------------------------------
.text:00000658
.text:00000658 loc_658:                                ; CODE XREF: _serial_parity_handler:loc_69Cj
.text:00000658                 mov     edx, [ebp+var_8]
.text:0000065B                 add     edx, 1
.text:0000065E                 mov     [ebp+var_8], edx
.text:00000661
.text:00000661 loc_661:                                ; CODE XREF: _serial_parity_handler+6Ej
.text:00000661                 cmp     [ebp+var_8], 5
.text:00000665                 jnb     short loc_69E
.text:00000667                 mov     eax, 1
.text:0000066C                 mov     ecx, [ebp+var_8]
.text:0000066F                 shl     eax, cl
.text:00000671                 and     eax, [ebp+var_4]
.text:00000674                 jz      short loc_69C
.text:00000676                 mov     ecx, [ebp+var_8]
.text:00000679                 mov     edx, ds:dword_274[ecx*8]
.text:00000680                 push    edx
.text:00000681                 mov     eax, [ebp+var_8]
.text:00000684                 mov     ecx, ds:?parities@?1??serial_parity_handler@@9@9[eax*8] ; `serial_parity_handler'::`2'::parities
.text:0000068B                 push    ecx
.text:0000068C                 mov     edx, [ebp+arg_4]
.text:0000068F                 push    edx
.text:00000690                 mov     eax, [ebp+arg_0]
.text:00000693                 push    eax
.text:00000694                 call    _dlg_listbox_addwithid
.text:00000699                 add     esp, 10h
.text:0000069C
.text:0000069C loc_69C:                                ; CODE XREF: _serial_parity_handler+8Cj
.text:0000069C                 jmp     short loc_658
.text:0000069E ; ---------------------------------------------------------------------------
.text:0000069E
.text:0000069E loc_69E:                                ; CODE XREF: _serial_parity_handler+7Dj
.text:0000069E                 mov     [ebp+var_C], 0
.text:000006A5                 mov     ecx, [ebp+var_C]
.text:000006A8                 mov     [ebp+var_8], ecx
.text:000006AB                 jmp     short loc_6B6
.text:000006AD ; ---------------------------------------------------------------------------
.text:000006AD
.text:000006AD loc_6AD:                                ; CODE XREF: _serial_parity_handler:loc_6F9j
.text:000006AD                 mov     edx, [ebp+var_8]
.text:000006B0                 add     edx, 1
.text:000006B3                 mov     [ebp+var_8], edx
.text:000006B6
.text:000006B6 loc_6B6:                                ; CODE XREF: _serial_parity_handler+C3j
.text:000006B6                 cmp     [ebp+var_8], 5
.text:000006BA                 jnb     short loc_6FB
.text:000006BC                 mov     eax, 1
.text:000006C1                 mov     ecx, [ebp+var_8]
.text:000006C4                 shl     eax, cl
.text:000006C6                 and     eax, [ebp+var_4]
.text:000006C9                 jz      short loc_6F9
.text:000006CB                 mov     ecx, [ebp+var_8]
.text:000006CE                 mov     edx, [ebp+var_14]
.text:000006D1                 cmp     edx, ds:dword_274[ecx*8]
.text:000006D8                 jnz     short loc_6F0
.text:000006DA                 mov     eax, [ebp+var_C]
.text:000006DD                 push    eax
.text:000006DE                 mov     ecx, [ebp+arg_4]
.text:000006E1                 push    ecx
.text:000006E2                 mov     edx, [ebp+arg_0]
.text:000006E5                 push    edx
.text:000006E6                 call    _dlg_listbox_select
.text:000006EB                 add     esp, 0Ch
.text:000006EE                 jmp     short loc_6FB
.text:000006F0 ; ---------------------------------------------------------------------------
.text:000006F0
.text:000006F0 loc_6F0:                                ; CODE XREF: _serial_parity_handler+F0j
.text:000006F0                 mov     eax, [ebp+var_C]
.text:000006F3                 add     eax, 1
.text:000006F6                 mov     [ebp+var_C], eax
.text:000006F9
.text:000006F9 loc_6F9:                                ; CODE XREF: _serial_parity_handler+E1j
.text:000006F9                 jmp     short loc_6AD
.text:000006FB ; ---------------------------------------------------------------------------
.text:000006FB
.text:000006FB loc_6FB:                                ; CODE XREF: _serial_parity_handler+D2j
.text:000006FB                                         ; _serial_parity_handler+106j
.text:000006FB                 cmp     [ebp+var_8], 5
.text:000006FF                 jnz     short loc_71A
.text:00000701                 push    0
.text:00000703                 mov     ecx, [ebp+arg_4]
.text:00000706                 push    ecx
.text:00000707                 mov     edx, [ebp+arg_0]
.text:0000070A                 push    edx
.text:0000070B                 call    _dlg_listbox_select
.text:00000710                 add     esp, 0Ch
.text:00000713                 mov     [ebp+var_14], 0
.text:0000071A
.text:0000071A loc_71A:                                ; CODE XREF: _serial_parity_handler+117j
.text:0000071A                 mov     eax, [ebp+arg_4]
.text:0000071D                 push    eax
.text:0000071E                 mov     ecx, [ebp+arg_0]
.text:00000721                 push    ecx
.text:00000722                 call    _dlg_update_done
.text:00000727                 add     esp, 8
.text:0000072A                 mov     edx, [ebp+var_14]
.text:0000072D                 push    edx
.text:0000072E                 push    3Bh ; ';'
.text:00000730                 mov     eax, [ebp+var_10]
.text:00000733                 push    eax
.text:00000734                 call    _conf_set_int
.text:00000739                 add     esp, 0Ch
.text:0000073C                 jmp     short loc_78F
.text:0000073E ; ---------------------------------------------------------------------------
.text:0000073E
.text:0000073E loc_73E:                                ; CODE XREF: _serial_parity_handler+30j
.text:0000073E                 cmp     [ebp+arg_C], 3
.text:00000742                 jnz     short loc_78F
.text:00000744                 mov     ecx, [ebp+arg_4]
.text:00000747                 push    ecx
.text:00000748                 mov     edx, [ebp+arg_0]
.text:0000074B                 push    edx
.text:0000074C                 call    _dlg_listbox_index
.text:00000751                 add     esp, 8
.text:00000754                 mov     [ebp+var_18], eax
.text:00000757                 cmp     [ebp+var_18], 0
.text:0000075B                 jge     short loc_766
.text:0000075D                 mov     [ebp+var_18], 0
.text:00000764                 jmp     short loc_77D
.text:00000766 ; ---------------------------------------------------------------------------
.text:00000766
.text:00000766 loc_766:                                ; CODE XREF: _serial_parity_handler+173j
.text:00000766                 mov     eax, [ebp+var_18]
.text:00000769                 push    eax
.text:0000076A                 mov     ecx, [ebp+arg_4]
.text:0000076D                 push    ecx
.text:0000076E                 mov     edx, [ebp+arg_0]
.text:00000771                 push    edx
.text:00000772                 call    _dlg_listbox_getid
.text:00000777                 add     esp, 0Ch
.text:0000077A                 mov     [ebp+var_18], eax
.text:0000077D
.text:0000077D loc_77D:                                ; CODE XREF: _serial_parity_handler+17Cj
.text:0000077D                 mov     eax, [ebp+var_18]
.text:00000780                 push    eax
.text:00000781                 push    3Bh ; ';'
.text:00000783                 mov     ecx, [ebp+var_10]
.text:00000786                 push    ecx
.text:00000787                 call    _conf_set_int
.text:0000078C                 add     esp, 0Ch
.text:0000078F
.text:0000078F loc_78F:                                ; CODE XREF: _serial_parity_handler+154j
.text:0000078F                                         ; _serial_parity_handler+15Aj
.text:0000078F                 add     esp, 18h
.text:00000792                 cmp     ebp, esp
.text:00000794                 call    __RTC_CheckEsp
.text:00000799                 mov     esp, ebp
.text:0000079B                 pop     ebp
.text:0000079C                 retn
.text:0000079C _serial_parity_handler endp
.text:0000079C
.text:0000079C ; ---------------------------------------------------------------------------
.text:0000079D                 db 0Bh dup(0CCh)
.text:000007A8
.text:000007A8 ; =============== S U B R O U T I N E =======================================
.text:000007A8
.text:000007A8 ; Attributes: bp-based frame
.text:000007A8
.text:000007A8 _serial_flow_handler proc near          ; DATA XREF: _ser_setup_config_box+2EFo
.text:000007A8
.text:000007A8 var_18          = dword ptr -18h
.text:000007A8 var_14          = dword ptr -14h
.text:000007A8 var_10          = dword ptr -10h
.text:000007A8 var_C           = dword ptr -0Ch
.text:000007A8 var_8           = dword ptr -8
.text:000007A8 var_4           = dword ptr -4
.text:000007A8 arg_0           = dword ptr  8
.text:000007A8 arg_4           = dword ptr  0Ch
.text:000007A8 arg_8           = dword ptr  10h
.text:000007A8 arg_C           = dword ptr  14h
.text:000007A8
.text:000007A8                 push    ebp
.text:000007A9                 mov     ebp, esp
.text:000007AB                 sub     esp, 18h
.text:000007AE                 mov     eax, 0CCCCCCCCh
.text:000007B3                 mov     [ebp+var_18], eax
.text:000007B6                 mov     [ebp+var_14], eax
.text:000007B9                 mov     [ebp+var_10], eax
.text:000007BC                 mov     [ebp+var_C], eax
.text:000007BF                 mov     [ebp+var_8], eax
.text:000007C2                 mov     [ebp+var_4], eax
.text:000007C5                 mov     eax, [ebp+arg_0]
.text:000007C8                 mov     ecx, [eax+14h]
.text:000007CB                 mov     [ebp+var_4], ecx
.text:000007CE                 mov     edx, [ebp+arg_8]
.text:000007D1                 mov     [ebp+var_10], edx
.text:000007D4                 cmp     [ebp+arg_C], 0
.text:000007D8                 jnz     loc_8FE
.text:000007DE                 push    3Ch ; '<'
.text:000007E0                 mov     eax, [ebp+var_10]
.text:000007E3                 push    eax
.text:000007E4                 call    _conf_get_int
.text:000007E9                 add     esp, 8
.text:000007EC                 mov     [ebp+var_14], eax
.text:000007EF                 mov     ecx, [ebp+arg_4]
.text:000007F2                 push    ecx
.text:000007F3                 mov     edx, [ebp+arg_0]
.text:000007F6                 push    edx
.text:000007F7                 call    _dlg_update_start
.text:000007FC                 add     esp, 8
.text:000007FF                 mov     eax, [ebp+arg_4]
.text:00000802                 push    eax
.text:00000803                 mov     ecx, [ebp+arg_0]
.text:00000806                 push    ecx
.text:00000807                 call    _dlg_listbox_clear
.text:0000080C                 add     esp, 8
.text:0000080F                 mov     [ebp+var_8], 0
.text:00000816                 jmp     short loc_821
.text:00000818 ; ---------------------------------------------------------------------------
.text:00000818
.text:00000818 loc_818:                                ; CODE XREF: _serial_flow_handler:loc_85Cj
.text:00000818                 mov     edx, [ebp+var_8]
.text:0000081B                 add     edx, 1
.text:0000081E                 mov     [ebp+var_8], edx
.text:00000821
.text:00000821 loc_821:                                ; CODE XREF: _serial_flow_handler+6Ej
.text:00000821                 cmp     [ebp+var_8], 4
.text:00000825                 jnb     short loc_85E
.text:00000827                 mov     eax, 1
.text:0000082C                 mov     ecx, [ebp+var_8]
.text:0000082F                 shl     eax, cl
.text:00000831                 and     eax, [ebp+var_4]
.text:00000834                 jz      short loc_85C
.text:00000836                 mov     ecx, [ebp+var_8]
.text:00000839                 mov     edx, ds:dword_29C[ecx*8]
.text:00000840                 push    edx
.text:00000841                 mov     eax, [ebp+var_8]
.text:00000844                 mov     ecx, ds:?flows@?1??serial_flow_handler@@9@9[eax*8] ; `serial_flow_handler'::`2'::flows
.text:0000084B                 push    ecx
.text:0000084C                 mov     edx, [ebp+arg_4]
.text:0000084F                 push    edx
.text:00000850                 mov     eax, [ebp+arg_0]
.text:00000853                 push    eax
.text:00000854                 call    _dlg_listbox_addwithid
.text:00000859                 add     esp, 10h
.text:0000085C
.text:0000085C loc_85C:                                ; CODE XREF: _serial_flow_handler+8Cj
.text:0000085C                 jmp     short loc_818
.text:0000085E ; ---------------------------------------------------------------------------
.text:0000085E
.text:0000085E loc_85E:                                ; CODE XREF: _serial_flow_handler+7Dj
.text:0000085E                 mov     [ebp+var_C], 0
.text:00000865                 mov     ecx, [ebp+var_C]
.text:00000868                 mov     [ebp+var_8], ecx
.text:0000086B                 jmp     short loc_876
.text:0000086D ; ---------------------------------------------------------------------------
.text:0000086D
.text:0000086D loc_86D:                                ; CODE XREF: _serial_flow_handler:loc_8B9j
.text:0000086D                 mov     edx, [ebp+var_8]
.text:00000870                 add     edx, 1
.text:00000873                 mov     [ebp+var_8], edx
.text:00000876
.text:00000876 loc_876:                                ; CODE XREF: _serial_flow_handler+C3j
.text:00000876                 cmp     [ebp+var_8], 4
.text:0000087A                 jnb     short loc_8BB
.text:0000087C                 mov     eax, 1
.text:00000881                 mov     ecx, [ebp+var_8]
.text:00000884                 shl     eax, cl
.text:00000886                 and     eax, [ebp+var_4]
.text:00000889                 jz      short loc_8B9
.text:0000088B                 mov     ecx, [ebp+var_8]
.text:0000088E                 mov     edx, [ebp+var_14]
.text:00000891                 cmp     edx, ds:dword_29C[ecx*8]
.text:00000898                 jnz     short loc_8B0
.text:0000089A                 mov     eax, [ebp+var_C]
.text:0000089D                 push    eax
.text:0000089E                 mov     ecx, [ebp+arg_4]
.text:000008A1                 push    ecx
.text:000008A2                 mov     edx, [ebp+arg_0]
.text:000008A5                 push    edx
.text:000008A6                 call    _dlg_listbox_select
.text:000008AB                 add     esp, 0Ch
.text:000008AE                 jmp     short loc_8BB
.text:000008B0 ; ---------------------------------------------------------------------------
.text:000008B0
.text:000008B0 loc_8B0:                                ; CODE XREF: _serial_flow_handler+F0j
.text:000008B0                 mov     eax, [ebp+var_C]
.text:000008B3                 add     eax, 1
.text:000008B6                 mov     [ebp+var_C], eax
.text:000008B9
.text:000008B9 loc_8B9:                                ; CODE XREF: _serial_flow_handler+E1j
.text:000008B9                 jmp     short loc_86D
.text:000008BB ; ---------------------------------------------------------------------------
.text:000008BB
.text:000008BB loc_8BB:                                ; CODE XREF: _serial_flow_handler+D2j
.text:000008BB                                         ; _serial_flow_handler+106j
.text:000008BB                 cmp     [ebp+var_8], 4
.text:000008BF                 jnz     short loc_8DA
.text:000008C1                 push    0
.text:000008C3                 mov     ecx, [ebp+arg_4]
.text:000008C6                 push    ecx
.text:000008C7                 mov     edx, [ebp+arg_0]
.text:000008CA                 push    edx
.text:000008CB                 call    _dlg_listbox_select
.text:000008D0                 add     esp, 0Ch
.text:000008D3                 mov     [ebp+var_14], 0
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: _serial_flow_handler+117j
.text:000008DA                 mov     eax, [ebp+arg_4]
.text:000008DD                 push    eax
.text:000008DE                 mov     ecx, [ebp+arg_0]
.text:000008E1                 push    ecx
.text:000008E2                 call    _dlg_update_done
.text:000008E7                 add     esp, 8
.text:000008EA                 mov     edx, [ebp+var_14]
.text:000008ED                 push    edx
.text:000008EE                 push    3Ch ; '<'
.text:000008F0                 mov     eax, [ebp+var_10]
.text:000008F3                 push    eax
.text:000008F4                 call    _conf_set_int
.text:000008F9                 add     esp, 0Ch
.text:000008FC                 jmp     short loc_94F
.text:000008FE ; ---------------------------------------------------------------------------
.text:000008FE
.text:000008FE loc_8FE:                                ; CODE XREF: _serial_flow_handler+30j
.text:000008FE                 cmp     [ebp+arg_C], 3
.text:00000902                 jnz     short loc_94F
.text:00000904                 mov     ecx, [ebp+arg_4]
.text:00000907                 push    ecx
.text:00000908                 mov     edx, [ebp+arg_0]
.text:0000090B                 push    edx
.text:0000090C                 call    _dlg_listbox_index
.text:00000911                 add     esp, 8
.text:00000914                 mov     [ebp+var_18], eax
.text:00000917                 cmp     [ebp+var_18], 0
.text:0000091B                 jge     short loc_926
.text:0000091D                 mov     [ebp+var_18], 0
.text:00000924                 jmp     short loc_93D
.text:00000926 ; ---------------------------------------------------------------------------
.text:00000926
.text:00000926 loc_926:                                ; CODE XREF: _serial_flow_handler+173j
.text:00000926                 mov     eax, [ebp+var_18]
.text:00000929                 push    eax
.text:0000092A                 mov     ecx, [ebp+arg_4]
.text:0000092D                 push    ecx
.text:0000092E                 mov     edx, [ebp+arg_0]
.text:00000931                 push    edx
.text:00000932                 call    _dlg_listbox_getid
.text:00000937                 add     esp, 0Ch
.text:0000093A                 mov     [ebp+var_18], eax
.text:0000093D
.text:0000093D loc_93D:                                ; CODE XREF: _serial_flow_handler+17Cj
.text:0000093D                 mov     eax, [ebp+var_18]
.text:00000940                 push    eax
.text:00000941                 push    3Ch ; '<'
.text:00000943                 mov     ecx, [ebp+var_10]
.text:00000946                 push    ecx
.text:00000947                 call    _conf_set_int
.text:0000094C                 add     esp, 0Ch
.text:0000094F
.text:0000094F loc_94F:                                ; CODE XREF: _serial_flow_handler+154j
.text:0000094F                                         ; _serial_flow_handler+15Aj
.text:0000094F                 add     esp, 18h
.text:00000952                 cmp     ebp, esp
.text:00000954                 call    __RTC_CheckEsp
.text:00000959                 mov     esp, ebp
.text:0000095B                 pop     ebp
.text:0000095C                 retn
.text:0000095C _serial_flow_handler endp
.text:0000095C
.text:0000095C ; ---------------------------------------------------------------------------
.text:0000095D                 align 10h
.text:0000095D _text           ends
.text:0000095D
.rtc$TMZ:00000960 ; ===========================================================================
.rtc$TMZ:00000960
.rtc$TMZ:00000960 ; Segment type: Pure data
.rtc$TMZ:00000960 ; Segment permissions: Read
.rtc$TMZ:00000960 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000960                 assume cs:_rtc$TMZ
.rtc$TMZ:00000960                 ;org 960h
.rtc$TMZ:00000960 ; COMDAT (pick any)
.rtc$TMZ:00000960 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000960 _rtc$TMZ        ends
.rtc$TMZ:00000960
.rtc$IMZ:00000964 ; ===========================================================================
.rtc$IMZ:00000964
.rtc$IMZ:00000964 ; Segment type: Pure data
.rtc$IMZ:00000964 ; Segment permissions: Read
.rtc$IMZ:00000964 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000964                 assume cs:_rtc$IMZ
.rtc$IMZ:00000964                 ;org 964h
.rtc$IMZ:00000964 ; COMDAT (pick any)
.rtc$IMZ:00000964 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000964 _rtc$IMZ        ends
.rtc$IMZ:00000964
UNDEF:00000970 ; ===========================================================================
UNDEF:00000970
UNDEF:00000970 ; Segment type: Externs
UNDEF:00000970 ; UNDEF
UNDEF:00000970                 extrn _ctrl_droplist:near
UNDEF:00000970                                         ; CODE XREF: _ser_setup_config_box+2DAp
UNDEF:00000970                                         ; _ser_setup_config_box+30Fp
UNDEF:00000974                 extrn _ctrl_editbox:near
UNDEF:00000974                                         ; CODE XREF: _ser_setup_config_box+1CDp
UNDEF:00000974                                         ; _ser_setup_config_box+229p ...
UNDEF:00000978                 extrn _P:near           ; CODE XREF: _ser_setup_config_box+1B7p
UNDEF:00000978                                         ; _ser_setup_config_box+213p ...
UNDEF:0000097C                 extrn _conf_editbox_handler:near
UNDEF:0000097C                                         ; DATA XREF: _ser_setup_config_box+1ADo
UNDEF:0000097C                                         ; _ser_setup_config_box+209o ...
UNDEF:00000980                 extrn _ctrl_settitle:near
UNDEF:00000980                                         ; CODE XREF: _ser_setup_config_box+16Bp
UNDEF:00000984                 extrn _I:near           ; CODE XREF: _ser_setup_config_box+108p
UNDEF:00000984                                         ; _ser_setup_config_box+199p ...
UNDEF:00000988                 extrn _dupstr:near      ; CODE XREF: _ser_setup_config_box+D0p
UNDEF:0000098C                 extrn _saferealloc:near ; CODE XREF: _ser_setup_config_box+BDp
UNDEF:0000098C                                         ; _ser_setup_config_box+F8p ...
UNDEF:00000990                 extrn _config_protocolbuttons_handler:near
UNDEF:00000990                                         ; DATA XREF: _ser_setup_config_box+82o
UNDEF:00000994                 extrn _ctrl_getset:near ; CODE XREF: _ser_setup_config_box+38p
UNDEF:00000994                                         ; _ser_setup_config_box+18Cp ...
UNDEF:00000998                 extrn __RTC_CheckEsp:near
UNDEF:00000998                                         ; CODE XREF: _ser_setup_config_box+31Cp
UNDEF:00000998                                         ; _serial_parity_handler+1ACp ...
UNDEF:0000099C                 extrn __RTC_Shutdown:near
UNDEF:0000099C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000009A0                 extrn __RTC_InitBase:near
UNDEF:000009A0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000009A4                 extrn _dlg_listbox_getid:near
UNDEF:000009A4                                         ; CODE XREF: _serial_parity_handler+18Ap
UNDEF:000009A4                                         ; _serial_flow_handler+18Ap
UNDEF:000009A8                 extrn _dlg_listbox_index:near
UNDEF:000009A8                                         ; CODE XREF: _serial_parity_handler+164p
UNDEF:000009A8                                         ; _serial_flow_handler+164p
UNDEF:000009AC                 extrn _conf_set_int:near
UNDEF:000009AC                                         ; CODE XREF: _serial_parity_handler+14Cp
UNDEF:000009AC                                         ; _serial_parity_handler+19Fp ...
UNDEF:000009B0                 extrn _dlg_update_done:near
UNDEF:000009B0                                         ; CODE XREF: _serial_parity_handler+13Ap
UNDEF:000009B0                                         ; _serial_flow_handler+13Ap
UNDEF:000009B4                 extrn _dlg_listbox_select:near
UNDEF:000009B4                                         ; CODE XREF: _serial_parity_handler+FEp
UNDEF:000009B4                                         ; _serial_parity_handler+123p ...
UNDEF:000009B8                 extrn _dlg_listbox_addwithid:near
UNDEF:000009B8                                         ; CODE XREF: _serial_parity_handler+ACp
UNDEF:000009B8                                         ; _serial_flow_handler+ACp
UNDEF:000009BC                 extrn _dlg_listbox_clear:near
UNDEF:000009BC                                         ; CODE XREF: _serial_parity_handler+5Fp
UNDEF:000009BC                                         ; _serial_flow_handler+5Fp
UNDEF:000009C0                 extrn _dlg_update_start:near
UNDEF:000009C0                                         ; CODE XREF: _serial_parity_handler+4Fp
UNDEF:000009C0                                         ; _serial_flow_handler+4Fp
UNDEF:000009C4                 extrn _conf_get_int:near
UNDEF:000009C4                                         ; CODE XREF: _serial_parity_handler+3Cp
UNDEF:000009C4                                         ; _serial_flow_handler+3Cp
UNDEF:000009C4
UNDEF:000009C4
UNDEF:000009C4                 end