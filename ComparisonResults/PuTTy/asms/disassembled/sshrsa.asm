.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : A213404935E7233A06899D4F17A24960
.data:00000000 ; Input CRC32 : 799764BC
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshrsa.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG7284         db 'RSA deterministic blinding',0
.data:00000000                                         ; DATA XREF: _rsa_privkey_op+115o
.data:0000001B                 align 4
.data:0000001C ; char _SG7312[]
.data:0000001C $SG7312         db '0x',0               ; DATA XREF: _rsastr_fmt+39o
.data:0000001F                 align 10h
.data:00000020 ; char _SG7317[]
.data:00000020 $SG7317         db ',0x',0              ; DATA XREF: _rsastr_fmt:loc_EFCo
.data:00000024 ; char _SG7343[]
.data:00000024 $SG7343         db '%d ',0              ; DATA XREF: _rsa_fingerprint+148o
.data:00000028 $SG7347         dd offset $SG7454+6     ; DATA XREF: _rsa_fingerprint+189o
.data:00000028                                         ; "a"
.data:0000002C ; char _SG7349[]
.data:0000002C $SG7349         db '%s%02x',0           ; DATA XREF: _rsa_fingerprint+1B2o
.data:00000033                 align 4
.data:00000034 $SG7454         db 'ssh-rsa',0          ; DATA XREF: _rsa2_newkey+55o
.data:00000034                                         ; .data:$SG7347o ...
.data:0000003C $SG7497         db 'ssh-rsa',0          ; DATA XREF: _rsa2_public_blob+B2o
.data:00000044 $SG7513:                                ; DATA XREF: _rsa2_public_blob+1C2o
.data:00000044                 unicode 0, <..\..\..\sshrsa.c>,0
.data:00000068 $SG7514:                                ; DATA XREF: _rsa2_public_blob+1C7o
.data:00000068                 unicode 0, <p == blob + bloblen>,0
.data:00000090 $SG7562:                                ; DATA XREF: _rsa2_private_blob+29Ao
.data:00000090                 unicode 0, <..\..\..\sshrsa.c>,0
.data:000000B4 $SG7563:                                ; DATA XREF: _rsa2_private_blob+29Fo
.data:000000B4                 unicode 0, <p == blob + bloblen>,0
.data:000000DC $SG7675         db    0                 ; DATA XREF: _rsa2_fingerprint+3Ao
.data:000000DD                 db    0
.data:000000DE                 db    0
.data:000000DF                 db    7
.data:000000E0                 db  73h ; s
.data:000000E1                 db  73h ; s
.data:000000E2                 db  68h ; h
.data:000000E3                 db  2Dh ; -
.data:000000E4                 db  72h ; r
.data:000000E5                 db  73h ; s
.data:000000E6                 db  61h ; a
.data:000000E7                 db    0
.data:000000E8 ; char _SG7692[]
.data:000000E8 $SG7692         db 'ssh-rsa %d ',0      ; DATA XREF: _rsa2_fingerprint+20Fo
.data:000000F4 $SG7696         dd offset $SG7454+6     ; DATA XREF: _rsa2_fingerprint+250o
.data:000000F4                                         ; "a"
.data:000000F8 ; char _SG7698[]
.data:000000F8 $SG7698         db '%s%02x',0           ; DATA XREF: _rsa2_fingerprint+279o
.data:000000FF                 align 10h
.data:00000100 $SG7728         db 'ssh-rsa',0          ; DATA XREF: _rsa2_verifysig+4Co
.data:00000108 $SG7767:                                ; DATA XREF: _rsa2_sign+68o
.data:00000108                 unicode 0, <..\..\..\sshrsa.c>,0
.data:0000012C $SG7768:                                ; DATA XREF: _rsa2_sign+6Do
.data:0000012C                 unicode 0, <1 >
.data:0000012C                 dw 3Ch
.data:0000012C                 unicode 0, <= nbytes - 20 - ASN1_LEN>,0
.data:00000164 $SG7788         db 'ssh-rsa',0          ; DATA XREF: _rsa2_sign+1C2o
.data:0000016C $SG7796         db 'ssh-rsa',0          ; DATA XREF: .rdata:00000304o
.data:00000174 $SG7797         db 'rsa2',0             ; DATA XREF: .rdata:00000308o
.data:00000179                 align 4
.data:0000017C $SG7835:                                ; DATA XREF: _oaep_mask+68o
.data:0000017C                 unicode 0, <..\..\..\sshrsa.c>,0
.data:000001A0 $SG7836:                                ; DATA XREF: _oaep_mask+6Do
.data:000001A0                 unicode 0, <h->
.data:000001A0                 dw 3Eh
.data:000001A0                 unicode 0, <hlen >
.data:000001A0                 dw 3Ch
.data:000001A0                 unicode 0, <= SSH2_KEX_MAX_HASH_LEN>,0
.data:000001E2                 align 4
.data:000001E4 $SG7866:                                ; DATA XREF: _ssh_rsakex_encrypt+6Fo
.data:000001E4                 unicode 0, <..\..\..\sshrsa.c>,0
.data:00000208 $SG7867:                                ; DATA XREF: _ssh_rsakex_encrypt+74o
.data:00000208                 unicode 0, <inlen >
.data:00000208                 dw 3Eh
.data:00000208                 unicode 0, < 0 && inlen >
.data:00000208                 dw 3Ch
.data:00000208                 unicode 0, <= k - 2*HLEN - 2>,0
.data:00000252                 align 4
.data:00000254 $SG7869:                                ; DATA XREF: _ssh_rsakex_encrypt+8Eo
.data:00000254                 unicode 0, <..\..\..\sshrsa.c>,0
.data:00000278 $SG7870:                                ; DATA XREF: _ssh_rsakex_encrypt+93o
.data:00000278                 unicode 0, <outlen == k>,0
.data:00000290 $SG7879         db 'rsa1024-sha1',0     ; DATA XREF: .rdata:_ssh_rsa_kex_sha1o
.data:0000029D                 align 10h
.data:000002A0 $SG7884         db 'rsa2048-sha256',0   ; DATA XREF: .rdata:_ssh_rsa_kex_sha256o
.data:000002AF                 align 10h
.data:000002AF _data           ends
.data:000002AF
.rdata:000002B0 ; ===========================================================================
.rdata:000002B0
.rdata:000002B0 ; Segment type: Pure data
.rdata:000002B0 ; Segment permissions: Read
.rdata:000002B0 _rdata          segment dword public 'DATA' use32
.rdata:000002B0                 assume cs:_rdata
.rdata:000002B0                 ;org 2B0h
.rdata:000002B0 ?hex@?1??rsastr_fmt@@9@9 db 30h         ; DATA XREF: _rsastr_fmt+C9r
.rdata:000002B0                                         ; _rsastr_fmt+16Cr
.rdata:000002B1 a123456789abcde db '123456789abcdef',0
.rdata:000002C1                 align 4
.rdata:000002C4 _asn1_weird_stuff db 0                  ; DATA XREF: _rsa2_verifysig+188r
.rdata:000002C4                                         ; _rsa2_sign+F1r
.rdata:000002C5                 db  30h ; 0
.rdata:000002C6                 db  21h ; !
.rdata:000002C7                 db  30h ; 0
.rdata:000002C8                 db    9
.rdata:000002C9                 db    6
.rdata:000002CA                 db    5
.rdata:000002CB                 db  2Bh ; +
.rdata:000002CC                 db  0Eh
.rdata:000002CD                 db    3
.rdata:000002CE                 db    2
.rdata:000002CF                 db  1Ah
.rdata:000002D0                 db    5
.rdata:000002D1                 db    0
.rdata:000002D2                 db    4
.rdata:000002D3                 db  14h
.rdata:000002D4                 public _ssh_rsa
.rdata:000002D4 _ssh_rsa        dd offset _rsa2_newkey
.rdata:000002D8                 dd offset _rsa2_freekey
.rdata:000002DC                 dd offset _rsa2_fmtkey
.rdata:000002E0                 dd offset _rsa2_public_blob
.rdata:000002E4                 dd offset _rsa2_private_blob
.rdata:000002E8                 dd offset _rsa2_createkey
.rdata:000002EC                 dd offset _rsa2_openssh_createkey
.rdata:000002F0                 dd offset _rsa2_openssh_fmtkey
.rdata:000002F4                 dd offset _rsa2_pubkey_bits
.rdata:000002F8                 dd offset _rsa2_fingerprint
.rdata:000002FC                 dd offset _rsa2_verifysig
.rdata:00000300                 dd offset _rsa2_sign
.rdata:00000304                 dd offset $SG7796       ; "ssh-rsa"
.rdata:00000308                 dd offset $SG7797       ; "rsa2"
.rdata:0000030C _ssh_rsa_kex_sha1 dd offset $SG7879     ; DATA XREF: .rdata:00000350o
.rdata:0000030C                                         ; "rsa1024-sha1"
.rdata:00000310                 db    0
.rdata:00000311                 db    0
.rdata:00000312                 db    0
.rdata:00000313                 db    0
.rdata:00000314                 db    1
.rdata:00000315                 db    0
.rdata:00000316                 db    0
.rdata:00000317                 db    0
.rdata:00000318                 db    0
.rdata:00000319                 db    0
.rdata:0000031A                 db    0
.rdata:0000031B                 db    0
.rdata:0000031C                 db    0
.rdata:0000031D                 db    0
.rdata:0000031E                 db    0
.rdata:0000031F                 db    0
.rdata:00000320                 db    0
.rdata:00000321                 db    0
.rdata:00000322                 db    0
.rdata:00000323                 db    0
.rdata:00000324                 db    0
.rdata:00000325                 db    0
.rdata:00000326                 db    0
.rdata:00000327                 db    0
.rdata:00000328                 dd offset _ssh_sha1
.rdata:0000032C _ssh_rsa_kex_sha256 dd offset $SG7884   ; DATA XREF: .rdata:_rsa_kex_listo
.rdata:0000032C                                         ; "rsa2048-sha256"
.rdata:00000330                 db    0
.rdata:00000331                 db    0
.rdata:00000332                 db    0
.rdata:00000333                 db    0
.rdata:00000334                 db    1
.rdata:00000335                 db    0
.rdata:00000336                 db    0
.rdata:00000337                 db    0
.rdata:00000338                 db    0
.rdata:00000339                 db    0
.rdata:0000033A                 db    0
.rdata:0000033B                 db    0
.rdata:0000033C                 db    0
.rdata:0000033D                 db    0
.rdata:0000033E                 db    0
.rdata:0000033F                 db    0
.rdata:00000340                 db    0
.rdata:00000341                 db    0
.rdata:00000342                 db    0
.rdata:00000343                 db    0
.rdata:00000344                 db    0
.rdata:00000345                 db    0
.rdata:00000346                 db    0
.rdata:00000347                 db    0
.rdata:00000348                 dd offset _ssh_sha256
.rdata:0000034C _rsa_kex_list   dd offset _ssh_rsa_kex_sha256 ; DATA XREF: .rdata:00000358o
.rdata:00000350                 dd offset _ssh_rsa_kex_sha1
.rdata:00000354                 public _ssh_rsa_kex
.rdata:00000354 _ssh_rsa_kex    db    2
.rdata:00000355                 db    0
.rdata:00000356                 db    0
.rdata:00000357                 db    0
.rdata:00000358                 dd offset _rsa_kex_list
.rdata:00000358 _rdata          ends
.rdata:00000358
.bss:0000035C ; ===========================================================================
.bss:0000035C
.bss:0000035C ; Segment type: Uninitialized
.bss:0000035C ; Segment permissions: Read/Write
.bss:0000035C _bss            segment byte public 'BSS' use32
.bss:0000035C                 assume cs:_bss
.bss:0000035C                 ;org 35Ch
.bss:0000035C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000035C $SG7348         db    ? ;               ; DATA XREF: _rsa_fingerprint:loc_1155o
.bss:0000035D $SG7697         db    ? ;               ; DATA XREF: _rsa2_fingerprint:loc_29DCo
.bss:0000035E                 align 10h
.bss:0000035E _bss            ends
.bss:0000035E
.text:00000360 ; ===========================================================================
.text:00000360
.text:00000360 ; Segment type: Pure code
.text:00000360 ; Segment permissions: Read/Execute
.text:00000360 _text           segment para public 'CODE' use32
.text:00000360                 assume cs:_text
.text:00000360                 ;org 360h
.text:00000360                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360                 public _makekey
.text:00000360 _makekey        proc near
.text:00000360
.text:00000360 var_18          = dword ptr -18h
.text:00000360 var_14          = dword ptr -14h
.text:00000360 var_10          = dword ptr -10h
.text:00000360 var_C           = dword ptr -0Ch
.text:00000360 var_8           = dword ptr -8
.text:00000360 var_4           = dword ptr -4
.text:00000360 arg_0           = dword ptr  8
.text:00000360 arg_4           = dword ptr  0Ch
.text:00000360 arg_8           = dword ptr  10h
.text:00000360 arg_C           = dword ptr  14h
.text:00000360 arg_10          = dword ptr  18h
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 sub     esp, 18h
.text:00000366                 mov     eax, 0CCCCCCCCh
.text:0000036B                 mov     [ebp+var_18], eax
.text:0000036E                 mov     [ebp+var_14], eax
.text:00000371                 mov     [ebp+var_10], eax
.text:00000374                 mov     [ebp+var_C], eax
.text:00000377                 mov     [ebp+var_8], eax
.text:0000037A                 mov     [ebp+var_4], eax
.text:0000037D                 mov     eax, [ebp+arg_0]
.text:00000380                 mov     [ebp+var_4], eax
.text:00000383                 cmp     [ebp+arg_4], 4
.text:00000387                 jge     short loc_391
.text:00000389                 or      eax, 0FFFFFFFFh
.text:0000038C                 jmp     loc_524
.text:00000391 ; ---------------------------------------------------------------------------
.text:00000391
.text:00000391 loc_391:                                ; CODE XREF: _makekey+27j
.text:00000391                 cmp     [ebp+arg_8], 0
.text:00000395                 jz      short loc_3DA
.text:00000397                 mov     ecx, [ebp+arg_8]
.text:0000039A                 mov     dword ptr [ecx], 0
.text:000003A0                 mov     [ebp+var_8], 0
.text:000003A7                 jmp     short loc_3B2
.text:000003A9 ; ---------------------------------------------------------------------------
.text:000003A9
.text:000003A9 loc_3A9:                                ; CODE XREF: _makekey+76j
.text:000003A9                 mov     edx, [ebp+var_8]
.text:000003AC                 add     edx, 1
.text:000003AF                 mov     [ebp+var_8], edx
.text:000003B2
.text:000003B2 loc_3B2:                                ; CODE XREF: _makekey+47j
.text:000003B2                 cmp     [ebp+var_8], 4
.text:000003B6                 jge     short loc_3D8
.text:000003B8                 mov     eax, [ebp+arg_8]
.text:000003BB                 mov     ecx, [eax]
.text:000003BD                 shl     ecx, 8
.text:000003C0                 mov     edx, [ebp+var_4]
.text:000003C3                 movzx   eax, byte ptr [edx]
.text:000003C6                 add     ecx, eax
.text:000003C8                 mov     edx, [ebp+arg_8]
.text:000003CB                 mov     [edx], ecx
.text:000003CD                 mov     eax, [ebp+var_4]
.text:000003D0                 add     eax, 1
.text:000003D3                 mov     [ebp+var_4], eax
.text:000003D6                 jmp     short loc_3A9
.text:000003D8 ; ---------------------------------------------------------------------------
.text:000003D8
.text:000003D8 loc_3D8:                                ; CODE XREF: _makekey+56j
.text:000003D8                 jmp     short loc_3E3
.text:000003DA ; ---------------------------------------------------------------------------
.text:000003DA
.text:000003DA loc_3DA:                                ; CODE XREF: _makekey+35j
.text:000003DA                 mov     ecx, [ebp+var_4]
.text:000003DD                 add     ecx, 4
.text:000003E0                 mov     [ebp+var_4], ecx
.text:000003E3
.text:000003E3 loc_3E3:                                ; CODE XREF: _makekey:loc_3D8j
.text:000003E3                 mov     edx, [ebp+arg_4]
.text:000003E6                 sub     edx, 4
.text:000003E9                 mov     [ebp+arg_4], edx
.text:000003EC                 cmp     [ebp+arg_10], 0
.text:000003F0                 jnz     short loc_441
.text:000003F2                 cmp     [ebp+arg_8], 0
.text:000003F6                 jz      short loc_403
.text:000003F8                 mov     eax, [ebp+arg_8]
.text:000003FB                 add     eax, 0Ch
.text:000003FE                 mov     [ebp+var_10], eax
.text:00000401                 jmp     short loc_40A
.text:00000403 ; ---------------------------------------------------------------------------
.text:00000403
.text:00000403 loc_403:                                ; CODE XREF: _makekey+96j
.text:00000403                 mov     [ebp+var_10], 0
.text:0000040A
.text:0000040A loc_40A:                                ; CODE XREF: _makekey+A1j
.text:0000040A                 mov     ecx, [ebp+var_10]
.text:0000040D                 push    ecx
.text:0000040E                 mov     edx, [ebp+arg_4]
.text:00000411                 push    edx
.text:00000412                 mov     eax, [ebp+var_4]
.text:00000415                 push    eax
.text:00000416                 call    _ssh1_read_bignum
.text:0000041B                 add     esp, 0Ch
.text:0000041E                 mov     [ebp+var_C], eax
.text:00000421                 cmp     [ebp+var_C], 0
.text:00000425                 jge     short loc_42F
.text:00000427                 or      eax, 0FFFFFFFFh
.text:0000042A                 jmp     loc_524
.text:0000042F ; ---------------------------------------------------------------------------
.text:0000042F
.text:0000042F loc_42F:                                ; CODE XREF: _makekey+C5j
.text:0000042F                 mov     ecx, [ebp+var_4]
.text:00000432                 add     ecx, [ebp+var_C]
.text:00000435                 mov     [ebp+var_4], ecx
.text:00000438                 mov     edx, [ebp+arg_4]
.text:0000043B                 sub     edx, [ebp+var_C]
.text:0000043E                 mov     [ebp+arg_4], edx
.text:00000441
.text:00000441 loc_441:                                ; CODE XREF: _makekey+90j
.text:00000441                 cmp     [ebp+arg_8], 0
.text:00000445                 jz      short loc_452
.text:00000447                 mov     eax, [ebp+arg_8]
.text:0000044A                 add     eax, 8
.text:0000044D                 mov     [ebp+var_14], eax
.text:00000450                 jmp     short loc_459
.text:00000452 ; ---------------------------------------------------------------------------
.text:00000452
.text:00000452 loc_452:                                ; CODE XREF: _makekey+E5j
.text:00000452                 mov     [ebp+var_14], 0
.text:00000459
.text:00000459 loc_459:                                ; CODE XREF: _makekey+F0j
.text:00000459                 mov     ecx, [ebp+var_14]
.text:0000045C                 push    ecx
.text:0000045D                 mov     edx, [ebp+arg_4]
.text:00000460                 push    edx
.text:00000461                 mov     eax, [ebp+var_4]
.text:00000464                 push    eax
.text:00000465                 call    _ssh1_read_bignum
.text:0000046A                 add     esp, 0Ch
.text:0000046D                 mov     [ebp+var_C], eax
.text:00000470                 cmp     [ebp+var_C], 0
.text:00000474                 jl      short loc_48F
.text:00000476                 cmp     [ebp+arg_8], 0
.text:0000047A                 jz      short loc_497
.text:0000047C                 mov     ecx, [ebp+arg_8]
.text:0000047F                 mov     edx, [ecx+8]
.text:00000482                 push    edx
.text:00000483                 call    _bignum_bitcount
.text:00000488                 add     esp, 4
.text:0000048B                 test    eax, eax
.text:0000048D                 jnz     short loc_497
.text:0000048F
.text:0000048F loc_48F:                                ; CODE XREF: _makekey+114j
.text:0000048F                 or      eax, 0FFFFFFFFh
.text:00000492                 jmp     loc_524
.text:00000497 ; ---------------------------------------------------------------------------
.text:00000497
.text:00000497 loc_497:                                ; CODE XREF: _makekey+11Aj
.text:00000497                                         ; _makekey+12Dj
.text:00000497                 cmp     [ebp+arg_8], 0
.text:0000049B                 jz      short loc_4A9
.text:0000049D                 mov     eax, [ebp+var_C]
.text:000004A0                 sub     eax, 2
.text:000004A3                 mov     ecx, [ebp+arg_8]
.text:000004A6                 mov     [ecx+4], eax
.text:000004A9
.text:000004A9 loc_4A9:                                ; CODE XREF: _makekey+13Bj
.text:000004A9                 cmp     [ebp+arg_C], 0
.text:000004AD                 jz      short loc_4BA
.text:000004AF                 mov     edx, [ebp+var_4]
.text:000004B2                 add     edx, 2
.text:000004B5                 mov     eax, [ebp+arg_C]
.text:000004B8                 mov     [eax], edx
.text:000004BA
.text:000004BA loc_4BA:                                ; CODE XREF: _makekey+14Dj
.text:000004BA                 mov     ecx, [ebp+var_4]
.text:000004BD                 add     ecx, [ebp+var_C]
.text:000004C0                 mov     [ebp+var_4], ecx
.text:000004C3                 mov     edx, [ebp+arg_4]
.text:000004C6                 sub     edx, [ebp+var_C]
.text:000004C9                 mov     [ebp+arg_4], edx
.text:000004CC                 cmp     [ebp+arg_10], 1
.text:000004D0                 jnz     short loc_51E
.text:000004D2                 cmp     [ebp+arg_8], 0
.text:000004D6                 jz      short loc_4E3
.text:000004D8                 mov     eax, [ebp+arg_8]
.text:000004DB                 add     eax, 0Ch
.text:000004DE                 mov     [ebp+var_18], eax
.text:000004E1                 jmp     short loc_4EA
.text:000004E3 ; ---------------------------------------------------------------------------
.text:000004E3
.text:000004E3 loc_4E3:                                ; CODE XREF: _makekey+176j
.text:000004E3                 mov     [ebp+var_18], 0
.text:000004EA
.text:000004EA loc_4EA:                                ; CODE XREF: _makekey+181j
.text:000004EA                 mov     ecx, [ebp+var_18]
.text:000004ED                 push    ecx
.text:000004EE                 mov     edx, [ebp+arg_4]
.text:000004F1                 push    edx
.text:000004F2                 mov     eax, [ebp+var_4]
.text:000004F5                 push    eax
.text:000004F6                 call    _ssh1_read_bignum
.text:000004FB                 add     esp, 0Ch
.text:000004FE                 mov     [ebp+var_C], eax
.text:00000501                 cmp     [ebp+var_C], 0
.text:00000505                 jge     short loc_50C
.text:00000507                 or      eax, 0FFFFFFFFh
.text:0000050A                 jmp     short loc_524
.text:0000050C ; ---------------------------------------------------------------------------
.text:0000050C
.text:0000050C loc_50C:                                ; CODE XREF: _makekey+1A5j
.text:0000050C                 mov     ecx, [ebp+var_4]
.text:0000050F                 add     ecx, [ebp+var_C]
.text:00000512                 mov     [ebp+var_4], ecx
.text:00000515                 mov     edx, [ebp+arg_4]
.text:00000518                 sub     edx, [ebp+var_C]
.text:0000051B                 mov     [ebp+arg_4], edx
.text:0000051E
.text:0000051E loc_51E:                                ; CODE XREF: _makekey+170j
.text:0000051E                 mov     eax, [ebp+var_4]
.text:00000521                 sub     eax, [ebp+arg_0]
.text:00000524
.text:00000524 loc_524:                                ; CODE XREF: _makekey+2Cj
.text:00000524                                         ; _makekey+CAj ...
.text:00000524                 add     esp, 18h
.text:00000527                 cmp     ebp, esp
.text:00000529                 call    __RTC_CheckEsp
.text:0000052E                 mov     esp, ebp
.text:00000530                 pop     ebp
.text:00000531                 retn
.text:00000531 _makekey        endp
.text:00000531
.text:00000531 ; ---------------------------------------------------------------------------
.text:00000532                 align 10h
.text:00000540
.text:00000540 ; =============== S U B R O U T I N E =======================================
.text:00000540
.text:00000540 ; Attributes: bp-based frame
.text:00000540
.text:00000540                 public _makeprivate
.text:00000540 _makeprivate    proc near
.text:00000540
.text:00000540 arg_0           = dword ptr  8
.text:00000540 arg_4           = dword ptr  0Ch
.text:00000540 arg_8           = dword ptr  10h
.text:00000540
.text:00000540                 push    ebp
.text:00000541                 mov     ebp, esp
.text:00000543                 mov     eax, [ebp+arg_8]
.text:00000546                 add     eax, 10h
.text:00000549                 push    eax
.text:0000054A                 mov     ecx, [ebp+arg_4]
.text:0000054D                 push    ecx
.text:0000054E                 mov     edx, [ebp+arg_0]
.text:00000551                 push    edx
.text:00000552                 call    _ssh1_read_bignum
.text:00000557                 add     esp, 0Ch
.text:0000055A                 cmp     ebp, esp
.text:0000055C                 call    __RTC_CheckEsp
.text:00000561                 pop     ebp
.text:00000562                 retn
.text:00000562 _makeprivate    endp
.text:00000562
.text:00000562 ; ---------------------------------------------------------------------------
.text:00000563                 align 10h
.text:00000570
.text:00000570 ; =============== S U B R O U T I N E =======================================
.text:00000570
.text:00000570 ; Attributes: bp-based frame
.text:00000570
.text:00000570 ; int __cdecl rsaencrypt(void *, size_t, int)
.text:00000570                 public _rsaencrypt
.text:00000570 _rsaencrypt     proc near
.text:00000570
.text:00000570 var_14          = dword ptr -14h
.text:00000570 var_10          = dword ptr -10h
.text:00000570 var_C           = dword ptr -0Ch
.text:00000570 var_8           = dword ptr -8
.text:00000570 var_4           = dword ptr -4
.text:00000570 arg_0           = dword ptr  8
.text:00000570 arg_4           = dword ptr  0Ch
.text:00000570 arg_8           = dword ptr  10h
.text:00000570
.text:00000570                 push    ebp
.text:00000571                 mov     ebp, esp
.text:00000573                 sub     esp, 14h
.text:00000576                 mov     eax, 0CCCCCCCCh
.text:0000057B                 mov     [ebp+var_14], eax
.text:0000057E                 mov     [ebp+var_10], eax
.text:00000581                 mov     [ebp+var_C], eax
.text:00000584                 mov     [ebp+var_8], eax
.text:00000587                 mov     [ebp+var_4], eax
.text:0000058A                 mov     eax, [ebp+arg_4]
.text:0000058D                 add     eax, 4
.text:00000590                 mov     ecx, [ebp+arg_8]
.text:00000593                 cmp     [ecx+4], eax
.text:00000596                 jge     short loc_59F
.text:00000598                 xor     eax, eax
.text:0000059A                 jmp     loc_6AD
.text:0000059F ; ---------------------------------------------------------------------------
.text:0000059F
.text:0000059F loc_59F:                                ; CODE XREF: _rsaencrypt+26j
.text:0000059F                 mov     edx, [ebp+arg_4]
.text:000005A2                 push    edx             ; size_t
.text:000005A3                 mov     eax, [ebp+arg_0]
.text:000005A6                 push    eax             ; void *
.text:000005A7                 mov     ecx, [ebp+arg_8]
.text:000005AA                 mov     edx, [ebp+arg_0]
.text:000005AD                 add     edx, [ecx+4]
.text:000005B0                 sub     edx, [ebp+arg_4]
.text:000005B3                 push    edx             ; void *
.text:000005B4                 call    _memmove
.text:000005B9                 add     esp, 0Ch
.text:000005BC                 mov     eax, [ebp+arg_0]
.text:000005BF                 mov     byte ptr [eax], 0
.text:000005C2                 mov     ecx, [ebp+arg_0]
.text:000005C5                 mov     byte ptr [ecx+1], 2
.text:000005C9                 mov     [ebp+var_C], 2
.text:000005D0                 jmp     short loc_5DB
.text:000005D2 ; ---------------------------------------------------------------------------
.text:000005D2
.text:000005D2 loc_5D2:                                ; CODE XREF: _rsaencrypt+96j
.text:000005D2                 mov     edx, [ebp+var_C]
.text:000005D5                 add     edx, 1
.text:000005D8                 mov     [ebp+var_C], edx
.text:000005DB
.text:000005DB loc_5DB:                                ; CODE XREF: _rsaencrypt+60j
.text:000005DB                 mov     eax, [ebp+arg_8]
.text:000005DE                 mov     ecx, [eax+4]
.text:000005E1                 sub     ecx, [ebp+arg_4]
.text:000005E4                 sub     ecx, 1
.text:000005E7                 cmp     [ebp+var_C], ecx
.text:000005EA                 jge     short loc_608
.text:000005EC
.text:000005EC loc_5EC:                                ; CODE XREF: _rsaencrypt+94j
.text:000005EC                 call    _random_byte
.text:000005F1                 mov     edx, [ebp+arg_0]
.text:000005F4                 add     edx, [ebp+var_C]
.text:000005F7                 mov     [edx], al
.text:000005F9                 mov     eax, [ebp+arg_0]
.text:000005FC                 add     eax, [ebp+var_C]
.text:000005FF                 movzx   ecx, byte ptr [eax]
.text:00000602                 test    ecx, ecx
.text:00000604                 jz      short loc_5EC
.text:00000606                 jmp     short loc_5D2
.text:00000608 ; ---------------------------------------------------------------------------
.text:00000608
.text:00000608 loc_608:                                ; CODE XREF: _rsaencrypt+7Aj
.text:00000608                 mov     edx, [ebp+arg_8]
.text:0000060B                 mov     eax, [edx+4]
.text:0000060E                 sub     eax, [ebp+arg_4]
.text:00000611                 mov     ecx, [ebp+arg_0]
.text:00000614                 mov     byte ptr [ecx+eax-1], 0
.text:00000619                 mov     edx, [ebp+arg_8]
.text:0000061C                 mov     eax, [edx+4]
.text:0000061F                 push    eax
.text:00000620                 mov     ecx, [ebp+arg_0]
.text:00000623                 push    ecx
.text:00000624                 call    _bignum_from_bytes
.text:00000629                 add     esp, 8
.text:0000062C                 mov     [ebp+var_4], eax
.text:0000062F                 mov     edx, [ebp+arg_8]
.text:00000632                 mov     eax, [edx+8]
.text:00000635                 push    eax
.text:00000636                 mov     ecx, [ebp+arg_8]
.text:00000639                 mov     edx, [ecx+0Ch]
.text:0000063C                 push    edx
.text:0000063D                 mov     eax, [ebp+var_4]
.text:00000640                 push    eax
.text:00000641                 call    _modpow
.text:00000646                 add     esp, 0Ch
.text:00000649                 mov     [ebp+var_8], eax
.text:0000064C                 mov     ecx, [ebp+arg_0]
.text:0000064F                 mov     [ebp+var_10], ecx
.text:00000652                 mov     edx, [ebp+arg_8]
.text:00000655                 mov     eax, [edx+4]
.text:00000658                 mov     [ebp+var_C], eax
.text:0000065B
.text:0000065B loc_65B:                                ; CODE XREF: _rsaencrypt+11Ej
.text:0000065B                 mov     ecx, [ebp+var_C]
.text:0000065E                 mov     [ebp+var_14], ecx
.text:00000661                 mov     edx, [ebp+var_C]
.text:00000664                 sub     edx, 1
.text:00000667                 mov     [ebp+var_C], edx
.text:0000066A                 cmp     [ebp+var_14], 0
.text:0000066E                 jz      short loc_690
.text:00000670                 mov     eax, [ebp+var_C]
.text:00000673                 push    eax
.text:00000674                 mov     ecx, [ebp+var_8]
.text:00000677                 push    ecx
.text:00000678                 call    _bignum_byte
.text:0000067D                 add     esp, 8
.text:00000680                 mov     edx, [ebp+var_10]
.text:00000683                 mov     [edx], al
.text:00000685                 mov     eax, [ebp+var_10]
.text:00000688                 add     eax, 1
.text:0000068B                 mov     [ebp+var_10], eax
.text:0000068E                 jmp     short loc_65B
.text:00000690 ; ---------------------------------------------------------------------------
.text:00000690
.text:00000690 loc_690:                                ; CODE XREF: _rsaencrypt+FEj
.text:00000690                 mov     ecx, [ebp+var_4]
.text:00000693                 push    ecx
.text:00000694                 call    _freebn
.text:00000699                 add     esp, 4
.text:0000069C                 mov     edx, [ebp+var_8]
.text:0000069F                 push    edx
.text:000006A0                 call    _freebn
.text:000006A5                 add     esp, 4
.text:000006A8                 mov     eax, 1
.text:000006AD
.text:000006AD loc_6AD:                                ; CODE XREF: _rsaencrypt+2Aj
.text:000006AD                 add     esp, 14h
.text:000006B0                 cmp     ebp, esp
.text:000006B2                 call    __RTC_CheckEsp
.text:000006B7                 mov     esp, ebp
.text:000006B9                 pop     ebp
.text:000006BA                 retn
.text:000006BA _rsaencrypt     endp
.text:000006BA
.text:000006BA ; ---------------------------------------------------------------------------
.text:000006BB                 align 10h
.text:000006C0
.text:000006C0 ; =============== S U B R O U T I N E =======================================
.text:000006C0
.text:000006C0 ; Attributes: bp-based frame
.text:000006C0
.text:000006C0                 public _crt_modpow
.text:000006C0 _crt_modpow     proc near               ; CODE XREF: _rsa_privkey_op+2EAp
.text:000006C0                                         ; _rsa_privkey_op+336p
.text:000006C0
.text:000006C0 var_2C          = dword ptr -2Ch
.text:000006C0 var_28          = dword ptr -28h
.text:000006C0 var_24          = dword ptr -24h
.text:000006C0 var_20          = dword ptr -20h
.text:000006C0 var_1C          = dword ptr -1Ch
.text:000006C0 var_18          = dword ptr -18h
.text:000006C0 var_14          = dword ptr -14h
.text:000006C0 var_10          = dword ptr -10h
.text:000006C0 var_C           = dword ptr -0Ch
.text:000006C0 var_8           = dword ptr -8
.text:000006C0 var_4           = dword ptr -4
.text:000006C0 arg_0           = dword ptr  8
.text:000006C0 arg_4           = dword ptr  0Ch
.text:000006C0 arg_8           = dword ptr  10h
.text:000006C0 arg_C           = dword ptr  14h
.text:000006C0 arg_10          = dword ptr  18h
.text:000006C0 arg_14          = dword ptr  1Ch
.text:000006C0
.text:000006C0                 push    ebp
.text:000006C1                 mov     ebp, esp
.text:000006C3                 sub     esp, 2Ch
.text:000006C6                 push    edi
.text:000006C7                 lea     edi, [ebp+var_2C]
.text:000006CA                 mov     ecx, 0Bh
.text:000006CF                 mov     eax, 0CCCCCCCCh
.text:000006D4                 rep stosd
.text:000006D6                 mov     eax, [ebp+arg_C]
.text:000006D9                 push    eax
.text:000006DA                 call    _copybn
.text:000006DF                 add     esp, 4
.text:000006E2                 mov     [ebp+var_4], eax
.text:000006E5                 mov     ecx, [ebp+var_4]
.text:000006E8                 push    ecx
.text:000006E9                 call    _decbn
.text:000006EE                 add     esp, 4
.text:000006F1                 mov     edx, [ebp+arg_10]
.text:000006F4                 push    edx
.text:000006F5                 call    _copybn
.text:000006FA                 add     esp, 4
.text:000006FD                 mov     [ebp+var_8], eax
.text:00000700                 mov     eax, [ebp+var_8]
.text:00000703                 push    eax
.text:00000704                 call    _decbn
.text:00000709                 add     esp, 4
.text:0000070C                 mov     ecx, [ebp+var_4]
.text:0000070F                 push    ecx
.text:00000710                 mov     edx, [ebp+arg_4]
.text:00000713                 push    edx
.text:00000714                 call    _bigmod
.text:00000719                 add     esp, 8
.text:0000071C                 mov     [ebp+var_C], eax
.text:0000071F                 mov     eax, [ebp+var_8]
.text:00000722                 push    eax
.text:00000723                 mov     ecx, [ebp+arg_4]
.text:00000726                 push    ecx
.text:00000727                 call    _bigmod
.text:0000072C                 add     esp, 8
.text:0000072F                 mov     [ebp+var_10], eax
.text:00000732                 mov     edx, [ebp+arg_C]
.text:00000735                 push    edx
.text:00000736                 mov     eax, [ebp+var_C]
.text:00000739                 push    eax
.text:0000073A                 mov     ecx, [ebp+arg_0]
.text:0000073D                 push    ecx
.text:0000073E                 call    _modpow
.text:00000743                 add     esp, 0Ch
.text:00000746                 mov     [ebp+var_14], eax
.text:00000749                 mov     edx, [ebp+arg_10]
.text:0000074C                 push    edx
.text:0000074D                 mov     eax, [ebp+var_10]
.text:00000750                 push    eax
.text:00000751                 mov     ecx, [ebp+arg_0]
.text:00000754                 push    ecx
.text:00000755                 call    _modpow
.text:0000075A                 add     esp, 0Ch
.text:0000075D                 mov     [ebp+var_18], eax
.text:00000760                 mov     edx, [ebp+var_18]
.text:00000763                 push    edx
.text:00000764                 mov     eax, [ebp+var_14]
.text:00000767                 push    eax
.text:00000768                 call    _bignum_cmp
.text:0000076D                 add     esp, 8
.text:00000770                 test    eax, eax
.text:00000772                 jge     short loc_799
.text:00000774                 mov     ecx, [ebp+var_14]
.text:00000777                 mov     [ebp+var_2C], ecx
.text:0000077A                 mov     edx, [ebp+arg_C]
.text:0000077D                 push    edx
.text:0000077E                 mov     eax, [ebp+var_14]
.text:00000781                 push    eax
.text:00000782                 call    _bigadd
.text:00000787                 add     esp, 8
.text:0000078A                 mov     [ebp+var_14], eax
.text:0000078D                 mov     ecx, [ebp+var_2C]
.text:00000790                 push    ecx
.text:00000791                 call    _freebn
.text:00000796                 add     esp, 4
.text:00000799
.text:00000799 loc_799:                                ; CODE XREF: _crt_modpow+B2j
.text:00000799                 mov     edx, [ebp+var_18]
.text:0000079C                 push    edx
.text:0000079D                 mov     eax, [ebp+var_14]
.text:000007A0                 push    eax
.text:000007A1                 call    _bigsub
.text:000007A6                 add     esp, 8
.text:000007A9                 mov     [ebp+var_1C], eax
.text:000007AC                 mov     ecx, [ebp+arg_10]
.text:000007AF                 push    ecx
.text:000007B0                 mov     edx, [ebp+arg_14]
.text:000007B3                 push    edx
.text:000007B4                 call    _bigmul
.text:000007B9                 add     esp, 8
.text:000007BC                 mov     [ebp+var_20], eax
.text:000007BF                 mov     eax, [ebp+var_18]
.text:000007C2                 push    eax
.text:000007C3                 mov     ecx, [ebp+var_1C]
.text:000007C6                 push    ecx
.text:000007C7                 mov     edx, [ebp+var_20]
.text:000007CA                 push    edx
.text:000007CB                 call    _bigmuladd
.text:000007D0                 add     esp, 0Ch
.text:000007D3                 mov     [ebp+var_24], eax
.text:000007D6                 mov     eax, [ebp+arg_8]
.text:000007D9                 push    eax
.text:000007DA                 mov     ecx, [ebp+var_24]
.text:000007DD                 push    ecx
.text:000007DE                 call    _bigmod
.text:000007E3                 add     esp, 8
.text:000007E6                 mov     [ebp+var_28], eax
.text:000007E9                 mov     edx, [ebp+var_4]
.text:000007EC                 push    edx
.text:000007ED                 call    _freebn
.text:000007F2                 add     esp, 4
.text:000007F5                 mov     eax, [ebp+var_8]
.text:000007F8                 push    eax
.text:000007F9                 call    _freebn
.text:000007FE                 add     esp, 4
.text:00000801                 mov     ecx, [ebp+var_C]
.text:00000804                 push    ecx
.text:00000805                 call    _freebn
.text:0000080A                 add     esp, 4
.text:0000080D                 mov     edx, [ebp+var_10]
.text:00000810                 push    edx
.text:00000811                 call    _freebn
.text:00000816                 add     esp, 4
.text:00000819                 mov     eax, [ebp+var_14]
.text:0000081C                 push    eax
.text:0000081D                 call    _freebn
.text:00000822                 add     esp, 4
.text:00000825                 mov     ecx, [ebp+var_18]
.text:00000828                 push    ecx
.text:00000829                 call    _freebn
.text:0000082E                 add     esp, 4
.text:00000831                 mov     edx, [ebp+var_1C]
.text:00000834                 push    edx
.text:00000835                 call    _freebn
.text:0000083A                 add     esp, 4
.text:0000083D                 mov     eax, [ebp+var_20]
.text:00000840                 push    eax
.text:00000841                 call    _freebn
.text:00000846                 add     esp, 4
.text:00000849                 mov     ecx, [ebp+var_24]
.text:0000084C                 push    ecx
.text:0000084D                 call    _freebn
.text:00000852                 add     esp, 4
.text:00000855                 mov     eax, [ebp+var_28]
.text:00000858                 pop     edi
.text:00000859                 add     esp, 2Ch
.text:0000085C                 cmp     ebp, esp
.text:0000085E                 call    __RTC_CheckEsp
.text:00000863                 mov     esp, ebp
.text:00000865                 pop     ebp
.text:00000866                 retn
.text:00000866 _crt_modpow     endp
.text:00000866
.text:00000866 ; ---------------------------------------------------------------------------
.text:00000867                 align 10h
.text:00000870
.text:00000870 ; =============== S U B R O U T I N E =======================================
.text:00000870
.text:00000870 ; Attributes: bp-based frame
.text:00000870
.text:00000870                 public _rsadecrypt
.text:00000870 _rsadecrypt     proc near
.text:00000870
.text:00000870 arg_0           = dword ptr  8
.text:00000870 arg_4           = dword ptr  0Ch
.text:00000870
.text:00000870                 push    ebp
.text:00000871                 mov     ebp, esp
.text:00000873                 mov     eax, [ebp+arg_4]
.text:00000876                 push    eax
.text:00000877                 mov     ecx, [ebp+arg_0]
.text:0000087A                 push    ecx
.text:0000087B                 call    _rsa_privkey_op
.text:00000880                 add     esp, 8
.text:00000883                 cmp     ebp, esp
.text:00000885                 call    __RTC_CheckEsp
.text:0000088A                 pop     ebp
.text:0000088B                 retn
.text:0000088B _rsadecrypt     endp
.text:0000088B
.text:0000088B ; ---------------------------------------------------------------------------
.text:0000088C                 align 10h
.text:00000890
.text:00000890 ; =============== S U B R O U T I N E =======================================
.text:00000890
.text:00000890 ; Attributes: bp-based frame
.text:00000890
.text:00000890 _rsa_privkey_op proc near               ; CODE XREF: _rsadecrypt+Bp
.text:00000890                                         ; _rsa2_sign+15Fp
.text:00000890
.text:00000890 var_168         = dword ptr -168h
.text:00000890 var_160         = byte ptr -160h
.text:00000890 var_15F         = byte ptr -15Fh
.text:00000890 var_15E         = byte ptr -15Eh
.text:00000890 var_15D         = byte ptr -15Dh
.text:00000890 var_158         = dword ptr -158h
.text:00000890 var_154         = dword ptr -154h
.text:00000890 var_150         = dword ptr -150h
.text:00000890 var_14C         = dword ptr -14Ch
.text:00000890 var_148         = dword ptr -148h
.text:00000890 var_144         = dword ptr -144h
.text:00000890 var_13C         = byte ptr -13Ch
.text:00000890 var_F4          = byte ptr -0F4h
.text:00000890 var_1C          = dword ptr -1Ch
.text:00000890 var_18          = dword ptr -18h
.text:00000890 var_14          = dword ptr -14h
.text:00000890 var_10          = dword ptr -10h
.text:00000890 var_C           = dword ptr -0Ch
.text:00000890 var_8           = dword ptr -8
.text:00000890 var_4           = dword ptr -4
.text:00000890 arg_0           = dword ptr  8
.text:00000890 arg_4           = dword ptr  0Ch
.text:00000890
.text:00000890                 push    ebp
.text:00000891                 mov     ebp, esp
.text:00000893                 sub     esp, 168h
.text:00000899                 push    edi
.text:0000089A                 lea     edi, [ebp+var_168]
.text:000008A0                 mov     ecx, 5Ah ; 'Z'
.text:000008A5                 mov     eax, 0CCCCCCCCh
.text:000008AA                 rep stosd
.text:000008AC                 mov     eax, dword ptr ds:___security_cookie
.text:000008B1                 xor     eax, ebp
.text:000008B3                 mov     [ebp+var_4], eax
.text:000008B6                 mov     [ebp+var_144], 40h ; '@'
.text:000008C0                 mov     [ebp+var_148], 0
.text:000008CA
.text:000008CA loc_8CA:                                ; CODE XREF: _rsa_privkey_op+28Aj
.text:000008CA                                         ; _rsa_privkey_op+2B7j ...
.text:000008CA                 mov     eax, 1
.text:000008CF                 test    eax, eax
.text:000008D1                 jz      loc_B53
.text:000008D7                 mov     ecx, [ebp+arg_4]
.text:000008DA                 mov     edx, [ecx+8]
.text:000008DD                 push    edx
.text:000008DE                 call    _copybn
.text:000008E3                 add     esp, 4
.text:000008E6                 mov     [ebp+var_8], eax
.text:000008E9                 mov     eax, [ebp+var_8]
.text:000008EC                 push    eax
.text:000008ED                 call    _bignum_bitcount
.text:000008F2                 add     esp, 4
.text:000008F5                 mov     [ebp+var_14C], eax
.text:000008FB                 mov     [ebp+var_150], 0
.text:00000905                 mov     [ebp+var_154], 0
.text:0000090F
.text:0000090F loc_90F:                                ; CODE XREF: _rsa_privkey_op+23Fj
.text:0000090F                 mov     ecx, [ebp+var_14C]
.text:00000915                 mov     [ebp+var_168], ecx
.text:0000091B                 mov     edx, [ebp+var_14C]
.text:00000921                 sub     edx, 1
.text:00000924                 mov     [ebp+var_14C], edx
.text:0000092A                 cmp     [ebp+var_168], 0
.text:00000931                 jz      loc_AD4
.text:00000937                 cmp     [ebp+var_154], 0
.text:0000093E                 jg      loc_A89
.text:00000944                 mov     [ebp+var_154], 8
.text:0000094E                 cmp     [ebp+var_144], 40h ; '@'
.text:00000955                 jb      loc_A66
.text:0000095B                 mov     eax, [ebp+var_148]
.text:00000961                 sar     eax, 18h
.text:00000964                 mov     [ebp+var_160], al
.text:0000096A                 mov     ecx, [ebp+var_148]
.text:00000970                 sar     ecx, 10h
.text:00000973                 mov     [ebp+var_15F], cl
.text:00000979                 mov     edx, [ebp+var_148]
.text:0000097F                 sar     edx, 8
.text:00000982                 mov     [ebp+var_15E], dl
.text:00000988                 mov     al, byte ptr [ebp+var_148]
.text:0000098E                 mov     [ebp+var_15D], al
.text:00000994                 lea     ecx, [ebp+var_F4]
.text:0000099A                 push    ecx
.text:0000099B                 call    _SHA512_Init
.text:000009A0                 add     esp, 4
.text:000009A3                 push    1Ah
.text:000009A5                 push    offset $SG7284  ; "RSA deterministic blinding"
.text:000009AA                 lea     edx, [ebp+var_F4]
.text:000009B0                 push    edx
.text:000009B1                 call    _SHA512_Bytes
.text:000009B6                 add     esp, 0Ch
.text:000009B9                 push    4
.text:000009BB                 lea     eax, [ebp+var_160]
.text:000009C1                 push    eax
.text:000009C2                 lea     ecx, [ebp+var_F4]
.text:000009C8                 push    ecx
.text:000009C9                 call    _SHA512_Bytes
.text:000009CE                 add     esp, 0Ch
.text:000009D1                 mov     edx, [ebp+arg_4]
.text:000009D4                 mov     eax, [edx+10h]
.text:000009D7                 push    eax
.text:000009D8                 lea     ecx, [ebp+var_F4]
.text:000009DE                 push    ecx
.text:000009DF                 call    _sha512_mpint
.text:000009E4                 add     esp, 8
.text:000009E7                 lea     edx, [ebp+var_13C]
.text:000009ED                 push    edx
.text:000009EE                 lea     eax, [ebp+var_F4]
.text:000009F4                 push    eax
.text:000009F5                 call    _SHA512_Final
.text:000009FA                 add     esp, 8
.text:000009FD                 mov     ecx, [ebp+var_148]
.text:00000A03                 add     ecx, 1
.text:00000A06                 mov     [ebp+var_148], ecx
.text:00000A0C                 lea     edx, [ebp+var_F4]
.text:00000A12                 push    edx
.text:00000A13                 call    _SHA512_Init
.text:00000A18                 add     esp, 4
.text:00000A1B                 push    40h ; '@'
.text:00000A1D                 lea     eax, [ebp+var_13C]
.text:00000A23                 push    eax
.text:00000A24                 lea     ecx, [ebp+var_F4]
.text:00000A2A                 push    ecx
.text:00000A2B                 call    _SHA512_Bytes
.text:00000A30                 add     esp, 0Ch
.text:00000A33                 mov     edx, [ebp+arg_0]
.text:00000A36                 push    edx
.text:00000A37                 lea     eax, [ebp+var_F4]
.text:00000A3D                 push    eax
.text:00000A3E                 call    _sha512_mpint
.text:00000A43                 add     esp, 8
.text:00000A46                 lea     ecx, [ebp+var_13C]
.text:00000A4C                 push    ecx
.text:00000A4D                 lea     edx, [ebp+var_F4]
.text:00000A53                 push    edx
.text:00000A54                 call    _SHA512_Final
.text:00000A59                 add     esp, 8
.text:00000A5C                 mov     [ebp+var_144], 0
.text:00000A66
.text:00000A66 loc_A66:                                ; CODE XREF: _rsa_privkey_op+C5j
.text:00000A66                 mov     eax, [ebp+var_144]
.text:00000A6C                 movzx   ecx, [ebp+eax+var_13C]
.text:00000A74                 mov     [ebp+var_150], ecx
.text:00000A7A                 mov     edx, [ebp+var_144]
.text:00000A80                 add     edx, 1
.text:00000A83                 mov     [ebp+var_144], edx
.text:00000A89
.text:00000A89 loc_A89:                                ; CODE XREF: _rsa_privkey_op+AEj
.text:00000A89                 mov     eax, [ebp+var_150]
.text:00000A8F                 and     eax, 1
.text:00000A92                 mov     [ebp+var_158], eax
.text:00000A98                 mov     ecx, [ebp+var_150]
.text:00000A9E                 sar     ecx, 1
.text:00000AA0                 mov     [ebp+var_150], ecx
.text:00000AA6                 mov     edx, [ebp+var_154]
.text:00000AAC                 sub     edx, 1
.text:00000AAF                 mov     [ebp+var_154], edx
.text:00000AB5                 mov     eax, [ebp+var_158]
.text:00000ABB                 push    eax
.text:00000ABC                 mov     ecx, [ebp+var_14C]
.text:00000AC2                 push    ecx
.text:00000AC3                 mov     edx, [ebp+var_8]
.text:00000AC6                 push    edx
.text:00000AC7                 call    _bignum_set_bit
.text:00000ACC                 add     esp, 0Ch
.text:00000ACF                 jmp     loc_90F
.text:00000AD4 ; ---------------------------------------------------------------------------
.text:00000AD4
.text:00000AD4 loc_AD4:                                ; CODE XREF: _rsa_privkey_op+A1j
.text:00000AD4                 mov     eax, [ebp+var_8]
.text:00000AD7                 push    eax
.text:00000AD8                 call    _bn_restore_invariant
.text:00000ADD                 add     esp, 4
.text:00000AE0                 mov     ecx, dword ptr ds:_Zero
.text:00000AE6                 push    ecx
.text:00000AE7                 mov     edx, [ebp+var_8]
.text:00000AEA                 push    edx
.text:00000AEB                 call    _bignum_cmp
.text:00000AF0                 add     esp, 8
.text:00000AF3                 test    eax, eax
.text:00000AF5                 jle     short loc_B0E
.text:00000AF7                 mov     eax, [ebp+arg_4]
.text:00000AFA                 mov     ecx, [eax+8]
.text:00000AFD                 push    ecx
.text:00000AFE                 mov     edx, [ebp+var_8]
.text:00000B01                 push    edx
.text:00000B02                 call    _bignum_cmp
.text:00000B07                 add     esp, 8
.text:00000B0A                 test    eax, eax
.text:00000B0C                 jl      short loc_B1F
.text:00000B0E
.text:00000B0E loc_B0E:                                ; CODE XREF: _rsa_privkey_op+265j
.text:00000B0E                 mov     eax, [ebp+var_8]
.text:00000B11                 push    eax
.text:00000B12                 call    _freebn
.text:00000B17                 add     esp, 4
.text:00000B1A                 jmp     loc_8CA
.text:00000B1F ; ---------------------------------------------------------------------------
.text:00000B1F
.text:00000B1F loc_B1F:                                ; CODE XREF: _rsa_privkey_op+27Cj
.text:00000B1F                 mov     ecx, [ebp+arg_4]
.text:00000B22                 mov     edx, [ecx+8]
.text:00000B25                 push    edx
.text:00000B26                 mov     eax, [ebp+var_8]
.text:00000B29                 push    eax
.text:00000B2A                 call    _modinv
.text:00000B2F                 add     esp, 8
.text:00000B32                 mov     [ebp+var_10], eax
.text:00000B35                 cmp     [ebp+var_10], 0
.text:00000B39                 jnz     short loc_B4C
.text:00000B3B                 mov     ecx, [ebp+var_8]
.text:00000B3E                 push    ecx
.text:00000B3F                 call    _freebn
.text:00000B44                 add     esp, 4
.text:00000B47                 jmp     loc_8CA
.text:00000B4C ; ---------------------------------------------------------------------------
.text:00000B4C
.text:00000B4C loc_B4C:                                ; CODE XREF: _rsa_privkey_op+2A9j
.text:00000B4C                 jmp     short loc_B53
.text:00000B4E ; ---------------------------------------------------------------------------
.text:00000B4E                 jmp     loc_8CA
.text:00000B53 ; ---------------------------------------------------------------------------
.text:00000B53
.text:00000B53 loc_B53:                                ; CODE XREF: _rsa_privkey_op+41j
.text:00000B53                                         ; _rsa_privkey_op:loc_B4Cj
.text:00000B53                 mov     edx, [ebp+arg_4]
.text:00000B56                 mov     eax, [edx+1Ch]
.text:00000B59                 push    eax
.text:00000B5A                 mov     ecx, [ebp+arg_4]
.text:00000B5D                 mov     edx, [ecx+18h]
.text:00000B60                 push    edx
.text:00000B61                 mov     eax, [ebp+arg_4]
.text:00000B64                 mov     ecx, [eax+14h]
.text:00000B67                 push    ecx
.text:00000B68                 mov     edx, [ebp+arg_4]
.text:00000B6B                 mov     eax, [edx+8]
.text:00000B6E                 push    eax
.text:00000B6F                 mov     ecx, [ebp+arg_4]
.text:00000B72                 mov     edx, [ecx+0Ch]
.text:00000B75                 push    edx
.text:00000B76                 mov     eax, [ebp+var_8]
.text:00000B79                 push    eax
.text:00000B7A                 call    _crt_modpow
.text:00000B7F                 add     esp, 18h
.text:00000B82                 mov     [ebp+var_C], eax
.text:00000B85                 mov     ecx, [ebp+arg_4]
.text:00000B88                 mov     edx, [ecx+8]
.text:00000B8B                 push    edx
.text:00000B8C                 mov     eax, [ebp+var_C]
.text:00000B8F                 push    eax
.text:00000B90                 mov     ecx, [ebp+arg_0]
.text:00000B93                 push    ecx
.text:00000B94                 call    _modmul
.text:00000B99                 add     esp, 0Ch
.text:00000B9C                 mov     [ebp+var_14], eax
.text:00000B9F                 mov     edx, [ebp+arg_4]
.text:00000BA2                 mov     eax, [edx+1Ch]
.text:00000BA5                 push    eax
.text:00000BA6                 mov     ecx, [ebp+arg_4]
.text:00000BA9                 mov     edx, [ecx+18h]
.text:00000BAC                 push    edx
.text:00000BAD                 mov     eax, [ebp+arg_4]
.text:00000BB0                 mov     ecx, [eax+14h]
.text:00000BB3                 push    ecx
.text:00000BB4                 mov     edx, [ebp+arg_4]
.text:00000BB7                 mov     eax, [edx+8]
.text:00000BBA                 push    eax
.text:00000BBB                 mov     ecx, [ebp+arg_4]
.text:00000BBE                 mov     edx, [ecx+10h]
.text:00000BC1                 push    edx
.text:00000BC2                 mov     eax, [ebp+var_14]
.text:00000BC5                 push    eax
.text:00000BC6                 call    _crt_modpow
.text:00000BCB                 add     esp, 18h
.text:00000BCE                 mov     [ebp+var_18], eax
.text:00000BD1                 mov     ecx, [ebp+arg_4]
.text:00000BD4                 mov     edx, [ecx+8]
.text:00000BD7                 push    edx
.text:00000BD8                 mov     eax, [ebp+var_10]
.text:00000BDB                 push    eax
.text:00000BDC                 mov     ecx, [ebp+var_18]
.text:00000BDF                 push    ecx
.text:00000BE0                 call    _modmul
.text:00000BE5                 add     esp, 0Ch
.text:00000BE8                 mov     [ebp+var_1C], eax
.text:00000BEB                 mov     edx, [ebp+var_18]
.text:00000BEE                 push    edx
.text:00000BEF                 call    _freebn
.text:00000BF4                 add     esp, 4
.text:00000BF7                 mov     eax, [ebp+var_14]
.text:00000BFA                 push    eax
.text:00000BFB                 call    _freebn
.text:00000C00                 add     esp, 4
.text:00000C03                 mov     ecx, [ebp+var_10]
.text:00000C06                 push    ecx
.text:00000C07                 call    _freebn
.text:00000C0C                 add     esp, 4
.text:00000C0F                 mov     edx, [ebp+var_C]
.text:00000C12                 push    edx
.text:00000C13                 call    _freebn
.text:00000C18                 add     esp, 4
.text:00000C1B                 mov     eax, [ebp+var_8]
.text:00000C1E                 push    eax
.text:00000C1F                 call    _freebn
.text:00000C24                 add     esp, 4
.text:00000C27                 mov     eax, [ebp+var_1C]
.text:00000C2A                 push    edx
.text:00000C2B                 mov     ecx, ebp
.text:00000C2D                 push    eax
.text:00000C2E                 lea     edx, $LN17
.text:00000C34                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C39                 pop     eax
.text:00000C3A                 pop     edx
.text:00000C3B                 pop     edi
.text:00000C3C                 mov     ecx, [ebp+var_4]
.text:00000C3F                 xor     ecx, ebp
.text:00000C41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000C46                 add     esp, 168h
.text:00000C4C                 cmp     ebp, esp
.text:00000C4E                 call    __RTC_CheckEsp
.text:00000C53                 mov     esp, ebp
.text:00000C55                 pop     ebp
.text:00000C56                 retn
.text:00000C56 _rsa_privkey_op endp
.text:00000C56
.text:00000C56 ; ---------------------------------------------------------------------------
.text:00000C57                 align 4
.text:00000C58 $LN17           dd 3                    ; DATA XREF: _rsa_privkey_op+39Eo
.text:00000C5C                 dd offset $LN16
.text:00000C60 $LN16           dd 0FFFFFF0Ch, 0D4h     ; DATA XREF: .text:00000C5Co
.text:00000C68                 dd offset $LN13         ; "ss"
.text:00000C6C                 dd 0FFFFFEC4h, 40h
.text:00000C74                 dd offset $LN14         ; "digest512"
.text:00000C78                 dd 0FFFFFEA0h, 4
.text:00000C80                 dd offset $LN15         ; "seqbuf"
.text:00000C84 $LN15           db 'seqbuf',0           ; DATA XREF: .text:00000C80o
.text:00000C8B $LN14           db 'digest512',0        ; DATA XREF: .text:00000C74o
.text:00000C95 $LN13           db 'ss',0               ; DATA XREF: .text:00000C68o
.text:00000C98                 align 10h
.text:00000CA0
.text:00000CA0 ; =============== S U B R O U T I N E =======================================
.text:00000CA0
.text:00000CA0 ; Attributes: bp-based frame
.text:00000CA0
.text:00000CA0 _sha512_mpint   proc near               ; CODE XREF: _rsa_privkey_op+14Fp
.text:00000CA0                                         ; _rsa_privkey_op+1AEp
.text:00000CA0
.text:00000CA0 var_14          = dword ptr -14h
.text:00000CA0 var_10          = dword ptr -10h
.text:00000CA0 var_C           = dword ptr -0Ch
.text:00000CA0 var_8           = dword ptr -8
.text:00000CA0 var_4           = dword ptr -4
.text:00000CA0 arg_0           = dword ptr  8
.text:00000CA0 arg_4           = dword ptr  0Ch
.text:00000CA0
.text:00000CA0                 push    ebp
.text:00000CA1                 mov     ebp, esp
.text:00000CA3                 sub     esp, 14h
.text:00000CA6                 mov     eax, 0CCCCCCCCh
.text:00000CAB                 mov     [ebp+var_14], eax
.text:00000CAE                 mov     [ebp+var_10], eax
.text:00000CB1                 mov     [ebp+var_C], eax
.text:00000CB4                 mov     [ebp+var_8], eax
.text:00000CB7                 mov     [ebp+var_4], eax
.text:00000CBA                 mov     eax, [ebp+arg_4]
.text:00000CBD                 push    eax
.text:00000CBE                 call    _bignum_bitcount
.text:00000CC3                 add     esp, 4
.text:00000CC6                 add     eax, 8
.text:00000CC9                 cdq
.text:00000CCA                 and     edx, 7
.text:00000CCD                 add     eax, edx
.text:00000CCF                 sar     eax, 3
.text:00000CD2                 mov     [ebp+var_10], eax
.text:00000CD5                 mov     ecx, [ebp+var_10]
.text:00000CD8                 sar     ecx, 18h
.text:00000CDB                 mov     byte ptr [ebp+var_8], cl
.text:00000CDE                 mov     edx, [ebp+var_10]
.text:00000CE1                 sar     edx, 10h
.text:00000CE4                 mov     byte ptr [ebp+var_8+1], dl
.text:00000CE7                 mov     eax, [ebp+var_10]
.text:00000CEA                 sar     eax, 8
.text:00000CED                 mov     byte ptr [ebp+var_8+2], al
.text:00000CF0                 mov     cl, byte ptr [ebp+var_10]
.text:00000CF3                 mov     byte ptr [ebp+var_8+3], cl
.text:00000CF6                 push    4
.text:00000CF8                 lea     edx, [ebp+var_8]
.text:00000CFB                 push    edx
.text:00000CFC                 mov     eax, [ebp+arg_0]
.text:00000CFF                 push    eax
.text:00000D00                 call    _SHA512_Bytes
.text:00000D05                 add     esp, 0Ch
.text:00000D08
.text:00000D08 loc_D08:                                ; CODE XREF: _sha512_mpint+B3j
.text:00000D08                 mov     ecx, [ebp+var_10]
.text:00000D0B                 mov     edx, [ebp+var_10]
.text:00000D0E                 sub     edx, 1
.text:00000D11                 mov     [ebp+var_10], edx
.text:00000D14                 test    ecx, ecx
.text:00000D16                 jle     short loc_D21
.text:00000D18                 mov     [ebp+var_14], 1
.text:00000D1F                 jmp     short loc_D28
.text:00000D21 ; ---------------------------------------------------------------------------
.text:00000D21
.text:00000D21 loc_D21:                                ; CODE XREF: _sha512_mpint+76j
.text:00000D21                 mov     [ebp+var_14], 0
.text:00000D28
.text:00000D28 loc_D28:                                ; CODE XREF: _sha512_mpint+7Fj
.text:00000D28                 cmp     [ebp+var_14], 0
.text:00000D2C                 jz      short loc_D55
.text:00000D2E                 mov     eax, [ebp+var_10]
.text:00000D31                 push    eax
.text:00000D32                 mov     ecx, [ebp+arg_4]
.text:00000D35                 push    ecx
.text:00000D36                 call    _bignum_byte
.text:00000D3B                 add     esp, 8
.text:00000D3E                 mov     byte ptr [ebp+var_8], al
.text:00000D41                 push    1
.text:00000D43                 lea     edx, [ebp+var_8]
.text:00000D46                 push    edx
.text:00000D47                 mov     eax, [ebp+arg_0]
.text:00000D4A                 push    eax
.text:00000D4B                 call    _SHA512_Bytes
.text:00000D50                 add     esp, 0Ch
.text:00000D53                 jmp     short loc_D08
.text:00000D55 ; ---------------------------------------------------------------------------
.text:00000D55
.text:00000D55 loc_D55:                                ; CODE XREF: _sha512_mpint+8Cj
.text:00000D55                 push    4
.text:00000D57                 lea     ecx, [ebp+var_8]
.text:00000D5A                 push    ecx
.text:00000D5B                 call    _smemclr
.text:00000D60                 add     esp, 8
.text:00000D63                 push    edx
.text:00000D64                 mov     ecx, ebp
.text:00000D66                 push    eax
.text:00000D67                 lea     edx, $LN9
.text:00000D6D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D72                 pop     eax
.text:00000D73                 pop     edx
.text:00000D74                 add     esp, 14h
.text:00000D77                 cmp     ebp, esp
.text:00000D79                 call    __RTC_CheckEsp
.text:00000D7E                 mov     esp, ebp
.text:00000D80                 pop     ebp
.text:00000D81                 retn
.text:00000D81 _sha512_mpint   endp
.text:00000D81
.text:00000D81 ; ---------------------------------------------------------------------------
.text:00000D82                 align 4
.text:00000D84 $LN9            dd 1                    ; DATA XREF: _sha512_mpint+C7o
.text:00000D88                 dd offset $LN8
.text:00000D8C $LN8            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000D88o
.text:00000D94                 dd offset $LN7          ; "lenbuf"
.text:00000D98 $LN7            db 'lenbuf',0           ; DATA XREF: .text:00000D94o
.text:00000D9F                 align 10h
.text:00000DA0
.text:00000DA0 ; =============== S U B R O U T I N E =======================================
.text:00000DA0
.text:00000DA0 ; Attributes: bp-based frame
.text:00000DA0
.text:00000DA0                 public _rsastr_len
.text:00000DA0 _rsastr_len     proc near               ; CODE XREF: _rsa2_fmtkey+25p
.text:00000DA0
.text:00000DA0 var_10          = dword ptr -10h
.text:00000DA0 var_C           = dword ptr -0Ch
.text:00000DA0 var_8           = dword ptr -8
.text:00000DA0 var_4           = dword ptr -4
.text:00000DA0 arg_0           = dword ptr  8
.text:00000DA0
.text:00000DA0                 push    ebp
.text:00000DA1                 mov     ebp, esp
.text:00000DA3                 sub     esp, 10h
.text:00000DA6                 mov     eax, 0CCCCCCCCh
.text:00000DAB                 mov     [ebp+var_10], eax
.text:00000DAE                 mov     [ebp+var_C], eax
.text:00000DB1                 mov     [ebp+var_8], eax
.text:00000DB4                 mov     [ebp+var_4], eax
.text:00000DB7                 mov     eax, [ebp+arg_0]
.text:00000DBA                 mov     ecx, [eax+8]
.text:00000DBD                 mov     [ebp+var_4], ecx
.text:00000DC0                 mov     edx, [ebp+arg_0]
.text:00000DC3                 mov     eax, [edx+0Ch]
.text:00000DC6                 mov     [ebp+var_8], eax
.text:00000DC9                 mov     ecx, [ebp+var_4]
.text:00000DCC                 push    ecx
.text:00000DCD                 call    _bignum_bitcount
.text:00000DD2                 add     esp, 4
.text:00000DD5                 add     eax, 0Fh
.text:00000DD8                 cdq
.text:00000DD9                 and     edx, 0Fh
.text:00000DDC                 add     eax, edx
.text:00000DDE                 sar     eax, 4
.text:00000DE1                 mov     [ebp+var_C], eax
.text:00000DE4                 mov     edx, [ebp+var_8]
.text:00000DE7                 push    edx
.text:00000DE8                 call    _bignum_bitcount
.text:00000DED                 add     esp, 4
.text:00000DF0                 add     eax, 0Fh
.text:00000DF3                 cdq
.text:00000DF4                 and     edx, 0Fh
.text:00000DF7                 add     eax, edx
.text:00000DF9                 sar     eax, 4
.text:00000DFC                 mov     [ebp+var_10], eax
.text:00000DFF                 mov     eax, [ebp+var_C]
.text:00000E02                 add     eax, [ebp+var_10]
.text:00000E05                 lea     eax, ds:14h[eax*4]
.text:00000E0C                 add     esp, 10h
.text:00000E0F                 cmp     ebp, esp
.text:00000E11                 call    __RTC_CheckEsp
.text:00000E16                 mov     esp, ebp
.text:00000E18                 pop     ebp
.text:00000E19                 retn
.text:00000E19 _rsastr_len     endp
.text:00000E19
.text:00000E19 ; ---------------------------------------------------------------------------
.text:00000E1A                 align 10h
.text:00000E20
.text:00000E20 ; =============== S U B R O U T I N E =======================================
.text:00000E20
.text:00000E20 ; Attributes: bp-based frame
.text:00000E20
.text:00000E20                 public _rsastr_fmt
.text:00000E20 _rsastr_fmt     proc near               ; CODE XREF: _rsa2_fmtkey+49p
.text:00000E20
.text:00000E20 var_1C          = dword ptr -1Ch
.text:00000E20 var_18          = dword ptr -18h
.text:00000E20 var_14          = dword ptr -14h
.text:00000E20 var_10          = dword ptr -10h
.text:00000E20 var_C           = dword ptr -0Ch
.text:00000E20 var_8           = dword ptr -8
.text:00000E20 var_4           = dword ptr -4
.text:00000E20 arg_0           = dword ptr  8
.text:00000E20 arg_4           = dword ptr  0Ch
.text:00000E20
.text:00000E20                 push    ebp
.text:00000E21                 mov     ebp, esp
.text:00000E23                 sub     esp, 1Ch
.text:00000E26                 mov     eax, 0CCCCCCCCh
.text:00000E2B                 mov     [ebp+var_1C], eax
.text:00000E2E                 mov     [ebp+var_18], eax
.text:00000E31                 mov     [ebp+var_14], eax
.text:00000E34                 mov     [ebp+var_10], eax
.text:00000E37                 mov     [ebp+var_C], eax
.text:00000E3A                 mov     [ebp+var_8], eax
.text:00000E3D                 mov     [ebp+var_4], eax
.text:00000E40                 mov     [ebp+var_C], 0
.text:00000E47                 mov     eax, [ebp+arg_4]
.text:00000E4A                 mov     ecx, [eax+8]
.text:00000E4D                 mov     [ebp+var_4], ecx
.text:00000E50                 mov     edx, [ebp+arg_4]
.text:00000E53                 mov     eax, [edx+0Ch]
.text:00000E56                 mov     [ebp+var_8], eax
.text:00000E59                 push    offset $SG7312  ; "0x"
.text:00000E5E                 mov     ecx, [ebp+arg_0]
.text:00000E61                 add     ecx, [ebp+var_C]
.text:00000E64                 push    ecx             ; char *
.text:00000E65                 call    _sprintf
.text:00000E6A                 add     esp, 8
.text:00000E6D                 add     eax, [ebp+var_C]
.text:00000E70                 mov     [ebp+var_C], eax
.text:00000E73                 mov     edx, [ebp+var_8]
.text:00000E76                 push    edx
.text:00000E77                 call    _bignum_bitcount
.text:00000E7C                 add     esp, 4
.text:00000E7F                 add     eax, 3
.text:00000E82                 cdq
.text:00000E83                 and     edx, 3
.text:00000E86                 add     eax, edx
.text:00000E88                 sar     eax, 2
.text:00000E8B                 mov     [ebp+var_14], eax
.text:00000E8E                 cmp     [ebp+var_14], 1
.text:00000E92                 jge     short loc_E9B
.text:00000E94                 mov     [ebp+var_14], 1
.text:00000E9B
.text:00000E9B loc_E9B:                                ; CODE XREF: _rsastr_fmt+72j
.text:00000E9B                 mov     eax, [ebp+var_14]
.text:00000E9E                 mov     [ebp+var_10], eax
.text:00000EA1
.text:00000EA1 loc_EA1:                                ; CODE XREF: _rsastr_fmt+DAj
.text:00000EA1                 mov     ecx, [ebp+var_10]
.text:00000EA4                 mov     [ebp+var_18], ecx
.text:00000EA7                 mov     edx, [ebp+var_10]
.text:00000EAA                 sub     edx, 1
.text:00000EAD                 mov     [ebp+var_10], edx
.text:00000EB0                 cmp     [ebp+var_18], 0
.text:00000EB4                 jz      short loc_EFC
.text:00000EB6                 mov     eax, [ebp+var_10]
.text:00000EB9                 cdq
.text:00000EBA                 sub     eax, edx
.text:00000EBC                 sar     eax, 1
.text:00000EBE                 push    eax
.text:00000EBF                 mov     eax, [ebp+var_8]
.text:00000EC2                 push    eax
.text:00000EC3                 call    _bignum_byte
.text:00000EC8                 add     esp, 8
.text:00000ECB                 mov     ecx, [ebp+var_10]
.text:00000ECE                 and     ecx, 80000001h
.text:00000ED4                 jns     short loc_EDB
.text:00000ED6                 dec     ecx
.text:00000ED7                 or      ecx, 0FFFFFFFEh
.text:00000EDA                 inc     ecx
.text:00000EDB
.text:00000EDB loc_EDB:                                ; CODE XREF: _rsastr_fmt+B4j
.text:00000EDB                 shl     ecx, 2
.text:00000EDE                 sar     eax, cl
.text:00000EE0                 and     eax, 0Fh
.text:00000EE3                 mov     ecx, [ebp+arg_0]
.text:00000EE6                 add     ecx, [ebp+var_C]
.text:00000EE9                 mov     dl, ds:?hex@?1??rsastr_fmt@@9@9[eax]
.text:00000EEF                 mov     [ecx], dl
.text:00000EF1                 mov     eax, [ebp+var_C]
.text:00000EF4                 add     eax, 1
.text:00000EF7                 mov     [ebp+var_C], eax
.text:00000EFA                 jmp     short loc_EA1
.text:00000EFC ; ---------------------------------------------------------------------------
.text:00000EFC
.text:00000EFC loc_EFC:                                ; CODE XREF: _rsastr_fmt+94j
.text:00000EFC                 push    offset $SG7317  ; ",0x"
.text:00000F01                 mov     ecx, [ebp+arg_0]
.text:00000F04                 add     ecx, [ebp+var_C]
.text:00000F07                 push    ecx             ; char *
.text:00000F08                 call    _sprintf
.text:00000F0D                 add     esp, 8
.text:00000F10                 add     eax, [ebp+var_C]
.text:00000F13                 mov     [ebp+var_C], eax
.text:00000F16                 mov     edx, [ebp+var_4]
.text:00000F19                 push    edx
.text:00000F1A                 call    _bignum_bitcount
.text:00000F1F                 add     esp, 4
.text:00000F22                 add     eax, 3
.text:00000F25                 cdq
.text:00000F26                 and     edx, 3
.text:00000F29                 add     eax, edx
.text:00000F2B                 sar     eax, 2
.text:00000F2E                 mov     [ebp+var_14], eax
.text:00000F31                 cmp     [ebp+var_14], 1
.text:00000F35                 jge     short loc_F3E
.text:00000F37                 mov     [ebp+var_14], 1
.text:00000F3E
.text:00000F3E loc_F3E:                                ; CODE XREF: _rsastr_fmt+115j
.text:00000F3E                 mov     eax, [ebp+var_14]
.text:00000F41                 mov     [ebp+var_10], eax
.text:00000F44
.text:00000F44 loc_F44:                                ; CODE XREF: _rsastr_fmt+17Dj
.text:00000F44                 mov     ecx, [ebp+var_10]
.text:00000F47                 mov     [ebp+var_1C], ecx
.text:00000F4A                 mov     edx, [ebp+var_10]
.text:00000F4D                 sub     edx, 1
.text:00000F50                 mov     [ebp+var_10], edx
.text:00000F53                 cmp     [ebp+var_1C], 0
.text:00000F57                 jz      short loc_F9F
.text:00000F59                 mov     eax, [ebp+var_10]
.text:00000F5C                 cdq
.text:00000F5D                 sub     eax, edx
.text:00000F5F                 sar     eax, 1
.text:00000F61                 push    eax
.text:00000F62                 mov     eax, [ebp+var_4]
.text:00000F65                 push    eax
.text:00000F66                 call    _bignum_byte
.text:00000F6B                 add     esp, 8
.text:00000F6E                 mov     ecx, [ebp+var_10]
.text:00000F71                 and     ecx, 80000001h
.text:00000F77                 jns     short loc_F7E
.text:00000F79                 dec     ecx
.text:00000F7A                 or      ecx, 0FFFFFFFEh
.text:00000F7D                 inc     ecx
.text:00000F7E
.text:00000F7E loc_F7E:                                ; CODE XREF: _rsastr_fmt+157j
.text:00000F7E                 shl     ecx, 2
.text:00000F81                 sar     eax, cl
.text:00000F83                 and     eax, 0Fh
.text:00000F86                 mov     ecx, [ebp+arg_0]
.text:00000F89                 add     ecx, [ebp+var_C]
.text:00000F8C                 mov     dl, ds:?hex@?1??rsastr_fmt@@9@9[eax]
.text:00000F92                 mov     [ecx], dl
.text:00000F94                 mov     eax, [ebp+var_C]
.text:00000F97                 add     eax, 1
.text:00000F9A                 mov     [ebp+var_C], eax
.text:00000F9D                 jmp     short loc_F44
.text:00000F9F ; ---------------------------------------------------------------------------
.text:00000F9F
.text:00000F9F loc_F9F:                                ; CODE XREF: _rsastr_fmt+137j
.text:00000F9F                 mov     ecx, [ebp+arg_0]
.text:00000FA2                 add     ecx, [ebp+var_C]
.text:00000FA5                 mov     byte ptr [ecx], 0
.text:00000FA8                 add     esp, 1Ch
.text:00000FAB                 cmp     ebp, esp
.text:00000FAD                 call    __RTC_CheckEsp
.text:00000FB2                 mov     esp, ebp
.text:00000FB4                 pop     ebp
.text:00000FB5                 retn
.text:00000FB5 _rsastr_fmt     endp
.text:00000FB5
.text:00000FB5 ; ---------------------------------------------------------------------------
.text:00000FB6                 align 10h
.text:00000FC0
.text:00000FC0 ; =============== S U B R O U T I N E =======================================
.text:00000FC0
.text:00000FC0 ; Attributes: bp-based frame
.text:00000FC0
.text:00000FC0 ; int __cdecl rsa_fingerprint(char *, size_t, int)
.text:00000FC0                 public _rsa_fingerprint
.text:00000FC0 _rsa_fingerprint proc near
.text:00000FC0
.text:00000FC0 var_110         = dword ptr -110h
.text:00000FC0 var_10C         = dword ptr -10Ch
.text:00000FC0 var_108         = dword ptr -108h
.text:00000FC0 var_FD          = byte ptr -0FDh
.text:00000FC0 var_F1          = byte ptr -0F1h
.text:00000FC0 var_EC          = dword ptr -0ECh
.text:00000FC0 var_E8          = dword ptr -0E8h
.text:00000FC0 var_E4          = dword ptr -0E4h
.text:00000FC0 var_DC          = byte ptr -0DCh
.text:00000FC0 var_7C          = byte ptr -7Ch
.text:00000FC0 var_64          = byte ptr -64h
.text:00000FC0 var_4           = dword ptr -4
.text:00000FC0 arg_0           = dword ptr  8
.text:00000FC0 arg_4           = dword ptr  0Ch
.text:00000FC0 arg_8           = dword ptr  10h
.text:00000FC0
.text:00000FC0                 push    ebp
.text:00000FC1                 mov     ebp, esp
.text:00000FC3                 sub     esp, 110h
.text:00000FC9                 push    edi
.text:00000FCA                 lea     edi, [ebp+var_110]
.text:00000FD0                 mov     ecx, 44h ; 'D'
.text:00000FD5                 mov     eax, 0CCCCCCCCh
.text:00000FDA                 rep stosd
.text:00000FDC                 mov     eax, dword ptr ds:___security_cookie
.text:00000FE1                 xor     eax, ebp
.text:00000FE3                 mov     [ebp+var_4], eax
.text:00000FE6                 lea     eax, [ebp+var_64]
.text:00000FE9                 push    eax
.text:00000FEA                 call    _MD5Init
.text:00000FEF                 add     esp, 4
.text:00000FF2                 mov     ecx, [ebp+arg_8]
.text:00000FF5                 mov     edx, [ecx+8]
.text:00000FF8                 push    edx
.text:00000FF9                 call    _ssh1_bignum_length
.text:00000FFE                 add     esp, 4
.text:00001001                 sub     eax, 2
.text:00001004                 mov     [ebp+var_E4], eax
.text:0000100A                 mov     eax, [ebp+var_E4]
.text:00001010                 mov     [ebp+var_EC], eax
.text:00001016
.text:00001016 loc_1016:                               ; CODE XREF: _rsa_fingerprint+ABj
.text:00001016                 mov     ecx, [ebp+var_EC]
.text:0000101C                 mov     [ebp+var_108], ecx
.text:00001022                 mov     edx, [ebp+var_EC]
.text:00001028                 sub     edx, 1
.text:0000102B                 mov     [ebp+var_EC], edx
.text:00001031                 cmp     [ebp+var_108], 0
.text:00001038                 jz      short loc_106D
.text:0000103A                 mov     eax, [ebp+var_EC]
.text:00001040                 push    eax
.text:00001041                 mov     ecx, [ebp+arg_8]
.text:00001044                 mov     edx, [ecx+8]
.text:00001047                 push    edx
.text:00001048                 call    _bignum_byte
.text:0000104D                 add     esp, 8
.text:00001050                 mov     [ebp+var_F1], al
.text:00001056                 push    1
.text:00001058                 lea     eax, [ebp+var_F1]
.text:0000105E                 push    eax
.text:0000105F                 lea     ecx, [ebp+var_64]
.text:00001062                 push    ecx
.text:00001063                 call    _MD5Update
.text:00001068                 add     esp, 0Ch
.text:0000106B                 jmp     short loc_1016
.text:0000106D ; ---------------------------------------------------------------------------
.text:0000106D
.text:0000106D loc_106D:                               ; CODE XREF: _rsa_fingerprint+78j
.text:0000106D                 mov     edx, [ebp+arg_8]
.text:00001070                 mov     eax, [edx+0Ch]
.text:00001073                 push    eax
.text:00001074                 call    _ssh1_bignum_length
.text:00001079                 add     esp, 4
.text:0000107C                 sub     eax, 2
.text:0000107F                 mov     [ebp+var_E4], eax
.text:00001085                 mov     ecx, [ebp+var_E4]
.text:0000108B                 mov     [ebp+var_EC], ecx
.text:00001091
.text:00001091 loc_1091:                               ; CODE XREF: _rsa_fingerprint+126j
.text:00001091                 mov     edx, [ebp+var_EC]
.text:00001097                 mov     [ebp+var_10C], edx
.text:0000109D                 mov     eax, [ebp+var_EC]
.text:000010A3                 sub     eax, 1
.text:000010A6                 mov     [ebp+var_EC], eax
.text:000010AC                 cmp     [ebp+var_10C], 0
.text:000010B3                 jz      short loc_10E8
.text:000010B5                 mov     ecx, [ebp+var_EC]
.text:000010BB                 push    ecx
.text:000010BC                 mov     edx, [ebp+arg_8]
.text:000010BF                 mov     eax, [edx+0Ch]
.text:000010C2                 push    eax
.text:000010C3                 call    _bignum_byte
.text:000010C8                 add     esp, 8
.text:000010CB                 mov     [ebp+var_FD], al
.text:000010D1                 push    1
.text:000010D3                 lea     ecx, [ebp+var_FD]
.text:000010D9                 push    ecx
.text:000010DA                 lea     edx, [ebp+var_64]
.text:000010DD                 push    edx
.text:000010DE                 call    _MD5Update
.text:000010E3                 add     esp, 0Ch
.text:000010E6                 jmp     short loc_1091
.text:000010E8 ; ---------------------------------------------------------------------------
.text:000010E8
.text:000010E8 loc_10E8:                               ; CODE XREF: _rsa_fingerprint+F3j
.text:000010E8                 lea     eax, [ebp+var_64]
.text:000010EB                 push    eax
.text:000010EC                 lea     ecx, [ebp+var_7C]
.text:000010EF                 push    ecx
.text:000010F0                 call    _MD5Final
.text:000010F5                 add     esp, 8
.text:000010F8                 mov     edx, [ebp+arg_8]
.text:000010FB                 mov     eax, [edx+8]
.text:000010FE                 push    eax
.text:000010FF                 call    _bignum_bitcount
.text:00001104                 add     esp, 4
.text:00001107                 push    eax
.text:00001108                 push    offset $SG7343  ; "%d "
.text:0000110D                 lea     ecx, [ebp+var_DC]
.text:00001113                 push    ecx             ; char *
.text:00001114                 call    _sprintf
.text:00001119                 add     esp, 0Ch
.text:0000111C                 mov     [ebp+var_EC], 0
.text:00001126                 jmp     short loc_1137
.text:00001128 ; ---------------------------------------------------------------------------
.text:00001128
.text:00001128 loc_1128:                               ; CODE XREF: _rsa_fingerprint+1D6j
.text:00001128                 mov     edx, [ebp+var_EC]
.text:0000112E                 add     edx, 1
.text:00001131                 mov     [ebp+var_EC], edx
.text:00001137
.text:00001137 loc_1137:                               ; CODE XREF: _rsa_fingerprint+166j
.text:00001137                 cmp     [ebp+var_EC], 10h
.text:0000113E                 jge     short loc_1198
.text:00001140                 cmp     [ebp+var_EC], 0
.text:00001147                 jz      short loc_1155
.text:00001149                 mov     [ebp+var_110], offset $SG7347
.text:00001153                 jmp     short loc_115F
.text:00001155 ; ---------------------------------------------------------------------------
.text:00001155
.text:00001155 loc_1155:                               ; CODE XREF: _rsa_fingerprint+187j
.text:00001155                 mov     [ebp+var_110], offset $SG7348
.text:0000115F
.text:0000115F loc_115F:                               ; CODE XREF: _rsa_fingerprint+193j
.text:0000115F                 mov     eax, [ebp+var_EC]
.text:00001165                 movzx   ecx, [ebp+eax+var_7C]
.text:0000116A                 push    ecx
.text:0000116B                 mov     edx, [ebp+var_110]
.text:00001171                 push    edx
.text:00001172                 push    offset $SG7349  ; "%s%02x"
.text:00001177                 lea     eax, [ebp+var_DC]
.text:0000117D                 push    eax             ; char *
.text:0000117E                 call    _strlen
.text:00001183                 add     esp, 4
.text:00001186                 lea     ecx, [ebp+eax+var_DC]
.text:0000118D                 push    ecx             ; char *
.text:0000118E                 call    _sprintf
.text:00001193                 add     esp, 10h
.text:00001196                 jmp     short loc_1128
.text:00001198 ; ---------------------------------------------------------------------------
.text:00001198
.text:00001198 loc_1198:                               ; CODE XREF: _rsa_fingerprint+17Ej
.text:00001198                 mov     edx, [ebp+arg_4]
.text:0000119B                 push    edx             ; size_t
.text:0000119C                 lea     eax, [ebp+var_DC]
.text:000011A2                 push    eax             ; char *
.text:000011A3                 mov     ecx, [ebp+arg_0]
.text:000011A6                 push    ecx             ; char *
.text:000011A7                 call    _strncpy
.text:000011AC                 add     esp, 0Ch
.text:000011AF                 mov     edx, [ebp+arg_0]
.text:000011B2                 add     edx, [ebp+arg_4]
.text:000011B5                 mov     byte ptr [edx-1], 0
.text:000011B9                 mov     eax, [ebp+arg_0]
.text:000011BC                 push    eax             ; char *
.text:000011BD                 call    _strlen
.text:000011C2                 add     esp, 4
.text:000011C5                 mov     [ebp+var_E8], eax
.text:000011CB                 mov     ecx, [ebp+arg_8]
.text:000011CE                 cmp     dword ptr [ecx+20h], 0
.text:000011D2                 jz      short loc_1222
.text:000011D4                 mov     edx, [ebp+arg_4]
.text:000011D7                 sub     edx, 1
.text:000011DA                 cmp     [ebp+var_E8], edx
.text:000011E0                 jge     short loc_1222
.text:000011E2                 mov     eax, [ebp+arg_0]
.text:000011E5                 add     eax, [ebp+var_E8]
.text:000011EB                 mov     byte ptr [eax], 20h ; ' '
.text:000011EE                 mov     ecx, [ebp+arg_4]
.text:000011F1                 sub     ecx, [ebp+var_E8]
.text:000011F7                 sub     ecx, 1
.text:000011FA                 push    ecx             ; size_t
.text:000011FB                 mov     edx, [ebp+arg_8]
.text:000011FE                 mov     eax, [edx+20h]
.text:00001201                 push    eax             ; char *
.text:00001202                 mov     ecx, [ebp+var_E8]
.text:00001208                 mov     edx, [ebp+arg_0]
.text:0000120B                 lea     eax, [edx+ecx+1]
.text:0000120F                 push    eax             ; char *
.text:00001210                 call    _strncpy
.text:00001215                 add     esp, 0Ch
.text:00001218                 mov     ecx, [ebp+arg_0]
.text:0000121B                 add     ecx, [ebp+arg_4]
.text:0000121E                 mov     byte ptr [ecx-1], 0
.text:00001222
.text:00001222 loc_1222:                               ; CODE XREF: _rsa_fingerprint+212j
.text:00001222                                         ; _rsa_fingerprint+220j
.text:00001222                 push    edx
.text:00001223                 mov     ecx, ebp
.text:00001225                 push    eax
.text:00001226                 lea     edx, $LN19
.text:0000122C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001231                 pop     eax
.text:00001232                 pop     edx
.text:00001233                 pop     edi
.text:00001234                 mov     ecx, [ebp+var_4]
.text:00001237                 xor     ecx, ebp
.text:00001239                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000123E                 add     esp, 110h
.text:00001244                 cmp     ebp, esp
.text:00001246                 call    __RTC_CheckEsp
.text:0000124B                 mov     esp, ebp
.text:0000124D                 pop     ebp
.text:0000124E                 retn
.text:0000124E _rsa_fingerprint endp
.text:0000124E
.text:0000124E ; ---------------------------------------------------------------------------
.text:0000124F                 align 10h
.text:00001250 $LN19           dd 5                    ; DATA XREF: _rsa_fingerprint+266o
.text:00001254                 dd offset $LN18
.text:00001258 $LN18           dd 0FFFFFF9Ch, 5Ch      ; DATA XREF: .text:00001254o
.text:00001260                 dd offset $LN13_0       ; "md5c"
.text:00001264                 dd 0FFFFFF84h, 10h
.text:0000126C                 dd offset $LN14_0       ; "digest"
.text:00001270                 dd 0FFFFFF24h, 58h
.text:00001278                 dd offset $LN15_0       ; "buffer"
.text:0000127C                 dd 0FFFFFF0Fh, 1
.text:00001284                 dd offset $LN16_0
.text:00001288                 dd 0FFFFFF03h, 1
.text:00001290                 dd offset $LN17_0
.text:00001294 $LN17_0         db 63h, 0               ; DATA XREF: .text:00001290o
.text:00001296 $LN16_0         dw 63h                  ; DATA XREF: .text:00001284o
.text:00001298 $LN15_0         db 'buffer',0           ; DATA XREF: .text:00001278o
.text:0000129F $LN14_0         db 'digest',0           ; DATA XREF: .text:0000126Co
.text:000012A6 $LN13_0         db 'md5c',0             ; DATA XREF: .text:00001260o
.text:000012AB                 align 10h
.text:000012B0
.text:000012B0 ; =============== S U B R O U T I N E =======================================
.text:000012B0
.text:000012B0 ; Attributes: bp-based frame
.text:000012B0
.text:000012B0                 public _rsa_verify
.text:000012B0 _rsa_verify     proc near               ; CODE XREF: _rsa2_createkey+8Cp
.text:000012B0                                         ; _rsa2_openssh_createkey+101p
.text:000012B0
.text:000012B0 var_18          = dword ptr -18h
.text:000012B0 var_14          = dword ptr -14h
.text:000012B0 var_10          = dword ptr -10h
.text:000012B0 var_C           = dword ptr -0Ch
.text:000012B0 var_8           = dword ptr -8
.text:000012B0 var_4           = dword ptr -4
.text:000012B0 arg_0           = dword ptr  8
.text:000012B0
.text:000012B0                 push    ebp
.text:000012B1                 mov     ebp, esp
.text:000012B3                 sub     esp, 18h
.text:000012B6                 mov     eax, 0CCCCCCCCh
.text:000012BB                 mov     [ebp+var_18], eax
.text:000012BE                 mov     [ebp+var_14], eax
.text:000012C1                 mov     [ebp+var_10], eax
.text:000012C4                 mov     [ebp+var_C], eax
.text:000012C7                 mov     [ebp+var_8], eax
.text:000012CA                 mov     [ebp+var_4], eax
.text:000012CD                 mov     eax, [ebp+arg_0]
.text:000012D0                 mov     ecx, [eax+18h]
.text:000012D3                 push    ecx
.text:000012D4                 mov     edx, [ebp+arg_0]
.text:000012D7                 mov     eax, [edx+14h]
.text:000012DA                 push    eax
.text:000012DB                 call    _bigmul
.text:000012E0                 add     esp, 8
.text:000012E3                 mov     [ebp+var_4], eax
.text:000012E6                 mov     ecx, [ebp+arg_0]
.text:000012E9                 mov     edx, [ecx+8]
.text:000012EC                 push    edx
.text:000012ED                 mov     eax, [ebp+var_4]
.text:000012F0                 push    eax
.text:000012F1                 call    _bignum_cmp
.text:000012F6                 add     esp, 8
.text:000012F9                 mov     [ebp+var_14], eax
.text:000012FC                 mov     ecx, [ebp+var_4]
.text:000012FF                 push    ecx
.text:00001300                 call    _freebn
.text:00001305                 add     esp, 4
.text:00001308                 cmp     [ebp+var_14], 0
.text:0000130C                 jz      short loc_1315
.text:0000130E                 xor     eax, eax
.text:00001310                 jmp     loc_14C1
.text:00001315 ; ---------------------------------------------------------------------------
.text:00001315
.text:00001315 loc_1315:                               ; CODE XREF: _rsa_verify+5Cj
.text:00001315                 mov     edx, [ebp+arg_0]
.text:00001318                 mov     eax, [edx+14h]
.text:0000131B                 push    eax
.text:0000131C                 call    _copybn
.text:00001321                 add     esp, 4
.text:00001324                 mov     [ebp+var_C], eax
.text:00001327                 mov     ecx, [ebp+var_C]
.text:0000132A                 push    ecx
.text:0000132B                 call    _decbn
.text:00001330                 add     esp, 4
.text:00001333                 mov     edx, [ebp+var_C]
.text:00001336                 push    edx
.text:00001337                 mov     eax, [ebp+arg_0]
.text:0000133A                 mov     ecx, [eax+10h]
.text:0000133D                 push    ecx
.text:0000133E                 mov     edx, [ebp+arg_0]
.text:00001341                 mov     eax, [edx+0Ch]
.text:00001344                 push    eax
.text:00001345                 call    _modmul
.text:0000134A                 add     esp, 0Ch
.text:0000134D                 mov     [ebp+var_8], eax
.text:00001350                 mov     ecx, [ebp+var_C]
.text:00001353                 push    ecx
.text:00001354                 call    _freebn
.text:00001359                 add     esp, 4
.text:0000135C                 mov     edx, dword ptr ds:_One
.text:00001362                 push    edx
.text:00001363                 mov     eax, [ebp+var_8]
.text:00001366                 push    eax
.text:00001367                 call    _bignum_cmp
.text:0000136C                 add     esp, 8
.text:0000136F                 mov     [ebp+var_14], eax
.text:00001372                 mov     ecx, [ebp+var_8]
.text:00001375                 push    ecx
.text:00001376                 call    _freebn
.text:0000137B                 add     esp, 4
.text:0000137E                 cmp     [ebp+var_14], 0
.text:00001382                 jz      short loc_138B
.text:00001384                 xor     eax, eax
.text:00001386                 jmp     loc_14C1
.text:0000138B ; ---------------------------------------------------------------------------
.text:0000138B
.text:0000138B loc_138B:                               ; CODE XREF: _rsa_verify+D2j
.text:0000138B                 mov     edx, [ebp+arg_0]
.text:0000138E                 mov     eax, [edx+18h]
.text:00001391                 push    eax
.text:00001392                 call    _copybn
.text:00001397                 add     esp, 4
.text:0000139A                 mov     [ebp+var_10], eax
.text:0000139D                 mov     ecx, [ebp+var_10]
.text:000013A0                 push    ecx
.text:000013A1                 call    _decbn
.text:000013A6                 add     esp, 4
.text:000013A9                 mov     edx, [ebp+var_10]
.text:000013AC                 push    edx
.text:000013AD                 mov     eax, [ebp+arg_0]
.text:000013B0                 mov     ecx, [eax+10h]
.text:000013B3                 push    ecx
.text:000013B4                 mov     edx, [ebp+arg_0]
.text:000013B7                 mov     eax, [edx+0Ch]
.text:000013BA                 push    eax
.text:000013BB                 call    _modmul
.text:000013C0                 add     esp, 0Ch
.text:000013C3                 mov     [ebp+var_8], eax
.text:000013C6                 mov     ecx, [ebp+var_10]
.text:000013C9                 push    ecx
.text:000013CA                 call    _freebn
.text:000013CF                 add     esp, 4
.text:000013D2                 mov     edx, dword ptr ds:_One
.text:000013D8                 push    edx
.text:000013D9                 mov     eax, [ebp+var_8]
.text:000013DC                 push    eax
.text:000013DD                 call    _bignum_cmp
.text:000013E2                 add     esp, 8
.text:000013E5                 mov     [ebp+var_14], eax
.text:000013E8                 mov     ecx, [ebp+var_8]
.text:000013EB                 push    ecx
.text:000013EC                 call    _freebn
.text:000013F1                 add     esp, 4
.text:000013F4                 cmp     [ebp+var_14], 0
.text:000013F8                 jz      short loc_1401
.text:000013FA                 xor     eax, eax
.text:000013FC                 jmp     loc_14C1
.text:00001401 ; ---------------------------------------------------------------------------
.text:00001401
.text:00001401 loc_1401:                               ; CODE XREF: _rsa_verify+148j
.text:00001401                 mov     edx, [ebp+arg_0]
.text:00001404                 mov     eax, [edx+18h]
.text:00001407                 push    eax
.text:00001408                 mov     ecx, [ebp+arg_0]
.text:0000140B                 mov     edx, [ecx+14h]
.text:0000140E                 push    edx
.text:0000140F                 call    _bignum_cmp
.text:00001414                 add     esp, 8
.text:00001417                 test    eax, eax
.text:00001419                 jg      short loc_1471
.text:0000141B                 mov     eax, [ebp+arg_0]
.text:0000141E                 mov     ecx, [eax+14h]
.text:00001421                 mov     [ebp+var_18], ecx
.text:00001424                 mov     edx, [ebp+arg_0]
.text:00001427                 mov     eax, [ebp+arg_0]
.text:0000142A                 mov     ecx, [eax+18h]
.text:0000142D                 mov     [edx+14h], ecx
.text:00001430                 mov     edx, [ebp+arg_0]
.text:00001433                 mov     eax, [ebp+var_18]
.text:00001436                 mov     [edx+18h], eax
.text:00001439                 mov     ecx, [ebp+arg_0]
.text:0000143C                 mov     edx, [ecx+1Ch]
.text:0000143F                 push    edx
.text:00001440                 call    _freebn
.text:00001445                 add     esp, 4
.text:00001448                 mov     eax, [ebp+arg_0]
.text:0000144B                 mov     ecx, [eax+14h]
.text:0000144E                 push    ecx
.text:0000144F                 mov     edx, [ebp+arg_0]
.text:00001452                 mov     eax, [edx+18h]
.text:00001455                 push    eax
.text:00001456                 call    _modinv
.text:0000145B                 add     esp, 8
.text:0000145E                 mov     ecx, [ebp+arg_0]
.text:00001461                 mov     [ecx+1Ch], eax
.text:00001464                 mov     edx, [ebp+arg_0]
.text:00001467                 cmp     dword ptr [edx+1Ch], 0
.text:0000146B                 jnz     short loc_1471
.text:0000146D                 xor     eax, eax
.text:0000146F                 jmp     short loc_14C1
.text:00001471 ; ---------------------------------------------------------------------------
.text:00001471
.text:00001471 loc_1471:                               ; CODE XREF: _rsa_verify+169j
.text:00001471                                         ; _rsa_verify+1BBj
.text:00001471                 mov     eax, [ebp+arg_0]
.text:00001474                 mov     ecx, [eax+14h]
.text:00001477                 push    ecx
.text:00001478                 mov     edx, [ebp+arg_0]
.text:0000147B                 mov     eax, [edx+18h]
.text:0000147E                 push    eax
.text:0000147F                 mov     ecx, [ebp+arg_0]
.text:00001482                 mov     edx, [ecx+1Ch]
.text:00001485                 push    edx
.text:00001486                 call    _modmul
.text:0000148B                 add     esp, 0Ch
.text:0000148E                 mov     [ebp+var_4], eax
.text:00001491                 mov     eax, dword ptr ds:_One
.text:00001496                 push    eax
.text:00001497                 mov     ecx, [ebp+var_4]
.text:0000149A                 push    ecx
.text:0000149B                 call    _bignum_cmp
.text:000014A0                 add     esp, 8
.text:000014A3                 mov     [ebp+var_14], eax
.text:000014A6                 mov     edx, [ebp+var_4]
.text:000014A9                 push    edx
.text:000014AA                 call    _freebn
.text:000014AF                 add     esp, 4
.text:000014B2                 cmp     [ebp+var_14], 0
.text:000014B6                 jz      short loc_14BC
.text:000014B8                 xor     eax, eax
.text:000014BA                 jmp     short loc_14C1
.text:000014BC ; ---------------------------------------------------------------------------
.text:000014BC
.text:000014BC loc_14BC:                               ; CODE XREF: _rsa_verify+206j
.text:000014BC                 mov     eax, 1
.text:000014C1
.text:000014C1 loc_14C1:                               ; CODE XREF: _rsa_verify+60j
.text:000014C1                                         ; _rsa_verify+D6j ...
.text:000014C1                 add     esp, 18h
.text:000014C4                 cmp     ebp, esp
.text:000014C6                 call    __RTC_CheckEsp
.text:000014CB                 mov     esp, ebp
.text:000014CD                 pop     ebp
.text:000014CE                 retn
.text:000014CE _rsa_verify     endp
.text:000014CE
.text:000014CE ; ---------------------------------------------------------------------------
.text:000014CF                 align 10h
.text:000014D0
.text:000014D0 ; =============== S U B R O U T I N E =======================================
.text:000014D0
.text:000014D0 ; Attributes: bp-based frame
.text:000014D0
.text:000014D0                 public _rsa_public_blob
.text:000014D0 _rsa_public_blob proc near
.text:000014D0
.text:000014D0 var_C           = dword ptr -0Ch
.text:000014D0 var_8           = dword ptr -8
.text:000014D0 var_4           = dword ptr -4
.text:000014D0 arg_0           = dword ptr  8
.text:000014D0 arg_4           = dword ptr  0Ch
.text:000014D0
.text:000014D0                 push    ebp
.text:000014D1                 mov     ebp, esp
.text:000014D3                 sub     esp, 0Ch
.text:000014D6                 push    esi
.text:000014D7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000014DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000014E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014EC                 mov     eax, [ebp+arg_0]
.text:000014EF                 mov     ecx, [eax+8]
.text:000014F2                 push    ecx
.text:000014F3                 call    _ssh1_bignum_length
.text:000014F8                 add     esp, 4
.text:000014FB                 mov     esi, eax
.text:000014FD                 mov     edx, [ebp+arg_0]
.text:00001500                 mov     eax, [edx+0Ch]
.text:00001503                 push    eax
.text:00001504                 call    _ssh1_bignum_length
.text:00001509                 add     esp, 4
.text:0000150C                 lea     ecx, [esi+eax+4]
.text:00001510                 mov     [ebp+var_4], ecx
.text:00001513                 push    1
.text:00001515                 mov     edx, [ebp+var_4]
.text:00001518                 push    edx
.text:00001519                 call    _safemalloc
.text:0000151E                 add     esp, 8
.text:00001521                 mov     [ebp+var_C], eax
.text:00001524                 mov     eax, [ebp+arg_0]
.text:00001527                 mov     ecx, [eax+8]
.text:0000152A                 push    ecx
.text:0000152B                 call    _bignum_bitcount
.text:00001530                 add     esp, 4
.text:00001533                 sar     eax, 18h
.text:00001536                 mov     edx, [ebp+var_C]
.text:00001539                 mov     [edx], al
.text:0000153B                 mov     eax, [ebp+arg_0]
.text:0000153E                 mov     ecx, [eax+8]
.text:00001541                 push    ecx
.text:00001542                 call    _bignum_bitcount
.text:00001547                 add     esp, 4
.text:0000154A                 sar     eax, 10h
.text:0000154D                 mov     edx, [ebp+var_C]
.text:00001550                 mov     [edx+1], al
.text:00001553                 mov     eax, [ebp+arg_0]
.text:00001556                 mov     ecx, [eax+8]
.text:00001559                 push    ecx
.text:0000155A                 call    _bignum_bitcount
.text:0000155F                 add     esp, 4
.text:00001562                 sar     eax, 8
.text:00001565                 mov     edx, [ebp+var_C]
.text:00001568                 mov     [edx+2], al
.text:0000156B                 mov     eax, [ebp+arg_0]
.text:0000156E                 mov     ecx, [eax+8]
.text:00001571                 push    ecx
.text:00001572                 call    _bignum_bitcount
.text:00001577                 add     esp, 4
.text:0000157A                 mov     edx, [ebp+var_C]
.text:0000157D                 mov     [edx+3], al
.text:00001580                 mov     [ebp+var_8], 4
.text:00001587                 mov     eax, [ebp+arg_0]
.text:0000158A                 mov     ecx, [eax+0Ch]
.text:0000158D                 push    ecx
.text:0000158E                 mov     edx, [ebp+var_C]
.text:00001591                 add     edx, [ebp+var_8]
.text:00001594                 push    edx
.text:00001595                 call    _ssh1_write_bignum
.text:0000159A                 add     esp, 8
.text:0000159D                 add     eax, [ebp+var_8]
.text:000015A0                 mov     [ebp+var_8], eax
.text:000015A3                 mov     eax, [ebp+arg_0]
.text:000015A6                 mov     ecx, [eax+8]
.text:000015A9                 push    ecx
.text:000015AA                 mov     edx, [ebp+var_C]
.text:000015AD                 add     edx, [ebp+var_8]
.text:000015B0                 push    edx
.text:000015B1                 call    _ssh1_write_bignum
.text:000015B6                 add     esp, 8
.text:000015B9                 add     eax, [ebp+var_8]
.text:000015BC                 mov     [ebp+var_8], eax
.text:000015BF                 mov     eax, [ebp+arg_4]
.text:000015C2                 mov     ecx, [ebp+var_4]
.text:000015C5                 mov     [eax], ecx
.text:000015C7                 mov     eax, [ebp+var_C]
.text:000015CA                 pop     esi
.text:000015CB                 add     esp, 0Ch
.text:000015CE                 cmp     ebp, esp
.text:000015D0                 call    __RTC_CheckEsp
.text:000015D5                 mov     esp, ebp
.text:000015D7                 pop     ebp
.text:000015D8                 retn
.text:000015D8 _rsa_public_blob endp
.text:000015D8
.text:000015D8 ; ---------------------------------------------------------------------------
.text:000015D9                 align 10h
.text:000015E0
.text:000015E0 ; =============== S U B R O U T I N E =======================================
.text:000015E0
.text:000015E0 ; Attributes: bp-based frame
.text:000015E0
.text:000015E0                 public _rsa_public_blob_len
.text:000015E0 _rsa_public_blob_len proc near
.text:000015E0
.text:000015E0 var_8           = dword ptr -8
.text:000015E0 var_4           = dword ptr -4
.text:000015E0 arg_0           = dword ptr  8
.text:000015E0 arg_4           = dword ptr  0Ch
.text:000015E0
.text:000015E0                 push    ebp
.text:000015E1                 mov     ebp, esp
.text:000015E3                 sub     esp, 8
.text:000015E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000015ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015F4                 mov     eax, [ebp+arg_0]
.text:000015F7                 mov     [ebp+var_4], eax
.text:000015FA                 cmp     [ebp+arg_4], 4
.text:000015FE                 jge     short loc_1605
.text:00001600                 or      eax, 0FFFFFFFFh
.text:00001603                 jmp     short loc_166F
.text:00001605 ; ---------------------------------------------------------------------------
.text:00001605
.text:00001605 loc_1605:                               ; CODE XREF: _rsa_public_blob_len+1Ej
.text:00001605                 mov     ecx, [ebp+var_4]
.text:00001608                 add     ecx, 4
.text:0000160B                 mov     [ebp+var_4], ecx
.text:0000160E                 mov     edx, [ebp+arg_4]
.text:00001611                 sub     edx, 4
.text:00001614                 mov     [ebp+arg_4], edx
.text:00001617                 push    0
.text:00001619                 mov     eax, [ebp+arg_4]
.text:0000161C                 push    eax
.text:0000161D                 mov     ecx, [ebp+var_4]
.text:00001620                 push    ecx
.text:00001621                 call    _ssh1_read_bignum
.text:00001626                 add     esp, 0Ch
.text:00001629                 mov     [ebp+var_8], eax
.text:0000162C                 cmp     [ebp+var_8], 0
.text:00001630                 jge     short loc_1637
.text:00001632                 or      eax, 0FFFFFFFFh
.text:00001635                 jmp     short loc_166F
.text:00001637 ; ---------------------------------------------------------------------------
.text:00001637
.text:00001637 loc_1637:                               ; CODE XREF: _rsa_public_blob_len+50j
.text:00001637                 mov     edx, [ebp+var_4]
.text:0000163A                 add     edx, [ebp+var_8]
.text:0000163D                 mov     [ebp+var_4], edx
.text:00001640                 push    0
.text:00001642                 mov     eax, [ebp+arg_4]
.text:00001645                 push    eax
.text:00001646                 mov     ecx, [ebp+var_4]
.text:00001649                 push    ecx
.text:0000164A                 call    _ssh1_read_bignum
.text:0000164F                 add     esp, 0Ch
.text:00001652                 mov     [ebp+var_8], eax
.text:00001655                 cmp     [ebp+var_8], 0
.text:00001659                 jge     short loc_1660
.text:0000165B                 or      eax, 0FFFFFFFFh
.text:0000165E                 jmp     short loc_166F
.text:00001660 ; ---------------------------------------------------------------------------
.text:00001660
.text:00001660 loc_1660:                               ; CODE XREF: _rsa_public_blob_len+79j
.text:00001660                 mov     edx, [ebp+var_4]
.text:00001663                 add     edx, [ebp+var_8]
.text:00001666                 mov     [ebp+var_4], edx
.text:00001669                 mov     eax, [ebp+var_4]
.text:0000166C                 sub     eax, [ebp+arg_0]
.text:0000166F
.text:0000166F loc_166F:                               ; CODE XREF: _rsa_public_blob_len+23j
.text:0000166F                                         ; _rsa_public_blob_len+55j ...
.text:0000166F                 add     esp, 8
.text:00001672                 cmp     ebp, esp
.text:00001674                 call    __RTC_CheckEsp
.text:00001679                 mov     esp, ebp
.text:0000167B                 pop     ebp
.text:0000167C                 retn
.text:0000167C _rsa_public_blob_len endp
.text:0000167C
.text:0000167C ; ---------------------------------------------------------------------------
.text:0000167D                 align 10h
.text:00001680
.text:00001680 ; =============== S U B R O U T I N E =======================================
.text:00001680
.text:00001680 ; Attributes: bp-based frame
.text:00001680
.text:00001680                 public _freersakey
.text:00001680 _freersakey     proc near               ; CODE XREF: _rsa2_freekey+15p
.text:00001680
.text:00001680 arg_0           = dword ptr  8
.text:00001680
.text:00001680                 push    ebp
.text:00001681                 mov     ebp, esp
.text:00001683                 mov     eax, [ebp+arg_0]
.text:00001686                 cmp     dword ptr [eax+8], 0
.text:0000168A                 jz      short loc_169B
.text:0000168C                 mov     ecx, [ebp+arg_0]
.text:0000168F                 mov     edx, [ecx+8]
.text:00001692                 push    edx
.text:00001693                 call    _freebn
.text:00001698                 add     esp, 4
.text:0000169B
.text:0000169B loc_169B:                               ; CODE XREF: _freersakey+Aj
.text:0000169B                 mov     eax, [ebp+arg_0]
.text:0000169E                 cmp     dword ptr [eax+0Ch], 0
.text:000016A2                 jz      short loc_16B3
.text:000016A4                 mov     ecx, [ebp+arg_0]
.text:000016A7                 mov     edx, [ecx+0Ch]
.text:000016AA                 push    edx
.text:000016AB                 call    _freebn
.text:000016B0                 add     esp, 4
.text:000016B3
.text:000016B3 loc_16B3:                               ; CODE XREF: _freersakey+22j
.text:000016B3                 mov     eax, [ebp+arg_0]
.text:000016B6                 cmp     dword ptr [eax+10h], 0
.text:000016BA                 jz      short loc_16CB
.text:000016BC                 mov     ecx, [ebp+arg_0]
.text:000016BF                 mov     edx, [ecx+10h]
.text:000016C2                 push    edx
.text:000016C3                 call    _freebn
.text:000016C8                 add     esp, 4
.text:000016CB
.text:000016CB loc_16CB:                               ; CODE XREF: _freersakey+3Aj
.text:000016CB                 mov     eax, [ebp+arg_0]
.text:000016CE                 cmp     dword ptr [eax+14h], 0
.text:000016D2                 jz      short loc_16E3
.text:000016D4                 mov     ecx, [ebp+arg_0]
.text:000016D7                 mov     edx, [ecx+14h]
.text:000016DA                 push    edx
.text:000016DB                 call    _freebn
.text:000016E0                 add     esp, 4
.text:000016E3
.text:000016E3 loc_16E3:                               ; CODE XREF: _freersakey+52j
.text:000016E3                 mov     eax, [ebp+arg_0]
.text:000016E6                 cmp     dword ptr [eax+18h], 0
.text:000016EA                 jz      short loc_16FB
.text:000016EC                 mov     ecx, [ebp+arg_0]
.text:000016EF                 mov     edx, [ecx+18h]
.text:000016F2                 push    edx
.text:000016F3                 call    _freebn
.text:000016F8                 add     esp, 4
.text:000016FB
.text:000016FB loc_16FB:                               ; CODE XREF: _freersakey+6Aj
.text:000016FB                 mov     eax, [ebp+arg_0]
.text:000016FE                 cmp     dword ptr [eax+1Ch], 0
.text:00001702                 jz      short loc_1713
.text:00001704                 mov     ecx, [ebp+arg_0]
.text:00001707                 mov     edx, [ecx+1Ch]
.text:0000170A                 push    edx
.text:0000170B                 call    _freebn
.text:00001710                 add     esp, 4
.text:00001713
.text:00001713 loc_1713:                               ; CODE XREF: _freersakey+82j
.text:00001713                 mov     eax, [ebp+arg_0]
.text:00001716                 cmp     dword ptr [eax+20h], 0
.text:0000171A                 jz      short loc_172B
.text:0000171C                 mov     ecx, [ebp+arg_0]
.text:0000171F                 mov     edx, [ecx+20h]
.text:00001722                 push    edx
.text:00001723                 call    _safefree
.text:00001728                 add     esp, 4
.text:0000172B
.text:0000172B loc_172B:                               ; CODE XREF: _freersakey+9Aj
.text:0000172B                 cmp     ebp, esp
.text:0000172D                 call    __RTC_CheckEsp
.text:00001732                 pop     ebp
.text:00001733                 retn
.text:00001733 _freersakey     endp
.text:00001733
.text:00001733 ; ---------------------------------------------------------------------------
.text:00001734                 align 10h
.text:00001740
.text:00001740 ; =============== S U B R O U T I N E =======================================
.text:00001740
.text:00001740 ; Attributes: bp-based frame
.text:00001740
.text:00001740 _rsa2_newkey    proc near               ; CODE XREF: _rsa2_createkey+25p
.text:00001740                                         ; _rsa2_pubkey_bits+1Cp ...
.text:00001740
.text:00001740 var_1C          = dword ptr -1Ch
.text:00001740 var_18          = dword ptr -18h
.text:00001740 var_14          = dword ptr -14h
.text:00001740 var_10          = dword ptr -10h
.text:00001740 var_C           = dword ptr -0Ch
.text:00001740 var_8           = dword ptr -8
.text:00001740 var_4           = dword ptr -4
.text:00001740 arg_0           = byte ptr  8
.text:00001740 arg_4           = byte ptr  0Ch
.text:00001740
.text:00001740                 push    ebp
.text:00001741                 mov     ebp, esp
.text:00001743                 sub     esp, 1Ch
.text:00001746                 mov     eax, 0CCCCCCCCh
.text:0000174B                 mov     [ebp+var_1C], eax
.text:0000174E                 mov     [ebp+var_18], eax
.text:00001751                 mov     [ebp+var_14], eax
.text:00001754                 mov     [ebp+var_10], eax
.text:00001757                 mov     [ebp+var_C], eax
.text:0000175A                 mov     [ebp+var_8], eax
.text:0000175D                 mov     [ebp+var_4], eax
.text:00001760                 push    24h ; '$'
.text:00001762                 push    1
.text:00001764                 call    _safemalloc
.text:00001769                 add     esp, 8
.text:0000176C                 mov     [ebp+var_1C], eax
.text:0000176F                 lea     eax, [ebp+var_14]
.text:00001772                 push    eax
.text:00001773                 lea     ecx, [ebp+var_8]
.text:00001776                 push    ecx
.text:00001777                 lea     edx, [ebp+arg_4]
.text:0000177A                 push    edx
.text:0000177B                 lea     eax, [ebp+arg_0]
.text:0000177E                 push    eax
.text:0000177F                 call    _getstring
.text:00001784                 add     esp, 10h
.text:00001787                 cmp     [ebp+var_8], 0
.text:0000178B                 jz      short loc_17AA
.text:0000178D                 cmp     [ebp+var_14], 7
.text:00001791                 jnz     short loc_17AA
.text:00001793                 push    7               ; size_t
.text:00001795                 push    offset $SG7454  ; "ssh-rsa"
.text:0000179A                 mov     ecx, [ebp+var_8]
.text:0000179D                 push    ecx             ; void *
.text:0000179E                 call    _memcmp
.text:000017A3                 add     esp, 0Ch
.text:000017A6                 test    eax, eax
.text:000017A8                 jz      short loc_17BD
.text:000017AA
.text:000017AA loc_17AA:                               ; CODE XREF: _rsa2_newkey+4Bj
.text:000017AA                                         ; _rsa2_newkey+51j
.text:000017AA                 mov     edx, [ebp+var_1C]
.text:000017AD                 push    edx
.text:000017AE                 call    _safefree
.text:000017B3                 add     esp, 4
.text:000017B6                 xor     eax, eax
.text:000017B8                 jmp     loc_1840
.text:000017BD ; ---------------------------------------------------------------------------
.text:000017BD
.text:000017BD loc_17BD:                               ; CODE XREF: _rsa2_newkey+68j
.text:000017BD                 lea     eax, [ebp+arg_4]
.text:000017C0                 push    eax
.text:000017C1                 lea     ecx, [ebp+arg_0]
.text:000017C4                 push    ecx
.text:000017C5                 call    _getmp
.text:000017CA                 add     esp, 8
.text:000017CD                 mov     edx, [ebp+var_1C]
.text:000017D0                 mov     [edx+0Ch], eax
.text:000017D3                 lea     eax, [ebp+arg_4]
.text:000017D6                 push    eax
.text:000017D7                 lea     ecx, [ebp+arg_0]
.text:000017DA                 push    ecx
.text:000017DB                 call    _getmp
.text:000017E0                 add     esp, 8
.text:000017E3                 mov     edx, [ebp+var_1C]
.text:000017E6                 mov     [edx+8], eax
.text:000017E9                 mov     eax, [ebp+var_1C]
.text:000017EC                 mov     dword ptr [eax+10h], 0
.text:000017F3                 mov     ecx, [ebp+var_1C]
.text:000017F6                 mov     dword ptr [ecx+1Ch], 0
.text:000017FD                 mov     edx, [ebp+var_1C]
.text:00001800                 mov     dword ptr [edx+18h], 0
.text:00001807                 mov     eax, [ebp+var_1C]
.text:0000180A                 mov     dword ptr [eax+14h], 0
.text:00001811                 mov     ecx, [ebp+var_1C]
.text:00001814                 mov     dword ptr [ecx+20h], 0
.text:0000181B                 mov     edx, [ebp+var_1C]
.text:0000181E                 cmp     dword ptr [edx+0Ch], 0
.text:00001822                 jz      short loc_182D
.text:00001824                 mov     eax, [ebp+var_1C]
.text:00001827                 cmp     dword ptr [eax+8], 0
.text:0000182B                 jnz     short loc_183D
.text:0000182D
.text:0000182D loc_182D:                               ; CODE XREF: _rsa2_newkey+E2j
.text:0000182D                 mov     ecx, [ebp+var_1C]
.text:00001830                 push    ecx
.text:00001831                 call    _rsa2_freekey
.text:00001836                 add     esp, 4
.text:00001839                 xor     eax, eax
.text:0000183B                 jmp     short loc_1840
.text:0000183D ; ---------------------------------------------------------------------------
.text:0000183D
.text:0000183D loc_183D:                               ; CODE XREF: _rsa2_newkey+EBj
.text:0000183D                 mov     eax, [ebp+var_1C]
.text:00001840
.text:00001840 loc_1840:                               ; CODE XREF: _rsa2_newkey+78j
.text:00001840                                         ; _rsa2_newkey+FBj
.text:00001840                 push    edx
.text:00001841                 mov     ecx, ebp
.text:00001843                 push    eax
.text:00001844                 lea     edx, $LN10
.text:0000184A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000184F                 pop     eax
.text:00001850                 pop     edx
.text:00001851                 add     esp, 1Ch
.text:00001854                 cmp     ebp, esp
.text:00001856                 call    __RTC_CheckEsp
.text:0000185B                 mov     esp, ebp
.text:0000185D                 pop     ebp
.text:0000185E                 retn
.text:0000185E _rsa2_newkey    endp
.text:0000185E
.text:0000185E ; ---------------------------------------------------------------------------
.text:0000185F                 align 10h
.text:00001860 $LN10           dd 2                    ; DATA XREF: _rsa2_newkey+104o
.text:00001864                 dd offset $LN9_0
.text:00001868 $LN9_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001864o
.text:00001870                 dd offset $LN7_0        ; "p"
.text:00001874                 dd 0FFFFFFECh, 4
.text:0000187C                 dd offset $LN8_0        ; "slen"
.text:00001880 $LN8_0          db 'slen',0             ; DATA XREF: .text:0000187Co
.text:00001885 $LN7_0          db 'p',0                ; DATA XREF: .text:00001870o
.text:00001887                 align 10h
.text:00001890
.text:00001890 ; =============== S U B R O U T I N E =======================================
.text:00001890
.text:00001890 ; Attributes: bp-based frame
.text:00001890
.text:00001890 _getstring      proc near               ; CODE XREF: _rsa2_newkey+3Fp
.text:00001890                                         ; _getmp+30p ...
.text:00001890
.text:00001890 arg_0           = dword ptr  8
.text:00001890 arg_4           = dword ptr  0Ch
.text:00001890 arg_8           = dword ptr  10h
.text:00001890 arg_C           = dword ptr  14h
.text:00001890
.text:00001890                 push    ebp
.text:00001891                 mov     ebp, esp
.text:00001893                 mov     eax, [ebp+arg_8]
.text:00001896                 mov     dword ptr [eax], 0
.text:0000189C                 mov     ecx, [ebp+arg_4]
.text:0000189F                 cmp     dword ptr [ecx], 4
.text:000018A2                 jge     short loc_18A9
.text:000018A4                 jmp     loc_1943
.text:000018A9 ; ---------------------------------------------------------------------------
.text:000018A9
.text:000018A9 loc_18A9:                               ; CODE XREF: _getstring+12j
.text:000018A9                 mov     edx, [ebp+arg_0]
.text:000018AC                 mov     eax, [edx]
.text:000018AE                 movzx   ecx, byte ptr [eax]
.text:000018B1                 shl     ecx, 18h
.text:000018B4                 mov     edx, [ebp+arg_0]
.text:000018B7                 mov     eax, [edx]
.text:000018B9                 movzx   edx, byte ptr [eax+1]
.text:000018BD                 shl     edx, 10h
.text:000018C0                 or      ecx, edx
.text:000018C2                 mov     eax, [ebp+arg_0]
.text:000018C5                 mov     edx, [eax]
.text:000018C7                 movzx   eax, byte ptr [edx+2]
.text:000018CB                 shl     eax, 8
.text:000018CE                 or      ecx, eax
.text:000018D0                 mov     edx, [ebp+arg_0]
.text:000018D3                 mov     eax, [edx]
.text:000018D5                 movzx   edx, byte ptr [eax+3]
.text:000018D9                 or      ecx, edx
.text:000018DB                 push    ecx
.text:000018DC                 call    _toint
.text:000018E1                 add     esp, 4
.text:000018E4                 mov     ecx, [ebp+arg_C]
.text:000018E7                 mov     [ecx], eax
.text:000018E9                 mov     edx, [ebp+arg_C]
.text:000018EC                 cmp     dword ptr [edx], 0
.text:000018EF                 jge     short loc_18F3
.text:000018F1                 jmp     short loc_1943
.text:000018F3 ; ---------------------------------------------------------------------------
.text:000018F3
.text:000018F3 loc_18F3:                               ; CODE XREF: _getstring+5Fj
.text:000018F3                 mov     eax, [ebp+arg_4]
.text:000018F6                 mov     ecx, [eax]
.text:000018F8                 sub     ecx, 4
.text:000018FB                 mov     edx, [ebp+arg_4]
.text:000018FE                 mov     [edx], ecx
.text:00001900                 mov     eax, [ebp+arg_0]
.text:00001903                 mov     ecx, [eax]
.text:00001905                 add     ecx, 4
.text:00001908                 mov     edx, [ebp+arg_0]
.text:0000190B                 mov     [edx], ecx
.text:0000190D                 mov     eax, [ebp+arg_4]
.text:00001910                 mov     ecx, [ebp+arg_C]
.text:00001913                 mov     edx, [eax]
.text:00001915                 cmp     edx, [ecx]
.text:00001917                 jge     short loc_191B
.text:00001919                 jmp     short loc_1943
.text:0000191B ; ---------------------------------------------------------------------------
.text:0000191B
.text:0000191B loc_191B:                               ; CODE XREF: _getstring+87j
.text:0000191B                 mov     eax, [ebp+arg_8]
.text:0000191E                 mov     ecx, [ebp+arg_0]
.text:00001921                 mov     edx, [ecx]
.text:00001923                 mov     [eax], edx
.text:00001925                 mov     eax, [ebp+arg_0]
.text:00001928                 mov     ecx, [eax]
.text:0000192A                 mov     edx, [ebp+arg_C]
.text:0000192D                 add     ecx, [edx]
.text:0000192F                 mov     eax, [ebp+arg_0]
.text:00001932                 mov     [eax], ecx
.text:00001934                 mov     ecx, [ebp+arg_4]
.text:00001937                 mov     edx, [ebp+arg_C]
.text:0000193A                 mov     eax, [ecx]
.text:0000193C                 sub     eax, [edx]
.text:0000193E                 mov     ecx, [ebp+arg_4]
.text:00001941                 mov     [ecx], eax
.text:00001943
.text:00001943 loc_1943:                               ; CODE XREF: _getstring+14j
.text:00001943                                         ; _getstring+61j ...
.text:00001943                 cmp     ebp, esp
.text:00001945                 call    __RTC_CheckEsp
.text:0000194A                 pop     ebp
.text:0000194B                 retn
.text:0000194B _getstring      endp
.text:0000194B
.text:0000194B ; ---------------------------------------------------------------------------
.text:0000194C                 align 10h
.text:00001950
.text:00001950 ; =============== S U B R O U T I N E =======================================
.text:00001950
.text:00001950 ; Attributes: bp-based frame
.text:00001950
.text:00001950 _getmp          proc near               ; CODE XREF: _rsa2_newkey+85p
.text:00001950                                         ; _rsa2_newkey+9Bp ...
.text:00001950
.text:00001950 var_1C          = dword ptr -1Ch
.text:00001950 var_18          = dword ptr -18h
.text:00001950 var_14          = dword ptr -14h
.text:00001950 var_10          = dword ptr -10h
.text:00001950 var_C           = dword ptr -0Ch
.text:00001950 var_8           = dword ptr -8
.text:00001950 var_4           = dword ptr -4
.text:00001950 arg_0           = dword ptr  8
.text:00001950 arg_4           = dword ptr  0Ch
.text:00001950
.text:00001950                 push    ebp
.text:00001951                 mov     ebp, esp
.text:00001953                 sub     esp, 1Ch
.text:00001956                 mov     eax, 0CCCCCCCCh
.text:0000195B                 mov     [ebp+var_1C], eax
.text:0000195E                 mov     [ebp+var_18], eax
.text:00001961                 mov     [ebp+var_14], eax
.text:00001964                 mov     [ebp+var_10], eax
.text:00001967                 mov     [ebp+var_C], eax
.text:0000196A                 mov     [ebp+var_8], eax
.text:0000196D                 mov     [ebp+var_4], eax
.text:00001970                 lea     eax, [ebp+var_14]
.text:00001973                 push    eax
.text:00001974                 lea     ecx, [ebp+var_8]
.text:00001977                 push    ecx
.text:00001978                 mov     edx, [ebp+arg_4]
.text:0000197B                 push    edx
.text:0000197C                 mov     eax, [ebp+arg_0]
.text:0000197F                 push    eax
.text:00001980                 call    _getstring
.text:00001985                 add     esp, 10h
.text:00001988                 cmp     [ebp+var_8], 0
.text:0000198C                 jnz     short loc_1992
.text:0000198E                 xor     eax, eax
.text:00001990                 jmp     short loc_19A8
.text:00001992 ; ---------------------------------------------------------------------------
.text:00001992
.text:00001992 loc_1992:                               ; CODE XREF: _getmp+3Cj
.text:00001992                 mov     ecx, [ebp+var_14]
.text:00001995                 push    ecx
.text:00001996                 mov     edx, [ebp+var_8]
.text:00001999                 push    edx
.text:0000199A                 call    _bignum_from_bytes
.text:0000199F                 add     esp, 8
.text:000019A2                 mov     [ebp+var_1C], eax
.text:000019A5                 mov     eax, [ebp+var_1C]
.text:000019A8
.text:000019A8 loc_19A8:                               ; CODE XREF: _getmp+40j
.text:000019A8                 push    edx
.text:000019A9                 mov     ecx, ebp
.text:000019AB                 push    eax
.text:000019AC                 lea     edx, $LN7_1
.text:000019B2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000019B7                 pop     eax
.text:000019B8                 pop     edx
.text:000019B9                 add     esp, 1Ch
.text:000019BC                 cmp     ebp, esp
.text:000019BE                 call    __RTC_CheckEsp
.text:000019C3                 mov     esp, ebp
.text:000019C5                 pop     ebp
.text:000019C6                 retn
.text:000019C6 _getmp          endp
.text:000019C6
.text:000019C6 ; ---------------------------------------------------------------------------
.text:000019C7                 align 4
.text:000019C8 $LN7_1          dd 2                    ; DATA XREF: _getmp+5Co
.text:000019CC                 dd offset $LN6
.text:000019D0 $LN6            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000019CCo
.text:000019D8                 dd offset $LN4          ; "p"
.text:000019DC                 dd 0FFFFFFECh, 4
.text:000019E4                 dd offset $LN5          ; "length"
.text:000019E8 $LN5            db 'length',0           ; DATA XREF: .text:000019E4o
.text:000019EF $LN4            db 'p',0                ; DATA XREF: .text:000019D8o
.text:000019F1                 align 10h
.text:00001A00
.text:00001A00 ; =============== S U B R O U T I N E =======================================
.text:00001A00
.text:00001A00 ; Attributes: bp-based frame
.text:00001A00
.text:00001A00 _rsa2_freekey   proc near               ; CODE XREF: _rsa2_newkey+F1p
.text:00001A00                                         ; _rsa2_createkey+9Cp ...
.text:00001A00
.text:00001A00 var_4           = dword ptr -4
.text:00001A00 arg_0           = dword ptr  8
.text:00001A00
.text:00001A00                 push    ebp
.text:00001A01                 mov     ebp, esp
.text:00001A03                 push    ecx
.text:00001A04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A0B                 mov     eax, [ebp+arg_0]
.text:00001A0E                 mov     [ebp+var_4], eax
.text:00001A11                 mov     ecx, [ebp+var_4]
.text:00001A14                 push    ecx
.text:00001A15                 call    _freersakey
.text:00001A1A                 add     esp, 4
.text:00001A1D                 mov     edx, [ebp+var_4]
.text:00001A20                 push    edx
.text:00001A21                 call    _safefree
.text:00001A26                 add     esp, 4
.text:00001A29                 add     esp, 4
.text:00001A2C                 cmp     ebp, esp
.text:00001A2E                 call    __RTC_CheckEsp
.text:00001A33                 mov     esp, ebp
.text:00001A35                 pop     ebp
.text:00001A36                 retn
.text:00001A36 _rsa2_freekey   endp
.text:00001A36
.text:00001A36 ; ---------------------------------------------------------------------------
.text:00001A37                 align 10h
.text:00001A40
.text:00001A40 ; =============== S U B R O U T I N E =======================================
.text:00001A40
.text:00001A40 ; Attributes: bp-based frame
.text:00001A40
.text:00001A40 _rsa2_fmtkey    proc near               ; DATA XREF: .rdata:000002DCo
.text:00001A40
.text:00001A40 var_C           = dword ptr -0Ch
.text:00001A40 var_8           = dword ptr -8
.text:00001A40 var_4           = dword ptr -4
.text:00001A40 arg_0           = dword ptr  8
.text:00001A40
.text:00001A40                 push    ebp
.text:00001A41                 mov     ebp, esp
.text:00001A43                 sub     esp, 0Ch
.text:00001A46                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001A4D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001A54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A5B                 mov     eax, [ebp+arg_0]
.text:00001A5E                 mov     [ebp+var_4], eax
.text:00001A61                 mov     ecx, [ebp+var_4]
.text:00001A64                 push    ecx
.text:00001A65                 call    _rsastr_len
.text:00001A6A                 add     esp, 4
.text:00001A6D                 mov     [ebp+var_C], eax
.text:00001A70                 push    1
.text:00001A72                 mov     edx, [ebp+var_C]
.text:00001A75                 push    edx
.text:00001A76                 call    _safemalloc
.text:00001A7B                 add     esp, 8
.text:00001A7E                 mov     [ebp+var_8], eax
.text:00001A81                 mov     eax, [ebp+var_4]
.text:00001A84                 push    eax
.text:00001A85                 mov     ecx, [ebp+var_8]
.text:00001A88                 push    ecx
.text:00001A89                 call    _rsastr_fmt
.text:00001A8E                 add     esp, 8
.text:00001A91                 mov     eax, [ebp+var_8]
.text:00001A94                 add     esp, 0Ch
.text:00001A97                 cmp     ebp, esp
.text:00001A99                 call    __RTC_CheckEsp
.text:00001A9E                 mov     esp, ebp
.text:00001AA0                 pop     ebp
.text:00001AA1                 retn
.text:00001AA1 _rsa2_fmtkey    endp
.text:00001AA1
.text:00001AA1 ; ---------------------------------------------------------------------------
.text:00001AA2                 align 10h
.text:00001AB0
.text:00001AB0 ; =============== S U B R O U T I N E =======================================
.text:00001AB0
.text:00001AB0 ; Attributes: bp-based frame
.text:00001AB0
.text:00001AB0 _rsa2_public_blob proc near             ; DATA XREF: .rdata:000002E0o
.text:00001AB0
.text:00001AB0 var_24          = dword ptr -24h
.text:00001AB0 var_20          = dword ptr -20h
.text:00001AB0 var_1C          = dword ptr -1Ch
.text:00001AB0 var_18          = dword ptr -18h
.text:00001AB0 var_14          = dword ptr -14h
.text:00001AB0 var_10          = dword ptr -10h
.text:00001AB0 var_C           = dword ptr -0Ch
.text:00001AB0 var_8           = dword ptr -8
.text:00001AB0 var_4           = dword ptr -4
.text:00001AB0 arg_0           = dword ptr  8
.text:00001AB0 arg_4           = dword ptr  0Ch
.text:00001AB0
.text:00001AB0                 push    ebp
.text:00001AB1                 mov     ebp, esp
.text:00001AB3                 sub     esp, 24h
.text:00001AB6                 mov     eax, 0CCCCCCCCh
.text:00001ABB                 mov     [ebp+var_24], eax
.text:00001ABE                 mov     [ebp+var_20], eax
.text:00001AC1                 mov     [ebp+var_1C], eax
.text:00001AC4                 mov     [ebp+var_18], eax
.text:00001AC7                 mov     [ebp+var_14], eax
.text:00001ACA                 mov     [ebp+var_10], eax
.text:00001ACD                 mov     [ebp+var_C], eax
.text:00001AD0                 mov     [ebp+var_8], eax
.text:00001AD3                 mov     [ebp+var_4], eax
.text:00001AD6                 mov     eax, [ebp+arg_0]
.text:00001AD9                 mov     [ebp+var_4], eax
.text:00001ADC                 mov     ecx, [ebp+var_4]
.text:00001ADF                 mov     edx, [ecx+0Ch]
.text:00001AE2                 push    edx
.text:00001AE3                 call    _bignum_bitcount
.text:00001AE8                 add     esp, 4
.text:00001AEB                 add     eax, 8
.text:00001AEE                 cdq
.text:00001AEF                 and     edx, 7
.text:00001AF2                 add     eax, edx
.text:00001AF4                 sar     eax, 3
.text:00001AF7                 mov     [ebp+var_8], eax
.text:00001AFA                 mov     eax, [ebp+var_4]
.text:00001AFD                 mov     ecx, [eax+8]
.text:00001B00                 push    ecx
.text:00001B01                 call    _bignum_bitcount
.text:00001B06                 add     esp, 4
.text:00001B09                 add     eax, 8
.text:00001B0C                 cdq
.text:00001B0D                 and     edx, 7
.text:00001B10                 add     eax, edx
.text:00001B12                 sar     eax, 3
.text:00001B15                 mov     [ebp+var_C], eax
.text:00001B18                 mov     edx, [ebp+var_C]
.text:00001B1B                 mov     eax, [ebp+var_8]
.text:00001B1E                 lea     ecx, [eax+edx+13h]
.text:00001B22                 mov     [ebp+var_10], ecx
.text:00001B25                 push    1
.text:00001B27                 mov     edx, [ebp+var_10]
.text:00001B2A                 push    edx
.text:00001B2B                 call    _safemalloc
.text:00001B30                 add     esp, 8
.text:00001B33                 mov     [ebp+var_18], eax
.text:00001B36                 mov     eax, [ebp+var_18]
.text:00001B39                 mov     [ebp+var_1C], eax
.text:00001B3C                 mov     ecx, [ebp+var_1C]
.text:00001B3F                 mov     byte ptr [ecx], 0
.text:00001B42                 mov     edx, [ebp+var_1C]
.text:00001B45                 mov     byte ptr [edx+1], 0
.text:00001B49                 mov     eax, [ebp+var_1C]
.text:00001B4C                 mov     byte ptr [eax+2], 0
.text:00001B50                 mov     ecx, [ebp+var_1C]
.text:00001B53                 mov     byte ptr [ecx+3], 7
.text:00001B57                 mov     edx, [ebp+var_1C]
.text:00001B5A                 add     edx, 4
.text:00001B5D                 mov     [ebp+var_1C], edx
.text:00001B60                 push    7               ; size_t
.text:00001B62                 push    offset $SG7497  ; "ssh-rsa"
.text:00001B67                 mov     eax, [ebp+var_1C]
.text:00001B6A                 push    eax             ; void *
.text:00001B6B                 call    _memcpy
.text:00001B70                 add     esp, 0Ch
.text:00001B73                 mov     ecx, [ebp+var_1C]
.text:00001B76                 add     ecx, 7
.text:00001B79                 mov     [ebp+var_1C], ecx
.text:00001B7C                 mov     edx, [ebp+var_8]
.text:00001B7F                 sar     edx, 18h
.text:00001B82                 mov     eax, [ebp+var_1C]
.text:00001B85                 mov     [eax], dl
.text:00001B87                 mov     ecx, [ebp+var_8]
.text:00001B8A                 sar     ecx, 10h
.text:00001B8D                 mov     edx, [ebp+var_1C]
.text:00001B90                 mov     [edx+1], cl
.text:00001B93                 mov     eax, [ebp+var_8]
.text:00001B96                 sar     eax, 8
.text:00001B99                 mov     ecx, [ebp+var_1C]
.text:00001B9C                 mov     [ecx+2], al
.text:00001B9F                 mov     edx, [ebp+var_1C]
.text:00001BA2                 mov     al, byte ptr [ebp+var_8]
.text:00001BA5                 mov     [edx+3], al
.text:00001BA8                 mov     ecx, [ebp+var_1C]
.text:00001BAB                 add     ecx, 4
.text:00001BAE                 mov     [ebp+var_1C], ecx
.text:00001BB1                 mov     edx, [ebp+var_8]
.text:00001BB4                 mov     [ebp+var_14], edx
.text:00001BB7
.text:00001BB7 loc_1BB7:                               ; CODE XREF: _rsa2_public_blob+13Dj
.text:00001BB7                 mov     eax, [ebp+var_14]
.text:00001BBA                 mov     [ebp+var_20], eax
.text:00001BBD                 mov     ecx, [ebp+var_14]
.text:00001BC0                 sub     ecx, 1
.text:00001BC3                 mov     [ebp+var_14], ecx
.text:00001BC6                 cmp     [ebp+var_20], 0
.text:00001BCA                 jz      short loc_1BEF
.text:00001BCC                 mov     edx, [ebp+var_14]
.text:00001BCF                 push    edx
.text:00001BD0                 mov     eax, [ebp+var_4]
.text:00001BD3                 mov     ecx, [eax+0Ch]
.text:00001BD6                 push    ecx
.text:00001BD7                 call    _bignum_byte
.text:00001BDC                 add     esp, 8
.text:00001BDF                 mov     edx, [ebp+var_1C]
.text:00001BE2                 mov     [edx], al
.text:00001BE4                 mov     eax, [ebp+var_1C]
.text:00001BE7                 add     eax, 1
.text:00001BEA                 mov     [ebp+var_1C], eax
.text:00001BED                 jmp     short loc_1BB7
.text:00001BEF ; ---------------------------------------------------------------------------
.text:00001BEF
.text:00001BEF loc_1BEF:                               ; CODE XREF: _rsa2_public_blob+11Aj
.text:00001BEF                 mov     ecx, [ebp+var_C]
.text:00001BF2                 sar     ecx, 18h
.text:00001BF5                 mov     edx, [ebp+var_1C]
.text:00001BF8                 mov     [edx], cl
.text:00001BFA                 mov     eax, [ebp+var_C]
.text:00001BFD                 sar     eax, 10h
.text:00001C00                 mov     ecx, [ebp+var_1C]
.text:00001C03                 mov     [ecx+1], al
.text:00001C06                 mov     edx, [ebp+var_C]
.text:00001C09                 sar     edx, 8
.text:00001C0C                 mov     eax, [ebp+var_1C]
.text:00001C0F                 mov     [eax+2], dl
.text:00001C12                 mov     ecx, [ebp+var_1C]
.text:00001C15                 mov     dl, byte ptr [ebp+var_C]
.text:00001C18                 mov     [ecx+3], dl
.text:00001C1B                 mov     eax, [ebp+var_1C]
.text:00001C1E                 add     eax, 4
.text:00001C21                 mov     [ebp+var_1C], eax
.text:00001C24                 mov     ecx, [ebp+var_C]
.text:00001C27                 mov     [ebp+var_14], ecx
.text:00001C2A
.text:00001C2A loc_1C2A:                               ; CODE XREF: _rsa2_public_blob+1B0j
.text:00001C2A                 mov     edx, [ebp+var_14]
.text:00001C2D                 mov     [ebp+var_24], edx
.text:00001C30                 mov     eax, [ebp+var_14]
.text:00001C33                 sub     eax, 1
.text:00001C36                 mov     [ebp+var_14], eax
.text:00001C39                 cmp     [ebp+var_24], 0
.text:00001C3D                 jz      short loc_1C62
.text:00001C3F                 mov     ecx, [ebp+var_14]
.text:00001C42                 push    ecx
.text:00001C43                 mov     edx, [ebp+var_4]
.text:00001C46                 mov     eax, [edx+8]
.text:00001C49                 push    eax
.text:00001C4A                 call    _bignum_byte
.text:00001C4F                 add     esp, 8
.text:00001C52                 mov     ecx, [ebp+var_1C]
.text:00001C55                 mov     [ecx], al
.text:00001C57                 mov     edx, [ebp+var_1C]
.text:00001C5A                 add     edx, 1
.text:00001C5D                 mov     [ebp+var_1C], edx
.text:00001C60                 jmp     short loc_1C2A
.text:00001C62 ; ---------------------------------------------------------------------------
.text:00001C62
.text:00001C62 loc_1C62:                               ; CODE XREF: _rsa2_public_blob+18Dj
.text:00001C62                 mov     eax, [ebp+var_18]
.text:00001C65                 add     eax, [ebp+var_10]
.text:00001C68                 cmp     [ebp+var_1C], eax
.text:00001C6B                 jz      short loc_1C84
.text:00001C6D                 push    282h
.text:00001C72                 push    offset $SG7513  ; "..\\..\\..\\sshrsa.c"
.text:00001C77                 push    offset $SG7514  ; "p == blob + bloblen"
.text:00001C7C                 call    __wassert
.text:00001C81 ; ---------------------------------------------------------------------------
.text:00001C81                 add     esp, 0Ch
.text:00001C84
.text:00001C84 loc_1C84:                               ; CODE XREF: _rsa2_public_blob+1BBj
.text:00001C84                 mov     edx, [ebp+arg_4]
.text:00001C87                 mov     eax, [ebp+var_10]
.text:00001C8A                 mov     [edx], eax
.text:00001C8C                 mov     eax, [ebp+var_18]
.text:00001C8F                 add     esp, 24h
.text:00001C92                 cmp     ebp, esp
.text:00001C94                 call    __RTC_CheckEsp
.text:00001C99                 mov     esp, ebp
.text:00001C9B                 pop     ebp
.text:00001C9C                 retn
.text:00001C9C _rsa2_public_blob endp
.text:00001C9C
.text:00001C9C ; ---------------------------------------------------------------------------
.text:00001C9D                 align 10h
.text:00001CA0
.text:00001CA0 ; =============== S U B R O U T I N E =======================================
.text:00001CA0
.text:00001CA0 ; Attributes: bp-based frame
.text:00001CA0
.text:00001CA0 _rsa2_private_blob proc near            ; DATA XREF: .rdata:000002E4o
.text:00001CA0
.text:00001CA0 var_34          = dword ptr -34h
.text:00001CA0 var_30          = dword ptr -30h
.text:00001CA0 var_2C          = dword ptr -2Ch
.text:00001CA0 var_28          = dword ptr -28h
.text:00001CA0 var_24          = dword ptr -24h
.text:00001CA0 var_20          = dword ptr -20h
.text:00001CA0 var_1C          = dword ptr -1Ch
.text:00001CA0 var_18          = dword ptr -18h
.text:00001CA0 var_14          = dword ptr -14h
.text:00001CA0 var_10          = dword ptr -10h
.text:00001CA0 var_C           = dword ptr -0Ch
.text:00001CA0 var_8           = dword ptr -8
.text:00001CA0 var_4           = dword ptr -4
.text:00001CA0 arg_0           = dword ptr  8
.text:00001CA0 arg_4           = dword ptr  0Ch
.text:00001CA0
.text:00001CA0                 push    ebp
.text:00001CA1                 mov     ebp, esp
.text:00001CA3                 sub     esp, 34h
.text:00001CA6                 push    edi
.text:00001CA7                 lea     edi, [ebp+var_34]
.text:00001CAA                 mov     ecx, 0Dh
.text:00001CAF                 mov     eax, 0CCCCCCCCh
.text:00001CB4                 rep stosd
.text:00001CB6                 mov     eax, [ebp+arg_0]
.text:00001CB9                 mov     [ebp+var_4], eax
.text:00001CBC                 mov     ecx, [ebp+var_4]
.text:00001CBF                 mov     edx, [ecx+10h]
.text:00001CC2                 push    edx
.text:00001CC3                 call    _bignum_bitcount
.text:00001CC8                 add     esp, 4
.text:00001CCB                 add     eax, 8
.text:00001CCE                 cdq
.text:00001CCF                 and     edx, 7
.text:00001CD2                 add     eax, edx
.text:00001CD4                 sar     eax, 3
.text:00001CD7                 mov     [ebp+var_8], eax
.text:00001CDA                 mov     eax, [ebp+var_4]
.text:00001CDD                 mov     ecx, [eax+14h]
.text:00001CE0                 push    ecx
.text:00001CE1                 call    _bignum_bitcount
.text:00001CE6                 add     esp, 4
.text:00001CE9                 add     eax, 8
.text:00001CEC                 cdq
.text:00001CED                 and     edx, 7
.text:00001CF0                 add     eax, edx
.text:00001CF2                 sar     eax, 3
.text:00001CF5                 mov     [ebp+var_C], eax
.text:00001CF8                 mov     edx, [ebp+var_4]
.text:00001CFB                 mov     eax, [edx+18h]
.text:00001CFE                 push    eax
.text:00001CFF                 call    _bignum_bitcount
.text:00001D04                 add     esp, 4
.text:00001D07                 add     eax, 8
.text:00001D0A                 cdq
.text:00001D0B                 and     edx, 7
.text:00001D0E                 add     eax, edx
.text:00001D10                 sar     eax, 3
.text:00001D13                 mov     [ebp+var_10], eax
.text:00001D16                 mov     ecx, [ebp+var_4]
.text:00001D19                 mov     edx, [ecx+1Ch]
.text:00001D1C                 push    edx
.text:00001D1D                 call    _bignum_bitcount
.text:00001D22                 add     esp, 4
.text:00001D25                 add     eax, 8
.text:00001D28                 cdq
.text:00001D29                 and     edx, 7
.text:00001D2C                 add     eax, edx
.text:00001D2E                 sar     eax, 3
.text:00001D31                 mov     [ebp+var_14], eax
.text:00001D34                 mov     eax, [ebp+var_C]
.text:00001D37                 mov     ecx, [ebp+var_8]
.text:00001D3A                 lea     edx, [ecx+eax+10h]
.text:00001D3E                 add     edx, [ebp+var_10]
.text:00001D41                 add     edx, [ebp+var_14]
.text:00001D44                 mov     [ebp+var_18], edx
.text:00001D47                 push    1
.text:00001D49                 mov     eax, [ebp+var_18]
.text:00001D4C                 push    eax
.text:00001D4D                 call    _safemalloc
.text:00001D52                 add     esp, 8
.text:00001D55                 mov     [ebp+var_20], eax
.text:00001D58                 mov     ecx, [ebp+var_20]
.text:00001D5B                 mov     [ebp+var_24], ecx
.text:00001D5E                 mov     edx, [ebp+var_8]
.text:00001D61                 sar     edx, 18h
.text:00001D64                 mov     eax, [ebp+var_24]
.text:00001D67                 mov     [eax], dl
.text:00001D69                 mov     ecx, [ebp+var_8]
.text:00001D6C                 sar     ecx, 10h
.text:00001D6F                 mov     edx, [ebp+var_24]
.text:00001D72                 mov     [edx+1], cl
.text:00001D75                 mov     eax, [ebp+var_8]
.text:00001D78                 sar     eax, 8
.text:00001D7B                 mov     ecx, [ebp+var_24]
.text:00001D7E                 mov     [ecx+2], al
.text:00001D81                 mov     edx, [ebp+var_24]
.text:00001D84                 mov     al, byte ptr [ebp+var_8]
.text:00001D87                 mov     [edx+3], al
.text:00001D8A                 mov     ecx, [ebp+var_24]
.text:00001D8D                 add     ecx, 4
.text:00001D90                 mov     [ebp+var_24], ecx
.text:00001D93                 mov     edx, [ebp+var_8]
.text:00001D96                 mov     [ebp+var_1C], edx
.text:00001D99
.text:00001D99 loc_1D99:                               ; CODE XREF: _rsa2_private_blob+12Fj
.text:00001D99                 mov     eax, [ebp+var_1C]
.text:00001D9C                 mov     [ebp+var_28], eax
.text:00001D9F                 mov     ecx, [ebp+var_1C]
.text:00001DA2                 sub     ecx, 1
.text:00001DA5                 mov     [ebp+var_1C], ecx
.text:00001DA8                 cmp     [ebp+var_28], 0
.text:00001DAC                 jz      short loc_1DD1
.text:00001DAE                 mov     edx, [ebp+var_1C]
.text:00001DB1                 push    edx
.text:00001DB2                 mov     eax, [ebp+var_4]
.text:00001DB5                 mov     ecx, [eax+10h]
.text:00001DB8                 push    ecx
.text:00001DB9                 call    _bignum_byte
.text:00001DBE                 add     esp, 8
.text:00001DC1                 mov     edx, [ebp+var_24]
.text:00001DC4                 mov     [edx], al
.text:00001DC6                 mov     eax, [ebp+var_24]
.text:00001DC9                 add     eax, 1
.text:00001DCC                 mov     [ebp+var_24], eax
.text:00001DCF                 jmp     short loc_1D99
.text:00001DD1 ; ---------------------------------------------------------------------------
.text:00001DD1
.text:00001DD1 loc_1DD1:                               ; CODE XREF: _rsa2_private_blob+10Cj
.text:00001DD1                 mov     ecx, [ebp+var_C]
.text:00001DD4                 sar     ecx, 18h
.text:00001DD7                 mov     edx, [ebp+var_24]
.text:00001DDA                 mov     [edx], cl
.text:00001DDC                 mov     eax, [ebp+var_C]
.text:00001DDF                 sar     eax, 10h
.text:00001DE2                 mov     ecx, [ebp+var_24]
.text:00001DE5                 mov     [ecx+1], al
.text:00001DE8                 mov     edx, [ebp+var_C]
.text:00001DEB                 sar     edx, 8
.text:00001DEE                 mov     eax, [ebp+var_24]
.text:00001DF1                 mov     [eax+2], dl
.text:00001DF4                 mov     ecx, [ebp+var_24]
.text:00001DF7                 mov     dl, byte ptr [ebp+var_C]
.text:00001DFA                 mov     [ecx+3], dl
.text:00001DFD                 mov     eax, [ebp+var_24]
.text:00001E00                 add     eax, 4
.text:00001E03                 mov     [ebp+var_24], eax
.text:00001E06                 mov     ecx, [ebp+var_C]
.text:00001E09                 mov     [ebp+var_1C], ecx
.text:00001E0C
.text:00001E0C loc_1E0C:                               ; CODE XREF: _rsa2_private_blob+1A2j
.text:00001E0C                 mov     edx, [ebp+var_1C]
.text:00001E0F                 mov     [ebp+var_2C], edx
.text:00001E12                 mov     eax, [ebp+var_1C]
.text:00001E15                 sub     eax, 1
.text:00001E18                 mov     [ebp+var_1C], eax
.text:00001E1B                 cmp     [ebp+var_2C], 0
.text:00001E1F                 jz      short loc_1E44
.text:00001E21                 mov     ecx, [ebp+var_1C]
.text:00001E24                 push    ecx
.text:00001E25                 mov     edx, [ebp+var_4]
.text:00001E28                 mov     eax, [edx+14h]
.text:00001E2B                 push    eax
.text:00001E2C                 call    _bignum_byte
.text:00001E31                 add     esp, 8
.text:00001E34                 mov     ecx, [ebp+var_24]
.text:00001E37                 mov     [ecx], al
.text:00001E39                 mov     edx, [ebp+var_24]
.text:00001E3C                 add     edx, 1
.text:00001E3F                 mov     [ebp+var_24], edx
.text:00001E42                 jmp     short loc_1E0C
.text:00001E44 ; ---------------------------------------------------------------------------
.text:00001E44
.text:00001E44 loc_1E44:                               ; CODE XREF: _rsa2_private_blob+17Fj
.text:00001E44                 mov     eax, [ebp+var_10]
.text:00001E47                 sar     eax, 18h
.text:00001E4A                 mov     ecx, [ebp+var_24]
.text:00001E4D                 mov     [ecx], al
.text:00001E4F                 mov     edx, [ebp+var_10]
.text:00001E52                 sar     edx, 10h
.text:00001E55                 mov     eax, [ebp+var_24]
.text:00001E58                 mov     [eax+1], dl
.text:00001E5B                 mov     ecx, [ebp+var_10]
.text:00001E5E                 sar     ecx, 8
.text:00001E61                 mov     edx, [ebp+var_24]
.text:00001E64                 mov     [edx+2], cl
.text:00001E67                 mov     eax, [ebp+var_24]
.text:00001E6A                 mov     cl, byte ptr [ebp+var_10]
.text:00001E6D                 mov     [eax+3], cl
.text:00001E70                 mov     edx, [ebp+var_24]
.text:00001E73                 add     edx, 4
.text:00001E76                 mov     [ebp+var_24], edx
.text:00001E79                 mov     eax, [ebp+var_10]
.text:00001E7C                 mov     [ebp+var_1C], eax
.text:00001E7F
.text:00001E7F loc_1E7F:                               ; CODE XREF: _rsa2_private_blob+215j
.text:00001E7F                 mov     ecx, [ebp+var_1C]
.text:00001E82                 mov     [ebp+var_30], ecx
.text:00001E85                 mov     edx, [ebp+var_1C]
.text:00001E88                 sub     edx, 1
.text:00001E8B                 mov     [ebp+var_1C], edx
.text:00001E8E                 cmp     [ebp+var_30], 0
.text:00001E92                 jz      short loc_1EB7
.text:00001E94                 mov     eax, [ebp+var_1C]
.text:00001E97                 push    eax
.text:00001E98                 mov     ecx, [ebp+var_4]
.text:00001E9B                 mov     edx, [ecx+18h]
.text:00001E9E                 push    edx
.text:00001E9F                 call    _bignum_byte
.text:00001EA4                 add     esp, 8
.text:00001EA7                 mov     ecx, [ebp+var_24]
.text:00001EAA                 mov     [ecx], al
.text:00001EAC                 mov     edx, [ebp+var_24]
.text:00001EAF                 add     edx, 1
.text:00001EB2                 mov     [ebp+var_24], edx
.text:00001EB5                 jmp     short loc_1E7F
.text:00001EB7 ; ---------------------------------------------------------------------------
.text:00001EB7
.text:00001EB7 loc_1EB7:                               ; CODE XREF: _rsa2_private_blob+1F2j
.text:00001EB7                 mov     eax, [ebp+var_14]
.text:00001EBA                 sar     eax, 18h
.text:00001EBD                 mov     ecx, [ebp+var_24]
.text:00001EC0                 mov     [ecx], al
.text:00001EC2                 mov     edx, [ebp+var_14]
.text:00001EC5                 sar     edx, 10h
.text:00001EC8                 mov     eax, [ebp+var_24]
.text:00001ECB                 mov     [eax+1], dl
.text:00001ECE                 mov     ecx, [ebp+var_14]
.text:00001ED1                 sar     ecx, 8
.text:00001ED4                 mov     edx, [ebp+var_24]
.text:00001ED7                 mov     [edx+2], cl
.text:00001EDA                 mov     eax, [ebp+var_24]
.text:00001EDD                 mov     cl, byte ptr [ebp+var_14]
.text:00001EE0                 mov     [eax+3], cl
.text:00001EE3                 mov     edx, [ebp+var_24]
.text:00001EE6                 add     edx, 4
.text:00001EE9                 mov     [ebp+var_24], edx
.text:00001EEC                 mov     eax, [ebp+var_14]
.text:00001EEF                 mov     [ebp+var_1C], eax
.text:00001EF2
.text:00001EF2 loc_1EF2:                               ; CODE XREF: _rsa2_private_blob+288j
.text:00001EF2                 mov     ecx, [ebp+var_1C]
.text:00001EF5                 mov     [ebp+var_34], ecx
.text:00001EF8                 mov     edx, [ebp+var_1C]
.text:00001EFB                 sub     edx, 1
.text:00001EFE                 mov     [ebp+var_1C], edx
.text:00001F01                 cmp     [ebp+var_34], 0
.text:00001F05                 jz      short loc_1F2A
.text:00001F07                 mov     eax, [ebp+var_1C]
.text:00001F0A                 push    eax
.text:00001F0B                 mov     ecx, [ebp+var_4]
.text:00001F0E                 mov     edx, [ecx+1Ch]
.text:00001F11                 push    edx
.text:00001F12                 call    _bignum_byte
.text:00001F17                 add     esp, 8
.text:00001F1A                 mov     ecx, [ebp+var_24]
.text:00001F1D                 mov     [ecx], al
.text:00001F1F                 mov     edx, [ebp+var_24]
.text:00001F22                 add     edx, 1
.text:00001F25                 mov     [ebp+var_24], edx
.text:00001F28                 jmp     short loc_1EF2
.text:00001F2A ; ---------------------------------------------------------------------------
.text:00001F2A
.text:00001F2A loc_1F2A:                               ; CODE XREF: _rsa2_private_blob+265j
.text:00001F2A                 mov     eax, [ebp+var_20]
.text:00001F2D                 add     eax, [ebp+var_18]
.text:00001F30                 cmp     [ebp+var_24], eax
.text:00001F33                 jz      short loc_1F4C
.text:00001F35                 push    2AAh
.text:00001F3A                 push    offset $SG7562  ; "..\\..\\..\\sshrsa.c"
.text:00001F3F                 push    offset $SG7563  ; "p == blob + bloblen"
.text:00001F44                 call    __wassert
.text:00001F49 ; ---------------------------------------------------------------------------
.text:00001F49                 add     esp, 0Ch
.text:00001F4C
.text:00001F4C loc_1F4C:                               ; CODE XREF: _rsa2_private_blob+293j
.text:00001F4C                 mov     edx, [ebp+arg_4]
.text:00001F4F                 mov     eax, [ebp+var_18]
.text:00001F52                 mov     [edx], eax
.text:00001F54                 mov     eax, [ebp+var_20]
.text:00001F57                 pop     edi
.text:00001F58                 add     esp, 34h
.text:00001F5B                 cmp     ebp, esp
.text:00001F5D                 call    __RTC_CheckEsp
.text:00001F62                 mov     esp, ebp
.text:00001F64                 pop     ebp
.text:00001F65                 retn
.text:00001F65 _rsa2_private_blob endp
.text:00001F65
.text:00001F65 ; ---------------------------------------------------------------------------
.text:00001F66                 align 10h
.text:00001F70
.text:00001F70 ; =============== S U B R O U T I N E =======================================
.text:00001F70
.text:00001F70 ; Attributes: bp-based frame
.text:00001F70
.text:00001F70 _rsa2_createkey proc near               ; DATA XREF: .rdata:000002E8o
.text:00001F70
.text:00001F70 var_10          = dword ptr -10h
.text:00001F70 var_C           = dword ptr -0Ch
.text:00001F70 var_8           = dword ptr -8
.text:00001F70 var_4           = dword ptr -4
.text:00001F70 arg_0           = dword ptr  8
.text:00001F70 arg_4           = dword ptr  0Ch
.text:00001F70 arg_8           = dword ptr  10h
.text:00001F70 arg_C           = byte ptr  14h
.text:00001F70
.text:00001F70                 push    ebp
.text:00001F71                 mov     ebp, esp
.text:00001F73                 sub     esp, 10h
.text:00001F76                 mov     eax, 0CCCCCCCCh
.text:00001F7B                 mov     [ebp+var_10], eax
.text:00001F7E                 mov     [ebp+var_C], eax
.text:00001F81                 mov     [ebp+var_8], eax
.text:00001F84                 mov     [ebp+var_4], eax
.text:00001F87                 mov     eax, [ebp+arg_8]
.text:00001F8A                 mov     [ebp+var_C], eax
.text:00001F8D                 mov     ecx, [ebp+arg_4]
.text:00001F90                 push    ecx
.text:00001F91                 mov     edx, [ebp+arg_0]
.text:00001F94                 push    edx
.text:00001F95                 call    _rsa2_newkey
.text:00001F9A                 add     esp, 8
.text:00001F9D                 mov     [ebp+var_4], eax
.text:00001FA0                 lea     eax, [ebp+arg_C]
.text:00001FA3                 push    eax
.text:00001FA4                 lea     ecx, [ebp+var_C]
.text:00001FA7                 push    ecx
.text:00001FA8                 call    _getmp
.text:00001FAD                 add     esp, 8
.text:00001FB0                 mov     edx, [ebp+var_4]
.text:00001FB3                 mov     [edx+10h], eax
.text:00001FB6                 lea     eax, [ebp+arg_C]
.text:00001FB9                 push    eax
.text:00001FBA                 lea     ecx, [ebp+var_C]
.text:00001FBD                 push    ecx
.text:00001FBE                 call    _getmp
.text:00001FC3                 add     esp, 8
.text:00001FC6                 mov     edx, [ebp+var_4]
.text:00001FC9                 mov     [edx+14h], eax
.text:00001FCC                 lea     eax, [ebp+arg_C]
.text:00001FCF                 push    eax
.text:00001FD0                 lea     ecx, [ebp+var_C]
.text:00001FD3                 push    ecx
.text:00001FD4                 call    _getmp
.text:00001FD9                 add     esp, 8
.text:00001FDC                 mov     edx, [ebp+var_4]
.text:00001FDF                 mov     [edx+18h], eax
.text:00001FE2                 lea     eax, [ebp+arg_C]
.text:00001FE5                 push    eax
.text:00001FE6                 lea     ecx, [ebp+var_C]
.text:00001FE9                 push    ecx
.text:00001FEA                 call    _getmp
.text:00001FEF                 add     esp, 8
.text:00001FF2                 mov     edx, [ebp+var_4]
.text:00001FF5                 mov     [edx+1Ch], eax
.text:00001FF8                 mov     eax, [ebp+var_4]
.text:00001FFB                 push    eax
.text:00001FFC                 call    _rsa_verify
.text:00002001                 add     esp, 4
.text:00002004                 test    eax, eax
.text:00002006                 jnz     short loc_2018
.text:00002008                 mov     ecx, [ebp+var_4]
.text:0000200B                 push    ecx
.text:0000200C                 call    _rsa2_freekey
.text:00002011                 add     esp, 4
.text:00002014                 xor     eax, eax
.text:00002016                 jmp     short loc_201B
.text:00002018 ; ---------------------------------------------------------------------------
.text:00002018
.text:00002018 loc_2018:                               ; CODE XREF: _rsa2_createkey+96j
.text:00002018                 mov     eax, [ebp+var_4]
.text:0000201B
.text:0000201B loc_201B:                               ; CODE XREF: _rsa2_createkey+A6j
.text:0000201B                 push    edx
.text:0000201C                 mov     ecx, ebp
.text:0000201E                 push    eax
.text:0000201F                 lea     edx, $LN6_0
.text:00002025                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000202A                 pop     eax
.text:0000202B                 pop     edx
.text:0000202C                 add     esp, 10h
.text:0000202F                 cmp     ebp, esp
.text:00002031                 call    __RTC_CheckEsp
.text:00002036                 mov     esp, ebp
.text:00002038                 pop     ebp
.text:00002039                 retn
.text:00002039 _rsa2_createkey endp
.text:00002039
.text:00002039 ; ---------------------------------------------------------------------------
.text:0000203A                 align 4
.text:0000203C $LN6_0          dd 1                    ; DATA XREF: _rsa2_createkey+AFo
.text:00002040                 dd offset $LN5_0
.text:00002044 $LN5_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00002040o
.text:0000204C                 dd offset $LN4_0
.text:00002050 $LN4_0          dd 0CC006270h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000204Co
.text:00002060
.text:00002060 ; =============== S U B R O U T I N E =======================================
.text:00002060
.text:00002060 ; Attributes: bp-based frame
.text:00002060
.text:00002060 _rsa2_openssh_createkey proc near       ; DATA XREF: .rdata:000002ECo
.text:00002060
.text:00002060 var_8           = dword ptr -8
.text:00002060 var_4           = dword ptr -4
.text:00002060 arg_0           = dword ptr  8
.text:00002060 arg_4           = dword ptr  0Ch
.text:00002060
.text:00002060                 push    ebp
.text:00002061                 mov     ebp, esp
.text:00002063                 sub     esp, 8
.text:00002066                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000206D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002074                 mov     eax, [ebp+arg_0]
.text:00002077                 mov     [ebp+var_4], eax
.text:0000207A                 push    24h ; '$'
.text:0000207C                 push    1
.text:0000207E                 call    _safemalloc
.text:00002083                 add     esp, 8
.text:00002086                 mov     [ebp+var_8], eax
.text:00002089                 mov     ecx, [ebp+var_8]
.text:0000208C                 mov     dword ptr [ecx+20h], 0
.text:00002093                 mov     edx, [ebp+arg_4]
.text:00002096                 push    edx
.text:00002097                 mov     eax, [ebp+var_4]
.text:0000209A                 push    eax
.text:0000209B                 call    _getmp
.text:000020A0                 add     esp, 8
.text:000020A3                 mov     ecx, [ebp+var_8]
.text:000020A6                 mov     [ecx+8], eax
.text:000020A9                 mov     edx, [ebp+arg_4]
.text:000020AC                 push    edx
.text:000020AD                 mov     eax, [ebp+var_4]
.text:000020B0                 push    eax
.text:000020B1                 call    _getmp
.text:000020B6                 add     esp, 8
.text:000020B9                 mov     ecx, [ebp+var_8]
.text:000020BC                 mov     [ecx+0Ch], eax
.text:000020BF                 mov     edx, [ebp+arg_4]
.text:000020C2                 push    edx
.text:000020C3                 mov     eax, [ebp+var_4]
.text:000020C6                 push    eax
.text:000020C7                 call    _getmp
.text:000020CC                 add     esp, 8
.text:000020CF                 mov     ecx, [ebp+var_8]
.text:000020D2                 mov     [ecx+10h], eax
.text:000020D5                 mov     edx, [ebp+arg_4]
.text:000020D8                 push    edx
.text:000020D9                 mov     eax, [ebp+var_4]
.text:000020DC                 push    eax
.text:000020DD                 call    _getmp
.text:000020E2                 add     esp, 8
.text:000020E5                 mov     ecx, [ebp+var_8]
.text:000020E8                 mov     [ecx+1Ch], eax
.text:000020EB                 mov     edx, [ebp+arg_4]
.text:000020EE                 push    edx
.text:000020EF                 mov     eax, [ebp+var_4]
.text:000020F2                 push    eax
.text:000020F3                 call    _getmp
.text:000020F8                 add     esp, 8
.text:000020FB                 mov     ecx, [ebp+var_8]
.text:000020FE                 mov     [ecx+14h], eax
.text:00002101                 mov     edx, [ebp+arg_4]
.text:00002104                 push    edx
.text:00002105                 mov     eax, [ebp+var_4]
.text:00002108                 push    eax
.text:00002109                 call    _getmp
.text:0000210E                 add     esp, 8
.text:00002111                 mov     ecx, [ebp+var_8]
.text:00002114                 mov     [ecx+18h], eax
.text:00002117                 mov     edx, [ebp+var_8]
.text:0000211A                 cmp     dword ptr [edx+8], 0
.text:0000211E                 jz      short loc_214D
.text:00002120                 mov     eax, [ebp+var_8]
.text:00002123                 cmp     dword ptr [eax+0Ch], 0
.text:00002127                 jz      short loc_214D
.text:00002129                 mov     ecx, [ebp+var_8]
.text:0000212C                 cmp     dword ptr [ecx+10h], 0
.text:00002130                 jz      short loc_214D
.text:00002132                 mov     edx, [ebp+var_8]
.text:00002135                 cmp     dword ptr [edx+1Ch], 0
.text:00002139                 jz      short loc_214D
.text:0000213B                 mov     eax, [ebp+var_8]
.text:0000213E                 cmp     dword ptr [eax+14h], 0
.text:00002142                 jz      short loc_214D
.text:00002144                 mov     ecx, [ebp+var_8]
.text:00002147                 cmp     dword ptr [ecx+18h], 0
.text:0000214B                 jnz     short loc_215D
.text:0000214D
.text:0000214D loc_214D:                               ; CODE XREF: _rsa2_openssh_createkey+BEj
.text:0000214D                                         ; _rsa2_openssh_createkey+C7j ...
.text:0000214D                 mov     edx, [ebp+var_8]
.text:00002150                 push    edx
.text:00002151                 call    _rsa2_freekey
.text:00002156                 add     esp, 4
.text:00002159                 xor     eax, eax
.text:0000215B                 jmp     short loc_2180
.text:0000215D ; ---------------------------------------------------------------------------
.text:0000215D
.text:0000215D loc_215D:                               ; CODE XREF: _rsa2_openssh_createkey+EBj
.text:0000215D                 mov     eax, [ebp+var_8]
.text:00002160                 push    eax
.text:00002161                 call    _rsa_verify
.text:00002166                 add     esp, 4
.text:00002169                 test    eax, eax
.text:0000216B                 jnz     short loc_217D
.text:0000216D                 mov     ecx, [ebp+var_8]
.text:00002170                 push    ecx
.text:00002171                 call    _rsa2_freekey
.text:00002176                 add     esp, 4
.text:00002179                 xor     eax, eax
.text:0000217B                 jmp     short loc_2180
.text:0000217D ; ---------------------------------------------------------------------------
.text:0000217D
.text:0000217D loc_217D:                               ; CODE XREF: _rsa2_openssh_createkey+10Bj
.text:0000217D                 mov     eax, [ebp+var_8]
.text:00002180
.text:00002180 loc_2180:                               ; CODE XREF: _rsa2_openssh_createkey+FBj
.text:00002180                                         ; _rsa2_openssh_createkey+11Bj
.text:00002180                 add     esp, 8
.text:00002183                 cmp     ebp, esp
.text:00002185                 call    __RTC_CheckEsp
.text:0000218A                 mov     esp, ebp
.text:0000218C                 pop     ebp
.text:0000218D                 retn
.text:0000218D _rsa2_openssh_createkey endp
.text:0000218D
.text:0000218D ; ---------------------------------------------------------------------------
.text:0000218E                 align 10h
.text:00002190
.text:00002190 ; =============== S U B R O U T I N E =======================================
.text:00002190
.text:00002190 ; Attributes: bp-based frame
.text:00002190
.text:00002190 _rsa2_openssh_fmtkey proc near          ; DATA XREF: .rdata:000002F0o
.text:00002190
.text:00002190 var_24          = dword ptr -24h
.text:00002190 var_20          = dword ptr -20h
.text:00002190 var_1C          = dword ptr -1Ch
.text:00002190 var_18          = dword ptr -18h
.text:00002190 var_14          = dword ptr -14h
.text:00002190 var_10          = dword ptr -10h
.text:00002190 var_C           = dword ptr -0Ch
.text:00002190 var_8           = dword ptr -8
.text:00002190 var_4           = dword ptr -4
.text:00002190 arg_0           = dword ptr  8
.text:00002190 arg_4           = dword ptr  0Ch
.text:00002190 arg_8           = dword ptr  10h
.text:00002190
.text:00002190                 push    ebp
.text:00002191                 mov     ebp, esp
.text:00002193                 sub     esp, 24h
.text:00002196                 push    esi
.text:00002197                 mov     eax, 0CCCCCCCCh
.text:0000219C                 mov     [ebp+var_24], eax
.text:0000219F                 mov     [ebp+var_20], eax
.text:000021A2                 mov     [ebp+var_1C], eax
.text:000021A5                 mov     [ebp+var_18], eax
.text:000021A8                 mov     [ebp+var_14], eax
.text:000021AB                 mov     [ebp+var_10], eax
.text:000021AE                 mov     [ebp+var_C], eax
.text:000021B1                 mov     [ebp+var_8], eax
.text:000021B4                 mov     [ebp+var_4], eax
.text:000021B7                 mov     eax, [ebp+arg_0]
.text:000021BA                 mov     [ebp+var_4], eax
.text:000021BD                 mov     ecx, [ebp+var_4]
.text:000021C0                 mov     edx, [ecx+8]
.text:000021C3                 push    edx
.text:000021C4                 call    _ssh2_bignum_length
.text:000021C9                 add     esp, 4
.text:000021CC                 mov     esi, eax
.text:000021CE                 mov     eax, [ebp+var_4]
.text:000021D1                 mov     ecx, [eax+0Ch]
.text:000021D4                 push    ecx
.text:000021D5                 call    _ssh2_bignum_length
.text:000021DA                 add     esp, 4
.text:000021DD                 add     esi, eax
.text:000021DF                 mov     edx, [ebp+var_4]
.text:000021E2                 mov     eax, [edx+10h]
.text:000021E5                 push    eax
.text:000021E6                 call    _ssh2_bignum_length
.text:000021EB                 add     esp, 4
.text:000021EE                 add     esi, eax
.text:000021F0                 mov     ecx, [ebp+var_4]
.text:000021F3                 mov     edx, [ecx+1Ch]
.text:000021F6                 push    edx
.text:000021F7                 call    _ssh2_bignum_length
.text:000021FC                 add     esp, 4
.text:000021FF                 add     esi, eax
.text:00002201                 mov     eax, [ebp+var_4]
.text:00002204                 mov     ecx, [eax+14h]
.text:00002207                 push    ecx
.text:00002208                 call    _ssh2_bignum_length
.text:0000220D                 add     esp, 4
.text:00002210                 add     esi, eax
.text:00002212                 mov     edx, [ebp+var_4]
.text:00002215                 mov     eax, [edx+18h]
.text:00002218                 push    eax
.text:00002219                 call    _ssh2_bignum_length
.text:0000221E                 add     esp, 4
.text:00002221                 add     esi, eax
.text:00002223                 mov     [ebp+var_8], esi
.text:00002226                 mov     ecx, [ebp+var_8]
.text:00002229                 cmp     ecx, [ebp+arg_8]
.text:0000222C                 jle     short loc_2236
.text:0000222E                 mov     eax, [ebp+var_8]
.text:00002231                 jmp     loc_270E
.text:00002236 ; ---------------------------------------------------------------------------
.text:00002236
.text:00002236 loc_2236:                               ; CODE XREF: _rsa2_openssh_fmtkey+9Cj
.text:00002236                 mov     [ebp+var_8], 0
.text:0000223D                 mov     edx, [ebp+var_4]
.text:00002240                 mov     eax, [edx+8]
.text:00002243                 push    eax
.text:00002244                 call    _ssh2_bignum_length
.text:00002249                 add     esp, 4
.text:0000224C                 sub     eax, 4
.text:0000224F                 sar     eax, 18h
.text:00002252                 mov     ecx, [ebp+arg_4]
.text:00002255                 add     ecx, [ebp+var_8]
.text:00002258                 mov     [ecx], al
.text:0000225A                 mov     edx, [ebp+var_4]
.text:0000225D                 mov     eax, [edx+8]
.text:00002260                 push    eax
.text:00002261                 call    _ssh2_bignum_length
.text:00002266                 add     esp, 4
.text:00002269                 sub     eax, 4
.text:0000226C                 sar     eax, 10h
.text:0000226F                 mov     ecx, [ebp+arg_4]
.text:00002272                 add     ecx, [ebp+var_8]
.text:00002275                 mov     [ecx+1], al
.text:00002278                 mov     edx, [ebp+var_4]
.text:0000227B                 mov     eax, [edx+8]
.text:0000227E                 push    eax
.text:0000227F                 call    _ssh2_bignum_length
.text:00002284                 add     esp, 4
.text:00002287                 sub     eax, 4
.text:0000228A                 sar     eax, 8
.text:0000228D                 mov     ecx, [ebp+arg_4]
.text:00002290                 add     ecx, [ebp+var_8]
.text:00002293                 mov     [ecx+2], al
.text:00002296                 mov     edx, [ebp+var_4]
.text:00002299                 mov     eax, [edx+8]
.text:0000229C                 push    eax
.text:0000229D                 call    _ssh2_bignum_length
.text:000022A2                 add     esp, 4
.text:000022A5                 sub     eax, 4
.text:000022A8                 mov     ecx, [ebp+arg_4]
.text:000022AB                 add     ecx, [ebp+var_8]
.text:000022AE                 mov     [ecx+3], al
.text:000022B1                 mov     edx, [ebp+var_8]
.text:000022B4                 add     edx, 4
.text:000022B7                 mov     [ebp+var_8], edx
.text:000022BA                 mov     eax, [ebp+var_4]
.text:000022BD                 mov     ecx, [eax+8]
.text:000022C0                 push    ecx
.text:000022C1                 call    _ssh2_bignum_length
.text:000022C6                 add     esp, 4
.text:000022C9                 sub     eax, 4
.text:000022CC                 mov     [ebp+var_C], eax
.text:000022CF
.text:000022CF loc_22CF:                               ; CODE XREF: _rsa2_openssh_fmtkey+178j
.text:000022CF                 mov     edx, [ebp+var_C]
.text:000022D2                 mov     [ebp+var_10], edx
.text:000022D5                 mov     eax, [ebp+var_C]
.text:000022D8                 sub     eax, 1
.text:000022DB                 mov     [ebp+var_C], eax
.text:000022DE                 cmp     [ebp+var_10], 0
.text:000022E2                 jz      short loc_230A
.text:000022E4                 mov     ecx, [ebp+var_C]
.text:000022E7                 push    ecx
.text:000022E8                 mov     edx, [ebp+var_4]
.text:000022EB                 mov     eax, [edx+8]
.text:000022EE                 push    eax
.text:000022EF                 call    _bignum_byte
.text:000022F4                 add     esp, 8
.text:000022F7                 mov     ecx, [ebp+arg_4]
.text:000022FA                 add     ecx, [ebp+var_8]
.text:000022FD                 mov     [ecx], al
.text:000022FF                 mov     edx, [ebp+var_8]
.text:00002302                 add     edx, 1
.text:00002305                 mov     [ebp+var_8], edx
.text:00002308                 jmp     short loc_22CF
.text:0000230A ; ---------------------------------------------------------------------------
.text:0000230A
.text:0000230A loc_230A:                               ; CODE XREF: _rsa2_openssh_fmtkey+152j
.text:0000230A                 mov     eax, [ebp+var_4]
.text:0000230D                 mov     ecx, [eax+0Ch]
.text:00002310                 push    ecx
.text:00002311                 call    _ssh2_bignum_length
.text:00002316                 add     esp, 4
.text:00002319                 sub     eax, 4
.text:0000231C                 sar     eax, 18h
.text:0000231F                 mov     edx, [ebp+arg_4]
.text:00002322                 add     edx, [ebp+var_8]
.text:00002325                 mov     [edx], al
.text:00002327                 mov     eax, [ebp+var_4]
.text:0000232A                 mov     ecx, [eax+0Ch]
.text:0000232D                 push    ecx
.text:0000232E                 call    _ssh2_bignum_length
.text:00002333                 add     esp, 4
.text:00002336                 sub     eax, 4
.text:00002339                 sar     eax, 10h
.text:0000233C                 mov     edx, [ebp+arg_4]
.text:0000233F                 add     edx, [ebp+var_8]
.text:00002342                 mov     [edx+1], al
.text:00002345                 mov     eax, [ebp+var_4]
.text:00002348                 mov     ecx, [eax+0Ch]
.text:0000234B                 push    ecx
.text:0000234C                 call    _ssh2_bignum_length
.text:00002351                 add     esp, 4
.text:00002354                 sub     eax, 4
.text:00002357                 sar     eax, 8
.text:0000235A                 mov     edx, [ebp+arg_4]
.text:0000235D                 add     edx, [ebp+var_8]
.text:00002360                 mov     [edx+2], al
.text:00002363                 mov     eax, [ebp+var_4]
.text:00002366                 mov     ecx, [eax+0Ch]
.text:00002369                 push    ecx
.text:0000236A                 call    _ssh2_bignum_length
.text:0000236F                 add     esp, 4
.text:00002372                 sub     eax, 4
.text:00002375                 mov     edx, [ebp+arg_4]
.text:00002378                 add     edx, [ebp+var_8]
.text:0000237B                 mov     [edx+3], al
.text:0000237E                 mov     eax, [ebp+var_8]
.text:00002381                 add     eax, 4
.text:00002384                 mov     [ebp+var_8], eax
.text:00002387                 mov     ecx, [ebp+var_4]
.text:0000238A                 mov     edx, [ecx+0Ch]
.text:0000238D                 push    edx
.text:0000238E                 call    _ssh2_bignum_length
.text:00002393                 add     esp, 4
.text:00002396                 sub     eax, 4
.text:00002399                 mov     [ebp+var_C], eax
.text:0000239C
.text:0000239C loc_239C:                               ; CODE XREF: _rsa2_openssh_fmtkey+245j
.text:0000239C                 mov     eax, [ebp+var_C]
.text:0000239F                 mov     [ebp+var_14], eax
.text:000023A2                 mov     ecx, [ebp+var_C]
.text:000023A5                 sub     ecx, 1
.text:000023A8                 mov     [ebp+var_C], ecx
.text:000023AB                 cmp     [ebp+var_14], 0
.text:000023AF                 jz      short loc_23D7
.text:000023B1                 mov     edx, [ebp+var_C]
.text:000023B4                 push    edx
.text:000023B5                 mov     eax, [ebp+var_4]
.text:000023B8                 mov     ecx, [eax+0Ch]
.text:000023BB                 push    ecx
.text:000023BC                 call    _bignum_byte
.text:000023C1                 add     esp, 8
.text:000023C4                 mov     edx, [ebp+arg_4]
.text:000023C7                 add     edx, [ebp+var_8]
.text:000023CA                 mov     [edx], al
.text:000023CC                 mov     eax, [ebp+var_8]
.text:000023CF                 add     eax, 1
.text:000023D2                 mov     [ebp+var_8], eax
.text:000023D5                 jmp     short loc_239C
.text:000023D7 ; ---------------------------------------------------------------------------
.text:000023D7
.text:000023D7 loc_23D7:                               ; CODE XREF: _rsa2_openssh_fmtkey+21Fj
.text:000023D7                 mov     ecx, [ebp+var_4]
.text:000023DA                 mov     edx, [ecx+10h]
.text:000023DD                 push    edx
.text:000023DE                 call    _ssh2_bignum_length
.text:000023E3                 add     esp, 4
.text:000023E6                 sub     eax, 4
.text:000023E9                 sar     eax, 18h
.text:000023EC                 mov     ecx, [ebp+arg_4]
.text:000023EF                 add     ecx, [ebp+var_8]
.text:000023F2                 mov     [ecx], al
.text:000023F4                 mov     edx, [ebp+var_4]
.text:000023F7                 mov     eax, [edx+10h]
.text:000023FA                 push    eax
.text:000023FB                 call    _ssh2_bignum_length
.text:00002400                 add     esp, 4
.text:00002403                 sub     eax, 4
.text:00002406                 sar     eax, 10h
.text:00002409                 mov     ecx, [ebp+arg_4]
.text:0000240C                 add     ecx, [ebp+var_8]
.text:0000240F                 mov     [ecx+1], al
.text:00002412                 mov     edx, [ebp+var_4]
.text:00002415                 mov     eax, [edx+10h]
.text:00002418                 push    eax
.text:00002419                 call    _ssh2_bignum_length
.text:0000241E                 add     esp, 4
.text:00002421                 sub     eax, 4
.text:00002424                 sar     eax, 8
.text:00002427                 mov     ecx, [ebp+arg_4]
.text:0000242A                 add     ecx, [ebp+var_8]
.text:0000242D                 mov     [ecx+2], al
.text:00002430                 mov     edx, [ebp+var_4]
.text:00002433                 mov     eax, [edx+10h]
.text:00002436                 push    eax
.text:00002437                 call    _ssh2_bignum_length
.text:0000243C                 add     esp, 4
.text:0000243F                 sub     eax, 4
.text:00002442                 mov     ecx, [ebp+arg_4]
.text:00002445                 add     ecx, [ebp+var_8]
.text:00002448                 mov     [ecx+3], al
.text:0000244B                 mov     edx, [ebp+var_8]
.text:0000244E                 add     edx, 4
.text:00002451                 mov     [ebp+var_8], edx
.text:00002454                 mov     eax, [ebp+var_4]
.text:00002457                 mov     ecx, [eax+10h]
.text:0000245A                 push    ecx
.text:0000245B                 call    _ssh2_bignum_length
.text:00002460                 add     esp, 4
.text:00002463                 sub     eax, 4
.text:00002466                 mov     [ebp+var_C], eax
.text:00002469
.text:00002469 loc_2469:                               ; CODE XREF: _rsa2_openssh_fmtkey+312j
.text:00002469                 mov     edx, [ebp+var_C]
.text:0000246C                 mov     [ebp+var_18], edx
.text:0000246F                 mov     eax, [ebp+var_C]
.text:00002472                 sub     eax, 1
.text:00002475                 mov     [ebp+var_C], eax
.text:00002478                 cmp     [ebp+var_18], 0
.text:0000247C                 jz      short loc_24A4
.text:0000247E                 mov     ecx, [ebp+var_C]
.text:00002481                 push    ecx
.text:00002482                 mov     edx, [ebp+var_4]
.text:00002485                 mov     eax, [edx+10h]
.text:00002488                 push    eax
.text:00002489                 call    _bignum_byte
.text:0000248E                 add     esp, 8
.text:00002491                 mov     ecx, [ebp+arg_4]
.text:00002494                 add     ecx, [ebp+var_8]
.text:00002497                 mov     [ecx], al
.text:00002499                 mov     edx, [ebp+var_8]
.text:0000249C                 add     edx, 1
.text:0000249F                 mov     [ebp+var_8], edx
.text:000024A2                 jmp     short loc_2469
.text:000024A4 ; ---------------------------------------------------------------------------
.text:000024A4
.text:000024A4 loc_24A4:                               ; CODE XREF: _rsa2_openssh_fmtkey+2ECj
.text:000024A4                 mov     eax, [ebp+var_4]
.text:000024A7                 mov     ecx, [eax+1Ch]
.text:000024AA                 push    ecx
.text:000024AB                 call    _ssh2_bignum_length
.text:000024B0                 add     esp, 4
.text:000024B3                 sub     eax, 4
.text:000024B6                 sar     eax, 18h
.text:000024B9                 mov     edx, [ebp+arg_4]
.text:000024BC                 add     edx, [ebp+var_8]
.text:000024BF                 mov     [edx], al
.text:000024C1                 mov     eax, [ebp+var_4]
.text:000024C4                 mov     ecx, [eax+1Ch]
.text:000024C7                 push    ecx
.text:000024C8                 call    _ssh2_bignum_length
.text:000024CD                 add     esp, 4
.text:000024D0                 sub     eax, 4
.text:000024D3                 sar     eax, 10h
.text:000024D6                 mov     edx, [ebp+arg_4]
.text:000024D9                 add     edx, [ebp+var_8]
.text:000024DC                 mov     [edx+1], al
.text:000024DF                 mov     eax, [ebp+var_4]
.text:000024E2                 mov     ecx, [eax+1Ch]
.text:000024E5                 push    ecx
.text:000024E6                 call    _ssh2_bignum_length
.text:000024EB                 add     esp, 4
.text:000024EE                 sub     eax, 4
.text:000024F1                 sar     eax, 8
.text:000024F4                 mov     edx, [ebp+arg_4]
.text:000024F7                 add     edx, [ebp+var_8]
.text:000024FA                 mov     [edx+2], al
.text:000024FD                 mov     eax, [ebp+var_4]
.text:00002500                 mov     ecx, [eax+1Ch]
.text:00002503                 push    ecx
.text:00002504                 call    _ssh2_bignum_length
.text:00002509                 add     esp, 4
.text:0000250C                 sub     eax, 4
.text:0000250F                 mov     edx, [ebp+arg_4]
.text:00002512                 add     edx, [ebp+var_8]
.text:00002515                 mov     [edx+3], al
.text:00002518                 mov     eax, [ebp+var_8]
.text:0000251B                 add     eax, 4
.text:0000251E                 mov     [ebp+var_8], eax
.text:00002521                 mov     ecx, [ebp+var_4]
.text:00002524                 mov     edx, [ecx+1Ch]
.text:00002527                 push    edx
.text:00002528                 call    _ssh2_bignum_length
.text:0000252D                 add     esp, 4
.text:00002530                 sub     eax, 4
.text:00002533                 mov     [ebp+var_C], eax
.text:00002536
.text:00002536 loc_2536:                               ; CODE XREF: _rsa2_openssh_fmtkey+3DFj
.text:00002536                 mov     eax, [ebp+var_C]
.text:00002539                 mov     [ebp+var_1C], eax
.text:0000253C                 mov     ecx, [ebp+var_C]
.text:0000253F                 sub     ecx, 1
.text:00002542                 mov     [ebp+var_C], ecx
.text:00002545                 cmp     [ebp+var_1C], 0
.text:00002549                 jz      short loc_2571
.text:0000254B                 mov     edx, [ebp+var_C]
.text:0000254E                 push    edx
.text:0000254F                 mov     eax, [ebp+var_4]
.text:00002552                 mov     ecx, [eax+1Ch]
.text:00002555                 push    ecx
.text:00002556                 call    _bignum_byte
.text:0000255B                 add     esp, 8
.text:0000255E                 mov     edx, [ebp+arg_4]
.text:00002561                 add     edx, [ebp+var_8]
.text:00002564                 mov     [edx], al
.text:00002566                 mov     eax, [ebp+var_8]
.text:00002569                 add     eax, 1
.text:0000256C                 mov     [ebp+var_8], eax
.text:0000256F                 jmp     short loc_2536
.text:00002571 ; ---------------------------------------------------------------------------
.text:00002571
.text:00002571 loc_2571:                               ; CODE XREF: _rsa2_openssh_fmtkey+3B9j
.text:00002571                 mov     ecx, [ebp+var_4]
.text:00002574                 mov     edx, [ecx+14h]
.text:00002577                 push    edx
.text:00002578                 call    _ssh2_bignum_length
.text:0000257D                 add     esp, 4
.text:00002580                 sub     eax, 4
.text:00002583                 sar     eax, 18h
.text:00002586                 mov     ecx, [ebp+arg_4]
.text:00002589                 add     ecx, [ebp+var_8]
.text:0000258C                 mov     [ecx], al
.text:0000258E                 mov     edx, [ebp+var_4]
.text:00002591                 mov     eax, [edx+14h]
.text:00002594                 push    eax
.text:00002595                 call    _ssh2_bignum_length
.text:0000259A                 add     esp, 4
.text:0000259D                 sub     eax, 4
.text:000025A0                 sar     eax, 10h
.text:000025A3                 mov     ecx, [ebp+arg_4]
.text:000025A6                 add     ecx, [ebp+var_8]
.text:000025A9                 mov     [ecx+1], al
.text:000025AC                 mov     edx, [ebp+var_4]
.text:000025AF                 mov     eax, [edx+14h]
.text:000025B2                 push    eax
.text:000025B3                 call    _ssh2_bignum_length
.text:000025B8                 add     esp, 4
.text:000025BB                 sub     eax, 4
.text:000025BE                 sar     eax, 8
.text:000025C1                 mov     ecx, [ebp+arg_4]
.text:000025C4                 add     ecx, [ebp+var_8]
.text:000025C7                 mov     [ecx+2], al
.text:000025CA                 mov     edx, [ebp+var_4]
.text:000025CD                 mov     eax, [edx+14h]
.text:000025D0                 push    eax
.text:000025D1                 call    _ssh2_bignum_length
.text:000025D6                 add     esp, 4
.text:000025D9                 sub     eax, 4
.text:000025DC                 mov     ecx, [ebp+arg_4]
.text:000025DF                 add     ecx, [ebp+var_8]
.text:000025E2                 mov     [ecx+3], al
.text:000025E5                 mov     edx, [ebp+var_8]
.text:000025E8                 add     edx, 4
.text:000025EB                 mov     [ebp+var_8], edx
.text:000025EE                 mov     eax, [ebp+var_4]
.text:000025F1                 mov     ecx, [eax+14h]
.text:000025F4                 push    ecx
.text:000025F5                 call    _ssh2_bignum_length
.text:000025FA                 add     esp, 4
.text:000025FD                 sub     eax, 4
.text:00002600                 mov     [ebp+var_C], eax
.text:00002603
.text:00002603 loc_2603:                               ; CODE XREF: _rsa2_openssh_fmtkey+4ACj
.text:00002603                 mov     edx, [ebp+var_C]
.text:00002606                 mov     [ebp+var_20], edx
.text:00002609                 mov     eax, [ebp+var_C]
.text:0000260C                 sub     eax, 1
.text:0000260F                 mov     [ebp+var_C], eax
.text:00002612                 cmp     [ebp+var_20], 0
.text:00002616                 jz      short loc_263E
.text:00002618                 mov     ecx, [ebp+var_C]
.text:0000261B                 push    ecx
.text:0000261C                 mov     edx, [ebp+var_4]
.text:0000261F                 mov     eax, [edx+14h]
.text:00002622                 push    eax
.text:00002623                 call    _bignum_byte
.text:00002628                 add     esp, 8
.text:0000262B                 mov     ecx, [ebp+arg_4]
.text:0000262E                 add     ecx, [ebp+var_8]
.text:00002631                 mov     [ecx], al
.text:00002633                 mov     edx, [ebp+var_8]
.text:00002636                 add     edx, 1
.text:00002639                 mov     [ebp+var_8], edx
.text:0000263C                 jmp     short loc_2603
.text:0000263E ; ---------------------------------------------------------------------------
.text:0000263E
.text:0000263E loc_263E:                               ; CODE XREF: _rsa2_openssh_fmtkey+486j
.text:0000263E                 mov     eax, [ebp+var_4]
.text:00002641                 mov     ecx, [eax+18h]
.text:00002644                 push    ecx
.text:00002645                 call    _ssh2_bignum_length
.text:0000264A                 add     esp, 4
.text:0000264D                 sub     eax, 4
.text:00002650                 sar     eax, 18h
.text:00002653                 mov     edx, [ebp+arg_4]
.text:00002656                 add     edx, [ebp+var_8]
.text:00002659                 mov     [edx], al
.text:0000265B                 mov     eax, [ebp+var_4]
.text:0000265E                 mov     ecx, [eax+18h]
.text:00002661                 push    ecx
.text:00002662                 call    _ssh2_bignum_length
.text:00002667                 add     esp, 4
.text:0000266A                 sub     eax, 4
.text:0000266D                 sar     eax, 10h
.text:00002670                 mov     edx, [ebp+arg_4]
.text:00002673                 add     edx, [ebp+var_8]
.text:00002676                 mov     [edx+1], al
.text:00002679                 mov     eax, [ebp+var_4]
.text:0000267C                 mov     ecx, [eax+18h]
.text:0000267F                 push    ecx
.text:00002680                 call    _ssh2_bignum_length
.text:00002685                 add     esp, 4
.text:00002688                 sub     eax, 4
.text:0000268B                 sar     eax, 8
.text:0000268E                 mov     edx, [ebp+arg_4]
.text:00002691                 add     edx, [ebp+var_8]
.text:00002694                 mov     [edx+2], al
.text:00002697                 mov     eax, [ebp+var_4]
.text:0000269A                 mov     ecx, [eax+18h]
.text:0000269D                 push    ecx
.text:0000269E                 call    _ssh2_bignum_length
.text:000026A3                 add     esp, 4
.text:000026A6                 sub     eax, 4
.text:000026A9                 mov     edx, [ebp+arg_4]
.text:000026AC                 add     edx, [ebp+var_8]
.text:000026AF                 mov     [edx+3], al
.text:000026B2                 mov     eax, [ebp+var_8]
.text:000026B5                 add     eax, 4
.text:000026B8                 mov     [ebp+var_8], eax
.text:000026BB                 mov     ecx, [ebp+var_4]
.text:000026BE                 mov     edx, [ecx+18h]
.text:000026C1                 push    edx
.text:000026C2                 call    _ssh2_bignum_length
.text:000026C7                 add     esp, 4
.text:000026CA                 sub     eax, 4
.text:000026CD                 mov     [ebp+var_C], eax
.text:000026D0
.text:000026D0 loc_26D0:                               ; CODE XREF: _rsa2_openssh_fmtkey+579j
.text:000026D0                 mov     eax, [ebp+var_C]
.text:000026D3                 mov     [ebp+var_24], eax
.text:000026D6                 mov     ecx, [ebp+var_C]
.text:000026D9                 sub     ecx, 1
.text:000026DC                 mov     [ebp+var_C], ecx
.text:000026DF                 cmp     [ebp+var_24], 0
.text:000026E3                 jz      short loc_270B
.text:000026E5                 mov     edx, [ebp+var_C]
.text:000026E8                 push    edx
.text:000026E9                 mov     eax, [ebp+var_4]
.text:000026EC                 mov     ecx, [eax+18h]
.text:000026EF                 push    ecx
.text:000026F0                 call    _bignum_byte
.text:000026F5                 add     esp, 8
.text:000026F8                 mov     edx, [ebp+arg_4]
.text:000026FB                 add     edx, [ebp+var_8]
.text:000026FE                 mov     [edx], al
.text:00002700                 mov     eax, [ebp+var_8]
.text:00002703                 add     eax, 1
.text:00002706                 mov     [ebp+var_8], eax
.text:00002709                 jmp     short loc_26D0
.text:0000270B ; ---------------------------------------------------------------------------
.text:0000270B
.text:0000270B loc_270B:                               ; CODE XREF: _rsa2_openssh_fmtkey+553j
.text:0000270B                 mov     eax, [ebp+var_8]
.text:0000270E
.text:0000270E loc_270E:                               ; CODE XREF: _rsa2_openssh_fmtkey+A1j
.text:0000270E                 pop     esi
.text:0000270F                 add     esp, 24h
.text:00002712                 cmp     ebp, esp
.text:00002714                 call    __RTC_CheckEsp
.text:00002719                 mov     esp, ebp
.text:0000271B                 pop     ebp
.text:0000271C                 retn
.text:0000271C _rsa2_openssh_fmtkey endp
.text:0000271C
.text:0000271C ; ---------------------------------------------------------------------------
.text:0000271D                 align 10h
.text:00002720
.text:00002720 ; =============== S U B R O U T I N E =======================================
.text:00002720
.text:00002720 ; Attributes: bp-based frame
.text:00002720
.text:00002720 _rsa2_pubkey_bits proc near             ; DATA XREF: .rdata:000002F4o
.text:00002720
.text:00002720 var_8           = dword ptr -8
.text:00002720 var_4           = dword ptr -4
.text:00002720 arg_0           = dword ptr  8
.text:00002720 arg_4           = dword ptr  0Ch
.text:00002720
.text:00002720                 push    ebp
.text:00002721                 mov     ebp, esp
.text:00002723                 sub     esp, 8
.text:00002726                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000272D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002734                 mov     eax, [ebp+arg_4]
.text:00002737                 push    eax
.text:00002738                 mov     ecx, [ebp+arg_0]
.text:0000273B                 push    ecx
.text:0000273C                 call    _rsa2_newkey
.text:00002741                 add     esp, 8
.text:00002744                 mov     [ebp+var_4], eax
.text:00002747                 mov     edx, [ebp+var_4]
.text:0000274A                 mov     eax, [edx+8]
.text:0000274D                 push    eax
.text:0000274E                 call    _bignum_bitcount
.text:00002753                 add     esp, 4
.text:00002756                 mov     [ebp+var_8], eax
.text:00002759                 mov     ecx, [ebp+var_4]
.text:0000275C                 push    ecx
.text:0000275D                 call    _rsa2_freekey
.text:00002762                 add     esp, 4
.text:00002765                 mov     eax, [ebp+var_8]
.text:00002768                 add     esp, 8
.text:0000276B                 cmp     ebp, esp
.text:0000276D                 call    __RTC_CheckEsp
.text:00002772                 mov     esp, ebp
.text:00002774                 pop     ebp
.text:00002775                 retn
.text:00002775 _rsa2_pubkey_bits endp
.text:00002775
.text:00002775 ; ---------------------------------------------------------------------------
.text:00002776                 align 10h
.text:00002780
.text:00002780 ; =============== S U B R O U T I N E =======================================
.text:00002780
.text:00002780 ; Attributes: bp-based frame
.text:00002780
.text:00002780 _rsa2_fingerprint proc near             ; DATA XREF: .rdata:000002F8o
.text:00002780
.text:00002780 var_120         = dword ptr -120h
.text:00002780 var_11C         = dword ptr -11Ch
.text:00002780 var_118         = dword ptr -118h
.text:00002780 var_10D         = byte ptr -10Dh
.text:00002780 var_101         = byte ptr -101h
.text:00002780 var_FC          = dword ptr -0FCh
.text:00002780 var_F8          = dword ptr -0F8h
.text:00002780 var_F4          = dword ptr -0F4h
.text:00002780 var_EC          = byte ptr -0ECh
.text:00002780 var_8C          = byte ptr -8Ch
.text:00002780 var_8B          = byte ptr -8Bh
.text:00002780 var_8A          = byte ptr -8Ah
.text:00002780 var_89          = byte ptr -89h
.text:00002780 var_80          = byte ptr -80h
.text:00002780 var_68          = byte ptr -68h
.text:00002780 var_8           = dword ptr -8
.text:00002780 var_4           = dword ptr -4
.text:00002780 arg_0           = dword ptr  8
.text:00002780
.text:00002780                 push    ebp
.text:00002781                 mov     ebp, esp
.text:00002783                 sub     esp, 120h
.text:00002789                 push    edi
.text:0000278A                 lea     edi, [ebp+var_120]
.text:00002790                 mov     ecx, 48h ; 'H'
.text:00002795                 mov     eax, 0CCCCCCCCh
.text:0000279A                 rep stosd
.text:0000279C                 mov     eax, dword ptr ds:___security_cookie
.text:000027A1                 xor     eax, ebp
.text:000027A3                 mov     [ebp+var_4], eax
.text:000027A6                 mov     eax, [ebp+arg_0]
.text:000027A9                 mov     [ebp+var_8], eax
.text:000027AC                 lea     ecx, [ebp+var_68]
.text:000027AF                 push    ecx
.text:000027B0                 call    _MD5Init
.text:000027B5                 add     esp, 4
.text:000027B8                 push    0Bh
.text:000027BA                 push    offset $SG7675
.text:000027BF                 lea     edx, [ebp+var_68]
.text:000027C2                 push    edx
.text:000027C3                 call    _MD5Update
.text:000027C8                 add     esp, 0Ch
.text:000027CB                 mov     eax, [ebp+var_8]
.text:000027CE                 mov     ecx, [eax+0Ch]
.text:000027D1                 push    ecx
.text:000027D2                 call    _bignum_bitcount
.text:000027D7                 add     esp, 4
.text:000027DA                 add     eax, 8
.text:000027DD                 cdq
.text:000027DE                 and     edx, 7
.text:000027E1                 add     eax, edx
.text:000027E3                 sar     eax, 3
.text:000027E6                 mov     [ebp+var_F8], eax
.text:000027EC                 mov     edx, [ebp+var_F8]
.text:000027F2                 sar     edx, 18h
.text:000027F5                 mov     [ebp+var_8C], dl
.text:000027FB                 mov     eax, [ebp+var_F8]
.text:00002801                 sar     eax, 10h
.text:00002804                 mov     [ebp+var_8B], al
.text:0000280A                 mov     ecx, [ebp+var_F8]
.text:00002810                 sar     ecx, 8
.text:00002813                 mov     [ebp+var_8A], cl
.text:00002819                 mov     dl, byte ptr [ebp+var_F8]
.text:0000281F                 mov     [ebp+var_89], dl
.text:00002825                 push    4
.text:00002827                 lea     eax, [ebp+var_8C]
.text:0000282D                 push    eax
.text:0000282E                 lea     ecx, [ebp+var_68]
.text:00002831                 push    ecx
.text:00002832                 call    _MD5Update
.text:00002837                 add     esp, 0Ch
.text:0000283A                 mov     edx, [ebp+var_F8]
.text:00002840                 mov     [ebp+var_FC], edx
.text:00002846
.text:00002846 loc_2846:                               ; CODE XREF: _rsa2_fingerprint+11Bj
.text:00002846                 mov     eax, [ebp+var_FC]
.text:0000284C                 mov     [ebp+var_118], eax
.text:00002852                 mov     ecx, [ebp+var_FC]
.text:00002858                 sub     ecx, 1
.text:0000285B                 mov     [ebp+var_FC], ecx
.text:00002861                 cmp     [ebp+var_118], 0
.text:00002868                 jz      short loc_289D
.text:0000286A                 mov     edx, [ebp+var_FC]
.text:00002870                 push    edx
.text:00002871                 mov     eax, [ebp+var_8]
.text:00002874                 mov     ecx, [eax+0Ch]
.text:00002877                 push    ecx
.text:00002878                 call    _bignum_byte
.text:0000287D                 add     esp, 8
.text:00002880                 mov     [ebp+var_101], al
.text:00002886                 push    1
.text:00002888                 lea     edx, [ebp+var_101]
.text:0000288E                 push    edx
.text:0000288F                 lea     eax, [ebp+var_68]
.text:00002892                 push    eax
.text:00002893                 call    _MD5Update
.text:00002898                 add     esp, 0Ch
.text:0000289B                 jmp     short loc_2846
.text:0000289D ; ---------------------------------------------------------------------------
.text:0000289D
.text:0000289D loc_289D:                               ; CODE XREF: _rsa2_fingerprint+E8j
.text:0000289D                 mov     ecx, [ebp+var_8]
.text:000028A0                 mov     edx, [ecx+8]
.text:000028A3                 push    edx
.text:000028A4                 call    _bignum_bitcount
.text:000028A9                 add     esp, 4
.text:000028AC                 add     eax, 8
.text:000028AF                 cdq
.text:000028B0                 and     edx, 7
.text:000028B3                 add     eax, edx
.text:000028B5                 sar     eax, 3
.text:000028B8                 mov     [ebp+var_F8], eax
.text:000028BE                 mov     eax, [ebp+var_F8]
.text:000028C4                 sar     eax, 18h
.text:000028C7                 mov     [ebp+var_8C], al
.text:000028CD                 mov     ecx, [ebp+var_F8]
.text:000028D3                 sar     ecx, 10h
.text:000028D6                 mov     [ebp+var_8B], cl
.text:000028DC                 mov     edx, [ebp+var_F8]
.text:000028E2                 sar     edx, 8
.text:000028E5                 mov     [ebp+var_8A], dl
.text:000028EB                 mov     al, byte ptr [ebp+var_F8]
.text:000028F1                 mov     [ebp+var_89], al
.text:000028F7                 push    4
.text:000028F9                 lea     ecx, [ebp+var_8C]
.text:000028FF                 push    ecx
.text:00002900                 lea     edx, [ebp+var_68]
.text:00002903                 push    edx
.text:00002904                 call    _MD5Update
.text:00002909                 add     esp, 0Ch
.text:0000290C                 mov     eax, [ebp+var_F8]
.text:00002912                 mov     [ebp+var_FC], eax
.text:00002918
.text:00002918 loc_2918:                               ; CODE XREF: _rsa2_fingerprint+1EDj
.text:00002918                 mov     ecx, [ebp+var_FC]
.text:0000291E                 mov     [ebp+var_11C], ecx
.text:00002924                 mov     edx, [ebp+var_FC]
.text:0000292A                 sub     edx, 1
.text:0000292D                 mov     [ebp+var_FC], edx
.text:00002933                 cmp     [ebp+var_11C], 0
.text:0000293A                 jz      short loc_296F
.text:0000293C                 mov     eax, [ebp+var_FC]
.text:00002942                 push    eax
.text:00002943                 mov     ecx, [ebp+var_8]
.text:00002946                 mov     edx, [ecx+8]
.text:00002949                 push    edx
.text:0000294A                 call    _bignum_byte
.text:0000294F                 add     esp, 8
.text:00002952                 mov     [ebp+var_10D], al
.text:00002958                 push    1
.text:0000295A                 lea     eax, [ebp+var_10D]
.text:00002960                 push    eax
.text:00002961                 lea     ecx, [ebp+var_68]
.text:00002964                 push    ecx
.text:00002965                 call    _MD5Update
.text:0000296A                 add     esp, 0Ch
.text:0000296D                 jmp     short loc_2918
.text:0000296F ; ---------------------------------------------------------------------------
.text:0000296F
.text:0000296F loc_296F:                               ; CODE XREF: _rsa2_fingerprint+1BAj
.text:0000296F                 lea     edx, [ebp+var_68]
.text:00002972                 push    edx
.text:00002973                 lea     eax, [ebp+var_80]
.text:00002976                 push    eax
.text:00002977                 call    _MD5Final
.text:0000297C                 add     esp, 8
.text:0000297F                 mov     ecx, [ebp+var_8]
.text:00002982                 mov     edx, [ecx+8]
.text:00002985                 push    edx
.text:00002986                 call    _bignum_bitcount
.text:0000298B                 add     esp, 4
.text:0000298E                 push    eax
.text:0000298F                 push    offset $SG7692  ; "ssh-rsa %d "
.text:00002994                 lea     eax, [ebp+var_EC]
.text:0000299A                 push    eax             ; char *
.text:0000299B                 call    _sprintf
.text:000029A0                 add     esp, 0Ch
.text:000029A3                 mov     [ebp+var_FC], 0
.text:000029AD                 jmp     short loc_29BE
.text:000029AF ; ---------------------------------------------------------------------------
.text:000029AF
.text:000029AF loc_29AF:                               ; CODE XREF: _rsa2_fingerprint+29Dj
.text:000029AF                 mov     ecx, [ebp+var_FC]
.text:000029B5                 add     ecx, 1
.text:000029B8                 mov     [ebp+var_FC], ecx
.text:000029BE
.text:000029BE loc_29BE:                               ; CODE XREF: _rsa2_fingerprint+22Dj
.text:000029BE                 cmp     [ebp+var_FC], 10h
.text:000029C5                 jge     short loc_2A1F
.text:000029C7                 cmp     [ebp+var_FC], 0
.text:000029CE                 jz      short loc_29DC
.text:000029D0                 mov     [ebp+var_120], offset $SG7696
.text:000029DA                 jmp     short loc_29E6
.text:000029DC ; ---------------------------------------------------------------------------
.text:000029DC
.text:000029DC loc_29DC:                               ; CODE XREF: _rsa2_fingerprint+24Ej
.text:000029DC                 mov     [ebp+var_120], offset $SG7697
.text:000029E6
.text:000029E6 loc_29E6:                               ; CODE XREF: _rsa2_fingerprint+25Aj
.text:000029E6                 mov     edx, [ebp+var_FC]
.text:000029EC                 movzx   eax, [ebp+edx+var_80]
.text:000029F1                 push    eax
.text:000029F2                 mov     ecx, [ebp+var_120]
.text:000029F8                 push    ecx
.text:000029F9                 push    offset $SG7698  ; "%s%02x"
.text:000029FE                 lea     edx, [ebp+var_EC]
.text:00002A04                 push    edx             ; char *
.text:00002A05                 call    _strlen
.text:00002A0A                 add     esp, 4
.text:00002A0D                 lea     eax, [ebp+eax+var_EC]
.text:00002A14                 push    eax             ; char *
.text:00002A15                 call    _sprintf
.text:00002A1A                 add     esp, 10h
.text:00002A1D                 jmp     short loc_29AF
.text:00002A1F ; ---------------------------------------------------------------------------
.text:00002A1F
.text:00002A1F loc_2A1F:                               ; CODE XREF: _rsa2_fingerprint+245j
.text:00002A1F                 push    1
.text:00002A21                 lea     ecx, [ebp+var_EC]
.text:00002A27                 push    ecx             ; char *
.text:00002A28                 call    _strlen
.text:00002A2D                 add     esp, 4
.text:00002A30                 add     eax, 1
.text:00002A33                 push    eax
.text:00002A34                 call    _safemalloc
.text:00002A39                 add     esp, 8
.text:00002A3C                 mov     [ebp+var_F4], eax
.text:00002A42                 cmp     [ebp+var_F4], 0
.text:00002A49                 jz      short loc_2A61
.text:00002A4B                 lea     edx, [ebp+var_EC]
.text:00002A51                 push    edx             ; char *
.text:00002A52                 mov     eax, [ebp+var_F4]
.text:00002A58                 push    eax             ; char *
.text:00002A59                 call    _strcpy
.text:00002A5E                 add     esp, 8
.text:00002A61
.text:00002A61 loc_2A61:                               ; CODE XREF: _rsa2_fingerprint+2C9j
.text:00002A61                 mov     eax, [ebp+var_F4]
.text:00002A67                 push    edx
.text:00002A68                 mov     ecx, ebp
.text:00002A6A                 push    eax
.text:00002A6B                 lea     edx, $LN20
.text:00002A71                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002A76                 pop     eax
.text:00002A77                 pop     edx
.text:00002A78                 pop     edi
.text:00002A79                 mov     ecx, [ebp+var_4]
.text:00002A7C                 xor     ecx, ebp
.text:00002A7E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002A83                 add     esp, 120h
.text:00002A89                 cmp     ebp, esp
.text:00002A8B                 call    __RTC_CheckEsp
.text:00002A90                 mov     esp, ebp
.text:00002A92                 pop     ebp
.text:00002A93                 retn
.text:00002A93 _rsa2_fingerprint endp
.text:00002A93
.text:00002A93 ; ---------------------------------------------------------------------------
.text:00002A94 $LN20           dd 6                    ; DATA XREF: _rsa2_fingerprint+2EBo
.text:00002A98                 dd offset $LN19_0
.text:00002A9C $LN19_0         dd 0FFFFFF98h, 5Ch      ; DATA XREF: .text:00002A98o
.text:00002AA4                 dd offset $LN13_1       ; "md5c"
.text:00002AA8                 dd 0FFFFFF80h, 10h
.text:00002AB0                 dd offset $LN14_1       ; "digest"
.text:00002AB4                 dd 0FFFFFF74h, 4
.text:00002ABC                 dd offset $LN15_1       ; "lenbuf"
.text:00002AC0                 dd 0FFFFFF14h, 58h
.text:00002AC8                 dd offset $LN16_1       ; "buffer"
.text:00002ACC                 dd 0FFFFFEFFh, 1
.text:00002AD4                 dd offset $LN17_1
.text:00002AD8                 dd 0FFFFFEF3h, 1
.text:00002AE0                 dd offset $LN18_0
.text:00002AE4 $LN18_0         db 63h, 0               ; DATA XREF: .text:00002AE0o
.text:00002AE6 $LN17_1         dw 63h                  ; DATA XREF: .text:00002AD4o
.text:00002AE8 $LN16_1         db 'buffer',0           ; DATA XREF: .text:00002AC8o
.text:00002AEF $LN15_1         db 'lenbuf',0           ; DATA XREF: .text:00002ABCo
.text:00002AF6 $LN14_1         db 'digest',0           ; DATA XREF: .text:00002AB0o
.text:00002AFD $LN13_1         db 'md5c',0             ; DATA XREF: .text:00002AA4o
.text:00002B02                 align 10h
.text:00002B10
.text:00002B10 ; =============== S U B R O U T I N E =======================================
.text:00002B10
.text:00002B10 ; Attributes: bp-based frame
.text:00002B10
.text:00002B10 _rsa2_verifysig proc near               ; DATA XREF: .rdata:000002FCo
.text:00002B10
.text:00002B10 var_54          = byte ptr -54h
.text:00002B10 var_50          = byte ptr -50h
.text:00002B10 var_38          = dword ptr -38h
.text:00002B10 var_34          = dword ptr -34h
.text:00002B10 var_30          = dword ptr -30h
.text:00002B10 var_2C          = dword ptr -2Ch
.text:00002B10 var_24          = dword ptr -24h
.text:00002B10 var_18          = dword ptr -18h
.text:00002B10 var_10          = dword ptr -10h
.text:00002B10 var_C           = dword ptr -0Ch
.text:00002B10 var_8           = dword ptr -8
.text:00002B10 var_4           = dword ptr -4
.text:00002B10 arg_0           = dword ptr  8
.text:00002B10 arg_4           = byte ptr  0Ch
.text:00002B10 arg_8           = byte ptr  10h
.text:00002B10 arg_C           = dword ptr  14h
.text:00002B10 arg_10          = dword ptr  18h
.text:00002B10
.text:00002B10                 push    ebp
.text:00002B11                 mov     ebp, esp
.text:00002B13                 sub     esp, 54h
.text:00002B16                 push    edi
.text:00002B17                 lea     edi, [ebp+var_54]
.text:00002B1A                 mov     ecx, 15h
.text:00002B1F                 mov     eax, 0CCCCCCCCh
.text:00002B24                 rep stosd
.text:00002B26                 mov     eax, dword ptr ds:___security_cookie
.text:00002B2B                 xor     eax, ebp
.text:00002B2D                 mov     [ebp+var_4], eax
.text:00002B30                 mov     eax, [ebp+arg_0]
.text:00002B33                 mov     [ebp+var_8], eax
.text:00002B36                 lea     ecx, [ebp+var_24]
.text:00002B39                 push    ecx
.text:00002B3A                 lea     edx, [ebp+var_18]
.text:00002B3D                 push    edx
.text:00002B3E                 lea     eax, [ebp+arg_8]
.text:00002B41                 push    eax
.text:00002B42                 lea     ecx, [ebp+arg_4]
.text:00002B45                 push    ecx
.text:00002B46                 call    _getstring
.text:00002B4B                 add     esp, 10h
.text:00002B4E                 cmp     [ebp+var_18], 0
.text:00002B52                 jz      short loc_2B71
.text:00002B54                 cmp     [ebp+var_24], 7
.text:00002B58                 jnz     short loc_2B71
.text:00002B5A                 push    7               ; size_t
.text:00002B5C                 push    offset $SG7728  ; "ssh-rsa"
.text:00002B61                 mov     edx, [ebp+var_18]
.text:00002B64                 push    edx             ; void *
.text:00002B65                 call    _memcmp
.text:00002B6A                 add     esp, 0Ch
.text:00002B6D                 test    eax, eax
.text:00002B6F                 jz      short loc_2B78
.text:00002B71
.text:00002B71 loc_2B71:                               ; CODE XREF: _rsa2_verifysig+42j
.text:00002B71                                         ; _rsa2_verifysig+48j
.text:00002B71                 xor     eax, eax
.text:00002B73                 jmp     loc_2D1C
.text:00002B78 ; ---------------------------------------------------------------------------
.text:00002B78
.text:00002B78 loc_2B78:                               ; CODE XREF: _rsa2_verifysig+5Fj
.text:00002B78                 lea     eax, [ebp+arg_8]
.text:00002B7B                 push    eax
.text:00002B7C                 lea     ecx, [ebp+arg_4]
.text:00002B7F                 push    ecx
.text:00002B80                 call    _getmp
.text:00002B85                 add     esp, 8
.text:00002B88                 mov     [ebp+var_C], eax
.text:00002B8B                 cmp     [ebp+var_C], 0
.text:00002B8F                 jnz     short loc_2B98
.text:00002B91                 xor     eax, eax
.text:00002B93                 jmp     loc_2D1C
.text:00002B98 ; ---------------------------------------------------------------------------
.text:00002B98
.text:00002B98 loc_2B98:                               ; CODE XREF: _rsa2_verifysig+7Fj
.text:00002B98                 mov     edx, [ebp+var_8]
.text:00002B9B                 mov     eax, [edx+8]
.text:00002B9E                 push    eax
.text:00002B9F                 mov     ecx, [ebp+var_8]
.text:00002BA2                 mov     edx, [ecx+0Ch]
.text:00002BA5                 push    edx
.text:00002BA6                 mov     eax, [ebp+var_C]
.text:00002BA9                 push    eax
.text:00002BAA                 call    _modpow
.text:00002BAF                 add     esp, 0Ch
.text:00002BB2                 mov     [ebp+var_10], eax
.text:00002BB5                 mov     ecx, [ebp+var_C]
.text:00002BB8                 push    ecx
.text:00002BB9                 call    _freebn
.text:00002BBE                 add     esp, 4
.text:00002BC1                 mov     [ebp+var_38], 1
.text:00002BC8                 mov     edx, [ebp+var_8]
.text:00002BCB                 mov     eax, [edx+8]
.text:00002BCE                 push    eax
.text:00002BCF                 call    _bignum_bitcount
.text:00002BD4                 add     esp, 4
.text:00002BD7                 add     eax, 7
.text:00002BDA                 cdq
.text:00002BDB                 and     edx, 7
.text:00002BDE                 add     eax, edx
.text:00002BE0                 sar     eax, 3
.text:00002BE3                 mov     [ebp+var_2C], eax
.text:00002BE6                 mov     ecx, [ebp+var_2C]
.text:00002BE9                 sub     ecx, 1
.text:00002BEC                 push    ecx
.text:00002BED                 mov     edx, [ebp+var_10]
.text:00002BF0                 push    edx
.text:00002BF1                 call    _bignum_byte
.text:00002BF6                 add     esp, 8
.text:00002BF9                 test    eax, eax
.text:00002BFB                 jz      short loc_2C04
.text:00002BFD                 mov     [ebp+var_38], 0
.text:00002C04
.text:00002C04 loc_2C04:                               ; CODE XREF: _rsa2_verifysig+EBj
.text:00002C04                 mov     eax, [ebp+var_2C]
.text:00002C07                 sub     eax, 2
.text:00002C0A                 push    eax
.text:00002C0B                 mov     ecx, [ebp+var_10]
.text:00002C0E                 push    ecx
.text:00002C0F                 call    _bignum_byte
.text:00002C14                 add     esp, 8
.text:00002C17                 cmp     eax, 1
.text:00002C1A                 jz      short loc_2C23
.text:00002C1C                 mov     [ebp+var_38], 0
.text:00002C23
.text:00002C23 loc_2C23:                               ; CODE XREF: _rsa2_verifysig+10Aj
.text:00002C23                 mov     edx, [ebp+var_2C]
.text:00002C26                 sub     edx, 3
.text:00002C29                 mov     [ebp+var_30], edx
.text:00002C2C                 jmp     short loc_2C37
.text:00002C2E ; ---------------------------------------------------------------------------
.text:00002C2E
.text:00002C2E loc_2C2E:                               ; CODE XREF: _rsa2_verifysig:loc_2C5Bj
.text:00002C2E                 mov     eax, [ebp+var_30]
.text:00002C31                 sub     eax, 1
.text:00002C34                 mov     [ebp+var_30], eax
.text:00002C37
.text:00002C37 loc_2C37:                               ; CODE XREF: _rsa2_verifysig+11Cj
.text:00002C37                 cmp     [ebp+var_30], 24h ; '$'
.text:00002C3B                 jl      short loc_2C5D
.text:00002C3D                 mov     ecx, [ebp+var_30]
.text:00002C40                 push    ecx
.text:00002C41                 mov     edx, [ebp+var_10]
.text:00002C44                 push    edx
.text:00002C45                 call    _bignum_byte
.text:00002C4A                 add     esp, 8
.text:00002C4D                 cmp     eax, 0FFh
.text:00002C52                 jz      short loc_2C5B
.text:00002C54                 mov     [ebp+var_38], 0
.text:00002C5B
.text:00002C5B loc_2C5B:                               ; CODE XREF: _rsa2_verifysig+142j
.text:00002C5B                 jmp     short loc_2C2E
.text:00002C5D ; ---------------------------------------------------------------------------
.text:00002C5D
.text:00002C5D loc_2C5D:                               ; CODE XREF: _rsa2_verifysig+12Bj
.text:00002C5D                 mov     [ebp+var_30], 23h ; '#'
.text:00002C64                 mov     [ebp+var_34], 0
.text:00002C6B                 jmp     short loc_2C7F
.text:00002C6D ; ---------------------------------------------------------------------------
.text:00002C6D
.text:00002C6D loc_2C6D:                               ; CODE XREF: _rsa2_verifysig:loc_2CAAj
.text:00002C6D                 mov     eax, [ebp+var_30]
.text:00002C70                 sub     eax, 1
.text:00002C73                 mov     [ebp+var_30], eax
.text:00002C76                 mov     ecx, [ebp+var_34]
.text:00002C79                 add     ecx, 1
.text:00002C7C                 mov     [ebp+var_34], ecx
.text:00002C7F
.text:00002C7F loc_2C7F:                               ; CODE XREF: _rsa2_verifysig+15Bj
.text:00002C7F                 cmp     [ebp+var_30], 14h
.text:00002C83                 jl      short loc_2CAC
.text:00002C85                 mov     edx, [ebp+var_30]
.text:00002C88                 push    edx
.text:00002C89                 mov     eax, [ebp+var_10]
.text:00002C8C                 push    eax
.text:00002C8D                 call    _bignum_byte
.text:00002C92                 add     esp, 8
.text:00002C95                 mov     ecx, [ebp+var_34]
.text:00002C98                 movzx   edx, ds:_asn1_weird_stuff[ecx]
.text:00002C9F                 cmp     eax, edx
.text:00002CA1                 jz      short loc_2CAA
.text:00002CA3                 mov     [ebp+var_38], 0
.text:00002CAA
.text:00002CAA loc_2CAA:                               ; CODE XREF: _rsa2_verifysig+191j
.text:00002CAA                 jmp     short loc_2C6D
.text:00002CAC ; ---------------------------------------------------------------------------
.text:00002CAC
.text:00002CAC loc_2CAC:                               ; CODE XREF: _rsa2_verifysig+173j
.text:00002CAC                 lea     eax, [ebp+var_50]
.text:00002CAF                 push    eax
.text:00002CB0                 mov     ecx, [ebp+arg_10]
.text:00002CB3                 push    ecx
.text:00002CB4                 mov     edx, [ebp+arg_C]
.text:00002CB7                 push    edx
.text:00002CB8                 call    _SHA_Simple
.text:00002CBD                 add     esp, 0Ch
.text:00002CC0                 mov     [ebp+var_30], 13h
.text:00002CC7                 mov     [ebp+var_34], 0
.text:00002CCE                 jmp     short loc_2CE2
.text:00002CD0 ; ---------------------------------------------------------------------------
.text:00002CD0
.text:00002CD0 loc_2CD0:                               ; CODE XREF: _rsa2_verifysig:loc_2D0Bj
.text:00002CD0                 mov     eax, [ebp+var_30]
.text:00002CD3                 sub     eax, 1
.text:00002CD6                 mov     [ebp+var_30], eax
.text:00002CD9                 mov     ecx, [ebp+var_34]
.text:00002CDC                 add     ecx, 1
.text:00002CDF                 mov     [ebp+var_34], ecx
.text:00002CE2
.text:00002CE2 loc_2CE2:                               ; CODE XREF: _rsa2_verifysig+1BEj
.text:00002CE2                 cmp     [ebp+var_30], 0
.text:00002CE6                 jl      short loc_2D0D
.text:00002CE8                 mov     edx, [ebp+var_30]
.text:00002CEB                 push    edx
.text:00002CEC                 mov     eax, [ebp+var_10]
.text:00002CEF                 push    eax
.text:00002CF0                 call    _bignum_byte
.text:00002CF5                 add     esp, 8
.text:00002CF8                 mov     ecx, [ebp+var_34]
.text:00002CFB                 movzx   edx, [ebp+ecx+var_50]
.text:00002D00                 cmp     eax, edx
.text:00002D02                 jz      short loc_2D0B
.text:00002D04                 mov     [ebp+var_38], 0
.text:00002D0B
.text:00002D0B loc_2D0B:                               ; CODE XREF: _rsa2_verifysig+1F2j
.text:00002D0B                 jmp     short loc_2CD0
.text:00002D0D ; ---------------------------------------------------------------------------
.text:00002D0D
.text:00002D0D loc_2D0D:                               ; CODE XREF: _rsa2_verifysig+1D6j
.text:00002D0D                 mov     eax, [ebp+var_10]
.text:00002D10                 push    eax
.text:00002D11                 call    _freebn
.text:00002D16                 add     esp, 4
.text:00002D19                 mov     eax, [ebp+var_38]
.text:00002D1C
.text:00002D1C loc_2D1C:                               ; CODE XREF: _rsa2_verifysig+63j
.text:00002D1C                                         ; _rsa2_verifysig+83j
.text:00002D1C                 push    edx
.text:00002D1D                 mov     ecx, ebp
.text:00002D1F                 push    eax
.text:00002D20                 lea     edx, $LN24
.text:00002D26                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002D2B                 pop     eax
.text:00002D2C                 pop     edx
.text:00002D2D                 pop     edi
.text:00002D2E                 mov     ecx, [ebp+var_4]
.text:00002D31                 xor     ecx, ebp
.text:00002D33                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002D38                 add     esp, 54h
.text:00002D3B                 cmp     ebp, esp
.text:00002D3D                 call    __RTC_CheckEsp
.text:00002D42                 mov     esp, ebp
.text:00002D44                 pop     ebp
.text:00002D45                 retn
.text:00002D45 _rsa2_verifysig endp
.text:00002D45
.text:00002D45 ; ---------------------------------------------------------------------------
.text:00002D46                 align 4
.text:00002D48 $LN24           dd 3                    ; DATA XREF: _rsa2_verifysig+210o
.text:00002D4C                 dd offset $LN23
.text:00002D50 $LN23           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002D4Co
.text:00002D58                 dd offset $LN20_0
.text:00002D5C                 dd 0FFFFFFDCh, 4
.text:00002D64                 dd offset $LN21         ; "slen"
.text:00002D68                 dd 0FFFFFFB0h, 14h
.text:00002D70                 dd offset $LN22         ; "hash"
.text:00002D74 $LN22           db 'hash',0             ; DATA XREF: .text:00002D70o
.text:00002D79 $LN21           db 'slen',0             ; DATA XREF: .text:00002D64o
.text:00002D7E ; ---------------------------------------------------------------------------
.text:00002D7E
.text:00002D7E $LN20_0:                                ; DATA XREF: .text:00002D58o
.text:00002D7E                 jo      short $+2
.text:00002D80
.text:00002D80 ; =============== S U B R O U T I N E =======================================
.text:00002D80
.text:00002D80 ; Attributes: bp-based frame
.text:00002D80
.text:00002D80 _rsa2_sign      proc near               ; CODE XREF: .text:$LN20_0j
.text:00002D80                                         ; DATA XREF: .rdata:00000300o
.text:00002D80
.text:00002D80 var_3C          = dword ptr -3Ch
.text:00002D80 var_38          = dword ptr -38h
.text:00002D80 var_34          = dword ptr -34h
.text:00002D80 var_30          = dword ptr -30h
.text:00002D80 var_28          = byte ptr -28h
.text:00002D80 var_10          = dword ptr -10h
.text:00002D80 var_C           = dword ptr -0Ch
.text:00002D80 var_8           = dword ptr -8
.text:00002D80 var_4           = dword ptr -4
.text:00002D80 arg_0           = dword ptr  8
.text:00002D80 arg_4           = dword ptr  0Ch
.text:00002D80 arg_8           = dword ptr  10h
.text:00002D80 arg_C           = dword ptr  14h
.text:00002D80
.text:00002D80                 push    ebp
.text:00002D81                 mov     ebp, esp
.text:00002D83                 sub     esp, 3Ch
.text:00002D86                 push    edi
.text:00002D87                 lea     edi, [ebp+var_3C]
.text:00002D8A                 mov     ecx, 0Fh
.text:00002D8F                 mov     eax, 0CCCCCCCCh
.text:00002D94                 rep stosd
.text:00002D96                 mov     eax, dword ptr ds:___security_cookie
.text:00002D9B                 xor     eax, ebp
.text:00002D9D                 mov     [ebp+var_4], eax
.text:00002DA0                 mov     eax, [ebp+arg_0]
.text:00002DA3                 mov     [ebp+var_8], eax
.text:00002DA6                 lea     ecx, [ebp+var_28]
.text:00002DA9                 push    ecx
.text:00002DAA                 mov     edx, [ebp+arg_8]
.text:00002DAD                 push    edx
.text:00002DAE                 mov     eax, [ebp+arg_4]
.text:00002DB1                 push    eax
.text:00002DB2                 call    _SHA_Simple
.text:00002DB7                 add     esp, 0Ch
.text:00002DBA                 mov     ecx, [ebp+var_8]
.text:00002DBD                 mov     edx, [ecx+8]
.text:00002DC0                 push    edx
.text:00002DC1                 call    _bignum_bitcount
.text:00002DC6                 add     esp, 4
.text:00002DC9                 sub     eax, 1
.text:00002DCC                 cdq
.text:00002DCD                 and     edx, 7
.text:00002DD0                 add     eax, edx
.text:00002DD2                 sar     eax, 3
.text:00002DD5                 mov     [ebp+var_10], eax
.text:00002DD8                 mov     eax, [ebp+var_10]
.text:00002DDB                 sub     eax, 24h ; '$'
.text:00002DDE                 cmp     eax, 1
.text:00002DE1                 jge     short loc_2DFA
.text:00002DE3                 push    38Ah
.text:00002DE8                 push    offset $SG7767  ; "..\\..\\..\\sshrsa.c"
.text:00002DED                 push    offset $SG7768  ; "1 <= nbytes - 20 - ASN1_LEN"
.text:00002DF2                 call    __wassert
.text:00002DF7 ; ---------------------------------------------------------------------------
.text:00002DF7                 add     esp, 0Ch
.text:00002DFA
.text:00002DFA loc_2DFA:                               ; CODE XREF: _rsa2_sign+61j
.text:00002DFA                 push    1
.text:00002DFC                 mov     edx, [ebp+var_10]
.text:00002DFF                 push    edx
.text:00002E00                 call    _safemalloc
.text:00002E05                 add     esp, 8
.text:00002E08                 mov     [ebp+var_C], eax
.text:00002E0B                 mov     eax, [ebp+var_C]
.text:00002E0E                 mov     byte ptr [eax], 1
.text:00002E11                 mov     [ebp+var_38], 1
.text:00002E18                 jmp     short loc_2E23
.text:00002E1A ; ---------------------------------------------------------------------------
.text:00002E1A
.text:00002E1A loc_2E1A:                               ; CODE XREF: _rsa2_sign+B7j
.text:00002E1A                 mov     ecx, [ebp+var_38]
.text:00002E1D                 add     ecx, 1
.text:00002E20                 mov     [ebp+var_38], ecx
.text:00002E23
.text:00002E23 loc_2E23:                               ; CODE XREF: _rsa2_sign+98j
.text:00002E23                 mov     edx, [ebp+var_10]
.text:00002E26                 sub     edx, 24h ; '$'
.text:00002E29                 cmp     [ebp+var_38], edx
.text:00002E2C                 jge     short loc_2E39
.text:00002E2E                 mov     eax, [ebp+var_C]
.text:00002E31                 add     eax, [ebp+var_38]
.text:00002E34                 mov     byte ptr [eax], 0FFh
.text:00002E37                 jmp     short loc_2E1A
.text:00002E39 ; ---------------------------------------------------------------------------
.text:00002E39
.text:00002E39 loc_2E39:                               ; CODE XREF: _rsa2_sign+ACj
.text:00002E39                 mov     ecx, [ebp+var_10]
.text:00002E3C                 sub     ecx, 24h ; '$'
.text:00002E3F                 mov     [ebp+var_38], ecx
.text:00002E42                 mov     [ebp+var_3C], 0
.text:00002E49                 jmp     short loc_2E5D
.text:00002E4B ; ---------------------------------------------------------------------------
.text:00002E4B
.text:00002E4B loc_2E4B:                               ; CODE XREF: _rsa2_sign+F9j
.text:00002E4B                 mov     edx, [ebp+var_38]
.text:00002E4E                 add     edx, 1
.text:00002E51                 mov     [ebp+var_38], edx
.text:00002E54                 mov     eax, [ebp+var_3C]
.text:00002E57                 add     eax, 1
.text:00002E5A                 mov     [ebp+var_3C], eax
.text:00002E5D
.text:00002E5D loc_2E5D:                               ; CODE XREF: _rsa2_sign+C9j
.text:00002E5D                 mov     ecx, [ebp+var_10]
.text:00002E60                 sub     ecx, 14h
.text:00002E63                 cmp     [ebp+var_38], ecx
.text:00002E66                 jge     short loc_2E7B
.text:00002E68                 mov     edx, [ebp+var_C]
.text:00002E6B                 add     edx, [ebp+var_38]
.text:00002E6E                 mov     eax, [ebp+var_3C]
.text:00002E71                 mov     cl, ds:_asn1_weird_stuff[eax]
.text:00002E77                 mov     [edx], cl
.text:00002E79                 jmp     short loc_2E4B
.text:00002E7B ; ---------------------------------------------------------------------------
.text:00002E7B
.text:00002E7B loc_2E7B:                               ; CODE XREF: _rsa2_sign+E6j
.text:00002E7B                 mov     edx, [ebp+var_10]
.text:00002E7E                 sub     edx, 14h
.text:00002E81                 mov     [ebp+var_38], edx
.text:00002E84                 mov     [ebp+var_3C], 0
.text:00002E8B                 jmp     short loc_2E9F
.text:00002E8D ; ---------------------------------------------------------------------------
.text:00002E8D
.text:00002E8D loc_2E8D:                               ; CODE XREF: _rsa2_sign+136j
.text:00002E8D                 mov     eax, [ebp+var_38]
.text:00002E90                 add     eax, 1
.text:00002E93                 mov     [ebp+var_38], eax
.text:00002E96                 mov     ecx, [ebp+var_3C]
.text:00002E99                 add     ecx, 1
.text:00002E9C                 mov     [ebp+var_3C], ecx
.text:00002E9F
.text:00002E9F loc_2E9F:                               ; CODE XREF: _rsa2_sign+10Bj
.text:00002E9F                 mov     edx, [ebp+var_38]
.text:00002EA2                 cmp     edx, [ebp+var_10]
.text:00002EA5                 jge     short loc_2EB8
.text:00002EA7                 mov     eax, [ebp+var_C]
.text:00002EAA                 add     eax, [ebp+var_38]
.text:00002EAD                 mov     ecx, [ebp+var_3C]
.text:00002EB0                 mov     dl, [ebp+ecx+var_28]
.text:00002EB4                 mov     [eax], dl
.text:00002EB6                 jmp     short loc_2E8D
.text:00002EB8 ; ---------------------------------------------------------------------------
.text:00002EB8
.text:00002EB8 loc_2EB8:                               ; CODE XREF: _rsa2_sign+125j
.text:00002EB8                 mov     eax, [ebp+var_10]
.text:00002EBB                 push    eax
.text:00002EBC                 mov     ecx, [ebp+var_C]
.text:00002EBF                 push    ecx
.text:00002EC0                 call    _bignum_from_bytes
.text:00002EC5                 add     esp, 8
.text:00002EC8                 mov     [ebp+var_30], eax
.text:00002ECB                 mov     edx, [ebp+var_C]
.text:00002ECE                 push    edx
.text:00002ECF                 call    _safefree
.text:00002ED4                 add     esp, 4
.text:00002ED7                 mov     eax, [ebp+var_8]
.text:00002EDA                 push    eax
.text:00002EDB                 mov     ecx, [ebp+var_30]
.text:00002EDE                 push    ecx
.text:00002EDF                 call    _rsa_privkey_op
.text:00002EE4                 add     esp, 8
.text:00002EE7                 mov     [ebp+var_34], eax
.text:00002EEA                 mov     edx, [ebp+var_30]
.text:00002EED                 push    edx
.text:00002EEE                 call    _freebn
.text:00002EF3                 add     esp, 4
.text:00002EF6                 mov     eax, [ebp+var_34]
.text:00002EF9                 push    eax
.text:00002EFA                 call    _bignum_bitcount
.text:00002EFF                 add     esp, 4
.text:00002F02                 add     eax, 7
.text:00002F05                 cdq
.text:00002F06                 and     edx, 7
.text:00002F09                 add     eax, edx
.text:00002F0B                 sar     eax, 3
.text:00002F0E                 mov     [ebp+var_10], eax
.text:00002F11                 push    1
.text:00002F13                 mov     ecx, [ebp+var_10]
.text:00002F16                 add     ecx, 0Fh
.text:00002F19                 push    ecx
.text:00002F1A                 call    _safemalloc
.text:00002F1F                 add     esp, 8
.text:00002F22                 mov     [ebp+var_C], eax
.text:00002F25                 mov     edx, [ebp+var_C]
.text:00002F28                 mov     byte ptr [edx], 0
.text:00002F2B                 mov     eax, [ebp+var_C]
.text:00002F2E                 mov     byte ptr [eax+1], 0
.text:00002F32                 mov     ecx, [ebp+var_C]
.text:00002F35                 mov     byte ptr [ecx+2], 0
.text:00002F39                 mov     edx, [ebp+var_C]
.text:00002F3C                 mov     byte ptr [edx+3], 7
.text:00002F40                 push    7               ; size_t
.text:00002F42                 push    offset $SG7788  ; "ssh-rsa"
.text:00002F47                 mov     eax, [ebp+var_C]
.text:00002F4A                 add     eax, 4
.text:00002F4D                 push    eax             ; void *
.text:00002F4E                 call    _memcpy
.text:00002F53                 add     esp, 0Ch
.text:00002F56                 mov     ecx, [ebp+var_10]
.text:00002F59                 sar     ecx, 18h
.text:00002F5C                 mov     edx, [ebp+var_C]
.text:00002F5F                 mov     [edx+0Bh], cl
.text:00002F62                 mov     eax, [ebp+var_10]
.text:00002F65                 sar     eax, 10h
.text:00002F68                 mov     ecx, [ebp+var_C]
.text:00002F6B                 mov     [ecx+0Ch], al
.text:00002F6E                 mov     edx, [ebp+var_10]
.text:00002F71                 sar     edx, 8
.text:00002F74                 mov     eax, [ebp+var_C]
.text:00002F77                 mov     [eax+0Dh], dl
.text:00002F7A                 mov     ecx, [ebp+var_C]
.text:00002F7D                 mov     dl, byte ptr [ebp+var_10]
.text:00002F80                 mov     [ecx+0Eh], dl
.text:00002F83                 mov     [ebp+var_38], 0
.text:00002F8A                 jmp     short loc_2F95
.text:00002F8C ; ---------------------------------------------------------------------------
.text:00002F8C
.text:00002F8C loc_2F8C:                               ; CODE XREF: _rsa2_sign+23Cj
.text:00002F8C                 mov     eax, [ebp+var_38]
.text:00002F8F                 add     eax, 1
.text:00002F92                 mov     [ebp+var_38], eax
.text:00002F95
.text:00002F95 loc_2F95:                               ; CODE XREF: _rsa2_sign+20Aj
.text:00002F95                 mov     ecx, [ebp+var_38]
.text:00002F98                 cmp     ecx, [ebp+var_10]
.text:00002F9B                 jge     short loc_2FBE
.text:00002F9D                 mov     edx, [ebp+var_10]
.text:00002FA0                 sub     edx, 1
.text:00002FA3                 sub     edx, [ebp+var_38]
.text:00002FA6                 push    edx
.text:00002FA7                 mov     eax, [ebp+var_34]
.text:00002FAA                 push    eax
.text:00002FAB                 call    _bignum_byte
.text:00002FB0                 add     esp, 8
.text:00002FB3                 mov     ecx, [ebp+var_C]
.text:00002FB6                 add     ecx, [ebp+var_38]
.text:00002FB9                 mov     [ecx+0Fh], al
.text:00002FBC                 jmp     short loc_2F8C
.text:00002FBE ; ---------------------------------------------------------------------------
.text:00002FBE
.text:00002FBE loc_2FBE:                               ; CODE XREF: _rsa2_sign+21Bj
.text:00002FBE                 mov     edx, [ebp+var_34]
.text:00002FC1                 push    edx
.text:00002FC2                 call    _freebn
.text:00002FC7                 add     esp, 4
.text:00002FCA                 mov     eax, [ebp+var_10]
.text:00002FCD                 add     eax, 0Fh
.text:00002FD0                 mov     ecx, [ebp+arg_C]
.text:00002FD3                 mov     [ecx], eax
.text:00002FD5                 mov     eax, [ebp+var_C]
.text:00002FD8                 push    edx
.text:00002FD9                 mov     ecx, ebp
.text:00002FDB                 push    eax
.text:00002FDC                 lea     edx, $LN18_1
.text:00002FE2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002FE7                 pop     eax
.text:00002FE8                 pop     edx
.text:00002FE9                 pop     edi
.text:00002FEA                 mov     ecx, [ebp+var_4]
.text:00002FED                 xor     ecx, ebp
.text:00002FEF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002FF4                 add     esp, 3Ch
.text:00002FF7                 cmp     ebp, esp
.text:00002FF9                 call    __RTC_CheckEsp
.text:00002FFE                 mov     esp, ebp
.text:00003000                 pop     ebp
.text:00003001                 retn
.text:00003001 _rsa2_sign      endp
.text:00003001
.text:00003001 ; ---------------------------------------------------------------------------
.text:00003002                 align 4
.text:00003004 $LN18_1         dd 1                    ; DATA XREF: _rsa2_sign+25Co
.text:00003008                 dd offset $LN17_2
.text:0000300C $LN17_2         dd 0FFFFFFD8h, 14h      ; DATA XREF: .text:00003008o
.text:00003014                 dd offset $LN16_2       ; "hash"
.text:00003018 $LN16_2         db 'hash',0             ; DATA XREF: .text:00003014o
.text:0000301D                 align 10h
.text:00003020
.text:00003020 ; =============== S U B R O U T I N E =======================================
.text:00003020
.text:00003020 ; Attributes: bp-based frame
.text:00003020
.text:00003020                 public _ssh_rsakex_newkey
.text:00003020 _ssh_rsakex_newkey proc near
.text:00003020
.text:00003020 arg_0           = dword ptr  8
.text:00003020 arg_4           = dword ptr  0Ch
.text:00003020
.text:00003020                 push    ebp
.text:00003021                 mov     ebp, esp
.text:00003023                 mov     eax, [ebp+arg_4]
.text:00003026                 push    eax
.text:00003027                 mov     ecx, [ebp+arg_0]
.text:0000302A                 push    ecx
.text:0000302B                 call    _rsa2_newkey
.text:00003030                 add     esp, 8
.text:00003033                 cmp     ebp, esp
.text:00003035                 call    __RTC_CheckEsp
.text:0000303A                 pop     ebp
.text:0000303B                 retn
.text:0000303B _ssh_rsakex_newkey endp
.text:0000303B
.text:0000303B ; ---------------------------------------------------------------------------
.text:0000303C                 align 10h
.text:00003040
.text:00003040 ; =============== S U B R O U T I N E =======================================
.text:00003040
.text:00003040 ; Attributes: bp-based frame
.text:00003040
.text:00003040                 public _ssh_rsakex_freekey
.text:00003040 _ssh_rsakex_freekey proc near
.text:00003040
.text:00003040 arg_0           = dword ptr  8
.text:00003040
.text:00003040                 push    ebp
.text:00003041                 mov     ebp, esp
.text:00003043                 mov     eax, [ebp+arg_0]
.text:00003046                 push    eax
.text:00003047                 call    _rsa2_freekey
.text:0000304C                 add     esp, 4
.text:0000304F                 cmp     ebp, esp
.text:00003051                 call    __RTC_CheckEsp
.text:00003056                 pop     ebp
.text:00003057                 retn
.text:00003057 _ssh_rsakex_freekey endp
.text:00003057
.text:00003057 ; ---------------------------------------------------------------------------
.text:00003058                 align 10h
.text:00003060
.text:00003060 ; =============== S U B R O U T I N E =======================================
.text:00003060
.text:00003060 ; Attributes: bp-based frame
.text:00003060
.text:00003060                 public _ssh_rsakex_klen
.text:00003060 _ssh_rsakex_klen proc near
.text:00003060
.text:00003060 var_4           = dword ptr -4
.text:00003060 arg_0           = dword ptr  8
.text:00003060
.text:00003060                 push    ebp
.text:00003061                 mov     ebp, esp
.text:00003063                 push    ecx
.text:00003064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000306B                 mov     eax, [ebp+arg_0]
.text:0000306E                 mov     [ebp+var_4], eax
.text:00003071                 mov     ecx, [ebp+var_4]
.text:00003074                 mov     edx, [ecx+8]
.text:00003077                 push    edx
.text:00003078                 call    _bignum_bitcount
.text:0000307D                 add     esp, 4
.text:00003080                 add     esp, 4
.text:00003083                 cmp     ebp, esp
.text:00003085                 call    __RTC_CheckEsp
.text:0000308A                 mov     esp, ebp
.text:0000308C                 pop     ebp
.text:0000308D                 retn
.text:0000308D _ssh_rsakex_klen endp
.text:0000308D
.text:0000308D ; ---------------------------------------------------------------------------
.text:0000308E                 align 10h
.text:00003090
.text:00003090 ; =============== S U B R O U T I N E =======================================
.text:00003090
.text:00003090 ; Attributes: bp-based frame
.text:00003090
.text:00003090 ; int __cdecl ssh_rsakex_encrypt(int, void *, size_t, int, int, int)
.text:00003090                 public _ssh_rsakex_encrypt
.text:00003090 _ssh_rsakex_encrypt proc near
.text:00003090
.text:00003090 var_20          = dword ptr -20h
.text:00003090 var_1C          = dword ptr -1Ch
.text:00003090 var_18          = dword ptr -18h
.text:00003090 var_14          = dword ptr -14h
.text:00003090 var_10          = dword ptr -10h
.text:00003090 var_C           = dword ptr -0Ch
.text:00003090 var_8           = dword ptr -8
.text:00003090 var_4           = dword ptr -4
.text:00003090 arg_0           = dword ptr  8
.text:00003090 arg_4           = dword ptr  0Ch
.text:00003090 arg_8           = dword ptr  10h
.text:00003090 arg_C           = dword ptr  14h
.text:00003090 arg_10          = dword ptr  18h
.text:00003090 arg_14          = dword ptr  1Ch
.text:00003090
.text:00003090                 push    ebp
.text:00003091                 mov     ebp, esp
.text:00003093                 sub     esp, 20h
.text:00003096                 push    esi
.text:00003097                 push    edi
.text:00003098                 mov     eax, 0CCCCCCCCh
.text:0000309D                 mov     [ebp+var_20], eax
.text:000030A0                 mov     [ebp+var_1C], eax
.text:000030A3                 mov     [ebp+var_18], eax
.text:000030A6                 mov     [ebp+var_14], eax
.text:000030A9                 mov     [ebp+var_10], eax
.text:000030AC                 mov     [ebp+var_C], eax
.text:000030AF                 mov     [ebp+var_8], eax
.text:000030B2                 mov     [ebp+var_4], eax
.text:000030B5                 mov     eax, [ebp+arg_14]
.text:000030B8                 mov     [ebp+var_C], eax
.text:000030BB                 mov     ecx, [ebp+arg_0]
.text:000030BE                 mov     edx, [ecx+0Ch]
.text:000030C1                 mov     [ebp+var_1C], edx
.text:000030C4                 mov     eax, [ebp+var_C]
.text:000030C7                 mov     ecx, [eax+8]
.text:000030CA                 push    ecx
.text:000030CB                 call    _bignum_bitcount
.text:000030D0                 add     esp, 4
.text:000030D3                 add     eax, 7
.text:000030D6                 cdq
.text:000030D7                 and     edx, 7
.text:000030DA                 add     eax, edx
.text:000030DC                 sar     eax, 3
.text:000030DF                 mov     [ebp+var_10], eax
.text:000030E2                 cmp     [ebp+arg_8], 0
.text:000030E6                 jle     short loc_30FA
.text:000030E8                 mov     edx, [ebp+var_1C]
.text:000030EB                 shl     edx, 1
.text:000030ED                 mov     eax, [ebp+var_10]
.text:000030F0                 sub     eax, edx
.text:000030F2                 sub     eax, 2
.text:000030F5                 cmp     [ebp+arg_8], eax
.text:000030F8                 jle     short loc_3111
.text:000030FA
.text:000030FA loc_30FA:                               ; CODE XREF: _ssh_rsakex_encrypt+56j
.text:000030FA                 push    40Eh
.text:000030FF                 push    offset $SG7866  ; "..\\..\\..\\sshrsa.c"
.text:00003104                 push    offset $SG7867  ; "inlen > 0 && inlen <= k - 2*HLEN - 2"
.text:00003109                 call    __wassert
.text:0000310E ; ---------------------------------------------------------------------------
.text:0000310E                 add     esp, 0Ch
.text:00003111
.text:00003111 loc_3111:                               ; CODE XREF: _ssh_rsakex_encrypt+68j
.text:00003111                 mov     edx, [ebp+arg_10]
.text:00003114                 cmp     edx, [ebp+var_10]
.text:00003117                 jz      short loc_3130
.text:00003119                 push    411h
.text:0000311E                 push    offset $SG7869  ; "..\\..\\..\\sshrsa.c"
.text:00003123                 push    offset $SG7870  ; "outlen == k"
.text:00003128                 call    __wassert
.text:0000312D ; ---------------------------------------------------------------------------
.text:0000312D                 add     esp, 0Ch
.text:00003130
.text:00003130 loc_3130:                               ; CODE XREF: _ssh_rsakex_encrypt+87j
.text:00003130                 mov     ecx, [ebp+arg_C]
.text:00003133                 mov     byte ptr [ecx], 0
.text:00003136                 mov     [ebp+var_14], 0
.text:0000313D                 jmp     short loc_3148
.text:0000313F ; ---------------------------------------------------------------------------
.text:0000313F
.text:0000313F loc_313F:                               ; CODE XREF: _ssh_rsakex_encrypt+CEj
.text:0000313F                 mov     edx, [ebp+var_14]
.text:00003142                 add     edx, 1
.text:00003145                 mov     [ebp+var_14], edx
.text:00003148
.text:00003148 loc_3148:                               ; CODE XREF: _ssh_rsakex_encrypt+ADj
.text:00003148                 mov     eax, [ebp+var_14]
.text:0000314B                 cmp     eax, [ebp+var_1C]
.text:0000314E                 jge     short loc_3160
.text:00003150                 call    _random_byte
.text:00003155                 mov     ecx, [ebp+arg_C]
.text:00003158                 add     ecx, [ebp+var_14]
.text:0000315B                 mov     [ecx+1], al
.text:0000315E                 jmp     short loc_313F
.text:00003160 ; ---------------------------------------------------------------------------
.text:00003160
.text:00003160 loc_3160:                               ; CODE XREF: _ssh_rsakex_encrypt+BEj
.text:00003160                 mov     edx, [ebp+var_1C]
.text:00003163                 mov     eax, [ebp+arg_C]
.text:00003166                 lea     ecx, [eax+edx+1]
.text:0000316A                 mov     esi, esp
.text:0000316C                 push    ecx
.text:0000316D                 mov     edx, [ebp+arg_0]
.text:00003170                 mov     edi, esp
.text:00003172                 mov     eax, [edx]
.text:00003174                 call    eax
.text:00003176                 cmp     edi, esp
.text:00003178                 call    __RTC_CheckEsp
.text:0000317D                 push    eax
.text:0000317E                 mov     ecx, [ebp+arg_0]
.text:00003181                 mov     edx, [ecx+8]
.text:00003184                 call    edx
.text:00003186                 add     esp, 8
.text:00003189                 cmp     esi, esp
.text:0000318B                 call    __RTC_CheckEsp
.text:00003190                 mov     eax, [ebp+var_1C]
.text:00003193                 lea     ecx, [eax+eax+1]
.text:00003197                 mov     edx, [ebp+arg_10]
.text:0000319A                 sub     edx, ecx
.text:0000319C                 push    edx             ; size_t
.text:0000319D                 push    0               ; int
.text:0000319F                 mov     eax, [ebp+var_1C]
.text:000031A2                 mov     ecx, [ebp+arg_C]
.text:000031A5                 lea     edx, [ecx+eax*2+1]
.text:000031A9                 push    edx             ; void *
.text:000031AA                 call    _memset
.text:000031AF                 add     esp, 0Ch
.text:000031B2                 mov     eax, [ebp+arg_10]
.text:000031B5                 sub     eax, [ebp+arg_8]
.text:000031B8                 mov     ecx, [ebp+arg_C]
.text:000031BB                 mov     byte ptr [ecx+eax-1], 1
.text:000031C0                 mov     edx, [ebp+arg_8]
.text:000031C3                 push    edx             ; size_t
.text:000031C4                 mov     eax, [ebp+arg_4]
.text:000031C7                 push    eax             ; void *
.text:000031C8                 mov     ecx, [ebp+arg_C]
.text:000031CB                 add     ecx, [ebp+arg_10]
.text:000031CE                 sub     ecx, [ebp+arg_8]
.text:000031D1                 push    ecx             ; void *
.text:000031D2                 call    _memcpy
.text:000031D7                 add     esp, 0Ch
.text:000031DA                 mov     edx, [ebp+arg_10]
.text:000031DD                 sub     edx, [ebp+var_1C]
.text:000031E0                 sub     edx, 1
.text:000031E3                 push    edx
.text:000031E4                 mov     eax, [ebp+var_1C]
.text:000031E7                 mov     ecx, [ebp+arg_C]
.text:000031EA                 lea     edx, [ecx+eax+1]
.text:000031EE                 push    edx
.text:000031EF                 mov     eax, [ebp+var_1C]
.text:000031F2                 push    eax
.text:000031F3                 mov     ecx, [ebp+arg_C]
.text:000031F6                 add     ecx, 1
.text:000031F9                 push    ecx
.text:000031FA                 mov     edx, [ebp+arg_0]
.text:000031FD                 push    edx
.text:000031FE                 call    _oaep_mask
.text:00003203                 add     esp, 14h
.text:00003206                 mov     eax, [ebp+var_1C]
.text:00003209                 push    eax
.text:0000320A                 mov     ecx, [ebp+arg_C]
.text:0000320D                 add     ecx, 1
.text:00003210                 push    ecx
.text:00003211                 mov     edx, [ebp+arg_10]
.text:00003214                 sub     edx, [ebp+var_1C]
.text:00003217                 sub     edx, 1
.text:0000321A                 push    edx
.text:0000321B                 mov     eax, [ebp+var_1C]
.text:0000321E                 mov     ecx, [ebp+arg_C]
.text:00003221                 lea     edx, [ecx+eax+1]
.text:00003225                 push    edx
.text:00003226                 mov     eax, [ebp+arg_0]
.text:00003229                 push    eax
.text:0000322A                 call    _oaep_mask
.text:0000322F                 add     esp, 14h
.text:00003232                 mov     ecx, [ebp+arg_10]
.text:00003235                 push    ecx
.text:00003236                 mov     edx, [ebp+arg_C]
.text:00003239                 push    edx
.text:0000323A                 call    _bignum_from_bytes
.text:0000323F                 add     esp, 8
.text:00003242                 mov     [ebp+var_4], eax
.text:00003245                 mov     eax, [ebp+var_C]
.text:00003248                 mov     ecx, [eax+8]
.text:0000324B                 push    ecx
.text:0000324C                 mov     edx, [ebp+var_C]
.text:0000324F                 mov     eax, [edx+0Ch]
.text:00003252                 push    eax
.text:00003253                 mov     ecx, [ebp+var_4]
.text:00003256                 push    ecx
.text:00003257                 call    _modpow
.text:0000325C                 add     esp, 0Ch
.text:0000325F                 mov     [ebp+var_8], eax
.text:00003262                 mov     edx, [ebp+arg_C]
.text:00003265                 mov     [ebp+var_18], edx
.text:00003268                 mov     eax, [ebp+arg_10]
.text:0000326B                 mov     [ebp+var_14], eax
.text:0000326E
.text:0000326E loc_326E:                               ; CODE XREF: _ssh_rsakex_encrypt+211j
.text:0000326E                 mov     ecx, [ebp+var_14]
.text:00003271                 mov     [ebp+var_20], ecx
.text:00003274                 mov     edx, [ebp+var_14]
.text:00003277                 sub     edx, 1
.text:0000327A                 mov     [ebp+var_14], edx
.text:0000327D                 cmp     [ebp+var_20], 0
.text:00003281                 jz      short loc_32A3
.text:00003283                 mov     eax, [ebp+var_14]
.text:00003286                 push    eax
.text:00003287                 mov     ecx, [ebp+var_8]
.text:0000328A                 push    ecx
.text:0000328B                 call    _bignum_byte
.text:00003290                 add     esp, 8
.text:00003293                 mov     edx, [ebp+var_18]
.text:00003296                 mov     [edx], al
.text:00003298                 mov     eax, [ebp+var_18]
.text:0000329B                 add     eax, 1
.text:0000329E                 mov     [ebp+var_18], eax
.text:000032A1                 jmp     short loc_326E
.text:000032A3 ; ---------------------------------------------------------------------------
.text:000032A3
.text:000032A3 loc_32A3:                               ; CODE XREF: _ssh_rsakex_encrypt+1F1j
.text:000032A3                 mov     ecx, [ebp+var_4]
.text:000032A6                 push    ecx
.text:000032A7                 call    _freebn
.text:000032AC                 add     esp, 4
.text:000032AF                 mov     edx, [ebp+var_8]
.text:000032B2                 push    edx
.text:000032B3                 call    _freebn
.text:000032B8                 add     esp, 4
.text:000032BB                 pop     edi
.text:000032BC                 pop     esi
.text:000032BD                 add     esp, 20h
.text:000032C0                 cmp     ebp, esp
.text:000032C2                 call    __RTC_CheckEsp
.text:000032C7                 mov     esp, ebp
.text:000032C9                 pop     ebp
.text:000032CA                 retn
.text:000032CA _ssh_rsakex_encrypt endp
.text:000032CA
.text:000032CA ; ---------------------------------------------------------------------------
.text:000032CB                 align 10h
.text:000032D0
.text:000032D0 ; =============== S U B R O U T I N E =======================================
.text:000032D0
.text:000032D0 ; Attributes: bp-based frame
.text:000032D0
.text:000032D0 _oaep_mask      proc near               ; CODE XREF: _ssh_rsakex_encrypt+16Ep
.text:000032D0                                         ; _ssh_rsakex_encrypt+19Ap
.text:000032D0
.text:000032D0 var_50          = dword ptr -50h
.text:000032D0 var_48          = byte ptr -48h
.text:000032D0 var_20          = byte ptr -20h
.text:000032D0 var_1F          = byte ptr -1Fh
.text:000032D0 var_1E          = byte ptr -1Eh
.text:000032D0 var_1D          = byte ptr -1Dh
.text:000032D0 var_18          = dword ptr -18h
.text:000032D0 var_14          = dword ptr -14h
.text:000032D0 var_10          = dword ptr -10h
.text:000032D0 var_C           = dword ptr -0Ch
.text:000032D0 var_8           = dword ptr -8
.text:000032D0 var_4           = dword ptr -4
.text:000032D0 arg_0           = dword ptr  8
.text:000032D0 arg_4           = dword ptr  0Ch
.text:000032D0 arg_8           = dword ptr  10h
.text:000032D0 arg_C           = dword ptr  14h
.text:000032D0 arg_10          = dword ptr  18h
.text:000032D0
.text:000032D0                 push    ebp
.text:000032D1                 mov     ebp, esp
.text:000032D3                 sub     esp, 50h
.text:000032D6                 push    esi
.text:000032D7                 push    edi
.text:000032D8                 lea     edi, [ebp+var_50]
.text:000032DB                 mov     ecx, 14h
.text:000032E0                 mov     eax, 0CCCCCCCCh
.text:000032E5                 rep stosd
.text:000032E7                 mov     eax, dword ptr ds:___security_cookie
.text:000032EC                 xor     eax, ebp
.text:000032EE                 mov     [ebp+var_4], eax
.text:000032F1                 mov     eax, [ebp+arg_C]
.text:000032F4                 mov     [ebp+var_8], eax
.text:000032F7                 mov     [ebp+var_C], 0
.text:000032FE
.text:000032FE loc_32FE:                               ; CODE XREF: _oaep_mask+15Aj
.text:000032FE                 cmp     [ebp+arg_10], 0
.text:00003302                 jle     loc_342F
.text:00003308                 mov     ecx, [ebp+arg_0]
.text:0000330B                 mov     edx, [ebp+arg_10]
.text:0000330E                 cmp     edx, [ecx+0Ch]
.text:00003311                 jle     short loc_331E
.text:00003313                 mov     eax, [ebp+arg_0]
.text:00003316                 mov     ecx, [eax+0Ch]
.text:00003319                 mov     [ebp+var_50], ecx
.text:0000331C                 jmp     short loc_3324
.text:0000331E ; ---------------------------------------------------------------------------
.text:0000331E
.text:0000331E loc_331E:                               ; CODE XREF: _oaep_mask+41j
.text:0000331E                 mov     edx, [ebp+arg_10]
.text:00003321                 mov     [ebp+var_50], edx
.text:00003324
.text:00003324 loc_3324:                               ; CODE XREF: _oaep_mask+4Cj
.text:00003324                 mov     eax, [ebp+var_50]
.text:00003327                 mov     [ebp+var_14], eax
.text:0000332A                 mov     ecx, [ebp+arg_0]
.text:0000332D                 cmp     dword ptr [ecx+0Ch], 20h ; ' '
.text:00003331                 jle     short loc_334A
.text:00003333                 push    3D5h
.text:00003338                 push    offset $SG7835  ; "..\\..\\..\\sshrsa.c"
.text:0000333D                 push    offset $SG7836  ; "h->hlen <= SSH2_KEX_MAX_HASH_LEN"
.text:00003342                 call    __wassert
.text:00003347 ; ---------------------------------------------------------------------------
.text:00003347                 add     esp, 0Ch
.text:0000334A
.text:0000334A loc_334A:                               ; CODE XREF: _oaep_mask+61j
.text:0000334A                 mov     eax, [ebp+var_C]
.text:0000334D                 shr     eax, 18h
.text:00003350                 mov     [ebp+var_20], al
.text:00003353                 mov     ecx, [ebp+var_C]
.text:00003356                 shr     ecx, 10h
.text:00003359                 mov     [ebp+var_1F], cl
.text:0000335C                 mov     edx, [ebp+var_C]
.text:0000335F                 shr     edx, 8
.text:00003362                 mov     [ebp+var_1E], dl
.text:00003365                 mov     al, byte ptr [ebp+var_C]
.text:00003368                 mov     [ebp+var_1D], al
.text:0000336B                 mov     ecx, [ebp+arg_0]
.text:0000336E                 mov     esi, esp
.text:00003370                 mov     edx, [ecx]
.text:00003372                 call    edx
.text:00003374                 cmp     esi, esp
.text:00003376                 call    __RTC_CheckEsp
.text:0000337B                 mov     [ebp+var_18], eax
.text:0000337E                 mov     esi, esp
.text:00003380                 mov     eax, [ebp+arg_8]
.text:00003383                 push    eax
.text:00003384                 mov     ecx, [ebp+arg_4]
.text:00003387                 push    ecx
.text:00003388                 mov     edx, [ebp+var_18]
.text:0000338B                 push    edx
.text:0000338C                 mov     eax, [ebp+arg_0]
.text:0000338F                 mov     ecx, [eax+4]
.text:00003392                 call    ecx
.text:00003394                 add     esp, 0Ch
.text:00003397                 cmp     esi, esp
.text:00003399                 call    __RTC_CheckEsp
.text:0000339E                 mov     esi, esp
.text:000033A0                 push    4
.text:000033A2                 lea     edx, [ebp+var_20]
.text:000033A5                 push    edx
.text:000033A6                 mov     eax, [ebp+var_18]
.text:000033A9                 push    eax
.text:000033AA                 mov     ecx, [ebp+arg_0]
.text:000033AD                 mov     edx, [ecx+4]
.text:000033B0                 call    edx
.text:000033B2                 add     esp, 0Ch
.text:000033B5                 cmp     esi, esp
.text:000033B7                 call    __RTC_CheckEsp
.text:000033BC                 mov     esi, esp
.text:000033BE                 lea     eax, [ebp+var_48]
.text:000033C1                 push    eax
.text:000033C2                 mov     ecx, [ebp+var_18]
.text:000033C5                 push    ecx
.text:000033C6                 mov     edx, [ebp+arg_0]
.text:000033C9                 mov     eax, [edx+8]
.text:000033CC                 call    eax
.text:000033CE                 add     esp, 8
.text:000033D1                 cmp     esi, esp
.text:000033D3                 call    __RTC_CheckEsp
.text:000033D8                 mov     ecx, [ebp+var_C]
.text:000033DB                 add     ecx, 1
.text:000033DE                 mov     [ebp+var_C], ecx
.text:000033E1                 mov     [ebp+var_10], 0
.text:000033E8                 jmp     short loc_33F3
.text:000033EA ; ---------------------------------------------------------------------------
.text:000033EA
.text:000033EA loc_33EA:                               ; CODE XREF: _oaep_mask+146j
.text:000033EA                 mov     edx, [ebp+var_10]
.text:000033ED                 add     edx, 1
.text:000033F0                 mov     [ebp+var_10], edx
.text:000033F3
.text:000033F3 loc_33F3:                               ; CODE XREF: _oaep_mask+118j
.text:000033F3                 mov     eax, [ebp+var_10]
.text:000033F6                 cmp     eax, [ebp+var_14]
.text:000033F9                 jge     short loc_3418
.text:000033FB                 mov     ecx, [ebp+var_10]
.text:000033FE                 movzx   edx, [ebp+ecx+var_48]
.text:00003403                 mov     eax, [ebp+var_8]
.text:00003406                 add     eax, [ebp+var_10]
.text:00003409                 movzx   ecx, byte ptr [eax]
.text:0000340C                 xor     ecx, edx
.text:0000340E                 mov     edx, [ebp+var_8]
.text:00003411                 add     edx, [ebp+var_10]
.text:00003414                 mov     [edx], cl
.text:00003416                 jmp     short loc_33EA
.text:00003418 ; ---------------------------------------------------------------------------
.text:00003418
.text:00003418 loc_3418:                               ; CODE XREF: _oaep_mask+129j
.text:00003418                 mov     eax, [ebp+var_8]
.text:0000341B                 add     eax, [ebp+var_14]
.text:0000341E                 mov     [ebp+var_8], eax
.text:00003421                 mov     ecx, [ebp+arg_10]
.text:00003424                 sub     ecx, [ebp+var_14]
.text:00003427                 mov     [ebp+arg_10], ecx
.text:0000342A                 jmp     loc_32FE
.text:0000342F ; ---------------------------------------------------------------------------
.text:0000342F
.text:0000342F loc_342F:                               ; CODE XREF: _oaep_mask+32j
.text:0000342F                 push    edx
.text:00003430                 mov     ecx, ebp
.text:00003432                 push    eax
.text:00003433                 lea     edx, $LN14_2
.text:00003439                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000343E                 pop     eax
.text:0000343F                 pop     edx
.text:00003440                 pop     edi
.text:00003441                 pop     esi
.text:00003442                 mov     ecx, [ebp+var_4]
.text:00003445                 xor     ecx, ebp
.text:00003447                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000344C                 add     esp, 50h
.text:0000344F                 cmp     ebp, esp
.text:00003451                 call    __RTC_CheckEsp
.text:00003456                 mov     esp, ebp
.text:00003458                 pop     ebp
.text:00003459                 retn
.text:00003459 _oaep_mask      endp
.text:00003459
.text:00003459 ; ---------------------------------------------------------------------------
.text:0000345A                 align 4
.text:0000345C $LN14_2         dd 2                    ; DATA XREF: _oaep_mask+163o
.text:00003460                 dd offset $LN13_2
.text:00003464 $LN13_2         dd 0FFFFFFE0h, 4        ; DATA XREF: .text:00003460o
.text:0000346C                 dd offset $LN11         ; "counter"
.text:00003470                 dd 0FFFFFFB8h, 20h
.text:00003478                 dd offset $LN12         ; "hash"
.text:0000347C $LN12           db 'hash',0             ; DATA XREF: .text:00003478o
.text:00003481 $LN11           db 'counter',0          ; DATA XREF: .text:0000346Co
.text:00003489                 align 4
.text:00003489 _text           ends
.text:00003489
.rtc$TMZ:0000348C ; ===========================================================================
.rtc$TMZ:0000348C
.rtc$TMZ:0000348C ; Segment type: Pure data
.rtc$TMZ:0000348C ; Segment permissions: Read
.rtc$TMZ:0000348C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000348C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000348C                 ;org 348Ch
.rtc$TMZ:0000348C ; COMDAT (pick any)
.rtc$TMZ:0000348C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000348C _rtc$TMZ        ends
.rtc$TMZ:0000348C
.rtc$IMZ:00003490 ; ===========================================================================
.rtc$IMZ:00003490
.rtc$IMZ:00003490 ; Segment type: Pure data
.rtc$IMZ:00003490 ; Segment permissions: Read
.rtc$IMZ:00003490 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003490                 assume cs:_rtc$IMZ
.rtc$IMZ:00003490                 ;org 3490h
.rtc$IMZ:00003490 ; COMDAT (pick any)
.rtc$IMZ:00003490 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003490 _rtc$IMZ        ends
.rtc$IMZ:00003490
UNDEF:000034A0 ; ===========================================================================
UNDEF:000034A0
UNDEF:000034A0 ; Segment type: Externs
UNDEF:000034A0 ; UNDEF
UNDEF:000034A0                 extrn _ssh_sha256:near  ; DATA XREF: .rdata:00000348o
UNDEF:000034A4                 extrn _ssh_sha1:near    ; DATA XREF: .rdata:00000328o
UNDEF:000034A8                 extrn _bignum_bitcount:near ; CODE XREF: _makekey+123p
UNDEF:000034A8                                         ; _rsa_privkey_op+5Dp ...
UNDEF:000034AC                 extrn _ssh1_read_bignum:near ; CODE XREF: _makekey+B6p
UNDEF:000034AC                                         ; _makekey+105p ...
UNDEF:000034B0                 extrn __RTC_CheckEsp:near ; CODE XREF: _makekey+1C9p
UNDEF:000034B0                                         ; _makeprivate+1Cp ...
UNDEF:000034B4                 extrn __RTC_Shutdown:near
UNDEF:000034B4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000034B8                 extrn __RTC_InitBase:near
UNDEF:000034B8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000034BC                 extrn _freebn:near      ; CODE XREF: _rsaencrypt+124p
UNDEF:000034BC                                         ; _rsaencrypt+130p ...
UNDEF:000034C0                 extrn _bignum_byte:near ; CODE XREF: _rsaencrypt+108p
UNDEF:000034C0                                         ; _sha512_mpint+96p ...
UNDEF:000034C4                 extrn _modpow:near      ; CODE XREF: _rsaencrypt+D1p
UNDEF:000034C4                                         ; _crt_modpow+7Ep ...
UNDEF:000034C8                 extrn _bignum_from_bytes:near ; CODE XREF: _rsaencrypt+B4p
UNDEF:000034C8                                         ; _getmp+4Ap ...
UNDEF:000034CC                 extrn _random_byte:near ; CODE XREF: _rsaencrypt:loc_5ECp
UNDEF:000034CC                                         ; _ssh_rsakex_encrypt+C0p
UNDEF:000034D0 ; void *__cdecl memmove(void *, const void *, size_t)
UNDEF:000034D0                 extrn _memmove:near     ; CODE XREF: _rsaencrypt+44p
UNDEF:000034D4                 extrn _bigmuladd:near   ; CODE XREF: _crt_modpow+10Bp
UNDEF:000034D8                 extrn _bigmul:near      ; CODE XREF: _crt_modpow+F4p
UNDEF:000034D8                                         ; _rsa_verify+2Bp
UNDEF:000034DC                 extrn _bigsub:near      ; CODE XREF: _crt_modpow+E1p
UNDEF:000034E0                 extrn _bigadd:near      ; CODE XREF: _crt_modpow+C2p
UNDEF:000034E4                 extrn _bignum_cmp:near  ; CODE XREF: _crt_modpow+A8p
UNDEF:000034E4                                         ; _rsa_privkey_op+25Bp ...
UNDEF:000034E8                 extrn _bigmod:near      ; CODE XREF: _crt_modpow+54p
UNDEF:000034E8                                         ; _crt_modpow+67p ...
UNDEF:000034EC                 extrn _decbn:near       ; CODE XREF: _crt_modpow+29p
UNDEF:000034EC                                         ; _crt_modpow+44p ...
UNDEF:000034F0                 extrn _copybn:near      ; CODE XREF: _crt_modpow+1Ap
UNDEF:000034F0                                         ; _crt_modpow+35p ...
UNDEF:000034F4                 extrn _modmul:near      ; CODE XREF: _rsa_privkey_op+304p
UNDEF:000034F4                                         ; _rsa_privkey_op+350p ...
UNDEF:000034F8                 extrn _modinv:near      ; CODE XREF: _rsa_privkey_op+29Ap
UNDEF:000034F8                                         ; _rsa_verify+1A6p
UNDEF:000034FC                 extrn _Zero:near        ; DATA XREF: _rsa_privkey_op+250r
UNDEF:00003500                 extrn _bn_restore_invariant:near
UNDEF:00003500                                         ; CODE XREF: _rsa_privkey_op+248p
UNDEF:00003504                 extrn _bignum_set_bit:near ; CODE XREF: _rsa_privkey_op+237p
UNDEF:00003508                 extrn _SHA512_Final:near ; CODE XREF: _rsa_privkey_op+165p
UNDEF:00003508                                         ; _rsa_privkey_op+1C4p
UNDEF:0000350C                 extrn _SHA512_Bytes:near ; CODE XREF: _rsa_privkey_op+121p
UNDEF:0000350C                                         ; _rsa_privkey_op+139p ...
UNDEF:00003510                 extrn _SHA512_Init:near ; CODE XREF: _rsa_privkey_op+10Bp
UNDEF:00003510                                         ; _rsa_privkey_op+183p
UNDEF:00003514                 extrn ___security_cookie:near
UNDEF:00003514                                         ; DATA XREF: _rsa_privkey_op+1Cr
UNDEF:00003514                                         ; _rsa_fingerprint+1Cr ...
UNDEF:00003518 ; __fastcall __security_check_cookie(x)
UNDEF:00003518                 extrn @__security_check_cookie@4:near
UNDEF:00003518                                         ; CODE XREF: _rsa_privkey_op+3B1p
UNDEF:00003518                                         ; _rsa_fingerprint+279p ...
UNDEF:0000351C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000351C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000351C                                         ; CODE XREF: _rsa_privkey_op+3A4p
UNDEF:0000351C                                         ; _sha512_mpint+CDp ...
UNDEF:00003520                 extrn _smemclr:near     ; CODE XREF: _sha512_mpint+BBp
UNDEF:00003524 ; int sprintf(char *, const char *, ...)
UNDEF:00003524                 extrn _sprintf:near     ; CODE XREF: _rsastr_fmt+45p
UNDEF:00003524                                         ; _rsastr_fmt+E8p ...
UNDEF:00003528 ; char *__cdecl strncpy(char *, const char *, size_t)
UNDEF:00003528                 extrn _strncpy:near     ; CODE XREF: _rsa_fingerprint+1E7p
UNDEF:00003528                                         ; _rsa_fingerprint+250p
UNDEF:0000352C ; size_t __cdecl strlen(const char *)
UNDEF:0000352C                 extrn _strlen:near      ; CODE XREF: _rsa_fingerprint+1BEp
UNDEF:0000352C                                         ; _rsa_fingerprint+1FDp ...
UNDEF:00003530                 extrn _MD5Final:near    ; CODE XREF: _rsa_fingerprint+130p
UNDEF:00003530                                         ; _rsa2_fingerprint+1F7p
UNDEF:00003534                 extrn _MD5Update:near   ; CODE XREF: _rsa_fingerprint+A3p
UNDEF:00003534                                         ; _rsa_fingerprint+11Ep ...
UNDEF:00003538                 extrn _ssh1_bignum_length:near
UNDEF:00003538                                         ; CODE XREF: _rsa_fingerprint+39p
UNDEF:00003538                                         ; _rsa_fingerprint+B4p ...
UNDEF:0000353C                 extrn _MD5Init:near     ; CODE XREF: _rsa_fingerprint+2Ap
UNDEF:0000353C                                         ; _rsa2_fingerprint+30p
UNDEF:00003540                 extrn _One:near         ; DATA XREF: _rsa_verify+ACr
UNDEF:00003540                                         ; _rsa_verify+122r ...
UNDEF:00003544                 extrn _ssh1_write_bignum:near
UNDEF:00003544                                         ; CODE XREF: _rsa_public_blob+C5p
UNDEF:00003544                                         ; _rsa_public_blob+E1p
UNDEF:00003548                 extrn _safemalloc:near  ; CODE XREF: _rsa_public_blob+49p
UNDEF:00003548                                         ; _rsa2_newkey+24p ...
UNDEF:0000354C                 extrn _safefree:near    ; CODE XREF: _freersakey+A3p
UNDEF:0000354C                                         ; _rsa2_newkey+6Ep ...
UNDEF:00003550 ; int __cdecl memcmp(const void *, const void *, size_t)
UNDEF:00003550                 extrn _memcmp:near      ; CODE XREF: _rsa2_newkey+5Ep
UNDEF:00003550                                         ; _rsa2_verifysig+55p
UNDEF:00003554                 extrn _toint:near       ; CODE XREF: _getstring+4Cp
UNDEF:00003558                 extrn __wassert:near    ; CODE XREF: _rsa2_public_blob+1CCp
UNDEF:00003558                                         ; _rsa2_private_blob+2A4p ...
UNDEF:0000355C ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:0000355C                 extrn _memcpy:near      ; CODE XREF: _rsa2_public_blob+BBp
UNDEF:0000355C                                         ; _rsa2_sign+1CEp ...
UNDEF:00003560                 extrn _ssh2_bignum_length:near
UNDEF:00003560                                         ; CODE XREF: _rsa2_openssh_fmtkey+34p
UNDEF:00003560                                         ; _rsa2_openssh_fmtkey+45p ...
UNDEF:00003564 ; char *__cdecl strcpy(char *, const char *)
UNDEF:00003564                 extrn _strcpy:near      ; CODE XREF: _rsa2_fingerprint+2D9p
UNDEF:00003568                 extrn _SHA_Simple:near  ; CODE XREF: _rsa2_verifysig+1A8p
UNDEF:00003568                                         ; _rsa2_sign+32p
UNDEF:0000356C ; void *__cdecl memset(void *, int, size_t)
UNDEF:0000356C                 extrn _memset:near      ; CODE XREF: _ssh_rsakex_encrypt+11Ap
UNDEF:0000356C
UNDEF:0000356C
UNDEF:0000356C                 end