.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 283FC00AB8595C017F506EE28AE3C124
.data:00000000 ; Input CRC32 : 2AC628D7
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winhelp.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG85747[]
.data:00000000 $SG85747        db 'putty.hlp',0        ; DATA XREF: _init_help:loc_18Ao
.data:0000000A                 align 4
.data:0000000C ; char _SG85750[]
.data:0000000C $SG85750        dd offset $SG85790+6    ; DATA XREF: _init_help+DEo
.data:0000000C                                         ; "ic[colonpos] != '\\0'"
.data:00000010 ; char _SG85753[]
.data:00000010 $SG85753        db 'putty.cnt',0        ; DATA XREF: _init_help:loc_1F0o
.data:0000001A                 align 4
.data:0000001C ; char _SG85756[]
.data:0000001C $SG85756        dd offset $SG85790+6    ; DATA XREF: _init_help+144o
.data:0000001C                                         ; "ic[colonpos] != '\\0'"
.data:00000020 ; char _SG85758[]
.data:00000020 $SG85758        db 'putty.chm',0        ; DATA XREF: _init_help:loc_24Co
.data:0000002A                 align 4
.data:0000002C ; char _SG85761[]
.data:0000002C $SG85761        dd offset $SG85790+6    ; DATA XREF: _init_help+1A0o
.data:0000002C                                         ; "ic[colonpos] != '\\0'"
.data:00000030 $SG85766        db 'hhctrl.ocx',0       ; DATA XREF: _init_help+1FFo
.data:00000030                                         ; .data:$SG85785o
.data:0000003B                 align 4
.data:0000003C ; CHAR _SG85769[]
.data:0000003C $SG85769        db 'HtmlHelpA',0        ; DATA XREF: _init_help+21Do
.data:00000046                 align 4
.data:00000048 ; char _SG85785[]
.data:00000048 $SG85785        dd offset $SG85766+0Ah  ; DATA XREF: _launch_help+26o
.data:00000048                                         ; ""
.data:0000004C ; wchar_t _SG85789
.data:0000004C $SG85789:                               ; DATA XREF: _launch_help+52o
.data:0000004C                 unicode 0, <..\..\winhelp.c>,0
.data:0000006C ; wchar_t _SG85790
.data:0000006C $SG85790:                               ; DATA XREF: _launch_help+57o
.data:0000006C                                         ; .data:$SG85750o ...
.data:0000006C                 unicode 0, <topic[colonpos] != >
.data:0000006C                 dw 27h
.data:0000006C                 unicode 0, <\0>
.data:0000006C                 dw 27h, 0
.data:0000009C $SG85791        db '%s::/%s.html>main',0 ; DATA XREF: _launch_help+76o
.data:000000AE                 align 10h
.data:000000B0 $SG85795        db 'JI(`',27h,',`%.*s',27h,')',0
.data:000000B0                                         ; DATA XREF: _launch_help+C0o
.data:000000BE                 align 10h
.data:000000BE _data           ends
.data:000000BE
.text:000000C0 ; ===========================================================================
.text:000000C0
.text:000000C0 ; Segment type: Pure code
.text:000000C0 ; Segment permissions: Read/Execute
.text:000000C0 _text           segment para public 'CODE' use32
.text:000000C0                 assume cs:_text
.text:000000C0                 ;org 0C0h
.text:000000C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0                 public _init_help
.text:000000C0 _init_help      proc near
.text:000000C0
.text:000000C0 var_824         = dword ptr -824h
.text:000000C0 hModule         = dword ptr -820h
.text:000000C0 File            = dword ptr -81Ch
.text:000000C0 Dest            = dword ptr -818h
.text:000000C0 var_814         = dword ptr -814h
.text:000000C0 var_810         = dword ptr -810h
.text:000000C0 Filename        = byte ptr -808h
.text:000000C0 var_4           = dword ptr -4
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 sub     esp, 824h
.text:000000C9                 push    esi
.text:000000CA                 push    edi
.text:000000CB                 lea     edi, [ebp+var_824]
.text:000000D1                 mov     ecx, 209h
.text:000000D6                 mov     eax, 0CCCCCCCCh
.text:000000DB                 rep stosd
.text:000000DD                 mov     eax, dword ptr ds:___security_cookie
.text:000000E2                 xor     eax, ebp
.text:000000E4                 mov     [ebp+var_4], eax
.text:000000E7                 mov     esi, esp
.text:000000E9                 push    7FFh            ; nSize
.text:000000EE                 lea     eax, [ebp+Filename]
.text:000000F4                 push    eax             ; lpFilename
.text:000000F5                 push    0               ; hModule
.text:000000F7                 call    dword ptr ds:__imp__GetModuleFileNameA@12 ; GetModuleFileNameA(x,x,x)
.text:000000FD                 cmp     esi, esp
.text:000000FF                 call    __RTC_CheckEsp
.text:00000104                 lea     ecx, [ebp+Filename]
.text:0000010A                 mov     [ebp+Dest], ecx
.text:00000110                 push    5Ch ; '\'       ; Ch
.text:00000112                 lea     edx, [ebp+Filename]
.text:00000118                 push    edx             ; Str
.text:00000119                 call    _strrchr
.text:0000011E                 add     esp, 8
.text:00000121                 mov     [ebp+var_810], eax
.text:00000127                 cmp     [ebp+var_810], 0
.text:0000012E                 jz      short loc_14D
.text:00000130                 mov     eax, [ebp+var_810]
.text:00000136                 cmp     eax, [ebp+Dest]
.text:0000013C                 jb      short loc_14D
.text:0000013E                 mov     ecx, [ebp+var_810]
.text:00000144                 add     ecx, 1
.text:00000147                 mov     [ebp+Dest], ecx
.text:0000014D
.text:0000014D loc_14D:                                ; CODE XREF: _init_help+6Ej
.text:0000014D                                         ; _init_help+7Cj
.text:0000014D                 push    3Ah ; ':'       ; Ch
.text:0000014F                 lea     edx, [ebp+Filename]
.text:00000155                 push    edx             ; Str
.text:00000156                 call    _strrchr
.text:0000015B                 add     esp, 8
.text:0000015E                 mov     [ebp+var_814], eax
.text:00000164                 cmp     [ebp+var_814], 0
.text:0000016B                 jz      short loc_18A
.text:0000016D                 mov     eax, [ebp+var_814]
.text:00000173                 cmp     eax, [ebp+Dest]
.text:00000179                 jb      short loc_18A
.text:0000017B                 mov     ecx, [ebp+var_814]
.text:00000181                 add     ecx, 1
.text:00000184                 mov     [ebp+Dest], ecx
.text:0000018A
.text:0000018A loc_18A:                                ; CODE XREF: _init_help+ABj
.text:0000018A                                         ; _init_help+B9j
.text:0000018A                 push    offset $SG85747 ; "putty.hlp"
.text:0000018F                 mov     edx, [ebp+Dest]
.text:00000195                 push    edx             ; Dest
.text:00000196                 call    _strcpy
.text:0000019B                 add     esp, 8
.text:0000019E                 push    offset $SG85750 ; Mode
.text:000001A3                 lea     eax, [ebp+Filename]
.text:000001A9                 push    eax             ; Filename
.text:000001AA                 call    _fopen
.text:000001AF                 add     esp, 8
.text:000001B2                 mov     [ebp+File], eax
.text:000001B8                 cmp     [ebp+File], 0
.text:000001BF                 jz      short loc_1E6
.text:000001C1                 lea     ecx, [ebp+Filename]
.text:000001C7                 push    ecx
.text:000001C8                 call    _dupstr
.text:000001CD                 add     esp, 4
.text:000001D0                 mov     ds:_help_path, eax
.text:000001D5                 mov     edx, [ebp+File]
.text:000001DB                 push    edx             ; File
.text:000001DC                 call    _fclose
.text:000001E1                 add     esp, 4
.text:000001E4                 jmp     short loc_1F0
.text:000001E6 ; ---------------------------------------------------------------------------
.text:000001E6
.text:000001E6 loc_1E6:                                ; CODE XREF: _init_help+FFj
.text:000001E6                 mov     ds:_help_path, 0
.text:000001F0
.text:000001F0 loc_1F0:                                ; CODE XREF: _init_help+124j
.text:000001F0                 push    offset $SG85753 ; "putty.cnt"
.text:000001F5                 mov     eax, [ebp+Dest]
.text:000001FB                 push    eax             ; Dest
.text:000001FC                 call    _strcpy
.text:00000201                 add     esp, 8
.text:00000204                 push    offset $SG85756 ; Mode
.text:00000209                 lea     ecx, [ebp+Filename]
.text:0000020F                 push    ecx             ; Filename
.text:00000210                 call    _fopen
.text:00000215                 add     esp, 8
.text:00000218                 mov     [ebp+File], eax
.text:0000021E                 cmp     [ebp+File], 0
.text:00000225                 jz      short loc_242
.text:00000227                 mov     ds:_help_has_contents, 1
.text:00000231                 mov     edx, [ebp+File]
.text:00000237                 push    edx             ; File
.text:00000238                 call    _fclose
.text:0000023D                 add     esp, 4
.text:00000240                 jmp     short loc_24C
.text:00000242 ; ---------------------------------------------------------------------------
.text:00000242
.text:00000242 loc_242:                                ; CODE XREF: _init_help+165j
.text:00000242                 mov     ds:_help_has_contents, 0
.text:0000024C
.text:0000024C loc_24C:                                ; CODE XREF: _init_help+180j
.text:0000024C                 push    offset $SG85758 ; "putty.chm"
.text:00000251                 mov     eax, [ebp+Dest]
.text:00000257                 push    eax             ; Dest
.text:00000258                 call    _strcpy
.text:0000025D                 add     esp, 8
.text:00000260                 push    offset $SG85761 ; Mode
.text:00000265                 lea     ecx, [ebp+Filename]
.text:0000026B                 push    ecx             ; Filename
.text:0000026C                 call    _fopen
.text:00000271                 add     esp, 8
.text:00000274                 mov     [ebp+File], eax
.text:0000027A                 cmp     [ebp+File], 0
.text:00000281                 jz      short loc_2A8
.text:00000283                 lea     edx, [ebp+Filename]
.text:00000289                 push    edx
.text:0000028A                 call    _dupstr
.text:0000028F                 add     esp, 4
.text:00000292                 mov     ds:_chm_path, eax
.text:00000297                 mov     eax, [ebp+File]
.text:0000029D                 push    eax             ; File
.text:0000029E                 call    _fclose
.text:000002A3                 add     esp, 4
.text:000002A6                 jmp     short loc_2B2
.text:000002A8 ; ---------------------------------------------------------------------------
.text:000002A8
.text:000002A8 loc_2A8:                                ; CODE XREF: _init_help+1C1j
.text:000002A8                 mov     ds:_chm_path, 0
.text:000002B2
.text:000002B2 loc_2B2:                                ; CODE XREF: _init_help+1E6j
.text:000002B2                 cmp     ds:_chm_path, 0
.text:000002B9                 jz      loc_346
.text:000002BF                 push    offset $SG85766 ; "hhctrl.ocx"
.text:000002C4                 call    _load_system32_dll
.text:000002C9                 add     esp, 4
.text:000002CC                 mov     [ebp+hModule], eax
.text:000002D2                 cmp     [ebp+hModule], 0
.text:000002D9                 jz      short loc_2FE
.text:000002DB                 mov     esi, esp
.text:000002DD                 push    offset $SG85769 ; "HtmlHelpA"
.text:000002E2                 mov     ecx, [ebp+hModule]
.text:000002E8                 push    ecx             ; hModule
.text:000002E9                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000002EF                 cmp     esi, esp
.text:000002F1                 call    __RTC_CheckEsp
.text:000002F6                 mov     [ebp+var_824], eax
.text:000002FC                 jmp     short loc_308
.text:000002FE ; ---------------------------------------------------------------------------
.text:000002FE
.text:000002FE loc_2FE:                                ; CODE XREF: _init_help+219j
.text:000002FE                 mov     [ebp+var_824], 0
.text:00000308
.text:00000308 loc_308:                                ; CODE XREF: _init_help+23Cj
.text:00000308                 mov     edx, [ebp+var_824]
.text:0000030E                 mov     ds:_p_HtmlHelpA, edx
.text:00000314                 cmp     ds:_p_HtmlHelpA, 0
.text:0000031B                 jnz     short loc_346
.text:0000031D                 mov     ds:_chm_path, 0
.text:00000327                 cmp     [ebp+hModule], 0
.text:0000032E                 jz      short loc_346
.text:00000330                 mov     esi, esp
.text:00000332                 mov     eax, [ebp+hModule]
.text:00000338                 push    eax             ; hLibModule
.text:00000339                 call    dword ptr ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
.text:0000033F                 cmp     esi, esp
.text:00000341                 call    __RTC_CheckEsp
.text:00000346
.text:00000346 loc_346:                                ; CODE XREF: _init_help+1F9j
.text:00000346                                         ; _init_help+25Bj ...
.text:00000346                 push    edx
.text:00000347                 mov     ecx, ebp
.text:00000349                 push    eax
.text:0000034A                 lea     edx, $LN18
.text:00000350                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000355                 pop     eax
.text:00000356                 pop     edx
.text:00000357                 pop     edi
.text:00000358                 pop     esi
.text:00000359                 mov     ecx, [ebp+var_4]
.text:0000035C                 xor     ecx, ebp
.text:0000035E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000363                 add     esp, 824h
.text:00000369                 cmp     ebp, esp
.text:0000036B                 call    __RTC_CheckEsp
.text:00000370                 mov     esp, ebp
.text:00000372                 pop     ebp
.text:00000373                 retn
.text:00000373 _init_help      endp
.text:00000373
.text:00000373 ; ---------------------------------------------------------------------------
.text:00000374 $LN18           dd 1                    ; DATA XREF: _init_help+28Ao
.text:00000378                 dd offset $LN17
.text:0000037C $LN17           dd 0FFFFF7F8h, 800h     ; DATA XREF: .text:00000378o
.text:00000384                 dd offset $LN16
.text:00000388 $LN16           dd 0CCCC0062h, 0CCCCCCCCh ; DATA XREF: .text:00000384o
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390                 public _shutdown_help
.text:00000390 _shutdown_help  proc near
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 pop     ebp
.text:00000394                 retn
.text:00000394 _shutdown_help  endp
.text:00000394
.text:00000394 ; ---------------------------------------------------------------------------
.text:00000395                 align 10h
.text:000003A0
.text:000003A0 ; =============== S U B R O U T I N E =======================================
.text:000003A0
.text:000003A0 ; Attributes: bp-based frame
.text:000003A0
.text:000003A0                 public _has_help
.text:000003A0 _has_help       proc near
.text:000003A0
.text:000003A0 var_4           = dword ptr -4
.text:000003A0
.text:000003A0                 push    ebp
.text:000003A1                 mov     ebp, esp
.text:000003A3                 push    ecx
.text:000003A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003AB                 cmp     ds:_help_path, 0
.text:000003B2                 jnz     short loc_3C6
.text:000003B4                 cmp     ds:_chm_path, 0
.text:000003BB                 jnz     short loc_3C6
.text:000003BD                 mov     [ebp+var_4], 0
.text:000003C4                 jmp     short loc_3CD
.text:000003C6 ; ---------------------------------------------------------------------------
.text:000003C6
.text:000003C6 loc_3C6:                                ; CODE XREF: _has_help+12j
.text:000003C6                                         ; _has_help+1Bj
.text:000003C6                 mov     [ebp+var_4], 1
.text:000003CD
.text:000003CD loc_3CD:                                ; CODE XREF: _has_help+24j
.text:000003CD                 mov     eax, [ebp+var_4]
.text:000003D0                 mov     esp, ebp
.text:000003D2                 pop     ebp
.text:000003D3                 retn
.text:000003D3 _has_help       endp
.text:000003D3
.text:000003D3 ; ---------------------------------------------------------------------------
.text:000003D4                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; int __cdecl launch_help(HWND hWndMain, char *Str)
.text:000003E0                 public _launch_help
.text:000003E0 _launch_help    proc near
.text:000003E0
.text:000003E0 dwData          = dword ptr -0Ch
.text:000003E0 var_8           = dword ptr -8
.text:000003E0 var_4           = dword ptr -4
.text:000003E0 hWndMain        = dword ptr  8
.text:000003E0 Str             = dword ptr  0Ch
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 sub     esp, 0Ch
.text:000003E6                 push    esi
.text:000003E7                 mov     [ebp+dwData], 0CCCCCCCCh
.text:000003EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000003F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003FC                 cmp     [ebp+Str], 0
.text:00000400                 jz      loc_4E1
.text:00000406                 push    offset $SG85785 ; Control
.text:0000040B                 mov     eax, [ebp+Str]
.text:0000040E                 push    eax             ; Str
.text:0000040F                 call    _strcspn
.text:00000414                 add     esp, 8
.text:00000417                 mov     [ebp+var_4], eax
.text:0000041A                 cmp     ds:_chm_path, 0
.text:00000421                 jz      short loc_48F
.text:00000423                 mov     ecx, [ebp+Str]
.text:00000426                 add     ecx, [ebp+var_4]
.text:00000429                 movsx   edx, byte ptr [ecx]
.text:0000042C                 test    edx, edx
.text:0000042E                 jnz     short loc_444
.text:00000430                 push    63h ; 'c'       ; Line
.text:00000432                 push    offset $SG85789 ; "..\\..\\winhelp.c"
.text:00000437                 push    offset $SG85790 ; "topic[colonpos] != '\\0'"
.text:0000043C                 call    __wassert
.text:00000441 ; ---------------------------------------------------------------------------
.text:00000441                 add     esp, 0Ch
.text:00000444
.text:00000444 loc_444:                                ; CODE XREF: _launch_help+4Ej
.text:00000444                 mov     ecx, [ebp+var_4]
.text:00000447                 mov     edx, [ebp+Str]
.text:0000044A                 lea     eax, [edx+ecx+1]
.text:0000044E                 push    eax
.text:0000044F                 mov     ecx, ds:_chm_path
.text:00000455                 push    ecx
.text:00000456                 push    offset $SG85791 ; "%s::/%s.html>main"
.text:0000045B                 call    _dupprintf
.text:00000460                 add     esp, 0Ch
.text:00000463                 mov     [ebp+var_8], eax
.text:00000466                 mov     esi, esp
.text:00000468                 push    0
.text:0000046A                 push    0
.text:0000046C                 mov     edx, [ebp+var_8]
.text:0000046F                 push    edx
.text:00000470                 mov     eax, [ebp+hWndMain]
.text:00000473                 push    eax
.text:00000474                 call    ds:_p_HtmlHelpA
.text:0000047A                 cmp     esi, esp
.text:0000047C                 call    __RTC_CheckEsp
.text:00000481                 mov     ecx, [ebp+var_8]
.text:00000484                 push    ecx
.text:00000485                 call    _safefree
.text:0000048A                 add     esp, 4
.text:0000048D                 jmp     short loc_4DF
.text:0000048F ; ---------------------------------------------------------------------------
.text:0000048F
.text:0000048F loc_48F:                                ; CODE XREF: _launch_help+41j
.text:0000048F                 cmp     ds:_help_path, 0
.text:00000496                 jz      short loc_4DF
.text:00000498                 mov     edx, [ebp+Str]
.text:0000049B                 push    edx
.text:0000049C                 mov     eax, [ebp+var_4]
.text:0000049F                 push    eax
.text:000004A0                 push    offset $SG85795 ; "JI(`',`%.*s')"
.text:000004A5                 call    _dupprintf
.text:000004AA                 add     esp, 0Ch
.text:000004AD                 mov     [ebp+dwData], eax
.text:000004B0                 mov     esi, esp
.text:000004B2                 mov     ecx, [ebp+dwData]
.text:000004B5                 push    ecx             ; dwData
.text:000004B6                 push    102h            ; uCommand
.text:000004BB                 mov     edx, ds:_help_path
.text:000004C1                 push    edx             ; lpszHelp
.text:000004C2                 mov     eax, [ebp+hWndMain]
.text:000004C5                 push    eax             ; hWndMain
.text:000004C6                 call    dword ptr ds:__imp__WinHelpA@16 ; WinHelpA(x,x,x,x)
.text:000004CC                 cmp     esi, esp
.text:000004CE                 call    __RTC_CheckEsp
.text:000004D3                 mov     ecx, [ebp+dwData]
.text:000004D6                 push    ecx
.text:000004D7                 call    _safefree
.text:000004DC                 add     esp, 4
.text:000004DF
.text:000004DF loc_4DF:                                ; CODE XREF: _launch_help+ADj
.text:000004DF                                         ; _launch_help+B6j
.text:000004DF                 jmp     short loc_543
.text:000004E1 ; ---------------------------------------------------------------------------
.text:000004E1
.text:000004E1 loc_4E1:                                ; CODE XREF: _launch_help+20j
.text:000004E1                 cmp     ds:_chm_path, 0
.text:000004E8                 jz      short loc_50A
.text:000004EA                 mov     esi, esp
.text:000004EC                 push    0
.text:000004EE                 push    0
.text:000004F0                 mov     edx, ds:_chm_path
.text:000004F6                 push    edx
.text:000004F7                 mov     eax, [ebp+hWndMain]
.text:000004FA                 push    eax
.text:000004FB                 call    ds:_p_HtmlHelpA
.text:00000501                 cmp     esi, esp
.text:00000503                 call    __RTC_CheckEsp
.text:00000508                 jmp     short loc_543
.text:0000050A ; ---------------------------------------------------------------------------
.text:0000050A
.text:0000050A loc_50A:                                ; CODE XREF: _launch_help+108j
.text:0000050A                 cmp     ds:_help_path, 0
.text:00000511                 jz      short loc_543
.text:00000513                 mov     esi, esp
.text:00000515                 push    0               ; dwData
.text:00000517                 xor     ecx, ecx
.text:00000519                 cmp     ds:_help_has_contents, 0
.text:00000520                 setnz   cl
.text:00000523                 lea     ecx, ds:3[ecx*8]
.text:0000052A                 push    ecx             ; uCommand
.text:0000052B                 mov     edx, ds:_help_path
.text:00000531                 push    edx             ; lpszHelp
.text:00000532                 mov     eax, [ebp+hWndMain]
.text:00000535                 push    eax             ; hWndMain
.text:00000536                 call    dword ptr ds:__imp__WinHelpA@16 ; WinHelpA(x,x,x,x)
.text:0000053C                 cmp     esi, esp
.text:0000053E                 call    __RTC_CheckEsp
.text:00000543
.text:00000543 loc_543:                                ; CODE XREF: _launch_help:loc_4DFj
.text:00000543                                         ; _launch_help+128j ...
.text:00000543                 mov     ds:_requested_help, 1
.text:0000054D                 pop     esi
.text:0000054E                 add     esp, 0Ch
.text:00000551                 cmp     ebp, esp
.text:00000553                 call    __RTC_CheckEsp
.text:00000558                 mov     esp, ebp
.text:0000055A                 pop     ebp
.text:0000055B                 retn
.text:0000055B _launch_help    endp
.text:0000055B
.text:0000055B ; ---------------------------------------------------------------------------
.text:0000055C                 align 10h
.text:00000560
.text:00000560 ; =============== S U B R O U T I N E =======================================
.text:00000560
.text:00000560 ; Attributes: bp-based frame
.text:00000560
.text:00000560 ; int __cdecl quit_help(HWND hWndMain)
.text:00000560                 public _quit_help
.text:00000560 _quit_help      proc near
.text:00000560
.text:00000560 hWndMain        = dword ptr  8
.text:00000560
.text:00000560                 push    ebp
.text:00000561                 mov     ebp, esp
.text:00000563                 push    esi
.text:00000564                 cmp     ds:_requested_help, 0
.text:0000056B                 jz      short loc_5BF
.text:0000056D                 cmp     ds:_chm_path, 0
.text:00000574                 jz      short loc_58F
.text:00000576                 mov     esi, esp
.text:00000578                 push    0
.text:0000057A                 push    12h
.text:0000057C                 push    0
.text:0000057E                 push    0
.text:00000580                 call    ds:_p_HtmlHelpA
.text:00000586                 cmp     esi, esp
.text:00000588                 call    __RTC_CheckEsp
.text:0000058D                 jmp     short loc_5B5
.text:0000058F ; ---------------------------------------------------------------------------
.text:0000058F
.text:0000058F loc_58F:                                ; CODE XREF: _quit_help+14j
.text:0000058F                 cmp     ds:_help_path, 0
.text:00000596                 jz      short loc_5B5
.text:00000598                 mov     esi, esp
.text:0000059A                 push    0               ; dwData
.text:0000059C                 push    2               ; uCommand
.text:0000059E                 mov     eax, ds:_help_path
.text:000005A3                 push    eax             ; lpszHelp
.text:000005A4                 mov     ecx, [ebp+hWndMain]
.text:000005A7                 push    ecx             ; hWndMain
.text:000005A8                 call    dword ptr ds:__imp__WinHelpA@16 ; WinHelpA(x,x,x,x)
.text:000005AE                 cmp     esi, esp
.text:000005B0                 call    __RTC_CheckEsp
.text:000005B5
.text:000005B5 loc_5B5:                                ; CODE XREF: _quit_help+2Dj
.text:000005B5                                         ; _quit_help+36j
.text:000005B5                 mov     ds:_requested_help, 0
.text:000005BF
.text:000005BF loc_5BF:                                ; CODE XREF: _quit_help+Bj
.text:000005BF                 pop     esi
.text:000005C0                 cmp     ebp, esp
.text:000005C2                 call    __RTC_CheckEsp
.text:000005C7                 pop     ebp
.text:000005C8                 retn
.text:000005C8 _quit_help      endp
.text:000005C8
.text:000005C8 ; ---------------------------------------------------------------------------
.text:000005C9                 align 4
.text:000005C9 _text           ends
.text:000005C9
.bss:000005CC ; ===========================================================================
.bss:000005CC
.bss:000005CC ; Segment type: Uninitialized
.bss:000005CC ; Segment permissions: Read/Write
.bss:000005CC _bss            segment dword public 'BSS' use32
.bss:000005CC                 assume cs:_bss
.bss:000005CC                 ;org 5CCh
.bss:000005CC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000005CC ; LPCSTR help_path
.bss:000005CC _help_path      dd ?                    ; DATA XREF: _init_help+110w
.bss:000005CC                                         ; _init_help:loc_1E6w ...
.bss:000005D0 _chm_path       dd ?                    ; DATA XREF: _init_help+1D2w
.bss:000005D0                                         ; _init_help:loc_2A8w ...
.bss:000005D4 _p_HtmlHelpA    dd ?                    ; DATA XREF: _init_help+24Ew
.bss:000005D4                                         ; _init_help+254r ...
.bss:000005D8 _help_has_contents dd ?                 ; DATA XREF: _init_help+167w
.bss:000005D8                                         ; _init_help:loc_242w ...
.bss:000005DC _requested_help dd ?                    ; DATA XREF: _launch_help:loc_543w
.bss:000005DC                                         ; _quit_help+4r ...
.bss:000005DC _bss            ends
.bss:000005DC
.rtc$TMZ:000005E0 ; ===========================================================================
.rtc$TMZ:000005E0
.rtc$TMZ:000005E0 ; Segment type: Pure data
.rtc$TMZ:000005E0 ; Segment permissions: Read
.rtc$TMZ:000005E0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000005E0                 assume cs:_rtc$TMZ
.rtc$TMZ:000005E0                 ;org 5E0h
.rtc$TMZ:000005E0 ; COMDAT (pick any)
.rtc$TMZ:000005E0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000005E0 _rtc$TMZ        ends
.rtc$TMZ:000005E0
.rtc$IMZ:000005E4 ; ===========================================================================
.rtc$IMZ:000005E4
.rtc$IMZ:000005E4 ; Segment type: Pure data
.rtc$IMZ:000005E4 ; Segment permissions: Read
.rtc$IMZ:000005E4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000005E4                 assume cs:_rtc$IMZ
.rtc$IMZ:000005E4                 ;org 5E4h
.rtc$IMZ:000005E4 ; COMDAT (pick any)
.rtc$IMZ:000005E4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000005E4 _rtc$IMZ        ends
.rtc$IMZ:000005E4
UNDEF:000005F0 ; ===========================================================================
UNDEF:000005F0
UNDEF:000005F0 ; Segment type: Externs
UNDEF:000005F0 ; UNDEF
UNDEF:000005F0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
UNDEF:000005F0                 extrn __imp__FreeLibrary@4:near ; CODE XREF: _init_help+279p
UNDEF:000005F0                                         ; DATA XREF: _init_help+279r
UNDEF:000005F4 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:000005F4                 extrn __imp__GetProcAddress@8:near
UNDEF:000005F4                                         ; CODE XREF: _init_help+229p
UNDEF:000005F4                                         ; DATA XREF: _init_help+229r
UNDEF:000005F8                 extrn _load_system32_dll:near ; CODE XREF: _init_help+204p
UNDEF:000005FC ; int __cdecl fclose(FILE *File)
UNDEF:000005FC                 extrn _fclose:near      ; CODE XREF: _init_help+11Cp
UNDEF:000005FC                                         ; _init_help+178p ...
UNDEF:00000600                 extrn _dupstr:near      ; CODE XREF: _init_help+108p
UNDEF:00000600                                         ; _init_help+1CAp
UNDEF:00000604 ; FILE *__cdecl fopen(const char *Filename, const char *Mode)
UNDEF:00000604                 extrn _fopen:near       ; CODE XREF: _init_help+EAp
UNDEF:00000604                                         ; _init_help+150p ...
UNDEF:00000608 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00000608                 extrn _strcpy:near      ; CODE XREF: _init_help+D6p
UNDEF:00000608                                         ; _init_help+13Cp ...
UNDEF:0000060C ; char *__cdecl strrchr(const char *Str, int Ch)
UNDEF:0000060C                 extrn _strrchr:near     ; CODE XREF: _init_help+59p
UNDEF:0000060C                                         ; _init_help+96p
UNDEF:00000610 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
UNDEF:00000610                 extrn __imp__GetModuleFileNameA@12:near
UNDEF:00000610                                         ; CODE XREF: _init_help+37p
UNDEF:00000610                                         ; DATA XREF: _init_help+37r
UNDEF:00000614                 extrn ___security_cookie:near ; DATA XREF: _init_help+1Dr
UNDEF:00000618 ; __fastcall __security_check_cookie(x)
UNDEF:00000618                 extrn @__security_check_cookie@4:near
UNDEF:00000618                                         ; CODE XREF: _init_help+29Ep
UNDEF:0000061C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000061C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000061C                                         ; CODE XREF: _init_help+290p
UNDEF:00000620                 extrn __RTC_CheckEsp:near ; CODE XREF: _init_help+3Fp
UNDEF:00000620                                         ; _init_help+231p ...
UNDEF:00000624                 extrn __RTC_Shutdown:near
UNDEF:00000624                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000628                 extrn __RTC_InitBase:near
UNDEF:00000628                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000062C ; BOOL __stdcall WinHelpA(HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData)
UNDEF:0000062C                 extrn __imp__WinHelpA@16:near ; CODE XREF: _launch_help+E6p
UNDEF:0000062C                                         ; _launch_help+156p ...
UNDEF:00000630                 extrn _safefree:near    ; CODE XREF: _launch_help+A5p
UNDEF:00000630                                         ; _launch_help+F7p
UNDEF:00000634                 extrn _dupprintf:near   ; CODE XREF: _launch_help+7Bp
UNDEF:00000634                                         ; _launch_help+C5p
UNDEF:00000638 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00000638                 extrn __wassert:near    ; CODE XREF: _launch_help+5Cp
UNDEF:0000063C ; size_t __cdecl strcspn(const char *Str, const char *Control)
UNDEF:0000063C                 extrn _strcspn:near     ; CODE XREF: _launch_help+2Fp
UNDEF:0000063C
UNDEF:0000063C
UNDEF:0000063C                 end