.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 87D1AAC03A8E23AFFB664F6C6589C578
.bss:00000000 ; Input CRC32 : 0495C982
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\window.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 ; Segment alignment 'qword' can not be represented in assembly
.bss:00000000 _bss            segment para public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000 _lastact        dd ?                    ; DATA XREF: WinMain(x,x,x,x)+EB7w
.bss:00000000                                         ; _click+B4r ...
.bss:00000004 ; struct tagLOGFONTA lfont
.bss:00000004 _lfont          tagLOGFONTA <?>         ; DATA XREF: _init_fonts+240o
.bss:00000004                                         ; WndProc(x,x,x,x)+2887o
.bss:00000040 _fontflag       dd ?                    ; DATA XREF: _init_fonts+810w
.bss:00000040                                         ; _deinit_fonts+5Cw ...
.bss:00000044 dword_44        dd ?                    ; DATA XREF: _init_fonts+805w
.bss:00000044                                         ; _init_fonts+80Ar
.bss:00000048 dword_48        dd ?                    ; DATA XREF: _init_fonts:loc_5BCEw
.bss:00000048                                         ; _init_fonts+800r
.bss:0000004C                 db    ? ;
.bss:0000004D                 db    ? ;
.bss:0000004E                 db    ? ;
.bss:0000004F                 db    ? ;
.bss:00000050                 db    ? ;
.bss:00000051                 db    ? ;
.bss:00000052                 db    ? ;
.bss:00000053                 db    ? ;
.bss:00000054                 db    ? ;
.bss:00000055                 db    ? ;
.bss:00000056                 db    ? ;
.bss:00000057                 db    ? ;
.bss:00000058                 db    ? ;
.bss:00000059                 db    ? ;
.bss:0000005A                 db    ? ;
.bss:0000005B                 db    ? ;
.bss:0000005C                 db    ? ;
.bss:0000005D                 db    ? ;
.bss:0000005E                 db    ? ;
.bss:0000005F                 db    ? ;
.bss:00000060                 db    ? ;
.bss:00000061                 db    ? ;
.bss:00000062                 db    ? ;
.bss:00000063                 db    ? ;
.bss:00000064                 db    ? ;
.bss:00000065                 db    ? ;
.bss:00000066                 db    ? ;
.bss:00000067                 db    ? ;
.bss:00000068                 db    ? ;
.bss:00000069                 db    ? ;
.bss:0000006A                 db    ? ;
.bss:0000006B                 db    ? ;
.bss:0000006C                 db    ? ;
.bss:0000006D                 db    ? ;
.bss:0000006E                 db    ? ;
.bss:0000006F                 db    ? ;
.bss:00000070                 db    ? ;
.bss:00000071                 db    ? ;
.bss:00000072                 db    ? ;
.bss:00000073                 db    ? ;
.bss:00000074                 db    ? ;
.bss:00000075                 db    ? ;
.bss:00000076                 db    ? ;
.bss:00000077                 db    ? ;
.bss:00000078                 db    ? ;
.bss:00000079                 db    ? ;
.bss:0000007A                 db    ? ;
.bss:0000007B                 db    ? ;
.bss:0000007C                 db    ? ;
.bss:0000007D unk_7D          db    ? ;               ; DATA XREF: .data:$SG91276o
.bss:0000007D                                         ; .data:$SG91321o
.bss:0000007E                 db    ? ;
.bss:0000007F                 db    ? ;
.bss:00000080                 db    ? ;
.bss:00000081                 db    ? ;
.bss:00000082                 db    ? ;
.bss:00000083                 db    ? ;
.bss:00000084                 db    ? ;
.bss:00000085                 db    ? ;
.bss:00000086                 db    ? ;
.bss:00000087                 db    ? ;
.bss:00000088                 db    ? ;
.bss:00000089                 db    ? ;
.bss:0000008A                 db    ? ;
.bss:0000008B                 db    ? ;
.bss:0000008C                 db    ? ;
.bss:0000008D                 db    ? ;
.bss:0000008E                 db    ? ;
.bss:0000008F                 db    ? ;
.bss:00000090                 db    ? ;
.bss:00000091                 db    ? ;
.bss:00000092                 db    ? ;
.bss:00000093                 db    ? ;
.bss:00000094                 db    ? ;
.bss:00000095                 db    ? ;
.bss:00000096                 db    ? ;
.bss:00000097                 db    ? ;
.bss:00000098                 db    ? ;
.bss:00000099                 db    ? ;
.bss:0000009A                 db    ? ;
.bss:0000009B                 db    ? ;
.bss:0000009C                 db    ? ;
.bss:0000009D                 db    ? ;
.bss:0000009E                 db    ? ;
.bss:0000009F                 db    ? ;
.bss:000000A0                 db    ? ;
.bss:000000A1                 db    ? ;
.bss:000000A2                 db    ? ;
.bss:000000A3                 db    ? ;
.bss:000000A4                 db    ? ;
.bss:000000A5                 db    ? ;
.bss:000000A6                 db    ? ;
.bss:000000A7                 db    ? ;
.bss:000000A8                 db    ? ;
.bss:000000A9                 db    ? ;
.bss:000000AA                 db    ? ;
.bss:000000AB                 db    ? ;
.bss:000000AC                 db    ? ;
.bss:000000AD                 db    ? ;
.bss:000000AE                 db    ? ;
.bss:000000AF                 db    ? ;
.bss:000000B0                 db    ? ;
.bss:000000B1                 db    ? ;
.bss:000000B2                 db    ? ;
.bss:000000B3                 db    ? ;
.bss:000000B4                 db    ? ;
.bss:000000B5                 db    ? ;
.bss:000000B6                 db    ? ;
.bss:000000B7                 db    ? ;
.bss:000000B8                 db    ? ;
.bss:000000B9                 db    ? ;
.bss:000000BA                 db    ? ;
.bss:000000BB                 db    ? ;
.bss:000000BC                 db    ? ;
.bss:000000BD                 db    ? ;
.bss:000000BE                 db    ? ;
.bss:000000BF                 db    ? ;
.bss:000000C0                 db    ? ;
.bss:000000C1                 db    ? ;
.bss:000000C2                 db    ? ;
.bss:000000C3                 db    ? ;
.bss:000000C4                 db    ? ;
.bss:000000C5                 db    ? ;
.bss:000000C6                 db    ? ;
.bss:000000C7                 db    ? ;
.bss:000000C8 ; CHAR IconName[56]
.bss:000000C8 IconName        db 38h dup(?)           ; DATA XREF: WinMain(x,x,x,x)+9D3o
.bss:00000100 unk_100         db    ? ;               ; DATA XREF: .rdata:`conftopalette'::`2'::wwo
.bss:00000100                                         ; .rdata:off_216Co
.bss:00000101 unk_101         db    ? ;               ; DATA XREF: .rdata:00002114o
.bss:00000101                                         ; .rdata:off_2170o
.bss:00000102 unk_102         db    ? ;               ; DATA XREF: .rdata:00002118o
.bss:00000103 unk_103         db    ? ;               ; DATA XREF: .rdata:0000211Co
.bss:00000104 unk_104         db    ? ;               ; DATA XREF: .rdata:00002120o
.bss:00000105 unk_105         db    ? ;               ; DATA XREF: .rdata:00002124o
.bss:00000106                 db    ? ;
.bss:00000107                 db    ? ;
.bss:00000108                 db    ? ;
.bss:00000109                 db    ? ;
.bss:0000010A                 db    ? ;
.bss:0000010B                 db    ? ;
.bss:0000010C                 db    ? ;
.bss:0000010D                 db    ? ;
.bss:0000010E                 db    ? ;
.bss:0000010F                 db    ? ;
.bss:00000110                 db    ? ;
.bss:00000111                 db    ? ;
.bss:00000112                 db    ? ;
.bss:00000113                 db    ? ;
.bss:00000114                 db    ? ;
.bss:00000115                 db    ? ;
.bss:00000116                 db    ? ;
.bss:00000117                 db    ? ;
.bss:00000118                 db    ? ;
.bss:00000119                 db    ? ;
.bss:0000011A                 db    ? ;
.bss:0000011B                 db    ? ;
.bss:0000011C                 db    ? ;
.bss:0000011D                 db    ? ;
.bss:0000011E                 db    ? ;
.bss:0000011F                 db    ? ;
.bss:00000120                 db    ? ;
.bss:00000121                 db    ? ;
.bss:00000122                 db    ? ;
.bss:00000123                 db    ? ;
.bss:00000124                 db    ? ;
.bss:00000125                 db    ? ;
.bss:00000126                 db    ? ;
.bss:00000127                 db    ? ;
.bss:00000128                 db    ? ;
.bss:00000129                 db    ? ;
.bss:0000012A                 db    ? ;
.bss:0000012B                 db    ? ;
.bss:0000012C                 db    ? ;
.bss:0000012D                 db    ? ;
.bss:0000012E                 db    ? ;
.bss:0000012F                 db    ? ;
.bss:00000130                 db    ? ;
.bss:00000131                 db    ? ;
.bss:00000132                 db    ? ;
.bss:00000133                 db    ? ;
.bss:00000134                 db    ? ;
.bss:00000135                 db    ? ;
.bss:00000136                 db    ? ;
.bss:00000137                 db    ? ;
.bss:00000138                 db    ? ;
.bss:00000139                 db    ? ;
.bss:0000013A                 db    ? ;
.bss:0000013B                 db    ? ;
.bss:0000013C                 db    ? ;
.bss:0000013D                 db    ? ;
.bss:0000013E                 db    ? ;
.bss:0000013F                 db    ? ;
.bss:00000140 _resizing       dd ?                    ; DATA XREF: WndProc(x,x,x,x)+1B60w
.bss:00000140                                         ; WndProc(x,x,x,x)+1B83w ...
.bss:00000144 ; const CHAR `TranslateKey'::`66'::keysb
.bss:00000144 ?keysb@?EC@??TranslateKey@@9@9 db ?     ; DATA XREF: _TranslateKey+19DAw
.bss:00000144                                         ; _TranslateKey+19F2o
.bss:00000145                 align 4
.bss:00000148 _descent        dd ?                    ; DATA XREF: _init_fonts+69Cw
.bss:00000148                                         ; _init_fonts+6A2r ...
.bss:0000014C _kbd_codepage   dd ?                    ; DATA XREF: _set_input_locale+61w
.bss:0000014C                                         ; WndProc(x,x,x,x)+2AC8r ...
.bss:00000150 _next_flash     dd ?                    ; DATA XREF: _flash_window+E2w
.bss:00000150                                         ; _flash_window+137w ...
.bss:00000154 ; WORD `TranslateKey'::`66'::keys
.bss:00000154 ?keys@?EC@??TranslateKey@@9@9 db ?      ; DATA XREF: _TranslateKey+196Bo
.bss:00000154                                         ; _TranslateKey+19D3r
.bss:00000155                 db    ? ;
.bss:00000156                 db    ? ;
.bss:00000157                 db    ? ;
.bss:00000158                 db    ? ;
.bss:00000159                 db    ? ;
.bss:0000015A                 db    ? ;
.bss:0000015B                 db    ? ;
.bss:0000015C _timing_next_time dd ?                  ; DATA XREF: _timer_change_notify+85w
.bss:0000015C                                         ; WndProc(x,x,x,x)+1F2r
.bss:00000160 ; HGDIOBJ fonts
.bss:00000160 _fonts          dd ?                    ; DATA XREF: _init_fonts+42w
.bss:00000160                                         ; _init_fonts+203w ...
.bss:00000164 ; HGDIOBJ dword_164
.bss:00000164 dword_164       dd ?                    ; DATA XREF: _init_fonts+691w
.bss:00000164                                         ; _init_fonts+7D8r ...
.bss:00000168 ; HGDIOBJ ho
.bss:00000168 ho              dd ?                    ; DATA XREF: _init_fonts+3F5w
.bss:00000168                                         ; _init_fonts+465r ...
.bss:0000016C                 db    ? ;
.bss:0000016D                 db    ? ;
.bss:0000016E                 db    ? ;
.bss:0000016F                 db    ? ;
.bss:00000170                 db    ? ;
.bss:00000171                 db    ? ;
.bss:00000172                 db    ? ;
.bss:00000173                 db    ? ;
.bss:00000174                 db    ? ;
.bss:00000175                 db    ? ;
.bss:00000176                 db    ? ;
.bss:00000177                 db    ? ;
.bss:00000178                 db    ? ;
.bss:00000179                 db    ? ;
.bss:0000017A                 db    ? ;
.bss:0000017B                 db    ? ;
.bss:0000017C                 db    ? ;
.bss:0000017D                 db    ? ;
.bss:0000017E                 db    ? ;
.bss:0000017F                 db    ? ;
.bss:00000180                 db    ? ;
.bss:00000181                 db    ? ;
.bss:00000182                 db    ? ;
.bss:00000183                 db    ? ;
.bss:00000184                 db    ? ;
.bss:00000185                 db    ? ;
.bss:00000186                 db    ? ;
.bss:00000187                 db    ? ;
.bss:00000188                 db    ? ;
.bss:00000189                 db    ? ;
.bss:0000018A                 db    ? ;
.bss:0000018B                 db    ? ;
.bss:0000018C                 db    ? ;
.bss:0000018D                 db    ? ;
.bss:0000018E                 db    ? ;
.bss:0000018F                 db    ? ;
.bss:00000190                 db    ? ;
.bss:00000191                 db    ? ;
.bss:00000192                 db    ? ;
.bss:00000193                 db    ? ;
.bss:00000194                 db    ? ;
.bss:00000195                 db    ? ;
.bss:00000196                 db    ? ;
.bss:00000197                 db    ? ;
.bss:00000198                 db    ? ;
.bss:00000199                 db    ? ;
.bss:0000019A                 db    ? ;
.bss:0000019B                 db    ? ;
.bss:0000019C                 db    ? ;
.bss:0000019D                 db    ? ;
.bss:0000019E                 db    ? ;
.bss:0000019F                 db    ? ;
.bss:000001A0                 db    ? ;
.bss:000001A1                 db    ? ;
.bss:000001A2                 db    ? ;
.bss:000001A3                 db    ? ;
.bss:000001A4                 db    ? ;
.bss:000001A5                 db    ? ;
.bss:000001A6                 db    ? ;
.bss:000001A7                 db    ? ;
.bss:000001A8                 db    ? ;
.bss:000001A9                 db    ? ;
.bss:000001AA                 db    ? ;
.bss:000001AB                 db    ? ;
.bss:000001AC                 db    ? ;
.bss:000001AD                 db    ? ;
.bss:000001AE                 db    ? ;
.bss:000001AF                 db    ? ;
.bss:000001B0                 db    ? ;
.bss:000001B1                 db    ? ;
.bss:000001B2                 db    ? ;
.bss:000001B3                 db    ? ;
.bss:000001B4                 db    ? ;
.bss:000001B5                 db    ? ;
.bss:000001B6                 db    ? ;
.bss:000001B7                 db    ? ;
.bss:000001B8                 db    ? ;
.bss:000001B9                 db    ? ;
.bss:000001BA                 db    ? ;
.bss:000001BB                 db    ? ;
.bss:000001BC                 db    ? ;
.bss:000001BD                 db    ? ;
.bss:000001BE                 db    ? ;
.bss:000001BF                 db    ? ;
.bss:000001C0                 db    ? ;
.bss:000001C1                 db    ? ;
.bss:000001C2                 db    ? ;
.bss:000001C3                 db    ? ;
.bss:000001C4                 db    ? ;
.bss:000001C5                 db    ? ;
.bss:000001C6                 db    ? ;
.bss:000001C7                 db    ? ;
.bss:000001C8                 db    ? ;
.bss:000001C9                 db    ? ;
.bss:000001CA                 db    ? ;
.bss:000001CB                 db    ? ;
.bss:000001CC                 db    ? ;
.bss:000001CD                 db    ? ;
.bss:000001CE                 db    ? ;
.bss:000001CF                 db    ? ;
.bss:000001D0                 db    ? ;
.bss:000001D1                 db    ? ;
.bss:000001D2                 db    ? ;
.bss:000001D3                 db    ? ;
.bss:000001D4                 db    ? ;
.bss:000001D5                 db    ? ;
.bss:000001D6                 db    ? ;
.bss:000001D7                 db    ? ;
.bss:000001D8                 db    ? ;
.bss:000001D9                 db    ? ;
.bss:000001DA                 db    ? ;
.bss:000001DB                 db    ? ;
.bss:000001DC                 db    ? ;
.bss:000001DD                 db    ? ;
.bss:000001DE                 db    ? ;
.bss:000001DF                 db    ? ;
.bss:000001E0 ; HGDIOBJ h
.bss:000001E0 h               dd ?                    ; DATA XREF: _char_width+137r
.bss:000001E0                                         ; _char_width+149r
.bss:000001E4                 db    ? ;
.bss:000001E5                 db    ? ;
.bss:000001E6                 db    ? ;
.bss:000001E7                 db    ? ;
.bss:000001E8                 db    ? ;
.bss:000001E9                 db    ? ;
.bss:000001EA                 db    ? ;
.bss:000001EB                 db    ? ;
.bss:000001EC                 db    ? ;
.bss:000001ED                 db    ? ;
.bss:000001EE                 db    ? ;
.bss:000001EF                 db    ? ;
.bss:000001F0                 db    ? ;
.bss:000001F1                 db    ? ;
.bss:000001F2                 db    ? ;
.bss:000001F3                 db    ? ;
.bss:000001F4                 db    ? ;
.bss:000001F5                 db    ? ;
.bss:000001F6                 db    ? ;
.bss:000001F7                 db    ? ;
.bss:000001F8                 db    ? ;
.bss:000001F9                 db    ? ;
.bss:000001FA                 db    ? ;
.bss:000001FB                 db    ? ;
.bss:000001FC                 db    ? ;
.bss:000001FD                 db    ? ;
.bss:000001FE                 db    ? ;
.bss:000001FF                 db    ? ;
.bss:00000200                 db    ? ;
.bss:00000201                 db    ? ;
.bss:00000202                 db    ? ;
.bss:00000203                 db    ? ;
.bss:00000204                 db    ? ;
.bss:00000205                 db    ? ;
.bss:00000206                 db    ? ;
.bss:00000207                 db    ? ;
.bss:00000208                 db    ? ;
.bss:00000209                 db    ? ;
.bss:0000020A unk_20A         db    ? ;               ; DATA XREF: .data:_wm_mousewheelo
.bss:0000020B                 db    ? ;
.bss:0000020C                 db    ? ;
.bss:0000020D                 db    ? ;
.bss:0000020E                 db    ? ;
.bss:0000020F                 db    ? ;
.bss:00000210                 db    ? ;
.bss:00000211                 db    ? ;
.bss:00000212                 db    ? ;
.bss:00000213                 db    ? ;
.bss:00000214                 db    ? ;
.bss:00000215                 db    ? ;
.bss:00000216                 db    ? ;
.bss:00000217                 db    ? ;
.bss:00000218                 db    ? ;
.bss:00000219                 db    ? ;
.bss:0000021A                 db    ? ;
.bss:0000021B                 db    ? ;
.bss:0000021C                 db    ? ;
.bss:0000021D                 db    ? ;
.bss:0000021E                 db    ? ;
.bss:0000021F                 db    ? ;
.bss:00000220                 db    ? ;
.bss:00000221                 db    ? ;
.bss:00000222                 db    ? ;
.bss:00000223                 db    ? ;
.bss:00000224                 db    ? ;
.bss:00000225                 db    ? ;
.bss:00000226                 db    ? ;
.bss:00000227                 db    ? ;
.bss:00000228                 db    ? ;
.bss:00000229                 db    ? ;
.bss:0000022A                 db    ? ;
.bss:0000022B                 db    ? ;
.bss:0000022C                 db    ? ;
.bss:0000022D                 db    ? ;
.bss:0000022E                 db    ? ;
.bss:0000022F                 db    ? ;
.bss:00000230                 db    ? ;
.bss:00000231                 db    ? ;
.bss:00000232                 db    ? ;
.bss:00000233                 db    ? ;
.bss:00000234                 db    ? ;
.bss:00000235                 db    ? ;
.bss:00000236                 db    ? ;
.bss:00000237                 db    ? ;
.bss:00000238                 db    ? ;
.bss:00000239                 db    ? ;
.bss:0000023A                 db    ? ;
.bss:0000023B                 db    ? ;
.bss:0000023C                 db    ? ;
.bss:0000023D                 db    ? ;
.bss:0000023E                 db    ? ;
.bss:0000023F                 db    ? ;
.bss:00000240                 db    ? ;
.bss:00000241                 db    ? ;
.bss:00000242                 db    ? ;
.bss:00000243                 db    ? ;
.bss:00000244                 db    ? ;
.bss:00000245                 db    ? ;
.bss:00000246                 db    ? ;
.bss:00000247                 db    ? ;
.bss:00000248                 db    ? ;
.bss:00000249                 db    ? ;
.bss:0000024A                 db    ? ;
.bss:0000024B                 db    ? ;
.bss:0000024C                 db    ? ;
.bss:0000024D                 db    ? ;
.bss:0000024E                 db    ? ;
.bss:0000024F                 db    ? ;
.bss:00000250                 db    ? ;
.bss:00000251                 db    ? ;
.bss:00000252                 db    ? ;
.bss:00000253                 db    ? ;
.bss:00000254                 db    ? ;
.bss:00000255                 db    ? ;
.bss:00000256                 db    ? ;
.bss:00000257                 db    ? ;
.bss:00000258                 db    ? ;
.bss:00000259                 db    ? ;
.bss:0000025A                 db    ? ;
.bss:0000025B                 db    ? ;
.bss:0000025C                 db    ? ;
.bss:0000025D                 db    ? ;
.bss:0000025E                 db    ? ;
.bss:0000025F                 db    ? ;
.bss:00000260 _extra_width    dd ?                    ; DATA XREF: WinMain(x,x,x,x)+A60w
.bss:00000260                                         ; WinMain(x,x,x,x)+A8Cr ...
.bss:00000264 ; LPWSTR clipboard_contents
.bss:00000264 _clipboard_contents dd ?                ; DATA XREF: _process_clipdata+18r
.bss:00000264                                         ; _process_clipdata+26w ...
.bss:00000268 ; LOGPALETTE *logpal
.bss:00000268 _logpal         dd ?                    ; DATA XREF: WinMain(x,x,x,x)+123Ew
.bss:00000268                                         ; _cleanup_exit+9r ...
.bss:0000026C ; HMENU popup_menus
.bss:0000026C _popup_menus    dd ?                    ; DATA XREF: WinMain(x,x,x,x)+EF7w
.bss:0000026C                                         ; WinMain(x,x,x,x)+F87r ...
.bss:00000270 ; HMENU hMenu
.bss:00000270 hMenu           dd ?                    ; DATA XREF: WinMain(x,x,x,x)+F0Bw
.bss:00000270                                         ; WinMain(x,x,x,x)+F1Er ...
.bss:00000274 _backhandle     dd ?                    ; DATA XREF: _start_backend+F7o
.bss:00000274                                         ; _start_backend+11Dr ...
.bss:00000278 _clipboard_length dd ?                  ; DATA XREF: _process_clipdata+30w
.bss:00000278                                         ; _process_clipdata+85w ...
.bss:0000027C _bold_font_mode dd ?                    ; DATA XREF: _init_fonts+6Dw
.bss:0000027C                                         ; _init_fonts:loc_59D2r ...
.bss:00000280 _defpal         db ?                    ; DATA XREF: _conftopalette+C4w
.bss:00000280                                         ; _conftopalette+1AEw ...
.bss:00000281 byte_281        db ?                    ; DATA XREF: _conftopalette+9Aw
.bss:00000281                                         ; _conftopalette+181w ...
.bss:00000282 byte_282        db ?                    ; DATA XREF: _conftopalette+70w
.bss:00000282                                         ; _conftopalette+154w ...
.bss:00000283                 db    ? ;
.bss:00000284                 db    ? ;
.bss:00000285                 db    ? ;
.bss:00000286                 db    ? ;
.bss:00000287                 db    ? ;
.bss:00000288                 db    ? ;
.bss:00000289                 db    ? ;
.bss:0000028A                 db    ? ;
.bss:0000028B                 db    ? ;
.bss:0000028C                 db    ? ;
.bss:0000028D                 db    ? ;
.bss:0000028E                 db    ? ;
.bss:0000028F                 db    ? ;
.bss:00000290                 db    ? ;
.bss:00000291                 db    ? ;
.bss:00000292                 db    ? ;
.bss:00000293                 db    ? ;
.bss:00000294                 db    ? ;
.bss:00000295                 db    ? ;
.bss:00000296                 db    ? ;
.bss:00000297                 db    ? ;
.bss:00000298                 db    ? ;
.bss:00000299                 db    ? ;
.bss:0000029A                 db    ? ;
.bss:0000029B                 db    ? ;
.bss:0000029C                 db    ? ;
.bss:0000029D                 db    ? ;
.bss:0000029E                 db    ? ;
.bss:0000029F                 db    ? ;
.bss:000002A0                 db    ? ;
.bss:000002A1                 db    ? ;
.bss:000002A2                 db    ? ;
.bss:000002A3                 db    ? ;
.bss:000002A4                 db    ? ;
.bss:000002A5                 db    ? ;
.bss:000002A6                 db    ? ;
.bss:000002A7                 db    ? ;
.bss:000002A8                 db    ? ;
.bss:000002A9                 db    ? ;
.bss:000002AA                 db    ? ;
.bss:000002AB                 db    ? ;
.bss:000002AC                 db    ? ;
.bss:000002AD                 db    ? ;
.bss:000002AE                 db    ? ;
.bss:000002AF                 db    ? ;
.bss:000002B0                 db    ? ;
.bss:000002B1                 db    ? ;
.bss:000002B2                 db    ? ;
.bss:000002B3                 db    ? ;
.bss:000002B4                 db    ? ;
.bss:000002B5                 db    ? ;
.bss:000002B6                 db    ? ;
.bss:000002B7                 db    ? ;
.bss:000002B8                 db    ? ;
.bss:000002B9                 db    ? ;
.bss:000002BA                 db    ? ;
.bss:000002BB                 db    ? ;
.bss:000002BC                 db    ? ;
.bss:000002BD                 db    ? ;
.bss:000002BE                 db    ? ;
.bss:000002BF                 db    ? ;
.bss:000002C0                 db    ? ;
.bss:000002C1                 db    ? ;
.bss:000002C2                 db    ? ;
.bss:000002C3                 db    ? ;
.bss:000002C4                 db    ? ;
.bss:000002C5                 db    ? ;
.bss:000002C6                 db    ? ;
.bss:000002C7                 db    ? ;
.bss:000002C8                 db    ? ;
.bss:000002C9                 db    ? ;
.bss:000002CA                 db    ? ;
.bss:000002CB                 db    ? ;
.bss:000002CC                 db    ? ;
.bss:000002CD                 db    ? ;
.bss:000002CE                 db    ? ;
.bss:000002CF                 db    ? ;
.bss:000002D0                 db    ? ;
.bss:000002D1                 db    ? ;
.bss:000002D2                 db    ? ;
.bss:000002D3                 db    ? ;
.bss:000002D4                 db    ? ;
.bss:000002D5                 db    ? ;
.bss:000002D6                 db    ? ;
.bss:000002D7                 db    ? ;
.bss:000002D8                 db    ? ;
.bss:000002D9                 db    ? ;
.bss:000002DA                 db    ? ;
.bss:000002DB                 db    ? ;
.bss:000002DC                 db    ? ;
.bss:000002DD                 db    ? ;
.bss:000002DE                 db    ? ;
.bss:000002DF                 db    ? ;
.bss:000002E0                 db    ? ;
.bss:000002E1                 db    ? ;
.bss:000002E2                 db    ? ;
.bss:000002E3                 db    ? ;
.bss:000002E4                 db    ? ;
.bss:000002E5                 db    ? ;
.bss:000002E6                 db    ? ;
.bss:000002E7                 db    ? ;
.bss:000002E8                 db    ? ;
.bss:000002E9                 db    ? ;
.bss:000002EA                 db    ? ;
.bss:000002EB                 db    ? ;
.bss:000002EC                 db    ? ;
.bss:000002ED                 db    ? ;
.bss:000002EE                 db    ? ;
.bss:000002EF                 db    ? ;
.bss:000002F0                 db    ? ;
.bss:000002F1                 db    ? ;
.bss:000002F2                 db    ? ;
.bss:000002F3                 db    ? ;
.bss:000002F4                 db    ? ;
.bss:000002F5                 db    ? ;
.bss:000002F6                 db    ? ;
.bss:000002F7                 db    ? ;
.bss:000002F8                 db    ? ;
.bss:000002F9                 db    ? ;
.bss:000002FA                 db    ? ;
.bss:000002FB                 db    ? ;
.bss:000002FC                 db    ? ;
.bss:000002FD                 db    ? ;
.bss:000002FE                 db    ? ;
.bss:000002FF                 db    ? ;
.bss:00000300                 db    ? ;
.bss:00000301                 db    ? ;
.bss:00000302                 db    ? ;
.bss:00000303                 db    ? ;
.bss:00000304                 db    ? ;
.bss:00000305                 db    ? ;
.bss:00000306                 db    ? ;
.bss:00000307                 db    ? ;
.bss:00000308                 db    ? ;
.bss:00000309                 db    ? ;
.bss:0000030A                 db    ? ;
.bss:0000030B                 db    ? ;
.bss:0000030C                 db    ? ;
.bss:0000030D                 db    ? ;
.bss:0000030E                 db    ? ;
.bss:0000030F                 db    ? ;
.bss:00000310                 db    ? ;
.bss:00000311                 db    ? ;
.bss:00000312                 db    ? ;
.bss:00000313                 db    ? ;
.bss:00000314                 db    ? ;
.bss:00000315                 db    ? ;
.bss:00000316                 db    ? ;
.bss:00000317                 db    ? ;
.bss:00000318                 db    ? ;
.bss:00000319                 db    ? ;
.bss:0000031A                 db    ? ;
.bss:0000031B                 db    ? ;
.bss:0000031C                 db    ? ;
.bss:0000031D                 db    ? ;
.bss:0000031E                 db    ? ;
.bss:0000031F                 db    ? ;
.bss:00000320                 db    ? ;
.bss:00000321                 db    ? ;
.bss:00000322                 db    ? ;
.bss:00000323                 db    ? ;
.bss:00000324                 db    ? ;
.bss:00000325                 db    ? ;
.bss:00000326                 db    ? ;
.bss:00000327                 db    ? ;
.bss:00000328                 db    ? ;
.bss:00000329                 db    ? ;
.bss:0000032A                 db    ? ;
.bss:0000032B                 db    ? ;
.bss:0000032C                 db    ? ;
.bss:0000032D                 db    ? ;
.bss:0000032E                 db    ? ;
.bss:0000032F                 db    ? ;
.bss:00000330                 db    ? ;
.bss:00000331                 db    ? ;
.bss:00000332                 db    ? ;
.bss:00000333                 db    ? ;
.bss:00000334                 db    ? ;
.bss:00000335                 db    ? ;
.bss:00000336                 db    ? ;
.bss:00000337                 db    ? ;
.bss:00000338                 db    ? ;
.bss:00000339                 db    ? ;
.bss:0000033A                 db    ? ;
.bss:0000033B                 db    ? ;
.bss:0000033C                 db    ? ;
.bss:0000033D                 db    ? ;
.bss:0000033E                 db    ? ;
.bss:0000033F                 db    ? ;
.bss:00000340                 db    ? ;
.bss:00000341                 db    ? ;
.bss:00000342                 db    ? ;
.bss:00000343                 db    ? ;
.bss:00000344                 db    ? ;
.bss:00000345                 db    ? ;
.bss:00000346                 db    ? ;
.bss:00000347                 db    ? ;
.bss:00000348                 db    ? ;
.bss:00000349                 db    ? ;
.bss:0000034A                 db    ? ;
.bss:0000034B                 db    ? ;
.bss:0000034C                 db    ? ;
.bss:0000034D                 db    ? ;
.bss:0000034E                 db    ? ;
.bss:0000034F                 db    ? ;
.bss:00000350                 db    ? ;
.bss:00000351                 db    ? ;
.bss:00000352                 db    ? ;
.bss:00000353                 db    ? ;
.bss:00000354                 db    ? ;
.bss:00000355                 db    ? ;
.bss:00000356                 db    ? ;
.bss:00000357                 db    ? ;
.bss:00000358                 db    ? ;
.bss:00000359                 db    ? ;
.bss:0000035A                 db    ? ;
.bss:0000035B                 db    ? ;
.bss:0000035C                 db    ? ;
.bss:0000035D                 db    ? ;
.bss:0000035E                 db    ? ;
.bss:0000035F                 db    ? ;
.bss:00000360                 db    ? ;
.bss:00000361                 db    ? ;
.bss:00000362                 db    ? ;
.bss:00000363                 db    ? ;
.bss:00000364                 db    ? ;
.bss:00000365                 db    ? ;
.bss:00000366                 db    ? ;
.bss:00000367                 db    ? ;
.bss:00000368                 db    ? ;
.bss:00000369                 db    ? ;
.bss:0000036A                 db    ? ;
.bss:0000036B                 db    ? ;
.bss:0000036C                 db    ? ;
.bss:0000036D                 db    ? ;
.bss:0000036E                 db    ? ;
.bss:0000036F                 db    ? ;
.bss:00000370                 db    ? ;
.bss:00000371                 db    ? ;
.bss:00000372                 db    ? ;
.bss:00000373                 db    ? ;
.bss:00000374                 db    ? ;
.bss:00000375                 db    ? ;
.bss:00000376                 db    ? ;
.bss:00000377                 db    ? ;
.bss:00000378                 db    ? ;
.bss:00000379                 db    ? ;
.bss:0000037A                 db    ? ;
.bss:0000037B                 db    ? ;
.bss:0000037C                 db    ? ;
.bss:0000037D                 db    ? ;
.bss:0000037E                 db    ? ;
.bss:0000037F                 db    ? ;
.bss:00000380                 db    ? ;
.bss:00000381                 db    ? ;
.bss:00000382                 db    ? ;
.bss:00000383                 db    ? ;
.bss:00000384                 db    ? ;
.bss:00000385                 db    ? ;
.bss:00000386                 db    ? ;
.bss:00000387                 db    ? ;
.bss:00000388                 db    ? ;
.bss:00000389                 db    ? ;
.bss:0000038A                 db    ? ;
.bss:0000038B                 db    ? ;
.bss:0000038C                 db    ? ;
.bss:0000038D                 db    ? ;
.bss:0000038E                 db    ? ;
.bss:0000038F                 db    ? ;
.bss:00000390                 db    ? ;
.bss:00000391                 db    ? ;
.bss:00000392                 db    ? ;
.bss:00000393                 db    ? ;
.bss:00000394                 db    ? ;
.bss:00000395                 db    ? ;
.bss:00000396                 db    ? ;
.bss:00000397                 db    ? ;
.bss:00000398                 db    ? ;
.bss:00000399                 db    ? ;
.bss:0000039A                 db    ? ;
.bss:0000039B                 db    ? ;
.bss:0000039C                 db    ? ;
.bss:0000039D                 db    ? ;
.bss:0000039E                 db    ? ;
.bss:0000039F                 db    ? ;
.bss:000003A0                 db    ? ;
.bss:000003A1                 db    ? ;
.bss:000003A2                 db    ? ;
.bss:000003A3                 db    ? ;
.bss:000003A4                 db    ? ;
.bss:000003A5                 db    ? ;
.bss:000003A6                 db    ? ;
.bss:000003A7                 db    ? ;
.bss:000003A8                 db    ? ;
.bss:000003A9                 db    ? ;
.bss:000003AA                 db    ? ;
.bss:000003AB                 db    ? ;
.bss:000003AC                 db    ? ;
.bss:000003AD                 db    ? ;
.bss:000003AE                 db    ? ;
.bss:000003AF                 db    ? ;
.bss:000003B0                 db    ? ;
.bss:000003B1                 db    ? ;
.bss:000003B2                 db    ? ;
.bss:000003B3                 db    ? ;
.bss:000003B4                 db    ? ;
.bss:000003B5                 db    ? ;
.bss:000003B6                 db    ? ;
.bss:000003B7                 db    ? ;
.bss:000003B8                 db    ? ;
.bss:000003B9                 db    ? ;
.bss:000003BA                 db    ? ;
.bss:000003BB                 db    ? ;
.bss:000003BC                 db    ? ;
.bss:000003BD                 db    ? ;
.bss:000003BE                 db    ? ;
.bss:000003BF                 db    ? ;
.bss:000003C0                 db    ? ;
.bss:000003C1                 db    ? ;
.bss:000003C2                 db    ? ;
.bss:000003C3                 db    ? ;
.bss:000003C4                 db    ? ;
.bss:000003C5                 db    ? ;
.bss:000003C6                 db    ? ;
.bss:000003C7                 db    ? ;
.bss:000003C8                 db    ? ;
.bss:000003C9                 db    ? ;
.bss:000003CA                 db    ? ;
.bss:000003CB                 db    ? ;
.bss:000003CC                 db    ? ;
.bss:000003CD                 db    ? ;
.bss:000003CE                 db    ? ;
.bss:000003CF                 db    ? ;
.bss:000003D0                 db    ? ;
.bss:000003D1                 db    ? ;
.bss:000003D2                 db    ? ;
.bss:000003D3                 db    ? ;
.bss:000003D4                 db    ? ;
.bss:000003D5                 db    ? ;
.bss:000003D6                 db    ? ;
.bss:000003D7                 db    ? ;
.bss:000003D8                 db    ? ;
.bss:000003D9                 db    ? ;
.bss:000003DA                 db    ? ;
.bss:000003DB                 db    ? ;
.bss:000003DC                 db    ? ;
.bss:000003DD                 db    ? ;
.bss:000003DE                 db    ? ;
.bss:000003DF                 db    ? ;
.bss:000003E0                 db    ? ;
.bss:000003E1                 db    ? ;
.bss:000003E2                 db    ? ;
.bss:000003E3                 db    ? ;
.bss:000003E4                 db    ? ;
.bss:000003E5                 db    ? ;
.bss:000003E6                 db    ? ;
.bss:000003E7                 db    ? ;
.bss:000003E8                 db    ? ;
.bss:000003E9                 db    ? ;
.bss:000003EA                 db    ? ;
.bss:000003EB                 db    ? ;
.bss:000003EC                 db    ? ;
.bss:000003ED                 db    ? ;
.bss:000003EE                 db    ? ;
.bss:000003EF                 db    ? ;
.bss:000003F0                 db    ? ;
.bss:000003F1                 db    ? ;
.bss:000003F2                 db    ? ;
.bss:000003F3                 db    ? ;
.bss:000003F4                 db    ? ;
.bss:000003F5                 db    ? ;
.bss:000003F6                 db    ? ;
.bss:000003F7                 db    ? ;
.bss:000003F8                 db    ? ;
.bss:000003F9                 db    ? ;
.bss:000003FA                 db    ? ;
.bss:000003FB                 db    ? ;
.bss:000003FC                 db    ? ;
.bss:000003FD                 db    ? ;
.bss:000003FE                 db    ? ;
.bss:000003FF                 db    ? ;
.bss:00000400                 db    ? ;
.bss:00000401                 db    ? ;
.bss:00000402                 db    ? ;
.bss:00000403                 db    ? ;
.bss:00000404                 db    ? ;
.bss:00000405                 db    ? ;
.bss:00000406                 db    ? ;
.bss:00000407                 db    ? ;
.bss:00000408                 db    ? ;
.bss:00000409                 db    ? ;
.bss:0000040A                 db    ? ;
.bss:0000040B                 db    ? ;
.bss:0000040C                 db    ? ;
.bss:0000040D                 db    ? ;
.bss:0000040E                 db    ? ;
.bss:0000040F                 db    ? ;
.bss:00000410                 db    ? ;
.bss:00000411                 db    ? ;
.bss:00000412                 db    ? ;
.bss:00000413                 db    ? ;
.bss:00000414                 db    ? ;
.bss:00000415                 db    ? ;
.bss:00000416                 db    ? ;
.bss:00000417                 db    ? ;
.bss:00000418                 db    ? ;
.bss:00000419                 db    ? ;
.bss:0000041A                 db    ? ;
.bss:0000041B                 db    ? ;
.bss:0000041C                 db    ? ;
.bss:0000041D                 db    ? ;
.bss:0000041E                 db    ? ;
.bss:0000041F                 db    ? ;
.bss:00000420                 db    ? ;
.bss:00000421                 db    ? ;
.bss:00000422                 db    ? ;
.bss:00000423                 db    ? ;
.bss:00000424                 db    ? ;
.bss:00000425                 db    ? ;
.bss:00000426                 db    ? ;
.bss:00000427                 db    ? ;
.bss:00000428                 db    ? ;
.bss:00000429                 db    ? ;
.bss:0000042A                 db    ? ;
.bss:0000042B                 db    ? ;
.bss:0000042C                 db    ? ;
.bss:0000042D                 db    ? ;
.bss:0000042E                 db    ? ;
.bss:0000042F                 db    ? ;
.bss:00000430                 db    ? ;
.bss:00000431                 db    ? ;
.bss:00000432                 db    ? ;
.bss:00000433                 db    ? ;
.bss:00000434                 db    ? ;
.bss:00000435                 db    ? ;
.bss:00000436                 db    ? ;
.bss:00000437                 db    ? ;
.bss:00000438                 db    ? ;
.bss:00000439                 db    ? ;
.bss:0000043A                 db    ? ;
.bss:0000043B                 db    ? ;
.bss:0000043C                 db    ? ;
.bss:0000043D                 db    ? ;
.bss:0000043E                 db    ? ;
.bss:0000043F                 db    ? ;
.bss:00000440                 db    ? ;
.bss:00000441                 db    ? ;
.bss:00000442                 db    ? ;
.bss:00000443                 db    ? ;
.bss:00000444                 db    ? ;
.bss:00000445                 db    ? ;
.bss:00000446                 db    ? ;
.bss:00000447                 db    ? ;
.bss:00000448                 db    ? ;
.bss:00000449                 db    ? ;
.bss:0000044A                 db    ? ;
.bss:0000044B                 db    ? ;
.bss:0000044C                 db    ? ;
.bss:0000044D                 db    ? ;
.bss:0000044E                 db    ? ;
.bss:0000044F                 db    ? ;
.bss:00000450                 db    ? ;
.bss:00000451                 db    ? ;
.bss:00000452                 db    ? ;
.bss:00000453                 db    ? ;
.bss:00000454                 db    ? ;
.bss:00000455                 db    ? ;
.bss:00000456                 db    ? ;
.bss:00000457                 db    ? ;
.bss:00000458                 db    ? ;
.bss:00000459                 db    ? ;
.bss:0000045A                 db    ? ;
.bss:0000045B                 db    ? ;
.bss:0000045C                 db    ? ;
.bss:0000045D                 db    ? ;
.bss:0000045E                 db    ? ;
.bss:0000045F                 db    ? ;
.bss:00000460                 db    ? ;
.bss:00000461                 db    ? ;
.bss:00000462                 db    ? ;
.bss:00000463                 db    ? ;
.bss:00000464                 db    ? ;
.bss:00000465                 db    ? ;
.bss:00000466                 db    ? ;
.bss:00000467                 db    ? ;
.bss:00000468                 db    ? ;
.bss:00000469                 db    ? ;
.bss:0000046A                 db    ? ;
.bss:0000046B                 db    ? ;
.bss:0000046C                 db    ? ;
.bss:0000046D                 db    ? ;
.bss:0000046E                 db    ? ;
.bss:0000046F                 db    ? ;
.bss:00000470                 db    ? ;
.bss:00000471                 db    ? ;
.bss:00000472                 db    ? ;
.bss:00000473                 db    ? ;
.bss:00000474                 db    ? ;
.bss:00000475                 db    ? ;
.bss:00000476                 db    ? ;
.bss:00000477                 db    ? ;
.bss:00000478                 db    ? ;
.bss:00000479                 db    ? ;
.bss:0000047A                 db    ? ;
.bss:0000047B                 db    ? ;
.bss:0000047C                 db    ? ;
.bss:0000047D                 db    ? ;
.bss:0000047E                 db    ? ;
.bss:0000047F                 db    ? ;
.bss:00000480                 db    ? ;
.bss:00000481                 db    ? ;
.bss:00000482                 db    ? ;
.bss:00000483                 db    ? ;
.bss:00000484                 db    ? ;
.bss:00000485                 db    ? ;
.bss:00000486                 db    ? ;
.bss:00000487                 db    ? ;
.bss:00000488                 db    ? ;
.bss:00000489                 db    ? ;
.bss:0000048A                 db    ? ;
.bss:0000048B                 db    ? ;
.bss:0000048C                 db    ? ;
.bss:0000048D                 db    ? ;
.bss:0000048E                 db    ? ;
.bss:0000048F                 db    ? ;
.bss:00000490                 db    ? ;
.bss:00000491                 db    ? ;
.bss:00000492                 db    ? ;
.bss:00000493                 db    ? ;
.bss:00000494                 db    ? ;
.bss:00000495                 db    ? ;
.bss:00000496                 db    ? ;
.bss:00000497                 db    ? ;
.bss:00000498                 db    ? ;
.bss:00000499                 db    ? ;
.bss:0000049A                 db    ? ;
.bss:0000049B                 db    ? ;
.bss:0000049C                 db    ? ;
.bss:0000049D                 db    ? ;
.bss:0000049E                 db    ? ;
.bss:0000049F                 db    ? ;
.bss:000004A0                 db    ? ;
.bss:000004A1                 db    ? ;
.bss:000004A2                 db    ? ;
.bss:000004A3                 db    ? ;
.bss:000004A4                 db    ? ;
.bss:000004A5                 db    ? ;
.bss:000004A6                 db    ? ;
.bss:000004A7                 db    ? ;
.bss:000004A8                 db    ? ;
.bss:000004A9                 db    ? ;
.bss:000004AA                 db    ? ;
.bss:000004AB                 db    ? ;
.bss:000004AC                 db    ? ;
.bss:000004AD                 db    ? ;
.bss:000004AE                 db    ? ;
.bss:000004AF                 db    ? ;
.bss:000004B0                 db    ? ;
.bss:000004B1                 db    ? ;
.bss:000004B2                 db    ? ;
.bss:000004B3                 db    ? ;
.bss:000004B4                 db    ? ;
.bss:000004B5                 db    ? ;
.bss:000004B6                 db    ? ;
.bss:000004B7                 db    ? ;
.bss:000004B8                 db    ? ;
.bss:000004B9                 db    ? ;
.bss:000004BA                 db    ? ;
.bss:000004BB                 db    ? ;
.bss:000004BC                 db    ? ;
.bss:000004BD                 db    ? ;
.bss:000004BE                 db    ? ;
.bss:000004BF                 db    ? ;
.bss:000004C0                 db    ? ;
.bss:000004C1                 db    ? ;
.bss:000004C2                 db    ? ;
.bss:000004C3                 db    ? ;
.bss:000004C4                 db    ? ;
.bss:000004C5                 db    ? ;
.bss:000004C6                 db    ? ;
.bss:000004C7                 db    ? ;
.bss:000004C8                 db    ? ;
.bss:000004C9                 db    ? ;
.bss:000004CA                 db    ? ;
.bss:000004CB                 db    ? ;
.bss:000004CC                 db    ? ;
.bss:000004CD                 db    ? ;
.bss:000004CE                 db    ? ;
.bss:000004CF                 db    ? ;
.bss:000004D0                 db    ? ;
.bss:000004D1                 db    ? ;
.bss:000004D2                 db    ? ;
.bss:000004D3                 db    ? ;
.bss:000004D4                 db    ? ;
.bss:000004D5                 db    ? ;
.bss:000004D6                 db    ? ;
.bss:000004D7                 db    ? ;
.bss:000004D8                 db    ? ;
.bss:000004D9                 db    ? ;
.bss:000004DA                 db    ? ;
.bss:000004DB                 db    ? ;
.bss:000004DC                 db    ? ;
.bss:000004DD                 db    ? ;
.bss:000004DE                 db    ? ;
.bss:000004DF                 db    ? ;
.bss:000004E0                 db    ? ;
.bss:000004E1                 db    ? ;
.bss:000004E2                 db    ? ;
.bss:000004E3                 db    ? ;
.bss:000004E4                 db    ? ;
.bss:000004E5                 db    ? ;
.bss:000004E6                 db    ? ;
.bss:000004E7                 db    ? ;
.bss:000004E8                 db    ? ;
.bss:000004E9                 db    ? ;
.bss:000004EA                 db    ? ;
.bss:000004EB                 db    ? ;
.bss:000004EC                 db    ? ;
.bss:000004ED                 db    ? ;
.bss:000004EE                 db    ? ;
.bss:000004EF                 db    ? ;
.bss:000004F0                 db    ? ;
.bss:000004F1                 db    ? ;
.bss:000004F2                 db    ? ;
.bss:000004F3                 db    ? ;
.bss:000004F4                 db    ? ;
.bss:000004F5                 db    ? ;
.bss:000004F6                 db    ? ;
.bss:000004F7                 db    ? ;
.bss:000004F8                 db    ? ;
.bss:000004F9                 db    ? ;
.bss:000004FA                 db    ? ;
.bss:000004FB                 db    ? ;
.bss:000004FC                 db    ? ;
.bss:000004FD                 db    ? ;
.bss:000004FE                 db    ? ;
.bss:000004FF                 db    ? ;
.bss:00000500                 db    ? ;
.bss:00000501                 db    ? ;
.bss:00000502                 db    ? ;
.bss:00000503                 db    ? ;
.bss:00000504                 db    ? ;
.bss:00000505                 db    ? ;
.bss:00000506                 db    ? ;
.bss:00000507                 db    ? ;
.bss:00000508                 db    ? ;
.bss:00000509                 db    ? ;
.bss:0000050A                 db    ? ;
.bss:0000050B                 db    ? ;
.bss:0000050C                 db    ? ;
.bss:0000050D                 db    ? ;
.bss:0000050E                 db    ? ;
.bss:0000050F                 db    ? ;
.bss:00000510                 db    ? ;
.bss:00000511                 db    ? ;
.bss:00000512                 db    ? ;
.bss:00000513                 db    ? ;
.bss:00000514                 db    ? ;
.bss:00000515                 db    ? ;
.bss:00000516                 db    ? ;
.bss:00000517                 db    ? ;
.bss:00000518                 db    ? ;
.bss:00000519                 db    ? ;
.bss:0000051A                 db    ? ;
.bss:0000051B                 db    ? ;
.bss:0000051C                 db    ? ;
.bss:0000051D                 db    ? ;
.bss:0000051E                 db    ? ;
.bss:0000051F                 db    ? ;
.bss:00000520                 db    ? ;
.bss:00000521                 db    ? ;
.bss:00000522                 db    ? ;
.bss:00000523                 db    ? ;
.bss:00000524                 db    ? ;
.bss:00000525                 db    ? ;
.bss:00000526                 db    ? ;
.bss:00000527                 db    ? ;
.bss:00000528                 db    ? ;
.bss:00000529                 db    ? ;
.bss:0000052A                 db    ? ;
.bss:0000052B                 db    ? ;
.bss:0000052C                 db    ? ;
.bss:0000052D                 db    ? ;
.bss:0000052E                 db    ? ;
.bss:0000052F                 db    ? ;
.bss:00000530                 db    ? ;
.bss:00000531                 db    ? ;
.bss:00000532                 db    ? ;
.bss:00000533                 db    ? ;
.bss:00000534                 db    ? ;
.bss:00000535                 db    ? ;
.bss:00000536                 db    ? ;
.bss:00000537                 db    ? ;
.bss:00000538                 db    ? ;
.bss:00000539                 db    ? ;
.bss:0000053A                 db    ? ;
.bss:0000053B                 db    ? ;
.bss:0000053C                 db    ? ;
.bss:0000053D                 db    ? ;
.bss:0000053E                 db    ? ;
.bss:0000053F                 db    ? ;
.bss:00000540                 db    ? ;
.bss:00000541                 db    ? ;
.bss:00000542                 db    ? ;
.bss:00000543                 db    ? ;
.bss:00000544                 db    ? ;
.bss:00000545                 db    ? ;
.bss:00000546                 db    ? ;
.bss:00000547                 db    ? ;
.bss:00000548                 db    ? ;
.bss:00000549                 db    ? ;
.bss:0000054A                 db    ? ;
.bss:0000054B                 db    ? ;
.bss:0000054C                 db    ? ;
.bss:0000054D                 db    ? ;
.bss:0000054E                 db    ? ;
.bss:0000054F                 db    ? ;
.bss:00000550                 db    ? ;
.bss:00000551                 db    ? ;
.bss:00000552                 db    ? ;
.bss:00000553                 db    ? ;
.bss:00000554                 db    ? ;
.bss:00000555                 db    ? ;
.bss:00000556                 db    ? ;
.bss:00000557                 db    ? ;
.bss:00000558                 db    ? ;
.bss:00000559                 db    ? ;
.bss:0000055A                 db    ? ;
.bss:0000055B                 db    ? ;
.bss:0000055C                 db    ? ;
.bss:0000055D                 db    ? ;
.bss:0000055E                 db    ? ;
.bss:0000055F                 db    ? ;
.bss:00000560                 db    ? ;
.bss:00000561                 db    ? ;
.bss:00000562                 db    ? ;
.bss:00000563                 db    ? ;
.bss:00000564                 db    ? ;
.bss:00000565                 db    ? ;
.bss:00000566                 db    ? ;
.bss:00000567                 db    ? ;
.bss:00000568                 db    ? ;
.bss:00000569                 db    ? ;
.bss:0000056A                 db    ? ;
.bss:0000056B                 db    ? ;
.bss:0000056C                 db    ? ;
.bss:0000056D                 db    ? ;
.bss:0000056E                 db    ? ;
.bss:0000056F                 db    ? ;
.bss:00000570                 db    ? ;
.bss:00000571                 db    ? ;
.bss:00000572                 db    ? ;
.bss:00000573                 db    ? ;
.bss:00000574                 db    ? ;
.bss:00000575                 db    ? ;
.bss:00000576                 db    ? ;
.bss:00000577                 db    ? ;
.bss:00000578                 db    ? ;
.bss:00000579                 db    ? ;
.bss:0000057A                 db    ? ;
.bss:0000057B                 db    ? ;
.bss:0000057C                 db    ? ;
.bss:0000057D                 db    ? ;
.bss:0000057E                 db    ? ;
.bss:0000057F                 db    ? ;
.bss:00000580                 db    ? ;
.bss:00000581                 db    ? ;
.bss:00000582                 db    ? ;
.bss:00000583                 db    ? ;
.bss:00000584                 db    ? ;
.bss:00000585                 db    ? ;
.bss:00000586                 db    ? ;
.bss:00000587                 db    ? ;
.bss:00000588                 db    ? ;
.bss:00000589                 db    ? ;
.bss:0000058A                 db    ? ;
.bss:0000058B                 db    ? ;
.bss:0000058C                 db    ? ;
.bss:0000058D                 db    ? ;
.bss:0000058E                 db    ? ;
.bss:0000058F                 db    ? ;
.bss:00000590                 db    ? ;
.bss:00000591                 db    ? ;
.bss:00000592                 db    ? ;
.bss:00000593                 db    ? ;
.bss:00000594 ; `request_resize'::`4'::ss
.bss:00000594 ?ss@?3??request_resize@@9@9 dd ?        ; DATA XREF: _request_resize:loc_5F02o
.bss:00000594                                         ; _request_resize+CEr
.bss:00000598 dword_598       dd ?                    ; DATA XREF: _request_resize+EBr
.bss:0000059C dword_59C       dd ?                    ; DATA XREF: _request_resize:loc_5F21r
.bss:000005A0 dword_5A0       dd ?                    ; DATA XREF: _request_resize+E6r
.bss:000005A4 _back           dd ?                    ; DATA XREF: _start_backend+40w
.bss:000005A4                                         ; _start_backend+45r ...
.bss:000005A8 _lasttime       dd ?                    ; DATA XREF: _click+A6r
.bss:000005A8                                         ; _click+152w
.bss:000005AC _prev_cols      dd ?                    ; DATA XREF: WndProc(x,x,x,x)+2266w
.bss:000005B0 ; int font_width
.bss:000005B0 _font_width     dd ?                    ; DATA XREF: WinMain(x,x,x,x)+A4Cw
.bss:000005B0                                         ; WinMain(x,x,x,x)+A85r ...
.bss:000005B4 _lastbtn        dd ?                    ; DATA XREF: WinMain(x,x,x,x)+EC1w
.bss:000005B4                                         ; _click:loc_9E9Cw ...
.bss:000005B8 _ldisc          dd ?                    ; DATA XREF: _start_backend+293w
.bss:000005B8                                         ; _close_session+5Er ...
.bss:000005BC _p_FlashWindowEx dd ?                   ; DATA XREF: _init_winfuncs+59w
.bss:000005BC                                         ; _flash_window+3Er ...
.bss:000005C0 _ucsdata        db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+A35o
.bss:000005C0                                         ; WinMain(x,x,x,x)+C08o ...
.bss:000005C1                 db    ? ;
.bss:000005C2                 db    ? ;
.bss:000005C3                 db    ? ;
.bss:000005C4 dword_5C4       dd ?                    ; DATA XREF: _init_fonts+364w
.bss:000005C4                                         ; _do_text_internal:loc_AD27r ...
.bss:000005C8 ; UINT CodePage
.bss:000005C8 CodePage        dd ?                    ; DATA XREF: _init_fonts+2FDw
.bss:000005C8                                         ; _init_fonts+32Dw ...
.bss:000005CC                 align 10h
.bss:000005D0 word_5D0        dw ?                    ; DATA XREF: _char_width+98r
.bss:000005D2                 db    ? ;
.bss:000005D3                 db    ? ;
.bss:000005D4                 db    ? ;
.bss:000005D5                 db    ? ;
.bss:000005D6                 db    ? ;
.bss:000005D7                 db    ? ;
.bss:000005D8                 db    ? ;
.bss:000005D9                 db    ? ;
.bss:000005DA                 db    ? ;
.bss:000005DB                 db    ? ;
.bss:000005DC                 db    ? ;
.bss:000005DD                 db    ? ;
.bss:000005DE                 db    ? ;
.bss:000005DF                 db    ? ;
.bss:000005E0                 db    ? ;
.bss:000005E1                 db    ? ;
.bss:000005E2                 db    ? ;
.bss:000005E3                 db    ? ;
.bss:000005E4                 db    ? ;
.bss:000005E5                 db    ? ;
.bss:000005E6                 db    ? ;
.bss:000005E7                 db    ? ;
.bss:000005E8                 db    ? ;
.bss:000005E9                 db    ? ;
.bss:000005EA                 db    ? ;
.bss:000005EB                 db    ? ;
.bss:000005EC                 db    ? ;
.bss:000005ED                 db    ? ;
.bss:000005EE                 db    ? ;
.bss:000005EF                 db    ? ;
.bss:000005F0                 db    ? ;
.bss:000005F1                 db    ? ;
.bss:000005F2                 db    ? ;
.bss:000005F3                 db    ? ;
.bss:000005F4                 db    ? ;
.bss:000005F5                 db    ? ;
.bss:000005F6                 db    ? ;
.bss:000005F7                 db    ? ;
.bss:000005F8                 db    ? ;
.bss:000005F9                 db    ? ;
.bss:000005FA                 db    ? ;
.bss:000005FB                 db    ? ;
.bss:000005FC                 db    ? ;
.bss:000005FD                 db    ? ;
.bss:000005FE                 db    ? ;
.bss:000005FF                 db    ? ;
.bss:00000600                 db    ? ;
.bss:00000601                 db    ? ;
.bss:00000602                 db    ? ;
.bss:00000603                 db    ? ;
.bss:00000604                 db    ? ;
.bss:00000605                 db    ? ;
.bss:00000606                 db    ? ;
.bss:00000607                 db    ? ;
.bss:00000608                 db    ? ;
.bss:00000609                 db    ? ;
.bss:0000060A                 db    ? ;
.bss:0000060B                 db    ? ;
.bss:0000060C                 db    ? ;
.bss:0000060D                 db    ? ;
.bss:0000060E                 db    ? ;
.bss:0000060F                 db    ? ;
.bss:00000610                 db    ? ;
.bss:00000611                 db    ? ;
.bss:00000612                 db    ? ;
.bss:00000613                 db    ? ;
.bss:00000614                 db    ? ;
.bss:00000615                 db    ? ;
.bss:00000616                 db    ? ;
.bss:00000617                 db    ? ;
.bss:00000618                 db    ? ;
.bss:00000619                 db    ? ;
.bss:0000061A                 db    ? ;
.bss:0000061B                 db    ? ;
.bss:0000061C                 db    ? ;
.bss:0000061D                 db    ? ;
.bss:0000061E                 db    ? ;
.bss:0000061F                 db    ? ;
.bss:00000620                 db    ? ;
.bss:00000621                 db    ? ;
.bss:00000622                 db    ? ;
.bss:00000623                 db    ? ;
.bss:00000624                 db    ? ;
.bss:00000625                 db    ? ;
.bss:00000626                 db    ? ;
.bss:00000627                 db    ? ;
.bss:00000628                 db    ? ;
.bss:00000629                 db    ? ;
.bss:0000062A                 db    ? ;
.bss:0000062B                 db    ? ;
.bss:0000062C                 db    ? ;
.bss:0000062D                 db    ? ;
.bss:0000062E                 db    ? ;
.bss:0000062F                 db    ? ;
.bss:00000630                 db    ? ;
.bss:00000631                 db    ? ;
.bss:00000632                 db    ? ;
.bss:00000633                 db    ? ;
.bss:00000634                 db    ? ;
.bss:00000635                 db    ? ;
.bss:00000636                 db    ? ;
.bss:00000637                 db    ? ;
.bss:00000638                 db    ? ;
.bss:00000639                 db    ? ;
.bss:0000063A                 db    ? ;
.bss:0000063B                 db    ? ;
.bss:0000063C                 db    ? ;
.bss:0000063D                 db    ? ;
.bss:0000063E                 db    ? ;
.bss:0000063F                 db    ? ;
.bss:00000640                 db    ? ;
.bss:00000641                 db    ? ;
.bss:00000642                 db    ? ;
.bss:00000643                 db    ? ;
.bss:00000644                 db    ? ;
.bss:00000645                 db    ? ;
.bss:00000646                 db    ? ;
.bss:00000647                 db    ? ;
.bss:00000648                 db    ? ;
.bss:00000649                 db    ? ;
.bss:0000064A                 db    ? ;
.bss:0000064B                 db    ? ;
.bss:0000064C                 db    ? ;
.bss:0000064D                 db    ? ;
.bss:0000064E                 db    ? ;
.bss:0000064F                 db    ? ;
.bss:00000650                 db    ? ;
.bss:00000651                 db    ? ;
.bss:00000652                 db    ? ;
.bss:00000653                 db    ? ;
.bss:00000654                 db    ? ;
.bss:00000655                 db    ? ;
.bss:00000656                 db    ? ;
.bss:00000657                 db    ? ;
.bss:00000658                 db    ? ;
.bss:00000659                 db    ? ;
.bss:0000065A                 db    ? ;
.bss:0000065B                 db    ? ;
.bss:0000065C                 db    ? ;
.bss:0000065D                 db    ? ;
.bss:0000065E                 db    ? ;
.bss:0000065F                 db    ? ;
.bss:00000660                 db    ? ;
.bss:00000661                 db    ? ;
.bss:00000662                 db    ? ;
.bss:00000663                 db    ? ;
.bss:00000664                 db    ? ;
.bss:00000665                 db    ? ;
.bss:00000666                 db    ? ;
.bss:00000667                 db    ? ;
.bss:00000668                 db    ? ;
.bss:00000669                 db    ? ;
.bss:0000066A                 db    ? ;
.bss:0000066B                 db    ? ;
.bss:0000066C                 db    ? ;
.bss:0000066D                 db    ? ;
.bss:0000066E                 db    ? ;
.bss:0000066F                 db    ? ;
.bss:00000670                 db    ? ;
.bss:00000671                 db    ? ;
.bss:00000672                 db    ? ;
.bss:00000673                 db    ? ;
.bss:00000674                 db    ? ;
.bss:00000675                 db    ? ;
.bss:00000676                 db    ? ;
.bss:00000677                 db    ? ;
.bss:00000678                 db    ? ;
.bss:00000679                 db    ? ;
.bss:0000067A                 db    ? ;
.bss:0000067B                 db    ? ;
.bss:0000067C                 db    ? ;
.bss:0000067D                 db    ? ;
.bss:0000067E                 db    ? ;
.bss:0000067F                 db    ? ;
.bss:00000680                 db    ? ;
.bss:00000681                 db    ? ;
.bss:00000682                 db    ? ;
.bss:00000683                 db    ? ;
.bss:00000684                 db    ? ;
.bss:00000685                 db    ? ;
.bss:00000686                 db    ? ;
.bss:00000687                 db    ? ;
.bss:00000688                 db    ? ;
.bss:00000689                 db    ? ;
.bss:0000068A                 db    ? ;
.bss:0000068B                 db    ? ;
.bss:0000068C                 db    ? ;
.bss:0000068D                 db    ? ;
.bss:0000068E                 db    ? ;
.bss:0000068F                 db    ? ;
.bss:00000690                 db    ? ;
.bss:00000691                 db    ? ;
.bss:00000692                 db    ? ;
.bss:00000693                 db    ? ;
.bss:00000694                 db    ? ;
.bss:00000695                 db    ? ;
.bss:00000696                 db    ? ;
.bss:00000697                 db    ? ;
.bss:00000698                 db    ? ;
.bss:00000699                 db    ? ;
.bss:0000069A                 db    ? ;
.bss:0000069B                 db    ? ;
.bss:0000069C                 db    ? ;
.bss:0000069D                 db    ? ;
.bss:0000069E                 db    ? ;
.bss:0000069F                 db    ? ;
.bss:000006A0                 db    ? ;
.bss:000006A1                 db    ? ;
.bss:000006A2                 db    ? ;
.bss:000006A3                 db    ? ;
.bss:000006A4                 db    ? ;
.bss:000006A5                 db    ? ;
.bss:000006A6                 db    ? ;
.bss:000006A7                 db    ? ;
.bss:000006A8                 db    ? ;
.bss:000006A9                 db    ? ;
.bss:000006AA                 db    ? ;
.bss:000006AB                 db    ? ;
.bss:000006AC                 db    ? ;
.bss:000006AD                 db    ? ;
.bss:000006AE                 db    ? ;
.bss:000006AF                 db    ? ;
.bss:000006B0                 db    ? ;
.bss:000006B1                 db    ? ;
.bss:000006B2                 db    ? ;
.bss:000006B3                 db    ? ;
.bss:000006B4                 db    ? ;
.bss:000006B5                 db    ? ;
.bss:000006B6                 db    ? ;
.bss:000006B7                 db    ? ;
.bss:000006B8                 db    ? ;
.bss:000006B9                 db    ? ;
.bss:000006BA                 db    ? ;
.bss:000006BB                 db    ? ;
.bss:000006BC                 db    ? ;
.bss:000006BD                 db    ? ;
.bss:000006BE                 db    ? ;
.bss:000006BF                 db    ? ;
.bss:000006C0                 db    ? ;
.bss:000006C1                 db    ? ;
.bss:000006C2                 db    ? ;
.bss:000006C3                 db    ? ;
.bss:000006C4                 db    ? ;
.bss:000006C5                 db    ? ;
.bss:000006C6                 db    ? ;
.bss:000006C7                 db    ? ;
.bss:000006C8                 db    ? ;
.bss:000006C9                 db    ? ;
.bss:000006CA                 db    ? ;
.bss:000006CB                 db    ? ;
.bss:000006CC                 db    ? ;
.bss:000006CD                 db    ? ;
.bss:000006CE                 db    ? ;
.bss:000006CF                 db    ? ;
.bss:000006D0                 db    ? ;
.bss:000006D1                 db    ? ;
.bss:000006D2                 db    ? ;
.bss:000006D3                 db    ? ;
.bss:000006D4                 db    ? ;
.bss:000006D5                 db    ? ;
.bss:000006D6                 db    ? ;
.bss:000006D7                 db    ? ;
.bss:000006D8                 db    ? ;
.bss:000006D9                 db    ? ;
.bss:000006DA                 db    ? ;
.bss:000006DB                 db    ? ;
.bss:000006DC                 db    ? ;
.bss:000006DD                 db    ? ;
.bss:000006DE                 db    ? ;
.bss:000006DF                 db    ? ;
.bss:000006E0                 db    ? ;
.bss:000006E1                 db    ? ;
.bss:000006E2                 db    ? ;
.bss:000006E3                 db    ? ;
.bss:000006E4                 db    ? ;
.bss:000006E5                 db    ? ;
.bss:000006E6                 db    ? ;
.bss:000006E7                 db    ? ;
.bss:000006E8                 db    ? ;
.bss:000006E9                 db    ? ;
.bss:000006EA                 db    ? ;
.bss:000006EB                 db    ? ;
.bss:000006EC                 db    ? ;
.bss:000006ED                 db    ? ;
.bss:000006EE                 db    ? ;
.bss:000006EF                 db    ? ;
.bss:000006F0                 db    ? ;
.bss:000006F1                 db    ? ;
.bss:000006F2                 db    ? ;
.bss:000006F3                 db    ? ;
.bss:000006F4                 db    ? ;
.bss:000006F5                 db    ? ;
.bss:000006F6                 db    ? ;
.bss:000006F7                 db    ? ;
.bss:000006F8                 db    ? ;
.bss:000006F9                 db    ? ;
.bss:000006FA                 db    ? ;
.bss:000006FB                 db    ? ;
.bss:000006FC                 db    ? ;
.bss:000006FD                 db    ? ;
.bss:000006FE                 db    ? ;
.bss:000006FF                 db    ? ;
.bss:00000700                 db    ? ;
.bss:00000701                 db    ? ;
.bss:00000702                 db    ? ;
.bss:00000703                 db    ? ;
.bss:00000704                 db    ? ;
.bss:00000705                 db    ? ;
.bss:00000706                 db    ? ;
.bss:00000707                 db    ? ;
.bss:00000708                 db    ? ;
.bss:00000709                 db    ? ;
.bss:0000070A                 db    ? ;
.bss:0000070B                 db    ? ;
.bss:0000070C                 db    ? ;
.bss:0000070D                 db    ? ;
.bss:0000070E                 db    ? ;
.bss:0000070F                 db    ? ;
.bss:00000710                 db    ? ;
.bss:00000711                 db    ? ;
.bss:00000712                 db    ? ;
.bss:00000713                 db    ? ;
.bss:00000714                 db    ? ;
.bss:00000715                 db    ? ;
.bss:00000716                 db    ? ;
.bss:00000717                 db    ? ;
.bss:00000718                 db    ? ;
.bss:00000719                 db    ? ;
.bss:0000071A                 db    ? ;
.bss:0000071B                 db    ? ;
.bss:0000071C                 db    ? ;
.bss:0000071D                 db    ? ;
.bss:0000071E                 db    ? ;
.bss:0000071F                 db    ? ;
.bss:00000720                 db    ? ;
.bss:00000721                 db    ? ;
.bss:00000722                 db    ? ;
.bss:00000723                 db    ? ;
.bss:00000724                 db    ? ;
.bss:00000725                 db    ? ;
.bss:00000726                 db    ? ;
.bss:00000727                 db    ? ;
.bss:00000728                 db    ? ;
.bss:00000729                 db    ? ;
.bss:0000072A                 db    ? ;
.bss:0000072B                 db    ? ;
.bss:0000072C                 db    ? ;
.bss:0000072D                 db    ? ;
.bss:0000072E                 db    ? ;
.bss:0000072F                 db    ? ;
.bss:00000730                 db    ? ;
.bss:00000731                 db    ? ;
.bss:00000732                 db    ? ;
.bss:00000733                 db    ? ;
.bss:00000734                 db    ? ;
.bss:00000735                 db    ? ;
.bss:00000736                 db    ? ;
.bss:00000737                 db    ? ;
.bss:00000738                 db    ? ;
.bss:00000739                 db    ? ;
.bss:0000073A                 db    ? ;
.bss:0000073B                 db    ? ;
.bss:0000073C                 db    ? ;
.bss:0000073D                 db    ? ;
.bss:0000073E                 db    ? ;
.bss:0000073F                 db    ? ;
.bss:00000740                 db    ? ;
.bss:00000741                 db    ? ;
.bss:00000742                 db    ? ;
.bss:00000743                 db    ? ;
.bss:00000744                 db    ? ;
.bss:00000745                 db    ? ;
.bss:00000746                 db    ? ;
.bss:00000747                 db    ? ;
.bss:00000748                 db    ? ;
.bss:00000749                 db    ? ;
.bss:0000074A                 db    ? ;
.bss:0000074B                 db    ? ;
.bss:0000074C                 db    ? ;
.bss:0000074D                 db    ? ;
.bss:0000074E                 db    ? ;
.bss:0000074F                 db    ? ;
.bss:00000750                 db    ? ;
.bss:00000751                 db    ? ;
.bss:00000752                 db    ? ;
.bss:00000753                 db    ? ;
.bss:00000754                 db    ? ;
.bss:00000755                 db    ? ;
.bss:00000756                 db    ? ;
.bss:00000757                 db    ? ;
.bss:00000758                 db    ? ;
.bss:00000759                 db    ? ;
.bss:0000075A                 db    ? ;
.bss:0000075B                 db    ? ;
.bss:0000075C                 db    ? ;
.bss:0000075D                 db    ? ;
.bss:0000075E                 db    ? ;
.bss:0000075F                 db    ? ;
.bss:00000760                 db    ? ;
.bss:00000761                 db    ? ;
.bss:00000762                 db    ? ;
.bss:00000763                 db    ? ;
.bss:00000764                 db    ? ;
.bss:00000765                 db    ? ;
.bss:00000766                 db    ? ;
.bss:00000767                 db    ? ;
.bss:00000768                 db    ? ;
.bss:00000769                 db    ? ;
.bss:0000076A                 db    ? ;
.bss:0000076B                 db    ? ;
.bss:0000076C                 db    ? ;
.bss:0000076D                 db    ? ;
.bss:0000076E                 db    ? ;
.bss:0000076F                 db    ? ;
.bss:00000770                 db    ? ;
.bss:00000771                 db    ? ;
.bss:00000772                 db    ? ;
.bss:00000773                 db    ? ;
.bss:00000774                 db    ? ;
.bss:00000775                 db    ? ;
.bss:00000776                 db    ? ;
.bss:00000777                 db    ? ;
.bss:00000778                 db    ? ;
.bss:00000779                 db    ? ;
.bss:0000077A                 db    ? ;
.bss:0000077B                 db    ? ;
.bss:0000077C                 db    ? ;
.bss:0000077D                 db    ? ;
.bss:0000077E                 db    ? ;
.bss:0000077F                 db    ? ;
.bss:00000780                 db    ? ;
.bss:00000781                 db    ? ;
.bss:00000782                 db    ? ;
.bss:00000783                 db    ? ;
.bss:00000784                 db    ? ;
.bss:00000785                 db    ? ;
.bss:00000786                 db    ? ;
.bss:00000787                 db    ? ;
.bss:00000788                 db    ? ;
.bss:00000789                 db    ? ;
.bss:0000078A                 db    ? ;
.bss:0000078B                 db    ? ;
.bss:0000078C                 db    ? ;
.bss:0000078D                 db    ? ;
.bss:0000078E                 db    ? ;
.bss:0000078F                 db    ? ;
.bss:00000790                 db    ? ;
.bss:00000791                 db    ? ;
.bss:00000792                 db    ? ;
.bss:00000793                 db    ? ;
.bss:00000794                 db    ? ;
.bss:00000795                 db    ? ;
.bss:00000796                 db    ? ;
.bss:00000797                 db    ? ;
.bss:00000798                 db    ? ;
.bss:00000799                 db    ? ;
.bss:0000079A                 db    ? ;
.bss:0000079B                 db    ? ;
.bss:0000079C                 db    ? ;
.bss:0000079D                 db    ? ;
.bss:0000079E                 db    ? ;
.bss:0000079F                 db    ? ;
.bss:000007A0                 db    ? ;
.bss:000007A1                 db    ? ;
.bss:000007A2                 db    ? ;
.bss:000007A3                 db    ? ;
.bss:000007A4                 db    ? ;
.bss:000007A5                 db    ? ;
.bss:000007A6                 db    ? ;
.bss:000007A7                 db    ? ;
.bss:000007A8                 db    ? ;
.bss:000007A9                 db    ? ;
.bss:000007AA                 db    ? ;
.bss:000007AB                 db    ? ;
.bss:000007AC                 db    ? ;
.bss:000007AD                 db    ? ;
.bss:000007AE                 db    ? ;
.bss:000007AF                 db    ? ;
.bss:000007B0                 db    ? ;
.bss:000007B1                 db    ? ;
.bss:000007B2                 db    ? ;
.bss:000007B3                 db    ? ;
.bss:000007B4                 db    ? ;
.bss:000007B5                 db    ? ;
.bss:000007B6                 db    ? ;
.bss:000007B7                 db    ? ;
.bss:000007B8                 db    ? ;
.bss:000007B9                 db    ? ;
.bss:000007BA                 db    ? ;
.bss:000007BB                 db    ? ;
.bss:000007BC                 db    ? ;
.bss:000007BD                 db    ? ;
.bss:000007BE                 db    ? ;
.bss:000007BF                 db    ? ;
.bss:000007C0                 db    ? ;
.bss:000007C1                 db    ? ;
.bss:000007C2                 db    ? ;
.bss:000007C3                 db    ? ;
.bss:000007C4                 db    ? ;
.bss:000007C5                 db    ? ;
.bss:000007C6                 db    ? ;
.bss:000007C7                 db    ? ;
.bss:000007C8                 db    ? ;
.bss:000007C9                 db    ? ;
.bss:000007CA                 db    ? ;
.bss:000007CB                 db    ? ;
.bss:000007CC                 db    ? ;
.bss:000007CD                 db    ? ;
.bss:000007CE                 db    ? ;
.bss:000007CF                 db    ? ;
.bss:000007D0 word_7D0        dw ?                    ; DATA XREF: _char_width+6Dr
.bss:000007D2                 db    ? ;
.bss:000007D3                 db    ? ;
.bss:000007D4                 db    ? ;
.bss:000007D5                 db    ? ;
.bss:000007D6                 db    ? ;
.bss:000007D7                 db    ? ;
.bss:000007D8                 db    ? ;
.bss:000007D9                 db    ? ;
.bss:000007DA                 db    ? ;
.bss:000007DB                 db    ? ;
.bss:000007DC                 db    ? ;
.bss:000007DD                 db    ? ;
.bss:000007DE                 db    ? ;
.bss:000007DF                 db    ? ;
.bss:000007E0                 db    ? ;
.bss:000007E1                 db    ? ;
.bss:000007E2                 db    ? ;
.bss:000007E3                 db    ? ;
.bss:000007E4                 db    ? ;
.bss:000007E5                 db    ? ;
.bss:000007E6                 db    ? ;
.bss:000007E7                 db    ? ;
.bss:000007E8                 db    ? ;
.bss:000007E9                 db    ? ;
.bss:000007EA                 db    ? ;
.bss:000007EB                 db    ? ;
.bss:000007EC                 db    ? ;
.bss:000007ED                 db    ? ;
.bss:000007EE                 db    ? ;
.bss:000007EF                 db    ? ;
.bss:000007F0                 db    ? ;
.bss:000007F1                 db    ? ;
.bss:000007F2                 db    ? ;
.bss:000007F3                 db    ? ;
.bss:000007F4                 db    ? ;
.bss:000007F5                 db    ? ;
.bss:000007F6                 db    ? ;
.bss:000007F7                 db    ? ;
.bss:000007F8                 db    ? ;
.bss:000007F9                 db    ? ;
.bss:000007FA                 db    ? ;
.bss:000007FB                 db    ? ;
.bss:000007FC                 db    ? ;
.bss:000007FD                 db    ? ;
.bss:000007FE                 db    ? ;
.bss:000007FF                 db    ? ;
.bss:00000800                 db    ? ;
.bss:00000801                 db    ? ;
.bss:00000802                 db    ? ;
.bss:00000803                 db    ? ;
.bss:00000804                 db    ? ;
.bss:00000805                 db    ? ;
.bss:00000806                 db    ? ;
.bss:00000807                 db    ? ;
.bss:00000808                 db    ? ;
.bss:00000809                 db    ? ;
.bss:0000080A                 db    ? ;
.bss:0000080B                 db    ? ;
.bss:0000080C                 db    ? ;
.bss:0000080D                 db    ? ;
.bss:0000080E                 db    ? ;
.bss:0000080F                 db    ? ;
.bss:00000810                 db    ? ;
.bss:00000811                 db    ? ;
.bss:00000812                 db    ? ;
.bss:00000813                 db    ? ;
.bss:00000814                 db    ? ;
.bss:00000815                 db    ? ;
.bss:00000816                 db    ? ;
.bss:00000817                 db    ? ;
.bss:00000818                 db    ? ;
.bss:00000819                 db    ? ;
.bss:0000081A                 db    ? ;
.bss:0000081B                 db    ? ;
.bss:0000081C                 db    ? ;
.bss:0000081D                 db    ? ;
.bss:0000081E                 db    ? ;
.bss:0000081F                 db    ? ;
.bss:00000820                 db    ? ;
.bss:00000821                 db    ? ;
.bss:00000822                 db    ? ;
.bss:00000823                 db    ? ;
.bss:00000824                 db    ? ;
.bss:00000825                 db    ? ;
.bss:00000826                 db    ? ;
.bss:00000827                 db    ? ;
.bss:00000828                 db    ? ;
.bss:00000829                 db    ? ;
.bss:0000082A                 db    ? ;
.bss:0000082B                 db    ? ;
.bss:0000082C                 db    ? ;
.bss:0000082D                 db    ? ;
.bss:0000082E                 db    ? ;
.bss:0000082F                 db    ? ;
.bss:00000830                 db    ? ;
.bss:00000831                 db    ? ;
.bss:00000832                 db    ? ;
.bss:00000833                 db    ? ;
.bss:00000834                 db    ? ;
.bss:00000835                 db    ? ;
.bss:00000836                 db    ? ;
.bss:00000837                 db    ? ;
.bss:00000838                 db    ? ;
.bss:00000839                 db    ? ;
.bss:0000083A                 db    ? ;
.bss:0000083B                 db    ? ;
.bss:0000083C                 db    ? ;
.bss:0000083D                 db    ? ;
.bss:0000083E                 db    ? ;
.bss:0000083F                 db    ? ;
.bss:00000840                 db    ? ;
.bss:00000841                 db    ? ;
.bss:00000842                 db    ? ;
.bss:00000843                 db    ? ;
.bss:00000844                 db    ? ;
.bss:00000845                 db    ? ;
.bss:00000846                 db    ? ;
.bss:00000847                 db    ? ;
.bss:00000848                 db    ? ;
.bss:00000849                 db    ? ;
.bss:0000084A                 db    ? ;
.bss:0000084B                 db    ? ;
.bss:0000084C                 db    ? ;
.bss:0000084D                 db    ? ;
.bss:0000084E                 db    ? ;
.bss:0000084F                 db    ? ;
.bss:00000850                 db    ? ;
.bss:00000851                 db    ? ;
.bss:00000852                 db    ? ;
.bss:00000853                 db    ? ;
.bss:00000854                 db    ? ;
.bss:00000855                 db    ? ;
.bss:00000856                 db    ? ;
.bss:00000857                 db    ? ;
.bss:00000858                 db    ? ;
.bss:00000859                 db    ? ;
.bss:0000085A                 db    ? ;
.bss:0000085B                 db    ? ;
.bss:0000085C                 db    ? ;
.bss:0000085D                 db    ? ;
.bss:0000085E                 db    ? ;
.bss:0000085F                 db    ? ;
.bss:00000860                 db    ? ;
.bss:00000861                 db    ? ;
.bss:00000862                 db    ? ;
.bss:00000863                 db    ? ;
.bss:00000864                 db    ? ;
.bss:00000865                 db    ? ;
.bss:00000866                 db    ? ;
.bss:00000867                 db    ? ;
.bss:00000868                 db    ? ;
.bss:00000869                 db    ? ;
.bss:0000086A                 db    ? ;
.bss:0000086B                 db    ? ;
.bss:0000086C                 db    ? ;
.bss:0000086D                 db    ? ;
.bss:0000086E                 db    ? ;
.bss:0000086F                 db    ? ;
.bss:00000870                 db    ? ;
.bss:00000871                 db    ? ;
.bss:00000872                 db    ? ;
.bss:00000873                 db    ? ;
.bss:00000874                 db    ? ;
.bss:00000875                 db    ? ;
.bss:00000876                 db    ? ;
.bss:00000877                 db    ? ;
.bss:00000878                 db    ? ;
.bss:00000879                 db    ? ;
.bss:0000087A                 db    ? ;
.bss:0000087B                 db    ? ;
.bss:0000087C                 db    ? ;
.bss:0000087D                 db    ? ;
.bss:0000087E                 db    ? ;
.bss:0000087F                 db    ? ;
.bss:00000880                 db    ? ;
.bss:00000881                 db    ? ;
.bss:00000882                 db    ? ;
.bss:00000883                 db    ? ;
.bss:00000884                 db    ? ;
.bss:00000885                 db    ? ;
.bss:00000886                 db    ? ;
.bss:00000887                 db    ? ;
.bss:00000888                 db    ? ;
.bss:00000889                 db    ? ;
.bss:0000088A                 db    ? ;
.bss:0000088B                 db    ? ;
.bss:0000088C                 db    ? ;
.bss:0000088D                 db    ? ;
.bss:0000088E                 db    ? ;
.bss:0000088F                 db    ? ;
.bss:00000890                 db    ? ;
.bss:00000891                 db    ? ;
.bss:00000892                 db    ? ;
.bss:00000893                 db    ? ;
.bss:00000894                 db    ? ;
.bss:00000895                 db    ? ;
.bss:00000896                 db    ? ;
.bss:00000897                 db    ? ;
.bss:00000898                 db    ? ;
.bss:00000899                 db    ? ;
.bss:0000089A                 db    ? ;
.bss:0000089B                 db    ? ;
.bss:0000089C                 db    ? ;
.bss:0000089D                 db    ? ;
.bss:0000089E                 db    ? ;
.bss:0000089F                 db    ? ;
.bss:000008A0                 db    ? ;
.bss:000008A1                 db    ? ;
.bss:000008A2                 db    ? ;
.bss:000008A3                 db    ? ;
.bss:000008A4                 db    ? ;
.bss:000008A5                 db    ? ;
.bss:000008A6                 db    ? ;
.bss:000008A7                 db    ? ;
.bss:000008A8                 db    ? ;
.bss:000008A9                 db    ? ;
.bss:000008AA                 db    ? ;
.bss:000008AB                 db    ? ;
.bss:000008AC                 db    ? ;
.bss:000008AD                 db    ? ;
.bss:000008AE                 db    ? ;
.bss:000008AF                 db    ? ;
.bss:000008B0                 db    ? ;
.bss:000008B1                 db    ? ;
.bss:000008B2                 db    ? ;
.bss:000008B3                 db    ? ;
.bss:000008B4                 db    ? ;
.bss:000008B5                 db    ? ;
.bss:000008B6                 db    ? ;
.bss:000008B7                 db    ? ;
.bss:000008B8                 db    ? ;
.bss:000008B9                 db    ? ;
.bss:000008BA                 db    ? ;
.bss:000008BB                 db    ? ;
.bss:000008BC                 db    ? ;
.bss:000008BD                 db    ? ;
.bss:000008BE                 db    ? ;
.bss:000008BF                 db    ? ;
.bss:000008C0                 db    ? ;
.bss:000008C1                 db    ? ;
.bss:000008C2                 db    ? ;
.bss:000008C3                 db    ? ;
.bss:000008C4                 db    ? ;
.bss:000008C5                 db    ? ;
.bss:000008C6                 db    ? ;
.bss:000008C7                 db    ? ;
.bss:000008C8                 db    ? ;
.bss:000008C9                 db    ? ;
.bss:000008CA                 db    ? ;
.bss:000008CB                 db    ? ;
.bss:000008CC                 db    ? ;
.bss:000008CD                 db    ? ;
.bss:000008CE                 db    ? ;
.bss:000008CF                 db    ? ;
.bss:000008D0                 db    ? ;
.bss:000008D1                 db    ? ;
.bss:000008D2                 db    ? ;
.bss:000008D3                 db    ? ;
.bss:000008D4                 db    ? ;
.bss:000008D5                 db    ? ;
.bss:000008D6                 db    ? ;
.bss:000008D7                 db    ? ;
.bss:000008D8                 db    ? ;
.bss:000008D9                 db    ? ;
.bss:000008DA                 db    ? ;
.bss:000008DB                 db    ? ;
.bss:000008DC                 db    ? ;
.bss:000008DD                 db    ? ;
.bss:000008DE                 db    ? ;
.bss:000008DF                 db    ? ;
.bss:000008E0                 db    ? ;
.bss:000008E1                 db    ? ;
.bss:000008E2                 db    ? ;
.bss:000008E3                 db    ? ;
.bss:000008E4                 db    ? ;
.bss:000008E5                 db    ? ;
.bss:000008E6                 db    ? ;
.bss:000008E7                 db    ? ;
.bss:000008E8                 db    ? ;
.bss:000008E9                 db    ? ;
.bss:000008EA                 db    ? ;
.bss:000008EB                 db    ? ;
.bss:000008EC                 db    ? ;
.bss:000008ED                 db    ? ;
.bss:000008EE                 db    ? ;
.bss:000008EF                 db    ? ;
.bss:000008F0                 db    ? ;
.bss:000008F1                 db    ? ;
.bss:000008F2                 db    ? ;
.bss:000008F3                 db    ? ;
.bss:000008F4                 db    ? ;
.bss:000008F5                 db    ? ;
.bss:000008F6                 db    ? ;
.bss:000008F7                 db    ? ;
.bss:000008F8                 db    ? ;
.bss:000008F9                 db    ? ;
.bss:000008FA                 db    ? ;
.bss:000008FB                 db    ? ;
.bss:000008FC                 db    ? ;
.bss:000008FD                 db    ? ;
.bss:000008FE                 db    ? ;
.bss:000008FF                 db    ? ;
.bss:00000900                 db    ? ;
.bss:00000901                 db    ? ;
.bss:00000902                 db    ? ;
.bss:00000903                 db    ? ;
.bss:00000904                 db    ? ;
.bss:00000905                 db    ? ;
.bss:00000906                 db    ? ;
.bss:00000907                 db    ? ;
.bss:00000908                 db    ? ;
.bss:00000909                 db    ? ;
.bss:0000090A                 db    ? ;
.bss:0000090B                 db    ? ;
.bss:0000090C                 db    ? ;
.bss:0000090D                 db    ? ;
.bss:0000090E                 db    ? ;
.bss:0000090F                 db    ? ;
.bss:00000910                 db    ? ;
.bss:00000911                 db    ? ;
.bss:00000912                 db    ? ;
.bss:00000913                 db    ? ;
.bss:00000914                 db    ? ;
.bss:00000915                 db    ? ;
.bss:00000916                 db    ? ;
.bss:00000917                 db    ? ;
.bss:00000918                 db    ? ;
.bss:00000919                 db    ? ;
.bss:0000091A                 db    ? ;
.bss:0000091B                 db    ? ;
.bss:0000091C                 db    ? ;
.bss:0000091D                 db    ? ;
.bss:0000091E                 db    ? ;
.bss:0000091F                 db    ? ;
.bss:00000920 unk_920         db    ? ;               ; DATA XREF: .data:$SG89132o
.bss:00000921                 db    ? ;
.bss:00000922                 db    ? ;
.bss:00000923                 db    ? ;
.bss:00000924                 db    ? ;
.bss:00000925                 db    ? ;
.bss:00000926                 db    ? ;
.bss:00000927                 db    ? ;
.bss:00000928                 db    ? ;
.bss:00000929                 db    ? ;
.bss:0000092A                 db    ? ;
.bss:0000092B                 db    ? ;
.bss:0000092C                 db    ? ;
.bss:0000092D                 db    ? ;
.bss:0000092E                 db    ? ;
.bss:0000092F                 db    ? ;
.bss:00000930                 db    ? ;
.bss:00000931                 db    ? ;
.bss:00000932                 db    ? ;
.bss:00000933                 db    ? ;
.bss:00000934                 db    ? ;
.bss:00000935                 db    ? ;
.bss:00000936                 db    ? ;
.bss:00000937                 db    ? ;
.bss:00000938                 db    ? ;
.bss:00000939                 db    ? ;
.bss:0000093A                 db    ? ;
.bss:0000093B                 db    ? ;
.bss:0000093C                 db    ? ;
.bss:0000093D                 db    ? ;
.bss:0000093E                 db    ? ;
.bss:0000093F                 db    ? ;
.bss:00000940                 db    ? ;
.bss:00000941                 db    ? ;
.bss:00000942                 db    ? ;
.bss:00000943                 db    ? ;
.bss:00000944                 db    ? ;
.bss:00000945                 db    ? ;
.bss:00000946                 db    ? ;
.bss:00000947                 db    ? ;
.bss:00000948                 db    ? ;
.bss:00000949                 db    ? ;
.bss:0000094A                 db    ? ;
.bss:0000094B                 db    ? ;
.bss:0000094C                 db    ? ;
.bss:0000094D                 db    ? ;
.bss:0000094E                 db    ? ;
.bss:0000094F                 db    ? ;
.bss:00000950                 db    ? ;
.bss:00000951                 db    ? ;
.bss:00000952                 db    ? ;
.bss:00000953                 db    ? ;
.bss:00000954                 db    ? ;
.bss:00000955                 db    ? ;
.bss:00000956                 db    ? ;
.bss:00000957                 db    ? ;
.bss:00000958                 db    ? ;
.bss:00000959                 db    ? ;
.bss:0000095A                 db    ? ;
.bss:0000095B                 db    ? ;
.bss:0000095C                 db    ? ;
.bss:0000095D                 db    ? ;
.bss:0000095E                 db    ? ;
.bss:0000095F                 db    ? ;
.bss:00000960                 db    ? ;
.bss:00000961                 db    ? ;
.bss:00000962                 db    ? ;
.bss:00000963                 db    ? ;
.bss:00000964                 db    ? ;
.bss:00000965                 db    ? ;
.bss:00000966                 db    ? ;
.bss:00000967                 db    ? ;
.bss:00000968                 db    ? ;
.bss:00000969                 db    ? ;
.bss:0000096A                 db    ? ;
.bss:0000096B                 db    ? ;
.bss:0000096C                 db    ? ;
.bss:0000096D                 db    ? ;
.bss:0000096E                 db    ? ;
.bss:0000096F                 db    ? ;
.bss:00000970                 db    ? ;
.bss:00000971                 db    ? ;
.bss:00000972                 db    ? ;
.bss:00000973                 db    ? ;
.bss:00000974                 db    ? ;
.bss:00000975                 db    ? ;
.bss:00000976                 db    ? ;
.bss:00000977                 db    ? ;
.bss:00000978                 db    ? ;
.bss:00000979                 db    ? ;
.bss:0000097A                 db    ? ;
.bss:0000097B                 db    ? ;
.bss:0000097C                 db    ? ;
.bss:0000097D                 db    ? ;
.bss:0000097E                 db    ? ;
.bss:0000097F                 db    ? ;
.bss:00000980                 db    ? ;
.bss:00000981                 db    ? ;
.bss:00000982                 db    ? ;
.bss:00000983                 db    ? ;
.bss:00000984                 db    ? ;
.bss:00000985                 db    ? ;
.bss:00000986                 db    ? ;
.bss:00000987                 db    ? ;
.bss:00000988                 db    ? ;
.bss:00000989                 db    ? ;
.bss:0000098A                 db    ? ;
.bss:0000098B                 db    ? ;
.bss:0000098C                 db    ? ;
.bss:0000098D                 db    ? ;
.bss:0000098E                 db    ? ;
.bss:0000098F                 db    ? ;
.bss:00000990                 db    ? ;
.bss:00000991                 db    ? ;
.bss:00000992                 db    ? ;
.bss:00000993                 db    ? ;
.bss:00000994                 db    ? ;
.bss:00000995                 db    ? ;
.bss:00000996                 db    ? ;
.bss:00000997                 db    ? ;
.bss:00000998                 db    ? ;
.bss:00000999                 db    ? ;
.bss:0000099A                 db    ? ;
.bss:0000099B                 db    ? ;
.bss:0000099C                 db    ? ;
.bss:0000099D                 db    ? ;
.bss:0000099E                 db    ? ;
.bss:0000099F                 db    ? ;
.bss:000009A0                 db    ? ;
.bss:000009A1                 db    ? ;
.bss:000009A2                 db    ? ;
.bss:000009A3                 db    ? ;
.bss:000009A4                 db    ? ;
.bss:000009A5                 db    ? ;
.bss:000009A6                 db    ? ;
.bss:000009A7                 db    ? ;
.bss:000009A8                 db    ? ;
.bss:000009A9                 db    ? ;
.bss:000009AA                 db    ? ;
.bss:000009AB                 db    ? ;
.bss:000009AC                 db    ? ;
.bss:000009AD                 db    ? ;
.bss:000009AE                 db    ? ;
.bss:000009AF                 db    ? ;
.bss:000009B0                 db    ? ;
.bss:000009B1                 db    ? ;
.bss:000009B2                 db    ? ;
.bss:000009B3                 db    ? ;
.bss:000009B4                 db    ? ;
.bss:000009B5                 db    ? ;
.bss:000009B6                 db    ? ;
.bss:000009B7                 db    ? ;
.bss:000009B8                 db    ? ;
.bss:000009B9                 db    ? ;
.bss:000009BA                 db    ? ;
.bss:000009BB                 db    ? ;
.bss:000009BC                 db    ? ;
.bss:000009BD                 db    ? ;
.bss:000009BE                 db    ? ;
.bss:000009BF                 db    ? ;
.bss:000009C0                 db    ? ;
.bss:000009C1                 db    ? ;
.bss:000009C2                 db    ? ;
.bss:000009C3                 db    ? ;
.bss:000009C4                 db    ? ;
.bss:000009C5                 db    ? ;
.bss:000009C6                 db    ? ;
.bss:000009C7                 db    ? ;
.bss:000009C8                 db    ? ;
.bss:000009C9                 db    ? ;
.bss:000009CA                 db    ? ;
.bss:000009CB                 db    ? ;
.bss:000009CC                 db    ? ;
.bss:000009CD                 db    ? ;
.bss:000009CE                 db    ? ;
.bss:000009CF                 db    ? ;
.bss:000009D0                 db    ? ;
.bss:000009D1                 db    ? ;
.bss:000009D2                 db    ? ;
.bss:000009D3                 db    ? ;
.bss:000009D4                 db    ? ;
.bss:000009D5                 db    ? ;
.bss:000009D6                 db    ? ;
.bss:000009D7                 db    ? ;
.bss:000009D8                 db    ? ;
.bss:000009D9                 db    ? ;
.bss:000009DA                 db    ? ;
.bss:000009DB                 db    ? ;
.bss:000009DC                 db    ? ;
.bss:000009DD                 db    ? ;
.bss:000009DE                 db    ? ;
.bss:000009DF                 db    ? ;
.bss:000009E0                 db    ? ;
.bss:000009E1                 db    ? ;
.bss:000009E2                 db    ? ;
.bss:000009E3                 db    ? ;
.bss:000009E4                 db    ? ;
.bss:000009E5                 db    ? ;
.bss:000009E6                 db    ? ;
.bss:000009E7                 db    ? ;
.bss:000009E8                 db    ? ;
.bss:000009E9                 db    ? ;
.bss:000009EA                 db    ? ;
.bss:000009EB                 db    ? ;
.bss:000009EC                 db    ? ;
.bss:000009ED                 db    ? ;
.bss:000009EE                 db    ? ;
.bss:000009EF                 db    ? ;
.bss:000009F0                 db    ? ;
.bss:000009F1                 db    ? ;
.bss:000009F2                 db    ? ;
.bss:000009F3                 db    ? ;
.bss:000009F4                 db    ? ;
.bss:000009F5                 db    ? ;
.bss:000009F6                 db    ? ;
.bss:000009F7                 db    ? ;
.bss:000009F8                 db    ? ;
.bss:000009F9                 db    ? ;
.bss:000009FA                 db    ? ;
.bss:000009FB                 db    ? ;
.bss:000009FC                 db    ? ;
.bss:000009FD                 db    ? ;
.bss:000009FE                 db    ? ;
.bss:000009FF                 db    ? ;
.bss:00000A00                 db    ? ;
.bss:00000A01                 db    ? ;
.bss:00000A02                 db    ? ;
.bss:00000A03                 db    ? ;
.bss:00000A04                 db    ? ;
.bss:00000A05                 db    ? ;
.bss:00000A06                 db    ? ;
.bss:00000A07                 db    ? ;
.bss:00000A08                 db    ? ;
.bss:00000A09                 db    ? ;
.bss:00000A0A                 db    ? ;
.bss:00000A0B                 db    ? ;
.bss:00000A0C                 db    ? ;
.bss:00000A0D                 db    ? ;
.bss:00000A0E                 db    ? ;
.bss:00000A0F                 db    ? ;
.bss:00000A10                 db    ? ;
.bss:00000A11                 db    ? ;
.bss:00000A12                 db    ? ;
.bss:00000A13                 db    ? ;
.bss:00000A14                 db    ? ;
.bss:00000A15                 db    ? ;
.bss:00000A16                 db    ? ;
.bss:00000A17                 db    ? ;
.bss:00000A18                 db    ? ;
.bss:00000A19                 db    ? ;
.bss:00000A1A                 db    ? ;
.bss:00000A1B                 db    ? ;
.bss:00000A1C                 db    ? ;
.bss:00000A1D                 db    ? ;
.bss:00000A1E                 db    ? ;
.bss:00000A1F                 db    ? ;
.bss:00000A20                 db    ? ;
.bss:00000A21                 db    ? ;
.bss:00000A22                 db    ? ;
.bss:00000A23                 db    ? ;
.bss:00000A24                 db    ? ;
.bss:00000A25                 db    ? ;
.bss:00000A26                 db    ? ;
.bss:00000A27                 db    ? ;
.bss:00000A28                 db    ? ;
.bss:00000A29                 db    ? ;
.bss:00000A2A                 db    ? ;
.bss:00000A2B                 db    ? ;
.bss:00000A2C                 db    ? ;
.bss:00000A2D                 db    ? ;
.bss:00000A2E                 db    ? ;
.bss:00000A2F                 db    ? ;
.bss:00000A30                 db    ? ;
.bss:00000A31                 db    ? ;
.bss:00000A32                 db    ? ;
.bss:00000A33                 db    ? ;
.bss:00000A34                 db    ? ;
.bss:00000A35                 db    ? ;
.bss:00000A36                 db    ? ;
.bss:00000A37                 db    ? ;
.bss:00000A38                 db    ? ;
.bss:00000A39                 db    ? ;
.bss:00000A3A                 db    ? ;
.bss:00000A3B                 db    ? ;
.bss:00000A3C                 db    ? ;
.bss:00000A3D                 db    ? ;
.bss:00000A3E                 db    ? ;
.bss:00000A3F                 db    ? ;
.bss:00000A40                 db    ? ;
.bss:00000A41                 db    ? ;
.bss:00000A42                 db    ? ;
.bss:00000A43                 db    ? ;
.bss:00000A44                 db    ? ;
.bss:00000A45                 db    ? ;
.bss:00000A46                 db    ? ;
.bss:00000A47                 db    ? ;
.bss:00000A48                 db    ? ;
.bss:00000A49                 db    ? ;
.bss:00000A4A                 db    ? ;
.bss:00000A4B                 db    ? ;
.bss:00000A4C                 db    ? ;
.bss:00000A4D                 db    ? ;
.bss:00000A4E                 db    ? ;
.bss:00000A4F                 db    ? ;
.bss:00000A50                 db    ? ;
.bss:00000A51                 db    ? ;
.bss:00000A52                 db    ? ;
.bss:00000A53                 db    ? ;
.bss:00000A54                 db    ? ;
.bss:00000A55                 db    ? ;
.bss:00000A56                 db    ? ;
.bss:00000A57                 db    ? ;
.bss:00000A58                 db    ? ;
.bss:00000A59                 db    ? ;
.bss:00000A5A                 db    ? ;
.bss:00000A5B                 db    ? ;
.bss:00000A5C                 db    ? ;
.bss:00000A5D                 db    ? ;
.bss:00000A5E                 db    ? ;
.bss:00000A5F                 db    ? ;
.bss:00000A60                 db    ? ;
.bss:00000A61                 db    ? ;
.bss:00000A62                 db    ? ;
.bss:00000A63                 db    ? ;
.bss:00000A64                 db    ? ;
.bss:00000A65                 db    ? ;
.bss:00000A66                 db    ? ;
.bss:00000A67                 db    ? ;
.bss:00000A68                 db    ? ;
.bss:00000A69                 db    ? ;
.bss:00000A6A                 db    ? ;
.bss:00000A6B                 db    ? ;
.bss:00000A6C                 db    ? ;
.bss:00000A6D                 db    ? ;
.bss:00000A6E                 db    ? ;
.bss:00000A6F                 db    ? ;
.bss:00000A70                 db    ? ;
.bss:00000A71                 db    ? ;
.bss:00000A72                 db    ? ;
.bss:00000A73                 db    ? ;
.bss:00000A74                 db    ? ;
.bss:00000A75                 db    ? ;
.bss:00000A76                 db    ? ;
.bss:00000A77                 db    ? ;
.bss:00000A78                 db    ? ;
.bss:00000A79                 db    ? ;
.bss:00000A7A                 db    ? ;
.bss:00000A7B                 db    ? ;
.bss:00000A7C                 db    ? ;
.bss:00000A7D                 db    ? ;
.bss:00000A7E                 db    ? ;
.bss:00000A7F                 db    ? ;
.bss:00000A80                 db    ? ;
.bss:00000A81                 db    ? ;
.bss:00000A82                 db    ? ;
.bss:00000A83                 db    ? ;
.bss:00000A84                 db    ? ;
.bss:00000A85                 db    ? ;
.bss:00000A86                 db    ? ;
.bss:00000A87                 db    ? ;
.bss:00000A88                 db    ? ;
.bss:00000A89                 db    ? ;
.bss:00000A8A                 db    ? ;
.bss:00000A8B                 db    ? ;
.bss:00000A8C                 db    ? ;
.bss:00000A8D                 db    ? ;
.bss:00000A8E                 db    ? ;
.bss:00000A8F                 db    ? ;
.bss:00000A90                 db    ? ;
.bss:00000A91                 db    ? ;
.bss:00000A92                 db    ? ;
.bss:00000A93                 db    ? ;
.bss:00000A94                 db    ? ;
.bss:00000A95                 db    ? ;
.bss:00000A96                 db    ? ;
.bss:00000A97                 db    ? ;
.bss:00000A98                 db    ? ;
.bss:00000A99                 db    ? ;
.bss:00000A9A                 db    ? ;
.bss:00000A9B                 db    ? ;
.bss:00000A9C                 db    ? ;
.bss:00000A9D                 db    ? ;
.bss:00000A9E                 db    ? ;
.bss:00000A9F                 db    ? ;
.bss:00000AA0                 db    ? ;
.bss:00000AA1                 db    ? ;
.bss:00000AA2                 db    ? ;
.bss:00000AA3                 db    ? ;
.bss:00000AA4                 db    ? ;
.bss:00000AA5                 db    ? ;
.bss:00000AA6                 db    ? ;
.bss:00000AA7                 db    ? ;
.bss:00000AA8                 db    ? ;
.bss:00000AA9                 db    ? ;
.bss:00000AAA                 db    ? ;
.bss:00000AAB                 db    ? ;
.bss:00000AAC                 db    ? ;
.bss:00000AAD                 db    ? ;
.bss:00000AAE                 db    ? ;
.bss:00000AAF                 db    ? ;
.bss:00000AB0                 db    ? ;
.bss:00000AB1                 db    ? ;
.bss:00000AB2                 db    ? ;
.bss:00000AB3                 db    ? ;
.bss:00000AB4                 db    ? ;
.bss:00000AB5                 db    ? ;
.bss:00000AB6                 db    ? ;
.bss:00000AB7                 db    ? ;
.bss:00000AB8                 db    ? ;
.bss:00000AB9                 db    ? ;
.bss:00000ABA                 db    ? ;
.bss:00000ABB                 db    ? ;
.bss:00000ABC                 db    ? ;
.bss:00000ABD                 db    ? ;
.bss:00000ABE                 db    ? ;
.bss:00000ABF                 db    ? ;
.bss:00000AC0                 db    ? ;
.bss:00000AC1                 db    ? ;
.bss:00000AC2                 db    ? ;
.bss:00000AC3                 db    ? ;
.bss:00000AC4                 db    ? ;
.bss:00000AC5                 db    ? ;
.bss:00000AC6                 db    ? ;
.bss:00000AC7                 db    ? ;
.bss:00000AC8                 db    ? ;
.bss:00000AC9                 db    ? ;
.bss:00000ACA                 db    ? ;
.bss:00000ACB                 db    ? ;
.bss:00000ACC                 db    ? ;
.bss:00000ACD                 db    ? ;
.bss:00000ACE                 db    ? ;
.bss:00000ACF                 db    ? ;
.bss:00000AD0                 db    ? ;
.bss:00000AD1                 db    ? ;
.bss:00000AD2                 db    ? ;
.bss:00000AD3                 db    ? ;
.bss:00000AD4                 db    ? ;
.bss:00000AD5                 db    ? ;
.bss:00000AD6                 db    ? ;
.bss:00000AD7                 db    ? ;
.bss:00000AD8                 db    ? ;
.bss:00000AD9                 db    ? ;
.bss:00000ADA                 db    ? ;
.bss:00000ADB                 db    ? ;
.bss:00000ADC                 db    ? ;
.bss:00000ADD                 db    ? ;
.bss:00000ADE                 db    ? ;
.bss:00000ADF                 db    ? ;
.bss:00000AE0                 db    ? ;
.bss:00000AE1                 db    ? ;
.bss:00000AE2                 db    ? ;
.bss:00000AE3                 db    ? ;
.bss:00000AE4                 db    ? ;
.bss:00000AE5                 db    ? ;
.bss:00000AE6                 db    ? ;
.bss:00000AE7                 db    ? ;
.bss:00000AE8                 db    ? ;
.bss:00000AE9                 db    ? ;
.bss:00000AEA                 db    ? ;
.bss:00000AEB                 db    ? ;
.bss:00000AEC                 db    ? ;
.bss:00000AED                 db    ? ;
.bss:00000AEE                 db    ? ;
.bss:00000AEF                 db    ? ;
.bss:00000AF0                 db    ? ;
.bss:00000AF1                 db    ? ;
.bss:00000AF2                 db    ? ;
.bss:00000AF3                 db    ? ;
.bss:00000AF4                 db    ? ;
.bss:00000AF5                 db    ? ;
.bss:00000AF6                 db    ? ;
.bss:00000AF7                 db    ? ;
.bss:00000AF8                 db    ? ;
.bss:00000AF9                 db    ? ;
.bss:00000AFA                 db    ? ;
.bss:00000AFB                 db    ? ;
.bss:00000AFC                 db    ? ;
.bss:00000AFD                 db    ? ;
.bss:00000AFE                 db    ? ;
.bss:00000AFF                 db    ? ;
.bss:00000B00                 db    ? ;
.bss:00000B01                 db    ? ;
.bss:00000B02                 db    ? ;
.bss:00000B03                 db    ? ;
.bss:00000B04                 db    ? ;
.bss:00000B05                 db    ? ;
.bss:00000B06                 db    ? ;
.bss:00000B07                 db    ? ;
.bss:00000B08                 db    ? ;
.bss:00000B09                 db    ? ;
.bss:00000B0A                 db    ? ;
.bss:00000B0B                 db    ? ;
.bss:00000B0C                 db    ? ;
.bss:00000B0D                 db    ? ;
.bss:00000B0E                 db    ? ;
.bss:00000B0F                 db    ? ;
.bss:00000B10                 db    ? ;
.bss:00000B11                 db    ? ;
.bss:00000B12                 db    ? ;
.bss:00000B13                 db    ? ;
.bss:00000B14                 db    ? ;
.bss:00000B15                 db    ? ;
.bss:00000B16                 db    ? ;
.bss:00000B17                 db    ? ;
.bss:00000B18                 db    ? ;
.bss:00000B19                 db    ? ;
.bss:00000B1A                 db    ? ;
.bss:00000B1B                 db    ? ;
.bss:00000B1C                 db    ? ;
.bss:00000B1D                 db    ? ;
.bss:00000B1E                 db    ? ;
.bss:00000B1F                 db    ? ;
.bss:00000B20                 db    ? ;
.bss:00000B21                 db    ? ;
.bss:00000B22                 db    ? ;
.bss:00000B23                 db    ? ;
.bss:00000B24                 db    ? ;
.bss:00000B25                 db    ? ;
.bss:00000B26                 db    ? ;
.bss:00000B27                 db    ? ;
.bss:00000B28                 db    ? ;
.bss:00000B29                 db    ? ;
.bss:00000B2A                 db    ? ;
.bss:00000B2B                 db    ? ;
.bss:00000B2C                 db    ? ;
.bss:00000B2D                 db    ? ;
.bss:00000B2E                 db    ? ;
.bss:00000B2F                 db    ? ;
.bss:00000B30                 db    ? ;
.bss:00000B31                 db    ? ;
.bss:00000B32                 db    ? ;
.bss:00000B33                 db    ? ;
.bss:00000B34                 db    ? ;
.bss:00000B35                 db    ? ;
.bss:00000B36                 db    ? ;
.bss:00000B37                 db    ? ;
.bss:00000B38                 db    ? ;
.bss:00000B39                 db    ? ;
.bss:00000B3A                 db    ? ;
.bss:00000B3B                 db    ? ;
.bss:00000B3C                 db    ? ;
.bss:00000B3D                 db    ? ;
.bss:00000B3E                 db    ? ;
.bss:00000B3F                 db    ? ;
.bss:00000B40                 db    ? ;
.bss:00000B41                 db    ? ;
.bss:00000B42                 db    ? ;
.bss:00000B43                 db    ? ;
.bss:00000B44                 db    ? ;
.bss:00000B45                 db    ? ;
.bss:00000B46                 db    ? ;
.bss:00000B47                 db    ? ;
.bss:00000B48                 db    ? ;
.bss:00000B49                 db    ? ;
.bss:00000B4A                 db    ? ;
.bss:00000B4B                 db    ? ;
.bss:00000B4C                 db    ? ;
.bss:00000B4D                 db    ? ;
.bss:00000B4E                 db    ? ;
.bss:00000B4F                 db    ? ;
.bss:00000B50                 db    ? ;
.bss:00000B51                 db    ? ;
.bss:00000B52                 db    ? ;
.bss:00000B53                 db    ? ;
.bss:00000B54                 db    ? ;
.bss:00000B55                 db    ? ;
.bss:00000B56                 db    ? ;
.bss:00000B57                 db    ? ;
.bss:00000B58                 db    ? ;
.bss:00000B59                 db    ? ;
.bss:00000B5A                 db    ? ;
.bss:00000B5B                 db    ? ;
.bss:00000B5C                 db    ? ;
.bss:00000B5D                 db    ? ;
.bss:00000B5E                 db    ? ;
.bss:00000B5F                 db    ? ;
.bss:00000B60                 db    ? ;
.bss:00000B61                 db    ? ;
.bss:00000B62                 db    ? ;
.bss:00000B63                 db    ? ;
.bss:00000B64                 db    ? ;
.bss:00000B65                 db    ? ;
.bss:00000B66                 db    ? ;
.bss:00000B67                 db    ? ;
.bss:00000B68                 db    ? ;
.bss:00000B69                 db    ? ;
.bss:00000B6A                 db    ? ;
.bss:00000B6B                 db    ? ;
.bss:00000B6C                 db    ? ;
.bss:00000B6D                 db    ? ;
.bss:00000B6E                 db    ? ;
.bss:00000B6F                 db    ? ;
.bss:00000B70                 db    ? ;
.bss:00000B71                 db    ? ;
.bss:00000B72                 db    ? ;
.bss:00000B73                 db    ? ;
.bss:00000B74                 db    ? ;
.bss:00000B75                 db    ? ;
.bss:00000B76                 db    ? ;
.bss:00000B77                 db    ? ;
.bss:00000B78                 db    ? ;
.bss:00000B79                 db    ? ;
.bss:00000B7A                 db    ? ;
.bss:00000B7B                 db    ? ;
.bss:00000B7C                 db    ? ;
.bss:00000B7D                 db    ? ;
.bss:00000B7E                 db    ? ;
.bss:00000B7F                 db    ? ;
.bss:00000B80                 db    ? ;
.bss:00000B81                 db    ? ;
.bss:00000B82                 db    ? ;
.bss:00000B83                 db    ? ;
.bss:00000B84                 db    ? ;
.bss:00000B85                 db    ? ;
.bss:00000B86                 db    ? ;
.bss:00000B87                 db    ? ;
.bss:00000B88                 db    ? ;
.bss:00000B89                 db    ? ;
.bss:00000B8A                 db    ? ;
.bss:00000B8B                 db    ? ;
.bss:00000B8C                 db    ? ;
.bss:00000B8D                 db    ? ;
.bss:00000B8E                 db    ? ;
.bss:00000B8F                 db    ? ;
.bss:00000B90                 db    ? ;
.bss:00000B91                 db    ? ;
.bss:00000B92                 db    ? ;
.bss:00000B93                 db    ? ;
.bss:00000B94                 db    ? ;
.bss:00000B95                 db    ? ;
.bss:00000B96                 db    ? ;
.bss:00000B97                 db    ? ;
.bss:00000B98                 db    ? ;
.bss:00000B99                 db    ? ;
.bss:00000B9A                 db    ? ;
.bss:00000B9B                 db    ? ;
.bss:00000B9C                 db    ? ;
.bss:00000B9D                 db    ? ;
.bss:00000B9E                 db    ? ;
.bss:00000B9F                 db    ? ;
.bss:00000BA0                 db    ? ;
.bss:00000BA1                 db    ? ;
.bss:00000BA2                 db    ? ;
.bss:00000BA3                 db    ? ;
.bss:00000BA4                 db    ? ;
.bss:00000BA5                 db    ? ;
.bss:00000BA6                 db    ? ;
.bss:00000BA7                 db    ? ;
.bss:00000BA8                 db    ? ;
.bss:00000BA9                 db    ? ;
.bss:00000BAA                 db    ? ;
.bss:00000BAB                 db    ? ;
.bss:00000BAC                 db    ? ;
.bss:00000BAD                 db    ? ;
.bss:00000BAE                 db    ? ;
.bss:00000BAF                 db    ? ;
.bss:00000BB0                 db    ? ;
.bss:00000BB1                 db    ? ;
.bss:00000BB2                 db    ? ;
.bss:00000BB3                 db    ? ;
.bss:00000BB4                 db    ? ;
.bss:00000BB5                 db    ? ;
.bss:00000BB6                 db    ? ;
.bss:00000BB7                 db    ? ;
.bss:00000BB8                 db    ? ;
.bss:00000BB9                 db    ? ;
.bss:00000BBA                 db    ? ;
.bss:00000BBB                 db    ? ;
.bss:00000BBC                 db    ? ;
.bss:00000BBD                 db    ? ;
.bss:00000BBE                 db    ? ;
.bss:00000BBF                 db    ? ;
.bss:00000BC0                 db    ? ;
.bss:00000BC1                 db    ? ;
.bss:00000BC2                 db    ? ;
.bss:00000BC3                 db    ? ;
.bss:00000BC4                 db    ? ;
.bss:00000BC5                 db    ? ;
.bss:00000BC6                 db    ? ;
.bss:00000BC7                 db    ? ;
.bss:00000BC8                 db    ? ;
.bss:00000BC9                 db    ? ;
.bss:00000BCA                 db    ? ;
.bss:00000BCB                 db    ? ;
.bss:00000BCC                 db    ? ;
.bss:00000BCD                 db    ? ;
.bss:00000BCE                 db    ? ;
.bss:00000BCF                 db    ? ;
.bss:00000BD0 word_BD0        dw ?                    ; DATA XREF: _char_width+83r
.bss:00000BD2                 db    ? ;
.bss:00000BD3                 db    ? ;
.bss:00000BD4                 db    ? ;
.bss:00000BD5                 db    ? ;
.bss:00000BD6                 db    ? ;
.bss:00000BD7                 db    ? ;
.bss:00000BD8                 db    ? ;
.bss:00000BD9                 db    ? ;
.bss:00000BDA                 db    ? ;
.bss:00000BDB                 db    ? ;
.bss:00000BDC                 db    ? ;
.bss:00000BDD                 db    ? ;
.bss:00000BDE                 db    ? ;
.bss:00000BDF                 db    ? ;
.bss:00000BE0                 db    ? ;
.bss:00000BE1                 db    ? ;
.bss:00000BE2                 db    ? ;
.bss:00000BE3                 db    ? ;
.bss:00000BE4                 db    ? ;
.bss:00000BE5                 db    ? ;
.bss:00000BE6                 db    ? ;
.bss:00000BE7                 db    ? ;
.bss:00000BE8                 db    ? ;
.bss:00000BE9                 db    ? ;
.bss:00000BEA                 db    ? ;
.bss:00000BEB                 db    ? ;
.bss:00000BEC                 db    ? ;
.bss:00000BED                 db    ? ;
.bss:00000BEE                 db    ? ;
.bss:00000BEF                 db    ? ;
.bss:00000BF0                 db    ? ;
.bss:00000BF1                 db    ? ;
.bss:00000BF2                 db    ? ;
.bss:00000BF3                 db    ? ;
.bss:00000BF4                 db    ? ;
.bss:00000BF5                 db    ? ;
.bss:00000BF6                 db    ? ;
.bss:00000BF7                 db    ? ;
.bss:00000BF8                 db    ? ;
.bss:00000BF9                 db    ? ;
.bss:00000BFA                 db    ? ;
.bss:00000BFB                 db    ? ;
.bss:00000BFC                 db    ? ;
.bss:00000BFD                 db    ? ;
.bss:00000BFE                 db    ? ;
.bss:00000BFF                 db    ? ;
.bss:00000C00                 db    ? ;
.bss:00000C01                 db    ? ;
.bss:00000C02                 db    ? ;
.bss:00000C03                 db    ? ;
.bss:00000C04                 db    ? ;
.bss:00000C05                 db    ? ;
.bss:00000C06                 db    ? ;
.bss:00000C07                 db    ? ;
.bss:00000C08                 db    ? ;
.bss:00000C09                 db    ? ;
.bss:00000C0A                 db    ? ;
.bss:00000C0B                 db    ? ;
.bss:00000C0C                 db    ? ;
.bss:00000C0D                 db    ? ;
.bss:00000C0E                 db    ? ;
.bss:00000C0F                 db    ? ;
.bss:00000C10                 db    ? ;
.bss:00000C11                 db    ? ;
.bss:00000C12                 db    ? ;
.bss:00000C13                 db    ? ;
.bss:00000C14                 db    ? ;
.bss:00000C15                 db    ? ;
.bss:00000C16                 db    ? ;
.bss:00000C17                 db    ? ;
.bss:00000C18                 db    ? ;
.bss:00000C19                 db    ? ;
.bss:00000C1A                 db    ? ;
.bss:00000C1B                 db    ? ;
.bss:00000C1C                 db    ? ;
.bss:00000C1D                 db    ? ;
.bss:00000C1E                 db    ? ;
.bss:00000C1F                 db    ? ;
.bss:00000C20                 db    ? ;
.bss:00000C21                 db    ? ;
.bss:00000C22                 db    ? ;
.bss:00000C23                 db    ? ;
.bss:00000C24                 db    ? ;
.bss:00000C25                 db    ? ;
.bss:00000C26                 db    ? ;
.bss:00000C27                 db    ? ;
.bss:00000C28                 db    ? ;
.bss:00000C29                 db    ? ;
.bss:00000C2A                 db    ? ;
.bss:00000C2B                 db    ? ;
.bss:00000C2C                 db    ? ;
.bss:00000C2D                 db    ? ;
.bss:00000C2E                 db    ? ;
.bss:00000C2F                 db    ? ;
.bss:00000C30                 db    ? ;
.bss:00000C31                 db    ? ;
.bss:00000C32                 db    ? ;
.bss:00000C33                 db    ? ;
.bss:00000C34                 db    ? ;
.bss:00000C35                 db    ? ;
.bss:00000C36                 db    ? ;
.bss:00000C37                 db    ? ;
.bss:00000C38                 db    ? ;
.bss:00000C39                 db    ? ;
.bss:00000C3A                 db    ? ;
.bss:00000C3B                 db    ? ;
.bss:00000C3C                 db    ? ;
.bss:00000C3D                 db    ? ;
.bss:00000C3E                 db    ? ;
.bss:00000C3F                 db    ? ;
.bss:00000C40                 db    ? ;
.bss:00000C41                 db    ? ;
.bss:00000C42                 db    ? ;
.bss:00000C43                 db    ? ;
.bss:00000C44                 db    ? ;
.bss:00000C45                 db    ? ;
.bss:00000C46                 db    ? ;
.bss:00000C47                 db    ? ;
.bss:00000C48                 db    ? ;
.bss:00000C49                 db    ? ;
.bss:00000C4A                 db    ? ;
.bss:00000C4B                 db    ? ;
.bss:00000C4C                 db    ? ;
.bss:00000C4D                 db    ? ;
.bss:00000C4E                 db    ? ;
.bss:00000C4F                 db    ? ;
.bss:00000C50                 db    ? ;
.bss:00000C51                 db    ? ;
.bss:00000C52                 db    ? ;
.bss:00000C53                 db    ? ;
.bss:00000C54                 db    ? ;
.bss:00000C55                 db    ? ;
.bss:00000C56                 db    ? ;
.bss:00000C57                 db    ? ;
.bss:00000C58                 db    ? ;
.bss:00000C59                 db    ? ;
.bss:00000C5A                 db    ? ;
.bss:00000C5B                 db    ? ;
.bss:00000C5C                 db    ? ;
.bss:00000C5D                 db    ? ;
.bss:00000C5E                 db    ? ;
.bss:00000C5F                 db    ? ;
.bss:00000C60                 db    ? ;
.bss:00000C61                 db    ? ;
.bss:00000C62                 db    ? ;
.bss:00000C63                 db    ? ;
.bss:00000C64                 db    ? ;
.bss:00000C65                 db    ? ;
.bss:00000C66                 db    ? ;
.bss:00000C67                 db    ? ;
.bss:00000C68                 db    ? ;
.bss:00000C69                 db    ? ;
.bss:00000C6A                 db    ? ;
.bss:00000C6B                 db    ? ;
.bss:00000C6C                 db    ? ;
.bss:00000C6D                 db    ? ;
.bss:00000C6E                 db    ? ;
.bss:00000C6F                 db    ? ;
.bss:00000C70                 db    ? ;
.bss:00000C71                 db    ? ;
.bss:00000C72                 db    ? ;
.bss:00000C73                 db    ? ;
.bss:00000C74                 db    ? ;
.bss:00000C75                 db    ? ;
.bss:00000C76                 db    ? ;
.bss:00000C77                 db    ? ;
.bss:00000C78                 db    ? ;
.bss:00000C79                 db    ? ;
.bss:00000C7A                 db    ? ;
.bss:00000C7B                 db    ? ;
.bss:00000C7C                 db    ? ;
.bss:00000C7D                 db    ? ;
.bss:00000C7E                 db    ? ;
.bss:00000C7F                 db    ? ;
.bss:00000C80                 db    ? ;
.bss:00000C81                 db    ? ;
.bss:00000C82                 db    ? ;
.bss:00000C83                 db    ? ;
.bss:00000C84                 db    ? ;
.bss:00000C85                 db    ? ;
.bss:00000C86                 db    ? ;
.bss:00000C87                 db    ? ;
.bss:00000C88                 db    ? ;
.bss:00000C89                 db    ? ;
.bss:00000C8A                 db    ? ;
.bss:00000C8B                 db    ? ;
.bss:00000C8C                 db    ? ;
.bss:00000C8D                 db    ? ;
.bss:00000C8E                 db    ? ;
.bss:00000C8F                 db    ? ;
.bss:00000C90                 db    ? ;
.bss:00000C91                 db    ? ;
.bss:00000C92                 db    ? ;
.bss:00000C93                 db    ? ;
.bss:00000C94                 db    ? ;
.bss:00000C95                 db    ? ;
.bss:00000C96                 db    ? ;
.bss:00000C97                 db    ? ;
.bss:00000C98                 db    ? ;
.bss:00000C99                 db    ? ;
.bss:00000C9A                 db    ? ;
.bss:00000C9B                 db    ? ;
.bss:00000C9C                 db    ? ;
.bss:00000C9D                 db    ? ;
.bss:00000C9E                 db    ? ;
.bss:00000C9F                 db    ? ;
.bss:00000CA0                 db    ? ;
.bss:00000CA1                 db    ? ;
.bss:00000CA2                 db    ? ;
.bss:00000CA3                 db    ? ;
.bss:00000CA4                 db    ? ;
.bss:00000CA5                 db    ? ;
.bss:00000CA6                 db    ? ;
.bss:00000CA7                 db    ? ;
.bss:00000CA8                 db    ? ;
.bss:00000CA9                 db    ? ;
.bss:00000CAA                 db    ? ;
.bss:00000CAB                 db    ? ;
.bss:00000CAC                 db    ? ;
.bss:00000CAD                 db    ? ;
.bss:00000CAE                 db    ? ;
.bss:00000CAF                 db    ? ;
.bss:00000CB0                 db    ? ;
.bss:00000CB1                 db    ? ;
.bss:00000CB2 word_CB2        dw ?                    ; DATA XREF: _do_text_internal+22Fr
.bss:00000CB4                 db    ? ;
.bss:00000CB5                 db    ? ;
.bss:00000CB6                 db    ? ;
.bss:00000CB7                 db    ? ;
.bss:00000CB8                 db    ? ;
.bss:00000CB9                 db    ? ;
.bss:00000CBA                 db    ? ;
.bss:00000CBB                 db    ? ;
.bss:00000CBC                 db    ? ;
.bss:00000CBD                 db    ? ;
.bss:00000CBE                 db    ? ;
.bss:00000CBF                 db    ? ;
.bss:00000CC0                 db    ? ;
.bss:00000CC1                 db    ? ;
.bss:00000CC2                 db    ? ;
.bss:00000CC3                 db    ? ;
.bss:00000CC4                 db    ? ;
.bss:00000CC5                 db    ? ;
.bss:00000CC6                 db    ? ;
.bss:00000CC7                 db    ? ;
.bss:00000CC8                 db    ? ;
.bss:00000CC9                 db    ? ;
.bss:00000CCA                 db    ? ;
.bss:00000CCB                 db    ? ;
.bss:00000CCC                 db    ? ;
.bss:00000CCD                 db    ? ;
.bss:00000CCE                 db    ? ;
.bss:00000CCF                 db    ? ;
.bss:00000CD0                 db    ? ;
.bss:00000CD1                 db    ? ;
.bss:00000CD2                 db    ? ;
.bss:00000CD3                 db    ? ;
.bss:00000CD4                 db    ? ;
.bss:00000CD5                 db    ? ;
.bss:00000CD6                 db    ? ;
.bss:00000CD7                 db    ? ;
.bss:00000CD8                 db    ? ;
.bss:00000CD9                 db    ? ;
.bss:00000CDA                 db    ? ;
.bss:00000CDB                 db    ? ;
.bss:00000CDC                 db    ? ;
.bss:00000CDD                 db    ? ;
.bss:00000CDE                 db    ? ;
.bss:00000CDF                 db    ? ;
.bss:00000CE0                 db    ? ;
.bss:00000CE1                 db    ? ;
.bss:00000CE2                 db    ? ;
.bss:00000CE3                 db    ? ;
.bss:00000CE4                 db    ? ;
.bss:00000CE5                 db    ? ;
.bss:00000CE6                 db    ? ;
.bss:00000CE7                 db    ? ;
.bss:00000CE8                 db    ? ;
.bss:00000CE9                 db    ? ;
.bss:00000CEA                 db    ? ;
.bss:00000CEB                 db    ? ;
.bss:00000CEC                 db    ? ;
.bss:00000CED                 db    ? ;
.bss:00000CEE                 db    ? ;
.bss:00000CEF                 db    ? ;
.bss:00000CF0                 db    ? ;
.bss:00000CF1                 db    ? ;
.bss:00000CF2                 db    ? ;
.bss:00000CF3                 db    ? ;
.bss:00000CF4                 db    ? ;
.bss:00000CF5                 db    ? ;
.bss:00000CF6                 db    ? ;
.bss:00000CF7                 db    ? ;
.bss:00000CF8                 db    ? ;
.bss:00000CF9                 db    ? ;
.bss:00000CFA                 db    ? ;
.bss:00000CFB                 db    ? ;
.bss:00000CFC                 db    ? ;
.bss:00000CFD                 db    ? ;
.bss:00000CFE                 db    ? ;
.bss:00000CFF                 db    ? ;
.bss:00000D00                 db    ? ;
.bss:00000D01                 db    ? ;
.bss:00000D02                 db    ? ;
.bss:00000D03                 db    ? ;
.bss:00000D04                 db    ? ;
.bss:00000D05                 db    ? ;
.bss:00000D06                 db    ? ;
.bss:00000D07                 db    ? ;
.bss:00000D08                 db    ? ;
.bss:00000D09                 db    ? ;
.bss:00000D0A                 db    ? ;
.bss:00000D0B                 db    ? ;
.bss:00000D0C                 db    ? ;
.bss:00000D0D                 db    ? ;
.bss:00000D0E                 db    ? ;
.bss:00000D0F                 db    ? ;
.bss:00000D10                 db    ? ;
.bss:00000D11                 db    ? ;
.bss:00000D12                 db    ? ;
.bss:00000D13                 db    ? ;
.bss:00000D14                 db    ? ;
.bss:00000D15                 db    ? ;
.bss:00000D16                 db    ? ;
.bss:00000D17                 db    ? ;
.bss:00000D18                 db    ? ;
.bss:00000D19                 db    ? ;
.bss:00000D1A                 db    ? ;
.bss:00000D1B                 db    ? ;
.bss:00000D1C                 db    ? ;
.bss:00000D1D                 db    ? ;
.bss:00000D1E                 db    ? ;
.bss:00000D1F                 db    ? ;
.bss:00000D20                 db    ? ;
.bss:00000D21                 db    ? ;
.bss:00000D22                 db    ? ;
.bss:00000D23                 db    ? ;
.bss:00000D24                 db    ? ;
.bss:00000D25                 db    ? ;
.bss:00000D26                 db    ? ;
.bss:00000D27                 db    ? ;
.bss:00000D28                 db    ? ;
.bss:00000D29                 db    ? ;
.bss:00000D2A                 db    ? ;
.bss:00000D2B                 db    ? ;
.bss:00000D2C                 db    ? ;
.bss:00000D2D                 db    ? ;
.bss:00000D2E                 db    ? ;
.bss:00000D2F                 db    ? ;
.bss:00000D30                 db    ? ;
.bss:00000D31                 db    ? ;
.bss:00000D32                 db    ? ;
.bss:00000D33                 db    ? ;
.bss:00000D34                 db    ? ;
.bss:00000D35                 db    ? ;
.bss:00000D36                 db    ? ;
.bss:00000D37                 db    ? ;
.bss:00000D38                 db    ? ;
.bss:00000D39                 db    ? ;
.bss:00000D3A                 db    ? ;
.bss:00000D3B                 db    ? ;
.bss:00000D3C                 db    ? ;
.bss:00000D3D                 db    ? ;
.bss:00000D3E                 db    ? ;
.bss:00000D3F                 db    ? ;
.bss:00000D40                 db    ? ;
.bss:00000D41                 db    ? ;
.bss:00000D42                 db    ? ;
.bss:00000D43                 db    ? ;
.bss:00000D44                 db    ? ;
.bss:00000D45                 db    ? ;
.bss:00000D46                 db    ? ;
.bss:00000D47                 db    ? ;
.bss:00000D48                 db    ? ;
.bss:00000D49                 db    ? ;
.bss:00000D4A                 db    ? ;
.bss:00000D4B                 db    ? ;
.bss:00000D4C                 db    ? ;
.bss:00000D4D                 db    ? ;
.bss:00000D4E                 db    ? ;
.bss:00000D4F                 db    ? ;
.bss:00000D50                 db    ? ;
.bss:00000D51                 db    ? ;
.bss:00000D52                 db    ? ;
.bss:00000D53                 db    ? ;
.bss:00000D54                 db    ? ;
.bss:00000D55                 db    ? ;
.bss:00000D56                 db    ? ;
.bss:00000D57                 db    ? ;
.bss:00000D58                 db    ? ;
.bss:00000D59                 db    ? ;
.bss:00000D5A                 db    ? ;
.bss:00000D5B                 db    ? ;
.bss:00000D5C                 db    ? ;
.bss:00000D5D                 db    ? ;
.bss:00000D5E                 db    ? ;
.bss:00000D5F                 db    ? ;
.bss:00000D60                 db    ? ;
.bss:00000D61                 db    ? ;
.bss:00000D62                 db    ? ;
.bss:00000D63                 db    ? ;
.bss:00000D64                 db    ? ;
.bss:00000D65                 db    ? ;
.bss:00000D66                 db    ? ;
.bss:00000D67                 db    ? ;
.bss:00000D68                 db    ? ;
.bss:00000D69                 db    ? ;
.bss:00000D6A                 db    ? ;
.bss:00000D6B                 db    ? ;
.bss:00000D6C                 db    ? ;
.bss:00000D6D                 db    ? ;
.bss:00000D6E                 db    ? ;
.bss:00000D6F                 db    ? ;
.bss:00000D70                 db    ? ;
.bss:00000D71                 db    ? ;
.bss:00000D72                 db    ? ;
.bss:00000D73                 db    ? ;
.bss:00000D74                 db    ? ;
.bss:00000D75                 db    ? ;
.bss:00000D76                 db    ? ;
.bss:00000D77                 db    ? ;
.bss:00000D78                 db    ? ;
.bss:00000D79                 db    ? ;
.bss:00000D7A                 db    ? ;
.bss:00000D7B                 db    ? ;
.bss:00000D7C                 db    ? ;
.bss:00000D7D                 db    ? ;
.bss:00000D7E                 db    ? ;
.bss:00000D7F                 db    ? ;
.bss:00000D80                 db    ? ;
.bss:00000D81                 db    ? ;
.bss:00000D82                 db    ? ;
.bss:00000D83                 db    ? ;
.bss:00000D84                 db    ? ;
.bss:00000D85                 db    ? ;
.bss:00000D86                 db    ? ;
.bss:00000D87                 db    ? ;
.bss:00000D88                 db    ? ;
.bss:00000D89                 db    ? ;
.bss:00000D8A                 db    ? ;
.bss:00000D8B                 db    ? ;
.bss:00000D8C                 db    ? ;
.bss:00000D8D                 db    ? ;
.bss:00000D8E                 db    ? ;
.bss:00000D8F                 db    ? ;
.bss:00000D90                 db    ? ;
.bss:00000D91                 db    ? ;
.bss:00000D92                 db    ? ;
.bss:00000D93                 db    ? ;
.bss:00000D94                 db    ? ;
.bss:00000D95                 db    ? ;
.bss:00000D96                 db    ? ;
.bss:00000D97                 db    ? ;
.bss:00000D98                 db    ? ;
.bss:00000D99                 db    ? ;
.bss:00000D9A                 db    ? ;
.bss:00000D9B                 db    ? ;
.bss:00000D9C                 db    ? ;
.bss:00000D9D                 db    ? ;
.bss:00000D9E                 db    ? ;
.bss:00000D9F                 db    ? ;
.bss:00000DA0                 db    ? ;
.bss:00000DA1                 db    ? ;
.bss:00000DA2                 db    ? ;
.bss:00000DA3                 db    ? ;
.bss:00000DA4                 db    ? ;
.bss:00000DA5                 db    ? ;
.bss:00000DA6                 db    ? ;
.bss:00000DA7                 db    ? ;
.bss:00000DA8                 db    ? ;
.bss:00000DA9                 db    ? ;
.bss:00000DAA                 db    ? ;
.bss:00000DAB                 db    ? ;
.bss:00000DAC                 db    ? ;
.bss:00000DAD                 db    ? ;
.bss:00000DAE                 db    ? ;
.bss:00000DAF                 db    ? ;
.bss:00000DB0                 db    ? ;
.bss:00000DB1                 db    ? ;
.bss:00000DB2                 db    ? ;
.bss:00000DB3                 db    ? ;
.bss:00000DB4                 db    ? ;
.bss:00000DB5                 db    ? ;
.bss:00000DB6                 db    ? ;
.bss:00000DB7                 db    ? ;
.bss:00000DB8                 db    ? ;
.bss:00000DB9                 db    ? ;
.bss:00000DBA                 db    ? ;
.bss:00000DBB                 db    ? ;
.bss:00000DBC                 db    ? ;
.bss:00000DBD                 db    ? ;
.bss:00000DBE                 db    ? ;
.bss:00000DBF                 db    ? ;
.bss:00000DC0                 db    ? ;
.bss:00000DC1                 db    ? ;
.bss:00000DC2                 db    ? ;
.bss:00000DC3                 db    ? ;
.bss:00000DC4                 db    ? ;
.bss:00000DC5                 db    ? ;
.bss:00000DC6                 db    ? ;
.bss:00000DC7                 db    ? ;
.bss:00000DC8                 db    ? ;
.bss:00000DC9                 db    ? ;
.bss:00000DCA                 db    ? ;
.bss:00000DCB                 db    ? ;
.bss:00000DCC                 db    ? ;
.bss:00000DCD                 db    ? ;
.bss:00000DCE                 db    ? ;
.bss:00000DCF                 db    ? ;
.bss:00000DD0                 db    ? ;
.bss:00000DD1                 db    ? ;
.bss:00000DD2                 db    ? ;
.bss:00000DD3                 db    ? ;
.bss:00000DD4                 db    ? ;
.bss:00000DD5                 db    ? ;
.bss:00000DD6                 db    ? ;
.bss:00000DD7                 db    ? ;
.bss:00000DD8                 db    ? ;
.bss:00000DD9                 db    ? ;
.bss:00000DDA                 db    ? ;
.bss:00000DDB                 db    ? ;
.bss:00000DDC                 db    ? ;
.bss:00000DDD                 db    ? ;
.bss:00000DDE                 db    ? ;
.bss:00000DDF                 db    ? ;
.bss:00000DE0                 db    ? ;
.bss:00000DE1                 db    ? ;
.bss:00000DE2                 db    ? ;
.bss:00000DE3                 db    ? ;
.bss:00000DE4                 db    ? ;
.bss:00000DE5                 db    ? ;
.bss:00000DE6                 db    ? ;
.bss:00000DE7                 db    ? ;
.bss:00000DE8                 db    ? ;
.bss:00000DE9                 db    ? ;
.bss:00000DEA                 db    ? ;
.bss:00000DEB                 db    ? ;
.bss:00000DEC                 db    ? ;
.bss:00000DED                 db    ? ;
.bss:00000DEE                 db    ? ;
.bss:00000DEF                 db    ? ;
.bss:00000DF0                 db    ? ;
.bss:00000DF1                 db    ? ;
.bss:00000DF2                 db    ? ;
.bss:00000DF3                 db    ? ;
.bss:00000DF4                 db    ? ;
.bss:00000DF5                 db    ? ;
.bss:00000DF6                 db    ? ;
.bss:00000DF7                 db    ? ;
.bss:00000DF8                 db    ? ;
.bss:00000DF9                 db    ? ;
.bss:00000DFA                 db    ? ;
.bss:00000DFB                 db    ? ;
.bss:00000DFC                 db    ? ;
.bss:00000DFD                 db    ? ;
.bss:00000DFE                 db    ? ;
.bss:00000DFF                 db    ? ;
.bss:00000E00                 db    ? ;
.bss:00000E01                 db    ? ;
.bss:00000E02                 db    ? ;
.bss:00000E03                 db    ? ;
.bss:00000E04                 db    ? ;
.bss:00000E05                 db    ? ;
.bss:00000E06                 db    ? ;
.bss:00000E07                 db    ? ;
.bss:00000E08                 db    ? ;
.bss:00000E09                 db    ? ;
.bss:00000E0A                 db    ? ;
.bss:00000E0B                 db    ? ;
.bss:00000E0C                 db    ? ;
.bss:00000E0D                 db    ? ;
.bss:00000E0E                 db    ? ;
.bss:00000E0F                 db    ? ;
.bss:00000E10                 db    ? ;
.bss:00000E11                 db    ? ;
.bss:00000E12                 db    ? ;
.bss:00000E13                 db    ? ;
.bss:00000E14                 db    ? ;
.bss:00000E15                 db    ? ;
.bss:00000E16                 db    ? ;
.bss:00000E17                 db    ? ;
.bss:00000E18                 db    ? ;
.bss:00000E19                 db    ? ;
.bss:00000E1A                 db    ? ;
.bss:00000E1B                 db    ? ;
.bss:00000E1C                 db    ? ;
.bss:00000E1D                 db    ? ;
.bss:00000E1E                 db    ? ;
.bss:00000E1F                 db    ? ;
.bss:00000E20                 db    ? ;
.bss:00000E21                 db    ? ;
.bss:00000E22                 db    ? ;
.bss:00000E23                 db    ? ;
.bss:00000E24                 db    ? ;
.bss:00000E25                 db    ? ;
.bss:00000E26                 db    ? ;
.bss:00000E27                 db    ? ;
.bss:00000E28                 db    ? ;
.bss:00000E29                 db    ? ;
.bss:00000E2A                 db    ? ;
.bss:00000E2B                 db    ? ;
.bss:00000E2C                 db    ? ;
.bss:00000E2D                 db    ? ;
.bss:00000E2E                 db    ? ;
.bss:00000E2F                 db    ? ;
.bss:00000E30                 db    ? ;
.bss:00000E31                 db    ? ;
.bss:00000E32                 db    ? ;
.bss:00000E33                 db    ? ;
.bss:00000E34                 db    ? ;
.bss:00000E35                 db    ? ;
.bss:00000E36                 db    ? ;
.bss:00000E37                 db    ? ;
.bss:00000E38                 db    ? ;
.bss:00000E39                 db    ? ;
.bss:00000E3A                 db    ? ;
.bss:00000E3B                 db    ? ;
.bss:00000E3C                 db    ? ;
.bss:00000E3D                 db    ? ;
.bss:00000E3E                 db    ? ;
.bss:00000E3F                 db    ? ;
.bss:00000E40                 db    ? ;
.bss:00000E41                 db    ? ;
.bss:00000E42                 db    ? ;
.bss:00000E43                 db    ? ;
.bss:00000E44                 db    ? ;
.bss:00000E45                 db    ? ;
.bss:00000E46                 db    ? ;
.bss:00000E47                 db    ? ;
.bss:00000E48                 db    ? ;
.bss:00000E49                 db    ? ;
.bss:00000E4A                 db    ? ;
.bss:00000E4B                 db    ? ;
.bss:00000E4C                 db    ? ;
.bss:00000E4D                 db    ? ;
.bss:00000E4E                 db    ? ;
.bss:00000E4F                 db    ? ;
.bss:00000E50                 db    ? ;
.bss:00000E51                 db    ? ;
.bss:00000E52                 db    ? ;
.bss:00000E53                 db    ? ;
.bss:00000E54                 db    ? ;
.bss:00000E55                 db    ? ;
.bss:00000E56                 db    ? ;
.bss:00000E57                 db    ? ;
.bss:00000E58                 db    ? ;
.bss:00000E59                 db    ? ;
.bss:00000E5A                 db    ? ;
.bss:00000E5B                 db    ? ;
.bss:00000E5C                 db    ? ;
.bss:00000E5D                 db    ? ;
.bss:00000E5E                 db    ? ;
.bss:00000E5F                 db    ? ;
.bss:00000E60                 db    ? ;
.bss:00000E61                 db    ? ;
.bss:00000E62                 db    ? ;
.bss:00000E63                 db    ? ;
.bss:00000E64                 db    ? ;
.bss:00000E65                 db    ? ;
.bss:00000E66                 db    ? ;
.bss:00000E67                 db    ? ;
.bss:00000E68                 db    ? ;
.bss:00000E69                 db    ? ;
.bss:00000E6A                 db    ? ;
.bss:00000E6B                 db    ? ;
.bss:00000E6C                 db    ? ;
.bss:00000E6D                 db    ? ;
.bss:00000E6E                 db    ? ;
.bss:00000E6F                 db    ? ;
.bss:00000E70                 db    ? ;
.bss:00000E71                 db    ? ;
.bss:00000E72                 db    ? ;
.bss:00000E73                 db    ? ;
.bss:00000E74                 db    ? ;
.bss:00000E75                 db    ? ;
.bss:00000E76                 db    ? ;
.bss:00000E77                 db    ? ;
.bss:00000E78                 db    ? ;
.bss:00000E79                 db    ? ;
.bss:00000E7A                 db    ? ;
.bss:00000E7B                 db    ? ;
.bss:00000E7C                 db    ? ;
.bss:00000E7D                 db    ? ;
.bss:00000E7E                 db    ? ;
.bss:00000E7F                 db    ? ;
.bss:00000E80                 db    ? ;
.bss:00000E81                 db    ? ;
.bss:00000E82                 db    ? ;
.bss:00000E83                 db    ? ;
.bss:00000E84                 db    ? ;
.bss:00000E85                 db    ? ;
.bss:00000E86                 db    ? ;
.bss:00000E87                 db    ? ;
.bss:00000E88                 db    ? ;
.bss:00000E89                 db    ? ;
.bss:00000E8A                 db    ? ;
.bss:00000E8B                 db    ? ;
.bss:00000E8C                 db    ? ;
.bss:00000E8D                 db    ? ;
.bss:00000E8E                 db    ? ;
.bss:00000E8F                 db    ? ;
.bss:00000E90                 db    ? ;
.bss:00000E91                 db    ? ;
.bss:00000E92                 db    ? ;
.bss:00000E93                 db    ? ;
.bss:00000E94                 db    ? ;
.bss:00000E95                 db    ? ;
.bss:00000E96                 db    ? ;
.bss:00000E97                 db    ? ;
.bss:00000E98                 db    ? ;
.bss:00000E99                 db    ? ;
.bss:00000E9A                 db    ? ;
.bss:00000E9B                 db    ? ;
.bss:00000E9C                 db    ? ;
.bss:00000E9D                 db    ? ;
.bss:00000E9E                 db    ? ;
.bss:00000E9F                 db    ? ;
.bss:00000EA0                 db    ? ;
.bss:00000EA1                 db    ? ;
.bss:00000EA2                 db    ? ;
.bss:00000EA3                 db    ? ;
.bss:00000EA4                 db    ? ;
.bss:00000EA5                 db    ? ;
.bss:00000EA6                 db    ? ;
.bss:00000EA7                 db    ? ;
.bss:00000EA8                 db    ? ;
.bss:00000EA9                 db    ? ;
.bss:00000EAA                 db    ? ;
.bss:00000EAB                 db    ? ;
.bss:00000EAC                 db    ? ;
.bss:00000EAD                 db    ? ;
.bss:00000EAE                 db    ? ;
.bss:00000EAF                 db    ? ;
.bss:00000EB0                 db    ? ;
.bss:00000EB1                 db    ? ;
.bss:00000EB2                 db    ? ;
.bss:00000EB3                 db    ? ;
.bss:00000EB4                 db    ? ;
.bss:00000EB5                 db    ? ;
.bss:00000EB6                 db    ? ;
.bss:00000EB7                 db    ? ;
.bss:00000EB8                 db    ? ;
.bss:00000EB9                 db    ? ;
.bss:00000EBA                 db    ? ;
.bss:00000EBB                 db    ? ;
.bss:00000EBC                 db    ? ;
.bss:00000EBD                 db    ? ;
.bss:00000EBE                 db    ? ;
.bss:00000EBF                 db    ? ;
.bss:00000EC0                 db    ? ;
.bss:00000EC1                 db    ? ;
.bss:00000EC2                 db    ? ;
.bss:00000EC3                 db    ? ;
.bss:00000EC4                 db    ? ;
.bss:00000EC5                 db    ? ;
.bss:00000EC6                 db    ? ;
.bss:00000EC7                 db    ? ;
.bss:00000EC8                 db    ? ;
.bss:00000EC9                 db    ? ;
.bss:00000ECA                 db    ? ;
.bss:00000ECB                 db    ? ;
.bss:00000ECC                 db    ? ;
.bss:00000ECD                 db    ? ;
.bss:00000ECE                 db    ? ;
.bss:00000ECF                 db    ? ;
.bss:00000ED0                 db    ? ;
.bss:00000ED1                 db    ? ;
.bss:00000ED2                 db    ? ;
.bss:00000ED3                 db    ? ;
.bss:00000ED4                 db    ? ;
.bss:00000ED5                 db    ? ;
.bss:00000ED6                 db    ? ;
.bss:00000ED7                 db    ? ;
.bss:00000ED8                 db    ? ;
.bss:00000ED9                 db    ? ;
.bss:00000EDA                 db    ? ;
.bss:00000EDB                 db    ? ;
.bss:00000EDC                 db    ? ;
.bss:00000EDD                 db    ? ;
.bss:00000EDE                 db    ? ;
.bss:00000EDF                 db    ? ;
.bss:00000EE0                 db    ? ;
.bss:00000EE1                 db    ? ;
.bss:00000EE2                 db    ? ;
.bss:00000EE3                 db    ? ;
.bss:00000EE4                 db    ? ;
.bss:00000EE5                 db    ? ;
.bss:00000EE6                 db    ? ;
.bss:00000EE7                 db    ? ;
.bss:00000EE8                 db    ? ;
.bss:00000EE9                 db    ? ;
.bss:00000EEA                 db    ? ;
.bss:00000EEB                 db    ? ;
.bss:00000EEC                 db    ? ;
.bss:00000EED                 db    ? ;
.bss:00000EEE                 db    ? ;
.bss:00000EEF                 db    ? ;
.bss:00000EF0                 db    ? ;
.bss:00000EF1                 db    ? ;
.bss:00000EF2                 db    ? ;
.bss:00000EF3                 db    ? ;
.bss:00000EF4                 db    ? ;
.bss:00000EF5                 db    ? ;
.bss:00000EF6                 db    ? ;
.bss:00000EF7                 db    ? ;
.bss:00000EF8                 db    ? ;
.bss:00000EF9                 db    ? ;
.bss:00000EFA                 db    ? ;
.bss:00000EFB                 db    ? ;
.bss:00000EFC                 db    ? ;
.bss:00000EFD                 db    ? ;
.bss:00000EFE                 db    ? ;
.bss:00000EFF                 db    ? ;
.bss:00000F00                 db    ? ;
.bss:00000F01                 db    ? ;
.bss:00000F02                 db    ? ;
.bss:00000F03                 db    ? ;
.bss:00000F04                 db    ? ;
.bss:00000F05                 db    ? ;
.bss:00000F06                 db    ? ;
.bss:00000F07                 db    ? ;
.bss:00000F08                 db    ? ;
.bss:00000F09                 db    ? ;
.bss:00000F0A                 db    ? ;
.bss:00000F0B                 db    ? ;
.bss:00000F0C                 db    ? ;
.bss:00000F0D                 db    ? ;
.bss:00000F0E                 db    ? ;
.bss:00000F0F                 db    ? ;
.bss:00000F10                 db    ? ;
.bss:00000F11                 db    ? ;
.bss:00000F12                 db    ? ;
.bss:00000F13                 db    ? ;
.bss:00000F14                 db    ? ;
.bss:00000F15                 db    ? ;
.bss:00000F16                 db    ? ;
.bss:00000F17                 db    ? ;
.bss:00000F18                 db    ? ;
.bss:00000F19                 db    ? ;
.bss:00000F1A                 db    ? ;
.bss:00000F1B                 db    ? ;
.bss:00000F1C                 db    ? ;
.bss:00000F1D                 db    ? ;
.bss:00000F1E                 db    ? ;
.bss:00000F1F                 db    ? ;
.bss:00000F20                 db    ? ;
.bss:00000F21                 db    ? ;
.bss:00000F22                 db    ? ;
.bss:00000F23                 db    ? ;
.bss:00000F24                 db    ? ;
.bss:00000F25                 db    ? ;
.bss:00000F26                 db    ? ;
.bss:00000F27                 db    ? ;
.bss:00000F28                 db    ? ;
.bss:00000F29                 db    ? ;
.bss:00000F2A                 db    ? ;
.bss:00000F2B                 db    ? ;
.bss:00000F2C                 db    ? ;
.bss:00000F2D                 db    ? ;
.bss:00000F2E                 db    ? ;
.bss:00000F2F                 db    ? ;
.bss:00000F30                 db    ? ;
.bss:00000F31                 db    ? ;
.bss:00000F32                 db    ? ;
.bss:00000F33                 db    ? ;
.bss:00000F34                 db    ? ;
.bss:00000F35                 db    ? ;
.bss:00000F36                 db    ? ;
.bss:00000F37                 db    ? ;
.bss:00000F38                 db    ? ;
.bss:00000F39                 db    ? ;
.bss:00000F3A                 db    ? ;
.bss:00000F3B                 db    ? ;
.bss:00000F3C                 db    ? ;
.bss:00000F3D                 db    ? ;
.bss:00000F3E                 db    ? ;
.bss:00000F3F                 db    ? ;
.bss:00000F40                 db    ? ;
.bss:00000F41                 db    ? ;
.bss:00000F42                 db    ? ;
.bss:00000F43                 db    ? ;
.bss:00000F44                 db    ? ;
.bss:00000F45                 db    ? ;
.bss:00000F46                 db    ? ;
.bss:00000F47                 db    ? ;
.bss:00000F48                 db    ? ;
.bss:00000F49                 db    ? ;
.bss:00000F4A                 db    ? ;
.bss:00000F4B                 db    ? ;
.bss:00000F4C                 db    ? ;
.bss:00000F4D                 db    ? ;
.bss:00000F4E                 db    ? ;
.bss:00000F4F                 db    ? ;
.bss:00000F50                 db    ? ;
.bss:00000F51                 db    ? ;
.bss:00000F52                 db    ? ;
.bss:00000F53                 db    ? ;
.bss:00000F54                 db    ? ;
.bss:00000F55                 db    ? ;
.bss:00000F56                 db    ? ;
.bss:00000F57                 db    ? ;
.bss:00000F58                 db    ? ;
.bss:00000F59                 db    ? ;
.bss:00000F5A                 db    ? ;
.bss:00000F5B                 db    ? ;
.bss:00000F5C                 db    ? ;
.bss:00000F5D                 db    ? ;
.bss:00000F5E                 db    ? ;
.bss:00000F5F                 db    ? ;
.bss:00000F60                 db    ? ;
.bss:00000F61                 db    ? ;
.bss:00000F62                 db    ? ;
.bss:00000F63                 db    ? ;
.bss:00000F64                 db    ? ;
.bss:00000F65                 db    ? ;
.bss:00000F66                 db    ? ;
.bss:00000F67                 db    ? ;
.bss:00000F68                 db    ? ;
.bss:00000F69                 db    ? ;
.bss:00000F6A                 db    ? ;
.bss:00000F6B                 db    ? ;
.bss:00000F6C                 db    ? ;
.bss:00000F6D                 db    ? ;
.bss:00000F6E                 db    ? ;
.bss:00000F6F                 db    ? ;
.bss:00000F70                 db    ? ;
.bss:00000F71                 db    ? ;
.bss:00000F72                 db    ? ;
.bss:00000F73                 db    ? ;
.bss:00000F74                 db    ? ;
.bss:00000F75                 db    ? ;
.bss:00000F76                 db    ? ;
.bss:00000F77                 db    ? ;
.bss:00000F78                 db    ? ;
.bss:00000F79                 db    ? ;
.bss:00000F7A                 db    ? ;
.bss:00000F7B                 db    ? ;
.bss:00000F7C                 db    ? ;
.bss:00000F7D                 db    ? ;
.bss:00000F7E                 db    ? ;
.bss:00000F7F                 db    ? ;
.bss:00000F80                 db    ? ;
.bss:00000F81                 db    ? ;
.bss:00000F82                 db    ? ;
.bss:00000F83                 db    ? ;
.bss:00000F84                 db    ? ;
.bss:00000F85                 db    ? ;
.bss:00000F86                 db    ? ;
.bss:00000F87                 db    ? ;
.bss:00000F88                 db    ? ;
.bss:00000F89                 db    ? ;
.bss:00000F8A                 db    ? ;
.bss:00000F8B                 db    ? ;
.bss:00000F8C                 db    ? ;
.bss:00000F8D                 db    ? ;
.bss:00000F8E                 db    ? ;
.bss:00000F8F                 db    ? ;
.bss:00000F90                 db    ? ;
.bss:00000F91                 db    ? ;
.bss:00000F92                 db    ? ;
.bss:00000F93                 db    ? ;
.bss:00000F94                 db    ? ;
.bss:00000F95                 db    ? ;
.bss:00000F96                 db    ? ;
.bss:00000F97                 db    ? ;
.bss:00000F98                 db    ? ;
.bss:00000F99                 db    ? ;
.bss:00000F9A                 db    ? ;
.bss:00000F9B                 db    ? ;
.bss:00000F9C                 db    ? ;
.bss:00000F9D                 db    ? ;
.bss:00000F9E                 db    ? ;
.bss:00000F9F                 db    ? ;
.bss:00000FA0                 db    ? ;
.bss:00000FA1                 db    ? ;
.bss:00000FA2                 db    ? ;
.bss:00000FA3                 db    ? ;
.bss:00000FA4                 db    ? ;
.bss:00000FA5                 db    ? ;
.bss:00000FA6                 db    ? ;
.bss:00000FA7                 db    ? ;
.bss:00000FA8                 db    ? ;
.bss:00000FA9                 db    ? ;
.bss:00000FAA                 db    ? ;
.bss:00000FAB                 db    ? ;
.bss:00000FAC                 db    ? ;
.bss:00000FAD                 db    ? ;
.bss:00000FAE                 db    ? ;
.bss:00000FAF                 db    ? ;
.bss:00000FB0                 db    ? ;
.bss:00000FB1                 db    ? ;
.bss:00000FB2                 db    ? ;
.bss:00000FB3                 db    ? ;
.bss:00000FB4                 db    ? ;
.bss:00000FB5                 db    ? ;
.bss:00000FB6                 db    ? ;
.bss:00000FB7                 db    ? ;
.bss:00000FB8                 db    ? ;
.bss:00000FB9                 db    ? ;
.bss:00000FBA                 db    ? ;
.bss:00000FBB                 db    ? ;
.bss:00000FBC                 db    ? ;
.bss:00000FBD                 db    ? ;
.bss:00000FBE                 db    ? ;
.bss:00000FBF                 db    ? ;
.bss:00000FC0                 db    ? ;
.bss:00000FC1                 db    ? ;
.bss:00000FC2                 db    ? ;
.bss:00000FC3                 db    ? ;
.bss:00000FC4                 db    ? ;
.bss:00000FC5                 db    ? ;
.bss:00000FC6                 db    ? ;
.bss:00000FC7                 db    ? ;
.bss:00000FC8                 db    ? ;
.bss:00000FC9                 db    ? ;
.bss:00000FCA                 db    ? ;
.bss:00000FCB                 db    ? ;
.bss:00000FCC                 db    ? ;
.bss:00000FCD                 db    ? ;
.bss:00000FCE                 db    ? ;
.bss:00000FCF                 db    ? ;
.bss:00000FD0                 db    ? ;
.bss:00000FD1                 db    ? ;
.bss:00000FD2                 db    ? ;
.bss:00000FD3                 db    ? ;
.bss:00000FD4                 db    ? ;
.bss:00000FD5                 db    ? ;
.bss:00000FD6                 db    ? ;
.bss:00000FD7                 db    ? ;
.bss:00000FD8                 db    ? ;
.bss:00000FD9                 db    ? ;
.bss:00000FDA                 db    ? ;
.bss:00000FDB                 db    ? ;
.bss:00000FDC                 db    ? ;
.bss:00000FDD                 db    ? ;
.bss:00000FDE                 db    ? ;
.bss:00000FDF                 db    ? ;
.bss:00000FE0                 db    ? ;
.bss:00000FE1                 db    ? ;
.bss:00000FE2                 db    ? ;
.bss:00000FE3                 db    ? ;
.bss:00000FE4                 db    ? ;
.bss:00000FE5                 db    ? ;
.bss:00000FE6                 db    ? ;
.bss:00000FE7                 db    ? ;
.bss:00000FE8                 db    ? ;
.bss:00000FE9                 db    ? ;
.bss:00000FEA                 db    ? ;
.bss:00000FEB                 db    ? ;
.bss:00000FEC                 db    ? ;
.bss:00000FED                 db    ? ;
.bss:00000FEE                 db    ? ;
.bss:00000FEF                 db    ? ;
.bss:00000FF0                 db    ? ;
.bss:00000FF1                 db    ? ;
.bss:00000FF2                 db    ? ;
.bss:00000FF3                 db    ? ;
.bss:00000FF4                 db    ? ;
.bss:00000FF5                 db    ? ;
.bss:00000FF6                 db    ? ;
.bss:00000FF7                 db    ? ;
.bss:00000FF8                 db    ? ;
.bss:00000FF9                 db    ? ;
.bss:00000FFA                 db    ? ;
.bss:00000FFB                 db    ? ;
.bss:00000FFC                 db    ? ;
.bss:00000FFD                 db    ? ;
.bss:00000FFE                 db    ? ;
.bss:00000FFF                 db    ? ;
.bss:00001000                 db    ? ;
.bss:00001001                 db    ? ;
.bss:00001002                 db    ? ;
.bss:00001003                 db    ? ;
.bss:00001004                 db    ? ;
.bss:00001005                 db    ? ;
.bss:00001006                 db    ? ;
.bss:00001007                 db    ? ;
.bss:00001008                 db    ? ;
.bss:00001009                 db    ? ;
.bss:0000100A                 db    ? ;
.bss:0000100B                 db    ? ;
.bss:0000100C                 db    ? ;
.bss:0000100D                 db    ? ;
.bss:0000100E                 db    ? ;
.bss:0000100F                 db    ? ;
.bss:00001010                 db    ? ;
.bss:00001011                 db    ? ;
.bss:00001012                 db    ? ;
.bss:00001013                 db    ? ;
.bss:00001014                 db    ? ;
.bss:00001015                 db    ? ;
.bss:00001016                 db    ? ;
.bss:00001017                 db    ? ;
.bss:00001018                 db    ? ;
.bss:00001019                 db    ? ;
.bss:0000101A                 db    ? ;
.bss:0000101B                 db    ? ;
.bss:0000101C                 db    ? ;
.bss:0000101D                 db    ? ;
.bss:0000101E                 db    ? ;
.bss:0000101F                 db    ? ;
.bss:00001020                 db    ? ;
.bss:00001021                 db    ? ;
.bss:00001022                 db    ? ;
.bss:00001023                 db    ? ;
.bss:00001024                 db    ? ;
.bss:00001025                 db    ? ;
.bss:00001026                 db    ? ;
.bss:00001027                 db    ? ;
.bss:00001028                 db    ? ;
.bss:00001029                 db    ? ;
.bss:0000102A                 db    ? ;
.bss:0000102B                 db    ? ;
.bss:0000102C                 db    ? ;
.bss:0000102D                 db    ? ;
.bss:0000102E                 db    ? ;
.bss:0000102F                 db    ? ;
.bss:00001030                 db    ? ;
.bss:00001031                 db    ? ;
.bss:00001032                 db    ? ;
.bss:00001033                 db    ? ;
.bss:00001034                 db    ? ;
.bss:00001035                 db    ? ;
.bss:00001036                 db    ? ;
.bss:00001037                 db    ? ;
.bss:00001038                 db    ? ;
.bss:00001039                 db    ? ;
.bss:0000103A                 db    ? ;
.bss:0000103B                 db    ? ;
.bss:0000103C                 db    ? ;
.bss:0000103D                 db    ? ;
.bss:0000103E                 db    ? ;
.bss:0000103F                 db    ? ;
.bss:00001040                 db    ? ;
.bss:00001041                 db    ? ;
.bss:00001042                 db    ? ;
.bss:00001043                 db    ? ;
.bss:00001044                 db    ? ;
.bss:00001045                 db    ? ;
.bss:00001046                 db    ? ;
.bss:00001047                 db    ? ;
.bss:00001048                 db    ? ;
.bss:00001049                 db    ? ;
.bss:0000104A                 db    ? ;
.bss:0000104B                 db    ? ;
.bss:0000104C                 db    ? ;
.bss:0000104D                 db    ? ;
.bss:0000104E                 db    ? ;
.bss:0000104F                 db    ? ;
.bss:00001050                 db    ? ;
.bss:00001051                 db    ? ;
.bss:00001052                 db    ? ;
.bss:00001053                 db    ? ;
.bss:00001054                 db    ? ;
.bss:00001055                 db    ? ;
.bss:00001056                 db    ? ;
.bss:00001057                 db    ? ;
.bss:00001058                 db    ? ;
.bss:00001059                 db    ? ;
.bss:0000105A                 db    ? ;
.bss:0000105B                 db    ? ;
.bss:0000105C                 db    ? ;
.bss:0000105D                 db    ? ;
.bss:0000105E                 db    ? ;
.bss:0000105F                 db    ? ;
.bss:00001060                 db    ? ;
.bss:00001061                 db    ? ;
.bss:00001062                 db    ? ;
.bss:00001063                 db    ? ;
.bss:00001064                 db    ? ;
.bss:00001065                 db    ? ;
.bss:00001066                 db    ? ;
.bss:00001067                 db    ? ;
.bss:00001068                 db    ? ;
.bss:00001069                 db    ? ;
.bss:0000106A                 db    ? ;
.bss:0000106B                 db    ? ;
.bss:0000106C                 db    ? ;
.bss:0000106D                 db    ? ;
.bss:0000106E                 db    ? ;
.bss:0000106F                 db    ? ;
.bss:00001070                 db    ? ;
.bss:00001071                 db    ? ;
.bss:00001072                 db    ? ;
.bss:00001073                 db    ? ;
.bss:00001074                 db    ? ;
.bss:00001075                 db    ? ;
.bss:00001076                 db    ? ;
.bss:00001077                 db    ? ;
.bss:00001078                 db    ? ;
.bss:00001079                 db    ? ;
.bss:0000107A                 db    ? ;
.bss:0000107B                 db    ? ;
.bss:0000107C                 db    ? ;
.bss:0000107D                 db    ? ;
.bss:0000107E                 db    ? ;
.bss:0000107F                 db    ? ;
.bss:00001080                 db    ? ;
.bss:00001081                 db    ? ;
.bss:00001082                 db    ? ;
.bss:00001083                 db    ? ;
.bss:00001084                 db    ? ;
.bss:00001085                 db    ? ;
.bss:00001086                 db    ? ;
.bss:00001087                 db    ? ;
.bss:00001088                 db    ? ;
.bss:00001089                 db    ? ;
.bss:0000108A                 db    ? ;
.bss:0000108B                 db    ? ;
.bss:0000108C                 db    ? ;
.bss:0000108D                 db    ? ;
.bss:0000108E                 db    ? ;
.bss:0000108F                 db    ? ;
.bss:00001090                 db    ? ;
.bss:00001091                 db    ? ;
.bss:00001092                 db    ? ;
.bss:00001093                 db    ? ;
.bss:00001094                 db    ? ;
.bss:00001095                 db    ? ;
.bss:00001096                 db    ? ;
.bss:00001097                 db    ? ;
.bss:00001098                 db    ? ;
.bss:00001099                 db    ? ;
.bss:0000109A                 db    ? ;
.bss:0000109B                 db    ? ;
.bss:0000109C                 db    ? ;
.bss:0000109D                 db    ? ;
.bss:0000109E                 db    ? ;
.bss:0000109F                 db    ? ;
.bss:000010A0                 db    ? ;
.bss:000010A1                 db    ? ;
.bss:000010A2                 db    ? ;
.bss:000010A3                 db    ? ;
.bss:000010A4                 db    ? ;
.bss:000010A5                 db    ? ;
.bss:000010A6                 db    ? ;
.bss:000010A7                 db    ? ;
.bss:000010A8                 db    ? ;
.bss:000010A9                 db    ? ;
.bss:000010AA                 db    ? ;
.bss:000010AB                 db    ? ;
.bss:000010AC                 db    ? ;
.bss:000010AD                 db    ? ;
.bss:000010AE                 db    ? ;
.bss:000010AF                 db    ? ;
.bss:000010B0                 db    ? ;
.bss:000010B1                 db    ? ;
.bss:000010B2                 db    ? ;
.bss:000010B3                 db    ? ;
.bss:000010B4                 db    ? ;
.bss:000010B5                 db    ? ;
.bss:000010B6                 db    ? ;
.bss:000010B7                 db    ? ;
.bss:000010B8                 db    ? ;
.bss:000010B9                 db    ? ;
.bss:000010BA                 db    ? ;
.bss:000010BB                 db    ? ;
.bss:000010BC                 db    ? ;
.bss:000010BD                 db    ? ;
.bss:000010BE                 db    ? ;
.bss:000010BF                 db    ? ;
.bss:000010C0                 db    ? ;
.bss:000010C1                 db    ? ;
.bss:000010C2                 db    ? ;
.bss:000010C3                 db    ? ;
.bss:000010C4                 db    ? ;
.bss:000010C5                 db    ? ;
.bss:000010C6                 db    ? ;
.bss:000010C7                 db    ? ;
.bss:000010C8                 db    ? ;
.bss:000010C9                 db    ? ;
.bss:000010CA                 db    ? ;
.bss:000010CB                 db    ? ;
.bss:000010CC                 db    ? ;
.bss:000010CD                 db    ? ;
.bss:000010CE                 db    ? ;
.bss:000010CF                 db    ? ;
.bss:000010D0 ; int offset_width
.bss:000010D0 _offset_width   dd ?                    ; DATA XREF: WinMain(x,x,x,x)+CE3w
.bss:000010D0                                         ; WinMain(x,x,x,x)+D01r ...
.bss:000010D4 _prev_rows      dd ?                    ; DATA XREF: WndProc(x,x,x,x)+2254w
.bss:000010D8 ; char *icon_name
.bss:000010D8 _icon_name      dd ?                    ; DATA XREF: _start_backend:loc_422Fw
.bss:000010D8                                         ; _start_backend+1C1r ...
.bss:000010DC _sesslist       dd ?                    ; DATA XREF: WinMain(x,x,x,x)+F47o
.bss:000010DC                                         ; _update_savedsess_menu:loc_4551r ...
.bss:000010E0 dword_10E0      dd ?                    ; DATA XREF: _update_savedsess_menu+74r
.bss:000010E0                                         ; WndProc(x,x,x,x)+54Ar
.bss:000010E4                 align 8
.bss:000010E8 _und_mode       dd ?                    ; DATA XREF: _init_fonts+93w
.bss:000010E8                                         ; _init_fonts+5D1w ...
.bss:000010EC ; `reset_window'::`13'::ss
.bss:000010EC ?ss@?N@??reset_window@@9@9 dd ?         ; DATA XREF: _reset_window:loc_6571o
.bss:000010EC                                         ; _reset_window+51Br ...
.bss:000010F0 dword_10F0      dd ?                    ; DATA XREF: _reset_window+536r
.bss:000010F0                                         ; _reset_window+5C5r ...
.bss:000010F4 dword_10F4      dd ?                    ; DATA XREF: _reset_window+516r
.bss:000010F4                                         ; _reset_window+58Cr ...
.bss:000010F8 dword_10F8      dd ?                    ; DATA XREF: _reset_window+531r
.bss:000010F8                                         ; _reset_window+5C0r ...
.bss:000010FC _dbltime        dd ?                    ; DATA XREF: WinMain(x,x,x,x)+EDAw
.bss:000010FC                                         ; _click+ACr
.bss:00001100 _extra_height   dd ?                    ; DATA XREF: WinMain(x,x,x,x)+A6Aw
.bss:00001100                                         ; WinMain(x,x,x,x)+AACr ...
.bss:00001104 _session_closed dd ?                    ; DATA XREF: _start_backend:loc_4357w
.bss:00001104                                         ; _close_session+21w ...
.bss:00001108 _font_varpitch  dd ?                    ; DATA XREF: _init_fonts+264w
.bss:00001108                                         ; _init_fonts:loc_5659w ...
.bss:0000110C ; int font_height
.bss:0000110C _font_height    dd ?                    ; DATA XREF: WinMain(x,x,x,x)+A56w
.bss:0000110C                                         ; WinMain(x,x,x,x)+AA5r ...
.bss:00001110 ; HGDIOBJ pal
.bss:00001110 _pal            dd ?                    ; DATA XREF: WinMain(x,x,x,x)+1234w
.bss:00001110                                         ; _cleanup_exit+17r ...
.bss:00001114 _bold_colours   dd ?                    ; DATA XREF: _init_fonts+8Ew
.bss:00001114                                         ; _do_text_internal:loc_A6CBr ...
.bss:00001118 ; LPCSTR window_name
.bss:00001118 _window_name    dd ?                    ; DATA XREF: _start_backend+1C7w
.bss:00001118                                         ; WndProc(x,x,x,x):loc_7248r ...
.bss:0000111C _font_dualwidth dd ?                    ; DATA XREF: _init_fonts+279w
.bss:0000111C                                         ; _init_fonts+28Bw ...
.bss:00001120 ; WCHAR `TranslateKey'::`2'::keys_unicode
.bss:00001120 ?keys_unicode@?1??TranslateKey@@9@9 dw ? ; DATA XREF: _TranslateKey+1931o
.bss:00001120                                         ; _TranslateKey+19E6o ...
.bss:00001122                 align 8
.bss:00001128 ; UINT_PTR savedsess_menu
.bss:00001128 _savedsess_menu dd ?                    ; DATA XREF: WinMain(x,x,x,x)+F40w
.bss:00001128                                         ; WinMain(x,x,x,x)+1036r ...
.bss:0000112C ; HBITMAP caretbm
.bss:0000112C _caretbm        dd ?                    ; DATA XREF: WinMain(x,x,x,x)+E09w
.bss:0000112C                                         ; WinMain(x,x,x,x)+E2Dr ...
.bss:00001130 _colours        dd ?                    ; DATA XREF: _init_palette+20Aw
.bss:00001130                                         ; _init_palette+264w ...
.bss:00001134                 db    ? ;
.bss:00001135                 db    ? ;
.bss:00001136                 db    ? ;
.bss:00001137                 db    ? ;
.bss:00001138                 db    ? ;
.bss:00001139                 db    ? ;
.bss:0000113A                 db    ? ;
.bss:0000113B                 db    ? ;
.bss:0000113C                 db    ? ;
.bss:0000113D                 db    ? ;
.bss:0000113E                 db    ? ;
.bss:0000113F                 db    ? ;
.bss:00001140                 db    ? ;
.bss:00001141                 db    ? ;
.bss:00001142                 db    ? ;
.bss:00001143                 db    ? ;
.bss:00001144                 db    ? ;
.bss:00001145                 db    ? ;
.bss:00001146                 db    ? ;
.bss:00001147                 db    ? ;
.bss:00001148                 db    ? ;
.bss:00001149                 db    ? ;
.bss:0000114A                 db    ? ;
.bss:0000114B                 db    ? ;
.bss:0000114C                 db    ? ;
.bss:0000114D                 db    ? ;
.bss:0000114E                 db    ? ;
.bss:0000114F                 db    ? ;
.bss:00001150                 db    ? ;
.bss:00001151                 db    ? ;
.bss:00001152                 db    ? ;
.bss:00001153                 db    ? ;
.bss:00001154                 db    ? ;
.bss:00001155                 db    ? ;
.bss:00001156                 db    ? ;
.bss:00001157                 db    ? ;
.bss:00001158                 db    ? ;
.bss:00001159                 db    ? ;
.bss:0000115A                 db    ? ;
.bss:0000115B                 db    ? ;
.bss:0000115C                 db    ? ;
.bss:0000115D                 db    ? ;
.bss:0000115E                 db    ? ;
.bss:0000115F                 db    ? ;
.bss:00001160                 db    ? ;
.bss:00001161                 db    ? ;
.bss:00001162                 db    ? ;
.bss:00001163                 db    ? ;
.bss:00001164                 db    ? ;
.bss:00001165                 db    ? ;
.bss:00001166                 db    ? ;
.bss:00001167                 db    ? ;
.bss:00001168                 db    ? ;
.bss:00001169                 db    ? ;
.bss:0000116A                 db    ? ;
.bss:0000116B                 db    ? ;
.bss:0000116C                 db    ? ;
.bss:0000116D                 db    ? ;
.bss:0000116E                 db    ? ;
.bss:0000116F                 db    ? ;
.bss:00001170                 db    ? ;
.bss:00001171                 db    ? ;
.bss:00001172                 db    ? ;
.bss:00001173                 db    ? ;
.bss:00001174                 db    ? ;
.bss:00001175                 db    ? ;
.bss:00001176                 db    ? ;
.bss:00001177                 db    ? ;
.bss:00001178                 db    ? ;
.bss:00001179                 db    ? ;
.bss:0000117A                 db    ? ;
.bss:0000117B                 db    ? ;
.bss:0000117C                 db    ? ;
.bss:0000117D                 db    ? ;
.bss:0000117E                 db    ? ;
.bss:0000117F                 db    ? ;
.bss:00001180                 db    ? ;
.bss:00001181                 db    ? ;
.bss:00001182                 db    ? ;
.bss:00001183                 db    ? ;
.bss:00001184                 db    ? ;
.bss:00001185                 db    ? ;
.bss:00001186                 db    ? ;
.bss:00001187                 db    ? ;
.bss:00001188                 db    ? ;
.bss:00001189                 db    ? ;
.bss:0000118A                 db    ? ;
.bss:0000118B                 db    ? ;
.bss:0000118C                 db    ? ;
.bss:0000118D                 db    ? ;
.bss:0000118E                 db    ? ;
.bss:0000118F                 db    ? ;
.bss:00001190                 db    ? ;
.bss:00001191                 db    ? ;
.bss:00001192                 db    ? ;
.bss:00001193                 db    ? ;
.bss:00001194                 db    ? ;
.bss:00001195                 db    ? ;
.bss:00001196                 db    ? ;
.bss:00001197                 db    ? ;
.bss:00001198                 db    ? ;
.bss:00001199                 db    ? ;
.bss:0000119A                 db    ? ;
.bss:0000119B                 db    ? ;
.bss:0000119C                 db    ? ;
.bss:0000119D                 db    ? ;
.bss:0000119E                 db    ? ;
.bss:0000119F                 db    ? ;
.bss:000011A0                 db    ? ;
.bss:000011A1                 db    ? ;
.bss:000011A2                 db    ? ;
.bss:000011A3                 db    ? ;
.bss:000011A4                 db    ? ;
.bss:000011A5                 db    ? ;
.bss:000011A6                 db    ? ;
.bss:000011A7                 db    ? ;
.bss:000011A8                 db    ? ;
.bss:000011A9                 db    ? ;
.bss:000011AA                 db    ? ;
.bss:000011AB                 db    ? ;
.bss:000011AC                 db    ? ;
.bss:000011AD                 db    ? ;
.bss:000011AE                 db    ? ;
.bss:000011AF                 db    ? ;
.bss:000011B0                 db    ? ;
.bss:000011B1                 db    ? ;
.bss:000011B2                 db    ? ;
.bss:000011B3                 db    ? ;
.bss:000011B4                 db    ? ;
.bss:000011B5                 db    ? ;
.bss:000011B6                 db    ? ;
.bss:000011B7                 db    ? ;
.bss:000011B8                 db    ? ;
.bss:000011B9                 db    ? ;
.bss:000011BA                 db    ? ;
.bss:000011BB                 db    ? ;
.bss:000011BC                 db    ? ;
.bss:000011BD                 db    ? ;
.bss:000011BE                 db    ? ;
.bss:000011BF                 db    ? ;
.bss:000011C0                 db    ? ;
.bss:000011C1                 db    ? ;
.bss:000011C2                 db    ? ;
.bss:000011C3                 db    ? ;
.bss:000011C4                 db    ? ;
.bss:000011C5                 db    ? ;
.bss:000011C6                 db    ? ;
.bss:000011C7                 db    ? ;
.bss:000011C8                 db    ? ;
.bss:000011C9                 db    ? ;
.bss:000011CA                 db    ? ;
.bss:000011CB                 db    ? ;
.bss:000011CC                 db    ? ;
.bss:000011CD                 db    ? ;
.bss:000011CE                 db    ? ;
.bss:000011CF                 db    ? ;
.bss:000011D0                 db    ? ;
.bss:000011D1                 db    ? ;
.bss:000011D2                 db    ? ;
.bss:000011D3                 db    ? ;
.bss:000011D4                 db    ? ;
.bss:000011D5                 db    ? ;
.bss:000011D6                 db    ? ;
.bss:000011D7                 db    ? ;
.bss:000011D8                 db    ? ;
.bss:000011D9                 db    ? ;
.bss:000011DA                 db    ? ;
.bss:000011DB                 db    ? ;
.bss:000011DC                 db    ? ;
.bss:000011DD                 db    ? ;
.bss:000011DE                 db    ? ;
.bss:000011DF                 db    ? ;
.bss:000011E0                 db    ? ;
.bss:000011E1                 db    ? ;
.bss:000011E2                 db    ? ;
.bss:000011E3                 db    ? ;
.bss:000011E4                 db    ? ;
.bss:000011E5                 db    ? ;
.bss:000011E6                 db    ? ;
.bss:000011E7                 db    ? ;
.bss:000011E8                 db    ? ;
.bss:000011E9                 db    ? ;
.bss:000011EA                 db    ? ;
.bss:000011EB                 db    ? ;
.bss:000011EC                 db    ? ;
.bss:000011ED                 db    ? ;
.bss:000011EE                 db    ? ;
.bss:000011EF                 db    ? ;
.bss:000011F0                 db    ? ;
.bss:000011F1                 db    ? ;
.bss:000011F2                 db    ? ;
.bss:000011F3                 db    ? ;
.bss:000011F4                 db    ? ;
.bss:000011F5                 db    ? ;
.bss:000011F6                 db    ? ;
.bss:000011F7                 db    ? ;
.bss:000011F8                 db    ? ;
.bss:000011F9                 db    ? ;
.bss:000011FA                 db    ? ;
.bss:000011FB                 db    ? ;
.bss:000011FC                 db    ? ;
.bss:000011FD                 db    ? ;
.bss:000011FE                 db    ? ;
.bss:000011FF                 db    ? ;
.bss:00001200                 db    ? ;
.bss:00001201                 db    ? ;
.bss:00001202                 db    ? ;
.bss:00001203                 db    ? ;
.bss:00001204                 db    ? ;
.bss:00001205                 db    ? ;
.bss:00001206                 db    ? ;
.bss:00001207                 db    ? ;
.bss:00001208                 db    ? ;
.bss:00001209                 db    ? ;
.bss:0000120A                 db    ? ;
.bss:0000120B                 db    ? ;
.bss:0000120C                 db    ? ;
.bss:0000120D                 db    ? ;
.bss:0000120E                 db    ? ;
.bss:0000120F                 db    ? ;
.bss:00001210                 db    ? ;
.bss:00001211                 db    ? ;
.bss:00001212                 db    ? ;
.bss:00001213                 db    ? ;
.bss:00001214                 db    ? ;
.bss:00001215                 db    ? ;
.bss:00001216                 db    ? ;
.bss:00001217                 db    ? ;
.bss:00001218                 db    ? ;
.bss:00001219                 db    ? ;
.bss:0000121A                 db    ? ;
.bss:0000121B                 db    ? ;
.bss:0000121C                 db    ? ;
.bss:0000121D                 db    ? ;
.bss:0000121E                 db    ? ;
.bss:0000121F                 db    ? ;
.bss:00001220                 db    ? ;
.bss:00001221                 db    ? ;
.bss:00001222                 db    ? ;
.bss:00001223                 db    ? ;
.bss:00001224                 db    ? ;
.bss:00001225                 db    ? ;
.bss:00001226                 db    ? ;
.bss:00001227                 db    ? ;
.bss:00001228                 db    ? ;
.bss:00001229                 db    ? ;
.bss:0000122A                 db    ? ;
.bss:0000122B                 db    ? ;
.bss:0000122C                 db    ? ;
.bss:0000122D                 db    ? ;
.bss:0000122E                 db    ? ;
.bss:0000122F                 db    ? ;
.bss:00001230                 db    ? ;
.bss:00001231                 db    ? ;
.bss:00001232                 db    ? ;
.bss:00001233                 db    ? ;
.bss:00001234                 db    ? ;
.bss:00001235                 db    ? ;
.bss:00001236                 db    ? ;
.bss:00001237                 db    ? ;
.bss:00001238                 db    ? ;
.bss:00001239                 db    ? ;
.bss:0000123A                 db    ? ;
.bss:0000123B                 db    ? ;
.bss:0000123C                 db    ? ;
.bss:0000123D                 db    ? ;
.bss:0000123E                 db    ? ;
.bss:0000123F                 db    ? ;
.bss:00001240                 db    ? ;
.bss:00001241                 db    ? ;
.bss:00001242                 db    ? ;
.bss:00001243                 db    ? ;
.bss:00001244                 db    ? ;
.bss:00001245                 db    ? ;
.bss:00001246                 db    ? ;
.bss:00001247                 db    ? ;
.bss:00001248                 db    ? ;
.bss:00001249                 db    ? ;
.bss:0000124A                 db    ? ;
.bss:0000124B                 db    ? ;
.bss:0000124C                 db    ? ;
.bss:0000124D                 db    ? ;
.bss:0000124E                 db    ? ;
.bss:0000124F                 db    ? ;
.bss:00001250                 db    ? ;
.bss:00001251                 db    ? ;
.bss:00001252                 db    ? ;
.bss:00001253                 db    ? ;
.bss:00001254                 db    ? ;
.bss:00001255                 db    ? ;
.bss:00001256                 db    ? ;
.bss:00001257                 db    ? ;
.bss:00001258                 db    ? ;
.bss:00001259                 db    ? ;
.bss:0000125A                 db    ? ;
.bss:0000125B                 db    ? ;
.bss:0000125C                 db    ? ;
.bss:0000125D                 db    ? ;
.bss:0000125E                 db    ? ;
.bss:0000125F                 db    ? ;
.bss:00001260                 db    ? ;
.bss:00001261                 db    ? ;
.bss:00001262                 db    ? ;
.bss:00001263                 db    ? ;
.bss:00001264                 db    ? ;
.bss:00001265                 db    ? ;
.bss:00001266                 db    ? ;
.bss:00001267                 db    ? ;
.bss:00001268                 db    ? ;
.bss:00001269                 db    ? ;
.bss:0000126A                 db    ? ;
.bss:0000126B                 db    ? ;
.bss:0000126C                 db    ? ;
.bss:0000126D                 db    ? ;
.bss:0000126E                 db    ? ;
.bss:0000126F                 db    ? ;
.bss:00001270                 db    ? ;
.bss:00001271                 db    ? ;
.bss:00001272                 db    ? ;
.bss:00001273                 db    ? ;
.bss:00001274                 db    ? ;
.bss:00001275                 db    ? ;
.bss:00001276                 db    ? ;
.bss:00001277                 db    ? ;
.bss:00001278                 db    ? ;
.bss:00001279                 db    ? ;
.bss:0000127A                 db    ? ;
.bss:0000127B                 db    ? ;
.bss:0000127C                 db    ? ;
.bss:0000127D                 db    ? ;
.bss:0000127E                 db    ? ;
.bss:0000127F                 db    ? ;
.bss:00001280                 db    ? ;
.bss:00001281                 db    ? ;
.bss:00001282                 db    ? ;
.bss:00001283                 db    ? ;
.bss:00001284                 db    ? ;
.bss:00001285                 db    ? ;
.bss:00001286                 db    ? ;
.bss:00001287                 db    ? ;
.bss:00001288                 db    ? ;
.bss:00001289                 db    ? ;
.bss:0000128A                 db    ? ;
.bss:0000128B                 db    ? ;
.bss:0000128C                 db    ? ;
.bss:0000128D                 db    ? ;
.bss:0000128E                 db    ? ;
.bss:0000128F                 db    ? ;
.bss:00001290                 db    ? ;
.bss:00001291                 db    ? ;
.bss:00001292                 db    ? ;
.bss:00001293                 db    ? ;
.bss:00001294                 db    ? ;
.bss:00001295                 db    ? ;
.bss:00001296                 db    ? ;
.bss:00001297                 db    ? ;
.bss:00001298                 db    ? ;
.bss:00001299                 db    ? ;
.bss:0000129A                 db    ? ;
.bss:0000129B                 db    ? ;
.bss:0000129C                 db    ? ;
.bss:0000129D                 db    ? ;
.bss:0000129E                 db    ? ;
.bss:0000129F                 db    ? ;
.bss:000012A0                 db    ? ;
.bss:000012A1                 db    ? ;
.bss:000012A2                 db    ? ;
.bss:000012A3                 db    ? ;
.bss:000012A4                 db    ? ;
.bss:000012A5                 db    ? ;
.bss:000012A6                 db    ? ;
.bss:000012A7                 db    ? ;
.bss:000012A8                 db    ? ;
.bss:000012A9                 db    ? ;
.bss:000012AA                 db    ? ;
.bss:000012AB                 db    ? ;
.bss:000012AC                 db    ? ;
.bss:000012AD                 db    ? ;
.bss:000012AE                 db    ? ;
.bss:000012AF                 db    ? ;
.bss:000012B0                 db    ? ;
.bss:000012B1                 db    ? ;
.bss:000012B2                 db    ? ;
.bss:000012B3                 db    ? ;
.bss:000012B4                 db    ? ;
.bss:000012B5                 db    ? ;
.bss:000012B6                 db    ? ;
.bss:000012B7                 db    ? ;
.bss:000012B8                 db    ? ;
.bss:000012B9                 db    ? ;
.bss:000012BA                 db    ? ;
.bss:000012BB                 db    ? ;
.bss:000012BC                 db    ? ;
.bss:000012BD                 db    ? ;
.bss:000012BE                 db    ? ;
.bss:000012BF                 db    ? ;
.bss:000012C0                 db    ? ;
.bss:000012C1                 db    ? ;
.bss:000012C2                 db    ? ;
.bss:000012C3                 db    ? ;
.bss:000012C4                 db    ? ;
.bss:000012C5                 db    ? ;
.bss:000012C6                 db    ? ;
.bss:000012C7                 db    ? ;
.bss:000012C8                 db    ? ;
.bss:000012C9                 db    ? ;
.bss:000012CA                 db    ? ;
.bss:000012CB                 db    ? ;
.bss:000012CC                 db    ? ;
.bss:000012CD                 db    ? ;
.bss:000012CE                 db    ? ;
.bss:000012CF                 db    ? ;
.bss:000012D0                 db    ? ;
.bss:000012D1                 db    ? ;
.bss:000012D2                 db    ? ;
.bss:000012D3                 db    ? ;
.bss:000012D4                 db    ? ;
.bss:000012D5                 db    ? ;
.bss:000012D6                 db    ? ;
.bss:000012D7                 db    ? ;
.bss:000012D8                 db    ? ;
.bss:000012D9                 db    ? ;
.bss:000012DA                 db    ? ;
.bss:000012DB                 db    ? ;
.bss:000012DC                 db    ? ;
.bss:000012DD                 db    ? ;
.bss:000012DE                 db    ? ;
.bss:000012DF                 db    ? ;
.bss:000012E0                 db    ? ;
.bss:000012E1                 db    ? ;
.bss:000012E2                 db    ? ;
.bss:000012E3                 db    ? ;
.bss:000012E4                 db    ? ;
.bss:000012E5                 db    ? ;
.bss:000012E6                 db    ? ;
.bss:000012E7                 db    ? ;
.bss:000012E8                 db    ? ;
.bss:000012E9                 db    ? ;
.bss:000012EA                 db    ? ;
.bss:000012EB                 db    ? ;
.bss:000012EC                 db    ? ;
.bss:000012ED                 db    ? ;
.bss:000012EE                 db    ? ;
.bss:000012EF                 db    ? ;
.bss:000012F0                 db    ? ;
.bss:000012F1                 db    ? ;
.bss:000012F2                 db    ? ;
.bss:000012F3                 db    ? ;
.bss:000012F4                 db    ? ;
.bss:000012F5                 db    ? ;
.bss:000012F6                 db    ? ;
.bss:000012F7                 db    ? ;
.bss:000012F8                 db    ? ;
.bss:000012F9                 db    ? ;
.bss:000012FA                 db    ? ;
.bss:000012FB                 db    ? ;
.bss:000012FC                 db    ? ;
.bss:000012FD                 db    ? ;
.bss:000012FE                 db    ? ;
.bss:000012FF                 db    ? ;
.bss:00001300                 db    ? ;
.bss:00001301                 db    ? ;
.bss:00001302                 db    ? ;
.bss:00001303                 db    ? ;
.bss:00001304                 db    ? ;
.bss:00001305                 db    ? ;
.bss:00001306                 db    ? ;
.bss:00001307                 db    ? ;
.bss:00001308                 db    ? ;
.bss:00001309                 db    ? ;
.bss:0000130A                 db    ? ;
.bss:0000130B                 db    ? ;
.bss:0000130C                 db    ? ;
.bss:0000130D                 db    ? ;
.bss:0000130E                 db    ? ;
.bss:0000130F                 db    ? ;
.bss:00001310                 db    ? ;
.bss:00001311                 db    ? ;
.bss:00001312                 db    ? ;
.bss:00001313                 db    ? ;
.bss:00001314                 db    ? ;
.bss:00001315                 db    ? ;
.bss:00001316                 db    ? ;
.bss:00001317                 db    ? ;
.bss:00001318                 db    ? ;
.bss:00001319                 db    ? ;
.bss:0000131A                 db    ? ;
.bss:0000131B                 db    ? ;
.bss:0000131C                 db    ? ;
.bss:0000131D                 db    ? ;
.bss:0000131E                 db    ? ;
.bss:0000131F                 db    ? ;
.bss:00001320                 db    ? ;
.bss:00001321                 db    ? ;
.bss:00001322                 db    ? ;
.bss:00001323                 db    ? ;
.bss:00001324                 db    ? ;
.bss:00001325                 db    ? ;
.bss:00001326                 db    ? ;
.bss:00001327                 db    ? ;
.bss:00001328                 db    ? ;
.bss:00001329                 db    ? ;
.bss:0000132A                 db    ? ;
.bss:0000132B                 db    ? ;
.bss:0000132C                 db    ? ;
.bss:0000132D                 db    ? ;
.bss:0000132E                 db    ? ;
.bss:0000132F                 db    ? ;
.bss:00001330                 db    ? ;
.bss:00001331                 db    ? ;
.bss:00001332                 db    ? ;
.bss:00001333                 db    ? ;
.bss:00001334                 db    ? ;
.bss:00001335                 db    ? ;
.bss:00001336                 db    ? ;
.bss:00001337                 db    ? ;
.bss:00001338                 db    ? ;
.bss:00001339                 db    ? ;
.bss:0000133A                 db    ? ;
.bss:0000133B                 db    ? ;
.bss:0000133C                 db    ? ;
.bss:0000133D                 db    ? ;
.bss:0000133E                 db    ? ;
.bss:0000133F                 db    ? ;
.bss:00001340                 db    ? ;
.bss:00001341                 db    ? ;
.bss:00001342                 db    ? ;
.bss:00001343                 db    ? ;
.bss:00001344                 db    ? ;
.bss:00001345                 db    ? ;
.bss:00001346                 db    ? ;
.bss:00001347                 db    ? ;
.bss:00001348                 db    ? ;
.bss:00001349                 db    ? ;
.bss:0000134A                 db    ? ;
.bss:0000134B                 db    ? ;
.bss:0000134C                 db    ? ;
.bss:0000134D                 db    ? ;
.bss:0000134E                 db    ? ;
.bss:0000134F                 db    ? ;
.bss:00001350                 db    ? ;
.bss:00001351                 db    ? ;
.bss:00001352                 db    ? ;
.bss:00001353                 db    ? ;
.bss:00001354                 db    ? ;
.bss:00001355                 db    ? ;
.bss:00001356                 db    ? ;
.bss:00001357                 db    ? ;
.bss:00001358                 db    ? ;
.bss:00001359                 db    ? ;
.bss:0000135A                 db    ? ;
.bss:0000135B                 db    ? ;
.bss:0000135C                 db    ? ;
.bss:0000135D                 db    ? ;
.bss:0000135E                 db    ? ;
.bss:0000135F                 db    ? ;
.bss:00001360                 db    ? ;
.bss:00001361                 db    ? ;
.bss:00001362                 db    ? ;
.bss:00001363                 db    ? ;
.bss:00001364                 db    ? ;
.bss:00001365                 db    ? ;
.bss:00001366                 db    ? ;
.bss:00001367                 db    ? ;
.bss:00001368                 db    ? ;
.bss:00001369                 db    ? ;
.bss:0000136A                 db    ? ;
.bss:0000136B                 db    ? ;
.bss:0000136C                 db    ? ;
.bss:0000136D                 db    ? ;
.bss:0000136E                 db    ? ;
.bss:0000136F                 db    ? ;
.bss:00001370                 db    ? ;
.bss:00001371                 db    ? ;
.bss:00001372                 db    ? ;
.bss:00001373                 db    ? ;
.bss:00001374                 db    ? ;
.bss:00001375                 db    ? ;
.bss:00001376                 db    ? ;
.bss:00001377                 db    ? ;
.bss:00001378                 db    ? ;
.bss:00001379                 db    ? ;
.bss:0000137A                 db    ? ;
.bss:0000137B                 db    ? ;
.bss:0000137C                 db    ? ;
.bss:0000137D                 db    ? ;
.bss:0000137E                 db    ? ;
.bss:0000137F                 db    ? ;
.bss:00001380                 db    ? ;
.bss:00001381                 db    ? ;
.bss:00001382                 db    ? ;
.bss:00001383                 db    ? ;
.bss:00001384                 db    ? ;
.bss:00001385                 db    ? ;
.bss:00001386                 db    ? ;
.bss:00001387                 db    ? ;
.bss:00001388                 db    ? ;
.bss:00001389                 db    ? ;
.bss:0000138A                 db    ? ;
.bss:0000138B                 db    ? ;
.bss:0000138C                 db    ? ;
.bss:0000138D                 db    ? ;
.bss:0000138E                 db    ? ;
.bss:0000138F                 db    ? ;
.bss:00001390                 db    ? ;
.bss:00001391                 db    ? ;
.bss:00001392                 db    ? ;
.bss:00001393                 db    ? ;
.bss:00001394                 db    ? ;
.bss:00001395                 db    ? ;
.bss:00001396                 db    ? ;
.bss:00001397                 db    ? ;
.bss:00001398                 db    ? ;
.bss:00001399                 db    ? ;
.bss:0000139A                 db    ? ;
.bss:0000139B                 db    ? ;
.bss:0000139C                 db    ? ;
.bss:0000139D                 db    ? ;
.bss:0000139E                 db    ? ;
.bss:0000139F                 db    ? ;
.bss:000013A0                 db    ? ;
.bss:000013A1                 db    ? ;
.bss:000013A2                 db    ? ;
.bss:000013A3                 db    ? ;
.bss:000013A4                 db    ? ;
.bss:000013A5                 db    ? ;
.bss:000013A6                 db    ? ;
.bss:000013A7                 db    ? ;
.bss:000013A8                 db    ? ;
.bss:000013A9                 db    ? ;
.bss:000013AA                 db    ? ;
.bss:000013AB                 db    ? ;
.bss:000013AC                 db    ? ;
.bss:000013AD                 db    ? ;
.bss:000013AE                 db    ? ;
.bss:000013AF                 db    ? ;
.bss:000013B0                 db    ? ;
.bss:000013B1                 db    ? ;
.bss:000013B2                 db    ? ;
.bss:000013B3                 db    ? ;
.bss:000013B4                 db    ? ;
.bss:000013B5                 db    ? ;
.bss:000013B6                 db    ? ;
.bss:000013B7                 db    ? ;
.bss:000013B8                 db    ? ;
.bss:000013B9                 db    ? ;
.bss:000013BA                 db    ? ;
.bss:000013BB                 db    ? ;
.bss:000013BC                 db    ? ;
.bss:000013BD                 db    ? ;
.bss:000013BE                 db    ? ;
.bss:000013BF                 db    ? ;
.bss:000013C0                 db    ? ;
.bss:000013C1                 db    ? ;
.bss:000013C2                 db    ? ;
.bss:000013C3                 db    ? ;
.bss:000013C4                 db    ? ;
.bss:000013C5                 db    ? ;
.bss:000013C6                 db    ? ;
.bss:000013C7                 db    ? ;
.bss:000013C8                 db    ? ;
.bss:000013C9                 db    ? ;
.bss:000013CA                 db    ? ;
.bss:000013CB                 db    ? ;
.bss:000013CC                 db    ? ;
.bss:000013CD                 db    ? ;
.bss:000013CE                 db    ? ;
.bss:000013CF                 db    ? ;
.bss:000013D0                 db    ? ;
.bss:000013D1                 db    ? ;
.bss:000013D2                 db    ? ;
.bss:000013D3                 db    ? ;
.bss:000013D4                 db    ? ;
.bss:000013D5                 db    ? ;
.bss:000013D6                 db    ? ;
.bss:000013D7                 db    ? ;
.bss:000013D8                 db    ? ;
.bss:000013D9                 db    ? ;
.bss:000013DA                 db    ? ;
.bss:000013DB                 db    ? ;
.bss:000013DC                 db    ? ;
.bss:000013DD                 db    ? ;
.bss:000013DE                 db    ? ;
.bss:000013DF                 db    ? ;
.bss:000013E0                 db    ? ;
.bss:000013E1                 db    ? ;
.bss:000013E2                 db    ? ;
.bss:000013E3                 db    ? ;
.bss:000013E4                 db    ? ;
.bss:000013E5                 db    ? ;
.bss:000013E6                 db    ? ;
.bss:000013E7                 db    ? ;
.bss:000013E8                 db    ? ;
.bss:000013E9                 db    ? ;
.bss:000013EA                 db    ? ;
.bss:000013EB                 db    ? ;
.bss:000013EC                 db    ? ;
.bss:000013ED                 db    ? ;
.bss:000013EE                 db    ? ;
.bss:000013EF                 db    ? ;
.bss:000013F0                 db    ? ;
.bss:000013F1                 db    ? ;
.bss:000013F2                 db    ? ;
.bss:000013F3                 db    ? ;
.bss:000013F4                 db    ? ;
.bss:000013F5                 db    ? ;
.bss:000013F6                 db    ? ;
.bss:000013F7                 db    ? ;
.bss:000013F8                 db    ? ;
.bss:000013F9                 db    ? ;
.bss:000013FA                 db    ? ;
.bss:000013FB                 db    ? ;
.bss:000013FC                 db    ? ;
.bss:000013FD                 db    ? ;
.bss:000013FE                 db    ? ;
.bss:000013FF                 db    ? ;
.bss:00001400                 db    ? ;
.bss:00001401                 db    ? ;
.bss:00001402                 db    ? ;
.bss:00001403                 db    ? ;
.bss:00001404                 db    ? ;
.bss:00001405                 db    ? ;
.bss:00001406                 db    ? ;
.bss:00001407                 db    ? ;
.bss:00001408                 db    ? ;
.bss:00001409                 db    ? ;
.bss:0000140A                 db    ? ;
.bss:0000140B                 db    ? ;
.bss:0000140C                 db    ? ;
.bss:0000140D                 db    ? ;
.bss:0000140E                 db    ? ;
.bss:0000140F                 db    ? ;
.bss:00001410                 db    ? ;
.bss:00001411                 db    ? ;
.bss:00001412                 db    ? ;
.bss:00001413                 db    ? ;
.bss:00001414                 db    ? ;
.bss:00001415                 db    ? ;
.bss:00001416                 db    ? ;
.bss:00001417                 db    ? ;
.bss:00001418                 db    ? ;
.bss:00001419                 db    ? ;
.bss:0000141A                 db    ? ;
.bss:0000141B                 db    ? ;
.bss:0000141C                 db    ? ;
.bss:0000141D                 db    ? ;
.bss:0000141E                 db    ? ;
.bss:0000141F                 db    ? ;
.bss:00001420                 db    ? ;
.bss:00001421                 db    ? ;
.bss:00001422                 db    ? ;
.bss:00001423                 db    ? ;
.bss:00001424                 db    ? ;
.bss:00001425                 db    ? ;
.bss:00001426                 db    ? ;
.bss:00001427                 db    ? ;
.bss:00001428                 db    ? ;
.bss:00001429                 db    ? ;
.bss:0000142A                 db    ? ;
.bss:0000142B                 db    ? ;
.bss:0000142C                 db    ? ;
.bss:0000142D                 db    ? ;
.bss:0000142E                 db    ? ;
.bss:0000142F                 db    ? ;
.bss:00001430                 db    ? ;
.bss:00001431                 db    ? ;
.bss:00001432                 db    ? ;
.bss:00001433                 db    ? ;
.bss:00001434                 db    ? ;
.bss:00001435                 db    ? ;
.bss:00001436                 db    ? ;
.bss:00001437                 db    ? ;
.bss:00001438                 db    ? ;
.bss:00001439                 db    ? ;
.bss:0000143A                 db    ? ;
.bss:0000143B                 db    ? ;
.bss:0000143C                 db    ? ;
.bss:0000143D                 db    ? ;
.bss:0000143E                 db    ? ;
.bss:0000143F                 db    ? ;
.bss:00001440                 db    ? ;
.bss:00001441                 db    ? ;
.bss:00001442                 db    ? ;
.bss:00001443                 db    ? ;
.bss:00001444                 db    ? ;
.bss:00001445                 db    ? ;
.bss:00001446                 db    ? ;
.bss:00001447                 db    ? ;
.bss:00001448                 db    ? ;
.bss:00001449                 db    ? ;
.bss:0000144A                 db    ? ;
.bss:0000144B                 db    ? ;
.bss:0000144C                 db    ? ;
.bss:0000144D                 db    ? ;
.bss:0000144E                 db    ? ;
.bss:0000144F                 db    ? ;
.bss:00001450                 db    ? ;
.bss:00001451                 db    ? ;
.bss:00001452                 db    ? ;
.bss:00001453                 db    ? ;
.bss:00001454                 db    ? ;
.bss:00001455                 db    ? ;
.bss:00001456                 db    ? ;
.bss:00001457                 db    ? ;
.bss:00001458                 db    ? ;
.bss:00001459                 db    ? ;
.bss:0000145A                 db    ? ;
.bss:0000145B                 db    ? ;
.bss:0000145C                 db    ? ;
.bss:0000145D                 db    ? ;
.bss:0000145E                 db    ? ;
.bss:0000145F                 db    ? ;
.bss:00001460                 db    ? ;
.bss:00001461                 db    ? ;
.bss:00001462                 db    ? ;
.bss:00001463                 db    ? ;
.bss:00001464                 db    ? ;
.bss:00001465                 db    ? ;
.bss:00001466                 db    ? ;
.bss:00001467                 db    ? ;
.bss:00001468                 db    ? ;
.bss:00001469                 db    ? ;
.bss:0000146A                 db    ? ;
.bss:0000146B                 db    ? ;
.bss:0000146C                 db    ? ;
.bss:0000146D                 db    ? ;
.bss:0000146E                 db    ? ;
.bss:0000146F                 db    ? ;
.bss:00001470                 db    ? ;
.bss:00001471                 db    ? ;
.bss:00001472                 db    ? ;
.bss:00001473                 db    ? ;
.bss:00001474                 db    ? ;
.bss:00001475                 db    ? ;
.bss:00001476                 db    ? ;
.bss:00001477                 db    ? ;
.bss:00001478                 db    ? ;
.bss:00001479                 db    ? ;
.bss:0000147A                 db    ? ;
.bss:0000147B                 db    ? ;
.bss:0000147C                 db    ? ;
.bss:0000147D                 db    ? ;
.bss:0000147E                 db    ? ;
.bss:0000147F                 db    ? ;
.bss:00001480                 db    ? ;
.bss:00001481                 db    ? ;
.bss:00001482                 db    ? ;
.bss:00001483                 db    ? ;
.bss:00001484                 db    ? ;
.bss:00001485                 db    ? ;
.bss:00001486                 db    ? ;
.bss:00001487                 db    ? ;
.bss:00001488                 db    ? ;
.bss:00001489                 db    ? ;
.bss:0000148A                 db    ? ;
.bss:0000148B                 db    ? ;
.bss:0000148C                 db    ? ;
.bss:0000148D                 db    ? ;
.bss:0000148E                 db    ? ;
.bss:0000148F                 db    ? ;
.bss:00001490                 db    ? ;
.bss:00001491                 db    ? ;
.bss:00001492                 db    ? ;
.bss:00001493                 db    ? ;
.bss:00001494                 db    ? ;
.bss:00001495                 db    ? ;
.bss:00001496                 db    ? ;
.bss:00001497                 db    ? ;
.bss:00001498                 db    ? ;
.bss:00001499                 db    ? ;
.bss:0000149A                 db    ? ;
.bss:0000149B                 db    ? ;
.bss:0000149C                 db    ? ;
.bss:0000149D                 db    ? ;
.bss:0000149E                 db    ? ;
.bss:0000149F                 db    ? ;
.bss:000014A0                 db    ? ;
.bss:000014A1                 db    ? ;
.bss:000014A2                 db    ? ;
.bss:000014A3                 db    ? ;
.bss:000014A4                 db    ? ;
.bss:000014A5                 db    ? ;
.bss:000014A6                 db    ? ;
.bss:000014A7                 db    ? ;
.bss:000014A8                 db    ? ;
.bss:000014A9                 db    ? ;
.bss:000014AA                 db    ? ;
.bss:000014AB                 db    ? ;
.bss:000014AC                 db    ? ;
.bss:000014AD                 db    ? ;
.bss:000014AE                 db    ? ;
.bss:000014AF                 db    ? ;
.bss:000014B0                 db    ? ;
.bss:000014B1                 db    ? ;
.bss:000014B2                 db    ? ;
.bss:000014B3                 db    ? ;
.bss:000014B4                 db    ? ;
.bss:000014B5                 db    ? ;
.bss:000014B6                 db    ? ;
.bss:000014B7                 db    ? ;
.bss:000014B8                 db    ? ;
.bss:000014B9                 db    ? ;
.bss:000014BA                 db    ? ;
.bss:000014BB                 db    ? ;
.bss:000014BC                 db    ? ;
.bss:000014BD                 db    ? ;
.bss:000014BE                 db    ? ;
.bss:000014BF                 db    ? ;
.bss:000014C0                 db    ? ;
.bss:000014C1                 db    ? ;
.bss:000014C2                 db    ? ;
.bss:000014C3                 db    ? ;
.bss:000014C4                 db    ? ;
.bss:000014C5                 db    ? ;
.bss:000014C6                 db    ? ;
.bss:000014C7                 db    ? ;
.bss:000014C8                 db    ? ;
.bss:000014C9                 db    ? ;
.bss:000014CA                 db    ? ;
.bss:000014CB                 db    ? ;
.bss:000014CC                 db    ? ;
.bss:000014CD                 db    ? ;
.bss:000014CE                 db    ? ;
.bss:000014CF                 db    ? ;
.bss:000014D0                 db    ? ;
.bss:000014D1                 db    ? ;
.bss:000014D2                 db    ? ;
.bss:000014D3                 db    ? ;
.bss:000014D4                 db    ? ;
.bss:000014D5                 db    ? ;
.bss:000014D6                 db    ? ;
.bss:000014D7                 db    ? ;
.bss:000014D8                 db    ? ;
.bss:000014D9                 db    ? ;
.bss:000014DA                 db    ? ;
.bss:000014DB                 db    ? ;
.bss:000014DC                 db    ? ;
.bss:000014DD                 db    ? ;
.bss:000014DE                 db    ? ;
.bss:000014DF                 db    ? ;
.bss:000014E0                 db    ? ;
.bss:000014E1                 db    ? ;
.bss:000014E2                 db    ? ;
.bss:000014E3                 db    ? ;
.bss:000014E4                 db    ? ;
.bss:000014E5                 db    ? ;
.bss:000014E6                 db    ? ;
.bss:000014E7                 db    ? ;
.bss:000014E8                 db    ? ;
.bss:000014E9                 db    ? ;
.bss:000014EA                 db    ? ;
.bss:000014EB                 db    ? ;
.bss:000014EC                 db    ? ;
.bss:000014ED                 db    ? ;
.bss:000014EE                 db    ? ;
.bss:000014EF                 db    ? ;
.bss:000014F0                 db    ? ;
.bss:000014F1                 db    ? ;
.bss:000014F2                 db    ? ;
.bss:000014F3                 db    ? ;
.bss:000014F4                 db    ? ;
.bss:000014F5                 db    ? ;
.bss:000014F6                 db    ? ;
.bss:000014F7                 db    ? ;
.bss:000014F8                 db    ? ;
.bss:000014F9                 db    ? ;
.bss:000014FA                 db    ? ;
.bss:000014FB                 db    ? ;
.bss:000014FC                 db    ? ;
.bss:000014FD                 db    ? ;
.bss:000014FE                 db    ? ;
.bss:000014FF                 db    ? ;
.bss:00001500                 db    ? ;
.bss:00001501                 db    ? ;
.bss:00001502                 db    ? ;
.bss:00001503                 db    ? ;
.bss:00001504                 db    ? ;
.bss:00001505                 db    ? ;
.bss:00001506                 db    ? ;
.bss:00001507                 db    ? ;
.bss:00001508                 db    ? ;
.bss:00001509                 db    ? ;
.bss:0000150A                 db    ? ;
.bss:0000150B                 db    ? ;
.bss:0000150C                 db    ? ;
.bss:0000150D                 db    ? ;
.bss:0000150E                 db    ? ;
.bss:0000150F                 db    ? ;
.bss:00001510                 db    ? ;
.bss:00001511                 db    ? ;
.bss:00001512                 db    ? ;
.bss:00001513                 db    ? ;
.bss:00001514                 db    ? ;
.bss:00001515                 db    ? ;
.bss:00001516                 db    ? ;
.bss:00001517                 db    ? ;
.bss:00001518                 db    ? ;
.bss:00001519                 db    ? ;
.bss:0000151A                 db    ? ;
.bss:0000151B                 db    ? ;
.bss:0000151C                 db    ? ;
.bss:0000151D                 db    ? ;
.bss:0000151E                 db    ? ;
.bss:0000151F                 db    ? ;
.bss:00001520                 db    ? ;
.bss:00001521                 db    ? ;
.bss:00001522                 db    ? ;
.bss:00001523                 db    ? ;
.bss:00001524                 db    ? ;
.bss:00001525                 db    ? ;
.bss:00001526                 db    ? ;
.bss:00001527                 db    ? ;
.bss:00001528                 db    ? ;
.bss:00001529                 db    ? ;
.bss:0000152A                 db    ? ;
.bss:0000152B                 db    ? ;
.bss:0000152C                 db    ? ;
.bss:0000152D                 db    ? ;
.bss:0000152E                 db    ? ;
.bss:0000152F                 db    ? ;
.bss:00001530                 db    ? ;
.bss:00001531                 db    ? ;
.bss:00001532                 db    ? ;
.bss:00001533                 db    ? ;
.bss:00001534                 db    ? ;
.bss:00001535                 db    ? ;
.bss:00001536                 db    ? ;
.bss:00001537                 db    ? ;
.bss:00001538 ; COLORREF color
.bss:00001538 color           dd ?                    ; DATA XREF: WndProc(x,x,x,x)+1843r
.bss:00001538                                         ; WndProc(x,x,x,x)+187Fr
.bss:0000153C                 db    ? ;
.bss:0000153D                 db    ? ;
.bss:0000153E                 db    ? ;
.bss:0000153F                 db    ? ;
.bss:00001540                 db    ? ;
.bss:00001541                 db    ? ;
.bss:00001542                 db    ? ;
.bss:00001543                 db    ? ;
.bss:00001544 ; COLORREF dword_1544
.bss:00001544 dword_1544      dd ?                    ; DATA XREF: _do_cursor+175r
.bss:00001544                                         ; _do_cursor+286r ...
.bss:00001548 _p_ToUnicodeEx  dd ?                    ; DATA XREF: _init_winfuncs+8Cw
.bss:00001548                                         ; _TranslateKey+191Br ...
.bss:0000154C ; int offset_height
.bss:0000154C _offset_height  dd ?                    ; DATA XREF: WinMain(x,x,x,x)+CD8w
.bss:0000154C                                         ; WinMain(x,x,x,x)+CDDr ...
.bss:00001550                 public _g_pfnGetSystemMetrics
.bss:00001550 _g_pfnGetSystemMetrics dd ?             ; DATA XREF: _InitMultipleMonitorStubs+69w
.bss:00001550                                         ; _InitMultipleMonitorStubs+6Er ...
.bss:00001554                 public _g_pfnMonitorFromWindow
.bss:00001554 _g_pfnMonitorFromWindow dd ?            ; DATA XREF: _InitMultipleMonitorStubs+93w
.bss:00001554                                         ; _InitMultipleMonitorStubs+98r ...
.bss:00001558                 public _g_pfnMonitorFromRect
.bss:00001558 _g_pfnMonitorFromRect dd ?              ; DATA XREF: _InitMultipleMonitorStubs+BDw
.bss:00001558                                         ; _InitMultipleMonitorStubs+C2r ...
.bss:0000155C                 public _g_pfnMonitorFromPoint
.bss:0000155C _g_pfnMonitorFromPoint dd ?             ; DATA XREF: _InitMultipleMonitorStubs+E7w
.bss:0000155C                                         ; _InitMultipleMonitorStubs+ECr ...
.bss:00001560                 public _g_pfnGetMonitorInfo
.bss:00001560 _g_pfnGetMonitorInfo dd ?               ; DATA XREF: _InitMultipleMonitorStubs+17r
.bss:00001560                                         ; _InitMultipleMonitorStubs+137w ...
.bss:00001564                 public _g_pfnEnumDisplayMonitors
.bss:00001564 _g_pfnEnumDisplayMonitors dd ?          ; DATA XREF: _InitMultipleMonitorStubs+111w
.bss:00001564                                         ; _InitMultipleMonitorStubs+116r ...
.bss:00001568                 public _g_pfnEnumDisplayDevices
.bss:00001568 _g_pfnEnumDisplayDevices dd ?           ; DATA XREF: _InitMultipleMonitorStubs+15Dw
.bss:00001568                                         ; _InitMultipleMonitorStubs+162r ...
.bss:0000156C                 public _g_fMultiMonInitDone
.bss:0000156C _g_fMultiMonInitDone dd ?               ; DATA XREF: _InitMultipleMonitorStubs+Cr
.bss:0000156C                                         ; _InitMultipleMonitorStubs+16Bw ...
.bss:00001570                 public _g_fMultimonPlatformNT
.bss:00001570 _g_fMultimonPlatformNT dd ?             ; DATA XREF: _InitMultipleMonitorStubs+2Bw
.bss:00001574 _was_zoomed     dd ?                    ; DATA XREF: WndProc(x,x,x,x)+2232r
.bss:00001574                                         ; WndProc(x,x,x,x)+223Fw ...
.bss:00001578 _reconfiguring  dd ?                    ; DATA XREF: WndProc(x,x,x,x)+6E6r
.bss:00001578                                         ; WndProc(x,x,x,x):loc_723Ew ...
.bss:0000157C _specials       dd ?                    ; DATA XREF: _update_specials_menu+44w
.bss:0000157C                                         ; _update_specials_menu:loc_4633w ...
.bss:00001580 ; UINT specials_menu
.bss:00001580 _specials_menu  dd ?                    ; DATA XREF: _update_specials_menu+203r
.bss:00001580                                         ; _update_specials_menu+210r ...
.bss:00001584 _n_specials     dd ?                    ; DATA XREF: _update_specials_menu+1CEw
.bss:00001584                                         ; _update_specials_menu+1DDw ...
.bss:00001588 _send_raw_mouse dd ?                    ; DATA XREF: _update_mouse_pointer:loc_491Ar
.bss:00001588                                         ; _set_raw_mouse_mode+3Ew ...
.bss:0000158C ; int wheel_accumulator
.bss:0000158C _wheel_accumulator dd ?                 ; DATA XREF: WndProc(x,x,x,x)+2C61r
.bss:0000158C                                         ; WndProc(x,x,x,x)+2C67w ...
.bss:00001590 _busy_status    dd ?                    ; DATA XREF: _set_busy_status+6w
.bss:00001590                                         ; _update_mouse_pointer+26r
.bss:00001594 _compose_state  dd ?                    ; DATA XREF: WndProc(x,x,x,x)+1AE5w
.bss:00001594                                         ; _TranslateKey+290r ...
.bss:00001598 ; `update_mouse_pointer'::`2'::forced_visible
.bss:00001598 ?forced_visible@?1??update_mouse_pointer@@9@9 dd ?
.bss:00001598                                         ; DATA XREF: _update_mouse_pointer+105r
.bss:00001598                                         ; _update_mouse_pointer+123w
.bss:0000159C ; `WndProc'::`2'::ignore_clip
.bss:0000159C ?ignore_clip@?1??WndProc@@9@9 dd ?      ; DATA XREF: WndProc(x,x,x,x)+16C0w
.bss:0000159C                                         ; WndProc(x,x,x,x):loc_8213r ...
.bss:000015A0 ; `WndProc'::`2'::need_backend_resize
.bss:000015A0 ?need_backend_resize@?1??WndProc@@9@9 dd ? ; DATA XREF: WndProc(x,x,x,x)+1B6Aw
.bss:000015A0                                         ; WndProc(x,x,x,x)+1B8Dr ...
.bss:000015A4 ; `WndProc'::`2'::fullscr_on_max
.bss:000015A4 ?fullscr_on_max@?1??WndProc@@9@9 dd ?   ; DATA XREF: WndProc(x,x,x,x):$LN104w
.bss:000015A4                                         ; WndProc(x,x,x,x)+2199r ...
.bss:000015A8 ; `WndProc'::`2'::processed_resize
.bss:000015A8 ?processed_resize@?1??WndProc@@9@9 dd ? ; DATA XREF: WndProc(x,x,x,x)+2174w
.bss:000015A8                                         ; WndProc(x,x,x,x)+2183r ...
.bss:000015AC ; `WndProc'::`2'::last_mousemove
.bss:000015AC ?last_mousemove@?1??WndProc@@9@9 dd ?   ; DATA XREF: WndProc(x,x,x,x)+14E1r
.bss:000015AC                                         ; WndProc(x,x,x,x)+1509w ...
.bss:000015B0 ; `WndProc'::`42'::wp
.bss:000015B0 ?wp@?CK@??WndProc@@9@9 dd ?             ; DATA XREF: WndProc(x,x,x,x)+14CEr
.bss:000015B0                                         ; WndProc(x,x,x,x)+14FAw
.bss:000015B4 ; `WndProc'::`42'::lp
.bss:000015B4 ?lp@?CK@??WndProc@@9@9 dd ?             ; DATA XREF: WndProc(x,x,x,x)+14D9r
.bss:000015B4                                         ; WndProc(x,x,x,x)+1503w
.bss:000015B8 ; `WndProc'::`45'::wp
.bss:000015B8 ?wp@?CN@??WndProc@@9@9 dd ?             ; DATA XREF: WndProc(x,x,x,x)+1668r
.bss:000015B8                                         ; WndProc(x,x,x,x)+1694w
.bss:000015BC ; `WndProc'::`45'::lp
.bss:000015BC ?lp@?CN@??WndProc@@9@9 dd ?             ; DATA XREF: WndProc(x,x,x,x)+1673r
.bss:000015BC                                         ; WndProc(x,x,x,x)+169Dw
.bss:000015C0 ; int `do_text_internal'::`2'::lpDx
.bss:000015C0 ?lpDx@?1??do_text_internal@@9@9 dd ?    ; DATA XREF: _do_text_internal+6B3r
.bss:000015C0                                         ; _do_text_internal+84Br ...
.bss:000015C4 ; `do_text_internal'::`2'::lpDx_len
.bss:000015C4 ?lpDx_len@?1??do_text_internal@@9@9 dd ? ; DATA XREF: _do_text_internal+823r
.bss:000015C4                                         ; _do_text_internal+83Dw ...
.bss:000015C8 ; LPCWSTR `do_text_internal'::`30'::uni_buf
.bss:000015C8 ?uni_buf@?BO@??do_text_internal@@9@9 dd ? ; DATA XREF: _do_text_internal+A3Fr
.bss:000015C8                                         ; _do_text_internal+A67w ...
.bss:000015CC ; `do_text_internal'::`30'::uni_len
.bss:000015CC ?uni_len@?BO@??do_text_internal@@9@9 dd ? ; DATA XREF: _do_text_internal+A37r
.bss:000015CC                                         ; _do_text_internal+A51w ...
.bss:000015D0 ; LPCSTR `do_text_internal'::`36'::directbuf
.bss:000015D0 ?directbuf@?CE@??do_text_internal@@9@9 dd ?
.bss:000015D0                                         ; DATA XREF: _do_text_internal+CB4r
.bss:000015D0                                         ; _do_text_internal+CC3w ...
.bss:000015D4 ; `do_text_internal'::`36'::directlen
.bss:000015D4 ?directlen@?CE@??do_text_internal@@9@9 dd ?
.bss:000015D4                                         ; DATA XREF: _do_text_internal+C9Br
.bss:000015D4                                         ; _do_text_internal+CA6w ...
.bss:000015D8 ; LPCWSTR `do_text_internal'::`39'::wbuf
.bss:000015D8 ?wbuf@?CH@??do_text_internal@@9@9 dd ?  ; DATA XREF: _do_text_internal+DE8r
.bss:000015D8                                         ; _do_text_internal+E10w ...
.bss:000015DC ; `do_text_internal'::`39'::wlen
.bss:000015DC ?wlen@?CH@??do_text_internal@@9@9 dd ?  ; DATA XREF: _do_text_internal:loc_B0F5r
.bss:000015DC                                         ; _do_text_internal+DF9w ...
.bss:000015E0 ; `TranslateKey'::`2'::alt_sum
.bss:000015E0 ?alt_sum@?1??TranslateKey@@9@9 dd ?     ; DATA XREF: _TranslateKey+18ABr
.bss:000015E0                                         ; _TranslateKey+18BBw ...
.bss:000015E4 ; `TranslateKey'::`2'::compose_char
.bss:000015E4 ?compose_char@?1??TranslateKey@@9@9 dd ? ; DATA XREF: _TranslateKey+1A8Aw
.bss:000015E4                                         ; _TranslateKey+1AE3r
.bss:000015E8 ; `TranslateKey'::`2'::compose_keycode
.bss:000015E8 ?compose_keycode@?1??TranslateKey@@9@9 dd ? ; DATA XREF: _TranslateKey+299w
.bss:000015E8                                         ; _TranslateKey+2D7w ...
.bss:000015EC _flashing       dd ?                    ; DATA XREF: _flash_window:loc_10373r
.bss:000015EC                                         ; _flash_window+34w ...
.bss:000015F0 ; `do_beep'::`3'::lastbeep
.bss:000015F0 ?lastbeep@?2??do_beep@@9@9 dd ?         ; DATA XREF: _do_beep+3Cr
.bss:000015F0                                         ; _do_beep+72w
.bss:000015F4 ; `do_beep'::`6'::lastbeep
.bss:000015F4 ?lastbeep@?5??do_beep@@9@9 dd ?         ; DATA XREF: _do_beep+137r
.bss:000015F4                                         ; _do_beep+191w
.bss:000015F4 _bss            ends
.bss:000015F4
.data:000015F8 ; ===========================================================================
.data:000015F8
.data:000015F8 ; Segment type: Pure data
.data:000015F8 ; Segment permissions: Read/Write
.data:000015F8 ; Segment alignment 'qword' can not be represented in assembly
.data:000015F8 _data           segment para public 'DATA' use32
.data:000015F8                 assume cs:_data
.data:000015F8                 ;org 15F8h
.data:000015F8 ; CHAR _SG85935[]
.data:000015F8 $SG85935        db 'USER32',0           ; DATA XREF: _InitMultipleMonitorStubs+32o
.data:000015FF                 align 10h
.data:00001600 ; CHAR _SG85951[]
.data:00001600 $SG85951        db 'GetSystemMetrics',0 ; DATA XREF: _InitMultipleMonitorStubs+53o
.data:00001611                 align 4
.data:00001614 ; CHAR _SG85952[]
.data:00001614 $SG85952        db 'MonitorFromWindow',0
.data:00001614                                         ; DATA XREF: _InitMultipleMonitorStubs+7Do
.data:00001626                 align 4
.data:00001628 ; CHAR _SG85953[]
.data:00001628 $SG85953        db 'MonitorFromRect',0  ; DATA XREF: _InitMultipleMonitorStubs+A7o
.data:00001638 ; CHAR _SG85954[]
.data:00001638 $SG85954        db 'MonitorFromPoint',0 ; DATA XREF: _InitMultipleMonitorStubs+D1o
.data:00001649                 align 4
.data:0000164C ; CHAR _SG85955[]
.data:0000164C $SG85955        db 'EnumDisplayMonitors',0
.data:0000164C                                         ; DATA XREF: _InitMultipleMonitorStubs+FBo
.data:00001660 ; CHAR _SG85956[]
.data:00001660 $SG85956        db 'GetMonitorInfoA',0  ; DATA XREF: _InitMultipleMonitorStubs+121o
.data:00001670 ; CHAR _SG85957[]
.data:00001670 $SG85957        db 'EnumDisplayDevicesA',0
.data:00001670                                         ; DATA XREF: _InitMultipleMonitorStubs+147o
.data:00001684 ; char _SG86032[]
.data:00001684 $SG86032        db 'DISPLAY',0          ; DATA XREF: xGetMonitorInfo(x,x)+110o
.data:0000168C ; char _SG86083[]
.data:0000168C $SG86083        db 'DISPLAY',0          ; DATA XREF: xEnumDisplayDevices(x,x,x,x)+59o
.data:00001694 ; char _SG86087[]
.data:00001694 $SG86087        db 'DISPLAY',0          ; DATA XREF: xEnumDisplayDevices(x,x,x,x)+71o
.data:0000169C ; int caret_x
.data:0000169C _caret_x        dd 0FFFFFFFFh           ; DATA XREF: WndProc(x,x,x,x)+1B3Cw
.data:0000169C                                         ; _sys_cursor+4Dr ...
.data:000016A0 ; int caret_y
.data:000016A0 _caret_y        dd 0FFFFFFFFh           ; DATA XREF: WndProc(x,x,x,x)+1B2Cw
.data:000016A0                                         ; WndProc(x,x,x,x)+1B36r ...
.data:000016A4 _wm_mousewheel  dd offset unk_20A       ; DATA XREF: WinMain(x,x,x,x)+DDw
.data:000016A4                                         ; WndProc(x,x,x,x)+2C20r
.data:000016A8 $SG88969        db '%s Internal Error',0 ; DATA XREF: _start_backend+55o
.data:000016BA                 align 4
.data:000016BC ; CHAR _SG88971[]
.data:000016BC $SG88971        db 'Unsupported protocol number found',0
.data:000016BC                                         ; DATA XREF: _start_backend+73o
.data:000016DE                 align 10h
.data:000016E0 $SG88975        db '%s Error',0         ; DATA XREF: _start_backend+146o
.data:000016E9                 align 4
.data:000016EC ; char _SG88976[]
.data:000016EC $SG88976        db 'Unable to open connection to',0Ah
.data:000016EC                                         ; DATA XREF: _start_backend+16Co
.data:000016EC                 db '%.800s',0Ah
.data:000016EC                 db '%s',0
.data:00001713                 align 4
.data:00001714 ; char _SG88980[]
.data:00001714 $SG88980        db '%s - %s',0          ; DATA XREF: _start_backend+1FDo
.data:0000171C ; char _SG88993[]
.data:0000171C $SG88993        db '%.70s (inactive)',0 ; DATA XREF: _close_session+31o
.data:0000172D                 align 10h
.data:00001730 ; CHAR _SG89007[]
.data:00001730 $SG89007        db '&Restart Session',0 ; DATA XREF: _close_session+10Fo
.data:00001741                 align 4
.data:00001744 $SG89025        db '%s Fatal Error',0   ; DATA XREF: WinMain(x,x,x,x)+6Co
.data:00001753                 align 4
.data:00001754 ; CHAR _SG89027[]
.data:00001754 $SG89027        db 'Windows refuses to report a version',0
.data:00001754                                         ; DATA XREF: WinMain(x,x,x,x)+84o
.data:00001778 ; CHAR _SG89030[]
.data:00001778 $SG89030        db 'MSWHEEL_ROLLMSG',0  ; DATA XREF: WinMain(x,x,x,x)+CBo
.data:00001788 $SG89036        db '%s Fatal Error',0   ; DATA XREF: WinMain(x,x,x,x)+11Do
.data:00001797                 align 4
.data:00001798 ; CHAR _SG89038[]
.data:00001798 $SG89038        db 'Failed to initialize COM subsystem',0
.data:00001798                                         ; DATA XREF: WinMain(x,x,x,x)+135o
.data:000017BB                 align 4
.data:000017BC ; char _SG89061[]
.data:000017BC $SG89061        db '%p:%u',0            ; DATA XREF: WinMain(x,x,x,x)+2ACo
.data:000017C2                 align 4
.data:000017C4 $SG89076        db 'option "%s" requires an argument',0
.data:000017C4                                         ; DATA XREF: WinMain(x,x,x,x)+427o
.data:000017E5                 align 4
.data:000017E8 ; char _SG89084[]
.data:000017E8 $SG89084        db '-cleanup',0         ; DATA XREF: WinMain(x,x,x,x):loc_2FD1o
.data:000017F1                 align 4
.data:000017F4 ; char _SG89085[]
.data:000017F4 $SG89085        db '-cleanup-during-uninstall',0
.data:000017F4                                         ; DATA XREF: WinMain(x,x,x,x)+481o
.data:0000180E                 align 10h
.data:00001810 ; char _SG89089[]
.data:00001810 $SG89089        db '-cleanup-during-uninstall',0
.data:00001810                                         ; DATA XREF: WinMain(x,x,x,x):loc_3005o
.data:0000182A                 align 4
.data:0000182C $SG89091        db '%s Uninstallation',0 ; DATA XREF: WinMain(x,x,x,x)+4D6o
.data:0000183E                 align 10h
.data:00001840 $SG89090        db 'Remove saved sessions and random seed file?',0Ah
.data:00001840                                         ; DATA XREF: WinMain(x,x,x,x)+4BCo
.data:00001840                 db 0Ah
.data:00001840                 db 'If you hit Yes, ALL Registry entries associated',0Ah
.data:00001840                 db 'with %s will be removed, as well as the',0Ah
.data:00001840                 db 'random seed file. THIS PROCESS WILL',0Ah
.data:00001840                 db 'DESTROY YOUR SAVED SESSIONS.',0Ah
.data:00001840                 db '(This only affects the currently logged-in user.)',0Ah
.data:00001840                 db 0Ah
.data:00001840                 db 'If you hit No, uninstallation will proceed, but',0Ah
.data:00001840                 db 'saved sessions etc will be left on the machine.',0
.data:00001999                 align 4
.data:0000199C $SG89094        db '%s Warning',0       ; DATA XREF: WinMain(x,x,x,x)+50Bo
.data:000019A7                 align 4
.data:000019A8 $SG89093        db 'This procedure will remove ALL Registry entries',0Ah
.data:000019A8                                         ; DATA XREF: WinMain(x,x,x,x)+4F1o
.data:000019A8                 db 'associated with %s, and will also remove',0Ah
.data:000019A8                 db 'the random seed file. (This only affects the',0Ah
.data:000019A8                 db 'currently logged-in user.)',0Ah
.data:000019A8                 db 0Ah
.data:000019A8                 db 'THIS PROCESS WILL DESTROY YOUR SAVED SESSIONS.',0Ah
.data:000019A8                 db 'Are you really sure you want to continue?',0
.data:00001AA3                 align 4
.data:00001AA4 ; char _SG89098[]
.data:00001AA4 $SG89098        db '-pgpfp',0           ; DATA XREF: WinMain(x,x,x,x):loc_30D7o
.data:00001AAB                 align 4
.data:00001AAC $SG89104        dd offset loc_502B+2    ; DATA XREF: WinMain(x,x,x,x)+5CCo
.data:00001AB0 ; wchar_t _SG89106
.data:00001AB0 $SG89106:                               ; DATA XREF: WinMain(x,x,x,x)+5EDo
.data:00001AB0                 unicode 0, <..\..\window.c>,0
.data:00001ACE                 align 10h
.data:00001AD0 ; wchar_t _SG89107
.data:00001AD0 $SG89107:                               ; DATA XREF: WinMain(x,x,x,x)+5F2o
.data:00001AD0                 unicode 0, <ret == 2>,0
.data:00001AE2                 align 4
.data:00001AE4 ; char _SG89110[]
.data:00001AE4 $SG89110        db 'telnet:',0          ; DATA XREF: WinMain(x,x,x,x)+606o
.data:00001AEC $SG89113        dd offset loc_2F38+2    ; DATA XREF: WinMain(x,x,x,x)+67Co
.data:00001AF0 $SG89123        db 'unknown option "%s"',0 ; DATA XREF: WinMain(x,x,x,x)+7B2o
.data:00001B04 ; char _SG89132[]
.data:00001B04 $SG89132        dd offset unk_920       ; DATA XREF: WinMain(x,x,x,x)+840o
.data:00001B08 ; CHAR _SG89181[]
.data:00001B08 $SG89181        db '&Paste',0           ; DATA XREF: WinMain(x,x,x,x)+F12o
.data:00001B0F                 align 10h
.data:00001B10 ; CHAR _SG89185[]
.data:00001B10 $SG89185        db '&Event Log',0       ; DATA XREF: WinMain(x,x,x,x)+FB5o
.data:00001B1B                 align 4
.data:00001B1C ; CHAR _SG89186[]
.data:00001B1C $SG89186        db 'Ne&w Session...',0  ; DATA XREF: WinMain(x,x,x,x)+FF3o
.data:00001B2C ; CHAR _SG89187[]
.data:00001B2C $SG89187        db '&Duplicate Session',0 ; DATA XREF: WinMain(x,x,x,x)+1012o
.data:00001B3F                 align 10h
.data:00001B40 ; CHAR _SG89189[]
.data:00001B40 $SG89189        db 'Sa&ved Sessions',0  ; DATA XREF: WinMain(x,x,x,x)+1031o
.data:00001B50 ; CHAR _SG89190[]
.data:00001B50 $SG89190        db 'Chan&ge Settings...',0
.data:00001B50                                         ; DATA XREF: WinMain(x,x,x,x)+1054o
.data:00001B64 ; CHAR _SG89191[]
.data:00001B64 $SG89191        db 'C&opy All to Clipboard',0
.data:00001B64                                         ; DATA XREF: WinMain(x,x,x,x)+1092o
.data:00001B7B                 align 4
.data:00001B7C ; CHAR _SG89192[]
.data:00001B7C $SG89192        db 'C&lear Scrollback',0 ; DATA XREF: WinMain(x,x,x,x)+10B4o
.data:00001B8E                 align 10h
.data:00001B90 ; CHAR _SG89193[]
.data:00001B90 $SG89193        db 'Rese&t Terminal',0  ; DATA XREF: WinMain(x,x,x,x)+10D3o
.data:00001BA0 ; CHAR _SG89194[]
.data:00001BA0 $SG89194        db '&Full Screen',0     ; DATA XREF: WinMain(x,x,x,x)+1111o
.data:00001BAD                 align 10h
.data:00001BB0 ; CHAR _SG89196[]
.data:00001BB0 $SG89196        db '&Help',0            ; DATA XREF: WinMain(x,x,x,x)+1175o
.data:00001BB6                 align 4
.data:00001BB8 $SG89197        db '&About %s',0        ; DATA XREF: WinMain(x,x,x,x)+119Bo
.data:00001BC2                 align 4
.data:00001BC4 $SG89239        db 'do_select(): internal error (hwnd==NULL)',0
.data:00001BC4                                         ; DATA XREF: _do_select+48o
.data:00001BED                 align 10h
.data:00001BF0 $SG89246        db 'Network is down',0  ; DATA XREF: _do_select:loc_44DAo
.data:00001C00 $SG89248        db 'WSAAsyncSelect(): unknown error',0
.data:00001C00                                         ; DATA XREF: _do_select:loc_44E1o
.data:00001C20 ; CHAR _SG89260[]
.data:00001C20 $SG89260        db '(No sessions)',0    ; DATA XREF: _update_savedsess_menu+B1o
.data:00001C2E                 align 10h
.data:00001C30 ; wchar_t _SG89278
.data:00001C30 $SG89278:                               ; DATA XREF: _update_specials_menu+B7o
.data:00001C30                 unicode 0, <..\..\window.c>,0
.data:00001C4E                 align 10h
.data:00001C50 ; wchar_t _SG89279
.data:00001C50 $SG89279:                               ; DATA XREF: _update_specials_menu+BCo
.data:00001C50                 unicode 0, <IDM_SPECIAL_MIN + 0x10 * i >
.data:00001C50                 dw 3Ch
.data:00001C50                 unicode 0, < IDM_SPECIAL_MAX>,0
.data:00001CAA                 align 4
.data:00001CAC ; wchar_t _SG89287
.data:00001CAC $SG89287:                               ; DATA XREF: _update_specials_menu+120o
.data:00001CAC                 unicode 0, <..\..\window.c>,0
.data:00001CCA                 align 4
.data:00001CCC ; wchar_t _SG89288
.data:00001CCC $SG89288:                               ; DATA XREF: _update_specials_menu+125o
.data:00001CCC                 unicode 0, <nesting >
.data:00001CCC                 dw 3Ch
.data:00001CCC                 unicode 0, < 2>,0
.data:00001CE4 ; CHAR _SG89303[]
.data:00001CE4 $SG89303        db 'S&pecial Command',0 ; DATA XREF: _update_specials_menu+257o
.data:00001CF5                 align 4
.data:00001CF8 ; wchar_t _SG89334
.data:00001CF8 $SG89334:                               ; DATA XREF: _update_mouse_pointer+96o
.data:00001CF8                 unicode 0, <..\..\window.c>,0
.data:00001D16                 align 4
.data:00001D18 ; wchar_t _SG89335
.data:00001D18 $SG89335        dd offset _lfont.lfFaceName+10h
.data:00001D18                                         ; DATA XREF: _update_mouse_pointer+9Bo
.data:00001D1C ; char _SG89362[]
.data:00001D1C $SG89362        db '%.70s Fatal Error',0 ; DATA XREF: _connection_fatal+47o
.data:00001D2E                 align 10h
.data:00001D30 ; char _SG89376[]
.data:00001D30 $SG89376        db '%.70s Command Line Error',0
.data:00001D30                                         ; DATA XREF: _cmdline_error+47o
.data:00001D49                 align 4
.data:00001D4C ; CHAR _SG89593[]
.data:00001D4C $SG89593        dd offset _lfont.lfFaceName ; DATA XREF: _init_fonts+4E8o
.data:00001D50 ; `request_resize'::`4'::first_time
.data:00001D50 ?first_time@?3??request_resize@@9@9 dd 1
.data:00001D50                                         ; DATA XREF: _request_resize:loc_5EE8r
.data:00001D50                                         ; _request_resize:loc_5F15w
.data:00001D54 ; `show_mouseptr'::`2'::cursor_visible
.data:00001D54 ?cursor_visible@?1??show_mouseptr@@9@9 dd 1
.data:00001D54                                         ; DATA XREF: _show_mouseptr:loc_A047r
.data:00001D54                                         ; _show_mouseptr:loc_A069r ...
.data:00001D58 ; CHAR _SG89794[]
.data:00001D58 $SG89794        db 'Connection closed by remote host',0
.data:00001D58                                         ; DATA XREF: _notify_remote_exit+B4o
.data:00001D79                 align 4
.data:00001D7C $SG89839        db '%s Exit Confirmation',0
.data:00001D7C                                         ; DATA XREF: WndProc(x,x,x,x)+22Do
.data:00001D91                 align 4
.data:00001D94 ; CHAR _SG89842[]
.data:00001D94 $SG89842        db 'Are you sure you want to close this session?',0
.data:00001D94                                         ; DATA XREF: WndProc(x,x,x,x)+262o
.data:00001DC1                 align 4
.data:00001DC4 ; char _SG89876[]
.data:00001DC4 $SG89876        db 'putty &%p:%u',0     ; DATA XREF: WndProc(x,x,x,x)+4EEo
.data:00001DD1                 align 4
.data:00001DD4 $SG89883        db 'putty @%s',0        ; DATA XREF: WndProc(x,x,x,x)+560o
.data:00001DDE                 align 10h
.data:00001DE0 $SG89901        db '----- Session restarted -----',0
.data:00001DE0                                         ; DATA XREF: WndProc(x,x,x,x)+6B3o
.data:00001DFE                 align 10h
.data:00001E00 $SG90683        db 'user32.dll',0       ; DATA XREF: _init_winfuncs+1Co
.data:00001E0B                 align 4
.data:00001E0C ; CHAR _SG90686[]
.data:00001E0C $SG90686        db 'FlashWindowEx',0    ; DATA XREF: _init_winfuncs+34o
.data:00001E1A                 align 4
.data:00001E1C ; CHAR _SG90689[]
.data:00001E1C $SG90689        db 'ToUnicodeEx',0      ; DATA XREF: _init_winfuncs+67o
.data:00001E28 $SG90809        db 62h                  ; DATA XREF: _TranslateKey+7B9r
.data:00001E29                 db  42h ; B
.data:00001E2A                 db    2
.data:00001E2B                 db    2
.data:00001E2C                 db    0
.data:00001E2D                 db    0
.data:00001E2E                 db    0
.data:00001E2F                 db    0
.data:00001E30 $SG90811        db 6Ah                  ; DATA XREF: _TranslateKey+7EDr
.data:00001E31                 db  4Ah ; J
.data:00001E32                 db  0Ah
.data:00001E33                 db  0Ah
.data:00001E34                 db    0
.data:00001E35                 db    0
.data:00001E36                 db    0
.data:00001E37                 db    0
.data:00001E38 $SG90813        db 6Eh                  ; DATA XREF: _TranslateKey+821r
.data:00001E39                 db  4Eh ; N
.data:00001E3A                 db  0Eh
.data:00001E3B                 db  0Eh
.data:00001E3C                 db    0
.data:00001E3D                 db    0
.data:00001E3E                 db    0
.data:00001E3F                 db    0
.data:00001E40 $SG90815        db 68h                  ; DATA XREF: _TranslateKey+855r
.data:00001E41                 db  48h ; H
.data:00001E42                 db    8
.data:00001E43                 db    8
.data:00001E44                 db    0
.data:00001E45                 db    0
.data:00001E46                 db    0
.data:00001E47                 db    0
.data:00001E48 $SG90818        db 6Ch                  ; DATA XREF: _TranslateKey+8BEr
.data:00001E49                 db  4Ch ; L
.data:00001E4A byte_1E4A       db 0Ch                  ; DATA XREF: _TranslateKey+EB0r
.data:00001E4B                 db  0Ch
.data:00001E4C                 db    0
.data:00001E4D                 db    0
.data:00001E4E                 db    0
.data:00001E4F                 db    0
.data:00001E50 $SG90820        db 79h                  ; DATA XREF: _TranslateKey+8F2r
.data:00001E51                 db  59h ; Y
.data:00001E52                 db  19h
.data:00001E53                 db  19h
.data:00001E54                 db    0
.data:00001E55                 db    0
.data:00001E56                 db    0
.data:00001E57                 db    0
.data:00001E58 $SG90822        db 6Bh                  ; DATA XREF: _TranslateKey+926r
.data:00001E59                 db  4Bh ; K
.data:00001E5A                 db  0Bh
.data:00001E5B                 db  0Bh
.data:00001E5C                 db    0
.data:00001E5D                 db    0
.data:00001E5E                 db    0
.data:00001E5F                 db    0
.data:00001E60 $SG90824        db 75h                  ; DATA XREF: _TranslateKey+95Ar
.data:00001E61                 db  55h ; U
.data:00001E62                 db  15h
.data:00001E63                 db  15h
.data:00001E64                 db    0
.data:00001E65                 db    0
.data:00001E66                 db    0
.data:00001E67                 db    0
.data:00001E68 ; char _SG90874[4]
.data:00001E68 $SG90874        db 1Bh,'%c',0           ; DATA XREF: _TranslateKey+C00o
.data:00001E6C ; char _SG90877[]
.data:00001E6C $SG90877        db 1Bh,'?%c',0          ; DATA XREF: _TranslateKey+C29o
.data:00001E71                 align 4
.data:00001E74 ; char _SG90880[]
.data:00001E74 $SG90880        db 1Bh,'O%c',0          ; DATA XREF: _TranslateKey+C52o
.data:00001E79                 align 4
.data:00001E7C $SG90890        db    0
.data:00001E7D                 db  1Bh
.data:00001E7E                 db  1Ch
.data:00001E7F                 db  1Dh
.data:00001E80                 db  1Eh
.data:00001E81                 db  1Fh
.data:00001E82                 db  7Fh ; 
.data:00001E83                 db    0
.data:00001E84 $SG90933        db 0                    ; DATA XREF: _TranslateKey+1289r
.data:00001E85                 db    2
.data:00001E86                 db    1
.data:00001E87                 db    4
.data:00001E88                 db    5
.data:00001E89                 db    3
.data:00001E8A                 db    6
.data:00001E8B                 db    0
.data:00001E8C $SG90936        db 20h                  ; DATA XREF: _TranslateKey+12BCr
.data:00001E8D aHlmeig         db 'HLMEIG',0
.data:00001E94 ; char _SG90937[4]
.data:00001E94 $SG90937        db 1Bh,'%c',0           ; DATA XREF: _TranslateKey+12C4o
.data:00001E98 $SG90940        db 'MNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@[\]^_`{',0
.data:00001E98                                         ; DATA XREF: _TranslateKey+131Eo
.data:00001EC9                 align 4
.data:00001ECC ; char _SG90961[]
.data:00001ECC $SG90961        db 1Bh,'[%c',0          ; DATA XREF: _TranslateKey+1443o
.data:00001ED1                 align 4
.data:00001ED4 $SG90964        dd 462E4C48h            ; DATA XREF: _TranslateKey+1498r
.data:00001ED8 word_1ED8       dw 4749h                ; DATA XREF: _TranslateKey+14A4r
.data:00001EDA byte_1EDA       db 0                    ; DATA XREF: _TranslateKey+14B1r
.data:00001EDB                 align 4
.data:00001EDC ; char _SG90968[]
.data:00001EDC $SG90968        db 1Bh,'[%c',0          ; DATA XREF: _TranslateKey+14EFo
.data:00001EE1                 align 4
.data:00001EE4 ; char _SG90976[]
.data:00001EE4 $SG90976        db 1Bh,'%c',0           ; DATA XREF: _TranslateKey+15ACo
.data:00001EE8 ; char _SG90979[]
.data:00001EE8 $SG90979        db 1Bh,'O%c',0          ; DATA XREF: _TranslateKey+15DEo
.data:00001EED                 align 10h
.data:00001EF0 ; char _SG90982[]
.data:00001EF0 $SG90982        db 1Bh,'[[%c',0         ; DATA XREF: _TranslateKey+1631o
.data:00001EF6                 align 4
.data:00001EF8 ; char _SG90986[]
.data:00001EF8 $SG90986        db 1Bh,'%c',0           ; DATA XREF: _TranslateKey+1697o
.data:00001EFC ; char _SG90989[]
.data:00001EFC $SG90989        db 1Bh,'O%c',0          ; DATA XREF: _TranslateKey+16C3o
.data:00001F01                 align 4
.data:00001F04 $SG90993        db 1Bh,'[H',0           ; DATA XREF: _TranslateKey+1721o
.data:00001F08 $SG90994        db 1Bh,'Ow',0           ; DATA XREF: _TranslateKey:loc_DA25o
.data:00001F0C ; char _SG90997[]
.data:00001F0C $SG90997        db 1Bh,'[%d~',0         ; DATA XREF: _TranslateKey+1777o
.data:00001F12                 align 4
.data:00001F14 ; char _SG91248[]
.data:00001F14 $SG91248        db '{\rtf1\ansi\deff0{\fonttbl\f0\fmodern %s;}\f0\fs%d',0
.data:00001F14                                         ; DATA XREF: _write_clip+29Eo
.data:00001F47                 align 4
.data:00001F48 ; char _SG91270[]
.data:00001F48 $SG91270        db '{\colortbl ;',0     ; DATA XREF: _write_clip+4D6o
.data:00001F55                 align 4
.data:00001F58 ; char _SG91275[]
.data:00001F58 $SG91275        db '\red%d\green%d\blue%d;',0 ; DATA XREF: _write_clip+569o
.data:00001F6F                 align 10h
.data:00001F70 ; char _SG91276[]
.data:00001F70 $SG91276        dd offset unk_7D        ; DATA XREF: _write_clip:loc_F14Co
.data:00001F74 ; char _SG91303[]
.data:00001F74 $SG91303        db '\cf%d ',0           ; DATA XREF: _write_clip+8A1o
.data:00001F7B                 align 4
.data:00001F7C ; char _SG91305[]
.data:00001F7C $SG91305        db '\highlight%d ',0    ; DATA XREF: _write_clip+910o
.data:00001F8A                 align 4
.data:00001F8C $SG91307        db '\b ',0              ; DATA XREF: _write_clip+959o
.data:00001F90 $SG91308        db '\b0 ',0             ; DATA XREF: _write_clip:loc_F51Do
.data:00001F95                 align 4
.data:00001F98 ; char _SG91309[]
.data:00001F98 $SG91309        dd offset loc_7321+4    ; DATA XREF: _write_clip+976o
.data:00001F9C $SG91311        db '\ul ',0             ; DATA XREF: _write_clip+9BFo
.data:00001FA1                 align 4
.data:00001FA4 $SG91312        db '\ulnone ',0         ; DATA XREF: _write_clip:loc_F583o
.data:00001FAD                 align 10h
.data:00001FB0 ; char _SG91313[]
.data:00001FB0 $SG91313        dd offset loc_7321+4    ; DATA XREF: _write_clip+9DCo
.data:00001FB4 ; char _SG91320[]
.data:00001FB4 $SG91320        db '{\uc%d\u%d',0       ; DATA XREF: _write_clip+AB2o
.data:00001FBF                 align 10h
.data:00001FC0 ; char _SG91321[]
.data:00001FC0 $SG91321        dd offset unk_7D        ; DATA XREF: _write_clip+AD6o
.data:00001FC4 ; char _SG91323[]
.data:00001FC4 $SG91323        db '\u%d',0             ; DATA XREF: _write_clip+AFDo
.data:00001FC9                 align 4
.data:00001FCC ; wchar_t _SG91325
.data:00001FCC $SG91325:                               ; DATA XREF: _write_clip+B3Eo
.data:00001FCC                 unicode 0, <..\..\window.c>,0
.data:00001FEA                 align 4
.data:00001FEC ; wchar_t _SG91326
.data:00001FEC $SG91326:                               ; DATA XREF: _write_clip+B43o
.data:00001FEC                 unicode 0, <tindex + multilen >
.data:00001FEC                 dw 3Ch
.data:00001FEC                 unicode 0, <= len2>,0
.data:00002020 ; char _SG91351[]
.data:00002020 $SG91351        db '\par',0Dh,0Ah,0     ; DATA XREF: _write_clip:loc_F9D4o
.data:00002027                 align 4
.data:00002028 ; char _SG91355[]
.data:00002028 $SG91355        db '\',27h,'%02x',0     ; DATA XREF: _write_clip+E94o
.data:0000202F                 align 10h
.data:00002030 ; CHAR _SG91364[]
.data:00002030 $SG91364        db 'Rich Text Format',0 ; DATA XREF: _write_clip+10D1o
.data:00002041                 align 4
.data:00002044 ; char _SG91428[]
.data:00002044 $SG91428        db '%.70s Fatal Error',0 ; DATA XREF: _fatalbox+47o
.data:00002056                 align 4
.data:00002058 ; char _SG91439[]
.data:00002058 $SG91439        db '%.70s Fatal Error',0 ; DATA XREF: _modalfatalbox+47o
.data:0000206A                 align 4
.data:0000206C ; char _SG91450[]
.data:0000206C $SG91450        db '%.70s Error',0      ; DATA XREF: _nonfatal+47o
.data:00002078 ; char _SG91507[]
.data:00002078 $SG91507        db 'Unable to play sound file',0Ah ; DATA XREF: _do_beep+BFo
.data:00002078                 db '%s',0Ah
.data:00002078                 db 'Using default sound instead',0
.data:000020B1                 align 4
.data:000020B4 ; char _SG91508[]
.data:000020B4 $SG91508        db '%.70s Sound Error',0 ; DATA XREF: _do_beep+D6o
.data:000020C6                 align 4
.data:000020C8 ; wchar_t _SG91595
.data:000020C8 $SG91595:                               ; DATA XREF: _make_full_screen+4Fo
.data:000020C8                 unicode 0, <..\..\window.c>,0
.data:000020E6                 align 4
.data:000020E8 ; wchar_t _SG91596
.data:000020E8 $SG91596:                               ; DATA XREF: _make_full_screen+54o
.data:000020E8                 unicode 0, <IsZoomed(hwnd)>,0
.data:00002106                 align 4
.data:00002106 _data           ends
.data:00002106
.rdata:00002108 ; ===========================================================================
.rdata:00002108
.rdata:00002108 ; Segment type: Pure data
.rdata:00002108 ; Segment permissions: Read
.rdata:00002108 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00002108 _rdata          segment para public 'DATA' use32
.rdata:00002108                 assume cs:_rdata
.rdata:00002108                 ;org 2108h
.rdata:00002108                 public _share_can_be_downstream
.rdata:00002108 _share_can_be_downstream db    1
.rdata:00002109                 db    0
.rdata:0000210A                 db    0
.rdata:0000210B                 db    0
.rdata:0000210C                 public _share_can_be_upstream
.rdata:0000210C _share_can_be_upstream db    1
.rdata:0000210D                 db    0
.rdata:0000210E                 db    0
.rdata:0000210F                 db    0
.rdata:00002110 ; `conftopalette'::`2'::ww
.rdata:00002110 ?ww@?1??conftopalette@@9@9 dd offset unk_100 ; DATA XREF: _conftopalette+45r
.rdata:00002114                 dd offset unk_101
.rdata:00002118                 dd offset unk_102
.rdata:0000211C                 dd offset unk_103
.rdata:00002120                 dd offset unk_104
.rdata:00002124                 dd offset unk_105
.rdata:00002128                 db    0
.rdata:00002129                 db    0
.rdata:0000212A                 db    0
.rdata:0000212B                 db    0
.rdata:0000212C                 db    8
.rdata:0000212D                 db    0
.rdata:0000212E                 db    0
.rdata:0000212F                 db    0
.rdata:00002130                 db    1
.rdata:00002131                 db    0
.rdata:00002132                 db    0
.rdata:00002133                 db    0
.rdata:00002134                 db    9
.rdata:00002135                 db    0
.rdata:00002136                 db    0
.rdata:00002137                 db    0
.rdata:00002138                 db    2
.rdata:00002139                 db    0
.rdata:0000213A                 db    0
.rdata:0000213B                 db    0
.rdata:0000213C                 db  0Ah
.rdata:0000213D                 db    0
.rdata:0000213E                 db    0
.rdata:0000213F                 db    0
.rdata:00002140                 db    3
.rdata:00002141                 db    0
.rdata:00002142                 db    0
.rdata:00002143                 db    0
.rdata:00002144                 db  0Bh
.rdata:00002145                 db    0
.rdata:00002146                 db    0
.rdata:00002147                 db    0
.rdata:00002148                 db    4
.rdata:00002149                 db    0
.rdata:0000214A                 db    0
.rdata:0000214B                 db    0
.rdata:0000214C                 db  0Ch
.rdata:0000214D                 db    0
.rdata:0000214E                 db    0
.rdata:0000214F                 db    0
.rdata:00002150                 db    5
.rdata:00002151                 db    0
.rdata:00002152                 db    0
.rdata:00002153                 db    0
.rdata:00002154                 db  0Dh
.rdata:00002155                 db    0
.rdata:00002156                 db    0
.rdata:00002157                 db    0
.rdata:00002158                 db    6
.rdata:00002159                 db    0
.rdata:0000215A                 db    0
.rdata:0000215B                 db    0
.rdata:0000215C                 db  0Eh
.rdata:0000215D                 db    0
.rdata:0000215E                 db    0
.rdata:0000215F                 db    0
.rdata:00002160                 db    7
.rdata:00002161                 db    0
.rdata:00002162                 db    0
.rdata:00002163                 db    0
.rdata:00002164                 db  0Fh
.rdata:00002165                 db    0
.rdata:00002166                 db    0
.rdata:00002167                 db    0
.rdata:00002168 ; `systopalette'::`2'::or
.rdata:00002168 ?or@?1??systopalette@@9@9 dd 8          ; DATA XREF: _systopalette+3Fr
.rdata:0000216C off_216C        dd offset unk_100       ; DATA XREF: _systopalette+7Fr
.rdata:0000216C                                         ; _systopalette+BFr ...
.rdata:00002170 off_2170        dd offset unk_101       ; DATA XREF: _systopalette+67r
.rdata:00002170                                         ; _systopalette+A7r ...
.rdata:00002174                 db    5
.rdata:00002175                 db    0
.rdata:00002176                 db    0
.rdata:00002177                 db    0
.rdata:00002178                 db    2
.rdata:00002179                 db    1
.rdata:0000217A                 db    0
.rdata:0000217B                 db    0
.rdata:0000217C                 db    3
.rdata:0000217D                 db    1
.rdata:0000217E                 db    0
.rdata:0000217F                 db    0
.rdata:00002180                 db  0Eh
.rdata:00002181                 db    0
.rdata:00002182                 db    0
.rdata:00002183                 db    0
.rdata:00002184                 db    4
.rdata:00002185                 db    1
.rdata:00002186                 db    0
.rdata:00002187                 db    0
.rdata:00002188                 db    4
.rdata:00002189                 db    1
.rdata:0000218A                 db    0
.rdata:0000218B                 db    0
.rdata:0000218C                 db  0Dh
.rdata:0000218D                 db    0
.rdata:0000218E                 db    0
.rdata:0000218F                 db    0
.rdata:00002190                 db    5
.rdata:00002191                 db    1
.rdata:00002192                 db    0
.rdata:00002193                 db    0
.rdata:00002194                 db    5
.rdata:00002195                 db    1
.rdata:00002196                 db    0
.rdata:00002197                 db    0
.rdata:00002197 _rdata          ends
.rdata:00002197
.text:00002198 ; ===========================================================================
.text:00002198
.text:00002198 ; Segment type: Pure code
.text:00002198 ; Segment permissions: Read/Execute
.text:00002198 _text           segment para public 'CODE' use32
.text:00002198                 assume cs:_text
.text:00002198                 ;org 2198h
.text:00002198                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00002198
.text:00002198 ; =============== S U B R O U T I N E =======================================
.text:00002198
.text:00002198 ; Attributes: bp-based frame
.text:00002198
.text:00002198                 public _IsPlatformNT
.text:00002198 _IsPlatformNT   proc near               ; CODE XREF: _InitMultipleMonitorStubs:loc_227Ep
.text:00002198
.text:00002198 var_A0          = byte ptr -0A0h
.text:00002198 VersionInformation= _OSVERSIONINFOA ptr -9Ch
.text:00002198 var_4           = dword ptr -4
.text:00002198
.text:00002198                 push    ebp
.text:00002199                 mov     ebp, esp
.text:0000219B                 sub     esp, 0A0h
.text:000021A1                 push    esi
.text:000021A2                 push    edi
.text:000021A3                 lea     edi, [ebp+var_A0]
.text:000021A9                 mov     ecx, 28h ; '('
.text:000021AE                 mov     eax, 0CCCCCCCCh
.text:000021B3                 rep stosd
.text:000021B5                 mov     eax, dword ptr ds:___security_cookie
.text:000021BA                 xor     eax, ebp
.text:000021BC                 mov     [ebp+var_4], eax
.text:000021BF                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 0
.text:000021C9                 push    90h ; 'É'       ; Size
.text:000021CE                 push    0               ; Val
.text:000021D0                 lea     eax, [ebp+VersionInformation.dwMajorVersion]
.text:000021D6                 push    eax             ; Dst
.text:000021D7                 call    _memset
.text:000021DC                 add     esp, 0Ch
.text:000021DF                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h ; 'ö'
.text:000021E9                 mov     esi, esp
.text:000021EB                 lea     ecx, [ebp+VersionInformation]
.text:000021F1                 push    ecx             ; lpVersionInformation
.text:000021F2                 call    dword ptr ds:__imp__GetVersionExA@4 ; GetVersionExA(x)
.text:000021F8                 cmp     esi, esp
.text:000021FA                 call    __RTC_CheckEsp
.text:000021FF                 xor     eax, eax
.text:00002201                 cmp     [ebp+VersionInformation.dwPlatformId], 2
.text:00002208                 setz    al
.text:0000220B                 push    edx
.text:0000220C                 mov     ecx, ebp
.text:0000220E                 push    eax
.text:0000220F                 lea     edx, $LN5
.text:00002215                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000221A                 pop     eax
.text:0000221B                 pop     edx
.text:0000221C                 pop     edi
.text:0000221D                 pop     esi
.text:0000221E                 mov     ecx, [ebp+var_4]
.text:00002221                 xor     ecx, ebp
.text:00002223                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002228                 add     esp, 0A0h
.text:0000222E                 cmp     ebp, esp
.text:00002230                 call    __RTC_CheckEsp
.text:00002235                 mov     esp, ebp
.text:00002237                 pop     ebp
.text:00002238                 retn
.text:00002238 _IsPlatformNT   endp
.text:00002238
.text:00002238 ; ---------------------------------------------------------------------------
.text:00002239                 align 4
.text:0000223C $LN5            dd 1                    ; DATA XREF: _IsPlatformNT+77o
.text:00002240                 dd offset $LN4
.text:00002244 $LN4            dd 0FFFFFF64h, 94h      ; DATA XREF: .text:00002240o
.text:0000224C                 dd offset $LN3          ; "osvi"
.text:00002250 $LN3            db 'osvi',0             ; DATA XREF: .text:0000224Co
.text:00002255                 align 4
.text:00002258
.text:00002258 ; =============== S U B R O U T I N E =======================================
.text:00002258
.text:00002258 ; Attributes: bp-based frame
.text:00002258
.text:00002258                 public _InitMultipleMonitorStubs
.text:00002258 _InitMultipleMonitorStubs proc near     ; CODE XREF: xGetSystemMetrics(x)+Cp
.text:00002258                                         ; xMonitorFromPoint(x,x,x)+4p ...
.text:00002258
.text:00002258 hModule         = dword ptr -4
.text:00002258
.text:00002258                 push    ebp
.text:00002259                 mov     ebp, esp
.text:0000225B                 push    ecx
.text:0000225C                 push    esi
.text:0000225D                 mov     [ebp+hModule], 0CCCCCCCCh
.text:00002264                 cmp     ds:_g_fMultiMonInitDone, 0
.text:0000226B                 jz      short loc_227E
.text:0000226D                 xor     eax, eax
.text:0000226F                 cmp     ds:_g_pfnGetMonitorInfo, 0
.text:00002276                 setnz   al
.text:00002279                 jmp     loc_2428
.text:0000227E ; ---------------------------------------------------------------------------
.text:0000227E
.text:0000227E loc_227E:                               ; CODE XREF: _InitMultipleMonitorStubs+13j
.text:0000227E                 call    _IsPlatformNT
.text:00002283                 mov     ds:_g_fMultimonPlatformNT, eax
.text:00002288                 mov     esi, esp
.text:0000228A                 push    offset $SG85935 ; "USER32"
.text:0000228F                 call    dword ptr ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:00002295                 cmp     esi, esp
.text:00002297                 call    __RTC_CheckEsp
.text:0000229C                 mov     [ebp+hModule], eax
.text:0000229F                 cmp     [ebp+hModule], 0
.text:000022A3                 jz      loc_23D6
.text:000022A9                 mov     esi, esp
.text:000022AB                 push    offset $SG85951 ; "GetSystemMetrics"
.text:000022B0                 mov     eax, [ebp+hModule]
.text:000022B3                 push    eax             ; hModule
.text:000022B4                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000022BA                 cmp     esi, esp
.text:000022BC                 call    __RTC_CheckEsp
.text:000022C1                 mov     ds:_g_pfnGetSystemMetrics, eax
.text:000022C6                 cmp     ds:_g_pfnGetSystemMetrics, 0
.text:000022CD                 jz      loc_23D6
.text:000022D3                 mov     esi, esp
.text:000022D5                 push    offset $SG85952 ; "MonitorFromWindow"
.text:000022DA                 mov     ecx, [ebp+hModule]
.text:000022DD                 push    ecx             ; hModule
.text:000022DE                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000022E4                 cmp     esi, esp
.text:000022E6                 call    __RTC_CheckEsp
.text:000022EB                 mov     ds:_g_pfnMonitorFromWindow, eax
.text:000022F0                 cmp     ds:_g_pfnMonitorFromWindow, 0
.text:000022F7                 jz      loc_23D6
.text:000022FD                 mov     esi, esp
.text:000022FF                 push    offset $SG85953 ; "MonitorFromRect"
.text:00002304                 mov     edx, [ebp+hModule]
.text:00002307                 push    edx             ; hModule
.text:00002308                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000230E                 cmp     esi, esp
.text:00002310                 call    __RTC_CheckEsp
.text:00002315                 mov     ds:_g_pfnMonitorFromRect, eax
.text:0000231A                 cmp     ds:_g_pfnMonitorFromRect, 0
.text:00002321                 jz      loc_23D6
.text:00002327                 mov     esi, esp
.text:00002329                 push    offset $SG85954 ; "MonitorFromPoint"
.text:0000232E                 mov     eax, [ebp+hModule]
.text:00002331                 push    eax             ; hModule
.text:00002332                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00002338                 cmp     esi, esp
.text:0000233A                 call    __RTC_CheckEsp
.text:0000233F                 mov     ds:_g_pfnMonitorFromPoint, eax
.text:00002344                 cmp     ds:_g_pfnMonitorFromPoint, 0
.text:0000234B                 jz      loc_23D6
.text:00002351                 mov     esi, esp
.text:00002353                 push    offset $SG85955 ; "EnumDisplayMonitors"
.text:00002358                 mov     ecx, [ebp+hModule]
.text:0000235B                 push    ecx             ; hModule
.text:0000235C                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00002362                 cmp     esi, esp
.text:00002364                 call    __RTC_CheckEsp
.text:00002369                 mov     ds:_g_pfnEnumDisplayMonitors, eax
.text:0000236E                 cmp     ds:_g_pfnEnumDisplayMonitors, 0
.text:00002375                 jz      short loc_23D6
.text:00002377                 mov     esi, esp
.text:00002379                 push    offset $SG85956 ; "GetMonitorInfoA"
.text:0000237E                 mov     edx, [ebp+hModule]
.text:00002381                 push    edx             ; hModule
.text:00002382                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00002388                 cmp     esi, esp
.text:0000238A                 call    __RTC_CheckEsp
.text:0000238F                 mov     ds:_g_pfnGetMonitorInfo, eax
.text:00002394                 cmp     ds:_g_pfnGetMonitorInfo, 0
.text:0000239B                 jz      short loc_23D6
.text:0000239D                 mov     esi, esp
.text:0000239F                 push    offset $SG85957 ; "EnumDisplayDevicesA"
.text:000023A4                 mov     eax, [ebp+hModule]
.text:000023A7                 push    eax             ; hModule
.text:000023A8                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000023AE                 cmp     esi, esp
.text:000023B0                 call    __RTC_CheckEsp
.text:000023B5                 mov     ds:_g_pfnEnumDisplayDevices, eax
.text:000023BA                 cmp     ds:_g_pfnEnumDisplayDevices, 0
.text:000023C1                 jz      short loc_23D6
.text:000023C3                 mov     ds:_g_fMultiMonInitDone, 1
.text:000023CD                 mov     eax, 1
.text:000023D2                 jmp     short loc_2428
.text:000023D4 ; ---------------------------------------------------------------------------
.text:000023D4                 jmp     short loc_2428
.text:000023D6 ; ---------------------------------------------------------------------------
.text:000023D6
.text:000023D6 loc_23D6:                               ; CODE XREF: _InitMultipleMonitorStubs+4Bj
.text:000023D6                                         ; _InitMultipleMonitorStubs+75j ...
.text:000023D6                 mov     ds:_g_pfnGetSystemMetrics, 0
.text:000023E0                 mov     ds:_g_pfnMonitorFromWindow, 0
.text:000023EA                 mov     ds:_g_pfnMonitorFromRect, 0
.text:000023F4                 mov     ds:_g_pfnMonitorFromPoint, 0
.text:000023FE                 mov     ds:_g_pfnGetMonitorInfo, 0
.text:00002408                 mov     ds:_g_pfnEnumDisplayMonitors, 0
.text:00002412                 mov     ds:_g_pfnEnumDisplayDevices, 0
.text:0000241C                 mov     ds:_g_fMultiMonInitDone, 1
.text:00002426                 xor     eax, eax
.text:00002428
.text:00002428 loc_2428:                               ; CODE XREF: _InitMultipleMonitorStubs+21j
.text:00002428                                         ; _InitMultipleMonitorStubs+17Aj ...
.text:00002428                 pop     esi
.text:00002429                 add     esp, 4
.text:0000242C                 cmp     ebp, esp
.text:0000242E                 call    __RTC_CheckEsp
.text:00002433                 mov     esp, ebp
.text:00002435                 pop     ebp
.text:00002436                 retn
.text:00002436 _InitMultipleMonitorStubs endp
.text:00002436
.text:00002436 ; ---------------------------------------------------------------------------
.text:00002437                 align 4
.text:00002438
.text:00002438 ; =============== S U B R O U T I N E =======================================
.text:00002438
.text:00002438 ; Attributes: bp-based frame
.text:00002438
.text:00002438 ; int __stdcall xGetSystemMetrics(int)
.text:00002438                 public _xGetSystemMetrics@4
.text:00002438 _xGetSystemMetrics@4 proc near
.text:00002438
.text:00002438 var_4           = dword ptr -4
.text:00002438 nIndex          = dword ptr  8
.text:00002438
.text:00002438                 push    ebp
.text:00002439                 mov     ebp, esp
.text:0000243B                 push    ecx
.text:0000243C                 push    esi
.text:0000243D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002444                 call    _InitMultipleMonitorStubs
.text:00002449                 test    eax, eax
.text:0000244B                 jz      short loc_2462
.text:0000244D                 mov     esi, esp
.text:0000244F                 mov     eax, [ebp+nIndex]
.text:00002452                 push    eax
.text:00002453                 call    ds:_g_pfnGetSystemMetrics
.text:00002459                 cmp     esi, esp
.text:0000245B                 call    __RTC_CheckEsp
.text:00002460                 jmp     short loc_24AF
.text:00002462 ; ---------------------------------------------------------------------------
.text:00002462
.text:00002462 loc_2462:                               ; CODE XREF: xGetSystemMetrics(x)+13j
.text:00002462                 mov     ecx, [ebp+nIndex]
.text:00002465                 mov     [ebp+var_4], ecx
.text:00002468                 mov     edx, [ebp+var_4]
.text:0000246B                 sub     edx, 4Ch ; 'L'
.text:0000246E                 mov     [ebp+var_4], edx
.text:00002471                 cmp     [ebp+var_4], 5  ; switch 6 cases
.text:00002475                 ja      short loc_249C  ; jumptable 0000247A default case
.text:00002477                 mov     eax, [ebp+var_4]
.text:0000247A                 jmp     ds:$LN10[eax*4] ; switch jump
.text:00002481 ; ---------------------------------------------------------------------------
.text:00002481
.text:00002481 $LN4_0:                                 ; CODE XREF: xGetSystemMetrics(x)+42j
.text:00002481                                         ; DATA XREF: .text:$LN10o
.text:00002481                 mov     eax, 1          ; jumptable 0000247A cases 4,5
.text:00002486                 jmp     short loc_24AF
.text:00002488 ; ---------------------------------------------------------------------------
.text:00002488
.text:00002488 $LN3_0:                                 ; CODE XREF: xGetSystemMetrics(x)+42j
.text:00002488                                         ; DATA XREF: .text:$LN10o
.text:00002488                 xor     eax, eax        ; jumptable 0000247A cases 0,1
.text:0000248A                 jmp     short loc_24AF
.text:0000248C ; ---------------------------------------------------------------------------
.text:0000248C
.text:0000248C $LN2:                                   ; CODE XREF: xGetSystemMetrics(x)+42j
.text:0000248C                                         ; DATA XREF: .text:$LN10o
.text:0000248C                 mov     [ebp+nIndex], 0 ; jumptable 0000247A case 2
.text:00002493                 jmp     short loc_249C  ; jumptable 0000247A default case
.text:00002495 ; ---------------------------------------------------------------------------
.text:00002495
.text:00002495 $LN1:                                   ; CODE XREF: xGetSystemMetrics(x)+42j
.text:00002495                                         ; DATA XREF: .text:$LN10o
.text:00002495                 mov     [ebp+nIndex], 1 ; jumptable 0000247A case 3
.text:0000249C
.text:0000249C loc_249C:                               ; CODE XREF: xGetSystemMetrics(x)+3Dj
.text:0000249C                                         ; xGetSystemMetrics(x)+5Bj
.text:0000249C                 mov     esi, esp        ; jumptable 0000247A default case
.text:0000249E                 mov     ecx, [ebp+nIndex]
.text:000024A1                 push    ecx             ; nIndex
.text:000024A2                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000024A8                 cmp     esi, esp
.text:000024AA                 call    __RTC_CheckEsp
.text:000024AF
.text:000024AF loc_24AF:                               ; CODE XREF: xGetSystemMetrics(x)+28j
.text:000024AF                                         ; xGetSystemMetrics(x)+4Ej ...
.text:000024AF                 pop     esi
.text:000024B0                 add     esp, 4
.text:000024B3                 cmp     ebp, esp
.text:000024B5                 call    __RTC_CheckEsp
.text:000024BA                 mov     esp, ebp
.text:000024BC                 pop     ebp
.text:000024BD                 retn    4
.text:000024BD _xGetSystemMetrics@4 endp
.text:000024BD
.text:000024BD ; ---------------------------------------------------------------------------
.text:000024C0 $LN10           dd offset $LN3_0        ; DATA XREF: xGetSystemMetrics(x)+42r
.text:000024C0                 dd offset $LN3_0        ; jump table for switch statement
.text:000024C0                 dd offset $LN2
.text:000024C0                 dd offset $LN1
.text:000024C0                 dd offset $LN4_0
.text:000024C0                 dd offset $LN4_0
.text:000024D8
.text:000024D8 ; =============== S U B R O U T I N E =======================================
.text:000024D8
.text:000024D8 ; Attributes: bp-based frame
.text:000024D8
.text:000024D8 ; HMONITOR __stdcall xMonitorFromPoint(POINT, DWORD)
.text:000024D8                 public _xMonitorFromPoint@12
.text:000024D8 _xMonitorFromPoint@12 proc near         ; CODE XREF: WndProc(x,x,x,x)+120Ep
.text:000024D8
.text:000024D8 arg_0           = POINT ptr  8
.text:000024D8 arg_8           = dword ptr  10h
.text:000024D8
.text:000024D8                 push    ebp
.text:000024D9                 mov     ebp, esp
.text:000024DB                 push    esi
.text:000024DC                 call    _InitMultipleMonitorStubs
.text:000024E1                 test    eax, eax
.text:000024E3                 jz      short loc_2502
.text:000024E5                 mov     esi, esp
.text:000024E7                 mov     eax, [ebp+arg_8]
.text:000024EA                 push    eax
.text:000024EB                 mov     ecx, [ebp+arg_0.y]
.text:000024EE                 push    ecx
.text:000024EF                 mov     edx, [ebp+arg_0.x]
.text:000024F2                 push    edx
.text:000024F3                 call    ds:_g_pfnMonitorFromPoint
.text:000024F9                 cmp     esi, esp
.text:000024FB                 call    __RTC_CheckEsp
.text:00002500                 jmp     short loc_254B
.text:00002502 ; ---------------------------------------------------------------------------
.text:00002502
.text:00002502 loc_2502:                               ; CODE XREF: xMonitorFromPoint(x,x,x)+Bj
.text:00002502                 mov     eax, [ebp+arg_8]
.text:00002505                 and     eax, 3
.text:00002508                 jnz     short loc_2542
.text:0000250A                 cmp     [ebp+arg_0.x], 0
.text:0000250E                 jl      short loc_2549
.text:00002510                 mov     esi, esp
.text:00002512                 push    0               ; nIndex
.text:00002514                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:0000251A                 cmp     esi, esp
.text:0000251C                 call    __RTC_CheckEsp
.text:00002521                 cmp     [ebp+arg_0.x], eax
.text:00002524                 jge     short loc_2549
.text:00002526                 cmp     [ebp+arg_0.y], 0
.text:0000252A                 jl      short loc_2549
.text:0000252C                 mov     esi, esp
.text:0000252E                 push    1               ; nIndex
.text:00002530                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:00002536                 cmp     esi, esp
.text:00002538                 call    __RTC_CheckEsp
.text:0000253D                 cmp     [ebp+arg_0.y], eax
.text:00002540                 jge     short loc_2549
.text:00002542
.text:00002542 loc_2542:                               ; CODE XREF: xMonitorFromPoint(x,x,x)+30j
.text:00002542                 mov     eax, 12340042h
.text:00002547                 jmp     short loc_254B
.text:00002549 ; ---------------------------------------------------------------------------
.text:00002549
.text:00002549 loc_2549:                               ; CODE XREF: xMonitorFromPoint(x,x,x)+36j
.text:00002549                                         ; xMonitorFromPoint(x,x,x)+4Cj ...
.text:00002549                 xor     eax, eax
.text:0000254B
.text:0000254B loc_254B:                               ; CODE XREF: xMonitorFromPoint(x,x,x)+28j
.text:0000254B                                         ; xMonitorFromPoint(x,x,x)+6Fj
.text:0000254B                 pop     esi
.text:0000254C                 cmp     ebp, esp
.text:0000254E                 call    __RTC_CheckEsp
.text:00002553                 pop     ebp
.text:00002554                 retn    0Ch
.text:00002554 _xMonitorFromPoint@12 endp
.text:00002554
.text:00002554 ; ---------------------------------------------------------------------------
.text:00002557                 align 4
.text:00002558
.text:00002558 ; =============== S U B R O U T I N E =======================================
.text:00002558
.text:00002558 ; Attributes: bp-based frame
.text:00002558
.text:00002558 ; HMONITOR __stdcall xMonitorFromRect(LPCRECT, DWORD)
.text:00002558                 public _xMonitorFromRect@8
.text:00002558 _xMonitorFromRect@8 proc near           ; CODE XREF: xMonitorFromWindow(x,x)+ADp
.text:00002558
.text:00002558 arg_0           = dword ptr  8
.text:00002558 arg_4           = dword ptr  0Ch
.text:00002558
.text:00002558                 push    ebp
.text:00002559                 mov     ebp, esp
.text:0000255B                 push    esi
.text:0000255C                 call    _InitMultipleMonitorStubs
.text:00002561                 test    eax, eax
.text:00002563                 jz      short loc_257E
.text:00002565                 mov     esi, esp
.text:00002567                 mov     eax, [ebp+arg_4]
.text:0000256A                 push    eax
.text:0000256B                 mov     ecx, [ebp+arg_0]
.text:0000256E                 push    ecx
.text:0000256F                 call    ds:_g_pfnMonitorFromRect
.text:00002575                 cmp     esi, esp
.text:00002577                 call    __RTC_CheckEsp
.text:0000257C                 jmp     short loc_25D2
.text:0000257E ; ---------------------------------------------------------------------------
.text:0000257E
.text:0000257E loc_257E:                               ; CODE XREF: xMonitorFromRect(x,x)+Bj
.text:0000257E                 mov     edx, [ebp+arg_4]
.text:00002581                 and     edx, 3
.text:00002584                 jnz     short loc_25C9
.text:00002586                 mov     eax, [ebp+arg_0]
.text:00002589                 cmp     dword ptr [eax+8], 0
.text:0000258D                 jle     short loc_25D0
.text:0000258F                 mov     ecx, [ebp+arg_0]
.text:00002592                 cmp     dword ptr [ecx+0Ch], 0
.text:00002596                 jle     short loc_25D0
.text:00002598                 mov     esi, esp
.text:0000259A                 push    0               ; nIndex
.text:0000259C                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000025A2                 cmp     esi, esp
.text:000025A4                 call    __RTC_CheckEsp
.text:000025A9                 mov     edx, [ebp+arg_0]
.text:000025AC                 cmp     [edx], eax
.text:000025AE                 jge     short loc_25D0
.text:000025B0                 mov     esi, esp
.text:000025B2                 push    1               ; nIndex
.text:000025B4                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000025BA                 cmp     esi, esp
.text:000025BC                 call    __RTC_CheckEsp
.text:000025C1                 mov     ecx, [ebp+arg_0]
.text:000025C4                 cmp     [ecx+4], eax
.text:000025C7                 jge     short loc_25D0
.text:000025C9
.text:000025C9 loc_25C9:                               ; CODE XREF: xMonitorFromRect(x,x)+2Cj
.text:000025C9                 mov     eax, 12340042h
.text:000025CE                 jmp     short loc_25D2
.text:000025D0 ; ---------------------------------------------------------------------------
.text:000025D0
.text:000025D0 loc_25D0:                               ; CODE XREF: xMonitorFromRect(x,x)+35j
.text:000025D0                                         ; xMonitorFromRect(x,x)+3Ej ...
.text:000025D0                 xor     eax, eax
.text:000025D2
.text:000025D2 loc_25D2:                               ; CODE XREF: xMonitorFromRect(x,x)+24j
.text:000025D2                                         ; xMonitorFromRect(x,x)+76j
.text:000025D2                 pop     esi
.text:000025D3                 cmp     ebp, esp
.text:000025D5                 call    __RTC_CheckEsp
.text:000025DA                 pop     ebp
.text:000025DB                 retn    8
.text:000025DB _xMonitorFromRect@8 endp
.text:000025DB
.text:000025DB ; ---------------------------------------------------------------------------
.text:000025DE                 db 0Ah dup(0CCh)
.text:000025E8
.text:000025E8 ; =============== S U B R O U T I N E =======================================
.text:000025E8
.text:000025E8 ; Attributes: bp-based frame
.text:000025E8
.text:000025E8 ; HMONITOR __stdcall xMonitorFromWindow(HWND, DWORD)
.text:000025E8                 public _xMonitorFromWindow@8
.text:000025E8 _xMonitorFromWindow@8 proc near         ; CODE XREF: _get_fullscreen_rect+28p
.text:000025E8
.text:000025E8 var_3C          = dword ptr -3Ch
.text:000025E8 wndpl           = WINDOWPLACEMENT ptr -34h
.text:000025E8 var_4           = dword ptr -4
.text:000025E8 hWnd            = dword ptr  8
.text:000025E8 arg_4           = dword ptr  0Ch
.text:000025E8
.text:000025E8                 push    ebp
.text:000025E9                 mov     ebp, esp
.text:000025EB                 sub     esp, 3Ch
.text:000025EE                 push    esi
.text:000025EF                 push    edi
.text:000025F0                 lea     edi, [ebp+var_3C]
.text:000025F3                 mov     ecx, 0Fh
.text:000025F8                 mov     eax, 0CCCCCCCCh
.text:000025FD                 rep stosd
.text:000025FF                 mov     eax, dword ptr ds:___security_cookie
.text:00002604                 xor     eax, ebp
.text:00002606                 mov     [ebp+var_4], eax
.text:00002609                 call    _InitMultipleMonitorStubs
.text:0000260E                 test    eax, eax
.text:00002610                 jz      short loc_262B
.text:00002612                 mov     esi, esp
.text:00002614                 mov     eax, [ebp+arg_4]
.text:00002617                 push    eax
.text:00002618                 mov     ecx, [ebp+hWnd]
.text:0000261B                 push    ecx
.text:0000261C                 call    ds:_g_pfnMonitorFromWindow
.text:00002622                 cmp     esi, esp
.text:00002624                 call    __RTC_CheckEsp
.text:00002629                 jmp     short loc_269E
.text:0000262B ; ---------------------------------------------------------------------------
.text:0000262B
.text:0000262B loc_262B:                               ; CODE XREF: xMonitorFromWindow(x,x)+28j
.text:0000262B                 mov     edx, [ebp+arg_4]
.text:0000262E                 and     edx, 3
.text:00002631                 jz      short loc_263A
.text:00002633                 mov     eax, 12340042h
.text:00002638                 jmp     short loc_269E
.text:0000263A ; ---------------------------------------------------------------------------
.text:0000263A
.text:0000263A loc_263A:                               ; CODE XREF: xMonitorFromWindow(x,x)+49j
.text:0000263A                 mov     esi, esp
.text:0000263C                 mov     eax, [ebp+hWnd]
.text:0000263F                 push    eax             ; hWnd
.text:00002640                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text:00002646                 cmp     esi, esp
.text:00002648                 call    __RTC_CheckEsp
.text:0000264D                 test    eax, eax
.text:0000264F                 jz      short loc_266D
.text:00002651                 mov     esi, esp
.text:00002653                 lea     ecx, [ebp+wndpl]
.text:00002656                 push    ecx             ; lpwndpl
.text:00002657                 mov     edx, [ebp+hWnd]
.text:0000265A                 push    edx             ; hWnd
.text:0000265B                 call    dword ptr ds:__imp__GetWindowPlacement@8 ; GetWindowPlacement(x,x)
.text:00002661                 cmp     esi, esp
.text:00002663                 call    __RTC_CheckEsp
.text:00002668                 mov     [ebp+var_3C], eax
.text:0000266B                 jmp     short loc_2687
.text:0000266D ; ---------------------------------------------------------------------------
.text:0000266D
.text:0000266D loc_266D:                               ; CODE XREF: xMonitorFromWindow(x,x)+67j
.text:0000266D                 mov     esi, esp
.text:0000266F                 lea     eax, [ebp+wndpl.rcNormalPosition]
.text:00002672                 push    eax             ; lpRect
.text:00002673                 mov     ecx, [ebp+hWnd]
.text:00002676                 push    ecx             ; hWnd
.text:00002677                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:0000267D                 cmp     esi, esp
.text:0000267F                 call    __RTC_CheckEsp
.text:00002684                 mov     [ebp+var_3C], eax
.text:00002687
.text:00002687 loc_2687:                               ; CODE XREF: xMonitorFromWindow(x,x)+83j
.text:00002687                 cmp     [ebp+var_3C], 0
.text:0000268B                 jz      short loc_269C
.text:0000268D                 mov     edx, [ebp+arg_4]
.text:00002690                 push    edx             ; DWORD
.text:00002691                 lea     eax, [ebp+wndpl.rcNormalPosition]
.text:00002694                 push    eax             ; LPCRECT
.text:00002695                 call    _xMonitorFromRect@8 ; xMonitorFromRect(x,x)
.text:0000269A                 jmp     short loc_269E
.text:0000269C ; ---------------------------------------------------------------------------
.text:0000269C
.text:0000269C loc_269C:                               ; CODE XREF: xMonitorFromWindow(x,x)+A3j
.text:0000269C                 xor     eax, eax
.text:0000269E
.text:0000269E loc_269E:                               ; CODE XREF: xMonitorFromWindow(x,x)+41j
.text:0000269E                                         ; xMonitorFromWindow(x,x)+50j ...
.text:0000269E                 push    edx
.text:0000269F                 mov     ecx, ebp
.text:000026A1                 push    eax
.text:000026A2                 lea     edx, $LN10_0
.text:000026A8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000026AD                 pop     eax
.text:000026AE                 pop     edx
.text:000026AF                 pop     edi
.text:000026B0                 pop     esi
.text:000026B1                 mov     ecx, [ebp+var_4]
.text:000026B4                 xor     ecx, ebp
.text:000026B6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000026BB                 add     esp, 3Ch
.text:000026BE                 cmp     ebp, esp
.text:000026C0                 call    __RTC_CheckEsp
.text:000026C5                 mov     esp, ebp
.text:000026C7                 pop     ebp
.text:000026C8                 retn    8
.text:000026C8 _xMonitorFromWindow@8 endp
.text:000026C8
.text:000026C8 ; ---------------------------------------------------------------------------
.text:000026CB                 align 4
.text:000026CC $LN10_0         dd 1                    ; DATA XREF: xMonitorFromWindow(x,x)+BAo
.text:000026D0                 dd offset $LN9
.text:000026D4 $LN9            db 0CCh                 ; DATA XREF: .text:000026D0o
.text:000026D5                 db 3 dup(0FFh)
.text:000026D8                 dd offset _lfont.lfFaceName+0Ch
.text:000026DC                 dd offset $LN8
.text:000026E0 $LN8            dd 0CC007077h, 0CCCCCCCCh ; DATA XREF: .text:000026DCo
.text:000026E8
.text:000026E8 ; =============== S U B R O U T I N E =======================================
.text:000026E8
.text:000026E8 ; Attributes: bp-based frame
.text:000026E8
.text:000026E8 ; BOOL __stdcall xGetMonitorInfo(HMONITOR, LPMONITORINFO)
.text:000026E8                 public _xGetMonitorInfo@8
.text:000026E8 _xGetMonitorInfo@8 proc near            ; CODE XREF: WndProc(x,x,x,x)+123Ap
.text:000026E8                                         ; _get_fullscreen_rect+3Fp
.text:000026E8
.text:000026E8 var_20          = dword ptr -20h
.text:000026E8 var_1C          = dword ptr -1Ch
.text:000026E8 pvParam         = dword ptr -18h
.text:000026E8 var_14          = dword ptr -14h
.text:000026E8 var_10          = dword ptr -10h
.text:000026E8 var_C           = dword ptr -0Ch
.text:000026E8 var_8           = dword ptr -8
.text:000026E8 var_4           = dword ptr -4
.text:000026E8 arg_0           = dword ptr  8
.text:000026E8 arg_4           = dword ptr  0Ch
.text:000026E8
.text:000026E8                 push    ebp
.text:000026E9                 mov     ebp, esp
.text:000026EB                 sub     esp, 20h
.text:000026EE                 push    esi
.text:000026EF                 mov     eax, 0CCCCCCCCh
.text:000026F4                 mov     [ebp+var_20], eax
.text:000026F7                 mov     [ebp+var_1C], eax
.text:000026FA                 mov     [ebp+pvParam], eax
.text:000026FD                 mov     [ebp+var_14], eax
.text:00002700                 mov     [ebp+var_10], eax
.text:00002703                 mov     [ebp+var_C], eax
.text:00002706                 mov     [ebp+var_8], eax
.text:00002709                 mov     [ebp+var_4], eax
.text:0000270C                 mov     eax, dword ptr ds:___security_cookie
.text:00002711                 xor     eax, ebp
.text:00002713                 mov     [ebp+var_4], eax
.text:00002716                 call    _InitMultipleMonitorStubs
.text:0000271B                 test    eax, eax
.text:0000271D                 jz      short loc_2741
.text:0000271F                 mov     esi, esp
.text:00002721                 mov     eax, [ebp+arg_4]
.text:00002724                 push    eax
.text:00002725                 mov     ecx, [ebp+arg_0]
.text:00002728                 push    ecx
.text:00002729                 call    ds:_g_pfnGetMonitorInfo
.text:0000272F                 cmp     esi, esp
.text:00002731                 call    __RTC_CheckEsp
.text:00002736                 mov     [ebp+var_20], eax
.text:00002739                 mov     eax, [ebp+var_20]
.text:0000273C                 jmp     loc_2817
.text:00002741 ; ---------------------------------------------------------------------------
.text:00002741
.text:00002741 loc_2741:                               ; CODE XREF: xGetMonitorInfo(x,x)+35j
.text:00002741                 cmp     [ebp+arg_0], 12340042h
.text:00002748                 jnz     loc_2815
.text:0000274E                 cmp     [ebp+arg_4], 0
.text:00002752                 jz      loc_2815
.text:00002758                 mov     edx, [ebp+arg_4]
.text:0000275B                 cmp     dword ptr [edx], 28h ; '('
.text:0000275E                 jb      loc_2815
.text:00002764                 mov     esi, esp
.text:00002766                 push    0               ; fWinIni
.text:00002768                 lea     eax, [ebp+pvParam]
.text:0000276B                 push    eax             ; pvParam
.text:0000276C                 push    0               ; uiParam
.text:0000276E                 push    30h ; '0'       ; uiAction
.text:00002770                 call    dword ptr ds:__imp__SystemParametersInfoA@16 ; SystemParametersInfoA(x,x,x,x)
.text:00002776                 cmp     esi, esp
.text:00002778                 call    __RTC_CheckEsp
.text:0000277D                 test    eax, eax
.text:0000277F                 jz      loc_2815
.text:00002785                 mov     ecx, [ebp+arg_4]
.text:00002788                 mov     dword ptr [ecx+4], 0
.text:0000278F                 mov     edx, [ebp+arg_4]
.text:00002792                 mov     dword ptr [edx+8], 0
.text:00002799                 mov     esi, esp
.text:0000279B                 push    0               ; nIndex
.text:0000279D                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000027A3                 cmp     esi, esp
.text:000027A5                 call    __RTC_CheckEsp
.text:000027AA                 mov     ecx, [ebp+arg_4]
.text:000027AD                 mov     [ecx+0Ch], eax
.text:000027B0                 mov     esi, esp
.text:000027B2                 push    1               ; nIndex
.text:000027B4                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000027BA                 cmp     esi, esp
.text:000027BC                 call    __RTC_CheckEsp
.text:000027C1                 mov     edx, [ebp+arg_4]
.text:000027C4                 mov     [edx+10h], eax
.text:000027C7                 mov     eax, [ebp+arg_4]
.text:000027CA                 add     eax, 14h
.text:000027CD                 mov     ecx, [ebp+pvParam]
.text:000027D0                 mov     [eax], ecx
.text:000027D2                 mov     edx, [ebp+var_14]
.text:000027D5                 mov     [eax+4], edx
.text:000027D8                 mov     ecx, [ebp+var_10]
.text:000027DB                 mov     [eax+8], ecx
.text:000027DE                 mov     edx, [ebp+var_C]
.text:000027E1                 mov     [eax+0Ch], edx
.text:000027E4                 mov     eax, [ebp+arg_4]
.text:000027E7                 mov     dword ptr [eax+24h], 1
.text:000027EE                 mov     ecx, [ebp+arg_4]
.text:000027F1                 cmp     dword ptr [ecx], 48h ; 'H'
.text:000027F4                 jb      short loc_280E
.text:000027F6                 push    1Fh             ; MaxCount
.text:000027F8                 push    offset $SG86032 ; "DISPLAY"
.text:000027FD                 push    20h ; ' '       ; SizeInBytes
.text:000027FF                 mov     edx, [ebp+arg_4]
.text:00002802                 add     edx, 28h ; '('
.text:00002805                 push    edx             ; Dst
.text:00002806                 call    _strncpy_s
.text:0000280B                 add     esp, 10h
.text:0000280E
.text:0000280E loc_280E:                               ; CODE XREF: xGetMonitorInfo(x,x)+10Cj
.text:0000280E                 mov     eax, 1
.text:00002813                 jmp     short loc_2817
.text:00002815 ; ---------------------------------------------------------------------------
.text:00002815
.text:00002815 loc_2815:                               ; CODE XREF: xGetMonitorInfo(x,x)+60j
.text:00002815                                         ; xGetMonitorInfo(x,x)+6Aj ...
.text:00002815                 xor     eax, eax
.text:00002817
.text:00002817 loc_2817:                               ; CODE XREF: xGetMonitorInfo(x,x)+54j
.text:00002817                                         ; xGetMonitorInfo(x,x)+12Bj
.text:00002817                 push    edx
.text:00002818                 mov     ecx, ebp
.text:0000281A                 push    eax
.text:0000281B                 lea     edx, $LN8_0
.text:00002821                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002826                 pop     eax
.text:00002827                 pop     edx
.text:00002828                 pop     esi
.text:00002829                 mov     ecx, [ebp+var_4]
.text:0000282C                 xor     ecx, ebp
.text:0000282E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002833                 add     esp, 20h
.text:00002836                 cmp     ebp, esp
.text:00002838                 call    __RTC_CheckEsp
.text:0000283D                 mov     esp, ebp
.text:0000283F                 pop     ebp
.text:00002840                 retn    8
.text:00002840 _xGetMonitorInfo@8 endp
.text:00002840
.text:00002840 ; ---------------------------------------------------------------------------
.text:00002843                 align 4
.text:00002844 $LN8_0          dd 1                    ; DATA XREF: xGetMonitorInfo(x,x)+133o
.text:00002848                 dd offset $LN7
.text:0000284C $LN7            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00002848o
.text:00002854                 dd offset $LN6          ; "rcWork"
.text:00002858 $LN6            db 'rcWork',0           ; DATA XREF: .text:00002854o
.text:0000285F                 db 9 dup(0CCh)
.text:00002868
.text:00002868 ; =============== S U B R O U T I N E =======================================
.text:00002868
.text:00002868 ; Attributes: bp-based frame
.text:00002868
.text:00002868 ; BOOL __stdcall xEnumDisplayMonitors(HDC, LPCRECT, MONITORENUMPROC, LPARAM)
.text:00002868                 public _xEnumDisplayMonitors@16
.text:00002868 _xEnumDisplayMonitors@16 proc near
.text:00002868
.text:00002868 var_48          = dword ptr -48h
.text:00002868 pt              = tagPOINT ptr -40h
.text:00002868 rect            = tagRECT ptr -30h
.text:00002868 rc              = tagRECT ptr -18h
.text:00002868 var_4           = dword ptr -4
.text:00002868 hdc             = dword ptr  8
.text:00002868 arg_4           = dword ptr  0Ch
.text:00002868 arg_8           = dword ptr  10h
.text:00002868 arg_C           = dword ptr  14h
.text:00002868
.text:00002868                 push    ebp
.text:00002869                 mov     ebp, esp
.text:0000286B                 sub     esp, 48h
.text:0000286E                 push    esi
.text:0000286F                 push    edi
.text:00002870                 lea     edi, [ebp+var_48]
.text:00002873                 mov     ecx, 12h
.text:00002878                 mov     eax, 0CCCCCCCCh
.text:0000287D                 rep stosd
.text:0000287F                 mov     eax, dword ptr ds:___security_cookie
.text:00002884                 xor     eax, ebp
.text:00002886                 mov     [ebp+var_4], eax
.text:00002889                 call    _InitMultipleMonitorStubs
.text:0000288E                 test    eax, eax
.text:00002890                 jz      short loc_28B6
.text:00002892                 mov     esi, esp
.text:00002894                 mov     eax, [ebp+arg_C]
.text:00002897                 push    eax
.text:00002898                 mov     ecx, [ebp+arg_8]
.text:0000289B                 push    ecx
.text:0000289C                 mov     edx, [ebp+arg_4]
.text:0000289F                 push    edx
.text:000028A0                 mov     eax, [ebp+hdc]
.text:000028A3                 push    eax
.text:000028A4                 call    ds:_g_pfnEnumDisplayMonitors
.text:000028AA                 cmp     esi, esp
.text:000028AC                 call    __RTC_CheckEsp
.text:000028B1                 jmp     loc_2A0E
.text:000028B6 ; ---------------------------------------------------------------------------
.text:000028B6
.text:000028B6 loc_28B6:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+28j
.text:000028B6                 cmp     [ebp+arg_8], 0
.text:000028BA                 jnz     short loc_28C3
.text:000028BC                 xor     eax, eax
.text:000028BE                 jmp     loc_2A0E
.text:000028C3 ; ---------------------------------------------------------------------------
.text:000028C3
.text:000028C3 loc_28C3:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+52j
.text:000028C3                 mov     [ebp+rc.left], 0
.text:000028CA                 mov     [ebp+rc.top], 0
.text:000028D1                 mov     esi, esp
.text:000028D3                 push    0               ; nIndex
.text:000028D5                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000028DB                 cmp     esi, esp
.text:000028DD                 call    __RTC_CheckEsp
.text:000028E2                 mov     [ebp+rc.right], eax
.text:000028E5                 mov     esi, esp
.text:000028E7                 push    1               ; nIndex
.text:000028E9                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text:000028EF                 cmp     esi, esp
.text:000028F1                 call    __RTC_CheckEsp
.text:000028F6                 mov     [ebp+rc.bottom], eax
.text:000028F9                 cmp     [ebp+hdc], 0
.text:000028FD                 jz      loc_29C5
.text:00002903                 mov     esi, esp
.text:00002905                 lea     ecx, [ebp+rect]
.text:00002908                 push    ecx             ; lprect
.text:00002909                 mov     edx, [ebp+hdc]
.text:0000290C                 push    edx             ; hdc
.text:0000290D                 call    dword ptr ds:__imp__GetClipBox@8 ; GetClipBox(x,x)
.text:00002913                 cmp     esi, esp
.text:00002915                 call    __RTC_CheckEsp
.text:0000291A                 mov     [ebp+var_48], eax
.text:0000291D                 cmp     [ebp+var_48], 0
.text:00002921                 jz      loc_29BF
.text:00002927                 cmp     [ebp+var_48], 1
.text:0000292B                 jz      loc_29B8
.text:00002931                 mov     esi, esp
.text:00002933                 lea     eax, [ebp+pt]
.text:00002936                 push    eax             ; lppt
.text:00002937                 mov     ecx, [ebp+hdc]
.text:0000293A                 push    ecx             ; hdc
.text:0000293B                 call    dword ptr ds:__imp__GetDCOrgEx@8 ; GetDCOrgEx(x,x)
.text:00002941                 cmp     esi, esp
.text:00002943                 call    __RTC_CheckEsp
.text:00002948                 test    eax, eax
.text:0000294A                 jnz     short loc_2953
.text:0000294C                 xor     eax, eax
.text:0000294E                 jmp     loc_2A0E
.text:00002953 ; ---------------------------------------------------------------------------
.text:00002953
.text:00002953 loc_2953:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+E2j
.text:00002953                 mov     edx, [ebp+pt.y]
.text:00002956                 neg     edx
.text:00002958                 mov     esi, esp
.text:0000295A                 push    edx             ; dy
.text:0000295B                 mov     eax, [ebp+pt.x]
.text:0000295E                 neg     eax
.text:00002960                 push    eax             ; dx
.text:00002961                 lea     ecx, [ebp+rc]
.text:00002964                 push    ecx             ; lprc
.text:00002965                 call    dword ptr ds:__imp__OffsetRect@12 ; OffsetRect(x,x,x)
.text:0000296B                 cmp     esi, esp
.text:0000296D                 call    __RTC_CheckEsp
.text:00002972                 mov     esi, esp
.text:00002974                 lea     edx, [ebp+rect]
.text:00002977                 push    edx             ; lprcSrc2
.text:00002978                 lea     eax, [ebp+rc]
.text:0000297B                 push    eax             ; lprcSrc1
.text:0000297C                 lea     ecx, [ebp+rc]
.text:0000297F                 push    ecx             ; lprcDst
.text:00002980                 call    dword ptr ds:__imp__IntersectRect@12 ; IntersectRect(x,x,x)
.text:00002986                 cmp     esi, esp
.text:00002988                 call    __RTC_CheckEsp
.text:0000298D                 test    eax, eax
.text:0000298F                 jz      short loc_29B8
.text:00002991                 cmp     [ebp+arg_4], 0
.text:00002995                 jz      short loc_29B6
.text:00002997                 mov     esi, esp
.text:00002999                 mov     edx, [ebp+arg_4]
.text:0000299C                 push    edx             ; lprcSrc2
.text:0000299D                 lea     eax, [ebp+rc]
.text:000029A0                 push    eax             ; lprcSrc1
.text:000029A1                 lea     ecx, [ebp+rc]
.text:000029A4                 push    ecx             ; lprcDst
.text:000029A5                 call    dword ptr ds:__imp__IntersectRect@12 ; IntersectRect(x,x,x)
.text:000029AB                 cmp     esi, esp
.text:000029AD                 call    __RTC_CheckEsp
.text:000029B2                 test    eax, eax
.text:000029B4                 jz      short loc_29B8
.text:000029B6
.text:000029B6 loc_29B6:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+12Dj
.text:000029B6                 jmp     short loc_29C3
.text:000029B8 ; ---------------------------------------------------------------------------
.text:000029B8
.text:000029B8 loc_29B8:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+C3j
.text:000029B8                                         ; xEnumDisplayMonitors(x,x,x,x)+127j ...
.text:000029B8                 mov     eax, 1
.text:000029BD                 jmp     short loc_2A0E
.text:000029BF ; ---------------------------------------------------------------------------
.text:000029BF
.text:000029BF loc_29BF:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+B9j
.text:000029BF                 xor     eax, eax
.text:000029C1                 jmp     short loc_2A0E
.text:000029C3 ; ---------------------------------------------------------------------------
.text:000029C3
.text:000029C3 loc_29C3:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x):loc_29B6j
.text:000029C3                 jmp     short loc_29F1
.text:000029C5 ; ---------------------------------------------------------------------------
.text:000029C5
.text:000029C5 loc_29C5:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+95j
.text:000029C5                 cmp     [ebp+arg_4], 0
.text:000029C9                 jz      short loc_29F1
.text:000029CB                 mov     esi, esp
.text:000029CD                 mov     edx, [ebp+arg_4]
.text:000029D0                 push    edx             ; lprcSrc2
.text:000029D1                 lea     eax, [ebp+rc]
.text:000029D4                 push    eax             ; lprcSrc1
.text:000029D5                 lea     ecx, [ebp+rc]
.text:000029D8                 push    ecx             ; lprcDst
.text:000029D9                 call    dword ptr ds:__imp__IntersectRect@12 ; IntersectRect(x,x,x)
.text:000029DF                 cmp     esi, esp
.text:000029E1                 call    __RTC_CheckEsp
.text:000029E6                 test    eax, eax
.text:000029E8                 jnz     short loc_29F1
.text:000029EA                 mov     eax, 1
.text:000029EF                 jmp     short loc_2A0E
.text:000029F1 ; ---------------------------------------------------------------------------
.text:000029F1
.text:000029F1 loc_29F1:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x):loc_29C3j
.text:000029F1                                         ; xEnumDisplayMonitors(x,x,x,x)+161j ...
.text:000029F1                 mov     esi, esp
.text:000029F3                 mov     edx, [ebp+arg_C]
.text:000029F6                 push    edx             ; LPARAM
.text:000029F7                 lea     eax, [ebp+rc]
.text:000029FA                 push    eax             ; LPRECT
.text:000029FB                 mov     ecx, [ebp+hdc]
.text:000029FE                 push    ecx             ; HDC
.text:000029FF                 push    12340042h       ; HMONITOR
.text:00002A04                 call    [ebp+arg_8]
.text:00002A07                 cmp     esi, esp
.text:00002A09                 call    __RTC_CheckEsp
.text:00002A0E
.text:00002A0E loc_2A0E:                               ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+49j
.text:00002A0E                                         ; xEnumDisplayMonitors(x,x,x,x)+56j ...
.text:00002A0E                 push    edx
.text:00002A0F                 mov     ecx, ebp
.text:00002A11                 push    eax
.text:00002A12                 lea     edx, $LN20
.text:00002A18                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002A1D                 pop     eax
.text:00002A1E                 pop     edx
.text:00002A1F                 pop     edi
.text:00002A20                 pop     esi
.text:00002A21                 mov     ecx, [ebp+var_4]
.text:00002A24                 xor     ecx, ebp
.text:00002A26                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002A2B                 add     esp, 48h
.text:00002A2E                 cmp     ebp, esp
.text:00002A30                 call    __RTC_CheckEsp
.text:00002A35                 mov     esp, ebp
.text:00002A37                 pop     ebp
.text:00002A38                 retn    10h
.text:00002A38 _xEnumDisplayMonitors@16 endp
.text:00002A38
.text:00002A38 ; ---------------------------------------------------------------------------
.text:00002A3B                 align 4
.text:00002A3C $LN20           dd 3                    ; DATA XREF: xEnumDisplayMonitors(x,x,x,x)+1AAo
.text:00002A40                 dd offset $LN19
.text:00002A44 $LN19           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00002A40o
.text:00002A4C                 dd offset $LN16         ; "rcLimit"
.text:00002A50                 dd 0FFFFFFD0h, 10h
.text:00002A58                 dd offset $LN17         ; "rcClip"
.text:00002A5C                 dd 0FFFFFFC0h, 8
.text:00002A64                 dd offset $LN18         ; "ptOrg"
.text:00002A68 $LN18           db 'ptOrg',0            ; DATA XREF: .text:00002A64o
.text:00002A6E $LN17           db 'rcClip',0           ; DATA XREF: .text:00002A58o
.text:00002A75 $LN16           db 'rcLimit',0          ; DATA XREF: .text:00002A4Co
.text:00002A7D                 db 0Bh dup(0CCh)
.text:00002A88
.text:00002A88 ; =============== S U B R O U T I N E =======================================
.text:00002A88
.text:00002A88 ; Attributes: bp-based frame
.text:00002A88
.text:00002A88 ; BOOL __stdcall xEnumDisplayDevices(PVOID, DWORD, PDISPLAY_DEVICE, DWORD)
.text:00002A88                 public _xEnumDisplayDevices@16
.text:00002A88 _xEnumDisplayDevices@16 proc near
.text:00002A88
.text:00002A88 arg_0           = dword ptr  8
.text:00002A88 arg_4           = dword ptr  0Ch
.text:00002A88 arg_8           = dword ptr  10h
.text:00002A88 arg_C           = dword ptr  14h
.text:00002A88
.text:00002A88                 push    ebp
.text:00002A89                 mov     ebp, esp
.text:00002A8B                 push    esi
.text:00002A8C                 call    _InitMultipleMonitorStubs
.text:00002A91                 test    eax, eax
.text:00002A93                 jz      short loc_2AB6
.text:00002A95                 mov     esi, esp
.text:00002A97                 mov     eax, [ebp+arg_C]
.text:00002A9A                 push    eax
.text:00002A9B                 mov     ecx, [ebp+arg_8]
.text:00002A9E                 push    ecx
.text:00002A9F                 mov     edx, [ebp+arg_4]
.text:00002AA2                 push    edx
.text:00002AA3                 mov     eax, [ebp+arg_0]
.text:00002AA6                 push    eax
.text:00002AA7                 call    ds:_g_pfnEnumDisplayDevices
.text:00002AAD                 cmp     esi, esp
.text:00002AAF                 call    __RTC_CheckEsp
.text:00002AB4                 jmp     short loc_2B24
.text:00002AB6 ; ---------------------------------------------------------------------------
.text:00002AB6
.text:00002AB6 loc_2AB6:                               ; CODE XREF: xEnumDisplayDevices(x,x,x,x)+Bj
.text:00002AB6                 cmp     [ebp+arg_0], 0
.text:00002ABA                 jz      short loc_2AC0
.text:00002ABC                 xor     eax, eax
.text:00002ABE                 jmp     short loc_2B24
.text:00002AC0 ; ---------------------------------------------------------------------------
.text:00002AC0
.text:00002AC0 loc_2AC0:                               ; CODE XREF: xEnumDisplayDevices(x,x,x,x)+32j
.text:00002AC0                 cmp     [ebp+arg_4], 0
.text:00002AC4                 jz      short loc_2ACA
.text:00002AC6                 xor     eax, eax
.text:00002AC8                 jmp     short loc_2B24
.text:00002ACA ; ---------------------------------------------------------------------------
.text:00002ACA
.text:00002ACA loc_2ACA:                               ; CODE XREF: xEnumDisplayDevices(x,x,x,x)+3Cj
.text:00002ACA                 cmp     [ebp+arg_8], 0
.text:00002ACE                 jz      short loc_2ADB
.text:00002AD0                 mov     ecx, [ebp+arg_8]
.text:00002AD3                 cmp     dword ptr [ecx], 1A8h
.text:00002AD9                 jnb     short loc_2ADF
.text:00002ADB
.text:00002ADB loc_2ADB:                               ; CODE XREF: xEnumDisplayDevices(x,x,x,x)+46j
.text:00002ADB                 xor     eax, eax
.text:00002ADD                 jmp     short loc_2B24
.text:00002ADF ; ---------------------------------------------------------------------------
.text:00002ADF
.text:00002ADF loc_2ADF:                               ; CODE XREF: xEnumDisplayDevices(x,x,x,x)+51j
.text:00002ADF                 push    1Fh             ; MaxCount
.text:00002AE1                 push    offset $SG86083 ; "DISPLAY"
.text:00002AE6                 push    20h ; ' '       ; SizeInBytes
.text:00002AE8                 mov     edx, [ebp+arg_8]
.text:00002AEB                 add     edx, 4
.text:00002AEE                 push    edx             ; Dst
.text:00002AEF                 call    _strncpy_s
.text:00002AF4                 add     esp, 10h
.text:00002AF7                 push    1Fh             ; MaxCount
.text:00002AF9                 push    offset $SG86087 ; "DISPLAY"
.text:00002AFE                 push    80h ; 'Ç'       ; SizeInBytes
.text:00002B03                 mov     eax, [ebp+arg_8]
.text:00002B06                 add     eax, 24h ; '$'
.text:00002B09                 push    eax             ; Dst
.text:00002B0A                 call    _strncpy_s
.text:00002B0F                 add     esp, 10h
.text:00002B12                 mov     ecx, [ebp+arg_8]
.text:00002B15                 mov     dword ptr [ecx+0A4h], 5
.text:00002B1F                 mov     eax, 1
.text:00002B24
.text:00002B24 loc_2B24:                               ; CODE XREF: xEnumDisplayDevices(x,x,x,x)+2Cj
.text:00002B24                                         ; xEnumDisplayDevices(x,x,x,x)+36j ...
.text:00002B24                 pop     esi
.text:00002B25                 cmp     ebp, esp
.text:00002B27                 call    __RTC_CheckEsp
.text:00002B2C                 pop     ebp
.text:00002B2D                 retn    10h
.text:00002B2D _xEnumDisplayDevices@16 endp
.text:00002B2D
.text:00002B2D ; ---------------------------------------------------------------------------
.text:00002B30                 db 8 dup(0CCh)
.text:00002B38
.text:00002B38 ; =============== S U B R O U T I N E =======================================
.text:00002B38
.text:00002B38 ; Attributes: bp-based frame
.text:00002B38
.text:00002B38                 public _ldisc_update
.text:00002B38 _ldisc_update   proc near
.text:00002B38                 push    ebp
.text:00002B39                 mov     ebp, esp
.text:00002B3B                 pop     ebp
.text:00002B3C                 retn
.text:00002B3C _ldisc_update   endp
.text:00002B3C
.text:00002B3C ; ---------------------------------------------------------------------------
.text:00002B3D                 db 0Bh dup(0CCh)
.text:00002B48
.text:00002B48 ; =============== S U B R O U T I N E =======================================
.text:00002B48
.text:00002B48 ; Attributes: bp-based frame
.text:00002B48
.text:00002B48                 public _get_ttymode
.text:00002B48 _get_ttymode    proc near
.text:00002B48
.text:00002B48 arg_4           = dword ptr  0Ch
.text:00002B48
.text:00002B48                 push    ebp
.text:00002B49                 mov     ebp, esp
.text:00002B4B                 mov     eax, [ebp+arg_4]
.text:00002B4E                 push    eax
.text:00002B4F                 mov     ecx, dword ptr ds:_term
.text:00002B55                 push    ecx
.text:00002B56                 call    _term_get_ttymode
.text:00002B5B                 add     esp, 8
.text:00002B5E                 cmp     ebp, esp
.text:00002B60                 call    __RTC_CheckEsp
.text:00002B65                 pop     ebp
.text:00002B66                 retn
.text:00002B66 _get_ttymode    endp
.text:00002B66
.text:00002B66 ; ---------------------------------------------------------------------------
.text:00002B67                 align 4
.text:00002B68
.text:00002B68 ; =============== S U B R O U T I N E =======================================
.text:00002B68
.text:00002B68 ; Attributes: bp-based frame
.text:00002B68
.text:00002B68 ; int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
.text:00002B68                 public _WinMain@16
.text:00002B68 _WinMain@16     proc near
.text:00002B68
.text:00002B68 var_194         = dword ptr -194h
.text:00002B68 dwMilliseconds  = dword ptr -190h
.text:00002B68 var_18C         = dword ptr -18Ch
.text:00002B68 nCount          = dword ptr -184h
.text:00002B68 pHandles        = dword ptr -17Ch
.text:00002B68 lpNewItem       = dword ptr -178h
.text:00002B68 var_174         = dword ptr -174h
.text:00002B68 hMenu           = dword ptr -170h
.text:00002B68 var_168         = SCROLLINFO ptr -168h
.text:00002B68 Size            = dword ptr -148h
.text:00002B68 Dst             = dword ptr -144h
.text:00002B68 Rect            = tagRECT ptr -13Ch
.text:00002B68 var_124         = tagRECT ptr -124h
.text:00002B68 dwExStyle       = dword ptr -110h
.text:00002B68 dwStyle         = dword ptr -10Ch
.text:00002B68 var_104         = dword ptr -104h
.text:00002B68 var_100         = dword ptr -100h
.text:00002B68 var_FC          = dword ptr -0FCh
.text:00002B68 var_F8          = dword ptr -0F8h
.text:00002B68 var_F0          = dword ptr -0F0h
.text:00002B68 var_EC          = dword ptr -0ECh
.text:00002B68 var_E8          = dword ptr -0E8h
.text:00002B68 var_E4          = dword ptr -0E4h
.text:00002B68 var_E0          = dword ptr -0E0h
.text:00002B68 var_DC          = dword ptr -0DCh
.text:00002B68 var_D8          = dword ptr -0D8h
.text:00002B68 var_D1          = byte ptr -0D1h
.text:00002B68 var_D0          = dword ptr -0D0h
.text:00002B68 var_CC          = dword ptr -0CCh
.text:00002B68 var_C8          = dword ptr -0C8h
.text:00002B68 var_C4          = dword ptr -0C4h
.text:00002B68 var_C0          = dword ptr -0C0h
.text:00002B68 Str1            = dword ptr -0BCh
.text:00002B68 var_B4          = dword ptr -0B4h
.text:00002B68 var_AC          = dword ptr -0ACh
.text:00002B68 var_A4          = dword ptr -0A4h
.text:00002B68 dwNumberOfBytesToMap= dword ptr -98h
.text:00002B68 lpBaseAddress   = dword ptr -90h
.text:00002B68 hFileMappingObject= dword ptr -88h
.text:00002B68 var_80          = dword ptr -80h
.text:00002B68 var_7C          = dword ptr -7Ch
.text:00002B68 var_78          = dword ptr -78h
.text:00002B68 var_74          = dword ptr -74h
.text:00002B68 Str             = dword ptr -70h
.text:00002B68 var_6C          = dword ptr -6Ch
.text:00002B68 lpCaption       = dword ptr -68h
.text:00002B68 nHeight         = dword ptr -64h
.text:00002B68 nWidth          = dword ptr -60h
.text:00002B68 var_5C          = dword ptr -5Ch
.text:00002B68 Msg             = tagMSG ptr -54h
.text:00002B68 WndClass        = WNDCLASSA ptr -30h
.text:00002B68 var_4           = dword ptr -4
.text:00002B68 hInstance       = dword ptr  8
.text:00002B68 hPrevInstance   = dword ptr  0Ch
.text:00002B68 lpCmdLine       = dword ptr  10h
.text:00002B68 nShowCmd        = dword ptr  14h
.text:00002B68
.text:00002B68                 push    ebp
.text:00002B69                 mov     ebp, esp
.text:00002B6B                 sub     esp, 194h
.text:00002B71                 push    esi
.text:00002B72                 push    edi
.text:00002B73                 lea     edi, [ebp+var_194]
.text:00002B79                 mov     ecx, 65h ; 'e'
.text:00002B7E                 mov     eax, 0CCCCCCCCh
.text:00002B83                 rep stosd
.text:00002B85                 mov     eax, dword ptr ds:___security_cookie
.text:00002B8A                 xor     eax, ebp
.text:00002B8C                 mov     [ebp+var_4], eax
.text:00002B8F                 mov     eax, [ebp+hInstance]
.text:00002B92                 mov     dword ptr ds:_hinst, eax
.text:00002B97                 mov     dword ptr ds:_hwnd, 0
.text:00002BA1                 mov     dword ptr ds:_flags, 5
.text:00002BAB                 call    _sk_init
.text:00002BB0                 mov     esi, esp
.text:00002BB2                 call    dword ptr ds:__imp__InitCommonControls@0 ; InitCommonControls()
.text:00002BB8                 cmp     esi, esp
.text:00002BBA                 call    __RTC_CheckEsp
.text:00002BBF                 call    _defuse_showwindow
.text:00002BC4                 call    _init_winver
.text:00002BC9                 test    eax, eax
.text:00002BCB                 jnz     short loc_2C16
.text:00002BCD                 mov     ecx, dword ptr ds:_appname
.text:00002BD3                 push    ecx
.text:00002BD4                 push    offset $SG89025 ; "%s Fatal Error"
.text:00002BD9                 call    _dupprintf
.text:00002BDE                 add     esp, 8
.text:00002BE1                 mov     [ebp+lpCaption], eax
.text:00002BE4                 mov     esi, esp
.text:00002BE6                 push    30h ; '0'       ; uType
.text:00002BE8                 mov     edx, [ebp+lpCaption]
.text:00002BEB                 push    edx             ; lpCaption
.text:00002BEC                 push    offset $SG89027 ; "Windows refuses to report a version"
.text:00002BF1                 push    0               ; hWnd
.text:00002BF3                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00002BF9                 cmp     esi, esp
.text:00002BFB                 call    __RTC_CheckEsp
.text:00002C00                 mov     eax, [ebp+lpCaption]
.text:00002C03                 push    eax
.text:00002C04                 call    _safefree
.text:00002C09                 add     esp, 4
.text:00002C0C                 mov     eax, 1
.text:00002C11                 jmp     loc_3F80
.text:00002C16 ; ---------------------------------------------------------------------------
.text:00002C16
.text:00002C16 loc_2C16:                               ; CODE XREF: WinMain(x,x,x,x)+63j
.text:00002C16                 cmp     dword ptr ds:_osVersion+4, 4
.text:00002C1D                 jb      short loc_2C31
.text:00002C1F                 cmp     dword ptr ds:_osVersion+4, 4
.text:00002C26                 jnz     short loc_2C4A
.text:00002C28                 cmp     dword ptr ds:_osVersion+10h, 2
.text:00002C2F                 jz      short loc_2C4A
.text:00002C31
.text:00002C31 loc_2C31:                               ; CODE XREF: WinMain(x,x,x,x)+B5j
.text:00002C31                 mov     esi, esp
.text:00002C33                 push    offset $SG89030 ; "MSWHEEL_ROLLMSG"
.text:00002C38                 call    dword ptr ds:__imp__RegisterWindowMessageA@4 ; RegisterWindowMessageA(x)
.text:00002C3E                 cmp     esi, esp
.text:00002C40                 call    __RTC_CheckEsp
.text:00002C45                 mov     _wm_mousewheel, eax
.text:00002C4A
.text:00002C4A loc_2C4A:                               ; CODE XREF: WinMain(x,x,x,x)+BEj
.text:00002C4A                                         ; WinMain(x,x,x,x)+C7j
.text:00002C4A                 call    _init_help
.text:00002C4F                 call    _init_winfuncs
.text:00002C54                 call    _conf_new
.text:00002C59                 mov     dword ptr ds:_conf, eax
.text:00002C5E                 mov     esi, esp
.text:00002C60                 push    0               ; pvReserved
.text:00002C62                 call    dword ptr ds:__imp__CoInitialize@4 ; CoInitialize(x)
.text:00002C68                 cmp     esi, esp
.text:00002C6A                 call    __RTC_CheckEsp
.text:00002C6F                 mov     [ebp+var_5C], eax
.text:00002C72                 cmp     [ebp+var_5C], 0
.text:00002C76                 jz      short loc_2CC7
.text:00002C78                 cmp     [ebp+var_5C], 1
.text:00002C7C                 jz      short loc_2CC7
.text:00002C7E                 mov     ecx, dword ptr ds:_appname
.text:00002C84                 push    ecx
.text:00002C85                 push    offset $SG89036 ; "%s Fatal Error"
.text:00002C8A                 call    _dupprintf
.text:00002C8F                 add     esp, 8
.text:00002C92                 mov     [ebp+var_6C], eax
.text:00002C95                 mov     esi, esp
.text:00002C97                 push    30h ; '0'       ; uType
.text:00002C99                 mov     edx, [ebp+var_6C]
.text:00002C9C                 push    edx             ; lpCaption
.text:00002C9D                 push    offset $SG89038 ; "Failed to initialize COM subsystem"
.text:00002CA2                 push    0               ; hWnd
.text:00002CA4                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00002CAA                 cmp     esi, esp
.text:00002CAC                 call    __RTC_CheckEsp
.text:00002CB1                 mov     eax, [ebp+var_6C]
.text:00002CB4                 push    eax
.text:00002CB5                 call    _safefree
.text:00002CBA                 add     esp, 4
.text:00002CBD                 mov     eax, 1
.text:00002CC2                 jmp     loc_3F80
.text:00002CC7 ; ---------------------------------------------------------------------------
.text:00002CC7
.text:00002CC7 loc_2CC7:                               ; CODE XREF: WinMain(x,x,x,x)+10Ej
.text:00002CC7                                         ; WinMain(x,x,x,x)+114j
.text:00002CC7                 mov     [ebp+var_74], 0
.text:00002CCE                 mov     [ebp+var_78], 0
.text:00002CD5                 mov     ecx, dword ptr ds:_be_default_protocol
.text:00002CDB                 mov     dword ptr ds:_default_protocol, ecx
.text:00002CE1                 mov     edx, dword ptr ds:_default_protocol
.text:00002CE7                 push    edx
.text:00002CE8                 call    _backend_from_proto
.text:00002CED                 add     esp, 4
.text:00002CF0                 mov     [ebp+var_7C], eax
.text:00002CF3                 mov     dword ptr ds:_default_port, 0
.text:00002CFD                 cmp     [ebp+var_7C], 0
.text:00002D01                 jz      short loc_2D0F
.text:00002D03                 mov     eax, [ebp+var_7C]
.text:00002D06                 mov     ecx, [eax+48h]
.text:00002D09                 mov     dword ptr ds:_default_port, ecx
.text:00002D0F
.text:00002D0F loc_2D0F:                               ; CODE XREF: WinMain(x,x,x,x)+199j
.text:00002D0F                 push    0
.text:00002D11                 push    73h ; 's'
.text:00002D13                 mov     edx, dword ptr ds:_conf
.text:00002D19                 push    edx
.text:00002D1A                 call    _conf_set_int
.text:00002D1F                 add     esp, 0Ch
.text:00002D22                 mov     eax, dword ptr ds:_conf
.text:00002D27                 push    eax
.text:00002D28                 push    0
.text:00002D2A                 call    _do_defaults
.text:00002D2F                 add     esp, 8
.text:00002D32                 mov     ecx, [ebp+lpCmdLine]
.text:00002D35                 mov     [ebp+Str], ecx
.text:00002D38
.text:00002D38 loc_2D38:                               ; CODE XREF: WinMain(x,x,x,x)+1F6j
.text:00002D38                 mov     edx, [ebp+Str]
.text:00002D3B                 movsx   eax, byte ptr [edx]
.text:00002D3E                 test    eax, eax
.text:00002D40                 jz      short loc_2D60
.text:00002D42                 mov     ecx, [ebp+Str]
.text:00002D45                 movsx   edx, byte ptr [ecx]
.text:00002D48                 push    edx             ; C
.text:00002D49                 call    _isspace
.text:00002D4E                 add     esp, 4
.text:00002D51                 test    eax, eax
.text:00002D53                 jz      short loc_2D60
.text:00002D55                 mov     eax, [ebp+Str]
.text:00002D58                 add     eax, 1
.text:00002D5B                 mov     [ebp+Str], eax
.text:00002D5E                 jmp     short loc_2D38
.text:00002D60 ; ---------------------------------------------------------------------------
.text:00002D60
.text:00002D60 loc_2D60:                               ; CODE XREF: WinMain(x,x,x,x)+1D8j
.text:00002D60                                         ; WinMain(x,x,x,x)+1EBj
.text:00002D60                 mov     ecx, [ebp+Str]
.text:00002D63                 movsx   edx, byte ptr [ecx]
.text:00002D66                 cmp     edx, 40h ; '@'
.text:00002D69                 jnz     loc_2DF7
.text:00002D6F                 mov     eax, [ebp+Str]
.text:00002D72                 push    eax             ; Str
.text:00002D73                 call    _strlen
.text:00002D78                 add     esp, 4
.text:00002D7B                 mov     [ebp+var_80], eax
.text:00002D7E
.text:00002D7E loc_2D7E:                               ; CODE XREF: WinMain(x,x,x,x)+23Cj
.text:00002D7E                 cmp     [ebp+var_80], 1
.text:00002D82                 jle     short loc_2DA6
.text:00002D84                 mov     ecx, [ebp+Str]
.text:00002D87                 add     ecx, [ebp+var_80]
.text:00002D8A                 movsx   edx, byte ptr [ecx-1]
.text:00002D8E                 push    edx             ; C
.text:00002D8F                 call    _isspace
.text:00002D94                 add     esp, 4
.text:00002D97                 test    eax, eax
.text:00002D99                 jz      short loc_2DA6
.text:00002D9B                 mov     eax, [ebp+var_80]
.text:00002D9E                 sub     eax, 1
.text:00002DA1                 mov     [ebp+var_80], eax
.text:00002DA4                 jmp     short loc_2D7E
.text:00002DA6 ; ---------------------------------------------------------------------------
.text:00002DA6
.text:00002DA6 loc_2DA6:                               ; CODE XREF: WinMain(x,x,x,x)+21Aj
.text:00002DA6                                         ; WinMain(x,x,x,x)+231j
.text:00002DA6                 mov     ecx, [ebp+Str]
.text:00002DA9                 add     ecx, [ebp+var_80]
.text:00002DAC                 mov     byte ptr [ecx], 0
.text:00002DAF                 mov     edx, dword ptr ds:_conf
.text:00002DB5                 push    edx
.text:00002DB6                 mov     eax, [ebp+Str]
.text:00002DB9                 add     eax, 1
.text:00002DBC                 push    eax
.text:00002DBD                 call    _do_defaults
.text:00002DC2                 add     esp, 8
.text:00002DC5                 mov     ecx, dword ptr ds:_conf
.text:00002DCB                 push    ecx
.text:00002DCC                 call    _conf_launchable
.text:00002DD1                 add     esp, 4
.text:00002DD4                 test    eax, eax
.text:00002DD6                 jnz     short loc_2DEB
.text:00002DD8                 call    _do_config
.text:00002DDD                 test    eax, eax
.text:00002DDF                 jnz     short loc_2DEB
.text:00002DE1                 push    0               ; Code
.text:00002DE3                 call    _cleanup_exit
.text:00002DE3 ; ---------------------------------------------------------------------------
.text:00002DE8                 db  83h ; â
.text:00002DE9                 db 0C4h ; -
.text:00002DEA                 db    4
.text:00002DEB ; ---------------------------------------------------------------------------
.text:00002DEB
.text:00002DEB loc_2DEB:                               ; CODE XREF: WinMain(x,x,x,x)+26Ej
.text:00002DEB                                         ; WinMain(x,x,x,x)+277j
.text:00002DEB                 mov     [ebp+var_78], 1
.text:00002DF2                 jmp     loc_332C
.text:00002DF7 ; ---------------------------------------------------------------------------
.text:00002DF7
.text:00002DF7 loc_2DF7:                               ; CODE XREF: WinMain(x,x,x,x)+201j
.text:00002DF7                 mov     edx, [ebp+Str]
.text:00002DFA                 movsx   eax, byte ptr [edx]
.text:00002DFD                 cmp     eax, 26h ; '&'
.text:00002E00                 jnz     loc_2EC9
.text:00002E06                 lea     ecx, [ebp+dwNumberOfBytesToMap]
.text:00002E0C                 push    ecx
.text:00002E0D                 lea     edx, [ebp+hFileMappingObject]
.text:00002E13                 push    edx
.text:00002E14                 push    offset $SG89061 ; "%p:%u"
.text:00002E19                 mov     eax, [ebp+Str]
.text:00002E1C                 add     eax, 1
.text:00002E1F                 push    eax             ; Src
.text:00002E20                 call    _sscanf
.text:00002E25                 add     esp, 10h
.text:00002E28                 cmp     eax, 2
.text:00002E2B                 jnz     short loc_2EAA
.text:00002E2D                 mov     esi, esp
.text:00002E2F                 mov     ecx, [ebp+dwNumberOfBytesToMap]
.text:00002E35                 push    ecx             ; dwNumberOfBytesToMap
.text:00002E36                 push    0               ; dwFileOffsetLow
.text:00002E38                 push    0               ; dwFileOffsetHigh
.text:00002E3A                 push    4               ; dwDesiredAccess
.text:00002E3C                 mov     edx, [ebp+hFileMappingObject]
.text:00002E42                 push    edx             ; hFileMappingObject
.text:00002E43                 call    dword ptr ds:__imp__MapViewOfFile@20 ; MapViewOfFile(x,x,x,x,x)
.text:00002E49                 cmp     esi, esp
.text:00002E4B                 call    __RTC_CheckEsp
.text:00002E50                 mov     [ebp+lpBaseAddress], eax
.text:00002E56                 cmp     [ebp+lpBaseAddress], 0
.text:00002E5D                 jz      short loc_2EAA
.text:00002E5F                 mov     eax, [ebp+dwNumberOfBytesToMap]
.text:00002E65                 push    eax
.text:00002E66                 mov     ecx, [ebp+lpBaseAddress]
.text:00002E6C                 push    ecx
.text:00002E6D                 mov     edx, dword ptr ds:_conf
.text:00002E73                 push    edx
.text:00002E74                 call    _conf_deserialise
.text:00002E79                 add     esp, 0Ch
.text:00002E7C                 mov     esi, esp
.text:00002E7E                 mov     eax, [ebp+lpBaseAddress]
.text:00002E84                 push    eax             ; lpBaseAddress
.text:00002E85                 call    dword ptr ds:__imp__UnmapViewOfFile@4 ; UnmapViewOfFile(x)
.text:00002E8B                 cmp     esi, esp
.text:00002E8D                 call    __RTC_CheckEsp
.text:00002E92                 mov     esi, esp
.text:00002E94                 mov     ecx, [ebp+hFileMappingObject]
.text:00002E9A                 push    ecx             ; hObject
.text:00002E9B                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00002EA1                 cmp     esi, esp
.text:00002EA3                 call    __RTC_CheckEsp
.text:00002EA8                 jmp     short loc_2EBD
.text:00002EAA ; ---------------------------------------------------------------------------
.text:00002EAA
.text:00002EAA loc_2EAA:                               ; CODE XREF: WinMain(x,x,x,x)+2C3j
.text:00002EAA                                         ; WinMain(x,x,x,x)+2F5j
.text:00002EAA                 call    _do_config
.text:00002EAF                 test    eax, eax
.text:00002EB1                 jnz     short loc_2EBD
.text:00002EB3                 push    0               ; Code
.text:00002EB5                 call    _cleanup_exit
.text:00002EB5 ; ---------------------------------------------------------------------------
.text:00002EBA                 db  83h ; â
.text:00002EBB                 db 0C4h ; -
.text:00002EBC                 db    4
.text:00002EBD ; ---------------------------------------------------------------------------
.text:00002EBD
.text:00002EBD loc_2EBD:                               ; CODE XREF: WinMain(x,x,x,x)+340j
.text:00002EBD                                         ; WinMain(x,x,x,x)+349j
.text:00002EBD                 mov     [ebp+var_78], 1
.text:00002EC4                 jmp     loc_332C
.text:00002EC9 ; ---------------------------------------------------------------------------
.text:00002EC9
.text:00002EC9 loc_2EC9:                               ; CODE XREF: WinMain(x,x,x,x)+298j
.text:00002EC9                 push    0
.text:00002ECB                 lea     edx, [ebp+var_B4]
.text:00002ED1                 push    edx
.text:00002ED2                 lea     eax, [ebp+var_A4]
.text:00002ED8                 push    eax
.text:00002ED9                 mov     ecx, [ebp+lpCmdLine]
.text:00002EDC                 push    ecx
.text:00002EDD                 call    _split_into_argv
.text:00002EE2                 add     esp, 10h
.text:00002EE5                 mov     [ebp+var_AC], 0
.text:00002EEF                 jmp     short loc_2F00
.text:00002EF1 ; ---------------------------------------------------------------------------
.text:00002EF1
.text:00002EF1 loc_2EF1:                               ; CODE XREF: WinMain(x,x,x,x)+45Fj
.text:00002EF1                                         ; WinMain(x,x,x,x):loc_3327j
.text:00002EF1                 mov     edx, [ebp+var_AC]
.text:00002EF7                 add     edx, 1
.text:00002EFA                 mov     [ebp+var_AC], edx
.text:00002F00
.text:00002F00 loc_2F00:                               ; CODE XREF: WinMain(x,x,x,x)+387j
.text:00002F00                 mov     eax, [ebp+var_AC]
.text:00002F06                 cmp     eax, [ebp+var_A4]
.text:00002F0C                 jge     loc_332C
.text:00002F12                 mov     ecx, [ebp+var_AC]
.text:00002F18                 mov     edx, [ebp+var_B4]
.text:00002F1E                 mov     eax, [edx+ecx*4]
.text:00002F21                 mov     [ebp+Str1], eax
.text:00002F27                 mov     ecx, [ebp+var_AC]
.text:00002F2D                 add     ecx, 1
.text:00002F30                 cmp     ecx, [ebp+var_A4]
.text:00002F36                 jge     short loc_2F50
.text:00002F38
.text:00002F38 loc_2F38:                               ; DATA XREF: .data:$SG89113o
.text:00002F38                 mov     edx, [ebp+var_AC]
.text:00002F3E                 mov     eax, [ebp+var_B4]
.text:00002F44                 mov     ecx, [eax+edx*4+4]
.text:00002F48                 mov     [ebp+var_194], ecx
.text:00002F4E                 jmp     short loc_2F5A
.text:00002F50 ; ---------------------------------------------------------------------------
.text:00002F50
.text:00002F50 loc_2F50:                               ; CODE XREF: WinMain(x,x,x,x)+3CEj
.text:00002F50                 mov     [ebp+var_194], 0
.text:00002F5A
.text:00002F5A loc_2F5A:                               ; CODE XREF: WinMain(x,x,x,x)+3E6j
.text:00002F5A                 mov     edx, dword ptr ds:_conf
.text:00002F60                 push    edx
.text:00002F61                 push    1
.text:00002F63                 mov     eax, [ebp+var_194]
.text:00002F69                 push    eax
.text:00002F6A                 mov     ecx, [ebp+Str1]
.text:00002F70                 push    ecx
.text:00002F71                 call    _cmdline_process_param
.text:00002F76                 add     esp, 10h
.text:00002F79                 mov     [ebp+var_C0], eax
.text:00002F7F                 cmp     [ebp+var_C0], 0FFFFFFFEh
.text:00002F86                 jnz     short loc_2FA1
.text:00002F88                 mov     edx, [ebp+Str1]
.text:00002F8E                 push    edx
.text:00002F8F                 push    offset $SG89076 ; "option \"%s\" requires an argument"
.text:00002F94                 call    _cmdline_error
.text:00002F99 ; ---------------------------------------------------------------------------
.text:00002F99                 add     esp, 8
.text:00002F9C                 jmp     loc_3327
.text:00002FA1 ; ---------------------------------------------------------------------------
.text:00002FA1
.text:00002FA1 loc_2FA1:                               ; CODE XREF: WinMain(x,x,x,x)+41Ej
.text:00002FA1                 cmp     [ebp+var_C0], 2
.text:00002FA8                 jnz     short loc_2FBE
.text:00002FAA                 mov     eax, [ebp+var_AC]
.text:00002FB0                 add     eax, 1
.text:00002FB3                 mov     [ebp+var_AC], eax
.text:00002FB9                 jmp     loc_3327
.text:00002FBE ; ---------------------------------------------------------------------------
.text:00002FBE
.text:00002FBE loc_2FBE:                               ; CODE XREF: WinMain(x,x,x,x)+440j
.text:00002FBE                 cmp     [ebp+var_C0], 1
.text:00002FC5                 jnz     short loc_2FD1
.text:00002FC7                 jmp     loc_2EF1
.text:00002FCC ; ---------------------------------------------------------------------------
.text:00002FCC                 jmp     loc_3327
.text:00002FD1 ; ---------------------------------------------------------------------------
.text:00002FD1
.text:00002FD1 loc_2FD1:                               ; CODE XREF: WinMain(x,x,x,x)+45Dj
.text:00002FD1                 push    offset $SG89084 ; "-cleanup"
.text:00002FD6                 mov     ecx, [ebp+Str1]
.text:00002FDC                 push    ecx             ; Str1
.text:00002FDD                 call    _strcmp
.text:00002FE2                 add     esp, 8
.text:00002FE5                 test    eax, eax
.text:00002FE7                 jz      short loc_3005
.text:00002FE9                 push    offset $SG89085 ; "-cleanup-during-uninstall"
.text:00002FEE                 mov     edx, [ebp+Str1]
.text:00002FF4                 push    edx             ; Str1
.text:00002FF5                 call    _strcmp
.text:00002FFA                 add     esp, 8
.text:00002FFD                 test    eax, eax
.text:00002FFF                 jnz     loc_30D7
.text:00003005
.text:00003005 loc_3005:                               ; CODE XREF: WinMain(x,x,x,x)+47Fj
.text:00003005                 push    offset $SG89089 ; "-cleanup-during-uninstall"
.text:0000300A                 mov     eax, [ebp+Str1]
.text:00003010                 push    eax             ; Str1
.text:00003011                 call    _strcmp
.text:00003016                 add     esp, 8
.text:00003019                 test    eax, eax
.text:0000301B                 jnz     short loc_3053
.text:0000301D                 mov     ecx, dword ptr ds:_appname
.text:00003023                 push    ecx
.text:00003024                 push    offset $SG89090 ; "Remove saved sessions and random seed f"...
.text:00003029                 call    _dupprintf
.text:0000302E                 add     esp, 8
.text:00003031                 mov     [ebp+var_C4], eax
.text:00003037                 mov     edx, dword ptr ds:_appname
.text:0000303D                 push    edx
.text:0000303E                 push    offset $SG89091 ; "%s Uninstallation"
.text:00003043                 call    _dupprintf
.text:00003048                 add     esp, 8
.text:0000304B                 mov     [ebp+var_C8], eax
.text:00003051                 jmp     short loc_3086
.text:00003053 ; ---------------------------------------------------------------------------
.text:00003053
.text:00003053 loc_3053:                               ; CODE XREF: WinMain(x,x,x,x)+4B3j
.text:00003053                 mov     eax, dword ptr ds:_appname
.text:00003058                 push    eax
.text:00003059                 push    offset $SG89093 ; "This procedure will remove ALL Registry"...
.text:0000305E                 call    _dupprintf
.text:00003063                 add     esp, 8
.text:00003066                 mov     [ebp+var_C4], eax
.text:0000306C                 mov     ecx, dword ptr ds:_appname
.text:00003072                 push    ecx
.text:00003073                 push    offset $SG89094 ; "%s Warning"
.text:00003078                 call    _dupprintf
.text:0000307D                 add     esp, 8
.text:00003080                 mov     [ebp+var_C8], eax
.text:00003086
.text:00003086 loc_3086:                               ; CODE XREF: WinMain(x,x,x,x)+4E9j
.text:00003086                 push    4
.text:00003088                 push    134h
.text:0000308D                 mov     edx, [ebp+var_C8]
.text:00003093                 push    edx
.text:00003094                 mov     eax, [ebp+var_C4]
.text:0000309A                 push    eax
.text:0000309B                 call    _message_box
.text:000030A0                 add     esp, 10h
.text:000030A3                 cmp     eax, 6
.text:000030A6                 jnz     short loc_30AD
.text:000030A8                 call    _cleanup_all
.text:000030AD
.text:000030AD loc_30AD:                               ; CODE XREF: WinMain(x,x,x,x)+53Ej
.text:000030AD                 mov     ecx, [ebp+var_C4]
.text:000030B3                 push    ecx
.text:000030B4                 call    _safefree
.text:000030B9                 add     esp, 4
.text:000030BC                 mov     edx, [ebp+var_C8]
.text:000030C2                 push    edx
.text:000030C3                 call    _safefree
.text:000030C8                 add     esp, 4
.text:000030CB                 push    0               ; Code
.text:000030CD                 call    _exit
.text:000030D2 ; ---------------------------------------------------------------------------
.text:000030D2                 jmp     loc_3327
.text:000030D7 ; ---------------------------------------------------------------------------
.text:000030D7
.text:000030D7 loc_30D7:                               ; CODE XREF: WinMain(x,x,x,x)+497j
.text:000030D7                 push    offset $SG89098 ; "-pgpfp"
.text:000030DC                 mov     eax, [ebp+Str1]
.text:000030E2                 push    eax             ; Str1
.text:000030E3                 call    _strcmp
.text:000030E8                 add     esp, 8
.text:000030EB                 test    eax, eax
.text:000030ED                 jnz     short loc_3100
.text:000030EF                 call    _pgp_fingerprints
.text:000030F4                 push    1               ; Code
.text:000030F6                 call    _exit
.text:000030FB ; ---------------------------------------------------------------------------
.text:000030FB                 jmp     loc_3327
.text:00003100 ; ---------------------------------------------------------------------------
.text:00003100
.text:00003100 loc_3100:                               ; CODE XREF: WinMain(x,x,x,x)+585j
.text:00003100                 mov     ecx, [ebp+Str1]
.text:00003106                 movsx   edx, byte ptr [ecx]
.text:00003109                 cmp     edx, 2Dh ; '-'
.text:0000310C                 jz      loc_3313
.text:00003112                 mov     eax, [ebp+Str1]
.text:00003118                 mov     [ebp+var_CC], eax
.text:0000311E                 cmp     [ebp+var_74], 0
.text:00003122                 jz      short loc_316C
.text:00003124                 mov     ecx, dword ptr ds:_conf
.text:0000312A                 push    ecx
.text:0000312B                 push    1
.text:0000312D                 mov     edx, [ebp+Str1]
.text:00003133                 push    edx
.text:00003134                 push    offset $SG89104
.text:00003139                 call    _cmdline_process_param
.text:0000313E                 add     esp, 10h
.text:00003141                 mov     [ebp+var_D0], eax
.text:00003147                 cmp     [ebp+var_D0], 2
.text:0000314E                 jz      short loc_3167
.text:00003150                 push    219h            ; Line
.text:00003155                 push    offset $SG89106 ; "..\\..\\window.c"
.text:0000315A                 push    offset $SG89107 ; "ret == 2"
.text:0000315F                 call    __wassert
.text:00003164 ; ---------------------------------------------------------------------------
.text:00003164                 add     esp, 0Ch
.text:00003167
.text:00003167 loc_3167:                               ; CODE XREF: WinMain(x,x,x,x)+5E6j
.text:00003167                 jmp     loc_3311
.text:0000316C ; ---------------------------------------------------------------------------
.text:0000316C
.text:0000316C loc_316C:                               ; CODE XREF: WinMain(x,x,x,x)+5BAj
.text:0000316C                 push    7               ; MaxCount
.text:0000316E                 push    offset $SG89110 ; "telnet:"
.text:00003173                 mov     ecx, [ebp+var_CC]
.text:00003179                 push    ecx             ; Str1
.text:0000317A                 call    _strncmp
.text:0000317F                 add     esp, 0Ch
.text:00003182                 test    eax, eax
.text:00003184                 jnz     loc_329A
.text:0000318A                 mov     edx, [ebp+var_CC]
.text:00003190                 add     edx, 7
.text:00003193                 mov     [ebp+var_CC], edx
.text:00003199                 mov     eax, [ebp+var_CC]
.text:0000319F                 movsx   ecx, byte ptr [eax]
.text:000031A2                 cmp     ecx, 2Fh ; '/'
.text:000031A5                 jnz     short loc_31C5
.text:000031A7                 mov     edx, [ebp+var_CC]
.text:000031AD                 movsx   eax, byte ptr [edx+1]
.text:000031B1                 cmp     eax, 2Fh ; '/'
.text:000031B4                 jnz     short loc_31C5
.text:000031B6                 mov     ecx, [ebp+var_CC]
.text:000031BC                 add     ecx, 2
.text:000031BF                 mov     [ebp+var_CC], ecx
.text:000031C5
.text:000031C5 loc_31C5:                               ; CODE XREF: WinMain(x,x,x,x)+63Dj
.text:000031C5                                         ; WinMain(x,x,x,x)+64Cj
.text:000031C5                 push    1
.text:000031C7                 push    2
.text:000031C9                 mov     edx, dword ptr ds:_conf
.text:000031CF                 push    edx
.text:000031D0                 call    _conf_set_int
.text:000031D5                 add     esp, 0Ch
.text:000031D8                 mov     eax, [ebp+var_CC]
.text:000031DE                 mov     [ebp+Str1], eax
.text:000031E4                 push    offset $SG89113
.text:000031E9                 mov     ecx, [ebp+Str1]
.text:000031EF                 push    ecx
.text:000031F0                 call    _host_strcspn
.text:000031F5                 add     esp, 8
.text:000031F8                 add     eax, [ebp+Str1]
.text:000031FE                 mov     [ebp+Str1], eax
.text:00003204                 mov     edx, [ebp+Str1]
.text:0000320A                 mov     al, [edx]
.text:0000320C                 mov     [ebp+var_D1], al
.text:00003212                 mov     ecx, [ebp+Str1]
.text:00003218                 movsx   edx, byte ptr [ecx]
.text:0000321B                 test    edx, edx
.text:0000321D                 jz      short loc_3237
.text:0000321F                 mov     eax, [ebp+Str1]
.text:00003225                 mov     byte ptr [eax], 0
.text:00003228                 mov     ecx, [ebp+Str1]
.text:0000322E                 add     ecx, 1
.text:00003231                 mov     [ebp+Str1], ecx
.text:00003237
.text:00003237 loc_3237:                               ; CODE XREF: WinMain(x,x,x,x)+6B5j
.text:00003237                 movsx   edx, [ebp+var_D1]
.text:0000323E                 cmp     edx, 3Ah ; ':'
.text:00003241                 jnz     short loc_3266
.text:00003243                 mov     eax, [ebp+Str1]
.text:00003249                 push    eax             ; Str
.text:0000324A                 call    _atoi
.text:0000324F                 add     esp, 4
.text:00003252                 push    eax
.text:00003253                 push    1
.text:00003255                 mov     ecx, dword ptr ds:_conf
.text:0000325B                 push    ecx
.text:0000325C                 call    _conf_set_int
.text:00003261                 add     esp, 0Ch
.text:00003264                 jmp     short loc_3279
.text:00003266 ; ---------------------------------------------------------------------------
.text:00003266
.text:00003266 loc_3266:                               ; CODE XREF: WinMain(x,x,x,x)+6D9j
.text:00003266                 push    0FFFFFFFFh
.text:00003268                 push    1
.text:0000326A                 mov     edx, dword ptr ds:_conf
.text:00003270                 push    edx
.text:00003271                 call    _conf_set_int
.text:00003276                 add     esp, 0Ch
.text:00003279
.text:00003279 loc_3279:                               ; CODE XREF: WinMain(x,x,x,x)+6FCj
.text:00003279                 mov     eax, [ebp+var_CC]
.text:0000327F                 push    eax
.text:00003280                 push    0
.text:00003282                 mov     ecx, dword ptr ds:_conf
.text:00003288                 push    ecx
.text:00003289                 call    _conf_set_str
.text:0000328E                 add     esp, 0Ch
.text:00003291                 mov     [ebp+var_74], 1
.text:00003298                 jmp     short loc_3311
.text:0000329A ; ---------------------------------------------------------------------------
.text:0000329A
.text:0000329A loc_329A:                               ; CODE XREF: WinMain(x,x,x,x)+61Cj
.text:0000329A                                         ; WinMain(x,x,x,x)+764j
.text:0000329A                 mov     edx, [ebp+Str1]
.text:000032A0                 movsx   eax, byte ptr [edx]
.text:000032A3                 test    eax, eax
.text:000032A5                 jz      short loc_32CE
.text:000032A7                 mov     ecx, [ebp+Str1]
.text:000032AD                 movsx   edx, byte ptr [ecx]
.text:000032B0                 push    edx             ; C
.text:000032B1                 call    _isspace
.text:000032B6                 add     esp, 4
.text:000032B9                 test    eax, eax
.text:000032BB                 jnz     short loc_32CE
.text:000032BD                 mov     eax, [ebp+Str1]
.text:000032C3                 add     eax, 1
.text:000032C6                 mov     [ebp+Str1], eax
.text:000032CC                 jmp     short loc_329A
.text:000032CE ; ---------------------------------------------------------------------------
.text:000032CE
.text:000032CE loc_32CE:                               ; CODE XREF: WinMain(x,x,x,x)+73Dj
.text:000032CE                                         ; WinMain(x,x,x,x)+753j
.text:000032CE                 mov     ecx, [ebp+Str1]
.text:000032D4                 movsx   edx, byte ptr [ecx]
.text:000032D7                 test    edx, edx
.text:000032D9                 jz      short loc_32F3
.text:000032DB                 mov     eax, [ebp+Str1]
.text:000032E1                 mov     byte ptr [eax], 0
.text:000032E4                 mov     ecx, [ebp+Str1]
.text:000032EA                 add     ecx, 1
.text:000032ED                 mov     [ebp+Str1], ecx
.text:000032F3
.text:000032F3 loc_32F3:                               ; CODE XREF: WinMain(x,x,x,x)+771j
.text:000032F3                 mov     edx, [ebp+var_CC]
.text:000032F9                 push    edx
.text:000032FA                 push    0
.text:000032FC                 mov     eax, dword ptr ds:_conf
.text:00003301                 push    eax
.text:00003302                 call    _conf_set_str
.text:00003307                 add     esp, 0Ch
.text:0000330A                 mov     [ebp+var_74], 1
.text:00003311
.text:00003311 loc_3311:                               ; CODE XREF: WinMain(x,x,x,x):loc_3167j
.text:00003311                                         ; WinMain(x,x,x,x)+730j
.text:00003311                 jmp     short loc_3327
.text:00003313 ; ---------------------------------------------------------------------------
.text:00003313
.text:00003313 loc_3313:                               ; CODE XREF: WinMain(x,x,x,x)+5A4j
.text:00003313                 mov     ecx, [ebp+Str1]
.text:00003319                 push    ecx
.text:0000331A                 push    offset $SG89123 ; "unknown option \"%s\""
.text:0000331F                 call    _cmdline_error
.text:00003324 ; ---------------------------------------------------------------------------
.text:00003324                 add     esp, 8
.text:00003327
.text:00003327 loc_3327:                               ; CODE XREF: WinMain(x,x,x,x)+434j
.text:00003327                                         ; WinMain(x,x,x,x)+451j ...
.text:00003327                 jmp     loc_2EF1
.text:0000332C ; ---------------------------------------------------------------------------
.text:0000332C
.text:0000332C loc_332C:                               ; CODE XREF: WinMain(x,x,x,x)+28Aj
.text:0000332C                                         ; WinMain(x,x,x,x)+35Cj ...
.text:0000332C                 mov     edx, dword ptr ds:_conf
.text:00003332                 push    edx
.text:00003333                 call    _cmdline_run_saved
.text:00003338                 add     esp, 4
.text:0000333B                 cmp     dword ptr ds:_loaded_session, 0
.text:00003342                 jnz     short loc_334A
.text:00003344                 cmp     [ebp+var_74], 0
.text:00003348                 jz      short loc_3351
.text:0000334A
.text:0000334A loc_334A:                               ; CODE XREF: WinMain(x,x,x,x)+7DAj
.text:0000334A                 mov     [ebp+var_78], 1
.text:00003351
.text:00003351 loc_3351:                               ; CODE XREF: WinMain(x,x,x,x)+7E0j
.text:00003351                 cmp     [ebp+var_78], 0
.text:00003355                 jz      short loc_3369
.text:00003357                 mov     eax, dword ptr ds:_conf
.text:0000335C                 push    eax
.text:0000335D                 call    _conf_launchable
.text:00003362                 add     esp, 4
.text:00003365                 test    eax, eax
.text:00003367                 jnz     short loc_337C
.text:00003369
.text:00003369 loc_3369:                               ; CODE XREF: WinMain(x,x,x,x)+7EDj
.text:00003369                 call    _do_config
.text:0000336E                 test    eax, eax
.text:00003370                 jnz     short loc_337C
.text:00003372                 push    0               ; Code
.text:00003374                 call    _cleanup_exit
.text:00003374 ; ---------------------------------------------------------------------------
.text:00003379                 db  83h ; â
.text:0000337A                 db 0C4h ; -
.text:0000337B                 db    4
.text:0000337C ; ---------------------------------------------------------------------------
.text:0000337C
.text:0000337C loc_337C:                               ; CODE XREF: WinMain(x,x,x,x)+7FFj
.text:0000337C                                         ; WinMain(x,x,x,x)+808j
.text:0000337C                 push    0
.text:0000337E                 mov     ecx, dword ptr ds:_conf
.text:00003384                 push    ecx
.text:00003385                 call    _conf_get_str
.text:0000338A                 add     esp, 8
.text:0000338D                 push    eax
.text:0000338E                 call    _dupstr
.text:00003393                 add     esp, 4
.text:00003396                 mov     [ebp+var_D8], eax
.text:0000339C                 mov     edx, [ebp+var_D8]
.text:000033A2                 mov     [ebp+var_DC], edx
.text:000033A8                 push    offset $SG89132 ; Control
.text:000033AD                 mov     eax, [ebp+var_DC]
.text:000033B3                 push    eax             ; Str
.text:000033B4                 call    _strspn
.text:000033B9                 add     esp, 8
.text:000033BC                 add     eax, [ebp+var_DC]
.text:000033C2                 mov     [ebp+var_DC], eax
.text:000033C8                 mov     ecx, [ebp+var_DC]
.text:000033CE                 movsx   edx, byte ptr [ecx]
.text:000033D1                 test    edx, edx
.text:000033D3                 jz      short loc_3424
.text:000033D5                 push    40h ; '@'       ; Ch
.text:000033D7                 mov     eax, [ebp+var_DC]
.text:000033DD                 push    eax             ; Str
.text:000033DE                 call    _strrchr
.text:000033E3                 add     esp, 8
.text:000033E6                 mov     [ebp+var_E8], eax
.text:000033EC                 cmp     [ebp+var_E8], 0
.text:000033F3                 jz      short loc_3424
.text:000033F5                 mov     ecx, [ebp+var_E8]
.text:000033FB                 mov     byte ptr [ecx], 0
.text:000033FE                 mov     edx, [ebp+var_DC]
.text:00003404                 push    edx
.text:00003405                 push    32h ; '2'
.text:00003407                 mov     eax, dword ptr ds:_conf
.text:0000340C                 push    eax
.text:0000340D                 call    _conf_set_str
.text:00003412                 add     esp, 0Ch
.text:00003415                 mov     ecx, [ebp+var_E8]
.text:0000341B                 add     ecx, 1
.text:0000341E                 mov     [ebp+var_DC], ecx
.text:00003424
.text:00003424 loc_3424:                               ; CODE XREF: WinMain(x,x,x,x)+86Bj
.text:00003424                                         ; WinMain(x,x,x,x)+88Bj
.text:00003424                 push    3Ah ; ':'
.text:00003426                 mov     edx, [ebp+var_DC]
.text:0000342C                 push    edx
.text:0000342D                 call    _host_strchr
.text:00003432                 add     esp, 8
.text:00003435                 mov     [ebp+var_EC], eax
.text:0000343B                 cmp     [ebp+var_EC], 0
.text:00003442                 jz      short loc_3470
.text:00003444                 push    3Ah ; ':'
.text:00003446                 mov     eax, [ebp+var_EC]
.text:0000344C                 add     eax, 1
.text:0000344F                 push    eax
.text:00003450                 call    _host_strchr
.text:00003455                 add     esp, 8
.text:00003458                 mov     [ebp+var_F0], eax
.text:0000345E                 cmp     [ebp+var_F0], 0
.text:00003465                 jnz     short loc_3470
.text:00003467                 mov     ecx, [ebp+var_EC]
.text:0000346D                 mov     byte ptr [ecx], 0
.text:00003470
.text:00003470 loc_3470:                               ; CODE XREF: WinMain(x,x,x,x)+8DAj
.text:00003470                                         ; WinMain(x,x,x,x)+8FDj
.text:00003470                 mov     edx, [ebp+var_D8]
.text:00003476                 mov     [ebp+var_E0], edx
.text:0000347C                 mov     eax, [ebp+var_DC]
.text:00003482                 mov     [ebp+var_E4], eax
.text:00003488
.text:00003488 loc_3488:                               ; CODE XREF: WinMain(x,x,x,x)+977j
.text:00003488                 mov     ecx, [ebp+var_E4]
.text:0000348E                 movsx   edx, byte ptr [ecx]
.text:00003491                 test    edx, edx
.text:00003493                 jz      short loc_34E1
.text:00003495                 mov     eax, [ebp+var_E4]
.text:0000349B                 movsx   ecx, byte ptr [eax]
.text:0000349E                 cmp     ecx, 20h ; ' '
.text:000034A1                 jz      short loc_34D0
.text:000034A3                 mov     edx, [ebp+var_E4]
.text:000034A9                 movsx   eax, byte ptr [edx]
.text:000034AC                 cmp     eax, 9
.text:000034AF                 jz      short loc_34D0
.text:000034B1                 mov     ecx, [ebp+var_E0]
.text:000034B7                 mov     edx, [ebp+var_E4]
.text:000034BD                 mov     al, [edx]
.text:000034BF                 mov     [ecx], al
.text:000034C1                 mov     ecx, [ebp+var_E0]
.text:000034C7                 add     ecx, 1
.text:000034CA                 mov     [ebp+var_E0], ecx
.text:000034D0
.text:000034D0 loc_34D0:                               ; CODE XREF: WinMain(x,x,x,x)+939j
.text:000034D0                                         ; WinMain(x,x,x,x)+947j
.text:000034D0                 mov     edx, [ebp+var_E4]
.text:000034D6                 add     edx, 1
.text:000034D9                 mov     [ebp+var_E4], edx
.text:000034DF                 jmp     short loc_3488
.text:000034E1 ; ---------------------------------------------------------------------------
.text:000034E1
.text:000034E1 loc_34E1:                               ; CODE XREF: WinMain(x,x,x,x)+92Bj
.text:000034E1                 mov     eax, [ebp+var_E0]
.text:000034E7                 mov     byte ptr [eax], 0
.text:000034EA                 mov     ecx, [ebp+var_D8]
.text:000034F0                 push    ecx
.text:000034F1                 push    0
.text:000034F3                 mov     edx, dword ptr ds:_conf
.text:000034F9                 push    edx
.text:000034FA                 call    _conf_set_str
.text:000034FF                 add     esp, 0Ch
.text:00003502                 mov     eax, [ebp+var_D8]
.text:00003508                 push    eax
.text:00003509                 call    _safefree
.text:0000350E                 add     esp, 4
.text:00003511                 cmp     [ebp+hPrevInstance], 0
.text:00003515                 jnz     short loc_3596
.text:00003517                 mov     [ebp+WndClass.style], 0
.text:0000351E                 mov     [ebp+WndClass.lpfnWndProc], offset _WndProc@16 ; WndProc(x,x,x,x)
.text:00003525                 mov     [ebp+WndClass.cbClsExtra], 0
.text:0000352C                 mov     [ebp+WndClass.cbWndExtra], 0
.text:00003533                 mov     ecx, [ebp+hInstance]
.text:00003536                 mov     [ebp+WndClass.hInstance], ecx
.text:00003539                 mov     esi, esp
.text:0000353B                 push    offset IconName ; lpIconName
.text:00003540                 mov     edx, [ebp+hInstance]
.text:00003543                 push    edx             ; hInstance
.text:00003544                 call    dword ptr ds:__imp__LoadIconA@8 ; LoadIconA(x,x)
.text:0000354A                 cmp     esi, esp
.text:0000354C                 call    __RTC_CheckEsp
.text:00003551                 mov     [ebp+WndClass.hIcon], eax
.text:00003554                 mov     esi, esp
.text:00003556                 push    offset CursorName ; lpCursorName
.text:0000355B                 push    0               ; hInstance
.text:0000355D                 call    dword ptr ds:__imp__LoadCursorA@8 ; LoadCursorA(x,x)
.text:00003563                 cmp     esi, esp
.text:00003565                 call    __RTC_CheckEsp
.text:0000356A                 mov     [ebp+WndClass.hCursor], eax
.text:0000356D                 mov     [ebp+WndClass.hbrBackground], 0
.text:00003574                 mov     [ebp+WndClass.lpszMenuName], 0
.text:0000357B                 mov     eax, dword ptr ds:_appname
.text:00003580                 mov     [ebp+WndClass.lpszClassName], eax
.text:00003583                 mov     esi, esp
.text:00003585                 lea     ecx, [ebp+WndClass]
.text:00003588                 push    ecx             ; lpWndClass
.text:00003589                 call    dword ptr ds:__imp__RegisterClassA@4 ; RegisterClassA(x)
.text:0000358F                 cmp     esi, esp
.text:00003591                 call    __RTC_CheckEsp
.text:00003596
.text:00003596 loc_3596:                               ; CODE XREF: WinMain(x,x,x,x)+9ADj
.text:00003596                 push    0B10h           ; Size
.text:0000359B                 push    0               ; Val
.text:0000359D                 push    offset _ucsdata ; Dst
.text:000035A2                 call    _memset_0
.text:000035A7                 add     esp, 0Ch
.text:000035AA                 call    _conf_cache_data
.text:000035AF                 call    _conftopalette
.text:000035B4                 mov     ds:_font_width, 0Ah
.text:000035BE                 mov     ds:_font_height, 14h
.text:000035C8                 mov     ds:_extra_width, 19h
.text:000035D2                 mov     ds:_extra_height, 1Ch
.text:000035DC                 push    6Eh ; 'n'
.text:000035DE                 mov     edx, dword ptr ds:_conf
.text:000035E4                 push    edx
.text:000035E5                 call    _conf_get_int
.text:000035EA                 add     esp, 8
.text:000035ED                 imul    eax, ds:_font_width
.text:000035F4                 add     eax, ds:_extra_width
.text:000035FA                 mov     [ebp+nWidth], eax
.text:000035FD                 push    6Fh ; 'o'
.text:000035FF                 mov     eax, dword ptr ds:_conf
.text:00003604                 push    eax
.text:00003605                 call    _conf_get_int
.text:0000360A                 add     esp, 8
.text:0000360D                 imul    eax, ds:_font_height
.text:00003614                 add     eax, ds:_extra_height
.text:0000361A                 mov     [ebp+nHeight], eax
.text:0000361D                 lea     ecx, [ebp+var_104]
.text:00003623                 push    ecx
.text:00003624                 call    _get_fullscreen_rect
.text:00003629                 add     esp, 4
.text:0000362C                 mov     edx, [ebp+var_FC]
.text:00003632                 sub     edx, [ebp+var_104]
.text:00003638                 cmp     [ebp+nWidth], edx
.text:0000363B                 jle     short loc_364C
.text:0000363D                 mov     eax, [ebp+var_FC]
.text:00003643                 sub     eax, [ebp+var_104]
.text:00003649                 mov     [ebp+nWidth], eax
.text:0000364C
.text:0000364C loc_364C:                               ; CODE XREF: WinMain(x,x,x,x)+AD3j
.text:0000364C                 mov     ecx, [ebp+var_F8]
.text:00003652                 sub     ecx, [ebp+var_100]
.text:00003658                 cmp     [ebp+nHeight], ecx
.text:0000365B                 jle     short loc_366C
.text:0000365D                 mov     edx, [ebp+var_F8]
.text:00003663                 sub     edx, [ebp+var_100]
.text:00003669                 mov     [ebp+nHeight], edx
.text:0000366C
.text:0000366C loc_366C:                               ; CODE XREF: WinMain(x,x,x,x)+AF3j
.text:0000366C                 mov     [ebp+dwStyle], 0EF0000h
.text:00003676                 mov     [ebp+dwExStyle], 0
.text:00003680                 push    68h ; 'h'
.text:00003682                 mov     eax, dword ptr ds:_conf
.text:00003687                 push    eax
.text:00003688                 call    _conf_get_int
.text:0000368D                 add     esp, 8
.text:00003690                 test    eax, eax
.text:00003692                 jnz     short loc_36A6
.text:00003694                 mov     ecx, [ebp+dwStyle]
.text:0000369A                 and     ecx, 0FFDFFFFFh
.text:000036A0                 mov     [ebp+dwStyle], ecx
.text:000036A6
.text:000036A6 loc_36A6:                               ; CODE XREF: WinMain(x,x,x,x)+B2Aj
.text:000036A6                 push    6Ah ; 'j'
.text:000036A8                 mov     edx, dword ptr ds:_conf
.text:000036AE                 push    edx
.text:000036AF                 call    _conf_get_int
.text:000036B4                 add     esp, 8
.text:000036B7                 cmp     eax, 1
.text:000036BA                 jnz     short loc_36CD
.text:000036BC                 mov     eax, [ebp+dwStyle]
.text:000036C2                 and     eax, 0FFFAFFFFh
.text:000036C7                 mov     [ebp+dwStyle], eax
.text:000036CD
.text:000036CD loc_36CD:                               ; CODE XREF: WinMain(x,x,x,x)+B52j
.text:000036CD                 push    53h ; 'S'
.text:000036CF                 mov     ecx, dword ptr ds:_conf
.text:000036D5                 push    ecx
.text:000036D6                 call    _conf_get_int
.text:000036DB                 add     esp, 8
.text:000036DE                 test    eax, eax
.text:000036E0                 jz      short loc_36F1
.text:000036E2                 mov     edx, [ebp+dwExStyle]
.text:000036E8                 or      edx, 8
.text:000036EB                 mov     [ebp+dwExStyle], edx
.text:000036F1
.text:000036F1 loc_36F1:                               ; CODE XREF: WinMain(x,x,x,x)+B78j
.text:000036F1                 push    79h ; 'y'
.text:000036F3                 mov     eax, dword ptr ds:_conf
.text:000036F8                 push    eax
.text:000036F9                 call    _conf_get_int
.text:000036FE                 add     esp, 8
.text:00003701                 test    eax, eax
.text:00003703                 jz      short loc_3717
.text:00003705                 mov     ecx, [ebp+dwExStyle]
.text:0000370B                 or      ecx, 200h
.text:00003711                 mov     [ebp+dwExStyle], ecx
.text:00003717
.text:00003717 loc_3717:                               ; CODE XREF: WinMain(x,x,x,x)+B9Bj
.text:00003717                 mov     esi, esp
.text:00003719                 push    0               ; lpParam
.text:0000371B                 mov     edx, [ebp+hInstance]
.text:0000371E                 push    edx             ; hInstance
.text:0000371F                 push    0               ; hMenu
.text:00003721                 push    0               ; hWndParent
.text:00003723                 mov     eax, [ebp+nHeight]
.text:00003726                 push    eax             ; nHeight
.text:00003727                 mov     ecx, [ebp+nWidth]
.text:0000372A                 push    ecx             ; nWidth
.text:0000372B                 push    80000000h       ; Y
.text:00003730                 push    80000000h       ; X
.text:00003735                 mov     edx, [ebp+dwStyle]
.text:0000373B                 push    edx             ; dwStyle
.text:0000373C                 mov     eax, dword ptr ds:_appname
.text:00003741                 push    eax             ; lpWindowName
.text:00003742                 mov     ecx, dword ptr ds:_appname
.text:00003748                 push    ecx             ; lpClassName
.text:00003749                 mov     edx, [ebp+dwExStyle]
.text:0000374F                 push    edx             ; dwExStyle
.text:00003750                 call    dword ptr ds:__imp__CreateWindowExA@48 ; CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)
.text:00003756                 cmp     esi, esp
.text:00003758                 call    __RTC_CheckEsp
.text:0000375D                 mov     dword ptr ds:_hwnd, eax
.text:00003762                 push    0
.text:00003764                 push    0
.text:00003766                 call    _init_fonts
.text:0000376B                 add     esp, 8
.text:0000376E                 push    0
.text:00003770                 push    offset _ucsdata
.text:00003775                 mov     eax, dword ptr ds:_conf
.text:0000377A                 push    eax
.text:0000377B                 call    _term_init
.text:00003780                 add     esp, 0Ch
.text:00003783                 mov     dword ptr ds:_term, eax
.text:00003788                 mov     ecx, dword ptr ds:_conf
.text:0000378E                 push    ecx
.text:0000378F                 push    0
.text:00003791                 call    _log_init
.text:00003796                 add     esp, 8
.text:00003799                 mov     dword ptr ds:_logctx, eax
.text:0000379E                 mov     edx, dword ptr ds:_logctx
.text:000037A4                 push    edx
.text:000037A5                 mov     eax, dword ptr ds:_term
.text:000037AA                 push    eax
.text:000037AB                 call    _term_provide_logctx
.text:000037B0                 add     esp, 8
.text:000037B3                 push    5Bh ; '['
.text:000037B5                 mov     ecx, dword ptr ds:_conf
.text:000037BB                 push    ecx
.text:000037BC                 call    _conf_get_int
.text:000037C1                 add     esp, 8
.text:000037C4                 push    eax
.text:000037C5                 push    6Eh ; 'n'
.text:000037C7                 mov     edx, dword ptr ds:_conf
.text:000037CD                 push    edx
.text:000037CE                 call    _conf_get_int
.text:000037D3                 add     esp, 8
.text:000037D6                 push    eax
.text:000037D7                 push    6Fh ; 'o'
.text:000037D9                 mov     eax, dword ptr ds:_conf
.text:000037DE                 push    eax
.text:000037DF                 call    _conf_get_int
.text:000037E4                 add     esp, 8
.text:000037E7                 push    eax
.text:000037E8                 mov     ecx, dword ptr ds:_term
.text:000037EE                 push    ecx
.text:000037EF                 call    _term_size
.text:000037F4                 add     esp, 10h
.text:000037F7                 mov     esi, esp
.text:000037F9                 lea     edx, [ebp+Rect]
.text:000037FF                 push    edx             ; lpRect
.text:00003800                 mov     eax, dword ptr ds:_hwnd
.text:00003805                 push    eax             ; hWnd
.text:00003806                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:0000380C                 cmp     esi, esp
.text:0000380E                 call    __RTC_CheckEsp
.text:00003813                 mov     esi, esp
.text:00003815                 lea     ecx, [ebp+var_124]
.text:0000381B                 push    ecx             ; lpRect
.text:0000381C                 mov     edx, dword ptr ds:_hwnd
.text:00003822                 push    edx             ; hWnd
.text:00003823                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text:00003829                 cmp     esi, esp
.text:0000382B                 call    __RTC_CheckEsp
.text:00003830                 push    7Ah ; 'z'
.text:00003832                 mov     eax, dword ptr ds:_conf
.text:00003837                 push    eax
.text:00003838                 call    _conf_get_int
.text:0000383D                 add     esp, 8
.text:00003840                 mov     ds:_offset_height, eax
.text:00003845                 mov     ecx, ds:_offset_height
.text:0000384B                 mov     ds:_offset_width, ecx
.text:00003851                 mov     edx, [ebp+Rect.right]
.text:00003857                 sub     edx, [ebp+Rect.left]
.text:0000385D                 sub     edx, [ebp+var_124.right]
.text:00003863                 add     edx, [ebp+var_124.left]
.text:00003869                 mov     eax, ds:_offset_width
.text:0000386E                 lea     ecx, [edx+eax*2]
.text:00003871                 mov     ds:_extra_width, ecx
.text:00003877                 mov     edx, [ebp+Rect.bottom]
.text:0000387D                 sub     edx, [ebp+Rect.top]
.text:00003883                 sub     edx, [ebp+var_124.bottom]
.text:00003889                 add     edx, [ebp+var_124.top]
.text:0000388F                 mov     eax, ds:_offset_height
.text:00003894                 lea     ecx, [edx+eax*2]
.text:00003897                 mov     ds:_extra_height, ecx
.text:0000389D                 mov     edx, dword ptr ds:_term
.text:000038A3                 mov     eax, ds:_font_width
.text:000038A8                 imul    eax, [edx+12Ch]
.text:000038AF                 add     eax, ds:_extra_width
.text:000038B5                 mov     [ebp+nWidth], eax
.text:000038B8                 mov     ecx, dword ptr ds:_term
.text:000038BE                 mov     edx, ds:_font_height
.text:000038C4                 imul    edx, [ecx+128h]
.text:000038CB                 add     edx, ds:_extra_height
.text:000038D1                 mov     [ebp+nHeight], edx
.text:000038D4                 mov     esi, esp
.text:000038D6                 push    0Eh             ; uFlags
.text:000038D8                 mov     eax, [ebp+nHeight]
.text:000038DB                 push    eax             ; cy
.text:000038DC                 mov     ecx, [ebp+nWidth]
.text:000038DF                 push    ecx             ; cx
.text:000038E0                 push    0               ; Y
.text:000038E2                 push    0               ; X
.text:000038E4                 push    0               ; hWndInsertAfter
.text:000038E6                 mov     edx, dword ptr ds:_hwnd
.text:000038EC                 push    edx             ; hWnd
.text:000038ED                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:000038F3                 cmp     esi, esp
.text:000038F5                 call    __RTC_CheckEsp
.text:000038FA                 mov     eax, ds:_font_width
.text:000038FF                 add     eax, 0Fh
.text:00003902                 cdq
.text:00003903                 and     edx, 0Fh
.text:00003906                 add     eax, edx
.text:00003908                 sar     eax, 4
.text:0000390B                 shl     eax, 1
.text:0000390D                 imul    eax, ds:_font_height
.text:00003914                 mov     [ebp+Size], eax
.text:0000391A                 push    1
.text:0000391C                 mov     eax, [ebp+Size]
.text:00003922                 push    eax
.text:00003923                 call    _safemalloc
.text:00003928                 add     esp, 8
.text:0000392B                 mov     [ebp+Dst], eax
.text:00003931                 mov     ecx, [ebp+Size]
.text:00003937                 push    ecx             ; Size
.text:00003938                 push    0               ; Val
.text:0000393A                 mov     edx, [ebp+Dst]
.text:00003940                 push    edx             ; Dst
.text:00003941                 call    _memset_0
.text:00003946                 add     esp, 0Ch
.text:00003949                 mov     esi, esp
.text:0000394B                 mov     eax, [ebp+Dst]
.text:00003951                 push    eax             ; lpBits
.text:00003952                 push    1               ; nBitCount
.text:00003954                 push    1               ; nPlanes
.text:00003956                 mov     ecx, ds:_font_height
.text:0000395C                 push    ecx             ; nHeight
.text:0000395D                 mov     edx, ds:_font_width
.text:00003963                 push    edx             ; nWidth
.text:00003964                 call    dword ptr ds:__imp__CreateBitmap@20 ; CreateBitmap(x,x,x,x,x)
.text:0000396A                 cmp     esi, esp
.text:0000396C                 call    __RTC_CheckEsp
.text:00003971                 mov     ds:_caretbm, eax
.text:00003976                 mov     eax, [ebp+Dst]
.text:0000397C                 push    eax
.text:0000397D                 call    _safefree
.text:00003982                 add     esp, 4
.text:00003985                 mov     esi, esp
.text:00003987                 mov     ecx, ds:_font_height
.text:0000398D                 push    ecx             ; nHeight
.text:0000398E                 mov     edx, ds:_font_width
.text:00003994                 push    edx             ; nWidth
.text:00003995                 mov     eax, ds:_caretbm
.text:0000399A                 push    eax             ; hBitmap
.text:0000399B                 mov     ecx, dword ptr ds:_hwnd
.text:000039A1                 push    ecx             ; hWnd
.text:000039A2                 call    dword ptr ds:__imp__CreateCaret@16 ; CreateCaret(x,x,x,x)
.text:000039A8                 cmp     esi, esp
.text:000039AA                 call    __RTC_CheckEsp
.text:000039AF                 mov     [ebp+var_168.cbSize], 1Ch
.text:000039B9                 mov     [ebp+var_168.fMask], 1Fh
.text:000039C3                 mov     [ebp+var_168.nMin], 0
.text:000039CD                 mov     edx, dword ptr ds:_term
.text:000039D3                 mov     eax, [edx+128h]
.text:000039D9                 sub     eax, 1
.text:000039DC                 mov     [ebp+var_168.nMax], eax
.text:000039E2                 mov     ecx, dword ptr ds:_term
.text:000039E8                 mov     edx, [ecx+128h]
.text:000039EE                 mov     [ebp+var_168.nPage], edx
.text:000039F4                 mov     [ebp+var_168.nPos], 0
.text:000039FE                 mov     esi, esp
.text:00003A00                 push    0               ; redraw
.text:00003A02                 lea     eax, [ebp+var_168]
.text:00003A08                 push    eax             ; lpsi
.text:00003A09                 push    1               ; nBar
.text:00003A0B                 mov     ecx, dword ptr ds:_hwnd
.text:00003A11                 push    ecx             ; hwnd
.text:00003A12                 call    dword ptr ds:__imp__SetScrollInfo@16 ; SetScrollInfo(x,x,x,x)
.text:00003A18                 cmp     esi, esp
.text:00003A1A                 call    __RTC_CheckEsp
.text:00003A1F                 mov     ds:_lastact, 0
.text:00003A29                 mov     ds:_lastbtn, 0
.text:00003A33                 mov     esi, esp
.text:00003A35                 call    dword ptr ds:__imp__GetDoubleClickTime@0 ; GetDoubleClickTime()
.text:00003A3B                 cmp     esi, esp
.text:00003A3D                 call    __RTC_CheckEsp
.text:00003A42                 mov     ds:_dbltime, eax
.text:00003A47                 mov     esi, esp
.text:00003A49                 push    0               ; bRevert
.text:00003A4B                 mov     edx, dword ptr ds:_hwnd
.text:00003A51                 push    edx             ; hWnd
.text:00003A52                 call    dword ptr ds:__imp__GetSystemMenu@8 ; GetSystemMenu(x,x)
.text:00003A58                 cmp     esi, esp
.text:00003A5A                 call    __RTC_CheckEsp
.text:00003A5F                 mov     ds:_popup_menus, eax
.text:00003A64                 mov     esi, esp
.text:00003A66                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text:00003A6C                 cmp     esi, esp
.text:00003A6E                 call    __RTC_CheckEsp
.text:00003A73                 mov     ds:hMenu, eax
.text:00003A78                 mov     esi, esp
.text:00003A7A                 push    offset $SG89181 ; "&Paste"
.text:00003A7F                 push    190h            ; uIDNewItem
.text:00003A84                 push    0               ; uFlags
.text:00003A86                 mov     eax, ds:hMenu
.text:00003A8B                 push    eax             ; hMenu
.text:00003A8C                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003A92                 cmp     esi, esp
.text:00003A94                 call    __RTC_CheckEsp
.text:00003A99                 mov     esi, esp
.text:00003A9B                 call    dword ptr ds:__imp__CreateMenu@0 ; CreateMenu()
.text:00003AA1                 cmp     esi, esp
.text:00003AA3                 call    __RTC_CheckEsp
.text:00003AA8                 mov     ds:_savedsess_menu, eax
.text:00003AAD                 push    1
.text:00003AAF                 push    offset _sesslist
.text:00003AB4                 call    _get_sesslist
.text:00003AB9                 add     esp, 8
.text:00003ABC                 call    _update_savedsess_menu
.text:00003AC1                 mov     [ebp+var_174], 0
.text:00003ACB                 jmp     short loc_3ADC
.text:00003ACD ; ---------------------------------------------------------------------------
.text:00003ACD
.text:00003ACD loc_3ACD:                               ; CODE XREF: WinMain(x,x,x,x)+11E1j
.text:00003ACD                 mov     ecx, [ebp+var_174]
.text:00003AD3                 add     ecx, 1
.text:00003AD6                 mov     [ebp+var_174], ecx
.text:00003ADC
.text:00003ADC loc_3ADC:                               ; CODE XREF: WinMain(x,x,x,x)+F63j
.text:00003ADC                 cmp     [ebp+var_174], 2
.text:00003AE3                 jnb     loc_3D4E
.text:00003AE9                 mov     edx, [ebp+var_174]
.text:00003AEF                 mov     eax, ds:_popup_menus[edx*4]
.text:00003AF6                 mov     [ebp+hMenu], eax
.text:00003AFC                 mov     esi, esp
.text:00003AFE                 push    0               ; lpNewItem
.text:00003B00                 push    0               ; uIDNewItem
.text:00003B02                 push    800h            ; uFlags
.text:00003B07                 mov     ecx, [ebp+hMenu]
.text:00003B0D                 push    ecx             ; hMenu
.text:00003B0E                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003B14                 cmp     esi, esp
.text:00003B16                 call    __RTC_CheckEsp
.text:00003B1B                 mov     esi, esp
.text:00003B1D                 push    offset $SG89185 ; "&Event Log"
.text:00003B22                 push    10h             ; uIDNewItem
.text:00003B24                 push    0               ; uFlags
.text:00003B26                 mov     edx, [ebp+hMenu]
.text:00003B2C                 push    edx             ; hMenu
.text:00003B2D                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003B33                 cmp     esi, esp
.text:00003B35                 call    __RTC_CheckEsp
.text:00003B3A                 mov     esi, esp
.text:00003B3C                 push    0               ; lpNewItem
.text:00003B3E                 push    0               ; uIDNewItem
.text:00003B40                 push    800h            ; uFlags
.text:00003B45                 mov     eax, [ebp+hMenu]
.text:00003B4B                 push    eax             ; hMenu
.text:00003B4C                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003B52                 cmp     esi, esp
.text:00003B54                 call    __RTC_CheckEsp
.text:00003B59                 mov     esi, esp
.text:00003B5B                 push    offset $SG89186 ; "Ne&w Session..."
.text:00003B60                 push    20h ; ' '       ; uIDNewItem
.text:00003B62                 push    0               ; uFlags
.text:00003B64                 mov     ecx, [ebp+hMenu]
.text:00003B6A                 push    ecx             ; hMenu
.text:00003B6B                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003B71                 cmp     esi, esp
.text:00003B73                 call    __RTC_CheckEsp
.text:00003B78                 mov     esi, esp
.text:00003B7A                 push    offset $SG89187 ; "&Duplicate Session"
.text:00003B7F                 push    30h ; '0'       ; uIDNewItem
.text:00003B81                 push    0               ; uFlags
.text:00003B83                 mov     edx, [ebp+hMenu]
.text:00003B89                 push    edx             ; hMenu
.text:00003B8A                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003B90                 cmp     esi, esp
.text:00003B92                 call    __RTC_CheckEsp
.text:00003B97                 mov     esi, esp
.text:00003B99                 push    offset $SG89189 ; "Sa&ved Sessions"
.text:00003B9E                 mov     eax, ds:_savedsess_menu
.text:00003BA3                 push    eax             ; uIDNewItem
.text:00003BA4                 push    10h             ; uFlags
.text:00003BA6                 mov     ecx, [ebp+hMenu]
.text:00003BAC                 push    ecx             ; hMenu
.text:00003BAD                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003BB3                 cmp     esi, esp
.text:00003BB5                 call    __RTC_CheckEsp
.text:00003BBA                 mov     esi, esp
.text:00003BBC                 push    offset $SG89190 ; "Chan&ge Settings..."
.text:00003BC1                 push    50h ; 'P'       ; uIDNewItem
.text:00003BC3                 push    0               ; uFlags
.text:00003BC5                 mov     edx, [ebp+hMenu]
.text:00003BCB                 push    edx             ; hMenu
.text:00003BCC                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003BD2                 cmp     esi, esp
.text:00003BD4                 call    __RTC_CheckEsp
.text:00003BD9                 mov     esi, esp
.text:00003BDB                 push    0               ; lpNewItem
.text:00003BDD                 push    0               ; uIDNewItem
.text:00003BDF                 push    800h            ; uFlags
.text:00003BE4                 mov     eax, [ebp+hMenu]
.text:00003BEA                 push    eax             ; hMenu
.text:00003BEB                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003BF1                 cmp     esi, esp
.text:00003BF3                 call    __RTC_CheckEsp
.text:00003BF8                 mov     esi, esp
.text:00003BFA                 push    offset $SG89191 ; "C&opy All to Clipboard"
.text:00003BFF                 push    170h            ; uIDNewItem
.text:00003C04                 push    0               ; uFlags
.text:00003C06                 mov     ecx, [ebp+hMenu]
.text:00003C0C                 push    ecx             ; hMenu
.text:00003C0D                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003C13                 cmp     esi, esp
.text:00003C15                 call    __RTC_CheckEsp
.text:00003C1A                 mov     esi, esp
.text:00003C1C                 push    offset $SG89192 ; "C&lear Scrollback"
.text:00003C21                 push    60h ; '`'       ; uIDNewItem
.text:00003C23                 push    0               ; uFlags
.text:00003C25                 mov     edx, [ebp+hMenu]
.text:00003C2B                 push    edx             ; hMenu
.text:00003C2C                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003C32                 cmp     esi, esp
.text:00003C34                 call    __RTC_CheckEsp
.text:00003C39                 mov     esi, esp
.text:00003C3B                 push    offset $SG89193 ; "Rese&t Terminal"
.text:00003C40                 push    70h ; 'p'       ; uIDNewItem
.text:00003C42                 push    0               ; uFlags
.text:00003C44                 mov     eax, [ebp+hMenu]
.text:00003C4A                 push    eax             ; hMenu
.text:00003C4B                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003C51                 cmp     esi, esp
.text:00003C53                 call    __RTC_CheckEsp
.text:00003C58                 mov     esi, esp
.text:00003C5A                 push    0               ; lpNewItem
.text:00003C5C                 push    0               ; uIDNewItem
.text:00003C5E                 push    800h            ; uFlags
.text:00003C63                 mov     ecx, [ebp+hMenu]
.text:00003C69                 push    ecx             ; hMenu
.text:00003C6A                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003C70                 cmp     esi, esp
.text:00003C72                 call    __RTC_CheckEsp
.text:00003C77                 mov     esi, esp
.text:00003C79                 push    offset $SG89194 ; "&Full Screen"
.text:00003C7E                 push    180h            ; uIDNewItem
.text:00003C83                 push    6Ah ; 'j'
.text:00003C85                 mov     edx, dword ptr ds:_conf
.text:00003C8B                 push    edx
.text:00003C8C                 call    _conf_get_int
.text:00003C91                 add     esp, 8
.text:00003C94                 sub     eax, 1
.text:00003C97                 neg     eax
.text:00003C99                 sbb     eax, eax
.text:00003C9B                 add     eax, 1
.text:00003C9E                 push    eax             ; uFlags
.text:00003C9F                 mov     eax, [ebp+hMenu]
.text:00003CA5                 push    eax             ; hMenu
.text:00003CA6                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003CAC                 cmp     esi, esp
.text:00003CAE                 call    __RTC_CheckEsp
.text:00003CB3                 mov     esi, esp
.text:00003CB5                 push    0               ; lpNewItem
.text:00003CB7                 push    0               ; uIDNewItem
.text:00003CB9                 push    800h            ; uFlags
.text:00003CBE                 mov     ecx, [ebp+hMenu]
.text:00003CC4                 push    ecx             ; hMenu
.text:00003CC5                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003CCB                 cmp     esi, esp
.text:00003CCD                 call    __RTC_CheckEsp
.text:00003CD2                 call    _has_help
.text:00003CD7                 test    eax, eax
.text:00003CD9                 jz      short loc_3CFD
.text:00003CDB                 mov     esi, esp
.text:00003CDD                 push    offset $SG89196 ; "&Help"
.text:00003CE2                 push    140h            ; uIDNewItem
.text:00003CE7                 push    0               ; uFlags
.text:00003CE9                 mov     edx, [ebp+hMenu]
.text:00003CEF                 push    edx             ; hMenu
.text:00003CF0                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003CF6                 cmp     esi, esp
.text:00003CF8                 call    __RTC_CheckEsp
.text:00003CFD
.text:00003CFD loc_3CFD:                               ; CODE XREF: WinMain(x,x,x,x)+1171j
.text:00003CFD                 mov     eax, dword ptr ds:_appname
.text:00003D02                 push    eax
.text:00003D03                 push    offset $SG89197 ; "&About %s"
.text:00003D08                 call    _dupprintf
.text:00003D0D                 add     esp, 8
.text:00003D10                 mov     [ebp+lpNewItem], eax
.text:00003D16                 mov     esi, esp
.text:00003D18                 mov     ecx, [ebp+lpNewItem]
.text:00003D1E                 push    ecx             ; lpNewItem
.text:00003D1F                 push    150h            ; uIDNewItem
.text:00003D24                 push    0               ; uFlags
.text:00003D26                 mov     edx, [ebp+hMenu]
.text:00003D2C                 push    edx             ; hMenu
.text:00003D2D                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:00003D33                 cmp     esi, esp
.text:00003D35                 call    __RTC_CheckEsp
.text:00003D3A                 mov     eax, [ebp+lpNewItem]
.text:00003D40                 push    eax
.text:00003D41                 call    _safefree
.text:00003D46                 add     esp, 4
.text:00003D49                 jmp     loc_3ACD
.text:00003D4E ; ---------------------------------------------------------------------------
.text:00003D4E
.text:00003D4E loc_3D4E:                               ; CODE XREF: WinMain(x,x,x,x)+F7Bj
.text:00003D4E                 call    _start_backend
.text:00003D53                 mov     esi, esp
.text:00003D55                 push    0               ; idThread
.text:00003D57                 call    dword ptr ds:__imp__GetKeyboardLayout@4 ; GetKeyboardLayout(x)
.text:00003D5D                 cmp     esi, esp
.text:00003D5F                 call    __RTC_CheckEsp
.text:00003D64                 push    eax
.text:00003D65                 call    _set_input_locale
.text:00003D6A                 add     esp, 4
.text:00003D6D                 mov     esi, esp
.text:00003D6F                 mov     ecx, [ebp+nShowCmd]
.text:00003D72                 push    ecx             ; nCmdShow
.text:00003D73                 mov     edx, dword ptr ds:_hwnd
.text:00003D79                 push    edx             ; hWnd
.text:00003D7A                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:00003D80                 cmp     esi, esp
.text:00003D82                 call    __RTC_CheckEsp
.text:00003D87                 mov     esi, esp
.text:00003D89                 mov     eax, dword ptr ds:_hwnd
.text:00003D8E                 push    eax             ; hWnd
.text:00003D8F                 call    dword ptr ds:__imp__SetForegroundWindow@4 ; SetForegroundWindow(x)
.text:00003D95                 cmp     esi, esp
.text:00003D97                 call    __RTC_CheckEsp
.text:00003D9C                 mov     ds:_pal, 0
.text:00003DA6                 mov     ds:_logpal, 0
.text:00003DB0                 call    _init_palette
.text:00003DB5                 mov     esi, esp
.text:00003DB7                 call    dword ptr ds:__imp__GetForegroundWindow@0 ; GetForegroundWindow()
.text:00003DBD                 cmp     esi, esp
.text:00003DBF                 call    __RTC_CheckEsp
.text:00003DC4                 xor     ecx, ecx
.text:00003DC6                 cmp     eax, dword ptr ds:_hwnd
.text:00003DCC                 setz    cl
.text:00003DCF                 push    ecx
.text:00003DD0                 mov     edx, dword ptr ds:_term
.text:00003DD6                 push    edx
.text:00003DD7                 call    _term_set_focus
.text:00003DDC                 add     esp, 8
.text:00003DDF                 mov     esi, esp
.text:00003DE1                 mov     eax, dword ptr ds:_hwnd
.text:00003DE6                 push    eax             ; hWnd
.text:00003DE7                 call    dword ptr ds:__imp__UpdateWindow@4 ; UpdateWindow(x)
.text:00003DED                 cmp     esi, esp
.text:00003DEF                 call    __RTC_CheckEsp
.text:00003DF4
.text:00003DF4 loc_3DF4:                               ; CODE XREF: WinMain(x,x,x,x)+1404j
.text:00003DF4                 mov     ecx, 1
.text:00003DF9                 test    ecx, ecx
.text:00003DFB                 jz      $finished$89220
.text:00003E01                 call    _toplevel_callback_pending
.text:00003E06                 test    eax, eax
.text:00003E08                 jnz     short loc_3E29
.text:00003E0A                 mov     esi, esp
.text:00003E0C                 push    0               ; wRemoveMsg
.text:00003E0E                 push    0               ; wMsgFilterMax
.text:00003E10                 push    0               ; wMsgFilterMin
.text:00003E12                 push    0               ; hWnd
.text:00003E14                 lea     edx, [ebp+Msg]
.text:00003E17                 push    edx             ; lpMsg
.text:00003E18                 call    dword ptr ds:__imp__PeekMessageA@20 ; PeekMessageA(x,x,x,x,x)
.text:00003E1E                 cmp     esi, esp
.text:00003E20                 call    __RTC_CheckEsp
.text:00003E25                 test    eax, eax
.text:00003E27                 jz      short loc_3E35
.text:00003E29
.text:00003E29 loc_3E29:                               ; CODE XREF: WinMain(x,x,x,x)+12A0j
.text:00003E29                 mov     [ebp+dwMilliseconds], 0
.text:00003E33                 jmp     short loc_3E69
.text:00003E35 ; ---------------------------------------------------------------------------
.text:00003E35
.text:00003E35 loc_3E35:                               ; CODE XREF: WinMain(x,x,x,x)+12BFj
.text:00003E35                 mov     [ebp+dwMilliseconds], 0FFFFFFFFh
.text:00003E3F                 mov     esi, esp
.text:00003E41                 call    dword ptr ds:__imp__GetForegroundWindow@0 ; GetForegroundWindow()
.text:00003E47                 cmp     esi, esp
.text:00003E49                 call    __RTC_CheckEsp
.text:00003E4E                 xor     ecx, ecx
.text:00003E50                 cmp     eax, dword ptr ds:_hwnd
.text:00003E56                 setz    cl
.text:00003E59                 push    ecx
.text:00003E5A                 mov     edx, dword ptr ds:_term
.text:00003E60                 push    edx
.text:00003E61                 call    _term_set_focus
.text:00003E66                 add     esp, 8
.text:00003E69
.text:00003E69 loc_3E69:                               ; CODE XREF: WinMain(x,x,x,x)+12CBj
.text:00003E69                 lea     eax, [ebp+nCount]
.text:00003E6F                 push    eax
.text:00003E70                 call    _handle_get_events
.text:00003E75                 add     esp, 4
.text:00003E78                 mov     [ebp+pHandles], eax
.text:00003E7E                 mov     esi, esp
.text:00003E80                 push    4FFh            ; dwWakeMask
.text:00003E85                 mov     ecx, [ebp+dwMilliseconds]
.text:00003E8B                 push    ecx             ; dwMilliseconds
.text:00003E8C                 push    0               ; fWaitAll
.text:00003E8E                 mov     edx, [ebp+pHandles]
.text:00003E94                 push    edx             ; pHandles
.text:00003E95                 mov     eax, [ebp+nCount]
.text:00003E9B                 push    eax             ; nCount
.text:00003E9C                 call    dword ptr ds:__imp__MsgWaitForMultipleObjects@20 ; MsgWaitForMultipleObjects(x,x,x,x,x)
.text:00003EA2                 cmp     esi, esp
.text:00003EA4                 call    __RTC_CheckEsp
.text:00003EA9                 mov     [ebp+var_18C], eax
.text:00003EAF                 mov     ecx, [ebp+var_18C]
.text:00003EB5                 cmp     ecx, [ebp+nCount]
.text:00003EBB                 jnb     short loc_3EE6
.text:00003EBD                 mov     edx, [ebp+var_18C]
.text:00003EC3                 mov     eax, [ebp+pHandles]
.text:00003EC9                 mov     ecx, [eax+edx*4]
.text:00003ECC                 push    ecx
.text:00003ECD                 call    _handle_got_event
.text:00003ED2                 add     esp, 4
.text:00003ED5                 mov     edx, [ebp+pHandles]
.text:00003EDB                 push    edx
.text:00003EDC                 call    _safefree
.text:00003EE1                 add     esp, 4
.text:00003EE4                 jmp     short loc_3EF5
.text:00003EE6 ; ---------------------------------------------------------------------------
.text:00003EE6
.text:00003EE6 loc_3EE6:                               ; CODE XREF: WinMain(x,x,x,x)+1353j
.text:00003EE6                 mov     eax, [ebp+pHandles]
.text:00003EEC                 push    eax
.text:00003EED                 call    _safefree
.text:00003EF2                 add     esp, 4
.text:00003EF5
.text:00003EF5 loc_3EF5:                               ; CODE XREF: WinMain(x,x,x,x)+137Cj
.text:00003EF5                 mov     esi, esp
.text:00003EF7                 push    1               ; wRemoveMsg
.text:00003EF9                 push    0               ; wMsgFilterMax
.text:00003EFB                 push    0               ; wMsgFilterMin
.text:00003EFD                 push    0               ; hWnd
.text:00003EFF                 lea     ecx, [ebp+Msg]
.text:00003F02                 push    ecx             ; lpMsg
.text:00003F03                 call    dword ptr ds:__imp__PeekMessageA@20 ; PeekMessageA(x,x,x,x,x)
.text:00003F09                 cmp     esi, esp
.text:00003F0B                 call    __RTC_CheckEsp
.text:00003F10                 test    eax, eax
.text:00003F12                 jz      short loc_3F67
.text:00003F14                 cmp     [ebp+Msg.message], 12h
.text:00003F18                 jnz     short loc_3F1C
.text:00003F1A                 jmp     short $finished$89220
.text:00003F1C ; ---------------------------------------------------------------------------
.text:00003F1C
.text:00003F1C loc_3F1C:                               ; CODE XREF: WinMain(x,x,x,x)+13B0j
.text:00003F1C                 mov     esi, esp
.text:00003F1E                 mov     edx, dword ptr ds:_logbox
.text:00003F24                 push    edx             ; hWnd
.text:00003F25                 call    dword ptr ds:__imp__IsWindow@4 ; IsWindow(x)
.text:00003F2B                 cmp     esi, esp
.text:00003F2D                 call    __RTC_CheckEsp
.text:00003F32                 test    eax, eax
.text:00003F34                 jz      short loc_3F54
.text:00003F36                 mov     esi, esp
.text:00003F38                 lea     eax, [ebp+Msg]
.text:00003F3B                 push    eax             ; lpMsg
.text:00003F3C                 mov     ecx, dword ptr ds:_logbox
.text:00003F42                 push    ecx             ; hDlg
.text:00003F43                 call    dword ptr ds:__imp__IsDialogMessageA@8 ; IsDialogMessageA(x,x)
.text:00003F49                 cmp     esi, esp
.text:00003F4B                 call    __RTC_CheckEsp
.text:00003F50                 test    eax, eax
.text:00003F52                 jnz     short loc_3F67
.text:00003F54
.text:00003F54 loc_3F54:                               ; CODE XREF: WinMain(x,x,x,x)+13CCj
.text:00003F54                 mov     esi, esp
.text:00003F56                 lea     edx, [ebp+Msg]
.text:00003F59                 push    edx             ; lpMsg
.text:00003F5A                 call    dword ptr ds:__imp__DispatchMessageA@4 ; DispatchMessageA(x)
.text:00003F60                 cmp     esi, esp
.text:00003F62                 call    __RTC_CheckEsp
.text:00003F67
.text:00003F67 loc_3F67:                               ; CODE XREF: WinMain(x,x,x,x)+13AAj
.text:00003F67                                         ; WinMain(x,x,x,x)+13EAj
.text:00003F67                 call    _run_toplevel_callbacks
.text:00003F6C                 jmp     loc_3DF4
.text:00003F71 ; ---------------------------------------------------------------------------
.text:00003F71
.text:00003F71 $finished$89220:                        ; CODE XREF: WinMain(x,x,x,x)+1293j
.text:00003F71                                         ; WinMain(x,x,x,x)+13B2j
.text:00003F71                 mov     eax, [ebp+Msg.wParam]
.text:00003F74                 push    eax             ; Code
.text:00003F75                 call    _cleanup_exit
.text:00003F75 ; ---------------------------------------------------------------------------
.text:00003F7A                 db  83h ; â
.text:00003F7B                 db 0C4h ; -
.text:00003F7C                 db    4
.text:00003F7D                 db  8Bh ; ï
.text:00003F7E                 db  45h ; E
.text:00003F7F                 db 0B4h ; ¦
.text:00003F80 ; ---------------------------------------------------------------------------
.text:00003F80
.text:00003F80 loc_3F80:                               ; CODE XREF: WinMain(x,x,x,x)+A9j
.text:00003F80                                         ; WinMain(x,x,x,x)+15Aj
.text:00003F80                 push    edx
.text:00003F81                 mov     ecx, ebp
.text:00003F83                 push    eax
.text:00003F84                 lea     edx, $LN98
.text:00003F8A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003F8F                 pop     eax
.text:00003F90                 pop     edx
.text:00003F91                 pop     edi
.text:00003F92                 pop     esi
.text:00003F93                 mov     ecx, [ebp+var_4]
.text:00003F96                 xor     ecx, ebp
.text:00003F98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003F9D                 add     esp, 194h
.text:00003FA3                 cmp     ebp, esp
.text:00003FA5                 call    __RTC_CheckEsp
.text:00003FAA                 mov     esp, ebp
.text:00003FAC                 pop     ebp
.text:00003FAD                 retn    10h
.text:00003FAD _WinMain@16     endp
.text:00003FAD
.text:00003FAD ; ---------------------------------------------------------------------------
.text:00003FB0 $LN98           dd 0Bh                  ; DATA XREF: WinMain(x,x,x,x)+141Co
.text:00003FB4                 dd offset $LN97
.text:00003FB8 $LN97           dd 0FFFFFFD0h, 28h      ; DATA XREF: .text:00003FB4o
.text:00003FC0                 dd offset $LN86         ; "wndclass"
.text:00003FC4                 dd 0FFFFFFACh, 1Ch
.text:00003FCC                 dd offset $LN87         ; "msg"
.text:00003FD0                 dd 0FFFFFF78h, 4
.text:00003FD8                 dd offset $LN88         ; "filemap"
.text:00003FDC                 dd 0FFFFFF68h, 4
.text:00003FE4                 dd offset $LN89         ; "cpsize"
.text:00003FE8                 dd 0FFFFFF5Ch, 4
.text:00003FF0                 dd offset $LN90         ; "argc"
.text:00003FF4                 dd 0FFFFFF4Ch, 4
.text:00003FFC                 dd offset $LN91         ; "argv"
.text:00004000                 dd 0FFFFFEFCh, 10h
.text:00004008                 dd offset $LN92         ; "r"
.text:0000400C                 dd 0FFFFFEDCh, 10h
.text:00004014                 dd offset $LN93         ; "cr"
.text:00004018                 dd 0FFFFFEC4h, 10h
.text:00004020                 dd offset $LN94         ; "wr"
.text:00004024                 dd 0FFFFFE98h, 1Ch
.text:0000402C                 dd offset $LN95         ; "si"
.text:00004030                 dd 0FFFFFE7Ch, 4
.text:00004038                 dd offset $LN96         ; "nhandles"
.text:0000403C $LN96           db 'nhandles',0         ; DATA XREF: .text:00004038o
.text:00004045 $LN95           db 'si',0               ; DATA XREF: .text:0000402Co
.text:00004048 $LN94           db 'wr',0               ; DATA XREF: .text:00004020o
.text:0000404B $LN93           db 'cr',0               ; DATA XREF: .text:00004014o
.text:0000404E $LN92           db 'r',0                ; DATA XREF: .text:00004008o
.text:00004050 $LN91           db 'argv',0             ; DATA XREF: .text:00003FFCo
.text:00004055 $LN90           db 'argc',0             ; DATA XREF: .text:00003FF0o
.text:0000405A $LN89           db 'cpsize',0           ; DATA XREF: .text:00003FE4o
.text:00004061 $LN88           db 'filemap',0          ; DATA XREF: .text:00003FD8o
.text:00004069 $LN87           db 'msg',0              ; DATA XREF: .text:00003FCCo
.text:0000406D $LN86           db 'wndclass',0         ; DATA XREF: .text:00003FC0o
.text:00004076                 align 4
.text:00004078
.text:00004078 ; =============== S U B R O U T I N E =======================================
.text:00004078
.text:00004078 ; Attributes: bp-based frame
.text:00004078
.text:00004078 _start_backend  proc near               ; CODE XREF: WinMain(x,x,x,x):loc_3D4Ep
.text:00004078                                         ; WndProc(x,x,x,x)+6D2p
.text:00004078
.text:00004078 var_42C         = dword ptr -42Ch
.text:00004078 lpCaption       = dword ptr -428h
.text:00004078 var_424         = dword ptr -424h
.text:00004078 var_41C         = dword ptr -41Ch
.text:00004078 Str             = dword ptr -414h
.text:00004078 Dest            = byte ptr -40Ch
.text:00004078 var_8           = dword ptr -8
.text:00004078 var_4           = dword ptr -4
.text:00004078
.text:00004078                 push    ebp
.text:00004079                 mov     ebp, esp
.text:0000407B                 sub     esp, 42Ch
.text:00004081                 push    esi
.text:00004082                 push    edi
.text:00004083                 lea     edi, [ebp+var_42C]
.text:00004089                 mov     ecx, 10Bh
.text:0000408E                 mov     eax, 0CCCCCCCCh
.text:00004093                 rep stosd
.text:00004095                 mov     eax, dword ptr ds:___security_cookie
.text:0000409A                 xor     eax, ebp
.text:0000409C                 mov     [ebp+var_4], eax
.text:0000409F                 push    2
.text:000040A1                 mov     eax, dword ptr ds:_conf
.text:000040A6                 push    eax
.text:000040A7                 call    _conf_get_int
.text:000040AC                 add     esp, 8
.text:000040AF                 push    eax
.text:000040B0                 call    _backend_from_proto
.text:000040B5                 add     esp, 4
.text:000040B8                 mov     ds:_back, eax
.text:000040BD                 cmp     ds:_back, 0
.text:000040C4                 jnz     short loc_4118
.text:000040C6                 mov     ecx, dword ptr ds:_appname
.text:000040CC                 push    ecx
.text:000040CD                 push    offset $SG88969 ; "%s Internal Error"
.text:000040D2                 call    _dupprintf
.text:000040D7                 add     esp, 8
.text:000040DA                 mov     [ebp+lpCaption], eax
.text:000040E0                 mov     esi, esp
.text:000040E2                 push    30h ; '0'       ; uType
.text:000040E4                 mov     edx, [ebp+lpCaption]
.text:000040EA                 push    edx             ; lpCaption
.text:000040EB                 push    offset $SG88971 ; "Unsupported protocol number found"
.text:000040F0                 push    0               ; hWnd
.text:000040F2                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:000040F8                 cmp     esi, esp
.text:000040FA                 call    __RTC_CheckEsp
.text:000040FF                 mov     eax, [ebp+lpCaption]
.text:00004105                 push    eax
.text:00004106                 call    _safefree
.text:0000410B                 add     esp, 4
.text:0000410E                 push    1               ; Code
.text:00004110                 call    _cleanup_exit
.text:00004110 ; ---------------------------------------------------------------------------
.text:00004115                 db  83h ; â
.text:00004116                 db 0C4h ; -
.text:00004117                 db    4
.text:00004118 ; ---------------------------------------------------------------------------
.text:00004118
.text:00004118 loc_4118:                               ; CODE XREF: _start_backend+4Cj
.text:00004118                 push    8
.text:0000411A                 mov     ecx, dword ptr ds:_conf
.text:00004120                 push    ecx
.text:00004121                 call    _conf_get_int
.text:00004126                 add     esp, 8
.text:00004129                 mov     esi, esp
.text:0000412B                 push    eax
.text:0000412C                 push    7
.text:0000412E                 mov     edx, dword ptr ds:_conf
.text:00004134                 push    edx
.text:00004135                 call    _conf_get_int
.text:0000413A                 add     esp, 8
.text:0000413D                 push    eax
.text:0000413E                 lea     eax, [ebp+var_41C]
.text:00004144                 push    eax
.text:00004145                 push    1
.text:00004147                 mov     ecx, dword ptr ds:_conf
.text:0000414D                 push    ecx
.text:0000414E                 call    _conf_get_int
.text:00004153                 add     esp, 8
.text:00004156                 push    eax
.text:00004157                 push    0
.text:00004159                 mov     edx, dword ptr ds:_conf
.text:0000415F                 push    edx
.text:00004160                 call    _conf_get_str
.text:00004165                 add     esp, 8
.text:00004168                 push    eax
.text:00004169                 mov     eax, dword ptr ds:_conf
.text:0000416E                 push    eax
.text:0000416F                 push    offset _backhandle
.text:00004174                 push    0
.text:00004176                 mov     ecx, ds:_back
.text:0000417C                 mov     edx, [ecx]
.text:0000417E                 call    edx
.text:00004180                 add     esp, 20h
.text:00004183                 cmp     esi, esp
.text:00004185                 call    __RTC_CheckEsp
.text:0000418A                 mov     [ebp+var_8], eax
.text:0000418D                 mov     esi, esp
.text:0000418F                 mov     eax, dword ptr ds:_logctx
.text:00004194                 push    eax
.text:00004195                 mov     ecx, ds:_backhandle
.text:0000419B                 push    ecx
.text:0000419C                 mov     edx, ds:_back
.text:000041A2                 mov     eax, [edx+34h]
.text:000041A5                 call    eax
.text:000041A7                 add     esp, 8
.text:000041AA                 cmp     esi, esp
.text:000041AC                 call    __RTC_CheckEsp
.text:000041B1                 cmp     [ebp+var_8], 0
.text:000041B5                 jz      short loc_422F
.text:000041B7                 mov     ecx, dword ptr ds:_appname
.text:000041BD                 push    ecx
.text:000041BE                 push    offset $SG88975 ; "%s Error"
.text:000041C3                 call    _dupprintf
.text:000041C8                 add     esp, 8
.text:000041CB                 mov     [ebp+var_42C], eax
.text:000041D1                 mov     edx, [ebp+var_8]
.text:000041D4                 push    edx
.text:000041D5                 mov     eax, dword ptr ds:_conf
.text:000041DA                 push    eax
.text:000041DB                 call    _conf_dest
.text:000041E0                 add     esp, 4
.text:000041E3                 push    eax
.text:000041E4                 push    offset $SG88976 ; "Unable to open connection to\n%.800s\n%"...
.text:000041E9                 lea     ecx, [ebp+Dest]
.text:000041EF                 push    ecx             ; Dest
.text:000041F0                 call    _sprintf
.text:000041F5                 add     esp, 10h
.text:000041F8                 mov     esi, esp
.text:000041FA                 push    10h             ; uType
.text:000041FC                 mov     edx, [ebp+var_42C]
.text:00004202                 push    edx             ; lpCaption
.text:00004203                 lea     eax, [ebp+Dest]
.text:00004209                 push    eax             ; lpText
.text:0000420A                 push    0               ; hWnd
.text:0000420C                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00004212                 cmp     esi, esp
.text:00004214                 call    __RTC_CheckEsp
.text:00004219                 mov     ecx, [ebp+var_42C]
.text:0000421F                 push    ecx
.text:00004220                 call    _safefree
.text:00004225                 add     esp, 4
.text:00004228                 push    0               ; Code
.text:0000422A                 call    _exit
.text:0000422F ; ---------------------------------------------------------------------------
.text:0000422F
.text:0000422F loc_422F:                               ; CODE XREF: _start_backend+13Dj
.text:0000422F                 mov     ds:_icon_name, 0
.text:00004239                 mov     edx, ds:_icon_name
.text:0000423F                 mov     ds:_window_name, edx
.text:00004245                 push    5Ah ; 'Z'
.text:00004247                 mov     eax, dword ptr ds:_conf
.text:0000424C                 push    eax
.text:0000424D                 call    _conf_get_str
.text:00004252                 add     esp, 8
.text:00004255                 mov     [ebp+Str], eax
.text:0000425B                 mov     ecx, [ebp+Str]
.text:00004261                 movsx   edx, byte ptr [ecx]
.text:00004264                 test    edx, edx
.text:00004266                 jnz     short loc_4295
.text:00004268                 mov     eax, dword ptr ds:_appname
.text:0000426D                 push    eax
.text:0000426E                 mov     ecx, [ebp+var_41C]
.text:00004274                 push    ecx
.text:00004275                 push    offset $SG88980 ; "%s - %s"
.text:0000427A                 lea     edx, [ebp+Dest]
.text:00004280                 push    edx             ; Dest
.text:00004281                 call    _sprintf
.text:00004286                 add     esp, 10h
.text:00004289                 lea     eax, [ebp+Dest]
.text:0000428F                 mov     [ebp+Str], eax
.text:00004295
.text:00004295 loc_4295:                               ; CODE XREF: _start_backend+1EEj
.text:00004295                 mov     ecx, [ebp+var_41C]
.text:0000429B                 push    ecx
.text:0000429C                 call    _safefree
.text:000042A1                 add     esp, 4
.text:000042A4                 mov     edx, [ebp+Str]
.text:000042AA                 push    edx             ; Str
.text:000042AB                 push    0               ; int
.text:000042AD                 call    _set_title
.text:000042B2                 add     esp, 8
.text:000042B5                 mov     eax, [ebp+Str]
.text:000042BB                 push    eax             ; Str
.text:000042BC                 push    0               ; int
.text:000042BE                 call    _set_icon
.text:000042C3                 add     esp, 8
.text:000042C6                 mov     ecx, ds:_backhandle
.text:000042CC                 push    ecx
.text:000042CD                 mov     edx, ds:_back
.text:000042D3                 mov     eax, [edx+14h]
.text:000042D6                 push    eax
.text:000042D7                 mov     ecx, dword ptr ds:_term
.text:000042DD                 push    ecx
.text:000042DE                 call    _term_provide_resize_fn
.text:000042E3                 add     esp, 0Ch
.text:000042E6                 push    0
.text:000042E8                 mov     edx, ds:_backhandle
.text:000042EE                 push    edx
.text:000042EF                 mov     eax, ds:_back
.text:000042F4                 push    eax
.text:000042F5                 mov     ecx, dword ptr ds:_term
.text:000042FB                 push    ecx
.text:000042FC                 mov     edx, dword ptr ds:_conf
.text:00004302                 push    edx
.text:00004303                 call    _ldisc_create
.text:00004308                 add     esp, 14h
.text:0000430B                 mov     ds:_ldisc, eax
.text:00004310                 mov     [ebp+var_424], 0
.text:0000431A                 jmp     short loc_432B
.text:0000431C ; ---------------------------------------------------------------------------
.text:0000431C
.text:0000431C loc_431C:                               ; CODE XREF: _start_backend+2DDj
.text:0000431C                 mov     eax, [ebp+var_424]
.text:00004322                 add     eax, 1
.text:00004325                 mov     [ebp+var_424], eax
.text:0000432B
.text:0000432B loc_432B:                               ; CODE XREF: _start_backend+2A2j
.text:0000432B                 cmp     [ebp+var_424], 2
.text:00004332                 jnb     short loc_4357
.text:00004334                 mov     esi, esp
.text:00004336                 push    0               ; uFlags
.text:00004338                 push    40h ; '@'       ; uPosition
.text:0000433A                 mov     ecx, [ebp+var_424]
.text:00004340                 mov     edx, ds:_popup_menus[ecx*4]
.text:00004347                 push    edx             ; hMenu
.text:00004348                 call    dword ptr ds:__imp__DeleteMenu@12 ; DeleteMenu(x,x,x)
.text:0000434E                 cmp     esi, esp
.text:00004350                 call    __RTC_CheckEsp
.text:00004355                 jmp     short loc_431C
.text:00004357 ; ---------------------------------------------------------------------------
.text:00004357
.text:00004357 loc_4357:                               ; CODE XREF: _start_backend+2BAj
.text:00004357                 mov     ds:_session_closed, 0
.text:00004361                 push    edx
.text:00004362                 mov     ecx, ebp
.text:00004364                 push    eax
.text:00004365                 lea     edx, $LN12
.text:0000436B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004370                 pop     eax
.text:00004371                 pop     edx
.text:00004372                 pop     edi
.text:00004373                 pop     esi
.text:00004374                 mov     ecx, [ebp+var_4]
.text:00004377                 xor     ecx, ebp
.text:00004379                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000437E                 add     esp, 42Ch
.text:00004384                 cmp     ebp, esp
.text:00004386                 call    __RTC_CheckEsp
.text:0000438B                 mov     esp, ebp
.text:0000438D                 pop     ebp
.text:0000438E                 retn
.text:0000438E _start_backend  endp
.text:0000438E
.text:0000438E ; ---------------------------------------------------------------------------
.text:0000438F                 align 10h
.text:00004390 $LN12           dd 2                    ; DATA XREF: _start_backend+2EDo
.text:00004394                 dd offset $LN11
.text:00004398 $LN11           dd 0FFFFFBF4h, 400h     ; DATA XREF: .text:00004394o
.text:000043A0                 dd offset $LN9_0        ; "msg"
.text:000043A4                 dd 0FFFFFBE4h, 4
.text:000043AC                 dd offset $LN10_1       ; "realhost"
.text:000043B0 $LN10_1         db 'realhost',0         ; DATA XREF: .text:000043ACo
.text:000043B9 $LN9_0          db 'msg',0              ; DATA XREF: .text:000043A0o
.text:000043BD                 db 0Bh dup(0CCh)
.text:000043C8
.text:000043C8 ; =============== S U B R O U T I N E =======================================
.text:000043C8
.text:000043C8 ; Attributes: noreturn bp-based frame
.text:000043C8
.text:000043C8 ; int __cdecl cleanup_exit(int Code)
.text:000043C8                 public _cleanup_exit
.text:000043C8 _cleanup_exit   proc near               ; CODE XREF: WinMain(x,x,x,x)+27Bp
.text:000043C8                                         ; WinMain(x,x,x,x)+34Dp ...
.text:000043C8
.text:000043C8 Code            = dword ptr  8
.text:000043C8
.text:000043C8                 push    ebp
.text:000043C9                 mov     ebp, esp
.text:000043CB                 push    esi
.text:000043CC                 call    _deinit_fonts
.text:000043D1                 mov     eax, ds:_logpal
.text:000043D6                 push    eax
.text:000043D7                 call    _safefree
.text:000043DC                 add     esp, 4
.text:000043DF                 cmp     ds:_pal, 0
.text:000043E6                 jz      short loc_43FE
.text:000043E8                 mov     esi, esp
.text:000043EA                 mov     ecx, ds:_pal
.text:000043F0                 push    ecx             ; ho
.text:000043F1                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:000043F7                 cmp     esi, esp
.text:000043F9                 call    __RTC_CheckEsp
.text:000043FE
.text:000043FE loc_43FE:                               ; CODE XREF: _cleanup_exit+1Ej
.text:000043FE                 call    _sk_cleanup
.text:00004403                 push    2
.text:00004405                 mov     edx, dword ptr ds:_conf
.text:0000440B                 push    edx
.text:0000440C                 call    _conf_get_int
.text:00004411                 add     esp, 8
.text:00004414                 cmp     eax, 3
.text:00004417                 jnz     short loc_441E
.text:00004419                 call    _random_save_seed
.text:0000441E
.text:0000441E loc_441E:                               ; CODE XREF: _cleanup_exit+4Fj
.text:0000441E                 call    _shutdown_help
.text:00004423                 mov     esi, esp
.text:00004425                 call    dword ptr ds:__imp__CoUninitialize@0 ; CoUninitialize()
.text:0000442B                 cmp     esi, esp
.text:0000442D                 call    __RTC_CheckEsp
.text:00004432                 mov     eax, [ebp+Code]
.text:00004435                 push    eax             ; Code
.text:00004436                 call    _exit
.text:00004436 _cleanup_exit   endp
.text:00004436
.text:0000443B ; ---------------------------------------------------------------------------
.text:0000443B                 pop     esi
.text:0000443C                 cmp     ebp, esp
.text:0000443E                 call    __RTC_CheckEsp
.text:00004443                 pop     ebp
.text:00004444                 retn
.text:00004444 ; ---------------------------------------------------------------------------
.text:00004445                 align 4
.text:00004448
.text:00004448 ; =============== S U B R O U T I N E =======================================
.text:00004448
.text:00004448 ; Attributes: bp-based frame
.text:00004448
.text:00004448                 public _do_select
.text:00004448 _do_select      proc near
.text:00004448
.text:00004448 var_C           = dword ptr -0Ch
.text:00004448 var_8           = dword ptr -8
.text:00004448 var_4           = dword ptr -4
.text:00004448 arg_0           = dword ptr  8
.text:00004448 arg_4           = dword ptr  0Ch
.text:00004448
.text:00004448                 push    ebp
.text:00004449                 mov     ebp, esp
.text:0000444B                 sub     esp, 0Ch
.text:0000444E                 push    esi
.text:0000444F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004456                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000445D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004464                 cmp     [ebp+arg_4], 0
.text:00004468                 jz      short loc_447A
.text:0000446A                 mov     [ebp+var_4], 8005h
.text:00004471                 mov     [ebp+var_8], 3Fh ; '?'
.text:00004478                 jmp     short loc_4487
.text:0000447A ; ---------------------------------------------------------------------------
.text:0000447A
.text:0000447A loc_447A:                               ; CODE XREF: _do_select+20j
.text:0000447A                 mov     [ebp+var_8], 0
.text:00004481                 mov     eax, [ebp+var_8]
.text:00004484                 mov     [ebp+var_4], eax
.text:00004487
.text:00004487 loc_4487:                               ; CODE XREF: _do_select+30j
.text:00004487                 cmp     dword ptr ds:_hwnd, 0
.text:0000448E                 jnz     short loc_4497
.text:00004490                 mov     eax, offset $SG89239 ; "do_select(): internal error (hwnd==NULL"...
.text:00004495                 jmp     short loc_44EA
.text:00004497 ; ---------------------------------------------------------------------------
.text:00004497
.text:00004497 loc_4497:                               ; CODE XREF: _do_select+46j
.text:00004497                 mov     esi, esp
.text:00004499                 mov     ecx, [ebp+var_8]
.text:0000449C                 push    ecx
.text:0000449D                 mov     edx, [ebp+var_4]
.text:000044A0                 push    edx
.text:000044A1                 mov     eax, dword ptr ds:_hwnd
.text:000044A6                 push    eax
.text:000044A7                 mov     ecx, [ebp+arg_0]
.text:000044AA                 push    ecx
.text:000044AB                 call    dword ptr ds:_p_WSAAsyncSelect
.text:000044B1                 cmp     esi, esp
.text:000044B3                 call    __RTC_CheckEsp
.text:000044B8                 cmp     eax, 0FFFFFFFFh
.text:000044BB                 jnz     short loc_44E8
.text:000044BD                 mov     esi, esp
.text:000044BF                 call    dword ptr ds:_p_WSAGetLastError
.text:000044C5                 cmp     esi, esp
.text:000044C7                 call    __RTC_CheckEsp
.text:000044CC                 mov     [ebp+var_C], eax
.text:000044CF                 cmp     [ebp+var_C], 2742h
.text:000044D6                 jz      short loc_44DA
.text:000044D8                 jmp     short loc_44E1
.text:000044DA ; ---------------------------------------------------------------------------
.text:000044DA
.text:000044DA loc_44DA:                               ; CODE XREF: _do_select+8Ej
.text:000044DA                 mov     eax, offset $SG89246 ; "Network is down"
.text:000044DF                 jmp     short loc_44EA
.text:000044E1 ; ---------------------------------------------------------------------------
.text:000044E1
.text:000044E1 loc_44E1:                               ; CODE XREF: _do_select+90j
.text:000044E1                 mov     eax, offset $SG89248 ; "WSAAsyncSelect(): unknown error"
.text:000044E6                 jmp     short loc_44EA
.text:000044E8 ; ---------------------------------------------------------------------------
.text:000044E8
.text:000044E8 loc_44E8:                               ; CODE XREF: _do_select+73j
.text:000044E8                 xor     eax, eax
.text:000044EA
.text:000044EA loc_44EA:                               ; CODE XREF: _do_select+4Dj
.text:000044EA                                         ; _do_select+97j ...
.text:000044EA                 pop     esi
.text:000044EB                 add     esp, 0Ch
.text:000044EE                 cmp     ebp, esp
.text:000044F0                 call    __RTC_CheckEsp
.text:000044F5                 mov     esp, ebp
.text:000044F7                 pop     ebp
.text:000044F8                 retn
.text:000044F8 _do_select      endp
.text:000044F8
.text:000044F8 ; ---------------------------------------------------------------------------
.text:000044F9                 db 0Fh dup(0CCh)
.text:00004508
.text:00004508 ; =============== S U B R O U T I N E =======================================
.text:00004508
.text:00004508 ; Attributes: bp-based frame
.text:00004508
.text:00004508 _update_savedsess_menu proc near        ; CODE XREF: WinMain(x,x,x,x)+F54p
.text:00004508                                         ; WndProc(x,x,x,x)+2EEp
.text:00004508
.text:00004508 var_8           = dword ptr -8
.text:00004508 var_4           = dword ptr -4
.text:00004508
.text:00004508                 push    ebp
.text:00004509                 mov     ebp, esp
.text:0000450B                 sub     esp, 8
.text:0000450E                 push    esi
.text:0000450F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004516                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000451D
.text:0000451D loc_451D:                               ; CODE XREF: _update_savedsess_menu+35j
.text:0000451D                 mov     esi, esp
.text:0000451F                 push    400h            ; uFlags
.text:00004524                 push    0               ; uPosition
.text:00004526                 mov     eax, ds:_savedsess_menu
.text:0000452B                 push    eax             ; hMenu
.text:0000452C                 call    dword ptr ds:__imp__DeleteMenu@12 ; DeleteMenu(x,x,x)
.text:00004532                 cmp     esi, esp
.text:00004534                 call    __RTC_CheckEsp
.text:00004539                 test    eax, eax
.text:0000453B                 jz      short loc_453F
.text:0000453D                 jmp     short loc_451D
.text:0000453F ; ---------------------------------------------------------------------------
.text:0000453F
.text:0000453F loc_453F:                               ; CODE XREF: _update_savedsess_menu+33j
.text:0000453F                 mov     [ebp+var_4], 1
.text:00004546                 jmp     short loc_4551
.text:00004548 ; ---------------------------------------------------------------------------
.text:00004548
.text:00004548 loc_4548:                               ; CODE XREF: _update_savedsess_menu+A4j
.text:00004548                 mov     ecx, [ebp+var_4]
.text:0000454B                 add     ecx, 1
.text:0000454E                 mov     [ebp+var_4], ecx
.text:00004551
.text:00004551 loc_4551:                               ; CODE XREF: _update_savedsess_menu+3Ej
.text:00004551                 cmp     ds:_sesslist, 401h
.text:0000455B                 jg      short loc_4568
.text:0000455D                 mov     edx, ds:_sesslist
.text:00004563                 mov     [ebp+var_8], edx
.text:00004566                 jmp     short loc_456F
.text:00004568 ; ---------------------------------------------------------------------------
.text:00004568
.text:00004568 loc_4568:                               ; CODE XREF: _update_savedsess_menu+53j
.text:00004568                 mov     [ebp+var_8], 401h
.text:0000456F
.text:0000456F loc_456F:                               ; CODE XREF: _update_savedsess_menu+5Ej
.text:0000456F                 mov     eax, [ebp+var_4]
.text:00004572                 cmp     eax, [ebp+var_8]
.text:00004575                 jge     short loc_45AE
.text:00004577                 mov     esi, esp
.text:00004579                 mov     ecx, [ebp+var_4]
.text:0000457C                 mov     edx, ds:dword_10E0
.text:00004582                 mov     eax, [edx+ecx*4]
.text:00004585                 push    eax             ; lpNewItem
.text:00004586                 mov     ecx, [ebp+var_4]
.text:00004589                 sub     ecx, 1
.text:0000458C                 shl     ecx, 4
.text:0000458F                 add     ecx, 1000h
.text:00004595                 push    ecx             ; uIDNewItem
.text:00004596                 push    0               ; uFlags
.text:00004598                 mov     edx, ds:_savedsess_menu
.text:0000459E                 push    edx             ; hMenu
.text:0000459F                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:000045A5                 cmp     esi, esp
.text:000045A7                 call    __RTC_CheckEsp
.text:000045AC                 jmp     short loc_4548
.text:000045AE ; ---------------------------------------------------------------------------
.text:000045AE
.text:000045AE loc_45AE:                               ; CODE XREF: _update_savedsess_menu+6Dj
.text:000045AE                 cmp     ds:_sesslist, 1
.text:000045B5                 jg      short loc_45D8
.text:000045B7                 mov     esi, esp
.text:000045B9                 push    offset $SG89260 ; "(No sessions)"
.text:000045BE                 push    1000h           ; uIDNewItem
.text:000045C3                 push    1               ; uFlags
.text:000045C5                 mov     eax, ds:_savedsess_menu
.text:000045CA                 push    eax             ; hMenu
.text:000045CB                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:000045D1                 cmp     esi, esp
.text:000045D3                 call    __RTC_CheckEsp
.text:000045D8
.text:000045D8 loc_45D8:                               ; CODE XREF: _update_savedsess_menu+ADj
.text:000045D8                 pop     esi
.text:000045D9                 add     esp, 8
.text:000045DC                 cmp     ebp, esp
.text:000045DE                 call    __RTC_CheckEsp
.text:000045E3                 mov     esp, ebp
.text:000045E5                 pop     ebp
.text:000045E6                 retn
.text:000045E6 _update_savedsess_menu endp
.text:000045E6
.text:000045E6 ; ---------------------------------------------------------------------------
.text:000045E7                 align 4
.text:000045E8
.text:000045E8 ; =============== S U B R O U T I N E =======================================
.text:000045E8
.text:000045E8 ; Attributes: bp-based frame
.text:000045E8
.text:000045E8                 public _update_specials_menu
.text:000045E8 _update_specials_menu proc near         ; CODE XREF: _close_session+CFp
.text:000045E8
.text:000045E8 var_18          = dword ptr -18h
.text:000045E8 var_14          = dword ptr -14h
.text:000045E8 var_10          = dword ptr -10h
.text:000045E8 var_C           = dword ptr -0Ch
.text:000045E8 var_8           = dword ptr -8
.text:000045E8 hMenu           = dword ptr -4
.text:000045E8
.text:000045E8                 push    ebp
.text:000045E9                 mov     ebp, esp
.text:000045EB                 sub     esp, 18h
.text:000045EE                 push    esi
.text:000045EF                 mov     eax, 0CCCCCCCCh
.text:000045F4                 mov     [ebp+var_18], eax
.text:000045F7                 mov     [ebp+var_14], eax
.text:000045FA                 mov     [ebp+var_10], eax
.text:000045FD                 mov     [ebp+var_C], eax
.text:00004600                 mov     [ebp+var_8], eax
.text:00004603                 mov     [ebp+hMenu], eax
.text:00004606                 cmp     ds:_back, 0
.text:0000460D                 jz      short loc_4633
.text:0000460F                 mov     esi, esp
.text:00004611                 mov     eax, ds:_backhandle
.text:00004616                 push    eax
.text:00004617                 mov     ecx, ds:_back
.text:0000461D                 mov     edx, [ecx+1Ch]
.text:00004620                 call    edx
.text:00004622                 add     esp, 4
.text:00004625                 cmp     esi, esp
.text:00004627                 call    __RTC_CheckEsp
.text:0000462C                 mov     ds:_specials, eax
.text:00004631                 jmp     short loc_463D
.text:00004633 ; ---------------------------------------------------------------------------
.text:00004633
.text:00004633 loc_4633:                               ; CODE XREF: _update_specials_menu+25j
.text:00004633                 mov     ds:_specials, 0
.text:0000463D
.text:0000463D loc_463D:                               ; CODE XREF: _update_specials_menu+49j
.text:0000463D                 cmp     ds:_specials, 0
.text:00004644                 jz      loc_47BE
.text:0000464A                 mov     [ebp+var_10], 0
.text:00004651                 mov     [ebp+var_14], 1
.text:00004658                 mov     esi, esp
.text:0000465A                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text:00004660                 cmp     esi, esp
.text:00004662                 call    __RTC_CheckEsp
.text:00004667                 mov     [ebp+hMenu], eax
.text:0000466A                 mov     [ebp+var_8], 0
.text:00004671                 jmp     short loc_467C
.text:00004673 ; ---------------------------------------------------------------------------
.text:00004673
.text:00004673 loc_4673:                               ; CODE XREF: _update_specials_menu:loc_47ABj
.text:00004673                 mov     eax, [ebp+var_8]
.text:00004676                 add     eax, 1
.text:00004679                 mov     [ebp+var_8], eax
.text:0000467C
.text:0000467C loc_467C:                               ; CODE XREF: _update_specials_menu+89j
.text:0000467C                 cmp     [ebp+var_14], 0
.text:00004680                 jle     loc_47B0
.text:00004686                 mov     ecx, [ebp+var_8]
.text:00004689                 shl     ecx, 4
.text:0000468C                 add     ecx, 400h
.text:00004692                 cmp     ecx, 800h
.text:00004698                 jl      short loc_46B1
.text:0000469A                 push    3E8h            ; Line
.text:0000469F                 push    offset $SG89278 ; "..\\..\\window.c"
.text:000046A4                 push    offset $SG89279 ; "IDM_SPECIAL_MIN + 0x10 * i < IDM_SPECIA"...
.text:000046A9                 call    __wassert
.text:000046AE ; ---------------------------------------------------------------------------
.text:000046AE                 add     esp, 0Ch
.text:000046B1
.text:000046B1 loc_46B1:                               ; CODE XREF: _update_specials_menu+B0j
.text:000046B1                 mov     eax, [ebp+var_8]
.text:000046B4                 mov     ecx, ds:_specials
.text:000046BA                 mov     edx, [ecx+eax*8+4]
.text:000046BE                 mov     [ebp+var_18], edx
.text:000046C1                 cmp     [ebp+var_18], 1Fh
.text:000046C5                 jz      short loc_46DC
.text:000046C7                 cmp     [ebp+var_18], 20h ; ' '
.text:000046CB                 jz      short loc_46FD
.text:000046CD                 cmp     [ebp+var_18], 21h ; '!'
.text:000046D1                 jz      loc_4763
.text:000046D7                 jmp     loc_477D
.text:000046DC ; ---------------------------------------------------------------------------
.text:000046DC
.text:000046DC loc_46DC:                               ; CODE XREF: _update_specials_menu+DDj
.text:000046DC                 mov     esi, esp
.text:000046DE                 push    0               ; lpNewItem
.text:000046E0                 push    0               ; uIDNewItem
.text:000046E2                 push    800h            ; uFlags
.text:000046E7                 mov     eax, [ebp+hMenu]
.text:000046EA                 push    eax             ; hMenu
.text:000046EB                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:000046F1                 cmp     esi, esp
.text:000046F3                 call    __RTC_CheckEsp
.text:000046F8                 jmp     loc_47AB
.text:000046FD ; ---------------------------------------------------------------------------
.text:000046FD
.text:000046FD loc_46FD:                               ; CODE XREF: _update_specials_menu+E3j
.text:000046FD                 cmp     [ebp+var_14], 2
.text:00004701                 jl      short loc_471A
.text:00004703                 push    3EEh            ; Line
.text:00004708                 push    offset $SG89287 ; "..\\..\\window.c"
.text:0000470D                 push    offset $SG89288 ; "nesting < 2"
.text:00004712                 call    __wassert
.text:00004717 ; ---------------------------------------------------------------------------
.text:00004717                 add     esp, 0Ch
.text:0000471A
.text:0000471A loc_471A:                               ; CODE XREF: _update_specials_menu+119j
.text:0000471A                 mov     edx, [ebp+var_14]
.text:0000471D                 add     edx, 1
.text:00004720                 mov     [ebp+var_14], edx
.text:00004723                 mov     eax, [ebp+hMenu]
.text:00004726                 mov     [ebp+var_10], eax
.text:00004729                 mov     esi, esp
.text:0000472B                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text:00004731                 cmp     esi, esp
.text:00004733                 call    __RTC_CheckEsp
.text:00004738                 mov     [ebp+hMenu], eax
.text:0000473B                 mov     esi, esp
.text:0000473D                 mov     ecx, [ebp+var_8]
.text:00004740                 mov     edx, ds:_specials
.text:00004746                 mov     eax, [edx+ecx*8]
.text:00004749                 push    eax             ; lpNewItem
.text:0000474A                 mov     ecx, [ebp+hMenu]
.text:0000474D                 push    ecx             ; uIDNewItem
.text:0000474E                 push    10h             ; uFlags
.text:00004750                 mov     edx, [ebp+var_10]
.text:00004753                 push    edx             ; hMenu
.text:00004754                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:0000475A                 cmp     esi, esp
.text:0000475C                 call    __RTC_CheckEsp
.text:00004761                 jmp     short loc_47AB
.text:00004763 ; ---------------------------------------------------------------------------
.text:00004763
.text:00004763 loc_4763:                               ; CODE XREF: _update_specials_menu+E9j
.text:00004763                 mov     eax, [ebp+var_14]
.text:00004766                 sub     eax, 1
.text:00004769                 mov     [ebp+var_14], eax
.text:0000476C                 jz      short loc_477B
.text:0000476E                 mov     ecx, [ebp+var_10]
.text:00004771                 mov     [ebp+hMenu], ecx
.text:00004774                 mov     [ebp+var_10], 0
.text:0000477B
.text:0000477B loc_477B:                               ; CODE XREF: _update_specials_menu+184j
.text:0000477B                 jmp     short loc_47AB
.text:0000477D ; ---------------------------------------------------------------------------
.text:0000477D
.text:0000477D loc_477D:                               ; CODE XREF: _update_specials_menu+EFj
.text:0000477D                 mov     esi, esp
.text:0000477F                 mov     edx, [ebp+var_8]
.text:00004782                 mov     eax, ds:_specials
.text:00004787                 mov     ecx, [eax+edx*8]
.text:0000478A                 push    ecx             ; lpNewItem
.text:0000478B                 mov     edx, [ebp+var_8]
.text:0000478E                 shl     edx, 4
.text:00004791                 add     edx, 400h
.text:00004797                 push    edx             ; uIDNewItem
.text:00004798                 push    0               ; uFlags
.text:0000479A                 mov     eax, [ebp+hMenu]
.text:0000479D                 push    eax             ; hMenu
.text:0000479E                 call    dword ptr ds:__imp__AppendMenuA@16 ; AppendMenuA(x,x,x,x)
.text:000047A4                 cmp     esi, esp
.text:000047A6                 call    __RTC_CheckEsp
.text:000047AB
.text:000047AB loc_47AB:                               ; CODE XREF: _update_specials_menu+110j
.text:000047AB                                         ; _update_specials_menu+179j ...
.text:000047AB                 jmp     loc_4673
.text:000047B0 ; ---------------------------------------------------------------------------
.text:000047B0
.text:000047B0 loc_47B0:                               ; CODE XREF: _update_specials_menu+98j
.text:000047B0                 mov     ecx, [ebp+var_8]
.text:000047B3                 sub     ecx, 1
.text:000047B6                 mov     ds:_n_specials, ecx
.text:000047BC                 jmp     short loc_47CF
.text:000047BE ; ---------------------------------------------------------------------------
.text:000047BE
.text:000047BE loc_47BE:                               ; CODE XREF: _update_specials_menu+5Cj
.text:000047BE                 mov     [ebp+hMenu], 0
.text:000047C5                 mov     ds:_n_specials, 0
.text:000047CF
.text:000047CF loc_47CF:                               ; CODE XREF: _update_specials_menu+1D4j
.text:000047CF                 mov     [ebp+var_C], 0
.text:000047D6                 jmp     short loc_47E1
.text:000047D8 ; ---------------------------------------------------------------------------
.text:000047D8
.text:000047D8 loc_47D8:                               ; CODE XREF: _update_specials_menu:loc_488Cj
.text:000047D8                 mov     edx, [ebp+var_C]
.text:000047DB                 add     edx, 1
.text:000047DE                 mov     [ebp+var_C], edx
.text:000047E1
.text:000047E1 loc_47E1:                               ; CODE XREF: _update_specials_menu+1EEj
.text:000047E1                 cmp     [ebp+var_C], 2
.text:000047E5                 jnb     loc_4891
.text:000047EB                 cmp     ds:_specials_menu, 0
.text:000047F2                 jz      short loc_4837
.text:000047F4                 mov     esi, esp
.text:000047F6                 push    0               ; uFlags
.text:000047F8                 mov     eax, ds:_specials_menu
.text:000047FD                 push    eax             ; uPosition
.text:000047FE                 mov     ecx, [ebp+var_C]
.text:00004801                 mov     edx, ds:_popup_menus[ecx*4]
.text:00004808                 push    edx             ; hMenu
.text:00004809                 call    dword ptr ds:__imp__DeleteMenu@12 ; DeleteMenu(x,x,x)
.text:0000480F                 cmp     esi, esp
.text:00004811                 call    __RTC_CheckEsp
.text:00004816                 mov     esi, esp
.text:00004818                 push    0               ; uFlags
.text:0000481A                 push    200h            ; uPosition
.text:0000481F                 mov     eax, [ebp+var_C]
.text:00004822                 mov     ecx, ds:_popup_menus[eax*4]
.text:00004829                 push    ecx             ; hMenu
.text:0000482A                 call    dword ptr ds:__imp__DeleteMenu@12 ; DeleteMenu(x,x,x)
.text:00004830                 cmp     esi, esp
.text:00004832                 call    __RTC_CheckEsp
.text:00004837
.text:00004837 loc_4837:                               ; CODE XREF: _update_specials_menu+20Aj
.text:00004837                 cmp     [ebp+hMenu], 0
.text:0000483B                 jz      short loc_488C
.text:0000483D                 mov     esi, esp
.text:0000483F                 push    offset $SG89303 ; "S&pecial Command"
.text:00004844                 mov     edx, [ebp+hMenu]
.text:00004847                 push    edx             ; uIDNewItem
.text:00004848                 push    10h             ; uFlags
.text:0000484A                 push    10h             ; uPosition
.text:0000484C                 mov     eax, [ebp+var_C]
.text:0000484F                 mov     ecx, ds:_popup_menus[eax*4]
.text:00004856                 push    ecx             ; hMenu
.text:00004857                 call    dword ptr ds:__imp__InsertMenuA@20 ; InsertMenuA(x,x,x,x,x)
.text:0000485D                 cmp     esi, esp
.text:0000485F                 call    __RTC_CheckEsp
.text:00004864                 mov     esi, esp
.text:00004866                 push    0               ; lpNewItem
.text:00004868                 push    200h            ; uIDNewItem
.text:0000486D                 push    800h            ; uFlags
.text:00004872                 push    10h             ; uPosition
.text:00004874                 mov     edx, [ebp+var_C]
.text:00004877                 mov     eax, ds:_popup_menus[edx*4]
.text:0000487E                 push    eax             ; hMenu
.text:0000487F                 call    dword ptr ds:__imp__InsertMenuA@20 ; InsertMenuA(x,x,x,x,x)
.text:00004885                 cmp     esi, esp
.text:00004887                 call    __RTC_CheckEsp
.text:0000488C
.text:0000488C loc_488C:                               ; CODE XREF: _update_specials_menu+253j
.text:0000488C                 jmp     loc_47D8
.text:00004891 ; ---------------------------------------------------------------------------
.text:00004891
.text:00004891 loc_4891:                               ; CODE XREF: _update_specials_menu+1FDj
.text:00004891                 mov     ecx, [ebp+hMenu]
.text:00004894                 mov     ds:_specials_menu, ecx
.text:0000489A                 pop     esi
.text:0000489B                 add     esp, 18h
.text:0000489E                 cmp     ebp, esp
.text:000048A0                 call    __RTC_CheckEsp
.text:000048A5                 mov     esp, ebp
.text:000048A7                 pop     ebp
.text:000048A8                 retn
.text:000048A8 _update_specials_menu endp
.text:000048A8
.text:000048A8 ; ---------------------------------------------------------------------------
.text:000048A9                 db 0Fh dup(0CCh)
.text:000048B8
.text:000048B8 ; =============== S U B R O U T I N E =======================================
.text:000048B8
.text:000048B8 ; Attributes: bp-based frame
.text:000048B8
.text:000048B8                 public _set_busy_status
.text:000048B8 _set_busy_status proc near
.text:000048B8
.text:000048B8 arg_4           = dword ptr  0Ch
.text:000048B8
.text:000048B8                 push    ebp
.text:000048B9                 mov     ebp, esp
.text:000048BB                 mov     eax, [ebp+arg_4]
.text:000048BE                 mov     ds:_busy_status, eax
.text:000048C3                 call    _update_mouse_pointer
.text:000048C8                 cmp     ebp, esp
.text:000048CA                 call    __RTC_CheckEsp
.text:000048CF                 pop     ebp
.text:000048D0                 retn
.text:000048D0 _set_busy_status endp
.text:000048D0
.text:000048D0 ; ---------------------------------------------------------------------------
.text:000048D1                 align 8
.text:000048D8
.text:000048D8 ; =============== S U B R O U T I N E =======================================
.text:000048D8
.text:000048D8 ; Attributes: bp-based frame
.text:000048D8
.text:000048D8 _update_mouse_pointer proc near         ; CODE XREF: _set_busy_status+Bp
.text:000048D8                                         ; _set_raw_mouse_mode+44p
.text:000048D8
.text:000048D8 var_14          = dword ptr -14h
.text:000048D8 var_10          = dword ptr -10h
.text:000048D8 dwNewLong       = dword ptr -0Ch
.text:000048D8 bShow           = dword ptr -8
.text:000048D8 lpCursorName    = dword ptr -4
.text:000048D8
.text:000048D8                 push    ebp
.text:000048D9                 mov     ebp, esp
.text:000048DB                 sub     esp, 14h
.text:000048DE                 push    esi
.text:000048DF                 mov     eax, 0CCCCCCCCh
.text:000048E4                 mov     [ebp+var_14], eax
.text:000048E7                 mov     [ebp+var_10], eax
.text:000048EA                 mov     [ebp+dwNewLong], eax
.text:000048ED                 mov     [ebp+bShow], eax
.text:000048F0                 mov     [ebp+lpCursorName], eax
.text:000048F3                 mov     byte ptr [ebp+var_10+3], 0
.text:000048F7                 mov     [ebp+bShow], 0
.text:000048FE                 mov     eax, ds:_busy_status
.text:00004903                 mov     [ebp+var_14], eax
.text:00004906                 cmp     [ebp+var_14], 0
.text:0000490A                 jz      short loc_491A
.text:0000490C                 cmp     [ebp+var_14], 1
.text:00004910                 jz      short loc_493D
.text:00004912                 cmp     [ebp+var_14], 2
.text:00004916                 jz      short loc_4951
.text:00004918                 jmp     short loc_4965
.text:0000491A ; ---------------------------------------------------------------------------
.text:0000491A
.text:0000491A loc_491A:                               ; CODE XREF: _update_mouse_pointer+32j
.text:0000491A                 cmp     ds:_send_raw_mouse, 0
.text:00004921                 jz      short loc_4930
.text:00004923                 mov     byte ptr [ebp+var_10+3], 1
.text:00004927                 mov     [ebp+lpCursorName], 7F00h
.text:0000492E                 jmp     short loc_493B
.text:00004930 ; ---------------------------------------------------------------------------
.text:00004930
.text:00004930 loc_4930:                               ; CODE XREF: _update_mouse_pointer+49j
.text:00004930                 mov     byte ptr [ebp+var_10+3], 1
.text:00004934                 mov     [ebp+lpCursorName], 7F01h
.text:0000493B
.text:0000493B loc_493B:                               ; CODE XREF: _update_mouse_pointer+56j
.text:0000493B                 jmp     short loc_4980
.text:0000493D ; ---------------------------------------------------------------------------
.text:0000493D
.text:0000493D loc_493D:                               ; CODE XREF: _update_mouse_pointer+38j
.text:0000493D                 mov     byte ptr [ebp+var_10+3], 1
.text:00004941                 mov     [ebp+lpCursorName], 7F8Ah
.text:00004948                 mov     [ebp+bShow], 1
.text:0000494F                 jmp     short loc_4980
.text:00004951 ; ---------------------------------------------------------------------------
.text:00004951
.text:00004951 loc_4951:                               ; CODE XREF: _update_mouse_pointer+3Ej
.text:00004951                 mov     byte ptr [ebp+var_10+3], 1
.text:00004955                 mov     [ebp+lpCursorName], 7F02h
.text:0000495C                 mov     [ebp+bShow], 1
.text:00004963                 jmp     short loc_4980
.text:00004965 ; ---------------------------------------------------------------------------
.text:00004965
.text:00004965 loc_4965:                               ; CODE XREF: _update_mouse_pointer+40j
.text:00004965                 xor     ecx, ecx
.text:00004967                 jnz     short loc_4980
.text:00004969                 push    42Fh            ; Line
.text:0000496E                 push    offset $SG89334 ; "..\\..\\window.c"
.text:00004973                 push    offset $SG89335 ; Message
.text:00004978                 call    __wassert
.text:0000497D ; ---------------------------------------------------------------------------
.text:0000497D                 add     esp, 0Ch
.text:00004980
.text:00004980 loc_4980:                               ; CODE XREF: _update_mouse_pointer:loc_493Bj
.text:00004980                                         ; _update_mouse_pointer+77j ...
.text:00004980                 cmp     byte ptr [ebp+var_10+3], 0
.text:00004984                 jnz     short loc_4993
.text:00004986                 push    offset $LN14    ; "curstype"
.text:0000498B                 call    __RTC_UninitUse
.text:00004990                 add     esp, 4
.text:00004993
.text:00004993 loc_4993:                               ; CODE XREF: _update_mouse_pointer+ACj
.text:00004993                 mov     esi, esp
.text:00004995                 mov     eax, [ebp+lpCursorName]
.text:00004998                 push    eax             ; lpCursorName
.text:00004999                 push    0               ; hInstance
.text:0000499B                 call    dword ptr ds:__imp__LoadCursorA@8 ; LoadCursorA(x,x)
.text:000049A1                 cmp     esi, esp
.text:000049A3                 call    __RTC_CheckEsp
.text:000049A8                 mov     [ebp+dwNewLong], eax
.text:000049AB                 mov     esi, esp
.text:000049AD                 mov     ecx, [ebp+dwNewLong]
.text:000049B0                 push    ecx             ; dwNewLong
.text:000049B1                 push    0FFFFFFF4h      ; nIndex
.text:000049B3                 mov     edx, dword ptr ds:_hwnd
.text:000049B9                 push    edx             ; hWnd
.text:000049BA                 call    dword ptr ds:__imp__SetClassLongA@12 ; SetClassLongA(x,x,x)
.text:000049C0                 cmp     esi, esp
.text:000049C2                 call    __RTC_CheckEsp
.text:000049C7                 mov     esi, esp
.text:000049C9                 mov     eax, [ebp+dwNewLong]
.text:000049CC                 push    eax             ; hCursor
.text:000049CD                 call    dword ptr ds:__imp__SetCursor@4 ; SetCursor(x)
.text:000049D3                 cmp     esi, esp
.text:000049D5                 call    __RTC_CheckEsp
.text:000049DA                 mov     ecx, [ebp+bShow]
.text:000049DD                 cmp     ecx, ds:?forced_visible@?1??update_mouse_pointer@@9@9 ; `update_mouse_pointer'::`2'::forced_visible
.text:000049E3                 jz      short loc_4A00
.text:000049E5                 mov     esi, esp
.text:000049E7                 mov     edx, [ebp+bShow]
.text:000049EA                 push    edx             ; bShow
.text:000049EB                 call    dword ptr ds:__imp__ShowCursor@4 ; ShowCursor(x)
.text:000049F1                 cmp     esi, esp
.text:000049F3                 call    __RTC_CheckEsp
.text:000049F8                 mov     eax, [ebp+bShow]
.text:000049FB                 mov     ds:?forced_visible@?1??update_mouse_pointer@@9@9, eax ; `update_mouse_pointer'::`2'::forced_visible
.text:00004A00
.text:00004A00 loc_4A00:                               ; CODE XREF: _update_mouse_pointer+10Bj
.text:00004A00                 pop     esi
.text:00004A01                 add     esp, 14h
.text:00004A04                 cmp     ebp, esp
.text:00004A06                 call    __RTC_CheckEsp
.text:00004A0B                 mov     esp, ebp
.text:00004A0D                 pop     ebp
.text:00004A0E                 retn
.text:00004A0E _update_mouse_pointer endp
.text:00004A0E
.text:00004A0E ; ---------------------------------------------------------------------------
.text:00004A0F $LN14           db 'curstype',0         ; DATA XREF: _update_mouse_pointer+AEo
.text:00004A18
.text:00004A18 ; =============== S U B R O U T I N E =======================================
.text:00004A18
.text:00004A18 ; Attributes: bp-based frame
.text:00004A18
.text:00004A18                 public _set_raw_mouse_mode
.text:00004A18 _set_raw_mouse_mode proc near
.text:00004A18
.text:00004A18 var_4           = dword ptr -4
.text:00004A18 arg_4           = dword ptr  0Ch
.text:00004A18
.text:00004A18                 push    ebp
.text:00004A19                 mov     ebp, esp
.text:00004A1B                 push    ecx
.text:00004A1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A23                 cmp     [ebp+arg_4], 0
.text:00004A27                 jz      short loc_4A46
.text:00004A29                 push    42h ; 'B'
.text:00004A2B                 mov     eax, dword ptr ds:_conf
.text:00004A30                 push    eax
.text:00004A31                 call    _conf_get_int
.text:00004A36                 add     esp, 8
.text:00004A39                 test    eax, eax
.text:00004A3B                 jnz     short loc_4A46
.text:00004A3D                 mov     [ebp+var_4], 1
.text:00004A44                 jmp     short loc_4A4D
.text:00004A46 ; ---------------------------------------------------------------------------
.text:00004A46
.text:00004A46 loc_4A46:                               ; CODE XREF: _set_raw_mouse_mode+Fj
.text:00004A46                                         ; _set_raw_mouse_mode+23j
.text:00004A46                 mov     [ebp+var_4], 0
.text:00004A4D
.text:00004A4D loc_4A4D:                               ; CODE XREF: _set_raw_mouse_mode+2Cj
.text:00004A4D                 mov     ecx, [ebp+var_4]
.text:00004A50                 mov     [ebp+arg_4], ecx
.text:00004A53                 mov     edx, [ebp+arg_4]
.text:00004A56                 mov     ds:_send_raw_mouse, edx
.text:00004A5C                 call    _update_mouse_pointer
.text:00004A61                 add     esp, 4
.text:00004A64                 cmp     ebp, esp
.text:00004A66                 call    __RTC_CheckEsp
.text:00004A6B                 mov     esp, ebp
.text:00004A6D                 pop     ebp
.text:00004A6E                 retn
.text:00004A6E _set_raw_mouse_mode endp
.text:00004A6E
.text:00004A6E ; ---------------------------------------------------------------------------
.text:00004A6F                 db 9 dup(0CCh)
.text:00004A78
.text:00004A78 ; =============== S U B R O U T I N E =======================================
.text:00004A78
.text:00004A78 ; Attributes: bp-based frame
.text:00004A78
.text:00004A78                 public _connection_fatal
.text:00004A78 _connection_fatal proc near
.text:00004A78
.text:00004A78 var_78          = byte ptr -78h
.text:00004A78 Dest            = byte ptr -74h
.text:00004A78 lpText          = dword ptr -0Ch
.text:00004A78 var_8           = dword ptr -8
.text:00004A78 var_4           = dword ptr -4
.text:00004A78 arg_4           = dword ptr  0Ch
.text:00004A78 arg_8           = byte ptr  10h
.text:00004A78
.text:00004A78                 push    ebp
.text:00004A79                 mov     ebp, esp
.text:00004A7B                 sub     esp, 78h
.text:00004A7E                 push    esi
.text:00004A7F                 push    edi
.text:00004A80                 lea     edi, [ebp+var_78]
.text:00004A83                 mov     ecx, 1Eh
.text:00004A88                 mov     eax, 0CCCCCCCCh
.text:00004A8D                 rep stosd
.text:00004A8F                 mov     eax, dword ptr ds:___security_cookie
.text:00004A94                 xor     eax, ebp
.text:00004A96                 mov     [ebp+var_4], eax
.text:00004A99                 lea     eax, [ebp+arg_8]
.text:00004A9C                 mov     [ebp+var_8], eax
.text:00004A9F                 mov     ecx, [ebp+var_8]
.text:00004AA2                 push    ecx
.text:00004AA3                 mov     edx, [ebp+arg_4]
.text:00004AA6                 push    edx
.text:00004AA7                 call    _dupvprintf
.text:00004AAC                 add     esp, 8
.text:00004AAF                 mov     [ebp+lpText], eax
.text:00004AB2                 mov     [ebp+var_8], 0
.text:00004AB9                 mov     eax, dword ptr ds:_appname
.text:00004ABE                 push    eax
.text:00004ABF                 push    offset $SG89362 ; "%.70s Fatal Error"
.text:00004AC4                 lea     ecx, [ebp+Dest]
.text:00004AC7                 push    ecx             ; Dest
.text:00004AC8                 call    _sprintf
.text:00004ACD                 add     esp, 0Ch
.text:00004AD0                 mov     esi, esp
.text:00004AD2                 push    10h             ; uType
.text:00004AD4                 lea     edx, [ebp+Dest]
.text:00004AD7                 push    edx             ; lpCaption
.text:00004AD8                 mov     eax, [ebp+lpText]
.text:00004ADB                 push    eax             ; lpText
.text:00004ADC                 mov     ecx, dword ptr ds:_hwnd
.text:00004AE2                 push    ecx             ; hWnd
.text:00004AE3                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00004AE9                 cmp     esi, esp
.text:00004AEB                 call    __RTC_CheckEsp
.text:00004AF0                 mov     edx, [ebp+lpText]
.text:00004AF3                 push    edx
.text:00004AF4                 call    _safefree
.text:00004AF9                 add     esp, 4
.text:00004AFC                 push    4
.text:00004AFE                 mov     eax, dword ptr ds:_conf
.text:00004B03                 push    eax
.text:00004B04                 call    _conf_get_int
.text:00004B09                 add     esp, 8
.text:00004B0C                 test    eax, eax
.text:00004B0E                 jnz     short loc_4B23
.text:00004B10                 mov     esi, esp
.text:00004B12                 push    1               ; nExitCode
.text:00004B14                 call    dword ptr ds:__imp__PostQuitMessage@4 ; PostQuitMessage(x)
.text:00004B1A                 cmp     esi, esp
.text:00004B1C                 call    __RTC_CheckEsp
.text:00004B21                 jmp     short loc_4B32
.text:00004B23 ; ---------------------------------------------------------------------------
.text:00004B23
.text:00004B23 loc_4B23:                               ; CODE XREF: _connection_fatal+96j
.text:00004B23                 push    0
.text:00004B25                 push    offset _close_session
.text:00004B2A                 call    _queue_toplevel_callback
.text:00004B2F                 add     esp, 8
.text:00004B32
.text:00004B32 loc_4B32:                               ; CODE XREF: _connection_fatal+A9j
.text:00004B32                 push    edx
.text:00004B33                 mov     ecx, ebp
.text:00004B35                 push    eax
.text:00004B36                 lea     edx, $LN7_0
.text:00004B3C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004B41                 pop     eax
.text:00004B42                 pop     edx
.text:00004B43                 pop     edi
.text:00004B44                 pop     esi
.text:00004B45                 mov     ecx, [ebp+var_4]
.text:00004B48                 xor     ecx, ebp
.text:00004B4A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004B4F                 add     esp, 78h
.text:00004B52                 cmp     ebp, esp
.text:00004B54                 call    __RTC_CheckEsp
.text:00004B59                 mov     esp, ebp
.text:00004B5B                 pop     ebp
.text:00004B5C                 retn
.text:00004B5C _connection_fatal endp
.text:00004B5C
.text:00004B5C ; ---------------------------------------------------------------------------
.text:00004B5D                 align 10h
.text:00004B60 $LN7_0          dd 1                    ; DATA XREF: _connection_fatal+BEo
.text:00004B64                 dd offset $LN6_0
.text:00004B68 $LN6_0          dd 0FFFFFF8Ch, 64h      ; DATA XREF: .text:00004B64o
.text:00004B70                 dd offset $LN5_0        ; "morestuff"
.text:00004B74 $LN5_0          db 'morestuff',0        ; DATA XREF: .text:00004B70o
.text:00004B7E                 db 0Ah dup(0CCh)
.text:00004B88
.text:00004B88 ; =============== S U B R O U T I N E =======================================
.text:00004B88
.text:00004B88 ; Attributes: bp-based frame
.text:00004B88
.text:00004B88 _close_session  proc near               ; DATA XREF: _connection_fatal+ADo
.text:00004B88                                         ; _notify_remote_exit+89o
.text:00004B88
.text:00004B88 var_74          = dword ptr -74h
.text:00004B88 Dest            = byte ptr -6Ch
.text:00004B88 var_4           = dword ptr -4
.text:00004B88
.text:00004B88                 push    ebp
.text:00004B89                 mov     ebp, esp
.text:00004B8B                 sub     esp, 74h
.text:00004B8E                 push    esi
.text:00004B8F                 push    edi
.text:00004B90                 lea     edi, [ebp+var_74]
.text:00004B93                 mov     ecx, 1Dh
.text:00004B98                 mov     eax, 0CCCCCCCCh
.text:00004B9D                 rep stosd
.text:00004B9F                 mov     eax, dword ptr ds:___security_cookie
.text:00004BA4                 xor     eax, ebp
.text:00004BA6                 mov     [ebp+var_4], eax
.text:00004BA9                 mov     ds:_session_closed, 1
.text:00004BB3                 mov     eax, dword ptr ds:_appname
.text:00004BB8                 push    eax
.text:00004BB9                 push    offset $SG88993 ; "%.70s (inactive)"
.text:00004BBE                 lea     ecx, [ebp+Dest]
.text:00004BC1                 push    ecx             ; Dest
.text:00004BC2                 call    _sprintf
.text:00004BC7                 add     esp, 0Ch
.text:00004BCA                 lea     edx, [ebp+Dest]
.text:00004BCD                 push    edx             ; Str
.text:00004BCE                 push    0               ; int
.text:00004BD0                 call    _set_icon
.text:00004BD5                 add     esp, 8
.text:00004BD8                 lea     eax, [ebp+Dest]
.text:00004BDB                 push    eax             ; Str
.text:00004BDC                 push    0               ; int
.text:00004BDE                 call    _set_title
.text:00004BE3                 add     esp, 8
.text:00004BE6                 cmp     ds:_ldisc, 0
.text:00004BED                 jz      short loc_4C08
.text:00004BEF                 mov     ecx, ds:_ldisc
.text:00004BF5                 push    ecx
.text:00004BF6                 call    _ldisc_free
.text:00004BFB                 add     esp, 4
.text:00004BFE                 mov     ds:_ldisc, 0
.text:00004C08
.text:00004C08 loc_4C08:                               ; CODE XREF: _close_session+65j
.text:00004C08                 cmp     ds:_back, 0
.text:00004C0F                 jz      short loc_4C5F
.text:00004C11                 mov     esi, esp
.text:00004C13                 mov     edx, ds:_backhandle
.text:00004C19                 push    edx
.text:00004C1A                 mov     eax, ds:_back
.text:00004C1F                 mov     ecx, [eax+4]
.text:00004C22                 call    ecx
.text:00004C24                 add     esp, 4
.text:00004C27                 cmp     esi, esp
.text:00004C29                 call    __RTC_CheckEsp
.text:00004C2E                 mov     ds:_backhandle, 0
.text:00004C38                 mov     ds:_back, 0
.text:00004C42                 push    0
.text:00004C44                 push    0
.text:00004C46                 mov     edx, dword ptr ds:_term
.text:00004C4C                 push    edx
.text:00004C4D                 call    _term_provide_resize_fn
.text:00004C52                 add     esp, 0Ch
.text:00004C55                 push    0
.text:00004C57                 call    _update_specials_menu
.text:00004C5C                 add     esp, 4
.text:00004C5F
.text:00004C5F loc_4C5F:                               ; CODE XREF: _close_session+87j
.text:00004C5F                 mov     [ebp+var_74], 0
.text:00004C66                 jmp     short loc_4C71
.text:00004C68 ; ---------------------------------------------------------------------------
.text:00004C68
.text:00004C68 loc_4C68:                               ; CODE XREF: _close_session+132j
.text:00004C68                 mov     eax, [ebp+var_74]
.text:00004C6B                 add     eax, 1
.text:00004C6E                 mov     [ebp+var_74], eax
.text:00004C71
.text:00004C71 loc_4C71:                               ; CODE XREF: _close_session+DEj
.text:00004C71                 cmp     [ebp+var_74], 2
.text:00004C75                 jnb     short loc_4CBC
.text:00004C77                 mov     esi, esp
.text:00004C79                 push    0               ; uFlags
.text:00004C7B                 push    40h ; '@'       ; uPosition
.text:00004C7D                 mov     ecx, [ebp+var_74]
.text:00004C80                 mov     edx, ds:_popup_menus[ecx*4]
.text:00004C87                 push    edx             ; hMenu
.text:00004C88                 call    dword ptr ds:__imp__DeleteMenu@12 ; DeleteMenu(x,x,x)
.text:00004C8E                 cmp     esi, esp
.text:00004C90                 call    __RTC_CheckEsp
.text:00004C95                 mov     esi, esp
.text:00004C97                 push    offset $SG89007 ; "&Restart Session"
.text:00004C9C                 push    40h ; '@'       ; uIDNewItem
.text:00004C9E                 push    0               ; uFlags
.text:00004CA0                 push    30h ; '0'       ; uPosition
.text:00004CA2                 mov     eax, [ebp+var_74]
.text:00004CA5                 mov     ecx, ds:_popup_menus[eax*4]
.text:00004CAC                 push    ecx             ; hMenu
.text:00004CAD                 call    dword ptr ds:__imp__InsertMenuA@20 ; InsertMenuA(x,x,x,x,x)
.text:00004CB3                 cmp     esi, esp
.text:00004CB5                 call    __RTC_CheckEsp
.text:00004CBA                 jmp     short loc_4C68
.text:00004CBC ; ---------------------------------------------------------------------------
.text:00004CBC
.text:00004CBC loc_4CBC:                               ; CODE XREF: _close_session+EDj
.text:00004CBC                 push    edx
.text:00004CBD                 mov     ecx, ebp
.text:00004CBF                 push    eax
.text:00004CC0                 lea     edx, $LN10_2
.text:00004CC6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004CCB                 pop     eax
.text:00004CCC                 pop     edx
.text:00004CCD                 pop     edi
.text:00004CCE                 pop     esi
.text:00004CCF                 mov     ecx, [ebp+var_4]
.text:00004CD2                 xor     ecx, ebp
.text:00004CD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004CD9                 add     esp, 74h
.text:00004CDC                 cmp     ebp, esp
.text:00004CDE                 call    __RTC_CheckEsp
.text:00004CE3                 mov     esp, ebp
.text:00004CE5                 pop     ebp
.text:00004CE6                 retn
.text:00004CE6 _close_session  endp
.text:00004CE6
.text:00004CE6 ; ---------------------------------------------------------------------------
.text:00004CE7                 align 4
.text:00004CE8 $LN10_2         dd 1                    ; DATA XREF: _close_session+138o
.text:00004CEC                 dd offset $LN9_1
.text:00004CF0 $LN9_1          dd 0FFFFFF94h, 64h      ; DATA XREF: .text:00004CECo
.text:00004CF8                 dd offset $LN8_1        ; "morestuff"
.text:00004CFC $LN8_1          db 'morestuff',0        ; DATA XREF: .text:00004CF8o
.text:00004D06                 align 4
.text:00004D08
.text:00004D08 ; =============== S U B R O U T I N E =======================================
.text:00004D08
.text:00004D08 ; Attributes: noreturn bp-based frame
.text:00004D08
.text:00004D08                 public _cmdline_error
.text:00004D08 _cmdline_error  proc near               ; CODE XREF: WinMain(x,x,x,x)+42Cp
.text:00004D08                                         ; WinMain(x,x,x,x)+7B7p
.text:00004D08
.text:00004D08 var_78          = byte ptr -78h
.text:00004D08 Dest            = byte ptr -74h
.text:00004D08 lpText          = dword ptr -0Ch
.text:00004D08 var_8           = dword ptr -8
.text:00004D08 var_4           = dword ptr -4
.text:00004D08 arg_0           = dword ptr  8
.text:00004D08 arg_4           = byte ptr  0Ch
.text:00004D08
.text:00004D08                 push    ebp
.text:00004D09                 mov     ebp, esp
.text:00004D0B                 sub     esp, 78h
.text:00004D0E                 push    esi
.text:00004D0F                 push    edi
.text:00004D10                 lea     edi, [ebp+var_78]
.text:00004D13                 mov     ecx, 1Eh
.text:00004D18                 mov     eax, 0CCCCCCCCh
.text:00004D1D                 rep stosd
.text:00004D1F                 mov     eax, dword ptr ds:___security_cookie
.text:00004D24                 xor     eax, ebp
.text:00004D26                 mov     [ebp+var_4], eax
.text:00004D29                 lea     eax, [ebp+arg_4]
.text:00004D2C                 mov     [ebp+var_8], eax
.text:00004D2F                 mov     ecx, [ebp+var_8]
.text:00004D32                 push    ecx
.text:00004D33                 mov     edx, [ebp+arg_0]
.text:00004D36                 push    edx
.text:00004D37                 call    _dupvprintf
.text:00004D3C                 add     esp, 8
.text:00004D3F                 mov     [ebp+lpText], eax
.text:00004D42                 mov     [ebp+var_8], 0
.text:00004D49                 mov     eax, dword ptr ds:_appname
.text:00004D4E                 push    eax
.text:00004D4F                 push    offset $SG89376 ; "%.70s Command Line Error"
.text:00004D54                 lea     ecx, [ebp+Dest]
.text:00004D57                 push    ecx             ; Dest
.text:00004D58                 call    _sprintf
.text:00004D5D                 add     esp, 0Ch
.text:00004D60                 mov     esi, esp
.text:00004D62                 push    10h             ; uType
.text:00004D64                 lea     edx, [ebp+Dest]
.text:00004D67                 push    edx             ; lpCaption
.text:00004D68                 mov     eax, [ebp+lpText]
.text:00004D6B                 push    eax             ; lpText
.text:00004D6C                 mov     ecx, dword ptr ds:_hwnd
.text:00004D72                 push    ecx             ; hWnd
.text:00004D73                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00004D79                 cmp     esi, esp
.text:00004D7B                 call    __RTC_CheckEsp
.text:00004D80                 mov     edx, [ebp+lpText]
.text:00004D83                 push    edx
.text:00004D84                 call    _safefree
.text:00004D89                 add     esp, 4
.text:00004D8C                 push    1               ; Code
.text:00004D8E                 call    _exit
.text:00004D8E _cmdline_error  endp
.text:00004D8E
.text:00004D93 ; ---------------------------------------------------------------------------
.text:00004D93                 push    edx
.text:00004D94                 mov     ecx, ebp
.text:00004D96                 push    eax
.text:00004D97                 lea     edx, $LN5_1
.text:00004D9D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004DA2                 pop     eax
.text:00004DA3                 pop     edx
.text:00004DA4                 pop     edi
.text:00004DA5                 pop     esi
.text:00004DA6                 mov     ecx, [ebp-4]
.text:00004DA9                 xor     ecx, ebp
.text:00004DAB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004DB0                 add     esp, 78h
.text:00004DB3                 cmp     ebp, esp
.text:00004DB5                 call    __RTC_CheckEsp
.text:00004DBA                 mov     esp, ebp
.text:00004DBC                 pop     ebp
.text:00004DBD                 retn
.text:00004DBD ; ---------------------------------------------------------------------------
.text:00004DBE                 align 10h
.text:00004DC0 $LN5_1          dd 1                    ; DATA XREF: .text:00004D97o
.text:00004DC4                 dd offset $LN4_1
.text:00004DC8 $LN4_1          dd 0FFFFFF8Ch, 64h      ; DATA XREF: .text:00004DC4o
.text:00004DD0                 dd offset $LN3_1        ; "morestuff"
.text:00004DD4 $LN3_1          db 'morestuff',0        ; DATA XREF: .text:00004DD0o
.text:00004DDE                 db 0Ah dup(0CCh)
.text:00004DE8
.text:00004DE8 ; =============== S U B R O U T I N E =======================================
.text:00004DE8
.text:00004DE8 ; Attributes: bp-based frame
.text:00004DE8
.text:00004DE8 _conftopalette  proc near               ; CODE XREF: WinMain(x,x,x,x)+A47p
.text:00004DE8                                         ; WndProc(x,x,x,x)+8D2p
.text:00004DE8
.text:00004DE8 var_24          = dword ptr -24h
.text:00004DE8 var_20          = dword ptr -20h
.text:00004DE8 var_1C          = dword ptr -1Ch
.text:00004DE8 var_18          = dword ptr -18h
.text:00004DE8 var_14          = dword ptr -14h
.text:00004DE8 var_10          = dword ptr -10h
.text:00004DE8 var_C           = dword ptr -0Ch
.text:00004DE8 var_8           = dword ptr -8
.text:00004DE8 var_4           = dword ptr -4
.text:00004DE8
.text:00004DE8                 push    ebp
.text:00004DE9                 mov     ebp, esp
.text:00004DEB                 sub     esp, 24h
.text:00004DEE                 mov     eax, 0CCCCCCCCh
.text:00004DF3                 mov     [ebp+var_24], eax
.text:00004DF6                 mov     [ebp+var_20], eax
.text:00004DF9                 mov     [ebp+var_1C], eax
.text:00004DFC                 mov     [ebp+var_18], eax
.text:00004DFF                 mov     [ebp+var_14], eax
.text:00004E02                 mov     [ebp+var_10], eax
.text:00004E05                 mov     [ebp+var_C], eax
.text:00004E08                 mov     [ebp+var_8], eax
.text:00004E0B                 mov     [ebp+var_4], eax
.text:00004E0E                 mov     [ebp+var_4], 0
.text:00004E15                 jmp     short loc_4E20
.text:00004E17 ; ---------------------------------------------------------------------------
.text:00004E17
.text:00004E17 loc_4E17:                               ; CODE XREF: _conftopalette+CAj
.text:00004E17                 mov     eax, [ebp+var_4]
.text:00004E1A                 add     eax, 1
.text:00004E1D                 mov     [ebp+var_4], eax
.text:00004E20
.text:00004E20 loc_4E20:                               ; CODE XREF: _conftopalette+2Dj
.text:00004E20                 cmp     [ebp+var_4], 16h
.text:00004E24                 jge     loc_4EB7
.text:00004E2A                 mov     ecx, [ebp+var_4]
.text:00004E2D                 mov     edx, ds:?ww@?1??conftopalette@@9@9[ecx*4] ; `conftopalette'::`2'::ww
.text:00004E34                 mov     [ebp+var_8], edx
.text:00004E37                 mov     eax, [ebp+var_4]
.text:00004E3A                 imul    eax, 3
.text:00004E3D                 push    eax
.text:00004E3E                 push    84h ; 'ä'
.text:00004E43                 mov     ecx, dword ptr ds:_conf
.text:00004E49                 push    ecx
.text:00004E4A                 call    _conf_get_int_int
.text:00004E4F                 add     esp, 0Ch
.text:00004E52                 mov     edx, [ebp+var_8]
.text:00004E55                 imul    edx, 3
.text:00004E58                 mov     ds:byte_282[edx], al
.text:00004E5E                 mov     eax, [ebp+var_4]
.text:00004E61                 imul    eax, 3
.text:00004E64                 add     eax, 1
.text:00004E67                 push    eax
.text:00004E68                 push    84h ; 'ä'
.text:00004E6D                 mov     ecx, dword ptr ds:_conf
.text:00004E73                 push    ecx
.text:00004E74                 call    _conf_get_int_int
.text:00004E79                 add     esp, 0Ch
.text:00004E7C                 mov     edx, [ebp+var_8]
.text:00004E7F                 imul    edx, 3
.text:00004E82                 mov     ds:byte_281[edx], al
.text:00004E88                 mov     eax, [ebp+var_4]
.text:00004E8B                 imul    eax, 3
.text:00004E8E                 add     eax, 2
.text:00004E91                 push    eax
.text:00004E92                 push    84h ; 'ä'
.text:00004E97                 mov     ecx, dword ptr ds:_conf
.text:00004E9D                 push    ecx
.text:00004E9E                 call    _conf_get_int_int
.text:00004EA3                 add     esp, 0Ch
.text:00004EA6                 mov     edx, [ebp+var_8]
.text:00004EA9                 imul    edx, 3
.text:00004EAC                 mov     ds:_defpal[edx], al
.text:00004EB2                 jmp     loc_4E17
.text:00004EB7 ; ---------------------------------------------------------------------------
.text:00004EB7
.text:00004EB7 loc_4EB7:                               ; CODE XREF: _conftopalette+3Cj
.text:00004EB7                 mov     [ebp+var_4], 0
.text:00004EBE                 jmp     short loc_4EC9
.text:00004EC0 ; ---------------------------------------------------------------------------
.text:00004EC0
.text:00004EC0 loc_4EC0:                               ; CODE XREF: _conftopalette:loc_4FECj
.text:00004EC0                 mov     eax, [ebp+var_4]
.text:00004EC3                 add     eax, 1
.text:00004EC6                 mov     [ebp+var_4], eax
.text:00004EC9
.text:00004EC9 loc_4EC9:                               ; CODE XREF: _conftopalette+D6j
.text:00004EC9                 cmp     [ebp+var_4], 0F0h ; '='
.text:00004ED0                 jge     loc_4FF1
.text:00004ED6                 cmp     [ebp+var_4], 0D8h ; '+'
.text:00004EDD                 jge     loc_4F9E
.text:00004EE3                 mov     eax, [ebp+var_4]
.text:00004EE6                 cdq
.text:00004EE7                 mov     ecx, 24h ; '$'
.text:00004EEC                 idiv    ecx
.text:00004EEE                 mov     [ebp+var_C], eax
.text:00004EF1                 mov     eax, [ebp+var_4]
.text:00004EF4                 cdq
.text:00004EF5                 mov     ecx, 6
.text:00004EFA                 idiv    ecx
.text:00004EFC                 cdq
.text:00004EFD                 mov     ecx, 6
.text:00004F02                 idiv    ecx
.text:00004F04                 mov     [ebp+var_10], edx
.text:00004F07                 mov     eax, [ebp+var_4]
.text:00004F0A                 cdq
.text:00004F0B                 mov     ecx, 6
.text:00004F10                 idiv    ecx
.text:00004F12                 mov     [ebp+var_14], edx
.text:00004F15                 cmp     [ebp+var_C], 0
.text:00004F19                 jz      short loc_4F29
.text:00004F1B                 mov     edx, [ebp+var_C]
.text:00004F1E                 imul    edx, 28h
.text:00004F21                 add     edx, 37h ; '7'
.text:00004F24                 mov     [ebp+var_1C], edx
.text:00004F27                 jmp     short loc_4F30
.text:00004F29 ; ---------------------------------------------------------------------------
.text:00004F29
.text:00004F29 loc_4F29:                               ; CODE XREF: _conftopalette+131j
.text:00004F29                 mov     [ebp+var_1C], 0
.text:00004F30
.text:00004F30 loc_4F30:                               ; CODE XREF: _conftopalette+13Fj
.text:00004F30                 mov     eax, [ebp+var_4]
.text:00004F33                 add     eax, 10h
.text:00004F36                 imul    eax, 3
.text:00004F39                 mov     cl, byte ptr [ebp+var_1C]
.text:00004F3C                 mov     ds:byte_282[eax], cl
.text:00004F42                 cmp     [ebp+var_10], 0
.text:00004F46                 jz      short loc_4F56
.text:00004F48                 mov     edx, [ebp+var_10]
.text:00004F4B                 imul    edx, 28h
.text:00004F4E                 add     edx, 37h ; '7'
.text:00004F51                 mov     [ebp+var_20], edx
.text:00004F54                 jmp     short loc_4F5D
.text:00004F56 ; ---------------------------------------------------------------------------
.text:00004F56
.text:00004F56 loc_4F56:                               ; CODE XREF: _conftopalette+15Ej
.text:00004F56                 mov     [ebp+var_20], 0
.text:00004F5D
.text:00004F5D loc_4F5D:                               ; CODE XREF: _conftopalette+16Cj
.text:00004F5D                 mov     eax, [ebp+var_4]
.text:00004F60                 add     eax, 10h
.text:00004F63                 imul    eax, 3
.text:00004F66                 mov     cl, byte ptr [ebp+var_20]
.text:00004F69                 mov     ds:byte_281[eax], cl
.text:00004F6F                 cmp     [ebp+var_14], 0
.text:00004F73                 jz      short loc_4F83
.text:00004F75                 mov     edx, [ebp+var_14]
.text:00004F78                 imul    edx, 28h
.text:00004F7B                 add     edx, 37h ; '7'
.text:00004F7E                 mov     [ebp+var_24], edx
.text:00004F81                 jmp     short loc_4F8A
.text:00004F83 ; ---------------------------------------------------------------------------
.text:00004F83
.text:00004F83 loc_4F83:                               ; CODE XREF: _conftopalette+18Bj
.text:00004F83                 mov     [ebp+var_24], 0
.text:00004F8A
.text:00004F8A loc_4F8A:                               ; CODE XREF: _conftopalette+199j
.text:00004F8A                 mov     eax, [ebp+var_4]
.text:00004F8D                 add     eax, 10h
.text:00004F90                 imul    eax, 3
.text:00004F93                 mov     cl, byte ptr [ebp+var_24]
.text:00004F96                 mov     ds:_defpal[eax], cl
.text:00004F9C                 jmp     short loc_4FEC
.text:00004F9E ; ---------------------------------------------------------------------------
.text:00004F9E
.text:00004F9E loc_4F9E:                               ; CODE XREF: _conftopalette+F5j
.text:00004F9E                 mov     edx, [ebp+var_4]
.text:00004FA1                 sub     edx, 0D8h ; '+'
.text:00004FA7                 mov     [ebp+var_18], edx
.text:00004FAA                 mov     eax, [ebp+var_18]
.text:00004FAD                 imul    eax, 0Ah
.text:00004FB0                 add     eax, 8
.text:00004FB3                 mov     [ebp+var_18], eax
.text:00004FB6                 mov     ecx, [ebp+var_4]
.text:00004FB9                 add     ecx, 10h
.text:00004FBC                 imul    ecx, 3
.text:00004FBF                 mov     dl, byte ptr [ebp+var_18]
.text:00004FC2                 mov     ds:_defpal[ecx], dl
.text:00004FC8                 mov     eax, [ebp+var_4]
.text:00004FCB                 add     eax, 10h
.text:00004FCE                 imul    eax, 3
.text:00004FD1                 mov     cl, byte ptr [ebp+var_18]
.text:00004FD4                 mov     ds:byte_281[eax], cl
.text:00004FDA                 mov     edx, [ebp+var_4]
.text:00004FDD                 add     edx, 10h
.text:00004FE0                 imul    edx, 3
.text:00004FE3                 mov     al, byte ptr [ebp+var_18]
.text:00004FE6                 mov     ds:byte_282[edx], al
.text:00004FEC
.text:00004FEC loc_4FEC:                               ; CODE XREF: _conftopalette+1B4j
.text:00004FEC                 jmp     loc_4EC0
.text:00004FF1 ; ---------------------------------------------------------------------------
.text:00004FF1
.text:00004FF1 loc_4FF1:                               ; CODE XREF: _conftopalette+E8j
.text:00004FF1                 push    81h ; 'ü'
.text:00004FF6                 mov     ecx, dword ptr ds:_conf
.text:00004FFC                 push    ecx
.text:00004FFD                 call    _conf_get_int
.text:00005002                 add     esp, 8
.text:00005005                 test    eax, eax
.text:00005007                 jz      short loc_500E
.text:00005009                 call    _systopalette
.text:0000500E
.text:0000500E loc_500E:                               ; CODE XREF: _conftopalette+21Fj
.text:0000500E                 add     esp, 24h
.text:00005011                 cmp     ebp, esp
.text:00005013                 call    __RTC_CheckEsp
.text:00005018                 mov     esp, ebp
.text:0000501A                 pop     ebp
.text:0000501B                 retn
.text:0000501B _conftopalette  endp
.text:0000501B
.text:0000501B ; ---------------------------------------------------------------------------
.text:0000501C                 db 0Ch dup(0CCh)
.text:00005028
.text:00005028 ; =============== S U B R O U T I N E =======================================
.text:00005028
.text:00005028 ; Attributes: bp-based frame
.text:00005028
.text:00005028 _systopalette   proc near               ; CODE XREF: _conftopalette+221p
.text:00005028                                         ; WndProc(x,x,x,x)+2B83p
.text:00005028
.text:00005028 var_14          = dword ptr -14h
.text:00005028 var_10          = dword ptr -10h
.text:00005028 var_C           = dword ptr -0Ch
.text:00005028 var_8           = dword ptr -8
.text:00005028 var_4           = dword ptr -4
.text:00005028
.text:00005028                 push    ebp
.text:00005029                 mov     ebp, esp
.text:0000502B
.text:0000502B loc_502B:                               ; DATA XREF: .data:$SG89104o
.text:0000502B                 sub     esp, 14h
.text:0000502E                 push    esi
.text:0000502F                 mov     eax, 0CCCCCCCCh
.text:00005034                 mov     [ebp+var_14], eax
.text:00005037                 mov     [ebp+var_10], eax
.text:0000503A                 mov     [ebp+var_C], eax
.text:0000503D                 mov     [ebp+var_8], eax
.text:00005040                 mov     [ebp+var_4], eax
.text:00005043                 mov     [ebp+var_4], 0
.text:0000504A                 jmp     short loc_5055
.text:0000504C ; ---------------------------------------------------------------------------
.text:0000504C
.text:0000504C loc_504C:                               ; CODE XREF: _systopalette+110j
.text:0000504C                 mov     eax, [ebp+var_4]
.text:0000504F                 add     eax, 1
.text:00005052                 mov     [ebp+var_4], eax
.text:00005055
.text:00005055 loc_5055:                               ; CODE XREF: _systopalette+22j
.text:00005055                 cmp     [ebp+var_4], 4
.text:00005059                 jnb     loc_513D
.text:0000505F                 mov     ecx, [ebp+var_4]
.text:00005062                 imul    ecx, 0Ch
.text:00005065                 mov     esi, esp
.text:00005067                 mov     edx, ds:?or@?1??systopalette@@9@9[ecx] ; `systopalette'::`2'::or
.text:0000506D                 push    edx             ; nIndex
.text:0000506E                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text:00005074                 cmp     esi, esp
.text:00005076                 call    __RTC_CheckEsp
.text:0000507B                 mov     [ebp+var_8], eax
.text:0000507E                 mov     eax, [ebp+var_8]
.text:00005081                 and     eax, 0FFh
.text:00005086                 mov     [ebp+var_C], eax
.text:00005089                 mov     ecx, [ebp+var_4]
.text:0000508C                 imul    ecx, 0Ch
.text:0000508F                 mov     edx, ds:off_2170[ecx]
.text:00005095                 imul    edx, 3
.text:00005098                 mov     al, byte ptr [ebp+var_C]
.text:0000509B                 mov     ds:byte_282[edx], al
.text:000050A1                 mov     ecx, [ebp+var_4]
.text:000050A4                 imul    ecx, 0Ch
.text:000050A7                 mov     edx, ds:off_216C[ecx]
.text:000050AD                 imul    edx, 3
.text:000050B0                 mov     al, byte ptr [ebp+var_C]
.text:000050B3                 mov     ds:byte_282[edx], al
.text:000050B9                 movzx   ecx, word ptr [ebp+var_8]
.text:000050BD                 sar     ecx, 8
.text:000050C0                 and     ecx, 0FFh
.text:000050C6                 mov     [ebp+var_10], ecx
.text:000050C9                 mov     edx, [ebp+var_4]
.text:000050CC                 imul    edx, 0Ch
.text:000050CF                 mov     eax, ds:off_2170[edx]
.text:000050D5                 imul    eax, 3
.text:000050D8                 mov     cl, byte ptr [ebp+var_10]
.text:000050DB                 mov     ds:byte_281[eax], cl
.text:000050E1                 mov     edx, [ebp+var_4]
.text:000050E4                 imul    edx, 0Ch
.text:000050E7                 mov     eax, ds:off_216C[edx]
.text:000050ED                 imul    eax, 3
.text:000050F0                 mov     cl, byte ptr [ebp+var_10]
.text:000050F3                 mov     ds:byte_281[eax], cl
.text:000050F9                 mov     edx, [ebp+var_8]
.text:000050FC                 shr     edx, 10h
.text:000050FF                 and     edx, 0FFh
.text:00005105                 mov     [ebp+var_14], edx
.text:00005108                 mov     eax, [ebp+var_4]
.text:0000510B                 imul    eax, 0Ch
.text:0000510E                 mov     ecx, ds:off_2170[eax]
.text:00005114                 imul    ecx, 3
.text:00005117                 mov     dl, byte ptr [ebp+var_14]
.text:0000511A                 mov     ds:_defpal[ecx], dl
.text:00005120                 mov     eax, [ebp+var_4]
.text:00005123                 imul    eax, 0Ch
.text:00005126                 mov     ecx, ds:off_216C[eax]
.text:0000512C                 imul    ecx, 3
.text:0000512F                 mov     dl, byte ptr [ebp+var_14]
.text:00005132                 mov     ds:_defpal[ecx], dl
.text:00005138                 jmp     loc_504C
.text:0000513D ; ---------------------------------------------------------------------------
.text:0000513D
.text:0000513D loc_513D:                               ; CODE XREF: _systopalette+31j
.text:0000513D                 pop     esi
.text:0000513E                 add     esp, 14h
.text:00005141                 cmp     ebp, esp
.text:00005143                 call    __RTC_CheckEsp
.text:00005148                 mov     esp, ebp
.text:0000514A                 pop     ebp
.text:0000514B                 retn
.text:0000514B _systopalette   endp
.text:0000514B
.text:0000514B ; ---------------------------------------------------------------------------
.text:0000514C                 db 0Ch dup(0CCh)
.text:00005158
.text:00005158 ; =============== S U B R O U T I N E =======================================
.text:00005158
.text:00005158 ; Attributes: bp-based frame
.text:00005158
.text:00005158 _init_palette   proc near               ; CODE XREF: WinMain(x,x,x,x)+1248p
.text:00005158                                         ; WndProc(x,x,x,x)+8D7p ...
.text:00005158
.text:00005158 hdc             = dword ptr -8
.text:00005158 var_4           = dword ptr -4
.text:00005158
.text:00005158                 push    ebp
.text:00005159                 mov     ebp, esp
.text:0000515B                 sub     esp, 8
.text:0000515E                 push    esi
.text:0000515F                 push    edi
.text:00005160                 mov     [ebp+hdc], 0CCCCCCCCh
.text:00005167                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000516E                 mov     esi, esp
.text:00005170                 mov     eax, dword ptr ds:_hwnd
.text:00005175                 push    eax             ; hWnd
.text:00005176                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text:0000517C                 cmp     esi, esp
.text:0000517E                 call    __RTC_CheckEsp
.text:00005183                 mov     [ebp+hdc], eax
.text:00005186                 cmp     [ebp+hdc], 0
.text:0000518A                 jz      loc_5304
.text:00005190                 push    82h ; 'é'
.text:00005195                 mov     ecx, dword ptr ds:_conf
.text:0000519B                 push    ecx
.text:0000519C                 call    _conf_get_int
.text:000051A1                 add     esp, 8
.text:000051A4                 test    eax, eax
.text:000051A6                 jz      loc_52EA
.text:000051AC                 mov     esi, esp
.text:000051AE                 push    26h ; '&'       ; index
.text:000051B0                 mov     edx, [ebp+hdc]
.text:000051B3                 push    edx             ; hdc
.text:000051B4                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text:000051BA                 cmp     esi, esp
.text:000051BC                 call    __RTC_CheckEsp
.text:000051C1                 and     eax, 100h
.text:000051C6                 jz      loc_52EA
.text:000051CC                 push    1
.text:000051CE                 push    41Ch
.text:000051D3                 call    _safemalloc
.text:000051D8                 add     esp, 8
.text:000051DB                 mov     ds:_logpal, eax
.text:000051E0                 mov     eax, 300h
.text:000051E5                 mov     ecx, ds:_logpal
.text:000051EB                 mov     [ecx], ax
.text:000051EE                 mov     edx, 106h
.text:000051F3                 mov     eax, ds:_logpal
.text:000051F8                 mov     [eax+2], dx
.text:000051FC                 mov     [ebp+var_4], 0
.text:00005203                 jmp     short loc_520E
.text:00005205 ; ---------------------------------------------------------------------------
.text:00005205
.text:00005205 loc_5205:                               ; CODE XREF: _init_palette+116j
.text:00005205                 mov     ecx, [ebp+var_4]
.text:00005208                 add     ecx, 1
.text:0000520B                 mov     [ebp+var_4], ecx
.text:0000520E
.text:0000520E loc_520E:                               ; CODE XREF: _init_palette+ABj
.text:0000520E                 cmp     [ebp+var_4], 106h
.text:00005215                 jge     short loc_5270
.text:00005217                 mov     edx, [ebp+var_4]
.text:0000521A                 imul    edx, 3
.text:0000521D                 mov     eax, [ebp+var_4]
.text:00005220                 mov     ecx, ds:_logpal
.text:00005226                 mov     dl, ds:byte_282[edx]
.text:0000522C                 mov     [ecx+eax*4+4], dl
.text:00005230                 mov     eax, [ebp+var_4]
.text:00005233                 imul    eax, 3
.text:00005236                 mov     ecx, [ebp+var_4]
.text:00005239                 mov     edx, ds:_logpal
.text:0000523F                 mov     al, ds:byte_281[eax]
.text:00005245                 mov     [edx+ecx*4+5], al
.text:00005249                 mov     ecx, [ebp+var_4]
.text:0000524C                 imul    ecx, 3
.text:0000524F                 mov     edx, [ebp+var_4]
.text:00005252                 mov     eax, ds:_logpal
.text:00005257                 mov     cl, ds:_defpal[ecx]
.text:0000525D                 mov     [eax+edx*4+6], cl
.text:00005261                 mov     edx, [ebp+var_4]
.text:00005264                 mov     eax, ds:_logpal
.text:00005269                 mov     byte ptr [eax+edx*4+7], 4
.text:0000526E                 jmp     short loc_5205
.text:00005270 ; ---------------------------------------------------------------------------
.text:00005270
.text:00005270 loc_5270:                               ; CODE XREF: _init_palette+BDj
.text:00005270                 mov     esi, esp
.text:00005272                 mov     ecx, ds:_logpal
.text:00005278                 push    ecx             ; plpal
.text:00005279                 call    dword ptr ds:__imp__CreatePalette@4 ; CreatePalette(x)
.text:0000527F                 cmp     esi, esp
.text:00005281                 call    __RTC_CheckEsp
.text:00005286                 mov     ds:_pal, eax
.text:0000528B                 cmp     ds:_pal, 0
.text:00005292                 jz      short loc_52EA
.text:00005294                 mov     esi, esp
.text:00005296                 push    0               ; bForceBkgd
.text:00005298                 mov     edx, ds:_pal
.text:0000529E                 push    edx             ; hPal
.text:0000529F                 mov     eax, [ebp+hdc]
.text:000052A2                 push    eax             ; hdc
.text:000052A3                 call    dword ptr ds:__imp__SelectPalette@12 ; SelectPalette(x,x,x)
.text:000052A9                 cmp     esi, esp
.text:000052AB                 call    __RTC_CheckEsp
.text:000052B0                 mov     esi, esp
.text:000052B2                 mov     ecx, [ebp+hdc]
.text:000052B5                 push    ecx             ; hdc
.text:000052B6                 call    dword ptr ds:__imp__RealizePalette@4 ; RealizePalette(x)
.text:000052BC                 cmp     esi, esp
.text:000052BE                 call    __RTC_CheckEsp
.text:000052C3                 mov     esi, esp
.text:000052C5                 push    0               ; bForceBkgd
.text:000052C7                 mov     edi, esp
.text:000052C9                 push    0Fh             ; i
.text:000052CB                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text:000052D1                 cmp     edi, esp
.text:000052D3                 call    __RTC_CheckEsp
.text:000052D8                 push    eax             ; hPal
.text:000052D9                 mov     edx, [ebp+hdc]
.text:000052DC                 push    edx             ; hdc
.text:000052DD                 call    dword ptr ds:__imp__SelectPalette@12 ; SelectPalette(x,x,x)
.text:000052E3                 cmp     esi, esp
.text:000052E5                 call    __RTC_CheckEsp
.text:000052EA
.text:000052EA loc_52EA:                               ; CODE XREF: _init_palette+4Ej
.text:000052EA                                         ; _init_palette+6Ej ...
.text:000052EA                 mov     esi, esp
.text:000052EC                 mov     eax, [ebp+hdc]
.text:000052EF                 push    eax             ; hDC
.text:000052F0                 mov     ecx, dword ptr ds:_hwnd
.text:000052F6                 push    ecx             ; hWnd
.text:000052F7                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text:000052FD                 cmp     esi, esp
.text:000052FF                 call    __RTC_CheckEsp
.text:00005304
.text:00005304 loc_5304:                               ; CODE XREF: _init_palette+32j
.text:00005304                 cmp     ds:_pal, 0
.text:0000530B                 jz      short loc_536D
.text:0000530D                 mov     [ebp+var_4], 0
.text:00005314                 jmp     short loc_531F
.text:00005316 ; ---------------------------------------------------------------------------
.text:00005316
.text:00005316 loc_5316:                               ; CODE XREF: _init_palette+211j
.text:00005316                 mov     edx, [ebp+var_4]
.text:00005319                 add     edx, 1
.text:0000531C                 mov     [ebp+var_4], edx
.text:0000531F
.text:0000531F loc_531F:                               ; CODE XREF: _init_palette+1BCj
.text:0000531F                 cmp     [ebp+var_4], 106h
.text:00005326                 jge     short loc_536B
.text:00005328                 mov     eax, [ebp+var_4]
.text:0000532B                 imul    eax, 3
.text:0000532E                 movzx   ecx, ds:byte_282[eax]
.text:00005335                 mov     edx, [ebp+var_4]
.text:00005338                 imul    edx, 3
.text:0000533B                 movzx   eax, ds:byte_281[edx]
.text:00005342                 shl     eax, 8
.text:00005345                 or      ecx, eax
.text:00005347                 mov     edx, [ebp+var_4]
.text:0000534A                 imul    edx, 3
.text:0000534D                 movzx   eax, ds:_defpal[edx]
.text:00005354                 shl     eax, 10h
.text:00005357                 or      ecx, eax
.text:00005359                 or      ecx, 2000000h
.text:0000535F                 mov     edx, [ebp+var_4]
.text:00005362                 mov     ds:_colours[edx*4], ecx
.text:00005369                 jmp     short loc_5316
.text:0000536B ; ---------------------------------------------------------------------------
.text:0000536B
.text:0000536B loc_536B:                               ; CODE XREF: _init_palette+1CEj
.text:0000536B                 jmp     short loc_53C5
.text:0000536D ; ---------------------------------------------------------------------------
.text:0000536D
.text:0000536D loc_536D:                               ; CODE XREF: _init_palette+1B3j
.text:0000536D                 mov     [ebp+var_4], 0
.text:00005374                 jmp     short loc_537F
.text:00005376 ; ---------------------------------------------------------------------------
.text:00005376
.text:00005376 loc_5376:                               ; CODE XREF: _init_palette+26Bj
.text:00005376                 mov     eax, [ebp+var_4]
.text:00005379                 add     eax, 1
.text:0000537C                 mov     [ebp+var_4], eax
.text:0000537F
.text:0000537F loc_537F:                               ; CODE XREF: _init_palette+21Cj
.text:0000537F                 cmp     [ebp+var_4], 106h
.text:00005386                 jge     short loc_53C5
.text:00005388                 mov     ecx, [ebp+var_4]
.text:0000538B                 imul    ecx, 3
.text:0000538E                 movzx   edx, ds:byte_282[ecx]
.text:00005395                 mov     eax, [ebp+var_4]
.text:00005398                 imul    eax, 3
.text:0000539B                 movzx   ecx, ds:byte_281[eax]
.text:000053A2                 shl     ecx, 8
.text:000053A5                 or      edx, ecx
.text:000053A7                 mov     eax, [ebp+var_4]
.text:000053AA                 imul    eax, 3
.text:000053AD                 movzx   ecx, ds:_defpal[eax]
.text:000053B4                 shl     ecx, 10h
.text:000053B7                 or      edx, ecx
.text:000053B9                 mov     eax, [ebp+var_4]
.text:000053BC                 mov     ds:_colours[eax*4], edx
.text:000053C3                 jmp     short loc_5376
.text:000053C5 ; ---------------------------------------------------------------------------
.text:000053C5
.text:000053C5 loc_53C5:                               ; CODE XREF: _init_palette:loc_536Bj
.text:000053C5                                         ; _init_palette+22Ej
.text:000053C5                 pop     edi
.text:000053C6                 pop     esi
.text:000053C7                 add     esp, 8
.text:000053CA                 cmp     ebp, esp
.text:000053CC                 call    __RTC_CheckEsp
.text:000053D1                 mov     esp, ebp
.text:000053D3                 pop     ebp
.text:000053D4                 retn
.text:000053D4 _init_palette   endp
.text:000053D4
.text:000053D4 ; ---------------------------------------------------------------------------
.text:000053D5                 align 4
.text:000053D8
.text:000053D8 ; =============== S U B R O U T I N E =======================================
.text:000053D8
.text:000053D8 ; Attributes: bp-based frame
.text:000053D8
.text:000053D8 _init_fonts     proc near               ; CODE XREF: WinMain(x,x,x,x)+BFEp
.text:000053D8                                         ; _reset_window+A9p ...
.text:000053D8
.text:000053D8 var_E8          = dword ptr -0E8h
.text:000053D8 var_E4          = dword ptr -0E4h
.text:000053D8 var_E0          = dword ptr -0E0h
.text:000053D8 var_DC          = dword ptr -0DCh
.text:000053D8 var_D8          = dword ptr -0D8h
.text:000053D8 iQuality        = dword ptr -0D4h
.text:000053D8 var_D0          = dword ptr -0D0h
.text:000053D8 var_CC          = dword ptr -0CCh
.text:000053D8 y               = dword ptr -0C8h
.text:000053D8 var_C4          = dword ptr -0C4h
.text:000053D8 h               = dword ptr -0C0h
.text:000053D8 var_BC          = dword ptr -0BCh
.text:000053D8 lpSrc           = dword ptr -0B8h
.text:000053D8 Dst             = byte ptr -0B0h
.text:000053D8 var_AC          = dword ptr -0ACh
.text:000053D8 var_8C          = dword ptr -8Ch
.text:000053D8 cWeight         = dword ptr -88h
.text:000053D8 hdc             = dword ptr -84h
.text:000053D8 var_80          = dword ptr -80h
.text:000053D8 var_7C          = dword ptr -7Ch
.text:000053D8 var_74          = dword ptr -74h
.text:000053D8 var_70          = dword ptr -70h
.text:000053D8 var_6C          = dword ptr -6Ch
.text:000053D8 var_64          = dword ptr -64h
.text:000053D8 CPInfo          = _cpinfo ptr -5Ch
.text:000053D8 tm              = tagTEXTMETRICA ptr -40h
.text:000053D8 var_4           = dword ptr -4
.text:000053D8 arg_0           = dword ptr  8
.text:000053D8 arg_4           = dword ptr  0Ch
.text:000053D8
.text:000053D8                 push    ebp
.text:000053D9                 mov     ebp, esp
.text:000053DB                 sub     esp, 0E8h
.text:000053E1                 push    esi
.text:000053E2                 push    edi
.text:000053E3                 lea     edi, [ebp+var_E8]
.text:000053E9                 mov     ecx, 3Ah ; ':'
.text:000053EE                 mov     eax, 0CCCCCCCCh
.text:000053F3                 rep stosd
.text:000053F5                 mov     eax, dword ptr ds:___security_cookie
.text:000053FA                 xor     eax, ebp
.text:000053FC                 mov     [ebp+var_4], eax
.text:000053FF                 mov     [ebp+var_7C], 0
.text:00005406                 jmp     short loc_5411
.text:00005408 ; ---------------------------------------------------------------------------
.text:00005408
.text:00005408 loc_5408:                               ; CODE XREF: _init_fonts+4Dj
.text:00005408                 mov     eax, [ebp+var_7C]
.text:0000540B                 add     eax, 1
.text:0000540E                 mov     [ebp+var_7C], eax
.text:00005411
.text:00005411 loc_5411:                               ; CODE XREF: _init_fonts+2Ej
.text:00005411                 cmp     [ebp+var_7C], 40h ; '@'
.text:00005415                 jge     short loc_5427
.text:00005417                 mov     ecx, [ebp+var_7C]
.text:0000541A                 mov     ds:_fonts[ecx*4], 0
.text:00005425                 jmp     short loc_5408
.text:00005427 ; ---------------------------------------------------------------------------
.text:00005427
.text:00005427 loc_5427:                               ; CODE XREF: _init_fonts+3Dj
.text:00005427                 push    83h ; 'â'
.text:0000542C                 mov     edx, dword ptr ds:_conf
.text:00005432                 push    edx
.text:00005433                 call    _conf_get_int
.text:00005438                 add     esp, 8
.text:0000543B                 and     eax, 1
.text:0000543E                 neg     eax
.text:00005440                 sbb     eax, eax
.text:00005442                 and     eax, 2
.text:00005445                 mov     ds:_bold_font_mode, eax
.text:0000544A                 push    83h ; 'â'
.text:0000544F                 mov     eax, dword ptr ds:_conf
.text:00005454                 push    eax
.text:00005455                 call    _conf_get_int
.text:0000545A                 add     esp, 8
.text:0000545D                 and     eax, 2
.text:00005460                 neg     eax
.text:00005462                 sbb     eax, eax
.text:00005464                 neg     eax
.text:00005466                 mov     ds:_bold_colours, eax
.text:0000546B                 mov     ds:_und_mode, 1
.text:00005475                 push    70h ; 'p'
.text:00005477                 mov     ecx, dword ptr ds:_conf
.text:0000547D                 push    ecx
.text:0000547E                 call    _conf_get_fontspec
.text:00005483                 add     esp, 8
.text:00005486                 mov     [ebp+var_64], eax
.text:00005489                 mov     edx, [ebp+var_64]
.text:0000548C                 cmp     dword ptr [edx+4], 0
.text:00005490                 jz      short loc_54A8
.text:00005492                 mov     [ebp+cWeight], 2BCh
.text:0000549C                 mov     [ebp+var_8C], 384h
.text:000054A6                 jmp     short loc_54BC
.text:000054A8 ; ---------------------------------------------------------------------------
.text:000054A8
.text:000054A8 loc_54A8:                               ; CODE XREF: _init_fonts+B8j
.text:000054A8                 mov     [ebp+cWeight], 0
.text:000054B2                 mov     [ebp+var_8C], 2BCh
.text:000054BC
.text:000054BC loc_54BC:                               ; CODE XREF: _init_fonts+CEj
.text:000054BC                 mov     esi, esp
.text:000054BE                 mov     eax, dword ptr ds:_hwnd
.text:000054C3                 push    eax             ; hWnd
.text:000054C4                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text:000054CA                 cmp     esi, esp
.text:000054CC                 call    __RTC_CheckEsp
.text:000054D1                 mov     [ebp+hdc], eax
.text:000054D7                 cmp     [ebp+arg_4], 0
.text:000054DB                 jz      short loc_54E8
.text:000054DD                 mov     ecx, [ebp+arg_4]
.text:000054E0                 mov     ds:_font_height, ecx
.text:000054E6                 jmp     short loc_5534
.text:000054E8 ; ---------------------------------------------------------------------------
.text:000054E8
.text:000054E8 loc_54E8:                               ; CODE XREF: _init_fonts+103j
.text:000054E8                 mov     edx, [ebp+var_64]
.text:000054EB                 mov     eax, [edx+8]
.text:000054EE                 mov     ds:_font_height, eax
.text:000054F3                 cmp     ds:_font_height, 0
.text:000054FA                 jle     short loc_5534
.text:000054FC                 mov     esi, esp
.text:000054FE                 push    48h ; 'H'       ; nDenominator
.text:00005500                 mov     edi, esp
.text:00005502                 push    5Ah ; 'Z'       ; index
.text:00005504                 mov     ecx, [ebp+hdc]
.text:0000550A                 push    ecx             ; hdc
.text:0000550B                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text:00005511                 cmp     edi, esp
.text:00005513                 call    __RTC_CheckEsp
.text:00005518                 push    eax             ; nNumerator
.text:00005519                 mov     edx, ds:_font_height
.text:0000551F                 push    edx             ; nNumber
.text:00005520                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text:00005526                 cmp     esi, esp
.text:00005528                 call    __RTC_CheckEsp
.text:0000552D                 neg     eax
.text:0000552F                 mov     ds:_font_height, eax
.text:00005534
.text:00005534 loc_5534:                               ; CODE XREF: _init_fonts+10Ej
.text:00005534                                         ; _init_fonts+122j
.text:00005534                 mov     eax, [ebp+arg_0]
.text:00005537                 mov     ds:_font_width, eax
.text:0000553C                 push    71h ; 'q'
.text:0000553E                 mov     ecx, dword ptr ds:_conf
.text:00005544                 push    ecx
.text:00005545                 call    _conf_get_int
.text:0000554A                 add     esp, 8
.text:0000554D                 mov     [ebp+var_80], eax
.text:00005550                 cmp     [ebp+var_80], 0
.text:00005554                 jnz     short loc_5562
.text:00005556                 mov     [ebp+iQuality], 0
.text:00005560                 jmp     short loc_5593
.text:00005562 ; ---------------------------------------------------------------------------
.text:00005562
.text:00005562 loc_5562:                               ; CODE XREF: _init_fonts+17Cj
.text:00005562                 cmp     [ebp+var_80], 1
.text:00005566                 jnz     short loc_5574
.text:00005568                 mov     [ebp+var_D8], 4
.text:00005572                 jmp     short loc_5587
.text:00005574 ; ---------------------------------------------------------------------------
.text:00005574
.text:00005574 loc_5574:                               ; CODE XREF: _init_fonts+18Ej
.text:00005574                 xor     edx, edx
.text:00005576                 cmp     [ebp+var_80], 2
.text:0000557A                 setnz   dl
.text:0000557D                 lea     edx, [edx+edx+3]
.text:00005581                 mov     [ebp+var_D8], edx
.text:00005587
.text:00005587 loc_5587:                               ; CODE XREF: _init_fonts+19Aj
.text:00005587                 mov     eax, [ebp+var_D8]
.text:0000558D                 mov     [ebp+iQuality], eax
.text:00005593
.text:00005593 loc_5593:                               ; CODE XREF: _init_fonts+188j
.text:00005593                 mov     esi, esp
.text:00005595                 mov     ecx, [ebp+var_64]
.text:00005598                 mov     edx, [ecx]
.text:0000559A                 push    edx             ; pszFaceName
.text:0000559B                 push    1               ; iPitchAndFamily
.text:0000559D                 mov     eax, [ebp+iQuality]
.text:000055A3                 push    eax             ; iQuality
.text:000055A4                 push    0               ; iClipPrecision
.text:000055A6                 push    0               ; iOutPrecision
.text:000055A8                 mov     ecx, [ebp+var_64]
.text:000055AB                 mov     edx, [ecx+0Ch]
.text:000055AE                 push    edx             ; iCharSet
.text:000055AF                 push    0               ; bStrikeOut
.text:000055B1                 push    0               ; bUnderline
.text:000055B3                 push    0               ; bItalic
.text:000055B5                 mov     eax, [ebp+cWeight]
.text:000055BB                 push    eax             ; cWeight
.text:000055BC                 push    0               ; cOrientation
.text:000055BE                 push    0               ; cEscapement
.text:000055C0                 mov     ecx, ds:_font_width
.text:000055C6                 push    ecx             ; cWidth
.text:000055C7                 mov     edx, ds:_font_height
.text:000055CD                 push    edx             ; cHeight
.text:000055CE                 call    dword ptr ds:__imp__CreateFontA@56 ; CreateFontA(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text:000055D4                 cmp     esi, esp
.text:000055D6                 call    __RTC_CheckEsp
.text:000055DB                 mov     ds:_fonts, eax
.text:000055E0                 mov     esi, esp
.text:000055E2                 mov     eax, ds:_fonts
.text:000055E7                 push    eax             ; h
.text:000055E8                 mov     ecx, [ebp+hdc]
.text:000055EE                 push    ecx             ; hdc
.text:000055EF                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000055F5                 cmp     esi, esp
.text:000055F7                 call    __RTC_CheckEsp
.text:000055FC                 mov     esi, esp
.text:000055FE                 lea     edx, [ebp+tm]
.text:00005601                 push    edx             ; lptm
.text:00005602                 mov     eax, [ebp+hdc]
.text:00005608                 push    eax             ; hdc
.text:00005609                 call    dword ptr ds:__imp__GetTextMetricsA@8 ; GetTextMetricsA(x,x)
.text:0000560F                 cmp     esi, esp
.text:00005611                 call    __RTC_CheckEsp
.text:00005616                 mov     esi, esp
.text:00005618                 push    offset _lfont   ; pv
.text:0000561D                 push    3Ch ; '<'       ; c
.text:0000561F                 mov     ecx, ds:_fonts
.text:00005625                 push    ecx             ; h
.text:00005626                 call    dword ptr ds:__imp__GetObjectA@12 ; GetObjectA(x,x,x)
.text:0000562C                 cmp     esi, esp
.text:0000562E                 call    __RTC_CheckEsp
.text:00005633                 movzx   edx, [ebp+tm.tmPitchAndFamily]
.text:00005637                 and     edx, 1
.text:0000563A                 jnz     short loc_5659
.text:0000563C                 mov     ds:_font_varpitch, 0
.text:00005646                 mov     eax, [ebp+tm.tmAveCharWidth]
.text:00005649                 xor     ecx, ecx
.text:0000564B                 cmp     eax, [ebp+tm.tmMaxCharWidth]
.text:0000564E                 setnz   cl
.text:00005651                 mov     ds:_font_dualwidth, ecx
.text:00005657                 jmp     short loc_566D
.text:00005659 ; ---------------------------------------------------------------------------
.text:00005659
.text:00005659 loc_5659:                               ; CODE XREF: _init_fonts+262j
.text:00005659                 mov     ds:_font_varpitch, 1
.text:00005663                 mov     ds:_font_dualwidth, 1
.text:0000566D
.text:0000566D loc_566D:                               ; CODE XREF: _init_fonts+27Fj
.text:0000566D                 cmp     [ebp+arg_0], 0
.text:00005671                 jz      short loc_5679
.text:00005673                 cmp     [ebp+arg_4], 0
.text:00005677                 jnz     short loc_569A
.text:00005679
.text:00005679 loc_5679:                               ; CODE XREF: _init_fonts+299j
.text:00005679                 mov     edx, [ebp+tm.tmHeight]
.text:0000567C                 mov     ds:_font_height, edx
.text:00005682                 lea     eax, [ebp+tm]
.text:00005685                 push    eax             ; int
.text:00005686                 mov     ecx, [ebp+hdc]
.text:0000568C                 push    ecx             ; hdc
.text:0000568D                 call    _get_font_width
.text:00005692                 add     esp, 8
.text:00005695                 mov     ds:_font_width, eax
.text:0000569A
.text:0000569A loc_569A:                               ; CODE XREF: _init_fonts+29Fj
.text:0000569A                 movzx   edx, [ebp+tm.tmCharSet]
.text:0000569E                 mov     [ebp+lpSrc], edx
.text:000056A4                 push    20h ; ' '       ; Size
.text:000056A6                 push    0FFh            ; Val
.text:000056AB                 lea     eax, [ebp+Dst]
.text:000056B1                 push    eax             ; Dst
.text:000056B2                 call    _memset_0
.text:000056B7                 add     esp, 0Ch
.text:000056BA                 cmp     [ebp+lpSrc], 0FFh
.text:000056C4                 jnz     short loc_56DC
.text:000056C6                 mov     esi, esp
.text:000056C8                 call    dword ptr ds:__imp__GetOEMCP@0 ; GetOEMCP()
.text:000056CE                 cmp     esi, esp
.text:000056D0                 call    __RTC_CheckEsp
.text:000056D5                 mov     ds:CodePage, eax
.text:000056DA                 jmp     short loc_5716
.text:000056DC ; ---------------------------------------------------------------------------
.text:000056DC
.text:000056DC loc_56DC:                               ; CODE XREF: _init_fonts+2ECj
.text:000056DC                 mov     esi, esp
.text:000056DE                 push    1               ; dwFlags
.text:000056E0                 lea     ecx, [ebp+Dst]
.text:000056E6                 push    ecx             ; lpCs
.text:000056E7                 mov     edx, [ebp+lpSrc]
.text:000056ED                 push    edx             ; lpSrc
.text:000056EE                 call    dword ptr ds:__imp__TranslateCharsetInfo@12 ; TranslateCharsetInfo(x,x,x)
.text:000056F4                 cmp     esi, esp
.text:000056F6                 call    __RTC_CheckEsp
.text:000056FB                 test    eax, eax
.text:000056FD                 jz      short loc_570C
.text:000056FF                 mov     eax, [ebp+var_AC]
.text:00005705                 mov     ds:CodePage, eax
.text:0000570A                 jmp     short loc_5716
.text:0000570C ; ---------------------------------------------------------------------------
.text:0000570C
.text:0000570C loc_570C:                               ; CODE XREF: _init_fonts+325j
.text:0000570C                 mov     ds:CodePage, 0FFFFFFFFh
.text:00005716
.text:00005716 loc_5716:                               ; CODE XREF: _init_fonts+302j
.text:00005716                                         ; _init_fonts+332j
.text:00005716                 mov     esi, esp
.text:00005718                 lea     ecx, [ebp+CPInfo]
.text:0000571B                 push    ecx             ; lpCPInfo
.text:0000571C                 mov     edx, ds:CodePage
.text:00005722                 push    edx             ; CodePage
.text:00005723                 call    dword ptr ds:__imp__GetCPInfo@8 ; GetCPInfo(x,x)
.text:00005729                 cmp     esi, esp
.text:0000572B                 call    __RTC_CheckEsp
.text:00005730                 mov     eax, 1
.text:00005735                 cmp     eax, [ebp+CPInfo.MaxCharSize]
.text:00005738                 sbb     ecx, ecx
.text:0000573A                 neg     ecx
.text:0000573C                 mov     ds:dword_5C4, ecx
.text:00005742                 cmp     [ebp+var_80], 0
.text:00005746                 jnz     short loc_5754
.text:00005748                 mov     [ebp+var_DC], 0
.text:00005752                 jmp     short loc_5785
.text:00005754 ; ---------------------------------------------------------------------------
.text:00005754
.text:00005754 loc_5754:                               ; CODE XREF: _init_fonts+36Ej
.text:00005754                 cmp     [ebp+var_80], 1
.text:00005758                 jnz     short loc_5766
.text:0000575A                 mov     [ebp+var_E0], 4
.text:00005764                 jmp     short loc_5779
.text:00005766 ; ---------------------------------------------------------------------------
.text:00005766
.text:00005766 loc_5766:                               ; CODE XREF: _init_fonts+380j
.text:00005766                 xor     edx, edx
.text:00005768                 cmp     [ebp+var_80], 2
.text:0000576C                 setnz   dl
.text:0000576F                 lea     edx, [edx+edx+3]
.text:00005773                 mov     [ebp+var_E0], edx
.text:00005779
.text:00005779 loc_5779:                               ; CODE XREF: _init_fonts+38Cj
.text:00005779                 mov     eax, [ebp+var_E0]
.text:0000577F                 mov     [ebp+var_DC], eax
.text:00005785
.text:00005785 loc_5785:                               ; CODE XREF: _init_fonts+37Aj
.text:00005785                 mov     esi, esp
.text:00005787                 mov     ecx, [ebp+var_64]
.text:0000578A                 mov     edx, [ecx]
.text:0000578C                 push    edx             ; pszFaceName
.text:0000578D                 push    1               ; iPitchAndFamily
.text:0000578F                 mov     eax, [ebp+var_DC]
.text:00005795                 push    eax             ; iQuality
.text:00005796                 push    0               ; iClipPrecision
.text:00005798                 push    0               ; iOutPrecision
.text:0000579A                 mov     ecx, [ebp+var_64]
.text:0000579D                 mov     edx, [ecx+0Ch]
.text:000057A0                 push    edx             ; iCharSet
.text:000057A1                 push    0               ; bStrikeOut
.text:000057A3                 push    1               ; bUnderline
.text:000057A5                 push    0               ; bItalic
.text:000057A7                 mov     eax, [ebp+cWeight]
.text:000057AD                 push    eax             ; cWeight
.text:000057AE                 push    0               ; cOrientation
.text:000057B0                 push    0               ; cEscapement
.text:000057B2                 mov     ecx, ds:_font_width
.text:000057B8                 push    ecx             ; cWidth
.text:000057B9                 mov     edx, ds:_font_height
.text:000057BF                 push    edx             ; cHeight
.text:000057C0                 call    dword ptr ds:__imp__CreateFontA@56 ; CreateFontA(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text:000057C6                 cmp     esi, esp
.text:000057C8                 call    __RTC_CheckEsp
.text:000057CD                 mov     ds:ho, eax
.text:000057D2                 mov     esi, esp
.text:000057D4                 mov     eax, [ebp+hdc]
.text:000057DA                 push    eax             ; hdc
.text:000057DB                 call    dword ptr ds:__imp__CreateCompatibleDC@4 ; CreateCompatibleDC(x)
.text:000057E1                 cmp     esi, esp
.text:000057E3                 call    __RTC_CheckEsp
.text:000057E8                 mov     [ebp+var_BC], eax
.text:000057EE                 mov     esi, esp
.text:000057F0                 mov     ecx, ds:_font_height
.text:000057F6                 push    ecx             ; cy
.text:000057F7                 mov     edx, ds:_font_width
.text:000057FD                 push    edx             ; cx
.text:000057FE                 mov     eax, [ebp+hdc]
.text:00005804                 push    eax             ; hdc
.text:00005805                 call    dword ptr ds:__imp__CreateCompatibleBitmap@12 ; CreateCompatibleBitmap(x,x,x)
.text:0000580B                 cmp     esi, esp
.text:0000580D                 call    __RTC_CheckEsp
.text:00005812                 mov     [ebp+h], eax
.text:00005818                 mov     esi, esp
.text:0000581A                 mov     ecx, [ebp+h]
.text:00005820                 push    ecx             ; h
.text:00005821                 mov     edx, [ebp+var_BC]
.text:00005827                 push    edx             ; hdc
.text:00005828                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000582E                 cmp     esi, esp
.text:00005830                 call    __RTC_CheckEsp
.text:00005835                 mov     [ebp+var_C4], eax
.text:0000583B                 mov     esi, esp
.text:0000583D                 mov     eax, ds:ho
.text:00005842                 push    eax             ; h
.text:00005843                 mov     ecx, [ebp+var_BC]
.text:00005849                 push    ecx             ; hdc
.text:0000584A                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00005850                 cmp     esi, esp
.text:00005852                 call    __RTC_CheckEsp
.text:00005857                 mov     esi, esp
.text:00005859                 push    0               ; align
.text:0000585B                 mov     edx, [ebp+var_BC]
.text:00005861                 push    edx             ; hdc
.text:00005862                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text:00005868                 cmp     esi, esp
.text:0000586A                 call    __RTC_CheckEsp
.text:0000586F                 mov     esi, esp
.text:00005871                 push    0FFFFFFh        ; color
.text:00005876                 mov     eax, [ebp+var_BC]
.text:0000587C                 push    eax             ; hdc
.text:0000587D                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text:00005883                 cmp     esi, esp
.text:00005885                 call    __RTC_CheckEsp
.text:0000588A                 mov     esi, esp
.text:0000588C                 push    0               ; color
.text:0000588E                 mov     ecx, [ebp+var_BC]
.text:00005894                 push    ecx             ; hdc
.text:00005895                 call    dword ptr ds:__imp__SetBkColor@8 ; SetBkColor(x,x)
.text:0000589B                 cmp     esi, esp
.text:0000589D                 call    __RTC_CheckEsp
.text:000058A2                 mov     esi, esp
.text:000058A4                 push    2               ; mode
.text:000058A6                 mov     edx, [ebp+var_BC]
.text:000058AC                 push    edx             ; hdc
.text:000058AD                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:000058B3                 cmp     esi, esp
.text:000058B5                 call    __RTC_CheckEsp
.text:000058BA                 mov     esi, esp
.text:000058BC                 push    0               ; lpDx
.text:000058BE                 push    1               ; c
.text:000058C0                 push    offset $SG89593 ; lpString
.text:000058C5                 push    0               ; lprect
.text:000058C7                 push    2               ; options
.text:000058C9                 push    0               ; y
.text:000058CB                 push    0               ; x
.text:000058CD                 mov     eax, [ebp+var_BC]
.text:000058D3                 push    eax             ; hdc
.text:000058D4                 call    dword ptr ds:__imp__ExtTextOutA@32 ; ExtTextOutA(x,x,x,x,x,x,x,x)
.text:000058DA                 cmp     esi, esp
.text:000058DC                 call    __RTC_CheckEsp
.text:000058E1                 mov     [ebp+var_CC], 0
.text:000058EB                 mov     [ebp+y], 0
.text:000058F5                 jmp     short loc_5906
.text:000058F7 ; ---------------------------------------------------------------------------
.text:000058F7
.text:000058F7 loc_58F7:                               ; CODE XREF: _init_fonts:loc_5955j
.text:000058F7                 mov     ecx, [ebp+y]
.text:000058FD                 add     ecx, 1
.text:00005900                 mov     [ebp+y], ecx
.text:00005906
.text:00005906 loc_5906:                               ; CODE XREF: _init_fonts+51Dj
.text:00005906                 mov     edx, [ebp+y]
.text:0000590C                 cmp     edx, ds:_font_height
.text:00005912                 jge     short loc_5957
.text:00005914                 mov     esi, esp
.text:00005916                 mov     eax, [ebp+y]
.text:0000591C                 push    eax             ; y
.text:0000591D                 mov     eax, ds:_font_width
.text:00005922                 cdq
.text:00005923                 sub     eax, edx
.text:00005925                 sar     eax, 1
.text:00005927                 push    eax             ; x
.text:00005928                 mov     ecx, [ebp+var_BC]
.text:0000592E                 push    ecx             ; hdc
.text:0000592F                 call    dword ptr ds:__imp__GetPixel@12 ; GetPixel(x,x,x)
.text:00005935                 cmp     esi, esp
.text:00005937                 call    __RTC_CheckEsp
.text:0000593C                 mov     [ebp+var_D0], eax
.text:00005942                 cmp     [ebp+var_D0], 0
.text:00005949                 jz      short loc_5955
.text:0000594B                 mov     [ebp+var_CC], 1
.text:00005955
.text:00005955 loc_5955:                               ; CODE XREF: _init_fonts+571j
.text:00005955                 jmp     short loc_58F7
.text:00005957 ; ---------------------------------------------------------------------------
.text:00005957
.text:00005957 loc_5957:                               ; CODE XREF: _init_fonts+53Aj
.text:00005957                 mov     esi, esp
.text:00005959                 mov     edx, [ebp+var_C4]
.text:0000595F                 push    edx             ; h
.text:00005960                 mov     eax, [ebp+var_BC]
.text:00005966                 push    eax             ; hdc
.text:00005967                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000596D                 cmp     esi, esp
.text:0000596F                 call    __RTC_CheckEsp
.text:00005974                 mov     esi, esp
.text:00005976                 mov     ecx, [ebp+h]
.text:0000597C                 push    ecx             ; ho
.text:0000597D                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:00005983                 cmp     esi, esp
.text:00005985                 call    __RTC_CheckEsp
.text:0000598A                 mov     esi, esp
.text:0000598C                 mov     edx, [ebp+var_BC]
.text:00005992                 push    edx             ; hdc
.text:00005993                 call    dword ptr ds:__imp__DeleteDC@4 ; DeleteDC(x)
.text:00005999                 cmp     esi, esp
.text:0000599B                 call    __RTC_CheckEsp
.text:000059A0                 cmp     [ebp+var_CC], 0
.text:000059A7                 jnz     short loc_59D2
.text:000059A9                 mov     ds:_und_mode, 0
.text:000059B3                 mov     esi, esp
.text:000059B5                 mov     eax, ds:ho
.text:000059BA                 push    eax             ; ho
.text:000059BB                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:000059C1                 cmp     esi, esp
.text:000059C3                 call    __RTC_CheckEsp
.text:000059C8                 mov     ds:ho, 0
.text:000059D2
.text:000059D2 loc_59D2:                               ; CODE XREF: _init_fonts+5CFj
.text:000059D2                 cmp     ds:_bold_font_mode, 2
.text:000059D9                 jnz     loc_5A6E
.text:000059DF                 cmp     [ebp+var_80], 0
.text:000059E3                 jnz     short loc_59F1
.text:000059E5                 mov     [ebp+var_E4], 0
.text:000059EF                 jmp     short loc_5A22
.text:000059F1 ; ---------------------------------------------------------------------------
.text:000059F1
.text:000059F1 loc_59F1:                               ; CODE XREF: _init_fonts+60Bj
.text:000059F1                 cmp     [ebp+var_80], 1
.text:000059F5                 jnz     short loc_5A03
.text:000059F7                 mov     [ebp+var_E8], 4
.text:00005A01                 jmp     short loc_5A16
.text:00005A03 ; ---------------------------------------------------------------------------
.text:00005A03
.text:00005A03 loc_5A03:                               ; CODE XREF: _init_fonts+61Dj
.text:00005A03                 xor     ecx, ecx
.text:00005A05                 cmp     [ebp+var_80], 2
.text:00005A09                 setnz   cl
.text:00005A0C                 lea     ecx, [ecx+ecx+3]
.text:00005A10                 mov     [ebp+var_E8], ecx
.text:00005A16
.text:00005A16 loc_5A16:                               ; CODE XREF: _init_fonts+629j
.text:00005A16                 mov     edx, [ebp+var_E8]
.text:00005A1C                 mov     [ebp+var_E4], edx
.text:00005A22
.text:00005A22 loc_5A22:                               ; CODE XREF: _init_fonts+617j
.text:00005A22                 mov     esi, esp
.text:00005A24                 mov     eax, [ebp+var_64]
.text:00005A27                 mov     ecx, [eax]
.text:00005A29                 push    ecx             ; pszFaceName
.text:00005A2A                 push    1               ; iPitchAndFamily
.text:00005A2C                 mov     edx, [ebp+var_E4]
.text:00005A32                 push    edx             ; iQuality
.text:00005A33                 push    0               ; iClipPrecision
.text:00005A35                 push    0               ; iOutPrecision
.text:00005A37                 mov     eax, [ebp+var_64]
.text:00005A3A                 mov     ecx, [eax+0Ch]
.text:00005A3D                 push    ecx             ; iCharSet
.text:00005A3E                 push    0               ; bStrikeOut
.text:00005A40                 push    0               ; bUnderline
.text:00005A42                 push    0               ; bItalic
.text:00005A44                 mov     edx, [ebp+var_8C]
.text:00005A4A                 push    edx             ; cWeight
.text:00005A4B                 push    0               ; cOrientation
.text:00005A4D                 push    0               ; cEscapement
.text:00005A4F                 mov     eax, ds:_font_width
.text:00005A54                 push    eax             ; cWidth
.text:00005A55                 mov     ecx, ds:_font_height
.text:00005A5B                 push    ecx             ; cHeight
.text:00005A5C                 call    dword ptr ds:__imp__CreateFontA@56 ; CreateFontA(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text:00005A62                 cmp     esi, esp
.text:00005A64                 call    __RTC_CheckEsp
.text:00005A69                 mov     ds:dword_164, eax
.text:00005A6E
.text:00005A6E loc_5A6E:                               ; CODE XREF: _init_fonts+601j
.text:00005A6E                 mov     edx, [ebp+tm.tmAscent]
.text:00005A71                 add     edx, 1
.text:00005A74                 mov     ds:_descent, edx
.text:00005A7A                 mov     eax, ds:_descent
.text:00005A7F                 cmp     eax, ds:_font_height
.text:00005A85                 jl      short loc_5A96
.text:00005A87                 mov     ecx, ds:_font_height
.text:00005A8D                 sub     ecx, 1
.text:00005A90                 mov     ds:_descent, ecx
.text:00005A96
.text:00005A96 loc_5A96:                               ; CODE XREF: _init_fonts+6ADj
.text:00005A96                 mov     [ebp+var_7C], 0
.text:00005A9D                 jmp     short loc_5AA8
.text:00005A9F ; ---------------------------------------------------------------------------
.text:00005A9F
.text:00005A9F loc_5A9F:                               ; CODE XREF: _init_fonts:loc_5B40j
.text:00005A9F                 mov     edx, [ebp+var_7C]
.text:00005AA2                 add     edx, 1
.text:00005AA5                 mov     [ebp+var_7C], edx
.text:00005AA8
.text:00005AA8 loc_5AA8:                               ; CODE XREF: _init_fonts+6C5j
.text:00005AA8                 cmp     [ebp+var_7C], 3
.text:00005AAC                 jge     loc_5B45
.text:00005AB2                 mov     eax, [ebp+var_7C]
.text:00005AB5                 cmp     ds:_fonts[eax*4], 0
.text:00005ABD                 jz      short loc_5B34
.text:00005ABF                 mov     esi, esp
.text:00005AC1                 mov     ecx, [ebp+var_7C]
.text:00005AC4                 mov     edx, ds:_fonts[ecx*4]
.text:00005ACB                 push    edx             ; h
.text:00005ACC                 mov     eax, [ebp+hdc]
.text:00005AD2                 push    eax             ; hdc
.text:00005AD3                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00005AD9                 cmp     esi, esp
.text:00005ADB                 call    __RTC_CheckEsp
.text:00005AE0                 test    eax, eax
.text:00005AE2                 jz      short loc_5B26
.text:00005AE4                 mov     esi, esp
.text:00005AE6                 lea     ecx, [ebp+tm]
.text:00005AE9                 push    ecx             ; lptm
.text:00005AEA                 mov     edx, [ebp+hdc]
.text:00005AF0                 push    edx             ; hdc
.text:00005AF1                 call    dword ptr ds:__imp__GetTextMetricsA@8 ; GetTextMetricsA(x,x)
.text:00005AF7                 cmp     esi, esp
.text:00005AF9                 call    __RTC_CheckEsp
.text:00005AFE                 test    eax, eax
.text:00005B00                 jz      short loc_5B26
.text:00005B02                 lea     eax, [ebp+tm]
.text:00005B05                 push    eax             ; int
.text:00005B06                 mov     ecx, [ebp+hdc]
.text:00005B0C                 push    ecx             ; hdc
.text:00005B0D                 call    _get_font_width
.text:00005B12                 add     esp, 8
.text:00005B15                 mov     edx, [ebp+tm.tmHeight]
.text:00005B18                 shl     edx, 8
.text:00005B1B                 add     eax, edx
.text:00005B1D                 mov     ecx, [ebp+var_7C]
.text:00005B20                 mov     [ebp+ecx*4+var_74], eax
.text:00005B24                 jmp     short loc_5B32
.text:00005B26 ; ---------------------------------------------------------------------------
.text:00005B26
.text:00005B26 loc_5B26:                               ; CODE XREF: _init_fonts+70Aj
.text:00005B26                                         ; _init_fonts+728j
.text:00005B26                 mov     edx, [ebp+var_7C]
.text:00005B29                 neg     edx
.text:00005B2B                 mov     eax, [ebp+var_7C]
.text:00005B2E                 mov     [ebp+eax*4+var_74], edx
.text:00005B32
.text:00005B32 loc_5B32:                               ; CODE XREF: _init_fonts+74Cj
.text:00005B32                 jmp     short loc_5B40
.text:00005B34 ; ---------------------------------------------------------------------------
.text:00005B34
.text:00005B34 loc_5B34:                               ; CODE XREF: _init_fonts+6E5j
.text:00005B34                 mov     ecx, [ebp+var_7C]
.text:00005B37                 neg     ecx
.text:00005B39                 mov     edx, [ebp+var_7C]
.text:00005B3C                 mov     [ebp+edx*4+var_74], ecx
.text:00005B40
.text:00005B40 loc_5B40:                               ; CODE XREF: _init_fonts:loc_5B32j
.text:00005B40                 jmp     loc_5A9F
.text:00005B45 ; ---------------------------------------------------------------------------
.text:00005B45
.text:00005B45 loc_5B45:                               ; CODE XREF: _init_fonts+6D4j
.text:00005B45                 mov     esi, esp
.text:00005B47                 mov     eax, [ebp+hdc]
.text:00005B4D                 push    eax             ; hDC
.text:00005B4E                 mov     ecx, dword ptr ds:_hwnd
.text:00005B54                 push    ecx             ; hWnd
.text:00005B55                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text:00005B5B                 cmp     esi, esp
.text:00005B5D                 call    __RTC_CheckEsp
.text:00005B62                 mov     edx, [ebp+var_6C]
.text:00005B65                 cmp     edx, [ebp+var_74]
.text:00005B68                 jz      short loc_5B93
.text:00005B6A                 mov     ds:_und_mode, 0
.text:00005B74                 mov     esi, esp
.text:00005B76                 mov     eax, ds:ho
.text:00005B7B                 push    eax             ; ho
.text:00005B7C                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:00005B82                 cmp     esi, esp
.text:00005B84                 call    __RTC_CheckEsp
.text:00005B89                 mov     ds:ho, 0
.text:00005B93
.text:00005B93 loc_5B93:                               ; CODE XREF: _init_fonts+790j
.text:00005B93                 cmp     ds:_bold_font_mode, 2
.text:00005B9A                 jnz     short loc_5BCE
.text:00005B9C                 mov     ecx, [ebp+var_70]
.text:00005B9F                 cmp     ecx, [ebp+var_74]
.text:00005BA2                 jz      short loc_5BCE
.text:00005BA4                 mov     ds:_bold_font_mode, 1
.text:00005BAE                 mov     esi, esp
.text:00005BB0                 mov     edx, ds:dword_164
.text:00005BB6                 push    edx             ; ho
.text:00005BB7                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:00005BBD                 cmp     esi, esp
.text:00005BBF                 call    __RTC_CheckEsp
.text:00005BC4                 mov     ds:dword_164, 0
.text:00005BCE
.text:00005BCE loc_5BCE:                               ; CODE XREF: _init_fonts+7C2j
.text:00005BCE                                         ; _init_fonts+7CAj
.text:00005BCE                 mov     ds:dword_48, 1
.text:00005BD8                 mov     eax, ds:dword_48
.text:00005BDD                 mov     ds:dword_44, eax
.text:00005BE2                 mov     ecx, ds:dword_44
.text:00005BE8                 mov     ds:_fontflag, ecx
.text:00005BEE                 push    offset _ucsdata
.text:00005BF3                 mov     edx, dword ptr ds:_conf
.text:00005BF9                 push    edx
.text:00005BFA                 call    _init_ucs
.text:00005BFF                 add     esp, 8
.text:00005C02                 push    edx
.text:00005C03                 mov     ecx, ebp
.text:00005C05                 push    eax
.text:00005C06                 lea     edx, $LN52
.text:00005C0C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005C11                 pop     eax
.text:00005C12                 pop     edx
.text:00005C13                 pop     edi
.text:00005C14                 pop     esi
.text:00005C15                 mov     ecx, [ebp+var_4]
.text:00005C18                 xor     ecx, ebp
.text:00005C1A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00005C1F                 add     esp, 0E8h
.text:00005C25                 cmp     ebp, esp
.text:00005C27                 call    __RTC_CheckEsp
.text:00005C2C                 mov     esp, ebp
.text:00005C2E                 pop     ebp
.text:00005C2F                 retn
.text:00005C2F _init_fonts     endp
.text:00005C2F
.text:00005C2F ; ---------------------------------------------------------------------------
.text:00005C30 $LN52           dd 4                    ; DATA XREF: _init_fonts+82Eo
.text:00005C34                 dd offset $LN51
.text:00005C38 $LN51           dd 0FFFFFFC0h, 38h      ; DATA XREF: .text:00005C34o
.text:00005C40                 dd offset $LN47         ; "tm"
.text:00005C44                 dd 0FFFFFFA4h, 14h
.text:00005C4C                 dd offset $LN48         ; "cpinfo"
.text:00005C50                 dd 0FFFFFF8Ch, 0Ch
.text:00005C58                 dd offset $LN49         ; "fontsize"
.text:00005C5C                 dd 0FFFFFF50h, 20h
.text:00005C64                 dd offset $LN50         ; "info"
.text:00005C68 $LN50           db 'info',0             ; DATA XREF: .text:00005C64o
.text:00005C6D $LN49           db 'fontsize',0         ; DATA XREF: .text:00005C58o
.text:00005C76 $LN48           db 'cpinfo',0           ; DATA XREF: .text:00005C4Co
.text:00005C7D $LN47           db 'tm',0               ; DATA XREF: .text:00005C40o
.text:00005C80                 db 8 dup(0CCh)
.text:00005C88
.text:00005C88 ; =============== S U B R O U T I N E =======================================
.text:00005C88
.text:00005C88 ; Attributes: bp-based frame
.text:00005C88
.text:00005C88 ; int __cdecl get_font_width(HDC hdc, int)
.text:00005C88 _get_font_width proc near               ; CODE XREF: _init_fonts+2B5p
.text:00005C88                                         ; _init_fonts+735p
.text:00005C88
.text:00005C88 var_90          = dword ptr -90h
.text:00005C88 var_8C          = dword ptr -8Ch
.text:00005C88 ABC             = _ABCFLOAT ptr -84h
.text:00005C88 var_8           = dword ptr -8
.text:00005C88 var_4           = dword ptr -4
.text:00005C88 hdc             = dword ptr  8
.text:00005C88 arg_4           = dword ptr  0Ch
.text:00005C88
.text:00005C88                 push    ebp
.text:00005C89                 mov     ebp, esp
.text:00005C8B                 sub     esp, 90h
.text:00005C91                 push    esi
.text:00005C92                 push    edi
.text:00005C93                 lea     edi, [ebp+var_90]
.text:00005C99                 mov     ecx, 24h ; '$'
.text:00005C9E                 mov     eax, 0CCCCCCCCh
.text:00005CA3                 rep stosd
.text:00005CA5                 mov     eax, dword ptr ds:___security_cookie
.text:00005CAA                 xor     eax, ebp
.text:00005CAC                 mov     [ebp+var_4], eax
.text:00005CAF                 mov     eax, [ebp+arg_4]
.text:00005CB2                 movzx   ecx, byte ptr [eax+33h]
.text:00005CB6                 and     ecx, 1
.text:00005CB9                 jnz     short loc_5CC9
.text:00005CBB                 mov     edx, [ebp+arg_4]
.text:00005CBE                 mov     eax, [edx+14h]
.text:00005CC1                 mov     [ebp+var_8], eax
.text:00005CC4                 jmp     loc_5D86
.text:00005CC9 ; ---------------------------------------------------------------------------
.text:00005CC9
.text:00005CC9 loc_5CC9:                               ; CODE XREF: _get_font_width+31j
.text:00005CC9                 mov     ds:_font_varpitch, 1
.text:00005CD3                 mov     ds:_font_dualwidth, 1
.text:00005CDD                 mov     esi, esp
.text:00005CDF                 lea     ecx, [ebp+ABC]
.text:00005CE5                 push    ecx             ; lpABC
.text:00005CE6                 push    39h ; '9'       ; iLast
.text:00005CE8                 push    30h ; '0'       ; iFirst
.text:00005CEA                 mov     edx, [ebp+hdc]
.text:00005CED                 push    edx             ; hdc
.text:00005CEE                 call    dword ptr ds:__imp__GetCharABCWidthsFloatA@16 ; GetCharABCWidthsFloatA(x,x,x,x)
.text:00005CF4                 cmp     esi, esp
.text:00005CF6                 call    __RTC_CheckEsp
.text:00005CFB                 test    eax, eax
.text:00005CFD                 jz      short loc_5D7D
.text:00005CFF                 mov     [ebp+var_8], 0
.text:00005D06                 mov     [ebp+var_8C], 0
.text:00005D10                 jmp     short loc_5D21
.text:00005D12 ; ---------------------------------------------------------------------------
.text:00005D12
.text:00005D12 loc_5D12:                               ; CODE XREF: _get_font_width:loc_5D79j
.text:00005D12                 mov     eax, [ebp+var_8C]
.text:00005D18                 add     eax, 1
.text:00005D1B                 mov     [ebp+var_8C], eax
.text:00005D21
.text:00005D21 loc_5D21:                               ; CODE XREF: _get_font_width+88j
.text:00005D21                 cmp     [ebp+var_8C], 0Ah
.text:00005D28                 jnb     short loc_5D7B
.text:00005D2A                 mov     ecx, [ebp+var_8C]
.text:00005D30                 imul    ecx, 0Ch
.text:00005D33                 fld     [ebp+ecx+ABC.abcfA]
.text:00005D3A                 fadd    ds:__real@3fe0000000000000
.text:00005D40                 mov     edx, [ebp+var_8C]
.text:00005D46                 imul    edx, 0Ch
.text:00005D49                 fadd    [ebp+edx+ABC.abcfB]
.text:00005D4D                 mov     eax, [ebp+var_8C]
.text:00005D53                 imul    eax, 0Ch
.text:00005D56                 fadd    [ebp+eax+ABC.abcfC]
.text:00005D5A                 call    __ftol2_sse
.text:00005D5F                 mov     [ebp+var_90], eax
.text:00005D65                 mov     ecx, [ebp+var_8]
.text:00005D68                 cmp     ecx, [ebp+var_90]
.text:00005D6E                 jge     short loc_5D79
.text:00005D70                 mov     edx, [ebp+var_90]
.text:00005D76                 mov     [ebp+var_8], edx
.text:00005D79
.text:00005D79 loc_5D79:                               ; CODE XREF: _get_font_width+E6j
.text:00005D79                 jmp     short loc_5D12
.text:00005D7B ; ---------------------------------------------------------------------------
.text:00005D7B
.text:00005D7B loc_5D7B:                               ; CODE XREF: _get_font_width+A0j
.text:00005D7B                 jmp     short loc_5D86
.text:00005D7D ; ---------------------------------------------------------------------------
.text:00005D7D
.text:00005D7D loc_5D7D:                               ; CODE XREF: _get_font_width+75j
.text:00005D7D                 mov     eax, [ebp+arg_4]
.text:00005D80                 mov     ecx, [eax+18h]
.text:00005D83                 mov     [ebp+var_8], ecx
.text:00005D86
.text:00005D86 loc_5D86:                               ; CODE XREF: _get_font_width+3Cj
.text:00005D86                                         ; _get_font_width:loc_5D7Bj
.text:00005D86                 mov     eax, [ebp+var_8]
.text:00005D89                 push    edx
.text:00005D8A                 mov     ecx, ebp
.text:00005D8C                 push    eax
.text:00005D8D                 lea     edx, $LN13
.text:00005D93                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005D98                 pop     eax
.text:00005D99                 pop     edx
.text:00005D9A                 pop     edi
.text:00005D9B                 pop     esi
.text:00005D9C                 mov     ecx, [ebp+var_4]
.text:00005D9F                 xor     ecx, ebp
.text:00005DA1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00005DA6                 add     esp, 90h
.text:00005DAC                 cmp     ebp, esp
.text:00005DAE                 call    __RTC_CheckEsp
.text:00005DB3                 mov     esp, ebp
.text:00005DB5                 pop     ebp
.text:00005DB6                 retn
.text:00005DB6 _get_font_width endp
.text:00005DB6
.text:00005DB6 ; ---------------------------------------------------------------------------
.text:00005DB7                 align 4
.text:00005DB8 $LN13           dd 1                    ; DATA XREF: _get_font_width+105o
.text:00005DBC                 dd offset $LN12_0
.text:00005DC0 $LN12_0         dd 0FFFFFF7Ch, 78h      ; DATA XREF: .text:00005DBCo
.text:00005DC8                 dd offset $LN11_0       ; "widths"
.text:00005DCC $LN11_0         db 'widths',0           ; DATA XREF: .text:00005DC8o
.text:00005DD3                 align 8
.text:00005DD8
.text:00005DD8 ; =============== S U B R O U T I N E =======================================
.text:00005DD8
.text:00005DD8 ; Attributes: bp-based frame
.text:00005DD8
.text:00005DD8 _deinit_fonts   proc near               ; CODE XREF: _cleanup_exit+4p
.text:00005DD8                                         ; _reset_window+A0p ...
.text:00005DD8
.text:00005DD8 var_4           = dword ptr -4
.text:00005DD8
.text:00005DD8                 push    ebp
.text:00005DD9                 mov     ebp, esp
.text:00005DDB                 push    ecx
.text:00005DDC                 push    esi
.text:00005DDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DE4                 mov     [ebp+var_4], 0
.text:00005DEB                 jmp     short loc_5DF6
.text:00005DED ; ---------------------------------------------------------------------------
.text:00005DED
.text:00005DED loc_5DED:                               ; CODE XREF: _deinit_fonts+67j
.text:00005DED                 mov     eax, [ebp+var_4]
.text:00005DF0                 add     eax, 1
.text:00005DF3                 mov     [ebp+var_4], eax
.text:00005DF6
.text:00005DF6 loc_5DF6:                               ; CODE XREF: _deinit_fonts+13j
.text:00005DF6                 cmp     [ebp+var_4], 40h ; '@'
.text:00005DFA                 jge     short loc_5E41
.text:00005DFC                 mov     ecx, [ebp+var_4]
.text:00005DFF                 cmp     ds:_fonts[ecx*4], 0
.text:00005E07                 jz      short loc_5E23
.text:00005E09                 mov     esi, esp
.text:00005E0B                 mov     edx, [ebp+var_4]
.text:00005E0E                 mov     eax, ds:_fonts[edx*4]
.text:00005E15                 push    eax             ; ho
.text:00005E16                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:00005E1C                 cmp     esi, esp
.text:00005E1E                 call    __RTC_CheckEsp
.text:00005E23
.text:00005E23 loc_5E23:                               ; CODE XREF: _deinit_fonts+2Fj
.text:00005E23                 mov     ecx, [ebp+var_4]
.text:00005E26                 mov     ds:_fonts[ecx*4], 0
.text:00005E31                 mov     edx, [ebp+var_4]
.text:00005E34                 mov     ds:_fontflag[edx*4], 0
.text:00005E3F                 jmp     short loc_5DED
.text:00005E41 ; ---------------------------------------------------------------------------
.text:00005E41
.text:00005E41 loc_5E41:                               ; CODE XREF: _deinit_fonts+22j
.text:00005E41                 pop     esi
.text:00005E42                 add     esp, 4
.text:00005E45                 cmp     ebp, esp
.text:00005E47                 call    __RTC_CheckEsp
.text:00005E4C                 mov     esp, ebp
.text:00005E4E                 pop     ebp
.text:00005E4F                 retn
.text:00005E4F _deinit_fonts   endp
.text:00005E4F
.text:00005E4F ; ---------------------------------------------------------------------------
.text:00005E50                 db 8 dup(0CCh)
.text:00005E58
.text:00005E58 ; =============== S U B R O U T I N E =======================================
.text:00005E58
.text:00005E58 ; Attributes: bp-based frame
.text:00005E58
.text:00005E58                 public _request_resize
.text:00005E58 _request_resize proc near
.text:00005E58
.text:00005E58 var_C           = dword ptr -0Ch
.text:00005E58 cy              = dword ptr -8
.text:00005E58 var_4           = dword ptr -4
.text:00005E58 arg_4           = dword ptr  0Ch
.text:00005E58 arg_8           = dword ptr  10h
.text:00005E58
.text:00005E58                 push    ebp
.text:00005E59                 mov     ebp, esp
.text:00005E5B                 sub     esp, 0Ch
.text:00005E5E                 push    esi
.text:00005E5F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005E66                 mov     [ebp+cy], 0CCCCCCCCh
.text:00005E6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E74                 mov     esi, esp
.text:00005E76                 mov     eax, dword ptr ds:_hwnd
.text:00005E7B                 push    eax             ; hWnd
.text:00005E7C                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:00005E82                 cmp     esi, esp
.text:00005E84                 call    __RTC_CheckEsp
.text:00005E89                 test    eax, eax
.text:00005E8B                 jz      short loc_5EA7
.text:00005E8D                 push    6Ah ; 'j'
.text:00005E8F                 mov     ecx, dword ptr ds:_conf
.text:00005E95                 push    ecx
.text:00005E96                 call    _conf_get_int
.text:00005E9B                 add     esp, 8
.text:00005E9E                 test    eax, eax
.text:00005EA0                 jnz     short loc_5EA7
.text:00005EA2                 jmp     loc_6055
.text:00005EA7 ; ---------------------------------------------------------------------------
.text:00005EA7
.text:00005EA7 loc_5EA7:                               ; CODE XREF: _request_resize+33j
.text:00005EA7                                         ; _request_resize+48j
.text:00005EA7                 push    6Ah ; 'j'
.text:00005EA9                 mov     edx, dword ptr ds:_conf
.text:00005EAF                 push    edx
.text:00005EB0                 call    _conf_get_int
.text:00005EB5                 add     esp, 8
.text:00005EB8                 cmp     eax, 1
.text:00005EBB                 jnz     short loc_5EC2
.text:00005EBD                 jmp     loc_6055
.text:00005EC2 ; ---------------------------------------------------------------------------
.text:00005EC2
.text:00005EC2 loc_5EC2:                               ; CODE XREF: _request_resize+63j
.text:00005EC2                 mov     eax, dword ptr ds:_term
.text:00005EC7                 mov     ecx, [ebp+arg_8]
.text:00005ECA                 cmp     ecx, [eax+128h]
.text:00005ED0                 jnz     short loc_5EE8
.text:00005ED2                 mov     edx, dword ptr ds:_term
.text:00005ED8                 mov     eax, [ebp+arg_4]
.text:00005EDB                 cmp     eax, [edx+12Ch]
.text:00005EE1                 jnz     short loc_5EE8
.text:00005EE3                 jmp     loc_6055
.text:00005EE8 ; ---------------------------------------------------------------------------
.text:00005EE8
.text:00005EE8 loc_5EE8:                               ; CODE XREF: _request_resize+78j
.text:00005EE8                                         ; _request_resize+89j
.text:00005EE8                 mov     ecx, ?first_time@?3??request_resize@@9@9 ; `request_resize'::`4'::first_time
.text:00005EEE                 mov     [ebp+var_C], ecx
.text:00005EF1                 cmp     [ebp+var_C], 0
.text:00005EF5                 jz      short loc_5F21
.text:00005EF7                 cmp     [ebp+var_C], 1
.text:00005EFB                 jz      short loc_5F02
.text:00005EFD                 jmp     loc_5F89
.text:00005F02 ; ---------------------------------------------------------------------------
.text:00005F02
.text:00005F02 loc_5F02:                               ; CODE XREF: _request_resize+A3j
.text:00005F02                 push    offset ?ss@?3??request_resize@@9@9 ; `request_resize'::`4'::ss
.text:00005F07                 call    _get_fullscreen_rect
.text:00005F0C                 add     esp, 4
.text:00005F0F                 test    eax, eax
.text:00005F11                 jz      short loc_5F15
.text:00005F13                 jmp     short loc_5F21
.text:00005F15 ; ---------------------------------------------------------------------------
.text:00005F15
.text:00005F15 loc_5F15:                               ; CODE XREF: _request_resize+B9j
.text:00005F15                 mov     ?first_time@?3??request_resize@@9@9, 2 ; `request_resize'::`4'::first_time
.text:00005F1F                 jmp     short loc_5F89
.text:00005F21 ; ---------------------------------------------------------------------------
.text:00005F21
.text:00005F21 loc_5F21:                               ; CODE XREF: _request_resize+9Dj
.text:00005F21                                         ; _request_resize+BBj
.text:00005F21                 mov     eax, ds:dword_59C
.text:00005F26                 sub     eax, ds:?ss@?3??request_resize@@9@9 ; `request_resize'::`4'::ss
.text:00005F2C                 sub     eax, ds:_extra_width
.text:00005F32                 cdq
.text:00005F33                 and     edx, 3
.text:00005F36                 add     eax, edx
.text:00005F38                 sar     eax, 2
.text:00005F3B                 mov     [ebp+var_4], eax
.text:00005F3E                 mov     eax, ds:dword_5A0
.text:00005F43                 sub     eax, ds:dword_598
.text:00005F49                 sub     eax, ds:_extra_height
.text:00005F4F                 cdq
.text:00005F50                 mov     ecx, 6
.text:00005F55                 idiv    ecx
.text:00005F57                 mov     [ebp+cy], eax
.text:00005F5A                 mov     edx, [ebp+arg_4]
.text:00005F5D                 cmp     edx, [ebp+var_4]
.text:00005F60                 jg      short loc_5F6A
.text:00005F62                 mov     eax, [ebp+arg_8]
.text:00005F65                 cmp     eax, [ebp+cy]
.text:00005F68                 jle     short loc_5F6F
.text:00005F6A
.text:00005F6A loc_5F6A:                               ; CODE XREF: _request_resize+108j
.text:00005F6A                 jmp     loc_6055
.text:00005F6F ; ---------------------------------------------------------------------------
.text:00005F6F
.text:00005F6F loc_5F6F:                               ; CODE XREF: _request_resize+110j
.text:00005F6F                 cmp     [ebp+arg_4], 0Fh
.text:00005F73                 jge     short loc_5F7C
.text:00005F75                 mov     [ebp+arg_4], 0Fh
.text:00005F7C
.text:00005F7C loc_5F7C:                               ; CODE XREF: _request_resize+11Bj
.text:00005F7C                 cmp     [ebp+arg_8], 1
.text:00005F80                 jge     short loc_5F89
.text:00005F82                 mov     [ebp+arg_8], 1
.text:00005F89
.text:00005F89 loc_5F89:                               ; CODE XREF: _request_resize+A5j
.text:00005F89                                         ; _request_resize+C7j ...
.text:00005F89                 push    5Bh ; '['
.text:00005F8B                 mov     ecx, dword ptr ds:_conf
.text:00005F91                 push    ecx
.text:00005F92                 call    _conf_get_int
.text:00005F97                 add     esp, 8
.text:00005F9A                 push    eax
.text:00005F9B                 mov     edx, [ebp+arg_4]
.text:00005F9E                 push    edx
.text:00005F9F                 mov     eax, [ebp+arg_8]
.text:00005FA2                 push    eax
.text:00005FA3                 mov     ecx, dword ptr ds:_term
.text:00005FA9                 push    ecx
.text:00005FAA                 call    _term_size
.text:00005FAF                 add     esp, 10h
.text:00005FB2                 push    6Ah ; 'j'
.text:00005FB4                 mov     edx, dword ptr ds:_conf
.text:00005FBA                 push    edx
.text:00005FBB                 call    _conf_get_int
.text:00005FC0                 add     esp, 8
.text:00005FC3                 cmp     eax, 2
.text:00005FC6                 jz      short loc_6032
.text:00005FC8                 mov     esi, esp
.text:00005FCA                 mov     eax, dword ptr ds:_hwnd
.text:00005FCF                 push    eax             ; hWnd
.text:00005FD0                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:00005FD6                 cmp     esi, esp
.text:00005FD8                 call    __RTC_CheckEsp
.text:00005FDD                 test    eax, eax
.text:00005FDF                 jnz     short loc_6032
.text:00005FE1                 mov     ecx, ds:_font_width
.text:00005FE7                 imul    ecx, [ebp+arg_4]
.text:00005FEB                 add     ecx, ds:_extra_width
.text:00005FF1                 mov     [ebp+var_4], ecx
.text:00005FF4                 mov     edx, ds:_font_height
.text:00005FFA                 imul    edx, [ebp+arg_8]
.text:00005FFE                 add     edx, ds:_extra_height
.text:00006004                 mov     [ebp+cy], edx
.text:00006007                 mov     esi, esp
.text:00006009                 push    116h            ; uFlags
.text:0000600E                 mov     eax, [ebp+cy]
.text:00006011                 push    eax             ; cy
.text:00006012                 mov     ecx, [ebp+var_4]
.text:00006015                 push    ecx             ; cx
.text:00006016                 push    0               ; Y
.text:00006018                 push    0               ; X
.text:0000601A                 push    0               ; hWndInsertAfter
.text:0000601C                 mov     edx, dword ptr ds:_hwnd
.text:00006022                 push    edx             ; hWnd
.text:00006023                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:00006029                 cmp     esi, esp
.text:0000602B                 call    __RTC_CheckEsp
.text:00006030                 jmp     short loc_603C
.text:00006032 ; ---------------------------------------------------------------------------
.text:00006032
.text:00006032 loc_6032:                               ; CODE XREF: _request_resize+16Ej
.text:00006032                                         ; _request_resize+187j
.text:00006032                 push    0
.text:00006034                 call    _reset_window
.text:00006039                 add     esp, 4
.text:0000603C
.text:0000603C loc_603C:                               ; CODE XREF: _request_resize+1D8j
.text:0000603C                 mov     esi, esp
.text:0000603E                 push    1               ; bErase
.text:00006040                 push    0               ; lpRect
.text:00006042                 mov     eax, dword ptr ds:_hwnd
.text:00006047                 push    eax             ; hWnd
.text:00006048                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:0000604E                 cmp     esi, esp
.text:00006050                 call    __RTC_CheckEsp
.text:00006055
.text:00006055 loc_6055:                               ; CODE XREF: _request_resize+4Aj
.text:00006055                                         ; _request_resize+65j ...
.text:00006055                 pop     esi
.text:00006056                 add     esp, 0Ch
.text:00006059                 cmp     ebp, esp
.text:0000605B                 call    __RTC_CheckEsp
.text:00006060                 mov     esp, ebp
.text:00006062                 pop     ebp
.text:00006063                 retn
.text:00006063 _request_resize endp
.text:00006063
.text:00006063 ; ---------------------------------------------------------------------------
.text:00006064                 align 8
.text:00006068
.text:00006068 ; =============== S U B R O U T I N E =======================================
.text:00006068
.text:00006068 ; Attributes: bp-based frame
.text:00006068
.text:00006068 _reset_window   proc near               ; CODE XREF: _request_resize+1DCp
.text:00006068                                         ; WndProc(x,x,x,x)+EB8p ...
.text:00006068
.text:00006068 var_4C          = dword ptr -4Ch
.text:00006068 var_48          = dword ptr -48h
.text:00006068 Rect            = tagRECT ptr -40h
.text:00006068 var_28          = tagRECT ptr -28h
.text:00006068 var_14          = dword ptr -14h
.text:00006068 var_10          = dword ptr -10h
.text:00006068 var_C           = dword ptr -0Ch
.text:00006068 var_8           = dword ptr -8
.text:00006068 var_4           = dword ptr -4
.text:00006068 arg_0           = dword ptr  8
.text:00006068
.text:00006068                 push    ebp
.text:00006069                 mov     ebp, esp
.text:0000606B                 sub     esp, 4Ch
.text:0000606E                 push    esi
.text:0000606F                 push    edi
.text:00006070                 lea     edi, [ebp+var_4C]
.text:00006073                 mov     ecx, 13h
.text:00006078                 mov     eax, 0CCCCCCCCh
.text:0000607D                 rep stosd
.text:0000607F                 mov     eax, dword ptr ds:___security_cookie
.text:00006084                 xor     eax, ebp
.text:00006086                 mov     [ebp+var_4], eax
.text:00006089                 mov     esi, esp
.text:0000608B                 lea     eax, [ebp+Rect]
.text:0000608E                 push    eax             ; lpRect
.text:0000608F                 mov     ecx, dword ptr ds:_hwnd
.text:00006095                 push    ecx             ; hWnd
.text:00006096                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:0000609C                 cmp     esi, esp
.text:0000609E                 call    __RTC_CheckEsp
.text:000060A3                 mov     esi, esp
.text:000060A5                 lea     edx, [ebp+var_28]
.text:000060A8                 push    edx             ; lpRect
.text:000060A9                 mov     eax, dword ptr ds:_hwnd
.text:000060AE                 push    eax             ; hWnd
.text:000060AF                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text:000060B5                 cmp     esi, esp
.text:000060B7                 call    __RTC_CheckEsp
.text:000060BC                 mov     ecx, [ebp+var_28.right]
.text:000060BF                 sub     ecx, [ebp+var_28.left]
.text:000060C2                 mov     [ebp+var_8], ecx
.text:000060C5                 mov     edx, [ebp+var_28.bottom]
.text:000060C8                 sub     edx, [ebp+var_28.top]
.text:000060CB                 mov     [ebp+var_C], edx
.text:000060CE                 push    6Ah ; 'j'
.text:000060D0                 mov     eax, dword ptr ds:_conf
.text:000060D5                 push    eax
.text:000060D6                 call    _conf_get_int
.text:000060DB                 add     esp, 8
.text:000060DE                 mov     [ebp+var_10], eax
.text:000060E1                 push    7Ah ; 'z'
.text:000060E3                 mov     ecx, dword ptr ds:_conf
.text:000060E9                 push    ecx
.text:000060EA                 call    _conf_get_int
.text:000060EF                 add     esp, 8
.text:000060F2                 mov     [ebp+var_14], eax
.text:000060F5                 cmp     [ebp+var_10], 1
.text:000060F9                 jnz     short loc_6102
.text:000060FB                 mov     [ebp+arg_0], 2
.text:00006102
.text:00006102 loc_6102:                               ; CODE XREF: _reset_window+91j
.text:00006102                 cmp     [ebp+arg_0], 1
.text:00006106                 jle     short loc_6119
.text:00006108                 call    _deinit_fonts
.text:0000610D                 push    0
.text:0000610F                 push    0
.text:00006111                 call    _init_fonts
.text:00006116                 add     esp, 8
.text:00006119
.text:00006119 loc_6119:                               ; CODE XREF: _reset_window+9Ej
.text:00006119                 cmp     [ebp+var_8], 0
.text:0000611D                 jz      short loc_6125
.text:0000611F                 cmp     [ebp+var_C], 0
.text:00006123                 jnz     short loc_612A
.text:00006125
.text:00006125 loc_6125:                               ; CODE XREF: _reset_window+B5j
.text:00006125                 jmp     loc_6885
.text:0000612A ; ---------------------------------------------------------------------------
.text:0000612A
.text:0000612A loc_612A:                               ; CODE XREF: _reset_window+BBj
.text:0000612A                 cmp     [ebp+arg_0], 0
.text:0000612E                 jnz     loc_61E0
.text:00006134                 mov     edx, dword ptr ds:_term
.text:0000613A                 mov     eax, ds:_font_width
.text:0000613F                 imul    eax, [edx+12Ch]
.text:00006146                 mov     ecx, [ebp+var_8]
.text:00006149                 sub     ecx, eax
.text:0000614B                 mov     eax, ecx
.text:0000614D                 cdq
.text:0000614E                 sub     eax, edx
.text:00006150                 sar     eax, 1
.text:00006152                 cmp     ds:_offset_width, eax
.text:00006158                 jnz     short loc_6180
.text:0000615A                 mov     edx, dword ptr ds:_term
.text:00006160                 mov     eax, ds:_font_height
.text:00006165                 imul    eax, [edx+128h]
.text:0000616C                 mov     ecx, [ebp+var_C]
.text:0000616F                 sub     ecx, eax
.text:00006171                 mov     eax, ecx
.text:00006173                 cdq
.text:00006174                 sub     eax, edx
.text:00006176                 sar     eax, 1
.text:00006178                 cmp     ds:_offset_height, eax
.text:0000617E                 jz      short loc_61E0
.text:00006180
.text:00006180 loc_6180:                               ; CODE XREF: _reset_window+F0j
.text:00006180                 mov     edx, dword ptr ds:_term
.text:00006186                 mov     eax, ds:_font_width
.text:0000618B                 imul    eax, [edx+12Ch]
.text:00006192                 mov     ecx, [ebp+var_8]
.text:00006195                 sub     ecx, eax
.text:00006197                 mov     eax, ecx
.text:00006199                 cdq
.text:0000619A                 sub     eax, edx
.text:0000619C                 sar     eax, 1
.text:0000619E                 mov     ds:_offset_width, eax
.text:000061A3                 mov     edx, dword ptr ds:_term
.text:000061A9                 mov     eax, ds:_font_height
.text:000061AE                 imul    eax, [edx+128h]
.text:000061B5                 mov     ecx, [ebp+var_C]
.text:000061B8                 sub     ecx, eax
.text:000061BA                 mov     eax, ecx
.text:000061BC                 cdq
.text:000061BD                 sub     eax, edx
.text:000061BF                 sar     eax, 1
.text:000061C1                 mov     ds:_offset_height, eax
.text:000061C6                 mov     esi, esp
.text:000061C8                 push    1               ; bErase
.text:000061CA                 push    0               ; lpRect
.text:000061CC                 mov     edx, dword ptr ds:_hwnd
.text:000061D2                 push    edx             ; hWnd
.text:000061D3                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:000061D9                 cmp     esi, esp
.text:000061DB                 call    __RTC_CheckEsp
.text:000061E0
.text:000061E0 loc_61E0:                               ; CODE XREF: _reset_window+C6j
.text:000061E0                                         ; _reset_window+116j
.text:000061E0                 mov     esi, esp
.text:000061E2                 mov     eax, dword ptr ds:_hwnd
.text:000061E7                 push    eax             ; hWnd
.text:000061E8                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:000061EE                 cmp     esi, esp
.text:000061F0                 call    __RTC_CheckEsp
.text:000061F5                 test    eax, eax
.text:000061F7                 jz      loc_63BF
.text:000061FD                 mov     ecx, [ebp+Rect.right]
.text:00006200                 sub     ecx, [ebp+Rect.left]
.text:00006203                 sub     ecx, [ebp+var_28.right]
.text:00006206                 add     ecx, [ebp+var_28.left]
.text:00006209                 mov     ds:_extra_width, ecx
.text:0000620F                 mov     edx, [ebp+Rect.bottom]
.text:00006212                 sub     edx, [ebp+Rect.top]
.text:00006215                 sub     edx, [ebp+var_28.bottom]
.text:00006218                 add     edx, [ebp+var_28.top]
.text:0000621B                 mov     ds:_extra_height, edx
.text:00006221                 cmp     [ebp+var_10], 0
.text:00006225                 jz      loc_62F3
.text:0000622B                 mov     ecx, dword ptr ds:_term
.text:00006231                 mov     eax, [ebp+var_8]
.text:00006234                 cdq
.text:00006235                 idiv    dword ptr [ecx+12Ch]
.text:0000623B                 cmp     ds:_font_width, eax
.text:00006241                 jnz     short loc_625F
.text:00006243                 mov     ecx, dword ptr ds:_term
.text:00006249                 mov     eax, [ebp+var_C]
.text:0000624C                 cdq
.text:0000624D                 idiv    dword ptr [ecx+128h]
.text:00006253                 cmp     ds:_font_height, eax
.text:00006259                 jz      loc_62EE
.text:0000625F
.text:0000625F loc_625F:                               ; CODE XREF: _reset_window+1D9j
.text:0000625F                 call    _deinit_fonts
.text:00006264                 mov     ecx, dword ptr ds:_term
.text:0000626A                 mov     eax, [ebp+var_C]
.text:0000626D                 cdq
.text:0000626E                 idiv    dword ptr [ecx+128h]
.text:00006274                 push    eax
.text:00006275                 mov     ecx, dword ptr ds:_term
.text:0000627B                 mov     eax, [ebp+var_8]
.text:0000627E                 cdq
.text:0000627F                 idiv    dword ptr [ecx+12Ch]
.text:00006285                 push    eax
.text:00006286                 call    _init_fonts
.text:0000628B                 add     esp, 8
.text:0000628E                 mov     edx, dword ptr ds:_term
.text:00006294                 mov     eax, ds:_font_width
.text:00006299                 imul    eax, [edx+12Ch]
.text:000062A0                 mov     ecx, [ebp+var_8]
.text:000062A3                 sub     ecx, eax
.text:000062A5                 mov     eax, ecx
.text:000062A7                 cdq
.text:000062A8                 sub     eax, edx
.text:000062AA                 sar     eax, 1
.text:000062AC                 mov     ds:_offset_width, eax
.text:000062B1                 mov     edx, dword ptr ds:_term
.text:000062B7                 mov     eax, ds:_font_height
.text:000062BC                 imul    eax, [edx+128h]
.text:000062C3                 mov     ecx, [ebp+var_C]
.text:000062C6                 sub     ecx, eax
.text:000062C8                 mov     eax, ecx
.text:000062CA                 cdq
.text:000062CB                 sub     eax, edx
.text:000062CD                 sar     eax, 1
.text:000062CF                 mov     ds:_offset_height, eax
.text:000062D4                 mov     esi, esp
.text:000062D6                 push    1               ; bErase
.text:000062D8                 push    0               ; lpRect
.text:000062DA                 mov     edx, dword ptr ds:_hwnd
.text:000062E0                 push    edx             ; hWnd
.text:000062E1                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:000062E7                 cmp     esi, esp
.text:000062E9                 call    __RTC_CheckEsp
.text:000062EE
.text:000062EE loc_62EE:                               ; CODE XREF: _reset_window+1F1j
.text:000062EE                 jmp     loc_63BA
.text:000062F3 ; ---------------------------------------------------------------------------
.text:000062F3
.text:000062F3 loc_62F3:                               ; CODE XREF: _reset_window+1BDj
.text:000062F3                 mov     eax, dword ptr ds:_term
.text:000062F8                 mov     ecx, ds:_font_width
.text:000062FE                 imul    ecx, [eax+12Ch]
.text:00006305                 cmp     ecx, [ebp+var_8]
.text:00006308                 jnz     short loc_6325
.text:0000630A                 mov     edx, dword ptr ds:_term
.text:00006310                 mov     eax, ds:_font_height
.text:00006315                 imul    eax, [edx+128h]
.text:0000631C                 cmp     eax, [ebp+var_C]
.text:0000631F                 jz      loc_63BA
.text:00006325
.text:00006325 loc_6325:                               ; CODE XREF: _reset_window+2A0j
.text:00006325                 push    5Bh ; '['
.text:00006327                 mov     ecx, dword ptr ds:_conf
.text:0000632D                 push    ecx
.text:0000632E                 call    _conf_get_int
.text:00006333                 add     esp, 8
.text:00006336                 push    eax
.text:00006337                 mov     eax, [ebp+var_8]
.text:0000633A                 cdq
.text:0000633B                 idiv    ds:_font_width
.text:00006341                 push    eax
.text:00006342                 mov     eax, [ebp+var_C]
.text:00006345                 cdq
.text:00006346                 idiv    ds:_font_height
.text:0000634C                 push    eax
.text:0000634D                 mov     edx, dword ptr ds:_term
.text:00006353                 push    edx
.text:00006354                 call    _term_size
.text:00006359                 add     esp, 10h
.text:0000635C                 mov     eax, dword ptr ds:_term
.text:00006361                 mov     ecx, ds:_font_width
.text:00006367                 imul    ecx, [eax+12Ch]
.text:0000636E                 mov     eax, [ebp+var_8]
.text:00006371                 sub     eax, ecx
.text:00006373                 cdq
.text:00006374                 sub     eax, edx
.text:00006376                 sar     eax, 1
.text:00006378                 mov     ds:_offset_width, eax
.text:0000637D                 mov     edx, dword ptr ds:_term
.text:00006383                 mov     eax, ds:_font_height
.text:00006388                 imul    eax, [edx+128h]
.text:0000638F                 mov     ecx, [ebp+var_C]
.text:00006392                 sub     ecx, eax
.text:00006394                 mov     eax, ecx
.text:00006396                 cdq
.text:00006397                 sub     eax, edx
.text:00006399                 sar     eax, 1
.text:0000639B                 mov     ds:_offset_height, eax
.text:000063A0                 mov     esi, esp
.text:000063A2                 push    1               ; bErase
.text:000063A4                 push    0               ; lpRect
.text:000063A6                 mov     edx, dword ptr ds:_hwnd
.text:000063AC                 push    edx             ; hWnd
.text:000063AD                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:000063B3                 cmp     esi, esp
.text:000063B5                 call    __RTC_CheckEsp
.text:000063BA
.text:000063BA loc_63BA:                               ; CODE XREF: _reset_window:loc_62EEj
.text:000063BA                                         ; _reset_window+2B7j
.text:000063BA                 jmp     loc_6885
.text:000063BF ; ---------------------------------------------------------------------------
.text:000063BF
.text:000063BF loc_63BF:                               ; CODE XREF: _reset_window+18Fj
.text:000063BF                 cmp     [ebp+arg_0], 0
.text:000063C3                 jle     loc_64C0
.text:000063C9                 mov     eax, [ebp+var_14]
.text:000063CC                 mov     ds:_offset_height, eax
.text:000063D1                 mov     ecx, ds:_offset_height
.text:000063D7                 mov     ds:_offset_width, ecx
.text:000063DD                 mov     edx, [ebp+Rect.right]
.text:000063E0                 sub     edx, [ebp+Rect.left]
.text:000063E3                 sub     edx, [ebp+var_28.right]
.text:000063E6                 add     edx, [ebp+var_28.left]
.text:000063E9                 mov     eax, ds:_offset_width
.text:000063EE                 lea     ecx, [edx+eax*2]
.text:000063F1                 mov     ds:_extra_width, ecx
.text:000063F7                 mov     edx, [ebp+Rect.bottom]
.text:000063FA                 sub     edx, [ebp+Rect.top]
.text:000063FD                 sub     edx, [ebp+var_28.bottom]
.text:00006400                 add     edx, [ebp+var_28.top]
.text:00006403                 mov     eax, ds:_offset_height
.text:00006408                 lea     ecx, [edx+eax*2]
.text:0000640B                 mov     ds:_extra_height, ecx
.text:00006411                 mov     edx, dword ptr ds:_term
.text:00006417                 mov     eax, ds:_font_width
.text:0000641C                 imul    eax, [edx+12Ch]
.text:00006423                 mov     ecx, ds:_offset_width
.text:00006429                 lea     edx, [eax+ecx*2]
.text:0000642C                 cmp     [ebp+var_8], edx
.text:0000642F                 jnz     short loc_6451
.text:00006431                 mov     eax, dword ptr ds:_term
.text:00006436                 mov     ecx, ds:_font_height
.text:0000643C                 imul    ecx, [eax+128h]
.text:00006443                 mov     edx, ds:_offset_height
.text:00006449                 lea     eax, [ecx+edx*2]
.text:0000644C                 cmp     [ebp+var_C], eax
.text:0000644F                 jz      short loc_64A2
.text:00006451
.text:00006451 loc_6451:                               ; CODE XREF: _reset_window+3C7j
.text:00006451                 mov     esi, esp
.text:00006453                 push    6               ; uFlags
.text:00006455                 mov     ecx, dword ptr ds:_term
.text:0000645B                 mov     edx, ds:_font_height
.text:00006461                 imul    edx, [ecx+128h]
.text:00006468                 add     edx, ds:_extra_height
.text:0000646E                 push    edx             ; cy
.text:0000646F                 mov     eax, dword ptr ds:_term
.text:00006474                 mov     ecx, ds:_font_width
.text:0000647A                 imul    ecx, [eax+12Ch]
.text:00006481                 add     ecx, ds:_extra_width
.text:00006487                 push    ecx             ; cx
.text:00006488                 push    0               ; Y
.text:0000648A                 push    0               ; X
.text:0000648C                 push    0               ; hWndInsertAfter
.text:0000648E                 mov     edx, dword ptr ds:_hwnd
.text:00006494                 push    edx             ; hWnd
.text:00006495                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:0000649B                 cmp     esi, esp
.text:0000649D                 call    __RTC_CheckEsp
.text:000064A2
.text:000064A2 loc_64A2:                               ; CODE XREF: _reset_window+3E7j
.text:000064A2                 mov     esi, esp
.text:000064A4                 push    1               ; bErase
.text:000064A6                 push    0               ; lpRect
.text:000064A8                 mov     eax, dword ptr ds:_hwnd
.text:000064AD                 push    eax             ; hWnd
.text:000064AE                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:000064B4                 cmp     esi, esp
.text:000064B6                 call    __RTC_CheckEsp
.text:000064BB                 jmp     loc_6885
.text:000064C0 ; ---------------------------------------------------------------------------
.text:000064C0
.text:000064C0 loc_64C0:                               ; CODE XREF: _reset_window+35Bj
.text:000064C0                 cmp     [ebp+var_10], 0
.text:000064C4                 jnz     short loc_64CC
.text:000064C6                 cmp     [ebp+arg_0], 0
.text:000064CA                 jle     short loc_64E2
.text:000064CC
.text:000064CC loc_64CC:                               ; CODE XREF: _reset_window+45Cj
.text:000064CC                 cmp     [ebp+var_10], 3
.text:000064D0                 jnz     short loc_64D8
.text:000064D2                 cmp     [ebp+arg_0], 0
.text:000064D6                 jl      short loc_64E2
.text:000064D8
.text:000064D8 loc_64D8:                               ; CODE XREF: _reset_window+468j
.text:000064D8                 cmp     [ebp+arg_0], 0
.text:000064DC                 jle     loc_6772
.text:000064E2
.text:000064E2 loc_64E2:                               ; CODE XREF: _reset_window+462j
.text:000064E2                                         ; _reset_window+46Ej
.text:000064E2                 mov     ecx, [ebp+var_14]
.text:000064E5                 mov     ds:_offset_height, ecx
.text:000064EB                 mov     edx, ds:_offset_height
.text:000064F1                 mov     ds:_offset_width, edx
.text:000064F7                 mov     eax, [ebp+Rect.right]
.text:000064FA                 sub     eax, [ebp+Rect.left]
.text:000064FD                 sub     eax, [ebp+var_28.right]
.text:00006500                 add     eax, [ebp+var_28.left]
.text:00006503                 mov     ecx, ds:_offset_width
.text:00006509                 lea     edx, [eax+ecx*2]
.text:0000650C                 mov     ds:_extra_width, edx
.text:00006512                 mov     eax, [ebp+Rect.bottom]
.text:00006515                 sub     eax, [ebp+Rect.top]
.text:00006518                 sub     eax, [ebp+var_28.bottom]
.text:0000651B                 add     eax, [ebp+var_28.top]
.text:0000651E                 mov     ecx, ds:_offset_height
.text:00006524                 lea     edx, [eax+ecx*2]
.text:00006527                 mov     ds:_extra_height, edx
.text:0000652D                 mov     eax, dword ptr ds:_term
.text:00006532                 mov     ecx, ds:_font_width
.text:00006538                 imul    ecx, [eax+12Ch]
.text:0000653F                 mov     edx, ds:_offset_width
.text:00006545                 lea     eax, [ecx+edx*2]
.text:00006548                 cmp     [ebp+var_8], eax
.text:0000654B                 jnz     short loc_6571
.text:0000654D                 mov     ecx, dword ptr ds:_term
.text:00006553                 mov     edx, ds:_font_height
.text:00006559                 imul    edx, [ecx+128h]
.text:00006560                 mov     eax, ds:_offset_height
.text:00006565                 lea     ecx, [edx+eax*2]
.text:00006568                 cmp     [ebp+var_C], ecx
.text:0000656B                 jz      loc_676D
.text:00006571
.text:00006571 loc_6571:                               ; CODE XREF: _reset_window+4E3j
.text:00006571                 push    offset ?ss@?N@??reset_window@@9@9 ; `reset_window'::`13'::ss
.text:00006576                 call    _get_fullscreen_rect
.text:0000657B                 add     esp, 4
.text:0000657E                 mov     eax, ds:dword_10F4
.text:00006583                 sub     eax, ds:?ss@?N@??reset_window@@9@9 ; `reset_window'::`13'::ss
.text:00006589                 sub     eax, ds:_extra_width
.text:0000658F                 cdq
.text:00006590                 idiv    ds:_font_width
.text:00006596                 mov     [ebp+var_48], eax
.text:00006599                 mov     eax, ds:dword_10F8
.text:0000659E                 sub     eax, ds:dword_10F0
.text:000065A4                 sub     eax, ds:_extra_height
.text:000065AA                 cdq
.text:000065AB                 idiv    ds:_font_height
.text:000065B1                 mov     [ebp+var_4C], eax
.text:000065B4                 mov     edx, dword ptr ds:_term
.text:000065BA                 mov     eax, [edx+128h]
.text:000065C0                 cmp     eax, [ebp+var_4C]
.text:000065C3                 jg      short loc_65DA
.text:000065C5                 mov     ecx, dword ptr ds:_term
.text:000065CB                 mov     edx, [ecx+12Ch]
.text:000065D1                 cmp     edx, [ebp+var_48]
.text:000065D4                 jle     loc_6703
.text:000065DA
.text:000065DA loc_65DA:                               ; CODE XREF: _reset_window+55Bj
.text:000065DA                 cmp     [ebp+var_10], 3
.text:000065DE                 jnz     loc_669D
.text:000065E4                 mov     eax, dword ptr ds:_term
.text:000065E9                 mov     ecx, [eax+12Ch]
.text:000065EF                 cmp     ecx, [ebp+var_48]
.text:000065F2                 jle     short loc_6617
.text:000065F4                 mov     eax, ds:dword_10F4
.text:000065F9                 sub     eax, ds:?ss@?N@??reset_window@@9@9 ; `reset_window'::`13'::ss
.text:000065FF                 sub     eax, ds:_extra_width
.text:00006605                 mov     ecx, dword ptr ds:_term
.text:0000660B                 cdq
.text:0000660C                 idiv    dword ptr [ecx+12Ch]
.text:00006612                 mov     ds:_font_width, eax
.text:00006617
.text:00006617 loc_6617:                               ; CODE XREF: _reset_window+58Aj
.text:00006617                 mov     edx, dword ptr ds:_term
.text:0000661D                 mov     eax, [edx+128h]
.text:00006623                 cmp     eax, [ebp+var_4C]
.text:00006626                 jle     short loc_664B
.text:00006628                 mov     eax, ds:dword_10F8
.text:0000662D                 sub     eax, ds:dword_10F0
.text:00006633                 sub     eax, ds:_extra_height
.text:00006639                 mov     ecx, dword ptr ds:_term
.text:0000663F                 cdq
.text:00006640                 idiv    dword ptr [ecx+128h]
.text:00006646                 mov     ds:_font_height, eax
.text:0000664B
.text:0000664B loc_664B:                               ; CODE XREF: _reset_window+5BEj
.text:0000664B                 call    _deinit_fonts
.text:00006650                 mov     edx, ds:_font_height
.text:00006656                 push    edx
.text:00006657                 mov     eax, ds:_font_width
.text:0000665C                 push    eax
.text:0000665D                 call    _init_fonts
.text:00006662                 add     esp, 8
.text:00006665                 mov     eax, ds:dword_10F4
.text:0000666A                 sub     eax, ds:?ss@?N@??reset_window@@9@9 ; `reset_window'::`13'::ss
.text:00006670                 sub     eax, ds:_extra_width
.text:00006676                 cdq
.text:00006677                 idiv    ds:_font_width
.text:0000667D                 mov     [ebp+var_48], eax
.text:00006680                 mov     eax, ds:dword_10F8
.text:00006685                 sub     eax, ds:dword_10F0
.text:0000668B                 sub     eax, ds:_extra_height
.text:00006691                 cdq
.text:00006692                 idiv    ds:_font_height
.text:00006698                 mov     [ebp+var_4C], eax
.text:0000669B                 jmp     short loc_6703
.text:0000669D ; ---------------------------------------------------------------------------
.text:0000669D
.text:0000669D loc_669D:                               ; CODE XREF: _reset_window+576j
.text:0000669D                 mov     ecx, dword ptr ds:_term
.text:000066A3                 mov     edx, [ebp+var_4C]
.text:000066A6                 cmp     edx, [ecx+128h]
.text:000066AC                 jle     short loc_66BC
.text:000066AE                 mov     eax, dword ptr ds:_term
.text:000066B3                 mov     ecx, [eax+128h]
.text:000066B9                 mov     [ebp+var_4C], ecx
.text:000066BC
.text:000066BC loc_66BC:                               ; CODE XREF: _reset_window+644j
.text:000066BC                 mov     edx, dword ptr ds:_term
.text:000066C2                 mov     eax, [ebp+var_48]
.text:000066C5                 cmp     eax, [edx+12Ch]
.text:000066CB                 jle     short loc_66DC
.text:000066CD                 mov     ecx, dword ptr ds:_term
.text:000066D3                 mov     edx, [ecx+12Ch]
.text:000066D9                 mov     [ebp+var_48], edx
.text:000066DC
.text:000066DC loc_66DC:                               ; CODE XREF: _reset_window+663j
.text:000066DC                 push    5Bh ; '['
.text:000066DE                 mov     eax, dword ptr ds:_conf
.text:000066E3                 push    eax
.text:000066E4                 call    _conf_get_int
.text:000066E9                 add     esp, 8
.text:000066EC                 push    eax
.text:000066ED                 mov     ecx, [ebp+var_48]
.text:000066F0                 push    ecx
.text:000066F1                 mov     edx, [ebp+var_4C]
.text:000066F4                 push    edx
.text:000066F5                 mov     eax, dword ptr ds:_term
.text:000066FA                 push    eax
.text:000066FB                 call    _term_size
.text:00006700                 add     esp, 10h
.text:00006703
.text:00006703 loc_6703:                               ; CODE XREF: _reset_window+56Cj
.text:00006703                                         ; _reset_window+633j
.text:00006703                 mov     esi, esp
.text:00006705                 push    6               ; uFlags
.text:00006707                 mov     ecx, dword ptr ds:_term
.text:0000670D                 mov     edx, ds:_font_height
.text:00006713                 imul    edx, [ecx+128h]
.text:0000671A                 add     edx, ds:_extra_height
.text:00006720                 push    edx             ; cy
.text:00006721                 mov     eax, dword ptr ds:_term
.text:00006726                 mov     ecx, ds:_font_width
.text:0000672C                 imul    ecx, [eax+12Ch]
.text:00006733                 add     ecx, ds:_extra_width
.text:00006739                 push    ecx             ; cx
.text:0000673A                 push    0               ; Y
.text:0000673C                 push    0               ; X
.text:0000673E                 push    0               ; hWndInsertAfter
.text:00006740                 mov     edx, dword ptr ds:_hwnd
.text:00006746                 push    edx             ; hWnd
.text:00006747                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:0000674D                 cmp     esi, esp
.text:0000674F                 call    __RTC_CheckEsp
.text:00006754                 mov     esi, esp
.text:00006756                 push    1               ; bErase
.text:00006758                 push    0               ; lpRect
.text:0000675A                 mov     eax, dword ptr ds:_hwnd
.text:0000675F                 push    eax             ; hWnd
.text:00006760                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:00006766                 cmp     esi, esp
.text:00006768                 call    __RTC_CheckEsp
.text:0000676D
.text:0000676D loc_676D:                               ; CODE XREF: _reset_window+503j
.text:0000676D                 jmp     loc_6885
.text:00006772 ; ---------------------------------------------------------------------------
.text:00006772
.text:00006772 loc_6772:                               ; CODE XREF: _reset_window+474j
.text:00006772                 mov     ecx, [ebp+var_14]
.text:00006775                 shl     ecx, 1
.text:00006777                 mov     eax, [ebp+var_8]
.text:0000677A                 sub     eax, ecx
.text:0000677C                 mov     ecx, dword ptr ds:_term
.text:00006782                 cdq
.text:00006783                 idiv    dword ptr [ecx+12Ch]
.text:00006789                 cmp     ds:_font_width, eax
.text:0000678F                 jnz     short loc_67B4
.text:00006791                 mov     edx, [ebp+var_14]
.text:00006794                 shl     edx, 1
.text:00006796                 mov     eax, [ebp+var_C]
.text:00006799                 sub     eax, edx
.text:0000679B                 mov     ecx, dword ptr ds:_term
.text:000067A1                 cdq
.text:000067A2                 idiv    dword ptr [ecx+128h]
.text:000067A8                 cmp     ds:_font_height, eax
.text:000067AE                 jz      loc_6885
.text:000067B4
.text:000067B4 loc_67B4:                               ; CODE XREF: _reset_window+727j
.text:000067B4                 call    _deinit_fonts
.text:000067B9                 mov     edx, [ebp+var_14]
.text:000067BC                 shl     edx, 1
.text:000067BE                 mov     eax, [ebp+var_C]
.text:000067C1                 sub     eax, edx
.text:000067C3                 mov     ecx, dword ptr ds:_term
.text:000067C9                 cdq
.text:000067CA                 idiv    dword ptr [ecx+128h]
.text:000067D0                 push    eax
.text:000067D1                 mov     edx, [ebp+var_14]
.text:000067D4                 shl     edx, 1
.text:000067D6                 mov     eax, [ebp+var_8]
.text:000067D9                 sub     eax, edx
.text:000067DB                 mov     ecx, dword ptr ds:_term
.text:000067E1                 cdq
.text:000067E2                 idiv    dword ptr [ecx+12Ch]
.text:000067E8                 push    eax
.text:000067E9                 call    _init_fonts
.text:000067EE                 add     esp, 8
.text:000067F1                 mov     edx, dword ptr ds:_term
.text:000067F7                 mov     eax, ds:_font_width
.text:000067FC                 imul    eax, [edx+12Ch]
.text:00006803                 mov     ecx, [ebp+var_8]
.text:00006806                 sub     ecx, eax
.text:00006808                 mov     eax, ecx
.text:0000680A                 cdq
.text:0000680B                 sub     eax, edx
.text:0000680D                 sar     eax, 1
.text:0000680F                 mov     ds:_offset_width, eax
.text:00006814                 mov     edx, dword ptr ds:_term
.text:0000681A                 mov     eax, ds:_font_height
.text:0000681F                 imul    eax, [edx+128h]
.text:00006826                 mov     ecx, [ebp+var_C]
.text:00006829                 sub     ecx, eax
.text:0000682B                 mov     eax, ecx
.text:0000682D                 cdq
.text:0000682E                 sub     eax, edx
.text:00006830                 sar     eax, 1
.text:00006832                 mov     ds:_offset_height, eax
.text:00006837                 mov     edx, [ebp+Rect.right]
.text:0000683A                 sub     edx, [ebp+Rect.left]
.text:0000683D                 sub     edx, [ebp+var_28.right]
.text:00006840                 add     edx, [ebp+var_28.left]
.text:00006843                 mov     eax, ds:_offset_width
.text:00006848                 lea     ecx, [edx+eax*2]
.text:0000684B                 mov     ds:_extra_width, ecx
.text:00006851                 mov     edx, [ebp+Rect.bottom]
.text:00006854                 sub     edx, [ebp+Rect.top]
.text:00006857                 sub     edx, [ebp+var_28.bottom]
.text:0000685A                 add     edx, [ebp+var_28.top]
.text:0000685D                 mov     eax, ds:_offset_height
.text:00006862                 lea     ecx, [edx+eax*2]
.text:00006865                 mov     ds:_extra_height, ecx
.text:0000686B                 mov     esi, esp
.text:0000686D                 push    1               ; bErase
.text:0000686F                 push    0               ; lpRect
.text:00006871                 mov     edx, dword ptr ds:_hwnd
.text:00006877                 push    edx             ; hWnd
.text:00006878                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:0000687E                 cmp     esi, esp
.text:00006880                 call    __RTC_CheckEsp
.text:00006885
.text:00006885 loc_6885:                               ; CODE XREF: _reset_window:loc_6125j
.text:00006885                                         ; _reset_window:loc_63BAj ...
.text:00006885                 push    edx
.text:00006886                 mov     ecx, ebp
.text:00006888                 push    eax
.text:00006889                 lea     edx, $LN38
.text:0000688F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00006894                 pop     eax
.text:00006895                 pop     edx
.text:00006896                 pop     edi
.text:00006897                 pop     esi
.text:00006898                 mov     ecx, [ebp+var_4]
.text:0000689B                 xor     ecx, ebp
.text:0000689D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000068A2                 add     esp, 4Ch
.text:000068A5                 cmp     ebp, esp
.text:000068A7                 call    __RTC_CheckEsp
.text:000068AC                 mov     esp, ebp
.text:000068AE                 pop     ebp
.text:000068AF                 retn
.text:000068AF _reset_window   endp
.text:000068AF
.text:000068AF ; ---------------------------------------------------------------------------
.text:000068B0 $LN38           dd 2                    ; DATA XREF: _reset_window+821o
.text:000068B4                 dd offset $LN37
.text:000068B8 $LN37           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:000068B4o
.text:000068C0                 dd offset $LN35
.text:000068C4                 dd 0FFFFFFC0h, 10h
.text:000068CC                 dd offset $LN36
.text:000068D0 $LN36           db 77h, 72h, 0          ; DATA XREF: .text:000068CCo
.text:000068D3 $LN35           db 63h                  ; DATA XREF: .text:000068C0o
.text:000068D4                 dd 0CCCC0072h
.text:000068D8
.text:000068D8 ; =============== S U B R O U T I N E =======================================
.text:000068D8
.text:000068D8 ; Attributes: bp-based frame
.text:000068D8
.text:000068D8 _set_input_locale proc near             ; CODE XREF: WinMain(x,x,x,x)+11FDp
.text:000068D8                                         ; WndProc(x,x,x,x)+2866p
.text:000068D8
.text:000068D8 var_20          = dword ptr -20h
.text:000068D8 LCData          = byte ptr -1Ch
.text:000068D8 var_18          = dword ptr -18h
.text:000068D8 var_14          = dword ptr -14h
.text:000068D8 var_10          = dword ptr -10h
.text:000068D8 var_C           = dword ptr -0Ch
.text:000068D8 var_8           = dword ptr -8
.text:000068D8 var_4           = dword ptr -4
.text:000068D8 arg_0           = dword ptr  8
.text:000068D8
.text:000068D8                 push    ebp
.text:000068D9                 mov     ebp, esp
.text:000068DB                 sub     esp, 20h
.text:000068DE                 push    esi
.text:000068DF                 mov     eax, 0CCCCCCCCh
.text:000068E4                 mov     [ebp+var_20], eax
.text:000068E7                 mov     dword ptr [ebp+LCData], eax
.text:000068EA                 mov     [ebp+var_18], eax
.text:000068ED                 mov     [ebp+var_14], eax
.text:000068F0                 mov     [ebp+var_10], eax
.text:000068F3                 mov     [ebp+var_C], eax
.text:000068F6                 mov     [ebp+var_8], eax
.text:000068F9                 mov     [ebp+var_4], eax
.text:000068FC                 mov     eax, dword ptr ds:___security_cookie
.text:00006901                 xor     eax, ebp
.text:00006903                 mov     [ebp+var_4], eax
.text:00006906                 mov     esi, esp
.text:00006908                 push    14h             ; cchData
.text:0000690A                 lea     eax, [ebp+LCData]
.text:0000690D                 push    eax             ; lpLCData
.text:0000690E                 push    1004h           ; LCType
.text:00006913                 mov     ecx, [ebp+arg_0]
.text:00006916                 and     ecx, 0FFFFh
.text:0000691C                 movzx   edx, cx
.text:0000691F                 push    edx             ; Locale
.text:00006920                 call    dword ptr ds:__imp__GetLocaleInfoA@16 ; GetLocaleInfoA(x,x,x,x)
.text:00006926                 cmp     esi, esp
.text:00006928                 call    __RTC_CheckEsp
.text:0000692D                 lea     eax, [ebp+LCData]
.text:00006930                 push    eax             ; Str
.text:00006931                 call    _atoi
.text:00006936                 add     esp, 4
.text:00006939                 mov     ds:_kbd_codepage, eax
.text:0000693E                 push    edx
.text:0000693F                 mov     ecx, ebp
.text:00006941                 push    eax
.text:00006942                 lea     edx, $LN5_2
.text:00006948                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000694D                 pop     eax
.text:0000694E                 pop     edx
.text:0000694F                 pop     esi
.text:00006950                 mov     ecx, [ebp+var_4]
.text:00006953                 xor     ecx, ebp
.text:00006955                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000695A                 add     esp, 20h
.text:0000695D                 cmp     ebp, esp
.text:0000695F                 call    __RTC_CheckEsp
.text:00006964                 mov     esp, ebp
.text:00006966                 pop     ebp
.text:00006967                 retn
.text:00006967 _set_input_locale endp
.text:00006967
.text:00006967 ; ---------------------------------------------------------------------------
.text:00006968 $LN5_2          dd 1                    ; DATA XREF: _set_input_locale+6Ao
.text:0000696C                 dd offset $LN4_2
.text:00006970 $LN4_2          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:0000696Co
.text:00006978                 dd offset $LN3_2        ; "lbuf"
.text:0000697C $LN3_2          db 'lbuf',0             ; DATA XREF: .text:00006978o
.text:00006981                 align 8
.text:00006988
.text:00006988 ; =============== S U B R O U T I N E =======================================
.text:00006988
.text:00006988 ; Attributes: bp-based frame
.text:00006988
.text:00006988                 public _notify_remote_exit
.text:00006988 _notify_remote_exit proc near
.text:00006988
.text:00006988 var_8           = dword ptr -8
.text:00006988 var_4           = dword ptr -4
.text:00006988
.text:00006988                 push    ebp
.text:00006989                 mov     ebp, esp
.text:0000698B                 sub     esp, 8
.text:0000698E                 push    esi
.text:0000698F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006996                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000699D                 cmp     ds:_session_closed, 0
.text:000069A4                 jnz     loc_6A55
.text:000069AA                 mov     esi, esp
.text:000069AC                 mov     eax, ds:_backhandle
.text:000069B1                 push    eax
.text:000069B2                 mov     ecx, ds:_back
.text:000069B8                 mov     edx, [ecx+24h]
.text:000069BB                 call    edx
.text:000069BD                 add     esp, 4
.text:000069C0                 cmp     esi, esp
.text:000069C2                 call    __RTC_CheckEsp
.text:000069C7                 mov     [ebp+var_4], eax
.text:000069CA                 cmp     [ebp+var_4], 0
.text:000069CE                 jl      loc_6A55
.text:000069D4                 push    4
.text:000069D6                 mov     eax, dword ptr ds:_conf
.text:000069DB                 push    eax
.text:000069DC                 call    _conf_get_int
.text:000069E1                 add     esp, 8
.text:000069E4                 mov     [ebp+var_8], eax
.text:000069E7                 cmp     [ebp+var_8], 0
.text:000069EB                 jz      short loc_69FC
.text:000069ED                 cmp     [ebp+var_8], 2
.text:000069F1                 jnz     short loc_6A0F
.text:000069F3                 cmp     [ebp+var_4], 7FFFFFFFh
.text:000069FA                 jz      short loc_6A0F
.text:000069FC
.text:000069FC loc_69FC:                               ; CODE XREF: _notify_remote_exit+63j
.text:000069FC                 mov     esi, esp
.text:000069FE                 push    0               ; nExitCode
.text:00006A00                 call    dword ptr ds:__imp__PostQuitMessage@4 ; PostQuitMessage(x)
.text:00006A06                 cmp     esi, esp
.text:00006A08                 call    __RTC_CheckEsp
.text:00006A0D                 jmp     short loc_6A55
.text:00006A0F ; ---------------------------------------------------------------------------
.text:00006A0F
.text:00006A0F loc_6A0F:                               ; CODE XREF: _notify_remote_exit+69j
.text:00006A0F                                         ; _notify_remote_exit+72j
.text:00006A0F                 push    0
.text:00006A11                 push    offset _close_session
.text:00006A16                 call    _queue_toplevel_callback
.text:00006A1B                 add     esp, 8
.text:00006A1E                 mov     ds:_session_closed, 1
.text:00006A28                 cmp     [ebp+var_4], 7FFFFFFFh
.text:00006A2F                 jz      short loc_6A55
.text:00006A31                 mov     esi, esp
.text:00006A33                 push    40h ; '@'       ; uType
.text:00006A35                 mov     ecx, dword ptr ds:_appname
.text:00006A3B                 push    ecx             ; lpCaption
.text:00006A3C                 push    offset $SG89794 ; "Connection closed by remote host"
.text:00006A41                 mov     edx, dword ptr ds:_hwnd
.text:00006A47                 push    edx             ; hWnd
.text:00006A48                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00006A4E                 cmp     esi, esp
.text:00006A50                 call    __RTC_CheckEsp
.text:00006A55
.text:00006A55 loc_6A55:                               ; CODE XREF: _notify_remote_exit+1Cj
.text:00006A55                                         ; _notify_remote_exit+46j ...
.text:00006A55                 pop     esi
.text:00006A56                 add     esp, 8
.text:00006A59                 cmp     ebp, esp
.text:00006A5B                 call    __RTC_CheckEsp
.text:00006A60                 mov     esp, ebp
.text:00006A62                 pop     ebp
.text:00006A63                 retn
.text:00006A63 _notify_remote_exit endp
.text:00006A63
.text:00006A63 ; ---------------------------------------------------------------------------
.text:00006A64                 align 8
.text:00006A68
.text:00006A68 ; =============== S U B R O U T I N E =======================================
.text:00006A68
.text:00006A68 ; Attributes: bp-based frame
.text:00006A68
.text:00006A68                 public _timer_change_notify
.text:00006A68 _timer_change_notify proc near          ; CODE XREF: WndProc(x,x,x,x)+208p
.text:00006A68
.text:00006A68 uElapse         = dword ptr -8
.text:00006A68 var_4           = dword ptr -4
.text:00006A68 arg_0           = dword ptr  8
.text:00006A68
.text:00006A68                 push    ebp
.text:00006A69                 mov     ebp, esp
.text:00006A6B                 sub     esp, 8
.text:00006A6E                 push    esi
.text:00006A6F                 mov     [ebp+uElapse], 0CCCCCCCCh
.text:00006A76                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A7D                 mov     esi, esp
.text:00006A7F                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:00006A85                 cmp     esi, esp
.text:00006A87                 call    __RTC_CheckEsp
.text:00006A8C                 mov     [ebp+var_4], eax
.text:00006A8F                 mov     eax, [ebp+var_4]
.text:00006A92                 sub     eax, [ebp+arg_0]
.text:00006A95                 cmp     eax, 7FFFFFFFh
.text:00006A9A                 jnb     short loc_6AA5
.text:00006A9C                 mov     [ebp+uElapse], 0
.text:00006AA3                 jmp     short loc_6AAE
.text:00006AA5 ; ---------------------------------------------------------------------------
.text:00006AA5
.text:00006AA5 loc_6AA5:                               ; CODE XREF: _timer_change_notify+32j
.text:00006AA5                 mov     ecx, [ebp+arg_0]
.text:00006AA8                 sub     ecx, [ebp+var_4]
.text:00006AAB                 mov     [ebp+uElapse], ecx
.text:00006AAE
.text:00006AAE loc_6AAE:                               ; CODE XREF: _timer_change_notify+3Bj
.text:00006AAE                 mov     esi, esp
.text:00006AB0                 push    4D2h            ; uIDEvent
.text:00006AB5                 mov     edx, dword ptr ds:_hwnd
.text:00006ABB                 push    edx             ; hWnd
.text:00006ABC                 call    dword ptr ds:__imp__KillTimer@8 ; KillTimer(x,x)
.text:00006AC2                 cmp     esi, esp
.text:00006AC4                 call    __RTC_CheckEsp
.text:00006AC9                 mov     esi, esp
.text:00006ACB                 push    0               ; lpTimerFunc
.text:00006ACD                 mov     eax, [ebp+uElapse]
.text:00006AD0                 push    eax             ; uElapse
.text:00006AD1                 push    4D2h            ; nIDEvent
.text:00006AD6                 mov     ecx, dword ptr ds:_hwnd
.text:00006ADC                 push    ecx             ; hWnd
.text:00006ADD                 call    dword ptr ds:__imp__SetTimer@16 ; SetTimer(x,x,x,x)
.text:00006AE3                 cmp     esi, esp
.text:00006AE5                 call    __RTC_CheckEsp
.text:00006AEA                 mov     edx, [ebp+arg_0]
.text:00006AED                 mov     ds:_timing_next_time, edx
.text:00006AF3                 pop     esi
.text:00006AF4                 add     esp, 8
.text:00006AF7                 cmp     ebp, esp
.text:00006AF9                 call    __RTC_CheckEsp
.text:00006AFE                 mov     esp, ebp
.text:00006B00                 pop     ebp
.text:00006B01                 retn
.text:00006B01 _timer_change_notify endp
.text:00006B01
.text:00006B01 ; ---------------------------------------------------------------------------
.text:00006B02                 align 8
.text:00006B08
.text:00006B08 ; =============== S U B R O U T I N E =======================================
.text:00006B08
.text:00006B08 ; Attributes: bp-based frame
.text:00006B08
.text:00006B08 _conf_cache_data proc near              ; CODE XREF: WinMain(x,x,x,x)+A42p
.text:00006B08                                         ; WndProc(x,x,x,x):loc_72EDp
.text:00006B08                 push    ebp
.text:00006B09                 mov     ebp, esp
.text:00006B0B                 push    5Fh ; '_'
.text:00006B0D                 mov     eax, dword ptr ds:_conf
.text:00006B12                 push    eax
.text:00006B13                 call    _conf_get_int
.text:00006B18                 add     esp, 8
.text:00006B1B                 mov     dword ptr ds:_cursor_type, eax
.text:00006B20                 push    8Bh ; 'ï'
.text:00006B25                 mov     ecx, dword ptr ds:_conf
.text:00006B2B                 push    ecx
.text:00006B2C                 call    _conf_get_int
.text:00006B31                 add     esp, 8
.text:00006B34                 mov     dword ptr ds:_vtmode, eax
.text:00006B39                 cmp     ebp, esp
.text:00006B3B                 call    __RTC_CheckEsp
.text:00006B40                 pop     ebp
.text:00006B41                 retn
.text:00006B41 _conf_cache_data endp
.text:00006B41
.text:00006B41 ; ---------------------------------------------------------------------------
.text:00006B42                 align 8
.text:00006B48
.text:00006B48 ; =============== S U B R O U T I N E =======================================
.text:00006B48
.text:00006B48 ; Attributes: bp-based frame
.text:00006B48
.text:00006B48 ; int __stdcall WndProc(HWND hWnd, UINT, LPARAM lParam, LPARAM)
.text:00006B48 _WndProc@16     proc near               ; DATA XREF: WinMain(x,x,x,x)+9B6o
.text:00006B48
.text:00006B48 var_C3C         = dword ptr -0C3Ch
.text:00006B48 var_C38         = dword ptr -0C38h
.text:00006B48 var_C34         = dword ptr -0C34h
.text:00006B48 var_C30         = dword ptr -0C30h
.text:00006B48 var_C2C         = dword ptr -0C2Ch
.text:00006B48 var_C28         = dword ptr -0C28h
.text:00006B48 var_C24         = dword ptr -0C24h
.text:00006B48 var_C20         = dword ptr -0C20h
.text:00006B48 var_C1C         = dword ptr -0C1Ch
.text:00006B48 var_C18         = dword ptr -0C18h
.text:00006B48 var_C14         = dword ptr -0C14h
.text:00006B48 var_C10         = dword ptr -0C10h
.text:00006B48 lpString        = dword ptr -0C0Ch
.text:00006B48 var_C08         = dword ptr -0C08h
.text:00006B48 var_C04         = dword ptr -0C04h
.text:00006B48 var_C00         = dword ptr -0C00h
.text:00006B48 var_BF8         = tagPOINT ptr -0BF8h
.text:00006B48 var_BEC         = dword ptr -0BECh
.text:00006B48 KeyState        = byte ptr -0BE4h
.text:00006B48 var_BD4         = byte ptr -0BD4h
.text:00006B48 var_BD3         = byte ptr -0BD3h
.text:00006B48 var_AE0         = dword ptr -0AE0h
.text:00006B48 var_ADC         = dword ptr -0ADCh
.text:00006B48 var_AD8         = dword ptr -0AD8h
.text:00006B48 var_ACD         = byte ptr -0ACDh
.text:00006B48 var_AC1         = byte ptr -0AC1h
.text:00006B48 var_AB8         = byte ptr -0AB8h
.text:00006B48 var_AB7         = byte ptr -0AB7h
.text:00006B48 var_AB0         = word ptr -0AB0h
.text:00006B48 var_AAC         = word ptr -0AACh
.text:00006B48 var_AA8         = dword ptr -0AA8h
.text:00006B48 lpBuf           = dword ptr -0AA4h
.text:00006B48 dwBufLen        = dword ptr -0AA0h
.text:00006B48 var_A9C         = dword ptr -0A9Ch
.text:00006B48 var_A98         = dword ptr -0A98h
.text:00006B48 Msg             = MSG ptr -0A90h
.text:00006B48 var_A70         = dword ptr -0A70h
.text:00006B48 var_A68         = dword ptr -0A68h
.text:00006B48 var_A50         = dword ptr -0A50h
.text:00006B48 var_A4C         = dword ptr -0A4Ch
.text:00006B48 var_A44         = tagSCROLLINFO ptr -0A44h
.text:00006B48 var_A24         = dword ptr -0A24h
.text:00006B48 var_A20         = dword ptr -0A20h
.text:00006B48 var_A1C         = dword ptr -0A1Ch
.text:00006B48 var_A18         = dword ptr -0A18h
.text:00006B48 var_A14         = dword ptr -0A14h
.text:00006B48 var_A10         = dword ptr -0A10h
.text:00006B48 var_A0C         = dword ptr -0A0Ch
.text:00006B48 var_A08         = dword ptr -0A08h
.text:00006B48 var_A04         = dword ptr -0A04h
.text:00006B48 var_A00         = dword ptr -0A00h
.text:00006B48 var_9FC         = dword ptr -9FCh
.text:00006B48 var_9F8         = dword ptr -9F8h
.text:00006B48 var_9F4         = dword ptr -9F4h
.text:00006B48 var_9F0         = dword ptr -9F0h
.text:00006B48 var_9EC         = dword ptr -9ECh
.text:00006B48 var_9E8         = dword ptr -9E8h
.text:00006B48 var_9E4         = dword ptr -9E4h
.text:00006B48 var_9E0         = dword ptr -9E0h
.text:00006B48 var_9DC         = dword ptr -9DCh
.text:00006B48 var_9D8         = dword ptr -9D8h
.text:00006B48 var_9D4         = dword ptr -9D4h
.text:00006B48 var_9D0         = dword ptr -9D0h
.text:00006B48 var_9CC         = dword ptr -9CCh
.text:00006B48 ho              = dword ptr -9C8h
.text:00006B48 var_9C4         = dword ptr -9C4h
.text:00006B48 h               = dword ptr -9C0h
.text:00006B48 Paint           = tagPAINTSTRUCT ptr -9B8h
.text:00006B48 var_974         = dword ptr -974h
.text:00006B48 var_96C         = tagMONITORINFO ptr -96Ch
.text:00006B48 var_940         = dword ptr -940h
.text:00006B48 var_938         = POINT ptr -938h
.text:00006B48 var_929         = byte ptr -929h
.text:00006B48 var_928         = dword ptr -928h
.text:00006B48 var_924         = dword ptr -924h
.text:00006B48 Point           = tagPOINT ptr -91Ch
.text:00006B48 var_910         = dword ptr -910h
.text:00006B48 var_90C         = dword ptr -90Ch
.text:00006B48 var_908         = dword ptr -908h
.text:00006B48 var_904         = dword ptr -904h
.text:00006B48 var_900         = dword ptr -900h
.text:00006B48 var_8FC         = dword ptr -8FCh
.text:00006B48 dwNewLong       = dword ptr -8F8h
.text:00006B48 var_8F4         = dword ptr -8F4h
.text:00006B48 var_8F0         = dword ptr -8F0h
.text:00006B48 var_8EC         = dword ptr -8ECh
.text:00006B48 var_8E8         = dword ptr -8E8h
.text:00006B48 var_8E4         = dword ptr -8E4h
.text:00006B48 var_8E0         = dword ptr -8E0h
.text:00006B48 dwMaximumSizeLow= dword ptr -8DCh
.text:00006B48 lpBaseAddress   = dword ptr -8D8h
.text:00006B48 FileMappingAttributes= _SECURITY_ATTRIBUTES ptr -8D0h
.text:00006B48 hFileMappingObject= dword ptr -8C0h
.text:00006B48 ProcessInformation= _PROCESS_INFORMATION ptr -8B8h
.text:00006B48 StartupInfo     = _STARTUPINFOA ptr -8A0h
.text:00006B48 bInheritHandles = dword ptr -858h
.text:00006B48 var_854         = dword ptr -854h
.text:00006B48 lpCommandLine   = dword ptr -850h
.text:00006B48 Dest            = byte ptr -848h
.text:00006B48 Filename        = byte ptr -820h
.text:00006B48 lpCaption       = dword ptr -1Ch
.text:00006B48 var_14          = dword ptr -14h
.text:00006B48 var_C           = dword ptr -0Ch
.text:00006B48 hdc             = dword ptr -8
.text:00006B48 var_4           = dword ptr -4
.text:00006B48 hWnd            = dword ptr  8
.text:00006B48 arg_4           = dword ptr  0Ch
.text:00006B48 lParam          = dword ptr  10h
.text:00006B48 arg_C           = dword ptr  14h
.text:00006B48
.text:00006B48                 push    ebp
.text:00006B49                 mov     ebp, esp
.text:00006B4B                 sub     esp, 0C3Ch
.text:00006B51                 push    esi
.text:00006B52                 push    edi
.text:00006B53                 lea     edi, [ebp+var_C3C]
.text:00006B59                 mov     ecx, 30Fh
.text:00006B5E                 mov     eax, 0CCCCCCCCh
.text:00006B63                 rep stosd
.text:00006B65                 mov     eax, dword ptr ds:___security_cookie
.text:00006B6A                 xor     eax, ebp
.text:00006B6C                 mov     [ebp+var_4], eax
.text:00006B6F                 mov     eax, [ebp+arg_4]
.text:00006B72                 mov     [ebp+var_C00], eax
.text:00006B78                 cmp     [ebp+var_C00], 101h
.text:00006B82                 ja      short loc_6BC7
.text:00006B84                 cmp     [ebp+var_C00], 100h
.text:00006B8E                 jnb     $LN49_0         ; jumptable 00006C08 cases 2,3
.text:00006B94                 mov     ecx, [ebp+var_C00]
.text:00006B9A                 sub     ecx, 1
.text:00006B9D                 mov     [ebp+var_C00], ecx
.text:00006BA3                 cmp     [ebp+var_C00], 9Fh ; 'ƒ' ; switch 160 cases
.text:00006BAD                 ja      $LN16_0         ; jumptable 00006BC0 default case
.text:00006BB3                 mov     edx, [ebp+var_C00]
.text:00006BB9                 movzx   eax, ds:$LN287[edx]
.text:00006BC0                 jmp     ds:$LN310[eax*4] ; switch jump
.text:00006BC7 ; ---------------------------------------------------------------------------
.text:00006BC7
.text:00006BC7 loc_6BC7:                               ; CODE XREF: WndProc(x,x,x,x)+3Aj
.text:00006BC7                 cmp     [ebp+var_C00], 10Dh
.text:00006BD1                 ja      short loc_6C0F
.text:00006BD3                 cmp     [ebp+var_C00], 10Dh
.text:00006BDD                 jz      loc_93C0
.text:00006BE3                 mov     ecx, [ebp+var_C00]
.text:00006BE9                 sub     ecx, 102h
.text:00006BEF                 mov     [ebp+var_C00], ecx
.text:00006BF5                 cmp     [ebp+var_C00], 4 ; switch 5 cases
.text:00006BFC                 ja      $LN16_0         ; jumptable 00006BC0 default case
.text:00006C02                 mov     edx, [ebp+var_C00]
.text:00006C08                 jmp     ds:$LN311[edx*4] ; switch jump
.text:00006C0F ; ---------------------------------------------------------------------------
.text:00006C0F
.text:00006C0F loc_6C0F:                               ; CODE XREF: WndProc(x,x,x,x)+89j
.text:00006C0F                 cmp     [ebp+var_C00], 200h
.text:00006C19                 ja      short loc_6C56
.text:00006C1B                 cmp     [ebp+var_C00], 200h
.text:00006C25                 jz      loc_8013
.text:00006C2B                 mov     eax, [ebp+var_C00]
.text:00006C31                 sub     eax, 10Fh
.text:00006C36                 mov     [ebp+var_C00], eax
.text:00006C3C                 cmp     [ebp+var_C00], 8 ; switch 9 cases
.text:00006C43                 ja      $LN16_0         ; jumptable 00006BC0 default case
.text:00006C49                 mov     ecx, [ebp+var_C00]
.text:00006C4F                 jmp     ds:$LN312[ecx*4] ; switch jump
.text:00006C56 ; ---------------------------------------------------------------------------
.text:00006C56
.text:00006C56 loc_6C56:                               ; CODE XREF: WndProc(x,x,x,x)+D1j
.text:00006C56                 cmp     [ebp+var_C00], 307h
.text:00006C60                 ja      short loc_6CA8
.text:00006C62                 cmp     [ebp+var_C00], 307h
.text:00006C6C                 jz      loc_8213
.text:00006C72                 mov     edx, [ebp+var_C00]
.text:00006C78                 sub     edx, 201h
.text:00006C7E                 mov     [ebp+var_C00], edx
.text:00006C84                 cmp     [ebp+var_C00], 85h ; 'à' ; switch 134 cases
.text:00006C8E                 ja      $LN16_0         ; jumptable 00006BC0 default case
.text:00006C94                 mov     eax, [ebp+var_C00]
.text:00006C9A                 movzx   ecx, ds:$LN288[eax]
.text:00006CA1                 jmp     ds:$LN313[ecx*4] ; switch jump
.text:00006CA8 ; ---------------------------------------------------------------------------
.text:00006CA8
.text:00006CA8 loc_6CA8:                               ; CODE XREF: WndProc(x,x,x,x)+118j
.text:00006CA8                 cmp     [ebp+var_C00], 8002h
.text:00006CB2                 ja      short loc_6CE9
.text:00006CB4                 cmp     [ebp+var_C00], 8002h
.text:00006CBE                 jz      loc_8205
.text:00006CC4                 cmp     [ebp+var_C00], 30Fh
.text:00006CCE                 jz      loc_9230
.text:00006CD4                 cmp     [ebp+var_C00], 311h
.text:00006CDE                 jz      loc_91C2
.text:00006CE4                 jmp     $LN16_0         ; jumptable 00006BC0 default case
.text:00006CE9 ; ---------------------------------------------------------------------------
.text:00006CE9
.text:00006CE9 loc_6CE9:                               ; CODE XREF: WndProc(x,x,x,x)+16Aj
.text:00006CE9                 mov     edx, [ebp+var_C00]
.text:00006CEF                 sub     edx, 8003h
.text:00006CF5                 mov     [ebp+var_C00], edx
.text:00006CFB                 cmp     [ebp+var_C00], 3 ; switch 4 cases
.text:00006D02                 ja      $LN16_0         ; jumptable 00006BC0 default case
.text:00006D08                 mov     eax, [ebp+var_C00]
.text:00006D0E                 jmp     ds:$LN314[eax*4] ; switch jump
.text:00006D15 ; ---------------------------------------------------------------------------
.text:00006D15
.text:00006D15 $LN251:                                 ; CODE XREF: WndProc(x,x,x,x)+107j
.text:00006D15                                         ; DATA XREF: .text:$LN312o
.text:00006D15                 cmp     [ebp+lParam], 4D2h ; jumptable 00006C4F case 4
.text:00006D1C                 jnz     short loc_6D58
.text:00006D1E                 mov     esi, esp
.text:00006D20                 push    4D2h            ; uIDEvent
.text:00006D25                 mov     ecx, [ebp+hWnd]
.text:00006D28                 push    ecx             ; hWnd
.text:00006D29                 call    dword ptr ds:__imp__KillTimer@8 ; KillTimer(x,x)
.text:00006D2F                 cmp     esi, esp
.text:00006D31                 call    __RTC_CheckEsp
.text:00006D36                 lea     edx, [ebp+var_14]
.text:00006D39                 push    edx
.text:00006D3A                 mov     eax, ds:_timing_next_time
.text:00006D3F                 push    eax
.text:00006D40                 call    _run_timers
.text:00006D45                 add     esp, 8
.text:00006D48                 test    eax, eax
.text:00006D4A                 jz      short loc_6D58
.text:00006D4C                 mov     ecx, [ebp+var_14]
.text:00006D4F                 push    ecx
.text:00006D50                 call    _timer_change_notify
.text:00006D55                 add     esp, 4
.text:00006D58
.text:00006D58 loc_6D58:                               ; CODE XREF: WndProc(x,x,x,x)+1D4j
.text:00006D58                                         ; WndProc(x,x,x,x)+202j
.text:00006D58                 xor     eax, eax
.text:00006D5A                 jmp     loc_9A43
.text:00006D5F ; ---------------------------------------------------------------------------
.text:00006D5F
.text:00006D5F $LN247:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:00006D5F                                         ; DATA XREF: .text:$LN310o
.text:00006D5F                 jmp     loc_9A24        ; jumptable 00006BC0 case 0
.text:00006D64 ; ---------------------------------------------------------------------------
.text:00006D64
.text:00006D64 $LN246:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:00006D64                                         ; DATA XREF: .text:$LN310o
.text:00006D64                 push    1               ; jumptable 00006BC0 case 15
.text:00006D66                 call    _show_mouseptr
.text:00006D6B                 add     esp, 4
.text:00006D6E                 mov     edx, dword ptr ds:_appname
.text:00006D74                 push    edx
.text:00006D75                 push    offset $SG89839 ; "%s Exit Confirmation"
.text:00006D7A                 call    _dupprintf
.text:00006D7F                 add     esp, 8
.text:00006D82                 mov     [ebp+lpCaption], eax
.text:00006D85                 cmp     ds:_session_closed, 0
.text:00006D8C                 jnz     short loc_6DC5
.text:00006D8E                 push    5
.text:00006D90                 mov     eax, dword ptr ds:_conf
.text:00006D95                 push    eax
.text:00006D96                 call    _conf_get_int
.text:00006D9B                 add     esp, 8
.text:00006D9E                 test    eax, eax
.text:00006DA0                 jz      short loc_6DC5
.text:00006DA2                 mov     esi, esp
.text:00006DA4                 push    31h ; '1'       ; uType
.text:00006DA6                 mov     ecx, [ebp+lpCaption]
.text:00006DA9                 push    ecx             ; lpCaption
.text:00006DAA                 push    offset $SG89842 ; "Are you sure you want to close this ses"...
.text:00006DAF                 mov     edx, [ebp+hWnd]
.text:00006DB2                 push    edx             ; hWnd
.text:00006DB3                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00006DB9                 cmp     esi, esp
.text:00006DBB                 call    __RTC_CheckEsp
.text:00006DC0                 cmp     eax, 1
.text:00006DC3                 jnz     short loc_6DD8
.text:00006DC5
.text:00006DC5 loc_6DC5:                               ; CODE XREF: WndProc(x,x,x,x)+244j
.text:00006DC5                                         ; WndProc(x,x,x,x)+258j
.text:00006DC5                 mov     esi, esp
.text:00006DC7                 mov     eax, [ebp+hWnd]
.text:00006DCA                 push    eax             ; hWnd
.text:00006DCB                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text:00006DD1                 cmp     esi, esp
.text:00006DD3                 call    __RTC_CheckEsp
.text:00006DD8
.text:00006DD8 loc_6DD8:                               ; CODE XREF: WndProc(x,x,x,x)+27Bj
.text:00006DD8                 mov     ecx, [ebp+lpCaption]
.text:00006DDB                 push    ecx
.text:00006DDC                 call    _safefree
.text:00006DE1                 add     esp, 4
.text:00006DE4                 xor     eax, eax
.text:00006DE6                 jmp     loc_9A43
.text:00006DEB ; ---------------------------------------------------------------------------
.text:00006DEB
.text:00006DEB $LN243:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:00006DEB                                         ; DATA XREF: .text:$LN310o
.text:00006DEB                 push    1               ; jumptable 00006BC0 case 1
.text:00006DED                 call    _show_mouseptr
.text:00006DF2                 add     esp, 4
.text:00006DF5                 mov     esi, esp
.text:00006DF7                 push    0               ; nExitCode
.text:00006DF9                 call    dword ptr ds:__imp__PostQuitMessage@4 ; PostQuitMessage(x)
.text:00006DFF                 cmp     esi, esp
.text:00006E01                 call    __RTC_CheckEsp
.text:00006E06                 xor     eax, eax
.text:00006E08                 jmp     loc_9A43
.text:00006E0D ; ---------------------------------------------------------------------------
.text:00006E0D
.text:00006E0D $LN242:                                 ; CODE XREF: WndProc(x,x,x,x)+107j
.text:00006E0D                                         ; DATA XREF: .text:$LN312o
.text:00006E0D                 mov     edx, [ebp+lParam] ; jumptable 00006C4F case 8
.text:00006E10                 cmp     edx, ds:_savedsess_menu
.text:00006E16                 jnz     short loc_6E42
.text:00006E18                 push    0
.text:00006E1A                 push    offset _sesslist
.text:00006E1F                 call    _get_sesslist
.text:00006E24                 add     esp, 8
.text:00006E27                 push    1
.text:00006E29                 push    offset _sesslist
.text:00006E2E                 call    _get_sesslist
.text:00006E33                 add     esp, 8
.text:00006E36                 call    _update_savedsess_menu
.text:00006E3B                 xor     eax, eax
.text:00006E3D                 jmp     loc_9A43
.text:00006E42 ; ---------------------------------------------------------------------------
.text:00006E42
.text:00006E42 loc_6E42:                               ; CODE XREF: WndProc(x,x,x,x)+2CEj
.text:00006E42                 jmp     loc_9A24
.text:00006E47 ; ---------------------------------------------------------------------------
.text:00006E47
.text:00006E47 $LN240:                                 ; CODE XREF: WndProc(x,x,x,x)+107j
.text:00006E47                                         ; DATA XREF: .text:$LN312o
.text:00006E47                 mov     eax, [ebp+lParam] ; jumptable 00006C4F cases 2,3
.text:00006E4A                 and     eax, 0FFFFFFF0h
.text:00006E4D                 mov     [ebp+var_C04], eax
.text:00006E53                 cmp     [ebp+var_C04], 140h
.text:00006E5D                 ja      short loc_6E9F
.text:00006E5F                 cmp     [ebp+var_C04], 140h
.text:00006E69                 jz      loc_7A97
.text:00006E6F                 mov     ecx, [ebp+var_C04]
.text:00006E75                 sub     ecx, 10h
.text:00006E78                 mov     [ebp+var_C04], ecx
.text:00006E7E                 cmp     [ebp+var_C04], 60h ; '`' ; switch 97 cases
.text:00006E85                 ja      $LN178          ; jumptable 00006E98 default case
.text:00006E8B                 mov     edx, [ebp+var_C04]
.text:00006E91                 movzx   eax, ds:$LN289[edx]
.text:00006E98                 jmp     ds:$LN315[eax*4] ; switch jump
.text:00006E9F ; ---------------------------------------------------------------------------
.text:00006E9F
.text:00006E9F loc_6E9F:                               ; CODE XREF: WndProc(x,x,x,x)+315j
.text:00006E9F                 cmp     [ebp+var_C04], 180h
.text:00006EA9                 ja      short loc_6EEC
.text:00006EAB                 cmp     [ebp+var_C04], 180h
.text:00006EB5                 jz      loc_7AEA
.text:00006EBB                 cmp     [ebp+var_C04], 150h
.text:00006EC5                 jz      loc_7A86
.text:00006ECB                 cmp     [ebp+var_C04], 160h
.text:00006ED5                 jz      short $LN236    ; jumptable 00006E98 cases 16,32
.text:00006ED7                 cmp     [ebp+var_C04], 170h
.text:00006EE1                 jz      loc_7A1C
.text:00006EE7                 jmp     $LN178          ; jumptable 00006E98 default case
.text:00006EEC ; ---------------------------------------------------------------------------
.text:00006EEC
.text:00006EEC loc_6EEC:                               ; CODE XREF: WndProc(x,x,x,x)+361j
.text:00006EEC                 cmp     [ebp+var_C04], 190h
.text:00006EF6                 jz      loc_7A30
.text:00006EFC                 cmp     [ebp+var_C04], 0F090h
.text:00006F06                 jz      loc_7AAA
.text:00006F0C                 cmp     [ebp+var_C04], 0F100h
.text:00006F16                 jz      loc_7AB9
.text:00006F1C                 jmp     $LN178          ; jumptable 00006E98 default case
.text:00006F21 ; ---------------------------------------------------------------------------
.text:00006F21
.text:00006F21 $LN237:                                 ; CODE XREF: WndProc(x,x,x,x)+350j
.text:00006F21                                         ; DATA XREF: .text:$LN315o
.text:00006F21                 mov     ecx, [ebp+hWnd] ; jumptable 00006E98 case 0
.text:00006F24                 push    ecx
.text:00006F25                 call    _showeventlog
.text:00006F2A                 add     esp, 4
.text:00006F2D                 jmp     loc_7B93
.text:00006F32 ; ---------------------------------------------------------------------------
.text:00006F32
.text:00006F32 $LN236:                                 ; CODE XREF: WndProc(x,x,x,x)+350j
.text:00006F32                                         ; WndProc(x,x,x,x)+38Dj
.text:00006F32                                         ; DATA XREF: ...
.text:00006F32                 mov     [ebp+var_854], 0 ; jumptable 00006E98 cases 16,32
.text:00006F3C                 mov     [ebp+hFileMappingObject], 0
.text:00006F46                 cmp     [ebp+lParam], 30h ; '0'
.text:00006F4A                 jnz     loc_705B
.text:00006F50                 mov     edx, dword ptr ds:_conf
.text:00006F56                 push    edx
.text:00006F57                 call    _conf_serialised_size
.text:00006F5C                 add     esp, 4
.text:00006F5F                 mov     [ebp+dwMaximumSizeLow], eax
.text:00006F65                 mov     [ebp+FileMappingAttributes.nLength], 0Ch
.text:00006F6F                 mov     [ebp+FileMappingAttributes.lpSecurityDescriptor], 0
.text:00006F79                 mov     [ebp+FileMappingAttributes.bInheritHandle], 1
.text:00006F83                 mov     esi, esp
.text:00006F85                 push    0               ; lpName
.text:00006F87                 mov     eax, [ebp+dwMaximumSizeLow]
.text:00006F8D                 push    eax             ; dwMaximumSizeLow
.text:00006F8E                 push    0               ; dwMaximumSizeHigh
.text:00006F90                 push    4               ; flProtect
.text:00006F92                 lea     ecx, [ebp+FileMappingAttributes]
.text:00006F98                 push    ecx             ; lpFileMappingAttributes
.text:00006F99                 push    0FFFFFFFFh      ; hFile
.text:00006F9B                 call    dword ptr ds:__imp__CreateFileMappingA@24 ; CreateFileMappingA(x,x,x,x,x,x)
.text:00006FA1                 cmp     esi, esp
.text:00006FA3                 call    __RTC_CheckEsp
.text:00006FA8                 mov     [ebp+hFileMappingObject], eax
.text:00006FAE                 cmp     [ebp+hFileMappingObject], 0
.text:00006FB5                 jz      short loc_701E
.text:00006FB7                 cmp     [ebp+hFileMappingObject], 0FFFFFFFFh
.text:00006FBE                 jz      short loc_701E
.text:00006FC0                 mov     esi, esp
.text:00006FC2                 mov     edx, [ebp+dwMaximumSizeLow]
.text:00006FC8                 push    edx             ; dwNumberOfBytesToMap
.text:00006FC9                 push    0               ; dwFileOffsetLow
.text:00006FCB                 push    0               ; dwFileOffsetHigh
.text:00006FCD                 push    2               ; dwDesiredAccess
.text:00006FCF                 mov     eax, [ebp+hFileMappingObject]
.text:00006FD5                 push    eax             ; hFileMappingObject
.text:00006FD6                 call    dword ptr ds:__imp__MapViewOfFile@20 ; MapViewOfFile(x,x,x,x,x)
.text:00006FDC                 cmp     esi, esp
.text:00006FDE                 call    __RTC_CheckEsp
.text:00006FE3                 mov     [ebp+lpBaseAddress], eax
.text:00006FE9                 cmp     [ebp+lpBaseAddress], 0
.text:00006FF0                 jz      short loc_701E
.text:00006FF2                 mov     ecx, [ebp+lpBaseAddress]
.text:00006FF8                 push    ecx
.text:00006FF9                 mov     edx, dword ptr ds:_conf
.text:00006FFF                 push    edx
.text:00007000                 call    _conf_serialise
.text:00007005                 add     esp, 8
.text:00007008                 mov     esi, esp
.text:0000700A                 mov     eax, [ebp+lpBaseAddress]
.text:00007010                 push    eax             ; lpBaseAddress
.text:00007011                 call    dword ptr ds:__imp__UnmapViewOfFile@4 ; UnmapViewOfFile(x)
.text:00007017                 cmp     esi, esp
.text:00007019                 call    __RTC_CheckEsp
.text:0000701E
.text:0000701E loc_701E:                               ; CODE XREF: WndProc(x,x,x,x)+46Dj
.text:0000701E                                         ; WndProc(x,x,x,x)+476j ...
.text:0000701E                 mov     [ebp+bInheritHandles], 1
.text:00007028                 mov     ecx, [ebp+dwMaximumSizeLow]
.text:0000702E                 push    ecx
.text:0000702F                 mov     edx, [ebp+hFileMappingObject]
.text:00007035                 push    edx
.text:00007036                 push    offset $SG89876 ; "putty &%p:%u"
.text:0000703B                 lea     eax, [ebp+Dest]
.text:00007041                 push    eax             ; Dest
.text:00007042                 call    _sprintf
.text:00007047                 add     esp, 10h
.text:0000704A                 lea     ecx, [ebp+Dest]
.text:00007050                 mov     [ebp+lpCommandLine], ecx
.text:00007056                 jmp     loc_70EC
.text:0000705B ; ---------------------------------------------------------------------------
.text:0000705B
.text:0000705B loc_705B:                               ; CODE XREF: WndProc(x,x,x,x)+402j
.text:0000705B                 cmp     [ebp+lParam], 160h
.text:00007062                 jnz     short loc_70D8
.text:00007064                 mov     eax, [ebp+arg_C]
.text:00007067                 sub     eax, 1000h
.text:0000706C                 cdq
.text:0000706D                 and     edx, 0Fh
.text:00007070                 add     eax, edx
.text:00007072                 sar     eax, 4
.text:00007075                 add     eax, 1
.text:00007078                 mov     [ebp+var_8E0], eax
.text:0000707E                 mov     edx, [ebp+var_8E0]
.text:00007084                 cmp     edx, ds:_sesslist
.text:0000708A                 jnb     short loc_70D1
.text:0000708C                 mov     eax, [ebp+var_8E0]
.text:00007092                 mov     ecx, ds:dword_10E0
.text:00007098                 mov     edx, [ecx+eax*4]
.text:0000709B                 mov     [ebp+var_8E4], edx
.text:000070A1                 mov     eax, [ebp+var_8E4]
.text:000070A7                 push    eax
.text:000070A8                 push    offset $SG89883 ; "putty @%s"
.text:000070AD                 call    _dupprintf
.text:000070B2                 add     esp, 8
.text:000070B5                 mov     [ebp+lpCommandLine], eax
.text:000070BB                 mov     [ebp+bInheritHandles], 0
.text:000070C5                 mov     [ebp+var_854], 1
.text:000070CF                 jmp     short loc_70D6
.text:000070D1 ; ---------------------------------------------------------------------------
.text:000070D1
.text:000070D1 loc_70D1:                               ; CODE XREF: WndProc(x,x,x,x)+542j
.text:000070D1                 jmp     loc_7B93
.text:000070D6 ; ---------------------------------------------------------------------------
.text:000070D6
.text:000070D6 loc_70D6:                               ; CODE XREF: WndProc(x,x,x,x)+587j
.text:000070D6                 jmp     short loc_70EC
.text:000070D8 ; ---------------------------------------------------------------------------
.text:000070D8
.text:000070D8 loc_70D8:                               ; CODE XREF: WndProc(x,x,x,x)+51Aj
.text:000070D8                 mov     [ebp+lpCommandLine], 0
.text:000070E2                 mov     [ebp+bInheritHandles], 0
.text:000070EC
.text:000070EC loc_70EC:                               ; CODE XREF: WndProc(x,x,x,x)+50Ej
.text:000070EC                                         ; WndProc(x,x,x,x):loc_70D6j
.text:000070EC                 mov     esi, esp
.text:000070EE                 push    7FFh            ; nSize
.text:000070F3                 lea     ecx, [ebp+Filename]
.text:000070F9                 push    ecx             ; lpFilename
.text:000070FA                 push    0               ; hModule
.text:000070FC                 call    dword ptr ds:__imp__GetModuleFileNameA@12 ; GetModuleFileNameA(x,x,x)
.text:00007102                 cmp     esi, esp
.text:00007104                 call    __RTC_CheckEsp
.text:00007109                 mov     [ebp+StartupInfo.cb], 44h ; 'D'
.text:00007113                 mov     [ebp+StartupInfo.lpReserved], 0
.text:0000711D                 mov     [ebp+StartupInfo.lpDesktop], 0
.text:00007127                 mov     [ebp+StartupInfo.lpTitle], 0
.text:00007131                 mov     [ebp+StartupInfo.dwFlags], 0
.text:0000713B                 xor     edx, edx
.text:0000713D                 mov     [ebp+StartupInfo.cbReserved2], dx
.text:00007144                 mov     [ebp+StartupInfo.lpReserved2], 0
.text:0000714E                 mov     esi, esp
.text:00007150                 lea     eax, [ebp+ProcessInformation]
.text:00007156                 push    eax             ; lpProcessInformation
.text:00007157                 lea     ecx, [ebp+StartupInfo]
.text:0000715D                 push    ecx             ; lpStartupInfo
.text:0000715E                 push    0               ; lpCurrentDirectory
.text:00007160                 push    0               ; lpEnvironment
.text:00007162                 push    20h ; ' '       ; dwCreationFlags
.text:00007164                 mov     edx, [ebp+bInheritHandles]
.text:0000716A                 push    edx             ; bInheritHandles
.text:0000716B                 push    0               ; lpThreadAttributes
.text:0000716D                 push    0               ; lpProcessAttributes
.text:0000716F                 mov     eax, [ebp+lpCommandLine]
.text:00007175                 push    eax             ; lpCommandLine
.text:00007176                 lea     ecx, [ebp+Filename]
.text:0000717C                 push    ecx             ; lpApplicationName
.text:0000717D                 call    dword ptr ds:__imp__CreateProcessA@40 ; CreateProcessA(x,x,x,x,x,x,x,x,x,x)
.text:00007183                 cmp     esi, esp
.text:00007185                 call    __RTC_CheckEsp
.text:0000718A                 mov     esi, esp
.text:0000718C                 mov     edx, [ebp+ProcessInformation.hProcess]
.text:00007192                 push    edx             ; hObject
.text:00007193                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:00007199                 cmp     esi, esp
.text:0000719B                 call    __RTC_CheckEsp
.text:000071A0                 mov     esi, esp
.text:000071A2                 mov     eax, [ebp+ProcessInformation.hThread]
.text:000071A8                 push    eax             ; hObject
.text:000071A9                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000071AF                 cmp     esi, esp
.text:000071B1                 call    __RTC_CheckEsp
.text:000071B6                 cmp     [ebp+hFileMappingObject], 0
.text:000071BD                 jz      short loc_71D5
.text:000071BF                 mov     esi, esp
.text:000071C1                 mov     ecx, [ebp+hFileMappingObject]
.text:000071C7                 push    ecx             ; hObject
.text:000071C8                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000071CE                 cmp     esi, esp
.text:000071D0                 call    __RTC_CheckEsp
.text:000071D5
.text:000071D5 loc_71D5:                               ; CODE XREF: WndProc(x,x,x,x)+675j
.text:000071D5                 cmp     [ebp+var_854], 0
.text:000071DC                 jz      short loc_71ED
.text:000071DE                 mov     edx, [ebp+lpCommandLine]
.text:000071E4                 push    edx
.text:000071E5                 call    _safefree
.text:000071EA                 add     esp, 4
.text:000071ED
.text:000071ED loc_71ED:                               ; CODE XREF: WndProc(x,x,x,x)+694j
.text:000071ED                 jmp     loc_7B93
.text:000071F2 ; ---------------------------------------------------------------------------
.text:000071F2
.text:000071F2 $LN225:                                 ; CODE XREF: WndProc(x,x,x,x)+350j
.text:000071F2                                         ; DATA XREF: .text:$LN315o
.text:000071F2                 cmp     ds:_back, 0     ; jumptable 00006E98 case 48
.text:000071F9                 jnz     short loc_721F
.text:000071FB                 push    offset $SG89901 ; "----- Session restarted -----"
.text:00007200                 push    0
.text:00007202                 call    _logevent
.text:00007207                 add     esp, 8
.text:0000720A                 push    0
.text:0000720C                 mov     eax, dword ptr ds:_term
.text:00007211                 push    eax
.text:00007212                 call    _term_pwron
.text:00007217                 add     esp, 8
.text:0000721A                 call    _start_backend
.text:0000721F
.text:0000721F loc_721F:                               ; CODE XREF: WndProc(x,x,x,x)+6B1j
.text:0000721F                 jmp     loc_7B93
.text:00007224 ; ---------------------------------------------------------------------------
.text:00007224
.text:00007224 $LN223:                                 ; CODE XREF: WndProc(x,x,x,x)+350j
.text:00007224                                         ; DATA XREF: .text:$LN315o
.text:00007224                 mov     [ebp+var_8EC], 1 ; jumptable 00006E98 case 64
.text:0000722E                 cmp     ds:_reconfiguring, 0
.text:00007235                 jz      short loc_723E
.text:00007237                 jmp     loc_7B93
.text:0000723C ; ---------------------------------------------------------------------------
.text:0000723C                 jmp     short loc_7248
.text:0000723E ; ---------------------------------------------------------------------------
.text:0000723E
.text:0000723E loc_723E:                               ; CODE XREF: WndProc(x,x,x,x)+6EDj
.text:0000723E                 mov     ds:_reconfiguring, 1
.text:00007248
.text:00007248 loc_7248:                               ; CODE XREF: WndProc(x,x,x,x)+6F4j
.text:00007248                 mov     ecx, ds:_window_name
.text:0000724E                 push    ecx
.text:0000724F                 push    5Ah ; 'Z'
.text:00007251                 mov     edx, dword ptr ds:_conf
.text:00007257                 push    edx
.text:00007258                 call    _conf_set_str
.text:0000725D                 add     esp, 0Ch
.text:00007260                 mov     eax, dword ptr ds:_conf
.text:00007265                 push    eax
.text:00007266                 call    _conf_copy
.text:0000726B                 add     esp, 4
.text:0000726E                 mov     [ebp+var_8E8], eax
.text:00007274                 cmp     ds:_back, 0
.text:0000727B                 jz      short loc_72A3
.text:0000727D                 mov     esi, esp
.text:0000727F                 mov     ecx, ds:_backhandle
.text:00007285                 push    ecx
.text:00007286                 mov     edx, ds:_back
.text:0000728C                 mov     eax, [edx+3Ch]
.text:0000728F                 call    eax
.text:00007291                 add     esp, 4
.text:00007294                 cmp     esi, esp
.text:00007296                 call    __RTC_CheckEsp
.text:0000729B                 mov     [ebp+var_C08], eax
.text:000072A1                 jmp     short loc_72AD
.text:000072A3 ; ---------------------------------------------------------------------------
.text:000072A3
.text:000072A3 loc_72A3:                               ; CODE XREF: WndProc(x,x,x,x)+733j
.text:000072A3                 mov     [ebp+var_C08], 0
.text:000072AD
.text:000072AD loc_72AD:                               ; CODE XREF: WndProc(x,x,x,x)+759j
.text:000072AD                 mov     ecx, [ebp+var_C08]
.text:000072B3                 push    ecx
.text:000072B4                 mov     edx, [ebp+hWnd]
.text:000072B7                 push    edx
.text:000072B8                 call    _do_reconfig
.text:000072BD                 add     esp, 8
.text:000072C0                 mov     [ebp+var_8F0], eax
.text:000072C6                 mov     ds:_reconfiguring, 0
.text:000072D0                 cmp     [ebp+var_8F0], 0
.text:000072D7                 jnz     short loc_72ED
.text:000072D9                 mov     eax, [ebp+var_8E8]
.text:000072DF                 push    eax
.text:000072E0                 call    _conf_free
.text:000072E5                 add     esp, 4
.text:000072E8                 jmp     loc_7B93
.text:000072ED ; ---------------------------------------------------------------------------
.text:000072ED
.text:000072ED loc_72ED:                               ; CODE XREF: WndProc(x,x,x,x)+78Fj
.text:000072ED                 call    _conf_cache_data
.text:000072F2                 push    6Ah ; 'j'
.text:000072F4                 mov     ecx, dword ptr ds:_conf
.text:000072FA                 push    ecx
.text:000072FB                 call    _conf_get_int
.text:00007300                 add     esp, 8
.text:00007303                 mov     [ebp+var_C], eax
.text:00007306                 mov     [ebp+var_8F4], 0
.text:00007310                 jmp     short loc_7321
.text:00007312 ; ---------------------------------------------------------------------------
.text:00007312
.text:00007312 loc_7312:                               ; CODE XREF: WndProc(x,x,x,x)+814j
.text:00007312                 mov     edx, [ebp+var_8F4]
.text:00007318                 add     edx, 1
.text:0000731B                 mov     [ebp+var_8F4], edx
.text:00007321
.text:00007321 loc_7321:                               ; CODE XREF: WndProc(x,x,x,x)+7C8j
.text:00007321                                         ; DATA XREF: .data:$SG91309o ...
.text:00007321                 cmp     [ebp+var_8F4], 2
.text:00007328                 jnb     short loc_735E
.text:0000732A                 xor     eax, eax
.text:0000732C                 cmp     [ebp+var_C], 1
.text:00007330                 setz    al
.text:00007333                 neg     eax
.text:00007335                 sbb     eax, eax
.text:00007337                 neg     eax
.text:00007339                 mov     esi, esp
.text:0000733B                 push    eax             ; uEnable
.text:0000733C                 push    180h            ; uIDEnableItem
.text:00007341                 mov     ecx, [ebp+var_8F4]
.text:00007347                 mov     edx, ds:_popup_menus[ecx*4]
.text:0000734E                 push    edx             ; hMenu
.text:0000734F                 call    dword ptr ds:__imp__EnableMenuItem@12 ; EnableMenuItem(x,x,x)
.text:00007355                 cmp     esi, esp
.text:00007357                 call    __RTC_CheckEsp
.text:0000735C                 jmp     short loc_7312
.text:0000735E ; ---------------------------------------------------------------------------
.text:0000735E
.text:0000735E loc_735E:                               ; CODE XREF: WndProc(x,x,x,x)+7E0j
.text:0000735E                 mov     esi, esp
.text:00007360                 mov     eax, [ebp+hWnd]
.text:00007363                 push    eax             ; hWnd
.text:00007364                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:0000736A                 cmp     esi, esp
.text:0000736C                 call    __RTC_CheckEsp
.text:00007371                 test    eax, eax
.text:00007373                 jz      short loc_7390
.text:00007375                 cmp     [ebp+var_C], 1
.text:00007379                 jnz     short loc_7390
.text:0000737B                 mov     esi, esp
.text:0000737D                 push    9               ; nCmdShow
.text:0000737F                 mov     ecx, [ebp+hWnd]
.text:00007382                 push    ecx             ; hWnd
.text:00007383                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:00007389                 cmp     esi, esp
.text:0000738B                 call    __RTC_CheckEsp
.text:00007390
.text:00007390 loc_7390:                               ; CODE XREF: WndProc(x,x,x,x)+82Bj
.text:00007390                                         ; WndProc(x,x,x,x)+831j
.text:00007390                 mov     edx, dword ptr ds:_conf
.text:00007396                 push    edx
.text:00007397                 mov     eax, dword ptr ds:_logctx
.text:0000739C                 push    eax
.text:0000739D                 call    _log_reconfig
.text:000073A2                 add     esp, 8
.text:000073A5                 mov     ecx, ds:_logpal
.text:000073AB                 push    ecx
.text:000073AC                 call    _safefree
.text:000073B1                 add     esp, 4
.text:000073B4                 cmp     ds:_ldisc, 0
.text:000073BB                 jz      short loc_73E7
.text:000073BD                 mov     edx, dword ptr ds:_conf
.text:000073C3                 push    edx
.text:000073C4                 mov     eax, ds:_ldisc
.text:000073C9                 push    eax
.text:000073CA                 call    _ldisc_configure
.text:000073CF                 add     esp, 8
.text:000073D2                 push    0
.text:000073D4                 push    0
.text:000073D6                 push    0
.text:000073D8                 mov     ecx, ds:_ldisc
.text:000073DE                 push    ecx
.text:000073DF                 call    _ldisc_send
.text:000073E4                 add     esp, 10h
.text:000073E7
.text:000073E7 loc_73E7:                               ; CODE XREF: WndProc(x,x,x,x)+873j
.text:000073E7                 cmp     ds:_pal, 0
.text:000073EE                 jz      short loc_7406
.text:000073F0                 mov     esi, esp
.text:000073F2                 mov     edx, ds:_pal
.text:000073F8                 push    edx             ; ho
.text:000073F9                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:000073FF                 cmp     esi, esp
.text:00007401                 call    __RTC_CheckEsp
.text:00007406
.text:00007406 loc_7406:                               ; CODE XREF: WndProc(x,x,x,x)+8A6j
.text:00007406                 mov     ds:_logpal, 0
.text:00007410                 mov     ds:_pal, 0
.text:0000741A                 call    _conftopalette
.text:0000741F                 call    _init_palette
.text:00007424                 mov     eax, dword ptr ds:_conf
.text:00007429                 push    eax
.text:0000742A                 mov     ecx, dword ptr ds:_term
.text:00007430                 push    ecx
.text:00007431                 call    _term_reconfig
.text:00007436                 add     esp, 8
.text:00007439                 cmp     ds:_back, 0
.text:00007440                 jz      short loc_7466
.text:00007442                 mov     esi, esp
.text:00007444                 mov     edx, dword ptr ds:_conf
.text:0000744A                 push    edx
.text:0000744B                 mov     eax, ds:_backhandle
.text:00007450                 push    eax
.text:00007451                 mov     ecx, ds:_back
.text:00007457                 mov     edx, [ecx+8]
.text:0000745A                 call    edx
.text:0000745C                 add     esp, 8
.text:0000745F                 cmp     esi, esp
.text:00007461                 call    __RTC_CheckEsp
.text:00007466
.text:00007466 loc_7466:                               ; CODE XREF: WndProc(x,x,x,x)+8F8j
.text:00007466                 push    6Fh ; 'o'
.text:00007468                 mov     eax, dword ptr ds:_conf
.text:0000746D                 push    eax
.text:0000746E                 call    _conf_get_int
.text:00007473                 add     esp, 8
.text:00007476                 mov     esi, eax
.text:00007478                 push    6Fh ; 'o'
.text:0000747A                 mov     ecx, [ebp+var_8E8]
.text:00007480                 push    ecx
.text:00007481                 call    _conf_get_int
.text:00007486                 add     esp, 8
.text:00007489                 cmp     esi, eax
.text:0000748B                 jnz     short loc_7506
.text:0000748D                 push    6Eh ; 'n'
.text:0000748F                 mov     edx, dword ptr ds:_conf
.text:00007495                 push    edx
.text:00007496                 call    _conf_get_int
.text:0000749B                 add     esp, 8
.text:0000749E                 mov     esi, eax
.text:000074A0                 push    6Eh ; 'n'
.text:000074A2                 mov     eax, [ebp+var_8E8]
.text:000074A8                 push    eax
.text:000074A9                 call    _conf_get_int
.text:000074AE                 add     esp, 8
.text:000074B1                 cmp     esi, eax
.text:000074B3                 jnz     short loc_7506
.text:000074B5                 push    5Bh ; '['
.text:000074B7                 mov     ecx, dword ptr ds:_conf
.text:000074BD                 push    ecx
.text:000074BE                 call    _conf_get_int
.text:000074C3                 add     esp, 8
.text:000074C6                 mov     esi, eax
.text:000074C8                 push    5Bh ; '['
.text:000074CA                 mov     edx, [ebp+var_8E8]
.text:000074D0                 push    edx
.text:000074D1                 call    _conf_get_int
.text:000074D6                 add     esp, 8
.text:000074D9                 cmp     esi, eax
.text:000074DB                 jnz     short loc_7506
.text:000074DD                 cmp     [ebp+var_C], 2
.text:000074E1                 jz      short loc_7506
.text:000074E3                 cmp     [ebp+var_C], 3
.text:000074E7                 jnz     short loc_7500
.text:000074E9                 mov     esi, esp
.text:000074EB                 mov     eax, [ebp+hWnd]
.text:000074EE                 push    eax             ; hWnd
.text:000074EF                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:000074F5                 cmp     esi, esp
.text:000074F7                 call    __RTC_CheckEsp
.text:000074FC                 test    eax, eax
.text:000074FE                 jnz     short loc_7506
.text:00007500
.text:00007500 loc_7500:                               ; CODE XREF: WndProc(x,x,x,x)+99Fj
.text:00007500                 cmp     [ebp+var_C], 1
.text:00007504                 jnz     short loc_754A
.text:00007506
.text:00007506 loc_7506:                               ; CODE XREF: WndProc(x,x,x,x)+943j
.text:00007506                                         ; WndProc(x,x,x,x)+96Bj ...
.text:00007506                 push    5Bh ; '['
.text:00007508                 mov     ecx, dword ptr ds:_conf
.text:0000750E                 push    ecx
.text:0000750F                 call    _conf_get_int
.text:00007514                 add     esp, 8
.text:00007517                 push    eax
.text:00007518                 push    6Eh ; 'n'
.text:0000751A                 mov     edx, dword ptr ds:_conf
.text:00007520                 push    edx
.text:00007521                 call    _conf_get_int
.text:00007526                 add     esp, 8
.text:00007529                 push    eax
.text:0000752A                 push    6Fh ; 'o'
.text:0000752C                 mov     eax, dword ptr ds:_conf
.text:00007531                 push    eax
.text:00007532                 call    _conf_get_int
.text:00007537                 add     esp, 8
.text:0000753A                 push    eax
.text:0000753B                 mov     ecx, dword ptr ds:_term
.text:00007541                 push    ecx
.text:00007542                 call    _term_size
.text:00007547                 add     esp, 10h
.text:0000754A
.text:0000754A loc_754A:                               ; CODE XREF: WndProc(x,x,x,x)+9BCj
.text:0000754A                 mov     esi, esp
.text:0000754C                 push    0FFFFFFF0h      ; nIndex
.text:0000754E                 mov     edx, [ebp+hWnd]
.text:00007551                 push    edx             ; hWnd
.text:00007552                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:00007558                 cmp     esi, esp
.text:0000755A                 call    __RTC_CheckEsp
.text:0000755F                 mov     [ebp+var_8FC], eax
.text:00007565                 mov     esi, esp
.text:00007567                 push    0FFFFFFECh      ; nIndex
.text:00007569                 mov     eax, [ebp+hWnd]
.text:0000756C                 push    eax             ; hWnd
.text:0000756D                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:00007573                 cmp     esi, esp
.text:00007575                 call    __RTC_CheckEsp
.text:0000757A                 mov     [ebp+var_904], eax
.text:00007580                 mov     ecx, [ebp+var_904]
.text:00007586                 mov     [ebp+var_900], ecx
.text:0000758C                 push    53h ; 'S'
.text:0000758E                 mov     edx, dword ptr ds:_conf
.text:00007594                 push    edx
.text:00007595                 call    _conf_get_int
.text:0000759A                 add     esp, 8
.text:0000759D                 mov     esi, eax
.text:0000759F                 push    53h ; 'S'
.text:000075A1                 mov     eax, [ebp+var_8E8]
.text:000075A7                 push    eax
.text:000075A8                 call    _conf_get_int
.text:000075AD                 add     esp, 8
.text:000075B0                 cmp     esi, eax
.text:000075B2                 jz      short loc_7627
.text:000075B4                 push    53h ; 'S'
.text:000075B6                 mov     ecx, dword ptr ds:_conf
.text:000075BC                 push    ecx
.text:000075BD                 call    _conf_get_int
.text:000075C2                 add     esp, 8
.text:000075C5                 test    eax, eax
.text:000075C7                 jz      short loc_75F9
.text:000075C9                 mov     edx, [ebp+var_900]
.text:000075CF                 or      edx, 8
.text:000075D2                 mov     [ebp+var_900], edx
.text:000075D8                 mov     esi, esp
.text:000075DA                 push    3               ; uFlags
.text:000075DC                 push    0               ; cy
.text:000075DE                 push    0               ; cx
.text:000075E0                 push    0               ; Y
.text:000075E2                 push    0               ; X
.text:000075E4                 push    0FFFFFFFFh      ; hWndInsertAfter
.text:000075E6                 mov     eax, [ebp+hWnd]
.text:000075E9                 push    eax             ; hWnd
.text:000075EA                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:000075F0                 cmp     esi, esp
.text:000075F2                 call    __RTC_CheckEsp
.text:000075F7                 jmp     short loc_7627
.text:000075F9 ; ---------------------------------------------------------------------------
.text:000075F9
.text:000075F9 loc_75F9:                               ; CODE XREF: WndProc(x,x,x,x)+A7Fj
.text:000075F9                 mov     ecx, [ebp+var_900]
.text:000075FF                 and     ecx, 0FFFFFFF7h
.text:00007602                 mov     [ebp+var_900], ecx
.text:00007608                 mov     esi, esp
.text:0000760A                 push    3               ; uFlags
.text:0000760C                 push    0               ; cy
.text:0000760E                 push    0               ; cx
.text:00007610                 push    0               ; Y
.text:00007612                 push    0               ; X
.text:00007614                 push    0FFFFFFFEh      ; hWndInsertAfter
.text:00007616                 mov     edx, [ebp+hWnd]
.text:00007619                 push    edx             ; hWnd
.text:0000761A                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:00007620                 cmp     esi, esp
.text:00007622                 call    __RTC_CheckEsp
.text:00007627
.text:00007627 loc_7627:                               ; CODE XREF: WndProc(x,x,x,x)+A6Aj
.text:00007627                                         ; WndProc(x,x,x,x)+AAFj
.text:00007627                 push    79h ; 'y'
.text:00007629                 mov     eax, dword ptr ds:_conf
.text:0000762E                 push    eax
.text:0000762F                 call    _conf_get_int
.text:00007634                 add     esp, 8
.text:00007637                 test    eax, eax
.text:00007639                 jz      short loc_764F
.text:0000763B                 mov     ecx, [ebp+var_900]
.text:00007641                 or      ecx, 200h
.text:00007647                 mov     [ebp+var_900], ecx
.text:0000764D                 jmp     short loc_7661
.text:0000764F ; ---------------------------------------------------------------------------
.text:0000764F
.text:0000764F loc_764F:                               ; CODE XREF: WndProc(x,x,x,x)+AF1j
.text:0000764F                 mov     edx, [ebp+var_900]
.text:00007655                 and     edx, 0FFFFFDFFh
.text:0000765B                 mov     [ebp+var_900], edx
.text:00007661
.text:00007661 loc_7661:                               ; CODE XREF: WndProc(x,x,x,x)+B05j
.text:00007661                 mov     eax, [ebp+var_8FC]
.text:00007667                 mov     [ebp+dwNewLong], eax
.text:0000766D                 call    _is_full_screen
.text:00007672                 neg     eax
.text:00007674                 sbb     eax, eax
.text:00007676                 neg     eax
.text:00007678                 add     eax, 68h ; 'h'
.text:0000767B                 push    eax
.text:0000767C                 mov     ecx, dword ptr ds:_conf
.text:00007682                 push    ecx
.text:00007683                 call    _conf_get_int
.text:00007688                 add     esp, 8
.text:0000768B                 test    eax, eax
.text:0000768D                 jz      short loc_76A3
.text:0000768F                 mov     edx, [ebp+dwNewLong]
.text:00007695                 or      edx, 200000h
.text:0000769B                 mov     [ebp+dwNewLong], edx
.text:000076A1                 jmp     short loc_76B4
.text:000076A3 ; ---------------------------------------------------------------------------
.text:000076A3
.text:000076A3 loc_76A3:                               ; CODE XREF: WndProc(x,x,x,x)+B45j
.text:000076A3                 mov     eax, [ebp+dwNewLong]
.text:000076A9                 and     eax, 0FFDFFFFFh
.text:000076AE                 mov     [ebp+dwNewLong], eax
.text:000076B4
.text:000076B4 loc_76B4:                               ; CODE XREF: WndProc(x,x,x,x)+B59j
.text:000076B4                 cmp     [ebp+var_C], 1
.text:000076B8                 jz      short loc_76C3
.text:000076BA                 call    _is_full_screen
.text:000076BF                 test    eax, eax
.text:000076C1                 jz      short loc_76D7
.text:000076C3
.text:000076C3 loc_76C3:                               ; CODE XREF: WndProc(x,x,x,x)+B70j
.text:000076C3                 mov     ecx, [ebp+dwNewLong]
.text:000076C9                 and     ecx, 0FFFBFFFFh
.text:000076CF                 mov     [ebp+dwNewLong], ecx
.text:000076D5                 jmp     short loc_76E9
.text:000076D7 ; ---------------------------------------------------------------------------
.text:000076D7
.text:000076D7 loc_76D7:                               ; CODE XREF: WndProc(x,x,x,x)+B79j
.text:000076D7                 mov     edx, [ebp+dwNewLong]
.text:000076DD                 or      edx, 40000h
.text:000076E3                 mov     [ebp+dwNewLong], edx
.text:000076E9
.text:000076E9 loc_76E9:                               ; CODE XREF: WndProc(x,x,x,x)+B8Dj
.text:000076E9                 cmp     [ebp+var_C], 1
.text:000076ED                 jnz     short loc_7702
.text:000076EF                 mov     eax, [ebp+dwNewLong]
.text:000076F5                 and     eax, 0FFFEFFFFh
.text:000076FA                 mov     [ebp+dwNewLong], eax
.text:00007700                 jmp     short loc_7714
.text:00007702 ; ---------------------------------------------------------------------------
.text:00007702
.text:00007702 loc_7702:                               ; CODE XREF: WndProc(x,x,x,x)+BA5j
.text:00007702                 mov     ecx, [ebp+dwNewLong]
.text:00007708                 or      ecx, offset loc_10000
.text:0000770E                 mov     [ebp+dwNewLong], ecx
.text:00007714
.text:00007714 loc_7714:                               ; CODE XREF: WndProc(x,x,x,x)+BB8j
.text:00007714                 mov     edx, [ebp+dwNewLong]
.text:0000771A                 cmp     edx, [ebp+var_8FC]
.text:00007720                 jnz     short loc_7734
.text:00007722                 mov     eax, [ebp+var_900]
.text:00007728                 cmp     eax, [ebp+var_904]
.text:0000772E                 jz      loc_77B4
.text:00007734
.text:00007734 loc_7734:                               ; CODE XREF: WndProc(x,x,x,x)+BD8j
.text:00007734                 mov     ecx, [ebp+dwNewLong]
.text:0000773A                 cmp     ecx, [ebp+var_8FC]
.text:00007740                 jz      short loc_775E
.text:00007742                 mov     esi, esp
.text:00007744                 mov     edx, [ebp+dwNewLong]
.text:0000774A                 push    edx             ; dwNewLong
.text:0000774B                 push    0FFFFFFF0h      ; nIndex
.text:0000774D                 mov     eax, [ebp+hWnd]
.text:00007750                 push    eax             ; hWnd
.text:00007751                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00007757                 cmp     esi, esp
.text:00007759                 call    __RTC_CheckEsp
.text:0000775E
.text:0000775E loc_775E:                               ; CODE XREF: WndProc(x,x,x,x)+BF8j
.text:0000775E                 mov     ecx, [ebp+var_900]
.text:00007764                 cmp     ecx, [ebp+var_904]
.text:0000776A                 jz      short loc_7788
.text:0000776C                 mov     esi, esp
.text:0000776E                 mov     edx, [ebp+var_900]
.text:00007774                 push    edx             ; dwNewLong
.text:00007775                 push    0FFFFFFECh      ; nIndex
.text:00007777                 mov     eax, [ebp+hWnd]
.text:0000777A                 push    eax             ; hWnd
.text:0000777B                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00007781                 cmp     esi, esp
.text:00007783                 call    __RTC_CheckEsp
.text:00007788
.text:00007788 loc_7788:                               ; CODE XREF: WndProc(x,x,x,x)+C22j
.text:00007788                 mov     esi, esp
.text:0000778A                 push    137h            ; uFlags
.text:0000778F                 push    0               ; cy
.text:00007791                 push    0               ; cx
.text:00007793                 push    0               ; Y
.text:00007795                 push    0               ; X
.text:00007797                 push    0               ; hWndInsertAfter
.text:00007799                 mov     ecx, [ebp+hWnd]
.text:0000779C                 push    ecx             ; hWnd
.text:0000779D                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:000077A3                 cmp     esi, esp
.text:000077A5                 call    __RTC_CheckEsp
.text:000077AA                 mov     [ebp+var_8EC], 2
.text:000077B4
.text:000077B4 loc_77B4:                               ; CODE XREF: WndProc(x,x,x,x)+BE6j
.text:000077B4                 cmp     [ebp+var_C], 1
.text:000077B8                 jnz     short loc_77E7
.text:000077BA                 mov     esi, esp
.text:000077BC                 mov     edx, [ebp+hWnd]
.text:000077BF                 push    edx             ; hWnd
.text:000077C0                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:000077C6                 cmp     esi, esp
.text:000077C8                 call    __RTC_CheckEsp
.text:000077CD                 test    eax, eax
.text:000077CF                 jz      short loc_77E7
.text:000077D1                 mov     eax, [ebp+hWnd]
.text:000077D4                 push    eax
.text:000077D5                 call    _force_normal
.text:000077DA                 add     esp, 4
.text:000077DD                 mov     [ebp+var_8EC], 2
.text:000077E7
.text:000077E7 loc_77E7:                               ; CODE XREF: WndProc(x,x,x,x)+C70j
.text:000077E7                                         ; WndProc(x,x,x,x)+C87j
.text:000077E7                 push    5Ah ; 'Z'
.text:000077E9                 mov     ecx, dword ptr ds:_conf
.text:000077EF                 push    ecx
.text:000077F0                 call    _conf_get_str
.text:000077F5                 add     esp, 8
.text:000077F8                 push    eax             ; Str
.text:000077F9                 push    0               ; int
.text:000077FB                 call    _set_title
.text:00007800                 add     esp, 8
.text:00007803                 mov     esi, esp
.text:00007805                 mov     edx, [ebp+hWnd]
.text:00007808                 push    edx             ; hWnd
.text:00007809                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text:0000780F                 cmp     esi, esp
.text:00007811                 call    __RTC_CheckEsp
.text:00007816                 test    eax, eax
.text:00007818                 jz      short loc_7862
.text:0000781A                 push    6Dh ; 'm'
.text:0000781C                 mov     eax, dword ptr ds:_conf
.text:00007821                 push    eax
.text:00007822                 call    _conf_get_int
.text:00007827                 add     esp, 8
.text:0000782A                 test    eax, eax
.text:0000782C                 jz      short loc_783C
.text:0000782E                 mov     ecx, ds:_window_name
.text:00007834                 mov     [ebp+lpString], ecx
.text:0000783A                 jmp     short loc_7848
.text:0000783C ; ---------------------------------------------------------------------------
.text:0000783C
.text:0000783C loc_783C:                               ; CODE XREF: WndProc(x,x,x,x)+CE4j
.text:0000783C                 mov     edx, ds:_icon_name
.text:00007842                 mov     [ebp+lpString], edx
.text:00007848
.text:00007848 loc_7848:                               ; CODE XREF: WndProc(x,x,x,x)+CF2j
.text:00007848                 mov     esi, esp
.text:0000784A                 mov     eax, [ebp+lpString]
.text:00007850                 push    eax             ; lpString
.text:00007851                 mov     ecx, [ebp+hWnd]
.text:00007854                 push    ecx             ; hWnd
.text:00007855                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:0000785B                 cmp     esi, esp
.text:0000785D                 call    __RTC_CheckEsp
.text:00007862
.text:00007862 loc_7862:                               ; CODE XREF: WndProc(x,x,x,x)+CD0j
.text:00007862                 push    70h ; 'p'
.text:00007864                 mov     edx, dword ptr ds:_conf
.text:0000786A                 push    edx
.text:0000786B                 call    _conf_get_fontspec
.text:00007870                 add     esp, 8
.text:00007873                 mov     [ebp+var_908], eax
.text:00007879                 push    70h ; 'p'
.text:0000787B                 mov     eax, [ebp+var_8E8]
.text:00007881                 push    eax
.text:00007882                 call    _conf_get_fontspec
.text:00007887                 add     esp, 8
.text:0000788A                 mov     [ebp+var_90C], eax
.text:00007890                 mov     ecx, [ebp+var_90C]
.text:00007896                 mov     edx, [ecx]
.text:00007898                 push    edx             ; Str2
.text:00007899                 mov     eax, [ebp+var_908]
.text:0000789F                 mov     ecx, [eax]
.text:000078A1                 push    ecx             ; Str1
.text:000078A2                 call    _strcmp
.text:000078A7                 add     esp, 8
.text:000078AA                 test    eax, eax
.text:000078AC                 jz      loc_79D8
.text:000078B2                 push    8Ch ; 'î'
.text:000078B7                 mov     edx, [ebp+var_8E8]
.text:000078BD                 push    edx
.text:000078BE                 call    _conf_get_str
.text:000078C3                 add     esp, 8
.text:000078C6                 push    eax             ; Str2
.text:000078C7                 push    8Ch ; 'î'
.text:000078CC                 mov     eax, dword ptr ds:_conf
.text:000078D1                 push    eax
.text:000078D2                 call    _conf_get_str
.text:000078D7                 add     esp, 8
.text:000078DA                 push    eax             ; Str1
.text:000078DB                 call    _strcmp
.text:000078E0                 add     esp, 8
.text:000078E3                 test    eax, eax
.text:000078E5                 jz      loc_79D8
.text:000078EB                 mov     ecx, [ebp+var_908]
.text:000078F1                 mov     edx, [ebp+var_90C]
.text:000078F7                 mov     eax, [ecx+4]
.text:000078FA                 cmp     eax, [edx+4]
.text:000078FD                 jnz     loc_79D8
.text:00007903                 mov     ecx, [ebp+var_908]
.text:00007909                 mov     edx, [ebp+var_90C]
.text:0000790F                 mov     eax, [ecx+8]
.text:00007912                 cmp     eax, [edx+8]
.text:00007915                 jnz     loc_79D8
.text:0000791B                 mov     ecx, [ebp+var_908]
.text:00007921                 mov     edx, [ebp+var_90C]
.text:00007927                 mov     eax, [ecx+0Ch]
.text:0000792A                 cmp     eax, [edx+0Ch]
.text:0000792D                 jnz     loc_79D8
.text:00007933                 push    71h ; 'q'
.text:00007935                 mov     ecx, dword ptr ds:_conf
.text:0000793B                 push    ecx
.text:0000793C                 call    _conf_get_int
.text:00007941                 add     esp, 8
.text:00007944                 mov     esi, eax
.text:00007946                 push    71h ; 'q'
.text:00007948                 mov     edx, [ebp+var_8E8]
.text:0000794E                 push    edx
.text:0000794F                 call    _conf_get_int
.text:00007954                 add     esp, 8
.text:00007957                 cmp     esi, eax
.text:00007959                 jnz     short loc_79D8
.text:0000795B                 push    8Bh ; 'ï'
.text:00007960                 mov     eax, dword ptr ds:_conf
.text:00007965                 push    eax
.text:00007966                 call    _conf_get_int
.text:0000796B                 add     esp, 8
.text:0000796E                 mov     esi, eax
.text:00007970                 push    8Bh ; 'ï'
.text:00007975                 mov     ecx, [ebp+var_8E8]
.text:0000797B                 push    ecx
.text:0000797C                 call    _conf_get_int
.text:00007981                 add     esp, 8
.text:00007984                 cmp     esi, eax
.text:00007986                 jnz     short loc_79D8
.text:00007988                 push    83h ; 'â'
.text:0000798D                 mov     edx, dword ptr ds:_conf
.text:00007993                 push    edx
.text:00007994                 call    _conf_get_int
.text:00007999                 add     esp, 8
.text:0000799C                 mov     esi, eax
.text:0000799E                 push    83h ; 'â'
.text:000079A3                 mov     eax, [ebp+var_8E8]
.text:000079A9                 push    eax
.text:000079AA                 call    _conf_get_int
.text:000079AF                 add     esp, 8
.text:000079B2                 cmp     esi, eax
.text:000079B4                 jnz     short loc_79D8
.text:000079B6                 cmp     [ebp+var_C], 1
.text:000079BA                 jz      short loc_79D8
.text:000079BC                 cmp     [ebp+var_C], 3
.text:000079C0                 jz      short loc_79D8
.text:000079C2                 push    6Ah ; 'j'
.text:000079C4                 mov     ecx, [ebp+var_8E8]
.text:000079CA                 push    ecx
.text:000079CB                 call    _conf_get_int
.text:000079D0                 add     esp, 8
.text:000079D3                 cmp     [ebp+var_C], eax
.text:000079D6                 jz      short loc_79E2
.text:000079D8
.text:000079D8 loc_79D8:                               ; CODE XREF: WndProc(x,x,x,x)+D64j
.text:000079D8                                         ; WndProc(x,x,x,x)+D9Dj ...
.text:000079D8                 mov     [ebp+var_8EC], 2
.text:000079E2
.text:000079E2 loc_79E2:                               ; CODE XREF: WndProc(x,x,x,x)+E8Ej
.text:000079E2                 mov     esi, esp
.text:000079E4                 push    1               ; bErase
.text:000079E6                 push    0               ; lpRect
.text:000079E8                 mov     edx, [ebp+hWnd]
.text:000079EB                 push    edx             ; hWnd
.text:000079EC                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:000079F2                 cmp     esi, esp
.text:000079F4                 call    __RTC_CheckEsp
.text:000079F9                 mov     eax, [ebp+var_8EC]
.text:000079FF                 push    eax
.text:00007A00                 call    _reset_window
.text:00007A05                 add     esp, 4
.text:00007A08                 mov     ecx, [ebp+var_8E8]
.text:00007A0E                 push    ecx
.text:00007A0F                 call    _conf_free
.text:00007A14                 add     esp, 4
.text:00007A17                 jmp     loc_7B93
.text:00007A1C ; ---------------------------------------------------------------------------
.text:00007A1C
.text:00007A1C loc_7A1C:                               ; CODE XREF: WndProc(x,x,x,x)+399j
.text:00007A1C                 mov     edx, dword ptr ds:_term
.text:00007A22                 push    edx
.text:00007A23                 call    _term_copyall
.text:00007A28                 add     esp, 4
.text:00007A2B                 jmp     loc_7B93
.text:00007A30 ; ---------------------------------------------------------------------------
.text:00007A30
.text:00007A30 loc_7A30:                               ; CODE XREF: WndProc(x,x,x,x)+3AEj
.text:00007A30                 push    0
.text:00007A32                 call    _request_paste
.text:00007A37                 add     esp, 4
.text:00007A3A                 jmp     loc_7B93
.text:00007A3F ; ---------------------------------------------------------------------------
.text:00007A3F
.text:00007A3F $LN187:                                 ; CODE XREF: WndProc(x,x,x,x)+350j
.text:00007A3F                                         ; DATA XREF: .text:$LN315o
.text:00007A3F                 mov     eax, dword ptr ds:_term ; jumptable 00006E98 case 80
.text:00007A44                 push    eax
.text:00007A45                 call    _term_clrsb
.text:00007A4A                 add     esp, 4
.text:00007A4D                 jmp     loc_7B93
.text:00007A52 ; ---------------------------------------------------------------------------
.text:00007A52
.text:00007A52 $LN186:                                 ; CODE XREF: WndProc(x,x,x,x)+350j
.text:00007A52                                         ; DATA XREF: .text:$LN315o
.text:00007A52                 push    1               ; jumptable 00006E98 case 96
.text:00007A54                 mov     ecx, dword ptr ds:_term
.text:00007A5A                 push    ecx
.text:00007A5B                 call    _term_pwron
.text:00007A60                 add     esp, 8
.text:00007A63                 cmp     ds:_ldisc, 0
.text:00007A6A                 jz      short loc_7A81
.text:00007A6C                 push    0
.text:00007A6E                 push    0
.text:00007A70                 push    0
.text:00007A72                 mov     edx, ds:_ldisc
.text:00007A78                 push    edx
.text:00007A79                 call    _ldisc_send
.text:00007A7E                 add     esp, 10h
.text:00007A81
.text:00007A81 loc_7A81:                               ; CODE XREF: WndProc(x,x,x,x)+F22j
.text:00007A81                 jmp     loc_7B93
.text:00007A86 ; ---------------------------------------------------------------------------
.text:00007A86
.text:00007A86 loc_7A86:                               ; CODE XREF: WndProc(x,x,x,x)+37Dj
.text:00007A86                 mov     eax, [ebp+hWnd]
.text:00007A89                 push    eax
.text:00007A8A                 call    _showabout
.text:00007A8F                 add     esp, 4
.text:00007A92                 jmp     loc_7B93
.text:00007A97 ; ---------------------------------------------------------------------------
.text:00007A97
.text:00007A97 loc_7A97:                               ; CODE XREF: WndProc(x,x,x,x)+321j
.text:00007A97                 push    0
.text:00007A99                 mov     ecx, [ebp+hWnd]
.text:00007A9C                 push    ecx
.text:00007A9D                 call    _launch_help
.text:00007AA2                 add     esp, 8
.text:00007AA5                 jmp     loc_7B93
.text:00007AAA ; ---------------------------------------------------------------------------
.text:00007AAA
.text:00007AAA loc_7AAA:                               ; CODE XREF: WndProc(x,x,x,x)+3BEj
.text:00007AAA                 push    1
.text:00007AAC                 call    _show_mouseptr
.text:00007AB1                 add     esp, 4
.text:00007AB4                 jmp     loc_7B93
.text:00007AB9 ; ---------------------------------------------------------------------------
.text:00007AB9
.text:00007AB9 loc_7AB9:                               ; CODE XREF: WndProc(x,x,x,x)+3CEj
.text:00007AB9                 push    1
.text:00007ABB                 call    _show_mouseptr
.text:00007AC0                 add     esp, 4
.text:00007AC3                 cmp     [ebp+arg_C], 0
.text:00007AC7                 jnz     short loc_7AE5
.text:00007AC9                 mov     esi, esp
.text:00007ACB                 push    0               ; lParam
.text:00007ACD                 push    20h ; ' '       ; wParam
.text:00007ACF                 push    102h            ; Msg
.text:00007AD4                 mov     edx, [ebp+hWnd]
.text:00007AD7                 push    edx             ; hWnd
.text:00007AD8                 call    dword ptr ds:__imp__PostMessageA@16 ; PostMessageA(x,x,x,x)
.text:00007ADE                 cmp     esi, esp
.text:00007AE0                 call    __RTC_CheckEsp
.text:00007AE5
.text:00007AE5 loc_7AE5:                               ; CODE XREF: WndProc(x,x,x,x)+F7Fj
.text:00007AE5                 jmp     loc_7B93
.text:00007AEA ; ---------------------------------------------------------------------------
.text:00007AEA
.text:00007AEA loc_7AEA:                               ; CODE XREF: WndProc(x,x,x,x)+36Dj
.text:00007AEA                 call    _flip_full_screen
.text:00007AEF                 jmp     loc_7B93
.text:00007AF4 ; ---------------------------------------------------------------------------
.text:00007AF4
.text:00007AF4 $LN178:                                 ; CODE XREF: WndProc(x,x,x,x)+33Dj
.text:00007AF4                                         ; WndProc(x,x,x,x)+350j ...
.text:00007AF4                 cmp     [ebp+lParam], 1000h ; jumptable 00006E98 default case
.text:00007AFB                 jb      short loc_7B27
.text:00007AFD                 cmp     [ebp+lParam], 5000h
.text:00007B04                 jnb     short loc_7B27
.text:00007B06                 mov     esi, esp
.text:00007B08                 mov     eax, [ebp+lParam]
.text:00007B0B                 push    eax             ; lParam
.text:00007B0C                 push    160h            ; wParam
.text:00007B11                 push    112h            ; Msg
.text:00007B16                 mov     ecx, [ebp+hWnd]
.text:00007B19                 push    ecx             ; hWnd
.text:00007B1A                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00007B20                 cmp     esi, esp
.text:00007B22                 call    __RTC_CheckEsp
.text:00007B27
.text:00007B27 loc_7B27:                               ; CODE XREF: WndProc(x,x,x,x)+FB3j
.text:00007B27                                         ; WndProc(x,x,x,x)+FBCj
.text:00007B27                 cmp     [ebp+lParam], 400h
.text:00007B2E                 jb      short loc_7B93
.text:00007B30                 cmp     [ebp+lParam], 800h
.text:00007B37                 ja      short loc_7B93
.text:00007B39                 mov     edx, [ebp+lParam]
.text:00007B3C                 sub     edx, 400h
.text:00007B42                 shr     edx, 4
.text:00007B45                 mov     [ebp+var_910], edx
.text:00007B4B                 mov     eax, [ebp+var_910]
.text:00007B51                 cmp     eax, ds:_n_specials
.text:00007B57                 jl      short loc_7B5B
.text:00007B59                 jmp     short loc_7B93
.text:00007B5B ; ---------------------------------------------------------------------------
.text:00007B5B
.text:00007B5B loc_7B5B:                               ; CODE XREF: WndProc(x,x,x,x)+100Fj
.text:00007B5B                 cmp     ds:_back, 0
.text:00007B62                 jz      short loc_7B93
.text:00007B64                 mov     esi, esp
.text:00007B66                 mov     ecx, [ebp+var_910]
.text:00007B6C                 mov     edx, ds:_specials
.text:00007B72                 mov     eax, [edx+ecx*8+4]
.text:00007B76                 push    eax
.text:00007B77                 mov     ecx, ds:_backhandle
.text:00007B7D                 push    ecx
.text:00007B7E                 mov     edx, ds:_back
.text:00007B84                 mov     eax, [edx+18h]
.text:00007B87                 call    eax
.text:00007B89                 add     esp, 8
.text:00007B8C                 cmp     esi, esp
.text:00007B8E                 call    __RTC_CheckEsp
.text:00007B93
.text:00007B93 loc_7B93:                               ; CODE XREF: WndProc(x,x,x,x)+3E5j
.text:00007B93                                         ; WndProc(x,x,x,x):loc_70D1j ...
.text:00007B93                 jmp     loc_9A24
.text:00007B98 ; ---------------------------------------------------------------------------
.text:00007B98
.text:00007B98 $LN173:                                 ; CODE XREF: WndProc(x,x,x,x)+159j
.text:00007B98                                         ; DATA XREF: .text:$LN313o
.text:00007B98                 cmp     [ebp+arg_4], 204h ; jumptable 00006CA1 cases 0,1,3,4,6,7
.text:00007B9F                 jnz     short loc_7C15
.text:00007BA1                 mov     ecx, [ebp+lParam]
.text:00007BA4                 and     ecx, 8
.text:00007BA7                 jnz     short loc_7BC2
.text:00007BA9                 push    85h ; 'à'
.text:00007BAE                 mov     edx, dword ptr ds:_conf
.text:00007BB4                 push    edx
.text:00007BB5                 call    _conf_get_int
.text:00007BBA                 add     esp, 8
.text:00007BBD                 cmp     eax, 2
.text:00007BC0                 jnz     short loc_7C15
.text:00007BC2
.text:00007BC2 loc_7BC2:                               ; CODE XREF: WndProc(x,x,x,x)+105Fj
.text:00007BC2                 push    1
.text:00007BC4                 call    _show_mouseptr
.text:00007BC9                 add     esp, 4
.text:00007BCC                 mov     esi, esp
.text:00007BCE                 lea     eax, [ebp+Point]
.text:00007BD4                 push    eax             ; lpPoint
.text:00007BD5                 call    dword ptr ds:__imp__GetCursorPos@4 ; GetCursorPos(x)
.text:00007BDB                 cmp     esi, esp
.text:00007BDD                 call    __RTC_CheckEsp
.text:00007BE2                 mov     esi, esp
.text:00007BE4                 push    0               ; prcRect
.text:00007BE6                 mov     ecx, [ebp+hWnd]
.text:00007BE9                 push    ecx             ; hWnd
.text:00007BEA                 push    0               ; nReserved
.text:00007BEC                 mov     edx, [ebp+Point.y]
.text:00007BF2                 push    edx             ; y
.text:00007BF3                 mov     eax, [ebp+Point.x]
.text:00007BF9                 push    eax             ; x
.text:00007BFA                 push    2               ; uFlags
.text:00007BFC                 mov     ecx, ds:hMenu
.text:00007C02                 push    ecx             ; hMenu
.text:00007C03                 call    dword ptr ds:__imp__TrackPopupMenu@28 ; TrackPopupMenu(x,x,x,x,x,x,x)
.text:00007C09                 cmp     esi, esp
.text:00007C0B                 call    __RTC_CheckEsp
.text:00007C10                 jmp     loc_9A24
.text:00007C15 ; ---------------------------------------------------------------------------
.text:00007C15
.text:00007C15 loc_7C15:                               ; CODE XREF: WndProc(x,x,x,x)+1057j
.text:00007C15                                         ; WndProc(x,x,x,x)+1078j
.text:00007C15                 mov     edx, [ebp+arg_4]
.text:00007C18                 mov     [ebp+var_C10], edx
.text:00007C1E                 mov     eax, [ebp+var_C10]
.text:00007C24                 sub     eax, 201h
.text:00007C29                 mov     [ebp+var_C10], eax
.text:00007C2F                 cmp     [ebp+var_C10], 7 ; switch 8 cases
.text:00007C36                 ja      $LN162          ; jumptable 00007C42 default case
.text:00007C3C                 mov     ecx, [ebp+var_C10]
.text:00007C42                 jmp     ds:$LN316[ecx*4] ; switch jump
.text:00007C49 ; ---------------------------------------------------------------------------
.text:00007C49
.text:00007C49 $LN168:                                 ; CODE XREF: WndProc(x,x,x,x)+10FAj
.text:00007C49                                         ; DATA XREF: .text:$LN316o
.text:00007C49                 mov     [ebp+var_924], 1 ; jumptable 00007C42 case 0
.text:00007C53                 mov     edx, [ebp+lParam]
.text:00007C56                 or      edx, 1
.text:00007C59                 mov     [ebp+lParam], edx
.text:00007C5C                 mov     [ebp+var_928], 1
.text:00007C66                 jmp     loc_7D1F
.text:00007C6B ; ---------------------------------------------------------------------------
.text:00007C6B
.text:00007C6B $LN167:                                 ; CODE XREF: WndProc(x,x,x,x)+10FAj
.text:00007C6B                                         ; DATA XREF: .text:$LN316o
.text:00007C6B                 mov     [ebp+var_924], 2 ; jumptable 00007C42 case 6
.text:00007C75                 mov     eax, [ebp+lParam]
.text:00007C78                 or      eax, 10h
.text:00007C7B                 mov     [ebp+lParam], eax
.text:00007C7E                 mov     [ebp+var_928], 1
.text:00007C88                 jmp     loc_7D1F
.text:00007C8D ; ---------------------------------------------------------------------------
.text:00007C8D
.text:00007C8D $LN166:                                 ; CODE XREF: WndProc(x,x,x,x)+10FAj
.text:00007C8D                                         ; DATA XREF: .text:$LN316o
.text:00007C8D                 mov     [ebp+var_924], 3 ; jumptable 00007C42 case 3
.text:00007C97                 mov     ecx, [ebp+lParam]
.text:00007C9A                 or      ecx, 2
.text:00007C9D                 mov     [ebp+lParam], ecx
.text:00007CA0                 mov     [ebp+var_928], 1
.text:00007CAA                 jmp     short loc_7D1F
.text:00007CAC ; ---------------------------------------------------------------------------
.text:00007CAC
.text:00007CAC $LN165:                                 ; CODE XREF: WndProc(x,x,x,x)+10FAj
.text:00007CAC                                         ; DATA XREF: .text:$LN316o
.text:00007CAC                 mov     [ebp+var_924], 1 ; jumptable 00007C42 case 1
.text:00007CB6                 mov     edx, [ebp+lParam]
.text:00007CB9                 and     edx, 0FFFFFFFEh
.text:00007CBC                 mov     [ebp+lParam], edx
.text:00007CBF                 mov     [ebp+var_928], 0
.text:00007CC9                 jmp     short loc_7D1F
.text:00007CCB ; ---------------------------------------------------------------------------
.text:00007CCB
.text:00007CCB $LN164:                                 ; CODE XREF: WndProc(x,x,x,x)+10FAj
.text:00007CCB                                         ; DATA XREF: .text:$LN316o
.text:00007CCB                 mov     [ebp+var_924], 2 ; jumptable 00007C42 case 7
.text:00007CD5                 mov     eax, [ebp+lParam]
.text:00007CD8                 and     eax, 0FFFFFFEFh
.text:00007CDB                 mov     [ebp+lParam], eax
.text:00007CDE                 mov     [ebp+var_928], 0
.text:00007CE8                 jmp     short loc_7D1F
.text:00007CEA ; ---------------------------------------------------------------------------
.text:00007CEA
.text:00007CEA $LN163:                                 ; CODE XREF: WndProc(x,x,x,x)+10FAj
.text:00007CEA                                         ; DATA XREF: .text:$LN316o
.text:00007CEA                 mov     [ebp+var_924], 3 ; jumptable 00007C42 case 4
.text:00007CF4                 mov     ecx, [ebp+lParam]
.text:00007CF7                 and     ecx, 0FFFFFFFDh
.text:00007CFA                 mov     [ebp+lParam], ecx
.text:00007CFD                 mov     [ebp+var_928], 0
.text:00007D07                 jmp     short loc_7D1F
.text:00007D09 ; ---------------------------------------------------------------------------
.text:00007D09
.text:00007D09 $LN162:                                 ; CODE XREF: WndProc(x,x,x,x)+10EEj
.text:00007D09                                         ; WndProc(x,x,x,x)+10FAj
.text:00007D09                                         ; DATA XREF: ...
.text:00007D09                 mov     [ebp+var_928], 0 ; jumptable 00007C42 default case
.text:00007D13                 mov     edx, [ebp+var_928]
.text:00007D19                 mov     [ebp+var_924], edx
.text:00007D1F
.text:00007D1F loc_7D1F:                               ; CODE XREF: WndProc(x,x,x,x)+111Ej
.text:00007D1F                                         ; WndProc(x,x,x,x)+1140j ...
.text:00007D1F                 push    1
.text:00007D21                 call    _show_mouseptr
.text:00007D26                 add     esp, 4
.text:00007D29                 mov     [ebp+var_929], 0
.text:00007D30                 mov     esi, esp
.text:00007D32                 lea     eax, [ebp+var_938]
.text:00007D38                 push    eax             ; lpPoint
.text:00007D39                 call    dword ptr ds:__imp__GetCursorPos@4 ; GetCursorPos(x)
.text:00007D3F                 cmp     esi, esp
.text:00007D41                 call    __RTC_CheckEsp
.text:00007D46                 push    0               ; DWORD
.text:00007D48                 mov     ecx, [ebp+var_938.y]
.text:00007D4E                 push    ecx
.text:00007D4F                 mov     edx, [ebp+var_938.x]
.text:00007D55                 push    edx             ; POINT
.text:00007D56                 call    _xMonitorFromPoint@12 ; xMonitorFromPoint(x,x,x)
.text:00007D5B                 mov     [ebp+var_940], eax
.text:00007D61                 cmp     [ebp+var_940], 0
.text:00007D68                 jz      short loc_7DAA
.text:00007D6A                 mov     [ebp+var_96C.cbSize], 28h ; '('
.text:00007D74                 lea     eax, [ebp+var_96C]
.text:00007D7A                 push    eax             ; LPMONITORINFO
.text:00007D7B                 mov     ecx, [ebp+var_940]
.text:00007D81                 push    ecx             ; HMONITOR
.text:00007D82                 call    _xGetMonitorInfo@8 ; xGetMonitorInfo(x,x)
.text:00007D87                 mov     edx, [ebp+var_96C.rcMonitor.left]
.text:00007D8D                 cmp     edx, [ebp+var_938.x]
.text:00007D93                 jnz     short loc_7DAA
.text:00007D95                 mov     eax, [ebp+var_96C.rcMonitor.top]
.text:00007D9B                 cmp     eax, [ebp+var_938.y]
.text:00007DA1                 jnz     short loc_7DAA
.text:00007DA3                 mov     [ebp+var_929], 1
.text:00007DAA
.text:00007DAA loc_7DAA:                               ; CODE XREF: WndProc(x,x,x,x)+1220j
.text:00007DAA                                         ; WndProc(x,x,x,x)+124Bj ...
.text:00007DAA                 call    _is_full_screen
.text:00007DAF                 test    eax, eax
.text:00007DB1                 jz      short loc_7E18
.text:00007DB3                 cmp     [ebp+var_928], 0
.text:00007DBA                 jz      short loc_7E18
.text:00007DBC                 cmp     [ebp+var_924], 1
.text:00007DC3                 jnz     short loc_7E18
.text:00007DC5                 movsx   ecx, [ebp+var_929]
.text:00007DCC                 test    ecx, ecx
.text:00007DCE                 jz      short loc_7E18
.text:00007DD0                 mov     edx, [ebp+var_938.x]
.text:00007DD6                 and     edx, 0FFFFh
.text:00007DDC                 movzx   eax, dx
.text:00007DDF                 mov     ecx, [ebp+var_938.y]
.text:00007DE5                 and     ecx, 0FFFFh
.text:00007DEB                 movzx   edx, cx
.text:00007DEE                 shl     edx, 10h
.text:00007DF1                 or      eax, edx
.text:00007DF3                 mov     esi, esp
.text:00007DF5                 push    eax             ; lParam
.text:00007DF6                 push    0F090h          ; wParam
.text:00007DFB                 push    112h            ; Msg
.text:00007E00                 mov     eax, [ebp+hWnd]
.text:00007E03                 push    eax             ; hWnd
.text:00007E04                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00007E0A                 cmp     esi, esp
.text:00007E0C                 call    __RTC_CheckEsp
.text:00007E11                 xor     eax, eax
.text:00007E13                 jmp     loc_9A43
.text:00007E18 ; ---------------------------------------------------------------------------
.text:00007E18
.text:00007E18 loc_7E18:                               ; CODE XREF: WndProc(x,x,x,x)+1269j
.text:00007E18                                         ; WndProc(x,x,x,x)+1272j ...
.text:00007E18                 cmp     [ebp+var_928], 0
.text:00007E1F                 jz      loc_7F0D
.text:00007E25                 mov     ecx, [ebp+arg_C]
.text:00007E28                 shr     ecx, 10h
.text:00007E2B                 and     ecx, 0FFFFh
.text:00007E31                 movsx   edx, cx
.text:00007E34                 test    edx, edx
.text:00007E36                 jge     short loc_7E57
.text:00007E38                 mov     eax, [ebp+arg_C]
.text:00007E3B                 shr     eax, 10h
.text:00007E3E                 and     eax, 0FFFFh
.text:00007E43                 movsx   ecx, ax
.text:00007E46                 sub     ecx, ds:_font_height
.text:00007E4C                 add     ecx, 1
.text:00007E4F                 mov     [ebp+var_C14], ecx
.text:00007E55                 jmp     short loc_7E6C
.text:00007E57 ; ---------------------------------------------------------------------------
.text:00007E57
.text:00007E57 loc_7E57:                               ; CODE XREF: WndProc(x,x,x,x)+12EEj
.text:00007E57                 mov     edx, [ebp+arg_C]
.text:00007E5A                 shr     edx, 10h
.text:00007E5D                 and     edx, 0FFFFh
.text:00007E63                 movsx   eax, dx
.text:00007E66                 mov     [ebp+var_C14], eax
.text:00007E6C
.text:00007E6C loc_7E6C:                               ; CODE XREF: WndProc(x,x,x,x)+130Dj
.text:00007E6C                 mov     ecx, [ebp+arg_C]
.text:00007E6F                 and     ecx, 0FFFFh
.text:00007E75                 movsx   edx, cx
.text:00007E78                 test    edx, edx
.text:00007E7A                 jge     short loc_7E98
.text:00007E7C                 mov     eax, [ebp+arg_C]
.text:00007E7F                 and     eax, 0FFFFh
.text:00007E84                 movsx   ecx, ax
.text:00007E87                 sub     ecx, ds:_font_width
.text:00007E8D                 add     ecx, 1
.text:00007E90                 mov     [ebp+var_C18], ecx
.text:00007E96                 jmp     short loc_7EAA
.text:00007E98 ; ---------------------------------------------------------------------------
.text:00007E98
.text:00007E98 loc_7E98:                               ; CODE XREF: WndProc(x,x,x,x)+1332j
.text:00007E98                 mov     edx, [ebp+arg_C]
.text:00007E9B                 and     edx, 0FFFFh
.text:00007EA1                 movsx   eax, dx
.text:00007EA4                 mov     [ebp+var_C18], eax
.text:00007EAA
.text:00007EAA loc_7EAA:                               ; CODE XREF: WndProc(x,x,x,x)+134Ej
.text:00007EAA                 call    _is_alt_pressed
.text:00007EAF                 push    eax
.text:00007EB0                 mov     ecx, [ebp+lParam]
.text:00007EB3                 and     ecx, 8
.text:00007EB6                 push    ecx
.text:00007EB7                 mov     edx, [ebp+lParam]
.text:00007EBA                 and     edx, 4
.text:00007EBD                 push    edx
.text:00007EBE                 mov     eax, [ebp+var_C14]
.text:00007EC4                 sub     eax, ds:_offset_height
.text:00007ECA                 cdq
.text:00007ECB                 idiv    ds:_font_height
.text:00007ED1                 push    eax
.text:00007ED2                 mov     eax, [ebp+var_C18]
.text:00007ED8                 sub     eax, ds:_offset_width
.text:00007EDE                 cdq
.text:00007EDF                 idiv    ds:_font_width
.text:00007EE5                 push    eax
.text:00007EE6                 mov     eax, [ebp+var_924]
.text:00007EEC                 push    eax
.text:00007EED                 call    _click
.text:00007EF2                 add     esp, 18h
.text:00007EF5                 mov     esi, esp
.text:00007EF7                 mov     ecx, [ebp+hWnd]
.text:00007EFA                 push    ecx             ; hWnd
.text:00007EFB                 call    dword ptr ds:__imp__SetCapture@4 ; SetCapture(x)
.text:00007F01
.text:00007F01 ; const CHAR CursorName
.text:00007F01 CursorName:                             ; DATA XREF: WinMain(x,x,x,x)+9EEo
.text:00007F01                 cmp     esi, esp
.text:00007F03                 call    __RTC_CheckEsp
.text:00007F08                 jmp     loc_800C
.text:00007F0D ; ---------------------------------------------------------------------------
.text:00007F0D
.text:00007F0D loc_7F0D:                               ; CODE XREF: WndProc(x,x,x,x)+12D7j
.text:00007F0D                 mov     edx, [ebp+arg_C]
.text:00007F10                 shr     edx, 10h
.text:00007F13                 and     edx, 0FFFFh
.text:00007F19                 movsx   eax, dx
.text:00007F1C                 test    eax, eax
.text:00007F1E                 jge     short loc_7F40
.text:00007F20                 mov     ecx, [ebp+arg_C]
.text:00007F23                 shr     ecx, 10h
.text:00007F26                 and     ecx, 0FFFFh
.text:00007F2C                 movsx   edx, cx
.text:00007F2F                 sub     edx, ds:_font_height
.text:00007F35                 add     edx, 1
.text:00007F38                 mov     [ebp+var_C1C], edx
.text:00007F3E                 jmp     short loc_7F54
.text:00007F40 ; ---------------------------------------------------------------------------
.text:00007F40
.text:00007F40 loc_7F40:                               ; CODE XREF: WndProc(x,x,x,x)+13D6j
.text:00007F40                 mov     eax, [ebp+arg_C]
.text:00007F43                 shr     eax, 10h
.text:00007F46                 and     eax, 0FFFFh
.text:00007F4B                 movsx   ecx, ax
.text:00007F4E                 mov     [ebp+var_C1C], ecx
.text:00007F54
.text:00007F54 loc_7F54:                               ; CODE XREF: WndProc(x,x,x,x)+13F6j
.text:00007F54                 mov     edx, [ebp+arg_C]
.text:00007F57                 and     edx, 0FFFFh
.text:00007F5D                 movsx   eax, dx
.text:00007F60                 test    eax, eax
.text:00007F62                 jge     short loc_7F81
.text:00007F64                 mov     ecx, [ebp+arg_C]
.text:00007F67                 and     ecx, 0FFFFh
.text:00007F6D                 movsx   edx, cx
.text:00007F70                 sub     edx, ds:_font_width
.text:00007F76                 add     edx, 1
.text:00007F79                 mov     [ebp+var_C20], edx
.text:00007F7F                 jmp     short loc_7F92
.text:00007F81 ; ---------------------------------------------------------------------------
.text:00007F81
.text:00007F81 loc_7F81:                               ; CODE XREF: WndProc(x,x,x,x)+141Aj
.text:00007F81                 mov     eax, [ebp+arg_C]
.text:00007F84                 and     eax, 0FFFFh
.text:00007F89                 movsx   ecx, ax
.text:00007F8C                 mov     [ebp+var_C20], ecx
.text:00007F92
.text:00007F92 loc_7F92:                               ; CODE XREF: WndProc(x,x,x,x)+1437j
.text:00007F92                 call    _is_alt_pressed
.text:00007F97                 push    eax
.text:00007F98                 mov     edx, [ebp+lParam]
.text:00007F9B                 and     edx, 8
.text:00007F9E                 push    edx
.text:00007F9F                 mov     eax, [ebp+lParam]
.text:00007FA2                 and     eax, 4
.text:00007FA5                 push    eax
.text:00007FA6                 mov     eax, [ebp+var_C1C]
.text:00007FAC                 sub     eax, ds:_offset_height
.text:00007FB2                 cdq
.text:00007FB3                 idiv    ds:_font_height
.text:00007FB9                 push    eax
.text:00007FBA                 mov     eax, [ebp+var_C20]
.text:00007FC0                 sub     eax, ds:_offset_width
.text:00007FC6                 cdq
.text:00007FC7                 idiv    ds:_font_width
.text:00007FCD                 push    eax
.text:00007FCE                 push    5
.text:00007FD0                 mov     ecx, [ebp+var_924]
.text:00007FD6                 push    ecx
.text:00007FD7                 call    _translate_button
.text:00007FDC                 add     esp, 4
.text:00007FDF                 push    eax
.text:00007FE0                 mov     edx, [ebp+var_924]
.text:00007FE6                 push    edx
.text:00007FE7                 mov     eax, dword ptr ds:_term
.text:00007FEC                 push    eax
.text:00007FED                 call    _term_mouse
.text:00007FF2                 add     esp, 24h
.text:00007FF5                 mov     ecx, [ebp+lParam]
.text:00007FF8                 and     ecx, 13h
.text:00007FFB                 jnz     short loc_800C
.text:00007FFD                 mov     esi, esp
.text:00007FFF                 call    dword ptr ds:__imp__ReleaseCapture@0 ; ReleaseCapture()
.text:00008005                 cmp     esi, esp
.text:00008007                 call    __RTC_CheckEsp
.text:0000800C
.text:0000800C loc_800C:                               ; CODE XREF: WndProc(x,x,x,x)+13C0j
.text:0000800C                                         ; WndProc(x,x,x,x)+14B3j
.text:0000800C                 xor     eax, eax
.text:0000800E                 jmp     loc_9A43
.text:00008013 ; ---------------------------------------------------------------------------
.text:00008013
.text:00008013 loc_8013:                               ; CODE XREF: WndProc(x,x,x,x)+DDj
.text:00008013                 mov     edx, [ebp+lParam]
.text:00008016                 cmp     edx, ds:?wp@?CK@??WndProc@@9@9 ; `WndProc'::`42'::wp
.text:0000801C                 jnz     short loc_8035
.text:0000801E                 mov     eax, [ebp+arg_C]
.text:00008021                 cmp     eax, ds:?lp@?CK@??WndProc@@9@9 ; `WndProc'::`42'::lp
.text:00008027                 jnz     short loc_8035
.text:00008029                 cmp     ds:?last_mousemove@?1??WndProc@@9@9, 200h ; `WndProc'::`2'::last_mousemove
.text:00008033                 jz      short loc_805B
.text:00008035
.text:00008035 loc_8035:                               ; CODE XREF: WndProc(x,x,x,x)+14D4j
.text:00008035                                         ; WndProc(x,x,x,x)+14DFj
.text:00008035                 push    1
.text:00008037                 call    _show_mouseptr
.text:0000803C                 add     esp, 4
.text:0000803F                 mov     ecx, [ebp+lParam]
.text:00008042                 mov     ds:?wp@?CK@??WndProc@@9@9, ecx ; `WndProc'::`42'::wp
.text:00008048                 mov     edx, [ebp+arg_C]
.text:0000804B                 mov     ds:?lp@?CK@??WndProc@@9@9, edx ; `WndProc'::`42'::lp
.text:00008051                 mov     ds:?last_mousemove@?1??WndProc@@9@9, 200h ; `WndProc'::`2'::last_mousemove
.text:0000805B
.text:0000805B loc_805B:                               ; CODE XREF: WndProc(x,x,x,x)+14EBj
.text:0000805B                 mov     eax, [ebp+arg_C]
.text:0000805E                 push    eax
.text:0000805F                 call    _noise_ultralight
.text:00008064                 add     esp, 4
.text:00008067                 mov     ecx, [ebp+lParam]
.text:0000806A                 and     ecx, 13h
.text:0000806D                 jz      loc_81A6
.text:00008073                 mov     esi, esp
.text:00008075                 call    dword ptr ds:__imp__GetCapture@0 ; GetCapture()
.text:0000807B                 cmp     esi, esp
.text:0000807D                 call    __RTC_CheckEsp
.text:00008082                 cmp     eax, [ebp+hWnd]
.text:00008085                 jnz     loc_81A6
.text:0000808B                 mov     edx, [ebp+lParam]
.text:0000808E                 and     edx, 1
.text:00008091                 jz      short loc_809F
.text:00008093                 mov     [ebp+var_974], 1
.text:0000809D                 jmp     short loc_80BD
.text:0000809F ; ---------------------------------------------------------------------------
.text:0000809F
.text:0000809F loc_809F:                               ; CODE XREF: WndProc(x,x,x,x)+1549j
.text:0000809F                 mov     eax, [ebp+lParam]
.text:000080A2                 and     eax, 10h
.text:000080A5                 jz      short loc_80B3
.text:000080A7                 mov     [ebp+var_974], 2
.text:000080B1                 jmp     short loc_80BD
.text:000080B3 ; ---------------------------------------------------------------------------
.text:000080B3
.text:000080B3 loc_80B3:                               ; CODE XREF: WndProc(x,x,x,x)+155Dj
.text:000080B3                 mov     [ebp+var_974], 3
.text:000080BD
.text:000080BD loc_80BD:                               ; CODE XREF: WndProc(x,x,x,x)+1555j
.text:000080BD                                         ; WndProc(x,x,x,x)+1569j
.text:000080BD                 mov     ecx, [ebp+arg_C]
.text:000080C0                 shr     ecx, 10h
.text:000080C3                 and     ecx, 0FFFFh
.text:000080C9                 movsx   edx, cx
.text:000080CC                 test    edx, edx
.text:000080CE                 jge     short loc_80EF
.text:000080D0                 mov     eax, [ebp+arg_C]
.text:000080D3                 shr     eax, 10h
.text:000080D6                 and     eax, 0FFFFh
.text:000080DB                 movsx   ecx, ax
.text:000080DE                 sub     ecx, ds:_font_height
.text:000080E4                 add     ecx, 1
.text:000080E7                 mov     [ebp+var_C24], ecx
.text:000080ED                 jmp     short loc_8104
.text:000080EF ; ---------------------------------------------------------------------------
.text:000080EF
.text:000080EF loc_80EF:                               ; CODE XREF: WndProc(x,x,x,x)+1586j
.text:000080EF                 mov     edx, [ebp+arg_C]
.text:000080F2                 shr     edx, 10h
.text:000080F5                 and     edx, 0FFFFh
.text:000080FB                 movsx   eax, dx
.text:000080FE                 mov     [ebp+var_C24], eax
.text:00008104
.text:00008104 loc_8104:                               ; CODE XREF: WndProc(x,x,x,x)+15A5j
.text:00008104                 mov     ecx, [ebp+arg_C]
.text:00008107                 and     ecx, 0FFFFh
.text:0000810D                 movsx   edx, cx
.text:00008110                 test    edx, edx
.text:00008112                 jge     short loc_8130
.text:00008114                 mov     eax, [ebp+arg_C]
.text:00008117                 and     eax, 0FFFFh
.text:0000811C                 movsx   ecx, ax
.text:0000811F                 sub     ecx, ds:_font_width
.text:00008125                 add     ecx, 1
.text:00008128                 mov     [ebp+var_C28], ecx
.text:0000812E                 jmp     short loc_8142
.text:00008130 ; ---------------------------------------------------------------------------
.text:00008130
.text:00008130 loc_8130:                               ; CODE XREF: WndProc(x,x,x,x)+15CAj
.text:00008130                 mov     edx, [ebp+arg_C]
.text:00008133                 and     edx, 0FFFFh
.text:00008139                 movsx   eax, dx
.text:0000813C                 mov     [ebp+var_C28], eax
.text:00008142
.text:00008142 loc_8142:                               ; CODE XREF: WndProc(x,x,x,x)+15E6j
.text:00008142                 call    _is_alt_pressed
.text:00008147                 push    eax
.text:00008148                 mov     ecx, [ebp+lParam]
.text:0000814B                 and     ecx, 8
.text:0000814E                 push    ecx
.text:0000814F                 mov     edx, [ebp+lParam]
.text:00008152                 and     edx, 4
.text:00008155                 push    edx
.text:00008156                 mov     eax, [ebp+var_C24]
.text:0000815C                 sub     eax, ds:_offset_height
.text:00008162                 cdq
.text:00008163                 idiv    ds:_font_height
.text:00008169                 push    eax
.text:0000816A                 mov     eax, [ebp+var_C28]
.text:00008170                 sub     eax, ds:_offset_width
.text:00008176                 cdq
.text:00008177                 idiv    ds:_font_width
.text:0000817D                 push    eax
.text:0000817E                 push    4
.text:00008180                 mov     eax, [ebp+var_974]
.text:00008186                 push    eax
.text:00008187                 call    _translate_button
.text:0000818C                 add     esp, 4
.text:0000818F                 push    eax
.text:00008190                 mov     ecx, [ebp+var_974]
.text:00008196                 push    ecx
.text:00008197                 mov     edx, dword ptr ds:_term
.text:0000819D                 push    edx
.text:0000819E                 call    _term_mouse
.text:000081A3                 add     esp, 24h
.text:000081A6
.text:000081A6 loc_81A6:                               ; CODE XREF: WndProc(x,x,x,x)+1525j
.text:000081A6                                         ; WndProc(x,x,x,x)+153Dj
.text:000081A6                 xor     eax, eax
.text:000081A8                 jmp     loc_9A43
.text:000081AD ; ---------------------------------------------------------------------------
.text:000081AD
.text:000081AD $LN147:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:000081AD                                         ; DATA XREF: .text:$LN310o
.text:000081AD                 mov     eax, [ebp+lParam] ; jumptable 00006BC0 case 159
.text:000081B0                 cmp     eax, ds:?wp@?CN@??WndProc@@9@9 ; `WndProc'::`45'::wp
.text:000081B6                 jnz     short loc_81CF
.text:000081B8                 mov     ecx, [ebp+arg_C]
.text:000081BB                 cmp     ecx, ds:?lp@?CN@??WndProc@@9@9 ; `WndProc'::`45'::lp
.text:000081C1                 jnz     short loc_81CF
.text:000081C3                 cmp     ds:?last_mousemove@?1??WndProc@@9@9, 0A0h ; 'á' ; `WndProc'::`2'::last_mousemove
.text:000081CD                 jz      short loc_81F4
.text:000081CF
.text:000081CF loc_81CF:                               ; CODE XREF: WndProc(x,x,x,x)+166Ej
.text:000081CF                                         ; WndProc(x,x,x,x)+1679j
.text:000081CF                 push    1
.text:000081D1                 call    _show_mouseptr
.text:000081D6                 add     esp, 4
.text:000081D9                 mov     edx, [ebp+lParam]
.text:000081DC                 mov     ds:?wp@?CN@??WndProc@@9@9, edx ; `WndProc'::`45'::wp
.text:000081E2                 mov     eax, [ebp+arg_C]
.text:000081E5                 mov     ds:?lp@?CN@??WndProc@@9@9, eax ; `WndProc'::`45'::lp
.text:000081EA                 mov     ds:?last_mousemove@?1??WndProc@@9@9, 0A0h ; 'á' ; `WndProc'::`2'::last_mousemove
.text:000081F4
.text:000081F4 loc_81F4:                               ; CODE XREF: WndProc(x,x,x,x)+1685j
.text:000081F4                 mov     ecx, [ebp+arg_C]
.text:000081F7                 push    ecx
.text:000081F8                 call    _noise_ultralight
.text:000081FD                 add     esp, 4
.text:00008200                 jmp     loc_9A24
.text:00008205 ; ---------------------------------------------------------------------------
.text:00008205
.text:00008205 loc_8205:                               ; CODE XREF: WndProc(x,x,x,x)+176j
.text:00008205                 mov     edx, [ebp+lParam]
.text:00008208                 mov     ds:?ignore_clip@?1??WndProc@@9@9, edx ; `WndProc'::`2'::ignore_clip
.text:0000820E                 jmp     loc_9A24
.text:00008213 ; ---------------------------------------------------------------------------
.text:00008213
.text:00008213 loc_8213:                               ; CODE XREF: WndProc(x,x,x,x)+124j
.text:00008213                 cmp     ds:?ignore_clip@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::ignore_clip
.text:0000821A                 jnz     short loc_822A
.text:0000821C                 mov     eax, dword ptr ds:_term
.text:00008221                 push    eax
.text:00008222                 call    _term_deselect
.text:00008227                 add     esp, 4
.text:0000822A
.text:0000822A loc_822A:                               ; CODE XREF: WndProc(x,x,x,x)+16D2j
.text:0000822A                 mov     ds:?ignore_clip@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::ignore_clip
.text:00008234                 xor     eax, eax
.text:00008236                 jmp     loc_9A43
.text:0000823B ; ---------------------------------------------------------------------------
.text:0000823B
.text:0000823B $LN141:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:0000823B                                         ; DATA XREF: .text:$LN310o
.text:0000823B                 mov     esi, esp        ; jumptable 00006BC0 case 14
.text:0000823D                 mov     ecx, [ebp+hWnd]
.text:00008240                 push    ecx             ; hWnd
.text:00008241                 call    dword ptr ds:__imp__HideCaret@4 ; HideCaret(x)
.text:00008247                 cmp     esi, esp
.text:00008249                 call    __RTC_CheckEsp
.text:0000824E                 mov     esi, esp
.text:00008250                 lea     edx, [ebp+Paint]
.text:00008256                 push    edx             ; lpPaint
.text:00008257                 mov     eax, [ebp+hWnd]
.text:0000825A                 push    eax             ; hWnd
.text:0000825B                 call    dword ptr ds:__imp__BeginPaint@8 ; BeginPaint(x,x)
.text:00008261                 cmp     esi, esp
.text:00008263                 call    __RTC_CheckEsp
.text:00008268                 mov     [ebp+hdc], eax
.text:0000826B                 cmp     ds:_pal, 0
.text:00008272                 jz      short loc_82A3
.text:00008274                 mov     esi, esp
.text:00008276                 push    1               ; bForceBkgd
.text:00008278                 mov     ecx, ds:_pal
.text:0000827E                 push    ecx             ; hPal
.text:0000827F                 mov     edx, [ebp+hdc]
.text:00008282                 push    edx             ; hdc
.text:00008283                 call    dword ptr ds:__imp__SelectPalette@12 ; SelectPalette(x,x,x)
.text:00008289                 cmp     esi, esp
.text:0000828B                 call    __RTC_CheckEsp
.text:00008290                 mov     esi, esp
.text:00008292                 mov     eax, [ebp+hdc]
.text:00008295                 push    eax             ; hdc
.text:00008296                 call    dword ptr ds:__imp__RealizePalette@4 ; RealizePalette(x)
.text:0000829C                 cmp     esi, esp
.text:0000829E                 call    __RTC_CheckEsp
.text:000082A3
.text:000082A3 loc_82A3:                               ; CODE XREF: WndProc(x,x,x,x)+172Aj
.text:000082A3                 mov     ecx, dword ptr ds:_term
.text:000082A9                 xor     edx, edx
.text:000082AB                 cmp     dword ptr [ecx+109Ch], 0
.text:000082B2                 setz    dl
.text:000082B5                 push    edx
.text:000082B6                 mov     eax, [ebp+Paint.rcPaint.bottom]
.text:000082BC                 sub     eax, ds:_offset_height
.text:000082C2                 sub     eax, 1
.text:000082C5                 cdq
.text:000082C6                 idiv    ds:_font_height
.text:000082CC                 push    eax
.text:000082CD                 mov     eax, [ebp+Paint.rcPaint.right]
.text:000082D3                 sub     eax, ds:_offset_width
.text:000082D9                 sub     eax, 1
.text:000082DC                 cdq
.text:000082DD                 idiv    ds:_font_width
.text:000082E3                 push    eax
.text:000082E4                 mov     eax, [ebp+Paint.rcPaint.top]
.text:000082EA                 sub     eax, ds:_offset_height
.text:000082F0                 cdq
.text:000082F1                 idiv    ds:_font_height
.text:000082F7                 push    eax
.text:000082F8                 mov     eax, [ebp+Paint.rcPaint.left]
.text:000082FE                 sub     eax, ds:_offset_width
.text:00008304                 cdq
.text:00008305                 idiv    ds:_font_width
.text:0000830B                 push    eax
.text:0000830C                 mov     eax, [ebp+hdc]
.text:0000830F                 push    eax
.text:00008310                 mov     ecx, dword ptr ds:_term
.text:00008316                 push    ecx
.text:00008317                 call    _term_paint
.text:0000831C                 add     esp, 1Ch
.text:0000831F                 cmp     [ebp+Paint.fErase], 0
.text:00008326                 jnz     short loc_8389
.text:00008328                 mov     edx, [ebp+Paint.rcPaint.left]
.text:0000832E                 cmp     edx, ds:_offset_width
.text:00008334                 jl      short loc_8389
.text:00008336                 mov     eax, [ebp+Paint.rcPaint.top]
.text:0000833C                 cmp     eax, ds:_offset_height
.text:00008342                 jl      short loc_8389
.text:00008344                 mov     ecx, dword ptr ds:_term
.text:0000834A                 mov     edx, ds:_font_width
.text:00008350                 imul    edx, [ecx+12Ch]
.text:00008357                 add     edx, ds:_offset_width
.text:0000835D                 cmp     [ebp+Paint.rcPaint.right], edx
.text:00008363                 jge     short loc_8389
.text:00008365                 mov     eax, dword ptr ds:_term
.text:0000836A                 mov     ecx, ds:_font_height
.text:00008370                 imul    ecx, [eax+128h]
.text:00008377                 add     ecx, ds:_offset_height
.text:0000837D                 cmp     [ebp+Paint.rcPaint.bottom], ecx
.text:00008383                 jl      loc_8516
.text:00008389
.text:00008389 loc_8389:                               ; CODE XREF: WndProc(x,x,x,x)+17DEj
.text:00008389                                         ; WndProc(x,x,x,x)+17ECj ...
.text:00008389                 mov     esi, esp
.text:0000838B                 mov     edx, ds:color
.text:00008391                 push    edx             ; color
.text:00008392                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text:00008398                 cmp     esi, esp
.text:0000839A                 call    __RTC_CheckEsp
.text:0000839F                 mov     [ebp+h], eax
.text:000083A5                 mov     esi, esp
.text:000083A7                 mov     eax, [ebp+h]
.text:000083AD                 push    eax             ; h
.text:000083AE                 mov     ecx, [ebp+hdc]
.text:000083B1                 push    ecx             ; hdc
.text:000083B2                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000083B8                 cmp     esi, esp
.text:000083BA                 call    __RTC_CheckEsp
.text:000083BF                 mov     [ebp+var_9C4], eax
.text:000083C5                 mov     esi, esp
.text:000083C7                 mov     edx, ds:color
.text:000083CD                 push    edx             ; color
.text:000083CE                 push    0               ; cWidth
.text:000083D0                 push    0               ; iStyle
.text:000083D2                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text:000083D8                 cmp     esi, esp
.text:000083DA                 call    __RTC_CheckEsp
.text:000083DF                 mov     [ebp+ho], eax
.text:000083E5                 mov     esi, esp
.text:000083E7                 mov     eax, [ebp+ho]
.text:000083ED                 push    eax             ; h
.text:000083EE                 mov     ecx, [ebp+hdc]
.text:000083F1                 push    ecx             ; hdc
.text:000083F2                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000083F8                 cmp     esi, esp
.text:000083FA                 call    __RTC_CheckEsp
.text:000083FF                 mov     [ebp+var_9CC], eax
.text:00008405                 mov     esi, esp
.text:00008407                 mov     edx, [ebp+Paint.rcPaint.bottom]
.text:0000840D                 push    edx             ; bottom
.text:0000840E                 mov     eax, [ebp+Paint.rcPaint.right]
.text:00008414                 push    eax             ; right
.text:00008415                 mov     ecx, [ebp+Paint.rcPaint.top]
.text:0000841B                 push    ecx             ; top
.text:0000841C                 mov     edx, [ebp+Paint.rcPaint.left]
.text:00008422                 push    edx             ; left
.text:00008423                 mov     eax, [ebp+hdc]
.text:00008426                 push    eax             ; hdc
.text:00008427                 call    dword ptr ds:__imp__IntersectClipRect@20 ; IntersectClipRect(x,x,x,x,x)
.text:0000842D                 cmp     esi, esp
.text:0000842F                 call    __RTC_CheckEsp
.text:00008434                 mov     ecx, dword ptr ds:_term
.text:0000843A                 mov     edx, ds:_font_height
.text:00008440                 imul    edx, [ecx+128h]
.text:00008447                 add     edx, ds:_offset_height
.text:0000844D                 mov     esi, esp
.text:0000844F                 push    edx             ; bottom
.text:00008450                 mov     eax, dword ptr ds:_term
.text:00008455                 mov     ecx, ds:_font_width
.text:0000845B                 imul    ecx, [eax+12Ch]
.text:00008462                 add     ecx, ds:_offset_width
.text:00008468                 push    ecx             ; right
.text:00008469                 mov     edx, ds:_offset_height
.text:0000846F                 push    edx             ; top
.text:00008470                 mov     eax, ds:_offset_width
.text:00008475                 push    eax             ; left
.text:00008476                 mov     ecx, [ebp+hdc]
.text:00008479                 push    ecx             ; hdc
.text:0000847A                 call    dword ptr ds:__imp__ExcludeClipRect@20 ; ExcludeClipRect(x,x,x,x,x)
.text:00008480                 cmp     esi, esp
.text:00008482                 call    __RTC_CheckEsp
.text:00008487                 mov     esi, esp
.text:00008489                 mov     edx, [ebp+Paint.rcPaint.bottom]
.text:0000848F                 push    edx             ; bottom
.text:00008490                 mov     eax, [ebp+Paint.rcPaint.right]
.text:00008496                 push    eax             ; right
.text:00008497                 mov     ecx, [ebp+Paint.rcPaint.top]
.text:0000849D                 push    ecx             ; top
.text:0000849E                 mov     edx, [ebp+Paint.rcPaint.left]
.text:000084A4                 push    edx             ; left
.text:000084A5                 mov     eax, [ebp+hdc]
.text:000084A8                 push    eax             ; hdc
.text:000084A9                 call    dword ptr ds:__imp__Rectangle@20 ; Rectangle(x,x,x,x,x)
.text:000084AF                 cmp     esi, esp
.text:000084B1                 call    __RTC_CheckEsp
.text:000084B6                 mov     esi, esp
.text:000084B8                 mov     ecx, [ebp+var_9C4]
.text:000084BE                 push    ecx             ; h
.text:000084BF                 mov     edx, [ebp+hdc]
.text:000084C2                 push    edx             ; hdc
.text:000084C3                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000084C9                 cmp     esi, esp
.text:000084CB                 call    __RTC_CheckEsp
.text:000084D0                 mov     esi, esp
.text:000084D2                 mov     eax, [ebp+h]
.text:000084D8                 push    eax             ; ho
.text:000084D9                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:000084DF                 cmp     esi, esp
.text:000084E1                 call    __RTC_CheckEsp
.text:000084E6                 mov     esi, esp
.text:000084E8                 mov     ecx, [ebp+var_9CC]
.text:000084EE                 push    ecx             ; h
.text:000084EF                 mov     edx, [ebp+hdc]
.text:000084F2                 push    edx             ; hdc
.text:000084F3                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000084F9                 cmp     esi, esp
.text:000084FB                 call    __RTC_CheckEsp
.text:00008500                 mov     esi, esp
.text:00008502                 mov     eax, [ebp+ho]
.text:00008508                 push    eax             ; ho
.text:00008509                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:0000850F                 cmp     esi, esp
.text:00008511                 call    __RTC_CheckEsp
.text:00008516
.text:00008516 loc_8516:                               ; CODE XREF: WndProc(x,x,x,x)+183Bj
.text:00008516                 mov     esi, esp
.text:00008518                 push    0Dh             ; i
.text:0000851A                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text:00008520                 cmp     esi, esp
.text:00008522                 call    __RTC_CheckEsp
.text:00008527                 mov     esi, esp
.text:00008529                 push    eax             ; h
.text:0000852A                 mov     ecx, [ebp+hdc]
.text:0000852D                 push    ecx             ; hdc
.text:0000852E                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00008534                 cmp     esi, esp
.text:00008536                 call    __RTC_CheckEsp
.text:0000853B                 mov     esi, esp
.text:0000853D                 push    6               ; i
.text:0000853F                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text:00008545                 cmp     esi, esp
.text:00008547                 call    __RTC_CheckEsp
.text:0000854C                 mov     esi, esp
.text:0000854E                 push    eax             ; h
.text:0000854F                 mov     edx, [ebp+hdc]
.text:00008552                 push    edx             ; hdc
.text:00008553                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00008559                 cmp     esi, esp
.text:0000855B                 call    __RTC_CheckEsp
.text:00008560                 mov     esi, esp
.text:00008562                 lea     eax, [ebp+Paint]
.text:00008568                 push    eax             ; lpPaint
.text:00008569                 mov     ecx, [ebp+hWnd]
.text:0000856C                 push    ecx             ; hWnd
.text:0000856D                 call    dword ptr ds:__imp__EndPaint@8 ; EndPaint(x,x)
.text:00008573                 cmp     esi, esp
.text:00008575                 call    __RTC_CheckEsp
.text:0000857A                 mov     esi, esp
.text:0000857C                 mov     edx, [ebp+hWnd]
.text:0000857F                 push    edx             ; hWnd
.text:00008580                 call    dword ptr ds:__imp__ShowCaret@4 ; ShowCaret(x)
.text:00008586                 cmp     esi, esp
.text:00008588                 call    __RTC_CheckEsp
.text:0000858D                 xor     eax, eax
.text:0000858F                 jmp     loc_9A43
.text:00008594 ; ---------------------------------------------------------------------------
.text:00008594
.text:00008594 $LN137:                                 ; CODE XREF: WndProc(x,x,x,x)+1C6j
.text:00008594                                         ; DATA XREF: .text:$LN314o
.text:00008594                 push    8               ; jumptable 00006D0E case 2
.text:00008596                 push    1
.text:00008598                 call    _safemalloc
.text:0000859D                 add     esp, 8
.text:000085A0                 mov     [ebp+var_9D0], eax
.text:000085A6                 mov     eax, [ebp+var_9D0]
.text:000085AC                 mov     ecx, [ebp+lParam]
.text:000085AF                 mov     [eax], ecx
.text:000085B1                 mov     edx, [ebp+var_9D0]
.text:000085B7                 mov     eax, [ebp+arg_C]
.text:000085BA                 mov     [edx+4], eax
.text:000085BD                 mov     ecx, [ebp+var_9D0]
.text:000085C3                 push    ecx
.text:000085C4                 push    offset _wm_netevent_callback
.text:000085C9                 call    _queue_toplevel_callback
.text:000085CE                 add     esp, 8
.text:000085D1                 xor     eax, eax
.text:000085D3                 jmp     loc_9A43
.text:000085D8 ; ---------------------------------------------------------------------------
.text:000085D8
.text:000085D8 $LN136:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:000085D8                                         ; DATA XREF: .text:$LN310o
.text:000085D8                 push    1               ; jumptable 00006BC0 case 6
.text:000085DA                 mov     edx, dword ptr ds:_term
.text:000085E0                 push    edx
.text:000085E1                 call    _term_set_focus
.text:000085E6                 add     esp, 8
.text:000085E9                 mov     esi, esp
.text:000085EB                 mov     eax, ds:_font_height
.text:000085F0                 push    eax             ; nHeight
.text:000085F1                 mov     ecx, ds:_font_width
.text:000085F7                 push    ecx             ; nWidth
.text:000085F8                 mov     edx, ds:_caretbm
.text:000085FE                 push    edx             ; hBitmap
.text:000085FF                 mov     eax, [ebp+hWnd]
.text:00008602                 push    eax             ; hWnd
.text:00008603                 call    dword ptr ds:__imp__CreateCaret@16 ; CreateCaret(x,x,x,x)
.text:00008609                 cmp     esi, esp
.text:0000860B                 call    __RTC_CheckEsp
.text:00008610                 mov     esi, esp
.text:00008612                 mov     ecx, [ebp+hWnd]
.text:00008615                 push    ecx             ; hWnd
.text:00008616                 call    dword ptr ds:__imp__ShowCaret@4 ; ShowCaret(x)
.text:0000861C                 cmp     esi, esp
.text:0000861E                 call    __RTC_CheckEsp
.text:00008623                 push    0
.text:00008625                 call    _flash_window
.text:0000862A                 add     esp, 4
.text:0000862D                 mov     ds:_compose_state, 0
.text:00008637                 mov     edx, dword ptr ds:_term
.text:0000863D                 push    edx
.text:0000863E                 call    _term_update
.text:00008643                 add     esp, 4
.text:00008646                 jmp     loc_9A24
.text:0000864B ; ---------------------------------------------------------------------------
.text:0000864B
.text:0000864B $LN135:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:0000864B                                         ; DATA XREF: .text:$LN310o
.text:0000864B                 push    1               ; jumptable 00006BC0 case 7
.text:0000864D                 call    _show_mouseptr
.text:00008652                 add     esp, 4
.text:00008655                 push    0
.text:00008657                 mov     eax, dword ptr ds:_term
.text:0000865C                 push    eax
.text:0000865D                 call    _term_set_focus
.text:00008662                 add     esp, 8
.text:00008665                 mov     esi, esp
.text:00008667                 call    dword ptr ds:__imp__DestroyCaret@0 ; DestroyCaret()
.text:0000866D                 cmp     esi, esp
.text:0000866F                 call    __RTC_CheckEsp
.text:00008674                 mov     _caret_y, 0FFFFFFFFh
.text:0000867E                 mov     ecx, _caret_y
.text:00008684                 mov     _caret_x, ecx
.text:0000868A                 mov     edx, dword ptr ds:_term
.text:00008690                 push    edx
.text:00008691                 call    _term_update
.text:00008696                 add     esp, 4
.text:00008699                 jmp     loc_9A24
.text:0000869E ; ---------------------------------------------------------------------------
.text:0000869E
.text:0000869E $LN134:                                 ; CODE XREF: WndProc(x,x,x,x)+159j
.text:0000869E                                         ; DATA XREF: .text:$LN313o
.text:0000869E                 push    1               ; jumptable 00006CA1 case 48
.text:000086A0                 call    _EnableSizeTip
.text:000086A5                 add     esp, 4
.text:000086A8                 mov     ds:_resizing, 1
.text:000086B2                 mov     ds:?need_backend_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::need_backend_resize
.text:000086BC                 jmp     loc_9A24
.text:000086C1 ; ---------------------------------------------------------------------------
.text:000086C1
.text:000086C1 $LN133:                                 ; CODE XREF: WndProc(x,x,x,x)+159j
.text:000086C1                                         ; DATA XREF: .text:$LN313o
.text:000086C1                 push    0               ; jumptable 00006CA1 case 49
.text:000086C3                 call    _EnableSizeTip
.text:000086C8                 add     esp, 4
.text:000086CB                 mov     ds:_resizing, 0
.text:000086D5                 cmp     ds:?need_backend_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::need_backend_resize
.text:000086DC                 jz      short loc_8738
.text:000086DE                 push    5Bh ; '['
.text:000086E0                 mov     eax, dword ptr ds:_conf
.text:000086E5                 push    eax
.text:000086E6                 call    _conf_get_int
.text:000086EB                 add     esp, 8
.text:000086EE                 push    eax
.text:000086EF                 push    6Eh ; 'n'
.text:000086F1                 mov     ecx, dword ptr ds:_conf
.text:000086F7                 push    ecx
.text:000086F8                 call    _conf_get_int
.text:000086FD                 add     esp, 8
.text:00008700                 push    eax
.text:00008701                 push    6Fh ; 'o'
.text:00008703                 mov     edx, dword ptr ds:_conf
.text:00008709                 push    edx
.text:0000870A                 call    _conf_get_int
.text:0000870F                 add     esp, 8
.text:00008712                 push    eax
.text:00008713                 mov     eax, dword ptr ds:_term
.text:00008718                 push    eax
.text:00008719                 call    _term_size
.text:0000871E                 add     esp, 10h
.text:00008721                 mov     esi, esp
.text:00008723                 push    1               ; bErase
.text:00008725                 push    0               ; lpRect
.text:00008727                 mov     ecx, [ebp+hWnd]
.text:0000872A                 push    ecx             ; hWnd
.text:0000872B                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:00008731                 cmp     esi, esp
.text:00008733                 call    __RTC_CheckEsp
.text:00008738
.text:00008738 loc_8738:                               ; CODE XREF: WndProc(x,x,x,x)+1B94j
.text:00008738                 jmp     loc_9A24
.text:0000873D ; ---------------------------------------------------------------------------
.text:0000873D
.text:0000873D $LN131:                                 ; CODE XREF: WndProc(x,x,x,x)+159j
.text:0000873D                                         ; DATA XREF: .text:$LN313o
.text:0000873D                 push    6Ah ; 'j'       ; jumptable 00006CA1 case 19
.text:0000873F                 mov     edx, dword ptr ds:_conf
.text:00008745                 push    edx
.text:00008746                 call    _conf_get_int
.text:0000874B                 add     esp, 8
.text:0000874E                 mov     [ebp+var_C], eax
.text:00008751                 cmp     [ebp+var_C], 0
.text:00008755                 jz      short loc_876E
.text:00008757                 cmp     [ebp+var_C], 3
.text:0000875B                 jnz     loc_89D5
.text:00008761                 call    _is_alt_pressed
.text:00008766                 test    eax, eax
.text:00008768                 jnz     loc_89D5
.text:0000876E
.text:0000876E loc_876E:                               ; CODE XREF: WndProc(x,x,x,x)+1C0Dj
.text:0000876E                 mov     eax, [ebp+arg_C]
.text:00008771                 mov     [ebp+var_9EC], eax
.text:00008777                 cmp     ds:?need_backend_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::need_backend_resize
.text:0000877E                 jnz     loc_8828
.text:00008784                 cmp     [ebp+var_C], 3
.text:00008788                 jnz     loc_8828
.text:0000878E                 push    6Fh ; 'o'
.text:00008790                 mov     ecx, dword ptr ds:_conf
.text:00008796                 push    ecx
.text:00008797                 call    _conf_get_int
.text:0000879C                 add     esp, 8
.text:0000879F                 mov     edx, dword ptr ds:_term
.text:000087A5                 cmp     eax, [edx+128h]
.text:000087AB                 jnz     short loc_87CB
.text:000087AD                 push    6Eh ; 'n'
.text:000087AF                 mov     eax, dword ptr ds:_conf
.text:000087B4                 push    eax
.text:000087B5                 call    _conf_get_int
.text:000087BA                 add     esp, 8
.text:000087BD                 mov     ecx, dword ptr ds:_term
.text:000087C3                 cmp     eax, [ecx+12Ch]
.text:000087C9                 jz      short loc_8828
.text:000087CB
.text:000087CB loc_87CB:                               ; CODE XREF: WndProc(x,x,x,x)+1C63j
.text:000087CB                 mov     edx, dword ptr ds:_term
.text:000087D1                 mov     eax, [edx+128h]
.text:000087D7                 push    eax
.text:000087D8                 push    6Fh ; 'o'
.text:000087DA                 mov     ecx, dword ptr ds:_conf
.text:000087E0                 push    ecx
.text:000087E1                 call    _conf_set_int
.text:000087E6                 add     esp, 0Ch
.text:000087E9                 mov     edx, dword ptr ds:_term
.text:000087EF                 mov     eax, [edx+12Ch]
.text:000087F5                 push    eax
.text:000087F6                 push    6Eh ; 'n'
.text:000087F8                 mov     ecx, dword ptr ds:_conf
.text:000087FE                 push    ecx
.text:000087FF                 call    _conf_set_int
.text:00008804                 add     esp, 0Ch
.text:00008807                 mov     esi, esp
.text:00008809                 push    1               ; bErase
.text:0000880B                 push    0               ; lpRect
.text:0000880D                 mov     edx, [ebp+hWnd]
.text:00008810                 push    edx             ; hWnd
.text:00008811                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:00008817                 cmp     esi, esp
.text:00008819                 call    __RTC_CheckEsp
.text:0000881E                 mov     ds:?need_backend_resize@?1??WndProc@@9@9, 1 ; `WndProc'::`2'::need_backend_resize
.text:00008828
.text:00008828 loc_8828:                               ; CODE XREF: WndProc(x,x,x,x)+1C36j
.text:00008828                                         ; WndProc(x,x,x,x)+1C40j ...
.text:00008828                 mov     eax, [ebp+var_9EC]
.text:0000882E                 mov     ecx, [ebp+var_9EC]
.text:00008834                 mov     edx, [eax+8]
.text:00008837                 sub     edx, [ecx]
.text:00008839                 sub     edx, ds:_extra_width
.text:0000883F                 mov     [ebp+var_9D4], edx
.text:00008845                 mov     eax, [ebp+var_9EC]
.text:0000884B                 mov     ecx, [ebp+var_9EC]
.text:00008851                 mov     edx, [eax+0Ch]
.text:00008854                 sub     edx, [ecx+4]
.text:00008857                 sub     edx, ds:_extra_height
.text:0000885D                 mov     [ebp+var_9D8], edx
.text:00008863                 mov     eax, ds:_font_width
.text:00008868                 cdq
.text:00008869                 sub     eax, edx
.text:0000886B                 sar     eax, 1
.text:0000886D                 add     eax, [ebp+var_9D4]
.text:00008873                 cdq
.text:00008874                 idiv    ds:_font_width
.text:0000887A                 mov     [ebp+var_9DC], eax
.text:00008880                 cmp     [ebp+var_9DC], 1
.text:00008887                 jge     short loc_8893
.text:00008889                 mov     [ebp+var_9DC], 1
.text:00008893
.text:00008893 loc_8893:                               ; CODE XREF: WndProc(x,x,x,x)+1D3Fj
.text:00008893                 mov     eax, ds:_font_height
.text:00008898                 cdq
.text:00008899                 sub     eax, edx
.text:0000889B                 sar     eax, 1
.text:0000889D                 add     eax, [ebp+var_9D8]
.text:000088A3                 cdq
.text:000088A4                 idiv    ds:_font_height
.text:000088AA                 mov     [ebp+var_9E0], eax
.text:000088B0                 cmp     [ebp+var_9E0], 1
.text:000088B7                 jge     short loc_88C3
.text:000088B9                 mov     [ebp+var_9E0], 1
.text:000088C3
.text:000088C3 loc_88C3:                               ; CODE XREF: WndProc(x,x,x,x)+1D6Fj
.text:000088C3                 mov     eax, [ebp+var_9E0]
.text:000088C9                 push    eax
.text:000088CA                 mov     ecx, [ebp+var_9DC]
.text:000088D0                 push    ecx
.text:000088D1                 mov     edx, [ebp+hWnd]
.text:000088D4                 push    edx
.text:000088D5                 call    _UpdateSizeTip
.text:000088DA                 add     esp, 0Ch
.text:000088DD                 mov     eax, [ebp+var_9DC]
.text:000088E3                 imul    eax, ds:_font_width
.text:000088EA                 mov     ecx, [ebp+var_9D4]
.text:000088F0                 sub     ecx, eax
.text:000088F2                 mov     [ebp+var_9E4], ecx
.text:000088F8                 mov     edx, [ebp+var_9E0]
.text:000088FE                 imul    edx, ds:_font_height
.text:00008905                 mov     eax, [ebp+var_9D8]
.text:0000890B                 sub     eax, edx
.text:0000890D                 mov     [ebp+var_9E8], eax
.text:00008913                 cmp     [ebp+var_9E4], 0
.text:0000891A                 jz      short loc_895E
.text:0000891C                 cmp     [ebp+lParam], 1
.text:00008920                 jz      short loc_892E
.text:00008922                 cmp     [ebp+lParam], 7
.text:00008926                 jz      short loc_892E
.text:00008928                 cmp     [ebp+lParam], 4
.text:0000892C                 jnz     short loc_8946
.text:0000892E
.text:0000892E loc_892E:                               ; CODE XREF: WndProc(x,x,x,x)+1DD8j
.text:0000892E                                         ; WndProc(x,x,x,x)+1DDEj
.text:0000892E                 mov     ecx, [ebp+var_9EC]
.text:00008934                 mov     edx, [ecx]
.text:00008936                 add     edx, [ebp+var_9E4]
.text:0000893C                 mov     eax, [ebp+var_9EC]
.text:00008942                 mov     [eax], edx
.text:00008944                 jmp     short loc_895E
.text:00008946 ; ---------------------------------------------------------------------------
.text:00008946
.text:00008946 loc_8946:                               ; CODE XREF: WndProc(x,x,x,x)+1DE4j
.text:00008946                 mov     ecx, [ebp+var_9EC]
.text:0000894C                 mov     edx, [ecx+8]
.text:0000894F                 sub     edx, [ebp+var_9E4]
.text:00008955                 mov     eax, [ebp+var_9EC]
.text:0000895B                 mov     [eax+8], edx
.text:0000895E
.text:0000895E loc_895E:                               ; CODE XREF: WndProc(x,x,x,x)+1DD2j
.text:0000895E                                         ; WndProc(x,x,x,x)+1DFCj
.text:0000895E                 cmp     [ebp+var_9E8], 0
.text:00008965                 jz      short loc_89AB
.text:00008967                 cmp     [ebp+lParam], 3
.text:0000896B                 jz      short loc_8979
.text:0000896D                 cmp     [ebp+lParam], 5
.text:00008971                 jz      short loc_8979
.text:00008973                 cmp     [ebp+lParam], 4
.text:00008977                 jnz     short loc_8993
.text:00008979
.text:00008979 loc_8979:                               ; CODE XREF: WndProc(x,x,x,x)+1E23j
.text:00008979                                         ; WndProc(x,x,x,x)+1E29j
.text:00008979                 mov     ecx, [ebp+var_9EC]
.text:0000897F                 mov     edx, [ecx+4]
.text:00008982                 add     edx, [ebp+var_9E8]
.text:00008988                 mov     eax, [ebp+var_9EC]
.text:0000898E                 mov     [eax+4], edx
.text:00008991                 jmp     short loc_89AB
.text:00008993 ; ---------------------------------------------------------------------------
.text:00008993
.text:00008993 loc_8993:                               ; CODE XREF: WndProc(x,x,x,x)+1E2Fj
.text:00008993                 mov     ecx, [ebp+var_9EC]
.text:00008999                 mov     edx, [ecx+0Ch]
.text:0000899C                 sub     edx, [ebp+var_9E8]
.text:000089A2                 mov     eax, [ebp+var_9EC]
.text:000089A8                 mov     [eax+0Ch], edx
.text:000089AB
.text:000089AB loc_89AB:                               ; CODE XREF: WndProc(x,x,x,x)+1E1Dj
.text:000089AB                                         ; WndProc(x,x,x,x)+1E49j
.text:000089AB                 cmp     [ebp+var_9E4], 0
.text:000089B2                 jnz     short loc_89BD
.text:000089B4                 cmp     [ebp+var_9E8], 0
.text:000089BB                 jz      short loc_89C9
.text:000089BD
.text:000089BD loc_89BD:                               ; CODE XREF: WndProc(x,x,x,x)+1E6Aj
.text:000089BD                 mov     eax, 1
.text:000089C2                 jmp     loc_9A43
.text:000089C7 ; ---------------------------------------------------------------------------
.text:000089C7                 jmp     short loc_89D0
.text:000089C9 ; ---------------------------------------------------------------------------
.text:000089C9
.text:000089C9 loc_89C9:                               ; CODE XREF: WndProc(x,x,x,x)+1E73j
.text:000089C9                 xor     eax, eax
.text:000089CB                 jmp     loc_9A43
.text:000089D0 ; ---------------------------------------------------------------------------
.text:000089D0
.text:000089D0 loc_89D0:                               ; CODE XREF: WndProc(x,x,x,x)+1E7Fj
.text:000089D0                 jmp     $LN104          ; jumptable 00006D0E case 0
.text:000089D5 ; ---------------------------------------------------------------------------
.text:000089D5
.text:000089D5 loc_89D5:                               ; CODE XREF: WndProc(x,x,x,x)+1C13j
.text:000089D5                                         ; WndProc(x,x,x,x)+1C20j
.text:000089D5                 mov     [ebp+var_A00], 0
.text:000089DF                 push    7Ah ; 'z'
.text:000089E1                 mov     ecx, dword ptr ds:_conf
.text:000089E7                 push    ecx
.text:000089E8                 call    _conf_get_int
.text:000089ED                 add     esp, 8
.text:000089F0                 mov     [ebp+var_A04], eax
.text:000089F6                 mov     edx, [ebp+var_A04]
.text:000089FC                 sub     edx, ds:_offset_width
.text:00008A02                 mov     eax, ds:_extra_width
.text:00008A07                 lea     ecx, [eax+edx*2]
.text:00008A0A                 mov     [ebp+var_A08], ecx
.text:00008A10                 mov     edx, [ebp+var_A04]
.text:00008A16                 sub     edx, ds:_offset_height
.text:00008A1C                 mov     eax, ds:_extra_height
.text:00008A21                 lea     ecx, [eax+edx*2]
.text:00008A24                 mov     [ebp+var_A0C], ecx
.text:00008A2A                 mov     edx, [ebp+arg_C]
.text:00008A2D                 mov     [ebp+var_A10], edx
.text:00008A33                 mov     eax, [ebp+var_A10]
.text:00008A39                 mov     ecx, [ebp+var_A10]
.text:00008A3F                 mov     edx, [eax+8]
.text:00008A42                 sub     edx, [ecx]
.text:00008A44                 sub     edx, [ebp+var_A08]
.text:00008A4A                 mov     [ebp+var_9F0], edx
.text:00008A50                 mov     eax, [ebp+var_A10]
.text:00008A56                 mov     ecx, [ebp+var_A10]
.text:00008A5C                 mov     edx, [eax+0Ch]
.text:00008A5F                 sub     edx, [ecx+4]
.text:00008A62                 sub     edx, [ebp+var_A0C]
.text:00008A68                 mov     [ebp+var_9F4], edx
.text:00008A6E                 mov     eax, dword ptr ds:_term
.text:00008A73                 mov     eax, [eax+12Ch]
.text:00008A79                 cdq
.text:00008A7A                 sub     eax, edx
.text:00008A7C                 sar     eax, 1
.text:00008A7E                 add     eax, [ebp+var_9F0]
.text:00008A84                 mov     ecx, dword ptr ds:_term
.text:00008A8A                 cdq
.text:00008A8B                 idiv    dword ptr [ecx+12Ch]
.text:00008A91                 mov     [ebp+var_9F8], eax
.text:00008A97                 mov     edx, dword ptr ds:_term
.text:00008A9D                 mov     eax, [edx+128h]
.text:00008AA3                 cdq
.text:00008AA4                 sub     eax, edx
.text:00008AA6                 sar     eax, 1
.text:00008AA8                 add     eax, [ebp+var_9F4]
.text:00008AAE                 mov     ecx, dword ptr ds:_term
.text:00008AB4                 cdq
.text:00008AB5                 idiv    dword ptr [ecx+128h]
.text:00008ABB                 mov     [ebp+var_9FC], eax
.text:00008AC1                 mov     edx, dword ptr ds:_term
.text:00008AC7                 mov     eax, [ebp+var_9F8]
.text:00008ACD                 imul    eax, [edx+12Ch]
.text:00008AD4                 mov     ecx, [ebp+var_A10]
.text:00008ADA                 mov     edx, [ecx]
.text:00008ADC                 add     edx, eax
.text:00008ADE                 add     edx, [ebp+var_A08]
.text:00008AE4                 mov     eax, [ebp+var_A10]
.text:00008AEA                 cmp     [eax+8], edx
.text:00008AED                 jz      short loc_8AF9
.text:00008AEF                 mov     [ebp+var_A00], 1
.text:00008AF9
.text:00008AF9 loc_8AF9:                               ; CODE XREF: WndProc(x,x,x,x)+1FA5j
.text:00008AF9                 cmp     [ebp+lParam], 1
.text:00008AFD                 jz      short loc_8B0B
.text:00008AFF                 cmp     [ebp+lParam], 7
.text:00008B03                 jz      short loc_8B0B
.text:00008B05                 cmp     [ebp+lParam], 4
.text:00008B09                 jnz     short loc_8B39
.text:00008B0B
.text:00008B0B loc_8B0B:                               ; CODE XREF: WndProc(x,x,x,x)+1FB5j
.text:00008B0B                                         ; WndProc(x,x,x,x)+1FBBj
.text:00008B0B                 mov     ecx, dword ptr ds:_term
.text:00008B11                 mov     edx, [ebp+var_9F8]
.text:00008B17                 imul    edx, [ecx+12Ch]
.text:00008B1E                 mov     eax, [ebp+var_A10]
.text:00008B24                 mov     ecx, [eax+8]
.text:00008B27                 sub     ecx, edx
.text:00008B29                 sub     ecx, [ebp+var_A08]
.text:00008B2F                 mov     edx, [ebp+var_A10]
.text:00008B35                 mov     [edx], ecx
.text:00008B37                 jmp     short loc_8B64
.text:00008B39 ; ---------------------------------------------------------------------------
.text:00008B39
.text:00008B39 loc_8B39:                               ; CODE XREF: WndProc(x,x,x,x)+1FC1j
.text:00008B39                 mov     eax, dword ptr ds:_term
.text:00008B3E                 mov     ecx, [ebp+var_9F8]
.text:00008B44                 imul    ecx, [eax+12Ch]
.text:00008B4B                 mov     edx, [ebp+var_A10]
.text:00008B51                 mov     eax, [edx]
.text:00008B53                 add     eax, ecx
.text:00008B55                 add     eax, [ebp+var_A08]
.text:00008B5B                 mov     ecx, [ebp+var_A10]
.text:00008B61                 mov     [ecx+8], eax
.text:00008B64
.text:00008B64 loc_8B64:                               ; CODE XREF: WndProc(x,x,x,x)+1FEFj
.text:00008B64                 mov     edx, dword ptr ds:_term
.text:00008B6A                 mov     eax, [ebp+var_9FC]
.text:00008B70                 imul    eax, [edx+128h]
.text:00008B77                 mov     ecx, [ebp+var_A10]
.text:00008B7D                 mov     edx, [ecx+4]
.text:00008B80                 add     edx, eax
.text:00008B82                 add     edx, [ebp+var_A0C]
.text:00008B88                 mov     eax, [ebp+var_A10]
.text:00008B8E                 cmp     [eax+0Ch], edx
.text:00008B91                 jz      short loc_8B9D
.text:00008B93                 mov     [ebp+var_A00], 1
.text:00008B9D
.text:00008B9D loc_8B9D:                               ; CODE XREF: WndProc(x,x,x,x)+2049j
.text:00008B9D                 cmp     [ebp+lParam], 3
.text:00008BA1                 jz      short loc_8BAF
.text:00008BA3                 cmp     [ebp+lParam], 5
.text:00008BA7                 jz      short loc_8BAF
.text:00008BA9                 cmp     [ebp+lParam], 4
.text:00008BAD                 jnz     short loc_8BDE
.text:00008BAF
.text:00008BAF loc_8BAF:                               ; CODE XREF: WndProc(x,x,x,x)+2059j
.text:00008BAF                                         ; WndProc(x,x,x,x)+205Fj
.text:00008BAF                 mov     ecx, dword ptr ds:_term
.text:00008BB5                 mov     edx, [ebp+var_9FC]
.text:00008BBB                 imul    edx, [ecx+128h]
.text:00008BC2                 mov     eax, [ebp+var_A10]
.text:00008BC8                 mov     ecx, [eax+0Ch]
.text:00008BCB                 sub     ecx, edx
.text:00008BCD                 sub     ecx, [ebp+var_A0C]
.text:00008BD3                 mov     edx, [ebp+var_A10]
.text:00008BD9                 mov     [edx+4], ecx
.text:00008BDC                 jmp     short loc_8C0A
.text:00008BDE ; ---------------------------------------------------------------------------
.text:00008BDE
.text:00008BDE loc_8BDE:                               ; CODE XREF: WndProc(x,x,x,x)+2065j
.text:00008BDE                 mov     eax, dword ptr ds:_term
.text:00008BE3                 mov     ecx, [ebp+var_9FC]
.text:00008BE9                 imul    ecx, [eax+128h]
.text:00008BF0                 mov     edx, [ebp+var_A10]
.text:00008BF6                 mov     eax, [edx+4]
.text:00008BF9                 add     eax, ecx
.text:00008BFB                 add     eax, [ebp+var_A0C]
.text:00008C01                 mov     ecx, [ebp+var_A10]
.text:00008C07                 mov     [ecx+0Ch], eax
.text:00008C0A
.text:00008C0A loc_8C0A:                               ; CODE XREF: WndProc(x,x,x,x)+2094j
.text:00008C0A                 mov     eax, [ebp+var_A00]
.text:00008C10                 jmp     loc_9A43
.text:00008C15 ; ---------------------------------------------------------------------------
.text:00008C15
.text:00008C15 $LN104:                                 ; CODE XREF: WndProc(x,x,x,x)+1C6j
.text:00008C15                                         ; WndProc(x,x,x,x):loc_89D0j
.text:00008C15                                         ; DATA XREF: ...
.text:00008C15                 mov     ds:?fullscr_on_max@?1??WndProc@@9@9, 1 ; jumptable 00006D0E case 0
.text:00008C1F                 jmp     loc_9A24
.text:00008C24 ; ---------------------------------------------------------------------------
.text:00008C24
.text:00008C24 $LN103:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:00008C24                                         ; DATA XREF: .text:$LN310o
.text:00008C24                 call    _sys_cursor_update ; jumptable 00006BC0 case 2
.text:00008C29                 jmp     loc_9A24
.text:00008C2E ; ---------------------------------------------------------------------------
.text:00008C2E
.text:00008C2E $LN102:                                 ; CODE XREF: WndProc(x,x,x,x)+78j
.text:00008C2E                                         ; DATA XREF: .text:$LN310o
.text:00008C2E                 push    6Ah ; 'j'       ; jumptable 00006BC0 case 4
.text:00008C30                 mov     edx, dword ptr ds:_conf
.text:00008C36                 push    edx
.text:00008C37                 call    _conf_get_int
.text:00008C3C                 add     esp, 8
.text:00008C3F                 mov     [ebp+var_C], eax
.text:00008C42                 cmp     [ebp+lParam], 1
.text:00008C46                 jnz     short loc_8C90
.text:00008C48                 push    6Dh ; 'm'
.text:00008C4A                 mov     eax, dword ptr ds:_conf
.text:00008C4F                 push    eax
.text:00008C50                 call    _conf_get_int
.text:00008C55                 add     esp, 8
.text:00008C58                 test    eax, eax
.text:00008C5A                 jz      short loc_8C6A
.text:00008C5C                 mov     ecx, ds:_window_name
.text:00008C62                 mov     [ebp+var_C2C], ecx
.text:00008C68                 jmp     short loc_8C76
.text:00008C6A ; ---------------------------------------------------------------------------
.text:00008C6A
.text:00008C6A loc_8C6A:                               ; CODE XREF: WndProc(x,x,x,x)+2112j
.text:00008C6A                 mov     edx, ds:_icon_name
.text:00008C70                 mov     [ebp+var_C2C], edx
.text:00008C76
.text:00008C76 loc_8C76:                               ; CODE XREF: WndProc(x,x,x,x)+2120j
.text:00008C76                 mov     esi, esp
.text:00008C78                 mov     eax, [ebp+var_C2C]
.text:00008C7E                 push    eax             ; lpString
.text:00008C7F                 mov     ecx, [ebp+hWnd]
.text:00008C82                 push    ecx             ; hWnd
.text:00008C83                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:00008C89                 cmp     esi, esp
.text:00008C8B                 call    __RTC_CheckEsp
.text:00008C90
.text:00008C90 loc_8C90:                               ; CODE XREF: WndProc(x,x,x,x)+20FEj
.text:00008C90                 cmp     [ebp+lParam], 0
.text:00008C94                 jz      short loc_8C9C
.text:00008C96                 cmp     [ebp+lParam], 2
.text:00008C9A                 jnz     short loc_8CB6
.text:00008C9C
.text:00008C9C loc_8C9C:                               ; CODE XREF: WndProc(x,x,x,x)+214Cj
.text:00008C9C                 mov     esi, esp
.text:00008C9E                 mov     edx, ds:_window_name
.text:00008CA4                 push    edx             ; lpString
.text:00008CA5                 mov     eax, [ebp+hWnd]
.text:00008CA8                 push    eax             ; hWnd
.text:00008CA9                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:00008CAF                 cmp     esi, esp
.text:00008CB1                 call    __RTC_CheckEsp
.text:00008CB6
.text:00008CB6 loc_8CB6:                               ; CODE XREF: WndProc(x,x,x,x)+2152j
.text:00008CB6                 cmp     [ebp+lParam], 0
.text:00008CBA                 jnz     short loc_8CDB
.text:00008CBC                 mov     ds:?processed_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::processed_resize
.text:00008CC6                 call    _clear_full_screen
.text:00008CCB                 cmp     ds:?processed_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::processed_resize
.text:00008CD2                 jz      short loc_8CDB
.text:00008CD4                 xor     eax, eax
.text:00008CD6                 jmp     loc_9A43
.text:00008CDB ; ---------------------------------------------------------------------------
.text:00008CDB
.text:00008CDB loc_8CDB:                               ; CODE XREF: WndProc(x,x,x,x)+2172j
.text:00008CDB                                         ; WndProc(x,x,x,x)+218Aj
.text:00008CDB                 cmp     [ebp+lParam], 2
.text:00008CDF                 jnz     short loc_8D13
.text:00008CE1                 cmp     ds:?fullscr_on_max@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::fullscr_on_max
.text:00008CE8                 jz      short loc_8D13
.text:00008CEA                 mov     ds:?fullscr_on_max@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::fullscr_on_max
.text:00008CF4                 mov     ds:?processed_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::processed_resize
.text:00008CFE                 call    _make_full_screen
.text:00008D03                 cmp     ds:?processed_resize@?1??WndProc@@9@9, 0 ; `WndProc'::`2'::processed_resize
.text:00008D0A                 jz      short loc_8D13
.text:00008D0C                 xor     eax, eax
.text:00008D0E                 jmp     loc_9A43
.text:00008D13 ; ---------------------------------------------------------------------------
.text:00008D13
.text:00008D13 loc_8D13:                               ; CODE XREF: WndProc(x,x,x,x)+2197j
.text:00008D13                                         ; WndProc(x,x,x,x)+21A0j ...
.text:00008D13                 mov     ds:?processed_resize@?1??WndProc@@9@9, 1 ; `WndProc'::`2'::processed_resize
.text:00008D1D                 cmp     [ebp+var_C], 1
.text:00008D21                 jnz     short loc_8D32
.text:00008D23                 push    0FFFFFFFFh
.text:00008D25                 call    _reset_window
.text:00008D2A                 add     esp, 4
.text:00008D2D                 jmp     loc_907A
.text:00008D32 ; ---------------------------------------------------------------------------
.text:00008D32
.text:00008D32 loc_8D32:                               ; CODE XREF: WndProc(x,x,x,x)+21D9j
.text:00008D32                 push    7Ah ; 'z'
.text:00008D34                 mov     ecx, dword ptr ds:_conf
.text:00008D3A                 push    ecx
.text:00008D3B                 call    _conf_get_int
.text:00008D40                 add     esp, 8
.text:00008D43                 mov     [ebp+var_A24], eax
.text:00008D49                 mov     edx, [ebp+arg_C]
.text:00008D4C                 and     edx, 0FFFFh
.text:00008D52                 movzx   eax, dx
.text:00008D55                 mov     [ebp+var_A14], eax
.text:00008D5B                 mov     ecx, [ebp+arg_C]
.text:00008D5E                 shr     ecx, 10h
.text:00008D61                 and     ecx, 0FFFFh
.text:00008D67                 movzx   edx, cx
.text:00008D6A                 mov     [ebp+var_A18], edx
.text:00008D70                 cmp     [ebp+lParam], 2
.text:00008D74                 jnz     loc_8E8C
.text:00008D7A                 cmp     ds:_was_zoomed, 0
.text:00008D81                 jnz     loc_8E8C
.text:00008D87                 mov     ds:_was_zoomed, 1
.text:00008D91                 mov     eax, dword ptr ds:_term
.text:00008D96                 mov     ecx, [eax+128h]
.text:00008D9C                 mov     ds:_prev_rows, ecx
.text:00008DA2                 mov     edx, dword ptr ds:_term
.text:00008DA8                 mov     eax, [edx+12Ch]
.text:00008DAE                 mov     ds:_prev_cols, eax
.text:00008DB3                 cmp     [ebp+var_C], 0
.text:00008DB7                 jnz     loc_8E7D
.text:00008DBD                 mov     eax, [ebp+var_A14]
.text:00008DC3                 cdq
.text:00008DC4                 idiv    ds:_font_width
.text:00008DCA                 mov     [ebp+var_A1C], eax
.text:00008DD0                 cmp     [ebp+var_A1C], 1
.text:00008DD7                 jge     short loc_8DE3
.text:00008DD9                 mov     [ebp+var_A1C], 1
.text:00008DE3
.text:00008DE3 loc_8DE3:                               ; CODE XREF: WndProc(x,x,x,x)+228Fj
.text:00008DE3                 mov     eax, [ebp+var_A18]
.text:00008DE9                 cdq
.text:00008DEA                 idiv    ds:_font_height
.text:00008DF0                 mov     [ebp+var_A20], eax
.text:00008DF6                 cmp     [ebp+var_A20], 1
.text:00008DFD                 jge     short loc_8E09
.text:00008DFF                 mov     [ebp+var_A20], 1
.text:00008E09
.text:00008E09 loc_8E09:                               ; CODE XREF: WndProc(x,x,x,x)+22B5j
.text:00008E09                 cmp     ds:_resizing, 0
.text:00008E10                 jz      short loc_8E4E
.text:00008E12                 mov     ds:?need_backend_resize@?1??WndProc@@9@9, 1 ; `WndProc'::`2'::need_backend_resize
.text:00008E1C                 mov     ecx, [ebp+var_A20]
.text:00008E22                 push    ecx
.text:00008E23                 push    6Fh ; 'o'
.text:00008E25                 mov     edx, dword ptr ds:_conf
.text:00008E2B                 push    edx
.text:00008E2C                 call    _conf_set_int
.text:00008E31                 add     esp, 0Ch
.text:00008E34                 mov     eax, [ebp+var_A1C]
.text:00008E3A                 push    eax
.text:00008E3B                 push    6Eh ; 'n'
.text:00008E3D                 mov     ecx, dword ptr ds:_conf
.text:00008E43                 push    ecx
.text:00008E44                 call    _conf_set_int
.text:00008E49                 add     esp, 0Ch
.text:00008E4C                 jmp     short loc_8E7D
.text:00008E4E ; ---------------------------------------------------------------------------
.text:00008E4E
.text:00008E4E loc_8E4E:                               ; CODE XREF: WndProc(x,x,x,x)+22C8j
.text:00008E4E                 push    5Bh ; '['
.text:00008E50                 mov     edx, dword ptr ds:_conf
.text:00008E56                 push    edx
.text:00008E57                 call    _conf_get_int
.text:00008E5C                 add     esp, 8
.text:00008E5F                 push    eax
.text:00008E60                 mov     eax, [ebp+var_A1C]
.text:00008E66                 push    eax
.text:00008E67                 mov     ecx, [ebp+var_A20]
.text:00008E6D                 push    ecx
.text:00008E6E                 mov     edx, dword ptr ds:_term
.text:00008E74                 push    edx
.text:00008E75                 call    _term_size
.text:00008E7A                 add     esp, 10h
.text:00008E7D
.text:00008E7D loc_8E7D:                               ; CODE XREF: WndProc(x,x,x,x)+226Fj
.text:00008E7D                                         ; WndProc(x,x,x,x)+2304j
.text:00008E7D                 push    0
.text:00008E7F                 call    _reset_window
.text:00008E84                 add     esp, 4
.text:00008E87                 jmp     loc_907A
.text:00008E8C ; ---------------------------------------------------------------------------
.text:00008E8C
.text:00008E8C loc_8E8C:                               ; CODE XREF: WndProc(x,x,x,x)+222Cj
.text:00008E8C                                         ; WndProc(x,x,x,x)+2239j
.text:00008E8C                 cmp     [ebp+lParam], 0
.text:00008E90                 jnz     loc_8F73
.text:00008E96                 cmp     ds:_was_zoomed, 0
.text:00008E9D                 jz      loc_8F73
.text:00008EA3                 mov     ds:_was_zoomed, 0
.text:00008EAD                 cmp     [ebp+var_C], 0
.text:00008EB1                 jnz     loc_8F52
.text:00008EB7                 mov     eax, [ebp+var_A24]
.text:00008EBD                 shl     eax, 1
.text:00008EBF                 mov     ecx, [ebp+var_A14]
.text:00008EC5                 sub     ecx, eax
.text:00008EC7                 mov     eax, ecx
.text:00008EC9                 cdq
.text:00008ECA                 idiv    ds:_font_width
.text:00008ED0                 mov     [ebp+var_A1C], eax
.text:00008ED6                 cmp     [ebp+var_A1C], 1
.text:00008EDD                 jge     short loc_8EE9
.text:00008EDF                 mov     [ebp+var_A1C], 1
.text:00008EE9
.text:00008EE9 loc_8EE9:                               ; CODE XREF: WndProc(x,x,x,x)+2395j
.text:00008EE9                 mov     edx, [ebp+var_A24]
.text:00008EEF                 shl     edx, 1
.text:00008EF1                 mov     eax, [ebp+var_A18]
.text:00008EF7                 sub     eax, edx
.text:00008EF9                 cdq
.text:00008EFA                 idiv    ds:_font_height
.text:00008F00                 mov     [ebp+var_A20], eax
.text:00008F06                 cmp     [ebp+var_A20], 1
.text:00008F0D                 jge     short loc_8F19
.text:00008F0F                 mov     [ebp+var_A20], 1
.text:00008F19
.text:00008F19 loc_8F19:                               ; CODE XREF: WndProc(x,x,x,x)+23C5j
.text:00008F19                 push    5Bh ; '['
.text:00008F1B                 mov     eax, dword ptr ds:_conf
.text:00008F20                 push    eax
.text:00008F21                 call    _conf_get_int
.text:00008F26                 add     esp, 8
.text:00008F29                 push    eax
.text:00008F2A                 mov     ecx, [ebp+var_A1C]
.text:00008F30                 push    ecx
.text:00008F31                 mov     edx, [ebp+var_A20]
.text:00008F37                 push    edx
.text:00008F38                 mov     eax, dword ptr ds:_term
.text:00008F3D                 push    eax
.text:00008F3E                 call    _term_size
.text:00008F43                 add     esp, 10h
.text:00008F46                 push    2
.text:00008F48                 call    _reset_window
.text:00008F4D                 add     esp, 4
.text:00008F50                 jmp     short loc_8F6E
.text:00008F52 ; ---------------------------------------------------------------------------
.text:00008F52
.text:00008F52 loc_8F52:                               ; CODE XREF: WndProc(x,x,x,x)+2369j
.text:00008F52                 cmp     [ebp+var_C], 2
.text:00008F56                 jz      short loc_8F64
.text:00008F58                 push    2
.text:00008F5A                 call    _reset_window
.text:00008F5F                 add     esp, 4
.text:00008F62                 jmp     short loc_8F6E
.text:00008F64 ; ---------------------------------------------------------------------------
.text:00008F64
.text:00008F64 loc_8F64:                               ; CODE XREF: WndProc(x,x,x,x)+240Ej
.text:00008F64                 push    0
.text:00008F66                 call    _reset_window
.text:00008F6B                 add     esp, 4
.text:00008F6E
.text:00008F6E loc_8F6E:                               ; CODE XREF: WndProc(x,x,x,x)+2408j
.text:00008F6E                                         ; WndProc(x,x,x,x)+241Aj
.text:00008F6E                 jmp     loc_907A
.text:00008F73 ; ---------------------------------------------------------------------------
.text:00008F73
.text:00008F73 loc_8F73:                               ; CODE XREF: WndProc(x,x,x,x)+2348j
.text:00008F73                                         ; WndProc(x,x,x,x)+2355j
.text:00008F73                 cmp     [ebp+lParam], 1
.text:00008F77                 jnz     short loc_8F7E
.text:00008F79                 jmp     loc_907A
.text:00008F7E ; ---------------------------------------------------------------------------
.text:00008F7E
.text:00008F7E loc_8F7E:                               ; CODE XREF: WndProc(x,x,x,x)+242Fj
.text:00008F7E                 cmp     [ebp+var_C], 0
.text:00008F82                 jz      short loc_8F9B
.text:00008F84                 cmp     [ebp+var_C], 3
.text:00008F88                 jnz     loc_9070
.text:00008F8E                 call    _is_alt_pressed
.text:00008F93                 test    eax, eax
.text:00008F95                 jnz     loc_9070
.text:00008F9B
.text:00008F9B loc_8F9B:                               ; CODE XREF: WndProc(x,x,x,x)+243Aj
.text:00008F9B                 mov     ecx, [ebp+var_A24]
.text:00008FA1                 shl     ecx, 1
.text:00008FA3                 mov     eax, [ebp+var_A14]
.text:00008FA9                 sub     eax, ecx
.text:00008FAB                 cdq
.text:00008FAC                 idiv    ds:_font_width
.text:00008FB2                 mov     [ebp+var_A1C], eax
.text:00008FB8                 cmp     [ebp+var_A1C], 1
.text:00008FBF                 jge     short loc_8FCB
.text:00008FC1                 mov     [ebp+var_A1C], 1
.text:00008FCB
.text:00008FCB loc_8FCB:                               ; CODE XREF: WndProc(x,x,x,x)+2477j
.text:00008FCB                 mov     edx, [ebp+var_A24]
.text:00008FD1                 shl     edx, 1
.text:00008FD3                 mov     eax, [ebp+var_A18]
.text:00008FD9                 sub     eax, edx
.text:00008FDB                 cdq
.text:00008FDC                 idiv    ds:_font_height
.text:00008FE2                 mov     [ebp+var_A20], eax
.text:00008FE8                 cmp     [ebp+var_A20], 1
.text:00008FEF                 jge     short loc_8FFB
.text:00008FF1                 mov     [ebp+var_A20], 1
.text:00008FFB
.text:00008FFB loc_8FFB:                               ; CODE XREF: WndProc(x,x,x,x)+24A7j
.text:00008FFB                 cmp     ds:_resizing, 0
.text:00009002                 jz      short loc_903F
.text:00009004                 mov     ds:?need_backend_resize@?1??WndProc@@9@9, 1 ; `WndProc'::`2'::need_backend_resize
.text:0000900E                 mov     eax, [ebp+var_A20]
.text:00009014                 push    eax
.text:00009015                 push    6Fh ; 'o'
.text:00009017                 mov     ecx, dword ptr ds:_conf
.text:0000901D                 push    ecx
.text:0000901E                 call    _conf_set_int
.text:00009023                 add     esp, 0Ch
.text:00009026                 mov     edx, [ebp+var_A1C]
.text:0000902C                 push    edx
.text:0000902D                 push    6Eh ; 'n'
.text:0000902F                 mov     eax, dword ptr ds:_conf
.text:00009034                 push    eax
.text:00009035                 call    _conf_set_int
.text:0000903A                 add     esp, 0Ch
.text:0000903D                 jmp     short loc_906E
.text:0000903F ; ---------------------------------------------------------------------------
.text:0000903F
.text:0000903F loc_903F:                               ; CODE XREF: WndProc(x,x,x,x)+24BAj
.text:0000903F                 push    5Bh ; '['
.text:00009041                 mov     ecx, dword ptr ds:_conf
.text:00009047                 push    ecx
.text:00009048                 call    _conf_get_int
.text:0000904D                 add     esp, 8
.text:00009050                 push    eax
.text:00009051                 mov     edx, [ebp+var_A1C]
.text:00009057                 push    edx
.text:00009058                 mov     eax, [ebp+var_A20]
.text:0000905E                 push    eax
.text:0000905F                 mov     ecx, dword ptr ds:_term
.text:00009065                 push    ecx
.text:00009066                 call    _term_size
.text:0000906B                 add     esp, 10h
.text:0000906E
.text:0000906E loc_906E:                               ; CODE XREF: WndProc(x,x,x,x)+24F5j
.text:0000906E                 jmp     short loc_907A
.text:00009070 ; ---------------------------------------------------------------------------
.text:00009070
.text:00009070 loc_9070:                               ; CODE XREF: WndProc(x,x,x,x)+2440j
.text:00009070                                         ; WndProc(x,x,x,x)+244Dj
.text:00009070                 push    0
.text:00009072                 call    _reset_window
.text:00009077                 add     esp, 4
.text:0000907A
.text:0000907A loc_907A:                               ; CODE XREF: WndProc(x,x,x,x)+21E5j
.text:0000907A                                         ; WndProc(x,x,x,x)+233Fj ...
.text:0000907A                 call    _sys_cursor_update
.text:0000907F                 xor     eax, eax
.text:00009081                 jmp     loc_9A43
.text:00009086 ; ---------------------------------------------------------------------------
.text:00009086
.text:00009086 $LN68:                                  ; CODE XREF: WndProc(x,x,x,x)+107j
.text:00009086                                         ; DATA XREF: .text:$LN312o
.text:00009086                 mov     edx, [ebp+lParam] ; jumptable 00006C4F case 6
.text:00009089                 and     edx, 0FFFFh
.text:0000908F                 movzx   eax, dx
.text:00009092                 mov     [ebp+var_C30], eax
.text:00009098                 cmp     [ebp+var_C30], 7 ; switch 8 cases
.text:0000909F                 ja      loc_91BD        ; jumptable 000090AB default case
.text:000090A5                 mov     ecx, [ebp+var_C30]
.text:000090AB                 jmp     ds:$LN317[ecx*4] ; switch jump
.text:000090B2 ; ---------------------------------------------------------------------------
.text:000090B2
.text:000090B2 $LN65:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:000090B2                                         ; DATA XREF: .text:$LN317o
.text:000090B2                 push    0               ; jumptable 000090AB case 7
.text:000090B4                 push    0FFFFFFFFh
.text:000090B6                 mov     edx, dword ptr ds:_term
.text:000090BC                 push    edx
.text:000090BD                 call    _term_scroll
.text:000090C2                 add     esp, 0Ch
.text:000090C5                 jmp     loc_91BD        ; jumptable 000090AB default case
.text:000090CA ; ---------------------------------------------------------------------------
.text:000090CA
.text:000090CA $LN64:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:000090CA                                         ; DATA XREF: .text:$LN317o
.text:000090CA                 push    0               ; jumptable 000090AB case 6
.text:000090CC                 push    1
.text:000090CE                 mov     eax, dword ptr ds:_term
.text:000090D3                 push    eax
.text:000090D4                 call    _term_scroll
.text:000090D9                 add     esp, 0Ch
.text:000090DC                 jmp     loc_91BD        ; jumptable 000090AB default case
.text:000090E1 ; ---------------------------------------------------------------------------
.text:000090E1
.text:000090E1 $LN63:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:000090E1                                         ; DATA XREF: .text:$LN317o
.text:000090E1                 push    1               ; jumptable 000090AB case 1
.text:000090E3                 push    0
.text:000090E5                 mov     ecx, dword ptr ds:_term
.text:000090EB                 push    ecx
.text:000090EC                 call    _term_scroll
.text:000090F1                 add     esp, 0Ch
.text:000090F4                 jmp     loc_91BD        ; jumptable 000090AB default case
.text:000090F9 ; ---------------------------------------------------------------------------
.text:000090F9
.text:000090F9 $LN62:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:000090F9                                         ; DATA XREF: .text:$LN317o
.text:000090F9                 push    0FFFFFFFFh      ; jumptable 000090AB case 0
.text:000090FB                 push    0
.text:000090FD                 mov     edx, dword ptr ds:_term
.text:00009103                 push    edx
.text:00009104                 call    _term_scroll
.text:00009109                 add     esp, 0Ch
.text:0000910C                 jmp     loc_91BD        ; jumptable 000090AB default case
.text:00009111 ; ---------------------------------------------------------------------------
.text:00009111
.text:00009111 $LN61:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:00009111                                         ; DATA XREF: .text:$LN317o
.text:00009111                 mov     eax, dword ptr ds:_term ; jumptable 000090AB case 3
.text:00009116                 mov     eax, [eax+128h]
.text:0000911C                 cdq
.text:0000911D                 sub     eax, edx
.text:0000911F                 sar     eax, 1
.text:00009121                 push    eax
.text:00009122                 push    0
.text:00009124                 mov     ecx, dword ptr ds:_term
.text:0000912A                 push    ecx
.text:0000912B                 call    _term_scroll
.text:00009130                 add     esp, 0Ch
.text:00009133                 jmp     loc_91BD        ; jumptable 000090AB default case
.text:00009138 ; ---------------------------------------------------------------------------
.text:00009138
.text:00009138 $LN60:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:00009138                                         ; DATA XREF: .text:$LN317o
.text:00009138                 mov     edx, dword ptr ds:_term ; jumptable 000090AB case 2
.text:0000913E                 mov     eax, [edx+128h]
.text:00009144                 neg     eax
.text:00009146                 cdq
.text:00009147                 sub     eax, edx
.text:00009149                 sar     eax, 1
.text:0000914B                 push    eax
.text:0000914C                 push    0
.text:0000914E                 mov     eax, dword ptr ds:_term
.text:00009153                 push    eax
.text:00009154                 call    _term_scroll
.text:00009159                 add     esp, 0Ch
.text:0000915C                 jmp     short loc_91BD  ; jumptable 000090AB default case
.text:0000915E ; ---------------------------------------------------------------------------
.text:0000915E
.text:0000915E $LN59:                                  ; CODE XREF: WndProc(x,x,x,x)+2563j
.text:0000915E                                         ; DATA XREF: .text:$LN317o
.text:0000915E                 mov     [ebp+var_A44.cbSize], 1Ch ; jumptable 000090AB cases 4,5
.text:00009168                 mov     [ebp+var_A44.fMask], 10h
.text:00009172                 mov     esi, esp
.text:00009174                 lea     ecx, [ebp+var_A44]
.text:0000917A                 push    ecx             ; lpsi
.text:0000917B                 push    1               ; nBar
.text:0000917D                 mov     edx, [ebp+hWnd]
.text:00009180                 push    edx             ; hwnd
.text:00009181                 call    dword ptr ds:__imp__GetScrollInfo@12 ; GetScrollInfo(x,x,x)
.text:00009187                 cmp     esi, esp
.text:00009189                 call    __RTC_CheckEsp
.text:0000918E                 test    eax, eax
.text:00009190                 jnz     short loc_91A6
.text:00009192                 mov     eax, [ebp+lParam]
.text:00009195                 shr     eax, 10h
.text:00009198                 and     eax, 0FFFFh
.text:0000919D                 movzx   ecx, ax
.text:000091A0                 mov     [ebp+var_A44.nTrackPos], ecx
.text:000091A6
.text:000091A6 loc_91A6:                               ; CODE XREF: WndProc(x,x,x,x)+2648j
.text:000091A6                 mov     edx, [ebp+var_A44.nTrackPos]
.text:000091AC                 push    edx
.text:000091AD                 push    1
.text:000091AF                 mov     eax, dword ptr ds:_term
.text:000091B4                 push    eax
.text:000091B5                 call    _term_scroll
.text:000091BA                 add     esp, 0Ch
.text:000091BD
.text:000091BD loc_91BD:                               ; CODE XREF: WndProc(x,x,x,x)+2557j
.text:000091BD                                         ; WndProc(x,x,x,x)+257Dj ...
.text:000091BD                 jmp     loc_9A24        ; jumptable 000090AB default case
.text:000091C2 ; ---------------------------------------------------------------------------
.text:000091C2
.text:000091C2 loc_91C2:                               ; CODE XREF: WndProc(x,x,x,x)+196j
.text:000091C2                 mov     ecx, [ebp+lParam]
.text:000091C5                 cmp     ecx, [ebp+hWnd]
.text:000091C8                 jz      short loc_922B
.text:000091CA                 cmp     ds:_pal, 0
.text:000091D1                 jz      short loc_922B
.text:000091D3                 push    0
.text:000091D5                 call    _get_ctx
.text:000091DA                 add     esp, 4
.text:000091DD                 mov     [ebp+var_A4C], eax
.text:000091E3                 cmp     [ebp+var_A4C], 0
.text:000091EA                 jz      short loc_922B
.text:000091EC                 mov     esi, esp
.text:000091EE                 mov     edx, [ebp+var_A4C]
.text:000091F4                 push    edx             ; hdc
.text:000091F5                 call    dword ptr ds:__imp__RealizePalette@4 ; RealizePalette(x)
.text:000091FB                 cmp     esi, esp
.text:000091FD                 call    __RTC_CheckEsp
.text:00009202                 test    eax, eax
.text:00009204                 jbe     short loc_921C
.text:00009206                 mov     esi, esp
.text:00009208                 mov     eax, [ebp+var_A4C]
.text:0000920E                 push    eax             ; hdc
.text:0000920F                 call    dword ptr ds:__imp__UpdateColors@4 ; UpdateColors(x)
.text:00009215                 cmp     esi, esp
.text:00009217                 call    __RTC_CheckEsp
.text:0000921C
.text:0000921C loc_921C:                               ; CODE XREF: WndProc(x,x,x,x)+26BCj
.text:0000921C                 mov     ecx, [ebp+var_A4C]
.text:00009222                 push    ecx             ; hdc
.text:00009223                 call    _free_ctx
.text:00009228                 add     esp, 4
.text:0000922B
.text:0000922B loc_922B:                               ; CODE XREF: WndProc(x,x,x,x)+2680j
.text:0000922B                                         ; WndProc(x,x,x,x)+2689j ...
.text:0000922B                 jmp     loc_9A24
.text:00009230 ; ---------------------------------------------------------------------------
.text:00009230
.text:00009230 loc_9230:                               ; CODE XREF: WndProc(x,x,x,x)+186j
.text:00009230                 cmp     ds:_pal, 0
.text:00009237                 jz      short loc_929B
.text:00009239                 push    0
.text:0000923B                 call    _get_ctx
.text:00009240                 add     esp, 4
.text:00009243                 mov     [ebp+var_A50], eax
.text:00009249                 cmp     [ebp+var_A50], 0
.text:00009250                 jz      short loc_929B
.text:00009252                 mov     esi, esp
.text:00009254                 mov     edx, [ebp+var_A50]
.text:0000925A                 push    edx             ; hdc
.text:0000925B                 call    dword ptr ds:__imp__RealizePalette@4 ; RealizePalette(x)
.text:00009261                 cmp     esi, esp
.text:00009263                 call    __RTC_CheckEsp
.text:00009268                 test    eax, eax
.text:0000926A                 jbe     short loc_9282
.text:0000926C                 mov     esi, esp
.text:0000926E                 mov     eax, [ebp+var_A50]
.text:00009274                 push    eax             ; hdc
.text:00009275                 call    dword ptr ds:__imp__UpdateColors@4 ; UpdateColors(x)
.text:0000927B                 cmp     esi, esp
.text:0000927D                 call    __RTC_CheckEsp
.text:00009282
.text:00009282 loc_9282:                               ; CODE XREF: WndProc(x,x,x,x)+2722j
.text:00009282                 mov     ecx, [ebp+var_A50]
.text:00009288                 push    ecx             ; hdc
.text:00009289                 call    _free_ctx
.text:0000928E                 add     esp, 4
.text:00009291                 mov     eax, 1
.text:00009296                 jmp     loc_9A43
.text:0000929B ; ---------------------------------------------------------------------------
.text:0000929B
.text:0000929B loc_929B:                               ; CODE XREF: WndProc(x,x,x,x)+26EFj
.text:0000929B                                         ; WndProc(x,x,x,x)+2708j
.text:0000929B                 xor     eax, eax
.text:0000929D                 jmp     loc_9A43
.text:000092A2 ; ---------------------------------------------------------------------------
.text:000092A2
.text:000092A2 $LN49_0:                                ; CODE XREF: WndProc(x,x,x,x)+46j
.text:000092A2                                         ; WndProc(x,x,x,x)+C0j
.text:000092A2                                         ; DATA XREF: ...
.text:000092A2                 mov     edx, [ebp+arg_C] ; jumptable 00006C08 cases 2,3
.text:000092A5                 push    edx
.text:000092A6                 call    _noise_ultralight
.text:000092AB                 add     esp, 4
.text:000092AE                 cmp     [ebp+lParam], 0E5h ; 's'
.text:000092B5                 jnz     short loc_930D
.text:000092B7                 cmp     [ebp+arg_4], 100h
.text:000092BE                 jnz     short loc_9303
.text:000092C0                 mov     eax, [ebp+hWnd]
.text:000092C3                 mov     [ebp+Msg.hwnd], eax
.text:000092C9                 mov     [ebp+Msg.message], 100h
.text:000092D3                 mov     ecx, [ebp+lParam]
.text:000092D6                 mov     [ebp+Msg.wParam], ecx
.text:000092DC                 mov     edx, [ebp+arg_C]
.text:000092DF                 and     edx, 0DFFFh
.text:000092E5                 mov     [ebp+Msg.lParam], edx
.text:000092EB                 mov     esi, esp
.text:000092ED                 lea     eax, [ebp+Msg]
.text:000092F3                 push    eax             ; lpMsg
.text:000092F4                 call    dword ptr ds:__imp__TranslateMessage@4 ; TranslateMessage(x)
.text:000092FA                 cmp     esi, esp
.text:000092FC                 call    __RTC_CheckEsp
.text:00009301                 jmp     short loc_9308
.text:00009303 ; ---------------------------------------------------------------------------
.text:00009303
.text:00009303 loc_9303:                               ; CODE XREF: WndProc(x,x,x,x)+2776j
.text:00009303                 jmp     loc_9A24
.text:00009308 ; ---------------------------------------------------------------------------
.text:00009308
.text:00009308 loc_9308:                               ; CODE XREF: WndProc(x,x,x,x)+27B9j
.text:00009308                 jmp     loc_93A3
.text:0000930D ; ---------------------------------------------------------------------------
.text:0000930D
.text:0000930D loc_930D:                               ; CODE XREF: WndProc(x,x,x,x)+276Dj
.text:0000930D                 lea     ecx, [ebp+var_A68]
.text:00009313                 push    ecx             ; int
.text:00009314                 mov     edx, [ebp+arg_C]
.text:00009317                 push    edx             ; int
.text:00009318                 mov     eax, [ebp+lParam]
.text:0000931B                 push    eax             ; uVirtKey
.text:0000931C                 mov     ecx, [ebp+arg_4]
.text:0000931F                 push    ecx             ; int
.text:00009320                 call    _TranslateKey
.text:00009325                 add     esp, 10h
.text:00009328                 mov     [ebp+var_A70], eax
.text:0000932E                 cmp     [ebp+var_A70], 0FFFFFFFFh
.text:00009335                 jnz     short loc_935B
.text:00009337                 mov     esi, esp
.text:00009339                 mov     edx, [ebp+arg_C]
.text:0000933C                 push    edx             ; lParam
.text:0000933D                 mov     eax, [ebp+lParam]
.text:00009340                 push    eax             ; wParam
.text:00009341                 mov     ecx, [ebp+arg_4]
.text:00009344                 push    ecx             ; Msg
.text:00009345                 mov     edx, [ebp+hWnd]
.text:00009348                 push    edx             ; hWnd
.text:00009349                 call    dword ptr ds:__imp__DefWindowProcA@16 ; DefWindowProcA(x,x,x,x)
.text:0000934F                 cmp     esi, esp
.text:00009351                 call    __RTC_CheckEsp
.text:00009356                 jmp     loc_9A43
.text:0000935B ; ---------------------------------------------------------------------------
.text:0000935B
.text:0000935B loc_935B:                               ; CODE XREF: WndProc(x,x,x,x)+27EDj
.text:0000935B                 cmp     [ebp+var_A70], 0
.text:00009362                 jz      short loc_93A3
.text:00009364                 mov     eax, dword ptr ds:_term
.text:00009369                 push    eax
.text:0000936A                 call    _term_seen_key_event
.text:0000936F                 add     esp, 4
.text:00009372                 cmp     ds:_ldisc, 0
.text:00009379                 jz      short loc_9399
.text:0000937B                 push    1
.text:0000937D                 mov     ecx, [ebp+var_A70]
.text:00009383                 push    ecx
.text:00009384                 lea     edx, [ebp+var_A68]
.text:0000938A                 push    edx
.text:0000938B                 mov     eax, ds:_ldisc
.text:00009390                 push    eax
.text:00009391                 call    _ldisc_send
.text:00009396                 add     esp, 10h
.text:00009399
.text:00009399 loc_9399:                               ; CODE XREF: WndProc(x,x,x,x)+2831j
.text:00009399                 push    0
.text:0000939B                 call    _show_mouseptr
.text:000093A0                 add     esp, 4
.text:000093A3
.text:000093A3 loc_93A3:                               ; CODE XREF: WndProc(x,x,x,x):loc_9308j
.text:000093A3                                         ; WndProc(x,x,x,x)+281Aj
.text:000093A3                 xor     eax, eax
.text:000093A5                 jmp     loc_9A43
.text:000093AA ; ---------------------------------------------------------------------------
.text:000093AA
.text:000093AA $LN41:                                  ; CODE XREF: WndProc(x,x,x,x)+78j
.text:000093AA                                         ; DATA XREF: .text:$LN310o
.text:000093AA                 mov     ecx, [ebp+arg_C] ; jumptable 00006BC0 case 80
.text:000093AD                 push    ecx
.text:000093AE                 call    _set_input_locale
.text:000093B3                 add     esp, 4
.text:000093B6                 call    _sys_cursor_update
.text:000093BB                 jmp     loc_9A24
.text:000093C0 ; ---------------------------------------------------------------------------
.text:000093C0
.text:000093C0 loc_93C0:                               ; CODE XREF: WndProc(x,x,x,x)+95j
.text:000093C0                 mov     edx, [ebp+hWnd]
.text:000093C3                 push    edx             ; HWND
.text:000093C4                 call    _ImmGetContext@4 ; ImmGetContext(x)
.text:000093C9                 mov     [ebp+var_A98], eax
.text:000093CF                 push    offset _lfont   ; lplf
.text:000093D4                 mov     eax, [ebp+var_A98]
.text:000093DA                 push    eax             ; HIMC
.text:000093DB                 call    _ImmSetCompositionFontA@8 ; ImmSetCompositionFontA(x,x)
.text:000093E0                 mov     ecx, [ebp+var_A98]
.text:000093E6                 push    ecx             ; HIMC
.text:000093E7                 mov     edx, [ebp+hWnd]
.text:000093EA                 push    edx             ; HWND
.text:000093EB                 call    _ImmReleaseContext@8 ; ImmReleaseContext(x,x)
.text:000093F0                 jmp     loc_9A24
.text:000093F5 ; ---------------------------------------------------------------------------
.text:000093F5
.text:000093F5 $LN39:                                  ; CODE XREF: WndProc(x,x,x,x)+107j
.text:000093F5                                         ; DATA XREF: .text:$LN312o
.text:000093F5                 cmp     dword ptr ds:_osVersion+10h, 1 ; jumptable 00006C4F case 0
.text:000093FC                 jz      short loc_9407
.text:000093FE                 cmp     dword ptr ds:_osVersion+10h, 0
.text:00009405                 jnz     short loc_940C
.text:00009407
.text:00009407 loc_9407:                               ; CODE XREF: WndProc(x,x,x,x)+28B4j
.text:00009407                 jmp     loc_9A24
.text:0000940C ; ---------------------------------------------------------------------------
.text:0000940C
.text:0000940C loc_940C:                               ; CODE XREF: WndProc(x,x,x,x)+28BDj
.text:0000940C                 mov     eax, [ebp+arg_C]
.text:0000940F                 and     eax, 800h
.text:00009414                 jnz     short loc_941B
.text:00009416                 jmp     loc_9A24
.text:0000941B ; ---------------------------------------------------------------------------
.text:0000941B
.text:0000941B loc_941B:                               ; CODE XREF: WndProc(x,x,x,x)+28CCj
.text:0000941B                 mov     ecx, [ebp+hWnd]
.text:0000941E                 push    ecx             ; HWND
.text:0000941F                 call    _ImmGetContext@4 ; ImmGetContext(x)
.text:00009424                 mov     [ebp+var_A9C], eax
.text:0000942A                 push    0               ; dwBufLen
.text:0000942C                 push    0               ; lpBuf
.text:0000942E                 push    800h            ; DWORD
.text:00009433                 mov     edx, [ebp+var_A9C]
.text:00009439                 push    edx             ; HIMC
.text:0000943A                 call    _ImmGetCompositionStringW@16 ; ImmGetCompositionStringW(x,x,x,x)
.text:0000943F                 mov     [ebp+dwBufLen], eax
.text:00009445                 cmp     [ebp+dwBufLen], 0
.text:0000944C                 jle     loc_95B5
.text:00009452                 push    1
.text:00009454                 mov     eax, [ebp+dwBufLen]
.text:0000945A                 push    eax
.text:0000945B                 call    _safemalloc
.text:00009460                 add     esp, 8
.text:00009463                 mov     [ebp+lpBuf], eax
.text:00009469                 mov     ecx, [ebp+dwBufLen]
.text:0000946F                 push    ecx             ; dwBufLen
.text:00009470                 mov     edx, [ebp+lpBuf]
.text:00009476                 push    edx             ; lpBuf
.text:00009477                 push    800h            ; DWORD
.text:0000947C                 mov     eax, [ebp+var_A9C]
.text:00009482                 push    eax             ; HIMC
.text:00009483                 call    _ImmGetCompositionStringW@16 ; ImmGetCompositionStringW(x,x,x,x)
.text:00009488                 mov     ecx, dword ptr ds:_term
.text:0000948E                 push    ecx
.text:0000948F                 call    _term_seen_key_event
.text:00009494                 add     esp, 4
.text:00009497                 cmp     ds:_ldisc, 0
.text:0000949E                 jz      loc_95A6
.text:000094A4                 mov     [ebp+var_AA8], 0
.text:000094AE                 jmp     short loc_94BF
.text:000094B0 ; ---------------------------------------------------------------------------
.text:000094B0
.text:000094B0 loc_94B0:                               ; CODE XREF: WndProc(x,x,x,x)+2A34j
.text:000094B0                                         ; WndProc(x,x,x,x)+2A59j
.text:000094B0                 mov     edx, [ebp+var_AA8]
.text:000094B6                 add     edx, 2
.text:000094B9                 mov     [ebp+var_AA8], edx
.text:000094BF
.text:000094BF loc_94BF:                               ; CODE XREF: WndProc(x,x,x,x)+2966j
.text:000094BF                 mov     eax, [ebp+var_AA8]
.text:000094C5                 cmp     eax, [ebp+dwBufLen]
.text:000094CB                 jge     loc_95A6
.text:000094D1                 mov     ecx, [ebp+lpBuf]
.text:000094D7                 add     ecx, [ebp+var_AA8]
.text:000094DD                 mov     dx, [ecx]
.text:000094E0                 mov     [ebp+var_AAC], dx
.text:000094E7                 movzx   eax, [ebp+var_AAC]
.text:000094EE                 cmp     eax, 0D800h
.text:000094F3                 jl      loc_9581
.text:000094F9                 movzx   ecx, [ebp+var_AAC]
.text:00009500                 cmp     ecx, 0DBFFh
.text:00009506                 jg      short loc_9581
.text:00009508                 mov     edx, [ebp+var_AA8]
.text:0000950E                 add     edx, 2
.text:00009511                 cmp     edx, [ebp+dwBufLen]
.text:00009517                 jge     short loc_9581
.text:00009519                 mov     eax, [ebp+lpBuf]
.text:0000951F                 add     eax, [ebp+var_AA8]
.text:00009525                 mov     cx, [eax+2]
.text:00009529                 mov     [ebp+var_AB0], cx
.text:00009530                 movzx   edx, [ebp+var_AB0]
.text:00009537                 cmp     edx, 0DC00h
.text:0000953D                 jl      short loc_9581
.text:0000953F                 movzx   eax, [ebp+var_AB0]
.text:00009546                 cmp     eax, 0DFFFh
.text:0000954B                 jg      short loc_9581
.text:0000954D                 push    1
.text:0000954F                 push    2
.text:00009551                 mov     ecx, [ebp+lpBuf]
.text:00009557                 add     ecx, [ebp+var_AA8]
.text:0000955D                 push    ecx
.text:0000955E                 mov     edx, ds:_ldisc
.text:00009564                 push    edx
.text:00009565                 call    _luni_send
.text:0000956A                 add     esp, 10h
.text:0000956D                 mov     eax, [ebp+var_AA8]
.text:00009573                 add     eax, 2
.text:00009576                 mov     [ebp+var_AA8], eax
.text:0000957C                 jmp     loc_94B0
.text:00009581 ; ---------------------------------------------------------------------------
.text:00009581
.text:00009581 loc_9581:                               ; CODE XREF: WndProc(x,x,x,x)+29ABj
.text:00009581                                         ; WndProc(x,x,x,x)+29BEj ...
.text:00009581                 push    1
.text:00009583                 push    1
.text:00009585                 mov     ecx, [ebp+lpBuf]
.text:0000958B                 add     ecx, [ebp+var_AA8]
.text:00009591                 push    ecx
.text:00009592                 mov     edx, ds:_ldisc
.text:00009598                 push    edx
.text:00009599                 call    _luni_send
.text:0000959E                 add     esp, 10h
.text:000095A1                 jmp     loc_94B0
.text:000095A6 ; ---------------------------------------------------------------------------
.text:000095A6
.text:000095A6 loc_95A6:                               ; CODE XREF: WndProc(x,x,x,x)+2956j
.text:000095A6                                         ; WndProc(x,x,x,x)+2983j
.text:000095A6                 mov     eax, [ebp+lpBuf]
.text:000095AC                 push    eax             ; Memory
.text:000095AD                 call    _free
.text:000095B2                 add     esp, 4
.text:000095B5
.text:000095B5 loc_95B5:                               ; CODE XREF: WndProc(x,x,x,x)+2904j
.text:000095B5                 mov     ecx, [ebp+var_A9C]
.text:000095BB                 push    ecx             ; HIMC
.text:000095BC                 mov     edx, [ebp+hWnd]
.text:000095BF                 push    edx             ; HWND
.text:000095C0                 call    _ImmReleaseContext@8 ; ImmReleaseContext(x,x)
.text:000095C5                 mov     eax, 1
.text:000095CA                 jmp     loc_9A43
.text:000095CF ; ---------------------------------------------------------------------------
.text:000095CF
.text:000095CF $LN28:                                  ; CODE XREF: WndProc(x,x,x,x)+159j
.text:000095CF                                         ; DATA XREF: .text:$LN313o
.text:000095CF                 mov     eax, [ebp+lParam] ; jumptable 00006CA1 case 133
.text:000095D2                 and     eax, 0FF00h
.text:000095D7                 jz      short loc_9627
.text:000095D9                 mov     cl, byte ptr [ebp+lParam]
.text:000095DC                 mov     [ebp+var_AB7], cl
.text:000095E2                 mov     edx, [ebp+lParam]
.text:000095E5                 shr     edx, 8
.text:000095E8                 mov     [ebp+var_AB8], dl
.text:000095EE                 mov     eax, dword ptr ds:_term
.text:000095F3                 push    eax
.text:000095F4                 call    _term_seen_key_event
.text:000095F9                 add     esp, 4
.text:000095FC                 cmp     ds:_ldisc, 0
.text:00009603                 jz      short loc_9625
.text:00009605                 push    1
.text:00009607                 push    2
.text:00009609                 lea     ecx, [ebp+var_AB8]
.text:0000960F                 push    ecx
.text:00009610                 mov     edx, ds:_kbd_codepage
.text:00009616                 push    edx
.text:00009617                 mov     eax, ds:_ldisc
.text:0000961C                 push    eax
.text:0000961D                 call    _lpage_send
.text:00009622                 add     esp, 14h
.text:00009625
.text:00009625 loc_9625:                               ; CODE XREF: WndProc(x,x,x,x)+2ABBj
.text:00009625                 jmp     short loc_9669
.text:00009627 ; ---------------------------------------------------------------------------
.text:00009627
.text:00009627 loc_9627:                               ; CODE XREF: WndProc(x,x,x,x)+2A8Fj
.text:00009627                 mov     cl, byte ptr [ebp+lParam]
.text:0000962A                 mov     [ebp+var_AC1], cl
.text:00009630                 mov     edx, dword ptr ds:_term
.text:00009636                 push    edx
.text:00009637                 call    _term_seen_key_event
.text:0000963C                 add     esp, 4
.text:0000963F                 cmp     ds:_ldisc, 0
.text:00009646                 jz      short loc_9669
.text:00009648                 push    1
.text:0000964A                 push    1
.text:0000964C                 lea     eax, [ebp+var_AC1]
.text:00009652                 push    eax
.text:00009653                 mov     ecx, ds:_kbd_codepage
.text:00009659                 push    ecx
.text:0000965A                 mov     edx, ds:_ldisc
.text:00009660                 push    edx
.text:00009661                 call    _lpage_send
.text:00009666                 add     esp, 14h
.text:00009669
.text:00009669 loc_9669:                               ; CODE XREF: WndProc(x,x,x,x):loc_9625j
.text:00009669                                         ; WndProc(x,x,x,x)+2AFEj
.text:00009669                 xor     eax, eax
.text:0000966B                 jmp     loc_9A43
.text:00009670 ; ---------------------------------------------------------------------------
.text:00009670
.text:00009670 $LN23:                                  ; CODE XREF: WndProc(x,x,x,x)+C0j
.text:00009670                                         ; DATA XREF: .text:$LN311o
.text:00009670                 mov     al, byte ptr [ebp+lParam] ; jumptable 00006C08 cases 0,4
.text:00009673                 mov     [ebp+var_ACD], al
.text:00009679                 mov     ecx, dword ptr ds:_term
.text:0000967F                 push    ecx
.text:00009680                 call    _term_seen_key_event
.text:00009685                 add     esp, 4
.text:00009688                 cmp     ds:_ldisc, 0
.text:0000968F                 jz      short loc_96AC
.text:00009691                 push    1
.text:00009693                 push    1
.text:00009695                 lea     edx, [ebp+var_ACD]
.text:0000969B                 push    edx
.text:0000969C                 push    0
.text:0000969E                 mov     eax, ds:_ldisc
.text:000096A3                 push    eax
.text:000096A4                 call    _lpage_send
.text:000096A9                 add     esp, 14h
.text:000096AC
.text:000096AC loc_96AC:                               ; CODE XREF: WndProc(x,x,x,x)+2B47j
.text:000096AC                 xor     eax, eax
.text:000096AE                 jmp     loc_9A43
.text:000096B3 ; ---------------------------------------------------------------------------
.text:000096B3
.text:000096B3 $LN21:                                  ; CODE XREF: WndProc(x,x,x,x)+78j
.text:000096B3                                         ; DATA XREF: .text:$LN310o
.text:000096B3                 push    81h ; 'ü'       ; jumptable 00006BC0 case 20
.text:000096B8                 mov     ecx, dword ptr ds:_conf
.text:000096BE                 push    ecx
.text:000096BF                 call    _conf_get_int
.text:000096C4                 add     esp, 8
.text:000096C7                 test    eax, eax
.text:000096C9                 jz      short loc_96E4
.text:000096CB                 call    _systopalette
.text:000096D0                 call    _init_palette
.text:000096D5                 mov     edx, dword ptr ds:_term
.text:000096DB                 push    edx
.text:000096DC                 call    _term_invalidate
.text:000096E1                 add     esp, 4
.text:000096E4
.text:000096E4 loc_96E4:                               ; CODE XREF: WndProc(x,x,x,x)+2B81j
.text:000096E4                 jmp     loc_9A24
.text:000096E9 ; ---------------------------------------------------------------------------
.text:000096E9
.text:000096E9 $LN19_0:                                ; CODE XREF: WndProc(x,x,x,x)+1C6j
.text:000096E9                                         ; DATA XREF: .text:$LN314o
.text:000096E9                 mov     eax, [ebp+arg_C] ; jumptable 00006D0E case 1
.text:000096EC                 mov     [ebp+var_AD8], eax
.text:000096F2                 mov     esi, esp
.text:000096F4                 mov     ecx, [ebp+var_AD8]
.text:000096FA                 mov     edx, [ecx+0Ch]
.text:000096FD                 push    edx
.text:000096FE                 mov     eax, [ebp+var_AD8]
.text:00009704                 mov     ecx, [eax+8]
.text:00009707                 push    ecx
.text:00009708                 mov     edx, [ebp+var_AD8]
.text:0000970E                 mov     eax, [edx+4]
.text:00009711                 push    eax
.text:00009712                 mov     ecx, [ebp+var_AD8]
.text:00009718                 mov     edx, [ecx]
.text:0000971A                 call    edx
.text:0000971C                 add     esp, 0Ch
.text:0000971F                 cmp     esi, esp
.text:00009721                 call    __RTC_CheckEsp
.text:00009726                 mov     eax, [ebp+var_AD8]
.text:0000972C                 push    eax
.text:0000972D                 call    _safefree
.text:00009732                 add     esp, 4
.text:00009735                 xor     eax, eax
.text:00009737                 jmp     loc_9A43
.text:0000973C ; ---------------------------------------------------------------------------
.text:0000973C
.text:0000973C $LN18_0:                                ; CODE XREF: WndProc(x,x,x,x)+1C6j
.text:0000973C                                         ; DATA XREF: .text:$LN314o
.text:0000973C                 mov     ecx, [ebp+lParam] ; jumptable 00006D0E case 3
.text:0000973F                 push    ecx             ; int
.text:00009740                 mov     edx, [ebp+arg_C]
.text:00009743                 push    edx             ; hMem
.text:00009744                 call    _process_clipdata
.text:00009749                 add     esp, 8
.text:0000974C                 test    eax, eax
.text:0000974E                 jz      short loc_975E
.text:00009750                 mov     eax, dword ptr ds:_term
.text:00009755                 push    eax
.text:00009756                 call    _term_do_paste
.text:0000975B                 add     esp, 4
.text:0000975E
.text:0000975E loc_975E:                               ; CODE XREF: WndProc(x,x,x,x)+2C06j
.text:0000975E                 xor     eax, eax
.text:00009760                 jmp     loc_9A43
.text:00009765 ; ---------------------------------------------------------------------------
.text:00009765
.text:00009765 $LN16_0:                                ; CODE XREF: WndProc(x,x,x,x)+65j
.text:00009765                                         ; WndProc(x,x,x,x)+78j ...
.text:00009765                 mov     ecx, [ebp+arg_4] ; jumptable 00006BC0 default case
.text:00009768                 cmp     ecx, _wm_mousewheel
.text:0000976E                 jz      short loc_977D
.text:00009770                 cmp     [ebp+arg_4], 20Ah
.text:00009777                 jnz     loc_9A24
.text:0000977D
.text:0000977D loc_977D:                               ; CODE XREF: WndProc(x,x,x,x)+2C26j
.text:0000977D                 mov     [ebp+var_ADC], 0
.text:00009787                 mov     [ebp+var_AE0], 0
.text:00009791                 cmp     [ebp+arg_4], 20Ah
.text:00009798                 jnz     short loc_97DF
.text:0000979A                 mov     edx, [ebp+lParam]
.text:0000979D                 shr     edx, 10h
.text:000097A0                 and     edx, 0FFFFh
.text:000097A6                 movsx   eax, dx
.text:000097A9                 add     eax, ds:_wheel_accumulator
.text:000097AF                 mov     ds:_wheel_accumulator, eax
.text:000097B4                 mov     ecx, [ebp+lParam]
.text:000097B7                 and     ecx, 0FFFFh
.text:000097BD                 movzx   edx, cx
.text:000097C0                 and     edx, 4
.text:000097C3                 mov     [ebp+var_ADC], edx
.text:000097C9                 mov     eax, [ebp+lParam]
.text:000097CC                 and     eax, 0FFFFh
.text:000097D1                 movzx   ecx, ax
.text:000097D4                 and     ecx, 8
.text:000097D7                 mov     [ebp+var_AE0], ecx
.text:000097DD                 jmp     short loc_982E
.text:000097DF ; ---------------------------------------------------------------------------
.text:000097DF
.text:000097DF loc_97DF:                               ; CODE XREF: WndProc(x,x,x,x)+2C50j
.text:000097DF                 mov     edx, ds:_wheel_accumulator
.text:000097E5                 add     edx, [ebp+lParam]
.text:000097E8                 mov     ds:_wheel_accumulator, edx
.text:000097EE                 mov     esi, esp
.text:000097F0                 lea     eax, [ebp+KeyState]
.text:000097F6                 push    eax             ; lpKeyState
.text:000097F7                 call    dword ptr ds:__imp__GetKeyboardState@4 ; GetKeyboardState(x)
.text:000097FD                 cmp     esi, esp
.text:000097FF                 call    __RTC_CheckEsp
.text:00009804                 test    eax, eax
.text:00009806                 jz      short loc_982E
.text:00009808                 movzx   ecx, [ebp+var_BD4]
.text:0000980F                 and     ecx, 80h
.text:00009815                 mov     [ebp+var_ADC], ecx
.text:0000981B                 movzx   edx, [ebp+var_BD3]
.text:00009822                 and     edx, 80h
.text:00009828                 mov     [ebp+var_AE0], edx
.text:0000982E
.text:0000982E loc_982E:                               ; CODE XREF: WndProc(x,x,x,x)+2C95j
.text:0000982E                                         ; WndProc(x,x,x,x)+2CBEj ...
.text:0000982E                 mov     eax, ds:_wheel_accumulator
.text:00009833                 push    eax             ; X
.text:00009834                 call    _abs
.text:00009839                 add     esp, 4
.text:0000983C                 cmp     eax, 78h ; 'x'
.text:0000983F                 jl      loc_9A20
.text:00009845                 cmp     ds:_wheel_accumulator, 0
.text:0000984C                 jle     short loc_9869
.text:0000984E                 mov     [ebp+var_BEC], 7
.text:00009858                 mov     ecx, ds:_wheel_accumulator
.text:0000985E                 sub     ecx, 78h ; 'x'
.text:00009861                 mov     ds:_wheel_accumulator, ecx
.text:00009867                 jmp     short loc_9892
.text:00009869 ; ---------------------------------------------------------------------------
.text:00009869
.text:00009869 loc_9869:                               ; CODE XREF: WndProc(x,x,x,x)+2D04j
.text:00009869                 cmp     ds:_wheel_accumulator, 0
.text:00009870                 jge     short loc_988D
.text:00009872                 mov     [ebp+var_BEC], 8
.text:0000987C                 mov     edx, ds:_wheel_accumulator
.text:00009882                 add     edx, 78h ; 'x'
.text:00009885                 mov     ds:_wheel_accumulator, edx
.text:0000988B                 jmp     short loc_9892
.text:0000988D ; ---------------------------------------------------------------------------
.text:0000988D
.text:0000988D loc_988D:                               ; CODE XREF: WndProc(x,x,x,x)+2D28j
.text:0000988D                 jmp     loc_9A20
.text:00009892 ; ---------------------------------------------------------------------------
.text:00009892
.text:00009892 loc_9892:                               ; CODE XREF: WndProc(x,x,x,x)+2D1Fj
.text:00009892                                         ; WndProc(x,x,x,x)+2D43j
.text:00009892                 cmp     ds:_send_raw_mouse, 0
.text:00009899                 jz      loc_99C8
.text:0000989F                 push    89h ; 'ë'
.text:000098A4                 mov     eax, dword ptr ds:_conf
.text:000098A9                 push    eax
.text:000098AA                 call    _conf_get_int
.text:000098AF                 add     esp, 8
.text:000098B2                 test    eax, eax
.text:000098B4                 jz      short loc_98C3
.text:000098B6                 cmp     [ebp+var_ADC], 0
.text:000098BD                 jnz     loc_99C8
.text:000098C3
.text:000098C3 loc_98C3:                               ; CODE XREF: WndProc(x,x,x,x)+2D6Cj
.text:000098C3                 mov     ecx, [ebp+arg_C]
.text:000098C6                 and     ecx, 0FFFFh
.text:000098CC                 movsx   edx, cx
.text:000098CF                 mov     [ebp+var_BF8.x], edx
.text:000098D5                 mov     eax, [ebp+arg_C]
.text:000098D8                 shr     eax, 10h
.text:000098DB                 and     eax, 0FFFFh
.text:000098E0                 movsx   ecx, ax
.text:000098E3                 mov     [ebp+var_BF8.y], ecx
.text:000098E9                 mov     esi, esp
.text:000098EB                 lea     edx, [ebp+var_BF8]
.text:000098F1                 push    edx             ; lpPoint
.text:000098F2                 mov     eax, [ebp+hWnd]
.text:000098F5                 push    eax             ; hWnd
.text:000098F6                 call    dword ptr ds:__imp__ScreenToClient@8 ; ScreenToClient(x,x)
.text:000098FC                 cmp     esi, esp
.text:000098FE                 call    __RTC_CheckEsp
.text:00009903                 test    eax, eax
.text:00009905                 jz      loc_99C6
.text:0000990B                 cmp     [ebp+var_BF8.y], 0
.text:00009912                 jge     short loc_992B
.text:00009914                 mov     ecx, [ebp+var_BF8.y]
.text:0000991A                 sub     ecx, ds:_font_height
.text:00009920                 add     ecx, 1
.text:00009923                 mov     [ebp+var_C34], ecx
.text:00009929                 jmp     short loc_9937
.text:0000992B ; ---------------------------------------------------------------------------
.text:0000992B
.text:0000992B loc_992B:                               ; CODE XREF: WndProc(x,x,x,x)+2DCAj
.text:0000992B                 mov     edx, [ebp+var_BF8.y]
.text:00009931                 mov     [ebp+var_C34], edx
.text:00009937
.text:00009937 loc_9937:                               ; CODE XREF: WndProc(x,x,x,x)+2DE1j
.text:00009937                 cmp     [ebp+var_BF8.x], 0
.text:0000993E                 jge     short loc_9957
.text:00009940                 mov     eax, [ebp+var_BF8.x]
.text:00009946                 sub     eax, ds:_font_width
.text:0000994C                 add     eax, 1
.text:0000994F                 mov     [ebp+var_C38], eax
.text:00009955                 jmp     short loc_9963
.text:00009957 ; ---------------------------------------------------------------------------
.text:00009957
.text:00009957 loc_9957:                               ; CODE XREF: WndProc(x,x,x,x)+2DF6j
.text:00009957                 mov     ecx, [ebp+var_BF8.x]
.text:0000995D                 mov     [ebp+var_C38], ecx
.text:00009963
.text:00009963 loc_9963:                               ; CODE XREF: WndProc(x,x,x,x)+2E0Dj
.text:00009963                 call    _is_alt_pressed
.text:00009968                 push    eax
.text:00009969                 mov     edx, [ebp+var_AE0]
.text:0000996F                 push    edx
.text:00009970                 mov     eax, [ebp+var_ADC]
.text:00009976                 push    eax
.text:00009977                 mov     eax, [ebp+var_C34]
.text:0000997D                 sub     eax, ds:_offset_height
.text:00009983                 cdq
.text:00009984                 idiv    ds:_font_height
.text:0000998A                 push    eax
.text:0000998B                 mov     eax, [ebp+var_C38]
.text:00009991                 sub     eax, ds:_offset_width
.text:00009997                 cdq
.text:00009998                 idiv    ds:_font_width
.text:0000999E                 push    eax
.text:0000999F                 push    1
.text:000099A1                 mov     ecx, [ebp+var_BEC]
.text:000099A7                 push    ecx
.text:000099A8                 call    _translate_button
.text:000099AD                 add     esp, 4
.text:000099B0                 push    eax
.text:000099B1                 mov     edx, [ebp+var_BEC]
.text:000099B7                 push    edx
.text:000099B8                 mov     eax, dword ptr ds:_term
.text:000099BD                 push    eax
.text:000099BE                 call    _term_mouse
.text:000099C3                 add     esp, 24h
.text:000099C6
.text:000099C6 loc_99C6:                               ; CODE XREF: WndProc(x,x,x,x)+2DBDj
.text:000099C6                 jmp     short loc_9A1B
.text:000099C8 ; ---------------------------------------------------------------------------
.text:000099C8
.text:000099C8 loc_99C8:                               ; CODE XREF: WndProc(x,x,x,x)+2D51j
.text:000099C8                                         ; WndProc(x,x,x,x)+2D75j
.text:000099C8                 cmp     [ebp+var_BEC], 7
.text:000099CF                 jnz     short loc_99EC
.text:000099D1                 mov     ecx, dword ptr ds:_term
.text:000099D7                 mov     eax, [ecx+128h]
.text:000099DD                 neg     eax
.text:000099DF                 cdq
.text:000099E0                 sub     eax, edx
.text:000099E2                 sar     eax, 1
.text:000099E4                 mov     [ebp+var_C3C], eax
.text:000099EA                 jmp     short loc_9A03
.text:000099EC ; ---------------------------------------------------------------------------
.text:000099EC
.text:000099EC loc_99EC:                               ; CODE XREF: WndProc(x,x,x,x)+2E87j
.text:000099EC                 mov     edx, dword ptr ds:_term
.text:000099F2                 mov     eax, [edx+128h]
.text:000099F8                 cdq
.text:000099F9                 sub     eax, edx
.text:000099FB                 sar     eax, 1
.text:000099FD                 mov     [ebp+var_C3C], eax
.text:00009A03
.text:00009A03 loc_9A03:                               ; CODE XREF: WndProc(x,x,x,x)+2EA2j
.text:00009A03                 mov     eax, [ebp+var_C3C]
.text:00009A09                 push    eax
.text:00009A0A                 push    0
.text:00009A0C                 mov     ecx, dword ptr ds:_term
.text:00009A12                 push    ecx
.text:00009A13                 call    _term_scroll
.text:00009A18                 add     esp, 0Ch
.text:00009A1B
.text:00009A1B loc_9A1B:                               ; CODE XREF: WndProc(x,x,x,x):loc_99C6j
.text:00009A1B                 jmp     loc_982E
.text:00009A20 ; ---------------------------------------------------------------------------
.text:00009A20
.text:00009A20 loc_9A20:                               ; CODE XREF: WndProc(x,x,x,x)+2CF7j
.text:00009A20                                         ; WndProc(x,x,x,x):loc_988Dj
.text:00009A20                 xor     eax, eax
.text:00009A22                 jmp     short loc_9A43
.text:00009A24 ; ---------------------------------------------------------------------------
.text:00009A24
.text:00009A24 loc_9A24:                               ; CODE XREF: WndProc(x,x,x,x):$LN247j
.text:00009A24                                         ; WndProc(x,x,x,x):loc_6E42j ...
.text:00009A24                 mov     esi, esp
.text:00009A26                 mov     edx, [ebp+arg_C]
.text:00009A29                 push    edx             ; lParam
.text:00009A2A                 mov     eax, [ebp+lParam]
.text:00009A2D                 push    eax             ; wParam
.text:00009A2E                 mov     ecx, [ebp+arg_4]
.text:00009A31                 push    ecx             ; Msg
.text:00009A32                 mov     edx, [ebp+hWnd]
.text:00009A35                 push    edx             ; hWnd
.text:00009A36                 call    dword ptr ds:__imp__DefWindowProcA@16 ; DefWindowProcA(x,x,x,x)
.text:00009A3C                 cmp     esi, esp
.text:00009A3E                 call    __RTC_CheckEsp
.text:00009A43
.text:00009A43 loc_9A43:                               ; CODE XREF: WndProc(x,x,x,x)+212j
.text:00009A43                                         ; WndProc(x,x,x,x)+29Ej ...
.text:00009A43                 push    edx
.text:00009A44                 mov     ecx, ebp
.text:00009A46                 push    eax
.text:00009A47                 lea     edx, $LN309
.text:00009A4D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00009A52                 pop     eax
.text:00009A53                 pop     edx
.text:00009A54                 pop     edi
.text:00009A55                 pop     esi
.text:00009A56                 mov     ecx, [ebp+var_4]
.text:00009A59                 xor     ecx, ebp
.text:00009A5B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00009A60                 add     esp, 0C3Ch
.text:00009A66                 cmp     ebp, esp
.text:00009A68                 call    __RTC_CheckEsp
.text:00009A6D                 mov     esp, ebp
.text:00009A6F                 pop     ebp
.text:00009A70                 retn    10h
.text:00009A70 _WndProc@16     endp
.text:00009A70
.text:00009A70 ; ---------------------------------------------------------------------------
.text:00009A73                 align 4
.text:00009A74 $LN309          dd 12h                  ; DATA XREF: WndProc(x,x,x,x)+2EFFo
.text:00009A78                 dd offset $LN308
.text:00009A7C $LN308          dd 0FFFFFFECh, 4        ; DATA XREF: .text:00009A78o
.text:00009A84                 dd offset $LN290        ; "next"
.text:00009A88                 dd 0FFFFF7E0h, 800h
.text:00009A90                 dd offset $LN291        ; "b"
.text:00009A94                 dd 0FFFFF7B8h, 1Eh
.text:00009A9C                 dd offset $LN292        ; "c"
.text:00009AA0                 dd 0FFFFF760h, 44h
.text:00009AA8                 dd offset $LN293        ; "si"
.text:00009AAC                 dd 0FFFFF748h, 10h
.text:00009AB4                 dd offset $LN294        ; "pi"
.text:00009AB8                 dd 0FFFFF730h, 0Ch
.text:00009AC0                 dd offset $LN295        ; "sa"
.text:00009AC4                 dd 0FFFFF6E4h, 8
.text:00009ACC                 dd offset $LN296        ; "cursorpos"
.text:00009AD0                 dd 0FFFFF6C8h, 8
.text:00009AD8                 dd offset $LN297        ; "pt"
.text:00009ADC ; ---------------------------------------------------------------------------
.text:00009ADC                 xchg    eax, esp
.text:00009ADD                 idiv    bh
.text:00009ADF                 jmp     fword ptr [eax]
.text:00009ADF ; ---------------------------------------------------------------------------
.text:00009AE1                 align 4
.text:00009AE4                 dd offset $LN298        ; "mi"
.text:00009AE8                 dd 0FFFFF648h, 40h
.text:00009AF0                 dd offset $LN299        ; "p"
.text:00009AF4                 dd 0FFFFF5BCh, 1Ch
.text:00009AFC                 dd offset $LN300        ; "si"
.text:00009B00                 dd 0FFFFF598h, 14h
.text:00009B08                 dd offset $LN301        ; "buf"
.text:00009B0C                 dd 0FFFFF570h, 1Ch
.text:00009B14                 dd offset $LN302        ; "m"
.text:00009B18                 dd 0FFFFF548h, 2
.text:00009B20                 dd offset $LN303        ; "buf"
.text:00009B24                 dd 0FFFFF53Fh, 1
.text:00009B2C                 dd offset $LN304        ; "c"
.text:00009B30                 dd 0FFFFF533h, 1
.text:00009B38                 dd offset $LN305        ; "c"
.text:00009B3C                 dd 0FFFFF41Ch, 100h
.text:00009B44                 dd offset $LN306        ; "keys"
.text:00009B48                 dd 0FFFFF408h, 8
.text:00009B50                 dd offset $LN307
.text:00009B54 $LN307          db 70h, 0               ; DATA XREF: .text:00009B50o
.text:00009B56 $LN306          db 'keys',0             ; DATA XREF: .text:00009B44o
.text:00009B5B $LN305          db 'c',0                ; DATA XREF: .text:00009B38o
.text:00009B5D $LN304          db 'c',0                ; DATA XREF: .text:00009B2Co
.text:00009B5F $LN303          db 'buf',0              ; DATA XREF: .text:00009B20o
.text:00009B63 $LN302          db 'm',0                ; DATA XREF: .text:00009B14o
.text:00009B65 $LN301          db 'buf',0              ; DATA XREF: .text:00009B08o
.text:00009B69 $LN300          db 'si',0               ; DATA XREF: .text:00009AFCo
.text:00009B6C $LN299          db 'p',0                ; DATA XREF: .text:00009AF0o
.text:00009B6E $LN298          db 'mi',0               ; DATA XREF: .text:00009AE4o
.text:00009B71 $LN297          db 'pt',0               ; DATA XREF: .text:00009AD8o
.text:00009B74 $LN296          db 'cursorpos',0        ; DATA XREF: .text:00009ACCo
.text:00009B7E $LN295          db 'sa',0               ; DATA XREF: .text:00009AC0o
.text:00009B81 $LN294          db 'pi',0               ; DATA XREF: .text:00009AB4o
.text:00009B84 $LN293          db 'si',0               ; DATA XREF: .text:00009AA8o
.text:00009B87 $LN292          db 'c',0                ; DATA XREF: .text:00009A9Co
.text:00009B89 $LN291          db 'b',0                ; DATA XREF: .text:00009A90o
.text:00009B8B $LN290          db 'next',0             ; DATA XREF: .text:00009A84o
.text:00009B90 $LN310          dd offset $LN247, offset $LN243, offset $LN103, offset $LN102
.text:00009B90                                         ; DATA XREF: WndProc(x,x,x,x)+78r
.text:00009B90                 dd offset $LN136, offset $LN135, offset $LN141, offset $LN246 ; jump table for switch statement
.text:00009B90                 dd offset $LN21, offset $LN41, offset $LN147, offset $LN16_0
.text:00009BC0 $LN287          db      0,     1,     2,   0Bh
.text:00009BC0                                         ; DATA XREF: WndProc(x,x,x,x)+71r
.text:00009BC0                 db      3,   0Bh,     4,     5 ; indirect table for switch statement
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,     6,     7
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db      8,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db      9,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:00009BC0                 db    0Bh,   0Bh,   0Bh,   0Ah
.text:00009C60 $LN311          dd offset $LN23         ; DATA XREF: WndProc(x,x,x,x)+C0r
.text:00009C60                 dd offset $LN16_0       ; jump table for switch statement
.text:00009C60                 dd offset $LN49_0
.text:00009C60                 dd offset $LN49_0
.text:00009C60                 dd offset $LN23
.text:00009C74 $LN312          dd offset $LN39         ; DATA XREF: WndProc(x,x,x,x)+107r
.text:00009C74                 dd offset $LN16_0       ; jump table for switch statement
.text:00009C74                 dd offset $LN240
.text:00009C74                 dd offset $LN240
.text:00009C74                 dd offset $LN251
.text:00009C74                 dd offset $LN16_0
.text:00009C74                 dd offset $LN68
.text:00009C74                 dd offset $LN16_0
.text:00009C74                 dd offset $LN242
.text:00009C98 $LN313          dd offset $LN173, offset $LN131, offset $LN134, offset $LN133
.text:00009C98                                         ; DATA XREF: WndProc(x,x,x,x)+159r
.text:00009C98                 dd offset $LN28, offset $LN16_0 ; jump table for switch statement
.text:00009CB0 $LN288          db      0,     0,     5,     0
.text:00009CB0                                         ; DATA XREF: WndProc(x,x,x,x)+152r
.text:00009CB0                 db      0,     5,     0,     0 ; indirect table for switch statement
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     1
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      2,     3,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     5,     5,     5
.text:00009CB0                 db      5,     4
.text:00009D36                 align 4
.text:00009D38 $LN314          dd offset $LN104        ; DATA XREF: WndProc(x,x,x,x)+1C6r
.text:00009D38                 dd offset $LN19_0       ; jump table for switch statement
.text:00009D38                 dd offset $LN137
.text:00009D38                 dd offset $LN18_0
.text:00009D48 $LN315          dd offset $LN237, offset $LN236, offset $LN225, offset $LN223
.text:00009D48                                         ; DATA XREF: WndProc(x,x,x,x)+350r
.text:00009D48                 dd offset $LN187, offset $LN186, offset $LN178 ; jump table for switch statement
.text:00009D64 $LN289          db      0,     6,     6,     6
.text:00009D64                                         ; DATA XREF: WndProc(x,x,x,x)+349r
.text:00009D64                 db      6,     6,     6,     6 ; indirect table for switch statement
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      1,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      1,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      2,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      3,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      4,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      6,     6,     6,     6
.text:00009D64                 db      5
.text:00009DC5                 align 4
.text:00009DC8 $LN316          dd offset $LN168        ; DATA XREF: WndProc(x,x,x,x)+10FAr
.text:00009DC8                 dd offset $LN165        ; jump table for switch statement
.text:00009DC8                 dd offset $LN162
.text:00009DC8                 dd offset $LN166
.text:00009DC8                 dd offset $LN163
.text:00009DC8                 dd offset $LN162
.text:00009DC8                 dd offset $LN167
.text:00009DC8                 dd offset $LN164
.text:00009DE8 $LN317          dd offset $LN62         ; DATA XREF: WndProc(x,x,x,x)+2563r
.text:00009DE8                 dd offset $LN63         ; jump table for switch statement
.text:00009DE8                 dd offset $LN60
.text:00009DE8                 dd offset $LN61
.text:00009DE8                 dd offset $LN59
.text:00009DE8                 dd offset $LN59
.text:00009DE8                 dd offset $LN64
.text:00009DE8                 dd offset $LN65
.text:00009E08
.text:00009E08 ; =============== S U B R O U T I N E =======================================
.text:00009E08
.text:00009E08 ; Attributes: bp-based frame
.text:00009E08
.text:00009E08 _wm_netevent_callback proc near         ; DATA XREF: WndProc(x,x,x,x)+1A7Co
.text:00009E08
.text:00009E08 var_4           = dword ptr -4
.text:00009E08 arg_0           = dword ptr  8
.text:00009E08
.text:00009E08                 push    ebp
.text:00009E09                 mov     ebp, esp
.text:00009E0B                 push    ecx
.text:00009E0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009E13                 mov     eax, [ebp+arg_0]
.text:00009E16                 mov     [ebp+var_4], eax
.text:00009E19                 mov     ecx, [ebp+var_4]
.text:00009E1C                 mov     edx, [ecx+4]
.text:00009E1F                 push    edx
.text:00009E20                 mov     eax, [ebp+var_4]
.text:00009E23                 mov     ecx, [eax]
.text:00009E25                 push    ecx
.text:00009E26                 call    _select_result
.text:00009E2B                 add     esp, 8
.text:00009E2E                 mov     edx, [ebp+arg_0]
.text:00009E31                 push    edx
.text:00009E32                 call    _safefree
.text:00009E37                 add     esp, 4
.text:00009E3A                 add     esp, 4
.text:00009E3D                 cmp     ebp, esp
.text:00009E3F                 call    __RTC_CheckEsp
.text:00009E44                 mov     esp, ebp
.text:00009E46                 pop     ebp
.text:00009E47                 retn
.text:00009E47 _wm_netevent_callback endp
.text:00009E47
.text:00009E48
.text:00009E48 ; =============== S U B R O U T I N E =======================================
.text:00009E48
.text:00009E48 ; Attributes: bp-based frame
.text:00009E48
.text:00009E48 _click          proc near               ; CODE XREF: WndProc(x,x,x,x)+13A5p
.text:00009E48
.text:00009E48 var_C           = dword ptr -0Ch
.text:00009E48 var_8           = dword ptr -8
.text:00009E48 var_4           = dword ptr -4
.text:00009E48 arg_0           = dword ptr  8
.text:00009E48 arg_4           = dword ptr  0Ch
.text:00009E48 arg_8           = dword ptr  10h
.text:00009E48 arg_C           = dword ptr  14h
.text:00009E48 arg_10          = dword ptr  18h
.text:00009E48 arg_14          = dword ptr  1Ch
.text:00009E48
.text:00009E48                 push    ebp
.text:00009E49                 mov     ebp, esp
.text:00009E4B                 sub     esp, 0Ch
.text:00009E4E                 push    esi
.text:00009E4F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00009E56                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009E5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009E64                 mov     esi, esp
.text:00009E66                 call    dword ptr ds:__imp__GetMessageTime@0 ; GetMessageTime()
.text:00009E6C                 cmp     esi, esp
.text:00009E6E                 call    __RTC_CheckEsp
.text:00009E73                 mov     [ebp+var_4], eax
.text:00009E76                 cmp     ds:_send_raw_mouse, 0
.text:00009E7D                 jz      short loc_9EE1
.text:00009E7F                 cmp     [ebp+arg_C], 0
.text:00009E83                 jz      short loc_9E9C
.text:00009E85                 push    89h ; 'ë'
.text:00009E8A                 mov     eax, dword ptr ds:_conf
.text:00009E8F                 push    eax
.text:00009E90                 call    _conf_get_int
.text:00009E95                 add     esp, 8
.text:00009E98                 test    eax, eax
.text:00009E9A                 jnz     short loc_9EE1
.text:00009E9C
.text:00009E9C loc_9E9C:                               ; CODE XREF: _click+3Bj
.text:00009E9C                 mov     ds:_lastbtn, 0
.text:00009EA6                 mov     ecx, [ebp+arg_14]
.text:00009EA9                 push    ecx
.text:00009EAA                 mov     edx, [ebp+arg_10]
.text:00009EAD                 push    edx
.text:00009EAE                 mov     eax, [ebp+arg_C]
.text:00009EB1                 push    eax
.text:00009EB2                 mov     ecx, [ebp+arg_8]
.text:00009EB5                 push    ecx
.text:00009EB6                 mov     edx, [ebp+arg_4]
.text:00009EB9                 push    edx
.text:00009EBA                 push    1
.text:00009EBC                 mov     eax, [ebp+arg_0]
.text:00009EBF                 push    eax
.text:00009EC0                 call    _translate_button
.text:00009EC5                 add     esp, 4
.text:00009EC8                 push    eax
.text:00009EC9                 mov     ecx, [ebp+arg_0]
.text:00009ECC                 push    ecx
.text:00009ECD                 mov     edx, dword ptr ds:_term
.text:00009ED3                 push    edx
.text:00009ED4                 call    _term_mouse
.text:00009ED9                 add     esp, 24h
.text:00009EDC                 jmp     loc_9F9F
.text:00009EE1 ; ---------------------------------------------------------------------------
.text:00009EE1
.text:00009EE1 loc_9EE1:                               ; CODE XREF: _click+35j
.text:00009EE1                                         ; _click+52j
.text:00009EE1                 mov     eax, ds:_lastbtn
.text:00009EE6                 cmp     eax, [ebp+arg_0]
.text:00009EE9                 jnz     short loc_9F40
.text:00009EEB                 mov     ecx, [ebp+var_4]
.text:00009EEE                 sub     ecx, ds:_lasttime
.text:00009EF4                 cmp     ecx, ds:_dbltime
.text:00009EFA                 jge     short loc_9F40
.text:00009EFC                 cmp     ds:_lastact, 1
.text:00009F03                 jnz     short loc_9F0E
.text:00009F05                 mov     [ebp+var_8], 2
.text:00009F0C                 jmp     short loc_9F35
.text:00009F0E ; ---------------------------------------------------------------------------
.text:00009F0E
.text:00009F0E loc_9F0E:                               ; CODE XREF: _click+BBj
.text:00009F0E                 cmp     ds:_lastact, 2
.text:00009F15                 jnz     short loc_9F20
.text:00009F17                 mov     [ebp+var_C], 3
.text:00009F1E                 jmp     short loc_9F2F
.text:00009F20 ; ---------------------------------------------------------------------------
.text:00009F20
.text:00009F20 loc_9F20:                               ; CODE XREF: _click+CDj
.text:00009F20                 xor     edx, edx
.text:00009F22                 cmp     ds:_lastact, 3
.text:00009F29                 setz    dl
.text:00009F2C                 mov     [ebp+var_C], edx
.text:00009F2F
.text:00009F2F loc_9F2F:                               ; CODE XREF: _click+D6j
.text:00009F2F                 mov     eax, [ebp+var_C]
.text:00009F32                 mov     [ebp+var_8], eax
.text:00009F35
.text:00009F35 loc_9F35:                               ; CODE XREF: _click+C4j
.text:00009F35                 mov     ecx, [ebp+var_8]
.text:00009F38                 mov     ds:_lastact, ecx
.text:00009F3E                 jmp     short loc_9F53
.text:00009F40 ; ---------------------------------------------------------------------------
.text:00009F40
.text:00009F40 loc_9F40:                               ; CODE XREF: _click+A1j
.text:00009F40                                         ; _click+B2j
.text:00009F40                 mov     edx, [ebp+arg_0]
.text:00009F43                 mov     ds:_lastbtn, edx
.text:00009F49                 mov     ds:_lastact, 1
.text:00009F53
.text:00009F53 loc_9F53:                               ; CODE XREF: _click+F6j
.text:00009F53                 cmp     ds:_lastact, 0
.text:00009F5A                 jz      short loc_9F97
.text:00009F5C                 mov     eax, [ebp+arg_14]
.text:00009F5F                 push    eax
.text:00009F60                 mov     ecx, [ebp+arg_10]
.text:00009F63                 push    ecx
.text:00009F64                 mov     edx, [ebp+arg_C]
.text:00009F67                 push    edx
.text:00009F68                 mov     eax, [ebp+arg_8]
.text:00009F6B                 push    eax
.text:00009F6C                 mov     ecx, [ebp+arg_4]
.text:00009F6F                 push    ecx
.text:00009F70                 mov     edx, ds:_lastact
.text:00009F76                 push    edx
.text:00009F77                 mov     eax, [ebp+arg_0]
.text:00009F7A                 push    eax
.text:00009F7B                 call    _translate_button
.text:00009F80                 add     esp, 4
.text:00009F83                 push    eax
.text:00009F84                 mov     ecx, [ebp+arg_0]
.text:00009F87                 push    ecx
.text:00009F88                 mov     edx, dword ptr ds:_term
.text:00009F8E                 push    edx
.text:00009F8F                 call    _term_mouse
.text:00009F94                 add     esp, 24h
.text:00009F97
.text:00009F97 loc_9F97:                               ; CODE XREF: _click+112j
.text:00009F97                 mov     eax, [ebp+var_4]
.text:00009F9A                 mov     ds:_lasttime, eax
.text:00009F9F
.text:00009F9F loc_9F9F:                               ; CODE XREF: _click+94j
.text:00009F9F                 pop     esi
.text:00009FA0                 add     esp, 0Ch
.text:00009FA3                 cmp     ebp, esp
.text:00009FA5                 call    __RTC_CheckEsp
.text:00009FAA                 mov     esp, ebp
.text:00009FAC                 pop     ebp
.text:00009FAD                 retn
.text:00009FAD _click          endp
.text:00009FAD
.text:00009FAD ; ---------------------------------------------------------------------------
.text:00009FAE                 db 0Ah dup(0CCh)
.text:00009FB8
.text:00009FB8 ; =============== S U B R O U T I N E =======================================
.text:00009FB8
.text:00009FB8 ; Attributes: bp-based frame
.text:00009FB8
.text:00009FB8 _translate_button proc near             ; CODE XREF: WndProc(x,x,x,x)+148Fp
.text:00009FB8                                         ; WndProc(x,x,x,x)+163Fp ...
.text:00009FB8
.text:00009FB8 arg_0           = dword ptr  8
.text:00009FB8
.text:00009FB8                 push    ebp
.text:00009FB9                 mov     ebp, esp
.text:00009FBB                 cmp     [ebp+arg_0], 1
.text:00009FBF                 jnz     short loc_9FC8
.text:00009FC1                 mov     eax, 4
.text:00009FC6                 jmp     short loc_A017
.text:00009FC8 ; ---------------------------------------------------------------------------
.text:00009FC8
.text:00009FC8 loc_9FC8:                               ; CODE XREF: _translate_button+7j
.text:00009FC8                 cmp     [ebp+arg_0], 2
.text:00009FCC                 jnz     short loc_9FED
.text:00009FCE                 push    85h ; 'à'
.text:00009FD3                 mov     eax, dword ptr ds:_conf
.text:00009FD8                 push    eax
.text:00009FD9                 call    _conf_get_int
.text:00009FDE                 add     esp, 8
.text:00009FE1                 sub     eax, 1
.text:00009FE4                 neg     eax
.text:00009FE6                 sbb     eax, eax
.text:00009FE8                 add     eax, 6
.text:00009FEB                 jmp     short loc_A017
.text:00009FED ; ---------------------------------------------------------------------------
.text:00009FED
.text:00009FED loc_9FED:                               ; CODE XREF: _translate_button+14j
.text:00009FED                 cmp     [ebp+arg_0], 3
.text:00009FF1                 jnz     short loc_A015
.text:00009FF3                 push    85h ; 'à'
.text:00009FF8                 mov     ecx, dword ptr ds:_conf
.text:00009FFE                 push    ecx
.text:00009FFF                 call    _conf_get_int
.text:0000A004                 add     esp, 8
.text:0000A007                 sub     eax, 1
.text:0000A00A                 neg     eax
.text:0000A00C                 sbb     eax, eax
.text:0000A00E                 neg     eax
.text:0000A010                 add     eax, 5
.text:0000A013                 jmp     short loc_A017
.text:0000A015 ; ---------------------------------------------------------------------------
.text:0000A015
.text:0000A015 loc_A015:                               ; CODE XREF: _translate_button+39j
.text:0000A015                 xor     eax, eax
.text:0000A017
.text:0000A017 loc_A017:                               ; CODE XREF: _translate_button+Ej
.text:0000A017                                         ; _translate_button+33j ...
.text:0000A017                 cmp     ebp, esp
.text:0000A019                 call    __RTC_CheckEsp
.text:0000A01E                 pop     ebp
.text:0000A01F                 retn
.text:0000A01F _translate_button endp
.text:0000A01F
.text:0000A01F ; ---------------------------------------------------------------------------
.text:0000A020                 db 8 dup(0CCh)
.text:0000A028
.text:0000A028 ; =============== S U B R O U T I N E =======================================
.text:0000A028
.text:0000A028 ; Attributes: bp-based frame
.text:0000A028
.text:0000A028 _show_mouseptr  proc near               ; CODE XREF: WndProc(x,x,x,x)+21Ep
.text:0000A028                                         ; WndProc(x,x,x,x)+2A5p ...
.text:0000A028
.text:0000A028 arg_0           = dword ptr  8
.text:0000A028
.text:0000A028                 push    ebp
.text:0000A029                 mov     ebp, esp
.text:0000A02B                 push    esi
.text:0000A02C                 push    78h ; 'x'
.text:0000A02E                 mov     eax, dword ptr ds:_conf
.text:0000A033                 push    eax
.text:0000A034                 call    _conf_get_int
.text:0000A039                 add     esp, 8
.text:0000A03C                 test    eax, eax
.text:0000A03E                 jnz     short loc_A047
.text:0000A040                 mov     [ebp+arg_0], 1
.text:0000A047
.text:0000A047 loc_A047:                               ; CODE XREF: _show_mouseptr+16j
.text:0000A047                 cmp     ?cursor_visible@?1??show_mouseptr@@9@9, 0 ; `show_mouseptr'::`2'::cursor_visible
.text:0000A04E                 jz      short loc_A069
.text:0000A050                 cmp     [ebp+arg_0], 0
.text:0000A054                 jnz     short loc_A069
.text:0000A056                 mov     esi, esp
.text:0000A058                 push    0               ; bShow
.text:0000A05A                 call    dword ptr ds:__imp__ShowCursor@4 ; ShowCursor(x)
.text:0000A060                 cmp     esi, esp
.text:0000A062                 call    __RTC_CheckEsp
.text:0000A067                 jmp     short loc_A089
.text:0000A069 ; ---------------------------------------------------------------------------
.text:0000A069
.text:0000A069 loc_A069:                               ; CODE XREF: _show_mouseptr+26j
.text:0000A069                                         ; _show_mouseptr+2Cj
.text:0000A069                 cmp     ?cursor_visible@?1??show_mouseptr@@9@9, 0 ; `show_mouseptr'::`2'::cursor_visible
.text:0000A070                 jnz     short loc_A089
.text:0000A072                 cmp     [ebp+arg_0], 0
.text:0000A076                 jz      short loc_A089
.text:0000A078                 mov     esi, esp
.text:0000A07A                 push    1               ; bShow
.text:0000A07C                 call    dword ptr ds:__imp__ShowCursor@4 ; ShowCursor(x)
.text:0000A082                 cmp     esi, esp
.text:0000A084                 call    __RTC_CheckEsp
.text:0000A089
.text:0000A089 loc_A089:                               ; CODE XREF: _show_mouseptr+3Fj
.text:0000A089                                         ; _show_mouseptr+48j ...
.text:0000A089                 mov     ecx, [ebp+arg_0]
.text:0000A08C                 mov     ?cursor_visible@?1??show_mouseptr@@9@9, ecx ; `show_mouseptr'::`2'::cursor_visible
.text:0000A092                 pop     esi
.text:0000A093                 cmp     ebp, esp
.text:0000A095                 call    __RTC_CheckEsp
.text:0000A09A                 pop     ebp
.text:0000A09B                 retn
.text:0000A09B _show_mouseptr  endp
.text:0000A09B
.text:0000A09B ; ---------------------------------------------------------------------------
.text:0000A09C                 db 0Ch dup(0CCh)
.text:0000A0A8
.text:0000A0A8 ; =============== S U B R O U T I N E =======================================
.text:0000A0A8
.text:0000A0A8 ; Attributes: bp-based frame
.text:0000A0A8
.text:0000A0A8 _is_alt_pressed proc near               ; CODE XREF: WndProc(x,x,x,x):loc_7EAAp
.text:0000A0A8                                         ; WndProc(x,x,x,x):loc_7F92p ...
.text:0000A0A8
.text:0000A0A8 var_110         = dword ptr -110h
.text:0000A0A8 KeyState        = byte ptr -108h
.text:0000A0A8 var_F6          = byte ptr -0F6h
.text:0000A0A8 var_63          = byte ptr -63h
.text:0000A0A8 var_4           = dword ptr -4
.text:0000A0A8
.text:0000A0A8                 push    ebp
.text:0000A0A9                 mov     ebp, esp
.text:0000A0AB                 sub     esp, 110h
.text:0000A0B1                 push    esi
.text:0000A0B2                 push    edi
.text:0000A0B3                 lea     edi, [ebp+var_110]
.text:0000A0B9                 mov     ecx, 44h ; 'D'
.text:0000A0BE                 mov     eax, 0CCCCCCCCh
.text:0000A0C3                 rep stosd
.text:0000A0C5                 mov     eax, dword ptr ds:___security_cookie
.text:0000A0CA                 xor     eax, ebp
.text:0000A0CC                 mov     [ebp+var_4], eax
.text:0000A0CF                 mov     esi, esp
.text:0000A0D1                 lea     eax, [ebp+KeyState]
.text:0000A0D7                 push    eax             ; lpKeyState
.text:0000A0D8                 call    dword ptr ds:__imp__GetKeyboardState@4 ; GetKeyboardState(x)
.text:0000A0DE                 cmp     esi, esp
.text:0000A0E0                 call    __RTC_CheckEsp
.text:0000A0E5                 mov     [ebp+var_110], eax
.text:0000A0EB                 cmp     [ebp+var_110], 0
.text:0000A0F2                 jnz     short loc_A0F8
.text:0000A0F4                 xor     eax, eax
.text:0000A0F6                 jmp     short loc_A123
.text:0000A0F8 ; ---------------------------------------------------------------------------
.text:0000A0F8
.text:0000A0F8 loc_A0F8:                               ; CODE XREF: _is_alt_pressed+4Aj
.text:0000A0F8                 movzx   ecx, [ebp+var_F6]
.text:0000A0FF                 and     ecx, 80h
.text:0000A105                 jz      short loc_A10E
.text:0000A107                 mov     eax, 1
.text:0000A10C                 jmp     short loc_A123
.text:0000A10E ; ---------------------------------------------------------------------------
.text:0000A10E
.text:0000A10E loc_A10E:                               ; CODE XREF: _is_alt_pressed+5Dj
.text:0000A10E                 movzx   edx, [ebp+var_63]
.text:0000A112                 and     edx, 80h
.text:0000A118                 jz      short loc_A121
.text:0000A11A                 mov     eax, 1
.text:0000A11F                 jmp     short loc_A123
.text:0000A121 ; ---------------------------------------------------------------------------
.text:0000A121
.text:0000A121 loc_A121:                               ; CODE XREF: _is_alt_pressed+70j
.text:0000A121                 xor     eax, eax
.text:0000A123
.text:0000A123 loc_A123:                               ; CODE XREF: _is_alt_pressed+4Ej
.text:0000A123                                         ; _is_alt_pressed+64j ...
.text:0000A123                 push    edx
.text:0000A124                 mov     ecx, ebp
.text:0000A126                 push    eax
.text:0000A127                 lea     edx, $LN8_2
.text:0000A12D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000A132                 pop     eax
.text:0000A133                 pop     edx
.text:0000A134                 pop     edi
.text:0000A135                 pop     esi
.text:0000A136                 mov     ecx, [ebp+var_4]
.text:0000A139                 xor     ecx, ebp
.text:0000A13B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000A140                 add     esp, 110h
.text:0000A146                 cmp     ebp, esp
.text:0000A148                 call    __RTC_CheckEsp
.text:0000A14D                 mov     esp, ebp
.text:0000A14F                 pop     ebp
.text:0000A150                 retn
.text:0000A150 _is_alt_pressed endp
.text:0000A150
.text:0000A150 ; ---------------------------------------------------------------------------
.text:0000A151                 align 4
.text:0000A154 $LN8_2          dd 1                    ; DATA XREF: _is_alt_pressed+7Fo
.text:0000A158                 dd offset $LN7_1
.text:0000A15C $LN7_1          dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:0000A158o
.text:0000A164                 dd offset $LN6_1        ; "keystate"
.text:0000A168 $LN6_1          db 'keystate',0         ; DATA XREF: .text:0000A164o
.text:0000A171                 align 8
.text:0000A178
.text:0000A178 ; =============== S U B R O U T I N E =======================================
.text:0000A178
.text:0000A178 ; Attributes: bp-based frame
.text:0000A178
.text:0000A178                 public _sys_cursor
.text:0000A178 _sys_cursor     proc near
.text:0000A178
.text:0000A178 var_8           = dword ptr -8
.text:0000A178 var_4           = dword ptr -4
.text:0000A178 arg_4           = dword ptr  0Ch
.text:0000A178 arg_8           = dword ptr  10h
.text:0000A178
.text:0000A178                 push    ebp
.text:0000A179                 mov     ebp, esp
.text:0000A17B                 sub     esp, 8
.text:0000A17E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A185                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A18C                 mov     eax, dword ptr ds:_term
.text:0000A191                 cmp     dword ptr [eax+134h], 0
.text:0000A198                 jnz     short loc_A19C
.text:0000A19A                 jmp     short loc_A1F0
.text:0000A19C ; ---------------------------------------------------------------------------
.text:0000A19C
.text:0000A19C loc_A19C:                               ; CODE XREF: _sys_cursor+20j
.text:0000A19C                 mov     ecx, [ebp+arg_4]
.text:0000A19F                 imul    ecx, ds:_font_width
.text:0000A1A6                 add     ecx, ds:_offset_width
.text:0000A1AC                 mov     [ebp+var_4], ecx
.text:0000A1AF                 mov     edx, [ebp+arg_8]
.text:0000A1B2                 imul    edx, ds:_font_height
.text:0000A1B9                 add     edx, ds:_offset_height
.text:0000A1BF                 mov     [ebp+var_8], edx
.text:0000A1C2                 mov     eax, [ebp+var_4]
.text:0000A1C5                 cmp     eax, _caret_x
.text:0000A1CB                 jnz     short loc_A1DA
.text:0000A1CD                 mov     ecx, [ebp+var_8]
.text:0000A1D0                 cmp     ecx, _caret_y
.text:0000A1D6                 jnz     short loc_A1DA
.text:0000A1D8                 jmp     short loc_A1F0
.text:0000A1DA ; ---------------------------------------------------------------------------
.text:0000A1DA
.text:0000A1DA loc_A1DA:                               ; CODE XREF: _sys_cursor+53j
.text:0000A1DA                                         ; _sys_cursor+5Ej
.text:0000A1DA                 mov     edx, [ebp+var_4]
.text:0000A1DD                 mov     _caret_x, edx
.text:0000A1E3                 mov     eax, [ebp+var_8]
.text:0000A1E6                 mov     _caret_y, eax
.text:0000A1EB                 call    _sys_cursor_update
.text:0000A1F0
.text:0000A1F0 loc_A1F0:                               ; CODE XREF: _sys_cursor+22j
.text:0000A1F0                                         ; _sys_cursor+60j
.text:0000A1F0                 add     esp, 8
.text:0000A1F3                 cmp     ebp, esp
.text:0000A1F5                 call    __RTC_CheckEsp
.text:0000A1FA                 mov     esp, ebp
.text:0000A1FC                 pop     ebp
.text:0000A1FD                 retn
.text:0000A1FD _sys_cursor     endp
.text:0000A1FD
.text:0000A1FD ; ---------------------------------------------------------------------------
.text:0000A1FE                 db 0Ah dup(0CCh)
.text:0000A208
.text:0000A208 ; =============== S U B R O U T I N E =======================================
.text:0000A208
.text:0000A208 ; Attributes: bp-based frame
.text:0000A208
.text:0000A208 _sys_cursor_update proc near            ; CODE XREF: WndProc(x,x,x,x):$LN103p
.text:0000A208                                         ; WndProc(x,x,x,x):loc_907Ap ...
.text:0000A208
.text:0000A208 var_2C          = dword ptr -2Ch
.text:0000A208 CompForm        = tagCOMPOSITIONFORM ptr -24h
.text:0000A208 var_4           = dword ptr -4
.text:0000A208
.text:0000A208                 push    ebp
.text:0000A209                 mov     ebp, esp
.text:0000A20B                 sub     esp, 2Ch
.text:0000A20E                 push    esi
.text:0000A20F                 push    edi
.text:0000A210                 lea     edi, [ebp+var_2C]
.text:0000A213                 mov     ecx, 0Bh
.text:0000A218                 mov     eax, 0CCCCCCCCh
.text:0000A21D                 rep stosd
.text:0000A21F                 mov     eax, dword ptr ds:___security_cookie
.text:0000A224                 xor     eax, ebp
.text:0000A226                 mov     [ebp+var_4], eax
.text:0000A229                 mov     eax, dword ptr ds:_term
.text:0000A22E                 cmp     dword ptr [eax+134h], 0
.text:0000A235                 jnz     short loc_A23C
.text:0000A237                 jmp     loc_A2CF
.text:0000A23C ; ---------------------------------------------------------------------------
.text:0000A23C
.text:0000A23C loc_A23C:                               ; CODE XREF: _sys_cursor_update+2Dj
.text:0000A23C                 cmp     _caret_x, 0
.text:0000A243                 jl      short loc_A24E
.text:0000A245                 cmp     _caret_y, 0
.text:0000A24C                 jge     short loc_A250
.text:0000A24E
.text:0000A24E loc_A24E:                               ; CODE XREF: _sys_cursor_update+3Bj
.text:0000A24E                 jmp     short loc_A2CF
.text:0000A250 ; ---------------------------------------------------------------------------
.text:0000A250
.text:0000A250 loc_A250:                               ; CODE XREF: _sys_cursor_update+44j
.text:0000A250                 mov     esi, esp
.text:0000A252                 mov     ecx, _caret_y
.text:0000A258                 push    ecx             ; Y
.text:0000A259                 mov     edx, _caret_x
.text:0000A25F                 push    edx             ; X
.text:0000A260                 call    dword ptr ds:__imp__SetCaretPos@8 ; SetCaretPos(x,x)
.text:0000A266                 cmp     esi, esp
.text:0000A268                 call    __RTC_CheckEsp
.text:0000A26D                 cmp     dword ptr ds:_osVersion+10h, 0
.text:0000A274                 jnz     short loc_A278
.text:0000A276                 jmp     short loc_A2CF
.text:0000A278 ; ---------------------------------------------------------------------------
.text:0000A278
.text:0000A278 loc_A278:                               ; CODE XREF: _sys_cursor_update+6Cj
.text:0000A278                 cmp     dword ptr ds:_osVersion+10h, 1
.text:0000A27F                 jnz     short loc_A28C
.text:0000A281                 cmp     dword ptr ds:_osVersion+8, 0
.text:0000A288                 jnz     short loc_A28C
.text:0000A28A                 jmp     short loc_A2CF
.text:0000A28C ; ---------------------------------------------------------------------------
.text:0000A28C
.text:0000A28C loc_A28C:                               ; CODE XREF: _sys_cursor_update+77j
.text:0000A28C                                         ; _sys_cursor_update+80j
.text:0000A28C                 mov     eax, dword ptr ds:_hwnd
.text:0000A291                 push    eax             ; HWND
.text:0000A292                 call    _ImmGetContext@4 ; ImmGetContext(x)
.text:0000A297                 mov     [ebp+var_2C], eax
.text:0000A29A                 mov     [ebp+CompForm.dwStyle], 2
.text:0000A2A1                 mov     ecx, _caret_x
.text:0000A2A7                 mov     [ebp+CompForm.ptCurrentPos.x], ecx
.text:0000A2AA                 mov     edx, _caret_y
.text:0000A2B0                 mov     [ebp+CompForm.ptCurrentPos.y], edx
.text:0000A2B3                 lea     eax, [ebp+CompForm]
.text:0000A2B6                 push    eax             ; lpCompForm
.text:0000A2B7                 mov     ecx, [ebp+var_2C]
.text:0000A2BA                 push    ecx             ; HIMC
.text:0000A2BB                 call    _ImmSetCompositionWindow@8 ; ImmSetCompositionWindow(x,x)
.text:0000A2C0                 mov     edx, [ebp+var_2C]
.text:0000A2C3                 push    edx             ; HIMC
.text:0000A2C4                 mov     eax, dword ptr ds:_hwnd
.text:0000A2C9                 push    eax             ; HWND
.text:0000A2CA                 call    _ImmReleaseContext@8 ; ImmReleaseContext(x,x)
.text:0000A2CF
.text:0000A2CF loc_A2CF:                               ; CODE XREF: _sys_cursor_update+2Fj
.text:0000A2CF                                         ; _sys_cursor_update:loc_A24Ej ...
.text:0000A2CF                 push    edx
.text:0000A2D0                 mov     ecx, ebp
.text:0000A2D2                 push    eax
.text:0000A2D3                 lea     edx, $LN10_3
.text:0000A2D9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000A2DE                 pop     eax
.text:0000A2DF                 pop     edx
.text:0000A2E0                 pop     edi
.text:0000A2E1                 pop     esi
.text:0000A2E2                 mov     ecx, [ebp+var_4]
.text:0000A2E5                 xor     ecx, ebp
.text:0000A2E7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000A2EC                 add     esp, 2Ch
.text:0000A2EF                 cmp     ebp, esp
.text:0000A2F1                 call    __RTC_CheckEsp
.text:0000A2F6                 mov     esp, ebp
.text:0000A2F8                 pop     ebp
.text:0000A2F9                 retn
.text:0000A2F9 _sys_cursor_update endp
.text:0000A2F9
.text:0000A2F9 ; ---------------------------------------------------------------------------
.text:0000A2FA                 align 4
.text:0000A2FC $LN10_3         dd 1                    ; DATA XREF: _sys_cursor_update+CBo
.text:0000A300                 dd offset $LN9_2
.text:0000A304 $LN9_2          dd 0FFFFFFDCh, 1Ch      ; DATA XREF: .text:0000A300o
.text:0000A30C                 dd offset $LN8_3
.text:0000A310 $LN8_3          dd 0CC006663h, 0CCCCCCCCh ; DATA XREF: .text:0000A30Co
.text:0000A318
.text:0000A318 ; =============== S U B R O U T I N E =======================================
.text:0000A318
.text:0000A318 ; Attributes: bp-based frame
.text:0000A318
.text:0000A318 ; int __cdecl do_text_internal(int, int, int, int, UINT, int, int)
.text:0000A318                 public _do_text_internal
.text:0000A318 _do_text_internal proc near             ; CODE XREF: _do_text+FBp
.text:0000A318                                         ; _do_text+19Bp ...
.text:0000A318
.text:0000A318 var_B4          = dword ptr -0B4h
.text:0000A318 var_B0          = dword ptr -0B0h
.text:0000A318 var_AC          = dword ptr -0ACh
.text:0000A318 var_A8          = dword ptr -0A8h
.text:0000A318 var_A4          = dword ptr -0A4h
.text:0000A318 h               = dword ptr -0A0h
.text:0000A318 var_9C          = dword ptr -9Ch
.text:0000A318 var_98          = dword ptr -98h
.text:0000A318 var_8D          = byte ptr -8Dh
.text:0000A318 MultiByteStr    = byte ptr -84h
.text:0000A318 var_83          = byte ptr -83h
.text:0000A318 var_7C          = dword ptr -7Ch
.text:0000A318 c               = dword ptr -78h
.text:0000A318 var_74          = dword ptr -74h
.text:0000A318 var_70          = dword ptr -70h
.text:0000A318 var_6C          = dword ptr -6Ch
.text:0000A318 var_68          = dword ptr -68h
.text:0000A318 var_64          = dword ptr -64h
.text:0000A318 lpDx            = dword ptr -60h
.text:0000A318 var_5C          = dword ptr -5Ch
.text:0000A318 var_58          = dword ptr -58h
.text:0000A318 var_54          = dword ptr -54h
.text:0000A318 var_50          = dword ptr -50h
.text:0000A318 var_4C          = dword ptr -4Ch
.text:0000A318 var_48          = dword ptr -48h
.text:0000A318 var_44          = dword ptr -44h
.text:0000A318 var_40          = dword ptr -40h
.text:0000A318 var_3C          = dword ptr -3Ch
.text:0000A318 rect            = RECT ptr -34h
.text:0000A318 hdc             = dword ptr -20h
.text:0000A318 var_1C          = dword ptr -1Ch
.text:0000A318 var_18          = dword ptr -18h
.text:0000A318 var_14          = dword ptr -14h
.text:0000A318 var_10          = dword ptr -10h
.text:0000A318 var_C           = dword ptr -0Ch
.text:0000A318 color           = dword ptr -8
.text:0000A318 var_4           = dword ptr -4
.text:0000A318 arg_0           = dword ptr  8
.text:0000A318 arg_4           = dword ptr  0Ch
.text:0000A318 arg_8           = dword ptr  10h
.text:0000A318 arg_C           = dword ptr  14h
.text:0000A318 arg_10          = dword ptr  18h
.text:0000A318 arg_14          = dword ptr  1Ch
.text:0000A318 arg_18          = dword ptr  20h
.text:0000A318
.text:0000A318                 push    ebp
.text:0000A319                 mov     ebp, esp
.text:0000A31B                 sub     esp, 0B4h
.text:0000A321                 push    esi
.text:0000A322                 push    edi
.text:0000A323                 lea     edi, [ebp+var_B4]
.text:0000A329                 mov     ecx, 2Dh ; '-'
.text:0000A32E                 mov     eax, 0CCCCCCCCh
.text:0000A333                 rep stosd
.text:0000A335                 mov     eax, dword ptr ds:___security_cookie
.text:0000A33A                 xor     eax, ebp
.text:0000A33C                 mov     [ebp+var_4], eax
.text:0000A33F                 mov     eax, [ebp+arg_0]
.text:0000A342                 mov     [ebp+hdc], eax
.text:0000A345                 mov     [ebp+var_3C], 0
.text:0000A34C                 mov     [ebp+var_48], 0
.text:0000A353                 mov     [ebp+var_4C], 0
.text:0000A35A                 mov     [ebp+var_5C], 0
.text:0000A361                 mov     ecx, [ebp+arg_18]
.text:0000A364                 and     ecx, 3
.text:0000A367                 mov     [ebp+arg_18], ecx
.text:0000A36A                 xor     edx, edx
.text:0000A36C                 cmp     [ebp+arg_18], 0
.text:0000A370                 setnz   dl
.text:0000A373                 add     edx, 1
.text:0000A376                 imul    edx, ds:_font_width
.text:0000A37D                 mov     [ebp+var_40], edx
.text:0000A380                 mov     eax, [ebp+var_40]
.text:0000A383                 mov     [ebp+var_44], eax
.text:0000A386                 mov     ecx, [ebp+arg_14]
.text:0000A389                 and     ecx, 400000h
.text:0000A38F                 jz      short loc_A399
.text:0000A391                 mov     edx, [ebp+var_44]
.text:0000A394                 shl     edx, 1
.text:0000A396                 mov     [ebp+var_44], edx
.text:0000A399
.text:0000A399 loc_A399:                               ; CODE XREF: _do_text_internal+77j
.text:0000A399                 cmp     [ebp+arg_18], 0
.text:0000A39D                 jz      short loc_A3B7
.text:0000A39F                 mov     eax, [ebp+arg_4]
.text:0000A3A2                 shl     eax, 1
.text:0000A3A4                 mov     ecx, dword ptr ds:_term
.text:0000A3AA                 cmp     eax, [ecx+12Ch]
.text:0000A3B0                 jl      short loc_A3B7
.text:0000A3B2                 jmp     loc_B372
.text:0000A3B7 ; ---------------------------------------------------------------------------
.text:0000A3B7
.text:0000A3B7 loc_A3B7:                               ; CODE XREF: _do_text_internal+85j
.text:0000A3B7                                         ; _do_text_internal+98j
.text:0000A3B7                 mov     edx, [ebp+arg_4]
.text:0000A3BA                 imul    edx, [ebp+var_40]
.text:0000A3BE                 mov     [ebp+arg_4], edx
.text:0000A3C1                 mov     eax, [ebp+arg_8]
.text:0000A3C4                 imul    eax, ds:_font_height
.text:0000A3CB                 mov     [ebp+arg_8], eax
.text:0000A3CE                 mov     ecx, [ebp+arg_4]
.text:0000A3D1                 add     ecx, ds:_offset_width
.text:0000A3D7                 mov     [ebp+arg_4], ecx
.text:0000A3DA                 mov     edx, [ebp+arg_8]
.text:0000A3DD                 add     edx, ds:_offset_height
.text:0000A3E3                 mov     [ebp+arg_8], edx
.text:0000A3E6                 mov     eax, [ebp+arg_14]
.text:0000A3E9                 and     eax, 40000000h
.text:0000A3EE                 jz      short loc_A426
.text:0000A3F0                 cmp     dword ptr ds:_cursor_type, 0
.text:0000A3F7                 jz      short loc_A408
.text:0000A3F9                 mov     ecx, dword ptr ds:_term
.text:0000A3FF                 cmp     dword ptr [ecx+158h], 0
.text:0000A406                 jz      short loc_A426
.text:0000A408
.text:0000A408 loc_A408:                               ; CODE XREF: _do_text_internal+DFj
.text:0000A408                 mov     edx, [ebp+arg_14]
.text:0000A40B                 and     edx, 0FFCC0000h
.text:0000A411                 mov     [ebp+arg_14], edx
.text:0000A414                 mov     eax, [ebp+arg_14]
.text:0000A417                 or      eax, 20B04h
.text:0000A41C                 mov     [ebp+arg_14], eax
.text:0000A41F                 mov     [ebp+var_5C], 1
.text:0000A426
.text:0000A426 loc_A426:                               ; CODE XREF: _do_text_internal+D6j
.text:0000A426                                         ; _do_text_internal+EEj
.text:0000A426                 mov     [ebp+var_1C], 0
.text:0000A42D                 cmp     dword ptr ds:_vtmode, 3
.text:0000A434                 jnz     short loc_A445
.text:0000A436                 cmp     [ebp+arg_18], 0
.text:0000A43A                 jz      short loc_A445
.text:0000A43C                 mov     [ebp+arg_18], 1
.text:0000A443                 jmp     short loc_A478
.text:0000A445 ; ---------------------------------------------------------------------------
.text:0000A445
.text:0000A445 loc_A445:                               ; CODE XREF: _do_text_internal+11Cj
.text:0000A445                                         ; _do_text_internal+122j
.text:0000A445                 mov     ecx, [ebp+arg_18]
.text:0000A448                 mov     [ebp+var_A8], ecx
.text:0000A44E                 cmp     [ebp+var_A8], 0
.text:0000A455                 jz      short loc_A462
.text:0000A457                 cmp     [ebp+var_A8], 1
.text:0000A45E                 jz      short loc_A464
.text:0000A460                 jmp     short loc_A46F
.text:0000A462 ; ---------------------------------------------------------------------------
.text:0000A462
.text:0000A462 loc_A462:                               ; CODE XREF: _do_text_internal+13Dj
.text:0000A462                 jmp     short loc_A478
.text:0000A464 ; ---------------------------------------------------------------------------
.text:0000A464
.text:0000A464 loc_A464:                               ; CODE XREF: _do_text_internal+146j
.text:0000A464                 mov     edx, [ebp+var_1C]
.text:0000A467                 or      edx, 4
.text:0000A46A                 mov     [ebp+var_1C], edx
.text:0000A46D                 jmp     short loc_A478
.text:0000A46F ; ---------------------------------------------------------------------------
.text:0000A46F
.text:0000A46F loc_A46F:                               ; CODE XREF: _do_text_internal+148j
.text:0000A46F                 mov     eax, [ebp+var_1C]
.text:0000A472                 or      eax, 0Ch
.text:0000A475                 mov     [ebp+var_1C], eax
.text:0000A478
.text:0000A478 loc_A478:                               ; CODE XREF: _do_text_internal+12Bj
.text:0000A478                                         ; _do_text_internal:loc_A462j ...
.text:0000A478                 mov     ecx, [ebp+arg_14]
.text:0000A47B                 and     ecx, 800000h
.text:0000A481                 jz      short loc_A48C
.text:0000A483                 mov     edx, [ebp+var_1C]
.text:0000A486                 or      edx, 10h
.text:0000A489                 mov     [ebp+var_1C], edx
.text:0000A48C
.text:0000A48C loc_A48C:                               ; CODE XREF: _do_text_internal+169j
.text:0000A48C                 mov     eax, [ebp+arg_C]
.text:0000A48F                 movzx   ecx, word ptr [eax]
.text:0000A492                 cmp     ecx, 23BAh
.text:0000A498                 jl      loc_A56E
.text:0000A49E                 mov     edx, [ebp+arg_C]
.text:0000A4A1                 movzx   eax, word ptr [edx]
.text:0000A4A4                 cmp     eax, 23BDh
.text:0000A4A9                 jg      loc_A56E
.text:0000A4AF                 mov     ecx, [ebp+arg_C]
.text:0000A4B2                 movzx   edx, byte ptr [ecx]
.text:0000A4B5                 mov     [ebp+var_AC], edx
.text:0000A4BB                 mov     eax, [ebp+var_AC]
.text:0000A4C1                 sub     eax, 0BAh ; '¦'
.text:0000A4C6                 mov     [ebp+var_AC], eax
.text:0000A4CC                 cmp     [ebp+var_AC], 3 ; switch 4 cases
.text:0000A4D3                 ja      short loc_A530  ; jumptable 0000A4DB default case
.text:0000A4D5                 mov     ecx, [ebp+var_AC]
.text:0000A4DB                 jmp     ds:$LN121[ecx*4] ; switch jump
.text:0000A4E2 ; ---------------------------------------------------------------------------
.text:0000A4E2
.text:0000A4E2 $LN94_0:                                ; CODE XREF: _do_text_internal+1C3j
.text:0000A4E2                                         ; DATA XREF: .text:$LN121o
.text:0000A4E2                 mov     eax, ds:_font_height ; jumptable 0000A4DB case 0
.text:0000A4E7                 imul    eax, -2
.text:0000A4EA                 cdq
.text:0000A4EB                 mov     ecx, 5
.text:0000A4F0                 idiv    ecx
.text:0000A4F2                 mov     [ebp+var_48], eax
.text:0000A4F5                 jmp     short loc_A530  ; jumptable 0000A4DB default case
.text:0000A4F7 ; ---------------------------------------------------------------------------
.text:0000A4F7
.text:0000A4F7 $LN93_0:                                ; CODE XREF: _do_text_internal+1C3j
.text:0000A4F7                                         ; DATA XREF: .text:$LN121o
.text:0000A4F7                 mov     eax, ds:_font_height ; jumptable 0000A4DB case 1
.text:0000A4FC                 imul    eax, -1
.text:0000A4FF                 cdq
.text:0000A500                 mov     ecx, 5
.text:0000A505                 idiv    ecx
.text:0000A507                 mov     [ebp+var_48], eax
.text:0000A50A                 jmp     short loc_A530  ; jumptable 0000A4DB default case
.text:0000A50C ; ---------------------------------------------------------------------------
.text:0000A50C
.text:0000A50C $LN92_0:                                ; CODE XREF: _do_text_internal+1C3j
.text:0000A50C                                         ; DATA XREF: .text:$LN121o
.text:0000A50C                 mov     eax, ds:_font_height ; jumptable 0000A4DB case 2
.text:0000A511                 cdq
.text:0000A512                 mov     ecx, 5
.text:0000A517                 idiv    ecx
.text:0000A519                 mov     [ebp+var_48], eax
.text:0000A51C                 jmp     short loc_A530  ; jumptable 0000A4DB default case
.text:0000A51E ; ---------------------------------------------------------------------------
.text:0000A51E
.text:0000A51E $LN91_0:                                ; CODE XREF: _do_text_internal+1C3j
.text:0000A51E                                         ; DATA XREF: .text:$LN121o
.text:0000A51E                 mov     eax, ds:_font_height ; jumptable 0000A4DB case 3
.text:0000A523                 shl     eax, 1
.text:0000A525                 cdq
.text:0000A526                 mov     ecx, 5
.text:0000A52B                 idiv    ecx
.text:0000A52D                 mov     [ebp+var_48], eax
.text:0000A530
.text:0000A530 loc_A530:                               ; CODE XREF: _do_text_internal+1BBj
.text:0000A530                                         ; _do_text_internal+1DDj ...
.text:0000A530                 cmp     [ebp+arg_18], 2 ; jumptable 0000A4DB default case
.text:0000A534                 jz      short loc_A53C
.text:0000A536                 cmp     [ebp+arg_18], 3
.text:0000A53A                 jnz     short loc_A544
.text:0000A53C
.text:0000A53C loc_A53C:                               ; CODE XREF: _do_text_internal+21Cj
.text:0000A53C                 mov     edx, [ebp+var_48]
.text:0000A53F                 shl     edx, 1
.text:0000A541                 mov     [ebp+var_48], edx
.text:0000A544
.text:0000A544 loc_A544:                               ; CODE XREF: _do_text_internal+222j
.text:0000A544                 mov     eax, [ebp+arg_C]
.text:0000A547                 mov     cx, ds:word_CB2
.text:0000A54E                 mov     [eax], cx
.text:0000A551                 mov     edx, [ebp+arg_14]
.text:0000A554                 and     edx, 80000h
.text:0000A55A                 jz      short loc_A56E
.text:0000A55C                 mov     eax, [ebp+arg_14]
.text:0000A55F                 and     eax, 0FFF7FFFFh
.text:0000A564                 mov     [ebp+arg_14], eax
.text:0000A567                 mov     [ebp+var_3C], 1
.text:0000A56E
.text:0000A56E loc_A56E:                               ; CODE XREF: _do_text_internal+180j
.text:0000A56E                                         ; _do_text_internal+191j ...
.text:0000A56E                 mov     ecx, [ebp+arg_C]
.text:0000A571                 movzx   edx, word ptr [ecx]
.text:0000A574                 and     edx, 0FFFFFC00h
.text:0000A57A                 cmp     edx, 0D800h
.text:0000A580                 jnz     short loc_A5EC
.text:0000A582                 cmp     [ebp+arg_10], 2
.text:0000A586                 jl      short loc_A5C1
.text:0000A588                 mov     eax, [ebp+arg_C]
.text:0000A58B                 movzx   ecx, word ptr [eax]
.text:0000A58E                 cmp     ecx, 0D800h
.text:0000A594                 jl      short loc_A5C1
.text:0000A596                 mov     edx, [ebp+arg_C]
.text:0000A599                 movzx   eax, word ptr [edx]
.text:0000A59C                 cmp     eax, 0DBFFh
.text:0000A5A1                 jg      short loc_A5C1
.text:0000A5A3                 mov     ecx, [ebp+arg_C]
.text:0000A5A6                 movzx   edx, word ptr [ecx+2]
.text:0000A5AA                 cmp     edx, 0DC00h
.text:0000A5B0                 jl      short loc_A5C1
.text:0000A5B2                 mov     eax, [ebp+arg_C]
.text:0000A5B5                 movzx   ecx, word ptr [eax+2]
.text:0000A5B9                 cmp     ecx, 0DFFFh
.text:0000A5BF                 jle     short loc_A5EC
.text:0000A5C1
.text:0000A5C1 loc_A5C1:                               ; CODE XREF: _do_text_internal+26Ej
.text:0000A5C1                                         ; _do_text_internal+27Cj ...
.text:0000A5C1                 mov     [ebp+var_68], 0
.text:0000A5C8                 jmp     short loc_A5D3
.text:0000A5CA ; ---------------------------------------------------------------------------
.text:0000A5CA
.text:0000A5CA loc_A5CA:                               ; CODE XREF: _do_text_internal+2D2j
.text:0000A5CA                 mov     edx, [ebp+var_68]
.text:0000A5CD                 add     edx, 1
.text:0000A5D0                 mov     [ebp+var_68], edx
.text:0000A5D3
.text:0000A5D3 loc_A5D3:                               ; CODE XREF: _do_text_internal+2B0j
.text:0000A5D3                 mov     eax, [ebp+var_68]
.text:0000A5D6                 cmp     eax, [ebp+arg_10]
.text:0000A5D9                 jge     short loc_A5EC
.text:0000A5DB                 mov     ecx, 0FFFDh
.text:0000A5E0                 mov     edx, [ebp+var_68]
.text:0000A5E3                 mov     eax, [ebp+arg_C]
.text:0000A5E6                 mov     [eax+edx*2], cx
.text:0000A5EA                 jmp     short loc_A5CA
.text:0000A5EC ; ---------------------------------------------------------------------------
.text:0000A5EC
.text:0000A5EC loc_A5EC:                               ; CODE XREF: _do_text_internal+268j
.text:0000A5EC                                         ; _do_text_internal+2A7j ...
.text:0000A5EC                 mov     ecx, [ebp+arg_C]
.text:0000A5EF                 movzx   edx, word ptr [ecx]
.text:0000A5F2                 and     edx, 0FFFFFF00h
.text:0000A5F8                 cmp     edx, 0F000h
.text:0000A5FE                 jnz     short loc_A609
.text:0000A600                 mov     eax, [ebp+var_1C]
.text:0000A603                 or      eax, 20h
.text:0000A606                 mov     [ebp+var_1C], eax
.text:0000A609
.text:0000A609 loc_A609:                               ; CODE XREF: _do_text_internal+2E6j
.text:0000A609                 mov     ecx, [ebp+arg_14]
.text:0000A60C                 and     ecx, 1FFh
.text:0000A612                 mov     [ebp+var_14], ecx
.text:0000A615                 mov     edx, [ebp+arg_14]
.text:0000A618                 and     edx, 3FE00h
.text:0000A61E                 shr     edx, 9
.text:0000A621                 mov     [ebp+var_18], edx
.text:0000A624                 cmp     ds:_bold_font_mode, 2
.text:0000A62B                 jnz     short loc_A640
.text:0000A62D                 mov     eax, [ebp+arg_14]
.text:0000A630                 and     eax, 40000h
.text:0000A635                 jz      short loc_A640
.text:0000A637                 mov     ecx, [ebp+var_1C]
.text:0000A63A                 or      ecx, 1
.text:0000A63D                 mov     [ebp+var_1C], ecx
.text:0000A640
.text:0000A640 loc_A640:                               ; CODE XREF: _do_text_internal+313j
.text:0000A640                                         ; _do_text_internal+31Dj
.text:0000A640                 cmp     ds:_und_mode, 1
.text:0000A647                 jnz     short loc_A65D
.text:0000A649                 mov     edx, [ebp+arg_14]
.text:0000A64C                 and     edx, 80000h
.text:0000A652                 jz      short loc_A65D
.text:0000A654                 mov     eax, [ebp+var_1C]
.text:0000A657                 or      eax, 2
.text:0000A65A                 mov     [ebp+var_1C], eax
.text:0000A65D
.text:0000A65D loc_A65D:                               ; CODE XREF: _do_text_internal+32Fj
.text:0000A65D                                         ; _do_text_internal+33Aj
.text:0000A65D                 mov     ecx, [ebp+var_1C]
.text:0000A660                 push    ecx
.text:0000A661                 call    _another_font
.text:0000A666                 add     esp, 4
.text:0000A669                 mov     edx, [ebp+var_1C]
.text:0000A66C                 cmp     ds:_fonts[edx*4], 0
.text:0000A674                 jnz     short loc_A68E
.text:0000A676                 mov     eax, [ebp+var_1C]
.text:0000A679                 and     eax, 2
.text:0000A67C                 jz      short loc_A685
.text:0000A67E                 mov     [ebp+var_3C], 1
.text:0000A685
.text:0000A685 loc_A685:                               ; CODE XREF: _do_text_internal+364j
.text:0000A685                 mov     ecx, [ebp+var_1C]
.text:0000A688                 and     ecx, 0FFFFFFFCh
.text:0000A68B                 mov     [ebp+var_1C], ecx
.text:0000A68E
.text:0000A68E loc_A68E:                               ; CODE XREF: _do_text_internal+35Cj
.text:0000A68E                 mov     edx, [ebp+var_1C]
.text:0000A691                 push    edx
.text:0000A692                 call    _another_font
.text:0000A697                 add     esp, 4
.text:0000A69A                 mov     eax, [ebp+var_1C]
.text:0000A69D                 cmp     ds:_fonts[eax*4], 0
.text:0000A6A5                 jnz     short loc_A6AE
.text:0000A6A7                 mov     [ebp+var_1C], 0
.text:0000A6AE
.text:0000A6AE loc_A6AE:                               ; CODE XREF: _do_text_internal+38Dj
.text:0000A6AE                 mov     ecx, [ebp+arg_14]
.text:0000A6B1                 and     ecx, 100000h
.text:0000A6B7                 jz      short loc_A6CB
.text:0000A6B9                 mov     edx, [ebp+var_14]
.text:0000A6BC                 mov     [ebp+var_10], edx
.text:0000A6BF                 mov     eax, [ebp+var_18]
.text:0000A6C2                 mov     [ebp+var_14], eax
.text:0000A6C5                 mov     ecx, [ebp+var_10]
.text:0000A6C8                 mov     [ebp+var_18], ecx
.text:0000A6CB
.text:0000A6CB loc_A6CB:                               ; CODE XREF: _do_text_internal+39Fj
.text:0000A6CB                 cmp     ds:_bold_colours, 0
.text:0000A6D2                 jz      short loc_A708
.text:0000A6D4                 mov     edx, [ebp+arg_14]
.text:0000A6D7                 and     edx, 40000h
.text:0000A6DD                 jz      short loc_A708
.text:0000A6DF                 cmp     [ebp+var_5C], 0
.text:0000A6E3                 jnz     short loc_A708
.text:0000A6E5                 cmp     [ebp+var_14], 10h
.text:0000A6E9                 jge     short loc_A6F6
.text:0000A6EB                 mov     eax, [ebp+var_14]
.text:0000A6EE                 or      eax, 8
.text:0000A6F1                 mov     [ebp+var_14], eax
.text:0000A6F4                 jmp     short loc_A708
.text:0000A6F6 ; ---------------------------------------------------------------------------
.text:0000A6F6
.text:0000A6F6 loc_A6F6:                               ; CODE XREF: _do_text_internal+3D1j
.text:0000A6F6                 cmp     [ebp+var_14], 100h
.text:0000A6FD                 jl      short loc_A708
.text:0000A6FF                 mov     ecx, [ebp+var_14]
.text:0000A702                 or      ecx, 1
.text:0000A705                 mov     [ebp+var_14], ecx
.text:0000A708
.text:0000A708 loc_A708:                               ; CODE XREF: _do_text_internal+3BAj
.text:0000A708                                         ; _do_text_internal+3C5j ...
.text:0000A708                 cmp     ds:_bold_colours, 0
.text:0000A70F                 jz      short loc_A73F
.text:0000A711                 mov     edx, [ebp+arg_14]
.text:0000A714                 and     edx, 200000h
.text:0000A71A                 jz      short loc_A73F
.text:0000A71C                 cmp     [ebp+var_18], 10h
.text:0000A720                 jge     short loc_A72D
.text:0000A722                 mov     eax, [ebp+var_18]
.text:0000A725                 or      eax, 8
.text:0000A728                 mov     [ebp+var_18], eax
.text:0000A72B                 jmp     short loc_A73F
.text:0000A72D ; ---------------------------------------------------------------------------
.text:0000A72D
.text:0000A72D loc_A72D:                               ; CODE XREF: _do_text_internal+408j
.text:0000A72D                 cmp     [ebp+var_18], 100h
.text:0000A734                 jl      short loc_A73F
.text:0000A736                 mov     ecx, [ebp+var_18]
.text:0000A739                 or      ecx, 1
.text:0000A73C                 mov     [ebp+var_18], ecx
.text:0000A73F
.text:0000A73F loc_A73F:                               ; CODE XREF: _do_text_internal+3F7j
.text:0000A73F                                         ; _do_text_internal+402j ...
.text:0000A73F                 mov     edx, [ebp+var_14]
.text:0000A742                 mov     eax, ds:_colours[edx*4]
.text:0000A749                 mov     [ebp+color], eax
.text:0000A74C                 mov     ecx, [ebp+var_18]
.text:0000A74F                 mov     edx, ds:_colours[ecx*4]
.text:0000A756                 mov     [ebp+var_C], edx
.text:0000A759                 mov     esi, esp
.text:0000A75B                 mov     eax, [ebp+var_1C]
.text:0000A75E                 mov     ecx, ds:_fonts[eax*4]
.text:0000A765                 push    ecx             ; h
.text:0000A766                 mov     edx, [ebp+hdc]
.text:0000A769                 push    edx             ; hdc
.text:0000A76A                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000A770                 cmp     esi, esp
.text:0000A772                 call    __RTC_CheckEsp
.text:0000A777                 mov     esi, esp
.text:0000A779                 mov     eax, [ebp+color]
.text:0000A77C                 push    eax             ; color
.text:0000A77D                 mov     ecx, [ebp+hdc]
.text:0000A780                 push    ecx             ; hdc
.text:0000A781                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text:0000A787                 cmp     esi, esp
.text:0000A789                 call    __RTC_CheckEsp
.text:0000A78E                 mov     esi, esp
.text:0000A790                 mov     edx, [ebp+var_C]
.text:0000A793                 push    edx             ; color
.text:0000A794                 mov     eax, [ebp+hdc]
.text:0000A797                 push    eax             ; hdc
.text:0000A798                 call    dword ptr ds:__imp__SetBkColor@8 ; SetBkColor(x,x)
.text:0000A79E                 cmp     esi, esp
.text:0000A7A0                 call    __RTC_CheckEsp
.text:0000A7A5                 mov     ecx, [ebp+arg_14]
.text:0000A7A8                 and     ecx, 80000000h
.text:0000A7AE                 jz      short loc_A7C7
.text:0000A7B0                 mov     esi, esp
.text:0000A7B2                 push    1               ; mode
.text:0000A7B4                 mov     edx, [ebp+hdc]
.text:0000A7B7                 push    edx             ; hdc
.text:0000A7B8                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000A7BE                 cmp     esi, esp
.text:0000A7C0                 call    __RTC_CheckEsp
.text:0000A7C5                 jmp     short loc_A7DC
.text:0000A7C7 ; ---------------------------------------------------------------------------
.text:0000A7C7
.text:0000A7C7 loc_A7C7:                               ; CODE XREF: _do_text_internal+496j
.text:0000A7C7                 mov     esi, esp
.text:0000A7C9                 push    2               ; mode
.text:0000A7CB                 mov     eax, [ebp+hdc]
.text:0000A7CE                 push    eax             ; hdc
.text:0000A7CF                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000A7D5                 cmp     esi, esp
.text:0000A7D7                 call    __RTC_CheckEsp
.text:0000A7DC
.text:0000A7DC loc_A7DC:                               ; CODE XREF: _do_text_internal+4ADj
.text:0000A7DC                 mov     ecx, [ebp+arg_4]
.text:0000A7DF                 mov     [ebp+rect.left], ecx
.text:0000A7E2                 mov     edx, [ebp+arg_8]
.text:0000A7E5                 mov     [ebp+rect.top], edx
.text:0000A7E8                 mov     eax, [ebp+var_44]
.text:0000A7EB                 imul    eax, [ebp+arg_10]
.text:0000A7EF                 add     eax, [ebp+arg_4]
.text:0000A7F2                 mov     [ebp+rect.right], eax
.text:0000A7F5                 mov     ecx, [ebp+arg_8]
.text:0000A7F8                 add     ecx, ds:_font_height
.text:0000A7FE                 mov     [ebp+rect.bottom], ecx
.text:0000A801                 mov     [ebp+var_70], 0
.text:0000A808                 mov     [ebp+var_6C], 0
.text:0000A80F                 jmp     short loc_A81A
.text:0000A811 ; ---------------------------------------------------------------------------
.text:0000A811
.text:0000A811 loc_A811:                               ; CODE XREF: _do_text_internal:loc_A92Fj
.text:0000A811                 mov     edx, [ebp+var_6C]
.text:0000A814                 add     edx, 1
.text:0000A817                 mov     [ebp+var_6C], edx
.text:0000A81A
.text:0000A81A loc_A81A:                               ; CODE XREF: _do_text_internal+4F7j
.text:0000A81A                 mov     eax, [ebp+var_6C]
.text:0000A81D                 cmp     eax, [ebp+arg_10]
.text:0000A820                 jge     loc_A934
.text:0000A826                 mov     ecx, [ebp+var_6C]
.text:0000A829                 add     ecx, 1
.text:0000A82C                 cmp     ecx, [ebp+arg_10]
.text:0000A82F                 jge     short loc_A877
.text:0000A831                 mov     edx, [ebp+var_6C]
.text:0000A834                 mov     eax, [ebp+arg_C]
.text:0000A837                 movzx   ecx, word ptr [eax+edx*2]
.text:0000A83B                 cmp     ecx, 0DB40h
.text:0000A841                 jnz     short loc_A877
.text:0000A843                 mov     edx, [ebp+var_6C]
.text:0000A846                 mov     eax, [ebp+arg_C]
.text:0000A849                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000A84E                 cmp     ecx, 0DD00h
.text:0000A854                 jl      short loc_A877
.text:0000A856                 mov     edx, [ebp+var_6C]
.text:0000A859                 mov     eax, [ebp+arg_C]
.text:0000A85C                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000A861                 cmp     ecx, 0DDEFh
.text:0000A867                 jg      short loc_A877
.text:0000A869                 mov     edx, [ebp+var_6C]
.text:0000A86C                 add     edx, 1
.text:0000A86F                 mov     [ebp+var_6C], edx
.text:0000A872                 jmp     loc_A92F
.text:0000A877 ; ---------------------------------------------------------------------------
.text:0000A877
.text:0000A877 loc_A877:                               ; CODE XREF: _do_text_internal+517j
.text:0000A877                                         ; _do_text_internal+529j ...
.text:0000A877                 mov     eax, [ebp+var_6C]
.text:0000A87A                 add     eax, 1
.text:0000A87D                 cmp     eax, [ebp+arg_10]
.text:0000A880                 jge     short loc_A8DC
.text:0000A882                 mov     ecx, [ebp+var_6C]
.text:0000A885                 mov     edx, [ebp+arg_C]
.text:0000A888                 movzx   eax, word ptr [edx+ecx*2]
.text:0000A88C                 cmp     eax, 0D800h
.text:0000A891                 jl      short loc_A8DC
.text:0000A893                 mov     ecx, [ebp+var_6C]
.text:0000A896                 mov     edx, [ebp+arg_C]
.text:0000A899                 movzx   eax, word ptr [edx+ecx*2]
.text:0000A89D                 cmp     eax, 0DBFFh
.text:0000A8A2                 jg      short loc_A8DC
.text:0000A8A4                 mov     ecx, [ebp+var_6C]
.text:0000A8A7                 mov     edx, [ebp+arg_C]
.text:0000A8AA                 movzx   eax, word ptr [edx+ecx*2+2]
.text:0000A8AF                 cmp     eax, 0DC00h
.text:0000A8B4                 jl      short loc_A8DC
.text:0000A8B6                 mov     ecx, [ebp+var_6C]
.text:0000A8B9                 mov     edx, [ebp+arg_C]
.text:0000A8BC                 movzx   eax, word ptr [edx+ecx*2+2]
.text:0000A8C1                 cmp     eax, 0DFFFh
.text:0000A8C6                 jg      short loc_A8DC
.text:0000A8C8                 mov     ecx, [ebp+var_70]
.text:0000A8CB                 add     ecx, [ebp+var_44]
.text:0000A8CE                 mov     [ebp+var_70], ecx
.text:0000A8D1                 mov     edx, [ebp+var_6C]
.text:0000A8D4                 add     edx, 1
.text:0000A8D7                 mov     [ebp+var_6C], edx
.text:0000A8DA                 jmp     short loc_A92F
.text:0000A8DC ; ---------------------------------------------------------------------------
.text:0000A8DC
.text:0000A8DC loc_A8DC:                               ; CODE XREF: _do_text_internal+568j
.text:0000A8DC                                         ; _do_text_internal+579j ...
.text:0000A8DC                 mov     eax, [ebp+var_6C]
.text:0000A8DF                 mov     ecx, [ebp+arg_C]
.text:0000A8E2                 movzx   edx, word ptr [ecx+eax*2]
.text:0000A8E6                 cmp     edx, 180Bh
.text:0000A8EC                 jl      short loc_A900
.text:0000A8EE                 mov     eax, [ebp+var_6C]
.text:0000A8F1                 mov     ecx, [ebp+arg_C]
.text:0000A8F4                 movzx   edx, word ptr [ecx+eax*2]
.text:0000A8F8                 cmp     edx, 180Dh
.text:0000A8FE                 jle     short loc_A924
.text:0000A900
.text:0000A900 loc_A900:                               ; CODE XREF: _do_text_internal+5D4j
.text:0000A900                 mov     eax, [ebp+var_6C]
.text:0000A903                 mov     ecx, [ebp+arg_C]
.text:0000A906                 movzx   edx, word ptr [ecx+eax*2]
.text:0000A90A                 cmp     edx, 0FE00h
.text:0000A910                 jl      short loc_A926
.text:0000A912                 mov     eax, [ebp+var_6C]
.text:0000A915                 mov     ecx, [ebp+arg_C]
.text:0000A918                 movzx   edx, word ptr [ecx+eax*2]
.text:0000A91C                 cmp     edx, 0FE0Fh
.text:0000A922                 jg      short loc_A926
.text:0000A924
.text:0000A924 loc_A924:                               ; CODE XREF: _do_text_internal+5E6j
.text:0000A924                 jmp     short loc_A92F
.text:0000A926 ; ---------------------------------------------------------------------------
.text:0000A926
.text:0000A926 loc_A926:                               ; CODE XREF: _do_text_internal+5F8j
.text:0000A926                                         ; _do_text_internal+60Aj
.text:0000A926                 mov     eax, [ebp+var_70]
.text:0000A929                 add     eax, [ebp+var_44]
.text:0000A92C                 mov     [ebp+var_70], eax
.text:0000A92F
.text:0000A92F loc_A92F:                               ; CODE XREF: _do_text_internal+55Aj
.text:0000A92F                                         ; _do_text_internal+5C2j ...
.text:0000A92F                 jmp     loc_A811
.text:0000A934 ; ---------------------------------------------------------------------------
.text:0000A934
.text:0000A934 loc_A934:                               ; CODE XREF: _do_text_internal+508j
.text:0000A934                 mov     ecx, [ebp+rect.left]
.text:0000A937                 add     ecx, [ebp+var_70]
.text:0000A93A                 mov     [ebp+rect.right], ecx
.text:0000A93D                 mov     edx, dword ptr ds:_term
.text:0000A943                 mov     eax, ds:_font_width
.text:0000A948                 imul    eax, [edx+12Ch]
.text:0000A94F                 add     eax, ds:_offset_width
.text:0000A955                 cmp     [ebp+rect.right], eax
.text:0000A958                 jle     short loc_A976
.text:0000A95A                 mov     ecx, dword ptr ds:_term
.text:0000A960                 mov     edx, ds:_font_width
.text:0000A966                 imul    edx, [ecx+12Ch]
.text:0000A96D                 add     edx, ds:_offset_width
.text:0000A973                 mov     [ebp+rect.right], edx
.text:0000A976
.text:0000A976 loc_A976:                               ; CODE XREF: _do_text_internal+640j
.text:0000A976                 cmp     ds:_font_varpitch, 0
.text:0000A97D                 jz      short loc_A9AF
.text:0000A97F                 mov     eax, [ebp+var_44]
.text:0000A982                 cdq
.text:0000A983                 sub     eax, edx
.text:0000A985                 sar     eax, 1
.text:0000A987                 mov     [ebp+var_4C], eax
.text:0000A98A                 mov     esi, esp
.text:0000A98C                 push    6               ; align
.text:0000A98E                 mov     eax, [ebp+hdc]
.text:0000A991                 push    eax             ; hdc
.text:0000A992                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text:0000A998                 cmp     esi, esp
.text:0000A99A                 call    __RTC_CheckEsp
.text:0000A99F                 mov     [ebp+lpDx], 0
.text:0000A9A6                 mov     [ebp+var_50], 1
.text:0000A9AD                 jmp     short loc_A9DA
.text:0000A9AF ; ---------------------------------------------------------------------------
.text:0000A9AF
.text:0000A9AF loc_A9AF:                               ; CODE XREF: _do_text_internal+665j
.text:0000A9AF                 mov     [ebp+var_4C], 0
.text:0000A9B6                 mov     esi, esp
.text:0000A9B8                 push    0               ; align
.text:0000A9BA                 mov     ecx, [ebp+hdc]
.text:0000A9BD                 push    ecx             ; hdc
.text:0000A9BE                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text:0000A9C4                 cmp     esi, esp
.text:0000A9C6                 call    __RTC_CheckEsp
.text:0000A9CB                 mov     edx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000A9D1                 mov     [ebp+lpDx], edx
.text:0000A9D4                 mov     eax, [ebp+arg_10]
.text:0000A9D7                 mov     [ebp+var_50], eax
.text:0000A9DA
.text:0000A9DA loc_A9DA:                               ; CODE XREF: _do_text_internal+695j
.text:0000A9DA                 mov     [ebp+var_58], 1
.text:0000A9E1                 mov     ecx, [ebp+arg_10]
.text:0000A9E4                 mov     [ebp+var_54], ecx
.text:0000A9E7                 jmp     short loc_AA0B
.text:0000A9E9 ; ---------------------------------------------------------------------------
.text:0000A9E9
.text:0000A9E9 loc_A9E9:                               ; CODE XREF: _do_text_internal+F58j
.text:0000A9E9                 mov     edx, [ebp+arg_10]
.text:0000A9EC                 mov     eax, [ebp+arg_C]
.text:0000A9EF                 lea     ecx, [eax+edx*2]
.text:0000A9F2                 mov     [ebp+arg_C], ecx
.text:0000A9F5                 mov     edx, [ebp+var_54]
.text:0000A9F8                 sub     edx, [ebp+arg_10]
.text:0000A9FB                 mov     [ebp+var_54], edx
.text:0000A9FE                 mov     eax, [ebp+var_44]
.text:0000AA01                 imul    eax, [ebp+var_64]
.text:0000AA05                 add     eax, [ebp+arg_4]
.text:0000AA08                 mov     [ebp+arg_4], eax
.text:0000AA0B
.text:0000AA0B loc_AA0B:                               ; CODE XREF: _do_text_internal+6CFj
.text:0000AA0B                 cmp     [ebp+var_54], 0
.text:0000AA0F                 jle     loc_B275
.text:0000AA15                 mov     ecx, [ebp+var_50]
.text:0000AA18                 cmp     ecx, [ebp+var_54]
.text:0000AA1B                 jge     short loc_AA28
.text:0000AA1D                 mov     edx, [ebp+var_50]
.text:0000AA20                 mov     [ebp+var_B0], edx
.text:0000AA26                 jmp     short loc_AA31
.text:0000AA28 ; ---------------------------------------------------------------------------
.text:0000AA28
.text:0000AA28 loc_AA28:                               ; CODE XREF: _do_text_internal+703j
.text:0000AA28                 mov     eax, [ebp+var_54]
.text:0000AA2B                 mov     [ebp+var_B0], eax
.text:0000AA31
.text:0000AA31 loc_AA31:                               ; CODE XREF: _do_text_internal+70Ej
.text:0000AA31                 mov     ecx, [ebp+var_B0]
.text:0000AA37                 mov     [ebp+arg_10], ecx
.text:0000AA3A                 mov     edx, [ebp+arg_10]
.text:0000AA3D                 mov     [ebp+var_64], edx
.text:0000AA40                 cmp     [ebp+var_50], 1
.text:0000AA44                 jnz     loc_AB38
.text:0000AA4A                 cmp     [ebp+var_54], 1
.text:0000AA4E                 jl      short loc_AA92
.text:0000AA50                 mov     eax, [ebp+arg_C]
.text:0000AA53                 movzx   ecx, word ptr [eax]
.text:0000AA56                 cmp     ecx, 0D800h
.text:0000AA5C                 jl      short loc_AA92
.text:0000AA5E                 mov     edx, [ebp+arg_C]
.text:0000AA61                 movzx   eax, word ptr [edx]
.text:0000AA64                 cmp     eax, 0DBFFh
.text:0000AA69                 jg      short loc_AA92
.text:0000AA6B                 mov     ecx, [ebp+arg_C]
.text:0000AA6E                 movzx   edx, word ptr [ecx+2]
.text:0000AA72                 cmp     edx, 0DC00h
.text:0000AA78                 jl      short loc_AA92
.text:0000AA7A                 mov     eax, [ebp+arg_C]
.text:0000AA7D                 movzx   ecx, word ptr [eax+2]
.text:0000AA81                 cmp     ecx, 0DFFFh
.text:0000AA87                 jg      short loc_AA92
.text:0000AA89                 mov     edx, [ebp+arg_10]
.text:0000AA8C                 add     edx, 1
.text:0000AA8F                 mov     [ebp+arg_10], edx
.text:0000AA92
.text:0000AA92 loc_AA92:                               ; CODE XREF: _do_text_internal+736j
.text:0000AA92                                         ; _do_text_internal+744j ...
.text:0000AA92                 mov     eax, [ebp+var_54]
.text:0000AA95                 sub     eax, [ebp+arg_10]
.text:0000AA98                 cmp     eax, 1
.text:0000AA9B                 jl      short loc_AAEC
.text:0000AA9D                 mov     ecx, [ebp+arg_10]
.text:0000AAA0                 mov     edx, [ebp+arg_C]
.text:0000AAA3                 movzx   eax, word ptr [edx+ecx*2]
.text:0000AAA7                 cmp     eax, 180Bh
.text:0000AAAC                 jl      short loc_AABF
.text:0000AAAE                 mov     ecx, [ebp+arg_10]
.text:0000AAB1                 mov     edx, [ebp+arg_C]
.text:0000AAB4                 movzx   eax, word ptr [edx+ecx*2]
.text:0000AAB8                 cmp     eax, 180Dh
.text:0000AABD                 jle     short loc_AAE1
.text:0000AABF
.text:0000AABF loc_AABF:                               ; CODE XREF: _do_text_internal+794j
.text:0000AABF                 mov     ecx, [ebp+arg_10]
.text:0000AAC2                 mov     edx, [ebp+arg_C]
.text:0000AAC5                 movzx   eax, word ptr [edx+ecx*2]
.text:0000AAC9                 cmp     eax, 0FE00h
.text:0000AACE                 jl      short loc_AAEC
.text:0000AAD0                 mov     ecx, [ebp+arg_10]
.text:0000AAD3                 mov     edx, [ebp+arg_C]
.text:0000AAD6                 movzx   eax, word ptr [edx+ecx*2]
.text:0000AADA                 cmp     eax, 0FE0Fh
.text:0000AADF                 jg      short loc_AAEC
.text:0000AAE1
.text:0000AAE1 loc_AAE1:                               ; CODE XREF: _do_text_internal+7A5j
.text:0000AAE1                 mov     ecx, [ebp+arg_10]
.text:0000AAE4                 add     ecx, 1
.text:0000AAE7                 mov     [ebp+arg_10], ecx
.text:0000AAEA                 jmp     short loc_AB38
.text:0000AAEC ; ---------------------------------------------------------------------------
.text:0000AAEC
.text:0000AAEC loc_AAEC:                               ; CODE XREF: _do_text_internal+783j
.text:0000AAEC                                         ; _do_text_internal+7B6j ...
.text:0000AAEC                 mov     edx, [ebp+var_54]
.text:0000AAEF                 sub     edx, [ebp+arg_10]
.text:0000AAF2                 cmp     edx, 2
.text:0000AAF5                 jl      short loc_AB38
.text:0000AAF7                 mov     eax, [ebp+arg_10]
.text:0000AAFA                 mov     ecx, [ebp+arg_C]
.text:0000AAFD                 movzx   edx, word ptr [ecx+eax*2]
.text:0000AB01                 cmp     edx, 0DB40h
.text:0000AB07                 jnz     short loc_AB38
.text:0000AB09                 mov     eax, [ebp+arg_10]
.text:0000AB0C                 mov     ecx, [ebp+arg_C]
.text:0000AB0F                 movzx   edx, word ptr [ecx+eax*2+2]
.text:0000AB14                 cmp     edx, 0DD00h
.text:0000AB1A                 jl      short loc_AB38
.text:0000AB1C                 mov     eax, [ebp+arg_10]
.text:0000AB1F                 mov     ecx, [ebp+arg_C]
.text:0000AB22                 movzx   edx, word ptr [ecx+eax*2+2]
.text:0000AB27                 cmp     edx, 0DDEFh
.text:0000AB2D                 jg      short loc_AB38
.text:0000AB2F                 mov     eax, [ebp+arg_10]
.text:0000AB32                 add     eax, 2
.text:0000AB35                 mov     [ebp+arg_10], eax
.text:0000AB38
.text:0000AB38 loc_AB38:                               ; CODE XREF: _do_text_internal+72Cj
.text:0000AB38                                         ; _do_text_internal+7D2j ...
.text:0000AB38                 mov     ecx, [ebp+arg_10]
.text:0000AB3B                 cmp     ecx, ds:?lpDx_len@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx_len
.text:0000AB41                 jle     short loc_AB85
.text:0000AB43                 mov     eax, [ebp+arg_10]
.text:0000AB46                 imul    eax, 9
.text:0000AB49                 cdq
.text:0000AB4A                 and     edx, 7
.text:0000AB4D                 add     eax, edx
.text:0000AB4F                 sar     eax, 3
.text:0000AB52                 add     eax, 10h
.text:0000AB55                 mov     ds:?lpDx_len@?1??do_text_internal@@9@9, eax ; `do_text_internal'::`2'::lpDx_len
.text:0000AB5A                 push    4
.text:0000AB5C                 mov     edx, ds:?lpDx_len@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx_len
.text:0000AB62                 push    edx
.text:0000AB63                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AB68                 push    eax
.text:0000AB69                 call    _saferealloc
.text:0000AB6E                 add     esp, 0Ch
.text:0000AB71                 mov     ds:?lpDx@?1??do_text_internal@@9@9, eax ; `do_text_internal'::`2'::lpDx
.text:0000AB76                 cmp     [ebp+lpDx], 0
.text:0000AB7A                 jz      short loc_AB85
.text:0000AB7C                 mov     ecx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AB82                 mov     [ebp+lpDx], ecx
.text:0000AB85
.text:0000AB85 loc_AB85:                               ; CODE XREF: _do_text_internal+829j
.text:0000AB85                                         ; _do_text_internal+862j
.text:0000AB85                 mov     [ebp+var_74], 0
.text:0000AB8C                 jmp     short loc_AB97
.text:0000AB8E ; ---------------------------------------------------------------------------
.text:0000AB8E
.text:0000AB8E loc_AB8E:                               ; CODE XREF: _do_text_internal:loc_AD22j
.text:0000AB8E                 mov     edx, [ebp+var_74]
.text:0000AB91                 add     edx, 1
.text:0000AB94                 mov     [ebp+var_74], edx
.text:0000AB97
.text:0000AB97 loc_AB97:                               ; CODE XREF: _do_text_internal+874j
.text:0000AB97                 mov     eax, [ebp+var_74]
.text:0000AB9A                 cmp     eax, [ebp+arg_10]
.text:0000AB9D                 jge     loc_AD27
.text:0000ABA3                 mov     ecx, [ebp+var_74]
.text:0000ABA6                 mov     edx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000ABAC                 mov     eax, [ebp+var_44]
.text:0000ABAF                 mov     [edx+ecx*4], eax
.text:0000ABB2                 mov     ecx, [ebp+var_74]
.text:0000ABB5                 add     ecx, 1
.text:0000ABB8                 cmp     ecx, [ebp+arg_10]
.text:0000ABBB                 jge     short loc_AC38
.text:0000ABBD                 mov     edx, [ebp+var_74]
.text:0000ABC0                 mov     eax, [ebp+arg_C]
.text:0000ABC3                 movzx   ecx, word ptr [eax+edx*2]
.text:0000ABC7                 cmp     ecx, 0DB40h
.text:0000ABCD                 jnz     short loc_AC38
.text:0000ABCF                 mov     edx, [ebp+var_74]
.text:0000ABD2                 mov     eax, [ebp+arg_C]
.text:0000ABD5                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000ABDA                 cmp     ecx, 0DD00h
.text:0000ABE0                 jl      short loc_AC38
.text:0000ABE2                 mov     edx, [ebp+var_74]
.text:0000ABE5                 mov     eax, [ebp+arg_C]
.text:0000ABE8                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000ABED                 cmp     ecx, 0DDEFh
.text:0000ABF3                 jg      short loc_AC38
.text:0000ABF5                 cmp     [ebp+var_74], 0
.text:0000ABF9                 jle     short loc_AC0B
.text:0000ABFB                 mov     edx, [ebp+var_74]
.text:0000ABFE                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AC03                 mov     dword ptr [eax+edx*4-4], 0
.text:0000AC0B
.text:0000AC0B loc_AC0B:                               ; CODE XREF: _do_text_internal+8E1j
.text:0000AC0B                 mov     ecx, [ebp+var_74]
.text:0000AC0E                 mov     edx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AC14                 mov     dword ptr [edx+ecx*4], 0
.text:0000AC1B                 mov     eax, [ebp+var_74]
.text:0000AC1E                 add     eax, 1
.text:0000AC21                 mov     [ebp+var_74], eax
.text:0000AC24                 mov     ecx, [ebp+var_74]
.text:0000AC27                 mov     edx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AC2D                 mov     eax, [ebp+var_44]
.text:0000AC30                 mov     [edx+ecx*4], eax
.text:0000AC33                 jmp     loc_AD22
.text:0000AC38 ; ---------------------------------------------------------------------------
.text:0000AC38
.text:0000AC38 loc_AC38:                               ; CODE XREF: _do_text_internal+8A3j
.text:0000AC38                                         ; _do_text_internal+8B5j ...
.text:0000AC38                 mov     ecx, [ebp+var_74]
.text:0000AC3B                 add     ecx, 1
.text:0000AC3E                 cmp     ecx, [ebp+arg_10]
.text:0000AC41                 jge     short loc_ACB5
.text:0000AC43                 mov     edx, [ebp+var_74]
.text:0000AC46                 mov     eax, [ebp+arg_C]
.text:0000AC49                 movzx   ecx, word ptr [eax+edx*2]
.text:0000AC4D                 cmp     ecx, 0D800h
.text:0000AC53                 jl      short loc_ACB5
.text:0000AC55                 mov     edx, [ebp+var_74]
.text:0000AC58                 mov     eax, [ebp+arg_C]
.text:0000AC5B                 movzx   ecx, word ptr [eax+edx*2]
.text:0000AC5F                 cmp     ecx, 0DBFFh
.text:0000AC65                 jg      short loc_ACB5
.text:0000AC67                 mov     edx, [ebp+var_74]
.text:0000AC6A                 mov     eax, [ebp+arg_C]
.text:0000AC6D                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000AC72                 cmp     ecx, 0DC00h
.text:0000AC78                 jl      short loc_ACB5
.text:0000AC7A                 mov     edx, [ebp+var_74]
.text:0000AC7D                 mov     eax, [ebp+arg_C]
.text:0000AC80                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000AC85                 cmp     ecx, 0DFFFh
.text:0000AC8B                 jg      short loc_ACB5
.text:0000AC8D                 mov     edx, [ebp+var_74]
.text:0000AC90                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AC95                 mov     dword ptr [eax+edx*4], 0
.text:0000AC9C                 mov     ecx, [ebp+var_74]
.text:0000AC9F                 add     ecx, 1
.text:0000ACA2                 mov     [ebp+var_74], ecx
.text:0000ACA5                 mov     edx, [ebp+var_74]
.text:0000ACA8                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000ACAD                 mov     ecx, [ebp+var_44]
.text:0000ACB0                 mov     [eax+edx*4], ecx
.text:0000ACB3                 jmp     short loc_AD22
.text:0000ACB5 ; ---------------------------------------------------------------------------
.text:0000ACB5
.text:0000ACB5 loc_ACB5:                               ; CODE XREF: _do_text_internal+929j
.text:0000ACB5                                         ; _do_text_internal+93Bj ...
.text:0000ACB5                 mov     edx, [ebp+var_74]
.text:0000ACB8                 mov     eax, [ebp+arg_C]
.text:0000ACBB                 movzx   ecx, word ptr [eax+edx*2]
.text:0000ACBF                 cmp     ecx, 180Bh
.text:0000ACC5                 jl      short loc_ACD9
.text:0000ACC7                 mov     edx, [ebp+var_74]
.text:0000ACCA                 mov     eax, [ebp+arg_C]
.text:0000ACCD                 movzx   ecx, word ptr [eax+edx*2]
.text:0000ACD1                 cmp     ecx, 180Dh
.text:0000ACD7                 jle     short loc_ACFD
.text:0000ACD9
.text:0000ACD9 loc_ACD9:                               ; CODE XREF: _do_text_internal+9ADj
.text:0000ACD9                 mov     edx, [ebp+var_74]
.text:0000ACDC                 mov     eax, [ebp+arg_C]
.text:0000ACDF                 movzx   ecx, word ptr [eax+edx*2]
.text:0000ACE3                 cmp     ecx, 0FE00h
.text:0000ACE9                 jl      short loc_AD22
.text:0000ACEB                 mov     edx, [ebp+var_74]
.text:0000ACEE                 mov     eax, [ebp+arg_C]
.text:0000ACF1                 movzx   ecx, word ptr [eax+edx*2]
.text:0000ACF5                 cmp     ecx, 0FE0Fh
.text:0000ACFB                 jg      short loc_AD22
.text:0000ACFD
.text:0000ACFD loc_ACFD:                               ; CODE XREF: _do_text_internal+9BFj
.text:0000ACFD                 cmp     [ebp+var_74], 0
.text:0000AD01                 jle     short loc_AD13
.text:0000AD03                 mov     edx, [ebp+var_74]
.text:0000AD06                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AD0B                 mov     dword ptr [eax+edx*4-4], 0
.text:0000AD13
.text:0000AD13 loc_AD13:                               ; CODE XREF: _do_text_internal+9E9j
.text:0000AD13                 mov     ecx, [ebp+var_74]
.text:0000AD16                 mov     edx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AD1C                 mov     eax, [ebp+var_44]
.text:0000AD1F                 mov     [edx+ecx*4], eax
.text:0000AD22
.text:0000AD22 loc_AD22:                               ; CODE XREF: _do_text_internal+91Bj
.text:0000AD22                                         ; _do_text_internal+99Bj ...
.text:0000AD22                 jmp     loc_AB8E
.text:0000AD27 ; ---------------------------------------------------------------------------
.text:0000AD27
.text:0000AD27 loc_AD27:                               ; CODE XREF: _do_text_internal+885j
.text:0000AD27                 cmp     ds:dword_5C4, 0
.text:0000AD2E                 jz      loc_AF9A
.text:0000AD34                 mov     ecx, [ebp+arg_C]
.text:0000AD37                 movzx   edx, word ptr [ecx]
.text:0000AD3A                 and     edx, 0FFFFFF00h
.text:0000AD40                 cmp     edx, 0F100h
.text:0000AD46                 jnz     loc_AF9A
.text:0000AD4C                 mov     eax, [ebp+arg_10]
.text:0000AD4F                 cmp     eax, ds:?uni_len@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_len
.text:0000AD55                 jle     short loc_AD84
.text:0000AD57                 mov     ecx, ds:?uni_buf@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_buf
.text:0000AD5D                 push    ecx
.text:0000AD5E                 call    _safefree
.text:0000AD63                 add     esp, 4
.text:0000AD66                 mov     edx, [ebp+arg_10]
.text:0000AD69                 mov     ds:?uni_len@?BO@??do_text_internal@@9@9, edx ; `do_text_internal'::`30'::uni_len
.text:0000AD6F                 push    2
.text:0000AD71                 mov     eax, ds:?uni_len@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_len
.text:0000AD76                 push    eax
.text:0000AD77                 call    _safemalloc
.text:0000AD7C                 add     esp, 8
.text:0000AD7F                 mov     ds:?uni_buf@?BO@??do_text_internal@@9@9, eax ; `do_text_internal'::`30'::uni_buf
.text:0000AD84
.text:0000AD84 loc_AD84:                               ; CODE XREF: _do_text_internal+A3Dj
.text:0000AD84                 mov     [ebp+var_7C], 0
.text:0000AD8B                 mov     ecx, [ebp+var_7C]
.text:0000AD8E                 mov     [ebp+c], ecx
.text:0000AD91                 jmp     short loc_AD9C
.text:0000AD93 ; ---------------------------------------------------------------------------
.text:0000AD93
.text:0000AD93 loc_AD93:                               ; CODE XREF: _do_text_internal+B99j
.text:0000AD93                 mov     edx, [ebp+var_7C]
.text:0000AD96                 add     edx, 1
.text:0000AD99                 mov     [ebp+var_7C], edx
.text:0000AD9C
.text:0000AD9C loc_AD9C:                               ; CODE XREF: _do_text_internal+A79j
.text:0000AD9C                 mov     eax, [ebp+var_7C]
.text:0000AD9F                 cmp     eax, [ebp+arg_10]
.text:0000ADA2                 jge     loc_AEB6
.text:0000ADA8                 mov     ecx, 0FFFDh
.text:0000ADAD                 mov     edx, [ebp+c]
.text:0000ADB0                 mov     eax, ds:?uni_buf@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_buf
.text:0000ADB5                 mov     [eax+edx*2], cx
.text:0000ADB9                 mov     esi, esp
.text:0000ADBB                 mov     ecx, [ebp+var_7C]
.text:0000ADBE                 mov     edx, [ebp+arg_C]
.text:0000ADC1                 movzx   eax, byte ptr [edx+ecx*2]
.text:0000ADC5                 push    eax             ; TestChar
.text:0000ADC6                 mov     ecx, ds:CodePage
.text:0000ADCC                 push    ecx             ; CodePage
.text:0000ADCD                 call    dword ptr ds:__imp__IsDBCSLeadByteEx@8 ; IsDBCSLeadByteEx(x,x)
.text:0000ADD3                 cmp     esi, esp
.text:0000ADD5                 call    __RTC_CheckEsp
.text:0000ADDA                 test    eax, eax
.text:0000ADDC                 jz      loc_AE63
.text:0000ADE2                 mov     edx, [ebp+var_7C]
.text:0000ADE5                 mov     eax, [ebp+arg_C]
.text:0000ADE8                 movzx   ecx, word ptr [eax+edx*2]
.text:0000ADEC                 and     ecx, 0FFh
.text:0000ADF2                 mov     [ebp+MultiByteStr], cl
.text:0000ADF8                 mov     edx, [ebp+var_7C]
.text:0000ADFB                 mov     eax, [ebp+arg_C]
.text:0000ADFE                 movzx   ecx, word ptr [eax+edx*2+2]
.text:0000AE03                 and     ecx, 0FFh
.text:0000AE09                 mov     [ebp+var_83], cl
.text:0000AE0F                 mov     edx, [ebp+c]
.text:0000AE12                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AE17                 mov     ecx, [eax+edx*4]
.text:0000AE1A                 add     ecx, [ebp+var_44]
.text:0000AE1D                 mov     edx, [ebp+c]
.text:0000AE20                 mov     eax, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AE25                 mov     [eax+edx*4], ecx
.text:0000AE28                 mov     esi, esp
.text:0000AE2A                 push    1               ; cchWideChar
.text:0000AE2C                 mov     ecx, [ebp+c]
.text:0000AE2F                 mov     edx, ds:?uni_buf@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_buf
.text:0000AE35                 lea     eax, [edx+ecx*2]
.text:0000AE38                 push    eax             ; lpWideCharStr
.text:0000AE39                 push    2               ; cbMultiByte
.text:0000AE3B                 lea     ecx, [ebp+MultiByteStr]
.text:0000AE41                 push    ecx             ; lpMultiByteStr
.text:0000AE42                 push    4               ; dwFlags
.text:0000AE44                 mov     edx, ds:CodePage
.text:0000AE4A                 push    edx             ; CodePage
.text:0000AE4B                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:0000AE51                 cmp     esi, esp
.text:0000AE53                 call    __RTC_CheckEsp
.text:0000AE58                 mov     eax, [ebp+var_7C]
.text:0000AE5B                 add     eax, 1
.text:0000AE5E                 mov     [ebp+var_7C], eax
.text:0000AE61                 jmp     short loc_AEA8
.text:0000AE63 ; ---------------------------------------------------------------------------
.text:0000AE63
.text:0000AE63 loc_AE63:                               ; CODE XREF: _do_text_internal+AC4j
.text:0000AE63                 mov     ecx, [ebp+var_7C]
.text:0000AE66                 mov     edx, [ebp+arg_C]
.text:0000AE69                 movzx   eax, word ptr [edx+ecx*2]
.text:0000AE6D                 and     eax, 0FFh
.text:0000AE72                 mov     [ebp+var_8D], al
.text:0000AE78                 mov     esi, esp
.text:0000AE7A                 push    1               ; cchWideChar
.text:0000AE7C                 mov     ecx, [ebp+c]
.text:0000AE7F                 mov     edx, ds:?uni_buf@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_buf
.text:0000AE85                 lea     eax, [edx+ecx*2]
.text:0000AE88                 push    eax             ; lpWideCharStr
.text:0000AE89                 push    1               ; cbMultiByte
.text:0000AE8B                 lea     ecx, [ebp+var_8D]
.text:0000AE91                 push    ecx             ; lpMultiByteStr
.text:0000AE92                 push    4               ; dwFlags
.text:0000AE94                 mov     edx, ds:CodePage
.text:0000AE9A                 push    edx             ; CodePage
.text:0000AE9B                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:0000AEA1                 cmp     esi, esp
.text:0000AEA3                 call    __RTC_CheckEsp
.text:0000AEA8
.text:0000AEA8 loc_AEA8:                               ; CODE XREF: _do_text_internal+B49j
.text:0000AEA8                 mov     eax, [ebp+c]
.text:0000AEAB                 add     eax, 1
.text:0000AEAE                 mov     [ebp+c], eax
.text:0000AEB1                 jmp     loc_AD93
.text:0000AEB6 ; ---------------------------------------------------------------------------
.text:0000AEB6
.text:0000AEB6 loc_AEB6:                               ; CODE XREF: _do_text_internal+A8Aj
.text:0000AEB6                 cmp     [ebp+c], 0
.text:0000AEBA                 jg      short loc_AEC1
.text:0000AEBC                 jmp     loc_B372
.text:0000AEC1 ; ---------------------------------------------------------------------------
.text:0000AEC1
.text:0000AEC1 loc_AEC1:                               ; CODE XREF: _do_text_internal+BA2j
.text:0000AEC1                 mov     esi, esp
.text:0000AEC3                 mov     ecx, [ebp+lpDx]
.text:0000AEC6                 push    ecx             ; lpDx
.text:0000AEC7                 mov     edx, [ebp+c]
.text:0000AECA                 push    edx             ; c
.text:0000AECB                 mov     eax, ds:?uni_buf@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_buf
.text:0000AED0                 push    eax             ; lpString
.text:0000AED1                 lea     ecx, [ebp+rect]
.text:0000AED4                 push    ecx             ; lprect
.text:0000AED5                 mov     edx, [ebp+var_58]
.text:0000AED8                 neg     edx
.text:0000AEDA                 sbb     edx, edx
.text:0000AEDC                 and     edx, 2
.text:0000AEDF                 or      edx, 4
.text:0000AEE2                 push    edx             ; options
.text:0000AEE3                 xor     eax, eax
.text:0000AEE5                 cmp     [ebp+arg_18], 3
.text:0000AEE9                 setz    al
.text:0000AEEC                 imul    eax, ds:_font_height
.text:0000AEF3                 mov     ecx, [ebp+arg_8]
.text:0000AEF6                 sub     ecx, eax
.text:0000AEF8                 add     ecx, [ebp+var_48]
.text:0000AEFB                 push    ecx             ; y
.text:0000AEFC                 mov     edx, [ebp+arg_4]
.text:0000AEFF                 add     edx, [ebp+var_4C]
.text:0000AF02                 push    edx             ; x
.text:0000AF03                 mov     eax, [ebp+hdc]
.text:0000AF06                 push    eax             ; hdc
.text:0000AF07                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text:0000AF0D                 cmp     esi, esp
.text:0000AF0F                 call    __RTC_CheckEsp
.text:0000AF14                 cmp     ds:_bold_font_mode, 1
.text:0000AF1B                 jnz     short loc_AF89
.text:0000AF1D                 mov     ecx, [ebp+arg_14]
.text:0000AF20                 and     ecx, 40000h
.text:0000AF26                 jz      short loc_AF89
.text:0000AF28                 mov     esi, esp
.text:0000AF2A                 push    1               ; mode
.text:0000AF2C                 mov     edx, [ebp+hdc]
.text:0000AF2F                 push    edx             ; hdc
.text:0000AF30                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000AF36                 cmp     esi, esp
.text:0000AF38                 call    __RTC_CheckEsp
.text:0000AF3D                 mov     esi, esp
.text:0000AF3F                 mov     eax, [ebp+lpDx]
.text:0000AF42                 push    eax             ; lpDx
.text:0000AF43                 mov     ecx, [ebp+c]
.text:0000AF46                 push    ecx             ; c
.text:0000AF47                 mov     edx, ds:?uni_buf@?BO@??do_text_internal@@9@9 ; `do_text_internal'::`30'::uni_buf
.text:0000AF4D                 push    edx             ; lpString
.text:0000AF4E                 lea     eax, [ebp+rect]
.text:0000AF51                 push    eax             ; lprect
.text:0000AF52                 push    4               ; options
.text:0000AF54                 xor     ecx, ecx
.text:0000AF56                 cmp     [ebp+arg_18], 3
.text:0000AF5A                 setz    cl
.text:0000AF5D                 imul    ecx, ds:_font_height
.text:0000AF64                 mov     edx, [ebp+arg_8]
.text:0000AF67                 sub     edx, ecx
.text:0000AF69                 add     edx, [ebp+var_48]
.text:0000AF6C                 push    edx             ; y
.text:0000AF6D                 mov     eax, [ebp+var_4C]
.text:0000AF70                 mov     ecx, [ebp+arg_4]
.text:0000AF73                 lea     edx, [ecx+eax-1]
.text:0000AF77                 push    edx             ; x
.text:0000AF78                 mov     eax, [ebp+hdc]
.text:0000AF7B                 push    eax             ; hdc
.text:0000AF7C                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text:0000AF82                 cmp     esi, esp
.text:0000AF84                 call    __RTC_CheckEsp
.text:0000AF89
.text:0000AF89 loc_AF89:                               ; CODE XREF: _do_text_internal+C03j
.text:0000AF89                                         ; _do_text_internal+C0Ej
.text:0000AF89                 mov     ecx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000AF8F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0000AF95                 jmp     loc_B254
.text:0000AF9A ; ---------------------------------------------------------------------------
.text:0000AF9A
.text:0000AF9A loc_AF9A:                               ; CODE XREF: _do_text_internal+A16j
.text:0000AF9A                                         ; _do_text_internal+A2Ej
.text:0000AF9A                 mov     edx, [ebp+arg_C]
.text:0000AF9D                 movzx   eax, word ptr [edx]
.text:0000AFA0                 and     eax, 0FFFFFE00h
.text:0000AFA5                 cmp     eax, 0F000h
.text:0000AFAA                 jnz     loc_B0F5
.text:0000AFB0                 mov     ecx, [ebp+arg_10]
.text:0000AFB3                 cmp     ecx, ds:?directlen@?CE@??do_text_internal@@9@9 ; `do_text_internal'::`36'::directlen
.text:0000AFB9                 jle     short loc_AFE0
.text:0000AFBB                 mov     edx, [ebp+arg_10]
.text:0000AFBE                 mov     ds:?directlen@?CE@??do_text_internal@@9@9, edx ; `do_text_internal'::`36'::directlen
.text:0000AFC4                 push    1
.text:0000AFC6                 mov     eax, ds:?directlen@?CE@??do_text_internal@@9@9 ; `do_text_internal'::`36'::directlen
.text:0000AFCB                 push    eax
.text:0000AFCC                 mov     ecx, ds:?directbuf@?CE@??do_text_internal@@9@9 ; `do_text_internal'::`36'::directbuf
.text:0000AFD2                 push    ecx
.text:0000AFD3                 call    _saferealloc
.text:0000AFD8                 add     esp, 0Ch
.text:0000AFDB                 mov     ds:?directbuf@?CE@??do_text_internal@@9@9, eax ; `do_text_internal'::`36'::directbuf
.text:0000AFE0
.text:0000AFE0 loc_AFE0:                               ; CODE XREF: _do_text_internal+CA1j
.text:0000AFE0                 mov     [ebp+var_98], 0
.text:0000AFEA                 jmp     short loc_AFFB
.text:0000AFEC ; ---------------------------------------------------------------------------
.text:0000AFEC
.text:0000AFEC loc_AFEC:                               ; CODE XREF: _do_text_internal+D0Ej
.text:0000AFEC                 mov     edx, [ebp+var_98]
.text:0000AFF2                 add     edx, 1
.text:0000AFF5                 mov     [ebp+var_98], edx
.text:0000AFFB
.text:0000AFFB loc_AFFB:                               ; CODE XREF: _do_text_internal+CD2j
.text:0000AFFB                 mov     eax, [ebp+var_98]
.text:0000B001                 cmp     eax, [ebp+arg_10]
.text:0000B004                 jge     short loc_B028
.text:0000B006                 mov     ecx, [ebp+var_98]
.text:0000B00C                 mov     edx, [ebp+arg_C]
.text:0000B00F                 movzx   eax, word ptr [edx+ecx*2]
.text:0000B013                 and     eax, 0FFh
.text:0000B018                 mov     ecx, ds:?directbuf@?CE@??do_text_internal@@9@9 ; `do_text_internal'::`36'::directbuf
.text:0000B01E                 add     ecx, [ebp+var_98]
.text:0000B024                 mov     [ecx], al
.text:0000B026                 jmp     short loc_AFEC
.text:0000B028 ; ---------------------------------------------------------------------------
.text:0000B028
.text:0000B028 loc_B028:                               ; CODE XREF: _do_text_internal+CECj
.text:0000B028                 mov     esi, esp
.text:0000B02A                 mov     edx, [ebp+lpDx]
.text:0000B02D                 push    edx             ; lpDx
.text:0000B02E                 mov     eax, [ebp+arg_10]
.text:0000B031                 push    eax             ; c
.text:0000B032                 mov     ecx, ds:?directbuf@?CE@??do_text_internal@@9@9 ; `do_text_internal'::`36'::directbuf
.text:0000B038                 push    ecx             ; lpString
.text:0000B039                 lea     edx, [ebp+rect]
.text:0000B03C                 push    edx             ; lprect
.text:0000B03D                 mov     eax, [ebp+var_58]
.text:0000B040                 neg     eax
.text:0000B042                 sbb     eax, eax
.text:0000B044                 and     eax, 2
.text:0000B047                 or      eax, 4
.text:0000B04A                 push    eax             ; options
.text:0000B04B                 xor     ecx, ecx
.text:0000B04D                 cmp     [ebp+arg_18], 3
.text:0000B051                 setz    cl
.text:0000B054                 imul    ecx, ds:_font_height
.text:0000B05B                 mov     edx, [ebp+arg_8]
.text:0000B05E                 sub     edx, ecx
.text:0000B060                 add     edx, [ebp+var_48]
.text:0000B063                 push    edx             ; y
.text:0000B064                 mov     eax, [ebp+arg_4]
.text:0000B067                 add     eax, [ebp+var_4C]
.text:0000B06A                 push    eax             ; x
.text:0000B06B                 mov     ecx, [ebp+hdc]
.text:0000B06E                 push    ecx             ; hdc
.text:0000B06F                 call    dword ptr ds:__imp__ExtTextOutA@32 ; ExtTextOutA(x,x,x,x,x,x,x,x)
.text:0000B075                 cmp     esi, esp
.text:0000B077                 call    __RTC_CheckEsp
.text:0000B07C                 cmp     ds:_bold_font_mode, 1
.text:0000B083                 jnz     short loc_B0F0
.text:0000B085                 mov     edx, [ebp+arg_14]
.text:0000B088                 and     edx, 40000h
.text:0000B08E                 jz      short loc_B0F0
.text:0000B090                 mov     esi, esp
.text:0000B092                 push    1               ; mode
.text:0000B094                 mov     eax, [ebp+hdc]
.text:0000B097                 push    eax             ; hdc
.text:0000B098                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000B09E                 cmp     esi, esp
.text:0000B0A0                 call    __RTC_CheckEsp
.text:0000B0A5                 mov     esi, esp
.text:0000B0A7                 mov     ecx, [ebp+lpDx]
.text:0000B0AA                 push    ecx             ; lpDx
.text:0000B0AB                 mov     edx, [ebp+arg_10]
.text:0000B0AE                 push    edx             ; c
.text:0000B0AF                 mov     eax, ds:?directbuf@?CE@??do_text_internal@@9@9 ; `do_text_internal'::`36'::directbuf
.text:0000B0B4                 push    eax             ; lpString
.text:0000B0B5                 lea     ecx, [ebp+rect]
.text:0000B0B8                 push    ecx             ; lprect
.text:0000B0B9                 push    4               ; options
.text:0000B0BB                 xor     edx, edx
.text:0000B0BD                 cmp     [ebp+arg_18], 3
.text:0000B0C1                 setz    dl
.text:0000B0C4                 imul    edx, ds:_font_height
.text:0000B0CB                 mov     eax, [ebp+arg_8]
.text:0000B0CE                 sub     eax, edx
.text:0000B0D0                 add     eax, [ebp+var_48]
.text:0000B0D3                 push    eax             ; y
.text:0000B0D4                 mov     ecx, [ebp+var_4C]
.text:0000B0D7                 mov     edx, [ebp+arg_4]
.text:0000B0DA                 lea     eax, [edx+ecx-1]
.text:0000B0DE                 push    eax             ; x
.text:0000B0DF                 mov     ecx, [ebp+hdc]
.text:0000B0E2                 push    ecx             ; hdc
.text:0000B0E3                 call    dword ptr ds:__imp__ExtTextOutA@32 ; ExtTextOutA(x,x,x,x,x,x,x,x)
.text:0000B0E9                 cmp     esi, esp
.text:0000B0EB                 call    __RTC_CheckEsp
.text:0000B0F0
.text:0000B0F0 loc_B0F0:                               ; CODE XREF: _do_text_internal+D6Bj
.text:0000B0F0                                         ; _do_text_internal+D76j
.text:0000B0F0                 jmp     loc_B254
.text:0000B0F5 ; ---------------------------------------------------------------------------
.text:0000B0F5
.text:0000B0F5 loc_B0F5:                               ; CODE XREF: _do_text_internal+C92j
.text:0000B0F5                 mov     edx, ds:?wlen@?CH@??do_text_internal@@9@9 ; `do_text_internal'::`39'::wlen
.text:0000B0FB                 cmp     edx, [ebp+arg_10]
.text:0000B0FE                 jge     short loc_B12D
.text:0000B100                 mov     eax, ds:?wbuf@?CH@??do_text_internal@@9@9 ; `do_text_internal'::`39'::wbuf
.text:0000B105                 push    eax
.text:0000B106                 call    _safefree
.text:0000B10B                 add     esp, 4
.text:0000B10E                 mov     ecx, [ebp+arg_10]
.text:0000B111                 mov     ds:?wlen@?CH@??do_text_internal@@9@9, ecx ; `do_text_internal'::`39'::wlen
.text:0000B117                 push    2
.text:0000B119                 mov     edx, ds:?wlen@?CH@??do_text_internal@@9@9 ; `do_text_internal'::`39'::wlen
.text:0000B11F                 push    edx
.text:0000B120                 call    _safemalloc
.text:0000B125                 add     esp, 8
.text:0000B128                 mov     ds:?wbuf@?CH@??do_text_internal@@9@9, eax ; `do_text_internal'::`39'::wbuf
.text:0000B12D
.text:0000B12D loc_B12D:                               ; CODE XREF: _do_text_internal+DE6j
.text:0000B12D                 mov     [ebp+var_9C], 0
.text:0000B137                 jmp     short loc_B148
.text:0000B139 ; ---------------------------------------------------------------------------
.text:0000B139
.text:0000B139 loc_B139:                               ; CODE XREF: _do_text_internal+E57j
.text:0000B139                 mov     eax, [ebp+var_9C]
.text:0000B13F                 add     eax, 1
.text:0000B142                 mov     [ebp+var_9C], eax
.text:0000B148
.text:0000B148 loc_B148:                               ; CODE XREF: _do_text_internal+E1Fj
.text:0000B148                 mov     ecx, [ebp+var_9C]
.text:0000B14E                 cmp     ecx, [ebp+arg_10]
.text:0000B151                 jge     short loc_B171
.text:0000B153                 mov     edx, [ebp+var_9C]
.text:0000B159                 mov     eax, ds:?wbuf@?CH@??do_text_internal@@9@9 ; `do_text_internal'::`39'::wbuf
.text:0000B15E                 mov     ecx, [ebp+var_9C]
.text:0000B164                 mov     esi, [ebp+arg_C]
.text:0000B167                 mov     cx, [esi+ecx*2]
.text:0000B16B                 mov     [eax+edx*2], cx
.text:0000B16F                 jmp     short loc_B139
.text:0000B171 ; ---------------------------------------------------------------------------
.text:0000B171
.text:0000B171 loc_B171:                               ; CODE XREF: _do_text_internal+E39j
.text:0000B171                 cmp     [ebp+var_58], 0
.text:0000B175                 jz      short loc_B18E
.text:0000B177                 mov     edx, [ebp+arg_14]
.text:0000B17A                 and     edx, 80000000h
.text:0000B180                 jnz     short loc_B18E
.text:0000B182                 mov     [ebp+var_B4], 1
.text:0000B18C                 jmp     short loc_B198
.text:0000B18E ; ---------------------------------------------------------------------------
.text:0000B18E
.text:0000B18E loc_B18E:                               ; CODE XREF: _do_text_internal+E5Dj
.text:0000B18E                                         ; _do_text_internal+E68j
.text:0000B18E                 mov     [ebp+var_B4], 0
.text:0000B198
.text:0000B198 loc_B198:                               ; CODE XREF: _do_text_internal+E74j
.text:0000B198                 mov     eax, [ebp+var_B4]
.text:0000B19E                 push    eax             ; int
.text:0000B19F                 mov     ecx, ds:?lpDx@?1??do_text_internal@@9@9 ; `do_text_internal'::`2'::lpDx
.text:0000B1A5                 push    ecx             ; int
.text:0000B1A6                 mov     edx, [ebp+arg_10]
.text:0000B1A9                 push    edx             ; int
.text:0000B1AA                 mov     eax, ds:?wbuf@?CH@??do_text_internal@@9@9 ; `do_text_internal'::`39'::wbuf
.text:0000B1AF                 push    eax             ; int
.text:0000B1B0                 lea     ecx, [ebp+rect]
.text:0000B1B3                 push    ecx             ; lprect
.text:0000B1B4                 xor     edx, edx
.text:0000B1B6                 cmp     [ebp+arg_18], 3
.text:0000B1BA                 setz    dl
.text:0000B1BD                 imul    edx, ds:_font_height
.text:0000B1C4                 mov     eax, [ebp+arg_8]
.text:0000B1C7                 sub     eax, edx
.text:0000B1C9                 add     eax, [ebp+var_48]
.text:0000B1CC                 push    eax             ; y
.text:0000B1CD                 mov     ecx, [ebp+arg_4]
.text:0000B1D0                 add     ecx, [ebp+var_4C]
.text:0000B1D3                 push    ecx             ; int
.text:0000B1D4                 mov     edx, [ebp+hdc]
.text:0000B1D7                 push    edx             ; hdc
.text:0000B1D8                 call    _general_textout
.text:0000B1DD                 add     esp, 20h
.text:0000B1E0                 cmp     ds:_bold_font_mode, 1
.text:0000B1E7                 jnz     short loc_B254
.text:0000B1E9                 mov     eax, [ebp+arg_14]
.text:0000B1EC                 and     eax, 40000h
.text:0000B1F1                 jz      short loc_B254
.text:0000B1F3                 mov     esi, esp
.text:0000B1F5                 push    1               ; mode
.text:0000B1F7                 mov     ecx, [ebp+hdc]
.text:0000B1FA                 push    ecx             ; hdc
.text:0000B1FB                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000B201                 cmp     esi, esp
.text:0000B203                 call    __RTC_CheckEsp
.text:0000B208                 mov     esi, esp
.text:0000B20A                 mov     edx, [ebp+lpDx]
.text:0000B20D                 push    edx             ; lpDx
.text:0000B20E                 mov     eax, [ebp+arg_10]
.text:0000B211                 push    eax             ; c
.text:0000B212                 mov     ecx, ds:?wbuf@?CH@??do_text_internal@@9@9 ; `do_text_internal'::`39'::wbuf
.text:0000B218                 push    ecx             ; lpString
.text:0000B219                 lea     edx, [ebp+rect]
.text:0000B21C                 push    edx             ; lprect
.text:0000B21D                 push    4               ; options
.text:0000B21F                 xor     eax, eax
.text:0000B221                 cmp     [ebp+arg_18], 3
.text:0000B225                 setz    al
.text:0000B228                 imul    eax, ds:_font_height
.text:0000B22F                 mov     ecx, [ebp+arg_8]
.text:0000B232                 sub     ecx, eax
.text:0000B234                 add     ecx, [ebp+var_48]
.text:0000B237                 push    ecx             ; y
.text:0000B238                 mov     edx, [ebp+var_4C]
.text:0000B23B                 mov     eax, [ebp+arg_4]
.text:0000B23E                 lea     ecx, [eax+edx-1]
.text:0000B242                 push    ecx             ; x
.text:0000B243                 mov     edx, [ebp+hdc]
.text:0000B246                 push    edx             ; hdc
.text:0000B247                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text:0000B24D                 cmp     esi, esp
.text:0000B24F                 call    __RTC_CheckEsp
.text:0000B254
.text:0000B254 loc_B254:                               ; CODE XREF: _do_text_internal+C7Dj
.text:0000B254                                         ; _do_text_internal:loc_B0F0j ...
.text:0000B254                 mov     esi, esp
.text:0000B256                 push    1               ; mode
.text:0000B258                 mov     eax, [ebp+hdc]
.text:0000B25B                 push    eax             ; hdc
.text:0000B25C                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000B262                 cmp     esi, esp
.text:0000B264                 call    __RTC_CheckEsp
.text:0000B269                 mov     [ebp+var_58], 0
.text:0000B270                 jmp     loc_A9E9
.text:0000B275 ; ---------------------------------------------------------------------------
.text:0000B275
.text:0000B275 loc_B275:                               ; CODE XREF: _do_text_internal+6F7j
.text:0000B275                 cmp     [ebp+arg_18], 2
.text:0000B279                 jz      loc_B372
.text:0000B27F                 cmp     [ebp+var_3C], 0
.text:0000B283                 jnz     short loc_B2A1
.text:0000B285                 cmp     ds:_und_mode, 0
.text:0000B28C                 jnz     loc_B372
.text:0000B292                 mov     ecx, [ebp+arg_14]
.text:0000B295                 and     ecx, 80000h
.text:0000B29B                 jz      loc_B372
.text:0000B2A1
.text:0000B2A1 loc_B2A1:                               ; CODE XREF: _do_text_internal+F6Bj
.text:0000B2A1                 mov     edx, ds:_descent
.text:0000B2A7                 mov     [ebp+var_A4], edx
.text:0000B2AD                 cmp     [ebp+arg_18], 3
.text:0000B2B1                 jnz     short loc_B2C7
.text:0000B2B3                 mov     eax, [ebp+var_A4]
.text:0000B2B9                 shl     eax, 1
.text:0000B2BB                 sub     eax, ds:_font_height
.text:0000B2C1                 mov     [ebp+var_A4], eax
.text:0000B2C7
.text:0000B2C7 loc_B2C7:                               ; CODE XREF: _do_text_internal+F99j
.text:0000B2C7                 mov     esi, esp
.text:0000B2C9                 mov     ecx, [ebp+color]
.text:0000B2CC                 push    ecx             ; color
.text:0000B2CD                 push    0               ; cWidth
.text:0000B2CF                 push    0               ; iStyle
.text:0000B2D1                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text:0000B2D7                 cmp     esi, esp
.text:0000B2D9                 call    __RTC_CheckEsp
.text:0000B2DE                 mov     esi, esp
.text:0000B2E0                 push    eax             ; h
.text:0000B2E1                 mov     edx, [ebp+hdc]
.text:0000B2E4                 push    edx             ; hdc
.text:0000B2E5                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000B2EB                 cmp     esi, esp
.text:0000B2ED                 call    __RTC_CheckEsp
.text:0000B2F2                 mov     [ebp+h], eax
.text:0000B2F8                 mov     esi, esp
.text:0000B2FA                 push    0               ; lppt
.text:0000B2FC                 mov     eax, [ebp+rect.top]
.text:0000B2FF                 add     eax, [ebp+var_A4]
.text:0000B305                 push    eax             ; y
.text:0000B306                 mov     ecx, [ebp+rect.left]
.text:0000B309                 push    ecx             ; x
.text:0000B30A                 mov     edx, [ebp+hdc]
.text:0000B30D                 push    edx             ; hdc
.text:0000B30E                 call    dword ptr ds:__imp__MoveToEx@16 ; MoveToEx(x,x,x,x)
.text:0000B314                 cmp     esi, esp
.text:0000B316                 call    __RTC_CheckEsp
.text:0000B31B                 mov     eax, [ebp+rect.top]
.text:0000B31E                 add     eax, [ebp+var_A4]
.text:0000B324                 mov     esi, esp
.text:0000B326                 push    eax             ; y
.text:0000B327                 mov     ecx, [ebp+rect.right]
.text:0000B32A                 push    ecx             ; x
.text:0000B32B                 mov     edx, [ebp+hdc]
.text:0000B32E                 push    edx             ; hdc
.text:0000B32F                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text:0000B335                 cmp     esi, esp
.text:0000B337                 call    __RTC_CheckEsp
.text:0000B33C                 mov     esi, esp
.text:0000B33E                 mov     eax, [ebp+h]
.text:0000B344                 push    eax             ; h
.text:0000B345                 mov     ecx, [ebp+hdc]
.text:0000B348                 push    ecx             ; hdc
.text:0000B349                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000B34F                 cmp     esi, esp
.text:0000B351                 call    __RTC_CheckEsp
.text:0000B356                 mov     [ebp+h], eax
.text:0000B35C                 mov     esi, esp
.text:0000B35E                 mov     edx, [ebp+h]
.text:0000B364                 push    edx             ; ho
.text:0000B365                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:0000B36B                 cmp     esi, esp
.text:0000B36D                 call    __RTC_CheckEsp
.text:0000B372
.text:0000B372 loc_B372:                               ; CODE XREF: _do_text_internal+9Aj
.text:0000B372                                         ; _do_text_internal+BA4j ...
.text:0000B372                 push    edx
.text:0000B373                 mov     ecx, ebp
.text:0000B375                 push    eax
.text:0000B376                 lea     edx, $LN120
.text:0000B37C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000B381                 pop     eax
.text:0000B382                 pop     edx
.text:0000B383                 pop     edi
.text:0000B384                 pop     esi
.text:0000B385                 mov     ecx, [ebp+var_4]
.text:0000B388                 xor     ecx, ebp
.text:0000B38A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000B38F                 add     esp, 0B4h
.text:0000B395                 cmp     ebp, esp
.text:0000B397                 call    __RTC_CheckEsp
.text:0000B39C                 mov     esp, ebp
.text:0000B39E                 pop     ebp
.text:0000B39F                 retn
.text:0000B39F _do_text_internal endp
.text:0000B39F
.text:0000B39F ; ---------------------------------------------------------------------------
.text:0000B3A0 $LN120          dd 3                    ; DATA XREF: _do_text_internal+105Eo
.text:0000B3A4                 dd offset $LN119
.text:0000B3A8 $LN119          db 0CCh                 ; DATA XREF: .text:0000B3A4o
.text:0000B3A9                 db 3 dup(0FFh)
.text:0000B3AC                 dd 10h
.text:0000B3B0                 dd offset $LN116        ; "line_box"
.text:0000B3B4                 dd 0FFFFFF7Ch, 2
.text:0000B3BC                 dd offset $LN117        ; "dbcstext"
.text:0000B3C0                 dd 0FFFFFF73h, 1
.text:0000B3C8                 dd offset $LN118        ; "dbcstext"
.text:0000B3CC $LN118          db 'dbcstext',0         ; DATA XREF: .text:0000B3C8o
.text:0000B3D5 $LN117          db 'dbcstext',0         ; DATA XREF: .text:0000B3BCo
.text:0000B3DE $LN116          db 'line_box',0         ; DATA XREF: .text:0000B3B0o
.text:0000B3E7                 align 4
.text:0000B3E8 $LN121          dd offset $LN94_0       ; DATA XREF: _do_text_internal+1C3r
.text:0000B3E8                 dd offset $LN93_0       ; jump table for switch statement
.text:0000B3E8                 dd offset $LN92_0
.text:0000B3E8                 dd offset $LN91_0
.text:0000B3F8
.text:0000B3F8 ; =============== S U B R O U T I N E =======================================
.text:0000B3F8
.text:0000B3F8 ; Attributes: bp-based frame
.text:0000B3F8
.text:0000B3F8 ; int __cdecl general_textout(HDC hdc, int, int y, RECT *lprect, int, int, int, int)
.text:0000B3F8 _general_textout proc near              ; CODE XREF: _do_text_internal+EC0p
.text:0000B3F8
.text:0000B3F8 lpDx            = dword ptr -24h
.text:0000B3F8 var_20          = dword ptr -20h
.text:0000B3F8 var_1C          = dword ptr -1Ch
.text:0000B3F8 var_18          = dword ptr -18h
.text:0000B3F8 mode            = dword ptr -14h
.text:0000B3F8 var_10          = dword ptr -10h
.text:0000B3F8 x               = dword ptr -0Ch
.text:0000B3F8 var_8           = dword ptr -8
.text:0000B3F8 var_4           = dword ptr -4
.text:0000B3F8 hdc             = dword ptr  8
.text:0000B3F8 arg_4           = dword ptr  0Ch
.text:0000B3F8 y               = dword ptr  10h
.text:0000B3F8 lprect          = dword ptr  14h
.text:0000B3F8 arg_10          = dword ptr  18h
.text:0000B3F8 arg_14          = dword ptr  1Ch
.text:0000B3F8 arg_18          = dword ptr  20h
.text:0000B3F8 arg_1C          = dword ptr  24h
.text:0000B3F8
.text:0000B3F8                 push    ebp
.text:0000B3F9                 mov     ebp, esp
.text:0000B3FB                 sub     esp, 24h
.text:0000B3FE                 push    esi
.text:0000B3FF                 mov     eax, 0CCCCCCCCh
.text:0000B404                 mov     [ebp+lpDx], eax
.text:0000B407                 mov     [ebp+var_20], eax
.text:0000B40A                 mov     [ebp+var_1C], eax
.text:0000B40D                 mov     [ebp+var_18], eax
.text:0000B410                 mov     [ebp+mode], eax
.text:0000B413                 mov     [ebp+var_10], eax
.text:0000B416                 mov     [ebp+x], eax
.text:0000B419                 mov     [ebp+var_8], eax
.text:0000B41C                 mov     [ebp+var_4], eax
.text:0000B41F                 mov     [ebp+mode], 0
.text:0000B426                 mov     [ebp+var_18], 0
.text:0000B42D                 mov     eax, [ebp+arg_4]
.text:0000B430                 mov     [ebp+var_10], eax
.text:0000B433                 mov     ecx, [ebp+var_10]
.text:0000B436                 mov     [ebp+x], ecx
.text:0000B439                 mov     [ebp+var_4], 0
.text:0000B440
.text:0000B440 loc_B440:                               ; CODE XREF: _general_textout+1BCj
.text:0000B440                 mov     edx, [ebp+var_4]
.text:0000B443                 cmp     edx, [ebp+arg_14]
.text:0000B446                 jge     loc_B5B9
.text:0000B44C                 mov     eax, [ebp+var_4]
.text:0000B44F                 mov     ecx, [ebp+arg_10]
.text:0000B452                 movzx   edx, word ptr [ecx+eax*2]
.text:0000B456                 push    edx
.text:0000B457                 call    _is_rtl
.text:0000B45C                 add     esp, 4
.text:0000B45F                 mov     [ebp+var_1C], eax
.text:0000B462                 mov     eax, [ebp+var_4]
.text:0000B465                 mov     ecx, [ebp+arg_18]
.text:0000B468                 mov     edx, [ebp+var_10]
.text:0000B46B                 add     edx, [ecx+eax*4]
.text:0000B46E                 mov     [ebp+var_10], edx
.text:0000B471                 mov     eax, [ebp+var_4]
.text:0000B474                 add     eax, 1
.text:0000B477                 mov     [ebp+var_8], eax
.text:0000B47A                 jmp     short loc_B485
.text:0000B47C ; ---------------------------------------------------------------------------
.text:0000B47C
.text:0000B47C loc_B47C:                               ; CODE XREF: _general_textout+BEj
.text:0000B47C                 mov     ecx, [ebp+var_8]
.text:0000B47F                 add     ecx, 1
.text:0000B482                 mov     [ebp+var_8], ecx
.text:0000B485
.text:0000B485 loc_B485:                               ; CODE XREF: _general_textout+82j
.text:0000B485                 mov     edx, [ebp+var_8]
.text:0000B488                 cmp     edx, [ebp+arg_14]
.text:0000B48B                 jge     short loc_B4B8
.text:0000B48D                 mov     eax, [ebp+var_8]
.text:0000B490                 mov     ecx, [ebp+arg_10]
.text:0000B493                 movzx   edx, word ptr [ecx+eax*2]
.text:0000B497                 push    edx
.text:0000B498                 call    _is_rtl
.text:0000B49D                 add     esp, 4
.text:0000B4A0                 cmp     [ebp+var_1C], eax
.text:0000B4A3                 jz      short loc_B4A7
.text:0000B4A5                 jmp     short loc_B4B8
.text:0000B4A7 ; ---------------------------------------------------------------------------
.text:0000B4A7
.text:0000B4A7 loc_B4A7:                               ; CODE XREF: _general_textout+ABj
.text:0000B4A7                 mov     eax, [ebp+var_8]
.text:0000B4AA                 mov     ecx, [ebp+arg_18]
.text:0000B4AD                 mov     edx, [ebp+var_10]
.text:0000B4B0                 add     edx, [ecx+eax*4]
.text:0000B4B3                 mov     [ebp+var_10], edx
.text:0000B4B6                 jmp     short loc_B47C
.text:0000B4B8 ; ---------------------------------------------------------------------------
.text:0000B4B8
.text:0000B4B8 loc_B4B8:                               ; CODE XREF: _general_textout+93j
.text:0000B4B8                                         ; _general_textout+ADj
.text:0000B4B8                 cmp     [ebp+var_1C], 0
.text:0000B4BC                 jz      short loc_B50F
.text:0000B4BE                 cmp     ds:_font_varpitch, 0
.text:0000B4C5                 jz      short loc_B4D0
.text:0000B4C7                 mov     [ebp+var_20], 0
.text:0000B4CE                 jmp     short loc_B4DC
.text:0000B4D0 ; ---------------------------------------------------------------------------
.text:0000B4D0
.text:0000B4D0 loc_B4D0:                               ; CODE XREF: _general_textout+CDj
.text:0000B4D0                 mov     eax, [ebp+var_4]
.text:0000B4D3                 mov     ecx, [ebp+arg_18]
.text:0000B4D6                 lea     edx, [ecx+eax*4]
.text:0000B4D9                 mov     [ebp+var_20], edx
.text:0000B4DC
.text:0000B4DC loc_B4DC:                               ; CODE XREF: _general_textout+D6j
.text:0000B4DC                 mov     eax, [ebp+arg_1C]
.text:0000B4DF                 push    eax             ; int
.text:0000B4E0                 mov     ecx, [ebp+var_20]
.text:0000B4E3                 push    ecx             ; lpDx
.text:0000B4E4                 mov     edx, [ebp+var_8]
.text:0000B4E7                 sub     edx, [ebp+var_4]
.text:0000B4EA                 push    edx             ; Size
.text:0000B4EB                 mov     eax, [ebp+var_4]
.text:0000B4EE                 mov     ecx, [ebp+arg_10]
.text:0000B4F1                 lea     edx, [ecx+eax*2]
.text:0000B4F4                 push    edx             ; lpString
.text:0000B4F5                 mov     eax, [ebp+lprect]
.text:0000B4F8                 push    eax             ; lprect
.text:0000B4F9                 mov     ecx, [ebp+y]
.text:0000B4FC                 push    ecx             ; y
.text:0000B4FD                 mov     edx, [ebp+x]
.text:0000B500                 push    edx             ; x
.text:0000B501                 mov     eax, [ebp+hdc]
.text:0000B504                 push    eax             ; hdc
.text:0000B505                 call    _exact_textout
.text:0000B50A                 add     esp, 20h
.text:0000B50D                 jmp     short loc_B56F
.text:0000B50F ; ---------------------------------------------------------------------------
.text:0000B50F
.text:0000B50F loc_B50F:                               ; CODE XREF: _general_textout+C4j
.text:0000B50F                 cmp     ds:_font_varpitch, 0
.text:0000B516                 jz      short loc_B521
.text:0000B518                 mov     [ebp+lpDx], 0
.text:0000B51F                 jmp     short loc_B52D
.text:0000B521 ; ---------------------------------------------------------------------------
.text:0000B521
.text:0000B521 loc_B521:                               ; CODE XREF: _general_textout+11Ej
.text:0000B521                 mov     ecx, [ebp+var_4]
.text:0000B524                 mov     edx, [ebp+arg_18]
.text:0000B527                 lea     eax, [edx+ecx*4]
.text:0000B52A                 mov     [ebp+lpDx], eax
.text:0000B52D
.text:0000B52D loc_B52D:                               ; CODE XREF: _general_textout+127j
.text:0000B52D                 mov     esi, esp
.text:0000B52F                 mov     ecx, [ebp+lpDx]
.text:0000B532                 push    ecx             ; lpDx
.text:0000B533                 mov     edx, [ebp+var_8]
.text:0000B536                 sub     edx, [ebp+var_4]
.text:0000B539                 push    edx             ; c
.text:0000B53A                 mov     eax, [ebp+var_4]
.text:0000B53D                 mov     ecx, [ebp+arg_10]
.text:0000B540                 lea     edx, [ecx+eax*2]
.text:0000B543                 push    edx             ; lpString
.text:0000B544                 mov     eax, [ebp+lprect]
.text:0000B547                 push    eax             ; lprect
.text:0000B548                 mov     ecx, [ebp+arg_1C]
.text:0000B54B                 neg     ecx
.text:0000B54D                 sbb     ecx, ecx
.text:0000B54F                 and     ecx, 2
.text:0000B552                 or      ecx, 4
.text:0000B555                 push    ecx             ; options
.text:0000B556                 mov     edx, [ebp+y]
.text:0000B559                 push    edx             ; y
.text:0000B55A                 mov     eax, [ebp+x]
.text:0000B55D                 push    eax             ; x
.text:0000B55E                 mov     ecx, [ebp+hdc]
.text:0000B561                 push    ecx             ; hdc
.text:0000B562                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text:0000B568                 cmp     esi, esp
.text:0000B56A                 call    __RTC_CheckEsp
.text:0000B56F
.text:0000B56F loc_B56F:                               ; CODE XREF: _general_textout+115j
.text:0000B56F                 mov     edx, [ebp+var_8]
.text:0000B572                 mov     [ebp+var_4], edx
.text:0000B575                 mov     eax, [ebp+var_10]
.text:0000B578                 mov     [ebp+x], eax
.text:0000B57B                 mov     esi, esp
.text:0000B57D                 mov     ecx, [ebp+hdc]
.text:0000B580                 push    ecx             ; hdc
.text:0000B581                 call    dword ptr ds:__imp__GetBkMode@4 ; GetBkMode(x)
.text:0000B587                 cmp     esi, esp
.text:0000B589                 call    __RTC_CheckEsp
.text:0000B58E                 mov     [ebp+mode], eax
.text:0000B591                 mov     [ebp+var_18], 1
.text:0000B598                 mov     esi, esp
.text:0000B59A                 push    1               ; mode
.text:0000B59C                 mov     edx, [ebp+hdc]
.text:0000B59F                 push    edx             ; hdc
.text:0000B5A0                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000B5A6                 cmp     esi, esp
.text:0000B5A8                 call    __RTC_CheckEsp
.text:0000B5AD                 mov     [ebp+arg_1C], 0
.text:0000B5B4                 jmp     loc_B440
.text:0000B5B9 ; ---------------------------------------------------------------------------
.text:0000B5B9
.text:0000B5B9 loc_B5B9:                               ; CODE XREF: _general_textout+4Ej
.text:0000B5B9                 cmp     [ebp+var_18], 0
.text:0000B5BD                 jz      short loc_B5D6
.text:0000B5BF                 mov     esi, esp
.text:0000B5C1                 mov     eax, [ebp+mode]
.text:0000B5C4                 push    eax             ; mode
.text:0000B5C5                 mov     ecx, [ebp+hdc]
.text:0000B5C8                 push    ecx             ; hdc
.text:0000B5C9                 call    dword ptr ds:__imp__SetBkMode@8 ; SetBkMode(x,x)
.text:0000B5CF                 cmp     esi, esp
.text:0000B5D1                 call    __RTC_CheckEsp
.text:0000B5D6
.text:0000B5D6 loc_B5D6:                               ; CODE XREF: _general_textout+1C5j
.text:0000B5D6                 pop     esi
.text:0000B5D7                 add     esp, 24h
.text:0000B5DA                 cmp     ebp, esp
.text:0000B5DC                 call    __RTC_CheckEsp
.text:0000B5E1                 mov     esp, ebp
.text:0000B5E3                 pop     ebp
.text:0000B5E4                 retn
.text:0000B5E4 _general_textout endp
.text:0000B5E4
.text:0000B5E4 ; ---------------------------------------------------------------------------
.text:0000B5E5                 align 4
.text:0000B5E8
.text:0000B5E8 ; =============== S U B R O U T I N E =======================================
.text:0000B5E8
.text:0000B5E8 ; Attributes: bp-based frame
.text:0000B5E8
.text:0000B5E8 ; int __cdecl exact_textout(HDC hdc, int x, int y, RECT *lprect, LPCWSTR lpString, size_t Size, INT *lpDx, int)
.text:0000B5E8 _exact_textout  proc near               ; CODE XREF: _general_textout+10Dp
.text:0000B5E8
.text:0000B5E8 var_34          = dword ptr -34h
.text:0000B5E8 var_30          = dword ptr -30h
.text:0000B5E8 Dst             = dword ptr -28h
.text:0000B5E8 var_14          = dword ptr -14h
.text:0000B5E8 var_10          = dword ptr -10h
.text:0000B5E8 var_C           = dword ptr -0Ch
.text:0000B5E8 hdc             = dword ptr  8
.text:0000B5E8 x               = dword ptr  0Ch
.text:0000B5E8 y               = dword ptr  10h
.text:0000B5E8 lprect          = dword ptr  14h
.text:0000B5E8 lpString        = dword ptr  18h
.text:0000B5E8 Size            = dword ptr  1Ch
.text:0000B5E8 lpDx            = dword ptr  20h
.text:0000B5E8 arg_1C          = dword ptr  24h
.text:0000B5E8
.text:0000B5E8                 push    ebp
.text:0000B5E9                 mov     ebp, esp
.text:0000B5EB                 sub     esp, 34h
.text:0000B5EE                 push    esi
.text:0000B5EF                 push    edi
.text:0000B5F0                 lea     edi, [ebp+var_34]
.text:0000B5F3                 mov     ecx, 0Dh
.text:0000B5F8                 mov     eax, 0CCCCCCCCh
.text:0000B5FD                 rep stosd
.text:0000B5FF                 push    1
.text:0000B601                 mov     eax, [ebp+Size]
.text:0000B604                 lea     ecx, [eax+eax+2]
.text:0000B608                 push    ecx
.text:0000B609                 call    _safemalloc
.text:0000B60E                 add     esp, 8
.text:0000B611                 mov     [ebp+var_30], eax
.text:0000B614                 push    1
.text:0000B616                 mov     edx, [ebp+Size]
.text:0000B619                 push    edx
.text:0000B61A                 call    _safemalloc
.text:0000B61F                 add     esp, 8
.text:0000B622                 mov     [ebp+var_34], eax
.text:0000B625                 push    24h ; '$'       ; Size
.text:0000B627                 push    0               ; Val
.text:0000B629                 lea     eax, [ebp+Dst]
.text:0000B62C                 push    eax             ; Dst
.text:0000B62D                 call    _memset_0
.text:0000B632                 add     esp, 0Ch
.text:0000B635                 mov     ecx, [ebp+Size]
.text:0000B638                 lea     edx, [ecx+ecx+2]
.text:0000B63C                 push    edx             ; Size
.text:0000B63D                 push    0               ; Val
.text:0000B63F                 mov     eax, [ebp+var_30]
.text:0000B642                 push    eax             ; Dst
.text:0000B643                 call    _memset_0
.text:0000B648                 add     esp, 0Ch
.text:0000B64B                 mov     ecx, [ebp+Size]
.text:0000B64E                 push    ecx             ; Size
.text:0000B64F                 push    3               ; Val
.text:0000B651                 mov     edx, [ebp+var_34]
.text:0000B654                 push    edx             ; Dst
.text:0000B655                 call    _memset_0
.text:0000B65A                 add     esp, 0Ch
.text:0000B65D                 mov     [ebp+Dst], 24h ; '$'
.text:0000B664                 mov     eax, [ebp+var_30]
.text:0000B667                 mov     [ebp+var_10], eax
.text:0000B66A                 mov     ecx, [ebp+var_34]
.text:0000B66D                 mov     [ebp+var_14], ecx
.text:0000B670                 mov     edx, [ebp+Size]
.text:0000B673                 mov     [ebp+var_C], edx
.text:0000B676                 mov     esi, esp
.text:0000B678                 push    8113Bh          ; dwFlags
.text:0000B67D                 lea     eax, [ebp+Dst]
.text:0000B680                 push    eax             ; lpResults
.text:0000B681                 push    0               ; nMexExtent
.text:0000B683                 mov     ecx, [ebp+Size]
.text:0000B686                 push    ecx             ; nCount
.text:0000B687                 mov     edx, [ebp+lpString]
.text:0000B68A                 push    edx             ; lpString
.text:0000B68B                 mov     eax, [ebp+hdc]
.text:0000B68E                 push    eax             ; hdc
.text:0000B68F                 call    dword ptr ds:__imp__GetCharacterPlacementW@24 ; GetCharacterPlacementW(x,x,x,x,x,x)
.text:0000B695                 cmp     esi, esp
.text:0000B697                 call    __RTC_CheckEsp
.text:0000B69C                 mov     esi, esp
.text:0000B69E                 mov     ecx, [ebp+lpDx]
.text:0000B6A1                 push    ecx             ; lpDx
.text:0000B6A2                 mov     edx, [ebp+Size]
.text:0000B6A5                 push    edx             ; c
.text:0000B6A6                 mov     eax, [ebp+var_30]
.text:0000B6A9                 push    eax             ; lpString
.text:0000B6AA                 mov     ecx, [ebp+lprect]
.text:0000B6AD                 push    ecx             ; lprect
.text:0000B6AE                 mov     edx, [ebp+arg_1C]
.text:0000B6B1                 neg     edx
.text:0000B6B3                 sbb     edx, edx
.text:0000B6B5                 and     edx, 2
.text:0000B6B8                 or      edx, 14h
.text:0000B6BB                 push    edx             ; options
.text:0000B6BC                 mov     eax, [ebp+y]
.text:0000B6BF                 push    eax             ; y
.text:0000B6C0                 mov     ecx, [ebp+x]
.text:0000B6C3                 push    ecx             ; x
.text:0000B6C4                 mov     edx, [ebp+hdc]
.text:0000B6C7                 push    edx             ; hdc
.text:0000B6C8                 call    dword ptr ds:__imp__ExtTextOutA@32 ; ExtTextOutA(x,x,x,x,x,x,x,x)
.text:0000B6CE                 cmp     esi, esp
.text:0000B6D0                 call    __RTC_CheckEsp
.text:0000B6D5                 push    edx
.text:0000B6D6                 mov     ecx, ebp
.text:0000B6D8                 push    eax
.text:0000B6D9                 lea     edx, $LN5_3
.text:0000B6DF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000B6E4                 pop     eax
.text:0000B6E5                 pop     edx
.text:0000B6E6                 pop     edi
.text:0000B6E7                 pop     esi
.text:0000B6E8                 add     esp, 34h
.text:0000B6EB                 cmp     ebp, esp
.text:0000B6ED                 call    __RTC_CheckEsp
.text:0000B6F2                 mov     esp, ebp
.text:0000B6F4                 pop     ebp
.text:0000B6F5                 retn
.text:0000B6F5 _exact_textout  endp
.text:0000B6F5
.text:0000B6F5 ; ---------------------------------------------------------------------------
.text:0000B6F6                 align 4
.text:0000B6F8 $LN5_3          dd 1                    ; DATA XREF: _exact_textout+F1o
.text:0000B6FC                 dd offset $LN4_3
.text:0000B700 $LN4_3          dd 0FFFFFFD8h, 24h      ; DATA XREF: .text:0000B6FCo
.text:0000B708                 dd offset $LN3_3        ; "gcpr"
.text:0000B70C $LN3_3          db 'gcpr',0             ; DATA XREF: .text:0000B708o
.text:0000B711                 align 8
.text:0000B718
.text:0000B718 ; =============== S U B R O U T I N E =======================================
.text:0000B718
.text:0000B718 ; Attributes: bp-based frame
.text:0000B718
.text:0000B718 _another_font   proc near               ; CODE XREF: _do_text_internal+349p
.text:0000B718                                         ; _do_text_internal+37Ap ...
.text:0000B718
.text:0000B718 var_30          = dword ptr -30h
.text:0000B718 iQuality        = dword ptr -2Ch
.text:0000B718 var_28          = dword ptr -28h
.text:0000B718 pszFaceName     = dword ptr -24h
.text:0000B718 cWidth          = dword ptr -20h
.text:0000B718 cWeight         = dword ptr -1Ch
.text:0000B718 bUnderline      = dword ptr -18h
.text:0000B718 iCharSet        = dword ptr -14h
.text:0000B718 var_10          = dword ptr -10h
.text:0000B718 var_C           = dword ptr -0Ch
.text:0000B718 var_8           = dword ptr -8
.text:0000B718 var_4           = dword ptr -4
.text:0000B718 arg_0           = dword ptr  8
.text:0000B718
.text:0000B718                 push    ebp
.text:0000B719                 mov     ebp, esp
.text:0000B71B                 sub     esp, 30h
.text:0000B71E                 push    esi
.text:0000B71F                 push    edi
.text:0000B720                 lea     edi, [ebp+var_30]
.text:0000B723                 mov     ecx, 0Ch
.text:0000B728                 mov     eax, 0CCCCCCCCh
.text:0000B72D                 rep stosd
.text:0000B72F                 cmp     [ebp+arg_0], 0
.text:0000B733                 jl      short loc_B748
.text:0000B735                 cmp     [ebp+arg_0], 40h ; '@'
.text:0000B739                 jge     short loc_B748
.text:0000B73B                 mov     eax, [ebp+arg_0]
.text:0000B73E                 cmp     ds:_fontflag[eax*4], 0
.text:0000B746                 jz      short loc_B74D
.text:0000B748
.text:0000B748 loc_B748:                               ; CODE XREF: _another_font+1Bj
.text:0000B748                                         ; _another_font+21j
.text:0000B748                 jmp     loc_B8D6
.text:0000B74D ; ---------------------------------------------------------------------------
.text:0000B74D
.text:0000B74D loc_B74D:                               ; CODE XREF: _another_font+2Ej
.text:0000B74D                 mov     ecx, [ebp+arg_0]
.text:0000B750                 and     ecx, 0FFFFFFFCh
.text:0000B753                 mov     [ebp+var_4], ecx
.text:0000B756                 mov     edx, [ebp+var_4]
.text:0000B759                 cmp     edx, [ebp+arg_0]
.text:0000B75C                 jz      short loc_B777
.text:0000B75E                 mov     eax, [ebp+var_4]
.text:0000B761                 cmp     ds:_fontflag[eax*4], 0
.text:0000B769                 jnz     short loc_B777
.text:0000B76B                 mov     ecx, [ebp+var_4]
.text:0000B76E                 push    ecx
.text:0000B76F                 call    _another_font
.text:0000B774                 add     esp, 4
.text:0000B777
.text:0000B777 loc_B777:                               ; CODE XREF: _another_font+44j
.text:0000B777                                         ; _another_font+51j
.text:0000B777                 push    70h ; 'p'
.text:0000B779                 mov     edx, dword ptr ds:_conf
.text:0000B77F                 push    edx
.text:0000B780                 call    _conf_get_fontspec
.text:0000B785                 add     esp, 8
.text:0000B788                 mov     [ebp+var_28], eax
.text:0000B78B                 mov     eax, [ebp+var_28]
.text:0000B78E                 cmp     dword ptr [eax+4], 0
.text:0000B792                 jz      short loc_B7A4
.text:0000B794                 mov     [ebp+var_8], 2BCh
.text:0000B79B                 mov     [ebp+var_C], 384h
.text:0000B7A2                 jmp     short loc_B7B2
.text:0000B7A4 ; ---------------------------------------------------------------------------
.text:0000B7A4
.text:0000B7A4 loc_B7A4:                               ; CODE XREF: _another_font+7Aj
.text:0000B7A4                 mov     [ebp+var_8], 0
.text:0000B7AB                 mov     [ebp+var_C], 2BCh
.text:0000B7B2
.text:0000B7B2 loc_B7B2:                               ; CODE XREF: _another_font+8Aj
.text:0000B7B2                 mov     ecx, [ebp+var_28]
.text:0000B7B5                 mov     edx, [ecx+0Ch]
.text:0000B7B8                 mov     [ebp+iCharSet], edx
.text:0000B7BB                 mov     eax, [ebp+var_8]
.text:0000B7BE                 mov     [ebp+cWeight], eax
.text:0000B7C1                 mov     [ebp+bUnderline], 0
.text:0000B7C8                 mov     ecx, [ebp+var_28]
.text:0000B7CB                 mov     edx, [ecx]
.text:0000B7CD                 mov     [ebp+pszFaceName], edx
.text:0000B7D0                 mov     eax, ds:_font_width
.text:0000B7D5                 mov     [ebp+cWidth], eax
.text:0000B7D8                 mov     ecx, [ebp+arg_0]
.text:0000B7DB                 and     ecx, 4
.text:0000B7DE                 jz      short loc_B7E8
.text:0000B7E0                 mov     edx, [ebp+cWidth]
.text:0000B7E3                 shl     edx, 1
.text:0000B7E5                 mov     [ebp+cWidth], edx
.text:0000B7E8
.text:0000B7E8 loc_B7E8:                               ; CODE XREF: _another_font+C6j
.text:0000B7E8                 mov     eax, [ebp+arg_0]
.text:0000B7EB                 and     eax, 10h
.text:0000B7EE                 jz      short loc_B7FE
.text:0000B7F0                 mov     eax, [ebp+cWidth]
.text:0000B7F3                 add     eax, 1
.text:0000B7F6                 cdq
.text:0000B7F7                 sub     eax, edx
.text:0000B7F9                 sar     eax, 1
.text:0000B7FB                 mov     [ebp+cWidth], eax
.text:0000B7FE
.text:0000B7FE loc_B7FE:                               ; CODE XREF: _another_font+D6j
.text:0000B7FE                 mov     ecx, [ebp+arg_0]
.text:0000B801                 and     ecx, 20h
.text:0000B804                 jz      short loc_B80D
.text:0000B806                 mov     [ebp+iCharSet], 0FFh
.text:0000B80D
.text:0000B80D loc_B80D:                               ; CODE XREF: _another_font+ECj
.text:0000B80D                 mov     edx, [ebp+arg_0]
.text:0000B810                 and     edx, 1
.text:0000B813                 jz      short loc_B81B
.text:0000B815                 mov     eax, [ebp+var_C]
.text:0000B818                 mov     [ebp+cWeight], eax
.text:0000B81B
.text:0000B81B loc_B81B:                               ; CODE XREF: _another_font+FBj
.text:0000B81B                 mov     ecx, [ebp+arg_0]
.text:0000B81E                 and     ecx, 2
.text:0000B821                 jz      short loc_B82A
.text:0000B823                 mov     [ebp+bUnderline], 1
.text:0000B82A
.text:0000B82A loc_B82A:                               ; CODE XREF: _another_font+109j
.text:0000B82A                 push    71h ; 'q'
.text:0000B82C                 mov     edx, dword ptr ds:_conf
.text:0000B832                 push    edx
.text:0000B833                 call    _conf_get_int
.text:0000B838                 add     esp, 8
.text:0000B83B                 mov     [ebp+var_10], eax
.text:0000B83E                 cmp     [ebp+var_10], 0
.text:0000B842                 jnz     short loc_B84D
.text:0000B844                 mov     [ebp+iQuality], 0
.text:0000B84B                 jmp     short loc_B872
.text:0000B84D ; ---------------------------------------------------------------------------
.text:0000B84D
.text:0000B84D loc_B84D:                               ; CODE XREF: _another_font+12Aj
.text:0000B84D                 cmp     [ebp+var_10], 1
.text:0000B851                 jnz     short loc_B85C
.text:0000B853                 mov     [ebp+var_30], 4
.text:0000B85A                 jmp     short loc_B86C
.text:0000B85C ; ---------------------------------------------------------------------------
.text:0000B85C
.text:0000B85C loc_B85C:                               ; CODE XREF: _another_font+139j
.text:0000B85C                 xor     eax, eax
.text:0000B85E                 cmp     [ebp+var_10], 2
.text:0000B862                 setnz   al
.text:0000B865                 lea     eax, [eax+eax+3]
.text:0000B869                 mov     [ebp+var_30], eax
.text:0000B86C
.text:0000B86C loc_B86C:                               ; CODE XREF: _another_font+142j
.text:0000B86C                 mov     ecx, [ebp+var_30]
.text:0000B86F                 mov     [ebp+iQuality], ecx
.text:0000B872
.text:0000B872 loc_B872:                               ; CODE XREF: _another_font+133j
.text:0000B872                 mov     esi, esp
.text:0000B874                 mov     edx, [ebp+pszFaceName]
.text:0000B877                 push    edx             ; pszFaceName
.text:0000B878                 push    0               ; iPitchAndFamily
.text:0000B87A                 mov     eax, [ebp+iQuality]
.text:0000B87D                 push    eax             ; iQuality
.text:0000B87E                 push    0               ; iClipPrecision
.text:0000B880                 push    0               ; iOutPrecision
.text:0000B882                 mov     ecx, [ebp+iCharSet]
.text:0000B885                 push    ecx             ; iCharSet
.text:0000B886                 push    0               ; bStrikeOut
.text:0000B888                 mov     edx, [ebp+bUnderline]
.text:0000B88B                 push    edx             ; bUnderline
.text:0000B88C                 push    0               ; bItalic
.text:0000B88E                 mov     eax, [ebp+cWeight]
.text:0000B891                 push    eax             ; cWeight
.text:0000B892                 push    0               ; cOrientation
.text:0000B894                 push    0               ; cEscapement
.text:0000B896                 mov     ecx, [ebp+cWidth]
.text:0000B899                 push    ecx             ; cWidth
.text:0000B89A                 mov     edx, [ebp+arg_0]
.text:0000B89D                 and     edx, 8
.text:0000B8A0                 neg     edx
.text:0000B8A2                 sbb     edx, edx
.text:0000B8A4                 neg     edx
.text:0000B8A6                 add     edx, 1
.text:0000B8A9                 imul    edx, ds:_font_height
.text:0000B8B0                 push    edx             ; cHeight
.text:0000B8B1                 call    dword ptr ds:__imp__CreateFontA@56 ; CreateFontA(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text:0000B8B7                 cmp     esi, esp
.text:0000B8B9                 call    __RTC_CheckEsp
.text:0000B8BE                 mov     ecx, [ebp+arg_0]
.text:0000B8C1                 mov     ds:_fonts[ecx*4], eax
.text:0000B8C8                 mov     edx, [ebp+arg_0]
.text:0000B8CB                 mov     ds:_fontflag[edx*4], 1
.text:0000B8D6
.text:0000B8D6 loc_B8D6:                               ; CODE XREF: _another_font:loc_B748j
.text:0000B8D6                 pop     edi
.text:0000B8D7                 pop     esi
.text:0000B8D8                 add     esp, 30h
.text:0000B8DB                 cmp     ebp, esp
.text:0000B8DD                 call    __RTC_CheckEsp
.text:0000B8E2                 mov     esp, ebp
.text:0000B8E4                 pop     ebp
.text:0000B8E5                 retn
.text:0000B8E5 _another_font   endp
.text:0000B8E5
.text:0000B8E5 ; ---------------------------------------------------------------------------
.text:0000B8E6                 align 4
.text:0000B8E8
.text:0000B8E8 ; =============== S U B R O U T I N E =======================================
.text:0000B8E8
.text:0000B8E8 ; Attributes: bp-based frame
.text:0000B8E8
.text:0000B8E8 ; int __cdecl do_text(int, int, int, int, UINT, int, int)
.text:0000B8E8                 public _do_text
.text:0000B8E8 _do_text        proc near               ; CODE XREF: _do_cursor+81p
.text:0000B8E8
.text:0000B8E8 var_C           = dword ptr -0Ch
.text:0000B8E8 var_8           = dword ptr -8
.text:0000B8E8 var_4           = dword ptr -4
.text:0000B8E8 arg_0           = dword ptr  8
.text:0000B8E8 arg_4           = dword ptr  0Ch
.text:0000B8E8 arg_8           = dword ptr  10h
.text:0000B8E8 arg_C           = dword ptr  14h
.text:0000B8E8 arg_10          = dword ptr  18h
.text:0000B8E8 arg_14          = dword ptr  1Ch
.text:0000B8E8 arg_18          = dword ptr  20h
.text:0000B8E8
.text:0000B8E8                 push    ebp
.text:0000B8E9                 mov     ebp, esp
.text:0000B8EB                 sub     esp, 0Ch
.text:0000B8EE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000B8F5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000B8FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000B903                 mov     eax, [ebp+arg_14]
.text:0000B906                 and     eax, 80000000h
.text:0000B90B                 jz      loc_BB88
.text:0000B911                 mov     [ebp+var_4], 0
.text:0000B918                 mov     [ebp+var_8], 1
.text:0000B91F                 cmp     [ebp+arg_10], 2
.text:0000B923                 jl      short loc_B965
.text:0000B925                 mov     ecx, [ebp+arg_C]
.text:0000B928                 movzx   edx, word ptr [ecx]
.text:0000B92B                 cmp     edx, 0D800h
.text:0000B931                 jl      short loc_B965
.text:0000B933                 mov     eax, [ebp+arg_C]
.text:0000B936                 movzx   ecx, word ptr [eax]
.text:0000B939                 cmp     ecx, 0DBFFh
.text:0000B93F                 jg      short loc_B965
.text:0000B941                 mov     edx, [ebp+arg_C]
.text:0000B944                 movzx   eax, word ptr [edx+2]
.text:0000B948                 cmp     eax, 0DC00h
.text:0000B94D                 jl      short loc_B965
.text:0000B94F                 mov     ecx, [ebp+arg_C]
.text:0000B952                 movzx   edx, word ptr [ecx+2]
.text:0000B956                 cmp     edx, 0DFFFh
.text:0000B95C                 jg      short loc_B965
.text:0000B95E                 mov     [ebp+var_8], 2
.text:0000B965
.text:0000B965 loc_B965:                               ; CODE XREF: _do_text+3Bj
.text:0000B965                                         ; _do_text+49j ...
.text:0000B965                 mov     eax, [ebp+arg_10]
.text:0000B968                 sub     eax, [ebp+var_8]
.text:0000B96B                 cmp     eax, 1
.text:0000B96E                 jl      loc_BA12
.text:0000B974                 mov     ecx, [ebp+var_8]
.text:0000B977                 mov     edx, [ebp+arg_C]
.text:0000B97A                 movzx   eax, word ptr [edx+ecx*2]
.text:0000B97E                 cmp     eax, 180Bh
.text:0000B983                 jl      short loc_B996
.text:0000B985                 mov     ecx, [ebp+var_8]
.text:0000B988                 mov     edx, [ebp+arg_C]
.text:0000B98B                 movzx   eax, word ptr [edx+ecx*2]
.text:0000B98F                 cmp     eax, 180Dh
.text:0000B994                 jle     short loc_B9B8
.text:0000B996
.text:0000B996 loc_B996:                               ; CODE XREF: _do_text+9Bj
.text:0000B996                 mov     ecx, [ebp+var_8]
.text:0000B999                 mov     edx, [ebp+arg_C]
.text:0000B99C                 movzx   eax, word ptr [edx+ecx*2]
.text:0000B9A0                 cmp     eax, 0FE00h
.text:0000B9A5                 jl      short loc_BA12
.text:0000B9A7                 mov     ecx, [ebp+var_8]
.text:0000B9AA                 mov     edx, [ebp+arg_C]
.text:0000B9AD                 movzx   eax, word ptr [edx+ecx*2]
.text:0000B9B1                 cmp     eax, 0FE0Fh
.text:0000B9B6                 jg      short loc_BA12
.text:0000B9B8
.text:0000B9B8 loc_B9B8:                               ; CODE XREF: _do_text+ACj
.text:0000B9B8                 mov     ecx, [ebp+arg_14]
.text:0000B9BB                 and     ecx, 7FFFFFFFh
.text:0000B9C1                 mov     [ebp+arg_14], ecx
.text:0000B9C4                 mov     edx, [ebp+arg_18]
.text:0000B9C7                 push    edx             ; int
.text:0000B9C8                 mov     eax, [ebp+arg_14]
.text:0000B9CB                 push    eax             ; int
.text:0000B9CC                 mov     ecx, [ebp+var_8]
.text:0000B9CF                 add     ecx, 1
.text:0000B9D2                 push    ecx             ; UINT
.text:0000B9D3                 mov     edx, [ebp+arg_C]
.text:0000B9D6                 push    edx             ; int
.text:0000B9D7                 mov     eax, [ebp+arg_8]
.text:0000B9DA                 push    eax             ; int
.text:0000B9DB                 mov     ecx, [ebp+arg_4]
.text:0000B9DE                 push    ecx             ; int
.text:0000B9DF                 mov     edx, [ebp+arg_0]
.text:0000B9E2                 push    edx             ; int
.text:0000B9E3                 call    _do_text_internal
.text:0000B9E8                 add     esp, 1Ch
.text:0000B9EB                 mov     eax, [ebp+var_8]
.text:0000B9EE                 mov     ecx, [ebp+arg_C]
.text:0000B9F1                 lea     edx, [ecx+eax*2+2]
.text:0000B9F5                 mov     [ebp+arg_C], edx
.text:0000B9F8                 mov     eax, [ebp+var_8]
.text:0000B9FB                 add     eax, 1
.text:0000B9FE                 mov     ecx, [ebp+arg_10]
.text:0000BA01                 sub     ecx, eax
.text:0000BA03                 mov     [ebp+arg_10], ecx
.text:0000BA06                 mov     [ebp+var_4], 80000000h
.text:0000BA0D                 jmp     loc_BABB
.text:0000BA12 ; ---------------------------------------------------------------------------
.text:0000BA12
.text:0000BA12 loc_BA12:                               ; CODE XREF: _do_text+86j
.text:0000BA12                                         ; _do_text+BDj ...
.text:0000BA12                 mov     edx, [ebp+arg_10]
.text:0000BA15                 sub     edx, [ebp+var_8]
.text:0000BA18                 cmp     edx, 2
.text:0000BA1B                 jl      loc_BAAF
.text:0000BA21                 mov     eax, [ebp+var_8]
.text:0000BA24                 mov     ecx, [ebp+arg_C]
.text:0000BA27                 movzx   edx, word ptr [ecx+eax*2]
.text:0000BA2B                 cmp     edx, 0DB40h
.text:0000BA31                 jnz     short loc_BAAF
.text:0000BA33                 mov     eax, [ebp+var_8]
.text:0000BA36                 mov     ecx, [ebp+arg_C]
.text:0000BA39                 movzx   edx, word ptr [ecx+eax*2+2]
.text:0000BA3E                 cmp     edx, 0DD00h
.text:0000BA44                 jl      short loc_BAAF
.text:0000BA46                 mov     eax, [ebp+var_8]
.text:0000BA49                 mov     ecx, [ebp+arg_C]
.text:0000BA4C                 movzx   edx, word ptr [ecx+eax*2+2]
.text:0000BA51                 cmp     edx, 0DDEFh
.text:0000BA57                 jg      short loc_BAAF
.text:0000BA59                 mov     eax, [ebp+arg_14]
.text:0000BA5C                 and     eax, 7FFFFFFFh
.text:0000BA61                 mov     [ebp+arg_14], eax
.text:0000BA64                 mov     ecx, [ebp+arg_18]
.text:0000BA67                 push    ecx             ; int
.text:0000BA68                 mov     edx, [ebp+arg_14]
.text:0000BA6B                 push    edx             ; int
.text:0000BA6C                 mov     eax, [ebp+var_8]
.text:0000BA6F                 add     eax, 2
.text:0000BA72                 push    eax             ; UINT
.text:0000BA73                 mov     ecx, [ebp+arg_C]
.text:0000BA76                 push    ecx             ; int
.text:0000BA77                 mov     edx, [ebp+arg_8]
.text:0000BA7A                 push    edx             ; int
.text:0000BA7B                 mov     eax, [ebp+arg_4]
.text:0000BA7E                 push    eax             ; int
.text:0000BA7F                 mov     ecx, [ebp+arg_0]
.text:0000BA82                 push    ecx             ; int
.text:0000BA83                 call    _do_text_internal
.text:0000BA88                 add     esp, 1Ch
.text:0000BA8B                 mov     edx, [ebp+var_8]
.text:0000BA8E                 mov     eax, [ebp+arg_C]
.text:0000BA91                 lea     ecx, [eax+edx*2+4]
.text:0000BA95                 mov     [ebp+arg_C], ecx
.text:0000BA98                 mov     edx, [ebp+var_8]
.text:0000BA9B                 add     edx, 2
.text:0000BA9E                 mov     eax, [ebp+arg_10]
.text:0000BAA1                 sub     eax, edx
.text:0000BAA3                 mov     [ebp+arg_10], eax
.text:0000BAA6                 mov     [ebp+var_4], 80000000h
.text:0000BAAD                 jmp     short loc_BABB
.text:0000BAAF ; ---------------------------------------------------------------------------
.text:0000BAAF
.text:0000BAAF loc_BAAF:                               ; CODE XREF: _do_text+133j
.text:0000BAAF                                         ; _do_text+149j ...
.text:0000BAAF                 mov     ecx, [ebp+arg_14]
.text:0000BAB2                 and     ecx, 7FFFFFFFh
.text:0000BAB8                 mov     [ebp+arg_14], ecx
.text:0000BABB
.text:0000BABB loc_BABB:                               ; CODE XREF: _do_text+125j
.text:0000BABB                                         ; _do_text+1C5j ...
.text:0000BABB                 mov     edx, [ebp+arg_10]
.text:0000BABE                 mov     [ebp+var_C], edx
.text:0000BAC1                 mov     eax, [ebp+arg_10]
.text:0000BAC4                 sub     eax, 1
.text:0000BAC7                 mov     [ebp+arg_10], eax
.text:0000BACA                 cmp     [ebp+var_C], 0
.text:0000BACE                 jz      loc_BB86
.text:0000BAD4                 cmp     [ebp+arg_10], 1
.text:0000BAD8                 jl      short loc_BB4C
.text:0000BADA                 mov     ecx, [ebp+arg_C]
.text:0000BADD                 movzx   edx, word ptr [ecx]
.text:0000BAE0                 cmp     edx, 0D800h
.text:0000BAE6                 jl      short loc_BB4C
.text:0000BAE8                 mov     eax, [ebp+arg_C]
.text:0000BAEB                 movzx   ecx, word ptr [eax]
.text:0000BAEE                 cmp     ecx, 0DBFFh
.text:0000BAF4                 jg      short loc_BB4C
.text:0000BAF6                 mov     edx, [ebp+arg_C]
.text:0000BAF9                 movzx   eax, word ptr [edx+2]
.text:0000BAFD                 cmp     eax, 0DC00h
.text:0000BB02                 jl      short loc_BB4C
.text:0000BB04                 mov     ecx, [ebp+arg_C]
.text:0000BB07                 movzx   edx, word ptr [ecx+2]
.text:0000BB0B                 cmp     edx, 0DFFFh
.text:0000BB11                 jg      short loc_BB4C
.text:0000BB13                 mov     eax, [ebp+arg_18]
.text:0000BB16                 push    eax             ; int
.text:0000BB17                 mov     ecx, [ebp+arg_14]
.text:0000BB1A                 or      ecx, [ebp+var_4]
.text:0000BB1D                 push    ecx             ; int
.text:0000BB1E                 push    2               ; UINT
.text:0000BB20                 mov     edx, [ebp+arg_C]
.text:0000BB23                 push    edx             ; int
.text:0000BB24                 mov     eax, [ebp+arg_8]
.text:0000BB27                 push    eax             ; int
.text:0000BB28                 mov     ecx, [ebp+arg_4]
.text:0000BB2B                 push    ecx             ; int
.text:0000BB2C                 mov     edx, [ebp+arg_0]
.text:0000BB2F                 push    edx             ; int
.text:0000BB30                 call    _do_text_internal
.text:0000BB35                 add     esp, 1Ch
.text:0000BB38                 mov     eax, [ebp+arg_10]
.text:0000BB3B                 sub     eax, 1
.text:0000BB3E                 mov     [ebp+arg_10], eax
.text:0000BB41                 mov     ecx, [ebp+arg_C]
.text:0000BB44                 add     ecx, 2
.text:0000BB47                 mov     [ebp+arg_C], ecx
.text:0000BB4A                 jmp     short loc_BB71
.text:0000BB4C ; ---------------------------------------------------------------------------
.text:0000BB4C
.text:0000BB4C loc_BB4C:                               ; CODE XREF: _do_text+1F0j
.text:0000BB4C                                         ; _do_text+1FEj ...
.text:0000BB4C                 mov     edx, [ebp+arg_18]
.text:0000BB4F                 push    edx             ; int
.text:0000BB50                 mov     eax, [ebp+arg_14]
.text:0000BB53                 or      eax, [ebp+var_4]
.text:0000BB56                 push    eax             ; int
.text:0000BB57                 push    1               ; UINT
.text:0000BB59                 mov     ecx, [ebp+arg_C]
.text:0000BB5C                 push    ecx             ; int
.text:0000BB5D                 mov     edx, [ebp+arg_8]
.text:0000BB60                 push    edx             ; int
.text:0000BB61                 mov     eax, [ebp+arg_4]
.text:0000BB64                 push    eax             ; int
.text:0000BB65                 mov     ecx, [ebp+arg_0]
.text:0000BB68                 push    ecx             ; int
.text:0000BB69                 call    _do_text_internal
.text:0000BB6E                 add     esp, 1Ch
.text:0000BB71
.text:0000BB71 loc_BB71:                               ; CODE XREF: _do_text+262j
.text:0000BB71                 mov     edx, [ebp+arg_C]
.text:0000BB74                 add     edx, 2
.text:0000BB77                 mov     [ebp+arg_C], edx
.text:0000BB7A                 mov     [ebp+var_4], 80000000h
.text:0000BB81                 jmp     loc_BABB
.text:0000BB86 ; ---------------------------------------------------------------------------
.text:0000BB86
.text:0000BB86 loc_BB86:                               ; CODE XREF: _do_text+1E6j
.text:0000BB86                 jmp     short loc_BBAC
.text:0000BB88 ; ---------------------------------------------------------------------------
.text:0000BB88
.text:0000BB88 loc_BB88:                               ; CODE XREF: _do_text+23j
.text:0000BB88                 mov     eax, [ebp+arg_18]
.text:0000BB8B                 push    eax             ; int
.text:0000BB8C                 mov     ecx, [ebp+arg_14]
.text:0000BB8F                 push    ecx             ; int
.text:0000BB90                 mov     edx, [ebp+arg_10]
.text:0000BB93                 push    edx             ; UINT
.text:0000BB94                 mov     eax, [ebp+arg_C]
.text:0000BB97                 push    eax             ; int
.text:0000BB98                 mov     ecx, [ebp+arg_8]
.text:0000BB9B                 push    ecx             ; int
.text:0000BB9C                 mov     edx, [ebp+arg_4]
.text:0000BB9F                 push    edx             ; int
.text:0000BBA0                 mov     eax, [ebp+arg_0]
.text:0000BBA3                 push    eax             ; int
.text:0000BBA4                 call    _do_text_internal
.text:0000BBA9                 add     esp, 1Ch
.text:0000BBAC
.text:0000BBAC loc_BBAC:                               ; CODE XREF: _do_text:loc_BB86j
.text:0000BBAC                 add     esp, 0Ch
.text:0000BBAF                 cmp     ebp, esp
.text:0000BBB1                 call    __RTC_CheckEsp
.text:0000BBB6                 mov     esp, ebp
.text:0000BBB8                 pop     ebp
.text:0000BBB9                 retn
.text:0000BBB9 _do_text        endp
.text:0000BBB9
.text:0000BBB9 ; ---------------------------------------------------------------------------
.text:0000BBBA                 db 0Eh dup(0CCh)
.text:0000BBC8
.text:0000BBC8 ; =============== S U B R O U T I N E =======================================
.text:0000BBC8
.text:0000BBC8 ; Attributes: bp-based frame
.text:0000BBC8
.text:0000BBC8 ; int __cdecl do_cursor(int, int, int, int, UINT, int, int)
.text:0000BBC8                 public _do_cursor
.text:0000BBC8 _do_cursor      proc near
.text:0000BBC8
.text:0000BBC8 ho              = dword ptr -68h
.text:0000BBC8 var_64          = dword ptr -64h
.text:0000BBC8 var_60          = dword ptr -60h
.text:0000BBC8 var_5C          = dword ptr -5Ch
.text:0000BBC8 var_58          = dword ptr -58h
.text:0000BBC8 var_54          = dword ptr -54h
.text:0000BBC8 y               = dword ptr -50h
.text:0000BBC8 x               = dword ptr -4Ch
.text:0000BBC8 h               = dword ptr -48h
.text:0000BBC8 apt             = POINT ptr -40h
.text:0000BBC8 var_38          = dword ptr -38h
.text:0000BBC8 var_34          = dword ptr -34h
.text:0000BBC8 var_30          = dword ptr -30h
.text:0000BBC8 var_2C          = dword ptr -2Ch
.text:0000BBC8 var_28          = dword ptr -28h
.text:0000BBC8 var_24          = dword ptr -24h
.text:0000BBC8 var_20          = dword ptr -20h
.text:0000BBC8 var_1C          = dword ptr -1Ch
.text:0000BBC8 var_14          = dword ptr -14h
.text:0000BBC8 hdc             = dword ptr -10h
.text:0000BBC8 var_C           = dword ptr -0Ch
.text:0000BBC8 var_8           = dword ptr -8
.text:0000BBC8 var_4           = dword ptr -4
.text:0000BBC8 arg_0           = dword ptr  8
.text:0000BBC8 arg_4           = dword ptr  0Ch
.text:0000BBC8 arg_8           = dword ptr  10h
.text:0000BBC8 arg_C           = dword ptr  14h
.text:0000BBC8 arg_10          = dword ptr  18h
.text:0000BBC8 arg_14          = dword ptr  1Ch
.text:0000BBC8 arg_18          = dword ptr  20h
.text:0000BBC8
.text:0000BBC8                 push    ebp
.text:0000BBC9                 mov     ebp, esp
.text:0000BBCB                 sub     esp, 68h
.text:0000BBCE                 push    esi
.text:0000BBCF                 push    edi
.text:0000BBD0                 lea     edi, [ebp+ho]
.text:0000BBD3                 mov     ecx, 1Ah
.text:0000BBD8                 mov     eax, 0CCCCCCCCh
.text:0000BBDD                 rep stosd
.text:0000BBDF                 mov     eax, dword ptr ds:___security_cookie
.text:0000BBE4                 xor     eax, ebp
.text:0000BBE6                 mov     [ebp+var_4], eax
.text:0000BBE9                 mov     eax, [ebp+arg_0]
.text:0000BBEC                 mov     [ebp+hdc], eax
.text:0000BBEF                 mov     ecx, dword ptr ds:_cursor_type
.text:0000BBF5                 mov     [ebp+var_14], ecx
.text:0000BBF8                 mov     edx, [ebp+arg_18]
.text:0000BBFB                 and     edx, 3
.text:0000BBFE                 mov     [ebp+arg_18], edx
.text:0000BC01                 mov     eax, [ebp+arg_14]
.text:0000BC04                 and     eax, 40000000h
.text:0000BC09                 jz      short loc_BC69
.text:0000BC0B                 cmp     [ebp+var_14], 0
.text:0000BC0F                 jz      short loc_BC20
.text:0000BC11                 mov     ecx, dword ptr ds:_term
.text:0000BC17                 cmp     dword ptr [ecx+158h], 0
.text:0000BC1E                 jz      short loc_BC69
.text:0000BC20
.text:0000BC20 loc_BC20:                               ; CODE XREF: _do_cursor+47j
.text:0000BC20                 mov     edx, [ebp+arg_C]
.text:0000BC23                 movzx   eax, word ptr [edx]
.text:0000BC26                 cmp     eax, 0DFFFh
.text:0000BC2B                 jz      short loc_BC56
.text:0000BC2D                 mov     ecx, [ebp+arg_18]
.text:0000BC30                 push    ecx             ; int
.text:0000BC31                 mov     edx, [ebp+arg_14]
.text:0000BC34                 push    edx             ; int
.text:0000BC35                 mov     eax, [ebp+arg_10]
.text:0000BC38                 push    eax             ; UINT
.text:0000BC39                 mov     ecx, [ebp+arg_C]
.text:0000BC3C                 push    ecx             ; int
.text:0000BC3D                 mov     edx, [ebp+arg_8]
.text:0000BC40                 push    edx             ; int
.text:0000BC41                 mov     eax, [ebp+arg_4]
.text:0000BC44                 push    eax             ; int
.text:0000BC45                 mov     ecx, [ebp+arg_0]
.text:0000BC48                 push    ecx             ; int
.text:0000BC49                 call    _do_text
.text:0000BC4E                 add     esp, 1Ch
.text:0000BC51                 jmp     loc_BF55
.text:0000BC56 ; ---------------------------------------------------------------------------
.text:0000BC56
.text:0000BC56 loc_BC56:                               ; CODE XREF: _do_cursor+63j
.text:0000BC56                 mov     [ebp+var_14], 2
.text:0000BC5D                 mov     edx, [ebp+arg_14]
.text:0000BC60                 or      edx, 10000000h
.text:0000BC66                 mov     [ebp+arg_14], edx
.text:0000BC69
.text:0000BC69 loc_BC69:                               ; CODE XREF: _do_cursor+41j
.text:0000BC69                                         ; _do_cursor+56j
.text:0000BC69                 xor     eax, eax
.text:0000BC6B                 cmp     [ebp+arg_18], 0
.text:0000BC6F                 setnz   al
.text:0000BC72                 add     eax, 1
.text:0000BC75                 imul    eax, ds:_font_width
.text:0000BC7C                 mov     [ebp+var_C], eax
.text:0000BC7F                 mov     ecx, [ebp+var_C]
.text:0000BC82                 mov     [ebp+var_8], ecx
.text:0000BC85                 mov     edx, [ebp+arg_14]
.text:0000BC88                 and     edx, 400000h
.text:0000BC8E                 jz      short loc_BC98
.text:0000BC90                 mov     eax, [ebp+var_C]
.text:0000BC93                 shl     eax, 1
.text:0000BC95                 mov     [ebp+var_C], eax
.text:0000BC98
.text:0000BC98 loc_BC98:                               ; CODE XREF: _do_cursor+C6j
.text:0000BC98                 mov     ecx, [ebp+arg_4]
.text:0000BC9B                 imul    ecx, [ebp+var_8]
.text:0000BC9F                 mov     [ebp+arg_4], ecx
.text:0000BCA2                 mov     edx, [ebp+arg_8]
.text:0000BCA5                 imul    edx, ds:_font_height
.text:0000BCAC                 mov     [ebp+arg_8], edx
.text:0000BCAF                 mov     eax, [ebp+arg_4]
.text:0000BCB2                 add     eax, ds:_offset_width
.text:0000BCB8                 mov     [ebp+arg_4], eax
.text:0000BCBB                 mov     ecx, [ebp+arg_8]
.text:0000BCBE                 add     ecx, ds:_offset_height
.text:0000BCC4                 mov     [ebp+arg_8], ecx
.text:0000BCC7                 mov     edx, [ebp+arg_14]
.text:0000BCCA                 and     edx, 20000000h
.text:0000BCD0                 jz      loc_BDB6
.text:0000BCD6                 cmp     [ebp+var_14], 0
.text:0000BCDA                 jz      short loc_BCEE
.text:0000BCDC                 mov     eax, dword ptr ds:_term
.text:0000BCE1                 cmp     dword ptr [eax+158h], 0
.text:0000BCE8                 jz      loc_BDB6
.text:0000BCEE
.text:0000BCEE loc_BCEE:                               ; CODE XREF: _do_cursor+112j
.text:0000BCEE                 mov     ecx, [ebp+arg_4]
.text:0000BCF1                 mov     [ebp+var_20], ecx
.text:0000BCF4                 mov     edx, [ebp+var_20]
.text:0000BCF7                 mov     [ebp+var_38], edx
.text:0000BCFA                 mov     eax, [ebp+var_38]
.text:0000BCFD                 mov     [ebp+apt.x], eax
.text:0000BD00                 mov     ecx, [ebp+var_C]
.text:0000BD03                 mov     edx, [ebp+arg_4]
.text:0000BD06                 lea     eax, [edx+ecx-1]
.text:0000BD0A                 mov     [ebp+var_28], eax
.text:0000BD0D                 mov     ecx, [ebp+var_28]
.text:0000BD10                 mov     [ebp+var_30], ecx
.text:0000BD13                 mov     edx, [ebp+arg_8]
.text:0000BD16                 mov     [ebp+var_1C], edx
.text:0000BD19                 mov     eax, [ebp+var_1C]
.text:0000BD1C                 mov     [ebp+var_24], eax
.text:0000BD1F                 mov     ecx, [ebp+var_24]
.text:0000BD22                 mov     [ebp+apt.y], ecx
.text:0000BD25                 mov     edx, ds:_font_height
.text:0000BD2B                 mov     eax, [ebp+arg_8]
.text:0000BD2E                 lea     ecx, [eax+edx-1]
.text:0000BD32                 mov     [ebp+var_2C], ecx
.text:0000BD35                 mov     edx, [ebp+var_2C]
.text:0000BD38                 mov     [ebp+var_34], edx
.text:0000BD3B                 mov     esi, esp
.text:0000BD3D                 mov     eax, ds:dword_1544
.text:0000BD42                 push    eax             ; color
.text:0000BD43                 push    0               ; cWidth
.text:0000BD45                 push    0               ; iStyle
.text:0000BD47                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text:0000BD4D                 cmp     esi, esp
.text:0000BD4F                 call    __RTC_CheckEsp
.text:0000BD54                 mov     esi, esp
.text:0000BD56                 push    eax             ; h
.text:0000BD57                 mov     ecx, [ebp+hdc]
.text:0000BD5A                 push    ecx             ; hdc
.text:0000BD5B                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000BD61                 cmp     esi, esp
.text:0000BD63                 call    __RTC_CheckEsp
.text:0000BD68                 mov     [ebp+h], eax
.text:0000BD6B                 mov     esi, esp
.text:0000BD6D                 push    5               ; cpt
.text:0000BD6F                 lea     edx, [ebp+apt]
.text:0000BD72                 push    edx             ; apt
.text:0000BD73                 mov     eax, [ebp+hdc]
.text:0000BD76                 push    eax             ; hdc
.text:0000BD77                 call    dword ptr ds:__imp__Polyline@12 ; Polyline(x,x,x)
.text:0000BD7D                 cmp     esi, esp
.text:0000BD7F                 call    __RTC_CheckEsp
.text:0000BD84                 mov     esi, esp
.text:0000BD86                 mov     ecx, [ebp+h]
.text:0000BD89                 push    ecx             ; h
.text:0000BD8A                 mov     edx, [ebp+hdc]
.text:0000BD8D                 push    edx             ; hdc
.text:0000BD8E                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000BD94                 cmp     esi, esp
.text:0000BD96                 call    __RTC_CheckEsp
.text:0000BD9B                 mov     [ebp+h], eax
.text:0000BD9E                 mov     esi, esp
.text:0000BDA0                 mov     eax, [ebp+h]
.text:0000BDA3                 push    eax             ; ho
.text:0000BDA4                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:0000BDAA                 cmp     esi, esp
.text:0000BDAC                 call    __RTC_CheckEsp
.text:0000BDB1                 jmp     loc_BF55
.text:0000BDB6 ; ---------------------------------------------------------------------------
.text:0000BDB6
.text:0000BDB6 loc_BDB6:                               ; CODE XREF: _do_cursor+108j
.text:0000BDB6                                         ; _do_cursor+120j
.text:0000BDB6                 mov     ecx, [ebp+arg_14]
.text:0000BDB9                 and     ecx, 60000000h
.text:0000BDBF                 jz      loc_BF55
.text:0000BDC5                 cmp     [ebp+var_14], 0
.text:0000BDC9                 jz      loc_BF55
.text:0000BDCF                 cmp     [ebp+var_14], 1
.text:0000BDD3                 jnz     short loc_BDFD
.text:0000BDD5                 mov     edx, [ebp+arg_4]
.text:0000BDD8                 mov     [ebp+x], edx
.text:0000BDDB                 mov     eax, [ebp+arg_8]
.text:0000BDDE                 add     eax, ds:_descent
.text:0000BDE4                 mov     [ebp+y], eax
.text:0000BDE7                 mov     [ebp+var_54], 1
.text:0000BDEE                 mov     [ebp+var_58], 0
.text:0000BDF5                 mov     ecx, [ebp+var_C]
.text:0000BDF8                 mov     [ebp+var_5C], ecx
.text:0000BDFB                 jmp     short loc_BE3D
.text:0000BDFD ; ---------------------------------------------------------------------------
.text:0000BDFD
.text:0000BDFD loc_BDFD:                               ; CODE XREF: _do_cursor+20Bj
.text:0000BDFD                 mov     [ebp+var_64], 0
.text:0000BE04                 mov     edx, [ebp+arg_14]
.text:0000BE07                 and     edx, 10000000h
.text:0000BE0D                 jz      short loc_BE18
.text:0000BE0F                 mov     eax, [ebp+var_C]
.text:0000BE12                 sub     eax, 1
.text:0000BE15                 mov     [ebp+var_64], eax
.text:0000BE18
.text:0000BE18 loc_BE18:                               ; CODE XREF: _do_cursor+245j
.text:0000BE18                 mov     ecx, [ebp+arg_4]
.text:0000BE1B                 add     ecx, [ebp+var_64]
.text:0000BE1E                 mov     [ebp+x], ecx
.text:0000BE21                 mov     edx, [ebp+arg_8]
.text:0000BE24                 mov     [ebp+y], edx
.text:0000BE27                 mov     [ebp+var_54], 0
.text:0000BE2E                 mov     [ebp+var_58], 1
.text:0000BE35                 mov     eax, ds:_font_height
.text:0000BE3A                 mov     [ebp+var_5C], eax
.text:0000BE3D
.text:0000BE3D loc_BE3D:                               ; CODE XREF: _do_cursor+233j
.text:0000BE3D                 mov     ecx, [ebp+arg_14]
.text:0000BE40                 and     ecx, 40000000h
.text:0000BE46                 jz      loc_BEF2
.text:0000BE4C                 mov     esi, esp
.text:0000BE4E                 mov     edx, ds:dword_1544
.text:0000BE54                 push    edx             ; color
.text:0000BE55                 push    0               ; cWidth
.text:0000BE57                 push    0               ; iStyle
.text:0000BE59                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text:0000BE5F                 cmp     esi, esp
.text:0000BE61                 call    __RTC_CheckEsp
.text:0000BE66                 mov     esi, esp
.text:0000BE68                 push    eax             ; h
.text:0000BE69                 mov     eax, [ebp+hdc]
.text:0000BE6C                 push    eax             ; hdc
.text:0000BE6D                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000BE73                 cmp     esi, esp
.text:0000BE75                 call    __RTC_CheckEsp
.text:0000BE7A                 mov     [ebp+ho], eax
.text:0000BE7D                 mov     esi, esp
.text:0000BE7F                 push    0               ; lppt
.text:0000BE81                 mov     ecx, [ebp+y]
.text:0000BE84                 push    ecx             ; y
.text:0000BE85                 mov     edx, [ebp+x]
.text:0000BE88                 push    edx             ; x
.text:0000BE89                 mov     eax, [ebp+hdc]
.text:0000BE8C                 push    eax             ; hdc
.text:0000BE8D                 call    dword ptr ds:__imp__MoveToEx@16 ; MoveToEx(x,x,x,x)
.text:0000BE93                 cmp     esi, esp
.text:0000BE95                 call    __RTC_CheckEsp
.text:0000BE9A                 mov     ecx, [ebp+var_58]
.text:0000BE9D                 imul    ecx, [ebp+var_5C]
.text:0000BEA1                 add     ecx, [ebp+y]
.text:0000BEA4                 mov     esi, esp
.text:0000BEA6                 push    ecx             ; y
.text:0000BEA7                 mov     edx, [ebp+var_54]
.text:0000BEAA                 imul    edx, [ebp+var_5C]
.text:0000BEAE                 add     edx, [ebp+x]
.text:0000BEB1                 push    edx             ; x
.text:0000BEB2                 mov     eax, [ebp+hdc]
.text:0000BEB5                 push    eax             ; hdc
.text:0000BEB6                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text:0000BEBC                 cmp     esi, esp
.text:0000BEBE                 call    __RTC_CheckEsp
.text:0000BEC3                 mov     esi, esp
.text:0000BEC5                 mov     ecx, [ebp+ho]
.text:0000BEC8                 push    ecx             ; h
.text:0000BEC9                 mov     edx, [ebp+hdc]
.text:0000BECC                 push    edx             ; hdc
.text:0000BECD                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000BED3                 cmp     esi, esp
.text:0000BED5                 call    __RTC_CheckEsp
.text:0000BEDA                 mov     [ebp+ho], eax
.text:0000BEDD                 mov     esi, esp
.text:0000BEDF                 mov     eax, [ebp+ho]
.text:0000BEE2                 push    eax             ; ho
.text:0000BEE3                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:0000BEE9                 cmp     esi, esp
.text:0000BEEB                 call    __RTC_CheckEsp
.text:0000BEF0                 jmp     short loc_BF55
.text:0000BEF2 ; ---------------------------------------------------------------------------
.text:0000BEF2
.text:0000BEF2 loc_BEF2:                               ; CODE XREF: _do_cursor+27Ej
.text:0000BEF2                 mov     [ebp+var_60], 0
.text:0000BEF9                 jmp     short loc_BF04
.text:0000BEFB ; ---------------------------------------------------------------------------
.text:0000BEFB
.text:0000BEFB loc_BEFB:                               ; CODE XREF: _do_cursor+38Bj
.text:0000BEFB                 mov     ecx, [ebp+var_60]
.text:0000BEFE                 add     ecx, 1
.text:0000BF01                 mov     [ebp+var_60], ecx
.text:0000BF04
.text:0000BF04 loc_BF04:                               ; CODE XREF: _do_cursor+331j
.text:0000BF04                 mov     edx, [ebp+var_60]
.text:0000BF07                 cmp     edx, [ebp+var_5C]
.text:0000BF0A                 jge     short loc_BF55
.text:0000BF0C                 mov     eax, [ebp+var_60]
.text:0000BF0F                 and     eax, 80000001h
.text:0000BF14                 jns     short loc_BF1B
.text:0000BF16                 dec     eax
.text:0000BF17                 or      eax, 0FFFFFFFEh
.text:0000BF1A                 inc     eax
.text:0000BF1B
.text:0000BF1B loc_BF1B:                               ; CODE XREF: _do_cursor+34Cj
.text:0000BF1B                 test    eax, eax
.text:0000BF1D                 jnz     short loc_BF41
.text:0000BF1F                 mov     esi, esp
.text:0000BF21                 mov     ecx, ds:dword_1544
.text:0000BF27                 push    ecx             ; color
.text:0000BF28                 mov     edx, [ebp+y]
.text:0000BF2B                 push    edx             ; y
.text:0000BF2C                 mov     eax, [ebp+x]
.text:0000BF2F                 push    eax             ; x
.text:0000BF30                 mov     ecx, [ebp+hdc]
.text:0000BF33                 push    ecx             ; hdc
.text:0000BF34                 call    dword ptr ds:__imp__SetPixel@16 ; SetPixel(x,x,x,x)
.text:0000BF3A                 cmp     esi, esp
.text:0000BF3C                 call    __RTC_CheckEsp
.text:0000BF41
.text:0000BF41 loc_BF41:                               ; CODE XREF: _do_cursor+355j
.text:0000BF41                 mov     edx, [ebp+x]
.text:0000BF44                 add     edx, [ebp+var_54]
.text:0000BF47                 mov     [ebp+x], edx
.text:0000BF4A                 mov     eax, [ebp+y]
.text:0000BF4D                 add     eax, [ebp+var_58]
.text:0000BF50                 mov     [ebp+y], eax
.text:0000BF53                 jmp     short loc_BEFB
.text:0000BF55 ; ---------------------------------------------------------------------------
.text:0000BF55
.text:0000BF55 loc_BF55:                               ; CODE XREF: _do_cursor+89j
.text:0000BF55                                         ; _do_cursor+1E9j ...
.text:0000BF55                 push    edx
.text:0000BF56                 mov     ecx, ebp
.text:0000BF58                 push    eax
.text:0000BF59                 lea     edx, $LN22
.text:0000BF5F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000BF64                 pop     eax
.text:0000BF65                 pop     edx
.text:0000BF66                 pop     edi
.text:0000BF67                 pop     esi
.text:0000BF68                 mov     ecx, [ebp+var_4]
.text:0000BF6B                 xor     ecx, ebp
.text:0000BF6D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000BF72                 add     esp, 68h
.text:0000BF75                 cmp     ebp, esp
.text:0000BF77                 call    __RTC_CheckEsp
.text:0000BF7C                 mov     esp, ebp
.text:0000BF7E                 pop     ebp
.text:0000BF7F                 retn
.text:0000BF7F _do_cursor      endp
.text:0000BF7F
.text:0000BF7F ; ---------------------------------------------------------------------------
.text:0000BF80 $LN22           dd 1                    ; DATA XREF: _do_cursor+391o
.text:0000BF84                 dd offset $LN21_0
.text:0000BF88 ; ---------------------------------------------------------------------------
.text:0000BF88
.text:0000BF88 $LN21_0:                                ; DATA XREF: .text:0000BF84o
.text:0000BF88                 sar     bh, 0FFh
.text:0000BF8B                 jmp     fword ptr [eax]
.text:0000BF8B ; ---------------------------------------------------------------------------
.text:0000BF8D                 align 10h
.text:0000BF90                 dd offset $LN20_0
.text:0000BF94 $LN20_0         dd 737470h              ; DATA XREF: .text:0000BF90o
.text:0000BF98
.text:0000BF98 ; =============== S U B R O U T I N E =======================================
.text:0000BF98
.text:0000BF98 ; Attributes: bp-based frame
.text:0000BF98
.text:0000BF98 ; int __cdecl char_width(int, UINT iFirst)
.text:0000BF98                 public _char_width
.text:0000BF98 _char_width     proc near
.text:0000BF98
.text:0000BF98 var_14          = dword ptr -14h
.text:0000BF98 var_10          = dword ptr -10h
.text:0000BF98 Buffer          = dword ptr -0Ch
.text:0000BF98 var_8           = dword ptr -8
.text:0000BF98 hdc             = dword ptr -4
.text:0000BF98 arg_0           = dword ptr  8
.text:0000BF98 iFirst          = dword ptr  0Ch
.text:0000BF98
.text:0000BF98                 push    ebp
.text:0000BF99                 mov     ebp, esp
.text:0000BF9B                 sub     esp, 14h
.text:0000BF9E                 push    esi
.text:0000BF9F                 mov     eax, 0CCCCCCCCh
.text:0000BFA4                 mov     [ebp+var_14], eax
.text:0000BFA7                 mov     [ebp+var_10], eax
.text:0000BFAA                 mov     [ebp+Buffer], eax
.text:0000BFAD                 mov     [ebp+var_8], eax
.text:0000BFB0                 mov     [ebp+hdc], eax
.text:0000BFB3                 mov     eax, [ebp+arg_0]
.text:0000BFB6                 mov     [ebp+hdc], eax
.text:0000BFB9                 mov     [ebp+Buffer], 0
.text:0000BFC0                 cmp     ds:_font_dualwidth, 0
.text:0000BFC7                 jnz     short loc_BFD3
.text:0000BFC9                 mov     eax, 1
.text:0000BFCE                 jmp     loc_C210
.text:0000BFD3 ; ---------------------------------------------------------------------------
.text:0000BFD3
.text:0000BFD3 loc_BFD3:                               ; CODE XREF: _char_width+2Fj
.text:0000BFD3                 mov     ecx, [ebp+iFirst]
.text:0000BFD6                 and     ecx, 0FFFFFF00h
.text:0000BFDC                 mov     [ebp+var_14], ecx
.text:0000BFDF                 cmp     [ebp+var_14], 0D800h
.text:0000BFE6                 jz      short loc_BFFC
.text:0000BFE8                 cmp     [ebp+var_14], 0D900h
.text:0000BFEF                 jz      short loc_C012
.text:0000BFF1                 cmp     [ebp+var_14], 0DA00h
.text:0000BFF8                 jz      short loc_C028
.text:0000BFFA                 jmp     short loc_C03B
.text:0000BFFC ; ---------------------------------------------------------------------------
.text:0000BFFC
.text:0000BFFC loc_BFFC:                               ; CODE XREF: _char_width+4Ej
.text:0000BFFC                 mov     edx, [ebp+iFirst]
.text:0000BFFF                 and     edx, 0FFh
.text:0000C005                 movzx   eax, ds:word_7D0[edx*2]
.text:0000C00D                 mov     [ebp+iFirst], eax
.text:0000C010                 jmp     short loc_C03B
.text:0000C012 ; ---------------------------------------------------------------------------
.text:0000C012
.text:0000C012 loc_C012:                               ; CODE XREF: _char_width+57j
.text:0000C012                 mov     ecx, [ebp+iFirst]
.text:0000C015                 and     ecx, 0FFh
.text:0000C01B                 movzx   edx, ds:word_BD0[ecx*2]
.text:0000C023                 mov     [ebp+iFirst], edx
.text:0000C026                 jmp     short loc_C03B
.text:0000C028 ; ---------------------------------------------------------------------------
.text:0000C028
.text:0000C028 loc_C028:                               ; CODE XREF: _char_width+60j
.text:0000C028                 mov     eax, [ebp+iFirst]
.text:0000C02B                 and     eax, 0FFh
.text:0000C030                 movzx   ecx, ds:word_5D0[eax*2]
.text:0000C038                 mov     [ebp+iFirst], ecx
.text:0000C03B
.text:0000C03B loc_C03B:                               ; CODE XREF: _char_width+62j
.text:0000C03B                                         ; _char_width+78j ...
.text:0000C03B                 mov     edx, [ebp+iFirst]
.text:0000C03E                 and     edx, 0FFFFFE00h
.text:0000C044                 cmp     edx, 0F000h
.text:0000C04A                 jnz     loc_C16C
.text:0000C050                 cmp     ds:dword_5C4, 0
.text:0000C057                 jz      short loc_C063
.text:0000C059                 mov     eax, 1
.text:0000C05E                 jmp     loc_C210
.text:0000C063 ; ---------------------------------------------------------------------------
.text:0000C063
.text:0000C063 loc_C063:                               ; CODE XREF: _char_width+BFj
.text:0000C063                 mov     eax, [ebp+iFirst]
.text:0000C066                 and     eax, 0FFh
.text:0000C06B                 cmp     eax, 20h ; ' '
.text:0000C06E                 jb      short loc_C088
.text:0000C070                 mov     ecx, [ebp+iFirst]
.text:0000C073                 and     ecx, 0FFh
.text:0000C079                 cmp     ecx, 7Eh ; '~'
.text:0000C07C                 ja      short loc_C088
.text:0000C07E                 mov     eax, 1
.text:0000C083                 jmp     loc_C210
.text:0000C088 ; ---------------------------------------------------------------------------
.text:0000C088
.text:0000C088 loc_C088:                               ; CODE XREF: _char_width+D6j
.text:0000C088                                         ; _char_width+E4j
.text:0000C088                 mov     edx, [ebp+iFirst]
.text:0000C08B                 and     edx, 0FFFFFF00h
.text:0000C091                 cmp     edx, 0F100h
.text:0000C097                 jnz     short loc_C0B4
.text:0000C099                 mov     esi, esp
.text:0000C09B                 mov     eax, ds:_fonts
.text:0000C0A0                 push    eax             ; h
.text:0000C0A1                 mov     ecx, [ebp+hdc]
.text:0000C0A4                 push    ecx             ; hdc
.text:0000C0A5                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000C0AB                 cmp     esi, esp
.text:0000C0AD                 call    __RTC_CheckEsp
.text:0000C0B2                 jmp     short loc_C101
.text:0000C0B4 ; ---------------------------------------------------------------------------
.text:0000C0B4
.text:0000C0B4 loc_C0B4:                               ; CODE XREF: _char_width+FFj
.text:0000C0B4                 mov     edx, [ebp+iFirst]
.text:0000C0B7                 and     edx, 0FFFFFF00h
.text:0000C0BD                 cmp     edx, 0F000h
.text:0000C0C3                 jnz     short loc_C0FA
.text:0000C0C5                 push    20h ; ' '
.text:0000C0C7                 call    _another_font
.text:0000C0CC                 add     esp, 4
.text:0000C0CF                 cmp     ds:h, 0
.text:0000C0D6                 jnz     short loc_C0DF
.text:0000C0D8                 xor     eax, eax
.text:0000C0DA                 jmp     loc_C210
.text:0000C0DF ; ---------------------------------------------------------------------------
.text:0000C0DF
.text:0000C0DF loc_C0DF:                               ; CODE XREF: _char_width+13Ej
.text:0000C0DF                 mov     esi, esp
.text:0000C0E1                 mov     eax, ds:h
.text:0000C0E6                 push    eax             ; h
.text:0000C0E7                 mov     ecx, [ebp+hdc]
.text:0000C0EA                 push    ecx             ; hdc
.text:0000C0EB                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000C0F1                 cmp     esi, esp
.text:0000C0F3                 call    __RTC_CheckEsp
.text:0000C0F8                 jmp     short loc_C101
.text:0000C0FA ; ---------------------------------------------------------------------------
.text:0000C0FA
.text:0000C0FA loc_C0FA:                               ; CODE XREF: _char_width+12Bj
.text:0000C0FA                 xor     eax, eax
.text:0000C0FC                 jmp     loc_C210
.text:0000C101 ; ---------------------------------------------------------------------------
.text:0000C101
.text:0000C101 loc_C101:                               ; CODE XREF: _char_width+11Aj
.text:0000C101                                         ; _char_width+160j
.text:0000C101                 mov     esi, esp
.text:0000C103                 lea     edx, [ebp+Buffer]
.text:0000C106                 push    edx             ; lpBuffer
.text:0000C107                 mov     eax, [ebp+iFirst]
.text:0000C10A                 and     eax, 0FFh
.text:0000C10F                 push    eax             ; iLast
.text:0000C110                 mov     ecx, [ebp+iFirst]
.text:0000C113                 and     ecx, 0FFh
.text:0000C119                 push    ecx             ; iFirst
.text:0000C11A                 mov     edx, [ebp+hdc]
.text:0000C11D                 push    edx             ; hdc
.text:0000C11E                 call    dword ptr ds:__imp__GetCharWidth32A@16 ; GetCharWidth32A(x,x,x,x)
.text:0000C124                 cmp     esi, esp
.text:0000C126                 call    __RTC_CheckEsp
.text:0000C12B                 cmp     eax, 1
.text:0000C12E                 jz      short loc_C167
.text:0000C130                 mov     esi, esp
.text:0000C132                 lea     eax, [ebp+Buffer]
.text:0000C135                 push    eax             ; lpBuffer
.text:0000C136                 mov     ecx, [ebp+iFirst]
.text:0000C139                 and     ecx, 0FFh
.text:0000C13F                 push    ecx             ; iLast
.text:0000C140                 mov     edx, [ebp+iFirst]
.text:0000C143                 and     edx, 0FFh
.text:0000C149                 push    edx             ; iFirst
.text:0000C14A                 mov     eax, [ebp+hdc]
.text:0000C14D                 push    eax             ; hdc
.text:0000C14E                 call    dword ptr ds:__imp__GetCharWidthA@16 ; GetCharWidthA(x,x,x,x)
.text:0000C154                 cmp     esi, esp
.text:0000C156                 call    __RTC_CheckEsp
.text:0000C15B                 cmp     eax, 1
.text:0000C15E                 jz      short loc_C167
.text:0000C160                 xor     eax, eax
.text:0000C162                 jmp     loc_C210
.text:0000C167 ; ---------------------------------------------------------------------------
.text:0000C167
.text:0000C167 loc_C167:                               ; CODE XREF: _char_width+196j
.text:0000C167                                         ; _char_width+1C6j
.text:0000C167                 jmp     loc_C1EC
.text:0000C16C ; ---------------------------------------------------------------------------
.text:0000C16C
.text:0000C16C loc_C16C:                               ; CODE XREF: _char_width+B2j
.text:0000C16C                 cmp     [ebp+iFirst], 20h ; ' '
.text:0000C170                 jl      short loc_C182
.text:0000C172                 cmp     [ebp+iFirst], 7Eh ; '~'
.text:0000C176                 jg      short loc_C182
.text:0000C178                 mov     eax, 1
.text:0000C17D                 jmp     loc_C210
.text:0000C182 ; ---------------------------------------------------------------------------
.text:0000C182
.text:0000C182 loc_C182:                               ; CODE XREF: _char_width+1D8j
.text:0000C182                                         ; _char_width+1DEj
.text:0000C182                 mov     esi, esp
.text:0000C184                 mov     ecx, ds:_fonts
.text:0000C18A                 push    ecx             ; h
.text:0000C18B                 mov     edx, [ebp+hdc]
.text:0000C18E                 push    edx             ; hdc
.text:0000C18F                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:0000C195                 cmp     esi, esp
.text:0000C197                 call    __RTC_CheckEsp
.text:0000C19C                 mov     esi, esp
.text:0000C19E                 lea     eax, [ebp+Buffer]
.text:0000C1A1                 push    eax             ; lpBuffer
.text:0000C1A2                 mov     ecx, [ebp+iFirst]
.text:0000C1A5                 push    ecx             ; iLast
.text:0000C1A6                 mov     edx, [ebp+iFirst]
.text:0000C1A9                 push    edx             ; iFirst
.text:0000C1AA                 mov     eax, [ebp+hdc]
.text:0000C1AD                 push    eax             ; hdc
.text:0000C1AE                 call    dword ptr ds:__imp__GetCharWidth32W@16 ; GetCharWidth32W(x,x,x,x)
.text:0000C1B4                 cmp     esi, esp
.text:0000C1B6                 call    __RTC_CheckEsp
.text:0000C1BB                 cmp     eax, 1
.text:0000C1BE                 jnz     short loc_C1C2
.text:0000C1C0                 jmp     short loc_C1EC
.text:0000C1C2 ; ---------------------------------------------------------------------------
.text:0000C1C2
.text:0000C1C2 loc_C1C2:                               ; CODE XREF: _char_width+226j
.text:0000C1C2                 mov     esi, esp
.text:0000C1C4                 lea     ecx, [ebp+Buffer]
.text:0000C1C7                 push    ecx             ; lpBuffer
.text:0000C1C8                 mov     edx, [ebp+iFirst]
.text:0000C1CB                 push    edx             ; iLast
.text:0000C1CC                 mov     eax, [ebp+iFirst]
.text:0000C1CF                 push    eax             ; iFirst
.text:0000C1D0                 mov     ecx, [ebp+hdc]
.text:0000C1D3                 push    ecx             ; hdc
.text:0000C1D4                 call    dword ptr ds:__imp__GetCharWidthW@16 ; GetCharWidthW(x,x,x,x)
.text:0000C1DA                 cmp     esi, esp
.text:0000C1DC                 call    __RTC_CheckEsp
.text:0000C1E1                 cmp     eax, 1
.text:0000C1E4                 jnz     short loc_C1E8
.text:0000C1E6                 jmp     short loc_C1EC
.text:0000C1E8 ; ---------------------------------------------------------------------------
.text:0000C1E8
.text:0000C1E8 loc_C1E8:                               ; CODE XREF: _char_width+24Cj
.text:0000C1E8                 xor     eax, eax
.text:0000C1EA                 jmp     short loc_C210
.text:0000C1EC ; ---------------------------------------------------------------------------
.text:0000C1EC
.text:0000C1EC loc_C1EC:                               ; CODE XREF: _char_width:loc_C167j
.text:0000C1EC                                         ; _char_width+228j ...
.text:0000C1EC                 mov     eax, ds:_font_width
.text:0000C1F1                 cdq
.text:0000C1F2                 sub     eax, edx
.text:0000C1F4                 sar     eax, 1
.text:0000C1F6                 mov     edx, [ebp+Buffer]
.text:0000C1F9                 lea     eax, [edx+eax-1]
.text:0000C1FD                 mov     [ebp+Buffer], eax
.text:0000C200                 mov     eax, [ebp+Buffer]
.text:0000C203                 cdq
.text:0000C204                 idiv    ds:_font_width
.text:0000C20A                 mov     [ebp+Buffer], eax
.text:0000C20D                 mov     eax, [ebp+Buffer]
.text:0000C210
.text:0000C210 loc_C210:                               ; CODE XREF: _char_width+36j
.text:0000C210                                         ; _char_width+C6j ...
.text:0000C210                 push    edx
.text:0000C211                 mov     ecx, ebp
.text:0000C213                 push    eax
.text:0000C214                 lea     edx, $LN26
.text:0000C21A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000C21F                 pop     eax
.text:0000C220                 pop     edx
.text:0000C221                 pop     esi
.text:0000C222                 add     esp, 14h
.text:0000C225                 cmp     ebp, esp
.text:0000C227                 call    __RTC_CheckEsp
.text:0000C22C                 mov     esp, ebp
.text:0000C22E                 pop     ebp
.text:0000C22F                 retn
.text:0000C22F _char_width     endp
.text:0000C22F
.text:0000C22F ; ---------------------------------------------------------------------------
.text:0000C230 $LN26           dd 1                    ; DATA XREF: _char_width+27Co
.text:0000C234                 dd offset $LN25
.text:0000C238 $LN25           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000C234o
.text:0000C240                 dd offset $LN24         ; "ibuf"
.text:0000C244 $LN24           db 'ibuf',0             ; DATA XREF: .text:0000C240o
.text:0000C249                 db 0Fh dup(0CCh)
.text:0000C258
.text:0000C258 ; =============== S U B R O U T I N E =======================================
.text:0000C258
.text:0000C258 ; Attributes: bp-based frame
.text:0000C258
.text:0000C258 _init_winfuncs  proc near               ; CODE XREF: WinMain(x,x,x,x)+E7p
.text:0000C258
.text:0000C258 var_C           = dword ptr -0Ch
.text:0000C258 var_8           = dword ptr -8
.text:0000C258 hModule         = dword ptr -4
.text:0000C258
.text:0000C258                 push    ebp
.text:0000C259                 mov     ebp, esp
.text:0000C25B                 sub     esp, 0Ch
.text:0000C25E                 push    esi
.text:0000C25F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000C266                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000C26D                 mov     [ebp+hModule], 0CCCCCCCCh
.text:0000C274                 push    offset $SG90683 ; "user32.dll"
.text:0000C279                 call    _load_system32_dll
.text:0000C27E                 add     esp, 4
.text:0000C281                 mov     [ebp+hModule], eax
.text:0000C284                 cmp     [ebp+hModule], 0
.text:0000C288                 jz      short loc_C2A7
.text:0000C28A                 mov     esi, esp
.text:0000C28C                 push    offset $SG90686 ; "FlashWindowEx"
.text:0000C291                 mov     eax, [ebp+hModule]
.text:0000C294                 push    eax             ; hModule
.text:0000C295                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000C29B                 cmp     esi, esp
.text:0000C29D                 call    __RTC_CheckEsp
.text:0000C2A2                 mov     [ebp+var_8], eax
.text:0000C2A5                 jmp     short loc_C2AE
.text:0000C2A7 ; ---------------------------------------------------------------------------
.text:0000C2A7
.text:0000C2A7 loc_C2A7:                               ; CODE XREF: _init_winfuncs+30j
.text:0000C2A7                 mov     [ebp+var_8], 0
.text:0000C2AE
.text:0000C2AE loc_C2AE:                               ; CODE XREF: _init_winfuncs+4Dj
.text:0000C2AE                 mov     ecx, [ebp+var_8]
.text:0000C2B1                 mov     ds:_p_FlashWindowEx, ecx
.text:0000C2B7                 cmp     [ebp+hModule], 0
.text:0000C2BB                 jz      short loc_C2DA
.text:0000C2BD                 mov     esi, esp
.text:0000C2BF                 push    offset $SG90689 ; "ToUnicodeEx"
.text:0000C2C4                 mov     edx, [ebp+hModule]
.text:0000C2C7                 push    edx             ; hModule
.text:0000C2C8                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000C2CE                 cmp     esi, esp
.text:0000C2D0                 call    __RTC_CheckEsp
.text:0000C2D5                 mov     [ebp+var_C], eax
.text:0000C2D8                 jmp     short loc_C2E1
.text:0000C2DA ; ---------------------------------------------------------------------------
.text:0000C2DA
.text:0000C2DA loc_C2DA:                               ; CODE XREF: _init_winfuncs+63j
.text:0000C2DA                 mov     [ebp+var_C], 0
.text:0000C2E1
.text:0000C2E1 loc_C2E1:                               ; CODE XREF: _init_winfuncs+80j
.text:0000C2E1                 mov     eax, [ebp+var_C]
.text:0000C2E4                 mov     ds:_p_ToUnicodeEx, eax
.text:0000C2E9                 pop     esi
.text:0000C2EA                 add     esp, 0Ch
.text:0000C2ED                 cmp     ebp, esp
.text:0000C2EF                 call    __RTC_CheckEsp
.text:0000C2F4                 mov     esp, ebp
.text:0000C2F6                 pop     ebp
.text:0000C2F7                 retn
.text:0000C2F7 _init_winfuncs  endp
.text:0000C2F7
.text:0000C2F8
.text:0000C2F8 ; =============== S U B R O U T I N E =======================================
.text:0000C2F8
.text:0000C2F8 ; Attributes: bp-based frame
.text:0000C2F8
.text:0000C2F8 ; int __cdecl TranslateKey(int, UINT uVirtKey, int, int)
.text:0000C2F8 _TranslateKey   proc near               ; CODE XREF: WndProc(x,x,x,x)+27D8p
.text:0000C2F8
.text:0000C2F8 var_20C         = dword ptr -20Ch
.text:0000C2F8 Format          = dword ptr -208h
.text:0000C2F8 var_204         = dword ptr -204h
.text:0000C2F8 var_200         = dword ptr -200h
.text:0000C2F8 var_1FC         = dword ptr -1FCh
.text:0000C2F8 var_1F8         = dword ptr -1F8h
.text:0000C2F8 var_1F4         = dword ptr -1F4h
.text:0000C2F8 var_1F0         = dword ptr -1F0h
.text:0000C2F8 var_1EC         = dword ptr -1ECh
.text:0000C2F8 var_1E4         = word ptr -1E4h
.text:0000C2F8 var_1E2         = word ptr -1E2h
.text:0000C2F8 var_1D8         = word ptr -1D8h
.text:0000C2F8 var_1D6         = word ptr -1D6h
.text:0000C2F8 var_1C9         = byte ptr -1C9h
.text:0000C2F8 var_1C4         = dword ptr -1C4h
.text:0000C2F8 var_1BC         = word ptr -1BCh
.text:0000C2F8 var_1B0         = word ptr -1B0h
.text:0000C2F8 var_1A8         = dword ptr -1A8h
.text:0000C2F8 var_1A4         = dword ptr -1A4h
.text:0000C2F8 var_19D         = byte ptr -19Dh
.text:0000C2F8 var_19C         = dword ptr -19Ch
.text:0000C2F8 var_195         = byte ptr -195h
.text:0000C2F8 var_194         = dword ptr -194h
.text:0000C2F8 var_190         = word ptr -190h
.text:0000C2F8 var_18E         = byte ptr -18Eh
.text:0000C2F8 var_188         = dword ptr -188h
.text:0000C2F8 var_180         = byte ptr -180h
.text:0000C2F8 var_148         = dword ptr -148h
.text:0000C2F8 var_144         = dword ptr -144h
.text:0000C2F8 dwhkl           = dword ptr -140h
.text:0000C2F8 var_13C         = dword ptr -13Ch
.text:0000C2F8 var_138         = dword ptr -138h
.text:0000C2F8 var_134         = dword ptr -134h
.text:0000C2F8 var_130         = dword ptr -130h
.text:0000C2F8 Dest            = dword ptr -12Ch
.text:0000C2F8 var_128         = dword ptr -128h
.text:0000C2F8 var_124         = dword ptr -124h
.text:0000C2F8 cbMultiByte     = dword ptr -120h
.text:0000C2F8 var_11C         = dword ptr -11Ch
.text:0000C2F8 var_118         = dword ptr -118h
.text:0000C2F8 var_114         = dword ptr -114h
.text:0000C2F8 uScanCode       = dword ptr -110h
.text:0000C2F8 KeyState        = byte ptr -108h
.text:0000C2F8 var_F8          = byte ptr -0F8h
.text:0000C2F8 var_F7          = byte ptr -0F7h
.text:0000C2F8 var_F6          = byte ptr -0F6h
.text:0000C2F8 var_F4          = byte ptr -0F4h
.text:0000C2F8 var_78          = byte ptr -78h
.text:0000C2F8 var_63          = byte ptr -63h
.text:0000C2F8 var_4           = dword ptr -4
.text:0000C2F8 uVirtKey        = dword ptr  0Ch
.text:0000C2F8 arg_8           = dword ptr  10h
.text:0000C2F8 arg_C           = dword ptr  14h
.text:0000C2F8
.text:0000C2F8                 push    ebp
.text:0000C2F9                 mov     ebp, esp
.text:0000C2FB                 sub     esp, 20Ch
.text:0000C301                 push    esi
.text:0000C302                 push    edi
.text:0000C303                 lea     edi, [ebp+var_20C]
.text:0000C309                 mov     ecx, 83h ; 'â'
.text:0000C30E                 mov     eax, 0CCCCCCCCh
.text:0000C313                 rep stosd
.text:0000C315                 mov     eax, dword ptr ds:___security_cookie
.text:0000C31A                 xor     eax, ebp
.text:0000C31C                 mov     [ebp+var_4], eax
.text:0000C31F                 mov     [ebp+var_114], 0
.text:0000C329                 mov     eax, [ebp+arg_C]
.text:0000C32C                 mov     [ebp+Dest], eax
.text:0000C332                 push    3Fh ; '?'
.text:0000C334                 mov     ecx, dword ptr ds:_conf
.text:0000C33A                 push    ecx
.text:0000C33B                 call    _conf_get_int
.text:0000C340                 add     esp, 8
.text:0000C343                 mov     [ebp+var_130], eax
.text:0000C349                 push    41h ; 'A'
.text:0000C34B                 mov     edx, dword ptr ds:_conf
.text:0000C351                 push    edx
.text:0000C352                 call    _conf_get_int
.text:0000C357                 add     esp, 8
.text:0000C35A                 mov     [ebp+var_134], eax
.text:0000C360                 push    59h ; 'Y'
.text:0000C362                 mov     eax, dword ptr ds:_conf
.text:0000C367                 push    eax
.text:0000C368                 call    _conf_get_int
.text:0000C36D                 add     esp, 8
.text:0000C370                 mov     [ebp+var_138], eax
.text:0000C376                 push    4Bh ; 'K'
.text:0000C378                 mov     ecx, dword ptr ds:_conf
.text:0000C37E                 push    ecx
.text:0000C37F                 call    _conf_get_int
.text:0000C384                 add     esp, 8
.text:0000C387                 mov     [ebp+var_13C], eax
.text:0000C38D                 mov     esi, esp
.text:0000C38F                 push    0               ; idThread
.text:0000C391                 call    dword ptr ds:__imp__GetKeyboardLayout@4 ; GetKeyboardLayout(x)
.text:0000C397                 cmp     esi, esp
.text:0000C399                 call    __RTC_CheckEsp
.text:0000C39E                 mov     [ebp+dwhkl], eax
.text:0000C3A4                 mov     esi, esp
.text:0000C3A6                 lea     edx, [ebp+KeyState]
.text:0000C3AC                 push    edx             ; lpKeyState
.text:0000C3AD                 call    dword ptr ds:__imp__GetKeyboardState@4 ; GetKeyboardState(x)
.text:0000C3B3                 cmp     esi, esp
.text:0000C3B5                 call    __RTC_CheckEsp
.text:0000C3BA                 mov     [ebp+cbMultiByte], eax
.text:0000C3C0                 cmp     [ebp+cbMultiByte], 0
.text:0000C3C7                 jnz     short loc_C3E4
.text:0000C3C9                 push    100h            ; Size
.text:0000C3CE                 push    0               ; Val
.text:0000C3D0                 lea     eax, [ebp+KeyState]
.text:0000C3D6                 push    eax             ; Dst
.text:0000C3D7                 call    _memset_0
.text:0000C3DC                 add     esp, 0Ch
.text:0000C3DF                 jmp     loc_C489
.text:0000C3E4 ; ---------------------------------------------------------------------------
.text:0000C3E4
.text:0000C3E4 loc_C3E4:                               ; CODE XREF: _TranslateKey+CFj
.text:0000C3E4                 cmp     [ebp+uVirtKey], 12h
.text:0000C3E8                 jnz     short loc_C40A
.text:0000C3EA                 mov     ecx, [ebp+arg_8]
.text:0000C3ED                 shr     ecx, 10h
.text:0000C3F0                 and     ecx, 0FFFFh
.text:0000C3F6                 movzx   edx, cx
.text:0000C3F9                 and     edx, 100h
.text:0000C3FF                 jz      short loc_C40A
.text:0000C401                 mov     al, [ebp+var_F6]
.text:0000C407                 mov     [ebp+var_63], al
.text:0000C40A
.text:0000C40A loc_C40A:                               ; CODE XREF: _TranslateKey+F0j
.text:0000C40A                                         ; _TranslateKey+107j
.text:0000C40A                 cmp     [ebp+var_130], 3
.text:0000C411                 jz      short loc_C434
.text:0000C413                 cmp     [ebp+var_130], 1
.text:0000C41A                 jg      short loc_C473
.text:0000C41C                 mov     ecx, dword ptr ds:_term
.text:0000C422                 cmp     dword ptr [ecx+144h], 0
.text:0000C429                 jz      short loc_C473
.text:0000C42B                 cmp     [ebp+var_134], 0
.text:0000C432                 jnz     short loc_C473
.text:0000C434
.text:0000C434 loc_C434:                               ; CODE XREF: _TranslateKey+119j
.text:0000C434                 cmp     [ebp+uVirtKey], 90h ; 'É'
.text:0000C43B                 jnz     short loc_C473
.text:0000C43D                 movzx   edx, [ebp+var_F8]
.text:0000C444                 and     edx, 80h
.text:0000C44A                 jnz     short loc_C473
.text:0000C44C                 mov     [ebp+uVirtKey], 2Bh ; '+'
.text:0000C453                 mov     eax, [ebp+arg_8]
.text:0000C456                 shr     eax, 10h
.text:0000C459                 and     eax, 0FFFFh
.text:0000C45E                 movzx   ecx, ax
.text:0000C461                 and     ecx, 0C000h
.text:0000C467                 jnz     short loc_C473
.text:0000C469                 movzx   edx, [ebp+var_78]
.text:0000C46D                 xor     edx, 1
.text:0000C470                 mov     [ebp+var_78], dl
.text:0000C473
.text:0000C473 loc_C473:                               ; CODE XREF: _TranslateKey+122j
.text:0000C473                                         ; _TranslateKey+131j ...
.text:0000C473                 mov     esi, esp
.text:0000C475                 lea     eax, [ebp+KeyState]
.text:0000C47B                 push    eax             ; lpKeyState
.text:0000C47C                 call    dword ptr ds:__imp__SetKeyboardState@4 ; SetKeyboardState(x)
.text:0000C482                 cmp     esi, esp
.text:0000C484                 call    __RTC_CheckEsp
.text:0000C489
.text:0000C489 loc_C489:                               ; CODE XREF: _TranslateKey+E7j
.text:0000C489                 mov     ecx, dword ptr ds:_term
.text:0000C48F                 cmp     dword ptr [ecx+14Ch], 0
.text:0000C496                 jz      short loc_C4BA
.text:0000C498                 mov     edx, [ebp+arg_8]
.text:0000C49B                 shr     edx, 10h
.text:0000C49E                 and     edx, 0FFFFh
.text:0000C4A4                 movzx   eax, dx
.text:0000C4A7                 and     eax, 0C000h
.text:0000C4AC                 cmp     eax, 4000h
.text:0000C4B1                 jnz     short loc_C4BA
.text:0000C4B3                 xor     eax, eax
.text:0000C4B5                 jmp     loc_E0F5
.text:0000C4BA ; ---------------------------------------------------------------------------
.text:0000C4BA
.text:0000C4BA loc_C4BA:                               ; CODE XREF: _TranslateKey+19Ej
.text:0000C4BA                                         ; _TranslateKey+1B9j
.text:0000C4BA                 mov     ecx, [ebp+arg_8]
.text:0000C4BD                 shr     ecx, 10h
.text:0000C4C0                 and     ecx, 0FFFFh
.text:0000C4C6                 movzx   edx, cx
.text:0000C4C9                 and     edx, 2000h
.text:0000C4CF                 jz      short loc_C4E6
.text:0000C4D1                 movzx   eax, [ebp+var_63]
.text:0000C4D5                 and     eax, 80h
.text:0000C4DA                 jnz     short loc_C4E6
.text:0000C4DC                 mov     [ebp+var_114], 1
.text:0000C4E6
.text:0000C4E6 loc_C4E6:                               ; CODE XREF: _TranslateKey+1D7j
.text:0000C4E6                                         ; _TranslateKey+1E2j
.text:0000C4E6                 mov     ecx, [ebp+arg_8]
.text:0000C4E9                 shr     ecx, 10h
.text:0000C4EC                 and     ecx, 0FFFFh
.text:0000C4F2                 movzx   edx, cx
.text:0000C4F5                 and     edx, 8000h
.text:0000C4FB                 neg     edx
.text:0000C4FD                 sbb     edx, edx
.text:0000C4FF                 add     edx, 1
.text:0000C502                 mov     [ebp+var_118], edx
.text:0000C508                 cmp     [ebp+var_114], 0
.text:0000C50F                 jz      short loc_C53F
.text:0000C511                 movzx   eax, [ebp+var_F7]
.text:0000C518                 and     eax, 80h
.text:0000C51D                 jz      short loc_C53F
.text:0000C51F                 cmp     [ebp+var_138], 0
.text:0000C526                 jz      short loc_C531
.text:0000C528                 mov     [ebp+var_F6], 0
.text:0000C52F                 jmp     short loc_C53F
.text:0000C531 ; ---------------------------------------------------------------------------
.text:0000C531
.text:0000C531 loc_C531:                               ; CODE XREF: _TranslateKey+22Ej
.text:0000C531                 mov     [ebp+var_63], 80h ; 'Ç'
.text:0000C535                 mov     [ebp+var_114], 0
.text:0000C53F
.text:0000C53F loc_C53F:                               ; CODE XREF: _TranslateKey+217j
.text:0000C53F                                         ; _TranslateKey+225j ...
.text:0000C53F                 mov     ecx, [ebp+arg_8]
.text:0000C542                 shr     ecx, 10h
.text:0000C545                 and     ecx, 0FFFFh
.text:0000C54B                 movzx   edx, cx
.text:0000C54E                 and     edx, 81FFh
.text:0000C554                 mov     [ebp+uScanCode], edx
.text:0000C55A                 movzx   eax, [ebp+var_F8]
.text:0000C561                 and     eax, 80h
.text:0000C566                 neg     eax
.text:0000C568                 sbb     eax, eax
.text:0000C56A                 neg     eax
.text:0000C56C                 movzx   ecx, [ebp+var_F7]
.text:0000C573                 and     ecx, 80h
.text:0000C579                 neg     ecx
.text:0000C57B                 sbb     ecx, ecx
.text:0000C57D                 neg     ecx
.text:0000C57F                 lea     edx, [eax+ecx*2]
.text:0000C582                 mov     [ebp+var_11C], edx
.text:0000C588                 cmp     ds:_compose_state, 0
.text:0000C58F                 jnz     short loc_C5E3
.text:0000C591                 mov     ds:?compose_keycode@?1??TranslateKey@@9@9, 100h ; `TranslateKey'::`2'::compose_keycode
.text:0000C59B                 push    58h ; 'X'
.text:0000C59D                 mov     eax, dword ptr ds:_conf
.text:0000C5A2                 push    eax
.text:0000C5A3                 call    _conf_get_int
.text:0000C5A8                 add     esp, 8
.text:0000C5AB                 test    eax, eax
.text:0000C5AD                 jz      short loc_C5D4
.text:0000C5AF                 cmp     [ebp+uVirtKey], 12h
.text:0000C5B3                 jnz     short loc_C5D4
.text:0000C5B5                 mov     ecx, [ebp+arg_8]
.text:0000C5B8                 shr     ecx, 10h
.text:0000C5BB                 and     ecx, 0FFFFh
.text:0000C5C1                 movzx   edx, cx
.text:0000C5C4                 and     edx, 100h
.text:0000C5CA                 jz      short loc_C5D4
.text:0000C5CC                 mov     eax, [ebp+uVirtKey]
.text:0000C5CF                 mov     ds:?compose_keycode@?1??TranslateKey@@9@9, eax ; `TranslateKey'::`2'::compose_keycode
.text:0000C5D4
.text:0000C5D4 loc_C5D4:                               ; CODE XREF: _TranslateKey+2B5j
.text:0000C5D4                                         ; _TranslateKey+2BBj ...
.text:0000C5D4                 cmp     [ebp+uVirtKey], 5Dh ; ']'
.text:0000C5D8                 jnz     short loc_C5E3
.text:0000C5DA                 mov     ecx, [ebp+uVirtKey]
.text:0000C5DD                 mov     ds:?compose_keycode@?1??TranslateKey@@9@9, ecx ; `TranslateKey'::`2'::compose_keycode
.text:0000C5E3
.text:0000C5E3 loc_C5E3:                               ; CODE XREF: _TranslateKey+297j
.text:0000C5E3                                         ; _TranslateKey+2E0j
.text:0000C5E3                 mov     edx, [ebp+uVirtKey]
.text:0000C5E6                 cmp     edx, ds:?compose_keycode@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::compose_keycode
.text:0000C5EC                 jnz     short loc_C650
.text:0000C5EE                 cmp     ds:_compose_state, 0
.text:0000C5F5                 jnz     short loc_C619
.text:0000C5F7                 mov     eax, [ebp+arg_8]
.text:0000C5FA                 shr     eax, 10h
.text:0000C5FD                 and     eax, 0FFFFh
.text:0000C602                 movzx   ecx, ax
.text:0000C605                 and     ecx, 0C000h
.text:0000C60B                 jnz     short loc_C619
.text:0000C60D                 mov     ds:_compose_state, 1
.text:0000C617                 jmp     short loc_C64E
.text:0000C619 ; ---------------------------------------------------------------------------
.text:0000C619
.text:0000C619 loc_C619:                               ; CODE XREF: _TranslateKey+2FDj
.text:0000C619                                         ; _TranslateKey+313j
.text:0000C619                 cmp     ds:_compose_state, 1
.text:0000C620                 jnz     short loc_C644
.text:0000C622                 mov     edx, [ebp+arg_8]
.text:0000C625                 shr     edx, 10h
.text:0000C628                 and     edx, 0FFFFh
.text:0000C62E                 movzx   eax, dx
.text:0000C631                 and     eax, 8000h
.text:0000C636                 jz      short loc_C644
.text:0000C638                 mov     ds:_compose_state, 2
.text:0000C642                 jmp     short loc_C64E
.text:0000C644 ; ---------------------------------------------------------------------------
.text:0000C644
.text:0000C644 loc_C644:                               ; CODE XREF: _TranslateKey+328j
.text:0000C644                                         ; _TranslateKey+33Ej
.text:0000C644                 mov     ds:_compose_state, 0
.text:0000C64E
.text:0000C64E loc_C64E:                               ; CODE XREF: _TranslateKey+31Fj
.text:0000C64E                                         ; _TranslateKey+34Aj
.text:0000C64E                 jmp     short loc_C669
.text:0000C650 ; ---------------------------------------------------------------------------
.text:0000C650
.text:0000C650 loc_C650:                               ; CODE XREF: _TranslateKey+2F4j
.text:0000C650                 cmp     ds:_compose_state, 1
.text:0000C657                 jnz     short loc_C669
.text:0000C659                 cmp     [ebp+uVirtKey], 11h
.text:0000C65D                 jz      short loc_C669
.text:0000C65F                 mov     ds:_compose_state, 0
.text:0000C669
.text:0000C669 loc_C669:                               ; CODE XREF: _TranslateKey:loc_C64Ej
.text:0000C669                                         ; _TranslateKey+35Fj ...
.text:0000C669                 cmp     ds:_compose_state, 1
.text:0000C670                 jle     short loc_C685
.text:0000C672                 cmp     [ebp+var_114], 0
.text:0000C679                 jz      short loc_C685
.text:0000C67B                 mov     ds:_compose_state, 0
.text:0000C685
.text:0000C685 loc_C685:                               ; CODE XREF: _TranslateKey+378j
.text:0000C685                                         ; _TranslateKey+381j
.text:0000C685                 cmp     [ebp+var_114], 0
.text:0000C68C                 jnz     short loc_C6CE
.text:0000C68E                 mov     ecx, dword ptr ds:_term
.text:0000C694                 cmp     dword ptr [ecx+144h], 0
.text:0000C69B                 jz      short loc_C6AF
.text:0000C69D                 cmp     [ebp+var_134], 0
.text:0000C6A4                 jnz     short loc_C6AF
.text:0000C6A6                 cmp     [ebp+var_130], 2
.text:0000C6AD                 jnz     short loc_C6CE
.text:0000C6AF
.text:0000C6AF loc_C6AF:                               ; CODE XREF: _TranslateKey+3A3j
.text:0000C6AF                                         ; _TranslateKey+3ACj
.text:0000C6AF                 cmp     [ebp+var_130], 3
.text:0000C6B6                 jz      short loc_C6CE
.text:0000C6B8                 cmp     [ebp+var_13C], 0
.text:0000C6BF                 jnz     short loc_C6CE
.text:0000C6C1                 cmp     ds:_compose_state, 0
.text:0000C6C8                 jz      loc_C7D7
.text:0000C6CE
.text:0000C6CE loc_C6CE:                               ; CODE XREF: _TranslateKey+394j
.text:0000C6CE                                         ; _TranslateKey+3B5j ...
.text:0000C6CE                 mov     edx, [ebp+arg_8]
.text:0000C6D1                 shr     edx, 10h
.text:0000C6D4                 and     edx, 0FFFFh
.text:0000C6DA                 movzx   eax, dx
.text:0000C6DD                 and     eax, 100h
.text:0000C6E2                 jnz     loc_C7D7
.text:0000C6E8                 mov     [ebp+var_144], 0
.text:0000C6F2                 mov     ecx, [ebp+uVirtKey]
.text:0000C6F5                 mov     [ebp+var_1EC], ecx
.text:0000C6FB                 mov     edx, [ebp+var_1EC]
.text:0000C701                 sub     edx, 0Ch
.text:0000C704                 mov     [ebp+var_1EC], edx
.text:0000C70A                 cmp     [ebp+var_1EC], 22h ; '"' ; switch 35 cases
.text:0000C711                 ja      $LN209          ; jumptable 0000C724 default case
.text:0000C717                 mov     eax, [ebp+var_1EC]
.text:0000C71D                 movzx   ecx, ds:$LN242_0[eax]
.text:0000C724                 jmp     ds:$LN257[ecx*4] ; switch jump
.text:0000C72B ; ---------------------------------------------------------------------------
.text:0000C72B
.text:0000C72B $LN208:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C72B                                         ; DATA XREF: .text:$LN257o
.text:0000C72B                 mov     [ebp+var_144], 60h ; '`' ; jumptable 0000C724 case 33
.text:0000C735                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C737 ; ---------------------------------------------------------------------------
.text:0000C737
.text:0000C737 $LN207:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C737                                         ; DATA XREF: .text:$LN257o
.text:0000C737                 mov     [ebp+var_144], 61h ; 'a' ; jumptable 0000C724 case 23
.text:0000C741                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C743 ; ---------------------------------------------------------------------------
.text:0000C743
.text:0000C743 $LN206:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C743                                         ; DATA XREF: .text:$LN257o
.text:0000C743                 mov     [ebp+var_144], 62h ; 'b' ; jumptable 0000C724 case 28
.text:0000C74D                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C74F ; ---------------------------------------------------------------------------
.text:0000C74F
.text:0000C74F $LN205:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C74F                                         ; DATA XREF: .text:$LN257o
.text:0000C74F                 mov     [ebp+var_144], 63h ; 'c' ; jumptable 0000C724 case 22
.text:0000C759                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C75B ; ---------------------------------------------------------------------------
.text:0000C75B
.text:0000C75B $LN204:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C75B                                         ; DATA XREF: .text:$LN257o
.text:0000C75B                 mov     [ebp+var_144], 64h ; 'd' ; jumptable 0000C724 case 25
.text:0000C765                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C767 ; ---------------------------------------------------------------------------
.text:0000C767
.text:0000C767 $LN203:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C767                                         ; DATA XREF: .text:$LN257o
.text:0000C767                 mov     [ebp+var_144], 65h ; 'e' ; jumptable 0000C724 case 0
.text:0000C771                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C773 ; ---------------------------------------------------------------------------
.text:0000C773
.text:0000C773 $LN202:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C773                                         ; DATA XREF: .text:$LN257o
.text:0000C773                 mov     [ebp+var_144], 66h ; 'f' ; jumptable 0000C724 case 27
.text:0000C77D                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C77F ; ---------------------------------------------------------------------------
.text:0000C77F
.text:0000C77F $LN201:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C77F                                         ; DATA XREF: .text:$LN257o
.text:0000C77F                 mov     [ebp+var_144], 67h ; 'g' ; jumptable 0000C724 case 24
.text:0000C789                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C78B ; ---------------------------------------------------------------------------
.text:0000C78B
.text:0000C78B $LN200:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C78B                                         ; DATA XREF: .text:$LN257o
.text:0000C78B                 mov     [ebp+var_144], 68h ; 'h' ; jumptable 0000C724 case 26
.text:0000C795                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C797 ; ---------------------------------------------------------------------------
.text:0000C797
.text:0000C797 $LN199:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C797                                         ; DATA XREF: .text:$LN257o
.text:0000C797                 mov     [ebp+var_144], 69h ; 'i' ; jumptable 0000C724 case 21
.text:0000C7A1                 jmp     short $LN209    ; jumptable 0000C724 default case
.text:0000C7A3 ; ---------------------------------------------------------------------------
.text:0000C7A3
.text:0000C7A3 $LN198:                                 ; CODE XREF: _TranslateKey+42Cj
.text:0000C7A3                                         ; DATA XREF: .text:$LN257o
.text:0000C7A3                 mov     [ebp+var_144], 6Eh ; 'n' ; jumptable 0000C724 case 34
.text:0000C7AD
.text:0000C7AD $LN209:                                 ; CODE XREF: _TranslateKey+419j
.text:0000C7AD                                         ; _TranslateKey+42Cj ...
.text:0000C7AD                 cmp     [ebp+var_144], 0 ; jumptable 0000C724 default case
.text:0000C7B4                 jz      short loc_C7D7
.text:0000C7B6                 movzx   edx, [ebp+var_78]
.text:0000C7BA                 and     edx, 1
.text:0000C7BD                 jz      short loc_C7CE
.text:0000C7BF                 mov     eax, [ebp+var_11C]
.text:0000C7C5                 or      eax, 1
.text:0000C7C8                 mov     [ebp+var_11C], eax
.text:0000C7CE
.text:0000C7CE loc_C7CE:                               ; CODE XREF: _TranslateKey+4C5j
.text:0000C7CE                 mov     ecx, [ebp+var_144]
.text:0000C7D4                 mov     [ebp+uVirtKey], ecx
.text:0000C7D7
.text:0000C7D7 loc_C7D7:                               ; CODE XREF: _TranslateKey+3D0j
.text:0000C7D7                                         ; _TranslateKey+3EAj ...
.text:0000C7D7                 cmp     [ebp+var_118], 0
.text:0000C7DE                 jz      loc_DBC4
.text:0000C7E4                 movzx   edx, [ebp+var_63]
.text:0000C7E8                 and     edx, 80h
.text:0000C7EE                 jnz     loc_DBC4
.text:0000C7F4                 cmp     ds:_compose_state, 0
.text:0000C7FB                 jnz     loc_DBC4
.text:0000C801                 cmp     [ebp+var_114], 0
.text:0000C808                 jz      short loc_C822
.text:0000C80A                 mov     eax, [ebp+Dest]
.text:0000C810                 mov     byte ptr [eax], 1Bh
.text:0000C813                 mov     ecx, [ebp+Dest]
.text:0000C819                 add     ecx, 1
.text:0000C81C                 mov     [ebp+Dest], ecx
.text:0000C822
.text:0000C822 loc_C822:                               ; CODE XREF: _TranslateKey+510j
.text:0000C822                 cmp     [ebp+uVirtKey], 21h ; '!'
.text:0000C826                 jnz     short loc_C857
.text:0000C828                 cmp     [ebp+var_11C], 1
.text:0000C82F                 jnz     short loc_C857
.text:0000C831                 mov     esi, esp
.text:0000C833                 push    0               ; lParam
.text:0000C835                 push    2               ; wParam
.text:0000C837                 push    115h            ; Msg
.text:0000C83C                 mov     edx, dword ptr ds:_hwnd
.text:0000C842                 push    edx             ; hWnd
.text:0000C843                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000C849                 cmp     esi, esp
.text:0000C84B                 call    __RTC_CheckEsp
.text:0000C850                 xor     eax, eax
.text:0000C852                 jmp     loc_E0F5
.text:0000C857 ; ---------------------------------------------------------------------------
.text:0000C857
.text:0000C857 loc_C857:                               ; CODE XREF: _TranslateKey+52Ej
.text:0000C857                                         ; _TranslateKey+537j
.text:0000C857                 cmp     [ebp+uVirtKey], 21h ; '!'
.text:0000C85B                 jnz     short loc_C88B
.text:0000C85D                 cmp     [ebp+var_11C], 2
.text:0000C864                 jnz     short loc_C88B
.text:0000C866                 mov     esi, esp
.text:0000C868                 push    0               ; lParam
.text:0000C86A                 push    0               ; wParam
.text:0000C86C                 push    115h            ; Msg
.text:0000C871                 mov     eax, dword ptr ds:_hwnd
.text:0000C876                 push    eax             ; hWnd
.text:0000C877                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000C87D                 cmp     esi, esp
.text:0000C87F                 call    __RTC_CheckEsp
.text:0000C884                 xor     eax, eax
.text:0000C886                 jmp     loc_E0F5
.text:0000C88B ; ---------------------------------------------------------------------------
.text:0000C88B
.text:0000C88B loc_C88B:                               ; CODE XREF: _TranslateKey+563j
.text:0000C88B                                         ; _TranslateKey+56Cj
.text:0000C88B                 cmp     [ebp+uVirtKey], 22h ; '"'
.text:0000C88F                 jnz     short loc_C8C0
.text:0000C891                 cmp     [ebp+var_11C], 1
.text:0000C898                 jnz     short loc_C8C0
.text:0000C89A                 mov     esi, esp
.text:0000C89C                 push    0               ; lParam
.text:0000C89E                 push    3               ; wParam
.text:0000C8A0                 push    115h            ; Msg
.text:0000C8A5                 mov     ecx, dword ptr ds:_hwnd
.text:0000C8AB                 push    ecx             ; hWnd
.text:0000C8AC                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000C8B2                 cmp     esi, esp
.text:0000C8B4                 call    __RTC_CheckEsp
.text:0000C8B9                 xor     eax, eax
.text:0000C8BB                 jmp     loc_E0F5
.text:0000C8C0 ; ---------------------------------------------------------------------------
.text:0000C8C0
.text:0000C8C0 loc_C8C0:                               ; CODE XREF: _TranslateKey+597j
.text:0000C8C0                                         ; _TranslateKey+5A0j
.text:0000C8C0                 cmp     [ebp+uVirtKey], 22h ; '"'
.text:0000C8C4                 jnz     short loc_C8F5
.text:0000C8C6                 cmp     [ebp+var_11C], 2
.text:0000C8CD                 jnz     short loc_C8F5
.text:0000C8CF                 mov     esi, esp
.text:0000C8D1                 push    0               ; lParam
.text:0000C8D3                 push    1               ; wParam
.text:0000C8D5                 push    115h            ; Msg
.text:0000C8DA                 mov     edx, dword ptr ds:_hwnd
.text:0000C8E0                 push    edx             ; hWnd
.text:0000C8E1                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000C8E7                 cmp     esi, esp
.text:0000C8E9                 call    __RTC_CheckEsp
.text:0000C8EE                 xor     eax, eax
.text:0000C8F0                 jmp     loc_E0F5
.text:0000C8F5 ; ---------------------------------------------------------------------------
.text:0000C8F5
.text:0000C8F5 loc_C8F5:                               ; CODE XREF: _TranslateKey+5CCj
.text:0000C8F5                                         ; _TranslateKey+5D5j
.text:0000C8F5                 cmp     [ebp+uVirtKey], 21h ; '!'
.text:0000C8F9                 jz      short loc_C901
.text:0000C8FB                 cmp     [ebp+uVirtKey], 22h ; '"'
.text:0000C8FF                 jnz     short loc_C92A
.text:0000C901
.text:0000C901 loc_C901:                               ; CODE XREF: _TranslateKey+601j
.text:0000C901                 cmp     [ebp+var_11C], 3
.text:0000C908                 jnz     short loc_C92A
.text:0000C90A                 xor     eax, eax
.text:0000C90C                 cmp     [ebp+uVirtKey], 21h ; '!'
.text:0000C910                 setnz   al
.text:0000C913                 push    eax
.text:0000C914                 mov     ecx, dword ptr ds:_term
.text:0000C91A                 push    ecx
.text:0000C91B                 call    _term_scroll_to_selection
.text:0000C920                 add     esp, 8
.text:0000C923                 xor     eax, eax
.text:0000C925                 jmp     loc_E0F5
.text:0000C92A ; ---------------------------------------------------------------------------
.text:0000C92A
.text:0000C92A loc_C92A:                               ; CODE XREF: _TranslateKey+607j
.text:0000C92A                                         ; _TranslateKey+610j
.text:0000C92A                 cmp     [ebp+uVirtKey], 2Dh ; '-'
.text:0000C92E                 jnz     short loc_C94A
.text:0000C930                 cmp     [ebp+var_11C], 1
.text:0000C937                 jnz     short loc_C94A
.text:0000C939                 push    0
.text:0000C93B                 call    _request_paste
.text:0000C940                 add     esp, 4
.text:0000C943                 xor     eax, eax
.text:0000C945                 jmp     loc_E0F5
.text:0000C94A ; ---------------------------------------------------------------------------
.text:0000C94A
.text:0000C94A loc_C94A:                               ; CODE XREF: _TranslateKey+636j
.text:0000C94A                                         ; _TranslateKey+63Fj
.text:0000C94A                 cmp     [ebp+var_114], 0
.text:0000C951                 jz      short loc_C976
.text:0000C953                 cmp     [ebp+uVirtKey], 73h ; 's'
.text:0000C957                 jnz     short loc_C976
.text:0000C959                 push    4Eh ; 'N'
.text:0000C95B                 mov     edx, dword ptr ds:_conf
.text:0000C961                 push    edx
.text:0000C962                 call    _conf_get_int
.text:0000C967                 add     esp, 8
.text:0000C96A                 test    eax, eax
.text:0000C96C                 jz      short loc_C976
.text:0000C96E                 or      eax, 0FFFFFFFFh
.text:0000C971                 jmp     loc_E0F5
.text:0000C976 ; ---------------------------------------------------------------------------
.text:0000C976
.text:0000C976 loc_C976:                               ; CODE XREF: _TranslateKey+659j
.text:0000C976                                         ; _TranslateKey+65Fj ...
.text:0000C976                 cmp     [ebp+var_114], 0
.text:0000C97D                 jz      short loc_C9C3
.text:0000C97F                 cmp     [ebp+uVirtKey], 20h ; ' '
.text:0000C983                 jnz     short loc_C9C3
.text:0000C985                 push    4Fh ; 'O'
.text:0000C987                 mov     eax, dword ptr ds:_conf
.text:0000C98C                 push    eax
.text:0000C98D                 call    _conf_get_int
.text:0000C992                 add     esp, 8
.text:0000C995                 test    eax, eax
.text:0000C997                 jz      short loc_C9C3
.text:0000C999                 mov     esi, esp
.text:0000C99B                 push    0               ; lParam
.text:0000C99D                 push    0F100h          ; wParam
.text:0000C9A2                 push    112h            ; Msg
.text:0000C9A7                 mov     ecx, dword ptr ds:_hwnd
.text:0000C9AD                 push    ecx             ; hWnd
.text:0000C9AE                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000C9B4                 cmp     esi, esp
.text:0000C9B6                 call    __RTC_CheckEsp
.text:0000C9BB                 or      eax, 0FFFFFFFFh
.text:0000C9BE                 jmp     loc_E0F5
.text:0000C9C3 ; ---------------------------------------------------------------------------
.text:0000C9C3
.text:0000C9C3 loc_C9C3:                               ; CODE XREF: _TranslateKey+685j
.text:0000C9C3                                         ; _TranslateKey+68Bj ...
.text:0000C9C3                 cmp     [ebp+var_114], 0
.text:0000C9CA                 jz      short loc_CA26
.text:0000C9CC                 cmp     [ebp+uVirtKey], 0Dh
.text:0000C9D0                 jnz     short loc_CA26
.text:0000C9D2                 push    54h ; 'T'
.text:0000C9D4                 mov     edx, dword ptr ds:_conf
.text:0000C9DA                 push    edx
.text:0000C9DB                 call    _conf_get_int
.text:0000C9E0                 add     esp, 8
.text:0000C9E3                 test    eax, eax
.text:0000C9E5                 jz      short loc_CA26
.text:0000C9E7                 push    6Ah ; 'j'
.text:0000C9E9                 mov     eax, dword ptr ds:_conf
.text:0000C9EE                 push    eax
.text:0000C9EF                 call    _conf_get_int
.text:0000C9F4                 add     esp, 8
.text:0000C9F7                 cmp     eax, 1
.text:0000C9FA                 jz      short loc_CA26
.text:0000C9FC                 mov     ecx, [ebp+arg_8]
.text:0000C9FF                 shr     ecx, 10h
.text:0000CA02                 and     ecx, 0FFFFh
.text:0000CA08                 movzx   edx, cx
.text:0000CA0B                 and     edx, 0C000h
.text:0000CA11                 cmp     edx, 4000h
.text:0000CA17                 jz      short loc_CA1E
.text:0000CA19                 call    _flip_full_screen
.text:0000CA1E
.text:0000CA1E loc_CA1E:                               ; CODE XREF: _TranslateKey+71Fj
.text:0000CA1E                 or      eax, 0FFFFFFFFh
.text:0000CA21                 jmp     loc_E0F5
.text:0000CA26 ; ---------------------------------------------------------------------------
.text:0000CA26
.text:0000CA26 loc_CA26:                               ; CODE XREF: _TranslateKey+6D2j
.text:0000CA26                                         ; _TranslateKey+6D8j ...
.text:0000CA26                 cmp     [ebp+uVirtKey], 13h
.text:0000CA2A                 jnz     short loc_CA56
.text:0000CA2C                 cmp     [ebp+var_11C], 2
.text:0000CA33                 jnz     short loc_CA56
.text:0000CA35                 mov     eax, dword ptr ds:_term
.text:0000CA3A                 mov     ecx, [eax+144h]
.text:0000CA40                 xor     ecx, 1
.text:0000CA43                 mov     edx, dword ptr ds:_term
.text:0000CA49                 mov     [edx+144h], ecx
.text:0000CA4F                 xor     eax, eax
.text:0000CA51                 jmp     loc_E0F5
.text:0000CA56 ; ---------------------------------------------------------------------------
.text:0000CA56
.text:0000CA56 loc_CA56:                               ; CODE XREF: _TranslateKey+732j
.text:0000CA56                                         ; _TranslateKey+73Bj
.text:0000CA56                 cmp     [ebp+var_13C], 0
.text:0000CA5D                 jz      loc_CC77        ; jumptable 0000CA9B default case
.text:0000CA63                 cmp     [ebp+var_114], 0
.text:0000CA6A                 jnz     loc_CC77        ; jumptable 0000CA9B default case
.text:0000CA70                 mov     eax, [ebp+uVirtKey]
.text:0000CA73                 mov     [ebp+var_1F0], eax
.text:0000CA79                 mov     ecx, [ebp+var_1F0]
.text:0000CA7F                 sub     ecx, 61h ; 'a'
.text:0000CA82                 mov     [ebp+var_1F0], ecx
.text:0000CA88                 cmp     [ebp+var_1F0], 8 ; switch 9 cases
.text:0000CA8F                 ja      loc_CC77        ; jumptable 0000CA9B default case
.text:0000CA95                 mov     edx, [ebp+var_1F0]
.text:0000CA9B                 jmp     ds:$LN258[edx*4] ; switch jump
.text:0000CAA2 ; ---------------------------------------------------------------------------
.text:0000CAA2
.text:0000CAA2 $LN178_0:                               ; CODE XREF: _TranslateKey+7A3j
.text:0000CAA2                                         ; DATA XREF: .text:$LN258o
.text:0000CAA2                 mov     eax, [ebp+var_11C] ; jumptable 0000CA9B case 0
.text:0000CAA8                 and     eax, 3
.text:0000CAAB                 mov     ecx, [ebp+Dest]
.text:0000CAB1                 mov     dl, $SG90809[eax]
.text:0000CAB7                 mov     [ecx], dl
.text:0000CAB9                 mov     eax, [ebp+Dest]
.text:0000CABF                 add     eax, 1
.text:0000CAC2                 mov     [ebp+Dest], eax
.text:0000CAC8                 mov     eax, [ebp+Dest]
.text:0000CACE                 sub     eax, [ebp+arg_C]
.text:0000CAD1                 jmp     loc_E0F5
.text:0000CAD6 ; ---------------------------------------------------------------------------
.text:0000CAD6
.text:0000CAD6 $LN177:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CAD6                                         ; DATA XREF: .text:$LN258o
.text:0000CAD6                 mov     ecx, [ebp+var_11C] ; jumptable 0000CA9B case 1
.text:0000CADC                 and     ecx, 3
.text:0000CADF                 mov     edx, [ebp+Dest]
.text:0000CAE5                 mov     al, $SG90811[ecx]
.text:0000CAEB                 mov     [edx], al
.text:0000CAED                 mov     ecx, [ebp+Dest]
.text:0000CAF3                 add     ecx, 1
.text:0000CAF6                 mov     [ebp+Dest], ecx
.text:0000CAFC                 mov     eax, [ebp+Dest]
.text:0000CB02                 sub     eax, [ebp+arg_C]
.text:0000CB05                 jmp     loc_E0F5
.text:0000CB0A ; ---------------------------------------------------------------------------
.text:0000CB0A
.text:0000CB0A $LN176:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CB0A                                         ; DATA XREF: .text:$LN258o
.text:0000CB0A                 mov     edx, [ebp+var_11C] ; jumptable 0000CA9B case 2
.text:0000CB10                 and     edx, 3
.text:0000CB13                 mov     eax, [ebp+Dest]
.text:0000CB19                 mov     cl, $SG90813[edx]
.text:0000CB1F                 mov     [eax], cl
.text:0000CB21                 mov     edx, [ebp+Dest]
.text:0000CB27                 add     edx, 1
.text:0000CB2A                 mov     [ebp+Dest], edx
.text:0000CB30                 mov     eax, [ebp+Dest]
.text:0000CB36                 sub     eax, [ebp+arg_C]
.text:0000CB39                 jmp     loc_E0F5
.text:0000CB3E ; ---------------------------------------------------------------------------
.text:0000CB3E
.text:0000CB3E $LN175:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CB3E                                         ; DATA XREF: .text:$LN258o
.text:0000CB3E                 mov     eax, [ebp+var_11C] ; jumptable 0000CA9B case 3
.text:0000CB44                 and     eax, 3
.text:0000CB47                 mov     ecx, [ebp+Dest]
.text:0000CB4D                 mov     dl, $SG90815[eax]
.text:0000CB53                 mov     [ecx], dl
.text:0000CB55                 mov     eax, [ebp+Dest]
.text:0000CB5B                 add     eax, 1
.text:0000CB5E                 mov     [ebp+Dest], eax
.text:0000CB64                 mov     eax, [ebp+Dest]
.text:0000CB6A                 sub     eax, [ebp+arg_C]
.text:0000CB6D                 jmp     loc_E0F5
.text:0000CB72 ; ---------------------------------------------------------------------------
.text:0000CB72
.text:0000CB72 $LN174:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CB72                                         ; DATA XREF: .text:$LN258o
.text:0000CB72                 mov     ecx, [ebp+var_11C] ; jumptable 0000CA9B case 4
.text:0000CB78                 neg     ecx
.text:0000CB7A                 sbb     ecx, ecx
.text:0000CB7C                 and     ecx, 0
.text:0000CB7F                 add     ecx, 2Eh ; '.'
.text:0000CB82                 mov     edx, [ebp+Dest]
.text:0000CB88                 mov     [edx], cl
.text:0000CB8A                 mov     eax, [ebp+Dest]
.text:0000CB90                 add     eax, 1
.text:0000CB93                 mov     [ebp+Dest], eax
.text:0000CB99                 mov     eax, [ebp+Dest]
.text:0000CB9F                 sub     eax, [ebp+arg_C]
.text:0000CBA2                 jmp     loc_E0F5
.text:0000CBA7 ; ---------------------------------------------------------------------------
.text:0000CBA7
.text:0000CBA7 $LN173_0:                               ; CODE XREF: _TranslateKey+7A3j
.text:0000CBA7                                         ; DATA XREF: .text:$LN258o
.text:0000CBA7                 mov     ecx, [ebp+var_11C] ; jumptable 0000CA9B case 5
.text:0000CBAD                 and     ecx, 3
.text:0000CBB0                 mov     edx, [ebp+Dest]
.text:0000CBB6                 mov     al, $SG90818[ecx]
.text:0000CBBC                 mov     [edx], al
.text:0000CBBE                 mov     ecx, [ebp+Dest]
.text:0000CBC4                 add     ecx, 1
.text:0000CBC7                 mov     [ebp+Dest], ecx
.text:0000CBCD                 mov     eax, [ebp+Dest]
.text:0000CBD3                 sub     eax, [ebp+arg_C]
.text:0000CBD6                 jmp     loc_E0F5
.text:0000CBDB ; ---------------------------------------------------------------------------
.text:0000CBDB
.text:0000CBDB $LN172:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CBDB                                         ; DATA XREF: .text:$LN258o
.text:0000CBDB                 mov     edx, [ebp+var_11C] ; jumptable 0000CA9B case 6
.text:0000CBE1                 and     edx, 3
.text:0000CBE4                 mov     eax, [ebp+Dest]
.text:0000CBEA                 mov     cl, $SG90820[edx]
.text:0000CBF0                 mov     [eax], cl
.text:0000CBF2                 mov     edx, [ebp+Dest]
.text:0000CBF8                 add     edx, 1
.text:0000CBFB                 mov     [ebp+Dest], edx
.text:0000CC01                 mov     eax, [ebp+Dest]
.text:0000CC07                 sub     eax, [ebp+arg_C]
.text:0000CC0A                 jmp     loc_E0F5
.text:0000CC0F ; ---------------------------------------------------------------------------
.text:0000CC0F
.text:0000CC0F $LN171:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CC0F                                         ; DATA XREF: .text:$LN258o
.text:0000CC0F                 mov     eax, [ebp+var_11C] ; jumptable 0000CA9B case 7
.text:0000CC15                 and     eax, 3
.text:0000CC18                 mov     ecx, [ebp+Dest]
.text:0000CC1E                 mov     dl, $SG90822[eax]
.text:0000CC24                 mov     [ecx], dl
.text:0000CC26                 mov     eax, [ebp+Dest]
.text:0000CC2C                 add     eax, 1
.text:0000CC2F                 mov     [ebp+Dest], eax
.text:0000CC35                 mov     eax, [ebp+Dest]
.text:0000CC3B                 sub     eax, [ebp+arg_C]
.text:0000CC3E                 jmp     loc_E0F5
.text:0000CC43 ; ---------------------------------------------------------------------------
.text:0000CC43
.text:0000CC43 $LN170:                                 ; CODE XREF: _TranslateKey+7A3j
.text:0000CC43                                         ; DATA XREF: .text:$LN258o
.text:0000CC43                 mov     ecx, [ebp+var_11C] ; jumptable 0000CA9B case 8
.text:0000CC49                 and     ecx, 3
.text:0000CC4C                 mov     edx, [ebp+Dest]
.text:0000CC52                 mov     al, $SG90824[ecx]
.text:0000CC58                 mov     [edx], al
.text:0000CC5A                 mov     ecx, [ebp+Dest]
.text:0000CC60                 add     ecx, 1
.text:0000CC63                 mov     [ebp+Dest], ecx
.text:0000CC69                 mov     eax, [ebp+Dest]
.text:0000CC6F                 sub     eax, [ebp+arg_C]
.text:0000CC72                 jmp     loc_E0F5
.text:0000CC77 ; ---------------------------------------------------------------------------
.text:0000CC77
.text:0000CC77 loc_CC77:                               ; CODE XREF: _TranslateKey+765j
.text:0000CC77                                         ; _TranslateKey+772j ...
.text:0000CC77                 cmp     [ebp+var_114], 0 ; jumptable 0000CA9B default case
.text:0000CC7E                 jnz     loc_CF78
.text:0000CC84                 mov     [ebp+var_148], 0
.text:0000CC8E                 cmp     [ebp+var_130], 3
.text:0000CC95                 jz      short loc_CCB8
.text:0000CC97                 cmp     [ebp+var_130], 1
.text:0000CC9E                 jg      short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CCA0                 mov     edx, dword ptr ds:_term
.text:0000CCA6                 cmp     dword ptr [edx+144h], 0
.text:0000CCAD                 jz      short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CCAF                 cmp     [ebp+var_134], 0
.text:0000CCB6                 jnz     short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CCB8
.text:0000CCB8 loc_CCB8:                               ; CODE XREF: _TranslateKey+99Dj
.text:0000CCB8                 mov     eax, [ebp+uVirtKey]
.text:0000CCBB                 mov     [ebp+var_1F4], eax
.text:0000CCC1                 mov     ecx, [ebp+var_1F4]
.text:0000CCC7                 sub     ecx, 2Bh ; '+'
.text:0000CCCA                 mov     [ebp+var_1F4], ecx
.text:0000CCD0                 cmp     [ebp+var_1F4], 44h ; 'D' ; switch 69 cases
.text:0000CCD7                 ja      short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CCD9                 mov     edx, [ebp+var_1F4]
.text:0000CCDF                 movzx   eax, ds:$LN243_0[edx]
.text:0000CCE6                 jmp     ds:$LN259[eax*4] ; switch jump
.text:0000CCED ; ---------------------------------------------------------------------------
.text:0000CCED
.text:0000CCED $LN164_0:                               ; CODE XREF: _TranslateKey+9EEj
.text:0000CCED                                         ; DATA XREF: .text:$LN259o
.text:0000CCED                 mov     [ebp+var_148], 50h ; 'P' ; jumptable 0000CCE6 case 0
.text:0000CCF7                 jmp     short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CCF9 ; ---------------------------------------------------------------------------
.text:0000CCF9
.text:0000CCF9 $LN163_0:                               ; CODE XREF: _TranslateKey+9EEj
.text:0000CCF9                                         ; DATA XREF: .text:$LN259o
.text:0000CCF9                 mov     [ebp+var_148], 51h ; 'Q' ; jumptable 0000CCE6 case 68
.text:0000CD03                 jmp     short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CD05 ; ---------------------------------------------------------------------------
.text:0000CD05
.text:0000CD05 $LN162_0:                               ; CODE XREF: _TranslateKey+9EEj
.text:0000CD05                                         ; DATA XREF: .text:$LN259o
.text:0000CD05                 mov     [ebp+var_148], 52h ; 'R' ; jumptable 0000CCE6 case 63
.text:0000CD0F                 jmp     short $LN168_0  ; jumptable 0000CCE6 default case
.text:0000CD11 ; ---------------------------------------------------------------------------
.text:0000CD11
.text:0000CD11 $LN161:                                 ; CODE XREF: _TranslateKey+9EEj
.text:0000CD11                                         ; DATA XREF: .text:$LN259o
.text:0000CD11                 mov     [ebp+var_148], 53h ; 'S' ; jumptable 0000CCE6 case 66
.text:0000CD1B
.text:0000CD1B $LN168_0:                               ; CODE XREF: _TranslateKey+9A6j
.text:0000CD1B                                         ; _TranslateKey+9B5j ...
.text:0000CD1B                 mov     ecx, dword ptr ds:_term ; jumptable 0000CCE6 default case
.text:0000CD21                 cmp     dword ptr [ecx+144h], 0
.text:0000CD28                 jz      $LN160          ; jumptable 0000CD6D default case
.text:0000CD2E                 cmp     [ebp+var_134], 0
.text:0000CD35                 jnz     $LN160          ; jumptable 0000CD6D default case
.text:0000CD3B                 mov     edx, [ebp+uVirtKey]
.text:0000CD3E                 mov     [ebp+var_1F8], edx
.text:0000CD44                 mov     eax, [ebp+var_1F8]
.text:0000CD4A                 sub     eax, 0Dh
.text:0000CD4D                 mov     [ebp+var_1F8], eax
.text:0000CD53                 cmp     [ebp+var_1F8], 62h ; 'b' ; switch 99 cases
.text:0000CD5A                 ja      $LN160          ; jumptable 0000CD6D default case
.text:0000CD60                 mov     ecx, [ebp+var_1F8]
.text:0000CD66                 movzx   edx, ds:$LN244[ecx]
.text:0000CD6D                 jmp     ds:$LN260[edx*4] ; switch jump
.text:0000CD74 ; ---------------------------------------------------------------------------
.text:0000CD74
.text:0000CD74 $LN157:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CD74                                         ; DATA XREF: .text:$LN260o
.text:0000CD74                 mov     [ebp+var_148], 70h ; 'p' ; jumptable 0000CD6D case 83
.text:0000CD7E                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CD83 ; ---------------------------------------------------------------------------
.text:0000CD83
.text:0000CD83 $LN156:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CD83                                         ; DATA XREF: .text:$LN260o
.text:0000CD83                 mov     [ebp+var_148], 71h ; 'q' ; jumptable 0000CD6D case 84
.text:0000CD8D                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CD92 ; ---------------------------------------------------------------------------
.text:0000CD92
.text:0000CD92 $LN155:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CD92                                         ; DATA XREF: .text:$LN260o
.text:0000CD92                 mov     [ebp+var_148], 72h ; 'r' ; jumptable 0000CD6D case 85
.text:0000CD9C                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDA1 ; ---------------------------------------------------------------------------
.text:0000CDA1
.text:0000CDA1 $LN154:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDA1                                         ; DATA XREF: .text:$LN260o
.text:0000CDA1                 mov     [ebp+var_148], 73h ; 's' ; jumptable 0000CD6D case 86
.text:0000CDAB                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDB0 ; ---------------------------------------------------------------------------
.text:0000CDB0
.text:0000CDB0 $LN153:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDB0                                         ; DATA XREF: .text:$LN260o
.text:0000CDB0                 mov     [ebp+var_148], 74h ; 't' ; jumptable 0000CD6D case 87
.text:0000CDBA                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDBF ; ---------------------------------------------------------------------------
.text:0000CDBF
.text:0000CDBF $LN152:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDBF                                         ; DATA XREF: .text:$LN260o
.text:0000CDBF                 mov     [ebp+var_148], 75h ; 'u' ; jumptable 0000CD6D case 88
.text:0000CDC9                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDCE ; ---------------------------------------------------------------------------
.text:0000CDCE
.text:0000CDCE $LN151:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDCE                                         ; DATA XREF: .text:$LN260o
.text:0000CDCE                 mov     [ebp+var_148], 76h ; 'v' ; jumptable 0000CD6D case 89
.text:0000CDD8                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDDD ; ---------------------------------------------------------------------------
.text:0000CDDD
.text:0000CDDD $LN150:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDDD                                         ; DATA XREF: .text:$LN260o
.text:0000CDDD                 mov     [ebp+var_148], 77h ; 'w' ; jumptable 0000CD6D case 90
.text:0000CDE7                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDEC ; ---------------------------------------------------------------------------
.text:0000CDEC
.text:0000CDEC $LN149:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDEC                                         ; DATA XREF: .text:$LN260o
.text:0000CDEC                 mov     [ebp+var_148], 78h ; 'x' ; jumptable 0000CD6D case 91
.text:0000CDF6                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CDFB ; ---------------------------------------------------------------------------
.text:0000CDFB
.text:0000CDFB $LN148:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CDFB                                         ; DATA XREF: .text:$LN260o
.text:0000CDFB                 mov     [ebp+var_148], 79h ; 'y' ; jumptable 0000CD6D case 92
.text:0000CE05                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CE0A ; ---------------------------------------------------------------------------
.text:0000CE0A
.text:0000CE0A $LN147_0:                               ; CODE XREF: _TranslateKey+A75j
.text:0000CE0A                                         ; DATA XREF: .text:$LN260o
.text:0000CE0A                 mov     [ebp+var_148], 6Eh ; 'n' ; jumptable 0000CD6D case 97
.text:0000CE14                 jmp     $LN160          ; jumptable 0000CD6D default case
.text:0000CE19 ; ---------------------------------------------------------------------------
.text:0000CE19
.text:0000CE19 $LN146:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CE19                                         ; DATA XREF: .text:$LN260o
.text:0000CE19                 cmp     [ebp+var_130], 2 ; jumptable 0000CD6D case 94
.text:0000CE20                 jnz     short loc_CE43
.text:0000CE22                 cmp     [ebp+var_11C], 0
.text:0000CE29                 jz      short loc_CE37
.text:0000CE2B                 mov     [ebp+var_148], 6Ch ; 'l'
.text:0000CE35                 jmp     short loc_CE41
.text:0000CE37 ; ---------------------------------------------------------------------------
.text:0000CE37
.text:0000CE37 loc_CE37:                               ; CODE XREF: _TranslateKey+B31j
.text:0000CE37                 mov     [ebp+var_148], 6Bh ; 'k'
.text:0000CE41
.text:0000CE41 loc_CE41:                               ; CODE XREF: _TranslateKey+B3Dj
.text:0000CE41                 jmp     short loc_CE62
.text:0000CE43 ; ---------------------------------------------------------------------------
.text:0000CE43
.text:0000CE43 loc_CE43:                               ; CODE XREF: _TranslateKey+B28j
.text:0000CE43                 cmp     [ebp+var_11C], 0
.text:0000CE4A                 jz      short loc_CE58
.text:0000CE4C                 mov     [ebp+var_148], 6Dh ; 'm'
.text:0000CE56                 jmp     short loc_CE62
.text:0000CE58 ; ---------------------------------------------------------------------------
.text:0000CE58
.text:0000CE58 loc_CE58:                               ; CODE XREF: _TranslateKey+B52j
.text:0000CE58                 mov     [ebp+var_148], 6Ch ; 'l'
.text:0000CE62
.text:0000CE62 loc_CE62:                               ; CODE XREF: _TranslateKey:loc_CE41j
.text:0000CE62                                         ; _TranslateKey+B5Ej
.text:0000CE62                 jmp     short $LN160    ; jumptable 0000CD6D default case
.text:0000CE64 ; ---------------------------------------------------------------------------
.text:0000CE64
.text:0000CE64 $LN139:                                 ; CODE XREF: _TranslateKey+A75j
.text:0000CE64                                         ; DATA XREF: .text:$LN260o
.text:0000CE64                 cmp     [ebp+var_130], 2 ; jumptable 0000CD6D case 98
.text:0000CE6B                 jnz     short loc_CE77
.text:0000CE6D                 mov     [ebp+var_148], 6Fh ; 'o'
.text:0000CE77
.text:0000CE77 loc_CE77:                               ; CODE XREF: _TranslateKey+B73j
.text:0000CE77                 jmp     short $LN160    ; jumptable 0000CD6D default case
.text:0000CE79 ; ---------------------------------------------------------------------------
.text:0000CE79
.text:0000CE79 $LN137_0:                               ; CODE XREF: _TranslateKey+A75j
.text:0000CE79                                         ; DATA XREF: .text:$LN260o
.text:0000CE79                 cmp     [ebp+var_130], 2 ; jumptable 0000CD6D case 93
.text:0000CE80                 jnz     short loc_CE8C
.text:0000CE82                 mov     [ebp+var_148], 6Ah ; 'j'
.text:0000CE8C
.text:0000CE8C loc_CE8C:                               ; CODE XREF: _TranslateKey+B88j
.text:0000CE8C                 jmp     short $LN160    ; jumptable 0000CD6D default case
.text:0000CE8E ; ---------------------------------------------------------------------------
.text:0000CE8E
.text:0000CE8E $LN135_0:                               ; CODE XREF: _TranslateKey+A75j
.text:0000CE8E                                         ; DATA XREF: .text:$LN260o
.text:0000CE8E                 cmp     [ebp+var_130], 2 ; jumptable 0000CD6D case 96
.text:0000CE95                 jnz     short loc_CEA1
.text:0000CE97                 mov     [ebp+var_148], 6Dh ; 'm'
.text:0000CEA1
.text:0000CEA1 loc_CEA1:                               ; CODE XREF: _TranslateKey+B9Dj
.text:0000CEA1                 jmp     short $LN160    ; jumptable 0000CD6D default case
.text:0000CEA3 ; ---------------------------------------------------------------------------
.text:0000CEA3
.text:0000CEA3 $LN133_0:                               ; CODE XREF: _TranslateKey+A75j
.text:0000CEA3                                         ; DATA XREF: .text:$LN260o
.text:0000CEA3                 mov     eax, [ebp+arg_8] ; jumptable 0000CD6D case 0
.text:0000CEA6                 shr     eax, 10h
.text:0000CEA9                 and     eax, 0FFFFh
.text:0000CEAE                 movzx   ecx, ax
.text:0000CEB1                 and     ecx, 100h
.text:0000CEB7                 jz      short $LN160    ; jumptable 0000CD6D default case
.text:0000CEB9                 mov     [ebp+var_148], 4Dh ; 'M'
.text:0000CEC3
.text:0000CEC3 $LN160:                                 ; CODE XREF: _TranslateKey+A30j
.text:0000CEC3                                         ; _TranslateKey+A3Dj ...
.text:0000CEC3                 cmp     [ebp+var_148], 0 ; jumptable 0000CD6D default case
.text:0000CECA                 jz      loc_CF78
.text:0000CED0                 mov     edx, dword ptr ds:_term
.text:0000CED6                 cmp     dword ptr [edx+148h], 0
.text:0000CEDD                 jz      short loc_CF43
.text:0000CEDF                 cmp     [ebp+var_148], 50h ; 'P'
.text:0000CEE6                 jl      short loc_CF1A
.text:0000CEE8                 cmp     [ebp+var_148], 53h ; 'S'
.text:0000CEEF                 jg      short loc_CF1A
.text:0000CEF1                 mov     eax, [ebp+var_148]
.text:0000CEF7                 push    eax
.text:0000CEF8                 push    offset $SG90874 ; "\x1B%c"
.text:0000CEFD                 mov     ecx, [ebp+Dest]
.text:0000CF03                 push    ecx             ; Dest
.text:0000CF04                 call    _sprintf
.text:0000CF09                 add     esp, 0Ch
.text:0000CF0C                 add     eax, [ebp+Dest]
.text:0000CF12                 mov     [ebp+Dest], eax
.text:0000CF18                 jmp     short loc_CF41
.text:0000CF1A ; ---------------------------------------------------------------------------
.text:0000CF1A
.text:0000CF1A loc_CF1A:                               ; CODE XREF: _TranslateKey+BEEj
.text:0000CF1A                                         ; _TranslateKey+BF7j
.text:0000CF1A                 mov     edx, [ebp+var_148]
.text:0000CF20                 push    edx
.text:0000CF21                 push    offset $SG90877 ; "\x1B?%c"
.text:0000CF26                 mov     eax, [ebp+Dest]
.text:0000CF2C                 push    eax             ; Dest
.text:0000CF2D                 call    _sprintf
.text:0000CF32                 add     esp, 0Ch
.text:0000CF35                 add     eax, [ebp+Dest]
.text:0000CF3B                 mov     [ebp+Dest], eax
.text:0000CF41
.text:0000CF41 loc_CF41:                               ; CODE XREF: _TranslateKey+C20j
.text:0000CF41                 jmp     short loc_CF6A
.text:0000CF43 ; ---------------------------------------------------------------------------
.text:0000CF43
.text:0000CF43 loc_CF43:                               ; CODE XREF: _TranslateKey+BE5j
.text:0000CF43                 mov     ecx, [ebp+var_148]
.text:0000CF49                 push    ecx
.text:0000CF4A                 push    offset $SG90880 ; "\x1BO%c"
.text:0000CF4F                 mov     edx, [ebp+Dest]
.text:0000CF55                 push    edx             ; Dest
.text:0000CF56                 call    _sprintf
.text:0000CF5B                 add     esp, 0Ch
.text:0000CF5E                 add     eax, [ebp+Dest]
.text:0000CF64                 mov     [ebp+Dest], eax
.text:0000CF6A
.text:0000CF6A loc_CF6A:                               ; CODE XREF: _TranslateKey:loc_CF41j
.text:0000CF6A                 mov     eax, [ebp+Dest]
.text:0000CF70                 sub     eax, [ebp+arg_C]
.text:0000CF73                 jmp     loc_E0F5
.text:0000CF78 ; ---------------------------------------------------------------------------
.text:0000CF78
.text:0000CF78 loc_CF78:                               ; CODE XREF: _TranslateKey+986j
.text:0000CF78                                         ; _TranslateKey+BD2j
.text:0000CF78                 cmp     [ebp+uVirtKey], 8
.text:0000CF7C                 jnz     short loc_CFDA
.text:0000CF7E                 cmp     [ebp+var_11C], 0
.text:0000CF85                 jnz     short loc_CFDA
.text:0000CF87                 push    3Dh ; '='
.text:0000CF89                 mov     eax, dword ptr ds:_conf
.text:0000CF8E                 push    eax
.text:0000CF8F                 call    _conf_get_int
.text:0000CF94                 add     esp, 8
.text:0000CF97                 neg     eax
.text:0000CF99                 sbb     eax, eax
.text:0000CF9B                 and     eax, 77h
.text:0000CF9E                 add     eax, 8
.text:0000CFA1                 mov     ecx, [ebp+Dest]
.text:0000CFA7                 mov     [ecx], al
.text:0000CFA9                 mov     edx, [ebp+Dest]
.text:0000CFAF                 add     edx, 1
.text:0000CFB2                 mov     [ebp+Dest], edx
.text:0000CFB8                 mov     eax, [ebp+Dest]
.text:0000CFBE                 mov     byte ptr [eax], 0
.text:0000CFC1                 mov     ecx, [ebp+Dest]
.text:0000CFC7                 add     ecx, 1
.text:0000CFCA                 mov     [ebp+Dest], ecx
.text:0000CFD0                 mov     eax, 0FFFFFFFEh
.text:0000CFD5                 jmp     loc_E0F5
.text:0000CFDA ; ---------------------------------------------------------------------------
.text:0000CFDA
.text:0000CFDA loc_CFDA:                               ; CODE XREF: _TranslateKey+C84j
.text:0000CFDA                                         ; _TranslateKey+C8Dj
.text:0000CFDA                 cmp     [ebp+uVirtKey], 8
.text:0000CFDE                 jnz     short loc_D03D
.text:0000CFE0                 cmp     [ebp+var_11C], 1
.text:0000CFE7                 jnz     short loc_D03D
.text:0000CFE9                 push    3Dh ; '='
.text:0000CFEB                 mov     edx, dword ptr ds:_conf
.text:0000CFF1                 push    edx
.text:0000CFF2                 call    _conf_get_int
.text:0000CFF7                 add     esp, 8
.text:0000CFFA                 neg     eax
.text:0000CFFC                 sbb     eax, eax
.text:0000CFFE                 and     eax, 0FFFFFF89h
.text:0000D001                 add     eax, 7Fh ; ''
.text:0000D004                 mov     ecx, [ebp+Dest]
.text:0000D00A                 mov     [ecx], al
.text:0000D00C                 mov     edx, [ebp+Dest]
.text:0000D012                 add     edx, 1
.text:0000D015                 mov     [ebp+Dest], edx
.text:0000D01B                 mov     eax, [ebp+Dest]
.text:0000D021                 mov     byte ptr [eax], 0
.text:0000D024                 mov     ecx, [ebp+Dest]
.text:0000D02A                 add     ecx, 1
.text:0000D02D                 mov     [ebp+Dest], ecx
.text:0000D033                 mov     eax, 0FFFFFFFEh
.text:0000D038                 jmp     loc_E0F5
.text:0000D03D ; ---------------------------------------------------------------------------
.text:0000D03D
.text:0000D03D loc_D03D:                               ; CODE XREF: _TranslateKey+CE6j
.text:0000D03D                                         ; _TranslateKey+CEFj
.text:0000D03D                 cmp     [ebp+uVirtKey], 9
.text:0000D041                 jnz     short loc_D0A2
.text:0000D043                 cmp     [ebp+var_11C], 1
.text:0000D04A                 jnz     short loc_D0A2
.text:0000D04C                 mov     edx, [ebp+Dest]
.text:0000D052                 mov     byte ptr [edx], 1Bh
.text:0000D055                 mov     eax, [ebp+Dest]
.text:0000D05B                 add     eax, 1
.text:0000D05E                 mov     [ebp+Dest], eax
.text:0000D064                 mov     ecx, [ebp+Dest]
.text:0000D06A                 mov     byte ptr [ecx], 5Bh ; '['
.text:0000D06D                 mov     edx, [ebp+Dest]
.text:0000D073                 add     edx, 1
.text:0000D076                 mov     [ebp+Dest], edx
.text:0000D07C                 mov     eax, [ebp+Dest]
.text:0000D082                 mov     byte ptr [eax], 5Ah ; 'Z'
.text:0000D085                 mov     ecx, [ebp+Dest]
.text:0000D08B                 add     ecx, 1
.text:0000D08E                 mov     [ebp+Dest], ecx
.text:0000D094                 mov     eax, [ebp+Dest]
.text:0000D09A                 sub     eax, [ebp+arg_C]
.text:0000D09D                 jmp     loc_E0F5
.text:0000D0A2 ; ---------------------------------------------------------------------------
.text:0000D0A2
.text:0000D0A2 loc_D0A2:                               ; CODE XREF: _TranslateKey+D49j
.text:0000D0A2                                         ; _TranslateKey+D52j
.text:0000D0A2                 cmp     [ebp+uVirtKey], 20h ; ' '
.text:0000D0A6                 jnz     short loc_D0D7
.text:0000D0A8                 cmp     [ebp+var_11C], 2
.text:0000D0AF                 jnz     short loc_D0D7
.text:0000D0B1                 mov     edx, [ebp+Dest]
.text:0000D0B7                 mov     byte ptr [edx], 0
.text:0000D0BA                 mov     eax, [ebp+Dest]
.text:0000D0C0                 add     eax, 1
.text:0000D0C3                 mov     [ebp+Dest], eax
.text:0000D0C9                 mov     eax, [ebp+Dest]
.text:0000D0CF                 sub     eax, [ebp+arg_C]
.text:0000D0D2                 jmp     loc_E0F5
.text:0000D0D7 ; ---------------------------------------------------------------------------
.text:0000D0D7
.text:0000D0D7 loc_D0D7:                               ; CODE XREF: _TranslateKey+DAEj
.text:0000D0D7                                         ; _TranslateKey+DB7j
.text:0000D0D7                 cmp     [ebp+uVirtKey], 20h ; ' '
.text:0000D0DB                 jnz     short loc_D10C
.text:0000D0DD                 cmp     [ebp+var_11C], 3
.text:0000D0E4                 jnz     short loc_D10C
.text:0000D0E6                 mov     ecx, [ebp+Dest]
.text:0000D0EC                 mov     byte ptr [ecx], 0A0h ; 'á'
.text:0000D0EF                 mov     edx, [ebp+Dest]
.text:0000D0F5                 add     edx, 1
.text:0000D0F8                 mov     [ebp+Dest], edx
.text:0000D0FE                 mov     eax, [ebp+Dest]
.text:0000D104                 sub     eax, [ebp+arg_C]
.text:0000D107                 jmp     loc_E0F5
.text:0000D10C ; ---------------------------------------------------------------------------
.text:0000D10C
.text:0000D10C loc_D10C:                               ; CODE XREF: _TranslateKey+DE3j
.text:0000D10C                                         ; _TranslateKey+DECj
.text:0000D10C                 cmp     [ebp+uVirtKey], 3
.text:0000D110                 jnz     short loc_D14A
.text:0000D112                 cmp     [ebp+var_11C], 2
.text:0000D119                 jnz     short loc_D14A
.text:0000D11B                 cmp     ds:_back, 0
.text:0000D122                 jz      short loc_D143
.text:0000D124                 mov     esi, esp
.text:0000D126                 push    1
.text:0000D128                 mov     eax, ds:_backhandle
.text:0000D12D                 push    eax
.text:0000D12E                 mov     ecx, ds:_back
.text:0000D134                 mov     edx, [ecx+18h]
.text:0000D137                 call    edx
.text:0000D139                 add     esp, 8
.text:0000D13C                 cmp     esi, esp
.text:0000D13E                 call    __RTC_CheckEsp
.text:0000D143
.text:0000D143 loc_D143:                               ; CODE XREF: _TranslateKey+E2Aj
.text:0000D143                 xor     eax, eax
.text:0000D145                 jmp     loc_E0F5
.text:0000D14A ; ---------------------------------------------------------------------------
.text:0000D14A
.text:0000D14A loc_D14A:                               ; CODE XREF: _TranslateKey+E18j
.text:0000D14A                                         ; _TranslateKey+E21j
.text:0000D14A                 cmp     [ebp+uVirtKey], 13h
.text:0000D14E                 jnz     short loc_D18A
.text:0000D150                 mov     eax, [ebp+Dest]
.text:0000D156                 mov     byte ptr [eax], 1Ah
.text:0000D159                 mov     ecx, [ebp+Dest]
.text:0000D15F                 add     ecx, 1
.text:0000D162                 mov     [ebp+Dest], ecx
.text:0000D168                 mov     edx, [ebp+Dest]
.text:0000D16E                 mov     byte ptr [edx], 0
.text:0000D171                 mov     eax, [ebp+Dest]
.text:0000D177                 add     eax, 1
.text:0000D17A                 mov     [ebp+Dest], eax
.text:0000D180                 mov     eax, 0FFFFFFFEh
.text:0000D185                 jmp     loc_E0F5
.text:0000D18A ; ---------------------------------------------------------------------------
.text:0000D18A
.text:0000D18A loc_D18A:                               ; CODE XREF: _TranslateKey+E56j
.text:0000D18A                 cmp     [ebp+var_11C], 2
.text:0000D191                 jnz     short loc_D1CD
.text:0000D193                 cmp     [ebp+uVirtKey], 32h ; '2'
.text:0000D197                 jb      short loc_D1CD
.text:0000D199                 cmp     [ebp+uVirtKey], 38h ; '8'
.text:0000D19D                 ja      short loc_D1CD
.text:0000D19F                 mov     ecx, [ebp+Dest]
.text:0000D1A5                 mov     edx, [ebp+uVirtKey]
.text:0000D1A8                 mov     al, byte_1E4A[edx]
.text:0000D1AE                 mov     [ecx], al
.text:0000D1B0                 mov     ecx, [ebp+Dest]
.text:0000D1B6                 add     ecx, 1
.text:0000D1B9                 mov     [ebp+Dest], ecx
.text:0000D1BF                 mov     eax, [ebp+Dest]
.text:0000D1C5                 sub     eax, [ebp+arg_C]
.text:0000D1C8                 jmp     loc_E0F5
.text:0000D1CD ; ---------------------------------------------------------------------------
.text:0000D1CD
.text:0000D1CD loc_D1CD:                               ; CODE XREF: _TranslateKey+E99j
.text:0000D1CD                                         ; _TranslateKey+E9Fj ...
.text:0000D1CD                 cmp     [ebp+var_11C], 2
.text:0000D1D4                 jnz     short loc_D20E
.text:0000D1D6                 cmp     [ebp+uVirtKey], 0BDh ; '+'
.text:0000D1DD                 jz      short loc_D1E8
.text:0000D1DF                 cmp     [ebp+uVirtKey], 0BFh ; '+'
.text:0000D1E6                 jnz     short loc_D20E
.text:0000D1E8
.text:0000D1E8 loc_D1E8:                               ; CODE XREF: _TranslateKey+EE5j
.text:0000D1E8                 mov     edx, [ebp+Dest]
.text:0000D1EE                 mov     byte ptr [edx], 1Fh
.text:0000D1F1                 mov     eax, [ebp+Dest]
.text:0000D1F7                 add     eax, 1
.text:0000D1FA                 mov     [ebp+Dest], eax
.text:0000D200                 mov     eax, [ebp+Dest]
.text:0000D206                 sub     eax, [ebp+arg_C]
.text:0000D209                 jmp     loc_E0F5
.text:0000D20E ; ---------------------------------------------------------------------------
.text:0000D20E
.text:0000D20E loc_D20E:                               ; CODE XREF: _TranslateKey+EDCj
.text:0000D20E                                         ; _TranslateKey+EEEj
.text:0000D20E                 cmp     [ebp+var_11C], 2
.text:0000D215                 jnz     short loc_D24F
.text:0000D217                 cmp     [ebp+uVirtKey], 0DFh ; '¯'
.text:0000D21E                 jz      short loc_D229
.text:0000D220                 cmp     [ebp+uVirtKey], 0DCh ; '_'
.text:0000D227                 jnz     short loc_D24F
.text:0000D229
.text:0000D229 loc_D229:                               ; CODE XREF: _TranslateKey+F26j
.text:0000D229                 mov     ecx, [ebp+Dest]
.text:0000D22F                 mov     byte ptr [ecx], 1Ch
.text:0000D232                 mov     edx, [ebp+Dest]
.text:0000D238                 add     edx, 1
.text:0000D23B                 mov     [ebp+Dest], edx
.text:0000D241                 mov     eax, [ebp+Dest]
.text:0000D247                 sub     eax, [ebp+arg_C]
.text:0000D24A                 jmp     loc_E0F5
.text:0000D24F ; ---------------------------------------------------------------------------
.text:0000D24F
.text:0000D24F loc_D24F:                               ; CODE XREF: _TranslateKey+F1Dj
.text:0000D24F                                         ; _TranslateKey+F2Fj
.text:0000D24F                 cmp     [ebp+var_11C], 3
.text:0000D256                 jnz     short loc_D287
.text:0000D258                 cmp     [ebp+uVirtKey], 0DEh ; '¦'
.text:0000D25F                 jnz     short loc_D287
.text:0000D261                 mov     eax, [ebp+Dest]
.text:0000D267                 mov     byte ptr [eax], 1Eh
.text:0000D26A                 mov     ecx, [ebp+Dest]
.text:0000D270                 add     ecx, 1
.text:0000D273                 mov     [ebp+Dest], ecx
.text:0000D279                 mov     eax, [ebp+Dest]
.text:0000D27F                 sub     eax, [ebp+arg_C]
.text:0000D282                 jmp     loc_E0F5
.text:0000D287 ; ---------------------------------------------------------------------------
.text:0000D287
.text:0000D287 loc_D287:                               ; CODE XREF: _TranslateKey+F5Ej
.text:0000D287                                         ; _TranslateKey+F67j
.text:0000D287                 cmp     [ebp+var_11C], 0
.text:0000D28E                 jnz     short loc_D2E3
.text:0000D290                 cmp     [ebp+uVirtKey], 0Dh
.text:0000D294                 jnz     short loc_D2E3
.text:0000D296                 mov     edx, dword ptr ds:_term
.text:0000D29C                 cmp     dword ptr [edx+150h], 0
.text:0000D2A3                 jz      short loc_D2E3
.text:0000D2A5                 mov     eax, [ebp+Dest]
.text:0000D2AB                 mov     byte ptr [eax], 0Dh
.text:0000D2AE                 mov     ecx, [ebp+Dest]
.text:0000D2B4                 add     ecx, 1
.text:0000D2B7                 mov     [ebp+Dest], ecx
.text:0000D2BD                 mov     edx, [ebp+Dest]
.text:0000D2C3                 mov     byte ptr [edx], 0Ah
.text:0000D2C6                 mov     eax, [ebp+Dest]
.text:0000D2CC                 add     eax, 1
.text:0000D2CF                 mov     [ebp+Dest], eax
.text:0000D2D5                 mov     eax, [ebp+Dest]
.text:0000D2DB                 sub     eax, [ebp+arg_C]
.text:0000D2DE                 jmp     loc_E0F5
.text:0000D2E3 ; ---------------------------------------------------------------------------
.text:0000D2E3
.text:0000D2E3 loc_D2E3:                               ; CODE XREF: _TranslateKey+F96j
.text:0000D2E3                                         ; _TranslateKey+F9Cj ...
.text:0000D2E3                 mov     [ebp+var_128], 0
.text:0000D2ED                 mov     ecx, [ebp+uVirtKey]
.text:0000D2F0                 mov     [ebp+var_1FC], ecx
.text:0000D2F6                 mov     edx, [ebp+var_1FC]
.text:0000D2FC                 sub     edx, 70h ; 'p'
.text:0000D2FF                 mov     [ebp+var_1FC], edx
.text:0000D305                 cmp     [ebp+var_1FC], 13h ; switch 20 cases
.text:0000D30C                 ja      loc_D4E3        ; jumptable 0000D318 default case
.text:0000D312                 mov     eax, [ebp+var_1FC]
.text:0000D318                 jmp     ds:$LN261[eax*4] ; switch jump
.text:0000D31F ; ---------------------------------------------------------------------------
.text:0000D31F
.text:0000D31F $LN109:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D31F                                         ; DATA XREF: .text:$LN261o
.text:0000D31F                 movzx   ecx, [ebp+var_F8] ; jumptable 0000D318 case 0
.text:0000D326                 and     ecx, 80h
.text:0000D32C                 neg     ecx
.text:0000D32E                 sbb     ecx, ecx
.text:0000D330                 and     ecx, 0Ch
.text:0000D333                 add     ecx, 0Bh
.text:0000D336                 mov     [ebp+var_128], ecx
.text:0000D33C                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D341 ; ---------------------------------------------------------------------------
.text:0000D341
.text:0000D341 $LN108:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D341                                         ; DATA XREF: .text:$LN261o
.text:0000D341                 movzx   edx, [ebp+var_F8] ; jumptable 0000D318 case 1
.text:0000D348                 and     edx, 80h
.text:0000D34E                 neg     edx
.text:0000D350                 sbb     edx, edx
.text:0000D352                 and     edx, 0Ch
.text:0000D355                 add     edx, 0Ch
.text:0000D358                 mov     [ebp+var_128], edx
.text:0000D35E                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D363 ; ---------------------------------------------------------------------------
.text:0000D363
.text:0000D363 $LN107:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D363                                         ; DATA XREF: .text:$LN261o
.text:0000D363                 movzx   eax, [ebp+var_F8] ; jumptable 0000D318 case 2
.text:0000D36A                 and     eax, 80h
.text:0000D36F                 neg     eax
.text:0000D371                 sbb     eax, eax
.text:0000D373                 and     eax, 0Ch
.text:0000D376                 add     eax, 0Dh
.text:0000D379                 mov     [ebp+var_128], eax
.text:0000D37F                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D384 ; ---------------------------------------------------------------------------
.text:0000D384
.text:0000D384 $LN106:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D384                                         ; DATA XREF: .text:$LN261o
.text:0000D384                 movzx   ecx, [ebp+var_F8] ; jumptable 0000D318 case 3
.text:0000D38B                 and     ecx, 80h
.text:0000D391                 neg     ecx
.text:0000D393                 sbb     ecx, ecx
.text:0000D395                 and     ecx, 0Ch
.text:0000D398                 add     ecx, 0Eh
.text:0000D39B                 mov     [ebp+var_128], ecx
.text:0000D3A1                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D3A6 ; ---------------------------------------------------------------------------
.text:0000D3A6
.text:0000D3A6 $LN105:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D3A6                                         ; DATA XREF: .text:$LN261o
.text:0000D3A6                 movzx   edx, [ebp+var_F8] ; jumptable 0000D318 case 4
.text:0000D3AD                 and     edx, 80h
.text:0000D3B3                 neg     edx
.text:0000D3B5                 sbb     edx, edx
.text:0000D3B7                 and     edx, 0Dh
.text:0000D3BA                 add     edx, 0Fh
.text:0000D3BD                 mov     [ebp+var_128], edx
.text:0000D3C3                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D3C8 ; ---------------------------------------------------------------------------
.text:0000D3C8
.text:0000D3C8 $LN104_0:                               ; CODE XREF: _TranslateKey+1020j
.text:0000D3C8                                         ; DATA XREF: .text:$LN261o
.text:0000D3C8                 movzx   eax, [ebp+var_F8] ; jumptable 0000D318 case 5
.text:0000D3CF                 and     eax, 80h
.text:0000D3D4                 neg     eax
.text:0000D3D6                 sbb     eax, eax
.text:0000D3D8                 and     eax, 0Ch
.text:0000D3DB                 add     eax, 11h
.text:0000D3DE                 mov     [ebp+var_128], eax
.text:0000D3E4                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D3E9 ; ---------------------------------------------------------------------------
.text:0000D3E9
.text:0000D3E9 $LN103_0:                               ; CODE XREF: _TranslateKey+1020j
.text:0000D3E9                                         ; DATA XREF: .text:$LN261o
.text:0000D3E9                 movzx   ecx, [ebp+var_F8] ; jumptable 0000D318 case 6
.text:0000D3F0                 and     ecx, 80h
.text:0000D3F6                 neg     ecx
.text:0000D3F8                 sbb     ecx, ecx
.text:0000D3FA                 and     ecx, 0Dh
.text:0000D3FD                 add     ecx, 12h
.text:0000D400                 mov     [ebp+var_128], ecx
.text:0000D406                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D40B ; ---------------------------------------------------------------------------
.text:0000D40B
.text:0000D40B $LN102_0:                               ; CODE XREF: _TranslateKey+1020j
.text:0000D40B                                         ; DATA XREF: .text:$LN261o
.text:0000D40B                 movzx   edx, [ebp+var_F8] ; jumptable 0000D318 case 7
.text:0000D412                 and     edx, 80h
.text:0000D418                 neg     edx
.text:0000D41A                 sbb     edx, edx
.text:0000D41C                 and     edx, 0Dh
.text:0000D41F                 add     edx, 13h
.text:0000D422                 mov     [ebp+var_128], edx
.text:0000D428                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D42D ; ---------------------------------------------------------------------------
.text:0000D42D
.text:0000D42D $LN101:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D42D                                         ; DATA XREF: .text:$LN261o
.text:0000D42D                 movzx   eax, [ebp+var_F8] ; jumptable 0000D318 case 8
.text:0000D434                 and     eax, 80h
.text:0000D439                 neg     eax
.text:0000D43B                 sbb     eax, eax
.text:0000D43D                 and     eax, 0Dh
.text:0000D440                 add     eax, 14h
.text:0000D443                 mov     [ebp+var_128], eax
.text:0000D449                 jmp     loc_D4E3        ; jumptable 0000D318 default case
.text:0000D44E ; ---------------------------------------------------------------------------
.text:0000D44E
.text:0000D44E $LN100:                                 ; CODE XREF: _TranslateKey+1020j
.text:0000D44E                                         ; DATA XREF: .text:$LN261o
.text:0000D44E                 movzx   ecx, [ebp+var_F8] ; jumptable 0000D318 case 9
.text:0000D455                 and     ecx, 80h
.text:0000D45B                 neg     ecx
.text:0000D45D                 sbb     ecx, ecx
.text:0000D45F                 and     ecx, 0Dh
.text:0000D462                 add     ecx, 15h
.text:0000D465                 mov     [ebp+var_128], ecx
.text:0000D46B                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D46D ; ---------------------------------------------------------------------------
.text:0000D46D
.text:0000D46D $LN99:                                  ; CODE XREF: _TranslateKey+1020j
.text:0000D46D                                         ; DATA XREF: .text:$LN261o
.text:0000D46D                 mov     [ebp+var_128], 17h ; jumptable 0000D318 case 10
.text:0000D477                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D479 ; ---------------------------------------------------------------------------
.text:0000D479
.text:0000D479 $LN98_0:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D479                                         ; DATA XREF: .text:$LN261o
.text:0000D479                 mov     [ebp+var_128], 18h ; jumptable 0000D318 case 11
.text:0000D483                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D485 ; ---------------------------------------------------------------------------
.text:0000D485
.text:0000D485 $LN97_0:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D485                                         ; DATA XREF: .text:$LN261o
.text:0000D485                 mov     [ebp+var_128], 19h ; jumptable 0000D318 case 12
.text:0000D48F                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D491 ; ---------------------------------------------------------------------------
.text:0000D491
.text:0000D491 $LN96_0:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D491                                         ; DATA XREF: .text:$LN261o
.text:0000D491                 mov     [ebp+var_128], 1Ah ; jumptable 0000D318 case 13
.text:0000D49B                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D49D ; ---------------------------------------------------------------------------
.text:0000D49D
.text:0000D49D $LN95_0:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D49D                                         ; DATA XREF: .text:$LN261o
.text:0000D49D                 mov     [ebp+var_128], 1Ch ; jumptable 0000D318 case 14
.text:0000D4A7                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D4A9 ; ---------------------------------------------------------------------------
.text:0000D4A9
.text:0000D4A9 $LN94_1:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D4A9                                         ; DATA XREF: .text:$LN261o
.text:0000D4A9                 mov     [ebp+var_128], 1Dh ; jumptable 0000D318 case 15
.text:0000D4B3                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D4B5 ; ---------------------------------------------------------------------------
.text:0000D4B5
.text:0000D4B5 $LN93_1:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D4B5                                         ; DATA XREF: .text:$LN261o
.text:0000D4B5                 mov     [ebp+var_128], 1Fh ; jumptable 0000D318 case 16
.text:0000D4BF                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D4C1 ; ---------------------------------------------------------------------------
.text:0000D4C1
.text:0000D4C1 $LN92_1:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D4C1                                         ; DATA XREF: .text:$LN261o
.text:0000D4C1                 mov     [ebp+var_128], 20h ; ' ' ; jumptable 0000D318 case 17
.text:0000D4CB                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D4CD ; ---------------------------------------------------------------------------
.text:0000D4CD
.text:0000D4CD $LN91_1:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D4CD                                         ; DATA XREF: .text:$LN261o
.text:0000D4CD                 mov     [ebp+var_128], 21h ; '!' ; jumptable 0000D318 case 18
.text:0000D4D7                 jmp     short loc_D4E3  ; jumptable 0000D318 default case
.text:0000D4D9 ; ---------------------------------------------------------------------------
.text:0000D4D9
.text:0000D4D9 $LN90_0:                                ; CODE XREF: _TranslateKey+1020j
.text:0000D4D9                                         ; DATA XREF: .text:$LN261o
.text:0000D4D9                 mov     [ebp+var_128], 22h ; '"' ; jumptable 0000D318 case 19
.text:0000D4E3
.text:0000D4E3 loc_D4E3:                               ; CODE XREF: _TranslateKey+1014j
.text:0000D4E3                                         ; _TranslateKey+1044j ...
.text:0000D4E3                 mov     edx, [ebp+var_11C] ; jumptable 0000D318 default case
.text:0000D4E9                 and     edx, 2
.text:0000D4EC                 jnz     short $LN89_0   ; jumptable 0000D51C default case
.text:0000D4EE                 mov     eax, [ebp+uVirtKey]
.text:0000D4F1                 mov     [ebp+var_200], eax
.text:0000D4F7                 mov     ecx, [ebp+var_200]
.text:0000D4FD                 sub     ecx, 21h ; '!'
.text:0000D500                 mov     [ebp+var_200], ecx
.text:0000D506                 cmp     [ebp+var_200], 0Dh ; switch 14 cases
.text:0000D50D                 ja      short $LN89_0   ; jumptable 0000D51C default case
.text:0000D50F                 mov     edx, [ebp+var_200]
.text:0000D515                 movzx   eax, ds:$LN245[edx]
.text:0000D51C                 jmp     ds:$LN262[eax*4] ; switch jump
.text:0000D523 ; ---------------------------------------------------------------------------
.text:0000D523
.text:0000D523 $LN86_0:                                ; CODE XREF: _TranslateKey+1224j
.text:0000D523                                         ; DATA XREF: .text:$LN262o
.text:0000D523                 mov     [ebp+var_128], 1 ; jumptable 0000D51C case 3
.text:0000D52D                 jmp     short $LN89_0   ; jumptable 0000D51C default case
.text:0000D52F ; ---------------------------------------------------------------------------
.text:0000D52F
.text:0000D52F $LN85:                                  ; CODE XREF: _TranslateKey+1224j
.text:0000D52F                                         ; DATA XREF: .text:$LN262o
.text:0000D52F                 mov     [ebp+var_128], 2 ; jumptable 0000D51C case 12
.text:0000D539                 jmp     short $LN89_0   ; jumptable 0000D51C default case
.text:0000D53B ; ---------------------------------------------------------------------------
.text:0000D53B
.text:0000D53B $LN84:                                  ; CODE XREF: _TranslateKey+1224j
.text:0000D53B                                         ; DATA XREF: .text:$LN262o
.text:0000D53B                 mov     [ebp+var_128], 3 ; jumptable 0000D51C case 13
.text:0000D545                 jmp     short $LN89_0   ; jumptable 0000D51C default case
.text:0000D547 ; ---------------------------------------------------------------------------
.text:0000D547
.text:0000D547 $LN83:                                  ; CODE XREF: _TranslateKey+1224j
.text:0000D547                                         ; DATA XREF: .text:$LN262o
.text:0000D547                 mov     [ebp+var_128], 4 ; jumptable 0000D51C case 2
.text:0000D551                 jmp     short $LN89_0   ; jumptable 0000D51C default case
.text:0000D553 ; ---------------------------------------------------------------------------
.text:0000D553
.text:0000D553 $LN82:                                  ; CODE XREF: _TranslateKey+1224j
.text:0000D553                                         ; DATA XREF: .text:$LN262o
.text:0000D553                 mov     [ebp+var_128], 5 ; jumptable 0000D51C case 0
.text:0000D55D                 jmp     short $LN89_0   ; jumptable 0000D51C default case
.text:0000D55F ; ---------------------------------------------------------------------------
.text:0000D55F
.text:0000D55F $LN81:                                  ; CODE XREF: _TranslateKey+1224j
.text:0000D55F                                         ; DATA XREF: .text:$LN262o
.text:0000D55F                 mov     [ebp+var_128], 6 ; jumptable 0000D51C case 1
.text:0000D569
.text:0000D569 $LN89_0:                                ; CODE XREF: _TranslateKey+11F4j
.text:0000D569                                         ; _TranslateKey+1215j ...
.text:0000D569                 cmp     [ebp+var_130], 3 ; jumptable 0000D51C default case
.text:0000D570                 jnz     short loc_D58E
.text:0000D572                 cmp     [ebp+var_128], 6
.text:0000D579                 jg      short loc_D58E
.text:0000D57B                 mov     ecx, [ebp+var_128]
.text:0000D581                 movsx   edx, $SG90933[ecx]
.text:0000D588                 mov     [ebp+var_128], edx
.text:0000D58E
.text:0000D58E loc_D58E:                               ; CODE XREF: _TranslateKey+1278j
.text:0000D58E                                         ; _TranslateKey+1281j
.text:0000D58E                 mov     eax, dword ptr ds:_term
.text:0000D593                 cmp     dword ptr [eax+148h], 0
.text:0000D59A                 jz      short loc_D5EA
.text:0000D59C                 cmp     [ebp+var_128], 0
.text:0000D5A3                 jle     short loc_D5EA
.text:0000D5A5                 cmp     [ebp+var_128], 6
.text:0000D5AC                 jg      short loc_D5EA
.text:0000D5AE                 mov     ecx, [ebp+var_128]
.text:0000D5B4                 movsx   edx, $SG90936[ecx]
.text:0000D5BB                 push    edx
.text:0000D5BC                 push    offset $SG90937 ; "\x1B%c"
.text:0000D5C1                 mov     eax, [ebp+Dest]
.text:0000D5C7                 push    eax             ; Dest
.text:0000D5C8                 call    _sprintf
.text:0000D5CD                 add     esp, 0Ch
.text:0000D5D0                 add     eax, [ebp+Dest]
.text:0000D5D6                 mov     [ebp+Dest], eax
.text:0000D5DC                 mov     eax, [ebp+Dest]
.text:0000D5E2                 sub     eax, [ebp+arg_C]
.text:0000D5E5                 jmp     loc_E0F5
.text:0000D5EA ; ---------------------------------------------------------------------------
.text:0000D5EA
.text:0000D5EA loc_D5EA:                               ; CODE XREF: _TranslateKey+12A2j
.text:0000D5EA                                         ; _TranslateKey+12ABj ...
.text:0000D5EA                 cmp     [ebp+var_130], 5
.text:0000D5F1                 jnz     loc_D769
.text:0000D5F7                 cmp     [ebp+var_128], 0Bh
.text:0000D5FE                 jl      loc_D769
.text:0000D604                 cmp     [ebp+var_128], 22h ; '"'
.text:0000D60B                 jg      loc_D769
.text:0000D611                 mov     ecx, 0Ch
.text:0000D616                 mov     esi, offset $SG90940 ; "MNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy"...
.text:0000D61B                 lea     edi, [ebp+var_180]
.text:0000D621                 rep movsd
.text:0000D623                 movsb
.text:0000D624                 mov     [ebp+var_188], 0
.text:0000D62E                 mov     ecx, [ebp+uVirtKey]
.text:0000D631                 mov     [ebp+var_204], ecx
.text:0000D637                 mov     edx, [ebp+var_204]
.text:0000D63D                 sub     edx, 70h ; 'p'
.text:0000D640                 mov     [ebp+var_204], edx
.text:0000D646                 cmp     [ebp+var_204], 0Bh ; switch 12 cases
.text:0000D64D                 ja      loc_D6F1        ; jumptable 0000D659 default case
.text:0000D653                 mov     eax, [ebp+var_204]
.text:0000D659                 jmp     ds:$LN263[eax*4] ; switch jump
.text:0000D660 ; ---------------------------------------------------------------------------
.text:0000D660
.text:0000D660 $LN75:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D660                                         ; DATA XREF: .text:$LN263o
.text:0000D660                 mov     [ebp+var_188], 0 ; jumptable 0000D659 case 0
.text:0000D66A                 jmp     loc_D6F1        ; jumptable 0000D659 default case
.text:0000D66F ; ---------------------------------------------------------------------------
.text:0000D66F
.text:0000D66F $LN74:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D66F                                         ; DATA XREF: .text:$LN263o
.text:0000D66F                 mov     [ebp+var_188], 1 ; jumptable 0000D659 case 1
.text:0000D679                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D67B ; ---------------------------------------------------------------------------
.text:0000D67B
.text:0000D67B $LN73:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D67B                                         ; DATA XREF: .text:$LN263o
.text:0000D67B                 mov     [ebp+var_188], 2 ; jumptable 0000D659 case 2
.text:0000D685                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D687 ; ---------------------------------------------------------------------------
.text:0000D687
.text:0000D687 $LN72:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D687                                         ; DATA XREF: .text:$LN263o
.text:0000D687                 mov     [ebp+var_188], 3 ; jumptable 0000D659 case 3
.text:0000D691                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D693 ; ---------------------------------------------------------------------------
.text:0000D693
.text:0000D693 $LN71:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D693                                         ; DATA XREF: .text:$LN263o
.text:0000D693                 mov     [ebp+var_188], 4 ; jumptable 0000D659 case 4
.text:0000D69D                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D69F ; ---------------------------------------------------------------------------
.text:0000D69F
.text:0000D69F $LN70:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D69F                                         ; DATA XREF: .text:$LN263o
.text:0000D69F                 mov     [ebp+var_188], 5 ; jumptable 0000D659 case 5
.text:0000D6A9                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D6AB ; ---------------------------------------------------------------------------
.text:0000D6AB
.text:0000D6AB $LN69:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D6AB                                         ; DATA XREF: .text:$LN263o
.text:0000D6AB                 mov     [ebp+var_188], 6 ; jumptable 0000D659 case 6
.text:0000D6B5                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D6B7 ; ---------------------------------------------------------------------------
.text:0000D6B7
.text:0000D6B7 $LN68_0:                                ; CODE XREF: _TranslateKey+1361j
.text:0000D6B7                                         ; DATA XREF: .text:$LN263o
.text:0000D6B7                 mov     [ebp+var_188], 7 ; jumptable 0000D659 case 7
.text:0000D6C1                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D6C3 ; ---------------------------------------------------------------------------
.text:0000D6C3
.text:0000D6C3 $LN67:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D6C3                                         ; DATA XREF: .text:$LN263o
.text:0000D6C3                 mov     [ebp+var_188], 8 ; jumptable 0000D659 case 8
.text:0000D6CD                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D6CF ; ---------------------------------------------------------------------------
.text:0000D6CF
.text:0000D6CF $LN66:                                  ; CODE XREF: _TranslateKey+1361j
.text:0000D6CF                                         ; DATA XREF: .text:$LN263o
.text:0000D6CF                 mov     [ebp+var_188], 9 ; jumptable 0000D659 case 9
.text:0000D6D9                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D6DB ; ---------------------------------------------------------------------------
.text:0000D6DB
.text:0000D6DB $LN65_0:                                ; CODE XREF: _TranslateKey+1361j
.text:0000D6DB                                         ; DATA XREF: .text:$LN263o
.text:0000D6DB                 mov     [ebp+var_188], 0Ah ; jumptable 0000D659 case 10
.text:0000D6E5                 jmp     short loc_D6F1  ; jumptable 0000D659 default case
.text:0000D6E7 ; ---------------------------------------------------------------------------
.text:0000D6E7
.text:0000D6E7 $LN64_0:                                ; CODE XREF: _TranslateKey+1361j
.text:0000D6E7                                         ; DATA XREF: .text:$LN263o
.text:0000D6E7                 mov     [ebp+var_188], 0Bh ; jumptable 0000D659 case 11
.text:0000D6F1
.text:0000D6F1 loc_D6F1:                               ; CODE XREF: _TranslateKey+1355j
.text:0000D6F1                                         ; _TranslateKey+1372j ...
.text:0000D6F1                 movzx   ecx, [ebp+var_F8] ; jumptable 0000D659 default case
.text:0000D6F8                 and     ecx, 80h
.text:0000D6FE                 jz      short loc_D70F
.text:0000D700                 mov     edx, [ebp+var_188]
.text:0000D706                 add     edx, 0Ch
.text:0000D709                 mov     [ebp+var_188], edx
.text:0000D70F
.text:0000D70F loc_D70F:                               ; CODE XREF: _TranslateKey+1406j
.text:0000D70F                 movzx   eax, [ebp+var_F7]
.text:0000D716                 and     eax, 80h
.text:0000D71B                 jz      short loc_D72C
.text:0000D71D                 mov     ecx, [ebp+var_188]
.text:0000D723                 add     ecx, 18h
.text:0000D726                 mov     [ebp+var_188], ecx
.text:0000D72C
.text:0000D72C loc_D72C:                               ; CODE XREF: _TranslateKey+1423j
.text:0000D72C                 mov     edx, [ebp+var_188]
.text:0000D732                 movsx   eax, [ebp+edx+var_180]
.text:0000D73A                 push    eax
.text:0000D73B                 push    offset $SG90961 ; "\x1B[%c"
.text:0000D740                 mov     ecx, [ebp+Dest]
.text:0000D746                 push    ecx             ; Dest
.text:0000D747                 call    _sprintf
.text:0000D74C                 add     esp, 0Ch
.text:0000D74F                 add     eax, [ebp+Dest]
.text:0000D755                 mov     [ebp+Dest], eax
.text:0000D75B                 mov     eax, [ebp+Dest]
.text:0000D761                 sub     eax, [ebp+arg_C]
.text:0000D764                 jmp     loc_E0F5
.text:0000D769 ; ---------------------------------------------------------------------------
.text:0000D769
.text:0000D769 loc_D769:                               ; CODE XREF: _TranslateKey+12F9j
.text:0000D769                                         ; _TranslateKey+1306j ...
.text:0000D769                 cmp     [ebp+var_130], 5
.text:0000D770                 jnz     loc_D815
.text:0000D776                 cmp     [ebp+var_128], 1
.text:0000D77D                 jl      loc_D815
.text:0000D783                 cmp     [ebp+var_128], 6
.text:0000D78A                 jg      loc_D815
.text:0000D790                 mov     edx, $SG90964
.text:0000D796                 mov     [ebp+var_194], edx
.text:0000D79C                 mov     ax, word_1ED8
.text:0000D7A2                 mov     [ebp+var_190], ax
.text:0000D7A9                 mov     cl, byte_1EDA
.text:0000D7AF                 mov     [ebp+var_18E], cl
.text:0000D7B5                 cmp     [ebp+var_128], 3
.text:0000D7BC                 jnz     short loc_D7D8
.text:0000D7BE                 mov     edx, [ebp+Dest]
.text:0000D7C4                 mov     byte ptr [edx], 7Fh ; ''
.text:0000D7C7                 mov     eax, [ebp+Dest]
.text:0000D7CD                 add     eax, 1
.text:0000D7D0                 mov     [ebp+Dest], eax
.text:0000D7D6                 jmp     short loc_D807
.text:0000D7D8 ; ---------------------------------------------------------------------------
.text:0000D7D8
.text:0000D7D8 loc_D7D8:                               ; CODE XREF: _TranslateKey+14C4j
.text:0000D7D8                 mov     ecx, [ebp+var_128]
.text:0000D7DE                 movsx   edx, [ebp+ecx+var_195]
.text:0000D7E6                 push    edx
.text:0000D7E7                 push    offset $SG90968 ; "\x1B[%c"
.text:0000D7EC                 mov     eax, [ebp+Dest]
.text:0000D7F2                 push    eax             ; Dest
.text:0000D7F3                 call    _sprintf
.text:0000D7F8                 add     esp, 0Ch
.text:0000D7FB                 add     eax, [ebp+Dest]
.text:0000D801                 mov     [ebp+Dest], eax
.text:0000D807
.text:0000D807 loc_D807:                               ; CODE XREF: _TranslateKey+14DEj
.text:0000D807                 mov     eax, [ebp+Dest]
.text:0000D80D                 sub     eax, [ebp+arg_C]
.text:0000D810                 jmp     loc_E0F5
.text:0000D815 ; ---------------------------------------------------------------------------
.text:0000D815
.text:0000D815 loc_D815:                               ; CODE XREF: _TranslateKey+1478j
.text:0000D815                                         ; _TranslateKey+1485j ...
.text:0000D815                 mov     ecx, dword ptr ds:_term
.text:0000D81B                 cmp     dword ptr [ecx+148h], 0
.text:0000D822                 jnz     short loc_D831
.text:0000D824                 cmp     [ebp+var_130], 4
.text:0000D82B                 jnz     loc_D904
.text:0000D831
.text:0000D831 loc_D831:                               ; CODE XREF: _TranslateKey+152Aj
.text:0000D831                 cmp     [ebp+var_128], 0Bh
.text:0000D838                 jl      loc_D904
.text:0000D83E                 cmp     [ebp+var_128], 18h
.text:0000D845                 jg      loc_D904
.text:0000D84B                 mov     [ebp+var_19C], 0
.text:0000D855                 cmp     [ebp+var_128], 0Fh
.text:0000D85C                 jle     short loc_D86D
.text:0000D85E                 mov     edx, [ebp+var_19C]
.text:0000D864                 add     edx, 1
.text:0000D867                 mov     [ebp+var_19C], edx
.text:0000D86D
.text:0000D86D loc_D86D:                               ; CODE XREF: _TranslateKey+1564j
.text:0000D86D                 cmp     [ebp+var_128], 15h
.text:0000D874                 jle     short loc_D885
.text:0000D876                 mov     eax, [ebp+var_19C]
.text:0000D87C                 add     eax, 1
.text:0000D87F                 mov     [ebp+var_19C], eax
.text:0000D885
.text:0000D885 loc_D885:                               ; CODE XREF: _TranslateKey+157Cj
.text:0000D885                 mov     ecx, dword ptr ds:_term
.text:0000D88B                 cmp     dword ptr [ecx+148h], 0
.text:0000D892                 jz      short loc_D8C6
.text:0000D894                 mov     edx, [ebp+var_128]
.text:0000D89A                 add     edx, 45h ; 'E'
.text:0000D89D                 sub     edx, [ebp+var_19C]
.text:0000D8A3                 push    edx
.text:0000D8A4                 push    offset $SG90976 ; "\x1B%c"
.text:0000D8A9                 mov     eax, [ebp+Dest]
.text:0000D8AF                 push    eax             ; Dest
.text:0000D8B0                 call    _sprintf
.text:0000D8B5                 add     esp, 0Ch
.text:0000D8B8                 add     eax, [ebp+Dest]
.text:0000D8BE                 mov     [ebp+Dest], eax
.text:0000D8C4                 jmp     short loc_D8F6
.text:0000D8C6 ; ---------------------------------------------------------------------------
.text:0000D8C6
.text:0000D8C6 loc_D8C6:                               ; CODE XREF: _TranslateKey+159Aj
.text:0000D8C6                 mov     ecx, [ebp+var_128]
.text:0000D8CC                 add     ecx, 45h ; 'E'
.text:0000D8CF                 sub     ecx, [ebp+var_19C]
.text:0000D8D5                 push    ecx
.text:0000D8D6                 push    offset $SG90979 ; "\x1BO%c"
.text:0000D8DB                 mov     edx, [ebp+Dest]
.text:0000D8E1                 push    edx             ; Dest
.text:0000D8E2                 call    _sprintf
.text:0000D8E7                 add     esp, 0Ch
.text:0000D8EA                 add     eax, [ebp+Dest]
.text:0000D8F0                 mov     [ebp+Dest], eax
.text:0000D8F6
.text:0000D8F6 loc_D8F6:                               ; CODE XREF: _TranslateKey+15CCj
.text:0000D8F6                 mov     eax, [ebp+Dest]
.text:0000D8FC                 sub     eax, [ebp+arg_C]
.text:0000D8FF                 jmp     loc_E0F5
.text:0000D904 ; ---------------------------------------------------------------------------
.text:0000D904
.text:0000D904 loc_D904:                               ; CODE XREF: _TranslateKey+1533j
.text:0000D904                                         ; _TranslateKey+1540j ...
.text:0000D904                 cmp     [ebp+var_130], 1
.text:0000D90B                 jnz     short loc_D957
.text:0000D90D                 cmp     [ebp+var_128], 0Bh
.text:0000D914                 jl      short loc_D957
.text:0000D916                 cmp     [ebp+var_128], 0Fh
.text:0000D91D                 jg      short loc_D957
.text:0000D91F                 mov     eax, [ebp+var_128]
.text:0000D925                 add     eax, 36h ; '6'
.text:0000D928                 push    eax
.text:0000D929                 push    offset $SG90982 ; "\x1B[[%c"
.text:0000D92E                 mov     ecx, [ebp+Dest]
.text:0000D934                 push    ecx             ; Dest
.text:0000D935                 call    _sprintf
.text:0000D93A                 add     esp, 0Ch
.text:0000D93D                 add     eax, [ebp+Dest]
.text:0000D943                 mov     [ebp+Dest], eax
.text:0000D949                 mov     eax, [ebp+Dest]
.text:0000D94F                 sub     eax, [ebp+arg_C]
.text:0000D952                 jmp     loc_E0F5
.text:0000D957 ; ---------------------------------------------------------------------------
.text:0000D957
.text:0000D957 loc_D957:                               ; CODE XREF: _TranslateKey+1613j
.text:0000D957                                         ; _TranslateKey+161Cj ...
.text:0000D957                 cmp     [ebp+var_130], 2
.text:0000D95E                 jnz     loc_D9E9
.text:0000D964                 cmp     [ebp+var_128], 0Bh
.text:0000D96B                 jl      short loc_D9E9
.text:0000D96D                 cmp     [ebp+var_128], 0Eh
.text:0000D974                 jg      short loc_D9E9
.text:0000D976                 mov     edx, dword ptr ds:_term
.text:0000D97C                 cmp     dword ptr [edx+148h], 0
.text:0000D983                 jz      short loc_D9B1
.text:0000D985                 mov     eax, [ebp+var_128]
.text:0000D98B                 add     eax, 45h ; 'E'
.text:0000D98E                 push    eax
.text:0000D98F                 push    offset $SG90986 ; "\x1B%c"
.text:0000D994                 mov     ecx, [ebp+Dest]
.text:0000D99A                 push    ecx             ; Dest
.text:0000D99B                 call    _sprintf
.text:0000D9A0                 add     esp, 0Ch
.text:0000D9A3                 add     eax, [ebp+Dest]
.text:0000D9A9                 mov     [ebp+Dest], eax
.text:0000D9AF                 jmp     short loc_D9DB
.text:0000D9B1 ; ---------------------------------------------------------------------------
.text:0000D9B1
.text:0000D9B1 loc_D9B1:                               ; CODE XREF: _TranslateKey+168Bj
.text:0000D9B1                 mov     edx, [ebp+var_128]
.text:0000D9B7                 add     edx, 45h ; 'E'
.text:0000D9BA                 push    edx
.text:0000D9BB                 push    offset $SG90989 ; "\x1BO%c"
.text:0000D9C0                 mov     eax, [ebp+Dest]
.text:0000D9C6                 push    eax             ; Dest
.text:0000D9C7                 call    _sprintf
.text:0000D9CC                 add     esp, 0Ch
.text:0000D9CF                 add     eax, [ebp+Dest]
.text:0000D9D5                 mov     [ebp+Dest], eax
.text:0000D9DB
.text:0000D9DB loc_D9DB:                               ; CODE XREF: _TranslateKey+16B7j
.text:0000D9DB                 mov     eax, [ebp+Dest]
.text:0000D9E1                 sub     eax, [ebp+arg_C]
.text:0000D9E4                 jmp     loc_E0F5
.text:0000D9E9 ; ---------------------------------------------------------------------------
.text:0000D9E9
.text:0000D9E9 loc_D9E9:                               ; CODE XREF: _TranslateKey+1666j
.text:0000D9E9                                         ; _TranslateKey+1673j ...
.text:0000D9E9                 cmp     [ebp+var_128], 1
.text:0000D9F0                 jz      short loc_D9FB
.text:0000D9F2                 cmp     [ebp+var_128], 4
.text:0000D9F9                 jnz     short loc_DA5F
.text:0000D9FB
.text:0000D9FB loc_D9FB:                               ; CODE XREF: _TranslateKey+16F8j
.text:0000D9FB                 push    3Eh ; '>'
.text:0000D9FD                 mov     ecx, dword ptr ds:_conf
.text:0000DA03                 push    ecx
.text:0000DA04                 call    _conf_get_int
.text:0000DA09                 add     esp, 8
.text:0000DA0C                 test    eax, eax
.text:0000DA0E                 jz      short loc_DA5F
.text:0000DA10                 cmp     [ebp+var_128], 1
.text:0000DA17                 jnz     short loc_DA25
.text:0000DA19                 mov     [ebp+Format], offset $SG90993 ; "\x1B[H"
.text:0000DA23                 jmp     short loc_DA2F
.text:0000DA25 ; ---------------------------------------------------------------------------
.text:0000DA25
.text:0000DA25 loc_DA25:                               ; CODE XREF: _TranslateKey+171Fj
.text:0000DA25                 mov     [ebp+Format], offset $SG90994 ; "\x1BOw"
.text:0000DA2F
.text:0000DA2F loc_DA2F:                               ; CODE XREF: _TranslateKey+172Bj
.text:0000DA2F                 mov     edx, [ebp+Format]
.text:0000DA35                 push    edx             ; Format
.text:0000DA36                 mov     eax, [ebp+Dest]
.text:0000DA3C                 push    eax             ; Dest
.text:0000DA3D                 call    _sprintf
.text:0000DA42                 add     esp, 8
.text:0000DA45                 add     eax, [ebp+Dest]
.text:0000DA4B                 mov     [ebp+Dest], eax
.text:0000DA51                 mov     eax, [ebp+Dest]
.text:0000DA57                 sub     eax, [ebp+arg_C]
.text:0000DA5A                 jmp     loc_E0F5
.text:0000DA5F ; ---------------------------------------------------------------------------
.text:0000DA5F
.text:0000DA5F loc_DA5F:                               ; CODE XREF: _TranslateKey+1701j
.text:0000DA5F                                         ; _TranslateKey+1716j
.text:0000DA5F                 cmp     [ebp+var_128], 0
.text:0000DA66                 jz      short loc_DA9D
.text:0000DA68                 mov     ecx, [ebp+var_128]
.text:0000DA6E                 push    ecx
.text:0000DA6F                 push    offset $SG90997 ; "\x1B[%d~"
.text:0000DA74                 mov     edx, [ebp+Dest]
.text:0000DA7A                 push    edx             ; Dest
.text:0000DA7B                 call    _sprintf
.text:0000DA80                 add     esp, 0Ch
.text:0000DA83                 add     eax, [ebp+Dest]
.text:0000DA89                 mov     [ebp+Dest], eax
.text:0000DA8F                 mov     eax, [ebp+Dest]
.text:0000DA95                 sub     eax, [ebp+arg_C]
.text:0000DA98                 jmp     loc_E0F5
.text:0000DA9D ; ---------------------------------------------------------------------------
.text:0000DA9D
.text:0000DA9D loc_DA9D:                               ; CODE XREF: _TranslateKey+176Ej
.text:0000DA9D                 mov     [ebp+var_19D], 0
.text:0000DAA4                 mov     eax, [ebp+uVirtKey]
.text:0000DAA7                 mov     [ebp+var_20C], eax
.text:0000DAAD                 mov     ecx, [ebp+var_20C]
.text:0000DAB3                 sub     ecx, 0Ch
.text:0000DAB6                 mov     [ebp+var_20C], ecx
.text:0000DABC                 cmp     [ebp+var_20C], 1Ch ; switch 29 cases
.text:0000DAC3                 ja      short $LN44     ; jumptable 0000DAD2 default case
.text:0000DAC5                 mov     edx, [ebp+var_20C]
.text:0000DACB                 movzx   eax, ds:$LN246_0[edx]
.text:0000DAD2                 jmp     ds:$LN264[eax*4] ; switch jump
.text:0000DAD9 ; ---------------------------------------------------------------------------
.text:0000DAD9
.text:0000DAD9 $LN43:                                  ; CODE XREF: _TranslateKey+17DAj
.text:0000DAD9                                         ; DATA XREF: .text:$LN264o
.text:0000DAD9                 mov     [ebp+var_19D], 41h ; 'A' ; jumptable 0000DAD2 case 26
.text:0000DAE0                 jmp     short $LN44     ; jumptable 0000DAD2 default case
.text:0000DAE2 ; ---------------------------------------------------------------------------
.text:0000DAE2
.text:0000DAE2 $LN42:                                  ; CODE XREF: _TranslateKey+17DAj
.text:0000DAE2                                         ; DATA XREF: .text:$LN264o
.text:0000DAE2                 mov     [ebp+var_19D], 42h ; 'B' ; jumptable 0000DAD2 case 28
.text:0000DAE9                 jmp     short $LN44     ; jumptable 0000DAD2 default case
.text:0000DAEB ; ---------------------------------------------------------------------------
.text:0000DAEB
.text:0000DAEB $LN41_0:                                ; CODE XREF: _TranslateKey+17DAj
.text:0000DAEB                                         ; DATA XREF: .text:$LN264o
.text:0000DAEB                 mov     [ebp+var_19D], 43h ; 'C' ; jumptable 0000DAD2 case 27
.text:0000DAF2                 jmp     short $LN44     ; jumptable 0000DAD2 default case
.text:0000DAF4 ; ---------------------------------------------------------------------------
.text:0000DAF4
.text:0000DAF4 $LN40:                                  ; CODE XREF: _TranslateKey+17DAj
.text:0000DAF4                                         ; DATA XREF: .text:$LN264o
.text:0000DAF4                 mov     [ebp+var_19D], 44h ; 'D' ; jumptable 0000DAD2 case 25
.text:0000DAFB                 jmp     short $LN44     ; jumptable 0000DAD2 default case
.text:0000DAFD ; ---------------------------------------------------------------------------
.text:0000DAFD
.text:0000DAFD $LN39_0:                                ; CODE XREF: _TranslateKey+17DAj
.text:0000DAFD                                         ; DATA XREF: .text:$LN264o
.text:0000DAFD                 mov     [ebp+var_19D], 47h ; 'G' ; jumptable 0000DAD2 case 0
.text:0000DB04
.text:0000DB04 $LN44:                                  ; CODE XREF: _TranslateKey+17CBj
.text:0000DB04                                         ; _TranslateKey+17DAj ...
.text:0000DB04                 movsx   ecx, [ebp+var_19D] ; jumptable 0000DAD2 default case
.text:0000DB0B                 test    ecx, ecx
.text:0000DB0D                 jz      short loc_DB4E
.text:0000DB0F                 mov     edx, [ebp+var_11C]
.text:0000DB15                 push    edx
.text:0000DB16                 movsx   eax, [ebp+var_19D]
.text:0000DB1D                 push    eax
.text:0000DB1E                 mov     ecx, dword ptr ds:_term
.text:0000DB24                 push    ecx
.text:0000DB25                 mov     edx, [ebp+Dest]
.text:0000DB2B                 push    edx
.text:0000DB2C                 call    _format_arrow_key
.text:0000DB31                 add     esp, 10h
.text:0000DB34                 add     eax, [ebp+Dest]
.text:0000DB3A                 mov     [ebp+Dest], eax
.text:0000DB40                 mov     eax, [ebp+Dest]
.text:0000DB46                 sub     eax, [ebp+arg_C]
.text:0000DB49                 jmp     loc_E0F5
.text:0000DB4E ; ---------------------------------------------------------------------------
.text:0000DB4E
.text:0000DB4E loc_DB4E:                               ; CODE XREF: _TranslateKey+1815j
.text:0000DB4E                 cmp     [ebp+uVirtKey], 0Dh
.text:0000DB52                 jnz     short loc_DB8E
.text:0000DB54                 mov     eax, [ebp+Dest]
.text:0000DB5A                 mov     byte ptr [eax], 0Dh
.text:0000DB5D                 mov     ecx, [ebp+Dest]
.text:0000DB63                 add     ecx, 1
.text:0000DB66                 mov     [ebp+Dest], ecx
.text:0000DB6C                 mov     edx, [ebp+Dest]
.text:0000DB72                 mov     byte ptr [edx], 0
.text:0000DB75                 mov     eax, [ebp+Dest]
.text:0000DB7B                 add     eax, 1
.text:0000DB7E                 mov     [ebp+Dest], eax
.text:0000DB84                 mov     eax, 0FFFFFFFEh
.text:0000DB89                 jmp     loc_E0F5
.text:0000DB8E ; ---------------------------------------------------------------------------
.text:0000DB8E
.text:0000DB8E loc_DB8E:                               ; CODE XREF: _TranslateKey+185Aj
.text:0000DB8E                 cmp     [ebp+var_114], 0
.text:0000DB95                 jz      short loc_DBBA
.text:0000DB97                 cmp     [ebp+uVirtKey], 60h ; '`'
.text:0000DB9B                 jb      short loc_DBBA
.text:0000DB9D                 cmp     [ebp+uVirtKey], 69h ; 'i'
.text:0000DBA1                 ja      short loc_DBBA
.text:0000DBA3                 mov     ecx, ds:?alt_sum@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::alt_sum
.text:0000DBA9                 imul    ecx, 0Ah
.text:0000DBAC                 mov     edx, [ebp+uVirtKey]
.text:0000DBAF                 lea     eax, [ecx+edx-60h]
.text:0000DBB3                 mov     ds:?alt_sum@?1??TranslateKey@@9@9, eax ; `TranslateKey'::`2'::alt_sum
.text:0000DBB8                 jmp     short loc_DBC4
.text:0000DBBA ; ---------------------------------------------------------------------------
.text:0000DBBA
.text:0000DBBA loc_DBBA:                               ; CODE XREF: _TranslateKey+189Dj
.text:0000DBBA                                         ; _TranslateKey+18A3j ...
.text:0000DBBA                 mov     ds:?alt_sum@?1??TranslateKey@@9@9, 0 ; `TranslateKey'::`2'::alt_sum
.text:0000DBC4
.text:0000DBC4 loc_DBC4:                               ; CODE XREF: _TranslateKey+4E6j
.text:0000DBC4                                         ; _TranslateKey+4F6j ...
.text:0000DBC4                 mov     [ebp+var_1A4], 0
.text:0000DBCE                 movzx   ecx, [ebp+var_F4]
.text:0000DBD5                 test    ecx, ecx
.text:0000DBD7                 jz      short loc_DC0A
.text:0000DBD9                 push    8Fh ; 'Å'
.text:0000DBDE                 mov     edx, dword ptr ds:_conf
.text:0000DBE4                 push    edx
.text:0000DBE5                 call    _conf_get_int
.text:0000DBEA                 add     esp, 8
.text:0000DBED                 test    eax, eax
.text:0000DBEF                 jz      short loc_DC0A
.text:0000DBF1                 xor     eax, eax
.text:0000DBF3                 cmp     [ebp+var_114], 0
.text:0000DBFA                 setz    al
.text:0000DBFD                 mov     [ebp+var_1A4], eax
.text:0000DC03                 mov     [ebp+var_F4], 0
.text:0000DC0A
.text:0000DC0A loc_DC0A:                               ; CODE XREF: _TranslateKey+18DFj
.text:0000DC0A                                         ; _TranslateKey+18F7j
.text:0000DC0A                 cmp     dword ptr ds:_osVersion+10h, 2
.text:0000DC11                 jnz     short loc_DC58
.text:0000DC13                 cmp     ds:_p_ToUnicodeEx, 0
.text:0000DC1A                 jz      short loc_DC58
.text:0000DC1C                 mov     esi, esp
.text:0000DC1E                 mov     ecx, [ebp+dwhkl]
.text:0000DC24                 push    ecx
.text:0000DC25                 push    0
.text:0000DC27                 push    3
.text:0000DC29                 push    offset ?keys_unicode@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::keys_unicode
.text:0000DC2E                 lea     edx, [ebp+KeyState]
.text:0000DC34                 push    edx
.text:0000DC35                 mov     eax, [ebp+uScanCode]
.text:0000DC3B                 push    eax
.text:0000DC3C                 mov     ecx, [ebp+uVirtKey]
.text:0000DC3F                 push    ecx
.text:0000DC40                 call    ds:_p_ToUnicodeEx
.text:0000DC46                 cmp     esi, esp
.text:0000DC48                 call    __RTC_CheckEsp
.text:0000DC4D                 mov     [ebp+cbMultiByte], eax
.text:0000DC53                 jmp     loc_DD00
.text:0000DC58 ; ---------------------------------------------------------------------------
.text:0000DC58
.text:0000DC58 loc_DC58:                               ; CODE XREF: _TranslateKey+1919j
.text:0000DC58                                         ; _TranslateKey+1922j
.text:0000DC58                 mov     esi, esp
.text:0000DC5A                 mov     edx, [ebp+dwhkl]
.text:0000DC60                 push    edx             ; dwhkl
.text:0000DC61                 push    0               ; uFlags
.text:0000DC63                 push    offset ?keys@?EC@??TranslateKey@@9@9 ; lpChar
.text:0000DC68                 lea     eax, [ebp+KeyState]
.text:0000DC6E                 push    eax             ; lpKeyState
.text:0000DC6F                 mov     ecx, [ebp+uScanCode]
.text:0000DC75                 push    ecx             ; uScanCode
.text:0000DC76                 mov     edx, [ebp+uVirtKey]
.text:0000DC79                 push    edx             ; uVirtKey
.text:0000DC7A                 call    dword ptr ds:__imp__ToAsciiEx@24 ; ToAsciiEx(x,x,x,x,x,x)
.text:0000DC80                 cmp     esi, esp
.text:0000DC82                 call    __RTC_CheckEsp
.text:0000DC87                 mov     [ebp+cbMultiByte], eax
.text:0000DC8D                 cmp     [ebp+cbMultiByte], 0
.text:0000DC94                 jle     short loc_DD00
.text:0000DC96                 mov     [ebp+var_1A8], 0
.text:0000DCA0                 jmp     short loc_DCB1
.text:0000DCA2 ; ---------------------------------------------------------------------------
.text:0000DCA2
.text:0000DCA2 loc_DCA2:                               ; CODE XREF: _TranslateKey+19E0j
.text:0000DCA2                 mov     eax, [ebp+var_1A8]
.text:0000DCA8                 add     eax, 1
.text:0000DCAB                 mov     [ebp+var_1A8], eax
.text:0000DCB1
.text:0000DCB1 loc_DCB1:                               ; CODE XREF: _TranslateKey+19A8j
.text:0000DCB1                 mov     ecx, [ebp+var_1A8]
.text:0000DCB7                 cmp     ecx, [ebp+cbMultiByte]
.text:0000DCBD                 jge     short loc_DCDA
.text:0000DCBF                 mov     edx, [ebp+var_1A8]
.text:0000DCC5                 mov     eax, [ebp+var_1A8]
.text:0000DCCB                 mov     cl, ds:?keys@?EC@??TranslateKey@@9@9[eax*2] ; `TranslateKey'::`66'::keys
.text:0000DCD2                 mov     ds:?keysb@?EC@??TranslateKey@@9@9[edx], cl ; `TranslateKey'::`66'::keysb
.text:0000DCD8                 jmp     short loc_DCA2
.text:0000DCDA ; ---------------------------------------------------------------------------
.text:0000DCDA
.text:0000DCDA loc_DCDA:                               ; CODE XREF: _TranslateKey+19C5j
.text:0000DCDA                 mov     esi, esp
.text:0000DCDC                 push    3               ; cchWideChar
.text:0000DCDE                 push    offset ?keys_unicode@?1??TranslateKey@@9@9 ; lpWideCharStr
.text:0000DCE3                 mov     edx, [ebp+cbMultiByte]
.text:0000DCE9                 push    edx             ; cbMultiByte
.text:0000DCEA                 push    offset ?keysb@?EC@??TranslateKey@@9@9 ; lpMultiByteStr
.text:0000DCEF                 push    0               ; dwFlags
.text:0000DCF1                 push    0               ; CodePage
.text:0000DCF3                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:0000DCF9                 cmp     esi, esp
.text:0000DCFB                 call    __RTC_CheckEsp
.text:0000DD00
.text:0000DD00 loc_DD00:                               ; CODE XREF: _TranslateKey+195Bj
.text:0000DD00                                         ; _TranslateKey+199Cj
.text:0000DD00                 cmp     [ebp+cbMultiByte], 0
.text:0000DD07                 jle     loc_E07B
.text:0000DD0D                 mov     eax, [ebp+arg_C]
.text:0000DD10                 mov     [ebp+Dest], eax
.text:0000DD16                 mov     [ebp+var_124], 0
.text:0000DD20                 jmp     short loc_DD31
.text:0000DD22 ; ---------------------------------------------------------------------------
.text:0000DD22
.text:0000DD22 loc_DD22:                               ; CODE XREF: _TranslateKey+1A9Fj
.text:0000DD22                                         ; _TranslateKey:loc_DE50j ...
.text:0000DD22                 mov     ecx, [ebp+var_124]
.text:0000DD28                 add     ecx, 1
.text:0000DD2B                 mov     [ebp+var_124], ecx
.text:0000DD31
.text:0000DD31 loc_DD31:                               ; CODE XREF: _TranslateKey+1A28j
.text:0000DD31                 mov     edx, [ebp+var_124]
.text:0000DD37                 cmp     edx, [ebp+cbMultiByte]
.text:0000DD3D                 jge     loc_E067
.text:0000DD43                 mov     eax, [ebp+var_124]
.text:0000DD49                 mov     cx, ds:?keys_unicode@?1??TranslateKey@@9@9[eax*2] ; `TranslateKey'::`2'::keys_unicode
.text:0000DD51                 mov     [ebp+var_1BC], cx
.text:0000DD58                 cmp     ds:_compose_state, 2
.text:0000DD5F                 jnz     short loc_DD99
.text:0000DD61                 movzx   edx, [ebp+var_1BC]
.text:0000DD68                 cmp     edx, 20h ; ' '
.text:0000DD6B                 jl      short loc_DD99
.text:0000DD6D                 movzx   eax, [ebp+var_1BC]
.text:0000DD74                 cmp     eax, 80h ; 'Ç'
.text:0000DD79                 jge     short loc_DD99
.text:0000DD7B                 movzx   ecx, [ebp+var_1BC]
.text:0000DD82                 mov     ds:?compose_char@?1??TranslateKey@@9@9, ecx ; `TranslateKey'::`2'::compose_char
.text:0000DD88                 mov     edx, ds:_compose_state
.text:0000DD8E                 add     edx, 1
.text:0000DD91                 mov     ds:_compose_state, edx
.text:0000DD97                 jmp     short loc_DD22
.text:0000DD99 ; ---------------------------------------------------------------------------
.text:0000DD99
.text:0000DD99 loc_DD99:                               ; CODE XREF: _TranslateKey+1A67j
.text:0000DD99                                         ; _TranslateKey+1A73j ...
.text:0000DD99                 cmp     ds:_compose_state, 3
.text:0000DDA0                 jnz     loc_DE55
.text:0000DDA6                 movzx   eax, [ebp+var_1BC]
.text:0000DDAD                 cmp     eax, 20h ; ' '
.text:0000DDB0                 jl      loc_DE55
.text:0000DDB6                 movzx   ecx, [ebp+var_1BC]
.text:0000DDBD                 cmp     ecx, 80h ; 'Ç'
.text:0000DDC3                 jge     loc_DE55
.text:0000DDC9                 mov     ds:_compose_state, 0
.text:0000DDD3                 movzx   edx, [ebp+var_1BC]
.text:0000DDDA                 push    edx
.text:0000DDDB                 mov     eax, ds:?compose_char@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::compose_char
.text:0000DDE0                 push    eax
.text:0000DDE1                 call    _check_compose
.text:0000DDE6                 add     esp, 8
.text:0000DDE9                 mov     [ebp+var_1C4], eax
.text:0000DDEF                 cmp     [ebp+var_1C4], 0FFFFFFFFh
.text:0000DDF6                 jnz     short loc_DE10
.text:0000DDF8                 mov     esi, esp
.text:0000DDFA                 push    10h             ; uType
.text:0000DDFC                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:0000DE02                 cmp     esi, esp
.text:0000DE04                 call    __RTC_CheckEsp
.text:0000DE09                 xor     eax, eax
.text:0000DE0B                 jmp     loc_E0F5
.text:0000DE10 ; ---------------------------------------------------------------------------
.text:0000DE10
.text:0000DE10 loc_DE10:                               ; CODE XREF: _TranslateKey+1AFEj
.text:0000DE10                 mov     cx, word ptr [ebp+var_1C4]
.text:0000DE17                 mov     [ebp+var_1B0], cx
.text:0000DE1E                 mov     edx, dword ptr ds:_term
.text:0000DE24                 push    edx
.text:0000DE25                 call    _term_seen_key_event
.text:0000DE2A                 add     esp, 4
.text:0000DE2D                 cmp     ds:_ldisc, 0
.text:0000DE34                 jz      short loc_DE50
.text:0000DE36                 push    1
.text:0000DE38                 push    1
.text:0000DE3A                 lea     eax, [ebp+var_1B0]
.text:0000DE40                 push    eax
.text:0000DE41                 mov     ecx, ds:_ldisc
.text:0000DE47                 push    ecx
.text:0000DE48                 call    _luni_send
.text:0000DE4D                 add     esp, 10h
.text:0000DE50
.text:0000DE50 loc_DE50:                               ; CODE XREF: _TranslateKey+1B3Cj
.text:0000DE50                 jmp     loc_DD22
.text:0000DE55 ; ---------------------------------------------------------------------------
.text:0000DE55
.text:0000DE55 loc_DE55:                               ; CODE XREF: _TranslateKey+1AA8j
.text:0000DE55                                         ; _TranslateKey+1AB8j ...
.text:0000DE55                 mov     ds:_compose_state, 0
.text:0000DE5F                 cmp     [ebp+var_118], 0
.text:0000DE66                 jnz     loc_DF64
.text:0000DE6C                 cmp     ds:?alt_sum@?1??TranslateKey@@9@9, 0 ; `TranslateKey'::`2'::alt_sum
.text:0000DE73                 jz      loc_DF2E
.text:0000DE79                 mov     edx, dword ptr ds:_term
.text:0000DE7F                 cmp     dword ptr [edx+0DCh], 0
.text:0000DE86                 jnz     short loc_DEA5
.text:0000DE88                 mov     eax, dword ptr ds:_term
.text:0000DE8D                 mov     ecx, [eax+1090h]
.text:0000DE93                 cmp     dword ptr [ecx+0Ch], 0FDE9h
.text:0000DE9A                 jz      short loc_DEA5
.text:0000DE9C                 cmp     ds:dword_5C4, 0
.text:0000DEA3                 jz      short loc_DEE6
.text:0000DEA5
.text:0000DEA5 loc_DEA5:                               ; CODE XREF: _TranslateKey+1B8Ej
.text:0000DEA5                                         ; _TranslateKey+1BA2j
.text:0000DEA5                 mov     dx, word ptr ds:?alt_sum@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::alt_sum
.text:0000DEAC                 mov     [ebp+var_1B0], dx
.text:0000DEB3                 mov     eax, dword ptr ds:_term
.text:0000DEB8                 push    eax
.text:0000DEB9                 call    _term_seen_key_event
.text:0000DEBE                 add     esp, 4
.text:0000DEC1                 cmp     ds:_ldisc, 0
.text:0000DEC8                 jz      short loc_DEE4
.text:0000DECA                 push    1
.text:0000DECC                 push    1
.text:0000DECE                 lea     ecx, [ebp+var_1B0]
.text:0000DED4                 push    ecx
.text:0000DED5                 mov     edx, ds:_ldisc
.text:0000DEDB                 push    edx
.text:0000DEDC                 call    _luni_send
.text:0000DEE1                 add     esp, 10h
.text:0000DEE4
.text:0000DEE4 loc_DEE4:                               ; CODE XREF: _TranslateKey+1BD0j
.text:0000DEE4                 jmp     short loc_DF22
.text:0000DEE6 ; ---------------------------------------------------------------------------
.text:0000DEE6
.text:0000DEE6 loc_DEE6:                               ; CODE XREF: _TranslateKey+1BABj
.text:0000DEE6                 mov     al, byte ptr ds:?alt_sum@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::alt_sum
.text:0000DEEB                 mov     [ebp+var_1C9], al
.text:0000DEF1                 mov     ecx, dword ptr ds:_term
.text:0000DEF7                 push    ecx
.text:0000DEF8                 call    _term_seen_key_event
.text:0000DEFD                 add     esp, 4
.text:0000DF00                 cmp     ds:_ldisc, 0
.text:0000DF07                 jz      short loc_DF22
.text:0000DF09                 push    1
.text:0000DF0B                 push    1
.text:0000DF0D                 lea     edx, [ebp+var_1C9]
.text:0000DF13                 push    edx
.text:0000DF14                 mov     eax, ds:_ldisc
.text:0000DF19                 push    eax
.text:0000DF1A                 call    _ldisc_send
.text:0000DF1F                 add     esp, 10h
.text:0000DF22
.text:0000DF22 loc_DF22:                               ; CODE XREF: _TranslateKey:loc_DEE4j
.text:0000DF22                                         ; _TranslateKey+1C0Fj
.text:0000DF22                 mov     ds:?alt_sum@?1??TranslateKey@@9@9, 0 ; `TranslateKey'::`2'::alt_sum
.text:0000DF2C                 jmp     short loc_DF5F
.text:0000DF2E ; ---------------------------------------------------------------------------
.text:0000DF2E
.text:0000DF2E loc_DF2E:                               ; CODE XREF: _TranslateKey+1B7Bj
.text:0000DF2E                 mov     ecx, dword ptr ds:_term
.text:0000DF34                 push    ecx
.text:0000DF35                 call    _term_seen_key_event
.text:0000DF3A                 add     esp, 4
.text:0000DF3D                 cmp     ds:_ldisc, 0
.text:0000DF44                 jz      short loc_DF5F
.text:0000DF46                 push    1
.text:0000DF48                 push    1
.text:0000DF4A                 lea     edx, [ebp+var_1BC]
.text:0000DF50                 push    edx
.text:0000DF51                 mov     eax, ds:_ldisc
.text:0000DF56                 push    eax
.text:0000DF57                 call    _luni_send
.text:0000DF5C                 add     esp, 10h
.text:0000DF5F
.text:0000DF5F loc_DF5F:                               ; CODE XREF: _TranslateKey+1C34j
.text:0000DF5F                                         ; _TranslateKey+1C4Cj
.text:0000DF5F                 jmp     loc_E058
.text:0000DF64 ; ---------------------------------------------------------------------------
.text:0000DF64
.text:0000DF64 loc_DF64:                               ; CODE XREF: _TranslateKey+1B6Ej
.text:0000DF64                 cmp     [ebp+var_1A4], 0
.text:0000DF6B                 jz      loc_DFF2
.text:0000DF71                 movzx   ecx, [ebp+var_1BC]
.text:0000DF78                 cmp     ecx, 80h ; 'Ç'
.text:0000DF7E                 jge     short loc_DFF2
.text:0000DF80                 mov     edx, 1Bh
.text:0000DF85                 mov     [ebp+var_1D8], dx
.text:0000DF8C                 movzx   eax, [ebp+var_1BC]
.text:0000DF93                 push    eax
.text:0000DF94                 call    _xlat_uskbd2cyrllic
.text:0000DF99                 add     esp, 4
.text:0000DF9C                 mov     [ebp+var_1D6], ax
.text:0000DFA3                 mov     ecx, dword ptr ds:_term
.text:0000DFA9                 push    ecx
.text:0000DFAA                 call    _term_seen_key_event
.text:0000DFAF                 add     esp, 4
.text:0000DFB2                 cmp     ds:_ldisc, 0
.text:0000DFB9                 jz      short loc_DFF0
.text:0000DFBB                 push    1
.text:0000DFBD                 xor     edx, edx
.text:0000DFBF                 cmp     [ebp+var_114], 0
.text:0000DFC6                 setnz   dl
.text:0000DFC9                 add     edx, 1
.text:0000DFCC                 push    edx
.text:0000DFCD                 xor     eax, eax
.text:0000DFCF                 cmp     [ebp+var_114], 0
.text:0000DFD6                 setz    al
.text:0000DFD9                 lea     ecx, [ebp+eax*2+var_1D8]
.text:0000DFE0                 push    ecx
.text:0000DFE1                 mov     edx, ds:_ldisc
.text:0000DFE7                 push    edx
.text:0000DFE8                 call    _luni_send
.text:0000DFED                 add     esp, 10h
.text:0000DFF0
.text:0000DFF0 loc_DFF0:                               ; CODE XREF: _TranslateKey+1CC1j
.text:0000DFF0                 jmp     short loc_E058
.text:0000DFF2 ; ---------------------------------------------------------------------------
.text:0000DFF2
.text:0000DFF2 loc_DFF2:                               ; CODE XREF: _TranslateKey+1C73j
.text:0000DFF2                                         ; _TranslateKey+1C86j
.text:0000DFF2                 mov     eax, 1Bh
.text:0000DFF7                 mov     [ebp+var_1E4], ax
.text:0000DFFE                 mov     cx, [ebp+var_1BC]
.text:0000E005                 mov     [ebp+var_1E2], cx
.text:0000E00C                 mov     edx, dword ptr ds:_term
.text:0000E012                 push    edx
.text:0000E013                 call    _term_seen_key_event
.text:0000E018                 add     esp, 4
.text:0000E01B                 cmp     ds:_ldisc, 0
.text:0000E022                 jz      short loc_E058
.text:0000E024                 push    1
.text:0000E026                 xor     eax, eax
.text:0000E028                 cmp     [ebp+var_114], 0
.text:0000E02F                 setnz   al
.text:0000E032                 add     eax, 1
.text:0000E035                 push    eax
.text:0000E036                 xor     ecx, ecx
.text:0000E038                 cmp     [ebp+var_114], 0
.text:0000E03F                 setz    cl
.text:0000E042                 lea     edx, [ebp+ecx*2+var_1E4]
.text:0000E049                 push    edx
.text:0000E04A                 mov     eax, ds:_ldisc
.text:0000E04F                 push    eax
.text:0000E050                 call    _luni_send
.text:0000E055                 add     esp, 10h
.text:0000E058
.text:0000E058 loc_E058:                               ; CODE XREF: _TranslateKey:loc_DF5Fj
.text:0000E058                                         ; _TranslateKey:loc_DFF0j ...
.text:0000E058                 push    0
.text:0000E05A                 call    _show_mouseptr
.text:0000E05F                 add     esp, 4
.text:0000E062                 jmp     loc_DD22
.text:0000E067 ; ---------------------------------------------------------------------------
.text:0000E067
.text:0000E067 loc_E067:                               ; CODE XREF: _TranslateKey+1A45j
.text:0000E067                 xor     ecx, ecx
.text:0000E069                 mov     ds:?keys_unicode@?1??TranslateKey@@9@9, cx ; `TranslateKey'::`2'::keys_unicode
.text:0000E070                 mov     eax, [ebp+Dest]
.text:0000E076                 sub     eax, [ebp+arg_C]
.text:0000E079                 jmp     short loc_E0F5
.text:0000E07B ; ---------------------------------------------------------------------------
.text:0000E07B
.text:0000E07B loc_E07B:                               ; CODE XREF: _TranslateKey+1A0Fj
.text:0000E07B                 cmp     [ebp+var_114], 0
.text:0000E082                 jnz     short loc_E08F
.text:0000E084                 xor     edx, edx
.text:0000E086                 mov     ds:?keys_unicode@?1??TranslateKey@@9@9, dx ; `TranslateKey'::`2'::keys_unicode
.text:0000E08D                 jmp     short loc_E0D3
.text:0000E08F ; ---------------------------------------------------------------------------
.text:0000E08F
.text:0000E08F loc_E08F:                               ; CODE XREF: _TranslateKey+1D8Aj
.text:0000E08F                 movzx   eax, ds:?keys_unicode@?1??TranslateKey@@9@9 ; `TranslateKey'::`2'::keys_unicode
.text:0000E096                 test    eax, eax
.text:0000E098                 jz      short loc_E0D3
.text:0000E09A                 mov     ecx, dword ptr ds:_term
.text:0000E0A0                 cmp     dword ptr [ecx+0DCh], 0
.text:0000E0A7                 jnz     short loc_E0C7
.text:0000E0A9                 mov     edx, dword ptr ds:_term
.text:0000E0AF                 mov     eax, [edx+1090h]
.text:0000E0B5                 cmp     dword ptr [eax+0Ch], 0FDE9h
.text:0000E0BC                 jz      short loc_E0C7
.text:0000E0BE                 cmp     ds:dword_5C4, 0
.text:0000E0C5                 jz      short loc_E0D3
.text:0000E0C7
.text:0000E0C7 loc_E0C7:                               ; CODE XREF: _TranslateKey+1DAFj
.text:0000E0C7                                         ; _TranslateKey+1DC4j
.text:0000E0C7                 mov     ecx, 0Ah
.text:0000E0CC                 mov     ds:?keys_unicode@?1??TranslateKey@@9@9, cx ; `TranslateKey'::`2'::keys_unicode
.text:0000E0D3
.text:0000E0D3 loc_E0D3:                               ; CODE XREF: _TranslateKey+1D95j
.text:0000E0D3                                         ; _TranslateKey+1DA0j ...
.text:0000E0D3                 cmp     [ebp+uVirtKey], 12h
.text:0000E0D7                 jnz     short loc_E0F2
.text:0000E0D9                 push    50h ; 'P'
.text:0000E0DB                 mov     edx, dword ptr ds:_conf
.text:0000E0E1                 push    edx
.text:0000E0E2                 call    _conf_get_int
.text:0000E0E7                 add     esp, 8
.text:0000E0EA                 test    eax, eax
.text:0000E0EC                 jnz     short loc_E0F2
.text:0000E0EE                 xor     eax, eax
.text:0000E0F0                 jmp     short loc_E0F5
.text:0000E0F2 ; ---------------------------------------------------------------------------
.text:0000E0F2
.text:0000E0F2 loc_E0F2:                               ; CODE XREF: _TranslateKey+1DDFj
.text:0000E0F2                                         ; _TranslateKey+1DF4j
.text:0000E0F2                 or      eax, 0FFFFFFFFh
.text:0000E0F5
.text:0000E0F5 loc_E0F5:                               ; CODE XREF: _TranslateKey+1BDj
.text:0000E0F5                                         ; _TranslateKey+55Aj ...
.text:0000E0F5                 push    edx
.text:0000E0F6                 mov     ecx, ebp
.text:0000E0F8                 push    eax
.text:0000E0F9                 lea     edx, $LN256
.text:0000E0FF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000E104                 pop     eax
.text:0000E105                 pop     edx
.text:0000E106                 pop     edi
.text:0000E107                 pop     esi
.text:0000E108                 mov     ecx, [ebp+var_4]
.text:0000E10B                 xor     ecx, ebp
.text:0000E10D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000E112                 add     esp, 20Ch
.text:0000E118                 cmp     ebp, esp
.text:0000E11A                 call    __RTC_CheckEsp
.text:0000E11F                 mov     esp, ebp
.text:0000E121                 pop     ebp
.text:0000E122                 retn
.text:0000E122 _TranslateKey   endp
.text:0000E122
.text:0000E122 ; ---------------------------------------------------------------------------
.text:0000E123                 align 4
.text:0000E124 $LN256          dd 8                    ; DATA XREF: _TranslateKey+1E01o
.text:0000E128                 dd offset $LN255
.text:0000E12C $LN255          dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:0000E128o
.text:0000E134                 dd offset $LN247_0      ; "keystate"
.text:0000E138                 dd 0FFFFFE80h, 31h
.text:0000E140                 dd offset $LN248        ; "codes"
.text:0000E144                 dd 0FFFFFE6Ch, 7
.text:0000E14C                 dd offset $LN249        ; "codes"
.text:0000E150                 dd 0FFFFFE50h, 2
.text:0000E158                 dd offset $LN250        ; "keybuf"
.text:0000E15C                 dd 0FFFFFE44h, 2
.text:0000E164                 dd offset $LN251_0      ; "wch"
.text:0000E168                 dd 0FFFFFE37h, 1
.text:0000E170                 dd offset $LN252        ; "ch"
.text:0000E174                 dd 0FFFFFE28h, 4
.text:0000E17C                 dd offset $LN253        ; "cbuf"
.text:0000E180                 dd 0FFFFFE1Ch, 4
.text:0000E188                 dd offset $LN254        ; "cbuf"
.text:0000E18C $LN254          db 'cbuf',0             ; DATA XREF: .text:0000E188o
.text:0000E191 $LN253          db 'cbuf',0             ; DATA XREF: .text:0000E17Co
.text:0000E196 $LN252          db 'ch',0               ; DATA XREF: .text:0000E170o
.text:0000E199 $LN251_0        db 'wch',0              ; DATA XREF: .text:0000E164o
.text:0000E19D $LN250          db 'keybuf',0           ; DATA XREF: .text:0000E158o
.text:0000E1A4 $LN249          db 'codes',0            ; DATA XREF: .text:0000E14Co
.text:0000E1AA $LN248          db 'codes',0            ; DATA XREF: .text:0000E140o
.text:0000E1B0 $LN247_0        db 'keystate',0         ; DATA XREF: .text:0000E134o
.text:0000E1B9                 align 4
.text:0000E1BC $LN257          dd offset $LN203        ; DATA XREF: _TranslateKey+42Cr
.text:0000E1BC                 dd offset $LN199        ; jump table for switch statement
.text:0000E1BC                 dd offset $LN205
.text:0000E1BC                 dd offset $LN207
.text:0000E1BC                 dd offset $LN201
.text:0000E1BC                 dd offset $LN204
.text:0000E1BC                 dd offset $LN200
.text:0000E1BC                 dd offset $LN202
.text:0000E1BC                 dd offset $LN206
.text:0000E1BC                 dd offset $LN208
.text:0000E1BC                 dd offset $LN198
.text:0000E1BC                 dd offset $LN209
.text:0000E1EC $LN242_0        db      0,   0Bh,   0Bh,   0Bh
.text:0000E1EC                                         ; DATA XREF: _TranslateKey+425r
.text:0000E1EC                 db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table for switch statement
.text:0000E1EC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:0000E1EC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:0000E1EC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:0000E1EC                 db    0Bh,     1,     2,     3
.text:0000E1EC                 db      4,     5,     6,     7
.text:0000E1EC                 db      8,   0Bh,   0Bh,   0Bh
.text:0000E1EC                 db    0Bh,     9,   0Ah
.text:0000E20F                 align 10h
.text:0000E210 $LN258          dd offset $LN178_0      ; DATA XREF: _TranslateKey+7A3r
.text:0000E210                 dd offset $LN177        ; jump table for switch statement
.text:0000E210                 dd offset $LN176
.text:0000E210                 dd offset $LN175
.text:0000E210                 dd offset $LN174
.text:0000E210                 dd offset $LN173_0
.text:0000E210                 dd offset $LN172
.text:0000E210                 dd offset $LN171
.text:0000E210                 dd offset $LN170
.text:0000E234 $LN259          dd offset $LN164_0, offset $LN162_0, offset $LN161, offset $LN163_0
.text:0000E234                                         ; DATA XREF: _TranslateKey+9EEr
.text:0000E234                 dd offset $LN168_0      ; jump table for switch statement
.text:0000E248 $LN243_0        db      0,     4,     4,     4
.text:0000E248                                         ; DATA XREF: _TranslateKey+9E7r
.text:0000E248                 db      4,     4,     4,     4 ; indirect table for switch statement
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     4
.text:0000E248                 db      4,     4,     4,     1
.text:0000E248                 db      4,     4,     2,     4
.text:0000E248                 db      3
.text:0000E28D                 align 10h
.text:0000E290 $LN260          dd offset $LN133_0, offset $LN157, offset $LN156, offset $LN155
.text:0000E290                                         ; DATA XREF: _TranslateKey+A75r
.text:0000E290                 dd offset $LN154, offset $LN153, offset $LN152, offset $LN151 ; jump table for switch statement
.text:0000E290                 dd offset $LN150, offset $LN149, offset $LN148, offset $LN137_0
.text:0000E290                 dd offset $LN146, offset $LN135_0, offset $LN147_0, offset $LN139
.text:0000E290                 dd offset $LN160
.text:0000E2D4 $LN244          db      0,   10h,   10h,   10h
.text:0000E2D4                                         ; DATA XREF: _TranslateKey+A6Er
.text:0000E2D4                 db    10h,   10h,   10h,   10h ; indirect table for switch statement
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,   10h
.text:0000E2D4                 db    10h,   10h,   10h,     1
.text:0000E2D4                 db      2,     3,     4,     5
.text:0000E2D4                 db      6,     7,     8,     9
.text:0000E2D4                 db    0Ah,   0Bh,   0Ch,   10h
.text:0000E2D4                 db    0Dh,   0Eh,   0Fh
.text:0000E337                 align 4
.text:0000E338 $LN261          dd offset $LN109        ; DATA XREF: _TranslateKey+1020r
.text:0000E338                 dd offset $LN108        ; jump table for switch statement
.text:0000E338                 dd offset $LN107
.text:0000E338                 dd offset $LN106
.text:0000E338                 dd offset $LN105
.text:0000E338                 dd offset $LN104_0
.text:0000E338                 dd offset $LN103_0
.text:0000E338                 dd offset $LN102_0
.text:0000E338                 dd offset $LN101
.text:0000E338                 dd offset $LN100
.text:0000E338                 dd offset $LN99
.text:0000E338                 dd offset $LN98_0
.text:0000E338                 dd offset $LN97_0
.text:0000E338                 dd offset $LN96_0
.text:0000E338                 dd offset $LN95_0
.text:0000E338                 dd offset $LN94_1
.text:0000E338                 dd offset $LN93_1
.text:0000E338                 dd offset $LN92_1
.text:0000E338                 dd offset $LN91_1
.text:0000E338                 dd offset $LN90_0
.text:0000E388 $LN262          dd offset $LN82         ; DATA XREF: _TranslateKey+1224r
.text:0000E388                 dd offset $LN81         ; jump table for switch statement
.text:0000E388                 dd offset $LN83
.text:0000E388                 dd offset $LN86_0
.text:0000E388                 dd offset $LN85
.text:0000E388                 dd offset $LN84
.text:0000E388                 dd offset $LN89_0
.text:0000E3A4 $LN245          db      0,     1,     2,     3
.text:0000E3A4                                         ; DATA XREF: _TranslateKey+121Dr
.text:0000E3A4                 db      6,     6,     6,     6 ; indirect table for switch statement
.text:0000E3A4                 db      6,     6,     6,     6
.text:0000E3A4                 db      4,     5
.text:0000E3B2                 align 4
.text:0000E3B4 $LN263          dd offset $LN75         ; DATA XREF: _TranslateKey+1361r
.text:0000E3B4                 dd offset $LN74         ; jump table for switch statement
.text:0000E3B4                 dd offset $LN73
.text:0000E3B4                 dd offset $LN72
.text:0000E3B4                 dd offset $LN71
.text:0000E3B4                 dd offset $LN70
.text:0000E3B4                 dd offset $LN69
.text:0000E3B4                 dd offset $LN68_0
.text:0000E3B4                 dd offset $LN67
.text:0000E3B4                 dd offset $LN66
.text:0000E3B4                 dd offset $LN65_0
.text:0000E3B4                 dd offset $LN64_0
.text:0000E3E4 $LN264          dd offset $LN39_0       ; DATA XREF: _TranslateKey+17DAr
.text:0000E3E4                 dd offset $LN40         ; jump table for switch statement
.text:0000E3E4                 dd offset $LN43
.text:0000E3E4                 dd offset $LN41_0
.text:0000E3E4                 dd offset $LN42
.text:0000E3E4                 dd offset $LN44
.text:0000E3FC $LN246_0        db      0,     5,     5,     5
.text:0000E3FC                                         ; DATA XREF: _TranslateKey+17D3r
.text:0000E3FC                 db      5,     5,     5,     5 ; indirect table for switch statement
.text:0000E3FC                 db      5,     5,     5,     5
.text:0000E3FC                 db      5,     5,     5,     5
.text:0000E3FC                 db      5,     5,     5,     5
.text:0000E3FC                 db      5,     5,     5,     5
.text:0000E3FC                 db      5,     1,     2,     3
.text:0000E3FC                 db      4
.text:0000E419                 db 0Fh dup(0CCh)
.text:0000E428
.text:0000E428 ; =============== S U B R O U T I N E =======================================
.text:0000E428
.text:0000E428 ; Attributes: bp-based frame
.text:0000E428
.text:0000E428 ; int __cdecl set_title(int, char *Str)
.text:0000E428                 public _set_title
.text:0000E428 _set_title      proc near               ; CODE XREF: _start_backend+235p
.text:0000E428                                         ; _close_session+56p ...
.text:0000E428
.text:0000E428 Str             = dword ptr  0Ch
.text:0000E428
.text:0000E428                 push    ebp
.text:0000E429                 mov     ebp, esp
.text:0000E42B                 push    esi
.text:0000E42C                 mov     eax, ds:_window_name
.text:0000E431                 push    eax
.text:0000E432                 call    _safefree
.text:0000E437                 add     esp, 4
.text:0000E43A                 push    1
.text:0000E43C                 mov     ecx, [ebp+Str]
.text:0000E43F                 push    ecx             ; Str
.text:0000E440                 call    _strlen
.text:0000E445                 add     esp, 4
.text:0000E448                 add     eax, 1
.text:0000E44B                 push    eax
.text:0000E44C                 call    _safemalloc
.text:0000E451                 add     esp, 8
.text:0000E454                 mov     ds:_window_name, eax
.text:0000E459                 mov     edx, [ebp+Str]
.text:0000E45C                 push    edx             ; Source
.text:0000E45D                 mov     eax, ds:_window_name
.text:0000E462                 push    eax             ; Dest
.text:0000E463                 call    _strcpy
.text:0000E468                 add     esp, 8
.text:0000E46B                 push    6Dh ; 'm'
.text:0000E46D                 mov     ecx, dword ptr ds:_conf
.text:0000E473                 push    ecx
.text:0000E474                 call    _conf_get_int
.text:0000E479                 add     esp, 8
.text:0000E47C                 test    eax, eax
.text:0000E47E                 jnz     short loc_E49A
.text:0000E480                 mov     esi, esp
.text:0000E482                 mov     edx, dword ptr ds:_hwnd
.text:0000E488                 push    edx             ; hWnd
.text:0000E489                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text:0000E48F                 cmp     esi, esp
.text:0000E491                 call    __RTC_CheckEsp
.text:0000E496                 test    eax, eax
.text:0000E498                 jnz     short loc_E4B4
.text:0000E49A
.text:0000E49A loc_E49A:                               ; CODE XREF: _set_title+56j
.text:0000E49A                 mov     esi, esp
.text:0000E49C                 mov     eax, [ebp+Str]
.text:0000E49F                 push    eax             ; lpString
.text:0000E4A0                 mov     ecx, dword ptr ds:_hwnd
.text:0000E4A6                 push    ecx             ; hWnd
.text:0000E4A7                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:0000E4AD                 cmp     esi, esp
.text:0000E4AF                 call    __RTC_CheckEsp
.text:0000E4B4
.text:0000E4B4 loc_E4B4:                               ; CODE XREF: _set_title+70j
.text:0000E4B4                 pop     esi
.text:0000E4B5                 cmp     ebp, esp
.text:0000E4B7                 call    __RTC_CheckEsp
.text:0000E4BC                 pop     ebp
.text:0000E4BD                 retn
.text:0000E4BD _set_title      endp
.text:0000E4BD
.text:0000E4BD ; ---------------------------------------------------------------------------
.text:0000E4BE                 db 0Ah dup(0CCh)
.text:0000E4C8
.text:0000E4C8 ; =============== S U B R O U T I N E =======================================
.text:0000E4C8
.text:0000E4C8 ; Attributes: bp-based frame
.text:0000E4C8
.text:0000E4C8 ; int __cdecl set_icon(int, char *Str)
.text:0000E4C8                 public _set_icon
.text:0000E4C8 _set_icon       proc near               ; CODE XREF: _start_backend+246p
.text:0000E4C8                                         ; _close_session+48p
.text:0000E4C8
.text:0000E4C8 Str             = dword ptr  0Ch
.text:0000E4C8
.text:0000E4C8                 push    ebp
.text:0000E4C9                 mov     ebp, esp
.text:0000E4CB                 push    esi
.text:0000E4CC                 mov     eax, ds:_icon_name
.text:0000E4D1                 push    eax
.text:0000E4D2                 call    _safefree
.text:0000E4D7                 add     esp, 4
.text:0000E4DA                 push    1
.text:0000E4DC                 mov     ecx, [ebp+Str]
.text:0000E4DF                 push    ecx             ; Str
.text:0000E4E0                 call    _strlen
.text:0000E4E5                 add     esp, 4
.text:0000E4E8                 add     eax, 1
.text:0000E4EB                 push    eax
.text:0000E4EC                 call    _safemalloc
.text:0000E4F1                 add     esp, 8
.text:0000E4F4                 mov     ds:_icon_name, eax
.text:0000E4F9                 mov     edx, [ebp+Str]
.text:0000E4FC                 push    edx             ; Source
.text:0000E4FD                 mov     eax, ds:_icon_name
.text:0000E502                 push    eax             ; Dest
.text:0000E503                 call    _strcpy
.text:0000E508                 add     esp, 8
.text:0000E50B                 push    6Dh ; 'm'
.text:0000E50D                 mov     ecx, dword ptr ds:_conf
.text:0000E513                 push    ecx
.text:0000E514                 call    _conf_get_int
.text:0000E519                 add     esp, 8
.text:0000E51C                 test    eax, eax
.text:0000E51E                 jnz     short loc_E554
.text:0000E520                 mov     esi, esp
.text:0000E522                 mov     edx, dword ptr ds:_hwnd
.text:0000E528                 push    edx             ; hWnd
.text:0000E529                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text:0000E52F                 cmp     esi, esp
.text:0000E531                 call    __RTC_CheckEsp
.text:0000E536                 test    eax, eax
.text:0000E538                 jz      short loc_E554
.text:0000E53A                 mov     esi, esp
.text:0000E53C                 mov     eax, [ebp+Str]
.text:0000E53F                 push    eax             ; lpString
.text:0000E540                 mov     ecx, dword ptr ds:_hwnd
.text:0000E546                 push    ecx             ; hWnd
.text:0000E547                 call    dword ptr ds:__imp__SetWindowTextA@8 ; SetWindowTextA(x,x)
.text:0000E54D                 cmp     esi, esp
.text:0000E54F                 call    __RTC_CheckEsp
.text:0000E554
.text:0000E554 loc_E554:                               ; CODE XREF: _set_icon+56j
.text:0000E554                                         ; _set_icon+70j
.text:0000E554                 pop     esi
.text:0000E555                 cmp     ebp, esp
.text:0000E557                 call    __RTC_CheckEsp
.text:0000E55C                 pop     ebp
.text:0000E55D                 retn
.text:0000E55D _set_icon       endp
.text:0000E55D
.text:0000E55D ; ---------------------------------------------------------------------------
.text:0000E55E                 db 0Ah dup(0CCh)
.text:0000E568
.text:0000E568 ; =============== S U B R O U T I N E =======================================
.text:0000E568
.text:0000E568 ; Attributes: bp-based frame
.text:0000E568
.text:0000E568                 public _set_sbar
.text:0000E568 _set_sbar       proc near
.text:0000E568
.text:0000E568 var_28          = byte ptr -28h
.text:0000E568 var_24          = SCROLLINFO ptr -24h
.text:0000E568 var_4           = dword ptr -4
.text:0000E568 arg_4           = dword ptr  0Ch
.text:0000E568 arg_8           = dword ptr  10h
.text:0000E568 arg_C           = dword ptr  14h
.text:0000E568
.text:0000E568                 push    ebp
.text:0000E569                 mov     ebp, esp
.text:0000E56B                 sub     esp, 28h
.text:0000E56E                 push    esi
.text:0000E56F                 push    edi
.text:0000E570                 lea     edi, [ebp+var_28]
.text:0000E573                 mov     ecx, 0Ah
.text:0000E578                 mov     eax, 0CCCCCCCCh
.text:0000E57D                 rep stosd
.text:0000E57F                 mov     eax, dword ptr ds:___security_cookie
.text:0000E584                 xor     eax, ebp
.text:0000E586                 mov     [ebp+var_4], eax
.text:0000E589                 call    _is_full_screen
.text:0000E58E                 neg     eax
.text:0000E590                 sbb     eax, eax
.text:0000E592                 neg     eax
.text:0000E594                 add     eax, 68h ; 'h'
.text:0000E597                 push    eax
.text:0000E598                 mov     eax, dword ptr ds:_conf
.text:0000E59D                 push    eax
.text:0000E59E                 call    _conf_get_int
.text:0000E5A3                 add     esp, 8
.text:0000E5A6                 test    eax, eax
.text:0000E5A8                 jnz     short loc_E5AC
.text:0000E5AA                 jmp     short loc_E5FD
.text:0000E5AC ; ---------------------------------------------------------------------------
.text:0000E5AC
.text:0000E5AC loc_E5AC:                               ; CODE XREF: _set_sbar+40j
.text:0000E5AC                 mov     [ebp+var_24.cbSize], 1Ch
.text:0000E5B3                 mov     [ebp+var_24.fMask], 1Fh
.text:0000E5BA                 mov     [ebp+var_24.nMin], 0
.text:0000E5C1                 mov     ecx, [ebp+arg_4]
.text:0000E5C4                 sub     ecx, 1
.text:0000E5C7                 mov     [ebp+var_24.nMax], ecx
.text:0000E5CA                 mov     edx, [ebp+arg_C]
.text:0000E5CD                 mov     [ebp+var_24.nPage], edx
.text:0000E5D0                 mov     eax, [ebp+arg_8]
.text:0000E5D3                 mov     [ebp+var_24.nPos], eax
.text:0000E5D6                 cmp     dword ptr ds:_hwnd, 0
.text:0000E5DD                 jz      short loc_E5FD
.text:0000E5DF                 mov     esi, esp
.text:0000E5E1                 push    1               ; redraw
.text:0000E5E3                 lea     ecx, [ebp+var_24]
.text:0000E5E6                 push    ecx             ; lpsi
.text:0000E5E7                 push    1               ; nBar
.text:0000E5E9                 mov     edx, dword ptr ds:_hwnd
.text:0000E5EF                 push    edx             ; hwnd
.text:0000E5F0                 call    dword ptr ds:__imp__SetScrollInfo@16 ; SetScrollInfo(x,x,x,x)
.text:0000E5F6                 cmp     esi, esp
.text:0000E5F8                 call    __RTC_CheckEsp
.text:0000E5FD
.text:0000E5FD loc_E5FD:                               ; CODE XREF: _set_sbar+42j
.text:0000E5FD                                         ; _set_sbar+75j
.text:0000E5FD                 push    edx
.text:0000E5FE                 mov     ecx, ebp
.text:0000E600                 push    eax
.text:0000E601                 lea     edx, $LN7_2
.text:0000E607                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000E60C                 pop     eax
.text:0000E60D                 pop     edx
.text:0000E60E                 pop     edi
.text:0000E60F                 pop     esi
.text:0000E610                 mov     ecx, [ebp+var_4]
.text:0000E613                 xor     ecx, ebp
.text:0000E615                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000E61A                 add     esp, 28h
.text:0000E61D                 cmp     ebp, esp
.text:0000E61F                 call    __RTC_CheckEsp
.text:0000E624                 mov     esp, ebp
.text:0000E626                 pop     ebp
.text:0000E627                 retn
.text:0000E627 _set_sbar       endp
.text:0000E627
.text:0000E627 ; ---------------------------------------------------------------------------
.text:0000E628 $LN7_2          dd 1                    ; DATA XREF: _set_sbar+99o
.text:0000E62C                 dd offset $LN6_2
.text:0000E630 $LN6_2          dd 0FFFFFFDCh, 1Ch      ; DATA XREF: .text:0000E62Co
.text:0000E638                 dd offset $LN5_4
.text:0000E63C $LN5_4          dd 0CC006973h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000E638o
.text:0000E648
.text:0000E648 ; =============== S U B R O U T I N E =======================================
.text:0000E648
.text:0000E648 ; Attributes: bp-based frame
.text:0000E648
.text:0000E648                 public _get_ctx
.text:0000E648 _get_ctx        proc near               ; CODE XREF: WndProc(x,x,x,x)+268Dp
.text:0000E648                                         ; WndProc(x,x,x,x)+26F3p ...
.text:0000E648
.text:0000E648 hdc             = dword ptr -4
.text:0000E648
.text:0000E648                 push    ebp
.text:0000E649                 mov     ebp, esp
.text:0000E64B                 push    ecx
.text:0000E64C                 push    esi
.text:0000E64D                 mov     [ebp+hdc], 0CCCCCCCCh
.text:0000E654                 cmp     dword ptr ds:_hwnd, 0
.text:0000E65B                 jz      short loc_E6A7
.text:0000E65D                 mov     esi, esp
.text:0000E65F                 mov     eax, dword ptr ds:_hwnd
.text:0000E664                 push    eax             ; hWnd
.text:0000E665                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text:0000E66B                 cmp     esi, esp
.text:0000E66D                 call    __RTC_CheckEsp
.text:0000E672                 mov     [ebp+hdc], eax
.text:0000E675                 cmp     [ebp+hdc], 0
.text:0000E679                 jz      short loc_E6A0
.text:0000E67B                 cmp     ds:_pal, 0
.text:0000E682                 jz      short loc_E6A0
.text:0000E684                 mov     esi, esp
.text:0000E686                 push    0               ; bForceBkgd
.text:0000E688                 mov     ecx, ds:_pal
.text:0000E68E                 push    ecx             ; hPal
.text:0000E68F                 mov     edx, [ebp+hdc]
.text:0000E692                 push    edx             ; hdc
.text:0000E693                 call    dword ptr ds:__imp__SelectPalette@12 ; SelectPalette(x,x,x)
.text:0000E699                 cmp     esi, esp
.text:0000E69B                 call    __RTC_CheckEsp
.text:0000E6A0
.text:0000E6A0 loc_E6A0:                               ; CODE XREF: _get_ctx+31j
.text:0000E6A0                                         ; _get_ctx+3Aj
.text:0000E6A0                 mov     eax, [ebp+hdc]
.text:0000E6A3                 jmp     short loc_E6A9
.text:0000E6A5 ; ---------------------------------------------------------------------------
.text:0000E6A5                 jmp     short loc_E6A9
.text:0000E6A7 ; ---------------------------------------------------------------------------
.text:0000E6A7
.text:0000E6A7 loc_E6A7:                               ; CODE XREF: _get_ctx+13j
.text:0000E6A7                 xor     eax, eax
.text:0000E6A9
.text:0000E6A9 loc_E6A9:                               ; CODE XREF: _get_ctx+5Bj
.text:0000E6A9                                         ; _get_ctx+5Dj
.text:0000E6A9                 pop     esi
.text:0000E6AA                 add     esp, 4
.text:0000E6AD                 cmp     ebp, esp
.text:0000E6AF                 call    __RTC_CheckEsp
.text:0000E6B4                 mov     esp, ebp
.text:0000E6B6                 pop     ebp
.text:0000E6B7                 retn
.text:0000E6B7 _get_ctx        endp
.text:0000E6B7
.text:0000E6B8
.text:0000E6B8 ; =============== S U B R O U T I N E =======================================
.text:0000E6B8
.text:0000E6B8 ; Attributes: bp-based frame
.text:0000E6B8
.text:0000E6B8 ; int __cdecl free_ctx(HDC hdc)
.text:0000E6B8                 public _free_ctx
.text:0000E6B8 _free_ctx       proc near               ; CODE XREF: WndProc(x,x,x,x)+26DBp
.text:0000E6B8                                         ; WndProc(x,x,x,x)+2741p ...
.text:0000E6B8
.text:0000E6B8 hdc             = dword ptr  8
.text:0000E6B8
.text:0000E6B8                 push    ebp
.text:0000E6B9                 mov     ebp, esp
.text:0000E6BB                 push    esi
.text:0000E6BC                 push    edi
.text:0000E6BD                 mov     esi, esp
.text:0000E6BF                 push    0               ; bForceBkgd
.text:0000E6C1                 mov     edi, esp
.text:0000E6C3                 push    0Fh             ; i
.text:0000E6C5                 call    dword ptr ds:__imp__GetStockObject@4 ; GetStockObject(x)
.text:0000E6CB                 cmp     edi, esp
.text:0000E6CD                 call    __RTC_CheckEsp
.text:0000E6D2                 push    eax             ; hPal
.text:0000E6D3                 mov     eax, [ebp+hdc]
.text:0000E6D6                 push    eax             ; hdc
.text:0000E6D7                 call    dword ptr ds:__imp__SelectPalette@12 ; SelectPalette(x,x,x)
.text:0000E6DD                 cmp     esi, esp
.text:0000E6DF                 call    __RTC_CheckEsp
.text:0000E6E4                 mov     esi, esp
.text:0000E6E6                 mov     ecx, [ebp+hdc]
.text:0000E6E9                 push    ecx             ; hDC
.text:0000E6EA                 mov     edx, dword ptr ds:_hwnd
.text:0000E6F0                 push    edx             ; hWnd
.text:0000E6F1                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text:0000E6F7                 cmp     esi, esp
.text:0000E6F9                 call    __RTC_CheckEsp
.text:0000E6FE                 pop     edi
.text:0000E6FF                 pop     esi
.text:0000E700                 cmp     ebp, esp
.text:0000E702                 call    __RTC_CheckEsp
.text:0000E707                 pop     ebp
.text:0000E708                 retn
.text:0000E708 _free_ctx       endp
.text:0000E708
.text:0000E708 ; ---------------------------------------------------------------------------
.text:0000E709                 db 0Fh dup(0CCh)
.text:0000E718
.text:0000E718 ; =============== S U B R O U T I N E =======================================
.text:0000E718
.text:0000E718 ; Attributes: bp-based frame
.text:0000E718
.text:0000E718                 public _palette_set
.text:0000E718 _palette_set    proc near
.text:0000E718
.text:0000E718 hdc             = dword ptr -4
.text:0000E718 arg_0           = dword ptr  8
.text:0000E718 arg_4           = dword ptr  0Ch
.text:0000E718 arg_8           = dword ptr  10h
.text:0000E718 arg_C           = dword ptr  14h
.text:0000E718 arg_10          = dword ptr  18h
.text:0000E718
.text:0000E718                 push    ebp
.text:0000E719                 mov     ebp, esp
.text:0000E71B                 push    ecx
.text:0000E71C                 push    esi
.text:0000E71D                 mov     [ebp+hdc], 0CCCCCCCCh
.text:0000E724                 cmp     [ebp+arg_4], 10h
.text:0000E728                 jl      short loc_E735
.text:0000E72A                 mov     eax, [ebp+arg_4]
.text:0000E72D                 add     eax, 0F0h ; '='
.text:0000E732                 mov     [ebp+arg_4], eax
.text:0000E735
.text:0000E735 loc_E735:                               ; CODE XREF: _palette_set+10j
.text:0000E735                 cmp     [ebp+arg_4], 106h
.text:0000E73C                 jl      short loc_E743
.text:0000E73E                 jmp     loc_E7CB
.text:0000E743 ; ---------------------------------------------------------------------------
.text:0000E743
.text:0000E743 loc_E743:                               ; CODE XREF: _palette_set+24j
.text:0000E743                 mov     ecx, [ebp+arg_10]
.text:0000E746                 push    ecx
.text:0000E747                 mov     edx, [ebp+arg_C]
.text:0000E74A                 push    edx
.text:0000E74B                 mov     eax, [ebp+arg_8]
.text:0000E74E                 push    eax
.text:0000E74F                 mov     ecx, [ebp+arg_4]
.text:0000E752                 push    ecx
.text:0000E753                 call    _real_palette_set
.text:0000E758                 add     esp, 10h
.text:0000E75B                 cmp     ds:_pal, 0
.text:0000E762                 jz      short loc_E7A9
.text:0000E764                 mov     edx, [ebp+arg_0]
.text:0000E767                 push    edx
.text:0000E768                 call    _get_ctx
.text:0000E76D                 add     esp, 4
.text:0000E770                 mov     [ebp+hdc], eax
.text:0000E773                 mov     esi, esp
.text:0000E775                 mov     eax, ds:_pal
.text:0000E77A                 push    eax             ; h
.text:0000E77B                 call    dword ptr ds:__imp__UnrealizeObject@4 ; UnrealizeObject(x)
.text:0000E781                 cmp     esi, esp
.text:0000E783                 call    __RTC_CheckEsp
.text:0000E788                 mov     esi, esp
.text:0000E78A                 mov     ecx, [ebp+hdc]
.text:0000E78D                 push    ecx             ; hdc
.text:0000E78E                 call    dword ptr ds:__imp__RealizePalette@4 ; RealizePalette(x)
.text:0000E794                 cmp     esi, esp
.text:0000E796                 call    __RTC_CheckEsp
.text:0000E79B                 mov     edx, [ebp+hdc]
.text:0000E79E                 push    edx             ; hdc
.text:0000E79F                 call    _free_ctx
.text:0000E7A4                 add     esp, 4
.text:0000E7A7                 jmp     short loc_E7CB
.text:0000E7A9 ; ---------------------------------------------------------------------------
.text:0000E7A9
.text:0000E7A9 loc_E7A9:                               ; CODE XREF: _palette_set+4Aj
.text:0000E7A9                 cmp     [ebp+arg_4], 102h
.text:0000E7B0                 jnz     short loc_E7CB
.text:0000E7B2                 mov     esi, esp
.text:0000E7B4                 push    1               ; bErase
.text:0000E7B6                 push    0               ; lpRect
.text:0000E7B8                 mov     eax, dword ptr ds:_hwnd
.text:0000E7BD                 push    eax             ; hWnd
.text:0000E7BE                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:0000E7C4                 cmp     esi, esp
.text:0000E7C6                 call    __RTC_CheckEsp
.text:0000E7CB
.text:0000E7CB loc_E7CB:                               ; CODE XREF: _palette_set+26j
.text:0000E7CB                                         ; _palette_set+8Fj ...
.text:0000E7CB                 pop     esi
.text:0000E7CC                 add     esp, 4
.text:0000E7CF                 cmp     ebp, esp
.text:0000E7D1                 call    __RTC_CheckEsp
.text:0000E7D6                 mov     esp, ebp
.text:0000E7D8                 pop     ebp
.text:0000E7D9                 retn
.text:0000E7D9 _palette_set    endp
.text:0000E7D9
.text:0000E7D9 ; ---------------------------------------------------------------------------
.text:0000E7DA                 db 0Eh dup(0CCh)
.text:0000E7E8
.text:0000E7E8 ; =============== S U B R O U T I N E =======================================
.text:0000E7E8
.text:0000E7E8 ; Attributes: bp-based frame
.text:0000E7E8
.text:0000E7E8 _real_palette_set proc near             ; CODE XREF: _palette_set+3Bp
.text:0000E7E8
.text:0000E7E8 arg_0           = dword ptr  8
.text:0000E7E8 arg_4           = byte ptr  0Ch
.text:0000E7E8 arg_8           = byte ptr  10h
.text:0000E7E8 arg_C           = byte ptr  14h
.text:0000E7E8
.text:0000E7E8                 push    ebp
.text:0000E7E9                 mov     ebp, esp
.text:0000E7EB                 push    esi
.text:0000E7EC                 cmp     ds:_pal, 0
.text:0000E7F3                 jz      loc_E886
.text:0000E7F9                 mov     eax, [ebp+arg_0]
.text:0000E7FC                 mov     ecx, ds:_logpal
.text:0000E802                 mov     dl, [ebp+arg_4]
.text:0000E805                 mov     [ecx+eax*4+4], dl
.text:0000E809                 mov     eax, [ebp+arg_0]
.text:0000E80C                 mov     ecx, ds:_logpal
.text:0000E812                 mov     dl, [ebp+arg_8]
.text:0000E815                 mov     [ecx+eax*4+5], dl
.text:0000E819                 mov     eax, [ebp+arg_0]
.text:0000E81C                 mov     ecx, ds:_logpal
.text:0000E822                 mov     dl, [ebp+arg_C]
.text:0000E825                 mov     [ecx+eax*4+6], dl
.text:0000E829                 mov     eax, [ebp+arg_0]
.text:0000E82C                 mov     ecx, ds:_logpal
.text:0000E832                 mov     byte ptr [ecx+eax*4+7], 4
.text:0000E837                 movzx   edx, [ebp+arg_4]
.text:0000E83B                 movzx   eax, [ebp+arg_8]
.text:0000E83F                 shl     eax, 8
.text:0000E842                 or      edx, eax
.text:0000E844                 movzx   ecx, [ebp+arg_C]
.text:0000E848                 shl     ecx, 10h
.text:0000E84B                 or      edx, ecx
.text:0000E84D                 or      edx, 2000000h
.text:0000E853                 mov     eax, [ebp+arg_0]
.text:0000E856                 mov     ds:_colours[eax*4], edx
.text:0000E85D                 mov     ecx, ds:_logpal
.text:0000E863                 add     ecx, 4
.text:0000E866                 mov     esi, esp
.text:0000E868                 push    ecx             ; pPalEntries
.text:0000E869                 push    106h            ; cEntries
.text:0000E86E                 push    0               ; iStart
.text:0000E870                 mov     edx, ds:_pal
.text:0000E876                 push    edx             ; hpal
.text:0000E877                 call    dword ptr ds:__imp__SetPaletteEntries@16 ; SetPaletteEntries(x,x,x,x)
.text:0000E87D                 cmp     esi, esp
.text:0000E87F                 call    __RTC_CheckEsp
.text:0000E884                 jmp     short loc_E8A6
.text:0000E886 ; ---------------------------------------------------------------------------
.text:0000E886
.text:0000E886 loc_E886:                               ; CODE XREF: _real_palette_set+Bj
.text:0000E886                 movzx   eax, [ebp+arg_4]
.text:0000E88A                 movzx   ecx, [ebp+arg_8]
.text:0000E88E                 shl     ecx, 8
.text:0000E891                 or      eax, ecx
.text:0000E893                 movzx   edx, [ebp+arg_C]
.text:0000E897                 shl     edx, 10h
.text:0000E89A                 or      eax, edx
.text:0000E89C                 mov     ecx, [ebp+arg_0]
.text:0000E89F                 mov     ds:_colours[ecx*4], eax
.text:0000E8A6
.text:0000E8A6 loc_E8A6:                               ; CODE XREF: _real_palette_set+9Cj
.text:0000E8A6                 pop     esi
.text:0000E8A7                 cmp     ebp, esp
.text:0000E8A9                 call    __RTC_CheckEsp
.text:0000E8AE                 pop     ebp
.text:0000E8AF                 retn
.text:0000E8AF _real_palette_set endp
.text:0000E8AF
.text:0000E8AF ; ---------------------------------------------------------------------------
.text:0000E8B0                 db 8 dup(0CCh)
.text:0000E8B8
.text:0000E8B8 ; =============== S U B R O U T I N E =======================================
.text:0000E8B8
.text:0000E8B8 ; Attributes: bp-based frame
.text:0000E8B8
.text:0000E8B8                 public _palette_reset
.text:0000E8B8 _palette_reset  proc near
.text:0000E8B8
.text:0000E8B8 hdc             = dword ptr -8
.text:0000E8B8 var_4           = dword ptr -4
.text:0000E8B8 arg_0           = dword ptr  8
.text:0000E8B8
.text:0000E8B8                 push    ebp
.text:0000E8B9                 mov     ebp, esp
.text:0000E8BB                 sub     esp, 8
.text:0000E8BE                 push    esi
.text:0000E8BF                 mov     [ebp+hdc], 0CCCCCCCCh
.text:0000E8C6                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000E8CD                 mov     [ebp+var_4], 0
.text:0000E8D4                 jmp     short loc_E8DF
.text:0000E8D6 ; ---------------------------------------------------------------------------
.text:0000E8D6
.text:0000E8D6 loc_E8D6:                               ; CODE XREF: _palette_reset:loc_E9CFj
.text:0000E8D6                 mov     eax, [ebp+var_4]
.text:0000E8D9                 add     eax, 1
.text:0000E8DC                 mov     [ebp+var_4], eax
.text:0000E8DF
.text:0000E8DF loc_E8DF:                               ; CODE XREF: _palette_reset+1Cj
.text:0000E8DF                 cmp     [ebp+var_4], 106h
.text:0000E8E6                 jge     loc_E9D4
.text:0000E8EC                 cmp     ds:_pal, 0
.text:0000E8F3                 jz      loc_E994
.text:0000E8F9                 mov     ecx, [ebp+var_4]
.text:0000E8FC                 imul    ecx, 3
.text:0000E8FF                 mov     edx, [ebp+var_4]
.text:0000E902                 mov     eax, ds:_logpal
.text:0000E907                 mov     cl, ds:byte_282[ecx]
.text:0000E90D                 mov     [eax+edx*4+4], cl
.text:0000E911                 mov     edx, [ebp+var_4]
.text:0000E914                 imul    edx, 3
.text:0000E917                 mov     eax, [ebp+var_4]
.text:0000E91A                 mov     ecx, ds:_logpal
.text:0000E920                 mov     dl, ds:byte_281[edx]
.text:0000E926                 mov     [ecx+eax*4+5], dl
.text:0000E92A                 mov     eax, [ebp+var_4]
.text:0000E92D                 imul    eax, 3
.text:0000E930                 mov     ecx, [ebp+var_4]
.text:0000E933                 mov     edx, ds:_logpal
.text:0000E939                 mov     al, ds:_defpal[eax]
.text:0000E93F                 mov     [edx+ecx*4+6], al
.text:0000E943                 mov     ecx, [ebp+var_4]
.text:0000E946                 mov     edx, ds:_logpal
.text:0000E94C                 mov     byte ptr [edx+ecx*4+7], 0
.text:0000E951                 mov     eax, [ebp+var_4]
.text:0000E954                 imul    eax, 3
.text:0000E957                 movzx   ecx, ds:byte_282[eax]
.text:0000E95E                 mov     edx, [ebp+var_4]
.text:0000E961                 imul    edx, 3
.text:0000E964                 movzx   eax, ds:byte_281[edx]
.text:0000E96B                 shl     eax, 8
.text:0000E96E                 or      ecx, eax
.text:0000E970                 mov     edx, [ebp+var_4]
.text:0000E973                 imul    edx, 3
.text:0000E976                 movzx   eax, ds:_defpal[edx]
.text:0000E97D                 shl     eax, 10h
.text:0000E980                 or      ecx, eax
.text:0000E982                 or      ecx, 2000000h
.text:0000E988                 mov     edx, [ebp+var_4]
.text:0000E98B                 mov     ds:_colours[edx*4], ecx
.text:0000E992                 jmp     short loc_E9CF
.text:0000E994 ; ---------------------------------------------------------------------------
.text:0000E994
.text:0000E994 loc_E994:                               ; CODE XREF: _palette_reset+3Bj
.text:0000E994                 mov     eax, [ebp+var_4]
.text:0000E997                 imul    eax, 3
.text:0000E99A                 movzx   ecx, ds:byte_282[eax]
.text:0000E9A1                 mov     edx, [ebp+var_4]
.text:0000E9A4                 imul    edx, 3
.text:0000E9A7                 movzx   eax, ds:byte_281[edx]
.text:0000E9AE                 shl     eax, 8
.text:0000E9B1                 or      ecx, eax
.text:0000E9B3                 mov     edx, [ebp+var_4]
.text:0000E9B6                 imul    edx, 3
.text:0000E9B9                 movzx   eax, ds:_defpal[edx]
.text:0000E9C0                 shl     eax, 10h
.text:0000E9C3                 or      ecx, eax
.text:0000E9C5                 mov     edx, [ebp+var_4]
.text:0000E9C8                 mov     ds:_colours[edx*4], ecx
.text:0000E9CF
.text:0000E9CF loc_E9CF:                               ; CODE XREF: _palette_reset+DAj
.text:0000E9CF                 jmp     loc_E8D6
.text:0000E9D4 ; ---------------------------------------------------------------------------
.text:0000E9D4
.text:0000E9D4 loc_E9D4:                               ; CODE XREF: _palette_reset+2Ej
.text:0000E9D4                 cmp     ds:_pal, 0
.text:0000E9DB                 jz      short loc_EA33
.text:0000E9DD                 mov     eax, ds:_logpal
.text:0000E9E2                 add     eax, 4
.text:0000E9E5                 mov     esi, esp
.text:0000E9E7                 push    eax             ; pPalEntries
.text:0000E9E8                 push    106h            ; cEntries
.text:0000E9ED                 push    0               ; iStart
.text:0000E9EF                 mov     ecx, ds:_pal
.text:0000E9F5                 push    ecx             ; hpal
.text:0000E9F6                 call    dword ptr ds:__imp__SetPaletteEntries@16 ; SetPaletteEntries(x,x,x,x)
.text:0000E9FC                 cmp     esi, esp
.text:0000E9FE                 call    __RTC_CheckEsp
.text:0000EA03                 mov     edx, [ebp+arg_0]
.text:0000EA06                 push    edx
.text:0000EA07                 call    _get_ctx
.text:0000EA0C                 add     esp, 4
.text:0000EA0F                 mov     [ebp+hdc], eax
.text:0000EA12                 mov     esi, esp
.text:0000EA14                 mov     eax, [ebp+hdc]
.text:0000EA17                 push    eax             ; hdc
.text:0000EA18                 call    dword ptr ds:__imp__RealizePalette@4 ; RealizePalette(x)
.text:0000EA1E                 cmp     esi, esp
.text:0000EA20                 call    __RTC_CheckEsp
.text:0000EA25                 mov     ecx, [ebp+hdc]
.text:0000EA28                 push    ecx             ; hdc
.text:0000EA29                 call    _free_ctx
.text:0000EA2E                 add     esp, 4
.text:0000EA31                 jmp     short loc_EA4D
.text:0000EA33 ; ---------------------------------------------------------------------------
.text:0000EA33
.text:0000EA33 loc_EA33:                               ; CODE XREF: _palette_reset+123j
.text:0000EA33                 mov     esi, esp
.text:0000EA35                 push    1               ; bErase
.text:0000EA37                 push    0               ; lpRect
.text:0000EA39                 mov     edx, dword ptr ds:_hwnd
.text:0000EA3F                 push    edx             ; hWnd
.text:0000EA40                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:0000EA46                 cmp     esi, esp
.text:0000EA48                 call    __RTC_CheckEsp
.text:0000EA4D
.text:0000EA4D loc_EA4D:                               ; CODE XREF: _palette_reset+179j
.text:0000EA4D                 pop     esi
.text:0000EA4E                 add     esp, 8
.text:0000EA51                 cmp     ebp, esp
.text:0000EA53                 call    __RTC_CheckEsp
.text:0000EA58                 mov     esp, ebp
.text:0000EA5A                 pop     ebp
.text:0000EA5B                 retn
.text:0000EA5B _palette_reset  endp
.text:0000EA5B
.text:0000EA5B ; ---------------------------------------------------------------------------
.text:0000EA5C                 db 0Ch dup(0CCh)
.text:0000EA68
.text:0000EA68 ; =============== S U B R O U T I N E =======================================
.text:0000EA68
.text:0000EA68 ; Attributes: bp-based frame
.text:0000EA68
.text:0000EA68 ; int __cdecl write_aclip(int, void *Src, size_t Size, int)
.text:0000EA68                 public _write_aclip
.text:0000EA68 _write_aclip    proc near
.text:0000EA68
.text:0000EA68 Dst             = dword ptr -8
.text:0000EA68 hMem            = dword ptr -4
.text:0000EA68 Src             = dword ptr  0Ch
.text:0000EA68 Size            = dword ptr  10h
.text:0000EA68 arg_C           = dword ptr  14h
.text:0000EA68
.text:0000EA68                 push    ebp
.text:0000EA69                 mov     ebp, esp
.text:0000EA6B                 sub     esp, 8
.text:0000EA6E                 push    esi
.text:0000EA6F                 mov     [ebp+Dst], 0CCCCCCCCh
.text:0000EA76                 mov     [ebp+hMem], 0CCCCCCCCh
.text:0000EA7D                 mov     eax, [ebp+Size]
.text:0000EA80                 add     eax, 1
.text:0000EA83                 mov     esi, esp
.text:0000EA85                 push    eax             ; dwBytes
.text:0000EA86                 push    2002h           ; uFlags
.text:0000EA8B                 call    dword ptr ds:__imp__GlobalAlloc@8 ; GlobalAlloc(x,x)
.text:0000EA91                 cmp     esi, esp
.text:0000EA93                 call    __RTC_CheckEsp
.text:0000EA98                 mov     [ebp+hMem], eax
.text:0000EA9B                 cmp     [ebp+hMem], 0
.text:0000EA9F                 jnz     short loc_EAA6
.text:0000EAA1                 jmp     loc_EBA3
.text:0000EAA6 ; ---------------------------------------------------------------------------
.text:0000EAA6
.text:0000EAA6 loc_EAA6:                               ; CODE XREF: _write_aclip+37j
.text:0000EAA6                 mov     esi, esp
.text:0000EAA8                 mov     ecx, [ebp+hMem]
.text:0000EAAB                 push    ecx             ; hMem
.text:0000EAAC                 call    dword ptr ds:__imp__GlobalLock@4 ; GlobalLock(x)
.text:0000EAB2                 cmp     esi, esp
.text:0000EAB4                 call    __RTC_CheckEsp
.text:0000EAB9                 mov     [ebp+Dst], eax
.text:0000EABC                 cmp     [ebp+Dst], 0
.text:0000EAC0                 jnz     short loc_EAC7
.text:0000EAC2                 jmp     loc_EBA3
.text:0000EAC7 ; ---------------------------------------------------------------------------
.text:0000EAC7
.text:0000EAC7 loc_EAC7:                               ; CODE XREF: _write_aclip+58j
.text:0000EAC7                 mov     edx, [ebp+Size]
.text:0000EACA                 push    edx             ; Size
.text:0000EACB                 mov     eax, [ebp+Src]
.text:0000EACE                 push    eax             ; Src
.text:0000EACF                 mov     ecx, [ebp+Dst]
.text:0000EAD2                 push    ecx             ; Dst
.text:0000EAD3                 call    _memcpy
.text:0000EAD8                 add     esp, 0Ch
.text:0000EADB                 mov     edx, [ebp+Dst]
.text:0000EADE                 add     edx, [ebp+Size]
.text:0000EAE1                 mov     byte ptr [edx], 0
.text:0000EAE4                 mov     esi, esp
.text:0000EAE6                 mov     eax, [ebp+hMem]
.text:0000EAE9                 push    eax             ; hMem
.text:0000EAEA                 call    dword ptr ds:__imp__GlobalUnlock@4 ; GlobalUnlock(x)
.text:0000EAF0                 cmp     esi, esp
.text:0000EAF2                 call    __RTC_CheckEsp
.text:0000EAF7                 cmp     [ebp+arg_C], 0
.text:0000EAFB                 jnz     short loc_EB1C
.text:0000EAFD                 mov     esi, esp
.text:0000EAFF                 push    0               ; lParam
.text:0000EB01                 push    1               ; wParam
.text:0000EB03                 push    8002h           ; Msg
.text:0000EB08                 mov     ecx, dword ptr ds:_hwnd
.text:0000EB0E                 push    ecx             ; hWnd
.text:0000EB0F                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000EB15                 cmp     esi, esp
.text:0000EB17                 call    __RTC_CheckEsp
.text:0000EB1C
.text:0000EB1C loc_EB1C:                               ; CODE XREF: _write_aclip+93j
.text:0000EB1C                 mov     esi, esp
.text:0000EB1E                 mov     edx, dword ptr ds:_hwnd
.text:0000EB24                 push    edx             ; hWndNewOwner
.text:0000EB25                 call    dword ptr ds:__imp__OpenClipboard@4 ; OpenClipboard(x)
.text:0000EB2B                 cmp     esi, esp
.text:0000EB2D                 call    __RTC_CheckEsp
.text:0000EB32                 test    eax, eax
.text:0000EB34                 jz      short loc_EB6B
.text:0000EB36                 mov     esi, esp
.text:0000EB38                 call    dword ptr ds:__imp__EmptyClipboard@0 ; EmptyClipboard()
.text:0000EB3E                 cmp     esi, esp
.text:0000EB40                 call    __RTC_CheckEsp
.text:0000EB45                 mov     esi, esp
.text:0000EB47                 mov     eax, [ebp+hMem]
.text:0000EB4A                 push    eax             ; hMem
.text:0000EB4B                 push    1               ; uFormat
.text:0000EB4D                 call    dword ptr ds:__imp__SetClipboardData@8 ; SetClipboardData(x,x)
.text:0000EB53                 cmp     esi, esp
.text:0000EB55                 call    __RTC_CheckEsp
.text:0000EB5A                 mov     esi, esp
.text:0000EB5C                 call    dword ptr ds:__imp__CloseClipboard@0 ; CloseClipboard()
.text:0000EB62                 cmp     esi, esp
.text:0000EB64                 call    __RTC_CheckEsp
.text:0000EB69                 jmp     short loc_EB7E
.text:0000EB6B ; ---------------------------------------------------------------------------
.text:0000EB6B
.text:0000EB6B loc_EB6B:                               ; CODE XREF: _write_aclip+CCj
.text:0000EB6B                 mov     esi, esp
.text:0000EB6D                 mov     ecx, [ebp+hMem]
.text:0000EB70                 push    ecx             ; hMem
.text:0000EB71                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000EB77                 cmp     esi, esp
.text:0000EB79                 call    __RTC_CheckEsp
.text:0000EB7E
.text:0000EB7E loc_EB7E:                               ; CODE XREF: _write_aclip+101j
.text:0000EB7E                 cmp     [ebp+arg_C], 0
.text:0000EB82                 jnz     short loc_EBA3
.text:0000EB84                 mov     esi, esp
.text:0000EB86                 push    0               ; lParam
.text:0000EB88                 push    0               ; wParam
.text:0000EB8A                 push    8002h           ; Msg
.text:0000EB8F                 mov     edx, dword ptr ds:_hwnd
.text:0000EB95                 push    edx             ; hWnd
.text:0000EB96                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000EB9C                 cmp     esi, esp
.text:0000EB9E                 call    __RTC_CheckEsp
.text:0000EBA3
.text:0000EBA3 loc_EBA3:                               ; CODE XREF: _write_aclip+39j
.text:0000EBA3                                         ; _write_aclip+5Aj ...
.text:0000EBA3                 pop     esi
.text:0000EBA4                 add     esp, 8
.text:0000EBA7                 cmp     ebp, esp
.text:0000EBA9                 call    __RTC_CheckEsp
.text:0000EBAE                 mov     esp, ebp
.text:0000EBB0                 pop     ebp
.text:0000EBB1                 retn
.text:0000EBB1 _write_aclip    endp
.text:0000EBB1
.text:0000EBB1 ; ---------------------------------------------------------------------------
.text:0000EBB2                 align 8
.text:0000EBB8
.text:0000EBB8 ; =============== S U B R O U T I N E =======================================
.text:0000EBB8
.text:0000EBB8 ; Attributes: bp-based frame
.text:0000EBB8
.text:0000EBB8 ; int __cdecl write_clip(int, LPCWSTR lpWideCharStr, int, int cchWideChar, int)
.text:0000EBB8                 public _write_clip
.text:0000EBB8 _write_clip     proc near
.text:0000EBB8
.text:0000EBB8 var_6DC         = dword ptr -6DCh
.text:0000EBB8 var_6D8         = dword ptr -6D8h
.text:0000EBB8 var_6D4         = dword ptr -6D4h
.text:0000EBB8 var_6D0         = dword ptr -6D0h
.text:0000EBB8 var_6CC         = dword ptr -6CCh
.text:0000EBB8 var_6C8         = dword ptr -6C8h
.text:0000EBB8 var_6C4         = dword ptr -6C4h
.text:0000EBB8 var_6C0         = dword ptr -6C0h
.text:0000EBB8 var_6B8         = dword ptr -6B8h
.text:0000EBB8 var_29C         = dword ptr -29Ch
.text:0000EBB8 var_298         = dword ptr -298h
.text:0000EBB8 var_294         = dword ptr -294h
.text:0000EBB8 var_290         = dword ptr -290h
.text:0000EBB8 var_28C         = dword ptr -28Ch
.text:0000EBB8 var_288         = dword ptr -288h
.text:0000EBB8 var_284         = dword ptr -284h
.text:0000EBB8 var_280         = dword ptr -280h
.text:0000EBB8 var_278         = byte ptr -278h
.text:0000EBB8 Source          = byte ptr -26Ch
.text:0000EBB8 var_258         = dword ptr -258h
.text:0000EBB8 var_254         = dword ptr -254h
.text:0000EBB8 var_250         = dword ptr -250h
.text:0000EBB8 var_24C         = dword ptr -24Ch
.text:0000EBB8 var_248         = dword ptr -248h
.text:0000EBB8 var_244         = dword ptr -244h
.text:0000EBB8 var_240         = dword ptr -240h
.text:0000EBB8 var_23C         = dword ptr -23Ch
.text:0000EBB8 var_238         = dword ptr -238h
.text:0000EBB8 var_234         = dword ptr -234h
.text:0000EBB8 var_230         = dword ptr -230h
.text:0000EBB8 Dest            = dword ptr -22Ch
.text:0000EBB8 WideCharStr     = word ptr -224h
.text:0000EBB8 var_20          = dword ptr -20h
.text:0000EBB8 lpMultiByteStr  = dword ptr -1Ch
.text:0000EBB8 Dst             = dword ptr -18h
.text:0000EBB8 dwBytes         = dword ptr -14h
.text:0000EBB8 var_10          = dword ptr -10h
.text:0000EBB8 var_C           = dword ptr -0Ch
.text:0000EBB8 hMem            = dword ptr -8
.text:0000EBB8 var_4           = dword ptr -4
.text:0000EBB8 lpWideCharStr   = dword ptr  0Ch
.text:0000EBB8 arg_8           = dword ptr  10h
.text:0000EBB8 cchWideChar     = dword ptr  14h
.text:0000EBB8 arg_10          = dword ptr  18h
.text:0000EBB8
.text:0000EBB8                 push    ebp
.text:0000EBB9                 mov     ebp, esp
.text:0000EBBB                 sub     esp, 6DCh
.text:0000EBC1                 push    esi
.text:0000EBC2                 push    edi
.text:0000EBC3                 lea     edi, [ebp+var_6DC]
.text:0000EBC9                 mov     ecx, 1B7h
.text:0000EBCE                 mov     eax, 0CCCCCCCCh
.text:0000EBD3                 rep stosd
.text:0000EBD5                 mov     eax, dword ptr ds:___security_cookie
.text:0000EBDA                 xor     eax, ebp
.text:0000EBDC                 mov     [ebp+var_4], eax
.text:0000EBDF                 mov     esi, esp
.text:0000EBE1                 push    0               ; lpUsedDefaultChar
.text:0000EBE3                 push    0               ; lpDefaultChar
.text:0000EBE5                 push    0               ; cbMultiByte
.text:0000EBE7                 push    0               ; lpMultiByteStr
.text:0000EBE9                 mov     eax, [ebp+cchWideChar]
.text:0000EBEC                 push    eax             ; cchWideChar
.text:0000EBED                 mov     ecx, [ebp+lpWideCharStr]
.text:0000EBF0                 push    ecx             ; lpWideCharStr
.text:0000EBF1                 push    0               ; dwFlags
.text:0000EBF3                 push    0               ; CodePage
.text:0000EBF5                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text:0000EBFB                 cmp     esi, esp
.text:0000EBFD                 call    __RTC_CheckEsp
.text:0000EC02                 mov     [ebp+dwBytes], eax
.text:0000EC05                 mov     edx, [ebp+cchWideChar]
.text:0000EC08                 shl     edx, 1
.text:0000EC0A                 mov     esi, esp
.text:0000EC0C                 push    edx             ; dwBytes
.text:0000EC0D                 push    2002h           ; uFlags
.text:0000EC12                 call    dword ptr ds:__imp__GlobalAlloc@8 ; GlobalAlloc(x,x)
.text:0000EC18                 cmp     esi, esp
.text:0000EC1A                 call    __RTC_CheckEsp
.text:0000EC1F                 mov     [ebp+hMem], eax
.text:0000EC22                 mov     esi, esp
.text:0000EC24                 mov     eax, [ebp+dwBytes]
.text:0000EC27                 push    eax             ; dwBytes
.text:0000EC28                 push    2002h           ; uFlags
.text:0000EC2D                 call    dword ptr ds:__imp__GlobalAlloc@8 ; GlobalAlloc(x,x)
.text:0000EC33                 cmp     esi, esp
.text:0000EC35                 call    __RTC_CheckEsp
.text:0000EC3A                 mov     [ebp+var_C], eax
.text:0000EC3D                 cmp     [ebp+hMem], 0
.text:0000EC41                 jz      short loc_EC49
.text:0000EC43                 cmp     [ebp+var_C], 0
.text:0000EC47                 jnz     short loc_EC80
.text:0000EC49
.text:0000EC49 loc_EC49:                               ; CODE XREF: _write_clip+89j
.text:0000EC49                 cmp     [ebp+hMem], 0
.text:0000EC4D                 jz      short loc_EC62
.text:0000EC4F                 mov     esi, esp
.text:0000EC51                 mov     ecx, [ebp+hMem]
.text:0000EC54                 push    ecx             ; hMem
.text:0000EC55                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000EC5B                 cmp     esi, esp
.text:0000EC5D                 call    __RTC_CheckEsp
.text:0000EC62
.text:0000EC62 loc_EC62:                               ; CODE XREF: _write_clip+95j
.text:0000EC62                 cmp     [ebp+var_C], 0
.text:0000EC66                 jz      short loc_EC7B
.text:0000EC68                 mov     esi, esp
.text:0000EC6A                 mov     edx, [ebp+var_C]
.text:0000EC6D                 push    edx             ; hMem
.text:0000EC6E                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000EC74                 cmp     esi, esp
.text:0000EC76                 call    __RTC_CheckEsp
.text:0000EC7B
.text:0000EC7B loc_EC7B:                               ; CODE XREF: _write_clip+AEj
.text:0000EC7B                 jmp     loc_FD04
.text:0000EC80 ; ---------------------------------------------------------------------------
.text:0000EC80
.text:0000EC80 loc_EC80:                               ; CODE XREF: _write_clip+8Fj
.text:0000EC80                 mov     esi, esp
.text:0000EC82                 mov     eax, [ebp+hMem]
.text:0000EC85                 push    eax             ; hMem
.text:0000EC86                 call    dword ptr ds:__imp__GlobalLock@4 ; GlobalLock(x)
.text:0000EC8C                 cmp     esi, esp
.text:0000EC8E                 call    __RTC_CheckEsp
.text:0000EC93                 mov     [ebp+Dst], eax
.text:0000EC96                 cmp     [ebp+Dst], 0
.text:0000EC9A                 jnz     short loc_ECC7
.text:0000EC9C                 mov     esi, esp
.text:0000EC9E                 mov     ecx, [ebp+hMem]
.text:0000ECA1                 push    ecx             ; hMem
.text:0000ECA2                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000ECA8                 cmp     esi, esp
.text:0000ECAA                 call    __RTC_CheckEsp
.text:0000ECAF                 mov     esi, esp
.text:0000ECB1                 mov     edx, [ebp+var_C]
.text:0000ECB4                 push    edx             ; hMem
.text:0000ECB5                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000ECBB                 cmp     esi, esp
.text:0000ECBD                 call    __RTC_CheckEsp
.text:0000ECC2                 jmp     loc_FD04
.text:0000ECC7 ; ---------------------------------------------------------------------------
.text:0000ECC7
.text:0000ECC7 loc_ECC7:                               ; CODE XREF: _write_clip+E2j
.text:0000ECC7                 mov     esi, esp
.text:0000ECC9                 mov     eax, [ebp+var_C]
.text:0000ECCC                 push    eax             ; hMem
.text:0000ECCD                 call    dword ptr ds:__imp__GlobalLock@4 ; GlobalLock(x)
.text:0000ECD3                 cmp     esi, esp
.text:0000ECD5                 call    __RTC_CheckEsp
.text:0000ECDA                 mov     [ebp+lpMultiByteStr], eax
.text:0000ECDD                 cmp     [ebp+lpMultiByteStr], 0
.text:0000ECE1                 jnz     short loc_ED21
.text:0000ECE3                 mov     esi, esp
.text:0000ECE5                 mov     ecx, [ebp+hMem]
.text:0000ECE8                 push    ecx             ; hMem
.text:0000ECE9                 call    dword ptr ds:__imp__GlobalUnlock@4 ; GlobalUnlock(x)
.text:0000ECEF                 cmp     esi, esp
.text:0000ECF1                 call    __RTC_CheckEsp
.text:0000ECF6                 mov     esi, esp
.text:0000ECF8                 mov     edx, [ebp+hMem]
.text:0000ECFB                 push    edx             ; hMem
.text:0000ECFC                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000ED02                 cmp     esi, esp
.text:0000ED04                 call    __RTC_CheckEsp
.text:0000ED09                 mov     esi, esp
.text:0000ED0B                 mov     eax, [ebp+var_C]
.text:0000ED0E                 push    eax             ; hMem
.text:0000ED0F                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000ED15                 cmp     esi, esp
.text:0000ED17                 call    __RTC_CheckEsp
.text:0000ED1C                 jmp     loc_FD04
.text:0000ED21 ; ---------------------------------------------------------------------------
.text:0000ED21
.text:0000ED21 loc_ED21:                               ; CODE XREF: _write_clip+129j
.text:0000ED21                 mov     ecx, [ebp+cchWideChar]
.text:0000ED24                 shl     ecx, 1
.text:0000ED26                 push    ecx             ; Size
.text:0000ED27                 mov     edx, [ebp+lpWideCharStr]
.text:0000ED2A                 push    edx             ; Src
.text:0000ED2B                 mov     eax, [ebp+Dst]
.text:0000ED2E                 push    eax             ; Dst
.text:0000ED2F                 call    _memcpy
.text:0000ED34                 add     esp, 0Ch
.text:0000ED37                 mov     esi, esp
.text:0000ED39                 push    0               ; lpUsedDefaultChar
.text:0000ED3B                 push    0               ; lpDefaultChar
.text:0000ED3D                 mov     ecx, [ebp+dwBytes]
.text:0000ED40                 push    ecx             ; cbMultiByte
.text:0000ED41                 mov     edx, [ebp+lpMultiByteStr]
.text:0000ED44                 push    edx             ; lpMultiByteStr
.text:0000ED45                 mov     eax, [ebp+cchWideChar]
.text:0000ED48                 push    eax             ; cchWideChar
.text:0000ED49                 mov     ecx, [ebp+lpWideCharStr]
.text:0000ED4C                 push    ecx             ; lpWideCharStr
.text:0000ED4D                 push    0               ; dwFlags
.text:0000ED4F                 push    0               ; CodePage
.text:0000ED51                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text:0000ED57                 cmp     esi, esp
.text:0000ED59                 call    __RTC_CheckEsp
.text:0000ED5E                 push    88h ; 'ê'
.text:0000ED63                 mov     edx, dword ptr ds:_conf
.text:0000ED69                 push    edx
.text:0000ED6A                 call    _conf_get_int
.text:0000ED6F                 add     esp, 8
.text:0000ED72                 test    eax, eax
.text:0000ED74                 jz      loc_FBD7
.text:0000ED7A                 mov     [ebp+Dest], 0
.text:0000ED84                 mov     eax, [ebp+lpMultiByteStr]
.text:0000ED87                 mov     [ebp+var_230], eax
.text:0000ED8D                 mov     ecx, [ebp+Dst]
.text:0000ED90                 mov     [ebp+var_234], ecx
.text:0000ED96                 mov     [ebp+var_238], 0
.text:0000EDA0                 mov     [ebp+var_23C], 0
.text:0000EDAA                 mov     [ebp+var_240], 0
.text:0000EDB4                 mov     [ebp+var_244], 0
.text:0000EDBE                 mov     [ebp+var_284], 0
.text:0000EDC8                 mov     [ebp+var_28C], 0
.text:0000EDD2                 mov     [ebp+var_294], 0
.text:0000EDDC                 mov     [ebp+var_29C], 0
.text:0000EDE6                 push    70h ; 'p'
.text:0000EDE8                 mov     edx, dword ptr ds:_conf
.text:0000EDEE                 push    edx
.text:0000EDEF                 call    _conf_get_fontspec
.text:0000EDF4                 add     esp, 8
.text:0000EDF7                 mov     [ebp+var_6C4], eax
.text:0000EDFD                 push    0
.text:0000EDFF                 lea     eax, [ebp+WideCharStr]
.text:0000EE05                 push    eax
.text:0000EE06                 push    0
.text:0000EE08                 call    _get_unitab
.text:0000EE0D                 add     esp, 0Ch
.text:0000EE10                 mov     ecx, [ebp+var_6C4]
.text:0000EE16                 mov     edx, [ecx]
.text:0000EE18                 push    edx             ; Str
.text:0000EE19                 call    _strlen
.text:0000EE1E                 add     esp, 4
.text:0000EE21                 add     eax, 64h ; 'd'
.text:0000EE24                 mov     [ebp+var_244], eax
.text:0000EE2A                 push    1
.text:0000EE2C                 mov     eax, [ebp+var_244]
.text:0000EE32                 push    eax
.text:0000EE33                 call    _safemalloc
.text:0000EE38                 add     esp, 8
.text:0000EE3B                 mov     [ebp+Dest], eax
.text:0000EE41                 mov     ecx, [ebp+var_6C4]
.text:0000EE47                 mov     edx, [ecx+8]
.text:0000EE4A                 shl     edx, 1
.text:0000EE4C                 push    edx
.text:0000EE4D                 mov     eax, [ebp+var_6C4]
.text:0000EE53                 mov     ecx, [eax]
.text:0000EE55                 push    ecx
.text:0000EE56                 push    offset $SG91248 ; "{\\rtf1\\ansi\\deff0{\\fonttbl\\f0\\fmo"...
.text:0000EE5B                 mov     edx, [ebp+Dest]
.text:0000EE61                 push    edx             ; Dest
.text:0000EE62                 call    _sprintf
.text:0000EE67                 add     esp, 10h
.text:0000EE6A                 mov     [ebp+var_238], eax
.text:0000EE70                 cmp     [ebp+arg_8], 0
.text:0000EE74                 jz      loc_F175
.text:0000EE7A                 push    418h            ; Size
.text:0000EE7F                 push    0               ; Val
.text:0000EE81                 lea     eax, [ebp+var_6B8]
.text:0000EE87                 push    eax             ; Dst
.text:0000EE88                 call    _memset_0
.text:0000EE8D                 add     esp, 0Ch
.text:0000EE90                 mov     [ebp+var_258], 0
.text:0000EE9A                 jmp     short loc_EEAB
.text:0000EE9C ; ---------------------------------------------------------------------------
.text:0000EE9C
.text:0000EE9C loc_EE9C:                               ; CODE XREF: _write_clip+445j
.text:0000EE9C                 mov     ecx, [ebp+var_258]
.text:0000EEA2                 add     ecx, 1
.text:0000EEA5                 mov     [ebp+var_258], ecx
.text:0000EEAB
.text:0000EEAB loc_EEAB:                               ; CODE XREF: _write_clip+2E2j
.text:0000EEAB                 mov     edx, [ebp+cchWideChar]
.text:0000EEAE                 sub     edx, 1
.text:0000EEB1                 cmp     [ebp+var_258], edx
.text:0000EEB7                 jge     loc_F002
.text:0000EEBD                 mov     eax, [ebp+var_258]
.text:0000EEC3                 mov     ecx, [ebp+arg_8]
.text:0000EEC6                 mov     edx, [ecx+eax*4]
.text:0000EEC9                 and     edx, 1FFh
.text:0000EECF                 mov     [ebp+var_280], edx
.text:0000EED5                 mov     eax, [ebp+var_258]
.text:0000EEDB                 mov     ecx, [ebp+arg_8]
.text:0000EEDE                 mov     edx, [ecx+eax*4]
.text:0000EEE1                 and     edx, 3FE00h
.text:0000EEE7                 shr     edx, 9
.text:0000EEEA                 mov     [ebp+var_288], edx
.text:0000EEF0                 mov     eax, [ebp+var_258]
.text:0000EEF6                 mov     ecx, [ebp+arg_8]
.text:0000EEF9                 mov     edx, [ecx+eax*4]
.text:0000EEFC                 and     edx, 100000h
.text:0000EF02                 jz      short loc_EF28
.text:0000EF04                 mov     eax, [ebp+var_280]
.text:0000EF0A                 mov     [ebp+var_6C8], eax
.text:0000EF10                 mov     ecx, [ebp+var_288]
.text:0000EF16                 mov     [ebp+var_280], ecx
.text:0000EF1C                 mov     edx, [ebp+var_6C8]
.text:0000EF22                 mov     [ebp+var_288], edx
.text:0000EF28
.text:0000EF28 loc_EF28:                               ; CODE XREF: _write_clip+34Aj
.text:0000EF28                 cmp     ds:_bold_colours, 0
.text:0000EF2F                 jz      short loc_EF7A
.text:0000EF31                 mov     eax, [ebp+var_258]
.text:0000EF37                 mov     ecx, [ebp+arg_8]
.text:0000EF3A                 mov     edx, [ecx+eax*4]
.text:0000EF3D                 and     edx, 40000h
.text:0000EF43                 jz      short loc_EF7A
.text:0000EF45                 cmp     [ebp+var_280], 8
.text:0000EF4C                 jge     short loc_EF5F
.text:0000EF4E                 mov     eax, [ebp+var_280]
.text:0000EF54                 add     eax, 8
.text:0000EF57                 mov     [ebp+var_280], eax
.text:0000EF5D                 jmp     short loc_EF7A
.text:0000EF5F ; ---------------------------------------------------------------------------
.text:0000EF5F
.text:0000EF5F loc_EF5F:                               ; CODE XREF: _write_clip+394j
.text:0000EF5F                 cmp     [ebp+var_280], 100h
.text:0000EF69                 jl      short loc_EF7A
.text:0000EF6B                 mov     ecx, [ebp+var_280]
.text:0000EF71                 add     ecx, 1
.text:0000EF74                 mov     [ebp+var_280], ecx
.text:0000EF7A
.text:0000EF7A loc_EF7A:                               ; CODE XREF: _write_clip+377j
.text:0000EF7A                                         ; _write_clip+38Bj ...
.text:0000EF7A                 mov     edx, [ebp+var_258]
.text:0000EF80                 mov     eax, [ebp+arg_8]
.text:0000EF83                 mov     ecx, [eax+edx*4]
.text:0000EF86                 and     ecx, 200000h
.text:0000EF8C                 jz      short loc_EFC3
.text:0000EF8E                 cmp     [ebp+var_288], 8
.text:0000EF95                 jge     short loc_EFA8
.text:0000EF97                 mov     edx, [ebp+var_288]
.text:0000EF9D                 add     edx, 8
.text:0000EFA0                 mov     [ebp+var_288], edx
.text:0000EFA6                 jmp     short loc_EFC3
.text:0000EFA8 ; ---------------------------------------------------------------------------
.text:0000EFA8
.text:0000EFA8 loc_EFA8:                               ; CODE XREF: _write_clip+3DDj
.text:0000EFA8                 cmp     [ebp+var_288], 100h
.text:0000EFB2                 jl      short loc_EFC3
.text:0000EFB4                 mov     eax, [ebp+var_288]
.text:0000EFBA                 add     eax, 1
.text:0000EFBD                 mov     [ebp+var_288], eax
.text:0000EFC3
.text:0000EFC3 loc_EFC3:                               ; CODE XREF: _write_clip+3D4j
.text:0000EFC3                                         ; _write_clip+3EEj ...
.text:0000EFC3                 mov     ecx, [ebp+var_280]
.text:0000EFC9                 mov     edx, [ebp+ecx*4+var_6B8]
.text:0000EFD0                 add     edx, 1
.text:0000EFD3                 mov     eax, [ebp+var_280]
.text:0000EFD9                 mov     [ebp+eax*4+var_6B8], edx
.text:0000EFE0                 mov     ecx, [ebp+var_288]
.text:0000EFE6                 mov     edx, [ebp+ecx*4+var_6B8]
.text:0000EFED                 add     edx, 1
.text:0000EFF0                 mov     eax, [ebp+var_288]
.text:0000EFF6                 mov     [ebp+eax*4+var_6B8], edx
.text:0000EFFD                 jmp     loc_EE9C
.text:0000F002 ; ---------------------------------------------------------------------------
.text:0000F002
.text:0000F002 loc_F002:                               ; CODE XREF: _write_clip+2FFj
.text:0000F002                 mov     [ebp+var_6C0], 0
.text:0000F00C                 mov     [ebp+var_258], 0
.text:0000F016                 jmp     short loc_F027
.text:0000F018 ; ---------------------------------------------------------------------------
.text:0000F018
.text:0000F018 loc_F018:                               ; CODE XREF: _write_clip:loc_F065j
.text:0000F018                 mov     ecx, [ebp+var_258]
.text:0000F01E                 add     ecx, 1
.text:0000F021                 mov     [ebp+var_258], ecx
.text:0000F027
.text:0000F027 loc_F027:                               ; CODE XREF: _write_clip+45Ej
.text:0000F027                 cmp     [ebp+var_258], 106h
.text:0000F031                 jge     short loc_F067
.text:0000F033                 mov     edx, [ebp+var_258]
.text:0000F039                 cmp     [ebp+edx*4+var_6B8], 0
.text:0000F041                 jz      short loc_F065
.text:0000F043                 mov     eax, [ebp+var_6C0]
.text:0000F049                 add     eax, 1
.text:0000F04C                 mov     [ebp+var_6C0], eax
.text:0000F052                 mov     ecx, [ebp+var_258]
.text:0000F058                 mov     edx, [ebp+var_6C0]
.text:0000F05E                 mov     [ebp+ecx*4+var_6B8], edx
.text:0000F065
.text:0000F065 loc_F065:                               ; CODE XREF: _write_clip+489j
.text:0000F065                 jmp     short loc_F018
.text:0000F067 ; ---------------------------------------------------------------------------
.text:0000F067
.text:0000F067 loc_F067:                               ; CODE XREF: _write_clip+479j
.text:0000F067                 push    1
.text:0000F069                 mov     eax, [ebp+var_6C0]
.text:0000F06F                 imul    eax, 19h
.text:0000F072                 add     eax, [ebp+var_244]
.text:0000F078                 push    eax
.text:0000F079                 mov     ecx, [ebp+Dest]
.text:0000F07F                 push    ecx
.text:0000F080                 call    _saferealloc
.text:0000F085                 add     esp, 0Ch
.text:0000F088                 mov     [ebp+Dest], eax
.text:0000F08E                 push    offset $SG91270 ; "{\\colortbl ;"
.text:0000F093                 mov     edx, [ebp+Dest]
.text:0000F099                 push    edx             ; Dest
.text:0000F09A                 call    _strcat
.text:0000F09F                 add     esp, 8
.text:0000F0A2                 mov     eax, [ebp+Dest]
.text:0000F0A8                 push    eax             ; Str
.text:0000F0A9                 call    _strlen
.text:0000F0AE                 add     esp, 4
.text:0000F0B1                 mov     [ebp+var_238], eax
.text:0000F0B7                 mov     [ebp+var_258], 0
.text:0000F0C1                 jmp     short loc_F0D2
.text:0000F0C3 ; ---------------------------------------------------------------------------
.text:0000F0C3
.text:0000F0C3 loc_F0C3:                               ; CODE XREF: _write_clip:loc_F147j
.text:0000F0C3                 mov     ecx, [ebp+var_258]
.text:0000F0C9                 add     ecx, 1
.text:0000F0CC                 mov     [ebp+var_258], ecx
.text:0000F0D2
.text:0000F0D2 loc_F0D2:                               ; CODE XREF: _write_clip+509j
.text:0000F0D2                 cmp     [ebp+var_258], 106h
.text:0000F0DC                 jge     short loc_F14C
.text:0000F0DE                 mov     edx, [ebp+var_258]
.text:0000F0E4                 cmp     [ebp+edx*4+var_6B8], 0
.text:0000F0EC                 jz      short loc_F147
.text:0000F0EE                 mov     eax, [ebp+var_258]
.text:0000F0F4                 imul    eax, 3
.text:0000F0F7                 movzx   ecx, ds:_defpal[eax]
.text:0000F0FE                 push    ecx
.text:0000F0FF                 mov     edx, [ebp+var_258]
.text:0000F105                 imul    edx, 3
.text:0000F108                 movzx   eax, ds:byte_281[edx]
.text:0000F10F                 push    eax
.text:0000F110                 mov     ecx, [ebp+var_258]
.text:0000F116                 imul    ecx, 3
.text:0000F119                 movzx   edx, ds:byte_282[ecx]
.text:0000F120                 push    edx
.text:0000F121                 push    offset $SG91275 ; "\\red%d\\green%d\\blue%d;"
.text:0000F126                 mov     eax, [ebp+Dest]
.text:0000F12C                 add     eax, [ebp+var_238]
.text:0000F132                 push    eax             ; Dest
.text:0000F133                 call    _sprintf
.text:0000F138                 add     esp, 14h
.text:0000F13B                 add     eax, [ebp+var_238]
.text:0000F141                 mov     [ebp+var_238], eax
.text:0000F147
.text:0000F147 loc_F147:                               ; CODE XREF: _write_clip+534j
.text:0000F147                 jmp     loc_F0C3
.text:0000F14C ; ---------------------------------------------------------------------------
.text:0000F14C
.text:0000F14C loc_F14C:                               ; CODE XREF: _write_clip+524j
.text:0000F14C                 push    offset $SG91276 ; Source
.text:0000F151                 mov     ecx, [ebp+Dest]
.text:0000F157                 add     ecx, [ebp+var_238]
.text:0000F15D                 push    ecx             ; Dest
.text:0000F15E                 call    _strcpy
.text:0000F163                 add     esp, 8
.text:0000F166                 mov     edx, [ebp+var_238]
.text:0000F16C                 add     edx, 1
.text:0000F16F                 mov     [ebp+var_238], edx
.text:0000F175
.text:0000F175 loc_F175:                               ; CODE XREF: _write_clip+2BCj
.text:0000F175                                         ; _write_clip+F42j
.text:0000F175                 mov     eax, [ebp+var_240]
.text:0000F17B                 cmp     eax, [ebp+dwBytes]
.text:0000F17E                 jge     loc_FAFF
.text:0000F184                 mov     ecx, [ebp+var_23C]
.text:0000F18A                 cmp     ecx, [ebp+cchWideChar]
.text:0000F18D                 jge     loc_FAFF
.text:0000F193                 mov     edx, [ebp+var_230]
.text:0000F199                 add     edx, [ebp+var_240]
.text:0000F19F                 movzx   eax, byte ptr [edx]
.text:0000F1A2                 test    eax, eax
.text:0000F1A4                 jz      loc_FAFF
.text:0000F1AA                 mov     ecx, [ebp+var_23C]
.text:0000F1B0                 mov     edx, [ebp+var_234]
.text:0000F1B6                 movzx   eax, word ptr [edx+ecx*2]
.text:0000F1BA                 test    eax, eax
.text:0000F1BC                 jz      loc_FAFF
.text:0000F1C2                 mov     ecx, [ebp+var_240]
.text:0000F1C8                 add     ecx, 1
.text:0000F1CB                 cmp     ecx, [ebp+dwBytes]
.text:0000F1CE                 jge     short loc_F217
.text:0000F1D0                 mov     edx, [ebp+var_230]
.text:0000F1D6                 add     edx, [ebp+var_240]
.text:0000F1DC                 movzx   eax, byte ptr [edx]
.text:0000F1DF                 cmp     eax, 0Dh
.text:0000F1E2                 jnz     short loc_F217
.text:0000F1E4                 mov     ecx, [ebp+var_230]
.text:0000F1EA                 add     ecx, [ebp+var_240]
.text:0000F1F0                 movzx   edx, byte ptr [ecx+1]
.text:0000F1F4                 cmp     edx, 0Ah
.text:0000F1F7                 jnz     short loc_F217
.text:0000F1F9                 mov     eax, [ebp+var_240]
.text:0000F1FF                 add     eax, 1
.text:0000F202                 mov     [ebp+var_240], eax
.text:0000F208                 mov     ecx, [ebp+var_23C]
.text:0000F20E                 add     ecx, 1
.text:0000F211                 mov     [ebp+var_23C], ecx
.text:0000F217
.text:0000F217 loc_F217:                               ; CODE XREF: _write_clip+616j
.text:0000F217                                         ; _write_clip+62Aj ...
.text:0000F217                 cmp     [ebp+arg_8], 0
.text:0000F21B                 jz      loc_F5BA
.text:0000F221                 mov     edx, [ebp+var_238]
.text:0000F227                 add     edx, 40h ; '@'
.text:0000F22A                 cmp     [ebp+var_244], edx
.text:0000F230                 jge     short loc_F261
.text:0000F232                 mov     eax, [ebp+var_238]
.text:0000F238                 add     eax, 200h
.text:0000F23D                 mov     [ebp+var_244], eax
.text:0000F243                 push    1
.text:0000F245                 mov     ecx, [ebp+var_244]
.text:0000F24B                 push    ecx
.text:0000F24C                 mov     edx, [ebp+Dest]
.text:0000F252                 push    edx
.text:0000F253                 call    _saferealloc
.text:0000F258                 add     esp, 0Ch
.text:0000F25B                 mov     [ebp+Dest], eax
.text:0000F261
.text:0000F261 loc_F261:                               ; CODE XREF: _write_clip+678j
.text:0000F261                 mov     eax, [ebp+var_240]
.text:0000F267                 mov     ecx, [ebp+arg_8]
.text:0000F26A                 mov     edx, [ecx+eax*4]
.text:0000F26D                 and     edx, 1FFh
.text:0000F273                 mov     [ebp+var_280], edx
.text:0000F279                 mov     eax, [ebp+var_240]
.text:0000F27F                 mov     ecx, [ebp+arg_8]
.text:0000F282                 mov     edx, [ecx+eax*4]
.text:0000F285                 and     edx, 3FE00h
.text:0000F28B                 shr     edx, 9
.text:0000F28E                 mov     [ebp+var_288], edx
.text:0000F294                 mov     eax, [ebp+var_240]
.text:0000F29A                 mov     ecx, [ebp+arg_8]
.text:0000F29D                 mov     edx, [ecx+eax*4]
.text:0000F2A0                 and     edx, 100000h
.text:0000F2A6                 jz      short loc_F2CC
.text:0000F2A8                 mov     eax, [ebp+var_280]
.text:0000F2AE                 mov     [ebp+var_6CC], eax
.text:0000F2B4                 mov     ecx, [ebp+var_288]
.text:0000F2BA                 mov     [ebp+var_280], ecx
.text:0000F2C0                 mov     edx, [ebp+var_6CC]
.text:0000F2C6                 mov     [ebp+var_288], edx
.text:0000F2CC
.text:0000F2CC loc_F2CC:                               ; CODE XREF: _write_clip+6EEj
.text:0000F2CC                 cmp     ds:_bold_colours, 0
.text:0000F2D3                 jz      short loc_F31E
.text:0000F2D5                 mov     eax, [ebp+var_240]
.text:0000F2DB                 mov     ecx, [ebp+arg_8]
.text:0000F2DE                 mov     edx, [ecx+eax*4]
.text:0000F2E1                 and     edx, 40000h
.text:0000F2E7                 jz      short loc_F31E
.text:0000F2E9                 cmp     [ebp+var_280], 8
.text:0000F2F0                 jge     short loc_F303
.text:0000F2F2                 mov     eax, [ebp+var_280]
.text:0000F2F8                 add     eax, 8
.text:0000F2FB                 mov     [ebp+var_280], eax
.text:0000F301                 jmp     short loc_F31E
.text:0000F303 ; ---------------------------------------------------------------------------
.text:0000F303
.text:0000F303 loc_F303:                               ; CODE XREF: _write_clip+738j
.text:0000F303                 cmp     [ebp+var_280], 100h
.text:0000F30D                 jl      short loc_F31E
.text:0000F30F                 mov     ecx, [ebp+var_280]
.text:0000F315                 add     ecx, 1
.text:0000F318                 mov     [ebp+var_280], ecx
.text:0000F31E
.text:0000F31E loc_F31E:                               ; CODE XREF: _write_clip+71Bj
.text:0000F31E                                         ; _write_clip+72Fj ...
.text:0000F31E                 mov     edx, [ebp+var_240]
.text:0000F324                 mov     eax, [ebp+arg_8]
.text:0000F327                 mov     ecx, [eax+edx*4]
.text:0000F32A                 and     ecx, 200000h
.text:0000F330                 jz      short loc_F367
.text:0000F332                 cmp     [ebp+var_288], 8
.text:0000F339                 jge     short loc_F34C
.text:0000F33B                 mov     edx, [ebp+var_288]
.text:0000F341                 add     edx, 8
.text:0000F344                 mov     [ebp+var_288], edx
.text:0000F34A                 jmp     short loc_F367
.text:0000F34C ; ---------------------------------------------------------------------------
.text:0000F34C
.text:0000F34C loc_F34C:                               ; CODE XREF: _write_clip+781j
.text:0000F34C                 cmp     [ebp+var_288], 100h
.text:0000F356                 jl      short loc_F367
.text:0000F358                 mov     eax, [ebp+var_288]
.text:0000F35E                 add     eax, 1
.text:0000F361                 mov     [ebp+var_288], eax
.text:0000F367
.text:0000F367 loc_F367:                               ; CODE XREF: _write_clip+778j
.text:0000F367                                         ; _write_clip+792j ...
.text:0000F367                 cmp     ds:_bold_font_mode, 0
.text:0000F36E                 jz      short loc_F389
.text:0000F370                 mov     ecx, [ebp+var_240]
.text:0000F376                 mov     edx, [ebp+arg_8]
.text:0000F379                 mov     eax, [edx+ecx*4]
.text:0000F37C                 and     eax, 40000h
.text:0000F381                 mov     [ebp+var_290], eax
.text:0000F387                 jmp     short loc_F393
.text:0000F389 ; ---------------------------------------------------------------------------
.text:0000F389
.text:0000F389 loc_F389:                               ; CODE XREF: _write_clip+7B6j
.text:0000F389                 mov     [ebp+var_290], 0
.text:0000F393
.text:0000F393 loc_F393:                               ; CODE XREF: _write_clip+7CFj
.text:0000F393                 mov     ecx, [ebp+var_240]
.text:0000F399                 mov     edx, [ebp+arg_8]
.text:0000F39C                 mov     eax, [edx+ecx*4]
.text:0000F39F                 and     eax, 80000h
.text:0000F3A4                 mov     [ebp+var_298], eax
.text:0000F3AA                 mov     ecx, [ebp+var_240]
.text:0000F3B0                 mov     edx, [ebp+arg_8]
.text:0000F3B3                 mov     eax, [edx+ecx*4]
.text:0000F3B6                 and     eax, 100000h
.text:0000F3BB                 jnz     short loc_F410
.text:0000F3BD                 cmp     [ebp+var_288], 100h
.text:0000F3C7                 jl      short loc_F3D3
.text:0000F3C9                 mov     [ebp+var_288], 0FFFFFFFFh
.text:0000F3D3
.text:0000F3D3 loc_F3D3:                               ; CODE XREF: _write_clip+80Fj
.text:0000F3D3                 cmp     [ebp+var_280], 100h
.text:0000F3DD                 jl      short loc_F410
.text:0000F3DF                 cmp     ds:_bold_colours, 0
.text:0000F3E6                 jz      short loc_F406
.text:0000F3E8                 mov     ecx, [ebp+var_280]
.text:0000F3EE                 and     ecx, 1
.text:0000F3F1                 jz      short loc_F406
.text:0000F3F3                 cmp     [ebp+var_288], 0FFFFFFFFh
.text:0000F3FA                 jnz     short loc_F406
.text:0000F3FC                 mov     [ebp+var_290], 40000h
.text:0000F406
.text:0000F406 loc_F406:                               ; CODE XREF: _write_clip+82Ej
.text:0000F406                                         ; _write_clip+839j ...
.text:0000F406                 mov     [ebp+var_280], 0FFFFFFFFh
.text:0000F410
.text:0000F410 loc_F410:                               ; CODE XREF: _write_clip+803j
.text:0000F410                                         ; _write_clip+825j
.text:0000F410                 mov     edx, [ebp+var_284]
.text:0000F416                 cmp     edx, [ebp+var_280]
.text:0000F41C                 jz      short loc_F47F
.text:0000F41E                 mov     eax, [ebp+var_280]
.text:0000F424                 mov     [ebp+var_284], eax
.text:0000F42A                 cmp     [ebp+var_280], 0
.text:0000F431                 jl      short loc_F448
.text:0000F433                 mov     ecx, [ebp+var_280]
.text:0000F439                 mov     edx, [ebp+ecx*4+var_6B8]
.text:0000F440                 mov     [ebp+var_6D0], edx
.text:0000F446                 jmp     short loc_F452
.text:0000F448 ; ---------------------------------------------------------------------------
.text:0000F448
.text:0000F448 loc_F448:                               ; CODE XREF: _write_clip+879j
.text:0000F448                 mov     [ebp+var_6D0], 0
.text:0000F452
.text:0000F452 loc_F452:                               ; CODE XREF: _write_clip+88Ej
.text:0000F452                 mov     eax, [ebp+var_6D0]
.text:0000F458                 push    eax
.text:0000F459                 push    offset $SG91303 ; "\\cf%d "
.text:0000F45E                 mov     ecx, [ebp+Dest]
.text:0000F464                 add     ecx, [ebp+var_238]
.text:0000F46A                 push    ecx             ; Dest
.text:0000F46B                 call    _sprintf
.text:0000F470                 add     esp, 0Ch
.text:0000F473                 add     eax, [ebp+var_238]
.text:0000F479                 mov     [ebp+var_238], eax
.text:0000F47F
.text:0000F47F loc_F47F:                               ; CODE XREF: _write_clip+864j
.text:0000F47F                 mov     edx, [ebp+var_28C]
.text:0000F485                 cmp     edx, [ebp+var_288]
.text:0000F48B                 jz      short loc_F4EE
.text:0000F48D                 mov     eax, [ebp+var_288]
.text:0000F493                 mov     [ebp+var_28C], eax
.text:0000F499                 cmp     [ebp+var_288], 0
.text:0000F4A0                 jl      short loc_F4B7
.text:0000F4A2                 mov     ecx, [ebp+var_288]
.text:0000F4A8                 mov     edx, [ebp+ecx*4+var_6B8]
.text:0000F4AF                 mov     [ebp+var_6D4], edx
.text:0000F4B5                 jmp     short loc_F4C1
.text:0000F4B7 ; ---------------------------------------------------------------------------
.text:0000F4B7
.text:0000F4B7 loc_F4B7:                               ; CODE XREF: _write_clip+8E8j
.text:0000F4B7                 mov     [ebp+var_6D4], 0
.text:0000F4C1
.text:0000F4C1 loc_F4C1:                               ; CODE XREF: _write_clip+8FDj
.text:0000F4C1                 mov     eax, [ebp+var_6D4]
.text:0000F4C7                 push    eax
.text:0000F4C8                 push    offset $SG91305 ; "\\highlight%d "
.text:0000F4CD                 mov     ecx, [ebp+Dest]
.text:0000F4D3                 add     ecx, [ebp+var_238]
.text:0000F4D9                 push    ecx             ; Dest
.text:0000F4DA                 call    _sprintf
.text:0000F4DF                 add     esp, 0Ch
.text:0000F4E2                 add     eax, [ebp+var_238]
.text:0000F4E8                 mov     [ebp+var_238], eax
.text:0000F4EE
.text:0000F4EE loc_F4EE:                               ; CODE XREF: _write_clip+8D3j
.text:0000F4EE                 mov     edx, [ebp+var_294]
.text:0000F4F4                 cmp     edx, [ebp+var_290]
.text:0000F4FA                 jz      short loc_F554
.text:0000F4FC                 mov     eax, [ebp+var_290]
.text:0000F502                 mov     [ebp+var_294], eax
.text:0000F508                 cmp     [ebp+var_290], 0
.text:0000F50F                 jz      short loc_F51D
.text:0000F511                 mov     [ebp+var_6D8], offset $SG91307 ; "\\b "
.text:0000F51B                 jmp     short loc_F527
.text:0000F51D ; ---------------------------------------------------------------------------
.text:0000F51D
.text:0000F51D loc_F51D:                               ; CODE XREF: _write_clip+957j
.text:0000F51D                 mov     [ebp+var_6D8], offset $SG91308 ; "\\b0 "
.text:0000F527
.text:0000F527 loc_F527:                               ; CODE XREF: _write_clip+963j
.text:0000F527                 mov     ecx, [ebp+var_6D8]
.text:0000F52D                 push    ecx
.text:0000F52E                 push    offset $SG91309 ; Format
.text:0000F533                 mov     edx, [ebp+Dest]
.text:0000F539                 add     edx, [ebp+var_238]
.text:0000F53F                 push    edx             ; Dest
.text:0000F540                 call    _sprintf
.text:0000F545                 add     esp, 0Ch
.text:0000F548                 add     eax, [ebp+var_238]
.text:0000F54E                 mov     [ebp+var_238], eax
.text:0000F554
.text:0000F554 loc_F554:                               ; CODE XREF: _write_clip+942j
.text:0000F554                 mov     eax, [ebp+var_29C]
.text:0000F55A                 cmp     eax, [ebp+var_298]
.text:0000F560                 jz      short loc_F5BA
.text:0000F562                 mov     ecx, [ebp+var_298]
.text:0000F568                 mov     [ebp+var_29C], ecx
.text:0000F56E                 cmp     [ebp+var_298], 0
.text:0000F575                 jz      short loc_F583
.text:0000F577                 mov     [ebp+var_6DC], offset $SG91311 ; "\\ul "
.text:0000F581                 jmp     short loc_F58D
.text:0000F583 ; ---------------------------------------------------------------------------
.text:0000F583
.text:0000F583 loc_F583:                               ; CODE XREF: _write_clip+9BDj
.text:0000F583                 mov     [ebp+var_6DC], offset $SG91312 ; "\\ulnone "
.text:0000F58D
.text:0000F58D loc_F58D:                               ; CODE XREF: _write_clip+9C9j
.text:0000F58D                 mov     edx, [ebp+var_6DC]
.text:0000F593                 push    edx
.text:0000F594                 push    offset $SG91313 ; Format
.text:0000F599                 mov     eax, [ebp+Dest]
.text:0000F59F                 add     eax, [ebp+var_238]
.text:0000F5A5                 push    eax             ; Dest
.text:0000F5A6                 call    _sprintf
.text:0000F5AB                 add     esp, 0Ch
.text:0000F5AE                 add     eax, [ebp+var_238]
.text:0000F5B4                 mov     [ebp+var_238], eax
.text:0000F5BA
.text:0000F5BA loc_F5BA:                               ; CODE XREF: _write_clip+663j
.text:0000F5BA                                         ; _write_clip+9A8j
.text:0000F5BA                 mov     ecx, [ebp+var_230]
.text:0000F5C0                 add     ecx, [ebp+var_240]
.text:0000F5C6                 movzx   edx, byte ptr [ecx]
.text:0000F5C9                 movzx   eax, [ebp+edx*2+WideCharStr]
.text:0000F5D1                 mov     ecx, [ebp+var_23C]
.text:0000F5D7                 mov     edx, [ebp+var_234]
.text:0000F5DD                 movzx   ecx, word ptr [edx+ecx*2]
.text:0000F5E1                 cmp     eax, ecx
.text:0000F5E3                 jnz     short loc_F618
.text:0000F5E5                 mov     [ebp+var_248], 1
.text:0000F5EF                 mov     [ebp+Source], 0
.text:0000F5F6                 mov     [ebp+var_278], 0
.text:0000F5FD                 mov     [ebp+var_250], 0
.text:0000F607                 mov     edx, [ebp+var_250]
.text:0000F60D                 mov     [ebp+var_24C], edx
.text:0000F613                 jmp     loc_F6E0
.text:0000F618 ; ---------------------------------------------------------------------------
.text:0000F618
.text:0000F618 loc_F618:                               ; CODE XREF: _write_clip+A2Bj
.text:0000F618                 mov     esi, esp
.text:0000F61A                 push    0               ; lpUsedDefaultChar
.text:0000F61C                 push    0               ; lpDefaultChar
.text:0000F61E                 push    0               ; cbMultiByte
.text:0000F620                 push    0               ; lpMultiByteStr
.text:0000F622                 push    1               ; cchWideChar
.text:0000F624                 mov     eax, [ebp+var_23C]
.text:0000F62A                 lea     ecx, [ebp+eax*2+WideCharStr]
.text:0000F631                 push    ecx             ; lpWideCharStr
.text:0000F632                 push    0               ; dwFlags
.text:0000F634                 push    0               ; CodePage
.text:0000F636                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text:0000F63C                 cmp     esi, esp
.text:0000F63E                 call    __RTC_CheckEsp
.text:0000F643                 mov     [ebp+var_248], eax
.text:0000F649                 cmp     [ebp+var_248], 1
.text:0000F650                 jz      short loc_F6A4
.text:0000F652                 mov     edx, [ebp+var_23C]
.text:0000F658                 mov     eax, [ebp+var_234]
.text:0000F65E                 movzx   ecx, word ptr [eax+edx*2]
.text:0000F662                 push    ecx
.text:0000F663                 mov     edx, [ebp+var_248]
.text:0000F669                 push    edx
.text:0000F66A                 push    offset $SG91320 ; "{\\uc%d\\u%d"
.text:0000F66F                 lea     eax, [ebp+Source]
.text:0000F675                 push    eax             ; Dest
.text:0000F676                 call    _sprintf
.text:0000F67B                 add     esp, 10h
.text:0000F67E                 mov     [ebp+var_24C], eax
.text:0000F684                 mov     [ebp+var_250], 1
.text:0000F68E                 push    offset $SG91321 ; Source
.text:0000F693                 lea     ecx, [ebp+var_278]
.text:0000F699                 push    ecx             ; Dest
.text:0000F69A                 call    _strcpy
.text:0000F69F                 add     esp, 8
.text:0000F6A2                 jmp     short loc_F6E0
.text:0000F6A4 ; ---------------------------------------------------------------------------
.text:0000F6A4
.text:0000F6A4 loc_F6A4:                               ; CODE XREF: _write_clip+A98j
.text:0000F6A4                 mov     edx, [ebp+var_23C]
.text:0000F6AA                 mov     eax, [ebp+var_234]
.text:0000F6B0                 movzx   ecx, word ptr [eax+edx*2]
.text:0000F6B4                 push    ecx
.text:0000F6B5                 push    offset $SG91323 ; "\\u%d"
.text:0000F6BA                 lea     edx, [ebp+Source]
.text:0000F6C0                 push    edx             ; Dest
.text:0000F6C1                 call    _sprintf
.text:0000F6C6                 add     esp, 0Ch
.text:0000F6C9                 mov     [ebp+var_24C], eax
.text:0000F6CF                 mov     [ebp+var_250], 0
.text:0000F6D9                 mov     [ebp+var_278], 0
.text:0000F6E0
.text:0000F6E0 loc_F6E0:                               ; CODE XREF: _write_clip+A5Bj
.text:0000F6E0                                         ; _write_clip+AEAj
.text:0000F6E0                 mov     eax, [ebp+var_240]
.text:0000F6E6                 add     eax, [ebp+var_248]
.text:0000F6EC                 cmp     eax, [ebp+dwBytes]
.text:0000F6EF                 jle     short loc_F708
.text:0000F6F1                 push    1415h           ; Line
.text:0000F6F6                 push    offset $SG91325 ; "..\\..\\window.c"
.text:0000F6FB                 push    offset $SG91326 ; "tindex + multilen <= len2"
.text:0000F700                 call    __wassert
.text:0000F705 ; ---------------------------------------------------------------------------
.text:0000F705                 add     esp, 0Ch
.text:0000F708
.text:0000F708 loc_F708:                               ; CODE XREF: _write_clip+B37j
.text:0000F708                 mov     edx, [ebp+var_24C]
.text:0000F70E                 add     edx, [ebp+var_250]
.text:0000F714                 mov     [ebp+var_254], edx
.text:0000F71A                 mov     [ebp+var_258], 0
.text:0000F724                 jmp     short loc_F735
.text:0000F726 ; ---------------------------------------------------------------------------
.text:0000F726
.text:0000F726 loc_F726:                               ; CODE XREF: _write_clip:loc_F849j
.text:0000F726                 mov     eax, [ebp+var_258]
.text:0000F72C                 add     eax, 1
.text:0000F72F                 mov     [ebp+var_258], eax
.text:0000F735
.text:0000F735 loc_F735:                               ; CODE XREF: _write_clip+B6Cj
.text:0000F735                 mov     ecx, [ebp+var_258]
.text:0000F73B                 cmp     ecx, [ebp+var_248]
.text:0000F741                 jge     loc_F84E
.text:0000F747                 mov     edx, [ebp+var_240]
.text:0000F74D                 add     edx, [ebp+var_258]
.text:0000F753                 mov     eax, [ebp+var_230]
.text:0000F759                 movzx   ecx, byte ptr [eax+edx]
.text:0000F75D                 cmp     ecx, 5Ch ; '\'
.text:0000F760                 jz      short loc_F798
.text:0000F762                 mov     edx, [ebp+var_240]
.text:0000F768                 add     edx, [ebp+var_258]
.text:0000F76E                 mov     eax, [ebp+var_230]
.text:0000F774                 movzx   ecx, byte ptr [eax+edx]
.text:0000F778                 cmp     ecx, 7Bh ; '{'
.text:0000F77B                 jz      short loc_F798
.text:0000F77D                 mov     edx, [ebp+var_240]
.text:0000F783                 add     edx, [ebp+var_258]
.text:0000F789                 mov     eax, [ebp+var_230]
.text:0000F78F                 movzx   ecx, byte ptr [eax+edx]
.text:0000F793                 cmp     ecx, 7Dh ; '}'
.text:0000F796                 jnz     short loc_F7AC
.text:0000F798
.text:0000F798 loc_F798:                               ; CODE XREF: _write_clip+BA8j
.text:0000F798                                         ; _write_clip+BC3j
.text:0000F798                 mov     edx, [ebp+var_254]
.text:0000F79E                 add     edx, 2
.text:0000F7A1                 mov     [ebp+var_254], edx
.text:0000F7A7                 jmp     loc_F849
.text:0000F7AC ; ---------------------------------------------------------------------------
.text:0000F7AC
.text:0000F7AC loc_F7AC:                               ; CODE XREF: _write_clip+BDEj
.text:0000F7AC                 mov     eax, [ebp+var_240]
.text:0000F7B2                 add     eax, [ebp+var_258]
.text:0000F7B8                 mov     ecx, [ebp+var_230]
.text:0000F7BE                 movzx   edx, byte ptr [ecx+eax]
.text:0000F7C2                 cmp     edx, 0Dh
.text:0000F7C5                 jz      short loc_F7E2
.text:0000F7C7                 mov     eax, [ebp+var_240]
.text:0000F7CD                 add     eax, [ebp+var_258]
.text:0000F7D3                 mov     ecx, [ebp+var_230]
.text:0000F7D9                 movzx   edx, byte ptr [ecx+eax]
.text:0000F7DD                 cmp     edx, 0Ah
.text:0000F7E0                 jnz     short loc_F7F3
.text:0000F7E2
.text:0000F7E2 loc_F7E2:                               ; CODE XREF: _write_clip+C0Dj
.text:0000F7E2                 mov     eax, [ebp+var_254]
.text:0000F7E8                 add     eax, 6
.text:0000F7EB                 mov     [ebp+var_254], eax
.text:0000F7F1                 jmp     short loc_F849
.text:0000F7F3 ; ---------------------------------------------------------------------------
.text:0000F7F3
.text:0000F7F3 loc_F7F3:                               ; CODE XREF: _write_clip+C28j
.text:0000F7F3                 mov     ecx, [ebp+var_240]
.text:0000F7F9                 add     ecx, [ebp+var_258]
.text:0000F7FF                 mov     edx, [ebp+var_230]
.text:0000F805                 movzx   eax, byte ptr [edx+ecx]
.text:0000F809                 cmp     eax, 7Eh ; '~'
.text:0000F80C                 jg      short loc_F829
.text:0000F80E                 mov     ecx, [ebp+var_240]
.text:0000F814                 add     ecx, [ebp+var_258]
.text:0000F81A                 mov     edx, [ebp+var_230]
.text:0000F820                 movzx   eax, byte ptr [edx+ecx]
.text:0000F824                 cmp     eax, 20h ; ' '
.text:0000F827                 jge     short loc_F83A
.text:0000F829
.text:0000F829 loc_F829:                               ; CODE XREF: _write_clip+C54j
.text:0000F829                 mov     ecx, [ebp+var_254]
.text:0000F82F                 add     ecx, 4
.text:0000F832                 mov     [ebp+var_254], ecx
.text:0000F838                 jmp     short loc_F849
.text:0000F83A ; ---------------------------------------------------------------------------
.text:0000F83A
.text:0000F83A loc_F83A:                               ; CODE XREF: _write_clip+C6Fj
.text:0000F83A                 mov     edx, [ebp+var_254]
.text:0000F840                 add     edx, 1
.text:0000F843                 mov     [ebp+var_254], edx
.text:0000F849
.text:0000F849 loc_F849:                               ; CODE XREF: _write_clip+BEFj
.text:0000F849                                         ; _write_clip+C39j ...
.text:0000F849                 jmp     loc_F726
.text:0000F84E ; ---------------------------------------------------------------------------
.text:0000F84E
.text:0000F84E loc_F84E:                               ; CODE XREF: _write_clip+B89j
.text:0000F84E                 mov     eax, [ebp+var_254]
.text:0000F854                 mov     ecx, [ebp+var_238]
.text:0000F85A                 lea     edx, [ecx+eax+3]
.text:0000F85E                 cmp     [ebp+var_244], edx
.text:0000F864                 jge     short loc_F89D
.text:0000F866                 mov     eax, [ebp+var_254]
.text:0000F86C                 mov     ecx, [ebp+var_238]
.text:0000F872                 lea     edx, [ecx+eax+200h]
.text:0000F879                 mov     [ebp+var_244], edx
.text:0000F87F                 push    1
.text:0000F881                 mov     eax, [ebp+var_244]
.text:0000F887                 push    eax
.text:0000F888                 mov     ecx, [ebp+Dest]
.text:0000F88E                 push    ecx
.text:0000F88F                 call    _saferealloc
.text:0000F894                 add     esp, 0Ch
.text:0000F897                 mov     [ebp+Dest], eax
.text:0000F89D
.text:0000F89D loc_F89D:                               ; CODE XREF: _write_clip+CACj
.text:0000F89D                 lea     edx, [ebp+Source]
.text:0000F8A3                 push    edx             ; Source
.text:0000F8A4                 mov     eax, [ebp+Dest]
.text:0000F8AA                 add     eax, [ebp+var_238]
.text:0000F8B0                 push    eax             ; Dest
.text:0000F8B1                 call    _strcpy
.text:0000F8B6                 add     esp, 8
.text:0000F8B9                 mov     ecx, [ebp+var_238]
.text:0000F8BF                 add     ecx, [ebp+var_24C]
.text:0000F8C5                 mov     [ebp+var_238], ecx
.text:0000F8CB                 mov     [ebp+var_258], 0
.text:0000F8D5                 jmp     short loc_F8E6
.text:0000F8D7 ; ---------------------------------------------------------------------------
.text:0000F8D7
.text:0000F8D7 loc_F8D7:                               ; CODE XREF: _write_clip:loc_FAA6j
.text:0000F8D7                 mov     edx, [ebp+var_258]
.text:0000F8DD                 add     edx, 1
.text:0000F8E0                 mov     [ebp+var_258], edx
.text:0000F8E6
.text:0000F8E6 loc_F8E6:                               ; CODE XREF: _write_clip+D1Dj
.text:0000F8E6                 mov     eax, [ebp+var_258]
.text:0000F8EC                 cmp     eax, [ebp+var_248]
.text:0000F8F2                 jge     loc_FAAB
.text:0000F8F8                 mov     ecx, [ebp+var_240]
.text:0000F8FE                 add     ecx, [ebp+var_258]
.text:0000F904                 mov     edx, [ebp+var_230]
.text:0000F90A                 movzx   eax, byte ptr [edx+ecx]
.text:0000F90E                 cmp     eax, 5Ch ; '\'
.text:0000F911                 jz      short loc_F949
.text:0000F913                 mov     ecx, [ebp+var_240]
.text:0000F919                 add     ecx, [ebp+var_258]
.text:0000F91F                 mov     edx, [ebp+var_230]
.text:0000F925                 movzx   eax, byte ptr [edx+ecx]
.text:0000F929                 cmp     eax, 7Bh ; '{'
.text:0000F92C                 jz      short loc_F949
.text:0000F92E                 mov     ecx, [ebp+var_240]
.text:0000F934                 add     ecx, [ebp+var_258]
.text:0000F93A                 mov     edx, [ebp+var_230]
.text:0000F940                 movzx   eax, byte ptr [edx+ecx]
.text:0000F944                 cmp     eax, 7Dh ; '}'
.text:0000F947                 jnz     short loc_F99E
.text:0000F949
.text:0000F949 loc_F949:                               ; CODE XREF: _write_clip+D59j
.text:0000F949                                         ; _write_clip+D74j
.text:0000F949                 mov     ecx, [ebp+Dest]
.text:0000F94F                 add     ecx, [ebp+var_238]
.text:0000F955                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0000F958                 mov     edx, [ebp+var_238]
.text:0000F95E                 add     edx, 1
.text:0000F961                 mov     [ebp+var_238], edx
.text:0000F967                 mov     eax, [ebp+var_240]
.text:0000F96D                 add     eax, [ebp+var_258]
.text:0000F973                 mov     ecx, [ebp+Dest]
.text:0000F979                 add     ecx, [ebp+var_238]
.text:0000F97F                 mov     edx, [ebp+var_230]
.text:0000F985                 mov     al, [edx+eax]
.text:0000F988                 mov     [ecx], al
.text:0000F98A                 mov     ecx, [ebp+var_238]
.text:0000F990                 add     ecx, 1
.text:0000F993                 mov     [ebp+var_238], ecx
.text:0000F999                 jmp     loc_FAA6
.text:0000F99E ; ---------------------------------------------------------------------------
.text:0000F99E
.text:0000F99E loc_F99E:                               ; CODE XREF: _write_clip+D8Fj
.text:0000F99E                 mov     edx, [ebp+var_240]
.text:0000F9A4                 add     edx, [ebp+var_258]
.text:0000F9AA                 mov     eax, [ebp+var_230]
.text:0000F9B0                 movzx   ecx, byte ptr [eax+edx]
.text:0000F9B4                 cmp     ecx, 0Dh
.text:0000F9B7                 jz      short loc_F9D4
.text:0000F9B9                 mov     edx, [ebp+var_240]
.text:0000F9BF                 add     edx, [ebp+var_258]
.text:0000F9C5                 mov     eax, [ebp+var_230]
.text:0000F9CB                 movzx   ecx, byte ptr [eax+edx]
.text:0000F9CF                 cmp     ecx, 0Ah
.text:0000F9D2                 jnz     short loc_F9FF
.text:0000F9D4
.text:0000F9D4 loc_F9D4:                               ; CODE XREF: _write_clip+DFFj
.text:0000F9D4                 push    offset $SG91351 ; "\\par\r\n"
.text:0000F9D9                 mov     edx, [ebp+Dest]
.text:0000F9DF                 add     edx, [ebp+var_238]
.text:0000F9E5                 push    edx             ; Dest
.text:0000F9E6                 call    _sprintf
.text:0000F9EB                 add     esp, 8
.text:0000F9EE                 add     eax, [ebp+var_238]
.text:0000F9F4                 mov     [ebp+var_238], eax
.text:0000F9FA                 jmp     loc_FAA6
.text:0000F9FF ; ---------------------------------------------------------------------------
.text:0000F9FF
.text:0000F9FF loc_F9FF:                               ; CODE XREF: _write_clip+E1Aj
.text:0000F9FF                 mov     eax, [ebp+var_240]
.text:0000FA05                 add     eax, [ebp+var_258]
.text:0000FA0B                 mov     ecx, [ebp+var_230]
.text:0000FA11                 movzx   edx, byte ptr [ecx+eax]
.text:0000FA15                 cmp     edx, 7Eh ; '~'
.text:0000FA18                 jg      short loc_FA35
.text:0000FA1A                 mov     eax, [ebp+var_240]
.text:0000FA20                 add     eax, [ebp+var_258]
.text:0000FA26                 mov     ecx, [ebp+var_230]
.text:0000FA2C                 movzx   edx, byte ptr [ecx+eax]
.text:0000FA30                 cmp     edx, 20h ; ' '
.text:0000FA33                 jge     short loc_FA74
.text:0000FA35
.text:0000FA35 loc_FA35:                               ; CODE XREF: _write_clip+E60j
.text:0000FA35                 mov     eax, [ebp+var_240]
.text:0000FA3B                 add     eax, [ebp+var_258]
.text:0000FA41                 mov     ecx, [ebp+var_230]
.text:0000FA47                 movzx   edx, byte ptr [ecx+eax]
.text:0000FA4B                 push    edx
.text:0000FA4C                 push    offset $SG91355 ; "\\'%02x"
.text:0000FA51                 mov     eax, [ebp+Dest]
.text:0000FA57                 add     eax, [ebp+var_238]
.text:0000FA5D                 push    eax             ; Dest
.text:0000FA5E                 call    _sprintf
.text:0000FA63                 add     esp, 0Ch
.text:0000FA66                 add     eax, [ebp+var_238]
.text:0000FA6C                 mov     [ebp+var_238], eax
.text:0000FA72                 jmp     short loc_FAA6
.text:0000FA74 ; ---------------------------------------------------------------------------
.text:0000FA74
.text:0000FA74 loc_FA74:                               ; CODE XREF: _write_clip+E7Bj
.text:0000FA74                 mov     ecx, [ebp+var_240]
.text:0000FA7A                 add     ecx, [ebp+var_258]
.text:0000FA80                 mov     edx, [ebp+Dest]
.text:0000FA86                 add     edx, [ebp+var_238]
.text:0000FA8C                 mov     eax, [ebp+var_230]
.text:0000FA92                 mov     cl, [eax+ecx]
.text:0000FA95                 mov     [edx], cl
.text:0000FA97                 mov     edx, [ebp+var_238]
.text:0000FA9D                 add     edx, 1
.text:0000FAA0                 mov     [ebp+var_238], edx
.text:0000FAA6
.text:0000FAA6 loc_FAA6:                               ; CODE XREF: _write_clip+DE1j
.text:0000FAA6                                         ; _write_clip+E42j ...
.text:0000FAA6                 jmp     loc_F8D7
.text:0000FAAB ; ---------------------------------------------------------------------------
.text:0000FAAB
.text:0000FAAB loc_FAAB:                               ; CODE XREF: _write_clip+D3Aj
.text:0000FAAB                 lea     eax, [ebp+var_278]
.text:0000FAB1                 push    eax             ; Source
.text:0000FAB2                 mov     ecx, [ebp+Dest]
.text:0000FAB8                 add     ecx, [ebp+var_238]
.text:0000FABE                 push    ecx             ; Dest
.text:0000FABF                 call    _strcpy
.text:0000FAC4                 add     esp, 8
.text:0000FAC7                 mov     edx, [ebp+var_238]
.text:0000FACD                 add     edx, [ebp+var_250]
.text:0000FAD3                 mov     [ebp+var_238], edx
.text:0000FAD9                 mov     eax, [ebp+var_240]
.text:0000FADF                 add     eax, [ebp+var_248]
.text:0000FAE5                 mov     [ebp+var_240], eax
.text:0000FAEB                 mov     ecx, [ebp+var_23C]
.text:0000FAF1                 add     ecx, 1
.text:0000FAF4                 mov     [ebp+var_23C], ecx
.text:0000FAFA                 jmp     loc_F175
.text:0000FAFF ; ---------------------------------------------------------------------------
.text:0000FAFF
.text:0000FAFF loc_FAFF:                               ; CODE XREF: _write_clip+5C6j
.text:0000FAFF                                         ; _write_clip+5D5j ...
.text:0000FAFF                 mov     edx, [ebp+Dest]
.text:0000FB05                 add     edx, [ebp+var_238]
.text:0000FB0B                 mov     byte ptr [edx], 7Dh ; '}'
.text:0000FB0E                 mov     eax, [ebp+var_238]
.text:0000FB14                 add     eax, 1
.text:0000FB17                 mov     [ebp+var_238], eax
.text:0000FB1D                 mov     ecx, [ebp+Dest]
.text:0000FB23                 add     ecx, [ebp+var_238]
.text:0000FB29                 mov     byte ptr [ecx], 0
.text:0000FB2C                 mov     edx, [ebp+var_238]
.text:0000FB32                 add     edx, 1
.text:0000FB35                 mov     [ebp+var_238], edx
.text:0000FB3B                 mov     eax, [ebp+Dest]
.text:0000FB41                 add     eax, [ebp+var_238]
.text:0000FB47                 mov     byte ptr [eax], 0
.text:0000FB4A                 mov     ecx, [ebp+var_238]
.text:0000FB50                 add     ecx, 1
.text:0000FB53                 mov     [ebp+var_238], ecx
.text:0000FB59                 mov     esi, esp
.text:0000FB5B                 mov     edx, [ebp+var_238]
.text:0000FB61                 push    edx             ; dwBytes
.text:0000FB62                 push    2002h           ; uFlags
.text:0000FB67                 call    dword ptr ds:__imp__GlobalAlloc@8 ; GlobalAlloc(x,x)
.text:0000FB6D                 cmp     esi, esp
.text:0000FB6F                 call    __RTC_CheckEsp
.text:0000FB74                 mov     [ebp+var_10], eax
.text:0000FB77                 cmp     [ebp+var_10], 0
.text:0000FB7B                 jz      short loc_FBC6
.text:0000FB7D                 mov     esi, esp
.text:0000FB7F                 mov     eax, [ebp+var_10]
.text:0000FB82                 push    eax             ; hMem
.text:0000FB83                 call    dword ptr ds:__imp__GlobalLock@4 ; GlobalLock(x)
.text:0000FB89                 cmp     esi, esp
.text:0000FB8B                 call    __RTC_CheckEsp
.text:0000FB90                 mov     [ebp+var_20], eax
.text:0000FB93                 cmp     [ebp+var_20], 0
.text:0000FB97                 jz      short loc_FBC6
.text:0000FB99                 mov     ecx, [ebp+var_238]
.text:0000FB9F                 push    ecx             ; Size
.text:0000FBA0                 mov     edx, [ebp+Dest]
.text:0000FBA6                 push    edx             ; Src
.text:0000FBA7                 mov     eax, [ebp+var_20]
.text:0000FBAA                 push    eax             ; Dst
.text:0000FBAB                 call    _memcpy
.text:0000FBB0                 add     esp, 0Ch
.text:0000FBB3                 mov     esi, esp
.text:0000FBB5                 mov     ecx, [ebp+var_10]
.text:0000FBB8                 push    ecx             ; hMem
.text:0000FBB9                 call    dword ptr ds:__imp__GlobalUnlock@4 ; GlobalUnlock(x)
.text:0000FBBF                 cmp     esi, esp
.text:0000FBC1                 call    __RTC_CheckEsp
.text:0000FBC6
.text:0000FBC6 loc_FBC6:                               ; CODE XREF: _write_clip+FC3j
.text:0000FBC6                                         ; _write_clip+FDFj
.text:0000FBC6                 mov     edx, [ebp+Dest]
.text:0000FBCC                 push    edx
.text:0000FBCD                 call    _safefree
.text:0000FBD2                 add     esp, 4
.text:0000FBD5                 jmp     short loc_FBDE
.text:0000FBD7 ; ---------------------------------------------------------------------------
.text:0000FBD7
.text:0000FBD7 loc_FBD7:                               ; CODE XREF: _write_clip+1BCj
.text:0000FBD7                 mov     [ebp+var_10], 0
.text:0000FBDE
.text:0000FBDE loc_FBDE:                               ; CODE XREF: _write_clip+101Dj
.text:0000FBDE                 mov     esi, esp
.text:0000FBE0                 mov     eax, [ebp+hMem]
.text:0000FBE3                 push    eax             ; hMem
.text:0000FBE4                 call    dword ptr ds:__imp__GlobalUnlock@4 ; GlobalUnlock(x)
.text:0000FBEA                 cmp     esi, esp
.text:0000FBEC                 call    __RTC_CheckEsp
.text:0000FBF1                 mov     esi, esp
.text:0000FBF3                 mov     ecx, [ebp+var_C]
.text:0000FBF6                 push    ecx             ; hMem
.text:0000FBF7                 call    dword ptr ds:__imp__GlobalUnlock@4 ; GlobalUnlock(x)
.text:0000FBFD                 cmp     esi, esp
.text:0000FBFF                 call    __RTC_CheckEsp
.text:0000FC04                 cmp     [ebp+arg_10], 0
.text:0000FC08                 jnz     short loc_FC29
.text:0000FC0A                 mov     esi, esp
.text:0000FC0C                 push    0               ; lParam
.text:0000FC0E                 push    1               ; wParam
.text:0000FC10                 push    8002h           ; Msg
.text:0000FC15                 mov     edx, dword ptr ds:_hwnd
.text:0000FC1B                 push    edx             ; hWnd
.text:0000FC1C                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000FC22                 cmp     esi, esp
.text:0000FC24                 call    __RTC_CheckEsp
.text:0000FC29
.text:0000FC29 loc_FC29:                               ; CODE XREF: _write_clip+1050j
.text:0000FC29                 mov     esi, esp
.text:0000FC2B                 mov     eax, dword ptr ds:_hwnd
.text:0000FC30                 push    eax             ; hWndNewOwner
.text:0000FC31                 call    dword ptr ds:__imp__OpenClipboard@4 ; OpenClipboard(x)
.text:0000FC37                 cmp     esi, esp
.text:0000FC39                 call    __RTC_CheckEsp
.text:0000FC3E                 test    eax, eax
.text:0000FC40                 jz      short loc_FCBA
.text:0000FC42                 mov     esi, esp
.text:0000FC44                 call    dword ptr ds:__imp__EmptyClipboard@0 ; EmptyClipboard()
.text:0000FC4A                 cmp     esi, esp
.text:0000FC4C                 call    __RTC_CheckEsp
.text:0000FC51                 mov     esi, esp
.text:0000FC53                 mov     ecx, [ebp+hMem]
.text:0000FC56                 push    ecx             ; hMem
.text:0000FC57                 push    0Dh             ; uFormat
.text:0000FC59                 call    dword ptr ds:__imp__SetClipboardData@8 ; SetClipboardData(x,x)
.text:0000FC5F                 cmp     esi, esp
.text:0000FC61                 call    __RTC_CheckEsp
.text:0000FC66                 mov     esi, esp
.text:0000FC68                 mov     edx, [ebp+var_C]
.text:0000FC6B                 push    edx             ; hMem
.text:0000FC6C                 push    1               ; uFormat
.text:0000FC6E                 call    dword ptr ds:__imp__SetClipboardData@8 ; SetClipboardData(x,x)
.text:0000FC74                 cmp     esi, esp
.text:0000FC76                 call    __RTC_CheckEsp
.text:0000FC7B                 cmp     [ebp+var_10], 0
.text:0000FC7F                 jz      short loc_FCA9
.text:0000FC81                 mov     esi, esp
.text:0000FC83                 mov     eax, [ebp+var_10]
.text:0000FC86                 push    eax             ; hMem
.text:0000FC87                 mov     edi, esp
.text:0000FC89                 push    offset $SG91364 ; "Rich Text Format"
.text:0000FC8E                 call    dword ptr ds:__imp__RegisterClipboardFormatA@4 ; RegisterClipboardFormatA(x)
.text:0000FC94                 cmp     edi, esp
.text:0000FC96                 call    __RTC_CheckEsp
.text:0000FC9B                 push    eax             ; uFormat
.text:0000FC9C                 call    dword ptr ds:__imp__SetClipboardData@8 ; SetClipboardData(x,x)
.text:0000FCA2                 cmp     esi, esp
.text:0000FCA4                 call    __RTC_CheckEsp
.text:0000FCA9
.text:0000FCA9 loc_FCA9:                               ; CODE XREF: _write_clip+10C7j
.text:0000FCA9                 mov     esi, esp
.text:0000FCAB                 call    dword ptr ds:__imp__CloseClipboard@0 ; CloseClipboard()
.text:0000FCB1                 cmp     esi, esp
.text:0000FCB3                 call    __RTC_CheckEsp
.text:0000FCB8                 jmp     short loc_FCE0
.text:0000FCBA ; ---------------------------------------------------------------------------
.text:0000FCBA
.text:0000FCBA loc_FCBA:                               ; CODE XREF: _write_clip+1088j
.text:0000FCBA                 mov     esi, esp
.text:0000FCBC                 mov     ecx, [ebp+hMem]
.text:0000FCBF                 push    ecx             ; hMem
.text:0000FCC0                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000FCC6                 cmp     esi, esp
.text:0000FCC8                 call    __RTC_CheckEsp
.text:0000FCCD                 mov     esi, esp
.text:0000FCCF                 mov     edx, [ebp+var_C]
.text:0000FCD2                 push    edx             ; hMem
.text:0000FCD3                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text:0000FCD9                 cmp     esi, esp
.text:0000FCDB                 call    __RTC_CheckEsp
.text:0000FCE0
.text:0000FCE0 loc_FCE0:                               ; CODE XREF: _write_clip+1100j
.text:0000FCE0                 cmp     [ebp+arg_10], 0
.text:0000FCE4                 jnz     short loc_FD04
.text:0000FCE6                 mov     esi, esp
.text:0000FCE8                 push    0               ; lParam
.text:0000FCEA                 push    0               ; wParam
.text:0000FCEC                 push    8002h           ; Msg
.text:0000FCF1                 mov     eax, dword ptr ds:_hwnd
.text:0000FCF6                 push    eax             ; hWnd
.text:0000FCF7                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000FCFD                 cmp     esi, esp
.text:0000FCFF                 call    __RTC_CheckEsp
.text:0000FD04
.text:0000FD04 loc_FD04:                               ; CODE XREF: _write_clip:loc_EC7Bj
.text:0000FD04                                         ; _write_clip+10Aj ...
.text:0000FD04                 push    edx
.text:0000FD05                 mov     ecx, ebp
.text:0000FD07                 push    eax
.text:0000FD08                 lea     edx, $LN105_0
.text:0000FD0E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000FD13                 pop     eax
.text:0000FD14                 pop     edx
.text:0000FD15                 pop     edi
.text:0000FD16                 pop     esi
.text:0000FD17                 mov     ecx, [ebp+var_4]
.text:0000FD1A                 xor     ecx, ebp
.text:0000FD1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000FD21                 add     esp, 6DCh
.text:0000FD27                 cmp     ebp, esp
.text:0000FD29                 call    __RTC_CheckEsp
.text:0000FD2E                 mov     esp, ebp
.text:0000FD30                 pop     ebp
.text:0000FD31                 retn
.text:0000FD31 _write_clip     endp
.text:0000FD31
.text:0000FD31 ; ---------------------------------------------------------------------------
.text:0000FD32                 align 4
.text:0000FD34 $LN105_0        dd 4                    ; DATA XREF: _write_clip+1150o
.text:0000FD38                 dd offset $LN104_1
.text:0000FD3C $LN104_1        dd 0FFFFFDDCh, 200h     ; DATA XREF: .text:0000FD38o
.text:0000FD44                 dd offset $LN100_0      ; "unitab"
.text:0000FD48                 dd 0FFFFFD94h, 10h
.text:0000FD50                 dd offset $LN101_0      ; "before"
.text:0000FD54                 dd 0FFFFFD88h, 4
.text:0000FD5C                 dd offset $LN102_1      ; "after"
.text:0000FD60                 dd 0FFFFF948h, 418h
.text:0000FD68                 dd offset $LN103_1      ; "palette"
.text:0000FD6C $LN103_1        db 'palette',0          ; DATA XREF: .text:0000FD68o
.text:0000FD74 $LN102_1        db 'after',0            ; DATA XREF: .text:0000FD5Co
.text:0000FD7A $LN101_0        db 'before',0           ; DATA XREF: .text:0000FD50o
.text:0000FD81 $LN100_0        db 'unitab',0           ; DATA XREF: .text:0000FD44o
.text:0000FD88
.text:0000FD88 ; =============== S U B R O U T I N E =======================================
.text:0000FD88
.text:0000FD88 ; Attributes: bp-based frame
.text:0000FD88
.text:0000FD88 ; int __cdecl process_clipdata(HGLOBAL hMem, int)
.text:0000FD88 _process_clipdata proc near             ; CODE XREF: WndProc(x,x,x,x)+2BFCp
.text:0000FD88
.text:0000FD88 cchWideChar     = dword ptr -10h
.text:0000FD88 Str             = dword ptr -0Ch
.text:0000FD88 var_8           = dword ptr -8
.text:0000FD88 Src             = dword ptr -4
.text:0000FD88 hMem            = dword ptr  8
.text:0000FD88 arg_4           = dword ptr  0Ch
.text:0000FD88
.text:0000FD88                 push    ebp
.text:0000FD89                 mov     ebp, esp
.text:0000FD8B                 sub     esp, 10h
.text:0000FD8E                 push    esi
.text:0000FD8F                 mov     eax, 0CCCCCCCCh
.text:0000FD94                 mov     [ebp+cchWideChar], eax
.text:0000FD97                 mov     [ebp+Str], eax
.text:0000FD9A                 mov     [ebp+var_8], eax
.text:0000FD9D                 mov     [ebp+Src], eax
.text:0000FDA0                 mov     eax, ds:_clipboard_contents
.text:0000FDA5                 push    eax
.text:0000FDA6                 call    _safefree
.text:0000FDAB                 add     esp, 4
.text:0000FDAE                 mov     ds:_clipboard_contents, 0
.text:0000FDB8                 mov     ds:_clipboard_length, 0
.text:0000FDC2                 cmp     [ebp+arg_4], 0
.text:0000FDC6                 jz      loc_FE67
.text:0000FDCC                 mov     esi, esp
.text:0000FDCE                 mov     ecx, [ebp+hMem]
.text:0000FDD1                 push    ecx             ; hMem
.text:0000FDD2                 call    dword ptr ds:__imp__GlobalLock@4 ; GlobalLock(x)
.text:0000FDD8                 cmp     esi, esp
.text:0000FDDA                 call    __RTC_CheckEsp
.text:0000FDDF                 mov     [ebp+Src], eax
.text:0000FDE2                 cmp     [ebp+Src], 0
.text:0000FDE6                 jz      short loc_FE62
.text:0000FDE8                 mov     edx, [ebp+Src]
.text:0000FDEB                 mov     [ebp+var_8], edx
.text:0000FDEE                 jmp     short loc_FDF9
.text:0000FDF0 ; ---------------------------------------------------------------------------
.text:0000FDF0
.text:0000FDF0 loc_FDF0:                               ; CODE XREF: _process_clipdata+7Bj
.text:0000FDF0                 mov     eax, [ebp+var_8]
.text:0000FDF3                 add     eax, 2
.text:0000FDF6                 mov     [ebp+var_8], eax
.text:0000FDF9
.text:0000FDF9 loc_FDF9:                               ; CODE XREF: _process_clipdata+66j
.text:0000FDF9                 mov     ecx, [ebp+var_8]
.text:0000FDFC                 movzx   edx, word ptr [ecx]
.text:0000FDFF                 test    edx, edx
.text:0000FE01                 jz      short loc_FE05
.text:0000FE03                 jmp     short loc_FDF0
.text:0000FE05 ; ---------------------------------------------------------------------------
.text:0000FE05
.text:0000FE05 loc_FE05:                               ; CODE XREF: _process_clipdata+79j
.text:0000FE05                 mov     eax, [ebp+var_8]
.text:0000FE08                 sub     eax, [ebp+Src]
.text:0000FE0B                 sar     eax, 1
.text:0000FE0D                 mov     ds:_clipboard_length, eax
.text:0000FE12                 push    2
.text:0000FE14                 mov     ecx, ds:_clipboard_length
.text:0000FE1A                 add     ecx, 1
.text:0000FE1D                 push    ecx
.text:0000FE1E                 call    _safemalloc
.text:0000FE23                 add     esp, 8
.text:0000FE26                 mov     ds:_clipboard_contents, eax
.text:0000FE2B                 mov     edx, ds:_clipboard_length
.text:0000FE31                 shl     edx, 1
.text:0000FE33                 push    edx             ; Size
.text:0000FE34                 mov     eax, [ebp+Src]
.text:0000FE37                 push    eax             ; Src
.text:0000FE38                 mov     ecx, ds:_clipboard_contents
.text:0000FE3E                 push    ecx             ; Dst
.text:0000FE3F                 call    _memcpy
.text:0000FE44                 add     esp, 0Ch
.text:0000FE47                 xor     edx, edx
.text:0000FE49                 mov     eax, ds:_clipboard_length
.text:0000FE4E                 mov     ecx, ds:_clipboard_contents
.text:0000FE54                 mov     [ecx+eax*2], dx
.text:0000FE58                 mov     eax, 1
.text:0000FE5D                 jmp     loc_FF20
.text:0000FE62 ; ---------------------------------------------------------------------------
.text:0000FE62
.text:0000FE62 loc_FE62:                               ; CODE XREF: _process_clipdata+5Ej
.text:0000FE62                 jmp     loc_FF1E
.text:0000FE67 ; ---------------------------------------------------------------------------
.text:0000FE67
.text:0000FE67 loc_FE67:                               ; CODE XREF: _process_clipdata+3Ej
.text:0000FE67                 mov     esi, esp
.text:0000FE69                 mov     edx, [ebp+hMem]
.text:0000FE6C                 push    edx             ; hMem
.text:0000FE6D                 call    dword ptr ds:__imp__GlobalLock@4 ; GlobalLock(x)
.text:0000FE73                 cmp     esi, esp
.text:0000FE75                 call    __RTC_CheckEsp
.text:0000FE7A                 mov     [ebp+Str], eax
.text:0000FE7D                 cmp     [ebp+Str], 0
.text:0000FE81                 jz      loc_FF1E
.text:0000FE87                 mov     esi, esp
.text:0000FE89                 push    0               ; cchWideChar
.text:0000FE8B                 push    0               ; lpWideCharStr
.text:0000FE8D                 mov     eax, [ebp+Str]
.text:0000FE90                 push    eax             ; Str
.text:0000FE91                 call    _strlen
.text:0000FE96                 add     esp, 4
.text:0000FE99                 add     eax, 1
.text:0000FE9C                 push    eax             ; cbMultiByte
.text:0000FE9D                 mov     ecx, [ebp+Str]
.text:0000FEA0                 push    ecx             ; lpMultiByteStr
.text:0000FEA1                 push    0               ; dwFlags
.text:0000FEA3                 push    0               ; CodePage
.text:0000FEA5                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:0000FEAB                 cmp     esi, esp
.text:0000FEAD                 call    __RTC_CheckEsp
.text:0000FEB2                 mov     [ebp+cchWideChar], eax
.text:0000FEB5                 push    2
.text:0000FEB7                 mov     edx, [ebp+cchWideChar]
.text:0000FEBA                 push    edx
.text:0000FEBB                 call    _safemalloc
.text:0000FEC0                 add     esp, 8
.text:0000FEC3                 mov     ds:_clipboard_contents, eax
.text:0000FEC8                 mov     esi, esp
.text:0000FECA                 mov     eax, [ebp+cchWideChar]
.text:0000FECD                 push    eax             ; cchWideChar
.text:0000FECE                 mov     ecx, ds:_clipboard_contents
.text:0000FED4                 push    ecx             ; lpWideCharStr
.text:0000FED5                 mov     edx, [ebp+Str]
.text:0000FED8                 push    edx             ; Str
.text:0000FED9                 call    _strlen
.text:0000FEDE                 add     esp, 4
.text:0000FEE1                 add     eax, 1
.text:0000FEE4                 push    eax             ; cbMultiByte
.text:0000FEE5                 mov     eax, [ebp+Str]
.text:0000FEE8                 push    eax             ; lpMultiByteStr
.text:0000FEE9                 push    0               ; dwFlags
.text:0000FEEB                 push    0               ; CodePage
.text:0000FEED                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:0000FEF3                 cmp     esi, esp
.text:0000FEF5                 call    __RTC_CheckEsp
.text:0000FEFA                 mov     ecx, [ebp+cchWideChar]
.text:0000FEFD                 sub     ecx, 1
.text:0000FF00                 mov     ds:_clipboard_length, ecx
.text:0000FF06                 xor     edx, edx
.text:0000FF08                 mov     eax, ds:_clipboard_length
.text:0000FF0D                 mov     ecx, ds:_clipboard_contents
.text:0000FF13                 mov     [ecx+eax*2], dx
.text:0000FF17                 mov     eax, 1
.text:0000FF1C                 jmp     short loc_FF20
.text:0000FF1E ; ---------------------------------------------------------------------------
.text:0000FF1E
.text:0000FF1E loc_FF1E:                               ; CODE XREF: _process_clipdata:loc_FE62j
.text:0000FF1E                                         ; _process_clipdata+F9j
.text:0000FF1E                 xor     eax, eax
.text:0000FF20
.text:0000FF20 loc_FF20:                               ; CODE XREF: _process_clipdata+D5j
.text:0000FF20                                         ; _process_clipdata+194j
.text:0000FF20                 pop     esi
.text:0000FF21                 add     esp, 10h
.text:0000FF24                 cmp     ebp, esp
.text:0000FF26                 call    __RTC_CheckEsp
.text:0000FF2B                 mov     esp, ebp
.text:0000FF2D                 pop     ebp
.text:0000FF2E                 retn
.text:0000FF2E _process_clipdata endp
.text:0000FF2E
.text:0000FF2E ; ---------------------------------------------------------------------------
.text:0000FF2F                 db 9 dup(0CCh)
.text:0000FF38
.text:0000FF38 ; =============== S U B R O U T I N E =======================================
.text:0000FF38
.text:0000FF38 ; Attributes: bp-based frame
.text:0000FF38
.text:0000FF38                 public _request_paste
.text:0000FF38 _request_paste  proc near               ; CODE XREF: WndProc(x,x,x,x)+EEAp
.text:0000FF38                                         ; _TranslateKey+643p
.text:0000FF38
.text:0000FF38 var_C           = dword ptr -0Ch
.text:0000FF38 ThreadId        = dword ptr -8
.text:0000FF38 var_4           = dword ptr -4
.text:0000FF38
.text:0000FF38                 push    ebp
.text:0000FF39                 mov     ebp, esp
.text:0000FF3B                 sub     esp, 0Ch
.text:0000FF3E                 push    esi
.text:0000FF3F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000FF46                 mov     [ebp+ThreadId], 0CCCCCCCCh
.text:0000FF4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000FF54                 mov     esi, esp
.text:0000FF56                 lea     eax, [ebp+ThreadId]
.text:0000FF59                 push    eax             ; lpThreadId
.text:0000FF5A                 push    0               ; dwCreationFlags
.text:0000FF5C                 mov     ecx, dword ptr ds:_hwnd
.text:0000FF62                 push    ecx             ; lpParameter
.text:0000FF63                 push    offset _clipboard_read_threadfunc@4 ; lpStartAddress
.text:0000FF68                 push    0               ; dwStackSize
.text:0000FF6A                 push    0               ; lpThreadAttributes
.text:0000FF6C                 call    dword ptr ds:__imp__CreateThread@24 ; CreateThread(x,x,x,x,x,x)
.text:0000FF72                 cmp     esi, esp
.text:0000FF74                 call    __RTC_CheckEsp
.text:0000FF79                 push    edx
.text:0000FF7A                 mov     ecx, ebp
.text:0000FF7C                 push    eax
.text:0000FF7D                 lea     edx, $LN5_5
.text:0000FF83                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000FF88                 pop     eax
.text:0000FF89                 pop     edx
.text:0000FF8A                 pop     esi
.text:0000FF8B                 add     esp, 0Ch
.text:0000FF8E                 cmp     ebp, esp
.text:0000FF90                 call    __RTC_CheckEsp
.text:0000FF95                 mov     esp, ebp
.text:0000FF97                 pop     ebp
.text:0000FF98                 retn
.text:0000FF98 _request_paste  endp
.text:0000FF98
.text:0000FF98 ; ---------------------------------------------------------------------------
.text:0000FF99                 align 4
.text:0000FF9C $LN5_5          dd 1                    ; DATA XREF: _request_paste+45o
.text:0000FFA0                 dd offset $LN4_4
.text:0000FFA4 $LN4_4          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000FFA0o
.text:0000FFAC                 dd offset $LN3_4        ; "in_threadid"
.text:0000FFB0 $LN3_4          db 'in_threadid',0      ; DATA XREF: .text:0000FFACo
.text:0000FFBC                 db 0Ch dup(0CCh)
.text:0000FFC8
.text:0000FFC8 ; =============== S U B R O U T I N E =======================================
.text:0000FFC8
.text:0000FFC8 ; Attributes: bp-based frame
.text:0000FFC8
.text:0000FFC8 ; DWORD __stdcall clipboard_read_threadfunc(LPVOID lpThreadParameter)
.text:0000FFC8 _clipboard_read_threadfunc@4 proc near  ; DATA XREF: _request_paste+2Bo
.text:0000FFC8
.text:0000FFC8 lParam          = dword ptr -8
.text:0000FFC8 hWnd            = dword ptr -4
.text:0000FFC8 lpThreadParameter= dword ptr  8
.text:0000FFC8
.text:0000FFC8                 push    ebp
.text:0000FFC9                 mov     ebp, esp
.text:0000FFCB                 sub     esp, 8
.text:0000FFCE                 push    esi
.text:0000FFCF                 mov     [ebp+lParam], 0CCCCCCCCh
.text:0000FFD6                 mov     [ebp+hWnd], 0CCCCCCCCh
.text:0000FFDD                 mov     eax, [ebp+lpThreadParameter]
.text:0000FFE0                 mov     [ebp+hWnd], eax
.text:0000FFE3                 mov     esi, esp
.text:0000FFE5                 push    0               ; hWndNewOwner
.text:0000FFE7                 call    dword ptr ds:__imp__OpenClipboard@4 ; OpenClipboard(x)
.text:0000FFED                 cmp     esi, esp
.text:0000FFEF                 call    __RTC_CheckEsp
.text:0000FFF4                 test    eax, eax
.text:0000FFF6                 jz      loc_1007D
.text:0000FFFC                 mov     esi, esp
.text:0000FFFE                 push    0Dh             ; uFormat
.text:00010000
.text:00010000 loc_10000:                              ; DATA XREF: WndProc(x,x,x,x)+BC0o
.text:00010000                 call    dword ptr ds:__imp__GetClipboardData@4 ; GetClipboardData(x)
.text:00010006                 cmp     esi, esp
.text:00010008                 call    __RTC_CheckEsp
.text:0001000D                 mov     [ebp+lParam], eax
.text:00010010                 cmp     [ebp+lParam], 0
.text:00010014                 jz      short loc_10036
.text:00010016                 mov     esi, esp
.text:00010018                 mov     ecx, [ebp+lParam]
.text:0001001B                 push    ecx             ; lParam
.text:0001001C                 push    1               ; wParam
.text:0001001E                 push    8006h           ; Msg
.text:00010023                 mov     edx, [ebp+hWnd]
.text:00010026                 push    edx             ; hWnd
.text:00010027                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0001002D                 cmp     esi, esp
.text:0001002F                 call    __RTC_CheckEsp
.text:00010034                 jmp     short loc_1006E
.text:00010036 ; ---------------------------------------------------------------------------
.text:00010036
.text:00010036 loc_10036:                              ; CODE XREF: clipboard_read_threadfunc(x)+4Cj
.text:00010036                 mov     esi, esp
.text:00010038                 push    1               ; uFormat
.text:0001003A                 call    dword ptr ds:__imp__GetClipboardData@4 ; GetClipboardData(x)
.text:00010040                 cmp     esi, esp
.text:00010042                 call    __RTC_CheckEsp
.text:00010047                 mov     [ebp+lParam], eax
.text:0001004A                 cmp     [ebp+lParam], 0
.text:0001004E                 jz      short loc_1006E
.text:00010050                 mov     esi, esp
.text:00010052                 mov     eax, [ebp+lParam]
.text:00010055                 push    eax             ; lParam
.text:00010056                 push    0               ; wParam
.text:00010058                 push    8006h           ; Msg
.text:0001005D                 mov     ecx, [ebp+hWnd]
.text:00010060                 push    ecx             ; hWnd
.text:00010061                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00010067                 cmp     esi, esp
.text:00010069                 call    __RTC_CheckEsp
.text:0001006E
.text:0001006E loc_1006E:                              ; CODE XREF: clipboard_read_threadfunc(x)+6Cj
.text:0001006E                                         ; clipboard_read_threadfunc(x)+86j
.text:0001006E                 mov     esi, esp
.text:00010070                 call    dword ptr ds:__imp__CloseClipboard@0 ; CloseClipboard()
.text:00010076                 cmp     esi, esp
.text:00010078                 call    __RTC_CheckEsp
.text:0001007D
.text:0001007D loc_1007D:                              ; CODE XREF: clipboard_read_threadfunc(x)+2Ej
.text:0001007D                 xor     eax, eax
.text:0001007F                 pop     esi
.text:00010080                 add     esp, 8
.text:00010083                 cmp     ebp, esp
.text:00010085                 call    __RTC_CheckEsp
.text:0001008A                 mov     esp, ebp
.text:0001008C                 pop     ebp
.text:0001008D                 retn    4
.text:0001008D _clipboard_read_threadfunc@4 endp
.text:0001008D
.text:0001008D ; ---------------------------------------------------------------------------
.text:00010090                 db 8 dup(0CCh)
.text:00010098
.text:00010098 ; =============== S U B R O U T I N E =======================================
.text:00010098
.text:00010098 ; Attributes: bp-based frame
.text:00010098
.text:00010098                 public _get_clip
.text:00010098 _get_clip       proc near
.text:00010098
.text:00010098 arg_4           = dword ptr  0Ch
.text:00010098 arg_8           = dword ptr  10h
.text:00010098
.text:00010098                 push    ebp
.text:00010099                 mov     ebp, esp
.text:0001009B                 cmp     [ebp+arg_4], 0
.text:0001009F                 jz      short loc_100B6
.text:000100A1                 mov     eax, [ebp+arg_4]
.text:000100A4                 mov     ecx, ds:_clipboard_contents
.text:000100AA                 mov     [eax], ecx
.text:000100AC                 mov     edx, [ebp+arg_8]
.text:000100AF                 mov     eax, ds:_clipboard_length
.text:000100B4                 mov     [edx], eax
.text:000100B6
.text:000100B6 loc_100B6:                              ; CODE XREF: _get_clip+7j
.text:000100B6                 pop     ebp
.text:000100B7                 retn
.text:000100B7 _get_clip       endp
.text:000100B7
.text:000100B8
.text:000100B8 ; =============== S U B R O U T I N E =======================================
.text:000100B8
.text:000100B8 ; Attributes: noreturn bp-based frame
.text:000100B8
.text:000100B8                 public _fatalbox
.text:000100B8 _fatalbox       proc near
.text:000100B8
.text:000100B8 var_78          = byte ptr -78h
.text:000100B8 Dest            = byte ptr -74h
.text:000100B8 lpText          = dword ptr -0Ch
.text:000100B8 var_8           = dword ptr -8
.text:000100B8 var_4           = dword ptr -4
.text:000100B8 arg_0           = dword ptr  8
.text:000100B8 arg_4           = byte ptr  0Ch
.text:000100B8
.text:000100B8                 push    ebp
.text:000100B9                 mov     ebp, esp
.text:000100BB                 sub     esp, 78h
.text:000100BE                 push    esi
.text:000100BF                 push    edi
.text:000100C0                 lea     edi, [ebp+var_78]
.text:000100C3                 mov     ecx, 1Eh
.text:000100C8                 mov     eax, 0CCCCCCCCh
.text:000100CD                 rep stosd
.text:000100CF                 mov     eax, dword ptr ds:___security_cookie
.text:000100D4                 xor     eax, ebp
.text:000100D6                 mov     [ebp+var_4], eax
.text:000100D9                 lea     eax, [ebp+arg_4]
.text:000100DC                 mov     [ebp+var_8], eax
.text:000100DF                 mov     ecx, [ebp+var_8]
.text:000100E2                 push    ecx
.text:000100E3                 mov     edx, [ebp+arg_0]
.text:000100E6                 push    edx
.text:000100E7                 call    _dupvprintf
.text:000100EC                 add     esp, 8
.text:000100EF                 mov     [ebp+lpText], eax
.text:000100F2                 mov     [ebp+var_8], 0
.text:000100F9                 mov     eax, dword ptr ds:_appname
.text:000100FE                 push    eax
.text:000100FF                 push    offset $SG91428 ; "%.70s Fatal Error"
.text:00010104                 lea     ecx, [ebp+Dest]
.text:00010107                 push    ecx             ; Dest
.text:00010108                 call    _sprintf
.text:0001010D                 add     esp, 0Ch
.text:00010110                 mov     esi, esp
.text:00010112                 push    10h             ; uType
.text:00010114                 lea     edx, [ebp+Dest]
.text:00010117                 push    edx             ; lpCaption
.text:00010118                 mov     eax, [ebp+lpText]
.text:0001011B                 push    eax             ; lpText
.text:0001011C                 mov     ecx, dword ptr ds:_hwnd
.text:00010122                 push    ecx             ; hWnd
.text:00010123                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:00010129                 cmp     esi, esp
.text:0001012B                 call    __RTC_CheckEsp
.text:00010130                 mov     edx, [ebp+lpText]
.text:00010133                 push    edx
.text:00010134                 call    _safefree
.text:00010139                 add     esp, 4
.text:0001013C                 push    1               ; Code
.text:0001013E                 call    _cleanup_exit
.text:0001013E _fatalbox       endp
.text:0001013E
.text:0001013E ; ---------------------------------------------------------------------------
.text:00010143                 db  83h ; â
.text:00010144                 db 0C4h ; -
.text:00010145                 db    4
.text:00010146                 db  52h ; R
.text:00010147                 db  8Bh ; ï
.text:00010148                 db 0CDh ; -
.text:00010149                 db  50h ; P
.text:0001014A                 db  8Dh ; ì
.text:0001014B                 db  15h
.text:0001014C                 db  74h ; t OFF32 SEGDEF [_text,10174]
.text:0001014D                 db    1
.text:0001014E                 db    1
.text:0001014F                 db    0
.text:00010150                 db 0E8h ; F
.text:00010151                 db 0EFh ; n OFF32 EXTDEF [UNDEF,11144]=11144 (_RTC_CheckStackVars(x,x))
.text:00010152                 db  0Fh
.text:00010153                 db    0
.text:00010154                 db    0
.text:00010155                 db  58h ; X
.text:00010156                 db  5Ah ; Z
.text:00010157                 db  5Fh ; _
.text:00010158                 db  5Eh ; ^
.text:00010159                 db  8Bh ; ï
.text:0001015A                 db  4Dh ; M
.text:0001015B                 db 0FCh ; n
.text:0001015C                 db  33h ; 3
.text:0001015D                 db 0CDh ; -
.text:0001015E                 db 0E8h ; F
.text:0001015F                 db 0DDh ; ¦ OFF32 EXTDEF [UNDEF,11140]=11140 (__security_check_cookie(x))
.text:00010160                 db  0Fh
.text:00010161                 db    0
.text:00010162                 db    0
.text:00010163                 db  83h ; â
.text:00010164                 db 0C4h ; -
.text:00010165                 db  78h ; x
.text:00010166                 db  3Bh ; ;
.text:00010167                 db 0ECh ; 8
.text:00010168                 db 0E8h ; F
.text:00010169                 db 0DBh ; ¦ OFF32 EXTDEF [UNDEF,11148]=11148 (__RTC_CheckEsp)
.text:0001016A                 db  0Fh
.text:0001016B                 db    0
.text:0001016C                 db    0
.text:0001016D                 db  8Bh ; ï
.text:0001016E                 db 0E5h ; s
.text:0001016F                 db  5Dh ; ]
.text:00010170                 db 0C3h ; +
.text:00010171                 align 4
.text:00010174 $LN5_6          dd 1
.text:00010178                 dd offset $LN4_5
.text:0001017C $LN4_5          dd 0FFFFFF8Ch, 64h      ; DATA XREF: .text:00010178o
.text:00010184                 dd offset $LN3_5        ; "morestuff"
.text:00010188 $LN3_5          db 'morestuff',0        ; DATA XREF: .text:00010184o
.text:00010192                 align 8
.text:00010198
.text:00010198 ; =============== S U B R O U T I N E =======================================
.text:00010198
.text:00010198 ; Attributes: noreturn bp-based frame
.text:00010198
.text:00010198                 public _modalfatalbox
.text:00010198 _modalfatalbox  proc near
.text:00010198
.text:00010198 var_78          = byte ptr -78h
.text:00010198 Dest            = byte ptr -74h
.text:00010198 lpText          = dword ptr -0Ch
.text:00010198 var_8           = dword ptr -8
.text:00010198 var_4           = dword ptr -4
.text:00010198 arg_0           = dword ptr  8
.text:00010198 arg_4           = byte ptr  0Ch
.text:00010198
.text:00010198                 push    ebp
.text:00010199                 mov     ebp, esp
.text:0001019B                 sub     esp, 78h
.text:0001019E                 push    esi
.text:0001019F                 push    edi
.text:000101A0                 lea     edi, [ebp+var_78]
.text:000101A3                 mov     ecx, 1Eh
.text:000101A8                 mov     eax, 0CCCCCCCCh
.text:000101AD                 rep stosd
.text:000101AF                 mov     eax, dword ptr ds:___security_cookie
.text:000101B4                 xor     eax, ebp
.text:000101B6                 mov     [ebp+var_4], eax
.text:000101B9                 lea     eax, [ebp+arg_4]
.text:000101BC                 mov     [ebp+var_8], eax
.text:000101BF                 mov     ecx, [ebp+var_8]
.text:000101C2                 push    ecx
.text:000101C3                 mov     edx, [ebp+arg_0]
.text:000101C6                 push    edx
.text:000101C7                 call    _dupvprintf
.text:000101CC                 add     esp, 8
.text:000101CF                 mov     [ebp+lpText], eax
.text:000101D2                 mov     [ebp+var_8], 0
.text:000101D9                 mov     eax, dword ptr ds:_appname
.text:000101DE                 push    eax
.text:000101DF                 push    offset $SG91439 ; "%.70s Fatal Error"
.text:000101E4                 lea     ecx, [ebp+Dest]
.text:000101E7                 push    ecx             ; Dest
.text:000101E8                 call    _sprintf
.text:000101ED                 add     esp, 0Ch
.text:000101F0                 mov     esi, esp
.text:000101F2                 push    1010h           ; uType
.text:000101F7                 lea     edx, [ebp+Dest]
.text:000101FA                 push    edx             ; lpCaption
.text:000101FB                 mov     eax, [ebp+lpText]
.text:000101FE                 push    eax             ; lpText
.text:000101FF                 mov     ecx, dword ptr ds:_hwnd
.text:00010205                 push    ecx             ; hWnd
.text:00010206                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:0001020C                 cmp     esi, esp
.text:0001020E                 call    __RTC_CheckEsp
.text:00010213                 mov     edx, [ebp+lpText]
.text:00010216                 push    edx
.text:00010217                 call    _safefree
.text:0001021C                 add     esp, 4
.text:0001021F                 push    1               ; Code
.text:00010221                 call    _cleanup_exit
.text:00010221 _modalfatalbox  endp
.text:00010221
.text:00010221 ; ---------------------------------------------------------------------------
.text:00010226                 db  83h ; â
.text:00010227                 db 0C4h ; -
.text:00010228                 db    4
.text:00010229                 db  52h ; R
.text:0001022A                 db  8Bh ; ï
.text:0001022B                 db 0CDh ; -
.text:0001022C                 db  50h ; P
.text:0001022D                 db  8Dh ; ì
.text:0001022E                 db  15h
.text:0001022F                 db  54h ; T OFF32 SEGDEF [_text,10254]
.text:00010230                 db    2
.text:00010231                 db    1
.text:00010232                 db    0
.text:00010233                 db 0E8h ; F
.text:00010234                 db  0Ch ;  OFF32 EXTDEF [UNDEF,11144]=11144 (_RTC_CheckStackVars(x,x))
.text:00010235                 db  0Fh
.text:00010236                 db    0
.text:00010237                 db    0
.text:00010238                 db  58h ; X
.text:00010239                 db  5Ah ; Z
.text:0001023A                 db  5Fh ; _
.text:0001023B                 db  5Eh ; ^
.text:0001023C                 db  8Bh ; ï
.text:0001023D                 db  4Dh ; M
.text:0001023E                 db 0FCh ; n
.text:0001023F                 db  33h ; 3
.text:00010240                 db 0CDh ; -
.text:00010241                 db 0E8h ; F
.text:00010242                 db 0FAh ; · OFF32 EXTDEF [UNDEF,11140]=11140 (__security_check_cookie(x))
.text:00010243                 db  0Eh
.text:00010244                 db    0
.text:00010245                 db    0
.text:00010246                 db  83h ; â
.text:00010247                 db 0C4h ; -
.text:00010248                 db  78h ; x
.text:00010249                 db  3Bh ; ;
.text:0001024A                 db 0ECh ; 8
.text:0001024B                 db 0E8h ; F
.text:0001024C                 db 0F8h ; ° OFF32 EXTDEF [UNDEF,11148]=11148 (__RTC_CheckEsp)
.text:0001024D                 db  0Eh
.text:0001024E                 db    0
.text:0001024F                 db    0
.text:00010250                 db  8Bh ; ï
.text:00010251                 db 0E5h ; s
.text:00010252                 db  5Dh ; ]
.text:00010253                 db 0C3h ; +
.text:00010254 $LN5_7          dd 1
.text:00010258                 dd offset $LN4_6
.text:0001025C $LN4_6          dd 0FFFFFF8Ch, 64h      ; DATA XREF: .text:00010258o
.text:00010264                 dd offset $LN3_6        ; "morestuff"
.text:00010268 $LN3_6          db 'morestuff',0        ; DATA XREF: .text:00010264o
.text:00010272                 align 8
.text:00010278
.text:00010278 ; =============== S U B R O U T I N E =======================================
.text:00010278
.text:00010278 ; Attributes: bp-based frame
.text:00010278
.text:00010278                 public _nonfatal
.text:00010278 _nonfatal       proc near
.text:00010278
.text:00010278 var_78          = byte ptr -78h
.text:00010278 Dest            = byte ptr -74h
.text:00010278 lpText          = dword ptr -0Ch
.text:00010278 var_8           = dword ptr -8
.text:00010278 var_4           = dword ptr -4
.text:00010278 arg_0           = dword ptr  8
.text:00010278 arg_4           = byte ptr  0Ch
.text:00010278
.text:00010278                 push    ebp
.text:00010279                 mov     ebp, esp
.text:0001027B                 sub     esp, 78h
.text:0001027E                 push    esi
.text:0001027F                 push    edi
.text:00010280                 lea     edi, [ebp+var_78]
.text:00010283                 mov     ecx, 1Eh
.text:00010288                 mov     eax, 0CCCCCCCCh
.text:0001028D                 rep stosd
.text:0001028F                 mov     eax, dword ptr ds:___security_cookie
.text:00010294                 xor     eax, ebp
.text:00010296                 mov     [ebp+var_4], eax
.text:00010299                 lea     eax, [ebp+arg_4]
.text:0001029C                 mov     [ebp+var_8], eax
.text:0001029F                 mov     ecx, [ebp+var_8]
.text:000102A2                 push    ecx
.text:000102A3                 mov     edx, [ebp+arg_0]
.text:000102A6                 push    edx
.text:000102A7                 call    _dupvprintf
.text:000102AC                 add     esp, 8
.text:000102AF                 mov     [ebp+lpText], eax
.text:000102B2                 mov     [ebp+var_8], 0
.text:000102B9                 mov     eax, dword ptr ds:_appname
.text:000102BE                 push    eax
.text:000102BF                 push    offset $SG91450 ; "%.70s Error"
.text:000102C4                 lea     ecx, [ebp+Dest]
.text:000102C7                 push    ecx             ; Dest
.text:000102C8                 call    _sprintf
.text:000102CD                 add     esp, 0Ch
.text:000102D0                 mov     esi, esp
.text:000102D2                 push    10h             ; uType
.text:000102D4                 lea     edx, [ebp+Dest]
.text:000102D7                 push    edx             ; lpCaption
.text:000102D8                 mov     eax, [ebp+lpText]
.text:000102DB                 push    eax             ; lpText
.text:000102DC                 mov     ecx, dword ptr ds:_hwnd
.text:000102E2                 push    ecx             ; hWnd
.text:000102E3                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:000102E9                 cmp     esi, esp
.text:000102EB                 call    __RTC_CheckEsp
.text:000102F0                 mov     edx, [ebp+lpText]
.text:000102F3                 push    edx
.text:000102F4                 call    _safefree
.text:000102F9                 add     esp, 4
.text:000102FC                 push    edx
.text:000102FD                 mov     ecx, ebp
.text:000102FF                 push    eax
.text:00010300                 lea     edx, $LN5_8
.text:00010306                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0001030B                 pop     eax
.text:0001030C                 pop     edx
.text:0001030D                 pop     edi
.text:0001030E                 pop     esi
.text:0001030F                 mov     ecx, [ebp+var_4]
.text:00010312                 xor     ecx, ebp
.text:00010314                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00010319                 add     esp, 78h
.text:0001031C                 cmp     ebp, esp
.text:0001031E                 call    __RTC_CheckEsp
.text:00010323                 mov     esp, ebp
.text:00010325                 pop     ebp
.text:00010326                 retn
.text:00010326 _nonfatal       endp
.text:00010326
.text:00010326 ; ---------------------------------------------------------------------------
.text:00010327                 align 4
.text:00010328 $LN5_8          dd 1                    ; DATA XREF: _nonfatal+88o
.text:0001032C                 dd offset $LN4_7
.text:00010330 $LN4_7          dd 0FFFFFF8Ch, 64h      ; DATA XREF: .text:0001032Co
.text:00010338                 dd offset $LN3_7        ; "morestuff"
.text:0001033C $LN3_7          db 'morestuff',0        ; DATA XREF: .text:00010338o
.text:00010346                 align 4
.text:00010348
.text:00010348 ; =============== S U B R O U T I N E =======================================
.text:00010348
.text:00010348 ; Attributes: bp-based frame
.text:00010348
.text:00010348 _flash_window   proc near               ; CODE XREF: WndProc(x,x,x,x)+1ADDp
.text:00010348                                         ; _flash_window_timer+19p ...
.text:00010348
.text:00010348 var_4           = dword ptr -4
.text:00010348 arg_0           = dword ptr  8
.text:00010348
.text:00010348                 push    ebp
.text:00010349                 mov     ebp, esp
.text:0001034B                 push    ecx
.text:0001034C                 push    esi
.text:0001034D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010354                 push    62h ; 'b'
.text:00010356                 mov     eax, dword ptr ds:_conf
.text:0001035B                 push    eax
.text:0001035C                 call    _conf_get_int
.text:00010361                 add     esp, 8
.text:00010364                 mov     [ebp+var_4], eax
.text:00010367                 cmp     [ebp+arg_0], 0
.text:0001036B                 jz      short loc_10373
.text:0001036D                 cmp     [ebp+var_4], 0
.text:00010371                 jnz     short loc_103BC
.text:00010373
.text:00010373 loc_10373:                              ; CODE XREF: _flash_window+23j
.text:00010373                 cmp     ds:_flashing, 0
.text:0001037A                 jz      short loc_103B7
.text:0001037C                 mov     ds:_flashing, 0
.text:00010386                 cmp     ds:_p_FlashWindowEx, 0
.text:0001038D                 jz      short loc_1039F
.text:0001038F                 push    0
.text:00010391                 push    0
.text:00010393                 push    0
.text:00010395                 call    _flash_window_ex
.text:0001039A                 add     esp, 0Ch
.text:0001039D                 jmp     short loc_103B7
.text:0001039F ; ---------------------------------------------------------------------------
.text:0001039F
.text:0001039F loc_1039F:                              ; CODE XREF: _flash_window+45j
.text:0001039F                 mov     esi, esp
.text:000103A1                 push    0               ; bInvert
.text:000103A3                 mov     ecx, dword ptr ds:_hwnd
.text:000103A9                 push    ecx             ; hWnd
.text:000103AA                 call    dword ptr ds:__imp__FlashWindow@8 ; FlashWindow(x,x)
.text:000103B0                 cmp     esi, esp
.text:000103B2                 call    __RTC_CheckEsp
.text:000103B7
.text:000103B7 loc_103B7:                              ; CODE XREF: _flash_window+32j
.text:000103B7                                         ; _flash_window+55j
.text:000103B7                 jmp     loc_10484
.text:000103BC ; ---------------------------------------------------------------------------
.text:000103BC
.text:000103BC loc_103BC:                              ; CODE XREF: _flash_window+29j
.text:000103BC                 cmp     [ebp+arg_0], 2
.text:000103C0                 jnz     short loc_10431
.text:000103C2                 cmp     ds:_flashing, 0
.text:000103C9                 jnz     short loc_1042F
.text:000103CB                 mov     ds:_flashing, 1
.text:000103D5                 cmp     ds:_p_FlashWindowEx, 0
.text:000103DC                 jz      short loc_103FA
.text:000103DE                 push    0
.text:000103E0                 mov     edx, [ebp+var_4]
.text:000103E3                 sub     edx, 1
.text:000103E6                 neg     edx
.text:000103E8                 sbb     edx, edx
.text:000103EA                 and     edx, 2
.text:000103ED                 push    edx
.text:000103EE                 push    7
.text:000103F0                 call    _flash_window_ex
.text:000103F5                 add     esp, 0Ch
.text:000103F8                 jmp     short loc_1042F
.text:000103FA ; ---------------------------------------------------------------------------
.text:000103FA
.text:000103FA loc_103FA:                              ; CODE XREF: _flash_window+94j
.text:000103FA                 mov     esi, esp
.text:000103FC                 push    1               ; bInvert
.text:000103FE                 mov     eax, dword ptr ds:_hwnd
.text:00010403                 push    eax             ; hWnd
.text:00010404                 call    dword ptr ds:__imp__FlashWindow@8 ; FlashWindow(x,x)
.text:0001040A                 cmp     esi, esp
.text:0001040C                 call    __RTC_CheckEsp
.text:00010411                 mov     ecx, dword ptr ds:_hwnd
.text:00010417                 push    ecx
.text:00010418                 push    offset _flash_window_timer
.text:0001041D                 push    1C2h
.text:00010422                 call    _schedule_timer
.text:00010427                 add     esp, 0Ch
.text:0001042A                 mov     ds:_next_flash, eax
.text:0001042F
.text:0001042F loc_1042F:                              ; CODE XREF: _flash_window+81j
.text:0001042F                                         ; _flash_window+B0j
.text:0001042F                 jmp     short loc_10484
.text:00010431 ; ---------------------------------------------------------------------------
.text:00010431
.text:00010431 loc_10431:                              ; CODE XREF: _flash_window+78j
.text:00010431                 cmp     [ebp+arg_0], 1
.text:00010435                 jnz     short loc_10484
.text:00010437                 cmp     [ebp+var_4], 1
.text:0001043B                 jnz     short loc_10484
.text:0001043D                 cmp     ds:_flashing, 0
.text:00010444                 jz      short loc_10484
.text:00010446                 cmp     ds:_p_FlashWindowEx, 0
.text:0001044D                 jnz     short loc_10484
.text:0001044F                 mov     esi, esp
.text:00010451                 push    1               ; bInvert
.text:00010453                 mov     edx, dword ptr ds:_hwnd
.text:00010459                 push    edx             ; hWnd
.text:0001045A                 call    dword ptr ds:__imp__FlashWindow@8 ; FlashWindow(x,x)
.text:00010460                 cmp     esi, esp
.text:00010462                 call    __RTC_CheckEsp
.text:00010467                 mov     eax, dword ptr ds:_hwnd
.text:0001046C                 push    eax
.text:0001046D                 push    offset _flash_window_timer
.text:00010472                 push    1C2h
.text:00010477                 call    _schedule_timer
.text:0001047C                 add     esp, 0Ch
.text:0001047F                 mov     ds:_next_flash, eax
.text:00010484
.text:00010484 loc_10484:                              ; CODE XREF: _flash_window:loc_103B7j
.text:00010484                                         ; _flash_window:loc_1042Fj ...
.text:00010484                 pop     esi
.text:00010485                 add     esp, 4
.text:00010488                 cmp     ebp, esp
.text:0001048A                 call    __RTC_CheckEsp
.text:0001048F                 mov     esp, ebp
.text:00010491                 pop     ebp
.text:00010492                 retn
.text:00010492 _flash_window   endp
.text:00010492
.text:00010492 ; ---------------------------------------------------------------------------
.text:00010493                 align 8
.text:00010498
.text:00010498 ; =============== S U B R O U T I N E =======================================
.text:00010498
.text:00010498 ; Attributes: bp-based frame
.text:00010498
.text:00010498 _flash_window_ex proc near              ; CODE XREF: _flash_window+4Dp
.text:00010498                                         ; _flash_window+A8p
.text:00010498
.text:00010498 var_1C          = dword ptr -1Ch
.text:00010498 var_18          = dword ptr -18h
.text:00010498 var_14          = dword ptr -14h
.text:00010498 var_10          = dword ptr -10h
.text:00010498 var_C           = dword ptr -0Ch
.text:00010498 var_8           = dword ptr -8
.text:00010498 var_4           = dword ptr -4
.text:00010498 arg_0           = dword ptr  8
.text:00010498 arg_4           = dword ptr  0Ch
.text:00010498 arg_8           = dword ptr  10h
.text:00010498
.text:00010498                 push    ebp
.text:00010499                 mov     ebp, esp
.text:0001049B                 sub     esp, 1Ch
.text:0001049E                 push    esi
.text:0001049F                 mov     eax, 0CCCCCCCCh
.text:000104A4                 mov     [ebp+var_1C], eax
.text:000104A7                 mov     [ebp+var_18], eax
.text:000104AA                 mov     [ebp+var_14], eax
.text:000104AD                 mov     [ebp+var_10], eax
.text:000104B0                 mov     [ebp+var_C], eax
.text:000104B3                 mov     [ebp+var_8], eax
.text:000104B6                 mov     [ebp+var_4], eax
.text:000104B9                 cmp     ds:_p_FlashWindowEx, 0
.text:000104C0                 jz      short loc_104FA
.text:000104C2                 mov     [ebp+var_18], 14h
.text:000104C9                 mov     eax, dword ptr ds:_hwnd
.text:000104CE                 mov     [ebp+var_14], eax
.text:000104D1                 mov     ecx, [ebp+arg_0]
.text:000104D4                 mov     [ebp+var_10], ecx
.text:000104D7                 mov     edx, [ebp+arg_4]
.text:000104DA                 mov     [ebp+var_C], edx
.text:000104DD                 mov     eax, [ebp+arg_8]
.text:000104E0                 mov     [ebp+var_8], eax
.text:000104E3                 mov     esi, esp
.text:000104E5                 lea     ecx, [ebp+var_18]
.text:000104E8                 push    ecx
.text:000104E9                 call    ds:_p_FlashWindowEx
.text:000104EF                 cmp     esi, esp
.text:000104F1                 call    __RTC_CheckEsp
.text:000104F6                 jmp     short loc_104FC
.text:000104F8 ; ---------------------------------------------------------------------------
.text:000104F8                 jmp     short loc_104FC
.text:000104FA ; ---------------------------------------------------------------------------
.text:000104FA
.text:000104FA loc_104FA:                              ; CODE XREF: _flash_window_ex+28j
.text:000104FA                 xor     eax, eax
.text:000104FC
.text:000104FC loc_104FC:                              ; CODE XREF: _flash_window_ex+5Ej
.text:000104FC                                         ; _flash_window_ex+60j
.text:000104FC                 push    edx
.text:000104FD                 mov     ecx, ebp
.text:000104FF                 push    eax
.text:00010500                 lea     edx, $LN7_3
.text:00010506                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0001050B                 pop     eax
.text:0001050C                 pop     edx
.text:0001050D                 pop     esi
.text:0001050E                 add     esp, 1Ch
.text:00010511                 cmp     ebp, esp
.text:00010513                 call    __RTC_CheckEsp
.text:00010518                 mov     esp, ebp
.text:0001051A                 pop     ebp
.text:0001051B                 retn
.text:0001051B _flash_window_ex endp
.text:0001051B
.text:0001051B ; ---------------------------------------------------------------------------
.text:0001051C $LN7_3          dd 1                    ; DATA XREF: _flash_window_ex+68o
.text:00010520                 dd offset $LN6_3
.text:00010524 $LN6_3          dd 0FFFFFFE8h, 14h      ; DATA XREF: .text:00010520o
.text:0001052C                 dd offset $LN5_9
.text:00010530 $LN5_9          dd 0CC006966h, 0CCCCCCCCh ; DATA XREF: .text:0001052Co
.text:00010538
.text:00010538 ; =============== S U B R O U T I N E =======================================
.text:00010538
.text:00010538 ; Attributes: bp-based frame
.text:00010538
.text:00010538 _flash_window_timer proc near           ; DATA XREF: _flash_window+D0o
.text:00010538                                         ; _flash_window+125o
.text:00010538
.text:00010538 arg_4           = dword ptr  0Ch
.text:00010538
.text:00010538                 push    ebp
.text:00010539                 mov     ebp, esp
.text:0001053B                 cmp     ds:_flashing, 0
.text:00010542                 jz      short loc_10559
.text:00010544                 mov     eax, [ebp+arg_4]
.text:00010547                 cmp     eax, ds:_next_flash
.text:0001054D                 jnz     short loc_10559
.text:0001054F                 push    1
.text:00010551                 call    _flash_window
.text:00010556                 add     esp, 4
.text:00010559
.text:00010559 loc_10559:                              ; CODE XREF: _flash_window_timer+Aj
.text:00010559                                         ; _flash_window_timer+15j
.text:00010559                 cmp     ebp, esp
.text:0001055B                 call    __RTC_CheckEsp
.text:00010560                 pop     ebp
.text:00010561                 retn
.text:00010561 _flash_window_timer endp
.text:00010561
.text:00010561 ; ---------------------------------------------------------------------------
.text:00010562                 align 8
.text:00010568
.text:00010568 ; =============== S U B R O U T I N E =======================================
.text:00010568
.text:00010568 ; Attributes: bp-based frame
.text:00010568
.text:00010568                 public _do_beep
.text:00010568 _do_beep        proc near
.text:00010568
.text:00010568 var_D8          = dword ptr -0D8h
.text:00010568 Caption         = byte ptr -0D0h
.text:00010568 Dest            = byte ptr -64h
.text:00010568 var_C           = dword ptr -0Ch
.text:00010568 var_8           = dword ptr -8
.text:00010568 var_4           = dword ptr -4
.text:00010568 arg_4           = dword ptr  0Ch
.text:00010568
.text:00010568                 push    ebp
.text:00010569                 mov     ebp, esp
.text:0001056B                 sub     esp, 0D8h
.text:00010571                 push    esi
.text:00010572                 push    edi
.text:00010573                 lea     edi, [ebp+var_D8]
.text:00010579                 mov     ecx, 36h ; '6'
.text:0001057E                 mov     eax, 0CCCCCCCCh
.text:00010583                 rep stosd
.text:00010585                 mov     eax, dword ptr ds:___security_cookie
.text:0001058A                 xor     eax, ebp
.text:0001058C                 mov     [ebp+var_4], eax
.text:0001058F                 cmp     [ebp+arg_4], 1
.text:00010593                 jnz     short loc_105E4
.text:00010595                 mov     esi, esp
.text:00010597                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:0001059D                 cmp     esi, esp
.text:0001059F                 call    __RTC_CheckEsp
.text:000105A4                 sub     eax, ds:?lastbeep@?2??do_beep@@9@9 ; `do_beep'::`3'::lastbeep
.text:000105AA                 mov     [ebp+var_8], eax
.text:000105AD                 js      short loc_105BA
.text:000105AF                 cmp     [ebp+var_8], 32h ; '2'
.text:000105B3                 jge     short loc_105BA
.text:000105B5                 jmp     loc_10716
.text:000105BA ; ---------------------------------------------------------------------------
.text:000105BA
.text:000105BA loc_105BA:                              ; CODE XREF: _do_beep+45j
.text:000105BA                                         ; _do_beep+4Bj
.text:000105BA                 mov     esi, esp
.text:000105BC                 push    0               ; uType
.text:000105BE                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:000105C4                 cmp     esi, esp
.text:000105C6                 call    __RTC_CheckEsp
.text:000105CB                 mov     esi, esp
.text:000105CD                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:000105D3                 cmp     esi, esp
.text:000105D5                 call    __RTC_CheckEsp
.text:000105DA                 mov     ds:?lastbeep@?2??do_beep@@9@9, eax ; `do_beep'::`3'::lastbeep
.text:000105DF                 jmp     loc_106FE
.text:000105E4 ; ---------------------------------------------------------------------------
.text:000105E4
.text:000105E4 loc_105E4:                              ; CODE XREF: _do_beep+2Bj
.text:000105E4                 cmp     [ebp+arg_4], 3
.text:000105E8                 jnz     loc_1068A
.text:000105EE                 push    67h ; 'g'
.text:000105F0                 mov     eax, dword ptr ds:_conf
.text:000105F5                 push    eax
.text:000105F6                 call    _conf_get_filename
.text:000105FB                 add     esp, 8
.text:000105FE                 mov     [ebp+var_C], eax
.text:00010601                 mov     esi, esp
.text:00010603                 push    20001h          ; fdwSound
.text:00010608                 push    0               ; hmod
.text:0001060A                 mov     ecx, [ebp+var_C]
.text:0001060D                 mov     edx, [ecx]
.text:0001060F                 push    edx             ; pszSound
.text:00010610                 call    dword ptr ds:__imp__PlaySoundA@12 ; PlaySoundA(x,x,x)
.text:00010616                 cmp     esi, esp
.text:00010618                 call    __RTC_CheckEsp
.text:0001061D                 test    eax, eax
.text:0001061F                 jnz     short loc_10688
.text:00010621                 mov     eax, [ebp+var_C]
.text:00010624                 mov     ecx, [eax]
.text:00010626                 push    ecx
.text:00010627                 push    offset $SG91507 ; "Unable to play sound file\n%s\nUsing de"...
.text:0001062C                 lea     edx, [ebp+Dest]
.text:0001062F                 push    edx             ; Dest
.text:00010630                 call    _sprintf
.text:00010635                 add     esp, 0Ch
.text:00010638                 mov     eax, dword ptr ds:_appname
.text:0001063D                 push    eax
.text:0001063E                 push    offset $SG91508 ; "%.70s Sound Error"
.text:00010643                 lea     ecx, [ebp+Caption]
.text:00010649                 push    ecx             ; Dest
.text:0001064A                 call    _sprintf
.text:0001064F                 add     esp, 0Ch
.text:00010652                 mov     esi, esp
.text:00010654                 push    30h ; '0'       ; uType
.text:00010656                 lea     edx, [ebp+Caption]
.text:0001065C                 push    edx             ; lpCaption
.text:0001065D                 lea     eax, [ebp+Dest]
.text:00010660                 push    eax             ; lpText
.text:00010661                 mov     ecx, dword ptr ds:_hwnd
.text:00010667                 push    ecx             ; hWnd
.text:00010668                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:0001066E                 cmp     esi, esp
.text:00010670                 call    __RTC_CheckEsp
.text:00010675                 push    1
.text:00010677                 push    61h ; 'a'
.text:00010679                 mov     edx, dword ptr ds:_conf
.text:0001067F                 push    edx
.text:00010680                 call    _conf_set_int
.text:00010685                 add     esp, 0Ch
.text:00010688
.text:00010688 loc_10688:                              ; CODE XREF: _do_beep+B7j
.text:00010688                 jmp     short loc_106FE
.text:0001068A ; ---------------------------------------------------------------------------
.text:0001068A
.text:0001068A loc_1068A:                              ; CODE XREF: _do_beep+80j
.text:0001068A                 cmp     [ebp+arg_4], 4
.text:0001068E                 jnz     short loc_106FE
.text:00010690                 mov     esi, esp
.text:00010692                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:00010698                 cmp     esi, esp
.text:0001069A                 call    __RTC_CheckEsp
.text:0001069F                 sub     eax, ds:?lastbeep@?5??do_beep@@9@9 ; `do_beep'::`6'::lastbeep
.text:000106A5                 mov     [ebp+var_D8], eax
.text:000106AB                 js      short loc_106B8
.text:000106AD                 cmp     [ebp+var_D8], 32h ; '2'
.text:000106B4                 jge     short loc_106B8
.text:000106B6                 jmp     short loc_10716
.text:000106B8 ; ---------------------------------------------------------------------------
.text:000106B8
.text:000106B8 loc_106B8:                              ; CODE XREF: _do_beep+143j
.text:000106B8                                         ; _do_beep+14Cj
.text:000106B8                 cmp     dword ptr ds:_osVersion+10h, 2
.text:000106BF                 jnz     short loc_106D9
.text:000106C1                 mov     esi, esp
.text:000106C3                 push    64h ; 'd'       ; dwDuration
.text:000106C5                 push    320h            ; dwFreq
.text:000106CA                 call    dword ptr ds:__imp__Beep@8 ; Beep(x,x)
.text:000106D0                 cmp     esi, esp
.text:000106D2                 call    __RTC_CheckEsp
.text:000106D7                 jmp     short loc_106EA
.text:000106D9 ; ---------------------------------------------------------------------------
.text:000106D9
.text:000106D9 loc_106D9:                              ; CODE XREF: _do_beep+157j
.text:000106D9                 mov     esi, esp
.text:000106DB                 push    0FFFFFFFFh      ; uType
.text:000106DD                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:000106E3                 cmp     esi, esp
.text:000106E5                 call    __RTC_CheckEsp
.text:000106EA
.text:000106EA loc_106EA:                              ; CODE XREF: _do_beep+16Fj
.text:000106EA                 mov     esi, esp
.text:000106EC                 call    dword ptr ds:__imp__GetTickCount@0 ; GetTickCount()
.text:000106F2                 cmp     esi, esp
.text:000106F4                 call    __RTC_CheckEsp
.text:000106F9                 mov     ds:?lastbeep@?5??do_beep@@9@9, eax ; `do_beep'::`6'::lastbeep
.text:000106FE
.text:000106FE loc_106FE:                              ; CODE XREF: _do_beep+77j
.text:000106FE                                         ; _do_beep:loc_10688j ...
.text:000106FE                 mov     eax, dword ptr ds:_term
.text:00010703                 cmp     dword ptr [eax+134h], 0
.text:0001070A                 jnz     short loc_10716
.text:0001070C                 push    2
.text:0001070E                 call    _flash_window
.text:00010713                 add     esp, 4
.text:00010716
.text:00010716 loc_10716:                              ; CODE XREF: _do_beep+4Dj
.text:00010716                                         ; _do_beep+14Ej ...
.text:00010716                 push    edx
.text:00010717                 mov     ecx, ebp
.text:00010719                 push    eax
.text:0001071A                 lea     edx, $LN17_0
.text:00010720                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00010725                 pop     eax
.text:00010726                 pop     edx
.text:00010727                 pop     edi
.text:00010728                 pop     esi
.text:00010729                 mov     ecx, [ebp+var_4]
.text:0001072C                 xor     ecx, ebp
.text:0001072E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00010733                 add     esp, 0D8h
.text:00010739                 cmp     ebp, esp
.text:0001073B                 call    __RTC_CheckEsp
.text:00010740                 mov     esp, ebp
.text:00010742                 pop     ebp
.text:00010743                 retn
.text:00010743 _do_beep        endp
.text:00010743
.text:00010743 ; ---------------------------------------------------------------------------
.text:00010744 $LN17_0         dd 2                    ; DATA XREF: _do_beep+1B2o
.text:00010748                 dd offset $LN16_1
.text:0001074C $LN16_1         dd 0FFFFFF9Ch, 54h      ; DATA XREF: .text:00010748o
.text:00010754                 dd offset $LN14_0       ; "buf"
.text:00010758                 dd 0FFFFFF30h, 64h
.text:00010760                 dd offset $LN15         ; "otherbuf"
.text:00010764 $LN15           db 'otherbuf',0         ; DATA XREF: .text:00010760o
.text:0001076D $LN14_0         db 'buf',0              ; DATA XREF: .text:00010754o
.text:00010771                 align 8
.text:00010778
.text:00010778 ; =============== S U B R O U T I N E =======================================
.text:00010778
.text:00010778 ; Attributes: bp-based frame
.text:00010778
.text:00010778                 public _set_iconic
.text:00010778 _set_iconic     proc near
.text:00010778
.text:00010778 arg_4           = dword ptr  0Ch
.text:00010778
.text:00010778                 push    ebp
.text:00010779                 mov     ebp, esp
.text:0001077B                 push    esi
.text:0001077C                 mov     esi, esp
.text:0001077E                 mov     eax, dword ptr ds:_hwnd
.text:00010783                 push    eax             ; hWnd
.text:00010784                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text:0001078A                 cmp     esi, esp
.text:0001078C                 call    __RTC_CheckEsp
.text:00010791                 test    eax, eax
.text:00010793                 jz      short loc_107B5
.text:00010795                 cmp     [ebp+arg_4], 0
.text:00010799                 jnz     short loc_107B3
.text:0001079B                 mov     esi, esp
.text:0001079D                 push    9               ; nCmdShow
.text:0001079F                 mov     ecx, dword ptr ds:_hwnd
.text:000107A5                 push    ecx             ; hWnd
.text:000107A6                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:000107AC                 cmp     esi, esp
.text:000107AE                 call    __RTC_CheckEsp
.text:000107B3
.text:000107B3 loc_107B3:                              ; CODE XREF: _set_iconic+21j
.text:000107B3                 jmp     short loc_107D3
.text:000107B5 ; ---------------------------------------------------------------------------
.text:000107B5
.text:000107B5 loc_107B5:                              ; CODE XREF: _set_iconic+1Bj
.text:000107B5                 cmp     [ebp+arg_4], 0
.text:000107B9                 jz      short loc_107D3
.text:000107BB                 mov     esi, esp
.text:000107BD                 push    6               ; nCmdShow
.text:000107BF                 mov     edx, dword ptr ds:_hwnd
.text:000107C5                 push    edx             ; hWnd
.text:000107C6                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:000107CC                 cmp     esi, esp
.text:000107CE                 call    __RTC_CheckEsp
.text:000107D3
.text:000107D3 loc_107D3:                              ; CODE XREF: _set_iconic:loc_107B3j
.text:000107D3                                         ; _set_iconic+41j
.text:000107D3                 pop     esi
.text:000107D4                 cmp     ebp, esp
.text:000107D6                 call    __RTC_CheckEsp
.text:000107DB                 pop     ebp
.text:000107DC                 retn
.text:000107DC _set_iconic     endp
.text:000107DC
.text:000107DC ; ---------------------------------------------------------------------------
.text:000107DD                 db 0Bh dup(0CCh)
.text:000107E8
.text:000107E8 ; =============== S U B R O U T I N E =======================================
.text:000107E8
.text:000107E8 ; Attributes: bp-based frame
.text:000107E8
.text:000107E8 ; int __cdecl move_window(int, int X, int Y)
.text:000107E8                 public _move_window
.text:000107E8 _move_window    proc near
.text:000107E8
.text:000107E8 var_4           = dword ptr -4
.text:000107E8 X               = dword ptr  0Ch
.text:000107E8 Y               = dword ptr  10h
.text:000107E8
.text:000107E8                 push    ebp
.text:000107E9                 mov     ebp, esp
.text:000107EB                 push    ecx
.text:000107EC                 push    esi
.text:000107ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000107F4                 push    6Ah ; 'j'
.text:000107F6                 mov     eax, dword ptr ds:_conf
.text:000107FB                 push    eax
.text:000107FC                 call    _conf_get_int
.text:00010801                 add     esp, 8
.text:00010804                 mov     [ebp+var_4], eax
.text:00010807                 cmp     [ebp+var_4], 1
.text:0001080B                 jz      short loc_1082D
.text:0001080D                 cmp     [ebp+var_4], 2
.text:00010811                 jz      short loc_1082D
.text:00010813                 mov     esi, esp
.text:00010815                 mov     ecx, dword ptr ds:_hwnd
.text:0001081B                 push    ecx             ; hWnd
.text:0001081C                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:00010822                 cmp     esi, esp
.text:00010824                 call    __RTC_CheckEsp
.text:00010829                 test    eax, eax
.text:0001082B                 jz      short loc_1082F
.text:0001082D
.text:0001082D loc_1082D:                              ; CODE XREF: _move_window+23j
.text:0001082D                                         ; _move_window+29j
.text:0001082D                 jmp     short loc_10855
.text:0001082F ; ---------------------------------------------------------------------------
.text:0001082F
.text:0001082F loc_1082F:                              ; CODE XREF: _move_window+43j
.text:0001082F                 mov     esi, esp
.text:00010831                 push    5               ; uFlags
.text:00010833                 push    0               ; cy
.text:00010835                 push    0               ; cx
.text:00010837                 mov     edx, [ebp+Y]
.text:0001083A                 push    edx             ; Y
.text:0001083B                 mov     eax, [ebp+X]
.text:0001083E                 push    eax             ; X
.text:0001083F                 push    0               ; hWndInsertAfter
.text:00010841                 mov     ecx, dword ptr ds:_hwnd
.text:00010847                 push    ecx             ; hWnd
.text:00010848                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:0001084E                 cmp     esi, esp
.text:00010850                 call    __RTC_CheckEsp
.text:00010855
.text:00010855 loc_10855:                              ; CODE XREF: _move_window:loc_1082Dj
.text:00010855                 pop     esi
.text:00010856                 add     esp, 4
.text:00010859                 cmp     ebp, esp
.text:0001085B                 call    __RTC_CheckEsp
.text:00010860                 mov     esp, ebp
.text:00010862                 pop     ebp
.text:00010863                 retn
.text:00010863 _move_window    endp
.text:00010863
.text:00010863 ; ---------------------------------------------------------------------------
.text:00010864                 align 8
.text:00010868
.text:00010868 ; =============== S U B R O U T I N E =======================================
.text:00010868
.text:00010868 ; Attributes: bp-based frame
.text:00010868
.text:00010868                 public _set_zorder
.text:00010868 _set_zorder     proc near
.text:00010868
.text:00010868 arg_4           = dword ptr  0Ch
.text:00010868
.text:00010868                 push    ebp
.text:00010869                 mov     ebp, esp
.text:0001086B                 push    esi
.text:0001086C                 push    53h ; 'S'
.text:0001086E                 mov     eax, dword ptr ds:_conf
.text:00010873                 push    eax
.text:00010874                 call    _conf_get_int
.text:00010879                 add     esp, 8
.text:0001087C                 test    eax, eax
.text:0001087E                 jz      short loc_10882
.text:00010880                 jmp     short loc_108AC
.text:00010882 ; ---------------------------------------------------------------------------
.text:00010882
.text:00010882 loc_10882:                              ; CODE XREF: _set_zorder+16j
.text:00010882                 mov     esi, esp
.text:00010884                 push    3               ; uFlags
.text:00010886                 push    0               ; cy
.text:00010888                 push    0               ; cx
.text:0001088A                 push    0               ; Y
.text:0001088C                 push    0               ; X
.text:0001088E                 xor     ecx, ecx
.text:00010890                 cmp     [ebp+arg_4], 0
.text:00010894                 setz    cl
.text:00010897                 push    ecx             ; hWndInsertAfter
.text:00010898                 mov     edx, dword ptr ds:_hwnd
.text:0001089E                 push    edx             ; hWnd
.text:0001089F                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:000108A5                 cmp     esi, esp
.text:000108A7                 call    __RTC_CheckEsp
.text:000108AC
.text:000108AC loc_108AC:                              ; CODE XREF: _set_zorder+18j
.text:000108AC                 pop     esi
.text:000108AD                 cmp     ebp, esp
.text:000108AF                 call    __RTC_CheckEsp
.text:000108B4                 pop     ebp
.text:000108B5                 retn
.text:000108B5 _set_zorder     endp
.text:000108B5
.text:000108B5 ; ---------------------------------------------------------------------------
.text:000108B6                 align 4
.text:000108B8
.text:000108B8 ; =============== S U B R O U T I N E =======================================
.text:000108B8
.text:000108B8 ; Attributes: bp-based frame
.text:000108B8
.text:000108B8                 public _refresh_window
.text:000108B8 _refresh_window proc near
.text:000108B8                 push    ebp
.text:000108B9                 mov     ebp, esp
.text:000108BB                 push    esi
.text:000108BC                 mov     esi, esp
.text:000108BE                 push    1               ; bErase
.text:000108C0                 push    0               ; lpRect
.text:000108C2                 mov     eax, dword ptr ds:_hwnd
.text:000108C7                 push    eax             ; hWnd
.text:000108C8                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:000108CE                 cmp     esi, esp
.text:000108D0                 call    __RTC_CheckEsp
.text:000108D5                 pop     esi
.text:000108D6                 cmp     ebp, esp
.text:000108D8                 call    __RTC_CheckEsp
.text:000108DD                 pop     ebp
.text:000108DE                 retn
.text:000108DE _refresh_window endp
.text:000108DE
.text:000108DE ; ---------------------------------------------------------------------------
.text:000108DF                 db 9 dup(0CCh)
.text:000108E8
.text:000108E8 ; =============== S U B R O U T I N E =======================================
.text:000108E8
.text:000108E8 ; Attributes: bp-based frame
.text:000108E8
.text:000108E8                 public _set_zoomed
.text:000108E8 _set_zoomed     proc near
.text:000108E8
.text:000108E8 arg_4           = dword ptr  0Ch
.text:000108E8
.text:000108E8                 push    ebp
.text:000108E9                 mov     ebp, esp
.text:000108EB                 push    esi
.text:000108EC                 mov     esi, esp
.text:000108EE                 mov     eax, dword ptr ds:_hwnd
.text:000108F3                 push    eax             ; hWnd
.text:000108F4                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:000108FA                 cmp     esi, esp
.text:000108FC                 call    __RTC_CheckEsp
.text:00010901                 test    eax, eax
.text:00010903                 jz      short loc_10925
.text:00010905                 cmp     [ebp+arg_4], 0
.text:00010909                 jnz     short loc_10923
.text:0001090B                 mov     esi, esp
.text:0001090D                 push    9               ; nCmdShow
.text:0001090F                 mov     ecx, dword ptr ds:_hwnd
.text:00010915                 push    ecx             ; hWnd
.text:00010916                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:0001091C                 cmp     esi, esp
.text:0001091E                 call    __RTC_CheckEsp
.text:00010923
.text:00010923 loc_10923:                              ; CODE XREF: _set_zoomed+21j
.text:00010923                 jmp     short loc_10943
.text:00010925 ; ---------------------------------------------------------------------------
.text:00010925
.text:00010925 loc_10925:                              ; CODE XREF: _set_zoomed+1Bj
.text:00010925                 cmp     [ebp+arg_4], 0
.text:00010929                 jz      short loc_10943
.text:0001092B                 mov     esi, esp
.text:0001092D                 push    3               ; nCmdShow
.text:0001092F                 mov     edx, dword ptr ds:_hwnd
.text:00010935                 push    edx             ; hWnd
.text:00010936                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:0001093C                 cmp     esi, esp
.text:0001093E                 call    __RTC_CheckEsp
.text:00010943
.text:00010943 loc_10943:                              ; CODE XREF: _set_zoomed:loc_10923j
.text:00010943                                         ; _set_zoomed+41j
.text:00010943                 pop     esi
.text:00010944                 cmp     ebp, esp
.text:00010946                 call    __RTC_CheckEsp
.text:0001094B                 pop     ebp
.text:0001094C                 retn
.text:0001094C _set_zoomed     endp
.text:0001094C
.text:0001094C ; ---------------------------------------------------------------------------
.text:0001094D                 db 0Bh dup(0CCh)
.text:00010958
.text:00010958 ; =============== S U B R O U T I N E =======================================
.text:00010958
.text:00010958 ; Attributes: bp-based frame
.text:00010958
.text:00010958                 public _is_iconic
.text:00010958 _is_iconic      proc near
.text:00010958                 push    ebp
.text:00010959                 mov     ebp, esp
.text:0001095B                 push    esi
.text:0001095C                 mov     esi, esp
.text:0001095E                 mov     eax, dword ptr ds:_hwnd
.text:00010963                 push    eax             ; hWnd
.text:00010964                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text:0001096A                 cmp     esi, esp
.text:0001096C                 call    __RTC_CheckEsp
.text:00010971                 pop     esi
.text:00010972                 cmp     ebp, esp
.text:00010974                 call    __RTC_CheckEsp
.text:00010979                 pop     ebp
.text:0001097A                 retn
.text:0001097A _is_iconic      endp
.text:0001097A
.text:0001097A ; ---------------------------------------------------------------------------
.text:0001097B                 db 0Dh dup(0CCh)
.text:00010988
.text:00010988 ; =============== S U B R O U T I N E =======================================
.text:00010988
.text:00010988 ; Attributes: bp-based frame
.text:00010988
.text:00010988                 public _get_window_pos
.text:00010988 _get_window_pos proc near
.text:00010988
.text:00010988 var_1C          = dword ptr -1Ch
.text:00010988 Rect            = tagRECT ptr -18h
.text:00010988 var_8           = dword ptr -8
.text:00010988 var_4           = dword ptr -4
.text:00010988 arg_4           = dword ptr  0Ch
.text:00010988 arg_8           = dword ptr  10h
.text:00010988
.text:00010988                 push    ebp
.text:00010989                 mov     ebp, esp
.text:0001098B                 sub     esp, 1Ch
.text:0001098E                 push    esi
.text:0001098F                 mov     eax, 0CCCCCCCCh
.text:00010994                 mov     [ebp+var_1C], eax
.text:00010997                 mov     [ebp+Rect.left], eax
.text:0001099A                 mov     [ebp+Rect.top], eax
.text:0001099D                 mov     [ebp+Rect.right], eax
.text:000109A0                 mov     [ebp+Rect.bottom], eax
.text:000109A3                 mov     [ebp+var_8], eax
.text:000109A6                 mov     [ebp+var_4], eax
.text:000109A9                 mov     eax, dword ptr ds:___security_cookie
.text:000109AE                 xor     eax, ebp
.text:000109B0                 mov     [ebp+var_4], eax
.text:000109B3                 mov     esi, esp
.text:000109B5                 lea     eax, [ebp+Rect]
.text:000109B8                 push    eax             ; lpRect
.text:000109B9                 mov     ecx, dword ptr ds:_hwnd
.text:000109BF                 push    ecx             ; hWnd
.text:000109C0                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:000109C6                 cmp     esi, esp
.text:000109C8                 call    __RTC_CheckEsp
.text:000109CD                 mov     edx, [ebp+arg_4]
.text:000109D0                 mov     eax, [ebp+Rect.left]
.text:000109D3                 mov     [edx], eax
.text:000109D5                 mov     ecx, [ebp+arg_8]
.text:000109D8                 mov     edx, [ebp+Rect.top]
.text:000109DB                 mov     [ecx], edx
.text:000109DD                 push    edx
.text:000109DE                 mov     ecx, ebp
.text:000109E0                 push    eax
.text:000109E1                 lea     edx, $LN5_10
.text:000109E7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000109EC                 pop     eax
.text:000109ED                 pop     edx
.text:000109EE                 pop     esi
.text:000109EF                 mov     ecx, [ebp+var_4]
.text:000109F2                 xor     ecx, ebp
.text:000109F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000109F9                 add     esp, 1Ch
.text:000109FC                 cmp     ebp, esp
.text:000109FE                 call    __RTC_CheckEsp
.text:00010A03                 mov     esp, ebp
.text:00010A05                 pop     ebp
.text:00010A06                 retn
.text:00010A06 _get_window_pos endp
.text:00010A06
.text:00010A06 ; ---------------------------------------------------------------------------
.text:00010A07                 align 4
.text:00010A08 $LN5_10         dd 1                    ; DATA XREF: _get_window_pos+59o
.text:00010A0C                 dd offset $LN4_8
.text:00010A10 $LN4_8          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00010A0Co
.text:00010A18                 dd offset $LN3_8
.text:00010A1C $LN3_8          dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00010A18o
.text:00010A28
.text:00010A28 ; =============== S U B R O U T I N E =======================================
.text:00010A28
.text:00010A28 ; Attributes: bp-based frame
.text:00010A28
.text:00010A28                 public _get_window_pixels
.text:00010A28 _get_window_pixels proc near
.text:00010A28
.text:00010A28 var_1C          = dword ptr -1Ch
.text:00010A28 Rect            = tagRECT ptr -18h
.text:00010A28 var_8           = dword ptr -8
.text:00010A28 var_4           = dword ptr -4
.text:00010A28 arg_4           = dword ptr  0Ch
.text:00010A28 arg_8           = dword ptr  10h
.text:00010A28
.text:00010A28                 push    ebp
.text:00010A29                 mov     ebp, esp
.text:00010A2B                 sub     esp, 1Ch
.text:00010A2E                 push    esi
.text:00010A2F                 mov     eax, 0CCCCCCCCh
.text:00010A34                 mov     [ebp+var_1C], eax
.text:00010A37                 mov     [ebp+Rect.left], eax
.text:00010A3A                 mov     [ebp+Rect.top], eax
.text:00010A3D                 mov     [ebp+Rect.right], eax
.text:00010A40                 mov     [ebp+Rect.bottom], eax
.text:00010A43                 mov     [ebp+var_8], eax
.text:00010A46                 mov     [ebp+var_4], eax
.text:00010A49                 mov     eax, dword ptr ds:___security_cookie
.text:00010A4E                 xor     eax, ebp
.text:00010A50                 mov     [ebp+var_4], eax
.text:00010A53                 mov     esi, esp
.text:00010A55                 lea     eax, [ebp+Rect]
.text:00010A58                 push    eax             ; lpRect
.text:00010A59                 mov     ecx, dword ptr ds:_hwnd
.text:00010A5F                 push    ecx             ; hWnd
.text:00010A60                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text:00010A66                 cmp     esi, esp
.text:00010A68                 call    __RTC_CheckEsp
.text:00010A6D                 mov     edx, [ebp+Rect.right]
.text:00010A70                 sub     edx, [ebp+Rect.left]
.text:00010A73                 mov     eax, [ebp+arg_4]
.text:00010A76                 mov     [eax], edx
.text:00010A78                 mov     ecx, [ebp+Rect.bottom]
.text:00010A7B                 sub     ecx, [ebp+Rect.top]
.text:00010A7E                 mov     edx, [ebp+arg_8]
.text:00010A81                 mov     [edx], ecx
.text:00010A83                 push    edx
.text:00010A84                 mov     ecx, ebp
.text:00010A86                 push    eax
.text:00010A87                 lea     edx, $LN5_11
.text:00010A8D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00010A92                 pop     eax
.text:00010A93                 pop     edx
.text:00010A94                 pop     esi
.text:00010A95                 mov     ecx, [ebp+var_4]
.text:00010A98                 xor     ecx, ebp
.text:00010A9A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00010A9F                 add     esp, 1Ch
.text:00010AA2                 cmp     ebp, esp
.text:00010AA4                 call    __RTC_CheckEsp
.text:00010AA9                 mov     esp, ebp
.text:00010AAB                 pop     ebp
.text:00010AAC                 retn
.text:00010AAC _get_window_pixels endp
.text:00010AAC
.text:00010AAC ; ---------------------------------------------------------------------------
.text:00010AAD                 align 10h
.text:00010AB0 $LN5_11         dd 1                    ; DATA XREF: _get_window_pixels+5Fo
.text:00010AB4                 dd offset $LN4_9
.text:00010AB8 $LN4_9          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00010AB4o
.text:00010AC0                 dd offset $LN3_9
.text:00010AC4 $LN3_9          dd 0CCCC0072h           ; DATA XREF: .text:00010AC0o
.text:00010AC8
.text:00010AC8 ; =============== S U B R O U T I N E =======================================
.text:00010AC8
.text:00010AC8 ; Attributes: bp-based frame
.text:00010AC8
.text:00010AC8                 public _get_window_title
.text:00010AC8 _get_window_title proc near
.text:00010AC8
.text:00010AC8 var_4           = dword ptr -4
.text:00010AC8 arg_4           = dword ptr  0Ch
.text:00010AC8
.text:00010AC8                 push    ebp
.text:00010AC9                 mov     ebp, esp
.text:00010ACB                 push    ecx
.text:00010ACC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010AD3                 cmp     [ebp+arg_4], 0
.text:00010AD7                 jz      short loc_10AE3
.text:00010AD9                 mov     eax, ds:_icon_name
.text:00010ADE                 mov     [ebp+var_4], eax
.text:00010AE1                 jmp     short loc_10AEC
.text:00010AE3 ; ---------------------------------------------------------------------------
.text:00010AE3
.text:00010AE3 loc_10AE3:                              ; CODE XREF: _get_window_title+Fj
.text:00010AE3                 mov     ecx, ds:_window_name
.text:00010AE9                 mov     [ebp+var_4], ecx
.text:00010AEC
.text:00010AEC loc_10AEC:                              ; CODE XREF: _get_window_title+19j
.text:00010AEC                 mov     eax, [ebp+var_4]
.text:00010AEF                 mov     esp, ebp
.text:00010AF1                 pop     ebp
.text:00010AF2                 retn
.text:00010AF2 _get_window_title endp
.text:00010AF2
.text:00010AF2 ; ---------------------------------------------------------------------------
.text:00010AF3                 align 8
.text:00010AF8
.text:00010AF8 ; =============== S U B R O U T I N E =======================================
.text:00010AF8
.text:00010AF8 ; Attributes: bp-based frame
.text:00010AF8
.text:00010AF8 _is_full_screen proc near               ; CODE XREF: WndProc(x,x,x,x)+B25p
.text:00010AF8                                         ; WndProc(x,x,x,x)+B72p ...
.text:00010AF8                 push    ebp
.text:00010AF9                 mov     ebp, esp
.text:00010AFB                 push    esi
.text:00010AFC                 mov     esi, esp
.text:00010AFE                 mov     eax, dword ptr ds:_hwnd
.text:00010B03                 push    eax             ; hWnd
.text:00010B04                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:00010B0A                 cmp     esi, esp
.text:00010B0C                 call    __RTC_CheckEsp
.text:00010B11                 test    eax, eax
.text:00010B13                 jnz     short loc_10B19
.text:00010B15                 xor     eax, eax
.text:00010B17                 jmp     short loc_10B41
.text:00010B19 ; ---------------------------------------------------------------------------
.text:00010B19
.text:00010B19 loc_10B19:                              ; CODE XREF: _is_full_screen+1Bj
.text:00010B19                 mov     esi, esp
.text:00010B1B                 push    0FFFFFFF0h      ; nIndex
.text:00010B1D                 mov     ecx, dword ptr ds:_hwnd
.text:00010B23                 push    ecx             ; hWnd
.text:00010B24                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:00010B2A                 cmp     esi, esp
.text:00010B2C                 call    __RTC_CheckEsp
.text:00010B31                 and     eax, 0C00000h
.text:00010B36                 jz      short loc_10B3C
.text:00010B38                 xor     eax, eax
.text:00010B3A                 jmp     short loc_10B41
.text:00010B3C ; ---------------------------------------------------------------------------
.text:00010B3C
.text:00010B3C loc_10B3C:                              ; CODE XREF: _is_full_screen+3Ej
.text:00010B3C                 mov     eax, 1
.text:00010B41
.text:00010B41 loc_10B41:                              ; CODE XREF: _is_full_screen+1Fj
.text:00010B41                                         ; _is_full_screen+42j
.text:00010B41                 pop     esi
.text:00010B42                 cmp     ebp, esp
.text:00010B44                 call    __RTC_CheckEsp
.text:00010B49                 pop     ebp
.text:00010B4A                 retn
.text:00010B4A _is_full_screen endp
.text:00010B4A
.text:00010B4A ; ---------------------------------------------------------------------------
.text:00010B4B                 db 0Dh dup(0CCh)
.text:00010B58
.text:00010B58 ; =============== S U B R O U T I N E =======================================
.text:00010B58
.text:00010B58 ; Attributes: bp-based frame
.text:00010B58
.text:00010B58 _get_fullscreen_rect proc near          ; CODE XREF: WinMain(x,x,x,x)+ABCp
.text:00010B58                                         ; _request_resize+AFp ...
.text:00010B58
.text:00010B58 var_38          = byte ptr -38h
.text:00010B58 var_34          = tagMONITORINFO ptr -34h
.text:00010B58 var_8           = dword ptr -8
.text:00010B58 var_4           = dword ptr -4
.text:00010B58 arg_0           = dword ptr  8
.text:00010B58
.text:00010B58                 push    ebp
.text:00010B59                 mov     ebp, esp
.text:00010B5B                 sub     esp, 38h
.text:00010B5E                 push    edi
.text:00010B5F                 lea     edi, [ebp+var_38]
.text:00010B62                 mov     ecx, 0Eh
.text:00010B67                 mov     eax, 0CCCCCCCCh
.text:00010B6C                 rep stosd
.text:00010B6E                 mov     eax, dword ptr ds:___security_cookie
.text:00010B73                 xor     eax, ebp
.text:00010B75                 mov     [ebp+var_4], eax
.text:00010B78                 push    2               ; DWORD
.text:00010B7A                 mov     eax, dword ptr ds:_hwnd
.text:00010B7F                 push    eax             ; HWND
.text:00010B80                 call    _xMonitorFromWindow@8 ; xMonitorFromWindow(x,x)
.text:00010B85                 mov     [ebp+var_8], eax
.text:00010B88                 mov     [ebp+var_34.cbSize], 28h ; '('
.text:00010B8F                 lea     ecx, [ebp+var_34]
.text:00010B92                 push    ecx             ; LPMONITORINFO
.text:00010B93                 mov     edx, [ebp+var_8]
.text:00010B96                 push    edx             ; HMONITOR
.text:00010B97                 call    _xGetMonitorInfo@8 ; xGetMonitorInfo(x,x)
.text:00010B9C                 mov     eax, [ebp+arg_0]
.text:00010B9F                 mov     ecx, [ebp+var_34.rcMonitor.left]
.text:00010BA2                 mov     [eax], ecx
.text:00010BA4                 mov     edx, [ebp+var_34.rcMonitor.top]
.text:00010BA7                 mov     [eax+4], edx
.text:00010BAA                 mov     ecx, [ebp+var_34.rcMonitor.right]
.text:00010BAD                 mov     [eax+8], ecx
.text:00010BB0                 mov     edx, [ebp+var_34.rcMonitor.bottom]
.text:00010BB3                 mov     [eax+0Ch], edx
.text:00010BB6                 mov     eax, 1
.text:00010BBB                 push    edx
.text:00010BBC                 mov     ecx, ebp
.text:00010BBE                 push    eax
.text:00010BBF                 lea     edx, $LN5_12
.text:00010BC5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00010BCA                 pop     eax
.text:00010BCB                 pop     edx
.text:00010BCC                 pop     edi
.text:00010BCD                 mov     ecx, [ebp+var_4]
.text:00010BD0                 xor     ecx, ebp
.text:00010BD2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00010BD7                 add     esp, 38h
.text:00010BDA                 cmp     ebp, esp
.text:00010BDC                 call    __RTC_CheckEsp
.text:00010BE1                 mov     esp, ebp
.text:00010BE3                 pop     ebp
.text:00010BE4                 retn
.text:00010BE4 _get_fullscreen_rect endp
.text:00010BE4
.text:00010BE4 ; ---------------------------------------------------------------------------
.text:00010BE5                 align 4
.text:00010BE8 $LN5_12         dd 1                    ; DATA XREF: _get_fullscreen_rect+67o
.text:00010BEC                 dd offset $LN4_10
.text:00010BF0 $LN4_10         db 0CCh                 ; DATA XREF: .text:00010BECo
.text:00010BF1                 db 3 dup(0FFh)
.text:00010BF4                 dd offset _lfont.lfFaceName+8
.text:00010BF8                 dd offset $LN3_10
.text:00010BFC $LN3_10         dd 0CC00696Dh, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00010BF8o
.text:00010C08
.text:00010C08 ; =============== S U B R O U T I N E =======================================
.text:00010C08
.text:00010C08 ; Attributes: bp-based frame
.text:00010C08
.text:00010C08 _make_full_screen proc near             ; CODE XREF: WndProc(x,x,x,x)+21B6p
.text:00010C08                                         ; _flip_full_screen+40p
.text:00010C08
.text:00010C08 var_24          = dword ptr -24h
.text:00010C08 var_20          = dword ptr -20h
.text:00010C08 X               = dword ptr -1Ch
.text:00010C08 Y               = dword ptr -18h
.text:00010C08 var_14          = dword ptr -14h
.text:00010C08 var_10          = dword ptr -10h
.text:00010C08 var_C           = dword ptr -0Ch
.text:00010C08 dwNewLong       = dword ptr -8
.text:00010C08 var_4           = dword ptr -4
.text:00010C08
.text:00010C08                 push    ebp
.text:00010C09                 mov     ebp, esp
.text:00010C0B                 sub     esp, 24h
.text:00010C0E                 push    esi
.text:00010C0F                 mov     eax, 0CCCCCCCCh
.text:00010C14                 mov     [ebp+var_24], eax
.text:00010C17                 mov     [ebp+var_20], eax
.text:00010C1A                 mov     [ebp+X], eax
.text:00010C1D                 mov     [ebp+Y], eax
.text:00010C20                 mov     [ebp+var_14], eax
.text:00010C23                 mov     [ebp+var_10], eax
.text:00010C26                 mov     [ebp+var_C], eax
.text:00010C29                 mov     [ebp+dwNewLong], eax
.text:00010C2C                 mov     [ebp+var_4], eax
.text:00010C2F                 mov     eax, dword ptr ds:___security_cookie
.text:00010C34                 xor     eax, ebp
.text:00010C36                 mov     [ebp+var_4], eax
.text:00010C39                 mov     esi, esp
.text:00010C3B                 mov     eax, dword ptr ds:_hwnd
.text:00010C40                 push    eax             ; hWnd
.text:00010C41                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:00010C47                 cmp     esi, esp
.text:00010C49                 call    __RTC_CheckEsp
.text:00010C4E                 test    eax, eax
.text:00010C50                 jnz     short loc_10C69
.text:00010C52                 push    161Dh           ; Line
.text:00010C57                 push    offset $SG91595 ; "..\\..\\window.c"
.text:00010C5C                 push    offset $SG91596 ; "IsZoomed(hwnd)"
.text:00010C61                 call    __wassert
.text:00010C66 ; ---------------------------------------------------------------------------
.text:00010C66                 add     esp, 0Ch
.text:00010C69
.text:00010C69 loc_10C69:                              ; CODE XREF: _make_full_screen+48j
.text:00010C69                 call    _is_full_screen
.text:00010C6E                 test    eax, eax
.text:00010C70                 jz      short loc_10C77
.text:00010C72                 jmp     loc_10D68
.text:00010C77 ; ---------------------------------------------------------------------------
.text:00010C77
.text:00010C77 loc_10C77:                              ; CODE XREF: _make_full_screen+68j
.text:00010C77                 mov     esi, esp
.text:00010C79                 push    0FFFFFFF0h      ; nIndex
.text:00010C7B                 mov     edx, dword ptr ds:_hwnd
.text:00010C81                 push    edx             ; hWnd
.text:00010C82                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:00010C88                 cmp     esi, esp
.text:00010C8A                 call    __RTC_CheckEsp
.text:00010C8F                 mov     [ebp+dwNewLong], eax
.text:00010C92                 mov     eax, [ebp+dwNewLong]
.text:00010C95                 and     eax, 0FF3BFFFFh
.text:00010C9A                 mov     [ebp+dwNewLong], eax
.text:00010C9D                 push    69h ; 'i'
.text:00010C9F                 mov     ecx, dword ptr ds:_conf
.text:00010CA5                 push    ecx
.text:00010CA6                 call    _conf_get_int
.text:00010CAB                 add     esp, 8
.text:00010CAE                 test    eax, eax
.text:00010CB0                 jz      short loc_10CC0
.text:00010CB2                 mov     edx, [ebp+dwNewLong]
.text:00010CB5                 or      edx, 200000h
.text:00010CBB                 mov     [ebp+dwNewLong], edx
.text:00010CBE                 jmp     short loc_10CCB
.text:00010CC0 ; ---------------------------------------------------------------------------
.text:00010CC0
.text:00010CC0 loc_10CC0:                              ; CODE XREF: _make_full_screen+A8j
.text:00010CC0                 mov     eax, [ebp+dwNewLong]
.text:00010CC3                 and     eax, 0FFDFFFFFh
.text:00010CC8                 mov     [ebp+dwNewLong], eax
.text:00010CCB
.text:00010CCB loc_10CCB:                              ; CODE XREF: _make_full_screen+B6j
.text:00010CCB                 mov     esi, esp
.text:00010CCD                 mov     ecx, [ebp+dwNewLong]
.text:00010CD0                 push    ecx             ; dwNewLong
.text:00010CD1                 push    0FFFFFFF0h      ; nIndex
.text:00010CD3                 mov     edx, dword ptr ds:_hwnd
.text:00010CD9                 push    edx             ; hWnd
.text:00010CDA                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00010CE0                 cmp     esi, esp
.text:00010CE2                 call    __RTC_CheckEsp
.text:00010CE7                 lea     eax, [ebp+X]
.text:00010CEA                 push    eax
.text:00010CEB                 call    _get_fullscreen_rect
.text:00010CF0                 add     esp, 4
.text:00010CF3                 mov     esi, esp
.text:00010CF5                 push    20h ; ' '       ; uFlags
.text:00010CF7                 mov     ecx, [ebp+var_10]
.text:00010CFA                 sub     ecx, [ebp+Y]
.text:00010CFD                 push    ecx             ; cy
.text:00010CFE                 mov     edx, [ebp+var_14]
.text:00010D01                 sub     edx, [ebp+X]
.text:00010D04                 push    edx             ; cx
.text:00010D05                 mov     eax, [ebp+Y]
.text:00010D08                 push    eax             ; Y
.text:00010D09                 mov     ecx, [ebp+X]
.text:00010D0C                 push    ecx             ; X
.text:00010D0D                 push    0               ; hWndInsertAfter
.text:00010D0F                 mov     edx, dword ptr ds:_hwnd
.text:00010D15                 push    edx             ; hWnd
.text:00010D16                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:00010D1C                 cmp     esi, esp
.text:00010D1E                 call    __RTC_CheckEsp
.text:00010D23                 push    0
.text:00010D25                 call    _reset_window
.text:00010D2A                 add     esp, 4
.text:00010D2D                 mov     [ebp+var_24], 0
.text:00010D34                 jmp     short loc_10D3F
.text:00010D36 ; ---------------------------------------------------------------------------
.text:00010D36
.text:00010D36 loc_10D36:                              ; CODE XREF: _make_full_screen+15Ej
.text:00010D36                 mov     eax, [ebp+var_24]
.text:00010D39                 add     eax, 1
.text:00010D3C                 mov     [ebp+var_24], eax
.text:00010D3F
.text:00010D3F loc_10D3F:                              ; CODE XREF: _make_full_screen+12Cj
.text:00010D3F                 cmp     [ebp+var_24], 2
.text:00010D43                 jnb     short loc_10D68
.text:00010D45                 mov     esi, esp
.text:00010D47                 push    8               ; uCheck
.text:00010D49                 push    180h            ; uIDCheckItem
.text:00010D4E                 mov     ecx, [ebp+var_24]
.text:00010D51                 mov     edx, ds:_popup_menus[ecx*4]
.text:00010D58                 push    edx             ; hMenu
.text:00010D59                 call    dword ptr ds:__imp__CheckMenuItem@12 ; CheckMenuItem(x,x,x)
.text:00010D5F                 cmp     esi, esp
.text:00010D61                 call    __RTC_CheckEsp
.text:00010D66                 jmp     short loc_10D36
.text:00010D68 ; ---------------------------------------------------------------------------
.text:00010D68
.text:00010D68 loc_10D68:                              ; CODE XREF: _make_full_screen+6Aj
.text:00010D68                                         ; _make_full_screen+13Bj
.text:00010D68                 push    edx
.text:00010D69                 mov     ecx, ebp
.text:00010D6B                 push    eax
.text:00010D6C                 lea     edx, $LN12_1
.text:00010D72                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00010D77                 pop     eax
.text:00010D78                 pop     edx
.text:00010D79                 pop     esi
.text:00010D7A                 mov     ecx, [ebp+var_4]
.text:00010D7D                 xor     ecx, ebp
.text:00010D7F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00010D84                 add     esp, 24h
.text:00010D87                 cmp     ebp, esp
.text:00010D89                 call    __RTC_CheckEsp
.text:00010D8E                 mov     esp, ebp
.text:00010D90                 pop     ebp
.text:00010D91                 retn
.text:00010D91 _make_full_screen endp
.text:00010D91
.text:00010D91 ; ---------------------------------------------------------------------------
.text:00010D92                 align 4
.text:00010D94 $LN12_1         dd 1                    ; DATA XREF: _make_full_screen+164o
.text:00010D98                 dd offset $LN11_1
.text:00010D9C $LN11_1         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00010D98o
.text:00010DA4                 dd offset $LN10_4
.text:00010DA8 $LN10_4         dd 0CC007373h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00010DA4o
.text:00010DB8
.text:00010DB8 ; =============== S U B R O U T I N E =======================================
.text:00010DB8
.text:00010DB8 ; Attributes: bp-based frame
.text:00010DB8
.text:00010DB8 _clear_full_screen proc near            ; CODE XREF: WndProc(x,x,x,x)+217Ep
.text:00010DB8
.text:00010DB8 var_C           = dword ptr -0Ch
.text:00010DB8 dwNewLong       = dword ptr -8
.text:00010DB8 var_4           = dword ptr -4
.text:00010DB8
.text:00010DB8                 push    ebp
.text:00010DB9                 mov     ebp, esp
.text:00010DBB                 sub     esp, 0Ch
.text:00010DBE                 push    esi
.text:00010DBF                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00010DC6                 mov     [ebp+dwNewLong], 0CCCCCCCCh
.text:00010DCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00010DD4                 mov     esi, esp
.text:00010DD6                 push    0FFFFFFF0h      ; nIndex
.text:00010DD8                 mov     eax, dword ptr ds:_hwnd
.text:00010DDD                 push    eax             ; hWnd
.text:00010DDE                 call    dword ptr ds:__imp__GetWindowLongA@8 ; GetWindowLongA(x,x)
.text:00010DE4                 cmp     esi, esp
.text:00010DE6                 call    __RTC_CheckEsp
.text:00010DEB                 mov     [ebp+var_4], eax
.text:00010DEE                 mov     ecx, [ebp+var_4]
.text:00010DF1                 mov     [ebp+dwNewLong], ecx
.text:00010DF4                 mov     edx, [ebp+dwNewLong]
.text:00010DF7                 or      edx, 0C00000h
.text:00010DFD                 mov     [ebp+dwNewLong], edx
.text:00010E00                 push    6Ah ; 'j'
.text:00010E02                 mov     eax, dword ptr ds:_conf
.text:00010E07                 push    eax
.text:00010E08                 call    _conf_get_int
.text:00010E0D                 add     esp, 8
.text:00010E10                 cmp     eax, 1
.text:00010E13                 jnz     short loc_10E23
.text:00010E15                 mov     ecx, [ebp+dwNewLong]
.text:00010E18                 and     ecx, 0FFFBFFFFh
.text:00010E1E                 mov     [ebp+dwNewLong], ecx
.text:00010E21                 jmp     short loc_10E2F
.text:00010E23 ; ---------------------------------------------------------------------------
.text:00010E23
.text:00010E23 loc_10E23:                              ; CODE XREF: _clear_full_screen+5Bj
.text:00010E23                 mov     edx, [ebp+dwNewLong]
.text:00010E26                 or      edx, 40000h
.text:00010E2C                 mov     [ebp+dwNewLong], edx
.text:00010E2F
.text:00010E2F loc_10E2F:                              ; CODE XREF: _clear_full_screen+69j
.text:00010E2F                 push    68h ; 'h'
.text:00010E31                 mov     eax, dword ptr ds:_conf
.text:00010E36                 push    eax
.text:00010E37                 call    _conf_get_int
.text:00010E3C                 add     esp, 8
.text:00010E3F                 test    eax, eax
.text:00010E41                 jz      short loc_10E51
.text:00010E43                 mov     ecx, [ebp+dwNewLong]
.text:00010E46                 or      ecx, 200000h
.text:00010E4C                 mov     [ebp+dwNewLong], ecx
.text:00010E4F                 jmp     short loc_10E5D
.text:00010E51 ; ---------------------------------------------------------------------------
.text:00010E51
.text:00010E51 loc_10E51:                              ; CODE XREF: _clear_full_screen+89j
.text:00010E51                 mov     edx, [ebp+dwNewLong]
.text:00010E54                 and     edx, 0FFDFFFFFh
.text:00010E5A                 mov     [ebp+dwNewLong], edx
.text:00010E5D
.text:00010E5D loc_10E5D:                              ; CODE XREF: _clear_full_screen+97j
.text:00010E5D                 mov     eax, [ebp+dwNewLong]
.text:00010E60                 cmp     eax, [ebp+var_4]
.text:00010E63                 jz      short loc_10EA2
.text:00010E65                 mov     esi, esp
.text:00010E67                 mov     ecx, [ebp+dwNewLong]
.text:00010E6A                 push    ecx             ; dwNewLong
.text:00010E6B                 push    0FFFFFFF0h      ; nIndex
.text:00010E6D                 mov     edx, dword ptr ds:_hwnd
.text:00010E73                 push    edx             ; hWnd
.text:00010E74                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00010E7A                 cmp     esi, esp
.text:00010E7C                 call    __RTC_CheckEsp
.text:00010E81                 mov     esi, esp
.text:00010E83                 push    27h ; '''       ; uFlags
.text:00010E85                 push    0               ; cy
.text:00010E87                 push    0               ; cx
.text:00010E89                 push    0               ; Y
.text:00010E8B                 push    0               ; X
.text:00010E8D                 push    0               ; hWndInsertAfter
.text:00010E8F                 mov     eax, dword ptr ds:_hwnd
.text:00010E94                 push    eax             ; hWnd
.text:00010E95                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:00010E9B                 cmp     esi, esp
.text:00010E9D                 call    __RTC_CheckEsp
.text:00010EA2
.text:00010EA2 loc_10EA2:                              ; CODE XREF: _clear_full_screen+ABj
.text:00010EA2                 mov     [ebp+var_C], 0
.text:00010EA9                 jmp     short loc_10EB4
.text:00010EAB ; ---------------------------------------------------------------------------
.text:00010EAB
.text:00010EAB loc_10EAB:                              ; CODE XREF: _clear_full_screen+123j
.text:00010EAB                 mov     ecx, [ebp+var_C]
.text:00010EAE                 add     ecx, 1
.text:00010EB1                 mov     [ebp+var_C], ecx
.text:00010EB4
.text:00010EB4 loc_10EB4:                              ; CODE XREF: _clear_full_screen+F1j
.text:00010EB4                 cmp     [ebp+var_C], 2
.text:00010EB8                 jnb     short loc_10EDD
.text:00010EBA                 mov     esi, esp
.text:00010EBC                 push    0               ; uCheck
.text:00010EBE                 push    180h            ; uIDCheckItem
.text:00010EC3                 mov     edx, [ebp+var_C]
.text:00010EC6                 mov     eax, ds:_popup_menus[edx*4]
.text:00010ECD                 push    eax             ; hMenu
.text:00010ECE                 call    dword ptr ds:__imp__CheckMenuItem@12 ; CheckMenuItem(x,x,x)
.text:00010ED4                 cmp     esi, esp
.text:00010ED6                 call    __RTC_CheckEsp
.text:00010EDB                 jmp     short loc_10EAB
.text:00010EDD ; ---------------------------------------------------------------------------
.text:00010EDD
.text:00010EDD loc_10EDD:                              ; CODE XREF: _clear_full_screen+100j
.text:00010EDD                 pop     esi
.text:00010EDE                 add     esp, 0Ch
.text:00010EE1                 cmp     ebp, esp
.text:00010EE3                 call    __RTC_CheckEsp
.text:00010EE8                 mov     esp, ebp
.text:00010EEA                 pop     ebp
.text:00010EEB                 retn
.text:00010EEB _clear_full_screen endp
.text:00010EEB
.text:00010EEB ; ---------------------------------------------------------------------------
.text:00010EEC                 db 0Ch dup(0CCh)
.text:00010EF8
.text:00010EF8 ; =============== S U B R O U T I N E =======================================
.text:00010EF8
.text:00010EF8 ; Attributes: bp-based frame
.text:00010EF8
.text:00010EF8 _flip_full_screen proc near             ; CODE XREF: WndProc(x,x,x,x):loc_7AEAp
.text:00010EF8                                         ; _TranslateKey+721p
.text:00010EF8                 push    ebp
.text:00010EF9                 mov     ebp, esp
.text:00010EFB                 push    esi
.text:00010EFC                 call    _is_full_screen
.text:00010F01                 test    eax, eax
.text:00010F03                 jz      short loc_10F1E
.text:00010F05                 mov     esi, esp
.text:00010F07                 push    9               ; nCmdShow
.text:00010F09                 mov     eax, dword ptr ds:_hwnd
.text:00010F0E                 push    eax             ; hWnd
.text:00010F0F                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:00010F15                 cmp     esi, esp
.text:00010F17                 call    __RTC_CheckEsp
.text:00010F1C                 jmp     short loc_10F75
.text:00010F1E ; ---------------------------------------------------------------------------
.text:00010F1E
.text:00010F1E loc_10F1E:                              ; CODE XREF: _flip_full_screen+Bj
.text:00010F1E                 mov     esi, esp
.text:00010F20                 mov     ecx, dword ptr ds:_hwnd
.text:00010F26                 push    ecx             ; hWnd
.text:00010F27                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text:00010F2D                 cmp     esi, esp
.text:00010F2F                 call    __RTC_CheckEsp
.text:00010F34                 test    eax, eax
.text:00010F36                 jz      short loc_10F3F
.text:00010F38                 call    _make_full_screen
.text:00010F3D                 jmp     short loc_10F75
.text:00010F3F ; ---------------------------------------------------------------------------
.text:00010F3F
.text:00010F3F loc_10F3F:                              ; CODE XREF: _flip_full_screen+3Ej
.text:00010F3F                 mov     esi, esp
.text:00010F41                 push    0               ; lParam
.text:00010F43                 push    0               ; wParam
.text:00010F45                 push    8003h           ; Msg
.text:00010F4A                 mov     edx, dword ptr ds:_hwnd
.text:00010F50                 push    edx             ; hWnd
.text:00010F51                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00010F57                 cmp     esi, esp
.text:00010F59                 call    __RTC_CheckEsp
.text:00010F5E                 mov     esi, esp
.text:00010F60                 push    3               ; nCmdShow
.text:00010F62                 mov     eax, dword ptr ds:_hwnd
.text:00010F67                 push    eax             ; hWnd
.text:00010F68                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text:00010F6E                 cmp     esi, esp
.text:00010F70                 call    __RTC_CheckEsp
.text:00010F75
.text:00010F75 loc_10F75:                              ; CODE XREF: _flip_full_screen+24j
.text:00010F75                                         ; _flip_full_screen+45j
.text:00010F75                 pop     esi
.text:00010F76                 cmp     ebp, esp
.text:00010F78                 call    __RTC_CheckEsp
.text:00010F7D                 pop     ebp
.text:00010F7E                 retn
.text:00010F7E _flip_full_screen endp
.text:00010F7E
.text:00010F7E ; ---------------------------------------------------------------------------
.text:00010F7F                 db 9 dup(0CCh)
.text:00010F88
.text:00010F88 ; =============== S U B R O U T I N E =======================================
.text:00010F88
.text:00010F88 ; Attributes: bp-based frame
.text:00010F88
.text:00010F88                 public _frontend_keypress
.text:00010F88 _frontend_keypress proc near
.text:00010F88                 push    ebp
.text:00010F89                 mov     ebp, esp
.text:00010F8B                 pop     ebp
.text:00010F8C                 retn
.text:00010F8C _frontend_keypress endp
.text:00010F8C
.text:00010F8C ; ---------------------------------------------------------------------------
.text:00010F8D                 db 0Bh dup(0CCh)
.text:00010F98
.text:00010F98 ; =============== S U B R O U T I N E =======================================
.text:00010F98
.text:00010F98 ; Attributes: bp-based frame
.text:00010F98
.text:00010F98                 public _from_backend
.text:00010F98 _from_backend   proc near
.text:00010F98
.text:00010F98 arg_4           = dword ptr  0Ch
.text:00010F98 arg_8           = dword ptr  10h
.text:00010F98 arg_C           = dword ptr  14h
.text:00010F98
.text:00010F98                 push    ebp
.text:00010F99                 mov     ebp, esp
.text:00010F9B                 mov     eax, [ebp+arg_C]
.text:00010F9E                 push    eax
.text:00010F9F                 mov     ecx, [ebp+arg_8]
.text:00010FA2                 push    ecx
.text:00010FA3                 mov     edx, [ebp+arg_4]
.text:00010FA6                 push    edx
.text:00010FA7                 mov     eax, dword ptr ds:_term
.text:00010FAC                 push    eax
.text:00010FAD                 call    _term_data
.text:00010FB2                 add     esp, 10h
.text:00010FB5                 cmp     ebp, esp
.text:00010FB7                 call    __RTC_CheckEsp
.text:00010FBC                 pop     ebp
.text:00010FBD                 retn
.text:00010FBD _from_backend   endp
.text:00010FBD
.text:00010FBD ; ---------------------------------------------------------------------------
.text:00010FBE                 db 0Ah dup(0CCh)
.text:00010FC8
.text:00010FC8 ; =============== S U B R O U T I N E =======================================
.text:00010FC8
.text:00010FC8 ; Attributes: bp-based frame
.text:00010FC8
.text:00010FC8                 public _from_backend_untrusted
.text:00010FC8 _from_backend_untrusted proc near
.text:00010FC8
.text:00010FC8 arg_4           = dword ptr  0Ch
.text:00010FC8 arg_8           = dword ptr  10h
.text:00010FC8
.text:00010FC8                 push    ebp
.text:00010FC9                 mov     ebp, esp
.text:00010FCB                 mov     eax, [ebp+arg_8]
.text:00010FCE                 push    eax
.text:00010FCF                 mov     ecx, [ebp+arg_4]
.text:00010FD2                 push    ecx
.text:00010FD3                 mov     edx, dword ptr ds:_term
.text:00010FD9                 push    edx
.text:00010FDA                 call    _term_data_untrusted
.text:00010FDF                 add     esp, 0Ch
.text:00010FE2                 cmp     ebp, esp
.text:00010FE4                 call    __RTC_CheckEsp
.text:00010FE9                 pop     ebp
.text:00010FEA                 retn
.text:00010FEA _from_backend_untrusted endp
.text:00010FEA
.text:00010FEA ; ---------------------------------------------------------------------------
.text:00010FEB                 db 0Dh dup(0CCh)
.text:00010FF8
.text:00010FF8 ; =============== S U B R O U T I N E =======================================
.text:00010FF8
.text:00010FF8 ; Attributes: bp-based frame
.text:00010FF8
.text:00010FF8                 public _from_backend_eof
.text:00010FF8 _from_backend_eof proc near
.text:00010FF8                 push    ebp
.text:00010FF9                 mov     ebp, esp
.text:00010FFB                 mov     eax, 1
.text:00011000                 pop     ebp
.text:00011001                 retn
.text:00011001 _from_backend_eof endp
.text:00011001
.text:00011001 ; ---------------------------------------------------------------------------
.text:00011002                 align 8
.text:00011008
.text:00011008 ; =============== S U B R O U T I N E =======================================
.text:00011008
.text:00011008 ; Attributes: bp-based frame
.text:00011008
.text:00011008                 public _get_userpass_input
.text:00011008 _get_userpass_input proc near
.text:00011008
.text:00011008 var_4           = dword ptr -4
.text:00011008 arg_0           = dword ptr  8
.text:00011008 arg_4           = dword ptr  0Ch
.text:00011008 arg_8           = dword ptr  10h
.text:00011008
.text:00011008                 push    ebp
.text:00011009                 mov     ebp, esp
.text:0001100B                 push    ecx
.text:0001100C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00011013                 mov     eax, [ebp+arg_8]
.text:00011016                 push    eax
.text:00011017                 mov     ecx, [ebp+arg_4]
.text:0001101A                 push    ecx
.text:0001101B                 mov     edx, [ebp+arg_0]
.text:0001101E                 push    edx
.text:0001101F                 call    _cmdline_get_passwd_input
.text:00011024                 add     esp, 0Ch
.text:00011027                 mov     [ebp+var_4], eax
.text:0001102A                 cmp     [ebp+var_4], 0FFFFFFFFh
.text:0001102E                 jnz     short loc_1104D
.text:00011030                 mov     eax, [ebp+arg_8]
.text:00011033                 push    eax
.text:00011034                 mov     ecx, [ebp+arg_4]
.text:00011037                 push    ecx
.text:00011038                 mov     edx, [ebp+arg_0]
.text:0001103B                 push    edx
.text:0001103C                 mov     eax, dword ptr ds:_term
.text:00011041                 push    eax
.text:00011042                 call    _term_get_userpass_input
.text:00011047                 add     esp, 10h
.text:0001104A                 mov     [ebp+var_4], eax
.text:0001104D
.text:0001104D loc_1104D:                              ; CODE XREF: _get_userpass_input+26j
.text:0001104D                 mov     eax, [ebp+var_4]
.text:00011050                 add     esp, 4
.text:00011053                 cmp     ebp, esp
.text:00011055                 call    __RTC_CheckEsp
.text:0001105A                 mov     esp, ebp
.text:0001105C                 pop     ebp
.text:0001105D                 retn
.text:0001105D _get_userpass_input endp
.text:0001105D
.text:0001105D ; ---------------------------------------------------------------------------
.text:0001105E                 db 0Ah dup(0CCh)
.text:00011068
.text:00011068 ; =============== S U B R O U T I N E =======================================
.text:00011068
.text:00011068 ; Attributes: bp-based frame
.text:00011068
.text:00011068                 public _agent_schedule_callback
.text:00011068 _agent_schedule_callback proc near
.text:00011068
.text:00011068 lParam          = dword ptr -4
.text:00011068 arg_0           = dword ptr  8
.text:00011068 arg_4           = dword ptr  0Ch
.text:00011068 arg_8           = dword ptr  10h
.text:00011068 arg_C           = dword ptr  14h
.text:00011068
.text:00011068                 push    ebp
.text:00011069                 mov     ebp, esp
.text:0001106B                 push    ecx
.text:0001106C                 push    esi
.text:0001106D                 mov     [ebp+lParam], 0CCCCCCCCh
.text:00011074                 push    10h
.text:00011076                 push    1
.text:00011078                 call    _safemalloc
.text:0001107D                 add     esp, 8
.text:00011080                 mov     [ebp+lParam], eax
.text:00011083                 mov     eax, [ebp+lParam]
.text:00011086                 mov     ecx, [ebp+arg_0]
.text:00011089                 mov     [eax], ecx
.text:0001108B                 mov     edx, [ebp+lParam]
.text:0001108E                 mov     eax, [ebp+arg_4]
.text:00011091                 mov     [edx+4], eax
.text:00011094                 mov     ecx, [ebp+lParam]
.text:00011097                 mov     edx, [ebp+arg_8]
.text:0001109A                 mov     [ecx+8], edx
.text:0001109D                 mov     eax, [ebp+lParam]
.text:000110A0                 mov     ecx, [ebp+arg_C]
.text:000110A3                 mov     [eax+0Ch], ecx
.text:000110A6                 mov     esi, esp
.text:000110A8                 mov     edx, [ebp+lParam]
.text:000110AB                 push    edx             ; lParam
.text:000110AC                 push    0               ; wParam
.text:000110AE                 push    8004h           ; Msg
.text:000110B3                 mov     eax, dword ptr ds:_hwnd
.text:000110B8                 push    eax             ; hWnd
.text:000110B9                 call    dword ptr ds:__imp__PostMessageA@16 ; PostMessageA(x,x,x,x)
.text:000110BF                 cmp     esi, esp
.text:000110C1                 call    __RTC_CheckEsp
.text:000110C6                 pop     esi
.text:000110C7                 add     esp, 4
.text:000110CA                 cmp     ebp, esp
.text:000110CC                 call    __RTC_CheckEsp
.text:000110D1                 mov     esp, ebp
.text:000110D3                 pop     ebp
.text:000110D4                 retn
.text:000110D4 _agent_schedule_callback endp
.text:000110D4
.text:000110D4 ; ---------------------------------------------------------------------------
.text:000110D5                 align 4
.text:000110D5 _text           ends
.text:000110D5
.rtc$TMZ:000110D8 ; ===========================================================================
.rtc$TMZ:000110D8
.rtc$TMZ:000110D8 ; Segment type: Pure data
.rtc$TMZ:000110D8 ; Segment permissions: Read
.rtc$TMZ:000110D8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000110D8                 assume cs:_rtc$TMZ
.rtc$TMZ:000110D8                 ;org 110D8h
.rtc$TMZ:000110D8 ; COMDAT (pick any)
.rtc$TMZ:000110D8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000110D8 _rtc$TMZ        ends
.rtc$TMZ:000110D8
.rtc$IMZ:000110DC ; ===========================================================================
.rtc$IMZ:000110DC
.rtc$IMZ:000110DC ; Segment type: Pure data
.rtc$IMZ:000110DC ; Segment permissions: Read
.rtc$IMZ:000110DC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000110DC                 assume cs:_rtc$IMZ
.rtc$IMZ:000110DC                 ;org 110DCh
.rtc$IMZ:000110DC ; COMDAT (pick any)
.rtc$IMZ:000110DC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000110DC _rtc$IMZ        ends
.rtc$IMZ:000110DC
.rdata:000110E0 ; ===========================================================================
.rdata:000110E0
.rdata:000110E0 ; Segment type: Pure data
.rdata:000110E0 ; Segment permissions: Read
.rdata:000110E0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000110E0 _rdata          segment para public 'DATA' use32
.rdata:000110E0                 assume cs:_rdata
.rdata:000110E0                 ;org 110E0h
.rdata:000110E0 ; COMDAT (pick any)
.rdata:000110E0                 public __real@3fe0000000000000
.rdata:000110E0 __real@3fe0000000000000 dq 0.5          ; DATA XREF: _get_font_width+B2r
.rdata:000110E0 _rdata          ends
.rdata:000110E0
UNDEF:000110F0 ; ===========================================================================
UNDEF:000110F0
UNDEF:000110F0 ; Segment type: Externs
UNDEF:000110F0 ; UNDEF
UNDEF:000110F0                 extrn _hinst:near       ; DATA XREF: WinMain(x,x,x,x)+2Aw
UNDEF:000110F4                 extrn _cursor_type:near ; DATA XREF: _conf_cache_data+13w
UNDEF:000110F4                                         ; _do_text_internal+D8r ...
UNDEF:000110F8                 extrn _p_WSAEventSelect:near
UNDEF:000110FC                 extrn _loaded_session:near ; DATA XREF: WinMain(x,x,x,x)+7D3r
UNDEF:00011100                 extrn _p_WSAEnumNetworkEvents:near
UNDEF:00011104                 extrn _cmdline_session_name:near
UNDEF:00011108                 extrn _vtmode:near      ; DATA XREF: _conf_cache_data+2Cw
UNDEF:00011108                                         ; _do_text_internal+115r
UNDEF:0001110C ; HWND hwnd
UNDEF:0001110C                 extrn _hwnd:near        ; DATA XREF: WinMain(x,x,x,x)+2Fw
UNDEF:0001110C                                         ; WinMain(x,x,x,x)+BF5w ...
UNDEF:00011110                 extrn _flags:near       ; DATA XREF: WinMain(x,x,x,x)+39w
UNDEF:00011114                 extrn _p_select:near
UNDEF:00011118                 extrn _term:near        ; DATA XREF: _get_ttymode+7r
UNDEF:00011118                                         ; WinMain(x,x,x,x)+C1Bw ...
UNDEF:0001111C                 extrn _p_WSAAsyncSelect:near ; CODE XREF: _do_select+63p
UNDEF:0001111C                                         ; DATA XREF: _do_select+63r
UNDEF:00011120 ; HWND logbox
UNDEF:00011120                 extrn _logbox:near      ; DATA XREF: WinMain(x,x,x,x)+13B6r
UNDEF:00011120                                         ; WinMain(x,x,x,x)+13D4r
UNDEF:00011124                 extrn _logctx:near      ; DATA XREF: WinMain(x,x,x,x)+C31w
UNDEF:00011124                                         ; WinMain(x,x,x,x)+C36r ...
UNDEF:00011128                 extrn _default_port:near ; DATA XREF: WinMain(x,x,x,x)+18Bw
UNDEF:00011128                                         ; WinMain(x,x,x,x)+1A1w
UNDEF:0001112C                 extrn _conf:near        ; DATA XREF: WinMain(x,x,x,x)+F1w
UNDEF:0001112C                                         ; WinMain(x,x,x,x)+1ABr ...
UNDEF:00011130                 extrn _p_WSAGetLastError:near ; CODE XREF: _do_select+77p
UNDEF:00011130                                         ; DATA XREF: _do_select+77r
UNDEF:00011134                 extrn _default_protocol:near
UNDEF:00011134                                         ; DATA XREF: WinMain(x,x,x,x)+173w
UNDEF:00011134                                         ; WinMain(x,x,x,x)+179r
UNDEF:00011138 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
UNDEF:00011138                 extrn __imp__GetVersionExA@4:near
UNDEF:00011138                                         ; CODE XREF: _IsPlatformNT+5Ap
UNDEF:00011138                                         ; DATA XREF: _IsPlatformNT+5Ar
UNDEF:0001113C                 extrn ___security_cookie:near ; DATA XREF: _IsPlatformNT+1Dr
UNDEF:0001113C                                         ; xMonitorFromWindow(x,x)+17r ...
UNDEF:00011140 ; __fastcall __security_check_cookie(x)
UNDEF:00011140                 extrn @__security_check_cookie@4:near
UNDEF:00011140                                         ; CODE XREF: _IsPlatformNT+8Bp
UNDEF:00011140                                         ; xMonitorFromWindow(x,x)+CEp ...
UNDEF:00011144 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00011144                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00011144                                         ; CODE XREF: _IsPlatformNT+7Dp
UNDEF:00011144                                         ; xMonitorFromWindow(x,x)+C0p ...
UNDEF:00011148                 extrn __RTC_CheckEsp:near ; CODE XREF: _IsPlatformNT+62p
UNDEF:00011148                                         ; _IsPlatformNT+98p ...
UNDEF:0001114C ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0001114C                 extrn _memset:near      ; CODE XREF: _IsPlatformNT+3Fp
UNDEF:00011150                 extrn __RTC_Shutdown:near
UNDEF:00011150                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00011154                 extrn __RTC_InitBase:near
UNDEF:00011154                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00011158 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00011158                 extrn __imp__GetProcAddress@8:near
UNDEF:00011158                                         ; CODE XREF: _InitMultipleMonitorStubs+5Cp
UNDEF:00011158                                         ; _InitMultipleMonitorStubs+86p ...
UNDEF:0001115C ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
UNDEF:0001115C                 extrn __imp__GetModuleHandleA@4:near
UNDEF:0001115C                                         ; CODE XREF: _InitMultipleMonitorStubs+37p
UNDEF:0001115C                                         ; DATA XREF: _InitMultipleMonitorStubs+37r
UNDEF:00011160 ; int __stdcall GetSystemMetrics(int nIndex)
UNDEF:00011160                 extrn __imp__GetSystemMetrics@4:near
UNDEF:00011160                                         ; CODE XREF: xGetSystemMetrics(x)+6Ap
UNDEF:00011160                                         ; xMonitorFromPoint(x,x,x)+3Cp ...
UNDEF:00011164 ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:00011164                 extrn __imp__GetWindowRect@8:near
UNDEF:00011164                                         ; CODE XREF: xMonitorFromWindow(x,x)+8Fp
UNDEF:00011164                                         ; WinMain(x,x,x,x)+C9Ep ...
UNDEF:00011168 ; BOOL __stdcall GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT *lpwndpl)
UNDEF:00011168                 extrn __imp__GetWindowPlacement@8:near
UNDEF:00011168                                         ; CODE XREF: xMonitorFromWindow(x,x)+73p
UNDEF:00011168                                         ; DATA XREF: xMonitorFromWindow(x,x)+73r
UNDEF:0001116C ; BOOL __stdcall IsIconic(HWND hWnd)
UNDEF:0001116C                 extrn __imp__IsIconic@4:near
UNDEF:0001116C                                         ; CODE XREF: xMonitorFromWindow(x,x)+58p
UNDEF:0001116C                                         ; WndProc(x,x,x,x)+CC1p ...
UNDEF:00011170 ; errno_t __cdecl strncpy_s(char *Dst, rsize_t SizeInBytes, const char *Src, rsize_t MaxCount)
UNDEF:00011170                 extrn _strncpy_s:near   ; CODE XREF: xGetMonitorInfo(x,x)+11Ep
UNDEF:00011170                                         ; xEnumDisplayDevices(x,x,x,x)+67p ...
UNDEF:00011174 ; BOOL __stdcall SystemParametersInfoA(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni)
UNDEF:00011174                 extrn __imp__SystemParametersInfoA@16:near
UNDEF:00011174                                         ; CODE XREF: xGetMonitorInfo(x,x)+88p
UNDEF:00011174                                         ; DATA XREF: xGetMonitorInfo(x,x)+88r
UNDEF:00011178 ; BOOL __stdcall IntersectRect(LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2)
UNDEF:00011178                 extrn __imp__IntersectRect@12:near
UNDEF:00011178                                         ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+118p
UNDEF:00011178                                         ; xEnumDisplayMonitors(x,x,x,x)+13Dp ...
UNDEF:0001117C ; BOOL __stdcall OffsetRect(LPRECT lprc, int dx, int dy)
UNDEF:0001117C                 extrn __imp__OffsetRect@12:near
UNDEF:0001117C                                         ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+FDp
UNDEF:0001117C                                         ; DATA XREF: xEnumDisplayMonitors(x,x,x,x)+FDr
UNDEF:00011180 ; BOOL __stdcall GetDCOrgEx(HDC hdc, LPPOINT lppt)
UNDEF:00011180                 extrn __imp__GetDCOrgEx@8:near
UNDEF:00011180                                         ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+D3p
UNDEF:00011180                                         ; DATA XREF: xEnumDisplayMonitors(x,x,x,x)+D3r
UNDEF:00011184 ; int __stdcall GetClipBox(HDC hdc, LPRECT lprect)
UNDEF:00011184                 extrn __imp__GetClipBox@8:near
UNDEF:00011184                                         ; CODE XREF: xEnumDisplayMonitors(x,x,x,x)+A5p
UNDEF:00011184                                         ; DATA XREF: xEnumDisplayMonitors(x,x,x,x)+A5r
UNDEF:00011188                 extrn _term_get_ttymode:near ; CODE XREF: _get_ttymode+Ep
UNDEF:0001118C                 extrn _run_toplevel_callbacks:near
UNDEF:0001118C                                         ; CODE XREF: WinMain(x,x,x,x):loc_3F67p
UNDEF:00011190 ; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
UNDEF:00011190                 extrn __imp__DispatchMessageA@4:near
UNDEF:00011190                                         ; CODE XREF: WinMain(x,x,x,x)+13F2p
UNDEF:00011190                                         ; DATA XREF: WinMain(x,x,x,x)+13F2r
UNDEF:00011194 ; BOOL __stdcall IsDialogMessageA(HWND hDlg, LPMSG lpMsg)
UNDEF:00011194                 extrn __imp__IsDialogMessageA@8:near
UNDEF:00011194                                         ; CODE XREF: WinMain(x,x,x,x)+13DBp
UNDEF:00011194                                         ; DATA XREF: WinMain(x,x,x,x)+13DBr
UNDEF:00011198 ; BOOL __stdcall IsWindow(HWND hWnd)
UNDEF:00011198                 extrn __imp__IsWindow@4:near
UNDEF:00011198                                         ; CODE XREF: WinMain(x,x,x,x)+13BDp
UNDEF:00011198                                         ; DATA XREF: WinMain(x,x,x,x)+13BDr
UNDEF:0001119C                 extrn _handle_got_event:near
UNDEF:0001119C                                         ; CODE XREF: WinMain(x,x,x,x)+1365p
UNDEF:000111A0 ; DWORD __stdcall MsgWaitForMultipleObjects(DWORD nCount, const HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask)
UNDEF:000111A0                 extrn __imp__MsgWaitForMultipleObjects@20:near
UNDEF:000111A0                                         ; CODE XREF: WinMain(x,x,x,x)+1334p
UNDEF:000111A0                                         ; DATA XREF: WinMain(x,x,x,x)+1334r
UNDEF:000111A4                 extrn _handle_get_events:near
UNDEF:000111A4                                         ; CODE XREF: WinMain(x,x,x,x)+1308p
UNDEF:000111A8 ; BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
UNDEF:000111A8                 extrn __imp__PeekMessageA@20:near
UNDEF:000111A8                                         ; CODE XREF: WinMain(x,x,x,x)+12B0p
UNDEF:000111A8                                         ; WinMain(x,x,x,x)+139Bp
UNDEF:000111A8                                         ; DATA XREF: ...
UNDEF:000111AC                 extrn _toplevel_callback_pending:near
UNDEF:000111AC                                         ; CODE XREF: WinMain(x,x,x,x)+1299p
UNDEF:000111B0 ; BOOL __stdcall UpdateWindow(HWND hWnd)
UNDEF:000111B0                 extrn __imp__UpdateWindow@4:near
UNDEF:000111B0                                         ; CODE XREF: WinMain(x,x,x,x)+127Fp
UNDEF:000111B0                                         ; DATA XREF: WinMain(x,x,x,x)+127Fr
UNDEF:000111B4                 extrn _term_set_focus:near
UNDEF:000111B4                                         ; CODE XREF: WinMain(x,x,x,x)+126Fp
UNDEF:000111B4                                         ; WinMain(x,x,x,x)+12F9p ...
UNDEF:000111B8 ; HWND __stdcall GetForegroundWindow()
UNDEF:000111B8                 extrn __imp__GetForegroundWindow@0:near
UNDEF:000111B8                                         ; CODE XREF: WinMain(x,x,x,x)+124Fp
UNDEF:000111B8                                         ; WinMain(x,x,x,x)+12D9p
UNDEF:000111B8                                         ; DATA XREF: ...
UNDEF:000111BC ; BOOL __stdcall SetForegroundWindow(HWND hWnd)
UNDEF:000111BC                 extrn __imp__SetForegroundWindow@4:near
UNDEF:000111BC                                         ; CODE XREF: WinMain(x,x,x,x)+1227p
UNDEF:000111BC                                         ; DATA XREF: WinMain(x,x,x,x)+1227r
UNDEF:000111C0 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:000111C0                 extrn __imp__ShowWindow@8:near
UNDEF:000111C0                                         ; CODE XREF: WinMain(x,x,x,x)+1212p
UNDEF:000111C0                                         ; WndProc(x,x,x,x)+83Bp ...
UNDEF:000111C4 ; HKL __stdcall GetKeyboardLayout(DWORD idThread)
UNDEF:000111C4                 extrn __imp__GetKeyboardLayout@4:near
UNDEF:000111C4                                         ; CODE XREF: WinMain(x,x,x,x)+11EFp
UNDEF:000111C4                                         ; _TranslateKey+99p
UNDEF:000111C4                                         ; DATA XREF: ...
UNDEF:000111C8                 extrn _has_help:near    ; CODE XREF: WinMain(x,x,x,x)+116Ap
UNDEF:000111CC                 extrn _get_sesslist:near ; CODE XREF: WinMain(x,x,x,x)+F4Cp
UNDEF:000111CC                                         ; WndProc(x,x,x,x)+2D7p ...
UNDEF:000111D0 ; HMENU __stdcall CreateMenu()
UNDEF:000111D0                 extrn __imp__CreateMenu@0:near
UNDEF:000111D0                                         ; CODE XREF: WinMain(x,x,x,x)+F33p
UNDEF:000111D0                                         ; DATA XREF: WinMain(x,x,x,x)+F33r
UNDEF:000111D4 ; BOOL __stdcall AppendMenuA(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem)
UNDEF:000111D4                 extrn __imp__AppendMenuA@16:near
UNDEF:000111D4                                         ; CODE XREF: WinMain(x,x,x,x)+F24p
UNDEF:000111D4                                         ; WinMain(x,x,x,x)+FA6p ...
UNDEF:000111D8 ; HMENU __stdcall CreatePopupMenu()
UNDEF:000111D8                 extrn __imp__CreatePopupMenu@0:near
UNDEF:000111D8                                         ; CODE XREF: WinMain(x,x,x,x)+EFEp
UNDEF:000111D8                                         ; _update_specials_menu+72p ...
UNDEF:000111DC ; HMENU __stdcall GetSystemMenu(HWND hWnd, BOOL bRevert)
UNDEF:000111DC                 extrn __imp__GetSystemMenu@8:near
UNDEF:000111DC                                         ; CODE XREF: WinMain(x,x,x,x)+EEAp
UNDEF:000111DC                                         ; DATA XREF: WinMain(x,x,x,x)+EEAr
UNDEF:000111E0 ; UINT __stdcall GetDoubleClickTime()
UNDEF:000111E0                 extrn __imp__GetDoubleClickTime@0:near
UNDEF:000111E0                                         ; CODE XREF: WinMain(x,x,x,x)+ECDp
UNDEF:000111E0                                         ; DATA XREF: WinMain(x,x,x,x)+ECDr
UNDEF:000111E4 ; int __stdcall SetScrollInfo(HWND hwnd, int nBar, LPCSCROLLINFO lpsi, BOOL redraw)
UNDEF:000111E4                 extrn __imp__SetScrollInfo@16:near
UNDEF:000111E4                                         ; CODE XREF: WinMain(x,x,x,x)+EAAp
UNDEF:000111E4                                         ; _set_sbar+88p
UNDEF:000111E4                                         ; DATA XREF: ...
UNDEF:000111E8 ; BOOL __stdcall CreateCaret(HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight)
UNDEF:000111E8                 extrn __imp__CreateCaret@16:near
UNDEF:000111E8                                         ; CODE XREF: WinMain(x,x,x,x)+E3Ap
UNDEF:000111E8                                         ; WndProc(x,x,x,x)+1ABBp
UNDEF:000111E8                                         ; DATA XREF: ...
UNDEF:000111EC ; HBITMAP __stdcall CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits)
UNDEF:000111EC                 extrn __imp__CreateBitmap@20:near
UNDEF:000111EC                                         ; CODE XREF: WinMain(x,x,x,x)+DFCp
UNDEF:000111EC                                         ; DATA XREF: WinMain(x,x,x,x)+DFCr
UNDEF:000111F0                 extrn _safemalloc:near  ; CODE XREF: WinMain(x,x,x,x)+DBBp
UNDEF:000111F0                                         ; _init_palette+7Bp ...
UNDEF:000111F4 ; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
UNDEF:000111F4                 extrn __imp__SetWindowPos@28:near
UNDEF:000111F4                                         ; CODE XREF: WinMain(x,x,x,x)+D85p
UNDEF:000111F4                                         ; _request_resize+1CBp ...
UNDEF:000111F8 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:000111F8                 extrn __imp__GetClientRect@8:near
UNDEF:000111F8                                         ; CODE XREF: WinMain(x,x,x,x)+CBBp
UNDEF:000111F8                                         ; _reset_window+47p
UNDEF:000111F8                                         ; DATA XREF: ...
UNDEF:000111FC                 extrn _term_size:near   ; CODE XREF: WinMain(x,x,x,x)+C87p
UNDEF:000111FC                                         ; _request_resize+152p ...
UNDEF:00011200                 extrn _term_provide_logctx:near
UNDEF:00011200                                         ; CODE XREF: WinMain(x,x,x,x)+C43p
UNDEF:00011204                 extrn _log_init:near    ; CODE XREF: WinMain(x,x,x,x)+C29p
UNDEF:00011208                 extrn _term_init:near   ; CODE XREF: WinMain(x,x,x,x)+C13p
UNDEF:0001120C ; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:0001120C                 extrn __imp__CreateWindowExA@48:near
UNDEF:0001120C                                         ; CODE XREF: WinMain(x,x,x,x)+BE8p
UNDEF:0001120C                                         ; DATA XREF: WinMain(x,x,x,x)+BE8r
UNDEF:00011210                 extrn _conf_get_int:near ; CODE XREF: WinMain(x,x,x,x)+A7Dp
UNDEF:00011210                                         ; WinMain(x,x,x,x)+A9Dp ...
UNDEF:00011214 ; void *__cdecl memset_0(void *Dst, int Val, size_t Size)
UNDEF:00011214                 extrn _memset_0:near    ; CODE XREF: WinMain(x,x,x,x)+A3Ap
UNDEF:00011214                                         ; WinMain(x,x,x,x)+DD9p ...
UNDEF:00011218 ; ATOM __stdcall RegisterClassA(const WNDCLASSA *lpWndClass)
UNDEF:00011218                 extrn __imp__RegisterClassA@4:near
UNDEF:00011218                                         ; CODE XREF: WinMain(x,x,x,x)+A21p
UNDEF:00011218                                         ; DATA XREF: WinMain(x,x,x,x)+A21r
UNDEF:0001121C ; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
UNDEF:0001121C                 extrn __imp__LoadCursorA@8:near
UNDEF:0001121C                                         ; CODE XREF: WinMain(x,x,x,x)+9F5p
UNDEF:0001121C                                         ; _update_mouse_pointer+C3p
UNDEF:0001121C                                         ; DATA XREF: ...
UNDEF:00011220 ; HICON __stdcall LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName)
UNDEF:00011220                 extrn __imp__LoadIconA@8:near
UNDEF:00011220                                         ; CODE XREF: WinMain(x,x,x,x)+9DCp
UNDEF:00011220                                         ; DATA XREF: WinMain(x,x,x,x)+9DCr
UNDEF:00011224                 extrn _host_strchr:near ; CODE XREF: WinMain(x,x,x,x)+8C5p
UNDEF:00011224                                         ; WinMain(x,x,x,x)+8E8p
UNDEF:00011228 ; char *__cdecl strrchr(const char *Str, int Ch)
UNDEF:00011228                 extrn _strrchr:near     ; CODE XREF: WinMain(x,x,x,x)+876p
UNDEF:0001122C ; size_t __cdecl strspn(const char *Str, const char *Control)
UNDEF:0001122C                 extrn _strspn:near      ; CODE XREF: WinMain(x,x,x,x)+84Cp
UNDEF:00011230                 extrn _dupstr:near      ; CODE XREF: WinMain(x,x,x,x)+826p
UNDEF:00011234                 extrn _conf_get_str:near ; CODE XREF: WinMain(x,x,x,x)+81Dp
UNDEF:00011234                                         ; _start_backend+E8p ...
UNDEF:00011238                 extrn _cmdline_run_saved:near
UNDEF:00011238                                         ; CODE XREF: WinMain(x,x,x,x)+7CBp
UNDEF:0001123C                 extrn _conf_set_str:near ; CODE XREF: WinMain(x,x,x,x)+721p
UNDEF:0001123C                                         ; WinMain(x,x,x,x)+79Ap ...
UNDEF:00011240 ; int __cdecl atoi(const char *Str)
UNDEF:00011240                 extrn _atoi:near        ; CODE XREF: WinMain(x,x,x,x)+6E2p
UNDEF:00011240                                         ; _set_input_locale+59p
UNDEF:00011244                 extrn _host_strcspn:near ; CODE XREF: WinMain(x,x,x,x)+688p
UNDEF:00011248 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
UNDEF:00011248                 extrn _strncmp:near     ; CODE XREF: WinMain(x,x,x,x)+612p
UNDEF:0001124C ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:0001124C                 extrn __wassert:near    ; CODE XREF: WinMain(x,x,x,x)+5F7p
UNDEF:0001124C                                         ; _update_specials_menu+C1p ...
UNDEF:00011250                 extrn _pgp_fingerprints:near
UNDEF:00011250                                         ; CODE XREF: WinMain(x,x,x,x)+587p
UNDEF:00011254 ; void __cdecl __noreturn exit(int Code)
UNDEF:00011254                 extrn _exit:near        ; CODE XREF: WinMain(x,x,x,x)+565p
UNDEF:00011254                                         ; WinMain(x,x,x,x)+58Ep ...
UNDEF:00011258                 extrn _cleanup_all:near ; CODE XREF: WinMain(x,x,x,x)+540p
UNDEF:0001125C                 extrn _message_box:near ; CODE XREF: WinMain(x,x,x,x)+533p
UNDEF:00011260 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00011260                 extrn _strcmp:near      ; CODE XREF: WinMain(x,x,x,x)+475p
UNDEF:00011260                                         ; WinMain(x,x,x,x)+48Dp ...
UNDEF:00011264                 extrn _cmdline_process_param:near
UNDEF:00011264                                         ; CODE XREF: WinMain(x,x,x,x)+409p
UNDEF:00011264                                         ; WinMain(x,x,x,x)+5D1p
UNDEF:00011268                 extrn _split_into_argv:near
UNDEF:00011268                                         ; CODE XREF: WinMain(x,x,x,x)+375p
UNDEF:0001126C ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:0001126C                 extrn __imp__CloseHandle@4:near
UNDEF:0001126C                                         ; CODE XREF: WinMain(x,x,x,x)+333p
UNDEF:0001126C                                         ; WndProc(x,x,x,x)+64Bp ...
UNDEF:00011270 ; BOOL __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress)
UNDEF:00011270                 extrn __imp__UnmapViewOfFile@4:near
UNDEF:00011270                                         ; CODE XREF: WinMain(x,x,x,x)+31Dp
UNDEF:00011270                                         ; WndProc(x,x,x,x)+4C9p
UNDEF:00011270                                         ; DATA XREF: ...
UNDEF:00011274                 extrn _conf_deserialise:near
UNDEF:00011274                                         ; CODE XREF: WinMain(x,x,x,x)+30Cp
UNDEF:00011278 ; LPVOID __stdcall MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap)
UNDEF:00011278                 extrn __imp__MapViewOfFile@20:near
UNDEF:00011278                                         ; CODE XREF: WinMain(x,x,x,x)+2DBp
UNDEF:00011278                                         ; WndProc(x,x,x,x)+48Ep
UNDEF:00011278                                         ; DATA XREF: ...
UNDEF:0001127C ; int sscanf(const char *Src, const char *Format, ...)
UNDEF:0001127C                 extrn _sscanf:near      ; CODE XREF: WinMain(x,x,x,x)+2B8p
UNDEF:00011280                 extrn _do_config:near   ; CODE XREF: WinMain(x,x,x,x)+270p
UNDEF:00011280                                         ; WinMain(x,x,x,x):loc_2EAAp ...
UNDEF:00011284                 extrn _conf_launchable:near
UNDEF:00011284                                         ; CODE XREF: WinMain(x,x,x,x)+264p
UNDEF:00011284                                         ; WinMain(x,x,x,x)+7F5p
UNDEF:00011288 ; size_t __cdecl strlen(const char *Str)
UNDEF:00011288                 extrn _strlen:near      ; CODE XREF: WinMain(x,x,x,x)+20Bp
UNDEF:00011288                                         ; _set_title+18p ...
UNDEF:0001128C ; int __cdecl isspace(int C)
UNDEF:0001128C                 extrn _isspace:near     ; CODE XREF: WinMain(x,x,x,x)+1E1p
UNDEF:0001128C                                         ; WinMain(x,x,x,x)+227p ...
UNDEF:00011290                 extrn _do_defaults:near ; CODE XREF: WinMain(x,x,x,x)+1C2p
UNDEF:00011290                                         ; WinMain(x,x,x,x)+255p
UNDEF:00011294                 extrn _conf_set_int:near ; CODE XREF: WinMain(x,x,x,x)+1B2p
UNDEF:00011294                                         ; WinMain(x,x,x,x)+668p ...
UNDEF:00011298                 extrn _backend_from_proto:near
UNDEF:00011298                                         ; CODE XREF: WinMain(x,x,x,x)+180p
UNDEF:00011298                                         ; _start_backend+38p
UNDEF:0001129C                 extrn _be_default_protocol:near
UNDEF:0001129C                                         ; DATA XREF: WinMain(x,x,x,x)+16Dr
UNDEF:000112A0 ; HRESULT __stdcall CoInitialize(LPVOID pvReserved)
UNDEF:000112A0                 extrn __imp__CoInitialize@4:near
UNDEF:000112A0                                         ; CODE XREF: WinMain(x,x,x,x)+FAp
UNDEF:000112A0                                         ; DATA XREF: WinMain(x,x,x,x)+FAr
UNDEF:000112A4                 extrn _conf_new:near    ; CODE XREF: WinMain(x,x,x,x)+ECp
UNDEF:000112A8                 extrn _init_help:near   ; CODE XREF: WinMain(x,x,x,x):loc_2C4Ap
UNDEF:000112AC ; UINT __stdcall RegisterWindowMessageA(LPCSTR lpString)
UNDEF:000112AC                 extrn __imp__RegisterWindowMessageA@4:near
UNDEF:000112AC                                         ; CODE XREF: WinMain(x,x,x,x)+D0p
UNDEF:000112AC                                         ; DATA XREF: WinMain(x,x,x,x)+D0r
UNDEF:000112B0                 extrn _osVersion:near   ; DATA XREF: WinMain(x,x,x,x):loc_2C16r
UNDEF:000112B0                                         ; WinMain(x,x,x,x)+B7r ...
UNDEF:000112B4                 extrn _safefree:near    ; CODE XREF: WinMain(x,x,x,x)+9Cp
UNDEF:000112B4                                         ; WinMain(x,x,x,x)+14Dp ...
UNDEF:000112B8 ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:000112B8                 extrn __imp__MessageBoxA@16:near
UNDEF:000112B8                                         ; CODE XREF: WinMain(x,x,x,x)+8Bp
UNDEF:000112B8                                         ; WinMain(x,x,x,x)+13Cp ...
UNDEF:000112BC                 extrn _dupprintf:near   ; CODE XREF: WinMain(x,x,x,x)+71p
UNDEF:000112BC                                         ; WinMain(x,x,x,x)+122p ...
UNDEF:000112C0 ; LPCSTR appname
UNDEF:000112C0                 extrn _appname:near     ; DATA XREF: WinMain(x,x,x,x)+65r
UNDEF:000112C0                                         ; WinMain(x,x,x,x)+116r ...
UNDEF:000112C4                 extrn _init_winver:near ; CODE XREF: WinMain(x,x,x,x)+5Cp
UNDEF:000112C8                 extrn _defuse_showwindow:near
UNDEF:000112C8                                         ; CODE XREF: WinMain(x,x,x,x)+57p
UNDEF:000112CC ; void __stdcall InitCommonControls()
UNDEF:000112CC                 extrn __imp__InitCommonControls@0:near
UNDEF:000112CC                                         ; CODE XREF: WinMain(x,x,x,x)+4Ap
UNDEF:000112CC                                         ; DATA XREF: WinMain(x,x,x,x)+4Ar
UNDEF:000112D0                 extrn _sk_init:near     ; CODE XREF: WinMain(x,x,x,x)+43p
UNDEF:000112D4 ; BOOL __stdcall DeleteMenu(HMENU hMenu, UINT uPosition, UINT uFlags)
UNDEF:000112D4                 extrn __imp__DeleteMenu@12:near
UNDEF:000112D4                                         ; CODE XREF: _start_backend+2D0p
UNDEF:000112D4                                         ; _update_savedsess_menu+24p ...
UNDEF:000112D8                 extrn _ldisc_create:near ; CODE XREF: _start_backend+28Bp
UNDEF:000112DC                 extrn _term_provide_resize_fn:near
UNDEF:000112DC                                         ; CODE XREF: _start_backend+266p
UNDEF:000112DC                                         ; _close_session+C5p
UNDEF:000112E0 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:000112E0                 extrn _sprintf:near     ; CODE XREF: _start_backend+178p
UNDEF:000112E0                                         ; _start_backend+209p ...
UNDEF:000112E4                 extrn _conf_dest:near   ; CODE XREF: _start_backend+163p
UNDEF:000112E8 ; void __stdcall CoUninitialize()
UNDEF:000112E8                 extrn __imp__CoUninitialize@0:near
UNDEF:000112E8                                         ; CODE XREF: _cleanup_exit+5Dp
UNDEF:000112E8                                         ; DATA XREF: _cleanup_exit+5Dr
UNDEF:000112EC                 extrn _shutdown_help:near
UNDEF:000112EC                                         ; CODE XREF: _cleanup_exit:loc_441Ep
UNDEF:000112F0                 extrn _random_save_seed:near ; CODE XREF: _cleanup_exit+51p
UNDEF:000112F4                 extrn _sk_cleanup:near  ; CODE XREF: _cleanup_exit:loc_43FEp
UNDEF:000112F8 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:000112F8                 extrn __imp__DeleteObject@4:near
UNDEF:000112F8                                         ; CODE XREF: _cleanup_exit+29p
UNDEF:000112F8                                         ; _init_fonts+5A5p ...
UNDEF:000112FC ; BOOL __stdcall InsertMenuA(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem)
UNDEF:000112FC                 extrn __imp__InsertMenuA@20:near
UNDEF:000112FC                                         ; CODE XREF: _update_specials_menu+26Fp
UNDEF:000112FC                                         ; _update_specials_menu+297p ...
UNDEF:00011300 ; int __stdcall ShowCursor(BOOL bShow)
UNDEF:00011300                 extrn __imp__ShowCursor@4:near
UNDEF:00011300                                         ; CODE XREF: _update_mouse_pointer+113p
UNDEF:00011300                                         ; _show_mouseptr+32p ...
UNDEF:00011304 ; HCURSOR __stdcall SetCursor(HCURSOR hCursor)
UNDEF:00011304                 extrn __imp__SetCursor@4:near
UNDEF:00011304                                         ; CODE XREF: _update_mouse_pointer+F5p
UNDEF:00011304                                         ; DATA XREF: _update_mouse_pointer+F5r
UNDEF:00011308 ; DWORD __stdcall SetClassLongA(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00011308                 extrn __imp__SetClassLongA@12:near
UNDEF:00011308                                         ; CODE XREF: _update_mouse_pointer+E2p
UNDEF:00011308                                         ; DATA XREF: _update_mouse_pointer+E2r
UNDEF:0001130C                 extrn __RTC_UninitUse:near
UNDEF:0001130C                                         ; CODE XREF: _update_mouse_pointer+B3p
UNDEF:00011310                 extrn _queue_toplevel_callback:near
UNDEF:00011310                                         ; CODE XREF: _connection_fatal+B2p
UNDEF:00011310                                         ; _notify_remote_exit+8Ep ...
UNDEF:00011314 ; void __stdcall PostQuitMessage(int nExitCode)
UNDEF:00011314                 extrn __imp__PostQuitMessage@4:near
UNDEF:00011314                                         ; CODE XREF: _connection_fatal+9Cp
UNDEF:00011314                                         ; _notify_remote_exit+78p ...
UNDEF:00011318                 extrn _dupvprintf:near  ; CODE XREF: _connection_fatal+2Fp
UNDEF:00011318                                         ; _cmdline_error+2Fp ...
UNDEF:0001131C                 extrn _ldisc_free:near  ; CODE XREF: _close_session+6Ep
UNDEF:00011320                 extrn _conf_get_int_int:near ; CODE XREF: _conftopalette+62p
UNDEF:00011320                                         ; _conftopalette+8Cp ...
UNDEF:00011324 ; DWORD __stdcall GetSysColor(int nIndex)
UNDEF:00011324                 extrn __imp__GetSysColor@4:near
UNDEF:00011324                                         ; CODE XREF: _systopalette+46p
UNDEF:00011324                                         ; DATA XREF: _systopalette+46r
UNDEF:00011328 ; int __stdcall ReleaseDC(HWND hWnd, HDC hDC)
UNDEF:00011328                 extrn __imp__ReleaseDC@8:near ; CODE XREF: _init_palette+19Fp
UNDEF:00011328                                         ; _init_fonts+77Dp ...
UNDEF:0001132C ; HGDIOBJ __stdcall GetStockObject(int i)
UNDEF:0001132C                 extrn __imp__GetStockObject@4:near
UNDEF:0001132C                                         ; CODE XREF: _init_palette+173p
UNDEF:0001132C                                         ; WndProc(x,x,x,x)+19D2p ...
UNDEF:00011330 ; UINT __stdcall RealizePalette(HDC hdc)
UNDEF:00011330                 extrn __imp__RealizePalette@4:near
UNDEF:00011330                                         ; CODE XREF: _init_palette+15Ep
UNDEF:00011330                                         ; WndProc(x,x,x,x)+174Ep ...
UNDEF:00011334 ; HPALETTE __stdcall SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd)
UNDEF:00011334                 extrn __imp__SelectPalette@12:near
UNDEF:00011334                                         ; CODE XREF: _init_palette+14Bp
UNDEF:00011334                                         ; _init_palette+185p ...
UNDEF:00011338 ; HPALETTE __stdcall CreatePalette(const LOGPALETTE *plpal)
UNDEF:00011338                 extrn __imp__CreatePalette@4:near
UNDEF:00011338                                         ; CODE XREF: _init_palette+121p
UNDEF:00011338                                         ; DATA XREF: _init_palette+121r
UNDEF:0001133C ; int __stdcall GetDeviceCaps(HDC hdc, int index)
UNDEF:0001133C                 extrn __imp__GetDeviceCaps@8:near
UNDEF:0001133C                                         ; CODE XREF: _init_palette+5Cp
UNDEF:0001133C                                         ; _init_fonts+133p
UNDEF:0001133C                                         ; DATA XREF: ...
UNDEF:00011340 ; HDC __stdcall GetDC(HWND hWnd)
UNDEF:00011340                 extrn __imp__GetDC@4:near ; CODE XREF: _init_palette+1Ep
UNDEF:00011340                                         ; _init_fonts+ECp ...
UNDEF:00011344                 extrn _init_ucs:near    ; CODE XREF: _init_fonts+822p
UNDEF:00011348 ; BOOL __stdcall DeleteDC(HDC hdc)
UNDEF:00011348                 extrn __imp__DeleteDC@4:near ; CODE XREF: _init_fonts+5BBp
UNDEF:00011348                                         ; DATA XREF: _init_fonts+5BBr
UNDEF:0001134C ; COLORREF __stdcall GetPixel(HDC hdc, int x, int y)
UNDEF:0001134C                 extrn __imp__GetPixel@12:near ; CODE XREF: _init_fonts+557p
UNDEF:0001134C                                         ; DATA XREF: _init_fonts+557r
UNDEF:00011350 ; BOOL __stdcall ExtTextOutA(HDC hdc, int x, int y, UINT options, const RECT *lprect, LPCSTR lpString, UINT c, const INT *lpDx)
UNDEF:00011350                 extrn __imp__ExtTextOutA@32:near
UNDEF:00011350                                         ; CODE XREF: _init_fonts+4FCp
UNDEF:00011350                                         ; _do_text_internal+D57p ...
UNDEF:00011354 ; int __stdcall SetBkMode(HDC hdc, int mode)
UNDEF:00011354                 extrn __imp__SetBkMode@8:near ; CODE XREF: _init_fonts+4D5p
UNDEF:00011354                                         ; _do_text_internal+4A0p ...
UNDEF:00011358 ; COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color)
UNDEF:00011358                 extrn __imp__SetBkColor@8:near ; CODE XREF: _init_fonts+4BDp
UNDEF:00011358                                         ; _do_text_internal+480p
UNDEF:00011358                                         ; DATA XREF: ...
UNDEF:0001135C ; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
UNDEF:0001135C                 extrn __imp__SetTextColor@8:near
UNDEF:0001135C                                         ; CODE XREF: _init_fonts+4A5p
UNDEF:0001135C                                         ; _do_text_internal+469p
UNDEF:0001135C                                         ; DATA XREF: ...
UNDEF:00011360 ; UINT __stdcall SetTextAlign(HDC hdc, UINT align)
UNDEF:00011360                 extrn __imp__SetTextAlign@8:near
UNDEF:00011360                                         ; CODE XREF: _init_fonts+48Ap
UNDEF:00011360                                         ; _do_text_internal+67Ap ...
UNDEF:00011364 ; HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int cx, int cy)
UNDEF:00011364                 extrn __imp__CreateCompatibleBitmap@12:near
UNDEF:00011364                                         ; CODE XREF: _init_fonts+42Dp
UNDEF:00011364                                         ; DATA XREF: _init_fonts+42Dr
UNDEF:00011368 ; HDC __stdcall CreateCompatibleDC(HDC hdc)
UNDEF:00011368                 extrn __imp__CreateCompatibleDC@4:near
UNDEF:00011368                                         ; CODE XREF: _init_fonts+403p
UNDEF:00011368                                         ; DATA XREF: _init_fonts+403r
UNDEF:0001136C ; BOOL __stdcall GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo)
UNDEF:0001136C                 extrn __imp__GetCPInfo@8:near ; CODE XREF: _init_fonts+34Bp
UNDEF:0001136C                                         ; DATA XREF: _init_fonts+34Br
UNDEF:00011370 ; BOOL __stdcall TranslateCharsetInfo(DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags)
UNDEF:00011370                 extrn __imp__TranslateCharsetInfo@12:near
UNDEF:00011370                                         ; CODE XREF: _init_fonts+316p
UNDEF:00011370                                         ; DATA XREF: _init_fonts+316r
UNDEF:00011374 ; UINT __stdcall GetOEMCP()
UNDEF:00011374                 extrn __imp__GetOEMCP@0:near ; CODE XREF: _init_fonts+2F0p
UNDEF:00011374                                         ; DATA XREF: _init_fonts+2F0r
UNDEF:00011378 ; int __stdcall GetObjectA(HANDLE h, int c, LPVOID pv)
UNDEF:00011378                 extrn __imp__GetObjectA@12:near ; CODE XREF: _init_fonts+24Ep
UNDEF:00011378                                         ; DATA XREF: _init_fonts+24Er
UNDEF:0001137C ; BOOL __stdcall GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm)
UNDEF:0001137C                 extrn __imp__GetTextMetricsA@8:near
UNDEF:0001137C                                         ; CODE XREF: _init_fonts+231p
UNDEF:0001137C                                         ; _init_fonts+719p
UNDEF:0001137C                                         ; DATA XREF: ...
UNDEF:00011380 ; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
UNDEF:00011380                 extrn __imp__SelectObject@8:near
UNDEF:00011380                                         ; CODE XREF: _init_fonts+217p
UNDEF:00011380                                         ; _init_fonts+450p ...
UNDEF:00011384 ; HFONT __stdcall CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName)
UNDEF:00011384                 extrn __imp__CreateFontA@56:near
UNDEF:00011384                                         ; CODE XREF: _init_fonts+1F6p
UNDEF:00011384                                         ; _init_fonts+3E8p ...
UNDEF:00011388 ; int __stdcall MulDiv(int nNumber, int nNumerator, int nDenominator)
UNDEF:00011388                 extrn __imp__MulDiv@12:near ; CODE XREF: _init_fonts+148p
UNDEF:00011388                                         ; DATA XREF: _init_fonts+148r
UNDEF:0001138C                 extrn _conf_get_fontspec:near ; CODE XREF: _init_fonts+A6p
UNDEF:0001138C                                         ; WndProc(x,x,x,x)+D23p ...
UNDEF:00011390 ; BOOL __stdcall GetCharABCWidthsFloatA(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC)
UNDEF:00011390                 extrn __imp__GetCharABCWidthsFloatA@16:near
UNDEF:00011390                                         ; CODE XREF: _get_font_width+66p
UNDEF:00011390                                         ; DATA XREF: _get_font_width+66r
UNDEF:00011394                 extrn __fltused:near
UNDEF:00011398                 extrn __ftol2_sse:near  ; CODE XREF: _get_font_width+D2p
UNDEF:0001139C ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:0001139C                 extrn __imp__InvalidateRect@12:near
UNDEF:0001139C                                         ; CODE XREF: _request_resize+1F0p
UNDEF:0001139C                                         ; _reset_window+16Bp ...
UNDEF:000113A0 ; BOOL __stdcall IsZoomed(HWND hWnd)
UNDEF:000113A0                 extrn __imp__IsZoomed@4:near ; CODE XREF: _request_resize+24p
UNDEF:000113A0                                         ; _request_resize+178p ...
UNDEF:000113A4 ; int __stdcall GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
UNDEF:000113A4                 extrn __imp__GetLocaleInfoA@16:near
UNDEF:000113A4                                         ; CODE XREF: _set_input_locale+48p
UNDEF:000113A4                                         ; DATA XREF: _set_input_locale+48r
UNDEF:000113A8 ; UINT_PTR __stdcall SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc)
UNDEF:000113A8                 extrn __imp__SetTimer@16:near
UNDEF:000113A8                                         ; CODE XREF: _timer_change_notify+75p
UNDEF:000113A8                                         ; DATA XREF: _timer_change_notify+75r
UNDEF:000113AC ; BOOL __stdcall KillTimer(HWND hWnd, UINT_PTR uIDEvent)
UNDEF:000113AC                 extrn __imp__KillTimer@8:near
UNDEF:000113AC                                         ; CODE XREF: _timer_change_notify+54p
UNDEF:000113AC                                         ; WndProc(x,x,x,x)+1E1p
UNDEF:000113AC                                         ; DATA XREF: ...
UNDEF:000113B0 ; DWORD __stdcall GetTickCount()
UNDEF:000113B0                 extrn __imp__GetTickCount@0:near
UNDEF:000113B0                                         ; CODE XREF: _timer_change_notify+17p
UNDEF:000113B0                                         ; _do_beep+2Fp ...
UNDEF:000113B4 ; BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint)
UNDEF:000113B4                 extrn __imp__ScreenToClient@8:near
UNDEF:000113B4                                         ; CODE XREF: WndProc(x,x,x,x)+2DAEp
UNDEF:000113B4                                         ; DATA XREF: WndProc(x,x,x,x)+2DAEr
UNDEF:000113B8 ; int __cdecl abs(int X)
UNDEF:000113B8                 extrn _abs:near         ; CODE XREF: WndProc(x,x,x,x)+2CECp
UNDEF:000113BC ; BOOL __stdcall GetKeyboardState(PBYTE lpKeyState)
UNDEF:000113BC                 extrn __imp__GetKeyboardState@4:near
UNDEF:000113BC                                         ; CODE XREF: WndProc(x,x,x,x)+2CAFp
UNDEF:000113BC                                         ; _is_alt_pressed+30p ...
UNDEF:000113C0                 extrn _term_do_paste:near ; CODE XREF: WndProc(x,x,x,x)+2C0Ep
UNDEF:000113C4                 extrn _term_invalidate:near
UNDEF:000113C4                                         ; CODE XREF: WndProc(x,x,x,x)+2B94p
UNDEF:000113C8                 extrn _lpage_send:near  ; CODE XREF: WndProc(x,x,x,x)+2AD5p
UNDEF:000113C8                                         ; WndProc(x,x,x,x)+2B19p ...
UNDEF:000113CC ; void __cdecl free(void *Memory)
UNDEF:000113CC                 extrn _free:near        ; CODE XREF: WndProc(x,x,x,x)+2A65p
UNDEF:000113D0                 extrn _luni_send:near   ; CODE XREF: WndProc(x,x,x,x)+2A1Dp
UNDEF:000113D0                                         ; WndProc(x,x,x,x)+2A51p ...
UNDEF:000113D4 ; LONG __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
UNDEF:000113D4                 extrn _ImmGetCompositionStringW@16:near
UNDEF:000113D4                                         ; CODE XREF: WndProc(x,x,x,x)+28F2p
UNDEF:000113D4                                         ; WndProc(x,x,x,x)+293Bp
UNDEF:000113D8 ; BOOL __stdcall ImmReleaseContext(HWND, HIMC)
UNDEF:000113D8                 extrn _ImmReleaseContext@8:near
UNDEF:000113D8                                         ; CODE XREF: WndProc(x,x,x,x)+28A3p
UNDEF:000113D8                                         ; WndProc(x,x,x,x)+2A78p ...
UNDEF:000113DC ; BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
UNDEF:000113DC                 extrn _ImmSetCompositionFontA@8:near
UNDEF:000113DC                                         ; CODE XREF: WndProc(x,x,x,x)+2893p
UNDEF:000113E0 ; HIMC __stdcall ImmGetContext(HWND)
UNDEF:000113E0                 extrn _ImmGetContext@4:near
UNDEF:000113E0                                         ; CODE XREF: WndProc(x,x,x,x)+287Cp
UNDEF:000113E0                                         ; WndProc(x,x,x,x)+28D7p ...
UNDEF:000113E4                 extrn _term_seen_key_event:near
UNDEF:000113E4                                         ; CODE XREF: WndProc(x,x,x,x)+2822p
UNDEF:000113E4                                         ; WndProc(x,x,x,x)+2947p ...
UNDEF:000113E8 ; LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:000113E8                 extrn __imp__DefWindowProcA@16:near
UNDEF:000113E8                                         ; CODE XREF: WndProc(x,x,x,x)+2801p
UNDEF:000113E8                                         ; WndProc(x,x,x,x)+2EEEp
UNDEF:000113E8                                         ; DATA XREF: ...
UNDEF:000113EC ; BOOL __stdcall TranslateMessage(const MSG *lpMsg)
UNDEF:000113EC                 extrn __imp__TranslateMessage@4:near
UNDEF:000113EC                                         ; CODE XREF: WndProc(x,x,x,x)+27ACp
UNDEF:000113EC                                         ; DATA XREF: WndProc(x,x,x,x)+27ACr
UNDEF:000113F0 ; BOOL __stdcall UpdateColors(HDC hdc)
UNDEF:000113F0                 extrn __imp__UpdateColors@4:near
UNDEF:000113F0                                         ; CODE XREF: WndProc(x,x,x,x)+26C7p
UNDEF:000113F0                                         ; WndProc(x,x,x,x)+272Dp
UNDEF:000113F0                                         ; DATA XREF: ...
UNDEF:000113F4 ; BOOL __stdcall GetScrollInfo(HWND hwnd, int nBar, LPSCROLLINFO lpsi)
UNDEF:000113F4                 extrn __imp__GetScrollInfo@12:near
UNDEF:000113F4                                         ; CODE XREF: WndProc(x,x,x,x)+2639p
UNDEF:000113F4                                         ; DATA XREF: WndProc(x,x,x,x)+2639r
UNDEF:000113F8                 extrn _term_scroll:near ; CODE XREF: WndProc(x,x,x,x)+2575p
UNDEF:000113F8                                         ; WndProc(x,x,x,x)+258Cp ...
UNDEF:000113FC                 extrn _UpdateSizeTip:near ; CODE XREF: WndProc(x,x,x,x)+1D8Dp
UNDEF:00011400                 extrn _EnableSizeTip:near ; CODE XREF: WndProc(x,x,x,x)+1B58p
UNDEF:00011400                                         ; WndProc(x,x,x,x)+1B7Bp
UNDEF:00011404 ; BOOL __stdcall DestroyCaret()
UNDEF:00011404                 extrn __imp__DestroyCaret@0:near
UNDEF:00011404                                         ; CODE XREF: WndProc(x,x,x,x)+1B1Fp
UNDEF:00011404                                         ; DATA XREF: WndProc(x,x,x,x)+1B1Fr
UNDEF:00011408                 extrn _term_update:near ; CODE XREF: WndProc(x,x,x,x)+1AF6p
UNDEF:00011408                                         ; WndProc(x,x,x,x)+1B49p
UNDEF:0001140C ; BOOL __stdcall ShowCaret(HWND hWnd)
UNDEF:0001140C                 extrn __imp__ShowCaret@4:near
UNDEF:0001140C                                         ; CODE XREF: WndProc(x,x,x,x)+1A38p
UNDEF:0001140C                                         ; WndProc(x,x,x,x)+1ACEp
UNDEF:0001140C                                         ; DATA XREF: ...
UNDEF:00011410 ; BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint)
UNDEF:00011410                 extrn __imp__EndPaint@8:near
UNDEF:00011410                                         ; CODE XREF: WndProc(x,x,x,x)+1A25p
UNDEF:00011410                                         ; DATA XREF: WndProc(x,x,x,x)+1A25r
UNDEF:00011414 ; BOOL __stdcall Rectangle(HDC hdc, int left, int top, int right, int bottom)
UNDEF:00011414                 extrn __imp__Rectangle@20:near
UNDEF:00011414                                         ; CODE XREF: WndProc(x,x,x,x)+1961p
UNDEF:00011414                                         ; DATA XREF: WndProc(x,x,x,x)+1961r
UNDEF:00011418 ; int __stdcall ExcludeClipRect(HDC hdc, int left, int top, int right, int bottom)
UNDEF:00011418                 extrn __imp__ExcludeClipRect@20:near
UNDEF:00011418                                         ; CODE XREF: WndProc(x,x,x,x)+1932p
UNDEF:00011418                                         ; DATA XREF: WndProc(x,x,x,x)+1932r
UNDEF:0001141C ; int __stdcall IntersectClipRect(HDC hdc, int left, int top, int right, int bottom)
UNDEF:0001141C                 extrn __imp__IntersectClipRect@20:near
UNDEF:0001141C                                         ; CODE XREF: WndProc(x,x,x,x)+18DFp
UNDEF:0001141C                                         ; DATA XREF: WndProc(x,x,x,x)+18DFr
UNDEF:00011420 ; HPEN __stdcall CreatePen(int iStyle, int cWidth, COLORREF color)
UNDEF:00011420                 extrn __imp__CreatePen@12:near
UNDEF:00011420                                         ; CODE XREF: WndProc(x,x,x,x)+188Ap
UNDEF:00011420                                         ; _do_text_internal+FB9p ...
UNDEF:00011424 ; HBRUSH __stdcall CreateSolidBrush(COLORREF color)
UNDEF:00011424                 extrn __imp__CreateSolidBrush@4:near
UNDEF:00011424                                         ; CODE XREF: WndProc(x,x,x,x)+184Ap
UNDEF:00011424                                         ; DATA XREF: WndProc(x,x,x,x)+184Ar
UNDEF:00011428                 extrn _term_paint:near  ; CODE XREF: WndProc(x,x,x,x)+17CFp
UNDEF:0001142C ; HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint)
UNDEF:0001142C                 extrn __imp__BeginPaint@8:near
UNDEF:0001142C                                         ; CODE XREF: WndProc(x,x,x,x)+1713p
UNDEF:0001142C                                         ; DATA XREF: WndProc(x,x,x,x)+1713r
UNDEF:00011430 ; BOOL __stdcall HideCaret(HWND hWnd)
UNDEF:00011430                 extrn __imp__HideCaret@4:near
UNDEF:00011430                                         ; CODE XREF: WndProc(x,x,x,x)+16F9p
UNDEF:00011430                                         ; DATA XREF: WndProc(x,x,x,x)+16F9r
UNDEF:00011434                 extrn _term_deselect:near ; CODE XREF: WndProc(x,x,x,x)+16DAp
UNDEF:00011438 ; HWND __stdcall GetCapture()
UNDEF:00011438                 extrn __imp__GetCapture@0:near
UNDEF:00011438                                         ; CODE XREF: WndProc(x,x,x,x)+152Dp
UNDEF:00011438                                         ; DATA XREF: WndProc(x,x,x,x)+152Dr
UNDEF:0001143C                 extrn _noise_ultralight:near
UNDEF:0001143C                                         ; CODE XREF: WndProc(x,x,x,x)+1517p
UNDEF:0001143C                                         ; WndProc(x,x,x,x)+16B0p ...
UNDEF:00011440 ; BOOL __stdcall ReleaseCapture()
UNDEF:00011440                 extrn __imp__ReleaseCapture@0:near
UNDEF:00011440                                         ; CODE XREF: WndProc(x,x,x,x)+14B7p
UNDEF:00011440                                         ; DATA XREF: WndProc(x,x,x,x)+14B7r
UNDEF:00011444                 extrn _term_mouse:near  ; CODE XREF: WndProc(x,x,x,x)+14A5p
UNDEF:00011444                                         ; WndProc(x,x,x,x)+1656p ...
UNDEF:00011448 ; HWND __stdcall SetCapture(HWND hWnd)
UNDEF:00011448                 extrn __imp__SetCapture@4:near
UNDEF:00011448                                         ; CODE XREF: WndProc(x,x,x,x)+13B3p
UNDEF:00011448                                         ; DATA XREF: WndProc(x,x,x,x)+13B3r
UNDEF:0001144C ; BOOL __stdcall TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const RECT *prcRect)
UNDEF:0001144C                 extrn __imp__TrackPopupMenu@28:near
UNDEF:0001144C                                         ; CODE XREF: WndProc(x,x,x,x)+10BBp
UNDEF:0001144C                                         ; DATA XREF: WndProc(x,x,x,x)+10BBr
UNDEF:00011450 ; BOOL __stdcall GetCursorPos(LPPOINT lpPoint)
UNDEF:00011450                 extrn __imp__GetCursorPos@4:near
UNDEF:00011450                                         ; CODE XREF: WndProc(x,x,x,x)+108Dp
UNDEF:00011450                                         ; WndProc(x,x,x,x)+11F1p
UNDEF:00011450                                         ; DATA XREF: ...
UNDEF:00011454 ; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00011454                 extrn __imp__SendMessageA@16:near
UNDEF:00011454                                         ; CODE XREF: WndProc(x,x,x,x)+FD2p
UNDEF:00011454                                         ; WndProc(x,x,x,x)+12BCp ...
UNDEF:00011458 ; BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00011458                 extrn __imp__PostMessageA@16:near
UNDEF:00011458                                         ; CODE XREF: WndProc(x,x,x,x)+F90p
UNDEF:00011458                                         ; _agent_schedule_callback+51p
UNDEF:00011458                                         ; DATA XREF: ...
UNDEF:0001145C                 extrn _launch_help:near ; CODE XREF: WndProc(x,x,x,x)+F55p
UNDEF:00011460                 extrn _showabout:near   ; CODE XREF: WndProc(x,x,x,x)+F42p
UNDEF:00011464                 extrn _term_clrsb:near  ; CODE XREF: WndProc(x,x,x,x)+EFDp
UNDEF:00011468                 extrn _term_copyall:near ; CODE XREF: WndProc(x,x,x,x)+EDBp
UNDEF:0001146C ; BOOL __stdcall SetWindowTextA(HWND hWnd, LPCSTR lpString)
UNDEF:0001146C                 extrn __imp__SetWindowTextA@8:near
UNDEF:0001146C                                         ; CODE XREF: WndProc(x,x,x,x)+D0Dp
UNDEF:0001146C                                         ; WndProc(x,x,x,x)+213Bp ...
UNDEF:00011470                 extrn _force_normal:near ; CODE XREF: WndProc(x,x,x,x)+C8Dp
UNDEF:00011474 ; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00011474                 extrn __imp__SetWindowLongA@12:near
UNDEF:00011474                                         ; CODE XREF: WndProc(x,x,x,x)+C09p
UNDEF:00011474                                         ; WndProc(x,x,x,x)+C33p ...
UNDEF:00011478 ; LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex)
UNDEF:00011478                 extrn __imp__GetWindowLongA@8:near
UNDEF:00011478                                         ; CODE XREF: WndProc(x,x,x,x)+A0Ap
UNDEF:00011478                                         ; WndProc(x,x,x,x)+A25p ...
UNDEF:0001147C                 extrn _term_reconfig:near ; CODE XREF: WndProc(x,x,x,x)+8E9p
UNDEF:00011480                 extrn _ldisc_send:near  ; CODE XREF: WndProc(x,x,x,x)+897p
UNDEF:00011480                                         ; WndProc(x,x,x,x)+F31p ...
UNDEF:00011484                 extrn _ldisc_configure:near
UNDEF:00011484                                         ; CODE XREF: WndProc(x,x,x,x)+882p
UNDEF:00011488                 extrn _log_reconfig:near ; CODE XREF: WndProc(x,x,x,x)+855p
UNDEF:0001148C ; BOOL __stdcall EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable)
UNDEF:0001148C                 extrn __imp__EnableMenuItem@12:near
UNDEF:0001148C                                         ; CODE XREF: WndProc(x,x,x,x)+807p
UNDEF:0001148C                                         ; DATA XREF: WndProc(x,x,x,x)+807r
UNDEF:00011490                 extrn _conf_free:near   ; CODE XREF: WndProc(x,x,x,x)+798p
UNDEF:00011490                                         ; WndProc(x,x,x,x)+EC7p
UNDEF:00011494                 extrn _do_reconfig:near ; CODE XREF: WndProc(x,x,x,x)+770p
UNDEF:00011498                 extrn _conf_copy:near   ; CODE XREF: WndProc(x,x,x,x)+71Ep
UNDEF:0001149C                 extrn _term_pwron:near  ; CODE XREF: WndProc(x,x,x,x)+6CAp
UNDEF:0001149C                                         ; WndProc(x,x,x,x)+F13p
UNDEF:000114A0                 extrn _logevent:near    ; CODE XREF: WndProc(x,x,x,x)+6BAp
UNDEF:000114A4 ; BOOL __stdcall CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
UNDEF:000114A4                 extrn __imp__CreateProcessA@40:near
UNDEF:000114A4                                         ; CODE XREF: WndProc(x,x,x,x)+635p
UNDEF:000114A4                                         ; DATA XREF: WndProc(x,x,x,x)+635r
UNDEF:000114A8 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
UNDEF:000114A8                 extrn __imp__GetModuleFileNameA@12:near
UNDEF:000114A8                                         ; CODE XREF: WndProc(x,x,x,x)+5B4p
UNDEF:000114A8                                         ; DATA XREF: WndProc(x,x,x,x)+5B4r
UNDEF:000114AC                 extrn _conf_serialise:near ; CODE XREF: WndProc(x,x,x,x)+4B8p
UNDEF:000114B0 ; HANDLE __stdcall CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName)
UNDEF:000114B0                 extrn __imp__CreateFileMappingA@24:near
UNDEF:000114B0                                         ; CODE XREF: WndProc(x,x,x,x)+453p
UNDEF:000114B0                                         ; DATA XREF: WndProc(x,x,x,x)+453r
UNDEF:000114B4                 extrn _conf_serialised_size:near
UNDEF:000114B4                                         ; CODE XREF: WndProc(x,x,x,x)+40Fp
UNDEF:000114B8                 extrn _showeventlog:near ; CODE XREF: WndProc(x,x,x,x)+3DDp
UNDEF:000114BC ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:000114BC                 extrn __imp__DestroyWindow@4:near
UNDEF:000114BC                                         ; CODE XREF: WndProc(x,x,x,x)+283p
UNDEF:000114BC                                         ; DATA XREF: WndProc(x,x,x,x)+283r
UNDEF:000114C0                 extrn _run_timers:near  ; CODE XREF: WndProc(x,x,x,x)+1F8p
UNDEF:000114C4                 extrn _select_result:near
UNDEF:000114C4                                         ; CODE XREF: _wm_netevent_callback+1Ep
UNDEF:000114C8 ; LONG __stdcall GetMessageTime()
UNDEF:000114C8                 extrn __imp__GetMessageTime@0:near ; CODE XREF: _click+1Ep
UNDEF:000114C8                                         ; DATA XREF: _click+1Er
UNDEF:000114CC ; BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
UNDEF:000114CC                 extrn _ImmSetCompositionWindow@8:near
UNDEF:000114CC                                         ; CODE XREF: _sys_cursor_update+B3p
UNDEF:000114D0 ; BOOL __stdcall SetCaretPos(int X, int Y)
UNDEF:000114D0                 extrn __imp__SetCaretPos@8:near
UNDEF:000114D0                                         ; CODE XREF: _sys_cursor_update+58p
UNDEF:000114D0                                         ; DATA XREF: _sys_cursor_update+58r
UNDEF:000114D4 ; BOOL __stdcall LineTo(HDC hdc, int x, int y)
UNDEF:000114D4                 extrn __imp__LineTo@12:near
UNDEF:000114D4                                         ; CODE XREF: _do_text_internal+1017p
UNDEF:000114D4                                         ; _do_cursor+2EEp
UNDEF:000114D4                                         ; DATA XREF: ...
UNDEF:000114D8 ; BOOL __stdcall MoveToEx(HDC hdc, int x, int y, LPPOINT lppt)
UNDEF:000114D8                 extrn __imp__MoveToEx@16:near
UNDEF:000114D8                                         ; CODE XREF: _do_text_internal+FF6p
UNDEF:000114D8                                         ; _do_cursor+2C5p
UNDEF:000114D8                                         ; DATA XREF: ...
UNDEF:000114DC ; BOOL __stdcall ExtTextOutW(HDC hdc, int x, int y, UINT options, const RECT *lprect, LPCWSTR lpString, UINT c, const INT *lpDx)
UNDEF:000114DC                 extrn __imp__ExtTextOutW@32:near
UNDEF:000114DC                                         ; CODE XREF: _do_text_internal+BEFp
UNDEF:000114DC                                         ; _do_text_internal+C64p ...
UNDEF:000114E0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
UNDEF:000114E0                 extrn __imp__MultiByteToWideChar@24:near
UNDEF:000114E0                                         ; CODE XREF: _do_text_internal+B33p
UNDEF:000114E0                                         ; _do_text_internal+B83p ...
UNDEF:000114E4 ; BOOL __stdcall IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar)
UNDEF:000114E4                 extrn __imp__IsDBCSLeadByteEx@8:near
UNDEF:000114E4                                         ; CODE XREF: _do_text_internal+AB5p
UNDEF:000114E4                                         ; DATA XREF: _do_text_internal+AB5r
UNDEF:000114E8                 extrn _saferealloc:near ; CODE XREF: _do_text_internal+851p
UNDEF:000114E8                                         ; _do_text_internal+CBBp ...
UNDEF:000114EC ; int __stdcall GetBkMode(HDC hdc)
UNDEF:000114EC                 extrn __imp__GetBkMode@4:near
UNDEF:000114EC                                         ; CODE XREF: _general_textout+189p
UNDEF:000114EC                                         ; DATA XREF: _general_textout+189r
UNDEF:000114F0                 extrn _is_rtl:near      ; CODE XREF: _general_textout+5Fp
UNDEF:000114F0                                         ; _general_textout+A0p
UNDEF:000114F4 ; DWORD __stdcall GetCharacterPlacementW(HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags)
UNDEF:000114F4                 extrn __imp__GetCharacterPlacementW@24:near
UNDEF:000114F4                                         ; CODE XREF: _exact_textout+A7p
UNDEF:000114F4                                         ; DATA XREF: _exact_textout+A7r
UNDEF:000114F8 ; COLORREF __stdcall SetPixel(HDC hdc, int x, int y, COLORREF color)
UNDEF:000114F8                 extrn __imp__SetPixel@16:near ; CODE XREF: _do_cursor+36Cp
UNDEF:000114F8                                         ; DATA XREF: _do_cursor+36Cr
UNDEF:000114FC ; BOOL __stdcall Polyline(HDC hdc, const POINT *apt, int cpt)
UNDEF:000114FC                 extrn __imp__Polyline@12:near ; CODE XREF: _do_cursor+1AFp
UNDEF:000114FC                                         ; DATA XREF: _do_cursor+1AFr
UNDEF:00011500 ; BOOL __stdcall GetCharWidthW(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer)
UNDEF:00011500                 extrn __imp__GetCharWidthW@16:near
UNDEF:00011500                                         ; CODE XREF: _char_width+23Cp
UNDEF:00011500                                         ; DATA XREF: _char_width+23Cr
UNDEF:00011504 ; BOOL __stdcall GetCharWidth32W(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer)
UNDEF:00011504                 extrn __imp__GetCharWidth32W@16:near
UNDEF:00011504                                         ; CODE XREF: _char_width+216p
UNDEF:00011504                                         ; DATA XREF: _char_width+216r
UNDEF:00011508 ; BOOL __stdcall GetCharWidthA(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer)
UNDEF:00011508                 extrn __imp__GetCharWidthA@16:near
UNDEF:00011508                                         ; CODE XREF: _char_width+1B6p
UNDEF:00011508                                         ; DATA XREF: _char_width+1B6r
UNDEF:0001150C ; BOOL __stdcall GetCharWidth32A(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer)
UNDEF:0001150C                 extrn __imp__GetCharWidth32A@16:near
UNDEF:0001150C                                         ; CODE XREF: _char_width+186p
UNDEF:0001150C                                         ; DATA XREF: _char_width+186r
UNDEF:00011510                 extrn _load_system32_dll:near ; CODE XREF: _init_winfuncs+21p
UNDEF:00011514                 extrn _xlat_uskbd2cyrllic:near
UNDEF:00011514                                         ; CODE XREF: _TranslateKey+1C9Cp
UNDEF:00011518 ; BOOL __stdcall MessageBeep(UINT uType)
UNDEF:00011518                 extrn __imp__MessageBeep@4:near
UNDEF:00011518                                         ; CODE XREF: _TranslateKey+1B04p
UNDEF:00011518                                         ; _do_beep+56p ...
UNDEF:0001151C                 extrn _check_compose:near ; CODE XREF: _TranslateKey+1AE9p
UNDEF:00011520 ; int __stdcall ToAsciiEx(UINT uVirtKey, UINT uScanCode, const BYTE *lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl)
UNDEF:00011520                 extrn __imp__ToAsciiEx@24:near
UNDEF:00011520                                         ; CODE XREF: _TranslateKey+1982p
UNDEF:00011520                                         ; DATA XREF: _TranslateKey+1982r
UNDEF:00011524                 extrn _format_arrow_key:near ; CODE XREF: _TranslateKey+1834p
UNDEF:00011528                 extrn _term_scroll_to_selection:near
UNDEF:00011528                                         ; CODE XREF: _TranslateKey+623p
UNDEF:0001152C ; BOOL __stdcall SetKeyboardState(LPBYTE lpKeyState)
UNDEF:0001152C                 extrn __imp__SetKeyboardState@4:near
UNDEF:0001152C                                         ; CODE XREF: _TranslateKey+184p
UNDEF:0001152C                                         ; DATA XREF: _TranslateKey+184r
UNDEF:00011530 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00011530                 extrn _strcpy:near      ; CODE XREF: _set_title+3Bp
UNDEF:00011530                                         ; _set_icon+3Bp ...
UNDEF:00011534 ; BOOL __stdcall UnrealizeObject(HGDIOBJ h)
UNDEF:00011534                 extrn __imp__UnrealizeObject@4:near
UNDEF:00011534                                         ; CODE XREF: _palette_set+63p
UNDEF:00011534                                         ; DATA XREF: _palette_set+63r
UNDEF:00011538 ; UINT __stdcall SetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY *pPalEntries)
UNDEF:00011538                 extrn __imp__SetPaletteEntries@16:near
UNDEF:00011538                                         ; CODE XREF: _real_palette_set+8Fp
UNDEF:00011538                                         ; _palette_reset+13Ep
UNDEF:00011538                                         ; DATA XREF: ...
UNDEF:0001153C ; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
UNDEF:0001153C                 extrn __imp__GlobalFree@4:near ; CODE XREF: _write_aclip+109p
UNDEF:0001153C                                         ; _write_clip+9Dp ...
UNDEF:00011540 ; BOOL __stdcall CloseClipboard()
UNDEF:00011540                 extrn __imp__CloseClipboard@0:near
UNDEF:00011540                                         ; CODE XREF: _write_aclip+F4p
UNDEF:00011540                                         ; _write_clip+10F3p ...
UNDEF:00011544 ; HANDLE __stdcall SetClipboardData(UINT uFormat, HANDLE hMem)
UNDEF:00011544                 extrn __imp__SetClipboardData@8:near
UNDEF:00011544                                         ; CODE XREF: _write_aclip+E5p
UNDEF:00011544                                         ; _write_clip+10A1p ...
UNDEF:00011548 ; BOOL __stdcall EmptyClipboard()
UNDEF:00011548                 extrn __imp__EmptyClipboard@0:near
UNDEF:00011548                                         ; CODE XREF: _write_aclip+D0p
UNDEF:00011548                                         ; _write_clip+108Cp
UNDEF:00011548                                         ; DATA XREF: ...
UNDEF:0001154C ; BOOL __stdcall OpenClipboard(HWND hWndNewOwner)
UNDEF:0001154C                 extrn __imp__OpenClipboard@4:near
UNDEF:0001154C                                         ; CODE XREF: _write_aclip+BDp
UNDEF:0001154C                                         ; _write_clip+1079p ...
UNDEF:00011550 ; BOOL __stdcall GlobalUnlock(HGLOBAL hMem)
UNDEF:00011550                 extrn __imp__GlobalUnlock@4:near
UNDEF:00011550                                         ; CODE XREF: _write_aclip+82p
UNDEF:00011550                                         ; _write_clip+131p ...
UNDEF:00011554 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00011554                 extrn _memcpy:near      ; CODE XREF: _write_aclip+6Bp
UNDEF:00011554                                         ; _write_clip+177p ...
UNDEF:00011558 ; LPVOID __stdcall GlobalLock(HGLOBAL hMem)
UNDEF:00011558                 extrn __imp__GlobalLock@4:near ; CODE XREF: _write_aclip+44p
UNDEF:00011558                                         ; _write_clip+CEp ...
UNDEF:0001155C ; HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
UNDEF:0001155C                 extrn __imp__GlobalAlloc@8:near ; CODE XREF: _write_aclip+23p
UNDEF:0001155C                                         ; _write_clip+5Ap ...
UNDEF:00011560 ; UINT __stdcall RegisterClipboardFormatA(LPCSTR lpszFormat)
UNDEF:00011560                 extrn __imp__RegisterClipboardFormatA@4:near
UNDEF:00011560                                         ; CODE XREF: _write_clip+10D6p
UNDEF:00011560                                         ; DATA XREF: _write_clip+10D6r
UNDEF:00011564 ; char *__cdecl strcat(char *Dest, const char *Source)
UNDEF:00011564                 extrn _strcat:near      ; CODE XREF: _write_clip+4E2p
UNDEF:00011568                 extrn _get_unitab:near  ; CODE XREF: _write_clip+250p
UNDEF:0001156C ; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
UNDEF:0001156C                 extrn __imp__WideCharToMultiByte@32:near
UNDEF:0001156C                                         ; CODE XREF: _write_clip+3Dp
UNDEF:0001156C                                         ; _write_clip+199p ...
UNDEF:00011570 ; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
UNDEF:00011570                 extrn __imp__CreateThread@24:near
UNDEF:00011570                                         ; CODE XREF: _request_paste+34p
UNDEF:00011570                                         ; DATA XREF: _request_paste+34r
UNDEF:00011574 ; HANDLE __stdcall GetClipboardData(UINT uFormat)
UNDEF:00011574                 extrn __imp__GetClipboardData@4:near
UNDEF:00011574                                         ; CODE XREF: clipboard_read_threadfunc(x):loc_10000p
UNDEF:00011574                                         ; clipboard_read_threadfunc(x)+72p
UNDEF:00011574                                         ; DATA XREF: ...
UNDEF:00011578                 extrn _schedule_timer:near ; CODE XREF: _flash_window+DAp
UNDEF:00011578                                         ; _flash_window+12Fp
UNDEF:0001157C ; BOOL __stdcall FlashWindow(HWND hWnd, BOOL bInvert)
UNDEF:0001157C                 extrn __imp__FlashWindow@8:near
UNDEF:0001157C                                         ; CODE XREF: _flash_window+62p
UNDEF:0001157C                                         ; _flash_window+BCp ...
UNDEF:00011580 ; BOOL __stdcall Beep(DWORD dwFreq, DWORD dwDuration)
UNDEF:00011580                 extrn __imp__Beep@8:near ; CODE XREF: _do_beep+162p
UNDEF:00011580                                         ; DATA XREF: _do_beep+162r
UNDEF:00011584 ; BOOL __stdcall PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
UNDEF:00011584                 extrn __imp__PlaySoundA@12:near ; CODE XREF: _do_beep+A8p
UNDEF:00011584                                         ; DATA XREF: _do_beep+A8r
UNDEF:00011588                 extrn _conf_get_filename:near ; CODE XREF: _do_beep+8Ep
UNDEF:0001158C ; DWORD __stdcall CheckMenuItem(HMENU hMenu, UINT uIDCheckItem, UINT uCheck)
UNDEF:0001158C                 extrn __imp__CheckMenuItem@12:near
UNDEF:0001158C                                         ; CODE XREF: _make_full_screen+151p
UNDEF:0001158C                                         ; _clear_full_screen+116p
UNDEF:0001158C                                         ; DATA XREF: ...
UNDEF:00011590                 extrn _term_data:near   ; CODE XREF: _from_backend+15p
UNDEF:00011594                 extrn _term_data_untrusted:near
UNDEF:00011594                                         ; CODE XREF: _from_backend_untrusted+12p
UNDEF:00011598                 extrn _term_get_userpass_input:near
UNDEF:00011598                                         ; CODE XREF: _get_userpass_input+3Ap
UNDEF:0001159C                 extrn _cmdline_get_passwd_input:near
UNDEF:0001159C                                         ; CODE XREF: _get_userpass_input+17p
UNDEF:0001159C
UNDEF:0001159C
UNDEF:0001159C                 end