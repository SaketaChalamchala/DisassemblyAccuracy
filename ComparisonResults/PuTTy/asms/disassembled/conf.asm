.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : BD9477CFB995346CA5E87FC4624AD8A6
.data:00000000 ; Input CRC32 : 62A6A0A1
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\conf.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 _subkeytypes    dd 0                    ; DATA XREF: _conf_cmp+52r
.data:00000000                                         ; _free_key+8r ...
.data:00000004                 db    0
.data:00000005                 db    0
.data:00000006                 db    0
.data:00000007                 db    0
.data:00000008                 db    0
.data:00000009                 db    0
.data:0000000A                 db    0
.data:0000000B                 db    0
.data:0000000C                 db    0
.data:0000000D                 db    0
.data:0000000E                 db    0
.data:0000000F                 db    0
.data:00000010                 db    0
.data:00000011                 db    0
.data:00000012                 db    0
.data:00000013                 db    0
.data:00000014                 db    0
.data:00000015                 db    0
.data:00000016                 db    0
.data:00000017                 db    0
.data:00000018                 db    0
.data:00000019                 db    0
.data:0000001A                 db    0
.data:0000001B                 db    0
.data:0000001C                 db    0
.data:0000001D                 db    0
.data:0000001E                 db    0
.data:0000001F                 db    0
.data:00000020                 db    0
.data:00000021                 db    0
.data:00000022                 db    0
.data:00000023                 db    0
.data:00000024                 db    0
.data:00000025                 db    0
.data:00000026                 db    0
.data:00000027                 db    0
.data:00000028                 db    0
.data:00000029                 db    0
.data:0000002A                 db    0
.data:0000002B                 db    0
.data:0000002C                 db    0
.data:0000002D                 db    0
.data:0000002E                 db    0
.data:0000002F                 db    0
.data:00000030                 db    0
.data:00000031                 db    0
.data:00000032                 db    0
.data:00000033                 db    0
.data:00000034                 db    0
.data:00000035                 db    0
.data:00000036                 db    0
.data:00000037                 db    0
.data:00000038                 db    0
.data:00000039                 db    0
.data:0000003A                 db    0
.data:0000003B                 db    0
.data:0000003C                 db    0
.data:0000003D                 db    0
.data:0000003E                 db    0
.data:0000003F                 db    0
.data:00000040                 db    0
.data:00000041                 db    0
.data:00000042                 db    0
.data:00000043                 db    0
.data:00000044                 db    0
.data:00000045                 db    0
.data:00000046                 db    0
.data:00000047                 db    0
.data:00000048                 db    0
.data:00000049                 db    0
.data:0000004A                 db    0
.data:0000004B                 db    0
.data:0000004C                 db    0
.data:0000004D                 db    0
.data:0000004E                 db    0
.data:0000004F                 db    0
.data:00000050                 db    0
.data:00000051                 db    0
.data:00000052                 db    0
.data:00000053                 db    0
.data:00000054                 db    0
.data:00000055                 db    0
.data:00000056                 db    0
.data:00000057                 db    0
.data:00000058                 db    0
.data:00000059                 db    0
.data:0000005A                 db    0
.data:0000005B                 db    0
.data:0000005C                 db    1
.data:0000005D                 db    0
.data:0000005E                 db    0
.data:0000005F                 db    0
.data:00000060                 db    0
.data:00000061                 db    0
.data:00000062                 db    0
.data:00000063                 db    0
.data:00000064                 db    0
.data:00000065                 db    0
.data:00000066                 db    0
.data:00000067                 db    0
.data:00000068                 db    0
.data:00000069                 db    0
.data:0000006A                 db    0
.data:0000006B                 db    0
.data:0000006C                 db    0
.data:0000006D                 db    0
.data:0000006E                 db    0
.data:0000006F                 db    0
.data:00000070                 db    0
.data:00000071                 db    0
.data:00000072                 db    0
.data:00000073                 db    0
.data:00000074                 db    1
.data:00000075                 db    0
.data:00000076                 db    0
.data:00000077                 db    0
.data:00000078                 db    0
.data:00000079                 db    0
.data:0000007A                 db    0
.data:0000007B                 db    0
.data:0000007C                 db    0
.data:0000007D                 db    0
.data:0000007E                 db    0
.data:0000007F                 db    0
.data:00000080                 db    0
.data:00000081                 db    0
.data:00000082                 db    0
.data:00000083                 db    0
.data:00000084                 db    0
.data:00000085                 db    0
.data:00000086                 db    0
.data:00000087                 db    0
.data:00000088                 db    0
.data:00000089                 db    0
.data:0000008A                 db    0
.data:0000008B                 db    0
.data:0000008C                 db    0
.data:0000008D                 db    0
.data:0000008E                 db    0
.data:0000008F                 db    0
.data:00000090                 db    0
.data:00000091                 db    0
.data:00000092                 db    0
.data:00000093                 db    0
.data:00000094                 db    0
.data:00000095                 db    0
.data:00000096                 db    0
.data:00000097                 db    0
.data:00000098                 db    0
.data:00000099                 db    0
.data:0000009A                 db    0
.data:0000009B                 db    0
.data:0000009C                 db    1
.data:0000009D                 db    0
.data:0000009E                 db    0
.data:0000009F                 db    0
.data:000000A0                 db    0
.data:000000A1                 db    0
.data:000000A2                 db    0
.data:000000A3                 db    0
.data:000000A4                 db    0
.data:000000A5                 db    0
.data:000000A6                 db    0
.data:000000A7                 db    0
.data:000000A8                 db    0
.data:000000A9                 db    0
.data:000000AA                 db    0
.data:000000AB                 db    0
.data:000000AC                 db    0
.data:000000AD                 db    0
.data:000000AE                 db    0
.data:000000AF                 db    0
.data:000000B0                 db    0
.data:000000B1                 db    0
.data:000000B2                 db    0
.data:000000B3                 db    0
.data:000000B4                 db    0
.data:000000B5                 db    0
.data:000000B6                 db    0
.data:000000B7                 db    0
.data:000000B8                 db    0
.data:000000B9                 db    0
.data:000000BA                 db    0
.data:000000BB                 db    0
.data:000000BC                 db    0
.data:000000BD                 db    0
.data:000000BE                 db    0
.data:000000BF                 db    0
.data:000000C0                 db    2
.data:000000C1                 db    0
.data:000000C2                 db    0
.data:000000C3                 db    0
.data:000000C4                 db    2
.data:000000C5                 db    0
.data:000000C6                 db    0
.data:000000C7                 db    0
.data:000000C8                 db    0
.data:000000C9                 db    0
.data:000000CA                 db    0
.data:000000CB                 db    0
.data:000000CC                 db    0
.data:000000CD                 db    0
.data:000000CE                 db    0
.data:000000CF                 db    0
.data:000000D0                 db    0
.data:000000D1                 db    0
.data:000000D2                 db    0
.data:000000D3                 db    0
.data:000000D4                 db    0
.data:000000D5                 db    0
.data:000000D6                 db    0
.data:000000D7                 db    0
.data:000000D8                 db    0
.data:000000D9                 db    0
.data:000000DA                 db    0
.data:000000DB                 db    0
.data:000000DC                 db    0
.data:000000DD                 db    0
.data:000000DE                 db    0
.data:000000DF                 db    0
.data:000000E0                 db    0
.data:000000E1                 db    0
.data:000000E2                 db    0
.data:000000E3                 db    0
.data:000000E4                 db    0
.data:000000E5                 db    0
.data:000000E6                 db    0
.data:000000E7                 db    0
.data:000000E8                 db    0
.data:000000E9                 db    0
.data:000000EA                 db    0
.data:000000EB                 db    0
.data:000000EC                 db    0
.data:000000ED                 db    0
.data:000000EE                 db    0
.data:000000EF                 db    0
.data:000000F0                 db    0
.data:000000F1                 db    0
.data:000000F2                 db    0
.data:000000F3                 db    0
.data:000000F4                 db    0
.data:000000F5                 db    0
.data:000000F6                 db    0
.data:000000F7                 db    0
.data:000000F8                 db    0
.data:000000F9                 db    0
.data:000000FA                 db    0
.data:000000FB                 db    0
.data:000000FC                 db    0
.data:000000FD                 db    0
.data:000000FE                 db    0
.data:000000FF                 db    0
.data:00000100                 db    0
.data:00000101                 db    0
.data:00000102                 db    0
.data:00000103                 db    0
.data:00000104                 db    0
.data:00000105                 db    0
.data:00000106                 db    0
.data:00000107                 db    0
.data:00000108                 db    0
.data:00000109                 db    0
.data:0000010A                 db    0
.data:0000010B                 db    0
.data:0000010C                 db    0
.data:0000010D                 db    0
.data:0000010E                 db    0
.data:0000010F                 db    0
.data:00000110                 db    0
.data:00000111                 db    0
.data:00000112                 db    0
.data:00000113                 db    0
.data:00000114                 db    0
.data:00000115                 db    0
.data:00000116                 db    0
.data:00000117                 db    0
.data:00000118                 db    0
.data:00000119                 db    0
.data:0000011A                 db    0
.data:0000011B                 db    0
.data:0000011C                 db    0
.data:0000011D                 db    0
.data:0000011E                 db    0
.data:0000011F                 db    0
.data:00000120                 db    0
.data:00000121                 db    0
.data:00000122                 db    0
.data:00000123                 db    0
.data:00000124                 db    0
.data:00000125                 db    0
.data:00000126                 db    0
.data:00000127                 db    0
.data:00000128                 db    0
.data:00000129                 db    0
.data:0000012A                 db    0
.data:0000012B                 db    0
.data:0000012C                 db    0
.data:0000012D                 db    0
.data:0000012E                 db    0
.data:0000012F                 db    0
.data:00000130                 db    0
.data:00000131                 db    0
.data:00000132                 db    0
.data:00000133                 db    0
.data:00000134                 db    0
.data:00000135                 db    0
.data:00000136                 db    0
.data:00000137                 db    0
.data:00000138                 db    0
.data:00000139                 db    0
.data:0000013A                 db    0
.data:0000013B                 db    0
.data:0000013C                 db    0
.data:0000013D                 db    0
.data:0000013E                 db    0
.data:0000013F                 db    0
.data:00000140                 db    0
.data:00000141                 db    0
.data:00000142                 db    0
.data:00000143                 db    0
.data:00000144                 db    0
.data:00000145                 db    0
.data:00000146                 db    0
.data:00000147                 db    0
.data:00000148                 db    0
.data:00000149                 db    0
.data:0000014A                 db    0
.data:0000014B                 db    0
.data:0000014C                 db    0
.data:0000014D                 db    0
.data:0000014E                 db    0
.data:0000014F                 db    0
.data:00000150                 db    0
.data:00000151                 db    0
.data:00000152                 db    0
.data:00000153                 db    0
.data:00000154                 db    0
.data:00000155                 db    0
.data:00000156                 db    0
.data:00000157                 db    0
.data:00000158                 db    0
.data:00000159                 db    0
.data:0000015A                 db    0
.data:0000015B                 db    0
.data:0000015C                 db    0
.data:0000015D                 db    0
.data:0000015E                 db    0
.data:0000015F                 db    0
.data:00000160                 db    0
.data:00000161                 db    0
.data:00000162                 db    0
.data:00000163                 db    0
.data:00000164                 db    0
.data:00000165                 db    0
.data:00000166                 db    0
.data:00000167                 db    0
.data:00000168                 db    0
.data:00000169                 db    0
.data:0000016A                 db    0
.data:0000016B                 db    0
.data:0000016C                 db    0
.data:0000016D                 db    0
.data:0000016E                 db    0
.data:0000016F                 db    0
.data:00000170                 db    0
.data:00000171                 db    0
.data:00000172                 db    0
.data:00000173                 db    0
.data:00000174                 db    0
.data:00000175                 db    0
.data:00000176                 db    0
.data:00000177                 db    0
.data:00000178                 db    0
.data:00000179                 db    0
.data:0000017A                 db    0
.data:0000017B                 db    0
.data:0000017C                 db    0
.data:0000017D                 db    0
.data:0000017E                 db    0
.data:0000017F                 db    0
.data:00000180                 db    0
.data:00000181                 db    0
.data:00000182                 db    0
.data:00000183                 db    0
.data:00000184                 db    0
.data:00000185                 db    0
.data:00000186                 db    0
.data:00000187                 db    0
.data:00000188                 db    0
.data:00000189                 db    0
.data:0000018A                 db    0
.data:0000018B                 db    0
.data:0000018C                 db    0
.data:0000018D                 db    0
.data:0000018E                 db    0
.data:0000018F                 db    0
.data:00000190                 db    0
.data:00000191                 db    0
.data:00000192                 db    0
.data:00000193                 db    0
.data:00000194                 db    0
.data:00000195                 db    0
.data:00000196                 db    0
.data:00000197                 db    0
.data:00000198                 db    0
.data:00000199                 db    0
.data:0000019A                 db    0
.data:0000019B                 db    0
.data:0000019C                 db    0
.data:0000019D                 db    0
.data:0000019E                 db    0
.data:0000019F                 db    0
.data:000001A0                 db    0
.data:000001A1                 db    0
.data:000001A2                 db    0
.data:000001A3                 db    0
.data:000001A4                 db    0
.data:000001A5                 db    0
.data:000001A6                 db    0
.data:000001A7                 db    0
.data:000001A8                 db    0
.data:000001A9                 db    0
.data:000001AA                 db    0
.data:000001AB                 db    0
.data:000001AC                 db    0
.data:000001AD                 db    0
.data:000001AE                 db    0
.data:000001AF                 db    0
.data:000001B0                 db    0
.data:000001B1                 db    0
.data:000001B2                 db    0
.data:000001B3                 db    0
.data:000001B4                 db    0
.data:000001B5                 db    0
.data:000001B6                 db    0
.data:000001B7                 db    0
.data:000001B8                 db    0
.data:000001B9                 db    0
.data:000001BA                 db    0
.data:000001BB                 db    0
.data:000001BC                 db    0
.data:000001BD                 db    0
.data:000001BE                 db    0
.data:000001BF                 db    0
.data:000001C0                 db    0
.data:000001C1                 db    0
.data:000001C2                 db    0
.data:000001C3                 db    0
.data:000001C4                 db    0
.data:000001C5                 db    0
.data:000001C6                 db    0
.data:000001C7                 db    0
.data:000001C8                 db    0
.data:000001C9                 db    0
.data:000001CA                 db    0
.data:000001CB                 db    0
.data:000001CC                 db    0
.data:000001CD                 db    0
.data:000001CE                 db    0
.data:000001CF                 db    0
.data:000001D0                 db    0
.data:000001D1                 db    0
.data:000001D2                 db    0
.data:000001D3                 db    0
.data:000001D4                 db    0
.data:000001D5                 db    0
.data:000001D6                 db    0
.data:000001D7                 db    0
.data:000001D8                 db    0
.data:000001D9                 db    0
.data:000001DA                 db    0
.data:000001DB                 db    0
.data:000001DC                 db    0
.data:000001DD                 db    0
.data:000001DE                 db    0
.data:000001DF                 db    0
.data:000001E0                 db    0
.data:000001E1                 db    0
.data:000001E2                 db    0
.data:000001E3                 db    0
.data:000001E4                 db    0
.data:000001E5                 db    0
.data:000001E6                 db    0
.data:000001E7                 db    0
.data:000001E8                 db    0
.data:000001E9                 db    0
.data:000001EA                 db    0
.data:000001EB                 db    0
.data:000001EC                 db    0
.data:000001ED                 db    0
.data:000001EE                 db    0
.data:000001EF                 db    0
.data:000001F0                 db    0
.data:000001F1                 db    0
.data:000001F2                 db    0
.data:000001F3                 db    0
.data:000001F4                 db    0
.data:000001F5                 db    0
.data:000001F6                 db    0
.data:000001F7                 db    0
.data:000001F8                 db    0
.data:000001F9                 db    0
.data:000001FA                 db    0
.data:000001FB                 db    0
.data:000001FC                 db    0
.data:000001FD                 db    0
.data:000001FE                 db    0
.data:000001FF                 db    0
.data:00000200                 db    0
.data:00000201                 db    0
.data:00000202                 db    0
.data:00000203                 db    0
.data:00000204                 db    0
.data:00000205                 db    0
.data:00000206                 db    0
.data:00000207                 db    0
.data:00000208                 db    0
.data:00000209                 db    0
.data:0000020A                 db    0
.data:0000020B                 db    0
.data:0000020C                 db    0
.data:0000020D                 db    0
.data:0000020E                 db    0
.data:0000020F                 db    0
.data:00000210                 db    1
.data:00000211                 db    0
.data:00000212                 db    0
.data:00000213                 db    0
.data:00000214                 db    0
.data:00000215                 db    0
.data:00000216                 db    0
.data:00000217                 db    0
.data:00000218                 db    0
.data:00000219                 db    0
.data:0000021A                 db    0
.data:0000021B                 db    0
.data:0000021C                 db    0
.data:0000021D                 db    0
.data:0000021E                 db    0
.data:0000021F                 db    0
.data:00000220                 db    0
.data:00000221                 db    0
.data:00000222                 db    0
.data:00000223                 db    0
.data:00000224                 db    0
.data:00000225                 db    0
.data:00000226                 db    0
.data:00000227                 db    0
.data:00000228                 db    1
.data:00000229                 db    0
.data:0000022A                 db    0
.data:0000022B                 db    0
.data:0000022C                 db    0
.data:0000022D                 db    0
.data:0000022E                 db    0
.data:0000022F                 db    0
.data:00000230                 db    0
.data:00000231                 db    0
.data:00000232                 db    0
.data:00000233                 db    0
.data:00000234                 db    0
.data:00000235                 db    0
.data:00000236                 db    0
.data:00000237                 db    0
.data:00000238                 db    0
.data:00000239                 db    0
.data:0000023A                 db    0
.data:0000023B                 db    0
.data:0000023C                 db    0
.data:0000023D                 db    0
.data:0000023E                 db    0
.data:0000023F                 db    0
.data:00000240                 db    0
.data:00000241                 db    0
.data:00000242                 db    0
.data:00000243                 db    0
.data:00000244                 db    0
.data:00000245                 db    0
.data:00000246                 db    0
.data:00000247                 db    0
.data:00000248                 db    0
.data:00000249                 db    0
.data:0000024A                 db    0
.data:0000024B                 db    0
.data:0000024C                 db    0
.data:0000024D                 db    0
.data:0000024E                 db    0
.data:0000024F                 db    0
.data:00000250                 db    0
.data:00000251                 db    0
.data:00000252                 db    0
.data:00000253                 db    0
.data:00000254                 db    0
.data:00000255                 db    0
.data:00000256                 db    0
.data:00000257                 db    0
.data:00000258                 db    2
.data:00000259                 db    0
.data:0000025A                 db    0
.data:0000025B                 db    0
.data:0000025C                 db    0
.data:0000025D                 db    0
.data:0000025E                 db    0
.data:0000025F                 db    0
.data:00000260                 db    0
.data:00000261                 db    0
.data:00000262                 db    0
.data:00000263                 db    0
.data:00000264                 db    0
.data:00000265                 db    0
.data:00000266                 db    0
.data:00000267                 db    0
.data:00000268                 db    0
.data:00000269                 db    0
.data:0000026A                 db    0
.data:0000026B                 db    0
.data:0000026C                 db    0
.data:0000026D                 db    0
.data:0000026E                 db    0
.data:0000026F                 db    0
.data:00000270                 db    0
.data:00000271                 db    0
.data:00000272                 db    0
.data:00000273                 db    0
.data:00000274                 db    0
.data:00000275                 db    0
.data:00000276                 db    0
.data:00000277                 db    0
.data:00000278                 db    0
.data:00000279                 db    0
.data:0000027A                 db    0
.data:0000027B                 db    0
.data:0000027C                 db    0
.data:0000027D                 db    0
.data:0000027E                 db    0
.data:0000027F                 db    0
.data:00000280                 db    0
.data:00000281                 db    0
.data:00000282                 db    0
.data:00000283                 db    0
.data:00000284                 db    0
.data:00000285                 db    0
.data:00000286                 db    0
.data:00000287                 db    0
.data:00000288                 db    0
.data:00000289                 db    0
.data:0000028A                 db    0
.data:0000028B                 db    0
.data:0000028C                 db    0
.data:0000028D                 db    0
.data:0000028E                 db    0
.data:0000028F                 db    0
.data:00000290                 db    0
.data:00000291                 db    0
.data:00000292                 db    0
.data:00000293                 db    0
.data:00000294                 db    0
.data:00000295                 db    0
.data:00000296                 db    0
.data:00000297                 db    0
.data:00000298                 db    0
.data:00000299                 db    0
.data:0000029A                 db    0
.data:0000029B                 db    0
.data:0000029C                 db    2
.data:0000029D                 db    0
.data:0000029E                 db    0
.data:0000029F                 db    0
.data:000002A0                 db    0
.data:000002A1                 db    0
.data:000002A2                 db    0
.data:000002A3                 db    0
.data:000002A4                 db    0
.data:000002A5                 db    0
.data:000002A6                 db    0
.data:000002A7                 db    0
.data:000002A8                 db    0
.data:000002A9                 db    0
.data:000002AA                 db    0
.data:000002AB                 db    0
.data:000002AC                 db    0
.data:000002AD                 db    0
.data:000002AE                 db    0
.data:000002AF                 db    0
.data:000002B0                 db    0
.data:000002B1                 db    0
.data:000002B2                 db    0
.data:000002B3                 db    0
.data:000002B4                 db    0
.data:000002B5                 db    0
.data:000002B6                 db    0
.data:000002B7                 db    0
.data:000002B8                 db    0
.data:000002B9                 db    0
.data:000002BA                 db    0
.data:000002BB                 db    0
.data:000002BC                 db    0
.data:000002BD                 db    0
.data:000002BE                 db    0
.data:000002BF                 db    0
.data:000002C0                 db    0
.data:000002C1                 db    0
.data:000002C2                 db    0
.data:000002C3                 db    0
.data:000002C4                 db    0
.data:000002C5                 db    0
.data:000002C6                 db    0
.data:000002C7                 db    0
.data:000002C8 _valuetypes     dd 2                    ; DATA XREF: _free_entry+14r
.data:000002C8                                         ; _conf_copy_into+78r ...
.data:000002CC                 db    1
.data:000002CD                 db    0
.data:000002CE                 db    0
.data:000002CF                 db    0
.data:000002D0                 db    1
.data:000002D1                 db    0
.data:000002D2                 db    0
.data:000002D3                 db    0
.data:000002D4                 db    1
.data:000002D5                 db    0
.data:000002D6                 db    0
.data:000002D7                 db    0
.data:000002D8                 db    1
.data:000002D9                 db    0
.data:000002DA                 db    0
.data:000002DB                 db    0
.data:000002DC                 db    1
.data:000002DD                 db    0
.data:000002DE                 db    0
.data:000002DF                 db    0
.data:000002E0                 db    1
.data:000002E1                 db    0
.data:000002E2                 db    0
.data:000002E3                 db    0
.data:000002E4                 db    1
.data:000002E5                 db    0
.data:000002E6                 db    0
.data:000002E7                 db    0
.data:000002E8                 db    1
.data:000002E9                 db    0
.data:000002EA                 db    0
.data:000002EB                 db    0
.data:000002EC                 db    2
.data:000002ED                 db    0
.data:000002EE                 db    0
.data:000002EF                 db    0
.data:000002F0                 db    2
.data:000002F1                 db    0
.data:000002F2                 db    0
.data:000002F3                 db    0
.data:000002F4                 db    1
.data:000002F5                 db    0
.data:000002F6                 db    0
.data:000002F7                 db    0
.data:000002F8                 db    1
.data:000002F9                 db    0
.data:000002FA                 db    0
.data:000002FB                 db    0
.data:000002FC                 db    1
.data:000002FD                 db    0
.data:000002FE                 db    0
.data:000002FF                 db    0
.data:00000300                 db    2
.data:00000301                 db    0
.data:00000302                 db    0
.data:00000303                 db    0
.data:00000304                 db    1
.data:00000305                 db    0
.data:00000306                 db    0
.data:00000307                 db    0
.data:00000308                 db    2
.data:00000309                 db    0
.data:0000030A                 db    0
.data:0000030B                 db    0
.data:0000030C                 db    2
.data:0000030D                 db    0
.data:0000030E                 db    0
.data:0000030F                 db    0
.data:00000310                 db    2
.data:00000311                 db    0
.data:00000312                 db    0
.data:00000313                 db    0
.data:00000314                 db    2
.data:00000315                 db    0
.data:00000316                 db    0
.data:00000317                 db    0
.data:00000318                 db    2
.data:00000319                 db    0
.data:0000031A                 db    0
.data:0000031B                 db    0
.data:0000031C                 db    1
.data:0000031D                 db    0
.data:0000031E                 db    0
.data:0000031F                 db    0
.data:00000320                 db    1
.data:00000321                 db    0
.data:00000322                 db    0
.data:00000323                 db    0
.data:00000324                 db    1
.data:00000325                 db    0
.data:00000326                 db    0
.data:00000327                 db    0
.data:00000328                 db    1
.data:00000329                 db    0
.data:0000032A                 db    0
.data:0000032B                 db    0
.data:0000032C                 db    2
.data:0000032D                 db    0
.data:0000032E                 db    0
.data:0000032F                 db    0
.data:00000330                 db    1
.data:00000331                 db    0
.data:00000332                 db    0
.data:00000333                 db    0
.data:00000334                 db    1
.data:00000335                 db    0
.data:00000336                 db    0
.data:00000337                 db    0
.data:00000338                 db    1
.data:00000339                 db    0
.data:0000033A                 db    0
.data:0000033B                 db    0
.data:0000033C                 db    1
.data:0000033D                 db    0
.data:0000033E                 db    0
.data:0000033F                 db    0
.data:00000340                 db    3
.data:00000341                 db    0
.data:00000342                 db    0
.data:00000343                 db    0
.data:00000344                 db    1
.data:00000345                 db    0
.data:00000346                 db    0
.data:00000347                 db    0
.data:00000348                 db    1
.data:00000349                 db    0
.data:0000034A                 db    0
.data:0000034B                 db    0
.data:0000034C                 db    1
.data:0000034D                 db    0
.data:0000034E                 db    0
.data:0000034F                 db    0
.data:00000350                 db    1
.data:00000351                 db    0
.data:00000352                 db    0
.data:00000353                 db    0
.data:00000354                 db    1
.data:00000355                 db    0
.data:00000356                 db    0
.data:00000357                 db    0
.data:00000358                 db    1
.data:00000359                 db    0
.data:0000035A                 db    0
.data:0000035B                 db    0
.data:0000035C                 db    1
.data:0000035D                 db    0
.data:0000035E                 db    0
.data:0000035F                 db    0
.data:00000360                 db    1
.data:00000361                 db    0
.data:00000362                 db    0
.data:00000363                 db    0
.data:00000364                 db    1
.data:00000365                 db    0
.data:00000366                 db    0
.data:00000367                 db    0
.data:00000368                 db    3
.data:00000369                 db    0
.data:0000036A                 db    0
.data:0000036B                 db    0
.data:0000036C                 db    1
.data:0000036D                 db    0
.data:0000036E                 db    0
.data:0000036F                 db    0
.data:00000370                 db    1
.data:00000371                 db    0
.data:00000372                 db    0
.data:00000373                 db    0
.data:00000374                 db    1
.data:00000375                 db    0
.data:00000376                 db    0
.data:00000377                 db    0
.data:00000378                 db    2
.data:00000379                 db    0
.data:0000037A                 db    0
.data:0000037B                 db    0
.data:0000037C                 db    1
.data:0000037D                 db    0
.data:0000037E                 db    0
.data:0000037F                 db    0
.data:00000380                 db    2
.data:00000381                 db    0
.data:00000382                 db    0
.data:00000383                 db    0
.data:00000384                 db    2
.data:00000385                 db    0
.data:00000386                 db    0
.data:00000387                 db    0
.data:00000388                 db    2
.data:00000389                 db    0
.data:0000038A                 db    0
.data:0000038B                 db    0
.data:0000038C                 db    2
.data:0000038D                 db    0
.data:0000038E                 db    0
.data:0000038F                 db    0
.data:00000390                 db    2
.data:00000391                 db    0
.data:00000392                 db    0
.data:00000393                 db    0
.data:00000394                 db    1
.data:00000395                 db    0
.data:00000396                 db    0
.data:00000397                 db    0
.data:00000398                 db    2
.data:00000399                 db    0
.data:0000039A                 db    0
.data:0000039B                 db    0
.data:0000039C                 db    1
.data:0000039D                 db    0
.data:0000039E                 db    0
.data:0000039F                 db    0
.data:000003A0                 db    1
.data:000003A1                 db    0
.data:000003A2                 db    0
.data:000003A3                 db    0
.data:000003A4                 db    2
.data:000003A5                 db    0
.data:000003A6                 db    0
.data:000003A7                 db    0
.data:000003A8                 db    1
.data:000003A9                 db    0
.data:000003AA                 db    0
.data:000003AB                 db    0
.data:000003AC                 db    1
.data:000003AD                 db    0
.data:000003AE                 db    0
.data:000003AF                 db    0
.data:000003B0                 db    1
.data:000003B1                 db    0
.data:000003B2                 db    0
.data:000003B3                 db    0
.data:000003B4                 db    1
.data:000003B5                 db    0
.data:000003B6                 db    0
.data:000003B7                 db    0
.data:000003B8                 db    1
.data:000003B9                 db    0
.data:000003BA                 db    0
.data:000003BB                 db    0
.data:000003BC                 db    1
.data:000003BD                 db    0
.data:000003BE                 db    0
.data:000003BF                 db    0
.data:000003C0                 db    1
.data:000003C1                 db    0
.data:000003C2                 db    0
.data:000003C3                 db    0
.data:000003C4                 db    1
.data:000003C5                 db    0
.data:000003C6                 db    0
.data:000003C7                 db    0
.data:000003C8                 db    1
.data:000003C9                 db    0
.data:000003CA                 db    0
.data:000003CB                 db    0
.data:000003CC                 db    1
.data:000003CD                 db    0
.data:000003CE                 db    0
.data:000003CF                 db    0
.data:000003D0                 db    1
.data:000003D1                 db    0
.data:000003D2                 db    0
.data:000003D3                 db    0
.data:000003D4                 db    1
.data:000003D5                 db    0
.data:000003D6                 db    0
.data:000003D7                 db    0
.data:000003D8                 db    1
.data:000003D9                 db    0
.data:000003DA                 db    0
.data:000003DB                 db    0
.data:000003DC                 db    1
.data:000003DD                 db    0
.data:000003DE                 db    0
.data:000003DF                 db    0
.data:000003E0                 db    1
.data:000003E1                 db    0
.data:000003E2                 db    0
.data:000003E3                 db    0
.data:000003E4                 db    1
.data:000003E5                 db    0
.data:000003E6                 db    0
.data:000003E7                 db    0
.data:000003E8                 db    1
.data:000003E9                 db    0
.data:000003EA                 db    0
.data:000003EB                 db    0
.data:000003EC                 db    1
.data:000003ED                 db    0
.data:000003EE                 db    0
.data:000003EF                 db    0
.data:000003F0                 db    1
.data:000003F1                 db    0
.data:000003F2                 db    0
.data:000003F3                 db    0
.data:000003F4                 db    1
.data:000003F5                 db    0
.data:000003F6                 db    0
.data:000003F7                 db    0
.data:000003F8                 db    1
.data:000003F9                 db    0
.data:000003FA                 db    0
.data:000003FB                 db    0
.data:000003FC                 db    1
.data:000003FD                 db    0
.data:000003FE                 db    0
.data:000003FF                 db    0
.data:00000400                 db    1
.data:00000401                 db    0
.data:00000402                 db    0
.data:00000403                 db    0
.data:00000404                 db    1
.data:00000405                 db    0
.data:00000406                 db    0
.data:00000407                 db    0
.data:00000408                 db    1
.data:00000409                 db    0
.data:0000040A                 db    0
.data:0000040B                 db    0
.data:0000040C                 db    1
.data:0000040D                 db    0
.data:0000040E                 db    0
.data:0000040F                 db    0
.data:00000410                 db    1
.data:00000411                 db    0
.data:00000412                 db    0
.data:00000413                 db    0
.data:00000414                 db    1
.data:00000415                 db    0
.data:00000416                 db    0
.data:00000417                 db    0
.data:00000418                 db    1
.data:00000419                 db    0
.data:0000041A                 db    0
.data:0000041B                 db    0
.data:0000041C                 db    1
.data:0000041D                 db    0
.data:0000041E                 db    0
.data:0000041F                 db    0
.data:00000420                 db    1
.data:00000421                 db    0
.data:00000422                 db    0
.data:00000423                 db    0
.data:00000424                 db    1
.data:00000425                 db    0
.data:00000426                 db    0
.data:00000427                 db    0
.data:00000428                 db    1
.data:00000429                 db    0
.data:0000042A                 db    0
.data:0000042B                 db    0
.data:0000042C                 db    1
.data:0000042D                 db    0
.data:0000042E                 db    0
.data:0000042F                 db    0
.data:00000430                 db    2
.data:00000431                 db    0
.data:00000432                 db    0
.data:00000433                 db    0
.data:00000434                 db    1
.data:00000435                 db    0
.data:00000436                 db    0
.data:00000437                 db    0
.data:00000438                 db    1
.data:00000439                 db    0
.data:0000043A                 db    0
.data:0000043B                 db    0
.data:0000043C                 db    1
.data:0000043D                 db    0
.data:0000043E                 db    0
.data:0000043F                 db    0
.data:00000440                 db    1
.data:00000441                 db    0
.data:00000442                 db    0
.data:00000443                 db    0
.data:00000444                 db    1
.data:00000445                 db    0
.data:00000446                 db    0
.data:00000447                 db    0
.data:00000448                 db    1
.data:00000449                 db    0
.data:0000044A                 db    0
.data:0000044B                 db    0
.data:0000044C                 db    1
.data:0000044D                 db    0
.data:0000044E                 db    0
.data:0000044F                 db    0
.data:00000450                 db    1
.data:00000451                 db    0
.data:00000452                 db    0
.data:00000453                 db    0
.data:00000454                 db    1
.data:00000455                 db    0
.data:00000456                 db    0
.data:00000457                 db    0
.data:00000458                 db    1
.data:00000459                 db    0
.data:0000045A                 db    0
.data:0000045B                 db    0
.data:0000045C                 db    1
.data:0000045D                 db    0
.data:0000045E                 db    0
.data:0000045F                 db    0
.data:00000460                 db    1
.data:00000461                 db    0
.data:00000462                 db    0
.data:00000463                 db    0
.data:00000464                 db    3
.data:00000465                 db    0
.data:00000466                 db    0
.data:00000467                 db    0
.data:00000468                 db    1
.data:00000469                 db    0
.data:0000046A                 db    0
.data:0000046B                 db    0
.data:0000046C                 db    1
.data:0000046D                 db    0
.data:0000046E                 db    0
.data:0000046F                 db    0
.data:00000470                 db    1
.data:00000471                 db    0
.data:00000472                 db    0
.data:00000473                 db    0
.data:00000474                 db    1
.data:00000475                 db    0
.data:00000476                 db    0
.data:00000477                 db    0
.data:00000478                 db    1
.data:00000479                 db    0
.data:0000047A                 db    0
.data:0000047B                 db    0
.data:0000047C                 db    1
.data:0000047D                 db    0
.data:0000047E                 db    0
.data:0000047F                 db    0
.data:00000480                 db    1
.data:00000481                 db    0
.data:00000482                 db    0
.data:00000483                 db    0
.data:00000484                 db    1
.data:00000485                 db    0
.data:00000486                 db    0
.data:00000487                 db    0
.data:00000488                 db    4
.data:00000489                 db    0
.data:0000048A                 db    0
.data:0000048B                 db    0
.data:0000048C                 db    1
.data:0000048D                 db    0
.data:0000048E                 db    0
.data:0000048F                 db    0
.data:00000490                 db    3
.data:00000491                 db    0
.data:00000492                 db    0
.data:00000493                 db    0
.data:00000494                 db    1
.data:00000495                 db    0
.data:00000496                 db    0
.data:00000497                 db    0
.data:00000498                 db    1
.data:00000499                 db    0
.data:0000049A                 db    0
.data:0000049B                 db    0
.data:0000049C                 db    1
.data:0000049D                 db    0
.data:0000049E                 db    0
.data:0000049F                 db    0
.data:000004A0                 db    1
.data:000004A1                 db    0
.data:000004A2                 db    0
.data:000004A3                 db    0
.data:000004A4                 db    1
.data:000004A5                 db    0
.data:000004A6                 db    0
.data:000004A7                 db    0
.data:000004A8                 db    1
.data:000004A9                 db    0
.data:000004AA                 db    0
.data:000004AB                 db    0
.data:000004AC                 db    1
.data:000004AD                 db    0
.data:000004AE                 db    0
.data:000004AF                 db    0
.data:000004B0                 db    1
.data:000004B1                 db    0
.data:000004B2                 db    0
.data:000004B3                 db    0
.data:000004B4                 db    2
.data:000004B5                 db    0
.data:000004B6                 db    0
.data:000004B7                 db    0
.data:000004B8                 db    2
.data:000004B9                 db    0
.data:000004BA                 db    0
.data:000004BB                 db    0
.data:000004BC                 db    1
.data:000004BD                 db    0
.data:000004BE                 db    0
.data:000004BF                 db    0
.data:000004C0                 db    1
.data:000004C1                 db    0
.data:000004C2                 db    0
.data:000004C3                 db    0
.data:000004C4                 db    1
.data:000004C5                 db    0
.data:000004C6                 db    0
.data:000004C7                 db    0
.data:000004C8                 db    1
.data:000004C9                 db    0
.data:000004CA                 db    0
.data:000004CB                 db    0
.data:000004CC                 db    1
.data:000004CD                 db    0
.data:000004CE                 db    0
.data:000004CF                 db    0
.data:000004D0                 db    1
.data:000004D1                 db    0
.data:000004D2                 db    0
.data:000004D3                 db    0
.data:000004D4                 db    1
.data:000004D5                 db    0
.data:000004D6                 db    0
.data:000004D7                 db    0
.data:000004D8                 db    1
.data:000004D9                 db    0
.data:000004DA                 db    0
.data:000004DB                 db    0
.data:000004DC                 db    1
.data:000004DD                 db    0
.data:000004DE                 db    0
.data:000004DF                 db    0
.data:000004E0                 db    1
.data:000004E1                 db    0
.data:000004E2                 db    0
.data:000004E3                 db    0
.data:000004E4                 db    1
.data:000004E5                 db    0
.data:000004E6                 db    0
.data:000004E7                 db    0
.data:000004E8                 db    1
.data:000004E9                 db    0
.data:000004EA                 db    0
.data:000004EB                 db    0
.data:000004EC                 db    1
.data:000004ED                 db    0
.data:000004EE                 db    0
.data:000004EF                 db    0
.data:000004F0                 db    1
.data:000004F1                 db    0
.data:000004F2                 db    0
.data:000004F3                 db    0
.data:000004F4                 db    1
.data:000004F5                 db    0
.data:000004F6                 db    0
.data:000004F7                 db    0
.data:000004F8                 db    2
.data:000004F9                 db    0
.data:000004FA                 db    0
.data:000004FB                 db    0
.data:000004FC                 db    1
.data:000004FD                 db    0
.data:000004FE                 db    0
.data:000004FF                 db    0
.data:00000500                 db    1
.data:00000501                 db    0
.data:00000502                 db    0
.data:00000503                 db    0
.data:00000504                 db    1
.data:00000505                 db    0
.data:00000506                 db    0
.data:00000507                 db    0
.data:00000508                 db    1
.data:00000509                 db    0
.data:0000050A                 db    0
.data:0000050B                 db    0
.data:0000050C                 db    2
.data:0000050D                 db    0
.data:0000050E                 db    0
.data:0000050F                 db    0
.data:00000510                 db    1
.data:00000511                 db    0
.data:00000512                 db    0
.data:00000513                 db    0
.data:00000514                 db    3
.data:00000515                 db    0
.data:00000516                 db    0
.data:00000517                 db    0
.data:00000518                 db    1
.data:00000519                 db    0
.data:0000051A                 db    0
.data:0000051B                 db    0
.data:0000051C                 db    1
.data:0000051D                 db    0
.data:0000051E                 db    0
.data:0000051F                 db    0
.data:00000520                 db    2
.data:00000521                 db    0
.data:00000522                 db    0
.data:00000523                 db    0
.data:00000524                 db    1
.data:00000525                 db    0
.data:00000526                 db    0
.data:00000527                 db    0
.data:00000528                 db    1
.data:00000529                 db    0
.data:0000052A                 db    0
.data:0000052B                 db    0
.data:0000052C                 db    1
.data:0000052D                 db    0
.data:0000052E                 db    0
.data:0000052F                 db    0
.data:00000530                 db    1
.data:00000531                 db    0
.data:00000532                 db    0
.data:00000533                 db    0
.data:00000534                 db    1
.data:00000535                 db    0
.data:00000536                 db    0
.data:00000537                 db    0
.data:00000538                 db    1
.data:00000539                 db    0
.data:0000053A                 db    0
.data:0000053B                 db    0
.data:0000053C                 db    1
.data:0000053D                 db    0
.data:0000053E                 db    0
.data:0000053F                 db    0
.data:00000540                 db    1
.data:00000541                 db    0
.data:00000542                 db    0
.data:00000543                 db    0
.data:00000544                 db    1
.data:00000545                 db    0
.data:00000546                 db    0
.data:00000547                 db    0
.data:00000548                 db    1
.data:00000549                 db    0
.data:0000054A                 db    0
.data:0000054B                 db    0
.data:0000054C                 db    1
.data:0000054D                 db    0
.data:0000054E                 db    0
.data:0000054F                 db    0
.data:00000550                 db    1
.data:00000551                 db    0
.data:00000552                 db    0
.data:00000553                 db    0
.data:00000554                 db    1
.data:00000555                 db    0
.data:00000556                 db    0
.data:00000557                 db    0
.data:00000558                 db    1
.data:00000559                 db    0
.data:0000055A                 db    0
.data:0000055B                 db    0
.data:0000055C                 db    1
.data:0000055D                 db    0
.data:0000055E                 db    0
.data:0000055F                 db    0
.data:00000560                 db    1
.data:00000561                 db    0
.data:00000562                 db    0
.data:00000563                 db    0
.data:00000564                 db    2
.data:00000565                 db    0
.data:00000566                 db    0
.data:00000567                 db    0
.data:00000568                 db    1
.data:00000569                 db    0
.data:0000056A                 db    0
.data:0000056B                 db    0
.data:0000056C                 db    1
.data:0000056D                 db    0
.data:0000056E                 db    0
.data:0000056F                 db    0
.data:00000570                 db    1
.data:00000571                 db    0
.data:00000572                 db    0
.data:00000573                 db    0
.data:00000574                 db    1
.data:00000575                 db    0
.data:00000576                 db    0
.data:00000577                 db    0
.data:00000578                 db    4
.data:00000579                 db    0
.data:0000057A                 db    0
.data:0000057B                 db    0
.data:0000057C                 db    4
.data:0000057D                 db    0
.data:0000057E                 db    0
.data:0000057F                 db    0
.data:00000580                 db    4
.data:00000581                 db    0
.data:00000582                 db    0
.data:00000583                 db    0
.data:00000584                 db    1
.data:00000585                 db    0
.data:00000586                 db    0
.data:00000587                 db    0
.data:00000588                 db    1
.data:00000589                 db    0
.data:0000058A                 db    0
.data:0000058B                 db    0
.data:0000058C                 db    2
.data:0000058D                 db    0
.data:0000058E                 db    0
.data:0000058F                 db    0
.data:00000590 $SG85668:                               ; DATA XREF: _conf_insert+6Eo
.data:00000590                 unicode 0, <..\..\..\conf.c>,0
.data:000005B0 $SG85669:                               ; DATA XREF: _conf_insert+73o
.data:000005B0                 unicode 0, <oldentry == entry>,0
.data:000005D4 $SG85696:                               ; DATA XREF: _conf_get_int+2Co
.data:000005D4                 unicode 0, <..\..\..\conf.c>,0
.data:000005F4 $SG85704:                               ; DATA XREF: _conf_get_int+8Fo
.data:000005F4                 unicode 0, <entry>,0
.data:00000600 $SG85697:                               ; DATA XREF: _conf_get_int+31o
.data:00000600                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:00000644 $SG85699:                               ; DATA XREF: _conf_get_int+50o
.data:00000644                 unicode 0, <..\..\..\conf.c>,0
.data:00000664 $SG85723:                               ; DATA XREF: _conf_get_int_int+95o
.data:00000664                 unicode 0, <entry>,0
.data:00000670 $SG85700:                               ; DATA XREF: _conf_get_int+55o
.data:00000670                 unicode 0, <valuetypes[primary] == TYPE_INT>,0
.data:000006B0 $SG85703:                               ; DATA XREF: _conf_get_int+8Ao
.data:000006B0                 unicode 0, <..\..\..\conf.c>,0
.data:000006D0 $SG85715:                               ; DATA XREF: _conf_get_int_int+2Co
.data:000006D0                 unicode 0, <..\..\..\conf.c>,0
.data:000006F0 $SG85716:                               ; DATA XREF: _conf_get_int_int+31o
.data:000006F0                 unicode 0, <subkeytypes[primary] == TYPE_INT>,0
.data:00000732                 align 4
.data:00000734 $SG85718:                               ; DATA XREF: _conf_get_int_int+50o
.data:00000734                 unicode 0, <..\..\..\conf.c>,0
.data:00000754                 align 8
.data:00000758 $SG85719:                               ; DATA XREF: _conf_get_int_int+55o
.data:00000758                 unicode 0, <valuetypes[primary] == TYPE_INT>,0
.data:00000798 $SG85722:                               ; DATA XREF: _conf_get_int_int+90o
.data:00000798                 unicode 0, <..\..\..\conf.c>,0
.data:000007B8 $SG85732:                               ; DATA XREF: _conf_get_str+2Co
.data:000007B8                 unicode 0, <..\..\..\conf.c>,0
.data:000007D8 $SG85733:                               ; DATA XREF: _conf_get_str+31o
.data:000007D8                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:0000081C $SG85735:                               ; DATA XREF: _conf_get_str+50o
.data:0000081C                 unicode 0, <..\..\..\conf.c>,0
.data:0000083C                 align 10h
.data:00000840 $SG85736:                               ; DATA XREF: _conf_get_str+55o
.data:00000840                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00000880 $SG85739:                               ; DATA XREF: _conf_get_str+8Ao
.data:00000880                 unicode 0, <..\..\..\conf.c>,0
.data:000008A0 $SG85740:                               ; DATA XREF: _conf_get_str+8Fo
.data:000008A0                 unicode 0, <entry>,0
.data:000008AC $SG85751:                               ; DATA XREF: _conf_get_str_str_opt+2Fo
.data:000008AC                 unicode 0, <..\..\..\conf.c>,0
.data:000008CC                 align 10h
.data:000008D0 $SG85752:                               ; DATA XREF: _conf_get_str_str_opt+34o
.data:000008D0                 unicode 0, <subkeytypes[primary] == TYPE_STR>,0
.data:00000912                 align 4
.data:00000914 $SG85754:                               ; DATA XREF: _conf_get_str_str_opt+53o
.data:00000914                 unicode 0, <..\..\..\conf.c>,0
.data:00000934                 align 8
.data:00000938 $SG85755:                               ; DATA XREF: _conf_get_str_str_opt+58o
.data:00000938                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00000978 $SG85768:                               ; DATA XREF: _conf_get_str_str+2Do
.data:00000978                 unicode 0, <..\..\..\conf.c>,0
.data:00000998 $SG85769:                               ; DATA XREF: _conf_get_str_str+32o
.data:00000998                 unicode 0, <ret>,0
.data:000009A0 $SG85782:                               ; DATA XREF: _conf_get_str_strs+2Co
.data:000009A0                 unicode 0, <..\..\..\conf.c>,0
.data:000009C0 $SG85783:                               ; DATA XREF: _conf_get_str_strs+31o
.data:000009C0                 unicode 0, <subkeytypes[primary] == TYPE_STR>,0
.data:00000A02                 align 4
.data:00000A04 $SG85785:                               ; DATA XREF: _conf_get_str_strs+50o
.data:00000A04                 unicode 0, <..\..\..\conf.c>,0
.data:00000A24                 align 8
.data:00000A28 $SG85786:                               ; DATA XREF: _conf_get_str_strs+55o
.data:00000A28                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00000A68 $SG85806:                               ; DATA XREF: _conf_get_str_nthstrkey+35o
.data:00000A68                 unicode 0, <..\..\..\conf.c>,0
.data:00000A88 $SG85807:                               ; DATA XREF: _conf_get_str_nthstrkey+3Ao
.data:00000A88                 unicode 0, <subkeytypes[primary] == TYPE_STR>,0
.data:00000ACA                 align 4
.data:00000ACC $SG85809:                               ; DATA XREF: _conf_get_str_nthstrkey+59o
.data:00000ACC                 unicode 0, <..\..\..\conf.c>,0
.data:00000AEC                 align 10h
.data:00000AF0 $SG85810:                               ; DATA XREF: _conf_get_str_nthstrkey+5Eo
.data:00000AF0                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00000B30 $SG85827:                               ; DATA XREF: _conf_get_filename+2Co
.data:00000B30                 unicode 0, <..\..\..\conf.c>,0
.data:00000B50 $SG85828:                               ; DATA XREF: _conf_get_filename+31o
.data:00000B50                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:00000B94 $SG85830:                               ; DATA XREF: _conf_get_filename+50o
.data:00000B94                 unicode 0, <..\..\..\conf.c>,0
.data:00000BB4                 align 8
.data:00000BB8 $SG85831:                               ; DATA XREF: _conf_get_filename+55o
.data:00000BB8                 unicode 0, <valuetypes[primary] == TYPE_FILENAME>,0
.data:00000C02                 align 4
.data:00000C04 $SG85834:                               ; DATA XREF: _conf_get_filename+8Ao
.data:00000C04                 unicode 0, <..\..\..\conf.c>,0
.data:00000C24 $SG85835:                               ; DATA XREF: _conf_get_filename+8Fo
.data:00000C24                 unicode 0, <entry>,0
.data:00000C30 $SG85844:                               ; DATA XREF: _conf_get_fontspec+2Co
.data:00000C30                 unicode 0, <..\..\..\conf.c>,0
.data:00000C50 $SG85845:                               ; DATA XREF: _conf_get_fontspec+31o
.data:00000C50                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:00000C94 $SG85847:                               ; DATA XREF: _conf_get_fontspec+50o
.data:00000C94                 unicode 0, <..\..\..\conf.c>,0
.data:00000CB4                 align 8
.data:00000CB8 $SG85848:                               ; DATA XREF: _conf_get_fontspec+55o
.data:00000CB8                 unicode 0, <valuetypes[primary] == TYPE_FONT>,0
.data:00000CFA                 align 4
.data:00000CFC $SG85851:                               ; DATA XREF: _conf_get_fontspec+8Ao
.data:00000CFC                 unicode 0, <..\..\..\conf.c>,0
.data:00000D1C $SG85852:                               ; DATA XREF: _conf_get_fontspec+8Fo
.data:00000D1C                 unicode 0, <entry>,0
.data:00000D28 $SG85864:                               ; DATA XREF: _conf_set_int+2Co
.data:00000D28                 unicode 0, <..\..\..\conf.c>,0
.data:00000D48 $SG85865:                               ; DATA XREF: _conf_set_int+31o
.data:00000D48                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:00000D8C $SG85867:                               ; DATA XREF: _conf_set_int+50o
.data:00000D8C                 unicode 0, <..\..\..\conf.c>,0
.data:00000DAC                 align 10h
.data:00000DB0 $SG85868:                               ; DATA XREF: _conf_set_int+55o
.data:00000DB0                 unicode 0, <valuetypes[primary] == TYPE_INT>,0
.data:00000DF0 $SG85882:                               ; DATA XREF: _conf_set_int_int+2Co
.data:00000DF0                 unicode 0, <..\..\..\conf.c>,0
.data:00000E10 $SG85883:                               ; DATA XREF: _conf_set_int_int+31o
.data:00000E10                 unicode 0, <subkeytypes[primary] == TYPE_INT>,0
.data:00000E52                 align 4
.data:00000E54 $SG85885:                               ; DATA XREF: _conf_set_int_int+50o
.data:00000E54                 unicode 0, <..\..\..\conf.c>,0
.data:00000E74                 align 8
.data:00000E78 $SG85886:                               ; DATA XREF: _conf_set_int_int+55o
.data:00000E78                 unicode 0, <valuetypes[primary] == TYPE_INT>,0
.data:00000EB8 $SG85898:                               ; DATA XREF: _conf_set_str+2Co
.data:00000EB8                 unicode 0, <..\..\..\conf.c>,0
.data:00000ED8 $SG85899:                               ; DATA XREF: _conf_set_str+31o
.data:00000ED8                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:00000F1C $SG85901:                               ; DATA XREF: _conf_set_str+50o
.data:00000F1C                 unicode 0, <..\..\..\conf.c>,0
.data:00000F3C                 align 10h
.data:00000F40 $SG85902:                               ; DATA XREF: _conf_set_str+55o
.data:00000F40                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00000F80 $SG85916:                               ; DATA XREF: _conf_set_str_str+2Co
.data:00000F80                 unicode 0, <..\..\..\conf.c>,0
.data:00000FA0 $SG85917:                               ; DATA XREF: _conf_set_str_str+31o
.data:00000FA0                 unicode 0, <subkeytypes[primary] == TYPE_STR>,0
.data:00000FE2                 align 4
.data:00000FE4 $SG85919:                               ; DATA XREF: _conf_set_str_str+50o
.data:00000FE4                 unicode 0, <..\..\..\conf.c>,0
.data:00001004                 align 8
.data:00001008 $SG85920:                               ; DATA XREF: _conf_set_str_str+55o
.data:00001008                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00001048 $SG85931:                               ; DATA XREF: _conf_del_str_str+2Co
.data:00001048                 unicode 0, <..\..\..\conf.c>,0
.data:00001068 $SG85932:                               ; DATA XREF: _conf_del_str_str+31o
.data:00001068                 unicode 0, <subkeytypes[primary] == TYPE_STR>,0
.data:000010AA                 align 4
.data:000010AC $SG85934:                               ; DATA XREF: _conf_del_str_str+50o
.data:000010AC                 unicode 0, <..\..\..\conf.c>,0
.data:000010CC                 align 10h
.data:000010D0 $SG85935:                               ; DATA XREF: _conf_del_str_str+55o
.data:000010D0                 unicode 0, <valuetypes[primary] == TYPE_STR>,0
.data:00001110 $SG85950:                               ; DATA XREF: _conf_set_filename+2Co
.data:00001110                 unicode 0, <..\..\..\conf.c>,0
.data:00001130 $SG85951:                               ; DATA XREF: _conf_set_filename+31o
.data:00001130                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:00001174 $SG85953:                               ; DATA XREF: _conf_set_filename+50o
.data:00001174                 unicode 0, <..\..\..\conf.c>,0
.data:00001194                 align 8
.data:00001198 $SG85954:                               ; DATA XREF: _conf_set_filename+55o
.data:00001198                 unicode 0, <valuetypes[primary] == TYPE_FILENAME>,0
.data:000011E2                 align 4
.data:000011E4 $SG85966:                               ; DATA XREF: _conf_set_fontspec+2Co
.data:000011E4                 unicode 0, <..\..\..\conf.c>,0
.data:00001204                 align 8
.data:00001208 $SG85967:                               ; DATA XREF: _conf_set_fontspec+31o
.data:00001208                 unicode 0, <subkeytypes[primary] == TYPE_NONE>,0
.data:0000124C $SG85969:                               ; DATA XREF: _conf_set_fontspec+50o
.data:0000124C                 unicode 0, <..\..\..\conf.c>,0
.data:0000126C                 align 10h
.data:00001270 $SG85970:                               ; DATA XREF: _conf_set_fontspec+55o
.data:00001270                 unicode 0, <valuetypes[primary] == TYPE_FONT>,0
.data:000012B2                 align 4
.data:000012B2 _data           ends
.data:000012B2
.bss:000012B4 ; ===========================================================================
.bss:000012B4
.bss:000012B4 ; Segment type: Uninitialized
.bss:000012B4 ; Segment permissions: Read/Write
.bss:000012B4 _bss            segment byte public 'BSS' use32
.bss:000012B4                 assume cs:_bss
.bss:000012B4                 ;org 12B4h
.bss:000012B4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000012B4 $SG85790        db    ? ;               ; DATA XREF: _conf_get_str_strs:loc_1B67o
.bss:000012B5 $SG85811        db    ? ;               ; DATA XREF: _conf_get_str_nthstrkey+71o
.bss:000012B6                 align 4
.bss:000012B6 _bss            ends
.bss:000012B6
.text:000012B8 ; ===========================================================================
.text:000012B8
.text:000012B8 ; Segment type: Pure code
.text:000012B8 ; Segment permissions: Read/Execute
.text:000012B8 _text           segment para public 'CODE' use32
.text:000012B8                 assume cs:_text
.text:000012B8                 ;org 12B8h
.text:000012B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000012B8
.text:000012B8 ; =============== S U B R O U T I N E =======================================
.text:000012B8
.text:000012B8 ; Attributes: bp-based frame
.text:000012B8
.text:000012B8                 public _conf_new
.text:000012B8 _conf_new       proc near               ; CODE XREF: _conf_copy+Bp
.text:000012B8
.text:000012B8 var_4           = dword ptr -4
.text:000012B8
.text:000012B8                 push    ebp
.text:000012B9                 mov     ebp, esp
.text:000012BB                 push    ecx
.text:000012BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012C3                 push    4
.text:000012C5                 push    1
.text:000012C7                 call    _safemalloc
.text:000012CC                 add     esp, 8
.text:000012CF                 mov     [ebp+var_4], eax
.text:000012D2                 push    offset _conf_cmp
.text:000012D7                 call    _newtree234
.text:000012DC                 add     esp, 4
.text:000012DF                 mov     ecx, [ebp+var_4]
.text:000012E2                 mov     [ecx], eax
.text:000012E4                 mov     eax, [ebp+var_4]
.text:000012E7                 add     esp, 4
.text:000012EA                 cmp     ebp, esp
.text:000012EC                 call    __RTC_CheckEsp
.text:000012F1                 mov     esp, ebp
.text:000012F3                 pop     ebp
.text:000012F4                 retn
.text:000012F4 _conf_new       endp
.text:000012F4
.text:000012F4 ; ---------------------------------------------------------------------------
.text:000012F5                 align 4
.text:000012F8
.text:000012F8 ; =============== S U B R O U T I N E =======================================
.text:000012F8
.text:000012F8 ; Attributes: bp-based frame
.text:000012F8
.text:000012F8 _conf_cmp       proc near               ; DATA XREF: _conf_new+1Ao
.text:000012F8
.text:000012F8 var_C           = dword ptr -0Ch
.text:000012F8 var_8           = dword ptr -8
.text:000012F8 var_4           = dword ptr -4
.text:000012F8 arg_0           = dword ptr  8
.text:000012F8 arg_4           = dword ptr  0Ch
.text:000012F8
.text:000012F8                 push    ebp
.text:000012F9                 mov     ebp, esp
.text:000012FB                 sub     esp, 0Ch
.text:000012FE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001305                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000130C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001313                 mov     eax, [ebp+arg_0]
.text:00001316                 mov     [ebp+var_4], eax
.text:00001319                 mov     ecx, [ebp+arg_4]
.text:0000131C                 mov     [ebp+var_8], ecx
.text:0000131F                 mov     edx, [ebp+var_4]
.text:00001322                 mov     eax, [ebp+var_8]
.text:00001325                 mov     ecx, [edx]
.text:00001327                 cmp     ecx, [eax]
.text:00001329                 jge     short loc_1332
.text:0000132B                 or      eax, 0FFFFFFFFh
.text:0000132E                 jmp     short loc_13AA
.text:00001330 ; ---------------------------------------------------------------------------
.text:00001330                 jmp     short loc_1345
.text:00001332 ; ---------------------------------------------------------------------------
.text:00001332
.text:00001332 loc_1332:                               ; CODE XREF: _conf_cmp+31j
.text:00001332                 mov     edx, [ebp+var_4]
.text:00001335                 mov     eax, [ebp+var_8]
.text:00001338                 mov     ecx, [edx]
.text:0000133A                 cmp     ecx, [eax]
.text:0000133C                 jle     short loc_1345
.text:0000133E                 mov     eax, 1
.text:00001343                 jmp     short loc_13AA
.text:00001345 ; ---------------------------------------------------------------------------
.text:00001345
.text:00001345 loc_1345:                               ; CODE XREF: _conf_cmp+38j
.text:00001345                                         ; _conf_cmp+44j
.text:00001345                 mov     edx, [ebp+var_4]
.text:00001348                 mov     eax, [edx]
.text:0000134A                 mov     ecx, _subkeytypes[eax*4]
.text:00001351                 mov     [ebp+var_C], ecx
.text:00001354                 cmp     [ebp+var_C], 1
.text:00001358                 jz      short loc_1362
.text:0000135A                 cmp     [ebp+var_C], 2
.text:0000135E                 jz      short loc_1390
.text:00001360                 jmp     short loc_13A8
.text:00001362 ; ---------------------------------------------------------------------------
.text:00001362
.text:00001362 loc_1362:                               ; CODE XREF: _conf_cmp+60j
.text:00001362                 mov     edx, [ebp+var_4]
.text:00001365                 mov     eax, [ebp+var_8]
.text:00001368                 mov     ecx, [edx+4]
.text:0000136B                 cmp     ecx, [eax+4]
.text:0000136E                 jge     short loc_1377
.text:00001370                 or      eax, 0FFFFFFFFh
.text:00001373                 jmp     short loc_13AA
.text:00001375 ; ---------------------------------------------------------------------------
.text:00001375                 jmp     short loc_138C
.text:00001377 ; ---------------------------------------------------------------------------
.text:00001377
.text:00001377 loc_1377:                               ; CODE XREF: _conf_cmp+76j
.text:00001377                 mov     edx, [ebp+var_4]
.text:0000137A                 mov     eax, [ebp+var_8]
.text:0000137D                 mov     ecx, [edx+4]
.text:00001380                 cmp     ecx, [eax+4]
.text:00001383                 jle     short loc_138C
.text:00001385                 mov     eax, 1
.text:0000138A                 jmp     short loc_13AA
.text:0000138C ; ---------------------------------------------------------------------------
.text:0000138C
.text:0000138C loc_138C:                               ; CODE XREF: _conf_cmp+7Dj
.text:0000138C                                         ; _conf_cmp+8Bj
.text:0000138C                 xor     eax, eax
.text:0000138E                 jmp     short loc_13AA
.text:00001390 ; ---------------------------------------------------------------------------
.text:00001390
.text:00001390 loc_1390:                               ; CODE XREF: _conf_cmp+66j
.text:00001390                 mov     edx, [ebp+var_8]
.text:00001393                 mov     eax, [edx+4]
.text:00001396                 push    eax             ; char *
.text:00001397                 mov     ecx, [ebp+var_4]
.text:0000139A                 mov     edx, [ecx+4]
.text:0000139D                 push    edx             ; char *
.text:0000139E                 call    _strcmp
.text:000013A3                 add     esp, 8
.text:000013A6                 jmp     short loc_13AA
.text:000013A8 ; ---------------------------------------------------------------------------
.text:000013A8
.text:000013A8 loc_13A8:                               ; CODE XREF: _conf_cmp+68j
.text:000013A8                 xor     eax, eax
.text:000013AA
.text:000013AA loc_13AA:                               ; CODE XREF: _conf_cmp+36j
.text:000013AA                                         ; _conf_cmp+4Bj ...
.text:000013AA                 add     esp, 0Ch
.text:000013AD                 cmp     ebp, esp
.text:000013AF                 call    __RTC_CheckEsp
.text:000013B4                 mov     esp, ebp
.text:000013B6                 pop     ebp
.text:000013B7                 retn
.text:000013B7 _conf_cmp       endp
.text:000013B7
.text:000013B8
.text:000013B8 ; =============== S U B R O U T I N E =======================================
.text:000013B8
.text:000013B8 ; Attributes: bp-based frame
.text:000013B8
.text:000013B8                 public _conf_free
.text:000013B8 _conf_free      proc near
.text:000013B8
.text:000013B8 arg_0           = dword ptr  8
.text:000013B8
.text:000013B8                 push    ebp
.text:000013B9                 mov     ebp, esp
.text:000013BB                 mov     eax, [ebp+arg_0]
.text:000013BE                 push    eax
.text:000013BF                 call    _conf_clear
.text:000013C4                 add     esp, 4
.text:000013C7                 mov     ecx, [ebp+arg_0]
.text:000013CA                 mov     edx, [ecx]
.text:000013CC                 push    edx
.text:000013CD                 call    _freetree234
.text:000013D2                 add     esp, 4
.text:000013D5                 mov     eax, [ebp+arg_0]
.text:000013D8                 push    eax
.text:000013D9                 call    _safefree
.text:000013DE                 add     esp, 4
.text:000013E1                 cmp     ebp, esp
.text:000013E3                 call    __RTC_CheckEsp
.text:000013E8                 pop     ebp
.text:000013E9                 retn
.text:000013E9 _conf_free      endp
.text:000013E9
.text:000013E9 ; ---------------------------------------------------------------------------
.text:000013EA                 db 0Eh dup(0CCh)
.text:000013F8
.text:000013F8 ; =============== S U B R O U T I N E =======================================
.text:000013F8
.text:000013F8 ; Attributes: bp-based frame
.text:000013F8
.text:000013F8 _conf_clear     proc near               ; CODE XREF: _conf_free+7p
.text:000013F8                                         ; _conf_copy_into+1Fp
.text:000013F8
.text:000013F8 var_4           = dword ptr -4
.text:000013F8 arg_0           = dword ptr  8
.text:000013F8
.text:000013F8                 push    ebp
.text:000013F9                 mov     ebp, esp
.text:000013FB                 push    ecx
.text:000013FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001403
.text:00001403 loc_1403:                               ; CODE XREF: _conf_clear+30j
.text:00001403                 push    0
.text:00001405                 mov     eax, [ebp+arg_0]
.text:00001408                 mov     ecx, [eax]
.text:0000140A                 push    ecx
.text:0000140B                 call    _delpos234
.text:00001410                 add     esp, 8
.text:00001413                 mov     [ebp+var_4], eax
.text:00001416                 cmp     [ebp+var_4], 0
.text:0000141A                 jz      short loc_142A
.text:0000141C                 mov     edx, [ebp+var_4]
.text:0000141F                 push    edx
.text:00001420                 call    _free_entry
.text:00001425                 add     esp, 4
.text:00001428                 jmp     short loc_1403
.text:0000142A ; ---------------------------------------------------------------------------
.text:0000142A
.text:0000142A loc_142A:                               ; CODE XREF: _conf_clear+22j
.text:0000142A                 add     esp, 4
.text:0000142D                 cmp     ebp, esp
.text:0000142F                 call    __RTC_CheckEsp
.text:00001434                 mov     esp, ebp
.text:00001436                 pop     ebp
.text:00001437                 retn
.text:00001437 _conf_clear     endp
.text:00001437
.text:00001438
.text:00001438 ; =============== S U B R O U T I N E =======================================
.text:00001438
.text:00001438 ; Attributes: bp-based frame
.text:00001438
.text:00001438 _free_entry     proc near               ; CODE XREF: _conf_clear+28p
.text:00001438                                         ; _conf_insert+44p ...
.text:00001438
.text:00001438 arg_0           = dword ptr  8
.text:00001438
.text:00001438                 push    ebp
.text:00001439                 mov     ebp, esp
.text:0000143B                 mov     eax, [ebp+arg_0]
.text:0000143E                 push    eax
.text:0000143F                 call    _free_key
.text:00001444                 add     esp, 4
.text:00001447                 mov     ecx, [ebp+arg_0]
.text:0000144A                 mov     edx, [ecx]
.text:0000144C                 mov     eax, _valuetypes[edx*4]
.text:00001453                 push    eax
.text:00001454                 mov     ecx, [ebp+arg_0]
.text:00001457                 add     ecx, 8
.text:0000145A                 push    ecx
.text:0000145B                 call    _free_value
.text:00001460                 add     esp, 8
.text:00001463                 mov     edx, [ebp+arg_0]
.text:00001466                 push    edx
.text:00001467                 call    _safefree
.text:0000146C                 add     esp, 4
.text:0000146F                 cmp     ebp, esp
.text:00001471                 call    __RTC_CheckEsp
.text:00001476                 pop     ebp
.text:00001477                 retn
.text:00001477 _free_entry     endp
.text:00001477
.text:00001478
.text:00001478 ; =============== S U B R O U T I N E =======================================
.text:00001478
.text:00001478 ; Attributes: bp-based frame
.text:00001478
.text:00001478 _free_key       proc near               ; CODE XREF: _free_entry+7p
.text:00001478
.text:00001478 arg_0           = dword ptr  8
.text:00001478
.text:00001478                 push    ebp
.text:00001479                 mov     ebp, esp
.text:0000147B                 mov     eax, [ebp+arg_0]
.text:0000147E                 mov     ecx, [eax]
.text:00001480                 cmp     _subkeytypes[ecx*4], 2
.text:00001488                 jnz     short loc_1499
.text:0000148A                 mov     edx, [ebp+arg_0]
.text:0000148D                 mov     eax, [edx+4]
.text:00001490                 push    eax
.text:00001491                 call    _safefree
.text:00001496                 add     esp, 4
.text:00001499
.text:00001499 loc_1499:                               ; CODE XREF: _free_key+10j
.text:00001499                 cmp     ebp, esp
.text:0000149B                 call    __RTC_CheckEsp
.text:000014A0                 pop     ebp
.text:000014A1                 retn
.text:000014A1 _free_key       endp
.text:000014A1
.text:000014A1 ; ---------------------------------------------------------------------------
.text:000014A2                 align 8
.text:000014A8
.text:000014A8 ; =============== S U B R O U T I N E =======================================
.text:000014A8
.text:000014A8 ; Attributes: bp-based frame
.text:000014A8
.text:000014A8 _free_value     proc near               ; CODE XREF: _free_entry+23p
.text:000014A8
.text:000014A8 arg_0           = dword ptr  8
.text:000014A8 arg_4           = dword ptr  0Ch
.text:000014A8
.text:000014A8                 push    ebp
.text:000014A9                 mov     ebp, esp
.text:000014AB                 cmp     [ebp+arg_4], 2
.text:000014AF                 jnz     short loc_14C1
.text:000014B1                 mov     eax, [ebp+arg_0]
.text:000014B4                 mov     ecx, [eax]
.text:000014B6                 push    ecx
.text:000014B7                 call    _safefree
.text:000014BC                 add     esp, 4
.text:000014BF                 jmp     short loc_14EB
.text:000014C1 ; ---------------------------------------------------------------------------
.text:000014C1
.text:000014C1 loc_14C1:                               ; CODE XREF: _free_value+7j
.text:000014C1                 cmp     [ebp+arg_4], 3
.text:000014C5                 jnz     short loc_14D7
.text:000014C7                 mov     edx, [ebp+arg_0]
.text:000014CA                 mov     eax, [edx]
.text:000014CC                 push    eax
.text:000014CD                 call    _filename_free
.text:000014D2                 add     esp, 4
.text:000014D5                 jmp     short loc_14EB
.text:000014D7 ; ---------------------------------------------------------------------------
.text:000014D7
.text:000014D7 loc_14D7:                               ; CODE XREF: _free_value+1Dj
.text:000014D7                 cmp     [ebp+arg_4], 4
.text:000014DB                 jnz     short loc_14EB
.text:000014DD                 mov     ecx, [ebp+arg_0]
.text:000014E0                 mov     edx, [ecx]
.text:000014E2                 push    edx
.text:000014E3                 call    _fontspec_free
.text:000014E8                 add     esp, 4
.text:000014EB
.text:000014EB loc_14EB:                               ; CODE XREF: _free_value+17j
.text:000014EB                                         ; _free_value+2Dj ...
.text:000014EB                 cmp     ebp, esp
.text:000014ED                 call    __RTC_CheckEsp
.text:000014F2                 pop     ebp
.text:000014F3                 retn
.text:000014F3 _free_value     endp
.text:000014F3
.text:000014F3 ; ---------------------------------------------------------------------------
.text:000014F4                 align 8
.text:000014F8
.text:000014F8 ; =============== S U B R O U T I N E =======================================
.text:000014F8
.text:000014F8 ; Attributes: bp-based frame
.text:000014F8
.text:000014F8                 public _conf_copy_into
.text:000014F8 _conf_copy_into proc near               ; CODE XREF: _conf_copy+1Bp
.text:000014F8
.text:000014F8 var_C           = dword ptr -0Ch
.text:000014F8 var_8           = dword ptr -8
.text:000014F8 var_4           = dword ptr -4
.text:000014F8 arg_0           = dword ptr  8
.text:000014F8 arg_4           = dword ptr  0Ch
.text:000014F8
.text:000014F8                 push    ebp
.text:000014F9                 mov     ebp, esp
.text:000014FB                 sub     esp, 0Ch
.text:000014FE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001505                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000150C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001513                 mov     eax, [ebp+arg_0]
.text:00001516                 push    eax
.text:00001517                 call    _conf_clear
.text:0000151C                 add     esp, 4
.text:0000151F                 mov     [ebp+var_C], 0
.text:00001526                 jmp     short loc_1531
.text:00001528 ; ---------------------------------------------------------------------------
.text:00001528
.text:00001528 loc_1528:                               ; CODE XREF: _conf_copy_into+A8j
.text:00001528                 mov     ecx, [ebp+var_C]
.text:0000152B                 add     ecx, 1
.text:0000152E                 mov     [ebp+var_C], ecx
.text:00001531
.text:00001531 loc_1531:                               ; CODE XREF: _conf_copy_into+2Ej
.text:00001531                 mov     edx, [ebp+var_C]
.text:00001534                 push    edx
.text:00001535                 mov     eax, [ebp+arg_4]
.text:00001538                 mov     ecx, [eax]
.text:0000153A                 push    ecx
.text:0000153B                 call    _index234
.text:00001540                 add     esp, 8
.text:00001543                 mov     [ebp+var_4], eax
.text:00001546                 cmp     [ebp+var_4], 0
.text:0000154A                 jz      short loc_15A2
.text:0000154C                 push    0Ch
.text:0000154E                 push    1
.text:00001550                 call    _safemalloc
.text:00001555                 add     esp, 8
.text:00001558                 mov     [ebp+var_8], eax
.text:0000155B                 mov     edx, [ebp+var_4]
.text:0000155E                 push    edx
.text:0000155F                 mov     eax, [ebp+var_8]
.text:00001562                 push    eax
.text:00001563                 call    _copy_key
.text:00001568                 add     esp, 8
.text:0000156B                 mov     ecx, [ebp+var_4]
.text:0000156E                 mov     edx, [ecx]
.text:00001570                 mov     eax, _valuetypes[edx*4]
.text:00001577                 push    eax
.text:00001578                 mov     ecx, [ebp+var_4]
.text:0000157B                 add     ecx, 8
.text:0000157E                 push    ecx
.text:0000157F                 mov     edx, [ebp+var_8]
.text:00001582                 add     edx, 8
.text:00001585                 push    edx
.text:00001586                 call    _copy_value
.text:0000158B                 add     esp, 0Ch
.text:0000158E                 mov     eax, [ebp+var_8]
.text:00001591                 push    eax
.text:00001592                 mov     ecx, [ebp+arg_0]
.text:00001595                 mov     edx, [ecx]
.text:00001597                 push    edx
.text:00001598                 call    _add234
.text:0000159D                 add     esp, 8
.text:000015A0                 jmp     short loc_1528
.text:000015A2 ; ---------------------------------------------------------------------------
.text:000015A2
.text:000015A2 loc_15A2:                               ; CODE XREF: _conf_copy_into+52j
.text:000015A2                 add     esp, 0Ch
.text:000015A5                 cmp     ebp, esp
.text:000015A7                 call    __RTC_CheckEsp
.text:000015AC                 mov     esp, ebp
.text:000015AE                 pop     ebp
.text:000015AF                 retn
.text:000015AF _conf_copy_into endp
.text:000015AF
.text:000015AF ; ---------------------------------------------------------------------------
.text:000015B0                 db 8 dup(0CCh)
.text:000015B8
.text:000015B8 ; =============== S U B R O U T I N E =======================================
.text:000015B8
.text:000015B8 ; Attributes: bp-based frame
.text:000015B8
.text:000015B8 _copy_key       proc near               ; CODE XREF: _conf_copy_into+6Bp
.text:000015B8
.text:000015B8 var_4           = dword ptr -4
.text:000015B8 arg_0           = dword ptr  8
.text:000015B8 arg_4           = dword ptr  0Ch
.text:000015B8
.text:000015B8                 push    ebp
.text:000015B9                 mov     ebp, esp
.text:000015BB                 push    ecx
.text:000015BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015C3                 mov     eax, [ebp+arg_0]
.text:000015C6                 mov     ecx, [ebp+arg_4]
.text:000015C9                 mov     edx, [ecx]
.text:000015CB                 mov     [eax], edx
.text:000015CD                 mov     eax, [ebp+arg_0]
.text:000015D0                 mov     ecx, [eax]
.text:000015D2                 mov     edx, _subkeytypes[ecx*4]
.text:000015D9                 mov     [ebp+var_4], edx
.text:000015DC                 cmp     [ebp+var_4], 1
.text:000015E0                 jz      short loc_15EA
.text:000015E2                 cmp     [ebp+var_4], 2
.text:000015E6                 jz      short loc_15F8
.text:000015E8                 jmp     short loc_160D
.text:000015EA ; ---------------------------------------------------------------------------
.text:000015EA
.text:000015EA loc_15EA:                               ; CODE XREF: _copy_key+28j
.text:000015EA                 mov     eax, [ebp+arg_0]
.text:000015ED                 mov     ecx, [ebp+arg_4]
.text:000015F0                 mov     edx, [ecx+4]
.text:000015F3                 mov     [eax+4], edx
.text:000015F6                 jmp     short loc_160D
.text:000015F8 ; ---------------------------------------------------------------------------
.text:000015F8
.text:000015F8 loc_15F8:                               ; CODE XREF: _copy_key+2Ej
.text:000015F8                 mov     eax, [ebp+arg_4]
.text:000015FB                 mov     ecx, [eax+4]
.text:000015FE                 push    ecx
.text:000015FF                 call    _dupstr
.text:00001604                 add     esp, 4
.text:00001607                 mov     edx, [ebp+arg_0]
.text:0000160A                 mov     [edx+4], eax
.text:0000160D
.text:0000160D loc_160D:                               ; CODE XREF: _copy_key+30j
.text:0000160D                                         ; _copy_key+3Ej
.text:0000160D                 add     esp, 4
.text:00001610                 cmp     ebp, esp
.text:00001612                 call    __RTC_CheckEsp
.text:00001617                 mov     esp, ebp
.text:00001619                 pop     ebp
.text:0000161A                 retn
.text:0000161A _copy_key       endp
.text:0000161A
.text:0000161A ; ---------------------------------------------------------------------------
.text:0000161B                 db 0Dh dup(0CCh)
.text:00001628
.text:00001628 ; =============== S U B R O U T I N E =======================================
.text:00001628
.text:00001628 ; Attributes: bp-based frame
.text:00001628
.text:00001628 _copy_value     proc near               ; CODE XREF: _conf_copy_into+8Ep
.text:00001628
.text:00001628 var_4           = dword ptr -4
.text:00001628 arg_0           = dword ptr  8
.text:00001628 arg_4           = dword ptr  0Ch
.text:00001628 arg_8           = dword ptr  10h
.text:00001628
.text:00001628                 push    ebp
.text:00001629                 mov     ebp, esp
.text:0000162B                 push    ecx
.text:0000162C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001633                 mov     eax, [ebp+arg_8]
.text:00001636                 mov     [ebp+var_4], eax
.text:00001639                 mov     ecx, [ebp+var_4]
.text:0000163C                 sub     ecx, 1
.text:0000163F                 mov     [ebp+var_4], ecx
.text:00001642                 cmp     [ebp+var_4], 3  ; switch 4 cases
.text:00001646                 ja      short loc_169B  ; jumptable 0000164B default case
.text:00001648                 mov     edx, [ebp+var_4]
.text:0000164B                 jmp     ds:$LN9[edx*4]  ; switch jump
.text:00001652 ; ---------------------------------------------------------------------------
.text:00001652
.text:00001652 $LN4:                                   ; CODE XREF: _copy_value+23j
.text:00001652                                         ; DATA XREF: .text:$LN9o
.text:00001652                 mov     eax, [ebp+arg_0] ; jumptable 0000164B case 0
.text:00001655                 mov     ecx, [ebp+arg_4]
.text:00001658                 mov     edx, [ecx]
.text:0000165A                 mov     [eax], edx
.text:0000165C                 jmp     short loc_169B  ; jumptable 0000164B default case
.text:0000165E ; ---------------------------------------------------------------------------
.text:0000165E
.text:0000165E $LN3:                                   ; CODE XREF: _copy_value+23j
.text:0000165E                                         ; DATA XREF: .text:$LN9o
.text:0000165E                 mov     eax, [ebp+arg_4] ; jumptable 0000164B case 1
.text:00001661                 mov     ecx, [eax]
.text:00001663                 push    ecx
.text:00001664                 call    _dupstr
.text:00001669                 add     esp, 4
.text:0000166C                 mov     edx, [ebp+arg_0]
.text:0000166F                 mov     [edx], eax
.text:00001671                 jmp     short loc_169B  ; jumptable 0000164B default case
.text:00001673 ; ---------------------------------------------------------------------------
.text:00001673
.text:00001673 $LN2:                                   ; CODE XREF: _copy_value+23j
.text:00001673                                         ; DATA XREF: .text:$LN9o
.text:00001673                 mov     eax, [ebp+arg_4] ; jumptable 0000164B case 2
.text:00001676                 mov     ecx, [eax]
.text:00001678                 push    ecx
.text:00001679                 call    _filename_copy
.text:0000167E                 add     esp, 4
.text:00001681                 mov     edx, [ebp+arg_0]
.text:00001684                 mov     [edx], eax
.text:00001686                 jmp     short loc_169B  ; jumptable 0000164B default case
.text:00001688 ; ---------------------------------------------------------------------------
.text:00001688
.text:00001688 $LN1:                                   ; CODE XREF: _copy_value+23j
.text:00001688                                         ; DATA XREF: .text:$LN9o
.text:00001688                 mov     eax, [ebp+arg_4] ; jumptable 0000164B case 3
.text:0000168B                 mov     ecx, [eax]
.text:0000168D                 push    ecx
.text:0000168E                 call    _fontspec_copy
.text:00001693                 add     esp, 4
.text:00001696                 mov     edx, [ebp+arg_0]
.text:00001699                 mov     [edx], eax
.text:0000169B
.text:0000169B loc_169B:                               ; CODE XREF: _copy_value+1Ej
.text:0000169B                                         ; _copy_value+34j ...
.text:0000169B                 add     esp, 4          ; jumptable 0000164B default case
.text:0000169E                 cmp     ebp, esp
.text:000016A0                 call    __RTC_CheckEsp
.text:000016A5                 mov     esp, ebp
.text:000016A7                 pop     ebp
.text:000016A8                 retn
.text:000016A8 _copy_value     endp
.text:000016A8
.text:000016A8 ; ---------------------------------------------------------------------------
.text:000016A9                 align 4
.text:000016AC $LN9            dd offset $LN4          ; DATA XREF: _copy_value+23r
.text:000016AC                 dd offset $LN3          ; jump table for switch statement
.text:000016AC                 dd offset $LN2
.text:000016AC                 dd offset $LN1
.text:000016BC                 db 0Ch dup(0CCh)
.text:000016C8
.text:000016C8 ; =============== S U B R O U T I N E =======================================
.text:000016C8
.text:000016C8 ; Attributes: bp-based frame
.text:000016C8
.text:000016C8                 public _conf_copy
.text:000016C8 _conf_copy      proc near
.text:000016C8
.text:000016C8 var_4           = dword ptr -4
.text:000016C8 arg_0           = dword ptr  8
.text:000016C8
.text:000016C8                 push    ebp
.text:000016C9                 mov     ebp, esp
.text:000016CB                 push    ecx
.text:000016CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016D3                 call    _conf_new
.text:000016D8                 mov     [ebp+var_4], eax
.text:000016DB                 mov     eax, [ebp+arg_0]
.text:000016DE                 push    eax
.text:000016DF                 mov     ecx, [ebp+var_4]
.text:000016E2                 push    ecx
.text:000016E3                 call    _conf_copy_into
.text:000016E8                 add     esp, 8
.text:000016EB                 mov     eax, [ebp+var_4]
.text:000016EE                 add     esp, 4
.text:000016F1                 cmp     ebp, esp
.text:000016F3                 call    __RTC_CheckEsp
.text:000016F8                 mov     esp, ebp
.text:000016FA                 pop     ebp
.text:000016FB                 retn
.text:000016FB _conf_copy      endp
.text:000016FB
.text:000016FB ; ---------------------------------------------------------------------------
.text:000016FC                 db 0Ch dup(0CCh)
.text:00001708
.text:00001708 ; =============== S U B R O U T I N E =======================================
.text:00001708
.text:00001708 ; Attributes: bp-based frame
.text:00001708
.text:00001708                 public _conf_get_int
.text:00001708 _conf_get_int   proc near
.text:00001708
.text:00001708 var_14          = dword ptr -14h
.text:00001708 var_10          = dword ptr -10h
.text:00001708 var_C           = dword ptr -0Ch
.text:00001708 var_8           = dword ptr -8
.text:00001708 var_4           = dword ptr -4
.text:00001708 arg_0           = dword ptr  8
.text:00001708 arg_4           = dword ptr  0Ch
.text:00001708
.text:00001708                 push    ebp
.text:00001709                 mov     ebp, esp
.text:0000170B                 sub     esp, 14h
.text:0000170E                 mov     eax, 0CCCCCCCCh
.text:00001713                 mov     [ebp+var_14], eax
.text:00001716                 mov     [ebp+var_10], eax
.text:00001719                 mov     [ebp+var_C], eax
.text:0000171C                 mov     [ebp+var_8], eax
.text:0000171F                 mov     [ebp+var_4], eax
.text:00001722                 mov     eax, [ebp+arg_4]
.text:00001725                 cmp     _subkeytypes[eax*4], 0
.text:0000172D                 jz      short loc_1746
.text:0000172F                 push    0E7h ; 't'
.text:00001734                 push    offset $SG85696 ; "..\\..\\..\\conf.c"
.text:00001739                 push    offset $SG85697 ; "subkeytypes[primary] == TYPE_NONE"
.text:0000173E                 call    __wassert
.text:00001743 ; ---------------------------------------------------------------------------
.text:00001743                 add     esp, 0Ch
.text:00001746
.text:00001746 loc_1746:                               ; CODE XREF: _conf_get_int+25j
.text:00001746                 mov     edx, [ebp+arg_4]
.text:00001749                 cmp     _valuetypes[edx*4], 1
.text:00001751                 jz      short loc_176A
.text:00001753                 push    0E8h ; 'F'
.text:00001758                 push    offset $SG85699 ; "..\\..\\..\\conf.c"
.text:0000175D                 push    offset $SG85700 ; "valuetypes[primary] == TYPE_INT"
.text:00001762                 call    __wassert
.text:00001767 ; ---------------------------------------------------------------------------
.text:00001767                 add     esp, 0Ch
.text:0000176A
.text:0000176A loc_176A:                               ; CODE XREF: _conf_get_int+49j
.text:0000176A                 mov     ecx, [ebp+arg_4]
.text:0000176D                 mov     [ebp+var_C], ecx
.text:00001770                 push    0
.text:00001772                 lea     edx, [ebp+var_C]
.text:00001775                 push    edx
.text:00001776                 mov     eax, [ebp+arg_0]
.text:00001779                 mov     ecx, [eax]
.text:0000177B                 push    ecx
.text:0000177C                 call    _find234
.text:00001781                 add     esp, 0Ch
.text:00001784                 mov     [ebp+var_14], eax
.text:00001787                 cmp     [ebp+var_14], 0
.text:0000178B                 jnz     short loc_17A4
.text:0000178D                 push    0EBh ; 'd'
.text:00001792                 push    offset $SG85703 ; "..\\..\\..\\conf.c"
.text:00001797                 push    offset $SG85704 ; "entry"
.text:0000179C                 call    __wassert
.text:000017A1 ; ---------------------------------------------------------------------------
.text:000017A1                 add     esp, 0Ch
.text:000017A4
.text:000017A4 loc_17A4:                               ; CODE XREF: _conf_get_int+83j
.text:000017A4                 mov     eax, [ebp+var_14]
.text:000017A7                 mov     eax, [eax+8]
.text:000017AA                 push    edx
.text:000017AB                 mov     ecx, ebp
.text:000017AD                 push    eax
.text:000017AE                 lea     edx, $LN8
.text:000017B4                 call    @_RTC_CheckStackVars@8
.text:000017B9                 pop     eax
.text:000017BA                 pop     edx
.text:000017BB                 add     esp, 14h
.text:000017BE                 cmp     ebp, esp
.text:000017C0                 call    __RTC_CheckEsp
.text:000017C5                 mov     esp, ebp
.text:000017C7                 pop     ebp
.text:000017C8                 retn
.text:000017C8 _conf_get_int   endp
.text:000017C8
.text:000017C8 ; ---------------------------------------------------------------------------
.text:000017C9                 align 4
.text:000017CC $LN8            dd 1                    ; DATA XREF: _conf_get_int+A6o
.text:000017D0                 dd offset $LN7
.text:000017D4 $LN7            dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000017D0o
.text:000017DC                 dd offset $LN6
.text:000017E0 $LN6            dd 79656Bh, 0CCCCCCCCh  ; DATA XREF: .text:000017DCo
.text:000017E8
.text:000017E8 ; =============== S U B R O U T I N E =======================================
.text:000017E8
.text:000017E8 ; Attributes: bp-based frame
.text:000017E8
.text:000017E8                 public _conf_get_int_int
.text:000017E8 _conf_get_int_int proc near
.text:000017E8
.text:000017E8 var_14          = dword ptr -14h
.text:000017E8 var_10          = dword ptr -10h
.text:000017E8 var_C           = dword ptr -0Ch
.text:000017E8 var_8           = dword ptr -8
.text:000017E8 var_4           = dword ptr -4
.text:000017E8 arg_0           = dword ptr  8
.text:000017E8 arg_4           = dword ptr  0Ch
.text:000017E8 arg_8           = dword ptr  10h
.text:000017E8
.text:000017E8                 push    ebp
.text:000017E9                 mov     ebp, esp
.text:000017EB                 sub     esp, 14h
.text:000017EE                 mov     eax, 0CCCCCCCCh
.text:000017F3                 mov     [ebp+var_14], eax
.text:000017F6                 mov     [ebp+var_10], eax
.text:000017F9                 mov     [ebp+var_C], eax
.text:000017FC                 mov     [ebp+var_8], eax
.text:000017FF                 mov     [ebp+var_4], eax
.text:00001802                 mov     eax, [ebp+arg_4]
.text:00001805                 cmp     _subkeytypes[eax*4], 1
.text:0000180D                 jz      short loc_1826
.text:0000180F                 push    0F4h ; '('
.text:00001814                 push    offset $SG85715 ; "..\\..\\..\\conf.c"
.text:00001819                 push    offset $SG85716 ; "subkeytypes[primary] == TYPE_INT"
.text:0000181E                 call    __wassert
.text:00001823 ; ---------------------------------------------------------------------------
.text:00001823                 add     esp, 0Ch
.text:00001826
.text:00001826 loc_1826:                               ; CODE XREF: _conf_get_int_int+25j
.text:00001826                 mov     edx, [ebp+arg_4]
.text:00001829                 cmp     _valuetypes[edx*4], 1
.text:00001831                 jz      short loc_184A
.text:00001833                 push    0F5h ; ')'
.text:00001838                 push    offset $SG85718 ; "..\\..\\..\\conf.c"
.text:0000183D                 push    offset $SG85719 ; "valuetypes[primary] == TYPE_INT"
.text:00001842                 call    __wassert
.text:00001847 ; ---------------------------------------------------------------------------
.text:00001847                 add     esp, 0Ch
.text:0000184A
.text:0000184A loc_184A:                               ; CODE XREF: _conf_get_int_int+49j
.text:0000184A                 mov     ecx, [ebp+arg_4]
.text:0000184D                 mov     [ebp+var_C], ecx
.text:00001850                 mov     edx, [ebp+arg_8]
.text:00001853                 mov     [ebp+var_8], edx
.text:00001856                 push    0
.text:00001858                 lea     eax, [ebp+var_C]
.text:0000185B                 push    eax
.text:0000185C                 mov     ecx, [ebp+arg_0]
.text:0000185F                 mov     edx, [ecx]
.text:00001861                 push    edx
.text:00001862                 call    _find234
.text:00001867                 add     esp, 0Ch
.text:0000186A                 mov     [ebp+var_14], eax
.text:0000186D                 cmp     [ebp+var_14], 0
.text:00001871                 jnz     short loc_188A
.text:00001873                 push    0F9h ; '·'
.text:00001878                 push    offset $SG85722 ; "..\\..\\..\\conf.c"
.text:0000187D                 push    offset $SG85723 ; "entry"
.text:00001882                 call    __wassert
.text:00001887 ; ---------------------------------------------------------------------------
.text:00001887                 add     esp, 0Ch
.text:0000188A
.text:0000188A loc_188A:                               ; CODE XREF: _conf_get_int_int+89j
.text:0000188A                 mov     ecx, [ebp+var_14]
.text:0000188D                 mov     eax, [ecx+8]
.text:00001890                 push    edx
.text:00001891                 mov     ecx, ebp
.text:00001893                 push    eax
.text:00001894                 lea     edx, $LN8_0
.text:0000189A                 call    @_RTC_CheckStackVars@8
.text:0000189F                 pop     eax
.text:000018A0                 pop     edx
.text:000018A1                 add     esp, 14h
.text:000018A4                 cmp     ebp, esp
.text:000018A6                 call    __RTC_CheckEsp
.text:000018AB                 mov     esp, ebp
.text:000018AD                 pop     ebp
.text:000018AE                 retn
.text:000018AE _conf_get_int_int endp
.text:000018AE
.text:000018AE ; ---------------------------------------------------------------------------
.text:000018AF                 align 10h
.text:000018B0 $LN8_0          dd 1                    ; DATA XREF: _conf_get_int_int+ACo
.text:000018B4                 dd offset $LN7_0
.text:000018B8 $LN7_0          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000018B4o
.text:000018C0                 dd offset $LN6_0
.text:000018C4 $LN6_0          dd 79656Bh              ; DATA XREF: .text:000018C0o
.text:000018C8
.text:000018C8 ; =============== S U B R O U T I N E =======================================
.text:000018C8
.text:000018C8 ; Attributes: bp-based frame
.text:000018C8
.text:000018C8                 public _conf_get_str
.text:000018C8 _conf_get_str   proc near
.text:000018C8
.text:000018C8 var_14          = dword ptr -14h
.text:000018C8 var_10          = dword ptr -10h
.text:000018C8 var_C           = dword ptr -0Ch
.text:000018C8 var_8           = dword ptr -8
.text:000018C8 var_4           = dword ptr -4
.text:000018C8 arg_0           = dword ptr  8
.text:000018C8 arg_4           = dword ptr  0Ch
.text:000018C8
.text:000018C8                 push    ebp
.text:000018C9                 mov     ebp, esp
.text:000018CB                 sub     esp, 14h
.text:000018CE                 mov     eax, 0CCCCCCCCh
.text:000018D3                 mov     [ebp+var_14], eax
.text:000018D6                 mov     [ebp+var_10], eax
.text:000018D9                 mov     [ebp+var_C], eax
.text:000018DC                 mov     [ebp+var_8], eax
.text:000018DF                 mov     [ebp+var_4], eax
.text:000018E2                 mov     eax, [ebp+arg_4]
.text:000018E5                 cmp     _subkeytypes[eax*4], 0
.text:000018ED                 jz      short loc_1906
.text:000018EF                 push    102h
.text:000018F4                 push    offset $SG85732 ; "..\\..\\..\\conf.c"
.text:000018F9                 push    offset $SG85733 ; "subkeytypes[primary] == TYPE_NONE"
.text:000018FE                 call    __wassert
.text:00001903 ; ---------------------------------------------------------------------------
.text:00001903                 add     esp, 0Ch
.text:00001906
.text:00001906 loc_1906:                               ; CODE XREF: _conf_get_str+25j
.text:00001906                 mov     edx, [ebp+arg_4]
.text:00001909                 cmp     _valuetypes[edx*4], 2
.text:00001911                 jz      short loc_192A
.text:00001913                 push    103h
.text:00001918                 push    offset $SG85735 ; "..\\..\\..\\conf.c"
.text:0000191D                 push    offset $SG85736 ; "valuetypes[primary] == TYPE_STR"
.text:00001922                 call    __wassert
.text:00001927 ; ---------------------------------------------------------------------------
.text:00001927                 add     esp, 0Ch
.text:0000192A
.text:0000192A loc_192A:                               ; CODE XREF: _conf_get_str+49j
.text:0000192A                 mov     ecx, [ebp+arg_4]
.text:0000192D                 mov     [ebp+var_C], ecx
.text:00001930                 push    0
.text:00001932                 lea     edx, [ebp+var_C]
.text:00001935                 push    edx
.text:00001936                 mov     eax, [ebp+arg_0]
.text:00001939                 mov     ecx, [eax]
.text:0000193B                 push    ecx
.text:0000193C                 call    _find234
.text:00001941                 add     esp, 0Ch
.text:00001944                 mov     [ebp+var_14], eax
.text:00001947                 cmp     [ebp+var_14], 0
.text:0000194B                 jnz     short loc_1964
.text:0000194D                 push    106h
.text:00001952                 push    offset $SG85739 ; "..\\..\\..\\conf.c"
.text:00001957                 push    offset $SG85740 ; "entry"
.text:0000195C                 call    __wassert
.text:00001961 ; ---------------------------------------------------------------------------
.text:00001961                 add     esp, 0Ch
.text:00001964
.text:00001964 loc_1964:                               ; CODE XREF: _conf_get_str+83j
.text:00001964                 mov     eax, [ebp+var_14]
.text:00001967                 mov     eax, [eax+8]
.text:0000196A                 push    edx
.text:0000196B                 mov     ecx, ebp
.text:0000196D                 push    eax
.text:0000196E                 lea     edx, $LN8_1
.text:00001974                 call    @_RTC_CheckStackVars@8
.text:00001979                 pop     eax
.text:0000197A                 pop     edx
.text:0000197B                 add     esp, 14h
.text:0000197E                 cmp     ebp, esp
.text:00001980                 call    __RTC_CheckEsp
.text:00001985                 mov     esp, ebp
.text:00001987                 pop     ebp
.text:00001988                 retn
.text:00001988 _conf_get_str   endp
.text:00001988
.text:00001988 ; ---------------------------------------------------------------------------
.text:00001989                 align 4
.text:0000198C $LN8_1          dd 1                    ; DATA XREF: _conf_get_str+A6o
.text:00001990                 dd offset $LN7_1
.text:00001994 $LN7_1          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001990o
.text:0000199C                 dd offset $LN6_1
.text:000019A0 $LN6_1          dd 79656Bh, 0CCCCCCCCh  ; DATA XREF: .text:0000199Co
.text:000019A8
.text:000019A8 ; =============== S U B R O U T I N E =======================================
.text:000019A8
.text:000019A8 ; Attributes: bp-based frame
.text:000019A8
.text:000019A8                 public _conf_get_str_str_opt
.text:000019A8 _conf_get_str_str_opt proc near         ; CODE XREF: _conf_get_str_str+17p
.text:000019A8
.text:000019A8 var_18          = dword ptr -18h
.text:000019A8 var_14          = dword ptr -14h
.text:000019A8 var_10          = dword ptr -10h
.text:000019A8 var_C           = dword ptr -0Ch
.text:000019A8 var_8           = dword ptr -8
.text:000019A8 var_4           = dword ptr -4
.text:000019A8 arg_0           = dword ptr  8
.text:000019A8 arg_4           = dword ptr  0Ch
.text:000019A8 arg_8           = dword ptr  10h
.text:000019A8
.text:000019A8                 push    ebp
.text:000019A9                 mov     ebp, esp
.text:000019AB                 sub     esp, 18h
.text:000019AE                 mov     eax, 0CCCCCCCCh
.text:000019B3                 mov     [ebp+var_18], eax
.text:000019B6                 mov     [ebp+var_14], eax
.text:000019B9                 mov     [ebp+var_10], eax
.text:000019BC                 mov     [ebp+var_C], eax
.text:000019BF                 mov     [ebp+var_8], eax
.text:000019C2                 mov     [ebp+var_4], eax
.text:000019C5                 mov     eax, [ebp+arg_4]
.text:000019C8                 cmp     _subkeytypes[eax*4], 2
.text:000019D0                 jz      short loc_19E9
.text:000019D2                 push    10Fh
.text:000019D7                 push    offset $SG85751 ; "..\\..\\..\\conf.c"
.text:000019DC                 push    offset $SG85752 ; "subkeytypes[primary] == TYPE_STR"
.text:000019E1                 call    __wassert
.text:000019E6 ; ---------------------------------------------------------------------------
.text:000019E6                 add     esp, 0Ch
.text:000019E9
.text:000019E9 loc_19E9:                               ; CODE XREF: _conf_get_str_str_opt+28j
.text:000019E9                 mov     edx, [ebp+arg_4]
.text:000019EC                 cmp     _valuetypes[edx*4], 2
.text:000019F4                 jz      short loc_1A0D
.text:000019F6                 push    110h
.text:000019FB                 push    offset $SG85754 ; "..\\..\\..\\conf.c"
.text:00001A00                 push    offset $SG85755 ; "valuetypes[primary] == TYPE_STR"
.text:00001A05                 call    __wassert
.text:00001A0A ; ---------------------------------------------------------------------------
.text:00001A0A                 add     esp, 0Ch
.text:00001A0D
.text:00001A0D loc_1A0D:                               ; CODE XREF: _conf_get_str_str_opt+4Cj
.text:00001A0D                 mov     ecx, [ebp+arg_4]
.text:00001A10                 mov     [ebp+var_C], ecx
.text:00001A13                 mov     edx, [ebp+arg_8]
.text:00001A16                 mov     [ebp+var_8], edx
.text:00001A19                 push    0
.text:00001A1B                 lea     eax, [ebp+var_C]
.text:00001A1E                 push    eax
.text:00001A1F                 mov     ecx, [ebp+arg_0]
.text:00001A22                 mov     edx, [ecx]
.text:00001A24                 push    edx
.text:00001A25                 call    _find234
.text:00001A2A                 add     esp, 0Ch
.text:00001A2D                 mov     [ebp+var_14], eax
.text:00001A30                 cmp     [ebp+var_14], 0
.text:00001A34                 jz      short loc_1A41
.text:00001A36                 mov     eax, [ebp+var_14]
.text:00001A39                 mov     ecx, [eax+8]
.text:00001A3C                 mov     [ebp+var_18], ecx
.text:00001A3F                 jmp     short loc_1A48
.text:00001A41 ; ---------------------------------------------------------------------------
.text:00001A41
.text:00001A41 loc_1A41:                               ; CODE XREF: _conf_get_str_str_opt+8Cj
.text:00001A41                 mov     [ebp+var_18], 0
.text:00001A48
.text:00001A48 loc_1A48:                               ; CODE XREF: _conf_get_str_str_opt+97j
.text:00001A48                 mov     eax, [ebp+var_18]
.text:00001A4B                 push    edx
.text:00001A4C                 mov     ecx, ebp
.text:00001A4E                 push    eax
.text:00001A4F                 lea     edx, $LN9_0
.text:00001A55                 call    @_RTC_CheckStackVars@8
.text:00001A5A                 pop     eax
.text:00001A5B                 pop     edx
.text:00001A5C                 add     esp, 18h
.text:00001A5F                 cmp     ebp, esp
.text:00001A61                 call    __RTC_CheckEsp
.text:00001A66                 mov     esp, ebp
.text:00001A68                 pop     ebp
.text:00001A69                 retn
.text:00001A69 _conf_get_str_str_opt endp
.text:00001A69
.text:00001A69 ; ---------------------------------------------------------------------------
.text:00001A6A                 align 4
.text:00001A6C $LN9_0          dd 1                    ; DATA XREF: _conf_get_str_str_opt+A7o
.text:00001A70                 dd offset $LN8_2
.text:00001A74 $LN8_2          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001A70o
.text:00001A7C                 dd offset $LN7_2
.text:00001A80 $LN7_2          dd 79656Bh, 0CCCCCCCCh  ; DATA XREF: .text:00001A7Co
.text:00001A88
.text:00001A88 ; =============== S U B R O U T I N E =======================================
.text:00001A88
.text:00001A88 ; Attributes: bp-based frame
.text:00001A88
.text:00001A88                 public _conf_get_str_str
.text:00001A88 _conf_get_str_str proc near
.text:00001A88
.text:00001A88 var_4           = dword ptr -4
.text:00001A88 arg_0           = dword ptr  8
.text:00001A88 arg_4           = dword ptr  0Ch
.text:00001A88 arg_8           = dword ptr  10h
.text:00001A88
.text:00001A88                 push    ebp
.text:00001A89                 mov     ebp, esp
.text:00001A8B                 push    ecx
.text:00001A8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A93                 mov     eax, [ebp+arg_8]
.text:00001A96                 push    eax
.text:00001A97                 mov     ecx, [ebp+arg_4]
.text:00001A9A                 push    ecx
.text:00001A9B                 mov     edx, [ebp+arg_0]
.text:00001A9E                 push    edx
.text:00001A9F                 call    _conf_get_str_str_opt
.text:00001AA4                 add     esp, 0Ch
.text:00001AA7                 mov     [ebp+var_4], eax
.text:00001AAA                 cmp     [ebp+var_4], 0
.text:00001AAE                 jnz     short loc_1AC7
.text:00001AB0                 push    11Ah
.text:00001AB5                 push    offset $SG85768 ; "..\\..\\..\\conf.c"
.text:00001ABA                 push    offset $SG85769 ; "ret"
.text:00001ABF                 call    __wassert
.text:00001AC4 ; ---------------------------------------------------------------------------
.text:00001AC4                 add     esp, 0Ch
.text:00001AC7
.text:00001AC7 loc_1AC7:                               ; CODE XREF: _conf_get_str_str+26j
.text:00001AC7                 mov     eax, [ebp+var_4]
.text:00001ACA                 add     esp, 4
.text:00001ACD                 cmp     ebp, esp
.text:00001ACF                 call    __RTC_CheckEsp
.text:00001AD4                 mov     esp, ebp
.text:00001AD6                 pop     ebp
.text:00001AD7                 retn
.text:00001AD7 _conf_get_str_str endp
.text:00001AD7
.text:00001AD8
.text:00001AD8 ; =============== S U B R O U T I N E =======================================
.text:00001AD8
.text:00001AD8 ; Attributes: bp-based frame
.text:00001AD8
.text:00001AD8                 public _conf_get_str_strs
.text:00001AD8 _conf_get_str_strs proc near
.text:00001AD8
.text:00001AD8 var_14          = dword ptr -14h
.text:00001AD8 var_10          = dword ptr -10h
.text:00001AD8 var_C           = dword ptr -0Ch
.text:00001AD8 var_8           = dword ptr -8
.text:00001AD8 var_4           = dword ptr -4
.text:00001AD8 arg_0           = dword ptr  8
.text:00001AD8 arg_4           = dword ptr  0Ch
.text:00001AD8 arg_8           = dword ptr  10h
.text:00001AD8 arg_C           = dword ptr  14h
.text:00001AD8
.text:00001AD8                 push    ebp
.text:00001AD9                 mov     ebp, esp
.text:00001ADB                 sub     esp, 14h
.text:00001ADE                 mov     eax, 0CCCCCCCCh
.text:00001AE3                 mov     [ebp+var_14], eax
.text:00001AE6                 mov     [ebp+var_10], eax
.text:00001AE9                 mov     [ebp+var_C], eax
.text:00001AEC                 mov     [ebp+var_8], eax
.text:00001AEF                 mov     [ebp+var_4], eax
.text:00001AF2                 mov     eax, [ebp+arg_4]
.text:00001AF5                 cmp     _subkeytypes[eax*4], 2
.text:00001AFD                 jz      short loc_1B16
.text:00001AFF                 push    124h
.text:00001B04                 push    offset $SG85782 ; "..\\..\\..\\conf.c"
.text:00001B09                 push    offset $SG85783 ; "subkeytypes[primary] == TYPE_STR"
.text:00001B0E                 call    __wassert
.text:00001B13 ; ---------------------------------------------------------------------------
.text:00001B13                 add     esp, 0Ch
.text:00001B16
.text:00001B16 loc_1B16:                               ; CODE XREF: _conf_get_str_strs+25j
.text:00001B16                 mov     edx, [ebp+arg_4]
.text:00001B19                 cmp     _valuetypes[edx*4], 2
.text:00001B21                 jz      short loc_1B3A
.text:00001B23                 push    125h
.text:00001B28                 push    offset $SG85785 ; "..\\..\\..\\conf.c"
.text:00001B2D                 push    offset $SG85786 ; "valuetypes[primary] == TYPE_STR"
.text:00001B32                 call    __wassert
.text:00001B37 ; ---------------------------------------------------------------------------
.text:00001B37                 add     esp, 0Ch
.text:00001B3A
.text:00001B3A loc_1B3A:                               ; CODE XREF: _conf_get_str_strs+49j
.text:00001B3A                 mov     ecx, [ebp+arg_4]
.text:00001B3D                 mov     [ebp+var_C], ecx
.text:00001B40                 cmp     [ebp+arg_8], 0
.text:00001B44                 jz      short loc_1B67
.text:00001B46                 mov     edx, [ebp+arg_8]
.text:00001B49                 mov     [ebp+var_8], edx
.text:00001B4C                 push    3
.text:00001B4E                 push    0
.text:00001B50                 lea     eax, [ebp+var_C]
.text:00001B53                 push    eax
.text:00001B54                 mov     ecx, [ebp+arg_0]
.text:00001B57                 mov     edx, [ecx]
.text:00001B59                 push    edx
.text:00001B5A                 call    _findrel234
.text:00001B5F                 add     esp, 10h
.text:00001B62                 mov     [ebp+var_14], eax
.text:00001B65                 jmp     short loc_1B87
.text:00001B67 ; ---------------------------------------------------------------------------
.text:00001B67
.text:00001B67 loc_1B67:                               ; CODE XREF: _conf_get_str_strs+6Cj
.text:00001B67                 mov     [ebp+var_8], offset $SG85790
.text:00001B6E                 push    4
.text:00001B70                 push    0
.text:00001B72                 lea     eax, [ebp+var_C]
.text:00001B75                 push    eax
.text:00001B76                 mov     ecx, [ebp+arg_0]
.text:00001B79                 mov     edx, [ecx]
.text:00001B7B                 push    edx
.text:00001B7C                 call    _findrel234
.text:00001B81                 add     esp, 10h
.text:00001B84                 mov     [ebp+var_14], eax
.text:00001B87
.text:00001B87 loc_1B87:                               ; CODE XREF: _conf_get_str_strs+8Dj
.text:00001B87                 cmp     [ebp+var_14], 0
.text:00001B8B                 jz      short loc_1B97
.text:00001B8D                 mov     eax, [ebp+var_14]
.text:00001B90                 mov     ecx, [eax]
.text:00001B92                 cmp     ecx, [ebp+arg_4]
.text:00001B95                 jz      short loc_1B9B
.text:00001B97
.text:00001B97 loc_1B97:                               ; CODE XREF: _conf_get_str_strs+B3j
.text:00001B97                 xor     eax, eax
.text:00001B99                 jmp     short loc_1BAC
.text:00001B9B ; ---------------------------------------------------------------------------
.text:00001B9B
.text:00001B9B loc_1B9B:                               ; CODE XREF: _conf_get_str_strs+BDj
.text:00001B9B                 mov     edx, [ebp+arg_C]
.text:00001B9E                 mov     eax, [ebp+var_14]
.text:00001BA1                 mov     ecx, [eax+4]
.text:00001BA4                 mov     [edx], ecx
.text:00001BA6                 mov     edx, [ebp+var_14]
.text:00001BA9                 mov     eax, [edx+8]
.text:00001BAC
.text:00001BAC loc_1BAC:                               ; CODE XREF: _conf_get_str_strs+C1j
.text:00001BAC                 push    edx
.text:00001BAD                 mov     ecx, ebp
.text:00001BAF                 push    eax
.text:00001BB0                 lea     edx, $LN11
.text:00001BB6                 call    @_RTC_CheckStackVars@8
.text:00001BBB                 pop     eax
.text:00001BBC                 pop     edx
.text:00001BBD                 add     esp, 14h
.text:00001BC0                 cmp     ebp, esp
.text:00001BC2                 call    __RTC_CheckEsp
.text:00001BC7                 mov     esp, ebp
.text:00001BC9                 pop     ebp
.text:00001BCA                 retn
.text:00001BCA _conf_get_str_strs endp
.text:00001BCA
.text:00001BCA ; ---------------------------------------------------------------------------
.text:00001BCB                 align 4
.text:00001BCC $LN11           dd 1                    ; DATA XREF: _conf_get_str_strs+D8o
.text:00001BD0                 dd offset $LN10
.text:00001BD4 $LN10           dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001BD0o
.text:00001BDC                 dd offset $LN9_1
.text:00001BE0 $LN9_1          dd 79656Bh, 0CCCCCCCCh  ; DATA XREF: .text:00001BDCo
.text:00001BE8
.text:00001BE8 ; =============== S U B R O U T I N E =======================================
.text:00001BE8
.text:00001BE8 ; Attributes: bp-based frame
.text:00001BE8
.text:00001BE8                 public _conf_get_str_nthstrkey
.text:00001BE8 _conf_get_str_nthstrkey proc near
.text:00001BE8
.text:00001BE8 var_20          = dword ptr -20h
.text:00001BE8 var_1C          = dword ptr -1Ch
.text:00001BE8 var_18          = dword ptr -18h
.text:00001BE8 var_14          = dword ptr -14h
.text:00001BE8 var_10          = dword ptr -10h
.text:00001BE8 var_C           = dword ptr -0Ch
.text:00001BE8 var_8           = dword ptr -8
.text:00001BE8 var_4           = dword ptr -4
.text:00001BE8 arg_0           = dword ptr  8
.text:00001BE8 arg_4           = dword ptr  0Ch
.text:00001BE8 arg_8           = dword ptr  10h
.text:00001BE8
.text:00001BE8                 push    ebp
.text:00001BE9                 mov     ebp, esp
.text:00001BEB                 sub     esp, 20h
.text:00001BEE                 mov     eax, 0CCCCCCCCh
.text:00001BF3                 mov     [ebp+var_20], eax
.text:00001BF6                 mov     [ebp+var_1C], eax
.text:00001BF9                 mov     [ebp+var_18], eax
.text:00001BFC                 mov     [ebp+var_14], eax
.text:00001BFF                 mov     [ebp+var_10], eax
.text:00001C02                 mov     [ebp+var_C], eax
.text:00001C05                 mov     [ebp+var_8], eax
.text:00001C08                 mov     [ebp+var_4], eax
.text:00001C0B                 mov     eax, [ebp+arg_4]
.text:00001C0E                 cmp     _subkeytypes[eax*4], 2
.text:00001C16                 jz      short loc_1C2F
.text:00001C18                 push    13Ah
.text:00001C1D                 push    offset $SG85806 ; "..\\..\\..\\conf.c"
.text:00001C22                 push    offset $SG85807 ; "subkeytypes[primary] == TYPE_STR"
.text:00001C27                 call    __wassert
.text:00001C2C ; ---------------------------------------------------------------------------
.text:00001C2C                 add     esp, 0Ch
.text:00001C2F
.text:00001C2F loc_1C2F:                               ; CODE XREF: _conf_get_str_nthstrkey+2Ej
.text:00001C2F                 mov     edx, [ebp+arg_4]
.text:00001C32                 cmp     _valuetypes[edx*4], 2
.text:00001C3A                 jz      short loc_1C53
.text:00001C3C                 push    13Bh
.text:00001C41                 push    offset $SG85809 ; "..\\..\\..\\conf.c"
.text:00001C46                 push    offset $SG85810 ; "valuetypes[primary] == TYPE_STR"
.text:00001C4B                 call    __wassert
.text:00001C50 ; ---------------------------------------------------------------------------
.text:00001C50                 add     esp, 0Ch
.text:00001C53
.text:00001C53 loc_1C53:                               ; CODE XREF: _conf_get_str_nthstrkey+52j
.text:00001C53                 mov     ecx, [ebp+arg_4]
.text:00001C56                 mov     [ebp+var_C], ecx
.text:00001C59                 mov     [ebp+var_8], offset $SG85811
.text:00001C60                 lea     edx, [ebp+var_1C]
.text:00001C63                 push    edx
.text:00001C64                 push    4
.text:00001C66                 push    0
.text:00001C68                 lea     eax, [ebp+var_C]
.text:00001C6B                 push    eax
.text:00001C6C                 mov     ecx, [ebp+arg_0]
.text:00001C6F                 mov     edx, [ecx]
.text:00001C71                 push    edx
.text:00001C72                 call    _findrelpos234
.text:00001C77                 add     esp, 14h
.text:00001C7A                 mov     [ebp+var_14], eax
.text:00001C7D                 cmp     [ebp+var_14], 0
.text:00001C81                 jz      short loc_1C8D
.text:00001C83                 mov     eax, [ebp+var_14]
.text:00001C86                 mov     ecx, [eax]
.text:00001C88                 cmp     ecx, [ebp+arg_4]
.text:00001C8B                 jz      short loc_1C91
.text:00001C8D
.text:00001C8D loc_1C8D:                               ; CODE XREF: _conf_get_str_nthstrkey+99j
.text:00001C8D                 xor     eax, eax
.text:00001C8F                 jmp     short loc_1CC3
.text:00001C91 ; ---------------------------------------------------------------------------
.text:00001C91
.text:00001C91 loc_1C91:                               ; CODE XREF: _conf_get_str_nthstrkey+A3j
.text:00001C91                 mov     edx, [ebp+var_1C]
.text:00001C94                 add     edx, [ebp+arg_8]
.text:00001C97                 push    edx
.text:00001C98                 mov     eax, [ebp+arg_0]
.text:00001C9B                 mov     ecx, [eax]
.text:00001C9D                 push    ecx
.text:00001C9E                 call    _index234
.text:00001CA3                 add     esp, 8
.text:00001CA6                 mov     [ebp+var_14], eax
.text:00001CA9                 cmp     [ebp+var_14], 0
.text:00001CAD                 jz      short loc_1CB9
.text:00001CAF                 mov     edx, [ebp+var_14]
.text:00001CB2                 mov     eax, [edx]
.text:00001CB4                 cmp     eax, [ebp+arg_4]
.text:00001CB7                 jz      short loc_1CBD
.text:00001CB9
.text:00001CB9 loc_1CB9:                               ; CODE XREF: _conf_get_str_nthstrkey+C5j
.text:00001CB9                 xor     eax, eax
.text:00001CBB                 jmp     short loc_1CC3
.text:00001CBD ; ---------------------------------------------------------------------------
.text:00001CBD
.text:00001CBD loc_1CBD:                               ; CODE XREF: _conf_get_str_nthstrkey+CFj
.text:00001CBD                 mov     ecx, [ebp+var_14]
.text:00001CC0                 mov     eax, [ecx+4]
.text:00001CC3
.text:00001CC3 loc_1CC3:                               ; CODE XREF: _conf_get_str_nthstrkey+A7j
.text:00001CC3                                         ; _conf_get_str_nthstrkey+D3j
.text:00001CC3                 push    edx
.text:00001CC4                 mov     ecx, ebp
.text:00001CC6                 push    eax
.text:00001CC7                 lea     edx, $LN12
.text:00001CCD                 call    @_RTC_CheckStackVars@8
.text:00001CD2                 pop     eax
.text:00001CD3                 pop     edx
.text:00001CD4                 add     esp, 20h
.text:00001CD7                 cmp     ebp, esp
.text:00001CD9                 call    __RTC_CheckEsp
.text:00001CDE                 mov     esp, ebp
.text:00001CE0                 pop     ebp
.text:00001CE1                 retn
.text:00001CE1 _conf_get_str_nthstrkey endp
.text:00001CE1
.text:00001CE1 ; ---------------------------------------------------------------------------
.text:00001CE2                 align 4
.text:00001CE4 $LN12           dd 2                    ; DATA XREF: _conf_get_str_nthstrkey+DFo
.text:00001CE8                 dd offset $LN11_0
.text:00001CEC $LN11_0         dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001CE8o
.text:00001CF4                 dd offset $LN9_2        ; "key"
.text:00001CF8                 dd 0FFFFFFE4h, 4
.text:00001D00                 dd offset $LN10_0       ; "index"
.text:00001D04 $LN10_0         db 'index',0            ; DATA XREF: .text:00001D00o
.text:00001D0A $LN9_2          db 'key',0              ; DATA XREF: .text:00001CF4o
.text:00001D0E                 db 0Ah dup(0CCh)
.text:00001D18
.text:00001D18 ; =============== S U B R O U T I N E =======================================
.text:00001D18
.text:00001D18 ; Attributes: bp-based frame
.text:00001D18
.text:00001D18                 public _conf_get_filename
.text:00001D18 _conf_get_filename proc near
.text:00001D18
.text:00001D18 var_14          = dword ptr -14h
.text:00001D18 var_10          = dword ptr -10h
.text:00001D18 var_C           = dword ptr -0Ch
.text:00001D18 var_8           = dword ptr -8
.text:00001D18 var_4           = dword ptr -4
.text:00001D18 arg_0           = dword ptr  8
.text:00001D18 arg_4           = dword ptr  0Ch
.text:00001D18
.text:00001D18                 push    ebp
.text:00001D19                 mov     ebp, esp
.text:00001D1B                 sub     esp, 14h
.text:00001D1E                 mov     eax, 0CCCCCCCCh
.text:00001D23                 mov     [ebp+var_14], eax
.text:00001D26                 mov     [ebp+var_10], eax
.text:00001D29                 mov     [ebp+var_C], eax
.text:00001D2C                 mov     [ebp+var_8], eax
.text:00001D2F                 mov     [ebp+var_4], eax
.text:00001D32                 mov     eax, [ebp+arg_4]
.text:00001D35                 cmp     _subkeytypes[eax*4], 0
.text:00001D3D                 jz      short loc_1D56
.text:00001D3F                 push    14Ch
.text:00001D44                 push    offset $SG85827 ; "..\\..\\..\\conf.c"
.text:00001D49                 push    offset $SG85828 ; "subkeytypes[primary] == TYPE_NONE"
.text:00001D4E                 call    __wassert
.text:00001D53 ; ---------------------------------------------------------------------------
.text:00001D53                 add     esp, 0Ch
.text:00001D56
.text:00001D56 loc_1D56:                               ; CODE XREF: _conf_get_filename+25j
.text:00001D56                 mov     edx, [ebp+arg_4]
.text:00001D59                 cmp     _valuetypes[edx*4], 3
.text:00001D61                 jz      short loc_1D7A
.text:00001D63                 push    14Dh
.text:00001D68                 push    offset $SG85830 ; "..\\..\\..\\conf.c"
.text:00001D6D                 push    offset $SG85831 ; "valuetypes[primary] == TYPE_FILENAME"
.text:00001D72                 call    __wassert
.text:00001D77 ; ---------------------------------------------------------------------------
.text:00001D77                 add     esp, 0Ch
.text:00001D7A
.text:00001D7A loc_1D7A:                               ; CODE XREF: _conf_get_filename+49j
.text:00001D7A                 mov     ecx, [ebp+arg_4]
.text:00001D7D                 mov     [ebp+var_C], ecx
.text:00001D80                 push    0
.text:00001D82                 lea     edx, [ebp+var_C]
.text:00001D85                 push    edx
.text:00001D86                 mov     eax, [ebp+arg_0]
.text:00001D89                 mov     ecx, [eax]
.text:00001D8B                 push    ecx
.text:00001D8C                 call    _find234
.text:00001D91                 add     esp, 0Ch
.text:00001D94                 mov     [ebp+var_14], eax
.text:00001D97                 cmp     [ebp+var_14], 0
.text:00001D9B                 jnz     short loc_1DB4
.text:00001D9D                 push    150h
.text:00001DA2                 push    offset $SG85834 ; "..\\..\\..\\conf.c"
.text:00001DA7                 push    offset $SG85835 ; "entry"
.text:00001DAC                 call    __wassert
.text:00001DB1 ; ---------------------------------------------------------------------------
.text:00001DB1                 add     esp, 0Ch
.text:00001DB4
.text:00001DB4 loc_1DB4:                               ; CODE XREF: _conf_get_filename+83j
.text:00001DB4                 mov     eax, [ebp+var_14]
.text:00001DB7                 mov     eax, [eax+8]
.text:00001DBA                 push    edx
.text:00001DBB                 mov     ecx, ebp
.text:00001DBD                 push    eax
.text:00001DBE                 lea     edx, $LN8_3
.text:00001DC4                 call    @_RTC_CheckStackVars@8
.text:00001DC9                 pop     eax
.text:00001DCA                 pop     edx
.text:00001DCB                 add     esp, 14h
.text:00001DCE                 cmp     ebp, esp
.text:00001DD0                 call    __RTC_CheckEsp
.text:00001DD5                 mov     esp, ebp
.text:00001DD7                 pop     ebp
.text:00001DD8                 retn
.text:00001DD8 _conf_get_filename endp
.text:00001DD8
.text:00001DD8 ; ---------------------------------------------------------------------------
.text:00001DD9                 align 4
.text:00001DDC $LN8_3          dd 1                    ; DATA XREF: _conf_get_filename+A6o
.text:00001DE0                 dd offset $LN7_3
.text:00001DE4 $LN7_3          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001DE0o
.text:00001DEC                 dd offset $LN6_2
.text:00001DF0 $LN6_2          dd 79656Bh, 0CCCCCCCCh  ; DATA XREF: .text:00001DECo
.text:00001DF8
.text:00001DF8 ; =============== S U B R O U T I N E =======================================
.text:00001DF8
.text:00001DF8 ; Attributes: bp-based frame
.text:00001DF8
.text:00001DF8                 public _conf_get_fontspec
.text:00001DF8 _conf_get_fontspec proc near
.text:00001DF8
.text:00001DF8 var_14          = dword ptr -14h
.text:00001DF8 var_10          = dword ptr -10h
.text:00001DF8 var_C           = dword ptr -0Ch
.text:00001DF8 var_8           = dword ptr -8
.text:00001DF8 var_4           = dword ptr -4
.text:00001DF8 arg_0           = dword ptr  8
.text:00001DF8 arg_4           = dword ptr  0Ch
.text:00001DF8
.text:00001DF8                 push    ebp
.text:00001DF9                 mov     ebp, esp
.text:00001DFB                 sub     esp, 14h
.text:00001DFE                 mov     eax, 0CCCCCCCCh
.text:00001E03                 mov     [ebp+var_14], eax
.text:00001E06                 mov     [ebp+var_10], eax
.text:00001E09                 mov     [ebp+var_C], eax
.text:00001E0C                 mov     [ebp+var_8], eax
.text:00001E0F                 mov     [ebp+var_4], eax
.text:00001E12                 mov     eax, [ebp+arg_4]
.text:00001E15                 cmp     _subkeytypes[eax*4], 0
.text:00001E1D                 jz      short loc_1E36
.text:00001E1F                 push    159h
.text:00001E24                 push    offset $SG85844 ; "..\\..\\..\\conf.c"
.text:00001E29                 push    offset $SG85845 ; "subkeytypes[primary] == TYPE_NONE"
.text:00001E2E                 call    __wassert
.text:00001E33 ; ---------------------------------------------------------------------------
.text:00001E33                 add     esp, 0Ch
.text:00001E36
.text:00001E36 loc_1E36:                               ; CODE XREF: _conf_get_fontspec+25j
.text:00001E36                 mov     edx, [ebp+arg_4]
.text:00001E39                 cmp     _valuetypes[edx*4], 4
.text:00001E41                 jz      short loc_1E5A
.text:00001E43                 push    15Ah
.text:00001E48                 push    offset $SG85847 ; "..\\..\\..\\conf.c"
.text:00001E4D                 push    offset $SG85848 ; "valuetypes[primary] == TYPE_FONT"
.text:00001E52                 call    __wassert
.text:00001E57 ; ---------------------------------------------------------------------------
.text:00001E57                 add     esp, 0Ch
.text:00001E5A
.text:00001E5A loc_1E5A:                               ; CODE XREF: _conf_get_fontspec+49j
.text:00001E5A                 mov     ecx, [ebp+arg_4]
.text:00001E5D                 mov     [ebp+var_C], ecx
.text:00001E60                 push    0
.text:00001E62                 lea     edx, [ebp+var_C]
.text:00001E65                 push    edx
.text:00001E66                 mov     eax, [ebp+arg_0]
.text:00001E69                 mov     ecx, [eax]
.text:00001E6B                 push    ecx
.text:00001E6C                 call    _find234
.text:00001E71                 add     esp, 0Ch
.text:00001E74                 mov     [ebp+var_14], eax
.text:00001E77                 cmp     [ebp+var_14], 0
.text:00001E7B                 jnz     short loc_1E94
.text:00001E7D                 push    15Dh
.text:00001E82                 push    offset $SG85851 ; "..\\..\\..\\conf.c"
.text:00001E87                 push    offset $SG85852 ; "entry"
.text:00001E8C                 call    __wassert
.text:00001E91 ; ---------------------------------------------------------------------------
.text:00001E91                 add     esp, 0Ch
.text:00001E94
.text:00001E94 loc_1E94:                               ; CODE XREF: _conf_get_fontspec+83j
.text:00001E94                 mov     eax, [ebp+var_14]
.text:00001E97                 mov     eax, [eax+8]
.text:00001E9A                 push    edx
.text:00001E9B                 mov     ecx, ebp
.text:00001E9D                 push    eax
.text:00001E9E                 lea     edx, $LN8_4
.text:00001EA4                 call    @_RTC_CheckStackVars@8
.text:00001EA9                 pop     eax
.text:00001EAA                 pop     edx
.text:00001EAB                 add     esp, 14h
.text:00001EAE                 cmp     ebp, esp
.text:00001EB0                 call    __RTC_CheckEsp
.text:00001EB5                 mov     esp, ebp
.text:00001EB7                 pop     ebp
.text:00001EB8                 retn
.text:00001EB8 _conf_get_fontspec endp
.text:00001EB8
.text:00001EB8 ; ---------------------------------------------------------------------------
.text:00001EB9                 align 4
.text:00001EBC $LN8_4          dd 1                    ; DATA XREF: _conf_get_fontspec+A6o
.text:00001EC0                 dd offset $LN7_4
.text:00001EC4 $LN7_4          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001EC0o
.text:00001ECC                 dd offset $LN6_3
.text:00001ED0 $LN6_3          dd 79656Bh, 0CCCCCCCCh  ; DATA XREF: .text:00001ECCo
.text:00001ED8
.text:00001ED8 ; =============== S U B R O U T I N E =======================================
.text:00001ED8
.text:00001ED8 ; Attributes: bp-based frame
.text:00001ED8
.text:00001ED8                 public _conf_set_int
.text:00001ED8 _conf_set_int   proc near
.text:00001ED8
.text:00001ED8 var_4           = dword ptr -4
.text:00001ED8 arg_0           = dword ptr  8
.text:00001ED8 arg_4           = dword ptr  0Ch
.text:00001ED8 arg_8           = dword ptr  10h
.text:00001ED8
.text:00001ED8                 push    ebp
.text:00001ED9                 mov     ebp, esp
.text:00001EDB                 push    ecx
.text:00001EDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EE3                 push    0Ch
.text:00001EE5                 push    1
.text:00001EE7                 call    _safemalloc
.text:00001EEC                 add     esp, 8
.text:00001EEF                 mov     [ebp+var_4], eax
.text:00001EF2                 mov     eax, [ebp+arg_4]
.text:00001EF5                 cmp     _subkeytypes[eax*4], 0
.text:00001EFD                 jz      short loc_1F16
.text:00001EFF                 push    165h
.text:00001F04                 push    offset $SG85864 ; "..\\..\\..\\conf.c"
.text:00001F09                 push    offset $SG85865 ; "subkeytypes[primary] == TYPE_NONE"
.text:00001F0E                 call    __wassert
.text:00001F13 ; ---------------------------------------------------------------------------
.text:00001F13                 add     esp, 0Ch
.text:00001F16
.text:00001F16 loc_1F16:                               ; CODE XREF: _conf_set_int+25j
.text:00001F16                 mov     edx, [ebp+arg_4]
.text:00001F19                 cmp     _valuetypes[edx*4], 1
.text:00001F21                 jz      short loc_1F3A
.text:00001F23                 push    166h
.text:00001F28                 push    offset $SG85867 ; "..\\..\\..\\conf.c"
.text:00001F2D                 push    offset $SG85868 ; "valuetypes[primary] == TYPE_INT"
.text:00001F32                 call    __wassert
.text:00001F37 ; ---------------------------------------------------------------------------
.text:00001F37                 add     esp, 0Ch
.text:00001F3A
.text:00001F3A loc_1F3A:                               ; CODE XREF: _conf_set_int+49j
.text:00001F3A                 mov     ecx, [ebp+var_4]
.text:00001F3D                 mov     edx, [ebp+arg_4]
.text:00001F40                 mov     [ecx], edx
.text:00001F42                 mov     eax, [ebp+var_4]
.text:00001F45                 mov     ecx, [ebp+arg_8]
.text:00001F48                 mov     [eax+8], ecx
.text:00001F4B                 mov     edx, [ebp+var_4]
.text:00001F4E                 push    edx
.text:00001F4F                 mov     eax, [ebp+arg_0]
.text:00001F52                 push    eax
.text:00001F53                 call    _conf_insert
.text:00001F58                 add     esp, 8
.text:00001F5B                 add     esp, 4
.text:00001F5E                 cmp     ebp, esp
.text:00001F60                 call    __RTC_CheckEsp
.text:00001F65                 mov     esp, ebp
.text:00001F67                 pop     ebp
.text:00001F68                 retn
.text:00001F68 _conf_set_int   endp
.text:00001F68
.text:00001F68 ; ---------------------------------------------------------------------------
.text:00001F69                 db 0Fh dup(0CCh)
.text:00001F78
.text:00001F78 ; =============== S U B R O U T I N E =======================================
.text:00001F78
.text:00001F78 ; Attributes: bp-based frame
.text:00001F78
.text:00001F78 _conf_insert    proc near               ; CODE XREF: _conf_set_int+7Bp
.text:00001F78                                         ; _conf_set_int_int+84p ...
.text:00001F78
.text:00001F78 var_4           = dword ptr -4
.text:00001F78 arg_0           = dword ptr  8
.text:00001F78 arg_4           = dword ptr  0Ch
.text:00001F78
.text:00001F78                 push    ebp
.text:00001F79                 mov     ebp, esp
.text:00001F7B                 push    ecx
.text:00001F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F83                 mov     eax, [ebp+arg_4]
.text:00001F86                 push    eax
.text:00001F87                 mov     ecx, [ebp+arg_0]
.text:00001F8A                 mov     edx, [ecx]
.text:00001F8C                 push    edx
.text:00001F8D                 call    _add234
.text:00001F92                 add     esp, 8
.text:00001F95                 mov     [ebp+var_4], eax
.text:00001F98                 cmp     [ebp+var_4], 0
.text:00001F9C                 jz      short loc_1FF8
.text:00001F9E                 mov     eax, [ebp+var_4]
.text:00001FA1                 cmp     eax, [ebp+arg_4]
.text:00001FA4                 jz      short loc_1FF8
.text:00001FA6                 mov     ecx, [ebp+var_4]
.text:00001FA9                 push    ecx
.text:00001FAA                 mov     edx, [ebp+arg_0]
.text:00001FAD                 mov     eax, [edx]
.text:00001FAF                 push    eax
.text:00001FB0                 call    _del234
.text:00001FB5                 add     esp, 8
.text:00001FB8                 mov     ecx, [ebp+var_4]
.text:00001FBB                 push    ecx
.text:00001FBC                 call    _free_entry
.text:00001FC1                 add     esp, 4
.text:00001FC4                 mov     edx, [ebp+arg_4]
.text:00001FC7                 push    edx
.text:00001FC8                 mov     eax, [ebp+arg_0]
.text:00001FCB                 mov     ecx, [eax]
.text:00001FCD                 push    ecx
.text:00001FCE                 call    _add234
.text:00001FD3                 add     esp, 8
.text:00001FD6                 mov     [ebp+var_4], eax
.text:00001FD9                 mov     edx, [ebp+var_4]
.text:00001FDC                 cmp     edx, [ebp+arg_4]
.text:00001FDF                 jz      short loc_1FF8
.text:00001FE1                 push    0C5h ; '+'
.text:00001FE6                 push    offset $SG85668 ; "..\\..\\..\\conf.c"
.text:00001FEB                 push    offset $SG85669 ; "oldentry == entry"
.text:00001FF0                 call    __wassert
.text:00001FF5 ; ---------------------------------------------------------------------------
.text:00001FF5                 add     esp, 0Ch
.text:00001FF8
.text:00001FF8 loc_1FF8:                               ; CODE XREF: _conf_insert+24j
.text:00001FF8                                         ; _conf_insert+2Cj ...
.text:00001FF8                 add     esp, 4
.text:00001FFB                 cmp     ebp, esp
.text:00001FFD                 call    __RTC_CheckEsp
.text:00002002                 mov     esp, ebp
.text:00002004                 pop     ebp
.text:00002005                 retn
.text:00002005 _conf_insert    endp
.text:00002005
.text:00002005 ; ---------------------------------------------------------------------------
.text:00002006                 align 4
.text:00002008
.text:00002008 ; =============== S U B R O U T I N E =======================================
.text:00002008
.text:00002008 ; Attributes: bp-based frame
.text:00002008
.text:00002008                 public _conf_set_int_int
.text:00002008 _conf_set_int_int proc near
.text:00002008
.text:00002008 var_4           = dword ptr -4
.text:00002008 arg_0           = dword ptr  8
.text:00002008 arg_4           = dword ptr  0Ch
.text:00002008 arg_8           = dword ptr  10h
.text:00002008 arg_C           = dword ptr  14h
.text:00002008
.text:00002008                 push    ebp
.text:00002009                 mov     ebp, esp
.text:0000200B                 push    ecx
.text:0000200C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002013                 push    0Ch
.text:00002015                 push    1
.text:00002017                 call    _safemalloc
.text:0000201C                 add     esp, 8
.text:0000201F                 mov     [ebp+var_4], eax
.text:00002022                 mov     eax, [ebp+arg_4]
.text:00002025                 cmp     _subkeytypes[eax*4], 1
.text:0000202D                 jz      short loc_2046
.text:0000202F                 push    170h
.text:00002034                 push    offset $SG85882 ; "..\\..\\..\\conf.c"
.text:00002039                 push    offset $SG85883 ; "subkeytypes[primary] == TYPE_INT"
.text:0000203E                 call    __wassert
.text:00002043 ; ---------------------------------------------------------------------------
.text:00002043                 add     esp, 0Ch
.text:00002046
.text:00002046 loc_2046:                               ; CODE XREF: _conf_set_int_int+25j
.text:00002046                 mov     edx, [ebp+arg_4]
.text:00002049                 cmp     _valuetypes[edx*4], 1
.text:00002051                 jz      short loc_206A
.text:00002053                 push    171h
.text:00002058                 push    offset $SG85885 ; "..\\..\\..\\conf.c"
.text:0000205D                 push    offset $SG85886 ; "valuetypes[primary] == TYPE_INT"
.text:00002062                 call    __wassert
.text:00002067 ; ---------------------------------------------------------------------------
.text:00002067                 add     esp, 0Ch
.text:0000206A
.text:0000206A loc_206A:                               ; CODE XREF: _conf_set_int_int+49j
.text:0000206A                 mov     ecx, [ebp+var_4]
.text:0000206D                 mov     edx, [ebp+arg_4]
.text:00002070                 mov     [ecx], edx
.text:00002072                 mov     eax, [ebp+var_4]
.text:00002075                 mov     ecx, [ebp+arg_8]
.text:00002078                 mov     [eax+4], ecx
.text:0000207B                 mov     edx, [ebp+var_4]
.text:0000207E                 mov     eax, [ebp+arg_C]
.text:00002081                 mov     [edx+8], eax
.text:00002084                 mov     ecx, [ebp+var_4]
.text:00002087                 push    ecx
.text:00002088                 mov     edx, [ebp+arg_0]
.text:0000208B                 push    edx
.text:0000208C                 call    _conf_insert
.text:00002091                 add     esp, 8
.text:00002094                 add     esp, 4
.text:00002097                 cmp     ebp, esp
.text:00002099                 call    __RTC_CheckEsp
.text:0000209E                 mov     esp, ebp
.text:000020A0                 pop     ebp
.text:000020A1                 retn
.text:000020A1 _conf_set_int_int endp
.text:000020A1
.text:000020A1 ; ---------------------------------------------------------------------------
.text:000020A2                 align 8
.text:000020A8
.text:000020A8 ; =============== S U B R O U T I N E =======================================
.text:000020A8
.text:000020A8 ; Attributes: bp-based frame
.text:000020A8
.text:000020A8                 public _conf_set_str
.text:000020A8 _conf_set_str   proc near
.text:000020A8
.text:000020A8 var_4           = dword ptr -4
.text:000020A8 arg_0           = dword ptr  8
.text:000020A8 arg_4           = dword ptr  0Ch
.text:000020A8 arg_8           = dword ptr  10h
.text:000020A8
.text:000020A8                 push    ebp
.text:000020A9                 mov     ebp, esp
.text:000020AB                 push    ecx
.text:000020AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020B3                 push    0Ch
.text:000020B5                 push    1
.text:000020B7                 call    _safemalloc
.text:000020BC                 add     esp, 8
.text:000020BF                 mov     [ebp+var_4], eax
.text:000020C2                 mov     eax, [ebp+arg_4]
.text:000020C5                 cmp     _subkeytypes[eax*4], 0
.text:000020CD                 jz      short loc_20E6
.text:000020CF                 push    17Ch
.text:000020D4                 push    offset $SG85898 ; "..\\..\\..\\conf.c"
.text:000020D9                 push    offset $SG85899 ; "subkeytypes[primary] == TYPE_NONE"
.text:000020DE                 call    __wassert
.text:000020E3 ; ---------------------------------------------------------------------------
.text:000020E3                 add     esp, 0Ch
.text:000020E6
.text:000020E6 loc_20E6:                               ; CODE XREF: _conf_set_str+25j
.text:000020E6                 mov     edx, [ebp+arg_4]
.text:000020E9                 cmp     _valuetypes[edx*4], 2
.text:000020F1                 jz      short loc_210A
.text:000020F3                 push    17Dh
.text:000020F8                 push    offset $SG85901 ; "..\\..\\..\\conf.c"
.text:000020FD                 push    offset $SG85902 ; "valuetypes[primary] == TYPE_STR"
.text:00002102                 call    __wassert
.text:00002107 ; ---------------------------------------------------------------------------
.text:00002107                 add     esp, 0Ch
.text:0000210A
.text:0000210A loc_210A:                               ; CODE XREF: _conf_set_str+49j
.text:0000210A                 mov     ecx, [ebp+var_4]
.text:0000210D                 mov     edx, [ebp+arg_4]
.text:00002110                 mov     [ecx], edx
.text:00002112                 mov     eax, [ebp+arg_8]
.text:00002115                 push    eax
.text:00002116                 call    _dupstr
.text:0000211B                 add     esp, 4
.text:0000211E                 mov     ecx, [ebp+var_4]
.text:00002121                 mov     [ecx+8], eax
.text:00002124                 mov     edx, [ebp+var_4]
.text:00002127                 push    edx
.text:00002128                 mov     eax, [ebp+arg_0]
.text:0000212B                 push    eax
.text:0000212C                 call    _conf_insert
.text:00002131                 add     esp, 8
.text:00002134                 add     esp, 4
.text:00002137                 cmp     ebp, esp
.text:00002139                 call    __RTC_CheckEsp
.text:0000213E                 mov     esp, ebp
.text:00002140                 pop     ebp
.text:00002141                 retn
.text:00002141 _conf_set_str   endp
.text:00002141
.text:00002141 ; ---------------------------------------------------------------------------
.text:00002142                 align 8
.text:00002148
.text:00002148 ; =============== S U B R O U T I N E =======================================
.text:00002148
.text:00002148 ; Attributes: bp-based frame
.text:00002148
.text:00002148                 public _conf_set_str_str
.text:00002148 _conf_set_str_str proc near
.text:00002148
.text:00002148 var_4           = dword ptr -4
.text:00002148 arg_0           = dword ptr  8
.text:00002148 arg_4           = dword ptr  0Ch
.text:00002148 arg_8           = dword ptr  10h
.text:00002148 arg_C           = dword ptr  14h
.text:00002148
.text:00002148                 push    ebp
.text:00002149                 mov     ebp, esp
.text:0000214B                 push    ecx
.text:0000214C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002153                 push    0Ch
.text:00002155                 push    1
.text:00002157                 call    _safemalloc
.text:0000215C                 add     esp, 8
.text:0000215F                 mov     [ebp+var_4], eax
.text:00002162                 mov     eax, [ebp+arg_4]
.text:00002165                 cmp     _subkeytypes[eax*4], 2
.text:0000216D                 jz      short loc_2186
.text:0000216F                 push    188h
.text:00002174                 push    offset $SG85916 ; "..\\..\\..\\conf.c"
.text:00002179                 push    offset $SG85917 ; "subkeytypes[primary] == TYPE_STR"
.text:0000217E                 call    __wassert
.text:00002183 ; ---------------------------------------------------------------------------
.text:00002183                 add     esp, 0Ch
.text:00002186
.text:00002186 loc_2186:                               ; CODE XREF: _conf_set_str_str+25j
.text:00002186                 mov     edx, [ebp+arg_4]
.text:00002189                 cmp     _valuetypes[edx*4], 2
.text:00002191                 jz      short loc_21AA
.text:00002193                 push    189h
.text:00002198                 push    offset $SG85919 ; "..\\..\\..\\conf.c"
.text:0000219D                 push    offset $SG85920 ; "valuetypes[primary] == TYPE_STR"
.text:000021A2                 call    __wassert
.text:000021A7 ; ---------------------------------------------------------------------------
.text:000021A7                 add     esp, 0Ch
.text:000021AA
.text:000021AA loc_21AA:                               ; CODE XREF: _conf_set_str_str+49j
.text:000021AA                 mov     ecx, [ebp+var_4]
.text:000021AD                 mov     edx, [ebp+arg_4]
.text:000021B0                 mov     [ecx], edx
.text:000021B2                 mov     eax, [ebp+arg_8]
.text:000021B5                 push    eax
.text:000021B6                 call    _dupstr
.text:000021BB                 add     esp, 4
.text:000021BE                 mov     ecx, [ebp+var_4]
.text:000021C1                 mov     [ecx+4], eax
.text:000021C4                 mov     edx, [ebp+arg_C]
.text:000021C7                 push    edx
.text:000021C8                 call    _dupstr
.text:000021CD                 add     esp, 4
.text:000021D0                 mov     ecx, [ebp+var_4]
.text:000021D3                 mov     [ecx+8], eax
.text:000021D6                 mov     edx, [ebp+var_4]
.text:000021D9                 push    edx
.text:000021DA                 mov     eax, [ebp+arg_0]
.text:000021DD                 push    eax
.text:000021DE                 call    _conf_insert
.text:000021E3                 add     esp, 8
.text:000021E6                 add     esp, 4
.text:000021E9                 cmp     ebp, esp
.text:000021EB                 call    __RTC_CheckEsp
.text:000021F0                 mov     esp, ebp
.text:000021F2                 pop     ebp
.text:000021F3                 retn
.text:000021F3 _conf_set_str_str endp
.text:000021F3
.text:000021F3 ; ---------------------------------------------------------------------------
.text:000021F4                 align 8
.text:000021F8
.text:000021F8 ; =============== S U B R O U T I N E =======================================
.text:000021F8
.text:000021F8 ; Attributes: bp-based frame
.text:000021F8
.text:000021F8                 public _conf_del_str_str
.text:000021F8 _conf_del_str_str proc near
.text:000021F8
.text:000021F8 var_14          = dword ptr -14h
.text:000021F8 var_10          = dword ptr -10h
.text:000021F8 var_C           = dword ptr -0Ch
.text:000021F8 var_8           = dword ptr -8
.text:000021F8 var_4           = dword ptr -4
.text:000021F8 arg_0           = dword ptr  8
.text:000021F8 arg_4           = dword ptr  0Ch
.text:000021F8 arg_8           = dword ptr  10h
.text:000021F8
.text:000021F8                 push    ebp
.text:000021F9                 mov     ebp, esp
.text:000021FB                 sub     esp, 14h
.text:000021FE                 mov     eax, 0CCCCCCCCh
.text:00002203                 mov     [ebp+var_14], eax
.text:00002206                 mov     [ebp+var_10], eax
.text:00002209                 mov     [ebp+var_C], eax
.text:0000220C                 mov     [ebp+var_8], eax
.text:0000220F                 mov     [ebp+var_4], eax
.text:00002212                 mov     eax, [ebp+arg_4]
.text:00002215                 cmp     _subkeytypes[eax*4], 2
.text:0000221D                 jz      short loc_2236
.text:0000221F                 push    195h
.text:00002224                 push    offset $SG85931 ; "..\\..\\..\\conf.c"
.text:00002229                 push    offset $SG85932 ; "subkeytypes[primary] == TYPE_STR"
.text:0000222E                 call    __wassert
.text:00002233 ; ---------------------------------------------------------------------------
.text:00002233                 add     esp, 0Ch
.text:00002236
.text:00002236 loc_2236:                               ; CODE XREF: _conf_del_str_str+25j
.text:00002236                 mov     edx, [ebp+arg_4]
.text:00002239                 cmp     _valuetypes[edx*4], 2
.text:00002241                 jz      short loc_225A
.text:00002243                 push    196h
.text:00002248                 push    offset $SG85934 ; "..\\..\\..\\conf.c"
.text:0000224D                 push    offset $SG85935 ; "valuetypes[primary] == TYPE_STR"
.text:00002252                 call    __wassert
.text:00002257 ; ---------------------------------------------------------------------------
.text:00002257                 add     esp, 0Ch
.text:0000225A
.text:0000225A loc_225A:                               ; CODE XREF: _conf_del_str_str+49j
.text:0000225A                 mov     ecx, [ebp+arg_4]
.text:0000225D                 mov     [ebp+var_C], ecx
.text:00002260                 mov     edx, [ebp+arg_8]
.text:00002263                 mov     [ebp+var_8], edx
.text:00002266                 push    0
.text:00002268                 lea     eax, [ebp+var_C]
.text:0000226B                 push    eax
.text:0000226C                 mov     ecx, [ebp+arg_0]
.text:0000226F                 mov     edx, [ecx]
.text:00002271                 push    edx
.text:00002272                 call    _find234
.text:00002277                 add     esp, 0Ch
.text:0000227A                 mov     [ebp+var_14], eax
.text:0000227D                 cmp     [ebp+var_14], 0
.text:00002281                 jz      short loc_22A1
.text:00002283                 mov     eax, [ebp+var_14]
.text:00002286                 push    eax
.text:00002287                 mov     ecx, [ebp+arg_0]
.text:0000228A                 mov     edx, [ecx]
.text:0000228C                 push    edx
.text:0000228D                 call    _del234
.text:00002292                 add     esp, 8
.text:00002295                 mov     eax, [ebp+var_14]
.text:00002298                 push    eax
.text:00002299                 call    _free_entry
.text:0000229E                 add     esp, 4
.text:000022A1
.text:000022A1 loc_22A1:                               ; CODE XREF: _conf_del_str_str+89j
.text:000022A1                 push    edx
.text:000022A2                 mov     ecx, ebp
.text:000022A4                 push    eax
.text:000022A5                 lea     edx, $LN8_5
.text:000022AB                 call    @_RTC_CheckStackVars@8
.text:000022B0                 pop     eax
.text:000022B1                 pop     edx
.text:000022B2                 add     esp, 14h
.text:000022B5                 cmp     ebp, esp
.text:000022B7                 call    __RTC_CheckEsp
.text:000022BC                 mov     esp, ebp
.text:000022BE                 pop     ebp
.text:000022BF                 retn
.text:000022BF _conf_del_str_str endp
.text:000022BF
.text:000022BF ; ---------------------------------------------------------------------------
.text:000022C0 $LN8_5          dd 1                    ; DATA XREF: _conf_del_str_str+ADo
.text:000022C4                 dd offset $LN7_5
.text:000022C8 $LN7_5          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000022C4o
.text:000022D0                 dd offset $LN6_4
.text:000022D4 $LN6_4          dd 79656Bh              ; DATA XREF: .text:000022D0o
.text:000022D8
.text:000022D8 ; =============== S U B R O U T I N E =======================================
.text:000022D8
.text:000022D8 ; Attributes: bp-based frame
.text:000022D8
.text:000022D8                 public _conf_set_filename
.text:000022D8 _conf_set_filename proc near
.text:000022D8
.text:000022D8 var_4           = dword ptr -4
.text:000022D8 arg_0           = dword ptr  8
.text:000022D8 arg_4           = dword ptr  0Ch
.text:000022D8 arg_8           = dword ptr  10h
.text:000022D8
.text:000022D8                 push    ebp
.text:000022D9                 mov     ebp, esp
.text:000022DB                 push    ecx
.text:000022DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022E3                 push    0Ch
.text:000022E5                 push    1
.text:000022E7                 call    _safemalloc
.text:000022EC                 add     esp, 8
.text:000022EF                 mov     [ebp+var_4], eax
.text:000022F2                 mov     eax, [ebp+arg_4]
.text:000022F5                 cmp     _subkeytypes[eax*4], 0
.text:000022FD                 jz      short loc_2316
.text:000022FF                 push    1A4h
.text:00002304                 push    offset $SG85950 ; "..\\..\\..\\conf.c"
.text:00002309                 push    offset $SG85951 ; "subkeytypes[primary] == TYPE_NONE"
.text:0000230E                 call    __wassert
.text:00002313 ; ---------------------------------------------------------------------------
.text:00002313                 add     esp, 0Ch
.text:00002316
.text:00002316 loc_2316:                               ; CODE XREF: _conf_set_filename+25j
.text:00002316                 mov     edx, [ebp+arg_4]
.text:00002319                 cmp     _valuetypes[edx*4], 3
.text:00002321                 jz      short loc_233A
.text:00002323                 push    1A5h
.text:00002328                 push    offset $SG85953 ; "..\\..\\..\\conf.c"
.text:0000232D                 push    offset $SG85954 ; "valuetypes[primary] == TYPE_FILENAME"
.text:00002332                 call    __wassert
.text:00002337 ; ---------------------------------------------------------------------------
.text:00002337                 add     esp, 0Ch
.text:0000233A
.text:0000233A loc_233A:                               ; CODE XREF: _conf_set_filename+49j
.text:0000233A                 mov     ecx, [ebp+var_4]
.text:0000233D                 mov     edx, [ebp+arg_4]
.text:00002340                 mov     [ecx], edx
.text:00002342                 mov     eax, [ebp+arg_8]
.text:00002345                 push    eax
.text:00002346                 call    _filename_copy
.text:0000234B                 add     esp, 4
.text:0000234E                 mov     ecx, [ebp+var_4]
.text:00002351                 mov     [ecx+8], eax
.text:00002354                 mov     edx, [ebp+var_4]
.text:00002357                 push    edx
.text:00002358                 mov     eax, [ebp+arg_0]
.text:0000235B                 push    eax
.text:0000235C                 call    _conf_insert
.text:00002361                 add     esp, 8
.text:00002364                 add     esp, 4
.text:00002367                 cmp     ebp, esp
.text:00002369                 call    __RTC_CheckEsp
.text:0000236E                 mov     esp, ebp
.text:00002370                 pop     ebp
.text:00002371                 retn
.text:00002371 _conf_set_filename endp
.text:00002371
.text:00002371 ; ---------------------------------------------------------------------------
.text:00002372                 align 8
.text:00002378
.text:00002378 ; =============== S U B R O U T I N E =======================================
.text:00002378
.text:00002378 ; Attributes: bp-based frame
.text:00002378
.text:00002378                 public _conf_set_fontspec
.text:00002378 _conf_set_fontspec proc near
.text:00002378
.text:00002378 var_4           = dword ptr -4
.text:00002378 arg_0           = dword ptr  8
.text:00002378 arg_4           = dword ptr  0Ch
.text:00002378 arg_8           = dword ptr  10h
.text:00002378
.text:00002378                 push    ebp
.text:00002379                 mov     ebp, esp
.text:0000237B                 push    ecx
.text:0000237C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002383                 push    0Ch
.text:00002385                 push    1
.text:00002387                 call    _safemalloc
.text:0000238C                 add     esp, 8
.text:0000238F                 mov     [ebp+var_4], eax
.text:00002392                 mov     eax, [ebp+arg_4]
.text:00002395                 cmp     _subkeytypes[eax*4], 0
.text:0000239D                 jz      short loc_23B6
.text:0000239F                 push    1AFh
.text:000023A4                 push    offset $SG85966 ; "..\\..\\..\\conf.c"
.text:000023A9                 push    offset $SG85967 ; "subkeytypes[primary] == TYPE_NONE"
.text:000023AE                 call    __wassert
.text:000023B3 ; ---------------------------------------------------------------------------
.text:000023B3                 add     esp, 0Ch
.text:000023B6
.text:000023B6 loc_23B6:                               ; CODE XREF: _conf_set_fontspec+25j
.text:000023B6                 mov     edx, [ebp+arg_4]
.text:000023B9                 cmp     _valuetypes[edx*4], 4
.text:000023C1                 jz      short loc_23DA
.text:000023C3                 push    1B0h
.text:000023C8                 push    offset $SG85969 ; "..\\..\\..\\conf.c"
.text:000023CD                 push    offset $SG85970 ; "valuetypes[primary] == TYPE_FONT"
.text:000023D2                 call    __wassert
.text:000023D7 ; ---------------------------------------------------------------------------
.text:000023D7                 add     esp, 0Ch
.text:000023DA
.text:000023DA loc_23DA:                               ; CODE XREF: _conf_set_fontspec+49j
.text:000023DA                 mov     ecx, [ebp+var_4]
.text:000023DD                 mov     edx, [ebp+arg_4]
.text:000023E0                 mov     [ecx], edx
.text:000023E2                 mov     eax, [ebp+arg_8]
.text:000023E5                 push    eax
.text:000023E6                 call    _fontspec_copy
.text:000023EB                 add     esp, 4
.text:000023EE                 mov     ecx, [ebp+var_4]
.text:000023F1                 mov     [ecx+8], eax
.text:000023F4                 mov     edx, [ebp+var_4]
.text:000023F7                 push    edx
.text:000023F8                 mov     eax, [ebp+arg_0]
.text:000023FB                 push    eax
.text:000023FC                 call    _conf_insert
.text:00002401                 add     esp, 8
.text:00002404                 add     esp, 4
.text:00002407                 cmp     ebp, esp
.text:00002409                 call    __RTC_CheckEsp
.text:0000240E                 mov     esp, ebp
.text:00002410                 pop     ebp
.text:00002411                 retn
.text:00002411 _conf_set_fontspec endp
.text:00002411
.text:00002411 ; ---------------------------------------------------------------------------
.text:00002412                 align 8
.text:00002418
.text:00002418 ; =============== S U B R O U T I N E =======================================
.text:00002418
.text:00002418 ; Attributes: bp-based frame
.text:00002418
.text:00002418                 public _conf_serialised_size
.text:00002418 _conf_serialised_size proc near
.text:00002418
.text:00002418 var_14          = dword ptr -14h
.text:00002418 var_10          = dword ptr -10h
.text:00002418 var_C           = dword ptr -0Ch
.text:00002418 var_8           = dword ptr -8
.text:00002418 var_4           = dword ptr -4
.text:00002418 arg_0           = dword ptr  8
.text:00002418
.text:00002418                 push    ebp
.text:00002419                 mov     ebp, esp
.text:0000241B                 sub     esp, 14h
.text:0000241E                 mov     eax, 0CCCCCCCCh
.text:00002423                 mov     [ebp+var_14], eax
.text:00002426                 mov     [ebp+var_10], eax
.text:00002429                 mov     [ebp+var_C], eax
.text:0000242C                 mov     [ebp+var_8], eax
.text:0000242F                 mov     [ebp+var_4], eax
.text:00002432                 mov     [ebp+var_C], 0
.text:00002439                 mov     [ebp+var_4], 0
.text:00002440                 jmp     short loc_244B
.text:00002442 ; ---------------------------------------------------------------------------
.text:00002442
.text:00002442 loc_2442:                               ; CODE XREF: _conf_serialised_size:loc_2532j
.text:00002442                 mov     eax, [ebp+var_4]
.text:00002445                 add     eax, 1
.text:00002448                 mov     [ebp+var_4], eax
.text:0000244B
.text:0000244B loc_244B:                               ; CODE XREF: _conf_serialised_size+28j
.text:0000244B                 mov     ecx, [ebp+var_4]
.text:0000244E                 push    ecx
.text:0000244F                 mov     edx, [ebp+arg_0]
.text:00002452                 mov     eax, [edx]
.text:00002454                 push    eax
.text:00002455                 call    _index234
.text:0000245A                 add     esp, 8
.text:0000245D                 mov     [ebp+var_8], eax
.text:00002460                 cmp     [ebp+var_8], 0
.text:00002464                 jz      loc_2537
.text:0000246A                 mov     ecx, [ebp+var_C]
.text:0000246D                 add     ecx, 4
.text:00002470                 mov     [ebp+var_C], ecx
.text:00002473                 mov     edx, [ebp+var_8]
.text:00002476                 mov     eax, [edx]
.text:00002478                 mov     ecx, _subkeytypes[eax*4]
.text:0000247F                 mov     [ebp+var_10], ecx
.text:00002482                 cmp     [ebp+var_10], 1
.text:00002486                 jz      short loc_2490
.text:00002488                 cmp     [ebp+var_10], 2
.text:0000248C                 jz      short loc_249B
.text:0000248E                 jmp     short loc_24B4
.text:00002490 ; ---------------------------------------------------------------------------
.text:00002490
.text:00002490 loc_2490:                               ; CODE XREF: _conf_serialised_size+6Ej
.text:00002490                 mov     edx, [ebp+var_C]
.text:00002493                 add     edx, 4
.text:00002496                 mov     [ebp+var_C], edx
.text:00002499                 jmp     short loc_24B4
.text:0000249B ; ---------------------------------------------------------------------------
.text:0000249B
.text:0000249B loc_249B:                               ; CODE XREF: _conf_serialised_size+74j
.text:0000249B                 mov     eax, [ebp+var_8]
.text:0000249E                 mov     ecx, [eax+4]
.text:000024A1                 push    ecx             ; char *
.text:000024A2                 call    _strlen
.text:000024A7                 add     esp, 4
.text:000024AA                 mov     edx, [ebp+var_C]
.text:000024AD                 lea     eax, [edx+eax+1]
.text:000024B1                 mov     [ebp+var_C], eax
.text:000024B4
.text:000024B4 loc_24B4:                               ; CODE XREF: _conf_serialised_size+76j
.text:000024B4                                         ; _conf_serialised_size+81j
.text:000024B4                 mov     ecx, [ebp+var_8]
.text:000024B7                 mov     edx, [ecx]
.text:000024B9                 mov     eax, _valuetypes[edx*4]
.text:000024C0                 mov     [ebp+var_14], eax
.text:000024C3                 mov     ecx, [ebp+var_14]
.text:000024C6                 sub     ecx, 1
.text:000024C9                 mov     [ebp+var_14], ecx
.text:000024CC                 cmp     [ebp+var_14], 3 ; switch 4 cases
.text:000024D0                 ja      short loc_2532  ; jumptable 000024D5 default case
.text:000024D2                 mov     edx, [ebp+var_14]
.text:000024D5                 jmp     ds:$LN16[edx*4] ; switch jump
.text:000024DC ; ---------------------------------------------------------------------------
.text:000024DC
.text:000024DC $LN4_0:                                 ; CODE XREF: _conf_serialised_size+BDj
.text:000024DC                                         ; DATA XREF: .text:$LN16o
.text:000024DC                 mov     eax, [ebp+var_C] ; jumptable 000024D5 case 0
.text:000024DF                 add     eax, 4
.text:000024E2                 mov     [ebp+var_C], eax
.text:000024E5                 jmp     short loc_2532  ; jumptable 000024D5 default case
.text:000024E7 ; ---------------------------------------------------------------------------
.text:000024E7
.text:000024E7 $LN3_0:                                 ; CODE XREF: _conf_serialised_size+BDj
.text:000024E7                                         ; DATA XREF: .text:$LN16o
.text:000024E7                 mov     ecx, [ebp+var_8] ; jumptable 000024D5 case 1
.text:000024EA                 mov     edx, [ecx+8]
.text:000024ED                 push    edx             ; char *
.text:000024EE                 call    _strlen
.text:000024F3                 add     esp, 4
.text:000024F6                 mov     ecx, [ebp+var_C]
.text:000024F9                 lea     edx, [ecx+eax+1]
.text:000024FD                 mov     [ebp+var_C], edx
.text:00002500                 jmp     short loc_2532  ; jumptable 000024D5 default case
.text:00002502 ; ---------------------------------------------------------------------------
.text:00002502
.text:00002502 $LN2_0:                                 ; CODE XREF: _conf_serialised_size+BDj
.text:00002502                                         ; DATA XREF: .text:$LN16o
.text:00002502                 push    0               ; jumptable 000024D5 case 2
.text:00002504                 mov     eax, [ebp+var_8]
.text:00002507                 mov     ecx, [eax+8]
.text:0000250A                 push    ecx
.text:0000250B                 call    _filename_serialise
.text:00002510                 add     esp, 8
.text:00002513                 add     eax, [ebp+var_C]
.text:00002516                 mov     [ebp+var_C], eax
.text:00002519                 jmp     short loc_2532  ; jumptable 000024D5 default case
.text:0000251B ; ---------------------------------------------------------------------------
.text:0000251B
.text:0000251B $LN1_0:                                 ; CODE XREF: _conf_serialised_size+BDj
.text:0000251B                                         ; DATA XREF: .text:$LN16o
.text:0000251B                 push    0               ; jumptable 000024D5 case 3
.text:0000251D                 mov     edx, [ebp+var_8]
.text:00002520                 mov     eax, [edx+8]
.text:00002523                 push    eax
.text:00002524                 call    _fontspec_serialise
.text:00002529                 add     esp, 8
.text:0000252C                 add     eax, [ebp+var_C]
.text:0000252F                 mov     [ebp+var_C], eax
.text:00002532
.text:00002532 loc_2532:                               ; CODE XREF: _conf_serialised_size+B8j
.text:00002532                                         ; _conf_serialised_size+CDj ...
.text:00002532                 jmp     loc_2442        ; jumptable 000024D5 default case
.text:00002537 ; ---------------------------------------------------------------------------
.text:00002537
.text:00002537 loc_2537:                               ; CODE XREF: _conf_serialised_size+4Cj
.text:00002537                 mov     ecx, [ebp+var_C]
.text:0000253A                 add     ecx, 4
.text:0000253D                 mov     [ebp+var_C], ecx
.text:00002540                 mov     eax, [ebp+var_C]
.text:00002543                 add     esp, 14h
.text:00002546                 cmp     ebp, esp
.text:00002548                 call    __RTC_CheckEsp
.text:0000254D                 mov     esp, ebp
.text:0000254F                 pop     ebp
.text:00002550                 retn
.text:00002550 _conf_serialised_size endp
.text:00002550
.text:00002550 ; ---------------------------------------------------------------------------
.text:00002551                 align 4
.text:00002554 $LN16           dd offset $LN4_0        ; DATA XREF: _conf_serialised_size+BDr
.text:00002554                 dd offset $LN3_0        ; jump table for switch statement
.text:00002554                 dd offset $LN2_0
.text:00002554                 dd offset $LN1_0
.text:00002564                 align 8
.text:00002568
.text:00002568 ; =============== S U B R O U T I N E =======================================
.text:00002568
.text:00002568 ; Attributes: bp-based frame
.text:00002568
.text:00002568                 public _conf_serialise
.text:00002568 _conf_serialise proc near
.text:00002568
.text:00002568 var_18          = dword ptr -18h
.text:00002568 var_14          = dword ptr -14h
.text:00002568 var_10          = dword ptr -10h
.text:00002568 var_C           = dword ptr -0Ch
.text:00002568 var_8           = dword ptr -8
.text:00002568 var_4           = dword ptr -4
.text:00002568 arg_0           = dword ptr  8
.text:00002568 arg_4           = dword ptr  0Ch
.text:00002568
.text:00002568                 push    ebp
.text:00002569                 mov     ebp, esp
.text:0000256B                 sub     esp, 18h
.text:0000256E                 mov     eax, 0CCCCCCCCh
.text:00002573                 mov     [ebp+var_18], eax
.text:00002576                 mov     [ebp+var_14], eax
.text:00002579                 mov     [ebp+var_10], eax
.text:0000257C                 mov     [ebp+var_C], eax
.text:0000257F                 mov     [ebp+var_8], eax
.text:00002582                 mov     [ebp+var_4], eax
.text:00002585                 mov     eax, [ebp+arg_4]
.text:00002588                 mov     [ebp+var_4], eax
.text:0000258B                 mov     [ebp+var_8], 0
.text:00002592                 jmp     short loc_259D
.text:00002594 ; ---------------------------------------------------------------------------
.text:00002594
.text:00002594 loc_2594:                               ; CODE XREF: _conf_serialise:loc_2783j
.text:00002594                 mov     ecx, [ebp+var_8]
.text:00002597                 add     ecx, 1
.text:0000259A                 mov     [ebp+var_8], ecx
.text:0000259D
.text:0000259D loc_259D:                               ; CODE XREF: _conf_serialise+2Aj
.text:0000259D                 mov     edx, [ebp+var_8]
.text:000025A0                 push    edx
.text:000025A1                 mov     eax, [ebp+arg_0]
.text:000025A4                 mov     ecx, [eax]
.text:000025A6                 push    ecx
.text:000025A7                 call    _index234
.text:000025AC                 add     esp, 8
.text:000025AF                 mov     [ebp+var_10], eax
.text:000025B2                 cmp     [ebp+var_10], 0
.text:000025B6                 jz      loc_2788
.text:000025BC                 mov     edx, [ebp+var_10]
.text:000025BF                 mov     eax, [edx]
.text:000025C1                 sar     eax, 18h
.text:000025C4                 mov     ecx, [ebp+var_4]
.text:000025C7                 mov     [ecx], al
.text:000025C9                 mov     edx, [ebp+var_10]
.text:000025CC                 mov     eax, [edx]
.text:000025CE                 sar     eax, 10h
.text:000025D1                 mov     ecx, [ebp+var_4]
.text:000025D4                 mov     [ecx+1], al
.text:000025D7                 mov     edx, [ebp+var_10]
.text:000025DA                 mov     eax, [edx]
.text:000025DC                 sar     eax, 8
.text:000025DF                 mov     ecx, [ebp+var_4]
.text:000025E2                 mov     [ecx+2], al
.text:000025E5                 mov     edx, [ebp+var_4]
.text:000025E8                 mov     eax, [ebp+var_10]
.text:000025EB                 mov     cl, [eax]
.text:000025ED                 mov     [edx+3], cl
.text:000025F0                 mov     edx, [ebp+var_4]
.text:000025F3                 add     edx, 4
.text:000025F6                 mov     [ebp+var_4], edx
.text:000025F9                 mov     eax, [ebp+var_10]
.text:000025FC                 mov     ecx, [eax]
.text:000025FE                 mov     edx, _subkeytypes[ecx*4]
.text:00002605                 mov     [ebp+var_14], edx
.text:00002608                 cmp     [ebp+var_14], 1
.text:0000260C                 jz      short loc_2619
.text:0000260E                 cmp     [ebp+var_14], 2
.text:00002612                 jz      short loc_265C
.text:00002614                 jmp     loc_269D
.text:00002619 ; ---------------------------------------------------------------------------
.text:00002619
.text:00002619 loc_2619:                               ; CODE XREF: _conf_serialise+A4j
.text:00002619                 mov     eax, [ebp+var_10]
.text:0000261C                 mov     ecx, [eax+4]
.text:0000261F                 sar     ecx, 18h
.text:00002622                 mov     edx, [ebp+var_4]
.text:00002625                 mov     [edx], cl
.text:00002627                 mov     eax, [ebp+var_10]
.text:0000262A                 mov     ecx, [eax+4]
.text:0000262D                 sar     ecx, 10h
.text:00002630                 mov     edx, [ebp+var_4]
.text:00002633                 mov     [edx+1], cl
.text:00002636                 mov     eax, [ebp+var_10]
.text:00002639                 mov     ecx, [eax+4]
.text:0000263C                 sar     ecx, 8
.text:0000263F                 mov     edx, [ebp+var_4]
.text:00002642                 mov     [edx+2], cl
.text:00002645                 mov     eax, [ebp+var_4]
.text:00002648                 mov     ecx, [ebp+var_10]
.text:0000264B                 mov     dl, [ecx+4]
.text:0000264E                 mov     [eax+3], dl
.text:00002651                 mov     eax, [ebp+var_4]
.text:00002654                 add     eax, 4
.text:00002657                 mov     [ebp+var_4], eax
.text:0000265A                 jmp     short loc_269D
.text:0000265C ; ---------------------------------------------------------------------------
.text:0000265C
.text:0000265C loc_265C:                               ; CODE XREF: _conf_serialise+AAj
.text:0000265C                 mov     ecx, [ebp+var_10]
.text:0000265F                 mov     edx, [ecx+4]
.text:00002662                 push    edx             ; char *
.text:00002663                 call    _strlen
.text:00002668                 add     esp, 4
.text:0000266B                 mov     [ebp+var_C], eax
.text:0000266E                 mov     eax, [ebp+var_C]
.text:00002671                 push    eax             ; size_t
.text:00002672                 mov     ecx, [ebp+var_10]
.text:00002675                 mov     edx, [ecx+4]
.text:00002678                 push    edx             ; void *
.text:00002679                 mov     eax, [ebp+var_4]
.text:0000267C                 push    eax             ; void *
.text:0000267D                 call    _memcpy
.text:00002682                 add     esp, 0Ch
.text:00002685                 mov     ecx, [ebp+var_4]
.text:00002688                 add     ecx, [ebp+var_C]
.text:0000268B                 mov     [ebp+var_4], ecx
.text:0000268E                 mov     edx, [ebp+var_4]
.text:00002691                 mov     byte ptr [edx], 0
.text:00002694                 mov     eax, [ebp+var_4]
.text:00002697                 add     eax, 1
.text:0000269A                 mov     [ebp+var_4], eax
.text:0000269D
.text:0000269D loc_269D:                               ; CODE XREF: _conf_serialise+ACj
.text:0000269D                                         ; _conf_serialise+F2j
.text:0000269D                 mov     ecx, [ebp+var_10]
.text:000026A0                 mov     edx, [ecx]
.text:000026A2                 mov     eax, _valuetypes[edx*4]
.text:000026A9                 mov     [ebp+var_18], eax
.text:000026AC                 mov     ecx, [ebp+var_18]
.text:000026AF                 sub     ecx, 1
.text:000026B2                 mov     [ebp+var_18], ecx
.text:000026B5                 cmp     [ebp+var_18], 3 ; switch 4 cases
.text:000026B9                 ja      loc_2783        ; jumptable 000026C2 default case
.text:000026BF                 mov     edx, [ebp+var_18]
.text:000026C2                 jmp     ds:$LN16_0[edx*4] ; switch jump
.text:000026C9 ; ---------------------------------------------------------------------------
.text:000026C9
.text:000026C9 $LN4_1:                                 ; CODE XREF: _conf_serialise+15Aj
.text:000026C9                                         ; DATA XREF: .text:$LN16_0o
.text:000026C9                 mov     eax, [ebp+var_10] ; jumptable 000026C2 case 0
.text:000026CC                 mov     ecx, [eax+8]
.text:000026CF                 sar     ecx, 18h
.text:000026D2                 mov     edx, [ebp+var_4]
.text:000026D5                 mov     [edx], cl
.text:000026D7                 mov     eax, [ebp+var_10]
.text:000026DA                 mov     ecx, [eax+8]
.text:000026DD                 sar     ecx, 10h
.text:000026E0                 mov     edx, [ebp+var_4]
.text:000026E3                 mov     [edx+1], cl
.text:000026E6                 mov     eax, [ebp+var_10]
.text:000026E9                 mov     ecx, [eax+8]
.text:000026EC                 sar     ecx, 8
.text:000026EF                 mov     edx, [ebp+var_4]
.text:000026F2                 mov     [edx+2], cl
.text:000026F5                 mov     eax, [ebp+var_4]
.text:000026F8                 mov     ecx, [ebp+var_10]
.text:000026FB                 mov     dl, [ecx+8]
.text:000026FE                 mov     [eax+3], dl
.text:00002701                 mov     eax, [ebp+var_4]
.text:00002704                 add     eax, 4
.text:00002707                 mov     [ebp+var_4], eax
.text:0000270A                 jmp     short loc_2783  ; jumptable 000026C2 default case
.text:0000270C ; ---------------------------------------------------------------------------
.text:0000270C
.text:0000270C $LN3_1:                                 ; CODE XREF: _conf_serialise+15Aj
.text:0000270C                                         ; DATA XREF: .text:$LN16_0o
.text:0000270C                 mov     ecx, [ebp+var_10] ; jumptable 000026C2 case 1
.text:0000270F                 mov     edx, [ecx+8]
.text:00002712                 push    edx             ; char *
.text:00002713                 call    _strlen
.text:00002718                 add     esp, 4
.text:0000271B                 mov     [ebp+var_C], eax
.text:0000271E                 mov     eax, [ebp+var_C]
.text:00002721                 push    eax             ; size_t
.text:00002722                 mov     ecx, [ebp+var_10]
.text:00002725                 mov     edx, [ecx+8]
.text:00002728                 push    edx             ; void *
.text:00002729                 mov     eax, [ebp+var_4]
.text:0000272C                 push    eax             ; void *
.text:0000272D                 call    _memcpy
.text:00002732                 add     esp, 0Ch
.text:00002735                 mov     ecx, [ebp+var_4]
.text:00002738                 add     ecx, [ebp+var_C]
.text:0000273B                 mov     [ebp+var_4], ecx
.text:0000273E                 mov     edx, [ebp+var_4]
.text:00002741                 mov     byte ptr [edx], 0
.text:00002744                 mov     eax, [ebp+var_4]
.text:00002747                 add     eax, 1
.text:0000274A                 mov     [ebp+var_4], eax
.text:0000274D                 jmp     short loc_2783  ; jumptable 000026C2 default case
.text:0000274F ; ---------------------------------------------------------------------------
.text:0000274F
.text:0000274F $LN2_1:                                 ; CODE XREF: _conf_serialise+15Aj
.text:0000274F                                         ; DATA XREF: .text:$LN16_0o
.text:0000274F                 mov     ecx, [ebp+var_4] ; jumptable 000026C2 case 2
.text:00002752                 push    ecx
.text:00002753                 mov     edx, [ebp+var_10]
.text:00002756                 mov     eax, [edx+8]
.text:00002759                 push    eax
.text:0000275A                 call    _filename_serialise
.text:0000275F                 add     esp, 8
.text:00002762                 add     eax, [ebp+var_4]
.text:00002765                 mov     [ebp+var_4], eax
.text:00002768                 jmp     short loc_2783  ; jumptable 000026C2 default case
.text:0000276A ; ---------------------------------------------------------------------------
.text:0000276A
.text:0000276A $LN1_1:                                 ; CODE XREF: _conf_serialise+15Aj
.text:0000276A                                         ; DATA XREF: .text:$LN16_0o
.text:0000276A                 mov     ecx, [ebp+var_4] ; jumptable 000026C2 case 3
.text:0000276D                 push    ecx
.text:0000276E                 mov     edx, [ebp+var_10]
.text:00002771                 mov     eax, [edx+8]
.text:00002774                 push    eax
.text:00002775                 call    _fontspec_serialise
.text:0000277A                 add     esp, 8
.text:0000277D                 add     eax, [ebp+var_4]
.text:00002780                 mov     [ebp+var_4], eax
.text:00002783
.text:00002783 loc_2783:                               ; CODE XREF: _conf_serialise+151j
.text:00002783                                         ; _conf_serialise+1A2j ...
.text:00002783                 jmp     loc_2594        ; jumptable 000026C2 default case
.text:00002788 ; ---------------------------------------------------------------------------
.text:00002788
.text:00002788 loc_2788:                               ; CODE XREF: _conf_serialise+4Ej
.text:00002788                 mov     ecx, [ebp+var_4]
.text:0000278B                 mov     byte ptr [ecx], 0FFh
.text:0000278E                 mov     edx, [ebp+var_4]
.text:00002791                 mov     byte ptr [edx+1], 0FFh
.text:00002795                 mov     eax, [ebp+var_4]
.text:00002798                 mov     byte ptr [eax+2], 0FFh
.text:0000279C                 mov     ecx, [ebp+var_4]
.text:0000279F                 mov     byte ptr [ecx+3], 0FFh
.text:000027A3                 add     esp, 18h
.text:000027A6                 cmp     ebp, esp
.text:000027A8                 call    __RTC_CheckEsp
.text:000027AD                 mov     esp, ebp
.text:000027AF                 pop     ebp
.text:000027B0                 retn
.text:000027B0 _conf_serialise endp
.text:000027B0
.text:000027B0 ; ---------------------------------------------------------------------------
.text:000027B1                 align 4
.text:000027B4 $LN16_0         dd offset $LN4_1        ; DATA XREF: _conf_serialise+15Ar
.text:000027B4                 dd offset $LN3_1        ; jump table for switch statement
.text:000027B4                 dd offset $LN2_1
.text:000027B4                 dd offset $LN1_1
.text:000027C4                 align 8
.text:000027C8
.text:000027C8 ; =============== S U B R O U T I N E =======================================
.text:000027C8
.text:000027C8 ; Attributes: bp-based frame
.text:000027C8
.text:000027C8 ; int __cdecl conf_deserialise(int, int, size_t)
.text:000027C8                 public _conf_deserialise
.text:000027C8 _conf_deserialise proc near
.text:000027C8
.text:000027C8 var_28          = dword ptr -28h
.text:000027C8 var_24          = dword ptr -24h
.text:000027C8 var_20          = dword ptr -20h
.text:000027C8 var_18          = dword ptr -18h
.text:000027C8 var_10          = dword ptr -10h
.text:000027C8 var_C           = dword ptr -0Ch
.text:000027C8 var_8           = dword ptr -8
.text:000027C8 var_4           = dword ptr -4
.text:000027C8 arg_0           = dword ptr  8
.text:000027C8 arg_4           = dword ptr  0Ch
.text:000027C8 arg_8           = dword ptr  10h
.text:000027C8
.text:000027C8                 push    ebp
.text:000027C9                 mov     ebp, esp
.text:000027CB                 sub     esp, 28h
.text:000027CE                 push    edi
.text:000027CF                 lea     edi, [ebp+var_28]
.text:000027D2                 mov     ecx, 0Ah
.text:000027D7                 mov     eax, 0CCCCCCCCh
.text:000027DC                 rep stosd
.text:000027DE                 mov     eax, [ebp+arg_4]
.text:000027E1                 mov     [ebp+var_4], eax
.text:000027E4                 mov     ecx, [ebp+var_4]
.text:000027E7                 mov     [ebp+var_8], ecx
.text:000027EA
.text:000027EA loc_27EA:                               ; CODE XREF: _conf_deserialise+36Fj
.text:000027EA                 cmp     [ebp+arg_8], 4
.text:000027EE                 jl      $done$86075
.text:000027F4                 mov     edx, [ebp+var_4]
.text:000027F7                 movzx   eax, byte ptr [edx]
.text:000027FA                 shl     eax, 18h
.text:000027FD                 mov     ecx, [ebp+var_4]
.text:00002800                 movzx   edx, byte ptr [ecx+1]
.text:00002804                 shl     edx, 10h
.text:00002807                 or      eax, edx
.text:00002809                 mov     ecx, [ebp+var_4]
.text:0000280C                 movzx   edx, byte ptr [ecx+2]
.text:00002810                 shl     edx, 8
.text:00002813                 or      eax, edx
.text:00002815                 mov     ecx, [ebp+var_4]
.text:00002818                 movzx   edx, byte ptr [ecx+3]
.text:0000281C                 or      eax, edx
.text:0000281E                 mov     [ebp+var_10], eax
.text:00002821                 mov     eax, [ebp+var_4]
.text:00002824                 add     eax, 4
.text:00002827                 mov     [ebp+var_4], eax
.text:0000282A                 mov     ecx, [ebp+arg_8]
.text:0000282D                 sub     ecx, 4
.text:00002830                 mov     [ebp+arg_8], ecx
.text:00002833                 cmp     [ebp+var_10], 0B2h ; '¦'
.text:0000283A                 jb      short loc_2841
.text:0000283C                 jmp     $done$86075
.text:00002841 ; ---------------------------------------------------------------------------
.text:00002841
.text:00002841 loc_2841:                               ; CODE XREF: _conf_deserialise+72j
.text:00002841                 push    0Ch
.text:00002843                 push    1
.text:00002845                 call    _safemalloc
.text:0000284A                 add     esp, 8
.text:0000284D                 mov     [ebp+var_C], eax
.text:00002850                 mov     edx, [ebp+var_C]
.text:00002853                 mov     eax, [ebp+var_10]
.text:00002856                 mov     [edx], eax
.text:00002858                 mov     ecx, [ebp+var_C]
.text:0000285B                 mov     edx, [ecx]
.text:0000285D                 mov     eax, _subkeytypes[edx*4]
.text:00002864                 mov     [ebp+var_24], eax
.text:00002867                 cmp     [ebp+var_24], 1
.text:0000286B                 jz      short loc_2878
.text:0000286D                 cmp     [ebp+var_24], 2
.text:00002871                 jz      short loc_28DC
.text:00002873                 jmp     loc_2934
.text:00002878 ; ---------------------------------------------------------------------------
.text:00002878
.text:00002878 loc_2878:                               ; CODE XREF: _conf_deserialise+A3j
.text:00002878                 cmp     [ebp+arg_8], 4
.text:0000287C                 jge     short loc_288F
.text:0000287E                 mov     ecx, [ebp+var_C]
.text:00002881                 push    ecx
.text:00002882                 call    _safefree
.text:00002887                 add     esp, 4
.text:0000288A                 jmp     $done$86075
.text:0000288F ; ---------------------------------------------------------------------------
.text:0000288F
.text:0000288F loc_288F:                               ; CODE XREF: _conf_deserialise+B4j
.text:0000288F                 mov     edx, [ebp+var_4]
.text:00002892                 movzx   eax, byte ptr [edx]
.text:00002895                 shl     eax, 18h
.text:00002898                 mov     ecx, [ebp+var_4]
.text:0000289B                 movzx   edx, byte ptr [ecx+1]
.text:0000289F                 shl     edx, 10h
.text:000028A2                 or      eax, edx
.text:000028A4                 mov     ecx, [ebp+var_4]
.text:000028A7                 movzx   edx, byte ptr [ecx+2]
.text:000028AB                 shl     edx, 8
.text:000028AE                 or      eax, edx
.text:000028B0                 mov     ecx, [ebp+var_4]
.text:000028B3                 movzx   edx, byte ptr [ecx+3]
.text:000028B7                 or      eax, edx
.text:000028B9                 push    eax
.text:000028BA                 call    _toint
.text:000028BF                 add     esp, 4
.text:000028C2                 mov     ecx, [ebp+var_C]
.text:000028C5                 mov     [ecx+4], eax
.text:000028C8                 mov     edx, [ebp+var_4]
.text:000028CB                 add     edx, 4
.text:000028CE                 mov     [ebp+var_4], edx
.text:000028D1                 mov     eax, [ebp+arg_8]
.text:000028D4                 sub     eax, 4
.text:000028D7                 mov     [ebp+arg_8], eax
.text:000028DA                 jmp     short loc_2934
.text:000028DC ; ---------------------------------------------------------------------------
.text:000028DC
.text:000028DC loc_28DC:                               ; CODE XREF: _conf_deserialise+A9j
.text:000028DC                 mov     ecx, [ebp+arg_8]
.text:000028DF                 push    ecx             ; size_t
.text:000028E0                 push    0               ; int
.text:000028E2                 mov     edx, [ebp+var_4]
.text:000028E5                 push    edx             ; void *
.text:000028E6                 call    _memchr
.text:000028EB                 add     esp, 0Ch
.text:000028EE                 mov     [ebp+var_20], eax
.text:000028F1                 cmp     [ebp+var_20], 0
.text:000028F5                 jnz     short loc_2908
.text:000028F7                 mov     eax, [ebp+var_C]
.text:000028FA                 push    eax
.text:000028FB                 call    _safefree
.text:00002900                 add     esp, 4
.text:00002903                 jmp     $done$86075
.text:00002908 ; ---------------------------------------------------------------------------
.text:00002908
.text:00002908 loc_2908:                               ; CODE XREF: _conf_deserialise+12Dj
.text:00002908                 mov     ecx, [ebp+var_4]
.text:0000290B                 push    ecx
.text:0000290C                 call    _dupstr
.text:00002911                 add     esp, 4
.text:00002914                 mov     edx, [ebp+var_C]
.text:00002917                 mov     [edx+4], eax
.text:0000291A                 mov     eax, [ebp+var_20]
.text:0000291D                 add     eax, 1
.text:00002920                 sub     eax, [ebp+var_4]
.text:00002923                 mov     ecx, [ebp+arg_8]
.text:00002926                 sub     ecx, eax
.text:00002928                 mov     [ebp+arg_8], ecx
.text:0000292B                 mov     edx, [ebp+var_20]
.text:0000292E                 add     edx, 1
.text:00002931                 mov     [ebp+var_4], edx
.text:00002934
.text:00002934 loc_2934:                               ; CODE XREF: _conf_deserialise+ABj
.text:00002934                                         ; _conf_deserialise+112j
.text:00002934                 mov     eax, [ebp+var_C]
.text:00002937                 mov     ecx, [eax]
.text:00002939                 mov     edx, _valuetypes[ecx*4]
.text:00002940                 mov     [ebp+var_28], edx
.text:00002943                 mov     eax, [ebp+var_28]
.text:00002946                 sub     eax, 1
.text:00002949                 mov     [ebp+var_28], eax
.text:0000294C                 cmp     [ebp+var_28], 3 ; switch 4 cases
.text:00002950                 ja      loc_2B27        ; jumptable 00002959 default case
.text:00002956                 mov     ecx, [ebp+var_28]
.text:00002959                 jmp     ds:$LN29[ecx*4] ; switch jump
.text:00002960 ; ---------------------------------------------------------------------------
.text:00002960
.text:00002960 $LN12_0:                                ; CODE XREF: _conf_deserialise+191j
.text:00002960                                         ; DATA XREF: .text:$LN29o
.text:00002960                 cmp     [ebp+arg_8], 4  ; jumptable 00002959 case 0
.text:00002964                 jge     short loc_2995
.text:00002966                 mov     edx, [ebp+var_C]
.text:00002969                 mov     eax, [edx]
.text:0000296B                 cmp     _subkeytypes[eax*4], 2
.text:00002973                 jnz     short loc_2984
.text:00002975                 mov     ecx, [ebp+var_C]
.text:00002978                 mov     edx, [ecx+4]
.text:0000297B                 push    edx
.text:0000297C                 call    _safefree
.text:00002981                 add     esp, 4
.text:00002984
.text:00002984 loc_2984:                               ; CODE XREF: _conf_deserialise+1ABj
.text:00002984                 mov     eax, [ebp+var_C]
.text:00002987                 push    eax
.text:00002988                 call    _safefree
.text:0000298D                 add     esp, 4
.text:00002990                 jmp     $done$86075
.text:00002995 ; ---------------------------------------------------------------------------
.text:00002995
.text:00002995 loc_2995:                               ; CODE XREF: _conf_deserialise+19Cj
.text:00002995                 mov     ecx, [ebp+var_4]
.text:00002998                 movzx   edx, byte ptr [ecx]
.text:0000299B                 shl     edx, 18h
.text:0000299E                 mov     eax, [ebp+var_4]
.text:000029A1                 movzx   ecx, byte ptr [eax+1]
.text:000029A5                 shl     ecx, 10h
.text:000029A8                 or      edx, ecx
.text:000029AA                 mov     eax, [ebp+var_4]
.text:000029AD                 movzx   ecx, byte ptr [eax+2]
.text:000029B1                 shl     ecx, 8
.text:000029B4                 or      edx, ecx
.text:000029B6                 mov     eax, [ebp+var_4]
.text:000029B9                 movzx   ecx, byte ptr [eax+3]
.text:000029BD                 or      edx, ecx
.text:000029BF                 push    edx
.text:000029C0                 call    _toint
.text:000029C5                 add     esp, 4
.text:000029C8                 mov     edx, [ebp+var_C]
.text:000029CB                 mov     [edx+8], eax
.text:000029CE                 mov     eax, [ebp+var_4]
.text:000029D1                 add     eax, 4
.text:000029D4                 mov     [ebp+var_4], eax
.text:000029D7                 mov     ecx, [ebp+arg_8]
.text:000029DA                 sub     ecx, 4
.text:000029DD                 mov     [ebp+arg_8], ecx
.text:000029E0                 jmp     loc_2B27        ; jumptable 00002959 default case
.text:000029E5 ; ---------------------------------------------------------------------------
.text:000029E5
.text:000029E5 $LN9_3:                                 ; CODE XREF: _conf_deserialise+191j
.text:000029E5                                         ; DATA XREF: .text:$LN29o
.text:000029E5                 mov     edx, [ebp+arg_8] ; jumptable 00002959 case 1
.text:000029E8                 push    edx             ; size_t
.text:000029E9                 push    0               ; int
.text:000029EB                 mov     eax, [ebp+var_4]
.text:000029EE                 push    eax             ; void *
.text:000029EF                 call    _memchr
.text:000029F4                 add     esp, 0Ch
.text:000029F7                 mov     [ebp+var_20], eax
.text:000029FA                 cmp     [ebp+var_20], 0
.text:000029FE                 jnz     short loc_2A2F
.text:00002A00                 mov     ecx, [ebp+var_C]
.text:00002A03                 mov     edx, [ecx]
.text:00002A05                 cmp     _subkeytypes[edx*4], 2
.text:00002A0D                 jnz     short loc_2A1E
.text:00002A0F                 mov     eax, [ebp+var_C]
.text:00002A12                 mov     ecx, [eax+4]
.text:00002A15                 push    ecx
.text:00002A16                 call    _safefree
.text:00002A1B                 add     esp, 4
.text:00002A1E
.text:00002A1E loc_2A1E:                               ; CODE XREF: _conf_deserialise+245j
.text:00002A1E                 mov     edx, [ebp+var_C]
.text:00002A21                 push    edx
.text:00002A22                 call    _safefree
.text:00002A27                 add     esp, 4
.text:00002A2A                 jmp     $done$86075
.text:00002A2F ; ---------------------------------------------------------------------------
.text:00002A2F
.text:00002A2F loc_2A2F:                               ; CODE XREF: _conf_deserialise+236j
.text:00002A2F                 mov     eax, [ebp+var_4]
.text:00002A32                 push    eax
.text:00002A33                 call    _dupstr
.text:00002A38                 add     esp, 4
.text:00002A3B                 mov     ecx, [ebp+var_C]
.text:00002A3E                 mov     [ecx+8], eax
.text:00002A41                 mov     edx, [ebp+var_20]
.text:00002A44                 add     edx, 1
.text:00002A47                 sub     edx, [ebp+var_4]
.text:00002A4A                 mov     eax, [ebp+arg_8]
.text:00002A4D                 sub     eax, edx
.text:00002A4F                 mov     [ebp+arg_8], eax
.text:00002A52                 mov     ecx, [ebp+var_20]
.text:00002A55                 add     ecx, 1
.text:00002A58                 mov     [ebp+var_4], ecx
.text:00002A5B                 jmp     loc_2B27        ; jumptable 00002959 default case
.text:00002A60 ; ---------------------------------------------------------------------------
.text:00002A60
.text:00002A60 $LN6_5:                                 ; CODE XREF: _conf_deserialise+191j
.text:00002A60                                         ; DATA XREF: .text:$LN29o
.text:00002A60                 lea     edx, [ebp+var_18] ; jumptable 00002959 case 2
.text:00002A63                 push    edx
.text:00002A64                 mov     eax, [ebp+arg_8]
.text:00002A67                 push    eax
.text:00002A68                 mov     ecx, [ebp+var_4]
.text:00002A6B                 push    ecx
.text:00002A6C                 call    _filename_deserialise
.text:00002A71                 add     esp, 0Ch
.text:00002A74                 mov     edx, [ebp+var_C]
.text:00002A77                 mov     [edx+8], eax
.text:00002A7A                 mov     eax, [ebp+var_C]
.text:00002A7D                 cmp     dword ptr [eax+8], 0
.text:00002A81                 jnz     short loc_2AB2
.text:00002A83                 mov     ecx, [ebp+var_C]
.text:00002A86                 mov     edx, [ecx]
.text:00002A88                 cmp     _subkeytypes[edx*4], 2
.text:00002A90                 jnz     short loc_2AA1
.text:00002A92                 mov     eax, [ebp+var_C]
.text:00002A95                 mov     ecx, [eax+4]
.text:00002A98                 push    ecx
.text:00002A99                 call    _safefree
.text:00002A9E                 add     esp, 4
.text:00002AA1
.text:00002AA1 loc_2AA1:                               ; CODE XREF: _conf_deserialise+2C8j
.text:00002AA1                 mov     edx, [ebp+var_C]
.text:00002AA4                 push    edx
.text:00002AA5                 call    _safefree
.text:00002AAA                 add     esp, 4
.text:00002AAD                 jmp     $done$86075
.text:00002AB2 ; ---------------------------------------------------------------------------
.text:00002AB2
.text:00002AB2 loc_2AB2:                               ; CODE XREF: _conf_deserialise+2B9j
.text:00002AB2                 mov     eax, [ebp+var_4]
.text:00002AB5                 add     eax, [ebp+var_18]
.text:00002AB8                 mov     [ebp+var_4], eax
.text:00002ABB                 mov     ecx, [ebp+arg_8]
.text:00002ABE                 sub     ecx, [ebp+var_18]
.text:00002AC1                 mov     [ebp+arg_8], ecx
.text:00002AC4                 jmp     short loc_2B27  ; jumptable 00002959 default case
.text:00002AC6 ; ---------------------------------------------------------------------------
.text:00002AC6
.text:00002AC6 $LN3_2:                                 ; CODE XREF: _conf_deserialise+191j
.text:00002AC6                                         ; DATA XREF: .text:$LN29o
.text:00002AC6                 lea     edx, [ebp+var_18] ; jumptable 00002959 case 3
.text:00002AC9                 push    edx
.text:00002ACA                 mov     eax, [ebp+arg_8]
.text:00002ACD                 push    eax
.text:00002ACE                 mov     ecx, [ebp+var_4]
.text:00002AD1                 push    ecx
.text:00002AD2                 call    _fontspec_deserialise
.text:00002AD7                 add     esp, 0Ch
.text:00002ADA                 mov     edx, [ebp+var_C]
.text:00002ADD                 mov     [edx+8], eax
.text:00002AE0                 mov     eax, [ebp+var_C]
.text:00002AE3                 cmp     dword ptr [eax+8], 0
.text:00002AE7                 jnz     short loc_2B15
.text:00002AE9                 mov     ecx, [ebp+var_C]
.text:00002AEC                 mov     edx, [ecx]
.text:00002AEE                 cmp     _subkeytypes[edx*4], 2
.text:00002AF6                 jnz     short loc_2B07
.text:00002AF8                 mov     eax, [ebp+var_C]
.text:00002AFB                 mov     ecx, [eax+4]
.text:00002AFE                 push    ecx
.text:00002AFF                 call    _safefree
.text:00002B04                 add     esp, 4
.text:00002B07
.text:00002B07 loc_2B07:                               ; CODE XREF: _conf_deserialise+32Ej
.text:00002B07                 mov     edx, [ebp+var_C]
.text:00002B0A                 push    edx
.text:00002B0B                 call    _safefree
.text:00002B10                 add     esp, 4
.text:00002B13                 jmp     short $done$86075
.text:00002B15 ; ---------------------------------------------------------------------------
.text:00002B15
.text:00002B15 loc_2B15:                               ; CODE XREF: _conf_deserialise+31Fj
.text:00002B15                 mov     eax, [ebp+var_4]
.text:00002B18                 add     eax, [ebp+var_18]
.text:00002B1B                 mov     [ebp+var_4], eax
.text:00002B1E                 mov     ecx, [ebp+arg_8]
.text:00002B21                 sub     ecx, [ebp+var_18]
.text:00002B24                 mov     [ebp+arg_8], ecx
.text:00002B27
.text:00002B27 loc_2B27:                               ; CODE XREF: _conf_deserialise+188j
.text:00002B27                                         ; _conf_deserialise+218j ...
.text:00002B27                 mov     edx, [ebp+var_C] ; jumptable 00002959 default case
.text:00002B2A                 push    edx
.text:00002B2B                 mov     eax, [ebp+arg_0]
.text:00002B2E                 push    eax
.text:00002B2F                 call    _conf_insert
.text:00002B34                 add     esp, 8
.text:00002B37                 jmp     loc_27EA
.text:00002B3C ; ---------------------------------------------------------------------------
.text:00002B3C
.text:00002B3C $done$86075:                            ; CODE XREF: _conf_deserialise+26j
.text:00002B3C                                         ; _conf_deserialise+74j ...
.text:00002B3C                 mov     eax, [ebp+var_4]
.text:00002B3F                 sub     eax, [ebp+var_8]
.text:00002B42                 push    edx
.text:00002B43                 mov     ecx, ebp
.text:00002B45                 push    eax
.text:00002B46                 lea     edx, $LN28
.text:00002B4C                 call    @_RTC_CheckStackVars@8
.text:00002B51                 pop     eax
.text:00002B52                 pop     edx
.text:00002B53                 pop     edi
.text:00002B54                 add     esp, 28h
.text:00002B57                 cmp     ebp, esp
.text:00002B59                 call    __RTC_CheckEsp
.text:00002B5E                 mov     esp, ebp
.text:00002B60                 pop     ebp
.text:00002B61                 retn
.text:00002B61 _conf_deserialise endp
.text:00002B61
.text:00002B61 ; ---------------------------------------------------------------------------
.text:00002B62                 align 4
.text:00002B64 $LN28           dd 1                    ; DATA XREF: _conf_deserialise+37Eo
.text:00002B68                 dd offset $LN27
.text:00002B6C $LN27           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002B68o
.text:00002B74                 dd offset $LN26         ; "used"
.text:00002B78 $LN26           db 'used',0             ; DATA XREF: .text:00002B74o
.text:00002B7D                 align 10h
.text:00002B80 $LN29           dd offset $LN12_0       ; DATA XREF: _conf_deserialise+191r
.text:00002B80                 dd offset $LN9_3        ; jump table for switch statement
.text:00002B80                 dd offset $LN6_5
.text:00002B80                 dd offset $LN3_2
.text:00002B80 _text           ends
.text:00002B80
.rtc$TMZ:00002B90 ; ===========================================================================
.rtc$TMZ:00002B90
.rtc$TMZ:00002B90 ; Segment type: Pure data
.rtc$TMZ:00002B90 ; Segment permissions: Read
.rtc$TMZ:00002B90 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002B90                 assume cs:_rtc$TMZ
.rtc$TMZ:00002B90                 ;org 2B90h
.rtc$TMZ:00002B90 ; COMDAT (pick any)
.rtc$TMZ:00002B90 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002B90 _rtc$TMZ        ends
.rtc$TMZ:00002B90
.rtc$IMZ:00002B94 ; ===========================================================================
.rtc$IMZ:00002B94
.rtc$IMZ:00002B94 ; Segment type: Pure data
.rtc$IMZ:00002B94 ; Segment permissions: Read
.rtc$IMZ:00002B94 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002B94                 assume cs:_rtc$IMZ
.rtc$IMZ:00002B94                 ;org 2B94h
.rtc$IMZ:00002B94 ; COMDAT (pick any)
.rtc$IMZ:00002B94 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002B94 _rtc$IMZ        ends
.rtc$IMZ:00002B94
UNDEF:00002BA0 ; ===========================================================================
UNDEF:00002BA0
UNDEF:00002BA0 ; Segment type: Externs
UNDEF:00002BA0 ; UNDEF
UNDEF:00002BA0                 extrn _newtree234:near  ; CODE XREF: _conf_new+1Fp
UNDEF:00002BA4                 extrn _safemalloc:near  ; CODE XREF: _conf_new+Fp
UNDEF:00002BA4                                         ; _conf_copy_into+58p ...
UNDEF:00002BA8                 extrn __RTC_CheckEsp:near ; CODE XREF: _conf_new+34p
UNDEF:00002BA8                                         ; _conf_cmp+B7p ...
UNDEF:00002BAC                 extrn __RTC_Shutdown:near
UNDEF:00002BAC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002BB0                 extrn __RTC_InitBase:near
UNDEF:00002BB0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002BB4 ; int __cdecl strcmp(const char *, const char *)
UNDEF:00002BB4                 extrn _strcmp:near      ; CODE XREF: _conf_cmp+A6p
UNDEF:00002BB8                 extrn _safefree:near    ; CODE XREF: _conf_free+21p
UNDEF:00002BB8                                         ; _free_entry+2Fp ...
UNDEF:00002BBC                 extrn _freetree234:near ; CODE XREF: _conf_free+15p
UNDEF:00002BC0                 extrn _delpos234:near   ; CODE XREF: _conf_clear+13p
UNDEF:00002BC4                 extrn _fontspec_free:near ; CODE XREF: _free_value+3Bp
UNDEF:00002BC8                 extrn _filename_free:near ; CODE XREF: _free_value+25p
UNDEF:00002BCC                 extrn _add234:near      ; CODE XREF: _conf_copy_into+A0p
UNDEF:00002BCC                                         ; _conf_insert+15p ...
UNDEF:00002BD0                 extrn _index234:near    ; CODE XREF: _conf_copy_into+43p
UNDEF:00002BD0                                         ; _conf_get_str_nthstrkey+B6p ...
UNDEF:00002BD4                 extrn _dupstr:near      ; CODE XREF: _copy_key+47p
UNDEF:00002BD4                                         ; _copy_value+3Cp ...
UNDEF:00002BD8                 extrn _fontspec_copy:near ; CODE XREF: _copy_value+66p
UNDEF:00002BD8                                         ; _conf_set_fontspec+6Ep
UNDEF:00002BDC                 extrn _filename_copy:near ; CODE XREF: _copy_value+51p
UNDEF:00002BDC                                         ; _conf_set_filename+6Ep
UNDEF:00002BE0                 extrn _find234:near     ; CODE XREF: _conf_get_int+74p
UNDEF:00002BE0                                         ; _conf_get_int_int+7Ap ...
UNDEF:00002BE4                 extrn __wassert:near    ; CODE XREF: _conf_get_int+36p
UNDEF:00002BE4                                         ; _conf_get_int+5Ap ...
UNDEF:00002BE8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002BE8                                         ; CODE XREF: _conf_get_int+ACp
UNDEF:00002BE8                                         ; _conf_get_int_int+B2p ...
UNDEF:00002BEC                 extrn _findrel234:near  ; CODE XREF: _conf_get_str_strs+82p
UNDEF:00002BEC                                         ; _conf_get_str_strs+A4p
UNDEF:00002BF0                 extrn _findrelpos234:near
UNDEF:00002BF0                                         ; CODE XREF: _conf_get_str_nthstrkey+8Ap
UNDEF:00002BF4                 extrn _del234:near      ; CODE XREF: _conf_insert+38p
UNDEF:00002BF4                                         ; _conf_del_str_str+95p
UNDEF:00002BF8                 extrn _fontspec_serialise:near
UNDEF:00002BF8                                         ; CODE XREF: _conf_serialised_size+10Cp
UNDEF:00002BF8                                         ; _conf_serialise+20Dp
UNDEF:00002BFC                 extrn _filename_serialise:near
UNDEF:00002BFC                                         ; CODE XREF: _conf_serialised_size+F3p
UNDEF:00002BFC                                         ; _conf_serialise+1F2p
UNDEF:00002C00 ; size_t __cdecl strlen(const char *)
UNDEF:00002C00                 extrn _strlen:near      ; CODE XREF: _conf_serialised_size+8Ap
UNDEF:00002C00                                         ; _conf_serialised_size+D6p ...
UNDEF:00002C04 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00002C04                 extrn _memcpy:near      ; CODE XREF: _conf_serialise+115p
UNDEF:00002C04                                         ; _conf_serialise+1C5p
UNDEF:00002C08                 extrn _fontspec_deserialise:near
UNDEF:00002C08                                         ; CODE XREF: _conf_deserialise+30Ap
UNDEF:00002C0C                 extrn _filename_deserialise:near
UNDEF:00002C0C                                         ; CODE XREF: _conf_deserialise+2A4p
UNDEF:00002C10 ; void *__cdecl memchr(const void *, int, size_t)
UNDEF:00002C10                 extrn _memchr:near      ; CODE XREF: _conf_deserialise+11Ep
UNDEF:00002C10                                         ; _conf_deserialise+227p
UNDEF:00002C14                 extrn _toint:near       ; CODE XREF: _conf_deserialise+F2p
UNDEF:00002C14                                         ; _conf_deserialise+1F8p
UNDEF:00002C14
UNDEF:00002C14
UNDEF:00002C14                 end