.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 7D3D35BEE92CA3CE1050680F202AEA38
.data:00000000 ; Input CRC32 : 5CCB1D70
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winmisc.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 _data           segment dword public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG86889[]
.data:00000000 $SG86889        db 'DISPLAY',0          ; DATA XREF: _platform_get_x_display+3o
.data:00000008 $SG86955        db 'secur32.dll',0      ; DATA XREF: _get_username+2Bo
.data:00000014 ; CHAR _SG86958[]
.data:00000014 $SG86958        db 'GetUserNameExA',0   ; DATA XREF: _get_username+43o
.data:00000023                 align 4
.data:00000024 $SG86997        dd offset $SG87041+4    ; DATA XREF: _load_system32_dll+7Fo
.data:00000024                                         ; "r %d: %s"
.data:00000028 ; char _SG87037[]
.data:00000028 $SG87037        db '(unable to format: FormatMessage returned %d)',0
.data:00000028                                         ; DATA XREF: _win_strerror+C3o
.data:00000056                 align 4
.data:00000058 $SG87041        db 'Error %d: %s',0     ; DATA XREF: _win_strerror+123o
.data:00000058                                         ; .data:$SG86997o
.data:00000065                 align 4
.data:00000065 _data           ends
.data:00000065
.bss:00000068 ; ===========================================================================
.bss:00000068
.bss:00000068 ; Segment type: Uninitialized
.bss:00000068 ; Segment permissions: Read/Write
.bss:00000068 _bss            segment dword public 'BSS' use32
.bss:00000068                 assume cs:_bss
.bss:00000068                 ;org 68h
.bss:00000068                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000068 ; `get_username'::`2'::p_GetUserNameExA
.bss:00000068 ?p_GetUserNameExA@?1??get_username@@9@9 dd ? ; DATA XREF: _get_username+68w
.bss:00000068                                         ; _get_username:loc_310r ...
.bss:0000006C ; `get_username'::`3'::tried_usernameex
.bss:0000006C ?tried_usernameex@?2??get_username@@9@9 dd ? ; DATA XREF: _get_username+22r
.bss:0000006C                                         ; _get_username+6Ew
.bss:00000070 ; LPSTR `load_system32_dll'::`2'::sysdir
.bss:00000070 ?sysdir@?1??load_system32_dll@@9@9 dd ? ; DATA XREF: _load_system32_dll+18r
.bss:00000070                                         ; _load_system32_dll+41r ...
.bss:00000074 _errstrings     dd ?                    ; DATA XREF: _win_strerror+2Br
.bss:00000074                                         ; _win_strerror+41w ...
.bss:00000074 _bss            ends
.bss:00000074
.text:00000078 ; ===========================================================================
.text:00000078
.text:00000078 ; Segment type: Pure code
.text:00000078 ; Segment permissions: Read/Execute
.text:00000078 _text           segment para public 'CODE' use32
.text:00000078                 assume cs:_text
.text:00000078                 ;org 78h
.text:00000078                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000078
.text:00000078 ; =============== S U B R O U T I N E =======================================
.text:00000078
.text:00000078 ; Attributes: bp-based frame
.text:00000078
.text:00000078                 public _platform_get_x_display
.text:00000078 _platform_get_x_display proc near
.text:00000078                 push    ebp
.text:00000079                 mov     ebp, esp
.text:0000007B                 push    offset $SG86889 ; "DISPLAY"
.text:00000080                 call    _getenv
.text:00000085                 add     esp, 4
.text:00000088                 push    eax
.text:00000089                 call    _dupstr
.text:0000008E                 add     esp, 4
.text:00000091                 cmp     ebp, esp
.text:00000093                 call    __RTC_CheckEsp
.text:00000098                 pop     ebp
.text:00000099                 retn
.text:00000099 _platform_get_x_display endp
.text:00000099
.text:00000099 ; ---------------------------------------------------------------------------
.text:0000009A                 db 0Eh dup(0CCh)
.text:000000A8
.text:000000A8 ; =============== S U B R O U T I N E =======================================
.text:000000A8
.text:000000A8 ; Attributes: bp-based frame
.text:000000A8
.text:000000A8                 public _filename_from_str
.text:000000A8 _filename_from_str proc near            ; CODE XREF: _filename_copy+9p
.text:000000A8                                         ; _filename_deserialise+51p
.text:000000A8
.text:000000A8 var_4           = dword ptr -4
.text:000000A8 arg_0           = dword ptr  8
.text:000000A8
.text:000000A8                 push    ebp
.text:000000A9                 mov     ebp, esp
.text:000000AB                 push    ecx
.text:000000AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000B3                 push    4
.text:000000B5                 push    1
.text:000000B7                 call    _safemalloc
.text:000000BC                 add     esp, 8
.text:000000BF                 mov     [ebp+var_4], eax
.text:000000C2                 mov     eax, [ebp+arg_0]
.text:000000C5                 push    eax
.text:000000C6                 call    _dupstr
.text:000000CB                 add     esp, 4
.text:000000CE                 mov     ecx, [ebp+var_4]
.text:000000D1                 mov     [ecx], eax
.text:000000D3                 mov     eax, [ebp+var_4]
.text:000000D6                 add     esp, 4
.text:000000D9                 cmp     ebp, esp
.text:000000DB                 call    __RTC_CheckEsp
.text:000000E0                 mov     esp, ebp
.text:000000E2                 pop     ebp
.text:000000E3                 retn
.text:000000E3 _filename_from_str endp
.text:000000E3
.text:000000E3 ; ---------------------------------------------------------------------------
.text:000000E4                 align 8
.text:000000E8
.text:000000E8 ; =============== S U B R O U T I N E =======================================
.text:000000E8
.text:000000E8 ; Attributes: bp-based frame
.text:000000E8
.text:000000E8                 public _filename_copy
.text:000000E8 _filename_copy  proc near
.text:000000E8
.text:000000E8 arg_0           = dword ptr  8
.text:000000E8
.text:000000E8                 push    ebp
.text:000000E9                 mov     ebp, esp
.text:000000EB                 mov     eax, [ebp+arg_0]
.text:000000EE                 mov     ecx, [eax]
.text:000000F0                 push    ecx
.text:000000F1                 call    _filename_from_str
.text:000000F6                 add     esp, 4
.text:000000F9                 cmp     ebp, esp
.text:000000FB                 call    __RTC_CheckEsp
.text:00000100                 pop     ebp
.text:00000101                 retn
.text:00000101 _filename_copy  endp
.text:00000101
.text:00000101 ; ---------------------------------------------------------------------------
.text:00000102                 align 8
.text:00000108
.text:00000108 ; =============== S U B R O U T I N E =======================================
.text:00000108
.text:00000108 ; Attributes: bp-based frame
.text:00000108
.text:00000108                 public _filename_to_str
.text:00000108 _filename_to_str proc near
.text:00000108
.text:00000108 arg_0           = dword ptr  8
.text:00000108
.text:00000108                 push    ebp
.text:00000109                 mov     ebp, esp
.text:0000010B                 mov     eax, [ebp+arg_0]
.text:0000010E                 mov     eax, [eax]
.text:00000110                 pop     ebp
.text:00000111                 retn
.text:00000111 _filename_to_str endp
.text:00000111
.text:00000111 ; ---------------------------------------------------------------------------
.text:00000112                 align 8
.text:00000118
.text:00000118 ; =============== S U B R O U T I N E =======================================
.text:00000118
.text:00000118 ; Attributes: bp-based frame
.text:00000118
.text:00000118                 public _filename_equal
.text:00000118 _filename_equal proc near
.text:00000118
.text:00000118 arg_0           = dword ptr  8
.text:00000118 arg_4           = dword ptr  0Ch
.text:00000118
.text:00000118                 push    ebp
.text:00000119                 mov     ebp, esp
.text:0000011B                 mov     eax, [ebp+arg_4]
.text:0000011E                 mov     ecx, [eax]
.text:00000120                 push    ecx             ; Str2
.text:00000121                 mov     edx, [ebp+arg_0]
.text:00000124                 mov     eax, [edx]
.text:00000126                 push    eax             ; Str1
.text:00000127                 call    _strcmp
.text:0000012C                 add     esp, 8
.text:0000012F                 neg     eax
.text:00000131                 sbb     eax, eax
.text:00000133                 add     eax, 1
.text:00000136                 cmp     ebp, esp
.text:00000138                 call    __RTC_CheckEsp
.text:0000013D                 pop     ebp
.text:0000013E                 retn
.text:0000013E _filename_equal endp
.text:0000013E
.text:0000013E ; ---------------------------------------------------------------------------
.text:0000013F                 db 9 dup(0CCh)
.text:00000148
.text:00000148 ; =============== S U B R O U T I N E =======================================
.text:00000148
.text:00000148 ; Attributes: bp-based frame
.text:00000148
.text:00000148                 public _filename_is_null
.text:00000148 _filename_is_null proc near
.text:00000148
.text:00000148 arg_0           = dword ptr  8
.text:00000148
.text:00000148                 push    ebp
.text:00000149                 mov     ebp, esp
.text:0000014B                 mov     eax, [ebp+arg_0]
.text:0000014E                 mov     ecx, [eax]
.text:00000150                 movsx   eax, byte ptr [ecx]
.text:00000153                 neg     eax
.text:00000155                 sbb     eax, eax
.text:00000157                 add     eax, 1
.text:0000015A                 pop     ebp
.text:0000015B                 retn
.text:0000015B _filename_is_null endp
.text:0000015B
.text:0000015B ; ---------------------------------------------------------------------------
.text:0000015C                 db 0Ch dup(0CCh)
.text:00000168
.text:00000168 ; =============== S U B R O U T I N E =======================================
.text:00000168
.text:00000168 ; Attributes: bp-based frame
.text:00000168
.text:00000168                 public _filename_free
.text:00000168 _filename_free  proc near
.text:00000168
.text:00000168 arg_0           = dword ptr  8
.text:00000168
.text:00000168                 push    ebp
.text:00000169                 mov     ebp, esp
.text:0000016B                 mov     eax, [ebp+arg_0]
.text:0000016E                 mov     ecx, [eax]
.text:00000170                 push    ecx
.text:00000171                 call    _safefree
.text:00000176                 add     esp, 4
.text:00000179                 mov     edx, [ebp+arg_0]
.text:0000017C                 push    edx
.text:0000017D                 call    _safefree
.text:00000182                 add     esp, 4
.text:00000185                 cmp     ebp, esp
.text:00000187                 call    __RTC_CheckEsp
.text:0000018C                 pop     ebp
.text:0000018D                 retn
.text:0000018D _filename_free  endp
.text:0000018D
.text:0000018D ; ---------------------------------------------------------------------------
.text:0000018E                 db 0Ah dup(0CCh)
.text:00000198
.text:00000198 ; =============== S U B R O U T I N E =======================================
.text:00000198
.text:00000198 ; Attributes: bp-based frame
.text:00000198
.text:00000198                 public _filename_serialise
.text:00000198 _filename_serialise proc near
.text:00000198
.text:00000198 var_8           = dword ptr -8
.text:00000198 Dest            = dword ptr -4
.text:00000198 arg_0           = dword ptr  8
.text:00000198 arg_4           = dword ptr  0Ch
.text:00000198
.text:00000198                 push    ebp
.text:00000199                 mov     ebp, esp
.text:0000019B                 sub     esp, 8
.text:0000019E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000001A5                 mov     [ebp+Dest], 0CCCCCCCCh
.text:000001AC                 mov     eax, [ebp+arg_4]
.text:000001AF                 mov     [ebp+Dest], eax
.text:000001B2                 mov     ecx, [ebp+arg_0]
.text:000001B5                 mov     edx, [ecx]
.text:000001B7                 push    edx             ; Str
.text:000001B8                 call    _strlen
.text:000001BD                 add     esp, 4
.text:000001C0                 add     eax, 1
.text:000001C3                 mov     [ebp+var_8], eax
.text:000001C6                 cmp     [ebp+Dest], 0
.text:000001CA                 jz      short loc_1DE
.text:000001CC                 mov     eax, [ebp+arg_0]
.text:000001CF                 mov     ecx, [eax]
.text:000001D1                 push    ecx             ; Source
.text:000001D2                 mov     edx, [ebp+Dest]
.text:000001D5                 push    edx             ; Dest
.text:000001D6                 call    _strcpy
.text:000001DB                 add     esp, 8
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: _filename_serialise+32j
.text:000001DE                 mov     eax, [ebp+var_8]
.text:000001E1                 add     esp, 8
.text:000001E4                 cmp     ebp, esp
.text:000001E6                 call    __RTC_CheckEsp
.text:000001EB                 mov     esp, ebp
.text:000001ED                 pop     ebp
.text:000001EE                 retn
.text:000001EE _filename_serialise endp
.text:000001EE
.text:000001EE ; ---------------------------------------------------------------------------
.text:000001EF                 db 9 dup(0CCh)
.text:000001F8
.text:000001F8 ; =============== S U B R O U T I N E =======================================
.text:000001F8
.text:000001F8 ; Attributes: bp-based frame
.text:000001F8
.text:000001F8 ; int __cdecl filename_deserialise(int, size_t MaxCount, int)
.text:000001F8                 public _filename_deserialise
.text:000001F8 _filename_deserialise proc near
.text:000001F8
.text:000001F8 var_8           = dword ptr -8
.text:000001F8 Buf             = dword ptr -4
.text:000001F8 arg_0           = dword ptr  8
.text:000001F8 MaxCount        = dword ptr  0Ch
.text:000001F8 arg_8           = dword ptr  10h
.text:000001F8
.text:000001F8                 push    ebp
.text:000001F9                 mov     ebp, esp
.text:000001FB                 sub     esp, 8
.text:000001FE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000205                 mov     [ebp+Buf], 0CCCCCCCCh
.text:0000020C                 mov     eax, [ebp+arg_0]
.text:0000020F                 mov     [ebp+Buf], eax
.text:00000212                 mov     ecx, [ebp+MaxCount]
.text:00000215                 push    ecx             ; MaxCount
.text:00000216                 push    0               ; Val
.text:00000218                 mov     edx, [ebp+Buf]
.text:0000021B                 push    edx             ; Buf
.text:0000021C                 call    _memchr
.text:00000221                 add     esp, 0Ch
.text:00000224                 mov     [ebp+var_8], eax
.text:00000227                 cmp     [ebp+var_8], 0
.text:0000022B                 jnz     short loc_231
.text:0000022D                 xor     eax, eax
.text:0000022F                 jmp     short loc_251
.text:00000231 ; ---------------------------------------------------------------------------
.text:00000231
.text:00000231 loc_231:                                ; CODE XREF: _filename_deserialise+33j
.text:00000231                 mov     eax, [ebp+var_8]
.text:00000234                 add     eax, 1
.text:00000237                 mov     [ebp+var_8], eax
.text:0000023A                 mov     ecx, [ebp+var_8]
.text:0000023D                 sub     ecx, [ebp+Buf]
.text:00000240                 mov     edx, [ebp+arg_8]
.text:00000243                 mov     [edx], ecx
.text:00000245                 mov     eax, [ebp+Buf]
.text:00000248                 push    eax
.text:00000249                 call    _filename_from_str
.text:0000024E                 add     esp, 4
.text:00000251
.text:00000251 loc_251:                                ; CODE XREF: _filename_deserialise+37j
.text:00000251                 add     esp, 8
.text:00000254                 cmp     ebp, esp
.text:00000256                 call    __RTC_CheckEsp
.text:0000025B                 mov     esp, ebp
.text:0000025D                 pop     ebp
.text:0000025E                 retn
.text:0000025E _filename_deserialise endp
.text:0000025E
.text:0000025E ; ---------------------------------------------------------------------------
.text:0000025F                 db 9 dup(0CCh)
.text:00000268
.text:00000268 ; =============== S U B R O U T I N E =======================================
.text:00000268
.text:00000268 ; Attributes: bp-based frame
.text:00000268
.text:00000268 ; int __cdecl smemclr(PVOID ptr, SIZE_T cnt)
.text:00000268                 public _smemclr
.text:00000268 _smemclr        proc near
.text:00000268
.text:00000268 ptr             = dword ptr  8
.text:00000268 cnt             = dword ptr  0Ch
.text:00000268
.text:00000268                 push    ebp
.text:00000269                 mov     ebp, esp
.text:0000026B                 cmp     [ebp+ptr], 0
.text:0000026F                 jz      short loc_287
.text:00000271                 cmp     [ebp+cnt], 0
.text:00000275                 jbe     short loc_287
.text:00000277                 mov     eax, [ebp+cnt]
.text:0000027A                 push    eax             ; cnt
.text:0000027B                 mov     ecx, [ebp+ptr]
.text:0000027E                 push    ecx             ; ptr
.text:0000027F                 call    _RtlSecureZeroMemory
.text:00000284                 add     esp, 8
.text:00000287
.text:00000287 loc_287:                                ; CODE XREF: _smemclr+7j
.text:00000287                                         ; _smemclr+Dj
.text:00000287                 cmp     ebp, esp
.text:00000289                 call    __RTC_CheckEsp
.text:0000028E                 pop     ebp
.text:0000028F                 retn
.text:0000028F _smemclr        endp
.text:0000028F
.text:0000028F ; ---------------------------------------------------------------------------
.text:00000290                 db 8 dup(0CCh)
.text:00000298
.text:00000298 ; =============== S U B R O U T I N E =======================================
.text:00000298
.text:00000298 ; Attributes: bp-based frame
.text:00000298
.text:00000298                 public _get_username
.text:00000298 _get_username   proc near
.text:00000298
.text:00000298 var_28          = dword ptr -28h
.text:00000298 var_24          = dword ptr -24h
.text:00000298 var_1D          = byte ptr -1Dh
.text:00000298 var_1C          = dword ptr -1Ch
.text:00000298 hModule         = dword ptr -18h
.text:00000298 var_14          = dword ptr -14h
.text:00000298 Str             = dword ptr -10h
.text:00000298 pcbBuffer       = dword ptr -8
.text:00000298
.text:00000298                 push    ebp
.text:00000299                 mov     ebp, esp
.text:0000029B                 sub     esp, 28h
.text:0000029E                 push    esi
.text:0000029F                 push    edi
.text:000002A0                 lea     edi, [ebp+var_28]
.text:000002A3                 mov     ecx, 0Ah
.text:000002A8                 mov     eax, 0CCCCCCCCh
.text:000002AD                 rep stosd
.text:000002AF                 mov     [ebp+var_1D], 0
.text:000002B3                 mov     [ebp+var_14], 0
.text:000002BA                 cmp     ds:?tried_usernameex@?2??get_username@@9@9, 0 ; `get_username'::`3'::tried_usernameex
.text:000002C1                 jnz     short loc_310
.text:000002C3                 push    offset $SG86955 ; "secur32.dll"
.text:000002C8                 call    _load_system32_dll
.text:000002CD                 add     esp, 4
.text:000002D0                 mov     [ebp+hModule], eax
.text:000002D3                 cmp     [ebp+hModule], 0
.text:000002D7                 jz      short loc_2F6
.text:000002D9                 mov     esi, esp
.text:000002DB                 push    offset $SG86958 ; "GetUserNameExA"
.text:000002E0                 mov     eax, [ebp+hModule]
.text:000002E3                 push    eax             ; hModule
.text:000002E4                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:000002EA                 cmp     esi, esp
.text:000002EC                 call    __RTC_CheckEsp
.text:000002F1                 mov     [ebp+var_24], eax
.text:000002F4                 jmp     short loc_2FD
.text:000002F6 ; ---------------------------------------------------------------------------
.text:000002F6
.text:000002F6 loc_2F6:                                ; CODE XREF: _get_username+3Fj
.text:000002F6                 mov     [ebp+var_24], 0
.text:000002FD
.text:000002FD loc_2FD:                                ; CODE XREF: _get_username+5Cj
.text:000002FD                 mov     ecx, [ebp+var_24]
.text:00000300                 mov     ds:?p_GetUserNameExA@?1??get_username@@9@9, ecx ; `get_username'::`2'::p_GetUserNameExA
.text:00000306                 mov     ds:?tried_usernameex@?2??get_username@@9@9, 1 ; `get_username'::`3'::tried_usernameex
.text:00000310
.text:00000310 loc_310:                                ; CODE XREF: _get_username+29j
.text:00000310                 cmp     ds:?p_GetUserNameExA@?1??get_username@@9@9, 0 ; `get_username'::`2'::p_GetUserNameExA
.text:00000317                 jz      loc_3D9
.text:0000031D                 mov     [ebp+pcbBuffer], 0
.text:00000324                 mov     esi, esp
.text:00000326                 lea     edx, [ebp+pcbBuffer]
.text:00000329                 push    edx
.text:0000032A                 push    0
.text:0000032C                 push    8
.text:0000032E                 call    ds:?p_GetUserNameExA@?1??get_username@@9@9 ; `get_username'::`2'::p_GetUserNameExA
.text:00000334                 cmp     esi, esp
.text:00000336                 call    __RTC_CheckEsp
.text:0000033B                 push    1
.text:0000033D                 mov     eax, [ebp+pcbBuffer]
.text:00000340                 push    eax
.text:00000341                 call    _safemalloc
.text:00000346                 add     esp, 8
.text:00000349                 mov     [ebp+var_1D], 1
.text:0000034D                 mov     [ebp+Str], eax
.text:00000350                 cmp     [ebp+var_1D], 0
.text:00000354                 jnz     short loc_363
.text:00000356                 push    offset $LN16    ; "user"
.text:0000035B                 call    __RTC_UninitUse
.text:00000360                 add     esp, 4
.text:00000363
.text:00000363 loc_363:                                ; CODE XREF: _get_username+BCj
.text:00000363                 mov     esi, esp
.text:00000365                 lea     ecx, [ebp+pcbBuffer]
.text:00000368                 push    ecx
.text:00000369                 mov     edx, [ebp+Str]
.text:0000036C                 push    edx
.text:0000036D                 push    8
.text:0000036F                 call    ds:?p_GetUserNameExA@?1??get_username@@9@9 ; `get_username'::`2'::p_GetUserNameExA
.text:00000375                 cmp     esi, esp
.text:00000377                 call    __RTC_CheckEsp
.text:0000037C                 movzx   eax, al
.text:0000037F                 mov     [ebp+var_14], eax
.text:00000382                 cmp     [ebp+var_14], 0
.text:00000386                 jz      short loc_3BA
.text:00000388                 cmp     [ebp+var_1D], 0
.text:0000038C                 jnz     short loc_39B
.text:0000038E                 push    offset $LN16    ; "user"
.text:00000393                 call    __RTC_UninitUse
.text:00000398                 add     esp, 4
.text:0000039B
.text:0000039B loc_39B:                                ; CODE XREF: _get_username+F4j
.text:0000039B                 push    40h ; '@'       ; Val
.text:0000039D                 mov     ecx, [ebp+Str]
.text:000003A0                 push    ecx             ; Str
.text:000003A1                 call    _strchr
.text:000003A6                 add     esp, 8
.text:000003A9                 mov     [ebp+var_1C], eax
.text:000003AC                 cmp     [ebp+var_1C], 0
.text:000003B0                 jz      short loc_3B8
.text:000003B2                 mov     edx, [ebp+var_1C]
.text:000003B5                 mov     byte ptr [edx], 0
.text:000003B8
.text:000003B8 loc_3B8:                                ; CODE XREF: _get_username+118j
.text:000003B8                 jmp     short loc_3D9
.text:000003BA ; ---------------------------------------------------------------------------
.text:000003BA
.text:000003BA loc_3BA:                                ; CODE XREF: _get_username+EEj
.text:000003BA                 cmp     [ebp+var_1D], 0
.text:000003BE                 jnz     short loc_3CD
.text:000003C0                 push    offset $LN16    ; "user"
.text:000003C5                 call    __RTC_UninitUse
.text:000003CA                 add     esp, 4
.text:000003CD
.text:000003CD loc_3CD:                                ; CODE XREF: _get_username+126j
.text:000003CD                 mov     eax, [ebp+Str]
.text:000003D0                 push    eax
.text:000003D1                 call    _safefree
.text:000003D6                 add     esp, 4
.text:000003D9
.text:000003D9 loc_3D9:                                ; CODE XREF: _get_username+7Fj
.text:000003D9                                         ; _get_username:loc_3B8j
.text:000003D9                 cmp     [ebp+var_14], 0
.text:000003DD                 jnz     loc_471
.text:000003E3                 mov     [ebp+pcbBuffer], 0
.text:000003EA                 mov     esi, esp
.text:000003EC                 lea     ecx, [ebp+pcbBuffer]
.text:000003EF                 push    ecx             ; pcbBuffer
.text:000003F0                 push    0               ; lpBuffer
.text:000003F2                 call    dword ptr ds:__imp__GetUserNameA@8 ; GetUserNameA(x,x)
.text:000003F8                 cmp     esi, esp
.text:000003FA                 call    __RTC_CheckEsp
.text:000003FF                 test    eax, eax
.text:00000401                 jnz     short loc_40A
.text:00000403                 mov     [ebp+pcbBuffer], 100h
.text:0000040A
.text:0000040A loc_40A:                                ; CODE XREF: _get_username+169j
.text:0000040A                 push    1
.text:0000040C                 mov     edx, [ebp+pcbBuffer]
.text:0000040F                 push    edx
.text:00000410                 call    _safemalloc
.text:00000415                 add     esp, 8
.text:00000418                 mov     [ebp+var_1D], 1
.text:0000041C                 mov     [ebp+Str], eax
.text:0000041F                 cmp     [ebp+var_1D], 0
.text:00000423                 jnz     short loc_432
.text:00000425                 push    offset $LN16    ; "user"
.text:0000042A                 call    __RTC_UninitUse
.text:0000042F                 add     esp, 4
.text:00000432
.text:00000432 loc_432:                                ; CODE XREF: _get_username+18Bj
.text:00000432                 mov     esi, esp
.text:00000434                 lea     eax, [ebp+pcbBuffer]
.text:00000437                 push    eax             ; pcbBuffer
.text:00000438                 mov     ecx, [ebp+Str]
.text:0000043B                 push    ecx             ; lpBuffer
.text:0000043C                 call    dword ptr ds:__imp__GetUserNameA@8 ; GetUserNameA(x,x)
.text:00000442                 cmp     esi, esp
.text:00000444                 call    __RTC_CheckEsp
.text:00000449                 mov     [ebp+var_14], eax
.text:0000044C                 cmp     [ebp+var_14], 0
.text:00000450                 jnz     short loc_471
.text:00000452                 cmp     [ebp+var_1D], 0
.text:00000456                 jnz     short loc_465
.text:00000458                 push    offset $LN16    ; "user"
.text:0000045D                 call    __RTC_UninitUse
.text:00000462                 add     esp, 4
.text:00000465
.text:00000465 loc_465:                                ; CODE XREF: _get_username+1BEj
.text:00000465                 mov     edx, [ebp+Str]
.text:00000468                 push    edx
.text:00000469                 call    _safefree
.text:0000046E                 add     esp, 4
.text:00000471
.text:00000471 loc_471:                                ; CODE XREF: _get_username+145j
.text:00000471                                         ; _get_username+1B8j
.text:00000471                 cmp     [ebp+var_14], 0
.text:00000475                 jz      short loc_492
.text:00000477                 cmp     [ebp+var_1D], 0
.text:0000047B                 jnz     short loc_48A
.text:0000047D                 push    offset $LN16    ; "user"
.text:00000482                 call    __RTC_UninitUse
.text:00000487                 add     esp, 4
.text:0000048A
.text:0000048A loc_48A:                                ; CODE XREF: _get_username+1E3j
.text:0000048A                 mov     eax, [ebp+Str]
.text:0000048D                 mov     [ebp+var_28], eax
.text:00000490                 jmp     short loc_499
.text:00000492 ; ---------------------------------------------------------------------------
.text:00000492
.text:00000492 loc_492:                                ; CODE XREF: _get_username+1DDj
.text:00000492                 mov     [ebp+var_28], 0
.text:00000499
.text:00000499 loc_499:                                ; CODE XREF: _get_username+1F8j
.text:00000499                 mov     eax, [ebp+var_28]
.text:0000049C                 push    edx
.text:0000049D                 mov     ecx, ebp
.text:0000049F                 push    eax
.text:000004A0                 lea     edx, $LN24
.text:000004A6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004AB                 pop     eax
.text:000004AC                 pop     edx
.text:000004AD                 pop     edi
.text:000004AE                 pop     esi
.text:000004AF                 add     esp, 28h
.text:000004B2                 cmp     ebp, esp
.text:000004B4                 call    __RTC_CheckEsp
.text:000004B9                 mov     esp, ebp
.text:000004BB                 pop     ebp
.text:000004BC                 retn
.text:000004BC _get_username   endp
.text:000004BC
.text:000004BC ; ---------------------------------------------------------------------------
.text:000004BD                 align 10h
.text:000004C0 $LN24           dd 1                    ; DATA XREF: _get_username+208o
.text:000004C4                 dd offset $LN23
.text:000004C8 $LN23           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000004C4o
.text:000004D0                 dd offset $LN22         ; "namelen"
.text:000004D4 $LN22           db 'namelen',0          ; DATA XREF: .text:000004D0o
.text:000004DC $LN16           db 'user',0             ; DATA XREF: _get_username+BEo
.text:000004DC                                         ; _get_username+F6o ...
.text:000004E1                 align 8
.text:000004E8
.text:000004E8 ; =============== S U B R O U T I N E =======================================
.text:000004E8
.text:000004E8 ; Attributes: bp-based frame
.text:000004E8
.text:000004E8                 public _init_winver
.text:000004E8 _init_winver    proc near
.text:000004E8                 push    ebp
.text:000004E9                 mov     ebp, esp
.text:000004EB                 push    esi
.text:000004EC                 push    94h ; 'ö'       ; Size
.text:000004F1                 push    0               ; Val
.text:000004F3                 push    offset _osVersion ; Dst
.text:000004F8                 call    _memset
.text:000004FD                 add     esp, 0Ch
.text:00000500                 mov     dword ptr ds:_osVersion, 94h ; 'ö'
.text:0000050A                 mov     esi, esp
.text:0000050C                 push    offset _osVersion ; lpVersionInformation
.text:00000511                 call    dword ptr ds:__imp__GetVersionExA@4 ; GetVersionExA(x)
.text:00000517                 cmp     esi, esp
.text:00000519                 call    __RTC_CheckEsp
.text:0000051E                 pop     esi
.text:0000051F                 cmp     ebp, esp
.text:00000521                 call    __RTC_CheckEsp
.text:00000526                 pop     ebp
.text:00000527                 retn
.text:00000527 _init_winver    endp
.text:00000527
.text:00000528
.text:00000528 ; =============== S U B R O U T I N E =======================================
.text:00000528
.text:00000528 ; Attributes: bp-based frame
.text:00000528
.text:00000528                 public _load_system32_dll
.text:00000528 _load_system32_dll proc near            ; CODE XREF: _get_username+30p
.text:00000528
.text:00000528 var_10          = dword ptr -10h
.text:00000528 uSize           = dword ptr -0Ch
.text:00000528 var_8           = dword ptr -8
.text:00000528 lpLibFileName   = dword ptr -4
.text:00000528 arg_0           = dword ptr  8
.text:00000528
.text:00000528                 push    ebp
.text:00000529                 mov     ebp, esp
.text:0000052B                 sub     esp, 10h
.text:0000052E                 push    esi
.text:0000052F                 mov     eax, 0CCCCCCCCh
.text:00000534                 mov     [ebp+var_10], eax
.text:00000537                 mov     [ebp+uSize], eax
.text:0000053A                 mov     [ebp+var_8], eax
.text:0000053D                 mov     [ebp+lpLibFileName], eax
.text:00000540                 cmp     ds:?sysdir@?1??load_system32_dll@@9@9, 0 ; `load_system32_dll'::`2'::sysdir
.text:00000547                 jnz     short loc_5A1
.text:00000549                 mov     [ebp+uSize], 0
.text:00000550
.text:00000550 loc_550:                                ; CODE XREF: _load_system32_dll+77j
.text:00000550                 mov     eax, [ebp+uSize]
.text:00000553                 imul    eax, 3
.text:00000556                 cdq
.text:00000557                 sub     eax, edx
.text:00000559                 sar     eax, 1
.text:0000055B                 add     eax, 200h
.text:00000560                 mov     [ebp+uSize], eax
.text:00000563                 push    1
.text:00000565                 mov     eax, [ebp+uSize]
.text:00000568                 push    eax
.text:00000569                 mov     ecx, ds:?sysdir@?1??load_system32_dll@@9@9 ; `load_system32_dll'::`2'::sysdir
.text:0000056F                 push    ecx
.text:00000570                 call    _saferealloc
.text:00000575                 add     esp, 0Ch
.text:00000578                 mov     ds:?sysdir@?1??load_system32_dll@@9@9, eax ; `load_system32_dll'::`2'::sysdir
.text:0000057D                 mov     esi, esp
.text:0000057F                 mov     edx, [ebp+uSize]
.text:00000582                 push    edx             ; uSize
.text:00000583                 mov     eax, ds:?sysdir@?1??load_system32_dll@@9@9 ; `load_system32_dll'::`2'::sysdir
.text:00000588                 push    eax             ; lpBuffer
.text:00000589                 call    dword ptr ds:__imp__GetSystemDirectoryA@8 ; GetSystemDirectoryA(x,x)
.text:0000058F                 cmp     esi, esp
.text:00000591                 call    __RTC_CheckEsp
.text:00000596                 mov     [ebp+var_10], eax
.text:00000599                 mov     ecx, [ebp+var_10]
.text:0000059C                 cmp     ecx, [ebp+uSize]
.text:0000059F                 jge     short loc_550
.text:000005A1
.text:000005A1 loc_5A1:                                ; CODE XREF: _load_system32_dll+1Fj
.text:000005A1                 push    0
.text:000005A3                 mov     edx, [ebp+arg_0]
.text:000005A6                 push    edx
.text:000005A7                 push    offset $SG86997
.text:000005AC                 mov     eax, ds:?sysdir@?1??load_system32_dll@@9@9 ; `load_system32_dll'::`2'::sysdir
.text:000005B1                 push    eax
.text:000005B2                 call    _dupcat
.text:000005B7                 add     esp, 10h
.text:000005BA                 mov     [ebp+lpLibFileName], eax
.text:000005BD                 mov     esi, esp
.text:000005BF                 mov     ecx, [ebp+lpLibFileName]
.text:000005C2                 push    ecx             ; lpLibFileName
.text:000005C3                 call    dword ptr ds:__imp__LoadLibraryA@4 ; LoadLibraryA(x)
.text:000005C9                 cmp     esi, esp
.text:000005CB                 call    __RTC_CheckEsp
.text:000005D0                 mov     [ebp+var_8], eax
.text:000005D3                 mov     edx, [ebp+lpLibFileName]
.text:000005D6                 push    edx
.text:000005D7                 call    _safefree
.text:000005DC                 add     esp, 4
.text:000005DF                 mov     eax, [ebp+var_8]
.text:000005E2                 pop     esi
.text:000005E3                 add     esp, 10h
.text:000005E6                 cmp     ebp, esp
.text:000005E8                 call    __RTC_CheckEsp
.text:000005ED                 mov     esp, ebp
.text:000005EF                 pop     ebp
.text:000005F0                 retn
.text:000005F0 _load_system32_dll endp
.text:000005F0
.text:000005F0 ; ---------------------------------------------------------------------------
.text:000005F1                 align 8
.text:000005F8
.text:000005F8 ; =============== S U B R O U T I N E =======================================
.text:000005F8
.text:000005F8 ; Attributes: bp-based frame
.text:000005F8
.text:000005F8 ; int __cdecl win_strerror(DWORD dwMessageId)
.text:000005F8                 public _win_strerror
.text:000005F8 _win_strerror   proc near
.text:000005F8
.text:000005F8 var_10014       = dword ptr -10014h
.text:000005F8 var_1000D       = byte ptr -1000Dh
.text:000005F8 Buffer          = byte ptr -1000Ch
.text:000005F8 var_8           = dword ptr -8
.text:000005F8 var_4           = dword ptr -4
.text:000005F8 dwMessageId     = dword ptr  8
.text:000005F8
.text:000005F8                 push    ebp
.text:000005F9                 mov     ebp, esp
.text:000005FB                 mov     eax, 10014h
.text:00000600                 call    __chkstk
.text:00000605                 push    esi
.text:00000606                 push    edi
.text:00000607                 lea     edi, [ebp+var_10014]
.text:0000060D                 mov     ecx, 4005h
.text:00000612                 mov     eax, 0CCCCCCCCh
.text:00000617                 rep stosd
.text:00000619                 mov     eax, dword ptr ds:___security_cookie
.text:0000061E                 xor     eax, ebp
.text:00000620                 mov     [ebp+var_4], eax
.text:00000623                 cmp     ds:_errstrings, 0
.text:0000062A                 jnz     short loc_63E
.text:0000062C                 push    offset _errstring_compare
.text:00000631                 call    _newtree234
.text:00000636                 add     esp, 4
.text:00000639                 mov     ds:_errstrings, eax
.text:0000063E
.text:0000063E loc_63E:                                ; CODE XREF: _win_strerror+32j
.text:0000063E                 push    offset _errstring_find
.text:00000643                 lea     eax, [ebp+dwMessageId]
.text:00000646                 push    eax
.text:00000647                 mov     ecx, ds:_errstrings
.text:0000064D                 push    ecx
.text:0000064E                 call    _find234
.text:00000653                 add     esp, 0Ch
.text:00000656                 mov     [ebp+var_8], eax
.text:00000659                 cmp     [ebp+var_8], 0
.text:0000065D                 jnz     loc_740
.text:00000663                 push    8
.text:00000665                 push    1
.text:00000667                 call    _safemalloc
.text:0000066C                 add     esp, 8
.text:0000066F                 mov     [ebp+var_8], eax
.text:00000672                 mov     edx, [ebp+var_8]
.text:00000675                 mov     eax, [ebp+dwMessageId]
.text:00000678                 mov     [edx], eax
.text:0000067A                 mov     esi, esp
.text:0000067C                 push    0               ; Arguments
.text:0000067E                 push    0FFFFh          ; nSize
.text:00000683                 lea     ecx, [ebp+Buffer]
.text:00000689                 push    ecx             ; lpBuffer
.text:0000068A                 push    400h            ; dwLanguageId
.text:0000068F                 mov     edx, [ebp+dwMessageId]
.text:00000692                 push    edx             ; dwMessageId
.text:00000693                 push    0               ; lpSource
.text:00000695                 push    1200h           ; dwFlags
.text:0000069A                 call    dword ptr ds:__imp__FormatMessageA@28 ; FormatMessageA(x,x,x,x,x,x,x)
.text:000006A0                 cmp     esi, esp
.text:000006A2                 call    __RTC_CheckEsp
.text:000006A7                 test    eax, eax
.text:000006A9                 jnz     short loc_6D1
.text:000006AB                 mov     esi, esp
.text:000006AD                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000006B3                 cmp     esi, esp
.text:000006B5                 call    __RTC_CheckEsp
.text:000006BA                 push    eax
.text:000006BB                 push    offset $SG87037 ; "(unable to format: FormatMessage return"...
.text:000006C0                 lea     eax, [ebp+Buffer]
.text:000006C6                 push    eax             ; Dest
.text:000006C7                 call    _sprintf
.text:000006CC                 add     esp, 0Ch
.text:000006CF                 jmp     short loc_710
.text:000006D1 ; ---------------------------------------------------------------------------
.text:000006D1
.text:000006D1 loc_6D1:                                ; CODE XREF: _win_strerror+B1j
.text:000006D1                 lea     ecx, [ebp+Buffer]
.text:000006D7                 push    ecx             ; Str
.text:000006D8                 call    _strlen
.text:000006DD                 add     esp, 4
.text:000006E0                 mov     [ebp+var_10014], eax
.text:000006E6                 cmp     [ebp+var_10014], 0
.text:000006ED                 jle     short loc_710
.text:000006EF                 mov     edx, [ebp+var_10014]
.text:000006F5                 movsx   eax, [ebp+edx+var_1000D]
.text:000006FD                 cmp     eax, 0Ah
.text:00000700                 jnz     short loc_710
.text:00000702                 mov     ecx, [ebp+var_10014]
.text:00000708                 mov     [ebp+ecx+var_1000D], 0
.text:00000710
.text:00000710 loc_710:                                ; CODE XREF: _win_strerror+D7j
.text:00000710                                         ; _win_strerror+F5j ...
.text:00000710                 lea     edx, [ebp+Buffer]
.text:00000716                 push    edx
.text:00000717                 mov     eax, [ebp+dwMessageId]
.text:0000071A                 push    eax
.text:0000071B                 push    offset $SG87041 ; "Error %d: %s"
.text:00000720                 call    _dupprintf
.text:00000725                 add     esp, 0Ch
.text:00000728                 mov     ecx, [ebp+var_8]
.text:0000072B                 mov     [ecx+4], eax
.text:0000072E                 mov     edx, [ebp+var_8]
.text:00000731                 push    edx
.text:00000732                 mov     eax, ds:_errstrings
.text:00000737                 push    eax
.text:00000738                 call    _add234
.text:0000073D                 add     esp, 8
.text:00000740
.text:00000740 loc_740:                                ; CODE XREF: _win_strerror+65j
.text:00000740                 mov     ecx, [ebp+var_8]
.text:00000743                 mov     eax, [ecx+4]
.text:00000746                 push    edx
.text:00000747                 mov     ecx, ebp
.text:00000749                 push    eax
.text:0000074A                 lea     edx, $LN10
.text:00000750                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000755                 pop     eax
.text:00000756                 pop     edx
.text:00000757                 pop     edi
.text:00000758                 pop     esi
.text:00000759                 mov     ecx, [ebp+var_4]
.text:0000075C                 xor     ecx, ebp
.text:0000075E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000763                 add     esp, 10014h
.text:00000769                 cmp     ebp, esp
.text:0000076B                 call    __RTC_CheckEsp
.text:00000770                 mov     esp, ebp
.text:00000772                 pop     ebp
.text:00000773                 retn
.text:00000773 _win_strerror   endp
.text:00000773
.text:00000773 ; ---------------------------------------------------------------------------
.text:00000774 $LN10           dd 1                    ; DATA XREF: _win_strerror+152o
.text:00000778                 dd offset $LN9
.text:0000077C $LN9            dd 0FFFEFFF4h, 10000h   ; DATA XREF: .text:00000778o
.text:00000784                 dd offset $LN8          ; "msgtext"
.text:00000788 $LN8            db 'msgtext',0          ; DATA XREF: .text:00000784o
.text:00000790                 db 8 dup(0CCh)
.text:00000798
.text:00000798 ; =============== S U B R O U T I N E =======================================
.text:00000798
.text:00000798 ; Attributes: bp-based frame
.text:00000798
.text:00000798 _errstring_find proc near               ; CODE XREF: _errstring_compare+19p
.text:00000798                                         ; DATA XREF: _win_strerror:loc_63Eo
.text:00000798
.text:00000798 var_8           = dword ptr -8
.text:00000798 var_4           = dword ptr -4
.text:00000798 arg_0           = dword ptr  8
.text:00000798 arg_4           = dword ptr  0Ch
.text:00000798
.text:00000798                 push    ebp
.text:00000799                 mov     ebp, esp
.text:0000079B                 sub     esp, 8
.text:0000079E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AC                 mov     eax, [ebp+arg_0]
.text:000007AF                 mov     [ebp+var_4], eax
.text:000007B2                 mov     ecx, [ebp+arg_4]
.text:000007B5                 mov     [ebp+var_8], ecx
.text:000007B8                 mov     edx, [ebp+var_4]
.text:000007BB                 mov     eax, [ebp+var_8]
.text:000007BE                 mov     ecx, [edx]
.text:000007C0                 cmp     ecx, [eax]
.text:000007C2                 jge     short loc_7C9
.text:000007C4                 or      eax, 0FFFFFFFFh
.text:000007C7                 jmp     short loc_7DE
.text:000007C9 ; ---------------------------------------------------------------------------
.text:000007C9
.text:000007C9 loc_7C9:                                ; CODE XREF: _errstring_find+2Aj
.text:000007C9                 mov     edx, [ebp+var_4]
.text:000007CC                 mov     eax, [ebp+var_8]
.text:000007CF                 mov     ecx, [edx]
.text:000007D1                 cmp     ecx, [eax]
.text:000007D3                 jle     short loc_7DC
.text:000007D5                 mov     eax, 1
.text:000007DA                 jmp     short loc_7DE
.text:000007DC ; ---------------------------------------------------------------------------
.text:000007DC
.text:000007DC loc_7DC:                                ; CODE XREF: _errstring_find+3Bj
.text:000007DC                 xor     eax, eax
.text:000007DE
.text:000007DE loc_7DE:                                ; CODE XREF: _errstring_find+2Fj
.text:000007DE                                         ; _errstring_find+42j
.text:000007DE                 mov     esp, ebp
.text:000007E0                 pop     ebp
.text:000007E1                 retn
.text:000007E1 _errstring_find endp
.text:000007E1
.text:000007E1 ; ---------------------------------------------------------------------------
.text:000007E2                 align 8
.text:000007E8
.text:000007E8 ; =============== S U B R O U T I N E =======================================
.text:000007E8
.text:000007E8 ; Attributes: bp-based frame
.text:000007E8
.text:000007E8 _errstring_compare proc near            ; DATA XREF: _win_strerror+34o
.text:000007E8
.text:000007E8 var_4           = dword ptr -4
.text:000007E8 arg_0           = dword ptr  8
.text:000007E8 arg_4           = dword ptr  0Ch
.text:000007E8
.text:000007E8                 push    ebp
.text:000007E9                 mov     ebp, esp
.text:000007EB                 push    ecx
.text:000007EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007F3                 mov     eax, [ebp+arg_0]
.text:000007F6                 mov     [ebp+var_4], eax
.text:000007F9                 mov     ecx, [ebp+arg_4]
.text:000007FC                 push    ecx
.text:000007FD                 mov     edx, [ebp+var_4]
.text:00000800                 push    edx
.text:00000801                 call    _errstring_find
.text:00000806                 add     esp, 8
.text:00000809                 add     esp, 4
.text:0000080C                 cmp     ebp, esp
.text:0000080E                 call    __RTC_CheckEsp
.text:00000813                 mov     esp, ebp
.text:00000815                 pop     ebp
.text:00000816                 retn
.text:00000816 _errstring_compare endp
.text:00000816
.text:00000816 ; ---------------------------------------------------------------------------
.text:00000817                 align 4
.text:00000818
.text:00000818 ; =============== S U B R O U T I N E =======================================
.text:00000818
.text:00000818 ; Attributes: bp-based frame
.text:00000818
.text:00000818                 public _fontspec_new
.text:00000818 _fontspec_new   proc near               ; CODE XREF: _fontspec_copy+1Ep
.text:00000818                                         ; _fontspec_deserialise+EAp
.text:00000818
.text:00000818 var_4           = dword ptr -4
.text:00000818 arg_0           = dword ptr  8
.text:00000818 arg_4           = dword ptr  0Ch
.text:00000818 arg_8           = dword ptr  10h
.text:00000818 arg_C           = dword ptr  14h
.text:00000818
.text:00000818                 push    ebp
.text:00000819                 mov     ebp, esp
.text:0000081B                 push    ecx
.text:0000081C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000823                 push    10h
.text:00000825                 push    1
.text:00000827                 call    _safemalloc
.text:0000082C                 add     esp, 8
.text:0000082F                 mov     [ebp+var_4], eax
.text:00000832                 mov     eax, [ebp+arg_0]
.text:00000835                 push    eax
.text:00000836                 call    _dupstr
.text:0000083B                 add     esp, 4
.text:0000083E                 mov     ecx, [ebp+var_4]
.text:00000841                 mov     [ecx], eax
.text:00000843                 mov     edx, [ebp+var_4]
.text:00000846                 mov     eax, [ebp+arg_4]
.text:00000849                 mov     [edx+4], eax
.text:0000084C                 mov     ecx, [ebp+var_4]
.text:0000084F                 mov     edx, [ebp+arg_8]
.text:00000852                 mov     [ecx+8], edx
.text:00000855                 mov     eax, [ebp+var_4]
.text:00000858                 mov     ecx, [ebp+arg_C]
.text:0000085B                 mov     [eax+0Ch], ecx
.text:0000085E                 mov     eax, [ebp+var_4]
.text:00000861                 add     esp, 4
.text:00000864                 cmp     ebp, esp
.text:00000866                 call    __RTC_CheckEsp
.text:0000086B                 mov     esp, ebp
.text:0000086D                 pop     ebp
.text:0000086E                 retn
.text:0000086E _fontspec_new   endp
.text:0000086E
.text:0000086E ; ---------------------------------------------------------------------------
.text:0000086F                 db 9 dup(0CCh)
.text:00000878
.text:00000878 ; =============== S U B R O U T I N E =======================================
.text:00000878
.text:00000878 ; Attributes: bp-based frame
.text:00000878
.text:00000878                 public _fontspec_copy
.text:00000878 _fontspec_copy  proc near
.text:00000878
.text:00000878 arg_0           = dword ptr  8
.text:00000878
.text:00000878                 push    ebp
.text:00000879                 mov     ebp, esp
.text:0000087B                 mov     eax, [ebp+arg_0]
.text:0000087E                 mov     ecx, [eax+0Ch]
.text:00000881                 push    ecx
.text:00000882                 mov     edx, [ebp+arg_0]
.text:00000885                 mov     eax, [edx+8]
.text:00000888                 push    eax
.text:00000889                 mov     ecx, [ebp+arg_0]
.text:0000088C                 mov     edx, [ecx+4]
.text:0000088F                 push    edx
.text:00000890                 mov     eax, [ebp+arg_0]
.text:00000893                 mov     ecx, [eax]
.text:00000895                 push    ecx
.text:00000896                 call    _fontspec_new
.text:0000089B                 add     esp, 10h
.text:0000089E                 cmp     ebp, esp
.text:000008A0                 call    __RTC_CheckEsp
.text:000008A5                 pop     ebp
.text:000008A6                 retn
.text:000008A6 _fontspec_copy  endp
.text:000008A6
.text:000008A6 ; ---------------------------------------------------------------------------
.text:000008A7                 align 4
.text:000008A8
.text:000008A8 ; =============== S U B R O U T I N E =======================================
.text:000008A8
.text:000008A8 ; Attributes: bp-based frame
.text:000008A8
.text:000008A8                 public _fontspec_free
.text:000008A8 _fontspec_free  proc near
.text:000008A8
.text:000008A8 arg_0           = dword ptr  8
.text:000008A8
.text:000008A8                 push    ebp
.text:000008A9                 mov     ebp, esp
.text:000008AB                 mov     eax, [ebp+arg_0]
.text:000008AE                 mov     ecx, [eax]
.text:000008B0                 push    ecx
.text:000008B1                 call    _safefree
.text:000008B6                 add     esp, 4
.text:000008B9                 mov     edx, [ebp+arg_0]
.text:000008BC                 push    edx
.text:000008BD                 call    _safefree
.text:000008C2                 add     esp, 4
.text:000008C5                 cmp     ebp, esp
.text:000008C7                 call    __RTC_CheckEsp
.text:000008CC                 pop     ebp
.text:000008CD                 retn
.text:000008CD _fontspec_free  endp
.text:000008CD
.text:000008CD ; ---------------------------------------------------------------------------
.text:000008CE                 db 0Ah dup(0CCh)
.text:000008D8
.text:000008D8 ; =============== S U B R O U T I N E =======================================
.text:000008D8
.text:000008D8 ; Attributes: bp-based frame
.text:000008D8
.text:000008D8                 public _fontspec_serialise
.text:000008D8 _fontspec_serialise proc near
.text:000008D8
.text:000008D8 var_8           = dword ptr -8
.text:000008D8 Dest            = dword ptr -4
.text:000008D8 arg_0           = dword ptr  8
.text:000008D8 arg_4           = dword ptr  0Ch
.text:000008D8
.text:000008D8                 push    ebp
.text:000008D9                 mov     ebp, esp
.text:000008DB                 sub     esp, 8
.text:000008DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000008E5                 mov     [ebp+Dest], 0CCCCCCCCh
.text:000008EC                 mov     eax, [ebp+arg_4]
.text:000008EF                 mov     [ebp+Dest], eax
.text:000008F2                 mov     ecx, [ebp+arg_0]
.text:000008F5                 mov     edx, [ecx]
.text:000008F7                 push    edx             ; Str
.text:000008F8                 call    _strlen
.text:000008FD                 add     esp, 4
.text:00000900                 add     eax, 1
.text:00000903                 mov     [ebp+var_8], eax
.text:00000906                 cmp     [ebp+Dest], 0
.text:0000090A                 jz      loc_9F0
.text:00000910                 mov     eax, [ebp+arg_0]
.text:00000913                 mov     ecx, [eax]
.text:00000915                 push    ecx             ; Source
.text:00000916                 mov     edx, [ebp+Dest]
.text:00000919                 push    edx             ; Dest
.text:0000091A                 call    _strcpy
.text:0000091F                 add     esp, 8
.text:00000922                 mov     eax, [ebp+arg_0]
.text:00000925                 mov     ecx, [eax+4]
.text:00000928                 sar     ecx, 18h
.text:0000092B                 mov     edx, [ebp+Dest]
.text:0000092E                 add     edx, [ebp+var_8]
.text:00000931                 mov     [edx], cl
.text:00000933                 mov     eax, [ebp+arg_0]
.text:00000936                 mov     ecx, [eax+4]
.text:00000939                 sar     ecx, 10h
.text:0000093C                 mov     edx, [ebp+Dest]
.text:0000093F                 add     edx, [ebp+var_8]
.text:00000942                 mov     [edx+1], cl
.text:00000945                 mov     eax, [ebp+arg_0]
.text:00000948                 mov     ecx, [eax+4]
.text:0000094B                 sar     ecx, 8
.text:0000094E                 mov     edx, [ebp+Dest]
.text:00000951                 add     edx, [ebp+var_8]
.text:00000954                 mov     [edx+2], cl
.text:00000957                 mov     eax, [ebp+Dest]
.text:0000095A                 add     eax, [ebp+var_8]
.text:0000095D                 mov     ecx, [ebp+arg_0]
.text:00000960                 mov     dl, [ecx+4]
.text:00000963                 mov     [eax+3], dl
.text:00000966                 mov     eax, [ebp+arg_0]
.text:00000969                 mov     ecx, [eax+8]
.text:0000096C                 sar     ecx, 18h
.text:0000096F                 mov     edx, [ebp+Dest]
.text:00000972                 add     edx, [ebp+var_8]
.text:00000975                 mov     [edx+4], cl
.text:00000978                 mov     eax, [ebp+arg_0]
.text:0000097B                 mov     ecx, [eax+8]
.text:0000097E                 sar     ecx, 10h
.text:00000981                 mov     edx, [ebp+Dest]
.text:00000984                 add     edx, [ebp+var_8]
.text:00000987                 mov     [edx+5], cl
.text:0000098A                 mov     eax, [ebp+arg_0]
.text:0000098D                 mov     ecx, [eax+8]
.text:00000990                 sar     ecx, 8
.text:00000993                 mov     edx, [ebp+Dest]
.text:00000996                 add     edx, [ebp+var_8]
.text:00000999                 mov     [edx+6], cl
.text:0000099C                 mov     eax, [ebp+Dest]
.text:0000099F                 add     eax, [ebp+var_8]
.text:000009A2                 mov     ecx, [ebp+arg_0]
.text:000009A5                 mov     dl, [ecx+8]
.text:000009A8                 mov     [eax+7], dl
.text:000009AB                 mov     eax, [ebp+arg_0]
.text:000009AE                 mov     ecx, [eax+0Ch]
.text:000009B1                 sar     ecx, 18h
.text:000009B4                 mov     edx, [ebp+Dest]
.text:000009B7                 add     edx, [ebp+var_8]
.text:000009BA                 mov     [edx+8], cl
.text:000009BD                 mov     eax, [ebp+arg_0]
.text:000009C0                 mov     ecx, [eax+0Ch]
.text:000009C3                 sar     ecx, 10h
.text:000009C6                 mov     edx, [ebp+Dest]
.text:000009C9                 add     edx, [ebp+var_8]
.text:000009CC                 mov     [edx+9], cl
.text:000009CF                 mov     eax, [ebp+arg_0]
.text:000009D2                 mov     ecx, [eax+0Ch]
.text:000009D5                 sar     ecx, 8
.text:000009D8                 mov     edx, [ebp+Dest]
.text:000009DB                 add     edx, [ebp+var_8]
.text:000009DE                 mov     [edx+0Ah], cl
.text:000009E1                 mov     eax, [ebp+Dest]
.text:000009E4                 add     eax, [ebp+var_8]
.text:000009E7                 mov     ecx, [ebp+arg_0]
.text:000009EA                 mov     dl, [ecx+0Ch]
.text:000009ED                 mov     [eax+0Bh], dl
.text:000009F0
.text:000009F0 loc_9F0:                                ; CODE XREF: _fontspec_serialise+32j
.text:000009F0                 mov     eax, [ebp+var_8]
.text:000009F3                 add     eax, 0Ch
.text:000009F6                 add     esp, 8
.text:000009F9                 cmp     ebp, esp
.text:000009FB                 call    __RTC_CheckEsp
.text:00000A00                 mov     esp, ebp
.text:00000A02                 pop     ebp
.text:00000A03                 retn
.text:00000A03 _fontspec_serialise endp
.text:00000A03
.text:00000A03 ; ---------------------------------------------------------------------------
.text:00000A04                 align 8
.text:00000A08
.text:00000A08 ; =============== S U B R O U T I N E =======================================
.text:00000A08
.text:00000A08 ; Attributes: bp-based frame
.text:00000A08
.text:00000A08                 public _fontspec_deserialise
.text:00000A08 _fontspec_deserialise proc near
.text:00000A08
.text:00000A08 var_8           = dword ptr -8
.text:00000A08 Buf             = dword ptr -4
.text:00000A08 arg_0           = dword ptr  8
.text:00000A08 arg_4           = dword ptr  0Ch
.text:00000A08 arg_8           = dword ptr  10h
.text:00000A08
.text:00000A08                 push    ebp
.text:00000A09                 mov     ebp, esp
.text:00000A0B                 sub     esp, 8
.text:00000A0E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A15                 mov     [ebp+Buf], 0CCCCCCCCh
.text:00000A1C                 mov     eax, [ebp+arg_0]
.text:00000A1F                 mov     [ebp+Buf], eax
.text:00000A22                 cmp     [ebp+arg_4], 0Dh
.text:00000A26                 jge     short loc_A2F
.text:00000A28                 xor     eax, eax
.text:00000A2A                 jmp     loc_AFA
.text:00000A2F ; ---------------------------------------------------------------------------
.text:00000A2F
.text:00000A2F loc_A2F:                                ; CODE XREF: _fontspec_deserialise+1Ej
.text:00000A2F                 mov     ecx, [ebp+arg_4]
.text:00000A32                 sub     ecx, 0Ch
.text:00000A35                 push    ecx             ; MaxCount
.text:00000A36                 push    0               ; Val
.text:00000A38                 mov     edx, [ebp+Buf]
.text:00000A3B                 push    edx             ; Buf
.text:00000A3C                 call    _memchr
.text:00000A41                 add     esp, 0Ch
.text:00000A44                 mov     [ebp+var_8], eax
.text:00000A47                 cmp     [ebp+var_8], 0
.text:00000A4B                 jnz     short loc_A54
.text:00000A4D                 xor     eax, eax
.text:00000A4F                 jmp     loc_AFA
.text:00000A54 ; ---------------------------------------------------------------------------
.text:00000A54
.text:00000A54 loc_A54:                                ; CODE XREF: _fontspec_deserialise+43j
.text:00000A54                 mov     eax, [ebp+var_8]
.text:00000A57                 add     eax, 1
.text:00000A5A                 mov     [ebp+var_8], eax
.text:00000A5D                 mov     ecx, [ebp+var_8]
.text:00000A60                 sub     ecx, [ebp+Buf]
.text:00000A63                 add     ecx, 0Ch
.text:00000A66                 mov     edx, [ebp+arg_8]
.text:00000A69                 mov     [edx], ecx
.text:00000A6B                 mov     eax, [ebp+var_8]
.text:00000A6E                 movzx   ecx, byte ptr [eax+8]
.text:00000A72                 shl     ecx, 18h
.text:00000A75                 mov     edx, [ebp+var_8]
.text:00000A78                 movzx   eax, byte ptr [edx+9]
.text:00000A7C                 shl     eax, 10h
.text:00000A7F                 or      ecx, eax
.text:00000A81                 mov     edx, [ebp+var_8]
.text:00000A84                 movzx   eax, byte ptr [edx+0Ah]
.text:00000A88                 shl     eax, 8
.text:00000A8B                 or      ecx, eax
.text:00000A8D                 mov     edx, [ebp+var_8]
.text:00000A90                 movzx   eax, byte ptr [edx+0Bh]
.text:00000A94                 or      ecx, eax
.text:00000A96                 push    ecx
.text:00000A97                 mov     ecx, [ebp+var_8]
.text:00000A9A                 movzx   edx, byte ptr [ecx+4]
.text:00000A9E                 shl     edx, 18h
.text:00000AA1                 mov     eax, [ebp+var_8]
.text:00000AA4                 movzx   ecx, byte ptr [eax+5]
.text:00000AA8                 shl     ecx, 10h
.text:00000AAB                 or      edx, ecx
.text:00000AAD                 mov     eax, [ebp+var_8]
.text:00000AB0                 movzx   ecx, byte ptr [eax+6]
.text:00000AB4                 shl     ecx, 8
.text:00000AB7                 or      edx, ecx
.text:00000AB9                 mov     eax, [ebp+var_8]
.text:00000ABC                 movzx   ecx, byte ptr [eax+7]
.text:00000AC0                 or      edx, ecx
.text:00000AC2                 push    edx
.text:00000AC3                 mov     edx, [ebp+var_8]
.text:00000AC6                 movzx   eax, byte ptr [edx]
.text:00000AC9                 shl     eax, 18h
.text:00000ACC                 mov     ecx, [ebp+var_8]
.text:00000ACF                 movzx   edx, byte ptr [ecx+1]
.text:00000AD3                 shl     edx, 10h
.text:00000AD6                 or      eax, edx
.text:00000AD8                 mov     ecx, [ebp+var_8]
.text:00000ADB                 movzx   edx, byte ptr [ecx+2]
.text:00000ADF                 shl     edx, 8
.text:00000AE2                 or      eax, edx
.text:00000AE4                 mov     ecx, [ebp+var_8]
.text:00000AE7                 movzx   edx, byte ptr [ecx+3]
.text:00000AEB                 or      eax, edx
.text:00000AED                 push    eax
.text:00000AEE                 mov     eax, [ebp+Buf]
.text:00000AF1                 push    eax
.text:00000AF2                 call    _fontspec_new
.text:00000AF7                 add     esp, 10h
.text:00000AFA
.text:00000AFA loc_AFA:                                ; CODE XREF: _fontspec_deserialise+22j
.text:00000AFA                                         ; _fontspec_deserialise+47j
.text:00000AFA                 add     esp, 8
.text:00000AFD                 cmp     ebp, esp
.text:00000AFF                 call    __RTC_CheckEsp
.text:00000B04                 mov     esp, ebp
.text:00000B06                 pop     ebp
.text:00000B07                 retn
.text:00000B07 _fontspec_deserialise endp
.text:00000B07
.text:00000B07 _text           ends
.text:00000B07
.rtc$TMZ:00000B08 ; ===========================================================================
.rtc$TMZ:00000B08
.rtc$TMZ:00000B08 ; Segment type: Pure data
.rtc$TMZ:00000B08 ; Segment permissions: Read
.rtc$TMZ:00000B08 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000B08                 assume cs:_rtc$TMZ
.rtc$TMZ:00000B08                 ;org 0B08h
.rtc$TMZ:00000B08 ; COMDAT (pick any)
.rtc$TMZ:00000B08 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000B08 _rtc$TMZ        ends
.rtc$TMZ:00000B08
.rtc$IMZ:00000B0C ; ===========================================================================
.rtc$IMZ:00000B0C
.rtc$IMZ:00000B0C ; Segment type: Pure data
.rtc$IMZ:00000B0C ; Segment permissions: Read
.rtc$IMZ:00000B0C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000B0C                 assume cs:_rtc$IMZ
.rtc$IMZ:00000B0C                 ;org 0B0Ch
.rtc$IMZ:00000B0C ; COMDAT (pick any)
.rtc$IMZ:00000B0C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000B0C _rtc$IMZ        ends
.rtc$IMZ:00000B0C
.text:00000B10 ; ===========================================================================
.text:00000B10
.text:00000B10 ; Segment type: Pure code
.text:00000B10 ; Segment permissions: Read/Execute
.text:00000B10 _text           segment para public 'CODE' use32
.text:00000B10                 assume cs:_text
.text:00000B10                 ;org 0B10h
.text:00000B10 ; COMDAT (pick any)
.text:00000B10                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000B10
.text:00000B10 ; =============== S U B R O U T I N E =======================================
.text:00000B10
.text:00000B10 ; Attributes: bp-based frame
.text:00000B10
.text:00000B10 ; PVOID RtlSecureZeroMemory(PVOID ptr, SIZE_T cnt)
.text:00000B10                 public _RtlSecureZeroMemory
.text:00000B10 _RtlSecureZeroMemory proc near          ; CODE XREF: _smemclr+17p
.text:00000B10
.text:00000B10 var_4           = dword ptr -4
.text:00000B10 ptr             = dword ptr  8
.text:00000B10 cnt             = dword ptr  0Ch
.text:00000B10
.text:00000B10                 push    ebp
.text:00000B11                 mov     ebp, esp
.text:00000B13                 push    ecx
.text:00000B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B1B                 mov     eax, [ebp+ptr]
.text:00000B1E                 mov     [ebp+var_4], eax
.text:00000B21
.text:00000B21 loc_B21:                                ; CODE XREF: _RtlSecureZeroMemory+2Fj
.text:00000B21                 cmp     [ebp+cnt], 0
.text:00000B25                 jz      short loc_B41
.text:00000B27                 mov     ecx, [ebp+var_4]
.text:00000B2A                 mov     byte ptr [ecx], 0
.text:00000B2D                 mov     edx, [ebp+var_4]
.text:00000B30                 add     edx, 1
.text:00000B33                 mov     [ebp+var_4], edx
.text:00000B36                 mov     eax, [ebp+cnt]
.text:00000B39                 sub     eax, 1
.text:00000B3C                 mov     [ebp+cnt], eax
.text:00000B3F                 jmp     short loc_B21
.text:00000B41 ; ---------------------------------------------------------------------------
.text:00000B41
.text:00000B41 loc_B41:                                ; CODE XREF: _RtlSecureZeroMemory+15j
.text:00000B41                 mov     eax, [ebp+ptr]
.text:00000B44                 mov     esp, ebp
.text:00000B46                 pop     ebp
.text:00000B47                 retn
.text:00000B47 _RtlSecureZeroMemory endp
.text:00000B47
.text:00000B47 _text           ends
.text:00000B47
UNDEF:00000B50 ; ===========================================================================
UNDEF:00000B50
UNDEF:00000B50 ; Segment type: Externs
UNDEF:00000B50 ; UNDEF
UNDEF:00000B50 ; struct _OSVERSIONINFOA osVersion
UNDEF:00000B50                 extrn _osVersion:near   ; DATA XREF: _init_winver+Bo
UNDEF:00000B50                                         ; _init_winver+18w ...
UNDEF:00000B54                 extrn _dupstr:near      ; CODE XREF: _platform_get_x_display+11p
UNDEF:00000B54                                         ; _filename_from_str+1Ep ...
UNDEF:00000B58 ; char *__cdecl getenv(const char *VarName)
UNDEF:00000B58                 extrn _getenv:near      ; CODE XREF: _platform_get_x_display+8p
UNDEF:00000B5C                 extrn __RTC_CheckEsp:near
UNDEF:00000B5C                                         ; CODE XREF: _platform_get_x_display+1Bp
UNDEF:00000B5C                                         ; _filename_from_str+33p ...
UNDEF:00000B60                 extrn __RTC_Shutdown:near
UNDEF:00000B60                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000B64                 extrn __RTC_InitBase:near
UNDEF:00000B64                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000B68                 extrn _safemalloc:near  ; CODE XREF: _filename_from_str+Fp
UNDEF:00000B68                                         ; _get_username+A9p ...
UNDEF:00000B6C ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00000B6C                 extrn _strcmp:near      ; CODE XREF: _filename_equal+Fp
UNDEF:00000B70                 extrn _safefree:near    ; CODE XREF: _filename_free+9p
UNDEF:00000B70                                         ; _filename_free+15p ...
UNDEF:00000B74 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00000B74                 extrn _strcpy:near      ; CODE XREF: _filename_serialise+3Ep
UNDEF:00000B74                                         ; _fontspec_serialise+42p
UNDEF:00000B78 ; size_t __cdecl strlen(const char *Str)
UNDEF:00000B78                 extrn _strlen:near      ; CODE XREF: _filename_serialise+20p
UNDEF:00000B78                                         ; _win_strerror+E0p ...
UNDEF:00000B7C ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
UNDEF:00000B7C                 extrn _memchr:near      ; CODE XREF: _filename_deserialise+24p
UNDEF:00000B7C                                         ; _fontspec_deserialise+34p
UNDEF:00000B80 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
UNDEF:00000B80                 extrn __imp__GetUserNameA@8:near
UNDEF:00000B80                                         ; CODE XREF: _get_username+15Ap
UNDEF:00000B80                                         ; _get_username+1A4p
UNDEF:00000B80                                         ; DATA XREF: ...
UNDEF:00000B84 ; char *__cdecl strchr(const char *Str, int Val)
UNDEF:00000B84                 extrn _strchr:near      ; CODE XREF: _get_username+109p
UNDEF:00000B88 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00000B88                 extrn __imp__GetProcAddress@8:near
UNDEF:00000B88                                         ; CODE XREF: _get_username+4Cp
UNDEF:00000B88                                         ; DATA XREF: _get_username+4Cr
UNDEF:00000B8C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000B8C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000B8C                                         ; CODE XREF: _get_username+20Ep
UNDEF:00000B8C                                         ; _win_strerror+158p
UNDEF:00000B90                 extrn __RTC_UninitUse:near ; CODE XREF: _get_username+C3p
UNDEF:00000B90                                         ; _get_username+FBp ...
UNDEF:00000B94 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
UNDEF:00000B94                 extrn __imp__GetVersionExA@4:near
UNDEF:00000B94                                         ; CODE XREF: _init_winver+29p
UNDEF:00000B94                                         ; DATA XREF: _init_winver+29r
UNDEF:00000B98 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00000B98                 extrn _memset:near      ; CODE XREF: _init_winver+10p
UNDEF:00000B9C ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
UNDEF:00000B9C                 extrn __imp__LoadLibraryA@4:near
UNDEF:00000B9C                                         ; CODE XREF: _load_system32_dll+9Bp
UNDEF:00000B9C                                         ; DATA XREF: _load_system32_dll+9Br
UNDEF:00000BA0                 extrn _dupcat:near      ; CODE XREF: _load_system32_dll+8Ap
UNDEF:00000BA4 ; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize)
UNDEF:00000BA4                 extrn __imp__GetSystemDirectoryA@8:near
UNDEF:00000BA4                                         ; CODE XREF: _load_system32_dll+61p
UNDEF:00000BA4                                         ; DATA XREF: _load_system32_dll+61r
UNDEF:00000BA8                 extrn _saferealloc:near ; CODE XREF: _load_system32_dll+48p
UNDEF:00000BAC                 extrn _add234:near      ; CODE XREF: _win_strerror+140p
UNDEF:00000BB0                 extrn _dupprintf:near   ; CODE XREF: _win_strerror+128p
UNDEF:00000BB4 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:00000BB4                 extrn _sprintf:near     ; CODE XREF: _win_strerror+CFp
UNDEF:00000BB8 ; DWORD __stdcall GetLastError()
UNDEF:00000BB8                 extrn __imp__GetLastError@0:near
UNDEF:00000BB8                                         ; CODE XREF: _win_strerror+B5p
UNDEF:00000BB8                                         ; DATA XREF: _win_strerror+B5r
UNDEF:00000BBC ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
UNDEF:00000BBC                 extrn __imp__FormatMessageA@28:near
UNDEF:00000BBC                                         ; CODE XREF: _win_strerror+A2p
UNDEF:00000BBC                                         ; DATA XREF: _win_strerror+A2r
UNDEF:00000BC0                 extrn _find234:near     ; CODE XREF: _win_strerror+56p
UNDEF:00000BC4                 extrn _newtree234:near  ; CODE XREF: _win_strerror+39p
UNDEF:00000BC8                 extrn ___security_cookie:near ; DATA XREF: _win_strerror+21r
UNDEF:00000BCC ; __fastcall __security_check_cookie(x)
UNDEF:00000BCC                 extrn @__security_check_cookie@4:near
UNDEF:00000BCC                                         ; CODE XREF: _win_strerror+166p
UNDEF:00000BD0                 extrn __chkstk:near     ; CODE XREF: _win_strerror+8p
UNDEF:00000BD0
UNDEF:00000BD0
UNDEF:00000BD0                 end