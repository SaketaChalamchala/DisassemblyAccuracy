.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : A8F8AC393F9F858B0D6A4BE949E25258
.data:00000000 ; Input CRC32 : FD1CDF44
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\settings.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85659        db  61h ; a             ; DATA XREF: .rdata:_ciphernameso
.data:00000001                 db  65h ; e
.data:00000002                 db  73h ; s
.data:00000003                 db    0
.data:00000004 $SG85660        db 'blowfish',0         ; DATA XREF: .rdata:00001A68o
.data:0000000D                 align 10h
.data:00000010 $SG85661        db '3des',0             ; DATA XREF: .rdata:00001A78o
.data:00000015                 align 4
.data:00000018 $SG85662        db 'WARN',0             ; DATA XREF: .rdata:00001A88o
.data:0000001D                 align 10h
.data:00000020 $SG85663        db 'arcfour',0          ; DATA XREF: .rdata:00001A98o
.data:00000028 $SG85664        db 'des',0              ; DATA XREF: .rdata:00001AA8o
.data:0000002C $SG85666        db 'dh-gex-sha1',0      ; DATA XREF: .data:$SG86030o
.data:0000002C                                         ; .data:$SG86193o ...
.data:00000038 $SG85667        db  64h ; d             ; DATA XREF: .rdata:00001AC8o
.data:00000039                 db  68h ; h
.data:0000003A                 db  2Dh ; -
.data:0000003B                 db  67h ; g
.data:0000003C                 db  72h ; r
.data:0000003D                 db  6Fh ; o
.data:0000003E                 db  75h ; u
.data:0000003F                 db  70h ; p
.data:00000040                 db  31h ; 1
.data:00000041 a4Sha1          db '4-sha1',0           ; DATA XREF: .data:$SG86295o
.data:00000041                                         ; .data:$SG85860o ...
.data:00000048 $SG85668        db 'dh-group1-sha1',0   ; DATA XREF: .rdata:00001AD8o
.data:00000057                 align 4
.data:00000058 $SG85669        db 'rsa',0              ; DATA XREF: .rdata:00001AE8o
.data:0000005C $SG85670        db 'WARN',0             ; DATA XREF: .rdata:00001AF8o
.data:00000061                 align 4
.data:00000064 $SG85671        db 'INTR',0             ; DATA XREF: .rdata:_ttymodeso
.data:00000069                 align 4
.data:0000006C $SG85672        db 'QUIT',0             ; DATA XREF: .rdata:00001B0Co
.data:00000071                 align 4
.data:00000074 $SG85673        db 'ERASE',0            ; DATA XREF: .rdata:00001B10o
.data:0000007A                 align 4
.data:0000007C $SG85674        db 'KILL',0             ; DATA XREF: .rdata:00001B14o
.data:00000081                 align 4
.data:00000084 $SG85675        db 'EOF',0              ; DATA XREF: .rdata:00001B18o
.data:00000088 $SG85676        db 'EOL',0              ; DATA XREF: .rdata:00001B1Co
.data:0000008C $SG85677        db 'EOL2',0             ; DATA XREF: .rdata:00001B20o
.data:00000091                 align 4
.data:00000094 $SG85678        db 'START',0            ; DATA XREF: .rdata:00001B24o
.data:0000009A                 align 4
.data:0000009C $SG85679        db 'STOP',0             ; DATA XREF: .rdata:00001B28o
.data:000000A1                 align 4
.data:000000A4 $SG85680        db 'SUSP',0             ; DATA XREF: .rdata:00001B2Co
.data:000000A9                 align 4
.data:000000AC $SG85681        db 'DSUSP',0            ; DATA XREF: .rdata:00001B30o
.data:000000B2                 align 4
.data:000000B4 $SG85682        db 'REPRINT',0          ; DATA XREF: .rdata:00001B34o
.data:000000BC $SG85683        db 'WERASE',0           ; DATA XREF: .rdata:00001B38o
.data:000000C3                 align 4
.data:000000C4 $SG85684        db 'LNEXT',0            ; DATA XREF: .rdata:00001B3Co
.data:000000CA                 align 4
.data:000000CC $SG85685        db 'FLUSH',0            ; DATA XREF: .rdata:00001B40o
.data:000000D2                 align 4
.data:000000D4 $SG85686        db 'SWTCH',0            ; DATA XREF: .rdata:00001B44o
.data:000000DA                 align 4
.data:000000DC $SG85687        db 'STATUS',0           ; DATA XREF: .rdata:00001B48o
.data:000000E3                 align 4
.data:000000E4 $SG85688        db 'DISCARD',0          ; DATA XREF: .rdata:00001B4Co
.data:000000EC $SG85689        db 'IGNPAR',0           ; DATA XREF: .rdata:00001B50o
.data:000000F3                 align 4
.data:000000F4 $SG85690        db 'PARMRK',0           ; DATA XREF: .rdata:00001B54o
.data:000000FB                 align 4
.data:000000FC $SG85691        db 'INPCK',0            ; DATA XREF: .rdata:00001B58o
.data:00000102                 align 4
.data:00000104 $SG85692        db 'ISTRIP',0           ; DATA XREF: .rdata:00001B5Co
.data:0000010B                 align 4
.data:0000010C $SG85693        db 'INLCR',0            ; DATA XREF: .rdata:00001B60o
.data:00000112                 align 4
.data:00000114 $SG85694        db 'IGNCR',0            ; DATA XREF: .rdata:00001B64o
.data:0000011A                 align 4
.data:0000011C $SG85695        db 'ICRNL',0            ; DATA XREF: .rdata:00001B68o
.data:00000122                 align 4
.data:00000124 $SG85696        db 'IUCLC',0            ; DATA XREF: .rdata:00001B6Co
.data:0000012A                 align 4
.data:0000012C $SG85697        db 'IXON',0             ; DATA XREF: .rdata:00001B70o
.data:00000131                 align 4
.data:00000134 $SG85698        db 'IXANY',0            ; DATA XREF: .rdata:00001B74o
.data:0000013A                 align 4
.data:0000013C $SG85699        db 'IXOFF',0            ; DATA XREF: .rdata:00001B78o
.data:00000142                 align 4
.data:00000144 $SG85700        db 'IMAXBEL',0          ; DATA XREF: .rdata:00001B7Co
.data:0000014C $SG85701        db 'ISIG',0             ; DATA XREF: .rdata:00001B80o
.data:00000151                 align 4
.data:00000154 $SG85702        db 'ICANON',0           ; DATA XREF: .rdata:00001B84o
.data:0000015B                 align 4
.data:0000015C $SG85703        db 'XCASE',0            ; DATA XREF: .rdata:00001B88o
.data:00000162                 align 4
.data:00000164 $SG85704        db 'ECHO',0             ; DATA XREF: .rdata:00001B8Co
.data:00000169                 align 4
.data:0000016C $SG85705        db 'ECHOE',0            ; DATA XREF: .rdata:00001B90o
.data:00000172                 align 4
.data:00000174 $SG85706        db 'ECHOK',0            ; DATA XREF: .rdata:00001B94o
.data:0000017A                 align 4
.data:0000017C $SG85707        db 'ECHONL',0           ; DATA XREF: .rdata:00001B98o
.data:00000183                 align 4
.data:00000184 $SG85708        db 'NOFLSH',0           ; DATA XREF: .rdata:00001B9Co
.data:0000018B                 align 4
.data:0000018C $SG85709        db 'TOSTOP',0           ; DATA XREF: .rdata:00001BA0o
.data:00000193                 align 4
.data:00000194 $SG85710        db 'IEXTEN',0           ; DATA XREF: .rdata:00001BA4o
.data:0000019B                 align 4
.data:0000019C $SG85711        db 'ECHOCTL',0          ; DATA XREF: .rdata:00001BA8o
.data:000001A4 $SG85712        db 'ECHOKE',0           ; DATA XREF: .rdata:00001BACo
.data:000001AB                 align 4
.data:000001AC $SG85713        db 'PENDIN',0           ; DATA XREF: .rdata:00001BB0o
.data:000001B3                 align 4
.data:000001B4 $SG85714        db 'OPOST',0            ; DATA XREF: .rdata:00001BB4o
.data:000001BA                 align 4
.data:000001BC $SG85715        db 'OLCUC',0            ; DATA XREF: .rdata:00001BB8o
.data:000001C2                 align 4
.data:000001C4 $SG85716        db 'ONLCR',0            ; DATA XREF: .rdata:00001BBCo
.data:000001CA                 align 4
.data:000001CC $SG85717        db 'OCRNL',0            ; DATA XREF: .rdata:00001BC0o
.data:000001D2                 align 4
.data:000001D4 $SG85718        db 'ONOCR',0            ; DATA XREF: .rdata:00001BC4o
.data:000001DA                 align 4
.data:000001DC $SG85719        db 'ONLRET',0           ; DATA XREF: .rdata:00001BC8o
.data:000001E3                 align 4
.data:000001E4 $SG85720        db 'CS7',0              ; DATA XREF: .rdata:00001BCCo
.data:000001E8 $SG85721        db 'CS8',0              ; DATA XREF: .rdata:00001BD0o
.data:000001EC $SG85722        db 'PARENB',0           ; DATA XREF: .rdata:00001BD4o
.data:000001F3                 align 4
.data:000001F4 $SG85723        db 'PARODD',0           ; DATA XREF: .rdata:00001BD8o
.data:000001FB                 align 4
.data:000001FC $SG85860        dd offset a4Sha1+3      ; DATA XREF: _gppmap+160o
.data:000001FC                                         ; "ha1"
.data:00000200 ; char _SG85894[]
.data:00000200 $SG85894        dd offset a4Sha1+3      ; DATA XREF: _wmap+E2o
.data:00000200                                         ; "ha1"
.data:00000204 ; wchar_t _SG85984
.data:00000204 $SG85984:                               ; DATA XREF: _gprefs+169o
.data:00000204                 unicode 0, <..\..\..\settings.c>,0
.data:0000022C ; wchar_t _SG85985
.data:0000022C $SG85985:                               ; DATA XREF: _gprefs+16Eo
.data:0000022C                 unicode 0, <mapping[i].v >
.data:0000022C                 dw 3Ch
.data:0000022C                 unicode 0, < 32>,0
.data:00000250 ; wchar_t _SG85995
.data:00000250 $SG85995:                               ; DATA XREF: _gprefs+24Eo
.data:00000250                 unicode 0, <..\..\..\settings.c>,0
.data:00000278 ; wchar_t _SG85996
.data:00000278 $SG85996:                               ; DATA XREF: _gprefs+253o
.data:00000278                 unicode 0, <j >
.data:00000278                 dw 3Ch
.data:00000278                 unicode 0, < n>,0
.data:00000284 $SG86030        dd offset $SG85666      ; DATA XREF: _wprefs+F8o
.data:00000284                                         ; "dh-gex-sha1"
.data:00000288 ; char _SG86032[]
.data:00000288 $SG86032        db '%s%s',0             ; DATA XREF: _wprefs+110o
.data:0000028D                 align 10h
.data:00000290 ; wchar_t _SG86034
.data:00000290 $SG86034:                               ; DATA XREF: _wprefs+139o
.data:00000290                 unicode 0, <..\..\..\settings.c>,0
.data:000002B8 ; wchar_t _SG86035
.data:000002B8 $SG86035:                               ; DATA XREF: _wprefs+13Eo
.data:000002B8                 unicode 0, <p - buf == maxlen>,0
.data:000002DC $SG86052        db 'Present',0          ; DATA XREF: _save_open_settings+28o
.data:000002E4 $SG86053        db 'HostName',0         ; DATA XREF: _save_open_settings+48o
.data:000002ED                 align 10h
.data:000002F0 $SG86054        db 'LogFileName',0      ; DATA XREF: _save_open_settings+68o
.data:000002FC $SG86055        db 'LogType',0          ; DATA XREF: _save_open_settings+88o
.data:00000304 $SG86056        db 'LogFileClash',0     ; DATA XREF: _save_open_settings+A8o
.data:00000311                 align 4
.data:00000314 $SG86057        db 'LogFlush',0         ; DATA XREF: _save_open_settings+C8o
.data:0000031D                 align 10h
.data:00000320 $SG86058        db 'SSHLogOmitPasswords',0
.data:00000320                                         ; DATA XREF: _save_open_settings+E8o
.data:00000334 $SG86059        db 'SSHLogOmitData',0   ; DATA XREF: _save_open_settings+108o
.data:00000343                 align 4
.data:00000344 $SG86060        db 'raw',0              ; DATA XREF: _save_open_settings+119o
.data:00000348 $SG86063        db 'Protocol',0         ; DATA XREF: _save_open_settings+14Do
.data:00000351                 align 4
.data:00000354 $SG86064        db 'PortNumber',0       ; DATA XREF: _save_open_settings+16Do
.data:0000035F                 align 10h
.data:00000360 $SG86065        db 'CloseOnExit',0      ; DATA XREF: _save_open_settings+198o
.data:0000036C $SG86066        db 'WarnOnClose',0      ; DATA XREF: _save_open_settings+1BEo
.data:00000378 $SG86067        db 'PingInterval',0     ; DATA XREF: _save_open_settings+1E6o
.data:00000385                 align 4
.data:00000388 $SG86068        db 'PingIntervalSecs',0 ; DATA XREF: _save_open_settings+20Eo
.data:00000399                 align 4
.data:0000039C $SG86069        db 'TCPNoDelay',0       ; DATA XREF: _save_open_settings+22Eo
.data:000003A7                 align 4
.data:000003A8 $SG86070        db 'TCPKeepalives',0    ; DATA XREF: _save_open_settings+24Eo
.data:000003B6                 align 4
.data:000003B8 $SG86071        db 'TerminalType',0     ; DATA XREF: _save_open_settings+26Eo
.data:000003C5                 align 4
.data:000003C8 $SG86072        db 'TerminalSpeed',0    ; DATA XREF: _save_open_settings+28Eo
.data:000003D6                 align 4
.data:000003D8 $SG86073        db 'TerminalModes',0    ; DATA XREF: _save_open_settings+2A7o
.data:000003E6                 align 4
.data:000003E8 $SG86074        db 'AddressFamily',0    ; DATA XREF: _save_open_settings+2C7o
.data:000003F6                 align 4
.data:000003F8 $SG86075        db 'ProxyExcludeList',0 ; DATA XREF: _save_open_settings+2E7o
.data:00000409                 align 4
.data:0000040C $SG86076        db 'ProxyDNS',0         ; DATA XREF: _save_open_settings+312o
.data:00000415                 align 4
.data:00000418 $SG86077        db 'ProxyLocalhost',0   ; DATA XREF: _save_open_settings+332o
.data:00000427                 align 4
.data:00000428 $SG86078        db 'ProxyMethod',0      ; DATA XREF: _save_open_settings+352o
.data:00000434 $SG86079        db 'ProxyHost',0        ; DATA XREF: _save_open_settings+372o
.data:0000043E                 align 10h
.data:00000440 $SG86080        db 'ProxyPort',0        ; DATA XREF: _save_open_settings+392o
.data:0000044A                 align 4
.data:0000044C $SG86081        db 'ProxyUsername',0    ; DATA XREF: _save_open_settings+3B2o
.data:0000045A                 align 4
.data:0000045C $SG86082        db 'ProxyPassword',0    ; DATA XREF: _save_open_settings+3D2o
.data:0000046A                 align 4
.data:0000046C $SG86083        db 'ProxyTelnetCommand',0
.data:0000046C                                         ; DATA XREF: _save_open_settings+3F2o
.data:0000047F                 align 10h
.data:00000480 $SG86084        db 'Environment',0      ; DATA XREF: _save_open_settings+40Bo
.data:0000048C $SG86085        db 'UserName',0         ; DATA XREF: _save_open_settings+42Bo
.data:00000495                 align 4
.data:00000498 $SG86086        db 'UserNameFromEnvironment',0
.data:00000498                                         ; DATA XREF: _save_open_settings+44Bo
.data:000004B0 $SG86087        db 'LocalUserName',0    ; DATA XREF: _save_open_settings+46Bo
.data:000004BE                 align 10h
.data:000004C0 $SG86088        db 'NoPTY',0            ; DATA XREF: _save_open_settings+48Bo
.data:000004C6                 align 4
.data:000004C8 $SG86089        db 'Compression',0      ; DATA XREF: _save_open_settings+4ABo
.data:000004D4 $SG86090        db 'TryAgent',0         ; DATA XREF: _save_open_settings+4CBo
.data:000004DD                 align 10h
.data:000004E0 $SG86091        db 'AgentFwd',0         ; DATA XREF: _save_open_settings+4EBo
.data:000004E9                 align 4
.data:000004EC $SG86092        db 'GssapiFwd',0        ; DATA XREF: _save_open_settings+50Bo
.data:000004F6                 align 4
.data:000004F8 $SG86093        db 'ChangeUsername',0   ; DATA XREF: _save_open_settings+52Bo
.data:00000507                 align 4
.data:00000508 $SG86094        db 'Cipher',0           ; DATA XREF: _save_open_settings+549o
.data:0000050F                 align 10h
.data:00000510 $SG86095        db 'KEX',0              ; DATA XREF: _save_open_settings+567o
.data:00000514 $SG86096        db 'RekeyTime',0        ; DATA XREF: _save_open_settings+587o
.data:0000051E                 align 10h
.data:00000520 $SG86097        db 'RekeyBytes',0       ; DATA XREF: _save_open_settings+5A7o
.data:0000052B                 align 4
.data:0000052C $SG86098        db 'SshNoAuth',0        ; DATA XREF: _save_open_settings+5C7o
.data:00000536                 align 4
.data:00000538 $SG86099        db 'SshBanner',0        ; DATA XREF: _save_open_settings+5E7o
.data:00000542                 align 4
.data:00000544 $SG86100        db 'AuthTIS',0          ; DATA XREF: _save_open_settings+607o
.data:0000054C $SG86101        db 'AuthKI',0           ; DATA XREF: _save_open_settings+627o
.data:00000553                 align 4
.data:00000554 $SG86102        db 'AuthGSSAPI',0       ; DATA XREF: _save_open_settings+647o
.data:0000055F                 align 10h
.data:00000560 $SG86103        db 'GSSLibs',0          ; DATA XREF: _save_open_settings+66Ao
.data:00000568 $SG86104        db 'GSSCustom',0        ; DATA XREF: _save_open_settings+68Ao
.data:00000572                 align 4
.data:00000574 $SG86105        db 'SshNoShell',0       ; DATA XREF: _save_open_settings+6AAo
.data:0000057F                 align 10h
.data:00000580 $SG86106        db 'SshProt',0          ; DATA XREF: _save_open_settings+6CAo
.data:00000588 $SG86107        db 'LogHost',0          ; DATA XREF: _save_open_settings+6EAo
.data:00000590 $SG86108        db 'SSH2DES',0          ; DATA XREF: _save_open_settings+70Ao
.data:00000598 $SG86109        db 'PublicKeyFile',0    ; DATA XREF: _save_open_settings+72Ao
.data:000005A6                 align 4
.data:000005A8 $SG86110        db 'RemoteCommand',0    ; DATA XREF: _save_open_settings+74Ao
.data:000005B6                 align 4
.data:000005B8 $SG86111        db 'RFCEnviron',0       ; DATA XREF: _save_open_settings+76Ao
.data:000005C3                 align 4
.data:000005C4 $SG86112        db 'PassiveTelnet',0    ; DATA XREF: _save_open_settings+78Ao
.data:000005D2                 align 4
.data:000005D4 $SG86113        db 'BackspaceIsDelete',0
.data:000005D4                                         ; DATA XREF: _save_open_settings+7AAo
.data:000005E6                 align 4
.data:000005E8 $SG86114        db 'RXVTHomeEnd',0      ; DATA XREF: _save_open_settings+7CAo
.data:000005F4 $SG86115        db 'LinuxFunctionKeys',0
.data:000005F4                                         ; DATA XREF: _save_open_settings+7EAo
.data:00000606                 align 4
.data:00000608 $SG86116        db 'NoApplicationKeys',0
.data:00000608                                         ; DATA XREF: _save_open_settings+80Ao
.data:0000061A                 align 4
.data:0000061C $SG86117        db 'NoApplicationCursors',0
.data:0000061C                                         ; DATA XREF: _save_open_settings+82Ao
.data:00000631                 align 4
.data:00000634 $SG86118        db 'NoMouseReporting',0 ; DATA XREF: _save_open_settings+84Ao
.data:00000645                 align 4
.data:00000648 $SG86119        db 'NoRemoteResize',0   ; DATA XREF: _save_open_settings+86Ao
.data:00000657                 align 4
.data:00000658 $SG86120        db 'NoAltScreen',0      ; DATA XREF: _save_open_settings+88Ao
.data:00000664 $SG86121        db 'NoRemoteWinTitle',0 ; DATA XREF: _save_open_settings+8AAo
.data:00000675                 align 4
.data:00000678 $SG86122        db 'RemoteQTitleAction',0
.data:00000678                                         ; DATA XREF: _save_open_settings+8CAo
.data:0000068B                 align 4
.data:0000068C $SG86123        db 'NoDBackspace',0     ; DATA XREF: _save_open_settings+8EAo
.data:00000699                 align 4
.data:0000069C $SG86124        db 'NoRemoteCharset',0  ; DATA XREF: _save_open_settings+90Ao
.data:000006AC $SG86125        db 'ApplicationCursorKeys',0
.data:000006AC                                         ; DATA XREF: _save_open_settings+92Ao
.data:000006C2                 align 4
.data:000006C4 $SG86126        db 'ApplicationKeypad',0
.data:000006C4                                         ; DATA XREF: _save_open_settings+94Ao
.data:000006D6                 align 4
.data:000006D8 $SG86127        db 'NetHackKeypad',0    ; DATA XREF: _save_open_settings+96Ao
.data:000006E6                 align 4
.data:000006E8 $SG86128        db 'AltF4',0            ; DATA XREF: _save_open_settings+98Ao
.data:000006EE                 align 10h
.data:000006F0 $SG86129        db 'AltSpace',0         ; DATA XREF: _save_open_settings+9AAo
.data:000006F9                 align 4
.data:000006FC $SG86130        db 'AltOnly',0          ; DATA XREF: _save_open_settings+9CAo
.data:00000704 $SG86131        db 'ComposeKey',0       ; DATA XREF: _save_open_settings+9EAo
.data:0000070F                 align 10h
.data:00000710 $SG86132        db 'CtrlAltKeys',0      ; DATA XREF: _save_open_settings+A0Ao
.data:0000071C $SG86133        db 'TelnetKey',0        ; DATA XREF: _save_open_settings+A2Ao
.data:00000726                 align 4
.data:00000728 $SG86134        db 'TelnetRet',0        ; DATA XREF: _save_open_settings+A4Ao
.data:00000732                 align 4
.data:00000734 $SG86135        db 'LocalEcho',0        ; DATA XREF: _save_open_settings+A6Ao
.data:0000073E                 align 10h
.data:00000740 $SG86136        db 'LocalEdit',0        ; DATA XREF: _save_open_settings+A8Ao
.data:0000074A                 align 4
.data:0000074C $SG86137        db 'Answerback',0       ; DATA XREF: _save_open_settings+AAAo
.data:00000757                 align 4
.data:00000758 $SG86138        db 'AlwaysOnTop',0      ; DATA XREF: _save_open_settings+ACAo
.data:00000764 $SG86139        db 'FullScreenOnAltEnter',0
.data:00000764                                         ; DATA XREF: _save_open_settings+AEAo
.data:00000779                 align 4
.data:0000077C $SG86140        db 'HideMousePtr',0     ; DATA XREF: _save_open_settings+B0Ao
.data:00000789                 align 4
.data:0000078C $SG86141        db 'SunkenEdge',0       ; DATA XREF: _save_open_settings+B2Ao
.data:00000797                 align 4
.data:00000798 $SG86142        db 'WindowBorder',0     ; DATA XREF: _save_open_settings+B4Ao
.data:000007A5                 align 4
.data:000007A8 $SG86143        db 'CurType',0          ; DATA XREF: _save_open_settings+B6Ao
.data:000007B0 $SG86144        db 'BlinkCur',0         ; DATA XREF: _save_open_settings+B8Ao
.data:000007B9                 align 4
.data:000007BC $SG86145        db 'Beep',0             ; DATA XREF: _save_open_settings+BAAo
.data:000007C1                 align 4
.data:000007C4 $SG86146        db 'BeepInd',0          ; DATA XREF: _save_open_settings+BCAo
.data:000007CC $SG86147        db 'BellWaveFile',0     ; DATA XREF: _save_open_settings+BEAo
.data:000007D9                 align 4
.data:000007DC $SG86148        db 'BellOverload',0     ; DATA XREF: _save_open_settings+C0Ao
.data:000007E9                 align 4
.data:000007EC $SG86149        db 'BellOverloadN',0    ; DATA XREF: _save_open_settings+C2Ao
.data:000007FA                 align 4
.data:000007FC $SG86150        db 'BellOverloadT',0    ; DATA XREF: _save_open_settings+C4Ao
.data:0000080A                 align 4
.data:0000080C $SG86151        db 'BellOverloadS',0    ; DATA XREF: _save_open_settings+C6Ao
.data:0000081A                 align 4
.data:0000081C $SG86152        db 'ScrollbackLines',0  ; DATA XREF: _save_open_settings+C8Ao
.data:0000082C $SG86153        db 'DECOriginMode',0    ; DATA XREF: _save_open_settings+CAAo
.data:0000083A                 align 4
.data:0000083C $SG86154        db 'AutoWrapMode',0     ; DATA XREF: _save_open_settings+CCAo
.data:00000849                 align 4
.data:0000084C $SG86155        db 'LFImpliesCR',0      ; DATA XREF: _save_open_settings+CEAo
.data:00000858 $SG86156        db 'CRImpliesLF',0      ; DATA XREF: _save_open_settings+D0Do
.data:00000864 $SG86157        db 'DisableArabicShaping',0
.data:00000864                                         ; DATA XREF: _save_open_settings+D2Do
.data:00000879                 align 4
.data:0000087C $SG86158        db 'DisableBidi',0      ; DATA XREF: _save_open_settings+D4Do
.data:00000888 $SG86159        db 'WinNameAlways',0    ; DATA XREF: _save_open_settings+D6Do
.data:00000896                 align 4
.data:00000898 $SG86160        db 'WinTitle',0         ; DATA XREF: _save_open_settings+D8Do
.data:000008A1                 align 4
.data:000008A4 $SG86161        db 'TermWidth',0        ; DATA XREF: _save_open_settings+DADo
.data:000008AE                 align 10h
.data:000008B0 $SG86162        db 'TermHeight',0       ; DATA XREF: _save_open_settings+DCDo
.data:000008BB                 align 4
.data:000008BC $SG86163        db 'Font',0             ; DATA XREF: _save_open_settings+DEDo
.data:000008C1                 align 4
.data:000008C4 $SG86164        db 'FontQuality',0      ; DATA XREF: _save_open_settings+E0Do
.data:000008D0 $SG86165        db 'FontVTMode',0       ; DATA XREF: _save_open_settings+E30o
.data:000008DB                 align 4
.data:000008DC $SG86166        db 'UseSystemColours',0 ; DATA XREF: _save_open_settings+E53o
.data:000008ED                 align 10h
.data:000008F0 $SG86167        db 'TryPalette',0       ; DATA XREF: _save_open_settings+E76o
.data:000008FB                 align 4
.data:000008FC $SG86168        db 'ANSIColour',0       ; DATA XREF: _save_open_settings+E96o
.data:00000907                 align 4
.data:00000908 $SG86169        db 'Xterm256Colour',0   ; DATA XREF: _save_open_settings+EB9o
.data:00000917                 align 4
.data:00000918 $SG86170        db 'BoldAsColour',0     ; DATA XREF: _save_open_settings+EDFo
.data:00000925                 align 4
.data:00000928 ; char _SG86176[]
.data:00000928 $SG86176        db 'Colour%d',0         ; DATA XREF: _save_open_settings+F10o
.data:00000931                 align 4
.data:00000934 ; char _SG86177[]
.data:00000934 $SG86177        db '%d,%d,%d',0         ; DATA XREF: _save_open_settings+F72o
.data:0000093D                 align 10h
.data:00000940 $SG86178        db 'RawCNP',0           ; DATA XREF: _save_open_settings+FAEo
.data:00000947                 align 4
.data:00000948 $SG86179        db 'PasteRTF',0         ; DATA XREF: _save_open_settings+FD1o
.data:00000951                 align 4
.data:00000954 $SG86180        db 'MouseIsXterm',0     ; DATA XREF: _save_open_settings+FF4o
.data:00000961                 align 4
.data:00000964 $SG86181        db 'RectSelect',0       ; DATA XREF: _save_open_settings+1017o
.data:0000096F                 align 10h
.data:00000970 $SG86182        db 'MouseOverride',0    ; DATA XREF: _save_open_settings+103Ao
.data:0000097E                 align 10h
.data:00000980 ; char _SG86189[]
.data:00000980 $SG86189        db 'Wordness%d',0       ; DATA XREF: _save_open_settings+106Eo
.data:0000098B                 align 4
.data:0000098C $SG86193        dd offset $SG85666      ; DATA XREF: _save_open_settings+10B9o
.data:0000098C                                         ; "dh-gex-sha1"
.data:00000990 ; char _SG86195[]
.data:00000990 $SG86195        db '%s%d',0             ; DATA XREF: _save_open_settings+10EFo
.data:00000995                 align 4
.data:00000998 $SG86196        db 'LineCodePage',0     ; DATA XREF: _save_open_settings+1146o
.data:000009A5                 align 4
.data:000009A8 $SG86197        db 'CJKAmbigWide',0     ; DATA XREF: _save_open_settings+1169o
.data:000009B5                 align 4
.data:000009B8 $SG86198        db 'UTF8Override',0     ; DATA XREF: _save_open_settings+118Co
.data:000009C5                 align 4
.data:000009C8 $SG86199        db 'Printer',0          ; DATA XREF: _save_open_settings+11ACo
.data:000009D0 $SG86200        db 'CapsLockCyr',0      ; DATA XREF: _save_open_settings+11CFo
.data:000009DC $SG86201        db 'ScrollBar',0        ; DATA XREF: _save_open_settings+11EFo
.data:000009E6                 align 4
.data:000009E8 $SG86202        db 'ScrollBarFullScreen',0
.data:000009E8                                         ; DATA XREF: _save_open_settings+120Fo
.data:000009FC $SG86203        db 'ScrollOnKey',0      ; DATA XREF: _save_open_settings+122Fo
.data:00000A08 $SG86204        db 'ScrollOnDisp',0     ; DATA XREF: _save_open_settings+124Fo
.data:00000A15                 align 4
.data:00000A18 $SG86205        db 'EraseToScrollback',0
.data:00000A18                                         ; DATA XREF: _save_open_settings+126Fo
.data:00000A2A                 align 4
.data:00000A2C $SG86206        db 'LockSize',0         ; DATA XREF: _save_open_settings+128Fo
.data:00000A35                 align 4
.data:00000A38 $SG86207        db 'BCE',0              ; DATA XREF: _save_open_settings+12AFo
.data:00000A3C $SG86208        db 'BlinkText',0        ; DATA XREF: _save_open_settings+12CFo
.data:00000A46                 align 4
.data:00000A48 $SG86209        db 'X11Forward',0       ; DATA XREF: _save_open_settings+12F2o
.data:00000A53                 align 4
.data:00000A54 $SG86210        db 'X11Display',0       ; DATA XREF: _save_open_settings+1315o
.data:00000A5F                 align 10h
.data:00000A60 $SG86211        db 'X11AuthType',0      ; DATA XREF: _save_open_settings+1338o
.data:00000A6C $SG86212        db 'X11AuthFile',0      ; DATA XREF: _save_open_settings+135Bo
.data:00000A78 $SG86213        db 'LocalPortAcceptAll',0
.data:00000A78                                         ; DATA XREF: _save_open_settings+137Eo
.data:00000A8B                 align 4
.data:00000A8C $SG86214        db 'RemotePortAcceptAll',0
.data:00000A8C                                         ; DATA XREF: _save_open_settings+13A1o
.data:00000AA0 $SG86215        db 'PortForwardings',0  ; DATA XREF: _save_open_settings+13BDo
.data:00000AB0 $SG86216        db 'BugIgnore1',0       ; DATA XREF: _save_open_settings+13E7o
.data:00000ABB                 align 4
.data:00000ABC $SG86217        db 'BugPlainPW1',0      ; DATA XREF: _save_open_settings+1411o
.data:00000AC8 $SG86218        db 'BugRSA1',0          ; DATA XREF: _save_open_settings+143Bo
.data:00000AD0 $SG86219        db 'BugIgnore2',0       ; DATA XREF: _save_open_settings+1465o
.data:00000ADB                 align 4
.data:00000ADC $SG86220        db 'BugHMAC2',0         ; DATA XREF: _save_open_settings+148Fo
.data:00000AE5                 align 4
.data:00000AE8 $SG86221        db 'BugDeriveKey2',0    ; DATA XREF: _save_open_settings+14B9o
.data:00000AF6                 align 4
.data:00000AF8 $SG86222        db 'BugRSAPad2',0       ; DATA XREF: _save_open_settings+14E3o
.data:00000B03                 align 4
.data:00000B04 $SG86223        db 'BugPKSessID2',0     ; DATA XREF: _save_open_settings+150Do
.data:00000B11                 align 4
.data:00000B14 $SG86224        db 'BugRekey2',0        ; DATA XREF: _save_open_settings+1537o
.data:00000B1E                 align 10h
.data:00000B20 $SG86225        db 'BugMaxPkt2',0       ; DATA XREF: _save_open_settings+1561o
.data:00000B2B                 align 4
.data:00000B2C $SG86226        db 'BugWinadj',0        ; DATA XREF: _save_open_settings+158Bo
.data:00000B36                 align 4
.data:00000B38 $SG86227        db 'BugChanReq',0       ; DATA XREF: _save_open_settings+15B5o
.data:00000B43                 align 4
.data:00000B44 $SG86228        db 'StampUtmp',0        ; DATA XREF: _save_open_settings+15D8o
.data:00000B4E                 align 10h
.data:00000B50 $SG86229        db 'LoginShell',0       ; DATA XREF: _save_open_settings+15FBo
.data:00000B5B                 align 4
.data:00000B5C $SG86230        db 'ScrollbarOnLeft',0  ; DATA XREF: _save_open_settings+161Eo
.data:00000B6C $SG86231        db 'BoldFont',0         ; DATA XREF: _save_open_settings+1641o
.data:00000B75                 align 4
.data:00000B78 $SG86232        db 'WideFont',0         ; DATA XREF: _save_open_settings+1664o
.data:00000B81                 align 4
.data:00000B84 $SG86233        db 'WideBoldFont',0     ; DATA XREF: _save_open_settings+1687o
.data:00000B91                 align 4
.data:00000B94 $SG86234        db 'ShadowBold',0       ; DATA XREF: _save_open_settings+16AAo
.data:00000B9F                 align 10h
.data:00000BA0 $SG86235        db 'ShadowBoldOffset',0 ; DATA XREF: _save_open_settings+16CDo
.data:00000BB1                 align 4
.data:00000BB4 $SG86236        db 'SerialLine',0       ; DATA XREF: _save_open_settings+16EDo
.data:00000BBF                 align 10h
.data:00000BC0 $SG86237        db 'SerialSpeed',0      ; DATA XREF: _save_open_settings+170Do
.data:00000BCC $SG86238        db 'SerialDataBits',0   ; DATA XREF: _save_open_settings+172Do
.data:00000BDB                 align 4
.data:00000BDC $SG86239        db 'SerialStopHalfbits',0
.data:00000BDC                                         ; DATA XREF: _save_open_settings+174Do
.data:00000BEF                 align 10h
.data:00000BF0 $SG86240        db 'SerialParity',0     ; DATA XREF: _save_open_settings+176Do
.data:00000BFD                 align 10h
.data:00000C00 $SG86241        db 'SerialFlowControl',0
.data:00000C00                                         ; DATA XREF: _save_open_settings+178Do
.data:00000C12                 align 4
.data:00000C14 $SG86242        db 'WindowClass',0      ; DATA XREF: _save_open_settings+17B0o
.data:00000C20 $SG86243        db 'ConnectionSharing',0
.data:00000C20                                         ; DATA XREF: _save_open_settings+17D3o
.data:00000C32                 align 4
.data:00000C34 $SG86244        db 'ConnectionSharingUpstream',0
.data:00000C34                                         ; DATA XREF: _save_open_settings+17F6o
.data:00000C4E                 align 10h
.data:00000C50 $SG86245        db 'ConnectionSharingDownstream',0
.data:00000C50                                         ; DATA XREF: _save_open_settings+1819o
.data:00000C6C $SG86246        db 'SSHManualHostKeys',0
.data:00000C6C                                         ; DATA XREF: _save_open_settings+1835o
.data:00000C7E                 align 10h
.data:00000C80 $SG86265        db 'HostName',0         ; DATA XREF: _load_open_settings+7Ao
.data:00000C89                 align 4
.data:00000C8C $SG86266        db 'LogFileName',0      ; DATA XREF: _load_open_settings+91o
.data:00000C98 $SG86267        db 'LogType',0          ; DATA XREF: _load_open_settings+AAo
.data:00000CA0 $SG86268        db 'LogFileClash',0     ; DATA XREF: _load_open_settings+C3o
.data:00000CAD                 align 10h
.data:00000CB0 $SG86269        db 'LogFlush',0         ; DATA XREF: _load_open_settings+DCo
.data:00000CB9                 align 4
.data:00000CBC $SG86270        db 'SSHLogOmitPasswords',0
.data:00000CBC                                         ; DATA XREF: _load_open_settings+F5o
.data:00000CD0 $SG86271        db 'SSHLogOmitData',0   ; DATA XREF: _load_open_settings+10Eo
.data:00000CDF                 align 10h
.data:00000CE0 $SG86272        db 'default',0          ; DATA XREF: _load_open_settings+11Fo
.data:00000CE8 $SG86273        db 'Protocol',0         ; DATA XREF: _load_open_settings+124o
.data:00000CF1                 align 4
.data:00000CF4 $SG86276        db 'PortNumber',0       ; DATA XREF: _load_open_settings+198o
.data:00000CFF                 align 10h
.data:00000D00 $SG86277        db 'AddressFamily',0    ; DATA XREF: _load_open_settings+1BDo
.data:00000D0E                 align 10h
.data:00000D10 $SG86278        db 'CloseOnExit',0      ; DATA XREF: _load_open_settings+1D0o
.data:00000D1C $SG86279        db 'WarnOnClose',0      ; DATA XREF: _load_open_settings+209o
.data:00000D28 $SG86282        db 'PingInterval',0     ; DATA XREF: _load_open_settings+21Co
.data:00000D35                 align 4
.data:00000D38 $SG86283        db 'PingIntervalSecs',0 ; DATA XREF: _load_open_settings+232o
.data:00000D49                 align 4
.data:00000D4C $SG86284        db 'TCPNoDelay',0       ; DATA XREF: _load_open_settings+266o
.data:00000D57                 align 4
.data:00000D58 $SG86285        db 'TCPKeepalives',0    ; DATA XREF: _load_open_settings+27Fo
.data:00000D66                 align 4
.data:00000D68 $SG86286        db 'xterm',0            ; DATA XREF: _load_open_settings+296o
.data:00000D6E                 align 10h
.data:00000D70 $SG86287        db 'TerminalType',0     ; DATA XREF: _load_open_settings+29Bo
.data:00000D7D                 align 10h
.data:00000D80 $SG86288        db '38400,38400',0      ; DATA XREF: _load_open_settings+2B2o
.data:00000D8C $SG86289        db 'TerminalSpeed',0    ; DATA XREF: _load_open_settings+2B7o
.data:00000D9A                 align 4
.data:00000D9C $SG86291        db 'TerminalModes',0    ; DATA XREF: _load_open_settings+2CEo
.data:00000DAA                 align 4
.data:00000DAC $SG86295        dd offset a4Sha1        ; DATA XREF: _load_open_settings+302o
.data:00000DAC                                         ; "4-sha1"
.data:00000DB0 $SG86297        db 'ProxyExcludeList',0 ; DATA XREF: _load_open_settings+32Do
.data:00000DC1                 align 4
.data:00000DC4 $SG86298        db 'ProxyDNS',0         ; DATA XREF: _load_open_settings+340o
.data:00000DCD                 align 10h
.data:00000DD0 $SG86299        db 'ProxyLocalhost',0   ; DATA XREF: _load_open_settings+379o
.data:00000DDF                 align 10h
.data:00000DE0 $SG86300        db 'ProxyMethod',0      ; DATA XREF: _load_open_settings+392o
.data:00000DEC $SG86303        db 'ProxyType',0        ; DATA XREF: _load_open_settings+3BCo
.data:00000DF6                 align 4
.data:00000DF8 $SG86312        db 'ProxySOCKSVersion',0
.data:00000DF8                                         ; DATA XREF: _load_open_settings+435o
.data:00000E0A                 align 4
.data:00000E0C $SG86315        db 'proxy',0            ; DATA XREF: _load_open_settings+477o
.data:00000E12                 align 4
.data:00000E14 $SG86316        db 'ProxyHost',0        ; DATA XREF: _load_open_settings+47Co
.data:00000E1E                 align 10h
.data:00000E20 $SG86317        db 'ProxyPort',0        ; DATA XREF: _load_open_settings+495o
.data:00000E2A                 align 4
.data:00000E2C $SG86319        db 'ProxyUsername',0    ; DATA XREF: _load_open_settings+4B1o
.data:00000E3A                 align 4
.data:00000E3C $SG86321        db 'ProxyPassword',0    ; DATA XREF: _load_open_settings+4CDo
.data:00000E4A                 align 4
.data:00000E4C $SG86322        db 'connect %host %port\n',0
.data:00000E4C                                         ; DATA XREF: _load_open_settings+4E4o
.data:00000E62                 align 4
.data:00000E64 $SG86323        db 'ProxyTelnetCommand',0
.data:00000E64                                         ; DATA XREF: _load_open_settings+4E9o
.data:00000E77                 align 4
.data:00000E78 $SG86324        db 'Environment',0      ; DATA XREF: _load_open_settings+500o
.data:00000E84 $SG86326        db 'UserName',0         ; DATA XREF: _load_open_settings+51Co
.data:00000E8D                 align 10h
.data:00000E90 $SG86327        db 'UserNameFromEnvironment',0
.data:00000E90                                         ; DATA XREF: _load_open_settings+535o
.data:00000EA8 $SG86329        db 'LocalUserName',0    ; DATA XREF: _load_open_settings+551o
.data:00000EB6                 align 4
.data:00000EB8 $SG86330        db 'NoPTY',0            ; DATA XREF: _load_open_settings+56Ao
.data:00000EBE                 align 10h
.data:00000EC0 $SG86331        db 'Compression',0      ; DATA XREF: _load_open_settings+583o
.data:00000ECC $SG86332        db 'TryAgent',0         ; DATA XREF: _load_open_settings+59Co
.data:00000ED5                 align 4
.data:00000ED8 $SG86333        db 'AgentFwd',0         ; DATA XREF: _load_open_settings+5B5o
.data:00000EE1                 align 4
.data:00000EE4 $SG86334        db 'ChangeUsername',0   ; DATA XREF: _load_open_settings+5CEo
.data:00000EF3                 align 4
.data:00000EF4 $SG86335        db 'GssapiFwd',0        ; DATA XREF: _load_open_settings+5E7o
.data:00000EFE                 align 10h
.data:00000F00 $SG86337        db 'Cipher',0           ; DATA XREF: _load_open_settings+60Ao
.data:00000F07                 align 4
.data:00000F08 $SG86339        db 'BugDHGEx2',0        ; DATA XREF: _load_open_settings+61Do
.data:00000F12                 align 4
.data:00000F14 $SG86341        db 'dh-group14-sha1,dh-group1-sha1,rsa,WARN,dh-gex-sha1',0
.data:00000F14                                         ; DATA XREF: _load_open_settings+63Ao
.data:00000F48 $SG86343        db 'dh-gex-sha1,dh-group14-sha1,dh-group1-sha1,rsa,WARN',0
.data:00000F48                                         ; DATA XREF: _load_open_settings:loc_4203o
.data:00000F7C $SG86344        db 'KEX',0              ; DATA XREF: _load_open_settings+65Bo
.data:00000F80 $SG86345        db 'RekeyTime',0        ; DATA XREF: _load_open_settings+674o
.data:00000F8A                 align 4
.data:00000F8C $SG86346        dd offset loc_4731      ; DATA XREF: _load_open_settings+68Bo
.data:00000F90 $SG86347        db 'RekeyBytes',0       ; DATA XREF: _load_open_settings+690o
.data:00000F9B                 align 4
.data:00000F9C $SG86348        db 'SshProt',0          ; DATA XREF: _load_open_settings+6A9o
.data:00000FA4 $SG86350        db 'LogHost',0          ; DATA XREF: _load_open_settings+6C5o
.data:00000FAC $SG86351        db 'SSH2DES',0          ; DATA XREF: _load_open_settings+6DEo
.data:00000FB4 $SG86352        db 'SshNoAuth',0        ; DATA XREF: _load_open_settings+6F7o
.data:00000FBE                 align 10h
.data:00000FC0 $SG86353        db 'SshBanner',0        ; DATA XREF: _load_open_settings+710o
.data:00000FCA                 align 4
.data:00000FCC $SG86354        db 'AuthTIS',0          ; DATA XREF: _load_open_settings+729o
.data:00000FD4 $SG86355        db 'AuthKI',0           ; DATA XREF: _load_open_settings+742o
.data:00000FDB                 align 4
.data:00000FDC $SG86356        db 'AuthGSSAPI',0       ; DATA XREF: _load_open_settings+75Bo
.data:00000FE7                 align 4
.data:00000FE8 $SG86358        db 'GSSLibs',0          ; DATA XREF: _load_open_settings+783o
.data:00000FF0 $SG86359        db 'GSSCustom',0        ; DATA XREF: _load_open_settings+79Ao
.data:00000FFA                 align 4
.data:00000FFC $SG86360        db 'SshNoShell',0       ; DATA XREF: _load_open_settings+7B3o
.data:00001007                 align 4
.data:00001008 $SG86361        db 'PublicKeyFile',0    ; DATA XREF: _load_open_settings+7CAo
.data:00001016                 align 4
.data:00001018 $SG86363        db 'RemoteCommand',0    ; DATA XREF: _load_open_settings+7E6o
.data:00001026                 align 4
.data:00001028 $SG86364        db 'RFCEnviron',0       ; DATA XREF: _load_open_settings+7FFo
.data:00001033                 align 4
.data:00001034 $SG86365        db 'PassiveTelnet',0    ; DATA XREF: _load_open_settings+818o
.data:00001042                 align 4
.data:00001044 $SG86366        db 'BackspaceIsDelete',0
.data:00001044                                         ; DATA XREF: _load_open_settings+831o
.data:00001056                 align 4
.data:00001058 $SG86367        db 'RXVTHomeEnd',0      ; DATA XREF: _load_open_settings+84Ao
.data:00001064 $SG86368        db 'LinuxFunctionKeys',0
.data:00001064                                         ; DATA XREF: _load_open_settings+863o
.data:00001076                 align 4
.data:00001078 $SG86369        db 'NoApplicationKeys',0
.data:00001078                                         ; DATA XREF: _load_open_settings+87Co
.data:0000108A                 align 4
.data:0000108C $SG86370        db 'NoApplicationCursors',0
.data:0000108C                                         ; DATA XREF: _load_open_settings+895o
.data:000010A1                 align 4
.data:000010A4 $SG86371        db 'NoMouseReporting',0 ; DATA XREF: _load_open_settings+8AEo
.data:000010B5                 align 4
.data:000010B8 $SG86372        db 'NoRemoteResize',0   ; DATA XREF: _load_open_settings+8C7o
.data:000010C7                 align 4
.data:000010C8 $SG86373        db 'NoAltScreen',0      ; DATA XREF: _load_open_settings+8E0o
.data:000010D4 $SG86374        db 'NoRemoteWinTitle',0 ; DATA XREF: _load_open_settings+8F9o
.data:000010E5                 align 4
.data:000010E8 $SG86376        db 'NoRemoteQTitle',0   ; DATA XREF: _load_open_settings+90Co
.data:000010F7                 align 4
.data:000010F8 $SG86377        db 'RemoteQTitleAction',0
.data:000010F8                                         ; DATA XREF: _load_open_settings+931o
.data:0000110B                 align 4
.data:0000110C $SG86378        db 'NoDBackspace',0     ; DATA XREF: _load_open_settings+94Ao
.data:00001119                 align 4
.data:0000111C $SG86379        db 'NoRemoteCharset',0  ; DATA XREF: _load_open_settings+963o
.data:0000112C $SG86380        db 'ApplicationCursorKeys',0
.data:0000112C                                         ; DATA XREF: _load_open_settings+97Co
.data:00001142                 align 4
.data:00001144 $SG86381        db 'ApplicationKeypad',0
.data:00001144                                         ; DATA XREF: _load_open_settings+995o
.data:00001156                 align 4
.data:00001158 $SG86382        db 'NetHackKeypad',0    ; DATA XREF: _load_open_settings+9AEo
.data:00001166                 align 4
.data:00001168 $SG86383        db 'AltF4',0            ; DATA XREF: _load_open_settings+9C7o
.data:0000116E                 align 10h
.data:00001170 $SG86384        db 'AltSpace',0         ; DATA XREF: _load_open_settings+9E0o
.data:00001179                 align 4
.data:0000117C $SG86385        db 'AltOnly',0          ; DATA XREF: _load_open_settings+9F9o
.data:00001184 $SG86386        db 'ComposeKey',0       ; DATA XREF: _load_open_settings+A12o
.data:0000118F                 align 10h
.data:00001190 $SG86387        db 'CtrlAltKeys',0      ; DATA XREF: _load_open_settings+A2Bo
.data:0000119C $SG86388        db 'TelnetKey',0        ; DATA XREF: _load_open_settings+A44o
.data:000011A6                 align 4
.data:000011A8 $SG86389        db 'TelnetRet',0        ; DATA XREF: _load_open_settings+A5Do
.data:000011B2                 align 4
.data:000011B4 $SG86390        db 'LocalEcho',0        ; DATA XREF: _load_open_settings+A76o
.data:000011BE                 align 10h
.data:000011C0 $SG86391        db 'LocalEdit',0        ; DATA XREF: _load_open_settings+A8Fo
.data:000011CA                 align 4
.data:000011CC $SG86392        db 'PuTTY',0            ; DATA XREF: _load_open_settings+AA6o
.data:000011D2                 align 4
.data:000011D4 $SG86393        db 'Answerback',0       ; DATA XREF: _load_open_settings+AABo
.data:000011DF                 align 10h
.data:000011E0 $SG86394        db 'AlwaysOnTop',0      ; DATA XREF: _load_open_settings+AC4o
.data:000011EC $SG86395        db 'FullScreenOnAltEnter',0
.data:000011EC                                         ; DATA XREF: _load_open_settings+ADDo
.data:00001201                 align 4
.data:00001204 $SG86396        db 'HideMousePtr',0     ; DATA XREF: _load_open_settings+AF6o
.data:00001211                 align 4
.data:00001214 $SG86397        db 'SunkenEdge',0       ; DATA XREF: _load_open_settings+B0Fo
.data:0000121F                 align 10h
.data:00001220 $SG86398        db 'WindowBorder',0     ; DATA XREF: _load_open_settings+B28o
.data:0000122D                 align 10h
.data:00001230 $SG86399        db 'CurType',0          ; DATA XREF: _load_open_settings+B41o
.data:00001238 $SG86400        db 'BlinkCur',0         ; DATA XREF: _load_open_settings+B5Ao
.data:00001241                 align 4
.data:00001244 $SG86401        db 'Beep',0             ; DATA XREF: _load_open_settings+B73o
.data:00001249                 align 4
.data:0000124C $SG86402        db 'BeepInd',0          ; DATA XREF: _load_open_settings+B8Co
.data:00001254 $SG86403        db 'BellWaveFile',0     ; DATA XREF: _load_open_settings+BA3o
.data:00001261                 align 4
.data:00001264 $SG86404        db 'BellOverload',0     ; DATA XREF: _load_open_settings+BBCo
.data:00001271                 align 4
.data:00001274 $SG86405        db 'BellOverloadN',0    ; DATA XREF: _load_open_settings+BD5o
.data:00001282                 align 4
.data:00001284 $SG86406        db 'BellOverloadT',0    ; DATA XREF: _load_open_settings+BEBo
.data:00001292                 align 4
.data:00001294 $SG86407        db 'BellOverloadS',0    ; DATA XREF: _load_open_settings+C16o
.data:000012A2                 align 4
.data:000012A4 $SG86408        db 'ScrollbackLines',0  ; DATA XREF: _load_open_settings+C47o
.data:000012B4 $SG86409        db 'DECOriginMode',0    ; DATA XREF: _load_open_settings+C60o
.data:000012C2                 align 4
.data:000012C4 $SG86410        db 'AutoWrapMode',0     ; DATA XREF: _load_open_settings+C79o
.data:000012D1                 align 4
.data:000012D4 $SG86411        db 'LFImpliesCR',0      ; DATA XREF: _load_open_settings+C92o
.data:000012E0 $SG86412        db 'CRImpliesLF',0      ; DATA XREF: _load_open_settings+CAEo
.data:000012EC $SG86413        db 'DisableArabicShaping',0
.data:000012EC                                         ; DATA XREF: _load_open_settings+CC7o
.data:00001301                 align 4
.data:00001304 $SG86414        db 'DisableBidi',0      ; DATA XREF: _load_open_settings+CE0o
.data:00001310 $SG86415        db 'WinNameAlways',0    ; DATA XREF: _load_open_settings+CF9o
.data:0000131E                 align 10h
.data:00001320 $SG86417        db 'WinTitle',0         ; DATA XREF: _load_open_settings+D15o
.data:00001329                 align 4
.data:0000132C $SG86418        db 'TermWidth',0        ; DATA XREF: _load_open_settings+D2Eo
.data:00001336                 align 4
.data:00001338 $SG86419        db 'TermHeight',0       ; DATA XREF: _load_open_settings+D47o
.data:00001343                 align 4
.data:00001344 $SG86420        db 'Font',0             ; DATA XREF: _load_open_settings+D5Eo
.data:00001349                 align 4
.data:0000134C $SG86421        db 'FontQuality',0      ; DATA XREF: _load_open_settings+D77o
.data:00001358 $SG86422        db 'FontVTMode',0       ; DATA XREF: _load_open_settings+D93o
.data:00001363                 align 4
.data:00001364 $SG86423        db 'UseSystemColours',0 ; DATA XREF: _load_open_settings+DAFo
.data:00001375                 align 4
.data:00001378 $SG86424        db 'TryPalette',0       ; DATA XREF: _load_open_settings+DCBo
.data:00001383                 align 4
.data:00001384 $SG86425        db 'ANSIColour',0       ; DATA XREF: _load_open_settings+DE4o
.data:0000138F                 align 10h
.data:00001390 $SG86426        db 'Xterm256Colour',0   ; DATA XREF: _load_open_settings+E00o
.data:0000139F                 align 10h
.data:000013A0 $SG86427        db 'BoldAsColour',0     ; DATA XREF: _load_open_settings+E13o
.data:000013AD                 align 10h
.data:000013B0 $SG86433        db '187,187,187',0      ; DATA XREF: .rdata:`load_open_settings'::`11'::defaultso
.data:000013BC $SG86434        db '255,255,255',0      ; DATA XREF: .rdata:00001BE4o
.data:000013C8 $SG86435        db '0,0,0',0            ; DATA XREF: .rdata:00001BE8o
.data:000013CE                 align 10h
.data:000013D0 $SG86436        db '85,85,85',0         ; DATA XREF: .rdata:00001BECo
.data:000013D9                 align 4
.data:000013DC $SG86437        db '0,0,0',0            ; DATA XREF: .rdata:00001BF0o
.data:000013E2                 align 4
.data:000013E4 $SG86438        db '0,255,0',0          ; DATA XREF: .rdata:00001BF4o
.data:000013EC $SG86439        db '0,0,0',0            ; DATA XREF: .rdata:00001BF8o
.data:000013F2                 align 4
.data:000013F4 $SG86440        db '85,85,85',0         ; DATA XREF: .rdata:00001BFCo
.data:000013FD                 align 10h
.data:00001400 $SG86441        db '187,0,0',0          ; DATA XREF: .rdata:00001C00o
.data:00001408 $SG86442        db '255,85,85',0        ; DATA XREF: .rdata:00001C04o
.data:00001412                 align 4
.data:00001414 $SG86443        db '0,187,0',0          ; DATA XREF: .rdata:00001C08o
.data:0000141C $SG86444        db '85,255,85',0        ; DATA XREF: .rdata:00001C0Co
.data:00001426                 align 4
.data:00001428 $SG86445        db '187,187,0',0        ; DATA XREF: .rdata:00001C10o
.data:00001432                 align 4
.data:00001434 $SG86446        db '255,255,85',0       ; DATA XREF: .rdata:00001C14o
.data:0000143F                 align 10h
.data:00001440 $SG86447        db '0,0,187',0          ; DATA XREF: .rdata:00001C18o
.data:00001448 $SG86448        db '85,85,255',0        ; DATA XREF: .rdata:00001C1Co
.data:00001452                 align 4
.data:00001454 $SG86449        db '187,0,187',0        ; DATA XREF: .rdata:00001C20o
.data:0000145E                 align 10h
.data:00001460 $SG86450        db '255,85,255',0       ; DATA XREF: .rdata:00001C24o
.data:0000146B                 align 4
.data:0000146C $SG86451        db '0,187,187',0        ; DATA XREF: .rdata:00001C28o
.data:00001476                 align 4
.data:00001478 $SG86452        db '85,255,255',0       ; DATA XREF: .rdata:00001C2Co
.data:00001483                 align 4
.data:00001484 $SG86453        db '187,187,187',0      ; DATA XREF: .rdata:00001C30o
.data:00001490 $SG86454        db '255,255,255',0      ; DATA XREF: .rdata:00001C34o
.data:0000149C ; char _SG86460[]
.data:0000149C $SG86460        db 'Colour%d',0         ; DATA XREF: _load_open_settings+E5Fo
.data:000014A5                 align 4
.data:000014A8 ; char _SG86462[]
.data:000014A8 $SG86462        db '%d,%d,%d',0         ; DATA XREF: _load_open_settings+E9Ao
.data:000014B1                 align 4
.data:000014B4 $SG86463        db 'RawCNP',0           ; DATA XREF: _load_open_settings+F26o
.data:000014BB                 align 4
.data:000014BC $SG86464        db 'PasteRTF',0         ; DATA XREF: _load_open_settings+F42o
.data:000014C5                 align 4
.data:000014C8 $SG86465        db 'MouseIsXterm',0     ; DATA XREF: _load_open_settings+F5Eo
.data:000014D5                 align 4
.data:000014D8 $SG86466        db 'RectSelect',0       ; DATA XREF: _load_open_settings+F7Ao
.data:000014E3                 align 4
.data:000014E4 $SG86467        db 'MouseOverride',0    ; DATA XREF: _load_open_settings+F96o
.data:000014F2                 align 4
.data:000014F4 ; char _SG86485[]
.data:000014F4 $SG86485        db 'Wordness%d',0       ; DATA XREF: _load_open_settings+FCAo
.data:000014FF                 align 10h
.data:00001500 $SG86473        db '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0',0
.data:00001500                                         ; DATA XREF: .rdata:`load_open_settings'::`13'::defaultso
.data:00001540 $SG86474        db '0,1,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1',0
.data:00001540                                         ; DATA XREF: .rdata:00001C3Co
.data:00001580 $SG86475        db '1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2',0
.data:00001580                                         ; DATA XREF: .rdata:00001C40o
.data:000015C0 $SG86476        db '1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1',0
.data:000015C0                                         ; DATA XREF: .rdata:00001C44o
.data:00001600 $SG86477        db '1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1',0
.data:00001600                                         ; DATA XREF: .rdata:00001C48o
.data:00001640 $SG86478        db '1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1',0
.data:00001640                                         ; DATA XREF: .rdata:00001C4Co
.data:00001680 $SG86479        db '2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2',0
.data:00001680                                         ; DATA XREF: .rdata:00001C50o
.data:000016C0 $SG86480        db '2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2',0
.data:000016C0                                         ; DATA XREF: .rdata:00001C54o
.data:00001700 $SG86495        db 'LineCodePage',0     ; DATA XREF: _load_open_settings+10EAo
.data:0000170D                 align 10h
.data:00001710 $SG86496        db 'CJKAmbigWide',0     ; DATA XREF: _load_open_settings+1106o
.data:0000171D                 align 10h
.data:00001720 $SG86497        db 'UTF8Override',0     ; DATA XREF: _load_open_settings+1122o
.data:0000172D                 align 10h
.data:00001730 $SG86499        db 'Printer',0          ; DATA XREF: _load_open_settings+113Eo
.data:00001738 $SG86500        db 'CapsLockCyr',0      ; DATA XREF: _load_open_settings+115Ao
.data:00001744 $SG86501        db 'ScrollBar',0        ; DATA XREF: _load_open_settings+1173o
.data:0000174E                 align 10h
.data:00001750 $SG86502        db 'ScrollBarFullScreen',0
.data:00001750                                         ; DATA XREF: _load_open_settings+118Co
.data:00001764 $SG86503        db 'ScrollOnKey',0      ; DATA XREF: _load_open_settings+11A5o
.data:00001770 $SG86504        db 'ScrollOnDisp',0     ; DATA XREF: _load_open_settings+11BEo
.data:0000177D                 align 10h
.data:00001780 $SG86505        db 'EraseToScrollback',0
.data:00001780                                         ; DATA XREF: _load_open_settings+11D7o
.data:00001792                 align 4
.data:00001794 $SG86506        db 'LockSize',0         ; DATA XREF: _load_open_settings+11F0o
.data:0000179D                 align 10h
.data:000017A0 $SG86507        db 'BCE',0              ; DATA XREF: _load_open_settings+1209o
.data:000017A4 $SG86508        db 'BlinkText',0        ; DATA XREF: _load_open_settings+1222o
.data:000017AE                 align 10h
.data:000017B0 $SG86509        db 'X11Forward',0       ; DATA XREF: _load_open_settings+123Eo
.data:000017BB                 align 4
.data:000017BC $SG86511        db 'X11Display',0       ; DATA XREF: _load_open_settings+125Do
.data:000017C7                 align 4
.data:000017C8 $SG86512        db 'X11AuthType',0      ; DATA XREF: _load_open_settings+1279o
.data:000017D4 $SG86513        db 'X11AuthFile',0      ; DATA XREF: _load_open_settings+1293o
.data:000017E0 $SG86514        db 'LocalPortAcceptAll',0
.data:000017E0                                         ; DATA XREF: _load_open_settings+12AFo
.data:000017F3                 align 4
.data:000017F4 $SG86515        db 'RemotePortAcceptAll',0
.data:000017F4                                         ; DATA XREF: _load_open_settings+12CBo
.data:00001808 $SG86516        db 'PortForwardings',0  ; DATA XREF: _load_open_settings+12E5o
.data:00001818 $SG86517        db 'BugIgnore1',0       ; DATA XREF: _load_open_settings+12F8o
.data:00001823                 align 4
.data:00001824 $SG86518        db 'BugPlainPW1',0      ; DATA XREF: _load_open_settings+1328o
.data:00001830 $SG86519        db 'BugRSA1',0          ; DATA XREF: _load_open_settings+1358o
.data:00001838 $SG86520        db 'BugIgnore2',0       ; DATA XREF: _load_open_settings+1388o
.data:00001843                 align 4
.data:00001844 $SG86522        db 'BugHMAC2',0         ; DATA XREF: _load_open_settings+13B8o
.data:0000184D                 align 10h
.data:00001850 $SG86524        db 'BuggyMAC',0         ; DATA XREF: _load_open_settings+13FEo
.data:00001859                 align 4
.data:0000185C $SG86526        db 'BugDeriveKey2',0    ; DATA XREF: _load_open_settings+1433o
.data:0000186A                 align 4
.data:0000186C $SG86527        db 'BugRSAPad2',0       ; DATA XREF: _load_open_settings+1463o
.data:00001877                 align 4
.data:00001878 $SG86528        db 'BugPKSessID2',0     ; DATA XREF: _load_open_settings+1493o
.data:00001885                 align 4
.data:00001888 $SG86529        db 'BugRekey2',0        ; DATA XREF: _load_open_settings+14C3o
.data:00001892                 align 4
.data:00001894 $SG86530        db 'BugMaxPkt2',0       ; DATA XREF: _load_open_settings+14F3o
.data:0000189F                 align 10h
.data:000018A0 $SG86531        db 'BugWinadj',0        ; DATA XREF: _load_open_settings+1523o
.data:000018AA                 align 4
.data:000018AC $SG86532        db 'BugChanReq',0       ; DATA XREF: _load_open_settings+1553o
.data:000018B7                 align 4
.data:000018B8 $SG86533        db 'StampUtmp',0        ; DATA XREF: _load_open_settings+159Fo
.data:000018C2                 align 4
.data:000018C4 $SG86534        db 'LoginShell',0       ; DATA XREF: _load_open_settings+15BBo
.data:000018CF                 align 10h
.data:000018D0 $SG86535        db 'ScrollbarOnLeft',0  ; DATA XREF: _load_open_settings+15D7o
.data:000018E0 $SG86536        db 'ShadowBold',0       ; DATA XREF: _load_open_settings+15F3o
.data:000018EB                 align 4
.data:000018EC $SG86537        db 'BoldFont',0         ; DATA XREF: _load_open_settings+160Do
.data:000018F5                 align 4
.data:000018F8 $SG86538        db 'WideFont',0         ; DATA XREF: _load_open_settings+1627o
.data:00001901                 align 4
.data:00001904 $SG86539        db 'WideBoldFont',0     ; DATA XREF: _load_open_settings+1641o
.data:00001911                 align 4
.data:00001914 $SG86540        db 'ShadowBoldOffset',0 ; DATA XREF: _load_open_settings+165Do
.data:00001925                 align 4
.data:00001928 $SG86542        db 'SerialLine',0       ; DATA XREF: _load_open_settings+1679o
.data:00001933                 align 4
.data:00001934 $SG86543        db 'SerialSpeed',0      ; DATA XREF: _load_open_settings+1695o
.data:00001940 $SG86544        db 'SerialDataBits',0   ; DATA XREF: _load_open_settings+16AEo
.data:0000194F                 align 10h
.data:00001950 $SG86545        db 'SerialStopHalfbits',0
.data:00001950                                         ; DATA XREF: _load_open_settings+16C7o
.data:00001963                 align 4
.data:00001964 $SG86546        db 'SerialParity',0     ; DATA XREF: _load_open_settings+16E0o
.data:00001971                 align 4
.data:00001974 $SG86547        db 'SerialFlowControl',0
.data:00001974                                         ; DATA XREF: _load_open_settings+16F9o
.data:00001986                 align 4
.data:00001988 $SG86549        db 'WindowClass',0      ; DATA XREF: _load_open_settings+1718o
.data:00001994 $SG86550        db 'ConnectionSharing',0
.data:00001994                                         ; DATA XREF: _load_open_settings+1734o
.data:000019A6                 align 4
.data:000019A8 $SG86551        db 'ConnectionSharingUpstream',0
.data:000019A8                                         ; DATA XREF: _load_open_settings+1750o
.data:000019C2                 align 4
.data:000019C4 $SG86552        db 'ConnectionSharingDownstream',0
.data:000019C4                                         ; DATA XREF: _load_open_settings+176Co
.data:000019E0 $SG86553        db 'SSHManualHostKeys',0
.data:000019E0                                         ; DATA XREF: _load_open_settings+1786o
.data:000019F2                 align 4
.data:000019F4 ; char _SG86570[]
.data:000019F4 $SG86570        db 'Default Settings',0 ; DATA XREF: _sessioncmp+24o
.data:00001A05                 align 4
.data:00001A08 ; char _SG86572[]
.data:00001A08 $SG86572        db 'Default Settings',0 ; DATA XREF: _sessioncmp:loc_5F1Eo
.data:00001A19                 align 4
.data:00001A1C ; char _SG86605[]
.data:00001A1C $SG86605        db 'Default Settings',0 ; DATA XREF: _get_sesslist+1A9o
.data:00001A2D                 align 10h
.data:00001A30 $SG86611        db 'Default Settings',0 ; DATA XREF: _get_sesslist+21Co
.data:00001A41                 align 4
.data:00001A44 ; char _SG86616[]
.data:00001A44 $SG86616        db 'Default Settings',0 ; DATA XREF: _get_sesslist+245o
.data:00001A55                 align 4
.data:00001A55 _data           ends
.data:00001A55
.rdata:00001A58 ; ===========================================================================
.rdata:00001A58
.rdata:00001A58 ; Segment type: Pure data
.rdata:00001A58 ; Segment permissions: Read
.rdata:00001A58 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00001A58 _rdata          segment para public 'DATA' use32
.rdata:00001A58                 assume cs:_rdata
.rdata:00001A58                 ;org 1A58h
.rdata:00001A58 _ciphernames    dd offset $SG85659      ; DATA XREF: _save_open_settings+544o
.rdata:00001A58                                         ; _load_open_settings+600o
.rdata:00001A5C                 db    3
.rdata:00001A5D                 db    0
.rdata:00001A5E                 db    0
.rdata:00001A5F                 db    0
.rdata:00001A60                 db 0FFh
.rdata:00001A61                 db 0FFh
.rdata:00001A62                 db 0FFh
.rdata:00001A63                 db 0FFh
.rdata:00001A64                 db 0FFh
.rdata:00001A65                 db 0FFh
.rdata:00001A66                 db 0FFh
.rdata:00001A67                 db 0FFh
.rdata:00001A68                 dd offset $SG85660      ; "blowfish"
.rdata:00001A6C                 db    2
.rdata:00001A6D                 db    0
.rdata:00001A6E                 db    0
.rdata:00001A6F                 db    0
.rdata:00001A70                 db 0FFh
.rdata:00001A71                 db 0FFh
.rdata:00001A72                 db 0FFh
.rdata:00001A73                 db 0FFh
.rdata:00001A74                 db 0FFh
.rdata:00001A75                 db 0FFh
.rdata:00001A76                 db 0FFh
.rdata:00001A77                 db 0FFh
.rdata:00001A78                 dd offset $SG85661      ; "3des"
.rdata:00001A7C                 db    1
.rdata:00001A7D                 db    0
.rdata:00001A7E                 db    0
.rdata:00001A7F                 db    0
.rdata:00001A80                 db 0FFh
.rdata:00001A81                 db 0FFh
.rdata:00001A82                 db 0FFh
.rdata:00001A83                 db 0FFh
.rdata:00001A84                 db 0FFh
.rdata:00001A85                 db 0FFh
.rdata:00001A86                 db 0FFh
.rdata:00001A87                 db 0FFh
.rdata:00001A88                 dd offset $SG85662      ; "WARN"
.rdata:00001A8C                 align 10h
.rdata:00001A90                 db 0FFh
.rdata:00001A91                 db 0FFh
.rdata:00001A92                 db 0FFh
.rdata:00001A93                 db 0FFh
.rdata:00001A94                 db 0FFh
.rdata:00001A95                 db 0FFh
.rdata:00001A96                 db 0FFh
.rdata:00001A97                 db 0FFh
.rdata:00001A98                 dd offset $SG85663      ; "arcfour"
.rdata:00001A9C                 db    5
.rdata:00001A9D                 db    0
.rdata:00001A9E                 db    0
.rdata:00001A9F                 db    0
.rdata:00001AA0                 db 0FFh
.rdata:00001AA1                 db 0FFh
.rdata:00001AA2                 db 0FFh
.rdata:00001AA3                 db 0FFh
.rdata:00001AA4                 db 0FFh
.rdata:00001AA5                 db 0FFh
.rdata:00001AA6                 db 0FFh
.rdata:00001AA7                 db 0FFh
.rdata:00001AA8                 dd offset $SG85664      ; "des"
.rdata:00001AAC                 db    4
.rdata:00001AAD                 db    0
.rdata:00001AAE                 db    0
.rdata:00001AAF                 db    0
.rdata:00001AB0                 db 0FFh
.rdata:00001AB1                 db 0FFh
.rdata:00001AB2                 db 0FFh
.rdata:00001AB3                 db 0FFh
.rdata:00001AB4                 db 0FFh
.rdata:00001AB5                 db 0FFh
.rdata:00001AB6                 db 0FFh
.rdata:00001AB7                 db 0FFh
.rdata:00001AB8 _kexnames       dd offset $SG85666      ; DATA XREF: _save_open_settings+562o
.rdata:00001AB8                                         ; _load_open_settings+652o
.rdata:00001AB8                                         ; "dh-gex-sha1"
.rdata:00001ABC                 db    3
.rdata:00001ABD                 db    0
.rdata:00001ABE                 db    0
.rdata:00001ABF                 db    0
.rdata:00001AC0                 db 0FFh
.rdata:00001AC1                 db 0FFh
.rdata:00001AC2                 db 0FFh
.rdata:00001AC3                 db 0FFh
.rdata:00001AC4                 db 0FFh
.rdata:00001AC5                 db 0FFh
.rdata:00001AC6                 db 0FFh
.rdata:00001AC7                 db 0FFh
.rdata:00001AC8                 dd offset $SG85667
.rdata:00001ACC                 db    2
.rdata:00001ACD                 db    0
.rdata:00001ACE                 db    0
.rdata:00001ACF                 db    0
.rdata:00001AD0                 db 0FFh
.rdata:00001AD1                 db 0FFh
.rdata:00001AD2                 db 0FFh
.rdata:00001AD3                 db 0FFh
.rdata:00001AD4                 db 0FFh
.rdata:00001AD5                 db 0FFh
.rdata:00001AD6                 db 0FFh
.rdata:00001AD7                 db 0FFh
.rdata:00001AD8                 dd offset $SG85668      ; "dh-group1-sha1"
.rdata:00001ADC                 db    1
.rdata:00001ADD                 db    0
.rdata:00001ADE                 db    0
.rdata:00001ADF                 db    0
.rdata:00001AE0                 db 0FFh
.rdata:00001AE1                 db 0FFh
.rdata:00001AE2                 db 0FFh
.rdata:00001AE3                 db 0FFh
.rdata:00001AE4                 db 0FFh
.rdata:00001AE5                 db 0FFh
.rdata:00001AE6                 db 0FFh
.rdata:00001AE7                 db 0FFh
.rdata:00001AE8                 dd offset $SG85669      ; "rsa"
.rdata:00001AEC                 db    4
.rdata:00001AED                 db    0
.rdata:00001AEE                 db    0
.rdata:00001AEF                 db    0
.rdata:00001AF0                 db    0
.rdata:00001AF1                 db    0
.rdata:00001AF2                 db    0
.rdata:00001AF3                 db    0
.rdata:00001AF4                 db 0FFh
.rdata:00001AF5                 db 0FFh
.rdata:00001AF6                 db 0FFh
.rdata:00001AF7                 db 0FFh
.rdata:00001AF8                 dd offset $SG85670      ; "WARN"
.rdata:00001AFC                 align 10h
.rdata:00001B00                 db 0FFh
.rdata:00001B01                 db 0FFh
.rdata:00001B02                 db 0FFh
.rdata:00001B03                 db 0FFh
.rdata:00001B04                 db 0FFh
.rdata:00001B05                 db 0FFh
.rdata:00001B06                 db 0FFh
.rdata:00001B07                 db 0FFh
.rdata:00001B08                 public _ttymodes
.rdata:00001B08 _ttymodes       dd offset $SG85671      ; DATA XREF: _load_open_settings+2F8r
.rdata:00001B08                                         ; _load_open_settings+30Ar
.rdata:00001B08                                         ; "INTR"
.rdata:00001B0C                 dd offset $SG85672      ; "QUIT"
.rdata:00001B10                 dd offset $SG85673      ; "ERASE"
.rdata:00001B14                 dd offset $SG85674      ; "KILL"
.rdata:00001B18                 dd offset $SG85675      ; "EOF"
.rdata:00001B1C                 dd offset $SG85676      ; "EOL"
.rdata:00001B20                 dd offset $SG85677      ; "EOL2"
.rdata:00001B24                 dd offset $SG85678      ; "START"
.rdata:00001B28                 dd offset $SG85679      ; "STOP"
.rdata:00001B2C                 dd offset $SG85680      ; "SUSP"
.rdata:00001B30                 dd offset $SG85681      ; "DSUSP"
.rdata:00001B34                 dd offset $SG85682      ; "REPRINT"
.rdata:00001B38                 dd offset $SG85683      ; "WERASE"
.rdata:00001B3C                 dd offset $SG85684      ; "LNEXT"
.rdata:00001B40                 dd offset $SG85685      ; "FLUSH"
.rdata:00001B44                 dd offset $SG85686      ; "SWTCH"
.rdata:00001B48                 dd offset $SG85687      ; "STATUS"
.rdata:00001B4C                 dd offset $SG85688      ; "DISCARD"
.rdata:00001B50                 dd offset $SG85689      ; "IGNPAR"
.rdata:00001B54                 dd offset $SG85690      ; "PARMRK"
.rdata:00001B58                 dd offset $SG85691      ; "INPCK"
.rdata:00001B5C                 dd offset $SG85692      ; "ISTRIP"
.rdata:00001B60                 dd offset $SG85693      ; "INLCR"
.rdata:00001B64                 dd offset $SG85694      ; "IGNCR"
.rdata:00001B68                 dd offset $SG85695      ; "ICRNL"
.rdata:00001B6C                 dd offset $SG85696      ; "IUCLC"
.rdata:00001B70                 dd offset $SG85697      ; "IXON"
.rdata:00001B74                 dd offset $SG85698      ; "IXANY"
.rdata:00001B78                 dd offset $SG85699      ; "IXOFF"
.rdata:00001B7C                 dd offset $SG85700      ; "IMAXBEL"
.rdata:00001B80                 dd offset $SG85701      ; "ISIG"
.rdata:00001B84                 dd offset $SG85702      ; "ICANON"
.rdata:00001B88                 dd offset $SG85703      ; "XCASE"
.rdata:00001B8C                 dd offset $SG85704      ; "ECHO"
.rdata:00001B90                 dd offset $SG85705      ; "ECHOE"
.rdata:00001B94                 dd offset $SG85706      ; "ECHOK"
.rdata:00001B98                 dd offset $SG85707      ; "ECHONL"
.rdata:00001B9C                 dd offset $SG85708      ; "NOFLSH"
.rdata:00001BA0                 dd offset $SG85709      ; "TOSTOP"
.rdata:00001BA4                 dd offset $SG85710      ; "IEXTEN"
.rdata:00001BA8                 dd offset $SG85711      ; "ECHOCTL"
.rdata:00001BAC                 dd offset $SG85712      ; "ECHOKE"
.rdata:00001BB0                 dd offset $SG85713      ; "PENDIN"
.rdata:00001BB4                 dd offset $SG85714      ; "OPOST"
.rdata:00001BB8                 dd offset $SG85715      ; "OLCUC"
.rdata:00001BBC                 dd offset $SG85716      ; "ONLCR"
.rdata:00001BC0                 dd offset $SG85717      ; "OCRNL"
.rdata:00001BC4                 dd offset $SG85718      ; "ONOCR"
.rdata:00001BC8                 dd offset $SG85719      ; "ONLRET"
.rdata:00001BCC                 dd offset $SG85720      ; "CS7"
.rdata:00001BD0                 dd offset $SG85721      ; "CS8"
.rdata:00001BD4                 dd offset $SG85722      ; "PARENB"
.rdata:00001BD8                 dd offset $SG85723      ; "PARODD"
.rdata:00001BDC                 align 10h
.rdata:00001BE0 ; `load_open_settings'::`11'::defaults
.rdata:00001BE0 ?defaults@?L@??load_open_settings@@9@9 dd offset $SG86433
.rdata:00001BE0                                         ; DATA XREF: _load_open_settings+E73r
.rdata:00001BE0                                         ; "187,187,187"
.rdata:00001BE4                 dd offset $SG86434      ; "255,255,255"
.rdata:00001BE8                 dd offset $SG86435      ; "0,0,0"
.rdata:00001BEC                 dd offset $SG86436      ; "85,85,85"
.rdata:00001BF0                 dd offset $SG86437      ; "0,0,0"
.rdata:00001BF4                 dd offset $SG86438      ; "0,255,0"
.rdata:00001BF8                 dd offset $SG86439      ; "0,0,0"
.rdata:00001BFC                 dd offset $SG86440      ; "85,85,85"
.rdata:00001C00                 dd offset $SG86441      ; "187,0,0"
.rdata:00001C04                 dd offset $SG86442      ; "255,85,85"
.rdata:00001C08                 dd offset $SG86443      ; "0,187,0"
.rdata:00001C0C                 dd offset $SG86444      ; "85,255,85"
.rdata:00001C10                 dd offset $SG86445      ; "187,187,0"
.rdata:00001C14                 dd offset $SG86446      ; "255,255,85"
.rdata:00001C18                 dd offset $SG86447      ; "0,0,187"
.rdata:00001C1C                 dd offset $SG86448      ; "85,85,255"
.rdata:00001C20                 dd offset $SG86449      ; "187,0,187"
.rdata:00001C24                 dd offset $SG86450      ; "255,85,255"
.rdata:00001C28                 dd offset $SG86451      ; "0,187,187"
.rdata:00001C2C                 dd offset $SG86452      ; "85,255,255"
.rdata:00001C30                 dd offset $SG86453      ; "187,187,187"
.rdata:00001C34                 dd offset $SG86454      ; "255,255,255"
.rdata:00001C38 ; `load_open_settings'::`13'::defaults
.rdata:00001C38 ?defaults@?N@??load_open_settings@@9@9 dd offset $SG86473
.rdata:00001C38                                         ; DATA XREF: _load_open_settings+FE7r
.rdata:00001C38                                         ; "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"...
.rdata:00001C3C                 dd offset $SG86474      ; "0,1,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2"...
.rdata:00001C40                 dd offset $SG86475      ; "1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"...
.rdata:00001C44                 dd offset $SG86476      ; "1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"...
.rdata:00001C48                 dd offset $SG86477      ; "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"...
.rdata:00001C4C                 dd offset $SG86478      ; "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"...
.rdata:00001C50                 dd offset $SG86479      ; "2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"...
.rdata:00001C54                 dd offset $SG86480      ; "2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"...
.rdata:00001C54 _rdata          ends
.rdata:00001C54
.bss:00001C58 ; ===========================================================================
.bss:00001C58
.bss:00001C58 ; Segment type: Uninitialized
.bss:00001C58 ; Segment permissions: Read/Write
.bss:00001C58 _bss            segment dword public 'BSS' use32
.bss:00001C58                 assume cs:_bss
.bss:00001C58                 ;org 1C58h
.bss:00001C58                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00001C58 $SG85896        db    ? ;               ; DATA XREF: _wmap+FDo
.bss:00001C59 $SG86031        db    ? ;               ; DATA XREF: _wprefs:loc_3A91o
.bss:00001C5A $SG86194        db    ? ;               ; DATA XREF: _save_open_settings:loc_2EE5o
.bss:00001C5B $SG86261        db    ? ;               ; DATA XREF: _load_open_settings+36o
.bss:00001C5C $SG86262        db    ? ;               ; DATA XREF: _load_open_settings+49o
.bss:00001C5D $SG86263        db    ? ;               ; DATA XREF: _load_open_settings+5Co
.bss:00001C5E $SG86264        db    ? ;               ; DATA XREF: _load_open_settings+75o
.bss:00001C5F $SG86296        db    ? ;               ; DATA XREF: _load_open_settings+328o
.bss:00001C60 $SG86318        db    ? ;               ; DATA XREF: _load_open_settings+4ACo
.bss:00001C61 $SG86320        db    ? ;               ; DATA XREF: _load_open_settings+4C8o
.bss:00001C62 $SG86325        db    ? ;               ; DATA XREF: _load_open_settings+517o
.bss:00001C63 $SG86328        db    ? ;               ; DATA XREF: _load_open_settings+54Co
.bss:00001C64 $SG86336        db    ? ;               ; DATA XREF: _load_open_settings+605o
.bss:00001C65                 db    ? ;
.bss:00001C66 $SG86349        db    ? ;               ; DATA XREF: _load_open_settings+6C0o
.bss:00001C67 $SG86362        db    ? ;               ; DATA XREF: _load_open_settings+7E1o
.bss:00001C68 $SG86357        db    ? ;               ; DATA XREF: _load_open_settings+77Eo
.bss:00001C69                 db    ? ;
.bss:00001C6A $SG86416        db    ? ;               ; DATA XREF: _load_open_settings+D10o
.bss:00001C6B $SG86494        db    ? ;               ; DATA XREF: _load_open_settings+10E5o
.bss:00001C6C $SG86498        db    ? ;               ; DATA XREF: _load_open_settings+1139o
.bss:00001C6D $SG86510        db    ? ;               ; DATA XREF: _load_open_settings+1258o
.bss:00001C6E $SG86541        db    ? ;               ; DATA XREF: _load_open_settings+1674o
.bss:00001C6F $SG86548        db    ? ;               ; DATA XREF: _load_open_settings+1713o
.bss:00001C6F _bss            ends
.bss:00001C6F
.text:00001C70 ; ===========================================================================
.text:00001C70
.text:00001C70 ; Segment type: Pure code
.text:00001C70 ; Segment permissions: Read/Execute
.text:00001C70 _text           segment para public 'CODE' use32
.text:00001C70                 assume cs:_text
.text:00001C70                 ;org 1C70h
.text:00001C70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00001C70
.text:00001C70 ; =============== S U B R O U T I N E =======================================
.text:00001C70
.text:00001C70 ; Attributes: bp-based frame
.text:00001C70
.text:00001C70 ; int __cdecl backend_from_name(char *Str2)
.text:00001C70                 public _backend_from_name
.text:00001C70 _backend_from_name proc near            ; CODE XREF: _load_open_settings+165p
.text:00001C70
.text:00001C70 var_4           = dword ptr -4
.text:00001C70 Str2            = dword ptr  8
.text:00001C70
.text:00001C70                 push    ebp
.text:00001C71                 mov     ebp, esp
.text:00001C73                 push    ecx
.text:00001C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C7B                 mov     [ebp+var_4], offset _backends
.text:00001C82                 jmp     short loc_1C8D
.text:00001C84 ; ---------------------------------------------------------------------------
.text:00001C84
.text:00001C84 loc_1C84:                               ; CODE XREF: _backend_from_name:loc_1CB5j
.text:00001C84                 mov     eax, [ebp+var_4]
.text:00001C87                 add     eax, 4
.text:00001C8A                 mov     [ebp+var_4], eax
.text:00001C8D
.text:00001C8D loc_1C8D:                               ; CODE XREF: _backend_from_name+12j
.text:00001C8D                 mov     ecx, [ebp+var_4]
.text:00001C90                 cmp     dword ptr [ecx], 0
.text:00001C93                 jz      short loc_1CB7
.text:00001C95                 mov     edx, [ebp+Str2]
.text:00001C98                 push    edx             ; Str2
.text:00001C99                 mov     eax, [ebp+var_4]
.text:00001C9C                 mov     ecx, [eax]
.text:00001C9E                 mov     edx, [ecx+40h]
.text:00001CA1                 push    edx             ; Str1
.text:00001CA2                 call    _strcmp
.text:00001CA7                 add     esp, 8
.text:00001CAA                 test    eax, eax
.text:00001CAC                 jnz     short loc_1CB5
.text:00001CAE                 mov     eax, [ebp+var_4]
.text:00001CB1                 mov     eax, [eax]
.text:00001CB3                 jmp     short loc_1CB9
.text:00001CB5 ; ---------------------------------------------------------------------------
.text:00001CB5
.text:00001CB5 loc_1CB5:                               ; CODE XREF: _backend_from_name+3Cj
.text:00001CB5                 jmp     short loc_1C84
.text:00001CB7 ; ---------------------------------------------------------------------------
.text:00001CB7
.text:00001CB7 loc_1CB7:                               ; CODE XREF: _backend_from_name+23j
.text:00001CB7                 xor     eax, eax
.text:00001CB9
.text:00001CB9 loc_1CB9:                               ; CODE XREF: _backend_from_name+43j
.text:00001CB9                 add     esp, 4
.text:00001CBC                 cmp     ebp, esp
.text:00001CBE                 call    __RTC_CheckEsp
.text:00001CC3                 mov     esp, ebp
.text:00001CC5                 pop     ebp
.text:00001CC6                 retn
.text:00001CC6 _backend_from_name endp
.text:00001CC6
.text:00001CC6 ; ---------------------------------------------------------------------------
.text:00001CC7                 align 10h
.text:00001CD0
.text:00001CD0 ; =============== S U B R O U T I N E =======================================
.text:00001CD0
.text:00001CD0 ; Attributes: bp-based frame
.text:00001CD0
.text:00001CD0                 public _backend_from_proto
.text:00001CD0 _backend_from_proto proc near           ; CODE XREF: _save_open_settings+12Fp
.text:00001CD0
.text:00001CD0 var_4           = dword ptr -4
.text:00001CD0 arg_0           = dword ptr  8
.text:00001CD0
.text:00001CD0                 push    ebp
.text:00001CD1                 mov     ebp, esp
.text:00001CD3                 push    ecx
.text:00001CD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CDB                 mov     [ebp+var_4], offset _backends
.text:00001CE2                 jmp     short loc_1CED
.text:00001CE4 ; ---------------------------------------------------------------------------
.text:00001CE4
.text:00001CE4 loc_1CE4:                               ; CODE XREF: _backend_from_proto:loc_1D09j
.text:00001CE4                 mov     eax, [ebp+var_4]
.text:00001CE7                 add     eax, 4
.text:00001CEA                 mov     [ebp+var_4], eax
.text:00001CED
.text:00001CED loc_1CED:                               ; CODE XREF: _backend_from_proto+12j
.text:00001CED                 mov     ecx, [ebp+var_4]
.text:00001CF0                 cmp     dword ptr [ecx], 0
.text:00001CF3                 jz      short loc_1D0B
.text:00001CF5                 mov     edx, [ebp+var_4]
.text:00001CF8                 mov     eax, [edx]
.text:00001CFA                 mov     ecx, [eax+44h]
.text:00001CFD                 cmp     ecx, [ebp+arg_0]
.text:00001D00                 jnz     short loc_1D09
.text:00001D02                 mov     edx, [ebp+var_4]
.text:00001D05                 mov     eax, [edx]
.text:00001D07                 jmp     short loc_1D0D
.text:00001D09 ; ---------------------------------------------------------------------------
.text:00001D09
.text:00001D09 loc_1D09:                               ; CODE XREF: _backend_from_proto+30j
.text:00001D09                 jmp     short loc_1CE4
.text:00001D0B ; ---------------------------------------------------------------------------
.text:00001D0B
.text:00001D0B loc_1D0B:                               ; CODE XREF: _backend_from_proto+23j
.text:00001D0B                 xor     eax, eax
.text:00001D0D
.text:00001D0D loc_1D0D:                               ; CODE XREF: _backend_from_proto+37j
.text:00001D0D                 mov     esp, ebp
.text:00001D0F                 pop     ebp
.text:00001D10                 retn
.text:00001D10 _backend_from_proto endp
.text:00001D10
.text:00001D10 ; ---------------------------------------------------------------------------
.text:00001D11                 align 10h
.text:00001D20
.text:00001D20 ; =============== S U B R O U T I N E =======================================
.text:00001D20
.text:00001D20 ; Attributes: bp-based frame
.text:00001D20
.text:00001D20                 public _get_remote_username
.text:00001D20 _get_remote_username proc near
.text:00001D20
.text:00001D20 var_4           = dword ptr -4
.text:00001D20 arg_0           = dword ptr  8
.text:00001D20
.text:00001D20                 push    ebp
.text:00001D21                 mov     ebp, esp
.text:00001D23                 push    ecx
.text:00001D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D2B                 push    32h ; '2'
.text:00001D2D                 mov     eax, [ebp+arg_0]
.text:00001D30                 push    eax
.text:00001D31                 call    _conf_get_str
.text:00001D36                 add     esp, 8
.text:00001D39                 mov     [ebp+var_4], eax
.text:00001D3C                 mov     ecx, [ebp+var_4]
.text:00001D3F                 movsx   edx, byte ptr [ecx]
.text:00001D42                 test    edx, edx
.text:00001D44                 jz      short loc_1D56
.text:00001D46                 mov     eax, [ebp+var_4]
.text:00001D49                 push    eax
.text:00001D4A                 call    _dupstr
.text:00001D4F                 add     esp, 4
.text:00001D52                 jmp     short loc_1D73
.text:00001D54 ; ---------------------------------------------------------------------------
.text:00001D54                 jmp     short loc_1D73
.text:00001D56 ; ---------------------------------------------------------------------------
.text:00001D56
.text:00001D56 loc_1D56:                               ; CODE XREF: _get_remote_username+24j
.text:00001D56                 push    33h ; '3'
.text:00001D58                 mov     ecx, [ebp+arg_0]
.text:00001D5B                 push    ecx
.text:00001D5C                 call    _conf_get_int
.text:00001D61                 add     esp, 8
.text:00001D64                 test    eax, eax
.text:00001D66                 jz      short loc_1D71
.text:00001D68                 call    _get_username
.text:00001D6D                 jmp     short loc_1D73
.text:00001D6F ; ---------------------------------------------------------------------------
.text:00001D6F                 jmp     short loc_1D73
.text:00001D71 ; ---------------------------------------------------------------------------
.text:00001D71
.text:00001D71 loc_1D71:                               ; CODE XREF: _get_remote_username+46j
.text:00001D71                 xor     eax, eax
.text:00001D73
.text:00001D73 loc_1D73:                               ; CODE XREF: _get_remote_username+32j
.text:00001D73                                         ; _get_remote_username+34j ...
.text:00001D73                 add     esp, 4
.text:00001D76                 cmp     ebp, esp
.text:00001D78                 call    __RTC_CheckEsp
.text:00001D7D                 mov     esp, ebp
.text:00001D7F                 pop     ebp
.text:00001D80                 retn
.text:00001D80 _get_remote_username endp
.text:00001D80
.text:00001D80 ; ---------------------------------------------------------------------------
.text:00001D81                 align 10h
.text:00001D90
.text:00001D90 ; =============== S U B R O U T I N E =======================================
.text:00001D90
.text:00001D90 ; Attributes: bp-based frame
.text:00001D90
.text:00001D90                 public _save_settings
.text:00001D90 _save_settings  proc near
.text:00001D90
.text:00001D90 var_10          = dword ptr -10h
.text:00001D90 var_C           = dword ptr -0Ch
.text:00001D90 var_8           = dword ptr -8
.text:00001D90 var_4           = dword ptr -4
.text:00001D90 arg_0           = dword ptr  8
.text:00001D90 arg_4           = dword ptr  0Ch
.text:00001D90
.text:00001D90                 push    ebp
.text:00001D91                 mov     ebp, esp
.text:00001D93                 sub     esp, 10h
.text:00001D96                 mov     eax, 0CCCCCCCCh
.text:00001D9B                 mov     [ebp+var_10], eax
.text:00001D9E                 mov     [ebp+var_C], eax
.text:00001DA1                 mov     [ebp+var_8], eax
.text:00001DA4                 mov     [ebp+var_4], eax
.text:00001DA7                 lea     eax, [ebp+var_C]
.text:00001DAA                 push    eax
.text:00001DAB                 mov     ecx, [ebp+arg_0]
.text:00001DAE                 push    ecx
.text:00001DAF                 call    _open_settings_w
.text:00001DB4                 add     esp, 8
.text:00001DB7                 mov     [ebp+var_4], eax
.text:00001DBA                 cmp     [ebp+var_4], 0
.text:00001DBE                 jnz     short loc_1DC5
.text:00001DC0                 mov     eax, [ebp+var_C]
.text:00001DC3                 jmp     short loc_1DE3
.text:00001DC5 ; ---------------------------------------------------------------------------
.text:00001DC5
.text:00001DC5 loc_1DC5:                               ; CODE XREF: _save_settings+2Ej
.text:00001DC5                 mov     edx, [ebp+arg_4]
.text:00001DC8                 push    edx
.text:00001DC9                 mov     eax, [ebp+var_4]
.text:00001DCC                 push    eax
.text:00001DCD                 call    _save_open_settings
.text:00001DD2                 add     esp, 8
.text:00001DD5                 mov     ecx, [ebp+var_4]
.text:00001DD8                 push    ecx
.text:00001DD9                 call    _close_settings_w
.text:00001DDE                 add     esp, 4
.text:00001DE1                 xor     eax, eax
.text:00001DE3
.text:00001DE3 loc_1DE3:                               ; CODE XREF: _save_settings+33j
.text:00001DE3                 push    edx
.text:00001DE4                 mov     ecx, ebp
.text:00001DE6                 push    eax
.text:00001DE7                 lea     edx, $LN6
.text:00001DED                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001DF2                 pop     eax
.text:00001DF3                 pop     edx
.text:00001DF4                 add     esp, 10h
.text:00001DF7                 cmp     ebp, esp
.text:00001DF9                 call    __RTC_CheckEsp
.text:00001DFE                 mov     esp, ebp
.text:00001E00                 pop     ebp
.text:00001E01                 retn
.text:00001E01 _save_settings  endp
.text:00001E01
.text:00001E01 ; ---------------------------------------------------------------------------
.text:00001E02                 align 4
.text:00001E04 $LN6            dd 1                    ; DATA XREF: _save_settings+57o
.text:00001E08                 dd offset $LN5
.text:00001E0C $LN5            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00001E08o
.text:00001E14                 dd offset $LN4          ; "errmsg"
.text:00001E18 $LN4            db 'errmsg',0           ; DATA XREF: .text:00001E14o
.text:00001E1F                 align 10h
.text:00001E20
.text:00001E20 ; =============== S U B R O U T I N E =======================================
.text:00001E20
.text:00001E20 ; Attributes: bp-based frame
.text:00001E20
.text:00001E20                 public _save_open_settings
.text:00001E20 _save_open_settings proc near           ; CODE XREF: _save_settings+3Dp
.text:00001E20
.text:00001E20 var_180         = dword ptr -180h
.text:00001E20 var_17C         = dword ptr -17Ch
.text:00001E20 Str             = byte ptr -174h
.text:00001E20 var_6C          = byte ptr -6Ch
.text:00001E20 var_50          = byte ptr -50h
.text:00001E20 Dest            = byte ptr -28h
.text:00001E20 var_10          = dword ptr -10h
.text:00001E20 var_C           = dword ptr -0Ch
.text:00001E20 var_8           = dword ptr -8
.text:00001E20 var_4           = dword ptr -4
.text:00001E20 arg_0           = dword ptr  8
.text:00001E20 arg_4           = dword ptr  0Ch
.text:00001E20
.text:00001E20                 push    ebp
.text:00001E21                 mov     ebp, esp
.text:00001E23                 sub     esp, 180h
.text:00001E29                 push    edi
.text:00001E2A                 lea     edi, [ebp+var_180]
.text:00001E30                 mov     ecx, 60h ; '`'
.text:00001E35                 mov     eax, 0CCCCCCCCh
.text:00001E3A                 rep stosd
.text:00001E3C                 mov     eax, dword ptr ds:___security_cookie
.text:00001E41                 xor     eax, ebp
.text:00001E43                 mov     [ebp+var_4], eax
.text:00001E46                 push    1
.text:00001E48                 push    offset $SG86052 ; "Present"
.text:00001E4D                 mov     eax, [ebp+arg_0]
.text:00001E50                 push    eax
.text:00001E51                 call    _write_setting_i
.text:00001E56                 add     esp, 0Ch
.text:00001E59                 push    0
.text:00001E5B                 mov     ecx, [ebp+arg_4]
.text:00001E5E                 push    ecx
.text:00001E5F                 call    _conf_get_str
.text:00001E64                 add     esp, 8
.text:00001E67                 push    eax
.text:00001E68                 push    offset $SG86053 ; "HostName"
.text:00001E6D                 mov     edx, [ebp+arg_0]
.text:00001E70                 push    edx
.text:00001E71                 call    _write_setting_s
.text:00001E76                 add     esp, 0Ch
.text:00001E79                 push    72h ; 'r'
.text:00001E7B                 mov     eax, [ebp+arg_4]
.text:00001E7E                 push    eax
.text:00001E7F                 call    _conf_get_filename
.text:00001E84                 add     esp, 8
.text:00001E87                 push    eax
.text:00001E88                 push    offset $SG86054 ; "LogFileName"
.text:00001E8D                 mov     ecx, [ebp+arg_0]
.text:00001E90                 push    ecx
.text:00001E91                 call    _write_setting_filename
.text:00001E96                 add     esp, 0Ch
.text:00001E99                 push    73h ; 's'
.text:00001E9B                 mov     edx, [ebp+arg_4]
.text:00001E9E                 push    edx
.text:00001E9F                 call    _conf_get_int
.text:00001EA4                 add     esp, 8
.text:00001EA7                 push    eax
.text:00001EA8                 push    offset $SG86055 ; "LogType"
.text:00001EAD                 mov     eax, [ebp+arg_0]
.text:00001EB0                 push    eax
.text:00001EB1                 call    _write_setting_i
.text:00001EB6                 add     esp, 0Ch
.text:00001EB9                 push    74h ; 't'
.text:00001EBB                 mov     ecx, [ebp+arg_4]
.text:00001EBE                 push    ecx
.text:00001EBF                 call    _conf_get_int
.text:00001EC4                 add     esp, 8
.text:00001EC7                 push    eax
.text:00001EC8                 push    offset $SG86056 ; "LogFileClash"
.text:00001ECD                 mov     edx, [ebp+arg_0]
.text:00001ED0                 push    edx
.text:00001ED1                 call    _write_setting_i
.text:00001ED6                 add     esp, 0Ch
.text:00001ED9                 push    75h ; 'u'
.text:00001EDB                 mov     eax, [ebp+arg_4]
.text:00001EDE                 push    eax
.text:00001EDF                 call    _conf_get_int
.text:00001EE4                 add     esp, 8
.text:00001EE7                 push    eax
.text:00001EE8                 push    offset $SG86057 ; "LogFlush"
.text:00001EED                 mov     ecx, [ebp+arg_0]
.text:00001EF0                 push    ecx
.text:00001EF1                 call    _write_setting_i
.text:00001EF6                 add     esp, 0Ch
.text:00001EF9                 push    76h ; 'v'
.text:00001EFB                 mov     edx, [ebp+arg_4]
.text:00001EFE                 push    edx
.text:00001EFF                 call    _conf_get_int
.text:00001F04                 add     esp, 8
.text:00001F07                 push    eax
.text:00001F08                 push    offset $SG86058 ; "SSHLogOmitPasswords"
.text:00001F0D                 mov     eax, [ebp+arg_0]
.text:00001F10                 push    eax
.text:00001F11                 call    _write_setting_i
.text:00001F16                 add     esp, 0Ch
.text:00001F19                 push    77h ; 'w'
.text:00001F1B                 mov     ecx, [ebp+arg_4]
.text:00001F1E                 push    ecx
.text:00001F1F                 call    _conf_get_int
.text:00001F24                 add     esp, 8
.text:00001F27                 push    eax
.text:00001F28                 push    offset $SG86059 ; "SSHLogOmitData"
.text:00001F2D                 mov     edx, [ebp+arg_0]
.text:00001F30                 push    edx
.text:00001F31                 call    _write_setting_i
.text:00001F36                 add     esp, 0Ch
.text:00001F39                 mov     [ebp+var_C], offset $SG86060 ; "raw"
.text:00001F40                 push    2
.text:00001F42                 mov     eax, [ebp+arg_4]
.text:00001F45                 push    eax
.text:00001F46                 call    _conf_get_int
.text:00001F4B                 add     esp, 8
.text:00001F4E                 push    eax
.text:00001F4F                 call    _backend_from_proto
.text:00001F54                 add     esp, 4
.text:00001F57                 mov     [ebp+var_10], eax
.text:00001F5A                 cmp     [ebp+var_10], 0
.text:00001F5E                 jz      short loc_1F69
.text:00001F60                 mov     ecx, [ebp+var_10]
.text:00001F63                 mov     edx, [ecx+40h]
.text:00001F66                 mov     [ebp+var_C], edx
.text:00001F69
.text:00001F69 loc_1F69:                               ; CODE XREF: _save_open_settings+13Ej
.text:00001F69                 mov     eax, [ebp+var_C]
.text:00001F6C                 push    eax
.text:00001F6D                 push    offset $SG86063 ; "Protocol"
.text:00001F72                 mov     ecx, [ebp+arg_0]
.text:00001F75                 push    ecx
.text:00001F76                 call    _write_setting_s
.text:00001F7B                 add     esp, 0Ch
.text:00001F7E                 push    1
.text:00001F80                 mov     edx, [ebp+arg_4]
.text:00001F83                 push    edx
.text:00001F84                 call    _conf_get_int
.text:00001F89                 add     esp, 8
.text:00001F8C                 push    eax
.text:00001F8D                 push    offset $SG86064 ; "PortNumber"
.text:00001F92                 mov     eax, [ebp+arg_0]
.text:00001F95                 push    eax
.text:00001F96                 call    _write_setting_i
.text:00001F9B                 add     esp, 0Ch
.text:00001F9E                 push    4
.text:00001FA0                 mov     ecx, [ebp+arg_4]
.text:00001FA3                 push    ecx
.text:00001FA4                 call    _conf_get_int
.text:00001FA9                 add     esp, 8
.text:00001FAC                 add     eax, 2
.text:00001FAF                 cdq
.text:00001FB0                 mov     ecx, 3
.text:00001FB5                 idiv    ecx
.text:00001FB7                 push    edx
.text:00001FB8                 push    offset $SG86065 ; "CloseOnExit"
.text:00001FBD                 mov     edx, [ebp+arg_0]
.text:00001FC0                 push    edx
.text:00001FC1                 call    _write_setting_i
.text:00001FC6                 add     esp, 0Ch
.text:00001FC9                 push    5
.text:00001FCB                 mov     eax, [ebp+arg_4]
.text:00001FCE                 push    eax
.text:00001FCF                 call    _conf_get_int
.text:00001FD4                 add     esp, 8
.text:00001FD7                 neg     eax
.text:00001FD9                 sbb     eax, eax
.text:00001FDB                 neg     eax
.text:00001FDD                 push    eax
.text:00001FDE                 push    offset $SG86066 ; "WarnOnClose"
.text:00001FE3                 mov     ecx, [ebp+arg_0]
.text:00001FE6                 push    ecx
.text:00001FE7                 call    _write_setting_i
.text:00001FEC                 add     esp, 0Ch
.text:00001FEF                 push    6
.text:00001FF1                 mov     edx, [ebp+arg_4]
.text:00001FF4                 push    edx
.text:00001FF5                 call    _conf_get_int
.text:00001FFA                 add     esp, 8
.text:00001FFD                 cdq
.text:00001FFE                 mov     ecx, 3Ch ; '<'
.text:00002003                 idiv    ecx
.text:00002005                 push    eax
.text:00002006                 push    offset $SG86067 ; "PingInterval"
.text:0000200B                 mov     edx, [ebp+arg_0]
.text:0000200E                 push    edx
.text:0000200F                 call    _write_setting_i
.text:00002014                 add     esp, 0Ch
.text:00002017                 push    6
.text:00002019                 mov     eax, [ebp+arg_4]
.text:0000201C                 push    eax
.text:0000201D                 call    _conf_get_int
.text:00002022                 add     esp, 8
.text:00002025                 cdq
.text:00002026                 mov     ecx, 3Ch ; '<'
.text:0000202B                 idiv    ecx
.text:0000202D                 push    edx
.text:0000202E                 push    offset $SG86068 ; "PingIntervalSecs"
.text:00002033                 mov     edx, [ebp+arg_0]
.text:00002036                 push    edx
.text:00002037                 call    _write_setting_i
.text:0000203C                 add     esp, 0Ch
.text:0000203F                 push    7
.text:00002041                 mov     eax, [ebp+arg_4]
.text:00002044                 push    eax
.text:00002045                 call    _conf_get_int
.text:0000204A                 add     esp, 8
.text:0000204D                 push    eax
.text:0000204E                 push    offset $SG86069 ; "TCPNoDelay"
.text:00002053                 mov     ecx, [ebp+arg_0]
.text:00002056                 push    ecx
.text:00002057                 call    _write_setting_i
.text:0000205C                 add     esp, 0Ch
.text:0000205F                 push    8
.text:00002061                 mov     edx, [ebp+arg_4]
.text:00002064                 push    edx
.text:00002065                 call    _conf_get_int
.text:0000206A                 add     esp, 8
.text:0000206D                 push    eax
.text:0000206E                 push    offset $SG86070 ; "TCPKeepalives"
.text:00002073                 mov     eax, [ebp+arg_0]
.text:00002076                 push    eax
.text:00002077                 call    _write_setting_i
.text:0000207C                 add     esp, 0Ch
.text:0000207F                 push    2Eh ; '.'
.text:00002081                 mov     ecx, [ebp+arg_4]
.text:00002084                 push    ecx
.text:00002085                 call    _conf_get_str
.text:0000208A                 add     esp, 8
.text:0000208D                 push    eax
.text:0000208E                 push    offset $SG86071 ; "TerminalType"
.text:00002093                 mov     edx, [ebp+arg_0]
.text:00002096                 push    edx
.text:00002097                 call    _write_setting_s
.text:0000209C                 add     esp, 0Ch
.text:0000209F                 push    2Fh ; '/'
.text:000020A1                 mov     eax, [ebp+arg_4]
.text:000020A4                 push    eax
.text:000020A5                 call    _conf_get_str
.text:000020AA                 add     esp, 8
.text:000020AD                 push    eax
.text:000020AE                 push    offset $SG86072 ; "TerminalSpeed"
.text:000020B3                 mov     ecx, [ebp+arg_0]
.text:000020B6                 push    ecx
.text:000020B7                 call    _write_setting_s
.text:000020BC                 add     esp, 0Ch
.text:000020BF                 push    1
.text:000020C1                 push    30h ; '0'
.text:000020C3                 mov     edx, [ebp+arg_4]
.text:000020C6                 push    edx
.text:000020C7                 push    offset $SG86073 ; "TerminalModes"
.text:000020CC                 mov     eax, [ebp+arg_0]
.text:000020CF                 push    eax
.text:000020D0                 call    _wmap
.text:000020D5                 add     esp, 14h
.text:000020D8                 push    3
.text:000020DA                 mov     ecx, [ebp+arg_4]
.text:000020DD                 push    ecx
.text:000020DE                 call    _conf_get_int
.text:000020E3                 add     esp, 8
.text:000020E6                 push    eax
.text:000020E7                 push    offset $SG86074 ; "AddressFamily"
.text:000020EC                 mov     edx, [ebp+arg_0]
.text:000020EF                 push    edx
.text:000020F0                 call    _write_setting_i
.text:000020F5                 add     esp, 0Ch
.text:000020F8                 push    0Ah
.text:000020FA                 mov     eax, [ebp+arg_4]
.text:000020FD                 push    eax
.text:000020FE                 call    _conf_get_str
.text:00002103                 add     esp, 8
.text:00002106                 push    eax
.text:00002107                 push    offset $SG86075 ; "ProxyExcludeList"
.text:0000210C                 mov     ecx, [ebp+arg_0]
.text:0000210F                 push    ecx
.text:00002110                 call    _write_setting_s
.text:00002115                 add     esp, 0Ch
.text:00002118                 push    0Bh
.text:0000211A                 mov     edx, [ebp+arg_4]
.text:0000211D                 push    edx
.text:0000211E                 call    _conf_get_int
.text:00002123                 add     esp, 8
.text:00002126                 add     eax, 2
.text:00002129                 cdq
.text:0000212A                 mov     ecx, 3
.text:0000212F                 idiv    ecx
.text:00002131                 push    edx
.text:00002132                 push    offset $SG86076 ; "ProxyDNS"
.text:00002137                 mov     edx, [ebp+arg_0]
.text:0000213A                 push    edx
.text:0000213B                 call    _write_setting_i
.text:00002140                 add     esp, 0Ch
.text:00002143                 push    0Ch
.text:00002145                 mov     eax, [ebp+arg_4]
.text:00002148                 push    eax
.text:00002149                 call    _conf_get_int
.text:0000214E                 add     esp, 8
.text:00002151                 push    eax
.text:00002152                 push    offset $SG86077 ; "ProxyLocalhost"
.text:00002157                 mov     ecx, [ebp+arg_0]
.text:0000215A                 push    ecx
.text:0000215B                 call    _write_setting_i
.text:00002160                 add     esp, 0Ch
.text:00002163                 push    0Dh
.text:00002165                 mov     edx, [ebp+arg_4]
.text:00002168                 push    edx
.text:00002169                 call    _conf_get_int
.text:0000216E                 add     esp, 8
.text:00002171                 push    eax
.text:00002172                 push    offset $SG86078 ; "ProxyMethod"
.text:00002177                 mov     eax, [ebp+arg_0]
.text:0000217A                 push    eax
.text:0000217B                 call    _write_setting_i
.text:00002180                 add     esp, 0Ch
.text:00002183                 push    0Eh
.text:00002185                 mov     ecx, [ebp+arg_4]
.text:00002188                 push    ecx
.text:00002189                 call    _conf_get_str
.text:0000218E                 add     esp, 8
.text:00002191                 push    eax
.text:00002192                 push    offset $SG86079 ; "ProxyHost"
.text:00002197                 mov     edx, [ebp+arg_0]
.text:0000219A                 push    edx
.text:0000219B                 call    _write_setting_s
.text:000021A0                 add     esp, 0Ch
.text:000021A3                 push    0Fh
.text:000021A5                 mov     eax, [ebp+arg_4]
.text:000021A8                 push    eax
.text:000021A9                 call    _conf_get_int
.text:000021AE                 add     esp, 8
.text:000021B1                 push    eax
.text:000021B2                 push    offset $SG86080 ; "ProxyPort"
.text:000021B7                 mov     ecx, [ebp+arg_0]
.text:000021BA                 push    ecx
.text:000021BB                 call    _write_setting_i
.text:000021C0                 add     esp, 0Ch
.text:000021C3                 push    10h
.text:000021C5                 mov     edx, [ebp+arg_4]
.text:000021C8                 push    edx
.text:000021C9                 call    _conf_get_str
.text:000021CE                 add     esp, 8
.text:000021D1                 push    eax
.text:000021D2                 push    offset $SG86081 ; "ProxyUsername"
.text:000021D7                 mov     eax, [ebp+arg_0]
.text:000021DA                 push    eax
.text:000021DB                 call    _write_setting_s
.text:000021E0                 add     esp, 0Ch
.text:000021E3                 push    11h
.text:000021E5                 mov     ecx, [ebp+arg_4]
.text:000021E8                 push    ecx
.text:000021E9                 call    _conf_get_str
.text:000021EE                 add     esp, 8
.text:000021F1                 push    eax
.text:000021F2                 push    offset $SG86082 ; "ProxyPassword"
.text:000021F7                 mov     edx, [ebp+arg_0]
.text:000021FA                 push    edx
.text:000021FB                 call    _write_setting_s
.text:00002200                 add     esp, 0Ch
.text:00002203                 push    12h
.text:00002205                 mov     eax, [ebp+arg_4]
.text:00002208                 push    eax
.text:00002209                 call    _conf_get_str
.text:0000220E                 add     esp, 8
.text:00002211                 push    eax
.text:00002212                 push    offset $SG86083 ; "ProxyTelnetCommand"
.text:00002217                 mov     ecx, [ebp+arg_0]
.text:0000221A                 push    ecx
.text:0000221B                 call    _write_setting_s
.text:00002220                 add     esp, 0Ch
.text:00002223                 push    1
.text:00002225                 push    31h ; '1'
.text:00002227                 mov     edx, [ebp+arg_4]
.text:0000222A                 push    edx
.text:0000222B                 push    offset $SG86084 ; "Environment"
.text:00002230                 mov     eax, [ebp+arg_0]
.text:00002233                 push    eax
.text:00002234                 call    _wmap
.text:00002239                 add     esp, 14h
.text:0000223C                 push    32h ; '2'
.text:0000223E                 mov     ecx, [ebp+arg_4]
.text:00002241                 push    ecx
.text:00002242                 call    _conf_get_str
.text:00002247                 add     esp, 8
.text:0000224A                 push    eax
.text:0000224B                 push    offset $SG86085 ; "UserName"
.text:00002250                 mov     edx, [ebp+arg_0]
.text:00002253                 push    edx
.text:00002254                 call    _write_setting_s
.text:00002259                 add     esp, 0Ch
.text:0000225C                 push    33h ; '3'
.text:0000225E                 mov     eax, [ebp+arg_4]
.text:00002261                 push    eax
.text:00002262                 call    _conf_get_int
.text:00002267                 add     esp, 8
.text:0000226A                 push    eax
.text:0000226B                 push    offset $SG86086 ; "UserNameFromEnvironment"
.text:00002270                 mov     ecx, [ebp+arg_0]
.text:00002273                 push    ecx
.text:00002274                 call    _write_setting_i
.text:00002279                 add     esp, 0Ch
.text:0000227C                 push    34h ; '4'
.text:0000227E                 mov     edx, [ebp+arg_4]
.text:00002281                 push    edx
.text:00002282                 call    _conf_get_str
.text:00002287                 add     esp, 8
.text:0000228A                 push    eax
.text:0000228B                 push    offset $SG86087 ; "LocalUserName"
.text:00002290                 mov     eax, [ebp+arg_0]
.text:00002293                 push    eax
.text:00002294                 call    _write_setting_s
.text:00002299                 add     esp, 0Ch
.text:0000229C                 push    15h
.text:0000229E                 mov     ecx, [ebp+arg_4]
.text:000022A1                 push    ecx
.text:000022A2                 call    _conf_get_int
.text:000022A7                 add     esp, 8
.text:000022AA                 push    eax
.text:000022AB                 push    offset $SG86088 ; "NoPTY"
.text:000022B0                 mov     edx, [ebp+arg_0]
.text:000022B3                 push    edx
.text:000022B4                 call    _write_setting_i
.text:000022B9                 add     esp, 0Ch
.text:000022BC                 push    16h
.text:000022BE                 mov     eax, [ebp+arg_4]
.text:000022C1                 push    eax
.text:000022C2                 call    _conf_get_int
.text:000022C7                 add     esp, 8
.text:000022CA                 push    eax
.text:000022CB                 push    offset $SG86089 ; "Compression"
.text:000022D0                 mov     ecx, [ebp+arg_0]
.text:000022D3                 push    ecx
.text:000022D4                 call    _write_setting_i
.text:000022D9                 add     esp, 0Ch
.text:000022DC                 push    1Ah
.text:000022DE                 mov     edx, [ebp+arg_4]
.text:000022E1                 push    edx
.text:000022E2                 call    _conf_get_int
.text:000022E7                 add     esp, 8
.text:000022EA                 push    eax
.text:000022EB                 push    offset $SG86090 ; "TryAgent"
.text:000022F0                 mov     eax, [ebp+arg_0]
.text:000022F3                 push    eax
.text:000022F4                 call    _write_setting_i
.text:000022F9                 add     esp, 0Ch
.text:000022FC                 push    1Bh
.text:000022FE                 mov     ecx, [ebp+arg_4]
.text:00002301                 push    ecx
.text:00002302                 call    _conf_get_int
.text:00002307                 add     esp, 8
.text:0000230A                 push    eax
.text:0000230B                 push    offset $SG86091 ; "AgentFwd"
.text:00002310                 mov     edx, [ebp+arg_0]
.text:00002313                 push    edx
.text:00002314                 call    _write_setting_i
.text:00002319                 add     esp, 0Ch
.text:0000231C                 push    26h ; '&'
.text:0000231E                 mov     eax, [ebp+arg_4]
.text:00002321                 push    eax
.text:00002322                 call    _conf_get_int
.text:00002327                 add     esp, 8
.text:0000232A                 push    eax
.text:0000232B                 push    offset $SG86092 ; "GssapiFwd"
.text:00002330                 mov     ecx, [ebp+arg_0]
.text:00002333                 push    ecx
.text:00002334                 call    _write_setting_i
.text:00002339                 add     esp, 0Ch
.text:0000233C                 push    1Ch
.text:0000233E                 mov     edx, [ebp+arg_4]
.text:00002341                 push    edx
.text:00002342                 call    _conf_get_int
.text:00002347                 add     esp, 8
.text:0000234A                 push    eax
.text:0000234B                 push    offset $SG86093 ; "ChangeUsername"
.text:00002350                 mov     eax, [ebp+arg_0]
.text:00002353                 push    eax
.text:00002354                 call    _write_setting_i
.text:00002359                 add     esp, 0Ch
.text:0000235C                 push    1Dh
.text:0000235E                 mov     ecx, [ebp+arg_4]
.text:00002361                 push    ecx
.text:00002362                 push    6
.text:00002364                 push    offset _ciphernames
.text:00002369                 push    offset $SG86094 ; "Cipher"
.text:0000236E                 mov     edx, [ebp+arg_0]
.text:00002371                 push    edx
.text:00002372                 call    _wprefs
.text:00002377                 add     esp, 18h
.text:0000237A                 push    17h
.text:0000237C                 mov     eax, [ebp+arg_4]
.text:0000237F                 push    eax
.text:00002380                 push    5
.text:00002382                 push    offset _kexnames
.text:00002387                 push    offset $SG86095 ; "KEX"
.text:0000238C                 mov     ecx, [ebp+arg_0]
.text:0000238F                 push    ecx
.text:00002390                 call    _wprefs
.text:00002395                 add     esp, 18h
.text:00002398                 push    18h
.text:0000239A                 mov     edx, [ebp+arg_4]
.text:0000239D                 push    edx
.text:0000239E                 call    _conf_get_int
.text:000023A3                 add     esp, 8
.text:000023A6                 push    eax
.text:000023A7                 push    offset $SG86096 ; "RekeyTime"
.text:000023AC                 mov     eax, [ebp+arg_0]
.text:000023AF                 push    eax
.text:000023B0                 call    _write_setting_i
.text:000023B5                 add     esp, 0Ch
.text:000023B8                 push    19h
.text:000023BA                 mov     ecx, [ebp+arg_4]
.text:000023BD                 push    ecx
.text:000023BE                 call    _conf_get_str
.text:000023C3                 add     esp, 8
.text:000023C6                 push    eax
.text:000023C7                 push    offset $SG86097 ; "RekeyBytes"
.text:000023CC                 mov     edx, [ebp+arg_0]
.text:000023CF                 push    edx
.text:000023D0                 call    _write_setting_s
.text:000023D5                 add     esp, 0Ch
.text:000023D8                 push    21h ; '!'
.text:000023DA                 mov     eax, [ebp+arg_4]
.text:000023DD                 push    eax
.text:000023DE                 call    _conf_get_int
.text:000023E3                 add     esp, 8
.text:000023E6                 push    eax
.text:000023E7                 push    offset $SG86098 ; "SshNoAuth"
.text:000023EC                 mov     ecx, [ebp+arg_0]
.text:000023EF                 push    ecx
.text:000023F0                 call    _write_setting_i
.text:000023F5                 add     esp, 0Ch
.text:000023F8                 push    22h ; '"'
.text:000023FA                 mov     edx, [ebp+arg_4]
.text:000023FD                 push    edx
.text:000023FE                 call    _conf_get_int
.text:00002403                 add     esp, 8
.text:00002406                 push    eax
.text:00002407                 push    offset $SG86099 ; "SshBanner"
.text:0000240C                 mov     eax, [ebp+arg_0]
.text:0000240F                 push    eax
.text:00002410                 call    _write_setting_i
.text:00002415                 add     esp, 0Ch
.text:00002418                 push    23h ; '#'
.text:0000241A                 mov     ecx, [ebp+arg_4]
.text:0000241D                 push    ecx
.text:0000241E                 call    _conf_get_int
.text:00002423                 add     esp, 8
.text:00002426                 push    eax
.text:00002427                 push    offset $SG86100 ; "AuthTIS"
.text:0000242C                 mov     edx, [ebp+arg_0]
.text:0000242F                 push    edx
.text:00002430                 call    _write_setting_i
.text:00002435                 add     esp, 0Ch
.text:00002438                 push    24h ; '$'
.text:0000243A                 mov     eax, [ebp+arg_4]
.text:0000243D                 push    eax
.text:0000243E                 call    _conf_get_int
.text:00002443                 add     esp, 8
.text:00002446                 push    eax
.text:00002447                 push    offset $SG86101 ; "AuthKI"
.text:0000244C                 mov     ecx, [ebp+arg_0]
.text:0000244F                 push    ecx
.text:00002450                 call    _write_setting_i
.text:00002455                 add     esp, 0Ch
.text:00002458                 push    25h ; '%'
.text:0000245A                 mov     edx, [ebp+arg_4]
.text:0000245D                 push    edx
.text:0000245E                 call    _conf_get_int
.text:00002463                 add     esp, 8
.text:00002466                 push    eax
.text:00002467                 push    offset $SG86102 ; "AuthGSSAPI"
.text:0000246C                 mov     eax, [ebp+arg_0]
.text:0000246F                 push    eax
.text:00002470                 call    _write_setting_i
.text:00002475                 add     esp, 0Ch
.text:00002478                 push    27h ; '''
.text:0000247A                 mov     ecx, [ebp+arg_4]
.text:0000247D                 push    ecx
.text:0000247E                 mov     edx, dword ptr ds:_ngsslibs
.text:00002484                 push    edx
.text:00002485                 push    offset _gsslibkeywords
.text:0000248A                 push    offset $SG86103 ; "GSSLibs"
.text:0000248F                 mov     eax, [ebp+arg_0]
.text:00002492                 push    eax
.text:00002493                 call    _wprefs
.text:00002498                 add     esp, 18h
.text:0000249B                 push    28h ; '('
.text:0000249D                 mov     ecx, [ebp+arg_4]
.text:000024A0                 push    ecx
.text:000024A1                 call    _conf_get_filename
.text:000024A6                 add     esp, 8
.text:000024A9                 push    eax
.text:000024AA                 push    offset $SG86104 ; "GSSCustom"
.text:000024AF                 mov     edx, [ebp+arg_0]
.text:000024B2                 push    edx
.text:000024B3                 call    _write_setting_filename
.text:000024B8                 add     esp, 0Ch
.text:000024BB                 push    2Bh ; '+'
.text:000024BD                 mov     eax, [ebp+arg_4]
.text:000024C0                 push    eax
.text:000024C1                 call    _conf_get_int
.text:000024C6                 add     esp, 8
.text:000024C9                 push    eax
.text:000024CA                 push    offset $SG86105 ; "SshNoShell"
.text:000024CF                 mov     ecx, [ebp+arg_0]
.text:000024D2                 push    ecx
.text:000024D3                 call    _write_setting_i
.text:000024D8                 add     esp, 0Ch
.text:000024DB                 push    1Fh
.text:000024DD                 mov     edx, [ebp+arg_4]
.text:000024E0                 push    edx
.text:000024E1                 call    _conf_get_int
.text:000024E6                 add     esp, 8
.text:000024E9                 push    eax
.text:000024EA                 push    offset $SG86106 ; "SshProt"
.text:000024EF                 mov     eax, [ebp+arg_0]
.text:000024F2                 push    eax
.text:000024F3                 call    _write_setting_i
.text:000024F8                 add     esp, 0Ch
.text:000024FB                 push    9
.text:000024FD                 mov     ecx, [ebp+arg_4]
.text:00002500                 push    ecx
.text:00002501                 call    _conf_get_str
.text:00002506                 add     esp, 8
.text:00002509                 push    eax
.text:0000250A                 push    offset $SG86107 ; "LogHost"
.text:0000250F                 mov     edx, [ebp+arg_0]
.text:00002512                 push    edx
.text:00002513                 call    _write_setting_s
.text:00002518                 add     esp, 0Ch
.text:0000251B                 push    20h ; ' '
.text:0000251D                 mov     eax, [ebp+arg_4]
.text:00002520                 push    eax
.text:00002521                 call    _conf_get_int
.text:00002526                 add     esp, 8
.text:00002529                 push    eax
.text:0000252A                 push    offset $SG86108 ; "SSH2DES"
.text:0000252F                 mov     ecx, [ebp+arg_0]
.text:00002532                 push    ecx
.text:00002533                 call    _write_setting_i
.text:00002538                 add     esp, 0Ch
.text:0000253B                 push    1Eh
.text:0000253D                 mov     edx, [ebp+arg_4]
.text:00002540                 push    edx
.text:00002541                 call    _conf_get_filename
.text:00002546                 add     esp, 8
.text:00002549                 push    eax
.text:0000254A                 push    offset $SG86109 ; "PublicKeyFile"
.text:0000254F                 mov     eax, [ebp+arg_0]
.text:00002552                 push    eax
.text:00002553                 call    _write_setting_filename
.text:00002558                 add     esp, 0Ch
.text:0000255B                 push    13h
.text:0000255D                 mov     ecx, [ebp+arg_4]
.text:00002560                 push    ecx
.text:00002561                 call    _conf_get_str
.text:00002566                 add     esp, 8
.text:00002569                 push    eax
.text:0000256A                 push    offset $SG86110 ; "RemoteCommand"
.text:0000256F                 mov     edx, [ebp+arg_0]
.text:00002572                 push    edx
.text:00002573                 call    _write_setting_s
.text:00002578                 add     esp, 0Ch
.text:0000257B                 push    35h ; '5'
.text:0000257D                 mov     eax, [ebp+arg_4]
.text:00002580                 push    eax
.text:00002581                 call    _conf_get_int
.text:00002586                 add     esp, 8
.text:00002589                 push    eax
.text:0000258A                 push    offset $SG86111 ; "RFCEnviron"
.text:0000258F                 mov     ecx, [ebp+arg_0]
.text:00002592                 push    ecx
.text:00002593                 call    _write_setting_i
.text:00002598                 add     esp, 0Ch
.text:0000259B                 push    36h ; '6'
.text:0000259D                 mov     edx, [ebp+arg_4]
.text:000025A0                 push    edx
.text:000025A1                 call    _conf_get_int
.text:000025A6                 add     esp, 8
.text:000025A9                 push    eax
.text:000025AA                 push    offset $SG86112 ; "PassiveTelnet"
.text:000025AF                 mov     eax, [ebp+arg_0]
.text:000025B2                 push    eax
.text:000025B3                 call    _write_setting_i
.text:000025B8                 add     esp, 0Ch
.text:000025BB                 push    3Dh ; '='
.text:000025BD                 mov     ecx, [ebp+arg_4]
.text:000025C0                 push    ecx
.text:000025C1                 call    _conf_get_int
.text:000025C6                 add     esp, 8
.text:000025C9                 push    eax
.text:000025CA                 push    offset $SG86113 ; "BackspaceIsDelete"
.text:000025CF                 mov     edx, [ebp+arg_0]
.text:000025D2                 push    edx
.text:000025D3                 call    _write_setting_i
.text:000025D8                 add     esp, 0Ch
.text:000025DB                 push    3Eh ; '>'
.text:000025DD                 mov     eax, [ebp+arg_4]
.text:000025E0                 push    eax
.text:000025E1                 call    _conf_get_int
.text:000025E6                 add     esp, 8
.text:000025E9                 push    eax
.text:000025EA                 push    offset $SG86114 ; "RXVTHomeEnd"
.text:000025EF                 mov     ecx, [ebp+arg_0]
.text:000025F2                 push    ecx
.text:000025F3                 call    _write_setting_i
.text:000025F8                 add     esp, 0Ch
.text:000025FB                 push    3Fh ; '?'
.text:000025FD                 mov     edx, [ebp+arg_4]
.text:00002600                 push    edx
.text:00002601                 call    _conf_get_int
.text:00002606                 add     esp, 8
.text:00002609                 push    eax
.text:0000260A                 push    offset $SG86115 ; "LinuxFunctionKeys"
.text:0000260F                 mov     eax, [ebp+arg_0]
.text:00002612                 push    eax
.text:00002613                 call    _write_setting_i
.text:00002618                 add     esp, 0Ch
.text:0000261B                 push    41h ; 'A'
.text:0000261D                 mov     ecx, [ebp+arg_4]
.text:00002620                 push    ecx
.text:00002621                 call    _conf_get_int
.text:00002626                 add     esp, 8
.text:00002629                 push    eax
.text:0000262A                 push    offset $SG86116 ; "NoApplicationKeys"
.text:0000262F                 mov     edx, [ebp+arg_0]
.text:00002632                 push    edx
.text:00002633                 call    _write_setting_i
.text:00002638                 add     esp, 0Ch
.text:0000263B                 push    40h ; '@'
.text:0000263D                 mov     eax, [ebp+arg_4]
.text:00002640                 push    eax
.text:00002641                 call    _conf_get_int
.text:00002646                 add     esp, 8
.text:00002649                 push    eax
.text:0000264A                 push    offset $SG86117 ; "NoApplicationCursors"
.text:0000264F                 mov     ecx, [ebp+arg_0]
.text:00002652                 push    ecx
.text:00002653                 call    _write_setting_i
.text:00002658                 add     esp, 0Ch
.text:0000265B                 push    42h ; 'B'
.text:0000265D                 mov     edx, [ebp+arg_4]
.text:00002660                 push    edx
.text:00002661                 call    _conf_get_int
.text:00002666                 add     esp, 8
.text:00002669                 push    eax
.text:0000266A                 push    offset $SG86118 ; "NoMouseReporting"
.text:0000266F                 mov     eax, [ebp+arg_0]
.text:00002672                 push    eax
.text:00002673                 call    _write_setting_i
.text:00002678                 add     esp, 0Ch
.text:0000267B                 push    43h ; 'C'
.text:0000267D                 mov     ecx, [ebp+arg_4]
.text:00002680                 push    ecx
.text:00002681                 call    _conf_get_int
.text:00002686                 add     esp, 8
.text:00002689                 push    eax
.text:0000268A                 push    offset $SG86119 ; "NoRemoteResize"
.text:0000268F                 mov     edx, [ebp+arg_0]
.text:00002692                 push    edx
.text:00002693                 call    _write_setting_i
.text:00002698                 add     esp, 0Ch
.text:0000269B                 push    44h ; 'D'
.text:0000269D                 mov     eax, [ebp+arg_4]
.text:000026A0                 push    eax
.text:000026A1                 call    _conf_get_int
.text:000026A6                 add     esp, 8
.text:000026A9                 push    eax
.text:000026AA                 push    offset $SG86120 ; "NoAltScreen"
.text:000026AF                 mov     ecx, [ebp+arg_0]
.text:000026B2                 push    ecx
.text:000026B3                 call    _write_setting_i
.text:000026B8                 add     esp, 0Ch
.text:000026BB                 push    45h ; 'E'
.text:000026BD                 mov     edx, [ebp+arg_4]
.text:000026C0                 push    edx
.text:000026C1                 call    _conf_get_int
.text:000026C6                 add     esp, 8
.text:000026C9                 push    eax
.text:000026CA                 push    offset $SG86121 ; "NoRemoteWinTitle"
.text:000026CF                 mov     eax, [ebp+arg_0]
.text:000026D2                 push    eax
.text:000026D3                 call    _write_setting_i
.text:000026D8                 add     esp, 0Ch
.text:000026DB                 push    48h ; 'H'
.text:000026DD                 mov     ecx, [ebp+arg_4]
.text:000026E0                 push    ecx
.text:000026E1                 call    _conf_get_int
.text:000026E6                 add     esp, 8
.text:000026E9                 push    eax
.text:000026EA                 push    offset $SG86122 ; "RemoteQTitleAction"
.text:000026EF                 mov     edx, [ebp+arg_0]
.text:000026F2                 push    edx
.text:000026F3                 call    _write_setting_i
.text:000026F8                 add     esp, 0Ch
.text:000026FB                 push    46h ; 'F'
.text:000026FD                 mov     eax, [ebp+arg_4]
.text:00002700                 push    eax
.text:00002701                 call    _conf_get_int
.text:00002706                 add     esp, 8
.text:00002709                 push    eax
.text:0000270A                 push    offset $SG86123 ; "NoDBackspace"
.text:0000270F                 mov     ecx, [ebp+arg_0]
.text:00002712                 push    ecx
.text:00002713                 call    _write_setting_i
.text:00002718                 add     esp, 0Ch
.text:0000271B                 push    47h ; 'G'
.text:0000271D                 mov     edx, [ebp+arg_4]
.text:00002720                 push    edx
.text:00002721                 call    _conf_get_int
.text:00002726                 add     esp, 8
.text:00002729                 push    eax
.text:0000272A                 push    offset $SG86124 ; "NoRemoteCharset"
.text:0000272F                 mov     eax, [ebp+arg_0]
.text:00002732                 push    eax
.text:00002733                 call    _write_setting_i
.text:00002738                 add     esp, 0Ch
.text:0000273B                 push    49h ; 'I'
.text:0000273D                 mov     ecx, [ebp+arg_4]
.text:00002740                 push    ecx
.text:00002741                 call    _conf_get_int
.text:00002746                 add     esp, 8
.text:00002749                 push    eax
.text:0000274A                 push    offset $SG86125 ; "ApplicationCursorKeys"
.text:0000274F                 mov     edx, [ebp+arg_0]
.text:00002752                 push    edx
.text:00002753                 call    _write_setting_i
.text:00002758                 add     esp, 0Ch
.text:0000275B                 push    4Ah ; 'J'
.text:0000275D                 mov     eax, [ebp+arg_4]
.text:00002760                 push    eax
.text:00002761                 call    _conf_get_int
.text:00002766                 add     esp, 8
.text:00002769                 push    eax
.text:0000276A                 push    offset $SG86126 ; "ApplicationKeypad"
.text:0000276F                 mov     ecx, [ebp+arg_0]
.text:00002772                 push    ecx
.text:00002773                 call    _write_setting_i
.text:00002778                 add     esp, 0Ch
.text:0000277B                 push    4Bh ; 'K'
.text:0000277D                 mov     edx, [ebp+arg_4]
.text:00002780                 push    edx
.text:00002781                 call    _conf_get_int
.text:00002786                 add     esp, 8
.text:00002789                 push    eax
.text:0000278A                 push    offset $SG86127 ; "NetHackKeypad"
.text:0000278F                 mov     eax, [ebp+arg_0]
.text:00002792                 push    eax
.text:00002793                 call    _write_setting_i
.text:00002798                 add     esp, 0Ch
.text:0000279B                 push    4Eh ; 'N'
.text:0000279D                 mov     ecx, [ebp+arg_4]
.text:000027A0                 push    ecx
.text:000027A1                 call    _conf_get_int
.text:000027A6                 add     esp, 8
.text:000027A9                 push    eax
.text:000027AA                 push    offset $SG86128 ; "AltF4"
.text:000027AF                 mov     edx, [ebp+arg_0]
.text:000027B2                 push    edx
.text:000027B3                 call    _write_setting_i
.text:000027B8                 add     esp, 0Ch
.text:000027BB                 push    4Fh ; 'O'
.text:000027BD                 mov     eax, [ebp+arg_4]
.text:000027C0                 push    eax
.text:000027C1                 call    _conf_get_int
.text:000027C6                 add     esp, 8
.text:000027C9                 push    eax
.text:000027CA                 push    offset $SG86129 ; "AltSpace"
.text:000027CF                 mov     ecx, [ebp+arg_0]
.text:000027D2                 push    ecx
.text:000027D3                 call    _write_setting_i
.text:000027D8                 add     esp, 0Ch
.text:000027DB                 push    50h ; 'P'
.text:000027DD                 mov     edx, [ebp+arg_4]
.text:000027E0                 push    edx
.text:000027E1                 call    _conf_get_int
.text:000027E6                 add     esp, 8
.text:000027E9                 push    eax
.text:000027EA                 push    offset $SG86130 ; "AltOnly"
.text:000027EF                 mov     eax, [ebp+arg_0]
.text:000027F2                 push    eax
.text:000027F3                 call    _write_setting_i
.text:000027F8                 add     esp, 0Ch
.text:000027FB                 push    58h ; 'X'
.text:000027FD                 mov     ecx, [ebp+arg_4]
.text:00002800                 push    ecx
.text:00002801                 call    _conf_get_int
.text:00002806                 add     esp, 8
.text:00002809                 push    eax
.text:0000280A                 push    offset $SG86131 ; "ComposeKey"
.text:0000280F                 mov     edx, [ebp+arg_0]
.text:00002812                 push    edx
.text:00002813                 call    _write_setting_i
.text:00002818                 add     esp, 0Ch
.text:0000281B                 push    59h ; 'Y'
.text:0000281D                 mov     eax, [ebp+arg_4]
.text:00002820                 push    eax
.text:00002821                 call    _conf_get_int
.text:00002826                 add     esp, 8
.text:00002829                 push    eax
.text:0000282A                 push    offset $SG86132 ; "CtrlAltKeys"
.text:0000282F                 mov     ecx, [ebp+arg_0]
.text:00002832                 push    ecx
.text:00002833                 call    _write_setting_i
.text:00002838                 add     esp, 0Ch
.text:0000283B                 push    4Ch ; 'L'
.text:0000283D                 mov     edx, [ebp+arg_4]
.text:00002840                 push    edx
.text:00002841                 call    _conf_get_int
.text:00002846                 add     esp, 8
.text:00002849                 push    eax
.text:0000284A                 push    offset $SG86133 ; "TelnetKey"
.text:0000284F                 mov     eax, [ebp+arg_0]
.text:00002852                 push    eax
.text:00002853                 call    _write_setting_i
.text:00002858                 add     esp, 0Ch
.text:0000285B                 push    4Dh ; 'M'
.text:0000285D                 mov     ecx, [ebp+arg_4]
.text:00002860                 push    ecx
.text:00002861                 call    _conf_get_int
.text:00002866                 add     esp, 8
.text:00002869                 push    eax
.text:0000286A                 push    offset $SG86134 ; "TelnetRet"
.text:0000286F                 mov     edx, [ebp+arg_0]
.text:00002872                 push    edx
.text:00002873                 call    _write_setting_i
.text:00002878                 add     esp, 0Ch
.text:0000287B                 push    51h ; 'Q'
.text:0000287D                 mov     eax, [ebp+arg_4]
.text:00002880                 push    eax
.text:00002881                 call    _conf_get_int
.text:00002886                 add     esp, 8
.text:00002889                 push    eax
.text:0000288A                 push    offset $SG86135 ; "LocalEcho"
.text:0000288F                 mov     ecx, [ebp+arg_0]
.text:00002892                 push    ecx
.text:00002893                 call    _write_setting_i
.text:00002898                 add     esp, 0Ch
.text:0000289B                 push    52h ; 'R'
.text:0000289D                 mov     edx, [ebp+arg_4]
.text:000028A0                 push    edx
.text:000028A1                 call    _conf_get_int
.text:000028A6                 add     esp, 8
.text:000028A9                 push    eax
.text:000028AA                 push    offset $SG86136 ; "LocalEdit"
.text:000028AF                 mov     eax, [ebp+arg_0]
.text:000028B2                 push    eax
.text:000028B3                 call    _write_setting_i
.text:000028B8                 add     esp, 0Ch
.text:000028BB                 push    7Bh ; '{'
.text:000028BD                 mov     ecx, [ebp+arg_4]
.text:000028C0                 push    ecx
.text:000028C1                 call    _conf_get_str
.text:000028C6                 add     esp, 8
.text:000028C9                 push    eax
.text:000028CA                 push    offset $SG86137 ; "Answerback"
.text:000028CF                 mov     edx, [ebp+arg_0]
.text:000028D2                 push    edx
.text:000028D3                 call    _write_setting_s
.text:000028D8                 add     esp, 0Ch
.text:000028DB                 push    53h ; 'S'
.text:000028DD                 mov     eax, [ebp+arg_4]
.text:000028E0                 push    eax
.text:000028E1                 call    _conf_get_int
.text:000028E6                 add     esp, 8
.text:000028E9                 push    eax
.text:000028EA                 push    offset $SG86138 ; "AlwaysOnTop"
.text:000028EF                 mov     ecx, [ebp+arg_0]
.text:000028F2                 push    ecx
.text:000028F3                 call    _write_setting_i
.text:000028F8                 add     esp, 0Ch
.text:000028FB                 push    54h ; 'T'
.text:000028FD                 mov     edx, [ebp+arg_4]
.text:00002900                 push    edx
.text:00002901                 call    _conf_get_int
.text:00002906                 add     esp, 8
.text:00002909                 push    eax
.text:0000290A                 push    offset $SG86139 ; "FullScreenOnAltEnter"
.text:0000290F                 mov     eax, [ebp+arg_0]
.text:00002912                 push    eax
.text:00002913                 call    _write_setting_i
.text:00002918                 add     esp, 0Ch
.text:0000291B                 push    78h ; 'x'
.text:0000291D                 mov     ecx, [ebp+arg_4]
.text:00002920                 push    ecx
.text:00002921                 call    _conf_get_int
.text:00002926                 add     esp, 8
.text:00002929                 push    eax
.text:0000292A                 push    offset $SG86140 ; "HideMousePtr"
.text:0000292F                 mov     edx, [ebp+arg_0]
.text:00002932                 push    edx
.text:00002933                 call    _write_setting_i
.text:00002938                 add     esp, 0Ch
.text:0000293B                 push    79h ; 'y'
.text:0000293D                 mov     eax, [ebp+arg_4]
.text:00002940                 push    eax
.text:00002941                 call    _conf_get_int
.text:00002946                 add     esp, 8
.text:00002949                 push    eax
.text:0000294A                 push    offset $SG86141 ; "SunkenEdge"
.text:0000294F                 mov     ecx, [ebp+arg_0]
.text:00002952                 push    ecx
.text:00002953                 call    _write_setting_i
.text:00002958                 add     esp, 0Ch
.text:0000295B                 push    7Ah ; 'z'
.text:0000295D                 mov     edx, [ebp+arg_4]
.text:00002960                 push    edx
.text:00002961                 call    _conf_get_int
.text:00002966                 add     esp, 8
.text:00002969                 push    eax
.text:0000296A                 push    offset $SG86142 ; "WindowBorder"
.text:0000296F                 mov     eax, [ebp+arg_0]
.text:00002972                 push    eax
.text:00002973                 call    _write_setting_i
.text:00002978                 add     esp, 0Ch
.text:0000297B                 push    5Fh ; '_'
.text:0000297D                 mov     ecx, [ebp+arg_4]
.text:00002980                 push    ecx
.text:00002981                 call    _conf_get_int
.text:00002986                 add     esp, 8
.text:00002989                 push    eax
.text:0000298A                 push    offset $SG86143 ; "CurType"
.text:0000298F                 mov     edx, [ebp+arg_0]
.text:00002992                 push    edx
.text:00002993                 call    _write_setting_i
.text:00002998                 add     esp, 0Ch
.text:0000299B                 push    60h ; '`'
.text:0000299D                 mov     eax, [ebp+arg_4]
.text:000029A0                 push    eax
.text:000029A1                 call    _conf_get_int
.text:000029A6                 add     esp, 8
.text:000029A9                 push    eax
.text:000029AA                 push    offset $SG86144 ; "BlinkCur"
.text:000029AF                 mov     ecx, [ebp+arg_0]
.text:000029B2                 push    ecx
.text:000029B3                 call    _write_setting_i
.text:000029B8                 add     esp, 0Ch
.text:000029BB                 push    61h ; 'a'
.text:000029BD                 mov     edx, [ebp+arg_4]
.text:000029C0                 push    edx
.text:000029C1                 call    _conf_get_int
.text:000029C6                 add     esp, 8
.text:000029C9                 push    eax
.text:000029CA                 push    offset $SG86145 ; "Beep"
.text:000029CF                 mov     eax, [ebp+arg_0]
.text:000029D2                 push    eax
.text:000029D3                 call    _write_setting_i
.text:000029D8                 add     esp, 0Ch
.text:000029DB                 push    62h ; 'b'
.text:000029DD                 mov     ecx, [ebp+arg_4]
.text:000029E0                 push    ecx
.text:000029E1                 call    _conf_get_int
.text:000029E6                 add     esp, 8
.text:000029E9                 push    eax
.text:000029EA                 push    offset $SG86146 ; "BeepInd"
.text:000029EF                 mov     edx, [ebp+arg_0]
.text:000029F2                 push    edx
.text:000029F3                 call    _write_setting_i
.text:000029F8                 add     esp, 0Ch
.text:000029FB                 push    67h ; 'g'
.text:000029FD                 mov     eax, [ebp+arg_4]
.text:00002A00                 push    eax
.text:00002A01                 call    _conf_get_filename
.text:00002A06                 add     esp, 8
.text:00002A09                 push    eax
.text:00002A0A                 push    offset $SG86147 ; "BellWaveFile"
.text:00002A0F                 mov     ecx, [ebp+arg_0]
.text:00002A12                 push    ecx
.text:00002A13                 call    _write_setting_filename
.text:00002A18                 add     esp, 0Ch
.text:00002A1B                 push    63h ; 'c'
.text:00002A1D                 mov     edx, [ebp+arg_4]
.text:00002A20                 push    edx
.text:00002A21                 call    _conf_get_int
.text:00002A26                 add     esp, 8
.text:00002A29                 push    eax
.text:00002A2A                 push    offset $SG86148 ; "BellOverload"
.text:00002A2F                 mov     eax, [ebp+arg_0]
.text:00002A32                 push    eax
.text:00002A33                 call    _write_setting_i
.text:00002A38                 add     esp, 0Ch
.text:00002A3B                 push    64h ; 'd'
.text:00002A3D                 mov     ecx, [ebp+arg_4]
.text:00002A40                 push    ecx
.text:00002A41                 call    _conf_get_int
.text:00002A46                 add     esp, 8
.text:00002A49                 push    eax
.text:00002A4A                 push    offset $SG86149 ; "BellOverloadN"
.text:00002A4F                 mov     edx, [ebp+arg_0]
.text:00002A52                 push    edx
.text:00002A53                 call    _write_setting_i
.text:00002A58                 add     esp, 0Ch
.text:00002A5B                 push    65h ; 'e'
.text:00002A5D                 mov     eax, [ebp+arg_4]
.text:00002A60                 push    eax
.text:00002A61                 call    _conf_get_int
.text:00002A66                 add     esp, 8
.text:00002A69                 push    eax
.text:00002A6A                 push    offset $SG86150 ; "BellOverloadT"
.text:00002A6F                 mov     ecx, [ebp+arg_0]
.text:00002A72                 push    ecx
.text:00002A73                 call    _write_setting_i
.text:00002A78                 add     esp, 0Ch
.text:00002A7B                 push    66h ; 'f'
.text:00002A7D                 mov     edx, [ebp+arg_4]
.text:00002A80                 push    edx
.text:00002A81                 call    _conf_get_int
.text:00002A86                 add     esp, 8
.text:00002A89                 push    eax
.text:00002A8A                 push    offset $SG86151 ; "BellOverloadS"
.text:00002A8F                 mov     eax, [ebp+arg_0]
.text:00002A92                 push    eax
.text:00002A93                 call    _write_setting_i
.text:00002A98                 add     esp, 0Ch
.text:00002A9B                 push    5Bh ; '['
.text:00002A9D                 mov     ecx, [ebp+arg_4]
.text:00002AA0                 push    ecx
.text:00002AA1                 call    _conf_get_int
.text:00002AA6                 add     esp, 8
.text:00002AA9                 push    eax
.text:00002AAA                 push    offset $SG86152 ; "ScrollbackLines"
.text:00002AAF                 mov     edx, [ebp+arg_0]
.text:00002AB2                 push    edx
.text:00002AB3                 call    _write_setting_i
.text:00002AB8                 add     esp, 0Ch
.text:00002ABB                 push    5Ch ; '\'
.text:00002ABD                 mov     eax, [ebp+arg_4]
.text:00002AC0                 push    eax
.text:00002AC1                 call    _conf_get_int
.text:00002AC6                 add     esp, 8
.text:00002AC9                 push    eax
.text:00002ACA                 push    offset $SG86153 ; "DECOriginMode"
.text:00002ACF                 mov     ecx, [ebp+arg_0]
.text:00002AD2                 push    ecx
.text:00002AD3                 call    _write_setting_i
.text:00002AD8                 add     esp, 0Ch
.text:00002ADB                 push    5Dh ; ']'
.text:00002ADD                 mov     edx, [ebp+arg_4]
.text:00002AE0                 push    edx
.text:00002AE1                 call    _conf_get_int
.text:00002AE6                 add     esp, 8
.text:00002AE9                 push    eax
.text:00002AEA                 push    offset $SG86154 ; "AutoWrapMode"
.text:00002AEF                 mov     eax, [ebp+arg_0]
.text:00002AF2                 push    eax
.text:00002AF3                 call    _write_setting_i
.text:00002AF8                 add     esp, 0Ch
.text:00002AFB                 push    5Eh ; '^'
.text:00002AFD                 mov     ecx, [ebp+arg_4]
.text:00002B00                 push    ecx
.text:00002B01                 call    _conf_get_int
.text:00002B06                 add     esp, 8
.text:00002B09                 push    eax
.text:00002B0A                 push    offset $SG86155 ; "LFImpliesCR"
.text:00002B0F                 mov     edx, [ebp+arg_0]
.text:00002B12                 push    edx
.text:00002B13                 call    _write_setting_i
.text:00002B18                 add     esp, 0Ch
.text:00002B1B                 push    0B0h ; '¦'
.text:00002B20                 mov     eax, [ebp+arg_4]
.text:00002B23                 push    eax
.text:00002B24                 call    _conf_get_int
.text:00002B29                 add     esp, 8
.text:00002B2C                 push    eax
.text:00002B2D                 push    offset $SG86156 ; "CRImpliesLF"
.text:00002B32                 mov     ecx, [ebp+arg_0]
.text:00002B35                 push    ecx
.text:00002B36                 call    _write_setting_i
.text:00002B3B                 add     esp, 0Ch
.text:00002B3E                 push    7Dh ; '}'
.text:00002B40                 mov     edx, [ebp+arg_4]
.text:00002B43                 push    edx
.text:00002B44                 call    _conf_get_int
.text:00002B49                 add     esp, 8
.text:00002B4C                 push    eax
.text:00002B4D                 push    offset $SG86157 ; "DisableArabicShaping"
.text:00002B52                 mov     eax, [ebp+arg_0]
.text:00002B55                 push    eax
.text:00002B56                 call    _write_setting_i
.text:00002B5B                 add     esp, 0Ch
.text:00002B5E                 push    7Eh ; '~'
.text:00002B60                 mov     ecx, [ebp+arg_4]
.text:00002B63                 push    ecx
.text:00002B64                 call    _conf_get_int
.text:00002B69                 add     esp, 8
.text:00002B6C                 push    eax
.text:00002B6D                 push    offset $SG86158 ; "DisableBidi"
.text:00002B72                 mov     edx, [ebp+arg_0]
.text:00002B75                 push    edx
.text:00002B76                 call    _write_setting_i
.text:00002B7B                 add     esp, 0Ch
.text:00002B7E                 push    6Dh ; 'm'
.text:00002B80                 mov     eax, [ebp+arg_4]
.text:00002B83                 push    eax
.text:00002B84                 call    _conf_get_int
.text:00002B89                 add     esp, 8
.text:00002B8C                 push    eax
.text:00002B8D                 push    offset $SG86159 ; "WinNameAlways"
.text:00002B92                 mov     ecx, [ebp+arg_0]
.text:00002B95                 push    ecx
.text:00002B96                 call    _write_setting_i
.text:00002B9B                 add     esp, 0Ch
.text:00002B9E                 push    5Ah ; 'Z'
.text:00002BA0                 mov     edx, [ebp+arg_4]
.text:00002BA3                 push    edx
.text:00002BA4                 call    _conf_get_str
.text:00002BA9                 add     esp, 8
.text:00002BAC                 push    eax
.text:00002BAD                 push    offset $SG86160 ; "WinTitle"
.text:00002BB2                 mov     eax, [ebp+arg_0]
.text:00002BB5                 push    eax
.text:00002BB6                 call    _write_setting_s
.text:00002BBB                 add     esp, 0Ch
.text:00002BBE                 push    6Eh ; 'n'
.text:00002BC0                 mov     ecx, [ebp+arg_4]
.text:00002BC3                 push    ecx
.text:00002BC4                 call    _conf_get_int
.text:00002BC9                 add     esp, 8
.text:00002BCC                 push    eax
.text:00002BCD                 push    offset $SG86161 ; "TermWidth"
.text:00002BD2                 mov     edx, [ebp+arg_0]
.text:00002BD5                 push    edx
.text:00002BD6                 call    _write_setting_i
.text:00002BDB                 add     esp, 0Ch
.text:00002BDE                 push    6Fh ; 'o'
.text:00002BE0                 mov     eax, [ebp+arg_4]
.text:00002BE3                 push    eax
.text:00002BE4                 call    _conf_get_int
.text:00002BE9                 add     esp, 8
.text:00002BEC                 push    eax
.text:00002BED                 push    offset $SG86162 ; "TermHeight"
.text:00002BF2                 mov     ecx, [ebp+arg_0]
.text:00002BF5                 push    ecx
.text:00002BF6                 call    _write_setting_i
.text:00002BFB                 add     esp, 0Ch
.text:00002BFE                 push    70h ; 'p'
.text:00002C00                 mov     edx, [ebp+arg_4]
.text:00002C03                 push    edx
.text:00002C04                 call    _conf_get_fontspec
.text:00002C09                 add     esp, 8
.text:00002C0C                 push    eax
.text:00002C0D                 push    offset $SG86163 ; "Font"
.text:00002C12                 mov     eax, [ebp+arg_0]
.text:00002C15                 push    eax
.text:00002C16                 call    _write_setting_fontspec
.text:00002C1B                 add     esp, 0Ch
.text:00002C1E                 push    71h ; 'q'
.text:00002C20                 mov     ecx, [ebp+arg_4]
.text:00002C23                 push    ecx
.text:00002C24                 call    _conf_get_int
.text:00002C29                 add     esp, 8
.text:00002C2C                 push    eax
.text:00002C2D                 push    offset $SG86164 ; "FontQuality"
.text:00002C32                 mov     edx, [ebp+arg_0]
.text:00002C35                 push    edx
.text:00002C36                 call    _write_setting_i
.text:00002C3B                 add     esp, 0Ch
.text:00002C3E                 push    8Bh ; 'ï'
.text:00002C43                 mov     eax, [ebp+arg_4]
.text:00002C46                 push    eax
.text:00002C47                 call    _conf_get_int
.text:00002C4C                 add     esp, 8
.text:00002C4F                 push    eax
.text:00002C50                 push    offset $SG86165 ; "FontVTMode"
.text:00002C55                 mov     ecx, [ebp+arg_0]
.text:00002C58                 push    ecx
.text:00002C59                 call    _write_setting_i
.text:00002C5E                 add     esp, 0Ch
.text:00002C61                 push    81h ; 'ü'
.text:00002C66                 mov     edx, [ebp+arg_4]
.text:00002C69                 push    edx
.text:00002C6A                 call    _conf_get_int
.text:00002C6F                 add     esp, 8
.text:00002C72                 push    eax
.text:00002C73                 push    offset $SG86166 ; "UseSystemColours"
.text:00002C78                 mov     eax, [ebp+arg_0]
.text:00002C7B                 push    eax
.text:00002C7C                 call    _write_setting_i
.text:00002C81                 add     esp, 0Ch
.text:00002C84                 push    82h ; 'é'
.text:00002C89                 mov     ecx, [ebp+arg_4]
.text:00002C8C                 push    ecx
.text:00002C8D                 call    _conf_get_int
.text:00002C92                 add     esp, 8
.text:00002C95                 push    eax
.text:00002C96                 push    offset $SG86167 ; "TryPalette"
.text:00002C9B                 mov     edx, [ebp+arg_0]
.text:00002C9E                 push    edx
.text:00002C9F                 call    _write_setting_i
.text:00002CA4                 add     esp, 0Ch
.text:00002CA7                 push    7Fh ; ''
.text:00002CA9                 mov     eax, [ebp+arg_4]
.text:00002CAC                 push    eax
.text:00002CAD                 call    _conf_get_int
.text:00002CB2                 add     esp, 8
.text:00002CB5                 push    eax
.text:00002CB6                 push    offset $SG86168 ; "ANSIColour"
.text:00002CBB                 mov     ecx, [ebp+arg_0]
.text:00002CBE                 push    ecx
.text:00002CBF                 call    _write_setting_i
.text:00002CC4                 add     esp, 0Ch
.text:00002CC7                 push    80h ; 'Ç'
.text:00002CCC                 mov     edx, [ebp+arg_4]
.text:00002CCF                 push    edx
.text:00002CD0                 call    _conf_get_int
.text:00002CD5                 add     esp, 8
.text:00002CD8                 push    eax
.text:00002CD9                 push    offset $SG86169 ; "Xterm256Colour"
.text:00002CDE                 mov     eax, [ebp+arg_0]
.text:00002CE1                 push    eax
.text:00002CE2                 call    _write_setting_i
.text:00002CE7                 add     esp, 0Ch
.text:00002CEA                 push    83h ; 'â'
.text:00002CEF                 mov     ecx, [ebp+arg_4]
.text:00002CF2                 push    ecx
.text:00002CF3                 call    _conf_get_int
.text:00002CF8                 add     esp, 8
.text:00002CFB                 sub     eax, 1
.text:00002CFE                 push    eax
.text:00002CFF                 push    offset $SG86170 ; "BoldAsColour"
.text:00002D04                 mov     edx, [ebp+arg_0]
.text:00002D07                 push    edx
.text:00002D08                 call    _write_setting_i
.text:00002D0D                 add     esp, 0Ch
.text:00002D10                 mov     [ebp+var_8], 0
.text:00002D17                 jmp     short loc_2D22
.text:00002D19 ; ---------------------------------------------------------------------------
.text:00002D19
.text:00002D19 loc_2D19:                               ; CODE XREF: _save_open_settings+F97j
.text:00002D19                 mov     eax, [ebp+var_8]
.text:00002D1C                 add     eax, 1
.text:00002D1F                 mov     [ebp+var_8], eax
.text:00002D22
.text:00002D22 loc_2D22:                               ; CODE XREF: _save_open_settings+EF7j
.text:00002D22                 cmp     [ebp+var_8], 16h
.text:00002D26                 jge     loc_2DBC
.text:00002D2C                 mov     ecx, [ebp+var_8]
.text:00002D2F                 push    ecx
.text:00002D30                 push    offset $SG86176 ; "Colour%d"
.text:00002D35                 lea     edx, [ebp+Dest]
.text:00002D38                 push    edx             ; Dest
.text:00002D39                 call    _sprintf
.text:00002D3E                 add     esp, 0Ch
.text:00002D41                 mov     eax, [ebp+var_8]
.text:00002D44                 imul    eax, 3
.text:00002D47                 add     eax, 2
.text:00002D4A                 push    eax
.text:00002D4B                 push    84h ; 'ä'
.text:00002D50                 mov     ecx, [ebp+arg_4]
.text:00002D53                 push    ecx
.text:00002D54                 call    _conf_get_int_int
.text:00002D59                 add     esp, 0Ch
.text:00002D5C                 push    eax
.text:00002D5D                 mov     edx, [ebp+var_8]
.text:00002D60                 imul    edx, 3
.text:00002D63                 add     edx, 1
.text:00002D66                 push    edx
.text:00002D67                 push    84h ; 'ä'
.text:00002D6C                 mov     eax, [ebp+arg_4]
.text:00002D6F                 push    eax
.text:00002D70                 call    _conf_get_int_int
.text:00002D75                 add     esp, 0Ch
.text:00002D78                 push    eax
.text:00002D79                 mov     ecx, [ebp+var_8]
.text:00002D7C                 imul    ecx, 3
.text:00002D7F                 push    ecx
.text:00002D80                 push    84h ; 'ä'
.text:00002D85                 mov     edx, [ebp+arg_4]
.text:00002D88                 push    edx
.text:00002D89                 call    _conf_get_int_int
.text:00002D8E                 add     esp, 0Ch
.text:00002D91                 push    eax
.text:00002D92                 push    offset $SG86177 ; "%d,%d,%d"
.text:00002D97                 lea     eax, [ebp+var_50]
.text:00002D9A                 push    eax             ; Dest
.text:00002D9B                 call    _sprintf
.text:00002DA0                 add     esp, 14h
.text:00002DA3                 lea     ecx, [ebp+var_50]
.text:00002DA6                 push    ecx
.text:00002DA7                 lea     edx, [ebp+Dest]
.text:00002DAA                 push    edx
.text:00002DAB                 mov     eax, [ebp+arg_0]
.text:00002DAE                 push    eax
.text:00002DAF                 call    _write_setting_s
.text:00002DB4                 add     esp, 0Ch
.text:00002DB7                 jmp     loc_2D19
.text:00002DBC ; ---------------------------------------------------------------------------
.text:00002DBC
.text:00002DBC loc_2DBC:                               ; CODE XREF: _save_open_settings+F06j
.text:00002DBC                 push    87h ; 'ç'
.text:00002DC1                 mov     ecx, [ebp+arg_4]
.text:00002DC4                 push    ecx
.text:00002DC5                 call    _conf_get_int
.text:00002DCA                 add     esp, 8
.text:00002DCD                 push    eax
.text:00002DCE                 push    offset $SG86178 ; "RawCNP"
.text:00002DD3                 mov     edx, [ebp+arg_0]
.text:00002DD6                 push    edx
.text:00002DD7                 call    _write_setting_i
.text:00002DDC                 add     esp, 0Ch
.text:00002DDF                 push    88h ; 'ê'
.text:00002DE4                 mov     eax, [ebp+arg_4]
.text:00002DE7                 push    eax
.text:00002DE8                 call    _conf_get_int
.text:00002DED                 add     esp, 8
.text:00002DF0                 push    eax
.text:00002DF1                 push    offset $SG86179 ; "PasteRTF"
.text:00002DF6                 mov     ecx, [ebp+arg_0]
.text:00002DF9                 push    ecx
.text:00002DFA                 call    _write_setting_i
.text:00002DFF                 add     esp, 0Ch
.text:00002E02                 push    85h ; 'à'
.text:00002E07                 mov     edx, [ebp+arg_4]
.text:00002E0A                 push    edx
.text:00002E0B                 call    _conf_get_int
.text:00002E10                 add     esp, 8
.text:00002E13                 push    eax
.text:00002E14                 push    offset $SG86180 ; "MouseIsXterm"
.text:00002E19                 mov     eax, [ebp+arg_0]
.text:00002E1C                 push    eax
.text:00002E1D                 call    _write_setting_i
.text:00002E22                 add     esp, 0Ch
.text:00002E25                 push    86h ; 'å'
.text:00002E2A                 mov     ecx, [ebp+arg_4]
.text:00002E2D                 push    ecx
.text:00002E2E                 call    _conf_get_int
.text:00002E33                 add     esp, 8
.text:00002E36                 push    eax
.text:00002E37                 push    offset $SG86181 ; "RectSelect"
.text:00002E3C                 mov     edx, [ebp+arg_0]
.text:00002E3F                 push    edx
.text:00002E40                 call    _write_setting_i
.text:00002E45                 add     esp, 0Ch
.text:00002E48                 push    89h ; 'ë'
.text:00002E4D                 mov     eax, [ebp+arg_4]
.text:00002E50                 push    eax
.text:00002E51                 call    _conf_get_int
.text:00002E56                 add     esp, 8
.text:00002E59                 push    eax
.text:00002E5A                 push    offset $SG86182 ; "MouseOverride"
.text:00002E5F                 mov     ecx, [ebp+arg_0]
.text:00002E62                 push    ecx
.text:00002E63                 call    _write_setting_i
.text:00002E68                 add     esp, 0Ch
.text:00002E6B                 mov     [ebp+var_8], 0
.text:00002E72                 jmp     short loc_2E7D
.text:00002E74 ; ---------------------------------------------------------------------------
.text:00002E74
.text:00002E74 loc_2E74:                               ; CODE XREF: _save_open_settings+112Fj
.text:00002E74                 mov     edx, [ebp+var_8]
.text:00002E77                 add     edx, 20h ; ' '
.text:00002E7A                 mov     [ebp+var_8], edx
.text:00002E7D
.text:00002E7D loc_2E7D:                               ; CODE XREF: _save_open_settings+1052j
.text:00002E7D                 cmp     [ebp+var_8], 100h
.text:00002E84                 jge     loc_2F54
.text:00002E8A                 mov     eax, [ebp+var_8]
.text:00002E8D                 push    eax
.text:00002E8E                 push    offset $SG86189 ; "Wordness%d"
.text:00002E93                 lea     ecx, [ebp+var_6C]
.text:00002E96                 push    ecx             ; Dest
.text:00002E97                 call    _sprintf
.text:00002E9C                 add     esp, 0Ch
.text:00002E9F                 mov     [ebp+Str], 0
.text:00002EA6                 mov     edx, [ebp+var_8]
.text:00002EA9                 mov     [ebp+var_17C], edx
.text:00002EAF                 jmp     short loc_2EC0
.text:00002EB1 ; ---------------------------------------------------------------------------
.text:00002EB1
.text:00002EB1 loc_2EB1:                               ; CODE XREF: _save_open_settings+1113j
.text:00002EB1                 mov     eax, [ebp+var_17C]
.text:00002EB7                 add     eax, 1
.text:00002EBA                 mov     [ebp+var_17C], eax
.text:00002EC0
.text:00002EC0 loc_2EC0:                               ; CODE XREF: _save_open_settings+108Fj
.text:00002EC0                 mov     ecx, [ebp+var_8]
.text:00002EC3                 add     ecx, 20h ; ' '
.text:00002EC6                 cmp     [ebp+var_17C], ecx
.text:00002ECC                 jge     short loc_2F38
.text:00002ECE                 movsx   edx, [ebp+Str]
.text:00002ED5                 test    edx, edx
.text:00002ED7                 jz      short loc_2EE5
.text:00002ED9                 mov     [ebp+var_180], offset $SG86193
.text:00002EE3                 jmp     short loc_2EEF
.text:00002EE5 ; ---------------------------------------------------------------------------
.text:00002EE5
.text:00002EE5 loc_2EE5:                               ; CODE XREF: _save_open_settings+10B7j
.text:00002EE5                 mov     [ebp+var_180], offset $SG86194
.text:00002EEF
.text:00002EEF loc_2EEF:                               ; CODE XREF: _save_open_settings+10C3j
.text:00002EEF                 mov     eax, [ebp+var_17C]
.text:00002EF5                 push    eax
.text:00002EF6                 push    8Ah ; 'è'
.text:00002EFB                 mov     ecx, [ebp+arg_4]
.text:00002EFE                 push    ecx
.text:00002EFF                 call    _conf_get_int_int
.text:00002F04                 add     esp, 0Ch
.text:00002F07                 push    eax
.text:00002F08                 mov     edx, [ebp+var_180]
.text:00002F0E                 push    edx
.text:00002F0F                 push    offset $SG86195 ; "%s%d"
.text:00002F14                 lea     eax, [ebp+Str]
.text:00002F1A                 push    eax             ; Str
.text:00002F1B                 call    _strlen
.text:00002F20                 add     esp, 4
.text:00002F23                 lea     ecx, [ebp+eax+Str]
.text:00002F2A                 push    ecx             ; Dest
.text:00002F2B                 call    _sprintf
.text:00002F30                 add     esp, 10h
.text:00002F33                 jmp     loc_2EB1
.text:00002F38 ; ---------------------------------------------------------------------------
.text:00002F38
.text:00002F38 loc_2F38:                               ; CODE XREF: _save_open_settings+10ACj
.text:00002F38                 lea     edx, [ebp+Str]
.text:00002F3E                 push    edx
.text:00002F3F                 lea     eax, [ebp+var_6C]
.text:00002F42                 push    eax
.text:00002F43                 mov     ecx, [ebp+arg_0]
.text:00002F46                 push    ecx
.text:00002F47                 call    _write_setting_s
.text:00002F4C                 add     esp, 0Ch
.text:00002F4F                 jmp     loc_2E74
.text:00002F54 ; ---------------------------------------------------------------------------
.text:00002F54
.text:00002F54 loc_2F54:                               ; CODE XREF: _save_open_settings+1064j
.text:00002F54                 push    8Ch ; 'î'
.text:00002F59                 mov     edx, [ebp+arg_4]
.text:00002F5C                 push    edx
.text:00002F5D                 call    _conf_get_str
.text:00002F62                 add     esp, 8
.text:00002F65                 push    eax
.text:00002F66                 push    offset $SG86196 ; "LineCodePage"
.text:00002F6B                 mov     eax, [ebp+arg_0]
.text:00002F6E                 push    eax
.text:00002F6F                 call    _write_setting_s
.text:00002F74                 add     esp, 0Ch
.text:00002F77                 push    8Dh ; 'ì'
.text:00002F7C                 mov     ecx, [ebp+arg_4]
.text:00002F7F                 push    ecx
.text:00002F80                 call    _conf_get_int
.text:00002F85                 add     esp, 8
.text:00002F88                 push    eax
.text:00002F89                 push    offset $SG86197 ; "CJKAmbigWide"
.text:00002F8E                 mov     edx, [ebp+arg_0]
.text:00002F91                 push    edx
.text:00002F92                 call    _write_setting_i
.text:00002F97                 add     esp, 0Ch
.text:00002F9A                 push    8Eh ; 'Ä'
.text:00002F9F                 mov     eax, [ebp+arg_4]
.text:00002FA2                 push    eax
.text:00002FA3                 call    _conf_get_int
.text:00002FA8                 add     esp, 8
.text:00002FAB                 push    eax
.text:00002FAC                 push    offset $SG86198 ; "UTF8Override"
.text:00002FB1                 mov     ecx, [ebp+arg_0]
.text:00002FB4                 push    ecx
.text:00002FB5                 call    _write_setting_i
.text:00002FBA                 add     esp, 0Ch
.text:00002FBD                 push    7Ch ; '|'
.text:00002FBF                 mov     edx, [ebp+arg_4]
.text:00002FC2                 push    edx
.text:00002FC3                 call    _conf_get_str
.text:00002FC8                 add     esp, 8
.text:00002FCB                 push    eax
.text:00002FCC                 push    offset $SG86199 ; "Printer"
.text:00002FD1                 mov     eax, [ebp+arg_0]
.text:00002FD4                 push    eax
.text:00002FD5                 call    _write_setting_s
.text:00002FDA                 add     esp, 0Ch
.text:00002FDD                 push    8Fh ; 'Å'
.text:00002FE2                 mov     ecx, [ebp+arg_4]
.text:00002FE5                 push    ecx
.text:00002FE6                 call    _conf_get_int
.text:00002FEB                 add     esp, 8
.text:00002FEE                 push    eax
.text:00002FEF                 push    offset $SG86200 ; "CapsLockCyr"
.text:00002FF4                 mov     edx, [ebp+arg_0]
.text:00002FF7                 push    edx
.text:00002FF8                 call    _write_setting_i
.text:00002FFD                 add     esp, 0Ch
.text:00003000                 push    68h ; 'h'
.text:00003002                 mov     eax, [ebp+arg_4]
.text:00003005                 push    eax
.text:00003006                 call    _conf_get_int
.text:0000300B                 add     esp, 8
.text:0000300E                 push    eax
.text:0000300F                 push    offset $SG86201 ; "ScrollBar"
.text:00003014                 mov     ecx, [ebp+arg_0]
.text:00003017                 push    ecx
.text:00003018                 call    _write_setting_i
.text:0000301D                 add     esp, 0Ch
.text:00003020                 push    69h ; 'i'
.text:00003022                 mov     edx, [ebp+arg_4]
.text:00003025                 push    edx
.text:00003026                 call    _conf_get_int
.text:0000302B                 add     esp, 8
.text:0000302E                 push    eax
.text:0000302F                 push    offset $SG86202 ; "ScrollBarFullScreen"
.text:00003034                 mov     eax, [ebp+arg_0]
.text:00003037                 push    eax
.text:00003038                 call    _write_setting_i
.text:0000303D                 add     esp, 0Ch
.text:00003040                 push    55h ; 'U'
.text:00003042                 mov     ecx, [ebp+arg_4]
.text:00003045                 push    ecx
.text:00003046                 call    _conf_get_int
.text:0000304B                 add     esp, 8
.text:0000304E                 push    eax
.text:0000304F                 push    offset $SG86203 ; "ScrollOnKey"
.text:00003054                 mov     edx, [ebp+arg_0]
.text:00003057                 push    edx
.text:00003058                 call    _write_setting_i
.text:0000305D                 add     esp, 0Ch
.text:00003060                 push    56h ; 'V'
.text:00003062                 mov     eax, [ebp+arg_4]
.text:00003065                 push    eax
.text:00003066                 call    _conf_get_int
.text:0000306B                 add     esp, 8
.text:0000306E                 push    eax
.text:0000306F                 push    offset $SG86204 ; "ScrollOnDisp"
.text:00003074                 mov     ecx, [ebp+arg_0]
.text:00003077                 push    ecx
.text:00003078                 call    _write_setting_i
.text:0000307D                 add     esp, 0Ch
.text:00003080                 push    57h ; 'W'
.text:00003082                 mov     edx, [ebp+arg_4]
.text:00003085                 push    edx
.text:00003086                 call    _conf_get_int
.text:0000308B                 add     esp, 8
.text:0000308E                 push    eax
.text:0000308F                 push    offset $SG86205 ; "EraseToScrollback"
.text:00003094                 mov     eax, [ebp+arg_0]
.text:00003097                 push    eax
.text:00003098                 call    _write_setting_i
.text:0000309D                 add     esp, 0Ch
.text:000030A0                 push    6Ah ; 'j'
.text:000030A2                 mov     ecx, [ebp+arg_4]
.text:000030A5                 push    ecx
.text:000030A6                 call    _conf_get_int
.text:000030AB                 add     esp, 8
.text:000030AE                 push    eax
.text:000030AF                 push    offset $SG86206 ; "LockSize"
.text:000030B4                 mov     edx, [ebp+arg_0]
.text:000030B7                 push    edx
.text:000030B8                 call    _write_setting_i
.text:000030BD                 add     esp, 0Ch
.text:000030C0                 push    6Bh ; 'k'
.text:000030C2                 mov     eax, [ebp+arg_4]
.text:000030C5                 push    eax
.text:000030C6                 call    _conf_get_int
.text:000030CB                 add     esp, 8
.text:000030CE                 push    eax
.text:000030CF                 push    offset $SG86207 ; "BCE"
.text:000030D4                 mov     ecx, [ebp+arg_0]
.text:000030D7                 push    ecx
.text:000030D8                 call    _write_setting_i
.text:000030DD                 add     esp, 0Ch
.text:000030E0                 push    6Ch ; 'l'
.text:000030E2                 mov     edx, [ebp+arg_4]
.text:000030E5                 push    edx
.text:000030E6                 call    _conf_get_int
.text:000030EB                 add     esp, 8
.text:000030EE                 push    eax
.text:000030EF                 push    offset $SG86208 ; "BlinkText"
.text:000030F4                 mov     eax, [ebp+arg_0]
.text:000030F7                 push    eax
.text:000030F8                 call    _write_setting_i
.text:000030FD                 add     esp, 0Ch
.text:00003100                 push    90h ; 'É'
.text:00003105                 mov     ecx, [ebp+arg_4]
.text:00003108                 push    ecx
.text:00003109                 call    _conf_get_int
.text:0000310E                 add     esp, 8
.text:00003111                 push    eax
.text:00003112                 push    offset $SG86209 ; "X11Forward"
.text:00003117                 mov     edx, [ebp+arg_0]
.text:0000311A                 push    edx
.text:0000311B                 call    _write_setting_i
.text:00003120                 add     esp, 0Ch
.text:00003123                 push    91h ; 'æ'
.text:00003128                 mov     eax, [ebp+arg_4]
.text:0000312B                 push    eax
.text:0000312C                 call    _conf_get_str
.text:00003131                 add     esp, 8
.text:00003134                 push    eax
.text:00003135                 push    offset $SG86210 ; "X11Display"
.text:0000313A                 mov     ecx, [ebp+arg_0]
.text:0000313D                 push    ecx
.text:0000313E                 call    _write_setting_s
.text:00003143                 add     esp, 0Ch
.text:00003146                 push    92h ; 'Æ'
.text:0000314B                 mov     edx, [ebp+arg_4]
.text:0000314E                 push    edx
.text:0000314F                 call    _conf_get_int
.text:00003154                 add     esp, 8
.text:00003157                 push    eax
.text:00003158                 push    offset $SG86211 ; "X11AuthType"
.text:0000315D                 mov     eax, [ebp+arg_0]
.text:00003160                 push    eax
.text:00003161                 call    _write_setting_i
.text:00003166                 add     esp, 0Ch
.text:00003169                 push    93h ; 'ô'
.text:0000316E                 mov     ecx, [ebp+arg_4]
.text:00003171                 push    ecx
.text:00003172                 call    _conf_get_filename
.text:00003177                 add     esp, 8
.text:0000317A                 push    eax
.text:0000317B                 push    offset $SG86212 ; "X11AuthFile"
.text:00003180                 mov     edx, [ebp+arg_0]
.text:00003183                 push    edx
.text:00003184                 call    _write_setting_filename
.text:00003189                 add     esp, 0Ch
.text:0000318C                 push    94h ; 'ö'
.text:00003191                 mov     eax, [ebp+arg_4]
.text:00003194                 push    eax
.text:00003195                 call    _conf_get_int
.text:0000319A                 add     esp, 8
.text:0000319D                 push    eax
.text:0000319E                 push    offset $SG86213 ; "LocalPortAcceptAll"
.text:000031A3                 mov     ecx, [ebp+arg_0]
.text:000031A6                 push    ecx
.text:000031A7                 call    _write_setting_i
.text:000031AC                 add     esp, 0Ch
.text:000031AF                 push    95h ; 'ò'
.text:000031B4                 mov     edx, [ebp+arg_4]
.text:000031B7                 push    edx
.text:000031B8                 call    _conf_get_int
.text:000031BD                 add     esp, 8
.text:000031C0                 push    eax
.text:000031C1                 push    offset $SG86214 ; "RemotePortAcceptAll"
.text:000031C6                 mov     eax, [ebp+arg_0]
.text:000031C9                 push    eax
.text:000031CA                 call    _write_setting_i
.text:000031CF                 add     esp, 0Ch
.text:000031D2                 push    1
.text:000031D4                 push    96h ; 'û'
.text:000031D9                 mov     ecx, [ebp+arg_4]
.text:000031DC                 push    ecx
.text:000031DD                 push    offset $SG86215 ; "PortForwardings"
.text:000031E2                 mov     edx, [ebp+arg_0]
.text:000031E5                 push    edx
.text:000031E6                 call    _wmap
.text:000031EB                 add     esp, 14h
.text:000031EE                 push    97h ; 'ù'
.text:000031F3                 mov     eax, [ebp+arg_4]
.text:000031F6                 push    eax
.text:000031F7                 call    _conf_get_int
.text:000031FC                 add     esp, 8
.text:000031FF                 mov     ecx, 2
.text:00003204                 sub     ecx, eax
.text:00003206                 push    ecx
.text:00003207                 push    offset $SG86216 ; "BugIgnore1"
.text:0000320C                 mov     edx, [ebp+arg_0]
.text:0000320F                 push    edx
.text:00003210                 call    _write_setting_i
.text:00003215                 add     esp, 0Ch
.text:00003218                 push    98h ; 'ÿ'
.text:0000321D                 mov     eax, [ebp+arg_4]
.text:00003220                 push    eax
.text:00003221                 call    _conf_get_int
.text:00003226                 add     esp, 8
.text:00003229                 mov     ecx, 2
.text:0000322E                 sub     ecx, eax
.text:00003230                 push    ecx
.text:00003231                 push    offset $SG86217 ; "BugPlainPW1"
.text:00003236                 mov     edx, [ebp+arg_0]
.text:00003239                 push    edx
.text:0000323A                 call    _write_setting_i
.text:0000323F                 add     esp, 0Ch
.text:00003242                 push    99h ; 'Ö'
.text:00003247                 mov     eax, [ebp+arg_4]
.text:0000324A                 push    eax
.text:0000324B                 call    _conf_get_int
.text:00003250                 add     esp, 8
.text:00003253                 mov     ecx, 2
.text:00003258                 sub     ecx, eax
.text:0000325A                 push    ecx
.text:0000325B                 push    offset $SG86218 ; "BugRSA1"
.text:00003260                 mov     edx, [ebp+arg_0]
.text:00003263                 push    edx
.text:00003264                 call    _write_setting_i
.text:00003269                 add     esp, 0Ch
.text:0000326C                 push    0A0h ; 'á'
.text:00003271                 mov     eax, [ebp+arg_4]
.text:00003274                 push    eax
.text:00003275                 call    _conf_get_int
.text:0000327A                 add     esp, 8
.text:0000327D                 mov     ecx, 2
.text:00003282                 sub     ecx, eax
.text:00003284                 push    ecx
.text:00003285                 push    offset $SG86219 ; "BugIgnore2"
.text:0000328A                 mov     edx, [ebp+arg_0]
.text:0000328D                 push    edx
.text:0000328E                 call    _write_setting_i
.text:00003293                 add     esp, 0Ch
.text:00003296                 push    9Ah ; 'Ü'
.text:0000329B                 mov     eax, [ebp+arg_4]
.text:0000329E                 push    eax
.text:0000329F                 call    _conf_get_int
.text:000032A4                 add     esp, 8
.text:000032A7                 mov     ecx, 2
.text:000032AC                 sub     ecx, eax
.text:000032AE                 push    ecx
.text:000032AF                 push    offset $SG86220 ; "BugHMAC2"
.text:000032B4                 mov     edx, [ebp+arg_0]
.text:000032B7                 push    edx
.text:000032B8                 call    _write_setting_i
.text:000032BD                 add     esp, 0Ch
.text:000032C0                 push    9Bh ; '¢'
.text:000032C5                 mov     eax, [ebp+arg_4]
.text:000032C8                 push    eax
.text:000032C9                 call    _conf_get_int
.text:000032CE                 add     esp, 8
.text:000032D1                 mov     ecx, 2
.text:000032D6                 sub     ecx, eax
.text:000032D8                 push    ecx
.text:000032D9                 push    offset $SG86221 ; "BugDeriveKey2"
.text:000032DE                 mov     edx, [ebp+arg_0]
.text:000032E1                 push    edx
.text:000032E2                 call    _write_setting_i
.text:000032E7                 add     esp, 0Ch
.text:000032EA                 push    9Ch ; '£'
.text:000032EF                 mov     eax, [ebp+arg_4]
.text:000032F2                 push    eax
.text:000032F3                 call    _conf_get_int
.text:000032F8                 add     esp, 8
.text:000032FB                 mov     ecx, 2
.text:00003300                 sub     ecx, eax
.text:00003302                 push    ecx
.text:00003303                 push    offset $SG86222 ; "BugRSAPad2"
.text:00003308                 mov     edx, [ebp+arg_0]
.text:0000330B                 push    edx
.text:0000330C                 call    _write_setting_i
.text:00003311                 add     esp, 0Ch
.text:00003314                 push    9Dh ; '¥'
.text:00003319                 mov     eax, [ebp+arg_4]
.text:0000331C                 push    eax
.text:0000331D                 call    _conf_get_int
.text:00003322                 add     esp, 8
.text:00003325                 mov     ecx, 2
.text:0000332A                 sub     ecx, eax
.text:0000332C                 push    ecx
.text:0000332D                 push    offset $SG86223 ; "BugPKSessID2"
.text:00003332                 mov     edx, [ebp+arg_0]
.text:00003335                 push    edx
.text:00003336                 call    _write_setting_i
.text:0000333B                 add     esp, 0Ch
.text:0000333E                 push    9Eh ; 'P'
.text:00003343                 mov     eax, [ebp+arg_4]
.text:00003346                 push    eax
.text:00003347                 call    _conf_get_int
.text:0000334C                 add     esp, 8
.text:0000334F                 mov     ecx, 2
.text:00003354                 sub     ecx, eax
.text:00003356                 push    ecx
.text:00003357                 push    offset $SG86224 ; "BugRekey2"
.text:0000335C                 mov     edx, [ebp+arg_0]
.text:0000335F                 push    edx
.text:00003360                 call    _write_setting_i
.text:00003365                 add     esp, 0Ch
.text:00003368                 push    9Fh ; 'ƒ'
.text:0000336D                 mov     eax, [ebp+arg_4]
.text:00003370                 push    eax
.text:00003371                 call    _conf_get_int
.text:00003376                 add     esp, 8
.text:00003379                 mov     ecx, 2
.text:0000337E                 sub     ecx, eax
.text:00003380                 push    ecx
.text:00003381                 push    offset $SG86225 ; "BugMaxPkt2"
.text:00003386                 mov     edx, [ebp+arg_0]
.text:00003389                 push    edx
.text:0000338A                 call    _write_setting_i
.text:0000338F                 add     esp, 0Ch
.text:00003392                 push    0A1h ; 'í'
.text:00003397                 mov     eax, [ebp+arg_4]
.text:0000339A                 push    eax
.text:0000339B                 call    _conf_get_int
.text:000033A0                 add     esp, 8
.text:000033A3                 mov     ecx, 2
.text:000033A8                 sub     ecx, eax
.text:000033AA                 push    ecx
.text:000033AB                 push    offset $SG86226 ; "BugWinadj"
.text:000033B0                 mov     edx, [ebp+arg_0]
.text:000033B3                 push    edx
.text:000033B4                 call    _write_setting_i
.text:000033B9                 add     esp, 0Ch
.text:000033BC                 push    0A2h ; 'ó'
.text:000033C1                 mov     eax, [ebp+arg_4]
.text:000033C4                 push    eax
.text:000033C5                 call    _conf_get_int
.text:000033CA                 add     esp, 8
.text:000033CD                 mov     ecx, 2
.text:000033D2                 sub     ecx, eax
.text:000033D4                 push    ecx
.text:000033D5                 push    offset $SG86227 ; "BugChanReq"
.text:000033DA                 mov     edx, [ebp+arg_0]
.text:000033DD                 push    edx
.text:000033DE                 call    _write_setting_i
.text:000033E3                 add     esp, 0Ch
.text:000033E6                 push    0A8h ; '¿'
.text:000033EB                 mov     eax, [ebp+arg_4]
.text:000033EE                 push    eax
.text:000033EF                 call    _conf_get_int
.text:000033F4                 add     esp, 8
.text:000033F7                 push    eax
.text:000033F8                 push    offset $SG86228 ; "StampUtmp"
.text:000033FD                 mov     ecx, [ebp+arg_0]
.text:00003400                 push    ecx
.text:00003401                 call    _write_setting_i
.text:00003406                 add     esp, 0Ch
.text:00003409                 push    0A9h ; '¬'
.text:0000340E                 mov     edx, [ebp+arg_4]
.text:00003411                 push    edx
.text:00003412                 call    _conf_get_int
.text:00003417                 add     esp, 8
.text:0000341A                 push    eax
.text:0000341B                 push    offset $SG86229 ; "LoginShell"
.text:00003420                 mov     eax, [ebp+arg_0]
.text:00003423                 push    eax
.text:00003424                 call    _write_setting_i
.text:00003429                 add     esp, 0Ch
.text:0000342C                 push    0AAh ; '¬'
.text:00003431                 mov     ecx, [ebp+arg_4]
.text:00003434                 push    ecx
.text:00003435                 call    _conf_get_int
.text:0000343A                 add     esp, 8
.text:0000343D                 push    eax
.text:0000343E                 push    offset $SG86230 ; "ScrollbarOnLeft"
.text:00003443                 mov     edx, [ebp+arg_0]
.text:00003446                 push    edx
.text:00003447                 call    _write_setting_i
.text:0000344C                 add     esp, 0Ch
.text:0000344F                 push    0ACh ; '¼'
.text:00003454                 mov     eax, [ebp+arg_4]
.text:00003457                 push    eax
.text:00003458                 call    _conf_get_fontspec
.text:0000345D                 add     esp, 8
.text:00003460                 push    eax
.text:00003461                 push    offset $SG86231 ; "BoldFont"
.text:00003466                 mov     ecx, [ebp+arg_0]
.text:00003469                 push    ecx
.text:0000346A                 call    _write_setting_fontspec
.text:0000346F                 add     esp, 0Ch
.text:00003472                 push    0ADh ; '¡'
.text:00003477                 mov     edx, [ebp+arg_4]
.text:0000347A                 push    edx
.text:0000347B                 call    _conf_get_fontspec
.text:00003480                 add     esp, 8
.text:00003483                 push    eax
.text:00003484                 push    offset $SG86232 ; "WideFont"
.text:00003489                 mov     eax, [ebp+arg_0]
.text:0000348C                 push    eax
.text:0000348D                 call    _write_setting_fontspec
.text:00003492                 add     esp, 0Ch
.text:00003495                 push    0AEh ; '«'
.text:0000349A                 mov     ecx, [ebp+arg_4]
.text:0000349D                 push    ecx
.text:0000349E                 call    _conf_get_fontspec
.text:000034A3                 add     esp, 8
.text:000034A6                 push    eax
.text:000034A7                 push    offset $SG86233 ; "WideBoldFont"
.text:000034AC                 mov     edx, [ebp+arg_0]
.text:000034AF                 push    edx
.text:000034B0                 call    _write_setting_fontspec
.text:000034B5                 add     esp, 0Ch
.text:000034B8                 push    0ABh ; '½'
.text:000034BD                 mov     eax, [ebp+arg_4]
.text:000034C0                 push    eax
.text:000034C1                 call    _conf_get_int
.text:000034C6                 add     esp, 8
.text:000034C9                 push    eax
.text:000034CA                 push    offset $SG86234 ; "ShadowBold"
.text:000034CF                 mov     ecx, [ebp+arg_0]
.text:000034D2                 push    ecx
.text:000034D3                 call    _write_setting_i
.text:000034D8                 add     esp, 0Ch
.text:000034DB                 push    0AFh ; '»'
.text:000034E0                 mov     edx, [ebp+arg_4]
.text:000034E3                 push    edx
.text:000034E4                 call    _conf_get_int
.text:000034E9                 add     esp, 8
.text:000034EC                 push    eax
.text:000034ED                 push    offset $SG86235 ; "ShadowBoldOffset"
.text:000034F2                 mov     eax, [ebp+arg_0]
.text:000034F5                 push    eax
.text:000034F6                 call    _write_setting_i
.text:000034FB                 add     esp, 0Ch
.text:000034FE                 push    37h ; '7'
.text:00003500                 mov     ecx, [ebp+arg_4]
.text:00003503                 push    ecx
.text:00003504                 call    _conf_get_str
.text:00003509                 add     esp, 8
.text:0000350C                 push    eax
.text:0000350D                 push    offset $SG86236 ; "SerialLine"
.text:00003512                 mov     edx, [ebp+arg_0]
.text:00003515                 push    edx
.text:00003516                 call    _write_setting_s
.text:0000351B                 add     esp, 0Ch
.text:0000351E                 push    38h ; '8'
.text:00003520                 mov     eax, [ebp+arg_4]
.text:00003523                 push    eax
.text:00003524                 call    _conf_get_int
.text:00003529                 add     esp, 8
.text:0000352C                 push    eax
.text:0000352D                 push    offset $SG86237 ; "SerialSpeed"
.text:00003532                 mov     ecx, [ebp+arg_0]
.text:00003535                 push    ecx
.text:00003536                 call    _write_setting_i
.text:0000353B                 add     esp, 0Ch
.text:0000353E                 push    39h ; '9'
.text:00003540                 mov     edx, [ebp+arg_4]
.text:00003543                 push    edx
.text:00003544                 call    _conf_get_int
.text:00003549                 add     esp, 8
.text:0000354C                 push    eax
.text:0000354D                 push    offset $SG86238 ; "SerialDataBits"
.text:00003552                 mov     eax, [ebp+arg_0]
.text:00003555                 push    eax
.text:00003556                 call    _write_setting_i
.text:0000355B                 add     esp, 0Ch
.text:0000355E                 push    3Ah ; ':'
.text:00003560                 mov     ecx, [ebp+arg_4]
.text:00003563                 push    ecx
.text:00003564                 call    _conf_get_int
.text:00003569                 add     esp, 8
.text:0000356C                 push    eax
.text:0000356D                 push    offset $SG86239 ; "SerialStopHalfbits"
.text:00003572                 mov     edx, [ebp+arg_0]
.text:00003575                 push    edx
.text:00003576                 call    _write_setting_i
.text:0000357B                 add     esp, 0Ch
.text:0000357E                 push    3Bh ; ';'
.text:00003580                 mov     eax, [ebp+arg_4]
.text:00003583                 push    eax
.text:00003584                 call    _conf_get_int
.text:00003589                 add     esp, 8
.text:0000358C                 push    eax
.text:0000358D                 push    offset $SG86240 ; "SerialParity"
.text:00003592                 mov     ecx, [ebp+arg_0]
.text:00003595                 push    ecx
.text:00003596                 call    _write_setting_i
.text:0000359B                 add     esp, 0Ch
.text:0000359E                 push    3Ch ; '<'
.text:000035A0                 mov     edx, [ebp+arg_4]
.text:000035A3                 push    edx
.text:000035A4                 call    _conf_get_int
.text:000035A9                 add     esp, 8
.text:000035AC                 push    eax
.text:000035AD                 push    offset $SG86241 ; "SerialFlowControl"
.text:000035B2                 mov     eax, [ebp+arg_0]
.text:000035B5                 push    eax
.text:000035B6                 call    _write_setting_i
.text:000035BB                 add     esp, 0Ch
.text:000035BE                 push    0B1h ; '¦'
.text:000035C3                 mov     ecx, [ebp+arg_4]
.text:000035C6                 push    ecx
.text:000035C7                 call    _conf_get_str
.text:000035CC                 add     esp, 8
.text:000035CF                 push    eax
.text:000035D0                 push    offset $SG86242 ; "WindowClass"
.text:000035D5                 mov     edx, [ebp+arg_0]
.text:000035D8                 push    edx
.text:000035D9                 call    _write_setting_s
.text:000035DE                 add     esp, 0Ch
.text:000035E1                 push    0A4h ; 'ñ'
.text:000035E6                 mov     eax, [ebp+arg_4]
.text:000035E9                 push    eax
.text:000035EA                 call    _conf_get_int
.text:000035EF                 add     esp, 8
.text:000035F2                 push    eax
.text:000035F3                 push    offset $SG86243 ; "ConnectionSharing"
.text:000035F8                 mov     ecx, [ebp+arg_0]
.text:000035FB                 push    ecx
.text:000035FC                 call    _write_setting_i
.text:00003601                 add     esp, 0Ch
.text:00003604                 push    0A5h ; 'Ñ'
.text:00003609                 mov     edx, [ebp+arg_4]
.text:0000360C                 push    edx
.text:0000360D                 call    _conf_get_int
.text:00003612                 add     esp, 8
.text:00003615                 push    eax
.text:00003616                 push    offset $SG86244 ; "ConnectionSharingUpstream"
.text:0000361B                 mov     eax, [ebp+arg_0]
.text:0000361E                 push    eax
.text:0000361F                 call    _write_setting_i
.text:00003624                 add     esp, 0Ch
.text:00003627                 push    0A6h ; 'ª'
.text:0000362C                 mov     ecx, [ebp+arg_4]
.text:0000362F                 push    ecx
.text:00003630                 call    _conf_get_int
.text:00003635                 add     esp, 8
.text:00003638                 push    eax
.text:00003639                 push    offset $SG86245 ; "ConnectionSharingDownstream"
.text:0000363E                 mov     edx, [ebp+arg_0]
.text:00003641                 push    edx
.text:00003642                 call    _write_setting_i
.text:00003647                 add     esp, 0Ch
.text:0000364A                 push    0
.text:0000364C                 push    0A7h ; 'º'
.text:00003651                 mov     eax, [ebp+arg_4]
.text:00003654                 push    eax
.text:00003655                 push    offset $SG86246 ; "SSHManualHostKeys"
.text:0000365A                 mov     ecx, [ebp+arg_0]
.text:0000365D                 push    ecx
.text:0000365E                 call    _wmap
.text:00003663                 add     esp, 14h
.text:00003666                 push    edx
.text:00003667                 mov     ecx, ebp
.text:00003669                 push    eax
.text:0000366A                 lea     edx, $LN20
.text:00003670                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003675                 pop     eax
.text:00003676                 pop     edx
.text:00003677                 pop     edi
.text:00003678                 mov     ecx, [ebp+var_4]
.text:0000367B                 xor     ecx, ebp
.text:0000367D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003682                 add     esp, 180h
.text:00003688                 cmp     ebp, esp
.text:0000368A                 call    __RTC_CheckEsp
.text:0000368F                 mov     esp, ebp
.text:00003691                 pop     ebp
.text:00003692                 retn
.text:00003692 _save_open_settings endp
.text:00003692
.text:00003692 ; ---------------------------------------------------------------------------
.text:00003693                 align 4
.text:00003694 $LN20           dd 4                    ; DATA XREF: _save_open_settings+184Ao
.text:00003698                 dd offset $LN19
.text:0000369C $LN19           dd 0FFFFFFD8h, 14h      ; DATA XREF: .text:00003698o
.text:000036A4                 dd offset $LN15         ; "buf"
.text:000036A8                 dd 0FFFFFFB0h, 1Eh
.text:000036B0                 dd offset $LN16         ; "buf2"
.text:000036B4                 dd 0FFFFFF94h, 14h
.text:000036BC                 dd offset $LN17         ; "buf"
.text:000036C0                 dd 0FFFFFE8Ch, 100h
.text:000036C8                 dd offset $LN18         ; "buf2"
.text:000036CC $LN18           db 'buf2',0             ; DATA XREF: .text:000036C8o
.text:000036D1 $LN17           db 'buf',0              ; DATA XREF: .text:000036BCo
.text:000036D5 $LN16           db 'buf2',0             ; DATA XREF: .text:000036B0o
.text:000036DA $LN15           db 'buf',0              ; DATA XREF: .text:000036A4o
.text:000036DE                 align 10h
.text:000036E0
.text:000036E0 ; =============== S U B R O U T I N E =======================================
.text:000036E0
.text:000036E0 ; Attributes: bp-based frame
.text:000036E0
.text:000036E0 _wmap           proc near               ; CODE XREF: _save_open_settings+2B0p
.text:000036E0                                         ; _save_open_settings+414p ...
.text:000036E0
.text:000036E0 var_28          = dword ptr -28h
.text:000036E0 var_24          = dword ptr -24h
.text:000036E0 Str1            = dword ptr -20h
.text:000036E0 var_1C          = dword ptr -1Ch
.text:000036E0 Str             = dword ptr -14h
.text:000036E0 var_C           = dword ptr -0Ch
.text:000036E0 var_8           = dword ptr -8
.text:000036E0 var_4           = dword ptr -4
.text:000036E0 arg_0           = dword ptr  8
.text:000036E0 arg_4           = dword ptr  0Ch
.text:000036E0 arg_8           = dword ptr  10h
.text:000036E0 arg_C           = dword ptr  14h
.text:000036E0 arg_10          = dword ptr  18h
.text:000036E0
.text:000036E0                 push    ebp
.text:000036E1                 mov     ebp, esp
.text:000036E3                 sub     esp, 28h
.text:000036E6                 push    esi
.text:000036E7                 push    edi
.text:000036E8                 lea     edi, [ebp+var_28]
.text:000036EB                 mov     ecx, 0Ah
.text:000036F0                 mov     eax, 0CCCCCCCCh
.text:000036F5                 rep stosd
.text:000036F7                 mov     [ebp+var_24], 1
.text:000036FE                 lea     eax, [ebp+Str]
.text:00003701                 push    eax
.text:00003702                 push    0
.text:00003704                 mov     ecx, [ebp+arg_C]
.text:00003707                 push    ecx
.text:00003708                 mov     edx, [ebp+arg_8]
.text:0000370B                 push    edx
.text:0000370C                 call    _conf_get_str_strs
.text:00003711                 add     esp, 10h
.text:00003714                 mov     [ebp+Str1], eax
.text:00003717                 jmp     short loc_3734
.text:00003719 ; ---------------------------------------------------------------------------
.text:00003719
.text:00003719 loc_3719:                               ; CODE XREF: _wmap+80j
.text:00003719                 lea     eax, [ebp+Str]
.text:0000371C                 push    eax
.text:0000371D                 mov     ecx, [ebp+Str]
.text:00003720                 push    ecx
.text:00003721                 mov     edx, [ebp+arg_C]
.text:00003724                 push    edx
.text:00003725                 mov     eax, [ebp+arg_8]
.text:00003728                 push    eax
.text:00003729                 call    _conf_get_str_strs
.text:0000372E                 add     esp, 10h
.text:00003731                 mov     [ebp+Str1], eax
.text:00003734
.text:00003734 loc_3734:                               ; CODE XREF: _wmap+37j
.text:00003734                 cmp     [ebp+Str1], 0
.text:00003738                 jz      short loc_3762
.text:0000373A                 mov     ecx, [ebp+Str]
.text:0000373D                 push    ecx             ; Str
.text:0000373E                 call    _strlen
.text:00003743                 add     esp, 4
.text:00003746                 mov     esi, eax
.text:00003748                 mov     edx, [ebp+Str1]
.text:0000374B                 push    edx             ; Str
.text:0000374C                 call    _strlen
.text:00003751                 add     esp, 4
.text:00003754                 add     esi, eax
.text:00003756                 mov     eax, [ebp+var_24]
.text:00003759                 lea     ecx, [eax+esi*2+2]
.text:0000375D                 mov     [ebp+var_24], ecx
.text:00003760                 jmp     short loc_3719
.text:00003762 ; ---------------------------------------------------------------------------
.text:00003762
.text:00003762 loc_3762:                               ; CODE XREF: _wmap+58j
.text:00003762                 push    1
.text:00003764                 mov     edx, [ebp+var_24]
.text:00003767                 push    edx
.text:00003768                 call    _safemalloc
.text:0000376D                 add     esp, 8
.text:00003770                 mov     [ebp+var_4], eax
.text:00003773                 mov     eax, [ebp+var_4]
.text:00003776                 mov     [ebp+var_8], eax
.text:00003779                 lea     ecx, [ebp+Str]
.text:0000377C                 push    ecx
.text:0000377D                 push    0
.text:0000377F                 mov     edx, [ebp+arg_C]
.text:00003782                 push    edx
.text:00003783                 mov     eax, [ebp+arg_8]
.text:00003786                 push    eax
.text:00003787                 call    _conf_get_str_strs
.text:0000378C                 add     esp, 10h
.text:0000378F                 mov     [ebp+Str1], eax
.text:00003792                 jmp     short loc_37AF
.text:00003794 ; ---------------------------------------------------------------------------
.text:00003794
.text:00003794 loc_3794:                               ; CODE XREF: _wmap:loc_391Dj
.text:00003794                 lea     ecx, [ebp+Str]
.text:00003797                 push    ecx
.text:00003798                 mov     edx, [ebp+Str]
.text:0000379B                 push    edx
.text:0000379C                 mov     eax, [ebp+arg_C]
.text:0000379F                 push    eax
.text:000037A0                 mov     ecx, [ebp+arg_8]
.text:000037A3                 push    ecx
.text:000037A4                 call    _conf_get_str_strs
.text:000037A9                 add     esp, 10h
.text:000037AC                 mov     [ebp+Str1], eax
.text:000037AF
.text:000037AF loc_37AF:                               ; CODE XREF: _wmap+B2j
.text:000037AF                 cmp     [ebp+Str1], 0
.text:000037B3                 jz      loc_3922
.text:000037B9                 cmp     [ebp+arg_C], 96h ; 'û'
.text:000037C0                 jnz     short loc_3812
.text:000037C2                 push    offset $SG85894 ; Str2
.text:000037C7                 mov     edx, [ebp+Str1]
.text:000037CA                 push    edx             ; Str1
.text:000037CB                 call    _strcmp
.text:000037D0                 add     esp, 8
.text:000037D3                 test    eax, eax
.text:000037D5                 jnz     short loc_3812
.text:000037D7                 mov     eax, [ebp+Str]
.text:000037DA                 mov     [ebp+var_1C], eax
.text:000037DD                 mov     [ebp+Str1], offset $SG85896
.text:000037E4                 mov     ecx, [ebp+Str]
.text:000037E7                 push    ecx
.text:000037E8                 call    _dupstr
.text:000037ED                 add     esp, 4
.text:000037F0                 mov     [ebp+Str], eax
.text:000037F3                 push    4Ch ; 'L'       ; Val
.text:000037F5                 mov     edx, [ebp+Str]
.text:000037F8                 push    edx             ; Str
.text:000037F9                 call    _strchr
.text:000037FE                 add     esp, 8
.text:00003801                 mov     [ebp+var_28], eax
.text:00003804                 cmp     [ebp+var_28], 0
.text:00003808                 jz      short loc_3810
.text:0000380A                 mov     eax, [ebp+var_28]
.text:0000380D                 mov     byte ptr [eax], 44h ; 'D'
.text:00003810
.text:00003810 loc_3810:                               ; CODE XREF: _wmap+128j
.text:00003810                 jmp     short loc_3819
.text:00003812 ; ---------------------------------------------------------------------------
.text:00003812
.text:00003812 loc_3812:                               ; CODE XREF: _wmap+E0j
.text:00003812                                         ; _wmap+F5j
.text:00003812                 mov     [ebp+var_1C], 0
.text:00003819
.text:00003819 loc_3819:                               ; CODE XREF: _wmap:loc_3810j
.text:00003819                 mov     ecx, [ebp+var_8]
.text:0000381C                 cmp     ecx, [ebp+var_4]
.text:0000381F                 jz      short loc_3830
.text:00003821                 mov     edx, [ebp+var_8]
.text:00003824                 mov     byte ptr [edx], 2Ch ; ','
.text:00003827                 mov     eax, [ebp+var_8]
.text:0000382A                 add     eax, 1
.text:0000382D                 mov     [ebp+var_8], eax
.text:00003830
.text:00003830 loc_3830:                               ; CODE XREF: _wmap+13Fj
.text:00003830                 mov     ecx, [ebp+Str]
.text:00003833                 mov     [ebp+var_C], ecx
.text:00003836                 jmp     short loc_3841
.text:00003838 ; ---------------------------------------------------------------------------
.text:00003838
.text:00003838 loc_3838:                               ; CODE XREF: _wmap+1AEj
.text:00003838                 mov     edx, [ebp+var_C]
.text:0000383B                 add     edx, 1
.text:0000383E                 mov     [ebp+var_C], edx
.text:00003841
.text:00003841 loc_3841:                               ; CODE XREF: _wmap+156j
.text:00003841                 mov     eax, [ebp+var_C]
.text:00003844                 movsx   ecx, byte ptr [eax]
.text:00003847                 test    ecx, ecx
.text:00003849                 jz      short loc_3890
.text:0000384B                 mov     edx, [ebp+var_C]
.text:0000384E                 movsx   eax, byte ptr [edx]
.text:00003851                 cmp     eax, 3Dh ; '='
.text:00003854                 jz      short loc_386C
.text:00003856                 mov     ecx, [ebp+var_C]
.text:00003859                 movsx   edx, byte ptr [ecx]
.text:0000385C                 cmp     edx, 2Ch ; ','
.text:0000385F                 jz      short loc_386C
.text:00003861                 mov     eax, [ebp+var_C]
.text:00003864                 movsx   ecx, byte ptr [eax]
.text:00003867                 cmp     ecx, 5Ch ; '\'
.text:0000386A                 jnz     short loc_387B
.text:0000386C
.text:0000386C loc_386C:                               ; CODE XREF: _wmap+174j
.text:0000386C                                         ; _wmap+17Fj
.text:0000386C                 mov     edx, [ebp+var_8]
.text:0000386F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00003872                 mov     eax, [ebp+var_8]
.text:00003875                 add     eax, 1
.text:00003878                 mov     [ebp+var_8], eax
.text:0000387B
.text:0000387B loc_387B:                               ; CODE XREF: _wmap+18Aj
.text:0000387B                 mov     ecx, [ebp+var_8]
.text:0000387E                 mov     edx, [ebp+var_C]
.text:00003881                 mov     al, [edx]
.text:00003883                 mov     [ecx], al
.text:00003885                 mov     ecx, [ebp+var_8]
.text:00003888                 add     ecx, 1
.text:0000388B                 mov     [ebp+var_8], ecx
.text:0000388E                 jmp     short loc_3838
.text:00003890 ; ---------------------------------------------------------------------------
.text:00003890
.text:00003890 loc_3890:                               ; CODE XREF: _wmap+169j
.text:00003890                 cmp     [ebp+arg_10], 0
.text:00003894                 jz      short loc_3905
.text:00003896                 mov     edx, [ebp+var_8]
.text:00003899                 mov     byte ptr [edx], 3Dh ; '='
.text:0000389C                 mov     eax, [ebp+var_8]
.text:0000389F                 add     eax, 1
.text:000038A2                 mov     [ebp+var_8], eax
.text:000038A5                 mov     ecx, [ebp+Str1]
.text:000038A8                 mov     [ebp+var_C], ecx
.text:000038AB                 jmp     short loc_38B6
.text:000038AD ; ---------------------------------------------------------------------------
.text:000038AD
.text:000038AD loc_38AD:                               ; CODE XREF: _wmap+223j
.text:000038AD                 mov     edx, [ebp+var_C]
.text:000038B0                 add     edx, 1
.text:000038B3                 mov     [ebp+var_C], edx
.text:000038B6
.text:000038B6 loc_38B6:                               ; CODE XREF: _wmap+1CBj
.text:000038B6                 mov     eax, [ebp+var_C]
.text:000038B9                 movsx   ecx, byte ptr [eax]
.text:000038BC                 test    ecx, ecx
.text:000038BE                 jz      short loc_3905
.text:000038C0                 mov     edx, [ebp+var_C]
.text:000038C3                 movsx   eax, byte ptr [edx]
.text:000038C6                 cmp     eax, 3Dh ; '='
.text:000038C9                 jz      short loc_38E1
.text:000038CB                 mov     ecx, [ebp+var_C]
.text:000038CE                 movsx   edx, byte ptr [ecx]
.text:000038D1                 cmp     edx, 2Ch ; ','
.text:000038D4                 jz      short loc_38E1
.text:000038D6                 mov     eax, [ebp+var_C]
.text:000038D9                 movsx   ecx, byte ptr [eax]
.text:000038DC                 cmp     ecx, 5Ch ; '\'
.text:000038DF                 jnz     short loc_38F0
.text:000038E1
.text:000038E1 loc_38E1:                               ; CODE XREF: _wmap+1E9j
.text:000038E1                                         ; _wmap+1F4j
.text:000038E1                 mov     edx, [ebp+var_8]
.text:000038E4                 mov     byte ptr [edx], 5Ch ; '\'
.text:000038E7                 mov     eax, [ebp+var_8]
.text:000038EA                 add     eax, 1
.text:000038ED                 mov     [ebp+var_8], eax
.text:000038F0
.text:000038F0 loc_38F0:                               ; CODE XREF: _wmap+1FFj
.text:000038F0                 mov     ecx, [ebp+var_8]
.text:000038F3                 mov     edx, [ebp+var_C]
.text:000038F6                 mov     al, [edx]
.text:000038F8                 mov     [ecx], al
.text:000038FA                 mov     ecx, [ebp+var_8]
.text:000038FD                 add     ecx, 1
.text:00003900                 mov     [ebp+var_8], ecx
.text:00003903                 jmp     short loc_38AD
.text:00003905 ; ---------------------------------------------------------------------------
.text:00003905
.text:00003905 loc_3905:                               ; CODE XREF: _wmap+1B4j
.text:00003905                                         ; _wmap+1DEj
.text:00003905                 cmp     [ebp+var_1C], 0
.text:00003909                 jz      short loc_391D
.text:0000390B                 mov     edx, [ebp+Str]
.text:0000390E                 push    edx             ; Memory
.text:0000390F                 call    _free
.text:00003914                 add     esp, 4
.text:00003917                 mov     eax, [ebp+var_1C]
.text:0000391A                 mov     [ebp+Str], eax
.text:0000391D
.text:0000391D loc_391D:                               ; CODE XREF: _wmap+229j
.text:0000391D                 jmp     loc_3794
.text:00003922 ; ---------------------------------------------------------------------------
.text:00003922
.text:00003922 loc_3922:                               ; CODE XREF: _wmap+D3j
.text:00003922                 mov     ecx, [ebp+var_8]
.text:00003925                 mov     byte ptr [ecx], 0
.text:00003928                 mov     edx, [ebp+var_4]
.text:0000392B                 push    edx
.text:0000392C                 mov     eax, [ebp+arg_4]
.text:0000392F                 push    eax
.text:00003930                 mov     ecx, [ebp+arg_0]
.text:00003933                 push    ecx
.text:00003934                 call    _write_setting_s
.text:00003939                 add     esp, 0Ch
.text:0000393C                 mov     edx, [ebp+var_4]
.text:0000393F                 push    edx
.text:00003940                 call    _safefree
.text:00003945                 add     esp, 4
.text:00003948                 push    edx
.text:00003949                 mov     ecx, ebp
.text:0000394B                 push    eax
.text:0000394C                 lea     edx, $LN27
.text:00003952                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003957                 pop     eax
.text:00003958                 pop     edx
.text:00003959                 pop     edi
.text:0000395A                 pop     esi
.text:0000395B                 add     esp, 28h
.text:0000395E                 cmp     ebp, esp
.text:00003960                 call    __RTC_CheckEsp
.text:00003965                 mov     esp, ebp
.text:00003967                 pop     ebp
.text:00003968                 retn
.text:00003968 _wmap           endp
.text:00003968
.text:00003968 ; ---------------------------------------------------------------------------
.text:00003969                 align 4
.text:0000396C $LN27           dd 1                    ; DATA XREF: _wmap+26Co
.text:00003970                 dd offset $LN26
.text:00003974 $LN26           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00003970o
.text:0000397C                 dd offset $LN25
.text:00003980 $LN25           dd 79656Bh, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000397Co
.text:00003990
.text:00003990 ; =============== S U B R O U T I N E =======================================
.text:00003990
.text:00003990 ; Attributes: bp-based frame
.text:00003990
.text:00003990 _wprefs         proc near               ; CODE XREF: _save_open_settings+552p
.text:00003990                                         ; _save_open_settings+570p ...
.text:00003990
.text:00003990 var_1C          = dword ptr -1Ch
.text:00003990 var_18          = dword ptr -18h
.text:00003990 Str             = dword ptr -14h
.text:00003990 var_10          = dword ptr -10h
.text:00003990 var_C           = dword ptr -0Ch
.text:00003990 Dest            = dword ptr -8
.text:00003990 var_4           = dword ptr -4
.text:00003990 arg_0           = dword ptr  8
.text:00003990 arg_4           = dword ptr  0Ch
.text:00003990 arg_8           = dword ptr  10h
.text:00003990 arg_C           = dword ptr  14h
.text:00003990 arg_10          = dword ptr  18h
.text:00003990 arg_14          = dword ptr  1Ch
.text:00003990
.text:00003990                 push    ebp
.text:00003991                 mov     ebp, esp
.text:00003993                 sub     esp, 1Ch
.text:00003996                 push    ebx
.text:00003997                 mov     eax, 0CCCCCCCCh
.text:0000399C                 mov     [ebp+var_1C], eax
.text:0000399F                 mov     [ebp+var_18], eax
.text:000039A2                 mov     [ebp+Str], eax
.text:000039A5                 mov     [ebp+var_10], eax
.text:000039A8                 mov     [ebp+var_C], eax
.text:000039AB                 mov     [ebp+Dest], eax
.text:000039AE                 mov     [ebp+var_4], eax
.text:000039B1                 mov     [ebp+var_C], 0
.text:000039B8                 mov     eax, [ebp+var_C]
.text:000039BB                 mov     [ebp+var_10], eax
.text:000039BE                 jmp     short loc_39C9
.text:000039C0 ; ---------------------------------------------------------------------------
.text:000039C0
.text:000039C0 loc_39C0:                               ; CODE XREF: _wprefs:loc_3A1Cj
.text:000039C0                 mov     ecx, [ebp+var_C]
.text:000039C3                 add     ecx, 1
.text:000039C6                 mov     [ebp+var_C], ecx
.text:000039C9
.text:000039C9 loc_39C9:                               ; CODE XREF: _wprefs+2Ej
.text:000039C9                 mov     edx, [ebp+var_C]
.text:000039CC                 cmp     edx, [ebp+arg_C]
.text:000039CF                 jge     short loc_3A1E
.text:000039D1                 mov     eax, [ebp+var_C]
.text:000039D4                 push    eax
.text:000039D5                 mov     ecx, [ebp+arg_14]
.text:000039D8                 push    ecx
.text:000039D9                 mov     edx, [ebp+arg_10]
.text:000039DC                 push    edx
.text:000039DD                 call    _conf_get_int_int
.text:000039E2                 add     esp, 0Ch
.text:000039E5                 push    eax
.text:000039E6                 mov     eax, [ebp+arg_C]
.text:000039E9                 push    eax
.text:000039EA                 mov     ecx, [ebp+arg_8]
.text:000039ED                 push    ecx
.text:000039EE                 call    _val2key
.text:000039F3                 add     esp, 0Ch
.text:000039F6                 mov     [ebp+Str], eax
.text:000039F9                 cmp     [ebp+Str], 0
.text:000039FD                 jz      short loc_3A1C
.text:000039FF                 xor     ebx, ebx
.text:00003A01                 cmp     [ebp+var_10], 0
.text:00003A05                 setnle  bl
.text:00003A08                 mov     edx, [ebp+Str]
.text:00003A0B                 push    edx             ; Str
.text:00003A0C                 call    _strlen
.text:00003A11                 add     esp, 4
.text:00003A14                 add     eax, [ebp+var_10]
.text:00003A17                 add     eax, ebx
.text:00003A19                 mov     [ebp+var_10], eax
.text:00003A1C
.text:00003A1C loc_3A1C:                               ; CODE XREF: _wprefs+6Dj
.text:00003A1C                 jmp     short loc_39C0
.text:00003A1E ; ---------------------------------------------------------------------------
.text:00003A1E
.text:00003A1E loc_3A1E:                               ; CODE XREF: _wprefs+3Fj
.text:00003A1E                 push    1
.text:00003A20                 mov     eax, [ebp+var_10]
.text:00003A23                 add     eax, 1
.text:00003A26                 push    eax
.text:00003A27                 call    _safemalloc
.text:00003A2C                 add     esp, 8
.text:00003A2F                 mov     [ebp+var_4], eax
.text:00003A32                 mov     ecx, [ebp+var_4]
.text:00003A35                 mov     [ebp+Dest], ecx
.text:00003A38                 mov     [ebp+var_C], 0
.text:00003A3F                 jmp     short loc_3A4A
.text:00003A41 ; ---------------------------------------------------------------------------
.text:00003A41
.text:00003A41 loc_3A41:                               ; CODE XREF: _wprefs:loc_3AB7j
.text:00003A41                 mov     edx, [ebp+var_C]
.text:00003A44                 add     edx, 1
.text:00003A47                 mov     [ebp+var_C], edx
.text:00003A4A
.text:00003A4A loc_3A4A:                               ; CODE XREF: _wprefs+AFj
.text:00003A4A                 mov     eax, [ebp+var_C]
.text:00003A4D                 cmp     eax, [ebp+arg_C]
.text:00003A50                 jge     short loc_3AB9
.text:00003A52                 mov     ecx, [ebp+var_C]
.text:00003A55                 push    ecx
.text:00003A56                 mov     edx, [ebp+arg_14]
.text:00003A59                 push    edx
.text:00003A5A                 mov     eax, [ebp+arg_10]
.text:00003A5D                 push    eax
.text:00003A5E                 call    _conf_get_int_int
.text:00003A63                 add     esp, 0Ch
.text:00003A66                 push    eax
.text:00003A67                 mov     ecx, [ebp+arg_C]
.text:00003A6A                 push    ecx
.text:00003A6B                 mov     edx, [ebp+arg_8]
.text:00003A6E                 push    edx
.text:00003A6F                 call    _val2key
.text:00003A74                 add     esp, 0Ch
.text:00003A77                 mov     [ebp+var_18], eax
.text:00003A7A                 cmp     [ebp+var_18], 0
.text:00003A7E                 jz      short loc_3AB7
.text:00003A80                 mov     eax, [ebp+Dest]
.text:00003A83                 cmp     eax, [ebp+var_4]
.text:00003A86                 jbe     short loc_3A91
.text:00003A88                 mov     [ebp+var_1C], offset $SG86030
.text:00003A8F                 jmp     short loc_3A98
.text:00003A91 ; ---------------------------------------------------------------------------
.text:00003A91
.text:00003A91 loc_3A91:                               ; CODE XREF: _wprefs+F6j
.text:00003A91                 mov     [ebp+var_1C], offset $SG86031
.text:00003A98
.text:00003A98 loc_3A98:                               ; CODE XREF: _wprefs+FFj
.text:00003A98                 mov     ecx, [ebp+var_18]
.text:00003A9B                 push    ecx
.text:00003A9C                 mov     edx, [ebp+var_1C]
.text:00003A9F                 push    edx
.text:00003AA0                 push    offset $SG86032 ; "%s%s"
.text:00003AA5                 mov     eax, [ebp+Dest]
.text:00003AA8                 push    eax             ; Dest
.text:00003AA9                 call    _sprintf
.text:00003AAE                 add     esp, 10h
.text:00003AB1                 add     eax, [ebp+Dest]
.text:00003AB4                 mov     [ebp+Dest], eax
.text:00003AB7
.text:00003AB7 loc_3AB7:                               ; CODE XREF: _wprefs+EEj
.text:00003AB7                 jmp     short loc_3A41
.text:00003AB9 ; ---------------------------------------------------------------------------
.text:00003AB9
.text:00003AB9 loc_3AB9:                               ; CODE XREF: _wprefs+C0j
.text:00003AB9                 mov     ecx, [ebp+Dest]
.text:00003ABC                 sub     ecx, [ebp+var_4]
.text:00003ABF                 cmp     ecx, [ebp+var_10]
.text:00003AC2                 jz      short loc_3ADB
.text:00003AC4                 push    19Ch            ; Line
.text:00003AC9                 push    offset $SG86034 ; "..\\..\\..\\settings.c"
.text:00003ACE                 push    offset $SG86035 ; "p - buf == maxlen"
.text:00003AD3                 call    __wassert
.text:00003AD8 ; ---------------------------------------------------------------------------
.text:00003AD8                 add     esp, 0Ch
.text:00003ADB
.text:00003ADB loc_3ADB:                               ; CODE XREF: _wprefs+132j
.text:00003ADB                 mov     eax, [ebp+Dest]
.text:00003ADE                 mov     byte ptr [eax], 0
.text:00003AE1                 mov     ecx, [ebp+var_4]
.text:00003AE4                 push    ecx
.text:00003AE5                 mov     edx, [ebp+arg_4]
.text:00003AE8                 push    edx
.text:00003AE9                 mov     eax, [ebp+arg_0]
.text:00003AEC                 push    eax
.text:00003AED                 call    _write_setting_s
.text:00003AF2                 add     esp, 0Ch
.text:00003AF5                 mov     ecx, [ebp+var_4]
.text:00003AF8                 push    ecx
.text:00003AF9                 call    _safefree
.text:00003AFE                 add     esp, 4
.text:00003B01                 pop     ebx
.text:00003B02                 add     esp, 1Ch
.text:00003B05                 cmp     ebp, esp
.text:00003B07                 call    __RTC_CheckEsp
.text:00003B0C                 mov     esp, ebp
.text:00003B0E                 pop     ebp
.text:00003B0F                 retn
.text:00003B0F _wprefs         endp
.text:00003B0F
.text:00003B10
.text:00003B10 ; =============== S U B R O U T I N E =======================================
.text:00003B10
.text:00003B10 ; Attributes: bp-based frame
.text:00003B10
.text:00003B10 _val2key        proc near               ; CODE XREF: _wprefs+5Ep
.text:00003B10                                         ; _wprefs+DFp
.text:00003B10
.text:00003B10 var_4           = dword ptr -4
.text:00003B10 arg_0           = dword ptr  8
.text:00003B10 arg_4           = dword ptr  0Ch
.text:00003B10 arg_8           = dword ptr  10h
.text:00003B10
.text:00003B10                 push    ebp
.text:00003B11                 mov     ebp, esp
.text:00003B13                 push    ecx
.text:00003B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B1B                 mov     [ebp+var_4], 0
.text:00003B22                 jmp     short loc_3B2D
.text:00003B24 ; ---------------------------------------------------------------------------
.text:00003B24
.text:00003B24 loc_3B24:                               ; CODE XREF: _val2key:loc_3B55j
.text:00003B24                 mov     eax, [ebp+var_4]
.text:00003B27                 add     eax, 1
.text:00003B2A                 mov     [ebp+var_4], eax
.text:00003B2D
.text:00003B2D loc_3B2D:                               ; CODE XREF: _val2key+12j
.text:00003B2D                 mov     ecx, [ebp+var_4]
.text:00003B30                 cmp     ecx, [ebp+arg_4]
.text:00003B33                 jge     short loc_3B57
.text:00003B35                 mov     edx, [ebp+var_4]
.text:00003B38                 shl     edx, 4
.text:00003B3B                 mov     eax, [ebp+arg_0]
.text:00003B3E                 mov     ecx, [eax+edx+4]
.text:00003B42                 cmp     ecx, [ebp+arg_8]
.text:00003B45                 jnz     short loc_3B55
.text:00003B47                 mov     edx, [ebp+var_4]
.text:00003B4A                 shl     edx, 4
.text:00003B4D                 mov     eax, [ebp+arg_0]
.text:00003B50                 mov     eax, [eax+edx]
.text:00003B53                 jmp     short loc_3B59
.text:00003B55 ; ---------------------------------------------------------------------------
.text:00003B55
.text:00003B55 loc_3B55:                               ; CODE XREF: _val2key+35j
.text:00003B55                 jmp     short loc_3B24
.text:00003B57 ; ---------------------------------------------------------------------------
.text:00003B57
.text:00003B57 loc_3B57:                               ; CODE XREF: _val2key+23j
.text:00003B57                 xor     eax, eax
.text:00003B59
.text:00003B59 loc_3B59:                               ; CODE XREF: _val2key+43j
.text:00003B59                 mov     esp, ebp
.text:00003B5B                 pop     ebp
.text:00003B5C                 retn
.text:00003B5C _val2key        endp
.text:00003B5C
.text:00003B5C ; ---------------------------------------------------------------------------
.text:00003B5D                 align 10h
.text:00003B60
.text:00003B60 ; =============== S U B R O U T I N E =======================================
.text:00003B60
.text:00003B60 ; Attributes: bp-based frame
.text:00003B60
.text:00003B60                 public _load_settings
.text:00003B60 _load_settings  proc near               ; CODE XREF: _do_defaults+Bp
.text:00003B60
.text:00003B60 var_4           = dword ptr -4
.text:00003B60 arg_0           = dword ptr  8
.text:00003B60 arg_4           = dword ptr  0Ch
.text:00003B60
.text:00003B60                 push    ebp
.text:00003B61                 mov     ebp, esp
.text:00003B63                 push    ecx
.text:00003B64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B6B                 mov     eax, [ebp+arg_0]
.text:00003B6E                 push    eax
.text:00003B6F                 call    _open_settings_r
.text:00003B74                 add     esp, 4
.text:00003B77                 mov     [ebp+var_4], eax
.text:00003B7A                 mov     ecx, [ebp+arg_4]
.text:00003B7D                 push    ecx
.text:00003B7E                 mov     edx, [ebp+var_4]
.text:00003B81                 push    edx
.text:00003B82                 call    _load_open_settings
.text:00003B87                 add     esp, 8
.text:00003B8A                 mov     eax, [ebp+var_4]
.text:00003B8D                 push    eax
.text:00003B8E                 call    _close_settings_r
.text:00003B93                 add     esp, 4
.text:00003B96                 mov     ecx, [ebp+arg_4]
.text:00003B99                 push    ecx
.text:00003B9A                 call    _conf_launchable
.text:00003B9F                 add     esp, 4
.text:00003BA2                 test    eax, eax
.text:00003BA4                 jz      short loc_3BB2
.text:00003BA6                 mov     edx, [ebp+arg_0]
.text:00003BA9                 push    edx
.text:00003BAA                 call    _add_session_to_jumplist
.text:00003BAF                 add     esp, 4
.text:00003BB2
.text:00003BB2 loc_3BB2:                               ; CODE XREF: _load_settings+44j
.text:00003BB2                 add     esp, 4
.text:00003BB5                 cmp     ebp, esp
.text:00003BB7                 call    __RTC_CheckEsp
.text:00003BBC                 mov     esp, ebp
.text:00003BBE                 pop     ebp
.text:00003BBF                 retn
.text:00003BBF _load_settings  endp
.text:00003BBF
.text:00003BC0
.text:00003BC0 ; =============== S U B R O U T I N E =======================================
.text:00003BC0
.text:00003BC0 ; Attributes: bp-based frame
.text:00003BC0
.text:00003BC0                 public _load_open_settings
.text:00003BC0 _load_open_settings proc near           ; CODE XREF: _load_settings+22p
.text:00003BC0
.text:00003BC0 var_98          = dword ptr -98h
.text:00003BC0 Str             = dword ptr -94h
.text:00003BC0 var_90          = dword ptr -90h
.text:00003BC0 var_8C          = dword ptr -8Ch
.text:00003BC0 var_88          = dword ptr -88h
.text:00003BC0 var_80          = byte ptr -80h
.text:00003BC0 var_64          = dword ptr -64h
.text:00003BC0 var_58          = dword ptr -58h
.text:00003BC0 var_4C          = dword ptr -4Ch
.text:00003BC0 Src             = dword ptr -44h
.text:00003BC0 Dest            = byte ptr -3Ch
.text:00003BC0 var_24          = dword ptr -24h
.text:00003BC0 var_20          = dword ptr -20h
.text:00003BC0 var_1C          = dword ptr -1Ch
.text:00003BC0 var_18          = dword ptr -18h
.text:00003BC0 var_14          = dword ptr -14h
.text:00003BC0 var_10          = dword ptr -10h
.text:00003BC0 Str2            = dword ptr -0Ch
.text:00003BC0 var_8           = dword ptr -8
.text:00003BC0 var_4           = dword ptr -4
.text:00003BC0 arg_0           = dword ptr  8
.text:00003BC0 arg_4           = dword ptr  0Ch
.text:00003BC0
.text:00003BC0                 push    ebp
.text:00003BC1                 mov     ebp, esp
.text:00003BC3                 sub     esp, 98h
.text:00003BC9                 push    edi
.text:00003BCA                 lea     edi, [ebp+var_98]
.text:00003BD0                 mov     ecx, 26h ; '&'
.text:00003BD5                 mov     eax, 0CCCCCCCCh
.text:00003BDA                 rep stosd
.text:00003BDC                 mov     eax, dword ptr ds:___security_cookie
.text:00003BE1                 xor     eax, ebp
.text:00003BE3                 mov     [ebp+var_4], eax
.text:00003BE6                 push    0
.text:00003BE8                 push    29h ; ')'
.text:00003BEA                 mov     eax, [ebp+arg_4]
.text:00003BED                 push    eax
.text:00003BEE                 call    _conf_set_int
.text:00003BF3                 add     esp, 0Ch
.text:00003BF6                 push    offset $SG86261
.text:00003BFB                 push    13h
.text:00003BFD                 mov     ecx, [ebp+arg_4]
.text:00003C00                 push    ecx
.text:00003C01                 call    _conf_set_str
.text:00003C06                 add     esp, 0Ch
.text:00003C09                 push    offset $SG86262
.text:00003C0E                 push    14h
.text:00003C10                 mov     edx, [ebp+arg_4]
.text:00003C13                 push    edx
.text:00003C14                 call    _conf_set_str
.text:00003C19                 add     esp, 0Ch
.text:00003C1C                 push    offset $SG86263
.text:00003C21                 push    2Ch ; ','
.text:00003C23                 mov     eax, [ebp+arg_4]
.text:00003C26                 push    eax
.text:00003C27                 call    _conf_set_str
.text:00003C2C                 add     esp, 0Ch
.text:00003C2F                 push    0
.text:00003C31                 mov     ecx, [ebp+arg_4]
.text:00003C34                 push    ecx
.text:00003C35                 push    offset $SG86264
.text:00003C3A                 push    offset $SG86265 ; "HostName"
.text:00003C3F                 mov     edx, [ebp+arg_0]
.text:00003C42                 push    edx
.text:00003C43                 call    _gpps
.text:00003C48                 add     esp, 14h
.text:00003C4B                 push    72h ; 'r'
.text:00003C4D                 mov     eax, [ebp+arg_4]
.text:00003C50                 push    eax
.text:00003C51                 push    offset $SG86266 ; "LogFileName"
.text:00003C56                 mov     ecx, [ebp+arg_0]
.text:00003C59                 push    ecx
.text:00003C5A                 call    _gppfile
.text:00003C5F                 add     esp, 10h
.text:00003C62                 push    73h ; 's'
.text:00003C64                 mov     edx, [ebp+arg_4]
.text:00003C67                 push    edx
.text:00003C68                 push    0
.text:00003C6A                 push    offset $SG86267 ; "LogType"
.text:00003C6F                 mov     eax, [ebp+arg_0]
.text:00003C72                 push    eax
.text:00003C73                 call    _gppi
.text:00003C78                 add     esp, 14h
.text:00003C7B                 push    74h ; 't'
.text:00003C7D                 mov     ecx, [ebp+arg_4]
.text:00003C80                 push    ecx
.text:00003C81                 push    0FFFFFFFFh
.text:00003C83                 push    offset $SG86268 ; "LogFileClash"
.text:00003C88                 mov     edx, [ebp+arg_0]
.text:00003C8B                 push    edx
.text:00003C8C                 call    _gppi
.text:00003C91                 add     esp, 14h
.text:00003C94                 push    75h ; 'u'
.text:00003C96                 mov     eax, [ebp+arg_4]
.text:00003C99                 push    eax
.text:00003C9A                 push    1
.text:00003C9C                 push    offset $SG86269 ; "LogFlush"
.text:00003CA1                 mov     ecx, [ebp+arg_0]
.text:00003CA4                 push    ecx
.text:00003CA5                 call    _gppi
.text:00003CAA                 add     esp, 14h
.text:00003CAD                 push    76h ; 'v'
.text:00003CAF                 mov     edx, [ebp+arg_4]
.text:00003CB2                 push    edx
.text:00003CB3                 push    1
.text:00003CB5                 push    offset $SG86270 ; "SSHLogOmitPasswords"
.text:00003CBA                 mov     eax, [ebp+arg_0]
.text:00003CBD                 push    eax
.text:00003CBE                 call    _gppi
.text:00003CC3                 add     esp, 14h
.text:00003CC6                 push    77h ; 'w'
.text:00003CC8                 mov     ecx, [ebp+arg_4]
.text:00003CCB                 push    ecx
.text:00003CCC                 push    0
.text:00003CCE                 push    offset $SG86271 ; "SSHLogOmitData"
.text:00003CD3                 mov     edx, [ebp+arg_0]
.text:00003CD6                 push    edx
.text:00003CD7                 call    _gppi
.text:00003CDC                 add     esp, 14h
.text:00003CDF                 push    offset $SG86272 ; "default"
.text:00003CE4                 push    offset $SG86273 ; "Protocol"
.text:00003CE9                 mov     eax, [ebp+arg_0]
.text:00003CEC                 push    eax
.text:00003CED                 call    _gpps_raw
.text:00003CF2                 add     esp, 0Ch
.text:00003CF5                 mov     [ebp+Str2], eax
.text:00003CF8                 mov     ecx, dword ptr ds:_default_protocol
.text:00003CFE                 push    ecx
.text:00003CFF                 push    2
.text:00003D01                 mov     edx, [ebp+arg_4]
.text:00003D04                 push    edx
.text:00003D05                 call    _conf_set_int
.text:00003D0A                 add     esp, 0Ch
.text:00003D0D                 mov     eax, dword ptr ds:_default_port
.text:00003D12                 push    eax
.text:00003D13                 push    1
.text:00003D15                 mov     ecx, [ebp+arg_4]
.text:00003D18                 push    ecx
.text:00003D19                 call    _conf_set_int
.text:00003D1E                 add     esp, 0Ch
.text:00003D21                 mov     edx, [ebp+Str2]
.text:00003D24                 push    edx             ; Str2
.text:00003D25                 call    _backend_from_name
.text:00003D2A                 add     esp, 4
.text:00003D2D                 mov     [ebp+var_10], eax
.text:00003D30                 cmp     [ebp+var_10], 0
.text:00003D34                 jz      short loc_3D69
.text:00003D36                 mov     eax, [ebp+var_10]
.text:00003D39                 mov     ecx, [eax+44h]
.text:00003D3C                 push    ecx
.text:00003D3D                 push    2
.text:00003D3F                 mov     edx, [ebp+arg_4]
.text:00003D42                 push    edx
.text:00003D43                 call    _conf_set_int
.text:00003D48                 add     esp, 0Ch
.text:00003D4B                 push    1
.text:00003D4D                 mov     eax, [ebp+arg_4]
.text:00003D50                 push    eax
.text:00003D51                 mov     ecx, dword ptr ds:_default_port
.text:00003D57                 push    ecx
.text:00003D58                 push    offset $SG86276 ; "PortNumber"
.text:00003D5D                 mov     edx, [ebp+arg_0]
.text:00003D60                 push    edx
.text:00003D61                 call    _gppi
.text:00003D66                 add     esp, 14h
.text:00003D69
.text:00003D69 loc_3D69:                               ; CODE XREF: _load_open_settings+174j
.text:00003D69                 mov     eax, [ebp+Str2]
.text:00003D6C                 push    eax
.text:00003D6D                 call    _safefree
.text:00003D72                 add     esp, 4
.text:00003D75                 push    3
.text:00003D77                 mov     ecx, [ebp+arg_4]
.text:00003D7A                 push    ecx
.text:00003D7B                 push    0
.text:00003D7D                 push    offset $SG86277 ; "AddressFamily"
.text:00003D82                 mov     edx, [ebp+arg_0]
.text:00003D85                 push    edx
.text:00003D86                 call    _gppi
.text:00003D8B                 add     esp, 14h
.text:00003D8E                 push    1
.text:00003D90                 push    offset $SG86278 ; "CloseOnExit"
.text:00003D95                 mov     eax, [ebp+arg_0]
.text:00003D98                 push    eax
.text:00003D99                 call    _gppi_raw
.text:00003D9E                 add     esp, 0Ch
.text:00003DA1                 mov     [ebp+var_8], eax
.text:00003DA4                 mov     eax, [ebp+var_8]
.text:00003DA7                 add     eax, 1
.text:00003DAA                 cdq
.text:00003DAB                 mov     ecx, 3
.text:00003DB0                 idiv    ecx
.text:00003DB2                 push    edx
.text:00003DB3                 push    4
.text:00003DB5                 mov     edx, [ebp+arg_4]
.text:00003DB8                 push    edx
.text:00003DB9                 call    _conf_set_int
.text:00003DBE                 add     esp, 0Ch
.text:00003DC1                 push    5
.text:00003DC3                 mov     eax, [ebp+arg_4]
.text:00003DC6                 push    eax
.text:00003DC7                 push    1
.text:00003DC9                 push    offset $SG86279 ; "WarnOnClose"
.text:00003DCE                 mov     ecx, [ebp+arg_0]
.text:00003DD1                 push    ecx
.text:00003DD2                 call    _gppi
.text:00003DD7                 add     esp, 14h
.text:00003DDA                 push    0
.text:00003DDC                 push    offset $SG86282 ; "PingInterval"
.text:00003DE1                 mov     edx, [ebp+arg_0]
.text:00003DE4                 push    edx
.text:00003DE5                 call    _gppi_raw
.text:00003DEA                 add     esp, 0Ch
.text:00003DED                 mov     [ebp+var_14], eax
.text:00003DF0                 push    0
.text:00003DF2                 push    offset $SG86283 ; "PingIntervalSecs"
.text:00003DF7                 mov     eax, [ebp+arg_0]
.text:00003DFA                 push    eax
.text:00003DFB                 call    _gppi_raw
.text:00003E00                 add     esp, 0Ch
.text:00003E03                 mov     [ebp+var_18], eax
.text:00003E06                 mov     ecx, [ebp+var_14]
.text:00003E09                 imul    ecx, 3Ch
.text:00003E0C                 add     ecx, [ebp+var_18]
.text:00003E0F                 push    ecx
.text:00003E10                 push    6
.text:00003E12                 mov     edx, [ebp+arg_4]
.text:00003E15                 push    edx
.text:00003E16                 call    _conf_set_int
.text:00003E1B                 add     esp, 0Ch
.text:00003E1E                 push    7
.text:00003E20                 mov     eax, [ebp+arg_4]
.text:00003E23                 push    eax
.text:00003E24                 push    1
.text:00003E26                 push    offset $SG86284 ; "TCPNoDelay"
.text:00003E2B                 mov     ecx, [ebp+arg_0]
.text:00003E2E                 push    ecx
.text:00003E2F                 call    _gppi
.text:00003E34                 add     esp, 14h
.text:00003E37                 push    8
.text:00003E39                 mov     edx, [ebp+arg_4]
.text:00003E3C                 push    edx
.text:00003E3D                 push    0
.text:00003E3F                 push    offset $SG86285 ; "TCPKeepalives"
.text:00003E44                 mov     eax, [ebp+arg_0]
.text:00003E47                 push    eax
.text:00003E48                 call    _gppi
.text:00003E4D                 add     esp, 14h
.text:00003E50                 push    2Eh ; '.'
.text:00003E52                 mov     ecx, [ebp+arg_4]
.text:00003E55                 push    ecx
.text:00003E56                 push    offset $SG86286 ; "xterm"
.text:00003E5B                 push    offset $SG86287 ; "TerminalType"
.text:00003E60                 mov     edx, [ebp+arg_0]
.text:00003E63                 push    edx
.text:00003E64                 call    _gpps
.text:00003E69                 add     esp, 14h
.text:00003E6C                 push    2Fh ; '/'
.text:00003E6E                 mov     eax, [ebp+arg_4]
.text:00003E71                 push    eax
.text:00003E72                 push    offset $SG86288 ; "38400,38400"
.text:00003E77                 push    offset $SG86289 ; "TerminalSpeed"
.text:00003E7C                 mov     ecx, [ebp+arg_0]
.text:00003E7F                 push    ecx
.text:00003E80                 call    _gpps
.text:00003E85                 add     esp, 14h
.text:00003E88                 push    30h ; '0'
.text:00003E8A                 mov     edx, [ebp+arg_4]
.text:00003E8D                 push    edx
.text:00003E8E                 push    offset $SG86291 ; "TerminalModes"
.text:00003E93                 mov     eax, [ebp+arg_0]
.text:00003E96                 push    eax
.text:00003E97                 call    _gppmap
.text:00003E9C                 add     esp, 10h
.text:00003E9F                 test    eax, eax
.text:00003EA1                 jnz     short loc_3EE2
.text:00003EA3                 mov     [ebp+var_8], 0
.text:00003EAA                 jmp     short loc_3EB5
.text:00003EAC ; ---------------------------------------------------------------------------
.text:00003EAC
.text:00003EAC loc_3EAC:                               ; CODE XREF: _load_open_settings+320j
.text:00003EAC                 mov     ecx, [ebp+var_8]
.text:00003EAF                 add     ecx, 1
.text:00003EB2                 mov     [ebp+var_8], ecx
.text:00003EB5
.text:00003EB5 loc_3EB5:                               ; CODE XREF: _load_open_settings+2EAj
.text:00003EB5                 mov     edx, [ebp+var_8]
.text:00003EB8                 cmp     ds:_ttymodes[edx*4], 0
.text:00003EC0                 jz      short loc_3EE2
.text:00003EC2                 push    offset $SG86295
.text:00003EC7                 mov     eax, [ebp+var_8]
.text:00003ECA                 mov     ecx, ds:_ttymodes[eax*4]
.text:00003ED1                 push    ecx
.text:00003ED2                 push    30h ; '0'
.text:00003ED4                 mov     edx, [ebp+arg_4]
.text:00003ED7                 push    edx
.text:00003ED8                 call    _conf_set_str_str
.text:00003EDD                 add     esp, 10h
.text:00003EE0                 jmp     short loc_3EAC
.text:00003EE2 ; ---------------------------------------------------------------------------
.text:00003EE2
.text:00003EE2 loc_3EE2:                               ; CODE XREF: _load_open_settings+2E1j
.text:00003EE2                                         ; _load_open_settings+300j
.text:00003EE2                 push    0Ah
.text:00003EE4                 mov     eax, [ebp+arg_4]
.text:00003EE7                 push    eax
.text:00003EE8                 push    offset $SG86296
.text:00003EED                 push    offset $SG86297 ; "ProxyExcludeList"
.text:00003EF2                 mov     ecx, [ebp+arg_0]
.text:00003EF5                 push    ecx
.text:00003EF6                 call    _gpps
.text:00003EFB                 add     esp, 14h
.text:00003EFE                 push    1
.text:00003F00                 push    offset $SG86298 ; "ProxyDNS"
.text:00003F05                 mov     edx, [ebp+arg_0]
.text:00003F08                 push    edx
.text:00003F09                 call    _gppi_raw
.text:00003F0E                 add     esp, 0Ch
.text:00003F11                 mov     [ebp+var_8], eax
.text:00003F14                 mov     eax, [ebp+var_8]
.text:00003F17                 add     eax, 1
.text:00003F1A                 cdq
.text:00003F1B                 mov     ecx, 3
.text:00003F20                 idiv    ecx
.text:00003F22                 push    edx
.text:00003F23                 push    0Bh
.text:00003F25                 mov     edx, [ebp+arg_4]
.text:00003F28                 push    edx
.text:00003F29                 call    _conf_set_int
.text:00003F2E                 add     esp, 0Ch
.text:00003F31                 push    0Ch
.text:00003F33                 mov     eax, [ebp+arg_4]
.text:00003F36                 push    eax
.text:00003F37                 push    0
.text:00003F39                 push    offset $SG86299 ; "ProxyLocalhost"
.text:00003F3E                 mov     ecx, [ebp+arg_0]
.text:00003F41                 push    ecx
.text:00003F42                 call    _gppi
.text:00003F47                 add     esp, 14h
.text:00003F4A                 push    0Dh
.text:00003F4C                 mov     edx, [ebp+arg_4]
.text:00003F4F                 push    edx
.text:00003F50                 push    0FFFFFFFFh
.text:00003F52                 push    offset $SG86300 ; "ProxyMethod"
.text:00003F57                 mov     eax, [ebp+arg_0]
.text:00003F5A                 push    eax
.text:00003F5B                 call    _gppi
.text:00003F60                 add     esp, 14h
.text:00003F63                 push    0Dh
.text:00003F65                 mov     ecx, [ebp+arg_4]
.text:00003F68                 push    ecx
.text:00003F69                 call    _conf_get_int
.text:00003F6E                 add     esp, 8
.text:00003F71                 cmp     eax, 0FFFFFFFFh
.text:00003F74                 jnz     loc_4031
.text:00003F7A                 push    0
.text:00003F7C                 push    offset $SG86303 ; "ProxyType"
.text:00003F81                 mov     edx, [ebp+arg_0]
.text:00003F84                 push    edx
.text:00003F85                 call    _gppi_raw
.text:00003F8A                 add     esp, 0Ch
.text:00003F8D                 mov     [ebp+var_1C], eax
.text:00003F90                 cmp     [ebp+var_1C], 0
.text:00003F94                 jnz     short loc_3FAB
.text:00003F96                 push    0
.text:00003F98                 push    0Dh
.text:00003F9A                 mov     eax, [ebp+arg_4]
.text:00003F9D                 push    eax
.text:00003F9E                 call    _conf_set_int
.text:00003FA3                 add     esp, 0Ch
.text:00003FA6                 jmp     loc_4031
.text:00003FAB ; ---------------------------------------------------------------------------
.text:00003FAB
.text:00003FAB loc_3FAB:                               ; CODE XREF: _load_open_settings+3D4j
.text:00003FAB                 cmp     [ebp+var_1C], 1
.text:00003FAF                 jnz     short loc_3FC3
.text:00003FB1                 push    3
.text:00003FB3                 push    0Dh
.text:00003FB5                 mov     ecx, [ebp+arg_4]
.text:00003FB8                 push    ecx
.text:00003FB9                 call    _conf_set_int
.text:00003FBE                 add     esp, 0Ch
.text:00003FC1                 jmp     short loc_4031
.text:00003FC3 ; ---------------------------------------------------------------------------
.text:00003FC3
.text:00003FC3 loc_3FC3:                               ; CODE XREF: _load_open_settings+3EFj
.text:00003FC3                 cmp     [ebp+var_1C], 3
.text:00003FC7                 jnz     short loc_3FDB
.text:00003FC9                 push    4
.text:00003FCB                 push    0Dh
.text:00003FCD                 mov     edx, [ebp+arg_4]
.text:00003FD0                 push    edx
.text:00003FD1                 call    _conf_set_int
.text:00003FD6                 add     esp, 0Ch
.text:00003FD9                 jmp     short loc_4031
.text:00003FDB ; ---------------------------------------------------------------------------
.text:00003FDB
.text:00003FDB loc_3FDB:                               ; CODE XREF: _load_open_settings+407j
.text:00003FDB                 cmp     [ebp+var_1C], 4
.text:00003FDF                 jnz     short loc_3FF3
.text:00003FE1                 push    5
.text:00003FE3                 push    0Dh
.text:00003FE5                 mov     eax, [ebp+arg_4]
.text:00003FE8                 push    eax
.text:00003FE9                 call    _conf_set_int
.text:00003FEE                 add     esp, 0Ch
.text:00003FF1                 jmp     short loc_4031
.text:00003FF3 ; ---------------------------------------------------------------------------
.text:00003FF3
.text:00003FF3 loc_3FF3:                               ; CODE XREF: _load_open_settings+41Fj
.text:00003FF3                 push    5
.text:00003FF5                 push    offset $SG86312 ; "ProxySOCKSVersion"
.text:00003FFA                 mov     ecx, [ebp+arg_0]
.text:00003FFD                 push    ecx
.text:00003FFE                 call    _gppi_raw
.text:00004003                 add     esp, 0Ch
.text:00004006                 mov     [ebp+var_1C], eax
.text:00004009                 cmp     [ebp+var_1C], 5
.text:0000400D                 jnz     short loc_4021
.text:0000400F                 push    2
.text:00004011                 push    0Dh
.text:00004013                 mov     edx, [ebp+arg_4]
.text:00004016                 push    edx
.text:00004017                 call    _conf_set_int
.text:0000401C                 add     esp, 0Ch
.text:0000401F                 jmp     short loc_4031
.text:00004021 ; ---------------------------------------------------------------------------
.text:00004021
.text:00004021 loc_4021:                               ; CODE XREF: _load_open_settings+44Dj
.text:00004021                 push    1
.text:00004023                 push    0Dh
.text:00004025                 mov     eax, [ebp+arg_4]
.text:00004028                 push    eax
.text:00004029                 call    _conf_set_int
.text:0000402E                 add     esp, 0Ch
.text:00004031
.text:00004031 loc_4031:                               ; CODE XREF: _load_open_settings+3B4j
.text:00004031                                         ; _load_open_settings+3E6j ...
.text:00004031                 push    0Eh
.text:00004033                 mov     ecx, [ebp+arg_4]
.text:00004036                 push    ecx
.text:00004037                 push    offset $SG86315 ; "proxy"
.text:0000403C                 push    offset $SG86316 ; "ProxyHost"
.text:00004041                 mov     edx, [ebp+arg_0]
.text:00004044                 push    edx
.text:00004045                 call    _gpps
.text:0000404A                 add     esp, 14h
.text:0000404D                 push    0Fh
.text:0000404F                 mov     eax, [ebp+arg_4]
.text:00004052                 push    eax
.text:00004053                 push    50h ; 'P'
.text:00004055                 push    offset $SG86317 ; "ProxyPort"
.text:0000405A                 mov     ecx, [ebp+arg_0]
.text:0000405D                 push    ecx
.text:0000405E                 call    _gppi
.text:00004063                 add     esp, 14h
.text:00004066                 push    10h
.text:00004068                 mov     edx, [ebp+arg_4]
.text:0000406B                 push    edx
.text:0000406C                 push    offset $SG86318
.text:00004071                 push    offset $SG86319 ; "ProxyUsername"
.text:00004076                 mov     eax, [ebp+arg_0]
.text:00004079                 push    eax
.text:0000407A                 call    _gpps
.text:0000407F                 add     esp, 14h
.text:00004082                 push    11h
.text:00004084                 mov     ecx, [ebp+arg_4]
.text:00004087                 push    ecx
.text:00004088                 push    offset $SG86320
.text:0000408D                 push    offset $SG86321 ; "ProxyPassword"
.text:00004092                 mov     edx, [ebp+arg_0]
.text:00004095                 push    edx
.text:00004096                 call    _gpps
.text:0000409B                 add     esp, 14h
.text:0000409E                 push    12h
.text:000040A0                 mov     eax, [ebp+arg_4]
.text:000040A3                 push    eax
.text:000040A4                 push    offset $SG86322 ; "connect %host %port\\n"
.text:000040A9                 push    offset $SG86323 ; "ProxyTelnetCommand"
.text:000040AE                 mov     ecx, [ebp+arg_0]
.text:000040B1                 push    ecx
.text:000040B2                 call    _gpps
.text:000040B7                 add     esp, 14h
.text:000040BA                 push    31h ; '1'
.text:000040BC                 mov     edx, [ebp+arg_4]
.text:000040BF                 push    edx
.text:000040C0                 push    offset $SG86324 ; "Environment"
.text:000040C5                 mov     eax, [ebp+arg_0]
.text:000040C8                 push    eax
.text:000040C9                 call    _gppmap
.text:000040CE                 add     esp, 10h
.text:000040D1                 push    32h ; '2'
.text:000040D3                 mov     ecx, [ebp+arg_4]
.text:000040D6                 push    ecx
.text:000040D7                 push    offset $SG86325
.text:000040DC                 push    offset $SG86326 ; "UserName"
.text:000040E1                 mov     edx, [ebp+arg_0]
.text:000040E4                 push    edx
.text:000040E5                 call    _gpps
.text:000040EA                 add     esp, 14h
.text:000040ED                 push    33h ; '3'
.text:000040EF                 mov     eax, [ebp+arg_4]
.text:000040F2                 push    eax
.text:000040F3                 push    0
.text:000040F5                 push    offset $SG86327 ; "UserNameFromEnvironment"
.text:000040FA                 mov     ecx, [ebp+arg_0]
.text:000040FD                 push    ecx
.text:000040FE                 call    _gppi
.text:00004103                 add     esp, 14h
.text:00004106                 push    34h ; '4'
.text:00004108                 mov     edx, [ebp+arg_4]
.text:0000410B                 push    edx
.text:0000410C                 push    offset $SG86328
.text:00004111                 push    offset $SG86329 ; "LocalUserName"
.text:00004116                 mov     eax, [ebp+arg_0]
.text:00004119                 push    eax
.text:0000411A                 call    _gpps
.text:0000411F                 add     esp, 14h
.text:00004122                 push    15h
.text:00004124                 mov     ecx, [ebp+arg_4]
.text:00004127                 push    ecx
.text:00004128                 push    0
.text:0000412A                 push    offset $SG86330 ; "NoPTY"
.text:0000412F                 mov     edx, [ebp+arg_0]
.text:00004132                 push    edx
.text:00004133                 call    _gppi
.text:00004138                 add     esp, 14h
.text:0000413B                 push    16h
.text:0000413D                 mov     eax, [ebp+arg_4]
.text:00004140                 push    eax
.text:00004141                 push    0
.text:00004143                 push    offset $SG86331 ; "Compression"
.text:00004148                 mov     ecx, [ebp+arg_0]
.text:0000414B                 push    ecx
.text:0000414C                 call    _gppi
.text:00004151                 add     esp, 14h
.text:00004154                 push    1Ah
.text:00004156                 mov     edx, [ebp+arg_4]
.text:00004159                 push    edx
.text:0000415A                 push    1
.text:0000415C                 push    offset $SG86332 ; "TryAgent"
.text:00004161                 mov     eax, [ebp+arg_0]
.text:00004164                 push    eax
.text:00004165                 call    _gppi
.text:0000416A                 add     esp, 14h
.text:0000416D                 push    1Bh
.text:0000416F                 mov     ecx, [ebp+arg_4]
.text:00004172                 push    ecx
.text:00004173                 push    0
.text:00004175                 push    offset $SG86333 ; "AgentFwd"
.text:0000417A                 mov     edx, [ebp+arg_0]
.text:0000417D                 push    edx
.text:0000417E                 call    _gppi
.text:00004183                 add     esp, 14h
.text:00004186                 push    1Ch
.text:00004188                 mov     eax, [ebp+arg_4]
.text:0000418B                 push    eax
.text:0000418C                 push    0
.text:0000418E                 push    offset $SG86334 ; "ChangeUsername"
.text:00004193                 mov     ecx, [ebp+arg_0]
.text:00004196                 push    ecx
.text:00004197                 call    _gppi
.text:0000419C                 add     esp, 14h
.text:0000419F                 push    26h ; '&'
.text:000041A1                 mov     edx, [ebp+arg_4]
.text:000041A4                 push    edx
.text:000041A5                 push    0
.text:000041A7                 push    offset $SG86335 ; "GssapiFwd"
.text:000041AC                 mov     eax, [ebp+arg_0]
.text:000041AF                 push    eax
.text:000041B0                 call    _gppi
.text:000041B5                 add     esp, 14h
.text:000041B8                 push    1Dh
.text:000041BA                 mov     ecx, [ebp+arg_4]
.text:000041BD                 push    ecx
.text:000041BE                 push    6
.text:000041C0                 push    offset _ciphernames
.text:000041C5                 push    offset $SG86336
.text:000041CA                 push    offset $SG86337 ; "Cipher"
.text:000041CF                 mov     edx, [ebp+arg_0]
.text:000041D2                 push    edx
.text:000041D3                 call    _gprefs
.text:000041D8                 add     esp, 1Ch
.text:000041DB                 push    0
.text:000041DD                 push    offset $SG86339 ; "BugDHGEx2"
.text:000041E2                 mov     eax, [ebp+arg_0]
.text:000041E5                 push    eax
.text:000041E6                 call    _gppi_raw
.text:000041EB                 add     esp, 0Ch
.text:000041EE                 mov     ecx, 2
.text:000041F3                 sub     ecx, eax
.text:000041F5                 mov     [ebp+var_8], ecx
.text:000041F8                 jnz     short loc_4203
.text:000041FA                 mov     [ebp+var_20], offset $SG86341 ; "dh-group14-sha1,dh-group1-sha1,rsa,WARN"...
.text:00004201                 jmp     short loc_420A
.text:00004203 ; ---------------------------------------------------------------------------
.text:00004203
.text:00004203 loc_4203:                               ; CODE XREF: _load_open_settings+638j
.text:00004203                 mov     [ebp+var_20], offset $SG86343 ; "dh-gex-sha1,dh-group14-sha1,dh-group1-s"...
.text:0000420A
.text:0000420A loc_420A:                               ; CODE XREF: _load_open_settings+641j
.text:0000420A                 push    17h
.text:0000420C                 mov     edx, [ebp+arg_4]
.text:0000420F                 push    edx
.text:00004210                 push    5
.text:00004212                 push    offset _kexnames
.text:00004217                 mov     eax, [ebp+var_20]
.text:0000421A                 push    eax
.text:0000421B                 push    offset $SG86344 ; "KEX"
.text:00004220                 mov     ecx, [ebp+arg_0]
.text:00004223                 push    ecx
.text:00004224                 call    _gprefs
.text:00004229                 add     esp, 1Ch
.text:0000422C                 push    18h
.text:0000422E                 mov     edx, [ebp+arg_4]
.text:00004231                 push    edx
.text:00004232                 push    3Ch ; '<'
.text:00004234                 push    offset $SG86345 ; "RekeyTime"
.text:00004239                 mov     eax, [ebp+arg_0]
.text:0000423C                 push    eax
.text:0000423D                 call    _gppi
.text:00004242                 add     esp, 14h
.text:00004245                 push    19h
.text:00004247                 mov     ecx, [ebp+arg_4]
.text:0000424A                 push    ecx
.text:0000424B                 push    offset $SG86346
.text:00004250                 push    offset $SG86347 ; "RekeyBytes"
.text:00004255                 mov     edx, [ebp+arg_0]
.text:00004258                 push    edx
.text:00004259                 call    _gpps
.text:0000425E                 add     esp, 14h
.text:00004261                 push    1Fh
.text:00004263                 mov     eax, [ebp+arg_4]
.text:00004266                 push    eax
.text:00004267                 push    3
.text:00004269                 push    offset $SG86348 ; "SshProt"
.text:0000426E                 mov     ecx, [ebp+arg_0]
.text:00004271                 push    ecx
.text:00004272                 call    _gppi
.text:00004277                 add     esp, 14h
.text:0000427A                 push    9
.text:0000427C                 mov     edx, [ebp+arg_4]
.text:0000427F                 push    edx
.text:00004280                 push    offset $SG86349
.text:00004285                 push    offset $SG86350 ; "LogHost"
.text:0000428A                 mov     eax, [ebp+arg_0]
.text:0000428D                 push    eax
.text:0000428E                 call    _gpps
.text:00004293                 add     esp, 14h
.text:00004296                 push    20h ; ' '
.text:00004298                 mov     ecx, [ebp+arg_4]
.text:0000429B                 push    ecx
.text:0000429C                 push    0
.text:0000429E                 push    offset $SG86351 ; "SSH2DES"
.text:000042A3                 mov     edx, [ebp+arg_0]
.text:000042A6                 push    edx
.text:000042A7                 call    _gppi
.text:000042AC                 add     esp, 14h
.text:000042AF                 push    21h ; '!'
.text:000042B1                 mov     eax, [ebp+arg_4]
.text:000042B4                 push    eax
.text:000042B5                 push    0
.text:000042B7                 push    offset $SG86352 ; "SshNoAuth"
.text:000042BC                 mov     ecx, [ebp+arg_0]
.text:000042BF                 push    ecx
.text:000042C0                 call    _gppi
.text:000042C5                 add     esp, 14h
.text:000042C8                 push    22h ; '"'
.text:000042CA                 mov     edx, [ebp+arg_4]
.text:000042CD                 push    edx
.text:000042CE                 push    1
.text:000042D0                 push    offset $SG86353 ; "SshBanner"
.text:000042D5                 mov     eax, [ebp+arg_0]
.text:000042D8                 push    eax
.text:000042D9                 call    _gppi
.text:000042DE                 add     esp, 14h
.text:000042E1                 push    23h ; '#'
.text:000042E3                 mov     ecx, [ebp+arg_4]
.text:000042E6                 push    ecx
.text:000042E7                 push    0
.text:000042E9                 push    offset $SG86354 ; "AuthTIS"
.text:000042EE                 mov     edx, [ebp+arg_0]
.text:000042F1                 push    edx
.text:000042F2                 call    _gppi
.text:000042F7                 add     esp, 14h
.text:000042FA                 push    24h ; '$'
.text:000042FC                 mov     eax, [ebp+arg_4]
.text:000042FF                 push    eax
.text:00004300                 push    1
.text:00004302                 push    offset $SG86355 ; "AuthKI"
.text:00004307                 mov     ecx, [ebp+arg_0]
.text:0000430A                 push    ecx
.text:0000430B                 call    _gppi
.text:00004310                 add     esp, 14h
.text:00004313                 push    25h ; '%'
.text:00004315                 mov     edx, [ebp+arg_4]
.text:00004318                 push    edx
.text:00004319                 push    1
.text:0000431B                 push    offset $SG86356 ; "AuthGSSAPI"
.text:00004320                 mov     eax, [ebp+arg_0]
.text:00004323                 push    eax
.text:00004324                 call    _gppi
.text:00004329                 add     esp, 14h
.text:0000432C                 push    27h ; '''
.text:0000432E                 mov     ecx, [ebp+arg_4]
.text:00004331                 push    ecx
.text:00004332                 mov     edx, dword ptr ds:_ngsslibs
.text:00004338                 push    edx
.text:00004339                 push    offset _gsslibkeywords
.text:0000433E                 push    offset $SG86357
.text:00004343                 push    offset $SG86358 ; "GSSLibs"
.text:00004348                 mov     eax, [ebp+arg_0]
.text:0000434B                 push    eax
.text:0000434C                 call    _gprefs
.text:00004351                 add     esp, 1Ch
.text:00004354                 push    28h ; '('
.text:00004356                 mov     ecx, [ebp+arg_4]
.text:00004359                 push    ecx
.text:0000435A                 push    offset $SG86359 ; "GSSCustom"
.text:0000435F                 mov     edx, [ebp+arg_0]
.text:00004362                 push    edx
.text:00004363                 call    _gppfile
.text:00004368                 add     esp, 10h
.text:0000436B                 push    2Bh ; '+'
.text:0000436D                 mov     eax, [ebp+arg_4]
.text:00004370                 push    eax
.text:00004371                 push    0
.text:00004373                 push    offset $SG86360 ; "SshNoShell"
.text:00004378                 mov     ecx, [ebp+arg_0]
.text:0000437B                 push    ecx
.text:0000437C                 call    _gppi
.text:00004381                 add     esp, 14h
.text:00004384                 push    1Eh
.text:00004386                 mov     edx, [ebp+arg_4]
.text:00004389                 push    edx
.text:0000438A                 push    offset $SG86361 ; "PublicKeyFile"
.text:0000438F                 mov     eax, [ebp+arg_0]
.text:00004392                 push    eax
.text:00004393                 call    _gppfile
.text:00004398                 add     esp, 10h
.text:0000439B                 push    13h
.text:0000439D                 mov     ecx, [ebp+arg_4]
.text:000043A0                 push    ecx
.text:000043A1                 push    offset $SG86362
.text:000043A6                 push    offset $SG86363 ; "RemoteCommand"
.text:000043AB                 mov     edx, [ebp+arg_0]
.text:000043AE                 push    edx
.text:000043AF                 call    _gpps
.text:000043B4                 add     esp, 14h
.text:000043B7                 push    35h ; '5'
.text:000043B9                 mov     eax, [ebp+arg_4]
.text:000043BC                 push    eax
.text:000043BD                 push    0
.text:000043BF                 push    offset $SG86364 ; "RFCEnviron"
.text:000043C4                 mov     ecx, [ebp+arg_0]
.text:000043C7                 push    ecx
.text:000043C8                 call    _gppi
.text:000043CD                 add     esp, 14h
.text:000043D0                 push    36h ; '6'
.text:000043D2                 mov     edx, [ebp+arg_4]
.text:000043D5                 push    edx
.text:000043D6                 push    0
.text:000043D8                 push    offset $SG86365 ; "PassiveTelnet"
.text:000043DD                 mov     eax, [ebp+arg_0]
.text:000043E0                 push    eax
.text:000043E1                 call    _gppi
.text:000043E6                 add     esp, 14h
.text:000043E9                 push    3Dh ; '='
.text:000043EB                 mov     ecx, [ebp+arg_4]
.text:000043EE                 push    ecx
.text:000043EF                 push    1
.text:000043F1                 push    offset $SG86366 ; "BackspaceIsDelete"
.text:000043F6                 mov     edx, [ebp+arg_0]
.text:000043F9                 push    edx
.text:000043FA                 call    _gppi
.text:000043FF                 add     esp, 14h
.text:00004402                 push    3Eh ; '>'
.text:00004404                 mov     eax, [ebp+arg_4]
.text:00004407                 push    eax
.text:00004408                 push    0
.text:0000440A                 push    offset $SG86367 ; "RXVTHomeEnd"
.text:0000440F                 mov     ecx, [ebp+arg_0]
.text:00004412                 push    ecx
.text:00004413                 call    _gppi
.text:00004418                 add     esp, 14h
.text:0000441B                 push    3Fh ; '?'
.text:0000441D                 mov     edx, [ebp+arg_4]
.text:00004420                 push    edx
.text:00004421                 push    0
.text:00004423                 push    offset $SG86368 ; "LinuxFunctionKeys"
.text:00004428                 mov     eax, [ebp+arg_0]
.text:0000442B                 push    eax
.text:0000442C                 call    _gppi
.text:00004431                 add     esp, 14h
.text:00004434                 push    41h ; 'A'
.text:00004436                 mov     ecx, [ebp+arg_4]
.text:00004439                 push    ecx
.text:0000443A                 push    0
.text:0000443C                 push    offset $SG86369 ; "NoApplicationKeys"
.text:00004441                 mov     edx, [ebp+arg_0]
.text:00004444                 push    edx
.text:00004445                 call    _gppi
.text:0000444A                 add     esp, 14h
.text:0000444D                 push    40h ; '@'
.text:0000444F                 mov     eax, [ebp+arg_4]
.text:00004452                 push    eax
.text:00004453                 push    0
.text:00004455                 push    offset $SG86370 ; "NoApplicationCursors"
.text:0000445A                 mov     ecx, [ebp+arg_0]
.text:0000445D                 push    ecx
.text:0000445E                 call    _gppi
.text:00004463                 add     esp, 14h
.text:00004466                 push    42h ; 'B'
.text:00004468                 mov     edx, [ebp+arg_4]
.text:0000446B                 push    edx
.text:0000446C                 push    0
.text:0000446E                 push    offset $SG86371 ; "NoMouseReporting"
.text:00004473                 mov     eax, [ebp+arg_0]
.text:00004476                 push    eax
.text:00004477                 call    _gppi
.text:0000447C                 add     esp, 14h
.text:0000447F                 push    43h ; 'C'
.text:00004481                 mov     ecx, [ebp+arg_4]
.text:00004484                 push    ecx
.text:00004485                 push    0
.text:00004487                 push    offset $SG86372 ; "NoRemoteResize"
.text:0000448C                 mov     edx, [ebp+arg_0]
.text:0000448F                 push    edx
.text:00004490                 call    _gppi
.text:00004495                 add     esp, 14h
.text:00004498                 push    44h ; 'D'
.text:0000449A                 mov     eax, [ebp+arg_4]
.text:0000449D                 push    eax
.text:0000449E                 push    0
.text:000044A0                 push    offset $SG86373 ; "NoAltScreen"
.text:000044A5                 mov     ecx, [ebp+arg_0]
.text:000044A8                 push    ecx
.text:000044A9                 call    _gppi
.text:000044AE                 add     esp, 14h
.text:000044B1                 push    45h ; 'E'
.text:000044B3                 mov     edx, [ebp+arg_4]
.text:000044B6                 push    edx
.text:000044B7                 push    0
.text:000044B9                 push    offset $SG86374 ; "NoRemoteWinTitle"
.text:000044BE                 mov     eax, [ebp+arg_0]
.text:000044C1                 push    eax
.text:000044C2                 call    _gppi
.text:000044C7                 add     esp, 14h
.text:000044CA                 push    1
.text:000044CC                 push    offset $SG86376 ; "NoRemoteQTitle"
.text:000044D1                 mov     ecx, [ebp+arg_0]
.text:000044D4                 push    ecx
.text:000044D5                 call    _gppi_raw
.text:000044DA                 add     esp, 0Ch
.text:000044DD                 mov     [ebp+var_24], eax
.text:000044E0                 push    48h ; 'H'
.text:000044E2                 mov     edx, [ebp+arg_4]
.text:000044E5                 push    edx
.text:000044E6                 mov     eax, [ebp+var_24]
.text:000044E9                 neg     eax
.text:000044EB                 sbb     eax, eax
.text:000044ED                 add     eax, 2
.text:000044F0                 push    eax
.text:000044F1                 push    offset $SG86377 ; "RemoteQTitleAction"
.text:000044F6                 mov     ecx, [ebp+arg_0]
.text:000044F9                 push    ecx
.text:000044FA                 call    _gppi
.text:000044FF                 add     esp, 14h
.text:00004502                 push    46h ; 'F'
.text:00004504                 mov     edx, [ebp+arg_4]
.text:00004507                 push    edx
.text:00004508                 push    0
.text:0000450A                 push    offset $SG86378 ; "NoDBackspace"
.text:0000450F                 mov     eax, [ebp+arg_0]
.text:00004512                 push    eax
.text:00004513                 call    _gppi
.text:00004518                 add     esp, 14h
.text:0000451B                 push    47h ; 'G'
.text:0000451D                 mov     ecx, [ebp+arg_4]
.text:00004520                 push    ecx
.text:00004521                 push    0
.text:00004523                 push    offset $SG86379 ; "NoRemoteCharset"
.text:00004528                 mov     edx, [ebp+arg_0]
.text:0000452B                 push    edx
.text:0000452C                 call    _gppi
.text:00004531                 add     esp, 14h
.text:00004534                 push    49h ; 'I'
.text:00004536                 mov     eax, [ebp+arg_4]
.text:00004539                 push    eax
.text:0000453A                 push    0
.text:0000453C                 push    offset $SG86380 ; "ApplicationCursorKeys"
.text:00004541                 mov     ecx, [ebp+arg_0]
.text:00004544                 push    ecx
.text:00004545                 call    _gppi
.text:0000454A                 add     esp, 14h
.text:0000454D                 push    4Ah ; 'J'
.text:0000454F                 mov     edx, [ebp+arg_4]
.text:00004552                 push    edx
.text:00004553                 push    0
.text:00004555                 push    offset $SG86381 ; "ApplicationKeypad"
.text:0000455A                 mov     eax, [ebp+arg_0]
.text:0000455D                 push    eax
.text:0000455E                 call    _gppi
.text:00004563                 add     esp, 14h
.text:00004566                 push    4Bh ; 'K'
.text:00004568                 mov     ecx, [ebp+arg_4]
.text:0000456B                 push    ecx
.text:0000456C                 push    0
.text:0000456E                 push    offset $SG86382 ; "NetHackKeypad"
.text:00004573                 mov     edx, [ebp+arg_0]
.text:00004576                 push    edx
.text:00004577                 call    _gppi
.text:0000457C                 add     esp, 14h
.text:0000457F                 push    4Eh ; 'N'
.text:00004581                 mov     eax, [ebp+arg_4]
.text:00004584                 push    eax
.text:00004585                 push    1
.text:00004587                 push    offset $SG86383 ; "AltF4"
.text:0000458C                 mov     ecx, [ebp+arg_0]
.text:0000458F                 push    ecx
.text:00004590                 call    _gppi
.text:00004595                 add     esp, 14h
.text:00004598                 push    4Fh ; 'O'
.text:0000459A                 mov     edx, [ebp+arg_4]
.text:0000459D                 push    edx
.text:0000459E                 push    0
.text:000045A0                 push    offset $SG86384 ; "AltSpace"
.text:000045A5                 mov     eax, [ebp+arg_0]
.text:000045A8                 push    eax
.text:000045A9                 call    _gppi
.text:000045AE                 add     esp, 14h
.text:000045B1                 push    50h ; 'P'
.text:000045B3                 mov     ecx, [ebp+arg_4]
.text:000045B6                 push    ecx
.text:000045B7                 push    0
.text:000045B9                 push    offset $SG86385 ; "AltOnly"
.text:000045BE                 mov     edx, [ebp+arg_0]
.text:000045C1                 push    edx
.text:000045C2                 call    _gppi
.text:000045C7                 add     esp, 14h
.text:000045CA                 push    58h ; 'X'
.text:000045CC                 mov     eax, [ebp+arg_4]
.text:000045CF                 push    eax
.text:000045D0                 push    0
.text:000045D2                 push    offset $SG86386 ; "ComposeKey"
.text:000045D7                 mov     ecx, [ebp+arg_0]
.text:000045DA                 push    ecx
.text:000045DB                 call    _gppi
.text:000045E0                 add     esp, 14h
.text:000045E3                 push    59h ; 'Y'
.text:000045E5                 mov     edx, [ebp+arg_4]
.text:000045E8                 push    edx
.text:000045E9                 push    1
.text:000045EB                 push    offset $SG86387 ; "CtrlAltKeys"
.text:000045F0                 mov     eax, [ebp+arg_0]
.text:000045F3                 push    eax
.text:000045F4                 call    _gppi
.text:000045F9                 add     esp, 14h
.text:000045FC                 push    4Ch ; 'L'
.text:000045FE                 mov     ecx, [ebp+arg_4]
.text:00004601                 push    ecx
.text:00004602                 push    0
.text:00004604                 push    offset $SG86388 ; "TelnetKey"
.text:00004609                 mov     edx, [ebp+arg_0]
.text:0000460C                 push    edx
.text:0000460D                 call    _gppi
.text:00004612                 add     esp, 14h
.text:00004615                 push    4Dh ; 'M'
.text:00004617                 mov     eax, [ebp+arg_4]
.text:0000461A                 push    eax
.text:0000461B                 push    1
.text:0000461D                 push    offset $SG86389 ; "TelnetRet"
.text:00004622                 mov     ecx, [ebp+arg_0]
.text:00004625                 push    ecx
.text:00004626                 call    _gppi
.text:0000462B                 add     esp, 14h
.text:0000462E                 push    51h ; 'Q'
.text:00004630                 mov     edx, [ebp+arg_4]
.text:00004633                 push    edx
.text:00004634                 push    2
.text:00004636                 push    offset $SG86390 ; "LocalEcho"
.text:0000463B                 mov     eax, [ebp+arg_0]
.text:0000463E                 push    eax
.text:0000463F                 call    _gppi
.text:00004644                 add     esp, 14h
.text:00004647                 push    52h ; 'R'
.text:00004649                 mov     ecx, [ebp+arg_4]
.text:0000464C                 push    ecx
.text:0000464D                 push    2
.text:0000464F                 push    offset $SG86391 ; "LocalEdit"
.text:00004654                 mov     edx, [ebp+arg_0]
.text:00004657                 push    edx
.text:00004658                 call    _gppi
.text:0000465D                 add     esp, 14h
.text:00004660                 push    7Bh ; '{'
.text:00004662                 mov     eax, [ebp+arg_4]
.text:00004665                 push    eax
.text:00004666                 push    offset $SG86392 ; "PuTTY"
.text:0000466B                 push    offset $SG86393 ; "Answerback"
.text:00004670                 mov     ecx, [ebp+arg_0]
.text:00004673                 push    ecx
.text:00004674                 call    _gpps
.text:00004679                 add     esp, 14h
.text:0000467C                 push    53h ; 'S'
.text:0000467E                 mov     edx, [ebp+arg_4]
.text:00004681                 push    edx
.text:00004682                 push    0
.text:00004684                 push    offset $SG86394 ; "AlwaysOnTop"
.text:00004689                 mov     eax, [ebp+arg_0]
.text:0000468C                 push    eax
.text:0000468D                 call    _gppi
.text:00004692                 add     esp, 14h
.text:00004695                 push    54h ; 'T'
.text:00004697                 mov     ecx, [ebp+arg_4]
.text:0000469A                 push    ecx
.text:0000469B                 push    0
.text:0000469D                 push    offset $SG86395 ; "FullScreenOnAltEnter"
.text:000046A2                 mov     edx, [ebp+arg_0]
.text:000046A5                 push    edx
.text:000046A6                 call    _gppi
.text:000046AB                 add     esp, 14h
.text:000046AE                 push    78h ; 'x'
.text:000046B0                 mov     eax, [ebp+arg_4]
.text:000046B3                 push    eax
.text:000046B4                 push    0
.text:000046B6                 push    offset $SG86396 ; "HideMousePtr"
.text:000046BB                 mov     ecx, [ebp+arg_0]
.text:000046BE                 push    ecx
.text:000046BF                 call    _gppi
.text:000046C4                 add     esp, 14h
.text:000046C7                 push    79h ; 'y'
.text:000046C9                 mov     edx, [ebp+arg_4]
.text:000046CC                 push    edx
.text:000046CD                 push    0
.text:000046CF                 push    offset $SG86397 ; "SunkenEdge"
.text:000046D4                 mov     eax, [ebp+arg_0]
.text:000046D7                 push    eax
.text:000046D8                 call    _gppi
.text:000046DD                 add     esp, 14h
.text:000046E0                 push    7Ah ; 'z'
.text:000046E2                 mov     ecx, [ebp+arg_4]
.text:000046E5                 push    ecx
.text:000046E6                 push    1
.text:000046E8                 push    offset $SG86398 ; "WindowBorder"
.text:000046ED                 mov     edx, [ebp+arg_0]
.text:000046F0                 push    edx
.text:000046F1                 call    _gppi
.text:000046F6                 add     esp, 14h
.text:000046F9                 push    5Fh ; '_'
.text:000046FB                 mov     eax, [ebp+arg_4]
.text:000046FE                 push    eax
.text:000046FF                 push    0
.text:00004701                 push    offset $SG86399 ; "CurType"
.text:00004706                 mov     ecx, [ebp+arg_0]
.text:00004709                 push    ecx
.text:0000470A                 call    _gppi
.text:0000470F                 add     esp, 14h
.text:00004712                 push    60h ; '`'
.text:00004714                 mov     edx, [ebp+arg_4]
.text:00004717                 push    edx
.text:00004718                 push    0
.text:0000471A                 push    offset $SG86400 ; "BlinkCur"
.text:0000471F                 mov     eax, [ebp+arg_0]
.text:00004722                 push    eax
.text:00004723                 call    _gppi
.text:00004728                 add     esp, 14h
.text:0000472B                 push    61h ; 'a'
.text:0000472D                 mov     ecx, [ebp+arg_4]
.text:00004730                 push    ecx
.text:00004731
.text:00004731 loc_4731:                               ; DATA XREF: .data:$SG86346o
.text:00004731                 push    1
.text:00004733                 push    offset $SG86401 ; "Beep"
.text:00004738                 mov     edx, [ebp+arg_0]
.text:0000473B                 push    edx
.text:0000473C                 call    _gppi
.text:00004741                 add     esp, 14h
.text:00004744                 push    62h ; 'b'
.text:00004746                 mov     eax, [ebp+arg_4]
.text:00004749                 push    eax
.text:0000474A                 push    0
.text:0000474C                 push    offset $SG86402 ; "BeepInd"
.text:00004751                 mov     ecx, [ebp+arg_0]
.text:00004754                 push    ecx
.text:00004755                 call    _gppi
.text:0000475A                 add     esp, 14h
.text:0000475D                 push    67h ; 'g'
.text:0000475F                 mov     edx, [ebp+arg_4]
.text:00004762                 push    edx
.text:00004763                 push    offset $SG86403 ; "BellWaveFile"
.text:00004768                 mov     eax, [ebp+arg_0]
.text:0000476B                 push    eax
.text:0000476C                 call    _gppfile
.text:00004771                 add     esp, 10h
.text:00004774                 push    63h ; 'c'
.text:00004776                 mov     ecx, [ebp+arg_4]
.text:00004779                 push    ecx
.text:0000477A                 push    1
.text:0000477C                 push    offset $SG86404 ; "BellOverload"
.text:00004781                 mov     edx, [ebp+arg_0]
.text:00004784                 push    edx
.text:00004785                 call    _gppi
.text:0000478A                 add     esp, 14h
.text:0000478D                 push    64h ; 'd'
.text:0000478F                 mov     eax, [ebp+arg_4]
.text:00004792                 push    eax
.text:00004793                 push    5
.text:00004795                 push    offset $SG86405 ; "BellOverloadN"
.text:0000479A                 mov     ecx, [ebp+arg_0]
.text:0000479D                 push    ecx
.text:0000479E                 call    _gppi
.text:000047A3                 add     esp, 14h
.text:000047A6                 push    7D0h
.text:000047AB                 push    offset $SG86406 ; "BellOverloadT"
.text:000047B0                 mov     edx, [ebp+arg_0]
.text:000047B3                 push    edx
.text:000047B4                 call    _gppi_raw
.text:000047B9                 add     esp, 0Ch
.text:000047BC                 mov     [ebp+var_8], eax
.text:000047BF                 mov     eax, [ebp+var_8]
.text:000047C2                 push    eax
.text:000047C3                 push    65h ; 'e'
.text:000047C5                 mov     ecx, [ebp+arg_4]
.text:000047C8                 push    ecx
.text:000047C9                 call    _conf_set_int
.text:000047CE                 add     esp, 0Ch
.text:000047D1                 push    1388h
.text:000047D6                 push    offset $SG86407 ; "BellOverloadS"
.text:000047DB                 mov     edx, [ebp+arg_0]
.text:000047DE                 push    edx
.text:000047DF                 call    _gppi_raw
.text:000047E4                 add     esp, 0Ch
.text:000047E7                 mov     [ebp+var_8], eax
.text:000047EA                 mov     eax, [ebp+var_8]
.text:000047ED                 push    eax
.text:000047EE                 push    66h ; 'f'
.text:000047F0                 mov     ecx, [ebp+arg_4]
.text:000047F3                 push    ecx
.text:000047F4                 call    _conf_set_int
.text:000047F9                 add     esp, 0Ch
.text:000047FC                 push    5Bh ; '['
.text:000047FE                 mov     edx, [ebp+arg_4]
.text:00004801                 push    edx
.text:00004802                 push    7D0h
.text:00004807                 push    offset $SG86408 ; "ScrollbackLines"
.text:0000480C                 mov     eax, [ebp+arg_0]
.text:0000480F                 push    eax
.text:00004810                 call    _gppi
.text:00004815                 add     esp, 14h
.text:00004818                 push    5Ch ; '\'
.text:0000481A                 mov     ecx, [ebp+arg_4]
.text:0000481D                 push    ecx
.text:0000481E                 push    0
.text:00004820                 push    offset $SG86409 ; "DECOriginMode"
.text:00004825                 mov     edx, [ebp+arg_0]
.text:00004828                 push    edx
.text:00004829                 call    _gppi
.text:0000482E                 add     esp, 14h
.text:00004831                 push    5Dh ; ']'
.text:00004833                 mov     eax, [ebp+arg_4]
.text:00004836                 push    eax
.text:00004837                 push    1
.text:00004839                 push    offset $SG86410 ; "AutoWrapMode"
.text:0000483E                 mov     ecx, [ebp+arg_0]
.text:00004841                 push    ecx
.text:00004842                 call    _gppi
.text:00004847                 add     esp, 14h
.text:0000484A                 push    5Eh ; '^'
.text:0000484C                 mov     edx, [ebp+arg_4]
.text:0000484F                 push    edx
.text:00004850                 push    0
.text:00004852                 push    offset $SG86411 ; "LFImpliesCR"
.text:00004857                 mov     eax, [ebp+arg_0]
.text:0000485A                 push    eax
.text:0000485B                 call    _gppi
.text:00004860                 add     esp, 14h
.text:00004863                 push    0B0h ; '¦'
.text:00004868                 mov     ecx, [ebp+arg_4]
.text:0000486B                 push    ecx
.text:0000486C                 push    0
.text:0000486E                 push    offset $SG86412 ; "CRImpliesLF"
.text:00004873                 mov     edx, [ebp+arg_0]
.text:00004876                 push    edx
.text:00004877                 call    _gppi
.text:0000487C                 add     esp, 14h
.text:0000487F                 push    7Dh ; '}'
.text:00004881                 mov     eax, [ebp+arg_4]
.text:00004884                 push    eax
.text:00004885                 push    0
.text:00004887                 push    offset $SG86413 ; "DisableArabicShaping"
.text:0000488C                 mov     ecx, [ebp+arg_0]
.text:0000488F                 push    ecx
.text:00004890                 call    _gppi
.text:00004895                 add     esp, 14h
.text:00004898                 push    7Eh ; '~'
.text:0000489A                 mov     edx, [ebp+arg_4]
.text:0000489D                 push    edx
.text:0000489E                 push    0
.text:000048A0                 push    offset $SG86414 ; "DisableBidi"
.text:000048A5                 mov     eax, [ebp+arg_0]
.text:000048A8                 push    eax
.text:000048A9                 call    _gppi
.text:000048AE                 add     esp, 14h
.text:000048B1                 push    6Dh ; 'm'
.text:000048B3                 mov     ecx, [ebp+arg_4]
.text:000048B6                 push    ecx
.text:000048B7                 push    1
.text:000048B9                 push    offset $SG86415 ; "WinNameAlways"
.text:000048BE                 mov     edx, [ebp+arg_0]
.text:000048C1                 push    edx
.text:000048C2                 call    _gppi
.text:000048C7                 add     esp, 14h
.text:000048CA                 push    5Ah ; 'Z'
.text:000048CC                 mov     eax, [ebp+arg_4]
.text:000048CF                 push    eax
.text:000048D0                 push    offset $SG86416
.text:000048D5                 push    offset $SG86417 ; "WinTitle"
.text:000048DA                 mov     ecx, [ebp+arg_0]
.text:000048DD                 push    ecx
.text:000048DE                 call    _gpps
.text:000048E3                 add     esp, 14h
.text:000048E6                 push    6Eh ; 'n'
.text:000048E8                 mov     edx, [ebp+arg_4]
.text:000048EB                 push    edx
.text:000048EC                 push    50h ; 'P'
.text:000048EE                 push    offset $SG86418 ; "TermWidth"
.text:000048F3                 mov     eax, [ebp+arg_0]
.text:000048F6                 push    eax
.text:000048F7                 call    _gppi
.text:000048FC                 add     esp, 14h
.text:000048FF                 push    6Fh ; 'o'
.text:00004901                 mov     ecx, [ebp+arg_4]
.text:00004904                 push    ecx
.text:00004905                 push    18h
.text:00004907                 push    offset $SG86419 ; "TermHeight"
.text:0000490C                 mov     edx, [ebp+arg_0]
.text:0000490F                 push    edx
.text:00004910                 call    _gppi
.text:00004915                 add     esp, 14h
.text:00004918                 push    70h ; 'p'
.text:0000491A                 mov     eax, [ebp+arg_4]
.text:0000491D                 push    eax
.text:0000491E                 push    offset $SG86420 ; "Font"
.text:00004923                 mov     ecx, [ebp+arg_0]
.text:00004926                 push    ecx
.text:00004927                 call    _gppfont
.text:0000492C                 add     esp, 10h
.text:0000492F                 push    71h ; 'q'
.text:00004931                 mov     edx, [ebp+arg_4]
.text:00004934                 push    edx
.text:00004935                 push    0
.text:00004937                 push    offset $SG86421 ; "FontQuality"
.text:0000493C                 mov     eax, [ebp+arg_0]
.text:0000493F                 push    eax
.text:00004940                 call    _gppi
.text:00004945                 add     esp, 14h
.text:00004948                 push    8Bh ; 'ï'
.text:0000494D                 mov     ecx, [ebp+arg_4]
.text:00004950                 push    ecx
.text:00004951                 push    4
.text:00004953                 push    offset $SG86422 ; "FontVTMode"
.text:00004958                 mov     edx, [ebp+arg_0]
.text:0000495B                 push    edx
.text:0000495C                 call    _gppi
.text:00004961                 add     esp, 14h
.text:00004964                 push    81h ; 'ü'
.text:00004969                 mov     eax, [ebp+arg_4]
.text:0000496C                 push    eax
.text:0000496D                 push    0
.text:0000496F                 push    offset $SG86423 ; "UseSystemColours"
.text:00004974                 mov     ecx, [ebp+arg_0]
.text:00004977                 push    ecx
.text:00004978                 call    _gppi
.text:0000497D                 add     esp, 14h
.text:00004980                 push    82h ; 'é'
.text:00004985                 mov     edx, [ebp+arg_4]
.text:00004988                 push    edx
.text:00004989                 push    0
.text:0000498B                 push    offset $SG86424 ; "TryPalette"
.text:00004990                 mov     eax, [ebp+arg_0]
.text:00004993                 push    eax
.text:00004994                 call    _gppi
.text:00004999                 add     esp, 14h
.text:0000499C                 push    7Fh ; ''
.text:0000499E                 mov     ecx, [ebp+arg_4]
.text:000049A1                 push    ecx
.text:000049A2                 push    1
.text:000049A4                 push    offset $SG86425 ; "ANSIColour"
.text:000049A9                 mov     edx, [ebp+arg_0]
.text:000049AC                 push    edx
.text:000049AD                 call    _gppi
.text:000049B2                 add     esp, 14h
.text:000049B5                 push    80h ; 'Ç'
.text:000049BA                 mov     eax, [ebp+arg_4]
.text:000049BD                 push    eax
.text:000049BE                 push    1
.text:000049C0                 push    offset $SG86426 ; "Xterm256Colour"
.text:000049C5                 mov     ecx, [ebp+arg_0]
.text:000049C8                 push    ecx
.text:000049C9                 call    _gppi
.text:000049CE                 add     esp, 14h
.text:000049D1                 push    1
.text:000049D3                 push    offset $SG86427 ; "BoldAsColour"
.text:000049D8                 mov     edx, [ebp+arg_0]
.text:000049DB                 push    edx
.text:000049DC                 call    _gppi_raw
.text:000049E1                 add     esp, 0Ch
.text:000049E4                 mov     [ebp+var_8], eax
.text:000049E7                 mov     eax, [ebp+var_8]
.text:000049EA                 add     eax, 1
.text:000049ED                 push    eax
.text:000049EE                 push    83h ; 'â'
.text:000049F3                 mov     ecx, [ebp+arg_4]
.text:000049F6                 push    ecx
.text:000049F7                 call    _conf_set_int
.text:000049FC                 add     esp, 0Ch
.text:000049FF                 mov     [ebp+var_8], 0
.text:00004A06                 jmp     short loc_4A11
.text:00004A08 ; ---------------------------------------------------------------------------
.text:00004A08
.text:00004A08 loc_4A08:                               ; CODE XREF: _load_open_settings+F16j
.text:00004A08                 mov     edx, [ebp+var_8]
.text:00004A0B                 add     edx, 1
.text:00004A0E                 mov     [ebp+var_8], edx
.text:00004A11
.text:00004A11 loc_4A11:                               ; CODE XREF: _load_open_settings+E46j
.text:00004A11                 cmp     [ebp+var_8], 16h
.text:00004A15                 jge     loc_4ADB
.text:00004A1B                 mov     eax, [ebp+var_8]
.text:00004A1E                 push    eax
.text:00004A1F                 push    offset $SG86460 ; "Colour%d"
.text:00004A24                 lea     ecx, [ebp+Dest]
.text:00004A27                 push    ecx             ; Dest
.text:00004A28                 call    _sprintf
.text:00004A2D                 add     esp, 0Ch
.text:00004A30                 mov     edx, [ebp+var_8]
.text:00004A33                 mov     eax, ds:?defaults@?L@??load_open_settings@@9@9[edx*4] ; `load_open_settings'::`11'::defaults
.text:00004A3A                 push    eax
.text:00004A3B                 lea     ecx, [ebp+Dest]
.text:00004A3E                 push    ecx
.text:00004A3F                 mov     edx, [ebp+arg_0]
.text:00004A42                 push    edx
.text:00004A43                 call    _gpps_raw
.text:00004A48                 add     esp, 0Ch
.text:00004A4B                 mov     [ebp+Src], eax
.text:00004A4E                 lea     eax, [ebp+var_64]
.text:00004A51                 push    eax
.text:00004A52                 lea     ecx, [ebp+var_58]
.text:00004A55                 push    ecx
.text:00004A56                 lea     edx, [ebp+var_4C]
.text:00004A59                 push    edx
.text:00004A5A                 push    offset $SG86462 ; "%d,%d,%d"
.text:00004A5F                 mov     eax, [ebp+Src]
.text:00004A62                 push    eax             ; Src
.text:00004A63                 call    _sscanf
.text:00004A68                 add     esp, 14h
.text:00004A6B                 cmp     eax, 3
.text:00004A6E                 jnz     short loc_4ACA
.text:00004A70                 mov     ecx, [ebp+var_4C]
.text:00004A73                 push    ecx
.text:00004A74                 mov     edx, [ebp+var_8]
.text:00004A77                 imul    edx, 3
.text:00004A7A                 push    edx
.text:00004A7B                 push    84h ; 'ä'
.text:00004A80                 mov     eax, [ebp+arg_4]
.text:00004A83                 push    eax
.text:00004A84                 call    _conf_set_int_int
.text:00004A89                 add     esp, 10h
.text:00004A8C                 mov     ecx, [ebp+var_58]
.text:00004A8F                 push    ecx
.text:00004A90                 mov     edx, [ebp+var_8]
.text:00004A93                 imul    edx, 3
.text:00004A96                 add     edx, 1
.text:00004A99                 push    edx
.text:00004A9A                 push    84h ; 'ä'
.text:00004A9F                 mov     eax, [ebp+arg_4]
.text:00004AA2                 push    eax
.text:00004AA3                 call    _conf_set_int_int
.text:00004AA8                 add     esp, 10h
.text:00004AAB                 mov     ecx, [ebp+var_64]
.text:00004AAE                 push    ecx
.text:00004AAF                 mov     edx, [ebp+var_8]
.text:00004AB2                 imul    edx, 3
.text:00004AB5                 add     edx, 2
.text:00004AB8                 push    edx
.text:00004AB9                 push    84h ; 'ä'
.text:00004ABE                 mov     eax, [ebp+arg_4]
.text:00004AC1                 push    eax
.text:00004AC2                 call    _conf_set_int_int
.text:00004AC7                 add     esp, 10h
.text:00004ACA
.text:00004ACA loc_4ACA:                               ; CODE XREF: _load_open_settings+EAEj
.text:00004ACA                 mov     ecx, [ebp+Src]
.text:00004ACD                 push    ecx
.text:00004ACE                 call    _safefree
.text:00004AD3                 add     esp, 4
.text:00004AD6                 jmp     loc_4A08
.text:00004ADB ; ---------------------------------------------------------------------------
.text:00004ADB
.text:00004ADB loc_4ADB:                               ; CODE XREF: _load_open_settings+E55j
.text:00004ADB                 push    87h ; 'ç'
.text:00004AE0                 mov     edx, [ebp+arg_4]
.text:00004AE3                 push    edx
.text:00004AE4                 push    0
.text:00004AE6                 push    offset $SG86463 ; "RawCNP"
.text:00004AEB                 mov     eax, [ebp+arg_0]
.text:00004AEE                 push    eax
.text:00004AEF                 call    _gppi
.text:00004AF4                 add     esp, 14h
.text:00004AF7                 push    88h ; 'ê'
.text:00004AFC                 mov     ecx, [ebp+arg_4]
.text:00004AFF                 push    ecx
.text:00004B00                 push    0
.text:00004B02                 push    offset $SG86464 ; "PasteRTF"
.text:00004B07                 mov     edx, [ebp+arg_0]
.text:00004B0A                 push    edx
.text:00004B0B                 call    _gppi
.text:00004B10                 add     esp, 14h
.text:00004B13                 push    85h ; 'à'
.text:00004B18                 mov     eax, [ebp+arg_4]
.text:00004B1B                 push    eax
.text:00004B1C                 push    0
.text:00004B1E                 push    offset $SG86465 ; "MouseIsXterm"
.text:00004B23                 mov     ecx, [ebp+arg_0]
.text:00004B26                 push    ecx
.text:00004B27                 call    _gppi
.text:00004B2C                 add     esp, 14h
.text:00004B2F                 push    86h ; 'å'
.text:00004B34                 mov     edx, [ebp+arg_4]
.text:00004B37                 push    edx
.text:00004B38                 push    0
.text:00004B3A                 push    offset $SG86466 ; "RectSelect"
.text:00004B3F                 mov     eax, [ebp+arg_0]
.text:00004B42                 push    eax
.text:00004B43                 call    _gppi
.text:00004B48                 add     esp, 14h
.text:00004B4B                 push    89h ; 'ë'
.text:00004B50                 mov     ecx, [ebp+arg_4]
.text:00004B53                 push    ecx
.text:00004B54                 push    1
.text:00004B56                 push    offset $SG86467 ; "MouseOverride"
.text:00004B5B                 mov     edx, [ebp+arg_0]
.text:00004B5E                 push    edx
.text:00004B5F                 call    _gppi
.text:00004B64                 add     esp, 14h
.text:00004B67                 mov     [ebp+var_8], 0
.text:00004B6E                 jmp     short loc_4B79
.text:00004B70 ; ---------------------------------------------------------------------------
.text:00004B70
.text:00004B70 loc_4B70:                               ; CODE XREF: _load_open_settings+10D7j
.text:00004B70                 mov     eax, [ebp+var_8]
.text:00004B73                 add     eax, 20h ; ' '
.text:00004B76                 mov     [ebp+var_8], eax
.text:00004B79
.text:00004B79 loc_4B79:                               ; CODE XREF: _load_open_settings+FAEj
.text:00004B79                 cmp     [ebp+var_8], 100h
.text:00004B80                 jge     loc_4C9C
.text:00004B86                 mov     ecx, [ebp+var_8]
.text:00004B89                 push    ecx
.text:00004B8A                 push    offset $SG86485 ; "Wordness%d"
.text:00004B8F                 lea     edx, [ebp+var_80]
.text:00004B92                 push    edx             ; Dest
.text:00004B93                 call    _sprintf
.text:00004B98                 add     esp, 0Ch
.text:00004B9B                 mov     eax, [ebp+var_8]
.text:00004B9E                 cdq
.text:00004B9F                 and     edx, 1Fh
.text:00004BA2                 add     eax, edx
.text:00004BA4                 sar     eax, 5
.text:00004BA7                 mov     eax, ds:?defaults@?N@??load_open_settings@@9@9[eax*4] ; `load_open_settings'::`13'::defaults
.text:00004BAE                 push    eax
.text:00004BAF                 lea     ecx, [ebp+var_80]
.text:00004BB2                 push    ecx
.text:00004BB3                 mov     edx, [ebp+arg_0]
.text:00004BB6                 push    edx
.text:00004BB7                 call    _gpps_raw
.text:00004BBC                 add     esp, 0Ch
.text:00004BBF                 mov     [ebp+var_88], eax
.text:00004BC5                 mov     eax, [ebp+var_88]
.text:00004BCB                 mov     [ebp+var_8C], eax
.text:00004BD1                 mov     ecx, [ebp+var_8]
.text:00004BD4                 mov     [ebp+var_90], ecx
.text:00004BDA                 jmp     short loc_4BEB
.text:00004BDC ; ---------------------------------------------------------------------------
.text:00004BDC
.text:00004BDC loc_4BDC:                               ; CODE XREF: _load_open_settings+10C3j
.text:00004BDC                 mov     edx, [ebp+var_90]
.text:00004BE2                 add     edx, 1
.text:00004BE5                 mov     [ebp+var_90], edx
.text:00004BEB
.text:00004BEB loc_4BEB:                               ; CODE XREF: _load_open_settings+101Aj
.text:00004BEB                 mov     eax, [ebp+var_8]
.text:00004BEE                 add     eax, 20h ; ' '
.text:00004BF1                 cmp     [ebp+var_90], eax
.text:00004BF7                 jge     loc_4C88
.text:00004BFD                 mov     ecx, [ebp+var_8C]
.text:00004C03                 mov     [ebp+Str], ecx
.text:00004C09
.text:00004C09 loc_4C09:                               ; CODE XREF: _load_open_settings+1073j
.text:00004C09                 mov     edx, [ebp+var_8C]
.text:00004C0F                 movsx   eax, byte ptr [edx]
.text:00004C12                 test    eax, eax
.text:00004C14                 jz      short loc_4C35
.text:00004C16                 mov     ecx, [ebp+var_8C]
.text:00004C1C                 movsx   edx, byte ptr [ecx]
.text:00004C1F                 cmp     edx, 2Ch ; ','
.text:00004C22                 jz      short loc_4C35
.text:00004C24                 mov     eax, [ebp+var_8C]
.text:00004C2A                 add     eax, 1
.text:00004C2D                 mov     [ebp+var_8C], eax
.text:00004C33                 jmp     short loc_4C09
.text:00004C35 ; ---------------------------------------------------------------------------
.text:00004C35
.text:00004C35 loc_4C35:                               ; CODE XREF: _load_open_settings+1054j
.text:00004C35                                         ; _load_open_settings+1062j
.text:00004C35                 mov     ecx, [ebp+var_8C]
.text:00004C3B                 movsx   edx, byte ptr [ecx]
.text:00004C3E                 cmp     edx, 2Ch ; ','
.text:00004C41                 jnz     short loc_4C5B
.text:00004C43                 mov     eax, [ebp+var_8C]
.text:00004C49                 mov     byte ptr [eax], 0
.text:00004C4C                 mov     ecx, [ebp+var_8C]
.text:00004C52                 add     ecx, 1
.text:00004C55                 mov     [ebp+var_8C], ecx
.text:00004C5B
.text:00004C5B loc_4C5B:                               ; CODE XREF: _load_open_settings+1081j
.text:00004C5B                 mov     edx, [ebp+Str]
.text:00004C61                 push    edx             ; Str
.text:00004C62                 call    _atoi
.text:00004C67                 add     esp, 4
.text:00004C6A                 push    eax
.text:00004C6B                 mov     eax, [ebp+var_90]
.text:00004C71                 push    eax
.text:00004C72                 push    8Ah ; 'è'
.text:00004C77                 mov     ecx, [ebp+arg_4]
.text:00004C7A                 push    ecx
.text:00004C7B                 call    _conf_set_int_int
.text:00004C80                 add     esp, 10h
.text:00004C83                 jmp     loc_4BDC
.text:00004C88 ; ---------------------------------------------------------------------------
.text:00004C88
.text:00004C88 loc_4C88:                               ; CODE XREF: _load_open_settings+1037j
.text:00004C88                 mov     edx, [ebp+var_88]
.text:00004C8E                 push    edx
.text:00004C8F                 call    _safefree
.text:00004C94                 add     esp, 4
.text:00004C97                 jmp     loc_4B70
.text:00004C9C ; ---------------------------------------------------------------------------
.text:00004C9C
.text:00004C9C loc_4C9C:                               ; CODE XREF: _load_open_settings+FC0j
.text:00004C9C                 push    8Ch ; 'î'
.text:00004CA1                 mov     eax, [ebp+arg_4]
.text:00004CA4                 push    eax
.text:00004CA5                 push    offset $SG86494
.text:00004CAA                 push    offset $SG86495 ; "LineCodePage"
.text:00004CAF                 mov     ecx, [ebp+arg_0]
.text:00004CB2                 push    ecx
.text:00004CB3                 call    _gpps
.text:00004CB8                 add     esp, 14h
.text:00004CBB                 push    8Dh ; 'ì'
.text:00004CC0                 mov     edx, [ebp+arg_4]
.text:00004CC3                 push    edx
.text:00004CC4                 push    0
.text:00004CC6                 push    offset $SG86496 ; "CJKAmbigWide"
.text:00004CCB                 mov     eax, [ebp+arg_0]
.text:00004CCE                 push    eax
.text:00004CCF                 call    _gppi
.text:00004CD4                 add     esp, 14h
.text:00004CD7                 push    8Eh ; 'Ä'
.text:00004CDC                 mov     ecx, [ebp+arg_4]
.text:00004CDF                 push    ecx
.text:00004CE0                 push    1
.text:00004CE2                 push    offset $SG86497 ; "UTF8Override"
.text:00004CE7                 mov     edx, [ebp+arg_0]
.text:00004CEA                 push    edx
.text:00004CEB                 call    _gppi
.text:00004CF0                 add     esp, 14h
.text:00004CF3                 push    7Ch ; '|'
.text:00004CF5                 mov     eax, [ebp+arg_4]
.text:00004CF8                 push    eax
.text:00004CF9                 push    offset $SG86498
.text:00004CFE                 push    offset $SG86499 ; "Printer"
.text:00004D03                 mov     ecx, [ebp+arg_0]
.text:00004D06                 push    ecx
.text:00004D07                 call    _gpps
.text:00004D0C                 add     esp, 14h
.text:00004D0F                 push    8Fh ; 'Å'
.text:00004D14                 mov     edx, [ebp+arg_4]
.text:00004D17                 push    edx
.text:00004D18                 push    0
.text:00004D1A                 push    offset $SG86500 ; "CapsLockCyr"
.text:00004D1F                 mov     eax, [ebp+arg_0]
.text:00004D22                 push    eax
.text:00004D23                 call    _gppi
.text:00004D28                 add     esp, 14h
.text:00004D2B                 push    68h ; 'h'
.text:00004D2D                 mov     ecx, [ebp+arg_4]
.text:00004D30                 push    ecx
.text:00004D31                 push    1
.text:00004D33                 push    offset $SG86501 ; "ScrollBar"
.text:00004D38                 mov     edx, [ebp+arg_0]
.text:00004D3B                 push    edx
.text:00004D3C                 call    _gppi
.text:00004D41                 add     esp, 14h
.text:00004D44                 push    69h ; 'i'
.text:00004D46                 mov     eax, [ebp+arg_4]
.text:00004D49                 push    eax
.text:00004D4A                 push    0
.text:00004D4C                 push    offset $SG86502 ; "ScrollBarFullScreen"
.text:00004D51                 mov     ecx, [ebp+arg_0]
.text:00004D54                 push    ecx
.text:00004D55                 call    _gppi
.text:00004D5A                 add     esp, 14h
.text:00004D5D                 push    55h ; 'U'
.text:00004D5F                 mov     edx, [ebp+arg_4]
.text:00004D62                 push    edx
.text:00004D63                 push    0
.text:00004D65                 push    offset $SG86503 ; "ScrollOnKey"
.text:00004D6A                 mov     eax, [ebp+arg_0]
.text:00004D6D                 push    eax
.text:00004D6E                 call    _gppi
.text:00004D73                 add     esp, 14h
.text:00004D76                 push    56h ; 'V'
.text:00004D78                 mov     ecx, [ebp+arg_4]
.text:00004D7B                 push    ecx
.text:00004D7C                 push    1
.text:00004D7E                 push    offset $SG86504 ; "ScrollOnDisp"
.text:00004D83                 mov     edx, [ebp+arg_0]
.text:00004D86                 push    edx
.text:00004D87                 call    _gppi
.text:00004D8C                 add     esp, 14h
.text:00004D8F                 push    57h ; 'W'
.text:00004D91                 mov     eax, [ebp+arg_4]
.text:00004D94                 push    eax
.text:00004D95                 push    1
.text:00004D97                 push    offset $SG86505 ; "EraseToScrollback"
.text:00004D9C                 mov     ecx, [ebp+arg_0]
.text:00004D9F                 push    ecx
.text:00004DA0                 call    _gppi
.text:00004DA5                 add     esp, 14h
.text:00004DA8                 push    6Ah ; 'j'
.text:00004DAA                 mov     edx, [ebp+arg_4]
.text:00004DAD                 push    edx
.text:00004DAE                 push    0
.text:00004DB0                 push    offset $SG86506 ; "LockSize"
.text:00004DB5                 mov     eax, [ebp+arg_0]
.text:00004DB8                 push    eax
.text:00004DB9                 call    _gppi
.text:00004DBE                 add     esp, 14h
.text:00004DC1                 push    6Bh ; 'k'
.text:00004DC3                 mov     ecx, [ebp+arg_4]
.text:00004DC6                 push    ecx
.text:00004DC7                 push    1
.text:00004DC9                 push    offset $SG86507 ; "BCE"
.text:00004DCE                 mov     edx, [ebp+arg_0]
.text:00004DD1                 push    edx
.text:00004DD2                 call    _gppi
.text:00004DD7                 add     esp, 14h
.text:00004DDA                 push    6Ch ; 'l'
.text:00004DDC                 mov     eax, [ebp+arg_4]
.text:00004DDF                 push    eax
.text:00004DE0                 push    0
.text:00004DE2                 push    offset $SG86508 ; "BlinkText"
.text:00004DE7                 mov     ecx, [ebp+arg_0]
.text:00004DEA                 push    ecx
.text:00004DEB                 call    _gppi
.text:00004DF0                 add     esp, 14h
.text:00004DF3                 push    90h ; 'É'
.text:00004DF8                 mov     edx, [ebp+arg_4]
.text:00004DFB                 push    edx
.text:00004DFC                 push    0
.text:00004DFE                 push    offset $SG86509 ; "X11Forward"
.text:00004E03                 mov     eax, [ebp+arg_0]
.text:00004E06                 push    eax
.text:00004E07                 call    _gppi
.text:00004E0C                 add     esp, 14h
.text:00004E0F                 push    91h ; 'æ'
.text:00004E14                 mov     ecx, [ebp+arg_4]
.text:00004E17                 push    ecx
.text:00004E18                 push    offset $SG86510
.text:00004E1D                 push    offset $SG86511 ; "X11Display"
.text:00004E22                 mov     edx, [ebp+arg_0]
.text:00004E25                 push    edx
.text:00004E26                 call    _gpps
.text:00004E2B                 add     esp, 14h
.text:00004E2E                 push    92h ; 'Æ'
.text:00004E33                 mov     eax, [ebp+arg_4]
.text:00004E36                 push    eax
.text:00004E37                 push    1
.text:00004E39                 push    offset $SG86512 ; "X11AuthType"
.text:00004E3E                 mov     ecx, [ebp+arg_0]
.text:00004E41                 push    ecx
.text:00004E42                 call    _gppi
.text:00004E47                 add     esp, 14h
.text:00004E4A                 push    93h ; 'ô'
.text:00004E4F                 mov     edx, [ebp+arg_4]
.text:00004E52                 push    edx
.text:00004E53                 push    offset $SG86513 ; "X11AuthFile"
.text:00004E58                 mov     eax, [ebp+arg_0]
.text:00004E5B                 push    eax
.text:00004E5C                 call    _gppfile
.text:00004E61                 add     esp, 10h
.text:00004E64                 push    94h ; 'ö'
.text:00004E69                 mov     ecx, [ebp+arg_4]
.text:00004E6C                 push    ecx
.text:00004E6D                 push    0
.text:00004E6F                 push    offset $SG86514 ; "LocalPortAcceptAll"
.text:00004E74                 mov     edx, [ebp+arg_0]
.text:00004E77                 push    edx
.text:00004E78                 call    _gppi
.text:00004E7D                 add     esp, 14h
.text:00004E80                 push    95h ; 'ò'
.text:00004E85                 mov     eax, [ebp+arg_4]
.text:00004E88                 push    eax
.text:00004E89                 push    0
.text:00004E8B                 push    offset $SG86515 ; "RemotePortAcceptAll"
.text:00004E90                 mov     ecx, [ebp+arg_0]
.text:00004E93                 push    ecx
.text:00004E94                 call    _gppi
.text:00004E99                 add     esp, 14h
.text:00004E9C                 push    96h ; 'û'
.text:00004EA1                 mov     edx, [ebp+arg_4]
.text:00004EA4                 push    edx
.text:00004EA5                 push    offset $SG86516 ; "PortForwardings"
.text:00004EAA                 mov     eax, [ebp+arg_0]
.text:00004EAD                 push    eax
.text:00004EAE                 call    _gppmap
.text:00004EB3                 add     esp, 10h
.text:00004EB6                 push    0
.text:00004EB8                 push    offset $SG86517 ; "BugIgnore1"
.text:00004EBD                 mov     ecx, [ebp+arg_0]
.text:00004EC0                 push    ecx
.text:00004EC1                 call    _gppi_raw
.text:00004EC6                 add     esp, 0Ch
.text:00004EC9                 mov     [ebp+var_8], eax
.text:00004ECC                 mov     edx, 2
.text:00004ED1                 sub     edx, [ebp+var_8]
.text:00004ED4                 push    edx
.text:00004ED5                 push    97h ; 'ù'
.text:00004EDA                 mov     eax, [ebp+arg_4]
.text:00004EDD                 push    eax
.text:00004EDE                 call    _conf_set_int
.text:00004EE3                 add     esp, 0Ch
.text:00004EE6                 push    0
.text:00004EE8                 push    offset $SG86518 ; "BugPlainPW1"
.text:00004EED                 mov     ecx, [ebp+arg_0]
.text:00004EF0                 push    ecx
.text:00004EF1                 call    _gppi_raw
.text:00004EF6                 add     esp, 0Ch
.text:00004EF9                 mov     [ebp+var_8], eax
.text:00004EFC                 mov     edx, 2
.text:00004F01                 sub     edx, [ebp+var_8]
.text:00004F04                 push    edx
.text:00004F05                 push    98h ; 'ÿ'
.text:00004F0A                 mov     eax, [ebp+arg_4]
.text:00004F0D                 push    eax
.text:00004F0E                 call    _conf_set_int
.text:00004F13                 add     esp, 0Ch
.text:00004F16                 push    0
.text:00004F18                 push    offset $SG86519 ; "BugRSA1"
.text:00004F1D                 mov     ecx, [ebp+arg_0]
.text:00004F20                 push    ecx
.text:00004F21                 call    _gppi_raw
.text:00004F26                 add     esp, 0Ch
.text:00004F29                 mov     [ebp+var_8], eax
.text:00004F2C                 mov     edx, 2
.text:00004F31                 sub     edx, [ebp+var_8]
.text:00004F34                 push    edx
.text:00004F35                 push    99h ; 'Ö'
.text:00004F3A                 mov     eax, [ebp+arg_4]
.text:00004F3D                 push    eax
.text:00004F3E                 call    _conf_set_int
.text:00004F43                 add     esp, 0Ch
.text:00004F46                 push    0
.text:00004F48                 push    offset $SG86520 ; "BugIgnore2"
.text:00004F4D                 mov     ecx, [ebp+arg_0]
.text:00004F50                 push    ecx
.text:00004F51                 call    _gppi_raw
.text:00004F56                 add     esp, 0Ch
.text:00004F59                 mov     [ebp+var_8], eax
.text:00004F5C                 mov     edx, 2
.text:00004F61                 sub     edx, [ebp+var_8]
.text:00004F64                 push    edx
.text:00004F65                 push    0A0h ; 'á'
.text:00004F6A                 mov     eax, [ebp+arg_4]
.text:00004F6D                 push    eax
.text:00004F6E                 call    _conf_set_int
.text:00004F73                 add     esp, 0Ch
.text:00004F76                 push    0
.text:00004F78                 push    offset $SG86522 ; "BugHMAC2"
.text:00004F7D                 mov     ecx, [ebp+arg_0]
.text:00004F80                 push    ecx
.text:00004F81                 call    _gppi_raw
.text:00004F86                 add     esp, 0Ch
.text:00004F89                 mov     [ebp+var_98], eax
.text:00004F8F                 mov     edx, 2
.text:00004F94                 sub     edx, [ebp+var_98]
.text:00004F9A                 push    edx
.text:00004F9B                 push    9Ah ; 'Ü'
.text:00004FA0                 mov     eax, [ebp+arg_4]
.text:00004FA3                 push    eax
.text:00004FA4                 call    _conf_set_int
.text:00004FA9                 add     esp, 0Ch
.text:00004FAC                 mov     ecx, 2
.text:00004FB1                 sub     ecx, [ebp+var_98]
.text:00004FB7                 cmp     ecx, 2
.text:00004FBA                 jnz     short loc_4FF1
.text:00004FBC                 push    0
.text:00004FBE                 push    offset $SG86524 ; "BuggyMAC"
.text:00004FC3                 mov     edx, [ebp+arg_0]
.text:00004FC6                 push    edx
.text:00004FC7                 call    _gppi_raw
.text:00004FCC                 add     esp, 0Ch
.text:00004FCF                 mov     [ebp+var_98], eax
.text:00004FD5                 cmp     [ebp+var_98], 1
.text:00004FDC                 jnz     short loc_4FF1
.text:00004FDE                 push    0
.text:00004FE0                 push    9Ah ; 'Ü'
.text:00004FE5                 mov     eax, [ebp+arg_4]
.text:00004FE8                 push    eax
.text:00004FE9                 call    _conf_set_int
.text:00004FEE                 add     esp, 0Ch
.text:00004FF1
.text:00004FF1 loc_4FF1:                               ; CODE XREF: _load_open_settings+13FAj
.text:00004FF1                                         ; _load_open_settings+141Cj
.text:00004FF1                 push    0
.text:00004FF3                 push    offset $SG86526 ; "BugDeriveKey2"
.text:00004FF8                 mov     ecx, [ebp+arg_0]
.text:00004FFB                 push    ecx
.text:00004FFC                 call    _gppi_raw
.text:00005001                 add     esp, 0Ch
.text:00005004                 mov     [ebp+var_8], eax
.text:00005007                 mov     edx, 2
.text:0000500C                 sub     edx, [ebp+var_8]
.text:0000500F                 push    edx
.text:00005010                 push    9Bh ; '¢'
.text:00005015                 mov     eax, [ebp+arg_4]
.text:00005018                 push    eax
.text:00005019                 call    _conf_set_int
.text:0000501E                 add     esp, 0Ch
.text:00005021                 push    0
.text:00005023                 push    offset $SG86527 ; "BugRSAPad2"
.text:00005028                 mov     ecx, [ebp+arg_0]
.text:0000502B                 push    ecx
.text:0000502C                 call    _gppi_raw
.text:00005031                 add     esp, 0Ch
.text:00005034                 mov     [ebp+var_8], eax
.text:00005037                 mov     edx, 2
.text:0000503C                 sub     edx, [ebp+var_8]
.text:0000503F                 push    edx
.text:00005040                 push    9Ch ; '£'
.text:00005045                 mov     eax, [ebp+arg_4]
.text:00005048                 push    eax
.text:00005049                 call    _conf_set_int
.text:0000504E                 add     esp, 0Ch
.text:00005051                 push    0
.text:00005053                 push    offset $SG86528 ; "BugPKSessID2"
.text:00005058                 mov     ecx, [ebp+arg_0]
.text:0000505B                 push    ecx
.text:0000505C                 call    _gppi_raw
.text:00005061                 add     esp, 0Ch
.text:00005064                 mov     [ebp+var_8], eax
.text:00005067                 mov     edx, 2
.text:0000506C                 sub     edx, [ebp+var_8]
.text:0000506F                 push    edx
.text:00005070                 push    9Dh ; '¥'
.text:00005075                 mov     eax, [ebp+arg_4]
.text:00005078                 push    eax
.text:00005079                 call    _conf_set_int
.text:0000507E                 add     esp, 0Ch
.text:00005081                 push    0
.text:00005083                 push    offset $SG86529 ; "BugRekey2"
.text:00005088                 mov     ecx, [ebp+arg_0]
.text:0000508B                 push    ecx
.text:0000508C                 call    _gppi_raw
.text:00005091                 add     esp, 0Ch
.text:00005094                 mov     [ebp+var_8], eax
.text:00005097                 mov     edx, 2
.text:0000509C                 sub     edx, [ebp+var_8]
.text:0000509F                 push    edx
.text:000050A0                 push    9Eh ; 'P'
.text:000050A5                 mov     eax, [ebp+arg_4]
.text:000050A8                 push    eax
.text:000050A9                 call    _conf_set_int
.text:000050AE                 add     esp, 0Ch
.text:000050B1                 push    0
.text:000050B3                 push    offset $SG86530 ; "BugMaxPkt2"
.text:000050B8                 mov     ecx, [ebp+arg_0]
.text:000050BB                 push    ecx
.text:000050BC                 call    _gppi_raw
.text:000050C1                 add     esp, 0Ch
.text:000050C4                 mov     [ebp+var_8], eax
.text:000050C7                 mov     edx, 2
.text:000050CC                 sub     edx, [ebp+var_8]
.text:000050CF                 push    edx
.text:000050D0                 push    9Fh ; 'ƒ'
.text:000050D5                 mov     eax, [ebp+arg_4]
.text:000050D8                 push    eax
.text:000050D9                 call    _conf_set_int
.text:000050DE                 add     esp, 0Ch
.text:000050E1                 push    0
.text:000050E3                 push    offset $SG86531 ; "BugWinadj"
.text:000050E8                 mov     ecx, [ebp+arg_0]
.text:000050EB                 push    ecx
.text:000050EC                 call    _gppi_raw
.text:000050F1                 add     esp, 0Ch
.text:000050F4                 mov     [ebp+var_8], eax
.text:000050F7                 mov     edx, 2
.text:000050FC                 sub     edx, [ebp+var_8]
.text:000050FF                 push    edx
.text:00005100                 push    0A1h ; 'í'
.text:00005105                 mov     eax, [ebp+arg_4]
.text:00005108                 push    eax
.text:00005109                 call    _conf_set_int
.text:0000510E                 add     esp, 0Ch
.text:00005111                 push    0
.text:00005113                 push    offset $SG86532 ; "BugChanReq"
.text:00005118                 mov     ecx, [ebp+arg_0]
.text:0000511B                 push    ecx
.text:0000511C                 call    _gppi_raw
.text:00005121                 add     esp, 0Ch
.text:00005124                 mov     [ebp+var_8], eax
.text:00005127                 mov     edx, 2
.text:0000512C                 sub     edx, [ebp+var_8]
.text:0000512F                 push    edx
.text:00005130                 push    0A2h ; 'ó'
.text:00005135                 mov     eax, [ebp+arg_4]
.text:00005138                 push    eax
.text:00005139                 call    _conf_set_int
.text:0000513E                 add     esp, 0Ch
.text:00005141                 push    0
.text:00005143                 push    0A3h ; 'ú'
.text:00005148                 mov     ecx, [ebp+arg_4]
.text:0000514B                 push    ecx
.text:0000514C                 call    _conf_set_int
.text:00005151                 add     esp, 0Ch
.text:00005154                 push    0A8h ; '¿'
.text:00005159                 mov     edx, [ebp+arg_4]
.text:0000515C                 push    edx
.text:0000515D                 push    1
.text:0000515F                 push    offset $SG86533 ; "StampUtmp"
.text:00005164                 mov     eax, [ebp+arg_0]
.text:00005167                 push    eax
.text:00005168                 call    _gppi
.text:0000516D                 add     esp, 14h
.text:00005170                 push    0A9h ; '¬'
.text:00005175                 mov     ecx, [ebp+arg_4]
.text:00005178                 push    ecx
.text:00005179                 push    1
.text:0000517B                 push    offset $SG86534 ; "LoginShell"
.text:00005180                 mov     edx, [ebp+arg_0]
.text:00005183                 push    edx
.text:00005184                 call    _gppi
.text:00005189                 add     esp, 14h
.text:0000518C                 push    0AAh ; '¬'
.text:00005191                 mov     eax, [ebp+arg_4]
.text:00005194                 push    eax
.text:00005195                 push    0
.text:00005197                 push    offset $SG86535 ; "ScrollbarOnLeft"
.text:0000519C                 mov     ecx, [ebp+arg_0]
.text:0000519F                 push    ecx
.text:000051A0                 call    _gppi
.text:000051A5                 add     esp, 14h
.text:000051A8                 push    0ABh ; '½'
.text:000051AD                 mov     edx, [ebp+arg_4]
.text:000051B0                 push    edx
.text:000051B1                 push    0
.text:000051B3                 push    offset $SG86536 ; "ShadowBold"
.text:000051B8                 mov     eax, [ebp+arg_0]
.text:000051BB                 push    eax
.text:000051BC                 call    _gppi
.text:000051C1                 add     esp, 14h
.text:000051C4                 push    0ACh ; '¼'
.text:000051C9                 mov     ecx, [ebp+arg_4]
.text:000051CC                 push    ecx
.text:000051CD                 push    offset $SG86537 ; "BoldFont"
.text:000051D2                 mov     edx, [ebp+arg_0]
.text:000051D5                 push    edx
.text:000051D6                 call    _gppfont
.text:000051DB                 add     esp, 10h
.text:000051DE                 push    0ADh ; '¡'
.text:000051E3                 mov     eax, [ebp+arg_4]
.text:000051E6                 push    eax
.text:000051E7                 push    offset $SG86538 ; "WideFont"
.text:000051EC                 mov     ecx, [ebp+arg_0]
.text:000051EF                 push    ecx
.text:000051F0                 call    _gppfont
.text:000051F5                 add     esp, 10h
.text:000051F8                 push    0AEh ; '«'
.text:000051FD                 mov     edx, [ebp+arg_4]
.text:00005200                 push    edx
.text:00005201                 push    offset $SG86539 ; "WideBoldFont"
.text:00005206                 mov     eax, [ebp+arg_0]
.text:00005209                 push    eax
.text:0000520A                 call    _gppfont
.text:0000520F                 add     esp, 10h
.text:00005212                 push    0AFh ; '»'
.text:00005217                 mov     ecx, [ebp+arg_4]
.text:0000521A                 push    ecx
.text:0000521B                 push    1
.text:0000521D                 push    offset $SG86540 ; "ShadowBoldOffset"
.text:00005222                 mov     edx, [ebp+arg_0]
.text:00005225                 push    edx
.text:00005226                 call    _gppi
.text:0000522B                 add     esp, 14h
.text:0000522E                 push    37h ; '7'
.text:00005230                 mov     eax, [ebp+arg_4]
.text:00005233                 push    eax
.text:00005234                 push    offset $SG86541
.text:00005239                 push    offset $SG86542 ; "SerialLine"
.text:0000523E                 mov     ecx, [ebp+arg_0]
.text:00005241                 push    ecx
.text:00005242                 call    _gpps
.text:00005247                 add     esp, 14h
.text:0000524A                 push    38h ; '8'
.text:0000524C                 mov     edx, [ebp+arg_4]
.text:0000524F                 push    edx
.text:00005250                 push    2580h
.text:00005255                 push    offset $SG86543 ; "SerialSpeed"
.text:0000525A                 mov     eax, [ebp+arg_0]
.text:0000525D                 push    eax
.text:0000525E                 call    _gppi
.text:00005263                 add     esp, 14h
.text:00005266                 push    39h ; '9'
.text:00005268                 mov     ecx, [ebp+arg_4]
.text:0000526B                 push    ecx
.text:0000526C                 push    8
.text:0000526E                 push    offset $SG86544 ; "SerialDataBits"
.text:00005273                 mov     edx, [ebp+arg_0]
.text:00005276                 push    edx
.text:00005277                 call    _gppi
.text:0000527C                 add     esp, 14h
.text:0000527F                 push    3Ah ; ':'
.text:00005281                 mov     eax, [ebp+arg_4]
.text:00005284                 push    eax
.text:00005285                 push    2
.text:00005287                 push    offset $SG86545 ; "SerialStopHalfbits"
.text:0000528C                 mov     ecx, [ebp+arg_0]
.text:0000528F                 push    ecx
.text:00005290                 call    _gppi
.text:00005295                 add     esp, 14h
.text:00005298                 push    3Bh ; ';'
.text:0000529A                 mov     edx, [ebp+arg_4]
.text:0000529D                 push    edx
.text:0000529E                 push    0
.text:000052A0                 push    offset $SG86546 ; "SerialParity"
.text:000052A5                 mov     eax, [ebp+arg_0]
.text:000052A8                 push    eax
.text:000052A9                 call    _gppi
.text:000052AE                 add     esp, 14h
.text:000052B1                 push    3Ch ; '<'
.text:000052B3                 mov     ecx, [ebp+arg_4]
.text:000052B6                 push    ecx
.text:000052B7                 push    1
.text:000052B9                 push    offset $SG86547 ; "SerialFlowControl"
.text:000052BE                 mov     edx, [ebp+arg_0]
.text:000052C1                 push    edx
.text:000052C2                 call    _gppi
.text:000052C7                 add     esp, 14h
.text:000052CA                 push    0B1h ; '¦'
.text:000052CF                 mov     eax, [ebp+arg_4]
.text:000052D2                 push    eax
.text:000052D3                 push    offset $SG86548
.text:000052D8                 push    offset $SG86549 ; "WindowClass"
.text:000052DD                 mov     ecx, [ebp+arg_0]
.text:000052E0                 push    ecx
.text:000052E1                 call    _gpps
.text:000052E6                 add     esp, 14h
.text:000052E9                 push    0A4h ; 'ñ'
.text:000052EE                 mov     edx, [ebp+arg_4]
.text:000052F1                 push    edx
.text:000052F2                 push    0
.text:000052F4                 push    offset $SG86550 ; "ConnectionSharing"
.text:000052F9                 mov     eax, [ebp+arg_0]
.text:000052FC                 push    eax
.text:000052FD                 call    _gppi
.text:00005302                 add     esp, 14h
.text:00005305                 push    0A5h ; 'Ñ'
.text:0000530A                 mov     ecx, [ebp+arg_4]
.text:0000530D                 push    ecx
.text:0000530E                 push    1
.text:00005310                 push    offset $SG86551 ; "ConnectionSharingUpstream"
.text:00005315                 mov     edx, [ebp+arg_0]
.text:00005318                 push    edx
.text:00005319                 call    _gppi
.text:0000531E                 add     esp, 14h
.text:00005321                 push    0A6h ; 'ª'
.text:00005326                 mov     eax, [ebp+arg_4]
.text:00005329                 push    eax
.text:0000532A                 push    1
.text:0000532C                 push    offset $SG86552 ; "ConnectionSharingDownstream"
.text:00005331                 mov     ecx, [ebp+arg_0]
.text:00005334                 push    ecx
.text:00005335                 call    _gppi
.text:0000533A                 add     esp, 14h
.text:0000533D                 push    0A7h ; 'º'
.text:00005342                 mov     edx, [ebp+arg_4]
.text:00005345                 push    edx
.text:00005346                 push    offset $SG86553 ; "SSHManualHostKeys"
.text:0000534B                 mov     eax, [ebp+arg_0]
.text:0000534E                 push    eax
.text:0000534F                 call    _gppmap
.text:00005354                 add     esp, 10h
.text:00005357                 push    edx
.text:00005358                 mov     ecx, ebp
.text:0000535A                 push    eax
.text:0000535B                 lea     edx, $LN42
.text:00005361                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005366                 pop     eax
.text:00005367                 pop     edx
.text:00005368                 pop     edi
.text:00005369                 mov     ecx, [ebp+var_4]
.text:0000536C                 xor     ecx, ebp
.text:0000536E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00005373                 add     esp, 98h
.text:00005379                 cmp     ebp, esp
.text:0000537B                 call    __RTC_CheckEsp
.text:00005380                 mov     esp, ebp
.text:00005382                 pop     ebp
.text:00005383                 retn
.text:00005383 _load_open_settings endp
.text:00005383
.text:00005383 ; ---------------------------------------------------------------------------
.text:00005384 $LN42           dd 5                    ; DATA XREF: _load_open_settings+179Bo
.text:00005388                 dd offset $LN41
.text:0000538C $LN41           dd 0FFFFFFC4h, 14h      ; DATA XREF: .text:00005388o
.text:00005394                 dd offset $LN36
.text:00005398                 dd 0FFFFFFB4h, 4
.text:000053A0                 dd offset $LN37
.text:000053A4                 dd 0FFFFFFA8h, 4
.text:000053AC                 dd offset $LN38
.text:000053B0                 dd 0FFFFFF9Ch, 4
.text:000053B8                 dd offset $LN39
.text:000053BC                 dd 0FFFFFF80h, 14h
.text:000053C4                 dd offset $LN40
.text:000053C8 $LN40           dd 667562h              ; DATA XREF: .text:000053C4o
.text:000053CC $LN39           db 63h, 32h, 0          ; DATA XREF: .text:000053B8o
.text:000053CF $LN38           db 63h                  ; DATA XREF: .text:000053ACo
.text:000053D0                 db 31h, 0
.text:000053D2 $LN37           dw 3063h                ; DATA XREF: .text:000053A0o
.text:000053D4                 db 0
.text:000053D5 $LN36           db 62h, 75h, 66h        ; DATA XREF: .text:00005394o
.text:000053D8                 align 10h
.text:000053E0
.text:000053E0 ; =============== S U B R O U T I N E =======================================
.text:000053E0
.text:000053E0 ; Attributes: bp-based frame
.text:000053E0
.text:000053E0 _gpps_raw       proc near               ; CODE XREF: _load_open_settings+12Dp
.text:000053E0                                         ; _load_open_settings+E83p ...
.text:000053E0
.text:000053E0 var_8           = dword ptr -8
.text:000053E0 var_4           = dword ptr -4
.text:000053E0 arg_0           = dword ptr  8
.text:000053E0 arg_4           = dword ptr  0Ch
.text:000053E0 arg_8           = dword ptr  10h
.text:000053E0
.text:000053E0                 push    ebp
.text:000053E1                 mov     ebp, esp
.text:000053E3                 sub     esp, 8
.text:000053E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000053ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053F4                 mov     eax, [ebp+arg_4]
.text:000053F7                 push    eax
.text:000053F8                 mov     ecx, [ebp+arg_0]
.text:000053FB                 push    ecx
.text:000053FC                 call    _read_setting_s
.text:00005401                 add     esp, 8
.text:00005404                 mov     [ebp+var_4], eax
.text:00005407                 cmp     [ebp+var_4], 0
.text:0000540B                 jnz     short loc_541C
.text:0000540D                 mov     edx, [ebp+arg_4]
.text:00005410                 push    edx
.text:00005411                 call    _platform_default_s
.text:00005416                 add     esp, 4
.text:00005419                 mov     [ebp+var_4], eax
.text:0000541C
.text:0000541C loc_541C:                               ; CODE XREF: _gpps_raw+2Bj
.text:0000541C                 cmp     [ebp+var_4], 0
.text:00005420                 jnz     short loc_5446
.text:00005422                 cmp     [ebp+arg_8], 0
.text:00005426                 jz      short loc_5439
.text:00005428                 mov     eax, [ebp+arg_8]
.text:0000542B                 push    eax
.text:0000542C                 call    _dupstr
.text:00005431                 add     esp, 4
.text:00005434                 mov     [ebp+var_8], eax
.text:00005437                 jmp     short loc_5440
.text:00005439 ; ---------------------------------------------------------------------------
.text:00005439
.text:00005439 loc_5439:                               ; CODE XREF: _gpps_raw+46j
.text:00005439                 mov     [ebp+var_8], 0
.text:00005440
.text:00005440 loc_5440:                               ; CODE XREF: _gpps_raw+57j
.text:00005440                 mov     ecx, [ebp+var_8]
.text:00005443                 mov     [ebp+var_4], ecx
.text:00005446
.text:00005446 loc_5446:                               ; CODE XREF: _gpps_raw+40j
.text:00005446                 mov     eax, [ebp+var_4]
.text:00005449                 add     esp, 8
.text:0000544C                 cmp     ebp, esp
.text:0000544E                 call    __RTC_CheckEsp
.text:00005453                 mov     esp, ebp
.text:00005455                 pop     ebp
.text:00005456                 retn
.text:00005456 _gpps_raw       endp
.text:00005456
.text:00005456 ; ---------------------------------------------------------------------------
.text:00005457                 align 10h
.text:00005460
.text:00005460 ; =============== S U B R O U T I N E =======================================
.text:00005460
.text:00005460 ; Attributes: bp-based frame
.text:00005460
.text:00005460 _gpps           proc near               ; CODE XREF: _load_open_settings+83p
.text:00005460                                         ; _load_open_settings+2A4p ...
.text:00005460
.text:00005460 var_4           = dword ptr -4
.text:00005460 arg_0           = dword ptr  8
.text:00005460 arg_4           = dword ptr  0Ch
.text:00005460 arg_8           = dword ptr  10h
.text:00005460 arg_C           = dword ptr  14h
.text:00005460 arg_10          = dword ptr  18h
.text:00005460
.text:00005460                 push    ebp
.text:00005461                 mov     ebp, esp
.text:00005463                 push    ecx
.text:00005464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000546B                 mov     eax, [ebp+arg_8]
.text:0000546E                 push    eax
.text:0000546F                 mov     ecx, [ebp+arg_4]
.text:00005472                 push    ecx
.text:00005473                 mov     edx, [ebp+arg_0]
.text:00005476                 push    edx
.text:00005477                 call    _gpps_raw
.text:0000547C                 add     esp, 0Ch
.text:0000547F                 mov     [ebp+var_4], eax
.text:00005482                 mov     eax, [ebp+var_4]
.text:00005485                 push    eax
.text:00005486                 mov     ecx, [ebp+arg_10]
.text:00005489                 push    ecx
.text:0000548A                 mov     edx, [ebp+arg_C]
.text:0000548D                 push    edx
.text:0000548E                 call    _conf_set_str
.text:00005493                 add     esp, 0Ch
.text:00005496                 mov     eax, [ebp+var_4]
.text:00005499                 push    eax
.text:0000549A                 call    _safefree
.text:0000549F                 add     esp, 4
.text:000054A2                 add     esp, 4
.text:000054A5                 cmp     ebp, esp
.text:000054A7                 call    __RTC_CheckEsp
.text:000054AC                 mov     esp, ebp
.text:000054AE                 pop     ebp
.text:000054AF                 retn
.text:000054AF _gpps           endp
.text:000054AF
.text:000054B0
.text:000054B0 ; =============== S U B R O U T I N E =======================================
.text:000054B0
.text:000054B0 ; Attributes: bp-based frame
.text:000054B0
.text:000054B0 _gppfont        proc near               ; CODE XREF: _load_open_settings+D67p
.text:000054B0                                         ; _load_open_settings+1616p ...
.text:000054B0
.text:000054B0 var_4           = dword ptr -4
.text:000054B0 arg_0           = dword ptr  8
.text:000054B0 arg_4           = dword ptr  0Ch
.text:000054B0 arg_8           = dword ptr  10h
.text:000054B0 arg_C           = dword ptr  14h
.text:000054B0
.text:000054B0                 push    ebp
.text:000054B1                 mov     ebp, esp
.text:000054B3                 push    ecx
.text:000054B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054BB                 mov     eax, [ebp+arg_4]
.text:000054BE                 push    eax
.text:000054BF                 mov     ecx, [ebp+arg_0]
.text:000054C2                 push    ecx
.text:000054C3                 call    _read_setting_fontspec
.text:000054C8                 add     esp, 8
.text:000054CB                 mov     [ebp+var_4], eax
.text:000054CE                 cmp     [ebp+var_4], 0
.text:000054D2                 jnz     short loc_54E3
.text:000054D4                 mov     edx, [ebp+arg_4]
.text:000054D7                 push    edx
.text:000054D8                 call    _platform_default_fontspec
.text:000054DD                 add     esp, 4
.text:000054E0                 mov     [ebp+var_4], eax
.text:000054E3
.text:000054E3 loc_54E3:                               ; CODE XREF: _gppfont+22j
.text:000054E3                 mov     eax, [ebp+var_4]
.text:000054E6                 push    eax
.text:000054E7                 mov     ecx, [ebp+arg_C]
.text:000054EA                 push    ecx
.text:000054EB                 mov     edx, [ebp+arg_8]
.text:000054EE                 push    edx
.text:000054EF                 call    _conf_set_fontspec
.text:000054F4                 add     esp, 0Ch
.text:000054F7                 mov     eax, [ebp+var_4]
.text:000054FA                 push    eax
.text:000054FB                 call    _fontspec_free
.text:00005500                 add     esp, 4
.text:00005503                 add     esp, 4
.text:00005506                 cmp     ebp, esp
.text:00005508                 call    __RTC_CheckEsp
.text:0000550D                 mov     esp, ebp
.text:0000550F                 pop     ebp
.text:00005510                 retn
.text:00005510 _gppfont        endp
.text:00005510
.text:00005510 ; ---------------------------------------------------------------------------
.text:00005511                 align 10h
.text:00005520
.text:00005520 ; =============== S U B R O U T I N E =======================================
.text:00005520
.text:00005520 ; Attributes: bp-based frame
.text:00005520
.text:00005520 _gppfile        proc near               ; CODE XREF: _load_open_settings+9Ap
.text:00005520                                         ; _load_open_settings+7A3p ...
.text:00005520
.text:00005520 var_4           = dword ptr -4
.text:00005520 arg_0           = dword ptr  8
.text:00005520 arg_4           = dword ptr  0Ch
.text:00005520 arg_8           = dword ptr  10h
.text:00005520 arg_C           = dword ptr  14h
.text:00005520
.text:00005520                 push    ebp
.text:00005521                 mov     ebp, esp
.text:00005523                 push    ecx
.text:00005524                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000552B                 mov     eax, [ebp+arg_4]
.text:0000552E                 push    eax
.text:0000552F                 mov     ecx, [ebp+arg_0]
.text:00005532                 push    ecx
.text:00005533                 call    _read_setting_filename
.text:00005538                 add     esp, 8
.text:0000553B                 mov     [ebp+var_4], eax
.text:0000553E                 cmp     [ebp+var_4], 0
.text:00005542                 jnz     short loc_5553
.text:00005544                 mov     edx, [ebp+arg_4]
.text:00005547                 push    edx
.text:00005548                 call    _platform_default_filename
.text:0000554D                 add     esp, 4
.text:00005550                 mov     [ebp+var_4], eax
.text:00005553
.text:00005553 loc_5553:                               ; CODE XREF: _gppfile+22j
.text:00005553                 mov     eax, [ebp+var_4]
.text:00005556                 push    eax
.text:00005557                 mov     ecx, [ebp+arg_C]
.text:0000555A                 push    ecx
.text:0000555B                 mov     edx, [ebp+arg_8]
.text:0000555E                 push    edx
.text:0000555F                 call    _conf_set_filename
.text:00005564                 add     esp, 0Ch
.text:00005567                 mov     eax, [ebp+var_4]
.text:0000556A                 push    eax
.text:0000556B                 call    _filename_free
.text:00005570                 add     esp, 4
.text:00005573                 add     esp, 4
.text:00005576                 cmp     ebp, esp
.text:00005578                 call    __RTC_CheckEsp
.text:0000557D                 mov     esp, ebp
.text:0000557F                 pop     ebp
.text:00005580                 retn
.text:00005580 _gppfile        endp
.text:00005580
.text:00005580 ; ---------------------------------------------------------------------------
.text:00005581                 align 10h
.text:00005590
.text:00005590 ; =============== S U B R O U T I N E =======================================
.text:00005590
.text:00005590 ; Attributes: bp-based frame
.text:00005590
.text:00005590 _gppi_raw       proc near               ; CODE XREF: _load_open_settings+1D9p
.text:00005590                                         ; _load_open_settings+225p ...
.text:00005590
.text:00005590 arg_0           = dword ptr  8
.text:00005590 arg_4           = dword ptr  0Ch
.text:00005590 arg_8           = dword ptr  10h
.text:00005590
.text:00005590                 push    ebp
.text:00005591                 mov     ebp, esp
.text:00005593                 mov     eax, [ebp+arg_8]
.text:00005596                 push    eax
.text:00005597                 mov     ecx, [ebp+arg_4]
.text:0000559A                 push    ecx
.text:0000559B                 call    _platform_default_i
.text:000055A0                 add     esp, 8
.text:000055A3                 mov     [ebp+arg_8], eax
.text:000055A6                 mov     edx, [ebp+arg_8]
.text:000055A9                 push    edx
.text:000055AA                 mov     eax, [ebp+arg_4]
.text:000055AD                 push    eax
.text:000055AE                 mov     ecx, [ebp+arg_0]
.text:000055B1                 push    ecx
.text:000055B2                 call    _read_setting_i
.text:000055B7                 add     esp, 0Ch
.text:000055BA                 cmp     ebp, esp
.text:000055BC                 call    __RTC_CheckEsp
.text:000055C1                 pop     ebp
.text:000055C2                 retn
.text:000055C2 _gppi_raw       endp
.text:000055C2
.text:000055C2 ; ---------------------------------------------------------------------------
.text:000055C3                 align 10h
.text:000055D0
.text:000055D0 ; =============== S U B R O U T I N E =======================================
.text:000055D0
.text:000055D0 ; Attributes: bp-based frame
.text:000055D0
.text:000055D0 _gppi           proc near               ; CODE XREF: _load_open_settings+B3p
.text:000055D0                                         ; _load_open_settings+CCp ...
.text:000055D0
.text:000055D0 arg_0           = dword ptr  8
.text:000055D0 arg_4           = dword ptr  0Ch
.text:000055D0 arg_8           = dword ptr  10h
.text:000055D0 arg_C           = dword ptr  14h
.text:000055D0 arg_10          = dword ptr  18h
.text:000055D0
.text:000055D0                 push    ebp
.text:000055D1                 mov     ebp, esp
.text:000055D3                 mov     eax, [ebp+arg_8]
.text:000055D6                 push    eax
.text:000055D7                 mov     ecx, [ebp+arg_4]
.text:000055DA                 push    ecx
.text:000055DB                 mov     edx, [ebp+arg_0]
.text:000055DE                 push    edx
.text:000055DF                 call    _gppi_raw
.text:000055E4                 add     esp, 0Ch
.text:000055E7                 push    eax
.text:000055E8                 mov     eax, [ebp+arg_10]
.text:000055EB                 push    eax
.text:000055EC                 mov     ecx, [ebp+arg_C]
.text:000055EF                 push    ecx
.text:000055F0                 call    _conf_set_int
.text:000055F5                 add     esp, 0Ch
.text:000055F8                 cmp     ebp, esp
.text:000055FA                 call    __RTC_CheckEsp
.text:000055FF                 pop     ebp
.text:00005600                 retn
.text:00005600 _gppi           endp
.text:00005600
.text:00005600 ; ---------------------------------------------------------------------------
.text:00005601                 align 10h
.text:00005610
.text:00005610 ; =============== S U B R O U T I N E =======================================
.text:00005610
.text:00005610 ; Attributes: bp-based frame
.text:00005610
.text:00005610 _gppmap         proc near               ; CODE XREF: _load_open_settings+2D7p
.text:00005610                                         ; _load_open_settings+509p ...
.text:00005610
.text:00005610 var_1C          = dword ptr -1Ch
.text:00005610 var_18          = dword ptr -18h
.text:00005610 var_14          = dword ptr -14h
.text:00005610 var_10          = dword ptr -10h
.text:00005610 var_C           = dword ptr -0Ch
.text:00005610 var_8           = dword ptr -8
.text:00005610 Str             = dword ptr -4
.text:00005610 arg_0           = dword ptr  8
.text:00005610 arg_4           = dword ptr  0Ch
.text:00005610 arg_8           = dword ptr  10h
.text:00005610 arg_C           = dword ptr  14h
.text:00005610
.text:00005610                 push    ebp
.text:00005611                 mov     ebp, esp
.text:00005613                 sub     esp, 1Ch
.text:00005616                 mov     eax, 0CCCCCCCCh
.text:0000561B                 mov     [ebp+var_1C], eax
.text:0000561E                 mov     [ebp+var_18], eax
.text:00005621                 mov     [ebp+var_14], eax
.text:00005624                 mov     [ebp+var_10], eax
.text:00005627                 mov     [ebp+var_C], eax
.text:0000562A                 mov     [ebp+var_8], eax
.text:0000562D                 mov     [ebp+Str], eax
.text:00005630
.text:00005630 loc_5630:                               ; CODE XREF: _gppmap+4Fj
.text:00005630                 push    0
.text:00005632                 mov     eax, [ebp+arg_C]
.text:00005635                 push    eax
.text:00005636                 mov     ecx, [ebp+arg_8]
.text:00005639                 push    ecx
.text:0000563A                 call    _conf_get_str_nthstrkey
.text:0000563F                 add     esp, 0Ch
.text:00005642                 mov     [ebp+var_10], eax
.text:00005645                 cmp     [ebp+var_10], 0
.text:00005649                 jz      short loc_5661
.text:0000564B                 mov     edx, [ebp+var_10]
.text:0000564E                 push    edx
.text:0000564F                 mov     eax, [ebp+arg_C]
.text:00005652                 push    eax
.text:00005653                 mov     ecx, [ebp+arg_8]
.text:00005656                 push    ecx
.text:00005657                 call    _conf_del_str_str
.text:0000565C                 add     esp, 0Ch
.text:0000565F                 jmp     short loc_5630
.text:00005661 ; ---------------------------------------------------------------------------
.text:00005661
.text:00005661 loc_5661:                               ; CODE XREF: _gppmap+39j
.text:00005661                 push    0
.text:00005663                 mov     edx, [ebp+arg_4]
.text:00005666                 push    edx
.text:00005667                 mov     eax, [ebp+arg_0]
.text:0000566A                 push    eax
.text:0000566B                 call    _gpps_raw
.text:00005670                 add     esp, 0Ch
.text:00005673                 mov     [ebp+Str], eax
.text:00005676                 cmp     [ebp+Str], 0
.text:0000567A                 jnz     short loc_5683
.text:0000567C                 xor     eax, eax
.text:0000567E                 jmp     loc_57C5
.text:00005683 ; ---------------------------------------------------------------------------
.text:00005683
.text:00005683 loc_5683:                               ; CODE XREF: _gppmap+6Aj
.text:00005683                 mov     ecx, [ebp+Str]
.text:00005686                 mov     [ebp+var_8], ecx
.text:00005689
.text:00005689 loc_5689:                               ; CODE XREF: _gppmap:loc_57AFj
.text:00005689                 mov     edx, [ebp+var_8]
.text:0000568C                 movsx   eax, byte ptr [edx]
.text:0000568F                 test    eax, eax
.text:00005691                 jz      loc_57B4
.text:00005697                 mov     ecx, [ebp+Str]
.text:0000569A                 mov     [ebp+var_C], ecx
.text:0000569D                 mov     [ebp+var_14], 0
.text:000056A4
.text:000056A4 loc_56A4:                               ; CODE XREF: _gppmap:loc_570Dj
.text:000056A4                 mov     edx, [ebp+var_8]
.text:000056A7                 movsx   eax, byte ptr [edx]
.text:000056AA                 test    eax, eax
.text:000056AC                 jz      short loc_570F
.text:000056AE                 mov     ecx, [ebp+var_8]
.text:000056B1                 movsx   edx, byte ptr [ecx]
.text:000056B4                 cmp     edx, 2Ch ; ','
.text:000056B7                 jz      short loc_570F
.text:000056B9                 mov     eax, [ebp+var_8]
.text:000056BC                 movsx   ecx, byte ptr [eax]
.text:000056BF                 mov     [ebp+var_18], ecx
.text:000056C2                 mov     edx, [ebp+var_8]
.text:000056C5                 add     edx, 1
.text:000056C8                 mov     [ebp+var_8], edx
.text:000056CB                 cmp     [ebp+var_18], 3Dh ; '='
.text:000056CF                 jnz     short loc_56D8
.text:000056D1                 mov     [ebp+var_18], 0
.text:000056D8
.text:000056D8 loc_56D8:                               ; CODE XREF: _gppmap+BFj
.text:000056D8                 cmp     [ebp+var_18], 5Ch ; '\'
.text:000056DC                 jnz     short loc_56F0
.text:000056DE                 mov     eax, [ebp+var_8]
.text:000056E1                 movsx   ecx, byte ptr [eax]
.text:000056E4                 mov     [ebp+var_18], ecx
.text:000056E7                 mov     edx, [ebp+var_8]
.text:000056EA                 add     edx, 1
.text:000056ED                 mov     [ebp+var_8], edx
.text:000056F0
.text:000056F0 loc_56F0:                               ; CODE XREF: _gppmap+CCj
.text:000056F0                 mov     eax, [ebp+var_C]
.text:000056F3                 mov     cl, byte ptr [ebp+var_18]
.text:000056F6                 mov     [eax], cl
.text:000056F8                 mov     edx, [ebp+var_C]
.text:000056FB                 add     edx, 1
.text:000056FE                 mov     [ebp+var_C], edx
.text:00005701                 cmp     [ebp+var_18], 0
.text:00005705                 jnz     short loc_570D
.text:00005707                 mov     eax, [ebp+var_C]
.text:0000570A                 mov     [ebp+var_14], eax
.text:0000570D
.text:0000570D loc_570D:                               ; CODE XREF: _gppmap+F5j
.text:0000570D                 jmp     short loc_56A4
.text:0000570F ; ---------------------------------------------------------------------------
.text:0000570F
.text:0000570F loc_570F:                               ; CODE XREF: _gppmap+9Cj
.text:0000570F                                         ; _gppmap+A7j
.text:0000570F                 mov     ecx, [ebp+var_8]
.text:00005712                 movsx   edx, byte ptr [ecx]
.text:00005715                 cmp     edx, 2Ch ; ','
.text:00005718                 jnz     short loc_5723
.text:0000571A                 mov     eax, [ebp+var_8]
.text:0000571D                 add     eax, 1
.text:00005720                 mov     [ebp+var_8], eax
.text:00005723
.text:00005723 loc_5723:                               ; CODE XREF: _gppmap+108j
.text:00005723                 cmp     [ebp+var_14], 0
.text:00005727                 jnz     short loc_572F
.text:00005729                 mov     ecx, [ebp+var_C]
.text:0000572C                 mov     [ebp+var_14], ecx
.text:0000572F
.text:0000572F loc_572F:                               ; CODE XREF: _gppmap+117j
.text:0000572F                 mov     edx, [ebp+var_C]
.text:00005732                 mov     byte ptr [edx], 0
.text:00005735                 cmp     [ebp+arg_C], 96h ; 'û'
.text:0000573C                 jnz     short loc_5797
.text:0000573E                 push    44h ; 'D'       ; Val
.text:00005740                 mov     eax, [ebp+Str]
.text:00005743                 push    eax             ; Str
.text:00005744                 call    _strchr
.text:00005749                 add     esp, 8
.text:0000574C                 test    eax, eax
.text:0000574E                 jz      short loc_5797
.text:00005750                 mov     ecx, [ebp+Str]
.text:00005753                 push    ecx
.text:00005754                 call    _dupstr
.text:00005759                 add     esp, 4
.text:0000575C                 mov     [ebp+var_1C], eax
.text:0000575F                 push    44h ; 'D'       ; Val
.text:00005761                 mov     edx, [ebp+var_1C]
.text:00005764                 push    edx             ; Str
.text:00005765                 call    _strchr
.text:0000576A                 add     esp, 8
.text:0000576D                 mov     byte ptr [eax], 4Ch ; 'L'
.text:00005770                 push    offset $SG85860
.text:00005775                 mov     eax, [ebp+var_1C]
.text:00005778                 push    eax
.text:00005779                 mov     ecx, [ebp+arg_C]
.text:0000577C                 push    ecx
.text:0000577D                 mov     edx, [ebp+arg_8]
.text:00005780                 push    edx
.text:00005781                 call    _conf_set_str_str
.text:00005786                 add     esp, 10h
.text:00005789                 mov     eax, [ebp+var_1C]
.text:0000578C                 push    eax
.text:0000578D                 call    _safefree
.text:00005792                 add     esp, 4
.text:00005795                 jmp     short loc_57AF
.text:00005797 ; ---------------------------------------------------------------------------
.text:00005797
.text:00005797 loc_5797:                               ; CODE XREF: _gppmap+12Cj
.text:00005797                                         ; _gppmap+13Ej
.text:00005797                 mov     ecx, [ebp+var_14]
.text:0000579A                 push    ecx
.text:0000579B                 mov     edx, [ebp+Str]
.text:0000579E                 push    edx
.text:0000579F                 mov     eax, [ebp+arg_C]
.text:000057A2                 push    eax
.text:000057A3                 mov     ecx, [ebp+arg_8]
.text:000057A6                 push    ecx
.text:000057A7                 call    _conf_set_str_str
.text:000057AC                 add     esp, 10h
.text:000057AF
.text:000057AF loc_57AF:                               ; CODE XREF: _gppmap+185j
.text:000057AF                 jmp     loc_5689
.text:000057B4 ; ---------------------------------------------------------------------------
.text:000057B4
.text:000057B4 loc_57B4:                               ; CODE XREF: _gppmap+81j
.text:000057B4                 mov     edx, [ebp+Str]
.text:000057B7                 push    edx
.text:000057B8                 call    _safefree
.text:000057BD                 add     esp, 4
.text:000057C0                 mov     eax, 1
.text:000057C5
.text:000057C5 loc_57C5:                               ; CODE XREF: _gppmap+6Ej
.text:000057C5                 add     esp, 1Ch
.text:000057C8                 cmp     ebp, esp
.text:000057CA                 call    __RTC_CheckEsp
.text:000057CF                 mov     esp, ebp
.text:000057D1                 pop     ebp
.text:000057D2                 retn
.text:000057D2 _gppmap         endp
.text:000057D2
.text:000057D2 ; ---------------------------------------------------------------------------
.text:000057D3                 align 10h
.text:000057E0
.text:000057E0 ; =============== S U B R O U T I N E =======================================
.text:000057E0
.text:000057E0 ; Attributes: bp-based frame
.text:000057E0
.text:000057E0 _gprefs         proc near               ; CODE XREF: _load_open_settings+613p
.text:000057E0                                         ; _load_open_settings+664p ...
.text:000057E0
.text:000057E0 var_2C          = dword ptr -2Ch
.text:000057E0 var_28          = dword ptr -28h
.text:000057E0 var_24          = dword ptr -24h
.text:000057E0 var_20          = dword ptr -20h
.text:000057E0 var_1C          = dword ptr -1Ch
.text:000057E0 var_18          = dword ptr -18h
.text:000057E0 var_14          = dword ptr -14h
.text:000057E0 var_10          = dword ptr -10h
.text:000057E0 Str2            = dword ptr -0Ch
.text:000057E0 var_8           = dword ptr -8
.text:000057E0 var_4           = dword ptr -4
.text:000057E0 arg_0           = dword ptr  8
.text:000057E0 arg_4           = dword ptr  0Ch
.text:000057E0 arg_8           = dword ptr  10h
.text:000057E0 arg_C           = dword ptr  14h
.text:000057E0 arg_10          = dword ptr  18h
.text:000057E0 arg_14          = dword ptr  1Ch
.text:000057E0 arg_18          = dword ptr  20h
.text:000057E0
.text:000057E0                 push    ebp
.text:000057E1                 mov     ebp, esp
.text:000057E3                 sub     esp, 2Ch
.text:000057E6                 push    edi
.text:000057E7                 lea     edi, [ebp+var_2C]
.text:000057EA                 mov     ecx, 0Bh
.text:000057EF                 mov     eax, 0CCCCCCCCh
.text:000057F4                 rep stosd
.text:000057F6                 mov     [ebp+var_24], 0
.text:000057FD                 mov     eax, [ebp+arg_8]
.text:00005800                 push    eax
.text:00005801                 mov     ecx, [ebp+arg_4]
.text:00005804                 push    ecx
.text:00005805                 mov     edx, [ebp+arg_0]
.text:00005808                 push    edx
.text:00005809                 call    _gpps_raw
.text:0000580E                 add     esp, 0Ch
.text:00005811                 mov     [ebp+var_4], eax
.text:00005814                 mov     [ebp+var_18], 0
.text:0000581B                 mov     eax, [ebp+var_4]
.text:0000581E                 mov     [ebp+var_8], eax
.text:00005821
.text:00005821 loc_5821:                               ; CODE XREF: _gprefs:loc_58F9j
.text:00005821                 mov     ecx, 1
.text:00005826                 test    ecx, ecx
.text:00005828                 jz      loc_58FE
.text:0000582E
.text:0000582E loc_582E:                               ; CODE XREF: _gprefs+6Cj
.text:0000582E                 mov     edx, [ebp+var_8]
.text:00005831                 movsx   eax, byte ptr [edx]
.text:00005834                 test    eax, eax
.text:00005836                 jz      short loc_584E
.text:00005838                 mov     ecx, [ebp+var_8]
.text:0000583B                 movsx   edx, byte ptr [ecx]
.text:0000583E                 cmp     edx, 2Ch ; ','
.text:00005841                 jnz     short loc_584E
.text:00005843                 mov     eax, [ebp+var_8]
.text:00005846                 add     eax, 1
.text:00005849                 mov     [ebp+var_8], eax
.text:0000584C                 jmp     short loc_582E
.text:0000584E ; ---------------------------------------------------------------------------
.text:0000584E
.text:0000584E loc_584E:                               ; CODE XREF: _gprefs+56j
.text:0000584E                                         ; _gprefs+61j
.text:0000584E                 mov     ecx, [ebp+var_8]
.text:00005851                 movsx   edx, byte ptr [ecx]
.text:00005854                 test    edx, edx
.text:00005856                 jnz     short loc_585D
.text:00005858                 jmp     loc_58FE
.text:0000585D ; ---------------------------------------------------------------------------
.text:0000585D
.text:0000585D loc_585D:                               ; CODE XREF: _gprefs+76j
.text:0000585D                 mov     eax, [ebp+var_8]
.text:00005860                 mov     [ebp+Str2], eax
.text:00005863
.text:00005863 loc_5863:                               ; CODE XREF: _gprefs+A1j
.text:00005863                 mov     ecx, [ebp+var_8]
.text:00005866                 movsx   edx, byte ptr [ecx]
.text:00005869                 test    edx, edx
.text:0000586B                 jz      short loc_5883
.text:0000586D                 mov     eax, [ebp+var_8]
.text:00005870                 movsx   ecx, byte ptr [eax]
.text:00005873                 cmp     ecx, 2Ch ; ','
.text:00005876                 jz      short loc_5883
.text:00005878                 mov     edx, [ebp+var_8]
.text:0000587B                 add     edx, 1
.text:0000587E                 mov     [ebp+var_8], edx
.text:00005881                 jmp     short loc_5863
.text:00005883 ; ---------------------------------------------------------------------------
.text:00005883
.text:00005883 loc_5883:                               ; CODE XREF: _gprefs+8Bj
.text:00005883                                         ; _gprefs+96j
.text:00005883                 mov     eax, [ebp+var_8]
.text:00005886                 movsx   ecx, byte ptr [eax]
.text:00005889                 test    ecx, ecx
.text:0000588B                 jz      short loc_589C
.text:0000588D                 mov     edx, [ebp+var_8]
.text:00005890                 mov     byte ptr [edx], 0
.text:00005893                 mov     eax, [ebp+var_8]
.text:00005896                 add     eax, 1
.text:00005899                 mov     [ebp+var_8], eax
.text:0000589C
.text:0000589C loc_589C:                               ; CODE XREF: _gprefs+ABj
.text:0000589C                 mov     ecx, [ebp+Str2]
.text:0000589F                 push    ecx             ; Str2
.text:000058A0                 mov     edx, [ebp+arg_10]
.text:000058A3                 push    edx             ; int
.text:000058A4                 mov     eax, [ebp+arg_C]
.text:000058A7                 push    eax             ; int
.text:000058A8                 call    _key2val
.text:000058AD                 add     esp, 0Ch
.text:000058B0                 mov     [ebp+var_1C], eax
.text:000058B3                 cmp     [ebp+var_1C], 0FFFFFFFFh
.text:000058B7                 jz      short loc_58F9
.text:000058B9                 mov     edx, 1
.text:000058BE                 mov     ecx, [ebp+var_1C]
.text:000058C1                 shl     edx, cl
.text:000058C3                 and     edx, [ebp+var_24]
.text:000058C6                 jnz     short loc_58F9
.text:000058C8                 mov     eax, 1
.text:000058CD                 mov     ecx, [ebp+var_1C]
.text:000058D0                 shl     eax, cl
.text:000058D2                 or      eax, [ebp+var_24]
.text:000058D5                 mov     [ebp+var_24], eax
.text:000058D8                 mov     ecx, [ebp+var_1C]
.text:000058DB                 push    ecx
.text:000058DC                 mov     edx, [ebp+var_18]
.text:000058DF                 push    edx
.text:000058E0                 mov     eax, [ebp+arg_18]
.text:000058E3                 push    eax
.text:000058E4                 mov     ecx, [ebp+arg_14]
.text:000058E7                 push    ecx
.text:000058E8                 call    _conf_set_int_int
.text:000058ED                 add     esp, 10h
.text:000058F0                 mov     edx, [ebp+var_18]
.text:000058F3                 add     edx, 1
.text:000058F6                 mov     [ebp+var_18], edx
.text:000058F9
.text:000058F9 loc_58F9:                               ; CODE XREF: _gprefs+D7j
.text:000058F9                                         ; _gprefs+E6j
.text:000058F9                 jmp     loc_5821
.text:000058FE ; ---------------------------------------------------------------------------
.text:000058FE
.text:000058FE loc_58FE:                               ; CODE XREF: _gprefs+48j
.text:000058FE                                         ; _gprefs+78j
.text:000058FE                 mov     eax, [ebp+var_4]
.text:00005901                 push    eax
.text:00005902                 call    _safefree
.text:00005907                 add     esp, 4
.text:0000590A
.text:0000590A loc_590A:                               ; CODE XREF: _gprefs:loc_5AE1j
.text:0000590A                 mov     ecx, [ebp+var_18]
.text:0000590D                 cmp     ecx, [ebp+arg_10]
.text:00005910                 jge     loc_5AE6
.text:00005916                 mov     [ebp+var_10], 0
.text:0000591D                 jmp     short loc_5928
.text:0000591F ; ---------------------------------------------------------------------------
.text:0000591F
.text:0000591F loc_591F:                               ; CODE XREF: _gprefs+1C1j
.text:0000591F                                         ; _gprefs:loc_5ADCj
.text:0000591F                 mov     edx, [ebp+var_10]
.text:00005922                 add     edx, 1
.text:00005925                 mov     [ebp+var_10], edx
.text:00005928
.text:00005928 loc_5928:                               ; CODE XREF: _gprefs+13Dj
.text:00005928                 mov     eax, [ebp+var_10]
.text:0000592B                 cmp     eax, [ebp+arg_10]
.text:0000592E                 jge     loc_5AE1
.text:00005934                 mov     ecx, [ebp+var_10]
.text:00005937                 shl     ecx, 4
.text:0000593A                 mov     edx, [ebp+arg_C]
.text:0000593D                 cmp     dword ptr [edx+ecx+4], 20h ; ' '
.text:00005942                 jl      short loc_595B
.text:00005944                 push    15Ah            ; Line
.text:00005949                 push    offset $SG85984 ; "..\\..\\..\\settings.c"
.text:0000594E                 push    offset $SG85985 ; "mapping[i].v < 32"
.text:00005953                 call    __wassert
.text:00005958 ; ---------------------------------------------------------------------------
.text:00005958                 add     esp, 0Ch
.text:0000595B
.text:0000595B loc_595B:                               ; CODE XREF: _gprefs+162j
.text:0000595B                 mov     ecx, [ebp+var_10]
.text:0000595E                 shl     ecx, 4
.text:00005961                 mov     edx, [ebp+arg_C]
.text:00005964                 mov     eax, 1
.text:00005969                 mov     ecx, [edx+ecx+4]
.text:0000596D                 shl     eax, cl
.text:0000596F                 and     eax, [ebp+var_24]
.text:00005972                 jnz     loc_5ADC
.text:00005978                 mov     ecx, [ebp+var_10]
.text:0000597B                 shl     ecx, 4
.text:0000597E                 mov     edx, [ebp+arg_C]
.text:00005981                 cmp     dword ptr [edx+ecx+8], 0FFFFFFFFh
.text:00005986                 jz      short loc_59A6
.text:00005988                 mov     eax, [ebp+var_10]
.text:0000598B                 shl     eax, 4
.text:0000598E                 mov     ecx, [ebp+arg_C]
.text:00005991                 mov     edx, 1
.text:00005996                 mov     ecx, [ecx+eax+8]
.text:0000599A                 shl     edx, cl
.text:0000599C                 and     edx, [ebp+var_24]
.text:0000599F                 jnz     short loc_59A6
.text:000059A1                 jmp     loc_591F
.text:000059A6 ; ---------------------------------------------------------------------------
.text:000059A6
.text:000059A6 loc_59A6:                               ; CODE XREF: _gprefs+1A6j
.text:000059A6                                         ; _gprefs+1BFj
.text:000059A6                 mov     eax, [ebp+var_10]
.text:000059A9                 shl     eax, 4
.text:000059AC                 mov     ecx, [ebp+arg_C]
.text:000059AF                 cmp     dword ptr [ecx+eax+8], 0FFFFFFFFh
.text:000059B4                 jnz     short loc_59E0
.text:000059B6                 mov     edx, [ebp+var_10]
.text:000059B9                 shl     edx, 4
.text:000059BC                 mov     eax, [ebp+arg_C]
.text:000059BF                 cmp     dword ptr [eax+edx+0Ch], 0
.text:000059C4                 jge     short loc_59CE
.text:000059C6                 mov     ecx, [ebp+var_18]
.text:000059C9                 mov     [ebp+var_28], ecx
.text:000059CC                 jmp     short loc_59D5
.text:000059CE ; ---------------------------------------------------------------------------
.text:000059CE
.text:000059CE loc_59CE:                               ; CODE XREF: _gprefs+1E4j
.text:000059CE                 mov     [ebp+var_28], 0
.text:000059D5
.text:000059D5 loc_59D5:                               ; CODE XREF: _gprefs+1ECj
.text:000059D5                 mov     edx, [ebp+var_28]
.text:000059D8                 mov     [ebp+var_20], edx
.text:000059DB                 jmp     loc_5A67
.text:000059E0 ; ---------------------------------------------------------------------------
.text:000059E0
.text:000059E0 loc_59E0:                               ; CODE XREF: _gprefs+1D4j
.text:000059E0                 mov     [ebp+var_14], 0
.text:000059E7                 jmp     short loc_59F2
.text:000059E9 ; ---------------------------------------------------------------------------
.text:000059E9
.text:000059E9 loc_59E9:                               ; CODE XREF: _gprefs:loc_5A1Fj
.text:000059E9                 mov     eax, [ebp+var_14]
.text:000059EC                 add     eax, 1
.text:000059EF                 mov     [ebp+var_14], eax
.text:000059F2
.text:000059F2 loc_59F2:                               ; CODE XREF: _gprefs+207j
.text:000059F2                 mov     ecx, [ebp+var_14]
.text:000059F5                 cmp     ecx, [ebp+var_18]
.text:000059F8                 jge     short loc_5A21
.text:000059FA                 mov     edx, [ebp+var_14]
.text:000059FD                 push    edx
.text:000059FE                 mov     eax, [ebp+arg_18]
.text:00005A01                 push    eax
.text:00005A02                 mov     ecx, [ebp+arg_14]
.text:00005A05                 push    ecx
.text:00005A06                 call    _conf_get_int_int
.text:00005A0B                 add     esp, 0Ch
.text:00005A0E                 mov     edx, [ebp+var_10]
.text:00005A11                 shl     edx, 4
.text:00005A14                 mov     ecx, [ebp+arg_C]
.text:00005A17                 cmp     eax, [ecx+edx+8]
.text:00005A1B                 jnz     short loc_5A1F
.text:00005A1D                 jmp     short loc_5A21
.text:00005A1F ; ---------------------------------------------------------------------------
.text:00005A1F
.text:00005A1F loc_5A1F:                               ; CODE XREF: _gprefs+23Bj
.text:00005A1F                 jmp     short loc_59E9
.text:00005A21 ; ---------------------------------------------------------------------------
.text:00005A21
.text:00005A21 loc_5A21:                               ; CODE XREF: _gprefs+218j
.text:00005A21                                         ; _gprefs+23Dj
.text:00005A21                 mov     edx, [ebp+var_14]
.text:00005A24                 cmp     edx, [ebp+var_18]
.text:00005A27                 jl      short loc_5A40
.text:00005A29                 push    16Eh            ; Line
.text:00005A2E                 push    offset $SG85995 ; "..\\..\\..\\settings.c"
.text:00005A33                 push    offset $SG85996 ; "j < n"
.text:00005A38                 call    __wassert
.text:00005A3D ; ---------------------------------------------------------------------------
.text:00005A3D                 add     esp, 0Ch
.text:00005A40
.text:00005A40 loc_5A40:                               ; CODE XREF: _gprefs+247j
.text:00005A40                 mov     ecx, [ebp+var_10]
.text:00005A43                 shl     ecx, 4
.text:00005A46                 mov     edx, [ebp+arg_C]
.text:00005A49                 cmp     dword ptr [edx+ecx+0Ch], 0
.text:00005A4E                 jge     short loc_5A58
.text:00005A50                 mov     eax, [ebp+var_14]
.text:00005A53                 mov     [ebp+var_2C], eax
.text:00005A56                 jmp     short loc_5A61
.text:00005A58 ; ---------------------------------------------------------------------------
.text:00005A58
.text:00005A58 loc_5A58:                               ; CODE XREF: _gprefs+26Ej
.text:00005A58                 mov     ecx, [ebp+var_14]
.text:00005A5B                 add     ecx, 1
.text:00005A5E                 mov     [ebp+var_2C], ecx
.text:00005A61
.text:00005A61 loc_5A61:                               ; CODE XREF: _gprefs+276j
.text:00005A61                 mov     edx, [ebp+var_2C]
.text:00005A64                 mov     [ebp+var_20], edx
.text:00005A67
.text:00005A67 loc_5A67:                               ; CODE XREF: _gprefs+1FBj
.text:00005A67                 mov     eax, [ebp+var_18]
.text:00005A6A                 sub     eax, 1
.text:00005A6D                 mov     [ebp+var_14], eax
.text:00005A70                 jmp     short loc_5A7B
.text:00005A72 ; ---------------------------------------------------------------------------
.text:00005A72
.text:00005A72 loc_5A72:                               ; CODE XREF: _gprefs+2CFj
.text:00005A72                 mov     ecx, [ebp+var_14]
.text:00005A75                 sub     ecx, 1
.text:00005A78                 mov     [ebp+var_14], ecx
.text:00005A7B
.text:00005A7B loc_5A7B:                               ; CODE XREF: _gprefs+290j
.text:00005A7B                 mov     edx, [ebp+var_14]
.text:00005A7E                 cmp     edx, [ebp+var_20]
.text:00005A81                 jl      short loc_5AB1
.text:00005A83                 mov     eax, [ebp+var_14]
.text:00005A86                 push    eax
.text:00005A87                 mov     ecx, [ebp+arg_18]
.text:00005A8A                 push    ecx
.text:00005A8B                 mov     edx, [ebp+arg_14]
.text:00005A8E                 push    edx
.text:00005A8F                 call    _conf_get_int_int
.text:00005A94                 add     esp, 0Ch
.text:00005A97                 push    eax
.text:00005A98                 mov     eax, [ebp+var_14]
.text:00005A9B                 add     eax, 1
.text:00005A9E                 push    eax
.text:00005A9F                 mov     ecx, [ebp+arg_18]
.text:00005AA2                 push    ecx
.text:00005AA3                 mov     edx, [ebp+arg_14]
.text:00005AA6                 push    edx
.text:00005AA7                 call    _conf_set_int_int
.text:00005AAC                 add     esp, 10h
.text:00005AAF                 jmp     short loc_5A72
.text:00005AB1 ; ---------------------------------------------------------------------------
.text:00005AB1
.text:00005AB1 loc_5AB1:                               ; CODE XREF: _gprefs+2A1j
.text:00005AB1                 mov     eax, [ebp+var_10]
.text:00005AB4                 shl     eax, 4
.text:00005AB7                 mov     ecx, [ebp+arg_C]
.text:00005ABA                 mov     edx, [ecx+eax+4]
.text:00005ABE                 push    edx
.text:00005ABF                 mov     eax, [ebp+var_20]
.text:00005AC2                 push    eax
.text:00005AC3                 mov     ecx, [ebp+arg_18]
.text:00005AC6                 push    ecx
.text:00005AC7                 mov     edx, [ebp+arg_14]
.text:00005ACA                 push    edx
.text:00005ACB                 call    _conf_set_int_int
.text:00005AD0                 add     esp, 10h
.text:00005AD3                 mov     eax, [ebp+var_18]
.text:00005AD6                 add     eax, 1
.text:00005AD9                 mov     [ebp+var_18], eax
.text:00005ADC
.text:00005ADC loc_5ADC:                               ; CODE XREF: _gprefs+192j
.text:00005ADC                 jmp     loc_591F
.text:00005AE1 ; ---------------------------------------------------------------------------
.text:00005AE1
.text:00005AE1 loc_5AE1:                               ; CODE XREF: _gprefs+14Ej
.text:00005AE1                 jmp     loc_590A
.text:00005AE6 ; ---------------------------------------------------------------------------
.text:00005AE6
.text:00005AE6 loc_5AE6:                               ; CODE XREF: _gprefs+130j
.text:00005AE6                 pop     edi
.text:00005AE7                 add     esp, 2Ch
.text:00005AEA                 cmp     ebp, esp
.text:00005AEC                 call    __RTC_CheckEsp
.text:00005AF1                 mov     esp, ebp
.text:00005AF3                 pop     ebp
.text:00005AF4                 retn
.text:00005AF4 _gprefs         endp
.text:00005AF4
.text:00005AF4 ; ---------------------------------------------------------------------------
.text:00005AF5                 align 10h
.text:00005B00
.text:00005B00 ; =============== S U B R O U T I N E =======================================
.text:00005B00
.text:00005B00 ; Attributes: bp-based frame
.text:00005B00
.text:00005B00 ; int __cdecl key2val(int, int, char *Str2)
.text:00005B00 _key2val        proc near               ; CODE XREF: _gprefs+C8p
.text:00005B00
.text:00005B00 var_4           = dword ptr -4
.text:00005B00 arg_0           = dword ptr  8
.text:00005B00 arg_4           = dword ptr  0Ch
.text:00005B00 Str2            = dword ptr  10h
.text:00005B00
.text:00005B00                 push    ebp
.text:00005B01                 mov     ebp, esp
.text:00005B03                 push    ecx
.text:00005B04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B0B                 mov     [ebp+var_4], 0
.text:00005B12                 jmp     short loc_5B1D
.text:00005B14 ; ---------------------------------------------------------------------------
.text:00005B14
.text:00005B14 loc_5B14:                               ; CODE XREF: _key2val:loc_5B51j
.text:00005B14                 mov     eax, [ebp+var_4]
.text:00005B17                 add     eax, 1
.text:00005B1A                 mov     [ebp+var_4], eax
.text:00005B1D
.text:00005B1D loc_5B1D:                               ; CODE XREF: _key2val+12j
.text:00005B1D                 mov     ecx, [ebp+var_4]
.text:00005B20                 cmp     ecx, [ebp+arg_4]
.text:00005B23                 jge     short loc_5B53
.text:00005B25                 mov     edx, [ebp+Str2]
.text:00005B28                 push    edx             ; Str2
.text:00005B29                 mov     eax, [ebp+var_4]
.text:00005B2C                 shl     eax, 4
.text:00005B2F                 mov     ecx, [ebp+arg_0]
.text:00005B32                 mov     edx, [ecx+eax]
.text:00005B35                 push    edx             ; Str1
.text:00005B36                 call    _strcmp
.text:00005B3B                 add     esp, 8
.text:00005B3E                 test    eax, eax
.text:00005B40                 jnz     short loc_5B51
.text:00005B42                 mov     eax, [ebp+var_4]
.text:00005B45                 shl     eax, 4
.text:00005B48                 mov     ecx, [ebp+arg_0]
.text:00005B4B                 mov     eax, [ecx+eax+4]
.text:00005B4F                 jmp     short loc_5B56
.text:00005B51 ; ---------------------------------------------------------------------------
.text:00005B51
.text:00005B51 loc_5B51:                               ; CODE XREF: _key2val+40j
.text:00005B51                 jmp     short loc_5B14
.text:00005B53 ; ---------------------------------------------------------------------------
.text:00005B53
.text:00005B53 loc_5B53:                               ; CODE XREF: _key2val+23j
.text:00005B53                 or      eax, 0FFFFFFFFh
.text:00005B56
.text:00005B56 loc_5B56:                               ; CODE XREF: _key2val+4Fj
.text:00005B56                 add     esp, 4
.text:00005B59                 cmp     ebp, esp
.text:00005B5B                 call    __RTC_CheckEsp
.text:00005B60                 mov     esp, ebp
.text:00005B62                 pop     ebp
.text:00005B63                 retn
.text:00005B63 _key2val        endp
.text:00005B63
.text:00005B63 ; ---------------------------------------------------------------------------
.text:00005B64                 align 10h
.text:00005B70
.text:00005B70 ; =============== S U B R O U T I N E =======================================
.text:00005B70
.text:00005B70 ; Attributes: bp-based frame
.text:00005B70
.text:00005B70                 public _do_defaults
.text:00005B70 _do_defaults    proc near
.text:00005B70
.text:00005B70 arg_0           = dword ptr  8
.text:00005B70 arg_4           = dword ptr  0Ch
.text:00005B70
.text:00005B70                 push    ebp
.text:00005B71                 mov     ebp, esp
.text:00005B73                 mov     eax, [ebp+arg_4]
.text:00005B76                 push    eax
.text:00005B77                 mov     ecx, [ebp+arg_0]
.text:00005B7A                 push    ecx
.text:00005B7B                 call    _load_settings
.text:00005B80                 add     esp, 8
.text:00005B83                 cmp     ebp, esp
.text:00005B85                 call    __RTC_CheckEsp
.text:00005B8A                 pop     ebp
.text:00005B8B                 retn
.text:00005B8B _do_defaults    endp
.text:00005B8B
.text:00005B8B ; ---------------------------------------------------------------------------
.text:00005B8C                 align 10h
.text:00005B90
.text:00005B90 ; =============== S U B R O U T I N E =======================================
.text:00005B90
.text:00005B90 ; Attributes: bp-based frame
.text:00005B90
.text:00005B90                 public _get_sesslist
.text:00005B90 _get_sesslist   proc near
.text:00005B90
.text:00005B90 var_828         = dword ptr -828h
.text:00005B90 var_824         = dword ptr -824h
.text:00005B90 var_820         = dword ptr -820h
.text:00005B90 Str1            = dword ptr -81Ch
.text:00005B90 NumOfElements   = dword ptr -818h
.text:00005B90 var_814         = dword ptr -814h
.text:00005B90 var_810         = dword ptr -810h
.text:00005B90 Str             = byte ptr -808h
.text:00005B90 var_4           = dword ptr -4
.text:00005B90 arg_0           = dword ptr  8
.text:00005B90 arg_4           = dword ptr  0Ch
.text:00005B90
.text:00005B90                 push    ebp
.text:00005B91                 mov     ebp, esp
.text:00005B93                 sub     esp, 828h
.text:00005B99                 push    edi
.text:00005B9A                 lea     edi, [ebp+var_828]
.text:00005BA0                 mov     ecx, 20Ah
.text:00005BA5                 mov     eax, 0CCCCCCCCh
.text:00005BAA                 rep stosd
.text:00005BAC                 mov     eax, dword ptr ds:___security_cookie
.text:00005BB1                 xor     eax, ebp
.text:00005BB3                 mov     [ebp+var_4], eax
.text:00005BB6                 cmp     [ebp+arg_4], 0
.text:00005BBA                 jz      loc_5E5F
.text:00005BC0                 mov     [ebp+var_814], 0
.text:00005BCA                 mov     eax, [ebp+var_814]
.text:00005BD0                 mov     [ebp+var_810], eax
.text:00005BD6                 mov     ecx, [ebp+arg_0]
.text:00005BD9                 mov     dword ptr [ecx+8], 0
.text:00005BE0                 call    _enum_settings_start
.text:00005BE5                 mov     [ebp+var_824], eax
.text:00005BEB                 cmp     [ebp+var_824], 0
.text:00005BF2                 jz      loc_5CE6
.text:00005BF8
.text:00005BF8 loc_5BF8:                               ; CODE XREF: _get_sesslist+141j
.text:00005BF8                 push    800h
.text:00005BFD                 lea     edx, [ebp+Str]
.text:00005C03                 push    edx
.text:00005C04                 mov     eax, [ebp+var_824]
.text:00005C0A                 push    eax
.text:00005C0B                 call    _enum_settings_next
.text:00005C10                 add     esp, 0Ch
.text:00005C13                 mov     [ebp+var_820], eax
.text:00005C19                 cmp     [ebp+var_820], 0
.text:00005C20                 jz      loc_5CCA
.text:00005C26                 lea     ecx, [ebp+Str]
.text:00005C2C                 push    ecx             ; Str
.text:00005C2D                 call    _strlen
.text:00005C32                 add     esp, 4
.text:00005C35                 add     eax, 1
.text:00005C38                 mov     [ebp+var_828], eax
.text:00005C3E                 mov     edx, [ebp+var_810]
.text:00005C44                 add     edx, [ebp+var_828]
.text:00005C4A                 cmp     [ebp+var_814], edx
.text:00005C50                 jge     short loc_5C89
.text:00005C52                 mov     eax, [ebp+var_828]
.text:00005C58                 mov     ecx, [ebp+var_810]
.text:00005C5E                 lea     edx, [ecx+eax+800h]
.text:00005C65                 mov     [ebp+var_814], edx
.text:00005C6B                 push    1
.text:00005C6D                 mov     eax, [ebp+var_814]
.text:00005C73                 push    eax
.text:00005C74                 mov     ecx, [ebp+arg_0]
.text:00005C77                 mov     edx, [ecx+8]
.text:00005C7A                 push    edx
.text:00005C7B                 call    _saferealloc
.text:00005C80                 add     esp, 0Ch
.text:00005C83                 mov     ecx, [ebp+arg_0]
.text:00005C86                 mov     [ecx+8], eax
.text:00005C89
.text:00005C89 loc_5C89:                               ; CODE XREF: _get_sesslist+C0j
.text:00005C89                 lea     edx, [ebp+Str]
.text:00005C8F                 push    edx             ; Source
.text:00005C90                 mov     eax, [ebp+arg_0]
.text:00005C93                 mov     ecx, [eax+8]
.text:00005C96                 add     ecx, [ebp+var_810]
.text:00005C9C                 push    ecx             ; Dest
.text:00005C9D                 call    _strcpy
.text:00005CA2                 add     esp, 8
.text:00005CA5                 mov     edx, [ebp+arg_0]
.text:00005CA8                 mov     eax, [edx+8]
.text:00005CAB                 add     eax, [ebp+var_810]
.text:00005CB1                 push    eax             ; Str
.text:00005CB2                 call    _strlen
.text:00005CB7                 add     esp, 4
.text:00005CBA                 mov     ecx, [ebp+var_810]
.text:00005CC0                 lea     edx, [ecx+eax+1]
.text:00005CC4                 mov     [ebp+var_810], edx
.text:00005CCA
.text:00005CCA loc_5CCA:                               ; CODE XREF: _get_sesslist+90j
.text:00005CCA                 cmp     [ebp+var_820], 0
.text:00005CD1                 jnz     loc_5BF8
.text:00005CD7                 mov     eax, [ebp+var_824]
.text:00005CDD                 push    eax
.text:00005CDE                 call    _enum_settings_finish
.text:00005CE3                 add     esp, 4
.text:00005CE6
.text:00005CE6 loc_5CE6:                               ; CODE XREF: _get_sesslist+62j
.text:00005CE6                 push    1
.text:00005CE8                 mov     ecx, [ebp+var_810]
.text:00005CEE                 add     ecx, 1
.text:00005CF1                 push    ecx
.text:00005CF2                 mov     edx, [ebp+arg_0]
.text:00005CF5                 mov     eax, [edx+8]
.text:00005CF8                 push    eax
.text:00005CF9                 call    _saferealloc
.text:00005CFE                 add     esp, 0Ch
.text:00005D01                 mov     ecx, [ebp+arg_0]
.text:00005D04                 mov     [ecx+8], eax
.text:00005D07                 mov     edx, [ebp+arg_0]
.text:00005D0A                 mov     eax, [edx+8]
.text:00005D0D                 mov     ecx, [ebp+var_810]
.text:00005D13                 mov     byte ptr [eax+ecx], 0
.text:00005D17                 mov     edx, [ebp+arg_0]
.text:00005D1A                 mov     eax, [edx+8]
.text:00005D1D                 mov     [ebp+Str1], eax
.text:00005D23                 mov     ecx, [ebp+arg_0]
.text:00005D26                 mov     dword ptr [ecx], 1
.text:00005D2C
.text:00005D2C loc_5D2C:                               ; CODE XREF: _get_sesslist+1FBj
.text:00005D2C                 mov     edx, [ebp+Str1]
.text:00005D32                 movsx   eax, byte ptr [edx]
.text:00005D35                 test    eax, eax
.text:00005D37                 jz      short loc_5D8D
.text:00005D39                 push    offset $SG86605 ; "Default Settings"
.text:00005D3E                 mov     ecx, [ebp+Str1]
.text:00005D44                 push    ecx             ; Str1
.text:00005D45                 call    _strcmp
.text:00005D4A                 add     esp, 8
.text:00005D4D                 test    eax, eax
.text:00005D4F                 jz      short loc_5D5E
.text:00005D51                 mov     edx, [ebp+arg_0]
.text:00005D54                 mov     eax, [edx]
.text:00005D56                 add     eax, 1
.text:00005D59                 mov     ecx, [ebp+arg_0]
.text:00005D5C                 mov     [ecx], eax
.text:00005D5E
.text:00005D5E loc_5D5E:                               ; CODE XREF: _get_sesslist+1BFj
.text:00005D5E                                         ; _get_sesslist+1EAj
.text:00005D5E                 mov     edx, [ebp+Str1]
.text:00005D64                 movsx   eax, byte ptr [edx]
.text:00005D67                 test    eax, eax
.text:00005D69                 jz      short loc_5D7C
.text:00005D6B                 mov     ecx, [ebp+Str1]
.text:00005D71                 add     ecx, 1
.text:00005D74                 mov     [ebp+Str1], ecx
.text:00005D7A                 jmp     short loc_5D5E
.text:00005D7C ; ---------------------------------------------------------------------------
.text:00005D7C
.text:00005D7C loc_5D7C:                               ; CODE XREF: _get_sesslist+1D9j
.text:00005D7C                 mov     edx, [ebp+Str1]
.text:00005D82                 add     edx, 1
.text:00005D85                 mov     [ebp+Str1], edx
.text:00005D8B                 jmp     short loc_5D2C
.text:00005D8D ; ---------------------------------------------------------------------------
.text:00005D8D
.text:00005D8D loc_5D8D:                               ; CODE XREF: _get_sesslist+1A7j
.text:00005D8D                 push    4
.text:00005D8F                 mov     eax, [ebp+arg_0]
.text:00005D92                 mov     ecx, [eax]
.text:00005D94                 add     ecx, 1
.text:00005D97                 push    ecx
.text:00005D98                 call    _safemalloc
.text:00005D9D                 add     esp, 8
.text:00005DA0                 mov     edx, [ebp+arg_0]
.text:00005DA3                 mov     [edx+4], eax
.text:00005DA6                 mov     eax, [ebp+arg_0]
.text:00005DA9                 mov     ecx, [eax+4]
.text:00005DAC                 mov     dword ptr [ecx], offset $SG86611 ; "Default Settings"
.text:00005DB2                 mov     edx, [ebp+arg_0]
.text:00005DB5                 mov     eax, [edx+8]
.text:00005DB8                 mov     [ebp+Str1], eax
.text:00005DBE                 mov     [ebp+NumOfElements], 1
.text:00005DC8
.text:00005DC8 loc_5DC8:                               ; CODE XREF: _get_sesslist+2AEj
.text:00005DC8                 mov     ecx, [ebp+Str1]
.text:00005DCE                 movsx   edx, byte ptr [ecx]
.text:00005DD1                 test    edx, edx
.text:00005DD3                 jz      short loc_5E40
.text:00005DD5                 push    offset $SG86616 ; "Default Settings"
.text:00005DDA                 mov     eax, [ebp+Str1]
.text:00005DE0                 push    eax             ; Str1
.text:00005DE1                 call    _strcmp
.text:00005DE6                 add     esp, 8
.text:00005DE9                 test    eax, eax
.text:00005DEB                 jz      short loc_5E11
.text:00005DED                 mov     ecx, [ebp+arg_0]
.text:00005DF0                 mov     edx, [ecx+4]
.text:00005DF3                 mov     eax, [ebp+NumOfElements]
.text:00005DF9                 mov     ecx, [ebp+Str1]
.text:00005DFF                 mov     [edx+eax*4], ecx
.text:00005E02                 mov     edx, [ebp+NumOfElements]
.text:00005E08                 add     edx, 1
.text:00005E0B                 mov     [ebp+NumOfElements], edx
.text:00005E11
.text:00005E11 loc_5E11:                               ; CODE XREF: _get_sesslist+25Bj
.text:00005E11                                         ; _get_sesslist+29Dj
.text:00005E11                 mov     eax, [ebp+Str1]
.text:00005E17                 movsx   ecx, byte ptr [eax]
.text:00005E1A                 test    ecx, ecx
.text:00005E1C                 jz      short loc_5E2F
.text:00005E1E                 mov     edx, [ebp+Str1]
.text:00005E24                 add     edx, 1
.text:00005E27                 mov     [ebp+Str1], edx
.text:00005E2D                 jmp     short loc_5E11
.text:00005E2F ; ---------------------------------------------------------------------------
.text:00005E2F
.text:00005E2F loc_5E2F:                               ; CODE XREF: _get_sesslist+28Cj
.text:00005E2F                 mov     eax, [ebp+Str1]
.text:00005E35                 add     eax, 1
.text:00005E38                 mov     [ebp+Str1], eax
.text:00005E3E                 jmp     short loc_5DC8
.text:00005E40 ; ---------------------------------------------------------------------------
.text:00005E40
.text:00005E40 loc_5E40:                               ; CODE XREF: _get_sesslist+243j
.text:00005E40                 push    offset _sessioncmp ; PtFuncCompare
.text:00005E45                 push    4               ; SizeOfElements
.text:00005E47                 mov     ecx, [ebp+NumOfElements]
.text:00005E4D                 push    ecx             ; NumOfElements
.text:00005E4E                 mov     edx, [ebp+arg_0]
.text:00005E51                 mov     eax, [edx+4]
.text:00005E54                 push    eax             ; Base
.text:00005E55                 call    _qsort
.text:00005E5A                 add     esp, 10h
.text:00005E5D                 jmp     short loc_5E91
.text:00005E5F ; ---------------------------------------------------------------------------
.text:00005E5F
.text:00005E5F loc_5E5F:                               ; CODE XREF: _get_sesslist+2Aj
.text:00005E5F                 mov     ecx, [ebp+arg_0]
.text:00005E62                 mov     edx, [ecx+8]
.text:00005E65                 push    edx
.text:00005E66                 call    _safefree
.text:00005E6B                 add     esp, 4
.text:00005E6E                 mov     eax, [ebp+arg_0]
.text:00005E71                 mov     ecx, [eax+4]
.text:00005E74                 push    ecx
.text:00005E75                 call    _safefree
.text:00005E7A                 add     esp, 4
.text:00005E7D                 mov     edx, [ebp+arg_0]
.text:00005E80                 mov     dword ptr [edx+8], 0
.text:00005E87                 mov     eax, [ebp+arg_0]
.text:00005E8A                 mov     dword ptr [eax+4], 0
.text:00005E91
.text:00005E91 loc_5E91:                               ; CODE XREF: _get_sesslist+2CDj
.text:00005E91                 push    edx
.text:00005E92                 mov     ecx, ebp
.text:00005E94                 push    eax
.text:00005E95                 lea     edx, $LN23
.text:00005E9B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005EA0                 pop     eax
.text:00005EA1                 pop     edx
.text:00005EA2                 pop     edi
.text:00005EA3                 mov     ecx, [ebp+var_4]
.text:00005EA6                 xor     ecx, ebp
.text:00005EA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00005EAD                 add     esp, 828h
.text:00005EB3                 cmp     ebp, esp
.text:00005EB5                 call    __RTC_CheckEsp
.text:00005EBA                 mov     esp, ebp
.text:00005EBC                 pop     ebp
.text:00005EBD                 retn
.text:00005EBD _get_sesslist   endp
.text:00005EBD
.text:00005EBD ; ---------------------------------------------------------------------------
.text:00005EBE                 align 10h
.text:00005EC0 $LN23           dd 1                    ; DATA XREF: _get_sesslist+305o
.text:00005EC4                 dd offset $LN22
.text:00005EC8 $LN22           dd 0FFFFF7F8h, 800h     ; DATA XREF: .text:00005EC4o
.text:00005ED0                 dd offset $LN21         ; "otherbuf"
.text:00005ED4 $LN21           db 'otherbuf',0         ; DATA XREF: .text:00005ED0o
.text:00005EDD                 align 10h
.text:00005EE0
.text:00005EE0 ; =============== S U B R O U T I N E =======================================
.text:00005EE0
.text:00005EE0 ; Attributes: bp-based frame
.text:00005EE0
.text:00005EE0 ; int __cdecl sessioncmp(const void *, const void *)
.text:00005EE0 _sessioncmp     proc near               ; DATA XREF: _get_sesslist:loc_5E40o
.text:00005EE0
.text:00005EE0 Str2            = dword ptr -8
.text:00005EE0 Str1            = dword ptr -4
.text:00005EE0 arg_0           = dword ptr  8
.text:00005EE0 arg_4           = dword ptr  0Ch
.text:00005EE0
.text:00005EE0                 push    ebp
.text:00005EE1                 mov     ebp, esp
.text:00005EE3                 sub     esp, 8
.text:00005EE6                 mov     [ebp+Str2], 0CCCCCCCCh
.text:00005EED                 mov     [ebp+Str1], 0CCCCCCCCh
.text:00005EF4                 mov     eax, [ebp+arg_0]
.text:00005EF7                 mov     ecx, [eax]
.text:00005EF9                 mov     [ebp+Str1], ecx
.text:00005EFC                 mov     edx, [ebp+arg_4]
.text:00005EFF                 mov     eax, [edx]
.text:00005F01                 mov     [ebp+Str2], eax
.text:00005F04                 push    offset $SG86570 ; "Default Settings"
.text:00005F09                 mov     ecx, [ebp+Str1]
.text:00005F0C                 push    ecx             ; Str1
.text:00005F0D                 call    _strcmp
.text:00005F12                 add     esp, 8
.text:00005F15                 test    eax, eax
.text:00005F17                 jnz     short loc_5F1E
.text:00005F19                 or      eax, 0FFFFFFFFh
.text:00005F1C                 jmp     short loc_5F4A
.text:00005F1E ; ---------------------------------------------------------------------------
.text:00005F1E
.text:00005F1E loc_5F1E:                               ; CODE XREF: _sessioncmp+37j
.text:00005F1E                 push    offset $SG86572 ; "Default Settings"
.text:00005F23                 mov     edx, [ebp+Str2]
.text:00005F26                 push    edx             ; Str1
.text:00005F27                 call    _strcmp
.text:00005F2C                 add     esp, 8
.text:00005F2F                 test    eax, eax
.text:00005F31                 jnz     short loc_5F3A
.text:00005F33                 mov     eax, 1
.text:00005F38                 jmp     short loc_5F4A
.text:00005F3A ; ---------------------------------------------------------------------------
.text:00005F3A
.text:00005F3A loc_5F3A:                               ; CODE XREF: _sessioncmp+51j
.text:00005F3A                 mov     eax, [ebp+Str2]
.text:00005F3D                 push    eax             ; Str2
.text:00005F3E                 mov     ecx, [ebp+Str1]
.text:00005F41                 push    ecx             ; Str1
.text:00005F42                 call    _strcmp
.text:00005F47                 add     esp, 8
.text:00005F4A
.text:00005F4A loc_5F4A:                               ; CODE XREF: _sessioncmp+3Cj
.text:00005F4A                                         ; _sessioncmp+58j
.text:00005F4A                 add     esp, 8
.text:00005F4D                 cmp     ebp, esp
.text:00005F4F                 call    __RTC_CheckEsp
.text:00005F54                 mov     esp, ebp
.text:00005F56                 pop     ebp
.text:00005F57                 retn
.text:00005F57 _sessioncmp     endp
.text:00005F57
.text:00005F57 _text           ends
.text:00005F57
.rtc$TMZ:00005F58 ; ===========================================================================
.rtc$TMZ:00005F58
.rtc$TMZ:00005F58 ; Segment type: Pure data
.rtc$TMZ:00005F58 ; Segment permissions: Read
.rtc$TMZ:00005F58 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00005F58                 assume cs:_rtc$TMZ
.rtc$TMZ:00005F58                 ;org 5F58h
.rtc$TMZ:00005F58 ; COMDAT (pick any)
.rtc$TMZ:00005F58 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00005F58 _rtc$TMZ        ends
.rtc$TMZ:00005F58
.rtc$IMZ:00005F5C ; ===========================================================================
.rtc$IMZ:00005F5C
.rtc$IMZ:00005F5C ; Segment type: Pure data
.rtc$IMZ:00005F5C ; Segment permissions: Read
.rtc$IMZ:00005F5C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00005F5C                 assume cs:_rtc$IMZ
.rtc$IMZ:00005F5C                 ;org 5F5Ch
.rtc$IMZ:00005F5C ; COMDAT (pick any)
.rtc$IMZ:00005F5C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00005F5C _rtc$IMZ        ends
.rtc$IMZ:00005F5C
UNDEF:00005F60 ; ===========================================================================
UNDEF:00005F60
UNDEF:00005F60 ; Segment type: Externs
UNDEF:00005F60 ; UNDEF
UNDEF:00005F60 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00005F60                 extrn _strcmp:near      ; CODE XREF: _backend_from_name+32p
UNDEF:00005F60                                         ; _wmap+EBp ...
UNDEF:00005F64                 extrn _backends:near    ; DATA XREF: _backend_from_name+Bo
UNDEF:00005F64                                         ; _backend_from_proto+Bo
UNDEF:00005F68                 extrn __RTC_CheckEsp:near ; CODE XREF: _backend_from_name+4Ep
UNDEF:00005F68                                         ; _get_remote_username+58p ...
UNDEF:00005F6C                 extrn __RTC_Shutdown:near
UNDEF:00005F6C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00005F70                 extrn __RTC_InitBase:near
UNDEF:00005F70                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00005F74                 extrn _get_username:near
UNDEF:00005F74                                         ; CODE XREF: _get_remote_username+48p
UNDEF:00005F78                 extrn _conf_get_int:near
UNDEF:00005F78                                         ; CODE XREF: _get_remote_username+3Cp
UNDEF:00005F78                                         ; _save_open_settings+7Fp ...
UNDEF:00005F7C                 extrn _dupstr:near      ; CODE XREF: _get_remote_username+2Ap
UNDEF:00005F7C                                         ; _wmap+108p ...
UNDEF:00005F80                 extrn _conf_get_str:near
UNDEF:00005F80                                         ; CODE XREF: _get_remote_username+11p
UNDEF:00005F80                                         ; _save_open_settings+3Fp ...
UNDEF:00005F84                 extrn _close_settings_w:near ; CODE XREF: _save_settings+49p
UNDEF:00005F88                 extrn _open_settings_w:near ; CODE XREF: _save_settings+1Fp
UNDEF:00005F8C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00005F8C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00005F8C                                         ; CODE XREF: _save_settings+5Dp
UNDEF:00005F8C                                         ; _save_open_settings+1850p ...
UNDEF:00005F90 ; size_t __cdecl strlen(const char *Str)
UNDEF:00005F90                 extrn _strlen:near      ; CODE XREF: _save_open_settings+10FBp
UNDEF:00005F90                                         ; _wmap+5Ep ...
UNDEF:00005F94                 extrn _conf_get_int_int:near
UNDEF:00005F94                                         ; CODE XREF: _save_open_settings+F34p
UNDEF:00005F94                                         ; _save_open_settings+F50p ...
UNDEF:00005F98 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:00005F98                 extrn _sprintf:near     ; CODE XREF: _save_open_settings+F19p
UNDEF:00005F98                                         ; _save_open_settings+F7Bp ...
UNDEF:00005F9C                 extrn _write_setting_fontspec:near
UNDEF:00005F9C                                         ; CODE XREF: _save_open_settings+DF6p
UNDEF:00005F9C                                         ; _save_open_settings+164Ap ...
UNDEF:00005FA0                 extrn _conf_get_fontspec:near
UNDEF:00005FA0                                         ; CODE XREF: _save_open_settings+DE4p
UNDEF:00005FA0                                         ; _save_open_settings+1638p ...
UNDEF:00005FA4                 extrn _gsslibkeywords:near
UNDEF:00005FA4                                         ; DATA XREF: _save_open_settings+665o
UNDEF:00005FA4                                         ; _load_open_settings+779o
UNDEF:00005FA8                 extrn _ngsslibs:near    ; DATA XREF: _save_open_settings+65Er
UNDEF:00005FA8                                         ; _load_open_settings+772r
UNDEF:00005FAC                 extrn _write_setting_filename:near
UNDEF:00005FAC                                         ; CODE XREF: _save_open_settings+71p
UNDEF:00005FAC                                         ; _save_open_settings+693p ...
UNDEF:00005FB0                 extrn _conf_get_filename:near
UNDEF:00005FB0                                         ; CODE XREF: _save_open_settings+5Fp
UNDEF:00005FB0                                         ; _save_open_settings+681p ...
UNDEF:00005FB4                 extrn _write_setting_s:near
UNDEF:00005FB4                                         ; CODE XREF: _save_open_settings+51p
UNDEF:00005FB4                                         ; _save_open_settings+156p ...
UNDEF:00005FB8                 extrn _write_setting_i:near
UNDEF:00005FB8                                         ; CODE XREF: _save_open_settings+31p
UNDEF:00005FB8                                         ; _save_open_settings+91p ...
UNDEF:00005FBC                 extrn ___security_cookie:near
UNDEF:00005FBC                                         ; DATA XREF: _save_open_settings+1Cr
UNDEF:00005FBC                                         ; _load_open_settings+1Cr ...
UNDEF:00005FC0 ; __fastcall __security_check_cookie(x)
UNDEF:00005FC0                 extrn @__security_check_cookie@4:near
UNDEF:00005FC0                                         ; CODE XREF: _save_open_settings+185Dp
UNDEF:00005FC0                                         ; _load_open_settings+17AEp ...
UNDEF:00005FC4                 extrn _safefree:near    ; CODE XREF: _wmap+260p
UNDEF:00005FC4                                         ; _wprefs+169p ...
UNDEF:00005FC8 ; void __cdecl free(void *Memory)
UNDEF:00005FC8                 extrn _free:near        ; CODE XREF: _wmap+22Fp
UNDEF:00005FCC ; char *__cdecl strchr(const char *Str, int Val)
UNDEF:00005FCC                 extrn _strchr:near      ; CODE XREF: _wmap+119p
UNDEF:00005FCC                                         ; _gppmap+134p ...
UNDEF:00005FD0                 extrn _safemalloc:near  ; CODE XREF: _wmap+88p
UNDEF:00005FD0                                         ; _wprefs+97p ...
UNDEF:00005FD4                 extrn _conf_get_str_strs:near ; CODE XREF: _wmap+2Cp
UNDEF:00005FD4                                         ; _wmap+49p ...
UNDEF:00005FD8 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00005FD8                 extrn __wassert:near    ; CODE XREF: _wprefs+143p
UNDEF:00005FD8                                         ; _gprefs+173p ...
UNDEF:00005FDC                 extrn _add_session_to_jumplist:near
UNDEF:00005FDC                                         ; CODE XREF: _load_settings+4Ap
UNDEF:00005FE0                 extrn _conf_launchable:near ; CODE XREF: _load_settings+3Ap
UNDEF:00005FE4                 extrn _close_settings_r:near ; CODE XREF: _load_settings+2Ep
UNDEF:00005FE8                 extrn _open_settings_r:near ; CODE XREF: _load_settings+Fp
UNDEF:00005FEC ; int __cdecl atoi(const char *Str)
UNDEF:00005FEC                 extrn _atoi:near        ; CODE XREF: _load_open_settings+10A2p
UNDEF:00005FF0                 extrn _conf_set_int_int:near
UNDEF:00005FF0                                         ; CODE XREF: _load_open_settings+EC4p
UNDEF:00005FF0                                         ; _load_open_settings+EE3p ...
UNDEF:00005FF4 ; int sscanf(const char *Src, const char *Format, ...)
UNDEF:00005FF4                 extrn _sscanf:near      ; CODE XREF: _load_open_settings+EA3p
UNDEF:00005FF8                 extrn _conf_set_str_str:near
UNDEF:00005FF8                                         ; CODE XREF: _load_open_settings+318p
UNDEF:00005FF8                                         ; _gppmap+171p ...
UNDEF:00005FFC                 extrn _default_port:near
UNDEF:00005FFC                                         ; DATA XREF: _load_open_settings+14Dr
UNDEF:00005FFC                                         ; _load_open_settings+191r
UNDEF:00006000                 extrn _default_protocol:near
UNDEF:00006000                                         ; DATA XREF: _load_open_settings+138r
UNDEF:00006004                 extrn _conf_set_str:near ; CODE XREF: _load_open_settings+41p
UNDEF:00006004                                         ; _load_open_settings+54p ...
UNDEF:00006008                 extrn _conf_set_int:near ; CODE XREF: _load_open_settings+2Ep
UNDEF:00006008                                         ; _load_open_settings+145p ...
UNDEF:0000600C                 extrn _platform_default_s:near ; CODE XREF: _gpps_raw+31p
UNDEF:00006010                 extrn _read_setting_s:near ; CODE XREF: _gpps_raw+1Cp
UNDEF:00006014                 extrn _fontspec_free:near ; CODE XREF: _gppfont+4Bp
UNDEF:00006018                 extrn _conf_set_fontspec:near ; CODE XREF: _gppfont+3Fp
UNDEF:0000601C                 extrn _platform_default_fontspec:near
UNDEF:0000601C                                         ; CODE XREF: _gppfont+28p
UNDEF:00006020                 extrn _read_setting_fontspec:near ; CODE XREF: _gppfont+13p
UNDEF:00006024                 extrn _filename_free:near ; CODE XREF: _gppfile+4Bp
UNDEF:00006028                 extrn _conf_set_filename:near ; CODE XREF: _gppfile+3Fp
UNDEF:0000602C                 extrn _platform_default_filename:near
UNDEF:0000602C                                         ; CODE XREF: _gppfile+28p
UNDEF:00006030                 extrn _read_setting_filename:near ; CODE XREF: _gppfile+13p
UNDEF:00006034                 extrn _read_setting_i:near ; CODE XREF: _gppi_raw+22p
UNDEF:00006038                 extrn _platform_default_i:near ; CODE XREF: _gppi_raw+Bp
UNDEF:0000603C                 extrn _conf_del_str_str:near ; CODE XREF: _gppmap+47p
UNDEF:00006040                 extrn _conf_get_str_nthstrkey:near ; CODE XREF: _gppmap+2Ap
UNDEF:00006044 ; void __cdecl qsort(void *Base, size_t NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *))
UNDEF:00006044                 extrn _qsort:near       ; CODE XREF: _get_sesslist+2C5p
UNDEF:00006048                 extrn _enum_settings_finish:near
UNDEF:00006048                                         ; CODE XREF: _get_sesslist+14Ep
UNDEF:0000604C ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:0000604C                 extrn _strcpy:near      ; CODE XREF: _get_sesslist+10Dp
UNDEF:00006050                 extrn _saferealloc:near ; CODE XREF: _get_sesslist+EBp
UNDEF:00006050                                         ; _get_sesslist+169p
UNDEF:00006054                 extrn _enum_settings_next:near ; CODE XREF: _get_sesslist+7Bp
UNDEF:00006058                 extrn _enum_settings_start:near
UNDEF:00006058                                         ; CODE XREF: _get_sesslist+50p
UNDEF:00006058
UNDEF:00006058
UNDEF:00006058                 end