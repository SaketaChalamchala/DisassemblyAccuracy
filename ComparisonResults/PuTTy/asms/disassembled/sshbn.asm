.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 114393318393A6066ADCBBF6898246CD
.bss:00000000 ; Input CRC32 : 725F8CEF
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshbn.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000 .intel_syntax noprefix
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000                 public _bnZero
.bss:00000000 _bnZero         db    ? ;               ; DATA XREF: .data:_Zeroo
.bss:00000001                 db    ? ;
.bss:00000002                 db    ? ;
.bss:00000003                 db    ? ;
.bss:00000003 _bss            ends
.bss:00000003
.data:00000004 ; ===========================================================================
.data:00000004
.data:00000004 ; Segment type: Pure data
.data:00000004 ; Segment permissions: Read/Write
.data:00000004 ; Segment alignment 'qword' can not be represented in assembly
.data:00000004 _data           segment para public 'DATA' use32
.data:00000004                 assume cs:_data
.data:00000004                 ;org 4
.data:00000004                 public _bnOne
.data:00000004 ; size_t bnOne
.data:00000004 _bnOne          dd 1                    ; DATA XREF: .data:_Oneo
.data:00000008                 db    1
.data:00000009                 db    0
.data:0000000A                 db    0
.data:0000000B                 db    0
.data:0000000C                 public _Zero
.data:0000000C ; void *Zero
.data:0000000C _Zero           dd offset _bnZero       ; DATA XREF: _biggcd:loc_39B9r
.data:0000000C                                         ; _modinv+34r ...
.data:00000010                 public _One
.data:00000010 ; void *One
.data:00000010 _One            dd offset _bnOne        ; DATA XREF: _modinv+46r
.data:00000010                                         ; _modinv:loc_3B08r
.data:00000014 $SG7161:                                ; DATA XREF: _newbn+1Co
.data:00000014                 unicode 0, <..\..\..\sshbn.c>,0
.data:00000036                 db    0
.data:00000037                 db    0
.data:00000038                 db    0
.data:00000039                 db    0
.data:0000003A                 db    0
.data:0000003B                 db    0
.data:0000003C $SG7162:                                ; DATA XREF: _newbn+21o
.data:0000003C                 unicode 0, <length >
.data:0000003C                 dw 3Eh
.data:0000003C                 unicode 0, <= 0 && length >
.data:0000003C                 dw 3Ch
.data:0000003C                 unicode 0, < INT_MAX / BIGNUM_INT_BITS>,0
.data:000000A0 $SG7187:                                ; DATA XREF: _bn_power_2+16o
.data:000000A0                 unicode 0, <..\..\..\sshbn.c>,0
.data:000000C2                 align 4
.data:000000C4 $SG7188:                                ; DATA XREF: _bn_power_2+1Bo
.data:000000C4                 unicode 0, <n >
.data:000000C4                 dw 3Eh
.data:000000C4                 unicode 0, <= 0>,0
.data:000000D2                 align 4
.data:000000D4 $SG7263:                                ; DATA XREF: _internal_mul+2D8o
.data:000000D4                 unicode 0, <..\..\..\sshbn.c>,0
.data:000000F6                 align 4
.data:000000F8 $SG7264:                                ; DATA XREF: _internal_mul+2DDo
.data:000000F8                 unicode 0, <i >
.data:000000F8                 dw 3Eh
.data:000000F8                 unicode 0, <= 0>,0
.data:00000106                 align 4
.data:00000108 $SG7365:                                ; DATA XREF: _internal_add_shifted+65o
.data:00000108                 unicode 0, <..\..\..\sshbn.c>,0
.data:0000012A                 align 4
.data:0000012C $SG7366:                                ; DATA XREF: _internal_add_shifted+6Ao
.data:0000012C                 unicode 0, <word >
.data:0000012C                 dw 3Ch
.data:0000012C                 unicode 0, <= number[0]>,0
.data:00000150 $SG7388:                                ; DATA XREF: _internal_mod+2Fo
.data:00000150                 unicode 0, <..\..\..\sshbn.c>,0
.data:00000172                 align 4
.data:00000174 $SG7389:                                ; DATA XREF: _internal_mod+34o
.data:00000174                 unicode 0, <m0 >
.data:00000174                 dw 2 dup(3Eh)
.data:00000174                 unicode 0, < (BIGNUM_INT_BITS-1) == 1>,0
.data:000001B2                 align 4
.data:000001B4 $SG7451:                                ; DATA XREF: _modpow_simple+2Ao
.data:000001B4                 unicode 0, <..\..\..\sshbn.c>,0
.data:000001D6                 align 4
.data:000001D8 $SG7452:                                ; DATA XREF: _modpow_simple+2Fo
.data:000001D8                 unicode 0, <mod[mod[0]] != 0>,0
.data:000001FA                 align 4
.data:000001FC $SG7539:                                ; DATA XREF: _modpow+2Ao
.data:000001FC                 unicode 0, <..\..\..\sshbn.c>,0
.data:0000021E                 align 10h
.data:00000220 $SG7540:                                ; DATA XREF: _modpow+2Fo
.data:00000220                 unicode 0, <mod[mod[0]] != 0>,0
.data:00000242                 align 4
.data:00000244 $SG7543:                                ; DATA XREF: _modpow+ABo
.data:00000244                 unicode 0, <..\..\..\sshbn.c>,0
.data:00000266                 align 4
.data:00000268 $SG7544:                                ; DATA XREF: _modpow+B0o
.data:00000268                 unicode 0, <inv>,0
.data:00000270 $SG7617:                                ; DATA XREF: _modmul+2Ao
.data:00000270                 unicode 0, <..\..\..\sshbn.c>,0
.data:00000292                 align 4
.data:00000294 $SG7618:                                ; DATA XREF: _modmul+2Fo
.data:00000294                 unicode 0, <mod[mod[0]] != 0>,0
.data:000002B6                 align 4
.data:000002B8 $SG7688:                                ; DATA XREF: _bigdivmod+3Ao
.data:000002B8                 unicode 0, <..\..\..\sshbn.c>,0
.data:000002DA                 align 4
.data:000002DC $SG7689:                                ; DATA XREF: _bigdivmod+3Fo
.data:000002DC                 unicode 0, <mod[mod[0]] != 0>,0
.data:000002FE                 align 10h
.data:00000300 $SG7743:                                ; DATA XREF: _bignum_from_bytes+2Fo
.data:00000300                 unicode 0, <..\..\..\sshbn.c>,0
.data:00000322                 align 4
.data:00000324 $SG7744:                                ; DATA XREF: _bignum_from_bytes+34o
.data:00000324                 unicode 0, <nbytes >
.data:00000324                 dw 3Eh
.data:00000324                 unicode 0, <= 0 && nbytes >
.data:00000324                 dw 3Ch
.data:00000324                 unicode 0, < INT_MAX/8>,0
.data:00000368 $SG7841:                                ; DATA XREF: _bignum_cmp+7Co
.data:00000368                 unicode 0, <..\..\..\sshbn.c>,0
.data:0000038A                 align 4
.data:0000038C $SG7842:                                ; DATA XREF: _bignum_cmp+81o
.data:0000038C                 unicode 0, <amax == 0 || a[amax] != 0>,0
.data:000003C0 $SG7844:                                ; DATA XREF: _bignum_cmp+A5o
.data:000003C0                 unicode 0, <..\..\..\sshbn.c>,0
.data:000003E2                 align 4
.data:000003E4 $SG7845:                                ; DATA XREF: _bignum_cmp+AAo
.data:000003E4                 unicode 0, <bmax == 0 || b[bmax] != 0>,0
.data:00000418 $SG7867:                                ; DATA XREF: _bignum_rshift+31o
.data:00000418                 unicode 0, <..\..\..\sshbn.c>,0
.data:0000043A                 align 4
.data:0000043C $SG7868:                                ; DATA XREF: _bignum_rshift+36o
.data:0000043C                 unicode 0, <shift >
.data:0000043C                 dw 3Eh
.data:0000043C                 unicode 0, <= 0>,0
.data:00000452                 align 4
.data:00000454 $SG8058:                                ; DATA XREF: _modinv+71o
.data:00000454                 unicode 0, <..\..\..\sshbn.c>,0
.data:00000476                 align 4
.data:00000478 $SG8059:                                ; DATA XREF: _modinv+76o
.data:00000478                 unicode 0, <number[number[0]] != 0>,0
.data:000004A6                 align 4
.data:000004A8 $SG8061:                                ; DATA XREF: _modinv+96o
.data:000004A8                 unicode 0, <..\..\..\sshbn.c>,0
.data:000004CA                 align 4
.data:000004CC $SG8062:                                ; DATA XREF: _modinv+9Bo
.data:000004CC                 unicode 0, <modulus[modulus[0]] != 0>,0
.data:000004FE                 align 10h
.data:000004FE _data           ends
.data:000004FE
.text:00000500 ; ===========================================================================
.text:00000500
.text:00000500 ; Segment type: Pure code
.text:00000500 ; Segment permissions: Read/Execute
.text:00000500 _text           segment para public 'CODE' use32
.text:00000500                 assume cs:_text
.text:00000500                 ;org 500h
.text:00000500                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000500
.text:00000500 ; =============== S U B R O U T I N E =======================================
.text:00000500
.text:00000500 ; Attributes: bp-based frame
.text:00000500
.text:00000500                 public _bn_restore_invariant
.text:00000500 _bn_restore_invariant proc near
.text:00000500
.text:00000500 arg_0           = dword ptr  8
.text:00000500
.text:00000500                 push    ebp
.text:00000501                 mov     ebp, esp
.text:00000503
.text:00000503 loc_503:                                ; CODE XREF: _bn_restore_invariant+26j
.text:00000503                 mov     eax, [ebp+arg_0]
.text:00000506                 cmp     dword ptr [eax], 1
.text:00000509                 jbe     short loc_528
.text:0000050B                 mov     ecx, [ebp+arg_0]
.text:0000050E                 mov     edx, [ecx]
.text:00000510                 mov     eax, [ebp+arg_0]
.text:00000513                 cmp     dword ptr [eax+edx*4], 0
.text:00000517                 jnz     short loc_528
.text:00000519                 mov     ecx, [ebp+arg_0]
.text:0000051C                 mov     edx, [ecx]
.text:0000051E                 sub     edx, 1
.text:00000521                 mov     eax, [ebp+arg_0]
.text:00000524                 mov     [eax], edx
.text:00000526                 jmp     short loc_503
.text:00000528 ; ---------------------------------------------------------------------------
.text:00000528
.text:00000528 loc_528:                                ; CODE XREF: _bn_restore_invariant+9j
.text:00000528                                         ; _bn_restore_invariant+17j
.text:00000528                 pop     ebp
.text:00000529                 retn
.text:00000529 _bn_restore_invariant endp
.text:00000529
.text:00000529 ; ---------------------------------------------------------------------------
.text:0000052A                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; int __cdecl copybn(void *)
.text:00000530                 public _copybn
.text:00000530 _copybn         proc near               ; CODE XREF: _bignum_bitmask+1Fp
.text:00000530                                         ; _biggcd+1Fp ...
.text:00000530
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = dword ptr  8
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 push    ecx
.text:00000534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000053B                 push    4
.text:0000053D                 mov     eax, [ebp+arg_0]
.text:00000540                 mov     ecx, [eax]
.text:00000542                 add     ecx, 1
.text:00000545                 push    ecx
.text:00000546                 call    _safemalloc
.text:0000054B                 add     esp, 8
.text:0000054E                 mov     [ebp+var_4], eax
.text:00000551                 cmp     [ebp+var_4], 0
.text:00000555                 jnz     short loc_55C
.text:00000557                 call    _abort
.text:0000055C ; ---------------------------------------------------------------------------
.text:0000055C
.text:0000055C loc_55C:                                ; CODE XREF: _copybn+25j
.text:0000055C                 mov     edx, [ebp+arg_0]
.text:0000055F                 mov     eax, [edx]
.text:00000561                 lea     ecx, ds:4[eax*4]
.text:00000568                 push    ecx             ; size_t
.text:00000569                 mov     edx, [ebp+arg_0]
.text:0000056C                 push    edx             ; void *
.text:0000056D                 mov     eax, [ebp+var_4]
.text:00000570                 push    eax             ; void *
.text:00000571                 call    _memcpy
.text:00000576                 add     esp, 0Ch
.text:00000579                 mov     eax, [ebp+var_4]
.text:0000057C                 add     esp, 4
.text:0000057F                 cmp     ebp, esp
.text:00000581                 call    __RTC_CheckEsp
.text:00000586                 mov     esp, ebp
.text:00000588                 pop     ebp
.text:00000589                 retn
.text:00000589 _copybn         endp
.text:00000589
.text:00000589 ; ---------------------------------------------------------------------------
.text:0000058A                 align 10h
.text:00000590
.text:00000590 ; =============== S U B R O U T I N E =======================================
.text:00000590
.text:00000590 ; Attributes: bp-based frame
.text:00000590
.text:00000590                 public _freebn
.text:00000590 _freebn         proc near               ; CODE XREF: _modpow_simple+55Ep
.text:00000590                                         ; _modpow+D8p ...
.text:00000590
.text:00000590 arg_0           = dword ptr  8
.text:00000590
.text:00000590                 push    ebp
.text:00000591                 mov     ebp, esp
.text:00000593                 mov     eax, [ebp+arg_0]
.text:00000596                 mov     ecx, [eax]
.text:00000598                 lea     edx, ds:4[ecx*4]
.text:0000059F                 push    edx
.text:000005A0                 mov     eax, [ebp+arg_0]
.text:000005A3                 push    eax
.text:000005A4                 call    _smemclr
.text:000005A9                 add     esp, 8
.text:000005AC                 mov     ecx, [ebp+arg_0]
.text:000005AF                 push    ecx
.text:000005B0                 call    _safefree
.text:000005B5                 add     esp, 4
.text:000005B8                 cmp     ebp, esp
.text:000005BA                 call    __RTC_CheckEsp
.text:000005BF                 pop     ebp
.text:000005C0                 retn
.text:000005C0 _freebn         endp
.text:000005C0
.text:000005C0 ; ---------------------------------------------------------------------------
.text:000005C1                 align 10h
.text:000005D0
.text:000005D0 ; =============== S U B R O U T I N E =======================================
.text:000005D0
.text:000005D0 ; Attributes: bp-based frame
.text:000005D0
.text:000005D0                 public _bn_power_2
.text:000005D0 _bn_power_2     proc near               ; CODE XREF: _modpow+82p
.text:000005D0
.text:000005D0 var_4           = dword ptr -4
.text:000005D0 arg_0           = dword ptr  8
.text:000005D0
.text:000005D0                 push    ebp
.text:000005D1                 mov     ebp, esp
.text:000005D3                 push    ecx
.text:000005D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005DB                 cmp     [ebp+arg_0], 0
.text:000005DF                 jge     short loc_5F8
.text:000005E1                 push    0A4h ; 'ñ'
.text:000005E6                 push    offset $SG7187  ; "..\\..\\..\\sshbn.c"
.text:000005EB                 push    offset $SG7188  ; "n >= 0"
.text:000005F0                 call    __wassert
.text:000005F5 ; ---------------------------------------------------------------------------
.text:000005F5                 add     esp, 0Ch
.text:000005F8
.text:000005F8 loc_5F8:                                ; CODE XREF: _bn_power_2+Fj
.text:000005F8                 mov     eax, [ebp+arg_0]
.text:000005FB                 cdq
.text:000005FC                 and     edx, 1Fh
.text:000005FF                 add     eax, edx
.text:00000601                 sar     eax, 5
.text:00000604                 add     eax, 1
.text:00000607                 push    eax
.text:00000608                 call    _newbn
.text:0000060D                 add     esp, 4
.text:00000610                 mov     [ebp+var_4], eax
.text:00000613                 push    1
.text:00000615                 mov     ecx, [ebp+arg_0]
.text:00000618                 push    ecx
.text:00000619                 mov     edx, [ebp+var_4]
.text:0000061C                 push    edx
.text:0000061D                 call    _bignum_set_bit
.text:00000622                 add     esp, 0Ch
.text:00000625                 mov     eax, [ebp+var_4]
.text:00000628                 add     esp, 4
.text:0000062B                 cmp     ebp, esp
.text:0000062D                 call    __RTC_CheckEsp
.text:00000632                 mov     esp, ebp
.text:00000634                 pop     ebp
.text:00000635                 retn
.text:00000635 _bn_power_2     endp
.text:00000635
.text:00000635 ; ---------------------------------------------------------------------------
.text:00000636                 align 10h
.text:00000640
.text:00000640 ; =============== S U B R O U T I N E =======================================
.text:00000640
.text:00000640 ; Attributes: bp-based frame
.text:00000640
.text:00000640 _newbn          proc near               ; CODE XREF: _bn_power_2+38p
.text:00000640                                         ; _modpow_simple+455p ...
.text:00000640
.text:00000640 var_4           = dword ptr -4
.text:00000640 arg_0           = dword ptr  8
.text:00000640
.text:00000640                 push    ebp
.text:00000641                 mov     ebp, esp
.text:00000643                 push    ecx
.text:00000644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000064B                 cmp     [ebp+arg_0], 0
.text:0000064F                 jl      short loc_65A
.text:00000651                 cmp     [ebp+arg_0], 3FFFFFFh
.text:00000658                 jl      short loc_66E
.text:0000065A
.text:0000065A loc_65A:                                ; CODE XREF: _newbn+Fj
.text:0000065A                 push    7Eh ; '~'
.text:0000065C                 push    offset $SG7161  ; "..\\..\\..\\sshbn.c"
.text:00000661                 push    offset $SG7162  ; "length >= 0 && length < INT_MAX / BIGNU"...
.text:00000666                 call    __wassert
.text:0000066B ; ---------------------------------------------------------------------------
.text:0000066B                 add     esp, 0Ch
.text:0000066E
.text:0000066E loc_66E:                                ; CODE XREF: _newbn+18j
.text:0000066E                 push    4
.text:00000670                 mov     ecx, [ebp+arg_0]
.text:00000673                 add     ecx, 1
.text:00000676                 push    ecx
.text:00000677                 call    _safemalloc
.text:0000067C                 add     esp, 8
.text:0000067F                 mov     [ebp+var_4], eax
.text:00000682                 cmp     [ebp+var_4], 0
.text:00000686                 jnz     short loc_68D
.text:00000688                 call    _abort
.text:0000068D ; ---------------------------------------------------------------------------
.text:0000068D
.text:0000068D loc_68D:                                ; CODE XREF: _newbn+46j
.text:0000068D                 mov     edx, [ebp+arg_0]
.text:00000690                 lea     eax, ds:4[edx*4]
.text:00000697                 push    eax             ; size_t
.text:00000698                 push    0               ; int
.text:0000069A                 mov     ecx, [ebp+var_4]
.text:0000069D                 push    ecx             ; void *
.text:0000069E                 call    _memset
.text:000006A3                 add     esp, 0Ch
.text:000006A6                 mov     edx, [ebp+var_4]
.text:000006A9                 mov     eax, [ebp+arg_0]
.text:000006AC                 mov     [edx], eax
.text:000006AE                 mov     eax, [ebp+var_4]
.text:000006B1                 add     esp, 4
.text:000006B4                 cmp     ebp, esp
.text:000006B6                 call    __RTC_CheckEsp
.text:000006BB                 mov     esp, ebp
.text:000006BD                 pop     ebp
.text:000006BE                 retn
.text:000006BE _newbn          endp
.text:000006BE
.text:000006BE ; ---------------------------------------------------------------------------
.text:000006BF                 align 10h
.text:000006C0
.text:000006C0 ; =============== S U B R O U T I N E =======================================
.text:000006C0
.text:000006C0 ; Attributes: bp-based frame
.text:000006C0
.text:000006C0                 public _modpow_simple
.text:000006C0 _modpow_simple  proc near               ; CODE XREF: _modpow+53p
.text:000006C0
.text:000006C0 var_34          = dword ptr -34h
.text:000006C0 var_30          = dword ptr -30h
.text:000006C0 var_2C          = dword ptr -2Ch
.text:000006C0 var_28          = dword ptr -28h
.text:000006C0 var_24          = dword ptr -24h
.text:000006C0 var_20          = dword ptr -20h
.text:000006C0 var_1C          = dword ptr -1Ch
.text:000006C0 var_18          = dword ptr -18h
.text:000006C0 var_14          = dword ptr -14h
.text:000006C0 var_10          = dword ptr -10h
.text:000006C0 var_C           = dword ptr -0Ch
.text:000006C0 var_8           = dword ptr -8
.text:000006C0 var_4           = dword ptr -4
.text:000006C0 arg_0           = dword ptr  8
.text:000006C0 arg_4           = dword ptr  0Ch
.text:000006C0 arg_8           = dword ptr  10h
.text:000006C0
.text:000006C0                 push    ebp
.text:000006C1                 mov     ebp, esp
.text:000006C3                 sub     esp, 34h
.text:000006C6                 push    esi
.text:000006C7                 push    edi
.text:000006C8                 lea     edi, [ebp+var_34]
.text:000006CB                 mov     ecx, 0Dh
.text:000006D0                 mov     eax, 0CCCCCCCCh
.text:000006D5                 rep stosd
.text:000006D7                 mov     eax, [ebp+arg_8]
.text:000006DA                 mov     ecx, [eax]
.text:000006DC                 mov     edx, [ebp+arg_8]
.text:000006DF                 cmp     dword ptr [edx+ecx*4], 0
.text:000006E3                 jnz     short loc_6FC
.text:000006E5                 push    2E0h
.text:000006EA                 push    offset $SG7451  ; "..\\..\\..\\sshbn.c"
.text:000006EF                 push    offset $SG7452  ; "mod[mod[0]] != 0"
.text:000006F4                 call    __wassert
.text:000006F9 ; ---------------------------------------------------------------------------
.text:000006F9                 add     esp, 0Ch
.text:000006FC
.text:000006FC loc_6FC:                                ; CODE XREF: _modpow_simple+23j
.text:000006FC                 mov     ecx, [ebp+arg_8]
.text:000006FF                 push    ecx
.text:00000700                 mov     edx, [ebp+arg_0]
.text:00000703                 push    edx
.text:00000704                 call    _bigmod
.text:00000709                 add     esp, 8
.text:0000070C                 mov     [ebp+var_2C], eax
.text:0000070F                 mov     eax, [ebp+arg_8]
.text:00000712                 mov     ecx, [eax]
.text:00000714                 mov     [ebp+var_1C], ecx
.text:00000717                 push    4
.text:00000719                 mov     edx, [ebp+var_1C]
.text:0000071C                 push    edx
.text:0000071D                 call    _safemalloc
.text:00000722                 add     esp, 8
.text:00000725                 mov     [ebp+var_10], eax
.text:00000728                 mov     [ebp+var_28], 0
.text:0000072F                 jmp     short loc_73A
.text:00000731 ; ---------------------------------------------------------------------------
.text:00000731
.text:00000731 loc_731:                                ; CODE XREF: _modpow_simple+99j
.text:00000731                 mov     eax, [ebp+var_28]
.text:00000734                 add     eax, 1
.text:00000737                 mov     [ebp+var_28], eax
.text:0000073A
.text:0000073A loc_73A:                                ; CODE XREF: _modpow_simple+6Fj
.text:0000073A                 mov     ecx, [ebp+var_28]
.text:0000073D                 cmp     ecx, [ebp+var_1C]
.text:00000740                 jge     short loc_75B
.text:00000742                 mov     edx, [ebp+arg_8]
.text:00000745                 mov     eax, [edx]
.text:00000747                 sub     eax, [ebp+var_28]
.text:0000074A                 mov     ecx, [ebp+var_28]
.text:0000074D                 mov     edx, [ebp+var_10]
.text:00000750                 mov     esi, [ebp+arg_8]
.text:00000753                 mov     eax, [esi+eax*4]
.text:00000756                 mov     [edx+ecx*4], eax
.text:00000759                 jmp     short loc_731
.text:0000075B ; ---------------------------------------------------------------------------
.text:0000075B
.text:0000075B loc_75B:                                ; CODE XREF: _modpow_simple+80j
.text:0000075B                 mov     [ebp+var_18], 0
.text:00000762                 jmp     short loc_76D
.text:00000764 ; ---------------------------------------------------------------------------
.text:00000764
.text:00000764 loc_764:                                ; CODE XREF: _modpow_simple:loc_786j
.text:00000764                 mov     ecx, [ebp+var_18]
.text:00000767                 add     ecx, 1
.text:0000076A                 mov     [ebp+var_18], ecx
.text:0000076D
.text:0000076D loc_76D:                                ; CODE XREF: _modpow_simple+A2j
.text:0000076D                 cmp     [ebp+var_18], 1Fh
.text:00000771                 jge     short loc_788
.text:00000773                 mov     edx, [ebp+var_10]
.text:00000776                 mov     eax, [edx]
.text:00000778                 mov     ecx, [ebp+var_18]
.text:0000077B                 shl     eax, cl
.text:0000077D                 and     eax, 80000000h
.text:00000782                 jz      short loc_786
.text:00000784                 jmp     short loc_788
.text:00000786 ; ---------------------------------------------------------------------------
.text:00000786
.text:00000786 loc_786:                                ; CODE XREF: _modpow_simple+C2j
.text:00000786                 jmp     short loc_764
.text:00000788 ; ---------------------------------------------------------------------------
.text:00000788
.text:00000788 loc_788:                                ; CODE XREF: _modpow_simple+B1j
.text:00000788                                         ; _modpow_simple+C4j
.text:00000788                 cmp     [ebp+var_18], 0
.text:0000078C                 jz      short loc_7F3
.text:0000078E                 mov     [ebp+var_24], 0
.text:00000795                 jmp     short loc_7A0
.text:00000797 ; ---------------------------------------------------------------------------
.text:00000797
.text:00000797 loc_797:                                ; CODE XREF: _modpow_simple+118j
.text:00000797                 mov     ecx, [ebp+var_24]
.text:0000079A                 add     ecx, 1
.text:0000079D                 mov     [ebp+var_24], ecx
.text:000007A0
.text:000007A0 loc_7A0:                                ; CODE XREF: _modpow_simple+D5j
.text:000007A0                 mov     edx, [ebp+var_1C]
.text:000007A3                 sub     edx, 1
.text:000007A6                 cmp     [ebp+var_24], edx
.text:000007A9                 jge     short loc_7DA
.text:000007AB                 mov     eax, [ebp+var_24]
.text:000007AE                 mov     ecx, [ebp+var_10]
.text:000007B1                 mov     edx, [ecx+eax*4]
.text:000007B4                 mov     ecx, [ebp+var_18]
.text:000007B7                 shl     edx, cl
.text:000007B9                 mov     ecx, 20h ; ' '
.text:000007BE                 sub     ecx, [ebp+var_18]
.text:000007C1                 mov     eax, [ebp+var_24]
.text:000007C4                 mov     esi, [ebp+var_10]
.text:000007C7                 mov     eax, [esi+eax*4+4]
.text:000007CB                 shr     eax, cl
.text:000007CD                 or      edx, eax
.text:000007CF                 mov     ecx, [ebp+var_24]
.text:000007D2                 mov     eax, [ebp+var_10]
.text:000007D5                 mov     [eax+ecx*4], edx
.text:000007D8                 jmp     short loc_797
.text:000007DA ; ---------------------------------------------------------------------------
.text:000007DA
.text:000007DA loc_7DA:                                ; CODE XREF: _modpow_simple+E9j
.text:000007DA                 mov     ecx, [ebp+var_1C]
.text:000007DD                 mov     edx, [ebp+var_10]
.text:000007E0                 mov     eax, [edx+ecx*4-4]
.text:000007E4                 mov     ecx, [ebp+var_18]
.text:000007E7                 shl     eax, cl
.text:000007E9                 mov     ecx, [ebp+var_1C]
.text:000007EC                 mov     edx, [ebp+var_10]
.text:000007EF                 mov     [edx+ecx*4-4], eax
.text:000007F3
.text:000007F3 loc_7F3:                                ; CODE XREF: _modpow_simple+CCj
.text:000007F3                 push    4
.text:000007F5                 mov     eax, [ebp+var_1C]
.text:000007F8                 push    eax
.text:000007F9                 call    _safemalloc
.text:000007FE                 add     esp, 8
.text:00000801                 mov     [ebp+var_C], eax
.text:00000804                 mov     ecx, [ebp+var_2C]
.text:00000807                 mov     edx, [ebp+var_1C]
.text:0000080A                 sub     edx, [ecx]
.text:0000080C                 mov     [ebp+var_24], edx
.text:0000080F                 mov     [ebp+var_28], 0
.text:00000816                 jmp     short loc_821
.text:00000818 ; ---------------------------------------------------------------------------
.text:00000818
.text:00000818 loc_818:                                ; CODE XREF: _modpow_simple+176j
.text:00000818                 mov     eax, [ebp+var_28]
.text:0000081B                 add     eax, 1
.text:0000081E                 mov     [ebp+var_28], eax
.text:00000821
.text:00000821 loc_821:                                ; CODE XREF: _modpow_simple+156j
.text:00000821                 mov     ecx, [ebp+var_28]
.text:00000824                 cmp     ecx, [ebp+var_24]
.text:00000827                 jge     short loc_838
.text:00000829                 mov     edx, [ebp+var_28]
.text:0000082C                 mov     eax, [ebp+var_C]
.text:0000082F                 mov     dword ptr [eax+edx*4], 0
.text:00000836                 jmp     short loc_818
.text:00000838 ; ---------------------------------------------------------------------------
.text:00000838
.text:00000838 loc_838:                                ; CODE XREF: _modpow_simple+167j
.text:00000838                 mov     [ebp+var_28], 0
.text:0000083F                 jmp     short loc_84A
.text:00000841 ; ---------------------------------------------------------------------------
.text:00000841
.text:00000841 loc_841:                                ; CODE XREF: _modpow_simple+1AEj
.text:00000841                 mov     ecx, [ebp+var_28]
.text:00000844                 add     ecx, 1
.text:00000847                 mov     [ebp+var_28], ecx
.text:0000084A
.text:0000084A loc_84A:                                ; CODE XREF: _modpow_simple+17Fj
.text:0000084A                 mov     edx, [ebp+var_2C]
.text:0000084D                 mov     eax, [ebp+var_28]
.text:00000850                 cmp     eax, [edx]
.text:00000852                 jge     short loc_870
.text:00000854                 mov     ecx, [ebp+var_2C]
.text:00000857                 mov     edx, [ecx]
.text:00000859                 sub     edx, [ebp+var_28]
.text:0000085C                 mov     eax, [ebp+var_24]
.text:0000085F                 add     eax, [ebp+var_28]
.text:00000862                 mov     ecx, [ebp+var_C]
.text:00000865                 mov     esi, [ebp+var_2C]
.text:00000868                 mov     edx, [esi+edx*4]
.text:0000086B                 mov     [ecx+eax*4], edx
.text:0000086E                 jmp     short loc_841
.text:00000870 ; ---------------------------------------------------------------------------
.text:00000870
.text:00000870 loc_870:                                ; CODE XREF: _modpow_simple+192j
.text:00000870                 push    4
.text:00000872                 mov     eax, [ebp+var_1C]
.text:00000875                 shl     eax, 1
.text:00000877                 push    eax
.text:00000878                 call    _safemalloc
.text:0000087D                 add     esp, 8
.text:00000880                 mov     [ebp+var_4], eax
.text:00000883                 push    4
.text:00000885                 mov     ecx, [ebp+var_1C]
.text:00000888                 shl     ecx, 1
.text:0000088A                 push    ecx
.text:0000088B                 call    _safemalloc
.text:00000890                 add     esp, 8
.text:00000893                 mov     [ebp+var_8], eax
.text:00000896                 mov     [ebp+var_24], 0
.text:0000089D                 jmp     short loc_8A8
.text:0000089F ; ---------------------------------------------------------------------------
.text:0000089F
.text:0000089F loc_89F:                                ; CODE XREF: _modpow_simple+1FFj
.text:0000089F                 mov     edx, [ebp+var_24]
.text:000008A2                 add     edx, 1
.text:000008A5                 mov     [ebp+var_24], edx
.text:000008A8
.text:000008A8 loc_8A8:                                ; CODE XREF: _modpow_simple+1DDj
.text:000008A8                 mov     eax, [ebp+var_1C]
.text:000008AB                 shl     eax, 1
.text:000008AD                 cmp     [ebp+var_24], eax
.text:000008B0                 jge     short loc_8C1
.text:000008B2                 mov     ecx, [ebp+var_24]
.text:000008B5                 mov     edx, [ebp+var_4]
.text:000008B8                 mov     dword ptr [edx+ecx*4], 0
.text:000008BF                 jmp     short loc_89F
.text:000008C1 ; ---------------------------------------------------------------------------
.text:000008C1
.text:000008C1 loc_8C1:                                ; CODE XREF: _modpow_simple+1F0j
.text:000008C1                 mov     eax, [ebp+var_1C]
.text:000008C4                 shl     eax, 1
.text:000008C6                 mov     ecx, [ebp+var_4]
.text:000008C9                 mov     dword ptr [ecx+eax*4-4], 1
.text:000008D1                 mov     edx, [ebp+var_1C]
.text:000008D4                 push    edx
.text:000008D5                 call    _mul_compute_scratch
.text:000008DA                 add     esp, 4
.text:000008DD                 mov     [ebp+var_20], eax
.text:000008E0                 push    4
.text:000008E2                 mov     eax, [ebp+var_20]
.text:000008E5                 push    eax
.text:000008E6                 call    _safemalloc
.text:000008EB                 add     esp, 8
.text:000008EE                 mov     [ebp+var_14], eax
.text:000008F1                 mov     [ebp+var_24], 0
.text:000008F8                 mov     [ebp+var_28], 1Fh
.text:000008FF
.text:000008FF loc_8FF:                                ; CODE XREF: _modpow_simple:loc_93Ej
.text:000008FF                 mov     ecx, [ebp+arg_4]
.text:00000902                 mov     edx, [ebp+var_24]
.text:00000905                 cmp     edx, [ecx]
.text:00000907                 jge     short loc_940
.text:00000909                 mov     eax, [ebp+arg_4]
.text:0000090C                 mov     edx, [eax]
.text:0000090E                 sub     edx, [ebp+var_24]
.text:00000911                 mov     eax, 1
.text:00000916                 mov     ecx, [ebp+var_28]
.text:00000919                 shl     eax, cl
.text:0000091B                 mov     ecx, [ebp+arg_4]
.text:0000091E                 and     eax, [ecx+edx*4]
.text:00000921                 jnz     short loc_940
.text:00000923                 mov     edx, [ebp+var_28]
.text:00000926                 sub     edx, 1
.text:00000929                 mov     [ebp+var_28], edx
.text:0000092C                 jns     short loc_93E
.text:0000092E                 mov     eax, [ebp+var_24]
.text:00000931                 add     eax, 1
.text:00000934                 mov     [ebp+var_24], eax
.text:00000937                 mov     [ebp+var_28], 1Fh
.text:0000093E
.text:0000093E loc_93E:                                ; CODE XREF: _modpow_simple+26Cj
.text:0000093E                 jmp     short loc_8FF
.text:00000940 ; ---------------------------------------------------------------------------
.text:00000940
.text:00000940 loc_940:                                ; CODE XREF: _modpow_simple+247j
.text:00000940                                         ; _modpow_simple+261j ...
.text:00000940                 mov     ecx, [ebp+arg_4]
.text:00000943                 mov     edx, [ebp+var_24]
.text:00000946                 cmp     edx, [ecx]
.text:00000948                 jge     loc_A2F
.text:0000094E
.text:0000094E loc_94E:                                ; CODE XREF: _modpow_simple+355j
.text:0000094E                 cmp     [ebp+var_28], 0
.text:00000952                 jl      loc_A1A
.text:00000958                 mov     eax, [ebp+var_14]
.text:0000095B                 push    eax
.text:0000095C                 mov     ecx, [ebp+var_1C]
.text:0000095F                 push    ecx
.text:00000960                 mov     edx, [ebp+var_8]
.text:00000963                 push    edx
.text:00000964                 mov     eax, [ebp+var_1C]
.text:00000967                 mov     ecx, [ebp+var_4]
.text:0000096A                 lea     edx, [ecx+eax*4]
.text:0000096D                 push    edx
.text:0000096E                 mov     eax, [ebp+var_1C]
.text:00000971                 mov     ecx, [ebp+var_4]
.text:00000974                 lea     edx, [ecx+eax*4]
.text:00000977                 push    edx
.text:00000978                 call    _internal_mul
.text:0000097D                 add     esp, 14h
.text:00000980                 push    0
.text:00000982                 push    0
.text:00000984                 mov     eax, [ebp+var_1C]
.text:00000987                 push    eax
.text:00000988                 mov     ecx, [ebp+var_10]
.text:0000098B                 push    ecx
.text:0000098C                 mov     edx, [ebp+var_1C]
.text:0000098F                 shl     edx, 1
.text:00000991                 push    edx
.text:00000992                 mov     eax, [ebp+var_8]
.text:00000995                 push    eax
.text:00000996                 call    _internal_mod
.text:0000099B                 add     esp, 18h
.text:0000099E                 mov     ecx, [ebp+arg_4]
.text:000009A1                 mov     edx, [ecx]
.text:000009A3                 sub     edx, [ebp+var_24]
.text:000009A6                 mov     eax, 1
.text:000009AB                 mov     ecx, [ebp+var_28]
.text:000009AE                 shl     eax, cl
.text:000009B0                 mov     ecx, [ebp+arg_4]
.text:000009B3                 and     eax, [ecx+edx*4]
.text:000009B6                 jz      short loc_9FA
.text:000009B8                 mov     edx, [ebp+var_14]
.text:000009BB                 push    edx
.text:000009BC                 mov     eax, [ebp+var_1C]
.text:000009BF                 push    eax
.text:000009C0                 mov     ecx, [ebp+var_4]
.text:000009C3                 push    ecx
.text:000009C4                 mov     edx, [ebp+var_C]
.text:000009C7                 push    edx
.text:000009C8                 mov     eax, [ebp+var_1C]
.text:000009CB                 mov     ecx, [ebp+var_8]
.text:000009CE                 lea     edx, [ecx+eax*4]
.text:000009D1                 push    edx
.text:000009D2                 call    _internal_mul
.text:000009D7                 add     esp, 14h
.text:000009DA                 push    0
.text:000009DC                 push    0
.text:000009DE                 mov     eax, [ebp+var_1C]
.text:000009E1                 push    eax
.text:000009E2                 mov     ecx, [ebp+var_10]
.text:000009E5                 push    ecx
.text:000009E6                 mov     edx, [ebp+var_1C]
.text:000009E9                 shl     edx, 1
.text:000009EB                 push    edx
.text:000009EC                 mov     eax, [ebp+var_4]
.text:000009EF                 push    eax
.text:000009F0                 call    _internal_mod
.text:000009F5                 add     esp, 18h
.text:000009F8                 jmp     short loc_A0C
.text:000009FA ; ---------------------------------------------------------------------------
.text:000009FA
.text:000009FA loc_9FA:                                ; CODE XREF: _modpow_simple+2F6j
.text:000009FA                 mov     ecx, [ebp+var_4]
.text:000009FD                 mov     [ebp+var_34], ecx
.text:00000A00                 mov     edx, [ebp+var_8]
.text:00000A03                 mov     [ebp+var_4], edx
.text:00000A06                 mov     eax, [ebp+var_34]
.text:00000A09                 mov     [ebp+var_8], eax
.text:00000A0C
.text:00000A0C loc_A0C:                                ; CODE XREF: _modpow_simple+338j
.text:00000A0C                 mov     ecx, [ebp+var_28]
.text:00000A0F                 sub     ecx, 1
.text:00000A12                 mov     [ebp+var_28], ecx
.text:00000A15                 jmp     loc_94E
.text:00000A1A ; ---------------------------------------------------------------------------
.text:00000A1A
.text:00000A1A loc_A1A:                                ; CODE XREF: _modpow_simple+292j
.text:00000A1A                 mov     edx, [ebp+var_24]
.text:00000A1D                 add     edx, 1
.text:00000A20                 mov     [ebp+var_24], edx
.text:00000A23                 mov     [ebp+var_28], 1Fh
.text:00000A2A                 jmp     loc_940
.text:00000A2F ; ---------------------------------------------------------------------------
.text:00000A2F
.text:00000A2F loc_A2F:                                ; CODE XREF: _modpow_simple+288j
.text:00000A2F                 cmp     [ebp+var_18], 0
.text:00000A33                 jz      loc_B0F
.text:00000A39                 mov     eax, [ebp+var_1C]
.text:00000A3C                 sub     eax, 1
.text:00000A3F                 mov     [ebp+var_24], eax
.text:00000A42                 jmp     short loc_A4D
.text:00000A44 ; ---------------------------------------------------------------------------
.text:00000A44
.text:00000A44 loc_A44:                                ; CODE XREF: _modpow_simple+3C6j
.text:00000A44                 mov     ecx, [ebp+var_24]
.text:00000A47                 add     ecx, 1
.text:00000A4A                 mov     [ebp+var_24], ecx
.text:00000A4D
.text:00000A4D loc_A4D:                                ; CODE XREF: _modpow_simple+382j
.text:00000A4D                 mov     edx, [ebp+var_1C]
.text:00000A50                 lea     eax, [edx+edx-1]
.text:00000A54                 cmp     [ebp+var_24], eax
.text:00000A57                 jge     short loc_A88
.text:00000A59                 mov     ecx, [ebp+var_24]
.text:00000A5C                 mov     edx, [ebp+var_4]
.text:00000A5F                 mov     eax, [edx+ecx*4]
.text:00000A62                 mov     ecx, [ebp+var_18]
.text:00000A65                 shl     eax, cl
.text:00000A67                 mov     ecx, 20h ; ' '
.text:00000A6C                 sub     ecx, [ebp+var_18]
.text:00000A6F                 mov     edx, [ebp+var_24]
.text:00000A72                 mov     esi, [ebp+var_4]
.text:00000A75                 mov     edx, [esi+edx*4+4]
.text:00000A79                 shr     edx, cl
.text:00000A7B                 or      eax, edx
.text:00000A7D                 mov     ecx, [ebp+var_24]
.text:00000A80                 mov     edx, [ebp+var_4]
.text:00000A83                 mov     [edx+ecx*4], eax
.text:00000A86                 jmp     short loc_A44
.text:00000A88 ; ---------------------------------------------------------------------------
.text:00000A88
.text:00000A88 loc_A88:                                ; CODE XREF: _modpow_simple+397j
.text:00000A88                 mov     eax, [ebp+var_1C]
.text:00000A8B                 shl     eax, 1
.text:00000A8D                 mov     ecx, [ebp+var_4]
.text:00000A90                 mov     edx, [ecx+eax*4-4]
.text:00000A94                 mov     ecx, [ebp+var_18]
.text:00000A97                 shl     edx, cl
.text:00000A99                 mov     eax, [ebp+var_1C]
.text:00000A9C                 shl     eax, 1
.text:00000A9E                 mov     ecx, [ebp+var_4]
.text:00000AA1                 mov     [ecx+eax*4-4], edx
.text:00000AA5                 push    0
.text:00000AA7                 push    0
.text:00000AA9                 mov     edx, [ebp+var_1C]
.text:00000AAC                 push    edx
.text:00000AAD                 mov     eax, [ebp+var_10]
.text:00000AB0                 push    eax
.text:00000AB1                 mov     ecx, [ebp+var_1C]
.text:00000AB4                 shl     ecx, 1
.text:00000AB6                 push    ecx
.text:00000AB7                 mov     edx, [ebp+var_4]
.text:00000ABA                 push    edx
.text:00000ABB                 call    _internal_mod
.text:00000AC0                 add     esp, 18h
.text:00000AC3                 mov     eax, [ebp+var_1C]
.text:00000AC6                 lea     ecx, [eax+eax-1]
.text:00000ACA                 mov     [ebp+var_24], ecx
.text:00000ACD                 jmp     short loc_AD8
.text:00000ACF ; ---------------------------------------------------------------------------
.text:00000ACF
.text:00000ACF loc_ACF:                                ; CODE XREF: _modpow_simple+44Dj
.text:00000ACF                 mov     edx, [ebp+var_24]
.text:00000AD2                 sub     edx, 1
.text:00000AD5                 mov     [ebp+var_24], edx
.text:00000AD8
.text:00000AD8 loc_AD8:                                ; CODE XREF: _modpow_simple+40Dj
.text:00000AD8                 mov     eax, [ebp+var_24]
.text:00000ADB                 cmp     eax, [ebp+var_1C]
.text:00000ADE                 jl      short loc_B0F
.text:00000AE0                 mov     ecx, [ebp+var_24]
.text:00000AE3                 mov     edx, [ebp+var_4]
.text:00000AE6                 mov     eax, [edx+ecx*4]
.text:00000AE9                 mov     ecx, [ebp+var_18]
.text:00000AEC                 shr     eax, cl
.text:00000AEE                 mov     ecx, 20h ; ' '
.text:00000AF3                 sub     ecx, [ebp+var_18]
.text:00000AF6                 mov     edx, [ebp+var_24]
.text:00000AF9                 mov     esi, [ebp+var_4]
.text:00000AFC                 mov     edx, [esi+edx*4-4]
.text:00000B00                 shl     edx, cl
.text:00000B02                 or      eax, edx
.text:00000B04                 mov     ecx, [ebp+var_24]
.text:00000B07                 mov     edx, [ebp+var_4]
.text:00000B0A                 mov     [edx+ecx*4], eax
.text:00000B0D                 jmp     short loc_ACF
.text:00000B0F ; ---------------------------------------------------------------------------
.text:00000B0F
.text:00000B0F loc_B0F:                                ; CODE XREF: _modpow_simple+373j
.text:00000B0F                                         ; _modpow_simple+41Ej
.text:00000B0F                 mov     eax, [ebp+arg_8]
.text:00000B12                 mov     ecx, [eax]
.text:00000B14                 push    ecx
.text:00000B15                 call    _newbn
.text:00000B1A                 add     esp, 4
.text:00000B1D                 mov     [ebp+var_30], eax
.text:00000B20                 mov     [ebp+var_24], 0
.text:00000B27                 jmp     short loc_B32
.text:00000B29 ; ---------------------------------------------------------------------------
.text:00000B29
.text:00000B29 loc_B29:                                ; CODE XREF: _modpow_simple+494j
.text:00000B29                 mov     edx, [ebp+var_24]
.text:00000B2C                 add     edx, 1
.text:00000B2F                 mov     [ebp+var_24], edx
.text:00000B32
.text:00000B32 loc_B32:                                ; CODE XREF: _modpow_simple+467j
.text:00000B32                 mov     eax, [ebp+var_24]
.text:00000B35                 cmp     eax, [ebp+var_1C]
.text:00000B38                 jge     short loc_B56
.text:00000B3A                 mov     ecx, [ebp+var_24]
.text:00000B3D                 add     ecx, [ebp+var_1C]
.text:00000B40                 mov     edx, [ebp+var_30]
.text:00000B43                 mov     eax, [edx]
.text:00000B45                 sub     eax, [ebp+var_24]
.text:00000B48                 mov     edx, [ebp+var_30]
.text:00000B4B                 mov     esi, [ebp+var_4]
.text:00000B4E                 mov     ecx, [esi+ecx*4]
.text:00000B51                 mov     [edx+eax*4], ecx
.text:00000B54                 jmp     short loc_B29
.text:00000B56 ; ---------------------------------------------------------------------------
.text:00000B56
.text:00000B56 loc_B56:                                ; CODE XREF: _modpow_simple+478j
.text:00000B56                                         ; _modpow_simple+4B9j
.text:00000B56                 mov     edx, [ebp+var_30]
.text:00000B59                 cmp     dword ptr [edx], 1
.text:00000B5C                 jbe     short loc_B7B
.text:00000B5E                 mov     eax, [ebp+var_30]
.text:00000B61                 mov     ecx, [eax]
.text:00000B63                 mov     edx, [ebp+var_30]
.text:00000B66                 cmp     dword ptr [edx+ecx*4], 0
.text:00000B6A                 jnz     short loc_B7B
.text:00000B6C                 mov     eax, [ebp+var_30]
.text:00000B6F                 mov     ecx, [eax]
.text:00000B71                 sub     ecx, 1
.text:00000B74                 mov     edx, [ebp+var_30]
.text:00000B77                 mov     [edx], ecx
.text:00000B79                 jmp     short loc_B56
.text:00000B7B ; ---------------------------------------------------------------------------
.text:00000B7B
.text:00000B7B loc_B7B:                                ; CODE XREF: _modpow_simple+49Cj
.text:00000B7B                                         ; _modpow_simple+4AAj
.text:00000B7B                 mov     eax, [ebp+var_1C]
.text:00000B7E                 shl     eax, 1
.text:00000B80                 shl     eax, 2
.text:00000B83                 push    eax
.text:00000B84                 mov     ecx, [ebp+var_4]
.text:00000B87                 push    ecx
.text:00000B88                 call    _smemclr
.text:00000B8D                 add     esp, 8
.text:00000B90                 mov     edx, [ebp+var_4]
.text:00000B93                 push    edx
.text:00000B94                 call    _safefree
.text:00000B99                 add     esp, 4
.text:00000B9C                 mov     eax, [ebp+var_20]
.text:00000B9F                 shl     eax, 2
.text:00000BA2                 push    eax
.text:00000BA3                 mov     ecx, [ebp+var_14]
.text:00000BA6                 push    ecx
.text:00000BA7                 call    _smemclr
.text:00000BAC                 add     esp, 8
.text:00000BAF                 mov     edx, [ebp+var_14]
.text:00000BB2                 push    edx
.text:00000BB3                 call    _safefree
.text:00000BB8                 add     esp, 4
.text:00000BBB                 mov     eax, [ebp+var_1C]
.text:00000BBE                 shl     eax, 1
.text:00000BC0                 shl     eax, 2
.text:00000BC3                 push    eax
.text:00000BC4                 mov     ecx, [ebp+var_8]
.text:00000BC7                 push    ecx
.text:00000BC8                 call    _smemclr
.text:00000BCD                 add     esp, 8
.text:00000BD0                 mov     edx, [ebp+var_8]
.text:00000BD3                 push    edx
.text:00000BD4                 call    _safefree
.text:00000BD9                 add     esp, 4
.text:00000BDC                 mov     eax, [ebp+var_1C]
.text:00000BDF                 shl     eax, 2
.text:00000BE2                 push    eax
.text:00000BE3                 mov     ecx, [ebp+var_10]
.text:00000BE6                 push    ecx
.text:00000BE7                 call    _smemclr
.text:00000BEC                 add     esp, 8
.text:00000BEF                 mov     edx, [ebp+var_10]
.text:00000BF2                 push    edx
.text:00000BF3                 call    _safefree
.text:00000BF8                 add     esp, 4
.text:00000BFB                 mov     eax, [ebp+var_1C]
.text:00000BFE                 shl     eax, 2
.text:00000C01                 push    eax
.text:00000C02                 mov     ecx, [ebp+var_C]
.text:00000C05                 push    ecx
.text:00000C06                 call    _smemclr
.text:00000C0B                 add     esp, 8
.text:00000C0E                 mov     edx, [ebp+var_C]
.text:00000C11                 push    edx
.text:00000C12                 call    _safefree
.text:00000C17                 add     esp, 4
.text:00000C1A                 mov     eax, [ebp+var_2C]
.text:00000C1D                 push    eax
.text:00000C1E                 call    _freebn
.text:00000C23                 add     esp, 4
.text:00000C26                 mov     eax, [ebp+var_30]
.text:00000C29                 pop     edi
.text:00000C2A                 pop     esi
.text:00000C2B                 add     esp, 34h
.text:00000C2E                 cmp     ebp, esp
.text:00000C30                 call    __RTC_CheckEsp
.text:00000C35                 mov     esp, ebp
.text:00000C37                 pop     ebp
.text:00000C38                 retn
.text:00000C38 _modpow_simple  endp
.text:00000C38
.text:00000C38 ; ---------------------------------------------------------------------------
.text:00000C39                 align 10h
.text:00000C40
.text:00000C40 ; =============== S U B R O U T I N E =======================================
.text:00000C40
.text:00000C40 ; Attributes: bp-based frame
.text:00000C40
.text:00000C40 _mul_compute_scratch proc near          ; CODE XREF: _modpow_simple+215p
.text:00000C40                                         ; _modpow+2EDp ...
.text:00000C40
.text:00000C40 var_10          = dword ptr -10h
.text:00000C40 var_C           = dword ptr -0Ch
.text:00000C40 var_8           = dword ptr -8
.text:00000C40 var_4           = dword ptr -4
.text:00000C40 arg_0           = dword ptr  8
.text:00000C40
.text:00000C40                 push    ebp
.text:00000C41                 mov     ebp, esp
.text:00000C43                 sub     esp, 10h
.text:00000C46                 mov     eax, 0CCCCCCCCh
.text:00000C4B                 mov     [ebp+var_10], eax
.text:00000C4E                 mov     [ebp+var_C], eax
.text:00000C51                 mov     [ebp+var_8], eax
.text:00000C54                 mov     [ebp+var_4], eax
.text:00000C57                 mov     [ebp+var_4], 0
.text:00000C5E
.text:00000C5E loc_C5E:                                ; CODE XREF: _mul_compute_scratch+53j
.text:00000C5E                 cmp     [ebp+arg_0], 32h ; '2'
.text:00000C62                 jle     short loc_C95
.text:00000C64                 mov     eax, [ebp+arg_0]
.text:00000C67                 cdq
.text:00000C68                 sub     eax, edx
.text:00000C6A                 sar     eax, 1
.text:00000C6C                 mov     [ebp+var_8], eax
.text:00000C6F                 mov     eax, [ebp+arg_0]
.text:00000C72                 sub     eax, [ebp+var_8]
.text:00000C75                 mov     [ebp+var_C], eax
.text:00000C78                 mov     ecx, [ebp+var_C]
.text:00000C7B                 add     ecx, 1
.text:00000C7E                 mov     [ebp+var_10], ecx
.text:00000C81                 mov     edx, [ebp+var_10]
.text:00000C84                 mov     eax, [ebp+var_4]
.text:00000C87                 lea     ecx, [eax+edx*4]
.text:00000C8A                 mov     [ebp+var_4], ecx
.text:00000C8D                 mov     edx, [ebp+var_10]
.text:00000C90                 mov     [ebp+arg_0], edx
.text:00000C93                 jmp     short loc_C5E
.text:00000C95 ; ---------------------------------------------------------------------------
.text:00000C95
.text:00000C95 loc_C95:                                ; CODE XREF: _mul_compute_scratch+22j
.text:00000C95                 mov     eax, [ebp+var_4]
.text:00000C98                 mov     esp, ebp
.text:00000C9A                 pop     ebp
.text:00000C9B                 retn
.text:00000C9B _mul_compute_scratch endp
.text:00000C9B
.text:00000C9B ; ---------------------------------------------------------------------------
.text:00000C9C                 align 10h
.text:00000CA0
.text:00000CA0 ; =============== S U B R O U T I N E =======================================
.text:00000CA0
.text:00000CA0 ; Attributes: bp-based frame
.text:00000CA0
.text:00000CA0 _internal_mul   proc near               ; CODE XREF: _modpow_simple+2B8p
.text:00000CA0                                         ; _modpow_simple+312p ...
.text:00000CA0
.text:00000CA0 var_40          = dword ptr -40h
.text:00000CA0 var_3C          = dword ptr -3Ch
.text:00000CA0 var_38          = dword ptr -38h
.text:00000CA0 var_34          = dword ptr -34h
.text:00000CA0 var_30          = dword ptr -30h
.text:00000CA0 var_2C          = dword ptr -2Ch
.text:00000CA0 var_28          = dword ptr -28h
.text:00000CA0 var_24          = dword ptr -24h
.text:00000CA0 var_20          = dword ptr -20h
.text:00000CA0 var_1C          = dword ptr -1Ch
.text:00000CA0 var_18          = dword ptr -18h
.text:00000CA0 var_14          = dword ptr -14h
.text:00000CA0 var_10          = dword ptr -10h
.text:00000CA0 var_C           = dword ptr -0Ch
.text:00000CA0 var_8           = dword ptr -8
.text:00000CA0 var_4           = dword ptr -4
.text:00000CA0 arg_0           = dword ptr  8
.text:00000CA0 arg_4           = dword ptr  0Ch
.text:00000CA0 arg_8           = dword ptr  10h
.text:00000CA0 arg_C           = dword ptr  14h
.text:00000CA0 arg_10          = dword ptr  18h
.text:00000CA0
.text:00000CA0                 push    ebp
.text:00000CA1                 mov     ebp, esp
.text:00000CA3                 sub     esp, 40h
.text:00000CA6                 push    esi
.text:00000CA7                 push    edi
.text:00000CA8                 lea     edi, [ebp+var_40]
.text:00000CAB                 mov     ecx, 10h
.text:00000CB0                 mov     eax, 0CCCCCCCCh
.text:00000CB5                 rep stosd
.text:00000CB7                 cmp     [ebp+arg_C], 32h ; '2'
.text:00000CBB                 jle     loc_FD0
.text:00000CC1                 mov     eax, [ebp+arg_C]
.text:00000CC4                 cdq
.text:00000CC5                 sub     eax, edx
.text:00000CC7                 sar     eax, 1
.text:00000CC9                 mov     [ebp+var_8], eax
.text:00000CCC                 mov     eax, [ebp+arg_C]
.text:00000CCF                 sub     eax, [ebp+var_8]
.text:00000CD2                 mov     [ebp+var_C], eax
.text:00000CD5                 mov     ecx, [ebp+var_C]
.text:00000CD8                 add     ecx, 1
.text:00000CDB                 mov     [ebp+var_10], ecx
.text:00000CDE                 mov     edx, [ebp+arg_10]
.text:00000CE1                 push    edx
.text:00000CE2                 mov     eax, [ebp+var_8]
.text:00000CE5                 push    eax
.text:00000CE6                 mov     ecx, [ebp+arg_8]
.text:00000CE9                 push    ecx
.text:00000CEA                 mov     edx, [ebp+arg_4]
.text:00000CED                 push    edx
.text:00000CEE                 mov     eax, [ebp+arg_0]
.text:00000CF1                 push    eax
.text:00000CF2                 call    _internal_mul
.text:00000CF7                 add     esp, 14h
.text:00000CFA                 mov     ecx, [ebp+arg_10]
.text:00000CFD                 push    ecx
.text:00000CFE                 mov     edx, [ebp+var_C]
.text:00000D01                 push    edx
.text:00000D02                 mov     eax, [ebp+var_8]
.text:00000D05                 shl     eax, 1
.text:00000D07                 mov     ecx, [ebp+arg_8]
.text:00000D0A                 lea     edx, [ecx+eax*4]
.text:00000D0D                 push    edx
.text:00000D0E                 mov     eax, [ebp+var_8]
.text:00000D11                 mov     ecx, [ebp+arg_4]
.text:00000D14                 lea     edx, [ecx+eax*4]
.text:00000D17                 push    edx
.text:00000D18                 mov     eax, [ebp+var_8]
.text:00000D1B                 mov     ecx, [ebp+arg_0]
.text:00000D1E                 lea     edx, [ecx+eax*4]
.text:00000D21                 push    edx
.text:00000D22                 call    _internal_mul
.text:00000D27                 add     esp, 14h
.text:00000D2A                 mov     eax, [ebp+var_10]
.text:00000D2D                 mov     ecx, [ebp+arg_10]
.text:00000D30                 mov     dword ptr [ecx+eax*4+4], 0
.text:00000D38                 mov     edx, [ebp+var_10]
.text:00000D3B                 mov     eax, [ebp+arg_10]
.text:00000D3E                 mov     dword ptr [eax+edx*4], 0
.text:00000D45                 mov     ecx, [ebp+arg_10]
.text:00000D48                 mov     dword ptr [ecx+4], 0
.text:00000D4F                 mov     edx, [ebp+arg_10]
.text:00000D52                 mov     dword ptr [edx], 0
.text:00000D58                 mov     [ebp+var_4], 0
.text:00000D5F                 jmp     short loc_D6A
.text:00000D61 ; ---------------------------------------------------------------------------
.text:00000D61
.text:00000D61 loc_D61:                                ; CODE XREF: _internal_mul+104j
.text:00000D61                 mov     eax, [ebp+var_4]
.text:00000D64                 add     eax, 1
.text:00000D67                 mov     [ebp+var_4], eax
.text:00000D6A
.text:00000D6A loc_D6A:                                ; CODE XREF: _internal_mul+BFj
.text:00000D6A                 mov     ecx, [ebp+var_4]
.text:00000D6D                 cmp     ecx, [ebp+var_8]
.text:00000D70                 jge     short loc_DA6
.text:00000D72                 mov     edx, [ebp+var_10]
.text:00000D75                 sub     edx, [ebp+var_8]
.text:00000D78                 add     edx, [ebp+var_4]
.text:00000D7B                 mov     eax, [ebp+arg_10]
.text:00000D7E                 mov     ecx, [ebp+var_4]
.text:00000D81                 mov     esi, [ebp+arg_0]
.text:00000D84                 mov     ecx, [esi+ecx*4]
.text:00000D87                 mov     [eax+edx*4], ecx
.text:00000D8A                 mov     edx, [ebp+var_10]
.text:00000D8D                 shl     edx, 1
.text:00000D8F                 sub     edx, [ebp+var_8]
.text:00000D92                 add     edx, [ebp+var_4]
.text:00000D95                 mov     eax, [ebp+arg_10]
.text:00000D98                 mov     ecx, [ebp+var_4]
.text:00000D9B                 mov     esi, [ebp+arg_4]
.text:00000D9E                 mov     ecx, [esi+ecx*4]
.text:00000DA1                 mov     [eax+edx*4], ecx
.text:00000DA4                 jmp     short loc_D61
.text:00000DA6 ; ---------------------------------------------------------------------------
.text:00000DA6
.text:00000DA6 loc_DA6:                                ; CODE XREF: _internal_mul+D0j
.text:00000DA6                 mov     edx, [ebp+var_C]
.text:00000DA9                 push    edx
.text:00000DAA                 mov     eax, [ebp+arg_10]
.text:00000DAD                 add     eax, 4
.text:00000DB0                 push    eax
.text:00000DB1                 mov     ecx, [ebp+var_8]
.text:00000DB4                 mov     edx, [ebp+arg_0]
.text:00000DB7                 lea     eax, [edx+ecx*4]
.text:00000DBA                 push    eax
.text:00000DBB                 mov     ecx, [ebp+arg_10]
.text:00000DBE                 add     ecx, 4
.text:00000DC1                 push    ecx
.text:00000DC2                 call    _internal_add
.text:00000DC7                 add     esp, 10h
.text:00000DCA                 mov     edx, [ebp+arg_10]
.text:00000DCD                 mov     [edx], eax
.text:00000DCF                 mov     eax, [ebp+var_C]
.text:00000DD2                 push    eax
.text:00000DD3                 mov     ecx, [ebp+var_10]
.text:00000DD6                 mov     edx, [ebp+arg_10]
.text:00000DD9                 lea     eax, [edx+ecx*4+4]
.text:00000DDD                 push    eax
.text:00000DDE                 mov     ecx, [ebp+var_8]
.text:00000DE1                 mov     edx, [ebp+arg_4]
.text:00000DE4                 lea     eax, [edx+ecx*4]
.text:00000DE7                 push    eax
.text:00000DE8                 mov     ecx, [ebp+var_10]
.text:00000DEB                 mov     edx, [ebp+arg_10]
.text:00000DEE                 lea     eax, [edx+ecx*4+4]
.text:00000DF2                 push    eax
.text:00000DF3                 call    _internal_add
.text:00000DF8                 add     esp, 10h
.text:00000DFB                 mov     ecx, [ebp+var_10]
.text:00000DFE                 mov     edx, [ebp+arg_10]
.text:00000E01                 mov     [edx+ecx*4], eax
.text:00000E04                 mov     eax, [ebp+var_10]
.text:00000E07                 shl     eax, 2
.text:00000E0A                 mov     ecx, [ebp+arg_10]
.text:00000E0D                 lea     edx, [ecx+eax*4]
.text:00000E10                 push    edx
.text:00000E11                 mov     eax, [ebp+var_10]
.text:00000E14                 push    eax
.text:00000E15                 mov     ecx, [ebp+var_10]
.text:00000E18                 shl     ecx, 1
.text:00000E1A                 mov     edx, [ebp+arg_10]
.text:00000E1D                 lea     eax, [edx+ecx*4]
.text:00000E20                 push    eax
.text:00000E21                 mov     ecx, [ebp+var_10]
.text:00000E24                 mov     edx, [ebp+arg_10]
.text:00000E27                 lea     eax, [edx+ecx*4]
.text:00000E2A                 push    eax
.text:00000E2B                 mov     ecx, [ebp+arg_10]
.text:00000E2E                 push    ecx
.text:00000E2F                 call    _internal_mul
.text:00000E34                 add     esp, 14h
.text:00000E37                 mov     edx, [ebp+arg_10]
.text:00000E3A                 mov     dword ptr [edx+0Ch], 0
.text:00000E41                 mov     eax, [ebp+arg_10]
.text:00000E44                 mov     dword ptr [eax+8], 0
.text:00000E4B                 mov     ecx, [ebp+arg_10]
.text:00000E4E                 mov     dword ptr [ecx+4], 0
.text:00000E55                 mov     edx, [ebp+arg_10]
.text:00000E58                 mov     dword ptr [edx], 0
.text:00000E5E                 mov     [ebp+var_4], 0
.text:00000E65                 jmp     short loc_E70
.text:00000E67 ; ---------------------------------------------------------------------------
.text:00000E67
.text:00000E67 loc_E67:                                ; CODE XREF: _internal_mul+1F8j
.text:00000E67                 mov     eax, [ebp+var_4]
.text:00000E6A                 add     eax, 1
.text:00000E6D                 mov     [ebp+var_4], eax
.text:00000E70
.text:00000E70 loc_E70:                                ; CODE XREF: _internal_mul+1C5j
.text:00000E70                 mov     ecx, [ebp+var_8]
.text:00000E73                 shl     ecx, 1
.text:00000E75                 cmp     [ebp+var_4], ecx
.text:00000E78                 jge     short loc_E9A
.text:00000E7A                 mov     edx, [ebp+var_10]
.text:00000E7D                 shl     edx, 1
.text:00000E7F                 mov     eax, [ebp+var_8]
.text:00000E82                 shl     eax, 1
.text:00000E84                 sub     edx, eax
.text:00000E86                 add     edx, [ebp+var_4]
.text:00000E89                 mov     ecx, [ebp+arg_10]
.text:00000E8C                 mov     eax, [ebp+var_4]
.text:00000E8F                 mov     esi, [ebp+arg_8]
.text:00000E92                 mov     eax, [esi+eax*4]
.text:00000E95                 mov     [ecx+edx*4], eax
.text:00000E98                 jmp     short loc_E67
.text:00000E9A ; ---------------------------------------------------------------------------
.text:00000E9A
.text:00000E9A loc_E9A:                                ; CODE XREF: _internal_mul+1D8j
.text:00000E9A                 mov     ecx, [ebp+var_C]
.text:00000E9D                 shl     ecx, 1
.text:00000E9F                 push    ecx
.text:00000EA0                 mov     edx, [ebp+arg_10]
.text:00000EA3                 add     edx, 8
.text:00000EA6                 push    edx
.text:00000EA7                 mov     eax, [ebp+var_8]
.text:00000EAA                 shl     eax, 1
.text:00000EAC                 mov     ecx, [ebp+arg_8]
.text:00000EAF                 lea     edx, [ecx+eax*4]
.text:00000EB2                 push    edx
.text:00000EB3                 mov     eax, [ebp+arg_10]
.text:00000EB6                 add     eax, 8
.text:00000EB9                 push    eax
.text:00000EBA                 call    _internal_add
.text:00000EBF                 add     esp, 10h
.text:00000EC2                 mov     ecx, [ebp+arg_10]
.text:00000EC5                 mov     [ecx+4], eax
.text:00000EC8                 mov     edx, [ebp+var_10]
.text:00000ECB                 shl     edx, 1
.text:00000ECD                 push    edx
.text:00000ECE                 mov     eax, [ebp+var_10]
.text:00000ED1                 shl     eax, 1
.text:00000ED3                 mov     ecx, [ebp+arg_10]
.text:00000ED6                 lea     edx, [ecx+eax*4]
.text:00000ED9                 push    edx
.text:00000EDA                 mov     eax, [ebp+arg_10]
.text:00000EDD                 push    eax
.text:00000EDE                 mov     ecx, [ebp+var_10]
.text:00000EE1                 shl     ecx, 1
.text:00000EE3                 mov     edx, [ebp+arg_10]
.text:00000EE6                 lea     eax, [edx+ecx*4]
.text:00000EE9                 push    eax
.text:00000EEA                 call    _internal_sub
.text:00000EEF                 add     esp, 10h
.text:00000EF2                 mov     ecx, [ebp+var_10]
.text:00000EF5                 shl     ecx, 1
.text:00000EF7                 push    ecx
.text:00000EF8                 mov     edx, [ebp+arg_C]
.text:00000EFB                 shl     edx, 1
.text:00000EFD                 mov     eax, [ebp+arg_8]
.text:00000F00                 lea     ecx, [eax+edx*4]
.text:00000F03                 mov     edx, [ebp+var_C]
.text:00000F06                 shl     edx, 2
.text:00000F09                 sub     ecx, edx
.text:00000F0B                 mov     eax, [ebp+var_10]
.text:00000F0E                 shl     eax, 1
.text:00000F10                 shl     eax, 2
.text:00000F13                 sub     ecx, eax
.text:00000F15                 push    ecx
.text:00000F16                 mov     ecx, [ebp+var_10]
.text:00000F19                 shl     ecx, 1
.text:00000F1B                 mov     edx, [ebp+arg_10]
.text:00000F1E                 lea     eax, [edx+ecx*4]
.text:00000F21                 push    eax
.text:00000F22                 mov     ecx, [ebp+arg_C]
.text:00000F25                 shl     ecx, 1
.text:00000F27                 mov     edx, [ebp+arg_8]
.text:00000F2A                 lea     eax, [edx+ecx*4]
.text:00000F2D                 mov     ecx, [ebp+var_C]
.text:00000F30                 shl     ecx, 2
.text:00000F33                 sub     eax, ecx
.text:00000F35                 mov     edx, [ebp+var_10]
.text:00000F38                 shl     edx, 1
.text:00000F3A                 shl     edx, 2
.text:00000F3D                 sub     eax, edx
.text:00000F3F                 push    eax
.text:00000F40                 call    _internal_add
.text:00000F45                 add     esp, 10h
.text:00000F48                 xor     ecx, ecx
.text:00000F4A                 mov     [ebp+var_18], eax
.text:00000F4D                 mov     [ebp+var_14], ecx
.text:00000F50                 mov     edx, [ebp+arg_C]
.text:00000F53                 shl     edx, 1
.text:00000F55                 sub     edx, [ebp+var_C]
.text:00000F58                 mov     eax, [ebp+var_10]
.text:00000F5B                 shl     eax, 1
.text:00000F5D                 sub     edx, eax
.text:00000F5F                 sub     edx, 1
.text:00000F62                 mov     [ebp+var_4], edx
.text:00000F65
.text:00000F65 loc_F65:                                ; CODE XREF: _internal_mul+329j
.text:00000F65                 mov     ecx, [ebp+var_18]
.text:00000F68                 or      ecx, [ebp+var_14]
.text:00000F6B                 jz      short loc_FCB
.text:00000F6D                 cmp     [ebp+var_4], 0
.text:00000F71                 jge     short loc_F8A
.text:00000F73                 push    18Eh
.text:00000F78                 push    offset $SG7263  ; "..\\..\\..\\sshbn.c"
.text:00000F7D                 push    offset $SG7264  ; "i >= 0"
.text:00000F82                 call    __wassert
.text:00000F87 ; ---------------------------------------------------------------------------
.text:00000F87                 add     esp, 0Ch
.text:00000F8A
.text:00000F8A loc_F8A:                                ; CODE XREF: _internal_mul+2D1j
.text:00000F8A                 mov     eax, [ebp+var_4]
.text:00000F8D                 mov     ecx, [ebp+arg_8]
.text:00000F90                 mov     edx, [ecx+eax*4]
.text:00000F93                 xor     eax, eax
.text:00000F95                 add     edx, [ebp+var_18]
.text:00000F98                 adc     eax, [ebp+var_14]
.text:00000F9B                 mov     [ebp+var_18], edx
.text:00000F9E                 mov     [ebp+var_14], eax
.text:00000FA1                 mov     ecx, [ebp+var_18]
.text:00000FA4                 mov     edx, [ebp+var_4]
.text:00000FA7                 mov     eax, [ebp+arg_8]
.text:00000FAA                 mov     [eax+edx*4], ecx
.text:00000FAD                 mov     eax, [ebp+var_18]
.text:00000FB0                 mov     edx, [ebp+var_14]
.text:00000FB3                 mov     cl, 20h ; ' '
.text:00000FB5                 call    __aullshr
.text:00000FBA                 mov     [ebp+var_18], eax
.text:00000FBD                 mov     [ebp+var_14], edx
.text:00000FC0                 mov     ecx, [ebp+var_4]
.text:00000FC3                 sub     ecx, 1
.text:00000FC6                 mov     [ebp+var_4], ecx
.text:00000FC9                 jmp     short loc_F65
.text:00000FCB ; ---------------------------------------------------------------------------
.text:00000FCB
.text:00000FCB loc_FCB:                                ; CODE XREF: _internal_mul+2CBj
.text:00000FCB                 jmp     loc_10E5
.text:00000FD0 ; ---------------------------------------------------------------------------
.text:00000FD0
.text:00000FD0 loc_FD0:                                ; CODE XREF: _internal_mul+1Bj
.text:00000FD0                 mov     [ebp+var_1C], 0
.text:00000FD7                 jmp     short loc_FE2
.text:00000FD9 ; ---------------------------------------------------------------------------
.text:00000FD9
.text:00000FD9 loc_FD9:                                ; CODE XREF: _internal_mul+359j
.text:00000FD9                 mov     edx, [ebp+var_1C]
.text:00000FDC                 add     edx, 1
.text:00000FDF                 mov     [ebp+var_1C], edx
.text:00000FE2
.text:00000FE2 loc_FE2:                                ; CODE XREF: _internal_mul+337j
.text:00000FE2                 mov     eax, [ebp+arg_C]
.text:00000FE5                 shl     eax, 1
.text:00000FE7                 cmp     [ebp+var_1C], eax
.text:00000FEA                 jge     short loc_FFB
.text:00000FEC                 mov     ecx, [ebp+var_1C]
.text:00000FEF                 mov     edx, [ebp+arg_8]
.text:00000FF2                 mov     dword ptr [edx+ecx*4], 0
.text:00000FF9                 jmp     short loc_FD9
.text:00000FFB ; ---------------------------------------------------------------------------
.text:00000FFB
.text:00000FFB loc_FFB:                                ; CODE XREF: _internal_mul+34Aj
.text:00000FFB                 mov     eax, [ebp+arg_C]
.text:00000FFE                 shl     eax, 1
.text:00001000                 mov     ecx, [ebp+arg_8]
.text:00001003                 lea     edx, [ecx+eax*4]
.text:00001006                 mov     [ebp+var_38], edx
.text:00001009                 mov     eax, [ebp+arg_C]
.text:0000100C                 mov     ecx, [ebp+arg_0]
.text:0000100F                 lea     edx, [ecx+eax*4]
.text:00001012                 mov     [ebp+var_2C], edx
.text:00001015                 jmp     short loc_1020
.text:00001017 ; ---------------------------------------------------------------------------
.text:00001017
.text:00001017 loc_1017:                               ; CODE XREF: _internal_mul+440j
.text:00001017                 mov     eax, [ebp+var_38]
.text:0000101A                 sub     eax, 4
.text:0000101D                 mov     [ebp+var_38], eax
.text:00001020
.text:00001020 loc_1020:                               ; CODE XREF: _internal_mul+375j
.text:00001020                 mov     ecx, [ebp+var_2C]
.text:00001023                 mov     edx, [ebp+arg_0]
.text:00001026                 mov     eax, [ebp+var_2C]
.text:00001029                 sub     eax, 4
.text:0000102C                 mov     [ebp+var_2C], eax
.text:0000102F                 cmp     ecx, edx
.text:00001031                 jbe     short loc_103C
.text:00001033                 mov     [ebp+var_3C], 1
.text:0000103A                 jmp     short loc_1043
.text:0000103C ; ---------------------------------------------------------------------------
.text:0000103C
.text:0000103C loc_103C:                               ; CODE XREF: _internal_mul+391j
.text:0000103C                 mov     [ebp+var_3C], 0
.text:00001043
.text:00001043 loc_1043:                               ; CODE XREF: _internal_mul+39Aj
.text:00001043                 cmp     [ebp+var_3C], 0
.text:00001047                 jz      loc_10E5
.text:0000104D                 mov     [ebp+var_20], 0
.text:00001054                 mov     ecx, [ebp+var_38]
.text:00001057                 mov     [ebp+var_34], ecx
.text:0000105A                 mov     edx, [ebp+arg_C]
.text:0000105D                 mov     eax, [ebp+arg_4]
.text:00001060                 lea     ecx, [eax+edx*4]
.text:00001063                 mov     [ebp+var_30], ecx
.text:00001066
.text:00001066 loc_1066:                               ; CODE XREF: _internal_mul+436j
.text:00001066                 mov     edx, [ebp+var_34]
.text:00001069                 sub     edx, 4
.text:0000106C                 mov     [ebp+var_34], edx
.text:0000106F                 mov     eax, [ebp+var_30]
.text:00001072                 mov     ecx, [ebp+arg_4]
.text:00001075                 mov     edx, [ebp+var_30]
.text:00001078                 sub     edx, 4
.text:0000107B                 mov     [ebp+var_30], edx
.text:0000107E                 cmp     eax, ecx
.text:00001080                 jbe     short loc_108B
.text:00001082                 mov     [ebp+var_40], 1
.text:00001089                 jmp     short loc_1092
.text:0000108B ; ---------------------------------------------------------------------------
.text:0000108B
.text:0000108B loc_108B:                               ; CODE XREF: _internal_mul+3E0j
.text:0000108B                 mov     [ebp+var_40], 0
.text:00001092
.text:00001092 loc_1092:                               ; CODE XREF: _internal_mul+3E9j
.text:00001092                 cmp     [ebp+var_40], 0
.text:00001096                 jz      short loc_10D8
.text:00001098                 mov     eax, [ebp+var_2C]
.text:0000109B                 mov     eax, [eax]
.text:0000109D                 mov     ecx, [ebp+var_30]
.text:000010A0                 mov     edx, [ecx]
.text:000010A2                 mul     edx
.text:000010A4                 mov     ecx, [ebp+var_20]
.text:000010A7                 xor     esi, esi
.text:000010A9                 add     eax, ecx
.text:000010AB                 adc     edx, esi
.text:000010AD                 mov     ecx, [ebp+var_34]
.text:000010B0                 mov     ecx, [ecx]
.text:000010B2                 xor     esi, esi
.text:000010B4                 add     eax, ecx
.text:000010B6                 adc     edx, esi
.text:000010B8                 mov     [ebp+var_28], eax
.text:000010BB                 mov     [ebp+var_24], edx
.text:000010BE                 mov     edx, [ebp+var_28]
.text:000010C1                 mov     eax, [ebp+var_34]
.text:000010C4                 mov     [eax], edx
.text:000010C6                 mov     eax, [ebp+var_28]
.text:000010C9                 mov     edx, [ebp+var_24]
.text:000010CC                 mov     cl, 20h ; ' '
.text:000010CE                 call    __aullshr
.text:000010D3                 mov     [ebp+var_20], eax
.text:000010D6                 jmp     short loc_1066
.text:000010D8 ; ---------------------------------------------------------------------------
.text:000010D8
.text:000010D8 loc_10D8:                               ; CODE XREF: _internal_mul+3F6j
.text:000010D8                 mov     ecx, [ebp+var_34]
.text:000010DB                 mov     edx, [ebp+var_20]
.text:000010DE                 mov     [ecx], edx
.text:000010E0                 jmp     loc_1017
.text:000010E5 ; ---------------------------------------------------------------------------
.text:000010E5
.text:000010E5 loc_10E5:                               ; CODE XREF: _internal_mul:loc_FCBj
.text:000010E5                                         ; _internal_mul+3A7j
.text:000010E5                 pop     edi
.text:000010E6                 pop     esi
.text:000010E7                 add     esp, 40h
.text:000010EA                 cmp     ebp, esp
.text:000010EC                 call    __RTC_CheckEsp
.text:000010F1                 mov     esp, ebp
.text:000010F3                 pop     ebp
.text:000010F4                 retn
.text:000010F4 _internal_mul   endp
.text:000010F4
.text:000010F4 ; ---------------------------------------------------------------------------
.text:000010F5                 align 10h
.text:00001100
.text:00001100 ; =============== S U B R O U T I N E =======================================
.text:00001100
.text:00001100 ; Attributes: bp-based frame
.text:00001100
.text:00001100 _internal_add   proc near               ; CODE XREF: _internal_mul+122p
.text:00001100                                         ; _internal_mul+153p ...
.text:00001100
.text:00001100 var_C           = dword ptr -0Ch
.text:00001100 var_8           = dword ptr -8
.text:00001100 var_4           = dword ptr -4
.text:00001100 arg_0           = dword ptr  8
.text:00001100 arg_4           = dword ptr  0Ch
.text:00001100 arg_8           = dword ptr  10h
.text:00001100 arg_C           = dword ptr  14h
.text:00001100
.text:00001100                 push    ebp
.text:00001101                 mov     ebp, esp
.text:00001103                 sub     esp, 0Ch
.text:00001106                 push    esi
.text:00001107                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000110E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001115                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000111C                 mov     [ebp+var_C], 0
.text:00001123                 mov     [ebp+var_8], 0
.text:0000112A                 mov     eax, [ebp+arg_C]
.text:0000112D                 sub     eax, 1
.text:00001130                 mov     [ebp+var_4], eax
.text:00001133                 jmp     short loc_113E
.text:00001135 ; ---------------------------------------------------------------------------
.text:00001135
.text:00001135 loc_1135:                               ; CODE XREF: _internal_add+89j
.text:00001135                 mov     ecx, [ebp+var_4]
.text:00001138                 sub     ecx, 1
.text:0000113B                 mov     [ebp+var_4], ecx
.text:0000113E
.text:0000113E loc_113E:                               ; CODE XREF: _internal_add+33j
.text:0000113E                 cmp     [ebp+var_4], 0
.text:00001142                 jl      short loc_118B
.text:00001144                 mov     edx, [ebp+var_4]
.text:00001147                 mov     eax, [ebp+arg_0]
.text:0000114A                 mov     ecx, [eax+edx*4]
.text:0000114D                 xor     edx, edx
.text:0000114F                 mov     eax, [ebp+var_4]
.text:00001152                 mov     esi, [ebp+arg_4]
.text:00001155                 mov     eax, [esi+eax*4]
.text:00001158                 xor     esi, esi
.text:0000115A                 add     ecx, eax
.text:0000115C                 adc     edx, esi
.text:0000115E                 add     ecx, [ebp+var_C]
.text:00001161                 adc     edx, [ebp+var_8]
.text:00001164                 mov     [ebp+var_C], ecx
.text:00001167                 mov     [ebp+var_8], edx
.text:0000116A                 mov     ecx, [ebp+var_C]
.text:0000116D                 mov     edx, [ebp+var_4]
.text:00001170                 mov     eax, [ebp+arg_8]
.text:00001173                 mov     [eax+edx*4], ecx
.text:00001176                 mov     eax, [ebp+var_C]
.text:00001179                 mov     edx, [ebp+var_8]
.text:0000117C                 mov     cl, 20h ; ' '
.text:0000117E                 call    __aullshr
.text:00001183                 mov     [ebp+var_C], eax
.text:00001186                 mov     [ebp+var_8], edx
.text:00001189                 jmp     short loc_1135
.text:0000118B ; ---------------------------------------------------------------------------
.text:0000118B
.text:0000118B loc_118B:                               ; CODE XREF: _internal_add+42j
.text:0000118B                 mov     eax, [ebp+var_C]
.text:0000118E                 pop     esi
.text:0000118F                 add     esp, 0Ch
.text:00001192                 cmp     ebp, esp
.text:00001194                 call    __RTC_CheckEsp
.text:00001199                 mov     esp, ebp
.text:0000119B                 pop     ebp
.text:0000119C                 retn
.text:0000119C _internal_add   endp
.text:0000119C
.text:0000119C ; ---------------------------------------------------------------------------
.text:0000119D                 align 10h
.text:000011A0
.text:000011A0 ; =============== S U B R O U T I N E =======================================
.text:000011A0
.text:000011A0 ; Attributes: bp-based frame
.text:000011A0
.text:000011A0 _internal_sub   proc near               ; CODE XREF: _internal_mul+24Ap
.text:000011A0                                         ; _modpow+200p ...
.text:000011A0
.text:000011A0 var_C           = dword ptr -0Ch
.text:000011A0 var_8           = dword ptr -8
.text:000011A0 var_4           = dword ptr -4
.text:000011A0 arg_0           = dword ptr  8
.text:000011A0 arg_4           = dword ptr  0Ch
.text:000011A0 arg_8           = dword ptr  10h
.text:000011A0 arg_C           = dword ptr  14h
.text:000011A0
.text:000011A0                 push    ebp
.text:000011A1                 mov     ebp, esp
.text:000011A3                 sub     esp, 0Ch
.text:000011A6                 push    esi
.text:000011A7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000011AE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000011B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011BC                 mov     [ebp+var_C], 1
.text:000011C3                 mov     [ebp+var_8], 0
.text:000011CA                 mov     eax, [ebp+arg_C]
.text:000011CD                 sub     eax, 1
.text:000011D0                 mov     [ebp+var_4], eax
.text:000011D3                 jmp     short loc_11DE
.text:000011D5 ; ---------------------------------------------------------------------------
.text:000011D5
.text:000011D5 loc_11D5:                               ; CODE XREF: _internal_sub+8Cj
.text:000011D5                 mov     ecx, [ebp+var_4]
.text:000011D8                 sub     ecx, 1
.text:000011DB                 mov     [ebp+var_4], ecx
.text:000011DE
.text:000011DE loc_11DE:                               ; CODE XREF: _internal_sub+33j
.text:000011DE                 cmp     [ebp+var_4], 0
.text:000011E2                 jl      short loc_122E
.text:000011E4                 mov     edx, [ebp+var_4]
.text:000011E7                 mov     eax, [ebp+arg_0]
.text:000011EA                 mov     ecx, [eax+edx*4]
.text:000011ED                 xor     edx, edx
.text:000011EF                 mov     eax, [ebp+var_4]
.text:000011F2                 mov     esi, [ebp+arg_4]
.text:000011F5                 mov     eax, [esi+eax*4]
.text:000011F8                 xor     eax, 0FFFFFFFFh
.text:000011FB                 xor     esi, esi
.text:000011FD                 add     ecx, eax
.text:000011FF                 adc     edx, esi
.text:00001201                 add     ecx, [ebp+var_C]
.text:00001204                 adc     edx, [ebp+var_8]
.text:00001207                 mov     [ebp+var_C], ecx
.text:0000120A                 mov     [ebp+var_8], edx
.text:0000120D                 mov     ecx, [ebp+var_C]
.text:00001210                 mov     edx, [ebp+var_4]
.text:00001213                 mov     eax, [ebp+arg_8]
.text:00001216                 mov     [eax+edx*4], ecx
.text:00001219                 mov     eax, [ebp+var_C]
.text:0000121C                 mov     edx, [ebp+var_8]
.text:0000121F                 mov     cl, 20h ; ' '
.text:00001221                 call    __aullshr
.text:00001226                 mov     [ebp+var_C], eax
.text:00001229                 mov     [ebp+var_8], edx
.text:0000122C                 jmp     short loc_11D5
.text:0000122E ; ---------------------------------------------------------------------------
.text:0000122E
.text:0000122E loc_122E:                               ; CODE XREF: _internal_sub+42j
.text:0000122E                 pop     esi
.text:0000122F                 add     esp, 0Ch
.text:00001232                 cmp     ebp, esp
.text:00001234                 call    __RTC_CheckEsp
.text:00001239                 mov     esp, ebp
.text:0000123B                 pop     ebp
.text:0000123C                 retn
.text:0000123C _internal_sub   endp
.text:0000123C
.text:0000123C ; ---------------------------------------------------------------------------
.text:0000123D                 align 10h
.text:00001240
.text:00001240 ; =============== S U B R O U T I N E =======================================
.text:00001240
.text:00001240 ; Attributes: bp-based frame
.text:00001240
.text:00001240 _internal_mod   proc near               ; CODE XREF: _modpow_simple+2D6p
.text:00001240                                         ; _modpow_simple+330p ...
.text:00001240
.text:00001240 var_50          = dword ptr -50h
.text:00001240 var_4C          = dword ptr -4Ch
.text:00001240 var_48          = dword ptr -48h
.text:00001240 var_44          = dword ptr -44h
.text:00001240 var_40          = dword ptr -40h
.text:00001240 var_3C          = dword ptr -3Ch
.text:00001240 var_38          = dword ptr -38h
.text:00001240 var_34          = dword ptr -34h
.text:00001240 var_30          = dword ptr -30h
.text:00001240 var_2C          = dword ptr -2Ch
.text:00001240 var_28          = dword ptr -28h
.text:00001240 var_24          = dword ptr -24h
.text:00001240 var_20          = dword ptr -20h
.text:00001240 var_1C          = dword ptr -1Ch
.text:00001240 var_18          = dword ptr -18h
.text:00001240 var_14          = dword ptr -14h
.text:00001240 var_10          = dword ptr -10h
.text:00001240 var_C           = dword ptr -0Ch
.text:00001240 var_8           = dword ptr -8
.text:00001240 var_4           = dword ptr -4
.text:00001240 arg_0           = dword ptr  8
.text:00001240 arg_4           = dword ptr  0Ch
.text:00001240 arg_8           = dword ptr  10h
.text:00001240 arg_C           = dword ptr  14h
.text:00001240 arg_10          = dword ptr  18h
.text:00001240 arg_14          = dword ptr  1Ch
.text:00001240
.text:00001240                 push    ebp
.text:00001241                 mov     ebp, esp
.text:00001243                 sub     esp, 50h
.text:00001246                 push    esi
.text:00001247                 push    edi
.text:00001248                 lea     edi, [ebp+var_50]
.text:0000124B                 mov     ecx, 14h
.text:00001250                 mov     eax, 0CCCCCCCCh
.text:00001255                 rep stosd
.text:00001257                 mov     eax, [ebp+arg_8]
.text:0000125A                 mov     ecx, [eax]
.text:0000125C                 mov     [ebp+var_4], ecx
.text:0000125F                 mov     edx, [ebp+var_4]
.text:00001262                 shr     edx, 1Fh
.text:00001265                 cmp     edx, 1
.text:00001268                 jz      short loc_1281
.text:0000126A                 push    27Dh
.text:0000126F                 push    offset $SG7388  ; "..\\..\\..\\sshbn.c"
.text:00001274                 push    offset $SG7389  ; "m0 >> (BIGNUM_INT_BITS-1) == 1"
.text:00001279                 call    __wassert
.text:0000127E ; ---------------------------------------------------------------------------
.text:0000127E                 add     esp, 0Ch
.text:00001281
.text:00001281 loc_1281:                               ; CODE XREF: _internal_mod+28j
.text:00001281                 cmp     [ebp+arg_C], 1
.text:00001285                 jle     short loc_1292
.text:00001287                 mov     ecx, [ebp+arg_8]
.text:0000128A                 mov     edx, [ecx+4]
.text:0000128D                 mov     [ebp+var_8], edx
.text:00001290                 jmp     short loc_1299
.text:00001292 ; ---------------------------------------------------------------------------
.text:00001292
.text:00001292 loc_1292:                               ; CODE XREF: _internal_mod+45j
.text:00001292                 mov     [ebp+var_8], 0
.text:00001299
.text:00001299 loc_1299:                               ; CODE XREF: _internal_mod+50j
.text:00001299                 mov     [ebp+var_10], 0
.text:000012A0                 jmp     short loc_12AB
.text:000012A2 ; ---------------------------------------------------------------------------
.text:000012A2
.text:000012A2 loc_12A2:                               ; CODE XREF: _internal_mod:loc_1547j
.text:000012A2                 mov     eax, [ebp+var_10]
.text:000012A5                 add     eax, 1
.text:000012A8                 mov     [ebp+var_10], eax
.text:000012AB
.text:000012AB loc_12AB:                               ; CODE XREF: _internal_mod+60j
.text:000012AB                 mov     ecx, [ebp+arg_4]
.text:000012AE                 sub     ecx, [ebp+arg_C]
.text:000012B1                 cmp     [ebp+var_10], ecx
.text:000012B4                 jg      loc_154C
.text:000012BA                 cmp     [ebp+var_10], 0
.text:000012BE                 jnz     short loc_12C9
.text:000012C0                 mov     [ebp+var_C], 0
.text:000012C7                 jmp     short loc_12E4
.text:000012C9 ; ---------------------------------------------------------------------------
.text:000012C9
.text:000012C9 loc_12C9:                               ; CODE XREF: _internal_mod+7Ej
.text:000012C9                 mov     edx, [ebp+var_10]
.text:000012CC                 mov     eax, [ebp+arg_0]
.text:000012CF                 mov     ecx, [eax+edx*4-4]
.text:000012D3                 mov     [ebp+var_C], ecx
.text:000012D6                 mov     edx, [ebp+var_10]
.text:000012D9                 mov     eax, [ebp+arg_0]
.text:000012DC                 mov     dword ptr [eax+edx*4-4], 0
.text:000012E4
.text:000012E4 loc_12E4:                               ; CODE XREF: _internal_mod+87j
.text:000012E4                 mov     ecx, [ebp+arg_4]
.text:000012E7                 sub     ecx, 1
.text:000012EA                 cmp     [ebp+var_10], ecx
.text:000012ED                 jnz     short loc_12F8
.text:000012EF                 mov     [ebp+var_2C], 0
.text:000012F6                 jmp     short loc_1305
.text:000012F8 ; ---------------------------------------------------------------------------
.text:000012F8
.text:000012F8 loc_12F8:                               ; CODE XREF: _internal_mod+ADj
.text:000012F8                 mov     edx, [ebp+var_10]
.text:000012FB                 mov     eax, [ebp+arg_0]
.text:000012FE                 mov     ecx, [eax+edx*4+4]
.text:00001302                 mov     [ebp+var_2C], ecx
.text:00001305
.text:00001305 loc_1305:                               ; CODE XREF: _internal_mod+B6j
.text:00001305                 mov     edx, [ebp+var_C]
.text:00001308                 cmp     edx, [ebp+var_4]
.text:0000130B                 jb      short loc_1319
.text:0000130D                 mov     [ebp+var_20], 0FFFFFFFFh
.text:00001314                 jmp     loc_1400
.text:00001319 ; ---------------------------------------------------------------------------
.text:00001319
.text:00001319 loc_1319:                               ; CODE XREF: _internal_mod+CBj
.text:00001319                 mov     eax, [ebp+var_10]
.text:0000131C                 mov     ecx, [ebp+arg_0]
.text:0000131F                 mov     edx, [ecx+eax*4]
.text:00001322                 mov     [ebp+var_30], edx
.text:00001325
.text:00001325 loc_1325:                               ; CODE XREF: _internal_mod+F6j
.text:00001325                 mov     edx, [ebp+var_C]
.text:00001328                 mov     eax, [ebp+var_30]
.text:0000132B                 div     [ebp+var_4]
.text:0000132E                 mov     [ebp+var_24], edx
.text:00001331                 mov     [ebp+var_20], eax
.text:00001334                 xor     eax, eax
.text:00001336                 jnz     short loc_1325
.text:00001338                 mov     eax, [ebp+var_8]
.text:0000133B                 mov     ecx, [ebp+var_20]
.text:0000133E                 mul     ecx
.text:00001340                 mov     [ebp+var_1C], eax
.text:00001343                 mov     [ebp+var_18], edx
.text:00001346                 mov     eax, [ebp+var_24]
.text:00001349                 xor     edx, edx
.text:0000134B                 mov     cl, 20h ; ' '
.text:0000134D                 call    __allshl
.text:00001352                 mov     ecx, [ebp+var_2C]
.text:00001355                 xor     esi, esi
.text:00001357                 add     eax, ecx
.text:00001359                 adc     edx, esi
.text:0000135B                 mov     [ebp+var_38], eax
.text:0000135E                 mov     [ebp+var_34], edx
.text:00001361                 mov     edx, [ebp+var_18]
.text:00001364                 cmp     edx, [ebp+var_34]
.text:00001367                 jb      loc_1400
.text:0000136D                 ja      short loc_137B
.text:0000136F                 mov     eax, [ebp+var_1C]
.text:00001372                 cmp     eax, [ebp+var_38]
.text:00001375                 jbe     loc_1400
.text:0000137B
.text:0000137B loc_137B:                               ; CODE XREF: _internal_mod+12Dj
.text:0000137B                 mov     ecx, [ebp+var_20]
.text:0000137E                 sub     ecx, 1
.text:00001381                 mov     [ebp+var_20], ecx
.text:00001384                 mov     edx, [ebp+var_8]
.text:00001387                 xor     eax, eax
.text:00001389                 mov     ecx, [ebp+var_1C]
.text:0000138C                 sub     ecx, edx
.text:0000138E                 mov     edx, [ebp+var_18]
.text:00001391                 sbb     edx, eax
.text:00001393                 mov     [ebp+var_1C], ecx
.text:00001396                 mov     [ebp+var_18], edx
.text:00001399                 mov     eax, [ebp+var_24]
.text:0000139C                 add     eax, [ebp+var_4]
.text:0000139F                 mov     [ebp+var_24], eax
.text:000013A2                 mov     ecx, [ebp+var_24]
.text:000013A5                 xor     edx, edx
.text:000013A7                 mov     eax, [ebp+var_4]
.text:000013AA                 xor     esi, esi
.text:000013AC                 mov     [ebp+var_40], ecx
.text:000013AF                 mov     [ebp+var_3C], edx
.text:000013B2                 mov     [ebp+var_48], eax
.text:000013B5                 mov     [ebp+var_44], esi
.text:000013B8                 mov     ecx, [ebp+var_3C]
.text:000013BB                 cmp     ecx, [ebp+var_44]
.text:000013BE                 jb      short loc_1400
.text:000013C0                 ja      short loc_13CA
.text:000013C2                 mov     edx, [ebp+var_40]
.text:000013C5                 cmp     edx, [ebp+var_48]
.text:000013C8                 jb      short loc_1400
.text:000013CA
.text:000013CA loc_13CA:                               ; CODE XREF: _internal_mod+180j
.text:000013CA                 mov     eax, [ebp+var_24]
.text:000013CD                 xor     edx, edx
.text:000013CF                 mov     cl, 20h ; ' '
.text:000013D1                 call    __allshl
.text:000013D6                 mov     ecx, [ebp+var_2C]
.text:000013D9                 xor     esi, esi
.text:000013DB                 add     eax, ecx
.text:000013DD                 adc     edx, esi
.text:000013DF                 mov     [ebp+var_50], eax
.text:000013E2                 mov     [ebp+var_4C], edx
.text:000013E5                 mov     edx, [ebp+var_18]
.text:000013E8                 cmp     edx, [ebp+var_4C]
.text:000013EB                 jb      short loc_1400
.text:000013ED                 ja      short loc_13F7
.text:000013EF                 mov     eax, [ebp+var_1C]
.text:000013F2                 cmp     eax, [ebp+var_50]
.text:000013F5                 jbe     short loc_1400
.text:000013F7
.text:000013F7 loc_13F7:                               ; CODE XREF: _internal_mod+1ADj
.text:000013F7                 mov     ecx, [ebp+var_20]
.text:000013FA                 sub     ecx, 1
.text:000013FD                 mov     [ebp+var_20], ecx
.text:00001400
.text:00001400 loc_1400:                               ; CODE XREF: _internal_mod+D4j
.text:00001400                                         ; _internal_mod+127j ...
.text:00001400                 mov     [ebp+var_28], 0
.text:00001407                 mov     edx, [ebp+arg_C]
.text:0000140A                 sub     edx, 1
.text:0000140D                 mov     [ebp+var_14], edx
.text:00001410                 jmp     short loc_141B
.text:00001412 ; ---------------------------------------------------------------------------
.text:00001412
.text:00001412 loc_1412:                               ; CODE XREF: _internal_mod+24Dj
.text:00001412                 mov     eax, [ebp+var_14]
.text:00001415                 sub     eax, 1
.text:00001418                 mov     [ebp+var_14], eax
.text:0000141B
.text:0000141B loc_141B:                               ; CODE XREF: _internal_mod+1D0j
.text:0000141B                 cmp     [ebp+var_14], 0
.text:0000141F                 jl      short loc_148F
.text:00001421                 mov     eax, [ebp+var_20]
.text:00001424                 mov     ecx, [ebp+var_14]
.text:00001427                 mov     edx, [ebp+arg_8]
.text:0000142A                 mov     ecx, [edx+ecx*4]
.text:0000142D                 mul     ecx
.text:0000142F                 mov     [ebp+var_1C], eax
.text:00001432                 mov     [ebp+var_18], edx
.text:00001435                 mov     edx, [ebp+var_28]
.text:00001438                 xor     eax, eax
.text:0000143A                 add     edx, [ebp+var_1C]
.text:0000143D                 adc     eax, [ebp+var_18]
.text:00001440                 mov     [ebp+var_1C], edx
.text:00001443                 mov     [ebp+var_18], eax
.text:00001446                 mov     eax, [ebp+var_1C]
.text:00001449                 mov     edx, [ebp+var_18]
.text:0000144C                 mov     cl, 20h ; ' '
.text:0000144E                 call    __aullshr
.text:00001453                 mov     [ebp+var_28], eax
.text:00001456                 mov     ecx, [ebp+var_1C]
.text:00001459                 mov     edx, [ebp+var_10]
.text:0000145C                 add     edx, [ebp+var_14]
.text:0000145F                 mov     eax, [ebp+arg_0]
.text:00001462                 cmp     ecx, [eax+edx*4]
.text:00001465                 jbe     short loc_1470
.text:00001467                 mov     ecx, [ebp+var_28]
.text:0000146A                 add     ecx, 1
.text:0000146D                 mov     [ebp+var_28], ecx
.text:00001470
.text:00001470 loc_1470:                               ; CODE XREF: _internal_mod+225j
.text:00001470                 mov     edx, [ebp+var_10]
.text:00001473                 add     edx, [ebp+var_14]
.text:00001476                 mov     eax, [ebp+var_1C]
.text:00001479                 mov     ecx, [ebp+arg_0]
.text:0000147C                 mov     edx, [ecx+edx*4]
.text:0000147F                 sub     edx, eax
.text:00001481                 mov     eax, [ebp+var_10]
.text:00001484                 add     eax, [ebp+var_14]
.text:00001487                 mov     ecx, [ebp+arg_0]
.text:0000148A                 mov     [ecx+eax*4], edx
.text:0000148D                 jmp     short loc_1412
.text:0000148F ; ---------------------------------------------------------------------------
.text:0000148F
.text:0000148F loc_148F:                               ; CODE XREF: _internal_mod+1DFj
.text:0000148F                 mov     edx, [ebp+var_28]
.text:00001492                 cmp     edx, [ebp+var_C]
.text:00001495                 jz      loc_1521
.text:0000149B                 mov     [ebp+var_1C], 0
.text:000014A2                 mov     [ebp+var_18], 0
.text:000014A9                 mov     eax, [ebp+arg_C]
.text:000014AC                 sub     eax, 1
.text:000014AF                 mov     [ebp+var_14], eax
.text:000014B2                 jmp     short loc_14BD
.text:000014B4 ; ---------------------------------------------------------------------------
.text:000014B4
.text:000014B4 loc_14B4:                               ; CODE XREF: _internal_mod+2D6j
.text:000014B4                 mov     ecx, [ebp+var_14]
.text:000014B7                 sub     ecx, 1
.text:000014BA                 mov     [ebp+var_14], ecx
.text:000014BD
.text:000014BD loc_14BD:                               ; CODE XREF: _internal_mod+272j
.text:000014BD                 cmp     [ebp+var_14], 0
.text:000014C1                 jl      short loc_1518
.text:000014C3                 mov     edx, [ebp+var_14]
.text:000014C6                 mov     eax, [ebp+arg_8]
.text:000014C9                 mov     ecx, [eax+edx*4]
.text:000014CC                 xor     edx, edx
.text:000014CE                 add     ecx, [ebp+var_1C]
.text:000014D1                 adc     edx, [ebp+var_18]
.text:000014D4                 mov     [ebp+var_1C], ecx
.text:000014D7                 mov     [ebp+var_18], edx
.text:000014DA                 mov     eax, [ebp+var_10]
.text:000014DD                 add     eax, [ebp+var_14]
.text:000014E0                 mov     ecx, [ebp+arg_0]
.text:000014E3                 mov     edx, [ecx+eax*4]
.text:000014E6                 xor     eax, eax
.text:000014E8                 add     edx, [ebp+var_1C]
.text:000014EB                 adc     eax, [ebp+var_18]
.text:000014EE                 mov     [ebp+var_1C], edx
.text:000014F1                 mov     [ebp+var_18], eax
.text:000014F4                 mov     ecx, [ebp+var_1C]
.text:000014F7                 mov     edx, [ebp+var_10]
.text:000014FA                 add     edx, [ebp+var_14]
.text:000014FD                 mov     eax, [ebp+arg_0]
.text:00001500                 mov     [eax+edx*4], ecx
.text:00001503                 mov     eax, [ebp+var_1C]
.text:00001506                 mov     edx, [ebp+var_18]
.text:00001509                 mov     cl, 20h ; ' '
.text:0000150B                 call    __aullshr
.text:00001510                 mov     [ebp+var_1C], eax
.text:00001513                 mov     [ebp+var_18], edx
.text:00001516                 jmp     short loc_14B4
.text:00001518 ; ---------------------------------------------------------------------------
.text:00001518
.text:00001518 loc_1518:                               ; CODE XREF: _internal_mod+281j
.text:00001518                 mov     ecx, [ebp+var_20]
.text:0000151B                 sub     ecx, 1
.text:0000151E                 mov     [ebp+var_20], ecx
.text:00001521
.text:00001521 loc_1521:                               ; CODE XREF: _internal_mod+255j
.text:00001521                 cmp     [ebp+arg_10], 0
.text:00001525                 jz      short loc_1547
.text:00001527                 mov     edx, [ebp+arg_4]
.text:0000152A                 sub     edx, [ebp+arg_C]
.text:0000152D                 sub     edx, [ebp+var_10]
.text:00001530                 shl     edx, 5
.text:00001533                 add     edx, [ebp+arg_14]
.text:00001536                 push    edx
.text:00001537                 mov     eax, [ebp+var_20]
.text:0000153A                 push    eax
.text:0000153B                 mov     ecx, [ebp+arg_10]
.text:0000153E                 push    ecx
.text:0000153F                 call    _internal_add_shifted
.text:00001544                 add     esp, 0Ch
.text:00001547
.text:00001547 loc_1547:                               ; CODE XREF: _internal_mod+2E5j
.text:00001547                 jmp     loc_12A2
.text:0000154C ; ---------------------------------------------------------------------------
.text:0000154C
.text:0000154C loc_154C:                               ; CODE XREF: _internal_mod+74j
.text:0000154C                 pop     edi
.text:0000154D                 pop     esi
.text:0000154E                 add     esp, 50h
.text:00001551                 cmp     ebp, esp
.text:00001553                 call    __RTC_CheckEsp
.text:00001558                 mov     esp, ebp
.text:0000155A                 pop     ebp
.text:0000155B                 retn
.text:0000155B _internal_mod   endp
.text:0000155B
.text:0000155B ; ---------------------------------------------------------------------------
.text:0000155C                 align 10h
.text:00001560
.text:00001560 ; =============== S U B R O U T I N E =======================================
.text:00001560
.text:00001560 ; Attributes: bp-based frame
.text:00001560
.text:00001560 _internal_add_shifted proc near         ; CODE XREF: _internal_mod+2FFp
.text:00001560
.text:00001560 var_10          = dword ptr -10h
.text:00001560 var_C           = dword ptr -0Ch
.text:00001560 var_8           = dword ptr -8
.text:00001560 var_4           = dword ptr -4
.text:00001560 arg_0           = dword ptr  8
.text:00001560 arg_4           = dword ptr  0Ch
.text:00001560 arg_8           = dword ptr  10h
.text:00001560
.text:00001560                 push    ebp
.text:00001561                 mov     ebp, esp
.text:00001563                 sub     esp, 10h
.text:00001566                 mov     eax, 0CCCCCCCCh
.text:0000156B                 mov     [ebp+var_10], eax
.text:0000156E                 mov     [ebp+var_C], eax
.text:00001571                 mov     [ebp+var_8], eax
.text:00001574                 mov     [ebp+var_4], eax
.text:00001577                 mov     eax, [ebp+arg_8]
.text:0000157A                 cdq
.text:0000157B                 and     edx, 1Fh
.text:0000157E                 add     eax, edx
.text:00001580                 sar     eax, 5
.text:00001583                 add     eax, 1
.text:00001586                 mov     [ebp+var_4], eax
.text:00001589                 mov     eax, [ebp+arg_8]
.text:0000158C                 and     eax, 8000001Fh
.text:00001591                 jns     short loc_1598
.text:00001593                 dec     eax
.text:00001594                 or      eax, 0FFFFFFE0h
.text:00001597                 inc     eax
.text:00001598
.text:00001598 loc_1598:                               ; CODE XREF: _internal_add_shifted+31j
.text:00001598                 mov     [ebp+var_8], eax
.text:0000159B                 mov     eax, [ebp+arg_4]
.text:0000159E                 xor     edx, edx
.text:000015A0                 mov     ecx, [ebp+var_8]
.text:000015A3                 call    __allshl
.text:000015A8                 mov     [ebp+var_10], eax
.text:000015AB                 mov     [ebp+var_C], edx
.text:000015AE
.text:000015AE loc_15AE:                               ; CODE XREF: _internal_add_shifted+B6j
.text:000015AE                 mov     ecx, [ebp+var_10]
.text:000015B1                 or      ecx, [ebp+var_C]
.text:000015B4                 jz      short loc_1618
.text:000015B6                 mov     edx, [ebp+arg_0]
.text:000015B9                 mov     eax, [ebp+var_4]
.text:000015BC                 cmp     eax, [edx]
.text:000015BE                 jbe     short loc_15D7
.text:000015C0                 push    262h
.text:000015C5                 push    offset $SG7365  ; "..\\..\\..\\sshbn.c"
.text:000015CA                 push    offset $SG7366  ; "word <= number[0]"
.text:000015CF                 call    __wassert
.text:000015D4 ; ---------------------------------------------------------------------------
.text:000015D4                 add     esp, 0Ch
.text:000015D7
.text:000015D7 loc_15D7:                               ; CODE XREF: _internal_add_shifted+5Ej
.text:000015D7                 mov     edx, [ebp+var_4]
.text:000015DA                 mov     eax, [ebp+arg_0]
.text:000015DD                 mov     ecx, [eax+edx*4]
.text:000015E0                 xor     edx, edx
.text:000015E2                 add     ecx, [ebp+var_10]
.text:000015E5                 adc     edx, [ebp+var_C]
.text:000015E8                 mov     [ebp+var_10], ecx
.text:000015EB                 mov     [ebp+var_C], edx
.text:000015EE                 mov     eax, [ebp+var_10]
.text:000015F1                 mov     ecx, [ebp+var_4]
.text:000015F4                 mov     edx, [ebp+arg_0]
.text:000015F7                 mov     [edx+ecx*4], eax
.text:000015FA                 mov     eax, [ebp+var_10]
.text:000015FD                 mov     edx, [ebp+var_C]
.text:00001600                 mov     cl, 20h ; ' '
.text:00001602                 call    __aullshr
.text:00001607                 mov     [ebp+var_10], eax
.text:0000160A                 mov     [ebp+var_C], edx
.text:0000160D                 mov     eax, [ebp+var_4]
.text:00001610                 add     eax, 1
.text:00001613                 mov     [ebp+var_4], eax
.text:00001616                 jmp     short loc_15AE
.text:00001618 ; ---------------------------------------------------------------------------
.text:00001618
.text:00001618 loc_1618:                               ; CODE XREF: _internal_add_shifted+54j
.text:00001618                 add     esp, 10h
.text:0000161B                 cmp     ebp, esp
.text:0000161D                 call    __RTC_CheckEsp
.text:00001622                 mov     esp, ebp
.text:00001624                 pop     ebp
.text:00001625                 retn
.text:00001625 _internal_add_shifted endp
.text:00001625
.text:00001625 ; ---------------------------------------------------------------------------
.text:00001626                 align 10h
.text:00001630
.text:00001630 ; =============== S U B R O U T I N E =======================================
.text:00001630
.text:00001630 ; Attributes: bp-based frame
.text:00001630
.text:00001630 ; int __cdecl modpow(int, int, void *)
.text:00001630                 public _modpow
.text:00001630 _modpow         proc near
.text:00001630
.text:00001630 var_50          = dword ptr -50h
.text:00001630 var_4C          = dword ptr -4Ch
.text:00001630 var_48          = dword ptr -48h
.text:00001630 var_44          = dword ptr -44h
.text:00001630 var_40          = dword ptr -40h
.text:00001630 var_3C          = dword ptr -3Ch
.text:00001630 var_38          = dword ptr -38h
.text:00001630 var_34          = dword ptr -34h
.text:00001630 var_30          = dword ptr -30h
.text:00001630 var_2C          = dword ptr -2Ch
.text:00001630 var_28          = dword ptr -28h
.text:00001630 var_24          = dword ptr -24h
.text:00001630 var_20          = dword ptr -20h
.text:00001630 var_1C          = dword ptr -1Ch
.text:00001630 var_18          = dword ptr -18h
.text:00001630 var_14          = dword ptr -14h
.text:00001630 var_10          = dword ptr -10h
.text:00001630 var_C           = dword ptr -0Ch
.text:00001630 var_8           = dword ptr -8
.text:00001630 var_4           = dword ptr -4
.text:00001630 arg_0           = dword ptr  8
.text:00001630 arg_4           = dword ptr  0Ch
.text:00001630 arg_8           = dword ptr  10h
.text:00001630
.text:00001630                 push    ebp
.text:00001631                 mov     ebp, esp
.text:00001633                 sub     esp, 50h
.text:00001636                 push    esi
.text:00001637                 push    edi
.text:00001638                 lea     edi, [ebp+var_50]
.text:0000163B                 mov     ecx, 14h
.text:00001640                 mov     eax, 0CCCCCCCCh
.text:00001645                 rep stosd
.text:00001647                 mov     eax, [ebp+arg_8]
.text:0000164A                 mov     ecx, [eax]
.text:0000164C                 mov     edx, [ebp+arg_8]
.text:0000164F                 cmp     dword ptr [edx+ecx*4], 0
.text:00001653                 jnz     short loc_166C
.text:00001655                 push    35Bh
.text:0000165A                 push    offset $SG7539  ; "..\\..\\..\\sshbn.c"
.text:0000165F                 push    offset $SG7540  ; "mod[mod[0]] != 0"
.text:00001664                 call    __wassert
.text:00001669 ; ---------------------------------------------------------------------------
.text:00001669                 add     esp, 0Ch
.text:0000166C
.text:0000166C loc_166C:                               ; CODE XREF: _modpow+23j
.text:0000166C                 mov     ecx, [ebp+arg_8]
.text:0000166F                 mov     edx, [ecx+4]
.text:00001672                 and     edx, 1
.text:00001675                 jnz     short loc_1690
.text:00001677                 mov     eax, [ebp+arg_8]
.text:0000167A                 push    eax
.text:0000167B                 mov     ecx, [ebp+arg_4]
.text:0000167E                 push    ecx
.text:0000167F                 mov     edx, [ebp+arg_0]
.text:00001682                 push    edx
.text:00001683                 call    _modpow_simple
.text:00001688                 add     esp, 0Ch
.text:0000168B                 jmp     loc_1BBE
.text:00001690 ; ---------------------------------------------------------------------------
.text:00001690
.text:00001690 loc_1690:                               ; CODE XREF: _modpow+45j
.text:00001690                 mov     eax, [ebp+arg_8]
.text:00001693                 push    eax
.text:00001694                 mov     ecx, [ebp+arg_0]
.text:00001697                 push    ecx
.text:00001698                 call    _bigmod
.text:0000169D                 add     esp, 8
.text:000016A0                 mov     [ebp+var_2C], eax
.text:000016A3                 mov     edx, [ebp+arg_8]
.text:000016A6                 mov     eax, [edx]
.text:000016A8                 mov     [ebp+var_1C], eax
.text:000016AB                 mov     ecx, [ebp+var_1C]
.text:000016AE                 shl     ecx, 5
.text:000016B1                 push    ecx
.text:000016B2                 call    _bn_power_2
.text:000016B7                 add     esp, 4
.text:000016BA                 mov     [ebp+var_34], eax
.text:000016BD                 mov     edx, [ebp+var_34]
.text:000016C0                 push    edx             ; void *
.text:000016C1                 mov     eax, [ebp+arg_8]
.text:000016C4                 push    eax             ; void *
.text:000016C5                 call    _modinv
.text:000016CA                 add     esp, 8
.text:000016CD                 mov     [ebp+var_3C], eax
.text:000016D0                 cmp     [ebp+var_3C], 0
.text:000016D4                 jnz     short loc_16ED
.text:000016D6                 push    372h
.text:000016DB                 push    offset $SG7543  ; "..\\..\\..\\sshbn.c"
.text:000016E0                 push    offset $SG7544  ; "inv"
.text:000016E5                 call    __wassert
.text:000016EA ; ---------------------------------------------------------------------------
.text:000016EA                 add     esp, 0Ch
.text:000016ED
.text:000016ED loc_16ED:                               ; CODE XREF: _modpow+A4j
.text:000016ED                 mov     edx, [ebp+arg_8]
.text:000016F0                 push    edx
.text:000016F1                 mov     eax, [ebp+var_34]
.text:000016F4                 push    eax
.text:000016F5                 mov     ecx, [ebp+var_2C]
.text:000016F8                 push    ecx
.text:000016F9                 call    _modmul
.text:000016FE                 add     esp, 0Ch
.text:00001701                 mov     [ebp+var_30], eax
.text:00001704                 mov     edx, [ebp+var_2C]
.text:00001707                 push    edx
.text:00001708                 call    _freebn
.text:0000170D                 add     esp, 4
.text:00001710                 mov     eax, [ebp+var_30]
.text:00001713                 mov     [ebp+var_2C], eax
.text:00001716                 mov     ecx, [ebp+arg_8]
.text:00001719                 push    ecx
.text:0000171A                 mov     edx, [ebp+var_34]
.text:0000171D                 push    edx
.text:0000171E                 call    _bigmod
.text:00001723                 add     esp, 8
.text:00001726                 mov     [ebp+var_38], eax
.text:00001729                 mov     eax, [ebp+var_34]
.text:0000172C                 push    eax
.text:0000172D                 call    _freebn
.text:00001732                 add     esp, 4
.text:00001735                 push    4
.text:00001737                 mov     ecx, [ebp+var_1C]
.text:0000173A                 push    ecx
.text:0000173B                 call    _safemalloc
.text:00001740                 add     esp, 8
.text:00001743                 mov     [ebp+var_10], eax
.text:00001746                 mov     [ebp+var_28], 0
.text:0000174D                 jmp     short loc_1758
.text:0000174F ; ---------------------------------------------------------------------------
.text:0000174F
.text:0000174F loc_174F:                               ; CODE XREF: _modpow+149j
.text:0000174F                 mov     edx, [ebp+var_28]
.text:00001752                 add     edx, 1
.text:00001755                 mov     [ebp+var_28], edx
.text:00001758
.text:00001758 loc_1758:                               ; CODE XREF: _modpow+11Dj
.text:00001758                 mov     eax, [ebp+var_28]
.text:0000175B                 cmp     eax, [ebp+var_1C]
.text:0000175E                 jge     short loc_177B
.text:00001760                 mov     ecx, [ebp+var_1C]
.text:00001763                 sub     ecx, 1
.text:00001766                 sub     ecx, [ebp+var_28]
.text:00001769                 mov     edx, [ebp+var_10]
.text:0000176C                 mov     eax, [ebp+var_28]
.text:0000176F                 mov     esi, [ebp+arg_8]
.text:00001772                 mov     eax, [esi+eax*4+4]
.text:00001776                 mov     [edx+ecx*4], eax
.text:00001779                 jmp     short loc_174F
.text:0000177B ; ---------------------------------------------------------------------------
.text:0000177B
.text:0000177B loc_177B:                               ; CODE XREF: _modpow+12Ej
.text:0000177B                 push    4
.text:0000177D                 mov     ecx, [ebp+var_1C]
.text:00001780                 push    ecx
.text:00001781                 call    _safemalloc
.text:00001786                 add     esp, 8
.text:00001789                 mov     [ebp+var_14], eax
.text:0000178C                 mov     [ebp+var_28], 0
.text:00001793                 jmp     short loc_179E
.text:00001795 ; ---------------------------------------------------------------------------
.text:00001795
.text:00001795 loc_1795:                               ; CODE XREF: _modpow+1A8j
.text:00001795                 mov     edx, [ebp+var_28]
.text:00001798                 add     edx, 1
.text:0000179B                 mov     [ebp+var_28], edx
.text:0000179E
.text:0000179E loc_179E:                               ; CODE XREF: _modpow+163j
.text:0000179E                 mov     eax, [ebp+var_28]
.text:000017A1                 cmp     eax, [ebp+var_1C]
.text:000017A4                 jge     short loc_17DA
.text:000017A6                 mov     ecx, [ebp+var_3C]
.text:000017A9                 mov     edx, [ebp+var_28]
.text:000017AC                 cmp     edx, [ecx]
.text:000017AE                 jge     short loc_17BF
.text:000017B0                 mov     eax, [ebp+var_28]
.text:000017B3                 mov     ecx, [ebp+var_3C]
.text:000017B6                 mov     edx, [ecx+eax*4+4]
.text:000017BA                 mov     [ebp+var_48], edx
.text:000017BD                 jmp     short loc_17C6
.text:000017BF ; ---------------------------------------------------------------------------
.text:000017BF
.text:000017BF loc_17BF:                               ; CODE XREF: _modpow+17Ej
.text:000017BF                 mov     [ebp+var_48], 0
.text:000017C6
.text:000017C6 loc_17C6:                               ; CODE XREF: _modpow+18Dj
.text:000017C6                 mov     eax, [ebp+var_1C]
.text:000017C9                 sub     eax, 1
.text:000017CC                 sub     eax, [ebp+var_28]
.text:000017CF                 mov     ecx, [ebp+var_14]
.text:000017D2                 mov     edx, [ebp+var_48]
.text:000017D5                 mov     [ecx+eax*4], edx
.text:000017D8                 jmp     short loc_1795
.text:000017DA ; ---------------------------------------------------------------------------
.text:000017DA
.text:000017DA loc_17DA:                               ; CODE XREF: _modpow+174j
.text:000017DA                 mov     eax, [ebp+var_3C]
.text:000017DD                 push    eax
.text:000017DE                 call    _freebn
.text:000017E3                 add     esp, 4
.text:000017E6                 push    4
.text:000017E8                 mov     ecx, [ebp+var_1C]
.text:000017EB                 push    ecx
.text:000017EC                 call    _safemalloc
.text:000017F1                 add     esp, 8
.text:000017F4                 mov     [ebp+var_C], eax
.text:000017F7                 mov     [ebp+var_28], 0
.text:000017FE                 jmp     short loc_1809
.text:00001800 ; ---------------------------------------------------------------------------
.text:00001800
.text:00001800 loc_1800:                               ; CODE XREF: _modpow+1EEj
.text:00001800                 mov     edx, [ebp+var_28]
.text:00001803                 add     edx, 1
.text:00001806                 mov     [ebp+var_28], edx
.text:00001809
.text:00001809 loc_1809:                               ; CODE XREF: _modpow+1CEj
.text:00001809                 mov     eax, [ebp+var_28]
.text:0000180C                 cmp     eax, [ebp+var_1C]
.text:0000180F                 jge     short loc_1820
.text:00001811                 mov     ecx, [ebp+var_28]
.text:00001814                 mov     edx, [ebp+var_C]
.text:00001817                 mov     dword ptr [edx+ecx*4], 0
.text:0000181E                 jmp     short loc_1800
.text:00001820 ; ---------------------------------------------------------------------------
.text:00001820
.text:00001820 loc_1820:                               ; CODE XREF: _modpow+1DFj
.text:00001820                 mov     eax, [ebp+var_1C]
.text:00001823                 push    eax
.text:00001824                 mov     ecx, [ebp+var_14]
.text:00001827                 push    ecx
.text:00001828                 mov     edx, [ebp+var_14]
.text:0000182B                 push    edx
.text:0000182C                 mov     eax, [ebp+var_C]
.text:0000182F                 push    eax
.text:00001830                 call    _internal_sub
.text:00001835                 add     esp, 10h
.text:00001838                 mov     [ebp+var_28], 0
.text:0000183F                 jmp     short loc_184A
.text:00001841 ; ---------------------------------------------------------------------------
.text:00001841
.text:00001841 loc_1841:                               ; CODE XREF: _modpow+254j
.text:00001841                 mov     ecx, [ebp+var_28]
.text:00001844                 add     ecx, 1
.text:00001847                 mov     [ebp+var_28], ecx
.text:0000184A
.text:0000184A loc_184A:                               ; CODE XREF: _modpow+20Fj
.text:0000184A                 mov     edx, [ebp+var_28]
.text:0000184D                 cmp     edx, [ebp+var_1C]
.text:00001850                 jge     short loc_1886
.text:00001852                 mov     eax, [ebp+var_2C]
.text:00001855                 mov     ecx, [ebp+var_28]
.text:00001858                 cmp     ecx, [eax]
.text:0000185A                 jge     short loc_186B
.text:0000185C                 mov     edx, [ebp+var_28]
.text:0000185F                 mov     eax, [ebp+var_2C]
.text:00001862                 mov     ecx, [eax+edx*4+4]
.text:00001866                 mov     [ebp+var_4C], ecx
.text:00001869                 jmp     short loc_1872
.text:0000186B ; ---------------------------------------------------------------------------
.text:0000186B
.text:0000186B loc_186B:                               ; CODE XREF: _modpow+22Aj
.text:0000186B                 mov     [ebp+var_4C], 0
.text:00001872
.text:00001872 loc_1872:                               ; CODE XREF: _modpow+239j
.text:00001872                 mov     edx, [ebp+var_1C]
.text:00001875                 sub     edx, 1
.text:00001878                 sub     edx, [ebp+var_28]
.text:0000187B                 mov     eax, [ebp+var_C]
.text:0000187E                 mov     ecx, [ebp+var_4C]
.text:00001881                 mov     [eax+edx*4], ecx
.text:00001884                 jmp     short loc_1841
.text:00001886 ; ---------------------------------------------------------------------------
.text:00001886
.text:00001886 loc_1886:                               ; CODE XREF: _modpow+220j
.text:00001886                 mov     edx, [ebp+var_2C]
.text:00001889                 push    edx
.text:0000188A                 call    _freebn
.text:0000188F                 add     esp, 4
.text:00001892                 push    4
.text:00001894                 mov     eax, [ebp+var_1C]
.text:00001897                 shl     eax, 1
.text:00001899                 push    eax
.text:0000189A                 call    _safemalloc
.text:0000189F                 add     esp, 8
.text:000018A2                 mov     [ebp+var_4], eax
.text:000018A5                 push    4
.text:000018A7                 mov     ecx, [ebp+var_1C]
.text:000018AA                 shl     ecx, 1
.text:000018AC                 push    ecx
.text:000018AD                 call    _safemalloc
.text:000018B2                 add     esp, 8
.text:000018B5                 mov     [ebp+var_8], eax
.text:000018B8                 mov     [ebp+var_28], 0
.text:000018BF                 jmp     short loc_18CA
.text:000018C1 ; ---------------------------------------------------------------------------
.text:000018C1
.text:000018C1 loc_18C1:                               ; CODE XREF: _modpow+2D5j
.text:000018C1                 mov     edx, [ebp+var_28]
.text:000018C4                 add     edx, 1
.text:000018C7                 mov     [ebp+var_28], edx
.text:000018CA
.text:000018CA loc_18CA:                               ; CODE XREF: _modpow+28Fj
.text:000018CA                 mov     eax, [ebp+var_28]
.text:000018CD                 cmp     eax, [ebp+var_1C]
.text:000018D0                 jge     short loc_1907
.text:000018D2                 mov     ecx, [ebp+var_38]
.text:000018D5                 mov     edx, [ebp+var_28]
.text:000018D8                 cmp     edx, [ecx]
.text:000018DA                 jge     short loc_18EB
.text:000018DC                 mov     eax, [ebp+var_28]
.text:000018DF                 mov     ecx, [ebp+var_38]
.text:000018E2                 mov     edx, [ecx+eax*4+4]
.text:000018E6                 mov     [ebp+var_50], edx
.text:000018E9                 jmp     short loc_18F2
.text:000018EB ; ---------------------------------------------------------------------------
.text:000018EB
.text:000018EB loc_18EB:                               ; CODE XREF: _modpow+2AAj
.text:000018EB                 mov     [ebp+var_50], 0
.text:000018F2
.text:000018F2 loc_18F2:                               ; CODE XREF: _modpow+2B9j
.text:000018F2                 mov     eax, [ebp+var_1C]
.text:000018F5                 lea     ecx, [eax+eax-1]
.text:000018F9                 sub     ecx, [ebp+var_28]
.text:000018FC                 mov     edx, [ebp+var_4]
.text:000018FF                 mov     eax, [ebp+var_50]
.text:00001902                 mov     [edx+ecx*4], eax
.text:00001905                 jmp     short loc_18C1
.text:00001907 ; ---------------------------------------------------------------------------
.text:00001907
.text:00001907 loc_1907:                               ; CODE XREF: _modpow+2A0j
.text:00001907                 mov     ecx, [ebp+var_38]
.text:0000190A                 push    ecx
.text:0000190B                 call    _freebn
.text:00001910                 add     esp, 4
.text:00001913                 mov     esi, [ebp+var_1C]
.text:00001916                 imul    esi, 3
.text:00001919                 mov     edx, [ebp+var_1C]
.text:0000191C                 push    edx
.text:0000191D                 call    _mul_compute_scratch
.text:00001922                 add     esp, 4
.text:00001925                 add     esi, eax
.text:00001927                 mov     [ebp+var_20], esi
.text:0000192A                 push    4
.text:0000192C                 mov     eax, [ebp+var_20]
.text:0000192F                 push    eax
.text:00001930                 call    _safemalloc
.text:00001935                 add     esp, 8
.text:00001938                 mov     [ebp+var_18], eax
.text:0000193B                 mov     [ebp+var_24], 0
.text:00001942                 mov     [ebp+var_28], 1Fh
.text:00001949
.text:00001949 loc_1949:                               ; CODE XREF: _modpow:loc_1988j
.text:00001949                 mov     ecx, [ebp+arg_4]
.text:0000194C                 mov     edx, [ebp+var_24]
.text:0000194F                 cmp     edx, [ecx]
.text:00001951                 jge     short loc_198A
.text:00001953                 mov     eax, [ebp+arg_4]
.text:00001956                 mov     edx, [eax]
.text:00001958                 sub     edx, [ebp+var_24]
.text:0000195B                 mov     eax, 1
.text:00001960                 mov     ecx, [ebp+var_28]
.text:00001963                 shl     eax, cl
.text:00001965                 mov     ecx, [ebp+arg_4]
.text:00001968                 and     eax, [ecx+edx*4]
.text:0000196B                 jnz     short loc_198A
.text:0000196D                 mov     edx, [ebp+var_28]
.text:00001970                 sub     edx, 1
.text:00001973                 mov     [ebp+var_28], edx
.text:00001976                 jns     short loc_1988
.text:00001978                 mov     eax, [ebp+var_24]
.text:0000197B                 add     eax, 1
.text:0000197E                 mov     [ebp+var_24], eax
.text:00001981                 mov     [ebp+var_28], 1Fh
.text:00001988
.text:00001988 loc_1988:                               ; CODE XREF: _modpow+346j
.text:00001988                 jmp     short loc_1949
.text:0000198A ; ---------------------------------------------------------------------------
.text:0000198A
.text:0000198A loc_198A:                               ; CODE XREF: _modpow+321j
.text:0000198A                                         ; _modpow+33Bj ...
.text:0000198A                 mov     ecx, [ebp+arg_4]
.text:0000198D                 mov     edx, [ebp+var_24]
.text:00001990                 cmp     edx, [ecx]
.text:00001992                 jge     loc_1A75
.text:00001998
.text:00001998 loc_1998:                               ; CODE XREF: _modpow+42Bj
.text:00001998                 cmp     [ebp+var_28], 0
.text:0000199C                 jl      loc_1A60
.text:000019A2                 mov     eax, [ebp+var_18]
.text:000019A5                 push    eax
.text:000019A6                 mov     ecx, [ebp+var_1C]
.text:000019A9                 push    ecx
.text:000019AA                 mov     edx, [ebp+var_8]
.text:000019AD                 push    edx
.text:000019AE                 mov     eax, [ebp+var_1C]
.text:000019B1                 mov     ecx, [ebp+var_4]
.text:000019B4                 lea     edx, [ecx+eax*4]
.text:000019B7                 push    edx
.text:000019B8                 mov     eax, [ebp+var_1C]
.text:000019BB                 mov     ecx, [ebp+var_4]
.text:000019BE                 lea     edx, [ecx+eax*4]
.text:000019C1                 push    edx
.text:000019C2                 call    _internal_mul
.text:000019C7                 add     esp, 14h
.text:000019CA                 mov     eax, [ebp+var_1C]
.text:000019CD                 push    eax
.text:000019CE                 mov     ecx, [ebp+var_18]
.text:000019D1                 push    ecx
.text:000019D2                 mov     edx, [ebp+var_14]
.text:000019D5                 push    edx
.text:000019D6                 mov     eax, [ebp+var_10]
.text:000019D9                 push    eax
.text:000019DA                 mov     ecx, [ebp+var_8]
.text:000019DD                 push    ecx
.text:000019DE                 call    _monty_reduce
.text:000019E3                 add     esp, 14h
.text:000019E6                 mov     edx, [ebp+arg_4]
.text:000019E9                 mov     eax, [edx]
.text:000019EB                 sub     eax, [ebp+var_24]
.text:000019EE                 mov     edx, 1
.text:000019F3                 mov     ecx, [ebp+var_28]
.text:000019F6                 shl     edx, cl
.text:000019F8                 mov     ecx, [ebp+arg_4]
.text:000019FB                 and     edx, [ecx+eax*4]
.text:000019FE                 jz      short loc_1A40
.text:00001A00                 mov     edx, [ebp+var_18]
.text:00001A03                 push    edx
.text:00001A04                 mov     eax, [ebp+var_1C]
.text:00001A07                 push    eax
.text:00001A08                 mov     ecx, [ebp+var_4]
.text:00001A0B                 push    ecx
.text:00001A0C                 mov     edx, [ebp+var_C]
.text:00001A0F                 push    edx
.text:00001A10                 mov     eax, [ebp+var_1C]
.text:00001A13                 mov     ecx, [ebp+var_8]
.text:00001A16                 lea     edx, [ecx+eax*4]
.text:00001A19                 push    edx
.text:00001A1A                 call    _internal_mul
.text:00001A1F                 add     esp, 14h
.text:00001A22                 mov     eax, [ebp+var_1C]
.text:00001A25                 push    eax
.text:00001A26                 mov     ecx, [ebp+var_18]
.text:00001A29                 push    ecx
.text:00001A2A                 mov     edx, [ebp+var_14]
.text:00001A2D                 push    edx
.text:00001A2E                 mov     eax, [ebp+var_10]
.text:00001A31                 push    eax
.text:00001A32                 mov     ecx, [ebp+var_4]
.text:00001A35                 push    ecx
.text:00001A36                 call    _monty_reduce
.text:00001A3B                 add     esp, 14h
.text:00001A3E                 jmp     short loc_1A52
.text:00001A40 ; ---------------------------------------------------------------------------
.text:00001A40
.text:00001A40 loc_1A40:                               ; CODE XREF: _modpow+3CEj
.text:00001A40                 mov     edx, [ebp+var_4]
.text:00001A43                 mov     [ebp+var_44], edx
.text:00001A46                 mov     eax, [ebp+var_8]
.text:00001A49                 mov     [ebp+var_4], eax
.text:00001A4C                 mov     ecx, [ebp+var_44]
.text:00001A4F                 mov     [ebp+var_8], ecx
.text:00001A52
.text:00001A52 loc_1A52:                               ; CODE XREF: _modpow+40Ej
.text:00001A52                 mov     edx, [ebp+var_28]
.text:00001A55                 sub     edx, 1
.text:00001A58                 mov     [ebp+var_28], edx
.text:00001A5B                 jmp     loc_1998
.text:00001A60 ; ---------------------------------------------------------------------------
.text:00001A60
.text:00001A60 loc_1A60:                               ; CODE XREF: _modpow+36Cj
.text:00001A60                 mov     eax, [ebp+var_24]
.text:00001A63                 add     eax, 1
.text:00001A66                 mov     [ebp+var_24], eax
.text:00001A69                 mov     [ebp+var_28], 1Fh
.text:00001A70                 jmp     loc_198A
.text:00001A75 ; ---------------------------------------------------------------------------
.text:00001A75
.text:00001A75 loc_1A75:                               ; CODE XREF: _modpow+362j
.text:00001A75                 mov     ecx, [ebp+var_1C]
.text:00001A78                 push    ecx
.text:00001A79                 mov     edx, [ebp+var_18]
.text:00001A7C                 push    edx
.text:00001A7D                 mov     eax, [ebp+var_14]
.text:00001A80                 push    eax
.text:00001A81                 mov     ecx, [ebp+var_10]
.text:00001A84                 push    ecx
.text:00001A85                 mov     edx, [ebp+var_4]
.text:00001A88                 push    edx
.text:00001A89                 call    _monty_reduce
.text:00001A8E                 add     esp, 14h
.text:00001A91                 mov     eax, [ebp+arg_8]
.text:00001A94                 mov     ecx, [eax]
.text:00001A96                 push    ecx
.text:00001A97                 call    _newbn
.text:00001A9C                 add     esp, 4
.text:00001A9F                 mov     [ebp+var_40], eax
.text:00001AA2                 mov     [ebp+var_24], 0
.text:00001AA9                 jmp     short loc_1AB4
.text:00001AAB ; ---------------------------------------------------------------------------
.text:00001AAB
.text:00001AAB loc_1AAB:                               ; CODE XREF: _modpow+4A6j
.text:00001AAB                 mov     edx, [ebp+var_24]
.text:00001AAE                 add     edx, 1
.text:00001AB1                 mov     [ebp+var_24], edx
.text:00001AB4
.text:00001AB4 loc_1AB4:                               ; CODE XREF: _modpow+479j
.text:00001AB4                 mov     eax, [ebp+var_24]
.text:00001AB7                 cmp     eax, [ebp+var_1C]
.text:00001ABA                 jge     short loc_1AD8
.text:00001ABC                 mov     ecx, [ebp+var_24]
.text:00001ABF                 add     ecx, [ebp+var_1C]
.text:00001AC2                 mov     edx, [ebp+var_40]
.text:00001AC5                 mov     eax, [edx]
.text:00001AC7                 sub     eax, [ebp+var_24]
.text:00001ACA                 mov     edx, [ebp+var_40]
.text:00001ACD                 mov     esi, [ebp+var_4]
.text:00001AD0                 mov     ecx, [esi+ecx*4]
.text:00001AD3                 mov     [edx+eax*4], ecx
.text:00001AD6                 jmp     short loc_1AAB
.text:00001AD8 ; ---------------------------------------------------------------------------
.text:00001AD8
.text:00001AD8 loc_1AD8:                               ; CODE XREF: _modpow+48Aj
.text:00001AD8                                         ; _modpow+4CBj
.text:00001AD8                 mov     edx, [ebp+var_40]
.text:00001ADB                 cmp     dword ptr [edx], 1
.text:00001ADE                 jbe     short loc_1AFD
.text:00001AE0                 mov     eax, [ebp+var_40]
.text:00001AE3                 mov     ecx, [eax]
.text:00001AE5                 mov     edx, [ebp+var_40]
.text:00001AE8                 cmp     dword ptr [edx+ecx*4], 0
.text:00001AEC                 jnz     short loc_1AFD
.text:00001AEE                 mov     eax, [ebp+var_40]
.text:00001AF1                 mov     ecx, [eax]
.text:00001AF3                 sub     ecx, 1
.text:00001AF6                 mov     edx, [ebp+var_40]
.text:00001AF9                 mov     [edx], ecx
.text:00001AFB                 jmp     short loc_1AD8
.text:00001AFD ; ---------------------------------------------------------------------------
.text:00001AFD
.text:00001AFD loc_1AFD:                               ; CODE XREF: _modpow+4AEj
.text:00001AFD                                         ; _modpow+4BCj
.text:00001AFD                 mov     eax, [ebp+var_20]
.text:00001B00                 shl     eax, 2
.text:00001B03                 push    eax
.text:00001B04                 mov     ecx, [ebp+var_18]
.text:00001B07                 push    ecx
.text:00001B08                 call    _smemclr
.text:00001B0D                 add     esp, 8
.text:00001B10                 mov     edx, [ebp+var_18]
.text:00001B13                 push    edx
.text:00001B14                 call    _safefree
.text:00001B19                 add     esp, 4
.text:00001B1C                 mov     eax, [ebp+var_1C]
.text:00001B1F                 shl     eax, 1
.text:00001B21                 shl     eax, 2
.text:00001B24                 push    eax
.text:00001B25                 mov     ecx, [ebp+var_4]
.text:00001B28                 push    ecx
.text:00001B29                 call    _smemclr
.text:00001B2E                 add     esp, 8
.text:00001B31                 mov     edx, [ebp+var_4]
.text:00001B34                 push    edx
.text:00001B35                 call    _safefree
.text:00001B3A                 add     esp, 4
.text:00001B3D                 mov     eax, [ebp+var_1C]
.text:00001B40                 shl     eax, 1
.text:00001B42                 shl     eax, 2
.text:00001B45                 push    eax
.text:00001B46                 mov     ecx, [ebp+var_8]
.text:00001B49                 push    ecx
.text:00001B4A                 call    _smemclr
.text:00001B4F                 add     esp, 8
.text:00001B52                 mov     edx, [ebp+var_8]
.text:00001B55                 push    edx
.text:00001B56                 call    _safefree
.text:00001B5B                 add     esp, 4
.text:00001B5E                 mov     eax, [ebp+var_1C]
.text:00001B61                 shl     eax, 2
.text:00001B64                 push    eax
.text:00001B65                 mov     ecx, [ebp+var_14]
.text:00001B68                 push    ecx
.text:00001B69                 call    _smemclr
.text:00001B6E                 add     esp, 8
.text:00001B71                 mov     edx, [ebp+var_14]
.text:00001B74                 push    edx
.text:00001B75                 call    _safefree
.text:00001B7A                 add     esp, 4
.text:00001B7D                 mov     eax, [ebp+var_1C]
.text:00001B80                 shl     eax, 2
.text:00001B83                 push    eax
.text:00001B84                 mov     ecx, [ebp+var_10]
.text:00001B87                 push    ecx
.text:00001B88                 call    _smemclr
.text:00001B8D                 add     esp, 8
.text:00001B90                 mov     edx, [ebp+var_10]
.text:00001B93                 push    edx
.text:00001B94                 call    _safefree
.text:00001B99                 add     esp, 4
.text:00001B9C                 mov     eax, [ebp+var_1C]
.text:00001B9F                 shl     eax, 2
.text:00001BA2                 push    eax
.text:00001BA3                 mov     ecx, [ebp+var_C]
.text:00001BA6                 push    ecx
.text:00001BA7                 call    _smemclr
.text:00001BAC                 add     esp, 8
.text:00001BAF                 mov     edx, [ebp+var_C]
.text:00001BB2                 push    edx
.text:00001BB3                 call    _safefree
.text:00001BB8                 add     esp, 4
.text:00001BBB                 mov     eax, [ebp+var_40]
.text:00001BBE
.text:00001BBE loc_1BBE:                               ; CODE XREF: _modpow+5Bj
.text:00001BBE                 pop     edi
.text:00001BBF                 pop     esi
.text:00001BC0                 add     esp, 50h
.text:00001BC3                 cmp     ebp, esp
.text:00001BC5                 call    __RTC_CheckEsp
.text:00001BCA                 mov     esp, ebp
.text:00001BCC                 pop     ebp
.text:00001BCD                 retn
.text:00001BCD _modpow         endp
.text:00001BCD
.text:00001BCD ; ---------------------------------------------------------------------------
.text:00001BCE                 align 10h
.text:00001BD0
.text:00001BD0 ; =============== S U B R O U T I N E =======================================
.text:00001BD0
.text:00001BD0 ; Attributes: bp-based frame
.text:00001BD0
.text:00001BD0 _monty_reduce   proc near               ; CODE XREF: _modpow+3AEp
.text:00001BD0                                         ; _modpow+406p ...
.text:00001BD0
.text:00001BD0 var_8           = dword ptr -8
.text:00001BD0 var_4           = dword ptr -4
.text:00001BD0 arg_0           = dword ptr  8
.text:00001BD0 arg_4           = dword ptr  0Ch
.text:00001BD0 arg_8           = dword ptr  10h
.text:00001BD0 arg_C           = dword ptr  14h
.text:00001BD0 arg_10          = dword ptr  18h
.text:00001BD0
.text:00001BD0                 push    ebp
.text:00001BD1                 mov     ebp, esp
.text:00001BD3                 sub     esp, 8
.text:00001BD6                 push    esi
.text:00001BD7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001BDE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BE5                 mov     eax, [ebp+arg_10]
.text:00001BE8                 imul    eax, 3
.text:00001BEB                 mov     ecx, [ebp+arg_C]
.text:00001BEE                 lea     edx, [ecx+eax*4]
.text:00001BF1                 push    edx
.text:00001BF2                 mov     eax, [ebp+arg_10]
.text:00001BF5                 push    eax
.text:00001BF6                 mov     ecx, [ebp+arg_C]
.text:00001BF9                 push    ecx
.text:00001BFA                 mov     edx, [ebp+arg_8]
.text:00001BFD                 push    edx
.text:00001BFE                 mov     eax, [ebp+arg_10]
.text:00001C01                 mov     ecx, [ebp+arg_0]
.text:00001C04                 lea     edx, [ecx+eax*4]
.text:00001C07                 push    edx
.text:00001C08                 call    _internal_mul_low
.text:00001C0D                 add     esp, 14h
.text:00001C10                 mov     eax, [ebp+arg_10]
.text:00001C13                 imul    eax, 3
.text:00001C16                 mov     ecx, [ebp+arg_C]
.text:00001C19                 lea     edx, [ecx+eax*4]
.text:00001C1C                 push    edx
.text:00001C1D                 mov     eax, [ebp+arg_10]
.text:00001C20                 push    eax
.text:00001C21                 mov     ecx, [ebp+arg_10]
.text:00001C24                 mov     edx, [ebp+arg_C]
.text:00001C27                 lea     eax, [edx+ecx*4]
.text:00001C2A                 push    eax
.text:00001C2B                 mov     ecx, [ebp+arg_4]
.text:00001C2E                 push    ecx
.text:00001C2F                 mov     edx, [ebp+arg_C]
.text:00001C32                 push    edx
.text:00001C33                 call    _internal_mul
.text:00001C38                 add     esp, 14h
.text:00001C3B                 mov     eax, [ebp+arg_10]
.text:00001C3E                 shl     eax, 1
.text:00001C40                 push    eax
.text:00001C41                 mov     ecx, [ebp+arg_0]
.text:00001C44                 push    ecx
.text:00001C45                 mov     edx, [ebp+arg_10]
.text:00001C48                 mov     eax, [ebp+arg_C]
.text:00001C4B                 lea     ecx, [eax+edx*4]
.text:00001C4E                 push    ecx
.text:00001C4F                 mov     edx, [ebp+arg_0]
.text:00001C52                 push    edx
.text:00001C53                 call    _internal_add
.text:00001C58                 add     esp, 10h
.text:00001C5B                 mov     [ebp+var_8], eax
.text:00001C5E                 mov     [ebp+var_4], 0
.text:00001C65                 jmp     short loc_1C70
.text:00001C67 ; ---------------------------------------------------------------------------
.text:00001C67
.text:00001C67 loc_1C67:                               ; CODE XREF: _monty_reduce+CAj
.text:00001C67                 mov     eax, [ebp+var_4]
.text:00001C6A                 add     eax, 1
.text:00001C6D                 mov     [ebp+var_4], eax
.text:00001C70
.text:00001C70 loc_1C70:                               ; CODE XREF: _monty_reduce+95j
.text:00001C70                 mov     ecx, [ebp+var_4]
.text:00001C73                 cmp     ecx, [ebp+arg_10]
.text:00001C76                 jge     short loc_1C9C
.text:00001C78                 mov     edx, [ebp+arg_10]
.text:00001C7B                 add     edx, [ebp+var_4]
.text:00001C7E                 mov     eax, [ebp+arg_0]
.text:00001C81                 mov     ecx, [ebp+var_4]
.text:00001C84                 mov     esi, [ebp+arg_0]
.text:00001C87                 mov     ecx, [esi+ecx*4]
.text:00001C8A                 mov     [eax+edx*4], ecx
.text:00001C8D                 mov     edx, [ebp+var_4]
.text:00001C90                 mov     eax, [ebp+arg_0]
.text:00001C93                 mov     dword ptr [eax+edx*4], 0
.text:00001C9A                 jmp     short loc_1C67
.text:00001C9C ; ---------------------------------------------------------------------------
.text:00001C9C
.text:00001C9C loc_1C9C:                               ; CODE XREF: _monty_reduce+A6j
.text:00001C9C                 cmp     [ebp+var_8], 0
.text:00001CA0                 jnz     short loc_1CD7
.text:00001CA2                 mov     [ebp+var_4], 0
.text:00001CA9                 jmp     short loc_1CB4
.text:00001CAB ; ---------------------------------------------------------------------------
.text:00001CAB
.text:00001CAB loc_1CAB:                               ; CODE XREF: _monty_reduce:loc_1CD5j
.text:00001CAB                 mov     ecx, [ebp+var_4]
.text:00001CAE                 add     ecx, 1
.text:00001CB1                 mov     [ebp+var_4], ecx
.text:00001CB4
.text:00001CB4 loc_1CB4:                               ; CODE XREF: _monty_reduce+D9j
.text:00001CB4                 mov     edx, [ebp+var_4]
.text:00001CB7                 cmp     edx, [ebp+arg_10]
.text:00001CBA                 jge     short loc_1CD7
.text:00001CBC                 mov     eax, [ebp+arg_10]
.text:00001CBF                 add     eax, [ebp+var_4]
.text:00001CC2                 mov     ecx, [ebp+arg_0]
.text:00001CC5                 mov     edx, [ebp+var_4]
.text:00001CC8                 mov     esi, [ebp+arg_4]
.text:00001CCB                 mov     eax, [ecx+eax*4]
.text:00001CCE                 cmp     eax, [esi+edx*4]
.text:00001CD1                 jz      short loc_1CD5
.text:00001CD3                 jmp     short loc_1CD7
.text:00001CD5 ; ---------------------------------------------------------------------------
.text:00001CD5
.text:00001CD5 loc_1CD5:                               ; CODE XREF: _monty_reduce+101j
.text:00001CD5                 jmp     short loc_1CAB
.text:00001CD7 ; ---------------------------------------------------------------------------
.text:00001CD7
.text:00001CD7 loc_1CD7:                               ; CODE XREF: _monty_reduce+D0j
.text:00001CD7                                         ; _monty_reduce+EAj ...
.text:00001CD7                 cmp     [ebp+var_8], 0
.text:00001CDB                 jnz     short loc_1CFC
.text:00001CDD                 mov     ecx, [ebp+var_4]
.text:00001CE0                 cmp     ecx, [ebp+arg_10]
.text:00001CE3                 jge     short loc_1CFC
.text:00001CE5                 mov     edx, [ebp+arg_10]
.text:00001CE8                 add     edx, [ebp+var_4]
.text:00001CEB                 mov     eax, [ebp+arg_0]
.text:00001CEE                 mov     ecx, [ebp+var_4]
.text:00001CF1                 mov     esi, [ebp+arg_4]
.text:00001CF4                 mov     edx, [eax+edx*4]
.text:00001CF7                 cmp     edx, [esi+ecx*4]
.text:00001CFA                 jbe     short loc_1D20
.text:00001CFC
.text:00001CFC loc_1CFC:                               ; CODE XREF: _monty_reduce+10Bj
.text:00001CFC                                         ; _monty_reduce+113j
.text:00001CFC                 mov     eax, [ebp+arg_10]
.text:00001CFF                 push    eax
.text:00001D00                 mov     ecx, [ebp+arg_10]
.text:00001D03                 mov     edx, [ebp+arg_0]
.text:00001D06                 lea     eax, [edx+ecx*4]
.text:00001D09                 push    eax
.text:00001D0A                 mov     ecx, [ebp+arg_4]
.text:00001D0D                 push    ecx
.text:00001D0E                 mov     edx, [ebp+arg_10]
.text:00001D11                 mov     eax, [ebp+arg_0]
.text:00001D14                 lea     ecx, [eax+edx*4]
.text:00001D17                 push    ecx
.text:00001D18                 call    _internal_sub
.text:00001D1D                 add     esp, 10h
.text:00001D20
.text:00001D20 loc_1D20:                               ; CODE XREF: _monty_reduce+12Aj
.text:00001D20                 pop     esi
.text:00001D21                 add     esp, 8
.text:00001D24                 cmp     ebp, esp
.text:00001D26                 call    __RTC_CheckEsp
.text:00001D2B                 mov     esp, ebp
.text:00001D2D                 pop     ebp
.text:00001D2E                 retn
.text:00001D2E _monty_reduce   endp
.text:00001D2E
.text:00001D2E ; ---------------------------------------------------------------------------
.text:00001D2F                 align 10h
.text:00001D30
.text:00001D30 ; =============== S U B R O U T I N E =======================================
.text:00001D30
.text:00001D30 ; Attributes: bp-based frame
.text:00001D30
.text:00001D30 _internal_mul_low proc near             ; CODE XREF: _monty_reduce+38p
.text:00001D30                                         ; _internal_mul_low+9Dp ...
.text:00001D30
.text:00001D30 var_34          = dword ptr -34h
.text:00001D30 var_30          = dword ptr -30h
.text:00001D30 var_2C          = dword ptr -2Ch
.text:00001D30 var_28          = dword ptr -28h
.text:00001D30 var_24          = dword ptr -24h
.text:00001D30 var_20          = dword ptr -20h
.text:00001D30 var_1C          = dword ptr -1Ch
.text:00001D30 var_18          = dword ptr -18h
.text:00001D30 var_14          = dword ptr -14h
.text:00001D30 var_10          = dword ptr -10h
.text:00001D30 var_C           = dword ptr -0Ch
.text:00001D30 var_8           = dword ptr -8
.text:00001D30 var_4           = dword ptr -4
.text:00001D30 arg_0           = dword ptr  8
.text:00001D30 arg_4           = dword ptr  0Ch
.text:00001D30 arg_8           = dword ptr  10h
.text:00001D30 arg_C           = dword ptr  14h
.text:00001D30 arg_10          = dword ptr  18h
.text:00001D30
.text:00001D30                 push    ebp
.text:00001D31                 mov     ebp, esp
.text:00001D33                 sub     esp, 34h
.text:00001D36                 push    esi
.text:00001D37                 push    edi
.text:00001D38                 lea     edi, [ebp+var_34]
.text:00001D3B                 mov     ecx, 0Dh
.text:00001D40                 mov     eax, 0CCCCCCCCh
.text:00001D45                 rep stosd
.text:00001D47                 cmp     [ebp+arg_C], 32h ; '2'
.text:00001D4B                 jle     loc_1E92
.text:00001D51                 mov     eax, [ebp+arg_C]
.text:00001D54                 cdq
.text:00001D55                 sub     eax, edx
.text:00001D57                 sar     eax, 1
.text:00001D59                 mov     [ebp+var_8], eax
.text:00001D5C                 mov     eax, [ebp+arg_C]
.text:00001D5F                 sub     eax, [ebp+var_8]
.text:00001D62                 mov     [ebp+var_C], eax
.text:00001D65                 mov     ecx, [ebp+arg_C]
.text:00001D68                 shl     ecx, 1
.text:00001D6A                 mov     edx, [ebp+arg_10]
.text:00001D6D                 lea     eax, [edx+ecx*4]
.text:00001D70                 push    eax
.text:00001D71                 mov     ecx, [ebp+var_C]
.text:00001D74                 push    ecx
.text:00001D75                 mov     edx, [ebp+var_8]
.text:00001D78                 shl     edx, 1
.text:00001D7A                 mov     eax, [ebp+arg_10]
.text:00001D7D                 lea     ecx, [eax+edx*4]
.text:00001D80                 push    ecx
.text:00001D81                 mov     edx, [ebp+var_8]
.text:00001D84                 mov     eax, [ebp+arg_4]
.text:00001D87                 lea     ecx, [eax+edx*4]
.text:00001D8A                 push    ecx
.text:00001D8B                 mov     edx, [ebp+var_8]
.text:00001D8E                 mov     eax, [ebp+arg_0]
.text:00001D91                 lea     ecx, [eax+edx*4]
.text:00001D94                 push    ecx
.text:00001D95                 call    _internal_mul
.text:00001D9A                 add     esp, 14h
.text:00001D9D                 mov     edx, [ebp+arg_C]
.text:00001DA0                 shl     edx, 1
.text:00001DA2                 mov     eax, [ebp+arg_10]
.text:00001DA5                 lea     ecx, [eax+edx*4]
.text:00001DA8                 push    ecx
.text:00001DA9                 mov     edx, [ebp+var_8]
.text:00001DAC                 push    edx
.text:00001DAD                 mov     eax, [ebp+var_8]
.text:00001DB0                 mov     ecx, [ebp+arg_10]
.text:00001DB3                 lea     edx, [ecx+eax*4]
.text:00001DB6                 push    edx
.text:00001DB7                 mov     eax, [ebp+arg_C]
.text:00001DBA                 mov     ecx, [ebp+arg_4]
.text:00001DBD                 lea     edx, [ecx+eax*4]
.text:00001DC0                 mov     eax, [ebp+var_8]
.text:00001DC3                 shl     eax, 2
.text:00001DC6                 sub     edx, eax
.text:00001DC8                 push    edx
.text:00001DC9                 mov     ecx, [ebp+arg_0]
.text:00001DCC                 push    ecx
.text:00001DCD                 call    _internal_mul_low
.text:00001DD2                 add     esp, 14h
.text:00001DD5                 mov     edx, [ebp+arg_C]
.text:00001DD8                 shl     edx, 1
.text:00001DDA                 mov     eax, [ebp+arg_10]
.text:00001DDD                 lea     ecx, [eax+edx*4]
.text:00001DE0                 push    ecx
.text:00001DE1                 mov     edx, [ebp+var_8]
.text:00001DE4                 push    edx
.text:00001DE5                 mov     eax, [ebp+arg_10]
.text:00001DE8                 push    eax
.text:00001DE9                 mov     ecx, [ebp+arg_4]
.text:00001DEC                 push    ecx
.text:00001DED                 mov     edx, [ebp+arg_C]
.text:00001DF0                 mov     eax, [ebp+arg_0]
.text:00001DF3                 lea     ecx, [eax+edx*4]
.text:00001DF6                 mov     edx, [ebp+var_8]
.text:00001DF9                 shl     edx, 2
.text:00001DFC                 sub     ecx, edx
.text:00001DFE                 push    ecx
.text:00001DFF                 call    _internal_mul_low
.text:00001E04                 add     esp, 14h
.text:00001E07                 mov     [ebp+var_4], 0
.text:00001E0E                 jmp     short loc_1E19
.text:00001E10 ; ---------------------------------------------------------------------------
.text:00001E10
.text:00001E10 loc_1E10:                               ; CODE XREF: _internal_mul_low+10Fj
.text:00001E10                 mov     eax, [ebp+var_4]
.text:00001E13                 add     eax, 1
.text:00001E16                 mov     [ebp+var_4], eax
.text:00001E19
.text:00001E19 loc_1E19:                               ; CODE XREF: _internal_mul_low+DEj
.text:00001E19                 mov     ecx, [ebp+var_4]
.text:00001E1C                 cmp     ecx, [ebp+var_C]
.text:00001E1F                 jge     short loc_1E41
.text:00001E21                 mov     edx, [ebp+var_8]
.text:00001E24                 mov     eax, [ebp+var_C]
.text:00001E27                 lea     ecx, [eax+edx*2]
.text:00001E2A                 add     ecx, [ebp+var_4]
.text:00001E2D                 mov     edx, [ebp+var_8]
.text:00001E30                 add     edx, [ebp+var_4]
.text:00001E33                 mov     eax, [ebp+arg_8]
.text:00001E36                 mov     esi, [ebp+arg_10]
.text:00001E39                 mov     ecx, [esi+ecx*4]
.text:00001E3C                 mov     [eax+edx*4], ecx
.text:00001E3F                 jmp     short loc_1E10
.text:00001E41 ; ---------------------------------------------------------------------------
.text:00001E41
.text:00001E41 loc_1E41:                               ; CODE XREF: _internal_mul_low+EFj
.text:00001E41                 mov     edx, [ebp+var_8]
.text:00001E44                 push    edx
.text:00001E45                 mov     eax, [ebp+arg_10]
.text:00001E48                 push    eax
.text:00001E49                 mov     ecx, [ebp+var_8]
.text:00001E4C                 mov     edx, [ebp+arg_10]
.text:00001E4F                 lea     eax, [edx+ecx*4]
.text:00001E52                 push    eax
.text:00001E53                 mov     ecx, [ebp+arg_10]
.text:00001E56                 push    ecx
.text:00001E57                 call    _internal_add
.text:00001E5C                 add     esp, 10h
.text:00001E5F                 mov     edx, [ebp+var_8]
.text:00001E62                 push    edx
.text:00001E63                 mov     eax, [ebp+arg_8]
.text:00001E66                 push    eax
.text:00001E67                 mov     ecx, [ebp+var_8]
.text:00001E6A                 shl     ecx, 1
.text:00001E6C                 mov     edx, [ebp+arg_10]
.text:00001E6F                 lea     eax, [edx+ecx*4]
.text:00001E72                 mov     ecx, [ebp+var_C]
.text:00001E75                 lea     edx, [eax+ecx*4]
.text:00001E78                 mov     eax, [ebp+var_8]
.text:00001E7B                 shl     eax, 2
.text:00001E7E                 sub     edx, eax
.text:00001E80                 push    edx
.text:00001E81                 mov     ecx, [ebp+arg_10]
.text:00001E84                 push    ecx
.text:00001E85                 call    _internal_add
.text:00001E8A                 add     esp, 10h
.text:00001E8D                 jmp     loc_1F9B
.text:00001E92 ; ---------------------------------------------------------------------------
.text:00001E92
.text:00001E92 loc_1E92:                               ; CODE XREF: _internal_mul_low+1Bj
.text:00001E92                 mov     [ebp+var_10], 0
.text:00001E99                 jmp     short loc_1EA4
.text:00001E9B ; ---------------------------------------------------------------------------
.text:00001E9B
.text:00001E9B loc_1E9B:                               ; CODE XREF: _internal_mul_low+189j
.text:00001E9B                 mov     edx, [ebp+var_10]
.text:00001E9E                 add     edx, 1
.text:00001EA1                 mov     [ebp+var_10], edx
.text:00001EA4
.text:00001EA4 loc_1EA4:                               ; CODE XREF: _internal_mul_low+169j
.text:00001EA4                 mov     eax, [ebp+var_10]
.text:00001EA7                 cmp     eax, [ebp+arg_C]
.text:00001EAA                 jge     short loc_1EBB
.text:00001EAC                 mov     ecx, [ebp+var_10]
.text:00001EAF                 mov     edx, [ebp+arg_8]
.text:00001EB2                 mov     dword ptr [edx+ecx*4], 0
.text:00001EB9                 jmp     short loc_1E9B
.text:00001EBB ; ---------------------------------------------------------------------------
.text:00001EBB
.text:00001EBB loc_1EBB:                               ; CODE XREF: _internal_mul_low+17Aj
.text:00001EBB                 mov     eax, [ebp+arg_C]
.text:00001EBE                 mov     ecx, [ebp+arg_8]
.text:00001EC1                 lea     edx, [ecx+eax*4]
.text:00001EC4                 mov     [ebp+var_2C], edx
.text:00001EC7                 mov     eax, [ebp+arg_C]
.text:00001ECA                 mov     ecx, [ebp+arg_0]
.text:00001ECD                 lea     edx, [ecx+eax*4]
.text:00001ED0                 mov     [ebp+var_20], edx
.text:00001ED3                 jmp     short loc_1EDE
.text:00001ED5 ; ---------------------------------------------------------------------------
.text:00001ED5
.text:00001ED5 loc_1ED5:                               ; CODE XREF: _internal_mul_low:loc_1F96j
.text:00001ED5                 mov     eax, [ebp+var_2C]
.text:00001ED8                 sub     eax, 4
.text:00001EDB                 mov     [ebp+var_2C], eax
.text:00001EDE
.text:00001EDE loc_1EDE:                               ; CODE XREF: _internal_mul_low+1A3j
.text:00001EDE                 mov     ecx, [ebp+var_20]
.text:00001EE1                 mov     edx, [ebp+arg_0]
.text:00001EE4                 mov     eax, [ebp+var_20]
.text:00001EE7                 sub     eax, 4
.text:00001EEA                 mov     [ebp+var_20], eax
.text:00001EED                 cmp     ecx, edx
.text:00001EEF                 jbe     short loc_1EFA
.text:00001EF1                 mov     [ebp+var_30], 1
.text:00001EF8                 jmp     short loc_1F01
.text:00001EFA ; ---------------------------------------------------------------------------
.text:00001EFA
.text:00001EFA loc_1EFA:                               ; CODE XREF: _internal_mul_low+1BFj
.text:00001EFA                 mov     [ebp+var_30], 0
.text:00001F01
.text:00001F01 loc_1F01:                               ; CODE XREF: _internal_mul_low+1C8j
.text:00001F01                 cmp     [ebp+var_30], 0
.text:00001F05                 jz      loc_1F9B
.text:00001F0B                 mov     [ebp+var_14], 0
.text:00001F12                 mov     ecx, [ebp+var_2C]
.text:00001F15                 mov     [ebp+var_28], ecx
.text:00001F18                 mov     edx, [ebp+arg_C]
.text:00001F1B                 mov     eax, [ebp+arg_4]
.text:00001F1E                 lea     ecx, [eax+edx*4]
.text:00001F21                 mov     [ebp+var_24], ecx
.text:00001F24
.text:00001F24 loc_1F24:                               ; CODE XREF: _internal_mul_low+264j
.text:00001F24                 mov     edx, [ebp+var_24]
.text:00001F27                 sub     edx, 4
.text:00001F2A                 mov     [ebp+var_24], edx
.text:00001F2D                 mov     eax, [ebp+var_28]
.text:00001F30                 mov     ecx, [ebp+arg_8]
.text:00001F33                 mov     edx, [ebp+var_28]
.text:00001F36                 sub     edx, 4
.text:00001F39                 mov     [ebp+var_28], edx
.text:00001F3C                 cmp     eax, ecx
.text:00001F3E                 jbe     short loc_1F49
.text:00001F40                 mov     [ebp+var_34], 1
.text:00001F47                 jmp     short loc_1F50
.text:00001F49 ; ---------------------------------------------------------------------------
.text:00001F49
.text:00001F49 loc_1F49:                               ; CODE XREF: _internal_mul_low+20Ej
.text:00001F49                 mov     [ebp+var_34], 0
.text:00001F50
.text:00001F50 loc_1F50:                               ; CODE XREF: _internal_mul_low+217j
.text:00001F50                 cmp     [ebp+var_34], 0
.text:00001F54                 jz      short loc_1F96
.text:00001F56                 mov     eax, [ebp+var_20]
.text:00001F59                 mov     eax, [eax]
.text:00001F5B                 mov     ecx, [ebp+var_24]
.text:00001F5E                 mov     edx, [ecx]
.text:00001F60                 mul     edx
.text:00001F62                 mov     ecx, [ebp+var_14]
.text:00001F65                 xor     esi, esi
.text:00001F67                 add     eax, ecx
.text:00001F69                 adc     edx, esi
.text:00001F6B                 mov     ecx, [ebp+var_28]
.text:00001F6E                 mov     ecx, [ecx]
.text:00001F70                 xor     esi, esi
.text:00001F72                 add     eax, ecx
.text:00001F74                 adc     edx, esi
.text:00001F76                 mov     [ebp+var_1C], eax
.text:00001F79                 mov     [ebp+var_18], edx
.text:00001F7C                 mov     edx, [ebp+var_1C]
.text:00001F7F                 mov     eax, [ebp+var_28]
.text:00001F82                 mov     [eax], edx
.text:00001F84                 mov     eax, [ebp+var_1C]
.text:00001F87                 mov     edx, [ebp+var_18]
.text:00001F8A                 mov     cl, 20h ; ' '
.text:00001F8C                 call    __aullshr
.text:00001F91                 mov     [ebp+var_14], eax
.text:00001F94                 jmp     short loc_1F24
.text:00001F96 ; ---------------------------------------------------------------------------
.text:00001F96
.text:00001F96 loc_1F96:                               ; CODE XREF: _internal_mul_low+224j
.text:00001F96                 jmp     loc_1ED5
.text:00001F9B ; ---------------------------------------------------------------------------
.text:00001F9B
.text:00001F9B loc_1F9B:                               ; CODE XREF: _internal_mul_low+15Dj
.text:00001F9B                                         ; _internal_mul_low+1D5j
.text:00001F9B                 pop     edi
.text:00001F9C                 pop     esi
.text:00001F9D                 add     esp, 34h
.text:00001FA0                 cmp     ebp, esp
.text:00001FA2                 call    __RTC_CheckEsp
.text:00001FA7                 mov     esp, ebp
.text:00001FA9                 pop     ebp
.text:00001FAA                 retn
.text:00001FAA _internal_mul_low endp
.text:00001FAA
.text:00001FAA ; ---------------------------------------------------------------------------
.text:00001FAB                 align 10h
.text:00001FB0
.text:00001FB0 ; =============== S U B R O U T I N E =======================================
.text:00001FB0
.text:00001FB0 ; Attributes: bp-based frame
.text:00001FB0
.text:00001FB0                 public _modmul
.text:00001FB0 _modmul         proc near               ; CODE XREF: _modpow+C9p
.text:00001FB0
.text:00001FB0 var_3C          = dword ptr -3Ch
.text:00001FB0 var_38          = dword ptr -38h
.text:00001FB0 var_34          = dword ptr -34h
.text:00001FB0 var_30          = dword ptr -30h
.text:00001FB0 var_2C          = dword ptr -2Ch
.text:00001FB0 var_28          = dword ptr -28h
.text:00001FB0 var_24          = dword ptr -24h
.text:00001FB0 var_20          = dword ptr -20h
.text:00001FB0 var_1C          = dword ptr -1Ch
.text:00001FB0 var_18          = dword ptr -18h
.text:00001FB0 var_14          = dword ptr -14h
.text:00001FB0 var_10          = dword ptr -10h
.text:00001FB0 var_C           = dword ptr -0Ch
.text:00001FB0 var_8           = dword ptr -8
.text:00001FB0 var_4           = dword ptr -4
.text:00001FB0 arg_0           = dword ptr  8
.text:00001FB0 arg_4           = dword ptr  0Ch
.text:00001FB0 arg_8           = dword ptr  10h
.text:00001FB0
.text:00001FB0                 push    ebp
.text:00001FB1                 mov     ebp, esp
.text:00001FB3                 sub     esp, 3Ch
.text:00001FB6                 push    esi
.text:00001FB7                 push    edi
.text:00001FB8                 lea     edi, [ebp+var_3C]
.text:00001FBB                 mov     ecx, 0Fh
.text:00001FC0                 mov     eax, 0CCCCCCCCh
.text:00001FC5                 rep stosd
.text:00001FC7                 mov     eax, [ebp+arg_8]
.text:00001FCA                 mov     ecx, [eax]
.text:00001FCC                 mov     edx, [ebp+arg_8]
.text:00001FCF                 cmp     dword ptr [edx+ecx*4], 0
.text:00001FD3                 jnz     short loc_1FEC
.text:00001FD5                 push    3EFh
.text:00001FDA                 push    offset $SG7617  ; "..\\..\\..\\sshbn.c"
.text:00001FDF                 push    offset $SG7618  ; "mod[mod[0]] != 0"
.text:00001FE4                 call    __wassert
.text:00001FE9 ; ---------------------------------------------------------------------------
.text:00001FE9                 add     esp, 0Ch
.text:00001FEC
.text:00001FEC loc_1FEC:                               ; CODE XREF: _modmul+23j
.text:00001FEC                 mov     ecx, [ebp+arg_8]
.text:00001FEF                 mov     edx, [ecx]
.text:00001FF1                 mov     [ebp+var_24], edx
.text:00001FF4                 push    4
.text:00001FF6                 mov     eax, [ebp+var_24]
.text:00001FF9                 push    eax
.text:00001FFA                 call    _safemalloc
.text:00001FFF                 add     esp, 8
.text:00002002                 mov     [ebp+var_C], eax
.text:00002005                 mov     [ebp+var_30], 0
.text:0000200C                 jmp     short loc_2017
.text:0000200E ; ---------------------------------------------------------------------------
.text:0000200E
.text:0000200E loc_200E:                               ; CODE XREF: _modmul+86j
.text:0000200E                 mov     ecx, [ebp+var_30]
.text:00002011                 add     ecx, 1
.text:00002014                 mov     [ebp+var_30], ecx
.text:00002017
.text:00002017 loc_2017:                               ; CODE XREF: _modmul+5Cj
.text:00002017                 mov     edx, [ebp+var_30]
.text:0000201A                 cmp     edx, [ebp+var_24]
.text:0000201D                 jge     short loc_2038
.text:0000201F                 mov     eax, [ebp+arg_8]
.text:00002022                 mov     ecx, [eax]
.text:00002024                 sub     ecx, [ebp+var_30]
.text:00002027                 mov     edx, [ebp+var_30]
.text:0000202A                 mov     eax, [ebp+var_C]
.text:0000202D                 mov     esi, [ebp+arg_8]
.text:00002030                 mov     ecx, [esi+ecx*4]
.text:00002033                 mov     [eax+edx*4], ecx
.text:00002036                 jmp     short loc_200E
.text:00002038 ; ---------------------------------------------------------------------------
.text:00002038
.text:00002038 loc_2038:                               ; CODE XREF: _modmul+6Dj
.text:00002038                 mov     [ebp+var_18], 0
.text:0000203F                 jmp     short loc_204A
.text:00002041 ; ---------------------------------------------------------------------------
.text:00002041
.text:00002041 loc_2041:                               ; CODE XREF: _modmul:loc_2064j
.text:00002041                 mov     edx, [ebp+var_18]
.text:00002044                 add     edx, 1
.text:00002047                 mov     [ebp+var_18], edx
.text:0000204A
.text:0000204A loc_204A:                               ; CODE XREF: _modmul+8Fj
.text:0000204A                 cmp     [ebp+var_18], 1Fh
.text:0000204E                 jge     short loc_2066
.text:00002050                 mov     eax, [ebp+var_C]
.text:00002053                 mov     edx, [eax]
.text:00002055                 mov     ecx, [ebp+var_18]
.text:00002058                 shl     edx, cl
.text:0000205A                 and     edx, 80000000h
.text:00002060                 jz      short loc_2064
.text:00002062                 jmp     short loc_2066
.text:00002064 ; ---------------------------------------------------------------------------
.text:00002064
.text:00002064 loc_2064:                               ; CODE XREF: _modmul+B0j
.text:00002064                 jmp     short loc_2041
.text:00002066 ; ---------------------------------------------------------------------------
.text:00002066
.text:00002066 loc_2066:                               ; CODE XREF: _modmul+9Ej
.text:00002066                                         ; _modmul+B2j
.text:00002066                 cmp     [ebp+var_18], 0
.text:0000206A                 jz      short loc_20D1
.text:0000206C                 mov     [ebp+var_2C], 0
.text:00002073                 jmp     short loc_207E
.text:00002075 ; ---------------------------------------------------------------------------
.text:00002075
.text:00002075 loc_2075:                               ; CODE XREF: _modmul+106j
.text:00002075                 mov     eax, [ebp+var_2C]
.text:00002078                 add     eax, 1
.text:0000207B                 mov     [ebp+var_2C], eax
.text:0000207E
.text:0000207E loc_207E:                               ; CODE XREF: _modmul+C3j
.text:0000207E                 mov     ecx, [ebp+var_24]
.text:00002081                 sub     ecx, 1
.text:00002084                 cmp     [ebp+var_2C], ecx
.text:00002087                 jge     short loc_20B8
.text:00002089                 mov     edx, [ebp+var_2C]
.text:0000208C                 mov     eax, [ebp+var_C]
.text:0000208F                 mov     edx, [eax+edx*4]
.text:00002092                 mov     ecx, [ebp+var_18]
.text:00002095                 shl     edx, cl
.text:00002097                 mov     ecx, 20h ; ' '
.text:0000209C                 sub     ecx, [ebp+var_18]
.text:0000209F                 mov     eax, [ebp+var_2C]
.text:000020A2                 mov     esi, [ebp+var_C]
.text:000020A5                 mov     eax, [esi+eax*4+4]
.text:000020A9                 shr     eax, cl
.text:000020AB                 or      edx, eax
.text:000020AD                 mov     ecx, [ebp+var_2C]
.text:000020B0                 mov     eax, [ebp+var_C]
.text:000020B3                 mov     [eax+ecx*4], edx
.text:000020B6                 jmp     short loc_2075
.text:000020B8 ; ---------------------------------------------------------------------------
.text:000020B8
.text:000020B8 loc_20B8:                               ; CODE XREF: _modmul+D7j
.text:000020B8                 mov     ecx, [ebp+var_24]
.text:000020BB                 mov     edx, [ebp+var_C]
.text:000020BE                 mov     eax, [edx+ecx*4-4]
.text:000020C2                 mov     ecx, [ebp+var_18]
.text:000020C5                 shl     eax, cl
.text:000020C7                 mov     ecx, [ebp+var_24]
.text:000020CA                 mov     edx, [ebp+var_C]
.text:000020CD                 mov     [edx+ecx*4-4], eax
.text:000020D1
.text:000020D1 loc_20D1:                               ; CODE XREF: _modmul+BAj
.text:000020D1                 mov     eax, [ebp+arg_0]
.text:000020D4                 mov     ecx, [ebp+arg_4]
.text:000020D7                 mov     edx, [eax]
.text:000020D9                 cmp     edx, [ecx]
.text:000020DB                 jbe     short loc_20E7
.text:000020DD                 mov     eax, [ebp+arg_0]
.text:000020E0                 mov     ecx, [eax]
.text:000020E2                 mov     [ebp+var_38], ecx
.text:000020E5                 jmp     short loc_20EF
.text:000020E7 ; ---------------------------------------------------------------------------
.text:000020E7
.text:000020E7 loc_20E7:                               ; CODE XREF: _modmul+12Bj
.text:000020E7                 mov     edx, [ebp+arg_4]
.text:000020EA                 mov     eax, [edx]
.text:000020EC                 mov     [ebp+var_38], eax
.text:000020EF
.text:000020EF loc_20EF:                               ; CODE XREF: _modmul+135j
.text:000020EF                 mov     ecx, [ebp+var_38]
.text:000020F2                 mov     [ebp+var_20], ecx
.text:000020F5                 mov     edx, [ebp+var_20]
.text:000020F8                 shl     edx, 1
.text:000020FA                 cmp     edx, [ebp+var_24]
.text:000020FD                 jg      short loc_210D
.text:000020FF                 mov     eax, [ebp+var_24]
.text:00002102                 cdq
.text:00002103                 sub     eax, edx
.text:00002105                 sar     eax, 1
.text:00002107                 add     eax, 1
.text:0000210A                 mov     [ebp+var_20], eax
.text:0000210D
.text:0000210D loc_210D:                               ; CODE XREF: _modmul+14Dj
.text:0000210D                 push    4
.text:0000210F                 mov     eax, [ebp+var_20]
.text:00002112                 push    eax
.text:00002113                 call    _safemalloc
.text:00002118                 add     esp, 8
.text:0000211B                 mov     [ebp+var_8], eax
.text:0000211E                 mov     ecx, [ebp+arg_0]
.text:00002121                 mov     edx, [ebp+var_20]
.text:00002124                 sub     edx, [ecx]
.text:00002126                 mov     [ebp+var_2C], edx
.text:00002129                 mov     [ebp+var_30], 0
.text:00002130                 jmp     short loc_213B
.text:00002132 ; ---------------------------------------------------------------------------
.text:00002132
.text:00002132 loc_2132:                               ; CODE XREF: _modmul+1A0j
.text:00002132                 mov     eax, [ebp+var_30]
.text:00002135                 add     eax, 1
.text:00002138                 mov     [ebp+var_30], eax
.text:0000213B
.text:0000213B loc_213B:                               ; CODE XREF: _modmul+180j
.text:0000213B                 mov     ecx, [ebp+var_30]
.text:0000213E                 cmp     ecx, [ebp+var_2C]
.text:00002141                 jge     short loc_2152
.text:00002143                 mov     edx, [ebp+var_30]
.text:00002146                 mov     eax, [ebp+var_8]
.text:00002149                 mov     dword ptr [eax+edx*4], 0
.text:00002150                 jmp     short loc_2132
.text:00002152 ; ---------------------------------------------------------------------------
.text:00002152
.text:00002152 loc_2152:                               ; CODE XREF: _modmul+191j
.text:00002152                 mov     [ebp+var_30], 0
.text:00002159                 jmp     short loc_2164
.text:0000215B ; ---------------------------------------------------------------------------
.text:0000215B
.text:0000215B loc_215B:                               ; CODE XREF: _modmul+1D8j
.text:0000215B                 mov     ecx, [ebp+var_30]
.text:0000215E                 add     ecx, 1
.text:00002161                 mov     [ebp+var_30], ecx
.text:00002164
.text:00002164 loc_2164:                               ; CODE XREF: _modmul+1A9j
.text:00002164                 mov     edx, [ebp+arg_0]
.text:00002167                 mov     eax, [ebp+var_30]
.text:0000216A                 cmp     eax, [edx]
.text:0000216C                 jge     short loc_218A
.text:0000216E                 mov     ecx, [ebp+arg_0]
.text:00002171                 mov     edx, [ecx]
.text:00002173                 sub     edx, [ebp+var_30]
.text:00002176                 mov     eax, [ebp+var_2C]
.text:00002179                 add     eax, [ebp+var_30]
.text:0000217C                 mov     ecx, [ebp+var_8]
.text:0000217F                 mov     esi, [ebp+arg_0]
.text:00002182                 mov     edx, [esi+edx*4]
.text:00002185                 mov     [ecx+eax*4], edx
.text:00002188                 jmp     short loc_215B
.text:0000218A ; ---------------------------------------------------------------------------
.text:0000218A
.text:0000218A loc_218A:                               ; CODE XREF: _modmul+1BCj
.text:0000218A                 push    4
.text:0000218C                 mov     eax, [ebp+var_20]
.text:0000218F                 push    eax
.text:00002190                 call    _safemalloc
.text:00002195                 add     esp, 8
.text:00002198                 mov     [ebp+var_10], eax
.text:0000219B                 mov     ecx, [ebp+arg_4]
.text:0000219E                 mov     edx, [ebp+var_20]
.text:000021A1                 sub     edx, [ecx]
.text:000021A3                 mov     [ebp+var_2C], edx
.text:000021A6                 mov     [ebp+var_30], 0
.text:000021AD                 jmp     short loc_21B8
.text:000021AF ; ---------------------------------------------------------------------------
.text:000021AF
.text:000021AF loc_21AF:                               ; CODE XREF: _modmul+21Dj
.text:000021AF                 mov     eax, [ebp+var_30]
.text:000021B2                 add     eax, 1
.text:000021B5                 mov     [ebp+var_30], eax
.text:000021B8
.text:000021B8 loc_21B8:                               ; CODE XREF: _modmul+1FDj
.text:000021B8                 mov     ecx, [ebp+var_30]
.text:000021BB                 cmp     ecx, [ebp+var_2C]
.text:000021BE                 jge     short loc_21CF
.text:000021C0                 mov     edx, [ebp+var_30]
.text:000021C3                 mov     eax, [ebp+var_10]
.text:000021C6                 mov     dword ptr [eax+edx*4], 0
.text:000021CD                 jmp     short loc_21AF
.text:000021CF ; ---------------------------------------------------------------------------
.text:000021CF
.text:000021CF loc_21CF:                               ; CODE XREF: _modmul+20Ej
.text:000021CF                 mov     [ebp+var_30], 0
.text:000021D6                 jmp     short loc_21E1
.text:000021D8 ; ---------------------------------------------------------------------------
.text:000021D8
.text:000021D8 loc_21D8:                               ; CODE XREF: _modmul+255j
.text:000021D8                 mov     ecx, [ebp+var_30]
.text:000021DB                 add     ecx, 1
.text:000021DE                 mov     [ebp+var_30], ecx
.text:000021E1
.text:000021E1 loc_21E1:                               ; CODE XREF: _modmul+226j
.text:000021E1                 mov     edx, [ebp+arg_4]
.text:000021E4                 mov     eax, [ebp+var_30]
.text:000021E7                 cmp     eax, [edx]
.text:000021E9                 jge     short loc_2207
.text:000021EB                 mov     ecx, [ebp+arg_4]
.text:000021EE                 mov     edx, [ecx]
.text:000021F0                 sub     edx, [ebp+var_30]
.text:000021F3                 mov     eax, [ebp+var_2C]
.text:000021F6                 add     eax, [ebp+var_30]
.text:000021F9                 mov     ecx, [ebp+var_10]
.text:000021FC                 mov     esi, [ebp+arg_4]
.text:000021FF                 mov     edx, [esi+edx*4]
.text:00002202                 mov     [ecx+eax*4], edx
.text:00002205                 jmp     short loc_21D8
.text:00002207 ; ---------------------------------------------------------------------------
.text:00002207
.text:00002207 loc_2207:                               ; CODE XREF: _modmul+239j
.text:00002207                 push    4
.text:00002209                 mov     eax, [ebp+var_20]
.text:0000220C                 shl     eax, 1
.text:0000220E                 push    eax
.text:0000220F                 call    _safemalloc
.text:00002214                 add     esp, 8
.text:00002217                 mov     [ebp+var_4], eax
.text:0000221A                 mov     ecx, [ebp+var_20]
.text:0000221D                 push    ecx
.text:0000221E                 call    _mul_compute_scratch
.text:00002223                 add     esp, 4
.text:00002226                 mov     [ebp+var_1C], eax
.text:00002229                 push    4
.text:0000222B                 mov     edx, [ebp+var_1C]
.text:0000222E                 push    edx
.text:0000222F                 call    _safemalloc
.text:00002234                 add     esp, 8
.text:00002237                 mov     [ebp+var_14], eax
.text:0000223A                 mov     eax, [ebp+var_14]
.text:0000223D                 push    eax
.text:0000223E                 mov     ecx, [ebp+var_20]
.text:00002241                 push    ecx
.text:00002242                 mov     edx, [ebp+var_4]
.text:00002245                 push    edx
.text:00002246                 mov     eax, [ebp+var_10]
.text:00002249                 push    eax
.text:0000224A                 mov     ecx, [ebp+var_8]
.text:0000224D                 push    ecx
.text:0000224E                 call    _internal_mul
.text:00002253                 add     esp, 14h
.text:00002256                 push    0
.text:00002258                 push    0
.text:0000225A                 mov     edx, [ebp+var_24]
.text:0000225D                 push    edx
.text:0000225E                 mov     eax, [ebp+var_C]
.text:00002261                 push    eax
.text:00002262                 mov     ecx, [ebp+var_20]
.text:00002265                 shl     ecx, 1
.text:00002267                 push    ecx
.text:00002268                 mov     edx, [ebp+var_4]
.text:0000226B                 push    edx
.text:0000226C                 call    _internal_mod
.text:00002271                 add     esp, 18h
.text:00002274                 cmp     [ebp+var_18], 0
.text:00002278                 jz      loc_235E
.text:0000227E                 mov     eax, [ebp+var_20]
.text:00002281                 shl     eax, 1
.text:00002283                 sub     eax, [ebp+var_24]
.text:00002286                 sub     eax, 1
.text:00002289                 mov     [ebp+var_2C], eax
.text:0000228C                 jmp     short loc_2297
.text:0000228E ; ---------------------------------------------------------------------------
.text:0000228E
.text:0000228E loc_228E:                               ; CODE XREF: _modmul+320j
.text:0000228E                 mov     ecx, [ebp+var_2C]
.text:00002291                 add     ecx, 1
.text:00002294                 mov     [ebp+var_2C], ecx
.text:00002297
.text:00002297 loc_2297:                               ; CODE XREF: _modmul+2DCj
.text:00002297                 mov     edx, [ebp+var_20]
.text:0000229A                 lea     eax, [edx+edx-1]
.text:0000229E                 cmp     [ebp+var_2C], eax
.text:000022A1                 jge     short loc_22D2
.text:000022A3                 mov     ecx, [ebp+var_2C]
.text:000022A6                 mov     edx, [ebp+var_4]
.text:000022A9                 mov     eax, [edx+ecx*4]
.text:000022AC                 mov     ecx, [ebp+var_18]
.text:000022AF                 shl     eax, cl
.text:000022B1                 mov     ecx, 20h ; ' '
.text:000022B6                 sub     ecx, [ebp+var_18]
.text:000022B9                 mov     edx, [ebp+var_2C]
.text:000022BC                 mov     esi, [ebp+var_4]
.text:000022BF                 mov     edx, [esi+edx*4+4]
.text:000022C3                 shr     edx, cl
.text:000022C5                 or      eax, edx
.text:000022C7                 mov     ecx, [ebp+var_2C]
.text:000022CA                 mov     edx, [ebp+var_4]
.text:000022CD                 mov     [edx+ecx*4], eax
.text:000022D0                 jmp     short loc_228E
.text:000022D2 ; ---------------------------------------------------------------------------
.text:000022D2
.text:000022D2 loc_22D2:                               ; CODE XREF: _modmul+2F1j
.text:000022D2                 mov     eax, [ebp+var_20]
.text:000022D5                 shl     eax, 1
.text:000022D7                 mov     ecx, [ebp+var_4]
.text:000022DA                 mov     edx, [ecx+eax*4-4]
.text:000022DE                 mov     ecx, [ebp+var_18]
.text:000022E1                 shl     edx, cl
.text:000022E3                 mov     eax, [ebp+var_20]
.text:000022E6                 shl     eax, 1
.text:000022E8                 mov     ecx, [ebp+var_4]
.text:000022EB                 mov     [ecx+eax*4-4], edx
.text:000022EF                 push    0
.text:000022F1                 push    0
.text:000022F3                 mov     edx, [ebp+var_24]
.text:000022F6                 push    edx
.text:000022F7                 mov     eax, [ebp+var_C]
.text:000022FA                 push    eax
.text:000022FB                 mov     ecx, [ebp+var_20]
.text:000022FE                 shl     ecx, 1
.text:00002300                 push    ecx
.text:00002301                 mov     edx, [ebp+var_4]
.text:00002304                 push    edx
.text:00002305                 call    _internal_mod
.text:0000230A                 add     esp, 18h
.text:0000230D                 mov     eax, [ebp+var_20]
.text:00002310                 lea     ecx, [eax+eax-1]
.text:00002314                 mov     [ebp+var_2C], ecx
.text:00002317                 jmp     short loc_2322
.text:00002319 ; ---------------------------------------------------------------------------
.text:00002319
.text:00002319 loc_2319:                               ; CODE XREF: _modmul+3ACj
.text:00002319                 mov     edx, [ebp+var_2C]
.text:0000231C                 sub     edx, 1
.text:0000231F                 mov     [ebp+var_2C], edx
.text:00002322
.text:00002322 loc_2322:                               ; CODE XREF: _modmul+367j
.text:00002322                 mov     eax, [ebp+var_20]
.text:00002325                 shl     eax, 1
.text:00002327                 sub     eax, [ebp+var_24]
.text:0000232A                 cmp     [ebp+var_2C], eax
.text:0000232D                 jl      short loc_235E
.text:0000232F                 mov     ecx, [ebp+var_2C]
.text:00002332                 mov     edx, [ebp+var_4]
.text:00002335                 mov     eax, [edx+ecx*4]
.text:00002338                 mov     ecx, [ebp+var_18]
.text:0000233B                 shr     eax, cl
.text:0000233D                 mov     ecx, 20h ; ' '
.text:00002342                 sub     ecx, [ebp+var_18]
.text:00002345                 mov     edx, [ebp+var_2C]
.text:00002348                 mov     esi, [ebp+var_4]
.text:0000234B                 mov     edx, [esi+edx*4-4]
.text:0000234F                 shl     edx, cl
.text:00002351                 or      eax, edx
.text:00002353                 mov     ecx, [ebp+var_2C]
.text:00002356                 mov     edx, [ebp+var_4]
.text:00002359                 mov     [edx+ecx*4], eax
.text:0000235C                 jmp     short loc_2319
.text:0000235E ; ---------------------------------------------------------------------------
.text:0000235E
.text:0000235E loc_235E:                               ; CODE XREF: _modmul+2C8j
.text:0000235E                                         ; _modmul+37Dj
.text:0000235E                 mov     eax, [ebp+var_20]
.text:00002361                 shl     eax, 1
.text:00002363                 cmp     [ebp+var_24], eax
.text:00002366                 jge     short loc_2370
.text:00002368                 mov     ecx, [ebp+var_24]
.text:0000236B                 mov     [ebp+var_3C], ecx
.text:0000236E                 jmp     short loc_2378
.text:00002370 ; ---------------------------------------------------------------------------
.text:00002370
.text:00002370 loc_2370:                               ; CODE XREF: _modmul+3B6j
.text:00002370                 mov     edx, [ebp+var_20]
.text:00002373                 shl     edx, 1
.text:00002375                 mov     [ebp+var_3C], edx
.text:00002378
.text:00002378 loc_2378:                               ; CODE XREF: _modmul+3BEj
.text:00002378                 mov     eax, [ebp+var_3C]
.text:0000237B                 mov     [ebp+var_28], eax
.text:0000237E                 mov     ecx, [ebp+var_28]
.text:00002381                 push    ecx
.text:00002382                 call    _newbn
.text:00002387                 add     esp, 4
.text:0000238A                 mov     [ebp+var_34], eax
.text:0000238D                 mov     [ebp+var_2C], 0
.text:00002394                 jmp     short loc_239F
.text:00002396 ; ---------------------------------------------------------------------------
.text:00002396
.text:00002396 loc_2396:                               ; CODE XREF: _modmul+417j
.text:00002396                 mov     edx, [ebp+var_2C]
.text:00002399                 add     edx, 1
.text:0000239C                 mov     [ebp+var_2C], edx
.text:0000239F
.text:0000239F loc_239F:                               ; CODE XREF: _modmul+3E4j
.text:0000239F                 mov     eax, [ebp+var_2C]
.text:000023A2                 cmp     eax, [ebp+var_28]
.text:000023A5                 jge     short loc_23C9
.text:000023A7                 mov     ecx, [ebp+var_20]
.text:000023AA                 mov     edx, [ebp+var_2C]
.text:000023AD                 lea     eax, [edx+ecx*2]
.text:000023B0                 sub     eax, [ebp+var_28]
.text:000023B3                 mov     ecx, [ebp+var_34]
.text:000023B6                 mov     edx, [ecx]
.text:000023B8                 sub     edx, [ebp+var_2C]
.text:000023BB                 mov     ecx, [ebp+var_34]
.text:000023BE                 mov     esi, [ebp+var_4]
.text:000023C1                 mov     eax, [esi+eax*4]
.text:000023C4                 mov     [ecx+edx*4], eax
.text:000023C7                 jmp     short loc_2396
.text:000023C9 ; ---------------------------------------------------------------------------
.text:000023C9
.text:000023C9 loc_23C9:                               ; CODE XREF: _modmul+3F5j
.text:000023C9                                         ; _modmul+43Cj
.text:000023C9                 mov     ecx, [ebp+var_34]
.text:000023CC                 cmp     dword ptr [ecx], 1
.text:000023CF                 jbe     short loc_23EE
.text:000023D1                 mov     edx, [ebp+var_34]
.text:000023D4                 mov     eax, [edx]
.text:000023D6                 mov     ecx, [ebp+var_34]
.text:000023D9                 cmp     dword ptr [ecx+eax*4], 0
.text:000023DD                 jnz     short loc_23EE
.text:000023DF                 mov     edx, [ebp+var_34]
.text:000023E2                 mov     eax, [edx]
.text:000023E4                 sub     eax, 1
.text:000023E7                 mov     ecx, [ebp+var_34]
.text:000023EA                 mov     [ecx], eax
.text:000023EC                 jmp     short loc_23C9
.text:000023EE ; ---------------------------------------------------------------------------
.text:000023EE
.text:000023EE loc_23EE:                               ; CODE XREF: _modmul+41Fj
.text:000023EE                                         ; _modmul+42Dj
.text:000023EE                 mov     edx, [ebp+var_1C]
.text:000023F1                 shl     edx, 2
.text:000023F4                 push    edx
.text:000023F5                 mov     eax, [ebp+var_14]
.text:000023F8                 push    eax
.text:000023F9                 call    _smemclr
.text:000023FE                 add     esp, 8
.text:00002401                 mov     ecx, [ebp+var_14]
.text:00002404                 push    ecx
.text:00002405                 call    _safefree
.text:0000240A                 add     esp, 4
.text:0000240D                 mov     edx, [ebp+var_20]
.text:00002410                 shl     edx, 1
.text:00002412                 shl     edx, 2
.text:00002415                 push    edx
.text:00002416                 mov     eax, [ebp+var_4]
.text:00002419                 push    eax
.text:0000241A                 call    _smemclr
.text:0000241F                 add     esp, 8
.text:00002422                 mov     ecx, [ebp+var_4]
.text:00002425                 push    ecx
.text:00002426                 call    _safefree
.text:0000242B                 add     esp, 4
.text:0000242E                 mov     edx, [ebp+var_24]
.text:00002431                 shl     edx, 2
.text:00002434                 push    edx
.text:00002435                 mov     eax, [ebp+var_C]
.text:00002438                 push    eax
.text:00002439                 call    _smemclr
.text:0000243E                 add     esp, 8
.text:00002441                 mov     ecx, [ebp+var_C]
.text:00002444                 push    ecx
.text:00002445                 call    _safefree
.text:0000244A                 add     esp, 4
.text:0000244D                 mov     edx, [ebp+var_20]
.text:00002450                 shl     edx, 2
.text:00002453                 push    edx
.text:00002454                 mov     eax, [ebp+var_8]
.text:00002457                 push    eax
.text:00002458                 call    _smemclr
.text:0000245D                 add     esp, 8
.text:00002460                 mov     ecx, [ebp+var_8]
.text:00002463                 push    ecx
.text:00002464                 call    _safefree
.text:00002469                 add     esp, 4
.text:0000246C                 mov     edx, [ebp+var_20]
.text:0000246F                 shl     edx, 2
.text:00002472                 push    edx
.text:00002473                 mov     eax, [ebp+var_10]
.text:00002476                 push    eax
.text:00002477                 call    _smemclr
.text:0000247C                 add     esp, 8
.text:0000247F                 mov     ecx, [ebp+var_10]
.text:00002482                 push    ecx
.text:00002483                 call    _safefree
.text:00002488                 add     esp, 4
.text:0000248B                 mov     eax, [ebp+var_34]
.text:0000248E                 pop     edi
.text:0000248F                 pop     esi
.text:00002490                 add     esp, 3Ch
.text:00002493                 cmp     ebp, esp
.text:00002495                 call    __RTC_CheckEsp
.text:0000249A                 mov     esp, ebp
.text:0000249C                 pop     ebp
.text:0000249D                 retn
.text:0000249D _modmul         endp
.text:0000249D
.text:0000249D ; ---------------------------------------------------------------------------
.text:0000249E                 align 10h
.text:000024A0
.text:000024A0 ; =============== S U B R O U T I N E =======================================
.text:000024A0
.text:000024A0 ; Attributes: bp-based frame
.text:000024A0
.text:000024A0                 public _decbn
.text:000024A0 _decbn          proc near
.text:000024A0
.text:000024A0 var_4           = dword ptr -4
.text:000024A0 arg_0           = dword ptr  8
.text:000024A0
.text:000024A0                 push    ebp
.text:000024A1                 mov     ebp, esp
.text:000024A3                 push    ecx
.text:000024A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024AB                 mov     [ebp+var_4], 1
.text:000024B2
.text:000024B2 loc_24B2:                               ; CODE XREF: _decbn+3Ej
.text:000024B2                 mov     eax, [ebp+arg_0]
.text:000024B5                 mov     ecx, [ebp+var_4]
.text:000024B8                 cmp     ecx, [eax]
.text:000024BA                 jge     short loc_24E0
.text:000024BC                 mov     edx, [ebp+var_4]
.text:000024BF                 mov     eax, [ebp+arg_0]
.text:000024C2                 cmp     dword ptr [eax+edx*4], 0
.text:000024C6                 jnz     short loc_24E0
.text:000024C8                 mov     ecx, [ebp+var_4]
.text:000024CB                 mov     edx, [ebp+arg_0]
.text:000024CE                 mov     dword ptr [edx+ecx*4], 0FFFFFFFFh
.text:000024D5                 mov     eax, [ebp+var_4]
.text:000024D8                 add     eax, 1
.text:000024DB                 mov     [ebp+var_4], eax
.text:000024DE                 jmp     short loc_24B2
.text:000024E0 ; ---------------------------------------------------------------------------
.text:000024E0
.text:000024E0 loc_24E0:                               ; CODE XREF: _decbn+1Aj
.text:000024E0                                         ; _decbn+26j
.text:000024E0                 mov     ecx, [ebp+var_4]
.text:000024E3                 mov     edx, [ebp+arg_0]
.text:000024E6                 mov     eax, [edx+ecx*4]
.text:000024E9                 sub     eax, 1
.text:000024EC                 mov     ecx, [ebp+var_4]
.text:000024EF                 mov     edx, [ebp+arg_0]
.text:000024F2                 mov     [edx+ecx*4], eax
.text:000024F5                 mov     esp, ebp
.text:000024F7                 pop     ebp
.text:000024F8                 retn
.text:000024F8 _decbn          endp
.text:000024F8
.text:000024F8 ; ---------------------------------------------------------------------------
.text:000024F9                 align 10h
.text:00002500
.text:00002500 ; =============== S U B R O U T I N E =======================================
.text:00002500
.text:00002500 ; Attributes: bp-based frame
.text:00002500
.text:00002500                 public _bignum_from_bytes
.text:00002500 _bignum_from_bytes proc near            ; CODE XREF: _ssh1_read_bignum+9Ep
.text:00002500
.text:00002500 var_14          = dword ptr -14h
.text:00002500 var_10          = dword ptr -10h
.text:00002500 var_C           = dword ptr -0Ch
.text:00002500 var_8           = dword ptr -8
.text:00002500 var_4           = dword ptr -4
.text:00002500 arg_0           = dword ptr  8
.text:00002500 arg_4           = dword ptr  0Ch
.text:00002500
.text:00002500                 push    ebp
.text:00002501                 mov     ebp, esp
.text:00002503                 sub     esp, 14h
.text:00002506                 push    esi
.text:00002507                 mov     eax, 0CCCCCCCCh
.text:0000250C                 mov     [ebp+var_14], eax
.text:0000250F                 mov     [ebp+var_10], eax
.text:00002512                 mov     [ebp+var_C], eax
.text:00002515                 mov     [ebp+var_8], eax
.text:00002518                 mov     [ebp+var_4], eax
.text:0000251B                 cmp     [ebp+arg_4], 0
.text:0000251F                 jl      short loc_252A
.text:00002521                 cmp     [ebp+arg_4], 0FFFFFFFh
.text:00002528                 jl      short loc_2541
.text:0000252A
.text:0000252A loc_252A:                               ; CODE XREF: _bignum_from_bytes+1Fj
.text:0000252A                 push    4A3h
.text:0000252F                 push    offset $SG7743  ; "..\\..\\..\\sshbn.c"
.text:00002534                 push    offset $SG7744  ; "nbytes >= 0 && nbytes < INT_MAX/8"
.text:00002539                 call    __wassert
.text:0000253E ; ---------------------------------------------------------------------------
.text:0000253E                 add     esp, 0Ch
.text:00002541
.text:00002541 loc_2541:                               ; CODE XREF: _bignum_from_bytes+28j
.text:00002541                 mov     eax, [ebp+arg_4]
.text:00002544                 add     eax, 3
.text:00002547                 cdq
.text:00002548                 and     edx, 3
.text:0000254B                 add     eax, edx
.text:0000254D                 sar     eax, 2
.text:00002550                 mov     [ebp+var_8], eax
.text:00002553                 mov     ecx, [ebp+var_8]
.text:00002556                 push    ecx
.text:00002557                 call    _newbn
.text:0000255C                 add     esp, 4
.text:0000255F                 mov     [ebp+var_4], eax
.text:00002562                 mov     [ebp+var_C], 1
.text:00002569                 jmp     short loc_2574
.text:0000256B ; ---------------------------------------------------------------------------
.text:0000256B
.text:0000256B loc_256B:                               ; CODE XREF: _bignum_from_bytes+89j
.text:0000256B                 mov     edx, [ebp+var_C]
.text:0000256E                 add     edx, 1
.text:00002571                 mov     [ebp+var_C], edx
.text:00002574
.text:00002574 loc_2574:                               ; CODE XREF: _bignum_from_bytes+69j
.text:00002574                 mov     eax, [ebp+var_C]
.text:00002577                 cmp     eax, [ebp+var_8]
.text:0000257A                 jg      short loc_258B
.text:0000257C                 mov     ecx, [ebp+var_C]
.text:0000257F                 mov     edx, [ebp+var_4]
.text:00002582                 mov     dword ptr [edx+ecx*4], 0
.text:00002589                 jmp     short loc_256B
.text:0000258B ; ---------------------------------------------------------------------------
.text:0000258B
.text:0000258B loc_258B:                               ; CODE XREF: _bignum_from_bytes+7Aj
.text:0000258B                 mov     eax, [ebp+arg_4]
.text:0000258E                 mov     [ebp+var_C], eax
.text:00002591
.text:00002591 loc_2591:                               ; CODE XREF: _bignum_from_bytes+F6j
.text:00002591                 mov     ecx, [ebp+var_C]
.text:00002594                 mov     [ebp+var_14], ecx
.text:00002597                 mov     edx, [ebp+var_C]
.text:0000259A                 sub     edx, 1
.text:0000259D                 mov     [ebp+var_C], edx
.text:000025A0                 cmp     [ebp+var_14], 0
.text:000025A4                 jz      short loc_25F8
.text:000025A6                 mov     eax, [ebp+arg_0]
.text:000025A9                 mov     cl, [eax]
.text:000025AB                 mov     byte ptr [ebp+var_10+3], cl
.text:000025AE                 mov     edx, [ebp+arg_0]
.text:000025B1                 add     edx, 1
.text:000025B4                 mov     [ebp+arg_0], edx
.text:000025B7                 mov     eax, [ebp+var_C]
.text:000025BA                 cdq
.text:000025BB                 and     edx, 3
.text:000025BE                 add     eax, edx
.text:000025C0                 sar     eax, 2
.text:000025C3                 movzx   esi, byte ptr [ebp+var_10+3]
.text:000025C7                 mov     ecx, [ebp+var_C]
.text:000025CA                 shl     ecx, 3
.text:000025CD                 and     ecx, 8000001Fh
.text:000025D3                 jns     short loc_25DA
.text:000025D5                 dec     ecx
.text:000025D6                 or      ecx, 0FFFFFFE0h
.text:000025D9                 inc     ecx
.text:000025DA
.text:000025DA loc_25DA:                               ; CODE XREF: _bignum_from_bytes+D3j
.text:000025DA                 shl     esi, cl
.text:000025DC                 mov     edx, [ebp+var_4]
.text:000025DF                 or      esi, [edx+eax*4+4]
.text:000025E3                 mov     eax, [ebp+var_C]
.text:000025E6                 cdq
.text:000025E7                 and     edx, 3
.text:000025EA                 add     eax, edx
.text:000025EC                 sar     eax, 2
.text:000025EF                 mov     ecx, [ebp+var_4]
.text:000025F2                 mov     [ecx+eax*4+4], esi
.text:000025F6                 jmp     short loc_2591
.text:000025F8 ; ---------------------------------------------------------------------------
.text:000025F8
.text:000025F8 loc_25F8:                               ; CODE XREF: _bignum_from_bytes+A4j
.text:000025F8                                         ; _bignum_from_bytes+11Bj
.text:000025F8                 mov     edx, [ebp+var_4]
.text:000025FB                 cmp     dword ptr [edx], 1
.text:000025FE                 jbe     short loc_261D
.text:00002600                 mov     eax, [ebp+var_4]
.text:00002603                 mov     ecx, [eax]
.text:00002605                 mov     edx, [ebp+var_4]
.text:00002608                 cmp     dword ptr [edx+ecx*4], 0
.text:0000260C                 jnz     short loc_261D
.text:0000260E                 mov     eax, [ebp+var_4]
.text:00002611                 mov     ecx, [eax]
.text:00002613                 sub     ecx, 1
.text:00002616                 mov     edx, [ebp+var_4]
.text:00002619                 mov     [edx], ecx
.text:0000261B                 jmp     short loc_25F8
.text:0000261D ; ---------------------------------------------------------------------------
.text:0000261D
.text:0000261D loc_261D:                               ; CODE XREF: _bignum_from_bytes+FEj
.text:0000261D                                         ; _bignum_from_bytes+10Cj
.text:0000261D                 mov     eax, [ebp+var_4]
.text:00002620                 pop     esi
.text:00002621                 add     esp, 14h
.text:00002624                 cmp     ebp, esp
.text:00002626                 call    __RTC_CheckEsp
.text:0000262B                 mov     esp, ebp
.text:0000262D                 pop     ebp
.text:0000262E                 retn
.text:0000262E _bignum_from_bytes endp
.text:0000262E
.text:0000262E ; ---------------------------------------------------------------------------
.text:0000262F                 align 10h
.text:00002630
.text:00002630 ; =============== S U B R O U T I N E =======================================
.text:00002630
.text:00002630 ; Attributes: bp-based frame
.text:00002630
.text:00002630                 public _ssh1_read_bignum
.text:00002630 _ssh1_read_bignum proc near
.text:00002630
.text:00002630 var_10          = dword ptr -10h
.text:00002630 var_C           = dword ptr -0Ch
.text:00002630 var_8           = dword ptr -8
.text:00002630 var_4           = dword ptr -4
.text:00002630 arg_0           = dword ptr  8
.text:00002630 arg_4           = dword ptr  0Ch
.text:00002630 arg_8           = dword ptr  10h
.text:00002630
.text:00002630                 push    ebp
.text:00002631                 mov     ebp, esp
.text:00002633                 sub     esp, 10h
.text:00002636                 mov     eax, 0CCCCCCCCh
.text:0000263B                 mov     [ebp+var_10], eax
.text:0000263E                 mov     [ebp+var_C], eax
.text:00002641                 mov     [ebp+var_8], eax
.text:00002644                 mov     [ebp+var_4], eax
.text:00002647                 mov     eax, [ebp+arg_0]
.text:0000264A                 mov     [ebp+var_4], eax
.text:0000264D                 cmp     [ebp+arg_4], 2
.text:00002651                 jge     short loc_265B
.text:00002653                 or      eax, 0FFFFFFFFh
.text:00002656                 jmp     loc_26E4
.text:0000265B ; ---------------------------------------------------------------------------
.text:0000265B
.text:0000265B loc_265B:                               ; CODE XREF: _ssh1_read_bignum+21j
.text:0000265B                 mov     [ebp+var_C], 0
.text:00002662                 mov     [ebp+var_8], 0
.text:00002669                 jmp     short loc_2674
.text:0000266B ; ---------------------------------------------------------------------------
.text:0000266B
.text:0000266B loc_266B:                               ; CODE XREF: _ssh1_read_bignum+64j
.text:0000266B                 mov     ecx, [ebp+var_8]
.text:0000266E                 add     ecx, 1
.text:00002671                 mov     [ebp+var_8], ecx
.text:00002674
.text:00002674 loc_2674:                               ; CODE XREF: _ssh1_read_bignum+39j
.text:00002674                 cmp     [ebp+var_8], 2
.text:00002678                 jge     short loc_2696
.text:0000267A                 mov     edx, [ebp+var_C]
.text:0000267D                 shl     edx, 8
.text:00002680                 mov     eax, [ebp+var_4]
.text:00002683                 movzx   ecx, byte ptr [eax]
.text:00002686                 add     edx, ecx
.text:00002688                 mov     [ebp+var_C], edx
.text:0000268B                 mov     edx, [ebp+var_4]
.text:0000268E                 add     edx, 1
.text:00002691                 mov     [ebp+var_4], edx
.text:00002694                 jmp     short loc_266B
.text:00002696 ; ---------------------------------------------------------------------------
.text:00002696
.text:00002696 loc_2696:                               ; CODE XREF: _ssh1_read_bignum+48j
.text:00002696                 mov     eax, [ebp+var_C]
.text:00002699                 add     eax, 7
.text:0000269C                 cdq
.text:0000269D                 and     edx, 7
.text:000026A0                 add     eax, edx
.text:000026A2                 sar     eax, 3
.text:000026A5                 mov     [ebp+var_10], eax
.text:000026A8                 mov     eax, [ebp+var_10]
.text:000026AB                 add     eax, 2
.text:000026AE                 cmp     [ebp+arg_4], eax
.text:000026B1                 jge     short loc_26B8
.text:000026B3                 or      eax, 0FFFFFFFFh
.text:000026B6                 jmp     short loc_26E4
.text:000026B8 ; ---------------------------------------------------------------------------
.text:000026B8
.text:000026B8 loc_26B8:                               ; CODE XREF: _ssh1_read_bignum+81j
.text:000026B8                 cmp     [ebp+arg_8], 0
.text:000026BC                 jnz     short loc_26C6
.text:000026BE                 mov     eax, [ebp+var_10]
.text:000026C1                 add     eax, 2
.text:000026C4                 jmp     short loc_26E4
.text:000026C6 ; ---------------------------------------------------------------------------
.text:000026C6
.text:000026C6 loc_26C6:                               ; CODE XREF: _ssh1_read_bignum+8Cj
.text:000026C6                 mov     ecx, [ebp+var_10]
.text:000026C9                 push    ecx
.text:000026CA                 mov     edx, [ebp+var_4]
.text:000026CD                 push    edx
.text:000026CE                 call    _bignum_from_bytes
.text:000026D3                 add     esp, 8
.text:000026D6                 mov     ecx, [ebp+arg_8]
.text:000026D9                 mov     [ecx], eax
.text:000026DB                 mov     eax, [ebp+var_4]
.text:000026DE                 add     eax, [ebp+var_10]
.text:000026E1                 sub     eax, [ebp+arg_0]
.text:000026E4
.text:000026E4 loc_26E4:                               ; CODE XREF: _ssh1_read_bignum+26j
.text:000026E4                                         ; _ssh1_read_bignum+86j ...
.text:000026E4                 add     esp, 10h
.text:000026E7                 cmp     ebp, esp
.text:000026E9                 call    __RTC_CheckEsp
.text:000026EE                 mov     esp, ebp
.text:000026F0                 pop     ebp
.text:000026F1                 retn
.text:000026F1 _ssh1_read_bignum endp
.text:000026F1
.text:000026F1 ; ---------------------------------------------------------------------------
.text:000026F2                 align 10h
.text:00002700
.text:00002700 ; =============== S U B R O U T I N E =======================================
.text:00002700
.text:00002700 ; Attributes: bp-based frame
.text:00002700
.text:00002700                 public _bignum_bitcount
.text:00002700 _bignum_bitcount proc near              ; CODE XREF: _ssh1_bignum_length+7p
.text:00002700                                         ; _ssh2_bignum_length+7p ...
.text:00002700
.text:00002700 var_4           = dword ptr -4
.text:00002700 arg_0           = dword ptr  8
.text:00002700
.text:00002700                 push    ebp
.text:00002701                 mov     ebp, esp
.text:00002703                 push    ecx
.text:00002704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000270B                 mov     eax, [ebp+arg_0]
.text:0000270E                 mov     ecx, [eax]
.text:00002710                 shl     ecx, 5
.text:00002713                 sub     ecx, 1
.text:00002716                 mov     [ebp+var_4], ecx
.text:00002719
.text:00002719 loc_2719:                               ; CODE XREF: _bignum_bitcount+51j
.text:00002719                 cmp     [ebp+var_4], 0
.text:0000271D                 jl      short loc_2753
.text:0000271F                 mov     eax, [ebp+var_4]
.text:00002722                 cdq
.text:00002723                 and     edx, 1Fh
.text:00002726                 add     eax, edx
.text:00002728                 sar     eax, 5
.text:0000272B                 mov     ecx, [ebp+var_4]
.text:0000272E                 and     ecx, 8000001Fh
.text:00002734                 jns     short loc_273B
.text:00002736                 dec     ecx
.text:00002737                 or      ecx, 0FFFFFFE0h
.text:0000273A                 inc     ecx
.text:0000273B
.text:0000273B loc_273B:                               ; CODE XREF: _bignum_bitcount+34j
.text:0000273B                 mov     edx, [ebp+arg_0]
.text:0000273E                 mov     eax, [edx+eax*4+4]
.text:00002742                 shr     eax, cl
.text:00002744                 test    eax, eax
.text:00002746                 jnz     short loc_2753
.text:00002748                 mov     ecx, [ebp+var_4]
.text:0000274B                 sub     ecx, 1
.text:0000274E                 mov     [ebp+var_4], ecx
.text:00002751                 jmp     short loc_2719
.text:00002753 ; ---------------------------------------------------------------------------
.text:00002753
.text:00002753 loc_2753:                               ; CODE XREF: _bignum_bitcount+1Dj
.text:00002753                                         ; _bignum_bitcount+46j
.text:00002753                 mov     eax, [ebp+var_4]
.text:00002756                 add     eax, 1
.text:00002759                 mov     esp, ebp
.text:0000275B                 pop     ebp
.text:0000275C                 retn
.text:0000275C _bignum_bitcount endp
.text:0000275C
.text:0000275C ; ---------------------------------------------------------------------------
.text:0000275D                 align 10h
.text:00002760
.text:00002760 ; =============== S U B R O U T I N E =======================================
.text:00002760
.text:00002760 ; Attributes: bp-based frame
.text:00002760
.text:00002760                 public _ssh1_bignum_length
.text:00002760 _ssh1_bignum_length proc near           ; CODE XREF: _ssh1_write_bignum+24p
.text:00002760
.text:00002760 arg_0           = dword ptr  8
.text:00002760
.text:00002760                 push    ebp
.text:00002761                 mov     ebp, esp
.text:00002763                 mov     eax, [ebp+arg_0]
.text:00002766                 push    eax
.text:00002767                 call    _bignum_bitcount
.text:0000276C                 add     esp, 4
.text:0000276F                 add     eax, 7
.text:00002772                 cdq
.text:00002773                 and     edx, 7
.text:00002776                 add     eax, edx
.text:00002778                 sar     eax, 3
.text:0000277B                 add     eax, 2
.text:0000277E                 cmp     ebp, esp
.text:00002780                 call    __RTC_CheckEsp
.text:00002785                 pop     ebp
.text:00002786                 retn
.text:00002786 _ssh1_bignum_length endp
.text:00002786
.text:00002786 ; ---------------------------------------------------------------------------
.text:00002787                 align 10h
.text:00002790
.text:00002790 ; =============== S U B R O U T I N E =======================================
.text:00002790
.text:00002790 ; Attributes: bp-based frame
.text:00002790
.text:00002790                 public _ssh2_bignum_length
.text:00002790 _ssh2_bignum_length proc near
.text:00002790
.text:00002790 arg_0           = dword ptr  8
.text:00002790
.text:00002790                 push    ebp
.text:00002791                 mov     ebp, esp
.text:00002793                 mov     eax, [ebp+arg_0]
.text:00002796                 push    eax
.text:00002797                 call    _bignum_bitcount
.text:0000279C                 add     esp, 4
.text:0000279F                 add     eax, 8
.text:000027A2                 cdq
.text:000027A3                 and     edx, 7
.text:000027A6                 add     eax, edx
.text:000027A8                 sar     eax, 3
.text:000027AB                 add     eax, 4
.text:000027AE                 cmp     ebp, esp
.text:000027B0                 call    __RTC_CheckEsp
.text:000027B5                 pop     ebp
.text:000027B6                 retn
.text:000027B6 _ssh2_bignum_length endp
.text:000027B6
.text:000027B6 ; ---------------------------------------------------------------------------
.text:000027B7                 align 10h
.text:000027C0
.text:000027C0 ; =============== S U B R O U T I N E =======================================
.text:000027C0
.text:000027C0 ; Attributes: bp-based frame
.text:000027C0
.text:000027C0                 public _bignum_byte
.text:000027C0 _bignum_byte    proc near               ; CODE XREF: _ssh1_write_bignum+93p
.text:000027C0
.text:000027C0 arg_0           = dword ptr  8
.text:000027C0 arg_4           = dword ptr  0Ch
.text:000027C0
.text:000027C0                 push    ebp
.text:000027C1                 mov     ebp, esp
.text:000027C3                 cmp     [ebp+arg_4], 0
.text:000027C7                 jl      short loc_27D6
.text:000027C9                 mov     eax, [ebp+arg_0]
.text:000027CC                 mov     ecx, [eax]
.text:000027CE                 shl     ecx, 2
.text:000027D1                 cmp     [ebp+arg_4], ecx
.text:000027D4                 jl      short loc_27DC
.text:000027D6
.text:000027D6 loc_27D6:                               ; CODE XREF: _bignum_byte+7j
.text:000027D6                 xor     eax, eax
.text:000027D8                 jmp     short loc_2809
.text:000027DA ; ---------------------------------------------------------------------------
.text:000027DA                 jmp     short loc_2809
.text:000027DC ; ---------------------------------------------------------------------------
.text:000027DC
.text:000027DC loc_27DC:                               ; CODE XREF: _bignum_byte+14j
.text:000027DC                 mov     eax, [ebp+arg_4]
.text:000027DF                 cdq
.text:000027E0                 and     edx, 3
.text:000027E3                 add     eax, edx
.text:000027E5                 sar     eax, 2
.text:000027E8                 mov     ecx, [ebp+arg_4]
.text:000027EB                 and     ecx, 80000003h
.text:000027F1                 jns     short loc_27F8
.text:000027F3                 dec     ecx
.text:000027F4                 or      ecx, 0FFFFFFFCh
.text:000027F7                 inc     ecx
.text:000027F8
.text:000027F8 loc_27F8:                               ; CODE XREF: _bignum_byte+31j
.text:000027F8                 shl     ecx, 3
.text:000027FB                 mov     edx, [ebp+arg_0]
.text:000027FE                 mov     eax, [edx+eax*4+4]
.text:00002802                 shr     eax, cl
.text:00002804                 and     eax, 0FFh
.text:00002809
.text:00002809 loc_2809:                               ; CODE XREF: _bignum_byte+18j
.text:00002809                                         ; _bignum_byte+1Aj
.text:00002809                 pop     ebp
.text:0000280A                 retn
.text:0000280A _bignum_byte    endp
.text:0000280A
.text:0000280A ; ---------------------------------------------------------------------------
.text:0000280B                 align 10h
.text:00002810
.text:00002810 ; =============== S U B R O U T I N E =======================================
.text:00002810
.text:00002810 ; Attributes: bp-based frame
.text:00002810
.text:00002810                 public _bignum_bit
.text:00002810 _bignum_bit     proc near
.text:00002810
.text:00002810 arg_0           = dword ptr  8
.text:00002810 arg_4           = dword ptr  0Ch
.text:00002810
.text:00002810                 push    ebp
.text:00002811                 mov     ebp, esp
.text:00002813                 cmp     [ebp+arg_4], 0
.text:00002817                 jl      short loc_2826
.text:00002819                 mov     eax, [ebp+arg_0]
.text:0000281C                 mov     ecx, [eax]
.text:0000281E                 shl     ecx, 5
.text:00002821                 cmp     [ebp+arg_4], ecx
.text:00002824                 jl      short loc_282C
.text:00002826
.text:00002826 loc_2826:                               ; CODE XREF: _bignum_bit+7j
.text:00002826                 xor     eax, eax
.text:00002828                 jmp     short loc_2854
.text:0000282A ; ---------------------------------------------------------------------------
.text:0000282A                 jmp     short loc_2854
.text:0000282C ; ---------------------------------------------------------------------------
.text:0000282C
.text:0000282C loc_282C:                               ; CODE XREF: _bignum_bit+14j
.text:0000282C                 mov     eax, [ebp+arg_4]
.text:0000282F                 cdq
.text:00002830                 and     edx, 1Fh
.text:00002833                 add     eax, edx
.text:00002835                 sar     eax, 5
.text:00002838                 mov     ecx, [ebp+arg_4]
.text:0000283B                 and     ecx, 8000001Fh
.text:00002841                 jns     short loc_2848
.text:00002843                 dec     ecx
.text:00002844                 or      ecx, 0FFFFFFE0h
.text:00002847                 inc     ecx
.text:00002848
.text:00002848 loc_2848:                               ; CODE XREF: _bignum_bit+31j
.text:00002848                 mov     edx, [ebp+arg_0]
.text:0000284B                 mov     eax, [edx+eax*4+4]
.text:0000284F                 shr     eax, cl
.text:00002851                 and     eax, 1
.text:00002854
.text:00002854 loc_2854:                               ; CODE XREF: _bignum_bit+18j
.text:00002854                                         ; _bignum_bit+1Aj
.text:00002854                 pop     ebp
.text:00002855                 retn
.text:00002855 _bignum_bit     endp
.text:00002855
.text:00002855 ; ---------------------------------------------------------------------------
.text:00002856                 align 10h
.text:00002860
.text:00002860 ; =============== S U B R O U T I N E =======================================
.text:00002860
.text:00002860 ; Attributes: bp-based frame
.text:00002860
.text:00002860                 public _bignum_set_bit
.text:00002860 _bignum_set_bit proc near               ; CODE XREF: _bn_power_2+4Dp
.text:00002860
.text:00002860 var_8           = dword ptr -8
.text:00002860 var_4           = dword ptr -4
.text:00002860 arg_0           = dword ptr  8
.text:00002860 arg_4           = dword ptr  0Ch
.text:00002860 arg_8           = dword ptr  10h
.text:00002860
.text:00002860                 push    ebp
.text:00002861                 mov     ebp, esp
.text:00002863                 sub     esp, 8
.text:00002866                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000286D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002874                 cmp     [ebp+arg_4], 0
.text:00002878                 jl      short loc_2887
.text:0000287A                 mov     eax, [ebp+arg_0]
.text:0000287D                 mov     ecx, [eax]
.text:0000287F                 shl     ecx, 5
.text:00002882                 cmp     [ebp+arg_4], ecx
.text:00002885                 jl      short loc_288E
.text:00002887
.text:00002887 loc_2887:                               ; CODE XREF: _bignum_set_bit+18j
.text:00002887                 call    _abort
.text:0000288C ; ---------------------------------------------------------------------------
.text:0000288C                 jmp     short loc_28EE
.text:0000288E ; ---------------------------------------------------------------------------
.text:0000288E
.text:0000288E loc_288E:                               ; CODE XREF: _bignum_set_bit+25j
.text:0000288E                 mov     eax, [ebp+arg_4]
.text:00002891                 cdq
.text:00002892                 and     edx, 1Fh
.text:00002895                 add     eax, edx
.text:00002897                 sar     eax, 5
.text:0000289A                 add     eax, 1
.text:0000289D                 mov     [ebp+var_4], eax
.text:000028A0                 mov     ecx, [ebp+arg_4]
.text:000028A3                 and     ecx, 8000001Fh
.text:000028A9                 jns     short loc_28B0
.text:000028AB                 dec     ecx
.text:000028AC                 or      ecx, 0FFFFFFE0h
.text:000028AF                 inc     ecx
.text:000028B0
.text:000028B0 loc_28B0:                               ; CODE XREF: _bignum_set_bit+49j
.text:000028B0                 mov     edx, 1
.text:000028B5                 shl     edx, cl
.text:000028B7                 mov     [ebp+var_8], edx
.text:000028BA                 cmp     [ebp+arg_8], 0
.text:000028BE                 jz      short loc_28D7
.text:000028C0                 mov     eax, [ebp+var_4]
.text:000028C3                 mov     ecx, [ebp+arg_0]
.text:000028C6                 mov     edx, [ecx+eax*4]
.text:000028C9                 or      edx, [ebp+var_8]
.text:000028CC                 mov     eax, [ebp+var_4]
.text:000028CF                 mov     ecx, [ebp+arg_0]
.text:000028D2                 mov     [ecx+eax*4], edx
.text:000028D5                 jmp     short loc_28EE
.text:000028D7 ; ---------------------------------------------------------------------------
.text:000028D7
.text:000028D7 loc_28D7:                               ; CODE XREF: _bignum_set_bit+5Ej
.text:000028D7                 mov     edx, [ebp+var_8]
.text:000028DA                 not     edx
.text:000028DC                 mov     eax, [ebp+var_4]
.text:000028DF                 mov     ecx, [ebp+arg_0]
.text:000028E2                 and     edx, [ecx+eax*4]
.text:000028E5                 mov     eax, [ebp+var_4]
.text:000028E8                 mov     ecx, [ebp+arg_0]
.text:000028EB                 mov     [ecx+eax*4], edx
.text:000028EE
.text:000028EE loc_28EE:                               ; CODE XREF: _bignum_set_bit+2Cj
.text:000028EE                                         ; _bignum_set_bit+75j
.text:000028EE                 add     esp, 8
.text:000028F1                 cmp     ebp, esp
.text:000028F3                 call    __RTC_CheckEsp
.text:000028F8                 mov     esp, ebp
.text:000028FA                 pop     ebp
.text:000028FB                 retn
.text:000028FB _bignum_set_bit endp
.text:000028FB
.text:000028FB ; ---------------------------------------------------------------------------
.text:000028FC                 align 10h
.text:00002900
.text:00002900 ; =============== S U B R O U T I N E =======================================
.text:00002900
.text:00002900 ; Attributes: bp-based frame
.text:00002900
.text:00002900                 public _ssh1_write_bignum
.text:00002900 _ssh1_write_bignum proc near
.text:00002900
.text:00002900 var_14          = dword ptr -14h
.text:00002900 var_10          = dword ptr -10h
.text:00002900 var_C           = dword ptr -0Ch
.text:00002900 var_8           = dword ptr -8
.text:00002900 var_4           = dword ptr -4
.text:00002900 arg_0           = dword ptr  8
.text:00002900 arg_4           = dword ptr  0Ch
.text:00002900
.text:00002900                 push    ebp
.text:00002901                 mov     ebp, esp
.text:00002903                 sub     esp, 14h
.text:00002906                 mov     eax, 0CCCCCCCCh
.text:0000290B                 mov     [ebp+var_14], eax
.text:0000290E                 mov     [ebp+var_10], eax
.text:00002911                 mov     [ebp+var_C], eax
.text:00002914                 mov     [ebp+var_8], eax
.text:00002917                 mov     [ebp+var_4], eax
.text:0000291A                 mov     eax, [ebp+arg_0]
.text:0000291D                 mov     [ebp+var_4], eax
.text:00002920                 mov     ecx, [ebp+arg_4]
.text:00002923                 push    ecx
.text:00002924                 call    _ssh1_bignum_length
.text:00002929                 add     esp, 4
.text:0000292C                 mov     [ebp+var_8], eax
.text:0000292F                 mov     edx, [ebp+arg_4]
.text:00002932                 push    edx
.text:00002933                 call    _bignum_bitcount
.text:00002938                 add     esp, 4
.text:0000293B                 mov     [ebp+var_10], eax
.text:0000293E                 mov     eax, [ebp+var_10]
.text:00002941                 sar     eax, 8
.text:00002944                 and     eax, 0FFh
.text:00002949                 mov     ecx, [ebp+var_4]
.text:0000294C                 mov     [ecx], al
.text:0000294E                 mov     edx, [ebp+var_4]
.text:00002951                 add     edx, 1
.text:00002954                 mov     [ebp+var_4], edx
.text:00002957                 mov     eax, [ebp+var_10]
.text:0000295A                 and     eax, 0FFh
.text:0000295F                 mov     ecx, [ebp+var_4]
.text:00002962                 mov     [ecx], al
.text:00002964                 mov     edx, [ebp+var_4]
.text:00002967                 add     edx, 1
.text:0000296A                 mov     [ebp+var_4], edx
.text:0000296D                 mov     eax, [ebp+var_8]
.text:00002970                 sub     eax, 2
.text:00002973                 mov     [ebp+var_C], eax
.text:00002976
.text:00002976 loc_2976:                               ; CODE XREF: _ssh1_write_bignum+A9j
.text:00002976                 mov     ecx, [ebp+var_C]
.text:00002979                 mov     [ebp+var_14], ecx
.text:0000297C                 mov     edx, [ebp+var_C]
.text:0000297F                 sub     edx, 1
.text:00002982                 mov     [ebp+var_C], edx
.text:00002985                 cmp     [ebp+var_14], 0
.text:00002989                 jz      short loc_29AB
.text:0000298B                 mov     eax, [ebp+var_C]
.text:0000298E                 push    eax
.text:0000298F                 mov     ecx, [ebp+arg_4]
.text:00002992                 push    ecx
.text:00002993                 call    _bignum_byte
.text:00002998                 add     esp, 8
.text:0000299B                 mov     edx, [ebp+var_4]
.text:0000299E                 mov     [edx], al
.text:000029A0                 mov     eax, [ebp+var_4]
.text:000029A3                 add     eax, 1
.text:000029A6                 mov     [ebp+var_4], eax
.text:000029A9                 jmp     short loc_2976
.text:000029AB ; ---------------------------------------------------------------------------
.text:000029AB
.text:000029AB loc_29AB:                               ; CODE XREF: _ssh1_write_bignum+89j
.text:000029AB                 mov     eax, [ebp+var_8]
.text:000029AE                 add     esp, 14h
.text:000029B1                 cmp     ebp, esp
.text:000029B3                 call    __RTC_CheckEsp
.text:000029B8                 mov     esp, ebp
.text:000029BA                 pop     ebp
.text:000029BB                 retn
.text:000029BB _ssh1_write_bignum endp
.text:000029BB
.text:000029BB ; ---------------------------------------------------------------------------
.text:000029BC                 align 10h
.text:000029C0
.text:000029C0 ; =============== S U B R O U T I N E =======================================
.text:000029C0
.text:000029C0 ; Attributes: bp-based frame
.text:000029C0
.text:000029C0                 public _bignum_cmp
.text:000029C0 _bignum_cmp     proc near               ; CODE XREF: _biggcd+44p
.text:000029C0                                         ; _modinv+B2p ...
.text:000029C0
.text:000029C0 var_20          = dword ptr -20h
.text:000029C0 var_1C          = dword ptr -1Ch
.text:000029C0 var_18          = dword ptr -18h
.text:000029C0 var_14          = dword ptr -14h
.text:000029C0 var_10          = dword ptr -10h
.text:000029C0 var_C           = dword ptr -0Ch
.text:000029C0 var_8           = dword ptr -8
.text:000029C0 var_4           = dword ptr -4
.text:000029C0 arg_0           = dword ptr  8
.text:000029C0 arg_4           = dword ptr  0Ch
.text:000029C0
.text:000029C0                 push    ebp
.text:000029C1                 mov     ebp, esp
.text:000029C3                 sub     esp, 20h
.text:000029C6                 mov     eax, 0CCCCCCCCh
.text:000029CB                 mov     [ebp+var_20], eax
.text:000029CE                 mov     [ebp+var_1C], eax
.text:000029D1                 mov     [ebp+var_18], eax
.text:000029D4                 mov     [ebp+var_14], eax
.text:000029D7                 mov     [ebp+var_10], eax
.text:000029DA                 mov     [ebp+var_C], eax
.text:000029DD                 mov     [ebp+var_8], eax
.text:000029E0                 mov     [ebp+var_4], eax
.text:000029E3                 mov     eax, [ebp+arg_0]
.text:000029E6                 mov     ecx, [eax]
.text:000029E8                 mov     [ebp+var_4], ecx
.text:000029EB                 mov     edx, [ebp+arg_4]
.text:000029EE                 mov     eax, [edx]
.text:000029F0                 mov     [ebp+var_8], eax
.text:000029F3                 cmp     [ebp+var_4], 1
.text:000029F7                 jnz     short loc_2A0C
.text:000029F9                 mov     ecx, [ebp+var_4]
.text:000029FC                 mov     edx, [ebp+arg_0]
.text:000029FF                 cmp     dword ptr [edx+ecx*4], 0
.text:00002A03                 jnz     short loc_2A0C
.text:00002A05                 mov     [ebp+var_4], 0
.text:00002A0C
.text:00002A0C loc_2A0C:                               ; CODE XREF: _bignum_cmp+37j
.text:00002A0C                                         ; _bignum_cmp+43j
.text:00002A0C                 cmp     [ebp+var_8], 1
.text:00002A10                 jnz     short loc_2A25
.text:00002A12                 mov     eax, [ebp+var_8]
.text:00002A15                 mov     ecx, [ebp+arg_4]
.text:00002A18                 cmp     dword ptr [ecx+eax*4], 0
.text:00002A1C                 jnz     short loc_2A25
.text:00002A1E                 mov     [ebp+var_8], 0
.text:00002A25
.text:00002A25 loc_2A25:                               ; CODE XREF: _bignum_cmp+50j
.text:00002A25                                         ; _bignum_cmp+5Cj
.text:00002A25                 cmp     [ebp+var_4], 0
.text:00002A29                 jz      short loc_2A4E
.text:00002A2B                 mov     edx, [ebp+var_4]
.text:00002A2E                 mov     eax, [ebp+arg_0]
.text:00002A31                 cmp     dword ptr [eax+edx*4], 0
.text:00002A35                 jnz     short loc_2A4E
.text:00002A37                 push    534h
.text:00002A3C                 push    offset $SG7841  ; "..\\..\\..\\sshbn.c"
.text:00002A41                 push    offset $SG7842  ; "amax == 0 || a[amax] != 0"
.text:00002A46                 call    __wassert
.text:00002A4B ; ---------------------------------------------------------------------------
.text:00002A4B                 add     esp, 0Ch
.text:00002A4E
.text:00002A4E loc_2A4E:                               ; CODE XREF: _bignum_cmp+69j
.text:00002A4E                                         ; _bignum_cmp+75j
.text:00002A4E                 cmp     [ebp+var_8], 0
.text:00002A52                 jz      short loc_2A77
.text:00002A54                 mov     edx, [ebp+var_8]
.text:00002A57                 mov     eax, [ebp+arg_4]
.text:00002A5A                 cmp     dword ptr [eax+edx*4], 0
.text:00002A5E                 jnz     short loc_2A77
.text:00002A60                 push    535h
.text:00002A65                 push    offset $SG7844  ; "..\\..\\..\\sshbn.c"
.text:00002A6A                 push    offset $SG7845  ; "bmax == 0 || b[bmax] != 0"
.text:00002A6F                 call    __wassert
.text:00002A74 ; ---------------------------------------------------------------------------
.text:00002A74                 add     esp, 0Ch
.text:00002A77
.text:00002A77 loc_2A77:                               ; CODE XREF: _bignum_cmp+92j
.text:00002A77                                         ; _bignum_cmp+9Ej
.text:00002A77                 mov     edx, [ebp+var_4]
.text:00002A7A                 cmp     edx, [ebp+var_8]
.text:00002A7D                 jle     short loc_2A87
.text:00002A7F                 mov     eax, [ebp+var_4]
.text:00002A82                 mov     [ebp+var_18], eax
.text:00002A85                 jmp     short loc_2A8D
.text:00002A87 ; ---------------------------------------------------------------------------
.text:00002A87
.text:00002A87 loc_2A87:                               ; CODE XREF: _bignum_cmp+BDj
.text:00002A87                 mov     ecx, [ebp+var_8]
.text:00002A8A                 mov     [ebp+var_18], ecx
.text:00002A8D
.text:00002A8D loc_2A8D:                               ; CODE XREF: _bignum_cmp+C5j
.text:00002A8D                 mov     edx, [ebp+var_18]
.text:00002A90                 mov     [ebp+var_C], edx
.text:00002A93
.text:00002A93 loc_2A93:                               ; CODE XREF: _bignum_cmp+144j
.text:00002A93                 cmp     [ebp+var_C], 0
.text:00002A97                 jz      short loc_2B06
.text:00002A99                 mov     eax, [ebp+var_C]
.text:00002A9C                 cmp     eax, [ebp+var_4]
.text:00002A9F                 jle     short loc_2AAA
.text:00002AA1                 mov     [ebp+var_1C], 0
.text:00002AA8                 jmp     short loc_2AB6
.text:00002AAA ; ---------------------------------------------------------------------------
.text:00002AAA
.text:00002AAA loc_2AAA:                               ; CODE XREF: _bignum_cmp+DFj
.text:00002AAA                 mov     ecx, [ebp+var_C]
.text:00002AAD                 mov     edx, [ebp+arg_0]
.text:00002AB0                 mov     eax, [edx+ecx*4]
.text:00002AB3                 mov     [ebp+var_1C], eax
.text:00002AB6
.text:00002AB6 loc_2AB6:                               ; CODE XREF: _bignum_cmp+E8j
.text:00002AB6                 mov     ecx, [ebp+var_1C]
.text:00002AB9                 mov     [ebp+var_10], ecx
.text:00002ABC                 mov     edx, [ebp+var_C]
.text:00002ABF                 cmp     edx, [ebp+var_8]
.text:00002AC2                 jle     short loc_2ACD
.text:00002AC4                 mov     [ebp+var_20], 0
.text:00002ACB                 jmp     short loc_2AD9
.text:00002ACD ; ---------------------------------------------------------------------------
.text:00002ACD
.text:00002ACD loc_2ACD:                               ; CODE XREF: _bignum_cmp+102j
.text:00002ACD                 mov     eax, [ebp+var_C]
.text:00002AD0                 mov     ecx, [ebp+arg_4]
.text:00002AD3                 mov     edx, [ecx+eax*4]
.text:00002AD6                 mov     [ebp+var_20], edx
.text:00002AD9
.text:00002AD9 loc_2AD9:                               ; CODE XREF: _bignum_cmp+10Bj
.text:00002AD9                 mov     eax, [ebp+var_20]
.text:00002ADC                 mov     [ebp+var_14], eax
.text:00002ADF                 mov     ecx, [ebp+var_10]
.text:00002AE2                 cmp     ecx, [ebp+var_14]
.text:00002AE5                 jnb     short loc_2AEC
.text:00002AE7                 or      eax, 0FFFFFFFFh
.text:00002AEA                 jmp     short loc_2B08
.text:00002AEC ; ---------------------------------------------------------------------------
.text:00002AEC
.text:00002AEC loc_2AEC:                               ; CODE XREF: _bignum_cmp+125j
.text:00002AEC                 mov     edx, [ebp+var_10]
.text:00002AEF                 cmp     edx, [ebp+var_14]
.text:00002AF2                 jbe     short loc_2AFB
.text:00002AF4                 mov     eax, 1
.text:00002AF9                 jmp     short loc_2B08
.text:00002AFB ; ---------------------------------------------------------------------------
.text:00002AFB
.text:00002AFB loc_2AFB:                               ; CODE XREF: _bignum_cmp+132j
.text:00002AFB                 mov     eax, [ebp+var_C]
.text:00002AFE                 sub     eax, 1
.text:00002B01                 mov     [ebp+var_C], eax
.text:00002B04                 jmp     short loc_2A93
.text:00002B06 ; ---------------------------------------------------------------------------
.text:00002B06
.text:00002B06 loc_2B06:                               ; CODE XREF: _bignum_cmp+D7j
.text:00002B06                 xor     eax, eax
.text:00002B08
.text:00002B08 loc_2B08:                               ; CODE XREF: _bignum_cmp+12Aj
.text:00002B08                                         ; _bignum_cmp+139j
.text:00002B08                 add     esp, 20h
.text:00002B0B                 cmp     ebp, esp
.text:00002B0D                 call    __RTC_CheckEsp
.text:00002B12                 mov     esp, ebp
.text:00002B14                 pop     ebp
.text:00002B15                 retn
.text:00002B15 _bignum_cmp     endp
.text:00002B15
.text:00002B15 ; ---------------------------------------------------------------------------
.text:00002B16                 align 10h
.text:00002B20
.text:00002B20 ; =============== S U B R O U T I N E =======================================
.text:00002B20
.text:00002B20 ; Attributes: bp-based frame
.text:00002B20
.text:00002B20                 public _bignum_rshift
.text:00002B20 _bignum_rshift  proc near
.text:00002B20
.text:00002B20 var_24          = dword ptr -24h
.text:00002B20 var_20          = dword ptr -20h
.text:00002B20 var_1C          = dword ptr -1Ch
.text:00002B20 var_18          = dword ptr -18h
.text:00002B20 var_14          = dword ptr -14h
.text:00002B20 var_10          = dword ptr -10h
.text:00002B20 var_C           = dword ptr -0Ch
.text:00002B20 var_8           = dword ptr -8
.text:00002B20 var_4           = dword ptr -4
.text:00002B20 arg_0           = dword ptr  8
.text:00002B20 arg_4           = dword ptr  0Ch
.text:00002B20
.text:00002B20                 push    ebp
.text:00002B21                 mov     ebp, esp
.text:00002B23                 sub     esp, 24h
.text:00002B26                 mov     eax, 0CCCCCCCCh
.text:00002B2B                 mov     [ebp+var_24], eax
.text:00002B2E                 mov     [ebp+var_20], eax
.text:00002B31                 mov     [ebp+var_1C], eax
.text:00002B34                 mov     [ebp+var_18], eax
.text:00002B37                 mov     [ebp+var_14], eax
.text:00002B3A                 mov     [ebp+var_10], eax
.text:00002B3D                 mov     [ebp+var_C], eax
.text:00002B40                 mov     [ebp+var_8], eax
.text:00002B43                 mov     [ebp+var_4], eax
.text:00002B46                 cmp     [ebp+arg_4], 0
.text:00002B4A                 jge     short loc_2B63
.text:00002B4C                 push    54Dh
.text:00002B51                 push    offset $SG7867  ; "..\\..\\..\\sshbn.c"
.text:00002B56                 push    offset $SG7868  ; "shift >= 0"
.text:00002B5B                 call    __wassert
.text:00002B60 ; ---------------------------------------------------------------------------
.text:00002B60                 add     esp, 0Ch
.text:00002B63
.text:00002B63 loc_2B63:                               ; CODE XREF: _bignum_rshift+2Aj
.text:00002B63                 mov     ecx, [ebp+arg_0]
.text:00002B66                 push    ecx
.text:00002B67                 call    _bignum_bitcount
.text:00002B6C                 add     esp, 4
.text:00002B6F                 sub     eax, [ebp+arg_4]
.text:00002B72                 mov     [ebp+var_18], eax
.text:00002B75                 mov     eax, [ebp+var_18]
.text:00002B78                 add     eax, 1Fh
.text:00002B7B                 cdq
.text:00002B7C                 and     edx, 1Fh
.text:00002B7F                 add     eax, edx
.text:00002B81                 sar     eax, 5
.text:00002B84                 push    eax
.text:00002B85                 call    _newbn
.text:00002B8A                 add     esp, 4
.text:00002B8D                 mov     [ebp+var_4], eax
.text:00002B90                 cmp     [ebp+var_4], 0
.text:00002B94                 jz      loc_2C43
.text:00002B9A                 mov     eax, [ebp+arg_4]
.text:00002B9D                 cdq
.text:00002B9E                 and     edx, 1Fh
.text:00002BA1                 add     eax, edx
.text:00002BA3                 sar     eax, 5
.text:00002BA6                 mov     [ebp+var_C], eax
.text:00002BA9                 mov     edx, [ebp+arg_4]
.text:00002BAC                 and     edx, 8000001Fh
.text:00002BB2                 jns     short loc_2BB9
.text:00002BB4                 dec     edx
.text:00002BB5                 or      edx, 0FFFFFFE0h
.text:00002BB8                 inc     edx
.text:00002BB9
.text:00002BB9 loc_2BB9:                               ; CODE XREF: _bignum_rshift+92j
.text:00002BB9                 mov     [ebp+var_10], edx
.text:00002BBC                 mov     eax, 20h ; ' '
.text:00002BC1                 sub     eax, [ebp+var_10]
.text:00002BC4                 mov     [ebp+var_14], eax
.text:00002BC7                 mov     ecx, [ebp+var_C]
.text:00002BCA                 mov     edx, [ebp+arg_0]
.text:00002BCD                 mov     eax, [edx+ecx*4+4]
.text:00002BD1                 mov     [ebp+var_20], eax
.text:00002BD4                 mov     [ebp+var_8], 1
.text:00002BDB                 jmp     short loc_2BE6
.text:00002BDD ; ---------------------------------------------------------------------------
.text:00002BDD
.text:00002BDD loc_2BDD:                               ; CODE XREF: _bignum_rshift+121j
.text:00002BDD                 mov     ecx, [ebp+var_8]
.text:00002BE0                 add     ecx, 1
.text:00002BE3                 mov     [ebp+var_8], ecx
.text:00002BE6
.text:00002BE6 loc_2BE6:                               ; CODE XREF: _bignum_rshift+BBj
.text:00002BE6                 mov     edx, [ebp+var_4]
.text:00002BE9                 mov     eax, [ebp+var_8]
.text:00002BEC                 cmp     eax, [edx]
.text:00002BEE                 jg      short loc_2C43
.text:00002BF0                 mov     ecx, [ebp+var_20]
.text:00002BF3                 mov     [ebp+var_1C], ecx
.text:00002BF6                 mov     edx, [ebp+var_C]
.text:00002BF9                 mov     eax, [ebp+var_8]
.text:00002BFC                 lea     ecx, [eax+edx+1]
.text:00002C00                 mov     edx, [ebp+arg_0]
.text:00002C03                 cmp     ecx, [edx]
.text:00002C05                 jg      short loc_2C19
.text:00002C07                 mov     eax, [ebp+var_8]
.text:00002C0A                 add     eax, [ebp+var_C]
.text:00002C0D                 mov     ecx, [ebp+arg_0]
.text:00002C10                 mov     edx, [ecx+eax*4+4]
.text:00002C14                 mov     [ebp+var_24], edx
.text:00002C17                 jmp     short loc_2C20
.text:00002C19 ; ---------------------------------------------------------------------------
.text:00002C19
.text:00002C19 loc_2C19:                               ; CODE XREF: _bignum_rshift+E5j
.text:00002C19                 mov     [ebp+var_24], 0
.text:00002C20
.text:00002C20 loc_2C20:                               ; CODE XREF: _bignum_rshift+F7j
.text:00002C20                 mov     eax, [ebp+var_24]
.text:00002C23                 mov     [ebp+var_20], eax
.text:00002C26                 mov     edx, [ebp+var_1C]
.text:00002C29                 mov     ecx, [ebp+var_10]
.text:00002C2C                 shr     edx, cl
.text:00002C2E                 mov     eax, [ebp+var_20]
.text:00002C31                 mov     ecx, [ebp+var_14]
.text:00002C34                 shl     eax, cl
.text:00002C36                 or      edx, eax
.text:00002C38                 mov     ecx, [ebp+var_8]
.text:00002C3B                 mov     eax, [ebp+var_4]
.text:00002C3E                 mov     [eax+ecx*4], edx
.text:00002C41                 jmp     short loc_2BDD
.text:00002C43 ; ---------------------------------------------------------------------------
.text:00002C43
.text:00002C43 loc_2C43:                               ; CODE XREF: _bignum_rshift+74j
.text:00002C43                                         ; _bignum_rshift+CEj
.text:00002C43                 mov     eax, [ebp+var_4]
.text:00002C46                 add     esp, 24h
.text:00002C49                 cmp     ebp, esp
.text:00002C4B                 call    __RTC_CheckEsp
.text:00002C50                 mov     esp, ebp
.text:00002C52                 pop     ebp
.text:00002C53                 retn
.text:00002C53 _bignum_rshift  endp
.text:00002C53
.text:00002C53 ; ---------------------------------------------------------------------------
.text:00002C54                 align 10h
.text:00002C60
.text:00002C60 ; =============== S U B R O U T I N E =======================================
.text:00002C60
.text:00002C60 ; Attributes: bp-based frame
.text:00002C60
.text:00002C60                 public _bigmuladd
.text:00002C60 _bigmuladd      proc near               ; CODE XREF: _bigmul+Dp
.text:00002C60                                         ; _modinv+1C4p
.text:00002C60
.text:00002C60 var_44          = dword ptr -44h
.text:00002C60 var_40          = dword ptr -40h
.text:00002C60 var_3C          = dword ptr -3Ch
.text:00002C60 var_38          = dword ptr -38h
.text:00002C60 var_34          = dword ptr -34h
.text:00002C60 var_30          = dword ptr -30h
.text:00002C60 var_2C          = dword ptr -2Ch
.text:00002C60 var_28          = dword ptr -28h
.text:00002C60 var_24          = dword ptr -24h
.text:00002C60 var_20          = dword ptr -20h
.text:00002C60 var_1C          = dword ptr -1Ch
.text:00002C60 var_18          = dword ptr -18h
.text:00002C60 var_14          = dword ptr -14h
.text:00002C60 var_10          = dword ptr -10h
.text:00002C60 var_C           = dword ptr -0Ch
.text:00002C60 var_8           = dword ptr -8
.text:00002C60 var_4           = dword ptr -4
.text:00002C60 arg_0           = dword ptr  8
.text:00002C60 arg_4           = dword ptr  0Ch
.text:00002C60 arg_8           = dword ptr  10h
.text:00002C60
.text:00002C60                 push    ebp
.text:00002C61                 mov     ebp, esp
.text:00002C63                 sub     esp, 44h
.text:00002C66                 push    edi
.text:00002C67                 lea     edi, [ebp+var_44]
.text:00002C6A                 mov     ecx, 11h
.text:00002C6F                 mov     eax, 0CCCCCCCCh
.text:00002C74                 rep stosd
.text:00002C76                 mov     eax, [ebp+arg_0]
.text:00002C79                 mov     ecx, [eax]
.text:00002C7B                 mov     [ebp+var_4], ecx
.text:00002C7E                 mov     edx, [ebp+arg_4]
.text:00002C81                 mov     eax, [edx]
.text:00002C83                 mov     [ebp+var_8], eax
.text:00002C86                 mov     ecx, [ebp+var_4]
.text:00002C89                 cmp     ecx, [ebp+var_8]
.text:00002C8C                 jle     short loc_2C96
.text:00002C8E                 mov     edx, [ebp+var_4]
.text:00002C91                 mov     [ebp+var_30], edx
.text:00002C94                 jmp     short loc_2C9C
.text:00002C96 ; ---------------------------------------------------------------------------
.text:00002C96
.text:00002C96 loc_2C96:                               ; CODE XREF: _bigmuladd+2Cj
.text:00002C96                 mov     eax, [ebp+var_8]
.text:00002C99                 mov     [ebp+var_30], eax
.text:00002C9C
.text:00002C9C loc_2C9C:                               ; CODE XREF: _bigmuladd+34j
.text:00002C9C                 mov     ecx, [ebp+var_30]
.text:00002C9F                 mov     [ebp+var_C], ecx
.text:00002CA2                 mov     edx, [ebp+var_C]
.text:00002CA5                 push    edx
.text:00002CA6                 call    _mul_compute_scratch
.text:00002CAB                 add     esp, 4
.text:00002CAE                 mov     ecx, [ebp+var_C]
.text:00002CB1                 lea     edx, [eax+ecx*4]
.text:00002CB4                 mov     [ebp+var_1C], edx
.text:00002CB7                 push    4
.text:00002CB9                 mov     eax, [ebp+var_1C]
.text:00002CBC                 push    eax
.text:00002CBD                 call    _safemalloc
.text:00002CC2                 add     esp, 8
.text:00002CC5                 mov     [ebp+var_20], eax
.text:00002CC8                 mov     [ebp+var_14], 0
.text:00002CCF                 jmp     short loc_2CDA
.text:00002CD1 ; ---------------------------------------------------------------------------
.text:00002CD1
.text:00002CD1 loc_2CD1:                               ; CODE XREF: _bigmuladd+EDj
.text:00002CD1                 mov     ecx, [ebp+var_14]
.text:00002CD4                 add     ecx, 1
.text:00002CD7                 mov     [ebp+var_14], ecx
.text:00002CDA
.text:00002CDA loc_2CDA:                               ; CODE XREF: _bigmuladd+6Fj
.text:00002CDA                 mov     edx, [ebp+var_14]
.text:00002CDD                 cmp     edx, [ebp+var_C]
.text:00002CE0                 jge     short loc_2D4F
.text:00002CE2                 mov     eax, [ebp+var_C]
.text:00002CE5                 sub     eax, [ebp+var_14]
.text:00002CE8                 mov     ecx, [ebp+arg_0]
.text:00002CEB                 cmp     eax, [ecx]
.text:00002CED                 jg      short loc_2D00
.text:00002CEF                 mov     edx, [ebp+var_C]
.text:00002CF2                 sub     edx, [ebp+var_14]
.text:00002CF5                 mov     eax, [ebp+arg_0]
.text:00002CF8                 mov     ecx, [eax+edx*4]
.text:00002CFB                 mov     [ebp+var_34], ecx
.text:00002CFE                 jmp     short loc_2D07
.text:00002D00 ; ---------------------------------------------------------------------------
.text:00002D00
.text:00002D00 loc_2D00:                               ; CODE XREF: _bigmuladd+8Dj
.text:00002D00                 mov     [ebp+var_34], 0
.text:00002D07
.text:00002D07 loc_2D07:                               ; CODE XREF: _bigmuladd+9Ej
.text:00002D07                 mov     edx, [ebp+var_C]
.text:00002D0A                 imul    edx, 0
.text:00002D0D                 add     edx, [ebp+var_14]
.text:00002D10                 mov     eax, [ebp+var_20]
.text:00002D13                 mov     ecx, [ebp+var_34]
.text:00002D16                 mov     [eax+edx*4], ecx
.text:00002D19                 mov     edx, [ebp+var_C]
.text:00002D1C                 sub     edx, [ebp+var_14]
.text:00002D1F                 mov     eax, [ebp+arg_4]
.text:00002D22                 cmp     edx, [eax]
.text:00002D24                 jg      short loc_2D37
.text:00002D26                 mov     ecx, [ebp+var_C]
.text:00002D29                 sub     ecx, [ebp+var_14]
.text:00002D2C                 mov     edx, [ebp+arg_4]
.text:00002D2F                 mov     eax, [edx+ecx*4]
.text:00002D32                 mov     [ebp+var_38], eax
.text:00002D35                 jmp     short loc_2D3E
.text:00002D37 ; ---------------------------------------------------------------------------
.text:00002D37
.text:00002D37 loc_2D37:                               ; CODE XREF: _bigmuladd+C4j
.text:00002D37                 mov     [ebp+var_38], 0
.text:00002D3E
.text:00002D3E loc_2D3E:                               ; CODE XREF: _bigmuladd+D5j
.text:00002D3E                 mov     ecx, [ebp+var_C]
.text:00002D41                 add     ecx, [ebp+var_14]
.text:00002D44                 mov     edx, [ebp+var_20]
.text:00002D47                 mov     eax, [ebp+var_38]
.text:00002D4A                 mov     [edx+ecx*4], eax
.text:00002D4D                 jmp     short loc_2CD1
.text:00002D4F ; ---------------------------------------------------------------------------
.text:00002D4F
.text:00002D4F loc_2D4F:                               ; CODE XREF: _bigmuladd+80j
.text:00002D4F                 mov     ecx, [ebp+var_C]
.text:00002D52                 shl     ecx, 2
.text:00002D55                 mov     edx, [ebp+var_20]
.text:00002D58                 lea     eax, [edx+ecx*4]
.text:00002D5B                 push    eax
.text:00002D5C                 mov     ecx, [ebp+var_C]
.text:00002D5F                 push    ecx
.text:00002D60                 mov     edx, [ebp+var_C]
.text:00002D63                 shl     edx, 1
.text:00002D65                 mov     eax, [ebp+var_20]
.text:00002D68                 lea     ecx, [eax+edx*4]
.text:00002D6B                 push    ecx
.text:00002D6C                 mov     edx, [ebp+var_C]
.text:00002D6F                 mov     eax, [ebp+var_20]
.text:00002D72                 lea     ecx, [eax+edx*4]
.text:00002D75                 push    ecx
.text:00002D76                 mov     edx, [ebp+var_C]
.text:00002D79                 imul    edx, 0
.text:00002D7C                 mov     eax, [ebp+var_20]
.text:00002D7F                 lea     ecx, [eax+edx*4]
.text:00002D82                 push    ecx
.text:00002D83                 call    _internal_mul
.text:00002D88                 add     esp, 14h
.text:00002D8B                 mov     edx, [ebp+var_8]
.text:00002D8E                 mov     eax, [ebp+var_4]
.text:00002D91                 lea     ecx, [eax+edx+1]
.text:00002D95                 mov     [ebp+var_10], ecx
.text:00002D98                 cmp     [ebp+arg_8], 0
.text:00002D9C                 jz      short loc_2DB3
.text:00002D9E                 mov     edx, [ebp+arg_8]
.text:00002DA1                 mov     eax, [ebp+var_10]
.text:00002DA4                 cmp     eax, [edx]
.text:00002DA6                 jg      short loc_2DB3
.text:00002DA8                 mov     ecx, [ebp+arg_8]
.text:00002DAB                 mov     edx, [ecx]
.text:00002DAD                 add     edx, 1
.text:00002DB0                 mov     [ebp+var_10], edx
.text:00002DB3
.text:00002DB3 loc_2DB3:                               ; CODE XREF: _bigmuladd+13Cj
.text:00002DB3                                         ; _bigmuladd+146j
.text:00002DB3                 mov     eax, [ebp+var_10]
.text:00002DB6                 push    eax
.text:00002DB7                 call    _newbn
.text:00002DBC                 add     esp, 4
.text:00002DBF                 mov     [ebp+var_24], eax
.text:00002DC2                 mov     [ebp+var_18], 0
.text:00002DC9                 mov     [ebp+var_14], 1
.text:00002DD0                 jmp     short loc_2DDB
.text:00002DD2 ; ---------------------------------------------------------------------------
.text:00002DD2
.text:00002DD2 loc_2DD2:                               ; CODE XREF: _bigmuladd:loc_2E28j
.text:00002DD2                 mov     ecx, [ebp+var_14]
.text:00002DD5                 add     ecx, 1
.text:00002DD8                 mov     [ebp+var_14], ecx
.text:00002DDB
.text:00002DDB loc_2DDB:                               ; CODE XREF: _bigmuladd+170j
.text:00002DDB                 mov     edx, [ebp+var_24]
.text:00002DDE                 mov     eax, [ebp+var_14]
.text:00002DE1                 cmp     eax, [edx]
.text:00002DE3                 jg      short loc_2E2A
.text:00002DE5                 mov     ecx, [ebp+var_C]
.text:00002DE8                 shl     ecx, 1
.text:00002DEA                 cmp     [ebp+var_14], ecx
.text:00002DED                 jg      short loc_2E03
.text:00002DEF                 mov     edx, [ebp+var_C]
.text:00002DF2                 shl     edx, 2
.text:00002DF5                 sub     edx, [ebp+var_14]
.text:00002DF8                 mov     eax, [ebp+var_20]
.text:00002DFB                 mov     ecx, [eax+edx*4]
.text:00002DFE                 mov     [ebp+var_3C], ecx
.text:00002E01                 jmp     short loc_2E0A
.text:00002E03 ; ---------------------------------------------------------------------------
.text:00002E03
.text:00002E03 loc_2E03:                               ; CODE XREF: _bigmuladd+18Dj
.text:00002E03                 mov     [ebp+var_3C], 0
.text:00002E0A
.text:00002E0A loc_2E0A:                               ; CODE XREF: _bigmuladd+1A1j
.text:00002E0A                 mov     edx, [ebp+var_14]
.text:00002E0D                 mov     eax, [ebp+var_24]
.text:00002E10                 mov     ecx, [ebp+var_3C]
.text:00002E13                 mov     [eax+edx*4], ecx
.text:00002E16                 mov     edx, [ebp+var_14]
.text:00002E19                 mov     eax, [ebp+var_24]
.text:00002E1C                 cmp     dword ptr [eax+edx*4], 0
.text:00002E20                 jz      short loc_2E28
.text:00002E22                 mov     ecx, [ebp+var_14]
.text:00002E25                 mov     [ebp+var_18], ecx
.text:00002E28
.text:00002E28 loc_2E28:                               ; CODE XREF: _bigmuladd+1C0j
.text:00002E28                 jmp     short loc_2DD2
.text:00002E2A ; ---------------------------------------------------------------------------
.text:00002E2A
.text:00002E2A loc_2E2A:                               ; CODE XREF: _bigmuladd+183j
.text:00002E2A                 mov     edx, [ebp+var_24]
.text:00002E2D                 mov     eax, [ebp+var_18]
.text:00002E30                 mov     [edx], eax
.text:00002E32                 cmp     [ebp+arg_8], 0
.text:00002E36                 jz      loc_2F06
.text:00002E3C                 mov     [ebp+var_2C], 0
.text:00002E43                 mov     [ebp+var_28], 0
.text:00002E4A                 mov     [ebp+var_14], 1
.text:00002E51                 jmp     short loc_2E5C
.text:00002E53 ; ---------------------------------------------------------------------------
.text:00002E53
.text:00002E53 loc_2E53:                               ; CODE XREF: _bigmuladd:loc_2F01j
.text:00002E53                 mov     ecx, [ebp+var_14]
.text:00002E56                 add     ecx, 1
.text:00002E59                 mov     [ebp+var_14], ecx
.text:00002E5C
.text:00002E5C loc_2E5C:                               ; CODE XREF: _bigmuladd+1F1j
.text:00002E5C                 mov     edx, [ebp+var_14]
.text:00002E5F                 cmp     edx, [ebp+var_10]
.text:00002E62                 jg      loc_2F06
.text:00002E68                 mov     eax, [ebp+var_24]
.text:00002E6B                 mov     ecx, [ebp+var_14]
.text:00002E6E                 cmp     ecx, [eax]
.text:00002E70                 jg      short loc_2E80
.text:00002E72                 mov     edx, [ebp+var_14]
.text:00002E75                 mov     eax, [ebp+var_24]
.text:00002E78                 mov     ecx, [eax+edx*4]
.text:00002E7B                 mov     [ebp+var_40], ecx
.text:00002E7E                 jmp     short loc_2E87
.text:00002E80 ; ---------------------------------------------------------------------------
.text:00002E80
.text:00002E80 loc_2E80:                               ; CODE XREF: _bigmuladd+210j
.text:00002E80                 mov     [ebp+var_40], 0
.text:00002E87
.text:00002E87 loc_2E87:                               ; CODE XREF: _bigmuladd+21Ej
.text:00002E87                 mov     edx, [ebp+var_40]
.text:00002E8A                 xor     eax, eax
.text:00002E8C                 add     edx, [ebp+var_2C]
.text:00002E8F                 adc     eax, [ebp+var_28]
.text:00002E92                 mov     [ebp+var_2C], edx
.text:00002E95                 mov     [ebp+var_28], eax
.text:00002E98                 mov     ecx, [ebp+arg_8]
.text:00002E9B                 mov     edx, [ebp+var_14]
.text:00002E9E                 cmp     edx, [ecx]
.text:00002EA0                 jg      short loc_2EB0
.text:00002EA2                 mov     eax, [ebp+var_14]
.text:00002EA5                 mov     ecx, [ebp+arg_8]
.text:00002EA8                 mov     edx, [ecx+eax*4]
.text:00002EAB                 mov     [ebp+var_44], edx
.text:00002EAE                 jmp     short loc_2EB7
.text:00002EB0 ; ---------------------------------------------------------------------------
.text:00002EB0
.text:00002EB0 loc_2EB0:                               ; CODE XREF: _bigmuladd+240j
.text:00002EB0                 mov     [ebp+var_44], 0
.text:00002EB7
.text:00002EB7 loc_2EB7:                               ; CODE XREF: _bigmuladd+24Ej
.text:00002EB7                 mov     eax, [ebp+var_44]
.text:00002EBA                 xor     ecx, ecx
.text:00002EBC                 add     eax, [ebp+var_2C]
.text:00002EBF                 adc     ecx, [ebp+var_28]
.text:00002EC2                 mov     [ebp+var_2C], eax
.text:00002EC5                 mov     [ebp+var_28], ecx
.text:00002EC8                 mov     edx, [ebp+var_2C]
.text:00002ECB                 mov     eax, [ebp+var_14]
.text:00002ECE                 mov     ecx, [ebp+var_24]
.text:00002ED1                 mov     [ecx+eax*4], edx
.text:00002ED4                 mov     eax, [ebp+var_2C]
.text:00002ED7                 mov     edx, [ebp+var_28]
.text:00002EDA                 mov     cl, 20h ; ' '
.text:00002EDC                 call    __aullshr
.text:00002EE1                 mov     [ebp+var_2C], eax
.text:00002EE4                 mov     [ebp+var_28], edx
.text:00002EE7                 mov     edx, [ebp+var_14]
.text:00002EEA                 mov     eax, [ebp+var_24]
.text:00002EED                 cmp     dword ptr [eax+edx*4], 0
.text:00002EF1                 jz      short loc_2F01
.text:00002EF3                 mov     ecx, [ebp+var_14]
.text:00002EF6                 cmp     ecx, [ebp+var_18]
.text:00002EF9                 jle     short loc_2F01
.text:00002EFB                 mov     edx, [ebp+var_14]
.text:00002EFE                 mov     [ebp+var_18], edx
.text:00002F01
.text:00002F01 loc_2F01:                               ; CODE XREF: _bigmuladd+291j
.text:00002F01                                         ; _bigmuladd+299j
.text:00002F01                 jmp     loc_2E53
.text:00002F06 ; ---------------------------------------------------------------------------
.text:00002F06
.text:00002F06 loc_2F06:                               ; CODE XREF: _bigmuladd+1D6j
.text:00002F06                                         ; _bigmuladd+202j
.text:00002F06                 mov     eax, [ebp+var_24]
.text:00002F09                 mov     ecx, [ebp+var_18]
.text:00002F0C                 mov     [eax], ecx
.text:00002F0E                 mov     edx, [ebp+var_1C]
.text:00002F11                 shl     edx, 2
.text:00002F14                 push    edx
.text:00002F15                 mov     eax, [ebp+var_20]
.text:00002F18                 push    eax
.text:00002F19                 call    _smemclr
.text:00002F1E                 add     esp, 8
.text:00002F21                 mov     ecx, [ebp+var_20]
.text:00002F24                 push    ecx
.text:00002F25                 call    _safefree
.text:00002F2A                 add     esp, 4
.text:00002F2D                 mov     eax, [ebp+var_24]
.text:00002F30                 pop     edi
.text:00002F31                 add     esp, 44h
.text:00002F34                 cmp     ebp, esp
.text:00002F36                 call    __RTC_CheckEsp
.text:00002F3B                 mov     esp, ebp
.text:00002F3D                 pop     ebp
.text:00002F3E                 retn
.text:00002F3E _bigmuladd      endp
.text:00002F3E
.text:00002F3E ; ---------------------------------------------------------------------------
.text:00002F3F                 align 10h
.text:00002F40
.text:00002F40 ; =============== S U B R O U T I N E =======================================
.text:00002F40
.text:00002F40 ; Attributes: bp-based frame
.text:00002F40
.text:00002F40                 public _bigmul
.text:00002F40 _bigmul         proc near
.text:00002F40
.text:00002F40 arg_0           = dword ptr  8
.text:00002F40 arg_4           = dword ptr  0Ch
.text:00002F40
.text:00002F40                 push    ebp
.text:00002F41                 mov     ebp, esp
.text:00002F43                 push    0
.text:00002F45                 mov     eax, [ebp+arg_4]
.text:00002F48                 push    eax
.text:00002F49                 mov     ecx, [ebp+arg_0]
.text:00002F4C                 push    ecx
.text:00002F4D                 call    _bigmuladd
.text:00002F52                 add     esp, 0Ch
.text:00002F55                 cmp     ebp, esp
.text:00002F57                 call    __RTC_CheckEsp
.text:00002F5C                 pop     ebp
.text:00002F5D                 retn
.text:00002F5D _bigmul         endp
.text:00002F5D
.text:00002F5D ; ---------------------------------------------------------------------------
.text:00002F5E                 align 10h
.text:00002F60
.text:00002F60 ; =============== S U B R O U T I N E =======================================
.text:00002F60
.text:00002F60 ; Attributes: bp-based frame
.text:00002F60
.text:00002F60                 public _bigadd
.text:00002F60 _bigadd         proc near
.text:00002F60
.text:00002F60 var_2C          = dword ptr -2Ch
.text:00002F60 var_28          = dword ptr -28h
.text:00002F60 var_24          = dword ptr -24h
.text:00002F60 var_20          = dword ptr -20h
.text:00002F60 var_1C          = dword ptr -1Ch
.text:00002F60 var_18          = dword ptr -18h
.text:00002F60 var_14          = dword ptr -14h
.text:00002F60 var_10          = dword ptr -10h
.text:00002F60 var_C           = dword ptr -0Ch
.text:00002F60 var_8           = dword ptr -8
.text:00002F60 var_4           = dword ptr -4
.text:00002F60 arg_0           = dword ptr  8
.text:00002F60 arg_4           = dword ptr  0Ch
.text:00002F60
.text:00002F60                 push    ebp
.text:00002F61                 mov     ebp, esp
.text:00002F63                 sub     esp, 2Ch
.text:00002F66                 push    edi
.text:00002F67                 lea     edi, [ebp+var_2C]
.text:00002F6A                 mov     ecx, 0Bh
.text:00002F6F                 mov     eax, 0CCCCCCCCh
.text:00002F74                 rep stosd
.text:00002F76                 mov     eax, [ebp+arg_0]
.text:00002F79                 mov     ecx, [eax]
.text:00002F7B                 mov     [ebp+var_4], ecx
.text:00002F7E                 mov     edx, [ebp+arg_4]
.text:00002F81                 mov     eax, [edx]
.text:00002F83                 mov     [ebp+var_8], eax
.text:00002F86                 mov     ecx, [ebp+var_4]
.text:00002F89                 cmp     ecx, [ebp+var_8]
.text:00002F8C                 jle     short loc_2F96
.text:00002F8E                 mov     edx, [ebp+var_4]
.text:00002F91                 mov     [ebp+var_24], edx
.text:00002F94                 jmp     short loc_2F9C
.text:00002F96 ; ---------------------------------------------------------------------------
.text:00002F96
.text:00002F96 loc_2F96:                               ; CODE XREF: _bigadd+2Cj
.text:00002F96                 mov     eax, [ebp+var_8]
.text:00002F99                 mov     [ebp+var_24], eax
.text:00002F9C
.text:00002F9C loc_2F9C:                               ; CODE XREF: _bigadd+34j
.text:00002F9C                 mov     ecx, [ebp+var_24]
.text:00002F9F                 add     ecx, 1
.text:00002FA2                 mov     [ebp+var_C], ecx
.text:00002FA5                 mov     edx, [ebp+var_C]
.text:00002FA8                 push    edx
.text:00002FA9                 call    _newbn
.text:00002FAE                 add     esp, 4
.text:00002FB1                 mov     [ebp+var_18], eax
.text:00002FB4                 mov     [ebp+var_20], 0
.text:00002FBB                 mov     [ebp+var_1C], 0
.text:00002FC2                 mov     [ebp+var_14], 0
.text:00002FC9                 mov     [ebp+var_10], 1
.text:00002FD0                 jmp     short loc_2FDB
.text:00002FD2 ; ---------------------------------------------------------------------------
.text:00002FD2
.text:00002FD2 loc_2FD2:                               ; CODE XREF: _bigadd:loc_3080j
.text:00002FD2                 mov     eax, [ebp+var_10]
.text:00002FD5                 add     eax, 1
.text:00002FD8                 mov     [ebp+var_10], eax
.text:00002FDB
.text:00002FDB loc_2FDB:                               ; CODE XREF: _bigadd+70j
.text:00002FDB                 mov     ecx, [ebp+var_10]
.text:00002FDE                 cmp     ecx, [ebp+var_C]
.text:00002FE1                 jg      loc_3085
.text:00002FE7                 mov     edx, [ebp+arg_0]
.text:00002FEA                 mov     eax, [ebp+var_10]
.text:00002FED                 cmp     eax, [edx]
.text:00002FEF                 jg      short loc_2FFF
.text:00002FF1                 mov     ecx, [ebp+var_10]
.text:00002FF4                 mov     edx, [ebp+arg_0]
.text:00002FF7                 mov     eax, [edx+ecx*4]
.text:00002FFA                 mov     [ebp+var_28], eax
.text:00002FFD                 jmp     short loc_3006
.text:00002FFF ; ---------------------------------------------------------------------------
.text:00002FFF
.text:00002FFF loc_2FFF:                               ; CODE XREF: _bigadd+8Fj
.text:00002FFF                 mov     [ebp+var_28], 0
.text:00003006
.text:00003006 loc_3006:                               ; CODE XREF: _bigadd+9Dj
.text:00003006                 mov     ecx, [ebp+var_28]
.text:00003009                 xor     edx, edx
.text:0000300B                 add     ecx, [ebp+var_20]
.text:0000300E                 adc     edx, [ebp+var_1C]
.text:00003011                 mov     [ebp+var_20], ecx
.text:00003014                 mov     [ebp+var_1C], edx
.text:00003017                 mov     eax, [ebp+arg_4]
.text:0000301A                 mov     ecx, [ebp+var_10]
.text:0000301D                 cmp     ecx, [eax]
.text:0000301F                 jg      short loc_302F
.text:00003021                 mov     edx, [ebp+var_10]
.text:00003024                 mov     eax, [ebp+arg_4]
.text:00003027                 mov     ecx, [eax+edx*4]
.text:0000302A                 mov     [ebp+var_2C], ecx
.text:0000302D                 jmp     short loc_3036
.text:0000302F ; ---------------------------------------------------------------------------
.text:0000302F
.text:0000302F loc_302F:                               ; CODE XREF: _bigadd+BFj
.text:0000302F                 mov     [ebp+var_2C], 0
.text:00003036
.text:00003036 loc_3036:                               ; CODE XREF: _bigadd+CDj
.text:00003036                 mov     edx, [ebp+var_2C]
.text:00003039                 xor     eax, eax
.text:0000303B                 add     edx, [ebp+var_20]
.text:0000303E                 adc     eax, [ebp+var_1C]
.text:00003041                 mov     [ebp+var_20], edx
.text:00003044                 mov     [ebp+var_1C], eax
.text:00003047                 mov     ecx, [ebp+var_20]
.text:0000304A                 mov     edx, [ebp+var_10]
.text:0000304D                 mov     eax, [ebp+var_18]
.text:00003050                 mov     [eax+edx*4], ecx
.text:00003053                 mov     eax, [ebp+var_20]
.text:00003056                 mov     edx, [ebp+var_1C]
.text:00003059                 mov     cl, 20h ; ' '
.text:0000305B                 call    __aullshr
.text:00003060                 mov     [ebp+var_20], eax
.text:00003063                 mov     [ebp+var_1C], edx
.text:00003066                 mov     ecx, [ebp+var_10]
.text:00003069                 mov     edx, [ebp+var_18]
.text:0000306C                 cmp     dword ptr [edx+ecx*4], 0
.text:00003070                 jz      short loc_3080
.text:00003072                 mov     eax, [ebp+var_10]
.text:00003075                 cmp     eax, [ebp+var_14]
.text:00003078                 jle     short loc_3080
.text:0000307A                 mov     ecx, [ebp+var_10]
.text:0000307D                 mov     [ebp+var_14], ecx
.text:00003080
.text:00003080 loc_3080:                               ; CODE XREF: _bigadd+110j
.text:00003080                                         ; _bigadd+118j
.text:00003080                 jmp     loc_2FD2
.text:00003085 ; ---------------------------------------------------------------------------
.text:00003085
.text:00003085 loc_3085:                               ; CODE XREF: _bigadd+81j
.text:00003085                 mov     edx, [ebp+var_18]
.text:00003088                 mov     eax, [ebp+var_14]
.text:0000308B                 mov     [edx], eax
.text:0000308D                 mov     eax, [ebp+var_18]
.text:00003090                 pop     edi
.text:00003091                 add     esp, 2Ch
.text:00003094                 cmp     ebp, esp
.text:00003096                 call    __RTC_CheckEsp
.text:0000309B                 mov     esp, ebp
.text:0000309D                 pop     ebp
.text:0000309E                 retn
.text:0000309E _bigadd         endp
.text:0000309E
.text:0000309E ; ---------------------------------------------------------------------------
.text:0000309F                 align 10h
.text:000030A0
.text:000030A0 ; =============== S U B R O U T I N E =======================================
.text:000030A0
.text:000030A0 ; Attributes: bp-based frame
.text:000030A0
.text:000030A0                 public _bigsub
.text:000030A0 _bigsub         proc near
.text:000030A0
.text:000030A0 var_2C          = dword ptr -2Ch
.text:000030A0 var_28          = dword ptr -28h
.text:000030A0 var_24          = dword ptr -24h
.text:000030A0 var_20          = dword ptr -20h
.text:000030A0 var_1C          = dword ptr -1Ch
.text:000030A0 var_18          = dword ptr -18h
.text:000030A0 var_14          = dword ptr -14h
.text:000030A0 var_10          = dword ptr -10h
.text:000030A0 var_C           = dword ptr -0Ch
.text:000030A0 var_8           = dword ptr -8
.text:000030A0 var_4           = dword ptr -4
.text:000030A0 arg_0           = dword ptr  8
.text:000030A0 arg_4           = dword ptr  0Ch
.text:000030A0
.text:000030A0                 push    ebp
.text:000030A1                 mov     ebp, esp
.text:000030A3                 sub     esp, 2Ch
.text:000030A6                 push    edi
.text:000030A7                 lea     edi, [ebp+var_2C]
.text:000030AA                 mov     ecx, 0Bh
.text:000030AF                 mov     eax, 0CCCCCCCCh
.text:000030B4                 rep stosd
.text:000030B6                 mov     eax, [ebp+arg_0]
.text:000030B9                 mov     ecx, [eax]
.text:000030BB                 mov     [ebp+var_4], ecx
.text:000030BE                 mov     edx, [ebp+arg_4]
.text:000030C1                 mov     eax, [edx]
.text:000030C3                 mov     [ebp+var_8], eax
.text:000030C6                 mov     ecx, [ebp+var_4]
.text:000030C9                 cmp     ecx, [ebp+var_8]
.text:000030CC                 jle     short loc_30D6
.text:000030CE                 mov     edx, [ebp+var_4]
.text:000030D1                 mov     [ebp+var_24], edx
.text:000030D4                 jmp     short loc_30DC
.text:000030D6 ; ---------------------------------------------------------------------------
.text:000030D6
.text:000030D6 loc_30D6:                               ; CODE XREF: _bigsub+2Cj
.text:000030D6                 mov     eax, [ebp+var_8]
.text:000030D9                 mov     [ebp+var_24], eax
.text:000030DC
.text:000030DC loc_30DC:                               ; CODE XREF: _bigsub+34j
.text:000030DC                 mov     ecx, [ebp+var_24]
.text:000030DF                 mov     [ebp+var_C], ecx
.text:000030E2                 mov     edx, [ebp+var_C]
.text:000030E5                 push    edx
.text:000030E6                 call    _newbn
.text:000030EB                 add     esp, 4
.text:000030EE                 mov     [ebp+var_18], eax
.text:000030F1                 mov     [ebp+var_20], 1
.text:000030F8                 mov     [ebp+var_1C], 0
.text:000030FF                 mov     [ebp+var_14], 0
.text:00003106                 mov     [ebp+var_10], 1
.text:0000310D                 jmp     short loc_3118
.text:0000310F ; ---------------------------------------------------------------------------
.text:0000310F
.text:0000310F loc_310F:                               ; CODE XREF: _bigsub:loc_31C0j
.text:0000310F                 mov     eax, [ebp+var_10]
.text:00003112                 add     eax, 1
.text:00003115                 mov     [ebp+var_10], eax
.text:00003118
.text:00003118 loc_3118:                               ; CODE XREF: _bigsub+6Dj
.text:00003118                 mov     ecx, [ebp+var_10]
.text:0000311B                 cmp     ecx, [ebp+var_C]
.text:0000311E                 jg      loc_31C5
.text:00003124                 mov     edx, [ebp+arg_0]
.text:00003127                 mov     eax, [ebp+var_10]
.text:0000312A                 cmp     eax, [edx]
.text:0000312C                 jg      short loc_313C
.text:0000312E                 mov     ecx, [ebp+var_10]
.text:00003131                 mov     edx, [ebp+arg_0]
.text:00003134                 mov     eax, [edx+ecx*4]
.text:00003137                 mov     [ebp+var_28], eax
.text:0000313A                 jmp     short loc_3143
.text:0000313C ; ---------------------------------------------------------------------------
.text:0000313C
.text:0000313C loc_313C:                               ; CODE XREF: _bigsub+8Cj
.text:0000313C                 mov     [ebp+var_28], 0
.text:00003143
.text:00003143 loc_3143:                               ; CODE XREF: _bigsub+9Aj
.text:00003143                 mov     ecx, [ebp+var_28]
.text:00003146                 xor     edx, edx
.text:00003148                 add     ecx, [ebp+var_20]
.text:0000314B                 adc     edx, [ebp+var_1C]
.text:0000314E                 mov     [ebp+var_20], ecx
.text:00003151                 mov     [ebp+var_1C], edx
.text:00003154                 mov     eax, [ebp+arg_4]
.text:00003157                 mov     ecx, [ebp+var_10]
.text:0000315A                 cmp     ecx, [eax]
.text:0000315C                 jg      short loc_316F
.text:0000315E                 mov     edx, [ebp+var_10]
.text:00003161                 mov     eax, [ebp+arg_4]
.text:00003164                 mov     ecx, [eax+edx*4]
.text:00003167                 xor     ecx, 0FFFFFFFFh
.text:0000316A                 mov     [ebp+var_2C], ecx
.text:0000316D                 jmp     short loc_3176
.text:0000316F ; ---------------------------------------------------------------------------
.text:0000316F
.text:0000316F loc_316F:                               ; CODE XREF: _bigsub+BCj
.text:0000316F                 mov     [ebp+var_2C], 0FFFFFFFFh
.text:00003176
.text:00003176 loc_3176:                               ; CODE XREF: _bigsub+CDj
.text:00003176                 mov     edx, [ebp+var_2C]
.text:00003179                 xor     eax, eax
.text:0000317B                 add     edx, [ebp+var_20]
.text:0000317E                 adc     eax, [ebp+var_1C]
.text:00003181                 mov     [ebp+var_20], edx
.text:00003184                 mov     [ebp+var_1C], eax
.text:00003187                 mov     ecx, [ebp+var_20]
.text:0000318A                 mov     edx, [ebp+var_10]
.text:0000318D                 mov     eax, [ebp+var_18]
.text:00003190                 mov     [eax+edx*4], ecx
.text:00003193                 mov     eax, [ebp+var_20]
.text:00003196                 mov     edx, [ebp+var_1C]
.text:00003199                 mov     cl, 20h ; ' '
.text:0000319B                 call    __aullshr
.text:000031A0                 mov     [ebp+var_20], eax
.text:000031A3                 mov     [ebp+var_1C], edx
.text:000031A6                 mov     ecx, [ebp+var_10]
.text:000031A9                 mov     edx, [ebp+var_18]
.text:000031AC                 cmp     dword ptr [edx+ecx*4], 0
.text:000031B0                 jz      short loc_31C0
.text:000031B2                 mov     eax, [ebp+var_10]
.text:000031B5                 cmp     eax, [ebp+var_14]
.text:000031B8                 jle     short loc_31C0
.text:000031BA                 mov     ecx, [ebp+var_10]
.text:000031BD                 mov     [ebp+var_14], ecx
.text:000031C0
.text:000031C0 loc_31C0:                               ; CODE XREF: _bigsub+110j
.text:000031C0                                         ; _bigsub+118j
.text:000031C0                 jmp     loc_310F
.text:000031C5 ; ---------------------------------------------------------------------------
.text:000031C5
.text:000031C5 loc_31C5:                               ; CODE XREF: _bigsub+7Ej
.text:000031C5                 mov     edx, [ebp+var_18]
.text:000031C8                 mov     eax, [ebp+var_14]
.text:000031CB                 mov     [edx], eax
.text:000031CD                 mov     ecx, [ebp+var_20]
.text:000031D0                 or      ecx, [ebp+var_1C]
.text:000031D3                 jnz     short loc_31E5
.text:000031D5                 mov     edx, [ebp+var_18]
.text:000031D8                 push    edx
.text:000031D9                 call    _freebn
.text:000031DE                 add     esp, 4
.text:000031E1                 xor     eax, eax
.text:000031E3                 jmp     short loc_31E8
.text:000031E5 ; ---------------------------------------------------------------------------
.text:000031E5
.text:000031E5 loc_31E5:                               ; CODE XREF: _bigsub+133j
.text:000031E5                 mov     eax, [ebp+var_18]
.text:000031E8
.text:000031E8 loc_31E8:                               ; CODE XREF: _bigsub+143j
.text:000031E8                 pop     edi
.text:000031E9                 add     esp, 2Ch
.text:000031EC                 cmp     ebp, esp
.text:000031EE                 call    __RTC_CheckEsp
.text:000031F3                 mov     esp, ebp
.text:000031F5                 pop     ebp
.text:000031F6                 retn
.text:000031F6 _bigsub         endp
.text:000031F6
.text:000031F6 ; ---------------------------------------------------------------------------
.text:000031F7                 align 10h
.text:00003200
.text:00003200 ; =============== S U B R O U T I N E =======================================
.text:00003200
.text:00003200 ; Attributes: bp-based frame
.text:00003200
.text:00003200 ; int __cdecl bignum_bitmask(void *)
.text:00003200                 public _bignum_bitmask
.text:00003200 _bignum_bitmask proc near
.text:00003200
.text:00003200 var_C           = dword ptr -0Ch
.text:00003200 var_8           = dword ptr -8
.text:00003200 var_4           = dword ptr -4
.text:00003200 arg_0           = dword ptr  8
.text:00003200
.text:00003200                 push    ebp
.text:00003201                 mov     ebp, esp
.text:00003203                 sub     esp, 0Ch
.text:00003206                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000320D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000321B                 mov     eax, [ebp+arg_0]
.text:0000321E                 push    eax             ; void *
.text:0000321F                 call    _copybn
.text:00003224                 add     esp, 4
.text:00003227                 mov     [ebp+var_4], eax
.text:0000322A                 mov     ecx, [ebp+var_4]
.text:0000322D                 mov     edx, [ecx]
.text:0000322F                 mov     [ebp+var_8], edx
.text:00003232
.text:00003232 loc_3232:                               ; CODE XREF: _bignum_bitmask+4Dj
.text:00003232                 mov     eax, [ebp+var_8]
.text:00003235                 mov     ecx, [ebp+arg_0]
.text:00003238                 cmp     dword ptr [ecx+eax*4], 0
.text:0000323C                 jnz     short loc_324F
.text:0000323E                 cmp     [ebp+var_8], 0
.text:00003242                 jle     short loc_324F
.text:00003244                 mov     edx, [ebp+var_8]
.text:00003247                 sub     edx, 1
.text:0000324A                 mov     [ebp+var_8], edx
.text:0000324D                 jmp     short loc_3232
.text:0000324F ; ---------------------------------------------------------------------------
.text:0000324F
.text:0000324F loc_324F:                               ; CODE XREF: _bignum_bitmask+3Cj
.text:0000324F                                         ; _bignum_bitmask+42j
.text:0000324F                 cmp     [ebp+var_8], 0
.text:00003253                 jg      short loc_325A
.text:00003255                 mov     eax, [ebp+var_4]
.text:00003258                 jmp     short loc_32A8
.text:0000325A ; ---------------------------------------------------------------------------
.text:0000325A
.text:0000325A loc_325A:                               ; CODE XREF: _bignum_bitmask+53j
.text:0000325A                 mov     [ebp+var_C], 1
.text:00003261
.text:00003261 loc_3261:                               ; CODE XREF: _bignum_bitmask+79j
.text:00003261                 mov     eax, [ebp+var_8]
.text:00003264                 mov     ecx, [ebp+arg_0]
.text:00003267                 mov     edx, [ebp+var_C]
.text:0000326A                 cmp     edx, [ecx+eax*4]
.text:0000326D                 jnb     short loc_327B
.text:0000326F                 mov     eax, [ebp+var_C]
.text:00003272                 lea     ecx, [eax+eax+1]
.text:00003276                 mov     [ebp+var_C], ecx
.text:00003279                 jmp     short loc_3261
.text:0000327B ; ---------------------------------------------------------------------------
.text:0000327B
.text:0000327B loc_327B:                               ; CODE XREF: _bignum_bitmask+6Dj
.text:0000327B                 mov     edx, [ebp+var_8]
.text:0000327E                 mov     eax, [ebp+var_4]
.text:00003281                 mov     ecx, [ebp+var_C]
.text:00003284                 mov     [eax+edx*4], ecx
.text:00003287
.text:00003287 loc_3287:                               ; CODE XREF: _bignum_bitmask+A3j
.text:00003287                 mov     edx, [ebp+var_8]
.text:0000328A                 sub     edx, 1
.text:0000328D                 mov     [ebp+var_8], edx
.text:00003290                 cmp     [ebp+var_8], 0
.text:00003294                 jle     short loc_32A5
.text:00003296                 mov     eax, [ebp+var_8]
.text:00003299                 mov     ecx, [ebp+var_4]
.text:0000329C                 mov     dword ptr [ecx+eax*4], 0FFFFFFFFh
.text:000032A3                 jmp     short loc_3287
.text:000032A5 ; ---------------------------------------------------------------------------
.text:000032A5
.text:000032A5 loc_32A5:                               ; CODE XREF: _bignum_bitmask+94j
.text:000032A5                 mov     eax, [ebp+var_4]
.text:000032A8
.text:000032A8 loc_32A8:                               ; CODE XREF: _bignum_bitmask+58j
.text:000032A8                 add     esp, 0Ch
.text:000032AB                 cmp     ebp, esp
.text:000032AD                 call    __RTC_CheckEsp
.text:000032B2                 mov     esp, ebp
.text:000032B4                 pop     ebp
.text:000032B5                 retn
.text:000032B5 _bignum_bitmask endp
.text:000032B5
.text:000032B5 ; ---------------------------------------------------------------------------
.text:000032B6                 align 10h
.text:000032C0
.text:000032C0 ; =============== S U B R O U T I N E =======================================
.text:000032C0
.text:000032C0 ; Attributes: bp-based frame
.text:000032C0
.text:000032C0                 public _bignum_from_long
.text:000032C0 _bignum_from_long proc near
.text:000032C0
.text:000032C0 var_C           = dword ptr -0Ch
.text:000032C0 var_8           = dword ptr -8
.text:000032C0 var_4           = dword ptr -4
.text:000032C0 arg_0           = dword ptr  8
.text:000032C0
.text:000032C0                 push    ebp
.text:000032C1                 mov     ebp, esp
.text:000032C3                 sub     esp, 0Ch
.text:000032C6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000032CD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000032D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032DB                 mov     eax, [ebp+arg_0]
.text:000032DE                 xor     ecx, ecx
.text:000032E0                 mov     [ebp+var_C], eax
.text:000032E3                 mov     [ebp+var_8], ecx
.text:000032E6                 push    3
.text:000032E8                 call    _newbn
.text:000032ED                 add     esp, 4
.text:000032F0                 mov     [ebp+var_4], eax
.text:000032F3                 mov     edx, [ebp+var_C]
.text:000032F6                 mov     eax, [ebp+var_8]
.text:000032F9                 and     eax, 0
.text:000032FC                 mov     ecx, [ebp+var_4]
.text:000032FF                 mov     [ecx+4], edx
.text:00003302                 mov     eax, [ebp+var_C]
.text:00003305                 mov     edx, [ebp+var_8]
.text:00003308                 mov     cl, 20h ; ' '
.text:0000330A                 call    __aullshr
.text:0000330F                 and     edx, 0
.text:00003312                 mov     edx, [ebp+var_4]
.text:00003315                 mov     [edx+8], eax
.text:00003318                 mov     eax, [ebp+var_4]
.text:0000331B                 mov     dword ptr [eax+0Ch], 0
.text:00003322                 mov     ecx, [ebp+var_4]
.text:00003325                 xor     edx, edx
.text:00003327                 cmp     dword ptr [ecx+8], 0
.text:0000332B                 setnz   dl
.text:0000332E                 add     edx, 1
.text:00003331                 mov     eax, [ebp+var_4]
.text:00003334                 mov     [eax], edx
.text:00003336                 mov     eax, [ebp+var_4]
.text:00003339                 add     esp, 0Ch
.text:0000333C                 cmp     ebp, esp
.text:0000333E                 call    __RTC_CheckEsp
.text:00003343                 mov     esp, ebp
.text:00003345                 pop     ebp
.text:00003346                 retn
.text:00003346 _bignum_from_long endp
.text:00003346
.text:00003346 ; ---------------------------------------------------------------------------
.text:00003347                 align 10h
.text:00003350
.text:00003350 ; =============== S U B R O U T I N E =======================================
.text:00003350
.text:00003350 ; Attributes: bp-based frame
.text:00003350
.text:00003350                 public _bignum_add_long
.text:00003350 _bignum_add_long proc near
.text:00003350
.text:00003350 var_20          = dword ptr -20h
.text:00003350 var_1C          = dword ptr -1Ch
.text:00003350 var_18          = dword ptr -18h
.text:00003350 var_14          = dword ptr -14h
.text:00003350 var_10          = dword ptr -10h
.text:00003350 var_C           = dword ptr -0Ch
.text:00003350 var_8           = dword ptr -8
.text:00003350 var_4           = dword ptr -4
.text:00003350 arg_0           = dword ptr  8
.text:00003350 arg_4           = dword ptr  0Ch
.text:00003350
.text:00003350                 push    ebp
.text:00003351                 mov     ebp, esp
.text:00003353                 sub     esp, 20h
.text:00003356                 mov     eax, 0CCCCCCCCh
.text:0000335B                 mov     [ebp+var_20], eax
.text:0000335E                 mov     [ebp+var_1C], eax
.text:00003361                 mov     [ebp+var_18], eax
.text:00003364                 mov     [ebp+var_14], eax
.text:00003367                 mov     [ebp+var_10], eax
.text:0000336A                 mov     [ebp+var_C], eax
.text:0000336D                 mov     [ebp+var_8], eax
.text:00003370                 mov     [ebp+var_4], eax
.text:00003373                 mov     eax, [ebp+arg_0]
.text:00003376                 mov     ecx, [eax]
.text:00003378                 add     ecx, 1
.text:0000337B                 push    ecx
.text:0000337C                 call    _newbn
.text:00003381                 add     esp, 4
.text:00003384                 mov     [ebp+var_4], eax
.text:00003387                 mov     [ebp+var_C], 0
.text:0000338E                 mov     [ebp+var_14], 0
.text:00003395                 mov     [ebp+var_10], 0
.text:0000339C                 mov     edx, [ebp+arg_4]
.text:0000339F                 xor     eax, eax
.text:000033A1                 mov     [ebp+var_1C], edx
.text:000033A4                 mov     [ebp+var_18], eax
.text:000033A7                 mov     [ebp+var_8], 1
.text:000033AE                 jmp     short loc_33B9
.text:000033B0 ; ---------------------------------------------------------------------------
.text:000033B0
.text:000033B0 loc_33B0:                               ; CODE XREF: _bignum_add_long:loc_3450j
.text:000033B0                 mov     ecx, [ebp+var_8]
.text:000033B3                 add     ecx, 1
.text:000033B6                 mov     [ebp+var_8], ecx
.text:000033B9
.text:000033B9 loc_33B9:                               ; CODE XREF: _bignum_add_long+5Ej
.text:000033B9                 mov     edx, [ebp+var_4]
.text:000033BC                 mov     eax, [ebp+var_8]
.text:000033BF                 cmp     eax, [edx]
.text:000033C1                 jg      loc_3455
.text:000033C7                 mov     ecx, [ebp+var_1C]
.text:000033CA                 mov     edx, [ebp+var_18]
.text:000033CD                 and     edx, 0
.text:000033D0                 add     ecx, [ebp+var_14]
.text:000033D3                 adc     edx, [ebp+var_10]
.text:000033D6                 mov     [ebp+var_14], ecx
.text:000033D9                 mov     [ebp+var_10], edx
.text:000033DC                 mov     eax, [ebp+arg_0]
.text:000033DF                 mov     ecx, [ebp+var_8]
.text:000033E2                 cmp     ecx, [eax]
.text:000033E4                 jg      short loc_33F4
.text:000033E6                 mov     edx, [ebp+var_8]
.text:000033E9                 mov     eax, [ebp+arg_0]
.text:000033EC                 mov     ecx, [eax+edx*4]
.text:000033EF                 mov     [ebp+var_20], ecx
.text:000033F2                 jmp     short loc_33FB
.text:000033F4 ; ---------------------------------------------------------------------------
.text:000033F4
.text:000033F4 loc_33F4:                               ; CODE XREF: _bignum_add_long+94j
.text:000033F4                 mov     [ebp+var_20], 0
.text:000033FB
.text:000033FB loc_33FB:                               ; CODE XREF: _bignum_add_long+A2j
.text:000033FB                 mov     edx, [ebp+var_20]
.text:000033FE                 xor     eax, eax
.text:00003400                 add     edx, [ebp+var_14]
.text:00003403                 adc     eax, [ebp+var_10]
.text:00003406                 mov     [ebp+var_14], edx
.text:00003409                 mov     [ebp+var_10], eax
.text:0000340C                 mov     eax, [ebp+var_1C]
.text:0000340F                 mov     edx, [ebp+var_18]
.text:00003412                 mov     cl, 20h ; ' '
.text:00003414                 call    __aullshr
.text:00003419                 mov     [ebp+var_1C], eax
.text:0000341C                 mov     [ebp+var_18], edx
.text:0000341F                 mov     ecx, [ebp+var_14]
.text:00003422                 mov     edx, [ebp+var_8]
.text:00003425                 mov     eax, [ebp+var_4]
.text:00003428                 mov     [eax+edx*4], ecx
.text:0000342B                 mov     eax, [ebp+var_14]
.text:0000342E                 mov     edx, [ebp+var_10]
.text:00003431                 mov     cl, 20h ; ' '
.text:00003433                 call    __aullshr
.text:00003438                 mov     [ebp+var_14], eax
.text:0000343B                 mov     [ebp+var_10], edx
.text:0000343E                 mov     ecx, [ebp+var_8]
.text:00003441                 mov     edx, [ebp+var_4]
.text:00003444                 cmp     dword ptr [edx+ecx*4], 0
.text:00003448                 jz      short loc_3450
.text:0000344A                 mov     eax, [ebp+var_8]
.text:0000344D                 mov     [ebp+var_C], eax
.text:00003450
.text:00003450 loc_3450:                               ; CODE XREF: _bignum_add_long+F8j
.text:00003450                 jmp     loc_33B0
.text:00003455 ; ---------------------------------------------------------------------------
.text:00003455
.text:00003455 loc_3455:                               ; CODE XREF: _bignum_add_long+71j
.text:00003455                 mov     ecx, [ebp+var_4]
.text:00003458                 mov     edx, [ebp+var_C]
.text:0000345B                 mov     [ecx], edx
.text:0000345D                 mov     eax, [ebp+var_4]
.text:00003460                 add     esp, 20h
.text:00003463                 cmp     ebp, esp
.text:00003465                 call    __RTC_CheckEsp
.text:0000346A                 mov     esp, ebp
.text:0000346C                 pop     ebp
.text:0000346D                 retn
.text:0000346D _bignum_add_long endp
.text:0000346D
.text:0000346D ; ---------------------------------------------------------------------------
.text:0000346E                 align 10h
.text:00003470
.text:00003470 ; =============== S U B R O U T I N E =======================================
.text:00003470
.text:00003470 ; Attributes: bp-based frame
.text:00003470
.text:00003470                 public _bignum_mod_short
.text:00003470 _bignum_mod_short proc near
.text:00003470
.text:00003470 var_14          = dword ptr -14h
.text:00003470 var_10          = dword ptr -10h
.text:00003470 var_C           = dword ptr -0Ch
.text:00003470 var_8           = dword ptr -8
.text:00003470 var_4           = dword ptr -4
.text:00003470 arg_0           = dword ptr  8
.text:00003470 arg_4           = word ptr  0Ch
.text:00003470
.text:00003470                 push    ebp
.text:00003471                 mov     ebp, esp
.text:00003473                 sub     esp, 14h
.text:00003476                 push    esi
.text:00003477                 push    edi
.text:00003478                 mov     eax, 0CCCCCCCCh
.text:0000347D                 mov     [ebp+var_14], eax
.text:00003480                 mov     [ebp+var_10], eax
.text:00003483                 mov     [ebp+var_C], eax
.text:00003486                 mov     [ebp+var_8], eax
.text:00003489                 mov     [ebp+var_4], eax
.text:0000348C                 mov     [ebp+var_10], 0
.text:00003493                 mov     [ebp+var_C], 0
.text:0000349A                 movzx   eax, [ebp+arg_4]
.text:0000349E                 cdq
.text:0000349F                 mov     [ebp+var_8], eax
.text:000034A2                 mov     [ebp+var_4], edx
.text:000034A5                 mov     eax, [ebp+arg_0]
.text:000034A8                 mov     ecx, [eax]
.text:000034AA                 mov     [ebp+var_14], ecx
.text:000034AD                 jmp     short loc_34B8
.text:000034AF ; ---------------------------------------------------------------------------
.text:000034AF
.text:000034AF loc_34AF:                               ; CODE XREF: _bignum_mod_short+B3j
.text:000034AF                 mov     edx, [ebp+var_14]
.text:000034B2                 sub     edx, 1
.text:000034B5                 mov     [ebp+var_14], edx
.text:000034B8
.text:000034B8 loc_34B8:                               ; CODE XREF: _bignum_mod_short+3Dj
.text:000034B8                 cmp     [ebp+var_14], 0
.text:000034BC                 jle     short loc_3525
.text:000034BE                 mov     eax, [ebp+var_4]
.text:000034C1                 push    eax
.text:000034C2                 mov     ecx, [ebp+var_8]
.text:000034C5                 push    ecx
.text:000034C6                 push    0
.text:000034C8                 push    80000000h
.text:000034CD                 call    __aullrem
.text:000034D2                 push    edx
.text:000034D3                 push    eax
.text:000034D4                 mov     edx, [ebp+var_C]
.text:000034D7                 push    edx
.text:000034D8                 mov     eax, [ebp+var_10]
.text:000034DB                 push    eax
.text:000034DC                 call    __allmul
.text:000034E1                 push    0
.text:000034E3                 push    2
.text:000034E5                 push    edx
.text:000034E6                 push    eax
.text:000034E7                 call    __allmul
.text:000034EC                 mov     esi, eax
.text:000034EE                 mov     edi, edx
.text:000034F0                 mov     ecx, [ebp+var_14]
.text:000034F3                 mov     edx, [ebp+arg_0]
.text:000034F6                 mov     eax, [edx+ecx*4]
.text:000034F9                 xor     ecx, ecx
.text:000034FB                 mov     edx, [ebp+var_4]
.text:000034FE                 push    edx
.text:000034FF                 mov     edx, [ebp+var_8]
.text:00003502                 push    edx
.text:00003503                 push    ecx
.text:00003504                 push    eax
.text:00003505                 call    __aullrem
.text:0000350A                 add     esi, eax
.text:0000350C                 adc     edi, edx
.text:0000350E                 mov     eax, [ebp+var_4]
.text:00003511                 push    eax
.text:00003512                 mov     ecx, [ebp+var_8]
.text:00003515                 push    ecx
.text:00003516                 push    edi
.text:00003517                 push    esi
.text:00003518                 call    __aullrem
.text:0000351D                 mov     [ebp+var_10], eax
.text:00003520                 mov     [ebp+var_C], edx
.text:00003523                 jmp     short loc_34AF
.text:00003525 ; ---------------------------------------------------------------------------
.text:00003525
.text:00003525 loc_3525:                               ; CODE XREF: _bignum_mod_short+4Cj
.text:00003525                 mov     ax, word ptr [ebp+var_10]
.text:00003529                 pop     edi
.text:0000352A                 pop     esi
.text:0000352B                 add     esp, 14h
.text:0000352E                 cmp     ebp, esp
.text:00003530                 call    __RTC_CheckEsp
.text:00003535                 mov     esp, ebp
.text:00003537                 pop     ebp
.text:00003538                 retn
.text:00003538 _bignum_mod_short endp
.text:00003538
.text:00003538 ; ---------------------------------------------------------------------------
.text:00003539                 align 10h
.text:00003540
.text:00003540 ; =============== S U B R O U T I N E =======================================
.text:00003540
.text:00003540 ; Attributes: bp-based frame
.text:00003540
.text:00003540                 public _bigdiv
.text:00003540 _bigdiv         proc near
.text:00003540
.text:00003540 var_4           = dword ptr -4
.text:00003540 arg_0           = dword ptr  8
.text:00003540 arg_4           = dword ptr  0Ch
.text:00003540
.text:00003540                 push    ebp
.text:00003541                 mov     ebp, esp
.text:00003543                 push    ecx
.text:00003544                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000354B                 mov     eax, [ebp+arg_0]
.text:0000354E                 mov     ecx, [eax]
.text:00003550                 push    ecx
.text:00003551                 call    _newbn
.text:00003556                 add     esp, 4
.text:00003559                 mov     [ebp+var_4], eax
.text:0000355C                 mov     edx, [ebp+var_4]
.text:0000355F                 push    edx
.text:00003560                 push    0
.text:00003562                 mov     eax, [ebp+arg_4]
.text:00003565                 push    eax
.text:00003566                 mov     ecx, [ebp+arg_0]
.text:00003569                 push    ecx
.text:0000356A                 call    _bigdivmod
.text:0000356F                 add     esp, 10h
.text:00003572
.text:00003572 loc_3572:                               ; CODE XREF: _bigdiv+55j
.text:00003572                 mov     edx, [ebp+var_4]
.text:00003575                 cmp     dword ptr [edx], 1
.text:00003578                 jbe     short loc_3597
.text:0000357A                 mov     eax, [ebp+var_4]
.text:0000357D                 mov     ecx, [eax]
.text:0000357F                 mov     edx, [ebp+var_4]
.text:00003582                 cmp     dword ptr [edx+ecx*4], 0
.text:00003586                 jnz     short loc_3597
.text:00003588                 mov     eax, [ebp+var_4]
.text:0000358B                 mov     ecx, [eax]
.text:0000358D                 sub     ecx, 1
.text:00003590                 mov     edx, [ebp+var_4]
.text:00003593                 mov     [edx], ecx
.text:00003595                 jmp     short loc_3572
.text:00003597 ; ---------------------------------------------------------------------------
.text:00003597
.text:00003597 loc_3597:                               ; CODE XREF: _bigdiv+38j
.text:00003597                                         ; _bigdiv+46j
.text:00003597                 mov     eax, [ebp+var_4]
.text:0000359A                 add     esp, 4
.text:0000359D                 cmp     ebp, esp
.text:0000359F                 call    __RTC_CheckEsp
.text:000035A4                 mov     esp, ebp
.text:000035A6                 pop     ebp
.text:000035A7                 retn
.text:000035A7 _bigdiv         endp
.text:000035A7
.text:000035A7 ; ---------------------------------------------------------------------------
.text:000035A8                 align 10h
.text:000035B0
.text:000035B0 ; =============== S U B R O U T I N E =======================================
.text:000035B0
.text:000035B0 ; Attributes: bp-based frame
.text:000035B0
.text:000035B0 _bigdivmod      proc near               ; CODE XREF: _bigdiv+2Ap
.text:000035B0                                         ; _bigmod+2Ap ...
.text:000035B0
.text:000035B0 var_24          = dword ptr -24h
.text:000035B0 var_20          = dword ptr -20h
.text:000035B0 var_1C          = dword ptr -1Ch
.text:000035B0 var_18          = dword ptr -18h
.text:000035B0 var_14          = dword ptr -14h
.text:000035B0 var_10          = dword ptr -10h
.text:000035B0 var_C           = dword ptr -0Ch
.text:000035B0 var_8           = dword ptr -8
.text:000035B0 var_4           = dword ptr -4
.text:000035B0 arg_0           = dword ptr  8
.text:000035B0 arg_4           = dword ptr  0Ch
.text:000035B0 arg_8           = dword ptr  10h
.text:000035B0 arg_C           = dword ptr  14h
.text:000035B0
.text:000035B0                 push    ebp
.text:000035B1                 mov     ebp, esp
.text:000035B3                 sub     esp, 24h
.text:000035B6                 push    esi
.text:000035B7                 mov     eax, 0CCCCCCCCh
.text:000035BC                 mov     [ebp+var_24], eax
.text:000035BF                 mov     [ebp+var_20], eax
.text:000035C2                 mov     [ebp+var_1C], eax
.text:000035C5                 mov     [ebp+var_18], eax
.text:000035C8                 mov     [ebp+var_14], eax
.text:000035CB                 mov     [ebp+var_10], eax
.text:000035CE                 mov     [ebp+var_C], eax
.text:000035D1                 mov     [ebp+var_8], eax
.text:000035D4                 mov     [ebp+var_4], eax
.text:000035D7                 mov     eax, [ebp+arg_4]
.text:000035DA                 mov     ecx, [eax]
.text:000035DC                 mov     edx, [ebp+arg_4]
.text:000035DF                 cmp     dword ptr [edx+ecx*4], 0
.text:000035E3                 jnz     short loc_35FC
.text:000035E5                 push    458h
.text:000035EA                 push    offset $SG7688  ; "..\\..\\..\\sshbn.c"
.text:000035EF                 push    offset $SG7689  ; "mod[mod[0]] != 0"
.text:000035F4                 call    __wassert
.text:000035F9 ; ---------------------------------------------------------------------------
.text:000035F9                 add     esp, 0Ch
.text:000035FC
.text:000035FC loc_35FC:                               ; CODE XREF: _bigdivmod+33j
.text:000035FC                 mov     ecx, [ebp+arg_4]
.text:000035FF                 mov     edx, [ecx]
.text:00003601                 mov     [ebp+var_14], edx
.text:00003604                 push    4
.text:00003606                 mov     eax, [ebp+var_14]
.text:00003609                 push    eax
.text:0000360A                 call    _safemalloc
.text:0000360F                 add     esp, 8
.text:00003612                 mov     [ebp+var_8], eax
.text:00003615                 mov     [ebp+var_1C], 0
.text:0000361C                 jmp     short loc_3627
.text:0000361E ; ---------------------------------------------------------------------------
.text:0000361E
.text:0000361E loc_361E:                               ; CODE XREF: _bigdivmod+96j
.text:0000361E                 mov     ecx, [ebp+var_1C]
.text:00003621                 add     ecx, 1
.text:00003624                 mov     [ebp+var_1C], ecx
.text:00003627
.text:00003627 loc_3627:                               ; CODE XREF: _bigdivmod+6Cj
.text:00003627                 mov     edx, [ebp+var_1C]
.text:0000362A                 cmp     edx, [ebp+var_14]
.text:0000362D                 jge     short loc_3648
.text:0000362F                 mov     eax, [ebp+arg_4]
.text:00003632                 mov     ecx, [eax]
.text:00003634                 sub     ecx, [ebp+var_1C]
.text:00003637                 mov     edx, [ebp+var_1C]
.text:0000363A                 mov     eax, [ebp+var_8]
.text:0000363D                 mov     esi, [ebp+arg_4]
.text:00003640                 mov     ecx, [esi+ecx*4]
.text:00003643                 mov     [eax+edx*4], ecx
.text:00003646                 jmp     short loc_361E
.text:00003648 ; ---------------------------------------------------------------------------
.text:00003648
.text:00003648 loc_3648:                               ; CODE XREF: _bigdivmod+7Dj
.text:00003648                 mov     [ebp+var_C], 0
.text:0000364F                 jmp     short loc_365A
.text:00003651 ; ---------------------------------------------------------------------------
.text:00003651
.text:00003651 loc_3651:                               ; CODE XREF: _bigdivmod:loc_3674j
.text:00003651                 mov     edx, [ebp+var_C]
.text:00003654                 add     edx, 1
.text:00003657                 mov     [ebp+var_C], edx
.text:0000365A
.text:0000365A loc_365A:                               ; CODE XREF: _bigdivmod+9Fj
.text:0000365A                 cmp     [ebp+var_C], 1Fh
.text:0000365E                 jge     short loc_3676
.text:00003660                 mov     eax, [ebp+var_8]
.text:00003663                 mov     edx, [eax]
.text:00003665                 mov     ecx, [ebp+var_C]
.text:00003668                 shl     edx, cl
.text:0000366A                 and     edx, 80000000h
.text:00003670                 jz      short loc_3674
.text:00003672                 jmp     short loc_3676
.text:00003674 ; ---------------------------------------------------------------------------
.text:00003674
.text:00003674 loc_3674:                               ; CODE XREF: _bigdivmod+C0j
.text:00003674                 jmp     short loc_3651
.text:00003676 ; ---------------------------------------------------------------------------
.text:00003676
.text:00003676 loc_3676:                               ; CODE XREF: _bigdivmod+AEj
.text:00003676                                         ; _bigdivmod+C2j
.text:00003676                 cmp     [ebp+var_C], 0
.text:0000367A                 jz      short loc_36E1
.text:0000367C                 mov     [ebp+var_18], 0
.text:00003683                 jmp     short loc_368E
.text:00003685 ; ---------------------------------------------------------------------------
.text:00003685
.text:00003685 loc_3685:                               ; CODE XREF: _bigdivmod+116j
.text:00003685                 mov     eax, [ebp+var_18]
.text:00003688                 add     eax, 1
.text:0000368B                 mov     [ebp+var_18], eax
.text:0000368E
.text:0000368E loc_368E:                               ; CODE XREF: _bigdivmod+D3j
.text:0000368E                 mov     ecx, [ebp+var_14]
.text:00003691                 sub     ecx, 1
.text:00003694                 cmp     [ebp+var_18], ecx
.text:00003697                 jge     short loc_36C8
.text:00003699                 mov     edx, [ebp+var_18]
.text:0000369C                 mov     eax, [ebp+var_8]
.text:0000369F                 mov     edx, [eax+edx*4]
.text:000036A2                 mov     ecx, [ebp+var_C]
.text:000036A5                 shl     edx, cl
.text:000036A7                 mov     ecx, 20h ; ' '
.text:000036AC                 sub     ecx, [ebp+var_C]
.text:000036AF                 mov     eax, [ebp+var_18]
.text:000036B2                 mov     esi, [ebp+var_8]
.text:000036B5                 mov     eax, [esi+eax*4+4]
.text:000036B9                 shr     eax, cl
.text:000036BB                 or      edx, eax
.text:000036BD                 mov     ecx, [ebp+var_18]
.text:000036C0                 mov     eax, [ebp+var_8]
.text:000036C3                 mov     [eax+ecx*4], edx
.text:000036C6                 jmp     short loc_3685
.text:000036C8 ; ---------------------------------------------------------------------------
.text:000036C8
.text:000036C8 loc_36C8:                               ; CODE XREF: _bigdivmod+E7j
.text:000036C8                 mov     ecx, [ebp+var_14]
.text:000036CB                 mov     edx, [ebp+var_8]
.text:000036CE                 mov     eax, [edx+ecx*4-4]
.text:000036D2                 mov     ecx, [ebp+var_C]
.text:000036D5                 shl     eax, cl
.text:000036D7                 mov     ecx, [ebp+var_14]
.text:000036DA                 mov     edx, [ebp+var_8]
.text:000036DD                 mov     [edx+ecx*4-4], eax
.text:000036E1
.text:000036E1 loc_36E1:                               ; CODE XREF: _bigdivmod+CAj
.text:000036E1                 mov     eax, [ebp+arg_0]
.text:000036E4                 mov     ecx, [eax]
.text:000036E6                 mov     [ebp+var_10], ecx
.text:000036E9                 mov     edx, [ebp+var_10]
.text:000036EC                 cmp     edx, [ebp+var_14]
.text:000036EF                 jg      short loc_36FA
.text:000036F1                 mov     eax, [ebp+var_14]
.text:000036F4                 add     eax, 1
.text:000036F7                 mov     [ebp+var_10], eax
.text:000036FA
.text:000036FA loc_36FA:                               ; CODE XREF: _bigdivmod+13Fj
.text:000036FA                 push    4
.text:000036FC                 mov     ecx, [ebp+var_10]
.text:000036FF                 push    ecx
.text:00003700                 call    _safemalloc
.text:00003705                 add     esp, 8
.text:00003708                 mov     [ebp+var_4], eax
.text:0000370B                 mov     [ebp+var_1C], 0
.text:00003712                 jmp     short loc_371D
.text:00003714 ; ---------------------------------------------------------------------------
.text:00003714
.text:00003714 loc_3714:                               ; CODE XREF: _bigdivmod+182j
.text:00003714                 mov     edx, [ebp+var_1C]
.text:00003717                 add     edx, 1
.text:0000371A                 mov     [ebp+var_1C], edx
.text:0000371D
.text:0000371D loc_371D:                               ; CODE XREF: _bigdivmod+162j
.text:0000371D                 mov     eax, [ebp+var_1C]
.text:00003720                 cmp     eax, [ebp+var_10]
.text:00003723                 jge     short loc_3734
.text:00003725                 mov     ecx, [ebp+var_1C]
.text:00003728                 mov     edx, [ebp+var_4]
.text:0000372B                 mov     dword ptr [edx+ecx*4], 0
.text:00003732                 jmp     short loc_3714
.text:00003734 ; ---------------------------------------------------------------------------
.text:00003734
.text:00003734 loc_3734:                               ; CODE XREF: _bigdivmod+173j
.text:00003734                 mov     [ebp+var_1C], 1
.text:0000373B                 jmp     short loc_3746
.text:0000373D ; ---------------------------------------------------------------------------
.text:0000373D
.text:0000373D loc_373D:                               ; CODE XREF: _bigdivmod+1B5j
.text:0000373D                 mov     eax, [ebp+var_1C]
.text:00003740                 add     eax, 1
.text:00003743                 mov     [ebp+var_1C], eax
.text:00003746
.text:00003746 loc_3746:                               ; CODE XREF: _bigdivmod+18Bj
.text:00003746                 mov     ecx, [ebp+arg_0]
.text:00003749                 mov     edx, [ebp+var_1C]
.text:0000374C                 cmp     edx, [ecx]
.text:0000374E                 jg      short loc_3767
.text:00003750                 mov     eax, [ebp+var_10]
.text:00003753                 sub     eax, [ebp+var_1C]
.text:00003756                 mov     ecx, [ebp+var_4]
.text:00003759                 mov     edx, [ebp+var_1C]
.text:0000375C                 mov     esi, [ebp+arg_0]
.text:0000375F                 mov     edx, [esi+edx*4]
.text:00003762                 mov     [ecx+eax*4], edx
.text:00003765                 jmp     short loc_373D
.text:00003767 ; ---------------------------------------------------------------------------
.text:00003767
.text:00003767 loc_3767:                               ; CODE XREF: _bigdivmod+19Ej
.text:00003767                 mov     eax, [ebp+var_C]
.text:0000376A                 push    eax
.text:0000376B                 mov     ecx, [ebp+arg_C]
.text:0000376E                 push    ecx
.text:0000376F                 mov     edx, [ebp+var_14]
.text:00003772                 push    edx
.text:00003773                 mov     eax, [ebp+var_8]
.text:00003776                 push    eax
.text:00003777                 mov     ecx, [ebp+var_10]
.text:0000377A                 push    ecx
.text:0000377B                 mov     edx, [ebp+var_4]
.text:0000377E                 push    edx
.text:0000377F                 call    _internal_mod
.text:00003784                 add     esp, 18h
.text:00003787                 cmp     [ebp+var_C], 0
.text:0000378B                 jz      loc_3867
.text:00003791                 mov     eax, [ebp+var_10]
.text:00003794                 sub     eax, [ebp+var_14]
.text:00003797                 sub     eax, 1
.text:0000379A                 mov     [ebp+var_18], eax
.text:0000379D                 jmp     short loc_37A8
.text:0000379F ; ---------------------------------------------------------------------------
.text:0000379F
.text:0000379F loc_379F:                               ; CODE XREF: _bigdivmod+230j
.text:0000379F                 mov     ecx, [ebp+var_18]
.text:000037A2                 add     ecx, 1
.text:000037A5                 mov     [ebp+var_18], ecx
.text:000037A8
.text:000037A8 loc_37A8:                               ; CODE XREF: _bigdivmod+1EDj
.text:000037A8                 mov     edx, [ebp+var_10]
.text:000037AB                 sub     edx, 1
.text:000037AE                 cmp     [ebp+var_18], edx
.text:000037B1                 jge     short loc_37E2
.text:000037B3                 mov     eax, [ebp+var_18]
.text:000037B6                 mov     ecx, [ebp+var_4]
.text:000037B9                 mov     edx, [ecx+eax*4]
.text:000037BC                 mov     ecx, [ebp+var_C]
.text:000037BF                 shl     edx, cl
.text:000037C1                 mov     ecx, 20h ; ' '
.text:000037C6                 sub     ecx, [ebp+var_C]
.text:000037C9                 mov     eax, [ebp+var_18]
.text:000037CC                 mov     esi, [ebp+var_4]
.text:000037CF                 mov     eax, [esi+eax*4+4]
.text:000037D3                 shr     eax, cl
.text:000037D5                 or      edx, eax
.text:000037D7                 mov     ecx, [ebp+var_18]
.text:000037DA                 mov     eax, [ebp+var_4]
.text:000037DD                 mov     [eax+ecx*4], edx
.text:000037E0                 jmp     short loc_379F
.text:000037E2 ; ---------------------------------------------------------------------------
.text:000037E2
.text:000037E2 loc_37E2:                               ; CODE XREF: _bigdivmod+201j
.text:000037E2                 mov     ecx, [ebp+var_10]
.text:000037E5                 mov     edx, [ebp+var_4]
.text:000037E8                 mov     eax, [edx+ecx*4-4]
.text:000037EC                 mov     ecx, [ebp+var_C]
.text:000037EF                 shl     eax, cl
.text:000037F1                 mov     ecx, [ebp+var_10]
.text:000037F4                 mov     edx, [ebp+var_4]
.text:000037F7                 mov     [edx+ecx*4-4], eax
.text:000037FB                 push    0
.text:000037FD                 mov     eax, [ebp+arg_C]
.text:00003800                 push    eax
.text:00003801                 mov     ecx, [ebp+var_14]
.text:00003804                 push    ecx
.text:00003805                 mov     edx, [ebp+var_8]
.text:00003808                 push    edx
.text:00003809                 mov     eax, [ebp+var_10]
.text:0000380C                 push    eax
.text:0000380D                 mov     ecx, [ebp+var_4]
.text:00003810                 push    ecx
.text:00003811                 call    _internal_mod
.text:00003816                 add     esp, 18h
.text:00003819                 mov     edx, [ebp+var_10]
.text:0000381C                 sub     edx, 1
.text:0000381F                 mov     [ebp+var_18], edx
.text:00003822                 jmp     short loc_382D
.text:00003824 ; ---------------------------------------------------------------------------
.text:00003824
.text:00003824 loc_3824:                               ; CODE XREF: _bigdivmod+2B5j
.text:00003824                 mov     eax, [ebp+var_18]
.text:00003827                 sub     eax, 1
.text:0000382A                 mov     [ebp+var_18], eax
.text:0000382D
.text:0000382D loc_382D:                               ; CODE XREF: _bigdivmod+272j
.text:0000382D                 mov     ecx, [ebp+var_10]
.text:00003830                 sub     ecx, [ebp+var_14]
.text:00003833                 cmp     [ebp+var_18], ecx
.text:00003836                 jl      short loc_3867
.text:00003838                 mov     edx, [ebp+var_18]
.text:0000383B                 mov     eax, [ebp+var_4]
.text:0000383E                 mov     edx, [eax+edx*4]
.text:00003841                 mov     ecx, [ebp+var_C]
.text:00003844                 shr     edx, cl
.text:00003846                 mov     ecx, 20h ; ' '
.text:0000384B                 sub     ecx, [ebp+var_C]
.text:0000384E                 mov     eax, [ebp+var_18]
.text:00003851                 mov     esi, [ebp+var_4]
.text:00003854                 mov     eax, [esi+eax*4-4]
.text:00003858                 shl     eax, cl
.text:0000385A                 or      edx, eax
.text:0000385C                 mov     ecx, [ebp+var_18]
.text:0000385F                 mov     eax, [ebp+var_4]
.text:00003862                 mov     [eax+ecx*4], edx
.text:00003865                 jmp     short loc_3824
.text:00003867 ; ---------------------------------------------------------------------------
.text:00003867
.text:00003867 loc_3867:                               ; CODE XREF: _bigdivmod+1DBj
.text:00003867                                         ; _bigdivmod+286j
.text:00003867                 cmp     [ebp+arg_8], 0
.text:0000386B                 jz      short loc_38B7
.text:0000386D                 mov     [ebp+var_18], 1
.text:00003874                 jmp     short loc_387F
.text:00003876 ; ---------------------------------------------------------------------------
.text:00003876
.text:00003876 loc_3876:                               ; CODE XREF: _bigdivmod+305j
.text:00003876                 mov     ecx, [ebp+var_18]
.text:00003879                 add     ecx, 1
.text:0000387C                 mov     [ebp+var_18], ecx
.text:0000387F
.text:0000387F loc_387F:                               ; CODE XREF: _bigdivmod+2C4j
.text:0000387F                 mov     edx, [ebp+arg_8]
.text:00003882                 mov     eax, [ebp+var_18]
.text:00003885                 cmp     eax, [edx]
.text:00003887                 jg      short loc_38B7
.text:00003889                 mov     ecx, [ebp+var_10]
.text:0000388C                 sub     ecx, [ebp+var_18]
.text:0000388F                 mov     [ebp+var_20], ecx
.text:00003892                 js      short loc_38A2
.text:00003894                 mov     edx, [ebp+var_20]
.text:00003897                 mov     eax, [ebp+var_4]
.text:0000389A                 mov     ecx, [eax+edx*4]
.text:0000389D                 mov     [ebp+var_24], ecx
.text:000038A0                 jmp     short loc_38A9
.text:000038A2 ; ---------------------------------------------------------------------------
.text:000038A2
.text:000038A2 loc_38A2:                               ; CODE XREF: _bigdivmod+2E2j
.text:000038A2                 mov     [ebp+var_24], 0
.text:000038A9
.text:000038A9 loc_38A9:                               ; CODE XREF: _bigdivmod+2F0j
.text:000038A9                 mov     edx, [ebp+var_18]
.text:000038AC                 mov     eax, [ebp+arg_8]
.text:000038AF                 mov     ecx, [ebp+var_24]
.text:000038B2                 mov     [eax+edx*4], ecx
.text:000038B5                 jmp     short loc_3876
.text:000038B7 ; ---------------------------------------------------------------------------
.text:000038B7
.text:000038B7 loc_38B7:                               ; CODE XREF: _bigdivmod+2BBj
.text:000038B7                                         ; _bigdivmod+2D7j
.text:000038B7                 mov     edx, [ebp+var_14]
.text:000038BA                 shl     edx, 2
.text:000038BD                 push    edx
.text:000038BE                 mov     eax, [ebp+var_8]
.text:000038C1                 push    eax
.text:000038C2                 call    _smemclr
.text:000038C7                 add     esp, 8
.text:000038CA                 mov     ecx, [ebp+var_8]
.text:000038CD                 push    ecx
.text:000038CE                 call    _safefree
.text:000038D3                 add     esp, 4
.text:000038D6                 mov     edx, [ebp+var_10]
.text:000038D9                 shl     edx, 2
.text:000038DC                 push    edx
.text:000038DD                 mov     eax, [ebp+var_4]
.text:000038E0                 push    eax
.text:000038E1                 call    _smemclr
.text:000038E6                 add     esp, 8
.text:000038E9                 mov     ecx, [ebp+var_4]
.text:000038EC                 push    ecx
.text:000038ED                 call    _safefree
.text:000038F2                 add     esp, 4
.text:000038F5                 pop     esi
.text:000038F6                 add     esp, 24h
.text:000038F9                 cmp     ebp, esp
.text:000038FB                 call    __RTC_CheckEsp
.text:00003900                 mov     esp, ebp
.text:00003902                 pop     ebp
.text:00003903                 retn
.text:00003903 _bigdivmod      endp
.text:00003903
.text:00003903 ; ---------------------------------------------------------------------------
.text:00003904                 align 10h
.text:00003910
.text:00003910 ; =============== S U B R O U T I N E =======================================
.text:00003910
.text:00003910 ; Attributes: bp-based frame
.text:00003910
.text:00003910                 public _bigmod
.text:00003910 _bigmod         proc near               ; CODE XREF: _modpow_simple+44p
.text:00003910                                         ; _modpow+68p ...
.text:00003910
.text:00003910 var_4           = dword ptr -4
.text:00003910 arg_0           = dword ptr  8
.text:00003910 arg_4           = dword ptr  0Ch
.text:00003910
.text:00003910                 push    ebp
.text:00003911                 mov     ebp, esp
.text:00003913                 push    ecx
.text:00003914                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000391B                 mov     eax, [ebp+arg_4]
.text:0000391E                 mov     ecx, [eax]
.text:00003920                 push    ecx
.text:00003921                 call    _newbn
.text:00003926                 add     esp, 4
.text:00003929                 mov     [ebp+var_4], eax
.text:0000392C                 push    0
.text:0000392E                 mov     edx, [ebp+var_4]
.text:00003931                 push    edx
.text:00003932                 mov     eax, [ebp+arg_4]
.text:00003935                 push    eax
.text:00003936                 mov     ecx, [ebp+arg_0]
.text:00003939                 push    ecx
.text:0000393A                 call    _bigdivmod
.text:0000393F                 add     esp, 10h
.text:00003942
.text:00003942 loc_3942:                               ; CODE XREF: _bigmod+55j
.text:00003942                 mov     edx, [ebp+var_4]
.text:00003945                 cmp     dword ptr [edx], 1
.text:00003948                 jbe     short loc_3967
.text:0000394A                 mov     eax, [ebp+var_4]
.text:0000394D                 mov     ecx, [eax]
.text:0000394F                 mov     edx, [ebp+var_4]
.text:00003952                 cmp     dword ptr [edx+ecx*4], 0
.text:00003956                 jnz     short loc_3967
.text:00003958                 mov     eax, [ebp+var_4]
.text:0000395B                 mov     ecx, [eax]
.text:0000395D                 sub     ecx, 1
.text:00003960                 mov     edx, [ebp+var_4]
.text:00003963                 mov     [edx], ecx
.text:00003965                 jmp     short loc_3942
.text:00003967 ; ---------------------------------------------------------------------------
.text:00003967
.text:00003967 loc_3967:                               ; CODE XREF: _bigmod+38j
.text:00003967                                         ; _bigmod+46j
.text:00003967                 mov     eax, [ebp+var_4]
.text:0000396A                 add     esp, 4
.text:0000396D                 cmp     ebp, esp
.text:0000396F                 call    __RTC_CheckEsp
.text:00003974                 mov     esp, ebp
.text:00003976                 pop     ebp
.text:00003977                 retn
.text:00003977 _bigmod         endp
.text:00003977
.text:00003977 ; ---------------------------------------------------------------------------
.text:00003978                 align 10h
.text:00003980
.text:00003980 ; =============== S U B R O U T I N E =======================================
.text:00003980
.text:00003980 ; Attributes: bp-based frame
.text:00003980
.text:00003980 ; int __cdecl biggcd(void *, void *)
.text:00003980                 public _biggcd
.text:00003980 _biggcd         proc near
.text:00003980
.text:00003980 var_C           = dword ptr -0Ch
.text:00003980 var_8           = dword ptr -8
.text:00003980 var_4           = dword ptr -4
.text:00003980 arg_0           = dword ptr  8
.text:00003980 arg_4           = dword ptr  0Ch
.text:00003980
.text:00003980                 push    ebp
.text:00003981                 mov     ebp, esp
.text:00003983                 sub     esp, 0Ch
.text:00003986                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000398D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000399B                 mov     eax, [ebp+arg_0]
.text:0000399E                 push    eax             ; void *
.text:0000399F                 call    _copybn
.text:000039A4                 add     esp, 4
.text:000039A7                 mov     [ebp+var_4], eax
.text:000039AA                 mov     ecx, [ebp+arg_4]
.text:000039AD                 push    ecx             ; void *
.text:000039AE                 call    _copybn
.text:000039B3                 add     esp, 4
.text:000039B6                 mov     [ebp+var_8], eax
.text:000039B9
.text:000039B9 loc_39B9:                               ; CODE XREF: _biggcd+B4j
.text:000039B9                 mov     edx, _Zero
.text:000039BF                 push    edx
.text:000039C0                 mov     eax, [ebp+var_8]
.text:000039C3                 push    eax
.text:000039C4                 call    _bignum_cmp
.text:000039C9                 add     esp, 8
.text:000039CC                 test    eax, eax
.text:000039CE                 jz      short loc_3A36
.text:000039D0                 mov     ecx, [ebp+var_8]
.text:000039D3                 mov     edx, [ecx]
.text:000039D5                 push    edx
.text:000039D6                 call    _newbn
.text:000039DB                 add     esp, 4
.text:000039DE                 mov     [ebp+var_C], eax
.text:000039E1                 push    0
.text:000039E3                 mov     eax, [ebp+var_C]
.text:000039E6                 push    eax
.text:000039E7                 mov     ecx, [ebp+var_8]
.text:000039EA                 push    ecx
.text:000039EB                 mov     edx, [ebp+var_4]
.text:000039EE                 push    edx
.text:000039EF                 call    _bigdivmod
.text:000039F4                 add     esp, 10h
.text:000039F7
.text:000039F7 loc_39F7:                               ; CODE XREF: _biggcd+9Aj
.text:000039F7                 mov     eax, [ebp+var_C]
.text:000039FA                 cmp     dword ptr [eax], 1
.text:000039FD                 jbe     short loc_3A1C
.text:000039FF                 mov     ecx, [ebp+var_C]
.text:00003A02                 mov     edx, [ecx]
.text:00003A04                 mov     eax, [ebp+var_C]
.text:00003A07                 cmp     dword ptr [eax+edx*4], 0
.text:00003A0B                 jnz     short loc_3A1C
.text:00003A0D                 mov     ecx, [ebp+var_C]
.text:00003A10                 mov     edx, [ecx]
.text:00003A12                 sub     edx, 1
.text:00003A15                 mov     eax, [ebp+var_C]
.text:00003A18                 mov     [eax], edx
.text:00003A1A                 jmp     short loc_39F7
.text:00003A1C ; ---------------------------------------------------------------------------
.text:00003A1C
.text:00003A1C loc_3A1C:                               ; CODE XREF: _biggcd+7Dj
.text:00003A1C                                         ; _biggcd+8Bj
.text:00003A1C                 mov     ecx, [ebp+var_4]
.text:00003A1F                 push    ecx
.text:00003A20                 call    _freebn
.text:00003A25                 add     esp, 4
.text:00003A28                 mov     edx, [ebp+var_8]
.text:00003A2B                 mov     [ebp+var_4], edx
.text:00003A2E                 mov     eax, [ebp+var_C]
.text:00003A31                 mov     [ebp+var_8], eax
.text:00003A34                 jmp     short loc_39B9
.text:00003A36 ; ---------------------------------------------------------------------------
.text:00003A36
.text:00003A36 loc_3A36:                               ; CODE XREF: _biggcd+4Ej
.text:00003A36                 mov     ecx, [ebp+var_8]
.text:00003A39                 push    ecx
.text:00003A3A                 call    _freebn
.text:00003A3F                 add     esp, 4
.text:00003A42                 mov     eax, [ebp+var_4]
.text:00003A45                 add     esp, 0Ch
.text:00003A48                 cmp     ebp, esp
.text:00003A4A                 call    __RTC_CheckEsp
.text:00003A4F                 mov     esp, ebp
.text:00003A51                 pop     ebp
.text:00003A52                 retn
.text:00003A52 _biggcd         endp
.text:00003A52
.text:00003A52 ; ---------------------------------------------------------------------------
.text:00003A53                 align 10h
.text:00003A60
.text:00003A60 ; =============== S U B R O U T I N E =======================================
.text:00003A60
.text:00003A60 ; Attributes: bp-based frame
.text:00003A60
.text:00003A60 ; int __cdecl modinv(void *, void *)
.text:00003A60                 public _modinv
.text:00003A60 _modinv         proc near               ; CODE XREF: _modpow+95p
.text:00003A60
.text:00003A60 var_40          = dword ptr -40h
.text:00003A60 var_3C          = dword ptr -3Ch
.text:00003A60 var_38          = dword ptr -38h
.text:00003A60 var_34          = dword ptr -34h
.text:00003A60 var_30          = dword ptr -30h
.text:00003A60 var_2C          = dword ptr -2Ch
.text:00003A60 var_28          = dword ptr -28h
.text:00003A60 var_24          = dword ptr -24h
.text:00003A60 var_20          = dword ptr -20h
.text:00003A60 var_1C          = dword ptr -1Ch
.text:00003A60 var_18          = dword ptr -18h
.text:00003A60 var_14          = dword ptr -14h
.text:00003A60 var_10          = dword ptr -10h
.text:00003A60 var_C           = dword ptr -0Ch
.text:00003A60 var_8           = dword ptr -8
.text:00003A60 var_4           = dword ptr -4
.text:00003A60 arg_0           = dword ptr  8
.text:00003A60 arg_4           = dword ptr  0Ch
.text:00003A60
.text:00003A60                 push    ebp
.text:00003A61                 mov     ebp, esp
.text:00003A63                 sub     esp, 40h
.text:00003A66                 push    edi
.text:00003A67                 lea     edi, [ebp+var_40]
.text:00003A6A                 mov     ecx, 10h
.text:00003A6F                 mov     eax, 0CCCCCCCCh
.text:00003A74                 rep stosd
.text:00003A76                 mov     eax, [ebp+arg_4]
.text:00003A79                 push    eax             ; void *
.text:00003A7A                 call    _copybn
.text:00003A7F                 add     esp, 4
.text:00003A82                 mov     [ebp+var_4], eax
.text:00003A85                 mov     ecx, [ebp+arg_0]
.text:00003A88                 push    ecx             ; void *
.text:00003A89                 call    _copybn
.text:00003A8E                 add     esp, 4
.text:00003A91                 mov     [ebp+var_8], eax
.text:00003A94                 mov     edx, _Zero
.text:00003A9A                 push    edx             ; void *
.text:00003A9B                 call    _copybn
.text:00003AA0                 add     esp, 4
.text:00003AA3                 mov     [ebp+var_C], eax
.text:00003AA6                 mov     eax, _One
.text:00003AAB                 push    eax             ; void *
.text:00003AAC                 call    _copybn
.text:00003AB1                 add     esp, 4
.text:00003AB4                 mov     [ebp+var_10], eax
.text:00003AB7                 mov     [ebp+var_14], 1
.text:00003ABE                 mov     ecx, [ebp+arg_0]
.text:00003AC1                 mov     edx, [ecx]
.text:00003AC3                 mov     eax, [ebp+arg_0]
.text:00003AC6                 cmp     dword ptr [eax+edx*4], 0
.text:00003ACA                 jnz     short loc_3AE3
.text:00003ACC                 push    67Fh
.text:00003AD1                 push    offset $SG8058  ; "..\\..\\..\\sshbn.c"
.text:00003AD6                 push    offset $SG8059  ; "number[number[0]] != 0"
.text:00003ADB                 call    __wassert
.text:00003AE0 ; ---------------------------------------------------------------------------
.text:00003AE0                 add     esp, 0Ch
.text:00003AE3
.text:00003AE3 loc_3AE3:                               ; CODE XREF: _modinv+6Aj
.text:00003AE3                 mov     edx, [ebp+arg_4]
.text:00003AE6                 mov     eax, [edx]
.text:00003AE8                 mov     ecx, [ebp+arg_4]
.text:00003AEB                 cmp     dword ptr [ecx+eax*4], 0
.text:00003AEF                 jnz     short loc_3B08
.text:00003AF1                 push    680h
.text:00003AF6                 push    offset $SG8061  ; "..\\..\\..\\sshbn.c"
.text:00003AFB                 push    offset $SG8062  ; "modulus[modulus[0]] != 0"
.text:00003B00                 call    __wassert
.text:00003B05 ; ---------------------------------------------------------------------------
.text:00003B05                 add     esp, 0Ch
.text:00003B08
.text:00003B08 loc_3B08:                               ; CODE XREF: _modinv+8Fj
.text:00003B08                                         ; _modinv+1EFj
.text:00003B08                 mov     eax, _One
.text:00003B0D                 push    eax
.text:00003B0E                 mov     ecx, [ebp+var_8]
.text:00003B11                 push    ecx
.text:00003B12                 call    _bignum_cmp
.text:00003B17                 add     esp, 8
.text:00003B1A                 test    eax, eax
.text:00003B1C                 jz      loc_3C54
.text:00003B22                 mov     edx, _Zero
.text:00003B28                 push    edx
.text:00003B29                 mov     eax, [ebp+var_8]
.text:00003B2C                 push    eax
.text:00003B2D                 call    _bignum_cmp
.text:00003B32                 add     esp, 8
.text:00003B35                 test    eax, eax
.text:00003B37                 jnz     short loc_3B70
.text:00003B39                 mov     ecx, [ebp+var_8]
.text:00003B3C                 push    ecx
.text:00003B3D                 call    _freebn
.text:00003B42                 add     esp, 4
.text:00003B45                 mov     edx, [ebp+var_4]
.text:00003B48                 push    edx
.text:00003B49                 call    _freebn
.text:00003B4E                 add     esp, 4
.text:00003B51                 mov     eax, [ebp+var_C]
.text:00003B54                 push    eax
.text:00003B55                 call    _freebn
.text:00003B5A                 add     esp, 4
.text:00003B5D                 mov     ecx, [ebp+var_10]
.text:00003B60                 push    ecx
.text:00003B61                 call    _freebn
.text:00003B66                 add     esp, 4
.text:00003B69                 xor     eax, eax
.text:00003B6B                 jmp     loc_3D8E
.text:00003B70 ; ---------------------------------------------------------------------------
.text:00003B70
.text:00003B70 loc_3B70:                               ; CODE XREF: _modinv+D7j
.text:00003B70                 mov     edx, [ebp+var_8]
.text:00003B73                 mov     eax, [edx]
.text:00003B75                 push    eax
.text:00003B76                 call    _newbn
.text:00003B7B                 add     esp, 4
.text:00003B7E                 mov     [ebp+var_18], eax
.text:00003B81                 mov     ecx, [ebp+var_4]
.text:00003B84                 mov     edx, [ecx]
.text:00003B86                 push    edx
.text:00003B87                 call    _newbn
.text:00003B8C                 add     esp, 4
.text:00003B8F                 mov     [ebp+var_1C], eax
.text:00003B92                 mov     eax, [ebp+var_1C]
.text:00003B95                 push    eax
.text:00003B96                 mov     ecx, [ebp+var_18]
.text:00003B99                 push    ecx
.text:00003B9A                 mov     edx, [ebp+var_8]
.text:00003B9D                 push    edx
.text:00003B9E                 mov     eax, [ebp+var_4]
.text:00003BA1                 push    eax
.text:00003BA2                 call    _bigdivmod
.text:00003BA7                 add     esp, 10h
.text:00003BAA
.text:00003BAA loc_3BAA:                               ; CODE XREF: _modinv+16Dj
.text:00003BAA                 mov     ecx, [ebp+var_18]
.text:00003BAD                 cmp     dword ptr [ecx], 1
.text:00003BB0                 jbe     short loc_3BCF
.text:00003BB2                 mov     edx, [ebp+var_18]
.text:00003BB5                 mov     eax, [edx]
.text:00003BB7                 mov     ecx, [ebp+var_18]
.text:00003BBA                 cmp     dword ptr [ecx+eax*4], 0
.text:00003BBE                 jnz     short loc_3BCF
.text:00003BC0                 mov     edx, [ebp+var_18]
.text:00003BC3                 mov     eax, [edx]
.text:00003BC5                 sub     eax, 1
.text:00003BC8                 mov     ecx, [ebp+var_18]
.text:00003BCB                 mov     [ecx], eax
.text:00003BCD                 jmp     short loc_3BAA
.text:00003BCF ; ---------------------------------------------------------------------------
.text:00003BCF
.text:00003BCF loc_3BCF:                               ; CODE XREF: _modinv+150j
.text:00003BCF                                         ; _modinv+15Ej ...
.text:00003BCF                 mov     edx, [ebp+var_1C]
.text:00003BD2                 cmp     dword ptr [edx], 1
.text:00003BD5                 jbe     short loc_3BF4
.text:00003BD7                 mov     eax, [ebp+var_1C]
.text:00003BDA                 mov     ecx, [eax]
.text:00003BDC                 mov     edx, [ebp+var_1C]
.text:00003BDF                 cmp     dword ptr [edx+ecx*4], 0
.text:00003BE3                 jnz     short loc_3BF4
.text:00003BE5                 mov     eax, [ebp+var_1C]
.text:00003BE8                 mov     ecx, [eax]
.text:00003BEA                 sub     ecx, 1
.text:00003BED                 mov     edx, [ebp+var_1C]
.text:00003BF0                 mov     [edx], ecx
.text:00003BF2                 jmp     short loc_3BCF
.text:00003BF4 ; ---------------------------------------------------------------------------
.text:00003BF4
.text:00003BF4 loc_3BF4:                               ; CODE XREF: _modinv+175j
.text:00003BF4                                         ; _modinv+183j
.text:00003BF4                 mov     eax, [ebp+var_4]
.text:00003BF7                 push    eax
.text:00003BF8                 call    _freebn
.text:00003BFD                 add     esp, 4
.text:00003C00                 mov     ecx, [ebp+var_8]
.text:00003C03                 mov     [ebp+var_4], ecx
.text:00003C06                 mov     edx, [ebp+var_18]
.text:00003C09                 mov     [ebp+var_8], edx
.text:00003C0C                 mov     eax, [ebp+var_C]
.text:00003C0F                 mov     [ebp+var_18], eax
.text:00003C12                 mov     ecx, [ebp+var_10]
.text:00003C15                 mov     [ebp+var_C], ecx
.text:00003C18                 mov     edx, [ebp+var_18]
.text:00003C1B                 push    edx
.text:00003C1C                 mov     eax, [ebp+var_C]
.text:00003C1F                 push    eax
.text:00003C20                 mov     ecx, [ebp+var_1C]
.text:00003C23                 push    ecx
.text:00003C24                 call    _bigmuladd
.text:00003C29                 add     esp, 0Ch
.text:00003C2C                 mov     [ebp+var_10], eax
.text:00003C2F                 mov     edx, [ebp+var_14]
.text:00003C32                 neg     edx
.text:00003C34                 mov     [ebp+var_14], edx
.text:00003C37                 mov     eax, [ebp+var_18]
.text:00003C3A                 push    eax
.text:00003C3B                 call    _freebn
.text:00003C40                 add     esp, 4
.text:00003C43                 mov     ecx, [ebp+var_1C]
.text:00003C46                 push    ecx
.text:00003C47                 call    _freebn
.text:00003C4C                 add     esp, 4
.text:00003C4F                 jmp     loc_3B08
.text:00003C54 ; ---------------------------------------------------------------------------
.text:00003C54
.text:00003C54 loc_3C54:                               ; CODE XREF: _modinv+BCj
.text:00003C54                 mov     edx, [ebp+var_8]
.text:00003C57                 push    edx
.text:00003C58                 call    _freebn
.text:00003C5D                 add     esp, 4
.text:00003C60                 mov     eax, [ebp+var_4]
.text:00003C63                 push    eax
.text:00003C64                 call    _freebn
.text:00003C69                 add     esp, 4
.text:00003C6C                 mov     ecx, [ebp+var_C]
.text:00003C6F                 push    ecx
.text:00003C70                 call    _freebn
.text:00003C75                 add     esp, 4
.text:00003C78                 cmp     [ebp+var_14], 0
.text:00003C7C                 jge     loc_3D8B
.text:00003C82                 mov     edx, [ebp+arg_4]
.text:00003C85                 mov     eax, [edx]
.text:00003C87                 push    eax
.text:00003C88                 call    _newbn
.text:00003C8D                 add     esp, 4
.text:00003C90                 mov     [ebp+var_20], eax
.text:00003C93                 mov     [ebp+var_24], 0
.text:00003C9A                 mov     [ebp+var_28], 1
.text:00003CA1                 mov     [ebp+var_2C], 1
.text:00003CA8                 jmp     short loc_3CB3
.text:00003CAA ; ---------------------------------------------------------------------------
.text:00003CAA
.text:00003CAA loc_3CAA:                               ; CODE XREF: _modinv:loc_3D6Cj
.text:00003CAA                 mov     ecx, [ebp+var_2C]
.text:00003CAD                 add     ecx, 1
.text:00003CB0                 mov     [ebp+var_2C], ecx
.text:00003CB3
.text:00003CB3 loc_3CB3:                               ; CODE XREF: _modinv+248j
.text:00003CB3                 mov     edx, [ebp+var_20]
.text:00003CB6                 mov     eax, [ebp+var_2C]
.text:00003CB9                 cmp     eax, [edx]
.text:00003CBB                 jg      loc_3D71
.text:00003CC1                 mov     ecx, [ebp+arg_4]
.text:00003CC4                 mov     edx, [ebp+var_2C]
.text:00003CC7                 cmp     edx, [ecx]
.text:00003CC9                 jg      short loc_3CD9
.text:00003CCB                 mov     eax, [ebp+var_2C]
.text:00003CCE                 mov     ecx, [ebp+arg_4]
.text:00003CD1                 mov     edx, [ecx+eax*4]
.text:00003CD4                 mov     [ebp+var_38], edx
.text:00003CD7                 jmp     short loc_3CE0
.text:00003CD9 ; ---------------------------------------------------------------------------
.text:00003CD9
.text:00003CD9 loc_3CD9:                               ; CODE XREF: _modinv+269j
.text:00003CD9                 mov     [ebp+var_38], 0
.text:00003CE0
.text:00003CE0 loc_3CE0:                               ; CODE XREF: _modinv+277j
.text:00003CE0                 mov     eax, [ebp+var_38]
.text:00003CE3                 mov     [ebp+var_30], eax
.text:00003CE6                 mov     ecx, [ebp+var_10]
.text:00003CE9                 mov     edx, [ebp+var_2C]
.text:00003CEC                 cmp     edx, [ecx]
.text:00003CEE                 jg      short loc_3CFE
.text:00003CF0                 mov     eax, [ebp+var_2C]
.text:00003CF3                 mov     ecx, [ebp+var_10]
.text:00003CF6                 mov     edx, [ecx+eax*4]
.text:00003CF9                 mov     [ebp+var_3C], edx
.text:00003CFC                 jmp     short loc_3D05
.text:00003CFE ; ---------------------------------------------------------------------------
.text:00003CFE
.text:00003CFE loc_3CFE:                               ; CODE XREF: _modinv+28Ej
.text:00003CFE                 mov     [ebp+var_3C], 0
.text:00003D05
.text:00003D05 loc_3D05:                               ; CODE XREF: _modinv+29Cj
.text:00003D05                 mov     eax, [ebp+var_3C]
.text:00003D08                 mov     [ebp+var_34], eax
.text:00003D0B                 mov     ecx, [ebp+var_30]
.text:00003D0E                 sub     ecx, [ebp+var_34]
.text:00003D11                 sub     ecx, [ebp+var_24]
.text:00003D14                 mov     edx, [ebp+var_2C]
.text:00003D17                 mov     eax, [ebp+var_20]
.text:00003D1A                 mov     [eax+edx*4], ecx
.text:00003D1D                 mov     ecx, [ebp+var_34]
.text:00003D20                 not     ecx
.text:00003D22                 mov     [ebp+var_34], ecx
.text:00003D25                 cmp     [ebp+var_24], 0
.text:00003D29                 jz      short loc_3D41
.text:00003D2B                 mov     edx, [ebp+var_2C]
.text:00003D2E                 mov     eax, [ebp+var_20]
.text:00003D31                 mov     ecx, [eax+edx*4]
.text:00003D34                 cmp     ecx, [ebp+var_34]
.text:00003D37                 sbb     edx, edx
.text:00003D39                 add     edx, 1
.text:00003D3C                 mov     [ebp+var_40], edx
.text:00003D3F                 jmp     short loc_3D54
.text:00003D41 ; ---------------------------------------------------------------------------
.text:00003D41
.text:00003D41 loc_3D41:                               ; CODE XREF: _modinv+2C9j
.text:00003D41                 mov     eax, [ebp+var_2C]
.text:00003D44                 mov     ecx, [ebp+var_20]
.text:00003D47                 mov     edx, [ecx+eax*4]
.text:00003D4A                 cmp     [ebp+var_34], edx
.text:00003D4D                 sbb     eax, eax
.text:00003D4F                 neg     eax
.text:00003D51                 mov     [ebp+var_40], eax
.text:00003D54
.text:00003D54 loc_3D54:                               ; CODE XREF: _modinv+2DFj
.text:00003D54                 mov     ecx, [ebp+var_40]
.text:00003D57                 mov     [ebp+var_24], ecx
.text:00003D5A                 mov     edx, [ebp+var_2C]
.text:00003D5D                 mov     eax, [ebp+var_20]
.text:00003D60                 cmp     dword ptr [eax+edx*4], 0
.text:00003D64                 jz      short loc_3D6C
.text:00003D66                 mov     ecx, [ebp+var_2C]
.text:00003D69                 mov     [ebp+var_28], ecx
.text:00003D6C
.text:00003D6C loc_3D6C:                               ; CODE XREF: _modinv+304j
.text:00003D6C                 jmp     loc_3CAA
.text:00003D71 ; ---------------------------------------------------------------------------
.text:00003D71
.text:00003D71 loc_3D71:                               ; CODE XREF: _modinv+25Bj
.text:00003D71                 mov     edx, [ebp+var_20]
.text:00003D74                 mov     eax, [ebp+var_28]
.text:00003D77                 mov     [edx], eax
.text:00003D79                 mov     ecx, [ebp+var_10]
.text:00003D7C                 push    ecx
.text:00003D7D                 call    _freebn
.text:00003D82                 add     esp, 4
.text:00003D85                 mov     edx, [ebp+var_20]
.text:00003D88                 mov     [ebp+var_10], edx
.text:00003D8B
.text:00003D8B loc_3D8B:                               ; CODE XREF: _modinv+21Cj
.text:00003D8B                 mov     eax, [ebp+var_10]
.text:00003D8E
.text:00003D8E loc_3D8E:                               ; CODE XREF: _modinv+10Bj
.text:00003D8E                 pop     edi
.text:00003D8F                 add     esp, 40h
.text:00003D92                 cmp     ebp, esp
.text:00003D94                 call    __RTC_CheckEsp
.text:00003D99                 mov     esp, ebp
.text:00003D9B                 pop     ebp
.text:00003D9C                 retn
.text:00003D9C _modinv         endp
.text:00003D9C
.text:00003D9C ; ---------------------------------------------------------------------------
.text:00003D9D                 align 10h
.text:00003DA0
.text:00003DA0 ; =============== S U B R O U T I N E =======================================
.text:00003DA0
.text:00003DA0 ; Attributes: bp-based frame
.text:00003DA0
.text:00003DA0                 public _bignum_decimal
.text:00003DA0 _bignum_decimal proc near
.text:00003DA0
.text:00003DA0 var_20          = dword ptr -20h
.text:00003DA0 var_1C          = dword ptr -1Ch
.text:00003DA0 var_18          = dword ptr -18h
.text:00003DA0 var_14          = dword ptr -14h
.text:00003DA0 var_10          = dword ptr -10h
.text:00003DA0 var_C           = dword ptr -0Ch
.text:00003DA0 var_8           = dword ptr -8
.text:00003DA0 var_4           = dword ptr -4
.text:00003DA0 arg_0           = dword ptr  8
.text:00003DA0
.text:00003DA0                 push    ebp
.text:00003DA1                 mov     ebp, esp
.text:00003DA3                 sub     esp, 20h
.text:00003DA6                 push    esi
.text:00003DA7                 mov     eax, 0CCCCCCCCh
.text:00003DAC                 mov     [ebp+var_20], eax
.text:00003DAF                 mov     [ebp+var_1C], eax
.text:00003DB2                 mov     [ebp+var_18], eax
.text:00003DB5                 mov     [ebp+var_14], eax
.text:00003DB8                 mov     [ebp+var_10], eax
.text:00003DBB                 mov     [ebp+var_C], eax
.text:00003DBE                 mov     [ebp+var_8], eax
.text:00003DC1                 mov     [ebp+var_4], eax
.text:00003DC4                 mov     eax, [ebp+arg_0]
.text:00003DC7                 push    eax
.text:00003DC8                 call    _bignum_bitcount
.text:00003DCD                 add     esp, 4
.text:00003DD0                 mov     [ebp+var_C], eax
.text:00003DD3                 cmp     [ebp+var_C], 0
.text:00003DD7                 jnz     short loc_3DE2
.text:00003DD9                 mov     [ebp+var_4], 1
.text:00003DE0                 jmp     short loc_3DF6
.text:00003DE2 ; ---------------------------------------------------------------------------
.text:00003DE2
.text:00003DE2 loc_3DE2:                               ; CODE XREF: _bignum_decimal+37j
.text:00003DE2                 mov     eax, [ebp+var_C]
.text:00003DE5                 imul    eax, 1Ch
.text:00003DE8                 add     eax, 5Ch ; '\'
.text:00003DEB                 cdq
.text:00003DEC                 mov     ecx, 5Dh ; ']'
.text:00003DF1                 idiv    ecx
.text:00003DF3                 mov     [ebp+var_4], eax
.text:00003DF6
.text:00003DF6 loc_3DF6:                               ; CODE XREF: _bignum_decimal+40j
.text:00003DF6                 mov     edx, [ebp+var_4]
.text:00003DF9                 add     edx, 1
.text:00003DFC                 mov     [ebp+var_4], edx
.text:00003DFF                 push    1
.text:00003E01                 mov     eax, [ebp+var_4]
.text:00003E04                 push    eax
.text:00003E05                 call    _safemalloc
.text:00003E0A                 add     esp, 8
.text:00003E0D                 mov     [ebp+var_1C], eax
.text:00003E10                 push    4
.text:00003E12                 mov     ecx, [ebp+arg_0]
.text:00003E15                 mov     edx, [ecx]
.text:00003E17                 push    edx
.text:00003E18                 call    _safemalloc
.text:00003E1D                 add     esp, 8
.text:00003E20                 mov     [ebp+var_20], eax
.text:00003E23                 mov     [ebp+var_C], 0
.text:00003E2A                 jmp     short loc_3E35
.text:00003E2C ; ---------------------------------------------------------------------------
.text:00003E2C
.text:00003E2C loc_3E2C:                               ; CODE XREF: _bignum_decimal+B6j
.text:00003E2C                 mov     eax, [ebp+var_C]
.text:00003E2F                 add     eax, 1
.text:00003E32                 mov     [ebp+var_C], eax
.text:00003E35
.text:00003E35 loc_3E35:                               ; CODE XREF: _bignum_decimal+8Aj
.text:00003E35                 mov     ecx, [ebp+arg_0]
.text:00003E38                 mov     edx, [ebp+var_C]
.text:00003E3B                 cmp     edx, [ecx]
.text:00003E3D                 jge     short loc_3E58
.text:00003E3F                 mov     eax, [ebp+arg_0]
.text:00003E42                 mov     ecx, [eax]
.text:00003E44                 sub     ecx, [ebp+var_C]
.text:00003E47                 mov     edx, [ebp+var_C]
.text:00003E4A                 mov     eax, [ebp+var_20]
.text:00003E4D                 mov     esi, [ebp+arg_0]
.text:00003E50                 mov     ecx, [esi+ecx*4]
.text:00003E53                 mov     [eax+edx*4], ecx
.text:00003E56                 jmp     short loc_3E2C
.text:00003E58 ; ---------------------------------------------------------------------------
.text:00003E58
.text:00003E58 loc_3E58:                               ; CODE XREF: _bignum_decimal+9Dj
.text:00003E58                 mov     edx, [ebp+var_4]
.text:00003E5B                 sub     edx, 1
.text:00003E5E                 mov     [ebp+var_8], edx
.text:00003E61                 mov     eax, [ebp+var_1C]
.text:00003E64                 add     eax, [ebp+var_8]
.text:00003E67                 mov     byte ptr [eax], 0
.text:00003E6A
.text:00003E6A loc_3E6A:                               ; CODE XREF: _bignum_decimal+184j
.text:00003E6A                 mov     [ebp+var_10], 1
.text:00003E71                 mov     [ebp+var_18], 0
.text:00003E78                 mov     [ebp+var_14], 0
.text:00003E7F                 mov     [ebp+var_C], 0
.text:00003E86                 jmp     short loc_3E91
.text:00003E88 ; ---------------------------------------------------------------------------
.text:00003E88
.text:00003E88 loc_3E88:                               ; CODE XREF: _bignum_decimal+161j
.text:00003E88                 mov     ecx, [ebp+var_C]
.text:00003E8B                 add     ecx, 1
.text:00003E8E                 mov     [ebp+var_C], ecx
.text:00003E91
.text:00003E91 loc_3E91:                               ; CODE XREF: _bignum_decimal+E6j
.text:00003E91                 mov     edx, [ebp+arg_0]
.text:00003E94                 mov     eax, [ebp+var_C]
.text:00003E97                 cmp     eax, [edx]
.text:00003E99                 jge     short loc_3F03
.text:00003E9B                 mov     eax, [ebp+var_18]
.text:00003E9E                 mov     edx, [ebp+var_14]
.text:00003EA1                 mov     cl, 20h ; ' '
.text:00003EA3                 call    __allshl
.text:00003EA8                 mov     ecx, [ebp+var_C]
.text:00003EAB                 mov     esi, [ebp+var_20]
.text:00003EAE                 mov     ecx, [esi+ecx*4]
.text:00003EB1                 xor     esi, esi
.text:00003EB3                 add     eax, ecx
.text:00003EB5                 adc     edx, esi
.text:00003EB7                 mov     [ebp+var_18], eax
.text:00003EBA                 mov     [ebp+var_14], edx
.text:00003EBD                 push    0
.text:00003EBF                 push    0Ah
.text:00003EC1                 mov     edx, [ebp+var_14]
.text:00003EC4                 push    edx
.text:00003EC5                 mov     eax, [ebp+var_18]
.text:00003EC8                 push    eax
.text:00003EC9                 call    __aulldiv
.text:00003ECE                 mov     ecx, [ebp+var_C]
.text:00003ED1                 mov     edx, [ebp+var_20]
.text:00003ED4                 mov     [edx+ecx*4], eax
.text:00003ED7                 mov     eax, [ebp+var_C]
.text:00003EDA                 mov     ecx, [ebp+var_20]
.text:00003EDD                 cmp     dword ptr [ecx+eax*4], 0
.text:00003EE1                 jz      short loc_3EEA
.text:00003EE3                 mov     [ebp+var_10], 0
.text:00003EEA
.text:00003EEA loc_3EEA:                               ; CODE XREF: _bignum_decimal+141j
.text:00003EEA                 push    0
.text:00003EEC                 push    0Ah
.text:00003EEE                 mov     edx, [ebp+var_14]
.text:00003EF1                 push    edx
.text:00003EF2                 mov     eax, [ebp+var_18]
.text:00003EF5                 push    eax
.text:00003EF6                 call    __aullrem
.text:00003EFB                 mov     [ebp+var_18], eax
.text:00003EFE                 mov     [ebp+var_14], edx
.text:00003F01                 jmp     short loc_3E88
.text:00003F03 ; ---------------------------------------------------------------------------
.text:00003F03
.text:00003F03 loc_3F03:                               ; CODE XREF: _bignum_decimal+F9j
.text:00003F03                 mov     ecx, [ebp+var_8]
.text:00003F06                 sub     ecx, 1
.text:00003F09                 mov     [ebp+var_8], ecx
.text:00003F0C                 mov     edx, [ebp+var_18]
.text:00003F0F                 add     edx, 30h ; '0'
.text:00003F12                 mov     eax, [ebp+var_14]
.text:00003F15                 adc     eax, 0
.text:00003F18                 mov     ecx, [ebp+var_1C]
.text:00003F1B                 add     ecx, [ebp+var_8]
.text:00003F1E                 mov     [ecx], dl
.text:00003F20                 cmp     [ebp+var_10], 0
.text:00003F24                 jz      loc_3E6A
.text:00003F2A                 cmp     [ebp+var_8], 0
.text:00003F2E                 jle     short loc_3F4A
.text:00003F30                 mov     edx, [ebp+var_4]
.text:00003F33                 sub     edx, [ebp+var_8]
.text:00003F36                 push    edx             ; size_t
.text:00003F37                 mov     eax, [ebp+var_1C]
.text:00003F3A                 add     eax, [ebp+var_8]
.text:00003F3D                 push    eax             ; void *
.text:00003F3E                 mov     ecx, [ebp+var_1C]
.text:00003F41                 push    ecx             ; void *
.text:00003F42                 call    _memmove
.text:00003F47                 add     esp, 0Ch
.text:00003F4A
.text:00003F4A loc_3F4A:                               ; CODE XREF: _bignum_decimal+18Ej
.text:00003F4A                 mov     edx, [ebp+arg_0]
.text:00003F4D                 mov     eax, [edx]
.text:00003F4F                 shl     eax, 2
.text:00003F52                 push    eax
.text:00003F53                 mov     ecx, [ebp+var_20]
.text:00003F56                 push    ecx
.text:00003F57                 call    _smemclr
.text:00003F5C                 add     esp, 8
.text:00003F5F                 mov     edx, [ebp+var_20]
.text:00003F62                 push    edx
.text:00003F63                 call    _safefree
.text:00003F68                 add     esp, 4
.text:00003F6B                 mov     eax, [ebp+var_1C]
.text:00003F6E                 pop     esi
.text:00003F6F                 add     esp, 20h
.text:00003F72                 cmp     ebp, esp
.text:00003F74                 call    __RTC_CheckEsp
.text:00003F79                 mov     esp, ebp
.text:00003F7B                 pop     ebp
.text:00003F7C                 retn
.text:00003F7C _bignum_decimal endp
.text:00003F7C
.text:00003F7C ; ---------------------------------------------------------------------------
.text:00003F7D                 align 10h
.text:00003F7D _text           ends
.text:00003F7D
.rtc$TMZ:00003F80 ; ===========================================================================
.rtc$TMZ:00003F80
.rtc$TMZ:00003F80 ; Segment type: Pure data
.rtc$TMZ:00003F80 ; Segment permissions: Read
.rtc$TMZ:00003F80 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003F80                 assume cs:_rtc$TMZ
.rtc$TMZ:00003F80                 ;org 3F80h
.rtc$TMZ:00003F80 ; COMDAT (pick any)
.rtc$TMZ:00003F80 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003F80 _rtc$TMZ        ends
.rtc$TMZ:00003F80
.rtc$IMZ:00003F84 ; ===========================================================================
.rtc$IMZ:00003F84
.rtc$IMZ:00003F84 ; Segment type: Pure data
.rtc$IMZ:00003F84 ; Segment permissions: Read
.rtc$IMZ:00003F84 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003F84                 assume cs:_rtc$IMZ
.rtc$IMZ:00003F84                 ;org 3F84h
.rtc$IMZ:00003F84 ; COMDAT (pick any)
.rtc$IMZ:00003F84 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003F84 _rtc$IMZ        ends
.rtc$IMZ:00003F84
UNDEF:00003F90 ; ===========================================================================
UNDEF:00003F90
UNDEF:00003F90 ; Segment type: Externs
UNDEF:00003F90 ; UNDEF
UNDEF:00003F90                 extrn __RTC_Shutdown:near
UNDEF:00003F90                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003F94                 extrn __RTC_InitBase:near
UNDEF:00003F94                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003F98 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00003F98                 extrn _memcpy:near      ; CODE XREF: _copybn+41p
UNDEF:00003F9C ; void __cdecl __noreturn abort()
UNDEF:00003F9C                 extrn _abort:near       ; CODE XREF: _copybn+27p
UNDEF:00003F9C                                         ; _newbn+48p ...
UNDEF:00003FA0                 extrn _safemalloc:near  ; CODE XREF: _copybn+16p
UNDEF:00003FA0                                         ; _newbn+37p ...
UNDEF:00003FA4                 extrn __RTC_CheckEsp:near ; CODE XREF: _copybn+51p
UNDEF:00003FA4                                         ; _freebn+2Ap ...
UNDEF:00003FA8                 extrn _safefree:near    ; CODE XREF: _freebn+20p
UNDEF:00003FA8                                         ; _modpow_simple+4D4p ...
UNDEF:00003FAC                 extrn _smemclr:near     ; CODE XREF: _freebn+14p
UNDEF:00003FAC                                         ; _modpow_simple+4C8p ...
UNDEF:00003FB0                 extrn __wassert:near    ; CODE XREF: _bn_power_2+20p
UNDEF:00003FB0                                         ; _newbn+26p ...
UNDEF:00003FB4 ; void *__cdecl memset(void *, int, size_t)
UNDEF:00003FB4                 extrn _memset:near      ; CODE XREF: _newbn+5Ep
UNDEF:00003FB8                 extrn __aullshr:near    ; CODE XREF: _internal_mul+315p
UNDEF:00003FB8                                         ; _internal_mul+42Ep ...
UNDEF:00003FBC                 extrn __allshl:near     ; CODE XREF: _internal_mod+10Dp
UNDEF:00003FBC                                         ; _internal_mod+191p ...
UNDEF:00003FC0                 extrn __allmul:near     ; CODE XREF: _bignum_mod_short+6Cp
UNDEF:00003FC0                                         ; _bignum_mod_short+77p
UNDEF:00003FC4                 extrn __aullrem:near    ; CODE XREF: _bignum_mod_short+5Dp
UNDEF:00003FC4                                         ; _bignum_mod_short+95p ...
UNDEF:00003FC8 ; void *__cdecl memmove(void *, const void *, size_t)
UNDEF:00003FC8                 extrn _memmove:near     ; CODE XREF: _bignum_decimal+1A2p
UNDEF:00003FCC                 extrn __aulldiv:near    ; CODE XREF: _bignum_decimal+129p
UNDEF:00003FCC
UNDEF:00003FCC
UNDEF:00003FCC                 end