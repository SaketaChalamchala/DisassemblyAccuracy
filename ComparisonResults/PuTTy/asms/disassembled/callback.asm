.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : C3578FF01A578EE1CA1058D5E3C3C00A
.bss:00000000 ; Input CRC32 : 126E0D60
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\callback.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "LIBCMTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000 .intel_syntax noprefix
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:00000000                 public _cbhead
.bss:00000000 _cbhead         dd ?                    ; DATA XREF: _queue_toplevel_callback+36r
.bss:00000000                                         ; _queue_toplevel_callback+71w ...
.bss:00000004                 public _cbtail
.bss:00000004 _cbtail         dd ?                    ; DATA XREF: _queue_toplevel_callback:loc_88r
.bss:00000004                                         ; _queue_toplevel_callback+61r ...
.bss:00000008                 public _notify_frontend
.bss:00000008 _notify_frontend dd ?                   ; DATA XREF: _request_callback_notifications+6w
.bss:00000008                                         ; _queue_toplevel_callback+2Dr ...
.bss:0000000C                 public _frontend
.bss:0000000C _frontend       dd ?                    ; DATA XREF: _request_callback_notifications+Ew
.bss:0000000C                                         ; _queue_toplevel_callback+41r
.bss:0000000C _bss            ends
.bss:0000000C
.text:00000010 ; ===========================================================================
.text:00000010
.text:00000010 ; Segment type: Pure code
.text:00000010 ; Segment permissions: Read/Execute
.text:00000010 _text           segment para public 'CODE' use32
.text:00000010                 assume cs:_text
.text:00000010                 ;org 10h
.text:00000010                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000010
.text:00000010 ; =============== S U B R O U T I N E =======================================
.text:00000010
.text:00000010 ; Attributes: bp-based frame
.text:00000010
.text:00000010                 public _request_callback_notifications
.text:00000010 _request_callback_notifications proc near
.text:00000010
.text:00000010 arg_0           = dword ptr  8
.text:00000010 arg_4           = dword ptr  0Ch
.text:00000010
.text:00000010                 push    ebp
.text:00000011                 mov     ebp, esp
.text:00000013                 mov     eax, [ebp+arg_0]
.text:00000016                 mov     ds:_notify_frontend, eax
.text:0000001B                 mov     ecx, [ebp+arg_4]
.text:0000001E                 mov     ds:_frontend, ecx
.text:00000024                 pop     ebp
.text:00000025                 retn
.text:00000025 _request_callback_notifications endp
.text:00000025
.text:00000025 ; ---------------------------------------------------------------------------
.text:00000026                 align 10h
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030                 public _queue_toplevel_callback
.text:00000030 _queue_toplevel_callback proc near
.text:00000030
.text:00000030 var_4           = dword ptr -4
.text:00000030 arg_0           = dword ptr  8
.text:00000030 arg_4           = dword ptr  0Ch
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 push    ecx
.text:00000034                 push    esi
.text:00000035                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000003C                 push    0Ch
.text:0000003E                 push    1
.text:00000040                 call    _safemalloc
.text:00000045                 add     esp, 8
.text:00000048                 mov     [ebp+var_4], eax
.text:0000004B                 mov     eax, [ebp+var_4]
.text:0000004E                 mov     ecx, [ebp+arg_0]
.text:00000051                 mov     [eax+4], ecx
.text:00000054                 mov     edx, [ebp+var_4]
.text:00000057                 mov     eax, [ebp+arg_4]
.text:0000005A                 mov     [edx+8], eax
.text:0000005D                 cmp     ds:_notify_frontend, 0
.text:00000064                 jz      short loc_88
.text:00000066                 cmp     ds:_cbhead, 0
.text:0000006D                 jnz     short loc_88
.text:0000006F                 mov     esi, esp
.text:00000071                 mov     ecx, ds:_frontend
.text:00000077                 push    ecx
.text:00000078                 call    ds:_notify_frontend
.text:0000007E                 add     esp, 4
.text:00000081                 cmp     esi, esp
.text:00000083                 call    __RTC_CheckEsp
.text:00000088
.text:00000088 loc_88:                                 ; CODE XREF: _queue_toplevel_callback+34j
.text:00000088                                         ; _queue_toplevel_callback+3Dj
.text:00000088                 cmp     ds:_cbtail, 0
.text:0000008F                 jz      short loc_9E
.text:00000091                 mov     edx, ds:_cbtail
.text:00000097                 mov     eax, [ebp+var_4]
.text:0000009A                 mov     [edx], eax
.text:0000009C                 jmp     short loc_A7
.text:0000009E ; ---------------------------------------------------------------------------
.text:0000009E
.text:0000009E loc_9E:                                 ; CODE XREF: _queue_toplevel_callback+5Fj
.text:0000009E                 mov     ecx, [ebp+var_4]
.text:000000A1                 mov     ds:_cbhead, ecx
.text:000000A7
.text:000000A7 loc_A7:                                 ; CODE XREF: _queue_toplevel_callback+6Cj
.text:000000A7                 mov     edx, [ebp+var_4]
.text:000000AA                 mov     ds:_cbtail, edx
.text:000000B0                 mov     eax, [ebp+var_4]
.text:000000B3                 mov     dword ptr [eax], 0
.text:000000B9                 pop     esi
.text:000000BA                 add     esp, 4
.text:000000BD                 cmp     ebp, esp
.text:000000BF                 call    __RTC_CheckEsp
.text:000000C4                 mov     esp, ebp
.text:000000C6                 pop     ebp
.text:000000C7                 retn
.text:000000C7 _queue_toplevel_callback endp
.text:000000C7
.text:000000C7 ; ---------------------------------------------------------------------------
.text:000000C8                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0                 public _run_toplevel_callbacks
.text:000000D0 _run_toplevel_callbacks proc near
.text:000000D0
.text:000000D0 var_4           = dword ptr -4
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    ecx
.text:000000D4                 push    esi
.text:000000D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000DC                 cmp     ds:_cbhead, 0
.text:000000E3                 jz      short loc_131
.text:000000E5                 mov     eax, ds:_cbhead
.text:000000EA                 mov     [ebp+var_4], eax
.text:000000ED                 mov     esi, esp
.text:000000EF                 mov     ecx, [ebp+var_4]
.text:000000F2                 mov     edx, [ecx+8]
.text:000000F5                 push    edx
.text:000000F6                 mov     eax, [ebp+var_4]
.text:000000F9                 mov     ecx, [eax+4]
.text:000000FC                 call    ecx
.text:000000FE                 add     esp, 4
.text:00000101                 cmp     esi, esp
.text:00000103                 call    __RTC_CheckEsp
.text:00000108                 mov     edx, [ebp+var_4]
.text:0000010B                 mov     eax, [edx]
.text:0000010D                 mov     ds:_cbhead, eax
.text:00000112                 mov     ecx, [ebp+var_4]
.text:00000115                 push    ecx
.text:00000116                 call    _safefree
.text:0000011B                 add     esp, 4
.text:0000011E                 cmp     ds:_cbhead, 0
.text:00000125                 jnz     short loc_131
.text:00000127                 mov     ds:_cbtail, 0
.text:00000131
.text:00000131 loc_131:                                ; CODE XREF: _run_toplevel_callbacks+13j
.text:00000131                                         ; _run_toplevel_callbacks+55j
.text:00000131                 pop     esi
.text:00000132                 add     esp, 4
.text:00000135                 cmp     ebp, esp
.text:00000137                 call    __RTC_CheckEsp
.text:0000013C                 mov     esp, ebp
.text:0000013E                 pop     ebp
.text:0000013F                 retn
.text:0000013F _run_toplevel_callbacks endp
.text:0000013F
.text:00000140
.text:00000140 ; =============== S U B R O U T I N E =======================================
.text:00000140
.text:00000140 ; Attributes: bp-based frame
.text:00000140
.text:00000140                 public _toplevel_callback_pending
.text:00000140 _toplevel_callback_pending proc near
.text:00000140                 push    ebp
.text:00000141                 mov     ebp, esp
.text:00000143                 xor     eax, eax
.text:00000145                 cmp     ds:_cbhead, 0
.text:0000014C                 setnz   al
.text:0000014F                 pop     ebp
.text:00000150                 retn
.text:00000150 _toplevel_callback_pending endp
.text:00000150
.text:00000150 ; ---------------------------------------------------------------------------
.text:00000151                 align 4
.text:00000151 _text           ends
.text:00000151
.rtc$TMZ:00000154 ; ===========================================================================
.rtc$TMZ:00000154
.rtc$TMZ:00000154 ; Segment type: Pure data
.rtc$TMZ:00000154 ; Segment permissions: Read
.rtc$TMZ:00000154 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000154                 assume cs:_rtc$TMZ
.rtc$TMZ:00000154                 ;org 154h
.rtc$TMZ:00000154 ; COMDAT (pick any)
.rtc$TMZ:00000154 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000154 _rtc$TMZ        ends
.rtc$TMZ:00000154
.rtc$IMZ:00000158 ; ===========================================================================
.rtc$IMZ:00000158
.rtc$IMZ:00000158 ; Segment type: Pure data
.rtc$IMZ:00000158 ; Segment permissions: Read
.rtc$IMZ:00000158 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000158                 assume cs:_rtc$IMZ
.rtc$IMZ:00000158                 ;org 158h
.rtc$IMZ:00000158 ; COMDAT (pick any)
.rtc$IMZ:00000158 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000158 _rtc$IMZ        ends
.rtc$IMZ:00000158
UNDEF:00000160 ; ===========================================================================
UNDEF:00000160
UNDEF:00000160 ; Segment type: Externs
UNDEF:00000160 ; UNDEF
UNDEF:00000160                 extrn __RTC_Shutdown:near
UNDEF:00000160                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000164                 extrn __RTC_InitBase:near
UNDEF:00000164                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000168                 extrn _safemalloc:near  ; CODE XREF: _queue_toplevel_callback+10p
UNDEF:0000016C                 extrn __RTC_CheckEsp:near
UNDEF:0000016C                                         ; CODE XREF: _queue_toplevel_callback+53p
UNDEF:0000016C                                         ; _queue_toplevel_callback+8Fp ...
UNDEF:00000170                 extrn _safefree:near    ; CODE XREF: _run_toplevel_callbacks+46p
UNDEF:00000170
UNDEF:00000170
UNDEF:00000170                 end