.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 251E90A3960008E743BC8920F48885C0
.data:00000000 ; Input CRC32 : 7E7DE0C4
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\sshpubk.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000 .intel_syntax noprefix
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG87092        db 'error reading file',0 ; DATA XREF: _loadrsakey_main+81o
.data:00000013                 align 4
.data:00000014 $SG87094        db 'file format error',0 ; DATA XREF: _loadrsakey_main+99o
.data:00000014                                         ; .text:00003650o
.data:00000026                 align 4
.data:00000028 $SG87128        db 'wrong passphrase',0 ; DATA XREF: _loadrsakey_main+43Co
.data:00000028                                         ; .text:00002248o ...
.data:00000039                 align 4
.data:0000003C $SG87134        db 'rsa_verify failed',0 ; DATA XREF: _loadrsakey_main+5ADo
.data:0000004E                 align 10h
.data:00000050 ; char _SG87150[]
.data:00000050 $SG87150        db 'rb',0               ; DATA XREF: _loadrsakey+2Eo
.data:00000053                 align 4
.data:00000054 $SG87152        db 'can',27h,'t open file',0 ; DATA XREF: _loadrsakey+4Ao
.data:00000064 ; char _SG87155[]
.data:00000064 $SG87155        db 'SSH PRIVATE KEY FILE FORMAT 1.1',0Ah,0
.data:00000064                                         ; DATA XREF: _loadrsakey+69o
.data:00000064                                         ; .data:$SG87709o
.data:00000085                 align 4
.data:00000088 $SG87158        db 'not an SSH-1 RSA file',0
.data:00000088                                         ; DATA XREF: _loadrsakey:loc_6EEo
.data:0000009E                 align 10h
.data:000000A0 ; char _SG87168[]
.data:000000A0 $SG87168        db 'rb',0               ; DATA XREF: _rsakey_encrypted+20o
.data:000000A3                 align 4
.data:000000A4 ; char _SG87171[]
.data:000000A4 $SG87171        db 'SSH PRIVATE KEY FILE FORMAT 1.1',0Ah,0
.data:000000A4                                         ; DATA XREF: _rsakey_encrypted+56o
.data:000000C5                 align 4
.data:000000C8 ; char _SG87193[]
.data:000000C8 $SG87193        db 'rb',0               ; DATA XREF: _rsakey_pubblob+49o
.data:000000CB                 align 4
.data:000000CC $SG87195        db 'can',27h,'t open file',0 ; DATA XREF: _rsakey_pubblob+65o
.data:000000DC ; char _SG87198[]
.data:000000DC $SG87198        db 'SSH PRIVATE KEY FILE FORMAT 1.1',0Ah,0
.data:000000DC                                         ; DATA XREF: _rsakey_pubblob+8Ao
.data:000000FD                 align 10h
.data:00000100 $SG87203        db 'not an SSH-1 RSA file',0
.data:00000100                                         ; DATA XREF: _rsakey_pubblob:loc_FCBo
.data:00000116                 align 4
.data:00000118 $SG87219        db 'SSH PRIVATE KEY FILE FORMAT 1.1',0Ah,0
.data:00000118                                         ; DATA XREF: _saversakey+38o
.data:00000139                 align 4
.data:0000013C ; char _SG87243[]
.data:0000013C $SG87243        db 'wb',0               ; DATA XREF: _saversakey:loc_1496o
.data:0000013F                 align 10h
.data:00000140 ; char _SG87323[]
.data:00000140 $SG87323        db 'ssh-rsa',0          ; DATA XREF: _find_pubkey_alg+3o
.data:00000148 ; char _SG87326[]
.data:00000148 $SG87326        db 'ssh-dss',0          ; DATA XREF: _find_pubkey_alg:loc_15B9o
.data:00000150 ; char _SG87359[]
.data:00000150 $SG87359        db 'rb',0               ; DATA XREF: _ssh2_load_userkey+8Fo
.data:00000153                 align 4
.data:00000154 $SG87361        db 'can',27h,'t open file',0
.data:00000154                                         ; DATA XREF: _ssh2_load_userkey+ABo
.data:00000164 ; char _SG87365[]
.data:00000164 $SG87365        db 'PuTTY-User-Key-File-2',0
.data:00000164                                         ; DATA XREF: _ssh2_load_userkey:loc_16BBo
.data:0000017A                 align 4
.data:0000017C ; char _SG87368[]
.data:0000017C $SG87368        db 'PuTTY-User-Key-File-1',0
.data:0000017C                                         ; DATA XREF: _ssh2_load_userkey:loc_16DCo
.data:00000192                 align 4
.data:00000194 ; char _SG87371[]
.data:00000194 $SG87371        db 'PuTTY-User-Key-File-',0
.data:00000194                                         ; DATA XREF: _ssh2_load_userkey+11Co
.data:000001A9                 align 4
.data:000001AC $SG87372        db 'PuTTY key format too new',0
.data:000001AC                                         ; DATA XREF: _ssh2_load_userkey+131o
.data:000001C5                 align 4
.data:000001C8 $SG87374        db 'not a PuTTY SSH-2 private key',0
.data:000001C8                                         ; DATA XREF: _ssh2_load_userkey:loc_172Ao
.data:000001E6                 align 4
.data:000001E8 $SG87375        db 'file format error',0
.data:000001E8                                         ; DATA XREF: _ssh2_load_userkey:loc_1739o
.data:000001FA                 align 4
.data:000001FC ; char _SG87381[]
.data:000001FC $SG87381        db 'Encryption',0       ; DATA XREF: _ssh2_load_userkey+1BBo
.data:00000207                 align 4
.data:00000208 ; char _SG87385[]
.data:00000208 $SG87385        db 'aes256-cbc',0       ; DATA XREF: _ssh2_load_userkey:loc_17D7o
.data:00000213                 align 4
.data:00000214 ; char _SG87388[]
.data:00000214 $SG87388        db 'none',0             ; DATA XREF: _ssh2_load_userkey:loc_17FCo
.data:00000219                 align 4
.data:0000021C ; char _SG87392[]
.data:0000021C $SG87392        db 'Comment',0          ; DATA XREF: _ssh2_load_userkey+252o
.data:00000224 ; char _SG87397[]
.data:00000224 $SG87397        db 'Public-Lines',0     ; DATA XREF: _ssh2_load_userkey+29Ao
.data:00000231                 align 4
.data:00000234 ; char _SG87404[]
.data:00000234 $SG87404        db 'Private-Lines',0    ; DATA XREF: _ssh2_load_userkey+31Fo
.data:00000242                 align 4
.data:00000244 ; char _SG87411[]
.data:00000244 $SG87411        db 'Private-MAC',0      ; DATA XREF: _ssh2_load_userkey:loc_1998o
.data:00000250 ; char _SG87416[]
.data:00000250 $SG87416        db 'Private-Hash',0     ; DATA XREF: _ssh2_load_userkey:loc_19D0o
.data:0000025D                 align 10h
.data:00000260 $SG87427        db    0                 ; DATA XREF: _ssh2_load_userkey+4E2o
.data:00000261                 db    0
.data:00000262                 db    0
.data:00000263                 db    1
.data:00000264                 db    0
.data:00000265                 db    0
.data:00000266                 db    0
.data:00000267                 db    0
.data:00000268 $SG87465        db 'putty-private-key-file-mac-key',0
.data:00000268                                         ; DATA XREF: _ssh2_load_userkey+8ECo
.data:00000287                 align 4
.data:00000288 ; char _SG87472[]
.data:00000288 $SG87472        db '%02x',0             ; DATA XREF: _ssh2_load_userkey+A18o
.data:0000028D                 align 10h
.data:00000290 $SG87475        db 'wrong passphrase',0 ; DATA XREF: _ssh2_load_userkey+A4Fo
.data:000002A1                 align 4
.data:000002A4 $SG87477        db 'MAC failed',0       ; DATA XREF: _ssh2_load_userkey:loc_204Ao
.data:000002AF                 align 10h
.data:000002B0 $SG87484        db 'createkey failed',0 ; DATA XREF: _ssh2_load_userkey+B07o
.data:000002C1                 align 4
.data:000002C4 ; char _SG87516[]
.data:000002C4 $SG87516        db 'rb',0               ; DATA XREF: _ssh2_userkey_loadpub+2Eo
.data:000002C7                 align 4
.data:000002C8 $SG87518        db 'can',27h,'t open file',0
.data:000002C8                                         ; DATA XREF: _ssh2_userkey_loadpub+4Ao
.data:000002D8 ; char _SG87522[]
.data:000002D8 $SG87522        db 'PuTTY-User-Key-File-2',0
.data:000002D8                                         ; DATA XREF: _ssh2_userkey_loadpub+6Ao
.data:000002EE                 align 10h
.data:000002F0 ; char _SG87523[]
.data:000002F0 $SG87523        db 'PuTTY-User-Key-File-1',0
.data:000002F0                                         ; DATA XREF: _ssh2_userkey_loadpub+7Fo
.data:00000306                 align 4
.data:00000308 ; char _SG87525[]
.data:00000308 $SG87525        db 'PuTTY-User-Key-File-',0
.data:00000308                                         ; DATA XREF: _ssh2_userkey_loadpub+96o
.data:0000031D                 align 10h
.data:00000320 $SG87526        db 'PuTTY key format too new',0
.data:00000320                                         ; DATA XREF: _ssh2_userkey_loadpub+ABo
.data:00000339                 align 4
.data:0000033C $SG87528        db 'not a PuTTY SSH-2 private key',0
.data:0000033C                                         ; DATA XREF: _ssh2_userkey_loadpub:loc_26BCo
.data:0000035A                 align 4
.data:0000035C $SG87529        db 'file format error',0
.data:0000035C                                         ; DATA XREF: _ssh2_userkey_loadpub:loc_26C8o
.data:0000036E                 align 10h
.data:00000370 ; char _SG87535[]
.data:00000370 $SG87535        db 'Encryption',0       ; DATA XREF: _ssh2_userkey_loadpub+127o
.data:0000037B                 align 4
.data:0000037C ; char _SG87540[]
.data:0000037C $SG87540        db 'Comment',0          ; DATA XREF: _ssh2_userkey_loadpub+17Bo
.data:00000384 ; char _SG87547[]
.data:00000384 $SG87547        db 'Public-Lines',0     ; DATA XREF: _ssh2_userkey_loadpub+1DFo
.data:00000391                 align 4
.data:00000394 ; char _SG87570[]
.data:00000394 $SG87570        db 'rb',0               ; DATA XREF: _ssh2_userkey_encrypted:loc_2947o
.data:00000397                 align 4
.data:00000398 ; char _SG87574[]
.data:00000398 $SG87574        db 'PuTTY-User-Key-File-2',0
.data:00000398                                         ; DATA XREF: _ssh2_userkey_encrypted+66o
.data:000003AE                 align 10h
.data:000003B0 ; char _SG87575[]
.data:000003B0 $SG87575        db 'PuTTY-User-Key-File-1',0
.data:000003B0                                         ; DATA XREF: _ssh2_userkey_encrypted+7Bo
.data:000003C6                 align 4
.data:000003C8 ; char _SG87580[]
.data:000003C8 $SG87580        db 'Encryption',0       ; DATA XREF: _ssh2_userkey_encrypted+EBo
.data:000003D3                 align 4
.data:000003D4 ; char _SG87585[]
.data:000003D4 $SG87585        db 'Comment',0          ; DATA XREF: _ssh2_userkey_encrypted+14Fo
.data:000003DC ; char _SG87591[]
.data:000003DC $SG87591        db 'aes256-cbc',0       ; DATA XREF: _ssh2_userkey_encrypted+1E2o
.data:000003E7                 align 4
.data:000003E8 $SG87638        db 'aes256-cbc',0       ; DATA XREF: _ssh2_save_userkey+A0o
.data:000003F3                 align 4
.data:000003F4 $SG87640        db 'none',0             ; DATA XREF: _ssh2_save_userkey:loc_2D68o
.data:000003F9                 align 4
.data:000003FC $SG87644:                               ; DATA XREF: _ssh2_save_userkey+135o
.data:000003FC                 unicode 0, <..\..\..\sshpubk.c>,0
.data:00000422                 align 4
.data:00000424 $SG87655        db 'putty-private-key-file-mac-key',0
.data:00000424                                         ; DATA XREF: _ssh2_save_userkey+19Bo
.data:00000443                 align 4
.data:00000444 ; char _SG87684[]
.data:00000444 $SG87684        dd offset $SG87155+13h  ; DATA XREF: _ssh2_save_userkey:loc_31E8o
.data:00000444                                         ; "E FORMAT 1.1\n"
.data:00000448 $SG87645:                               ; DATA XREF: _ssh2_save_userkey+13Ao
.data:00000448                 unicode 0, <priv_encrypted_len - priv_blob_len >
.data:00000448                 dw 3Ch
.data:00000448                 unicode 0, < 20>,0
.data:00000498 $SG87683        db    0                 ; DATA XREF: _ssh2_save_userkey+4B6o
.data:00000499                 db    0
.data:0000049A                 db    0
.data:0000049B                 db    1
.data:0000049C                 db    0
.data:0000049D                 db    0
.data:0000049E                 db    0
.data:0000049F                 db    0
.data:000004A0 ; char _SG87686[]
.data:000004A0 $SG87686        db 'PuTTY-User-Key-File-2: %s',0Ah,0
.data:000004A0                                         ; DATA XREF: _ssh2_save_userkey+5A0o
.data:000004BB                 align 4
.data:000004BC ; char _SG87687[]
.data:000004BC $SG87687        db 'Encryption: %s',0Ah,0
.data:000004BC                                         ; DATA XREF: _ssh2_save_userkey+5B5o
.data:000004CC ; char _SG87688[]
.data:000004CC $SG87688        db 'Comment: %s',0Ah,0  ; DATA XREF: _ssh2_save_userkey+5CDo
.data:000004D9                 align 4
.data:000004DC ; char _SG87689[]
.data:000004DC $SG87689        db 'Public-Lines: %d',0Ah,0
.data:000004DC                                         ; DATA XREF: _ssh2_save_userkey+5EBo
.data:000004EE                 align 10h
.data:000004F0 ; char _SG87690[]
.data:000004F0 $SG87690        db 'Private-Lines: %d',0Ah,0
.data:000004F0                                         ; DATA XREF: _ssh2_save_userkey+61Fo
.data:00000503                 align 4
.data:00000504 ; char _SG87691[]
.data:00000504 $SG87691        db 'Private-MAC: ',0    ; DATA XREF: _ssh2_save_userkey+646o
.data:00000512                 align 4
.data:00000514 ; char _SG87695[]
.data:00000514 $SG87695        db '%02x',0             ; DATA XREF: _ssh2_save_userkey+678o
.data:00000519                 align 4
.data:0000051C ; char _SG87696[]
.data:0000051C $SG87696        db 0Ah,0                ; DATA XREF: _ssh2_save_userkey:loc_3343o
.data:0000051E                 align 10h
.data:00000520 $SG87703        dd 54547550h            ; DATA XREF: _key_type+27r
.data:00000524 dword_524       dd 73552D59h            ; DATA XREF: _key_type+2Fr
.data:00000528 dword_528       dd 4B2D7265h            ; DATA XREF: _key_type+38r
.data:0000052C dword_52C       dd 462D7965h            ; DATA XREF: _key_type+41r
.data:00000530 dword_530       dd 2D656C69h            ; DATA XREF: _key_type+49r
.data:00000534 byte_534        db 0                    ; DATA XREF: _key_type+52r
.data:00000535                 align 4
.data:00000538 $SG87705        db '---- BEGIN SSH2 ENCRYPTED PRIVAT',0
.data:00000538                                         ; DATA XREF: _key_type+60o
.data:00000559                 align 4
.data:0000055C $SG87707        dd 2D2D2D2Dh            ; DATA XREF: _key_type+6Br
.data:00000560 dword_560       dd 4745422Dh            ; DATA XREF: _key_type+76r
.data:00000564 dword_564       dd 204E49h              ; DATA XREF: _key_type+82r
.data:00000568 ; char _SG87709[]
.data:00000568 $SG87709        dd offset $SG87155+0Eh  ; DATA XREF: _key_type+8Eo
.data:00000568                                         ; "Y FILE FORMAT 1.1\n"
.data:0000056C $SG87714        db 'SSH PRIVATE KEY FILE FORMAT 1.1',0Ah,0
.data:0000056C                                         ; DATA XREF: _key_type+F9o
.data:0000058D                 align 10h
.data:00000590 $SG87726        db 'unable to open file',0
.data:00000590                                         ; DATA XREF: _key_type_to_str:$LN7_1o
.data:000005A4 $SG87728        db 'not a private key',0
.data:000005A4                                         ; DATA XREF: _key_type_to_str:$LN6_0o
.data:000005B6                 align 4
.data:000005B8 $SG87730        db 'SSH-1 private key',0
.data:000005B8                                         ; DATA XREF: _key_type_to_str:$LN5_0o
.data:000005CA                 align 4
.data:000005CC $SG87732        db 'PuTTY SSH-2 private key',0
.data:000005CC                                         ; DATA XREF: _key_type_to_str:$LN4o
.data:000005E4 $SG87734        db 'OpenSSH SSH-2 private key',0
.data:000005E4                                         ; DATA XREF: _key_type_to_str:$LN3o
.data:000005FE                 align 10h
.data:00000600 $SG87736        db 'ssh.com SSH-2 private key',0
.data:00000600                                         ; DATA XREF: _key_type_to_str:$LN2o
.data:0000061A                 align 4
.data:0000061C $SG87738        db 'INTERNAL ERROR',0   ; DATA XREF: _key_type_to_str:loc_36EFo
.data:0000062B                 align 4
.data:0000062B _data           ends
.data:0000062B
.bss:0000062C ; ===========================================================================
.bss:0000062C
.bss:0000062C ; Segment type: Uninitialized
.bss:0000062C ; Segment permissions: Read/Write
.bss:0000062C _bss            segment dword public 'BSS' use32
.bss:0000062C                 assume cs:_bss
.bss:0000062C                 ;org 62Ch
.bss:0000062C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000062C                 public _ssh2_wrong_passphrase
.bss:0000062C _ssh2_wrong_passphrase db    ? ;        ; DATA XREF: _ssh2_load_userkey+A59o
.bss:0000062D                 db    ? ;
.bss:0000062E                 db    ? ;
.bss:0000062F                 db    ? ;
.bss:00000630                 db    ? ;
.bss:00000631                 db    ? ;
.bss:00000632                 db    ? ;
.bss:00000633                 db    ? ;
.bss:00000634                 db    ? ;
.bss:00000635                 db    ? ;
.bss:00000636                 db    ? ;
.bss:00000637                 db    ? ;
.bss:00000638 $SG87426        db    ? ;               ; DATA XREF: _ssh2_load_userkey+48Do
.bss:00000639                 db    ? ;
.bss:0000063A                 db    ? ;
.bss:0000063B                 db    ? ;
.bss:0000063C                 db    ? ;
.bss:0000063D                 db    ? ;
.bss:0000063E                 db    ? ;
.bss:0000063F                 db    ? ;
.bss:00000640 $SG87682        db    ? ;               ; DATA XREF: _ssh2_save_userkey+464o
.bss:00000641                 db    ? ;
.bss:00000642                 db    ? ;
.bss:00000643                 db    ? ;
.bss:00000644                 db    ? ;
.bss:00000645                 align 4
.bss:00000645 _bss            ends
.bss:00000645
.text:00000648 ; ===========================================================================
.text:00000648
.text:00000648 ; Segment type: Pure code
.text:00000648 ; Segment permissions: Read/Execute
.text:00000648 _text           segment para public 'CODE' use32
.text:00000648                 assume cs:_text
.text:00000648                 ;org 648h
.text:00000648                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000648
.text:00000648 ; =============== S U B R O U T I N E =======================================
.text:00000648
.text:00000648 ; Attributes: bp-based frame
.text:00000648
.text:00000648 ; int __cdecl loadrsakey(int, int, char *, int)
.text:00000648                 public _loadrsakey
.text:00000648 _loadrsakey     proc near
.text:00000648
.text:00000648 var_60          = byte ptr -60h
.text:00000648 var_5C          = dword ptr -5Ch
.text:00000648 var_54          = dword ptr -54h
.text:00000648 var_4C          = byte ptr -4Ch
.text:00000648 var_8           = dword ptr -8
.text:00000648 var_4           = dword ptr -4
.text:00000648 arg_0           = dword ptr  8
.text:00000648 arg_4           = dword ptr  0Ch
.text:00000648 arg_8           = dword ptr  10h
.text:00000648 arg_C           = dword ptr  14h
.text:00000648
.text:00000648                 push    ebp
.text:00000649                 mov     ebp, esp
.text:0000064B                 sub     esp, 60h
.text:0000064E                 push    edi
.text:0000064F                 lea     edi, [ebp+var_60]
.text:00000652                 mov     ecx, 18h
.text:00000657                 mov     eax, 0CCCCCCCCh
.text:0000065C                 rep stosd
.text:0000065E                 mov     eax, dword ptr ds:___security_cookie
.text:00000663                 xor     eax, ebp
.text:00000665                 mov     [ebp+var_4], eax
.text:00000668                 mov     [ebp+var_54], 0
.text:0000066F                 mov     [ebp+var_5C], 0
.text:00000676                 push    offset $SG87150 ; "rb"
.text:0000067B                 mov     eax, [ebp+arg_0]
.text:0000067E                 mov     ecx, [eax]
.text:00000680                 push    ecx             ; char *
.text:00000681                 call    _fopen
.text:00000686                 add     esp, 8
.text:00000689                 mov     [ebp+var_8], eax
.text:0000068C                 cmp     [ebp+var_8], 0
.text:00000690                 jnz     short loc_69B
.text:00000692                 mov     [ebp+var_5C], offset $SG87152 ; "can't open file"
.text:00000699                 jmp     short $end$87153
.text:0000069B ; ---------------------------------------------------------------------------
.text:0000069B
.text:0000069B loc_69B:                                ; CODE XREF: _loadrsakey+48j
.text:0000069B                 mov     edx, [ebp+var_8]
.text:0000069E                 push    edx             ; FILE *
.text:0000069F                 push    40h ; '@'       ; int
.text:000006A1                 lea     eax, [ebp+var_4C]
.text:000006A4                 push    eax             ; char *
.text:000006A5                 call    _fgets
.text:000006AA                 add     esp, 0Ch
.text:000006AD                 test    eax, eax
.text:000006AF                 jz      short loc_6EE
.text:000006B1                 push    offset $SG87155 ; "SSH PRIVATE KEY FILE FORMAT 1.1\n"
.text:000006B6                 lea     ecx, [ebp+var_4C]
.text:000006B9                 push    ecx             ; char *
.text:000006BA                 call    _strcmp
.text:000006BF                 add     esp, 8
.text:000006C2                 test    eax, eax
.text:000006C4                 jnz     short loc_6EE
.text:000006C6                 lea     edx, [ebp+var_5C]
.text:000006C9                 push    edx             ; int
.text:000006CA                 mov     eax, [ebp+arg_8]
.text:000006CD                 push    eax             ; char *
.text:000006CE                 push    0               ; int
.text:000006D0                 push    0               ; int
.text:000006D2                 mov     ecx, [ebp+arg_4]
.text:000006D5                 push    ecx             ; int
.text:000006D6                 mov     edx, [ebp+var_8]
.text:000006D9                 push    edx             ; FILE *
.text:000006DA                 call    _loadrsakey_main
.text:000006DF                 add     esp, 18h
.text:000006E2                 mov     [ebp+var_54], eax
.text:000006E5                 mov     [ebp+var_8], 0
.text:000006EC                 jmp     short $end$87153
.text:000006EE ; ---------------------------------------------------------------------------
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: _loadrsakey+67j
.text:000006EE                                         ; _loadrsakey+7Cj
.text:000006EE                 mov     [ebp+var_5C], offset $SG87158 ; "not an SSH-1 RSA file"
.text:000006F5
.text:000006F5 $end$87153:                             ; CODE XREF: _loadrsakey+51j
.text:000006F5                                         ; _loadrsakey+A4j
.text:000006F5                 cmp     [ebp+var_8], 0
.text:000006F9                 jz      short loc_707
.text:000006FB                 mov     eax, [ebp+var_8]
.text:000006FE                 push    eax             ; FILE *
.text:000006FF                 call    _fclose
.text:00000704                 add     esp, 4
.text:00000707
.text:00000707 loc_707:                                ; CODE XREF: _loadrsakey+B1j
.text:00000707                 cmp     [ebp+var_54], 1
.text:0000070B                 jz      short loc_71B
.text:0000070D                 cmp     [ebp+arg_C], 0
.text:00000711                 jz      short loc_71B
.text:00000713                 mov     ecx, [ebp+arg_C]
.text:00000716                 mov     edx, [ebp+var_5C]
.text:00000719                 mov     [ecx], edx
.text:0000071B
.text:0000071B loc_71B:                                ; CODE XREF: _loadrsakey+C3j
.text:0000071B                                         ; _loadrsakey+C9j
.text:0000071B                 mov     eax, [ebp+var_54]
.text:0000071E                 push    edx
.text:0000071F                 mov     ecx, ebp
.text:00000721                 push    eax
.text:00000722                 lea     edx, $LN10
.text:00000728                 call    @_RTC_CheckStackVars@8
.text:0000072D                 pop     eax
.text:0000072E                 pop     edx
.text:0000072F                 pop     edi
.text:00000730                 mov     ecx, [ebp+var_4]
.text:00000733                 xor     ecx, ebp
.text:00000735                 call    @__security_check_cookie@4
.text:0000073A                 add     esp, 60h
.text:0000073D                 cmp     ebp, esp
.text:0000073F                 call    __RTC_CheckEsp
.text:00000744                 mov     esp, ebp
.text:00000746                 pop     ebp
.text:00000747                 retn
.text:00000747 _loadrsakey     endp
.text:00000747
.text:00000747 ; ---------------------------------------------------------------------------
.text:00000748 $LN10           dd 2                    ; DATA XREF: _loadrsakey+DAo
.text:0000074C                 dd offset $LN9
.text:00000750 $LN9            dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:0000074Co
.text:00000758                 dd offset $LN7          ; "buf"
.text:0000075C                 dd 0FFFFFFA4h, 4
.text:00000764                 dd offset $LN8          ; "error"
.text:00000768 $LN8            db 'error',0            ; DATA XREF: .text:00000764o
.text:0000076E $LN7            db 'buf',0              ; DATA XREF: .text:00000758o
.text:00000772                 align 8
.text:00000778
.text:00000778 ; =============== S U B R O U T I N E =======================================
.text:00000778
.text:00000778 ; Attributes: bp-based frame
.text:00000778
.text:00000778 ; int __cdecl loadrsakey_main(FILE *, int, int, int, char *, int)
.text:00000778 _loadrsakey_main proc near              ; CODE XREF: _loadrsakey+92p
.text:00000778                                         ; _rsakey_encrypted+7Dp ...
.text:00000778
.text:00000778 var_40A0        = dword ptr -40A0h
.text:00000778 var_4098        = byte ptr -4098h
.text:00000778 var_4038        = dword ptr -4038h
.text:00000778 var_4034        = dword ptr -4034h
.text:00000778 var_4030        = dword ptr -4030h
.text:00000778 var_402C        = dword ptr -402Ch
.text:00000778 var_4028        = dword ptr -4028h
.text:00000778 var_4020        = byte ptr -4020h
.text:00000778 var_4008        = byte ptr -4008h
.text:00000778 var_4007        = byte ptr -4007h
.text:00000778 var_4006        = byte ptr -4006h
.text:00000778 var_4005        = byte ptr -4005h
.text:00000778 var_4           = dword ptr -4
.text:00000778 arg_0           = dword ptr  8
.text:00000778 arg_4           = dword ptr  0Ch
.text:00000778 arg_8           = dword ptr  10h
.text:00000778 arg_C           = dword ptr  14h
.text:00000778 arg_10          = dword ptr  18h
.text:00000778 arg_14          = dword ptr  1Ch
.text:00000778
.text:00000778                 push    ebp
.text:00000779                 mov     ebp, esp
.text:0000077B                 mov     eax, 40A0h
.text:00000780                 call    __chkstk
.text:00000785                 push    edi
.text:00000786                 lea     edi, [ebp+var_40A0]
.text:0000078C                 mov     ecx, 1028h
.text:00000791                 mov     eax, 0CCCCCCCCh
.text:00000796                 rep stosd
.text:00000798                 mov     eax, dword ptr ds:___security_cookie
.text:0000079D                 xor     eax, ebp
.text:0000079F                 mov     [ebp+var_4], eax
.text:000007A2                 mov     [ebp+var_4038], 0
.text:000007AC                 mov     eax, [ebp+arg_14]
.text:000007AF                 mov     dword ptr [eax], 0
.text:000007B5                 mov     ecx, [ebp+arg_0]
.text:000007B8                 push    ecx             ; FILE *
.text:000007B9                 push    4000h           ; size_t
.text:000007BE                 push    1               ; size_t
.text:000007C0                 lea     edx, [ebp+var_4008]
.text:000007C6                 push    edx             ; void *
.text:000007C7                 call    _fread
.text:000007CC                 add     esp, 10h
.text:000007CF                 mov     [ebp+var_4028], eax
.text:000007D5                 mov     eax, [ebp+arg_0]
.text:000007D8                 push    eax             ; FILE *
.text:000007D9                 call    _fclose
.text:000007DE                 add     esp, 4
.text:000007E1                 cmp     [ebp+var_4028], 0
.text:000007E8                 jl      short loc_7F6
.text:000007EA                 cmp     [ebp+var_4028], 4000h
.text:000007F4                 jnz     short loc_804
.text:000007F6
.text:000007F6 loc_7F6:                                ; CODE XREF: _loadrsakey_main+70j
.text:000007F6                 mov     ecx, [ebp+arg_14]
.text:000007F9                 mov     dword ptr [ecx], offset $SG87092 ; "error reading file"
.text:000007FF                 jmp     $end$87093
.text:00000804 ; ---------------------------------------------------------------------------
.text:00000804
.text:00000804 loc_804:                                ; CODE XREF: _loadrsakey_main+7Cj
.text:00000804                 mov     [ebp+var_402C], 0
.text:0000080E                 mov     edx, [ebp+arg_14]
.text:00000811                 mov     dword ptr [edx], offset $SG87094 ; "file format error"
.text:00000817                 mov     eax, [ebp+var_4028]
.text:0000081D                 sub     eax, [ebp+var_402C]
.text:00000823                 cmp     eax, 1
.text:00000826                 jl      short loc_83A
.text:00000828                 mov     ecx, [ebp+var_402C]
.text:0000082E                 movzx   edx, [ebp+ecx+var_4008]
.text:00000836                 test    edx, edx
.text:00000838                 jz      short loc_83F
.text:0000083A
.text:0000083A loc_83A:                                ; CODE XREF: _loadrsakey_main+AEj
.text:0000083A                 jmp     $end$87093
.text:0000083F ; ---------------------------------------------------------------------------
.text:0000083F
.text:0000083F loc_83F:                                ; CODE XREF: _loadrsakey_main+C0j
.text:0000083F                 mov     eax, [ebp+var_402C]
.text:00000845                 add     eax, 1
.text:00000848                 mov     [ebp+var_402C], eax
.text:0000084E                 mov     ecx, [ebp+var_4028]
.text:00000854                 sub     ecx, [ebp+var_402C]
.text:0000085A                 cmp     ecx, 1
.text:0000085D                 jge     short loc_864
.text:0000085F                 jmp     $end$87093
.text:00000864 ; ---------------------------------------------------------------------------
.text:00000864
.text:00000864 loc_864:                                ; CODE XREF: _loadrsakey_main+E5j
.text:00000864                 mov     edx, [ebp+var_402C]
.text:0000086A                 movzx   eax, [ebp+edx+var_4008]
.text:00000872                 mov     [ebp+var_4034], eax
.text:00000878                 cmp     [ebp+var_4034], 0
.text:0000087F                 jz      short loc_88F
.text:00000881                 cmp     [ebp+var_4034], 3
.text:00000888                 jz      short loc_88F
.text:0000088A                 jmp     $end$87093
.text:0000088F ; ---------------------------------------------------------------------------
.text:0000088F
.text:0000088F loc_88F:                                ; CODE XREF: _loadrsakey_main+107j
.text:0000088F                                         ; _loadrsakey_main+110j
.text:0000088F                 mov     ecx, [ebp+var_402C]
.text:00000895                 add     ecx, 1
.text:00000898                 mov     [ebp+var_402C], ecx
.text:0000089E                 mov     edx, [ebp+var_4028]
.text:000008A4                 sub     edx, [ebp+var_402C]
.text:000008AA                 cmp     edx, 4
.text:000008AD                 jge     short loc_8B4
.text:000008AF                 jmp     $end$87093
.text:000008B4 ; ---------------------------------------------------------------------------
.text:000008B4
.text:000008B4 loc_8B4:                                ; CODE XREF: _loadrsakey_main+135j
.text:000008B4                 mov     eax, [ebp+var_402C]
.text:000008BA                 movzx   ecx, [ebp+eax+var_4008]
.text:000008C2                 test    ecx, ecx
.text:000008C4                 jnz     short loc_8FC
.text:000008C6                 mov     edx, [ebp+var_402C]
.text:000008CC                 movzx   eax, [ebp+edx+var_4007]
.text:000008D4                 test    eax, eax
.text:000008D6                 jnz     short loc_8FC
.text:000008D8                 mov     ecx, [ebp+var_402C]
.text:000008DE                 movzx   edx, [ebp+ecx+var_4006]
.text:000008E6                 test    edx, edx
.text:000008E8                 jnz     short loc_8FC
.text:000008EA                 mov     eax, [ebp+var_402C]
.text:000008F0                 movzx   ecx, [ebp+eax+var_4005]
.text:000008F8                 test    ecx, ecx
.text:000008FA                 jz      short loc_901
.text:000008FC
.text:000008FC loc_8FC:                                ; CODE XREF: _loadrsakey_main+14Cj
.text:000008FC                                         ; _loadrsakey_main+15Ej ...
.text:000008FC                 jmp     $end$87093
.text:00000901 ; ---------------------------------------------------------------------------
.text:00000901
.text:00000901 loc_901:                                ; CODE XREF: _loadrsakey_main+182j
.text:00000901                 mov     edx, [ebp+var_402C]
.text:00000907                 add     edx, 4
.text:0000090A                 mov     [ebp+var_402C], edx
.text:00000910                 push    1
.text:00000912                 push    0
.text:00000914                 mov     eax, [ebp+arg_4]
.text:00000917                 push    eax
.text:00000918                 mov     ecx, [ebp+var_4028]
.text:0000091E                 sub     ecx, [ebp+var_402C]
.text:00000924                 push    ecx
.text:00000925                 mov     edx, [ebp+var_402C]
.text:0000092B                 lea     eax, [ebp+edx+var_4008]
.text:00000932                 push    eax
.text:00000933                 call    _makekey
.text:00000938                 add     esp, 14h
.text:0000093B                 mov     [ebp+var_4030], eax
.text:00000941                 cmp     [ebp+var_4030], 0
.text:00000948                 jge     short loc_94F
.text:0000094A                 jmp     $end$87093
.text:0000094F ; ---------------------------------------------------------------------------
.text:0000094F
.text:0000094F loc_94F:                                ; CODE XREF: _loadrsakey_main+1D0j
.text:0000094F                 mov     ecx, [ebp+var_402C]
.text:00000955                 add     ecx, [ebp+var_4030]
.text:0000095B                 mov     [ebp+var_402C], ecx
.text:00000961                 mov     edx, [ebp+var_402C]
.text:00000967                 movzx   eax, [ebp+edx+var_4008]
.text:0000096F                 shl     eax, 18h
.text:00000972                 mov     ecx, [ebp+var_402C]
.text:00000978                 movzx   edx, [ebp+ecx+var_4007]
.text:00000980                 shl     edx, 10h
.text:00000983                 or      eax, edx
.text:00000985                 mov     ecx, [ebp+var_402C]
.text:0000098B                 movzx   edx, [ebp+ecx+var_4006]
.text:00000993                 shl     edx, 8
.text:00000996                 or      eax, edx
.text:00000998                 mov     ecx, [ebp+var_402C]
.text:0000099E                 movzx   edx, [ebp+ecx+var_4005]
.text:000009A6                 or      eax, edx
.text:000009A8                 push    eax
.text:000009A9                 call    _toint
.text:000009AE                 add     esp, 4
.text:000009B1                 mov     [ebp+var_4030], eax
.text:000009B7                 mov     eax, [ebp+var_402C]
.text:000009BD                 add     eax, 4
.text:000009C0                 mov     [ebp+var_402C], eax
.text:000009C6                 cmp     [ebp+var_4030], 0
.text:000009CD                 jl      short loc_9E3
.text:000009CF                 mov     ecx, [ebp+var_4028]
.text:000009D5                 sub     ecx, [ebp+var_402C]
.text:000009DB                 cmp     ecx, [ebp+var_4030]
.text:000009E1                 jge     short loc_9E8
.text:000009E3
.text:000009E3 loc_9E3:                                ; CODE XREF: _loadrsakey_main+255j
.text:000009E3                 jmp     $end$87093
.text:000009E8 ; ---------------------------------------------------------------------------
.text:000009E8
.text:000009E8 loc_9E8:                                ; CODE XREF: _loadrsakey_main+269j
.text:000009E8                 push    1
.text:000009EA                 mov     edx, [ebp+var_4030]
.text:000009F0                 add     edx, 1
.text:000009F3                 push    edx
.text:000009F4                 call    _safemalloc
.text:000009F9                 add     esp, 8
.text:000009FC                 mov     [ebp+var_40A0], eax
.text:00000A02                 cmp     [ebp+var_40A0], 0
.text:00000A09                 jz      short loc_A3E
.text:00000A0B                 mov     eax, [ebp+var_4030]
.text:00000A11                 push    eax             ; size_t
.text:00000A12                 mov     ecx, [ebp+var_402C]
.text:00000A18                 lea     edx, [ebp+ecx+var_4008]
.text:00000A1F                 push    edx             ; void *
.text:00000A20                 mov     eax, [ebp+var_40A0]
.text:00000A26                 push    eax             ; void *
.text:00000A27                 call    _memcpy
.text:00000A2C                 add     esp, 0Ch
.text:00000A2F                 mov     ecx, [ebp+var_40A0]
.text:00000A35                 add     ecx, [ebp+var_4030]
.text:00000A3B                 mov     byte ptr [ecx], 0
.text:00000A3E
.text:00000A3E loc_A3E:                                ; CODE XREF: _loadrsakey_main+291j
.text:00000A3E                 mov     edx, [ebp+var_402C]
.text:00000A44                 add     edx, [ebp+var_4030]
.text:00000A4A                 mov     [ebp+var_402C], edx
.text:00000A50                 cmp     [ebp+arg_C], 0
.text:00000A54                 jz      short loc_A6A
.text:00000A56                 mov     eax, [ebp+var_40A0]
.text:00000A5C                 push    eax
.text:00000A5D                 call    _dupstr
.text:00000A62                 add     esp, 4
.text:00000A65                 mov     ecx, [ebp+arg_C]
.text:00000A68                 mov     [ecx], eax
.text:00000A6A
.text:00000A6A loc_A6A:                                ; CODE XREF: _loadrsakey_main+2DCj
.text:00000A6A                 cmp     [ebp+arg_4], 0
.text:00000A6E                 jz      short loc_A7E
.text:00000A70                 mov     edx, [ebp+arg_4]
.text:00000A73                 mov     eax, [ebp+var_40A0]
.text:00000A79                 mov     [edx+20h], eax
.text:00000A7C                 jmp     short loc_A8D
.text:00000A7E ; ---------------------------------------------------------------------------
.text:00000A7E
.text:00000A7E loc_A7E:                                ; CODE XREF: _loadrsakey_main+2F6j
.text:00000A7E                 mov     ecx, [ebp+var_40A0]
.text:00000A84                 push    ecx
.text:00000A85                 call    _safefree
.text:00000A8A                 add     esp, 4
.text:00000A8D
.text:00000A8D loc_A8D:                                ; CODE XREF: _loadrsakey_main+304j
.text:00000A8D                 cmp     [ebp+arg_8], 0
.text:00000A91                 jz      short loc_AA2
.text:00000A93                 mov     [ebp+var_4038], 1
.text:00000A9D                 jmp     $end$87093
.text:00000AA2 ; ---------------------------------------------------------------------------
.text:00000AA2
.text:00000AA2 loc_AA2:                                ; CODE XREF: _loadrsakey_main+319j
.text:00000AA2                 cmp     [ebp+arg_4], 0
.text:00000AA6                 jnz     short loc_AC8
.text:00000AA8                 xor     edx, edx
.text:00000AAA                 cmp     [ebp+var_4034], 0
.text:00000AB1                 setnz   dl
.text:00000AB4                 mov     [ebp+var_4038], edx
.text:00000ABA                 mov     eax, [ebp+arg_14]
.text:00000ABD                 mov     dword ptr [eax], 0
.text:00000AC3                 jmp     $end$87093
.text:00000AC8 ; ---------------------------------------------------------------------------
.text:00000AC8
.text:00000AC8 loc_AC8:                                ; CODE XREF: _loadrsakey_main+32Ej
.text:00000AC8                 cmp     [ebp+var_4034], 0
.text:00000ACF                 jz      loc_B5B
.text:00000AD5                 lea     ecx, [ebp+var_4098]
.text:00000ADB                 push    ecx
.text:00000ADC                 call    _MD5Init
.text:00000AE1                 add     esp, 4
.text:00000AE4                 mov     edx, [ebp+arg_10]
.text:00000AE7                 push    edx             ; char *
.text:00000AE8                 call    _strlen
.text:00000AED                 add     esp, 4
.text:00000AF0                 push    eax
.text:00000AF1                 mov     eax, [ebp+arg_10]
.text:00000AF4                 push    eax
.text:00000AF5                 lea     ecx, [ebp+var_4098]
.text:00000AFB                 push    ecx
.text:00000AFC                 call    _MD5Update
.text:00000B01                 add     esp, 0Ch
.text:00000B04                 lea     edx, [ebp+var_4098]
.text:00000B0A                 push    edx
.text:00000B0B                 lea     eax, [ebp+var_4020]
.text:00000B11                 push    eax
.text:00000B12                 call    _MD5Final
.text:00000B17                 add     esp, 8
.text:00000B1A                 mov     ecx, [ebp+var_4028]
.text:00000B20                 sub     ecx, [ebp+var_402C]
.text:00000B26                 add     ecx, 7
.text:00000B29                 and     ecx, 0FFFFFFF8h
.text:00000B2C                 push    ecx
.text:00000B2D                 mov     edx, [ebp+var_402C]
.text:00000B33                 lea     eax, [ebp+edx+var_4008]
.text:00000B3A                 push    eax
.text:00000B3B                 lea     ecx, [ebp+var_4020]
.text:00000B41                 push    ecx
.text:00000B42                 call    _des3_decrypt_pubkey
.text:00000B47                 add     esp, 0Ch
.text:00000B4A                 push    10h
.text:00000B4C                 lea     edx, [ebp+var_4020]
.text:00000B52                 push    edx
.text:00000B53                 call    _smemclr
.text:00000B58                 add     esp, 8
.text:00000B5B
.text:00000B5B loc_B5B:                                ; CODE XREF: _loadrsakey_main+357j
.text:00000B5B                 mov     eax, [ebp+var_4028]
.text:00000B61                 sub     eax, [ebp+var_402C]
.text:00000B67                 cmp     eax, 4
.text:00000B6A                 jge     short loc_B71
.text:00000B6C                 jmp     $end$87093
.text:00000B71 ; ---------------------------------------------------------------------------
.text:00000B71
.text:00000B71 loc_B71:                                ; CODE XREF: _loadrsakey_main+3F2j
.text:00000B71                 mov     ecx, [ebp+var_402C]
.text:00000B77                 movzx   edx, [ebp+ecx+var_4008]
.text:00000B7F                 mov     eax, [ebp+var_402C]
.text:00000B85                 movzx   ecx, [ebp+eax+var_4006]
.text:00000B8D                 cmp     edx, ecx
.text:00000B8F                 jnz     short loc_BB1
.text:00000B91                 mov     edx, [ebp+var_402C]
.text:00000B97                 movzx   eax, [ebp+edx+var_4007]
.text:00000B9F                 mov     ecx, [ebp+var_402C]
.text:00000BA5                 movzx   edx, [ebp+ecx+var_4005]
.text:00000BAD                 cmp     eax, edx
.text:00000BAF                 jz      short loc_BC9
.text:00000BB1
.text:00000BB1 loc_BB1:                                ; CODE XREF: _loadrsakey_main+417j
.text:00000BB1                 mov     eax, [ebp+arg_14]
.text:00000BB4                 mov     dword ptr [eax], offset $SG87128 ; "wrong passphrase"
.text:00000BBA                 mov     [ebp+var_4038], 0FFFFFFFFh
.text:00000BC4                 jmp     $end$87093
.text:00000BC9 ; ---------------------------------------------------------------------------
.text:00000BC9
.text:00000BC9 loc_BC9:                                ; CODE XREF: _loadrsakey_main+437j
.text:00000BC9                 mov     ecx, [ebp+var_402C]
.text:00000BCF                 add     ecx, 4
.text:00000BD2                 mov     [ebp+var_402C], ecx
.text:00000BD8                 mov     edx, [ebp+arg_4]
.text:00000BDB                 push    edx
.text:00000BDC                 mov     eax, [ebp+var_4028]
.text:00000BE2                 sub     eax, [ebp+var_402C]
.text:00000BE8                 push    eax
.text:00000BE9                 mov     ecx, [ebp+var_402C]
.text:00000BEF                 lea     edx, [ebp+ecx+var_4008]
.text:00000BF6                 push    edx
.text:00000BF7                 call    _makeprivate
.text:00000BFC                 add     esp, 0Ch
.text:00000BFF                 mov     [ebp+var_4030], eax
.text:00000C05                 cmp     [ebp+var_4030], 0
.text:00000C0C                 jge     short loc_C13
.text:00000C0E                 jmp     $end$87093
.text:00000C13 ; ---------------------------------------------------------------------------
.text:00000C13
.text:00000C13 loc_C13:                                ; CODE XREF: _loadrsakey_main+494j
.text:00000C13                 mov     eax, [ebp+var_402C]
.text:00000C19                 add     eax, [ebp+var_4030]
.text:00000C1F                 mov     [ebp+var_402C], eax
.text:00000C25                 mov     ecx, [ebp+arg_4]
.text:00000C28                 add     ecx, 1Ch
.text:00000C2B                 push    ecx
.text:00000C2C                 mov     edx, [ebp+var_4028]
.text:00000C32                 sub     edx, [ebp+var_402C]
.text:00000C38                 push    edx
.text:00000C39                 mov     eax, [ebp+var_402C]
.text:00000C3F                 lea     ecx, [ebp+eax+var_4008]
.text:00000C46                 push    ecx
.text:00000C47                 call    _ssh1_read_bignum
.text:00000C4C                 add     esp, 0Ch
.text:00000C4F                 mov     [ebp+var_4030], eax
.text:00000C55                 cmp     [ebp+var_4030], 0
.text:00000C5C                 jge     short loc_C63
.text:00000C5E                 jmp     $end$87093
.text:00000C63 ; ---------------------------------------------------------------------------
.text:00000C63
.text:00000C63 loc_C63:                                ; CODE XREF: _loadrsakey_main+4E4j
.text:00000C63                 mov     edx, [ebp+var_402C]
.text:00000C69                 add     edx, [ebp+var_4030]
.text:00000C6F                 mov     [ebp+var_402C], edx
.text:00000C75                 mov     eax, [ebp+arg_4]
.text:00000C78                 add     eax, 18h
.text:00000C7B                 push    eax
.text:00000C7C                 mov     ecx, [ebp+var_4028]
.text:00000C82                 sub     ecx, [ebp+var_402C]
.text:00000C88                 push    ecx
.text:00000C89                 mov     edx, [ebp+var_402C]
.text:00000C8F                 lea     eax, [ebp+edx+var_4008]
.text:00000C96                 push    eax
.text:00000C97                 call    _ssh1_read_bignum
.text:00000C9C                 add     esp, 0Ch
.text:00000C9F                 mov     [ebp+var_4030], eax
.text:00000CA5                 cmp     [ebp+var_4030], 0
.text:00000CAC                 jge     short loc_CB3
.text:00000CAE                 jmp     $end$87093
.text:00000CB3 ; ---------------------------------------------------------------------------
.text:00000CB3
.text:00000CB3 loc_CB3:                                ; CODE XREF: _loadrsakey_main+534j
.text:00000CB3                 mov     ecx, [ebp+var_402C]
.text:00000CB9                 add     ecx, [ebp+var_4030]
.text:00000CBF                 mov     [ebp+var_402C], ecx
.text:00000CC5                 mov     edx, [ebp+arg_4]
.text:00000CC8                 add     edx, 14h
.text:00000CCB                 push    edx
.text:00000CCC                 mov     eax, [ebp+var_4028]
.text:00000CD2                 sub     eax, [ebp+var_402C]
.text:00000CD8                 push    eax
.text:00000CD9                 mov     ecx, [ebp+var_402C]
.text:00000CDF                 lea     edx, [ebp+ecx+var_4008]
.text:00000CE6                 push    edx
.text:00000CE7                 call    _ssh1_read_bignum
.text:00000CEC                 add     esp, 0Ch
.text:00000CEF                 mov     [ebp+var_4030], eax
.text:00000CF5                 cmp     [ebp+var_4030], 0
.text:00000CFC                 jge     short loc_D00
.text:00000CFE                 jmp     short $end$87093
.text:00000D00 ; ---------------------------------------------------------------------------
.text:00000D00
.text:00000D00 loc_D00:                                ; CODE XREF: _loadrsakey_main+584j
.text:00000D00                 mov     eax, [ebp+var_402C]
.text:00000D06                 add     eax, [ebp+var_4030]
.text:00000D0C                 mov     [ebp+var_402C], eax
.text:00000D12                 mov     ecx, [ebp+arg_4]
.text:00000D15                 push    ecx
.text:00000D16                 call    _rsa_verify
.text:00000D1B                 add     esp, 4
.text:00000D1E                 test    eax, eax
.text:00000D20                 jnz     short loc_D43
.text:00000D22                 mov     edx, [ebp+arg_14]
.text:00000D25                 mov     dword ptr [edx], offset $SG87134 ; "rsa_verify failed"
.text:00000D2B                 mov     eax, [ebp+arg_4]
.text:00000D2E                 push    eax
.text:00000D2F                 call    _freersakey
.text:00000D34                 add     esp, 4
.text:00000D37                 mov     [ebp+var_4038], 0
.text:00000D41                 jmp     short $end$87093
.text:00000D43 ; ---------------------------------------------------------------------------
.text:00000D43
.text:00000D43 loc_D43:                                ; CODE XREF: _loadrsakey_main+5A8j
.text:00000D43                 mov     [ebp+var_4038], 1
.text:00000D4D
.text:00000D4D $end$87093:                             ; CODE XREF: _loadrsakey_main+87j
.text:00000D4D                                         ; _loadrsakey_main:loc_83Aj ...
.text:00000D4D                 push    4000h
.text:00000D52                 lea     ecx, [ebp+var_4008]
.text:00000D58                 push    ecx
.text:00000D59                 call    _smemclr
.text:00000D5E                 add     esp, 8
.text:00000D61                 mov     eax, [ebp+var_4038]
.text:00000D67                 push    edx
.text:00000D68                 mov     ecx, ebp
.text:00000D6A                 push    eax
.text:00000D6B                 lea     edx, $LN35
.text:00000D71                 call    @_RTC_CheckStackVars@8
.text:00000D76                 pop     eax
.text:00000D77                 pop     edx
.text:00000D78                 pop     edi
.text:00000D79                 mov     ecx, [ebp+var_4]
.text:00000D7C                 xor     ecx, ebp
.text:00000D7E                 call    @__security_check_cookie@4
.text:00000D83                 add     esp, 40A0h
.text:00000D89                 cmp     ebp, esp
.text:00000D8B                 call    __RTC_CheckEsp
.text:00000D90                 mov     esp, ebp
.text:00000D92                 pop     ebp
.text:00000D93                 retn
.text:00000D93 _loadrsakey_main endp
.text:00000D93
.text:00000D93 ; ---------------------------------------------------------------------------
.text:00000D94 $LN35           dd 3                    ; DATA XREF: _loadrsakey_main+5F3o
.text:00000D98                 dd offset $LN34
.text:00000D9C $LN34           dd 0FFFFBFF8h, 4000h    ; DATA XREF: .text:00000D98o
.text:00000DA4                 dd offset $LN31         ; "buf"
.text:00000DA8                 dd 0FFFFBFE0h, 10h
.text:00000DB0                 dd offset $LN32         ; "keybuf"
.text:00000DB4                 dd 0FFFFBF68h, 5Ch
.text:00000DBC                 dd offset $LN33         ; "md5c"
.text:00000DC0 $LN33           db 'md5c',0             ; DATA XREF: .text:00000DBCo
.text:00000DC5 $LN32           db 'keybuf',0           ; DATA XREF: .text:00000DB0o
.text:00000DCC $LN31           db 'buf',0              ; DATA XREF: .text:00000DA4o
.text:00000DD0                 db 8 dup(0CCh)
.text:00000DD8
.text:00000DD8 ; =============== S U B R O U T I N E =======================================
.text:00000DD8
.text:00000DD8 ; Attributes: bp-based frame
.text:00000DD8
.text:00000DD8                 public _rsakey_encrypted
.text:00000DD8 _rsakey_encrypted proc near
.text:00000DD8
.text:00000DD8 var_5C          = byte ptr -5Ch
.text:00000DD8 var_58          = dword ptr -58h
.text:00000DD8 var_4C          = byte ptr -4Ch
.text:00000DD8 var_8           = dword ptr -8
.text:00000DD8 var_4           = dword ptr -4
.text:00000DD8 arg_0           = dword ptr  8
.text:00000DD8 arg_4           = dword ptr  0Ch
.text:00000DD8
.text:00000DD8                 push    ebp
.text:00000DD9                 mov     ebp, esp
.text:00000DDB                 sub     esp, 5Ch
.text:00000DDE                 push    edi
.text:00000DDF                 lea     edi, [ebp+var_5C]
.text:00000DE2                 mov     ecx, 17h
.text:00000DE7                 mov     eax, 0CCCCCCCCh
.text:00000DEC                 rep stosd
.text:00000DEE                 mov     eax, dword ptr ds:___security_cookie
.text:00000DF3                 xor     eax, ebp
.text:00000DF5                 mov     [ebp+var_4], eax
.text:00000DF8                 push    offset $SG87168 ; "rb"
.text:00000DFD                 mov     eax, [ebp+arg_0]
.text:00000E00                 mov     ecx, [eax]
.text:00000E02                 push    ecx             ; char *
.text:00000E03                 call    _fopen
.text:00000E08                 add     esp, 8
.text:00000E0B                 mov     [ebp+var_8], eax
.text:00000E0E                 cmp     [ebp+var_8], 0
.text:00000E12                 jnz     short loc_E18
.text:00000E14                 xor     eax, eax
.text:00000E16                 jmp     short loc_E6D
.text:00000E18 ; ---------------------------------------------------------------------------
.text:00000E18
.text:00000E18 loc_E18:                                ; CODE XREF: _rsakey_encrypted+3Aj
.text:00000E18                 mov     edx, [ebp+var_8]
.text:00000E1B                 push    edx             ; FILE *
.text:00000E1C                 push    40h ; '@'       ; int
.text:00000E1E                 lea     eax, [ebp+var_4C]
.text:00000E21                 push    eax             ; char *
.text:00000E22                 call    _fgets
.text:00000E27                 add     esp, 0Ch
.text:00000E2A                 test    eax, eax
.text:00000E2C                 jz      short loc_E5F
.text:00000E2E                 push    offset $SG87171 ; "SSH PRIVATE KEY FILE FORMAT 1.1\n"
.text:00000E33                 lea     ecx, [ebp+var_4C]
.text:00000E36                 push    ecx             ; char *
.text:00000E37                 call    _strcmp
.text:00000E3C                 add     esp, 8
.text:00000E3F                 test    eax, eax
.text:00000E41                 jnz     short loc_E5F
.text:00000E43                 lea     edx, [ebp+var_58]
.text:00000E46                 push    edx             ; int
.text:00000E47                 push    0               ; char *
.text:00000E49                 mov     eax, [ebp+arg_4]
.text:00000E4C                 push    eax             ; int
.text:00000E4D                 push    0               ; int
.text:00000E4F                 push    0               ; int
.text:00000E51                 mov     ecx, [ebp+var_8]
.text:00000E54                 push    ecx             ; FILE *
.text:00000E55                 call    _loadrsakey_main
.text:00000E5A                 add     esp, 18h
.text:00000E5D                 jmp     short loc_E6D
.text:00000E5F ; ---------------------------------------------------------------------------
.text:00000E5F
.text:00000E5F loc_E5F:                                ; CODE XREF: _rsakey_encrypted+54j
.text:00000E5F                                         ; _rsakey_encrypted+69j
.text:00000E5F                 mov     edx, [ebp+var_8]
.text:00000E62                 push    edx             ; FILE *
.text:00000E63                 call    _fclose
.text:00000E68                 add     esp, 4
.text:00000E6B                 xor     eax, eax
.text:00000E6D
.text:00000E6D loc_E6D:                                ; CODE XREF: _rsakey_encrypted+3Ej
.text:00000E6D                                         ; _rsakey_encrypted+85j
.text:00000E6D                 push    edx
.text:00000E6E                 mov     ecx, ebp
.text:00000E70                 push    eax
.text:00000E71                 lea     edx, $LN8_0
.text:00000E77                 call    @_RTC_CheckStackVars@8
.text:00000E7C                 pop     eax
.text:00000E7D                 pop     edx
.text:00000E7E                 pop     edi
.text:00000E7F                 mov     ecx, [ebp+var_4]
.text:00000E82                 xor     ecx, ebp
.text:00000E84                 call    @__security_check_cookie@4
.text:00000E89                 add     esp, 5Ch
.text:00000E8C                 cmp     ebp, esp
.text:00000E8E                 call    __RTC_CheckEsp
.text:00000E93                 mov     esp, ebp
.text:00000E95                 pop     ebp
.text:00000E96                 retn
.text:00000E96 _rsakey_encrypted endp
.text:00000E96
.text:00000E96 ; ---------------------------------------------------------------------------
.text:00000E97                 align 4
.text:00000E98 $LN8_0          dd 2                    ; DATA XREF: _rsakey_encrypted+99o
.text:00000E9C                 dd offset $LN7_0
.text:00000EA0 $LN7_0          dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000E9Co
.text:00000EA8                 dd offset $LN5          ; "buf"
.text:00000EAC                 dd 0FFFFFFA8h, 4
.text:00000EB4                 dd offset $LN6          ; "dummy"
.text:00000EB8 $LN6            db 'dummy',0            ; DATA XREF: .text:00000EB4o
.text:00000EBE $LN5            db 'buf',0              ; DATA XREF: .text:00000EA8o
.text:00000EC2                 align 8
.text:00000EC8
.text:00000EC8 ; =============== S U B R O U T I N E =======================================
.text:00000EC8
.text:00000EC8 ; Attributes: bp-based frame
.text:00000EC8
.text:00000EC8                 public _rsakey_pubblob
.text:00000EC8 _rsakey_pubblob proc near
.text:00000EC8
.text:00000EC8 var_8C          = byte ptr -8Ch
.text:00000EC8 var_88          = dword ptr -88h
.text:00000EC8 var_80          = dword ptr -80h
.text:00000EC8 var_78          = dword ptr -78h
.text:00000EC8 var_4C          = byte ptr -4Ch
.text:00000EC8 var_8           = dword ptr -8
.text:00000EC8 var_4           = dword ptr -4
.text:00000EC8 arg_0           = dword ptr  8
.text:00000EC8 arg_4           = dword ptr  0Ch
.text:00000EC8 arg_8           = dword ptr  10h
.text:00000EC8 arg_C           = dword ptr  14h
.text:00000EC8 arg_10          = dword ptr  18h
.text:00000EC8
.text:00000EC8                 push    ebp
.text:00000EC9                 mov     ebp, esp
.text:00000ECB                 sub     esp, 8Ch
.text:00000ED1                 push    edi
.text:00000ED2                 lea     edi, [ebp+var_8C]
.text:00000ED8                 mov     ecx, 23h ; '#'
.text:00000EDD                 mov     eax, 0CCCCCCCCh
.text:00000EE2                 rep stosd
.text:00000EE4                 mov     eax, dword ptr ds:___security_cookie
.text:00000EE9                 xor     eax, ebp
.text:00000EEB                 mov     [ebp+var_4], eax
.text:00000EEE                 mov     [ebp+var_88], 0
.text:00000EF8                 mov     eax, [ebp+arg_4]
.text:00000EFB                 mov     dword ptr [eax], 0
.text:00000F01                 mov     ecx, [ebp+arg_8]
.text:00000F04                 mov     dword ptr [ecx], 0
.text:00000F0A                 mov     [ebp+var_80], 0
.text:00000F11                 push    offset $SG87193 ; "rb"
.text:00000F16                 mov     edx, [ebp+arg_0]
.text:00000F19                 mov     eax, [edx]
.text:00000F1B                 push    eax             ; char *
.text:00000F1C                 call    _fopen
.text:00000F21                 add     esp, 8
.text:00000F24                 mov     [ebp+var_8], eax
.text:00000F27                 cmp     [ebp+var_8], 0
.text:00000F2B                 jnz     short loc_F3C
.text:00000F2D                 mov     [ebp+var_88], offset $SG87195 ; "can't open file"
.text:00000F37                 jmp     $end$87196
.text:00000F3C ; ---------------------------------------------------------------------------
.text:00000F3C
.text:00000F3C loc_F3C:                                ; CODE XREF: _rsakey_pubblob+63j
.text:00000F3C                 mov     ecx, [ebp+var_8]
.text:00000F3F                 push    ecx             ; FILE *
.text:00000F40                 push    40h ; '@'       ; int
.text:00000F42                 lea     edx, [ebp+var_4C]
.text:00000F45                 push    edx             ; char *
.text:00000F46                 call    _fgets
.text:00000F4B                 add     esp, 0Ch
.text:00000F4E                 test    eax, eax
.text:00000F50                 jz      short loc_FCB
.text:00000F52                 push    offset $SG87198 ; "SSH PRIVATE KEY FILE FORMAT 1.1\n"
.text:00000F57                 lea     eax, [ebp+var_4C]
.text:00000F5A                 push    eax             ; char *
.text:00000F5B                 call    _strcmp
.text:00000F60                 add     esp, 8
.text:00000F63                 test    eax, eax
.text:00000F65                 jnz     short loc_FCB
.text:00000F67                 push    24h ; '$'       ; size_t
.text:00000F69                 push    0               ; int
.text:00000F6B                 lea     ecx, [ebp+var_78]
.text:00000F6E                 push    ecx             ; void *
.text:00000F6F                 call    _memset
.text:00000F74                 add     esp, 0Ch
.text:00000F77                 lea     edx, [ebp+var_88]
.text:00000F7D                 push    edx             ; int
.text:00000F7E                 push    0               ; char *
.text:00000F80                 mov     eax, [ebp+arg_C]
.text:00000F83                 push    eax             ; int
.text:00000F84                 push    1               ; int
.text:00000F86                 lea     ecx, [ebp+var_78]
.text:00000F89                 push    ecx             ; int
.text:00000F8A                 mov     edx, [ebp+var_8]
.text:00000F8D                 push    edx             ; FILE *
.text:00000F8E                 call    _loadrsakey_main
.text:00000F93                 add     esp, 18h
.text:00000F96                 test    eax, eax
.text:00000F98                 jz      short loc_FC2
.text:00000F9A                 mov     eax, [ebp+arg_8]
.text:00000F9D                 push    eax
.text:00000F9E                 lea     ecx, [ebp+var_78]
.text:00000FA1                 push    ecx
.text:00000FA2                 call    _rsa_public_blob
.text:00000FA7                 add     esp, 8
.text:00000FAA                 mov     edx, [ebp+arg_4]
.text:00000FAD                 mov     [edx], eax
.text:00000FAF                 lea     eax, [ebp+var_78]
.text:00000FB2                 push    eax
.text:00000FB3                 call    _freersakey
.text:00000FB8                 add     esp, 4
.text:00000FBB                 mov     [ebp+var_80], 1
.text:00000FC2
.text:00000FC2 loc_FC2:                                ; CODE XREF: _rsakey_pubblob+D0j
.text:00000FC2                 mov     [ebp+var_8], 0
.text:00000FC9                 jmp     short $end$87196
.text:00000FCB ; ---------------------------------------------------------------------------
.text:00000FCB
.text:00000FCB loc_FCB:                                ; CODE XREF: _rsakey_pubblob+88j
.text:00000FCB                                         ; _rsakey_pubblob+9Dj
.text:00000FCB                 mov     [ebp+var_88], offset $SG87203 ; "not an SSH-1 RSA file"
.text:00000FD5
.text:00000FD5 $end$87196:                             ; CODE XREF: _rsakey_pubblob+6Fj
.text:00000FD5                                         ; _rsakey_pubblob+101j
.text:00000FD5                 cmp     [ebp+var_8], 0
.text:00000FD9                 jz      short loc_FE7
.text:00000FDB                 mov     ecx, [ebp+var_8]
.text:00000FDE                 push    ecx             ; FILE *
.text:00000FDF                 call    _fclose
.text:00000FE4                 add     esp, 4
.text:00000FE7
.text:00000FE7 loc_FE7:                                ; CODE XREF: _rsakey_pubblob+111j
.text:00000FE7                 cmp     [ebp+var_80], 1
.text:00000FEB                 jz      short loc_FFE
.text:00000FED                 cmp     [ebp+arg_10], 0
.text:00000FF1                 jz      short loc_FFE
.text:00000FF3                 mov     edx, [ebp+arg_10]
.text:00000FF6                 mov     eax, [ebp+var_88]
.text:00000FFC                 mov     [edx], eax
.text:00000FFE
.text:00000FFE loc_FFE:                                ; CODE XREF: _rsakey_pubblob+123j
.text:00000FFE                                         ; _rsakey_pubblob+129j
.text:00000FFE                 mov     eax, [ebp+var_80]
.text:00001001                 push    edx
.text:00001002                 mov     ecx, ebp
.text:00001004                 push    eax
.text:00001005                 lea     edx, $LN13
.text:0000100B                 call    @_RTC_CheckStackVars@8
.text:00001010                 pop     eax
.text:00001011                 pop     edx
.text:00001012                 pop     edi
.text:00001013                 mov     ecx, [ebp+var_4]
.text:00001016                 xor     ecx, ebp
.text:00001018                 call    @__security_check_cookie@4
.text:0000101D                 add     esp, 8Ch
.text:00001023                 cmp     ebp, esp
.text:00001025                 call    __RTC_CheckEsp
.text:0000102A                 mov     esp, ebp
.text:0000102C                 pop     ebp
.text:0000102D                 retn
.text:0000102D _rsakey_pubblob endp
.text:0000102D
.text:0000102D ; ---------------------------------------------------------------------------
.text:0000102E                 align 10h
.text:00001030 $LN13           dd 3                    ; DATA XREF: _rsakey_pubblob+13Do
.text:00001034                 dd offset $LN12
.text:00001038 $LN12           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00001034o
.text:00001040                 dd offset $LN9_0        ; "buf"
.text:00001044                 db 88h, 0FFh
.text:00001046                 dw 0FFFFh
.text:00001048                 dd offset $SG87094+10h  ; "r"
.text:0000104C                 dd offset $LN10_0       ; "key"
.text:00001050                 dd 0FFFFFF78h, 4
.text:00001058                 dd offset $LN11         ; "error"
.text:0000105C $LN11           db 'error',0            ; DATA XREF: .text:00001058o
.text:00001062 $LN10_0         db 'key',0              ; DATA XREF: .text:0000104Co
.text:00001066 $LN9_0          db 'buf',0              ; DATA XREF: .text:00001040o
.text:0000106A                 db 0Eh dup(0CCh)
.text:00001078
.text:00001078 ; =============== S U B R O U T I N E =======================================
.text:00001078
.text:00001078 ; Attributes: bp-based frame
.text:00001078
.text:00001078 ; int __cdecl saversakey(int, int, char *)
.text:00001078                 public _saversakey
.text:00001078 _saversakey     proc near
.text:00001078
.text:00001078 var_4098        = dword ptr -4098h
.text:00001078 var_4094        = dword ptr -4094h
.text:00001078 var_4090        = dword ptr -4090h
.text:00001078 var_408C        = dword ptr -408Ch
.text:00001078 var_4084        = byte ptr -4084h
.text:00001078 var_4020        = byte ptr -4020h
.text:00001078 var_4008        = byte ptr -4008h
.text:00001078 var_4           = dword ptr -4
.text:00001078 arg_0           = dword ptr  8
.text:00001078 arg_4           = dword ptr  0Ch
.text:00001078 arg_8           = dword ptr  10h
.text:00001078
.text:00001078                 push    ebp
.text:00001079                 mov     ebp, esp
.text:0000107B                 mov     eax, 4098h
.text:00001080                 call    __chkstk
.text:00001085                 push    edi
.text:00001086                 lea     edi, [ebp+var_4098]
.text:0000108C                 mov     ecx, 1026h
.text:00001091                 mov     eax, 0CCCCCCCCh
.text:00001096                 rep stosd
.text:00001098                 mov     eax, dword ptr ds:___security_cookie
.text:0000109D                 xor     eax, ebp
.text:0000109F                 mov     [ebp+var_4], eax
.text:000010A2                 lea     eax, [ebp+var_4008]
.text:000010A8                 mov     [ebp+var_408C], eax
.text:000010AE                 push    21h ; '!'       ; size_t
.text:000010B0                 push    offset $SG87219 ; "SSH PRIVATE KEY FILE FORMAT 1.1\n"
.text:000010B5                 mov     ecx, [ebp+var_408C]
.text:000010BB                 push    ecx             ; void *
.text:000010BC                 call    _memcpy
.text:000010C1                 add     esp, 0Ch
.text:000010C4                 mov     edx, [ebp+var_408C]
.text:000010CA                 add     edx, 21h ; '!'
.text:000010CD                 mov     [ebp+var_408C], edx
.text:000010D3                 mov     eax, [ebp+arg_8]
.text:000010D6                 neg     eax
.text:000010D8                 sbb     eax, eax
.text:000010DA                 and     eax, 3
.text:000010DD                 mov     ecx, [ebp+var_408C]
.text:000010E3                 mov     [ecx], al
.text:000010E5                 mov     edx, [ebp+var_408C]
.text:000010EB                 add     edx, 1
.text:000010EE                 mov     [ebp+var_408C], edx
.text:000010F4                 mov     eax, [ebp+var_408C]
.text:000010FA                 mov     byte ptr [eax], 0
.text:000010FD                 mov     ecx, [ebp+var_408C]
.text:00001103                 mov     byte ptr [ecx+1], 0
.text:00001107                 mov     edx, [ebp+var_408C]
.text:0000110D                 mov     byte ptr [edx+2], 0
.text:00001111                 mov     eax, [ebp+var_408C]
.text:00001117                 mov     byte ptr [eax+3], 0
.text:0000111B                 mov     ecx, [ebp+var_408C]
.text:00001121                 add     ecx, 4
.text:00001124                 mov     [ebp+var_408C], ecx
.text:0000112A                 mov     edx, [ebp+arg_4]
.text:0000112D                 mov     eax, [edx+8]
.text:00001130                 push    eax
.text:00001131                 call    _bignum_bitcount
.text:00001136                 add     esp, 4
.text:00001139                 sar     eax, 18h
.text:0000113C                 mov     ecx, [ebp+var_408C]
.text:00001142                 mov     [ecx], al
.text:00001144                 mov     edx, [ebp+arg_4]
.text:00001147                 mov     eax, [edx+8]
.text:0000114A                 push    eax
.text:0000114B                 call    _bignum_bitcount
.text:00001150                 add     esp, 4
.text:00001153                 sar     eax, 10h
.text:00001156                 mov     ecx, [ebp+var_408C]
.text:0000115C                 mov     [ecx+1], al
.text:0000115F                 mov     edx, [ebp+arg_4]
.text:00001162                 mov     eax, [edx+8]
.text:00001165                 push    eax
.text:00001166                 call    _bignum_bitcount
.text:0000116B                 add     esp, 4
.text:0000116E                 sar     eax, 8
.text:00001171                 mov     ecx, [ebp+var_408C]
.text:00001177                 mov     [ecx+2], al
.text:0000117A                 mov     edx, [ebp+arg_4]
.text:0000117D                 mov     eax, [edx+8]
.text:00001180                 push    eax
.text:00001181                 call    _bignum_bitcount
.text:00001186                 add     esp, 4
.text:00001189                 mov     ecx, [ebp+var_408C]
.text:0000118F                 mov     [ecx+3], al
.text:00001192                 mov     edx, [ebp+var_408C]
.text:00001198                 add     edx, 4
.text:0000119B                 mov     [ebp+var_408C], edx
.text:000011A1                 mov     eax, [ebp+arg_4]
.text:000011A4                 mov     ecx, [eax+8]
.text:000011A7                 push    ecx
.text:000011A8                 mov     edx, [ebp+var_408C]
.text:000011AE                 push    edx
.text:000011AF                 call    _ssh1_write_bignum
.text:000011B4                 add     esp, 8
.text:000011B7                 add     eax, [ebp+var_408C]
.text:000011BD                 mov     [ebp+var_408C], eax
.text:000011C3                 mov     eax, [ebp+arg_4]
.text:000011C6                 mov     ecx, [eax+0Ch]
.text:000011C9                 push    ecx
.text:000011CA                 mov     edx, [ebp+var_408C]
.text:000011D0                 push    edx
.text:000011D1                 call    _ssh1_write_bignum
.text:000011D6                 add     esp, 8
.text:000011D9                 add     eax, [ebp+var_408C]
.text:000011DF                 mov     [ebp+var_408C], eax
.text:000011E5                 mov     eax, [ebp+arg_4]
.text:000011E8                 cmp     dword ptr [eax+20h], 0
.text:000011EC                 jz      loc_12AC
.text:000011F2                 mov     ecx, [ebp+arg_4]
.text:000011F5                 mov     edx, [ecx+20h]
.text:000011F8                 push    edx             ; char *
.text:000011F9                 call    _strlen
.text:000011FE                 add     esp, 4
.text:00001201                 shr     eax, 18h
.text:00001204                 mov     ecx, [ebp+var_408C]
.text:0000120A                 mov     [ecx], al
.text:0000120C                 mov     edx, [ebp+arg_4]
.text:0000120F                 mov     eax, [edx+20h]
.text:00001212                 push    eax             ; char *
.text:00001213                 call    _strlen
.text:00001218                 add     esp, 4
.text:0000121B                 shr     eax, 10h
.text:0000121E                 mov     ecx, [ebp+var_408C]
.text:00001224                 mov     [ecx+1], al
.text:00001227                 mov     edx, [ebp+arg_4]
.text:0000122A                 mov     eax, [edx+20h]
.text:0000122D                 push    eax             ; char *
.text:0000122E                 call    _strlen
.text:00001233                 add     esp, 4
.text:00001236                 shr     eax, 8
.text:00001239                 mov     ecx, [ebp+var_408C]
.text:0000123F                 mov     [ecx+2], al
.text:00001242                 mov     edx, [ebp+arg_4]
.text:00001245                 mov     eax, [edx+20h]
.text:00001248                 push    eax             ; char *
.text:00001249                 call    _strlen
.text:0000124E                 add     esp, 4
.text:00001251                 mov     ecx, [ebp+var_408C]
.text:00001257                 mov     [ecx+3], al
.text:0000125A                 mov     edx, [ebp+var_408C]
.text:00001260                 add     edx, 4
.text:00001263                 mov     [ebp+var_408C], edx
.text:00001269                 mov     eax, [ebp+arg_4]
.text:0000126C                 mov     ecx, [eax+20h]
.text:0000126F                 push    ecx             ; char *
.text:00001270                 call    _strlen
.text:00001275                 add     esp, 4
.text:00001278                 push    eax             ; size_t
.text:00001279                 mov     edx, [ebp+arg_4]
.text:0000127C                 mov     eax, [edx+20h]
.text:0000127F                 push    eax             ; void *
.text:00001280                 mov     ecx, [ebp+var_408C]
.text:00001286                 push    ecx             ; void *
.text:00001287                 call    _memcpy
.text:0000128C                 add     esp, 0Ch
.text:0000128F                 mov     edx, [ebp+arg_4]
.text:00001292                 mov     eax, [edx+20h]
.text:00001295                 push    eax             ; char *
.text:00001296                 call    _strlen
.text:0000129B                 add     esp, 4
.text:0000129E                 add     eax, [ebp+var_408C]
.text:000012A4                 mov     [ebp+var_408C], eax
.text:000012AA                 jmp     short loc_12E2
.text:000012AC ; ---------------------------------------------------------------------------
.text:000012AC
.text:000012AC loc_12AC:                               ; CODE XREF: _saversakey+174j
.text:000012AC                 mov     ecx, [ebp+var_408C]
.text:000012B2                 mov     byte ptr [ecx], 0
.text:000012B5                 mov     edx, [ebp+var_408C]
.text:000012BB                 mov     byte ptr [edx+1], 0
.text:000012BF                 mov     eax, [ebp+var_408C]
.text:000012C5                 mov     byte ptr [eax+2], 0
.text:000012C9                 mov     ecx, [ebp+var_408C]
.text:000012CF                 mov     byte ptr [ecx+3], 0
.text:000012D3                 mov     edx, [ebp+var_408C]
.text:000012D9                 add     edx, 4
.text:000012DC                 mov     [ebp+var_408C], edx
.text:000012E2
.text:000012E2 loc_12E2:                               ; CODE XREF: _saversakey+232j
.text:000012E2                 mov     eax, [ebp+var_408C]
.text:000012E8                 mov     [ebp+var_4090], eax
.text:000012EE                 call    _random_byte
.text:000012F3                 mov     ecx, [ebp+var_408C]
.text:000012F9                 mov     [ecx], al
.text:000012FB                 mov     edx, [ebp+var_408C]
.text:00001301                 add     edx, 1
.text:00001304                 mov     [ebp+var_408C], edx
.text:0000130A                 call    _random_byte
.text:0000130F                 mov     ecx, [ebp+var_408C]
.text:00001315                 mov     [ecx], al
.text:00001317                 mov     edx, [ebp+var_408C]
.text:0000131D                 add     edx, 1
.text:00001320                 mov     [ebp+var_408C], edx
.text:00001326                 mov     eax, [ebp+var_408C]
.text:0000132C                 mov     ecx, [ebp+var_408C]
.text:00001332                 mov     dl, [ecx-2]
.text:00001335                 mov     [eax], dl
.text:00001337                 mov     eax, [ebp+var_408C]
.text:0000133D                 mov     ecx, [ebp+var_408C]
.text:00001343                 mov     dl, [ecx-1]
.text:00001346                 mov     [eax+1], dl
.text:00001349                 mov     eax, [ebp+var_408C]
.text:0000134F                 add     eax, 2
.text:00001352                 mov     [ebp+var_408C], eax
.text:00001358                 mov     ecx, [ebp+arg_4]
.text:0000135B                 mov     edx, [ecx+10h]
.text:0000135E                 push    edx
.text:0000135F                 mov     eax, [ebp+var_408C]
.text:00001365                 push    eax
.text:00001366                 call    _ssh1_write_bignum
.text:0000136B                 add     esp, 8
.text:0000136E                 add     eax, [ebp+var_408C]
.text:00001374                 mov     [ebp+var_408C], eax
.text:0000137A                 mov     ecx, [ebp+arg_4]
.text:0000137D                 mov     edx, [ecx+1Ch]
.text:00001380                 push    edx
.text:00001381                 mov     eax, [ebp+var_408C]
.text:00001387                 push    eax
.text:00001388                 call    _ssh1_write_bignum
.text:0000138D                 add     esp, 8
.text:00001390                 add     eax, [ebp+var_408C]
.text:00001396                 mov     [ebp+var_408C], eax
.text:0000139C                 mov     ecx, [ebp+arg_4]
.text:0000139F                 mov     edx, [ecx+18h]
.text:000013A2                 push    edx
.text:000013A3                 mov     eax, [ebp+var_408C]
.text:000013A9                 push    eax
.text:000013AA                 call    _ssh1_write_bignum
.text:000013AF                 add     esp, 8
.text:000013B2                 add     eax, [ebp+var_408C]
.text:000013B8                 mov     [ebp+var_408C], eax
.text:000013BE                 mov     ecx, [ebp+arg_4]
.text:000013C1                 mov     edx, [ecx+14h]
.text:000013C4                 push    edx
.text:000013C5                 mov     eax, [ebp+var_408C]
.text:000013CB                 push    eax
.text:000013CC                 call    _ssh1_write_bignum
.text:000013D1                 add     esp, 8
.text:000013D4                 add     eax, [ebp+var_408C]
.text:000013DA                 mov     [ebp+var_408C], eax
.text:000013E0
.text:000013E0 loc_13E0:                               ; CODE XREF: _saversakey+39Dj
.text:000013E0                 mov     ecx, [ebp+var_408C]
.text:000013E6                 sub     ecx, [ebp+var_4090]
.text:000013EC                 and     ecx, 80000007h
.text:000013F2                 jns     short loc_13F9
.text:000013F4                 dec     ecx
.text:000013F5                 or      ecx, 0FFFFFFF8h
.text:000013F8                 inc     ecx
.text:000013F9
.text:000013F9 loc_13F9:                               ; CODE XREF: _saversakey+37Aj
.text:000013F9                 test    ecx, ecx
.text:000013FB                 jz      short loc_1417
.text:000013FD                 mov     edx, [ebp+var_408C]
.text:00001403                 mov     byte ptr [edx], 0
.text:00001406                 mov     eax, [ebp+var_408C]
.text:0000140C                 add     eax, 1
.text:0000140F                 mov     [ebp+var_408C], eax
.text:00001415                 jmp     short loc_13E0
.text:00001417 ; ---------------------------------------------------------------------------
.text:00001417
.text:00001417 loc_1417:                               ; CODE XREF: _saversakey+383j
.text:00001417                 cmp     [ebp+arg_8], 0
.text:0000141B                 jz      short loc_1496
.text:0000141D                 lea     ecx, [ebp+var_4084]
.text:00001423                 push    ecx
.text:00001424                 call    _MD5Init
.text:00001429                 add     esp, 4
.text:0000142C                 mov     edx, [ebp+arg_8]
.text:0000142F                 push    edx             ; char *
.text:00001430                 call    _strlen
.text:00001435                 add     esp, 4
.text:00001438                 push    eax
.text:00001439                 mov     eax, [ebp+arg_8]
.text:0000143C                 push    eax
.text:0000143D                 lea     ecx, [ebp+var_4084]
.text:00001443                 push    ecx
.text:00001444                 call    _MD5Update
.text:00001449                 add     esp, 0Ch
.text:0000144C                 lea     edx, [ebp+var_4084]
.text:00001452                 push    edx
.text:00001453                 lea     eax, [ebp+var_4020]
.text:00001459                 push    eax
.text:0000145A                 call    _MD5Final
.text:0000145F                 add     esp, 8
.text:00001462                 mov     ecx, [ebp+var_408C]
.text:00001468                 sub     ecx, [ebp+var_4090]
.text:0000146E                 push    ecx
.text:0000146F                 mov     edx, [ebp+var_4090]
.text:00001475                 push    edx
.text:00001476                 lea     eax, [ebp+var_4020]
.text:0000147C                 push    eax
.text:0000147D                 call    _des3_encrypt_pubkey
.text:00001482                 add     esp, 0Ch
.text:00001485                 push    10h
.text:00001487                 lea     ecx, [ebp+var_4020]
.text:0000148D                 push    ecx
.text:0000148E                 call    _smemclr
.text:00001493                 add     esp, 8
.text:00001496
.text:00001496 loc_1496:                               ; CODE XREF: _saversakey+3A3j
.text:00001496                 push    offset $SG87243 ; "wb"
.text:0000149B                 mov     edx, [ebp+arg_0]
.text:0000149E                 mov     eax, [edx]
.text:000014A0                 push    eax             ; char *
.text:000014A1                 call    _fopen
.text:000014A6                 add     esp, 8
.text:000014A9                 mov     [ebp+var_4094], eax
.text:000014AF                 cmp     [ebp+var_4094], 0
.text:000014B6                 jz      short loc_1521
.text:000014B8                 mov     ecx, [ebp+var_4094]
.text:000014BE                 push    ecx             ; FILE *
.text:000014BF                 mov     edx, [ebp+var_408C]
.text:000014C5                 lea     eax, [ebp+var_4008]
.text:000014CB                 sub     edx, eax
.text:000014CD                 push    edx             ; size_t
.text:000014CE                 push    1               ; size_t
.text:000014D0                 lea     ecx, [ebp+var_4008]
.text:000014D6                 push    ecx             ; void *
.text:000014D7                 call    _fwrite
.text:000014DC                 add     esp, 10h
.text:000014DF                 mov     edx, [ebp+var_408C]
.text:000014E5                 lea     ecx, [ebp+var_4008]
.text:000014EB                 sub     edx, ecx
.text:000014ED                 xor     ecx, ecx
.text:000014EF                 cmp     eax, edx
.text:000014F1                 setz    cl
.text:000014F4                 mov     [ebp+var_4098], ecx
.text:000014FA                 mov     edx, [ebp+var_4094]
.text:00001500                 push    edx             ; FILE *
.text:00001501                 call    _fclose
.text:00001506                 add     esp, 4
.text:00001509                 test    eax, eax
.text:0000150B                 jz      short loc_1517
.text:0000150D                 mov     [ebp+var_4098], 0
.text:00001517
.text:00001517 loc_1517:                               ; CODE XREF: _saversakey+493j
.text:00001517                 mov     eax, [ebp+var_4098]
.text:0000151D                 jmp     short loc_1523
.text:0000151F ; ---------------------------------------------------------------------------
.text:0000151F                 jmp     short loc_1523
.text:00001521 ; ---------------------------------------------------------------------------
.text:00001521
.text:00001521 loc_1521:                               ; CODE XREF: _saversakey+43Ej
.text:00001521                 xor     eax, eax
.text:00001523
.text:00001523 loc_1523:                               ; CODE XREF: _saversakey+4A5j
.text:00001523                                         ; _saversakey+4A7j
.text:00001523                 push    edx
.text:00001524                 mov     ecx, ebp
.text:00001526                 push    eax
.text:00001527                 lea     edx, $LN15
.text:0000152D                 call    @_RTC_CheckStackVars@8
.text:00001532                 pop     eax
.text:00001533                 pop     edx
.text:00001534                 pop     edi
.text:00001535                 mov     ecx, [ebp+var_4]
.text:00001538                 xor     ecx, ebp
.text:0000153A                 call    @__security_check_cookie@4
.text:0000153F                 add     esp, 4098h
.text:00001545                 cmp     ebp, esp
.text:00001547                 call    __RTC_CheckEsp
.text:0000154C                 mov     esp, ebp
.text:0000154E                 pop     ebp
.text:0000154F                 retn
.text:0000154F _saversakey     endp
.text:0000154F
.text:0000154F ; ---------------------------------------------------------------------------
.text:00001550 $LN15           dd 3                    ; DATA XREF: _saversakey+4AFo
.text:00001554                 dd offset $LN14
.text:00001558 $LN14           dd 0FFFFBFF8h, 4000h    ; DATA XREF: .text:00001554o
.text:00001560                 dd offset $LN11_0       ; "buf"
.text:00001564                 dd 0FFFFBFE0h, 10h
.text:0000156C                 dd offset $LN12_0       ; "keybuf"
.text:00001570                 dd 0FFFFBF7Ch, 5Ch
.text:00001578                 dd offset $LN13_0       ; "md5c"
.text:0000157C $LN13_0         db 'md5c',0             ; DATA XREF: .text:00001578o
.text:00001581 $LN12_0         db 'keybuf',0           ; DATA XREF: .text:0000156Co
.text:00001588 $LN11_0         db 'buf',0              ; DATA XREF: .text:00001560o
.text:0000158C                 db 0Ch dup(0CCh)
.text:00001598
.text:00001598 ; =============== S U B R O U T I N E =======================================
.text:00001598
.text:00001598 ; Attributes: bp-based frame
.text:00001598
.text:00001598 ; int __cdecl find_pubkey_alg(char *)
.text:00001598                 public _find_pubkey_alg
.text:00001598 _find_pubkey_alg proc near              ; CODE XREF: _ssh2_load_userkey+179p
.text:00001598                                         ; _ssh2_userkey_loadpub+E5p
.text:00001598
.text:00001598 arg_0           = dword ptr  8
.text:00001598
.text:00001598                 push    ebp
.text:00001599                 mov     ebp, esp
.text:0000159B                 push    offset $SG87323 ; "ssh-rsa"
.text:000015A0                 mov     eax, [ebp+arg_0]
.text:000015A3                 push    eax             ; char *
.text:000015A4                 call    _strcmp
.text:000015A9                 add     esp, 8
.text:000015AC                 test    eax, eax
.text:000015AE                 jnz     short loc_15B9
.text:000015B0                 mov     eax, offset _ssh_rsa
.text:000015B5                 jmp     short loc_15D9
.text:000015B7 ; ---------------------------------------------------------------------------
.text:000015B7                 jmp     short loc_15D9
.text:000015B9 ; ---------------------------------------------------------------------------
.text:000015B9
.text:000015B9 loc_15B9:                               ; CODE XREF: _find_pubkey_alg+16j
.text:000015B9                 push    offset $SG87326 ; "ssh-dss"
.text:000015BE                 mov     ecx, [ebp+arg_0]
.text:000015C1                 push    ecx             ; char *
.text:000015C2                 call    _strcmp
.text:000015C7                 add     esp, 8
.text:000015CA                 test    eax, eax
.text:000015CC                 jnz     short loc_15D7
.text:000015CE                 mov     eax, offset _ssh_dss
.text:000015D3                 jmp     short loc_15D9
.text:000015D5 ; ---------------------------------------------------------------------------
.text:000015D5                 jmp     short loc_15D9
.text:000015D7 ; ---------------------------------------------------------------------------
.text:000015D7
.text:000015D7 loc_15D7:                               ; CODE XREF: _find_pubkey_alg+34j
.text:000015D7                 xor     eax, eax
.text:000015D9
.text:000015D9 loc_15D9:                               ; CODE XREF: _find_pubkey_alg+1Dj
.text:000015D9                                         ; _find_pubkey_alg+1Fj ...
.text:000015D9                 cmp     ebp, esp
.text:000015DB                 call    __RTC_CheckEsp
.text:000015E0                 pop     ebp
.text:000015E1                 retn
.text:000015E1 _find_pubkey_alg endp
.text:000015E1
.text:000015E1 ; ---------------------------------------------------------------------------
.text:000015E2                 align 8
.text:000015E8
.text:000015E8 ; =============== S U B R O U T I N E =======================================
.text:000015E8
.text:000015E8 ; Attributes: bp-based frame
.text:000015E8
.text:000015E8 ; int __cdecl ssh2_load_userkey(int, char *, int)
.text:000015E8                 public _ssh2_load_userkey
.text:000015E8 _ssh2_load_userkey proc near
.text:000015E8
.text:000015E8 var_244         = dword ptr -244h
.text:000015E8 var_23D         = byte ptr -23Dh
.text:000015E8 var_238         = byte ptr -238h
.text:000015E8 var_210         = byte ptr -210h
.text:000015E8 var_1F4         = byte ptr -1F4h
.text:000015E8 var_190         = dword ptr -190h
.text:000015E8 var_18C         = dword ptr -18Ch
.text:000015E8 var_188         = dword ptr -188h
.text:000015E8 var_184         = dword ptr -184h
.text:000015E8 var_180         = dword ptr -180h
.text:000015E8 var_17C         = dword ptr -17Ch
.text:000015E8 var_178         = dword ptr -178h
.text:000015E8 var_170         = byte ptr -170h
.text:000015E8 var_154         = byte ptr -154h
.text:000015E8 var_120         = byte ptr -120h
.text:000015E8 var_B8          = byte ptr -0B8h
.text:000015E8 var_A4          = byte ptr -0A4h
.text:000015E8 var_8C          = dword ptr -8Ch
.text:000015E8 var_88          = dword ptr -88h
.text:000015E8 var_84          = dword ptr -84h
.text:000015E8 var_80          = dword ptr -80h
.text:000015E8 var_7C          = dword ptr -7Ch
.text:000015E8 var_74          = dword ptr -74h
.text:000015E8 var_68          = dword ptr -68h
.text:000015E8 var_60          = dword ptr -60h
.text:000015E8 var_5C          = dword ptr -5Ch
.text:000015E8 var_58          = dword ptr -58h
.text:000015E8 var_54          = dword ptr -54h
.text:000015E8 var_50          = dword ptr -50h
.text:000015E8 var_4C          = dword ptr -4Ch
.text:000015E8 var_48          = dword ptr -48h
.text:000015E8 var_44          = dword ptr -44h
.text:000015E8 var_40          = dword ptr -40h
.text:000015E8 var_3C          = dword ptr -3Ch
.text:000015E8 var_34          = byte ptr -34h
.text:000015E8 var_8           = dword ptr -8
.text:000015E8 var_4           = dword ptr -4
.text:000015E8 arg_0           = dword ptr  8
.text:000015E8 arg_4           = dword ptr  0Ch
.text:000015E8 arg_8           = dword ptr  10h
.text:000015E8
.text:000015E8                 push    ebp
.text:000015E9                 mov     ebp, esp
.text:000015EB                 sub     esp, 244h
.text:000015F1                 push    esi
.text:000015F2                 push    edi
.text:000015F3                 lea     edi, [ebp+var_244]
.text:000015F9                 mov     ecx, 91h ; 'æ'
.text:000015FE                 mov     eax, 0CCCCCCCCh
.text:00001603                 rep stosd
.text:00001605                 mov     eax, dword ptr ds:___security_cookie
.text:0000160A                 xor     eax, ebp
.text:0000160C                 mov     [ebp+var_4], eax
.text:0000160F                 mov     [ebp+var_23D], 0
.text:00001616                 cmp     [ebp+arg_4], 0
.text:0000161A                 jz      short loc_1630
.text:0000161C                 mov     eax, [ebp+arg_4]
.text:0000161F                 push    eax             ; char *
.text:00001620                 call    _strlen
.text:00001625                 add     esp, 4
.text:00001628                 mov     [ebp+var_244], eax
.text:0000162E                 jmp     short loc_163A
.text:00001630 ; ---------------------------------------------------------------------------
.text:00001630
.text:00001630 loc_1630:                               ; CODE XREF: _ssh2_load_userkey+32j
.text:00001630                 mov     [ebp+var_244], 0
.text:0000163A
.text:0000163A loc_163A:                               ; CODE XREF: _ssh2_load_userkey+46j
.text:0000163A                 mov     ecx, [ebp+var_244]
.text:00001640                 mov     [ebp+var_88], ecx
.text:00001646                 mov     [ebp+var_8C], 0
.text:00001650                 mov     [ebp+var_50], 0
.text:00001657                 mov     [ebp+var_48], 0
.text:0000165E                 mov     edx, [ebp+var_48]
.text:00001661                 mov     [ebp+var_44], edx
.text:00001664                 mov     eax, [ebp+var_44]
.text:00001667                 mov     [ebp+var_40], eax
.text:0000166A                 mov     [ebp+var_60], 0
.text:00001671                 mov     ecx, [ebp+var_60]
.text:00001674                 mov     [ebp+var_5C], ecx
.text:00001677                 push    offset $SG87359 ; "rb"
.text:0000167C                 mov     edx, [ebp+arg_0]
.text:0000167F                 mov     eax, [edx]
.text:00001681                 push    eax             ; char *
.text:00001682                 call    _fopen
.text:00001687                 add     esp, 8
.text:0000168A                 mov     [ebp+var_8], eax
.text:0000168D                 cmp     [ebp+var_8], 0
.text:00001691                 jnz     short loc_16A2
.text:00001693                 mov     [ebp+var_8C], offset $SG87361 ; "can't open file"
.text:0000169D                 jmp     $error$87362
.text:000016A2 ; ---------------------------------------------------------------------------
.text:000016A2
.text:000016A2 loc_16A2:                               ; CODE XREF: _ssh2_load_userkey+A9j
.text:000016A2                 lea     ecx, [ebp+var_34]
.text:000016A5                 push    ecx             ; int
.text:000016A6                 mov     edx, [ebp+var_8]
.text:000016A9                 push    edx             ; FILE *
.text:000016AA                 call    _read_header
.text:000016AF                 add     esp, 8
.text:000016B2                 test    eax, eax
.text:000016B4                 jnz     short loc_16BB
.text:000016B6                 jmp     $error$87362
.text:000016BB ; ---------------------------------------------------------------------------
.text:000016BB
.text:000016BB loc_16BB:                               ; CODE XREF: _ssh2_load_userkey+CCj
.text:000016BB                 push    offset $SG87365 ; "PuTTY-User-Key-File-2"
.text:000016C0                 lea     eax, [ebp+var_34]
.text:000016C3                 push    eax             ; char *
.text:000016C4                 call    _strcmp
.text:000016C9                 add     esp, 8
.text:000016CC                 test    eax, eax
.text:000016CE                 jnz     short loc_16DC
.text:000016D0                 mov     [ebp+var_84], 0
.text:000016DA                 jmp     short loc_1739
.text:000016DC ; ---------------------------------------------------------------------------
.text:000016DC
.text:000016DC loc_16DC:                               ; CODE XREF: _ssh2_load_userkey+E6j
.text:000016DC                 push    offset $SG87368 ; "PuTTY-User-Key-File-1"
.text:000016E1                 lea     ecx, [ebp+var_34]
.text:000016E4                 push    ecx             ; char *
.text:000016E5                 call    _strcmp
.text:000016EA                 add     esp, 8
.text:000016ED                 test    eax, eax
.text:000016EF                 jnz     short loc_1702
.text:000016F1                 call    _old_keyfile_warning
.text:000016F6                 mov     [ebp+var_84], 1
.text:00001700                 jmp     short loc_1739
.text:00001702 ; ---------------------------------------------------------------------------
.text:00001702
.text:00001702 loc_1702:                               ; CODE XREF: _ssh2_load_userkey+107j
.text:00001702                 push    14h             ; size_t
.text:00001704                 push    offset $SG87371 ; "PuTTY-User-Key-File-"
.text:00001709                 lea     edx, [ebp+var_34]
.text:0000170C                 push    edx             ; char *
.text:0000170D                 call    _strncmp
.text:00001712                 add     esp, 0Ch
.text:00001715                 test    eax, eax
.text:00001717                 jnz     short loc_172A
.text:00001719                 mov     [ebp+var_8C], offset $SG87372 ; "PuTTY key format too new"
.text:00001723                 jmp     $error$87362
.text:00001728 ; ---------------------------------------------------------------------------
.text:00001728                 jmp     short loc_1739
.text:0000172A ; ---------------------------------------------------------------------------
.text:0000172A
.text:0000172A loc_172A:                               ; CODE XREF: _ssh2_load_userkey+12Fj
.text:0000172A                 mov     [ebp+var_8C], offset $SG87374 ; "not a PuTTY SSH-2 private key"
.text:00001734                 jmp     $error$87362
.text:00001739 ; ---------------------------------------------------------------------------
.text:00001739
.text:00001739 loc_1739:                               ; CODE XREF: _ssh2_load_userkey+F2j
.text:00001739                                         ; _ssh2_load_userkey+118j ...
.text:00001739                 mov     [ebp+var_8C], offset $SG87375 ; "file format error"
.text:00001743                 mov     eax, [ebp+var_8]
.text:00001746                 push    eax             ; FILE *
.text:00001747                 call    _read_body
.text:0000174C                 add     esp, 4
.text:0000174F                 mov     [ebp+var_3C], eax
.text:00001752                 cmp     [ebp+var_3C], 0
.text:00001756                 jnz     short loc_175D
.text:00001758                 jmp     $error$87362
.text:0000175D ; ---------------------------------------------------------------------------
.text:0000175D
.text:0000175D loc_175D:                               ; CODE XREF: _ssh2_load_userkey+16Ej
.text:0000175D                 mov     ecx, [ebp+var_3C]
.text:00001760                 push    ecx             ; char *
.text:00001761                 call    _find_pubkey_alg
.text:00001766                 add     esp, 4
.text:00001769                 mov     [ebp+var_4C], eax
.text:0000176C                 cmp     [ebp+var_4C], 0
.text:00001770                 jnz     short loc_1783
.text:00001772                 mov     edx, [ebp+var_3C]
.text:00001775                 push    edx
.text:00001776                 call    _safefree
.text:0000177B                 add     esp, 4
.text:0000177E                 jmp     $error$87362
.text:00001783 ; ---------------------------------------------------------------------------
.text:00001783
.text:00001783 loc_1783:                               ; CODE XREF: _ssh2_load_userkey+188j
.text:00001783                 mov     eax, [ebp+var_3C]
.text:00001786                 push    eax
.text:00001787                 call    _safefree
.text:0000178C                 add     esp, 4
.text:0000178F                 lea     ecx, [ebp+var_34]
.text:00001792                 push    ecx             ; int
.text:00001793                 mov     edx, [ebp+var_8]
.text:00001796                 push    edx             ; FILE *
.text:00001797                 call    _read_header
.text:0000179C                 add     esp, 8
.text:0000179F                 test    eax, eax
.text:000017A1                 jz      short loc_17B8
.text:000017A3                 push    offset $SG87381 ; "Encryption"
.text:000017A8                 lea     eax, [ebp+var_34]
.text:000017AB                 push    eax             ; char *
.text:000017AC                 call    _strcmp
.text:000017B1                 add     esp, 8
.text:000017B4                 test    eax, eax
.text:000017B6                 jz      short loc_17BD
.text:000017B8
.text:000017B8 loc_17B8:                               ; CODE XREF: _ssh2_load_userkey+1B9j
.text:000017B8                 jmp     $error$87362
.text:000017BD ; ---------------------------------------------------------------------------
.text:000017BD
.text:000017BD loc_17BD:                               ; CODE XREF: _ssh2_load_userkey+1CEj
.text:000017BD                 mov     ecx, [ebp+var_8]
.text:000017C0                 push    ecx             ; FILE *
.text:000017C1                 call    _read_body
.text:000017C6                 add     esp, 4
.text:000017C9                 mov     [ebp+var_40], eax
.text:000017CC                 cmp     [ebp+var_40], 0
.text:000017D0                 jnz     short loc_17D7
.text:000017D2                 jmp     $error$87362
.text:000017D7 ; ---------------------------------------------------------------------------
.text:000017D7
.text:000017D7 loc_17D7:                               ; CODE XREF: _ssh2_load_userkey+1E8j
.text:000017D7                 push    offset $SG87385 ; "aes256-cbc"
.text:000017DC                 mov     edx, [ebp+var_40]
.text:000017DF                 push    edx             ; char *
.text:000017E0                 call    _strcmp
.text:000017E5                 add     esp, 8
.text:000017E8                 test    eax, eax
.text:000017EA                 jnz     short loc_17FC
.text:000017EC                 mov     [ebp+var_54], 1
.text:000017F3                 mov     [ebp+var_58], 10h
.text:000017FA                 jmp     short loc_1826
.text:000017FC ; ---------------------------------------------------------------------------
.text:000017FC
.text:000017FC loc_17FC:                               ; CODE XREF: _ssh2_load_userkey+202j
.text:000017FC                 push    offset $SG87388 ; "none"
.text:00001801                 mov     eax, [ebp+var_40]
.text:00001804                 push    eax             ; char *
.text:00001805                 call    _strcmp
.text:0000180A                 add     esp, 8
.text:0000180D                 test    eax, eax
.text:0000180F                 jnz     short loc_1821
.text:00001811                 mov     [ebp+var_54], 0
.text:00001818                 mov     [ebp+var_58], 1
.text:0000181F                 jmp     short loc_1826
.text:00001821 ; ---------------------------------------------------------------------------
.text:00001821
.text:00001821 loc_1821:                               ; CODE XREF: _ssh2_load_userkey+227j
.text:00001821                 jmp     $error$87362
.text:00001826 ; ---------------------------------------------------------------------------
.text:00001826
.text:00001826 loc_1826:                               ; CODE XREF: _ssh2_load_userkey+212j
.text:00001826                                         ; _ssh2_load_userkey+237j
.text:00001826                 lea     ecx, [ebp+var_34]
.text:00001829                 push    ecx             ; int
.text:0000182A                 mov     edx, [ebp+var_8]
.text:0000182D                 push    edx             ; FILE *
.text:0000182E                 call    _read_header
.text:00001833                 add     esp, 8
.text:00001836                 test    eax, eax
.text:00001838                 jz      short loc_184F
.text:0000183A                 push    offset $SG87392 ; "Comment"
.text:0000183F                 lea     eax, [ebp+var_34]
.text:00001842                 push    eax             ; char *
.text:00001843                 call    _strcmp
.text:00001848                 add     esp, 8
.text:0000184B                 test    eax, eax
.text:0000184D                 jz      short loc_1854
.text:0000184F
.text:0000184F loc_184F:                               ; CODE XREF: _ssh2_load_userkey+250j
.text:0000184F                 jmp     $error$87362
.text:00001854 ; ---------------------------------------------------------------------------
.text:00001854
.text:00001854 loc_1854:                               ; CODE XREF: _ssh2_load_userkey+265j
.text:00001854                 mov     ecx, [ebp+var_8]
.text:00001857                 push    ecx             ; FILE *
.text:00001858                 call    _read_body
.text:0000185D                 add     esp, 4
.text:00001860                 mov     [ebp+var_44], eax
.text:00001863                 cmp     [ebp+var_44], 0
.text:00001867                 jnz     short loc_186E
.text:00001869                 jmp     $error$87362
.text:0000186E ; ---------------------------------------------------------------------------
.text:0000186E
.text:0000186E loc_186E:                               ; CODE XREF: _ssh2_load_userkey+27Fj
.text:0000186E                 lea     edx, [ebp+var_34]
.text:00001871                 push    edx             ; int
.text:00001872                 mov     eax, [ebp+var_8]
.text:00001875                 push    eax             ; FILE *
.text:00001876                 call    _read_header
.text:0000187B                 add     esp, 8
.text:0000187E                 test    eax, eax
.text:00001880                 jz      short loc_1897
.text:00001882                 push    offset $SG87397 ; "Public-Lines"
.text:00001887                 lea     ecx, [ebp+var_34]
.text:0000188A                 push    ecx             ; char *
.text:0000188B                 call    _strcmp
.text:00001890                 add     esp, 8
.text:00001893                 test    eax, eax
.text:00001895                 jz      short loc_189C
.text:00001897
.text:00001897 loc_1897:                               ; CODE XREF: _ssh2_load_userkey+298j
.text:00001897                 jmp     $error$87362
.text:0000189C ; ---------------------------------------------------------------------------
.text:0000189C
.text:0000189C loc_189C:                               ; CODE XREF: _ssh2_load_userkey+2ADj
.text:0000189C                 mov     edx, [ebp+var_8]
.text:0000189F                 push    edx             ; FILE *
.text:000018A0                 call    _read_body
.text:000018A5                 add     esp, 4
.text:000018A8                 mov     [ebp+var_3C], eax
.text:000018AB                 cmp     [ebp+var_3C], 0
.text:000018AF                 jnz     short loc_18B6
.text:000018B1                 jmp     $error$87362
.text:000018B6 ; ---------------------------------------------------------------------------
.text:000018B6
.text:000018B6 loc_18B6:                               ; CODE XREF: _ssh2_load_userkey+2C7j
.text:000018B6                 mov     eax, [ebp+var_3C]
.text:000018B9                 push    eax             ; char *
.text:000018BA                 call    _atoi
.text:000018BF                 add     esp, 4
.text:000018C2                 mov     [ebp+var_7C], eax
.text:000018C5                 mov     ecx, [ebp+var_3C]
.text:000018C8                 push    ecx
.text:000018C9                 call    _safefree
.text:000018CE                 add     esp, 4
.text:000018D1                 lea     edx, [ebp+var_68]
.text:000018D4                 push    edx             ; int
.text:000018D5                 mov     eax, [ebp+var_7C]
.text:000018D8                 push    eax             ; int
.text:000018D9                 mov     ecx, [ebp+var_8]
.text:000018DC                 push    ecx             ; FILE *
.text:000018DD                 call    _read_blob
.text:000018E2                 add     esp, 0Ch
.text:000018E5                 mov     [ebp+var_5C], eax
.text:000018E8                 cmp     [ebp+var_5C], 0
.text:000018EC                 jnz     short loc_18F3
.text:000018EE                 jmp     $error$87362
.text:000018F3 ; ---------------------------------------------------------------------------
.text:000018F3
.text:000018F3 loc_18F3:                               ; CODE XREF: _ssh2_load_userkey+304j
.text:000018F3                 lea     edx, [ebp+var_34]
.text:000018F6                 push    edx             ; int
.text:000018F7                 mov     eax, [ebp+var_8]
.text:000018FA                 push    eax             ; FILE *
.text:000018FB                 call    _read_header
.text:00001900                 add     esp, 8
.text:00001903                 test    eax, eax
.text:00001905                 jz      short loc_191C
.text:00001907                 push    offset $SG87404 ; "Private-Lines"
.text:0000190C                 lea     ecx, [ebp+var_34]
.text:0000190F                 push    ecx             ; char *
.text:00001910                 call    _strcmp
.text:00001915                 add     esp, 8
.text:00001918                 test    eax, eax
.text:0000191A                 jz      short loc_1921
.text:0000191C
.text:0000191C loc_191C:                               ; CODE XREF: _ssh2_load_userkey+31Dj
.text:0000191C                 jmp     $error$87362
.text:00001921 ; ---------------------------------------------------------------------------
.text:00001921
.text:00001921 loc_1921:                               ; CODE XREF: _ssh2_load_userkey+332j
.text:00001921                 mov     edx, [ebp+var_8]
.text:00001924                 push    edx             ; FILE *
.text:00001925                 call    _read_body
.text:0000192A                 add     esp, 4
.text:0000192D                 mov     [ebp+var_3C], eax
.text:00001930                 cmp     [ebp+var_3C], 0
.text:00001934                 jnz     short loc_193B
.text:00001936                 jmp     $error$87362
.text:0000193B ; ---------------------------------------------------------------------------
.text:0000193B
.text:0000193B loc_193B:                               ; CODE XREF: _ssh2_load_userkey+34Cj
.text:0000193B                 mov     eax, [ebp+var_3C]
.text:0000193E                 push    eax             ; char *
.text:0000193F                 call    _atoi
.text:00001944                 add     esp, 4
.text:00001947                 mov     [ebp+var_7C], eax
.text:0000194A                 mov     ecx, [ebp+var_3C]
.text:0000194D                 push    ecx
.text:0000194E                 call    _safefree
.text:00001953                 add     esp, 4
.text:00001956                 mov     [ebp+var_23D], 1
.text:0000195D                 lea     edx, [ebp+var_74]
.text:00001960                 push    edx             ; int
.text:00001961                 mov     eax, [ebp+var_7C]
.text:00001964                 push    eax             ; int
.text:00001965                 mov     ecx, [ebp+var_8]
.text:00001968                 push    ecx             ; FILE *
.text:00001969                 call    _read_blob
.text:0000196E                 add     esp, 0Ch
.text:00001971                 mov     [ebp+var_60], eax
.text:00001974                 cmp     [ebp+var_60], 0
.text:00001978                 jnz     short loc_197F
.text:0000197A                 jmp     $error$87362
.text:0000197F ; ---------------------------------------------------------------------------
.text:0000197F
.text:0000197F loc_197F:                               ; CODE XREF: _ssh2_load_userkey+390j
.text:0000197F                 lea     edx, [ebp+var_34]
.text:00001982                 push    edx             ; int
.text:00001983                 mov     eax, [ebp+var_8]
.text:00001986                 push    eax             ; FILE *
.text:00001987                 call    _read_header
.text:0000198C                 add     esp, 8
.text:0000198F                 test    eax, eax
.text:00001991                 jnz     short loc_1998
.text:00001993                 jmp     $error$87362
.text:00001998 ; ---------------------------------------------------------------------------
.text:00001998
.text:00001998 loc_1998:                               ; CODE XREF: _ssh2_load_userkey+3A9j
.text:00001998                 push    offset $SG87411 ; "Private-MAC"
.text:0000199D                 lea     ecx, [ebp+var_34]
.text:000019A0                 push    ecx             ; char *
.text:000019A1                 call    _strcmp
.text:000019A6                 add     esp, 8
.text:000019A9                 test    eax, eax
.text:000019AB                 jnz     short loc_19D0
.text:000019AD                 mov     edx, [ebp+var_8]
.text:000019B0                 push    edx             ; FILE *
.text:000019B1                 call    _read_body
.text:000019B6                 add     esp, 4
.text:000019B9                 mov     [ebp+var_48], eax
.text:000019BC                 cmp     [ebp+var_48], 0
.text:000019C0                 jnz     short loc_19C7
.text:000019C2                 jmp     $error$87362
.text:000019C7 ; ---------------------------------------------------------------------------
.text:000019C7
.text:000019C7 loc_19C7:                               ; CODE XREF: _ssh2_load_userkey+3D8j
.text:000019C7                 mov     [ebp+var_80], 1
.text:000019CE                 jmp     short loc_1A16
.text:000019D0 ; ---------------------------------------------------------------------------
.text:000019D0
.text:000019D0 loc_19D0:                               ; CODE XREF: _ssh2_load_userkey+3C3j
.text:000019D0                 push    offset $SG87416 ; "Private-Hash"
.text:000019D5                 lea     eax, [ebp+var_34]
.text:000019D8                 push    eax             ; char *
.text:000019D9                 call    _strcmp
.text:000019DE                 add     esp, 8
.text:000019E1                 test    eax, eax
.text:000019E3                 jnz     short loc_1A11
.text:000019E5                 cmp     [ebp+var_84], 0
.text:000019EC                 jz      short loc_1A11
.text:000019EE                 mov     ecx, [ebp+var_8]
.text:000019F1                 push    ecx             ; FILE *
.text:000019F2                 call    _read_body
.text:000019F7                 add     esp, 4
.text:000019FA                 mov     [ebp+var_48], eax
.text:000019FD                 cmp     [ebp+var_48], 0
.text:00001A01                 jnz     short loc_1A08
.text:00001A03                 jmp     $error$87362
.text:00001A08 ; ---------------------------------------------------------------------------
.text:00001A08
.text:00001A08 loc_1A08:                               ; CODE XREF: _ssh2_load_userkey+419j
.text:00001A08                 mov     [ebp+var_80], 0
.text:00001A0F                 jmp     short loc_1A16
.text:00001A11 ; ---------------------------------------------------------------------------
.text:00001A11
.text:00001A11 loc_1A11:                               ; CODE XREF: _ssh2_load_userkey+3FBj
.text:00001A11                                         ; _ssh2_load_userkey+404j
.text:00001A11                 jmp     $error$87362
.text:00001A16 ; ---------------------------------------------------------------------------
.text:00001A16
.text:00001A16 loc_1A16:                               ; CODE XREF: _ssh2_load_userkey+3E6j
.text:00001A16                                         ; _ssh2_load_userkey+427j
.text:00001A16                 mov     edx, [ebp+var_8]
.text:00001A19                 push    edx             ; FILE *
.text:00001A1A                 call    _fclose
.text:00001A1F                 add     esp, 4
.text:00001A22                 mov     [ebp+var_8], 0
.text:00001A29                 cmp     [ebp+var_54], 0
.text:00001A2D                 jz      loc_1B3B
.text:00001A33                 cmp     [ebp+arg_4], 0
.text:00001A37                 jnz     short loc_1A3E
.text:00001A39                 jmp     $error$87362
.text:00001A3E ; ---------------------------------------------------------------------------
.text:00001A3E
.text:00001A3E loc_1A3E:                               ; CODE XREF: _ssh2_load_userkey+44Fj
.text:00001A3E                 cmp     [ebp+var_23D], 0
.text:00001A45                 jnz     short loc_1A54
.text:00001A47                 push    offset $LN65    ; "private_blob_len"
.text:00001A4C                 call    __RTC_UninitUse
.text:00001A51                 add     esp, 4
.text:00001A54
.text:00001A54 loc_1A54:                               ; CODE XREF: _ssh2_load_userkey+45Dj
.text:00001A54                 mov     eax, [ebp+var_74]
.text:00001A57                 cdq
.text:00001A58                 idiv    [ebp+var_58]
.text:00001A5B                 test    edx, edx
.text:00001A5D                 jz      short loc_1A64
.text:00001A5F                 jmp     $error$87362
.text:00001A64 ; ---------------------------------------------------------------------------
.text:00001A64
.text:00001A64 loc_1A64:                               ; CODE XREF: _ssh2_load_userkey+475j
.text:00001A64                 lea     eax, [ebp+var_120]
.text:00001A6A                 push    eax
.text:00001A6B                 call    _SHA_Init
.text:00001A70                 add     esp, 4
.text:00001A73                 push    4
.text:00001A75                 push    offset $SG87426
.text:00001A7A                 lea     ecx, [ebp+var_120]
.text:00001A80                 push    ecx
.text:00001A81                 call    _SHA_Bytes
.text:00001A86                 add     esp, 0Ch
.text:00001A89                 mov     edx, [ebp+var_88]
.text:00001A8F                 push    edx
.text:00001A90                 mov     eax, [ebp+arg_4]
.text:00001A93                 push    eax
.text:00001A94                 lea     ecx, [ebp+var_120]
.text:00001A9A                 push    ecx
.text:00001A9B                 call    _SHA_Bytes
.text:00001AA0                 add     esp, 0Ch
.text:00001AA3                 lea     edx, [ebp+var_B8]
.text:00001AA9                 push    edx
.text:00001AAA                 lea     eax, [ebp+var_120]
.text:00001AB0                 push    eax
.text:00001AB1                 call    _SHA_Final
.text:00001AB6                 add     esp, 8
.text:00001AB9                 lea     ecx, [ebp+var_120]
.text:00001ABF                 push    ecx
.text:00001AC0                 call    _SHA_Init
.text:00001AC5                 add     esp, 4
.text:00001AC8                 push    4
.text:00001ACA                 push    offset $SG87427
.text:00001ACF                 lea     edx, [ebp+var_120]
.text:00001AD5                 push    edx
.text:00001AD6                 call    _SHA_Bytes
.text:00001ADB                 add     esp, 0Ch
.text:00001ADE                 mov     eax, [ebp+var_88]
.text:00001AE4                 push    eax
.text:00001AE5                 mov     ecx, [ebp+arg_4]
.text:00001AE8                 push    ecx
.text:00001AE9                 lea     edx, [ebp+var_120]
.text:00001AEF                 push    edx
.text:00001AF0                 call    _SHA_Bytes
.text:00001AF5                 add     esp, 0Ch
.text:00001AF8                 lea     eax, [ebp+var_A4]
.text:00001AFE                 push    eax
.text:00001AFF                 lea     ecx, [ebp+var_120]
.text:00001B05                 push    ecx
.text:00001B06                 call    _SHA_Final
.text:00001B0B                 add     esp, 8
.text:00001B0E                 cmp     [ebp+var_23D], 0
.text:00001B15                 jnz     short loc_1B24
.text:00001B17                 push    offset $LN65    ; "private_blob_len"
.text:00001B1C                 call    __RTC_UninitUse
.text:00001B21                 add     esp, 4
.text:00001B24
.text:00001B24 loc_1B24:                               ; CODE XREF: _ssh2_load_userkey+52Dj
.text:00001B24                 mov     edx, [ebp+var_74]
.text:00001B27                 push    edx
.text:00001B28                 mov     eax, [ebp+var_60]
.text:00001B2B                 push    eax
.text:00001B2C                 lea     ecx, [ebp+var_B8]
.text:00001B32                 push    ecx
.text:00001B33                 call    _aes256_decrypt_pubkey
.text:00001B38                 add     esp, 0Ch
.text:00001B3B
.text:00001B3B loc_1B3B:                               ; CODE XREF: _ssh2_load_userkey+445j
.text:00001B3B                 cmp     [ebp+var_84], 0
.text:00001B42                 jz      short loc_1B7B
.text:00001B44                 mov     edx, [ebp+var_60]
.text:00001B47                 mov     [ebp+var_178], edx
.text:00001B4D                 cmp     [ebp+var_23D], 0
.text:00001B54                 jnz     short loc_1B63
.text:00001B56                 push    offset $LN65    ; "private_blob_len"
.text:00001B5B                 call    __RTC_UninitUse
.text:00001B60                 add     esp, 4
.text:00001B63
.text:00001B63 loc_1B63:                               ; CODE XREF: _ssh2_load_userkey+56Cj
.text:00001B63                 mov     eax, [ebp+var_74]
.text:00001B66                 mov     [ebp+var_17C], eax
.text:00001B6C                 mov     [ebp+var_180], 0
.text:00001B76                 jmp     loc_1EC5
.text:00001B7B ; ---------------------------------------------------------------------------
.text:00001B7B
.text:00001B7B loc_1B7B:                               ; CODE XREF: _ssh2_load_userkey+55Aj
.text:00001B7B                 mov     ecx, [ebp+var_4C]
.text:00001B7E                 mov     edx, [ecx+30h]
.text:00001B81                 push    edx             ; char *
.text:00001B82                 call    _strlen
.text:00001B87                 add     esp, 4
.text:00001B8A                 mov     [ebp+var_188], eax
.text:00001B90                 mov     eax, [ebp+var_40]
.text:00001B93                 push    eax             ; char *
.text:00001B94                 call    _strlen
.text:00001B99                 add     esp, 4
.text:00001B9C                 mov     [ebp+var_18C], eax
.text:00001BA2                 mov     ecx, [ebp+var_44]
.text:00001BA5                 push    ecx             ; char *
.text:00001BA6                 call    _strlen
.text:00001BAB                 add     esp, 4
.text:00001BAE                 mov     [ebp+var_190], eax
.text:00001BB4                 cmp     [ebp+var_23D], 0
.text:00001BBB                 jnz     short loc_1BCA
.text:00001BBD                 push    offset $LN65    ; "private_blob_len"
.text:00001BC2                 call    __RTC_UninitUse
.text:00001BC7                 add     esp, 4
.text:00001BCA
.text:00001BCA loc_1BCA:                               ; CODE XREF: _ssh2_load_userkey+5D3j
.text:00001BCA                 mov     edx, [ebp+var_18C]
.text:00001BD0                 mov     eax, [ebp+var_188]
.text:00001BD6                 lea     ecx, [eax+edx+8]
.text:00001BDA                 mov     edx, [ebp+var_190]
.text:00001BE0                 lea     eax, [ecx+edx+4]
.text:00001BE4                 mov     ecx, [ebp+var_68]
.text:00001BE7                 lea     edx, [eax+ecx+4]
.text:00001BEB                 mov     eax, [ebp+var_74]
.text:00001BEE                 lea     ecx, [edx+eax+4]
.text:00001BF2                 mov     [ebp+var_17C], ecx
.text:00001BF8                 push    1
.text:00001BFA                 mov     edx, [ebp+var_17C]
.text:00001C00                 push    edx
.text:00001C01                 call    _safemalloc
.text:00001C06                 add     esp, 8
.text:00001C09                 mov     [ebp+var_178], eax
.text:00001C0F                 mov     eax, [ebp+var_178]
.text:00001C15                 mov     [ebp+var_184], eax
.text:00001C1B                 mov     ecx, [ebp+var_188]
.text:00001C21                 sar     ecx, 18h
.text:00001C24                 mov     edx, [ebp+var_184]
.text:00001C2A                 mov     [edx], cl
.text:00001C2C                 mov     eax, [ebp+var_188]
.text:00001C32                 sar     eax, 10h
.text:00001C35                 mov     ecx, [ebp+var_184]
.text:00001C3B                 mov     [ecx+1], al
.text:00001C3E                 mov     edx, [ebp+var_188]
.text:00001C44                 sar     edx, 8
.text:00001C47                 mov     eax, [ebp+var_184]
.text:00001C4D                 mov     [eax+2], dl
.text:00001C50                 mov     ecx, [ebp+var_184]
.text:00001C56                 mov     dl, byte ptr [ebp+var_188]
.text:00001C5C                 mov     [ecx+3], dl
.text:00001C5F                 mov     eax, [ebp+var_188]
.text:00001C65                 push    eax             ; size_t
.text:00001C66                 mov     ecx, [ebp+var_4C]
.text:00001C69                 mov     edx, [ecx+30h]
.text:00001C6C                 push    edx             ; void *
.text:00001C6D                 mov     eax, [ebp+var_184]
.text:00001C73                 add     eax, 4
.text:00001C76                 push    eax             ; void *
.text:00001C77                 call    _memcpy
.text:00001C7C                 add     esp, 0Ch
.text:00001C7F                 mov     ecx, [ebp+var_188]
.text:00001C85                 mov     edx, [ebp+var_184]
.text:00001C8B                 lea     eax, [edx+ecx+4]
.text:00001C8F                 mov     [ebp+var_184], eax
.text:00001C95                 mov     ecx, [ebp+var_18C]
.text:00001C9B                 sar     ecx, 18h
.text:00001C9E                 mov     edx, [ebp+var_184]
.text:00001CA4                 mov     [edx], cl
.text:00001CA6                 mov     eax, [ebp+var_18C]
.text:00001CAC                 sar     eax, 10h
.text:00001CAF                 mov     ecx, [ebp+var_184]
.text:00001CB5                 mov     [ecx+1], al
.text:00001CB8                 mov     edx, [ebp+var_18C]
.text:00001CBE                 sar     edx, 8
.text:00001CC1                 mov     eax, [ebp+var_184]
.text:00001CC7                 mov     [eax+2], dl
.text:00001CCA                 mov     ecx, [ebp+var_184]
.text:00001CD0                 mov     dl, byte ptr [ebp+var_18C]
.text:00001CD6                 mov     [ecx+3], dl
.text:00001CD9                 mov     eax, [ebp+var_18C]
.text:00001CDF                 push    eax             ; size_t
.text:00001CE0                 mov     ecx, [ebp+var_40]
.text:00001CE3                 push    ecx             ; void *
.text:00001CE4                 mov     edx, [ebp+var_184]
.text:00001CEA                 add     edx, 4
.text:00001CED                 push    edx             ; void *
.text:00001CEE                 call    _memcpy
.text:00001CF3                 add     esp, 0Ch
.text:00001CF6                 mov     eax, [ebp+var_18C]
.text:00001CFC                 mov     ecx, [ebp+var_184]
.text:00001D02                 lea     edx, [ecx+eax+4]
.text:00001D06                 mov     [ebp+var_184], edx
.text:00001D0C                 mov     eax, [ebp+var_190]
.text:00001D12                 sar     eax, 18h
.text:00001D15                 mov     ecx, [ebp+var_184]
.text:00001D1B                 mov     [ecx], al
.text:00001D1D                 mov     edx, [ebp+var_190]
.text:00001D23                 sar     edx, 10h
.text:00001D26                 mov     eax, [ebp+var_184]
.text:00001D2C                 mov     [eax+1], dl
.text:00001D2F                 mov     ecx, [ebp+var_190]
.text:00001D35                 sar     ecx, 8
.text:00001D38                 mov     edx, [ebp+var_184]
.text:00001D3E                 mov     [edx+2], cl
.text:00001D41                 mov     eax, [ebp+var_184]
.text:00001D47                 mov     cl, byte ptr [ebp+var_190]
.text:00001D4D                 mov     [eax+3], cl
.text:00001D50                 mov     edx, [ebp+var_190]
.text:00001D56                 push    edx             ; size_t
.text:00001D57                 mov     eax, [ebp+var_44]
.text:00001D5A                 push    eax             ; void *
.text:00001D5B                 mov     ecx, [ebp+var_184]
.text:00001D61                 add     ecx, 4
.text:00001D64                 push    ecx             ; void *
.text:00001D65                 call    _memcpy
.text:00001D6A                 add     esp, 0Ch
.text:00001D6D                 mov     edx, [ebp+var_190]
.text:00001D73                 mov     eax, [ebp+var_184]
.text:00001D79                 lea     ecx, [eax+edx+4]
.text:00001D7D                 mov     [ebp+var_184], ecx
.text:00001D83                 mov     edx, [ebp+var_68]
.text:00001D86                 sar     edx, 18h
.text:00001D89                 mov     eax, [ebp+var_184]
.text:00001D8F                 mov     [eax], dl
.text:00001D91                 mov     ecx, [ebp+var_68]
.text:00001D94                 sar     ecx, 10h
.text:00001D97                 mov     edx, [ebp+var_184]
.text:00001D9D                 mov     [edx+1], cl
.text:00001DA0                 mov     eax, [ebp+var_68]
.text:00001DA3                 sar     eax, 8
.text:00001DA6                 mov     ecx, [ebp+var_184]
.text:00001DAC                 mov     [ecx+2], al
.text:00001DAF                 mov     edx, [ebp+var_184]
.text:00001DB5                 mov     al, byte ptr [ebp+var_68]
.text:00001DB8                 mov     [edx+3], al
.text:00001DBB                 mov     ecx, [ebp+var_68]
.text:00001DBE                 push    ecx             ; size_t
.text:00001DBF                 mov     edx, [ebp+var_5C]
.text:00001DC2                 push    edx             ; void *
.text:00001DC3                 mov     eax, [ebp+var_184]
.text:00001DC9                 add     eax, 4
.text:00001DCC                 push    eax             ; void *
.text:00001DCD                 call    _memcpy
.text:00001DD2                 add     esp, 0Ch
.text:00001DD5                 mov     ecx, [ebp+var_68]
.text:00001DD8                 mov     edx, [ebp+var_184]
.text:00001DDE                 lea     eax, [edx+ecx+4]
.text:00001DE2                 mov     [ebp+var_184], eax
.text:00001DE8                 cmp     [ebp+var_23D], 0
.text:00001DEF                 jnz     short loc_1DFE
.text:00001DF1                 push    offset $LN65    ; "private_blob_len"
.text:00001DF6                 call    __RTC_UninitUse
.text:00001DFB                 add     esp, 4
.text:00001DFE
.text:00001DFE loc_1DFE:                               ; CODE XREF: _ssh2_load_userkey+807j
.text:00001DFE                 mov     ecx, [ebp+var_74]
.text:00001E01                 sar     ecx, 18h
.text:00001E04                 mov     edx, [ebp+var_184]
.text:00001E0A                 mov     [edx], cl
.text:00001E0C                 cmp     [ebp+var_23D], 0
.text:00001E13                 jnz     short loc_1E22
.text:00001E15                 push    offset $LN65    ; "private_blob_len"
.text:00001E1A                 call    __RTC_UninitUse
.text:00001E1F                 add     esp, 4
.text:00001E22
.text:00001E22 loc_1E22:                               ; CODE XREF: _ssh2_load_userkey+82Bj
.text:00001E22                 mov     eax, [ebp+var_74]
.text:00001E25                 sar     eax, 10h
.text:00001E28                 mov     ecx, [ebp+var_184]
.text:00001E2E                 mov     [ecx+1], al
.text:00001E31                 cmp     [ebp+var_23D], 0
.text:00001E38                 jnz     short loc_1E47
.text:00001E3A                 push    offset $LN65    ; "private_blob_len"
.text:00001E3F                 call    __RTC_UninitUse
.text:00001E44                 add     esp, 4
.text:00001E47
.text:00001E47 loc_1E47:                               ; CODE XREF: _ssh2_load_userkey+850j
.text:00001E47                 mov     edx, [ebp+var_74]
.text:00001E4A                 sar     edx, 8
.text:00001E4D                 mov     eax, [ebp+var_184]
.text:00001E53                 mov     [eax+2], dl
.text:00001E56                 mov     ecx, [ebp+var_184]
.text:00001E5C                 mov     dl, byte ptr [ebp+var_74]
.text:00001E5F                 mov     [ecx+3], dl
.text:00001E62                 cmp     [ebp+var_23D], 0
.text:00001E69                 jnz     short loc_1E78
.text:00001E6B                 push    offset $LN65    ; "private_blob_len"
.text:00001E70                 call    __RTC_UninitUse
.text:00001E75                 add     esp, 4
.text:00001E78
.text:00001E78 loc_1E78:                               ; CODE XREF: _ssh2_load_userkey+881j
.text:00001E78                 mov     eax, [ebp+var_74]
.text:00001E7B                 push    eax             ; size_t
.text:00001E7C                 mov     ecx, [ebp+var_60]
.text:00001E7F                 push    ecx             ; void *
.text:00001E80                 mov     edx, [ebp+var_184]
.text:00001E86                 add     edx, 4
.text:00001E89                 push    edx             ; void *
.text:00001E8A                 call    _memcpy
.text:00001E8F                 add     esp, 0Ch
.text:00001E92                 cmp     [ebp+var_23D], 0
.text:00001E99                 jnz     short loc_1EA8
.text:00001E9B                 push    offset $LN65    ; "private_blob_len"
.text:00001EA0                 call    __RTC_UninitUse
.text:00001EA5                 add     esp, 4
.text:00001EA8
.text:00001EA8 loc_1EA8:                               ; CODE XREF: _ssh2_load_userkey+8B1j
.text:00001EA8                 mov     eax, [ebp+var_74]
.text:00001EAB                 mov     ecx, [ebp+var_184]
.text:00001EB1                 lea     edx, [ecx+eax+4]
.text:00001EB5                 mov     [ebp+var_184], edx
.text:00001EBB                 mov     [ebp+var_180], 1
.text:00001EC5
.text:00001EC5 loc_1EC5:                               ; CODE XREF: _ssh2_load_userkey+58Ej
.text:00001EC5                 cmp     [ebp+var_80], 0
.text:00001EC9                 jz      loc_1F91
.text:00001ECF                 mov     ecx, 7
.text:00001ED4                 mov     esi, offset $SG87465 ; "putty-private-key-file-mac-key"
.text:00001ED9                 lea     edi, [ebp+var_238]
.text:00001EDF                 rep movsd
.text:00001EE1                 movsw
.text:00001EE3                 movsb
.text:00001EE4                 lea     eax, [ebp+var_1F4]
.text:00001EEA                 push    eax
.text:00001EEB                 call    _SHA_Init
.text:00001EF0                 add     esp, 4
.text:00001EF3                 push    1Eh
.text:00001EF5                 lea     ecx, [ebp+var_238]
.text:00001EFB                 push    ecx
.text:00001EFC                 lea     edx, [ebp+var_1F4]
.text:00001F02                 push    edx
.text:00001F03                 call    _SHA_Bytes
.text:00001F08                 add     esp, 0Ch
.text:00001F0B                 cmp     [ebp+var_54], 0
.text:00001F0F                 jz      short loc_1F31
.text:00001F11                 cmp     [ebp+arg_4], 0
.text:00001F15                 jz      short loc_1F31
.text:00001F17                 mov     eax, [ebp+var_88]
.text:00001F1D                 push    eax
.text:00001F1E                 mov     ecx, [ebp+arg_4]
.text:00001F21                 push    ecx
.text:00001F22                 lea     edx, [ebp+var_1F4]
.text:00001F28                 push    edx
.text:00001F29                 call    _SHA_Bytes
.text:00001F2E                 add     esp, 0Ch
.text:00001F31
.text:00001F31 loc_1F31:                               ; CODE XREF: _ssh2_load_userkey+927j
.text:00001F31                                         ; _ssh2_load_userkey+92Dj
.text:00001F31                 lea     eax, [ebp+var_210]
.text:00001F37                 push    eax
.text:00001F38                 lea     ecx, [ebp+var_1F4]
.text:00001F3E                 push    ecx
.text:00001F3F                 call    _SHA_Final
.text:00001F44                 add     esp, 8
.text:00001F47                 lea     edx, [ebp+var_170]
.text:00001F4D                 push    edx
.text:00001F4E                 mov     eax, [ebp+var_17C]
.text:00001F54                 push    eax
.text:00001F55                 mov     ecx, [ebp+var_178]
.text:00001F5B                 push    ecx
.text:00001F5C                 push    14h
.text:00001F5E                 lea     edx, [ebp+var_210]
.text:00001F64                 push    edx
.text:00001F65                 call    _hmac_sha1_simple
.text:00001F6A                 add     esp, 14h
.text:00001F6D                 push    14h
.text:00001F6F                 lea     eax, [ebp+var_210]
.text:00001F75                 push    eax
.text:00001F76                 call    _smemclr
.text:00001F7B                 add     esp, 8
.text:00001F7E                 push    60h ; '`'
.text:00001F80                 lea     ecx, [ebp+var_1F4]
.text:00001F86                 push    ecx
.text:00001F87                 call    _smemclr
.text:00001F8C                 add     esp, 8
.text:00001F8F                 jmp     short loc_1FAE
.text:00001F91 ; ---------------------------------------------------------------------------
.text:00001F91
.text:00001F91 loc_1F91:                               ; CODE XREF: _ssh2_load_userkey+8E1j
.text:00001F91                 lea     edx, [ebp+var_170]
.text:00001F97                 push    edx
.text:00001F98                 mov     eax, [ebp+var_17C]
.text:00001F9E                 push    eax
.text:00001F9F                 mov     ecx, [ebp+var_178]
.text:00001FA5                 push    ecx
.text:00001FA6                 call    _SHA_Simple
.text:00001FAB                 add     esp, 0Ch
.text:00001FAE
.text:00001FAE loc_1FAE:                               ; CODE XREF: _ssh2_load_userkey+9A7j
.text:00001FAE                 cmp     [ebp+var_180], 0
.text:00001FB5                 jz      short loc_1FDC
.text:00001FB7                 mov     edx, [ebp+var_17C]
.text:00001FBD                 push    edx
.text:00001FBE                 mov     eax, [ebp+var_178]
.text:00001FC4                 push    eax
.text:00001FC5                 call    _smemclr
.text:00001FCA                 add     esp, 8
.text:00001FCD                 mov     ecx, [ebp+var_178]
.text:00001FD3                 push    ecx
.text:00001FD4                 call    _safefree
.text:00001FD9                 add     esp, 4
.text:00001FDC
.text:00001FDC loc_1FDC:                               ; CODE XREF: _ssh2_load_userkey+9CDj
.text:00001FDC                 mov     [ebp+var_7C], 0
.text:00001FE3                 jmp     short loc_1FEE
.text:00001FE5 ; ---------------------------------------------------------------------------
.text:00001FE5
.text:00001FE5 loc_1FE5:                               ; CODE XREF: _ssh2_load_userkey+A30j
.text:00001FE5                 mov     edx, [ebp+var_7C]
.text:00001FE8                 add     edx, 1
.text:00001FEB                 mov     [ebp+var_7C], edx
.text:00001FEE
.text:00001FEE loc_1FEE:                               ; CODE XREF: _ssh2_load_userkey+9FBj
.text:00001FEE                 cmp     [ebp+var_7C], 14h
.text:00001FF2                 jge     short loc_201A
.text:00001FF4                 mov     eax, [ebp+var_7C]
.text:00001FF7                 movzx   ecx, [ebp+eax+var_170]
.text:00001FFF                 push    ecx
.text:00002000                 push    offset $SG87472 ; "%02x"
.text:00002005                 mov     edx, [ebp+var_7C]
.text:00002008                 lea     eax, [ebp+edx*2+var_154]
.text:0000200F                 push    eax             ; char *
.text:00002010                 call    _sprintf
.text:00002015                 add     esp, 0Ch
.text:00002018                 jmp     short loc_1FE5
.text:0000201A ; ---------------------------------------------------------------------------
.text:0000201A
.text:0000201A loc_201A:                               ; CODE XREF: _ssh2_load_userkey+A0Aj
.text:0000201A                 lea     ecx, [ebp+var_154]
.text:00002020                 push    ecx             ; char *
.text:00002021                 mov     edx, [ebp+var_48]
.text:00002024                 push    edx             ; char *
.text:00002025                 call    _strcmp
.text:0000202A                 add     esp, 8
.text:0000202D                 test    eax, eax
.text:0000202F                 jz      short loc_2060
.text:00002031                 cmp     [ebp+var_54], 0
.text:00002035                 jz      short loc_204A
.text:00002037                 mov     [ebp+var_8C], offset $SG87475 ; "wrong passphrase"
.text:00002041                 mov     [ebp+var_50], offset _ssh2_wrong_passphrase
.text:00002048                 jmp     short loc_205B
.text:0000204A ; ---------------------------------------------------------------------------
.text:0000204A
.text:0000204A loc_204A:                               ; CODE XREF: _ssh2_load_userkey+A4Dj
.text:0000204A                 mov     [ebp+var_8C], offset $SG87477 ; "MAC failed"
.text:00002054                 mov     [ebp+var_50], 0
.text:0000205B
.text:0000205B loc_205B:                               ; CODE XREF: _ssh2_load_userkey+A60j
.text:0000205B                 jmp     $error$87362
.text:00002060 ; ---------------------------------------------------------------------------
.text:00002060
.text:00002060 loc_2060:                               ; CODE XREF: _ssh2_load_userkey+A47j
.text:00002060                 mov     eax, [ebp+var_48]
.text:00002063                 push    eax
.text:00002064                 call    _safefree
.text:00002069                 add     esp, 4
.text:0000206C                 mov     [ebp+var_48], 0
.text:00002073                 push    0Ch
.text:00002075                 push    1
.text:00002077                 call    _safemalloc
.text:0000207C                 add     esp, 8
.text:0000207F                 mov     [ebp+var_50], eax
.text:00002082                 mov     ecx, [ebp+var_50]
.text:00002085                 mov     edx, [ebp+var_4C]
.text:00002088                 mov     [ecx], edx
.text:0000208A                 mov     eax, [ebp+var_50]
.text:0000208D                 mov     ecx, [ebp+var_44]
.text:00002090                 mov     [eax+8], ecx
.text:00002093                 cmp     [ebp+var_23D], 0
.text:0000209A                 jnz     short loc_20A9
.text:0000209C                 push    offset $LN65    ; "private_blob_len"
.text:000020A1                 call    __RTC_UninitUse
.text:000020A6                 add     esp, 4
.text:000020A9
.text:000020A9 loc_20A9:                               ; CODE XREF: _ssh2_load_userkey+AB2j
.text:000020A9                 mov     esi, esp
.text:000020AB                 mov     edx, [ebp+var_74]
.text:000020AE                 push    edx
.text:000020AF                 mov     eax, [ebp+var_60]
.text:000020B2                 push    eax
.text:000020B3                 mov     ecx, [ebp+var_68]
.text:000020B6                 push    ecx
.text:000020B7                 mov     edx, [ebp+var_5C]
.text:000020BA                 push    edx
.text:000020BB                 mov     eax, [ebp+var_4C]
.text:000020BE                 mov     ecx, [eax+14h]
.text:000020C1                 call    ecx
.text:000020C3                 add     esp, 10h
.text:000020C6                 cmp     esi, esp
.text:000020C8                 call    __RTC_CheckEsp
.text:000020CD                 mov     edx, [ebp+var_50]
.text:000020D0                 mov     [edx+4], eax
.text:000020D3                 mov     eax, [ebp+var_50]
.text:000020D6                 cmp     dword ptr [eax+4], 0
.text:000020DA                 jnz     short loc_20FB
.text:000020DC                 mov     ecx, [ebp+var_50]
.text:000020DF                 push    ecx
.text:000020E0                 call    _safefree
.text:000020E5                 add     esp, 4
.text:000020E8                 mov     [ebp+var_50], 0
.text:000020EF                 mov     [ebp+var_8C], offset $SG87484 ; "createkey failed"
.text:000020F9                 jmp     short $error$87362
.text:000020FB ; ---------------------------------------------------------------------------
.text:000020FB
.text:000020FB loc_20FB:                               ; CODE XREF: _ssh2_load_userkey+AF2j
.text:000020FB                 mov     edx, [ebp+var_5C]
.text:000020FE                 push    edx
.text:000020FF                 call    _safefree
.text:00002104                 add     esp, 4
.text:00002107                 cmp     [ebp+var_23D], 0
.text:0000210E                 jnz     short loc_211D
.text:00002110                 push    offset $LN65    ; "private_blob_len"
.text:00002115                 call    __RTC_UninitUse
.text:0000211A                 add     esp, 4
.text:0000211D
.text:0000211D loc_211D:                               ; CODE XREF: _ssh2_load_userkey+B26j
.text:0000211D                 mov     eax, [ebp+var_74]
.text:00002120                 push    eax
.text:00002121                 mov     ecx, [ebp+var_60]
.text:00002124                 push    ecx
.text:00002125                 call    _smemclr
.text:0000212A                 add     esp, 8
.text:0000212D                 mov     edx, [ebp+var_60]
.text:00002130                 push    edx
.text:00002131                 call    _safefree
.text:00002136                 add     esp, 4
.text:00002139                 mov     eax, [ebp+var_40]
.text:0000213C                 push    eax
.text:0000213D                 call    _safefree
.text:00002142                 add     esp, 4
.text:00002145                 cmp     [ebp+arg_8], 0
.text:00002149                 jz      short loc_2154
.text:0000214B                 mov     ecx, [ebp+arg_8]
.text:0000214E                 mov     dword ptr [ecx], 0
.text:00002154
.text:00002154 loc_2154:                               ; CODE XREF: _ssh2_load_userkey+B61j
.text:00002154                 mov     eax, [ebp+var_50]
.text:00002157                 jmp     loc_2202
.text:0000215C ; ---------------------------------------------------------------------------
.text:0000215C
.text:0000215C $error$87362:                           ; CODE XREF: _ssh2_load_userkey+B5j
.text:0000215C                                         ; _ssh2_load_userkey+CEj ...
.text:0000215C                 cmp     [ebp+var_8], 0
.text:00002160                 jz      short loc_216E
.text:00002162                 mov     edx, [ebp+var_8]
.text:00002165                 push    edx             ; FILE *
.text:00002166                 call    _fclose
.text:0000216B                 add     esp, 4
.text:0000216E
.text:0000216E loc_216E:                               ; CODE XREF: _ssh2_load_userkey+B78j
.text:0000216E                 cmp     [ebp+var_44], 0
.text:00002172                 jz      short loc_2180
.text:00002174                 mov     eax, [ebp+var_44]
.text:00002177                 push    eax
.text:00002178                 call    _safefree
.text:0000217D                 add     esp, 4
.text:00002180
.text:00002180 loc_2180:                               ; CODE XREF: _ssh2_load_userkey+B8Aj
.text:00002180                 cmp     [ebp+var_40], 0
.text:00002184                 jz      short loc_2192
.text:00002186                 mov     ecx, [ebp+var_40]
.text:00002189                 push    ecx
.text:0000218A                 call    _safefree
.text:0000218F                 add     esp, 4
.text:00002192
.text:00002192 loc_2192:                               ; CODE XREF: _ssh2_load_userkey+B9Cj
.text:00002192                 cmp     [ebp+var_48], 0
.text:00002196                 jz      short loc_21A4
.text:00002198                 mov     edx, [ebp+var_48]
.text:0000219B                 push    edx
.text:0000219C                 call    _safefree
.text:000021A1                 add     esp, 4
.text:000021A4
.text:000021A4 loc_21A4:                               ; CODE XREF: _ssh2_load_userkey+BAEj
.text:000021A4                 cmp     [ebp+var_5C], 0
.text:000021A8                 jz      short loc_21B6
.text:000021AA                 mov     eax, [ebp+var_5C]
.text:000021AD                 push    eax
.text:000021AE                 call    _safefree
.text:000021B3                 add     esp, 4
.text:000021B6
.text:000021B6 loc_21B6:                               ; CODE XREF: _ssh2_load_userkey+BC0j
.text:000021B6                 cmp     [ebp+var_60], 0
.text:000021BA                 jz      short loc_21EE
.text:000021BC                 cmp     [ebp+var_23D], 0
.text:000021C3                 jnz     short loc_21D2
.text:000021C5                 push    offset $LN65    ; "private_blob_len"
.text:000021CA                 call    __RTC_UninitUse
.text:000021CF                 add     esp, 4
.text:000021D2
.text:000021D2 loc_21D2:                               ; CODE XREF: _ssh2_load_userkey+BDBj
.text:000021D2                 mov     ecx, [ebp+var_74]
.text:000021D5                 push    ecx
.text:000021D6                 mov     edx, [ebp+var_60]
.text:000021D9                 push    edx
.text:000021DA                 call    _smemclr
.text:000021DF                 add     esp, 8
.text:000021E2                 mov     eax, [ebp+var_60]
.text:000021E5                 push    eax
.text:000021E6                 call    _safefree
.text:000021EB                 add     esp, 4
.text:000021EE
.text:000021EE loc_21EE:                               ; CODE XREF: _ssh2_load_userkey+BD2j
.text:000021EE                 cmp     [ebp+arg_8], 0
.text:000021F2                 jz      short loc_21FF
.text:000021F4                 mov     ecx, [ebp+arg_8]
.text:000021F7                 mov     edx, [ebp+var_8C]
.text:000021FD                 mov     [ecx], edx
.text:000021FF
.text:000021FF loc_21FF:                               ; CODE XREF: _ssh2_load_userkey+C0Aj
.text:000021FF                 mov     eax, [ebp+var_50]
.text:00002202
.text:00002202 loc_2202:                               ; CODE XREF: _ssh2_load_userkey+B6Fj
.text:00002202                 push    edx
.text:00002203                 mov     ecx, ebp
.text:00002205                 push    eax
.text:00002206                 lea     edx, $LN87
.text:0000220C                 call    @_RTC_CheckStackVars@8
.text:00002211                 pop     eax
.text:00002212                 pop     edx
.text:00002213                 pop     edi
.text:00002214                 pop     esi
.text:00002215                 mov     ecx, [ebp+var_4]
.text:00002218                 xor     ecx, ebp
.text:0000221A                 call    @__security_check_cookie@4
.text:0000221F                 add     esp, 244h
.text:00002225                 cmp     ebp, esp
.text:00002227                 call    __RTC_CheckEsp
.text:0000222C                 mov     esp, ebp
.text:0000222E                 pop     ebp
.text:0000222F                 retn
.text:0000222F _ssh2_load_userkey endp
.text:0000222F
.text:0000222F ; ---------------------------------------------------------------------------
.text:00002230 $LN87           dd 0Ah                  ; DATA XREF: _ssh2_load_userkey+C1Eo
.text:00002234                 dd offset $LN86
.text:00002238 $LN86           dd 0FFFFFF8Ch, 4        ; DATA XREF: .text:00002234o
.text:00002240                 dd offset $LN65         ; "private_blob_len"
.text:00002244                 db 0CCh
.text:00002245                 db 3 dup(0FFh)
.text:00002248                 dd offset $SG87128      ; "wrong passphrase"
.text:0000224C                 dd offset $LN77         ; "header"
.text:00002250                 dd 0FFFFFF98h, 4
.text:00002258                 dd offset $LN78         ; "public_blob_len"
.text:0000225C                 dd 0FFFFFF48h, 28h
.text:00002264                 dd offset $LN79         ; "key"
.text:00002268                 dd 0FFFFFEE0h, 60h
.text:00002270                 dd offset $LN80         ; "s"
.text:00002274                 dd 0FFFFFEACh, 29h
.text:0000227C                 dd offset $LN81         ; "realmac"
.text:00002280                 db 90h
.text:00002281                 db 0FEh, 2 dup(0FFh)
.text:00002284                 dd 14h
.text:00002288                 dd offset $LN82         ; "binary"
.text:0000228C                 dd 0FFFFFE0Ch, 60h
.text:00002294                 dd offset $LN83         ; "s"
.text:00002298                 dd 0FFFFFDF0h, 14h
.text:000022A0                 dd offset $LN84         ; "mackey"
.text:000022A4                 dd 0FFFFFDC8h, 1Fh
.text:000022AC                 dd offset $LN85         ; "header"
.text:000022B0 $LN85           db 'header',0           ; DATA XREF: .text:000022ACo
.text:000022B7 $LN84           db 'mackey',0           ; DATA XREF: .text:000022A0o
.text:000022BE $LN83           db 's',0                ; DATA XREF: .text:00002294o
.text:000022C0 $LN82           db 'binary',0           ; DATA XREF: .text:00002288o
.text:000022C7 $LN81           db 'realmac',0          ; DATA XREF: .text:0000227Co
.text:000022CF $LN80           db 's',0                ; DATA XREF: .text:00002270o
.text:000022D1 $LN79           db 'key',0              ; DATA XREF: .text:00002264o
.text:000022D5 $LN78           db 'public_blob_len',0  ; DATA XREF: .text:00002258o
.text:000022E5 $LN77           db 'header',0           ; DATA XREF: .text:0000224Co
.text:000022EC $LN65           db 'private_blob_len',0 ; DATA XREF: _ssh2_load_userkey+45Fo
.text:000022EC                                         ; _ssh2_load_userkey+52Fo ...
.text:000022FD                 db 0Bh dup(0CCh)
.text:00002308
.text:00002308 ; =============== S U B R O U T I N E =======================================
.text:00002308
.text:00002308 ; Attributes: bp-based frame
.text:00002308
.text:00002308 ; int __cdecl read_header(FILE *, int)
.text:00002308 _read_header    proc near               ; CODE XREF: _ssh2_load_userkey+C2p
.text:00002308                                         ; _ssh2_load_userkey+1AFp ...
.text:00002308
.text:00002308 var_8           = dword ptr -8
.text:00002308 var_4           = dword ptr -4
.text:00002308 arg_0           = dword ptr  8
.text:00002308 arg_4           = dword ptr  0Ch
.text:00002308
.text:00002308                 push    ebp
.text:00002309                 mov     ebp, esp
.text:0000230B                 sub     esp, 8
.text:0000230E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002315                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000231C                 mov     [ebp+var_4], 27h ; '''
.text:00002323
.text:00002323 loc_2323:                               ; CODE XREF: _read_header+99j
.text:00002323                 mov     eax, 1
.text:00002328                 test    eax, eax
.text:0000232A                 jz      short loc_23A3
.text:0000232C                 mov     ecx, [ebp+arg_0]
.text:0000232F                 push    ecx             ; FILE *
.text:00002330                 call    _fgetc
.text:00002335                 add     esp, 4
.text:00002338                 mov     [ebp+var_8], eax
.text:0000233B                 cmp     [ebp+var_8], 0Ah
.text:0000233F                 jz      short loc_234D
.text:00002341                 cmp     [ebp+var_8], 0Dh
.text:00002345                 jz      short loc_234D
.text:00002347                 cmp     [ebp+var_8], 0FFFFFFFFh
.text:0000234B                 jnz     short loc_2351
.text:0000234D
.text:0000234D loc_234D:                               ; CODE XREF: _read_header+37j
.text:0000234D                                         ; _read_header+3Dj
.text:0000234D                 xor     eax, eax
.text:0000234F                 jmp     short loc_23A5
.text:00002351 ; ---------------------------------------------------------------------------
.text:00002351
.text:00002351 loc_2351:                               ; CODE XREF: _read_header+43j
.text:00002351                 cmp     [ebp+var_8], 3Ah ; ':'
.text:00002355                 jnz     short loc_237D
.text:00002357                 mov     edx, [ebp+arg_0]
.text:0000235A                 push    edx             ; FILE *
.text:0000235B                 call    _fgetc
.text:00002360                 add     esp, 4
.text:00002363                 mov     [ebp+var_8], eax
.text:00002366                 cmp     [ebp+var_8], 20h ; ' '
.text:0000236A                 jz      short loc_2370
.text:0000236C                 xor     eax, eax
.text:0000236E                 jmp     short loc_23A5
.text:00002370 ; ---------------------------------------------------------------------------
.text:00002370
.text:00002370 loc_2370:                               ; CODE XREF: _read_header+62j
.text:00002370                 mov     eax, [ebp+arg_4]
.text:00002373                 mov     byte ptr [eax], 0
.text:00002376                 mov     eax, 1
.text:0000237B                 jmp     short loc_23A5
.text:0000237D ; ---------------------------------------------------------------------------
.text:0000237D
.text:0000237D loc_237D:                               ; CODE XREF: _read_header+4Dj
.text:0000237D                 cmp     [ebp+var_4], 0
.text:00002381                 jnz     short loc_2387
.text:00002383                 xor     eax, eax
.text:00002385                 jmp     short loc_23A5
.text:00002387 ; ---------------------------------------------------------------------------
.text:00002387
.text:00002387 loc_2387:                               ; CODE XREF: _read_header+79j
.text:00002387                 mov     ecx, [ebp+arg_4]
.text:0000238A                 mov     dl, byte ptr [ebp+var_8]
.text:0000238D                 mov     [ecx], dl
.text:0000238F                 mov     eax, [ebp+arg_4]
.text:00002392                 add     eax, 1
.text:00002395                 mov     [ebp+arg_4], eax
.text:00002398                 mov     ecx, [ebp+var_4]
.text:0000239B                 sub     ecx, 1
.text:0000239E                 mov     [ebp+var_4], ecx
.text:000023A1                 jmp     short loc_2323
.text:000023A3 ; ---------------------------------------------------------------------------
.text:000023A3
.text:000023A3 loc_23A3:                               ; CODE XREF: _read_header+22j
.text:000023A3                 xor     eax, eax
.text:000023A5
.text:000023A5 loc_23A5:                               ; CODE XREF: _read_header+47j
.text:000023A5                                         ; _read_header+66j ...
.text:000023A5                 add     esp, 8
.text:000023A8                 cmp     ebp, esp
.text:000023AA                 call    __RTC_CheckEsp
.text:000023AF                 mov     esp, ebp
.text:000023B1                 pop     ebp
.text:000023B2                 retn
.text:000023B2 _read_header    endp
.text:000023B2
.text:000023B2 ; ---------------------------------------------------------------------------
.text:000023B3                 align 8
.text:000023B8
.text:000023B8 ; =============== S U B R O U T I N E =======================================
.text:000023B8
.text:000023B8 ; Attributes: bp-based frame
.text:000023B8
.text:000023B8 ; int __cdecl read_body(FILE *)
.text:000023B8 _read_body      proc near               ; CODE XREF: _ssh2_load_userkey+15Fp
.text:000023B8                                         ; _ssh2_load_userkey+1D9p ...
.text:000023B8
.text:000023B8 var_10          = dword ptr -10h
.text:000023B8 var_C           = dword ptr -0Ch
.text:000023B8 var_8           = dword ptr -8
.text:000023B8 var_4           = dword ptr -4
.text:000023B8 arg_0           = dword ptr  8
.text:000023B8
.text:000023B8                 push    ebp
.text:000023B9                 mov     ebp, esp
.text:000023BB                 sub     esp, 10h
.text:000023BE                 mov     eax, 0CCCCCCCCh
.text:000023C3                 mov     [ebp+var_10], eax
.text:000023C6                 mov     [ebp+var_C], eax
.text:000023C9                 mov     [ebp+var_8], eax
.text:000023CC                 mov     [ebp+var_4], eax
.text:000023CF                 mov     [ebp+var_C], 80h ; 'Ç'
.text:000023D6                 push    1
.text:000023D8                 mov     eax, [ebp+var_C]
.text:000023DB                 push    eax
.text:000023DC                 call    _safemalloc
.text:000023E1                 add     esp, 8
.text:000023E4                 mov     [ebp+var_4], eax
.text:000023E7                 mov     [ebp+var_8], 0
.text:000023EE                 mov     ecx, [ebp+var_4]
.text:000023F1                 add     ecx, [ebp+var_8]
.text:000023F4                 mov     byte ptr [ecx], 0
.text:000023F7
.text:000023F7 loc_23F7:                               ; CODE XREF: _read_body+ECj
.text:000023F7                 mov     edx, 1
.text:000023FC                 test    edx, edx
.text:000023FE                 jz      loc_24A9
.text:00002404                 mov     eax, [ebp+arg_0]
.text:00002407                 push    eax             ; FILE *
.text:00002408                 call    _fgetc
.text:0000240D                 add     esp, 4
.text:00002410                 mov     [ebp+var_10], eax
.text:00002413                 cmp     [ebp+var_10], 0Dh
.text:00002417                 jz      short loc_2425
.text:00002419                 cmp     [ebp+var_10], 0Ah
.text:0000241D                 jz      short loc_2425
.text:0000241F                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00002423                 jnz     short loc_245B
.text:00002425
.text:00002425 loc_2425:                               ; CODE XREF: _read_body+5Fj
.text:00002425                                         ; _read_body+65j
.text:00002425                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00002429                 jz      short loc_2456
.text:0000242B                 mov     ecx, [ebp+arg_0]
.text:0000242E                 push    ecx             ; FILE *
.text:0000242F                 call    _fgetc
.text:00002434                 add     esp, 4
.text:00002437                 mov     [ebp+var_10], eax
.text:0000243A                 cmp     [ebp+var_10], 0Dh
.text:0000243E                 jz      short loc_2456
.text:00002440                 cmp     [ebp+var_10], 0Ah
.text:00002444                 jz      short loc_2456
.text:00002446                 mov     edx, [ebp+arg_0]
.text:00002449                 push    edx             ; FILE *
.text:0000244A                 mov     eax, [ebp+var_10]
.text:0000244D                 push    eax             ; int
.text:0000244E                 call    _ungetc
.text:00002453                 add     esp, 8
.text:00002456
.text:00002456 loc_2456:                               ; CODE XREF: _read_body+71j
.text:00002456                                         ; _read_body+86j ...
.text:00002456                 mov     eax, [ebp+var_4]
.text:00002459                 jmp     short loc_24A9
.text:0000245B ; ---------------------------------------------------------------------------
.text:0000245B
.text:0000245B loc_245B:                               ; CODE XREF: _read_body+6Bj
.text:0000245B                 mov     ecx, [ebp+var_8]
.text:0000245E                 add     ecx, 1
.text:00002461                 cmp     ecx, [ebp+var_C]
.text:00002464                 jl      short loc_2487
.text:00002466                 mov     edx, [ebp+var_C]
.text:00002469                 add     edx, 80h ; 'Ç'
.text:0000246F                 mov     [ebp+var_C], edx
.text:00002472                 push    1
.text:00002474                 mov     eax, [ebp+var_C]
.text:00002477                 push    eax
.text:00002478                 mov     ecx, [ebp+var_4]
.text:0000247B                 push    ecx
.text:0000247C                 call    _saferealloc
.text:00002481                 add     esp, 0Ch
.text:00002484                 mov     [ebp+var_4], eax
.text:00002487
.text:00002487 loc_2487:                               ; CODE XREF: _read_body+ACj
.text:00002487                 mov     edx, [ebp+var_4]
.text:0000248A                 add     edx, [ebp+var_8]
.text:0000248D                 mov     al, byte ptr [ebp+var_10]
.text:00002490                 mov     [edx], al
.text:00002492                 mov     ecx, [ebp+var_8]
.text:00002495                 add     ecx, 1
.text:00002498                 mov     [ebp+var_8], ecx
.text:0000249B                 mov     edx, [ebp+var_4]
.text:0000249E                 add     edx, [ebp+var_8]
.text:000024A1                 mov     byte ptr [edx], 0
.text:000024A4                 jmp     loc_23F7
.text:000024A9 ; ---------------------------------------------------------------------------
.text:000024A9
.text:000024A9 loc_24A9:                               ; CODE XREF: _read_body+46j
.text:000024A9                                         ; _read_body+A1j
.text:000024A9                 add     esp, 10h
.text:000024AC                 cmp     ebp, esp
.text:000024AE                 call    __RTC_CheckEsp
.text:000024B3                 mov     esp, ebp
.text:000024B5                 pop     ebp
.text:000024B6                 retn
.text:000024B6 _read_body      endp
.text:000024B6
.text:000024B6 ; ---------------------------------------------------------------------------
.text:000024B7                 align 4
.text:000024B8
.text:000024B8 ; =============== S U B R O U T I N E =======================================
.text:000024B8
.text:000024B8 ; Attributes: bp-based frame
.text:000024B8
.text:000024B8 ; int __cdecl read_blob(FILE *, int, int)
.text:000024B8 _read_blob      proc near               ; CODE XREF: _ssh2_load_userkey+2F5p
.text:000024B8                                         ; _ssh2_load_userkey+381p ...
.text:000024B8
.text:000024B8 var_1C          = dword ptr -1Ch
.text:000024B8 var_18          = dword ptr -18h
.text:000024B8 var_14          = dword ptr -14h
.text:000024B8 var_10          = dword ptr -10h
.text:000024B8 var_C           = dword ptr -0Ch
.text:000024B8 var_8           = dword ptr -8
.text:000024B8 var_4           = dword ptr -4
.text:000024B8 arg_0           = dword ptr  8
.text:000024B8 arg_4           = dword ptr  0Ch
.text:000024B8 arg_8           = dword ptr  10h
.text:000024B8
.text:000024B8                 push    ebp
.text:000024B9                 mov     ebp, esp
.text:000024BB                 sub     esp, 1Ch
.text:000024BE                 mov     eax, 0CCCCCCCCh
.text:000024C3                 mov     [ebp+var_1C], eax
.text:000024C6                 mov     [ebp+var_18], eax
.text:000024C9                 mov     [ebp+var_14], eax
.text:000024CC                 mov     [ebp+var_10], eax
.text:000024CF                 mov     [ebp+var_C], eax
.text:000024D2                 mov     [ebp+var_8], eax
.text:000024D5                 mov     [ebp+var_4], eax
.text:000024D8                 push    1
.text:000024DA                 mov     eax, [ebp+arg_4]
.text:000024DD                 imul    eax, 30h
.text:000024E0                 push    eax
.text:000024E1                 call    _safemalloc
.text:000024E6                 add     esp, 8
.text:000024E9                 mov     [ebp+var_4], eax
.text:000024EC                 mov     [ebp+var_10], 0
.text:000024F3                 mov     [ebp+var_14], 0
.text:000024FA                 jmp     short loc_2505
.text:000024FC ; ---------------------------------------------------------------------------
.text:000024FC
.text:000024FC loc_24FC:                               ; CODE XREF: _read_blob+131j
.text:000024FC                 mov     ecx, [ebp+var_14]
.text:000024FF                 add     ecx, 1
.text:00002502                 mov     [ebp+var_14], ecx
.text:00002505
.text:00002505 loc_2505:                               ; CODE XREF: _read_blob+42j
.text:00002505                 mov     edx, [ebp+var_14]
.text:00002508                 cmp     edx, [ebp+arg_4]
.text:0000250B                 jge     loc_25EE
.text:00002511                 mov     eax, [ebp+arg_0]
.text:00002514                 push    eax             ; FILE *
.text:00002515                 call    _read_body
.text:0000251A                 add     esp, 4
.text:0000251D                 mov     [ebp+var_8], eax
.text:00002520                 cmp     [ebp+var_8], 0
.text:00002524                 jnz     short loc_2539
.text:00002526                 mov     ecx, [ebp+var_4]
.text:00002529                 push    ecx
.text:0000252A                 call    _safefree
.text:0000252F                 add     esp, 4
.text:00002532                 xor     eax, eax
.text:00002534                 jmp     loc_25F9
.text:00002539 ; ---------------------------------------------------------------------------
.text:00002539
.text:00002539 loc_2539:                               ; CODE XREF: _read_blob+6Cj
.text:00002539                 mov     edx, [ebp+var_8]
.text:0000253C                 push    edx             ; char *
.text:0000253D                 call    _strlen
.text:00002542                 add     esp, 4
.text:00002545                 mov     [ebp+var_C], eax
.text:00002548                 mov     eax, [ebp+var_C]
.text:0000254B                 and     eax, 80000003h
.text:00002550                 jns     short loc_2557
.text:00002552                 dec     eax
.text:00002553                 or      eax, 0FFFFFFFCh
.text:00002556                 inc     eax
.text:00002557
.text:00002557 loc_2557:                               ; CODE XREF: _read_blob+98j
.text:00002557                 test    eax, eax
.text:00002559                 jnz     short loc_2561
.text:0000255B                 cmp     [ebp+var_C], 40h ; '@'
.text:0000255F                 jle     short loc_257D
.text:00002561
.text:00002561 loc_2561:                               ; CODE XREF: _read_blob+A1j
.text:00002561                 mov     ecx, [ebp+var_4]
.text:00002564                 push    ecx
.text:00002565                 call    _safefree
.text:0000256A                 add     esp, 4
.text:0000256D                 mov     edx, [ebp+var_8]
.text:00002570                 push    edx
.text:00002571                 call    _safefree
.text:00002576                 add     esp, 4
.text:00002579                 xor     eax, eax
.text:0000257B                 jmp     short loc_25F9
.text:0000257D ; ---------------------------------------------------------------------------
.text:0000257D
.text:0000257D loc_257D:                               ; CODE XREF: _read_blob+A7j
.text:0000257D                 mov     [ebp+var_18], 0
.text:00002584                 jmp     short loc_258F
.text:00002586 ; ---------------------------------------------------------------------------
.text:00002586
.text:00002586 loc_2586:                               ; CODE XREF: _read_blob+123j
.text:00002586                 mov     eax, [ebp+var_18]
.text:00002589                 add     eax, 4
.text:0000258C                 mov     [ebp+var_18], eax
.text:0000258F
.text:0000258F loc_258F:                               ; CODE XREF: _read_blob+CCj
.text:0000258F                 mov     ecx, [ebp+var_18]
.text:00002592                 cmp     ecx, [ebp+var_C]
.text:00002595                 jge     short loc_25DD
.text:00002597                 mov     edx, [ebp+var_4]
.text:0000259A                 add     edx, [ebp+var_10]
.text:0000259D                 push    edx
.text:0000259E                 mov     eax, [ebp+var_8]
.text:000025A1                 add     eax, [ebp+var_18]
.text:000025A4                 push    eax
.text:000025A5                 call    _base64_decode_atom
.text:000025AA                 add     esp, 8
.text:000025AD                 mov     [ebp+var_1C], eax
.text:000025B0                 cmp     [ebp+var_1C], 0
.text:000025B4                 jnz     short loc_25D2
.text:000025B6                 mov     ecx, [ebp+var_8]
.text:000025B9                 push    ecx
.text:000025BA                 call    _safefree
.text:000025BF                 add     esp, 4
.text:000025C2                 mov     edx, [ebp+var_4]
.text:000025C5                 push    edx
.text:000025C6                 call    _safefree
.text:000025CB                 add     esp, 4
.text:000025CE                 xor     eax, eax
.text:000025D0                 jmp     short loc_25F9
.text:000025D2 ; ---------------------------------------------------------------------------
.text:000025D2
.text:000025D2 loc_25D2:                               ; CODE XREF: _read_blob+FCj
.text:000025D2                 mov     eax, [ebp+var_10]
.text:000025D5                 add     eax, [ebp+var_1C]
.text:000025D8                 mov     [ebp+var_10], eax
.text:000025DB                 jmp     short loc_2586
.text:000025DD ; ---------------------------------------------------------------------------
.text:000025DD
.text:000025DD loc_25DD:                               ; CODE XREF: _read_blob+DDj
.text:000025DD                 mov     ecx, [ebp+var_8]
.text:000025E0                 push    ecx
.text:000025E1                 call    _safefree
.text:000025E6                 add     esp, 4
.text:000025E9                 jmp     loc_24FC
.text:000025EE ; ---------------------------------------------------------------------------
.text:000025EE
.text:000025EE loc_25EE:                               ; CODE XREF: _read_blob+53j
.text:000025EE                 mov     edx, [ebp+arg_8]
.text:000025F1                 mov     eax, [ebp+var_10]
.text:000025F4                 mov     [edx], eax
.text:000025F6                 mov     eax, [ebp+var_4]
.text:000025F9
.text:000025F9 loc_25F9:                               ; CODE XREF: _read_blob+7Cj
.text:000025F9                                         ; _read_blob+C3j ...
.text:000025F9                 add     esp, 1Ch
.text:000025FC                 cmp     ebp, esp
.text:000025FE                 call    __RTC_CheckEsp
.text:00002603                 mov     esp, ebp
.text:00002605                 pop     ebp
.text:00002606                 retn
.text:00002606 _read_blob      endp
.text:00002606
.text:00002606 ; ---------------------------------------------------------------------------
.text:00002607                 align 4
.text:00002608
.text:00002608 ; =============== S U B R O U T I N E =======================================
.text:00002608
.text:00002608 ; Attributes: bp-based frame
.text:00002608
.text:00002608                 public _ssh2_userkey_loadpub
.text:00002608 _ssh2_userkey_loadpub proc near
.text:00002608
.text:00002608 var_5C          = dword ptr -5Ch
.text:00002608 var_58          = dword ptr -58h
.text:00002608 var_54          = dword ptr -54h
.text:00002608 var_4C          = dword ptr -4Ch
.text:00002608 var_44          = dword ptr -44h
.text:00002608 var_40          = dword ptr -40h
.text:00002608 var_3C          = dword ptr -3Ch
.text:00002608 var_34          = byte ptr -34h
.text:00002608 var_8           = dword ptr -8
.text:00002608 var_4           = dword ptr -4
.text:00002608 arg_0           = dword ptr  8
.text:00002608 arg_4           = dword ptr  0Ch
.text:00002608 arg_8           = dword ptr  10h
.text:00002608 arg_C           = dword ptr  14h
.text:00002608 arg_10          = dword ptr  18h
.text:00002608
.text:00002608                 push    ebp
.text:00002609                 mov     ebp, esp
.text:0000260B                 sub     esp, 5Ch
.text:0000260E                 push    edi
.text:0000260F                 lea     edi, [ebp+var_5C]
.text:00002612                 mov     ecx, 17h
.text:00002617                 mov     eax, 0CCCCCCCCh
.text:0000261C                 rep stosd
.text:0000261E                 mov     eax, dword ptr ds:___security_cookie
.text:00002623                 xor     eax, ebp
.text:00002625                 mov     [ebp+var_4], eax
.text:00002628                 mov     [ebp+var_58], 0
.text:0000262F                 mov     [ebp+var_44], 0
.text:00002636                 push    offset $SG87516 ; "rb"
.text:0000263B                 mov     eax, [ebp+arg_0]
.text:0000263E                 mov     ecx, [eax]
.text:00002640                 push    ecx             ; char *
.text:00002641                 call    _fopen
.text:00002646                 add     esp, 8
.text:00002649                 mov     [ebp+var_8], eax
.text:0000264C                 cmp     [ebp+var_8], 0
.text:00002650                 jnz     short loc_265E
.text:00002652                 mov     [ebp+var_58], offset $SG87518 ; "can't open file"
.text:00002659                 jmp     $error$87519
.text:0000265E ; ---------------------------------------------------------------------------
.text:0000265E
.text:0000265E loc_265E:                               ; CODE XREF: _ssh2_userkey_loadpub+48j
.text:0000265E                 lea     edx, [ebp+var_34]
.text:00002661                 push    edx             ; int
.text:00002662                 mov     eax, [ebp+var_8]
.text:00002665                 push    eax             ; FILE *
.text:00002666                 call    _read_header
.text:0000266B                 add     esp, 8
.text:0000266E                 test    eax, eax
.text:00002670                 jz      short loc_269C
.text:00002672                 push    offset $SG87522 ; "PuTTY-User-Key-File-2"
.text:00002677                 lea     ecx, [ebp+var_34]
.text:0000267A                 push    ecx             ; char *
.text:0000267B                 call    _strcmp
.text:00002680                 add     esp, 8
.text:00002683                 test    eax, eax
.text:00002685                 jz      short loc_26C8
.text:00002687                 push    offset $SG87523 ; "PuTTY-User-Key-File-1"
.text:0000268C                 lea     edx, [ebp+var_34]
.text:0000268F                 push    edx             ; char *
.text:00002690                 call    _strcmp
.text:00002695                 add     esp, 8
.text:00002698                 test    eax, eax
.text:0000269A                 jz      short loc_26C8
.text:0000269C
.text:0000269C loc_269C:                               ; CODE XREF: _ssh2_userkey_loadpub+68j
.text:0000269C                 push    14h             ; size_t
.text:0000269E                 push    offset $SG87525 ; "PuTTY-User-Key-File-"
.text:000026A3                 lea     eax, [ebp+var_34]
.text:000026A6                 push    eax             ; char *
.text:000026A7                 call    _strncmp
.text:000026AC                 add     esp, 0Ch
.text:000026AF                 test    eax, eax
.text:000026B1                 jnz     short loc_26BC
.text:000026B3                 mov     [ebp+var_58], offset $SG87526 ; "PuTTY key format too new"
.text:000026BA                 jmp     short loc_26C3
.text:000026BC ; ---------------------------------------------------------------------------
.text:000026BC
.text:000026BC loc_26BC:                               ; CODE XREF: _ssh2_userkey_loadpub+A9j
.text:000026BC                 mov     [ebp+var_58], offset $SG87528 ; "not a PuTTY SSH-2 private key"
.text:000026C3
.text:000026C3 loc_26C3:                               ; CODE XREF: _ssh2_userkey_loadpub+B2j
.text:000026C3                 jmp     $error$87519
.text:000026C8 ; ---------------------------------------------------------------------------
.text:000026C8
.text:000026C8 loc_26C8:                               ; CODE XREF: _ssh2_userkey_loadpub+7Dj
.text:000026C8                                         ; _ssh2_userkey_loadpub+92j
.text:000026C8                 mov     [ebp+var_58], offset $SG87529 ; "file format error"
.text:000026CF                 mov     ecx, [ebp+var_8]
.text:000026D2                 push    ecx             ; FILE *
.text:000026D3                 call    _read_body
.text:000026D8                 add     esp, 4
.text:000026DB                 mov     [ebp+var_3C], eax
.text:000026DE                 cmp     [ebp+var_3C], 0
.text:000026E2                 jnz     short loc_26E9
.text:000026E4                 jmp     $error$87519
.text:000026E9 ; ---------------------------------------------------------------------------
.text:000026E9
.text:000026E9 loc_26E9:                               ; CODE XREF: _ssh2_userkey_loadpub+DAj
.text:000026E9                 mov     edx, [ebp+var_3C]
.text:000026EC                 push    edx             ; char *
.text:000026ED                 call    _find_pubkey_alg
.text:000026F2                 add     esp, 4
.text:000026F5                 mov     [ebp+var_40], eax
.text:000026F8                 cmp     [ebp+var_40], 0
.text:000026FC                 jnz     short loc_270F
.text:000026FE                 mov     eax, [ebp+var_3C]
.text:00002701                 push    eax
.text:00002702                 call    _safefree
.text:00002707                 add     esp, 4
.text:0000270A                 jmp     $error$87519
.text:0000270F ; ---------------------------------------------------------------------------
.text:0000270F
.text:0000270F loc_270F:                               ; CODE XREF: _ssh2_userkey_loadpub+F4j
.text:0000270F                 mov     ecx, [ebp+var_3C]
.text:00002712                 push    ecx
.text:00002713                 call    _safefree
.text:00002718                 add     esp, 4
.text:0000271B                 lea     edx, [ebp+var_34]
.text:0000271E                 push    edx             ; int
.text:0000271F                 mov     eax, [ebp+var_8]
.text:00002722                 push    eax             ; FILE *
.text:00002723                 call    _read_header
.text:00002728                 add     esp, 8
.text:0000272B                 test    eax, eax
.text:0000272D                 jz      short loc_2744
.text:0000272F                 push    offset $SG87535 ; "Encryption"
.text:00002734                 lea     ecx, [ebp+var_34]
.text:00002737                 push    ecx             ; char *
.text:00002738                 call    _strcmp
.text:0000273D                 add     esp, 8
.text:00002740                 test    eax, eax
.text:00002742                 jz      short loc_2749
.text:00002744
.text:00002744 loc_2744:                               ; CODE XREF: _ssh2_userkey_loadpub+125j
.text:00002744                 jmp     $error$87519
.text:00002749 ; ---------------------------------------------------------------------------
.text:00002749
.text:00002749 loc_2749:                               ; CODE XREF: _ssh2_userkey_loadpub+13Aj
.text:00002749                 mov     edx, [ebp+var_8]
.text:0000274C                 push    edx             ; FILE *
.text:0000274D                 call    _read_body
.text:00002752                 add     esp, 4
.text:00002755                 mov     [ebp+var_3C], eax
.text:00002758                 cmp     [ebp+var_3C], 0
.text:0000275C                 jnz     short loc_2763
.text:0000275E                 jmp     $error$87519
.text:00002763 ; ---------------------------------------------------------------------------
.text:00002763
.text:00002763 loc_2763:                               ; CODE XREF: _ssh2_userkey_loadpub+154j
.text:00002763                 mov     eax, [ebp+var_3C]
.text:00002766                 push    eax
.text:00002767                 call    _safefree
.text:0000276C                 add     esp, 4
.text:0000276F                 lea     ecx, [ebp+var_34]
.text:00002772                 push    ecx             ; int
.text:00002773                 mov     edx, [ebp+var_8]
.text:00002776                 push    edx             ; FILE *
.text:00002777                 call    _read_header
.text:0000277C                 add     esp, 8
.text:0000277F                 test    eax, eax
.text:00002781                 jz      short loc_2798
.text:00002783                 push    offset $SG87540 ; "Comment"
.text:00002788                 lea     eax, [ebp+var_34]
.text:0000278B                 push    eax             ; char *
.text:0000278C                 call    _strcmp
.text:00002791                 add     esp, 8
.text:00002794                 test    eax, eax
.text:00002796                 jz      short loc_279D
.text:00002798
.text:00002798 loc_2798:                               ; CODE XREF: _ssh2_userkey_loadpub+179j
.text:00002798                 jmp     $error$87519
.text:0000279D ; ---------------------------------------------------------------------------
.text:0000279D
.text:0000279D loc_279D:                               ; CODE XREF: _ssh2_userkey_loadpub+18Ej
.text:0000279D                 mov     ecx, [ebp+var_8]
.text:000027A0                 push    ecx             ; FILE *
.text:000027A1                 call    _read_body
.text:000027A6                 add     esp, 4
.text:000027A9                 mov     [ebp+var_5C], eax
.text:000027AC                 cmp     [ebp+var_5C], 0
.text:000027B0                 jnz     short loc_27B7
.text:000027B2                 jmp     $error$87519
.text:000027B7 ; ---------------------------------------------------------------------------
.text:000027B7
.text:000027B7 loc_27B7:                               ; CODE XREF: _ssh2_userkey_loadpub+1A8j
.text:000027B7                 cmp     [ebp+arg_C], 0
.text:000027BB                 jz      short loc_27C7
.text:000027BD                 mov     edx, [ebp+arg_C]
.text:000027C0                 mov     eax, [ebp+var_5C]
.text:000027C3                 mov     [edx], eax
.text:000027C5                 jmp     short loc_27D3
.text:000027C7 ; ---------------------------------------------------------------------------
.text:000027C7
.text:000027C7 loc_27C7:                               ; CODE XREF: _ssh2_userkey_loadpub+1B3j
.text:000027C7                 mov     ecx, [ebp+var_5C]
.text:000027CA                 push    ecx
.text:000027CB                 call    _safefree
.text:000027D0                 add     esp, 4
.text:000027D3
.text:000027D3 loc_27D3:                               ; CODE XREF: _ssh2_userkey_loadpub+1BDj
.text:000027D3                 lea     edx, [ebp+var_34]
.text:000027D6                 push    edx             ; int
.text:000027D7                 mov     eax, [ebp+var_8]
.text:000027DA                 push    eax             ; FILE *
.text:000027DB                 call    _read_header
.text:000027E0                 add     esp, 8
.text:000027E3                 test    eax, eax
.text:000027E5                 jz      short loc_27FC
.text:000027E7                 push    offset $SG87547 ; "Public-Lines"
.text:000027EC                 lea     ecx, [ebp+var_34]
.text:000027EF                 push    ecx             ; char *
.text:000027F0                 call    _strcmp
.text:000027F5                 add     esp, 8
.text:000027F8                 test    eax, eax
.text:000027FA                 jz      short loc_2801
.text:000027FC
.text:000027FC loc_27FC:                               ; CODE XREF: _ssh2_userkey_loadpub+1DDj
.text:000027FC                 jmp     $error$87519
.text:00002801 ; ---------------------------------------------------------------------------
.text:00002801
.text:00002801 loc_2801:                               ; CODE XREF: _ssh2_userkey_loadpub+1F2j
.text:00002801                 mov     edx, [ebp+var_8]
.text:00002804                 push    edx             ; FILE *
.text:00002805                 call    _read_body
.text:0000280A                 add     esp, 4
.text:0000280D                 mov     [ebp+var_3C], eax
.text:00002810                 cmp     [ebp+var_3C], 0
.text:00002814                 jnz     short loc_2818
.text:00002816                 jmp     short $error$87519
.text:00002818 ; ---------------------------------------------------------------------------
.text:00002818
.text:00002818 loc_2818:                               ; CODE XREF: _ssh2_userkey_loadpub+20Cj
.text:00002818                 mov     eax, [ebp+var_3C]
.text:0000281B                 push    eax             ; char *
.text:0000281C                 call    _atoi
.text:00002821                 add     esp, 4
.text:00002824                 mov     [ebp+var_54], eax
.text:00002827                 mov     ecx, [ebp+var_3C]
.text:0000282A                 push    ecx
.text:0000282B                 call    _safefree
.text:00002830                 add     esp, 4
.text:00002833                 lea     edx, [ebp+var_4C]
.text:00002836                 push    edx             ; int
.text:00002837                 mov     eax, [ebp+var_54]
.text:0000283A                 push    eax             ; int
.text:0000283B                 mov     ecx, [ebp+var_8]
.text:0000283E                 push    ecx             ; FILE *
.text:0000283F                 call    _read_blob
.text:00002844                 add     esp, 0Ch
.text:00002847                 mov     [ebp+var_44], eax
.text:0000284A                 cmp     [ebp+var_44], 0
.text:0000284E                 jnz     short loc_2852
.text:00002850                 jmp     short $error$87519
.text:00002852 ; ---------------------------------------------------------------------------
.text:00002852
.text:00002852 loc_2852:                               ; CODE XREF: _ssh2_userkey_loadpub+246j
.text:00002852                 mov     edx, [ebp+var_8]
.text:00002855                 push    edx             ; FILE *
.text:00002856                 call    _fclose
.text:0000285B                 add     esp, 4
.text:0000285E                 cmp     [ebp+arg_8], 0
.text:00002862                 jz      short loc_286C
.text:00002864                 mov     eax, [ebp+arg_8]
.text:00002867                 mov     ecx, [ebp+var_4C]
.text:0000286A                 mov     [eax], ecx
.text:0000286C
.text:0000286C loc_286C:                               ; CODE XREF: _ssh2_userkey_loadpub+25Aj
.text:0000286C                 cmp     [ebp+arg_4], 0
.text:00002870                 jz      short loc_287D
.text:00002872                 mov     edx, [ebp+arg_4]
.text:00002875                 mov     eax, [ebp+var_40]
.text:00002878                 mov     ecx, [eax+30h]
.text:0000287B                 mov     [edx], ecx
.text:0000287D
.text:0000287D loc_287D:                               ; CODE XREF: _ssh2_userkey_loadpub+268j
.text:0000287D                 mov     eax, [ebp+var_44]
.text:00002880                 jmp     short loc_28B6
.text:00002882 ; ---------------------------------------------------------------------------
.text:00002882
.text:00002882 $error$87519:                           ; CODE XREF: _ssh2_userkey_loadpub+51j
.text:00002882                                         ; _ssh2_userkey_loadpub:loc_26C3j ...
.text:00002882                 cmp     [ebp+var_8], 0
.text:00002886                 jz      short loc_2894
.text:00002888                 mov     edx, [ebp+var_8]
.text:0000288B                 push    edx             ; FILE *
.text:0000288C                 call    _fclose
.text:00002891                 add     esp, 4
.text:00002894
.text:00002894 loc_2894:                               ; CODE XREF: _ssh2_userkey_loadpub+27Ej
.text:00002894                 cmp     [ebp+var_44], 0
.text:00002898                 jz      short loc_28A6
.text:0000289A                 mov     eax, [ebp+var_44]
.text:0000289D                 push    eax
.text:0000289E                 call    _safefree
.text:000028A3                 add     esp, 4
.text:000028A6
.text:000028A6 loc_28A6:                               ; CODE XREF: _ssh2_userkey_loadpub+290j
.text:000028A6                 cmp     [ebp+arg_10], 0
.text:000028AA                 jz      short loc_28B4
.text:000028AC                 mov     ecx, [ebp+arg_10]
.text:000028AF                 mov     edx, [ebp+var_58]
.text:000028B2                 mov     [ecx], edx
.text:000028B4
.text:000028B4 loc_28B4:                               ; CODE XREF: _ssh2_userkey_loadpub+2A2j
.text:000028B4                 xor     eax, eax
.text:000028B6
.text:000028B6 loc_28B6:                               ; CODE XREF: _ssh2_userkey_loadpub+278j
.text:000028B6                 push    edx
.text:000028B7                 mov     ecx, ebp
.text:000028B9                 push    eax
.text:000028BA                 lea     edx, $LN30
.text:000028C0                 call    @_RTC_CheckStackVars@8
.text:000028C5                 pop     eax
.text:000028C6                 pop     edx
.text:000028C7                 pop     edi
.text:000028C8                 mov     ecx, [ebp+var_4]
.text:000028CB                 xor     ecx, ebp
.text:000028CD                 call    @__security_check_cookie@4
.text:000028D2                 add     esp, 5Ch
.text:000028D5                 cmp     ebp, esp
.text:000028D7                 call    __RTC_CheckEsp
.text:000028DC                 mov     esp, ebp
.text:000028DE                 pop     ebp
.text:000028DF                 retn
.text:000028DF _ssh2_userkey_loadpub endp
.text:000028DF
.text:000028DF ; ---------------------------------------------------------------------------
.text:000028E0 $LN30           dd 2                    ; DATA XREF: _ssh2_userkey_loadpub+2B2o
.text:000028E4                 dd offset $LN29
.text:000028E8 $LN29           db 0CCh                 ; DATA XREF: .text:000028E4o
.text:000028E9                 db 3 dup(0FFh)
.text:000028EC                 dd offset $SG87128      ; "wrong passphrase"
.text:000028F0                 dd offset $LN27         ; "header"
.text:000028F4                 dd 0FFFFFFB4h, 4
.text:000028FC                 dd offset $LN28         ; "public_blob_len"
.text:00002900 $LN28           db 'public_blob_len',0  ; DATA XREF: .text:000028FCo
.text:00002910 $LN27           db 'header',0           ; DATA XREF: .text:000028F0o
.text:00002917                 align 4
.text:00002918
.text:00002918 ; =============== S U B R O U T I N E =======================================
.text:00002918
.text:00002918 ; Attributes: bp-based frame
.text:00002918
.text:00002918                 public _ssh2_userkey_encrypted
.text:00002918 _ssh2_userkey_encrypted proc near
.text:00002918
.text:00002918 var_44          = dword ptr -44h
.text:00002918 var_40          = dword ptr -40h
.text:00002918 var_3C          = dword ptr -3Ch
.text:00002918 var_34          = byte ptr -34h
.text:00002918 var_8           = dword ptr -8
.text:00002918 var_4           = dword ptr -4
.text:00002918 arg_0           = dword ptr  8
.text:00002918 arg_4           = dword ptr  0Ch
.text:00002918
.text:00002918                 push    ebp
.text:00002919                 mov     ebp, esp
.text:0000291B                 sub     esp, 44h
.text:0000291E                 push    edi
.text:0000291F                 lea     edi, [ebp+var_44]
.text:00002922                 mov     ecx, 11h
.text:00002927                 mov     eax, 0CCCCCCCCh
.text:0000292C                 rep stosd
.text:0000292E                 mov     eax, dword ptr ds:___security_cookie
.text:00002933                 xor     eax, ebp
.text:00002935                 mov     [ebp+var_4], eax
.text:00002938                 cmp     [ebp+arg_4], 0
.text:0000293C                 jz      short loc_2947
.text:0000293E                 mov     eax, [ebp+arg_4]
.text:00002941                 mov     dword ptr [eax], 0
.text:00002947
.text:00002947 loc_2947:                               ; CODE XREF: _ssh2_userkey_encrypted+24j
.text:00002947                 push    offset $SG87570 ; "rb"
.text:0000294C                 mov     ecx, [ebp+arg_0]
.text:0000294F                 mov     edx, [ecx]
.text:00002951                 push    edx             ; char *
.text:00002952                 call    _fopen
.text:00002957                 add     esp, 8
.text:0000295A                 mov     [ebp+var_8], eax
.text:0000295D                 cmp     [ebp+var_8], 0
.text:00002961                 jnz     short loc_296A
.text:00002963                 xor     eax, eax
.text:00002965                 jmp     loc_2B2E
.text:0000296A ; ---------------------------------------------------------------------------
.text:0000296A
.text:0000296A loc_296A:                               ; CODE XREF: _ssh2_userkey_encrypted+49j
.text:0000296A                 lea     eax, [ebp+var_34]
.text:0000296D                 push    eax             ; int
.text:0000296E                 mov     ecx, [ebp+var_8]
.text:00002971                 push    ecx             ; FILE *
.text:00002972                 call    _read_header
.text:00002977                 add     esp, 8
.text:0000297A                 test    eax, eax
.text:0000297C                 jz      short loc_29A8
.text:0000297E                 push    offset $SG87574 ; "PuTTY-User-Key-File-2"
.text:00002983                 lea     edx, [ebp+var_34]
.text:00002986                 push    edx             ; char *
.text:00002987                 call    _strcmp
.text:0000298C                 add     esp, 8
.text:0000298F                 test    eax, eax
.text:00002991                 jz      short loc_29BB
.text:00002993                 push    offset $SG87575 ; "PuTTY-User-Key-File-1"
.text:00002998                 lea     eax, [ebp+var_34]
.text:0000299B                 push    eax             ; char *
.text:0000299C                 call    _strcmp
.text:000029A1                 add     esp, 8
.text:000029A4                 test    eax, eax
.text:000029A6                 jz      short loc_29BB
.text:000029A8
.text:000029A8 loc_29A8:                               ; CODE XREF: _ssh2_userkey_encrypted+64j
.text:000029A8                 mov     ecx, [ebp+var_8]
.text:000029AB                 push    ecx             ; FILE *
.text:000029AC                 call    _fclose
.text:000029B1                 add     esp, 4
.text:000029B4                 xor     eax, eax
.text:000029B6                 jmp     loc_2B2E
.text:000029BB ; ---------------------------------------------------------------------------
.text:000029BB
.text:000029BB loc_29BB:                               ; CODE XREF: _ssh2_userkey_encrypted+79j
.text:000029BB                                         ; _ssh2_userkey_encrypted+8Ej
.text:000029BB                 mov     edx, [ebp+var_8]
.text:000029BE                 push    edx             ; FILE *
.text:000029BF                 call    _read_body
.text:000029C4                 add     esp, 4
.text:000029C7                 mov     [ebp+var_3C], eax
.text:000029CA                 cmp     [ebp+var_3C], 0
.text:000029CE                 jnz     short loc_29E3
.text:000029D0                 mov     eax, [ebp+var_8]
.text:000029D3                 push    eax             ; FILE *
.text:000029D4                 call    _fclose
.text:000029D9                 add     esp, 4
.text:000029DC                 xor     eax, eax
.text:000029DE                 jmp     loc_2B2E
.text:000029E3 ; ---------------------------------------------------------------------------
.text:000029E3
.text:000029E3 loc_29E3:                               ; CODE XREF: _ssh2_userkey_encrypted+B6j
.text:000029E3                 mov     ecx, [ebp+var_3C]
.text:000029E6                 push    ecx
.text:000029E7                 call    _safefree
.text:000029EC                 add     esp, 4
.text:000029EF                 lea     edx, [ebp+var_34]
.text:000029F2                 push    edx             ; int
.text:000029F3                 mov     eax, [ebp+var_8]
.text:000029F6                 push    eax             ; FILE *
.text:000029F7                 call    _read_header
.text:000029FC                 add     esp, 8
.text:000029FF                 test    eax, eax
.text:00002A01                 jz      short loc_2A18
.text:00002A03                 push    offset $SG87580 ; "Encryption"
.text:00002A08                 lea     ecx, [ebp+var_34]
.text:00002A0B                 push    ecx             ; char *
.text:00002A0C                 call    _strcmp
.text:00002A11                 add     esp, 8
.text:00002A14                 test    eax, eax
.text:00002A16                 jz      short loc_2A2B
.text:00002A18
.text:00002A18 loc_2A18:                               ; CODE XREF: _ssh2_userkey_encrypted+E9j
.text:00002A18                 mov     edx, [ebp+var_8]
.text:00002A1B                 push    edx             ; FILE *
.text:00002A1C                 call    _fclose
.text:00002A21                 add     esp, 4
.text:00002A24                 xor     eax, eax
.text:00002A26                 jmp     loc_2B2E
.text:00002A2B ; ---------------------------------------------------------------------------
.text:00002A2B
.text:00002A2B loc_2A2B:                               ; CODE XREF: _ssh2_userkey_encrypted+FEj
.text:00002A2B                 mov     eax, [ebp+var_8]
.text:00002A2E                 push    eax             ; FILE *
.text:00002A2F                 call    _read_body
.text:00002A34                 add     esp, 4
.text:00002A37                 mov     [ebp+var_3C], eax
.text:00002A3A                 cmp     [ebp+var_3C], 0
.text:00002A3E                 jnz     short loc_2A53
.text:00002A40                 mov     ecx, [ebp+var_8]
.text:00002A43                 push    ecx             ; FILE *
.text:00002A44                 call    _fclose
.text:00002A49                 add     esp, 4
.text:00002A4C                 xor     eax, eax
.text:00002A4E                 jmp     loc_2B2E
.text:00002A53 ; ---------------------------------------------------------------------------
.text:00002A53
.text:00002A53 loc_2A53:                               ; CODE XREF: _ssh2_userkey_encrypted+126j
.text:00002A53                 lea     edx, [ebp+var_34]
.text:00002A56                 push    edx             ; int
.text:00002A57                 mov     eax, [ebp+var_8]
.text:00002A5A                 push    eax             ; FILE *
.text:00002A5B                 call    _read_header
.text:00002A60                 add     esp, 8
.text:00002A63                 test    eax, eax
.text:00002A65                 jz      short loc_2A7C
.text:00002A67                 push    offset $SG87585 ; "Comment"
.text:00002A6C                 lea     ecx, [ebp+var_34]
.text:00002A6F                 push    ecx             ; char *
.text:00002A70                 call    _strcmp
.text:00002A75                 add     esp, 8
.text:00002A78                 test    eax, eax
.text:00002A7A                 jz      short loc_2A9E
.text:00002A7C
.text:00002A7C loc_2A7C:                               ; CODE XREF: _ssh2_userkey_encrypted+14Dj
.text:00002A7C                 mov     edx, [ebp+var_8]
.text:00002A7F                 push    edx             ; FILE *
.text:00002A80                 call    _fclose
.text:00002A85                 add     esp, 4
.text:00002A88                 mov     eax, [ebp+var_3C]
.text:00002A8B                 push    eax
.text:00002A8C                 call    _safefree
.text:00002A91                 add     esp, 4
.text:00002A94                 mov     eax, 1
.text:00002A99                 jmp     loc_2B2E
.text:00002A9E ; ---------------------------------------------------------------------------
.text:00002A9E
.text:00002A9E loc_2A9E:                               ; CODE XREF: _ssh2_userkey_encrypted+162j
.text:00002A9E                 mov     ecx, [ebp+var_8]
.text:00002AA1                 push    ecx             ; FILE *
.text:00002AA2                 call    _read_body
.text:00002AA7                 add     esp, 4
.text:00002AAA                 mov     [ebp+var_40], eax
.text:00002AAD                 cmp     [ebp+var_40], 0
.text:00002AB1                 jnz     short loc_2AD2
.text:00002AB3                 mov     edx, [ebp+var_8]
.text:00002AB6                 push    edx             ; FILE *
.text:00002AB7                 call    _fclose
.text:00002ABC                 add     esp, 4
.text:00002ABF                 mov     eax, [ebp+var_3C]
.text:00002AC2                 push    eax
.text:00002AC3                 call    _safefree
.text:00002AC8                 add     esp, 4
.text:00002ACB                 mov     eax, 1
.text:00002AD0                 jmp     short loc_2B2E
.text:00002AD2 ; ---------------------------------------------------------------------------
.text:00002AD2
.text:00002AD2 loc_2AD2:                               ; CODE XREF: _ssh2_userkey_encrypted+199j
.text:00002AD2                 cmp     [ebp+arg_4], 0
.text:00002AD6                 jz      short loc_2AE2
.text:00002AD8                 mov     ecx, [ebp+arg_4]
.text:00002ADB                 mov     edx, [ebp+var_40]
.text:00002ADE                 mov     [ecx], edx
.text:00002AE0                 jmp     short loc_2AEE
.text:00002AE2 ; ---------------------------------------------------------------------------
.text:00002AE2
.text:00002AE2 loc_2AE2:                               ; CODE XREF: _ssh2_userkey_encrypted+1BEj
.text:00002AE2                 mov     eax, [ebp+var_40]
.text:00002AE5                 push    eax
.text:00002AE6                 call    _safefree
.text:00002AEB                 add     esp, 4
.text:00002AEE
.text:00002AEE loc_2AEE:                               ; CODE XREF: _ssh2_userkey_encrypted+1C8j
.text:00002AEE                 mov     ecx, [ebp+var_8]
.text:00002AF1                 push    ecx             ; FILE *
.text:00002AF2                 call    _fclose
.text:00002AF7                 add     esp, 4
.text:00002AFA                 push    offset $SG87591 ; "aes256-cbc"
.text:00002AFF                 mov     edx, [ebp+var_3C]
.text:00002B02                 push    edx             ; char *
.text:00002B03                 call    _strcmp
.text:00002B08                 add     esp, 8
.text:00002B0B                 test    eax, eax
.text:00002B0D                 jnz     short loc_2B18
.text:00002B0F                 mov     [ebp+var_44], 1
.text:00002B16                 jmp     short loc_2B1F
.text:00002B18 ; ---------------------------------------------------------------------------
.text:00002B18
.text:00002B18 loc_2B18:                               ; CODE XREF: _ssh2_userkey_encrypted+1F5j
.text:00002B18                 mov     [ebp+var_44], 0
.text:00002B1F
.text:00002B1F loc_2B1F:                               ; CODE XREF: _ssh2_userkey_encrypted+1FEj
.text:00002B1F                 mov     eax, [ebp+var_3C]
.text:00002B22                 push    eax
.text:00002B23                 call    _safefree
.text:00002B28                 add     esp, 4
.text:00002B2B                 mov     eax, [ebp+var_44]
.text:00002B2E
.text:00002B2E loc_2B2E:                               ; CODE XREF: _ssh2_userkey_encrypted+4Dj
.text:00002B2E                                         ; _ssh2_userkey_encrypted+9Ej ...
.text:00002B2E                 push    edx
.text:00002B2F                 mov     ecx, ebp
.text:00002B31                 push    eax
.text:00002B32                 lea     edx, $LN20
.text:00002B38                 call    @_RTC_CheckStackVars@8
.text:00002B3D                 pop     eax
.text:00002B3E                 pop     edx
.text:00002B3F                 pop     edi
.text:00002B40                 mov     ecx, [ebp+var_4]
.text:00002B43                 xor     ecx, ebp
.text:00002B45                 call    @__security_check_cookie@4
.text:00002B4A                 add     esp, 44h
.text:00002B4D                 cmp     ebp, esp
.text:00002B4F                 call    __RTC_CheckEsp
.text:00002B54                 mov     esp, ebp
.text:00002B56                 pop     ebp
.text:00002B57                 retn
.text:00002B57 _ssh2_userkey_encrypted endp
.text:00002B57
.text:00002B57 ; ---------------------------------------------------------------------------
.text:00002B58 $LN20           dd 1                    ; DATA XREF: _ssh2_userkey_encrypted+21Ao
.text:00002B5C                 dd offset $LN19
.text:00002B60 $LN19           db 0CCh                 ; DATA XREF: .text:00002B5Co
.text:00002B61                 db 3 dup(0FFh)
.text:00002B64                 dd offset $SG87128      ; "wrong passphrase"
.text:00002B68                 dd offset $LN18         ; "header"
.text:00002B6C $LN18           db 'header',0           ; DATA XREF: .text:00002B68o
.text:00002B73                 align 8
.text:00002B78
.text:00002B78 ; =============== S U B R O U T I N E =======================================
.text:00002B78
.text:00002B78 ; Attributes: bp-based frame
.text:00002B78
.text:00002B78                 public _base64_lines
.text:00002B78 _base64_lines   proc near               ; CODE XREF: _ssh2_save_userkey+5E2p
.text:00002B78                                         ; _ssh2_save_userkey+616p
.text:00002B78
.text:00002B78 arg_0           = dword ptr  8
.text:00002B78
.text:00002B78                 push    ebp
.text:00002B79                 mov     ebp, esp
.text:00002B7B                 mov     eax, [ebp+arg_0]
.text:00002B7E                 add     eax, 2Fh ; '/'
.text:00002B81                 cdq
.text:00002B82                 mov     ecx, 30h ; '0'
.text:00002B87                 idiv    ecx
.text:00002B89                 pop     ebp
.text:00002B8A                 retn
.text:00002B8A _base64_lines   endp
.text:00002B8A
.text:00002B8A ; ---------------------------------------------------------------------------
.text:00002B8B                 db 0Dh dup(0CCh)
.text:00002B98
.text:00002B98 ; =============== S U B R O U T I N E =======================================
.text:00002B98
.text:00002B98 ; Attributes: bp-based frame
.text:00002B98
.text:00002B98 ; int __cdecl base64_encode(FILE *, int, int, int)
.text:00002B98                 public _base64_encode
.text:00002B98 _base64_encode  proc near               ; CODE XREF: _ssh2_save_userkey+60Ap
.text:00002B98                                         ; _ssh2_save_userkey+63Ep
.text:00002B98
.text:00002B98 var_1C          = dword ptr -1Ch
.text:00002B98 var_18          = dword ptr -18h
.text:00002B98 var_14          = dword ptr -14h
.text:00002B98 var_10          = dword ptr -10h
.text:00002B98 var_C           = dword ptr -0Ch
.text:00002B98 var_8           = dword ptr -8
.text:00002B98 var_4           = dword ptr -4
.text:00002B98 arg_0           = dword ptr  8
.text:00002B98 arg_4           = dword ptr  0Ch
.text:00002B98 arg_8           = dword ptr  10h
.text:00002B98 arg_C           = dword ptr  14h
.text:00002B98
.text:00002B98                 push    ebp
.text:00002B99                 mov     ebp, esp
.text:00002B9B                 sub     esp, 1Ch
.text:00002B9E                 mov     eax, 0CCCCCCCCh
.text:00002BA3                 mov     [ebp+var_1C], eax
.text:00002BA6                 mov     [ebp+var_18], eax
.text:00002BA9                 mov     [ebp+var_14], eax
.text:00002BAC                 mov     [ebp+var_10], eax
.text:00002BAF                 mov     [ebp+var_C], eax
.text:00002BB2                 mov     [ebp+var_8], eax
.text:00002BB5                 mov     [ebp+var_4], eax
.text:00002BB8                 mov     [ebp+var_4], 0
.text:00002BBF
.text:00002BBF loc_2BBF:                               ; CODE XREF: _base64_encode:loc_2C5Fj
.text:00002BBF                 cmp     [ebp+arg_8], 0
.text:00002BC3                 jle     loc_2C64
.text:00002BC9                 cmp     [ebp+arg_8], 3
.text:00002BCD                 jge     short loc_2BD7
.text:00002BCF                 mov     eax, [ebp+arg_8]
.text:00002BD2                 mov     [ebp+var_1C], eax
.text:00002BD5                 jmp     short loc_2BDE
.text:00002BD7 ; ---------------------------------------------------------------------------
.text:00002BD7
.text:00002BD7 loc_2BD7:                               ; CODE XREF: _base64_encode+35j
.text:00002BD7                 mov     [ebp+var_1C], 3
.text:00002BDE
.text:00002BDE loc_2BDE:                               ; CODE XREF: _base64_encode+3Dj
.text:00002BDE                 mov     ecx, [ebp+var_1C]
.text:00002BE1                 mov     [ebp+var_14], ecx
.text:00002BE4                 lea     edx, [ebp+var_C]
.text:00002BE7                 push    edx
.text:00002BE8                 mov     eax, [ebp+var_14]
.text:00002BEB                 push    eax
.text:00002BEC                 mov     ecx, [ebp+arg_4]
.text:00002BEF                 push    ecx
.text:00002BF0                 call    _base64_encode_atom
.text:00002BF5                 add     esp, 0Ch
.text:00002BF8                 mov     edx, [ebp+arg_4]
.text:00002BFB                 add     edx, [ebp+var_14]
.text:00002BFE                 mov     [ebp+arg_4], edx
.text:00002C01                 mov     eax, [ebp+arg_8]
.text:00002C04                 sub     eax, [ebp+var_14]
.text:00002C07                 mov     [ebp+arg_8], eax
.text:00002C0A                 mov     [ebp+var_18], 0
.text:00002C11                 jmp     short loc_2C1C
.text:00002C13 ; ---------------------------------------------------------------------------
.text:00002C13
.text:00002C13 loc_2C13:                               ; CODE XREF: _base64_encode+C5j
.text:00002C13                 mov     ecx, [ebp+var_18]
.text:00002C16                 add     ecx, 1
.text:00002C19                 mov     [ebp+var_18], ecx
.text:00002C1C
.text:00002C1C loc_2C1C:                               ; CODE XREF: _base64_encode+79j
.text:00002C1C                 cmp     [ebp+var_18], 4
.text:00002C20                 jge     short loc_2C5F
.text:00002C22                 mov     edx, [ebp+var_4]
.text:00002C25                 cmp     edx, [ebp+arg_C]
.text:00002C28                 jl      short loc_2C3F
.text:00002C2A                 mov     [ebp+var_4], 0
.text:00002C31                 mov     eax, [ebp+arg_0]
.text:00002C34                 push    eax             ; FILE *
.text:00002C35                 push    0Ah             ; int
.text:00002C37                 call    _fputc
.text:00002C3C                 add     esp, 8
.text:00002C3F
.text:00002C3F loc_2C3F:                               ; CODE XREF: _base64_encode+90j
.text:00002C3F                 mov     ecx, [ebp+arg_0]
.text:00002C42                 push    ecx             ; FILE *
.text:00002C43                 mov     edx, [ebp+var_18]
.text:00002C46                 movsx   eax, byte ptr [ebp+edx+var_C]
.text:00002C4B                 push    eax             ; int
.text:00002C4C                 call    _fputc
.text:00002C51                 add     esp, 8
.text:00002C54                 mov     ecx, [ebp+var_4]
.text:00002C57                 add     ecx, 1
.text:00002C5A                 mov     [ebp+var_4], ecx
.text:00002C5D                 jmp     short loc_2C13
.text:00002C5F ; ---------------------------------------------------------------------------
.text:00002C5F
.text:00002C5F loc_2C5F:                               ; CODE XREF: _base64_encode+88j
.text:00002C5F                 jmp     loc_2BBF
.text:00002C64 ; ---------------------------------------------------------------------------
.text:00002C64
.text:00002C64 loc_2C64:                               ; CODE XREF: _base64_encode+2Bj
.text:00002C64                 mov     edx, [ebp+arg_0]
.text:00002C67                 push    edx             ; FILE *
.text:00002C68                 push    0Ah             ; int
.text:00002C6A                 call    _fputc
.text:00002C6F                 add     esp, 8
.text:00002C72                 push    edx
.text:00002C73                 mov     ecx, ebp
.text:00002C75                 push    eax
.text:00002C76                 lea     edx, $LN13_1
.text:00002C7C                 call    @_RTC_CheckStackVars@8
.text:00002C81                 pop     eax
.text:00002C82                 pop     edx
.text:00002C83                 add     esp, 1Ch
.text:00002C86                 cmp     ebp, esp
.text:00002C88                 call    __RTC_CheckEsp
.text:00002C8D                 mov     esp, ebp
.text:00002C8F                 pop     ebp
.text:00002C90                 retn
.text:00002C90 _base64_encode  endp
.text:00002C90
.text:00002C90 ; ---------------------------------------------------------------------------
.text:00002C91                 align 4
.text:00002C94 $LN13_1         dd 1                    ; DATA XREF: _base64_encode+DEo
.text:00002C98                 dd offset $LN12_1
.text:00002C9C $LN12_1         dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00002C98o
.text:00002CA4                 dd offset $LN11_1
.text:00002CA8 $LN11_1         dd 74756Fh, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00002CA4o
.text:00002CB8
.text:00002CB8 ; =============== S U B R O U T I N E =======================================
.text:00002CB8
.text:00002CB8 ; Attributes: bp-based frame
.text:00002CB8
.text:00002CB8 ; int __cdecl ssh2_save_userkey(int, int, char *)
.text:00002CB8                 public _ssh2_save_userkey
.text:00002CB8 _ssh2_save_userkey proc near
.text:00002CB8
.text:00002CB8 var_1B8         = byte ptr -1B8h
.text:00002CB8 var_1B4         = byte ptr -1B4h
.text:00002CB8 var_14C         = byte ptr -14Ch
.text:00002CB8 var_138         = byte ptr -138h
.text:00002CB8 var_11C         = byte ptr -11Ch
.text:00002CB8 var_F4          = byte ptr -0F4h
.text:00002CB8 var_D8          = byte ptr -0D8h
.text:00002CB8 var_74          = dword ptr -74h
.text:00002CB8 var_70          = dword ptr -70h
.text:00002CB8 var_6C          = dword ptr -6Ch
.text:00002CB8 var_68          = dword ptr -68h
.text:00002CB8 var_64          = dword ptr -64h
.text:00002CB8 var_60          = dword ptr -60h
.text:00002CB8 var_58          = byte ptr -58h
.text:00002CB8 var_40          = dword ptr -40h
.text:00002CB8 var_3C          = dword ptr -3Ch
.text:00002CB8 var_38          = dword ptr -38h
.text:00002CB8 var_34          = dword ptr -34h
.text:00002CB8 var_30          = dword ptr -30h
.text:00002CB8 var_28          = dword ptr -28h
.text:00002CB8 var_1C          = dword ptr -1Ch
.text:00002CB8 var_14          = dword ptr -14h
.text:00002CB8 var_10          = dword ptr -10h
.text:00002CB8 var_C           = dword ptr -0Ch
.text:00002CB8 var_8           = dword ptr -8
.text:00002CB8 var_4           = dword ptr -4
.text:00002CB8 arg_0           = dword ptr  8
.text:00002CB8 arg_4           = dword ptr  0Ch
.text:00002CB8 arg_8           = dword ptr  10h
.text:00002CB8
.text:00002CB8                 push    ebp
.text:00002CB9                 mov     ebp, esp
.text:00002CBB                 sub     esp, 1B8h
.text:00002CC1                 push    esi
.text:00002CC2                 push    edi
.text:00002CC3                 lea     edi, [ebp+var_1B8]
.text:00002CC9                 mov     ecx, 6Eh ; 'n'
.text:00002CCE                 mov     eax, 0CCCCCCCCh
.text:00002CD3                 rep stosd
.text:00002CD5                 mov     eax, dword ptr ds:___security_cookie
.text:00002CDA                 xor     eax, ebp
.text:00002CDC                 mov     [ebp+var_4], eax
.text:00002CDF                 mov     esi, esp
.text:00002CE1                 lea     eax, [ebp+var_1C]
.text:00002CE4                 push    eax
.text:00002CE5                 mov     ecx, [ebp+arg_4]
.text:00002CE8                 mov     edx, [ecx+4]
.text:00002CEB                 push    edx
.text:00002CEC                 mov     eax, [ebp+arg_4]
.text:00002CEF                 mov     ecx, [eax]
.text:00002CF1                 mov     edx, [ecx+0Ch]
.text:00002CF4                 call    edx
.text:00002CF6                 add     esp, 8
.text:00002CF9                 cmp     esi, esp
.text:00002CFB                 call    __RTC_CheckEsp
.text:00002D00                 mov     [ebp+var_C], eax
.text:00002D03                 mov     esi, esp
.text:00002D05                 lea     eax, [ebp+var_28]
.text:00002D08                 push    eax
.text:00002D09                 mov     ecx, [ebp+arg_4]
.text:00002D0C                 mov     edx, [ecx+4]
.text:00002D0F                 push    edx
.text:00002D10                 mov     eax, [ebp+arg_4]
.text:00002D13                 mov     ecx, [eax]
.text:00002D15                 mov     edx, [ecx+10h]
.text:00002D18                 call    edx
.text:00002D1A                 add     esp, 8
.text:00002D1D                 cmp     esi, esp
.text:00002D1F                 call    __RTC_CheckEsp
.text:00002D24                 mov     [ebp+var_10], eax
.text:00002D27                 cmp     [ebp+var_C], 0
.text:00002D2B                 jz      short loc_2D33
.text:00002D2D                 cmp     [ebp+var_10], 0
.text:00002D31                 jnz     short loc_2D52
.text:00002D33
.text:00002D33 loc_2D33:                               ; CODE XREF: _ssh2_save_userkey+73j
.text:00002D33                 mov     eax, [ebp+var_C]
.text:00002D36                 push    eax
.text:00002D37                 call    _safefree
.text:00002D3C                 add     esp, 4
.text:00002D3F                 mov     ecx, [ebp+var_10]
.text:00002D42                 push    ecx
.text:00002D43                 call    _safefree
.text:00002D48                 add     esp, 4
.text:00002D4B                 xor     eax, eax
.text:00002D4D                 jmp     loc_33A9
.text:00002D52 ; ---------------------------------------------------------------------------
.text:00002D52
.text:00002D52 loc_2D52:                               ; CODE XREF: _ssh2_save_userkey+79j
.text:00002D52                 cmp     [ebp+arg_8], 0
.text:00002D56                 jz      short loc_2D68
.text:00002D58                 mov     [ebp+var_40], offset $SG87638 ; "aes256-cbc"
.text:00002D5F                 mov     [ebp+var_38], 10h
.text:00002D66                 jmp     short loc_2D76
.text:00002D68 ; ---------------------------------------------------------------------------
.text:00002D68
.text:00002D68 loc_2D68:                               ; CODE XREF: _ssh2_save_userkey+9Ej
.text:00002D68                 mov     [ebp+var_40], offset $SG87640 ; "none"
.text:00002D6F                 mov     [ebp+var_38], 1
.text:00002D76
.text:00002D76 loc_2D76:                               ; CODE XREF: _ssh2_save_userkey+AEj
.text:00002D76                 mov     edx, [ebp+var_38]
.text:00002D79                 mov     eax, [ebp+var_28]
.text:00002D7C                 lea     ecx, [eax+edx-1]
.text:00002D80                 mov     [ebp+var_30], ecx
.text:00002D83                 mov     eax, [ebp+var_30]
.text:00002D86                 cdq
.text:00002D87                 idiv    [ebp+var_38]
.text:00002D8A                 mov     eax, [ebp+var_30]
.text:00002D8D                 sub     eax, edx
.text:00002D8F                 mov     [ebp+var_30], eax
.text:00002D92                 push    1
.text:00002D94                 mov     ecx, [ebp+var_30]
.text:00002D97                 push    ecx
.text:00002D98                 call    _safemalloc
.text:00002D9D                 add     esp, 8
.text:00002DA0                 mov     [ebp+var_14], eax
.text:00002DA3                 mov     edx, [ebp+var_30]
.text:00002DA6                 push    edx             ; size_t
.text:00002DA7                 push    0               ; int
.text:00002DA9                 mov     eax, [ebp+var_14]
.text:00002DAC                 push    eax             ; void *
.text:00002DAD                 call    _memset
.text:00002DB2                 add     esp, 0Ch
.text:00002DB5                 mov     ecx, [ebp+var_28]
.text:00002DB8                 push    ecx             ; size_t
.text:00002DB9                 mov     edx, [ebp+var_10]
.text:00002DBC                 push    edx             ; void *
.text:00002DBD                 mov     eax, [ebp+var_14]
.text:00002DC0                 push    eax             ; void *
.text:00002DC1                 call    _memcpy
.text:00002DC6                 add     esp, 0Ch
.text:00002DC9                 lea     ecx, [ebp+var_58]
.text:00002DCC                 push    ecx
.text:00002DCD                 mov     edx, [ebp+var_28]
.text:00002DD0                 push    edx
.text:00002DD1                 mov     eax, [ebp+var_10]
.text:00002DD4                 push    eax
.text:00002DD5                 call    _SHA_Simple
.text:00002DDA                 add     esp, 0Ch
.text:00002DDD                 mov     ecx, [ebp+var_30]
.text:00002DE0                 sub     ecx, [ebp+var_28]
.text:00002DE3                 cmp     ecx, 14h
.text:00002DE6                 jl      short loc_2DFF
.text:00002DE8                 push    418h
.text:00002DED                 push    offset $SG87644 ; "..\\..\\..\\sshpubk.c"
.text:00002DF2                 push    offset $SG87645 ; "priv_encrypted_len - priv_blob_len < 20"
.text:00002DF7                 call    __wassert
.text:00002DFC ; ---------------------------------------------------------------------------
.text:00002DFC                 add     esp, 0Ch
.text:00002DFF
.text:00002DFF loc_2DFF:                               ; CODE XREF: _ssh2_save_userkey+12Ej
.text:00002DFF                 mov     eax, [ebp+var_30]
.text:00002E02                 sub     eax, [ebp+var_28]
.text:00002E05                 push    eax             ; size_t
.text:00002E06                 lea     ecx, [ebp+var_58]
.text:00002E09                 push    ecx             ; void *
.text:00002E0A                 mov     edx, [ebp+var_14]
.text:00002E0D                 add     edx, [ebp+var_28]
.text:00002E10                 push    edx             ; void *
.text:00002E11                 call    _memcpy
.text:00002E16                 add     esp, 0Ch
.text:00002E19                 mov     eax, [ebp+arg_4]
.text:00002E1C                 mov     ecx, [eax]
.text:00002E1E                 mov     edx, [ecx+30h]
.text:00002E21                 push    edx             ; char *
.text:00002E22                 call    _strlen
.text:00002E27                 add     esp, 4
.text:00002E2A                 mov     [ebp+var_6C], eax
.text:00002E2D                 mov     eax, [ebp+var_40]
.text:00002E30                 push    eax             ; char *
.text:00002E31                 call    _strlen
.text:00002E36                 add     esp, 4
.text:00002E39                 mov     [ebp+var_70], eax
.text:00002E3C                 mov     ecx, [ebp+arg_4]
.text:00002E3F                 mov     edx, [ecx+8]
.text:00002E42                 push    edx             ; char *
.text:00002E43                 call    _strlen
.text:00002E48                 add     esp, 4
.text:00002E4B                 mov     [ebp+var_74], eax
.text:00002E4E                 mov     ecx, 7
.text:00002E53                 mov     esi, offset $SG87655 ; "putty-private-key-file-mac-key"
.text:00002E58                 lea     edi, [ebp+var_11C]
.text:00002E5E                 rep movsd
.text:00002E60                 movsw
.text:00002E62                 movsb
.text:00002E63                 mov     eax, [ebp+var_70]
.text:00002E66                 mov     ecx, [ebp+var_6C]
.text:00002E69                 lea     edx, [ecx+eax+8]
.text:00002E6D                 mov     eax, [ebp+var_74]
.text:00002E70                 lea     ecx, [edx+eax+4]
.text:00002E74                 mov     edx, [ebp+var_1C]
.text:00002E77                 lea     eax, [ecx+edx+4]
.text:00002E7B                 mov     ecx, [ebp+var_30]
.text:00002E7E                 lea     edx, [eax+ecx+4]
.text:00002E82                 mov     [ebp+var_64], edx
.text:00002E85                 push    1
.text:00002E87                 mov     eax, [ebp+var_64]
.text:00002E8A                 push    eax
.text:00002E8B                 call    _safemalloc
.text:00002E90                 add     esp, 8
.text:00002E93                 mov     [ebp+var_60], eax
.text:00002E96                 mov     ecx, [ebp+var_60]
.text:00002E99                 mov     [ebp+var_68], ecx
.text:00002E9C                 mov     edx, [ebp+var_6C]
.text:00002E9F                 sar     edx, 18h
.text:00002EA2                 mov     eax, [ebp+var_68]
.text:00002EA5                 mov     [eax], dl
.text:00002EA7                 mov     ecx, [ebp+var_6C]
.text:00002EAA                 sar     ecx, 10h
.text:00002EAD                 mov     edx, [ebp+var_68]
.text:00002EB0                 mov     [edx+1], cl
.text:00002EB3                 mov     eax, [ebp+var_6C]
.text:00002EB6                 sar     eax, 8
.text:00002EB9                 mov     ecx, [ebp+var_68]
.text:00002EBC                 mov     [ecx+2], al
.text:00002EBF                 mov     edx, [ebp+var_68]
.text:00002EC2                 mov     al, byte ptr [ebp+var_6C]
.text:00002EC5                 mov     [edx+3], al
.text:00002EC8                 mov     ecx, [ebp+var_6C]
.text:00002ECB                 push    ecx             ; size_t
.text:00002ECC                 mov     edx, [ebp+arg_4]
.text:00002ECF                 mov     eax, [edx]
.text:00002ED1                 mov     ecx, [eax+30h]
.text:00002ED4                 push    ecx             ; void *
.text:00002ED5                 mov     edx, [ebp+var_68]
.text:00002ED8                 add     edx, 4
.text:00002EDB                 push    edx             ; void *
.text:00002EDC                 call    _memcpy
.text:00002EE1                 add     esp, 0Ch
.text:00002EE4                 mov     eax, [ebp+var_6C]
.text:00002EE7                 mov     ecx, [ebp+var_68]
.text:00002EEA                 lea     edx, [ecx+eax+4]
.text:00002EEE                 mov     [ebp+var_68], edx
.text:00002EF1                 mov     eax, [ebp+var_70]
.text:00002EF4                 sar     eax, 18h
.text:00002EF7                 mov     ecx, [ebp+var_68]
.text:00002EFA                 mov     [ecx], al
.text:00002EFC                 mov     edx, [ebp+var_70]
.text:00002EFF                 sar     edx, 10h
.text:00002F02                 mov     eax, [ebp+var_68]
.text:00002F05                 mov     [eax+1], dl
.text:00002F08                 mov     ecx, [ebp+var_70]
.text:00002F0B                 sar     ecx, 8
.text:00002F0E                 mov     edx, [ebp+var_68]
.text:00002F11                 mov     [edx+2], cl
.text:00002F14                 mov     eax, [ebp+var_68]
.text:00002F17                 mov     cl, byte ptr [ebp+var_70]
.text:00002F1A                 mov     [eax+3], cl
.text:00002F1D                 mov     edx, [ebp+var_70]
.text:00002F20                 push    edx             ; size_t
.text:00002F21                 mov     eax, [ebp+var_40]
.text:00002F24                 push    eax             ; void *
.text:00002F25                 mov     ecx, [ebp+var_68]
.text:00002F28                 add     ecx, 4
.text:00002F2B                 push    ecx             ; void *
.text:00002F2C                 call    _memcpy
.text:00002F31                 add     esp, 0Ch
.text:00002F34                 mov     edx, [ebp+var_70]
.text:00002F37                 mov     eax, [ebp+var_68]
.text:00002F3A                 lea     ecx, [eax+edx+4]
.text:00002F3E                 mov     [ebp+var_68], ecx
.text:00002F41                 mov     edx, [ebp+var_74]
.text:00002F44                 sar     edx, 18h
.text:00002F47                 mov     eax, [ebp+var_68]
.text:00002F4A                 mov     [eax], dl
.text:00002F4C                 mov     ecx, [ebp+var_74]
.text:00002F4F                 sar     ecx, 10h
.text:00002F52                 mov     edx, [ebp+var_68]
.text:00002F55                 mov     [edx+1], cl
.text:00002F58                 mov     eax, [ebp+var_74]
.text:00002F5B                 sar     eax, 8
.text:00002F5E                 mov     ecx, [ebp+var_68]
.text:00002F61                 mov     [ecx+2], al
.text:00002F64                 mov     edx, [ebp+var_68]
.text:00002F67                 mov     al, byte ptr [ebp+var_74]
.text:00002F6A                 mov     [edx+3], al
.text:00002F6D                 mov     ecx, [ebp+var_74]
.text:00002F70                 push    ecx             ; size_t
.text:00002F71                 mov     edx, [ebp+arg_4]
.text:00002F74                 mov     eax, [edx+8]
.text:00002F77                 push    eax             ; void *
.text:00002F78                 mov     ecx, [ebp+var_68]
.text:00002F7B                 add     ecx, 4
.text:00002F7E                 push    ecx             ; void *
.text:00002F7F                 call    _memcpy
.text:00002F84                 add     esp, 0Ch
.text:00002F87                 mov     edx, [ebp+var_74]
.text:00002F8A                 mov     eax, [ebp+var_68]
.text:00002F8D                 lea     ecx, [eax+edx+4]
.text:00002F91                 mov     [ebp+var_68], ecx
.text:00002F94                 mov     edx, [ebp+var_1C]
.text:00002F97                 sar     edx, 18h
.text:00002F9A                 mov     eax, [ebp+var_68]
.text:00002F9D                 mov     [eax], dl
.text:00002F9F                 mov     ecx, [ebp+var_1C]
.text:00002FA2                 sar     ecx, 10h
.text:00002FA5                 mov     edx, [ebp+var_68]
.text:00002FA8                 mov     [edx+1], cl
.text:00002FAB                 mov     eax, [ebp+var_1C]
.text:00002FAE                 sar     eax, 8
.text:00002FB1                 mov     ecx, [ebp+var_68]
.text:00002FB4                 mov     [ecx+2], al
.text:00002FB7                 mov     edx, [ebp+var_68]
.text:00002FBA                 mov     al, byte ptr [ebp+var_1C]
.text:00002FBD                 mov     [edx+3], al
.text:00002FC0                 mov     ecx, [ebp+var_1C]
.text:00002FC3                 push    ecx             ; size_t
.text:00002FC4                 mov     edx, [ebp+var_C]
.text:00002FC7                 push    edx             ; void *
.text:00002FC8                 mov     eax, [ebp+var_68]
.text:00002FCB                 add     eax, 4
.text:00002FCE                 push    eax             ; void *
.text:00002FCF                 call    _memcpy
.text:00002FD4                 add     esp, 0Ch
.text:00002FD7                 mov     ecx, [ebp+var_1C]
.text:00002FDA                 mov     edx, [ebp+var_68]
.text:00002FDD                 lea     eax, [edx+ecx+4]
.text:00002FE1                 mov     [ebp+var_68], eax
.text:00002FE4                 mov     ecx, [ebp+var_30]
.text:00002FE7                 sar     ecx, 18h
.text:00002FEA                 mov     edx, [ebp+var_68]
.text:00002FED                 mov     [edx], cl
.text:00002FEF                 mov     eax, [ebp+var_30]
.text:00002FF2                 sar     eax, 10h
.text:00002FF5                 mov     ecx, [ebp+var_68]
.text:00002FF8                 mov     [ecx+1], al
.text:00002FFB                 mov     edx, [ebp+var_30]
.text:00002FFE                 sar     edx, 8
.text:00003001                 mov     eax, [ebp+var_68]
.text:00003004                 mov     [eax+2], dl
.text:00003007                 mov     ecx, [ebp+var_68]
.text:0000300A                 mov     dl, byte ptr [ebp+var_30]
.text:0000300D                 mov     [ecx+3], dl
.text:00003010                 mov     eax, [ebp+var_30]
.text:00003013                 push    eax             ; size_t
.text:00003014                 mov     ecx, [ebp+var_14]
.text:00003017                 push    ecx             ; void *
.text:00003018                 mov     edx, [ebp+var_68]
.text:0000301B                 add     edx, 4
.text:0000301E                 push    edx             ; void *
.text:0000301F                 call    _memcpy
.text:00003024                 add     esp, 0Ch
.text:00003027                 mov     eax, [ebp+var_30]
.text:0000302A                 mov     ecx, [ebp+var_68]
.text:0000302D                 lea     edx, [ecx+eax+4]
.text:00003031                 mov     [ebp+var_68], edx
.text:00003034                 lea     eax, [ebp+var_D8]
.text:0000303A                 push    eax
.text:0000303B                 call    _SHA_Init
.text:00003040                 add     esp, 4
.text:00003043                 push    1Eh
.text:00003045                 lea     ecx, [ebp+var_11C]
.text:0000304B                 push    ecx
.text:0000304C                 lea     edx, [ebp+var_D8]
.text:00003052                 push    edx
.text:00003053                 call    _SHA_Bytes
.text:00003058                 add     esp, 0Ch
.text:0000305B                 cmp     [ebp+arg_8], 0
.text:0000305F                 jz      short loc_3081
.text:00003061                 mov     eax, [ebp+arg_8]
.text:00003064                 push    eax             ; char *
.text:00003065                 call    _strlen
.text:0000306A                 add     esp, 4
.text:0000306D                 push    eax
.text:0000306E                 mov     ecx, [ebp+arg_8]
.text:00003071                 push    ecx
.text:00003072                 lea     edx, [ebp+var_D8]
.text:00003078                 push    edx
.text:00003079                 call    _SHA_Bytes
.text:0000307E                 add     esp, 0Ch
.text:00003081
.text:00003081 loc_3081:                               ; CODE XREF: _ssh2_save_userkey+3A7j
.text:00003081                 lea     eax, [ebp+var_F4]
.text:00003087                 push    eax
.text:00003088                 lea     ecx, [ebp+var_D8]
.text:0000308E                 push    ecx
.text:0000308F                 call    _SHA_Final
.text:00003094                 add     esp, 8
.text:00003097                 lea     edx, [ebp+var_58]
.text:0000309A                 push    edx
.text:0000309B                 mov     eax, [ebp+var_64]
.text:0000309E                 push    eax
.text:0000309F                 mov     ecx, [ebp+var_60]
.text:000030A2                 push    ecx
.text:000030A3                 push    14h
.text:000030A5                 lea     edx, [ebp+var_F4]
.text:000030AB                 push    edx
.text:000030AC                 call    _hmac_sha1_simple
.text:000030B1                 add     esp, 14h
.text:000030B4                 mov     eax, [ebp+var_64]
.text:000030B7                 push    eax
.text:000030B8                 mov     ecx, [ebp+var_60]
.text:000030BB                 push    ecx
.text:000030BC                 call    _smemclr
.text:000030C1                 add     esp, 8
.text:000030C4                 mov     edx, [ebp+var_60]
.text:000030C7                 push    edx
.text:000030C8                 call    _safefree
.text:000030CD                 add     esp, 4
.text:000030D0                 push    14h
.text:000030D2                 lea     eax, [ebp+var_F4]
.text:000030D8                 push    eax
.text:000030D9                 call    _smemclr
.text:000030DE                 add     esp, 8
.text:000030E1                 push    60h ; '`'
.text:000030E3                 lea     ecx, [ebp+var_D8]
.text:000030E9                 push    ecx
.text:000030EA                 call    _smemclr
.text:000030EF                 add     esp, 8
.text:000030F2                 cmp     [ebp+arg_8], 0
.text:000030F6                 jz      loc_31E8
.text:000030FC                 mov     edx, [ebp+arg_8]
.text:000030FF                 push    edx             ; char *
.text:00003100                 call    _strlen
.text:00003105                 add     esp, 4
.text:00003108                 mov     [ebp+var_34], eax
.text:0000310B                 lea     eax, [ebp+var_1B4]
.text:00003111                 push    eax
.text:00003112                 call    _SHA_Init
.text:00003117                 add     esp, 4
.text:0000311A                 push    4
.text:0000311C                 push    offset $SG87682
.text:00003121                 lea     ecx, [ebp+var_1B4]
.text:00003127                 push    ecx
.text:00003128                 call    _SHA_Bytes
.text:0000312D                 add     esp, 0Ch
.text:00003130                 mov     edx, [ebp+var_34]
.text:00003133                 push    edx
.text:00003134                 mov     eax, [ebp+arg_8]
.text:00003137                 push    eax
.text:00003138                 lea     ecx, [ebp+var_1B4]
.text:0000313E                 push    ecx
.text:0000313F                 call    _SHA_Bytes
.text:00003144                 add     esp, 0Ch
.text:00003147                 lea     edx, [ebp+var_14C]
.text:0000314D                 push    edx
.text:0000314E                 lea     eax, [ebp+var_1B4]
.text:00003154                 push    eax
.text:00003155                 call    _SHA_Final
.text:0000315A                 add     esp, 8
.text:0000315D                 lea     ecx, [ebp+var_1B4]
.text:00003163                 push    ecx
.text:00003164                 call    _SHA_Init
.text:00003169                 add     esp, 4
.text:0000316C                 push    4
.text:0000316E                 push    offset $SG87683
.text:00003173                 lea     edx, [ebp+var_1B4]
.text:00003179                 push    edx
.text:0000317A                 call    _SHA_Bytes
.text:0000317F                 add     esp, 0Ch
.text:00003182                 mov     eax, [ebp+var_34]
.text:00003185                 push    eax
.text:00003186                 mov     ecx, [ebp+arg_8]
.text:00003189                 push    ecx
.text:0000318A                 lea     edx, [ebp+var_1B4]
.text:00003190                 push    edx
.text:00003191                 call    _SHA_Bytes
.text:00003196                 add     esp, 0Ch
.text:00003199                 lea     eax, [ebp+var_138]
.text:0000319F                 push    eax
.text:000031A0                 lea     ecx, [ebp+var_1B4]
.text:000031A6                 push    ecx
.text:000031A7                 call    _SHA_Final
.text:000031AC                 add     esp, 8
.text:000031AF                 mov     edx, [ebp+var_30]
.text:000031B2                 push    edx
.text:000031B3                 mov     eax, [ebp+var_14]
.text:000031B6                 push    eax
.text:000031B7                 lea     ecx, [ebp+var_14C]
.text:000031BD                 push    ecx
.text:000031BE                 call    _aes256_encrypt_pubkey
.text:000031C3                 add     esp, 0Ch
.text:000031C6                 push    28h ; '('
.text:000031C8                 lea     edx, [ebp+var_14C]
.text:000031CE                 push    edx
.text:000031CF                 call    _smemclr
.text:000031D4                 add     esp, 8
.text:000031D7                 push    60h ; '`'
.text:000031D9                 lea     eax, [ebp+var_1B4]
.text:000031DF                 push    eax
.text:000031E0                 call    _smemclr
.text:000031E5                 add     esp, 8
.text:000031E8
.text:000031E8 loc_31E8:                               ; CODE XREF: _ssh2_save_userkey+43Ej
.text:000031E8                 push    offset $SG87684 ; char *
.text:000031ED                 mov     ecx, [ebp+arg_0]
.text:000031F0                 mov     edx, [ecx]
.text:000031F2                 push    edx             ; char *
.text:000031F3                 call    _fopen
.text:000031F8                 add     esp, 8
.text:000031FB                 mov     [ebp+var_8], eax
.text:000031FE                 cmp     [ebp+var_8], 0
.text:00003202                 jnz     short loc_324F
.text:00003204                 mov     eax, [ebp+var_C]
.text:00003207                 push    eax
.text:00003208                 call    _safefree
.text:0000320D                 add     esp, 4
.text:00003210                 mov     ecx, [ebp+var_28]
.text:00003213                 push    ecx
.text:00003214                 mov     edx, [ebp+var_10]
.text:00003217                 push    edx
.text:00003218                 call    _smemclr
.text:0000321D                 add     esp, 8
.text:00003220                 mov     eax, [ebp+var_10]
.text:00003223                 push    eax
.text:00003224                 call    _safefree
.text:00003229                 add     esp, 4
.text:0000322C                 mov     ecx, [ebp+var_28]
.text:0000322F                 push    ecx
.text:00003230                 mov     edx, [ebp+var_14]
.text:00003233                 push    edx
.text:00003234                 call    _smemclr
.text:00003239                 add     esp, 8
.text:0000323C                 mov     eax, [ebp+var_14]
.text:0000323F                 push    eax
.text:00003240                 call    _safefree
.text:00003245                 add     esp, 4
.text:00003248                 xor     eax, eax
.text:0000324A                 jmp     loc_33A9
.text:0000324F ; ---------------------------------------------------------------------------
.text:0000324F
.text:0000324F loc_324F:                               ; CODE XREF: _ssh2_save_userkey+54Aj
.text:0000324F                 mov     ecx, [ebp+arg_4]
.text:00003252                 mov     edx, [ecx]
.text:00003254                 mov     eax, [edx+30h]
.text:00003257                 push    eax
.text:00003258                 push    offset $SG87686 ; "PuTTY-User-Key-File-2: %s\n"
.text:0000325D                 mov     ecx, [ebp+var_8]
.text:00003260                 push    ecx             ; FILE *
.text:00003261                 call    _fprintf
.text:00003266                 add     esp, 0Ch
.text:00003269                 mov     edx, [ebp+var_40]
.text:0000326C                 push    edx
.text:0000326D                 push    offset $SG87687 ; "Encryption: %s\n"
.text:00003272                 mov     eax, [ebp+var_8]
.text:00003275                 push    eax             ; FILE *
.text:00003276                 call    _fprintf
.text:0000327B                 add     esp, 0Ch
.text:0000327E                 mov     ecx, [ebp+arg_4]
.text:00003281                 mov     edx, [ecx+8]
.text:00003284                 push    edx
.text:00003285                 push    offset $SG87688 ; "Comment: %s\n"
.text:0000328A                 mov     eax, [ebp+var_8]
.text:0000328D                 push    eax             ; FILE *
.text:0000328E                 call    _fprintf
.text:00003293                 add     esp, 0Ch
.text:00003296                 mov     ecx, [ebp+var_1C]
.text:00003299                 push    ecx
.text:0000329A                 call    _base64_lines
.text:0000329F                 add     esp, 4
.text:000032A2                 push    eax
.text:000032A3                 push    offset $SG87689 ; "Public-Lines: %d\n"
.text:000032A8                 mov     edx, [ebp+var_8]
.text:000032AB                 push    edx             ; FILE *
.text:000032AC                 call    _fprintf
.text:000032B1                 add     esp, 0Ch
.text:000032B4                 push    40h ; '@'       ; int
.text:000032B6                 mov     eax, [ebp+var_1C]
.text:000032B9                 push    eax             ; int
.text:000032BA                 mov     ecx, [ebp+var_C]
.text:000032BD                 push    ecx             ; int
.text:000032BE                 mov     edx, [ebp+var_8]
.text:000032C1                 push    edx             ; FILE *
.text:000032C2                 call    _base64_encode
.text:000032C7                 add     esp, 10h
.text:000032CA                 mov     eax, [ebp+var_30]
.text:000032CD                 push    eax
.text:000032CE                 call    _base64_lines
.text:000032D3                 add     esp, 4
.text:000032D6                 push    eax
.text:000032D7                 push    offset $SG87690 ; "Private-Lines: %d\n"
.text:000032DC                 mov     ecx, [ebp+var_8]
.text:000032DF                 push    ecx             ; FILE *
.text:000032E0                 call    _fprintf
.text:000032E5                 add     esp, 0Ch
.text:000032E8                 push    40h ; '@'       ; int
.text:000032EA                 mov     edx, [ebp+var_30]
.text:000032ED                 push    edx             ; int
.text:000032EE                 mov     eax, [ebp+var_14]
.text:000032F1                 push    eax             ; int
.text:000032F2                 mov     ecx, [ebp+var_8]
.text:000032F5                 push    ecx             ; FILE *
.text:000032F6                 call    _base64_encode
.text:000032FB                 add     esp, 10h
.text:000032FE                 push    offset $SG87691 ; "Private-MAC: "
.text:00003303                 mov     edx, [ebp+var_8]
.text:00003306                 push    edx             ; FILE *
.text:00003307                 call    _fprintf
.text:0000330C                 add     esp, 8
.text:0000330F                 mov     [ebp+var_3C], 0
.text:00003316                 jmp     short loc_3321
.text:00003318 ; ---------------------------------------------------------------------------
.text:00003318
.text:00003318 loc_3318:                               ; CODE XREF: _ssh2_save_userkey+689j
.text:00003318                 mov     eax, [ebp+var_3C]
.text:0000331B                 add     eax, 1
.text:0000331E                 mov     [ebp+var_3C], eax
.text:00003321
.text:00003321 loc_3321:                               ; CODE XREF: _ssh2_save_userkey+65Ej
.text:00003321                 cmp     [ebp+var_3C], 14h
.text:00003325                 jge     short loc_3343
.text:00003327                 mov     ecx, [ebp+var_3C]
.text:0000332A                 movzx   edx, [ebp+ecx+var_58]
.text:0000332F                 push    edx
.text:00003330                 push    offset $SG87695 ; "%02x"
.text:00003335                 mov     eax, [ebp+var_8]
.text:00003338                 push    eax             ; FILE *
.text:00003339                 call    _fprintf
.text:0000333E                 add     esp, 0Ch
.text:00003341                 jmp     short loc_3318
.text:00003343 ; ---------------------------------------------------------------------------
.text:00003343
.text:00003343 loc_3343:                               ; CODE XREF: _ssh2_save_userkey+66Dj
.text:00003343                 push    offset $SG87696 ; "\n"
.text:00003348                 mov     ecx, [ebp+var_8]
.text:0000334B                 push    ecx             ; FILE *
.text:0000334C                 call    _fprintf
.text:00003351                 add     esp, 8
.text:00003354                 mov     edx, [ebp+var_8]
.text:00003357                 push    edx             ; FILE *
.text:00003358                 call    _fclose
.text:0000335D                 add     esp, 4
.text:00003360                 mov     eax, [ebp+var_C]
.text:00003363                 push    eax
.text:00003364                 call    _safefree
.text:00003369                 add     esp, 4
.text:0000336C                 mov     ecx, [ebp+var_28]
.text:0000336F                 push    ecx
.text:00003370                 mov     edx, [ebp+var_10]
.text:00003373                 push    edx
.text:00003374                 call    _smemclr
.text:00003379                 add     esp, 8
.text:0000337C                 mov     eax, [ebp+var_10]
.text:0000337F                 push    eax
.text:00003380                 call    _safefree
.text:00003385                 add     esp, 4
.text:00003388                 mov     ecx, [ebp+var_28]
.text:0000338B                 push    ecx
.text:0000338C                 mov     edx, [ebp+var_14]
.text:0000338F                 push    edx
.text:00003390                 call    _smemclr
.text:00003395                 add     esp, 8
.text:00003398                 mov     eax, [ebp+var_14]
.text:0000339B                 push    eax
.text:0000339C                 call    _safefree
.text:000033A1                 add     esp, 4
.text:000033A4                 mov     eax, 1
.text:000033A9
.text:000033A9 loc_33A9:                               ; CODE XREF: _ssh2_save_userkey+95j
.text:000033A9                                         ; _ssh2_save_userkey+592j
.text:000033A9                 push    edx
.text:000033AA                 mov     ecx, ebp
.text:000033AC                 push    eax
.text:000033AD                 lea     edx, $LN23
.text:000033B3                 call    @_RTC_CheckStackVars@8
.text:000033B8                 pop     eax
.text:000033B9                 pop     edx
.text:000033BA                 pop     edi
.text:000033BB                 pop     esi
.text:000033BC                 mov     ecx, [ebp+var_4]
.text:000033BF                 xor     ecx, ebp
.text:000033C1                 call    @__security_check_cookie@4
.text:000033C6                 add     esp, 1B8h
.text:000033CC                 cmp     ebp, esp
.text:000033CE                 call    __RTC_CheckEsp
.text:000033D3                 mov     esp, ebp
.text:000033D5                 pop     ebp
.text:000033D6                 retn
.text:000033D6 _ssh2_save_userkey endp
.text:000033D6
.text:000033D6 ; ---------------------------------------------------------------------------
.text:000033D7                 align 4
.text:000033D8 $LN23           dd 8                    ; DATA XREF: _ssh2_save_userkey+6F5o
.text:000033DC                 dd offset $LN22
.text:000033E0 $LN22           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:000033DCo
.text:000033E8                 dd offset $LN14_0       ; "pub_blob_len"
.text:000033EC                 dd 0FFFFFFD8h, 4
.text:000033F4                 dd offset $LN15_0       ; "priv_blob_len"
.text:000033F8                 dd 0FFFFFFA8h, 14h
.text:00003400                 dd offset $LN16         ; "priv_mac"
.text:00003404                 dd 0FFFFFF28h, 60h
.text:0000340C                 dd offset $LN17         ; "s"
.text:00003410                 dd 0FFFFFF0Ch, 14h
.text:00003418                 dd offset $LN18_0       ; "mackey"
.text:0000341C                 dd 0FFFFFEE4h, 1Fh
.text:00003424                 dd offset $LN19_0       ; "header"
.text:00003428                 dd 0FFFFFEB4h, 28h
.text:00003430                 dd offset $LN20_0
.text:00003434                 dd 0FFFFFE4Ch, 60h
.text:0000343C                 dd offset $LN21
.text:00003440 $LN21           db 73h, 0               ; DATA XREF: .text:0000343Co
.text:00003442 $LN20_0         dw 656Bh                ; DATA XREF: .text:00003430o
.text:00003444                 db 79h, 0
.text:00003446 $LN19_0         db 'header',0           ; DATA XREF: .text:00003424o
.text:0000344D $LN18_0         db 'mackey',0           ; DATA XREF: .text:00003418o
.text:00003454 $LN17           db 's',0                ; DATA XREF: .text:0000340Co
.text:00003456 $LN16           db 'priv_mac',0         ; DATA XREF: .text:00003400o
.text:0000345F $LN15_0         db 'priv_blob_len',0    ; DATA XREF: .text:000033F4o
.text:0000346D $LN14_0         db 'pub_blob_len',0     ; DATA XREF: .text:000033E8o
.text:0000347A                 db 0Eh dup(0CCh)
.text:00003488
.text:00003488 ; =============== S U B R O U T I N E =======================================
.text:00003488
.text:00003488 ; Attributes: bp-based frame
.text:00003488
.text:00003488                 public _key_type
.text:00003488 _key_type       proc near
.text:00003488
.text:00003488 var_94          = dword ptr -94h
.text:00003488 var_8C          = dword ptr -8Ch
.text:00003488 var_88          = dword ptr -88h
.text:00003488 var_84          = dword ptr -84h
.text:00003488 var_78          = byte ptr -78h
.text:00003488 var_4C          = dword ptr -4Ch
.text:00003488 var_48          = dword ptr -48h
.text:00003488 var_44          = dword ptr -44h
.text:00003488 var_40          = dword ptr -40h
.text:00003488 var_3C          = dword ptr -3Ch
.text:00003488 var_38          = byte ptr -38h
.text:00003488 var_2C          = byte ptr -2Ch
.text:00003488 var_8           = dword ptr -8
.text:00003488 var_4           = dword ptr -4
.text:00003488 arg_0           = dword ptr  8
.text:00003488
.text:00003488                 push    ebp
.text:00003489                 mov     ebp, esp
.text:0000348B                 sub     esp, 94h
.text:00003491                 push    esi
.text:00003492                 push    edi
.text:00003493                 lea     edi, [ebp+var_94]
.text:00003499                 mov     ecx, 25h ; '%'
.text:0000349E                 mov     eax, 0CCCCCCCCh
.text:000034A3                 rep stosd
.text:000034A5                 mov     eax, dword ptr ds:___security_cookie
.text:000034AA                 xor     eax, ebp
.text:000034AC                 mov     [ebp+var_4], eax
.text:000034AF                 mov     eax, $SG87703
.text:000034B4                 mov     [ebp+var_4C], eax
.text:000034B7                 mov     ecx, dword_524
.text:000034BD                 mov     [ebp+var_48], ecx
.text:000034C0                 mov     edx, dword_528
.text:000034C6                 mov     [ebp+var_44], edx
.text:000034C9                 mov     eax, dword_52C
.text:000034CE                 mov     [ebp+var_40], eax
.text:000034D1                 mov     ecx, dword_530
.text:000034D7                 mov     [ebp+var_3C], ecx
.text:000034DA                 mov     dl, byte_534
.text:000034E0                 mov     [ebp+var_38], dl
.text:000034E3                 mov     ecx, 8
.text:000034E8                 mov     esi, offset $SG87705 ; "---- BEGIN SSH2 ENCRYPTED PRIVAT"
.text:000034ED                 lea     edi, [ebp+var_78]
.text:000034F0                 rep movsd
.text:000034F2                 movsb
.text:000034F3                 mov     eax, $SG87707
.text:000034F8                 mov     [ebp+var_8C], eax
.text:000034FE                 mov     ecx, dword_560
.text:00003504                 mov     [ebp+var_88], ecx
.text:0000350A                 mov     edx, dword_564
.text:00003510                 mov     [ebp+var_84], edx
.text:00003516                 push    offset $SG87709 ; char *
.text:0000351B                 mov     eax, [ebp+arg_0]
.text:0000351E                 mov     ecx, [eax]
.text:00003520                 push    ecx             ; char *
.text:00003521                 call    _fopen
.text:00003526                 add     esp, 8
.text:00003529                 mov     [ebp+var_8], eax
.text:0000352C                 cmp     [ebp+var_8], 0
.text:00003530                 jnz     short loc_3539
.text:00003532                 xor     eax, eax
.text:00003534                 jmp     loc_35FC
.text:00003539 ; ---------------------------------------------------------------------------
.text:00003539
.text:00003539 loc_3539:                               ; CODE XREF: _key_type+A8j
.text:00003539                 mov     edx, [ebp+var_8]
.text:0000353C                 push    edx             ; FILE *
.text:0000353D                 push    20h ; ' '       ; size_t
.text:0000353F                 push    1               ; size_t
.text:00003541                 lea     eax, [ebp+var_2C]
.text:00003544                 push    eax             ; void *
.text:00003545                 call    _fread
.text:0000354A                 add     esp, 10h
.text:0000354D                 mov     [ebp+var_94], eax
.text:00003553                 mov     ecx, [ebp+var_8]
.text:00003556                 push    ecx             ; FILE *
.text:00003557                 call    _fclose
.text:0000355C                 add     esp, 4
.text:0000355F                 cmp     [ebp+var_94], 0
.text:00003566                 jge     short loc_356F
.text:00003568                 xor     eax, eax
.text:0000356A                 jmp     loc_35FC
.text:0000356F ; ---------------------------------------------------------------------------
.text:0000356F
.text:0000356F loc_356F:                               ; CODE XREF: _key_type+DEj
.text:0000356F                 cmp     [ebp+var_94], 20h ; ' '
.text:00003576                 jge     short loc_357F
.text:00003578                 mov     eax, 1
.text:0000357D                 jmp     short loc_35FC
.text:0000357F ; ---------------------------------------------------------------------------
.text:0000357F
.text:0000357F loc_357F:                               ; CODE XREF: _key_type+EEj
.text:0000357F                 push    20h ; ' '       ; size_t
.text:00003581                 push    offset $SG87714 ; "SSH PRIVATE KEY FILE FORMAT 1.1\n"
.text:00003586                 lea     edx, [ebp+var_2C]
.text:00003589                 push    edx             ; void *
.text:0000358A                 call    _memcmp
.text:0000358F                 add     esp, 0Ch
.text:00003592                 test    eax, eax
.text:00003594                 jnz     short loc_359D
.text:00003596                 mov     eax, 2
.text:0000359B                 jmp     short loc_35FC
.text:0000359D ; ---------------------------------------------------------------------------
.text:0000359D
.text:0000359D loc_359D:                               ; CODE XREF: _key_type+10Cj
.text:0000359D                 push    14h             ; size_t
.text:0000359F                 lea     eax, [ebp+var_4C]
.text:000035A2                 push    eax             ; void *
.text:000035A3                 lea     ecx, [ebp+var_2C]
.text:000035A6                 push    ecx             ; void *
.text:000035A7                 call    _memcmp
.text:000035AC                 add     esp, 0Ch
.text:000035AF                 test    eax, eax
.text:000035B1                 jnz     short loc_35BA
.text:000035B3                 mov     eax, 3
.text:000035B8                 jmp     short loc_35FC
.text:000035BA ; ---------------------------------------------------------------------------
.text:000035BA
.text:000035BA loc_35BA:                               ; CODE XREF: _key_type+129j
.text:000035BA                 push    0Bh             ; size_t
.text:000035BC                 lea     edx, [ebp+var_8C]
.text:000035C2                 push    edx             ; void *
.text:000035C3                 lea     eax, [ebp+var_2C]
.text:000035C6                 push    eax             ; void *
.text:000035C7                 call    _memcmp
.text:000035CC                 add     esp, 0Ch
.text:000035CF                 test    eax, eax
.text:000035D1                 jnz     short loc_35DA
.text:000035D3                 mov     eax, 4
.text:000035D8                 jmp     short loc_35FC
.text:000035DA ; ---------------------------------------------------------------------------
.text:000035DA
.text:000035DA loc_35DA:                               ; CODE XREF: _key_type+149j
.text:000035DA                 push    20h ; ' '       ; size_t
.text:000035DC                 lea     ecx, [ebp+var_78]
.text:000035DF                 push    ecx             ; void *
.text:000035E0                 lea     edx, [ebp+var_2C]
.text:000035E3                 push    edx             ; void *
.text:000035E4                 call    _memcmp
.text:000035E9                 add     esp, 0Ch
.text:000035EC                 test    eax, eax
.text:000035EE                 jnz     short loc_35F7
.text:000035F0                 mov     eax, 5
.text:000035F5                 jmp     short loc_35FC
.text:000035F7 ; ---------------------------------------------------------------------------
.text:000035F7
.text:000035F7 loc_35F7:                               ; CODE XREF: _key_type+166j
.text:000035F7                 mov     eax, 1
.text:000035FC
.text:000035FC loc_35FC:                               ; CODE XREF: _key_type+ACj
.text:000035FC                                         ; _key_type+E2j ...
.text:000035FC                 push    edx
.text:000035FD                 mov     ecx, ebp
.text:000035FF                 push    eax
.text:00003600                 lea     edx, $LN15_1
.text:00003606                 call    @_RTC_CheckStackVars@8
.text:0000360B                 pop     eax
.text:0000360C                 pop     edx
.text:0000360D                 pop     edi
.text:0000360E                 pop     esi
.text:0000360F                 mov     ecx, [ebp+var_4]
.text:00003612                 xor     ecx, ebp
.text:00003614                 call    @__security_check_cookie@4
.text:00003619                 add     esp, 94h
.text:0000361F                 cmp     ebp, esp
.text:00003621                 call    __RTC_CheckEsp
.text:00003626                 mov     esp, ebp
.text:00003628                 pop     ebp
.text:00003629                 retn
.text:00003629 _key_type       endp
.text:00003629
.text:00003629 ; ---------------------------------------------------------------------------
.text:0000362A                 align 4
.text:0000362C $LN15_1         dd 4                    ; DATA XREF: _key_type+178o
.text:00003630                 dd offset $LN14_1
.text:00003634 $LN14_1         dd 0FFFFFFD4h, 20h      ; DATA XREF: .text:00003630o
.text:0000363C                 dd offset $LN10_1       ; "buf"
.text:00003640                 dd 0FFFFFFB4h, 15h
.text:00003648                 dd offset $LN11_2       ; "putty2_sig"
.text:0000364C                 db 88h, 0FFh
.text:0000364E                 dw 0FFFFh
.text:00003650                 dd offset $SG87094+0Dh  ; "rror"
.text:00003654                 dd offset $LN12_2       ; "sshcom_sig"
.text:00003658                 dd 0FFFFFF74h, 0Ch
.text:00003660                 dd offset $LN13_2       ; "openssh_sig"
.text:00003664 $LN13_2         db 'openssh_sig',0      ; DATA XREF: .text:00003660o
.text:00003670 $LN12_2         db 'sshcom_sig',0       ; DATA XREF: .text:00003654o
.text:0000367B $LN11_2         db 'putty2_sig',0       ; DATA XREF: .text:00003648o
.text:00003686 $LN10_1         db 'buf',0              ; DATA XREF: .text:0000363Co
.text:0000368A                 db 0Eh dup(0CCh)
.text:00003698
.text:00003698 ; =============== S U B R O U T I N E =======================================
.text:00003698
.text:00003698 ; Attributes: bp-based frame
.text:00003698
.text:00003698                 public _key_type_to_str
.text:00003698 _key_type_to_str proc near
.text:00003698
.text:00003698 var_4           = dword ptr -4
.text:00003698 arg_0           = dword ptr  8
.text:00003698
.text:00003698                 push    ebp
.text:00003699                 mov     ebp, esp
.text:0000369B                 push    ecx
.text:0000369C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036A3                 mov     eax, [ebp+arg_0]
.text:000036A6                 mov     [ebp+var_4], eax
.text:000036A9                 cmp     [ebp+var_4], 5  ; switch 6 cases
.text:000036AD                 ja      short loc_36EF  ; jumptable 000036B2 default case
.text:000036AF                 mov     ecx, [ebp+var_4]
.text:000036B2                 jmp     ds:$LN12_3[ecx*4] ; switch jump
.text:000036B9 ; ---------------------------------------------------------------------------
.text:000036B9
.text:000036B9 $LN7_1:                                 ; CODE XREF: _key_type_to_str+1Aj
.text:000036B9                                         ; DATA XREF: .text:$LN12_3o
.text:000036B9                 mov     eax, offset $SG87726 ; jumptable 000036B2 case 0
.text:000036BE                 jmp     short loc_36F4
.text:000036C0 ; ---------------------------------------------------------------------------
.text:000036C0                 jmp     short loc_36F4
.text:000036C2 ; ---------------------------------------------------------------------------
.text:000036C2
.text:000036C2 $LN6_0:                                 ; CODE XREF: _key_type_to_str+1Aj
.text:000036C2                                         ; DATA XREF: .text:$LN12_3o
.text:000036C2                 mov     eax, offset $SG87728 ; jumptable 000036B2 case 1
.text:000036C7                 jmp     short loc_36F4
.text:000036C9 ; ---------------------------------------------------------------------------
.text:000036C9                 jmp     short loc_36F4
.text:000036CB ; ---------------------------------------------------------------------------
.text:000036CB
.text:000036CB $LN5_0:                                 ; CODE XREF: _key_type_to_str+1Aj
.text:000036CB                                         ; DATA XREF: .text:$LN12_3o
.text:000036CB                 mov     eax, offset $SG87730 ; jumptable 000036B2 case 2
.text:000036D0                 jmp     short loc_36F4
.text:000036D2 ; ---------------------------------------------------------------------------
.text:000036D2                 jmp     short loc_36F4
.text:000036D4 ; ---------------------------------------------------------------------------
.text:000036D4
.text:000036D4 $LN4:                                   ; CODE XREF: _key_type_to_str+1Aj
.text:000036D4                                         ; DATA XREF: .text:$LN12_3o
.text:000036D4                 mov     eax, offset $SG87732 ; jumptable 000036B2 case 3
.text:000036D9                 jmp     short loc_36F4
.text:000036DB ; ---------------------------------------------------------------------------
.text:000036DB                 jmp     short loc_36F4
.text:000036DD ; ---------------------------------------------------------------------------
.text:000036DD
.text:000036DD $LN3:                                   ; CODE XREF: _key_type_to_str+1Aj
.text:000036DD                                         ; DATA XREF: .text:$LN12_3o
.text:000036DD                 mov     eax, offset $SG87734 ; jumptable 000036B2 case 4
.text:000036E2                 jmp     short loc_36F4
.text:000036E4 ; ---------------------------------------------------------------------------
.text:000036E4                 jmp     short loc_36F4
.text:000036E6 ; ---------------------------------------------------------------------------
.text:000036E6
.text:000036E6 $LN2:                                   ; CODE XREF: _key_type_to_str+1Aj
.text:000036E6                                         ; DATA XREF: .text:$LN12_3o
.text:000036E6                 mov     eax, offset $SG87736 ; jumptable 000036B2 case 5
.text:000036EB                 jmp     short loc_36F4
.text:000036ED ; ---------------------------------------------------------------------------
.text:000036ED                 jmp     short loc_36F4
.text:000036EF ; ---------------------------------------------------------------------------
.text:000036EF
.text:000036EF loc_36EF:                               ; CODE XREF: _key_type_to_str+15j
.text:000036EF                 mov     eax, offset $SG87738 ; jumptable 000036B2 default case
.text:000036F4
.text:000036F4 loc_36F4:                               ; CODE XREF: _key_type_to_str+26j
.text:000036F4                                         ; _key_type_to_str+28j ...
.text:000036F4                 mov     esp, ebp
.text:000036F6                 pop     ebp
.text:000036F7                 retn
.text:000036F7 _key_type_to_str endp
.text:000036F7
.text:000036F7 ; ---------------------------------------------------------------------------
.text:000036F8 $LN12_3         dd offset $LN7_1        ; DATA XREF: _key_type_to_str+1Ar
.text:000036F8                 dd offset $LN6_0        ; jump table for switch statement
.text:000036F8                 dd offset $LN5_0
.text:000036F8                 dd offset $LN4
.text:000036F8                 dd offset $LN3
.text:000036F8                 dd offset $LN2
.text:000036F8 _text           ends
.text:000036F8
.rtc$TMZ:00003710 ; ===========================================================================
.rtc$TMZ:00003710
.rtc$TMZ:00003710 ; Segment type: Pure data
.rtc$TMZ:00003710 ; Segment permissions: Read
.rtc$TMZ:00003710 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003710                 assume cs:_rtc$TMZ
.rtc$TMZ:00003710                 ;org 3710h
.rtc$TMZ:00003710 ; COMDAT (pick any)
.rtc$TMZ:00003710 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003710 _rtc$TMZ        ends
.rtc$TMZ:00003710
.rtc$IMZ:00003714 ; ===========================================================================
.rtc$IMZ:00003714
.rtc$IMZ:00003714 ; Segment type: Pure data
.rtc$IMZ:00003714 ; Segment permissions: Read
.rtc$IMZ:00003714 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003714                 assume cs:_rtc$IMZ
.rtc$IMZ:00003714                 ;org 3714h
.rtc$IMZ:00003714 ; COMDAT (pick any)
.rtc$IMZ:00003714 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003714 _rtc$IMZ        ends
.rtc$IMZ:00003714
UNDEF:00003720 ; ===========================================================================
UNDEF:00003720
UNDEF:00003720 ; Segment type: Externs
UNDEF:00003720 ; UNDEF
UNDEF:00003720 ; int __cdecl fclose(FILE *)
UNDEF:00003720                 extrn _fclose:near      ; CODE XREF: _loadrsakey+B7p
UNDEF:00003720                                         ; _loadrsakey_main+61p ...
UNDEF:00003724 ; int __cdecl strcmp(const char *, const char *)
UNDEF:00003724                 extrn _strcmp:near      ; CODE XREF: _loadrsakey+72p
UNDEF:00003724                                         ; _rsakey_encrypted+5Fp ...
UNDEF:00003728 ; char *__cdecl fgets(char *, int, FILE *)
UNDEF:00003728                 extrn _fgets:near       ; CODE XREF: _loadrsakey+5Dp
UNDEF:00003728                                         ; _rsakey_encrypted+4Ap ...
UNDEF:0000372C ; FILE *__cdecl fopen(const char *, const char *)
UNDEF:0000372C                 extrn _fopen:near       ; CODE XREF: _loadrsakey+39p
UNDEF:0000372C                                         ; _rsakey_encrypted+2Bp ...
UNDEF:00003730                 extrn ___security_cookie:near ; DATA XREF: _loadrsakey+16r
UNDEF:00003730                                         ; _loadrsakey_main+20r ...
UNDEF:00003734                 extrn __RTC_CheckEsp:near ; CODE XREF: _loadrsakey+F7p
UNDEF:00003734                                         ; _loadrsakey_main+613p ...
UNDEF:00003738                 extrn @__security_check_cookie@4:near
UNDEF:00003738                                         ; CODE XREF: _loadrsakey+EDp
UNDEF:00003738                                         ; _loadrsakey_main+606p ...
UNDEF:0000373C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000373C                                         ; CODE XREF: _loadrsakey+E0p
UNDEF:0000373C                                         ; _loadrsakey_main+5F9p ...
UNDEF:00003740                 extrn __RTC_Shutdown:near
UNDEF:00003740                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003744                 extrn __RTC_InitBase:near
UNDEF:00003744                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003748                 extrn _freersakey:near  ; CODE XREF: _loadrsakey_main+5B7p
UNDEF:00003748                                         ; _rsakey_pubblob+EBp
UNDEF:0000374C                 extrn _rsa_verify:near  ; CODE XREF: _loadrsakey_main+59Ep
UNDEF:00003750                 extrn _ssh1_read_bignum:near
UNDEF:00003750                                         ; CODE XREF: _loadrsakey_main+4CFp
UNDEF:00003750                                         ; _loadrsakey_main+51Fp ...
UNDEF:00003754                 extrn _makeprivate:near ; CODE XREF: _loadrsakey_main+47Fp
UNDEF:00003758                 extrn _smemclr:near     ; CODE XREF: _loadrsakey_main+3DBp
UNDEF:00003758                                         ; _loadrsakey_main+5E1p ...
UNDEF:0000375C                 extrn _des3_decrypt_pubkey:near
UNDEF:0000375C                                         ; CODE XREF: _loadrsakey_main+3CAp
UNDEF:00003760                 extrn _MD5Final:near    ; CODE XREF: _loadrsakey_main+39Ap
UNDEF:00003760                                         ; _saversakey+3E2p
UNDEF:00003764                 extrn _MD5Update:near   ; CODE XREF: _loadrsakey_main+384p
UNDEF:00003764                                         ; _saversakey+3CCp
UNDEF:00003768 ; size_t __cdecl strlen(const char *)
UNDEF:00003768                 extrn _strlen:near      ; CODE XREF: _loadrsakey_main+370p
UNDEF:00003768                                         ; _saversakey+181p ...
UNDEF:0000376C                 extrn _MD5Init:near     ; CODE XREF: _loadrsakey_main+364p
UNDEF:0000376C                                         ; _saversakey+3ACp
UNDEF:00003770                 extrn _safefree:near    ; CODE XREF: _loadrsakey_main+30Dp
UNDEF:00003770                                         ; _ssh2_load_userkey+18Ep ...
UNDEF:00003774                 extrn _dupstr:near      ; CODE XREF: _loadrsakey_main+2E5p
UNDEF:00003778 ; void *__cdecl memcpy(void *, const void *, size_t)
UNDEF:00003778                 extrn _memcpy:near      ; CODE XREF: _loadrsakey_main+2AFp
UNDEF:00003778                                         ; _saversakey+44p ...
UNDEF:0000377C                 extrn _safemalloc:near  ; CODE XREF: _loadrsakey_main+27Cp
UNDEF:0000377C                                         ; _ssh2_load_userkey+619p ...
UNDEF:00003780                 extrn _toint:near       ; CODE XREF: _loadrsakey_main+231p
UNDEF:00003784                 extrn _makekey:near     ; CODE XREF: _loadrsakey_main+1BBp
UNDEF:00003788 ; size_t __cdecl fread(void *, size_t, size_t, FILE *)
UNDEF:00003788                 extrn _fread:near       ; CODE XREF: _loadrsakey_main+4Fp
UNDEF:00003788                                         ; _key_type+BDp
UNDEF:0000378C                 extrn __chkstk:near     ; CODE XREF: _loadrsakey_main+8p
UNDEF:0000378C                                         ; _saversakey+8p
UNDEF:00003790                 extrn _rsa_public_blob:near ; CODE XREF: _rsakey_pubblob+DAp
UNDEF:00003794 ; void *__cdecl memset(void *, int, size_t)
UNDEF:00003794                 extrn _memset:near      ; CODE XREF: _rsakey_pubblob+A7p
UNDEF:00003794                                         ; _ssh2_save_userkey+F5p
UNDEF:00003798 ; size_t __cdecl fwrite(const void *, size_t, size_t, FILE *)
UNDEF:00003798                 extrn _fwrite:near      ; CODE XREF: _saversakey+45Fp
UNDEF:0000379C                 extrn _des3_encrypt_pubkey:near ; CODE XREF: _saversakey+405p
UNDEF:000037A0                 extrn _random_byte:near ; CODE XREF: _saversakey+276p
UNDEF:000037A0                                         ; _saversakey+292p
UNDEF:000037A4                 extrn _ssh1_write_bignum:near ; CODE XREF: _saversakey+137p
UNDEF:000037A4                                         ; _saversakey+159p ...
UNDEF:000037A8                 extrn _bignum_bitcount:near ; CODE XREF: _saversakey+B9p
UNDEF:000037A8                                         ; _saversakey+D3p ...
UNDEF:000037AC                 extrn _ssh_dss:near     ; DATA XREF: _find_pubkey_alg+36o
UNDEF:000037B0                 extrn _ssh_rsa:near     ; DATA XREF: _find_pubkey_alg+18o
UNDEF:000037B4 ; int sprintf(char *, const char *, ...)
UNDEF:000037B4                 extrn _sprintf:near     ; CODE XREF: _ssh2_load_userkey+A28p
UNDEF:000037B8                 extrn _SHA_Simple:near  ; CODE XREF: _ssh2_load_userkey+9BEp
UNDEF:000037B8                                         ; _ssh2_save_userkey+11Dp
UNDEF:000037BC                 extrn _hmac_sha1_simple:near
UNDEF:000037BC                                         ; CODE XREF: _ssh2_load_userkey+97Dp
UNDEF:000037BC                                         ; _ssh2_save_userkey+3F4p
UNDEF:000037C0                 extrn _aes256_decrypt_pubkey:near
UNDEF:000037C0                                         ; CODE XREF: _ssh2_load_userkey+54Bp
UNDEF:000037C4                 extrn _SHA_Final:near   ; CODE XREF: _ssh2_load_userkey+4C9p
UNDEF:000037C4                                         ; _ssh2_load_userkey+51Ep ...
UNDEF:000037C8                 extrn _SHA_Bytes:near   ; CODE XREF: _ssh2_load_userkey+499p
UNDEF:000037C8                                         ; _ssh2_load_userkey+4B3p ...
UNDEF:000037CC                 extrn _SHA_Init:near    ; CODE XREF: _ssh2_load_userkey+483p
UNDEF:000037CC                                         ; _ssh2_load_userkey+4D8p ...
UNDEF:000037D0 ; int __cdecl atoi(const char *)
UNDEF:000037D0                 extrn _atoi:near        ; CODE XREF: _ssh2_load_userkey+2D2p
UNDEF:000037D0                                         ; _ssh2_load_userkey+357p ...
UNDEF:000037D4 ; int __cdecl strncmp(const char *, const char *, size_t)
UNDEF:000037D4                 extrn _strncmp:near     ; CODE XREF: _ssh2_load_userkey+125p
UNDEF:000037D4                                         ; _ssh2_userkey_loadpub+9Fp
UNDEF:000037D8                 extrn _old_keyfile_warning:near
UNDEF:000037D8                                         ; CODE XREF: _ssh2_load_userkey+109p
UNDEF:000037DC                 extrn __RTC_UninitUse:near
UNDEF:000037DC                                         ; CODE XREF: _ssh2_load_userkey+464p
UNDEF:000037DC                                         ; _ssh2_load_userkey+534p ...
UNDEF:000037E0 ; int __cdecl fgetc(FILE *)
UNDEF:000037E0                 extrn _fgetc:near       ; CODE XREF: _read_header+28p
UNDEF:000037E0                                         ; _read_header+53p ...
UNDEF:000037E4                 extrn _saferealloc:near ; CODE XREF: _read_body+C4p
UNDEF:000037E8 ; int __cdecl ungetc(int, FILE *)
UNDEF:000037E8                 extrn _ungetc:near      ; CODE XREF: _read_body+96p
UNDEF:000037EC                 extrn _base64_decode_atom:near ; CODE XREF: _read_blob+EDp
UNDEF:000037F0 ; int __cdecl fputc(int, FILE *)
UNDEF:000037F0                 extrn _fputc:near       ; CODE XREF: _base64_encode+9Fp
UNDEF:000037F0                                         ; _base64_encode+B4p ...
UNDEF:000037F4                 extrn _base64_encode_atom:near
UNDEF:000037F4                                         ; CODE XREF: _base64_encode+58p
UNDEF:000037F8 ; int fprintf(FILE *, const char *, ...)
UNDEF:000037F8                 extrn _fprintf:near     ; CODE XREF: _ssh2_save_userkey+5A9p
UNDEF:000037F8                                         ; _ssh2_save_userkey+5BEp ...
UNDEF:000037FC                 extrn _aes256_encrypt_pubkey:near
UNDEF:000037FC                                         ; CODE XREF: _ssh2_save_userkey+506p
UNDEF:00003800                 extrn __wassert:near    ; CODE XREF: _ssh2_save_userkey+13Fp
UNDEF:00003804 ; int __cdecl memcmp(const void *, const void *, size_t)
UNDEF:00003804                 extrn _memcmp:near      ; CODE XREF: _key_type+102p
UNDEF:00003804                                         ; _key_type+11Fp ...
UNDEF:00003804
UNDEF:00003804
UNDEF:00003804                 end