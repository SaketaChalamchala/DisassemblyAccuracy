.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 1B22F3A9D6E313CFB20709824E67D840
.data:00000000 ; Input CRC32 : 0D515D96
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\telnet.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85602        db 'BINARY',0           ; DATA XREF: _telopt:$LN55o
.data:00000007                 align 4
.data:00000008 $SG85604        db 'ECHO',0             ; DATA XREF: _telopt:$LN54o
.data:0000000D                 align 10h
.data:00000010 $SG85606        db 'RCP',0              ; DATA XREF: _telopt:$LN53o
.data:00000014 $SG85608        db 'SGA',0              ; DATA XREF: _telopt:$LN52_0o
.data:00000018 $SG85610        db 'NAMS',0             ; DATA XREF: _telopt:$LN51o
.data:0000001D                 align 10h
.data:00000020 $SG85612        db 'STATUS',0           ; DATA XREF: .rdata:000004F0o
.data:00000020                                         ; _telopt:$LN50o ...
.data:00000027 unk_27          db    0                 ; DATA XREF: .rdata:00000544o
.data:00000028 $SG85614        db 'TM',0               ; DATA XREF: _telopt:$LN49o
.data:0000002B                 align 4
.data:0000002C $SG85616        db 'RCTE',0             ; DATA XREF: _telopt:$LN48o
.data:00000031                 align 4
.data:00000034 $SG85618        db 'NAOL',0             ; DATA XREF: _telopt:$LN47o
.data:00000039                 align 4
.data:0000003C $SG85620        db 'NAOP',0             ; DATA XREF: _telopt:$LN46o
.data:00000041                 align 4
.data:00000044 $SG85622        db 'NAOCRD',0           ; DATA XREF: _telopt:$LN45_0o
.data:0000004B                 align 4
.data:0000004C $SG85624        db 'NAOHTS',0           ; DATA XREF: _telopt:$LN44o
.data:00000053                 align 4
.data:00000054 $SG85626        db 'NAOHTD',0           ; DATA XREF: _telopt:$LN43o
.data:0000005B                 align 4
.data:0000005C $SG85628        db 'NAOFFD',0           ; DATA XREF: _telopt:$LN42o
.data:00000063                 align 4
.data:00000064 $SG85630        db 'NAOVTS',0           ; DATA XREF: _telopt:$LN41o
.data:0000006B                 align 4
.data:0000006C $SG85632        db 'NAOVTD',0           ; DATA XREF: _telopt:$LN40o
.data:00000073                 align 4
.data:00000074 $SG85634        db 'NAOLFD',0           ; DATA XREF: _telopt:$LN39o
.data:0000007B                 align 4
.data:0000007C $SG85636        db 'XASCII',0           ; DATA XREF: _telopt:$LN38o
.data:00000083                 align 4
.data:00000084 $SG85638        db 'LOGOUT',0           ; DATA XREF: _telopt:$LN37o
.data:0000008B                 align 4
.data:0000008C $SG85640        db 'BM',0               ; DATA XREF: _telopt:$LN36o
.data:0000008F                 align 10h
.data:00000090 $SG85642        db 'DET',0              ; DATA XREF: _telopt:$LN35o
.data:00000094 $SG85644        db 'SUPDUP',0           ; DATA XREF: _telopt:$LN34o
.data:0000009B                 align 4
.data:0000009C $SG85646        db 'SUPDUPOUTPUT',0     ; DATA XREF: _telopt:$LN33o
.data:000000A9                 align 4
.data:000000AC $SG85648        db 'SNDLOC',0           ; DATA XREF: _telopt:$LN32o
.data:000000B3                 align 4
.data:000000B4 $SG85650        db 'TTYPE',0            ; DATA XREF: _telopt:$LN31_0o
.data:000000BA                 align 4
.data:000000BC $SG85652        db 'EOR',0              ; DATA XREF: _telopt:$LN30o
.data:000000C0 $SG85654        db 'TUID',0             ; DATA XREF: _telopt:$LN29o
.data:000000C5                 align 4
.data:000000C8 $SG85656        db 'OUTMRK',0           ; DATA XREF: _telopt:$LN28o
.data:000000CF                 align 10h
.data:000000D0 $SG85658        db 'TTYLOC',0           ; DATA XREF: _telopt:$LN27o
.data:000000D7                 align 4
.data:000000D8 $SG85660        db '3270REGIME',0       ; DATA XREF: _telopt:$LN26o
.data:000000E3                 align 4
.data:000000E4 $SG85662        db 'X3PAD',0            ; DATA XREF: _telopt:$LN25o
.data:000000EA                 align 4
.data:000000EC $SG85664        db 'NAWS',0             ; DATA XREF: _telopt:$LN24o
.data:000000F1                 align 4
.data:000000F4 $SG85666        db 'TSPEED',0           ; DATA XREF: _telopt:$LN23o
.data:000000FB unk_FB          db    0                 ; DATA XREF: .rdata:_o_nawso
.data:000000FB                                         ; .rdata:_o_tspeedo ...
.data:000000FC $SG85668        db 'LFLOW',0            ; DATA XREF: .rdata:000004C8o
.data:000000FC                                         ; .rdata:000004E4o ...
.data:00000102                 align 4
.data:00000104 $SG85670        db 'LINEMODE',0         ; DATA XREF: _telopt:$LN21o
.data:0000010D                 align 10h
.data:00000110 $SG85672        db 'XDISPLOC',0         ; DATA XREF: _telopt:$LN20o
.data:00000119                 align 4
.data:0000011C $SG85674        db 'OLD_ENVIRON',0      ; DATA XREF: _telopt:$LN19o
.data:00000128 $SG85676        db 'AUTHENTICATION',0   ; DATA XREF: _telopt:$LN18o
.data:00000137                 align 4
.data:00000138 $SG85678        db 'ENCRYPT',0          ; DATA XREF: _telopt:$LN17o
.data:00000140 $SG85680        db 'NEW_ENVIRON',0      ; DATA XREF: _telopt:$LN16o
.data:0000014C $SG85682        db 'TN3270E',0          ; DATA XREF: _telopt:$LN15o
.data:00000154 $SG85684        db 'XAUTH',0            ; DATA XREF: _telopt:$LN14o
.data:0000015A                 align 4
.data:0000015C $SG85686        db 'CHARSET',0          ; DATA XREF: _telopt:$LN13_0o
.data:00000164 $SG85688        db 'RSP',0              ; DATA XREF: _telopt:$LN12_0o
.data:00000168 $SG85690        db 'COM_PORT_OPTION',0  ; DATA XREF: _telopt:$LN11_0o
.data:00000178 $SG85692        db 'SLE',0              ; DATA XREF: _telopt:$LN10_0o
.data:0000017C $SG85694        db 'STARTTLS',0         ; DATA XREF: _telopt:$LN9_0o
.data:00000185                 align 4
.data:00000188 $SG85696        db 'KERMIT',0           ; DATA XREF: _telopt:$LN8_0o
.data:0000018F                 align 10h
.data:00000190 $SG85698        db 'SEND_URL',0         ; DATA XREF: _telopt:$LN7_0o
.data:00000199                 align 4
.data:0000019C $SG85700        db 'FORWARD_X',0        ; DATA XREF: _telopt:$LN6_0o
.data:000001A6                 align 4
.data:000001A8 $SG85702        db 'PRAGMA_LOGON',0     ; DATA XREF: _telopt:$LN5_0o
.data:000001B5                 align 4
.data:000001B8 $SG85704        db 'SSPI_LOGON',0       ; DATA XREF: _telopt:$LN4_0o
.data:000001C3                 align 4
.data:000001C4 $SG85706        db 'PRAGMA_HEARTBEAT',0 ; DATA XREF: _telopt:$LN3o
.data:000001D5                 align 4
.data:000001D8 $SG85708        db 'EXOPL',0            ; DATA XREF: _telopt:loc_1221o
.data:000001DE                 align 10h
.data:000001E0 $SG85710        db '<unknown>',0        ; DATA XREF: _telopt:$LN1o
.data:000001EA                 align 4
.data:000001EC $SG85808        db 'WILL',0             ; DATA XREF: _log_option+23o
.data:000001F1                 align 4
.data:000001F4 $SG85809        db 'WONT',0             ; DATA XREF: _log_option+35o
.data:000001F9                 align 4
.data:000001FC $SG85810        db 'DO',0               ; DATA XREF: _log_option+47o
.data:000001FF                 align 10h
.data:00000200 $SG85811        db 'DONT',0             ; DATA XREF: _log_option+59o
.data:00000205                 align 4
.data:00000208 $SG85812        db '<??>',0             ; DATA XREF: _log_option:loc_F8Ao
.data:0000020D                 align 10h
.data:00000210 $SG85813        db '%s:',9,'%s %s',0    ; DATA XREF: _log_option+90o
.data:0000021A                 align 4
.data:0000021C $SG85824        db 'client',0           ; DATA XREF: _send_opt+60o
.data:00000223                 align 4
.data:00000224 $SG85875        db 'server',0           ; DATA XREF: _proc_rec_opt+23o
.data:0000022B                 align 4
.data:0000022C $SG85926        db 'server:',9,'SB TSPEED SEND',0
.data:0000022C                                         ; DATA XREF: _process_subneg+118o
.data:00000243                 align 4
.data:00000244 $SG85927        db 'client:',9,'SB TSPEED IS %s',0
.data:00000244                                         ; DATA XREF: _process_subneg+130o
.data:0000025C $SG85929        db 'server:',9,'SB TSPEED <something weird>',0
.data:0000025C                                         ; DATA XREF: _process_subneg:loc_1875o
.data:00000280 $SG85940        db 'server:',9,'SB TTYPE SEND',0
.data:00000280                                         ; DATA XREF: _process_subneg+2A6o
.data:00000296                 align 4
.data:00000298 $SG85941        db 'client:',9,'SB TTYPE IS %s',0
.data:00000298                                         ; DATA XREF: _process_subneg+2C1o
.data:000002AF                 align 10h
.data:000002B0 $SG85943        db 'server:',9,'SB TTYPE <something weird>',0Dh,0Ah,0
.data:000002B0                                         ; DATA XREF: _process_subneg:loc_1A06o
.data:000002D5                 align 4
.data:000002D8 $SG85947        db 'server:',9,'SB %s SEND',0
.data:000002D8                                         ; DATA XREF: _process_subneg+360o
.data:000002EB                 align 4
.data:000002EC $SG85983        db 'client:',9,'SB %s IS <nothing>',0
.data:000002EC                                         ; DATA XREF: _process_subneg+6DCo
.data:00000307                 align 4
.data:00000308 $SG85985        db 'client:',9,'SB %s IS:',0
.data:00000308                                         ; DATA XREF: _process_subneg+720o
.data:0000031A                 align 4
.data:0000031C $SG85991        db 9,'%s=%s',0          ; DATA XREF: _process_subneg+795o
.data:00000323                 align 4
.data:00000324 $SG85993        db 9,'USER=%s',0        ; DATA XREF: _process_subneg+7D0o
.data:0000032D                 align 10h
.data:00000330 $SG86089        db 'Connecting to %s port %d',0 ; DATA XREF: _telnet_log+55o
.data:00000349                 align 4
.data:0000034C $SG86091        db 'Failed to connect to %s: %s',0
.data:0000034C                                         ; DATA XREF: _telnet_log+75o
.data:00000368 $SG86108        db '%s',0               ; DATA XREF: _telnet_closing+81o
.data:0000036B                 align 4
.data:0000036C $SG86162        db ' (IPv4)',0          ; DATA XREF: _telnet_init+FEo
.data:00000374 $SG86163        db ' (IPv6)',0          ; DATA XREF: _telnet_init+10Do
.data:0000037C $SG86165        db 'Looking up host "%s"%s',0 ; DATA XREF: _telnet_init+12Bo
.data:00000393                 align 4
.data:00000394 $SG86263        db 'client:',9,'SB NAWS %d,%d',0
.data:00000394                                         ; DATA XREF: _telnet_size+1DAo
.data:000003AA                 align 4
.data:000003AC $SG86305        db 0Dh,0                ; DATA XREF: _telnet_special+2DDo
.data:000003AE                 align 10h
.data:000003B0 $SG86307        dd offset loc_A0B+2     ; DATA XREF: _telnet_special+30Co
.data:000003B4 $SG86326        db 'Are You There',0    ; DATA XREF: .rdata:`telnet_get_specials'::`2'::specialso
.data:000003C2                 align 4
.data:000003C4 $SG86327        db 'Break',0            ; DATA XREF: .rdata:0000062Co
.data:000003CA                 align 4
.data:000003CC $SG86328        db 'Synch',0            ; DATA XREF: .rdata:00000634o
.data:000003D2                 align 4
.data:000003D4 $SG86329        db 'Erase Character',0  ; DATA XREF: .rdata:0000063Co
.data:000003E4 $SG86330        db 'Erase Line',0       ; DATA XREF: .rdata:00000644o
.data:000003EF                 align 10h
.data:000003F0 $SG86331        db 'Go Ahead',0         ; DATA XREF: .rdata:0000064Co
.data:000003F9                 align 4
.data:000003FC $SG86332        db 'No Operation',0     ; DATA XREF: .rdata:00000654o
.data:00000409                 align 4
.data:0000040C $SG86334        db 'Abort Process',0    ; DATA XREF: .rdata:00000664o
.data:0000041A                 align 4
.data:0000041C $SG86335        db 'Abort Output',0     ; DATA XREF: .rdata:0000066Co
.data:00000429                 align 4
.data:0000042C $SG86336        db 'Interrupt Process',0 ; DATA XREF: .rdata:00000674o
.data:0000043E                 align 10h
.data:00000440 $SG86337        db 'Suspend Process',0  ; DATA XREF: .rdata:0000067Co
.data:00000450 $SG86339        db 'End Of Record',0    ; DATA XREF: .rdata:0000068Co
.data:0000045E                 align 10h
.data:00000460 $SG86340        db 'End Of File',0      ; DATA XREF: .rdata:00000694o
.data:0000046C $SG86400        db 'telnet',0           ; DATA XREF: .data:000004B8o
.data:00000473                 align 8
.data:00000478                 public _telnet_backend
.data:00000478 _telnet_backend dd offset _telnet_init  ; DATA XREF: _telnet_init+21Ao
.data:0000047C                 dd offset _telnet_free
.data:00000480                 dd offset _telnet_reconfig
.data:00000484                 dd offset _telnet_send
.data:00000488                 dd offset _telnet_sendbuffer
.data:0000048C                 dd offset _telnet_size
.data:00000490                 dd offset _telnet_special
.data:00000494                 dd offset _telnet_get_specials
.data:00000498                 dd offset _telnet_connected
.data:0000049C                 dd offset _telnet_exitcode
.data:000004A0                 dd offset _telnet_sendok
.data:000004A4                 dd offset _telnet_ldisc
.data:000004A8                 dd offset _telnet_provide_ldisc
.data:000004AC                 dd offset _telnet_provide_logctx
.data:000004B0                 dd offset _telnet_unthrottle
.data:000004B4                 dd offset _telnet_cfg_info
.data:000004B8                 dd offset $SG86400      ; "telnet"
.data:000004BC                 db    1
.data:000004BD                 db    0
.data:000004BE                 db    0
.data:000004BF                 db    0
.data:000004C0                 db  17h
.data:000004C1                 db    0
.data:000004C2                 db    0
.data:000004C3                 db    0
.data:000004C3 _data           ends
.data:000004C3
.rdata:000004C4 ; ===========================================================================
.rdata:000004C4
.rdata:000004C4 ; Segment type: Pure data
.rdata:000004C4 ; Segment permissions: Read
.rdata:000004C4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000004C4 _rdata          segment para public 'DATA' use32
.rdata:000004C4                 assume cs:_rdata
.rdata:000004C4                 ;org 4C4h
.rdata:000004C4 _o_naws         dd offset unk_FB        ; DATA XREF: .rdata:_optso
.rdata:000004C8                 dd offset $SG85668      ; "LFLOW"
.rdata:000004CC                 dd offset $SG85668+1    ; "FLOW"
.rdata:000004D0                 dd offset $SG85668+2    ; "LOW"
.rdata:000004D4                 db  1Fh
.rdata:000004D5                 db    0
.rdata:000004D6                 db    0
.rdata:000004D7                 db    0
.rdata:000004D8 dword_4D8       dd 0                    ; DATA XREF: _telnet_size+42r
.rdata:000004DC                 align 10h
.rdata:000004E0 _o_tspeed       dd offset unk_FB        ; DATA XREF: .rdata:000005E0o
.rdata:000004E4                 dd offset $SG85668      ; "LFLOW"
.rdata:000004E8                 dd offset $SG85668+1    ; "FLOW"
.rdata:000004EC                 dd offset $SG85668+2    ; "LOW"
.rdata:000004F0                 dd offset $SG85612      ; "STATUS"
.rdata:000004F4                 db    1
.rdata:000004F5                 db    0
.rdata:000004F6                 db    0
.rdata:000004F7                 db    0
.rdata:000004F8                 db    0
.rdata:000004F9                 db    0
.rdata:000004FA                 db    0
.rdata:000004FB                 db    0
.rdata:000004FC _o_ttype        dd offset unk_FB        ; DATA XREF: .rdata:000005E4o
.rdata:00000500                 dd offset $SG85668      ; "LFLOW"
.rdata:00000504                 dd offset $SG85668+1    ; "FLOW"
.rdata:00000508                 dd offset $SG85668+2    ; "LOW"
.rdata:0000050C                 db  18h
.rdata:0000050D                 db    0
.rdata:0000050E                 db    0
.rdata:0000050F                 db    0
.rdata:00000510                 db    2
.rdata:00000511                 db    0
.rdata:00000512                 db    0
.rdata:00000513                 db    0
.rdata:00000514                 db    0
.rdata:00000515                 db    0
.rdata:00000516                 db    0
.rdata:00000517                 db    0
.rdata:00000518 _o_oenv         dd offset unk_FB        ; DATA XREF: .rdata:000005E8o
.rdata:00000518                                         ; _activate_option+5Fo
.rdata:0000051C                 dd offset $SG85668      ; "LFLOW"
.rdata:00000520                 dd offset $SG85668+1    ; "FLOW"
.rdata:00000524                 dd offset $SG85668+2    ; "LOW"
.rdata:00000528                 dd offset $SG85612+4    ; "US"
.rdata:0000052C dword_52C       dd 3                    ; DATA XREF: _refused_option+17r
.rdata:0000052C                                         ; _refused_option+3Ar
.rdata:00000530                 db    2
.rdata:00000531                 db    0
.rdata:00000532                 db    0
.rdata:00000533                 db    0
.rdata:00000534 _o_nenv         dd offset unk_FB        ; DATA XREF: .rdata:000005ECo
.rdata:00000534                                         ; _activate_option:loc_1600o
.rdata:00000538                 dd offset $SG85668      ; "LFLOW"
.rdata:0000053C                 dd offset $SG85668+1    ; "FLOW"
.rdata:00000540                 dd offset $SG85668+2    ; "LOW"
.rdata:00000544                 dd offset unk_27
.rdata:00000548                 db    4
.rdata:00000549                 db    0
.rdata:0000054A                 db    0
.rdata:0000054B                 db    0
.rdata:0000054C                 db    0
.rdata:0000054D                 db    0
.rdata:0000054E                 db    0
.rdata:0000054F                 db    0
.rdata:00000550 _o_echo         dd 0FDh                 ; DATA XREF: .rdata:000005F0o
.rdata:00000550                                         ; _option_side_effects+9Dr ...
.rdata:00000554 dword_554       dd 0FEh                 ; DATA XREF: _telnet_special+40Dr
.rdata:00000558                 dd offset unk_FB
.rdata:0000055C                 dd offset $SG85668      ; "LFLOW"
.rdata:00000560 dword_560       dd 1                    ; DATA XREF: _option_side_effects+96r
.rdata:00000560                                         ; _telnet_special+3CBr ...
.rdata:00000564 dword_564       dd 5                    ; DATA XREF: _option_side_effects+76r
.rdata:00000564                                         ; _option_side_effects+85r ...
.rdata:00000568                 db    0
.rdata:00000569                 db    0
.rdata:0000056A                 db    0
.rdata:0000056B                 db    0
.rdata:0000056C _o_we_sga       dd offset unk_FB        ; DATA XREF: .rdata:000005F4o
.rdata:0000056C                                         ; _option_side_effects+D7r
.rdata:00000570                 dd offset $SG85668      ; "LFLOW"
.rdata:00000574                 dd offset $SG85668+1    ; "FLOW"
.rdata:00000578                 dd offset $SG85668+2    ; "LOW"
.rdata:0000057C dword_57C       dd 3                    ; DATA XREF: _option_side_effects+D0r
.rdata:00000580 dword_580       dd 6                    ; DATA XREF: _option_side_effects:loc_1508r
.rdata:00000580                                         ; _option_side_effects+C0r
.rdata:00000584                 align 8
.rdata:00000588 _o_they_sga     dd 0FDh                 ; DATA XREF: .rdata:000005F8o
.rdata:00000588                                         ; _option_side_effects+110r
.rdata:0000058C                 dd offset $SG85668+2    ; "LOW"
.rdata:00000590                 dd offset unk_FB
.rdata:00000594                 dd offset $SG85668      ; "LFLOW"
.rdata:00000598 dword_598       dd 3                    ; DATA XREF: _option_side_effects+10Ar
.rdata:0000059C dword_59C       dd 7                    ; DATA XREF: _option_side_effects:loc_1541r
.rdata:0000059C                                         ; _option_side_effects+F9r ...
.rdata:000005A0                 db    0
.rdata:000005A1                 db    0
.rdata:000005A2                 db    0
.rdata:000005A3                 db    0
.rdata:000005A4 _o_we_bin       dd offset unk_FB        ; DATA XREF: .rdata:000005FCo
.rdata:000005A8                 dd offset $SG85668      ; "LFLOW"
.rdata:000005AC                 dd offset $SG85668+1    ; "FLOW"
.rdata:000005B0                 dd offset $SG85668+2    ; "LOW"
.rdata:000005B4                 align 8
.rdata:000005B8 dword_5B8       dd 8                    ; DATA XREF: _telnet_send+68r
.rdata:000005B8                                         ; _telnet_send+D8r ...
.rdata:000005BC                 db    2
.rdata:000005BD                 db    0
.rdata:000005BE                 db    0
.rdata:000005BF                 db    0
.rdata:000005C0 _o_they_bin     dd offset $SG85668+1    ; DATA XREF: .rdata:00000600o
.rdata:000005C0                                         ; "FLOW"
.rdata:000005C4                 dd offset $SG85668+2    ; "LOW"
.rdata:000005C8                 dd offset unk_FB
.rdata:000005CC                 dd offset $SG85668      ; "LFLOW"
.rdata:000005D0                 db    0
.rdata:000005D1                 db    0
.rdata:000005D2                 db    0
.rdata:000005D3                 db    0
.rdata:000005D4 dword_5D4       dd 9                    ; DATA XREF: _do_telnet_read+115r
.rdata:000005D8                 db    2
.rdata:000005D9                 db    0
.rdata:000005DA                 db    0
.rdata:000005DB                 db    0
.rdata:000005DC _opts           dd offset _o_naws       ; DATA XREF: _proc_rec_opt+34o
.rdata:000005DC                                         ; _telnet_init+249o ...
.rdata:000005E0                 dd offset _o_tspeed
.rdata:000005E4                 dd offset _o_ttype
.rdata:000005E8                 dd offset _o_oenv
.rdata:000005EC                 dd offset _o_nenv
.rdata:000005F0                 dd offset _o_echo
.rdata:000005F4                 dd offset _o_we_sga
.rdata:000005F8                 dd offset _o_they_sga
.rdata:000005FC                 dd offset _o_we_bin
.rdata:00000600                 dd offset _o_they_bin
.rdata:00000604                 align 8
.rdata:00000608 ; `telnet_init'::`2'::fn_table
.rdata:00000608 ?fn_table@?1??telnet_init@@9@9 dd offset _telnet_log
.rdata:00000608                                         ; DATA XREF: _telnet_init+29o
.rdata:0000060C                 dd offset _telnet_closing
.rdata:00000610                 dd offset _telnet_receive
.rdata:00000614                 dd offset _telnet_sent
.rdata:00000618                 db    0
.rdata:00000619                 db    0
.rdata:0000061A                 db    0
.rdata:0000061B                 db    0
.rdata:0000061C ; `telnet_send'::`2'::iac
.rdata:0000061C ?iac@?1??telnet_send@@9@9 db 0FFh       ; DATA XREF: _telnet_send+101o
.rdata:0000061D                 db 0FFh
.rdata:0000061E                 db    0
.rdata:0000061F                 db    0
.rdata:00000620 ; `telnet_send'::`2'::cr
.rdata:00000620 ?cr@?1??telnet_send@@9@9 db  0Dh        ; DATA XREF: _telnet_send:loc_2522o
.rdata:00000621                 db    0
.rdata:00000622                 db    0
.rdata:00000623                 db    0
.rdata:00000624 ; `telnet_get_specials'::`2'::specials
.rdata:00000624 ?specials@?1??telnet_get_specials@@9@9 dd offset $SG86326
.rdata:00000624                                         ; DATA XREF: _telnet_get_specials+3o
.rdata:00000624                                         ; "Are You There"
.rdata:00000628                 db    0
.rdata:00000629                 db    0
.rdata:0000062A                 db    0
.rdata:0000062B                 db    0
.rdata:0000062C                 dd offset $SG86327      ; "Break"
.rdata:00000630                 db    1
.rdata:00000631                 db    0
.rdata:00000632                 db    0
.rdata:00000633                 db    0
.rdata:00000634                 dd offset $SG86328      ; "Synch"
.rdata:00000638                 db    2
.rdata:00000639                 db    0
.rdata:0000063A                 db    0
.rdata:0000063B                 db    0
.rdata:0000063C                 dd offset $SG86329      ; "Erase Character"
.rdata:00000640                 db    3
.rdata:00000641                 db    0
.rdata:00000642                 db    0
.rdata:00000643                 db    0
.rdata:00000644                 dd offset $SG86330      ; "Erase Line"
.rdata:00000648                 db    4
.rdata:00000649                 db    0
.rdata:0000064A                 db    0
.rdata:0000064B                 db    0
.rdata:0000064C                 dd offset $SG86331      ; "Go Ahead"
.rdata:00000650                 db    5
.rdata:00000651                 db    0
.rdata:00000652                 db    0
.rdata:00000653                 db    0
.rdata:00000654                 dd offset $SG86332      ; "No Operation"
.rdata:00000658                 db    6
.rdata:00000659                 db    0
.rdata:0000065A                 db    0
.rdata:0000065B                 db    0
.rdata:0000065C                 db    0
.rdata:0000065D                 db    0
.rdata:0000065E                 db    0
.rdata:0000065F                 db    0
.rdata:00000660                 db  1Fh
.rdata:00000661                 db    0
.rdata:00000662                 db    0
.rdata:00000663                 db    0
.rdata:00000664                 dd offset $SG86334      ; "Abort Process"
.rdata:00000668                 db    7
.rdata:00000669                 db    0
.rdata:0000066A                 db    0
.rdata:0000066B                 db    0
.rdata:0000066C                 dd offset $SG86335      ; "Abort Output"
.rdata:00000670                 db    8
.rdata:00000671                 db    0
.rdata:00000672                 db    0
.rdata:00000673                 db    0
.rdata:00000674                 dd offset $SG86336      ; "Interrupt Process"
.rdata:00000678                 db    9
.rdata:00000679                 db    0
.rdata:0000067A                 db    0
.rdata:0000067B                 db    0
.rdata:0000067C                 dd offset $SG86337      ; "Suspend Process"
.rdata:00000680                 db  0Ah
.rdata:00000681                 db    0
.rdata:00000682                 db    0
.rdata:00000683                 db    0
.rdata:00000684                 db    0
.rdata:00000685                 db    0
.rdata:00000686                 db    0
.rdata:00000687                 db    0
.rdata:00000688                 db  1Fh
.rdata:00000689                 db    0
.rdata:0000068A                 db    0
.rdata:0000068B                 db    0
.rdata:0000068C                 dd offset $SG86339      ; "End Of Record"
.rdata:00000690                 db  0Bh
.rdata:00000691                 db    0
.rdata:00000692                 db    0
.rdata:00000693                 db    0
.rdata:00000694                 dd offset $SG86340      ; "End Of File"
.rdata:00000698                 db  0Ch
.rdata:00000699                 db    0
.rdata:0000069A                 db    0
.rdata:0000069B                 db    0
.rdata:0000069C                 db    0
.rdata:0000069D                 db    0
.rdata:0000069E                 db    0
.rdata:0000069F                 db    0
.rdata:000006A0                 db  21h ; !
.rdata:000006A1                 db    0
.rdata:000006A2                 db    0
.rdata:000006A3                 db    0
.rdata:000006A3 _rdata          ends
.rdata:000006A3
.bss:000006A4 ; ===========================================================================
.bss:000006A4
.bss:000006A4 ; Segment type: Uninitialized
.bss:000006A4 ; Segment permissions: Read/Write
.bss:000006A4 _bss            segment byte public 'BSS' use32
.bss:000006A4                 assume cs:_bss
.bss:000006A4                 ;org 6A4h
.bss:000006A4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000006A4 $SG86164        db    ? ;               ; DATA XREF: _telnet_init:loc_20BEo
.bss:000006A5                 align 4
.bss:000006A5 _bss            ends
.bss:000006A5
.text:000006A8 ; ===========================================================================
.text:000006A8
.text:000006A8 ; Segment type: Pure code
.text:000006A8 ; Segment permissions: Read/Execute
.text:000006A8 _text           segment para public 'CODE' use32
.text:000006A8                 assume cs:_text
.text:000006A8                 ;org 6A8h
.text:000006A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000006A8
.text:000006A8 ; =============== S U B R O U T I N E =======================================
.text:000006A8
.text:000006A8 ; Attributes: bp-based frame
.text:000006A8
.text:000006A8 _telnet_log     proc near               ; DATA XREF: .rdata:`telnet_init'::`2'::fn_tableo
.text:000006A8
.text:000006A8 var_114         = dword ptr -114h
.text:000006A8 var_10C         = byte ptr -10Ch
.text:000006A8 var_8           = dword ptr -8
.text:000006A8 var_4           = dword ptr -4
.text:000006A8 arg_0           = dword ptr  8
.text:000006A8 arg_4           = dword ptr  0Ch
.text:000006A8 arg_8           = dword ptr  10h
.text:000006A8 arg_C           = dword ptr  14h
.text:000006A8 arg_10          = dword ptr  18h
.text:000006A8
.text:000006A8                 push    ebp
.text:000006A9                 mov     ebp, esp
.text:000006AB                 sub     esp, 114h
.text:000006B1                 push    edi
.text:000006B2                 lea     edi, [ebp+var_114]
.text:000006B8                 mov     ecx, 45h ; 'E'
.text:000006BD                 mov     eax, 0CCCCCCCCh
.text:000006C2                 rep stosd
.text:000006C4                 mov     eax, dword ptr ds:___security_cookie
.text:000006C9                 xor     eax, ebp
.text:000006CB                 mov     [ebp+var_4], eax
.text:000006CE                 mov     eax, [ebp+arg_0]
.text:000006D1                 mov     [ebp+var_8], eax
.text:000006D4                 push    100h
.text:000006D9                 lea     ecx, [ebp+var_10C]
.text:000006DF                 push    ecx
.text:000006E0                 mov     edx, [ebp+arg_8]
.text:000006E3                 push    edx
.text:000006E4                 call    _sk_getaddr
.text:000006E9                 add     esp, 0Ch
.text:000006EC                 cmp     [ebp+arg_4], 0
.text:000006F0                 jnz     short loc_712
.text:000006F2                 mov     eax, [ebp+arg_C]
.text:000006F5                 push    eax
.text:000006F6                 lea     ecx, [ebp+var_10C]
.text:000006FC                 push    ecx
.text:000006FD                 push    offset $SG86089 ; "Connecting to %s port %d"
.text:00000702                 call    _dupprintf
.text:00000707                 add     esp, 0Ch
.text:0000070A                 mov     [ebp+var_114], eax
.text:00000710                 jmp     short loc_730
.text:00000712 ; ---------------------------------------------------------------------------
.text:00000712
.text:00000712 loc_712:                                ; CODE XREF: _telnet_log+48j
.text:00000712                 mov     edx, [ebp+arg_10]
.text:00000715                 push    edx
.text:00000716                 lea     eax, [ebp+var_10C]
.text:0000071C                 push    eax
.text:0000071D                 push    offset $SG86091 ; "Failed to connect to %s: %s"
.text:00000722                 call    _dupprintf
.text:00000727                 add     esp, 0Ch
.text:0000072A                 mov     [ebp+var_114], eax
.text:00000730
.text:00000730 loc_730:                                ; CODE XREF: _telnet_log+68j
.text:00000730                 mov     ecx, [ebp+var_114]
.text:00000736                 push    ecx
.text:00000737                 mov     edx, [ebp+var_8]
.text:0000073A                 mov     eax, [edx+0Ch]
.text:0000073D                 push    eax
.text:0000073E                 call    _logevent
.text:00000743                 add     esp, 8
.text:00000746                 mov     ecx, [ebp+var_114]
.text:0000074C                 push    ecx
.text:0000074D                 call    _safefree
.text:00000752                 add     esp, 4
.text:00000755                 push    edx
.text:00000756                 mov     ecx, ebp
.text:00000758                 push    eax
.text:00000759                 lea     edx, $LN7
.text:0000075F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000764                 pop     eax
.text:00000765                 pop     edx
.text:00000766                 pop     edi
.text:00000767                 mov     ecx, [ebp+var_4]
.text:0000076A                 xor     ecx, ebp
.text:0000076C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000771                 add     esp, 114h
.text:00000777                 cmp     ebp, esp
.text:00000779                 call    __RTC_CheckEsp
.text:0000077E                 mov     esp, ebp
.text:00000780                 pop     ebp
.text:00000781                 retn
.text:00000781 _telnet_log     endp
.text:00000781
.text:00000781 ; ---------------------------------------------------------------------------
.text:00000782                 align 4
.text:00000784 $LN7            dd 1                    ; DATA XREF: _telnet_log+B1o
.text:00000788                 dd offset $LN6
.text:0000078C $LN6            dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:00000788o
.text:00000794                 dd offset $LN5          ; "addrbuf"
.text:00000798 $LN5            db 'addrbuf',0          ; DATA XREF: .text:00000794o
.text:000007A0                 db 8 dup(0CCh)
.text:000007A8
.text:000007A8 ; =============== S U B R O U T I N E =======================================
.text:000007A8
.text:000007A8 ; Attributes: bp-based frame
.text:000007A8
.text:000007A8 _telnet_closing proc near               ; DATA XREF: .rdata:0000060Co
.text:000007A8
.text:000007A8 var_4           = dword ptr -4
.text:000007A8 arg_0           = dword ptr  8
.text:000007A8 arg_4           = dword ptr  0Ch
.text:000007A8
.text:000007A8                 push    ebp
.text:000007A9                 mov     ebp, esp
.text:000007AB                 push    ecx
.text:000007AC                 push    esi
.text:000007AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007B4                 mov     eax, [ebp+arg_0]
.text:000007B7                 mov     [ebp+var_4], eax
.text:000007BA                 mov     ecx, [ebp+var_4]
.text:000007BD                 cmp     dword ptr [ecx+4], 0
.text:000007C1                 jz      short loc_80C
.text:000007C3                 mov     esi, esp
.text:000007C5                 mov     edx, [ebp+var_4]
.text:000007C8                 mov     eax, [edx+4]
.text:000007CB                 push    eax
.text:000007CC                 mov     ecx, [ebp+var_4]
.text:000007CF                 mov     edx, [ecx+4]
.text:000007D2                 mov     eax, [edx]
.text:000007D4                 mov     ecx, [eax+4]
.text:000007D7                 call    ecx
.text:000007D9                 add     esp, 4
.text:000007DC                 cmp     esi, esp
.text:000007DE                 call    __RTC_CheckEsp
.text:000007E3                 mov     edx, [ebp+var_4]
.text:000007E6                 mov     dword ptr [edx+4], 0
.text:000007ED                 cmp     [ebp+arg_4], 0
.text:000007F1                 jz      short loc_7FD
.text:000007F3                 mov     eax, [ebp+var_4]
.text:000007F6                 mov     dword ptr [eax+8], 1
.text:000007FD
.text:000007FD loc_7FD:                                ; CODE XREF: _telnet_closing+49j
.text:000007FD                 mov     ecx, [ebp+var_4]
.text:00000800                 mov     edx, [ecx+0Ch]
.text:00000803                 push    edx
.text:00000804                 call    _notify_remote_exit
.text:00000809                 add     esp, 4
.text:0000080C
.text:0000080C loc_80C:                                ; CODE XREF: _telnet_closing+19j
.text:0000080C                 cmp     [ebp+arg_4], 0
.text:00000810                 jz      short loc_83D
.text:00000812                 mov     eax, [ebp+arg_4]
.text:00000815                 push    eax
.text:00000816                 mov     ecx, [ebp+var_4]
.text:00000819                 mov     edx, [ecx+0Ch]
.text:0000081C                 push    edx
.text:0000081D                 call    _logevent
.text:00000822                 add     esp, 8
.text:00000825                 mov     eax, [ebp+arg_4]
.text:00000828                 push    eax
.text:00000829                 push    offset $SG86108 ; "%s"
.text:0000082E                 mov     ecx, [ebp+var_4]
.text:00000831                 mov     edx, [ecx+0Ch]
.text:00000834                 push    edx
.text:00000835                 call    _connection_fatal
.text:0000083A                 add     esp, 0Ch
.text:0000083D
.text:0000083D loc_83D:                                ; CODE XREF: _telnet_closing+68j
.text:0000083D                 xor     eax, eax
.text:0000083F                 pop     esi
.text:00000840                 add     esp, 4
.text:00000843                 cmp     ebp, esp
.text:00000845                 call    __RTC_CheckEsp
.text:0000084A                 mov     esp, ebp
.text:0000084C                 pop     ebp
.text:0000084D                 retn
.text:0000084D _telnet_closing endp
.text:0000084D
.text:0000084D ; ---------------------------------------------------------------------------
.text:0000084E                 db 0Ah dup(0CCh)
.text:00000858
.text:00000858 ; =============== S U B R O U T I N E =======================================
.text:00000858
.text:00000858 ; Attributes: bp-based frame
.text:00000858
.text:00000858 _telnet_receive proc near               ; DATA XREF: .rdata:00000610o
.text:00000858
.text:00000858 var_4           = dword ptr -4
.text:00000858 arg_0           = dword ptr  8
.text:00000858 arg_4           = dword ptr  0Ch
.text:00000858 arg_8           = dword ptr  10h
.text:00000858 arg_C           = dword ptr  14h
.text:00000858
.text:00000858                 push    ebp
.text:00000859                 mov     ebp, esp
.text:0000085B                 push    ecx
.text:0000085C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000863                 mov     eax, [ebp+arg_0]
.text:00000866                 mov     [ebp+var_4], eax
.text:00000869                 cmp     [ebp+arg_4], 0
.text:0000086D                 jz      short loc_879
.text:0000086F                 mov     ecx, [ebp+var_4]
.text:00000872                 mov     dword ptr [ecx+54h], 1
.text:00000879
.text:00000879 loc_879:                                ; CODE XREF: _telnet_receive+15j
.text:00000879                 mov     edx, [ebp+arg_C]
.text:0000087C                 push    edx
.text:0000087D                 mov     eax, [ebp+arg_8]
.text:00000880                 push    eax
.text:00000881                 mov     ecx, [ebp+var_4]
.text:00000884                 push    ecx
.text:00000885                 call    _do_telnet_read
.text:0000088A                 add     esp, 0Ch
.text:0000088D                 mov     eax, 1
.text:00000892                 add     esp, 4
.text:00000895                 cmp     ebp, esp
.text:00000897                 call    __RTC_CheckEsp
.text:0000089C                 mov     esp, ebp
.text:0000089E                 pop     ebp
.text:0000089F                 retn
.text:0000089F _telnet_receive endp
.text:0000089F
.text:0000089F ; ---------------------------------------------------------------------------
.text:000008A0                 db 8 dup(0CCh)
.text:000008A8
.text:000008A8 ; =============== S U B R O U T I N E =======================================
.text:000008A8
.text:000008A8 ; Attributes: bp-based frame
.text:000008A8
.text:000008A8 _do_telnet_read proc near               ; CODE XREF: _telnet_receive+2Dp
.text:000008A8
.text:000008A8 var_18          = dword ptr -18h
.text:000008A8 var_14          = dword ptr -14h
.text:000008A8 var_10          = dword ptr -10h
.text:000008A8 var_C           = dword ptr -0Ch
.text:000008A8 var_8           = dword ptr -8
.text:000008A8 var_4           = dword ptr -4
.text:000008A8 arg_0           = dword ptr  8
.text:000008A8 arg_4           = dword ptr  0Ch
.text:000008A8 arg_8           = dword ptr  10h
.text:000008A8
.text:000008A8                 push    ebp
.text:000008A9                 mov     ebp, esp
.text:000008AB                 sub     esp, 18h
.text:000008AE                 mov     eax, 0CCCCCCCCh
.text:000008B3                 mov     [ebp+var_18], eax
.text:000008B6                 mov     [ebp+var_14], eax
.text:000008B9                 mov     [ebp+var_10], eax
.text:000008BC                 mov     [ebp+var_C], eax
.text:000008BF                 mov     [ebp+var_8], eax
.text:000008C2                 mov     [ebp+var_4], eax
.text:000008C5                 mov     [ebp+var_4], 0
.text:000008CC                 mov     [ebp+var_8], 0
.text:000008D3                 mov     [ebp+var_C], 0
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: _do_telnet_read:loc_C28j
.text:000008DA                 mov     eax, [ebp+arg_8]
.text:000008DD                 mov     [ebp+var_14], eax
.text:000008E0                 mov     ecx, [ebp+arg_8]
.text:000008E3                 sub     ecx, 1
.text:000008E6                 mov     [ebp+arg_8], ecx
.text:000008E9                 cmp     [ebp+var_14], 0
.text:000008ED                 jz      loc_C2D
.text:000008F3                 mov     edx, [ebp+arg_4]
.text:000008F6                 movzx   eax, byte ptr [edx]
.text:000008F9                 mov     [ebp+var_10], eax
.text:000008FC                 mov     ecx, [ebp+arg_4]
.text:000008FF                 add     ecx, 1
.text:00000902                 mov     [ebp+arg_4], ecx
.text:00000905                 mov     edx, [ebp+arg_0]
.text:00000908                 mov     eax, [edx+68h]
.text:0000090B                 mov     [ebp+var_18], eax
.text:0000090E                 cmp     [ebp+var_18], 9 ; switch 10 cases
.text:00000912                 ja      loc_C28         ; jumptable 0000091B default case
.text:00000918                 mov     ecx, [ebp+var_18]
.text:0000091B                 jmp     ds:$LN52[ecx*4] ; switch jump
.text:00000922 ; ---------------------------------------------------------------------------
.text:00000922
.text:00000922 $LN45:                                  ; CODE XREF: _do_telnet_read+73j
.text:00000922                                         ; DATA XREF: .text:$LN52o
.text:00000922                 cmp     [ebp+var_10], 0 ; jumptable 0000091B cases 0,9
.text:00000926                 jnz     short loc_940
.text:00000928                 mov     edx, [ebp+arg_0]
.text:0000092B                 cmp     dword ptr [edx+68h], 9
.text:0000092F                 jnz     short loc_940
.text:00000931                 mov     eax, [ebp+arg_0]
.text:00000934                 mov     dword ptr [eax+68h], 0
.text:0000093B                 jmp     loc_9E2
.text:00000940 ; ---------------------------------------------------------------------------
.text:00000940
.text:00000940 loc_940:                                ; CODE XREF: _do_telnet_read+7Ej
.text:00000940                                         ; _do_telnet_read+87j
.text:00000940                 cmp     [ebp+var_10], 0FFh
.text:00000947                 jnz     short loc_958
.text:00000949                 mov     ecx, [ebp+arg_0]
.text:0000094C                 mov     dword ptr [ecx+68h], 1
.text:00000953                 jmp     loc_9E2
.text:00000958 ; ---------------------------------------------------------------------------
.text:00000958
.text:00000958 loc_958:                                ; CODE XREF: _do_telnet_read+9Fj
.text:00000958                 mov     edx, [ebp+arg_0]
.text:0000095B                 cmp     dword ptr [edx+54h], 0
.text:0000095F                 jnz     short loc_9A4
.text:00000961
.text:00000961 loc_961:                                ; CODE XREF: _do_telnet_read+F8j
.text:00000961                 mov     eax, [ebp+var_8]
.text:00000964                 cmp     eax, [ebp+var_C]
.text:00000967                 jl      short loc_98A
.text:00000969                 mov     ecx, [ebp+var_8]
.text:0000096C                 add     ecx, 100h
.text:00000972                 mov     [ebp+var_C], ecx
.text:00000975                 push    1
.text:00000977                 mov     edx, [ebp+var_C]
.text:0000097A                 push    edx
.text:0000097B                 mov     eax, [ebp+var_4]
.text:0000097E                 push    eax
.text:0000097F                 call    _saferealloc
.text:00000984                 add     esp, 0Ch
.text:00000987                 mov     [ebp+var_4], eax
.text:0000098A
.text:0000098A loc_98A:                                ; CODE XREF: _do_telnet_read+BFj
.text:0000098A                 mov     ecx, [ebp+var_4]
.text:0000098D                 add     ecx, [ebp+var_8]
.text:00000990                 mov     dl, byte ptr [ebp+var_10]
.text:00000993                 mov     [ecx], dl
.text:00000995                 mov     eax, [ebp+var_8]
.text:00000998                 add     eax, 1
.text:0000099B                 mov     [ebp+var_8], eax
.text:0000099E                 xor     ecx, ecx
.text:000009A0                 jnz     short loc_961
.text:000009A2                 jmp     short loc_9B7
.text:000009A4 ; ---------------------------------------------------------------------------
.text:000009A4
.text:000009A4 loc_9A4:                                ; CODE XREF: _do_telnet_read+B7j
.text:000009A4                 cmp     [ebp+var_10], 0F2h ; '='
.text:000009AB                 jnz     short loc_9B7
.text:000009AD                 mov     edx, [ebp+arg_0]
.text:000009B0                 mov     dword ptr [edx+54h], 0
.text:000009B7
.text:000009B7 loc_9B7:                                ; CODE XREF: _do_telnet_read+FAj
.text:000009B7                                         ; _do_telnet_read+103j
.text:000009B7                 cmp     [ebp+var_10], 0Dh
.text:000009BB                 jnz     short loc_9D8
.text:000009BD                 mov     eax, ds:dword_5D4
.text:000009C2                 mov     ecx, [ebp+arg_0]
.text:000009C5                 cmp     dword ptr [ecx+eax*4+1Ch], 1
.text:000009CA                 jz      short loc_9D8
.text:000009CC                 mov     edx, [ebp+arg_0]
.text:000009CF                 mov     dword ptr [edx+68h], 9
.text:000009D6                 jmp     short loc_9E2
.text:000009D8 ; ---------------------------------------------------------------------------
.text:000009D8
.text:000009D8 loc_9D8:                                ; CODE XREF: _do_telnet_read+113j
.text:000009D8                                         ; _do_telnet_read+122j
.text:000009D8                 mov     eax, [ebp+arg_0]
.text:000009DB                 mov     dword ptr [eax+68h], 0
.text:000009E2
.text:000009E2 loc_9E2:                                ; CODE XREF: _do_telnet_read+93j
.text:000009E2                                         ; _do_telnet_read+ABj ...
.text:000009E2                 jmp     loc_C28         ; jumptable 0000091B default case
.text:000009E7 ; ---------------------------------------------------------------------------
.text:000009E7
.text:000009E7 $LN31:                                  ; CODE XREF: _do_telnet_read+73j
.text:000009E7                                         ; DATA XREF: .text:$LN52o
.text:000009E7                 cmp     [ebp+var_10], 0FDh ; '²' ; jumptable 0000091B case 1
.text:000009EE                 jnz     short loc_9FF
.text:000009F0                 mov     ecx, [ebp+arg_0]
.text:000009F3                 mov     dword ptr [ecx+68h], 4
.text:000009FA                 jmp     loc_ACE
.text:000009FF ; ---------------------------------------------------------------------------
.text:000009FF
.text:000009FF loc_9FF:                                ; CODE XREF: _do_telnet_read+146j
.text:000009FF                 cmp     [ebp+var_10], 0FEh ; '¦'
.text:00000A06                 jnz     short loc_A17
.text:00000A08                 mov     edx, [ebp+arg_0]
.text:00000A0B
.text:00000A0B loc_A0B:                                ; DATA XREF: .data:$SG86307o
.text:00000A0B                 mov     dword ptr [edx+68h], 5
.text:00000A12                 jmp     loc_ACE
.text:00000A17 ; ---------------------------------------------------------------------------
.text:00000A17
.text:00000A17 loc_A17:                                ; CODE XREF: _do_telnet_read+15Ej
.text:00000A17                 cmp     [ebp+var_10], 0FBh ; 'v'
.text:00000A1E                 jnz     short loc_A2F
.text:00000A20                 mov     eax, [ebp+arg_0]
.text:00000A23                 mov     dword ptr [eax+68h], 2
.text:00000A2A                 jmp     loc_ACE
.text:00000A2F ; ---------------------------------------------------------------------------
.text:00000A2F
.text:00000A2F loc_A2F:                                ; CODE XREF: _do_telnet_read+176j
.text:00000A2F                 cmp     [ebp+var_10], 0FCh ; 'n'
.text:00000A36                 jnz     short loc_A47
.text:00000A38                 mov     ecx, [ebp+arg_0]
.text:00000A3B                 mov     dword ptr [ecx+68h], 3
.text:00000A42                 jmp     loc_ACE
.text:00000A47 ; ---------------------------------------------------------------------------
.text:00000A47
.text:00000A47 loc_A47:                                ; CODE XREF: _do_telnet_read+18Ej
.text:00000A47                 cmp     [ebp+var_10], 0FAh ; '·'
.text:00000A4E                 jnz     short loc_A5C
.text:00000A50                 mov     edx, [ebp+arg_0]
.text:00000A53                 mov     dword ptr [edx+68h], 6
.text:00000A5A                 jmp     short loc_ACE
.text:00000A5C ; ---------------------------------------------------------------------------
.text:00000A5C
.text:00000A5C loc_A5C:                                ; CODE XREF: _do_telnet_read+1A6j
.text:00000A5C                 cmp     [ebp+var_10], 0F2h ; '='
.text:00000A63                 jnz     short loc_A7B
.text:00000A65                 mov     eax, [ebp+arg_0]
.text:00000A68                 mov     dword ptr [eax+54h], 0
.text:00000A6F                 mov     ecx, [ebp+arg_0]
.text:00000A72                 mov     dword ptr [ecx+68h], 0
.text:00000A79                 jmp     short loc_ACE
.text:00000A7B ; ---------------------------------------------------------------------------
.text:00000A7B
.text:00000A7B loc_A7B:                                ; CODE XREF: _do_telnet_read+1BBj
.text:00000A7B                 cmp     [ebp+var_10], 0FFh
.text:00000A82                 jnz     short loc_AC4
.text:00000A84
.text:00000A84 loc_A84:                                ; CODE XREF: _do_telnet_read+21Aj
.text:00000A84                 mov     edx, [ebp+var_8]
.text:00000A87                 cmp     edx, [ebp+var_C]
.text:00000A8A                 jl      short loc_AAC
.text:00000A8C                 mov     eax, [ebp+var_8]
.text:00000A8F                 add     eax, 100h
.text:00000A94                 mov     [ebp+var_C], eax
.text:00000A97                 push    1
.text:00000A99                 mov     ecx, [ebp+var_C]
.text:00000A9C                 push    ecx
.text:00000A9D                 mov     edx, [ebp+var_4]
.text:00000AA0                 push    edx
.text:00000AA1                 call    _saferealloc
.text:00000AA6                 add     esp, 0Ch
.text:00000AA9                 mov     [ebp+var_4], eax
.text:00000AAC
.text:00000AAC loc_AAC:                                ; CODE XREF: _do_telnet_read+1E2j
.text:00000AAC                 mov     eax, [ebp+var_4]
.text:00000AAF                 add     eax, [ebp+var_8]
.text:00000AB2                 mov     cl, byte ptr [ebp+var_10]
.text:00000AB5                 mov     [eax], cl
.text:00000AB7                 mov     edx, [ebp+var_8]
.text:00000ABA                 add     edx, 1
.text:00000ABD                 mov     [ebp+var_8], edx
.text:00000AC0                 xor     eax, eax
.text:00000AC2                 jnz     short loc_A84
.text:00000AC4
.text:00000AC4 loc_AC4:                                ; CODE XREF: _do_telnet_read+1DAj
.text:00000AC4                 mov     ecx, [ebp+arg_0]
.text:00000AC7                 mov     dword ptr [ecx+68h], 0
.text:00000ACE
.text:00000ACE loc_ACE:                                ; CODE XREF: _do_telnet_read+152j
.text:00000ACE                                         ; _do_telnet_read+16Aj ...
.text:00000ACE                 jmp     loc_C28         ; jumptable 0000091B default case
.text:00000AD3 ; ---------------------------------------------------------------------------
.text:00000AD3
.text:00000AD3 $LN13:                                  ; CODE XREF: _do_telnet_read+73j
.text:00000AD3                                         ; DATA XREF: .text:$LN52o
.text:00000AD3                 mov     edx, [ebp+var_10] ; jumptable 0000091B case 2
.text:00000AD6                 push    edx
.text:00000AD7                 push    0FBh ; 'v'
.text:00000ADC                 mov     eax, [ebp+arg_0]
.text:00000ADF                 push    eax
.text:00000AE0                 call    _proc_rec_opt
.text:00000AE5                 add     esp, 0Ch
.text:00000AE8                 mov     ecx, [ebp+arg_0]
.text:00000AEB                 mov     dword ptr [ecx+68h], 0
.text:00000AF2                 jmp     loc_C28         ; jumptable 0000091B default case
.text:00000AF7 ; ---------------------------------------------------------------------------
.text:00000AF7
.text:00000AF7 $LN12:                                  ; CODE XREF: _do_telnet_read+73j
.text:00000AF7                                         ; DATA XREF: .text:$LN52o
.text:00000AF7                 mov     edx, [ebp+var_10] ; jumptable 0000091B case 3
.text:00000AFA                 push    edx
.text:00000AFB                 push    0FCh ; 'n'
.text:00000B00                 mov     eax, [ebp+arg_0]
.text:00000B03                 push    eax
.text:00000B04                 call    _proc_rec_opt
.text:00000B09                 add     esp, 0Ch
.text:00000B0C                 mov     ecx, [ebp+arg_0]
.text:00000B0F                 mov     dword ptr [ecx+68h], 0
.text:00000B16                 jmp     loc_C28         ; jumptable 0000091B default case
.text:00000B1B ; ---------------------------------------------------------------------------
.text:00000B1B
.text:00000B1B $LN11:                                  ; CODE XREF: _do_telnet_read+73j
.text:00000B1B                                         ; DATA XREF: .text:$LN52o
.text:00000B1B                 mov     edx, [ebp+var_10] ; jumptable 0000091B case 4
.text:00000B1E                 push    edx
.text:00000B1F                 push    0FDh ; '²'
.text:00000B24                 mov     eax, [ebp+arg_0]
.text:00000B27                 push    eax
.text:00000B28                 call    _proc_rec_opt
.text:00000B2D                 add     esp, 0Ch
.text:00000B30                 mov     ecx, [ebp+arg_0]
.text:00000B33                 mov     dword ptr [ecx+68h], 0
.text:00000B3A                 jmp     loc_C28         ; jumptable 0000091B default case
.text:00000B3F ; ---------------------------------------------------------------------------
.text:00000B3F
.text:00000B3F $LN10:                                  ; CODE XREF: _do_telnet_read+73j
.text:00000B3F                                         ; DATA XREF: .text:$LN52o
.text:00000B3F                 mov     edx, [ebp+var_10] ; jumptable 0000091B case 5
.text:00000B42                 push    edx
.text:00000B43                 push    0FEh ; '¦'
.text:00000B48                 mov     eax, [ebp+arg_0]
.text:00000B4B                 push    eax
.text:00000B4C                 call    _proc_rec_opt
.text:00000B51                 add     esp, 0Ch
.text:00000B54                 mov     ecx, [ebp+arg_0]
.text:00000B57                 mov     dword ptr [ecx+68h], 0
.text:00000B5E                 jmp     loc_C28         ; jumptable 0000091B default case
.text:00000B63 ; ---------------------------------------------------------------------------
.text:00000B63
.text:00000B63 $LN9:                                   ; CODE XREF: _do_telnet_read+73j
.text:00000B63                                         ; DATA XREF: .text:$LN52o
.text:00000B63                 mov     edx, [ebp+arg_0] ; jumptable 0000091B case 6
.text:00000B66                 mov     eax, [ebp+var_10]
.text:00000B69                 mov     [edx+58h], eax
.text:00000B6C                 mov     ecx, [ebp+arg_0]
.text:00000B6F                 mov     dword ptr [ecx+5Ch], 0
.text:00000B76                 mov     edx, [ebp+arg_0]
.text:00000B79                 mov     dword ptr [edx+68h], 7
.text:00000B80                 jmp     loc_C28         ; jumptable 0000091B default case
.text:00000B85 ; ---------------------------------------------------------------------------
.text:00000B85
.text:00000B85 $LN8:                                   ; CODE XREF: _do_telnet_read+73j
.text:00000B85                                         ; DATA XREF: .text:$LN52o
.text:00000B85                 cmp     [ebp+var_10], 0FFh ; jumptable 0000091B case 7
.text:00000B8C                 jnz     short $subneg_addchar$86061
.text:00000B8E                 mov     eax, [ebp+arg_0]
.text:00000B91                 mov     dword ptr [eax+68h], 8
.text:00000B98                 jmp     short loc_C03
.text:00000B9A ; ---------------------------------------------------------------------------
.text:00000B9A
.text:00000B9A $subneg_addchar$86061:                  ; CODE XREF: _do_telnet_read+2E4j
.text:00000B9A                                         ; _do_telnet_read+366j
.text:00000B9A                 mov     ecx, [ebp+arg_0]
.text:00000B9D                 mov     edx, [ebp+arg_0]
.text:00000BA0                 mov     eax, [ecx+5Ch]
.text:00000BA3                 cmp     eax, [edx+64h]
.text:00000BA6                 jl      short loc_BD8
.text:00000BA8                 mov     ecx, [ebp+arg_0]
.text:00000BAB                 mov     edx, [ecx+64h]
.text:00000BAE                 add     edx, 400h
.text:00000BB4                 mov     eax, [ebp+arg_0]
.text:00000BB7                 mov     [eax+64h], edx
.text:00000BBA                 push    1
.text:00000BBC                 mov     ecx, [ebp+arg_0]
.text:00000BBF                 mov     edx, [ecx+64h]
.text:00000BC2                 push    edx
.text:00000BC3                 mov     eax, [ebp+arg_0]
.text:00000BC6                 mov     ecx, [eax+60h]
.text:00000BC9                 push    ecx
.text:00000BCA                 call    _saferealloc
.text:00000BCF                 add     esp, 0Ch
.text:00000BD2                 mov     edx, [ebp+arg_0]
.text:00000BD5                 mov     [edx+60h], eax
.text:00000BD8
.text:00000BD8 loc_BD8:                                ; CODE XREF: _do_telnet_read+2FEj
.text:00000BD8                 mov     eax, [ebp+arg_0]
.text:00000BDB                 mov     ecx, [eax+60h]
.text:00000BDE                 mov     edx, [ebp+arg_0]
.text:00000BE1                 mov     eax, [edx+5Ch]
.text:00000BE4                 mov     dl, byte ptr [ebp+var_10]
.text:00000BE7                 mov     [ecx+eax], dl
.text:00000BEA                 mov     eax, [ebp+arg_0]
.text:00000BED                 mov     ecx, [eax+5Ch]
.text:00000BF0                 add     ecx, 1
.text:00000BF3                 mov     edx, [ebp+arg_0]
.text:00000BF6                 mov     [edx+5Ch], ecx
.text:00000BF9                 mov     eax, [ebp+arg_0]
.text:00000BFC                 mov     dword ptr [eax+68h], 7
.text:00000C03
.text:00000C03 loc_C03:                                ; CODE XREF: _do_telnet_read+2F0j
.text:00000C03                 jmp     short loc_C28   ; jumptable 0000091B default case
.text:00000C05 ; ---------------------------------------------------------------------------
.text:00000C05
.text:00000C05 $LN4:                                   ; CODE XREF: _do_telnet_read+73j
.text:00000C05                                         ; DATA XREF: .text:$LN52o
.text:00000C05                 cmp     [ebp+var_10], 0F0h ; '=' ; jumptable 0000091B case 8
.text:00000C0C                 jz      short loc_C12
.text:00000C0E                 jmp     short $subneg_addchar$86061
.text:00000C10 ; ---------------------------------------------------------------------------
.text:00000C10                 jmp     short loc_C28   ; jumptable 0000091B default case
.text:00000C12 ; ---------------------------------------------------------------------------
.text:00000C12
.text:00000C12 loc_C12:                                ; CODE XREF: _do_telnet_read+364j
.text:00000C12                 mov     ecx, [ebp+arg_0]
.text:00000C15                 push    ecx
.text:00000C16                 call    _process_subneg
.text:00000C1B                 add     esp, 4
.text:00000C1E                 mov     edx, [ebp+arg_0]
.text:00000C21                 mov     dword ptr [edx+68h], 0
.text:00000C28
.text:00000C28 loc_C28:                                ; CODE XREF: _do_telnet_read+6Aj
.text:00000C28                                         ; _do_telnet_read:loc_9E2j ...
.text:00000C28                 jmp     loc_8DA         ; jumptable 0000091B default case
.text:00000C2D ; ---------------------------------------------------------------------------
.text:00000C2D
.text:00000C2D loc_C2D:                                ; CODE XREF: _do_telnet_read+45j
.text:00000C2D                 cmp     [ebp+var_8], 0
.text:00000C31                 jz      short loc_C47
.text:00000C33                 mov     eax, [ebp+var_8]
.text:00000C36                 push    eax
.text:00000C37                 mov     ecx, [ebp+var_4]
.text:00000C3A                 push    ecx
.text:00000C3B                 mov     edx, [ebp+arg_0]
.text:00000C3E                 push    edx
.text:00000C3F                 call    _c_write
.text:00000C44                 add     esp, 0Ch
.text:00000C47
.text:00000C47 loc_C47:                                ; CODE XREF: _do_telnet_read+389j
.text:00000C47                 mov     eax, [ebp+var_4]
.text:00000C4A                 push    eax
.text:00000C4B                 call    _safefree
.text:00000C50                 add     esp, 4
.text:00000C53                 add     esp, 18h
.text:00000C56                 cmp     ebp, esp
.text:00000C58                 call    __RTC_CheckEsp
.text:00000C5D                 mov     esp, ebp
.text:00000C5F                 pop     ebp
.text:00000C60                 retn
.text:00000C60 _do_telnet_read endp
.text:00000C60
.text:00000C60 ; ---------------------------------------------------------------------------
.text:00000C61                 align 4
.text:00000C64 $LN52           dd offset $LN45         ; DATA XREF: _do_telnet_read+73r
.text:00000C64                 dd offset $LN31         ; jump table for switch statement
.text:00000C64                 dd offset $LN13
.text:00000C64                 dd offset $LN12
.text:00000C64                 dd offset $LN11
.text:00000C64                 dd offset $LN10
.text:00000C64                 dd offset $LN9
.text:00000C64                 dd offset $LN8
.text:00000C64                 dd offset $LN4
.text:00000C64                 dd offset $LN45
.text:00000C8C                 db 0Ch dup(0CCh)
.text:00000C98
.text:00000C98 ; =============== S U B R O U T I N E =======================================
.text:00000C98
.text:00000C98 ; Attributes: bp-based frame
.text:00000C98
.text:00000C98 _c_write        proc near               ; CODE XREF: _do_telnet_read+397p
.text:00000C98
.text:00000C98 var_4           = dword ptr -4
.text:00000C98 arg_0           = dword ptr  8
.text:00000C98 arg_4           = dword ptr  0Ch
.text:00000C98 arg_8           = dword ptr  10h
.text:00000C98
.text:00000C98                 push    ebp
.text:00000C99                 mov     ebp, esp
.text:00000C9B                 push    ecx
.text:00000C9C                 push    esi
.text:00000C9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CA4                 mov     eax, [ebp+arg_8]
.text:00000CA7                 push    eax
.text:00000CA8                 mov     ecx, [ebp+arg_4]
.text:00000CAB                 push    ecx
.text:00000CAC                 push    0
.text:00000CAE                 mov     edx, [ebp+arg_0]
.text:00000CB1                 mov     eax, [edx+0Ch]
.text:00000CB4                 push    eax
.text:00000CB5                 call    _from_backend
.text:00000CBA                 add     esp, 10h
.text:00000CBD                 mov     [ebp+var_4], eax
.text:00000CC0                 xor     ecx, ecx
.text:00000CC2                 cmp     [ebp+var_4], 1000h
.text:00000CC9                 setnle  cl
.text:00000CCC                 mov     esi, esp
.text:00000CCE                 push    ecx
.text:00000CCF                 mov     edx, [ebp+arg_0]
.text:00000CD2                 mov     eax, [edx+4]
.text:00000CD5                 push    eax
.text:00000CD6                 mov     ecx, [ebp+arg_0]
.text:00000CD9                 mov     edx, [ecx+4]
.text:00000CDC                 mov     eax, [edx]
.text:00000CDE                 mov     ecx, [eax+18h]
.text:00000CE1                 call    ecx
.text:00000CE3                 add     esp, 8
.text:00000CE6                 cmp     esi, esp
.text:00000CE8                 call    __RTC_CheckEsp
.text:00000CED                 pop     esi
.text:00000CEE                 add     esp, 4
.text:00000CF1                 cmp     ebp, esp
.text:00000CF3                 call    __RTC_CheckEsp
.text:00000CF8                 mov     esp, ebp
.text:00000CFA                 pop     ebp
.text:00000CFB                 retn
.text:00000CFB _c_write        endp
.text:00000CFB
.text:00000CFB ; ---------------------------------------------------------------------------
.text:00000CFC                 db 0Ch dup(0CCh)
.text:00000D08
.text:00000D08 ; =============== S U B R O U T I N E =======================================
.text:00000D08
.text:00000D08 ; Attributes: bp-based frame
.text:00000D08
.text:00000D08 _proc_rec_opt   proc near               ; CODE XREF: _do_telnet_read+238p
.text:00000D08                                         ; _do_telnet_read+25Cp ...
.text:00000D08
.text:00000D08 var_C           = dword ptr -0Ch
.text:00000D08 var_8           = dword ptr -8
.text:00000D08 var_4           = dword ptr -4
.text:00000D08 arg_0           = dword ptr  8
.text:00000D08 arg_4           = dword ptr  0Ch
.text:00000D08 arg_8           = dword ptr  10h
.text:00000D08
.text:00000D08                 push    ebp
.text:00000D09                 mov     ebp, esp
.text:00000D0B                 sub     esp, 0Ch
.text:00000D0E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000D15                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D23                 mov     eax, [ebp+arg_8]
.text:00000D26                 push    eax
.text:00000D27                 mov     ecx, [ebp+arg_4]
.text:00000D2A                 push    ecx
.text:00000D2B                 push    offset $SG85875 ; "server"
.text:00000D30                 mov     edx, [ebp+arg_0]
.text:00000D33                 push    edx
.text:00000D34                 call    _log_option
.text:00000D39                 add     esp, 10h
.text:00000D3C                 mov     [ebp+var_4], offset _opts
.text:00000D43                 jmp     short loc_D4E
.text:00000D45 ; ---------------------------------------------------------------------------
.text:00000D45
.text:00000D45 loc_D45:                                ; CODE XREF: _proc_rec_opt:loc_EDBj
.text:00000D45                 mov     eax, [ebp+var_4]
.text:00000D48                 add     eax, 4
.text:00000D4B                 mov     [ebp+var_4], eax
.text:00000D4E
.text:00000D4E loc_D4E:                                ; CODE XREF: _proc_rec_opt+3Bj
.text:00000D4E                 mov     ecx, [ebp+var_4]
.text:00000D51                 cmp     dword ptr [ecx], 0
.text:00000D54                 jz      loc_EE0
.text:00000D5A                 mov     edx, [ebp+var_4]
.text:00000D5D                 mov     eax, [edx]
.text:00000D5F                 mov     ecx, [eax+10h]
.text:00000D62                 cmp     ecx, [ebp+arg_8]
.text:00000D65                 jnz     loc_E30
.text:00000D6B                 mov     edx, [ebp+var_4]
.text:00000D6E                 mov     eax, [edx]
.text:00000D70                 mov     ecx, [eax+8]
.text:00000D73                 cmp     ecx, [ebp+arg_4]
.text:00000D76                 jnz     loc_E30
.text:00000D7C                 mov     edx, [ebp+var_4]
.text:00000D7F                 mov     eax, [edx]
.text:00000D81                 mov     ecx, [eax+14h]
.text:00000D84                 mov     edx, [ebp+arg_0]
.text:00000D87                 mov     eax, [edx+ecx*4+1Ch]
.text:00000D8B                 mov     [ebp+var_8], eax
.text:00000D8E                 cmp     [ebp+var_8], 0
.text:00000D92                 jz      short loc_DA5
.text:00000D94                 cmp     [ebp+var_8], 2
.text:00000D98                 jz      short loc_DCE
.text:00000D9A                 cmp     [ebp+var_8], 3
.text:00000D9E                 jz      short loc_E0D
.text:00000DA0                 jmp     loc_E26
.text:00000DA5 ; ---------------------------------------------------------------------------
.text:00000DA5
.text:00000DA5 loc_DA5:                                ; CODE XREF: _proc_rec_opt+8Aj
.text:00000DA5                 mov     ecx, [ebp+var_4]
.text:00000DA8                 mov     edx, [ecx]
.text:00000DAA                 mov     eax, [edx+14h]
.text:00000DAD                 mov     ecx, [ebp+arg_0]
.text:00000DB0                 mov     dword ptr [ecx+eax*4+1Ch], 1
.text:00000DB8                 mov     edx, [ebp+var_4]
.text:00000DBB                 mov     eax, [edx]
.text:00000DBD                 push    eax
.text:00000DBE                 mov     ecx, [ebp+arg_0]
.text:00000DC1                 push    ecx
.text:00000DC2                 call    _activate_option
.text:00000DC7                 add     esp, 8
.text:00000DCA                 jmp     short loc_E26
.text:00000DCC ; ---------------------------------------------------------------------------
.text:00000DCC                 jmp     short loc_E26
.text:00000DCE ; ---------------------------------------------------------------------------
.text:00000DCE
.text:00000DCE loc_DCE:                                ; CODE XREF: _proc_rec_opt+90j
.text:00000DCE                 mov     edx, [ebp+var_4]
.text:00000DD1                 mov     eax, [edx]
.text:00000DD3                 mov     ecx, [eax+14h]
.text:00000DD6                 mov     edx, [ebp+arg_0]
.text:00000DD9                 mov     dword ptr [edx+ecx*4+1Ch], 1
.text:00000DE1                 mov     eax, [ebp+arg_8]
.text:00000DE4                 push    eax
.text:00000DE5                 mov     ecx, [ebp+var_4]
.text:00000DE8                 mov     edx, [ecx]
.text:00000DEA                 mov     eax, [edx]
.text:00000DEC                 push    eax
.text:00000DED                 mov     ecx, [ebp+arg_0]
.text:00000DF0                 push    ecx
.text:00000DF1                 call    _send_opt
.text:00000DF6                 add     esp, 0Ch
.text:00000DF9                 mov     edx, [ebp+var_4]
.text:00000DFC                 mov     eax, [edx]
.text:00000DFE                 push    eax
.text:00000DFF                 mov     ecx, [ebp+arg_0]
.text:00000E02                 push    ecx
.text:00000E03                 call    _activate_option
.text:00000E08                 add     esp, 8
.text:00000E0B                 jmp     short loc_E26
.text:00000E0D ; ---------------------------------------------------------------------------
.text:00000E0D
.text:00000E0D loc_E0D:                                ; CODE XREF: _proc_rec_opt+96j
.text:00000E0D                 mov     edx, [ebp+arg_8]
.text:00000E10                 push    edx
.text:00000E11                 mov     eax, [ebp+var_4]
.text:00000E14                 mov     ecx, [eax]
.text:00000E16                 mov     edx, [ecx+4]
.text:00000E19                 push    edx
.text:00000E1A                 mov     eax, [ebp+arg_0]
.text:00000E1D                 push    eax
.text:00000E1E                 call    _send_opt
.text:00000E23                 add     esp, 0Ch
.text:00000E26
.text:00000E26 loc_E26:                                ; CODE XREF: _proc_rec_opt+98j
.text:00000E26                                         ; _proc_rec_opt+C2j ...
.text:00000E26                 jmp     loc_F16
.text:00000E2B ; ---------------------------------------------------------------------------
.text:00000E2B                 jmp     loc_EDB
.text:00000E30 ; ---------------------------------------------------------------------------
.text:00000E30
.text:00000E30 loc_E30:                                ; CODE XREF: _proc_rec_opt+5Dj
.text:00000E30                                         ; _proc_rec_opt+6Ej
.text:00000E30                 mov     ecx, [ebp+var_4]
.text:00000E33                 mov     edx, [ecx]
.text:00000E35                 mov     eax, [edx+10h]
.text:00000E38                 cmp     eax, [ebp+arg_8]
.text:00000E3B                 jnz     loc_EDB
.text:00000E41                 mov     ecx, [ebp+var_4]
.text:00000E44                 mov     edx, [ecx]
.text:00000E46                 mov     eax, [edx+0Ch]
.text:00000E49                 cmp     eax, [ebp+arg_4]
.text:00000E4C                 jnz     loc_EDB
.text:00000E52                 mov     ecx, [ebp+var_4]
.text:00000E55                 mov     edx, [ecx]
.text:00000E57                 mov     eax, [edx+14h]
.text:00000E5A                 mov     ecx, [ebp+arg_0]
.text:00000E5D                 mov     edx, [ecx+eax*4+1Ch]
.text:00000E61                 mov     [ebp+var_C], edx
.text:00000E64                 cmp     [ebp+var_C], 0
.text:00000E68                 jz      short loc_E72
.text:00000E6A                 cmp     [ebp+var_C], 1
.text:00000E6E                 jz      short loc_E99
.text:00000E70                 jmp     short loc_ED9
.text:00000E72 ; ---------------------------------------------------------------------------
.text:00000E72
.text:00000E72 loc_E72:                                ; CODE XREF: _proc_rec_opt+160j
.text:00000E72                 mov     eax, [ebp+var_4]
.text:00000E75                 mov     ecx, [eax]
.text:00000E77                 mov     edx, [ecx+14h]
.text:00000E7A                 mov     eax, [ebp+arg_0]
.text:00000E7D                 mov     dword ptr [eax+edx*4+1Ch], 2
.text:00000E85                 mov     ecx, [ebp+var_4]
.text:00000E88                 mov     edx, [ecx]
.text:00000E8A                 push    edx
.text:00000E8B                 mov     eax, [ebp+arg_0]
.text:00000E8E                 push    eax
.text:00000E8F                 call    _refused_option
.text:00000E94                 add     esp, 8
.text:00000E97                 jmp     short loc_ED9
.text:00000E99 ; ---------------------------------------------------------------------------
.text:00000E99
.text:00000E99 loc_E99:                                ; CODE XREF: _proc_rec_opt+166j
.text:00000E99                 mov     ecx, [ebp+var_4]
.text:00000E9C                 mov     edx, [ecx]
.text:00000E9E                 mov     eax, [edx+14h]
.text:00000EA1                 mov     ecx, [ebp+arg_0]
.text:00000EA4                 mov     dword ptr [ecx+eax*4+1Ch], 2
.text:00000EAC                 mov     edx, [ebp+arg_8]
.text:00000EAF                 push    edx
.text:00000EB0                 mov     eax, [ebp+var_4]
.text:00000EB3                 mov     ecx, [eax]
.text:00000EB5                 mov     edx, [ecx+4]
.text:00000EB8                 push    edx
.text:00000EB9                 mov     eax, [ebp+arg_0]
.text:00000EBC                 push    eax
.text:00000EBD                 call    _send_opt
.text:00000EC2                 add     esp, 0Ch
.text:00000EC5                 push    0
.text:00000EC7                 mov     ecx, [ebp+var_4]
.text:00000ECA                 mov     edx, [ecx]
.text:00000ECC                 push    edx
.text:00000ECD                 mov     eax, [ebp+arg_0]
.text:00000ED0                 push    eax
.text:00000ED1                 call    _option_side_effects
.text:00000ED6                 add     esp, 0Ch
.text:00000ED9
.text:00000ED9 loc_ED9:                                ; CODE XREF: _proc_rec_opt+168j
.text:00000ED9                                         ; _proc_rec_opt+18Fj
.text:00000ED9                 jmp     short loc_F16
.text:00000EDB ; ---------------------------------------------------------------------------
.text:00000EDB
.text:00000EDB loc_EDB:                                ; CODE XREF: _proc_rec_opt+123j
.text:00000EDB                                         ; _proc_rec_opt+133j ...
.text:00000EDB                 jmp     loc_D45
.text:00000EE0 ; ---------------------------------------------------------------------------
.text:00000EE0
.text:00000EE0 loc_EE0:                                ; CODE XREF: _proc_rec_opt+4Cj
.text:00000EE0                 cmp     [ebp+arg_4], 0FBh ; 'v'
.text:00000EE7                 jz      short loc_EF2
.text:00000EE9                 cmp     [ebp+arg_4], 0FDh ; '²'
.text:00000EF0                 jnz     short loc_F16
.text:00000EF2
.text:00000EF2 loc_EF2:                                ; CODE XREF: _proc_rec_opt+1DFj
.text:00000EF2                 mov     ecx, [ebp+arg_8]
.text:00000EF5                 push    ecx
.text:00000EF6                 xor     edx, edx
.text:00000EF8                 cmp     [ebp+arg_4], 0FBh ; 'v'
.text:00000EFF                 setz    dl
.text:00000F02                 lea     edx, [edx+edx+0FCh]
.text:00000F09                 push    edx
.text:00000F0A                 mov     eax, [ebp+arg_0]
.text:00000F0D                 push    eax
.text:00000F0E                 call    _send_opt
.text:00000F13                 add     esp, 0Ch
.text:00000F16
.text:00000F16 loc_F16:                                ; CODE XREF: _proc_rec_opt:loc_E26j
.text:00000F16                                         ; _proc_rec_opt:loc_ED9j ...
.text:00000F16                 add     esp, 0Ch
.text:00000F19                 cmp     ebp, esp
.text:00000F1B                 call    __RTC_CheckEsp
.text:00000F20                 mov     esp, ebp
.text:00000F22                 pop     ebp
.text:00000F23                 retn
.text:00000F23 _proc_rec_opt   endp
.text:00000F23
.text:00000F23 ; ---------------------------------------------------------------------------
.text:00000F24                 align 8
.text:00000F28
.text:00000F28 ; =============== S U B R O U T I N E =======================================
.text:00000F28
.text:00000F28 ; Attributes: bp-based frame
.text:00000F28
.text:00000F28 _log_option     proc near               ; CODE XREF: _proc_rec_opt+2Cp
.text:00000F28                                         ; _send_opt+69p
.text:00000F28
.text:00000F28 var_14          = dword ptr -14h
.text:00000F28 var_10          = dword ptr -10h
.text:00000F28 var_C           = dword ptr -0Ch
.text:00000F28 var_8           = dword ptr -8
.text:00000F28 var_4           = dword ptr -4
.text:00000F28 arg_0           = dword ptr  8
.text:00000F28 arg_4           = dword ptr  0Ch
.text:00000F28 arg_8           = dword ptr  10h
.text:00000F28 arg_C           = dword ptr  14h
.text:00000F28
.text:00000F28                 push    ebp
.text:00000F29                 mov     ebp, esp
.text:00000F2B                 sub     esp, 14h
.text:00000F2E                 mov     eax, 0CCCCCCCCh
.text:00000F33                 mov     [ebp+var_14], eax
.text:00000F36                 mov     [ebp+var_10], eax
.text:00000F39                 mov     [ebp+var_C], eax
.text:00000F3C                 mov     [ebp+var_8], eax
.text:00000F3F                 mov     [ebp+var_4], eax
.text:00000F42                 cmp     [ebp+arg_8], 0FBh ; 'v'
.text:00000F49                 jnz     short loc_F54
.text:00000F4B                 mov     [ebp+var_8], offset $SG85808 ; "WILL"
.text:00000F52                 jmp     short loc_FA3
.text:00000F54 ; ---------------------------------------------------------------------------
.text:00000F54
.text:00000F54 loc_F54:                                ; CODE XREF: _log_option+21j
.text:00000F54                 cmp     [ebp+arg_8], 0FCh ; 'n'
.text:00000F5B                 jnz     short loc_F66
.text:00000F5D                 mov     [ebp+var_C], offset $SG85809 ; "WONT"
.text:00000F64                 jmp     short loc_F9D
.text:00000F66 ; ---------------------------------------------------------------------------
.text:00000F66
.text:00000F66 loc_F66:                                ; CODE XREF: _log_option+33j
.text:00000F66                 cmp     [ebp+arg_8], 0FDh ; '²'
.text:00000F6D                 jnz     short loc_F78
.text:00000F6F                 mov     [ebp+var_10], offset $SG85810 ; "DO"
.text:00000F76                 jmp     short loc_F97
.text:00000F78 ; ---------------------------------------------------------------------------
.text:00000F78
.text:00000F78 loc_F78:                                ; CODE XREF: _log_option+45j
.text:00000F78                 cmp     [ebp+arg_8], 0FEh ; '¦'
.text:00000F7F                 jnz     short loc_F8A
.text:00000F81                 mov     [ebp+var_14], offset $SG85811 ; "DONT"
.text:00000F88                 jmp     short loc_F91
.text:00000F8A ; ---------------------------------------------------------------------------
.text:00000F8A
.text:00000F8A loc_F8A:                                ; CODE XREF: _log_option+57j
.text:00000F8A                 mov     [ebp+var_14], offset $SG85812 ; "<??>"
.text:00000F91
.text:00000F91 loc_F91:                                ; CODE XREF: _log_option+60j
.text:00000F91                 mov     eax, [ebp+var_14]
.text:00000F94                 mov     [ebp+var_10], eax
.text:00000F97
.text:00000F97 loc_F97:                                ; CODE XREF: _log_option+4Ej
.text:00000F97                 mov     ecx, [ebp+var_10]
.text:00000F9A                 mov     [ebp+var_C], ecx
.text:00000F9D
.text:00000F9D loc_F9D:                                ; CODE XREF: _log_option+3Cj
.text:00000F9D                 mov     edx, [ebp+var_C]
.text:00000FA0                 mov     [ebp+var_8], edx
.text:00000FA3
.text:00000FA3 loc_FA3:                                ; CODE XREF: _log_option+2Aj
.text:00000FA3                 mov     eax, [ebp+arg_C]
.text:00000FA6                 push    eax
.text:00000FA7                 call    _telopt
.text:00000FAC                 add     esp, 4
.text:00000FAF                 push    eax
.text:00000FB0                 mov     ecx, [ebp+var_8]
.text:00000FB3                 push    ecx
.text:00000FB4                 mov     edx, [ebp+arg_4]
.text:00000FB7                 push    edx
.text:00000FB8                 push    offset $SG85813 ; "%s:\t%s %s"
.text:00000FBD                 call    _dupprintf
.text:00000FC2                 add     esp, 10h
.text:00000FC5                 mov     [ebp+var_4], eax
.text:00000FC8                 mov     eax, [ebp+var_4]
.text:00000FCB                 push    eax
.text:00000FCC                 mov     ecx, [ebp+arg_0]
.text:00000FCF                 mov     edx, [ecx+0Ch]
.text:00000FD2                 push    edx
.text:00000FD3                 call    _logevent
.text:00000FD8                 add     esp, 8
.text:00000FDB                 mov     eax, [ebp+var_4]
.text:00000FDE                 push    eax
.text:00000FDF                 call    _safefree
.text:00000FE4                 add     esp, 4
.text:00000FE7                 add     esp, 14h
.text:00000FEA                 cmp     ebp, esp
.text:00000FEC                 call    __RTC_CheckEsp
.text:00000FF1                 mov     esp, ebp
.text:00000FF3                 pop     ebp
.text:00000FF4                 retn
.text:00000FF4 _log_option     endp
.text:00000FF4
.text:00000FF4 ; ---------------------------------------------------------------------------
.text:00000FF5                 align 4
.text:00000FF8
.text:00000FF8 ; =============== S U B R O U T I N E =======================================
.text:00000FF8
.text:00000FF8 ; Attributes: bp-based frame
.text:00000FF8
.text:00000FF8 _telopt         proc near               ; CODE XREF: _log_option+7Fp
.text:00000FF8                                         ; _process_subneg+357p ...
.text:00000FF8
.text:00000FF8 var_4           = dword ptr -4
.text:00000FF8 arg_0           = dword ptr  8
.text:00000FF8
.text:00000FF8                 push    ebp
.text:00000FF9                 mov     ebp, esp
.text:00000FFB                 push    ecx
.text:00000FFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001003                 mov     eax, [ebp+arg_0]
.text:00001006                 mov     [ebp+var_4], eax
.text:00001009                 cmp     [ebp+var_4], 0FFh
.text:00001010                 jg      short loc_103D
.text:00001012                 cmp     [ebp+var_4], 0FFh
.text:00001019                 jz      loc_1221
.text:0000101F                 cmp     [ebp+var_4], 8Ch ; 'î' ; switch 141 cases
.text:00001026                 ja      $LN1            ; jumptable 00001036 default case
.text:0000102C                 mov     ecx, [ebp+var_4]
.text:0000102F                 movzx   edx, ds:$LN61[ecx]
.text:00001036                 jmp     ds:$LN62[edx*4] ; switch jump
.text:0000103D ; ---------------------------------------------------------------------------
.text:0000103D
.text:0000103D loc_103D:                               ; CODE XREF: _telopt+18j
.text:0000103D                 jmp     $LN1            ; jumptable 00001036 default case
.text:00001042 ; ---------------------------------------------------------------------------
.text:00001042
.text:00001042 $LN55:                                  ; CODE XREF: _telopt+3Ej
.text:00001042                                         ; DATA XREF: .text:$LN62o
.text:00001042                 mov     eax, offset $SG85602 ; jumptable 00001036 case 0
.text:00001047                 jmp     loc_122D
.text:0000104C ; ---------------------------------------------------------------------------
.text:0000104C
.text:0000104C $LN54:                                  ; CODE XREF: _telopt+3Ej
.text:0000104C                                         ; DATA XREF: .text:$LN62o
.text:0000104C                 mov     eax, offset $SG85604 ; jumptable 00001036 case 1
.text:00001051                 jmp     loc_122D
.text:00001056 ; ---------------------------------------------------------------------------
.text:00001056
.text:00001056 $LN53:                                  ; CODE XREF: _telopt+3Ej
.text:00001056                                         ; DATA XREF: .text:$LN62o
.text:00001056                 mov     eax, offset $SG85606 ; jumptable 00001036 case 2
.text:0000105B                 jmp     loc_122D
.text:00001060 ; ---------------------------------------------------------------------------
.text:00001060
.text:00001060 $LN52_0:                                ; CODE XREF: _telopt+3Ej
.text:00001060                                         ; DATA XREF: .text:$LN62o
.text:00001060                 mov     eax, offset $SG85608 ; jumptable 00001036 case 3
.text:00001065                 jmp     loc_122D
.text:0000106A ; ---------------------------------------------------------------------------
.text:0000106A
.text:0000106A $LN51:                                  ; CODE XREF: _telopt+3Ej
.text:0000106A                                         ; DATA XREF: .text:$LN62o
.text:0000106A                 mov     eax, offset $SG85610 ; jumptable 00001036 case 4
.text:0000106F                 jmp     loc_122D
.text:00001074 ; ---------------------------------------------------------------------------
.text:00001074
.text:00001074 $LN50:                                  ; CODE XREF: _telopt+3Ej
.text:00001074                                         ; DATA XREF: .text:$LN62o
.text:00001074                 mov     eax, offset $SG85612 ; jumptable 00001036 case 5
.text:00001079                 jmp     loc_122D
.text:0000107E ; ---------------------------------------------------------------------------
.text:0000107E
.text:0000107E $LN49:                                  ; CODE XREF: _telopt+3Ej
.text:0000107E                                         ; DATA XREF: .text:$LN62o
.text:0000107E                 mov     eax, offset $SG85614 ; jumptable 00001036 case 6
.text:00001083                 jmp     loc_122D
.text:00001088 ; ---------------------------------------------------------------------------
.text:00001088
.text:00001088 $LN48:                                  ; CODE XREF: _telopt+3Ej
.text:00001088                                         ; DATA XREF: .text:$LN62o
.text:00001088                 mov     eax, offset $SG85616 ; jumptable 00001036 case 7
.text:0000108D                 jmp     loc_122D
.text:00001092 ; ---------------------------------------------------------------------------
.text:00001092
.text:00001092 $LN47:                                  ; CODE XREF: _telopt+3Ej
.text:00001092                                         ; DATA XREF: .text:$LN62o
.text:00001092                 mov     eax, offset $SG85618 ; jumptable 00001036 case 8
.text:00001097                 jmp     loc_122D
.text:0000109C ; ---------------------------------------------------------------------------
.text:0000109C
.text:0000109C $LN46:                                  ; CODE XREF: _telopt+3Ej
.text:0000109C                                         ; DATA XREF: .text:$LN62o
.text:0000109C                 mov     eax, offset $SG85620 ; jumptable 00001036 case 9
.text:000010A1                 jmp     loc_122D
.text:000010A6 ; ---------------------------------------------------------------------------
.text:000010A6
.text:000010A6 $LN45_0:                                ; CODE XREF: _telopt+3Ej
.text:000010A6                                         ; DATA XREF: .text:$LN62o
.text:000010A6                 mov     eax, offset $SG85622 ; jumptable 00001036 case 10
.text:000010AB                 jmp     loc_122D
.text:000010B0 ; ---------------------------------------------------------------------------
.text:000010B0
.text:000010B0 $LN44:                                  ; CODE XREF: _telopt+3Ej
.text:000010B0                                         ; DATA XREF: .text:$LN62o
.text:000010B0                 mov     eax, offset $SG85624 ; jumptable 00001036 case 11
.text:000010B5                 jmp     loc_122D
.text:000010BA ; ---------------------------------------------------------------------------
.text:000010BA
.text:000010BA $LN43:                                  ; CODE XREF: _telopt+3Ej
.text:000010BA                                         ; DATA XREF: .text:$LN62o
.text:000010BA                 mov     eax, offset $SG85626 ; jumptable 00001036 case 12
.text:000010BF                 jmp     loc_122D
.text:000010C4 ; ---------------------------------------------------------------------------
.text:000010C4
.text:000010C4 $LN42:                                  ; CODE XREF: _telopt+3Ej
.text:000010C4                                         ; DATA XREF: .text:$LN62o
.text:000010C4                 mov     eax, offset $SG85628 ; jumptable 00001036 case 13
.text:000010C9                 jmp     loc_122D
.text:000010CE ; ---------------------------------------------------------------------------
.text:000010CE
.text:000010CE $LN41:                                  ; CODE XREF: _telopt+3Ej
.text:000010CE                                         ; DATA XREF: .text:$LN62o
.text:000010CE                 mov     eax, offset $SG85630 ; jumptable 00001036 case 14
.text:000010D3                 jmp     loc_122D
.text:000010D8 ; ---------------------------------------------------------------------------
.text:000010D8
.text:000010D8 $LN40:                                  ; CODE XREF: _telopt+3Ej
.text:000010D8                                         ; DATA XREF: .text:$LN62o
.text:000010D8                 mov     eax, offset $SG85632 ; jumptable 00001036 case 15
.text:000010DD                 jmp     loc_122D
.text:000010E2 ; ---------------------------------------------------------------------------
.text:000010E2
.text:000010E2 $LN39:                                  ; CODE XREF: _telopt+3Ej
.text:000010E2                                         ; DATA XREF: .text:$LN62o
.text:000010E2                 mov     eax, offset $SG85634 ; jumptable 00001036 case 16
.text:000010E7                 jmp     loc_122D
.text:000010EC ; ---------------------------------------------------------------------------
.text:000010EC
.text:000010EC $LN38:                                  ; CODE XREF: _telopt+3Ej
.text:000010EC                                         ; DATA XREF: .text:$LN62o
.text:000010EC                 mov     eax, offset $SG85636 ; jumptable 00001036 case 17
.text:000010F1                 jmp     loc_122D
.text:000010F6 ; ---------------------------------------------------------------------------
.text:000010F6
.text:000010F6 $LN37:                                  ; CODE XREF: _telopt+3Ej
.text:000010F6                                         ; DATA XREF: .text:$LN62o
.text:000010F6                 mov     eax, offset $SG85638 ; jumptable 00001036 case 18
.text:000010FB                 jmp     loc_122D
.text:00001100 ; ---------------------------------------------------------------------------
.text:00001100
.text:00001100 $LN36:                                  ; CODE XREF: _telopt+3Ej
.text:00001100                                         ; DATA XREF: .text:$LN62o
.text:00001100                 mov     eax, offset $SG85640 ; jumptable 00001036 case 19
.text:00001105                 jmp     loc_122D
.text:0000110A ; ---------------------------------------------------------------------------
.text:0000110A
.text:0000110A $LN35:                                  ; CODE XREF: _telopt+3Ej
.text:0000110A                                         ; DATA XREF: .text:$LN62o
.text:0000110A                 mov     eax, offset $SG85642 ; jumptable 00001036 case 20
.text:0000110F                 jmp     loc_122D
.text:00001114 ; ---------------------------------------------------------------------------
.text:00001114
.text:00001114 $LN34:                                  ; CODE XREF: _telopt+3Ej
.text:00001114                                         ; DATA XREF: .text:$LN62o
.text:00001114                 mov     eax, offset $SG85644 ; jumptable 00001036 case 21
.text:00001119                 jmp     loc_122D
.text:0000111E ; ---------------------------------------------------------------------------
.text:0000111E
.text:0000111E $LN33:                                  ; CODE XREF: _telopt+3Ej
.text:0000111E                                         ; DATA XREF: .text:$LN62o
.text:0000111E                 mov     eax, offset $SG85646 ; jumptable 00001036 case 22
.text:00001123                 jmp     loc_122D
.text:00001128 ; ---------------------------------------------------------------------------
.text:00001128
.text:00001128 $LN32:                                  ; CODE XREF: _telopt+3Ej
.text:00001128                                         ; DATA XREF: .text:$LN62o
.text:00001128                 mov     eax, offset $SG85648 ; jumptable 00001036 case 23
.text:0000112D                 jmp     loc_122D
.text:00001132 ; ---------------------------------------------------------------------------
.text:00001132
.text:00001132 $LN31_0:                                ; CODE XREF: _telopt+3Ej
.text:00001132                                         ; DATA XREF: .text:$LN62o
.text:00001132                 mov     eax, offset $SG85650 ; jumptable 00001036 case 24
.text:00001137                 jmp     loc_122D
.text:0000113C ; ---------------------------------------------------------------------------
.text:0000113C
.text:0000113C $LN30:                                  ; CODE XREF: _telopt+3Ej
.text:0000113C                                         ; DATA XREF: .text:$LN62o
.text:0000113C                 mov     eax, offset $SG85652 ; jumptable 00001036 case 25
.text:00001141                 jmp     loc_122D
.text:00001146 ; ---------------------------------------------------------------------------
.text:00001146
.text:00001146 $LN29:                                  ; CODE XREF: _telopt+3Ej
.text:00001146                                         ; DATA XREF: .text:$LN62o
.text:00001146                 mov     eax, offset $SG85654 ; jumptable 00001036 case 26
.text:0000114B                 jmp     loc_122D
.text:00001150 ; ---------------------------------------------------------------------------
.text:00001150
.text:00001150 $LN28:                                  ; CODE XREF: _telopt+3Ej
.text:00001150                                         ; DATA XREF: .text:$LN62o
.text:00001150                 mov     eax, offset $SG85656 ; jumptable 00001036 case 27
.text:00001155                 jmp     loc_122D
.text:0000115A ; ---------------------------------------------------------------------------
.text:0000115A
.text:0000115A $LN27:                                  ; CODE XREF: _telopt+3Ej
.text:0000115A                                         ; DATA XREF: .text:$LN62o
.text:0000115A                 mov     eax, offset $SG85658 ; jumptable 00001036 case 28
.text:0000115F                 jmp     loc_122D
.text:00001164 ; ---------------------------------------------------------------------------
.text:00001164
.text:00001164 $LN26:                                  ; CODE XREF: _telopt+3Ej
.text:00001164                                         ; DATA XREF: .text:$LN62o
.text:00001164                 mov     eax, offset $SG85660 ; jumptable 00001036 case 29
.text:00001169                 jmp     loc_122D
.text:0000116E ; ---------------------------------------------------------------------------
.text:0000116E
.text:0000116E $LN25:                                  ; CODE XREF: _telopt+3Ej
.text:0000116E                                         ; DATA XREF: .text:$LN62o
.text:0000116E                 mov     eax, offset $SG85662 ; jumptable 00001036 case 30
.text:00001173                 jmp     loc_122D
.text:00001178 ; ---------------------------------------------------------------------------
.text:00001178
.text:00001178 $LN24:                                  ; CODE XREF: _telopt+3Ej
.text:00001178                                         ; DATA XREF: .text:$LN62o
.text:00001178                 mov     eax, offset $SG85664 ; jumptable 00001036 case 31
.text:0000117D                 jmp     loc_122D
.text:00001182 ; ---------------------------------------------------------------------------
.text:00001182
.text:00001182 $LN23:                                  ; CODE XREF: _telopt+3Ej
.text:00001182                                         ; DATA XREF: .text:$LN62o
.text:00001182                 mov     eax, offset $SG85666 ; jumptable 00001036 case 32
.text:00001187                 jmp     loc_122D
.text:0000118C ; ---------------------------------------------------------------------------
.text:0000118C
.text:0000118C $LN22:                                  ; CODE XREF: _telopt+3Ej
.text:0000118C                                         ; DATA XREF: .text:$LN62o
.text:0000118C                 mov     eax, offset $SG85668 ; jumptable 00001036 case 33
.text:00001191                 jmp     loc_122D
.text:00001196 ; ---------------------------------------------------------------------------
.text:00001196
.text:00001196 $LN21:                                  ; CODE XREF: _telopt+3Ej
.text:00001196                                         ; DATA XREF: .text:$LN62o
.text:00001196                 mov     eax, offset $SG85670 ; jumptable 00001036 case 34
.text:0000119B                 jmp     loc_122D
.text:000011A0 ; ---------------------------------------------------------------------------
.text:000011A0
.text:000011A0 $LN20:                                  ; CODE XREF: _telopt+3Ej
.text:000011A0                                         ; DATA XREF: .text:$LN62o
.text:000011A0                 mov     eax, offset $SG85672 ; jumptable 00001036 case 35
.text:000011A5                 jmp     loc_122D
.text:000011AA ; ---------------------------------------------------------------------------
.text:000011AA
.text:000011AA $LN19:                                  ; CODE XREF: _telopt+3Ej
.text:000011AA                                         ; DATA XREF: .text:$LN62o
.text:000011AA                 mov     eax, offset $SG85674 ; jumptable 00001036 case 36
.text:000011AF                 jmp     short loc_122D
.text:000011B1 ; ---------------------------------------------------------------------------
.text:000011B1
.text:000011B1 $LN18:                                  ; CODE XREF: _telopt+3Ej
.text:000011B1                                         ; DATA XREF: .text:$LN62o
.text:000011B1                 mov     eax, offset $SG85676 ; jumptable 00001036 case 37
.text:000011B6                 jmp     short loc_122D
.text:000011B8 ; ---------------------------------------------------------------------------
.text:000011B8
.text:000011B8 $LN17:                                  ; CODE XREF: _telopt+3Ej
.text:000011B8                                         ; DATA XREF: .text:$LN62o
.text:000011B8                 mov     eax, offset $SG85678 ; jumptable 00001036 case 38
.text:000011BD                 jmp     short loc_122D
.text:000011BF ; ---------------------------------------------------------------------------
.text:000011BF
.text:000011BF $LN16:                                  ; CODE XREF: _telopt+3Ej
.text:000011BF                                         ; DATA XREF: .text:$LN62o
.text:000011BF                 mov     eax, offset $SG85680 ; jumptable 00001036 case 39
.text:000011C4                 jmp     short loc_122D
.text:000011C6 ; ---------------------------------------------------------------------------
.text:000011C6
.text:000011C6 $LN15:                                  ; CODE XREF: _telopt+3Ej
.text:000011C6                                         ; DATA XREF: .text:$LN62o
.text:000011C6                 mov     eax, offset $SG85682 ; jumptable 00001036 case 40
.text:000011CB                 jmp     short loc_122D
.text:000011CD ; ---------------------------------------------------------------------------
.text:000011CD
.text:000011CD $LN14:                                  ; CODE XREF: _telopt+3Ej
.text:000011CD                                         ; DATA XREF: .text:$LN62o
.text:000011CD                 mov     eax, offset $SG85684 ; jumptable 00001036 case 41
.text:000011D2                 jmp     short loc_122D
.text:000011D4 ; ---------------------------------------------------------------------------
.text:000011D4
.text:000011D4 $LN13_0:                                ; CODE XREF: _telopt+3Ej
.text:000011D4                                         ; DATA XREF: .text:$LN62o
.text:000011D4                 mov     eax, offset $SG85686 ; jumptable 00001036 case 42
.text:000011D9                 jmp     short loc_122D
.text:000011DB ; ---------------------------------------------------------------------------
.text:000011DB
.text:000011DB $LN12_0:                                ; CODE XREF: _telopt+3Ej
.text:000011DB                                         ; DATA XREF: .text:$LN62o
.text:000011DB                 mov     eax, offset $SG85688 ; jumptable 00001036 case 43
.text:000011E0                 jmp     short loc_122D
.text:000011E2 ; ---------------------------------------------------------------------------
.text:000011E2
.text:000011E2 $LN11_0:                                ; CODE XREF: _telopt+3Ej
.text:000011E2                                         ; DATA XREF: .text:$LN62o
.text:000011E2                 mov     eax, offset $SG85690 ; jumptable 00001036 case 44
.text:000011E7                 jmp     short loc_122D
.text:000011E9 ; ---------------------------------------------------------------------------
.text:000011E9
.text:000011E9 $LN10_0:                                ; CODE XREF: _telopt+3Ej
.text:000011E9                                         ; DATA XREF: .text:$LN62o
.text:000011E9                 mov     eax, offset $SG85692 ; jumptable 00001036 case 45
.text:000011EE                 jmp     short loc_122D
.text:000011F0 ; ---------------------------------------------------------------------------
.text:000011F0
.text:000011F0 $LN9_0:                                 ; CODE XREF: _telopt+3Ej
.text:000011F0                                         ; DATA XREF: .text:$LN62o
.text:000011F0                 mov     eax, offset $SG85694 ; jumptable 00001036 case 46
.text:000011F5                 jmp     short loc_122D
.text:000011F7 ; ---------------------------------------------------------------------------
.text:000011F7
.text:000011F7 $LN8_0:                                 ; CODE XREF: _telopt+3Ej
.text:000011F7                                         ; DATA XREF: .text:$LN62o
.text:000011F7                 mov     eax, offset $SG85696 ; jumptable 00001036 case 47
.text:000011FC                 jmp     short loc_122D
.text:000011FE ; ---------------------------------------------------------------------------
.text:000011FE
.text:000011FE $LN7_0:                                 ; CODE XREF: _telopt+3Ej
.text:000011FE                                         ; DATA XREF: .text:$LN62o
.text:000011FE                 mov     eax, offset $SG85698 ; jumptable 00001036 case 48
.text:00001203                 jmp     short loc_122D
.text:00001205 ; ---------------------------------------------------------------------------
.text:00001205
.text:00001205 $LN6_0:                                 ; CODE XREF: _telopt+3Ej
.text:00001205                                         ; DATA XREF: .text:$LN62o
.text:00001205                 mov     eax, offset $SG85700 ; jumptable 00001036 case 49
.text:0000120A                 jmp     short loc_122D
.text:0000120C ; ---------------------------------------------------------------------------
.text:0000120C
.text:0000120C $LN5_0:                                 ; CODE XREF: _telopt+3Ej
.text:0000120C                                         ; DATA XREF: .text:$LN62o
.text:0000120C                 mov     eax, offset $SG85702 ; jumptable 00001036 case 138
.text:00001211                 jmp     short loc_122D
.text:00001213 ; ---------------------------------------------------------------------------
.text:00001213
.text:00001213 $LN4_0:                                 ; CODE XREF: _telopt+3Ej
.text:00001213                                         ; DATA XREF: .text:$LN62o
.text:00001213                 mov     eax, offset $SG85704 ; jumptable 00001036 case 139
.text:00001218                 jmp     short loc_122D
.text:0000121A ; ---------------------------------------------------------------------------
.text:0000121A
.text:0000121A $LN3:                                   ; CODE XREF: _telopt+3Ej
.text:0000121A                                         ; DATA XREF: .text:$LN62o
.text:0000121A                 mov     eax, offset $SG85706 ; jumptable 00001036 case 140
.text:0000121F                 jmp     short loc_122D
.text:00001221 ; ---------------------------------------------------------------------------
.text:00001221
.text:00001221 loc_1221:                               ; CODE XREF: _telopt+21j
.text:00001221                 mov     eax, offset $SG85708 ; "EXOPL"
.text:00001226                 jmp     short loc_122D
.text:00001228 ; ---------------------------------------------------------------------------
.text:00001228
.text:00001228 $LN1:                                   ; CODE XREF: _telopt+2Ej
.text:00001228                                         ; _telopt+3Ej ...
.text:00001228                 mov     eax, offset $SG85710 ; jumptable 00001036 default case
.text:0000122D
.text:0000122D loc_122D:                               ; CODE XREF: _telopt+4Fj
.text:0000122D                                         ; _telopt+59j ...
.text:0000122D                 mov     esp, ebp
.text:0000122F                 pop     ebp
.text:00001230                 retn
.text:00001230 _telopt         endp
.text:00001230
.text:00001230 ; ---------------------------------------------------------------------------
.text:00001231                 align 4
.text:00001234 $LN62           dd offset $LN55, offset $LN54, offset $LN53, offset $LN52_0
.text:00001234                                         ; DATA XREF: _telopt+3Er
.text:00001234                 dd offset $LN51, offset $LN50, offset $LN49, offset $LN48 ; jump table for switch statement
.text:00001234                 dd offset $LN47, offset $LN46, offset $LN45_0, offset $LN44
.text:00001234                 dd offset $LN43, offset $LN42, offset $LN41, offset $LN40
.text:00001234                 dd offset $LN39, offset $LN38, offset $LN37, offset $LN36
.text:00001234                 dd offset $LN35, offset $LN34, offset $LN33, offset $LN32
.text:00001234                 dd offset $LN31_0, offset $LN30, offset $LN29, offset $LN28
.text:00001234                 dd offset $LN27, offset $LN26, offset $LN25, offset $LN24
.text:00001234                 dd offset $LN23, offset $LN22, offset $LN21, offset $LN20
.text:00001234                 dd offset $LN19, offset $LN18, offset $LN17, offset $LN16
.text:00001234                 dd offset $LN15, offset $LN14, offset $LN13_0, offset $LN12_0
.text:00001234                 dd offset $LN11_0, offset $LN10_0, offset $LN9_0, offset $LN8_0
.text:00001234                 dd offset $LN7_0, offset $LN6_0, offset $LN5_0, offset $LN4_0
.text:00001234                 dd offset $LN3, offset $LN1
.text:0000130C $LN61           db      0,     1,     2,     3 ; DATA XREF: _telopt+37r
.text:0000130C                 db      4,     5,     6,     7 ; indirect table for switch statement
.text:0000130C                 db      8,     9,   0Ah,   0Bh
.text:0000130C                 db    0Ch,   0Dh,   0Eh,   0Fh
.text:0000130C                 db    10h,   11h,   12h,   13h
.text:0000130C                 db    14h,   15h,   16h,   17h
.text:0000130C                 db    18h,   19h,   1Ah,   1Bh
.text:0000130C                 db    1Ch,   1Dh,   1Eh,   1Fh
.text:0000130C                 db    20h,   21h,   22h,   23h
.text:0000130C                 db    24h,   25h,   26h,   27h
.text:0000130C                 db    28h,   29h,   2Ah,   2Bh
.text:0000130C                 db    2Ch,   2Dh,   2Eh,   2Fh
.text:0000130C                 db    30h,   31h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   35h,   35h
.text:0000130C                 db    35h,   35h,   32h,   33h
.text:0000130C                 db    34h
.text:00001399                 db 0Fh dup(0CCh)
.text:000013A8
.text:000013A8 ; =============== S U B R O U T I N E =======================================
.text:000013A8
.text:000013A8 ; Attributes: bp-based frame
.text:000013A8
.text:000013A8 _send_opt       proc near               ; CODE XREF: _proc_rec_opt+E9p
.text:000013A8                                         ; _proc_rec_opt+116p ...
.text:000013A8
.text:000013A8 var_C           = dword ptr -0Ch
.text:000013A8 var_8           = dword ptr -8
.text:000013A8 var_4           = dword ptr -4
.text:000013A8 arg_0           = dword ptr  8
.text:000013A8 arg_4           = dword ptr  0Ch
.text:000013A8 arg_8           = dword ptr  10h
.text:000013A8
.text:000013A8                 push    ebp
.text:000013A9                 mov     ebp, esp
.text:000013AB                 sub     esp, 0Ch
.text:000013AE                 push    esi
.text:000013AF                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000013B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000013BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013C4                 mov     byte ptr [ebp+var_8], 0FFh
.text:000013C8                 mov     al, byte ptr [ebp+arg_4]
.text:000013CB                 mov     byte ptr [ebp+var_8+1], al
.text:000013CE                 mov     cl, byte ptr [ebp+arg_8]
.text:000013D1                 mov     byte ptr [ebp+var_8+2], cl
.text:000013D4                 mov     esi, esp
.text:000013D6                 push    3
.text:000013D8                 lea     edx, [ebp+var_8]
.text:000013DB                 push    edx
.text:000013DC                 mov     eax, [ebp+arg_0]
.text:000013DF                 mov     ecx, [eax+4]
.text:000013E2                 push    ecx
.text:000013E3                 mov     edx, [ebp+arg_0]
.text:000013E6                 mov     eax, [edx+4]
.text:000013E9                 mov     ecx, [eax]
.text:000013EB                 mov     edx, [ecx+8]
.text:000013EE                 call    edx
.text:000013F0                 add     esp, 0Ch
.text:000013F3                 cmp     esi, esp
.text:000013F5                 call    __RTC_CheckEsp
.text:000013FA                 mov     ecx, [ebp+arg_0]
.text:000013FD                 mov     [ecx+50h], eax
.text:00001400                 mov     edx, [ebp+arg_8]
.text:00001403                 push    edx
.text:00001404                 mov     eax, [ebp+arg_4]
.text:00001407                 push    eax
.text:00001408                 push    offset $SG85824 ; "client"
.text:0000140D                 mov     ecx, [ebp+arg_0]
.text:00001410                 push    ecx
.text:00001411                 call    _log_option
.text:00001416                 add     esp, 10h
.text:00001419                 push    edx
.text:0000141A                 mov     ecx, ebp
.text:0000141C                 push    eax
.text:0000141D                 lea     edx, $LN5_1
.text:00001423                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001428                 pop     eax
.text:00001429                 pop     edx
.text:0000142A                 pop     esi
.text:0000142B                 add     esp, 0Ch
.text:0000142E                 cmp     ebp, esp
.text:00001430                 call    __RTC_CheckEsp
.text:00001435                 mov     esp, ebp
.text:00001437                 pop     ebp
.text:00001438                 retn
.text:00001438 _send_opt       endp
.text:00001438
.text:00001438 ; ---------------------------------------------------------------------------
.text:00001439                 align 4
.text:0000143C $LN5_1          dd 1                    ; DATA XREF: _send_opt+75o
.text:00001440                 dd offset $LN4_1
.text:00001444 $LN4_1          dd 0FFFFFFF8h, 3        ; DATA XREF: .text:00001440o
.text:0000144C                 dd offset $LN3_0
.text:00001450 $LN3_0          dd 0CCCC0062h, 0CCCCCCCCh ; DATA XREF: .text:0000144Co
.text:00001458
.text:00001458 ; =============== S U B R O U T I N E =======================================
.text:00001458
.text:00001458 ; Attributes: bp-based frame
.text:00001458
.text:00001458 _option_side_effects proc near          ; CODE XREF: _proc_rec_opt+1C9p
.text:00001458                                         ; _activate_option+89p ...
.text:00001458
.text:00001458 arg_0           = dword ptr  8
.text:00001458 arg_4           = dword ptr  0Ch
.text:00001458 arg_8           = dword ptr  10h
.text:00001458
.text:00001458                 push    ebp
.text:00001459                 mov     ebp, esp
.text:0000145B                 mov     eax, [ebp+arg_4]
.text:0000145E                 cmp     dword ptr [eax+10h], 1
.text:00001462                 jnz     short loc_1480
.text:00001464                 mov     ecx, [ebp+arg_4]
.text:00001467                 cmp     dword ptr [ecx], 0FDh ; '²'
.text:0000146D                 jnz     short loc_1480
.text:0000146F                 xor     edx, edx
.text:00001471                 cmp     [ebp+arg_8], 0
.text:00001475                 setz    dl
.text:00001478                 mov     eax, [ebp+arg_0]
.text:0000147B                 mov     [eax+44h], edx
.text:0000147E                 jmp     short loc_14A3
.text:00001480 ; ---------------------------------------------------------------------------
.text:00001480
.text:00001480 loc_1480:                               ; CODE XREF: _option_side_effects+Aj
.text:00001480                                         ; _option_side_effects+15j
.text:00001480                 mov     ecx, [ebp+arg_4]
.text:00001483                 cmp     dword ptr [ecx+10h], 3
.text:00001487                 jnz     short loc_14A3
.text:00001489                 mov     edx, [ebp+arg_4]
.text:0000148C                 cmp     dword ptr [edx], 0FDh ; '²'
.text:00001492                 jnz     short loc_14A3
.text:00001494                 xor     eax, eax
.text:00001496                 cmp     [ebp+arg_8], 0
.text:0000149A                 setz    al
.text:0000149D                 mov     ecx, [ebp+arg_0]
.text:000014A0                 mov     [ecx+48h], eax
.text:000014A3
.text:000014A3 loc_14A3:                               ; CODE XREF: _option_side_effects+26j
.text:000014A3                                         ; _option_side_effects+2Fj ...
.text:000014A3                 mov     edx, [ebp+arg_0]
.text:000014A6                 cmp     dword ptr [edx+10h], 0
.text:000014AA                 jz      short loc_14C1
.text:000014AC                 push    0
.text:000014AE                 push    0
.text:000014B0                 push    0
.text:000014B2                 mov     eax, [ebp+arg_0]
.text:000014B5                 mov     ecx, [eax+10h]
.text:000014B8                 push    ecx
.text:000014B9                 call    _ldisc_send
.text:000014BE                 add     esp, 10h
.text:000014C1
.text:000014C1 loc_14C1:                               ; CODE XREF: _option_side_effects+52j
.text:000014C1                 mov     edx, [ebp+arg_0]
.text:000014C4                 cmp     dword ptr [edx+4Ch], 0
.text:000014C8                 jnz     loc_1585
.text:000014CE                 mov     eax, ds:dword_564
.text:000014D3                 mov     ecx, [ebp+arg_0]
.text:000014D6                 cmp     dword ptr [ecx+eax*4+1Ch], 2
.text:000014DB                 jnz     short loc_1508
.text:000014DD                 mov     edx, ds:dword_564
.text:000014E3                 mov     eax, [ebp+arg_0]
.text:000014E6                 mov     dword ptr [eax+edx*4+1Ch], 0
.text:000014EE                 mov     ecx, ds:dword_560
.text:000014F4                 push    ecx
.text:000014F5                 mov     edx, ds:_o_echo
.text:000014FB                 push    edx
.text:000014FC                 mov     eax, [ebp+arg_0]
.text:000014FF                 push    eax
.text:00001500                 call    _send_opt
.text:00001505                 add     esp, 0Ch
.text:00001508
.text:00001508 loc_1508:                               ; CODE XREF: _option_side_effects+83j
.text:00001508                 mov     ecx, ds:dword_580
.text:0000150E                 mov     edx, [ebp+arg_0]
.text:00001511                 cmp     dword ptr [edx+ecx*4+1Ch], 2
.text:00001516                 jnz     short loc_1541
.text:00001518                 mov     eax, ds:dword_580
.text:0000151D                 mov     ecx, [ebp+arg_0]
.text:00001520                 mov     dword ptr [ecx+eax*4+1Ch], 0
.text:00001528                 mov     edx, ds:dword_57C
.text:0000152E                 push    edx
.text:0000152F                 mov     eax, ds:_o_we_sga
.text:00001534                 push    eax
.text:00001535                 mov     ecx, [ebp+arg_0]
.text:00001538                 push    ecx
.text:00001539                 call    _send_opt
.text:0000153E                 add     esp, 0Ch
.text:00001541
.text:00001541 loc_1541:                               ; CODE XREF: _option_side_effects+BEj
.text:00001541                 mov     edx, ds:dword_59C
.text:00001547                 mov     eax, [ebp+arg_0]
.text:0000154A                 cmp     dword ptr [eax+edx*4+1Ch], 2
.text:0000154F                 jnz     short loc_157B
.text:00001551                 mov     ecx, ds:dword_59C
.text:00001557                 mov     edx, [ebp+arg_0]
.text:0000155A                 mov     dword ptr [edx+ecx*4+1Ch], 0
.text:00001562                 mov     eax, ds:dword_598
.text:00001567                 push    eax
.text:00001568                 mov     ecx, ds:_o_they_sga
.text:0000156E                 push    ecx
.text:0000156F                 mov     edx, [ebp+arg_0]
.text:00001572                 push    edx
.text:00001573                 call    _send_opt
.text:00001578                 add     esp, 0Ch
.text:0000157B
.text:0000157B loc_157B:                               ; CODE XREF: _option_side_effects+F7j
.text:0000157B                 mov     eax, [ebp+arg_0]
.text:0000157E                 mov     dword ptr [eax+4Ch], 1
.text:00001585
.text:00001585 loc_1585:                               ; CODE XREF: _option_side_effects+70j
.text:00001585                 cmp     ebp, esp
.text:00001587                 call    __RTC_CheckEsp
.text:0000158C                 pop     ebp
.text:0000158D                 retn
.text:0000158D _option_side_effects endp
.text:0000158D
.text:0000158D ; ---------------------------------------------------------------------------
.text:0000158E                 db 0Ah dup(0CCh)
.text:00001598
.text:00001598 ; =============== S U B R O U T I N E =======================================
.text:00001598
.text:00001598 ; Attributes: bp-based frame
.text:00001598
.text:00001598 _activate_option proc near              ; CODE XREF: _proc_rec_opt+BAp
.text:00001598                                         ; _proc_rec_opt+FBp
.text:00001598
.text:00001598 var_4           = dword ptr -4
.text:00001598 arg_0           = dword ptr  8
.text:00001598 arg_4           = dword ptr  0Ch
.text:00001598
.text:00001598                 push    ebp
.text:00001599                 mov     ebp, esp
.text:0000159B                 push    ecx
.text:0000159C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015A3                 mov     eax, [ebp+arg_4]
.text:000015A6                 cmp     dword ptr [eax], 0FBh ; 'v'
.text:000015AC                 jnz     short loc_15D1
.text:000015AE                 mov     ecx, [ebp+arg_4]
.text:000015B1                 cmp     dword ptr [ecx+10h], 1Fh
.text:000015B5                 jnz     short loc_15D1
.text:000015B7                 mov     edx, [ebp+arg_0]
.text:000015BA                 mov     eax, [edx+18h]
.text:000015BD                 push    eax
.text:000015BE                 mov     ecx, [ebp+arg_0]
.text:000015C1                 mov     edx, [ecx+14h]
.text:000015C4                 push    edx
.text:000015C5                 mov     eax, [ebp+arg_0]
.text:000015C8                 push    eax
.text:000015C9                 call    _telnet_size
.text:000015CE                 add     esp, 0Ch
.text:000015D1
.text:000015D1 loc_15D1:                               ; CODE XREF: _activate_option+14j
.text:000015D1                                         ; _activate_option+1Dj
.text:000015D1                 mov     ecx, [ebp+arg_4]
.text:000015D4                 cmp     dword ptr [ecx], 0FBh ; 'v'
.text:000015DA                 jnz     short loc_1617
.text:000015DC                 mov     edx, [ebp+arg_4]
.text:000015DF                 cmp     dword ptr [edx+10h], 27h ; '''
.text:000015E3                 jz      short loc_15EE
.text:000015E5                 mov     eax, [ebp+arg_4]
.text:000015E8                 cmp     dword ptr [eax+10h], 24h ; '$'
.text:000015EC                 jnz     short loc_1617
.text:000015EE
.text:000015EE loc_15EE:                               ; CODE XREF: _activate_option+4Bj
.text:000015EE                 mov     ecx, [ebp+arg_4]
.text:000015F1                 cmp     dword ptr [ecx+10h], 27h ; '''
.text:000015F5                 jnz     short loc_1600
.text:000015F7                 mov     [ebp+var_4], offset _o_oenv
.text:000015FE                 jmp     short loc_1607
.text:00001600 ; ---------------------------------------------------------------------------
.text:00001600
.text:00001600 loc_1600:                               ; CODE XREF: _activate_option+5Dj
.text:00001600                 mov     [ebp+var_4], offset _o_nenv
.text:00001607
.text:00001607 loc_1607:                               ; CODE XREF: _activate_option+66j
.text:00001607                 mov     edx, [ebp+var_4]
.text:0000160A                 push    edx
.text:0000160B                 mov     eax, [ebp+arg_0]
.text:0000160E                 push    eax
.text:0000160F                 call    _deactivate_option
.text:00001614                 add     esp, 8
.text:00001617
.text:00001617 loc_1617:                               ; CODE XREF: _activate_option+42j
.text:00001617                                         ; _activate_option+54j
.text:00001617                 push    1
.text:00001619                 mov     ecx, [ebp+arg_4]
.text:0000161C                 push    ecx
.text:0000161D                 mov     edx, [ebp+arg_0]
.text:00001620                 push    edx
.text:00001621                 call    _option_side_effects
.text:00001626                 add     esp, 0Ch
.text:00001629                 add     esp, 4
.text:0000162C                 cmp     ebp, esp
.text:0000162E                 call    __RTC_CheckEsp
.text:00001633                 mov     esp, ebp
.text:00001635                 pop     ebp
.text:00001636                 retn
.text:00001636 _activate_option endp
.text:00001636
.text:00001636 ; ---------------------------------------------------------------------------
.text:00001637                 align 4
.text:00001638
.text:00001638 ; =============== S U B R O U T I N E =======================================
.text:00001638
.text:00001638 ; Attributes: bp-based frame
.text:00001638
.text:00001638 _deactivate_option proc near            ; CODE XREF: _activate_option+77p
.text:00001638
.text:00001638 arg_0           = dword ptr  8
.text:00001638 arg_4           = dword ptr  0Ch
.text:00001638
.text:00001638                 push    ebp
.text:00001639                 mov     ebp, esp
.text:0000163B                 mov     eax, [ebp+arg_4]
.text:0000163E                 mov     ecx, [eax+14h]
.text:00001641                 mov     edx, [ebp+arg_0]
.text:00001644                 cmp     dword ptr [edx+ecx*4+1Ch], 0
.text:00001649                 jz      short loc_165B
.text:0000164B                 mov     eax, [ebp+arg_4]
.text:0000164E                 mov     ecx, [eax+14h]
.text:00001651                 mov     edx, [ebp+arg_0]
.text:00001654                 cmp     dword ptr [edx+ecx*4+1Ch], 1
.text:00001659                 jnz     short loc_1675
.text:0000165B
.text:0000165B loc_165B:                               ; CODE XREF: _deactivate_option+11j
.text:0000165B                 mov     eax, [ebp+arg_4]
.text:0000165E                 mov     ecx, [eax+10h]
.text:00001661                 push    ecx
.text:00001662                 mov     edx, [ebp+arg_4]
.text:00001665                 mov     eax, [edx+4]
.text:00001668                 push    eax
.text:00001669                 mov     ecx, [ebp+arg_0]
.text:0000166C                 push    ecx
.text:0000166D                 call    _send_opt
.text:00001672                 add     esp, 0Ch
.text:00001675
.text:00001675 loc_1675:                               ; CODE XREF: _deactivate_option+21j
.text:00001675                 mov     edx, [ebp+arg_4]
.text:00001678                 mov     eax, [edx+14h]
.text:0000167B                 mov     ecx, [ebp+arg_0]
.text:0000167E                 mov     dword ptr [ecx+eax*4+1Ch], 3
.text:00001686                 cmp     ebp, esp
.text:00001688                 call    __RTC_CheckEsp
.text:0000168D                 pop     ebp
.text:0000168E                 retn
.text:0000168E _deactivate_option endp
.text:0000168E
.text:0000168E ; ---------------------------------------------------------------------------
.text:0000168F                 db 9 dup(0CCh)
.text:00001698
.text:00001698 ; =============== S U B R O U T I N E =======================================
.text:00001698
.text:00001698 ; Attributes: bp-based frame
.text:00001698
.text:00001698 _refused_option proc near               ; CODE XREF: _proc_rec_opt+187p
.text:00001698
.text:00001698 arg_0           = dword ptr  8
.text:00001698 arg_4           = dword ptr  0Ch
.text:00001698
.text:00001698                 push    ebp
.text:00001699                 mov     ebp, esp
.text:0000169B                 mov     eax, [ebp+arg_4]
.text:0000169E                 cmp     dword ptr [eax], 0FBh ; 'v'
.text:000016A4                 jnz     short loc_16E3
.text:000016A6                 mov     ecx, [ebp+arg_4]
.text:000016A9                 cmp     dword ptr [ecx+10h], 27h ; '''
.text:000016AD                 jnz     short loc_16E3
.text:000016AF                 mov     edx, ds:dword_52C
.text:000016B5                 mov     eax, [ebp+arg_0]
.text:000016B8                 cmp     dword ptr [eax+edx*4+1Ch], 2
.text:000016BD                 jnz     short loc_16E3
.text:000016BF                 push    24h ; '$'
.text:000016C1                 push    0FBh ; 'v'
.text:000016C6                 mov     ecx, [ebp+arg_0]
.text:000016C9                 push    ecx
.text:000016CA                 call    _send_opt
.text:000016CF                 add     esp, 0Ch
.text:000016D2                 mov     edx, ds:dword_52C
.text:000016D8                 mov     eax, [ebp+arg_0]
.text:000016DB                 mov     dword ptr [eax+edx*4+1Ch], 0
.text:000016E3
.text:000016E3 loc_16E3:                               ; CODE XREF: _refused_option+Cj
.text:000016E3                                         ; _refused_option+15j ...
.text:000016E3                 push    0
.text:000016E5                 mov     ecx, [ebp+arg_4]
.text:000016E8                 push    ecx
.text:000016E9                 mov     edx, [ebp+arg_0]
.text:000016EC                 push    edx
.text:000016ED                 call    _option_side_effects
.text:000016F2                 add     esp, 0Ch
.text:000016F5                 cmp     ebp, esp
.text:000016F7                 call    __RTC_CheckEsp
.text:000016FC                 pop     ebp
.text:000016FD                 retn
.text:000016FD _refused_option endp
.text:000016FD
.text:000016FD ; ---------------------------------------------------------------------------
.text:000016FE                 db 0Ah dup(0CCh)
.text:00001708
.text:00001708 ; =============== S U B R O U T I N E =======================================
.text:00001708
.text:00001708 ; Attributes: bp-based frame
.text:00001708
.text:00001708 _process_subneg proc near               ; CODE XREF: _do_telnet_read+36Ep
.text:00001708
.text:00001708 var_50          = dword ptr -50h
.text:00001708 var_4C          = dword ptr -4Ch
.text:00001708 var_48          = dword ptr -48h
.text:00001708 var_44          = dword ptr -44h
.text:00001708 var_40          = dword ptr -40h
.text:00001708 Str             = dword ptr -3Ch
.text:00001708 var_38          = dword ptr -38h
.text:00001708 var_34          = dword ptr -34h
.text:00001708 var_2C          = dword ptr -2Ch
.text:00001708 var_24          = dword ptr -24h
.text:00001708 var_20          = dword ptr -20h
.text:00001708 var_1C          = dword ptr -1Ch
.text:00001708 var_18          = dword ptr -18h
.text:00001708 var_14          = dword ptr -14h
.text:00001708 var_10          = dword ptr -10h
.text:00001708 var_C           = dword ptr -0Ch
.text:00001708 var_8           = dword ptr -8
.text:00001708 var_4           = dword ptr -4
.text:00001708 arg_0           = dword ptr  8
.text:00001708
.text:00001708                 push    ebp
.text:00001709                 mov     ebp, esp
.text:0000170B                 sub     esp, 50h
.text:0000170E                 push    esi
.text:0000170F                 push    edi
.text:00001710                 lea     edi, [ebp+var_50]
.text:00001713                 mov     ecx, 14h
.text:00001718                 mov     eax, 0CCCCCCCCh
.text:0000171D                 rep stosd
.text:0000171F                 mov     eax, [ebp+arg_0]
.text:00001722                 mov     ecx, [eax+58h]
.text:00001725                 mov     [ebp+var_4C], ecx
.text:00001728                 mov     edx, [ebp+var_4C]
.text:0000172B                 sub     edx, 18h
.text:0000172E                 mov     [ebp+var_4C], edx
.text:00001731                 cmp     [ebp+var_4C], 0Fh ; switch 16 cases
.text:00001735                 ja      $LN46_0         ; jumptable 00001745 default case
.text:0000173B                 mov     eax, [ebp+var_4C]
.text:0000173E                 movzx   ecx, ds:$LN50_0[eax]
.text:00001745                 jmp     ds:$LN54_0[ecx*4] ; switch jump
.text:0000174C ; ---------------------------------------------------------------------------
.text:0000174C
.text:0000174C $LN43_0:                                ; CODE XREF: _process_subneg+3Dj
.text:0000174C                                         ; DATA XREF: .text:$LN54_0o
.text:0000174C                 mov     edx, [ebp+arg_0] ; jumptable 00001745 case 8
.text:0000174F                 cmp     dword ptr [edx+5Ch], 1
.text:00001753                 jnz     loc_1875
.text:00001759                 mov     eax, [ebp+arg_0]
.text:0000175C                 mov     ecx, [eax+60h]
.text:0000175F                 movzx   edx, byte ptr [ecx]
.text:00001762                 cmp     edx, 1
.text:00001765                 jnz     loc_1875
.text:0000176B                 push    2Fh ; '/'
.text:0000176D                 mov     eax, [ebp+arg_0]
.text:00001770                 mov     ecx, [eax+6Ch]
.text:00001773                 push    ecx
.text:00001774                 call    _conf_get_str
.text:00001779                 add     esp, 8
.text:0000177C                 mov     [ebp+Str], eax
.text:0000177F                 push    1
.text:00001781                 mov     edx, [ebp+Str]
.text:00001784                 push    edx             ; Str
.text:00001785                 call    _strlen
.text:0000178A                 add     esp, 4
.text:0000178D                 add     eax, 14h
.text:00001790                 push    eax
.text:00001791                 call    _safemalloc
.text:00001796                 add     esp, 8
.text:00001799                 mov     [ebp+var_4], eax
.text:0000179C                 mov     eax, [ebp+var_4]
.text:0000179F                 mov     byte ptr [eax], 0FFh
.text:000017A2                 mov     ecx, [ebp+var_4]
.text:000017A5                 mov     byte ptr [ecx+1], 0FAh ; '·'
.text:000017A9                 mov     edx, [ebp+var_4]
.text:000017AC                 mov     byte ptr [edx+2], 20h ; ' '
.text:000017B0                 mov     eax, [ebp+var_4]
.text:000017B3                 mov     byte ptr [eax+3], 0
.text:000017B7                 mov     ecx, [ebp+Str]
.text:000017BA                 push    ecx             ; Source
.text:000017BB                 mov     edx, [ebp+var_4]
.text:000017BE                 add     edx, 4
.text:000017C1                 push    edx             ; Dest
.text:000017C2                 call    _strcpy
.text:000017C7                 add     esp, 8
.text:000017CA                 mov     eax, [ebp+Str]
.text:000017CD                 push    eax             ; Str
.text:000017CE                 call    _strlen
.text:000017D3                 add     esp, 4
.text:000017D6                 add     eax, 4
.text:000017D9                 mov     [ebp+var_18], eax
.text:000017DC                 mov     ecx, [ebp+var_4]
.text:000017DF                 add     ecx, [ebp+var_18]
.text:000017E2                 mov     byte ptr [ecx], 0FFh
.text:000017E5                 mov     edx, [ebp+var_4]
.text:000017E8                 add     edx, [ebp+var_18]
.text:000017EB                 mov     byte ptr [edx+1], 0F0h ; '='
.text:000017EF                 mov     eax, [ebp+var_18]
.text:000017F2                 add     eax, 2
.text:000017F5                 mov     esi, esp
.text:000017F7                 push    eax
.text:000017F8                 mov     ecx, [ebp+var_4]
.text:000017FB                 push    ecx
.text:000017FC                 mov     edx, [ebp+arg_0]
.text:000017FF                 mov     eax, [edx+4]
.text:00001802                 push    eax
.text:00001803                 mov     ecx, [ebp+arg_0]
.text:00001806                 mov     edx, [ecx+4]
.text:00001809                 mov     eax, [edx]
.text:0000180B                 mov     ecx, [eax+8]
.text:0000180E                 call    ecx
.text:00001810                 add     esp, 0Ch
.text:00001813                 cmp     esi, esp
.text:00001815                 call    __RTC_CheckEsp
.text:0000181A                 mov     edx, [ebp+arg_0]
.text:0000181D                 mov     [edx+50h], eax
.text:00001820                 push    offset $SG85926 ; "server:\tSB TSPEED SEND"
.text:00001825                 mov     eax, [ebp+arg_0]
.text:00001828                 mov     ecx, [eax+0Ch]
.text:0000182B                 push    ecx
.text:0000182C                 call    _logevent
.text:00001831                 add     esp, 8
.text:00001834                 mov     edx, [ebp+Str]
.text:00001837                 push    edx
.text:00001838                 push    offset $SG85927 ; "client:\tSB TSPEED IS %s"
.text:0000183D                 call    _dupprintf
.text:00001842                 add     esp, 8
.text:00001845                 mov     [ebp+var_38], eax
.text:00001848                 mov     eax, [ebp+var_38]
.text:0000184B                 push    eax
.text:0000184C                 mov     ecx, [ebp+arg_0]
.text:0000184F                 mov     edx, [ecx+0Ch]
.text:00001852                 push    edx
.text:00001853                 call    _logevent
.text:00001858                 add     esp, 8
.text:0000185B                 mov     eax, [ebp+var_38]
.text:0000185E                 push    eax
.text:0000185F                 call    _safefree
.text:00001864                 add     esp, 4
.text:00001867                 mov     ecx, [ebp+var_4]
.text:0000186A                 push    ecx
.text:0000186B                 call    _safefree
.text:00001870                 add     esp, 4
.text:00001873                 jmp     short loc_1889
.text:00001875 ; ---------------------------------------------------------------------------
.text:00001875
.text:00001875 loc_1875:                               ; CODE XREF: _process_subneg+4Bj
.text:00001875                                         ; _process_subneg+5Dj
.text:00001875                 push    offset $SG85929 ; "server:\tSB TSPEED <something weird>"
.text:0000187A                 mov     edx, [ebp+arg_0]
.text:0000187D                 mov     eax, [edx+0Ch]
.text:00001880                 push    eax
.text:00001881                 call    _logevent
.text:00001886                 add     esp, 8
.text:00001889
.text:00001889 loc_1889:                               ; CODE XREF: _process_subneg+16Bj
.text:00001889                 jmp     $LN46_0         ; jumptable 00001745 default case
.text:0000188E ; ---------------------------------------------------------------------------
.text:0000188E
.text:0000188E $LN40_0:                                ; CODE XREF: _process_subneg+3Dj
.text:0000188E                                         ; DATA XREF: .text:$LN54_0o
.text:0000188E                 mov     ecx, [ebp+arg_0] ; jumptable 00001745 case 0
.text:00001891                 cmp     dword ptr [ecx+5Ch], 1
.text:00001895                 jnz     loc_1A06
.text:0000189B                 mov     edx, [ebp+arg_0]
.text:0000189E                 mov     eax, [edx+60h]
.text:000018A1                 movzx   ecx, byte ptr [eax]
.text:000018A4                 cmp     ecx, 1
.text:000018A7                 jnz     loc_1A06
.text:000018AD                 push    2Eh ; '.'
.text:000018AF                 mov     edx, [ebp+arg_0]
.text:000018B2                 mov     eax, [edx+6Ch]
.text:000018B5                 push    eax
.text:000018B6                 call    _conf_get_str
.text:000018BB                 add     esp, 8
.text:000018BE                 mov     [ebp+var_44], eax
.text:000018C1                 push    1
.text:000018C3                 mov     ecx, [ebp+var_44]
.text:000018C6                 push    ecx             ; Str
.text:000018C7                 call    _strlen
.text:000018CC                 add     esp, 4
.text:000018CF                 add     eax, 14h
.text:000018D2                 push    eax
.text:000018D3                 call    _safemalloc
.text:000018D8                 add     esp, 8
.text:000018DB                 mov     [ebp+var_4], eax
.text:000018DE                 mov     edx, [ebp+var_4]
.text:000018E1                 mov     byte ptr [edx], 0FFh
.text:000018E4                 mov     eax, [ebp+var_4]
.text:000018E7                 mov     byte ptr [eax+1], 0FAh ; '·'
.text:000018EB                 mov     ecx, [ebp+var_4]
.text:000018EE                 mov     byte ptr [ecx+2], 18h
.text:000018F2                 mov     edx, [ebp+var_4]
.text:000018F5                 mov     byte ptr [edx+3], 0
.text:000018F9                 mov     [ebp+var_18], 0
.text:00001900                 jmp     short loc_190B
.text:00001902 ; ---------------------------------------------------------------------------
.text:00001902
.text:00001902 loc_1902:                               ; CODE XREF: _process_subneg+255j
.text:00001902                 mov     eax, [ebp+var_18]
.text:00001905                 add     eax, 1
.text:00001908                 mov     [ebp+var_18], eax
.text:0000190B
.text:0000190B loc_190B:                               ; CODE XREF: _process_subneg+1F8j
.text:0000190B                 mov     ecx, [ebp+var_44]
.text:0000190E                 add     ecx, [ebp+var_18]
.text:00001911                 movsx   edx, byte ptr [ecx]
.text:00001914                 test    edx, edx
.text:00001916                 jz      short loc_195F
.text:00001918                 mov     eax, [ebp+var_44]
.text:0000191B                 add     eax, [ebp+var_18]
.text:0000191E                 movsx   ecx, byte ptr [eax]
.text:00001921                 cmp     ecx, 61h ; 'a'
.text:00001924                 jl      short loc_1945
.text:00001926                 mov     edx, [ebp+var_44]
.text:00001929                 add     edx, [ebp+var_18]
.text:0000192C                 movsx   eax, byte ptr [edx]
.text:0000192F                 cmp     eax, 7Ah ; 'z'
.text:00001932                 jg      short loc_1945
.text:00001934                 mov     ecx, [ebp+var_44]
.text:00001937                 add     ecx, [ebp+var_18]
.text:0000193A                 movsx   edx, byte ptr [ecx]
.text:0000193D                 sub     edx, 20h ; ' '
.text:00001940                 mov     [ebp+var_50], edx
.text:00001943                 jmp     short loc_1951
.text:00001945 ; ---------------------------------------------------------------------------
.text:00001945
.text:00001945 loc_1945:                               ; CODE XREF: _process_subneg+21Cj
.text:00001945                                         ; _process_subneg+22Aj
.text:00001945                 mov     eax, [ebp+var_44]
.text:00001948                 add     eax, [ebp+var_18]
.text:0000194B                 movsx   ecx, byte ptr [eax]
.text:0000194E                 mov     [ebp+var_50], ecx
.text:00001951
.text:00001951 loc_1951:                               ; CODE XREF: _process_subneg+23Bj
.text:00001951                 mov     edx, [ebp+var_4]
.text:00001954                 add     edx, [ebp+var_18]
.text:00001957                 mov     al, byte ptr [ebp+var_50]
.text:0000195A                 mov     [edx+4], al
.text:0000195D                 jmp     short loc_1902
.text:0000195F ; ---------------------------------------------------------------------------
.text:0000195F
.text:0000195F loc_195F:                               ; CODE XREF: _process_subneg+20Ej
.text:0000195F                 mov     ecx, [ebp+var_4]
.text:00001962                 add     ecx, [ebp+var_18]
.text:00001965                 mov     byte ptr [ecx+4], 0FFh
.text:00001969                 mov     edx, [ebp+var_4]
.text:0000196C                 add     edx, [ebp+var_18]
.text:0000196F                 mov     byte ptr [edx+5], 0F0h ; '='
.text:00001973                 mov     eax, [ebp+var_18]
.text:00001976                 add     eax, 6
.text:00001979                 mov     esi, esp
.text:0000197B                 push    eax
.text:0000197C                 mov     ecx, [ebp+var_4]
.text:0000197F                 push    ecx
.text:00001980                 mov     edx, [ebp+arg_0]
.text:00001983                 mov     eax, [edx+4]
.text:00001986                 push    eax
.text:00001987                 mov     ecx, [ebp+arg_0]
.text:0000198A                 mov     edx, [ecx+4]
.text:0000198D                 mov     eax, [edx]
.text:0000198F                 mov     ecx, [eax+8]
.text:00001992                 call    ecx
.text:00001994                 add     esp, 0Ch
.text:00001997                 cmp     esi, esp
.text:00001999                 call    __RTC_CheckEsp
.text:0000199E                 mov     edx, [ebp+arg_0]
.text:000019A1                 mov     [edx+50h], eax
.text:000019A4                 mov     eax, [ebp+var_4]
.text:000019A7                 add     eax, [ebp+var_18]
.text:000019AA                 mov     byte ptr [eax+4], 0
.text:000019AE                 push    offset $SG85940 ; "server:\tSB TTYPE SEND"
.text:000019B3                 mov     ecx, [ebp+arg_0]
.text:000019B6                 mov     edx, [ecx+0Ch]
.text:000019B9                 push    edx
.text:000019BA                 call    _logevent
.text:000019BF                 add     esp, 8
.text:000019C2                 mov     eax, [ebp+var_4]
.text:000019C5                 add     eax, 4
.text:000019C8                 push    eax
.text:000019C9                 push    offset $SG85941 ; "client:\tSB TTYPE IS %s"
.text:000019CE                 call    _dupprintf
.text:000019D3                 add     esp, 8
.text:000019D6                 mov     [ebp+var_40], eax
.text:000019D9                 mov     ecx, [ebp+var_40]
.text:000019DC                 push    ecx
.text:000019DD                 mov     edx, [ebp+arg_0]
.text:000019E0                 mov     eax, [edx+0Ch]
.text:000019E3                 push    eax
.text:000019E4                 call    _logevent
.text:000019E9                 add     esp, 8
.text:000019EC                 mov     ecx, [ebp+var_40]
.text:000019EF                 push    ecx
.text:000019F0                 call    _safefree
.text:000019F5                 add     esp, 4
.text:000019F8                 mov     edx, [ebp+var_4]
.text:000019FB                 push    edx
.text:000019FC                 call    _safefree
.text:00001A01                 add     esp, 4
.text:00001A04                 jmp     short loc_1A1A
.text:00001A06 ; ---------------------------------------------------------------------------
.text:00001A06
.text:00001A06 loc_1A06:                               ; CODE XREF: _process_subneg+18Dj
.text:00001A06                                         ; _process_subneg+19Fj
.text:00001A06                 push    offset $SG85943 ; "server:\tSB TTYPE <something weird>\r\n"
.text:00001A0B                 mov     eax, [ebp+arg_0]
.text:00001A0E                 mov     ecx, [eax+0Ch]
.text:00001A11                 push    ecx
.text:00001A12                 call    _logevent
.text:00001A17                 add     esp, 8
.text:00001A1A
.text:00001A1A loc_1A1A:                               ; CODE XREF: _process_subneg+2FCj
.text:00001A1A                 jmp     $LN46_0         ; jumptable 00001745 default case
.text:00001A1F ; ---------------------------------------------------------------------------
.text:00001A1F
.text:00001A1F $LN34_0:                                ; CODE XREF: _process_subneg+3Dj
.text:00001A1F                                         ; DATA XREF: .text:$LN54_0o
.text:00001A1F                 mov     edx, [ebp+arg_0] ; jumptable 00001745 cases 12,15
.text:00001A22                 mov     eax, [edx+60h]
.text:00001A25                 mov     [ebp+var_8], eax
.text:00001A28                 mov     ecx, [ebp+arg_0]
.text:00001A2B                 mov     edx, [ebp+var_8]
.text:00001A2E                 add     edx, [ecx+5Ch]
.text:00001A31                 mov     [ebp+var_C], edx
.text:00001A34                 mov     eax, [ebp+var_8]
.text:00001A37                 cmp     eax, [ebp+var_C]
.text:00001A3A                 jnb     $LN46_0         ; jumptable 00001745 default case
.text:00001A40                 mov     ecx, [ebp+var_8]
.text:00001A43                 movzx   edx, byte ptr [ecx]
.text:00001A46                 cmp     edx, 1
.text:00001A49                 jnz     $LN46_0         ; jumptable 00001745 default case
.text:00001A4F                 mov     eax, [ebp+var_8]
.text:00001A52                 add     eax, 1
.text:00001A55                 mov     [ebp+var_8], eax
.text:00001A58                 mov     ecx, [ebp+arg_0]
.text:00001A5B                 mov     edx, [ecx+58h]
.text:00001A5E                 push    edx
.text:00001A5F                 call    _telopt
.text:00001A64                 add     esp, 4
.text:00001A67                 push    eax
.text:00001A68                 push    offset $SG85947 ; "server:\tSB %s SEND"
.text:00001A6D                 call    _dupprintf
.text:00001A72                 add     esp, 8
.text:00001A75                 mov     [ebp+var_48], eax
.text:00001A78                 mov     eax, [ebp+var_48]
.text:00001A7B                 push    eax
.text:00001A7C                 mov     ecx, [ebp+arg_0]
.text:00001A7F                 mov     edx, [ecx+0Ch]
.text:00001A82                 push    edx
.text:00001A83                 call    _logevent
.text:00001A88                 add     esp, 8
.text:00001A8B                 mov     eax, [ebp+var_48]
.text:00001A8E                 push    eax
.text:00001A8F                 call    _safefree
.text:00001A94                 add     esp, 4
.text:00001A97                 mov     ecx, [ebp+arg_0]
.text:00001A9A                 cmp     dword ptr [ecx+58h], 24h ; '$'
.text:00001A9E                 jnz     short loc_1B1B
.text:00001AA0                 push    35h ; '5'
.text:00001AA2                 mov     edx, [ebp+arg_0]
.text:00001AA5                 mov     eax, [edx+6Ch]
.text:00001AA8                 push    eax
.text:00001AA9                 call    _conf_get_int
.text:00001AAE                 add     esp, 8
.text:00001AB1                 test    eax, eax
.text:00001AB3                 jz      short loc_1AC5
.text:00001AB5                 mov     [ebp+var_14], 1
.text:00001ABC                 mov     [ebp+var_10], 0
.text:00001AC3                 jmp     short loc_1AD3
.text:00001AC5 ; ---------------------------------------------------------------------------
.text:00001AC5
.text:00001AC5 loc_1AC5:                               ; CODE XREF: _process_subneg+3ABj
.text:00001AC5                 mov     [ebp+var_14], 0
.text:00001ACC                 mov     [ebp+var_10], 1
.text:00001AD3
.text:00001AD3 loc_1AD3:                               ; CODE XREF: _process_subneg+3BBj
.text:00001AD3                                         ; _process_subneg+40Fj
.text:00001AD3                 mov     ecx, [ebp+var_8]
.text:00001AD6                 cmp     ecx, [ebp+var_C]
.text:00001AD9                 jnb     short loc_1B19
.text:00001ADB                 mov     edx, [ebp+var_8]
.text:00001ADE                 movzx   eax, byte ptr [edx]
.text:00001AE1                 test    eax, eax
.text:00001AE3                 jnz     short loc_1AF5
.text:00001AE5                 mov     [ebp+var_14], 1
.text:00001AEC                 mov     [ebp+var_10], 0
.text:00001AF3                 jmp     short loc_1B0E
.text:00001AF5 ; ---------------------------------------------------------------------------
.text:00001AF5
.text:00001AF5 loc_1AF5:                               ; CODE XREF: _process_subneg+3DBj
.text:00001AF5                 mov     ecx, [ebp+var_8]
.text:00001AF8                 movzx   edx, byte ptr [ecx]
.text:00001AFB                 cmp     edx, 1
.text:00001AFE                 jnz     short loc_1B0E
.text:00001B00                 mov     [ebp+var_14], 0
.text:00001B07                 mov     [ebp+var_10], 1
.text:00001B0E
.text:00001B0E loc_1B0E:                               ; CODE XREF: _process_subneg+3EBj
.text:00001B0E                                         ; _process_subneg+3F6j
.text:00001B0E                 mov     eax, [ebp+var_8]
.text:00001B11                 add     eax, 1
.text:00001B14                 mov     [ebp+var_8], eax
.text:00001B17                 jmp     short loc_1AD3
.text:00001B19 ; ---------------------------------------------------------------------------
.text:00001B19
.text:00001B19 loc_1B19:                               ; CODE XREF: _process_subneg+3D1j
.text:00001B19                 jmp     short loc_1B29
.text:00001B1B ; ---------------------------------------------------------------------------
.text:00001B1B
.text:00001B1B loc_1B1B:                               ; CODE XREF: _process_subneg+396j
.text:00001B1B                 mov     [ebp+var_14], 1
.text:00001B22                 mov     [ebp+var_10], 0
.text:00001B29
.text:00001B29 loc_1B29:                               ; CODE XREF: _process_subneg:loc_1B19j
.text:00001B29                 mov     [ebp+var_1C], 14h
.text:00001B30                 lea     ecx, [ebp+var_2C]
.text:00001B33                 push    ecx
.text:00001B34                 push    0
.text:00001B36                 push    31h ; '1'
.text:00001B38                 mov     edx, [ebp+arg_0]
.text:00001B3B                 mov     eax, [edx+6Ch]
.text:00001B3E                 push    eax
.text:00001B3F                 call    _conf_get_str_strs
.text:00001B44                 add     esp, 10h
.text:00001B47                 mov     [ebp+var_24], eax
.text:00001B4A                 jmp     short loc_1B68
.text:00001B4C ; ---------------------------------------------------------------------------
.text:00001B4C
.text:00001B4C loc_1B4C:                               ; CODE XREF: _process_subneg+48Aj
.text:00001B4C                 lea     ecx, [ebp+var_2C]
.text:00001B4F                 push    ecx
.text:00001B50                 mov     edx, [ebp+var_2C]
.text:00001B53                 push    edx
.text:00001B54                 push    31h ; '1'
.text:00001B56                 mov     eax, [ebp+arg_0]
.text:00001B59                 mov     ecx, [eax+6Ch]
.text:00001B5C                 push    ecx
.text:00001B5D                 call    _conf_get_str_strs
.text:00001B62                 add     esp, 10h
.text:00001B65                 mov     [ebp+var_24], eax
.text:00001B68
.text:00001B68 loc_1B68:                               ; CODE XREF: _process_subneg+442j
.text:00001B68                 cmp     [ebp+var_24], 0
.text:00001B6C                 jz      short loc_1B94
.text:00001B6E                 mov     edx, [ebp+var_2C]
.text:00001B71                 push    edx             ; Str
.text:00001B72                 call    _strlen
.text:00001B77                 add     esp, 4
.text:00001B7A                 mov     esi, eax
.text:00001B7C                 mov     eax, [ebp+var_24]
.text:00001B7F                 push    eax             ; Str
.text:00001B80                 call    _strlen
.text:00001B85                 add     esp, 4
.text:00001B88                 add     eax, [ebp+var_1C]
.text:00001B8B                 lea     ecx, [eax+esi+2]
.text:00001B8F                 mov     [ebp+var_1C], ecx
.text:00001B92                 jmp     short loc_1B4C
.text:00001B94 ; ---------------------------------------------------------------------------
.text:00001B94
.text:00001B94 loc_1B94:                               ; CODE XREF: _process_subneg+464j
.text:00001B94                 mov     edx, [ebp+arg_0]
.text:00001B97                 mov     eax, [edx+6Ch]
.text:00001B9A                 push    eax
.text:00001B9B                 call    _get_remote_username
.text:00001BA0                 add     esp, 4
.text:00001BA3                 mov     [ebp+var_34], eax
.text:00001BA6                 cmp     [ebp+var_34], 0
.text:00001BAA                 jz      short loc_1BC2
.text:00001BAC                 mov     ecx, [ebp+var_34]
.text:00001BAF                 push    ecx             ; Str
.text:00001BB0                 call    _strlen
.text:00001BB5                 add     esp, 4
.text:00001BB8                 mov     edx, [ebp+var_1C]
.text:00001BBB                 lea     eax, [edx+eax+6]
.text:00001BBF                 mov     [ebp+var_1C], eax
.text:00001BC2
.text:00001BC2 loc_1BC2:                               ; CODE XREF: _process_subneg+4A2j
.text:00001BC2                 push    1
.text:00001BC4                 mov     ecx, [ebp+var_1C]
.text:00001BC7                 push    ecx
.text:00001BC8                 call    _safemalloc
.text:00001BCD                 add     esp, 8
.text:00001BD0                 mov     [ebp+var_4], eax
.text:00001BD3                 mov     edx, [ebp+var_4]
.text:00001BD6                 mov     byte ptr [edx], 0FFh
.text:00001BD9                 mov     eax, [ebp+var_4]
.text:00001BDC                 mov     byte ptr [eax+1], 0FAh ; '·'
.text:00001BE0                 mov     ecx, [ebp+var_4]
.text:00001BE3                 mov     edx, [ebp+arg_0]
.text:00001BE6                 mov     al, [edx+58h]
.text:00001BE9                 mov     [ecx+2], al
.text:00001BEC                 mov     ecx, [ebp+var_4]
.text:00001BEF                 mov     byte ptr [ecx+3], 0
.text:00001BF3                 mov     [ebp+var_18], 4
.text:00001BFA                 lea     edx, [ebp+var_2C]
.text:00001BFD                 push    edx
.text:00001BFE                 push    0
.text:00001C00                 push    31h ; '1'
.text:00001C02                 mov     eax, [ebp+arg_0]
.text:00001C05                 mov     ecx, [eax+6Ch]
.text:00001C08                 push    ecx
.text:00001C09                 call    _conf_get_str_strs
.text:00001C0E                 add     esp, 10h
.text:00001C11                 mov     [ebp+var_24], eax
.text:00001C14                 jmp     short loc_1C32
.text:00001C16 ; ---------------------------------------------------------------------------
.text:00001C16
.text:00001C16 loc_1C16:                               ; CODE XREF: _process_subneg:loc_1CCAj
.text:00001C16                 lea     edx, [ebp+var_2C]
.text:00001C19                 push    edx
.text:00001C1A                 mov     eax, [ebp+var_2C]
.text:00001C1D                 push    eax
.text:00001C1E                 push    31h ; '1'
.text:00001C20                 mov     ecx, [ebp+arg_0]
.text:00001C23                 mov     edx, [ecx+6Ch]
.text:00001C26                 push    edx
.text:00001C27                 call    _conf_get_str_strs
.text:00001C2C                 add     esp, 10h
.text:00001C2F                 mov     [ebp+var_24], eax
.text:00001C32
.text:00001C32 loc_1C32:                               ; CODE XREF: _process_subneg+50Cj
.text:00001C32                 cmp     [ebp+var_24], 0
.text:00001C36                 jz      loc_1CCF
.text:00001C3C                 mov     eax, [ebp+var_4]
.text:00001C3F                 add     eax, [ebp+var_18]
.text:00001C42                 mov     cl, byte ptr [ebp+var_10]
.text:00001C45                 mov     [eax], cl
.text:00001C47                 mov     edx, [ebp+var_18]
.text:00001C4A                 add     edx, 1
.text:00001C4D                 mov     [ebp+var_18], edx
.text:00001C50                 mov     eax, [ebp+var_2C]
.text:00001C53                 mov     [ebp+var_20], eax
.text:00001C56                 jmp     short loc_1C61
.text:00001C58 ; ---------------------------------------------------------------------------
.text:00001C58
.text:00001C58 loc_1C58:                               ; CODE XREF: _process_subneg+579j
.text:00001C58                 mov     ecx, [ebp+var_20]
.text:00001C5B                 add     ecx, 1
.text:00001C5E                 mov     [ebp+var_20], ecx
.text:00001C61
.text:00001C61 loc_1C61:                               ; CODE XREF: _process_subneg+54Ej
.text:00001C61                 mov     edx, [ebp+var_20]
.text:00001C64                 movsx   eax, byte ptr [edx]
.text:00001C67                 test    eax, eax
.text:00001C69                 jz      short loc_1C83
.text:00001C6B                 mov     ecx, [ebp+var_4]
.text:00001C6E                 add     ecx, [ebp+var_18]
.text:00001C71                 mov     edx, [ebp+var_20]
.text:00001C74                 mov     al, [edx]
.text:00001C76                 mov     [ecx], al
.text:00001C78                 mov     ecx, [ebp+var_18]
.text:00001C7B                 add     ecx, 1
.text:00001C7E                 mov     [ebp+var_18], ecx
.text:00001C81                 jmp     short loc_1C58
.text:00001C83 ; ---------------------------------------------------------------------------
.text:00001C83
.text:00001C83 loc_1C83:                               ; CODE XREF: _process_subneg+561j
.text:00001C83                 mov     edx, [ebp+var_4]
.text:00001C86                 add     edx, [ebp+var_18]
.text:00001C89                 mov     al, byte ptr [ebp+var_14]
.text:00001C8C                 mov     [edx], al
.text:00001C8E                 mov     ecx, [ebp+var_18]
.text:00001C91                 add     ecx, 1
.text:00001C94                 mov     [ebp+var_18], ecx
.text:00001C97                 mov     edx, [ebp+var_24]
.text:00001C9A                 mov     [ebp+var_20], edx
.text:00001C9D                 jmp     short loc_1CA8
.text:00001C9F ; ---------------------------------------------------------------------------
.text:00001C9F
.text:00001C9F loc_1C9F:                               ; CODE XREF: _process_subneg+5C0j
.text:00001C9F                 mov     eax, [ebp+var_20]
.text:00001CA2                 add     eax, 1
.text:00001CA5                 mov     [ebp+var_20], eax
.text:00001CA8
.text:00001CA8 loc_1CA8:                               ; CODE XREF: _process_subneg+595j
.text:00001CA8                 mov     ecx, [ebp+var_20]
.text:00001CAB                 movsx   edx, byte ptr [ecx]
.text:00001CAE                 test    edx, edx
.text:00001CB0                 jz      short loc_1CCA
.text:00001CB2                 mov     eax, [ebp+var_4]
.text:00001CB5                 add     eax, [ebp+var_18]
.text:00001CB8                 mov     ecx, [ebp+var_20]
.text:00001CBB                 mov     dl, [ecx]
.text:00001CBD                 mov     [eax], dl
.text:00001CBF                 mov     eax, [ebp+var_18]
.text:00001CC2                 add     eax, 1
.text:00001CC5                 mov     [ebp+var_18], eax
.text:00001CC8                 jmp     short loc_1C9F
.text:00001CCA ; ---------------------------------------------------------------------------
.text:00001CCA
.text:00001CCA loc_1CCA:                               ; CODE XREF: _process_subneg+5A8j
.text:00001CCA                 jmp     loc_1C16
.text:00001CCF ; ---------------------------------------------------------------------------
.text:00001CCF
.text:00001CCF loc_1CCF:                               ; CODE XREF: _process_subneg+52Ej
.text:00001CCF                 cmp     [ebp+var_34], 0
.text:00001CD3                 jz      loc_1D7C
.text:00001CD9                 mov     ecx, [ebp+var_4]
.text:00001CDC                 add     ecx, [ebp+var_18]
.text:00001CDF                 mov     dl, byte ptr [ebp+var_10]
.text:00001CE2                 mov     [ecx], dl
.text:00001CE4                 mov     eax, [ebp+var_18]
.text:00001CE7                 add     eax, 1
.text:00001CEA                 mov     [ebp+var_18], eax
.text:00001CED                 mov     ecx, [ebp+var_4]
.text:00001CF0                 add     ecx, [ebp+var_18]
.text:00001CF3                 mov     byte ptr [ecx], 55h ; 'U'
.text:00001CF6                 mov     edx, [ebp+var_18]
.text:00001CF9                 add     edx, 1
.text:00001CFC                 mov     [ebp+var_18], edx
.text:00001CFF                 mov     eax, [ebp+var_4]
.text:00001D02                 add     eax, [ebp+var_18]
.text:00001D05                 mov     byte ptr [eax], 53h ; 'S'
.text:00001D08                 mov     ecx, [ebp+var_18]
.text:00001D0B                 add     ecx, 1
.text:00001D0E                 mov     [ebp+var_18], ecx
.text:00001D11                 mov     edx, [ebp+var_4]
.text:00001D14                 add     edx, [ebp+var_18]
.text:00001D17                 mov     byte ptr [edx], 45h ; 'E'
.text:00001D1A                 mov     eax, [ebp+var_18]
.text:00001D1D                 add     eax, 1
.text:00001D20                 mov     [ebp+var_18], eax
.text:00001D23                 mov     ecx, [ebp+var_4]
.text:00001D26                 add     ecx, [ebp+var_18]
.text:00001D29                 mov     byte ptr [ecx], 52h ; 'R'
.text:00001D2C                 mov     edx, [ebp+var_18]
.text:00001D2F                 add     edx, 1
.text:00001D32                 mov     [ebp+var_18], edx
.text:00001D35                 mov     eax, [ebp+var_4]
.text:00001D38                 add     eax, [ebp+var_18]
.text:00001D3B                 mov     cl, byte ptr [ebp+var_14]
.text:00001D3E                 mov     [eax], cl
.text:00001D40                 mov     edx, [ebp+var_18]
.text:00001D43                 add     edx, 1
.text:00001D46                 mov     [ebp+var_18], edx
.text:00001D49                 mov     eax, [ebp+var_34]
.text:00001D4C                 mov     [ebp+var_20], eax
.text:00001D4F                 jmp     short loc_1D5A
.text:00001D51 ; ---------------------------------------------------------------------------
.text:00001D51
.text:00001D51 loc_1D51:                               ; CODE XREF: _process_subneg+672j
.text:00001D51                 mov     ecx, [ebp+var_20]
.text:00001D54                 add     ecx, 1
.text:00001D57                 mov     [ebp+var_20], ecx
.text:00001D5A
.text:00001D5A loc_1D5A:                               ; CODE XREF: _process_subneg+647j
.text:00001D5A                 mov     edx, [ebp+var_20]
.text:00001D5D                 movsx   eax, byte ptr [edx]
.text:00001D60                 test    eax, eax
.text:00001D62                 jz      short loc_1D7C
.text:00001D64                 mov     ecx, [ebp+var_4]
.text:00001D67                 add     ecx, [ebp+var_18]
.text:00001D6A                 mov     edx, [ebp+var_20]
.text:00001D6D                 mov     al, [edx]
.text:00001D6F                 mov     [ecx], al
.text:00001D71                 mov     ecx, [ebp+var_18]
.text:00001D74                 add     ecx, 1
.text:00001D77                 mov     [ebp+var_18], ecx
.text:00001D7A                 jmp     short loc_1D51
.text:00001D7C ; ---------------------------------------------------------------------------
.text:00001D7C
.text:00001D7C loc_1D7C:                               ; CODE XREF: _process_subneg+5CBj
.text:00001D7C                                         ; _process_subneg+65Aj
.text:00001D7C                 mov     edx, [ebp+var_4]
.text:00001D7F                 add     edx, [ebp+var_18]
.text:00001D82                 mov     byte ptr [edx], 0FFh
.text:00001D85                 mov     eax, [ebp+var_18]
.text:00001D88                 add     eax, 1
.text:00001D8B                 mov     [ebp+var_18], eax
.text:00001D8E                 mov     ecx, [ebp+var_4]
.text:00001D91                 add     ecx, [ebp+var_18]
.text:00001D94                 mov     byte ptr [ecx], 0F0h ; '='
.text:00001D97                 mov     edx, [ebp+var_18]
.text:00001D9A                 add     edx, 1
.text:00001D9D                 mov     [ebp+var_18], edx
.text:00001DA0                 mov     esi, esp
.text:00001DA2                 mov     eax, [ebp+var_18]
.text:00001DA5                 push    eax
.text:00001DA6                 mov     ecx, [ebp+var_4]
.text:00001DA9                 push    ecx
.text:00001DAA                 mov     edx, [ebp+arg_0]
.text:00001DAD                 mov     eax, [edx+4]
.text:00001DB0                 push    eax
.text:00001DB1                 mov     ecx, [ebp+arg_0]
.text:00001DB4                 mov     edx, [ecx+4]
.text:00001DB7                 mov     eax, [edx]
.text:00001DB9                 mov     ecx, [eax+8]
.text:00001DBC                 call    ecx
.text:00001DBE                 add     esp, 0Ch
.text:00001DC1                 cmp     esi, esp
.text:00001DC3                 call    __RTC_CheckEsp
.text:00001DC8                 mov     edx, [ebp+arg_0]
.text:00001DCB                 mov     [edx+50h], eax
.text:00001DCE                 cmp     [ebp+var_18], 6
.text:00001DD2                 jnz     short loc_1E18
.text:00001DD4                 mov     eax, [ebp+arg_0]
.text:00001DD7                 mov     ecx, [eax+58h]
.text:00001DDA                 push    ecx
.text:00001DDB                 call    _telopt
.text:00001DE0                 add     esp, 4
.text:00001DE3                 push    eax
.text:00001DE4                 push    offset $SG85983 ; "client:\tSB %s IS <nothing>"
.text:00001DE9                 call    _dupprintf
.text:00001DEE                 add     esp, 8
.text:00001DF1                 mov     [ebp+var_48], eax
.text:00001DF4                 mov     edx, [ebp+var_48]
.text:00001DF7                 push    edx
.text:00001DF8                 mov     eax, [ebp+arg_0]
.text:00001DFB                 mov     ecx, [eax+0Ch]
.text:00001DFE                 push    ecx
.text:00001DFF                 call    _logevent
.text:00001E04                 add     esp, 8
.text:00001E07                 mov     edx, [ebp+var_48]
.text:00001E0A                 push    edx
.text:00001E0B                 call    _safefree
.text:00001E10                 add     esp, 4
.text:00001E13                 jmp     loc_1F07
.text:00001E18 ; ---------------------------------------------------------------------------
.text:00001E18
.text:00001E18 loc_1E18:                               ; CODE XREF: _process_subneg+6CAj
.text:00001E18                 mov     eax, [ebp+arg_0]
.text:00001E1B                 mov     ecx, [eax+58h]
.text:00001E1E                 push    ecx
.text:00001E1F                 call    _telopt
.text:00001E24                 add     esp, 4
.text:00001E27                 push    eax
.text:00001E28                 push    offset $SG85985 ; "client:\tSB %s IS:"
.text:00001E2D                 call    _dupprintf
.text:00001E32                 add     esp, 8
.text:00001E35                 mov     [ebp+var_48], eax
.text:00001E38                 mov     edx, [ebp+var_48]
.text:00001E3B                 push    edx
.text:00001E3C                 mov     eax, [ebp+arg_0]
.text:00001E3F                 mov     ecx, [eax+0Ch]
.text:00001E42                 push    ecx
.text:00001E43                 call    _logevent
.text:00001E48                 add     esp, 8
.text:00001E4B                 mov     edx, [ebp+var_48]
.text:00001E4E                 push    edx
.text:00001E4F                 call    _safefree
.text:00001E54                 add     esp, 4
.text:00001E57                 lea     eax, [ebp+var_2C]
.text:00001E5A                 push    eax
.text:00001E5B                 push    0
.text:00001E5D                 push    31h ; '1'
.text:00001E5F                 mov     ecx, [ebp+arg_0]
.text:00001E62                 mov     edx, [ecx+6Ch]
.text:00001E65                 push    edx
.text:00001E66                 call    _conf_get_str_strs
.text:00001E6B                 add     esp, 10h
.text:00001E6E                 mov     [ebp+var_24], eax
.text:00001E71                 jmp     short loc_1E8F
.text:00001E73 ; ---------------------------------------------------------------------------
.text:00001E73
.text:00001E73 loc_1E73:                               ; CODE XREF: _process_subneg+7C4j
.text:00001E73                 lea     eax, [ebp+var_2C]
.text:00001E76                 push    eax
.text:00001E77                 mov     ecx, [ebp+var_2C]
.text:00001E7A                 push    ecx
.text:00001E7B                 push    31h ; '1'
.text:00001E7D                 mov     edx, [ebp+arg_0]
.text:00001E80                 mov     eax, [edx+6Ch]
.text:00001E83                 push    eax
.text:00001E84                 call    _conf_get_str_strs
.text:00001E89                 add     esp, 10h
.text:00001E8C                 mov     [ebp+var_24], eax
.text:00001E8F
.text:00001E8F loc_1E8F:                               ; CODE XREF: _process_subneg+769j
.text:00001E8F                 cmp     [ebp+var_24], 0
.text:00001E93                 jz      short loc_1ECE
.text:00001E95                 mov     ecx, [ebp+var_24]
.text:00001E98                 push    ecx
.text:00001E99                 mov     edx, [ebp+var_2C]
.text:00001E9C                 push    edx
.text:00001E9D                 push    offset $SG85991 ; "\t%s=%s"
.text:00001EA2                 call    _dupprintf
.text:00001EA7                 add     esp, 0Ch
.text:00001EAA                 mov     [ebp+var_48], eax
.text:00001EAD                 mov     eax, [ebp+var_48]
.text:00001EB0                 push    eax
.text:00001EB1                 mov     ecx, [ebp+arg_0]
.text:00001EB4                 mov     edx, [ecx+0Ch]
.text:00001EB7                 push    edx
.text:00001EB8                 call    _logevent
.text:00001EBD                 add     esp, 8
.text:00001EC0                 mov     eax, [ebp+var_48]
.text:00001EC3                 push    eax
.text:00001EC4                 call    _safefree
.text:00001EC9                 add     esp, 4
.text:00001ECC                 jmp     short loc_1E73
.text:00001ECE ; ---------------------------------------------------------------------------
.text:00001ECE
.text:00001ECE loc_1ECE:                               ; CODE XREF: _process_subneg+78Bj
.text:00001ECE                 cmp     [ebp+var_34], 0
.text:00001ED2                 jz      short loc_1F07
.text:00001ED4                 mov     ecx, [ebp+var_34]
.text:00001ED7                 push    ecx
.text:00001ED8                 push    offset $SG85993 ; "\tUSER=%s"
.text:00001EDD                 call    _dupprintf
.text:00001EE2                 add     esp, 8
.text:00001EE5                 mov     [ebp+var_48], eax
.text:00001EE8                 mov     edx, [ebp+var_48]
.text:00001EEB                 push    edx
.text:00001EEC                 mov     eax, [ebp+arg_0]
.text:00001EEF                 mov     ecx, [eax+0Ch]
.text:00001EF2                 push    ecx
.text:00001EF3                 call    _logevent
.text:00001EF8                 add     esp, 8
.text:00001EFB                 mov     edx, [ebp+var_48]
.text:00001EFE                 push    edx
.text:00001EFF                 call    _safefree
.text:00001F04                 add     esp, 4
.text:00001F07
.text:00001F07 loc_1F07:                               ; CODE XREF: _process_subneg+70Bj
.text:00001F07                                         ; _process_subneg+7CAj
.text:00001F07                 mov     eax, [ebp+var_4]
.text:00001F0A                 push    eax
.text:00001F0B                 call    _safefree
.text:00001F10                 add     esp, 4
.text:00001F13                 mov     ecx, [ebp+var_34]
.text:00001F16                 push    ecx
.text:00001F17                 call    _safefree
.text:00001F1C                 add     esp, 4
.text:00001F1F
.text:00001F1F $LN46_0:                                ; CODE XREF: _process_subneg+2Dj
.text:00001F1F                                         ; _process_subneg+3Dj ...
.text:00001F1F                 push    edx             ; jumptable 00001745 default case
.text:00001F20                 mov     ecx, ebp
.text:00001F22                 push    eax
.text:00001F23                 lea     edx, $LN53_0
.text:00001F29                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F2E                 pop     eax
.text:00001F2F                 pop     edx
.text:00001F30                 pop     edi
.text:00001F31                 pop     esi
.text:00001F32                 add     esp, 50h
.text:00001F35                 cmp     ebp, esp
.text:00001F37                 call    __RTC_CheckEsp
.text:00001F3C                 mov     esp, ebp
.text:00001F3E                 pop     ebp
.text:00001F3F                 retn
.text:00001F3F _process_subneg endp
.text:00001F3F
.text:00001F3F ; ---------------------------------------------------------------------------
.text:00001F40 $LN53_0         dd 1                    ; DATA XREF: _process_subneg+81Bo
.text:00001F44                 dd offset $LN52_1
.text:00001F48 $LN52_1         dd 0FFFFFFD4h, 4        ; DATA XREF: .text:00001F44o
.text:00001F50                 dd offset $LN51_0       ; "ekey"
.text:00001F54 $LN51_0         db 'ekey',0             ; DATA XREF: .text:00001F50o
.text:00001F59                 align 4
.text:00001F5C $LN54_0         dd offset $LN40_0       ; DATA XREF: _process_subneg+3Dr
.text:00001F5C                 dd offset $LN43_0       ; jump table for switch statement
.text:00001F5C                 dd offset $LN34_0
.text:00001F5C                 dd offset $LN46_0
.text:00001F6C $LN50_0         db      0,     3,     3,     3
.text:00001F6C                                         ; DATA XREF: _process_subneg+36r
.text:00001F6C                 db      3,     3,     3,     3 ; indirect table for switch statement
.text:00001F6C                 db      1,     3,     3,     3
.text:00001F6C                 db      2,     3,     3,     2
.text:00001F7C                 db 0Ch dup(0CCh)
.text:00001F88
.text:00001F88 ; =============== S U B R O U T I N E =======================================
.text:00001F88
.text:00001F88 ; Attributes: bp-based frame
.text:00001F88
.text:00001F88 _telnet_sent    proc near               ; DATA XREF: .rdata:00000614o
.text:00001F88
.text:00001F88 var_4           = dword ptr -4
.text:00001F88 arg_0           = dword ptr  8
.text:00001F88 arg_4           = dword ptr  0Ch
.text:00001F88
.text:00001F88                 push    ebp
.text:00001F89                 mov     ebp, esp
.text:00001F8B                 push    ecx
.text:00001F8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F93                 mov     eax, [ebp+arg_0]
.text:00001F96                 mov     [ebp+var_4], eax
.text:00001F99                 mov     ecx, [ebp+var_4]
.text:00001F9C                 mov     edx, [ebp+arg_4]
.text:00001F9F                 mov     [ecx+50h], edx
.text:00001FA2                 mov     esp, ebp
.text:00001FA4                 pop     ebp
.text:00001FA5                 retn
.text:00001FA5 _telnet_sent    endp
.text:00001FA5
.text:00001FA5 ; ---------------------------------------------------------------------------
.text:00001FA6                 align 4
.text:00001FA8
.text:00001FA8 ; =============== S U B R O U T I N E =======================================
.text:00001FA8
.text:00001FA8 ; Attributes: bp-based frame
.text:00001FA8
.text:00001FA8 _telnet_init    proc near               ; DATA XREF: .data:_telnet_backendo
.text:00001FA8
.text:00001FA8 var_2C          = dword ptr -2Ch
.text:00001FA8 var_28          = dword ptr -28h
.text:00001FA8 var_24          = dword ptr -24h
.text:00001FA8 var_20          = dword ptr -20h
.text:00001FA8 var_1C          = dword ptr -1Ch
.text:00001FA8 var_18          = dword ptr -18h
.text:00001FA8 var_14          = dword ptr -14h
.text:00001FA8 var_10          = dword ptr -10h
.text:00001FA8 var_C           = dword ptr -0Ch
.text:00001FA8 var_8           = dword ptr -8
.text:00001FA8 var_4           = dword ptr -4
.text:00001FA8 arg_0           = dword ptr  8
.text:00001FA8 arg_4           = dword ptr  0Ch
.text:00001FA8 arg_8           = dword ptr  10h
.text:00001FA8 arg_C           = dword ptr  14h
.text:00001FA8 arg_10          = dword ptr  18h
.text:00001FA8 arg_14          = dword ptr  1Ch
.text:00001FA8 arg_18          = dword ptr  20h
.text:00001FA8 arg_1C          = dword ptr  24h
.text:00001FA8
.text:00001FA8                 push    ebp
.text:00001FA9                 mov     ebp, esp
.text:00001FAB                 sub     esp, 2Ch
.text:00001FAE                 push    esi
.text:00001FAF                 push    edi
.text:00001FB0                 lea     edi, [ebp+var_2C]
.text:00001FB3                 mov     ecx, 0Bh
.text:00001FB8                 mov     eax, 0CCCCCCCCh
.text:00001FBD                 rep stosd
.text:00001FBF                 push    74h ; 't'
.text:00001FC1                 push    1
.text:00001FC3                 call    _safemalloc
.text:00001FC8                 add     esp, 8
.text:00001FCB                 mov     [ebp+var_C], eax
.text:00001FCE                 mov     eax, [ebp+var_C]
.text:00001FD1                 mov     dword ptr [eax], offset ?fn_table@?1??telnet_init@@9@9 ; `telnet_init'::`2'::fn_table
.text:00001FD7                 mov     ecx, [ebp+arg_8]
.text:00001FDA                 push    ecx
.text:00001FDB                 call    _conf_copy
.text:00001FE0                 add     esp, 4
.text:00001FE3                 mov     edx, [ebp+var_C]
.text:00001FE6                 mov     [edx+6Ch], eax
.text:00001FE9                 mov     eax, [ebp+var_C]
.text:00001FEC                 mov     dword ptr [eax+4], 0
.text:00001FF3                 mov     ecx, [ebp+var_C]
.text:00001FF6                 mov     dword ptr [ecx+8], 0
.text:00001FFD                 mov     edx, [ebp+var_C]
.text:00002000                 mov     dword ptr [edx+44h], 1
.text:00002007                 mov     eax, [ebp+var_C]
.text:0000200A                 mov     dword ptr [eax+48h], 1
.text:00002011                 mov     ecx, [ebp+var_C]
.text:00002014                 mov     dword ptr [ecx+4Ch], 0
.text:0000201B                 mov     edx, [ebp+var_C]
.text:0000201E                 mov     dword ptr [edx+60h], 0
.text:00002025                 mov     eax, [ebp+var_C]
.text:00002028                 mov     dword ptr [eax+64h], 0
.text:0000202F                 mov     ecx, [ebp+var_C]
.text:00002032                 mov     edx, [ebp+arg_0]
.text:00002035                 mov     [ecx+0Ch], edx
.text:00002038                 push    6Eh ; 'n'
.text:0000203A                 mov     eax, [ebp+var_C]
.text:0000203D                 mov     ecx, [eax+6Ch]
.text:00002040                 push    ecx
.text:00002041                 call    _conf_get_int
.text:00002046                 add     esp, 8
.text:00002049                 mov     edx, [ebp+var_C]
.text:0000204C                 mov     [edx+14h], eax
.text:0000204F                 push    6Fh ; 'o'
.text:00002051                 mov     eax, [ebp+var_C]
.text:00002054                 mov     ecx, [eax+6Ch]
.text:00002057                 push    ecx
.text:00002058                 call    _conf_get_int
.text:0000205D                 add     esp, 8
.text:00002060                 mov     edx, [ebp+var_C]
.text:00002063                 mov     [edx+18h], eax
.text:00002066                 mov     eax, [ebp+var_C]
.text:00002069                 mov     dword ptr [eax+68h], 0
.text:00002070                 mov     ecx, [ebp+var_C]
.text:00002073                 mov     dword ptr [ecx+10h], 0
.text:0000207A                 mov     edx, [ebp+var_C]
.text:0000207D                 mov     dword ptr [edx+70h], 0
.text:00002084                 mov     eax, [ebp+arg_4]
.text:00002087                 mov     ecx, [ebp+var_C]
.text:0000208A                 mov     [eax], ecx
.text:0000208C                 push    3
.text:0000208E                 mov     edx, [ebp+var_C]
.text:00002091                 mov     eax, [edx+6Ch]
.text:00002094                 push    eax
.text:00002095                 call    _conf_get_int
.text:0000209A                 add     esp, 8
.text:0000209D                 mov     [ebp+var_14], eax
.text:000020A0                 cmp     [ebp+var_14], 1
.text:000020A4                 jnz     short loc_20AF
.text:000020A6                 mov     [ebp+var_28], offset $SG86162 ; " (IPv4)"
.text:000020AD                 jmp     short loc_20CB
.text:000020AF ; ---------------------------------------------------------------------------
.text:000020AF
.text:000020AF loc_20AF:                               ; CODE XREF: _telnet_init+FCj
.text:000020AF                 cmp     [ebp+var_14], 2
.text:000020B3                 jnz     short loc_20BE
.text:000020B5                 mov     [ebp+var_2C], offset $SG86163 ; " (IPv6)"
.text:000020BC                 jmp     short loc_20C5
.text:000020BE ; ---------------------------------------------------------------------------
.text:000020BE
.text:000020BE loc_20BE:                               ; CODE XREF: _telnet_init+10Bj
.text:000020BE                 mov     [ebp+var_2C], offset $SG86164
.text:000020C5
.text:000020C5 loc_20C5:                               ; CODE XREF: _telnet_init+114j
.text:000020C5                 mov     ecx, [ebp+var_2C]
.text:000020C8                 mov     [ebp+var_28], ecx
.text:000020CB
.text:000020CB loc_20CB:                               ; CODE XREF: _telnet_init+105j
.text:000020CB                 mov     edx, [ebp+var_28]
.text:000020CE                 push    edx
.text:000020CF                 mov     eax, [ebp+arg_C]
.text:000020D2                 push    eax
.text:000020D3                 push    offset $SG86165 ; "Looking up host \"%s\"%s"
.text:000020D8                 call    _dupprintf
.text:000020DD                 add     esp, 0Ch
.text:000020E0                 mov     [ebp+var_18], eax
.text:000020E3                 mov     ecx, [ebp+var_18]
.text:000020E6                 push    ecx
.text:000020E7                 mov     edx, [ebp+var_C]
.text:000020EA                 mov     eax, [edx+0Ch]
.text:000020ED                 push    eax
.text:000020EE                 call    _logevent
.text:000020F3                 add     esp, 8
.text:000020F6                 mov     ecx, [ebp+var_18]
.text:000020F9                 push    ecx
.text:000020FA                 call    _safefree
.text:000020FF                 add     esp, 4
.text:00002102                 mov     edx, [ebp+var_14]
.text:00002105                 push    edx
.text:00002106                 mov     eax, [ebp+var_C]
.text:00002109                 mov     ecx, [eax+6Ch]
.text:0000210C                 push    ecx
.text:0000210D                 mov     edx, [ebp+arg_14]
.text:00002110                 push    edx
.text:00002111                 mov     eax, [ebp+arg_10]
.text:00002114                 push    eax
.text:00002115                 mov     ecx, [ebp+arg_C]
.text:00002118                 push    ecx
.text:00002119                 call    _name_lookup
.text:0000211E                 add     esp, 14h
.text:00002121                 mov     [ebp+var_4], eax
.text:00002124                 mov     edx, [ebp+var_4]
.text:00002127                 push    edx
.text:00002128                 call    _sk_addr_error
.text:0000212D                 add     esp, 4
.text:00002130                 mov     [ebp+var_8], eax
.text:00002133                 cmp     [ebp+var_8], 0
.text:00002137                 jz      short loc_214D
.text:00002139                 mov     eax, [ebp+var_4]
.text:0000213C                 push    eax
.text:0000213D                 call    _sk_addr_free
.text:00002142                 add     esp, 4
.text:00002145                 mov     eax, [ebp+var_8]
.text:00002148                 jmp     loc_230E
.text:0000214D ; ---------------------------------------------------------------------------
.text:0000214D
.text:0000214D loc_214D:                               ; CODE XREF: _telnet_init+18Fj
.text:0000214D                 cmp     [ebp+arg_10], 0
.text:00002151                 jge     short loc_215A
.text:00002153                 mov     [ebp+arg_10], 17h
.text:0000215A
.text:0000215A loc_215A:                               ; CODE XREF: _telnet_init+1A9j
.text:0000215A                 mov     ecx, [ebp+var_C]
.text:0000215D                 mov     edx, [ecx+6Ch]
.text:00002160                 push    edx
.text:00002161                 mov     eax, [ebp+var_C]
.text:00002164                 push    eax
.text:00002165                 mov     ecx, [ebp+arg_1C]
.text:00002168                 push    ecx
.text:00002169                 mov     edx, [ebp+arg_18]
.text:0000216C                 push    edx
.text:0000216D                 push    1
.text:0000216F                 push    0
.text:00002171                 mov     eax, [ebp+arg_10]
.text:00002174                 push    eax
.text:00002175                 mov     ecx, [ebp+arg_14]
.text:00002178                 mov     edx, [ecx]
.text:0000217A                 push    edx
.text:0000217B                 mov     eax, [ebp+var_4]
.text:0000217E                 push    eax
.text:0000217F                 call    _new_connection
.text:00002184                 add     esp, 24h
.text:00002187                 mov     ecx, [ebp+var_C]
.text:0000218A                 mov     [ecx+4], eax
.text:0000218D                 mov     esi, esp
.text:0000218F                 mov     edx, [ebp+var_C]
.text:00002192                 mov     eax, [edx+4]
.text:00002195                 push    eax
.text:00002196                 mov     ecx, [ebp+var_C]
.text:00002199                 mov     edx, [ecx+4]
.text:0000219C                 mov     eax, [edx]
.text:0000219E                 mov     ecx, [eax+1Ch]
.text:000021A1                 call    ecx
.text:000021A3                 add     esp, 4
.text:000021A6                 cmp     esi, esp
.text:000021A8                 call    __RTC_CheckEsp
.text:000021AD                 mov     [ebp+var_8], eax
.text:000021B0                 cmp     [ebp+var_8], 0
.text:000021B4                 jz      short loc_21BE
.text:000021B6                 mov     eax, [ebp+var_8]
.text:000021B9                 jmp     loc_230E
.text:000021BE ; ---------------------------------------------------------------------------
.text:000021BE
.text:000021BE loc_21BE:                               ; CODE XREF: _telnet_init+20Cj
.text:000021BE                 mov     edx, [ebp+var_C]
.text:000021C1                 push    edx
.text:000021C2                 push    offset _telnet_backend
.text:000021C7                 mov     eax, [ebp+var_C]
.text:000021CA                 mov     ecx, [eax+6Ch]
.text:000021CD                 push    ecx
.text:000021CE                 call    _pinger_new
.text:000021D3                 add     esp, 0Ch
.text:000021D6                 mov     edx, [ebp+var_C]
.text:000021D9                 mov     [edx+70h], eax
.text:000021DC                 push    36h ; '6'
.text:000021DE                 mov     eax, [ebp+var_C]
.text:000021E1                 mov     ecx, [eax+6Ch]
.text:000021E4                 push    ecx
.text:000021E5                 call    _conf_get_int
.text:000021EA                 add     esp, 8
.text:000021ED                 test    eax, eax
.text:000021EF                 jz      short loc_2222
.text:000021F1                 mov     [ebp+var_1C], offset _opts
.text:000021F8                 jmp     short loc_2203
.text:000021FA ; ---------------------------------------------------------------------------
.text:000021FA
.text:000021FA loc_21FA:                               ; CODE XREF: _telnet_init+276j
.text:000021FA                 mov     edx, [ebp+var_1C]
.text:000021FD                 add     edx, 4
.text:00002200                 mov     [ebp+var_1C], edx
.text:00002203
.text:00002203 loc_2203:                               ; CODE XREF: _telnet_init+250j
.text:00002203                 mov     eax, [ebp+var_1C]
.text:00002206                 cmp     dword ptr [eax], 0
.text:00002209                 jz      short loc_2220
.text:0000220B                 mov     ecx, [ebp+var_1C]
.text:0000220E                 mov     edx, [ecx]
.text:00002210                 mov     eax, [edx+14h]
.text:00002213                 mov     ecx, [ebp+var_C]
.text:00002216                 mov     dword ptr [ecx+eax*4+1Ch], 2
.text:0000221E                 jmp     short loc_21FA
.text:00002220 ; ---------------------------------------------------------------------------
.text:00002220
.text:00002220 loc_2220:                               ; CODE XREF: _telnet_init+261j
.text:00002220                 jmp     short loc_228E
.text:00002222 ; ---------------------------------------------------------------------------
.text:00002222
.text:00002222 loc_2222:                               ; CODE XREF: _telnet_init+247j
.text:00002222                 mov     [ebp+var_20], offset _opts
.text:00002229                 jmp     short loc_2234
.text:0000222B ; ---------------------------------------------------------------------------
.text:0000222B
.text:0000222B loc_222B:                               ; CODE XREF: _telnet_init:loc_2282j
.text:0000222B                 mov     edx, [ebp+var_20]
.text:0000222E                 add     edx, 4
.text:00002231                 mov     [ebp+var_20], edx
.text:00002234
.text:00002234 loc_2234:                               ; CODE XREF: _telnet_init+281j
.text:00002234                 mov     eax, [ebp+var_20]
.text:00002237                 cmp     dword ptr [eax], 0
.text:0000223A                 jz      short loc_2284
.text:0000223C                 mov     ecx, [ebp+var_20]
.text:0000223F                 mov     edx, [ecx]
.text:00002241                 mov     eax, [ebp+var_20]
.text:00002244                 mov     ecx, [eax]
.text:00002246                 mov     eax, [ecx+14h]
.text:00002249                 mov     ecx, [ebp+var_C]
.text:0000224C                 mov     edx, [edx+18h]
.text:0000224F                 mov     [ecx+eax*4+1Ch], edx
.text:00002253                 mov     eax, [ebp+var_20]
.text:00002256                 mov     ecx, [eax]
.text:00002258                 mov     edx, [ecx+14h]
.text:0000225B                 mov     eax, [ebp+var_C]
.text:0000225E                 cmp     dword ptr [eax+edx*4+1Ch], 0
.text:00002263                 jnz     short loc_2282
.text:00002265                 mov     ecx, [ebp+var_20]
.text:00002268                 mov     edx, [ecx]
.text:0000226A                 mov     eax, [edx+10h]
.text:0000226D                 push    eax
.text:0000226E                 mov     ecx, [ebp+var_20]
.text:00002271                 mov     edx, [ecx]
.text:00002273                 mov     eax, [edx]
.text:00002275                 push    eax
.text:00002276                 mov     ecx, [ebp+var_C]
.text:00002279                 push    ecx
.text:0000227A                 call    _send_opt
.text:0000227F                 add     esp, 0Ch
.text:00002282
.text:00002282 loc_2282:                               ; CODE XREF: _telnet_init+2BBj
.text:00002282                 jmp     short loc_222B
.text:00002284 ; ---------------------------------------------------------------------------
.text:00002284
.text:00002284 loc_2284:                               ; CODE XREF: _telnet_init+292j
.text:00002284                 mov     edx, [ebp+var_C]
.text:00002287                 mov     dword ptr [edx+4Ch], 1
.text:0000228E
.text:0000228E loc_228E:                               ; CODE XREF: _telnet_init:loc_2220j
.text:0000228E                 mov     eax, [ebp+var_C]
.text:00002291                 mov     dword ptr [eax+54h], 0
.text:00002298                 mov     ecx, [ebp+var_C]
.text:0000229B                 mov     edx, [ecx+0Ch]
.text:0000229E                 push    edx
.text:0000229F                 call    _update_specials_menu
.text:000022A4                 add     esp, 4
.text:000022A7                 push    9
.text:000022A9                 mov     eax, [ebp+var_C]
.text:000022AC                 mov     ecx, [eax+6Ch]
.text:000022AF                 push    ecx
.text:000022B0                 call    _conf_get_str
.text:000022B5                 add     esp, 8
.text:000022B8                 mov     [ebp+var_10], eax
.text:000022BB                 mov     edx, [ebp+var_10]
.text:000022BE                 movsx   eax, byte ptr [edx]
.text:000022C1                 test    eax, eax
.text:000022C3                 jz      short loc_230C
.text:000022C5                 mov     ecx, [ebp+arg_14]
.text:000022C8                 mov     edx, [ecx]
.text:000022CA                 push    edx
.text:000022CB                 call    _safefree
.text:000022D0                 add     esp, 4
.text:000022D3                 mov     eax, [ebp+var_10]
.text:000022D6                 push    eax
.text:000022D7                 call    _dupstr
.text:000022DC                 add     esp, 4
.text:000022DF                 mov     ecx, [ebp+arg_14]
.text:000022E2                 mov     [ecx], eax
.text:000022E4                 push    3Ah ; ':'
.text:000022E6                 mov     edx, [ebp+arg_14]
.text:000022E9                 mov     eax, [edx]
.text:000022EB                 push    eax
.text:000022EC                 call    _host_strrchr
.text:000022F1                 add     esp, 8
.text:000022F4                 mov     [ebp+var_24], eax
.text:000022F7                 cmp     [ebp+var_24], 0
.text:000022FB                 jz      short loc_230C
.text:000022FD                 mov     ecx, [ebp+var_24]
.text:00002300                 mov     byte ptr [ecx], 0
.text:00002303                 mov     edx, [ebp+var_24]
.text:00002306                 add     edx, 1
.text:00002309                 mov     [ebp+var_24], edx
.text:0000230C
.text:0000230C loc_230C:                               ; CODE XREF: _telnet_init+31Bj
.text:0000230C                                         ; _telnet_init+353j
.text:0000230C                 xor     eax, eax
.text:0000230E
.text:0000230E loc_230E:                               ; CODE XREF: _telnet_init+1A0j
.text:0000230E                                         ; _telnet_init+211j
.text:0000230E                 pop     edi
.text:0000230F                 pop     esi
.text:00002310                 add     esp, 2Ch
.text:00002313                 cmp     ebp, esp
.text:00002315                 call    __RTC_CheckEsp
.text:0000231A                 mov     esp, ebp
.text:0000231C                 pop     ebp
.text:0000231D                 retn
.text:0000231D _telnet_init    endp
.text:0000231D
.text:0000231D ; ---------------------------------------------------------------------------
.text:0000231E                 db 0Ah dup(0CCh)
.text:00002328
.text:00002328 ; =============== S U B R O U T I N E =======================================
.text:00002328
.text:00002328 ; Attributes: bp-based frame
.text:00002328
.text:00002328 _telnet_free    proc near               ; DATA XREF: .data:0000047Co
.text:00002328
.text:00002328 var_4           = dword ptr -4
.text:00002328 arg_0           = dword ptr  8
.text:00002328
.text:00002328                 push    ebp
.text:00002329                 mov     ebp, esp
.text:0000232B                 push    ecx
.text:0000232C                 push    esi
.text:0000232D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002334                 mov     eax, [ebp+arg_0]
.text:00002337                 mov     [ebp+var_4], eax
.text:0000233A                 mov     ecx, [ebp+var_4]
.text:0000233D                 mov     edx, [ecx+60h]
.text:00002340                 push    edx
.text:00002341                 call    _safefree
.text:00002346                 add     esp, 4
.text:00002349                 mov     eax, [ebp+var_4]
.text:0000234C                 cmp     dword ptr [eax+4], 0
.text:00002350                 jz      short loc_2372
.text:00002352                 mov     esi, esp
.text:00002354                 mov     ecx, [ebp+var_4]
.text:00002357                 mov     edx, [ecx+4]
.text:0000235A                 push    edx
.text:0000235B                 mov     eax, [ebp+var_4]
.text:0000235E                 mov     ecx, [eax+4]
.text:00002361                 mov     edx, [ecx]
.text:00002363                 mov     eax, [edx+4]
.text:00002366                 call    eax
.text:00002368                 add     esp, 4
.text:0000236B                 cmp     esi, esp
.text:0000236D                 call    __RTC_CheckEsp
.text:00002372
.text:00002372 loc_2372:                               ; CODE XREF: _telnet_free+28j
.text:00002372                 mov     ecx, [ebp+var_4]
.text:00002375                 cmp     dword ptr [ecx+70h], 0
.text:00002379                 jz      short loc_238A
.text:0000237B                 mov     edx, [ebp+var_4]
.text:0000237E                 mov     eax, [edx+70h]
.text:00002381                 push    eax
.text:00002382                 call    _pinger_free
.text:00002387                 add     esp, 4
.text:0000238A
.text:0000238A loc_238A:                               ; CODE XREF: _telnet_free+51j
.text:0000238A                 mov     ecx, [ebp+var_4]
.text:0000238D                 mov     edx, [ecx+6Ch]
.text:00002390                 push    edx
.text:00002391                 call    _conf_free
.text:00002396                 add     esp, 4
.text:00002399                 mov     eax, [ebp+var_4]
.text:0000239C                 push    eax
.text:0000239D                 call    _safefree
.text:000023A2                 add     esp, 4
.text:000023A5                 pop     esi
.text:000023A6                 add     esp, 4
.text:000023A9                 cmp     ebp, esp
.text:000023AB                 call    __RTC_CheckEsp
.text:000023B0                 mov     esp, ebp
.text:000023B2                 pop     ebp
.text:000023B3                 retn
.text:000023B3 _telnet_free    endp
.text:000023B3
.text:000023B3 ; ---------------------------------------------------------------------------
.text:000023B4                 align 8
.text:000023B8
.text:000023B8 ; =============== S U B R O U T I N E =======================================
.text:000023B8
.text:000023B8 ; Attributes: bp-based frame
.text:000023B8
.text:000023B8 _telnet_reconfig proc near              ; DATA XREF: .data:00000480o
.text:000023B8
.text:000023B8 var_4           = dword ptr -4
.text:000023B8 arg_0           = dword ptr  8
.text:000023B8 arg_4           = dword ptr  0Ch
.text:000023B8
.text:000023B8                 push    ebp
.text:000023B9                 mov     ebp, esp
.text:000023BB                 push    ecx
.text:000023BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023C3                 mov     eax, [ebp+arg_0]
.text:000023C6                 mov     [ebp+var_4], eax
.text:000023C9                 mov     ecx, [ebp+arg_4]
.text:000023CC                 push    ecx
.text:000023CD                 mov     edx, [ebp+var_4]
.text:000023D0                 mov     eax, [edx+6Ch]
.text:000023D3                 push    eax
.text:000023D4                 mov     ecx, [ebp+var_4]
.text:000023D7                 mov     edx, [ecx+70h]
.text:000023DA                 push    edx
.text:000023DB                 call    _pinger_reconfig
.text:000023E0                 add     esp, 0Ch
.text:000023E3                 mov     eax, [ebp+var_4]
.text:000023E6                 mov     ecx, [eax+6Ch]
.text:000023E9                 push    ecx
.text:000023EA                 call    _conf_free
.text:000023EF                 add     esp, 4
.text:000023F2                 mov     edx, [ebp+arg_4]
.text:000023F5                 push    edx
.text:000023F6                 call    _conf_copy
.text:000023FB                 add     esp, 4
.text:000023FE                 mov     ecx, [ebp+var_4]
.text:00002401                 mov     [ecx+6Ch], eax
.text:00002404                 add     esp, 4
.text:00002407                 cmp     ebp, esp
.text:00002409                 call    __RTC_CheckEsp
.text:0000240E                 mov     esp, ebp
.text:00002410                 pop     ebp
.text:00002411                 retn
.text:00002411 _telnet_reconfig endp
.text:00002411
.text:00002411 ; ---------------------------------------------------------------------------
.text:00002412                 align 8
.text:00002418
.text:00002418 ; =============== S U B R O U T I N E =======================================
.text:00002418
.text:00002418 ; Attributes: bp-based frame
.text:00002418
.text:00002418 _telnet_send    proc near               ; DATA XREF: .data:00000484o
.text:00002418
.text:00002418 var_14          = dword ptr -14h
.text:00002418 var_10          = dword ptr -10h
.text:00002418 var_C           = dword ptr -0Ch
.text:00002418 var_8           = dword ptr -8
.text:00002418 var_4           = dword ptr -4
.text:00002418 arg_0           = dword ptr  8
.text:00002418 arg_4           = dword ptr  0Ch
.text:00002418 arg_8           = dword ptr  10h
.text:00002418
.text:00002418                 push    ebp
.text:00002419                 mov     ebp, esp
.text:0000241B                 sub     esp, 14h
.text:0000241E                 push    esi
.text:0000241F                 mov     eax, 0CCCCCCCCh
.text:00002424                 mov     [ebp+var_14], eax
.text:00002427                 mov     [ebp+var_10], eax
.text:0000242A                 mov     [ebp+var_C], eax
.text:0000242D                 mov     [ebp+var_8], eax
.text:00002430                 mov     [ebp+var_4], eax
.text:00002433                 mov     eax, [ebp+arg_0]
.text:00002436                 mov     [ebp+var_4], eax
.text:00002439                 mov     ecx, [ebp+var_4]
.text:0000243C                 cmp     dword ptr [ecx+4], 0
.text:00002440                 jnz     short loc_2449
.text:00002442                 xor     eax, eax
.text:00002444                 jmp     loc_256E
.text:00002449 ; ---------------------------------------------------------------------------
.text:00002449
.text:00002449 loc_2449:                               ; CODE XREF: _telnet_send+28j
.text:00002449                 mov     edx, [ebp+arg_4]
.text:0000244C                 mov     [ebp+var_8], edx
.text:0000244F                 mov     eax, [ebp+arg_4]
.text:00002452                 add     eax, [ebp+arg_8]
.text:00002455                 mov     [ebp+var_C], eax
.text:00002458
.text:00002458 loc_2458:                               ; CODE XREF: _telnet_send:loc_2563j
.text:00002458                 mov     ecx, [ebp+var_8]
.text:0000245B                 cmp     ecx, [ebp+var_C]
.text:0000245E                 jnb     loc_2568
.text:00002464                 mov     edx, [ebp+var_8]
.text:00002467                 mov     [ebp+var_10], edx
.text:0000246A
.text:0000246A loc_246A:                               ; CODE XREF: _telnet_send+8Bj
.text:0000246A                 mov     eax, [ebp+var_8]
.text:0000246D                 cmp     eax, [ebp+var_C]
.text:00002470                 jnb     short loc_24A5
.text:00002472                 mov     ecx, [ebp+var_8]
.text:00002475                 movzx   edx, byte ptr [ecx]
.text:00002478                 cmp     edx, 0FFh
.text:0000247E                 jz      short loc_24A5
.text:00002480                 mov     eax, ds:dword_5B8
.text:00002485                 mov     ecx, [ebp+var_4]
.text:00002488                 cmp     dword ptr [ecx+eax*4+1Ch], 1
.text:0000248D                 jz      short loc_249A
.text:0000248F                 mov     edx, [ebp+var_8]
.text:00002492                 movzx   eax, byte ptr [edx]
.text:00002495                 cmp     eax, 0Dh
.text:00002498                 jz      short loc_24A5
.text:0000249A
.text:0000249A loc_249A:                               ; CODE XREF: _telnet_send+75j
.text:0000249A                 mov     ecx, [ebp+var_8]
.text:0000249D                 add     ecx, 1
.text:000024A0                 mov     [ebp+var_8], ecx
.text:000024A3                 jmp     short loc_246A
.text:000024A5 ; ---------------------------------------------------------------------------
.text:000024A5
.text:000024A5 loc_24A5:                               ; CODE XREF: _telnet_send+58j
.text:000024A5                                         ; _telnet_send+66j ...
.text:000024A5                 mov     edx, [ebp+var_8]
.text:000024A8                 sub     edx, [ebp+var_10]
.text:000024AB                 mov     esi, esp
.text:000024AD                 push    edx
.text:000024AE                 mov     eax, [ebp+var_10]
.text:000024B1                 push    eax
.text:000024B2                 mov     ecx, [ebp+var_4]
.text:000024B5                 mov     edx, [ecx+4]
.text:000024B8                 push    edx
.text:000024B9                 mov     eax, [ebp+var_4]
.text:000024BC                 mov     ecx, [eax+4]
.text:000024BF                 mov     edx, [ecx]
.text:000024C1                 mov     eax, [edx+8]
.text:000024C4                 call    eax
.text:000024C6                 add     esp, 0Ch
.text:000024C9                 cmp     esi, esp
.text:000024CB                 call    __RTC_CheckEsp
.text:000024D0                 mov     ecx, [ebp+var_4]
.text:000024D3                 mov     [ecx+50h], eax
.text:000024D6
.text:000024D6 loc_24D6:                               ; CODE XREF: _telnet_send+146j
.text:000024D6                 mov     edx, [ebp+var_8]
.text:000024D9                 cmp     edx, [ebp+var_C]
.text:000024DC                 jnb     loc_2563
.text:000024E2                 mov     eax, [ebp+var_8]
.text:000024E5                 movzx   ecx, byte ptr [eax]
.text:000024E8                 cmp     ecx, 0FFh
.text:000024EE                 jz      short loc_250B
.text:000024F0                 mov     edx, ds:dword_5B8
.text:000024F6                 mov     eax, [ebp+var_4]
.text:000024F9                 cmp     dword ptr [eax+edx*4+1Ch], 1
.text:000024FE                 jz      short loc_2563
.text:00002500                 mov     ecx, [ebp+var_8]
.text:00002503                 movzx   edx, byte ptr [ecx]
.text:00002506                 cmp     edx, 0Dh
.text:00002509                 jnz     short loc_2563
.text:0000250B
.text:0000250B loc_250B:                               ; CODE XREF: _telnet_send+D6j
.text:0000250B                 mov     eax, [ebp+var_8]
.text:0000250E                 movzx   ecx, byte ptr [eax]
.text:00002511                 cmp     ecx, 0FFh
.text:00002517                 jnz     short loc_2522
.text:00002519                 mov     [ebp+var_14], offset ?iac@?1??telnet_send@@9@9 ; `telnet_send'::`2'::iac
.text:00002520                 jmp     short loc_2529
.text:00002522 ; ---------------------------------------------------------------------------
.text:00002522
.text:00002522 loc_2522:                               ; CODE XREF: _telnet_send+FFj
.text:00002522                 mov     [ebp+var_14], offset ?cr@?1??telnet_send@@9@9 ; `telnet_send'::`2'::cr
.text:00002529
.text:00002529 loc_2529:                               ; CODE XREF: _telnet_send+108j
.text:00002529                 mov     esi, esp
.text:0000252B                 push    2
.text:0000252D                 mov     edx, [ebp+var_14]
.text:00002530                 push    edx
.text:00002531                 mov     eax, [ebp+var_4]
.text:00002534                 mov     ecx, [eax+4]
.text:00002537                 push    ecx
.text:00002538                 mov     edx, [ebp+var_4]
.text:0000253B                 mov     eax, [edx+4]
.text:0000253E                 mov     ecx, [eax]
.text:00002540                 mov     edx, [ecx+8]
.text:00002543                 call    edx
.text:00002545                 add     esp, 0Ch
.text:00002548                 cmp     esi, esp
.text:0000254A                 call    __RTC_CheckEsp
.text:0000254F                 mov     ecx, [ebp+var_4]
.text:00002552                 mov     [ecx+50h], eax
.text:00002555                 mov     edx, [ebp+var_8]
.text:00002558                 add     edx, 1
.text:0000255B                 mov     [ebp+var_8], edx
.text:0000255E                 jmp     loc_24D6
.text:00002563 ; ---------------------------------------------------------------------------
.text:00002563
.text:00002563 loc_2563:                               ; CODE XREF: _telnet_send+C4j
.text:00002563                                         ; _telnet_send+E6j ...
.text:00002563                 jmp     loc_2458
.text:00002568 ; ---------------------------------------------------------------------------
.text:00002568
.text:00002568 loc_2568:                               ; CODE XREF: _telnet_send+46j
.text:00002568                 mov     eax, [ebp+var_4]
.text:0000256B                 mov     eax, [eax+50h]
.text:0000256E
.text:0000256E loc_256E:                               ; CODE XREF: _telnet_send+2Cj
.text:0000256E                 pop     esi
.text:0000256F                 add     esp, 14h
.text:00002572                 cmp     ebp, esp
.text:00002574                 call    __RTC_CheckEsp
.text:00002579                 mov     esp, ebp
.text:0000257B                 pop     ebp
.text:0000257C                 retn
.text:0000257C _telnet_send    endp
.text:0000257C
.text:0000257C ; ---------------------------------------------------------------------------
.text:0000257D                 db 0Bh dup(0CCh)
.text:00002588
.text:00002588 ; =============== S U B R O U T I N E =======================================
.text:00002588
.text:00002588 ; Attributes: bp-based frame
.text:00002588
.text:00002588 _telnet_sendbuffer proc near            ; DATA XREF: .data:00000488o
.text:00002588
.text:00002588 var_4           = dword ptr -4
.text:00002588 arg_0           = dword ptr  8
.text:00002588
.text:00002588                 push    ebp
.text:00002589                 mov     ebp, esp
.text:0000258B                 push    ecx
.text:0000258C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002593                 mov     eax, [ebp+arg_0]
.text:00002596                 mov     [ebp+var_4], eax
.text:00002599                 mov     ecx, [ebp+var_4]
.text:0000259C                 mov     eax, [ecx+50h]
.text:0000259F                 mov     esp, ebp
.text:000025A1                 pop     ebp
.text:000025A2                 retn
.text:000025A2 _telnet_sendbuffer endp
.text:000025A2
.text:000025A2 ; ---------------------------------------------------------------------------
.text:000025A3                 align 8
.text:000025A8
.text:000025A8 ; =============== S U B R O U T I N E =======================================
.text:000025A8
.text:000025A8 ; Attributes: bp-based frame
.text:000025A8
.text:000025A8 _telnet_size    proc near               ; CODE XREF: _activate_option+31p
.text:000025A8                                         ; DATA XREF: .data:0000048Co
.text:000025A8
.text:000025A8 var_30          = dword ptr -30h
.text:000025A8 var_2C          = dword ptr -2Ch
.text:000025A8 var_25          = byte ptr -25h
.text:000025A8 var_24          = byte ptr -24h
.text:000025A8 var_8           = dword ptr -8
.text:000025A8 var_4           = dword ptr -4
.text:000025A8 arg_0           = dword ptr  8
.text:000025A8 arg_4           = dword ptr  0Ch
.text:000025A8 arg_8           = dword ptr  10h
.text:000025A8
.text:000025A8                 push    ebp
.text:000025A9                 mov     ebp, esp
.text:000025AB                 sub     esp, 30h
.text:000025AE                 push    esi
.text:000025AF                 push    edi
.text:000025B0                 lea     edi, [ebp+var_30]
.text:000025B3                 mov     ecx, 0Ch
.text:000025B8                 mov     eax, 0CCCCCCCCh
.text:000025BD                 rep stosd
.text:000025BF                 mov     eax, dword ptr ds:___security_cookie
.text:000025C4                 xor     eax, ebp
.text:000025C6                 mov     [ebp+var_4], eax
.text:000025C9                 mov     eax, [ebp+arg_0]
.text:000025CC                 mov     [ebp+var_8], eax
.text:000025CF                 mov     ecx, [ebp+var_8]
.text:000025D2                 mov     edx, [ebp+arg_4]
.text:000025D5                 mov     [ecx+14h], edx
.text:000025D8                 mov     eax, [ebp+var_8]
.text:000025DB                 mov     ecx, [ebp+arg_8]
.text:000025DE                 mov     [eax+18h], ecx
.text:000025E1                 mov     edx, [ebp+var_8]
.text:000025E4                 cmp     dword ptr [edx+4], 0
.text:000025E8                 jz      short loc_25F9
.text:000025EA                 mov     eax, ds:dword_4D8
.text:000025EF                 mov     ecx, [ebp+var_8]
.text:000025F2                 cmp     dword ptr [ecx+eax*4+1Ch], 1
.text:000025F7                 jz      short loc_25FE
.text:000025F9
.text:000025F9 loc_25F9:                               ; CODE XREF: _telnet_size+40j
.text:000025F9                 jmp     loc_27B1
.text:000025FE ; ---------------------------------------------------------------------------
.text:000025FE
.text:000025FE loc_25FE:                               ; CODE XREF: _telnet_size+4Fj
.text:000025FE                 mov     [ebp+var_2C], 0
.text:00002605                 mov     edx, [ebp+var_2C]
.text:00002608                 mov     [ebp+edx+var_24], 0FFh
.text:0000260D                 mov     eax, [ebp+var_2C]
.text:00002610                 add     eax, 1
.text:00002613                 mov     [ebp+var_2C], eax
.text:00002616                 mov     ecx, [ebp+var_2C]
.text:00002619                 mov     [ebp+ecx+var_24], 0FAh ; '·'
.text:0000261E                 mov     edx, [ebp+var_2C]
.text:00002621                 add     edx, 1
.text:00002624                 mov     [ebp+var_2C], edx
.text:00002627                 mov     eax, [ebp+var_2C]
.text:0000262A                 mov     [ebp+eax+var_24], 1Fh
.text:0000262F                 mov     ecx, [ebp+var_2C]
.text:00002632                 add     ecx, 1
.text:00002635                 mov     [ebp+var_2C], ecx
.text:00002638                 mov     edx, [ebp+var_8]
.text:0000263B                 mov     eax, [edx+14h]
.text:0000263E                 sar     eax, 8
.text:00002641                 mov     ecx, [ebp+var_2C]
.text:00002644                 mov     [ebp+ecx+var_24], al
.text:00002648                 mov     edx, [ebp+var_2C]
.text:0000264B                 add     edx, 1
.text:0000264E                 mov     [ebp+var_2C], edx
.text:00002651                 mov     eax, [ebp+var_2C]
.text:00002654                 movzx   ecx, [ebp+eax+var_25]
.text:00002659                 cmp     ecx, 0FFh
.text:0000265F                 jnz     short loc_2672
.text:00002661                 mov     edx, [ebp+var_2C]
.text:00002664                 mov     [ebp+edx+var_24], 0FFh
.text:00002669                 mov     eax, [ebp+var_2C]
.text:0000266C                 add     eax, 1
.text:0000266F                 mov     [ebp+var_2C], eax
.text:00002672
.text:00002672 loc_2672:                               ; CODE XREF: _telnet_size+B7j
.text:00002672                 mov     ecx, [ebp+var_8]
.text:00002675                 mov     edx, [ecx+14h]
.text:00002678                 and     edx, 0FFh
.text:0000267E                 mov     eax, [ebp+var_2C]
.text:00002681                 mov     [ebp+eax+var_24], dl
.text:00002685                 mov     ecx, [ebp+var_2C]
.text:00002688                 add     ecx, 1
.text:0000268B                 mov     [ebp+var_2C], ecx
.text:0000268E                 mov     edx, [ebp+var_2C]
.text:00002691                 movzx   eax, [ebp+edx+var_25]
.text:00002696                 cmp     eax, 0FFh
.text:0000269B                 jnz     short loc_26AE
.text:0000269D                 mov     ecx, [ebp+var_2C]
.text:000026A0                 mov     [ebp+ecx+var_24], 0FFh
.text:000026A5                 mov     edx, [ebp+var_2C]
.text:000026A8                 add     edx, 1
.text:000026AB                 mov     [ebp+var_2C], edx
.text:000026AE
.text:000026AE loc_26AE:                               ; CODE XREF: _telnet_size+F3j
.text:000026AE                 mov     eax, [ebp+var_8]
.text:000026B1                 mov     ecx, [eax+18h]
.text:000026B4                 sar     ecx, 8
.text:000026B7                 mov     edx, [ebp+var_2C]
.text:000026BA                 mov     [ebp+edx+var_24], cl
.text:000026BE                 mov     eax, [ebp+var_2C]
.text:000026C1                 add     eax, 1
.text:000026C4                 mov     [ebp+var_2C], eax
.text:000026C7                 mov     ecx, [ebp+var_2C]
.text:000026CA                 movzx   edx, [ebp+ecx+var_25]
.text:000026CF                 cmp     edx, 0FFh
.text:000026D5                 jnz     short loc_26E8
.text:000026D7                 mov     eax, [ebp+var_2C]
.text:000026DA                 mov     [ebp+eax+var_24], 0FFh
.text:000026DF                 mov     ecx, [ebp+var_2C]
.text:000026E2                 add     ecx, 1
.text:000026E5                 mov     [ebp+var_2C], ecx
.text:000026E8
.text:000026E8 loc_26E8:                               ; CODE XREF: _telnet_size+12Dj
.text:000026E8                 mov     edx, [ebp+var_8]
.text:000026EB                 mov     eax, [edx+18h]
.text:000026EE                 and     eax, 0FFh
.text:000026F3                 mov     ecx, [ebp+var_2C]
.text:000026F6                 mov     [ebp+ecx+var_24], al
.text:000026FA                 mov     edx, [ebp+var_2C]
.text:000026FD                 add     edx, 1
.text:00002700                 mov     [ebp+var_2C], edx
.text:00002703                 mov     eax, [ebp+var_2C]
.text:00002706                 movzx   ecx, [ebp+eax+var_25]
.text:0000270B                 cmp     ecx, 0FFh
.text:00002711                 jnz     short loc_2724
.text:00002713                 mov     edx, [ebp+var_2C]
.text:00002716                 mov     [ebp+edx+var_24], 0FFh
.text:0000271B                 mov     eax, [ebp+var_2C]
.text:0000271E                 add     eax, 1
.text:00002721                 mov     [ebp+var_2C], eax
.text:00002724
.text:00002724 loc_2724:                               ; CODE XREF: _telnet_size+169j
.text:00002724                 mov     ecx, [ebp+var_2C]
.text:00002727                 mov     [ebp+ecx+var_24], 0FFh
.text:0000272C                 mov     edx, [ebp+var_2C]
.text:0000272F                 add     edx, 1
.text:00002732                 mov     [ebp+var_2C], edx
.text:00002735                 mov     eax, [ebp+var_2C]
.text:00002738                 mov     [ebp+eax+var_24], 0F0h ; '='
.text:0000273D                 mov     ecx, [ebp+var_2C]
.text:00002740                 add     ecx, 1
.text:00002743                 mov     [ebp+var_2C], ecx
.text:00002746                 mov     esi, esp
.text:00002748                 mov     edx, [ebp+var_2C]
.text:0000274B                 push    edx
.text:0000274C                 lea     eax, [ebp+var_24]
.text:0000274F                 push    eax
.text:00002750                 mov     ecx, [ebp+var_8]
.text:00002753                 mov     edx, [ecx+4]
.text:00002756                 push    edx
.text:00002757                 mov     eax, [ebp+var_8]
.text:0000275A                 mov     ecx, [eax+4]
.text:0000275D                 mov     edx, [ecx]
.text:0000275F                 mov     eax, [edx+8]
.text:00002762                 call    eax
.text:00002764                 add     esp, 0Ch
.text:00002767                 cmp     esi, esp
.text:00002769                 call    __RTC_CheckEsp
.text:0000276E                 mov     ecx, [ebp+var_8]
.text:00002771                 mov     [ecx+50h], eax
.text:00002774                 mov     edx, [ebp+var_8]
.text:00002777                 mov     eax, [edx+18h]
.text:0000277A                 push    eax
.text:0000277B                 mov     ecx, [ebp+var_8]
.text:0000277E                 mov     edx, [ecx+14h]
.text:00002781                 push    edx
.text:00002782                 push    offset $SG86263 ; "client:\tSB NAWS %d,%d"
.text:00002787                 call    _dupprintf
.text:0000278C                 add     esp, 0Ch
.text:0000278F                 mov     [ebp+var_30], eax
.text:00002792                 mov     eax, [ebp+var_30]
.text:00002795                 push    eax
.text:00002796                 mov     ecx, [ebp+var_8]
.text:00002799                 mov     edx, [ecx+0Ch]
.text:0000279C                 push    edx
.text:0000279D                 call    _logevent
.text:000027A2                 add     esp, 8
.text:000027A5                 mov     eax, [ebp+var_30]
.text:000027A8                 push    eax
.text:000027A9                 call    _safefree
.text:000027AE                 add     esp, 4
.text:000027B1
.text:000027B1 loc_27B1:                               ; CODE XREF: _telnet_size:loc_25F9j
.text:000027B1                 push    edx
.text:000027B2                 mov     ecx, ebp
.text:000027B4                 push    eax
.text:000027B5                 lea     edx, $LN11_1
.text:000027BB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000027C0                 pop     eax
.text:000027C1                 pop     edx
.text:000027C2                 pop     edi
.text:000027C3                 pop     esi
.text:000027C4                 mov     ecx, [ebp+var_4]
.text:000027C7                 xor     ecx, ebp
.text:000027C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000027CE                 add     esp, 30h
.text:000027D1                 cmp     ebp, esp
.text:000027D3                 call    __RTC_CheckEsp
.text:000027D8                 mov     esp, ebp
.text:000027DA                 pop     ebp
.text:000027DB                 retn
.text:000027DB _telnet_size    endp
.text:000027DB
.text:000027DB ; ---------------------------------------------------------------------------
.text:000027DC $LN11_1         dd 1                    ; DATA XREF: _telnet_size+20Do
.text:000027E0                 dd offset $LN10_1
.text:000027E4 $LN10_1         dd 0FFFFFFDCh, 18h      ; DATA XREF: .text:000027E0o
.text:000027EC                 dd offset $LN9_1
.text:000027F0 $LN9_1          dd 0CCCC0062h, 0CCCCCCCCh ; DATA XREF: .text:000027ECo
.text:000027F8
.text:000027F8 ; =============== S U B R O U T I N E =======================================
.text:000027F8
.text:000027F8 ; Attributes: bp-based frame
.text:000027F8
.text:000027F8 _telnet_special proc near               ; DATA XREF: .data:00000490o
.text:000027F8
.text:000027F8 var_14          = dword ptr -14h
.text:000027F8 var_10          = dword ptr -10h
.text:000027F8 var_C           = dword ptr -0Ch
.text:000027F8 var_8           = dword ptr -8
.text:000027F8 var_4           = dword ptr -4
.text:000027F8 arg_0           = dword ptr  8
.text:000027F8 arg_4           = dword ptr  0Ch
.text:000027F8
.text:000027F8                 push    ebp
.text:000027F9                 mov     ebp, esp
.text:000027FB                 sub     esp, 14h
.text:000027FE                 push    esi
.text:000027FF                 mov     eax, 0CCCCCCCCh
.text:00002804                 mov     [ebp+var_14], eax
.text:00002807                 mov     [ebp+var_10], eax
.text:0000280A                 mov     [ebp+var_C], eax
.text:0000280D                 mov     [ebp+var_8], eax
.text:00002810                 mov     [ebp+var_4], eax
.text:00002813                 mov     eax, [ebp+arg_0]
.text:00002816                 mov     [ebp+var_4], eax
.text:00002819                 mov     ecx, [ebp+var_4]
.text:0000281C                 cmp     dword ptr [ecx+4], 0
.text:00002820                 jnz     short loc_2827
.text:00002822                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002827 ; ---------------------------------------------------------------------------
.text:00002827
.text:00002827 loc_2827:                               ; CODE XREF: _telnet_special+28j
.text:00002827                 mov     byte ptr [ebp+var_C], 0FFh
.text:0000282B                 mov     edx, [ebp+arg_4]
.text:0000282E                 mov     [ebp+var_14], edx
.text:00002831                 cmp     [ebp+var_14], 10h ; switch 17 cases
.text:00002835                 ja      loc_2C59        ; jumptable 0000283E default case
.text:0000283B                 mov     eax, [ebp+var_14]
.text:0000283E                 jmp     ds:$LN33_0[eax*4] ; switch jump
.text:00002845 ; ---------------------------------------------------------------------------
.text:00002845
.text:00002845 $LN24_0:                                ; CODE XREF: _telnet_special+46j
.text:00002845                                         ; DATA XREF: .text:$LN33_0o
.text:00002845                 mov     byte ptr [ebp+var_C+1], 0F6h ; '÷' ; jumptable 0000283E case 0
.text:00002849                 mov     esi, esp
.text:0000284B                 push    2
.text:0000284D                 lea     ecx, [ebp+var_C]
.text:00002850                 push    ecx
.text:00002851                 mov     edx, [ebp+var_4]
.text:00002854                 mov     eax, [edx+4]
.text:00002857                 push    eax
.text:00002858                 mov     ecx, [ebp+var_4]
.text:0000285B                 mov     edx, [ecx+4]
.text:0000285E                 mov     eax, [edx]
.text:00002860                 mov     ecx, [eax+8]
.text:00002863                 call    ecx
.text:00002865                 add     esp, 0Ch
.text:00002868                 cmp     esi, esp
.text:0000286A                 call    __RTC_CheckEsp
.text:0000286F                 mov     edx, [ebp+var_4]
.text:00002872                 mov     [edx+50h], eax
.text:00002875                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:0000287A ; ---------------------------------------------------------------------------
.text:0000287A
.text:0000287A $LN23_0:                                ; CODE XREF: _telnet_special+46j
.text:0000287A                                         ; DATA XREF: .text:$LN33_0o
.text:0000287A                 mov     byte ptr [ebp+var_C+1], 0F3h ; '=' ; jumptable 0000283E case 1
.text:0000287E                 mov     esi, esp
.text:00002880                 push    2
.text:00002882                 lea     eax, [ebp+var_C]
.text:00002885                 push    eax
.text:00002886                 mov     ecx, [ebp+var_4]
.text:00002889                 mov     edx, [ecx+4]
.text:0000288C                 push    edx
.text:0000288D                 mov     eax, [ebp+var_4]
.text:00002890                 mov     ecx, [eax+4]
.text:00002893                 mov     edx, [ecx]
.text:00002895                 mov     eax, [edx+8]
.text:00002898                 call    eax
.text:0000289A                 add     esp, 0Ch
.text:0000289D                 cmp     esi, esp
.text:0000289F                 call    __RTC_CheckEsp
.text:000028A4                 mov     ecx, [ebp+var_4]
.text:000028A7                 mov     [ecx+50h], eax
.text:000028AA                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:000028AF ; ---------------------------------------------------------------------------
.text:000028AF
.text:000028AF $LN22_0:                                ; CODE XREF: _telnet_special+46j
.text:000028AF                                         ; DATA XREF: .text:$LN33_0o
.text:000028AF                 mov     byte ptr [ebp+var_C+1], 0F7h ; '˜' ; jumptable 0000283E case 3
.text:000028B3                 mov     esi, esp
.text:000028B5                 push    2
.text:000028B7                 lea     edx, [ebp+var_C]
.text:000028BA                 push    edx
.text:000028BB                 mov     eax, [ebp+var_4]
.text:000028BE                 mov     ecx, [eax+4]
.text:000028C1                 push    ecx
.text:000028C2                 mov     edx, [ebp+var_4]
.text:000028C5                 mov     eax, [edx+4]
.text:000028C8                 mov     ecx, [eax]
.text:000028CA                 mov     edx, [ecx+8]
.text:000028CD                 call    edx
.text:000028CF                 add     esp, 0Ch
.text:000028D2                 cmp     esi, esp
.text:000028D4                 call    __RTC_CheckEsp
.text:000028D9                 mov     ecx, [ebp+var_4]
.text:000028DC                 mov     [ecx+50h], eax
.text:000028DF                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:000028E4 ; ---------------------------------------------------------------------------
.text:000028E4
.text:000028E4 $LN21_0:                                ; CODE XREF: _telnet_special+46j
.text:000028E4                                         ; DATA XREF: .text:$LN33_0o
.text:000028E4                 mov     byte ptr [ebp+var_C+1], 0F8h ; '°' ; jumptable 0000283E case 4
.text:000028E8                 mov     esi, esp
.text:000028EA                 push    2
.text:000028EC                 lea     edx, [ebp+var_C]
.text:000028EF                 push    edx
.text:000028F0                 mov     eax, [ebp+var_4]
.text:000028F3                 mov     ecx, [eax+4]
.text:000028F6                 push    ecx
.text:000028F7                 mov     edx, [ebp+var_4]
.text:000028FA                 mov     eax, [edx+4]
.text:000028FD                 mov     ecx, [eax]
.text:000028FF                 mov     edx, [ecx+8]
.text:00002902                 call    edx
.text:00002904                 add     esp, 0Ch
.text:00002907                 cmp     esi, esp
.text:00002909                 call    __RTC_CheckEsp
.text:0000290E                 mov     ecx, [ebp+var_4]
.text:00002911                 mov     [ecx+50h], eax
.text:00002914                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002919 ; ---------------------------------------------------------------------------
.text:00002919
.text:00002919 $LN20_0:                                ; CODE XREF: _telnet_special+46j
.text:00002919                                         ; DATA XREF: .text:$LN33_0o
.text:00002919                 mov     byte ptr [ebp+var_C+1], 0F9h ; '·' ; jumptable 0000283E case 5
.text:0000291D                 mov     esi, esp
.text:0000291F                 push    2
.text:00002921                 lea     edx, [ebp+var_C]
.text:00002924                 push    edx
.text:00002925                 mov     eax, [ebp+var_4]
.text:00002928                 mov     ecx, [eax+4]
.text:0000292B                 push    ecx
.text:0000292C                 mov     edx, [ebp+var_4]
.text:0000292F                 mov     eax, [edx+4]
.text:00002932                 mov     ecx, [eax]
.text:00002934                 mov     edx, [ecx+8]
.text:00002937                 call    edx
.text:00002939                 add     esp, 0Ch
.text:0000293C                 cmp     esi, esp
.text:0000293E                 call    __RTC_CheckEsp
.text:00002943                 mov     ecx, [ebp+var_4]
.text:00002946                 mov     [ecx+50h], eax
.text:00002949                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:0000294E ; ---------------------------------------------------------------------------
.text:0000294E
.text:0000294E $LN19_0:                                ; CODE XREF: _telnet_special+46j
.text:0000294E                                         ; DATA XREF: .text:$LN33_0o
.text:0000294E                 mov     byte ptr [ebp+var_C+1], 0F1h ; '±' ; jumptable 0000283E case 6
.text:00002952                 mov     esi, esp
.text:00002954                 push    2
.text:00002956                 lea     edx, [ebp+var_C]
.text:00002959                 push    edx
.text:0000295A                 mov     eax, [ebp+var_4]
.text:0000295D                 mov     ecx, [eax+4]
.text:00002960                 push    ecx
.text:00002961                 mov     edx, [ebp+var_4]
.text:00002964                 mov     eax, [edx+4]
.text:00002967                 mov     ecx, [eax]
.text:00002969                 mov     edx, [ecx+8]
.text:0000296C                 call    edx
.text:0000296E                 add     esp, 0Ch
.text:00002971                 cmp     esi, esp
.text:00002973                 call    __RTC_CheckEsp
.text:00002978                 mov     ecx, [ebp+var_4]
.text:0000297B                 mov     [ecx+50h], eax
.text:0000297E                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002983 ; ---------------------------------------------------------------------------
.text:00002983
.text:00002983 $LN18_0:                                ; CODE XREF: _telnet_special+46j
.text:00002983                                         ; DATA XREF: .text:$LN33_0o
.text:00002983                 mov     byte ptr [ebp+var_C+1], 0EEh ; 'e' ; jumptable 0000283E case 7
.text:00002987                 mov     esi, esp
.text:00002989                 push    2
.text:0000298B                 lea     edx, [ebp+var_C]
.text:0000298E                 push    edx
.text:0000298F                 mov     eax, [ebp+var_4]
.text:00002992                 mov     ecx, [eax+4]
.text:00002995                 push    ecx
.text:00002996                 mov     edx, [ebp+var_4]
.text:00002999                 mov     eax, [edx+4]
.text:0000299C                 mov     ecx, [eax]
.text:0000299E                 mov     edx, [ecx+8]
.text:000029A1                 call    edx
.text:000029A3                 add     esp, 0Ch
.text:000029A6                 cmp     esi, esp
.text:000029A8                 call    __RTC_CheckEsp
.text:000029AD                 mov     ecx, [ebp+var_4]
.text:000029B0                 mov     [ecx+50h], eax
.text:000029B3                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:000029B8 ; ---------------------------------------------------------------------------
.text:000029B8
.text:000029B8 $LN17_0:                                ; CODE XREF: _telnet_special+46j
.text:000029B8                                         ; DATA XREF: .text:$LN33_0o
.text:000029B8                 mov     byte ptr [ebp+var_C+1], 0F5h ; ')' ; jumptable 0000283E case 8
.text:000029BC                 mov     esi, esp
.text:000029BE                 push    2
.text:000029C0                 lea     edx, [ebp+var_C]
.text:000029C3                 push    edx
.text:000029C4                 mov     eax, [ebp+var_4]
.text:000029C7                 mov     ecx, [eax+4]
.text:000029CA                 push    ecx
.text:000029CB                 mov     edx, [ebp+var_4]
.text:000029CE                 mov     eax, [edx+4]
.text:000029D1                 mov     ecx, [eax]
.text:000029D3                 mov     edx, [ecx+8]
.text:000029D6                 call    edx
.text:000029D8                 add     esp, 0Ch
.text:000029DB                 cmp     esi, esp
.text:000029DD                 call    __RTC_CheckEsp
.text:000029E2                 mov     ecx, [ebp+var_4]
.text:000029E5                 mov     [ecx+50h], eax
.text:000029E8                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:000029ED ; ---------------------------------------------------------------------------
.text:000029ED
.text:000029ED $LN16_0:                                ; CODE XREF: _telnet_special+46j
.text:000029ED                                         ; DATA XREF: .text:$LN33_0o
.text:000029ED                 mov     byte ptr [ebp+var_C+1], 0F4h ; '(' ; jumptable 0000283E case 9
.text:000029F1                 mov     esi, esp
.text:000029F3                 push    2
.text:000029F5                 lea     edx, [ebp+var_C]
.text:000029F8                 push    edx
.text:000029F9                 mov     eax, [ebp+var_4]
.text:000029FC                 mov     ecx, [eax+4]
.text:000029FF                 push    ecx
.text:00002A00                 mov     edx, [ebp+var_4]
.text:00002A03                 mov     eax, [edx+4]
.text:00002A06                 mov     ecx, [eax]
.text:00002A08                 mov     edx, [ecx+8]
.text:00002A0B                 call    edx
.text:00002A0D                 add     esp, 0Ch
.text:00002A10                 cmp     esi, esp
.text:00002A12                 call    __RTC_CheckEsp
.text:00002A17                 mov     ecx, [ebp+var_4]
.text:00002A1A                 mov     [ecx+50h], eax
.text:00002A1D                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002A22 ; ---------------------------------------------------------------------------
.text:00002A22
.text:00002A22 $LN15_0:                                ; CODE XREF: _telnet_special+46j
.text:00002A22                                         ; DATA XREF: .text:$LN33_0o
.text:00002A22                 mov     byte ptr [ebp+var_C+1], 0EDh ; 'f' ; jumptable 0000283E case 10
.text:00002A26                 mov     esi, esp
.text:00002A28                 push    2
.text:00002A2A                 lea     edx, [ebp+var_C]
.text:00002A2D                 push    edx
.text:00002A2E                 mov     eax, [ebp+var_4]
.text:00002A31                 mov     ecx, [eax+4]
.text:00002A34                 push    ecx
.text:00002A35                 mov     edx, [ebp+var_4]
.text:00002A38                 mov     eax, [edx+4]
.text:00002A3B                 mov     ecx, [eax]
.text:00002A3D                 mov     edx, [ecx+8]
.text:00002A40                 call    edx
.text:00002A42                 add     esp, 0Ch
.text:00002A45                 cmp     esi, esp
.text:00002A47                 call    __RTC_CheckEsp
.text:00002A4C                 mov     ecx, [ebp+var_4]
.text:00002A4F                 mov     [ecx+50h], eax
.text:00002A52                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002A57 ; ---------------------------------------------------------------------------
.text:00002A57
.text:00002A57 $LN14_0:                                ; CODE XREF: _telnet_special+46j
.text:00002A57                                         ; DATA XREF: .text:$LN33_0o
.text:00002A57                 mov     byte ptr [ebp+var_C+1], 0EFh ; 'n' ; jumptable 0000283E case 11
.text:00002A5B                 mov     esi, esp
.text:00002A5D                 push    2
.text:00002A5F                 lea     edx, [ebp+var_C]
.text:00002A62                 push    edx
.text:00002A63                 mov     eax, [ebp+var_4]
.text:00002A66                 mov     ecx, [eax+4]
.text:00002A69                 push    ecx
.text:00002A6A                 mov     edx, [ebp+var_4]
.text:00002A6D                 mov     eax, [edx+4]
.text:00002A70                 mov     ecx, [eax]
.text:00002A72                 mov     edx, [ecx+8]
.text:00002A75                 call    edx
.text:00002A77                 add     esp, 0Ch
.text:00002A7A                 cmp     esi, esp
.text:00002A7C                 call    __RTC_CheckEsp
.text:00002A81                 mov     ecx, [ebp+var_4]
.text:00002A84                 mov     [ecx+50h], eax
.text:00002A87                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002A8C ; ---------------------------------------------------------------------------
.text:00002A8C
.text:00002A8C $LN13_1:                                ; CODE XREF: _telnet_special+46j
.text:00002A8C                                         ; DATA XREF: .text:$LN33_0o
.text:00002A8C                 mov     byte ptr [ebp+var_C+1], 0ECh ; '8' ; jumptable 0000283E case 12
.text:00002A90                 mov     esi, esp
.text:00002A92                 push    2
.text:00002A94                 lea     edx, [ebp+var_C]
.text:00002A97                 push    edx
.text:00002A98                 mov     eax, [ebp+var_4]
.text:00002A9B                 mov     ecx, [eax+4]
.text:00002A9E                 push    ecx
.text:00002A9F                 mov     edx, [ebp+var_4]
.text:00002AA2                 mov     eax, [edx+4]
.text:00002AA5                 mov     ecx, [eax]
.text:00002AA7                 mov     edx, [ecx+8]
.text:00002AAA                 call    edx
.text:00002AAC                 add     esp, 0Ch
.text:00002AAF                 cmp     esi, esp
.text:00002AB1                 call    __RTC_CheckEsp
.text:00002AB6                 mov     ecx, [ebp+var_4]
.text:00002AB9                 mov     [ecx+50h], eax
.text:00002ABC                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002AC1 ; ---------------------------------------------------------------------------
.text:00002AC1
.text:00002AC1 $LN12_1:                                ; CODE XREF: _telnet_special+46j
.text:00002AC1                                         ; DATA XREF: .text:$LN33_0o
.text:00002AC1                 mov     edx, ds:dword_5B8 ; jumptable 0000283E case 16
.text:00002AC7                 mov     eax, [ebp+var_4]
.text:00002ACA                 cmp     dword ptr [eax+edx*4+1Ch], 1
.text:00002ACF                 jnz     short loc_2B00
.text:00002AD1                 mov     esi, esp
.text:00002AD3                 push    1
.text:00002AD5                 push    offset $SG86305 ; "\r"
.text:00002ADA                 mov     ecx, [ebp+var_4]
.text:00002ADD                 mov     edx, [ecx+4]
.text:00002AE0                 push    edx
.text:00002AE1                 mov     eax, [ebp+var_4]
.text:00002AE4                 mov     ecx, [eax+4]
.text:00002AE7                 mov     edx, [ecx]
.text:00002AE9                 mov     eax, [edx+8]
.text:00002AEC                 call    eax
.text:00002AEE                 add     esp, 0Ch
.text:00002AF1                 cmp     esi, esp
.text:00002AF3                 call    __RTC_CheckEsp
.text:00002AF8                 mov     ecx, [ebp+var_4]
.text:00002AFB                 mov     [ecx+50h], eax
.text:00002AFE                 jmp     short loc_2B2D
.text:00002B00 ; ---------------------------------------------------------------------------
.text:00002B00
.text:00002B00 loc_2B00:                               ; CODE XREF: _telnet_special+2D7j
.text:00002B00                 mov     esi, esp
.text:00002B02                 push    2
.text:00002B04                 push    offset $SG86307
.text:00002B09                 mov     edx, [ebp+var_4]
.text:00002B0C                 mov     eax, [edx+4]
.text:00002B0F                 push    eax
.text:00002B10                 mov     ecx, [ebp+var_4]
.text:00002B13                 mov     edx, [ecx+4]
.text:00002B16                 mov     eax, [edx]
.text:00002B18                 mov     ecx, [eax+8]
.text:00002B1B                 call    ecx
.text:00002B1D                 add     esp, 0Ch
.text:00002B20                 cmp     esi, esp
.text:00002B22                 call    __RTC_CheckEsp
.text:00002B27                 mov     edx, [ebp+var_4]
.text:00002B2A                 mov     [edx+50h], eax
.text:00002B2D
.text:00002B2D loc_2B2D:                               ; CODE XREF: _telnet_special+306j
.text:00002B2D                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002B32 ; ---------------------------------------------------------------------------
.text:00002B32
.text:00002B32 $LN9_2:                                 ; CODE XREF: _telnet_special+46j
.text:00002B32                                         ; DATA XREF: .text:$LN33_0o
.text:00002B32                 mov     byte ptr [ebp+var_C+1], 0F2h ; '=' ; jumptable 0000283E case 2
.text:00002B36                 mov     esi, esp
.text:00002B38                 push    1
.text:00002B3A                 lea     eax, [ebp+var_C]
.text:00002B3D                 push    eax
.text:00002B3E                 mov     ecx, [ebp+var_4]
.text:00002B41                 mov     edx, [ecx+4]
.text:00002B44                 push    edx
.text:00002B45                 mov     eax, [ebp+var_4]
.text:00002B48                 mov     ecx, [eax+4]
.text:00002B4B                 mov     edx, [ecx]
.text:00002B4D                 mov     eax, [edx+8]
.text:00002B50                 call    eax
.text:00002B52                 add     esp, 0Ch
.text:00002B55                 cmp     esi, esp
.text:00002B57                 call    __RTC_CheckEsp
.text:00002B5C                 mov     ecx, [ebp+var_4]
.text:00002B5F                 mov     [ecx+50h], eax
.text:00002B62                 mov     esi, esp
.text:00002B64                 push    1
.text:00002B66                 lea     edx, [ebp+var_C+1]
.text:00002B69                 push    edx
.text:00002B6A                 mov     eax, [ebp+var_4]
.text:00002B6D                 mov     ecx, [eax+4]
.text:00002B70                 push    ecx
.text:00002B71                 mov     edx, [ebp+var_4]
.text:00002B74                 mov     eax, [edx+4]
.text:00002B77                 mov     ecx, [eax]
.text:00002B79                 mov     edx, [ecx+0Ch]
.text:00002B7C                 call    edx
.text:00002B7E                 add     esp, 0Ch
.text:00002B81                 cmp     esi, esp
.text:00002B83                 call    __RTC_CheckEsp
.text:00002B88                 mov     ecx, [ebp+var_4]
.text:00002B8B                 mov     [ecx+50h], eax
.text:00002B8E                 jmp     loc_2C59        ; jumptable 0000283E default case
.text:00002B93 ; ---------------------------------------------------------------------------
.text:00002B93
.text:00002B93 $LN8_1:                                 ; CODE XREF: _telnet_special+46j
.text:00002B93                                         ; DATA XREF: .text:$LN33_0o
.text:00002B93                 mov     edx, ds:dword_564 ; jumptable 0000283E case 14
.text:00002B99                 mov     eax, [ebp+var_4]
.text:00002B9C                 cmp     dword ptr [eax+edx*4+1Ch], 2
.text:00002BA1                 jz      short loc_2BB3
.text:00002BA3                 mov     ecx, ds:dword_564
.text:00002BA9                 mov     edx, [ebp+var_4]
.text:00002BAC                 cmp     dword ptr [edx+ecx*4+1Ch], 3
.text:00002BB1                 jnz     short loc_2BDC
.text:00002BB3
.text:00002BB3 loc_2BB3:                               ; CODE XREF: _telnet_special+3A9j
.text:00002BB3                 mov     eax, ds:dword_564
.text:00002BB8                 mov     ecx, [ebp+var_4]
.text:00002BBB                 mov     dword ptr [ecx+eax*4+1Ch], 0
.text:00002BC3                 mov     edx, ds:dword_560
.text:00002BC9                 push    edx
.text:00002BCA                 mov     eax, ds:_o_echo
.text:00002BCF                 push    eax
.text:00002BD0                 mov     ecx, [ebp+var_4]
.text:00002BD3                 push    ecx
.text:00002BD4                 call    _send_opt
.text:00002BD9                 add     esp, 0Ch
.text:00002BDC
.text:00002BDC loc_2BDC:                               ; CODE XREF: _telnet_special+3B9j
.text:00002BDC                 jmp     short loc_2C59  ; jumptable 0000283E default case
.text:00002BDE ; ---------------------------------------------------------------------------
.text:00002BDE
.text:00002BDE $LN5_2:                                 ; CODE XREF: _telnet_special+46j
.text:00002BDE                                         ; DATA XREF: .text:$LN33_0o
.text:00002BDE                 mov     edx, ds:dword_564 ; jumptable 0000283E case 13
.text:00002BE4                 mov     eax, [ebp+var_4]
.text:00002BE7                 cmp     dword ptr [eax+edx*4+1Ch], 1
.text:00002BEC                 jnz     short loc_2C18
.text:00002BEE                 mov     ecx, ds:dword_564
.text:00002BF4                 mov     edx, [ebp+var_4]
.text:00002BF7                 mov     dword ptr [edx+ecx*4+1Ch], 0
.text:00002BFF                 mov     eax, ds:dword_560
.text:00002C04                 push    eax
.text:00002C05                 mov     ecx, ds:dword_554
.text:00002C0B                 push    ecx
.text:00002C0C                 mov     edx, [ebp+var_4]
.text:00002C0F                 push    edx
.text:00002C10                 call    _send_opt
.text:00002C15                 add     esp, 0Ch
.text:00002C18
.text:00002C18 loc_2C18:                               ; CODE XREF: _telnet_special+3F4j
.text:00002C18                 jmp     short loc_2C59  ; jumptable 0000283E default case
.text:00002C1A ; ---------------------------------------------------------------------------
.text:00002C1A
.text:00002C1A $LN3_1:                                 ; CODE XREF: _telnet_special+46j
.text:00002C1A                                         ; DATA XREF: .text:$LN33_0o
.text:00002C1A                 mov     eax, ds:dword_59C ; jumptable 0000283E case 15
.text:00002C1F                 mov     ecx, [ebp+var_4]
.text:00002C22                 cmp     dword ptr [ecx+eax*4+1Ch], 1
.text:00002C27                 jnz     short loc_2C59  ; jumptable 0000283E default case
.text:00002C29                 mov     byte ptr [ebp+var_C+1], 0F1h ; '±'
.text:00002C2D                 mov     esi, esp
.text:00002C2F                 push    2
.text:00002C31                 lea     edx, [ebp+var_C]
.text:00002C34                 push    edx
.text:00002C35                 mov     eax, [ebp+var_4]
.text:00002C38                 mov     ecx, [eax+4]
.text:00002C3B                 push    ecx
.text:00002C3C                 mov     edx, [ebp+var_4]
.text:00002C3F                 mov     eax, [edx+4]
.text:00002C42                 mov     ecx, [eax]
.text:00002C44                 mov     edx, [ecx+8]
.text:00002C47                 call    edx
.text:00002C49                 add     esp, 0Ch
.text:00002C4C                 cmp     esi, esp
.text:00002C4E                 call    __RTC_CheckEsp
.text:00002C53                 mov     ecx, [ebp+var_4]
.text:00002C56                 mov     [ecx+50h], eax
.text:00002C59
.text:00002C59 loc_2C59:                               ; CODE XREF: _telnet_special+2Aj
.text:00002C59                                         ; _telnet_special+3Dj ...
.text:00002C59                 push    edx             ; jumptable 0000283E default case
.text:00002C5A                 mov     ecx, ebp
.text:00002C5C                 push    eax
.text:00002C5D                 lea     edx, $LN32_0
.text:00002C63                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002C68                 pop     eax
.text:00002C69                 pop     edx
.text:00002C6A                 pop     esi
.text:00002C6B                 add     esp, 14h
.text:00002C6E                 cmp     ebp, esp
.text:00002C70                 call    __RTC_CheckEsp
.text:00002C75                 mov     esp, ebp
.text:00002C77                 pop     ebp
.text:00002C78                 retn
.text:00002C78 _telnet_special endp
.text:00002C78
.text:00002C78 ; ---------------------------------------------------------------------------
.text:00002C79                 align 4
.text:00002C7C $LN32_0         dd 1                    ; DATA XREF: _telnet_special+465o
.text:00002C80                 dd offset $LN31_1
.text:00002C84 $LN31_1         dd 0FFFFFFF4h, 2        ; DATA XREF: .text:00002C80o
.text:00002C8C                 dd offset $LN30_0
.text:00002C90 $LN30_0         dd 0FF8B0062h           ; DATA XREF: .text:00002C8Co
.text:00002C94 $LN33_0         dd offset $LN24_0       ; DATA XREF: _telnet_special+46r
.text:00002C94                 dd offset $LN23_0       ; jump table for switch statement
.text:00002C94                 dd offset $LN9_2
.text:00002C94                 dd offset $LN22_0
.text:00002C94                 dd offset $LN21_0
.text:00002C94                 dd offset $LN20_0
.text:00002C94                 dd offset $LN19_0
.text:00002C94                 dd offset $LN18_0
.text:00002C94                 dd offset $LN17_0
.text:00002C94                 dd offset $LN16_0
.text:00002C94                 dd offset $LN15_0
.text:00002C94                 dd offset $LN14_0
.text:00002C94                 dd offset $LN13_1
.text:00002C94                 dd offset $LN5_2
.text:00002C94                 dd offset $LN8_1
.text:00002C94                 dd offset $LN3_1
.text:00002C94                 dd offset $LN12_1
.text:00002CD8
.text:00002CD8 ; =============== S U B R O U T I N E =======================================
.text:00002CD8
.text:00002CD8 ; Attributes: bp-based frame
.text:00002CD8
.text:00002CD8 _telnet_get_specials proc near          ; DATA XREF: .data:00000494o
.text:00002CD8                 push    ebp
.text:00002CD9                 mov     ebp, esp
.text:00002CDB                 mov     eax, offset ?specials@?1??telnet_get_specials@@9@9 ; `telnet_get_specials'::`2'::specials
.text:00002CE0                 pop     ebp
.text:00002CE1                 retn
.text:00002CE1 _telnet_get_specials endp
.text:00002CE1
.text:00002CE1 ; ---------------------------------------------------------------------------
.text:00002CE2                 align 8
.text:00002CE8
.text:00002CE8 ; =============== S U B R O U T I N E =======================================
.text:00002CE8
.text:00002CE8 ; Attributes: bp-based frame
.text:00002CE8
.text:00002CE8 _telnet_connected proc near             ; DATA XREF: .data:00000498o
.text:00002CE8
.text:00002CE8 var_4           = dword ptr -4
.text:00002CE8 arg_0           = dword ptr  8
.text:00002CE8
.text:00002CE8                 push    ebp
.text:00002CE9                 mov     ebp, esp
.text:00002CEB                 push    ecx
.text:00002CEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CF3                 mov     eax, [ebp+arg_0]
.text:00002CF6                 mov     [ebp+var_4], eax
.text:00002CF9                 mov     ecx, [ebp+var_4]
.text:00002CFC                 xor     eax, eax
.text:00002CFE                 cmp     dword ptr [ecx+4], 0
.text:00002D02                 setnz   al
.text:00002D05                 mov     esp, ebp
.text:00002D07                 pop     ebp
.text:00002D08                 retn
.text:00002D08 _telnet_connected endp
.text:00002D08
.text:00002D08 ; ---------------------------------------------------------------------------
.text:00002D09                 db 0Fh dup(0CCh)
.text:00002D18
.text:00002D18 ; =============== S U B R O U T I N E =======================================
.text:00002D18
.text:00002D18 ; Attributes: bp-based frame
.text:00002D18
.text:00002D18 _telnet_sendok  proc near               ; DATA XREF: .data:000004A0o
.text:00002D18                 push    ebp
.text:00002D19                 mov     ebp, esp
.text:00002D1B                 mov     eax, 1
.text:00002D20                 pop     ebp
.text:00002D21                 retn
.text:00002D21 _telnet_sendok  endp
.text:00002D21
.text:00002D21 ; ---------------------------------------------------------------------------
.text:00002D22                 align 8
.text:00002D28
.text:00002D28 ; =============== S U B R O U T I N E =======================================
.text:00002D28
.text:00002D28 ; Attributes: bp-based frame
.text:00002D28
.text:00002D28 _telnet_unthrottle proc near            ; DATA XREF: .data:000004B0o
.text:00002D28
.text:00002D28 var_4           = dword ptr -4
.text:00002D28 arg_0           = dword ptr  8
.text:00002D28 arg_4           = dword ptr  0Ch
.text:00002D28
.text:00002D28                 push    ebp
.text:00002D29                 mov     ebp, esp
.text:00002D2B                 push    ecx
.text:00002D2C                 push    esi
.text:00002D2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D34                 mov     eax, [ebp+arg_0]
.text:00002D37                 mov     [ebp+var_4], eax
.text:00002D3A                 xor     ecx, ecx
.text:00002D3C                 cmp     [ebp+arg_4], 1000h
.text:00002D43                 setnle  cl
.text:00002D46                 mov     esi, esp
.text:00002D48                 push    ecx
.text:00002D49                 mov     edx, [ebp+var_4]
.text:00002D4C                 mov     eax, [edx+4]
.text:00002D4F                 push    eax
.text:00002D50                 mov     ecx, [ebp+var_4]
.text:00002D53                 mov     edx, [ecx+4]
.text:00002D56                 mov     eax, [edx]
.text:00002D58                 mov     ecx, [eax+18h]
.text:00002D5B                 call    ecx
.text:00002D5D                 add     esp, 8
.text:00002D60                 cmp     esi, esp
.text:00002D62                 call    __RTC_CheckEsp
.text:00002D67                 pop     esi
.text:00002D68                 add     esp, 4
.text:00002D6B                 cmp     ebp, esp
.text:00002D6D                 call    __RTC_CheckEsp
.text:00002D72                 mov     esp, ebp
.text:00002D74                 pop     ebp
.text:00002D75                 retn
.text:00002D75 _telnet_unthrottle endp
.text:00002D75
.text:00002D75 ; ---------------------------------------------------------------------------
.text:00002D76                 align 4
.text:00002D78
.text:00002D78 ; =============== S U B R O U T I N E =======================================
.text:00002D78
.text:00002D78 ; Attributes: bp-based frame
.text:00002D78
.text:00002D78 _telnet_ldisc   proc near               ; DATA XREF: .data:000004A4o
.text:00002D78
.text:00002D78 var_4           = dword ptr -4
.text:00002D78 arg_0           = dword ptr  8
.text:00002D78 arg_4           = dword ptr  0Ch
.text:00002D78
.text:00002D78                 push    ebp
.text:00002D79                 mov     ebp, esp
.text:00002D7B                 push    ecx
.text:00002D7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D83                 mov     eax, [ebp+arg_0]
.text:00002D86                 mov     [ebp+var_4], eax
.text:00002D89                 cmp     [ebp+arg_4], 1
.text:00002D8D                 jnz     short loc_2D97
.text:00002D8F                 mov     ecx, [ebp+var_4]
.text:00002D92                 mov     eax, [ecx+44h]
.text:00002D95                 jmp     short loc_2DA7
.text:00002D97 ; ---------------------------------------------------------------------------
.text:00002D97
.text:00002D97 loc_2D97:                               ; CODE XREF: _telnet_ldisc+15j
.text:00002D97                 cmp     [ebp+arg_4], 0
.text:00002D9B                 jnz     short loc_2DA5
.text:00002D9D                 mov     edx, [ebp+var_4]
.text:00002DA0                 mov     eax, [edx+48h]
.text:00002DA3                 jmp     short loc_2DA7
.text:00002DA5 ; ---------------------------------------------------------------------------
.text:00002DA5
.text:00002DA5 loc_2DA5:                               ; CODE XREF: _telnet_ldisc+23j
.text:00002DA5                 xor     eax, eax
.text:00002DA7
.text:00002DA7 loc_2DA7:                               ; CODE XREF: _telnet_ldisc+1Dj
.text:00002DA7                                         ; _telnet_ldisc+2Bj
.text:00002DA7                 mov     esp, ebp
.text:00002DA9                 pop     ebp
.text:00002DAA                 retn
.text:00002DAA _telnet_ldisc   endp
.text:00002DAA
.text:00002DAA ; ---------------------------------------------------------------------------
.text:00002DAB                 db 0Dh dup(0CCh)
.text:00002DB8
.text:00002DB8 ; =============== S U B R O U T I N E =======================================
.text:00002DB8
.text:00002DB8 ; Attributes: bp-based frame
.text:00002DB8
.text:00002DB8 _telnet_provide_ldisc proc near         ; DATA XREF: .data:000004A8o
.text:00002DB8
.text:00002DB8 var_4           = dword ptr -4
.text:00002DB8 arg_0           = dword ptr  8
.text:00002DB8 arg_4           = dword ptr  0Ch
.text:00002DB8
.text:00002DB8                 push    ebp
.text:00002DB9                 mov     ebp, esp
.text:00002DBB                 push    ecx
.text:00002DBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DC3                 mov     eax, [ebp+arg_0]
.text:00002DC6                 mov     [ebp+var_4], eax
.text:00002DC9                 mov     ecx, [ebp+var_4]
.text:00002DCC                 mov     edx, [ebp+arg_4]
.text:00002DCF                 mov     [ecx+10h], edx
.text:00002DD2                 mov     esp, ebp
.text:00002DD4                 pop     ebp
.text:00002DD5                 retn
.text:00002DD5 _telnet_provide_ldisc endp
.text:00002DD5
.text:00002DD5 ; ---------------------------------------------------------------------------
.text:00002DD6                 align 4
.text:00002DD8
.text:00002DD8 ; =============== S U B R O U T I N E =======================================
.text:00002DD8
.text:00002DD8 ; Attributes: bp-based frame
.text:00002DD8
.text:00002DD8 _telnet_provide_logctx proc near        ; DATA XREF: .data:000004ACo
.text:00002DD8                 push    ebp
.text:00002DD9                 mov     ebp, esp
.text:00002DDB                 pop     ebp
.text:00002DDC                 retn
.text:00002DDC _telnet_provide_logctx endp
.text:00002DDC
.text:00002DDC ; ---------------------------------------------------------------------------
.text:00002DDD                 db 0Bh dup(0CCh)
.text:00002DE8
.text:00002DE8 ; =============== S U B R O U T I N E =======================================
.text:00002DE8
.text:00002DE8 ; Attributes: bp-based frame
.text:00002DE8
.text:00002DE8 _telnet_exitcode proc near              ; DATA XREF: .data:0000049Co
.text:00002DE8
.text:00002DE8 var_4           = dword ptr -4
.text:00002DE8 arg_0           = dword ptr  8
.text:00002DE8
.text:00002DE8                 push    ebp
.text:00002DE9                 mov     ebp, esp
.text:00002DEB                 push    ecx
.text:00002DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DF3                 mov     eax, [ebp+arg_0]
.text:00002DF6                 mov     [ebp+var_4], eax
.text:00002DF9                 mov     ecx, [ebp+var_4]
.text:00002DFC                 cmp     dword ptr [ecx+4], 0
.text:00002E00                 jz      short loc_2E09
.text:00002E02                 or      eax, 0FFFFFFFFh
.text:00002E05                 jmp     short loc_2E1D
.text:00002E07 ; ---------------------------------------------------------------------------
.text:00002E07                 jmp     short loc_2E1D
.text:00002E09 ; ---------------------------------------------------------------------------
.text:00002E09
.text:00002E09 loc_2E09:                               ; CODE XREF: _telnet_exitcode+18j
.text:00002E09                 mov     edx, [ebp+var_4]
.text:00002E0C                 cmp     dword ptr [edx+8], 0
.text:00002E10                 jz      short loc_2E1B
.text:00002E12                 mov     eax, 7FFFFFFFh
.text:00002E17                 jmp     short loc_2E1D
.text:00002E19 ; ---------------------------------------------------------------------------
.text:00002E19                 jmp     short loc_2E1D
.text:00002E1B ; ---------------------------------------------------------------------------
.text:00002E1B
.text:00002E1B loc_2E1B:                               ; CODE XREF: _telnet_exitcode+28j
.text:00002E1B                 xor     eax, eax
.text:00002E1D
.text:00002E1D loc_2E1D:                               ; CODE XREF: _telnet_exitcode+1Dj
.text:00002E1D                                         ; _telnet_exitcode+1Fj ...
.text:00002E1D                 mov     esp, ebp
.text:00002E1F                 pop     ebp
.text:00002E20                 retn
.text:00002E20 _telnet_exitcode endp
.text:00002E20
.text:00002E20 ; ---------------------------------------------------------------------------
.text:00002E21                 align 8
.text:00002E28
.text:00002E28 ; =============== S U B R O U T I N E =======================================
.text:00002E28
.text:00002E28 ; Attributes: bp-based frame
.text:00002E28
.text:00002E28 _telnet_cfg_info proc near              ; DATA XREF: .data:000004B4o
.text:00002E28                 push    ebp
.text:00002E29                 mov     ebp, esp
.text:00002E2B                 xor     eax, eax
.text:00002E2D                 pop     ebp
.text:00002E2E                 retn
.text:00002E2E _telnet_cfg_info endp
.text:00002E2E
.text:00002E2E ; ---------------------------------------------------------------------------
.text:00002E2F                 align 10h
.text:00002E2F _text           ends
.text:00002E2F
.rtc$TMZ:00002E30 ; ===========================================================================
.rtc$TMZ:00002E30
.rtc$TMZ:00002E30 ; Segment type: Pure data
.rtc$TMZ:00002E30 ; Segment permissions: Read
.rtc$TMZ:00002E30 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002E30                 assume cs:_rtc$TMZ
.rtc$TMZ:00002E30                 ;org 2E30h
.rtc$TMZ:00002E30 ; COMDAT (pick any)
.rtc$TMZ:00002E30 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002E30 _rtc$TMZ        ends
.rtc$TMZ:00002E30
.rtc$IMZ:00002E34 ; ===========================================================================
.rtc$IMZ:00002E34
.rtc$IMZ:00002E34 ; Segment type: Pure data
.rtc$IMZ:00002E34 ; Segment permissions: Read
.rtc$IMZ:00002E34 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002E34                 assume cs:_rtc$IMZ
.rtc$IMZ:00002E34                 ;org 2E34h
.rtc$IMZ:00002E34 ; COMDAT (pick any)
.rtc$IMZ:00002E34 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002E34 _rtc$IMZ        ends
.rtc$IMZ:00002E34
UNDEF:00002E40 ; ===========================================================================
UNDEF:00002E40
UNDEF:00002E40 ; Segment type: Externs
UNDEF:00002E40 ; UNDEF
UNDEF:00002E40                 extrn _safefree:near    ; CODE XREF: _telnet_log+A5p
UNDEF:00002E40                                         ; _do_telnet_read+3A3p ...
UNDEF:00002E44                 extrn _logevent:near    ; CODE XREF: _telnet_log+96p
UNDEF:00002E44                                         ; _telnet_closing+75p ...
UNDEF:00002E48                 extrn _dupprintf:near   ; CODE XREF: _telnet_log+5Ap
UNDEF:00002E48                                         ; _telnet_log+7Ap ...
UNDEF:00002E4C                 extrn _sk_getaddr:near  ; CODE XREF: _telnet_log+3Cp
UNDEF:00002E50                 extrn ___security_cookie:near ; DATA XREF: _telnet_log+1Cr
UNDEF:00002E50                                         ; _telnet_size+17r
UNDEF:00002E54                 extrn __RTC_CheckEsp:near ; CODE XREF: _telnet_log+D1p
UNDEF:00002E54                                         ; _telnet_closing+36p ...
UNDEF:00002E58 ; __fastcall __security_check_cookie(x)
UNDEF:00002E58                 extrn @__security_check_cookie@4:near
UNDEF:00002E58                                         ; CODE XREF: _telnet_log+C4p
UNDEF:00002E58                                         ; _telnet_size+221p
UNDEF:00002E5C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002E5C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002E5C                                         ; CODE XREF: _telnet_log+B7p
UNDEF:00002E5C                                         ; _send_opt+7Bp ...
UNDEF:00002E60                 extrn __RTC_Shutdown:near
UNDEF:00002E60                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00002E64                 extrn __RTC_InitBase:near
UNDEF:00002E64                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002E68                 extrn _connection_fatal:near ; CODE XREF: _telnet_closing+8Dp
UNDEF:00002E6C                 extrn _notify_remote_exit:near
UNDEF:00002E6C                                         ; CODE XREF: _telnet_closing+5Cp
UNDEF:00002E70                 extrn _saferealloc:near ; CODE XREF: _do_telnet_read+D7p
UNDEF:00002E70                                         ; _do_telnet_read+1F9p ...
UNDEF:00002E74                 extrn _from_backend:near ; CODE XREF: _c_write+1Dp
UNDEF:00002E78                 extrn _ldisc_send:near  ; CODE XREF: _option_side_effects+61p
UNDEF:00002E7C                 extrn _get_remote_username:near
UNDEF:00002E7C                                         ; CODE XREF: _process_subneg+493p
UNDEF:00002E80                 extrn _conf_get_str_strs:near
UNDEF:00002E80                                         ; CODE XREF: _process_subneg+437p
UNDEF:00002E80                                         ; _process_subneg+455p ...
UNDEF:00002E84                 extrn _conf_get_int:near ; CODE XREF: _process_subneg+3A1p
UNDEF:00002E84                                         ; _telnet_init+99p ...
UNDEF:00002E88 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00002E88                 extrn _strcpy:near      ; CODE XREF: _process_subneg+BAp
UNDEF:00002E8C                 extrn _safemalloc:near  ; CODE XREF: _process_subneg+89p
UNDEF:00002E8C                                         ; _process_subneg+1CBp ...
UNDEF:00002E90 ; size_t __cdecl strlen(const char *Str)
UNDEF:00002E90                 extrn _strlen:near      ; CODE XREF: _process_subneg+7Dp
UNDEF:00002E90                                         ; _process_subneg+C6p ...
UNDEF:00002E94                 extrn _conf_get_str:near ; CODE XREF: _process_subneg+6Cp
UNDEF:00002E94                                         ; _process_subneg+1AEp ...
UNDEF:00002E98                 extrn _host_strrchr:near ; CODE XREF: _telnet_init+344p
UNDEF:00002E9C                 extrn _dupstr:near      ; CODE XREF: _telnet_init+32Fp
UNDEF:00002EA0                 extrn _update_specials_menu:near
UNDEF:00002EA0                                         ; CODE XREF: _telnet_init+2F7p
UNDEF:00002EA4                 extrn _pinger_new:near  ; CODE XREF: _telnet_init+226p
UNDEF:00002EA8                 extrn _new_connection:near ; CODE XREF: _telnet_init+1D7p
UNDEF:00002EAC                 extrn _sk_addr_free:near ; CODE XREF: _telnet_init+195p
UNDEF:00002EB0                 extrn _sk_addr_error:near ; CODE XREF: _telnet_init+180p
UNDEF:00002EB4                 extrn _name_lookup:near ; CODE XREF: _telnet_init+171p
UNDEF:00002EB8                 extrn _conf_copy:near   ; CODE XREF: _telnet_init+33p
UNDEF:00002EB8                                         ; _telnet_reconfig+3Ep
UNDEF:00002EBC                 extrn _conf_free:near   ; CODE XREF: _telnet_free+69p
UNDEF:00002EBC                                         ; _telnet_reconfig+32p
UNDEF:00002EC0                 extrn _pinger_free:near ; CODE XREF: _telnet_free+5Ap
UNDEF:00002EC4                 extrn _pinger_reconfig:near ; CODE XREF: _telnet_reconfig+23p
UNDEF:00002EC4
UNDEF:00002EC4
UNDEF:00002EC4                 end