.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 3470498A215A529384EA49C1F5A096A4
.data:00000000 ; Input CRC32 : CE778C06
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winctrls.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 ; char _SG88581[]
.data:00000000 $SG88581        db 'LISTBOX',0          ; DATA XREF: _doctl+ABo
.data:00000008 ; CHAR _SG88593[]
.data:00000008 $SG88593        db 'STATIC',0           ; DATA XREF: _bartitle+6Co
.data:0000000F                 align 10h
.data:00000010 ; CHAR _SG88608[]
.data:00000010 $SG88608        db 'BUTTON',0           ; DATA XREF: _endbox+AFo
.data:00000017                 align 4
.data:00000018 ; CHAR _SG88622[]
.data:00000018 $SG88622        db 'STATIC',0           ; DATA XREF: _editboxfw+5Fo
.data:0000001F                 align 10h
.data:00000020 ; CHAR _SG88624[]
.data:00000020 $SG88624        db 'EDIT',0             ; DATA XREF: _editboxfw+CAo
.data:00000025                 align 4
.data:00000028 ; CHAR _SG88636[]
.data:00000028 $SG88636        db 'STATIC',0           ; DATA XREF: _combobox+5Fo
.data:00000028                                         ; .data:00000570o
.data:0000002F                 align 10h
.data:00000030 ; CHAR _SG88638[]
.data:00000030 $SG88638        db 'COMBOBOX',0         ; DATA XREF: _combobox+BEo
.data:00000039                 align 4
.data:0000003C ; CHAR _SG88661[]
.data:0000003C $SG88661        db 'STATIC',0           ; DATA XREF: _radioline_common+87o
.data:00000043                 align 4
.data:00000044 ; CHAR _SG88670[]
.data:00000044 $SG88670        db 'BUTTON',0           ; DATA XREF: _radioline_common+1ACo
.data:0000004B unk_4B          db    0                 ; DATA XREF: .rdata:000014A4o
.data:0000004C ; CHAR _SG88854[]
.data:0000004C $SG88854        db 'BUTTON',0           ; DATA XREF: _checkbox+6Co
.data:00000053                 align 4
.data:00000054 ; CHAR _SG88910[]
.data:00000054 $SG88910        db 'STATIC',0           ; DATA XREF: _statictext+6Eo
.data:0000005B                 align 4
.data:0000005C ; CHAR _SG88919[]
.data:0000005C $SG88919        db 'STATIC',0           ; DATA XREF: _paneltitle+6Ao
.data:00000063 unk_63          db    0                 ; DATA XREF: .data:$SG90179o
.data:00000064 ; CHAR _SG88936[]
.data:00000064 $SG88936        db 'STATIC',0           ; DATA XREF: _staticbtn+91o
.data:0000006B                 align 4
.data:0000006C ; CHAR _SG88937[]
.data:0000006C $SG88937        db 'BUTTON',0           ; DATA XREF: _staticbtn+F4o
.data:00000073                 align 4
.data:00000074 ; CHAR _SG88950[]
.data:00000074 $SG88950        db 'BUTTON',0           ; DATA XREF: _button+93o
.data:0000007B                 align 4
.data:0000007C ; CHAR _SG88973[]
.data:0000007C $SG88973        db 'STATIC',0           ; DATA XREF: _static2btn+B1o
.data:00000083                 align 4
.data:00000084 ; CHAR _SG88974[]
.data:00000084 $SG88974        db 'BUTTON',0           ; DATA XREF: _static2btn+114o
.data:0000008B                 align 4
.data:0000008C ; CHAR _SG88975[]
.data:0000008C $SG88975        db 'BUTTON',0           ; DATA XREF: _static2btn+177o
.data:00000093                 align 4
.data:00000094 ; CHAR _SG88995[]
.data:00000094 $SG88995        db 'STATIC',0           ; DATA XREF: _staticedit_internal+98o
.data:0000009B                 align 4
.data:0000009C ; CHAR _SG88997[]
.data:0000009C $SG88997        db 'EDIT',0             ; DATA XREF: _staticedit_internal+104o
.data:000000A1                 align 4
.data:000000A4 ; CHAR _SG89036[]
.data:000000A4 $SG89036        db 'STATIC',0           ; DATA XREF: _staticddl+98o
.data:000000AB                 align 4
.data:000000AC ; CHAR _SG89038[]
.data:000000AC $SG89038        db 'COMBOBOX',0         ; DATA XREF: _staticddl+FFo
.data:000000B5                 align 4
.data:000000B8 ; CHAR _SG89056[]
.data:000000B8 $SG89056        db 'STATIC',0           ; DATA XREF: _staticcombo+98o
.data:000000BF                 align 10h
.data:000000C0 ; CHAR _SG89058[]
.data:000000C0 $SG89058        db 'COMBOBOX',0         ; DATA XREF: _staticcombo+FFo
.data:000000C9                 align 4
.data:000000CC ; CHAR _SG89071[]
.data:000000CC $SG89071        db 'STATIC',0           ; DATA XREF: _staticddlbig+5Fo
.data:000000D3                 align 4
.data:000000D4 ; CHAR _SG89073[]
.data:000000D4 $SG89073        db 'COMBOBOX',0         ; DATA XREF: _staticddlbig+CEo
.data:000000DD                 align 10h
.data:000000E0 ; CHAR _SG89087[]
.data:000000E0 $SG89087        db 'STATIC',0           ; DATA XREF: _bigeditctrl+72o
.data:000000E7                 align 4
.data:000000E8 ; CHAR _SG89089[]
.data:000000E8 $SG89089        db 'EDIT',0             ; DATA XREF: _bigeditctrl+EBo
.data:000000ED                 align 10h
.data:000000F0 ; CHAR _SG89107[]
.data:000000F0 $SG89107        db 'STATIC',0           ; DATA XREF: _listbox+72o
.data:000000F7                 align 4
.data:000000F8 ; CHAR _SG89109[]
.data:000000F8 $SG89109        db 'LISTBOX',0          ; DATA XREF: _listbox+F6o
.data:00000100 ; CHAR _SG89131[]
.data:00000100 $SG89131        db 'STATIC',0           ; DATA XREF: _ersatztab+BCo
.data:00000107                 align 4
.data:00000108 ; CHAR _SG89133[]
.data:00000108 $SG89133        db 'COMBOBOX',0         ; DATA XREF: _ersatztab+123o
.data:00000111                 align 4
.data:00000114 ; CHAR _SG89135[]
.data:00000114 $SG89135        db 'STATIC',0           ; DATA XREF: _ersatztab+199o
.data:0000011B                 align 4
.data:0000011C ; CHAR _SG89154[]
.data:0000011C $SG89154        db 'STATIC',0           ; DATA XREF: _editbutton+69o
.data:00000123                 align 4
.data:00000124 ; CHAR _SG89156[]
.data:00000124 $SG89156        db 'EDIT',0             ; DATA XREF: _editbutton+104o
.data:00000129                 align 4
.data:0000012C ; CHAR _SG89157[]
.data:0000012C $SG89157        db 'BUTTON',0           ; DATA XREF: _editbutton+167o
.data:00000133                 align 4
.data:00000134 ; CHAR _SG89187[]
.data:00000134 $SG89187        db 'STATIC',0           ; DATA XREF: _prefslist+9Eo
.data:0000013B                 align 4
.data:0000013C ; CHAR _SG89202[]
.data:0000013C $SG89202        db 'LISTBOX',0          ; DATA XREF: _prefslist+1A9o
.data:00000144 ; CHAR _SG89204[]
.data:00000144 $SG89204        db '&Up',0              ; DATA XREF: _prefslist+214o
.data:00000148 ; CHAR _SG89205[]
.data:00000148 $SG89205        db 'BUTTON',0           ; DATA XREF: _prefslist+220o
.data:0000014F                 align 10h
.data:00000150 ; CHAR _SG89206[]
.data:00000150 $SG89206        db '&Down',0            ; DATA XREF: _prefslist+274o
.data:00000156                 align 4
.data:00000158 ; CHAR _SG89207[]
.data:00000158 $SG89207        db 'BUTTON',0           ; DATA XREF: _prefslist+280o
.data:0000015F                 align 10h
.data:00000160 ; CHAR _SG89325[]
.data:00000160 $SG89325        db 'msctls_progress32',0 ; DATA XREF: _progressbar+70o
.data:00000172                 align 4
.data:00000174 ; wchar_t _SG89361
.data:00000174 $SG89361:                               ; DATA XREF: _winctrl_add_shortcuts+65o
.data:00000174                 unicode 0, <..\..\winctrls.c>,0
.data:00000196                 align 4
.data:00000198 ; wchar_t _SG89362
.data:00000198 $SG89362:                               ; DATA XREF: _winctrl_add_shortcuts+6Ao
.data:00000198                 unicode 0, <!dp->
.data:00000198                 dw 3Eh
.data:00000198                 unicode 0, <shortcuts[s]>,0
.data:000001BC ; wchar_t _SG89376
.data:000001BC $SG89376:                               ; DATA XREF: _winctrl_rem_shortcuts+65o
.data:000001BC                 unicode 0, <..\..\winctrls.c>,0
.data:000001DE                 align 10h
.data:000001E0 ; wchar_t _SG89377
.data:000001E0 $SG89377:                               ; DATA XREF: _winctrl_rem_shortcuts+6Ao
.data:000001E0                 unicode 0, <dp->
.data:000001E0                 dw 3Eh
.data:000001E0                 unicode 0, <shortcuts[s]>,0
.data:00000202                 align 4
.data:00000204 ; wchar_t _SG89454
.data:00000204 $SG89454:                               ; DATA XREF: _winctrl_add+35o
.data:00000204                 unicode 0, <..\..\winctrls.c>,0
.data:00000226                 align 4
.data:00000228 ; wchar_t _SG89455
.data:00000228 $SG89455:                               ; DATA XREF: _winctrl_add+3Ao
.data:00000228                 unicode 0, <ret == c>,0
.data:0000023A                 align 4
.data:0000023C ; wchar_t _SG89457
.data:0000023C $SG89457:                               ; DATA XREF: _winctrl_add+6Ao
.data:0000023C                 unicode 0, <..\..\winctrls.c>,0
.data:0000025E                 align 10h
.data:00000260 ; wchar_t _SG89458
.data:00000260 $SG89458:                               ; DATA XREF: _winctrl_add+6Fo
.data:00000260                 unicode 0, <ret == c>,0
.data:00000272                 align 4
.data:00000274 ; wchar_t _SG89466
.data:00000274 $SG89466:                               ; DATA XREF: _winctrl_remove+43o
.data:00000274                 unicode 0, <..\..\winctrls.c>,0
.data:00000296                 align 4
.data:00000298 ; wchar_t _SG89467
.data:00000298 $SG89467:                               ; DATA XREF: _winctrl_remove+48o
.data:00000298                 unicode 0, <ret == c>,0
.data:000002AA                 align 4
.data:000002AC ; wchar_t _SG89527
.data:000002AC $SG89527:                               ; DATA XREF: _winctrl_layout+239o
.data:000002AC                 unicode 0, <..\..\winctrls.c>,0
.data:000002CE                 align 10h
.data:000002D0 ; wchar_t _SG89528
.data:000002D0 $SG89528:                               ; DATA XREF: _winctrl_layout+23Eo
.data:000002D0                 unicode 0, <(ctrl->
.data:000002D0                 dw 3Eh
.data:000002D0                 unicode 0, <columns.ncols == 1) ^ (ncols == 1)>,0
.data:00000324 ; wchar_t _SG89536
.data:00000324 $SG89536:                               ; DATA XREF: _winctrl_layout+275o
.data:00000324                 unicode 0, <..\..\winctrls.c>,0
.data:00000346                 align 4
.data:00000348 ; wchar_t _SG89537
.data:00000348 $SG89537:                               ; DATA XREF: _winctrl_layout+27Ao
.data:00000348                 unicode 0, <ncols >
.data:00000348                 dw 3Ch
.data:00000348                 unicode 0, <= lenof(columns)>,0
.data:00000378 ; wchar_t _SG89555
.data:00000378 $SG89555:                               ; DATA XREF: _winctrl_layout+494o
.data:00000378                 unicode 0, <..\..\winctrls.c>,0
.data:0000039A                 align 4
.data:0000039C ; wchar_t _SG89556
.data:0000039C $SG89556:                               ; DATA XREF: _winctrl_layout+499o
.data:0000039C                 unicode 0, <!ctrl->
.data:0000039C                 dw 3Eh
.data:0000039C                 unicode 0, <generic.tabdelay>,0
.data:000003CC ; wchar_t _SG89562
.data:000003CC $SG89562:                               ; DATA XREF: _winctrl_layout+50Ao
.data:000003CC                 unicode 0, <..\..\winctrls.c>,0
.data:000003EE                 align 10h
.data:000003F0 ; wchar_t _SG89563
.data:000003F0 $SG89563:                               ; DATA XREF: _winctrl_layout+50Fo
.data:000003F0                 unicode 0, <i >
.data:000003F0                 dw 3Ch
.data:000003F0                 unicode 0, < ntabdelays>,0
.data:0000040E                 align 10h
.data:00000410 ; wchar_t _SG89572
.data:00000410 $SG89572:                               ; DATA XREF: _winctrl_layout+665o
.data:00000410                 unicode 0, <..\..\winctrls.c>,0
.data:00000432                 align 4
.data:00000434 ; wchar_t _SG89573
.data:00000434 $SG89573:                               ; DATA XREF: _winctrl_layout+66Ao
.data:00000434                 unicode 0, <ntabdelays >
.data:00000434                 dw 3Ch
.data:00000434                 unicode 0, < lenof(tabdelays)>,0
.data:00000470 ; wchar_t _SG89602
.data:00000470 $SG89602:                               ; DATA XREF: _winctrl_layout+A69o
.data:00000470                 unicode 0, <..\..\winctrls.c>,0
.data:00000492                 align 4
.data:00000494 ; CHAR _SG89631[]
.data:00000494 $SG89631        db 'Bro&wse...',0       ; DATA XREF: _winctrl_layout+FA4o
.data:0000049F                 align 10h
.data:000004A0 ; wchar_t _SG89603
.data:000004A0 $SG89603:                               ; DATA XREF: _winctrl_layout+A6Eo
.data:000004A0                 unicode 0, <nshortcuts >
.data:000004A0                 dw 3Ch
.data:000004A0                 unicode 0, < MAX_SHORTCUTS_PER_CTRL>,0
.data:000004E8 ; CHAR _SG89633[]
.data:000004E8 $SG89633        db 'Change...',0        ; DATA XREF: _winctrl_layout+107Co
.data:000004F2                 align 4
.data:000004F4 $SG89638        db 'Can',27h,'t happen',0
.data:000004F4                                         ; DATA XREF: _winctrl_layout:$LN13_1o
.data:00000501                 align 4
.data:00000504 ; wchar_t _SG89639
.data:00000504 $SG89639:                               ; DATA XREF: _winctrl_layout+10D7o
.data:00000504                 unicode 0, <..\..\winctrls.c>,0
.data:00000526                 align 4
.data:00000528 ; wchar_t _SG89640
.data:00000528 $SG89640:                               ; DATA XREF: _winctrl_layout+10DCo
.data:00000528                 unicode 0, <!"Can>
.data:00000528                 dw 27h
.data:00000528                 unicode 0, <t happen">,0
.data:00000548 ; CHAR _SG89694[]
.data:00000548 $SG89694        db 'commctrl_DragListMsg',0
.data:00000548                                         ; DATA XREF: _winctrl_handle_command+32o
.data:0000055D                 align 10h
.data:00000560 $SG89874        db 'All Files (*.*)',0  ; DATA XREF: _winctrl_handle_command:loc_6931o
.data:00000570                 dd offset $SG88636+2    ; "ATIC"
.data:00000574                 align 8
.data:00000578 ; wchar_t _SG89958
.data:00000578 $SG89958:                               ; DATA XREF: _dlg_radiobutton_set+43o
.data:00000578                 unicode 0, <..\..\winctrls.c>,0
.data:0000059A                 align 4
.data:0000059C ; wchar_t _SG89970
.data:0000059C $SG89970:                               ; DATA XREF: _dlg_radiobutton_get+4Ao
.data:0000059C                 unicode 0, <..\..\winctrls.c>,0
.data:000005BE                 align 10h
.data:000005C0 ; wchar_t _SG89959
.data:000005C0 $SG89959:                               ; DATA XREF: _dlg_radiobutton_set+48o
.data:000005C0                 unicode 0, <c && c->
.data:000005C0                 dw 3Eh
.data:000005C0                 unicode 0, <ctrl->
.data:000005C0                 dw 3Eh
.data:000005C0                 unicode 0, <generic.type == CTRL_RADIO>,0
.data:00000612                 align 4
.data:00000614 ; wchar_t _SG89978
.data:00000614 $SG89978:                               ; DATA XREF: _dlg_radiobutton_get+B7o
.data:00000614                 unicode 0, <..\..\winctrls.c>,0
.data:00000636                 align 4
.data:00000638 ; wchar_t _SG89971
.data:00000638 $SG89971:                               ; DATA XREF: _dlg_radiobutton_get+4Fo
.data:00000638                 unicode 0, <c && c->
.data:00000638                 dw 3Eh
.data:00000638                 unicode 0, <ctrl->
.data:00000638                 dw 3Eh
.data:00000638                 unicode 0, <generic.type == CTRL_RADIO>,0
.data:0000068A                 align 4
.data:0000068C $SG89977        db 'No radio button was checked?!',0
.data:0000068C                                         ; DATA XREF: _dlg_radiobutton_get:loc_7165o
.data:000006AA                 align 4
.data:000006AC ; wchar_t _SG89991
.data:000006AC $SG89991:                               ; DATA XREF: _dlg_checkbox_set+43o
.data:000006AC                 unicode 0, <..\..\winctrls.c>,0
.data:000006CE                 align 10h
.data:000006D0 ; wchar_t _SG89979
.data:000006D0 $SG89979:                               ; DATA XREF: _dlg_radiobutton_get+BCo
.data:000006D0                 unicode 0, <!"No radio button was checked?!">,0
.data:00000712                 align 4
.data:00000714 ; wchar_t _SG90002
.data:00000714 $SG90002:                               ; DATA XREF: _dlg_checkbox_get+43o
.data:00000714                 unicode 0, <..\..\winctrls.c>,0
.data:00000736                 align 4
.data:00000738 ; wchar_t _SG89992
.data:00000738 $SG89992:                               ; DATA XREF: _dlg_checkbox_set+48o
.data:00000738                 unicode 0, <c && c->
.data:00000738                 dw 3Eh
.data:00000738                 unicode 0, <ctrl->
.data:00000738                 dw 3Eh
.data:00000738                 unicode 0, <generic.type == CTRL_CHECKBOX>,0
.data:00000790 ; wchar_t _SG90003
.data:00000790 $SG90003:                               ; DATA XREF: _dlg_checkbox_get+48o
.data:00000790                 unicode 0, <c && c->
.data:00000790                 dw 3Eh
.data:00000790                 unicode 0, <ctrl->
.data:00000790                 dw 3Eh
.data:00000790                 unicode 0, <generic.type == CTRL_CHECKBOX>,0
.data:000007E8 ; wchar_t _SG90015
.data:000007E8 $SG90015:                               ; DATA XREF: _dlg_editbox_set+43o
.data:000007E8                 unicode 0, <..\..\winctrls.c>,0
.data:0000080A                 align 4
.data:0000080C ; wchar_t _SG90026
.data:0000080C $SG90026:                               ; DATA XREF: _dlg_editbox_get+42o
.data:0000080C                 unicode 0, <..\..\winctrls.c>,0
.data:0000082E                 align 10h
.data:00000830 ; wchar_t _SG90016
.data:00000830 $SG90016:                               ; DATA XREF: _dlg_editbox_set+48o
.data:00000830                 unicode 0, <c && c->
.data:00000830                 dw 3Eh
.data:00000830                 unicode 0, <ctrl->
.data:00000830                 dw 3Eh
.data:00000830                 unicode 0, <generic.type == CTRL_EDITBOX>,0
.data:00000886                 align 4
.data:00000888 ; wchar_t _SG90027
.data:00000888 $SG90027:                               ; DATA XREF: _dlg_editbox_get+47o
.data:00000888                 unicode 0, <c && c->
.data:00000888                 dw 3Eh
.data:00000888                 unicode 0, <ctrl->
.data:00000888                 dw 3Eh
.data:00000888                 unicode 0, <generic.type == CTRL_EDITBOX>,0
.data:000008DE                 align 10h
.data:000008E0 ; wchar_t _SG90038
.data:000008E0 $SG90038:                               ; DATA XREF: _dlg_listbox_clear+5Bo
.data:000008E0                 unicode 0, <..\..\winctrls.c>,0
.data:00000902                 align 4
.data:00000904 ; wchar_t _SG90052
.data:00000904 $SG90052:                               ; DATA XREF: _dlg_listbox_del+5Bo
.data:00000904                 unicode 0, <..\..\winctrls.c>,0
.data:00000926                 align 4
.data:00000928 ; wchar_t _SG90039
.data:00000928 $SG90039:                               ; DATA XREF: _dlg_listbox_clear+60o
.data:00000928                 unicode 0, <c && (c->
.data:00000928                 dw 3Eh
.data:00000928                 unicode 0, <ctrl->
.data:00000928                 dw 3Eh
.data:00000928                 unicode 0, <generic.type == CTRL_LISTBOX || (c->
.data:00000928                 dw 3Eh
.data:00000928                 unicode 0, <ctrl->
.data:00000928                 dw 3Eh
.data:00000928                 unicode 0, <generic.type == CTRL_EDITBOX && c->
.data:00000928                 dw 3Eh
.data:00000928                 unicode 0, <ctrl->
.data:00000928                 dw 3Eh
.data:00000928                 unicode 0, <editbox.has_list))>,0
.data:00000A12                 align 4
.data:00000A14 ; wchar_t _SG90066
.data:00000A14 $SG90066:                               ; DATA XREF: _dlg_listbox_add+5Bo
.data:00000A14                 unicode 0, <..\..\winctrls.c>,0
.data:00000A36                 align 4
.data:00000A38 ; wchar_t _SG90053
.data:00000A38 $SG90053:                               ; DATA XREF: _dlg_listbox_del+60o
.data:00000A38                 unicode 0, <c && (c->
.data:00000A38                 dw 3Eh
.data:00000A38                 unicode 0, <ctrl->
.data:00000A38                 dw 3Eh
.data:00000A38                 unicode 0, <generic.type == CTRL_LISTBOX || (c->
.data:00000A38                 dw 3Eh
.data:00000A38                 unicode 0, <ctrl->
.data:00000A38                 dw 3Eh
.data:00000A38                 unicode 0, <generic.type == CTRL_EDITBOX && c->
.data:00000A38                 dw 3Eh
.data:00000A38                 unicode 0, <ctrl->
.data:00000A38                 dw 3Eh
.data:00000A38                 unicode 0, <editbox.has_list))>,0
.data:00000B22                 align 4
.data:00000B24 ; wchar_t _SG90085
.data:00000B24 $SG90085:                               ; DATA XREF: _dlg_listbox_addwithid+64o
.data:00000B24                 unicode 0, <..\..\winctrls.c>,0
.data:00000B46                 align 4
.data:00000B48 ; wchar_t _SG90067
.data:00000B48 $SG90067:                               ; DATA XREF: _dlg_listbox_add+60o
.data:00000B48                 unicode 0, <c && (c->
.data:00000B48                 dw 3Eh
.data:00000B48                 unicode 0, <ctrl->
.data:00000B48                 dw 3Eh
.data:00000B48                 unicode 0, <generic.type == CTRL_LISTBOX || (c->
.data:00000B48                 dw 3Eh
.data:00000B48                 unicode 0, <ctrl->
.data:00000B48                 dw 3Eh
.data:00000B48                 unicode 0, <generic.type == CTRL_EDITBOX && c->
.data:00000B48                 dw 3Eh
.data:00000B48                 unicode 0, <ctrl->
.data:00000B48                 dw 3Eh
.data:00000B48                 unicode 0, <editbox.has_list))>,0
.data:00000C32                 align 4
.data:00000C34 ; wchar_t _SG90101
.data:00000C34 $SG90101:                               ; DATA XREF: _dlg_listbox_getid+4Ao
.data:00000C34                 unicode 0, <..\..\winctrls.c>,0
.data:00000C56                 align 4
.data:00000C58 ; wchar_t _SG90086
.data:00000C58 $SG90086:                               ; DATA XREF: _dlg_listbox_addwithid+69o
.data:00000C58                 unicode 0, <c && (c->
.data:00000C58                 dw 3Eh
.data:00000C58                 unicode 0, <ctrl->
.data:00000C58                 dw 3Eh
.data:00000C58                 unicode 0, <generic.type == CTRL_LISTBOX || (c->
.data:00000C58                 dw 3Eh
.data:00000C58                 unicode 0, <ctrl->
.data:00000C58                 dw 3Eh
.data:00000C58                 unicode 0, <generic.type == CTRL_EDITBOX && c->
.data:00000C58                 dw 3Eh
.data:00000C58                 unicode 0, <ctrl->
.data:00000C58                 dw 3Eh
.data:00000C58                 unicode 0, <editbox.has_list))>,0
.data:00000D42                 align 4
.data:00000D44 ; wchar_t _SG90114
.data:00000D44 $SG90114:                               ; DATA XREF: _dlg_listbox_index+46o
.data:00000D44                 unicode 0, <..\..\winctrls.c>,0
.data:00000D66                 align 4
.data:00000D68 ; wchar_t _SG90102
.data:00000D68 $SG90102:                               ; DATA XREF: _dlg_listbox_getid+4Fo
.data:00000D68                 unicode 0, <c && c->
.data:00000D68                 dw 3Eh
.data:00000D68                 unicode 0, <ctrl->
.data:00000D68                 dw 3Eh
.data:00000D68                 unicode 0, <generic.type == CTRL_LISTBOX>,0
.data:00000DBE                 align 10h
.data:00000DC0 ; wchar_t _SG90115
.data:00000DC0 $SG90115:                               ; DATA XREF: _dlg_listbox_index+4Bo
.data:00000DC0                 unicode 0, <c && c->
.data:00000DC0                 dw 3Eh
.data:00000DC0                 unicode 0, <ctrl->
.data:00000DC0                 dw 3Eh
.data:00000DC0                 unicode 0, <generic.type == CTRL_LISTBOX>,0
.data:00000E16                 align 4
.data:00000E18 ; wchar_t _SG90118
.data:00000E18 $SG90118:                               ; DATA XREF: _dlg_listbox_index+73o
.data:00000E18                 unicode 0, <..\..\winctrls.c>,0
.data:00000E3A                 align 4
.data:00000E3C ; wchar_t _SG90119
.data:00000E3C $SG90119:                               ; DATA XREF: _dlg_listbox_index+78o
.data:00000E3C                 unicode 0, <c->
.data:00000E3C                 dw 3Eh
.data:00000E3C                 unicode 0, <ctrl->
.data:00000E3C                 dw 3Eh
.data:00000E3C                 unicode 0, <listbox.height != 0>,0
.data:00000E76                 align 4
.data:00000E78 ; wchar_t _SG90135
.data:00000E78 $SG90135:                               ; DATA XREF: _dlg_listbox_issel+59o
.data:00000E78                 unicode 0, <..\..\winctrls.c>,0
.data:00000E9A                 align 4
.data:00000E9C ; wchar_t _SG90149
.data:00000E9C $SG90149:                               ; DATA XREF: _dlg_listbox_select+55o
.data:00000E9C                 unicode 0, <..\..\winctrls.c>,0
.data:00000EBE                 align 10h
.data:00000EC0 ; wchar_t _SG90136
.data:00000EC0 $SG90136:                               ; DATA XREF: _dlg_listbox_issel+5Eo
.data:00000EC0                 unicode 0, <c && c->
.data:00000EC0                 dw 3Eh
.data:00000EC0                 unicode 0, <ctrl->
.data:00000EC0                 dw 3Eh
.data:00000EC0                 unicode 0, <generic.type == CTRL_LISTBOX && c->
.data:00000EC0                 dw 3Eh
.data:00000EC0                 unicode 0, <ctrl->
.data:00000EC0                 dw 3Eh
.data:00000EC0                 unicode 0, <listbox.multisel && c->
.data:00000EC0                 dw 3Eh
.data:00000EC0                 unicode 0, <ctrl->
.data:00000EC0                 dw 3Eh
.data:00000EC0                 unicode 0, <listbox.height != 0>,0
.data:00000F90 ; wchar_t _SG90150
.data:00000F90 $SG90150:                               ; DATA XREF: _dlg_listbox_select+5Ao
.data:00000F90                 unicode 0, <c && c->
.data:00000F90                 dw 3Eh
.data:00000F90                 unicode 0, <ctrl->
.data:00000F90                 dw 3Eh
.data:00000F90                 unicode 0, <generic.type == CTRL_LISTBOX && !c->
.data:00000F90                 dw 3Eh
.data:00000F90                 unicode 0, <ctrl->
.data:00000F90                 dw 3Eh
.data:00000F90                 unicode 0, <listbox.multisel>,0
.data:00001022                 align 4
.data:00001024 ; wchar_t _SG90162
.data:00001024 $SG90162:                               ; DATA XREF: _dlg_text_set+43o
.data:00001024                 unicode 0, <..\..\winctrls.c>,0
.data:00001046                 align 4
.data:00001048 ; wchar_t _SG90163
.data:00001048 $SG90163:                               ; DATA XREF: _dlg_text_set+48o
.data:00001048                 unicode 0, <c && c->
.data:00001048                 dw 3Eh
.data:00001048                 unicode 0, <ctrl->
.data:00001048                 dw 3Eh
.data:00001048                 unicode 0, <generic.type == CTRL_TEXT>,0
.data:00001098 ; wchar_t _SG90178
.data:00001098 $SG90178:                               ; DATA XREF: _dlg_label_change+4Do
.data:00001098                 unicode 0, <..\..\winctrls.c>,0
.data:000010BA                 align 4
.data:000010BC ; wchar_t _SG90179
.data:000010BC $SG90179        dd offset unk_63        ; DATA XREF: _dlg_label_change+52o
.data:000010C0 $SG90193        db 'Can',27h,'t happen',0
.data:000010C0                                         ; DATA XREF: _dlg_label_change:$LN2o
.data:000010CD                 align 10h
.data:000010D0 ; wchar_t _SG90194
.data:000010D0 $SG90194:                               ; DATA XREF: _dlg_label_change+192o
.data:000010D0                 unicode 0, <..\..\winctrls.c>,0
.data:000010F2                 align 4
.data:000010F4 ; wchar_t _SG90195
.data:000010F4 $SG90195:                               ; DATA XREF: _dlg_label_change+197o
.data:000010F4                 unicode 0, <!"Can>
.data:000010F4                 dw 27h
.data:000010F4                 unicode 0, <t happen">,0
.data:00001114 ; wchar_t _SG90208
.data:00001114 $SG90208:                               ; DATA XREF: _dlg_filesel_set+43o
.data:00001114                 unicode 0, <..\..\winctrls.c>,0
.data:00001136                 align 4
.data:00001138 ; wchar_t _SG90209
.data:00001138 $SG90209:                               ; DATA XREF: _dlg_filesel_set+48o
.data:00001138                 unicode 0, <c && c->
.data:00001138                 dw 3Eh
.data:00001138                 unicode 0, <ctrl->
.data:00001138                 dw 3Eh
.data:00001138                 unicode 0, <generic.type == CTRL_FILESELECT>,0
.data:00001194 ; wchar_t _SG90221
.data:00001194 $SG90221:                               ; DATA XREF: _dlg_filesel_get+45o
.data:00001194                 unicode 0, <..\..\winctrls.c>,0
.data:000011B6                 align 4
.data:000011B8 ; wchar_t _SG90222
.data:000011B8 $SG90222:                               ; DATA XREF: _dlg_filesel_get+4Ao
.data:000011B8                 unicode 0, <c && c->
.data:000011B8                 dw 3Eh
.data:000011B8                 unicode 0, <ctrl->
.data:000011B8                 dw 3Eh
.data:000011B8                 unicode 0, <generic.type == CTRL_FILESELECT>,0
.data:00001214 ; wchar_t _SG90236
.data:00001214 $SG90236:                               ; DATA XREF: _dlg_fontsel_set+4Fo
.data:00001214                 unicode 0, <..\..\winctrls.c>,0
.data:00001236                 align 4
.data:00001238 ; wchar_t _SG90237
.data:00001238 $SG90237:                               ; DATA XREF: _dlg_fontsel_set+54o
.data:00001238                 unicode 0, <c && c->
.data:00001238                 dw 3Eh
.data:00001238                 unicode 0, <ctrl->
.data:00001238                 dw 3Eh
.data:00001238                 unicode 0, <generic.type == CTRL_FONTSELECT>,0
.data:00001294 $SG90239        db 'bold, ',0           ; DATA XREF: _dlg_fontsel_set+8Bo
.data:0000129B                 align 4
.data:0000129C $SG90242        db 'Font: %s, %sdefault height',0
.data:0000129C                                         ; DATA XREF: _dlg_fontsel_set+B4o
.data:000012B7                 align 4
.data:000012B8 $SG90244        db 'pixel',0            ; DATA XREF: _dlg_fontsel_set+CFo
.data:000012BE                 align 10h
.data:000012C0 $SG90245        db 'point',0            ; DATA XREF: _dlg_fontsel_set:loc_7F74o
.data:000012C6                 align 4
.data:000012C8 $SG90246        db 'Font: %s, %s%d-%s',0 ; DATA XREF: _dlg_fontsel_set+110o
.data:000012DA                 align 4
.data:000012DC ; wchar_t _SG90256
.data:000012DC $SG90256:                               ; DATA XREF: _dlg_fontsel_get+42o
.data:000012DC                 unicode 0, <..\..\winctrls.c>,0
.data:000012FE                 align 10h
.data:00001300 ; wchar_t _SG90257
.data:00001300 $SG90257:                               ; DATA XREF: _dlg_fontsel_get+47o
.data:00001300                 unicode 0, <c && c->
.data:00001300                 dw 3Eh
.data:00001300                 unicode 0, <ctrl->
.data:00001300                 dw 3Eh
.data:00001300                 unicode 0, <generic.type == CTRL_FONTSELECT>,0
.data:0000135C ; wchar_t _SG90437
.data:0000135C $SG90437:                               ; DATA XREF: _dp_add_tree+11o
.data:0000135C                 unicode 0, <..\..\winctrls.c>,0
.data:0000137E                 align 10h
.data:00001380 ; wchar_t _SG90438
.data:00001380 $SG90438:                               ; DATA XREF: _dp_add_tree+16o
.data:00001380                 unicode 0, <dp->
.data:00001380                 dw 3Eh
.data:00001380                 unicode 0, <nctrltrees >
.data:00001380                 dw 3Ch
.data:00001380                 unicode 0, < lenof(dp->
.data:00001380                 dw 3Eh
.data:00001380                 unicode 0, <controltrees)>,0
.data:000013D2                 align 4
.data:000013D4 ; wchar_t _SG90494
.data:000013D4 $SG90494:                               ; DATA XREF: _dlg_alloc_privdata+92o
.data:000013D4                 unicode 0, <..\..\winctrls.c>,0
.data:000013F6                 align 4
.data:000013F8 ; wchar_t _SG90495
.data:000013F8 $SG90495:                               ; DATA XREF: _dlg_alloc_privdata+97o
.data:000013F8                 unicode 0, <!p->
.data:000013F8                 dw 3Eh
.data:000013F8                 unicode 0, <needs_free>,0
.data:00001416                 align 4
.data:00001416 _data           ends
.data:00001416
.bss:00001418 ; ===========================================================================
.bss:00001418
.bss:00001418 ; Segment type: Uninitialized
.bss:00001418 ; Segment permissions: Read/Write
.bss:00001418 ; Segment alignment 'qword' can not be represented in assembly
.bss:00001418 _bss            segment para public 'BSS' use32
.bss:00001418                 assume cs:_bss
.bss:00001418                 ;org 1418h
.bss:00001418                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00001418 ; struct tagCHOOSECOLORA `winctrl_handle_command'::`21'::cc
.bss:00001418 ?cc@?BF@??winctrl_handle_command@@9@9 tagCHOOSECOLORA <?>
.bss:00001418                                         ; DATA XREF: _winctrl_handle_command+E7Dw
.bss:00001418                                         ; _winctrl_handle_command+EE2o ...
.bss:0000143C $SG88607        db    ? ;               ; DATA XREF: _endbox:loc_1912o
.bss:0000143D ; const CHAR _SG88623
.bss:0000143D $SG88623        db ?                    ; DATA XREF: _editboxfw+AFo
.bss:0000143E ; const CHAR _SG88637
.bss:0000143E $SG88637        db ?                    ; DATA XREF: _combobox+AFo
.bss:0000143F ; const CHAR _SG88996
.bss:0000143F $SG88996        db ?                    ; DATA XREF: _staticedit_internal+F0o
.bss:00001440 ; const CHAR _SG89037
.bss:00001440 $SG89037        db ?                    ; DATA XREF: _staticddl+F0o
.bss:00001441 ; const CHAR _SG89057
.bss:00001441 $SG89057        db ?                    ; DATA XREF: _staticcombo+F0o
.bss:00001442 ; const CHAR _SG89072
.bss:00001442 $SG89072        db ?                    ; DATA XREF: _staticddlbig+BFo
.bss:00001443 ; const CHAR _SG89088
.bss:00001443 $SG89088        db ?                    ; DATA XREF: _bigeditctrl+DCo
.bss:00001444 ; const CHAR _SG89108
.bss:00001444 $SG89108        db ?                    ; DATA XREF: _listbox+DCo
.bss:00001445 ; const CHAR _SG89132
.bss:00001445 $SG89132        db ?                    ; DATA XREF: _ersatztab+114o
.bss:00001446 ; const CHAR _SG89134
.bss:00001446 $SG89134        db ?                    ; DATA XREF: _ersatztab+18Do
.bss:00001447 ; const CHAR _SG89155
.bss:00001447 $SG89155        db ?                    ; DATA XREF: _editbutton+F5o
.bss:00001448 ; const CHAR _SG89201
.bss:00001448 $SG89201        db ?                    ; DATA XREF: _prefslist+19Ao
.bss:00001449 $SG89279        db    ? ;               ; DATA XREF: _handle_prefslist+77o
.bss:0000144A ; const CHAR _SG89324
.bss:0000144A $SG89324        db ?                    ; DATA XREF: _progressbar+61o
.bss:0000144B ; const CHAR _SG89634
.bss:0000144B $SG89634        db ?                    ; DATA XREF: _winctrl_layout+108Bo
.bss:0000144C $SG89635        db    ? ;               ; DATA XREF: _winctrl_layout+10A5o
.bss:0000144D $SG90240        db    ? ;               ; DATA XREF: _dlg_fontsel_set:loc_7F30o
.bss:0000144E                 db    ? ;
.bss:0000144F                 db    ? ;
.bss:00001450 ; `winctrl_handle_command'::`2'::draglistmsg
.bss:00001450 ?draglistmsg@?1??winctrl_handle_command@@9@9 dd ?
.bss:00001450                                         ; DATA XREF: _winctrl_handle_command+27r
.bss:00001450                                         ; _winctrl_handle_command+44w ...
.bss:00001454                 align 8
.bss:00001458 ; `winctrl_handle_command'::`21'::custom
.bss:00001458 ?custom@?BF@??winctrl_handle_command@@9@9 db    ? ;
.bss:00001458                                         ; DATA XREF: _winctrl_handle_command+E9Eo
.bss:00001459                 db    ? ;
.bss:0000145A                 db    ? ;
.bss:0000145B                 db    ? ;
.bss:0000145C                 db    ? ;
.bss:0000145D                 db    ? ;
.bss:0000145E                 db    ? ;
.bss:0000145F                 db    ? ;
.bss:00001460                 db    ? ;
.bss:00001461                 db    ? ;
.bss:00001462                 db    ? ;
.bss:00001463                 db    ? ;
.bss:00001464                 db    ? ;
.bss:00001465                 db    ? ;
.bss:00001466                 db    ? ;
.bss:00001467                 db    ? ;
.bss:00001468                 db    ? ;
.bss:00001469                 db    ? ;
.bss:0000146A                 db    ? ;
.bss:0000146B                 db    ? ;
.bss:0000146C                 db    ? ;
.bss:0000146D                 db    ? ;
.bss:0000146E                 db    ? ;
.bss:0000146F                 db    ? ;
.bss:00001470                 db    ? ;
.bss:00001471                 db    ? ;
.bss:00001472                 db    ? ;
.bss:00001473                 db    ? ;
.bss:00001474                 db    ? ;
.bss:00001475                 db    ? ;
.bss:00001476                 db    ? ;
.bss:00001477                 db    ? ;
.bss:00001478                 db    ? ;
.bss:00001479                 db    ? ;
.bss:0000147A                 db    ? ;
.bss:0000147B                 db    ? ;
.bss:0000147C                 db    ? ;
.bss:0000147D                 db    ? ;
.bss:0000147E                 db    ? ;
.bss:0000147F                 db    ? ;
.bss:00001480                 db    ? ;
.bss:00001481                 db    ? ;
.bss:00001482                 db    ? ;
.bss:00001483                 db    ? ;
.bss:00001484                 db    ? ;
.bss:00001485                 db    ? ;
.bss:00001486                 db    ? ;
.bss:00001487                 db    ? ;
.bss:00001488                 db    ? ;
.bss:00001489                 db    ? ;
.bss:0000148A                 db    ? ;
.bss:0000148B                 db    ? ;
.bss:0000148C                 db    ? ;
.bss:0000148D                 db    ? ;
.bss:0000148E                 db    ? ;
.bss:0000148F                 db    ? ;
.bss:00001490                 db    ? ;
.bss:00001491                 db    ? ;
.bss:00001492                 db    ? ;
.bss:00001493                 db    ? ;
.bss:00001494                 db    ? ;
.bss:00001495                 db    ? ;
.bss:00001496                 db    ? ;
.bss:00001497                 db    ? ;
.bss:00001497 _bss            ends
.bss:00001497
.rdata:00001498 ; ===========================================================================
.rdata:00001498
.rdata:00001498 ; Segment type: Pure data
.rdata:00001498 ; Segment permissions: Read
.rdata:00001498 _rdata          segment dword public 'DATA' use32
.rdata:00001498                 assume cs:_rdata
.rdata:00001498                 ;org 1498h
.rdata:00001498 ; `ersatztab'::`2'::BIGGAP
.rdata:00001498 ?BIGGAP@?1??ersatztab@@9@9 dd 0Fh       ; DATA XREF: _ersatztab+30r
.rdata:00001498                                         ; _ersatztab+52r ...
.rdata:0000149C ; `ersatztab'::`2'::MEDGAP
.rdata:0000149C ?MEDGAP@?1??ersatztab@@9@9 dd 3         ; DATA XREF: _ersatztab+43r
.rdata:0000149C                                         ; _ersatztab+153r
.rdata:000014A0 ; `prefslist'::`2'::percents
.rdata:000014A0 ?percents@?1??prefslist@@9@9 dd 5       ; DATA XREF: _prefslist+139r
.rdata:000014A4                 dd offset unk_4B
.rdata:000014A8                 db  14h
.rdata:000014A9                 db    0
.rdata:000014AA                 db    0
.rdata:000014AB                 db    0
.rdata:000014AB _rdata          ends
.rdata:000014AB
.text:000014AC ; ===========================================================================
.text:000014AC
.text:000014AC ; Segment type: Pure code
.text:000014AC ; Segment permissions: Read/Execute
.text:000014AC _text           segment para public 'CODE' use32
.text:000014AC                 assume cs:_text
.text:000014AC                 ;org 14ACh
.text:000014AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000014AC
.text:000014AC ; =============== S U B R O U T I N E =======================================
.text:000014AC
.text:000014AC ; Attributes: bp-based frame
.text:000014AC
.text:000014AC ; int __cdecl ctlposinit(int, HWND hWnd, int, int, int)
.text:000014AC                 public _ctlposinit
.text:000014AC _ctlposinit     proc near
.text:000014AC
.text:000014AC var_34          = byte ptr -34h
.text:000014AC var_30          = tagRECT ptr -30h
.text:000014AC Rect            = tagRECT ptr -18h
.text:000014AC var_4           = dword ptr -4
.text:000014AC arg_0           = dword ptr  8
.text:000014AC hWnd            = dword ptr  0Ch
.text:000014AC arg_8           = dword ptr  10h
.text:000014AC arg_C           = dword ptr  14h
.text:000014AC arg_10          = dword ptr  18h
.text:000014AC
.text:000014AC                 push    ebp
.text:000014AD                 mov     ebp, esp
.text:000014AF                 sub     esp, 34h
.text:000014B2                 push    esi
.text:000014B3                 push    edi
.text:000014B4                 lea     edi, [ebp+var_34]
.text:000014B7                 mov     ecx, 0Dh
.text:000014BC                 mov     eax, 0CCCCCCCCh
.text:000014C1                 rep stosd
.text:000014C3                 mov     eax, dword ptr ds:___security_cookie
.text:000014C8                 xor     eax, ebp
.text:000014CA                 mov     [ebp+var_4], eax
.text:000014CD                 mov     eax, [ebp+arg_0]
.text:000014D0                 mov     ecx, [ebp+hWnd]
.text:000014D3                 mov     [eax], ecx
.text:000014D5                 mov     esi, esp
.text:000014D7                 push    0               ; lParam
.text:000014D9                 push    0               ; wParam
.text:000014DB                 push    31h ; '1'       ; Msg
.text:000014DD                 mov     edx, [ebp+hWnd]
.text:000014E0                 push    edx             ; hWnd
.text:000014E1                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:000014E7                 cmp     esi, esp
.text:000014E9                 call    __RTC_CheckEsp
.text:000014EE                 mov     ecx, [ebp+arg_0]
.text:000014F1                 mov     [ecx+4], eax
.text:000014F4                 mov     edx, [ebp+arg_0]
.text:000014F7                 mov     eax, [ebp+arg_10]
.text:000014FA                 mov     [edx+0Ch], eax
.text:000014FD                 mov     esi, esp
.text:000014FF                 lea     ecx, [ebp+Rect]
.text:00001502                 push    ecx             ; lpRect
.text:00001503                 mov     edx, [ebp+hWnd]
.text:00001506                 push    edx             ; hWnd
.text:00001507                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text:0000150D                 cmp     esi, esp
.text:0000150F                 call    __RTC_CheckEsp
.text:00001514                 mov     [ebp+var_30.top], 0
.text:0000151B                 mov     eax, [ebp+var_30.top]
.text:0000151E                 mov     [ebp+var_30.left], eax
.text:00001521                 mov     [ebp+var_30.right], 4
.text:00001528                 mov     [ebp+var_30.bottom], 8
.text:0000152F                 mov     esi, esp
.text:00001531                 lea     ecx, [ebp+var_30]
.text:00001534                 push    ecx             ; lpRect
.text:00001535                 mov     edx, [ebp+hWnd]
.text:00001538                 push    edx             ; hDlg
.text:00001539                 call    dword ptr ds:__imp__MapDialogRect@8 ; MapDialogRect(x,x)
.text:0000153F                 cmp     esi, esp
.text:00001541                 call    __RTC_CheckEsp
.text:00001546                 mov     eax, [ebp+arg_0]
.text:00001549                 mov     ecx, [ebp+var_30.right]
.text:0000154C                 mov     [eax+8], ecx
.text:0000154F                 mov     eax, [ebp+Rect.right]
.text:00001552                 shl     eax, 2
.text:00001555                 cdq
.text:00001556                 idiv    [ebp+var_30.right]
.text:00001559                 sub     eax, 6
.text:0000155C                 mov     edx, [ebp+arg_0]
.text:0000155F                 mov     [edx+10h], eax
.text:00001562                 mov     eax, [ebp+arg_0]
.text:00001565                 mov     ecx, [ebp+arg_8]
.text:00001568                 mov     [eax+14h], ecx
.text:0000156B                 mov     edx, [ebp+arg_8]
.text:0000156E                 add     edx, [ebp+arg_C]
.text:00001571                 mov     eax, [ebp+arg_0]
.text:00001574                 mov     ecx, [eax+10h]
.text:00001577                 sub     ecx, edx
.text:00001579                 mov     edx, [ebp+arg_0]
.text:0000157C                 mov     [edx+10h], ecx
.text:0000157F                 push    edx
.text:00001580                 mov     ecx, ebp
.text:00001582                 push    eax
.text:00001583                 lea     edx, $LN6
.text:00001589                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000158E                 pop     eax
.text:0000158F                 pop     edx
.text:00001590                 pop     edi
.text:00001591                 pop     esi
.text:00001592                 mov     ecx, [ebp+var_4]
.text:00001595                 xor     ecx, ebp
.text:00001597                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000159C                 add     esp, 34h
.text:0000159F                 cmp     ebp, esp
.text:000015A1                 call    __RTC_CheckEsp
.text:000015A6                 mov     esp, ebp
.text:000015A8                 pop     ebp
.text:000015A9                 retn
.text:000015A9 _ctlposinit     endp
.text:000015A9
.text:000015A9 ; ---------------------------------------------------------------------------
.text:000015AA                 align 4
.text:000015AC $LN6            dd 2                    ; DATA XREF: _ctlposinit+D7o
.text:000015B0                 dd offset $LN5
.text:000015B4 $LN5            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000015B0o
.text:000015BC                 dd offset $LN3
.text:000015C0                 dd 0FFFFFFD0h, 10h
.text:000015C8                 dd offset $LN4
.text:000015CC $LN4            db 72h, 32h, 0          ; DATA XREF: .text:000015C8o
.text:000015CF $LN3            db 72h                  ; DATA XREF: .text:000015BCo
.text:000015D0                 dd 0CCCCCC00h, 2 dup(0CCCCCCCCh)
.text:000015DC
.text:000015DC ; =============== S U B R O U T I N E =======================================
.text:000015DC
.text:000015DC ; Attributes: bp-based frame
.text:000015DC
.text:000015DC ; int __cdecl doctl(int, struct tagRECT Rect, LPCSTR lpClassName, DWORD dwStyle, DWORD dwExStyle, LPCSTR lpWindowName, HMENU hMenu)
.text:000015DC                 public _doctl
.text:000015DC _doctl          proc near               ; CODE XREF: _bartitle+91p
.text:000015DC                                         ; _endbox+D4p ...
.text:000015DC
.text:000015DC var_10          = dword ptr -10h
.text:000015DC var_C           = dword ptr -0Ch
.text:000015DC var_8           = dword ptr -8
.text:000015DC hWnd            = dword ptr -4
.text:000015DC arg_0           = dword ptr  8
.text:000015DC Rect            = tagRECT ptr  0Ch
.text:000015DC lpClassName     = dword ptr  1Ch
.text:000015DC dwStyle         = dword ptr  20h
.text:000015DC dwExStyle       = dword ptr  24h
.text:000015DC lpWindowName    = dword ptr  28h
.text:000015DC hMenu           = dword ptr  2Ch
.text:000015DC
.text:000015DC                 push    ebp
.text:000015DD                 mov     ebp, esp
.text:000015DF                 sub     esp, 10h
.text:000015E2                 push    esi
.text:000015E3                 mov     eax, 0CCCCCCCCh
.text:000015E8                 mov     [ebp+var_10], eax
.text:000015EB                 mov     [ebp+var_C], eax
.text:000015EE                 mov     [ebp+var_8], eax
.text:000015F1                 mov     [ebp+hWnd], eax
.text:000015F4                 mov     eax, [ebp+arg_0]
.text:000015F7                 mov     ecx, [ebp+Rect.left]
.text:000015FA                 add     ecx, [eax+14h]
.text:000015FD                 mov     [ebp+Rect.left], ecx
.text:00001600                 mov     esi, esp
.text:00001602                 lea     edx, [ebp+Rect]
.text:00001605                 push    edx             ; lpRect
.text:00001606                 mov     eax, [ebp+arg_0]
.text:00001609                 mov     ecx, [eax]
.text:0000160B                 push    ecx             ; hDlg
.text:0000160C                 call    dword ptr ds:__imp__MapDialogRect@8 ; MapDialogRect(x,x)
.text:00001612                 cmp     esi, esp
.text:00001614                 call    __RTC_CheckEsp
.text:00001619                 mov     edx, [ebp+arg_0]
.text:0000161C                 cmp     dword ptr [edx], 0
.text:0000161F                 jz      loc_16C4
.text:00001625                 mov     esi, esp
.text:00001627                 push    0               ; lpParam
.text:00001629                 mov     eax, dword ptr ds:_hinst
.text:0000162E                 push    eax             ; hInstance
.text:0000162F                 mov     ecx, [ebp+hMenu]
.text:00001632                 push    ecx             ; hMenu
.text:00001633                 mov     edx, [ebp+arg_0]
.text:00001636                 mov     eax, [edx]
.text:00001638                 push    eax             ; hWndParent
.text:00001639                 mov     ecx, [ebp+Rect.bottom]
.text:0000163C                 push    ecx             ; nHeight
.text:0000163D                 mov     edx, [ebp+Rect.right]
.text:00001640                 push    edx             ; nWidth
.text:00001641                 mov     eax, [ebp+Rect.top]
.text:00001644                 push    eax             ; Y
.text:00001645                 mov     ecx, [ebp+Rect.left]
.text:00001648                 push    ecx             ; X
.text:00001649                 mov     edx, [ebp+dwStyle]
.text:0000164C                 push    edx             ; dwStyle
.text:0000164D                 mov     eax, [ebp+lpWindowName]
.text:00001650                 push    eax             ; lpWindowName
.text:00001651                 mov     ecx, [ebp+lpClassName]
.text:00001654                 push    ecx             ; lpClassName
.text:00001655                 mov     edx, [ebp+dwExStyle]
.text:00001658                 push    edx             ; dwExStyle
.text:00001659                 call    dword ptr ds:__imp__CreateWindowExA@48 ; CreateWindowExA(x,x,x,x,x,x,x,x,x,x,x,x)
.text:0000165F                 cmp     esi, esp
.text:00001661                 call    __RTC_CheckEsp
.text:00001666                 mov     [ebp+hWnd], eax
.text:00001669                 mov     esi, esp
.text:0000166B                 push    1               ; lParam
.text:0000166D                 mov     eax, [ebp+arg_0]
.text:00001670                 mov     ecx, [eax+4]
.text:00001673                 push    ecx             ; wParam
.text:00001674                 push    30h ; '0'       ; Msg
.text:00001676                 mov     edx, [ebp+hWnd]
.text:00001679                 push    edx             ; hWnd
.text:0000167A                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00001680                 cmp     esi, esp
.text:00001682                 call    __RTC_CheckEsp
.text:00001687                 push    offset $SG88581 ; "LISTBOX"
.text:0000168C                 mov     eax, [ebp+lpClassName]
.text:0000168F                 push    eax             ; Str1
.text:00001690                 call    _strcmp
.text:00001695                 add     esp, 8
.text:00001698                 test    eax, eax
.text:0000169A                 jnz     short loc_16C2
.text:0000169C                 mov     esi, esp
.text:0000169E                 push    116h            ; uFlags
.text:000016A3                 mov     ecx, [ebp+Rect.bottom]
.text:000016A6                 push    ecx             ; cy
.text:000016A7                 mov     edx, [ebp+Rect.right]
.text:000016AA                 push    edx             ; cx
.text:000016AB                 push    0               ; Y
.text:000016AD                 push    0               ; X
.text:000016AF                 push    0               ; hWndInsertAfter
.text:000016B1                 mov     eax, [ebp+hWnd]
.text:000016B4                 push    eax             ; hWnd
.text:000016B5                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text:000016BB                 cmp     esi, esp
.text:000016BD                 call    __RTC_CheckEsp
.text:000016C2
.text:000016C2 loc_16C2:                               ; CODE XREF: _doctl+BEj
.text:000016C2                 jmp     short loc_16CB
.text:000016C4 ; ---------------------------------------------------------------------------
.text:000016C4
.text:000016C4 loc_16C4:                               ; CODE XREF: _doctl+43j
.text:000016C4                 mov     [ebp+hWnd], 0
.text:000016CB
.text:000016CB loc_16CB:                               ; CODE XREF: _doctl:loc_16C2j
.text:000016CB                 mov     eax, [ebp+hWnd]
.text:000016CE                 push    edx
.text:000016CF                 mov     ecx, ebp
.text:000016D1                 push    eax
.text:000016D2                 lea     edx, $LN8
.text:000016D8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000016DD                 pop     eax
.text:000016DE                 pop     edx
.text:000016DF                 pop     esi
.text:000016E0                 add     esp, 10h
.text:000016E3                 cmp     ebp, esp
.text:000016E5                 call    __RTC_CheckEsp
.text:000016EA                 mov     esp, ebp
.text:000016EC                 pop     ebp
.text:000016ED                 retn
.text:000016ED _doctl          endp
.text:000016ED
.text:000016ED ; ---------------------------------------------------------------------------
.text:000016EE                 align 10h
.text:000016F0 $LN8            dd 1                    ; DATA XREF: _doctl+F6o
.text:000016F4                 dd offset $LN7
.text:000016F8 $LN7            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000016F4o
.text:00001700                 dd offset $LN6_0        ; "_$ArrayPad"
.text:00001704 $LN6_0          db '_$ArrayPad',0       ; DATA XREF: .text:00001700o
.text:0000170F                 db 0Dh dup(0CCh)
.text:0000171C
.text:0000171C ; =============== S U B R O U T I N E =======================================
.text:0000171C
.text:0000171C ; Attributes: bp-based frame
.text:0000171C
.text:0000171C ; int __cdecl bartitle(int, LPCSTR lpWindowName, HMENU hMenu)
.text:0000171C                 public _bartitle
.text:0000171C _bartitle       proc near
.text:0000171C
.text:0000171C var_1C          = dword ptr -1Ch
.text:0000171C var_18          = dword ptr -18h
.text:0000171C var_14          = dword ptr -14h
.text:0000171C var_10          = dword ptr -10h
.text:0000171C var_C           = dword ptr -0Ch
.text:0000171C var_8           = dword ptr -8
.text:0000171C var_4           = dword ptr -4
.text:0000171C arg_0           = dword ptr  8
.text:0000171C lpWindowName    = dword ptr  0Ch
.text:0000171C hMenu           = dword ptr  10h
.text:0000171C
.text:0000171C                 push    ebp
.text:0000171D                 mov     ebp, esp
.text:0000171F                 sub     esp, 1Ch
.text:00001722                 mov     eax, 0CCCCCCCCh
.text:00001727                 mov     [ebp+var_1C], eax
.text:0000172A                 mov     [ebp+var_18], eax
.text:0000172D                 mov     [ebp+var_14], eax
.text:00001730                 mov     [ebp+var_10], eax
.text:00001733                 mov     [ebp+var_C], eax
.text:00001736                 mov     [ebp+var_8], eax
.text:00001739                 mov     [ebp+var_4], eax
.text:0000173C                 mov     eax, dword ptr ds:___security_cookie
.text:00001741                 xor     eax, ebp
.text:00001743                 mov     [ebp+var_4], eax
.text:00001746                 mov     [ebp+var_18], 3
.text:0000174D                 mov     eax, [ebp+arg_0]
.text:00001750                 mov     ecx, [eax+10h]
.text:00001753                 mov     [ebp+var_10], ecx
.text:00001756                 mov     edx, [ebp+arg_0]
.text:00001759                 mov     eax, [edx+0Ch]
.text:0000175C                 mov     [ebp+var_14], eax
.text:0000175F                 mov     [ebp+var_C], 8
.text:00001766                 mov     ecx, [ebp+arg_0]
.text:00001769                 mov     edx, [ecx+0Ch]
.text:0000176C                 mov     eax, [ebp+var_C]
.text:0000176F                 lea     ecx, [eax+edx+3]
.text:00001773                 mov     edx, [ebp+arg_0]
.text:00001776                 mov     [edx+0Ch], ecx
.text:00001779                 mov     eax, [ebp+hMenu]
.text:0000177C                 push    eax             ; hMenu
.text:0000177D                 mov     ecx, [ebp+lpWindowName]
.text:00001780                 push    ecx             ; lpWindowName
.text:00001781                 push    0               ; dwExStyle
.text:00001783                 push    50000000h       ; dwStyle
.text:00001788                 push    offset $SG88593 ; "STATIC"
.text:0000178D                 sub     esp, 10h
.text:00001790                 mov     edx, esp
.text:00001792                 mov     eax, [ebp+var_18]
.text:00001795                 mov     [edx], eax
.text:00001797                 mov     ecx, [ebp+var_14]
.text:0000179A                 mov     [edx+4], ecx
.text:0000179D                 mov     eax, [ebp+var_10]
.text:000017A0                 mov     [edx+8], eax
.text:000017A3                 mov     ecx, [ebp+var_C]
.text:000017A6                 mov     [edx+0Ch], ecx
.text:000017A9                 mov     edx, [ebp+arg_0]
.text:000017AC                 push    edx             ; int
.text:000017AD                 call    _doctl
.text:000017B2                 add     esp, 28h
.text:000017B5                 push    edx
.text:000017B6                 mov     ecx, ebp
.text:000017B8                 push    eax
.text:000017B9                 lea     edx, $LN5_0
.text:000017BF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000017C4                 pop     eax
.text:000017C5                 pop     edx
.text:000017C6                 mov     ecx, [ebp+var_4]
.text:000017C9                 xor     ecx, ebp
.text:000017CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000017D0                 add     esp, 1Ch
.text:000017D3                 cmp     ebp, esp
.text:000017D5                 call    __RTC_CheckEsp
.text:000017DA                 mov     esp, ebp
.text:000017DC                 pop     ebp
.text:000017DD                 retn
.text:000017DD _bartitle       endp
.text:000017DD
.text:000017DD ; ---------------------------------------------------------------------------
.text:000017DE                 align 10h
.text:000017E0 $LN5_0          dd 1                    ; DATA XREF: _bartitle+9Do
.text:000017E4                 dd offset $LN4_0
.text:000017E8 $LN4_0          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000017E4o
.text:000017F0                 dd offset $LN3_0
.text:000017F4 $LN3_0          dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:000017F0o
.text:000017FC
.text:000017FC ; =============== S U B R O U T I N E =======================================
.text:000017FC
.text:000017FC ; Attributes: bp-based frame
.text:000017FC
.text:000017FC                 public _beginbox
.text:000017FC _beginbox       proc near               ; CODE XREF: _winctrl_layout+D2p
.text:000017FC
.text:000017FC arg_0           = dword ptr  8
.text:000017FC arg_4           = dword ptr  0Ch
.text:000017FC arg_8           = dword ptr  10h
.text:000017FC
.text:000017FC                 push    ebp
.text:000017FD                 mov     ebp, esp
.text:000017FF                 mov     eax, [ebp+arg_0]
.text:00001802                 mov     ecx, [ebp+arg_0]
.text:00001805                 mov     edx, [ecx+0Ch]
.text:00001808                 mov     [eax+18h], edx
.text:0000180B                 cmp     [ebp+arg_4], 0
.text:0000180F                 jnz     short loc_1820
.text:00001811                 mov     eax, [ebp+arg_0]
.text:00001814                 mov     ecx, [eax+18h]
.text:00001817                 sub     ecx, 4
.text:0000181A                 mov     edx, [ebp+arg_0]
.text:0000181D                 mov     [edx+18h], ecx
.text:00001820
.text:00001820 loc_1820:                               ; CODE XREF: _beginbox+13j
.text:00001820                 cmp     [ebp+arg_4], 0
.text:00001824                 jz      short loc_1835
.text:00001826                 mov     eax, [ebp+arg_0]
.text:00001829                 mov     ecx, [eax+0Ch]
.text:0000182C                 add     ecx, 8
.text:0000182F                 mov     edx, [ebp+arg_0]
.text:00001832                 mov     [edx+0Ch], ecx
.text:00001835
.text:00001835 loc_1835:                               ; CODE XREF: _beginbox+28j
.text:00001835                 mov     eax, [ebp+arg_0]
.text:00001838                 mov     ecx, [eax+0Ch]
.text:0000183B                 add     ecx, 4
.text:0000183E                 mov     edx, [ebp+arg_0]
.text:00001841                 mov     [edx+0Ch], ecx
.text:00001844                 mov     eax, [ebp+arg_0]
.text:00001847                 mov     ecx, [eax+10h]
.text:0000184A                 sub     ecx, 0Eh
.text:0000184D                 mov     edx, [ebp+arg_0]
.text:00001850                 mov     [edx+10h], ecx
.text:00001853                 mov     eax, [ebp+arg_0]
.text:00001856                 mov     ecx, [eax+14h]
.text:00001859                 add     ecx, 7
.text:0000185C                 mov     edx, [ebp+arg_0]
.text:0000185F                 mov     [edx+14h], ecx
.text:00001862                 mov     eax, [ebp+arg_0]
.text:00001865                 mov     ecx, [ebp+arg_8]
.text:00001868                 mov     [eax+1Ch], ecx
.text:0000186B                 mov     edx, [ebp+arg_0]
.text:0000186E                 mov     eax, [ebp+arg_4]
.text:00001871                 mov     [edx+20h], eax
.text:00001874                 pop     ebp
.text:00001875                 retn
.text:00001875 _beginbox       endp
.text:00001875
.text:00001875 ; ---------------------------------------------------------------------------
.text:00001876                 db 6 dup(0CCh)
.text:0000187C
.text:0000187C ; =============== S U B R O U T I N E =======================================
.text:0000187C
.text:0000187C ; Attributes: bp-based frame
.text:0000187C
.text:0000187C                 public _endbox
.text:0000187C _endbox         proc near               ; CODE XREF: _winctrl_layout+1294p
.text:0000187C
.text:0000187C lpWindowName    = dword ptr -20h
.text:0000187C var_1C          = dword ptr -1Ch
.text:0000187C var_18          = dword ptr -18h
.text:0000187C var_14          = dword ptr -14h
.text:0000187C var_10          = dword ptr -10h
.text:0000187C var_C           = dword ptr -0Ch
.text:0000187C var_8           = dword ptr -8
.text:0000187C var_4           = dword ptr -4
.text:0000187C arg_0           = dword ptr  8
.text:0000187C
.text:0000187C                 push    ebp
.text:0000187D                 mov     ebp, esp
.text:0000187F                 sub     esp, 20h
.text:00001882                 mov     eax, 0CCCCCCCCh
.text:00001887                 mov     [ebp+lpWindowName], eax
.text:0000188A                 mov     [ebp+var_1C], eax
.text:0000188D                 mov     [ebp+var_18], eax
.text:00001890                 mov     [ebp+var_14], eax
.text:00001893                 mov     [ebp+var_10], eax
.text:00001896                 mov     [ebp+var_C], eax
.text:00001899                 mov     [ebp+var_8], eax
.text:0000189C                 mov     [ebp+var_4], eax
.text:0000189F                 mov     eax, dword ptr ds:___security_cookie
.text:000018A4                 xor     eax, ebp
.text:000018A6                 mov     [ebp+var_4], eax
.text:000018A9                 mov     eax, [ebp+arg_0]
.text:000018AC                 mov     ecx, [eax+14h]
.text:000018AF                 sub     ecx, 7
.text:000018B2                 mov     edx, [ebp+arg_0]
.text:000018B5                 mov     [edx+14h], ecx
.text:000018B8                 mov     eax, [ebp+arg_0]
.text:000018BB                 mov     ecx, [eax+10h]
.text:000018BE                 add     ecx, 0Eh
.text:000018C1                 mov     edx, [ebp+arg_0]
.text:000018C4                 mov     [edx+10h], ecx
.text:000018C7                 mov     eax, [ebp+arg_0]
.text:000018CA                 mov     ecx, [eax+0Ch]
.text:000018CD                 add     ecx, 1
.text:000018D0                 mov     edx, [ebp+arg_0]
.text:000018D3                 mov     [edx+0Ch], ecx
.text:000018D6                 mov     [ebp+var_18], 3
.text:000018DD                 mov     eax, [ebp+arg_0]
.text:000018E0                 mov     ecx, [eax+10h]
.text:000018E3                 mov     [ebp+var_10], ecx
.text:000018E6                 mov     edx, [ebp+arg_0]
.text:000018E9                 mov     eax, [edx+18h]
.text:000018EC                 mov     [ebp+var_14], eax
.text:000018EF                 mov     ecx, [ebp+arg_0]
.text:000018F2                 mov     edx, [ebp+arg_0]
.text:000018F5                 mov     eax, [ecx+0Ch]
.text:000018F8                 sub     eax, [edx+18h]
.text:000018FB                 mov     [ebp+var_C], eax
.text:000018FE                 mov     ecx, [ebp+arg_0]
.text:00001901                 cmp     dword ptr [ecx+20h], 0
.text:00001905                 jz      short loc_1912
.text:00001907                 mov     edx, [ebp+arg_0]
.text:0000190A                 mov     eax, [edx+20h]
.text:0000190D                 mov     [ebp+lpWindowName], eax
.text:00001910                 jmp     short loc_1919
.text:00001912 ; ---------------------------------------------------------------------------
.text:00001912
.text:00001912 loc_1912:                               ; CODE XREF: _endbox+89j
.text:00001912                 mov     [ebp+lpWindowName], offset $SG88607
.text:00001919
.text:00001919 loc_1919:                               ; CODE XREF: _endbox+94j
.text:00001919                 mov     ecx, [ebp+arg_0]
.text:0000191C                 mov     edx, [ecx+1Ch]
.text:0000191F                 push    edx             ; hMenu
.text:00001920                 mov     eax, [ebp+lpWindowName]
.text:00001923                 push    eax             ; lpWindowName
.text:00001924                 push    0               ; dwExStyle
.text:00001926                 push    50000007h       ; dwStyle
.text:0000192B                 push    offset $SG88608 ; "BUTTON"
.text:00001930                 sub     esp, 10h
.text:00001933                 mov     ecx, esp
.text:00001935                 mov     edx, [ebp+var_18]
.text:00001938                 mov     [ecx], edx
.text:0000193A                 mov     eax, [ebp+var_14]
.text:0000193D                 mov     [ecx+4], eax
.text:00001940                 mov     edx, [ebp+var_10]
.text:00001943                 mov     [ecx+8], edx
.text:00001946                 mov     eax, [ebp+var_C]
.text:00001949                 mov     [ecx+0Ch], eax
.text:0000194C                 mov     ecx, [ebp+arg_0]
.text:0000194F                 push    ecx             ; int
.text:00001950                 call    _doctl
.text:00001955                 add     esp, 28h
.text:00001958                 mov     edx, [ebp+arg_0]
.text:0000195B                 mov     eax, [edx+0Ch]
.text:0000195E                 add     eax, 4
.text:00001961                 mov     ecx, [ebp+arg_0]
.text:00001964                 mov     [ecx+0Ch], eax
.text:00001967                 push    edx
.text:00001968                 mov     ecx, ebp
.text:0000196A                 push    eax
.text:0000196B                 lea     edx, $LN7_0
.text:00001971                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001976                 pop     eax
.text:00001977                 pop     edx
.text:00001978                 mov     ecx, [ebp+var_4]
.text:0000197B                 xor     ecx, ebp
.text:0000197D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001982                 add     esp, 20h
.text:00001985                 cmp     ebp, esp
.text:00001987                 call    __RTC_CheckEsp
.text:0000198C                 mov     esp, ebp
.text:0000198E                 pop     ebp
.text:0000198F                 retn
.text:0000198F _endbox         endp
.text:0000198F
.text:0000198F ; ---------------------------------------------------------------------------
.text:00001990 $LN7_0          dd 1                    ; DATA XREF: _endbox+EFo
.text:00001994                 dd offset $LN6_1
.text:00001998 $LN6_1          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001994o
.text:000019A0                 dd offset $LN5_1
.text:000019A4 $LN5_1          dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:000019A0o
.text:000019AC
.text:000019AC ; =============== S U B R O U T I N E =======================================
.text:000019AC
.text:000019AC ; Attributes: bp-based frame
.text:000019AC
.text:000019AC ; int __cdecl editboxfw(int, int, LPCSTR lpWindowName, HMENU hMenu, HMENU)
.text:000019AC                 public _editboxfw
.text:000019AC _editboxfw      proc near               ; CODE XREF: _winctrl_layout+86Bp
.text:000019AC
.text:000019AC var_1C          = dword ptr -1Ch
.text:000019AC var_18          = dword ptr -18h
.text:000019AC var_14          = dword ptr -14h
.text:000019AC var_10          = dword ptr -10h
.text:000019AC var_C           = dword ptr -0Ch
.text:000019AC var_8           = dword ptr -8
.text:000019AC var_4           = dword ptr -4
.text:000019AC arg_0           = dword ptr  8
.text:000019AC arg_4           = dword ptr  0Ch
.text:000019AC lpWindowName    = dword ptr  10h
.text:000019AC hMenu           = dword ptr  14h
.text:000019AC arg_10          = dword ptr  18h
.text:000019AC
.text:000019AC                 push    ebp
.text:000019AD                 mov     ebp, esp
.text:000019AF                 sub     esp, 1Ch
.text:000019B2                 mov     eax, 0CCCCCCCCh
.text:000019B7                 mov     [ebp+var_1C], eax
.text:000019BA                 mov     [ebp+var_18], eax
.text:000019BD                 mov     [ebp+var_14], eax
.text:000019C0                 mov     [ebp+var_10], eax
.text:000019C3                 mov     [ebp+var_C], eax
.text:000019C6                 mov     [ebp+var_8], eax
.text:000019C9                 mov     [ebp+var_4], eax
.text:000019CC                 mov     eax, dword ptr ds:___security_cookie
.text:000019D1                 xor     eax, ebp
.text:000019D3                 mov     [ebp+var_4], eax
.text:000019D6                 mov     [ebp+var_18], 3
.text:000019DD                 mov     eax, [ebp+arg_0]
.text:000019E0                 mov     ecx, [eax+10h]
.text:000019E3                 mov     [ebp+var_10], ecx
.text:000019E6                 cmp     [ebp+lpWindowName], 0
.text:000019EA                 jz      short loc_1A47
.text:000019EC                 mov     edx, [ebp+arg_0]
.text:000019EF                 mov     eax, [edx+0Ch]
.text:000019F2                 mov     [ebp+var_14], eax
.text:000019F5                 mov     [ebp+var_C], 8
.text:000019FC                 mov     ecx, [ebp+hMenu]
.text:000019FF                 push    ecx             ; hMenu
.text:00001A00                 mov     edx, [ebp+lpWindowName]
.text:00001A03                 push    edx             ; lpWindowName
.text:00001A04                 push    0               ; dwExStyle
.text:00001A06                 push    50000000h       ; dwStyle
.text:00001A0B                 push    offset $SG88622 ; "STATIC"
.text:00001A10                 sub     esp, 10h
.text:00001A13                 mov     eax, esp
.text:00001A15                 mov     ecx, [ebp+var_18]
.text:00001A18                 mov     [eax], ecx
.text:00001A1A                 mov     edx, [ebp+var_14]
.text:00001A1D                 mov     [eax+4], edx
.text:00001A20                 mov     ecx, [ebp+var_10]
.text:00001A23                 mov     [eax+8], ecx
.text:00001A26                 mov     edx, [ebp+var_C]
.text:00001A29                 mov     [eax+0Ch], edx
.text:00001A2C                 mov     eax, [ebp+arg_0]
.text:00001A2F                 push    eax             ; int
.text:00001A30                 call    _doctl
.text:00001A35                 add     esp, 28h
.text:00001A38                 mov     ecx, [ebp+arg_0]
.text:00001A3B                 mov     edx, [ecx+0Ch]
.text:00001A3E                 add     edx, 9
.text:00001A41                 mov     eax, [ebp+arg_0]
.text:00001A44                 mov     [eax+0Ch], edx
.text:00001A47
.text:00001A47 loc_1A47:                               ; CODE XREF: _editboxfw+3Ej
.text:00001A47                 mov     ecx, [ebp+arg_0]
.text:00001A4A                 mov     edx, [ecx+0Ch]
.text:00001A4D                 mov     [ebp+var_14], edx
.text:00001A50                 mov     [ebp+var_C], 0Ch
.text:00001A57                 mov     eax, [ebp+arg_10]
.text:00001A5A                 push    eax             ; hMenu
.text:00001A5B                 push    offset $SG88623 ; lpWindowName
.text:00001A60                 push    200h            ; dwExStyle
.text:00001A65                 mov     ecx, [ebp+arg_4]
.text:00001A68                 neg     ecx
.text:00001A6A                 sbb     ecx, ecx
.text:00001A6C                 and     ecx, 20h
.text:00001A6F                 or      ecx, 50010080h
.text:00001A75                 push    ecx             ; dwStyle
.text:00001A76                 push    offset $SG88624 ; "EDIT"
.text:00001A7B                 sub     esp, 10h
.text:00001A7E                 mov     edx, esp
.text:00001A80                 mov     eax, [ebp+var_18]
.text:00001A83                 mov     [edx], eax
.text:00001A85                 mov     ecx, [ebp+var_14]
.text:00001A88                 mov     [edx+4], ecx
.text:00001A8B                 mov     eax, [ebp+var_10]
.text:00001A8E                 mov     [edx+8], eax
.text:00001A91                 mov     ecx, [ebp+var_C]
.text:00001A94                 mov     [edx+0Ch], ecx
.text:00001A97                 mov     edx, [ebp+arg_0]
.text:00001A9A                 push    edx             ; int
.text:00001A9B                 call    _doctl
.text:00001AA0                 add     esp, 28h
.text:00001AA3                 mov     eax, [ebp+arg_0]
.text:00001AA6                 mov     ecx, [eax+0Ch]
.text:00001AA9                 add     ecx, 0Fh
.text:00001AAC                 mov     edx, [ebp+arg_0]
.text:00001AAF                 mov     [edx+0Ch], ecx
.text:00001AB2                 push    edx
.text:00001AB3                 mov     ecx, ebp
.text:00001AB5                 push    eax
.text:00001AB6                 lea     edx, $LN6_2
.text:00001ABC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001AC1                 pop     eax
.text:00001AC2                 pop     edx
.text:00001AC3                 mov     ecx, [ebp+var_4]
.text:00001AC6                 xor     ecx, ebp
.text:00001AC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001ACD                 add     esp, 1Ch
.text:00001AD0                 cmp     ebp, esp
.text:00001AD2                 call    __RTC_CheckEsp
.text:00001AD7                 mov     esp, ebp
.text:00001AD9                 pop     ebp
.text:00001ADA                 retn
.text:00001ADA _editboxfw      endp
.text:00001ADA
.text:00001ADA ; ---------------------------------------------------------------------------
.text:00001ADB                 align 4
.text:00001ADC $LN6_2          dd 1                    ; DATA XREF: _editboxfw+10Ao
.text:00001AE0                 dd offset $LN5_2
.text:00001AE4 $LN5_2          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001AE0o
.text:00001AEC                 dd offset $LN4_1
.text:00001AF0 $LN4_1          dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001AECo
.text:00001AFC
.text:00001AFC ; =============== S U B R O U T I N E =======================================
.text:00001AFC
.text:00001AFC ; Attributes: bp-based frame
.text:00001AFC
.text:00001AFC ; int __cdecl combobox(int, LPCSTR lpWindowName, HMENU hMenu, HMENU)
.text:00001AFC                 public _combobox
.text:00001AFC _combobox       proc near               ; CODE XREF: _winctrl_layout+838p
.text:00001AFC
.text:00001AFC var_1C          = dword ptr -1Ch
.text:00001AFC var_18          = dword ptr -18h
.text:00001AFC var_14          = dword ptr -14h
.text:00001AFC var_10          = dword ptr -10h
.text:00001AFC var_C           = dword ptr -0Ch
.text:00001AFC var_8           = dword ptr -8
.text:00001AFC var_4           = dword ptr -4
.text:00001AFC arg_0           = dword ptr  8
.text:00001AFC lpWindowName    = dword ptr  0Ch
.text:00001AFC hMenu           = dword ptr  10h
.text:00001AFC arg_C           = dword ptr  14h
.text:00001AFC
.text:00001AFC                 push    ebp
.text:00001AFD                 mov     ebp, esp
.text:00001AFF                 sub     esp, 1Ch
.text:00001B02                 mov     eax, 0CCCCCCCCh
.text:00001B07                 mov     [ebp+var_1C], eax
.text:00001B0A                 mov     [ebp+var_18], eax
.text:00001B0D                 mov     [ebp+var_14], eax
.text:00001B10                 mov     [ebp+var_10], eax
.text:00001B13                 mov     [ebp+var_C], eax
.text:00001B16                 mov     [ebp+var_8], eax
.text:00001B19                 mov     [ebp+var_4], eax
.text:00001B1C                 mov     eax, dword ptr ds:___security_cookie
.text:00001B21                 xor     eax, ebp
.text:00001B23                 mov     [ebp+var_4], eax
.text:00001B26                 mov     [ebp+var_18], 3
.text:00001B2D                 mov     eax, [ebp+arg_0]
.text:00001B30                 mov     ecx, [eax+10h]
.text:00001B33                 mov     [ebp+var_10], ecx
.text:00001B36                 cmp     [ebp+lpWindowName], 0
.text:00001B3A                 jz      short loc_1B97
.text:00001B3C                 mov     edx, [ebp+arg_0]
.text:00001B3F                 mov     eax, [edx+0Ch]
.text:00001B42                 mov     [ebp+var_14], eax
.text:00001B45                 mov     [ebp+var_C], 8
.text:00001B4C                 mov     ecx, [ebp+hMenu]
.text:00001B4F                 push    ecx             ; hMenu
.text:00001B50                 mov     edx, [ebp+lpWindowName]
.text:00001B53                 push    edx             ; lpWindowName
.text:00001B54                 push    0               ; dwExStyle
.text:00001B56                 push    50000000h       ; dwStyle
.text:00001B5B                 push    offset $SG88636 ; "STATIC"
.text:00001B60                 sub     esp, 10h
.text:00001B63                 mov     eax, esp
.text:00001B65                 mov     ecx, [ebp+var_18]
.text:00001B68                 mov     [eax], ecx
.text:00001B6A                 mov     edx, [ebp+var_14]
.text:00001B6D                 mov     [eax+4], edx
.text:00001B70                 mov     ecx, [ebp+var_10]
.text:00001B73                 mov     [eax+8], ecx
.text:00001B76                 mov     edx, [ebp+var_C]
.text:00001B79                 mov     [eax+0Ch], edx
.text:00001B7C                 mov     eax, [ebp+arg_0]
.text:00001B7F                 push    eax             ; int
.text:00001B80                 call    _doctl
.text:00001B85                 add     esp, 28h
.text:00001B88                 mov     ecx, [ebp+arg_0]
.text:00001B8B                 mov     edx, [ecx+0Ch]
.text:00001B8E                 add     edx, 9
.text:00001B91                 mov     eax, [ebp+arg_0]
.text:00001B94                 mov     [eax+0Ch], edx
.text:00001B97
.text:00001B97 loc_1B97:                               ; CODE XREF: _combobox+3Ej
.text:00001B97                 mov     ecx, [ebp+arg_0]
.text:00001B9A                 mov     edx, [ecx+0Ch]
.text:00001B9D                 mov     [ebp+var_14], edx
.text:00001BA0                 mov     [ebp+var_C], 78h ; 'x'
.text:00001BA7                 mov     eax, [ebp+arg_C]
.text:00001BAA                 push    eax             ; hMenu
.text:00001BAB                 push    offset $SG88637 ; lpWindowName
.text:00001BB0                 push    200h            ; dwExStyle
.text:00001BB5                 push    50210202h       ; dwStyle
.text:00001BBA                 push    offset $SG88638 ; "COMBOBOX"
.text:00001BBF                 sub     esp, 10h
.text:00001BC2                 mov     ecx, esp
.text:00001BC4                 mov     edx, [ebp+var_18]
.text:00001BC7                 mov     [ecx], edx
.text:00001BC9                 mov     eax, [ebp+var_14]
.text:00001BCC                 mov     [ecx+4], eax
.text:00001BCF                 mov     edx, [ebp+var_10]
.text:00001BD2                 mov     [ecx+8], edx
.text:00001BD5                 mov     eax, [ebp+var_C]
.text:00001BD8                 mov     [ecx+0Ch], eax
.text:00001BDB                 mov     ecx, [ebp+arg_0]
.text:00001BDE                 push    ecx             ; int
.text:00001BDF                 call    _doctl
.text:00001BE4                 add     esp, 28h
.text:00001BE7                 mov     edx, [ebp+arg_0]
.text:00001BEA                 mov     eax, [edx+0Ch]
.text:00001BED                 add     eax, 0Fh
.text:00001BF0                 mov     ecx, [ebp+arg_0]
.text:00001BF3                 mov     [ecx+0Ch], eax
.text:00001BF6                 push    edx
.text:00001BF7                 mov     ecx, ebp
.text:00001BF9                 push    eax
.text:00001BFA                 lea     edx, $LN6_3
.text:00001C00                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001C05                 pop     eax
.text:00001C06                 pop     edx
.text:00001C07                 mov     ecx, [ebp+var_4]
.text:00001C0A                 xor     ecx, ebp
.text:00001C0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001C11                 add     esp, 1Ch
.text:00001C14                 cmp     ebp, esp
.text:00001C16                 call    __RTC_CheckEsp
.text:00001C1B                 mov     esp, ebp
.text:00001C1D                 pop     ebp
.text:00001C1E                 retn
.text:00001C1E _combobox       endp
.text:00001C1E
.text:00001C1E ; ---------------------------------------------------------------------------
.text:00001C1F                 align 10h
.text:00001C20 $LN6_3          dd 1                    ; DATA XREF: _combobox+FEo
.text:00001C24                 dd offset $LN5_3
.text:00001C28 $LN5_3          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001C24o
.text:00001C30                 dd offset $LN4_2
.text:00001C34 $LN4_2          dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:00001C30o
.text:00001C3C
.text:00001C3C ; =============== S U B R O U T I N E =======================================
.text:00001C3C
.text:00001C3C ; Attributes: bp-based frame
.text:00001C3C
.text:00001C3C ; int __cdecl radioline(int, LPCSTR lpWindowName, HMENU hMenu, int, char)
.text:00001C3C                 public _radioline
.text:00001C3C _radioline      proc near
.text:00001C3C
.text:00001C3C var_18          = dword ptr -18h
.text:00001C3C var_14          = dword ptr -14h
.text:00001C3C var_10          = dword ptr -10h
.text:00001C3C var_C           = dword ptr -0Ch
.text:00001C3C var_8           = dword ptr -8
.text:00001C3C var_4           = dword ptr -4
.text:00001C3C arg_0           = dword ptr  8
.text:00001C3C lpWindowName    = dword ptr  0Ch
.text:00001C3C hMenu           = dword ptr  10h
.text:00001C3C arg_C           = dword ptr  14h
.text:00001C3C arg_10          = byte ptr  18h
.text:00001C3C
.text:00001C3C                 push    ebp
.text:00001C3D                 mov     ebp, esp
.text:00001C3F                 sub     esp, 18h
.text:00001C42                 mov     eax, 0CCCCCCCCh
.text:00001C47                 mov     [ebp+var_18], eax
.text:00001C4A                 mov     [ebp+var_14], eax
.text:00001C4D                 mov     [ebp+var_10], eax
.text:00001C50                 mov     [ebp+var_C], eax
.text:00001C53                 mov     [ebp+var_8], eax
.text:00001C56                 mov     [ebp+var_4], eax
.text:00001C59                 lea     eax, [ebp+arg_10]
.text:00001C5C                 mov     [ebp+var_4], eax
.text:00001C5F                 mov     [ebp+var_10], 0
.text:00001C66
.text:00001C66 loc_1C66:                               ; CODE XREF: _radioline+68j
.text:00001C66                 mov     ecx, 1
.text:00001C6B                 test    ecx, ecx
.text:00001C6D                 jz      short loc_1CA6
.text:00001C6F                 mov     edx, [ebp+var_4]
.text:00001C72                 add     edx, 4
.text:00001C75                 mov     [ebp+var_4], edx
.text:00001C78                 mov     eax, [ebp+var_4]
.text:00001C7B                 mov     ecx, [eax-4]
.text:00001C7E                 mov     [ebp+var_14], ecx
.text:00001C81                 cmp     [ebp+var_14], 0
.text:00001C85                 jnz     short loc_1C89
.text:00001C87                 jmp     short loc_1CA6
.text:00001C89 ; ---------------------------------------------------------------------------
.text:00001C89
.text:00001C89 loc_1C89:                               ; CODE XREF: _radioline+49j
.text:00001C89                 mov     edx, [ebp+var_4]
.text:00001C8C                 add     edx, 4
.text:00001C8F                 mov     [ebp+var_4], edx
.text:00001C92                 mov     eax, [ebp+var_4]
.text:00001C95                 mov     ecx, [eax-4]
.text:00001C98                 mov     [ebp+var_18], ecx
.text:00001C9B                 mov     edx, [ebp+var_10]
.text:00001C9E                 add     edx, 1
.text:00001CA1                 mov     [ebp+var_10], edx
.text:00001CA4                 jmp     short loc_1C66
.text:00001CA6 ; ---------------------------------------------------------------------------
.text:00001CA6
.text:00001CA6 loc_1CA6:                               ; CODE XREF: _radioline+31j
.text:00001CA6                                         ; _radioline+4Bj
.text:00001CA6                 mov     [ebp+var_4], 0
.text:00001CAD                 push    8
.text:00001CAF                 mov     eax, [ebp+var_10]
.text:00001CB2                 push    eax
.text:00001CB3                 call    _safemalloc
.text:00001CB8                 add     esp, 8
.text:00001CBB                 mov     [ebp+var_8], eax
.text:00001CBE                 lea     ecx, [ebp+arg_10]
.text:00001CC1                 mov     [ebp+var_4], ecx
.text:00001CC4                 mov     [ebp+var_C], 0
.text:00001CCB                 jmp     short loc_1CD6
.text:00001CCD ; ---------------------------------------------------------------------------
.text:00001CCD
.text:00001CCD loc_1CCD:                               ; CODE XREF: _radioline+D3j
.text:00001CCD                 mov     edx, [ebp+var_C]
.text:00001CD0                 add     edx, 1
.text:00001CD3                 mov     [ebp+var_C], edx
.text:00001CD6
.text:00001CD6 loc_1CD6:                               ; CODE XREF: _radioline+8Fj
.text:00001CD6                 mov     eax, [ebp+var_C]
.text:00001CD9                 cmp     eax, [ebp+var_10]
.text:00001CDC                 jge     short loc_1D11
.text:00001CDE                 mov     ecx, [ebp+var_4]
.text:00001CE1                 add     ecx, 4
.text:00001CE4                 mov     [ebp+var_4], ecx
.text:00001CE7                 mov     edx, [ebp+var_C]
.text:00001CEA                 mov     eax, [ebp+var_8]
.text:00001CED                 mov     ecx, [ebp+var_4]
.text:00001CF0                 mov     ecx, [ecx-4]
.text:00001CF3                 mov     [eax+edx*8], ecx
.text:00001CF6                 mov     edx, [ebp+var_4]
.text:00001CF9                 add     edx, 4
.text:00001CFC                 mov     [ebp+var_4], edx
.text:00001CFF                 mov     eax, [ebp+var_C]
.text:00001D02                 mov     ecx, [ebp+var_8]
.text:00001D05                 mov     edx, [ebp+var_4]
.text:00001D08                 mov     edx, [edx-4]
.text:00001D0B                 mov     [ecx+eax*8+4], edx
.text:00001D0F                 jmp     short loc_1CCD
.text:00001D11 ; ---------------------------------------------------------------------------
.text:00001D11
.text:00001D11 loc_1D11:                               ; CODE XREF: _radioline+A0j
.text:00001D11                 mov     [ebp+var_4], 0
.text:00001D18                 mov     eax, [ebp+var_10]
.text:00001D1B                 push    eax             ; int
.text:00001D1C                 mov     ecx, [ebp+var_8]
.text:00001D1F                 push    ecx             ; int
.text:00001D20                 mov     edx, [ebp+arg_C]
.text:00001D23                 push    edx             ; int
.text:00001D24                 mov     eax, [ebp+hMenu]
.text:00001D27                 push    eax             ; hMenu
.text:00001D28                 mov     ecx, [ebp+lpWindowName]
.text:00001D2B                 push    ecx             ; lpWindowName
.text:00001D2C                 mov     edx, [ebp+arg_0]
.text:00001D2F                 push    edx             ; int
.text:00001D30                 call    _radioline_common
.text:00001D35                 add     esp, 18h
.text:00001D38                 mov     eax, [ebp+var_8]
.text:00001D3B                 push    eax
.text:00001D3C                 call    _safefree
.text:00001D41                 add     esp, 4
.text:00001D44                 add     esp, 18h
.text:00001D47                 cmp     ebp, esp
.text:00001D49                 call    __RTC_CheckEsp
.text:00001D4E                 mov     esp, ebp
.text:00001D50                 pop     ebp
.text:00001D51                 retn
.text:00001D51 _radioline      endp
.text:00001D51
.text:00001D51 ; ---------------------------------------------------------------------------
.text:00001D52                 db 0Ah dup(0CCh)
.text:00001D5C
.text:00001D5C ; =============== S U B R O U T I N E =======================================
.text:00001D5C
.text:00001D5C ; Attributes: bp-based frame
.text:00001D5C
.text:00001D5C ; int __cdecl radioline_common(int, LPCSTR lpWindowName, HMENU hMenu, int, int, int)
.text:00001D5C _radioline_common proc near             ; CODE XREF: _radioline+F4p
.text:00001D5C                                         ; _bareradioline+E7p ...
.text:00001D5C
.text:00001D5C var_34          = byte ptr -34h
.text:00001D5C var_31          = byte ptr -31h
.text:00001D5C var_30          = dword ptr -30h
.text:00001D5C var_2C          = dword ptr -2Ch
.text:00001D5C var_28          = dword ptr -28h
.text:00001D5C var_24          = dword ptr -24h
.text:00001D5C var_20          = dword ptr -20h
.text:00001D5C var_18          = dword ptr -18h
.text:00001D5C var_14          = dword ptr -14h
.text:00001D5C var_10          = dword ptr -10h
.text:00001D5C var_C           = dword ptr -0Ch
.text:00001D5C var_4           = dword ptr -4
.text:00001D5C arg_0           = dword ptr  8
.text:00001D5C lpWindowName    = dword ptr  0Ch
.text:00001D5C hMenu           = dword ptr  10h
.text:00001D5C arg_C           = dword ptr  14h
.text:00001D5C arg_10          = dword ptr  18h
.text:00001D5C arg_14          = dword ptr  1Ch
.text:00001D5C
.text:00001D5C                 push    ebp
.text:00001D5D                 mov     ebp, esp
.text:00001D5F                 sub     esp, 34h
.text:00001D62                 push    edi
.text:00001D63                 lea     edi, [ebp+var_34]
.text:00001D66                 mov     ecx, 0Dh
.text:00001D6B                 mov     eax, 0CCCCCCCCh
.text:00001D70                 rep stosd
.text:00001D72                 mov     eax, dword ptr ds:___security_cookie
.text:00001D77                 xor     eax, ebp
.text:00001D79                 mov     [ebp+var_4], eax
.text:00001D7C                 mov     [ebp+var_31], 0
.text:00001D80                 cmp     [ebp+lpWindowName], 0
.text:00001D84                 jz      loc_1E10
.text:00001D8A                 mov     [ebp+var_18], 3
.text:00001D91                 mov     eax, [ebp+arg_0]
.text:00001D94                 mov     ecx, [eax+0Ch]
.text:00001D97                 mov     [ebp+var_14], ecx
.text:00001D9A                 mov     edx, [ebp+arg_0]
.text:00001D9D                 mov     eax, [edx+10h]
.text:00001DA0                 mov     [ebp+var_10], eax
.text:00001DA3                 mov     [ebp+var_31], 1
.text:00001DA7                 mov     [ebp+var_C], 8
.text:00001DAE                 cmp     [ebp+var_31], 0
.text:00001DB2                 jnz     short loc_1DC1
.text:00001DB4                 push    offset $LN11
.text:00001DB9                 call    __RTC_UninitUse
.text:00001DBE                 add     esp, 4
.text:00001DC1
.text:00001DC1 loc_1DC1:                               ; CODE XREF: _radioline_common+56j
.text:00001DC1                 mov     ecx, [ebp+arg_0]
.text:00001DC4                 mov     edx, [ecx+0Ch]
.text:00001DC7                 mov     eax, [ebp+var_C]
.text:00001DCA                 lea     ecx, [eax+edx+1]
.text:00001DCE                 mov     edx, [ebp+arg_0]
.text:00001DD1                 mov     [edx+0Ch], ecx
.text:00001DD4                 mov     eax, [ebp+hMenu]
.text:00001DD7                 push    eax             ; hMenu
.text:00001DD8                 mov     ecx, [ebp+lpWindowName]
.text:00001DDB                 push    ecx             ; lpWindowName
.text:00001DDC                 push    0               ; dwExStyle
.text:00001DDE                 push    50000000h       ; dwStyle
.text:00001DE3                 push    offset $SG88661 ; "STATIC"
.text:00001DE8                 sub     esp, 10h
.text:00001DEB                 mov     edx, esp
.text:00001DED                 mov     eax, [ebp+var_18]
.text:00001DF0                 mov     [edx], eax
.text:00001DF2                 mov     ecx, [ebp+var_14]
.text:00001DF5                 mov     [edx+4], ecx
.text:00001DF8                 mov     eax, [ebp+var_10]
.text:00001DFB                 mov     [edx+8], eax
.text:00001DFE                 mov     ecx, [ebp+var_C]
.text:00001E01                 mov     [edx+0Ch], ecx
.text:00001E04                 mov     edx, [ebp+arg_0]
.text:00001E07                 push    edx             ; int
.text:00001E08                 call    _doctl
.text:00001E0D                 add     esp, 28h
.text:00001E10
.text:00001E10 loc_1E10:                               ; CODE XREF: _radioline_common+28j
.text:00001E10                 mov     [ebp+var_20], 20000h
.text:00001E17                 mov     [ebp+var_24], 0
.text:00001E1E                 mov     [ebp+var_28], 0
.text:00001E25                 jmp     short loc_1E30
.text:00001E27 ; ---------------------------------------------------------------------------
.text:00001E27
.text:00001E27 loc_1E27:                               ; CODE XREF: _radioline_common+1E9j
.text:00001E27                 mov     eax, [ebp+var_28]
.text:00001E2A                 add     eax, 1
.text:00001E2D                 mov     [ebp+var_28], eax
.text:00001E30
.text:00001E30 loc_1E30:                               ; CODE XREF: _radioline_common+C9j
.text:00001E30                 mov     ecx, [ebp+var_28]
.text:00001E33                 cmp     ecx, [ebp+arg_14]
.text:00001E36                 jge     loc_1F4A
.text:00001E3C                 mov     edx, [ebp+var_28]
.text:00001E3F                 mov     eax, [ebp+arg_10]
.text:00001E42                 mov     ecx, [eax+edx*8]
.text:00001E45                 mov     [ebp+var_2C], ecx
.text:00001E48                 mov     edx, [ebp+var_28]
.text:00001E4B                 mov     eax, [ebp+arg_10]
.text:00001E4E                 mov     ecx, [eax+edx*8+4]
.text:00001E52                 mov     [ebp+var_30], ecx
.text:00001E55                 mov     edx, [ebp+var_24]
.text:00001E58                 cmp     edx, [ebp+arg_C]
.text:00001E5B                 jnz     short loc_1E93
.text:00001E5D                 cmp     [ebp+var_31], 0
.text:00001E61                 jnz     short loc_1E70
.text:00001E63                 push    offset $LN11
.text:00001E68                 call    __RTC_UninitUse
.text:00001E6D                 add     esp, 4
.text:00001E70
.text:00001E70 loc_1E70:                               ; CODE XREF: _radioline_common+105j
.text:00001E70                 xor     eax, eax
.text:00001E72                 cmp     [ebp+arg_C], 1
.text:00001E76                 setnle  al
.text:00001E79                 lea     eax, [eax+eax+1]
.text:00001E7D                 add     eax, [ebp+var_C]
.text:00001E80                 mov     ecx, [ebp+arg_0]
.text:00001E83                 add     eax, [ecx+0Ch]
.text:00001E86                 mov     edx, [ebp+arg_0]
.text:00001E89                 mov     [edx+0Ch], eax
.text:00001E8C                 mov     [ebp+var_24], 0
.text:00001E93
.text:00001E93 loc_1E93:                               ; CODE XREF: _radioline_common+FFj
.text:00001E93                 mov     eax, [ebp+arg_0]
.text:00001E96                 mov     ecx, [eax+10h]
.text:00001E99                 add     ecx, 3
.text:00001E9C                 mov     eax, ecx
.text:00001E9E                 imul    eax, [ebp+var_24]
.text:00001EA2                 cdq
.text:00001EA3                 idiv    [ebp+arg_C]
.text:00001EA6                 add     eax, 3
.text:00001EA9                 mov     [ebp+var_18], eax
.text:00001EAC                 mov     edx, [ebp+arg_14]
.text:00001EAF                 sub     edx, 1
.text:00001EB2                 cmp     [ebp+var_28], edx
.text:00001EB5                 jge     short loc_1ED5
.text:00001EB7                 mov     eax, [ebp+var_24]
.text:00001EBA                 add     eax, 1
.text:00001EBD                 mov     ecx, [ebp+arg_0]
.text:00001EC0                 mov     edx, [ecx+10h]
.text:00001EC3                 add     edx, 3
.text:00001EC6                 imul    eax, edx
.text:00001EC9                 cdq
.text:00001ECA                 idiv    [ebp+arg_C]
.text:00001ECD                 sub     eax, [ebp+var_18]
.text:00001ED0                 mov     [ebp+var_10], eax
.text:00001ED3                 jmp     short loc_1EE1
.text:00001ED5 ; ---------------------------------------------------------------------------
.text:00001ED5
.text:00001ED5 loc_1ED5:                               ; CODE XREF: _radioline_common+159j
.text:00001ED5                 mov     eax, [ebp+arg_0]
.text:00001ED8                 mov     ecx, [eax+10h]
.text:00001EDB                 sub     ecx, [ebp+var_18]
.text:00001EDE                 mov     [ebp+var_10], ecx
.text:00001EE1
.text:00001EE1 loc_1EE1:                               ; CODE XREF: _radioline_common+177j
.text:00001EE1                 mov     edx, [ebp+arg_0]
.text:00001EE4                 mov     eax, [edx+0Ch]
.text:00001EE7                 mov     [ebp+var_14], eax
.text:00001EEA                 mov     [ebp+var_31], 1
.text:00001EEE                 mov     [ebp+var_C], 8
.text:00001EF5                 mov     ecx, [ebp+var_30]
.text:00001EF8                 push    ecx             ; hMenu
.text:00001EF9                 mov     edx, [ebp+var_2C]
.text:00001EFC                 push    edx             ; lpWindowName
.text:00001EFD                 push    0               ; dwExStyle
.text:00001EFF                 mov     eax, [ebp+var_20]
.text:00001F02                 or      eax, 50014009h
.text:00001F07                 push    eax             ; dwStyle
.text:00001F08                 push    offset $SG88670 ; "BUTTON"
.text:00001F0D                 sub     esp, 10h
.text:00001F10                 mov     ecx, esp
.text:00001F12                 mov     edx, [ebp+var_18]
.text:00001F15                 mov     [ecx], edx
.text:00001F17                 mov     eax, [ebp+var_14]
.text:00001F1A                 mov     [ecx+4], eax
.text:00001F1D                 mov     edx, [ebp+var_10]
.text:00001F20                 mov     [ecx+8], edx
.text:00001F23                 mov     eax, [ebp+var_C]
.text:00001F26                 mov     [ecx+0Ch], eax
.text:00001F29                 mov     ecx, [ebp+arg_0]
.text:00001F2C                 push    ecx             ; int
.text:00001F2D                 call    _doctl
.text:00001F32                 add     esp, 28h
.text:00001F35                 mov     [ebp+var_20], 0
.text:00001F3C                 mov     edx, [ebp+var_24]
.text:00001F3F                 add     edx, 1
.text:00001F42                 mov     [ebp+var_24], edx
.text:00001F45                 jmp     loc_1E27
.text:00001F4A ; ---------------------------------------------------------------------------
.text:00001F4A
.text:00001F4A loc_1F4A:                               ; CODE XREF: _radioline_common+DAj
.text:00001F4A                 cmp     [ebp+var_31], 0
.text:00001F4E                 jnz     short loc_1F5D
.text:00001F50                 push    offset $LN11
.text:00001F55                 call    __RTC_UninitUse
.text:00001F5A                 add     esp, 4
.text:00001F5D
.text:00001F5D loc_1F5D:                               ; CODE XREF: _radioline_common+1F2j
.text:00001F5D                 mov     eax, [ebp+arg_0]
.text:00001F60                 mov     ecx, [eax+0Ch]
.text:00001F63                 mov     edx, [ebp+var_C]
.text:00001F66                 lea     eax, [edx+ecx+3]
.text:00001F6A                 mov     ecx, [ebp+arg_0]
.text:00001F6D                 mov     [ecx+0Ch], eax
.text:00001F70                 push    edx
.text:00001F71                 mov     ecx, ebp
.text:00001F73                 push    eax
.text:00001F74                 lea     edx, $LN15
.text:00001F7A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F7F                 pop     eax
.text:00001F80                 pop     edx
.text:00001F81                 pop     edi
.text:00001F82                 mov     ecx, [ebp+var_4]
.text:00001F85                 xor     ecx, ebp
.text:00001F87                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001F8C                 add     esp, 34h
.text:00001F8F                 cmp     ebp, esp
.text:00001F91                 call    __RTC_CheckEsp
.text:00001F96                 mov     esp, ebp
.text:00001F98                 pop     ebp
.text:00001F99                 retn
.text:00001F99 _radioline_common endp
.text:00001F99
.text:00001F99 ; ---------------------------------------------------------------------------
.text:00001F9A                 align 4
.text:00001F9C $LN15           dd 1                    ; DATA XREF: _radioline_common+218o
.text:00001FA0                 dd offset $LN14
.text:00001FA4 $LN14           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001FA0o
.text:00001FAC                 dd offset $LN11
.text:00001FB0 $LN11           dd 0CCCC0072h, 2 dup(0CCCCCCCCh)
.text:00001FB0                                         ; DATA XREF: _radioline_common+58o
.text:00001FB0                                         ; _radioline_common+107o ...
.text:00001FBC
.text:00001FBC ; =============== S U B R O U T I N E =======================================
.text:00001FBC
.text:00001FBC ; Attributes: bp-based frame
.text:00001FBC
.text:00001FBC                 public _bareradioline
.text:00001FBC _bareradioline  proc near
.text:00001FBC
.text:00001FBC var_18          = dword ptr -18h
.text:00001FBC var_14          = dword ptr -14h
.text:00001FBC var_10          = dword ptr -10h
.text:00001FBC var_C           = dword ptr -0Ch
.text:00001FBC var_8           = dword ptr -8
.text:00001FBC var_4           = dword ptr -4
.text:00001FBC arg_0           = dword ptr  8
.text:00001FBC arg_4           = dword ptr  0Ch
.text:00001FBC arg_8           = byte ptr  10h
.text:00001FBC
.text:00001FBC                 push    ebp
.text:00001FBD                 mov     ebp, esp
.text:00001FBF                 sub     esp, 18h
.text:00001FC2                 mov     eax, 0CCCCCCCCh
.text:00001FC7                 mov     [ebp+var_18], eax
.text:00001FCA                 mov     [ebp+var_14], eax
.text:00001FCD                 mov     [ebp+var_10], eax
.text:00001FD0                 mov     [ebp+var_C], eax
.text:00001FD3                 mov     [ebp+var_8], eax
.text:00001FD6                 mov     [ebp+var_4], eax
.text:00001FD9                 lea     eax, [ebp+arg_8]
.text:00001FDC                 mov     [ebp+var_4], eax
.text:00001FDF                 mov     [ebp+var_10], 0
.text:00001FE6
.text:00001FE6 loc_1FE6:                               ; CODE XREF: _bareradioline+5Fj
.text:00001FE6                 mov     ecx, 1
.text:00001FEB                 test    ecx, ecx
.text:00001FED                 jz      short loc_201D
.text:00001FEF                 mov     edx, [ebp+var_4]
.text:00001FF2                 add     edx, 4
.text:00001FF5                 mov     [ebp+var_4], edx
.text:00001FF8                 mov     eax, [ebp+var_4]
.text:00001FFB                 mov     ecx, [eax-4]
.text:00001FFE                 mov     [ebp+var_14], ecx
.text:00002001                 cmp     [ebp+var_14], 0
.text:00002005                 jnz     short loc_2009
.text:00002007                 jmp     short loc_201D
.text:00002009 ; ---------------------------------------------------------------------------
.text:00002009
.text:00002009 loc_2009:                               ; CODE XREF: _bareradioline+49j
.text:00002009                 mov     edx, [ebp+var_4]
.text:0000200C                 add     edx, 4
.text:0000200F                 mov     [ebp+var_4], edx
.text:00002012                 mov     eax, [ebp+var_4]
.text:00002015                 mov     ecx, [eax-4]
.text:00002018                 mov     [ebp+var_18], ecx
.text:0000201B                 jmp     short loc_1FE6
.text:0000201D ; ---------------------------------------------------------------------------
.text:0000201D
.text:0000201D loc_201D:                               ; CODE XREF: _bareradioline+31j
.text:0000201D                                         ; _bareradioline+4Bj
.text:0000201D                 mov     [ebp+var_4], 0
.text:00002024                 push    8
.text:00002026                 mov     edx, [ebp+var_10]
.text:00002029                 push    edx
.text:0000202A                 call    _safemalloc
.text:0000202F                 add     esp, 8
.text:00002032                 mov     [ebp+var_8], eax
.text:00002035                 lea     eax, [ebp+arg_8]
.text:00002038                 mov     [ebp+var_4], eax
.text:0000203B                 mov     [ebp+var_C], 0
.text:00002042                 jmp     short loc_204D
.text:00002044 ; ---------------------------------------------------------------------------
.text:00002044
.text:00002044 loc_2044:                               ; CODE XREF: _bareradioline+CAj
.text:00002044                 mov     ecx, [ebp+var_C]
.text:00002047                 add     ecx, 1
.text:0000204A                 mov     [ebp+var_C], ecx
.text:0000204D
.text:0000204D loc_204D:                               ; CODE XREF: _bareradioline+86j
.text:0000204D                 mov     edx, [ebp+var_C]
.text:00002050                 cmp     edx, [ebp+var_10]
.text:00002053                 jge     short loc_2088
.text:00002055                 mov     eax, [ebp+var_4]
.text:00002058                 add     eax, 4
.text:0000205B                 mov     [ebp+var_4], eax
.text:0000205E                 mov     ecx, [ebp+var_C]
.text:00002061                 mov     edx, [ebp+var_8]
.text:00002064                 mov     eax, [ebp+var_4]
.text:00002067                 mov     eax, [eax-4]
.text:0000206A                 mov     [edx+ecx*8], eax
.text:0000206D                 mov     ecx, [ebp+var_4]
.text:00002070                 add     ecx, 4
.text:00002073                 mov     [ebp+var_4], ecx
.text:00002076                 mov     edx, [ebp+var_C]
.text:00002079                 mov     eax, [ebp+var_8]
.text:0000207C                 mov     ecx, [ebp+var_4]
.text:0000207F                 mov     ecx, [ecx-4]
.text:00002082                 mov     [eax+edx*8+4], ecx
.text:00002086                 jmp     short loc_2044
.text:00002088 ; ---------------------------------------------------------------------------
.text:00002088
.text:00002088 loc_2088:                               ; CODE XREF: _bareradioline+97j
.text:00002088                 mov     [ebp+var_4], 0
.text:0000208F                 mov     edx, [ebp+var_10]
.text:00002092                 push    edx             ; int
.text:00002093                 mov     eax, [ebp+var_8]
.text:00002096                 push    eax             ; int
.text:00002097                 mov     ecx, [ebp+arg_4]
.text:0000209A                 push    ecx             ; int
.text:0000209B                 push    0               ; hMenu
.text:0000209D                 push    0               ; lpWindowName
.text:0000209F                 mov     edx, [ebp+arg_0]
.text:000020A2                 push    edx             ; int
.text:000020A3                 call    _radioline_common
.text:000020A8                 add     esp, 18h
.text:000020AB                 mov     eax, [ebp+var_8]
.text:000020AE                 push    eax
.text:000020AF                 call    _safefree
.text:000020B4                 add     esp, 4
.text:000020B7                 add     esp, 18h
.text:000020BA                 cmp     ebp, esp
.text:000020BC                 call    __RTC_CheckEsp
.text:000020C1                 mov     esp, ebp
.text:000020C3                 pop     ebp
.text:000020C4                 retn
.text:000020C4 _bareradioline  endp
.text:000020C4
.text:000020C4 ; ---------------------------------------------------------------------------
.text:000020C5                 db 7 dup(0CCh)
.text:000020CC
.text:000020CC ; =============== S U B R O U T I N E =======================================
.text:000020CC
.text:000020CC ; Attributes: bp-based frame
.text:000020CC
.text:000020CC ; int __cdecl radiobig(int, LPCSTR lpWindowName, HMENU hMenu, char)
.text:000020CC                 public _radiobig
.text:000020CC _radiobig       proc near
.text:000020CC
.text:000020CC var_18          = dword ptr -18h
.text:000020CC var_14          = dword ptr -14h
.text:000020CC var_10          = dword ptr -10h
.text:000020CC var_C           = dword ptr -0Ch
.text:000020CC var_8           = dword ptr -8
.text:000020CC var_4           = dword ptr -4
.text:000020CC arg_0           = dword ptr  8
.text:000020CC lpWindowName    = dword ptr  0Ch
.text:000020CC hMenu           = dword ptr  10h
.text:000020CC arg_C           = byte ptr  14h
.text:000020CC
.text:000020CC                 push    ebp
.text:000020CD                 mov     ebp, esp
.text:000020CF                 sub     esp, 18h
.text:000020D2                 mov     eax, 0CCCCCCCCh
.text:000020D7                 mov     [ebp+var_18], eax
.text:000020DA                 mov     [ebp+var_14], eax
.text:000020DD                 mov     [ebp+var_10], eax
.text:000020E0                 mov     [ebp+var_C], eax
.text:000020E3                 mov     [ebp+var_8], eax
.text:000020E6                 mov     [ebp+var_4], eax
.text:000020E9                 lea     eax, [ebp+arg_C]
.text:000020EC                 mov     [ebp+var_4], eax
.text:000020EF                 mov     [ebp+var_10], 0
.text:000020F6
.text:000020F6 loc_20F6:                               ; CODE XREF: _radiobig+5Fj
.text:000020F6                 mov     ecx, 1
.text:000020FB                 test    ecx, ecx
.text:000020FD                 jz      short loc_212D
.text:000020FF                 mov     edx, [ebp+var_4]
.text:00002102                 add     edx, 4
.text:00002105                 mov     [ebp+var_4], edx
.text:00002108                 mov     eax, [ebp+var_4]
.text:0000210B                 mov     ecx, [eax-4]
.text:0000210E                 mov     [ebp+var_14], ecx
.text:00002111                 cmp     [ebp+var_14], 0
.text:00002115                 jnz     short loc_2119
.text:00002117                 jmp     short loc_212D
.text:00002119 ; ---------------------------------------------------------------------------
.text:00002119
.text:00002119 loc_2119:                               ; CODE XREF: _radiobig+49j
.text:00002119                 mov     edx, [ebp+var_4]
.text:0000211C                 add     edx, 4
.text:0000211F                 mov     [ebp+var_4], edx
.text:00002122                 mov     eax, [ebp+var_4]
.text:00002125                 mov     ecx, [eax-4]
.text:00002128                 mov     [ebp+var_18], ecx
.text:0000212B                 jmp     short loc_20F6
.text:0000212D ; ---------------------------------------------------------------------------
.text:0000212D
.text:0000212D loc_212D:                               ; CODE XREF: _radiobig+31j
.text:0000212D                                         ; _radiobig+4Bj
.text:0000212D                 mov     [ebp+var_4], 0
.text:00002134                 push    8
.text:00002136                 mov     edx, [ebp+var_10]
.text:00002139                 push    edx
.text:0000213A                 call    _safemalloc
.text:0000213F                 add     esp, 8
.text:00002142                 mov     [ebp+var_8], eax
.text:00002145                 lea     eax, [ebp+arg_C]
.text:00002148                 mov     [ebp+var_4], eax
.text:0000214B                 mov     [ebp+var_C], 0
.text:00002152                 jmp     short loc_215D
.text:00002154 ; ---------------------------------------------------------------------------
.text:00002154
.text:00002154 loc_2154:                               ; CODE XREF: _radiobig+CAj
.text:00002154                 mov     ecx, [ebp+var_C]
.text:00002157                 add     ecx, 1
.text:0000215A                 mov     [ebp+var_C], ecx
.text:0000215D
.text:0000215D loc_215D:                               ; CODE XREF: _radiobig+86j
.text:0000215D                 mov     edx, [ebp+var_C]
.text:00002160                 cmp     edx, [ebp+var_10]
.text:00002163                 jge     short loc_2198
.text:00002165                 mov     eax, [ebp+var_4]
.text:00002168                 add     eax, 4
.text:0000216B                 mov     [ebp+var_4], eax
.text:0000216E                 mov     ecx, [ebp+var_C]
.text:00002171                 mov     edx, [ebp+var_8]
.text:00002174                 mov     eax, [ebp+var_4]
.text:00002177                 mov     eax, [eax-4]
.text:0000217A                 mov     [edx+ecx*8], eax
.text:0000217D                 mov     ecx, [ebp+var_4]
.text:00002180                 add     ecx, 4
.text:00002183                 mov     [ebp+var_4], ecx
.text:00002186                 mov     edx, [ebp+var_C]
.text:00002189                 mov     eax, [ebp+var_8]
.text:0000218C                 mov     ecx, [ebp+var_4]
.text:0000218F                 mov     ecx, [ecx-4]
.text:00002192                 mov     [eax+edx*8+4], ecx
.text:00002196                 jmp     short loc_2154
.text:00002198 ; ---------------------------------------------------------------------------
.text:00002198
.text:00002198 loc_2198:                               ; CODE XREF: _radiobig+97j
.text:00002198                 mov     [ebp+var_4], 0
.text:0000219F                 mov     edx, [ebp+var_10]
.text:000021A2                 push    edx             ; int
.text:000021A3                 mov     eax, [ebp+var_8]
.text:000021A6                 push    eax             ; int
.text:000021A7                 push    1               ; int
.text:000021A9                 mov     ecx, [ebp+hMenu]
.text:000021AC                 push    ecx             ; hMenu
.text:000021AD                 mov     edx, [ebp+lpWindowName]
.text:000021B0                 push    edx             ; lpWindowName
.text:000021B1                 mov     eax, [ebp+arg_0]
.text:000021B4                 push    eax             ; int
.text:000021B5                 call    _radioline_common
.text:000021BA                 add     esp, 18h
.text:000021BD                 mov     ecx, [ebp+var_8]
.text:000021C0                 push    ecx
.text:000021C1                 call    _safefree
.text:000021C6                 add     esp, 4
.text:000021C9                 add     esp, 18h
.text:000021CC                 cmp     ebp, esp
.text:000021CE                 call    __RTC_CheckEsp
.text:000021D3                 mov     esp, ebp
.text:000021D5                 pop     ebp
.text:000021D6                 retn
.text:000021D6 _radiobig       endp
.text:000021D6
.text:000021D6 ; ---------------------------------------------------------------------------
.text:000021D7                 db 5 dup(0CCh)
.text:000021DC
.text:000021DC ; =============== S U B R O U T I N E =======================================
.text:000021DC
.text:000021DC ; Attributes: bp-based frame
.text:000021DC
.text:000021DC ; int __cdecl checkbox(int, LPCSTR lpWindowName, HMENU hMenu)
.text:000021DC                 public _checkbox
.text:000021DC _checkbox       proc near               ; CODE XREF: _winctrl_layout+BB6p
.text:000021DC
.text:000021DC var_1C          = dword ptr -1Ch
.text:000021DC var_18          = dword ptr -18h
.text:000021DC var_14          = dword ptr -14h
.text:000021DC var_10          = dword ptr -10h
.text:000021DC var_C           = dword ptr -0Ch
.text:000021DC var_8           = dword ptr -8
.text:000021DC var_4           = dword ptr -4
.text:000021DC arg_0           = dword ptr  8
.text:000021DC lpWindowName    = dword ptr  0Ch
.text:000021DC hMenu           = dword ptr  10h
.text:000021DC
.text:000021DC                 push    ebp
.text:000021DD                 mov     ebp, esp
.text:000021DF                 sub     esp, 1Ch
.text:000021E2                 mov     eax, 0CCCCCCCCh
.text:000021E7                 mov     [ebp+var_1C], eax
.text:000021EA                 mov     [ebp+var_18], eax
.text:000021ED                 mov     [ebp+var_14], eax
.text:000021F0                 mov     [ebp+var_10], eax
.text:000021F3                 mov     [ebp+var_C], eax
.text:000021F6                 mov     [ebp+var_8], eax
.text:000021F9                 mov     [ebp+var_4], eax
.text:000021FC                 mov     eax, dword ptr ds:___security_cookie
.text:00002201                 xor     eax, ebp
.text:00002203                 mov     [ebp+var_4], eax
.text:00002206                 mov     [ebp+var_18], 3
.text:0000220D                 mov     eax, [ebp+arg_0]
.text:00002210                 mov     ecx, [eax+0Ch]
.text:00002213                 mov     [ebp+var_14], ecx
.text:00002216                 mov     edx, [ebp+arg_0]
.text:00002219                 mov     eax, [edx+10h]
.text:0000221C                 mov     [ebp+var_10], eax
.text:0000221F                 mov     [ebp+var_C], 8
.text:00002226                 mov     ecx, [ebp+arg_0]
.text:00002229                 mov     edx, [ecx+0Ch]
.text:0000222C                 mov     eax, [ebp+var_C]
.text:0000222F                 lea     ecx, [eax+edx+3]
.text:00002233                 mov     edx, [ebp+arg_0]
.text:00002236                 mov     [edx+0Ch], ecx
.text:00002239                 mov     eax, [ebp+hMenu]
.text:0000223C                 push    eax             ; hMenu
.text:0000223D                 mov     ecx, [ebp+lpWindowName]
.text:00002240                 push    ecx             ; lpWindowName
.text:00002241                 push    0               ; dwExStyle
.text:00002243                 push    50014003h       ; dwStyle
.text:00002248                 push    offset $SG88854 ; "BUTTON"
.text:0000224D                 sub     esp, 10h
.text:00002250                 mov     edx, esp
.text:00002252                 mov     eax, [ebp+var_18]
.text:00002255                 mov     [edx], eax
.text:00002257                 mov     ecx, [ebp+var_14]
.text:0000225A                 mov     [edx+4], ecx
.text:0000225D                 mov     eax, [ebp+var_10]
.text:00002260                 mov     [edx+8], eax
.text:00002263                 mov     ecx, [ebp+var_C]
.text:00002266                 mov     [edx+0Ch], ecx
.text:00002269                 mov     edx, [ebp+arg_0]
.text:0000226C                 push    edx             ; int
.text:0000226D                 call    _doctl
.text:00002272                 add     esp, 28h
.text:00002275                 push    edx
.text:00002276                 mov     ecx, ebp
.text:00002278                 push    eax
.text:00002279                 lea     edx, $LN5_4
.text:0000227F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002284                 pop     eax
.text:00002285                 pop     edx
.text:00002286                 mov     ecx, [ebp+var_4]
.text:00002289                 xor     ecx, ebp
.text:0000228B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002290                 add     esp, 1Ch
.text:00002293                 cmp     ebp, esp
.text:00002295                 call    __RTC_CheckEsp
.text:0000229A                 mov     esp, ebp
.text:0000229C                 pop     ebp
.text:0000229D                 retn
.text:0000229D _checkbox       endp
.text:0000229D
.text:0000229D ; ---------------------------------------------------------------------------
.text:0000229E                 align 10h
.text:000022A0 $LN5_4          dd 1                    ; DATA XREF: _checkbox+9Do
.text:000022A4                 dd offset $LN4_3
.text:000022A8 $LN4_3          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000022A4o
.text:000022B0                 dd offset $LN3_1
.text:000022B4 $LN3_1          dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:000022B0o
.text:000022BC
.text:000022BC ; =============== S U B R O U T I N E =======================================
.text:000022BC
.text:000022BC ; Attributes: bp-based frame
.text:000022BC
.text:000022BC ; int __cdecl staticwrap(int, HWND hWnd, char *Str, int)
.text:000022BC                 public _staticwrap
.text:000022BC _staticwrap     proc near               ; CODE XREF: _winctrl_layout+743p
.text:000022BC
.text:000022BC h               = dword ptr -64h
.text:000022BC var_60          = dword ptr -60h
.text:000022BC Rect            = tagRECT ptr -58h
.text:000022BC Dest            = dword ptr -44h
.text:000022BC lpszString      = dword ptr -40h
.text:000022BC var_3C          = dword ptr -3Ch
.text:000022BC Size            = tagSIZE ptr -34h
.text:000022BC nFit            = dword ptr -24h
.text:000022BC lpnDx           = dword ptr -1Ch
.text:000022BC var_18          = dword ptr -18h
.text:000022BC var_14          = dword ptr -14h
.text:000022BC nMaxExtent      = dword ptr -10h
.text:000022BC var_C           = dword ptr -0Ch
.text:000022BC hdc             = dword ptr -8
.text:000022BC var_4           = dword ptr -4
.text:000022BC arg_0           = dword ptr  8
.text:000022BC hWnd            = dword ptr  0Ch
.text:000022BC Str             = dword ptr  10h
.text:000022BC arg_C           = dword ptr  14h
.text:000022BC
.text:000022BC                 push    ebp
.text:000022BD                 mov     ebp, esp
.text:000022BF                 sub     esp, 64h
.text:000022C2                 push    esi
.text:000022C3                 push    edi
.text:000022C4                 lea     edi, [ebp+h]
.text:000022C7                 mov     ecx, 19h
.text:000022CC                 mov     eax, 0CCCCCCCCh
.text:000022D1                 rep stosd
.text:000022D3                 mov     eax, dword ptr ds:___security_cookie
.text:000022D8                 xor     eax, ebp
.text:000022DA                 mov     [ebp+var_4], eax
.text:000022DD                 mov     esi, esp
.text:000022DF                 mov     eax, [ebp+hWnd]
.text:000022E2                 push    eax             ; hWnd
.text:000022E3                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text:000022E9                 cmp     esi, esp
.text:000022EB                 call    __RTC_CheckEsp
.text:000022F0                 mov     [ebp+hdc], eax
.text:000022F3                 mov     esi, esp
.text:000022F5                 push    58h ; 'X'       ; index
.text:000022F7                 mov     ecx, [ebp+hdc]
.text:000022FA                 push    ecx             ; hdc
.text:000022FB                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text:00002301                 cmp     esi, esp
.text:00002303                 call    __RTC_CheckEsp
.text:00002308                 mov     [ebp+var_C], eax
.text:0000230B                 push    1
.text:0000230D                 mov     edx, [ebp+Str]
.text:00002310                 push    edx             ; Str
.text:00002311                 call    _strlen
.text:00002316                 add     esp, 4
.text:00002319                 add     eax, 1
.text:0000231C                 push    eax
.text:0000231D                 call    _safemalloc
.text:00002322                 add     esp, 8
.text:00002325                 mov     [ebp+var_3C], eax
.text:00002328                 mov     eax, [ebp+Str]
.text:0000232B                 mov     [ebp+lpszString], eax
.text:0000232E                 mov     ecx, [ebp+var_3C]
.text:00002331                 mov     [ebp+Dest], ecx
.text:00002334                 push    4
.text:00002336                 mov     edx, [ebp+Str]
.text:00002339                 push    edx             ; Str
.text:0000233A                 call    _strlen
.text:0000233F                 add     esp, 4
.text:00002342                 add     eax, 1
.text:00002345                 push    eax
.text:00002346                 call    _safemalloc
.text:0000234B                 add     esp, 8
.text:0000234E                 mov     [ebp+lpnDx], eax
.text:00002351                 mov     esi, esp
.text:00002353                 push    1               ; iMode
.text:00002355                 mov     eax, [ebp+hdc]
.text:00002358                 push    eax             ; hdc
.text:00002359                 call    dword ptr ds:__imp__SetMapMode@8 ; SetMapMode(x,x)
.text:0000235F                 cmp     esi, esp
.text:00002361                 call    __RTC_CheckEsp
.text:00002366                 mov     [ebp+Rect.bottom], 0
.text:0000236D                 mov     ecx, [ebp+Rect.bottom]
.text:00002370                 mov     [ebp+Rect.top], ecx
.text:00002373                 mov     edx, [ebp+Rect.top]
.text:00002376                 mov     [ebp+Rect.left], edx
.text:00002379                 mov     eax, [ebp+arg_0]
.text:0000237C                 mov     ecx, [eax+10h]
.text:0000237F                 mov     [ebp+Rect.right], ecx
.text:00002382                 mov     esi, esp
.text:00002384                 lea     edx, [ebp+Rect]
.text:00002387                 push    edx             ; lpRect
.text:00002388                 mov     eax, [ebp+hWnd]
.text:0000238B                 push    eax             ; hDlg
.text:0000238C                 call    dword ptr ds:__imp__MapDialogRect@8 ; MapDialogRect(x,x)
.text:00002392                 cmp     esi, esp
.text:00002394                 call    __RTC_CheckEsp
.text:00002399                 mov     ecx, [ebp+Rect.right]
.text:0000239C                 mov     [ebp+nMaxExtent], ecx
.text:0000239F                 mov     [ebp+var_14], 1
.text:000023A6                 mov     esi, esp
.text:000023A8                 push    0               ; lParam
.text:000023AA                 push    0               ; wParam
.text:000023AC                 push    31h ; '1'       ; Msg
.text:000023AE                 mov     edx, [ebp+hWnd]
.text:000023B1                 push    edx             ; hWnd
.text:000023B2                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:000023B8                 cmp     esi, esp
.text:000023BA                 call    __RTC_CheckEsp
.text:000023BF                 mov     [ebp+h], eax
.text:000023C2                 mov     esi, esp
.text:000023C4                 mov     eax, [ebp+h]
.text:000023C7                 push    eax             ; h
.text:000023C8                 mov     ecx, [ebp+hdc]
.text:000023CB                 push    ecx             ; hdc
.text:000023CC                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000023D2                 cmp     esi, esp
.text:000023D4                 call    __RTC_CheckEsp
.text:000023D9                 mov     [ebp+var_60], eax
.text:000023DC
.text:000023DC loc_23DC:                               ; CODE XREF: _staticwrap+227j
.text:000023DC                 mov     edx, [ebp+lpszString]
.text:000023DF                 movsx   eax, byte ptr [edx]
.text:000023E2                 test    eax, eax
.text:000023E4                 jz      loc_24E8
.text:000023EA                 mov     esi, esp
.text:000023EC                 lea     ecx, [ebp+Size]
.text:000023EF                 push    ecx             ; lpSize
.text:000023F0                 mov     edx, [ebp+lpnDx]
.text:000023F3                 push    edx             ; lpnDx
.text:000023F4                 lea     eax, [ebp+nFit]
.text:000023F7                 push    eax             ; lpnFit
.text:000023F8                 mov     ecx, [ebp+nMaxExtent]
.text:000023FB                 push    ecx             ; nMaxExtent
.text:000023FC                 mov     edx, [ebp+lpszString]
.text:000023FF                 push    edx             ; Str
.text:00002400                 call    _strlen
.text:00002405                 add     esp, 4
.text:00002408                 push    eax             ; cchString
.text:00002409                 mov     eax, [ebp+lpszString]
.text:0000240C                 push    eax             ; lpszString
.text:0000240D                 mov     ecx, [ebp+hdc]
.text:00002410                 push    ecx             ; hdc
.text:00002411                 call    dword ptr ds:__imp__GetTextExtentExPointA@28 ; GetTextExtentExPointA(x,x,x,x,x,x,x)
.text:00002417                 cmp     esi, esp
.text:00002419                 call    __RTC_CheckEsp
.text:0000241E                 test    eax, eax
.text:00002420                 jz      short loc_2433
.text:00002422                 mov     edx, [ebp+lpszString]
.text:00002425                 push    edx             ; Str
.text:00002426                 call    _strlen
.text:0000242B                 add     esp, 4
.text:0000242E                 cmp     [ebp+nFit], eax
.text:00002431                 jb      short loc_2448
.text:00002433
.text:00002433 loc_2433:                               ; CODE XREF: _staticwrap+164j
.text:00002433                 mov     eax, [ebp+lpszString]
.text:00002436                 push    eax             ; Source
.text:00002437                 mov     ecx, [ebp+Dest]
.text:0000243A                 push    ecx             ; Dest
.text:0000243B                 call    _strcpy
.text:00002440                 add     esp, 8
.text:00002443                 jmp     loc_24E8
.text:00002448 ; ---------------------------------------------------------------------------
.text:00002448
.text:00002448 loc_2448:                               ; CODE XREF: _staticwrap+175j
.text:00002448                 mov     edx, [ebp+nFit]
.text:0000244B                 mov     [ebp+var_18], edx
.text:0000244E                 jmp     short loc_2459
.text:00002450 ; ---------------------------------------------------------------------------
.text:00002450
.text:00002450 loc_2450:                               ; CODE XREF: _staticwrap:loc_247Dj
.text:00002450                 mov     eax, [ebp+var_18]
.text:00002453                 sub     eax, 1
.text:00002456                 mov     [ebp+var_18], eax
.text:00002459
.text:00002459 loc_2459:                               ; CODE XREF: _staticwrap+192j
.text:00002459                 cmp     [ebp+var_18], 0
.text:0000245D                 jle     short loc_247F
.text:0000245F                 mov     ecx, [ebp+lpszString]
.text:00002462                 add     ecx, [ebp+var_18]
.text:00002465                 movzx   edx, byte ptr [ecx]
.text:00002468                 push    edx             ; C
.text:00002469                 call    _isspace
.text:0000246E                 add     esp, 4
.text:00002471                 test    eax, eax
.text:00002473                 jz      short loc_247D
.text:00002475                 mov     eax, [ebp+var_18]
.text:00002478                 mov     [ebp+nFit], eax
.text:0000247B                 jmp     short loc_247F
.text:0000247D ; ---------------------------------------------------------------------------
.text:0000247D
.text:0000247D loc_247D:                               ; CODE XREF: _staticwrap+1B7j
.text:0000247D                 jmp     short loc_2450
.text:0000247F ; ---------------------------------------------------------------------------
.text:0000247F
.text:0000247F loc_247F:                               ; CODE XREF: _staticwrap+1A1j
.text:0000247F                                         ; _staticwrap+1BFj
.text:0000247F                 mov     ecx, [ebp+nFit]
.text:00002482                 push    ecx             ; Count
.text:00002483                 mov     edx, [ebp+lpszString]
.text:00002486                 push    edx             ; Source
.text:00002487                 mov     eax, [ebp+Dest]
.text:0000248A                 push    eax             ; Dest
.text:0000248B                 call    _strncpy
.text:00002490                 add     esp, 0Ch
.text:00002493                 mov     ecx, [ebp+Dest]
.text:00002496                 add     ecx, [ebp+nFit]
.text:00002499                 mov     byte ptr [ecx], 0Ah
.text:0000249C                 mov     edx, [ebp+nFit]
.text:0000249F                 mov     eax, [ebp+Dest]
.text:000024A2                 lea     ecx, [eax+edx+1]
.text:000024A6                 mov     [ebp+Dest], ecx
.text:000024A9                 mov     edx, [ebp+lpszString]
.text:000024AC                 add     edx, [ebp+nFit]
.text:000024AF                 mov     [ebp+lpszString], edx
.text:000024B2
.text:000024B2 loc_24B2:                               ; CODE XREF: _staticwrap+21Cj
.text:000024B2                 mov     eax, [ebp+lpszString]
.text:000024B5                 movsx   ecx, byte ptr [eax]
.text:000024B8                 test    ecx, ecx
.text:000024BA                 jz      short loc_24DA
.text:000024BC                 mov     edx, [ebp+lpszString]
.text:000024BF                 movzx   eax, byte ptr [edx]
.text:000024C2                 push    eax             ; C
.text:000024C3                 call    _isspace
.text:000024C8                 add     esp, 4
.text:000024CB                 test    eax, eax
.text:000024CD                 jz      short loc_24DA
.text:000024CF                 mov     ecx, [ebp+lpszString]
.text:000024D2                 add     ecx, 1
.text:000024D5                 mov     [ebp+lpszString], ecx
.text:000024D8                 jmp     short loc_24B2
.text:000024DA ; ---------------------------------------------------------------------------
.text:000024DA
.text:000024DA loc_24DA:                               ; CODE XREF: _staticwrap+1FEj
.text:000024DA                                         ; _staticwrap+211j
.text:000024DA                 mov     edx, [ebp+var_14]
.text:000024DD                 add     edx, 1
.text:000024E0                 mov     [ebp+var_14], edx
.text:000024E3                 jmp     loc_23DC
.text:000024E8 ; ---------------------------------------------------------------------------
.text:000024E8
.text:000024E8 loc_24E8:                               ; CODE XREF: _staticwrap+128j
.text:000024E8                                         ; _staticwrap+187j
.text:000024E8                 mov     esi, esp
.text:000024EA                 mov     eax, [ebp+var_60]
.text:000024ED                 push    eax             ; h
.text:000024EE                 mov     ecx, [ebp+hdc]
.text:000024F1                 push    ecx             ; hdc
.text:000024F2                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:000024F8                 cmp     esi, esp
.text:000024FA                 call    __RTC_CheckEsp
.text:000024FF                 mov     esi, esp
.text:00002501                 mov     edx, [ebp+hdc]
.text:00002504                 push    edx             ; hDC
.text:00002505                 mov     eax, [ebp+arg_0]
.text:00002508                 mov     ecx, [eax]
.text:0000250A                 push    ecx             ; hWnd
.text:0000250B                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text:00002511                 cmp     esi, esp
.text:00002513                 call    __RTC_CheckEsp
.text:00002518                 cmp     [ebp+arg_C], 0
.text:0000251C                 jz      short loc_2526
.text:0000251E                 mov     edx, [ebp+arg_C]
.text:00002521                 mov     eax, [ebp+var_14]
.text:00002524                 mov     [edx], eax
.text:00002526
.text:00002526 loc_2526:                               ; CODE XREF: _staticwrap+260j
.text:00002526                 mov     ecx, [ebp+lpnDx]
.text:00002529                 push    ecx
.text:0000252A                 call    _safefree
.text:0000252F                 add     esp, 4
.text:00002532                 mov     eax, [ebp+var_3C]
.text:00002535                 push    edx
.text:00002536                 mov     ecx, ebp
.text:00002538                 push    eax
.text:00002539                 lea     edx, $LN18
.text:0000253F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002544                 pop     eax
.text:00002545                 pop     edx
.text:00002546                 pop     edi
.text:00002547                 pop     esi
.text:00002548                 mov     ecx, [ebp+var_4]
.text:0000254B                 xor     ecx, ebp
.text:0000254D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002552                 add     esp, 64h
.text:00002555                 cmp     ebp, esp
.text:00002557                 call    __RTC_CheckEsp
.text:0000255C                 mov     esp, ebp
.text:0000255E                 pop     ebp
.text:0000255F                 retn
.text:0000255F _staticwrap     endp
.text:0000255F
.text:0000255F ; ---------------------------------------------------------------------------
.text:00002560 $LN18           dd 3                    ; DATA XREF: _staticwrap+27Do
.text:00002564                 dd offset $LN17
.text:00002568 $LN17           dd 0FFFFFFDCh, 4        ; DATA XREF: .text:00002564o
.text:00002570                 dd offset $LN14_0       ; "nfit"
.text:00002574                 db 0CCh
.text:00002575                 db 3 dup(0FFh)
.text:00002578                 dd 8
.text:0000257C                 dd offset $LN15_0       ; "size"
.text:00002580                 dd 0FFFFFFA8h, 10h
.text:00002588                 dd offset $LN16
.text:0000258C $LN16           db 72h, 0               ; DATA XREF: .text:00002588o
.text:0000258E $LN15_0         db 'size',0             ; DATA XREF: .text:0000257Co
.text:00002593 $LN14_0         db 'nfit',0             ; DATA XREF: .text:00002570o
.text:00002598                 db 4 dup(0CCh)
.text:0000259C
.text:0000259C ; =============== S U B R O U T I N E =======================================
.text:0000259C
.text:0000259C ; Attributes: bp-based frame
.text:0000259C
.text:0000259C ; int __cdecl statictext(int, LPCSTR lpWindowName, int, HMENU hMenu)
.text:0000259C                 public _statictext
.text:0000259C _statictext     proc near               ; CODE XREF: _winctrl_layout+784p
.text:0000259C                                         ; _winctrl_layout+106Ap
.text:0000259C
.text:0000259C var_1C          = dword ptr -1Ch
.text:0000259C var_18          = dword ptr -18h
.text:0000259C var_14          = dword ptr -14h
.text:0000259C var_10          = dword ptr -10h
.text:0000259C var_C           = dword ptr -0Ch
.text:0000259C var_8           = dword ptr -8
.text:0000259C var_4           = dword ptr -4
.text:0000259C arg_0           = dword ptr  8
.text:0000259C lpWindowName    = dword ptr  0Ch
.text:0000259C arg_8           = dword ptr  10h
.text:0000259C hMenu           = dword ptr  14h
.text:0000259C
.text:0000259C                 push    ebp
.text:0000259D                 mov     ebp, esp
.text:0000259F                 sub     esp, 1Ch
.text:000025A2                 mov     eax, 0CCCCCCCCh
.text:000025A7                 mov     [ebp+var_1C], eax
.text:000025AA                 mov     [ebp+var_18], eax
.text:000025AD                 mov     [ebp+var_14], eax
.text:000025B0                 mov     [ebp+var_10], eax
.text:000025B3                 mov     [ebp+var_C], eax
.text:000025B6                 mov     [ebp+var_8], eax
.text:000025B9                 mov     [ebp+var_4], eax
.text:000025BC                 mov     eax, dword ptr ds:___security_cookie
.text:000025C1                 xor     eax, ebp
.text:000025C3                 mov     [ebp+var_4], eax
.text:000025C6                 mov     [ebp+var_18], 3
.text:000025CD                 mov     eax, [ebp+arg_0]
.text:000025D0                 mov     ecx, [eax+0Ch]
.text:000025D3                 mov     [ebp+var_14], ecx
.text:000025D6                 mov     edx, [ebp+arg_0]
.text:000025D9                 mov     eax, [edx+10h]
.text:000025DC                 mov     [ebp+var_10], eax
.text:000025DF                 mov     ecx, [ebp+arg_8]
.text:000025E2                 shl     ecx, 3
.text:000025E5                 mov     [ebp+var_C], ecx
.text:000025E8                 mov     edx, [ebp+arg_0]
.text:000025EB                 mov     eax, [edx+0Ch]
.text:000025EE                 mov     ecx, [ebp+var_C]
.text:000025F1                 lea     edx, [ecx+eax+3]
.text:000025F5                 mov     eax, [ebp+arg_0]
.text:000025F8                 mov     [eax+0Ch], edx
.text:000025FB                 mov     ecx, [ebp+hMenu]
.text:000025FE                 push    ecx             ; hMenu
.text:000025FF                 mov     edx, [ebp+lpWindowName]
.text:00002602                 push    edx             ; lpWindowName
.text:00002603                 push    0               ; dwExStyle
.text:00002605                 push    5000000Ch       ; dwStyle
.text:0000260A                 push    offset $SG88910 ; "STATIC"
.text:0000260F                 sub     esp, 10h
.text:00002612                 mov     eax, esp
.text:00002614                 mov     ecx, [ebp+var_18]
.text:00002617                 mov     [eax], ecx
.text:00002619                 mov     edx, [ebp+var_14]
.text:0000261C                 mov     [eax+4], edx
.text:0000261F                 mov     ecx, [ebp+var_10]
.text:00002622                 mov     [eax+8], ecx
.text:00002625                 mov     edx, [ebp+var_C]
.text:00002628                 mov     [eax+0Ch], edx
.text:0000262B                 mov     eax, [ebp+arg_0]
.text:0000262E                 push    eax             ; int
.text:0000262F                 call    _doctl
.text:00002634                 add     esp, 28h
.text:00002637                 push    edx
.text:00002638                 mov     ecx, ebp
.text:0000263A                 push    eax
.text:0000263B                 lea     edx, $LN5_5
.text:00002641                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002646                 pop     eax
.text:00002647                 pop     edx
.text:00002648                 mov     ecx, [ebp+var_4]
.text:0000264B                 xor     ecx, ebp
.text:0000264D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002652                 add     esp, 1Ch
.text:00002655                 cmp     ebp, esp
.text:00002657                 call    __RTC_CheckEsp
.text:0000265C                 mov     esp, ebp
.text:0000265E                 pop     ebp
.text:0000265F                 retn
.text:0000265F _statictext     endp
.text:0000265F
.text:0000265F ; ---------------------------------------------------------------------------
.text:00002660 $LN5_5          dd 1                    ; DATA XREF: _statictext+9Fo
.text:00002664                 dd offset $LN4_4
.text:00002668 $LN4_4          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00002664o
.text:00002670                 dd offset $LN3_2
.text:00002674 $LN3_2          dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:00002670o
.text:0000267C
.text:0000267C ; =============== S U B R O U T I N E =======================================
.text:0000267C
.text:0000267C ; Attributes: bp-based frame
.text:0000267C
.text:0000267C ; int __cdecl paneltitle(int, HMENU hMenu)
.text:0000267C                 public _paneltitle
.text:0000267C _paneltitle     proc near               ; CODE XREF: _winctrl_layout+189p
.text:0000267C
.text:0000267C var_1C          = dword ptr -1Ch
.text:0000267C var_18          = dword ptr -18h
.text:0000267C var_14          = dword ptr -14h
.text:0000267C var_10          = dword ptr -10h
.text:0000267C var_C           = dword ptr -0Ch
.text:0000267C var_8           = dword ptr -8
.text:0000267C var_4           = dword ptr -4
.text:0000267C arg_0           = dword ptr  8
.text:0000267C hMenu           = dword ptr  0Ch
.text:0000267C
.text:0000267C                 push    ebp
.text:0000267D                 mov     ebp, esp
.text:0000267F                 sub     esp, 1Ch
.text:00002682                 mov     eax, 0CCCCCCCCh
.text:00002687                 mov     [ebp+var_1C], eax
.text:0000268A                 mov     [ebp+var_18], eax
.text:0000268D                 mov     [ebp+var_14], eax
.text:00002690                 mov     [ebp+var_10], eax
.text:00002693                 mov     [ebp+var_C], eax
.text:00002696                 mov     [ebp+var_8], eax
.text:00002699                 mov     [ebp+var_4], eax
.text:0000269C                 mov     eax, dword ptr ds:___security_cookie
.text:000026A1                 xor     eax, ebp
.text:000026A3                 mov     [ebp+var_4], eax
.text:000026A6                 mov     [ebp+var_18], 3
.text:000026AD                 mov     eax, [ebp+arg_0]
.text:000026B0                 mov     ecx, [eax+0Ch]
.text:000026B3                 mov     [ebp+var_14], ecx
.text:000026B6                 mov     edx, [ebp+arg_0]
.text:000026B9                 mov     eax, [edx+10h]
.text:000026BC                 mov     [ebp+var_10], eax
.text:000026BF                 mov     [ebp+var_C], 0Ch
.text:000026C6                 mov     ecx, [ebp+arg_0]
.text:000026C9                 mov     edx, [ecx+0Ch]
.text:000026CC                 mov     eax, [ebp+var_C]
.text:000026CF                 lea     ecx, [eax+edx+3]
.text:000026D3                 mov     edx, [ebp+arg_0]
.text:000026D6                 mov     [edx+0Ch], ecx
.text:000026D9                 mov     eax, [ebp+hMenu]
.text:000026DC                 push    eax             ; hMenu
.text:000026DD                 push    0               ; lpWindowName
.text:000026DF                 push    0               ; dwExStyle
.text:000026E1                 push    5000000Dh       ; dwStyle
.text:000026E6                 push    offset $SG88919 ; "STATIC"
.text:000026EB                 sub     esp, 10h
.text:000026EE                 mov     ecx, esp
.text:000026F0                 mov     edx, [ebp+var_18]
.text:000026F3                 mov     [ecx], edx
.text:000026F5                 mov     eax, [ebp+var_14]
.text:000026F8                 mov     [ecx+4], eax
.text:000026FB                 mov     edx, [ebp+var_10]
.text:000026FE                 mov     [ecx+8], edx
.text:00002701                 mov     eax, [ebp+var_C]
.text:00002704                 mov     [ecx+0Ch], eax
.text:00002707                 mov     ecx, [ebp+arg_0]
.text:0000270A                 push    ecx             ; int
.text:0000270B                 call    _doctl
.text:00002710                 add     esp, 28h
.text:00002713                 push    edx
.text:00002714                 mov     ecx, ebp
.text:00002716                 push    eax
.text:00002717                 lea     edx, $LN5_6
.text:0000271D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002722                 pop     eax
.text:00002723                 pop     edx
.text:00002724                 mov     ecx, [ebp+var_4]
.text:00002727                 xor     ecx, ebp
.text:00002729                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000272E                 add     esp, 1Ch
.text:00002731                 cmp     ebp, esp
.text:00002733                 call    __RTC_CheckEsp
.text:00002738                 mov     esp, ebp
.text:0000273A                 pop     ebp
.text:0000273B                 retn
.text:0000273B _paneltitle     endp
.text:0000273B
.text:0000273B ; ---------------------------------------------------------------------------
.text:0000273C $LN5_6          dd 1                    ; DATA XREF: _paneltitle+9Bo
.text:00002740                 dd offset $LN4_5
.text:00002744 $LN4_5          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00002740o
.text:0000274C                 dd offset $LN3_3
.text:00002750 $LN3_3          dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000274Co
.text:0000275C
.text:0000275C ; =============== S U B R O U T I N E =======================================
.text:0000275C
.text:0000275C ; Attributes: bp-based frame
.text:0000275C
.text:0000275C ; int __cdecl staticbtn(int, LPCSTR lpWindowName, HMENU hMenu, LPCSTR, HMENU)
.text:0000275C                 public _staticbtn
.text:0000275C _staticbtn      proc near               ; CODE XREF: _winctrl_layout+1097p
.text:0000275C
.text:0000275C var_2C          = dword ptr -2Ch
.text:0000275C var_28          = dword ptr -28h
.text:0000275C var_24          = dword ptr -24h
.text:0000275C var_1C          = dword ptr -1Ch
.text:0000275C var_18          = dword ptr -18h
.text:0000275C var_14          = dword ptr -14h
.text:0000275C var_10          = dword ptr -10h
.text:0000275C var_8           = dword ptr -8
.text:0000275C var_4           = dword ptr -4
.text:0000275C arg_0           = dword ptr  8
.text:0000275C lpWindowName    = dword ptr  0Ch
.text:0000275C hMenu           = dword ptr  10h
.text:0000275C arg_C           = dword ptr  14h
.text:0000275C arg_10          = dword ptr  18h
.text:0000275C
.text:0000275C                 push    ebp
.text:0000275D                 mov     ebp, esp
.text:0000275F                 sub     esp, 2Ch
.text:00002762                 push    edi
.text:00002763                 lea     edi, [ebp+var_2C]
.text:00002766                 mov     ecx, 0Bh
.text:0000276B                 mov     eax, 0CCCCCCCCh
.text:00002770                 rep stosd
.text:00002772                 mov     eax, dword ptr ds:___security_cookie
.text:00002777                 xor     eax, ebp
.text:00002779                 mov     [ebp+var_4], eax
.text:0000277C                 mov     [ebp+var_8], 0Eh
.text:00002783                 mov     eax, [ebp+arg_0]
.text:00002786                 mov     eax, [eax+10h]
.text:00002789                 add     eax, 3
.text:0000278C                 imul    eax, 3
.text:0000278F                 cdq
.text:00002790                 and     edx, 3
.text:00002793                 add     eax, edx
.text:00002795                 sar     eax, 2
.text:00002798                 add     eax, 3
.text:0000279B                 mov     [ebp+var_2C], eax
.text:0000279E                 mov     ecx, [ebp+var_2C]
.text:000027A1                 sub     ecx, 6
.text:000027A4                 mov     [ebp+var_24], ecx
.text:000027A7                 mov     edx, [ebp+arg_0]
.text:000027AA                 mov     eax, [edx+10h]
.text:000027AD                 add     eax, 3
.text:000027B0                 sub     eax, [ebp+var_2C]
.text:000027B3                 mov     [ebp+var_28], eax
.text:000027B6                 mov     [ebp+var_1C], 3
.text:000027BD                 mov     eax, [ebp+var_8]
.text:000027C0                 sub     eax, 8
.text:000027C3                 cdq
.text:000027C4                 sub     eax, edx
.text:000027C6                 sar     eax, 1
.text:000027C8                 mov     ecx, [ebp+arg_0]
.text:000027CB                 add     eax, [ecx+0Ch]
.text:000027CE                 mov     [ebp+var_18], eax
.text:000027D1                 mov     edx, [ebp+var_24]
.text:000027D4                 mov     [ebp+var_14], edx
.text:000027D7                 mov     [ebp+var_10], 8
.text:000027DE                 mov     eax, [ebp+hMenu]
.text:000027E1                 push    eax             ; hMenu
.text:000027E2                 mov     ecx, [ebp+lpWindowName]
.text:000027E5                 push    ecx             ; lpWindowName
.text:000027E6                 push    0               ; dwExStyle
.text:000027E8                 push    50000000h       ; dwStyle
.text:000027ED                 push    offset $SG88936 ; "STATIC"
.text:000027F2                 sub     esp, 10h
.text:000027F5                 mov     edx, esp
.text:000027F7                 mov     eax, [ebp+var_1C]
.text:000027FA                 mov     [edx], eax
.text:000027FC                 mov     ecx, [ebp+var_18]
.text:000027FF                 mov     [edx+4], ecx
.text:00002802                 mov     eax, [ebp+var_14]
.text:00002805                 mov     [edx+8], eax
.text:00002808                 mov     ecx, [ebp+var_10]
.text:0000280B                 mov     [edx+0Ch], ecx
.text:0000280E                 mov     edx, [ebp+arg_0]
.text:00002811                 push    edx             ; int
.text:00002812                 call    _doctl
.text:00002817                 add     esp, 28h
.text:0000281A                 mov     eax, [ebp+var_2C]
.text:0000281D                 mov     [ebp+var_1C], eax
.text:00002820                 mov     eax, [ebp+var_8]
.text:00002823                 sub     eax, 0Eh
.text:00002826                 cdq
.text:00002827                 sub     eax, edx
.text:00002829                 sar     eax, 1
.text:0000282B                 mov     ecx, [ebp+arg_0]
.text:0000282E                 add     eax, [ecx+0Ch]
.text:00002831                 mov     [ebp+var_18], eax
.text:00002834                 mov     edx, [ebp+var_28]
.text:00002837                 mov     [ebp+var_14], edx
.text:0000283A                 mov     [ebp+var_10], 0Eh
.text:00002841                 mov     eax, [ebp+arg_10]
.text:00002844                 push    eax             ; hMenu
.text:00002845                 mov     ecx, [ebp+arg_C]
.text:00002848                 push    ecx             ; lpWindowName
.text:00002849                 push    0               ; dwExStyle
.text:0000284B                 push    50014000h       ; dwStyle
.text:00002850                 push    offset $SG88937 ; "BUTTON"
.text:00002855                 sub     esp, 10h
.text:00002858                 mov     edx, esp
.text:0000285A                 mov     eax, [ebp+var_1C]
.text:0000285D                 mov     [edx], eax
.text:0000285F                 mov     ecx, [ebp+var_18]
.text:00002862                 mov     [edx+4], ecx
.text:00002865                 mov     eax, [ebp+var_14]
.text:00002868                 mov     [edx+8], eax
.text:0000286B                 mov     ecx, [ebp+var_10]
.text:0000286E                 mov     [edx+0Ch], ecx
.text:00002871                 mov     edx, [ebp+arg_0]
.text:00002874                 push    edx             ; int
.text:00002875                 call    _doctl
.text:0000287A                 add     esp, 28h
.text:0000287D                 mov     eax, [ebp+arg_0]
.text:00002880                 mov     ecx, [eax+0Ch]
.text:00002883                 mov     edx, [ebp+var_8]
.text:00002886                 lea     eax, [edx+ecx+3]
.text:0000288A                 mov     ecx, [ebp+arg_0]
.text:0000288D                 mov     [ecx+0Ch], eax
.text:00002890                 push    edx
.text:00002891                 mov     ecx, ebp
.text:00002893                 push    eax
.text:00002894                 lea     edx, $LN5_7
.text:0000289A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000289F                 pop     eax
.text:000028A0                 pop     edx
.text:000028A1                 pop     edi
.text:000028A2                 mov     ecx, [ebp+var_4]
.text:000028A5                 xor     ecx, ebp
.text:000028A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000028AC                 add     esp, 2Ch
.text:000028AF                 cmp     ebp, esp
.text:000028B1                 call    __RTC_CheckEsp
.text:000028B6                 mov     esp, ebp
.text:000028B8                 pop     ebp
.text:000028B9                 retn
.text:000028B9 _staticbtn      endp
.text:000028B9
.text:000028B9 ; ---------------------------------------------------------------------------
.text:000028BA                 align 4
.text:000028BC $LN5_7          dd 1                    ; DATA XREF: _staticbtn+138o
.text:000028C0                 dd offset $LN4_6
.text:000028C4 $LN4_6          dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:000028C0o
.text:000028CC                 dd offset $LN3_4
.text:000028D0 $LN3_4          dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000028CCo
.text:000028DC
.text:000028DC ; =============== S U B R O U T I N E =======================================
.text:000028DC
.text:000028DC ; Attributes: bp-based frame
.text:000028DC
.text:000028DC ; int __cdecl button(int, LPCSTR lpWindowName, WPARAM wParam, int)
.text:000028DC                 public _button
.text:000028DC _button         proc near               ; CODE XREF: _winctrl_layout+C59p
.text:000028DC
.text:000028DC var_1C          = dword ptr -1Ch
.text:000028DC var_18          = dword ptr -18h
.text:000028DC var_14          = dword ptr -14h
.text:000028DC var_10          = dword ptr -10h
.text:000028DC var_C           = dword ptr -0Ch
.text:000028DC var_8           = dword ptr -8
.text:000028DC var_4           = dword ptr -4
.text:000028DC arg_0           = dword ptr  8
.text:000028DC lpWindowName    = dword ptr  0Ch
.text:000028DC wParam          = dword ptr  10h
.text:000028DC arg_C           = dword ptr  14h
.text:000028DC
.text:000028DC                 push    ebp
.text:000028DD                 mov     ebp, esp
.text:000028DF                 sub     esp, 1Ch
.text:000028E2                 push    esi
.text:000028E3                 mov     eax, 0CCCCCCCCh
.text:000028E8                 mov     [ebp+var_1C], eax
.text:000028EB                 mov     [ebp+var_18], eax
.text:000028EE                 mov     [ebp+var_14], eax
.text:000028F1                 mov     [ebp+var_10], eax
.text:000028F4                 mov     [ebp+var_C], eax
.text:000028F7                 mov     [ebp+var_8], eax
.text:000028FA                 mov     [ebp+var_4], eax
.text:000028FD                 mov     eax, dword ptr ds:___security_cookie
.text:00002902                 xor     eax, ebp
.text:00002904                 mov     [ebp+var_4], eax
.text:00002907                 mov     [ebp+var_18], 3
.text:0000290E                 mov     eax, [ebp+arg_0]
.text:00002911                 mov     ecx, [eax+0Ch]
.text:00002914                 mov     [ebp+var_14], ecx
.text:00002917                 mov     edx, [ebp+arg_0]
.text:0000291A                 mov     eax, [edx+10h]
.text:0000291D                 mov     [ebp+var_10], eax
.text:00002920                 mov     [ebp+var_C], 0Eh
.text:00002927                 cmp     [ebp+arg_C], 0
.text:0000292B                 jz      short loc_2955
.text:0000292D                 mov     ecx, [ebp+arg_0]
.text:00002930                 cmp     dword ptr [ecx], 0
.text:00002933                 jz      short loc_2955
.text:00002935                 mov     esi, esp
.text:00002937                 push    0               ; lParam
.text:00002939                 mov     edx, [ebp+wParam]
.text:0000293C                 push    edx             ; wParam
.text:0000293D                 push    401h            ; Msg
.text:00002942                 mov     eax, [ebp+arg_0]
.text:00002945                 mov     ecx, [eax]
.text:00002947                 push    ecx             ; hWnd
.text:00002948                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:0000294E                 cmp     esi, esp
.text:00002950                 call    __RTC_CheckEsp
.text:00002955
.text:00002955 loc_2955:                               ; CODE XREF: _button+4Fj
.text:00002955                                         ; _button+57j
.text:00002955                 mov     edx, [ebp+wParam]
.text:00002958                 push    edx             ; hMenu
.text:00002959                 mov     eax, [ebp+lpWindowName]
.text:0000295C                 push    eax             ; lpWindowName
.text:0000295D                 push    0               ; dwExStyle
.text:0000295F                 xor     ecx, ecx
.text:00002961                 cmp     [ebp+arg_C], 0
.text:00002965                 setnz   cl
.text:00002968                 or      ecx, 50014000h
.text:0000296E                 push    ecx             ; dwStyle
.text:0000296F                 push    offset $SG88950 ; "BUTTON"
.text:00002974                 sub     esp, 10h
.text:00002977                 mov     edx, esp
.text:00002979                 mov     eax, [ebp+var_18]
.text:0000297C                 mov     [edx], eax
.text:0000297E                 mov     ecx, [ebp+var_14]
.text:00002981                 mov     [edx+4], ecx
.text:00002984                 mov     eax, [ebp+var_10]
.text:00002987                 mov     [edx+8], eax
.text:0000298A                 mov     ecx, [ebp+var_C]
.text:0000298D                 mov     [edx+0Ch], ecx
.text:00002990                 mov     edx, [ebp+arg_0]
.text:00002993                 push    edx             ; int
.text:00002994                 call    _doctl
.text:00002999                 add     esp, 28h
.text:0000299C                 mov     eax, [ebp+arg_0]
.text:0000299F                 mov     ecx, [eax+0Ch]
.text:000029A2                 add     ecx, 11h
.text:000029A5                 mov     edx, [ebp+arg_0]
.text:000029A8                 mov     [edx+0Ch], ecx
.text:000029AB                 push    edx
.text:000029AC                 mov     ecx, ebp
.text:000029AE                 push    eax
.text:000029AF                 lea     edx, $LN6_4
.text:000029B5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000029BA                 pop     eax
.text:000029BB                 pop     edx
.text:000029BC                 pop     esi
.text:000029BD                 mov     ecx, [ebp+var_4]
.text:000029C0                 xor     ecx, ebp
.text:000029C2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000029C7                 add     esp, 1Ch
.text:000029CA                 cmp     ebp, esp
.text:000029CC                 call    __RTC_CheckEsp
.text:000029D1                 mov     esp, ebp
.text:000029D3                 pop     ebp
.text:000029D4                 retn
.text:000029D4 _button         endp
.text:000029D4
.text:000029D4 ; ---------------------------------------------------------------------------
.text:000029D5                 align 4
.text:000029D8 $LN6_4          dd 1                    ; DATA XREF: _button+D3o
.text:000029DC                 dd offset $LN5_8
.text:000029E0 $LN5_8          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000029DCo
.text:000029E8                 dd offset $LN4_7
.text:000029EC $LN4_7          dd 0CCCC0072h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000029E8o
.text:000029FC
.text:000029FC ; =============== S U B R O U T I N E =======================================
.text:000029FC
.text:000029FC ; Attributes: bp-based frame
.text:000029FC
.text:000029FC ; int __cdecl static2btn(int, LPCSTR lpWindowName, HMENU hMenu, LPCSTR, HMENU, LPCSTR, HMENU)
.text:000029FC                 public _static2btn
.text:000029FC _static2btn     proc near
.text:000029FC
.text:000029FC var_34          = dword ptr -34h
.text:000029FC var_30          = dword ptr -30h
.text:000029FC var_2C          = dword ptr -2Ch
.text:000029FC var_28          = dword ptr -28h
.text:000029FC var_24          = dword ptr -24h
.text:000029FC var_1C          = dword ptr -1Ch
.text:000029FC var_18          = dword ptr -18h
.text:000029FC var_14          = dword ptr -14h
.text:000029FC var_10          = dword ptr -10h
.text:000029FC var_8           = dword ptr -8
.text:000029FC var_4           = dword ptr -4
.text:000029FC arg_0           = dword ptr  8
.text:000029FC lpWindowName    = dword ptr  0Ch
.text:000029FC hMenu           = dword ptr  10h
.text:000029FC arg_C           = dword ptr  14h
.text:000029FC arg_10          = dword ptr  18h
.text:000029FC arg_14          = dword ptr  1Ch
.text:000029FC arg_18          = dword ptr  20h
.text:000029FC
.text:000029FC                 push    ebp
.text:000029FD                 mov     ebp, esp
.text:000029FF                 sub     esp, 34h
.text:00002A02                 push    edi
.text:00002A03                 lea     edi, [ebp+var_34]
.text:00002A06                 mov     ecx, 0Dh
.text:00002A0B                 mov     eax, 0CCCCCCCCh
.text:00002A10                 rep stosd
.text:00002A12                 mov     eax, dword ptr ds:___security_cookie
.text:00002A17                 xor     eax, ebp
.text:00002A19                 mov     [ebp+var_4], eax
.text:00002A1C                 mov     [ebp+var_8], 0Eh
.text:00002A23                 mov     eax, [ebp+arg_0]
.text:00002A26                 mov     eax, [eax+10h]
.text:00002A29                 add     eax, 3
.text:00002A2C                 cdq
.text:00002A2D                 sub     eax, edx
.text:00002A2F                 sar     eax, 1
.text:00002A31                 add     eax, 3
.text:00002A34                 mov     [ebp+var_30], eax
.text:00002A37                 mov     ecx, [ebp+arg_0]
.text:00002A3A                 mov     eax, [ecx+10h]
.text:00002A3D                 add     eax, 3
.text:00002A40                 imul    eax, 3
.text:00002A43                 cdq
.text:00002A44                 and     edx, 3
.text:00002A47                 add     eax, edx
.text:00002A49                 sar     eax, 2
.text:00002A4C                 add     eax, 3
.text:00002A4F                 mov     [ebp+var_34], eax
.text:00002A52                 mov     edx, [ebp+var_30]
.text:00002A55                 sub     edx, 6
.text:00002A58                 mov     [ebp+var_24], edx
.text:00002A5B                 mov     eax, [ebp+var_34]
.text:00002A5E                 sub     eax, [ebp+var_30]
.text:00002A61                 sub     eax, 3
.text:00002A64                 mov     [ebp+var_28], eax
.text:00002A67                 mov     ecx, [ebp+arg_0]
.text:00002A6A                 mov     edx, [ecx+10h]
.text:00002A6D                 add     edx, 3
.text:00002A70                 sub     edx, [ebp+var_34]
.text:00002A73                 mov     [ebp+var_2C], edx
.text:00002A76                 mov     [ebp+var_1C], 3
.text:00002A7D                 mov     eax, [ebp+var_8]
.text:00002A80                 sub     eax, 8
.text:00002A83                 cdq
.text:00002A84                 sub     eax, edx
.text:00002A86                 sar     eax, 1
.text:00002A88                 mov     ecx, [ebp+arg_0]
.text:00002A8B                 add     eax, [ecx+0Ch]
.text:00002A8E                 mov     [ebp+var_18], eax
.text:00002A91                 mov     edx, [ebp+var_24]
.text:00002A94                 mov     [ebp+var_14], edx
.text:00002A97                 mov     [ebp+var_10], 8
.text:00002A9E                 mov     eax, [ebp+hMenu]
.text:00002AA1                 push    eax             ; hMenu
.text:00002AA2                 mov     ecx, [ebp+lpWindowName]
.text:00002AA5                 push    ecx             ; lpWindowName
.text:00002AA6                 push    0               ; dwExStyle
.text:00002AA8                 push    50000000h       ; dwStyle
.text:00002AAD                 push    offset $SG88973 ; "STATIC"
.text:00002AB2                 sub     esp, 10h
.text:00002AB5                 mov     edx, esp
.text:00002AB7                 mov     eax, [ebp+var_1C]
.text:00002ABA                 mov     [edx], eax
.text:00002ABC                 mov     ecx, [ebp+var_18]
.text:00002ABF                 mov     [edx+4], ecx
.text:00002AC2                 mov     eax, [ebp+var_14]
.text:00002AC5                 mov     [edx+8], eax
.text:00002AC8                 mov     ecx, [ebp+var_10]
.text:00002ACB                 mov     [edx+0Ch], ecx
.text:00002ACE                 mov     edx, [ebp+arg_0]
.text:00002AD1                 push    edx             ; int
.text:00002AD2                 call    _doctl
.text:00002AD7                 add     esp, 28h
.text:00002ADA                 mov     eax, [ebp+var_30]
.text:00002ADD                 mov     [ebp+var_1C], eax
.text:00002AE0                 mov     eax, [ebp+var_8]
.text:00002AE3                 sub     eax, 0Eh
.text:00002AE6                 cdq
.text:00002AE7                 sub     eax, edx
.text:00002AE9                 sar     eax, 1
.text:00002AEB                 mov     ecx, [ebp+arg_0]
.text:00002AEE                 add     eax, [ecx+0Ch]
.text:00002AF1                 mov     [ebp+var_18], eax
.text:00002AF4                 mov     edx, [ebp+var_28]
.text:00002AF7                 mov     [ebp+var_14], edx
.text:00002AFA                 mov     [ebp+var_10], 0Eh
.text:00002B01                 mov     eax, [ebp+arg_10]
.text:00002B04                 push    eax             ; hMenu
.text:00002B05                 mov     ecx, [ebp+arg_C]
.text:00002B08                 push    ecx             ; lpWindowName
.text:00002B09                 push    0               ; dwExStyle
.text:00002B0B                 push    50014000h       ; dwStyle
.text:00002B10                 push    offset $SG88974 ; "BUTTON"
.text:00002B15                 sub     esp, 10h
.text:00002B18                 mov     edx, esp
.text:00002B1A                 mov     eax, [ebp+var_1C]
.text:00002B1D                 mov     [edx], eax
.text:00002B1F                 mov     ecx, [ebp+var_18]
.text:00002B22                 mov     [edx+4], ecx
.text:00002B25                 mov     eax, [ebp+var_14]
.text:00002B28                 mov     [edx+8], eax
.text:00002B2B                 mov     ecx, [ebp+var_10]
.text:00002B2E                 mov     [edx+0Ch], ecx
.text:00002B31                 mov     edx, [ebp+arg_0]
.text:00002B34                 push    edx             ; int
.text:00002B35                 call    _doctl
.text:00002B3A                 add     esp, 28h
.text:00002B3D                 mov     eax, [ebp+var_34]
.text:00002B40                 mov     [ebp+var_1C], eax
.text:00002B43                 mov     eax, [ebp+var_8]
.text:00002B46                 sub     eax, 0Eh
.text:00002B49                 cdq
.text:00002B4A                 sub     eax, edx
.text:00002B4C                 sar     eax, 1
.text:00002B4E                 mov     ecx, [ebp+arg_0]
.text:00002B51                 add     eax, [ecx+0Ch]
.text:00002B54                 mov     [ebp+var_18], eax
.text:00002B57                 mov     edx, [ebp+var_2C]
.text:00002B5A                 mov     [ebp+var_14], edx
.text:00002B5D                 mov     [ebp+var_10], 0Eh
.text:00002B64                 mov     eax, [ebp+arg_18]
.text:00002B67                 push    eax             ; hMenu
.text:00002B68                 mov     ecx, [ebp+arg_14]
.text:00002B6B                 push    ecx             ; lpWindowName
.text:00002B6C                 push    0               ; dwExStyle
.text:00002B6E                 push    50014000h       ; dwStyle
.text:00002B73                 push    offset $SG88975 ; "BUTTON"
.text:00002B78                 sub     esp, 10h
.text:00002B7B                 mov     edx, esp
.text:00002B7D                 mov     eax, [ebp+var_1C]
.text:00002B80                 mov     [edx], eax
.text:00002B82                 mov     ecx, [ebp+var_18]
.text:00002B85                 mov     [edx+4], ecx
.text:00002B88                 mov     eax, [ebp+var_14]
.text:00002B8B                 mov     [edx+8], eax
.text:00002B8E                 mov     ecx, [ebp+var_10]
.text:00002B91                 mov     [edx+0Ch], ecx
.text:00002B94                 mov     edx, [ebp+arg_0]
.text:00002B97                 push    edx             ; int
.text:00002B98                 call    _doctl
.text:00002B9D                 add     esp, 28h
.text:00002BA0                 mov     eax, [ebp+arg_0]
.text:00002BA3                 mov     ecx, [eax+0Ch]
.text:00002BA6                 mov     edx, [ebp+var_8]
.text:00002BA9                 lea     eax, [edx+ecx+3]
.text:00002BAD                 mov     ecx, [ebp+arg_0]
.text:00002BB0                 mov     [ecx+0Ch], eax
.text:00002BB3                 push    edx
.text:00002BB4                 mov     ecx, ebp
.text:00002BB6                 push    eax
.text:00002BB7                 lea     edx, $LN5_9
.text:00002BBD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002BC2                 pop     eax
.text:00002BC3                 pop     edx
.text:00002BC4                 pop     edi
.text:00002BC5                 mov     ecx, [ebp+var_4]
.text:00002BC8                 xor     ecx, ebp
.text:00002BCA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002BCF                 add     esp, 34h
.text:00002BD2                 cmp     ebp, esp
.text:00002BD4                 call    __RTC_CheckEsp
.text:00002BD9                 mov     esp, ebp
.text:00002BDB                 pop     ebp
.text:00002BDC                 retn
.text:00002BDC _static2btn     endp
.text:00002BDC
.text:00002BDC ; ---------------------------------------------------------------------------
.text:00002BDD                 align 10h
.text:00002BE0 $LN5_9          dd 1                    ; DATA XREF: _static2btn+1BBo
.text:00002BE4                 dd offset $LN4_8
.text:00002BE8 $LN4_8          dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00002BE4o
.text:00002BF0                 dd offset $LN3_5
.text:00002BF4 $LN3_5          dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:00002BF0o
.text:00002BFC
.text:00002BFC ; =============== S U B R O U T I N E =======================================
.text:00002BFC
.text:00002BFC ; Attributes: bp-based frame
.text:00002BFC
.text:00002BFC ; int __cdecl staticedit(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int)
.text:00002BFC                 public _staticedit
.text:00002BFC _staticedit     proc near               ; DATA XREF: _winctrl_layout:loc_527Bo
.text:00002BFC
.text:00002BFC arg_0           = dword ptr  8
.text:00002BFC lpWindowName    = dword ptr  0Ch
.text:00002BFC hMenu           = dword ptr  10h
.text:00002BFC arg_C           = dword ptr  14h
.text:00002BFC arg_10          = dword ptr  18h
.text:00002BFC
.text:00002BFC                 push    ebp
.text:00002BFD                 mov     ebp, esp
.text:00002BFF                 push    0               ; int
.text:00002C01                 mov     eax, [ebp+arg_10]
.text:00002C04                 push    eax             ; int
.text:00002C05                 mov     ecx, [ebp+arg_C]
.text:00002C08                 push    ecx             ; HMENU
.text:00002C09                 mov     edx, [ebp+hMenu]
.text:00002C0C                 push    edx             ; hMenu
.text:00002C0D                 mov     eax, [ebp+lpWindowName]
.text:00002C10                 push    eax             ; lpWindowName
.text:00002C11                 mov     ecx, [ebp+arg_0]
.text:00002C14                 push    ecx             ; int
.text:00002C15                 call    _staticedit_internal
.text:00002C1A                 add     esp, 18h
.text:00002C1D                 cmp     ebp, esp
.text:00002C1F                 call    __RTC_CheckEsp
.text:00002C24                 pop     ebp
.text:00002C25                 retn
.text:00002C25 _staticedit     endp
.text:00002C25
.text:00002C25 ; ---------------------------------------------------------------------------
.text:00002C26                 db 6 dup(0CCh)
.text:00002C2C
.text:00002C2C ; =============== S U B R O U T I N E =======================================
.text:00002C2C
.text:00002C2C ; Attributes: bp-based frame
.text:00002C2C
.text:00002C2C ; int __cdecl staticedit_internal(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int, int)
.text:00002C2C _staticedit_internal proc near          ; CODE XREF: _staticedit+19p
.text:00002C2C                                         ; _staticpassedit+19p
.text:00002C2C
.text:00002C2C var_2C          = dword ptr -2Ch
.text:00002C2C var_28          = dword ptr -28h
.text:00002C2C var_24          = dword ptr -24h
.text:00002C2C var_1C          = dword ptr -1Ch
.text:00002C2C var_18          = dword ptr -18h
.text:00002C2C var_14          = dword ptr -14h
.text:00002C2C var_10          = dword ptr -10h
.text:00002C2C var_8           = dword ptr -8
.text:00002C2C var_4           = dword ptr -4
.text:00002C2C arg_0           = dword ptr  8
.text:00002C2C lpWindowName    = dword ptr  0Ch
.text:00002C2C hMenu           = dword ptr  10h
.text:00002C2C arg_C           = dword ptr  14h
.text:00002C2C arg_10          = dword ptr  18h
.text:00002C2C arg_14          = dword ptr  1Ch
.text:00002C2C
.text:00002C2C                 push    ebp
.text:00002C2D                 mov     ebp, esp
.text:00002C2F                 sub     esp, 2Ch
.text:00002C32                 push    edi
.text:00002C33                 lea     edi, [ebp+var_2C]
.text:00002C36                 mov     ecx, 0Bh
.text:00002C3B                 mov     eax, 0CCCCCCCCh
.text:00002C40                 rep stosd
.text:00002C42                 mov     eax, dword ptr ds:___security_cookie
.text:00002C47                 xor     eax, ebp
.text:00002C49                 mov     [ebp+var_4], eax
.text:00002C4C                 mov     [ebp+var_8], 0Ch
.text:00002C53                 mov     eax, 64h ; 'd'
.text:00002C58                 sub     eax, [ebp+arg_10]
.text:00002C5B                 mov     ecx, [ebp+arg_0]
.text:00002C5E                 mov     edx, [ecx+10h]
.text:00002C61                 add     edx, 3
.text:00002C64                 imul    eax, edx
.text:00002C67                 cdq
.text:00002C68                 mov     ecx, 64h ; 'd'
.text:00002C6D                 idiv    ecx
.text:00002C6F                 add     eax, 3
.text:00002C72                 mov     [ebp+var_2C], eax
.text:00002C75                 mov     edx, [ebp+var_2C]
.text:00002C78                 sub     edx, 6
.text:00002C7B                 mov     [ebp+var_24], edx
.text:00002C7E                 mov     eax, [ebp+arg_0]
.text:00002C81                 mov     ecx, [eax+10h]
.text:00002C84                 add     ecx, 3
.text:00002C87                 sub     ecx, [ebp+var_2C]
.text:00002C8A                 mov     [ebp+var_28], ecx
.text:00002C8D                 mov     [ebp+var_1C], 3
.text:00002C94                 mov     eax, [ebp+var_8]
.text:00002C97                 sub     eax, 8
.text:00002C9A                 cdq
.text:00002C9B                 sub     eax, edx
.text:00002C9D                 sar     eax, 1
.text:00002C9F                 mov     edx, [ebp+arg_0]
.text:00002CA2                 add     eax, [edx+0Ch]
.text:00002CA5                 mov     [ebp+var_18], eax
.text:00002CA8                 mov     eax, [ebp+var_24]
.text:00002CAB                 mov     [ebp+var_14], eax
.text:00002CAE                 mov     [ebp+var_10], 8
.text:00002CB5                 mov     ecx, [ebp+hMenu]
.text:00002CB8                 push    ecx             ; hMenu
.text:00002CB9                 mov     edx, [ebp+lpWindowName]
.text:00002CBC                 push    edx             ; lpWindowName
.text:00002CBD                 push    0               ; dwExStyle
.text:00002CBF                 push    50000000h       ; dwStyle
.text:00002CC4                 push    offset $SG88995 ; "STATIC"
.text:00002CC9                 sub     esp, 10h
.text:00002CCC                 mov     eax, esp
.text:00002CCE                 mov     ecx, [ebp+var_1C]
.text:00002CD1                 mov     [eax], ecx
.text:00002CD3                 mov     edx, [ebp+var_18]
.text:00002CD6                 mov     [eax+4], edx
.text:00002CD9                 mov     ecx, [ebp+var_14]
.text:00002CDC                 mov     [eax+8], ecx
.text:00002CDF                 mov     edx, [ebp+var_10]
.text:00002CE2                 mov     [eax+0Ch], edx
.text:00002CE5                 mov     eax, [ebp+arg_0]
.text:00002CE8                 push    eax             ; int
.text:00002CE9                 call    _doctl
.text:00002CEE                 add     esp, 28h
.text:00002CF1                 mov     ecx, [ebp+var_2C]
.text:00002CF4                 mov     [ebp+var_1C], ecx
.text:00002CF7                 mov     eax, [ebp+var_8]
.text:00002CFA                 sub     eax, 0Ch
.text:00002CFD                 cdq
.text:00002CFE                 sub     eax, edx
.text:00002D00                 sar     eax, 1
.text:00002D02                 mov     edx, [ebp+arg_0]
.text:00002D05                 add     eax, [edx+0Ch]
.text:00002D08                 mov     [ebp+var_18], eax
.text:00002D0B                 mov     eax, [ebp+var_28]
.text:00002D0E                 mov     [ebp+var_14], eax
.text:00002D11                 mov     [ebp+var_10], 0Ch
.text:00002D18                 mov     ecx, [ebp+arg_C]
.text:00002D1B                 push    ecx             ; hMenu
.text:00002D1C                 push    offset $SG88996 ; lpWindowName
.text:00002D21                 push    200h            ; dwExStyle
.text:00002D26                 mov     edx, [ebp+arg_14]
.text:00002D29                 or      edx, 50010080h
.text:00002D2F                 push    edx             ; dwStyle
.text:00002D30                 push    offset $SG88997 ; "EDIT"
.text:00002D35                 sub     esp, 10h
.text:00002D38                 mov     eax, esp
.text:00002D3A                 mov     ecx, [ebp+var_1C]
.text:00002D3D                 mov     [eax], ecx
.text:00002D3F                 mov     edx, [ebp+var_18]
.text:00002D42                 mov     [eax+4], edx
.text:00002D45                 mov     ecx, [ebp+var_14]
.text:00002D48                 mov     [eax+8], ecx
.text:00002D4B                 mov     edx, [ebp+var_10]
.text:00002D4E                 mov     [eax+0Ch], edx
.text:00002D51                 mov     eax, [ebp+arg_0]
.text:00002D54                 push    eax             ; int
.text:00002D55                 call    _doctl
.text:00002D5A                 add     esp, 28h
.text:00002D5D                 mov     ecx, [ebp+arg_0]
.text:00002D60                 mov     edx, [ecx+0Ch]
.text:00002D63                 mov     eax, [ebp+var_8]
.text:00002D66                 lea     ecx, [eax+edx+3]
.text:00002D6A                 mov     edx, [ebp+arg_0]
.text:00002D6D                 mov     [edx+0Ch], ecx
.text:00002D70                 push    edx
.text:00002D71                 mov     ecx, ebp
.text:00002D73                 push    eax
.text:00002D74                 lea     edx, $LN5_10
.text:00002D7A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002D7F                 pop     eax
.text:00002D80                 pop     edx
.text:00002D81                 pop     edi
.text:00002D82                 mov     ecx, [ebp+var_4]
.text:00002D85                 xor     ecx, ebp
.text:00002D87                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002D8C                 add     esp, 2Ch
.text:00002D8F                 cmp     ebp, esp
.text:00002D91                 call    __RTC_CheckEsp
.text:00002D96                 mov     esp, ebp
.text:00002D98                 pop     ebp
.text:00002D99                 retn
.text:00002D99 _staticedit_internal endp
.text:00002D99
.text:00002D99 ; ---------------------------------------------------------------------------
.text:00002D9A                 align 4
.text:00002D9C $LN5_10         dd 1                    ; DATA XREF: _staticedit_internal+148o
.text:00002DA0                 dd offset $LN4_9
.text:00002DA4 $LN4_9          dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00002DA0o
.text:00002DAC                 dd offset $LN3_6
.text:00002DB0 $LN3_6          dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00002DACo
.text:00002DBC
.text:00002DBC ; =============== S U B R O U T I N E =======================================
.text:00002DBC
.text:00002DBC ; Attributes: bp-based frame
.text:00002DBC
.text:00002DBC ; int __cdecl staticpassedit(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int)
.text:00002DBC                 public _staticpassedit
.text:00002DBC _staticpassedit proc near               ; DATA XREF: _winctrl_layout+8C3o
.text:00002DBC
.text:00002DBC arg_0           = dword ptr  8
.text:00002DBC lpWindowName    = dword ptr  0Ch
.text:00002DBC hMenu           = dword ptr  10h
.text:00002DBC arg_C           = dword ptr  14h
.text:00002DBC arg_10          = dword ptr  18h
.text:00002DBC
.text:00002DBC                 push    ebp
.text:00002DBD                 mov     ebp, esp
.text:00002DBF                 push    20h ; ' '       ; int
.text:00002DC1                 mov     eax, [ebp+arg_10]
.text:00002DC4                 push    eax             ; int
.text:00002DC5                 mov     ecx, [ebp+arg_C]
.text:00002DC8                 push    ecx             ; HMENU
.text:00002DC9                 mov     edx, [ebp+hMenu]
.text:00002DCC                 push    edx             ; hMenu
.text:00002DCD                 mov     eax, [ebp+lpWindowName]
.text:00002DD0                 push    eax             ; lpWindowName
.text:00002DD1                 mov     ecx, [ebp+arg_0]
.text:00002DD4                 push    ecx             ; int
.text:00002DD5                 call    _staticedit_internal
.text:00002DDA                 add     esp, 18h
.text:00002DDD                 cmp     ebp, esp
.text:00002DDF                 call    __RTC_CheckEsp
.text:00002DE4                 pop     ebp
.text:00002DE5                 retn
.text:00002DE5 _staticpassedit endp
.text:00002DE5
.text:00002DE5 ; ---------------------------------------------------------------------------
.text:00002DE6                 db 6 dup(0CCh)
.text:00002DEC
.text:00002DEC ; =============== S U B R O U T I N E =======================================
.text:00002DEC
.text:00002DEC ; Attributes: bp-based frame
.text:00002DEC
.text:00002DEC ; int __cdecl staticddl(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int)
.text:00002DEC                 public _staticddl
.text:00002DEC _staticddl      proc near               ; CODE XREF: _winctrl_layout+DE8p
.text:00002DEC
.text:00002DEC var_2C          = dword ptr -2Ch
.text:00002DEC var_28          = dword ptr -28h
.text:00002DEC var_24          = dword ptr -24h
.text:00002DEC var_1C          = dword ptr -1Ch
.text:00002DEC var_18          = dword ptr -18h
.text:00002DEC var_14          = dword ptr -14h
.text:00002DEC var_10          = dword ptr -10h
.text:00002DEC var_8           = dword ptr -8
.text:00002DEC var_4           = dword ptr -4
.text:00002DEC arg_0           = dword ptr  8
.text:00002DEC lpWindowName    = dword ptr  0Ch
.text:00002DEC hMenu           = dword ptr  10h
.text:00002DEC arg_C           = dword ptr  14h
.text:00002DEC arg_10          = dword ptr  18h
.text:00002DEC
.text:00002DEC                 push    ebp
.text:00002DED                 mov     ebp, esp
.text:00002DEF                 sub     esp, 2Ch
.text:00002DF2                 push    edi
.text:00002DF3                 lea     edi, [ebp+var_2C]
.text:00002DF6                 mov     ecx, 0Bh
.text:00002DFB                 mov     eax, 0CCCCCCCCh
.text:00002E00                 rep stosd
.text:00002E02                 mov     eax, dword ptr ds:___security_cookie
.text:00002E07                 xor     eax, ebp
.text:00002E09                 mov     [ebp+var_4], eax
.text:00002E0C                 mov     [ebp+var_8], 0Ch
.text:00002E13                 mov     eax, 64h ; 'd'
.text:00002E18                 sub     eax, [ebp+arg_10]
.text:00002E1B                 mov     ecx, [ebp+arg_0]
.text:00002E1E                 mov     edx, [ecx+10h]
.text:00002E21                 add     edx, 3
.text:00002E24                 imul    eax, edx
.text:00002E27                 cdq
.text:00002E28                 mov     ecx, 64h ; 'd'
.text:00002E2D                 idiv    ecx
.text:00002E2F                 add     eax, 3
.text:00002E32                 mov     [ebp+var_2C], eax
.text:00002E35                 mov     edx, [ebp+var_2C]
.text:00002E38                 sub     edx, 6
.text:00002E3B                 mov     [ebp+var_24], edx
.text:00002E3E                 mov     eax, [ebp+arg_0]
.text:00002E41                 mov     ecx, [eax+10h]
.text:00002E44                 add     ecx, 3
.text:00002E47                 sub     ecx, [ebp+var_2C]
.text:00002E4A                 mov     [ebp+var_28], ecx
.text:00002E4D                 mov     [ebp+var_1C], 3
.text:00002E54                 mov     eax, [ebp+var_8]
.text:00002E57                 sub     eax, 8
.text:00002E5A                 cdq
.text:00002E5B                 sub     eax, edx
.text:00002E5D                 sar     eax, 1
.text:00002E5F                 mov     edx, [ebp+arg_0]
.text:00002E62                 add     eax, [edx+0Ch]
.text:00002E65                 mov     [ebp+var_18], eax
.text:00002E68                 mov     eax, [ebp+var_24]
.text:00002E6B                 mov     [ebp+var_14], eax
.text:00002E6E                 mov     [ebp+var_10], 8
.text:00002E75                 mov     ecx, [ebp+hMenu]
.text:00002E78                 push    ecx             ; hMenu
.text:00002E79                 mov     edx, [ebp+lpWindowName]
.text:00002E7C                 push    edx             ; lpWindowName
.text:00002E7D                 push    0               ; dwExStyle
.text:00002E7F                 push    50000000h       ; dwStyle
.text:00002E84                 push    offset $SG89036 ; "STATIC"
.text:00002E89                 sub     esp, 10h
.text:00002E8C                 mov     eax, esp
.text:00002E8E                 mov     ecx, [ebp+var_1C]
.text:00002E91                 mov     [eax], ecx
.text:00002E93                 mov     edx, [ebp+var_18]
.text:00002E96                 mov     [eax+4], edx
.text:00002E99                 mov     ecx, [ebp+var_14]
.text:00002E9C                 mov     [eax+8], ecx
.text:00002E9F                 mov     edx, [ebp+var_10]
.text:00002EA2                 mov     [eax+0Ch], edx
.text:00002EA5                 mov     eax, [ebp+arg_0]
.text:00002EA8                 push    eax             ; int
.text:00002EA9                 call    _doctl
.text:00002EAE                 add     esp, 28h
.text:00002EB1                 mov     ecx, [ebp+var_2C]
.text:00002EB4                 mov     [ebp+var_1C], ecx
.text:00002EB7                 mov     eax, [ebp+var_8]
.text:00002EBA                 sub     eax, 0Ch
.text:00002EBD                 cdq
.text:00002EBE                 sub     eax, edx
.text:00002EC0                 sar     eax, 1
.text:00002EC2                 mov     edx, [ebp+arg_0]
.text:00002EC5                 add     eax, [edx+0Ch]
.text:00002EC8                 mov     [ebp+var_18], eax
.text:00002ECB                 mov     eax, [ebp+var_28]
.text:00002ECE                 mov     [ebp+var_14], eax
.text:00002ED1                 mov     [ebp+var_10], 30h ; '0'
.text:00002ED8                 mov     ecx, [ebp+arg_C]
.text:00002EDB                 push    ecx             ; hMenu
.text:00002EDC                 push    offset $SG89037 ; lpWindowName
.text:00002EE1                 push    200h            ; dwExStyle
.text:00002EE6                 push    50210203h       ; dwStyle
.text:00002EEB                 push    offset $SG89038 ; "COMBOBOX"
.text:00002EF0                 sub     esp, 10h
.text:00002EF3                 mov     edx, esp
.text:00002EF5                 mov     eax, [ebp+var_1C]
.text:00002EF8                 mov     [edx], eax
.text:00002EFA                 mov     ecx, [ebp+var_18]
.text:00002EFD                 mov     [edx+4], ecx
.text:00002F00                 mov     eax, [ebp+var_14]
.text:00002F03                 mov     [edx+8], eax
.text:00002F06                 mov     ecx, [ebp+var_10]
.text:00002F09                 mov     [edx+0Ch], ecx
.text:00002F0C                 mov     edx, [ebp+arg_0]
.text:00002F0F                 push    edx             ; int
.text:00002F10                 call    _doctl
.text:00002F15                 add     esp, 28h
.text:00002F18                 mov     eax, [ebp+arg_0]
.text:00002F1B                 mov     ecx, [eax+0Ch]
.text:00002F1E                 mov     edx, [ebp+var_8]
.text:00002F21                 lea     eax, [edx+ecx+3]
.text:00002F25                 mov     ecx, [ebp+arg_0]
.text:00002F28                 mov     [ecx+0Ch], eax
.text:00002F2B                 push    edx
.text:00002F2C                 mov     ecx, ebp
.text:00002F2E                 push    eax
.text:00002F2F                 lea     edx, $LN5_11
.text:00002F35                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002F3A                 pop     eax
.text:00002F3B                 pop     edx
.text:00002F3C                 pop     edi
.text:00002F3D                 mov     ecx, [ebp+var_4]
.text:00002F40                 xor     ecx, ebp
.text:00002F42                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002F47                 add     esp, 2Ch
.text:00002F4A                 cmp     ebp, esp
.text:00002F4C                 call    __RTC_CheckEsp
.text:00002F51                 mov     esp, ebp
.text:00002F53                 pop     ebp
.text:00002F54                 retn
.text:00002F54 _staticddl      endp
.text:00002F54
.text:00002F54 ; ---------------------------------------------------------------------------
.text:00002F55                 align 4
.text:00002F58 $LN5_11         dd 1                    ; DATA XREF: _staticddl+143o
.text:00002F5C                 dd offset $LN4_10
.text:00002F60 $LN4_10         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00002F5Co
.text:00002F68                 dd offset $LN3_7
.text:00002F6C $LN3_7          dd 0CCCC0072h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00002F68o
.text:00002F7C
.text:00002F7C ; =============== S U B R O U T I N E =======================================
.text:00002F7C
.text:00002F7C ; Attributes: bp-based frame
.text:00002F7C
.text:00002F7C ; int __cdecl staticcombo(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int)
.text:00002F7C                 public _staticcombo
.text:00002F7C _staticcombo    proc near               ; CODE XREF: _winctrl_layout+8ADp
.text:00002F7C
.text:00002F7C var_2C          = dword ptr -2Ch
.text:00002F7C var_28          = dword ptr -28h
.text:00002F7C var_24          = dword ptr -24h
.text:00002F7C var_1C          = dword ptr -1Ch
.text:00002F7C var_18          = dword ptr -18h
.text:00002F7C var_14          = dword ptr -14h
.text:00002F7C var_10          = dword ptr -10h
.text:00002F7C var_8           = dword ptr -8
.text:00002F7C var_4           = dword ptr -4
.text:00002F7C arg_0           = dword ptr  8
.text:00002F7C lpWindowName    = dword ptr  0Ch
.text:00002F7C hMenu           = dword ptr  10h
.text:00002F7C arg_C           = dword ptr  14h
.text:00002F7C arg_10          = dword ptr  18h
.text:00002F7C
.text:00002F7C                 push    ebp
.text:00002F7D                 mov     ebp, esp
.text:00002F7F                 sub     esp, 2Ch
.text:00002F82                 push    edi
.text:00002F83                 lea     edi, [ebp+var_2C]
.text:00002F86                 mov     ecx, 0Bh
.text:00002F8B                 mov     eax, 0CCCCCCCCh
.text:00002F90                 rep stosd
.text:00002F92                 mov     eax, dword ptr ds:___security_cookie
.text:00002F97                 xor     eax, ebp
.text:00002F99                 mov     [ebp+var_4], eax
.text:00002F9C                 mov     [ebp+var_8], 0Ch
.text:00002FA3                 mov     eax, 64h ; 'd'
.text:00002FA8                 sub     eax, [ebp+arg_10]
.text:00002FAB                 mov     ecx, [ebp+arg_0]
.text:00002FAE                 mov     edx, [ecx+10h]
.text:00002FB1                 add     edx, 3
.text:00002FB4                 imul    eax, edx
.text:00002FB7                 cdq
.text:00002FB8                 mov     ecx, 64h ; 'd'
.text:00002FBD                 idiv    ecx
.text:00002FBF                 add     eax, 3
.text:00002FC2                 mov     [ebp+var_2C], eax
.text:00002FC5                 mov     edx, [ebp+var_2C]
.text:00002FC8                 sub     edx, 6
.text:00002FCB                 mov     [ebp+var_24], edx
.text:00002FCE                 mov     eax, [ebp+arg_0]
.text:00002FD1                 mov     ecx, [eax+10h]
.text:00002FD4                 add     ecx, 3
.text:00002FD7                 sub     ecx, [ebp+var_2C]
.text:00002FDA                 mov     [ebp+var_28], ecx
.text:00002FDD                 mov     [ebp+var_1C], 3
.text:00002FE4                 mov     eax, [ebp+var_8]
.text:00002FE7                 sub     eax, 8
.text:00002FEA                 cdq
.text:00002FEB                 sub     eax, edx
.text:00002FED                 sar     eax, 1
.text:00002FEF                 mov     edx, [ebp+arg_0]
.text:00002FF2                 add     eax, [edx+0Ch]
.text:00002FF5                 mov     [ebp+var_18], eax
.text:00002FF8                 mov     eax, [ebp+var_24]
.text:00002FFB                 mov     [ebp+var_14], eax
.text:00002FFE                 mov     [ebp+var_10], 8
.text:00003005                 mov     ecx, [ebp+hMenu]
.text:00003008                 push    ecx             ; hMenu
.text:00003009                 mov     edx, [ebp+lpWindowName]
.text:0000300C                 push    edx             ; lpWindowName
.text:0000300D                 push    0               ; dwExStyle
.text:0000300F                 push    50000000h       ; dwStyle
.text:00003014                 push    offset $SG89056 ; "STATIC"
.text:00003019                 sub     esp, 10h
.text:0000301C                 mov     eax, esp
.text:0000301E                 mov     ecx, [ebp+var_1C]
.text:00003021                 mov     [eax], ecx
.text:00003023                 mov     edx, [ebp+var_18]
.text:00003026                 mov     [eax+4], edx
.text:00003029                 mov     ecx, [ebp+var_14]
.text:0000302C                 mov     [eax+8], ecx
.text:0000302F                 mov     edx, [ebp+var_10]
.text:00003032                 mov     [eax+0Ch], edx
.text:00003035                 mov     eax, [ebp+arg_0]
.text:00003038                 push    eax             ; int
.text:00003039                 call    _doctl
.text:0000303E                 add     esp, 28h
.text:00003041                 mov     ecx, [ebp+var_2C]
.text:00003044                 mov     [ebp+var_1C], ecx
.text:00003047                 mov     eax, [ebp+var_8]
.text:0000304A                 sub     eax, 0Ch
.text:0000304D                 cdq
.text:0000304E                 sub     eax, edx
.text:00003050                 sar     eax, 1
.text:00003052                 mov     edx, [ebp+arg_0]
.text:00003055                 add     eax, [edx+0Ch]
.text:00003058                 mov     [ebp+var_18], eax
.text:0000305B                 mov     eax, [ebp+var_28]
.text:0000305E                 mov     [ebp+var_14], eax
.text:00003061                 mov     [ebp+var_10], 78h ; 'x'
.text:00003068                 mov     ecx, [ebp+arg_C]
.text:0000306B                 push    ecx             ; hMenu
.text:0000306C                 push    offset $SG89057 ; lpWindowName
.text:00003071                 push    200h            ; dwExStyle
.text:00003076                 push    50210202h       ; dwStyle
.text:0000307B                 push    offset $SG89058 ; "COMBOBOX"
.text:00003080                 sub     esp, 10h
.text:00003083                 mov     edx, esp
.text:00003085                 mov     eax, [ebp+var_1C]
.text:00003088                 mov     [edx], eax
.text:0000308A                 mov     ecx, [ebp+var_18]
.text:0000308D                 mov     [edx+4], ecx
.text:00003090                 mov     eax, [ebp+var_14]
.text:00003093                 mov     [edx+8], eax
.text:00003096                 mov     ecx, [ebp+var_10]
.text:00003099                 mov     [edx+0Ch], ecx
.text:0000309C                 mov     edx, [ebp+arg_0]
.text:0000309F                 push    edx             ; int
.text:000030A0                 call    _doctl
.text:000030A5                 add     esp, 28h
.text:000030A8                 mov     eax, [ebp+arg_0]
.text:000030AB                 mov     ecx, [eax+0Ch]
.text:000030AE                 mov     edx, [ebp+var_8]
.text:000030B1                 lea     eax, [edx+ecx+3]
.text:000030B5                 mov     ecx, [ebp+arg_0]
.text:000030B8                 mov     [ecx+0Ch], eax
.text:000030BB                 push    edx
.text:000030BC                 mov     ecx, ebp
.text:000030BE                 push    eax
.text:000030BF                 lea     edx, $LN5_12
.text:000030C5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000030CA                 pop     eax
.text:000030CB                 pop     edx
.text:000030CC                 pop     edi
.text:000030CD                 mov     ecx, [ebp+var_4]
.text:000030D0                 xor     ecx, ebp
.text:000030D2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000030D7                 add     esp, 2Ch
.text:000030DA                 cmp     ebp, esp
.text:000030DC                 call    __RTC_CheckEsp
.text:000030E1                 mov     esp, ebp
.text:000030E3                 pop     ebp
.text:000030E4                 retn
.text:000030E4 _staticcombo    endp
.text:000030E4
.text:000030E4 ; ---------------------------------------------------------------------------
.text:000030E5                 align 4
.text:000030E8 $LN5_12         dd 1                    ; DATA XREF: _staticcombo+143o
.text:000030EC                 dd offset $LN4_11
.text:000030F0 $LN4_11         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:000030ECo
.text:000030F8                 dd offset $LN3_8
.text:000030FC $LN3_8          dd 0CCCC0072h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000030F8o
.text:0000310C
.text:0000310C ; =============== S U B R O U T I N E =======================================
.text:0000310C
.text:0000310C ; Attributes: bp-based frame
.text:0000310C
.text:0000310C ; int __cdecl staticddlbig(int, LPCSTR lpWindowName, HMENU hMenu, HMENU)
.text:0000310C                 public _staticddlbig
.text:0000310C _staticddlbig   proc near               ; CODE XREF: _winctrl_layout+DB5p
.text:0000310C
.text:0000310C var_1C          = dword ptr -1Ch
.text:0000310C var_18          = dword ptr -18h
.text:0000310C var_14          = dword ptr -14h
.text:0000310C var_10          = dword ptr -10h
.text:0000310C var_C           = dword ptr -0Ch
.text:0000310C var_8           = dword ptr -8
.text:0000310C var_4           = dword ptr -4
.text:0000310C arg_0           = dword ptr  8
.text:0000310C lpWindowName    = dword ptr  0Ch
.text:0000310C hMenu           = dword ptr  10h
.text:0000310C arg_C           = dword ptr  14h
.text:0000310C
.text:0000310C                 push    ebp
.text:0000310D                 mov     ebp, esp
.text:0000310F                 sub     esp, 1Ch
.text:00003112                 mov     eax, 0CCCCCCCCh
.text:00003117                 mov     [ebp+var_1C], eax
.text:0000311A                 mov     [ebp+var_18], eax
.text:0000311D                 mov     [ebp+var_14], eax
.text:00003120                 mov     [ebp+var_10], eax
.text:00003123                 mov     [ebp+var_C], eax
.text:00003126                 mov     [ebp+var_8], eax
.text:00003129                 mov     [ebp+var_4], eax
.text:0000312C                 mov     eax, dword ptr ds:___security_cookie
.text:00003131                 xor     eax, ebp
.text:00003133                 mov     [ebp+var_4], eax
.text:00003136                 cmp     [ebp+lpWindowName], 0
.text:0000313A                 jz      short loc_31A7
.text:0000313C                 mov     [ebp+var_18], 3
.text:00003143                 mov     eax, [ebp+arg_0]
.text:00003146                 mov     ecx, [eax+0Ch]
.text:00003149                 mov     [ebp+var_14], ecx
.text:0000314C                 mov     edx, [ebp+arg_0]
.text:0000314F                 mov     eax, [edx+10h]
.text:00003152                 mov     [ebp+var_10], eax
.text:00003155                 mov     [ebp+var_C], 8
.text:0000315C                 mov     ecx, [ebp+hMenu]
.text:0000315F                 push    ecx             ; hMenu
.text:00003160                 mov     edx, [ebp+lpWindowName]
.text:00003163                 push    edx             ; lpWindowName
.text:00003164                 push    0               ; dwExStyle
.text:00003166                 push    50000000h       ; dwStyle
.text:0000316B                 push    offset $SG89071 ; "STATIC"
.text:00003170                 sub     esp, 10h
.text:00003173                 mov     eax, esp
.text:00003175                 mov     ecx, [ebp+var_18]
.text:00003178                 mov     [eax], ecx
.text:0000317A                 mov     edx, [ebp+var_14]
.text:0000317D                 mov     [eax+4], edx
.text:00003180                 mov     ecx, [ebp+var_10]
.text:00003183                 mov     [eax+8], ecx
.text:00003186                 mov     edx, [ebp+var_C]
.text:00003189                 mov     [eax+0Ch], edx
.text:0000318C                 mov     eax, [ebp+arg_0]
.text:0000318F                 push    eax             ; int
.text:00003190                 call    _doctl
.text:00003195                 add     esp, 28h
.text:00003198                 mov     ecx, [ebp+arg_0]
.text:0000319B                 mov     edx, [ecx+0Ch]
.text:0000319E                 add     edx, 8
.text:000031A1                 mov     eax, [ebp+arg_0]
.text:000031A4                 mov     [eax+0Ch], edx
.text:000031A7
.text:000031A7 loc_31A7:                               ; CODE XREF: _staticddlbig+2Ej
.text:000031A7                 mov     [ebp+var_18], 3
.text:000031AE                 mov     ecx, [ebp+arg_0]
.text:000031B1                 mov     edx, [ecx+0Ch]
.text:000031B4                 mov     [ebp+var_14], edx
.text:000031B7                 mov     eax, [ebp+arg_0]
.text:000031BA                 mov     ecx, [eax+10h]
.text:000031BD                 mov     [ebp+var_10], ecx
.text:000031C0                 mov     [ebp+var_C], 30h ; '0'
.text:000031C7                 mov     edx, [ebp+arg_C]
.text:000031CA                 push    edx             ; hMenu
.text:000031CB                 push    offset $SG89072 ; lpWindowName
.text:000031D0                 push    200h            ; dwExStyle
.text:000031D5                 push    50210203h       ; dwStyle
.text:000031DA                 push    offset $SG89073 ; "COMBOBOX"
.text:000031DF                 sub     esp, 10h
.text:000031E2                 mov     eax, esp
.text:000031E4                 mov     ecx, [ebp+var_18]
.text:000031E7                 mov     [eax], ecx
.text:000031E9                 mov     edx, [ebp+var_14]
.text:000031EC                 mov     [eax+4], edx
.text:000031EF                 mov     ecx, [ebp+var_10]
.text:000031F2                 mov     [eax+8], ecx
.text:000031F5                 mov     edx, [ebp+var_C]
.text:000031F8                 mov     [eax+0Ch], edx
.text:000031FB                 mov     eax, [ebp+arg_0]
.text:000031FE                 push    eax             ; int
.text:000031FF                 call    _doctl
.text:00003204                 add     esp, 28h
.text:00003207                 mov     ecx, [ebp+arg_0]
.text:0000320A                 mov     edx, [ecx+0Ch]
.text:0000320D                 add     edx, 0Fh
.text:00003210                 mov     eax, [ebp+arg_0]
.text:00003213                 mov     [eax+0Ch], edx
.text:00003216                 push    edx
.text:00003217                 mov     ecx, ebp
.text:00003219                 push    eax
.text:0000321A                 lea     edx, $LN6_5
.text:00003220                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003225                 pop     eax
.text:00003226                 pop     edx
.text:00003227                 mov     ecx, [ebp+var_4]
.text:0000322A                 xor     ecx, ebp
.text:0000322C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003231                 add     esp, 1Ch
.text:00003234                 cmp     ebp, esp
.text:00003236                 call    __RTC_CheckEsp
.text:0000323B                 mov     esp, ebp
.text:0000323D                 pop     ebp
.text:0000323E                 retn
.text:0000323E _staticddlbig   endp
.text:0000323E
.text:0000323E ; ---------------------------------------------------------------------------
.text:0000323F                 align 10h
.text:00003240 $LN6_5          dd 1                    ; DATA XREF: _staticddlbig+10Eo
.text:00003244                 dd offset $LN5_13
.text:00003248 $LN5_13         dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00003244o
.text:00003250                 dd offset $LN4_12
.text:00003254 $LN4_12         dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:00003250o
.text:0000325C
.text:0000325C ; =============== S U B R O U T I N E =======================================
.text:0000325C
.text:0000325C ; Attributes: bp-based frame
.text:0000325C
.text:0000325C ; int __cdecl bigeditctrl(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int)
.text:0000325C                 public _bigeditctrl
.text:0000325C _bigeditctrl    proc near
.text:0000325C
.text:0000325C var_1C          = dword ptr -1Ch
.text:0000325C var_18          = dword ptr -18h
.text:0000325C var_14          = dword ptr -14h
.text:0000325C var_10          = dword ptr -10h
.text:0000325C var_C           = dword ptr -0Ch
.text:0000325C var_8           = dword ptr -8
.text:0000325C var_4           = dword ptr -4
.text:0000325C arg_0           = dword ptr  8
.text:0000325C lpWindowName    = dword ptr  0Ch
.text:0000325C hMenu           = dword ptr  10h
.text:0000325C arg_C           = dword ptr  14h
.text:0000325C arg_10          = dword ptr  18h
.text:0000325C
.text:0000325C                 push    ebp
.text:0000325D                 mov     ebp, esp
.text:0000325F                 sub     esp, 1Ch
.text:00003262                 mov     eax, 0CCCCCCCCh
.text:00003267                 mov     [ebp+var_1C], eax
.text:0000326A                 mov     [ebp+var_18], eax
.text:0000326D                 mov     [ebp+var_14], eax
.text:00003270                 mov     [ebp+var_10], eax
.text:00003273                 mov     [ebp+var_C], eax
.text:00003276                 mov     [ebp+var_8], eax
.text:00003279                 mov     [ebp+var_4], eax
.text:0000327C                 mov     eax, dword ptr ds:___security_cookie
.text:00003281                 xor     eax, ebp
.text:00003283                 mov     [ebp+var_4], eax
.text:00003286                 cmp     [ebp+lpWindowName], 0
.text:0000328A                 jz      short loc_32FB
.text:0000328C                 mov     [ebp+var_18], 3
.text:00003293                 mov     eax, [ebp+arg_0]
.text:00003296                 mov     ecx, [eax+0Ch]
.text:00003299                 mov     [ebp+var_14], ecx
.text:0000329C                 mov     edx, [ebp+arg_0]
.text:0000329F                 mov     eax, [edx+10h]
.text:000032A2                 mov     [ebp+var_10], eax
.text:000032A5                 mov     [ebp+var_C], 8
.text:000032AC                 mov     ecx, [ebp+arg_0]
.text:000032AF                 mov     edx, [ecx+0Ch]
.text:000032B2                 mov     eax, [ebp+var_C]
.text:000032B5                 lea     ecx, [eax+edx+1]
.text:000032B9                 mov     edx, [ebp+arg_0]
.text:000032BC                 mov     [edx+0Ch], ecx
.text:000032BF                 mov     eax, [ebp+hMenu]
.text:000032C2                 push    eax             ; hMenu
.text:000032C3                 mov     ecx, [ebp+lpWindowName]
.text:000032C6                 push    ecx             ; lpWindowName
.text:000032C7                 push    0               ; dwExStyle
.text:000032C9                 push    50000000h       ; dwStyle
.text:000032CE                 push    offset $SG89087 ; "STATIC"
.text:000032D3                 sub     esp, 10h
.text:000032D6                 mov     edx, esp
.text:000032D8                 mov     eax, [ebp+var_18]
.text:000032DB                 mov     [edx], eax
.text:000032DD                 mov     ecx, [ebp+var_14]
.text:000032E0                 mov     [edx+4], ecx
.text:000032E3                 mov     eax, [ebp+var_10]
.text:000032E6                 mov     [edx+8], eax
.text:000032E9                 mov     ecx, [ebp+var_C]
.text:000032EC                 mov     [edx+0Ch], ecx
.text:000032EF                 mov     edx, [ebp+arg_0]
.text:000032F2                 push    edx             ; int
.text:000032F3                 call    _doctl
.text:000032F8                 add     esp, 28h
.text:000032FB
.text:000032FB loc_32FB:                               ; CODE XREF: _bigeditctrl+2Ej
.text:000032FB                 mov     [ebp+var_18], 3
.text:00003302                 mov     eax, [ebp+arg_0]
.text:00003305                 mov     ecx, [eax+0Ch]
.text:00003308                 mov     [ebp+var_14], ecx
.text:0000330B                 mov     edx, [ebp+arg_0]
.text:0000330E                 mov     eax, [edx+10h]
.text:00003311                 mov     [ebp+var_10], eax
.text:00003314                 mov     ecx, [ebp+arg_10]
.text:00003317                 lea     edx, ds:4[ecx*8]
.text:0000331E                 mov     [ebp+var_C], edx
.text:00003321                 mov     eax, [ebp+arg_0]
.text:00003324                 mov     ecx, [eax+0Ch]
.text:00003327                 mov     edx, [ebp+var_C]
.text:0000332A                 lea     eax, [edx+ecx+3]
.text:0000332E                 mov     ecx, [ebp+arg_0]
.text:00003331                 mov     [ecx+0Ch], eax
.text:00003334                 mov     edx, [ebp+arg_C]
.text:00003337                 push    edx             ; hMenu
.text:00003338                 push    offset $SG89088 ; lpWindowName
.text:0000333D                 push    200h            ; dwExStyle
.text:00003342                 push    50210004h       ; dwStyle
.text:00003347                 push    offset $SG89089 ; "EDIT"
.text:0000334C                 sub     esp, 10h
.text:0000334F                 mov     eax, esp
.text:00003351                 mov     ecx, [ebp+var_18]
.text:00003354                 mov     [eax], ecx
.text:00003356                 mov     edx, [ebp+var_14]
.text:00003359                 mov     [eax+4], edx
.text:0000335C                 mov     ecx, [ebp+var_10]
.text:0000335F                 mov     [eax+8], ecx
.text:00003362                 mov     edx, [ebp+var_C]
.text:00003365                 mov     [eax+0Ch], edx
.text:00003368                 mov     eax, [ebp+arg_0]
.text:0000336B                 push    eax             ; int
.text:0000336C                 call    _doctl
.text:00003371                 add     esp, 28h
.text:00003374                 push    edx
.text:00003375                 mov     ecx, ebp
.text:00003377                 push    eax
.text:00003378                 lea     edx, $LN6_6
.text:0000337E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003383                 pop     eax
.text:00003384                 pop     edx
.text:00003385                 mov     ecx, [ebp+var_4]
.text:00003388                 xor     ecx, ebp
.text:0000338A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000338F                 add     esp, 1Ch
.text:00003392                 cmp     ebp, esp
.text:00003394                 call    __RTC_CheckEsp
.text:00003399                 mov     esp, ebp
.text:0000339B                 pop     ebp
.text:0000339C                 retn
.text:0000339C _bigeditctrl    endp
.text:0000339C
.text:0000339C ; ---------------------------------------------------------------------------
.text:0000339D                 align 10h
.text:000033A0 $LN6_6          dd 1                    ; DATA XREF: _bigeditctrl+11Co
.text:000033A4                 dd offset $LN5_14
.text:000033A8 $LN5_14         dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000033A4o
.text:000033B0                 dd offset $LN4_13
.text:000033B4 $LN4_13         dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:000033B0o
.text:000033BC
.text:000033BC ; =============== S U B R O U T I N E =======================================
.text:000033BC
.text:000033BC ; Attributes: bp-based frame
.text:000033BC
.text:000033BC ; int __cdecl listbox(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, int, int)
.text:000033BC                 public _listbox
.text:000033BC _listbox        proc near               ; CODE XREF: _winctrl_layout+E25p
.text:000033BC
.text:000033BC var_1C          = dword ptr -1Ch
.text:000033BC var_18          = dword ptr -18h
.text:000033BC var_14          = dword ptr -14h
.text:000033BC var_10          = dword ptr -10h
.text:000033BC var_C           = dword ptr -0Ch
.text:000033BC var_8           = dword ptr -8
.text:000033BC var_4           = dword ptr -4
.text:000033BC arg_0           = dword ptr  8
.text:000033BC lpWindowName    = dword ptr  0Ch
.text:000033BC hMenu           = dword ptr  10h
.text:000033BC arg_C           = dword ptr  14h
.text:000033BC arg_10          = dword ptr  18h
.text:000033BC arg_14          = dword ptr  1Ch
.text:000033BC
.text:000033BC                 push    ebp
.text:000033BD                 mov     ebp, esp
.text:000033BF                 sub     esp, 1Ch
.text:000033C2                 mov     eax, 0CCCCCCCCh
.text:000033C7                 mov     [ebp+var_1C], eax
.text:000033CA                 mov     [ebp+var_18], eax
.text:000033CD                 mov     [ebp+var_14], eax
.text:000033D0                 mov     [ebp+var_10], eax
.text:000033D3                 mov     [ebp+var_C], eax
.text:000033D6                 mov     [ebp+var_8], eax
.text:000033D9                 mov     [ebp+var_4], eax
.text:000033DC                 mov     eax, dword ptr ds:___security_cookie
.text:000033E1                 xor     eax, ebp
.text:000033E3                 mov     [ebp+var_4], eax
.text:000033E6                 cmp     [ebp+lpWindowName], 0
.text:000033EA                 jz      short loc_345B
.text:000033EC                 mov     [ebp+var_18], 3
.text:000033F3                 mov     eax, [ebp+arg_0]
.text:000033F6                 mov     ecx, [eax+0Ch]
.text:000033F9                 mov     [ebp+var_14], ecx
.text:000033FC                 mov     edx, [ebp+arg_0]
.text:000033FF                 mov     eax, [edx+10h]
.text:00003402                 mov     [ebp+var_10], eax
.text:00003405                 mov     [ebp+var_C], 8
.text:0000340C                 mov     ecx, [ebp+arg_0]
.text:0000340F                 mov     edx, [ecx+0Ch]
.text:00003412                 mov     eax, [ebp+var_C]
.text:00003415                 lea     ecx, [eax+edx+1]
.text:00003419                 mov     edx, [ebp+arg_0]
.text:0000341C                 mov     [edx+0Ch], ecx
.text:0000341F                 mov     eax, [ebp+hMenu]
.text:00003422                 push    eax             ; hMenu
.text:00003423                 mov     ecx, [ebp+lpWindowName]
.text:00003426                 push    ecx             ; lpWindowName
.text:00003427                 push    0               ; dwExStyle
.text:00003429                 push    50000000h       ; dwStyle
.text:0000342E                 push    offset $SG89107 ; "STATIC"
.text:00003433                 sub     esp, 10h
.text:00003436                 mov     edx, esp
.text:00003438                 mov     eax, [ebp+var_18]
.text:0000343B                 mov     [edx], eax
.text:0000343D                 mov     ecx, [ebp+var_14]
.text:00003440                 mov     [edx+4], ecx
.text:00003443                 mov     eax, [ebp+var_10]
.text:00003446                 mov     [edx+8], eax
.text:00003449                 mov     ecx, [ebp+var_C]
.text:0000344C                 mov     [edx+0Ch], ecx
.text:0000344F                 mov     edx, [ebp+arg_0]
.text:00003452                 push    edx             ; int
.text:00003453                 call    _doctl
.text:00003458                 add     esp, 28h
.text:0000345B
.text:0000345B loc_345B:                               ; CODE XREF: _listbox+2Ej
.text:0000345B                 mov     [ebp+var_18], 3
.text:00003462                 mov     eax, [ebp+arg_0]
.text:00003465                 mov     ecx, [eax+0Ch]
.text:00003468                 mov     [ebp+var_14], ecx
.text:0000346B                 mov     edx, [ebp+arg_0]
.text:0000346E                 mov     eax, [edx+10h]
.text:00003471                 mov     [ebp+var_10], eax
.text:00003474                 mov     ecx, [ebp+arg_10]
.text:00003477                 lea     edx, ds:3[ecx*8]
.text:0000347E                 mov     [ebp+var_C], edx
.text:00003481                 mov     eax, [ebp+arg_0]
.text:00003484                 mov     ecx, [eax+0Ch]
.text:00003487                 mov     edx, [ebp+var_C]
.text:0000348A                 lea     eax, [edx+ecx+3]
.text:0000348E                 mov     ecx, [ebp+arg_0]
.text:00003491                 mov     [ecx+0Ch], eax
.text:00003494                 mov     edx, [ebp+arg_C]
.text:00003497                 push    edx             ; hMenu
.text:00003498                 push    offset $SG89108 ; lpWindowName
.text:0000349D                 push    200h            ; dwExStyle
.text:000034A2                 mov     eax, [ebp+arg_14]
.text:000034A5                 neg     eax
.text:000034A7                 sbb     eax, eax
.text:000034A9                 and     eax, 8
.text:000034AC                 or      eax, 502100C1h
.text:000034B1                 push    eax             ; dwStyle
.text:000034B2                 push    offset $SG89109 ; "LISTBOX"
.text:000034B7                 sub     esp, 10h
.text:000034BA                 mov     ecx, esp
.text:000034BC                 mov     edx, [ebp+var_18]
.text:000034BF                 mov     [ecx], edx
.text:000034C1                 mov     eax, [ebp+var_14]
.text:000034C4                 mov     [ecx+4], eax
.text:000034C7                 mov     edx, [ebp+var_10]
.text:000034CA                 mov     [ecx+8], edx
.text:000034CD                 mov     eax, [ebp+var_C]
.text:000034D0                 mov     [ecx+0Ch], eax
.text:000034D3                 mov     ecx, [ebp+arg_0]
.text:000034D6                 push    ecx             ; int
.text:000034D7                 call    _doctl
.text:000034DC                 add     esp, 28h
.text:000034DF                 push    edx
.text:000034E0                 mov     ecx, ebp
.text:000034E2                 push    eax
.text:000034E3                 lea     edx, $LN6_7
.text:000034E9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000034EE                 pop     eax
.text:000034EF                 pop     edx
.text:000034F0                 mov     ecx, [ebp+var_4]
.text:000034F3                 xor     ecx, ebp
.text:000034F5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000034FA                 add     esp, 1Ch
.text:000034FD                 cmp     ebp, esp
.text:000034FF                 call    __RTC_CheckEsp
.text:00003504                 mov     esp, ebp
.text:00003506                 pop     ebp
.text:00003507                 retn
.text:00003507 _listbox        endp
.text:00003507
.text:00003507 ; ---------------------------------------------------------------------------
.text:00003508 $LN6_7          dd 1                    ; DATA XREF: _listbox+127o
.text:0000350C                 dd offset $LN5_15
.text:00003510 $LN5_15         dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:0000350Co
.text:00003518                 dd offset $LN4_14
.text:0000351C $LN4_14         dd 0CCCC0072h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00003518o
.text:0000352C
.text:0000352C ; =============== S U B R O U T I N E =======================================
.text:0000352C
.text:0000352C ; Attributes: bp-based frame
.text:0000352C
.text:0000352C ; int __cdecl ersatztab(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, HMENU)
.text:0000352C                 public _ersatztab
.text:0000352C _ersatztab      proc near
.text:0000352C
.text:0000352C var_30          = dword ptr -30h
.text:0000352C var_2C          = dword ptr -2Ch
.text:0000352C var_28          = dword ptr -28h
.text:0000352C var_24          = dword ptr -24h
.text:0000352C var_1C          = dword ptr -1Ch
.text:0000352C var_18          = dword ptr -18h
.text:0000352C var_14          = dword ptr -14h
.text:0000352C var_10          = dword ptr -10h
.text:0000352C var_8           = dword ptr -8
.text:0000352C var_4           = dword ptr -4
.text:0000352C arg_0           = dword ptr  8
.text:0000352C lpWindowName    = dword ptr  0Ch
.text:0000352C hMenu           = dword ptr  10h
.text:0000352C arg_C           = dword ptr  14h
.text:0000352C arg_10          = dword ptr  18h
.text:0000352C
.text:0000352C                 push    ebp
.text:0000352D                 mov     ebp, esp
.text:0000352F                 sub     esp, 30h
.text:00003532                 push    edi
.text:00003533                 lea     edi, [ebp+var_30]
.text:00003536                 mov     ecx, 0Ch
.text:0000353B                 mov     eax, 0CCCCCCCCh
.text:00003540                 rep stosd
.text:00003542                 mov     eax, dword ptr ds:___security_cookie
.text:00003547                 xor     eax, ebp
.text:00003549                 mov     [ebp+var_4], eax
.text:0000354C                 mov     [ebp+var_8], 0Ch
.text:00003553                 mov     eax, [ebp+arg_0]
.text:00003556                 mov     ecx, [eax+10h]
.text:00003559                 add     ecx, 6
.text:0000355C                 mov     edx, ds:?BIGGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::BIGGAP
.text:00003562                 shl     edx, 1
.text:00003564                 sub     ecx, edx
.text:00003566                 mov     [ebp+var_24], ecx
.text:00003569                 mov     eax, [ebp+arg_0]
.text:0000356C                 mov     ecx, [eax+0Ch]
.text:0000356F                 add     ecx, ds:?MEDGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::MEDGAP
.text:00003575                 mov     edx, [ebp+arg_0]
.text:00003578                 mov     [edx+0Ch], ecx
.text:0000357B                 mov     eax, [ebp+var_24]
.text:0000357E                 add     eax, ds:?BIGGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::BIGGAP
.text:00003584                 cdq
.text:00003585                 sub     eax, edx
.text:00003587                 sar     eax, 1
.text:00003589                 add     eax, ds:?BIGGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::BIGGAP
.text:0000358F                 mov     [ebp+var_30], eax
.text:00003592                 mov     eax, ds:?BIGGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::BIGGAP
.text:00003597                 shl     eax, 1
.text:00003599                 mov     ecx, [ebp+var_30]
.text:0000359C                 sub     ecx, eax
.text:0000359E                 mov     [ebp+var_28], ecx
.text:000035A1                 mov     edx, [ebp+var_24]
.text:000035A4                 add     edx, ds:?BIGGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::BIGGAP
.text:000035AA                 sub     edx, [ebp+var_30]
.text:000035AD                 mov     [ebp+var_2C], edx
.text:000035B0                 mov     eax, ds:?BIGGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::BIGGAP
.text:000035B5                 mov     [ebp+var_1C], eax
.text:000035B8                 mov     eax, [ebp+var_8]
.text:000035BB                 sub     eax, 8
.text:000035BE                 cdq
.text:000035BF                 sub     eax, edx
.text:000035C1                 sar     eax, 1
.text:000035C3                 mov     ecx, [ebp+arg_0]
.text:000035C6                 add     eax, [ecx+0Ch]
.text:000035C9                 mov     [ebp+var_18], eax
.text:000035CC                 mov     edx, [ebp+var_28]
.text:000035CF                 mov     [ebp+var_14], edx
.text:000035D2                 mov     [ebp+var_10], 8
.text:000035D9                 mov     eax, [ebp+hMenu]
.text:000035DC                 push    eax             ; hMenu
.text:000035DD                 mov     ecx, [ebp+lpWindowName]
.text:000035E0                 push    ecx             ; lpWindowName
.text:000035E1                 push    0               ; dwExStyle
.text:000035E3                 push    50000000h       ; dwStyle
.text:000035E8                 push    offset $SG89131 ; "STATIC"
.text:000035ED                 sub     esp, 10h
.text:000035F0                 mov     edx, esp
.text:000035F2                 mov     eax, [ebp+var_1C]
.text:000035F5                 mov     [edx], eax
.text:000035F7                 mov     ecx, [ebp+var_18]
.text:000035FA                 mov     [edx+4], ecx
.text:000035FD                 mov     eax, [ebp+var_14]
.text:00003600                 mov     [edx+8], eax
.text:00003603                 mov     ecx, [ebp+var_10]
.text:00003606                 mov     [edx+0Ch], ecx
.text:00003609                 mov     edx, [ebp+arg_0]
.text:0000360C                 push    edx             ; int
.text:0000360D                 call    _doctl
.text:00003612                 add     esp, 28h
.text:00003615                 mov     eax, [ebp+var_30]
.text:00003618                 mov     [ebp+var_1C], eax
.text:0000361B                 mov     eax, [ebp+var_8]
.text:0000361E                 sub     eax, 0Ch
.text:00003621                 cdq
.text:00003622                 sub     eax, edx
.text:00003624                 sar     eax, 1
.text:00003626                 mov     ecx, [ebp+arg_0]
.text:00003629                 add     eax, [ecx+0Ch]
.text:0000362C                 mov     [ebp+var_18], eax
.text:0000362F                 mov     edx, [ebp+var_2C]
.text:00003632                 mov     [ebp+var_14], edx
.text:00003635                 mov     [ebp+var_10], 78h ; 'x'
.text:0000363C                 mov     eax, [ebp+arg_C]
.text:0000363F                 push    eax             ; hMenu
.text:00003640                 push    offset $SG89132 ; lpWindowName
.text:00003645                 push    200h            ; dwExStyle
.text:0000364A                 push    50010203h       ; dwStyle
.text:0000364F                 push    offset $SG89133 ; "COMBOBOX"
.text:00003654                 sub     esp, 10h
.text:00003657                 mov     ecx, esp
.text:00003659                 mov     edx, [ebp+var_1C]
.text:0000365C                 mov     [ecx], edx
.text:0000365E                 mov     eax, [ebp+var_18]
.text:00003661                 mov     [ecx+4], eax
.text:00003664                 mov     edx, [ebp+var_14]
.text:00003667                 mov     [ecx+8], edx
.text:0000366A                 mov     eax, [ebp+var_10]
.text:0000366D                 mov     [ecx+0Ch], eax
.text:00003670                 mov     ecx, [ebp+arg_0]
.text:00003673                 push    ecx             ; int
.text:00003674                 call    _doctl
.text:00003679                 add     esp, 28h
.text:0000367C                 mov     edx, [ebp+var_8]
.text:0000367F                 add     edx, ds:?MEDGAP@?1??ersatztab@@9@9 ; `ersatztab'::`2'::MEDGAP
.text:00003685                 mov     eax, [ebp+arg_0]
.text:00003688                 mov     ecx, [eax+0Ch]
.text:0000368B                 lea     edx, [edx+ecx+3]
.text:0000368F                 mov     eax, [ebp+arg_0]
.text:00003692                 mov     [eax+0Ch], edx
.text:00003695                 mov     [ebp+var_1C], 3
.text:0000369C                 mov     ecx, [ebp+arg_0]
.text:0000369F                 mov     edx, [ecx+0Ch]
.text:000036A2                 mov     [ebp+var_18], edx
.text:000036A5                 mov     eax, [ebp+arg_0]
.text:000036A8                 mov     ecx, [eax+10h]
.text:000036AB                 mov     [ebp+var_14], ecx
.text:000036AE                 mov     [ebp+var_10], 2
.text:000036B5                 mov     edx, [ebp+arg_10]
.text:000036B8                 push    edx             ; hMenu
.text:000036B9                 push    offset $SG89134 ; lpWindowName
.text:000036BE                 push    0               ; dwExStyle
.text:000036C0                 push    50000010h       ; dwStyle
.text:000036C5                 push    offset $SG89135 ; "STATIC"
.text:000036CA                 sub     esp, 10h
.text:000036CD                 mov     eax, esp
.text:000036CF                 mov     ecx, [ebp+var_1C]
.text:000036D2                 mov     [eax], ecx
.text:000036D4                 mov     edx, [ebp+var_18]
.text:000036D7                 mov     [eax+4], edx
.text:000036DA                 mov     ecx, [ebp+var_14]
.text:000036DD                 mov     [eax+8], ecx
.text:000036E0                 mov     edx, [ebp+var_10]
.text:000036E3                 mov     [eax+0Ch], edx
.text:000036E6                 mov     eax, [ebp+arg_0]
.text:000036E9                 push    eax             ; int
.text:000036EA                 call    _doctl
.text:000036EF                 add     esp, 28h
.text:000036F2                 push    edx
.text:000036F3                 mov     ecx, ebp
.text:000036F5                 push    eax
.text:000036F6                 lea     edx, $LN5_16
.text:000036FC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003701                 pop     eax
.text:00003702                 pop     edx
.text:00003703                 pop     edi
.text:00003704                 mov     ecx, [ebp+var_4]
.text:00003707                 xor     ecx, ebp
.text:00003709                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000370E                 add     esp, 30h
.text:00003711                 cmp     ebp, esp
.text:00003713                 call    __RTC_CheckEsp
.text:00003718                 mov     esp, ebp
.text:0000371A                 pop     ebp
.text:0000371B                 retn
.text:0000371B _ersatztab      endp
.text:0000371B
.text:0000371B ; ---------------------------------------------------------------------------
.text:0000371C $LN5_16         dd 1                    ; DATA XREF: _ersatztab+1CAo
.text:00003720                 dd offset $LN4_15
.text:00003724 $LN4_15         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00003720o
.text:0000372C                 dd offset $LN3_9
.text:00003730 $LN3_9          dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000372Co
.text:0000373C
.text:0000373C ; =============== S U B R O U T I N E =======================================
.text:0000373C
.text:0000373C ; Attributes: bp-based frame
.text:0000373C
.text:0000373C ; int __cdecl editbutton(int, LPCSTR lpWindowName, HMENU hMenu, HMENU, LPCSTR, HMENU)
.text:0000373C                 public _editbutton
.text:0000373C _editbutton     proc near               ; CODE XREF: _winctrl_layout+FC8p
.text:0000373C
.text:0000373C var_2C          = dword ptr -2Ch
.text:0000373C var_28          = dword ptr -28h
.text:0000373C var_24          = dword ptr -24h
.text:0000373C var_1C          = dword ptr -1Ch
.text:0000373C var_18          = dword ptr -18h
.text:0000373C var_14          = dword ptr -14h
.text:0000373C var_10          = dword ptr -10h
.text:0000373C var_8           = dword ptr -8
.text:0000373C var_4           = dword ptr -4
.text:0000373C arg_0           = dword ptr  8
.text:0000373C lpWindowName    = dword ptr  0Ch
.text:0000373C hMenu           = dword ptr  10h
.text:0000373C arg_C           = dword ptr  14h
.text:0000373C arg_10          = dword ptr  18h
.text:0000373C arg_14          = dword ptr  1Ch
.text:0000373C
.text:0000373C                 push    ebp
.text:0000373D                 mov     ebp, esp
.text:0000373F                 sub     esp, 2Ch
.text:00003742                 push    edi
.text:00003743                 lea     edi, [ebp+var_2C]
.text:00003746                 mov     ecx, 0Bh
.text:0000374B                 mov     eax, 0CCCCCCCCh
.text:00003750                 rep stosd
.text:00003752                 mov     eax, dword ptr ds:___security_cookie
.text:00003757                 xor     eax, ebp
.text:00003759                 mov     [ebp+var_4], eax
.text:0000375C                 mov     [ebp+var_8], 0Eh
.text:00003763                 mov     [ebp+var_1C], 3
.text:0000376A                 mov     eax, [ebp+arg_0]
.text:0000376D                 mov     ecx, [eax+0Ch]
.text:00003770                 mov     [ebp+var_18], ecx
.text:00003773                 mov     edx, [ebp+arg_0]
.text:00003776                 mov     eax, [edx+10h]
.text:00003779                 mov     [ebp+var_14], eax
.text:0000377C                 mov     [ebp+var_10], 8
.text:00003783                 mov     ecx, [ebp+arg_0]
.text:00003786                 mov     edx, [ecx+0Ch]
.text:00003789                 mov     eax, [ebp+var_10]
.text:0000378C                 lea     ecx, [eax+edx+1]
.text:00003790                 mov     edx, [ebp+arg_0]
.text:00003793                 mov     [edx+0Ch], ecx
.text:00003796                 mov     eax, [ebp+hMenu]
.text:00003799                 push    eax             ; hMenu
.text:0000379A                 mov     ecx, [ebp+lpWindowName]
.text:0000379D                 push    ecx             ; lpWindowName
.text:0000379E                 push    0               ; dwExStyle
.text:000037A0                 push    50000000h       ; dwStyle
.text:000037A5                 push    offset $SG89154 ; "STATIC"
.text:000037AA                 sub     esp, 10h
.text:000037AD                 mov     edx, esp
.text:000037AF                 mov     eax, [ebp+var_1C]
.text:000037B2                 mov     [edx], eax
.text:000037B4                 mov     ecx, [ebp+var_18]
.text:000037B7                 mov     [edx+4], ecx
.text:000037BA                 mov     eax, [ebp+var_14]
.text:000037BD                 mov     [edx+8], eax
.text:000037C0                 mov     ecx, [ebp+var_10]
.text:000037C3                 mov     [edx+0Ch], ecx
.text:000037C6                 mov     edx, [ebp+arg_0]
.text:000037C9                 push    edx             ; int
.text:000037CA                 call    _doctl
.text:000037CF                 add     esp, 28h
.text:000037D2                 mov     eax, [ebp+arg_0]
.text:000037D5                 mov     eax, [eax+10h]
.text:000037D8                 add     eax, 3
.text:000037DB                 imul    eax, 3
.text:000037DE                 cdq
.text:000037DF                 and     edx, 3
.text:000037E2                 add     eax, edx
.text:000037E4                 sar     eax, 2
.text:000037E7                 add     eax, 3
.text:000037EA                 mov     [ebp+var_2C], eax
.text:000037ED                 mov     ecx, [ebp+var_2C]
.text:000037F0                 sub     ecx, 6
.text:000037F3                 mov     [ebp+var_24], ecx
.text:000037F6                 mov     edx, [ebp+arg_0]
.text:000037F9                 mov     eax, [edx+10h]
.text:000037FC                 add     eax, 3
.text:000037FF                 sub     eax, [ebp+var_2C]
.text:00003802                 mov     [ebp+var_28], eax
.text:00003805                 mov     [ebp+var_1C], 3
.text:0000380C                 mov     eax, [ebp+var_8]
.text:0000380F                 sub     eax, 0Ch
.text:00003812                 cdq
.text:00003813                 sub     eax, edx
.text:00003815                 sar     eax, 1
.text:00003817                 mov     ecx, [ebp+arg_0]
.text:0000381A                 add     eax, [ecx+0Ch]
.text:0000381D                 mov     [ebp+var_18], eax
.text:00003820                 mov     edx, [ebp+var_24]
.text:00003823                 mov     [ebp+var_14], edx
.text:00003826                 mov     [ebp+var_10], 0Ch
.text:0000382D                 mov     eax, [ebp+arg_C]
.text:00003830                 push    eax             ; hMenu
.text:00003831                 push    offset $SG89155 ; lpWindowName
.text:00003836                 push    200h            ; dwExStyle
.text:0000383B                 push    50010080h       ; dwStyle
.text:00003840                 push    offset $SG89156 ; "EDIT"
.text:00003845                 sub     esp, 10h
.text:00003848                 mov     ecx, esp
.text:0000384A                 mov     edx, [ebp+var_1C]
.text:0000384D                 mov     [ecx], edx
.text:0000384F                 mov     eax, [ebp+var_18]
.text:00003852                 mov     [ecx+4], eax
.text:00003855                 mov     edx, [ebp+var_14]
.text:00003858                 mov     [ecx+8], edx
.text:0000385B                 mov     eax, [ebp+var_10]
.text:0000385E                 mov     [ecx+0Ch], eax
.text:00003861                 mov     ecx, [ebp+arg_0]
.text:00003864                 push    ecx             ; int
.text:00003865                 call    _doctl
.text:0000386A                 add     esp, 28h
.text:0000386D                 mov     edx, [ebp+var_2C]
.text:00003870                 mov     [ebp+var_1C], edx
.text:00003873                 mov     eax, [ebp+var_8]
.text:00003876                 sub     eax, 0Eh
.text:00003879                 cdq
.text:0000387A                 sub     eax, edx
.text:0000387C                 sar     eax, 1
.text:0000387E                 mov     ecx, [ebp+arg_0]
.text:00003881                 add     eax, [ecx+0Ch]
.text:00003884                 mov     [ebp+var_18], eax
.text:00003887                 mov     edx, [ebp+var_28]
.text:0000388A                 mov     [ebp+var_14], edx
.text:0000388D                 mov     [ebp+var_10], 0Eh
.text:00003894                 mov     eax, [ebp+arg_14]
.text:00003897                 push    eax             ; hMenu
.text:00003898                 mov     ecx, [ebp+arg_10]
.text:0000389B                 push    ecx             ; lpWindowName
.text:0000389C                 push    0               ; dwExStyle
.text:0000389E                 push    50014000h       ; dwStyle
.text:000038A3                 push    offset $SG89157 ; "BUTTON"
.text:000038A8                 sub     esp, 10h
.text:000038AB                 mov     edx, esp
.text:000038AD                 mov     eax, [ebp+var_1C]
.text:000038B0                 mov     [edx], eax
.text:000038B2                 mov     ecx, [ebp+var_18]
.text:000038B5                 mov     [edx+4], ecx
.text:000038B8                 mov     eax, [ebp+var_14]
.text:000038BB                 mov     [edx+8], eax
.text:000038BE                 mov     ecx, [ebp+var_10]
.text:000038C1                 mov     [edx+0Ch], ecx
.text:000038C4                 mov     edx, [ebp+arg_0]
.text:000038C7                 push    edx             ; int
.text:000038C8                 call    _doctl
.text:000038CD                 add     esp, 28h
.text:000038D0                 mov     eax, [ebp+arg_0]
.text:000038D3                 mov     ecx, [eax+0Ch]
.text:000038D6                 mov     edx, [ebp+var_8]
.text:000038D9                 lea     eax, [edx+ecx+3]
.text:000038DD                 mov     ecx, [ebp+arg_0]
.text:000038E0                 mov     [ecx+0Ch], eax
.text:000038E3                 push    edx
.text:000038E4                 mov     ecx, ebp
.text:000038E6                 push    eax
.text:000038E7                 lea     edx, $LN5_17
.text:000038ED                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000038F2                 pop     eax
.text:000038F3                 pop     edx
.text:000038F4                 pop     edi
.text:000038F5                 mov     ecx, [ebp+var_4]
.text:000038F8                 xor     ecx, ebp
.text:000038FA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000038FF                 add     esp, 2Ch
.text:00003902                 cmp     ebp, esp
.text:00003904                 call    __RTC_CheckEsp
.text:00003909                 mov     esp, ebp
.text:0000390B                 pop     ebp
.text:0000390C                 retn
.text:0000390C _editbutton     endp
.text:0000390C
.text:0000390C ; ---------------------------------------------------------------------------
.text:0000390D                 align 10h
.text:00003910 $LN5_17         dd 1                    ; DATA XREF: _editbutton+1ABo
.text:00003914                 dd offset $LN4_16
.text:00003918 $LN4_16         dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00003914o
.text:00003920                 dd offset $LN3_10
.text:00003924 $LN3_10         dd 0CCCC0072h, 0CCCCCCCCh ; DATA XREF: .text:00003920o
.text:0000392C
.text:0000392C ; =============== S U B R O U T I N E =======================================
.text:0000392C
.text:0000392C ; Attributes: bp-based frame
.text:0000392C
.text:0000392C ; int __cdecl prefslist(int, int, int, LPCSTR lpWindowName, HMENU hMenu, HMENU, HMENU, HMENU)
.text:0000392C                 public _prefslist
.text:0000392C _prefslist      proc near               ; CODE XREF: _winctrl_layout+D37p
.text:0000392C
.text:0000392C var_48          = dword ptr -48h
.text:0000392C hLB             = dword ptr -44h
.text:0000392C var_40          = dword ptr -40h
.text:0000392C var_3C          = dword ptr -3Ch
.text:0000392C var_38          = dword ptr -38h
.text:0000392C var_34          = dword ptr -34h
.text:0000392C var_30          = dword ptr -30h
.text:0000392C var_2C          = dword ptr -2Ch
.text:0000392C var_28          = dword ptr -28h
.text:0000392C var_24          = dword ptr -24h
.text:0000392C var_20          = dword ptr -20h
.text:0000392C var_18          = dword ptr -18h
.text:0000392C var_14          = dword ptr -14h
.text:0000392C var_10          = dword ptr -10h
.text:0000392C var_C           = dword ptr -0Ch
.text:0000392C var_4           = dword ptr -4
.text:0000392C arg_0           = dword ptr  8
.text:0000392C arg_4           = dword ptr  0Ch
.text:0000392C arg_8           = dword ptr  10h
.text:0000392C lpWindowName    = dword ptr  14h
.text:0000392C hMenu           = dword ptr  18h
.text:0000392C arg_14          = dword ptr  1Ch
.text:0000392C arg_18          = dword ptr  20h
.text:0000392C arg_1C          = dword ptr  24h
.text:0000392C
.text:0000392C                 push    ebp
.text:0000392D                 mov     ebp, esp
.text:0000392F                 sub     esp, 48h
.text:00003932                 push    esi
.text:00003933                 push    edi
.text:00003934                 lea     edi, [ebp+var_48]
.text:00003937                 mov     ecx, 12h
.text:0000393C                 mov     eax, 0CCCCCCCCh
.text:00003941                 rep stosd
.text:00003943                 mov     eax, dword ptr ds:___security_cookie
.text:00003948                 xor     eax, ebp
.text:0000394A                 mov     [ebp+var_4], eax
.text:0000394D                 mov     [ebp+var_24], 0
.text:00003954                 mov     eax, [ebp+arg_8]
.text:00003957                 lea     ecx, ds:3[eax*8]
.text:0000395E                 mov     [ebp+var_2C], ecx
.text:00003961                 mov     [ebp+var_30], 1Fh
.text:00003968                 mov     edx, [ebp+arg_0]
.text:0000396B                 mov     eax, [ebp+arg_14]
.text:0000396E                 mov     [edx], eax
.text:00003970                 mov     ecx, [ebp+arg_0]
.text:00003973                 mov     edx, [ebp+arg_18]
.text:00003976                 mov     [ecx+4], edx
.text:00003979                 mov     eax, [ebp+arg_0]
.text:0000397C                 mov     ecx, [ebp+arg_1C]
.text:0000397F                 mov     [eax+8], ecx
.text:00003982                 cmp     [ebp+lpWindowName], 0
.text:00003986                 jz      short loc_39F7
.text:00003988                 mov     [ebp+var_18], 3
.text:0000398F                 mov     edx, [ebp+arg_4]
.text:00003992                 mov     eax, [edx+0Ch]
.text:00003995                 mov     [ebp+var_14], eax
.text:00003998                 mov     ecx, [ebp+arg_4]
.text:0000399B                 mov     edx, [ecx+10h]
.text:0000399E                 mov     [ebp+var_10], edx
.text:000039A1                 mov     [ebp+var_C], 8
.text:000039A8                 mov     eax, [ebp+arg_4]
.text:000039AB                 mov     ecx, [eax+0Ch]
.text:000039AE                 mov     edx, [ebp+var_C]
.text:000039B1                 lea     eax, [edx+ecx+1]
.text:000039B5                 mov     ecx, [ebp+arg_4]
.text:000039B8                 mov     [ecx+0Ch], eax
.text:000039BB                 mov     edx, [ebp+hMenu]
.text:000039BE                 push    edx             ; hMenu
.text:000039BF                 mov     eax, [ebp+lpWindowName]
.text:000039C2                 push    eax             ; lpWindowName
.text:000039C3                 push    0               ; dwExStyle
.text:000039C5                 push    50000000h       ; dwStyle
.text:000039CA                 push    offset $SG89187 ; "STATIC"
.text:000039CF                 sub     esp, 10h
.text:000039D2                 mov     ecx, esp
.text:000039D4                 mov     edx, [ebp+var_18]
.text:000039D7                 mov     [ecx], edx
.text:000039D9                 mov     eax, [ebp+var_14]
.text:000039DC                 mov     [ecx+4], eax
.text:000039DF                 mov     edx, [ebp+var_10]
.text:000039E2                 mov     [ecx+8], edx
.text:000039E5                 mov     eax, [ebp+var_C]
.text:000039E8                 mov     [ecx+0Ch], eax
.text:000039EB                 mov     ecx, [ebp+arg_4]
.text:000039EE                 push    ecx             ; int
.text:000039EF                 call    _doctl
.text:000039F4                 add     esp, 28h
.text:000039F7
.text:000039F7 loc_39F7:                               ; CODE XREF: _prefslist+5Aj
.text:000039F7                 mov     edx, [ebp+var_2C]
.text:000039FA                 cmp     edx, [ebp+var_30]
.text:000039FD                 jle     short loc_3A15
.text:000039FF                 mov     eax, [ebp+var_2C]
.text:00003A02                 mov     [ebp+var_34], eax
.text:00003A05                 mov     eax, [ebp+var_2C]
.text:00003A08                 sub     eax, [ebp+var_30]
.text:00003A0B                 cdq
.text:00003A0C                 sub     eax, edx
.text:00003A0E                 sar     eax, 1
.text:00003A10                 mov     [ebp+var_38], eax
.text:00003A13                 jmp     short loc_3A22
.text:00003A15 ; ---------------------------------------------------------------------------
.text:00003A15
.text:00003A15 loc_3A15:                               ; CODE XREF: _prefslist+D1j
.text:00003A15                 mov     ecx, [ebp+var_30]
.text:00003A18                 mov     [ebp+var_34], ecx
.text:00003A1B                 mov     [ebp+var_38], 0
.text:00003A22
.text:00003A22 loc_3A22:                               ; CODE XREF: _prefslist+E7j
.text:00003A22                 mov     [ebp+var_28], 0
.text:00003A29                 jmp     short loc_3A34
.text:00003A2B ; ---------------------------------------------------------------------------
.text:00003A2B
.text:00003A2B loc_3A2B:                               ; CODE XREF: _prefslist:loc_3BD9j
.text:00003A2B                 mov     edx, [ebp+var_28]
.text:00003A2E                 add     edx, 1
.text:00003A31                 mov     [ebp+var_28], edx
.text:00003A34
.text:00003A34 loc_3A34:                               ; CODE XREF: _prefslist+FDj
.text:00003A34                 cmp     [ebp+var_28], 3
.text:00003A38                 jge     loc_3BDE
.text:00003A3E                 mov     eax, [ebp+arg_4]
.text:00003A41                 mov     eax, [eax+10h]
.text:00003A44                 add     eax, 3
.text:00003A47                 imul    eax, [ebp+var_24]
.text:00003A4B                 cdq
.text:00003A4C                 mov     ecx, 64h ; 'd'
.text:00003A51                 idiv    ecx
.text:00003A53                 mov     [ebp+var_20], eax
.text:00003A56                 mov     edx, [ebp+var_20]
.text:00003A59                 add     edx, 3
.text:00003A5C                 mov     [ebp+var_3C], edx
.text:00003A5F                 mov     eax, [ebp+var_28]
.text:00003A62                 mov     ecx, [ebp+var_24]
.text:00003A65                 add     ecx, ds:?percents@?1??prefslist@@9@9[eax*4] ; `prefslist'::`2'::percents
.text:00003A6C                 mov     [ebp+var_24], ecx
.text:00003A6F                 mov     edx, [ebp+arg_4]
.text:00003A72                 mov     eax, [edx+10h]
.text:00003A75                 add     eax, 3
.text:00003A78                 imul    eax, [ebp+var_24]
.text:00003A7C                 cdq
.text:00003A7D                 mov     ecx, 64h ; 'd'
.text:00003A82                 idiv    ecx
.text:00003A84                 mov     [ebp+var_20], eax
.text:00003A87                 mov     edx, [ebp+var_20]
.text:00003A8A                 sub     edx, [ebp+var_3C]
.text:00003A8D                 mov     [ebp+var_40], edx
.text:00003A90                 mov     eax, [ebp+var_28]
.text:00003A93                 mov     [ebp+var_48], eax
.text:00003A96                 cmp     [ebp+var_48], 1
.text:00003A9A                 jz      short loc_3AA7
.text:00003A9C                 cmp     [ebp+var_48], 2
.text:00003AA0                 jz      short loc_3B1D
.text:00003AA2                 jmp     loc_3BD9
.text:00003AA7 ; ---------------------------------------------------------------------------
.text:00003AA7
.text:00003AA7 loc_3AA7:                               ; CODE XREF: _prefslist+16Ej
.text:00003AA7                 mov     ecx, [ebp+var_3C]
.text:00003AAA                 mov     [ebp+var_18], ecx
.text:00003AAD                 mov     edx, [ebp+var_40]
.text:00003AB0                 mov     [ebp+var_10], edx
.text:00003AB3                 mov     eax, [ebp+arg_4]
.text:00003AB6                 mov     ecx, [eax+0Ch]
.text:00003AB9                 mov     [ebp+var_14], ecx
.text:00003ABC                 mov     edx, [ebp+var_2C]
.text:00003ABF                 mov     [ebp+var_C], edx
.text:00003AC2                 mov     eax, [ebp+arg_14]
.text:00003AC5                 push    eax             ; hMenu
.text:00003AC6                 push    offset $SG89201 ; lpWindowName
.text:00003ACB                 push    200h            ; dwExStyle
.text:00003AD0                 push    502100C0h       ; dwStyle
.text:00003AD5                 push    offset $SG89202 ; "LISTBOX"
.text:00003ADA                 sub     esp, 10h
.text:00003ADD                 mov     ecx, esp
.text:00003ADF                 mov     edx, [ebp+var_18]
.text:00003AE2                 mov     [ecx], edx
.text:00003AE4                 mov     eax, [ebp+var_14]
.text:00003AE7                 mov     [ecx+4], eax
.text:00003AEA                 mov     edx, [ebp+var_10]
.text:00003AED                 mov     [ecx+8], edx
.text:00003AF0                 mov     eax, [ebp+var_C]
.text:00003AF3                 mov     [ecx+0Ch], eax
.text:00003AF6                 mov     ecx, [ebp+arg_4]
.text:00003AF9                 push    ecx             ; int
.text:00003AFA                 call    _doctl
.text:00003AFF                 add     esp, 28h
.text:00003B02                 mov     [ebp+hLB], eax
.text:00003B05                 mov     esi, esp
.text:00003B07                 mov     edx, [ebp+hLB]
.text:00003B0A                 push    edx             ; hLB
.text:00003B0B                 call    dword ptr ds:__imp__MakeDragList@4 ; MakeDragList(x)
.text:00003B11                 cmp     esi, esp
.text:00003B13                 call    __RTC_CheckEsp
.text:00003B18                 jmp     loc_3BD9
.text:00003B1D ; ---------------------------------------------------------------------------
.text:00003B1D
.text:00003B1D loc_3B1D:                               ; CODE XREF: _prefslist+174j
.text:00003B1D                 mov     eax, [ebp+var_3C]
.text:00003B20                 mov     [ebp+var_18], eax
.text:00003B23                 mov     ecx, [ebp+var_40]
.text:00003B26                 mov     [ebp+var_10], ecx
.text:00003B29                 mov     edx, [ebp+arg_4]
.text:00003B2C                 mov     eax, [edx+0Ch]
.text:00003B2F                 add     eax, [ebp+var_38]
.text:00003B32                 mov     [ebp+var_14], eax
.text:00003B35                 mov     [ebp+var_C], 0Eh
.text:00003B3C                 mov     ecx, [ebp+arg_18]
.text:00003B3F                 push    ecx             ; hMenu
.text:00003B40                 push    offset $SG89204 ; "&Up"
.text:00003B45                 push    0               ; dwExStyle
.text:00003B47                 push    50014000h       ; dwStyle
.text:00003B4C                 push    offset $SG89205 ; "BUTTON"
.text:00003B51                 sub     esp, 10h
.text:00003B54                 mov     edx, esp
.text:00003B56                 mov     eax, [ebp+var_18]
.text:00003B59                 mov     [edx], eax
.text:00003B5B                 mov     ecx, [ebp+var_14]
.text:00003B5E                 mov     [edx+4], ecx
.text:00003B61                 mov     eax, [ebp+var_10]
.text:00003B64                 mov     [edx+8], eax
.text:00003B67                 mov     ecx, [ebp+var_C]
.text:00003B6A                 mov     [edx+0Ch], ecx
.text:00003B6D                 mov     edx, [ebp+arg_4]
.text:00003B70                 push    edx             ; int
.text:00003B71                 call    _doctl
.text:00003B76                 add     esp, 28h
.text:00003B79                 mov     eax, [ebp+var_3C]
.text:00003B7C                 mov     [ebp+var_18], eax
.text:00003B7F                 mov     ecx, [ebp+var_40]
.text:00003B82                 mov     [ebp+var_10], ecx
.text:00003B85                 mov     edx, [ebp+arg_4]
.text:00003B88                 mov     eax, [edx+0Ch]
.text:00003B8B                 mov     ecx, [ebp+var_38]
.text:00003B8E                 lea     edx, [eax+ecx+11h]
.text:00003B92                 mov     [ebp+var_14], edx
.text:00003B95                 mov     [ebp+var_C], 0Eh
.text:00003B9C                 mov     eax, [ebp+arg_1C]
.text:00003B9F                 push    eax             ; hMenu
.text:00003BA0                 push    offset $SG89206 ; "&Down"
.text:00003BA5                 push    0               ; dwExStyle
.text:00003BA7                 push    50014000h       ; dwStyle
.text:00003BAC                 push    offset $SG89207 ; "BUTTON"
.text:00003BB1                 sub     esp, 10h
.text:00003BB4                 mov     ecx, esp
.text:00003BB6                 mov     edx, [ebp+var_18]
.text:00003BB9                 mov     [ecx], edx
.text:00003BBB                 mov     eax, [ebp+var_14]
.text:00003BBE                 mov     [ecx+4], eax
.text:00003BC1                 mov     edx, [ebp+var_10]
.text:00003BC4                 mov     [ecx+8], edx
.text:00003BC7                 mov     eax, [ebp+var_C]
.text:00003BCA                 mov     [ecx+0Ch], eax
.text:00003BCD                 mov     ecx, [ebp+arg_4]
.text:00003BD0                 push    ecx             ; int
.text:00003BD1                 call    _doctl
.text:00003BD6                 add     esp, 28h
.text:00003BD9
.text:00003BD9 loc_3BD9:                               ; CODE XREF: _prefslist+176j
.text:00003BD9                                         ; _prefslist+1ECj
.text:00003BD9                 jmp     loc_3A2B
.text:00003BDE ; ---------------------------------------------------------------------------
.text:00003BDE
.text:00003BDE loc_3BDE:                               ; CODE XREF: _prefslist+10Cj
.text:00003BDE                 mov     edx, [ebp+arg_4]
.text:00003BE1                 mov     eax, [edx+0Ch]
.text:00003BE4                 mov     ecx, [ebp+var_34]
.text:00003BE7                 lea     edx, [ecx+eax+3]
.text:00003BEB                 mov     eax, [ebp+arg_4]
.text:00003BEE                 mov     [eax+0Ch], edx
.text:00003BF1                 push    edx
.text:00003BF2                 mov     ecx, ebp
.text:00003BF4                 push    eax
.text:00003BF5                 lea     edx, $LN15_1
.text:00003BFB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003C00                 pop     eax
.text:00003C01                 pop     edx
.text:00003C02                 pop     edi
.text:00003C03                 pop     esi
.text:00003C04                 mov     ecx, [ebp+var_4]
.text:00003C07                 xor     ecx, ebp
.text:00003C09                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00003C0E                 add     esp, 48h
.text:00003C11                 cmp     ebp, esp
.text:00003C13                 call    __RTC_CheckEsp
.text:00003C18                 mov     esp, ebp
.text:00003C1A                 pop     ebp
.text:00003C1B                 retn
.text:00003C1B _prefslist      endp
.text:00003C1B
.text:00003C1B ; ---------------------------------------------------------------------------
.text:00003C1C $LN15_1         dd 1                    ; DATA XREF: _prefslist+2C9o
.text:00003C20                 dd offset $LN14_1
.text:00003C24 $LN14_1         dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00003C20o
.text:00003C2C                 dd offset $LN13
.text:00003C30 $LN13           dd 0CCCC0072h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00003C2Co
.text:00003C3C
.text:00003C3C ; =============== S U B R O U T I N E =======================================
.text:00003C3C
.text:00003C3C ; Attributes: bp-based frame
.text:00003C3C
.text:00003C3C ; int __cdecl pl_itemfrompt(HWND hLB, POINT pt, BOOL bAutoScroll)
.text:00003C3C                 public _pl_itemfrompt
.text:00003C3C _pl_itemfrompt  proc near               ; CODE XREF: _handle_prefslist+171p
.text:00003C3C                                         ; _handle_prefslist+20Fp
.text:00003C3C
.text:00003C3C var_38          = dword ptr -38h
.text:00003C3C var_34          = dword ptr -34h
.text:00003C3C var_30          = dword ptr -30h
.text:00003C3C var_2C          = dword ptr -2Ch
.text:00003C3C var_28          = dword ptr -28h
.text:00003C3C var_20          = POINT ptr -20h
.text:00003C3C var_10          = POINT ptr -10h
.text:00003C3C var_4           = dword ptr -4
.text:00003C3C hLB             = dword ptr  8
.text:00003C3C pt              = POINT ptr  0Ch
.text:00003C3C bAutoScroll     = dword ptr  14h
.text:00003C3C
.text:00003C3C                 push    ebp
.text:00003C3D                 mov     ebp, esp
.text:00003C3F                 sub     esp, 38h
.text:00003C42                 push    esi
.text:00003C43                 push    edi
.text:00003C44                 lea     edi, [ebp+var_38]
.text:00003C47                 mov     ecx, 0Eh
.text:00003C4C                 mov     eax, 0CCCCCCCCh
.text:00003C51                 rep stosd
.text:00003C53                 mov     esi, esp
.text:00003C55                 mov     eax, [ebp+bAutoScroll]
.text:00003C58                 push    eax             ; bAutoScroll
.text:00003C59                 mov     ecx, [ebp+pt.y]
.text:00003C5C                 push    ecx
.text:00003C5D                 mov     edx, [ebp+pt.x]
.text:00003C60                 push    edx             ; pt
.text:00003C61                 mov     eax, [ebp+hLB]
.text:00003C64                 push    eax             ; hLB
.text:00003C65                 call    dword ptr ds:__imp__LBItemFromPt@16 ; LBItemFromPt(x,x,x,x)
.text:00003C6B                 cmp     esi, esp
.text:00003C6D                 call    __RTC_CheckEsp
.text:00003C72                 mov     [ebp+var_4], eax
.text:00003C75                 cmp     [ebp+var_4], 0FFFFFFFFh
.text:00003C79                 jnz     short loc_3C83
.text:00003C7B                 mov     eax, [ebp+var_4]
.text:00003C7E                 jmp     loc_3D8A
.text:00003C83 ; ---------------------------------------------------------------------------
.text:00003C83
.text:00003C83 loc_3C83:                               ; CODE XREF: _pl_itemfrompt+3Dj
.text:00003C83                 mov     esi, esp
.text:00003C85                 push    0               ; bAutoScroll
.text:00003C87                 mov     ecx, [ebp+pt.y]
.text:00003C8A                 push    ecx
.text:00003C8B                 mov     edx, [ebp+pt.x]
.text:00003C8E                 push    edx             ; pt
.text:00003C8F                 mov     eax, [ebp+hLB]
.text:00003C92                 push    eax             ; hLB
.text:00003C93                 call    dword ptr ds:__imp__LBItemFromPt@16 ; LBItemFromPt(x,x,x,x)
.text:00003C99                 cmp     esi, esp
.text:00003C9B                 call    __RTC_CheckEsp
.text:00003CA0                 mov     [ebp+var_4], eax
.text:00003CA3                 mov     [ebp+var_2C], 0
.text:00003CAA                 mov     ecx, [ebp+var_2C]
.text:00003CAD                 mov     [ebp+var_28], ecx
.text:00003CB0                 mov     [ebp+var_38], 1
.text:00003CB7                 jmp     short loc_3CC2
.text:00003CB9 ; ---------------------------------------------------------------------------
.text:00003CB9
.text:00003CB9 loc_3CB9:                               ; CODE XREF: _pl_itemfrompt:loc_3D71j
.text:00003CB9                 mov     edx, [ebp+var_38]
.text:00003CBC                 add     edx, 1
.text:00003CBF                 mov     [ebp+var_38], edx
.text:00003CC2
.text:00003CC2 loc_3CC2:                               ; CODE XREF: _pl_itemfrompt+7Bj
.text:00003CC2                 cmp     [ebp+var_38], 1000h
.text:00003CC9                 jge     loc_3D76
.text:00003CCF                 cmp     [ebp+var_28], 0
.text:00003CD3                 jz      short loc_3CDF
.text:00003CD5                 cmp     [ebp+var_2C], 0
.text:00003CD9                 jnz     loc_3D76
.text:00003CDF
.text:00003CDF loc_3CDF:                               ; CODE XREF: _pl_itemfrompt+97j
.text:00003CDF                 mov     eax, [ebp+pt.x]
.text:00003CE2                 mov     [ebp+var_20.x], eax
.text:00003CE5                 mov     ecx, [ebp+pt.y]
.text:00003CE8                 mov     [ebp+var_20.y], ecx
.text:00003CEB                 mov     edx, [ebp+var_20.x]
.text:00003CEE                 mov     [ebp+var_10.x], edx
.text:00003CF1                 mov     eax, [ebp+var_20.y]
.text:00003CF4                 mov     [ebp+var_10.y], eax
.text:00003CF7                 mov     ecx, [ebp+var_10.y]
.text:00003CFA                 sub     ecx, [ebp+var_38]
.text:00003CFD                 mov     [ebp+var_10.y], ecx
.text:00003D00                 mov     edx, [ebp+var_20.y]
.text:00003D03                 add     edx, [ebp+var_38]
.text:00003D06                 mov     [ebp+var_20.y], edx
.text:00003D09                 mov     esi, esp
.text:00003D0B                 push    0               ; bAutoScroll
.text:00003D0D                 mov     eax, [ebp+var_10.y]
.text:00003D10                 push    eax
.text:00003D11                 mov     ecx, [ebp+var_10.x]
.text:00003D14                 push    ecx             ; pt
.text:00003D15                 mov     edx, [ebp+hLB]
.text:00003D18                 push    edx             ; hLB
.text:00003D19                 call    dword ptr ds:__imp__LBItemFromPt@16 ; LBItemFromPt(x,x,x,x)
.text:00003D1F                 cmp     esi, esp
.text:00003D21                 call    __RTC_CheckEsp
.text:00003D26                 mov     [ebp+var_30], eax
.text:00003D29                 mov     esi, esp
.text:00003D2B                 push    0               ; bAutoScroll
.text:00003D2D                 mov     eax, [ebp+var_20.y]
.text:00003D30                 push    eax
.text:00003D31                 mov     ecx, [ebp+var_20.x]
.text:00003D34                 push    ecx             ; pt
.text:00003D35                 mov     edx, [ebp+hLB]
.text:00003D38                 push    edx             ; hLB
.text:00003D39                 call    dword ptr ds:__imp__LBItemFromPt@16 ; LBItemFromPt(x,x,x,x)
.text:00003D3F                 cmp     esi, esp
.text:00003D41                 call    __RTC_CheckEsp
.text:00003D46                 mov     [ebp+var_34], eax
.text:00003D49                 cmp     [ebp+var_28], 0
.text:00003D4D                 jnz     short loc_3D5D
.text:00003D4F                 mov     eax, [ebp+var_30]
.text:00003D52                 cmp     eax, [ebp+var_4]
.text:00003D55                 jz      short loc_3D5D
.text:00003D57                 mov     ecx, [ebp+var_38]
.text:00003D5A                 mov     [ebp+var_28], ecx
.text:00003D5D
.text:00003D5D loc_3D5D:                               ; CODE XREF: _pl_itemfrompt+111j
.text:00003D5D                                         ; _pl_itemfrompt+119j
.text:00003D5D                 cmp     [ebp+var_2C], 0
.text:00003D61                 jnz     short loc_3D71
.text:00003D63                 mov     edx, [ebp+var_34]
.text:00003D66                 cmp     edx, [ebp+var_4]
.text:00003D69                 jz      short loc_3D71
.text:00003D6B                 mov     eax, [ebp+var_38]
.text:00003D6E                 mov     [ebp+var_2C], eax
.text:00003D71
.text:00003D71 loc_3D71:                               ; CODE XREF: _pl_itemfrompt+125j
.text:00003D71                                         ; _pl_itemfrompt+12Dj
.text:00003D71                 jmp     loc_3CB9
.text:00003D76 ; ---------------------------------------------------------------------------
.text:00003D76
.text:00003D76 loc_3D76:                               ; CODE XREF: _pl_itemfrompt+8Dj
.text:00003D76                                         ; _pl_itemfrompt+9Dj
.text:00003D76                 mov     ecx, [ebp+var_2C]
.text:00003D79                 cmp     ecx, [ebp+var_28]
.text:00003D7C                 jge     short loc_3D87
.text:00003D7E                 mov     edx, [ebp+var_4]
.text:00003D81                 add     edx, 1
.text:00003D84                 mov     [ebp+var_4], edx
.text:00003D87
.text:00003D87 loc_3D87:                               ; CODE XREF: _pl_itemfrompt+140j
.text:00003D87                 mov     eax, [ebp+var_4]
.text:00003D8A
.text:00003D8A loc_3D8A:                               ; CODE XREF: _pl_itemfrompt+42j
.text:00003D8A                 push    edx
.text:00003D8B                 mov     ecx, ebp
.text:00003D8D                 push    eax
.text:00003D8E                 lea     edx, $LN14_2
.text:00003D94                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003D99                 pop     eax
.text:00003D9A                 pop     edx
.text:00003D9B                 pop     edi
.text:00003D9C                 pop     esi
.text:00003D9D                 add     esp, 38h
.text:00003DA0                 cmp     ebp, esp
.text:00003DA2                 call    __RTC_CheckEsp
.text:00003DA7                 mov     esp, ebp
.text:00003DA9                 pop     ebp
.text:00003DAA                 retn
.text:00003DAA _pl_itemfrompt  endp
.text:00003DAA
.text:00003DAA ; ---------------------------------------------------------------------------
.text:00003DAB                 align 4
.text:00003DAC $LN14_2         dd 2                    ; DATA XREF: _pl_itemfrompt+152o
.text:00003DB0                 dd offset $LN13_0
.text:00003DB4 $LN13_0         dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00003DB0o
.text:00003DBC                 dd offset $LN11_0       ; "uppoint"
.text:00003DC0                 dd 0FFFFFFE0h, 8
.text:00003DC8                 dd offset $LN12         ; "downpoint"
.text:00003DCC $LN12           db 'downpoint',0        ; DATA XREF: .text:00003DC8o
.text:00003DD6 $LN11_0         db 'uppoint',0          ; DATA XREF: .text:00003DBCo
.text:00003DDE                 db 0Eh dup(0CCh)
.text:00003DEC
.text:00003DEC ; =============== S U B R O U T I N E =======================================
.text:00003DEC
.text:00003DEC ; Attributes: bp-based frame
.text:00003DEC
.text:00003DEC ; int __cdecl handle_prefslist(int, int, int, int, HWND hDlg, int, int)
.text:00003DEC                 public _handle_prefslist
.text:00003DEC _handle_prefslist proc near             ; CODE XREF: _winctrl_handle_command+86Bp
.text:00003DEC
.text:00003DEC var_1C          = dword ptr -1Ch
.text:00003DEC var_18          = dword ptr -18h
.text:00003DEC var_14          = dword ptr -14h
.text:00003DEC nItem           = dword ptr -10h
.text:00003DEC var_C           = dword ptr -0Ch
.text:00003DEC var_8           = dword ptr -8
.text:00003DEC wParam          = dword ptr -4
.text:00003DEC arg_0           = dword ptr  8
.text:00003DEC arg_4           = dword ptr  0Ch
.text:00003DEC arg_8           = dword ptr  10h
.text:00003DEC arg_C           = dword ptr  14h
.text:00003DEC hDlg            = dword ptr  18h
.text:00003DEC arg_14          = dword ptr  1Ch
.text:00003DEC arg_18          = dword ptr  20h
.text:00003DEC
.text:00003DEC                 push    ebp
.text:00003DED                 mov     ebp, esp
.text:00003DEF                 sub     esp, 1Ch
.text:00003DF2                 push    esi
.text:00003DF3                 mov     eax, 0CCCCCCCCh
.text:00003DF8                 mov     [ebp+var_1C], eax
.text:00003DFB                 mov     [ebp+var_18], eax
.text:00003DFE                 mov     [ebp+var_14], eax
.text:00003E01                 mov     [ebp+nItem], eax
.text:00003E04                 mov     [ebp+var_C], eax
.text:00003E07                 mov     [ebp+var_8], eax
.text:00003E0A                 mov     [ebp+wParam], eax
.text:00003E0D                 mov     [ebp+var_8], 0
.text:00003E14                 cmp     [ebp+arg_C], 0
.text:00003E18                 jz      loc_40BE
.text:00003E1E                 mov     eax, [ebp+arg_0]
.text:00003E21                 mov     ecx, [ebp+arg_14]
.text:00003E24                 cmp     ecx, [eax]
.text:00003E26                 jnz     loc_40B9        ; jumptable 00003E5A default case
.text:00003E2C                 mov     edx, [ebp+arg_18]
.text:00003E2F                 mov     [ebp+var_C], edx
.text:00003E32                 mov     [ebp+nItem], 0
.text:00003E39                 mov     eax, [ebp+var_C]
.text:00003E3C                 mov     ecx, [eax]
.text:00003E3E                 mov     [ebp+var_1C], ecx
.text:00003E41                 mov     edx, [ebp+var_1C]
.text:00003E44                 sub     edx, 485h
.text:00003E4A                 mov     [ebp+var_1C], edx
.text:00003E4D                 cmp     [ebp+var_1C], 3 ; switch 4 cases
.text:00003E51                 ja      loc_40B9        ; jumptable 00003E5A default case
.text:00003E57                 mov     eax, [ebp+var_1C]
.text:00003E5A                 jmp     ds:$LN32[eax*4] ; switch jump
.text:00003E61 ; ---------------------------------------------------------------------------
.text:00003E61
.text:00003E61 $LN25:                                  ; CODE XREF: _handle_prefslist+6Ej
.text:00003E61                                         ; DATA XREF: .text:$LN32o
.text:00003E61                 mov     esi, esp        ; jumptable 00003E5A case 0
.text:00003E63                 push    offset $SG89279 ; lParam
.text:00003E68                 push    0               ; wParam
.text:00003E6A                 push    180h            ; Msg
.text:00003E6F                 mov     ecx, [ebp+arg_0]
.text:00003E72                 mov     edx, [ecx]
.text:00003E74                 push    edx             ; nIDDlgItem
.text:00003E75                 mov     eax, [ebp+hDlg]
.text:00003E78                 push    eax             ; hDlg
.text:00003E79                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00003E7F                 cmp     esi, esp
.text:00003E81                 call    __RTC_CheckEsp
.text:00003E86                 mov     ecx, [ebp+arg_0]
.text:00003E89                 mov     [ecx+10h], eax
.text:00003E8C                 mov     esi, esp
.text:00003E8E                 push    1               ; bAutoScroll
.text:00003E90                 mov     edx, [ebp+var_C]
.text:00003E93                 mov     eax, [edx+0Ch]
.text:00003E96                 push    eax
.text:00003E97                 mov     ecx, [edx+8]
.text:00003E9A                 push    ecx             ; pt
.text:00003E9B                 mov     edx, [ebp+var_C]
.text:00003E9E                 mov     eax, [edx+4]
.text:00003EA1                 push    eax             ; hLB
.text:00003EA2                 call    dword ptr ds:__imp__LBItemFromPt@16 ; LBItemFromPt(x,x,x,x)
.text:00003EA8                 cmp     esi, esp
.text:00003EAA                 call    __RTC_CheckEsp
.text:00003EAF                 mov     ecx, [ebp+arg_0]
.text:00003EB2                 mov     [ecx+0Ch], eax
.text:00003EB5                 mov     edx, [ebp+arg_0]
.text:00003EB8                 mov     dword ptr [edx+14h], 0
.text:00003EBF                 mov     esi, esp
.text:00003EC1                 push    1               ; dwNewLong
.text:00003EC3                 push    0               ; nIndex
.text:00003EC5                 mov     eax, [ebp+hDlg]
.text:00003EC8                 push    eax             ; hWnd
.text:00003EC9                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00003ECF                 cmp     esi, esp
.text:00003ED1                 call    __RTC_CheckEsp
.text:00003ED6                 mov     ecx, [ebp+var_8]
.text:00003ED9                 or      ecx, 1
.text:00003EDC                 mov     [ebp+var_8], ecx
.text:00003EDF                 jmp     loc_40B9        ; jumptable 00003E5A default case
.text:00003EE4 ; ---------------------------------------------------------------------------
.text:00003EE4
.text:00003EE4 $LN24:                                  ; CODE XREF: _handle_prefslist+6Ej
.text:00003EE4                                         ; DATA XREF: .text:$LN32o
.text:00003EE4                 mov     esi, esp        ; jumptable 00003E5A case 3
.text:00003EE6                 push    0FFFFFFFFh      ; nItem
.text:00003EE8                 mov     edx, [ebp+var_C]
.text:00003EEB                 mov     eax, [edx+4]
.text:00003EEE                 push    eax             ; hLB
.text:00003EEF                 mov     ecx, [ebp+hDlg]
.text:00003EF2                 push    ecx             ; handParent
.text:00003EF3                 call    dword ptr ds:__imp__DrawInsert@12 ; DrawInsert(x,x,x)
.text:00003EF9                 cmp     esi, esp
.text:00003EFB                 call    __RTC_CheckEsp
.text:00003F00                 mov     esi, esp
.text:00003F02                 push    0               ; lParam
.text:00003F04                 mov     edx, [ebp+arg_0]
.text:00003F07                 mov     eax, [edx+10h]
.text:00003F0A                 push    eax             ; wParam
.text:00003F0B                 push    182h            ; Msg
.text:00003F10                 mov     ecx, [ebp+arg_0]
.text:00003F13                 mov     edx, [ecx]
.text:00003F15                 push    edx             ; nIDDlgItem
.text:00003F16                 mov     eax, [ebp+hDlg]
.text:00003F19                 push    eax             ; hDlg
.text:00003F1A                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00003F20                 cmp     esi, esp
.text:00003F22                 call    __RTC_CheckEsp
.text:00003F27                 mov     ecx, [ebp+arg_0]
.text:00003F2A                 mov     dword ptr [ecx+14h], 0
.text:00003F31                 mov     edx, [ebp+var_8]
.text:00003F34                 or      edx, 1
.text:00003F37                 mov     [ebp+var_8], edx
.text:00003F3A                 jmp     loc_40B9        ; jumptable 00003E5A default case
.text:00003F3F ; ---------------------------------------------------------------------------
.text:00003F3F
.text:00003F3F $LN23:                                  ; CODE XREF: _handle_prefslist+6Ej
.text:00003F3F                                         ; DATA XREF: .text:$LN32o
.text:00003F3F                 mov     eax, [ebp+arg_0] ; jumptable 00003E5A case 1
.text:00003F42                 mov     dword ptr [eax+14h], 1
.text:00003F49                 push    1               ; bAutoScroll
.text:00003F4B                 mov     ecx, [ebp+var_C]
.text:00003F4E                 mov     edx, [ecx+0Ch]
.text:00003F51                 push    edx
.text:00003F52                 mov     eax, [ecx+8]
.text:00003F55                 push    eax             ; pt
.text:00003F56                 mov     ecx, [ebp+var_C]
.text:00003F59                 mov     edx, [ecx+4]
.text:00003F5C                 push    edx             ; hLB
.text:00003F5D                 call    _pl_itemfrompt
.text:00003F62                 add     esp, 10h
.text:00003F65                 mov     [ebp+nItem], eax
.text:00003F68                 mov     eax, [ebp+arg_0]
.text:00003F6B                 mov     ecx, [ebp+nItem]
.text:00003F6E                 cmp     ecx, [eax+10h]
.text:00003F71                 jle     short loc_3F7C
.text:00003F73                 mov     edx, [ebp+arg_0]
.text:00003F76                 mov     eax, [edx+10h]
.text:00003F79                 mov     [ebp+nItem], eax
.text:00003F7C
.text:00003F7C loc_3F7C:                               ; CODE XREF: _handle_prefslist+185j
.text:00003F7C                 mov     esi, esp
.text:00003F7E                 mov     ecx, [ebp+nItem]
.text:00003F81                 push    ecx             ; nItem
.text:00003F82                 mov     edx, [ebp+var_C]
.text:00003F85                 mov     eax, [edx+4]
.text:00003F88                 push    eax             ; hLB
.text:00003F89                 mov     ecx, [ebp+hDlg]
.text:00003F8C                 push    ecx             ; handParent
.text:00003F8D                 call    dword ptr ds:__imp__DrawInsert@12 ; DrawInsert(x,x,x)
.text:00003F93                 cmp     esi, esp
.text:00003F95                 call    __RTC_CheckEsp
.text:00003F9A                 cmp     [ebp+nItem], 0
.text:00003F9E                 jl      short loc_3FB9
.text:00003FA0                 mov     esi, esp
.text:00003FA2                 push    3               ; dwNewLong
.text:00003FA4                 push    0               ; nIndex
.text:00003FA6                 mov     edx, [ebp+hDlg]
.text:00003FA9                 push    edx             ; hWnd
.text:00003FAA                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00003FB0                 cmp     esi, esp
.text:00003FB2                 call    __RTC_CheckEsp
.text:00003FB7                 jmp     short loc_3FD0
.text:00003FB9 ; ---------------------------------------------------------------------------
.text:00003FB9
.text:00003FB9 loc_3FB9:                               ; CODE XREF: _handle_prefslist+1B2j
.text:00003FB9                 mov     esi, esp
.text:00003FBB                 push    1               ; dwNewLong
.text:00003FBD                 push    0               ; nIndex
.text:00003FBF                 mov     eax, [ebp+hDlg]
.text:00003FC2                 push    eax             ; hWnd
.text:00003FC3                 call    dword ptr ds:__imp__SetWindowLongA@12 ; SetWindowLongA(x,x,x)
.text:00003FC9                 cmp     esi, esp
.text:00003FCB                 call    __RTC_CheckEsp
.text:00003FD0
.text:00003FD0 loc_3FD0:                               ; CODE XREF: _handle_prefslist+1CBj
.text:00003FD0                 mov     ecx, [ebp+var_8]
.text:00003FD3                 or      ecx, 1
.text:00003FD6                 mov     [ebp+var_8], ecx
.text:00003FD9                 jmp     loc_40B9        ; jumptable 00003E5A default case
.text:00003FDE ; ---------------------------------------------------------------------------
.text:00003FDE
.text:00003FDE $LN19:                                  ; CODE XREF: _handle_prefslist+6Ej
.text:00003FDE                                         ; DATA XREF: .text:$LN32o
.text:00003FDE                 mov     edx, [ebp+arg_0] ; jumptable 00003E5A case 2
.text:00003FE1                 cmp     dword ptr [edx+14h], 0
.text:00003FE5                 jz      short loc_4036
.text:00003FE7                 push    1               ; bAutoScroll
.text:00003FE9                 mov     eax, [ebp+var_C]
.text:00003FEC                 mov     ecx, [eax+0Ch]
.text:00003FEF                 push    ecx
.text:00003FF0                 mov     edx, [eax+8]
.text:00003FF3                 push    edx             ; pt
.text:00003FF4                 mov     eax, [ebp+var_C]
.text:00003FF7                 mov     ecx, [eax+4]
.text:00003FFA                 push    ecx             ; hLB
.text:00003FFB                 call    _pl_itemfrompt
.text:00004000                 add     esp, 10h
.text:00004003                 mov     [ebp+nItem], eax
.text:00004006                 mov     edx, [ebp+arg_0]
.text:00004009                 mov     eax, [ebp+nItem]
.text:0000400C                 cmp     eax, [edx+10h]
.text:0000400F                 jle     short loc_401A
.text:00004011                 mov     ecx, [ebp+arg_0]
.text:00004014                 mov     edx, [ecx+10h]
.text:00004017                 mov     [ebp+nItem], edx
.text:0000401A
.text:0000401A loc_401A:                               ; CODE XREF: _handle_prefslist+223j
.text:0000401A                 mov     esi, esp
.text:0000401C                 push    0FFFFFFFFh      ; nItem
.text:0000401E                 mov     eax, [ebp+var_C]
.text:00004021                 mov     ecx, [eax+4]
.text:00004024                 push    ecx             ; hLB
.text:00004025                 mov     edx, [ebp+hDlg]
.text:00004028                 push    edx             ; handParent
.text:00004029                 call    dword ptr ds:__imp__DrawInsert@12 ; DrawInsert(x,x,x)
.text:0000402F                 cmp     esi, esp
.text:00004031                 call    __RTC_CheckEsp
.text:00004036
.text:00004036 loc_4036:                               ; CODE XREF: _handle_prefslist+1F9j
.text:00004036                 mov     esi, esp
.text:00004038                 push    0               ; lParam
.text:0000403A                 mov     eax, [ebp+arg_0]
.text:0000403D                 mov     ecx, [eax+10h]
.text:00004040                 push    ecx             ; wParam
.text:00004041                 push    182h            ; Msg
.text:00004046                 mov     edx, [ebp+arg_0]
.text:00004049                 mov     eax, [edx]
.text:0000404B                 push    eax             ; nIDDlgItem
.text:0000404C                 mov     ecx, [ebp+hDlg]
.text:0000404F                 push    ecx             ; hDlg
.text:00004050                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00004056                 cmp     esi, esp
.text:00004058                 call    __RTC_CheckEsp
.text:0000405D                 mov     edx, [ebp+arg_0]
.text:00004060                 cmp     dword ptr [edx+14h], 0
.text:00004064                 jz      short loc_40B0
.text:00004066                 mov     eax, [ebp+arg_0]
.text:00004069                 mov     dword ptr [eax+14h], 0
.text:00004070                 cmp     [ebp+nItem], 0
.text:00004074                 jl      short loc_40A7
.text:00004076                 mov     ecx, [ebp+arg_0]
.text:00004079                 mov     edx, [ebp+nItem]
.text:0000407C                 cmp     edx, [ecx+0Ch]
.text:0000407F                 jle     short loc_408A
.text:00004081                 mov     eax, [ebp+nItem]
.text:00004084                 sub     eax, 1
.text:00004087                 mov     [ebp+nItem], eax
.text:0000408A
.text:0000408A loc_408A:                               ; CODE XREF: _handle_prefslist+293j
.text:0000408A                 mov     ecx, [ebp+nItem]
.text:0000408D                 push    ecx             ; WPARAM
.text:0000408E                 mov     edx, [ebp+arg_0]
.text:00004091                 mov     eax, [edx+0Ch]
.text:00004094                 push    eax             ; wParam
.text:00004095                 mov     ecx, [ebp+arg_0]
.text:00004098                 mov     edx, [ecx]
.text:0000409A                 push    edx             ; nIDDlgItem
.text:0000409B                 mov     eax, [ebp+hDlg]
.text:0000409E                 push    eax             ; hDlg
.text:0000409F                 call    _pl_moveitem
.text:000040A4                 add     esp, 10h
.text:000040A7
.text:000040A7 loc_40A7:                               ; CODE XREF: _handle_prefslist+288j
.text:000040A7                 mov     ecx, [ebp+var_8]
.text:000040AA                 or      ecx, 2
.text:000040AD                 mov     [ebp+var_8], ecx
.text:000040B0
.text:000040B0 loc_40B0:                               ; CODE XREF: _handle_prefslist+278j
.text:000040B0                 mov     edx, [ebp+var_8]
.text:000040B3                 or      edx, 1
.text:000040B6                 mov     [ebp+var_8], edx
.text:000040B9
.text:000040B9 loc_40B9:                               ; CODE XREF: _handle_prefslist+3Aj
.text:000040B9                                         ; _handle_prefslist+65j ...
.text:000040B9                 jmp     loc_41F5        ; jumptable 00003E5A default case
.text:000040BE ; ---------------------------------------------------------------------------
.text:000040BE
.text:000040BE loc_40BE:                               ; CODE XREF: _handle_prefslist+2Cj
.text:000040BE                 mov     eax, [ebp+arg_14]
.text:000040C1                 and     eax, 0FFFFh
.text:000040C6                 movzx   ecx, ax
.text:000040C9                 mov     edx, [ebp+arg_0]
.text:000040CC                 cmp     ecx, [edx+4]
.text:000040CF                 jz      short loc_40E8
.text:000040D1                 mov     eax, [ebp+arg_14]
.text:000040D4                 and     eax, 0FFFFh
.text:000040D9                 movzx   ecx, ax
.text:000040DC                 mov     edx, [ebp+arg_0]
.text:000040DF                 cmp     ecx, [edx+8]
.text:000040E2                 jnz     loc_41F5
.text:000040E8
.text:000040E8 loc_40E8:                               ; CODE XREF: _handle_prefslist+2E3j
.text:000040E8                 mov     eax, [ebp+arg_14]
.text:000040EB                 shr     eax, 10h
.text:000040EE                 and     eax, 0FFFFh
.text:000040F3                 movzx   ecx, ax
.text:000040F6                 test    ecx, ecx
.text:000040F8                 jz      short loc_4112
.text:000040FA                 mov     edx, [ebp+arg_14]
.text:000040FD                 shr     edx, 10h
.text:00004100                 and     edx, 0FFFFh
.text:00004106                 movzx   eax, dx
.text:00004109                 cmp     eax, 5
.text:0000410C                 jnz     loc_41F5
.text:00004112
.text:00004112 loc_4112:                               ; CODE XREF: _handle_prefslist+30Cj
.text:00004112                 mov     esi, esp
.text:00004114                 push    0               ; lParam
.text:00004116                 push    0               ; wParam
.text:00004118                 push    188h            ; Msg
.text:0000411D                 mov     ecx, [ebp+arg_0]
.text:00004120                 mov     edx, [ecx]
.text:00004122                 push    edx             ; nIDDlgItem
.text:00004123                 mov     eax, [ebp+hDlg]
.text:00004126                 push    eax             ; hDlg
.text:00004127                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:0000412D                 cmp     esi, esp
.text:0000412F                 call    __RTC_CheckEsp
.text:00004134                 mov     [ebp+var_14], eax
.text:00004137                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:0000413B                 jnz     short loc_4153
.text:0000413D                 mov     esi, esp
.text:0000413F                 push    0               ; uType
.text:00004141                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:00004147                 cmp     esi, esp
.text:00004149                 call    __RTC_CheckEsp
.text:0000414E                 jmp     loc_41F5
.text:00004153 ; ---------------------------------------------------------------------------
.text:00004153
.text:00004153 loc_4153:                               ; CODE XREF: _handle_prefslist+34Fj
.text:00004153                 mov     esi, esp
.text:00004155                 push    0               ; lParam
.text:00004157                 push    0               ; wParam
.text:00004159                 push    18Bh            ; Msg
.text:0000415E                 mov     ecx, [ebp+arg_0]
.text:00004161                 mov     edx, [ecx]
.text:00004163                 push    edx             ; nIDDlgItem
.text:00004164                 mov     eax, [ebp+hDlg]
.text:00004167                 push    eax             ; hDlg
.text:00004168                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:0000416E                 cmp     esi, esp
.text:00004170                 call    __RTC_CheckEsp
.text:00004175                 mov     [ebp+var_18], eax
.text:00004178                 mov     ecx, [ebp+arg_14]
.text:0000417B                 and     ecx, 0FFFFh
.text:00004181                 movzx   edx, cx
.text:00004184                 mov     eax, [ebp+arg_0]
.text:00004187                 cmp     edx, [eax+4]
.text:0000418A                 jnz     short loc_41B1
.text:0000418C                 cmp     [ebp+var_14], 0
.text:00004190                 jle     short loc_41B1
.text:00004192                 mov     ecx, [ebp+var_14]
.text:00004195                 sub     ecx, 1
.text:00004198                 push    ecx             ; WPARAM
.text:00004199                 mov     edx, [ebp+var_14]
.text:0000419C                 push    edx             ; wParam
.text:0000419D                 mov     eax, [ebp+arg_0]
.text:000041A0                 mov     ecx, [eax]
.text:000041A2                 push    ecx             ; nIDDlgItem
.text:000041A3                 mov     edx, [ebp+hDlg]
.text:000041A6                 push    edx             ; hDlg
.text:000041A7                 call    _pl_moveitem
.text:000041AC                 add     esp, 10h
.text:000041AF                 jmp     short loc_41EC
.text:000041B1 ; ---------------------------------------------------------------------------
.text:000041B1
.text:000041B1 loc_41B1:                               ; CODE XREF: _handle_prefslist+39Ej
.text:000041B1                                         ; _handle_prefslist+3A4j
.text:000041B1                 mov     eax, [ebp+arg_14]
.text:000041B4                 and     eax, 0FFFFh
.text:000041B9                 movzx   ecx, ax
.text:000041BC                 mov     edx, [ebp+arg_0]
.text:000041BF                 cmp     ecx, [edx+8]
.text:000041C2                 jnz     short loc_41EC
.text:000041C4                 mov     eax, [ebp+var_18]
.text:000041C7                 sub     eax, 1
.text:000041CA                 cmp     [ebp+var_14], eax
.text:000041CD                 jge     short loc_41EC
.text:000041CF                 mov     ecx, [ebp+var_14]
.text:000041D2                 add     ecx, 1
.text:000041D5                 push    ecx             ; WPARAM
.text:000041D6                 mov     edx, [ebp+var_14]
.text:000041D9                 push    edx             ; wParam
.text:000041DA                 mov     eax, [ebp+arg_0]
.text:000041DD                 mov     ecx, [eax]
.text:000041DF                 push    ecx             ; nIDDlgItem
.text:000041E0                 mov     edx, [ebp+hDlg]
.text:000041E3                 push    edx             ; hDlg
.text:000041E4                 call    _pl_moveitem
.text:000041E9                 add     esp, 10h
.text:000041EC
.text:000041EC loc_41EC:                               ; CODE XREF: _handle_prefslist+3C3j
.text:000041EC                                         ; _handle_prefslist+3D6j ...
.text:000041EC                 mov     eax, [ebp+var_8]
.text:000041EF                 or      eax, 2
.text:000041F2                 mov     [ebp+var_8], eax
.text:000041F5
.text:000041F5 loc_41F5:                               ; CODE XREF: _handle_prefslist:loc_40B9j
.text:000041F5                                         ; _handle_prefslist+2F6j ...
.text:000041F5                 cmp     [ebp+arg_4], 0
.text:000041F9                 jz      short loc_4244
.text:000041FB                 mov     [ebp+wParam], 0
.text:00004202                 jmp     short loc_420D
.text:00004204 ; ---------------------------------------------------------------------------
.text:00004204
.text:00004204 loc_4204:                               ; CODE XREF: _handle_prefslist+456j
.text:00004204                 mov     ecx, [ebp+wParam]
.text:00004207                 add     ecx, 1
.text:0000420A                 mov     [ebp+wParam], ecx
.text:0000420D
.text:0000420D loc_420D:                               ; CODE XREF: _handle_prefslist+416j
.text:0000420D                 mov     edx, [ebp+wParam]
.text:00004210                 cmp     edx, [ebp+arg_8]
.text:00004213                 jge     short loc_4244
.text:00004215                 mov     esi, esp
.text:00004217                 push    0               ; lParam
.text:00004219                 mov     eax, [ebp+wParam]
.text:0000421C                 push    eax             ; wParam
.text:0000421D                 push    199h            ; Msg
.text:00004222                 mov     ecx, [ebp+arg_0]
.text:00004225                 mov     edx, [ecx]
.text:00004227                 push    edx             ; nIDDlgItem
.text:00004228                 mov     eax, [ebp+hDlg]
.text:0000422B                 push    eax             ; hDlg
.text:0000422C                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00004232                 cmp     esi, esp
.text:00004234                 call    __RTC_CheckEsp
.text:00004239                 mov     ecx, [ebp+wParam]
.text:0000423C                 mov     edx, [ebp+arg_4]
.text:0000423F                 mov     [edx+ecx*4], eax
.text:00004242                 jmp     short loc_4204
.text:00004244 ; ---------------------------------------------------------------------------
.text:00004244
.text:00004244 loc_4244:                               ; CODE XREF: _handle_prefslist+40Dj
.text:00004244                                         ; _handle_prefslist+427j
.text:00004244                 mov     eax, [ebp+var_8]
.text:00004247                 pop     esi
.text:00004248                 add     esp, 1Ch
.text:0000424B                 cmp     ebp, esp
.text:0000424D                 call    __RTC_CheckEsp
.text:00004252                 mov     esp, ebp
.text:00004254                 pop     ebp
.text:00004255                 retn
.text:00004255 _handle_prefslist endp
.text:00004255
.text:00004255 ; ---------------------------------------------------------------------------
.text:00004256                 align 4
.text:00004258 $LN32           dd offset $LN25         ; DATA XREF: _handle_prefslist+6Er
.text:00004258                 dd offset $LN23         ; jump table for switch statement
.text:00004258                 dd offset $LN19
.text:00004258                 dd offset $LN24
.text:00004268                 db 4 dup(0CCh)
.text:0000426C
.text:0000426C ; =============== S U B R O U T I N E =======================================
.text:0000426C
.text:0000426C ; Attributes: bp-based frame
.text:0000426C
.text:0000426C ; int __cdecl pl_moveitem(HWND hDlg, int nIDDlgItem, WPARAM wParam, WPARAM)
.text:0000426C _pl_moveitem    proc near               ; CODE XREF: _handle_prefslist+2B3p
.text:0000426C                                         ; _handle_prefslist+3BBp ...
.text:0000426C
.text:0000426C lParam          = dword ptr -0Ch
.text:0000426C var_8           = dword ptr -8
.text:0000426C var_4           = dword ptr -4
.text:0000426C hDlg            = dword ptr  8
.text:0000426C nIDDlgItem      = dword ptr  0Ch
.text:0000426C wParam          = dword ptr  10h
.text:0000426C arg_C           = dword ptr  14h
.text:0000426C
.text:0000426C                 push    ebp
.text:0000426D                 mov     ebp, esp
.text:0000426F                 sub     esp, 0Ch
.text:00004272                 push    esi
.text:00004273                 mov     [ebp+lParam], 0CCCCCCCCh
.text:0000427A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004281                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004288                 mov     esi, esp
.text:0000428A                 push    0               ; lParam
.text:0000428C                 mov     eax, [ebp+wParam]
.text:0000428F                 push    eax             ; wParam
.text:00004290                 push    18Ah            ; Msg
.text:00004295                 mov     ecx, [ebp+nIDDlgItem]
.text:00004298                 push    ecx             ; nIDDlgItem
.text:00004299                 mov     edx, [ebp+hDlg]
.text:0000429C                 push    edx             ; hDlg
.text:0000429D                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000042A3                 cmp     esi, esp
.text:000042A5                 call    __RTC_CheckEsp
.text:000042AA                 mov     [ebp+var_4], eax
.text:000042AD                 push    1
.text:000042AF                 mov     eax, [ebp+var_4]
.text:000042B2                 add     eax, 1
.text:000042B5                 push    eax
.text:000042B6                 call    _safemalloc
.text:000042BB                 add     esp, 8
.text:000042BE                 mov     [ebp+lParam], eax
.text:000042C1                 mov     esi, esp
.text:000042C3                 mov     ecx, [ebp+lParam]
.text:000042C6                 push    ecx             ; lParam
.text:000042C7                 mov     edx, [ebp+wParam]
.text:000042CA                 push    edx             ; wParam
.text:000042CB                 push    189h            ; Msg
.text:000042D0                 mov     eax, [ebp+nIDDlgItem]
.text:000042D3                 push    eax             ; nIDDlgItem
.text:000042D4                 mov     ecx, [ebp+hDlg]
.text:000042D7                 push    ecx             ; hDlg
.text:000042D8                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000042DE                 cmp     esi, esp
.text:000042E0                 call    __RTC_CheckEsp
.text:000042E5                 mov     esi, esp
.text:000042E7                 push    0               ; lParam
.text:000042E9                 mov     edx, [ebp+wParam]
.text:000042EC                 push    edx             ; wParam
.text:000042ED                 push    199h            ; Msg
.text:000042F2                 mov     eax, [ebp+nIDDlgItem]
.text:000042F5                 push    eax             ; nIDDlgItem
.text:000042F6                 mov     ecx, [ebp+hDlg]
.text:000042F9                 push    ecx             ; hDlg
.text:000042FA                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00004300                 cmp     esi, esp
.text:00004302                 call    __RTC_CheckEsp
.text:00004307                 mov     [ebp+var_8], eax
.text:0000430A                 mov     esi, esp
.text:0000430C                 mov     edx, [ebp+wParam]
.text:0000430F                 push    edx             ; lParam
.text:00004310                 push    0               ; wParam
.text:00004312                 push    185h            ; Msg
.text:00004317                 mov     eax, [ebp+nIDDlgItem]
.text:0000431A                 push    eax             ; nIDDlgItem
.text:0000431B                 mov     ecx, [ebp+hDlg]
.text:0000431E                 push    ecx             ; hDlg
.text:0000431F                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00004325                 cmp     esi, esp
.text:00004327                 call    __RTC_CheckEsp
.text:0000432C                 mov     esi, esp
.text:0000432E                 push    0               ; lParam
.text:00004330                 mov     edx, [ebp+wParam]
.text:00004333                 push    edx             ; wParam
.text:00004334                 push    182h            ; Msg
.text:00004339                 mov     eax, [ebp+nIDDlgItem]
.text:0000433C                 push    eax             ; nIDDlgItem
.text:0000433D                 mov     ecx, [ebp+hDlg]
.text:00004340                 push    ecx             ; hDlg
.text:00004341                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00004347                 cmp     esi, esp
.text:00004349                 call    __RTC_CheckEsp
.text:0000434E                 mov     esi, esp
.text:00004350                 mov     edx, [ebp+lParam]
.text:00004353                 push    edx             ; lParam
.text:00004354                 mov     eax, [ebp+arg_C]
.text:00004357                 push    eax             ; wParam
.text:00004358                 push    181h            ; Msg
.text:0000435D                 mov     ecx, [ebp+nIDDlgItem]
.text:00004360                 push    ecx             ; nIDDlgItem
.text:00004361                 mov     edx, [ebp+hDlg]
.text:00004364                 push    edx             ; hDlg
.text:00004365                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:0000436B                 cmp     esi, esp
.text:0000436D                 call    __RTC_CheckEsp
.text:00004372                 mov     esi, esp
.text:00004374                 mov     eax, [ebp+var_8]
.text:00004377                 push    eax             ; lParam
.text:00004378                 mov     ecx, [ebp+arg_C]
.text:0000437B                 push    ecx             ; wParam
.text:0000437C                 push    19Ah            ; Msg
.text:00004381                 mov     edx, [ebp+nIDDlgItem]
.text:00004384                 push    edx             ; nIDDlgItem
.text:00004385                 mov     eax, [ebp+hDlg]
.text:00004388                 push    eax             ; hDlg
.text:00004389                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:0000438F                 cmp     esi, esp
.text:00004391                 call    __RTC_CheckEsp
.text:00004396                 mov     esi, esp
.text:00004398                 push    0               ; lParam
.text:0000439A                 mov     ecx, [ebp+arg_C]
.text:0000439D                 push    ecx             ; wParam
.text:0000439E                 push    186h            ; Msg
.text:000043A3                 mov     edx, [ebp+nIDDlgItem]
.text:000043A6                 push    edx             ; nIDDlgItem
.text:000043A7                 mov     eax, [ebp+hDlg]
.text:000043AA                 push    eax             ; hDlg
.text:000043AB                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000043B1                 cmp     esi, esp
.text:000043B3                 call    __RTC_CheckEsp
.text:000043B8                 mov     ecx, [ebp+lParam]
.text:000043BB                 push    ecx
.text:000043BC                 call    _safefree
.text:000043C1                 add     esp, 4
.text:000043C4                 pop     esi
.text:000043C5                 add     esp, 0Ch
.text:000043C8                 cmp     ebp, esp
.text:000043CA                 call    __RTC_CheckEsp
.text:000043CF                 mov     esp, ebp
.text:000043D1                 pop     ebp
.text:000043D2                 retn
.text:000043D2 _pl_moveitem    endp
.text:000043D2
.text:000043D2 ; ---------------------------------------------------------------------------
.text:000043D3                 db 9 dup(0CCh)
.text:000043DC
.text:000043DC ; =============== S U B R O U T I N E =======================================
.text:000043DC
.text:000043DC ; Attributes: bp-based frame
.text:000043DC
.text:000043DC ; int __cdecl progressbar(int, HMENU hMenu)
.text:000043DC                 public _progressbar
.text:000043DC _progressbar    proc near
.text:000043DC
.text:000043DC var_1C          = dword ptr -1Ch
.text:000043DC var_18          = dword ptr -18h
.text:000043DC var_14          = dword ptr -14h
.text:000043DC var_10          = dword ptr -10h
.text:000043DC var_C           = dword ptr -0Ch
.text:000043DC var_8           = dword ptr -8
.text:000043DC var_4           = dword ptr -4
.text:000043DC arg_0           = dword ptr  8
.text:000043DC hMenu           = dword ptr  0Ch
.text:000043DC
.text:000043DC                 push    ebp
.text:000043DD                 mov     ebp, esp
.text:000043DF                 sub     esp, 1Ch
.text:000043E2                 mov     eax, 0CCCCCCCCh
.text:000043E7                 mov     [ebp+var_1C], eax
.text:000043EA                 mov     [ebp+var_18], eax
.text:000043ED                 mov     [ebp+var_14], eax
.text:000043F0                 mov     [ebp+var_10], eax
.text:000043F3                 mov     [ebp+var_C], eax
.text:000043F6                 mov     [ebp+var_8], eax
.text:000043F9                 mov     [ebp+var_4], eax
.text:000043FC                 mov     eax, dword ptr ds:___security_cookie
.text:00004401                 xor     eax, ebp
.text:00004403                 mov     [ebp+var_4], eax
.text:00004406                 mov     [ebp+var_18], 3
.text:0000440D                 mov     eax, [ebp+arg_0]
.text:00004410                 mov     ecx, [eax+0Ch]
.text:00004413                 mov     [ebp+var_14], ecx
.text:00004416                 mov     edx, [ebp+arg_0]
.text:00004419                 mov     eax, [edx+10h]
.text:0000441C                 mov     [ebp+var_10], eax
.text:0000441F                 mov     [ebp+var_C], 0Eh
.text:00004426                 mov     ecx, [ebp+arg_0]
.text:00004429                 mov     edx, [ecx+0Ch]
.text:0000442C                 mov     eax, [ebp+var_C]
.text:0000442F                 lea     ecx, [eax+edx+3]
.text:00004433                 mov     edx, [ebp+arg_0]
.text:00004436                 mov     [edx+0Ch], ecx
.text:00004439                 mov     eax, [ebp+hMenu]
.text:0000443C                 push    eax             ; hMenu
.text:0000443D                 push    offset $SG89324 ; lpWindowName
.text:00004442                 push    200h            ; dwExStyle
.text:00004447                 push    50000001h       ; dwStyle
.text:0000444C                 push    offset $SG89325 ; "msctls_progress32"
.text:00004451                 sub     esp, 10h
.text:00004454                 mov     ecx, esp
.text:00004456                 mov     edx, [ebp+var_18]
.text:00004459                 mov     [ecx], edx
.text:0000445B                 mov     eax, [ebp+var_14]
.text:0000445E                 mov     [ecx+4], eax
.text:00004461                 mov     edx, [ebp+var_10]
.text:00004464                 mov     [ecx+8], edx
.text:00004467                 mov     eax, [ebp+var_C]
.text:0000446A                 mov     [ecx+0Ch], eax
.text:0000446D                 mov     ecx, [ebp+arg_0]
.text:00004470                 push    ecx             ; int
.text:00004471                 call    _doctl
.text:00004476                 add     esp, 28h
.text:00004479                 push    edx
.text:0000447A                 mov     ecx, ebp
.text:0000447C                 push    eax
.text:0000447D                 lea     edx, $LN5_18
.text:00004483                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004488                 pop     eax
.text:00004489                 pop     edx
.text:0000448A                 mov     ecx, [ebp+var_4]
.text:0000448D                 xor     ecx, ebp
.text:0000448F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004494                 add     esp, 1Ch
.text:00004497                 cmp     ebp, esp
.text:00004499                 call    __RTC_CheckEsp
.text:0000449E                 mov     esp, ebp
.text:000044A0                 pop     ebp
.text:000044A1                 retn
.text:000044A1 _progressbar    endp
.text:000044A1
.text:000044A1 ; ---------------------------------------------------------------------------
.text:000044A2                 align 4
.text:000044A4 $LN5_18         dd 1                    ; DATA XREF: _progressbar+A1o
.text:000044A8                 dd offset $LN4_17
.text:000044AC $LN4_17         dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000044A8o
.text:000044B4                 dd offset $LN3_11
.text:000044B8 $LN3_11         dd 0CCCC0072h           ; DATA XREF: .text:000044B4o
.text:000044BC
.text:000044BC ; =============== S U B R O U T I N E =======================================
.text:000044BC
.text:000044BC ; Attributes: bp-based frame
.text:000044BC
.text:000044BC                 public _winctrl_add_shortcuts
.text:000044BC _winctrl_add_shortcuts proc near        ; CODE XREF: _winctrl_layout+1186p
.text:000044BC
.text:000044BC var_8           = dword ptr -8
.text:000044BC var_4           = dword ptr -4
.text:000044BC arg_0           = dword ptr  8
.text:000044BC arg_4           = dword ptr  0Ch
.text:000044BC
.text:000044BC                 push    ebp
.text:000044BD                 mov     ebp, esp
.text:000044BF                 sub     esp, 8
.text:000044C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000044C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044D0                 mov     [ebp+var_4], 0
.text:000044D7                 jmp     short loc_44E2
.text:000044D9 ; ---------------------------------------------------------------------------
.text:000044D9
.text:000044D9 loc_44D9:                               ; CODE XREF: _winctrl_add_shortcuts:loc_453Fj
.text:000044D9                 mov     eax, [ebp+var_4]
.text:000044DC                 add     eax, 1
.text:000044DF                 mov     [ebp+var_4], eax
.text:000044E2
.text:000044E2 loc_44E2:                               ; CODE XREF: _winctrl_add_shortcuts+1Bj
.text:000044E2                 cmp     [ebp+var_4], 10h
.text:000044E6                 jnb     short loc_4541
.text:000044E8                 mov     ecx, [ebp+arg_4]
.text:000044EB                 add     ecx, [ebp+var_4]
.text:000044EE                 movsx   edx, byte ptr [ecx+0Ch]
.text:000044F2                 test    edx, edx
.text:000044F4                 jz      short loc_453F
.text:000044F6                 mov     eax, [ebp+arg_4]
.text:000044F9                 add     eax, [ebp+var_4]
.text:000044FC                 movzx   ecx, byte ptr [eax+0Ch]
.text:00004500                 push    ecx             ; C
.text:00004501                 call    _tolower
.text:00004506                 add     esp, 4
.text:00004509                 mov     byte ptr [ebp+var_8+3], al
.text:0000450C                 movzx   edx, byte ptr [ebp+var_8+3]
.text:00004510                 mov     eax, [ebp+arg_0]
.text:00004513                 movsx   ecx, byte ptr [eax+edx+3Ch]
.text:00004518                 test    ecx, ecx
.text:0000451A                 jz      short loc_4533
.text:0000451C                 push    4B0h            ; Line
.text:00004521                 push    offset $SG89361 ; "..\\..\\winctrls.c"
.text:00004526                 push    offset $SG89362 ; "!dp->shortcuts[s]"
.text:0000452B                 call    __wassert
.text:00004530 ; ---------------------------------------------------------------------------
.text:00004530                 add     esp, 0Ch
.text:00004533
.text:00004533 loc_4533:                               ; CODE XREF: _winctrl_add_shortcuts+5Ej
.text:00004533                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00004537                 mov     ecx, [ebp+arg_0]
.text:0000453A                 mov     byte ptr [ecx+eax+3Ch], 1
.text:0000453F
.text:0000453F loc_453F:                               ; CODE XREF: _winctrl_add_shortcuts+38j
.text:0000453F                 jmp     short loc_44D9
.text:00004541 ; ---------------------------------------------------------------------------
.text:00004541
.text:00004541 loc_4541:                               ; CODE XREF: _winctrl_add_shortcuts+2Aj
.text:00004541                 add     esp, 8
.text:00004544                 cmp     ebp, esp
.text:00004546                 call    __RTC_CheckEsp
.text:0000454B                 mov     esp, ebp
.text:0000454D                 pop     ebp
.text:0000454E                 retn
.text:0000454E _winctrl_add_shortcuts endp
.text:0000454E
.text:0000454E ; ---------------------------------------------------------------------------
.text:0000454F                 db 0Dh dup(0CCh)
.text:0000455C
.text:0000455C ; =============== S U B R O U T I N E =======================================
.text:0000455C
.text:0000455C ; Attributes: bp-based frame
.text:0000455C
.text:0000455C                 public _winctrl_rem_shortcuts
.text:0000455C _winctrl_rem_shortcuts proc near
.text:0000455C
.text:0000455C var_8           = dword ptr -8
.text:0000455C var_4           = dword ptr -4
.text:0000455C arg_0           = dword ptr  8
.text:0000455C arg_4           = dword ptr  0Ch
.text:0000455C
.text:0000455C                 push    ebp
.text:0000455D                 mov     ebp, esp
.text:0000455F                 sub     esp, 8
.text:00004562                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004569                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004570                 mov     [ebp+var_4], 0
.text:00004577                 jmp     short loc_4582
.text:00004579 ; ---------------------------------------------------------------------------
.text:00004579
.text:00004579 loc_4579:                               ; CODE XREF: _winctrl_rem_shortcuts:loc_45DFj
.text:00004579                 mov     eax, [ebp+var_4]
.text:0000457C                 add     eax, 1
.text:0000457F                 mov     [ebp+var_4], eax
.text:00004582
.text:00004582 loc_4582:                               ; CODE XREF: _winctrl_rem_shortcuts+1Bj
.text:00004582                 cmp     [ebp+var_4], 10h
.text:00004586                 jnb     short loc_45E1
.text:00004588                 mov     ecx, [ebp+arg_4]
.text:0000458B                 add     ecx, [ebp+var_4]
.text:0000458E                 movsx   edx, byte ptr [ecx+0Ch]
.text:00004592                 test    edx, edx
.text:00004594                 jz      short loc_45DF
.text:00004596                 mov     eax, [ebp+arg_4]
.text:00004599                 add     eax, [ebp+var_4]
.text:0000459C                 movzx   ecx, byte ptr [eax+0Ch]
.text:000045A0                 push    ecx             ; C
.text:000045A1                 call    _tolower
.text:000045A6                 add     esp, 4
.text:000045A9                 mov     byte ptr [ebp+var_8+3], al
.text:000045AC                 movzx   edx, byte ptr [ebp+var_8+3]
.text:000045B0                 mov     eax, [ebp+arg_0]
.text:000045B3                 movsx   ecx, byte ptr [eax+edx+3Ch]
.text:000045B8                 test    ecx, ecx
.text:000045BA                 jnz     short loc_45D3
.text:000045BC                 push    4BBh            ; Line
.text:000045C1                 push    offset $SG89376 ; "..\\..\\winctrls.c"
.text:000045C6                 push    offset $SG89377 ; "dp->shortcuts[s]"
.text:000045CB                 call    __wassert
.text:000045D0 ; ---------------------------------------------------------------------------
.text:000045D0                 add     esp, 0Ch
.text:000045D3
.text:000045D3 loc_45D3:                               ; CODE XREF: _winctrl_rem_shortcuts+5Ej
.text:000045D3                 movzx   eax, byte ptr [ebp+var_8+3]
.text:000045D7                 mov     ecx, [ebp+arg_0]
.text:000045DA                 mov     byte ptr [ecx+eax+3Ch], 0
.text:000045DF
.text:000045DF loc_45DF:                               ; CODE XREF: _winctrl_rem_shortcuts+38j
.text:000045DF                 jmp     short loc_4579
.text:000045E1 ; ---------------------------------------------------------------------------
.text:000045E1
.text:000045E1 loc_45E1:                               ; CODE XREF: _winctrl_rem_shortcuts+2Aj
.text:000045E1                 add     esp, 8
.text:000045E4                 cmp     ebp, esp
.text:000045E6                 call    __RTC_CheckEsp
.text:000045EB                 mov     esp, ebp
.text:000045ED                 pop     ebp
.text:000045EE                 retn
.text:000045EE _winctrl_rem_shortcuts endp
.text:000045EE
.text:000045EE ; ---------------------------------------------------------------------------
.text:000045EF                 db 0Dh dup(0CCh)
.text:000045FC
.text:000045FC ; =============== S U B R O U T I N E =======================================
.text:000045FC
.text:000045FC ; Attributes: bp-based frame
.text:000045FC
.text:000045FC                 public _winctrl_init
.text:000045FC _winctrl_init   proc near
.text:000045FC
.text:000045FC arg_0           = dword ptr  8
.text:000045FC
.text:000045FC                 push    ebp
.text:000045FD                 mov     ebp, esp
.text:000045FF                 push    offset _winctrl_cmp_byctrl
.text:00004604                 call    _newtree234
.text:00004609                 add     esp, 4
.text:0000460C                 mov     ecx, [ebp+arg_0]
.text:0000460F                 mov     [ecx], eax
.text:00004611                 push    offset _winctrl_cmp_byid
.text:00004616                 call    _newtree234
.text:0000461B                 add     esp, 4
.text:0000461E                 mov     edx, [ebp+arg_0]
.text:00004621                 mov     [edx+4], eax
.text:00004624                 cmp     ebp, esp
.text:00004626                 call    __RTC_CheckEsp
.text:0000462B                 pop     ebp
.text:0000462C                 retn
.text:0000462C _winctrl_init   endp
.text:0000462C
.text:0000462C ; ---------------------------------------------------------------------------
.text:0000462D                 db 0Fh dup(0CCh)
.text:0000463C
.text:0000463C ; =============== S U B R O U T I N E =======================================
.text:0000463C
.text:0000463C ; Attributes: bp-based frame
.text:0000463C
.text:0000463C _winctrl_cmp_byctrl proc near           ; DATA XREF: _winctrl_init+3o
.text:0000463C
.text:0000463C var_8           = dword ptr -8
.text:0000463C var_4           = dword ptr -4
.text:0000463C arg_0           = dword ptr  8
.text:0000463C arg_4           = dword ptr  0Ch
.text:0000463C
.text:0000463C                 push    ebp
.text:0000463D                 mov     ebp, esp
.text:0000463F                 sub     esp, 8
.text:00004642                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004649                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004650                 mov     eax, [ebp+arg_0]
.text:00004653                 mov     [ebp+var_4], eax
.text:00004656                 mov     ecx, [ebp+arg_4]
.text:00004659                 mov     [ebp+var_8], ecx
.text:0000465C                 mov     edx, [ebp+var_4]
.text:0000465F                 mov     eax, [ebp+var_8]
.text:00004662                 mov     ecx, [edx]
.text:00004664                 cmp     ecx, [eax]
.text:00004666                 jnb     short loc_466F
.text:00004668                 or      eax, 0FFFFFFFFh
.text:0000466B                 jmp     short loc_4686
.text:0000466D ; ---------------------------------------------------------------------------
.text:0000466D                 jmp     short loc_4686
.text:0000466F ; ---------------------------------------------------------------------------
.text:0000466F
.text:0000466F loc_466F:                               ; CODE XREF: _winctrl_cmp_byctrl+2Aj
.text:0000466F                 mov     edx, [ebp+var_4]
.text:00004672                 mov     eax, [ebp+var_8]
.text:00004675                 mov     ecx, [edx]
.text:00004677                 cmp     ecx, [eax]
.text:00004679                 jbe     short loc_4684
.text:0000467B                 mov     eax, 1
.text:00004680                 jmp     short loc_4686
.text:00004682 ; ---------------------------------------------------------------------------
.text:00004682                 jmp     short loc_4686
.text:00004684 ; ---------------------------------------------------------------------------
.text:00004684
.text:00004684 loc_4684:                               ; CODE XREF: _winctrl_cmp_byctrl+3Dj
.text:00004684                 xor     eax, eax
.text:00004686
.text:00004686 loc_4686:                               ; CODE XREF: _winctrl_cmp_byctrl+2Fj
.text:00004686                                         ; _winctrl_cmp_byctrl+31j ...
.text:00004686                 mov     esp, ebp
.text:00004688                 pop     ebp
.text:00004689                 retn
.text:00004689 _winctrl_cmp_byctrl endp
.text:00004689
.text:00004689 ; ---------------------------------------------------------------------------
.text:0000468A                 align 4
.text:0000468C
.text:0000468C ; =============== S U B R O U T I N E =======================================
.text:0000468C
.text:0000468C ; Attributes: bp-based frame
.text:0000468C
.text:0000468C _winctrl_cmp_byid proc near             ; DATA XREF: _winctrl_init+15o
.text:0000468C
.text:0000468C var_8           = dword ptr -8
.text:0000468C var_4           = dword ptr -4
.text:0000468C arg_0           = dword ptr  8
.text:0000468C arg_4           = dword ptr  0Ch
.text:0000468C
.text:0000468C                 push    ebp
.text:0000468D                 mov     ebp, esp
.text:0000468F                 sub     esp, 8
.text:00004692                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004699                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046A0                 mov     eax, [ebp+arg_0]
.text:000046A3                 mov     [ebp+var_4], eax
.text:000046A6                 mov     ecx, [ebp+arg_4]
.text:000046A9                 mov     [ebp+var_8], ecx
.text:000046AC                 mov     edx, [ebp+var_4]
.text:000046AF                 mov     eax, [ebp+var_8]
.text:000046B2                 mov     ecx, [edx+4]
.text:000046B5                 cmp     ecx, [eax+4]
.text:000046B8                 jge     short loc_46C1
.text:000046BA                 or      eax, 0FFFFFFFFh
.text:000046BD                 jmp     short loc_46DA
.text:000046BF ; ---------------------------------------------------------------------------
.text:000046BF                 jmp     short loc_46DA
.text:000046C1 ; ---------------------------------------------------------------------------
.text:000046C1
.text:000046C1 loc_46C1:                               ; CODE XREF: _winctrl_cmp_byid+2Cj
.text:000046C1                 mov     edx, [ebp+var_4]
.text:000046C4                 mov     eax, [ebp+var_8]
.text:000046C7                 mov     ecx, [edx+4]
.text:000046CA                 cmp     ecx, [eax+4]
.text:000046CD                 jle     short loc_46D8
.text:000046CF                 mov     eax, 1
.text:000046D4                 jmp     short loc_46DA
.text:000046D6 ; ---------------------------------------------------------------------------
.text:000046D6                 jmp     short loc_46DA
.text:000046D8 ; ---------------------------------------------------------------------------
.text:000046D8
.text:000046D8 loc_46D8:                               ; CODE XREF: _winctrl_cmp_byid+41j
.text:000046D8                 xor     eax, eax
.text:000046DA
.text:000046DA loc_46DA:                               ; CODE XREF: _winctrl_cmp_byid+31j
.text:000046DA                                         ; _winctrl_cmp_byid+33j ...
.text:000046DA                 mov     esp, ebp
.text:000046DC                 pop     ebp
.text:000046DD                 retn
.text:000046DD _winctrl_cmp_byid endp
.text:000046DD
.text:000046DD ; ---------------------------------------------------------------------------
.text:000046DE                 db 0Eh dup(0CCh)
.text:000046EC
.text:000046EC ; =============== S U B R O U T I N E =======================================
.text:000046EC
.text:000046EC ; Attributes: bp-based frame
.text:000046EC
.text:000046EC                 public _winctrl_cleanup
.text:000046EC _winctrl_cleanup proc near
.text:000046EC
.text:000046EC var_4           = dword ptr -4
.text:000046EC arg_0           = dword ptr  8
.text:000046EC
.text:000046EC                 push    ebp
.text:000046ED                 mov     ebp, esp
.text:000046EF                 push    ecx
.text:000046F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046F7
.text:000046F7 loc_46F7:                               ; CODE XREF: _winctrl_cleanup+50j
.text:000046F7                 push    0
.text:000046F9                 mov     eax, [ebp+arg_0]
.text:000046FC                 mov     ecx, [eax+4]
.text:000046FF                 push    ecx
.text:00004700                 call    _index234
.text:00004705                 add     esp, 8
.text:00004708                 mov     [ebp+var_4], eax
.text:0000470B                 cmp     [ebp+var_4], 0
.text:0000470F                 jz      short loc_473E
.text:00004711                 mov     edx, [ebp+var_4]
.text:00004714                 push    edx
.text:00004715                 mov     eax, [ebp+arg_0]
.text:00004718                 push    eax
.text:00004719                 call    _winctrl_remove
.text:0000471E                 add     esp, 8
.text:00004721                 mov     ecx, [ebp+var_4]
.text:00004724                 mov     edx, [ecx+1Ch]
.text:00004727                 push    edx
.text:00004728                 call    _safefree
.text:0000472D                 add     esp, 4
.text:00004730                 mov     eax, [ebp+var_4]
.text:00004733                 push    eax
.text:00004734                 call    _safefree
.text:00004739                 add     esp, 4
.text:0000473C                 jmp     short loc_46F7
.text:0000473E ; ---------------------------------------------------------------------------
.text:0000473E
.text:0000473E loc_473E:                               ; CODE XREF: _winctrl_cleanup+23j
.text:0000473E                 mov     ecx, [ebp+arg_0]
.text:00004741                 mov     edx, [ecx]
.text:00004743                 push    edx
.text:00004744                 call    _freetree234
.text:00004749                 add     esp, 4
.text:0000474C                 mov     eax, [ebp+arg_0]
.text:0000474F                 mov     ecx, [eax+4]
.text:00004752                 push    ecx
.text:00004753                 call    _freetree234
.text:00004758                 add     esp, 4
.text:0000475B                 mov     edx, [ebp+arg_0]
.text:0000475E                 mov     dword ptr [edx+4], 0
.text:00004765                 mov     eax, [ebp+arg_0]
.text:00004768                 mov     dword ptr [eax], 0
.text:0000476E                 add     esp, 4
.text:00004771                 cmp     ebp, esp
.text:00004773                 call    __RTC_CheckEsp
.text:00004778                 mov     esp, ebp
.text:0000477A                 pop     ebp
.text:0000477B                 retn
.text:0000477B _winctrl_cleanup endp
.text:0000477B
.text:0000477C
.text:0000477C ; =============== S U B R O U T I N E =======================================
.text:0000477C
.text:0000477C ; Attributes: bp-based frame
.text:0000477C
.text:0000477C                 public _winctrl_add
.text:0000477C _winctrl_add    proc near               ; CODE XREF: _winctrl_layout+B8p
.text:0000477C                                         ; _winctrl_layout+176p ...
.text:0000477C
.text:0000477C var_4           = dword ptr -4
.text:0000477C arg_0           = dword ptr  8
.text:0000477C arg_4           = dword ptr  0Ch
.text:0000477C
.text:0000477C                 push    ebp
.text:0000477D                 mov     ebp, esp
.text:0000477F                 push    ecx
.text:00004780                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004787                 mov     eax, [ebp+arg_4]
.text:0000478A                 cmp     dword ptr [eax], 0
.text:0000478D                 jz      short loc_47C3
.text:0000478F                 mov     ecx, [ebp+arg_4]
.text:00004792                 push    ecx
.text:00004793                 mov     edx, [ebp+arg_0]
.text:00004796                 mov     eax, [edx]
.text:00004798                 push    eax
.text:00004799                 call    _add234
.text:0000479E                 add     esp, 8
.text:000047A1                 mov     [ebp+var_4], eax
.text:000047A4                 mov     ecx, [ebp+var_4]
.text:000047A7                 cmp     ecx, [ebp+arg_4]
.text:000047AA                 jz      short loc_47C3
.text:000047AC                 push    506h            ; Line
.text:000047B1                 push    offset $SG89454 ; "..\\..\\winctrls.c"
.text:000047B6                 push    offset $SG89455 ; "ret == c"
.text:000047BB                 call    __wassert
.text:000047C0 ; ---------------------------------------------------------------------------
.text:000047C0                 add     esp, 0Ch
.text:000047C3
.text:000047C3 loc_47C3:                               ; CODE XREF: _winctrl_add+11j
.text:000047C3                                         ; _winctrl_add+2Ej
.text:000047C3                 mov     eax, [ebp+arg_4]
.text:000047C6                 push    eax
.text:000047C7                 mov     ecx, [ebp+arg_0]
.text:000047CA                 mov     edx, [ecx+4]
.text:000047CD                 push    edx
.text:000047CE                 call    _add234
.text:000047D3                 add     esp, 8
.text:000047D6                 mov     [ebp+var_4], eax
.text:000047D9                 mov     eax, [ebp+var_4]
.text:000047DC                 cmp     eax, [ebp+arg_4]
.text:000047DF                 jz      short loc_47F8
.text:000047E1                 push    509h            ; Line
.text:000047E6                 push    offset $SG89457 ; "..\\..\\winctrls.c"
.text:000047EB                 push    offset $SG89458 ; "ret == c"
.text:000047F0                 call    __wassert
.text:000047F5 ; ---------------------------------------------------------------------------
.text:000047F5                 add     esp, 0Ch
.text:000047F8
.text:000047F8 loc_47F8:                               ; CODE XREF: _winctrl_add+63j
.text:000047F8                 add     esp, 4
.text:000047FB                 cmp     ebp, esp
.text:000047FD                 call    __RTC_CheckEsp
.text:00004802                 mov     esp, ebp
.text:00004804                 pop     ebp
.text:00004805                 retn
.text:00004805 _winctrl_add    endp
.text:00004805
.text:00004805 ; ---------------------------------------------------------------------------
.text:00004806                 db 6 dup(0CCh)
.text:0000480C
.text:0000480C ; =============== S U B R O U T I N E =======================================
.text:0000480C
.text:0000480C ; Attributes: bp-based frame
.text:0000480C
.text:0000480C                 public _winctrl_remove
.text:0000480C _winctrl_remove proc near               ; CODE XREF: _winctrl_cleanup+2Dp
.text:0000480C
.text:0000480C var_4           = dword ptr -4
.text:0000480C arg_0           = dword ptr  8
.text:0000480C arg_4           = dword ptr  0Ch
.text:0000480C
.text:0000480C                 push    ebp
.text:0000480D                 mov     ebp, esp
.text:0000480F                 push    ecx
.text:00004810                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004817                 mov     eax, [ebp+arg_4]
.text:0000481A                 push    eax
.text:0000481B                 mov     ecx, [ebp+arg_0]
.text:0000481E                 mov     edx, [ecx]
.text:00004820                 push    edx
.text:00004821                 call    _del234
.text:00004826                 add     esp, 8
.text:00004829                 mov     [ebp+var_4], eax
.text:0000482C                 mov     eax, [ebp+arg_4]
.text:0000482F                 push    eax
.text:00004830                 mov     ecx, [ebp+arg_0]
.text:00004833                 mov     edx, [ecx+4]
.text:00004836                 push    edx
.text:00004837                 call    _del234
.text:0000483C                 add     esp, 8
.text:0000483F                 mov     [ebp+var_4], eax
.text:00004842                 mov     eax, [ebp+var_4]
.text:00004845                 cmp     eax, [ebp+arg_4]
.text:00004848                 jz      short loc_4861
.text:0000484A                 push    511h            ; Line
.text:0000484F                 push    offset $SG89466 ; "..\\..\\winctrls.c"
.text:00004854                 push    offset $SG89467 ; "ret == c"
.text:00004859                 call    __wassert
.text:0000485E ; ---------------------------------------------------------------------------
.text:0000485E                 add     esp, 0Ch
.text:00004861
.text:00004861 loc_4861:                               ; CODE XREF: _winctrl_remove+3Cj
.text:00004861                 add     esp, 4
.text:00004864                 cmp     ebp, esp
.text:00004866                 call    __RTC_CheckEsp
.text:0000486B                 mov     esp, ebp
.text:0000486D                 pop     ebp
.text:0000486E                 retn
.text:0000486E _winctrl_remove endp
.text:0000486E
.text:0000486E ; ---------------------------------------------------------------------------
.text:0000486F                 db 0Dh dup(0CCh)
.text:0000487C
.text:0000487C ; =============== S U B R O U T I N E =======================================
.text:0000487C
.text:0000487C ; Attributes: bp-based frame
.text:0000487C
.text:0000487C                 public _winctrl_findbyctrl
.text:0000487C _winctrl_findbyctrl proc near           ; CODE XREF: _dlg_findbyctrl+40p
.text:0000487C
.text:0000487C arg_0           = dword ptr  8
.text:0000487C arg_4           = dword ptr  0Ch
.text:0000487C
.text:0000487C                 push    ebp
.text:0000487D                 mov     ebp, esp
.text:0000487F                 push    offset _winctrl_cmp_byctrl_find
.text:00004884                 mov     eax, [ebp+arg_4]
.text:00004887                 push    eax
.text:00004888                 mov     ecx, [ebp+arg_0]
.text:0000488B                 mov     edx, [ecx]
.text:0000488D                 push    edx
.text:0000488E                 call    _find234
.text:00004893                 add     esp, 0Ch
.text:00004896                 cmp     ebp, esp
.text:00004898                 call    __RTC_CheckEsp
.text:0000489D                 pop     ebp
.text:0000489E                 retn
.text:0000489E _winctrl_findbyctrl endp
.text:0000489E
.text:0000489E ; ---------------------------------------------------------------------------
.text:0000489F                 db 0Dh dup(0CCh)
.text:000048AC
.text:000048AC ; =============== S U B R O U T I N E =======================================
.text:000048AC
.text:000048AC ; Attributes: bp-based frame
.text:000048AC
.text:000048AC _winctrl_cmp_byctrl_find proc near      ; DATA XREF: _winctrl_findbyctrl+3o
.text:000048AC
.text:000048AC var_8           = dword ptr -8
.text:000048AC var_4           = dword ptr -4
.text:000048AC arg_0           = dword ptr  8
.text:000048AC arg_4           = dword ptr  0Ch
.text:000048AC
.text:000048AC                 push    ebp
.text:000048AD                 mov     ebp, esp
.text:000048AF                 sub     esp, 8
.text:000048B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000048B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048C0                 mov     eax, [ebp+arg_0]
.text:000048C3                 mov     [ebp+var_4], eax
.text:000048C6                 mov     ecx, [ebp+arg_4]
.text:000048C9                 mov     [ebp+var_8], ecx
.text:000048CC                 mov     edx, [ebp+var_8]
.text:000048CF                 mov     eax, [ebp+var_4]
.text:000048D2                 cmp     eax, [edx]
.text:000048D4                 jnb     short loc_48DD
.text:000048D6                 or      eax, 0FFFFFFFFh
.text:000048D9                 jmp     short loc_48F2
.text:000048DB ; ---------------------------------------------------------------------------
.text:000048DB                 jmp     short loc_48F2
.text:000048DD ; ---------------------------------------------------------------------------
.text:000048DD
.text:000048DD loc_48DD:                               ; CODE XREF: _winctrl_cmp_byctrl_find+28j
.text:000048DD                 mov     ecx, [ebp+var_8]
.text:000048E0                 mov     edx, [ebp+var_4]
.text:000048E3                 cmp     edx, [ecx]
.text:000048E5                 jbe     short loc_48F0
.text:000048E7                 mov     eax, 1
.text:000048EC                 jmp     short loc_48F2
.text:000048EE ; ---------------------------------------------------------------------------
.text:000048EE                 jmp     short loc_48F2
.text:000048F0 ; ---------------------------------------------------------------------------
.text:000048F0
.text:000048F0 loc_48F0:                               ; CODE XREF: _winctrl_cmp_byctrl_find+39j
.text:000048F0                 xor     eax, eax
.text:000048F2
.text:000048F2 loc_48F2:                               ; CODE XREF: _winctrl_cmp_byctrl_find+2Dj
.text:000048F2                                         ; _winctrl_cmp_byctrl_find+2Fj ...
.text:000048F2                 mov     esp, ebp
.text:000048F4                 pop     ebp
.text:000048F5                 retn
.text:000048F5 _winctrl_cmp_byctrl_find endp
.text:000048F5
.text:000048F5 ; ---------------------------------------------------------------------------
.text:000048F6                 db 6 dup(0CCh)
.text:000048FC
.text:000048FC ; =============== S U B R O U T I N E =======================================
.text:000048FC
.text:000048FC ; Attributes: bp-based frame
.text:000048FC
.text:000048FC                 public _winctrl_findbyid
.text:000048FC _winctrl_findbyid proc near             ; CODE XREF: _winctrl_handle_command+A6p
.text:000048FC                                         ; _winctrl_context_help+47p
.text:000048FC
.text:000048FC arg_0           = dword ptr  8
.text:000048FC arg_4           = byte ptr  0Ch
.text:000048FC
.text:000048FC                 push    ebp
.text:000048FD                 mov     ebp, esp
.text:000048FF                 push    offset _winctrl_cmp_byid_find
.text:00004904                 lea     eax, [ebp+arg_4]
.text:00004907                 push    eax
.text:00004908                 mov     ecx, [ebp+arg_0]
.text:0000490B                 mov     edx, [ecx+4]
.text:0000490E                 push    edx
.text:0000490F                 call    _find234
.text:00004914                 add     esp, 0Ch
.text:00004917                 cmp     ebp, esp
.text:00004919                 call    __RTC_CheckEsp
.text:0000491E                 pop     ebp
.text:0000491F                 retn
.text:0000491F _winctrl_findbyid endp
.text:0000491F
.text:0000491F ; ---------------------------------------------------------------------------
.text:00004920                 db 0Ch dup(0CCh)
.text:0000492C
.text:0000492C ; =============== S U B R O U T I N E =======================================
.text:0000492C
.text:0000492C ; Attributes: bp-based frame
.text:0000492C
.text:0000492C _winctrl_cmp_byid_find proc near        ; DATA XREF: _winctrl_findbyid+3o
.text:0000492C
.text:0000492C var_8           = dword ptr -8
.text:0000492C var_4           = dword ptr -4
.text:0000492C arg_0           = dword ptr  8
.text:0000492C arg_4           = dword ptr  0Ch
.text:0000492C
.text:0000492C                 push    ebp
.text:0000492D                 mov     ebp, esp
.text:0000492F                 sub     esp, 8
.text:00004932                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004939                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004940                 mov     eax, [ebp+arg_0]
.text:00004943                 mov     [ebp+var_4], eax
.text:00004946                 mov     ecx, [ebp+arg_4]
.text:00004949                 mov     [ebp+var_8], ecx
.text:0000494C                 mov     edx, [ebp+var_4]
.text:0000494F                 mov     eax, [ebp+var_8]
.text:00004952                 mov     ecx, [edx]
.text:00004954                 cmp     ecx, [eax+4]
.text:00004957                 jge     short loc_4960
.text:00004959                 or      eax, 0FFFFFFFFh
.text:0000495C                 jmp     short loc_497E
.text:0000495E ; ---------------------------------------------------------------------------
.text:0000495E                 jmp     short loc_497E
.text:00004960 ; ---------------------------------------------------------------------------
.text:00004960
.text:00004960 loc_4960:                               ; CODE XREF: _winctrl_cmp_byid_find+2Bj
.text:00004960                 mov     edx, [ebp+var_8]
.text:00004963                 mov     eax, [edx+4]
.text:00004966                 mov     ecx, [ebp+var_8]
.text:00004969                 add     eax, [ecx+8]
.text:0000496C                 mov     edx, [ebp+var_4]
.text:0000496F                 cmp     [edx], eax
.text:00004971                 jl      short loc_497C
.text:00004973                 mov     eax, 1
.text:00004978                 jmp     short loc_497E
.text:0000497A ; ---------------------------------------------------------------------------
.text:0000497A                 jmp     short loc_497E
.text:0000497C ; ---------------------------------------------------------------------------
.text:0000497C
.text:0000497C loc_497C:                               ; CODE XREF: _winctrl_cmp_byid_find+45j
.text:0000497C                 xor     eax, eax
.text:0000497E
.text:0000497E loc_497E:                               ; CODE XREF: _winctrl_cmp_byid_find+30j
.text:0000497E                                         ; _winctrl_cmp_byid_find+32j ...
.text:0000497E                 mov     esp, ebp
.text:00004980                 pop     ebp
.text:00004981                 retn
.text:00004981 _winctrl_cmp_byid_find endp
.text:00004981
.text:00004981 ; ---------------------------------------------------------------------------
.text:00004982                 db 0Ah dup(0CCh)
.text:0000498C
.text:0000498C ; =============== S U B R O U T I N E =======================================
.text:0000498C
.text:0000498C ; Attributes: bp-based frame
.text:0000498C
.text:0000498C                 public _winctrl_findbyindex
.text:0000498C _winctrl_findbyindex proc near          ; CODE XREF: _dlg_refresh+66p
.text:0000498C
.text:0000498C arg_0           = dword ptr  8
.text:0000498C arg_4           = dword ptr  0Ch
.text:0000498C
.text:0000498C                 push    ebp
.text:0000498D                 mov     ebp, esp
.text:0000498F                 mov     eax, [ebp+arg_4]
.text:00004992                 push    eax
.text:00004993                 mov     ecx, [ebp+arg_0]
.text:00004996                 mov     edx, [ecx+4]
.text:00004999                 push    edx
.text:0000499A                 call    _index234
.text:0000499F                 add     esp, 8
.text:000049A2                 cmp     ebp, esp
.text:000049A4                 call    __RTC_CheckEsp
.text:000049A9                 pop     ebp
.text:000049AA                 retn
.text:000049AA _winctrl_findbyindex endp
.text:000049AA
.text:000049AA ; ---------------------------------------------------------------------------
.text:000049AB                 align 4
.text:000049AC
.text:000049AC ; =============== S U B R O U T I N E =======================================
.text:000049AC
.text:000049AC ; Attributes: bp-based frame
.text:000049AC
.text:000049AC                 public _winctrl_layout
.text:000049AC _winctrl_layout proc near
.text:000049AC
.text:000049AC var_5BC         = dword ptr -5BCh
.text:000049AC var_5B8         = dword ptr -5B8h
.text:000049AC var_5B4         = dword ptr -5B4h
.text:000049AC var_5B0         = dword ptr -5B0h
.text:000049AC var_5AC         = dword ptr -5ACh
.text:000049AC var_5A8         = dword ptr -5A8h
.text:000049AC var_5A4         = dword ptr -5A4h
.text:000049AC lParam          = dword ptr -5A0h
.text:000049AC var_59C         = dword ptr -59Ch
.text:000049AC var_598         = dword ptr -598h
.text:000049AC var_594         = dword ptr -594h
.text:000049AC var_58C         = dword ptr -58Ch
.text:000049AC var_584         = dword ptr -584h
.text:000049AC Str             = dword ptr -580h
.text:000049AC var_57C         = dword ptr -57Ch
.text:000049AC var_578         = dword ptr -578h
.text:000049AC var_574         = dword ptr -574h
.text:000049AC var_570         = dword ptr -570h
.text:000049AC var_56C         = dword ptr -56Ch
.text:000049AC var_568         = dword ptr -568h
.text:000049AC var_564         = dword ptr -564h
.text:000049AC var_560         = dword ptr -560h
.text:000049AC var_55C         = dword ptr -55Ch
.text:000049AC var_558         = dword ptr -558h
.text:000049AC var_554         = dword ptr -554h
.text:000049AC var_550         = dword ptr -550h
.text:000049AC var_54C         = dword ptr -54Ch
.text:000049AC var_548         = dword ptr -548h
.text:000049AC hMenu           = dword ptr -544h
.text:000049AC wParam          = dword ptr -540h
.text:000049AC var_53C         = dword ptr -53Ch
.text:000049AC lpWindowName    = dword ptr -538h
.text:000049AC var_534         = dword ptr -534h
.text:000049AC Dst             = byte ptr -52Ch
.text:000049AC var_514         = dword ptr -514h
.text:000049AC var_508         = dword ptr -508h
.text:000049AC var_504         = dword ptr -504h
.text:000049AC var_4EC         = dword ptr -4ECh
.text:000049AC var_4E4         = dword ptr -4E4h
.text:000049AC var_49C         = byte ptr -49Ch
.text:000049AC var_258         = dword ptr -258h
.text:000049AC var_254         = dword ptr -254h
.text:000049AC var_250         = dword ptr -250h
.text:000049AC var_248         = byte ptr -248h
.text:000049AC var_23C         = dword ptr -23Ch
.text:000049AC var_238         = dword ptr -238h
.text:000049AC var_234         = dword ptr -234h
.text:000049AC var_4           = dword ptr -4
.text:000049AC arg_0           = dword ptr  8
.text:000049AC arg_4           = dword ptr  0Ch
.text:000049AC arg_8           = dword ptr  10h
.text:000049AC arg_C           = dword ptr  14h
.text:000049AC arg_10          = dword ptr  18h
.text:000049AC
.text:000049AC                 push    ebp
.text:000049AD                 mov     ebp, esp
.text:000049AF                 sub     esp, 5BCh
.text:000049B5                 push    esi
.text:000049B6                 push    edi
.text:000049B7                 lea     edi, [ebp+var_5BC]
.text:000049BD                 mov     ecx, 16Fh
.text:000049C2                 mov     eax, 0CCCCCCCCh
.text:000049C7                 rep stosd
.text:000049C9                 mov     eax, dword ptr ds:___security_cookie
.text:000049CE                 xor     eax, ebp
.text:000049D0                 mov     [ebp+var_4], eax
.text:000049D3                 mov     eax, [ebp+arg_10]
.text:000049D6                 mov     ecx, [eax]
.text:000049D8                 mov     [ebp+hMenu], ecx
.text:000049DE                 mov     edx, [ebp+arg_C]
.text:000049E1                 cmp     dword ptr [edx+4], 0
.text:000049E5                 jz      loc_4A95
.text:000049EB                 mov     eax, [ebp+arg_C]
.text:000049EE                 mov     ecx, [eax+4]
.text:000049F1                 movsx   edx, byte ptr [ecx]
.text:000049F4                 test    edx, edx
.text:000049F6                 jz      loc_4A95
.text:000049FC                 push    20h ; ' '
.text:000049FE                 push    1
.text:00004A00                 call    _safemalloc
.text:00004A05                 add     esp, 8
.text:00004A08                 mov     [ebp+var_550], eax
.text:00004A0E                 mov     eax, [ebp+var_550]
.text:00004A14                 mov     dword ptr [eax], 0
.text:00004A1A                 mov     ecx, [ebp+var_550]
.text:00004A20                 mov     edx, [ebp+hMenu]
.text:00004A26                 mov     [ecx+4], edx
.text:00004A29                 mov     eax, [ebp+var_550]
.text:00004A2F                 mov     dword ptr [eax+8], 1
.text:00004A36                 mov     ecx, [ebp+var_550]
.text:00004A3C                 mov     dword ptr [ecx+1Ch], 0
.text:00004A43                 push    10h             ; Size
.text:00004A45                 push    0               ; Val
.text:00004A47                 mov     edx, [ebp+var_550]
.text:00004A4D                 add     edx, 0Ch
.text:00004A50                 push    edx             ; Dst
.text:00004A51                 call    _memset
.text:00004A56                 add     esp, 0Ch
.text:00004A59                 mov     eax, [ebp+var_550]
.text:00004A5F                 push    eax
.text:00004A60                 mov     ecx, [ebp+arg_4]
.text:00004A63                 push    ecx
.text:00004A64                 call    _winctrl_add
.text:00004A69                 add     esp, 8
.text:00004A6C                 mov     edx, [ebp+hMenu]
.text:00004A72                 push    edx
.text:00004A73                 mov     eax, [ebp+arg_C]
.text:00004A76                 mov     ecx, [eax+8]
.text:00004A79                 push    ecx
.text:00004A7A                 mov     edx, [ebp+arg_8]
.text:00004A7D                 push    edx
.text:00004A7E                 call    _beginbox
.text:00004A83                 add     esp, 0Ch
.text:00004A86                 mov     eax, [ebp+hMenu]
.text:00004A8C                 add     eax, 1
.text:00004A8F                 mov     [ebp+hMenu], eax
.text:00004A95
.text:00004A95 loc_4A95:                               ; CODE XREF: _winctrl_layout+39j
.text:00004A95                                         ; _winctrl_layout+4Aj
.text:00004A95                 mov     ecx, [ebp+arg_C]
.text:00004A98                 cmp     dword ptr [ecx+4], 0
.text:00004A9C                 jnz     loc_4B4C
.text:00004AA2                 mov     edx, [ebp+arg_C]
.text:00004AA5                 cmp     dword ptr [edx+8], 0
.text:00004AA9                 jz      loc_4B4C
.text:00004AAF                 push    20h ; ' '
.text:00004AB1                 push    1
.text:00004AB3                 call    _safemalloc
.text:00004AB8                 add     esp, 8
.text:00004ABB                 mov     [ebp+var_554], eax
.text:00004AC1                 mov     eax, [ebp+var_554]
.text:00004AC7                 mov     dword ptr [eax], 0
.text:00004ACD                 mov     ecx, [ebp+var_554]
.text:00004AD3                 mov     edx, [ebp+hMenu]
.text:00004AD9                 mov     [ecx+4], edx
.text:00004ADC                 mov     eax, [ebp+var_554]
.text:00004AE2                 mov     dword ptr [eax+8], 1
.text:00004AE9                 mov     ecx, [ebp+arg_C]
.text:00004AEC                 mov     edx, [ecx+8]
.text:00004AEF                 push    edx
.text:00004AF0                 call    _dupstr
.text:00004AF5                 add     esp, 4
.text:00004AF8                 mov     ecx, [ebp+var_554]
.text:00004AFE                 mov     [ecx+1Ch], eax
.text:00004B01                 push    10h             ; Size
.text:00004B03                 push    0               ; Val
.text:00004B05                 mov     edx, [ebp+var_554]
.text:00004B0B                 add     edx, 0Ch
.text:00004B0E                 push    edx             ; Dst
.text:00004B0F                 call    _memset
.text:00004B14                 add     esp, 0Ch
.text:00004B17                 mov     eax, [ebp+var_554]
.text:00004B1D                 push    eax
.text:00004B1E                 mov     ecx, [ebp+arg_4]
.text:00004B21                 push    ecx
.text:00004B22                 call    _winctrl_add
.text:00004B27                 add     esp, 8
.text:00004B2A                 mov     edx, [ebp+hMenu]
.text:00004B30                 push    edx             ; hMenu
.text:00004B31                 mov     eax, [ebp+arg_8]
.text:00004B34                 push    eax             ; int
.text:00004B35                 call    _paneltitle
.text:00004B3A                 add     esp, 8
.text:00004B3D                 mov     ecx, [ebp+hMenu]
.text:00004B43                 add     ecx, 1
.text:00004B46                 mov     [ebp+hMenu], ecx
.text:00004B4C
.text:00004B4C loc_4B4C:                               ; CODE XREF: _winctrl_layout+F0j
.text:00004B4C                                         ; _winctrl_layout+FDj
.text:00004B4C                 mov     [ebp+var_250], 1
.text:00004B56                 mov     esi, [ebp+arg_8]
.text:00004B59                 mov     ecx, 9
.text:00004B5E                 lea     edi, [ebp+var_248]
.text:00004B64                 rep movsd
.text:00004B66                 mov     [ebp+var_4EC], 0
.text:00004B70                 mov     [ebp+var_53C], 0
.text:00004B7A                 jmp     short loc_4B8B
.text:00004B7C ; ---------------------------------------------------------------------------
.text:00004B7C
.text:00004B7C loc_4B7C:                               ; CODE XREF: _winctrl_layout:loc_4E16j
.text:00004B7C                                         ; _winctrl_layout:loc_5BBDj
.text:00004B7C                 mov     edx, [ebp+var_53C]
.text:00004B82                 add     edx, 1
.text:00004B85                 mov     [ebp+var_53C], edx
.text:00004B8B
.text:00004B8B loc_4B8B:                               ; CODE XREF: _winctrl_layout+1CEj
.text:00004B8B                 mov     eax, [ebp+arg_C]
.text:00004B8E                 mov     ecx, [ebp+var_53C]
.text:00004B94                 cmp     ecx, [eax+10h]
.text:00004B97                 jge     loc_5BC2
.text:00004B9D                 mov     edx, [ebp+arg_C]
.text:00004BA0                 mov     eax, [edx+18h]
.text:00004BA3                 mov     ecx, [ebp+var_53C]
.text:00004BA9                 mov     edx, [eax+ecx*4]
.text:00004BAC                 mov     [ebp+var_558], edx
.text:00004BB2                 mov     eax, [ebp+var_558]
.text:00004BB8                 cmp     dword ptr [eax], 6
.text:00004BBB                 jnz     loc_4E20
.text:00004BC1                 mov     ecx, [ebp+var_558]
.text:00004BC7                 xor     edx, edx
.text:00004BC9                 cmp     dword ptr [ecx+1Ch], 1
.text:00004BCD                 setz    dl
.text:00004BD0                 xor     eax, eax
.text:00004BD2                 cmp     [ebp+var_250], 1
.text:00004BD9                 setz    al
.text:00004BDC                 xor     edx, eax
.text:00004BDE                 jnz     short loc_4BF7
.text:00004BE0                 push    568h            ; Line
.text:00004BE5                 push    offset $SG89527 ; "..\\..\\winctrls.c"
.text:00004BEA                 push    offset $SG89528 ; "(ctrl->columns.ncols == 1) ^ (ncols == "...
.text:00004BEF                 call    __wassert
.text:00004BF4 ; ---------------------------------------------------------------------------
.text:00004BF4                 add     esp, 0Ch
.text:00004BF7
.text:00004BF7 loc_4BF7:                               ; CODE XREF: _winctrl_layout+232j
.text:00004BF7                 cmp     [ebp+var_250], 1
.text:00004BFE                 jnz     loc_4D8B
.text:00004C04                 mov     edx, [ebp+var_558]
.text:00004C0A                 mov     eax, [edx+1Ch]
.text:00004C0D                 mov     [ebp+var_250], eax
.text:00004C13                 cmp     [ebp+var_250], 10h
.text:00004C1A                 jbe     short loc_4C33
.text:00004C1C                 push    571h            ; Line
.text:00004C21                 push    offset $SG89536 ; "..\\..\\winctrls.c"
.text:00004C26                 push    offset $SG89537 ; "ncols <= lenof(columns)"
.text:00004C2B                 call    __wassert
.text:00004C30 ; ---------------------------------------------------------------------------
.text:00004C30                 add     esp, 0Ch
.text:00004C33
.text:00004C33 loc_4C33:                               ; CODE XREF: _winctrl_layout+26Ej
.text:00004C33                 mov     [ebp+var_56C], 1
.text:00004C3D                 jmp     short loc_4C4E
.text:00004C3F ; ---------------------------------------------------------------------------
.text:00004C3F
.text:00004C3F loc_4C3F:                               ; CODE XREF: _winctrl_layout+2CDj
.text:00004C3F                 mov     edx, [ebp+var_56C]
.text:00004C45                 add     edx, 1
.text:00004C48                 mov     [ebp+var_56C], edx
.text:00004C4E
.text:00004C4E loc_4C4E:                               ; CODE XREF: _winctrl_layout+291j
.text:00004C4E                 mov     eax, [ebp+var_56C]
.text:00004C54                 cmp     eax, [ebp+var_250]
.text:00004C5A                 jge     short loc_4C7B
.text:00004C5C                 mov     ecx, [ebp+var_56C]
.text:00004C62                 imul    ecx, 24h
.text:00004C65                 lea     edi, [ebp+ecx+var_248]
.text:00004C6C                 mov     ecx, 9
.text:00004C71                 lea     esi, [ebp+var_248]
.text:00004C77                 rep movsd
.text:00004C79                 jmp     short loc_4C3F
.text:00004C7B ; ---------------------------------------------------------------------------
.text:00004C7B
.text:00004C7B loc_4C7B:                               ; CODE XREF: _winctrl_layout+2AEj
.text:00004C7B                 mov     [ebp+var_55C], 0
.text:00004C85                 mov     [ebp+var_56C], 0
.text:00004C8F                 jmp     short loc_4CA0
.text:00004C91 ; ---------------------------------------------------------------------------
.text:00004C91
.text:00004C91 loc_4C91:                               ; CODE XREF: _winctrl_layout+3D5j
.text:00004C91                 mov     edx, [ebp+var_56C]
.text:00004C97                 add     edx, 1
.text:00004C9A                 mov     [ebp+var_56C], edx
.text:00004CA0
.text:00004CA0 loc_4CA0:                               ; CODE XREF: _winctrl_layout+2E3j
.text:00004CA0                 mov     eax, [ebp+var_56C]
.text:00004CA6                 cmp     eax, [ebp+var_250]
.text:00004CAC                 jge     loc_4D86
.text:00004CB2                 mov     ecx, [ebp+var_558]
.text:00004CB8                 mov     edx, [ecx+20h]
.text:00004CBB                 mov     eax, [ebp+var_56C]
.text:00004CC1                 mov     ecx, [ebp+var_55C]
.text:00004CC7                 add     ecx, [edx+eax*4]
.text:00004CCA                 mov     [ebp+var_560], ecx
.text:00004CD0                 mov     ecx, [ebp+var_56C]
.text:00004CD6                 imul    ecx, 24h
.text:00004CD9                 mov     edx, [ebp+var_56C]
.text:00004CDF                 imul    edx, 24h
.text:00004CE2                 mov     eax, [ebp+edx+var_238]
.text:00004CE9                 add     eax, 3
.text:00004CEC                 imul    eax, [ebp+var_55C]
.text:00004CF3                 cdq
.text:00004CF4                 mov     esi, 64h ; 'd'
.text:00004CF9                 idiv    esi
.text:00004CFB                 add     eax, [ebp+ecx+var_234]
.text:00004D02                 mov     [ebp+var_564], eax
.text:00004D08                 mov     ecx, [ebp+var_56C]
.text:00004D0E                 imul    ecx, 24h
.text:00004D11                 mov     edx, [ebp+var_56C]
.text:00004D17                 imul    edx, 24h
.text:00004D1A                 mov     eax, [ebp+edx+var_238]
.text:00004D21                 add     eax, 3
.text:00004D24                 imul    eax, [ebp+var_560]
.text:00004D2B                 cdq
.text:00004D2C                 mov     esi, 64h ; 'd'
.text:00004D31                 idiv    esi
.text:00004D33                 add     eax, [ebp+ecx+var_234]
.text:00004D3A                 mov     [ebp+var_568], eax
.text:00004D40                 mov     ecx, [ebp+var_56C]
.text:00004D46                 imul    ecx, 24h
.text:00004D49                 mov     edx, [ebp+var_564]
.text:00004D4F                 mov     [ebp+ecx+var_234], edx
.text:00004D56                 mov     eax, [ebp+var_568]
.text:00004D5C                 sub     eax, [ebp+var_564]
.text:00004D62                 sub     eax, 3
.text:00004D65                 mov     ecx, [ebp+var_56C]
.text:00004D6B                 imul    ecx, 24h
.text:00004D6E                 mov     [ebp+ecx+var_238], eax
.text:00004D75                 mov     edx, [ebp+var_560]
.text:00004D7B                 mov     [ebp+var_55C], edx
.text:00004D81                 jmp     loc_4C91
.text:00004D86 ; ---------------------------------------------------------------------------
.text:00004D86
.text:00004D86 loc_4D86:                               ; CODE XREF: _winctrl_layout+300j
.text:00004D86                 jmp     loc_4E16
.text:00004D8B ; ---------------------------------------------------------------------------
.text:00004D8B
.text:00004D8B loc_4D8B:                               ; CODE XREF: _winctrl_layout+252j
.text:00004D8B                 mov     eax, [ebp+var_23C]
.text:00004D91                 mov     [ebp+var_570], eax
.text:00004D97                 mov     [ebp+var_574], 1
.text:00004DA1                 jmp     short loc_4DB2
.text:00004DA3 ; ---------------------------------------------------------------------------
.text:00004DA3
.text:00004DA3 loc_4DA3:                               ; CODE XREF: _winctrl_layout:loc_4DEEj
.text:00004DA3                 mov     ecx, [ebp+var_574]
.text:00004DA9                 add     ecx, 1
.text:00004DAC                 mov     [ebp+var_574], ecx
.text:00004DB2
.text:00004DB2 loc_4DB2:                               ; CODE XREF: _winctrl_layout+3F5j
.text:00004DB2                 mov     edx, [ebp+var_574]
.text:00004DB8                 cmp     edx, [ebp+var_250]
.text:00004DBE                 jge     short loc_4DF0
.text:00004DC0                 mov     eax, [ebp+var_574]
.text:00004DC6                 imul    eax, 24h
.text:00004DC9                 mov     ecx, [ebp+var_570]
.text:00004DCF                 cmp     ecx, [ebp+eax+var_23C]
.text:00004DD6                 jge     short loc_4DEE
.text:00004DD8                 mov     edx, [ebp+var_574]
.text:00004DDE                 imul    edx, 24h
.text:00004DE1                 mov     eax, [ebp+edx+var_23C]
.text:00004DE8                 mov     [ebp+var_570], eax
.text:00004DEE
.text:00004DEE loc_4DEE:                               ; CODE XREF: _winctrl_layout+42Aj
.text:00004DEE                 jmp     short loc_4DA3
.text:00004DF0 ; ---------------------------------------------------------------------------
.text:00004DF0
.text:00004DF0 loc_4DF0:                               ; CODE XREF: _winctrl_layout+412j
.text:00004DF0                 mov     [ebp+var_250], 1
.text:00004DFA                 mov     esi, [ebp+arg_8]
.text:00004DFD                 mov     ecx, 9
.text:00004E02                 lea     edi, [ebp+var_248]
.text:00004E08                 rep movsd
.text:00004E0A                 mov     ecx, [ebp+var_570]
.text:00004E10                 mov     [ebp+var_23C], ecx
.text:00004E16
.text:00004E16 loc_4E16:                               ; CODE XREF: _winctrl_layout:loc_4D86j
.text:00004E16                 jmp     loc_4B7C
.text:00004E1B ; ---------------------------------------------------------------------------
.text:00004E1B                 jmp     loc_506C
.text:00004E20 ; ---------------------------------------------------------------------------
.text:00004E20
.text:00004E20 loc_4E20:                               ; CODE XREF: _winctrl_layout+20Fj
.text:00004E20                 mov     edx, [ebp+var_558]
.text:00004E26                 cmp     dword ptr [edx], 9
.text:00004E29                 jnz     loc_4F00
.text:00004E2F                 mov     eax, [ebp+var_558]
.text:00004E35                 cmp     dword ptr [eax+8], 0
.text:00004E39                 jz      short loc_4E52
.text:00004E3B                 push    592h            ; Line
.text:00004E40                 push    offset $SG89555 ; "..\\..\\winctrls.c"
.text:00004E45                 push    offset $SG89556 ; "!ctrl->generic.tabdelay"
.text:00004E4A                 call    __wassert
.text:00004E4F ; ---------------------------------------------------------------------------
.text:00004E4F                 add     esp, 0Ch
.text:00004E52
.text:00004E52 loc_4E52:                               ; CODE XREF: _winctrl_layout+48Dj
.text:00004E52                 mov     edx, [ebp+var_558]
.text:00004E58                 mov     eax, [edx+1Ch]
.text:00004E5B                 mov     [ebp+var_558], eax
.text:00004E61                 mov     [ebp+var_578], 0
.text:00004E6B                 jmp     short loc_4E7C
.text:00004E6D ; ---------------------------------------------------------------------------
.text:00004E6D
.text:00004E6D loc_4E6D:                               ; CODE XREF: _winctrl_layout:loc_4EA1j
.text:00004E6D                 mov     ecx, [ebp+var_578]
.text:00004E73                 add     ecx, 1
.text:00004E76                 mov     [ebp+var_578], ecx
.text:00004E7C
.text:00004E7C loc_4E7C:                               ; CODE XREF: _winctrl_layout+4BFj
.text:00004E7C                 mov     edx, [ebp+var_578]
.text:00004E82                 cmp     edx, [ebp+var_4EC]
.text:00004E88                 jge     short loc_4EA3
.text:00004E8A                 mov     eax, [ebp+var_578]
.text:00004E90                 mov     ecx, [ebp+eax*4+var_4E4]
.text:00004E97                 cmp     ecx, [ebp+var_558]
.text:00004E9D                 jnz     short loc_4EA1
.text:00004E9F                 jmp     short loc_4EA3
.text:00004EA1 ; ---------------------------------------------------------------------------
.text:00004EA1
.text:00004EA1 loc_4EA1:                               ; CODE XREF: _winctrl_layout+4F1j
.text:00004EA1                 jmp     short loc_4E6D
.text:00004EA3 ; ---------------------------------------------------------------------------
.text:00004EA3
.text:00004EA3 loc_4EA3:                               ; CODE XREF: _winctrl_layout+4DCj
.text:00004EA3                                         ; _winctrl_layout+4F3j
.text:00004EA3                 mov     edx, [ebp+var_578]
.text:00004EA9                 cmp     edx, [ebp+var_4EC]
.text:00004EAF                 jl      short loc_4EC8
.text:00004EB1                 push    598h            ; Line
.text:00004EB6                 push    offset $SG89562 ; "..\\..\\winctrls.c"
.text:00004EBB                 push    offset $SG89563 ; "i < ntabdelays"
.text:00004EC0                 call    __wassert
.text:00004EC5 ; ---------------------------------------------------------------------------
.text:00004EC5                 add     esp, 0Ch
.text:00004EC8
.text:00004EC8 loc_4EC8:                               ; CODE XREF: _winctrl_layout+503j
.text:00004EC8                 mov     ecx, [ebp+var_578]
.text:00004ECE                 imul    ecx, 24h
.text:00004ED1                 lea     esi, [ebp+ecx+var_49C]
.text:00004ED8                 mov     ecx, 9
.text:00004EDD                 lea     edi, [ebp+var_514]
.text:00004EE3                 rep movsd
.text:00004EE5                 mov     [ebp+var_258], 0FFFFFFFFh
.text:00004EEF                 mov     edx, [ebp+var_258]
.text:00004EF5                 mov     [ebp+var_254], edx
.text:00004EFB                 jmp     loc_506C
.text:00004F00 ; ---------------------------------------------------------------------------
.text:00004F00
.text:00004F00 loc_4F00:                               ; CODE XREF: _winctrl_layout+47Dj
.text:00004F00                 mov     eax, [ebp+var_558]
.text:00004F06                 mov     ecx, [eax+0Ch]
.text:00004F09                 and     ecx, 0FFFFh
.text:00004F0F                 mov     [ebp+var_254], ecx
.text:00004F15                 mov     edx, [ebp+var_558]
.text:00004F1B                 mov     eax, [edx+0Ch]
.text:00004F1E                 sar     eax, 10h
.text:00004F21                 and     eax, 0FFFFh
.text:00004F26                 add     eax, 1
.text:00004F29                 mov     [ebp+var_258], eax
.text:00004F2F                 mov     ecx, [ebp+var_254]
.text:00004F35                 imul    ecx, 24h
.text:00004F38                 lea     esi, [ebp+ecx+var_248]
.text:00004F3F                 mov     ecx, 9
.text:00004F44                 lea     edi, [ebp+var_514]
.text:00004F4A                 rep movsd
.text:00004F4C                 mov     edx, [ebp+var_258]
.text:00004F52                 mov     eax, [ebp+var_254]
.text:00004F58                 lea     ecx, [eax+edx-1]
.text:00004F5C                 imul    ecx, 24h
.text:00004F5F                 mov     edx, [ebp+var_258]
.text:00004F65                 mov     eax, [ebp+var_254]
.text:00004F6B                 lea     edx, [eax+edx-1]
.text:00004F6F                 imul    edx, 24h
.text:00004F72                 mov     eax, [ebp+var_254]
.text:00004F78                 imul    eax, 24h
.text:00004F7B                 mov     edx, [ebp+edx+var_234]
.text:00004F82                 sub     edx, [ebp+eax+var_234]
.text:00004F89                 add     edx, [ebp+ecx+var_238]
.text:00004F90                 mov     [ebp+var_504], edx
.text:00004F96                 mov     eax, [ebp+var_254]
.text:00004F9C                 mov     [ebp+var_57C], eax
.text:00004FA2                 jmp     short loc_4FB3
.text:00004FA4 ; ---------------------------------------------------------------------------
.text:00004FA4
.text:00004FA4 loc_4FA4:                               ; CODE XREF: _winctrl_layout:loc_4FF5j
.text:00004FA4                 mov     ecx, [ebp+var_57C]
.text:00004FAA                 add     ecx, 1
.text:00004FAD                 mov     [ebp+var_57C], ecx
.text:00004FB3
.text:00004FB3 loc_4FB3:                               ; CODE XREF: _winctrl_layout+5F6j
.text:00004FB3                 mov     edx, [ebp+var_254]
.text:00004FB9                 add     edx, [ebp+var_258]
.text:00004FBF                 cmp     [ebp+var_57C], edx
.text:00004FC5                 jge     short loc_4FF7
.text:00004FC7                 mov     eax, [ebp+var_57C]
.text:00004FCD                 imul    eax, 24h
.text:00004FD0                 mov     ecx, [ebp+var_508]
.text:00004FD6                 cmp     ecx, [ebp+eax+var_23C]
.text:00004FDD                 jge     short loc_4FF5
.text:00004FDF                 mov     edx, [ebp+var_57C]
.text:00004FE5                 imul    edx, 24h
.text:00004FE8                 mov     eax, [ebp+edx+var_23C]
.text:00004FEF                 mov     [ebp+var_508], eax
.text:00004FF5
.text:00004FF5 loc_4FF5:                               ; CODE XREF: _winctrl_layout+631j
.text:00004FF5                 jmp     short loc_4FA4
.text:00004FF7 ; ---------------------------------------------------------------------------
.text:00004FF7
.text:00004FF7 loc_4FF7:                               ; CODE XREF: _winctrl_layout+619j
.text:00004FF7                 mov     ecx, [ebp+var_558]
.text:00004FFD                 cmp     dword ptr [ecx+8], 0
.text:00005001                 jz      short loc_506C
.text:00005003                 cmp     [ebp+var_4EC], 10h
.text:0000500A                 jb      short loc_5023
.text:0000500C                 push    5B7h            ; Line
.text:00005011                 push    offset $SG89572 ; "..\\..\\winctrls.c"
.text:00005016                 push    offset $SG89573 ; "ntabdelays < lenof(tabdelays)"
.text:0000501B                 call    __wassert
.text:00005020 ; ---------------------------------------------------------------------------
.text:00005020                 add     esp, 0Ch
.text:00005023
.text:00005023 loc_5023:                               ; CODE XREF: _winctrl_layout+65Ej
.text:00005023                 mov     eax, [ebp+var_4EC]
.text:00005029                 imul    eax, 24h
.text:0000502C                 lea     edi, [ebp+eax+var_49C]
.text:00005033                 mov     ecx, 9
.text:00005038                 lea     esi, [ebp+var_514]
.text:0000503E                 rep movsd
.text:00005040                 mov     ecx, [ebp+var_4EC]
.text:00005046                 mov     edx, [ebp+var_558]
.text:0000504C                 mov     [ebp+ecx*4+var_4E4], edx
.text:00005053                 mov     eax, [ebp+var_4EC]
.text:00005059                 add     eax, 1
.text:0000505C                 mov     [ebp+var_4EC], eax
.text:00005062                 mov     [ebp+var_514], 0
.text:0000506C
.text:0000506C loc_506C:                               ; CODE XREF: _winctrl_layout+46Fj
.text:0000506C                                         ; _winctrl_layout+54Fj ...
.text:0000506C                 mov     [ebp+var_54C], 0
.text:00005076                 push    10h             ; Size
.text:00005078                 push    0               ; Val
.text:0000507A                 lea     ecx, [ebp+Dst]
.text:00005080                 push    ecx             ; Dst
.text:00005081                 call    _memset
.text:00005086                 add     esp, 0Ch
.text:00005089                 mov     [ebp+var_534], 0
.text:00005093                 mov     edx, [ebp+hMenu]
.text:00005099                 mov     [ebp+wParam], edx
.text:0000509F                 mov     eax, [ebp+var_558]
.text:000050A5                 mov     ecx, [eax]
.text:000050A7                 mov     [ebp+var_5B4], ecx
.text:000050AD                 cmp     [ebp+var_5B4], 8 ; switch 9 cases
.text:000050B4                 ja      $LN13_1         ; jumptable 000050C0 default case
.text:000050BA                 mov     edx, [ebp+var_5B4]
.text:000050C0                 jmp     ds:$LN99[edx*4] ; switch jump
.text:000050C7 ; ---------------------------------------------------------------------------
.text:000050C7
.text:000050C7 $LN45:                                  ; CODE XREF: _winctrl_layout+714j
.text:000050C7                                         ; DATA XREF: .text:$LN99o
.text:000050C7                 mov     [ebp+var_548], 1 ; jumptable 000050C0 case 0
.text:000050D1                 lea     eax, [ebp+var_58C]
.text:000050D7                 push    eax             ; int
.text:000050D8                 mov     ecx, [ebp+var_558]
.text:000050DE                 mov     edx, [ecx+4]
.text:000050E1                 push    edx             ; Str
.text:000050E2                 mov     eax, [ebp+arg_8]
.text:000050E5                 mov     ecx, [eax]
.text:000050E7                 push    ecx             ; hWnd
.text:000050E8                 lea     edx, [ebp+var_514]
.text:000050EE                 push    edx             ; int
.text:000050EF                 call    _staticwrap
.text:000050F4                 add     esp, 10h
.text:000050F7                 mov     [ebp+Str], eax
.text:000050FD                 push    0               ; char
.text:000050FF                 mov     eax, [ebp+Str]
.text:00005105                 push    eax             ; Str
.text:00005106                 call    _shortcut_escape
.text:0000510B                 add     esp, 8
.text:0000510E                 mov     [ebp+var_584], eax
.text:00005114                 mov     ecx, [ebp+hMenu]
.text:0000511A                 push    ecx             ; hMenu
.text:0000511B                 mov     edx, [ebp+var_58C]
.text:00005121                 push    edx             ; int
.text:00005122                 mov     eax, [ebp+var_584]
.text:00005128                 push    eax             ; lpWindowName
.text:00005129                 lea     ecx, [ebp+var_514]
.text:0000512F                 push    ecx             ; int
.text:00005130                 call    _statictext
.text:00005135                 add     esp, 10h
.text:00005138                 mov     edx, [ebp+var_584]
.text:0000513E                 push    edx
.text:0000513F                 call    _safefree
.text:00005144                 add     esp, 4
.text:00005147                 mov     eax, [ebp+Str]
.text:0000514D                 push    eax
.text:0000514E                 call    _safefree
.text:00005153                 add     esp, 4
.text:00005156                 jmp     loc_5A9F
.text:0000515B ; ---------------------------------------------------------------------------
.text:0000515B
.text:0000515B $LN44:                                  ; CODE XREF: _winctrl_layout+714j
.text:0000515B                                         ; DATA XREF: .text:$LN99o
.text:0000515B                 mov     [ebp+var_548], 2 ; jumptable 000050C0 case 1
.text:00005165                 mov     ecx, [ebp+var_558]
.text:0000516B                 movzx   edx, byte ptr [ecx+1Ch]
.text:0000516F                 push    edx             ; char
.text:00005170                 mov     eax, [ebp+var_558]
.text:00005176                 mov     ecx, [eax+4]
.text:00005179                 push    ecx             ; Str
.text:0000517A                 call    _shortcut_escape
.text:0000517F                 add     esp, 8
.text:00005182                 mov     [ebp+lpWindowName], eax
.text:00005188                 mov     edx, [ebp+var_534]
.text:0000518E                 mov     eax, [ebp+var_558]
.text:00005194                 mov     cl, [eax+1Ch]
.text:00005197                 mov     [ebp+edx+Dst], cl
.text:0000519E                 mov     edx, [ebp+var_534]
.text:000051A4                 add     edx, 1
.text:000051A7                 mov     [ebp+var_534], edx
.text:000051AD                 mov     eax, [ebp+var_558]
.text:000051B3                 cmp     dword ptr [eax+20h], 64h ; 'd'
.text:000051B7                 jnz     short loc_5224
.text:000051B9                 mov     ecx, [ebp+var_558]
.text:000051BF                 cmp     dword ptr [ecx+28h], 0
.text:000051C3                 jz      short loc_51EE
.text:000051C5                 mov     edx, [ebp+hMenu]
.text:000051CB                 add     edx, 1
.text:000051CE                 push    edx             ; HMENU
.text:000051CF                 mov     eax, [ebp+hMenu]
.text:000051D5                 push    eax             ; hMenu
.text:000051D6                 mov     ecx, [ebp+lpWindowName]
.text:000051DC                 push    ecx             ; lpWindowName
.text:000051DD                 lea     edx, [ebp+var_514]
.text:000051E3                 push    edx             ; int
.text:000051E4                 call    _combobox
.text:000051E9                 add     esp, 10h
.text:000051EC                 jmp     short loc_521F
.text:000051EE ; ---------------------------------------------------------------------------
.text:000051EE
.text:000051EE loc_51EE:                               ; CODE XREF: _winctrl_layout+817j
.text:000051EE                 mov     eax, [ebp+hMenu]
.text:000051F4                 add     eax, 1
.text:000051F7                 push    eax             ; HMENU
.text:000051F8                 mov     ecx, [ebp+hMenu]
.text:000051FE                 push    ecx             ; hMenu
.text:000051FF                 mov     edx, [ebp+lpWindowName]
.text:00005205                 push    edx             ; lpWindowName
.text:00005206                 mov     eax, [ebp+var_558]
.text:0000520C                 mov     ecx, [eax+24h]
.text:0000520F                 push    ecx             ; int
.text:00005210                 lea     edx, [ebp+var_514]
.text:00005216                 push    edx             ; int
.text:00005217                 call    _editboxfw
.text:0000521C                 add     esp, 14h
.text:0000521F
.text:0000521F loc_521F:                               ; CODE XREF: _winctrl_layout+840j
.text:0000521F                 jmp     loc_52C0
.text:00005224 ; ---------------------------------------------------------------------------
.text:00005224
.text:00005224 loc_5224:                               ; CODE XREF: _winctrl_layout+80Bj
.text:00005224                 mov     eax, [ebp+var_558]
.text:0000522A                 cmp     dword ptr [eax+28h], 0
.text:0000522E                 jz      short loc_5263
.text:00005230                 mov     ecx, [ebp+var_558]
.text:00005236                 mov     edx, [ecx+20h]
.text:00005239                 push    edx             ; int
.text:0000523A                 mov     eax, [ebp+hMenu]
.text:00005240                 add     eax, 1
.text:00005243                 push    eax             ; HMENU
.text:00005244                 mov     ecx, [ebp+hMenu]
.text:0000524A                 push    ecx             ; hMenu
.text:0000524B                 mov     edx, [ebp+lpWindowName]
.text:00005251                 push    edx             ; lpWindowName
.text:00005252                 lea     eax, [ebp+var_514]
.text:00005258                 push    eax             ; int
.text:00005259                 call    _staticcombo
.text:0000525E                 add     esp, 14h
.text:00005261                 jmp     short loc_52C0
.text:00005263 ; ---------------------------------------------------------------------------
.text:00005263
.text:00005263 loc_5263:                               ; CODE XREF: _winctrl_layout+882j
.text:00005263                 mov     ecx, [ebp+var_558]
.text:00005269                 cmp     dword ptr [ecx+24h], 0
.text:0000526D                 jz      short loc_527B
.text:0000526F                 mov     [ebp+var_5B8], offset _staticpassedit
.text:00005279                 jmp     short loc_5285
.text:0000527B ; ---------------------------------------------------------------------------
.text:0000527B
.text:0000527B loc_527B:                               ; CODE XREF: _winctrl_layout+8C1j
.text:0000527B                 mov     [ebp+var_5B8], offset _staticedit
.text:00005285
.text:00005285 loc_5285:                               ; CODE XREF: _winctrl_layout+8CDj
.text:00005285                 mov     esi, esp
.text:00005287                 mov     edx, [ebp+var_558]
.text:0000528D                 mov     eax, [edx+20h]
.text:00005290                 push    eax
.text:00005291                 mov     ecx, [ebp+hMenu]
.text:00005297                 add     ecx, 1
.text:0000529A                 push    ecx
.text:0000529B                 mov     edx, [ebp+hMenu]
.text:000052A1                 push    edx
.text:000052A2                 mov     eax, [ebp+lpWindowName]
.text:000052A8                 push    eax
.text:000052A9                 lea     ecx, [ebp+var_514]
.text:000052AF                 push    ecx
.text:000052B0                 call    [ebp+var_5B8]
.text:000052B6                 add     esp, 14h
.text:000052B9                 cmp     esi, esp
.text:000052BB                 call    __RTC_CheckEsp
.text:000052C0
.text:000052C0 loc_52C0:                               ; CODE XREF: _winctrl_layout:loc_521Fj
.text:000052C0                                         ; _winctrl_layout+8B5j
.text:000052C0                 mov     edx, [ebp+lpWindowName]
.text:000052C6                 push    edx
.text:000052C7                 call    _safefree
.text:000052CC                 add     esp, 4
.text:000052CF                 jmp     loc_5A9F
.text:000052D4 ; ---------------------------------------------------------------------------
.text:000052D4
.text:000052D4 $LN37:                                  ; CODE XREF: _winctrl_layout+714j
.text:000052D4                                         ; DATA XREF: .text:$LN99o
.text:000052D4                 mov     eax, [ebp+var_558] ; jumptable 000050C0 case 2
.text:000052DA                 mov     ecx, [eax+24h]
.text:000052DD                 add     ecx, 1
.text:000052E0                 mov     [ebp+var_548], ecx
.text:000052E6                 mov     edx, [ebp+var_558]
.text:000052EC                 movzx   eax, byte ptr [edx+1Ch]
.text:000052F0                 push    eax             ; char
.text:000052F1                 mov     ecx, [ebp+var_558]
.text:000052F7                 mov     edx, [ecx+4]
.text:000052FA                 push    edx             ; Str
.text:000052FB                 call    _shortcut_escape
.text:00005300                 add     esp, 8
.text:00005303                 mov     [ebp+lpWindowName], eax
.text:00005309                 mov     eax, [ebp+var_534]
.text:0000530F                 mov     ecx, [ebp+var_558]
.text:00005315                 mov     dl, [ecx+1Ch]
.text:00005318                 mov     [ebp+eax+Dst], dl
.text:0000531F                 mov     eax, [ebp+var_534]
.text:00005325                 add     eax, 1
.text:00005328                 mov     [ebp+var_534], eax
.text:0000532E                 push    8
.text:00005330                 mov     ecx, [ebp+var_558]
.text:00005336                 mov     edx, [ecx+24h]
.text:00005339                 push    edx
.text:0000533A                 call    _safemalloc
.text:0000533F                 add     esp, 8
.text:00005342                 mov     [ebp+var_594], eax
.text:00005348                 mov     [ebp+var_598], 0
.text:00005352                 jmp     short loc_5363
.text:00005354 ; ---------------------------------------------------------------------------
.text:00005354
.text:00005354 loc_5354:                               ; CODE XREF: _winctrl_layout:loc_5455j
.text:00005354                 mov     eax, [ebp+var_598]
.text:0000535A                 add     eax, 1
.text:0000535D                 mov     [ebp+var_598], eax
.text:00005363
.text:00005363 loc_5363:                               ; CODE XREF: _winctrl_layout+9A6j
.text:00005363                 mov     ecx, [ebp+var_558]
.text:00005369                 mov     edx, [ebp+var_598]
.text:0000536F                 cmp     edx, [ecx+24h]
.text:00005372                 jge     loc_545A
.text:00005378                 mov     eax, [ebp+var_558]
.text:0000537E                 cmp     dword ptr [eax+2Ch], 0
.text:00005382                 jz      short loc_539F
.text:00005384                 mov     ecx, [ebp+var_558]
.text:0000538A                 mov     edx, [ecx+2Ch]
.text:0000538D                 mov     eax, [ebp+var_598]
.text:00005393                 movsx   ecx, byte ptr [edx+eax]
.text:00005397                 mov     [ebp+var_5BC], ecx
.text:0000539D                 jmp     short loc_53A9
.text:0000539F ; ---------------------------------------------------------------------------
.text:0000539F
.text:0000539F loc_539F:                               ; CODE XREF: _winctrl_layout+9D6j
.text:0000539F                 mov     [ebp+var_5BC], 0
.text:000053A9
.text:000053A9 loc_53A9:                               ; CODE XREF: _winctrl_layout+9F1j
.text:000053A9                 movzx   edx, byte ptr [ebp+var_5BC]
.text:000053B0                 push    edx             ; char
.text:000053B1                 mov     eax, [ebp+var_558]
.text:000053B7                 mov     ecx, [eax+28h]
.text:000053BA                 mov     edx, [ebp+var_598]
.text:000053C0                 mov     eax, [ecx+edx*4]
.text:000053C3                 push    eax             ; Str
.text:000053C4                 call    _shortcut_escape
.text:000053C9                 add     esp, 8
.text:000053CC                 mov     ecx, [ebp+var_598]
.text:000053D2                 mov     edx, [ebp+var_594]
.text:000053D8                 mov     [edx+ecx*8], eax
.text:000053DB                 mov     eax, [ebp+var_598]
.text:000053E1                 mov     ecx, [ebp+hMenu]
.text:000053E7                 lea     edx, [ecx+eax+1]
.text:000053EB                 mov     eax, [ebp+var_598]
.text:000053F1                 mov     ecx, [ebp+var_594]
.text:000053F7                 mov     [ecx+eax*8+4], edx
.text:000053FB                 mov     edx, [ebp+var_558]
.text:00005401                 cmp     dword ptr [edx+2Ch], 0
.text:00005405                 jz      short loc_5455
.text:00005407                 cmp     [ebp+var_534], 10h
.text:0000540E                 jl      short loc_5427
.text:00005410                 push    607h            ; Line
.text:00005415                 push    offset $SG89602 ; "..\\..\\winctrls.c"
.text:0000541A                 push    offset $SG89603 ; "nshortcuts < MAX_SHORTCUTS_PER_CTRL"
.text:0000541F                 call    __wassert
.text:00005424 ; ---------------------------------------------------------------------------
.text:00005424                 add     esp, 0Ch
.text:00005427
.text:00005427 loc_5427:                               ; CODE XREF: _winctrl_layout+A62j
.text:00005427                 mov     ecx, [ebp+var_558]
.text:0000542D                 mov     edx, [ecx+2Ch]
.text:00005430                 mov     eax, [ebp+var_534]
.text:00005436                 mov     ecx, [ebp+var_598]
.text:0000543C                 mov     dl, [edx+ecx]
.text:0000543F                 mov     [ebp+eax+Dst], dl
.text:00005446                 mov     eax, [ebp+var_534]
.text:0000544C                 add     eax, 1
.text:0000544F                 mov     [ebp+var_534], eax
.text:00005455
.text:00005455 loc_5455:                               ; CODE XREF: _winctrl_layout+A59j
.text:00005455                 jmp     loc_5354
.text:0000545A ; ---------------------------------------------------------------------------
.text:0000545A
.text:0000545A loc_545A:                               ; CODE XREF: _winctrl_layout+9C6j
.text:0000545A                 mov     ecx, [ebp+var_558]
.text:00005460                 mov     edx, [ecx+24h]
.text:00005463                 push    edx             ; int
.text:00005464                 mov     eax, [ebp+var_594]
.text:0000546A                 push    eax             ; int
.text:0000546B                 mov     ecx, [ebp+var_558]
.text:00005471                 mov     edx, [ecx+20h]
.text:00005474                 push    edx             ; int
.text:00005475                 mov     eax, [ebp+hMenu]
.text:0000547B                 push    eax             ; hMenu
.text:0000547C                 mov     ecx, [ebp+lpWindowName]
.text:00005482                 push    ecx             ; lpWindowName
.text:00005483                 lea     edx, [ebp+var_514]
.text:00005489                 push    edx             ; int
.text:0000548A                 call    _radioline_common
.text:0000548F                 add     esp, 18h
.text:00005492                 mov     [ebp+var_598], 0
.text:0000549C                 jmp     short loc_54AD
.text:0000549E ; ---------------------------------------------------------------------------
.text:0000549E
.text:0000549E loc_549E:                               ; CODE XREF: _winctrl_layout+B2Aj
.text:0000549E                 mov     eax, [ebp+var_598]
.text:000054A4                 add     eax, 1
.text:000054A7                 mov     [ebp+var_598], eax
.text:000054AD
.text:000054AD loc_54AD:                               ; CODE XREF: _winctrl_layout+AF0j
.text:000054AD                 mov     ecx, [ebp+var_558]
.text:000054B3                 mov     edx, [ebp+var_598]
.text:000054B9                 cmp     edx, [ecx+24h]
.text:000054BC                 jge     short loc_54D8
.text:000054BE                 mov     eax, [ebp+var_598]
.text:000054C4                 mov     ecx, [ebp+var_594]
.text:000054CA                 mov     edx, [ecx+eax*8]
.text:000054CD                 push    edx
.text:000054CE                 call    _safefree
.text:000054D3                 add     esp, 4
.text:000054D6                 jmp     short loc_549E
.text:000054D8 ; ---------------------------------------------------------------------------
.text:000054D8
.text:000054D8 loc_54D8:                               ; CODE XREF: _winctrl_layout+B10j
.text:000054D8                 mov     eax, [ebp+var_594]
.text:000054DE                 push    eax
.text:000054DF                 call    _safefree
.text:000054E4                 add     esp, 4
.text:000054E7                 mov     ecx, [ebp+lpWindowName]
.text:000054ED                 push    ecx
.text:000054EE                 call    _safefree
.text:000054F3                 add     esp, 4
.text:000054F6                 jmp     loc_5A9F
.text:000054FB ; ---------------------------------------------------------------------------
.text:000054FB
.text:000054FB $LN29:                                  ; CODE XREF: _winctrl_layout+714j
.text:000054FB                                         ; DATA XREF: .text:$LN99o
.text:000054FB                 mov     [ebp+var_548], 1 ; jumptable 000050C0 case 3
.text:00005505                 mov     edx, [ebp+var_558]
.text:0000550B                 movzx   eax, byte ptr [edx+1Ch]
.text:0000550F                 push    eax             ; char
.text:00005510                 mov     ecx, [ebp+var_558]
.text:00005516                 mov     edx, [ecx+4]
.text:00005519                 push    edx             ; Str
.text:0000551A                 call    _shortcut_escape
.text:0000551F                 add     esp, 8
.text:00005522                 mov     [ebp+lpWindowName], eax
.text:00005528                 mov     eax, [ebp+var_534]
.text:0000552E                 mov     ecx, [ebp+var_558]
.text:00005534                 mov     dl, [ecx+1Ch]
.text:00005537                 mov     [ebp+eax+Dst], dl
.text:0000553E                 mov     eax, [ebp+var_534]
.text:00005544                 add     eax, 1
.text:00005547                 mov     [ebp+var_534], eax
.text:0000554D                 mov     ecx, [ebp+hMenu]
.text:00005553                 push    ecx             ; hMenu
.text:00005554                 mov     edx, [ebp+lpWindowName]
.text:0000555A                 push    edx             ; lpWindowName
.text:0000555B                 lea     eax, [ebp+var_514]
.text:00005561                 push    eax             ; int
.text:00005562                 call    _checkbox
.text:00005567                 add     esp, 0Ch
.text:0000556A                 mov     ecx, [ebp+lpWindowName]
.text:00005570                 push    ecx
.text:00005571                 call    _safefree
.text:00005576                 add     esp, 4
.text:00005579                 jmp     loc_5A9F
.text:0000557E ; ---------------------------------------------------------------------------
.text:0000557E
.text:0000557E $LN28:                                  ; CODE XREF: _winctrl_layout+714j
.text:0000557E                                         ; DATA XREF: .text:$LN99o
.text:0000557E                 mov     edx, [ebp+var_558] ; jumptable 000050C0 case 4
.text:00005584                 movzx   eax, byte ptr [edx+1Ch]
.text:00005588                 push    eax             ; char
.text:00005589                 mov     ecx, [ebp+var_558]
.text:0000558F                 mov     edx, [ecx+4]
.text:00005592                 push    edx             ; Str
.text:00005593                 call    _shortcut_escape
.text:00005598                 add     esp, 8
.text:0000559B                 mov     [ebp+lpWindowName], eax
.text:000055A1                 mov     eax, [ebp+var_534]
.text:000055A7                 mov     ecx, [ebp+var_558]
.text:000055AD                 mov     dl, [ecx+1Ch]
.text:000055B0                 mov     [ebp+eax+Dst], dl
.text:000055B7                 mov     eax, [ebp+var_534]
.text:000055BD                 add     eax, 1
.text:000055C0                 mov     [ebp+var_534], eax
.text:000055C6                 mov     ecx, [ebp+var_558]
.text:000055CC                 cmp     dword ptr [ecx+24h], 0
.text:000055D0                 jz      short loc_55DC
.text:000055D2                 mov     [ebp+wParam], 2
.text:000055DC
.text:000055DC loc_55DC:                               ; CODE XREF: _winctrl_layout+C24j
.text:000055DC                 mov     [ebp+var_548], 1
.text:000055E6                 mov     edx, [ebp+var_558]
.text:000055EC                 mov     eax, [edx+20h]
.text:000055EF                 push    eax             ; int
.text:000055F0                 mov     ecx, [ebp+wParam]
.text:000055F6                 push    ecx             ; wParam
.text:000055F7                 mov     edx, [ebp+lpWindowName]
.text:000055FD                 push    edx             ; lpWindowName
.text:000055FE                 lea     eax, [ebp+var_514]
.text:00005604                 push    eax             ; int
.text:00005605                 call    _button
.text:0000560A                 add     esp, 10h
.text:0000560D                 mov     ecx, [ebp+lpWindowName]
.text:00005613                 push    ecx
.text:00005614                 call    _safefree
.text:00005619                 add     esp, 4
.text:0000561C                 jmp     loc_5A9F
.text:00005621 ; ---------------------------------------------------------------------------
.text:00005621
.text:00005621 $LN26:                                  ; CODE XREF: _winctrl_layout+714j
.text:00005621                                         ; DATA XREF: .text:$LN99o
.text:00005621                 mov     [ebp+var_548], 2 ; jumptable 000050C0 case 5
.text:0000562B                 mov     edx, [ebp+var_558]
.text:00005631                 movzx   eax, byte ptr [edx+1Ch]
.text:00005635                 push    eax             ; char
.text:00005636                 mov     ecx, [ebp+var_558]
.text:0000563C                 mov     edx, [ecx+4]
.text:0000563F                 push    edx             ; Str
.text:00005640                 call    _shortcut_escape
.text:00005645                 add     esp, 8
.text:00005648                 mov     [ebp+lpWindowName], eax
.text:0000564E                 mov     eax, [ebp+var_534]
.text:00005654                 mov     ecx, [ebp+var_558]
.text:0000565A                 mov     dl, [ecx+1Ch]
.text:0000565D                 mov     [ebp+eax+Dst], dl
.text:00005664                 mov     eax, [ebp+var_534]
.text:0000566A                 add     eax, 1
.text:0000566D                 mov     [ebp+var_534], eax
.text:00005673                 mov     ecx, [ebp+var_558]
.text:00005679                 cmp     dword ptr [ecx+24h], 0
.text:0000567D                 jz      loc_572A
.text:00005683                 push    18h
.text:00005685                 push    1
.text:00005687                 call    _safemalloc
.text:0000568C                 add     esp, 8
.text:0000568F                 mov     [ebp+var_54C], eax
.text:00005695                 mov     [ebp+var_548], 4
.text:0000569F                 mov     edx, [ebp+hMenu]
.text:000056A5                 add     edx, 3
.text:000056A8                 push    edx             ; HMENU
.text:000056A9                 mov     eax, [ebp+hMenu]
.text:000056AF                 add     eax, 2
.text:000056B2                 push    eax             ; HMENU
.text:000056B3                 mov     ecx, [ebp+hMenu]
.text:000056B9                 add     ecx, 1
.text:000056BC                 push    ecx             ; HMENU
.text:000056BD                 mov     edx, [ebp+hMenu]
.text:000056C3                 push    edx             ; hMenu
.text:000056C4                 mov     eax, [ebp+lpWindowName]
.text:000056CA                 push    eax             ; lpWindowName
.text:000056CB                 mov     ecx, [ebp+var_558]
.text:000056D1                 mov     edx, [ecx+20h]
.text:000056D4                 push    edx             ; int
.text:000056D5                 lea     eax, [ebp+var_514]
.text:000056DB                 push    eax             ; int
.text:000056DC                 mov     ecx, [ebp+var_54C]
.text:000056E2                 push    ecx             ; int
.text:000056E3                 call    _prefslist
.text:000056E8                 add     esp, 20h
.text:000056EB                 mov     edx, [ebp+var_534]
.text:000056F1                 mov     [ebp+edx+Dst], 75h ; 'u'
.text:000056F9                 mov     eax, [ebp+var_534]
.text:000056FF                 add     eax, 1
.text:00005702                 mov     [ebp+var_534], eax
.text:00005708                 mov     ecx, [ebp+var_534]
.text:0000570E                 mov     [ebp+ecx+Dst], 64h ; 'd'
.text:00005716                 mov     edx, [ebp+var_534]
.text:0000571C                 add     edx, 1
.text:0000571F                 mov     [ebp+var_534], edx
.text:00005725                 jmp     loc_57D9
.text:0000572A ; ---------------------------------------------------------------------------
.text:0000572A
.text:0000572A loc_572A:                               ; CODE XREF: _winctrl_layout+CD1j
.text:0000572A                 mov     eax, [ebp+var_558]
.text:00005730                 cmp     dword ptr [eax+20h], 0
.text:00005734                 jnz     short loc_579E
.text:00005736                 mov     ecx, [ebp+var_558]
.text:0000573C                 cmp     dword ptr [ecx+2Ch], 64h ; 'd'
.text:00005740                 jnz     short loc_576B
.text:00005742                 mov     edx, [ebp+hMenu]
.text:00005748                 add     edx, 1
.text:0000574B                 push    edx             ; HMENU
.text:0000574C                 mov     eax, [ebp+hMenu]
.text:00005752                 push    eax             ; hMenu
.text:00005753                 mov     ecx, [ebp+lpWindowName]
.text:00005759                 push    ecx             ; lpWindowName
.text:0000575A                 lea     edx, [ebp+var_514]
.text:00005760                 push    edx             ; int
.text:00005761                 call    _staticddlbig
.text:00005766                 add     esp, 10h
.text:00005769                 jmp     short loc_579C
.text:0000576B ; ---------------------------------------------------------------------------
.text:0000576B
.text:0000576B loc_576B:                               ; CODE XREF: _winctrl_layout+D94j
.text:0000576B                 mov     eax, [ebp+var_558]
.text:00005771                 mov     ecx, [eax+2Ch]
.text:00005774                 push    ecx             ; int
.text:00005775                 mov     edx, [ebp+hMenu]
.text:0000577B                 add     edx, 1
.text:0000577E                 push    edx             ; HMENU
.text:0000577F                 mov     eax, [ebp+hMenu]
.text:00005785                 push    eax             ; hMenu
.text:00005786                 mov     ecx, [ebp+lpWindowName]
.text:0000578C                 push    ecx             ; lpWindowName
.text:0000578D                 lea     edx, [ebp+var_514]
.text:00005793                 push    edx             ; int
.text:00005794                 call    _staticddl
.text:00005799                 add     esp, 14h
.text:0000579C
.text:0000579C loc_579C:                               ; CODE XREF: _winctrl_layout+DBDj
.text:0000579C                 jmp     short loc_57D9
.text:0000579E ; ---------------------------------------------------------------------------
.text:0000579E
.text:0000579E loc_579E:                               ; CODE XREF: _winctrl_layout+D88j
.text:0000579E                 mov     eax, [ebp+var_558]
.text:000057A4                 mov     ecx, [eax+28h]
.text:000057A7                 push    ecx             ; int
.text:000057A8                 mov     edx, [ebp+var_558]
.text:000057AE                 mov     eax, [edx+20h]
.text:000057B1                 push    eax             ; int
.text:000057B2                 mov     ecx, [ebp+hMenu]
.text:000057B8                 add     ecx, 1
.text:000057BB                 push    ecx             ; HMENU
.text:000057BC                 mov     edx, [ebp+hMenu]
.text:000057C2                 push    edx             ; hMenu
.text:000057C3                 mov     eax, [ebp+lpWindowName]
.text:000057C9                 push    eax             ; lpWindowName
.text:000057CA                 lea     ecx, [ebp+var_514]
.text:000057D0                 push    ecx             ; int
.text:000057D1                 call    _listbox
.text:000057D6                 add     esp, 18h
.text:000057D9
.text:000057D9 loc_57D9:                               ; CODE XREF: _winctrl_layout+D79j
.text:000057D9                                         ; _winctrl_layout:loc_579Cj
.text:000057D9                 mov     edx, [ebp+var_558]
.text:000057DF                 cmp     dword ptr [edx+30h], 0
.text:000057E3                 jz      loc_58E0
.text:000057E9                 mov     eax, [ebp+arg_8]
.text:000057EC                 mov     ecx, [ebp+var_558]
.text:000057F2                 mov     edx, [eax+10h]
.text:000057F5                 imul    edx, [ecx+2Ch]
.text:000057F9                 mov     [ebp+var_59C], edx
.text:000057FF                 push    4
.text:00005801                 mov     eax, [ebp+var_558]
.text:00005807                 mov     ecx, [eax+30h]
.text:0000580A                 sub     ecx, 1
.text:0000580D                 push    ecx
.text:0000580E                 call    _safemalloc
.text:00005813                 add     esp, 8
.text:00005816                 mov     [ebp+lParam], eax
.text:0000581C                 mov     [ebp+var_5A8], 0
.text:00005826                 mov     [ebp+var_5A4], 0
.text:00005830                 jmp     short loc_5841
.text:00005832 ; ---------------------------------------------------------------------------
.text:00005832
.text:00005832 loc_5832:                               ; CODE XREF: _winctrl_layout+EEBj
.text:00005832                 mov     edx, [ebp+var_5A4]
.text:00005838                 add     edx, 1
.text:0000583B                 mov     [ebp+var_5A4], edx
.text:00005841
.text:00005841 loc_5841:                               ; CODE XREF: _winctrl_layout+E84j
.text:00005841                 mov     eax, [ebp+var_558]
.text:00005847                 mov     ecx, [eax+30h]
.text:0000584A                 sub     ecx, 1
.text:0000584D                 cmp     [ebp+var_5A4], ecx
.text:00005853                 jge     short loc_5899
.text:00005855                 mov     edx, [ebp+var_558]
.text:0000585B                 mov     eax, [edx+34h]
.text:0000585E                 mov     ecx, [ebp+var_5A4]
.text:00005864                 mov     edx, [ebp+var_5A8]
.text:0000586A                 add     edx, [eax+ecx*4]
.text:0000586D                 mov     [ebp+var_5A8], edx
.text:00005873                 mov     eax, [ebp+var_59C]
.text:00005879                 imul    eax, [ebp+var_5A8]
.text:00005880                 cdq
.text:00005881                 mov     ecx, 2710h
.text:00005886                 idiv    ecx
.text:00005888                 mov     edx, [ebp+var_5A4]
.text:0000588E                 mov     ecx, [ebp+lParam]
.text:00005894                 mov     [ecx+edx*4], eax
.text:00005897                 jmp     short loc_5832
.text:00005899 ; ---------------------------------------------------------------------------
.text:00005899
.text:00005899 loc_5899:                               ; CODE XREF: _winctrl_layout+EA7j
.text:00005899                 mov     esi, esp
.text:0000589B                 mov     edx, [ebp+lParam]
.text:000058A1                 push    edx             ; lParam
.text:000058A2                 mov     eax, [ebp+var_558]
.text:000058A8                 mov     ecx, [eax+30h]
.text:000058AB                 sub     ecx, 1
.text:000058AE                 push    ecx             ; wParam
.text:000058AF                 push    192h            ; Msg
.text:000058B4                 mov     edx, [ebp+hMenu]
.text:000058BA                 add     edx, 1
.text:000058BD                 push    edx             ; nIDDlgItem
.text:000058BE                 mov     eax, [ebp+arg_8]
.text:000058C1                 mov     ecx, [eax]
.text:000058C3                 push    ecx             ; hDlg
.text:000058C4                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000058CA                 cmp     esi, esp
.text:000058CC                 call    __RTC_CheckEsp
.text:000058D1                 mov     edx, [ebp+lParam]
.text:000058D7                 push    edx
.text:000058D8                 call    _safefree
.text:000058DD                 add     esp, 4
.text:000058E0
.text:000058E0 loc_58E0:                               ; CODE XREF: _winctrl_layout+E37j
.text:000058E0                 mov     eax, [ebp+lpWindowName]
.text:000058E6                 push    eax
.text:000058E7                 call    _safefree
.text:000058EC                 add     esp, 4
.text:000058EF                 jmp     loc_5A9F
.text:000058F4 ; ---------------------------------------------------------------------------
.text:000058F4
.text:000058F4 $LN15_2:                                ; CODE XREF: _winctrl_layout+714j
.text:000058F4                                         ; DATA XREF: .text:$LN99o
.text:000058F4                 mov     [ebp+var_548], 3 ; jumptable 000050C0 case 7
.text:000058FE                 mov     ecx, [ebp+var_558]
.text:00005904                 movzx   edx, byte ptr [ecx+1Ch]
.text:00005908                 push    edx             ; char
.text:00005909                 mov     eax, [ebp+var_558]
.text:0000590F                 mov     ecx, [eax+4]
.text:00005912                 push    ecx             ; Str
.text:00005913                 call    _shortcut_escape
.text:00005918                 add     esp, 8
.text:0000591B                 mov     [ebp+lpWindowName], eax
.text:00005921                 mov     edx, [ebp+var_534]
.text:00005927                 mov     eax, [ebp+var_558]
.text:0000592D                 mov     cl, [eax+1Ch]
.text:00005930                 mov     [ebp+edx+Dst], cl
.text:00005937                 mov     edx, [ebp+var_534]
.text:0000593D                 add     edx, 1
.text:00005940                 mov     [ebp+var_534], edx
.text:00005946                 mov     eax, [ebp+hMenu]
.text:0000594C                 add     eax, 2
.text:0000594F                 push    eax             ; HMENU
.text:00005950                 push    offset $SG89631 ; "Bro&wse..."
.text:00005955                 mov     ecx, [ebp+hMenu]
.text:0000595B                 add     ecx, 1
.text:0000595E                 push    ecx             ; HMENU
.text:0000595F                 mov     edx, [ebp+hMenu]
.text:00005965                 push    edx             ; hMenu
.text:00005966                 mov     eax, [ebp+lpWindowName]
.text:0000596C                 push    eax             ; lpWindowName
.text:0000596D                 lea     ecx, [ebp+var_514]
.text:00005973                 push    ecx             ; int
.text:00005974                 call    _editbutton
.text:00005979                 add     esp, 18h
.text:0000597C                 mov     edx, [ebp+var_534]
.text:00005982                 mov     [ebp+edx+Dst], 77h ; 'w'
.text:0000598A                 mov     eax, [ebp+var_534]
.text:00005990                 add     eax, 1
.text:00005993                 mov     [ebp+var_534], eax
.text:00005999                 mov     ecx, [ebp+lpWindowName]
.text:0000599F                 push    ecx
.text:000059A0                 call    _safefree
.text:000059A5                 add     esp, 4
.text:000059A8                 jmp     loc_5A9F
.text:000059AD ; ---------------------------------------------------------------------------
.text:000059AD
.text:000059AD $LN14_3:                                ; CODE XREF: _winctrl_layout+714j
.text:000059AD                                         ; DATA XREF: .text:$LN99o
.text:000059AD                 mov     [ebp+var_548], 3 ; jumptable 000050C0 case 8
.text:000059B7                 mov     edx, [ebp+var_558]
.text:000059BD                 movzx   eax, byte ptr [edx+1Ch]
.text:000059C1                 push    eax             ; char
.text:000059C2                 mov     ecx, [ebp+var_558]
.text:000059C8                 mov     edx, [ecx+4]
.text:000059CB                 push    edx             ; Str
.text:000059CC                 call    _shortcut_escape
.text:000059D1                 add     esp, 8
.text:000059D4                 mov     [ebp+lpWindowName], eax
.text:000059DA                 mov     eax, [ebp+var_534]
.text:000059E0                 mov     ecx, [ebp+var_558]
.text:000059E6                 mov     dl, [ecx+1Ch]
.text:000059E9                 mov     [ebp+eax+Dst], dl
.text:000059F0                 mov     eax, [ebp+var_534]
.text:000059F6                 add     eax, 1
.text:000059F9                 mov     [ebp+var_534], eax
.text:000059FF                 mov     ecx, [ebp+hMenu]
.text:00005A05                 push    ecx             ; hMenu
.text:00005A06                 push    1               ; int
.text:00005A08                 mov     edx, [ebp+lpWindowName]
.text:00005A0E                 push    edx             ; lpWindowName
.text:00005A0F                 lea     eax, [ebp+var_514]
.text:00005A15                 push    eax             ; int
.text:00005A16                 call    _statictext
.text:00005A1B                 add     esp, 10h
.text:00005A1E                 mov     ecx, [ebp+hMenu]
.text:00005A24                 add     ecx, 2
.text:00005A27                 push    ecx             ; HMENU
.text:00005A28                 push    offset $SG89633 ; "Change..."
.text:00005A2D                 mov     edx, [ebp+hMenu]
.text:00005A33                 add     edx, 1
.text:00005A36                 push    edx             ; hMenu
.text:00005A37                 push    offset $SG89634 ; lpWindowName
.text:00005A3C                 lea     eax, [ebp+var_514]
.text:00005A42                 push    eax             ; int
.text:00005A43                 call    _staticbtn
.text:00005A48                 add     esp, 14h
.text:00005A4B                 push    0
.text:00005A4D                 push    0
.text:00005A4F                 push    0
.text:00005A51                 push    offset $SG89635
.text:00005A56                 call    _fontspec_new
.text:00005A5B                 add     esp, 10h
.text:00005A5E                 mov     [ebp+var_54C], eax
.text:00005A64                 mov     ecx, [ebp+lpWindowName]
.text:00005A6A                 push    ecx
.text:00005A6B                 call    _safefree
.text:00005A70                 add     esp, 4
.text:00005A73                 jmp     short loc_5A9F
.text:00005A75 ; ---------------------------------------------------------------------------
.text:00005A75
.text:00005A75 $LN13_1:                                ; CODE XREF: _winctrl_layout+708j
.text:00005A75                                         ; _winctrl_layout+714j
.text:00005A75                                         ; DATA XREF: ...
.text:00005A75                 mov     edx, offset $SG89638 ; jumptable 000050C0 default case
.text:00005A7A                 test    edx, edx
.text:00005A7C                 jz      short loc_5A95
.text:00005A7E                 push    670h            ; Line
.text:00005A83                 push    offset $SG89639 ; "..\\..\\winctrls.c"
.text:00005A88                 push    offset $SG89640 ; "!\"Can't happen\""
.text:00005A8D                 call    __wassert
.text:00005A92 ; ---------------------------------------------------------------------------
.text:00005A92                 add     esp, 0Ch
.text:00005A95
.text:00005A95 loc_5A95:                               ; CODE XREF: _winctrl_layout+10D0j
.text:00005A95                 mov     [ebp+var_548], 0
.text:00005A9F
.text:00005A9F loc_5A9F:                               ; CODE XREF: _winctrl_layout+7AAj
.text:00005A9F                                         ; _winctrl_layout+923j ...
.text:00005A9F                 cmp     [ebp+var_514], 0
.text:00005AA6                 jz      loc_5B5C
.text:00005AAC                 push    20h ; ' '
.text:00005AAE                 push    1
.text:00005AB0                 call    _safemalloc
.text:00005AB5                 add     esp, 8
.text:00005AB8                 mov     [ebp+var_5AC], eax
.text:00005ABE                 mov     ecx, [ebp+var_5AC]
.text:00005AC4                 mov     edx, [ebp+var_558]
.text:00005ACA                 mov     [ecx], edx
.text:00005ACC                 mov     eax, [ebp+var_5AC]
.text:00005AD2                 mov     ecx, [ebp+wParam]
.text:00005AD8                 mov     [eax+4], ecx
.text:00005ADB                 mov     edx, [ebp+var_5AC]
.text:00005AE1                 mov     eax, [ebp+var_548]
.text:00005AE7                 mov     [edx+8], eax
.text:00005AEA                 mov     ecx, [ebp+var_5AC]
.text:00005AF0                 mov     edx, [ebp+var_54C]
.text:00005AF6                 mov     [ecx+1Ch], edx
.text:00005AF9                 push    10h             ; Size
.text:00005AFB                 lea     eax, [ebp+Dst]
.text:00005B01                 push    eax             ; Src
.text:00005B02                 mov     ecx, [ebp+var_5AC]
.text:00005B08                 add     ecx, 0Ch
.text:00005B0B                 push    ecx             ; Dst
.text:00005B0C                 call    _memcpy
.text:00005B11                 add     esp, 0Ch
.text:00005B14                 mov     edx, [ebp+var_5AC]
.text:00005B1A                 push    edx
.text:00005B1B                 mov     eax, [ebp+arg_4]
.text:00005B1E                 push    eax
.text:00005B1F                 call    _winctrl_add
.text:00005B24                 add     esp, 8
.text:00005B27                 mov     ecx, [ebp+var_5AC]
.text:00005B2D                 push    ecx
.text:00005B2E                 mov     edx, [ebp+arg_0]
.text:00005B31                 push    edx
.text:00005B32                 call    _winctrl_add_shortcuts
.text:00005B37                 add     esp, 8
.text:00005B3A                 mov     eax, [ebp+wParam]
.text:00005B40                 cmp     eax, [ebp+hMenu]
.text:00005B46                 jnz     short loc_5B5A
.text:00005B48                 mov     ecx, [ebp+hMenu]
.text:00005B4E                 add     ecx, [ebp+var_548]
.text:00005B54                 mov     [ebp+hMenu], ecx
.text:00005B5A
.text:00005B5A loc_5B5A:                               ; CODE XREF: _winctrl_layout+119Aj
.text:00005B5A                 jmp     short loc_5B6B
.text:00005B5C ; ---------------------------------------------------------------------------
.text:00005B5C
.text:00005B5C loc_5B5C:                               ; CODE XREF: _winctrl_layout+10FAj
.text:00005B5C                 mov     edx, [ebp+var_54C]
.text:00005B62                 push    edx
.text:00005B63                 call    _safefree
.text:00005B68                 add     esp, 4
.text:00005B6B
.text:00005B6B loc_5B6B:                               ; CODE XREF: _winctrl_layout:loc_5B5Aj
.text:00005B6B                 cmp     [ebp+var_254], 0
.text:00005B72                 jl      short loc_5BBD
.text:00005B74                 mov     eax, [ebp+var_254]
.text:00005B7A                 mov     [ebp+var_5B0], eax
.text:00005B80                 jmp     short loc_5B91
.text:00005B82 ; ---------------------------------------------------------------------------
.text:00005B82
.text:00005B82 loc_5B82:                               ; CODE XREF: _winctrl_layout+120Fj
.text:00005B82                 mov     ecx, [ebp+var_5B0]
.text:00005B88                 add     ecx, 1
.text:00005B8B                 mov     [ebp+var_5B0], ecx
.text:00005B91
.text:00005B91 loc_5B91:                               ; CODE XREF: _winctrl_layout+11D4j
.text:00005B91                 mov     edx, [ebp+var_254]
.text:00005B97                 add     edx, [ebp+var_258]
.text:00005B9D                 cmp     [ebp+var_5B0], edx
.text:00005BA3                 jge     short loc_5BBD
.text:00005BA5                 mov     eax, [ebp+var_5B0]
.text:00005BAB                 imul    eax, 24h
.text:00005BAE                 mov     ecx, [ebp+var_508]
.text:00005BB4                 mov     [ebp+eax+var_23C], ecx
.text:00005BBB                 jmp     short loc_5B82
.text:00005BBD ; ---------------------------------------------------------------------------
.text:00005BBD
.text:00005BBD loc_5BBD:                               ; CODE XREF: _winctrl_layout+11C6j
.text:00005BBD                                         ; _winctrl_layout+11F7j
.text:00005BBD                 jmp     loc_4B7C
.text:00005BC2 ; ---------------------------------------------------------------------------
.text:00005BC2
.text:00005BC2 loc_5BC2:                               ; CODE XREF: _winctrl_layout+1EBj
.text:00005BC2                 mov     [ebp+var_53C], 0
.text:00005BCC                 jmp     short loc_5BDD
.text:00005BCE ; ---------------------------------------------------------------------------
.text:00005BCE
.text:00005BCE loc_5BCE:                               ; CODE XREF: _winctrl_layout:loc_5C19j
.text:00005BCE                 mov     edx, [ebp+var_53C]
.text:00005BD4                 add     edx, 1
.text:00005BD7                 mov     [ebp+var_53C], edx
.text:00005BDD
.text:00005BDD loc_5BDD:                               ; CODE XREF: _winctrl_layout+1220j
.text:00005BDD                 mov     eax, [ebp+var_53C]
.text:00005BE3                 cmp     eax, [ebp+var_250]
.text:00005BE9                 jge     short loc_5C1B
.text:00005BEB                 mov     ecx, [ebp+var_53C]
.text:00005BF1                 imul    ecx, 24h
.text:00005BF4                 mov     edx, [ebp+arg_8]
.text:00005BF7                 mov     eax, [edx+0Ch]
.text:00005BFA                 cmp     eax, [ebp+ecx+var_23C]
.text:00005C01                 jge     short loc_5C19
.text:00005C03                 mov     ecx, [ebp+var_53C]
.text:00005C09                 imul    ecx, 24h
.text:00005C0C                 mov     edx, [ebp+arg_8]
.text:00005C0F                 mov     eax, [ebp+ecx+var_23C]
.text:00005C16                 mov     [edx+0Ch], eax
.text:00005C19
.text:00005C19 loc_5C19:                               ; CODE XREF: _winctrl_layout+1255j
.text:00005C19                 jmp     short loc_5BCE
.text:00005C1B ; ---------------------------------------------------------------------------
.text:00005C1B
.text:00005C1B loc_5C1B:                               ; CODE XREF: _winctrl_layout+123Dj
.text:00005C1B                 mov     ecx, [ebp+arg_10]
.text:00005C1E                 mov     edx, [ebp+hMenu]
.text:00005C24                 mov     [ecx], edx
.text:00005C26                 mov     eax, [ebp+arg_C]
.text:00005C29                 cmp     dword ptr [eax+4], 0
.text:00005C2D                 jz      short loc_5C48
.text:00005C2F                 mov     ecx, [ebp+arg_C]
.text:00005C32                 mov     edx, [ecx+4]
.text:00005C35                 movsx   eax, byte ptr [edx]
.text:00005C38                 test    eax, eax
.text:00005C3A                 jz      short loc_5C48
.text:00005C3C                 mov     ecx, [ebp+arg_8]
.text:00005C3F                 push    ecx
.text:00005C40                 call    _endbox
.text:00005C45                 add     esp, 4
.text:00005C48
.text:00005C48 loc_5C48:                               ; CODE XREF: _winctrl_layout+1281j
.text:00005C48                                         ; _winctrl_layout+128Ej
.text:00005C48                 push    edx
.text:00005C49                 mov     ecx, ebp
.text:00005C4B                 push    eax
.text:00005C4C                 lea     edx, $LN98
.text:00005C52                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005C57                 pop     eax
.text:00005C58                 pop     edx
.text:00005C59                 pop     edi
.text:00005C5A                 pop     esi
.text:00005C5B                 mov     ecx, [ebp+var_4]
.text:00005C5E                 xor     ecx, ebp
.text:00005C60                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00005C65                 add     esp, 5BCh
.text:00005C6B                 cmp     ebp, esp
.text:00005C6D                 call    __RTC_CheckEsp
.text:00005C72                 mov     esp, ebp
.text:00005C74                 pop     ebp
.text:00005C75                 retn
.text:00005C75 _winctrl_layout endp
.text:00005C75
.text:00005C75 ; ---------------------------------------------------------------------------
.text:00005C76                 align 4
.text:00005C78 $LN98           dd 6                    ; DATA XREF: _winctrl_layout+12A0o
.text:00005C7C                 dd offset $LN97
.text:00005C80 $LN97           dd 0FFFFFDB8h, 240h     ; DATA XREF: .text:00005C7Co
.text:00005C88                 dd offset $LN91         ; "columns"
.text:00005C8C                 dd 0FFFFFB64h, 240h
.text:00005C94                 dd offset $LN92         ; "tabdelays"
.text:00005C98                 dd 0FFFFFB1Ch, 40h
.text:00005CA0                 dd offset $LN93         ; "tabdelayed"
.text:00005CA4                 dd 0FFFFFAECh, 24h
.text:00005CAC                 dd offset $LN94         ; "pos"
.text:00005CB0                 dd 0FFFFFAD4h, 10h
.text:00005CB8                 dd offset $LN95         ; "shortcuts"
.text:00005CBC                 dd 0FFFFFA74h, 4
.text:00005CC4                 dd offset $LN96         ; "lines"
.text:00005CC8 $LN96           db 'lines',0            ; DATA XREF: .text:00005CC4o
.text:00005CCE $LN95           db 'shortcuts',0        ; DATA XREF: .text:00005CB8o
.text:00005CD8 $LN94           db 'pos',0              ; DATA XREF: .text:00005CACo
.text:00005CDC $LN93           db 'tabdelayed',0       ; DATA XREF: .text:00005CA0o
.text:00005CE7 $LN92           db 'tabdelays',0        ; DATA XREF: .text:00005C94o
.text:00005CF1 $LN91           db 'columns',0          ; DATA XREF: .text:00005C88o
.text:00005CF9                 align 4
.text:00005CFC $LN99           dd offset $LN45         ; DATA XREF: _winctrl_layout+714r
.text:00005CFC                 dd offset $LN44         ; jump table for switch statement
.text:00005CFC                 dd offset $LN37
.text:00005CFC                 dd offset $LN29
.text:00005CFC                 dd offset $LN28
.text:00005CFC                 dd offset $LN26
.text:00005CFC                 dd offset $LN13_1
.text:00005CFC                 dd offset $LN15_2
.text:00005CFC                 dd offset $LN14_3
.text:00005D20                 db 0Ch dup(0CCh)
.text:00005D2C
.text:00005D2C ; =============== S U B R O U T I N E =======================================
.text:00005D2C
.text:00005D2C ; Attributes: bp-based frame
.text:00005D2C
.text:00005D2C ; int __cdecl shortcut_escape(char *Str, char)
.text:00005D2C _shortcut_escape proc near              ; CODE XREF: _winctrl_layout+75Ap
.text:00005D2C                                         ; _winctrl_layout+7CEp ...
.text:00005D2C
.text:00005D2C var_C           = dword ptr -0Ch
.text:00005D2C var_8           = dword ptr -8
.text:00005D2C var_4           = dword ptr -4
.text:00005D2C Str             = dword ptr  8
.text:00005D2C arg_4           = byte ptr  0Ch
.text:00005D2C
.text:00005D2C                 push    ebp
.text:00005D2D                 mov     ebp, esp
.text:00005D2F                 sub     esp, 0Ch
.text:00005D32                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005D39                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D47                 cmp     [ebp+Str], 0
.text:00005D4B                 jnz     short loc_5D54
.text:00005D4D                 xor     eax, eax
.text:00005D4F                 jmp     loc_5E0D
.text:00005D54 ; ---------------------------------------------------------------------------
.text:00005D54
.text:00005D54 loc_5D54:                               ; CODE XREF: _shortcut_escape+1Fj
.text:00005D54                 push    1
.text:00005D56                 mov     eax, [ebp+Str]
.text:00005D59                 push    eax             ; Str
.text:00005D5A                 call    _strlen
.text:00005D5F                 add     esp, 4
.text:00005D62                 lea     ecx, [eax+eax+1]
.text:00005D66                 push    ecx
.text:00005D67                 call    _safemalloc
.text:00005D6C                 add     esp, 8
.text:00005D6F                 mov     [ebp+var_4], eax
.text:00005D72                 movzx   edx, [ebp+arg_4]
.text:00005D76                 push    edx             ; C
.text:00005D77                 call    _tolower
.text:00005D7C                 add     esp, 4
.text:00005D7F                 mov     [ebp+arg_4], al
.text:00005D82                 mov     eax, [ebp+Str]
.text:00005D85                 mov     [ebp+var_8], eax
.text:00005D88                 mov     ecx, [ebp+var_4]
.text:00005D8B                 mov     [ebp+var_C], ecx
.text:00005D8E
.text:00005D8E loc_5D8E:                               ; CODE XREF: _shortcut_escape+D6j
.text:00005D8E                 mov     edx, [ebp+var_8]
.text:00005D91                 movsx   eax, byte ptr [edx]
.text:00005D94                 test    eax, eax
.text:00005D96                 jz      short loc_5E04
.text:00005D98                 movsx   ecx, [ebp+arg_4]
.text:00005D9C                 test    ecx, ecx
.text:00005D9E                 jz      short loc_5DCC
.text:00005DA0                 mov     edx, [ebp+var_8]
.text:00005DA3                 movzx   eax, byte ptr [edx]
.text:00005DA6                 push    eax             ; C
.text:00005DA7                 call    _tolower
.text:00005DAC                 add     esp, 4
.text:00005DAF                 movsx   ecx, [ebp+arg_4]
.text:00005DB3                 cmp     eax, ecx
.text:00005DB5                 jnz     short loc_5DCC
.text:00005DB7                 mov     edx, [ebp+var_C]
.text:00005DBA                 mov     byte ptr [edx], 26h ; '&'
.text:00005DBD                 mov     eax, [ebp+var_C]
.text:00005DC0                 add     eax, 1
.text:00005DC3                 mov     [ebp+var_C], eax
.text:00005DC6                 mov     [ebp+arg_4], 0
.text:00005DCA                 jmp     short loc_5DE6
.text:00005DCC ; ---------------------------------------------------------------------------
.text:00005DCC
.text:00005DCC loc_5DCC:                               ; CODE XREF: _shortcut_escape+72j
.text:00005DCC                                         ; _shortcut_escape+89j
.text:00005DCC                 mov     ecx, [ebp+var_8]
.text:00005DCF                 movsx   edx, byte ptr [ecx]
.text:00005DD2                 cmp     edx, 26h ; '&'
.text:00005DD5                 jnz     short loc_5DE6
.text:00005DD7                 mov     eax, [ebp+var_C]
.text:00005DDA                 mov     byte ptr [eax], 26h ; '&'
.text:00005DDD                 mov     ecx, [ebp+var_C]
.text:00005DE0                 add     ecx, 1
.text:00005DE3                 mov     [ebp+var_C], ecx
.text:00005DE6
.text:00005DE6 loc_5DE6:                               ; CODE XREF: _shortcut_escape+9Ej
.text:00005DE6                                         ; _shortcut_escape+A9j
.text:00005DE6                 mov     edx, [ebp+var_C]
.text:00005DE9                 mov     eax, [ebp+var_8]
.text:00005DEC                 mov     cl, [eax]
.text:00005DEE                 mov     [edx], cl
.text:00005DF0                 mov     edx, [ebp+var_C]
.text:00005DF3                 add     edx, 1
.text:00005DF6                 mov     [ebp+var_C], edx
.text:00005DF9                 mov     eax, [ebp+var_8]
.text:00005DFC                 add     eax, 1
.text:00005DFF                 mov     [ebp+var_8], eax
.text:00005E02                 jmp     short loc_5D8E
.text:00005E04 ; ---------------------------------------------------------------------------
.text:00005E04
.text:00005E04 loc_5E04:                               ; CODE XREF: _shortcut_escape+6Aj
.text:00005E04                 mov     ecx, [ebp+var_C]
.text:00005E07                 mov     byte ptr [ecx], 0
.text:00005E0A                 mov     eax, [ebp+var_4]
.text:00005E0D
.text:00005E0D loc_5E0D:                               ; CODE XREF: _shortcut_escape+23j
.text:00005E0D                 add     esp, 0Ch
.text:00005E10                 cmp     ebp, esp
.text:00005E12                 call    __RTC_CheckEsp
.text:00005E17                 mov     esp, ebp
.text:00005E19                 pop     ebp
.text:00005E1A                 retn
.text:00005E1A _shortcut_escape endp
.text:00005E1A
.text:00005E1A ; ---------------------------------------------------------------------------
.text:00005E1B                 align 4
.text:00005E1C
.text:00005E1C ; =============== S U B R O U T I N E =======================================
.text:00005E1C
.text:00005E1C ; Attributes: bp-based frame
.text:00005E1C
.text:00005E1C                 public _dlg_last_focused
.text:00005E1C _dlg_last_focused proc near
.text:00005E1C
.text:00005E1C var_8           = dword ptr -8
.text:00005E1C var_4           = dword ptr -4
.text:00005E1C arg_0           = dword ptr  8
.text:00005E1C arg_4           = dword ptr  0Ch
.text:00005E1C
.text:00005E1C                 push    ebp
.text:00005E1D                 mov     ebp, esp
.text:00005E1F                 sub     esp, 8
.text:00005E22                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005E29                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E30                 mov     eax, [ebp+arg_4]
.text:00005E33                 mov     [ebp+var_4], eax
.text:00005E36                 mov     ecx, [ebp+var_4]
.text:00005E39                 mov     edx, [ecx+34h]
.text:00005E3C                 cmp     edx, [ebp+arg_0]
.text:00005E3F                 jnz     short loc_5E4C
.text:00005E41                 mov     eax, [ebp+var_4]
.text:00005E44                 mov     ecx, [eax+38h]
.text:00005E47                 mov     [ebp+var_8], ecx
.text:00005E4A                 jmp     short loc_5E55
.text:00005E4C ; ---------------------------------------------------------------------------
.text:00005E4C
.text:00005E4C loc_5E4C:                               ; CODE XREF: _dlg_last_focused+23j
.text:00005E4C                 mov     edx, [ebp+var_4]
.text:00005E4F                 mov     eax, [edx+34h]
.text:00005E52                 mov     [ebp+var_8], eax
.text:00005E55
.text:00005E55 loc_5E55:                               ; CODE XREF: _dlg_last_focused+2Ej
.text:00005E55                 mov     eax, [ebp+var_8]
.text:00005E58                 mov     esp, ebp
.text:00005E5A                 pop     ebp
.text:00005E5B                 retn
.text:00005E5B _dlg_last_focused endp
.text:00005E5B
.text:00005E5C
.text:00005E5C ; =============== S U B R O U T I N E =======================================
.text:00005E5C
.text:00005E5C ; Attributes: bp-based frame
.text:00005E5C
.text:00005E5C                 public _winctrl_handle_command
.text:00005E5C _winctrl_handle_command proc near
.text:00005E5C
.text:00005E5C var_258         = dword ptr -258h
.text:00005E5C var_254         = dword ptr -254h
.text:00005E5C hDC             = dword ptr -250h
.text:00005E5C var_248         = dword ptr -248h
.text:00005E5C var_244         = dword ptr -244h
.text:00005E5C var_240         = dword ptr -240h
.text:00005E5C var_23C         = dword ptr -23Ch
.text:00005E5C var_238         = dword ptr -238h
.text:00005E5C var_234         = byte ptr -234h
.text:00005E5C var_233         = byte ptr -233h
.text:00005E5C var_232         = byte ptr -232h
.text:00005E5C var_231         = byte ptr -231h
.text:00005E5C var_230         = byte ptr -230h
.text:00005E5C var_22F         = byte ptr -22Fh
.text:00005E5C var_22E         = byte ptr -22Eh
.text:00005E5C var_22D         = byte ptr -22Dh
.text:00005E5C Dest            = byte ptr -22Ch
.text:00005E5C var_20D         = byte ptr -20Dh
.text:00005E5C var_204         = CHOOSEFONTA ptr -204h
.text:00005E5C String          = byte ptr -1C0h
.text:00005E5C var_BD          = byte ptr -0BDh
.text:00005E5C Dst             = byte ptr -0B4h
.text:00005E5C var_B0          = dword ptr -0B0h
.text:00005E5C var_A8          = dword ptr -0A8h
.text:00005E5C var_A4          = dword ptr -0A4h
.text:00005E5C var_9C          = dword ptr -9Ch
.text:00005E5C var_98          = dword ptr -98h
.text:00005E5C var_94          = dword ptr -94h
.text:00005E5C var_90          = dword ptr -90h
.text:00005E5C var_84          = dword ptr -84h
.text:00005E5C var_80          = dword ptr -80h
.text:00005E5C var_58          = dword ptr -58h
.text:00005E5C lParam          = dword ptr -54h
.text:00005E5C var_50          = dword ptr -50h
.text:00005E5C wParam          = dword ptr -4Ch
.text:00005E5C psizl           = tagSIZE ptr -44h
.text:00005E5C qrc             = tagRECT ptr -34h
.text:00005E5C hdc             = dword ptr -20h
.text:00005E5C var_1C          = dword ptr -1Ch
.text:00005E5C var_18          = dword ptr -18h
.text:00005E5C var_14          = dword ptr -14h
.text:00005E5C var_10          = dword ptr -10h
.text:00005E5C var_C           = dword ptr -0Ch
.text:00005E5C var_8           = dword ptr -8
.text:00005E5C var_4           = dword ptr -4
.text:00005E5C arg_0           = dword ptr  8
.text:00005E5C arg_4           = dword ptr  0Ch
.text:00005E5C arg_8           = dword ptr  10h
.text:00005E5C arg_C           = dword ptr  14h
.text:00005E5C
.text:00005E5C                 push    ebp
.text:00005E5D                 mov     ebp, esp
.text:00005E5F                 sub     esp, 258h
.text:00005E65                 push    esi
.text:00005E66                 push    edi
.text:00005E67                 lea     edi, [ebp+var_258]
.text:00005E6D                 mov     ecx, 96h ; 'û'
.text:00005E72                 mov     eax, 0CCCCCCCCh
.text:00005E77                 rep stosd
.text:00005E79                 mov     eax, dword ptr ds:___security_cookie
.text:00005E7E                 xor     eax, ebp
.text:00005E80                 mov     [ebp+var_4], eax
.text:00005E83                 cmp     ds:?draglistmsg@?1??winctrl_handle_command@@9@9, 0 ; `winctrl_handle_command'::`2'::draglistmsg
.text:00005E8A                 jnz     short loc_5EA5
.text:00005E8C                 mov     esi, esp
.text:00005E8E                 push    offset $SG89694 ; "commctrl_DragListMsg"
.text:00005E93                 call    dword ptr ds:__imp__RegisterWindowMessageA@4 ; RegisterWindowMessageA(x)
.text:00005E99                 cmp     esi, esp
.text:00005E9B                 call    __RTC_CheckEsp
.text:00005EA0                 mov     ds:?draglistmsg@?1??winctrl_handle_command@@9@9, eax ; `winctrl_handle_command'::`2'::draglistmsg
.text:00005EA5
.text:00005EA5 loc_5EA5:                               ; CODE XREF: _winctrl_handle_command+2Ej
.text:00005EA5                 mov     eax, [ebp+arg_4]
.text:00005EA8                 cmp     eax, ds:?draglistmsg@?1??winctrl_handle_command@@9@9 ; `winctrl_handle_command'::`2'::draglistmsg
.text:00005EAE                 jz      short loc_5EC6
.text:00005EB0                 cmp     [ebp+arg_4], 111h
.text:00005EB7                 jz      short loc_5EC6
.text:00005EB9                 cmp     [ebp+arg_4], 2Bh ; '+'
.text:00005EBD                 jz      short loc_5EC6
.text:00005EBF                 xor     eax, eax
.text:00005EC1                 jmp     loc_6DDB
.text:00005EC6 ; ---------------------------------------------------------------------------
.text:00005EC6
.text:00005EC6 loc_5EC6:                               ; CODE XREF: _winctrl_handle_command+52j
.text:00005EC6                                         ; _winctrl_handle_command+5Bj ...
.text:00005EC6                 mov     [ebp+var_8], 0
.text:00005ECD                 mov     [ebp+var_10], 0
.text:00005ED4                 jmp     short loc_5EDF
.text:00005ED6 ; ---------------------------------------------------------------------------
.text:00005ED6
.text:00005ED6 loc_5ED6:                               ; CODE XREF: _winctrl_handle_command:loc_5F15j
.text:00005ED6                 mov     ecx, [ebp+var_10]
.text:00005ED9                 add     ecx, 1
.text:00005EDC                 mov     [ebp+var_10], ecx
.text:00005EDF
.text:00005EDF loc_5EDF:                               ; CODE XREF: _winctrl_handle_command+78j
.text:00005EDF                 mov     edx, [ebp+arg_0]
.text:00005EE2                 mov     eax, [ebp+var_10]
.text:00005EE5                 cmp     eax, [edx+24h]
.text:00005EE8                 jge     short loc_5F17
.text:00005EEA                 mov     ecx, [ebp+arg_8]
.text:00005EED                 and     ecx, 0FFFFh
.text:00005EF3                 movzx   edx, cx
.text:00005EF6                 push    edx
.text:00005EF7                 mov     eax, [ebp+var_10]
.text:00005EFA                 mov     ecx, [ebp+arg_0]
.text:00005EFD                 mov     edx, [ecx+eax*4+4]
.text:00005F01                 push    edx
.text:00005F02                 call    _winctrl_findbyid
.text:00005F07                 add     esp, 8
.text:00005F0A                 mov     [ebp+var_8], eax
.text:00005F0D                 cmp     [ebp+var_8], 0
.text:00005F11                 jz      short loc_5F15
.text:00005F13                 jmp     short loc_5F17
.text:00005F15 ; ---------------------------------------------------------------------------
.text:00005F15
.text:00005F15 loc_5F15:                               ; CODE XREF: _winctrl_handle_command+B5j
.text:00005F15                 jmp     short loc_5ED6
.text:00005F17 ; ---------------------------------------------------------------------------
.text:00005F17
.text:00005F17 loc_5F17:                               ; CODE XREF: _winctrl_handle_command+8Cj
.text:00005F17                                         ; _winctrl_handle_command+B7j
.text:00005F17                 cmp     [ebp+var_8], 0
.text:00005F1B                 jnz     short loc_5F24
.text:00005F1D                 xor     eax, eax
.text:00005F1F                 jmp     loc_6DDB
.text:00005F24 ; ---------------------------------------------------------------------------
.text:00005F24
.text:00005F24 loc_5F24:                               ; CODE XREF: _winctrl_handle_command+BFj
.text:00005F24                 cmp     [ebp+arg_4], 2Bh ; '+'
.text:00005F28                 jnz     loc_6013
.text:00005F2E                 mov     eax, [ebp+arg_C]
.text:00005F31                 mov     [ebp+var_1C], eax
.text:00005F34                 mov     ecx, [ebp+var_1C]
.text:00005F37                 mov     edx, [ecx+18h]
.text:00005F3A                 mov     [ebp+hdc], edx
.text:00005F3D                 mov     eax, [ebp+var_1C]
.text:00005F40                 add     eax, 1Ch
.text:00005F43                 mov     ecx, [eax]
.text:00005F45                 mov     [ebp+qrc.left], ecx
.text:00005F48                 mov     edx, [eax+4]
.text:00005F4B                 mov     [ebp+qrc.top], edx
.text:00005F4E                 mov     ecx, [eax+8]
.text:00005F51                 mov     [ebp+qrc.right], ecx
.text:00005F54                 mov     edx, [eax+0Ch]
.text:00005F57                 mov     [ebp+qrc.bottom], edx
.text:00005F5A                 mov     esi, esp
.text:00005F5C                 push    1               ; iMode
.text:00005F5E                 mov     eax, [ebp+hdc]
.text:00005F61                 push    eax             ; hdc
.text:00005F62                 call    dword ptr ds:__imp__SetMapMode@8 ; SetMapMode(x,x)
.text:00005F68                 cmp     esi, esp
.text:00005F6A                 call    __RTC_CheckEsp
.text:00005F6F                 mov     esi, esp
.text:00005F71                 lea     ecx, [ebp+psizl]
.text:00005F74                 push    ecx             ; psizl
.text:00005F75                 mov     edx, [ebp+var_8]
.text:00005F78                 mov     eax, [edx+1Ch]
.text:00005F7B                 push    eax             ; Str
.text:00005F7C                 call    _strlen
.text:00005F81                 add     esp, 4
.text:00005F84                 push    eax             ; c
.text:00005F85                 mov     ecx, [ebp+var_8]
.text:00005F88                 mov     edx, [ecx+1Ch]
.text:00005F8B                 push    edx             ; lpString
.text:00005F8C                 mov     eax, [ebp+hdc]
.text:00005F8F                 push    eax             ; hdc
.text:00005F90                 call    dword ptr ds:__imp__GetTextExtentPoint32A@16 ; GetTextExtentPoint32A(x,x,x,x)
.text:00005F96                 cmp     esi, esp
.text:00005F98                 call    __RTC_CheckEsp
.text:00005F9D                 mov     esi, esp
.text:00005F9F                 push    200Fh           ; grfFlags
.text:00005FA4                 push    6               ; edge
.text:00005FA6                 lea     ecx, [ebp+qrc]
.text:00005FA9                 push    ecx             ; qrc
.text:00005FAA                 mov     edx, [ebp+hdc]
.text:00005FAD                 push    edx             ; hdc
.text:00005FAE                 call    dword ptr ds:__imp__DrawEdge@16 ; DrawEdge(x,x,x,x)
.text:00005FB4                 cmp     esi, esp
.text:00005FB6                 call    __RTC_CheckEsp
.text:00005FBB                 mov     eax, [ebp+var_8]
.text:00005FBE                 mov     ecx, [eax+1Ch]
.text:00005FC1                 push    ecx             ; Str
.text:00005FC2                 call    _strlen
.text:00005FC7                 add     esp, 4
.text:00005FCA                 mov     esi, esp
.text:00005FCC                 push    eax             ; c
.text:00005FCD                 mov     edx, [ebp+var_8]
.text:00005FD0                 mov     eax, [edx+1Ch]
.text:00005FD3                 push    eax             ; lpString
.text:00005FD4                 mov     eax, [ebp+qrc.bottom]
.text:00005FD7                 sub     eax, [ebp+qrc.top]
.text:00005FDA                 sub     eax, [ebp+psizl.cy]
.text:00005FDD                 cdq
.text:00005FDE                 sub     eax, edx
.text:00005FE0                 sar     eax, 1
.text:00005FE2                 add     eax, [ebp+qrc.top]
.text:00005FE5                 push    eax             ; y
.text:00005FE6                 mov     eax, [ebp+qrc.right]
.text:00005FE9                 sub     eax, [ebp+qrc.left]
.text:00005FEC                 sub     eax, [ebp+psizl._cx]
.text:00005FEF                 cdq
.text:00005FF0                 sub     eax, edx
.text:00005FF2                 sar     eax, 1
.text:00005FF4                 add     eax, [ebp+qrc.left]
.text:00005FF7                 push    eax             ; x
.text:00005FF8                 mov     ecx, [ebp+hdc]
.text:00005FFB                 push    ecx             ; hdc
.text:00005FFC                 call    dword ptr ds:__imp__TextOutA@20 ; TextOutA(x,x,x,x,x)
.text:00006002                 cmp     esi, esp
.text:00006004                 call    __RTC_CheckEsp
.text:00006009                 mov     eax, 1
.text:0000600E                 jmp     loc_6DDB
.text:00006013 ; ---------------------------------------------------------------------------
.text:00006013
.text:00006013 loc_6013:                               ; CODE XREF: _winctrl_handle_command+CCj
.text:00006013                 mov     edx, [ebp+var_8]
.text:00006016                 mov     eax, [edx]
.text:00006018                 mov     [ebp+var_C], eax
.text:0000601B                 mov     ecx, [ebp+arg_8]
.text:0000601E                 and     ecx, 0FFFFh
.text:00006024                 movzx   edx, cx
.text:00006027                 mov     eax, [ebp+var_8]
.text:0000602A                 sub     edx, [eax+4]
.text:0000602D                 mov     [ebp+var_14], edx
.text:00006030                 cmp     [ebp+var_C], 0
.text:00006034                 jz      short loc_603F
.text:00006036                 mov     ecx, [ebp+var_C]
.text:00006039                 cmp     dword ptr [ecx+10h], 0
.text:0000603D                 jnz     short loc_6046
.text:0000603F
.text:0000603F loc_603F:                               ; CODE XREF: _winctrl_handle_command+1D8j
.text:0000603F                 xor     eax, eax
.text:00006041                 jmp     loc_6DDB
.text:00006046 ; ---------------------------------------------------------------------------
.text:00006046
.text:00006046 loc_6046:                               ; CODE XREF: _winctrl_handle_command+1E1j
.text:00006046                 mov     [ebp+var_18], 0
.text:0000604D                 mov     edx, [ebp+arg_0]
.text:00006050                 mov     dword ptr [edx+0BCh], 0
.text:0000605A                 mov     eax, [ebp+var_C]
.text:0000605D                 mov     ecx, [eax]
.text:0000605F                 mov     [ebp+var_258], ecx
.text:00006065                 mov     edx, [ebp+var_258]
.text:0000606B                 sub     edx, 1
.text:0000606E                 mov     [ebp+var_258], edx
.text:00006074                 cmp     [ebp+var_258], 7 ; switch 8 cases
.text:0000607B                 ja      $LN61           ; jumptable 00006087 default case
.text:00006081                 mov     eax, [ebp+var_258]
.text:00006087                 jmp     ds:$LN83[eax*4] ; switch jump
.text:0000608E ; ---------------------------------------------------------------------------
.text:0000608E
.text:0000608E $LN60:                                  ; CODE XREF: _winctrl_handle_command+22Bj
.text:0000608E                                         ; DATA XREF: .text:$LN83o
.text:0000608E                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 0
.text:00006095                 jnz     short loc_60F7
.text:00006097                 mov     ecx, [ebp+var_C]
.text:0000609A                 cmp     dword ptr [ecx+28h], 0
.text:0000609E                 jnz     short loc_60F7
.text:000060A0                 mov     edx, [ebp+arg_8]
.text:000060A3                 shr     edx, 10h
.text:000060A6                 and     edx, 0FFFFh
.text:000060AC                 movzx   eax, dx
.text:000060AF                 cmp     eax, 100h
.text:000060B4                 jz      short loc_60CD
.text:000060B6                 mov     ecx, [ebp+arg_8]
.text:000060B9                 shr     ecx, 10h
.text:000060BC                 and     ecx, 0FFFFh
.text:000060C2                 movzx   edx, cx
.text:000060C5                 cmp     edx, 200h
.text:000060CB                 jnz     short loc_60F7
.text:000060CD
.text:000060CD loc_60CD:                               ; CODE XREF: _winctrl_handle_command+258j
.text:000060CD                 mov     eax, [ebp+arg_8]
.text:000060D0                 shr     eax, 10h
.text:000060D3                 and     eax, 0FFFFh
.text:000060D8                 movzx   ecx, ax
.text:000060DB                 xor     edx, edx
.text:000060DD                 cmp     ecx, 100h
.text:000060E3                 setz    dl
.text:000060E6                 push    edx
.text:000060E7                 mov     eax, [ebp+arg_0]
.text:000060EA                 push    eax
.text:000060EB                 mov     ecx, [ebp+var_C]
.text:000060EE                 push    ecx
.text:000060EF                 call    _winctrl_set_focus
.text:000060F4                 add     esp, 0Ch
.text:000060F7
.text:000060F7 loc_60F7:                               ; CODE XREF: _winctrl_handle_command+239j
.text:000060F7                                         ; _winctrl_handle_command+242j ...
.text:000060F7                 cmp     [ebp+arg_4], 111h
.text:000060FE                 jnz     short loc_6158
.text:00006100                 mov     edx, [ebp+var_C]
.text:00006103                 cmp     dword ptr [edx+28h], 0
.text:00006107                 jz      short loc_6158
.text:00006109                 mov     eax, [ebp+arg_8]
.text:0000610C                 shr     eax, 10h
.text:0000610F                 and     eax, 0FFFFh
.text:00006114                 movzx   ecx, ax
.text:00006117                 cmp     ecx, 3
.text:0000611A                 jz      short loc_6130
.text:0000611C                 mov     edx, [ebp+arg_8]
.text:0000611F                 shr     edx, 10h
.text:00006122                 and     edx, 0FFFFh
.text:00006128                 movzx   eax, dx
.text:0000612B                 cmp     eax, 4
.text:0000612E                 jnz     short loc_6158
.text:00006130
.text:00006130 loc_6130:                               ; CODE XREF: _winctrl_handle_command+2BEj
.text:00006130                 mov     ecx, [ebp+arg_8]
.text:00006133                 shr     ecx, 10h
.text:00006136                 and     ecx, 0FFFFh
.text:0000613C                 movzx   edx, cx
.text:0000613F                 xor     eax, eax
.text:00006141                 cmp     edx, 3
.text:00006144                 setz    al
.text:00006147                 push    eax
.text:00006148                 mov     ecx, [ebp+arg_0]
.text:0000614B                 push    ecx
.text:0000614C                 mov     edx, [ebp+var_C]
.text:0000614F                 push    edx
.text:00006150                 call    _winctrl_set_focus
.text:00006155                 add     esp, 0Ch
.text:00006158
.text:00006158 loc_6158:                               ; CODE XREF: _winctrl_handle_command+2A2j
.text:00006158                                         ; _winctrl_handle_command+2ABj ...
.text:00006158                 cmp     [ebp+arg_4], 111h
.text:0000615F                 jnz     short loc_61A6
.text:00006161                 mov     eax, [ebp+var_C]
.text:00006164                 cmp     dword ptr [eax+28h], 0
.text:00006168                 jnz     short loc_61A6
.text:0000616A                 mov     ecx, [ebp+arg_8]
.text:0000616D                 shr     ecx, 10h
.text:00006170                 and     ecx, 0FFFFh
.text:00006176                 movzx   edx, cx
.text:00006179                 cmp     edx, 300h
.text:0000617F                 jnz     short loc_61A6
.text:00006181                 mov     esi, esp
.text:00006183                 push    2
.text:00006185                 mov     eax, [ebp+arg_0]
.text:00006188                 mov     ecx, [eax+30h]
.text:0000618B                 push    ecx
.text:0000618C                 mov     edx, [ebp+arg_0]
.text:0000618F                 push    edx
.text:00006190                 mov     eax, [ebp+var_C]
.text:00006193                 push    eax
.text:00006194                 mov     ecx, [ebp+var_C]
.text:00006197                 mov     edx, [ecx+10h]
.text:0000619A                 call    edx
.text:0000619C                 add     esp, 10h
.text:0000619F                 cmp     esi, esp
.text:000061A1                 call    __RTC_CheckEsp
.text:000061A6
.text:000061A6 loc_61A6:                               ; CODE XREF: _winctrl_handle_command+303j
.text:000061A6                                         ; _winctrl_handle_command+30Cj ...
.text:000061A6                 cmp     [ebp+arg_4], 111h
.text:000061AD                 jnz     loc_6339
.text:000061B3                 mov     eax, [ebp+var_C]
.text:000061B6                 cmp     dword ptr [eax+28h], 0
.text:000061BA                 jz      loc_6339
.text:000061C0                 mov     ecx, [ebp+arg_8]
.text:000061C3                 shr     ecx, 10h
.text:000061C6                 and     ecx, 0FFFFh
.text:000061CC                 movzx   edx, cx
.text:000061CF                 cmp     edx, 1
.text:000061D2                 jnz     loc_62C6
.text:000061D8                 mov     esi, esp
.text:000061DA                 push    0               ; lParam
.text:000061DC                 push    0               ; wParam
.text:000061DE                 push    147h            ; Msg
.text:000061E3                 mov     eax, [ebp+var_8]
.text:000061E6                 mov     ecx, [eax+4]
.text:000061E9                 add     ecx, 1
.text:000061EC                 push    ecx             ; nIDDlgItem
.text:000061ED                 mov     edx, [ebp+arg_0]
.text:000061F0                 mov     eax, [edx]
.text:000061F2                 push    eax             ; hDlg
.text:000061F3                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000061F9                 cmp     esi, esp
.text:000061FB                 call    __RTC_CheckEsp
.text:00006200                 mov     [ebp+wParam], eax
.text:00006203                 mov     esi, esp
.text:00006205                 push    0               ; lParam
.text:00006207                 mov     ecx, [ebp+wParam]
.text:0000620A                 push    ecx             ; wParam
.text:0000620B                 push    149h            ; Msg
.text:00006210                 mov     edx, [ebp+var_8]
.text:00006213                 mov     eax, [edx+4]
.text:00006216                 add     eax, 1
.text:00006219                 push    eax             ; nIDDlgItem
.text:0000621A                 mov     ecx, [ebp+arg_0]
.text:0000621D                 mov     edx, [ecx]
.text:0000621F                 push    edx             ; hDlg
.text:00006220                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00006226                 cmp     esi, esp
.text:00006228                 call    __RTC_CheckEsp
.text:0000622D                 mov     [ebp+var_50], eax
.text:00006230                 push    1
.text:00006232                 mov     eax, [ebp+var_50]
.text:00006235                 add     eax, 1
.text:00006238                 push    eax
.text:00006239                 call    _safemalloc
.text:0000623E                 add     esp, 8
.text:00006241                 mov     [ebp+lParam], eax
.text:00006244                 mov     esi, esp
.text:00006246                 mov     ecx, [ebp+lParam]
.text:00006249                 push    ecx             ; lParam
.text:0000624A                 mov     edx, [ebp+wParam]
.text:0000624D                 push    edx             ; wParam
.text:0000624E                 push    148h            ; Msg
.text:00006253                 mov     eax, [ebp+var_8]
.text:00006256                 mov     ecx, [eax+4]
.text:00006259                 add     ecx, 1
.text:0000625C                 push    ecx             ; nIDDlgItem
.text:0000625D                 mov     edx, [ebp+arg_0]
.text:00006260                 mov     eax, [edx]
.text:00006262                 push    eax             ; hDlg
.text:00006263                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00006269                 cmp     esi, esp
.text:0000626B                 call    __RTC_CheckEsp
.text:00006270                 mov     esi, esp
.text:00006272                 mov     ecx, [ebp+lParam]
.text:00006275                 push    ecx             ; lpString
.text:00006276                 mov     edx, [ebp+var_8]
.text:00006279                 mov     eax, [edx+4]
.text:0000627C                 add     eax, 1
.text:0000627F                 push    eax             ; nIDDlgItem
.text:00006280                 mov     ecx, [ebp+arg_0]
.text:00006283                 mov     edx, [ecx]
.text:00006285                 push    edx             ; hDlg
.text:00006286                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:0000628C                 cmp     esi, esp
.text:0000628E                 call    __RTC_CheckEsp
.text:00006293                 mov     eax, [ebp+lParam]
.text:00006296                 push    eax
.text:00006297                 call    _safefree
.text:0000629C                 add     esp, 4
.text:0000629F                 mov     esi, esp
.text:000062A1                 push    2
.text:000062A3                 mov     ecx, [ebp+arg_0]
.text:000062A6                 mov     edx, [ecx+30h]
.text:000062A9                 push    edx
.text:000062AA                 mov     eax, [ebp+arg_0]
.text:000062AD                 push    eax
.text:000062AE                 mov     ecx, [ebp+var_C]
.text:000062B1                 push    ecx
.text:000062B2                 mov     edx, [ebp+var_C]
.text:000062B5                 mov     eax, [edx+10h]
.text:000062B8                 call    eax
.text:000062BA                 add     esp, 10h
.text:000062BD                 cmp     esi, esp
.text:000062BF                 call    __RTC_CheckEsp
.text:000062C4                 jmp     short loc_6339
.text:000062C6 ; ---------------------------------------------------------------------------
.text:000062C6
.text:000062C6 loc_62C6:                               ; CODE XREF: _winctrl_handle_command+376j
.text:000062C6                 mov     ecx, [ebp+arg_8]
.text:000062C9                 shr     ecx, 10h
.text:000062CC                 and     ecx, 0FFFFh
.text:000062D2                 movzx   edx, cx
.text:000062D5                 cmp     edx, 5
.text:000062D8                 jnz     short loc_6301
.text:000062DA                 mov     esi, esp
.text:000062DC                 push    2
.text:000062DE                 mov     eax, [ebp+arg_0]
.text:000062E1                 mov     ecx, [eax+30h]
.text:000062E4                 push    ecx
.text:000062E5                 mov     edx, [ebp+arg_0]
.text:000062E8                 push    edx
.text:000062E9                 mov     eax, [ebp+var_C]
.text:000062EC                 push    eax
.text:000062ED                 mov     ecx, [ebp+var_C]
.text:000062F0                 mov     edx, [ecx+10h]
.text:000062F3                 call    edx
.text:000062F5                 add     esp, 10h
.text:000062F8                 cmp     esi, esp
.text:000062FA                 call    __RTC_CheckEsp
.text:000062FF                 jmp     short loc_6339
.text:00006301 ; ---------------------------------------------------------------------------
.text:00006301
.text:00006301 loc_6301:                               ; CODE XREF: _winctrl_handle_command+47Cj
.text:00006301                 mov     eax, [ebp+arg_8]
.text:00006304                 shr     eax, 10h
.text:00006307                 and     eax, 0FFFFh
.text:0000630C                 movzx   ecx, ax
.text:0000630F                 cmp     ecx, 4
.text:00006312                 jnz     short loc_6339
.text:00006314                 mov     esi, esp
.text:00006316                 push    0
.text:00006318                 mov     edx, [ebp+arg_0]
.text:0000631B                 mov     eax, [edx+30h]
.text:0000631E                 push    eax
.text:0000631F                 mov     ecx, [ebp+arg_0]
.text:00006322                 push    ecx
.text:00006323                 mov     edx, [ebp+var_C]
.text:00006326                 push    edx
.text:00006327                 mov     eax, [ebp+var_C]
.text:0000632A                 mov     ecx, [eax+10h]
.text:0000632D                 call    ecx
.text:0000632F                 add     esp, 10h
.text:00006332                 cmp     esi, esp
.text:00006334                 call    __RTC_CheckEsp
.text:00006339
.text:00006339 loc_6339:                               ; CODE XREF: _winctrl_handle_command+351j
.text:00006339                                         ; _winctrl_handle_command+35Ej ...
.text:00006339                 jmp     $LN61           ; jumptable 00006087 default case
.text:0000633E ; ---------------------------------------------------------------------------
.text:0000633E
.text:0000633E $LN48:                                  ; CODE XREF: _winctrl_handle_command+22Bj
.text:0000633E                                         ; DATA XREF: .text:$LN83o
.text:0000633E                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 1
.text:00006345                 jnz     short loc_6396
.text:00006347                 mov     edx, [ebp+arg_8]
.text:0000634A                 shr     edx, 10h
.text:0000634D                 and     edx, 0FFFFh
.text:00006353                 movzx   eax, dx
.text:00006356                 cmp     eax, 6
.text:00006359                 jz      short loc_636F
.text:0000635B                 mov     ecx, [ebp+arg_8]
.text:0000635E                 shr     ecx, 10h
.text:00006361                 and     ecx, 0FFFFh
.text:00006367                 movzx   edx, cx
.text:0000636A                 cmp     edx, 7
.text:0000636D                 jnz     short loc_6396
.text:0000636F
.text:0000636F loc_636F:                               ; CODE XREF: _winctrl_handle_command+4FDj
.text:0000636F                 mov     eax, [ebp+arg_8]
.text:00006372                 shr     eax, 10h
.text:00006375                 and     eax, 0FFFFh
.text:0000637A                 movzx   ecx, ax
.text:0000637D                 xor     edx, edx
.text:0000637F                 cmp     ecx, 6
.text:00006382                 setz    dl
.text:00006385                 push    edx
.text:00006386                 mov     eax, [ebp+arg_0]
.text:00006389                 push    eax
.text:0000638A                 mov     ecx, [ebp+var_C]
.text:0000638D                 push    ecx
.text:0000638E                 call    _winctrl_set_focus
.text:00006393                 add     esp, 0Ch
.text:00006396
.text:00006396 loc_6396:                               ; CODE XREF: _winctrl_handle_command+4E9j
.text:00006396                                         ; _winctrl_handle_command+511j
.text:00006396                 cmp     [ebp+arg_4], 111h
.text:0000639D                 jnz     short loc_6410
.text:0000639F                 mov     edx, [ebp+arg_8]
.text:000063A2                 shr     edx, 10h
.text:000063A5                 and     edx, 0FFFFh
.text:000063AB                 movzx   eax, dx
.text:000063AE                 test    eax, eax
.text:000063B0                 jz      short loc_63C6
.text:000063B2                 mov     ecx, [ebp+arg_8]
.text:000063B5                 shr     ecx, 10h
.text:000063B8                 and     ecx, 0FFFFh
.text:000063BE                 movzx   edx, cx
.text:000063C1                 cmp     edx, 5
.text:000063C4                 jnz     short loc_6410
.text:000063C6
.text:000063C6 loc_63C6:                               ; CODE XREF: _winctrl_handle_command+554j
.text:000063C6                 mov     eax, [ebp+arg_8]
.text:000063C9                 and     eax, 0FFFFh
.text:000063CE                 movzx   ecx, ax
.text:000063D1                 mov     esi, esp
.text:000063D3                 push    ecx             ; nIDButton
.text:000063D4                 mov     edx, [ebp+arg_0]
.text:000063D7                 mov     eax, [edx]
.text:000063D9                 push    eax             ; hDlg
.text:000063DA                 call    dword ptr ds:__imp__IsDlgButtonChecked@8 ; IsDlgButtonChecked(x,x)
.text:000063E0                 cmp     esi, esp
.text:000063E2                 call    __RTC_CheckEsp
.text:000063E7                 test    eax, eax
.text:000063E9                 jz      short loc_6410
.text:000063EB                 mov     esi, esp
.text:000063ED                 push    2
.text:000063EF                 mov     ecx, [ebp+arg_0]
.text:000063F2                 mov     edx, [ecx+30h]
.text:000063F5                 push    edx
.text:000063F6                 mov     eax, [ebp+arg_0]
.text:000063F9                 push    eax
.text:000063FA                 mov     ecx, [ebp+var_C]
.text:000063FD                 push    ecx
.text:000063FE                 mov     edx, [ebp+var_C]
.text:00006401                 mov     eax, [edx+10h]
.text:00006404                 call    eax
.text:00006406                 add     esp, 10h
.text:00006409                 cmp     esi, esp
.text:0000640B                 call    __RTC_CheckEsp
.text:00006410
.text:00006410 loc_6410:                               ; CODE XREF: _winctrl_handle_command+541j
.text:00006410                                         ; _winctrl_handle_command+568j ...
.text:00006410                 jmp     $LN61           ; jumptable 00006087 default case
.text:00006415 ; ---------------------------------------------------------------------------
.text:00006415
.text:00006415 $LN43:                                  ; CODE XREF: _winctrl_handle_command+22Bj
.text:00006415                                         ; DATA XREF: .text:$LN83o
.text:00006415                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 2
.text:0000641C                 jnz     short loc_646D
.text:0000641E                 mov     ecx, [ebp+arg_8]
.text:00006421                 shr     ecx, 10h
.text:00006424                 and     ecx, 0FFFFh
.text:0000642A                 movzx   edx, cx
.text:0000642D                 cmp     edx, 6
.text:00006430                 jz      short loc_6445
.text:00006432                 mov     eax, [ebp+arg_8]
.text:00006435                 shr     eax, 10h
.text:00006438                 and     eax, 0FFFFh
.text:0000643D                 movzx   ecx, ax
.text:00006440                 cmp     ecx, 7
.text:00006443                 jnz     short loc_646D
.text:00006445
.text:00006445 loc_6445:                               ; CODE XREF: _winctrl_handle_command+5D4j
.text:00006445                 mov     edx, [ebp+arg_8]
.text:00006448                 shr     edx, 10h
.text:0000644B                 and     edx, 0FFFFh
.text:00006451                 movzx   eax, dx
.text:00006454                 xor     ecx, ecx
.text:00006456                 cmp     eax, 6
.text:00006459                 setz    cl
.text:0000645C                 push    ecx
.text:0000645D                 mov     edx, [ebp+arg_0]
.text:00006460                 push    edx
.text:00006461                 mov     eax, [ebp+var_C]
.text:00006464                 push    eax
.text:00006465                 call    _winctrl_set_focus
.text:0000646A                 add     esp, 0Ch
.text:0000646D
.text:0000646D loc_646D:                               ; CODE XREF: _winctrl_handle_command+5C0j
.text:0000646D                                         ; _winctrl_handle_command+5E7j
.text:0000646D                 cmp     [ebp+arg_4], 111h
.text:00006474                 jnz     short loc_64C1
.text:00006476                 mov     ecx, [ebp+arg_8]
.text:00006479                 shr     ecx, 10h
.text:0000647C                 and     ecx, 0FFFFh
.text:00006482                 movzx   edx, cx
.text:00006485                 test    edx, edx
.text:00006487                 jz      short loc_649C
.text:00006489                 mov     eax, [ebp+arg_8]
.text:0000648C                 shr     eax, 10h
.text:0000648F                 and     eax, 0FFFFh
.text:00006494                 movzx   ecx, ax
.text:00006497                 cmp     ecx, 5
.text:0000649A                 jnz     short loc_64C1
.text:0000649C
.text:0000649C loc_649C:                               ; CODE XREF: _winctrl_handle_command+62Bj
.text:0000649C                 mov     esi, esp
.text:0000649E                 push    2
.text:000064A0                 mov     edx, [ebp+arg_0]
.text:000064A3                 mov     eax, [edx+30h]
.text:000064A6                 push    eax
.text:000064A7                 mov     ecx, [ebp+arg_0]
.text:000064AA                 push    ecx
.text:000064AB                 mov     edx, [ebp+var_C]
.text:000064AE                 push    edx
.text:000064AF                 mov     eax, [ebp+var_C]
.text:000064B2                 mov     ecx, [eax+10h]
.text:000064B5                 call    ecx
.text:000064B7                 add     esp, 10h
.text:000064BA                 cmp     esi, esp
.text:000064BC                 call    __RTC_CheckEsp
.text:000064C1
.text:000064C1 loc_64C1:                               ; CODE XREF: _winctrl_handle_command+618j
.text:000064C1                                         ; _winctrl_handle_command+63Ej
.text:000064C1                 jmp     $LN61           ; jumptable 00006087 default case
.text:000064C6 ; ---------------------------------------------------------------------------
.text:000064C6
.text:000064C6 $LN38:                                  ; CODE XREF: _winctrl_handle_command+22Bj
.text:000064C6                                         ; DATA XREF: .text:$LN83o
.text:000064C6                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 3
.text:000064CD                 jnz     short loc_651E
.text:000064CF                 mov     edx, [ebp+arg_8]
.text:000064D2                 shr     edx, 10h
.text:000064D5                 and     edx, 0FFFFh
.text:000064DB                 movzx   eax, dx
.text:000064DE                 cmp     eax, 6
.text:000064E1                 jz      short loc_64F7
.text:000064E3                 mov     ecx, [ebp+arg_8]
.text:000064E6                 shr     ecx, 10h
.text:000064E9                 and     ecx, 0FFFFh
.text:000064EF                 movzx   edx, cx
.text:000064F2                 cmp     edx, 7
.text:000064F5                 jnz     short loc_651E
.text:000064F7
.text:000064F7 loc_64F7:                               ; CODE XREF: _winctrl_handle_command+685j
.text:000064F7                 mov     eax, [ebp+arg_8]
.text:000064FA                 shr     eax, 10h
.text:000064FD                 and     eax, 0FFFFh
.text:00006502                 movzx   ecx, ax
.text:00006505                 xor     edx, edx
.text:00006507                 cmp     ecx, 6
.text:0000650A                 setz    dl
.text:0000650D                 push    edx
.text:0000650E                 mov     eax, [ebp+arg_0]
.text:00006511                 push    eax
.text:00006512                 mov     ecx, [ebp+var_C]
.text:00006515                 push    ecx
.text:00006516                 call    _winctrl_set_focus
.text:0000651B                 add     esp, 0Ch
.text:0000651E
.text:0000651E loc_651E:                               ; CODE XREF: _winctrl_handle_command+671j
.text:0000651E                                         ; _winctrl_handle_command+699j
.text:0000651E                 cmp     [ebp+arg_4], 111h
.text:00006525                 jnz     short loc_6573
.text:00006527                 mov     edx, [ebp+arg_8]
.text:0000652A                 shr     edx, 10h
.text:0000652D                 and     edx, 0FFFFh
.text:00006533                 movzx   eax, dx
.text:00006536                 test    eax, eax
.text:00006538                 jz      short loc_654E
.text:0000653A                 mov     ecx, [ebp+arg_8]
.text:0000653D                 shr     ecx, 10h
.text:00006540                 and     ecx, 0FFFFh
.text:00006546                 movzx   edx, cx
.text:00006549                 cmp     edx, 5
.text:0000654C                 jnz     short loc_6573
.text:0000654E
.text:0000654E loc_654E:                               ; CODE XREF: _winctrl_handle_command+6DCj
.text:0000654E                 mov     esi, esp
.text:00006550                 push    1
.text:00006552                 mov     eax, [ebp+arg_0]
.text:00006555                 mov     ecx, [eax+30h]
.text:00006558                 push    ecx
.text:00006559                 mov     edx, [ebp+arg_0]
.text:0000655C                 push    edx
.text:0000655D                 mov     eax, [ebp+var_C]
.text:00006560                 push    eax
.text:00006561                 mov     ecx, [ebp+var_C]
.text:00006564                 mov     edx, [ecx+10h]
.text:00006567                 call    edx
.text:00006569                 add     esp, 10h
.text:0000656C                 cmp     esi, esp
.text:0000656E                 call    __RTC_CheckEsp
.text:00006573
.text:00006573 loc_6573:                               ; CODE XREF: _winctrl_handle_command+6C9j
.text:00006573                                         ; _winctrl_handle_command+6F0j
.text:00006573                 jmp     $LN61           ; jumptable 00006087 default case
.text:00006578 ; ---------------------------------------------------------------------------
.text:00006578
.text:00006578 $LN33:                                  ; CODE XREF: _winctrl_handle_command+22Bj
.text:00006578                                         ; DATA XREF: .text:$LN83o
.text:00006578                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 4
.text:0000657F                 jnz     short loc_65D9
.text:00006581                 mov     eax, [ebp+var_C]
.text:00006584                 cmp     dword ptr [eax+20h], 0
.text:00006588                 jz      short loc_65D9
.text:0000658A                 mov     ecx, [ebp+arg_8]
.text:0000658D                 shr     ecx, 10h
.text:00006590                 and     ecx, 0FFFFh
.text:00006596                 movzx   edx, cx
.text:00006599                 cmp     edx, 4
.text:0000659C                 jz      short loc_65B1
.text:0000659E                 mov     eax, [ebp+arg_8]
.text:000065A1                 shr     eax, 10h
.text:000065A4                 and     eax, 0FFFFh
.text:000065A9                 movzx   ecx, ax
.text:000065AC                 cmp     ecx, 5
.text:000065AF                 jnz     short loc_65D9
.text:000065B1
.text:000065B1 loc_65B1:                               ; CODE XREF: _winctrl_handle_command+740j
.text:000065B1                 mov     edx, [ebp+arg_8]
.text:000065B4                 shr     edx, 10h
.text:000065B7                 and     edx, 0FFFFh
.text:000065BD                 movzx   eax, dx
.text:000065C0                 xor     ecx, ecx
.text:000065C2                 cmp     eax, 4
.text:000065C5                 setz    cl
.text:000065C8                 push    ecx
.text:000065C9                 mov     edx, [ebp+arg_0]
.text:000065CC                 push    edx
.text:000065CD                 mov     eax, [ebp+var_C]
.text:000065D0                 push    eax
.text:000065D1                 call    _winctrl_set_focus
.text:000065D6                 add     esp, 0Ch
.text:000065D9
.text:000065D9 loc_65D9:                               ; CODE XREF: _winctrl_handle_command+723j
.text:000065D9                                         ; _winctrl_handle_command+72Cj ...
.text:000065D9                 cmp     [ebp+arg_4], 111h
.text:000065E0                 jnz     short loc_663A
.text:000065E2                 mov     ecx, [ebp+var_C]
.text:000065E5                 cmp     dword ptr [ecx+20h], 0
.text:000065E9                 jnz     short loc_663A
.text:000065EB                 mov     edx, [ebp+arg_8]
.text:000065EE                 shr     edx, 10h
.text:000065F1                 and     edx, 0FFFFh
.text:000065F7                 movzx   eax, dx
.text:000065FA                 cmp     eax, 3
.text:000065FD                 jz      short loc_6613
.text:000065FF                 mov     ecx, [ebp+arg_8]
.text:00006602                 shr     ecx, 10h
.text:00006605                 and     ecx, 0FFFFh
.text:0000660B                 movzx   edx, cx
.text:0000660E                 cmp     edx, 4
.text:00006611                 jnz     short loc_663A
.text:00006613
.text:00006613 loc_6613:                               ; CODE XREF: _winctrl_handle_command+7A1j
.text:00006613                 mov     eax, [ebp+arg_8]
.text:00006616                 shr     eax, 10h
.text:00006619                 and     eax, 0FFFFh
.text:0000661E                 movzx   ecx, ax
.text:00006621                 xor     edx, edx
.text:00006623                 cmp     ecx, 3
.text:00006626                 setz    dl
.text:00006629                 push    edx
.text:0000662A                 mov     eax, [ebp+arg_0]
.text:0000662D                 push    eax
.text:0000662E                 mov     ecx, [ebp+var_C]
.text:00006631                 push    ecx
.text:00006632                 call    _winctrl_set_focus
.text:00006637                 add     esp, 0Ch
.text:0000663A
.text:0000663A loc_663A:                               ; CODE XREF: _winctrl_handle_command+784j
.text:0000663A                                         ; _winctrl_handle_command+78Dj ...
.text:0000663A                 cmp     [ebp+arg_4], 111h
.text:00006641                 jnz     short loc_6698
.text:00006643                 cmp     [ebp+var_14], 2
.text:00006647                 jl      short loc_6698
.text:00006649                 mov     edx, [ebp+arg_8]
.text:0000664C                 shr     edx, 10h
.text:0000664F                 and     edx, 0FFFFh
.text:00006655                 movzx   eax, dx
.text:00006658                 cmp     eax, 6
.text:0000665B                 jz      short loc_6671
.text:0000665D                 mov     ecx, [ebp+arg_8]
.text:00006660                 shr     ecx, 10h
.text:00006663                 and     ecx, 0FFFFh
.text:00006669                 movzx   edx, cx
.text:0000666C                 cmp     edx, 7
.text:0000666F                 jnz     short loc_6698
.text:00006671
.text:00006671 loc_6671:                               ; CODE XREF: _winctrl_handle_command+7FFj
.text:00006671                 mov     eax, [ebp+arg_8]
.text:00006674                 shr     eax, 10h
.text:00006677                 and     eax, 0FFFFh
.text:0000667C                 movzx   ecx, ax
.text:0000667F                 xor     edx, edx
.text:00006681                 cmp     ecx, 6
.text:00006684                 setz    dl
.text:00006687                 push    edx
.text:00006688                 mov     eax, [ebp+arg_0]
.text:0000668B                 push    eax
.text:0000668C                 mov     ecx, [ebp+var_C]
.text:0000668F                 push    ecx
.text:00006690                 call    _winctrl_set_focus
.text:00006695                 add     esp, 0Ch
.text:00006698
.text:00006698 loc_6698:                               ; CODE XREF: _winctrl_handle_command+7E5j
.text:00006698                                         ; _winctrl_handle_command+7EBj ...
.text:00006698                 mov     edx, [ebp+var_C]
.text:0000669B                 cmp     dword ptr [edx+24h], 0
.text:0000669F                 jz      short loc_670D
.text:000066A1                 mov     eax, [ebp+arg_C]
.text:000066A4                 push    eax             ; int
.text:000066A5                 mov     ecx, [ebp+arg_8]
.text:000066A8                 push    ecx             ; int
.text:000066A9                 mov     edx, [ebp+arg_0]
.text:000066AC                 mov     eax, [edx]
.text:000066AE                 push    eax             ; hDlg
.text:000066AF                 xor     ecx, ecx
.text:000066B1                 cmp     [ebp+arg_4], 111h
.text:000066B8                 setnz   cl
.text:000066BB                 push    ecx             ; int
.text:000066BC                 push    0               ; int
.text:000066BE                 push    0               ; int
.text:000066C0                 mov     edx, [ebp+var_8]
.text:000066C3                 mov     eax, [edx+1Ch]
.text:000066C6                 push    eax             ; int
.text:000066C7                 call    _handle_prefslist
.text:000066CC                 add     esp, 1Ch
.text:000066CF                 mov     [ebp+var_58], eax
.text:000066D2                 mov     ecx, [ebp+var_58]
.text:000066D5                 and     ecx, 2
.text:000066D8                 jz      short loc_66FF
.text:000066DA                 mov     esi, esp
.text:000066DC                 push    2
.text:000066DE                 mov     edx, [ebp+arg_0]
.text:000066E1                 mov     eax, [edx+30h]
.text:000066E4                 push    eax
.text:000066E5                 mov     ecx, [ebp+arg_0]
.text:000066E8                 push    ecx
.text:000066E9                 mov     edx, [ebp+var_C]
.text:000066EC                 push    edx
.text:000066ED                 mov     eax, [ebp+var_C]
.text:000066F0                 mov     ecx, [eax+10h]
.text:000066F3                 call    ecx
.text:000066F5                 add     esp, 10h
.text:000066F8                 cmp     esi, esp
.text:000066FA                 call    __RTC_CheckEsp
.text:000066FF
.text:000066FF loc_66FF:                               ; CODE XREF: _winctrl_handle_command+87Cj
.text:000066FF                 mov     edx, [ebp+var_58]
.text:00006702                 and     edx, 1
.text:00006705                 mov     [ebp+var_18], edx
.text:00006708                 jmp     loc_67A7
.text:0000670D ; ---------------------------------------------------------------------------
.text:0000670D
.text:0000670D loc_670D:                               ; CODE XREF: _winctrl_handle_command+843j
.text:0000670D                 cmp     [ebp+arg_4], 111h
.text:00006714                 jnz     short loc_6765
.text:00006716                 mov     eax, [ebp+arg_8]
.text:00006719                 shr     eax, 10h
.text:0000671C                 and     eax, 0FFFFh
.text:00006721                 movzx   ecx, ax
.text:00006724                 cmp     ecx, 2
.text:00006727                 jnz     short loc_6765
.text:00006729                 mov     esi, esp
.text:0000672B                 mov     edx, [ebp+arg_0]
.text:0000672E                 mov     eax, [edx]
.text:00006730                 push    eax             ; hWnd
.text:00006731                 call    dword ptr ds:__imp__SetCapture@4 ; SetCapture(x)
.text:00006737                 cmp     esi, esp
.text:00006739                 call    __RTC_CheckEsp
.text:0000673E                 mov     esi, esp
.text:00006740                 push    1
.text:00006742                 mov     ecx, [ebp+arg_0]
.text:00006745                 mov     edx, [ecx+30h]
.text:00006748                 push    edx
.text:00006749                 mov     eax, [ebp+arg_0]
.text:0000674C                 push    eax
.text:0000674D                 mov     ecx, [ebp+var_C]
.text:00006750                 push    ecx
.text:00006751                 mov     edx, [ebp+var_C]
.text:00006754                 mov     eax, [edx+10h]
.text:00006757                 call    eax
.text:00006759                 add     esp, 10h
.text:0000675C                 cmp     esi, esp
.text:0000675E                 call    __RTC_CheckEsp
.text:00006763                 jmp     short loc_67A7
.text:00006765 ; ---------------------------------------------------------------------------
.text:00006765
.text:00006765 loc_6765:                               ; CODE XREF: _winctrl_handle_command+8B8j
.text:00006765                                         ; _winctrl_handle_command+8CBj
.text:00006765                 cmp     [ebp+arg_4], 111h
.text:0000676C                 jnz     short loc_67A7
.text:0000676E                 mov     ecx, [ebp+arg_8]
.text:00006771                 shr     ecx, 10h
.text:00006774                 and     ecx, 0FFFFh
.text:0000677A                 movzx   edx, cx
.text:0000677D                 cmp     edx, 1
.text:00006780                 jnz     short loc_67A7
.text:00006782                 mov     esi, esp
.text:00006784                 push    3
.text:00006786                 mov     eax, [ebp+arg_0]
.text:00006789                 mov     ecx, [eax+30h]
.text:0000678C                 push    ecx
.text:0000678D                 mov     edx, [ebp+arg_0]
.text:00006790                 push    edx
.text:00006791                 mov     eax, [ebp+var_C]
.text:00006794                 push    eax
.text:00006795                 mov     ecx, [ebp+var_C]
.text:00006798                 mov     edx, [ecx+10h]
.text:0000679B                 call    edx
.text:0000679D                 add     esp, 10h
.text:000067A0                 cmp     esi, esp
.text:000067A2                 call    __RTC_CheckEsp
.text:000067A7
.text:000067A7 loc_67A7:                               ; CODE XREF: _winctrl_handle_command+8ACj
.text:000067A7                                         ; _winctrl_handle_command+907j ...
.text:000067A7                 jmp     $LN61           ; jumptable 00006087 default case
.text:000067AC ; ---------------------------------------------------------------------------
.text:000067AC
.text:000067AC $LN20:                                  ; CODE XREF: _winctrl_handle_command+22Bj
.text:000067AC                                         ; DATA XREF: .text:$LN83o
.text:000067AC                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 6
.text:000067B3                 jnz     short loc_6812
.text:000067B5                 cmp     [ebp+var_14], 1
.text:000067B9                 jnz     short loc_6812
.text:000067BB                 mov     eax, [ebp+arg_8]
.text:000067BE                 shr     eax, 10h
.text:000067C1                 and     eax, 0FFFFh
.text:000067C6                 movzx   ecx, ax
.text:000067C9                 cmp     ecx, 100h
.text:000067CF                 jz      short loc_67E7
.text:000067D1                 mov     edx, [ebp+arg_8]
.text:000067D4                 shr     edx, 10h
.text:000067D7                 and     edx, 0FFFFh
.text:000067DD                 movzx   eax, dx
.text:000067E0                 cmp     eax, 200h
.text:000067E5                 jnz     short loc_6812
.text:000067E7
.text:000067E7 loc_67E7:                               ; CODE XREF: _winctrl_handle_command+973j
.text:000067E7                 mov     ecx, [ebp+arg_8]
.text:000067EA                 shr     ecx, 10h
.text:000067ED                 and     ecx, 0FFFFh
.text:000067F3                 movzx   edx, cx
.text:000067F6                 xor     eax, eax
.text:000067F8                 cmp     edx, 100h
.text:000067FE                 setz    al
.text:00006801                 push    eax
.text:00006802                 mov     ecx, [ebp+arg_0]
.text:00006805                 push    ecx
.text:00006806                 mov     edx, [ebp+var_C]
.text:00006809                 push    edx
.text:0000680A                 call    _winctrl_set_focus
.text:0000680F                 add     esp, 0Ch
.text:00006812
.text:00006812 loc_6812:                               ; CODE XREF: _winctrl_handle_command+957j
.text:00006812                                         ; _winctrl_handle_command+95Dj ...
.text:00006812                 cmp     [ebp+arg_4], 111h
.text:00006819                 jnz     short loc_6870
.text:0000681B                 cmp     [ebp+var_14], 2
.text:0000681F                 jnz     short loc_6870
.text:00006821                 mov     eax, [ebp+arg_8]
.text:00006824                 shr     eax, 10h
.text:00006827                 and     eax, 0FFFFh
.text:0000682C                 movzx   ecx, ax
.text:0000682F                 cmp     ecx, 6
.text:00006832                 jz      short loc_6848
.text:00006834                 mov     edx, [ebp+arg_8]
.text:00006837                 shr     edx, 10h
.text:0000683A                 and     edx, 0FFFFh
.text:00006840                 movzx   eax, dx
.text:00006843                 cmp     eax, 7
.text:00006846                 jnz     short loc_6870
.text:00006848
.text:00006848 loc_6848:                               ; CODE XREF: _winctrl_handle_command+9D6j
.text:00006848                 mov     ecx, [ebp+arg_8]
.text:0000684B                 shr     ecx, 10h
.text:0000684E                 and     ecx, 0FFFFh
.text:00006854                 movzx   edx, cx
.text:00006857                 xor     eax, eax
.text:00006859                 cmp     edx, 6
.text:0000685C                 setz    al
.text:0000685F                 push    eax
.text:00006860                 mov     ecx, [ebp+arg_0]
.text:00006863                 push    ecx
.text:00006864                 mov     edx, [ebp+var_C]
.text:00006867                 push    edx
.text:00006868                 call    _winctrl_set_focus
.text:0000686D                 add     esp, 0Ch
.text:00006870
.text:00006870 loc_6870:                               ; CODE XREF: _winctrl_handle_command+9BDj
.text:00006870                                         ; _winctrl_handle_command+9C3j ...
.text:00006870                 cmp     [ebp+arg_4], 111h
.text:00006877                 jnz     short loc_68BA
.text:00006879                 cmp     [ebp+var_14], 1
.text:0000687D                 jnz     short loc_68BA
.text:0000687F                 mov     eax, [ebp+arg_8]
.text:00006882                 shr     eax, 10h
.text:00006885                 and     eax, 0FFFFh
.text:0000688A                 movzx   ecx, ax
.text:0000688D                 cmp     ecx, 300h
.text:00006893                 jnz     short loc_68BA
.text:00006895                 mov     esi, esp
.text:00006897                 push    2
.text:00006899                 mov     edx, [ebp+arg_0]
.text:0000689C                 mov     eax, [edx+30h]
.text:0000689F                 push    eax
.text:000068A0                 mov     ecx, [ebp+arg_0]
.text:000068A3                 push    ecx
.text:000068A4                 mov     edx, [ebp+var_C]
.text:000068A7                 push    edx
.text:000068A8                 mov     eax, [ebp+var_C]
.text:000068AB                 mov     ecx, [eax+10h]
.text:000068AE                 call    ecx
.text:000068B0                 add     esp, 10h
.text:000068B3                 cmp     esi, esp
.text:000068B5                 call    __RTC_CheckEsp
.text:000068BA
.text:000068BA loc_68BA:                               ; CODE XREF: _winctrl_handle_command+A1Bj
.text:000068BA                                         ; _winctrl_handle_command+A21j ...
.text:000068BA                 cmp     [ebp+var_14], 2
.text:000068BE                 jnz     loc_6A1D
.text:000068C4                 cmp     [ebp+arg_4], 111h
.text:000068CB                 jnz     loc_6A1D
.text:000068D1                 mov     edx, [ebp+arg_8]
.text:000068D4                 shr     edx, 10h
.text:000068D7                 and     edx, 0FFFFh
.text:000068DD                 movzx   eax, dx
.text:000068E0                 test    eax, eax
.text:000068E2                 jz      short loc_68FC
.text:000068E4                 mov     ecx, [ebp+arg_8]
.text:000068E7                 shr     ecx, 10h
.text:000068EA                 and     ecx, 0FFFFh
.text:000068F0                 movzx   edx, cx
.text:000068F3                 cmp     edx, 5
.text:000068F6                 jnz     loc_6A1D
.text:000068FC
.text:000068FC loc_68FC:                               ; CODE XREF: _winctrl_handle_command+A86j
.text:000068FC                 push    58h ; 'X'       ; Size
.text:000068FE                 push    0               ; Val
.text:00006900                 lea     eax, [ebp+Dst]
.text:00006906                 push    eax             ; Dst
.text:00006907                 call    _memset
.text:0000690C                 add     esp, 0Ch
.text:0000690F                 mov     ecx, [ebp+arg_0]
.text:00006912                 mov     edx, [ecx]
.text:00006914                 mov     [ebp+var_B0], edx
.text:0000691A                 mov     eax, [ebp+var_C]
.text:0000691D                 cmp     dword ptr [eax+20h], 0
.text:00006921                 jz      short loc_6931
.text:00006923                 mov     ecx, [ebp+var_C]
.text:00006926                 mov     edx, [ecx+20h]
.text:00006929                 mov     [ebp+var_A8], edx
.text:0000692F                 jmp     short loc_693B
.text:00006931 ; ---------------------------------------------------------------------------
.text:00006931
.text:00006931 loc_6931:                               ; CODE XREF: _winctrl_handle_command+AC5j
.text:00006931                 mov     [ebp+var_A8], offset $SG89874 ; "All Files (*.*)"
.text:0000693B
.text:0000693B loc_693B:                               ; CODE XREF: _winctrl_handle_command+AD3j
.text:0000693B                 mov     [ebp+var_A4], 0
.text:00006945                 mov     [ebp+var_9C], 1
.text:0000694F                 lea     eax, [ebp+String]
.text:00006955                 mov     [ebp+var_98], eax
.text:0000695B                 mov     esi, esp
.text:0000695D                 push    104h            ; cchMax
.text:00006962                 lea     ecx, [ebp+String]
.text:00006968                 push    ecx             ; lpString
.text:00006969                 mov     edx, [ebp+var_8]
.text:0000696C                 mov     eax, [edx+4]
.text:0000696F                 add     eax, 1
.text:00006972                 push    eax             ; nIDDlgItem
.text:00006973                 mov     ecx, [ebp+arg_0]
.text:00006976                 mov     edx, [ecx]
.text:00006978                 push    edx             ; hDlg
.text:00006979                 call    dword ptr ds:__imp__GetDlgItemTextA@16 ; GetDlgItemTextA(x,x,x,x)
.text:0000697F                 cmp     esi, esp
.text:00006981                 call    __RTC_CheckEsp
.text:00006986                 mov     [ebp+var_BD], 0
.text:0000698D                 mov     [ebp+var_94], 104h
.text:00006997                 mov     [ebp+var_90], 0
.text:000069A1                 mov     eax, [ebp+var_C]
.text:000069A4                 mov     ecx, [eax+28h]
.text:000069A7                 mov     [ebp+var_84], ecx
.text:000069AD                 mov     [ebp+var_80], 0
.text:000069B4                 mov     edx, [ebp+var_C]
.text:000069B7                 mov     eax, [edx+24h]
.text:000069BA                 push    eax
.text:000069BB                 push    0
.text:000069BD                 lea     ecx, [ebp+Dst]
.text:000069C3                 push    ecx
.text:000069C4                 push    0
.text:000069C6                 call    _request_file
.text:000069CB                 add     esp, 10h
.text:000069CE                 test    eax, eax
.text:000069D0                 jz      short loc_6A1D
.text:000069D2                 mov     esi, esp
.text:000069D4                 lea     edx, [ebp+String]
.text:000069DA                 push    edx             ; lpString
.text:000069DB                 mov     eax, [ebp+var_8]
.text:000069DE                 mov     ecx, [eax+4]
.text:000069E1                 add     ecx, 1
.text:000069E4                 push    ecx             ; nIDDlgItem
.text:000069E5                 mov     edx, [ebp+arg_0]
.text:000069E8                 mov     eax, [edx]
.text:000069EA                 push    eax             ; hDlg
.text:000069EB                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:000069F1                 cmp     esi, esp
.text:000069F3                 call    __RTC_CheckEsp
.text:000069F8                 mov     esi, esp
.text:000069FA                 push    2
.text:000069FC                 mov     ecx, [ebp+arg_0]
.text:000069FF                 mov     edx, [ecx+30h]
.text:00006A02                 push    edx
.text:00006A03                 mov     eax, [ebp+arg_0]
.text:00006A06                 push    eax
.text:00006A07                 mov     ecx, [ebp+var_C]
.text:00006A0A                 push    ecx
.text:00006A0B                 mov     edx, [ebp+var_C]
.text:00006A0E                 mov     eax, [edx+10h]
.text:00006A11                 call    eax
.text:00006A13                 add     esp, 10h
.text:00006A16                 cmp     esi, esp
.text:00006A18                 call    __RTC_CheckEsp
.text:00006A1D
.text:00006A1D loc_6A1D:                               ; CODE XREF: _winctrl_handle_command+A62j
.text:00006A1D                                         ; _winctrl_handle_command+A6Fj ...
.text:00006A1D                 jmp     $LN61           ; jumptable 00006087 default case
.text:00006A22 ; ---------------------------------------------------------------------------
.text:00006A22
.text:00006A22 $LN9:                                   ; CODE XREF: _winctrl_handle_command+22Bj
.text:00006A22                                         ; DATA XREF: .text:$LN83o
.text:00006A22                 cmp     [ebp+arg_4], 111h ; jumptable 00006087 case 7
.text:00006A29                 jnz     short loc_6A80
.text:00006A2B                 cmp     [ebp+var_14], 2
.text:00006A2F                 jnz     short loc_6A80
.text:00006A31                 mov     ecx, [ebp+arg_8]
.text:00006A34                 shr     ecx, 10h
.text:00006A37                 and     ecx, 0FFFFh
.text:00006A3D                 movzx   edx, cx
.text:00006A40                 cmp     edx, 6
.text:00006A43                 jz      short loc_6A58
.text:00006A45                 mov     eax, [ebp+arg_8]
.text:00006A48                 shr     eax, 10h
.text:00006A4B                 and     eax, 0FFFFh
.text:00006A50                 movzx   ecx, ax
.text:00006A53                 cmp     ecx, 7
.text:00006A56                 jnz     short loc_6A80
.text:00006A58
.text:00006A58 loc_6A58:                               ; CODE XREF: _winctrl_handle_command+BE7j
.text:00006A58                 mov     edx, [ebp+arg_8]
.text:00006A5B                 shr     edx, 10h
.text:00006A5E                 and     edx, 0FFFFh
.text:00006A64                 movzx   eax, dx
.text:00006A67                 xor     ecx, ecx
.text:00006A69                 cmp     eax, 6
.text:00006A6C                 setz    cl
.text:00006A6F                 push    ecx
.text:00006A70                 mov     edx, [ebp+arg_0]
.text:00006A73                 push    edx
.text:00006A74                 mov     eax, [ebp+var_C]
.text:00006A77                 push    eax
.text:00006A78                 call    _winctrl_set_focus
.text:00006A7D                 add     esp, 0Ch
.text:00006A80
.text:00006A80 loc_6A80:                               ; CODE XREF: _winctrl_handle_command+BCDj
.text:00006A80                                         ; _winctrl_handle_command+BD3j ...
.text:00006A80                 cmp     [ebp+var_14], 2
.text:00006A84                 jnz     $LN61           ; jumptable 00006087 default case
.text:00006A8A                 cmp     [ebp+arg_4], 111h
.text:00006A91                 jnz     $LN61           ; jumptable 00006087 default case
.text:00006A97                 mov     ecx, [ebp+arg_8]
.text:00006A9A                 shr     ecx, 10h
.text:00006A9D                 and     ecx, 0FFFFh
.text:00006AA3                 movzx   edx, cx
.text:00006AA6                 test    edx, edx
.text:00006AA8                 jz      short loc_6AC1
.text:00006AAA                 mov     eax, [ebp+arg_8]
.text:00006AAD                 shr     eax, 10h
.text:00006AB0                 and     eax, 0FFFFh
.text:00006AB5                 movzx   ecx, ax
.text:00006AB8                 cmp     ecx, 5
.text:00006ABB                 jnz     $LN61           ; jumptable 00006087 default case
.text:00006AC1
.text:00006AC1 loc_6AC1:                               ; CODE XREF: _winctrl_handle_command+C4Cj
.text:00006AC1                 mov     edx, [ebp+var_8]
.text:00006AC4                 mov     eax, [edx+1Ch]
.text:00006AC7                 mov     [ebp+var_254], eax
.text:00006ACD                 mov     esi, esp
.text:00006ACF                 push    0               ; hWnd
.text:00006AD1                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text:00006AD7                 cmp     esi, esp
.text:00006AD9                 call    __RTC_CheckEsp
.text:00006ADE                 mov     [ebp+hDC], eax
.text:00006AE4                 mov     esi, esp
.text:00006AE6                 push    48h ; 'H'       ; nDenominator
.text:00006AE8                 mov     edi, esp
.text:00006AEA                 push    5Ah ; 'Z'       ; index
.text:00006AEC                 mov     ecx, [ebp+hDC]
.text:00006AF2                 push    ecx             ; hdc
.text:00006AF3                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text:00006AF9                 cmp     edi, esp
.text:00006AFB                 call    __RTC_CheckEsp
.text:00006B00                 push    eax             ; nNumerator
.text:00006B01                 mov     edx, [ebp+var_254]
.text:00006B07                 mov     eax, [edx+8]
.text:00006B0A                 push    eax             ; nNumber
.text:00006B0B                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text:00006B11                 cmp     esi, esp
.text:00006B13                 call    __RTC_CheckEsp
.text:00006B18                 neg     eax
.text:00006B1A                 mov     [ebp+var_248], eax
.text:00006B20                 mov     esi, esp
.text:00006B22                 mov     ecx, [ebp+hDC]
.text:00006B28                 push    ecx             ; hDC
.text:00006B29                 push    0               ; hWnd
.text:00006B2B                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text:00006B31                 cmp     esi, esp
.text:00006B33                 call    __RTC_CheckEsp
.text:00006B38                 mov     [ebp+var_23C], 0
.text:00006B42                 mov     edx, [ebp+var_23C]
.text:00006B48                 mov     [ebp+var_240], edx
.text:00006B4E                 mov     eax, [ebp+var_240]
.text:00006B54                 mov     [ebp+var_244], eax
.text:00006B5A                 mov     [ebp+var_232], 0
.text:00006B61                 mov     cl, [ebp+var_232]
.text:00006B67                 mov     [ebp+var_233], cl
.text:00006B6D                 mov     dl, [ebp+var_233]
.text:00006B73                 mov     [ebp+var_234], dl
.text:00006B79                 mov     eax, [ebp+var_254]
.text:00006B7F                 mov     ecx, [eax+4]
.text:00006B82                 neg     ecx
.text:00006B84                 sbb     ecx, ecx
.text:00006B86                 and     ecx, 2BCh
.text:00006B8C                 mov     [ebp+var_238], ecx
.text:00006B92                 mov     edx, [ebp+var_254]
.text:00006B98                 mov     al, [edx+0Ch]
.text:00006B9B                 mov     [ebp+var_231], al
.text:00006BA1                 mov     [ebp+var_230], 0
.text:00006BA8                 mov     [ebp+var_22F], 0
.text:00006BAF                 mov     [ebp+var_22E], 0
.text:00006BB6                 mov     [ebp+var_22D], 1
.text:00006BBD                 push    1Fh             ; Count
.text:00006BBF                 mov     ecx, [ebp+var_254]
.text:00006BC5                 mov     edx, [ecx]
.text:00006BC7                 push    edx             ; Source
.text:00006BC8                 lea     eax, [ebp+Dest]
.text:00006BCE                 push    eax             ; Dest
.text:00006BCF                 call    _strncpy
.text:00006BD4                 add     esp, 0Ch
.text:00006BD7                 mov     [ebp+var_20D], 0
.text:00006BDE                 mov     [ebp+var_204.lStructSize], 3Ch ; '<'
.text:00006BE8                 mov     ecx, [ebp+arg_0]
.text:00006BEB                 mov     edx, [ecx]
.text:00006BED                 mov     [ebp+var_204.hwndOwner], edx
.text:00006BF3                 lea     eax, [ebp+var_248]
.text:00006BF9                 mov     [ebp+var_204.lpLogFont], eax
.text:00006BFF                 mov     ecx, [ebp+arg_0]
.text:00006C02                 mov     edx, [ecx+0D0h]
.text:00006C08                 neg     edx
.text:00006C0A                 sbb     edx, edx
.text:00006C0C                 and     edx, 4000h
.text:00006C12                 or      edx, 10000h
.text:00006C18                 or      edx, 40h
.text:00006C1B                 or      edx, 1
.text:00006C1E                 mov     [ebp+var_204.Flags], edx
.text:00006C24                 mov     esi, esp
.text:00006C26                 lea     eax, [ebp+var_204]
.text:00006C2C                 push    eax             ; LPCHOOSEFONTA
.text:00006C2D                 call    dword ptr ds:__imp__ChooseFontA@4 ; ChooseFontA(x)
.text:00006C33                 cmp     esi, esp
.text:00006C35                 call    __RTC_CheckEsp
.text:00006C3A                 test    eax, eax
.text:00006C3C                 jz      $LN61           ; jumptable 00006087 default case
.text:00006C42                 movzx   ecx, [ebp+var_231]
.text:00006C49                 push    ecx
.text:00006C4A                 mov     eax, [ebp+var_204.iPointSize]
.text:00006C50                 cdq
.text:00006C51                 mov     ecx, 0Ah
.text:00006C56                 idiv    ecx
.text:00006C58                 push    eax
.text:00006C59                 xor     edx, edx
.text:00006C5B                 cmp     [ebp+var_238], 2BCh
.text:00006C65                 setz    dl
.text:00006C68                 push    edx
.text:00006C69                 lea     eax, [ebp+Dest]
.text:00006C6F                 push    eax
.text:00006C70                 call    _fontspec_new
.text:00006C75                 add     esp, 10h
.text:00006C78                 mov     [ebp+var_254], eax
.text:00006C7E                 mov     ecx, [ebp+var_254]
.text:00006C84                 push    ecx
.text:00006C85                 mov     edx, [ebp+arg_0]
.text:00006C88                 push    edx
.text:00006C89                 mov     eax, [ebp+var_C]
.text:00006C8C                 push    eax
.text:00006C8D                 call    _dlg_fontsel_set
.text:00006C92                 add     esp, 0Ch
.text:00006C95                 mov     ecx, [ebp+var_254]
.text:00006C9B                 push    ecx
.text:00006C9C                 call    _fontspec_free
.text:00006CA1                 add     esp, 4
.text:00006CA4                 mov     esi, esp
.text:00006CA6                 push    2
.text:00006CA8                 mov     edx, [ebp+arg_0]
.text:00006CAB                 mov     eax, [edx+30h]
.text:00006CAE                 push    eax
.text:00006CAF                 mov     ecx, [ebp+arg_0]
.text:00006CB2                 push    ecx
.text:00006CB3                 mov     edx, [ebp+var_C]
.text:00006CB6                 push    edx
.text:00006CB7                 mov     eax, [ebp+var_C]
.text:00006CBA                 mov     ecx, [eax+10h]
.text:00006CBD                 call    ecx
.text:00006CBF                 add     esp, 10h
.text:00006CC2                 cmp     esi, esp
.text:00006CC4                 call    __RTC_CheckEsp
.text:00006CC9
.text:00006CC9 $LN61:                                  ; CODE XREF: _winctrl_handle_command+21Fj
.text:00006CC9                                         ; _winctrl_handle_command+22Bj ...
.text:00006CC9                 mov     edx, [ebp+arg_0] ; jumptable 00006087 default case
.text:00006CCC                 cmp     dword ptr [edx+0BCh], 0
.text:00006CD3                 jz      loc_6DD8
.text:00006CD9                 mov     ds:?cc@?BF@??winctrl_handle_command@@9@9.lStructSize, 24h ; '$' ; `winctrl_handle_command'::`21'::cc
.text:00006CE3                 mov     eax, [ebp+arg_0]
.text:00006CE6                 mov     ecx, [eax]
.text:00006CE8                 mov     ds:?cc@?BF@??winctrl_handle_command@@9@9.hwndOwner, ecx
.text:00006CEE                 mov     edx, dword ptr ds:_hinst
.text:00006CF4                 mov     ds:?cc@?BF@??winctrl_handle_command@@9@9.hInstance, edx
.text:00006CFA                 mov     ds:?cc@?BF@??winctrl_handle_command@@9@9.lpCustColors, offset ?custom@?BF@??winctrl_handle_command@@9@9 ; `winctrl_handle_command'::`21'::custom
.text:00006D04                 mov     eax, [ebp+arg_0]
.text:00006D07                 movzx   ecx, byte ptr [eax+0C0h]
.text:00006D0E                 mov     edx, [ebp+arg_0]
.text:00006D11                 movzx   eax, byte ptr [edx+0C1h]
.text:00006D18                 shl     eax, 8
.text:00006D1B                 or      ecx, eax
.text:00006D1D                 mov     edx, [ebp+arg_0]
.text:00006D20                 movzx   eax, byte ptr [edx+0C2h]
.text:00006D27                 shl     eax, 10h
.text:00006D2A                 or      ecx, eax
.text:00006D2C                 mov     ds:?cc@?BF@??winctrl_handle_command@@9@9.rgbResult, ecx
.text:00006D32                 mov     ds:?cc@?BF@??winctrl_handle_command@@9@9.Flags, 3
.text:00006D3C                 mov     esi, esp
.text:00006D3E                 push    offset ?cc@?BF@??winctrl_handle_command@@9@9 ; LPCHOOSECOLORA
.text:00006D43                 call    dword ptr ds:__imp__ChooseColorA@4 ; ChooseColorA(x)
.text:00006D49                 cmp     esi, esp
.text:00006D4B                 call    __RTC_CheckEsp
.text:00006D50                 test    eax, eax
.text:00006D52                 jz      short loc_6DA9
.text:00006D54                 mov     ecx, ds:?cc@?BF@??winctrl_handle_command@@9@9.rgbResult
.text:00006D5A                 and     ecx, 0FFh
.text:00006D60                 mov     edx, [ebp+arg_0]
.text:00006D63                 mov     [edx+0C0h], cl
.text:00006D69                 mov     eax, ds:?cc@?BF@??winctrl_handle_command@@9@9.rgbResult
.text:00006D6E                 shr     eax, 8
.text:00006D71                 movzx   ecx, al
.text:00006D74                 and     ecx, 0FFh
.text:00006D7A                 mov     edx, [ebp+arg_0]
.text:00006D7D                 mov     [edx+0C1h], cl
.text:00006D83                 mov     eax, ds:?cc@?BF@??winctrl_handle_command@@9@9.rgbResult
.text:00006D88                 shr     eax, 10h
.text:00006D8B                 movzx   ecx, al
.text:00006D8E                 and     ecx, 0FFh
.text:00006D94                 mov     edx, [ebp+arg_0]
.text:00006D97                 mov     [edx+0C2h], cl
.text:00006D9D                 mov     eax, [ebp+arg_0]
.text:00006DA0                 mov     byte ptr [eax+0C3h], 1
.text:00006DA7                 jmp     short loc_6DB3
.text:00006DA9 ; ---------------------------------------------------------------------------
.text:00006DA9
.text:00006DA9 loc_6DA9:                               ; CODE XREF: _winctrl_handle_command+EF6j
.text:00006DA9                 mov     ecx, [ebp+arg_0]
.text:00006DAC                 mov     byte ptr [ecx+0C3h], 0
.text:00006DB3
.text:00006DB3 loc_6DB3:                               ; CODE XREF: _winctrl_handle_command+F4Bj
.text:00006DB3                 mov     esi, esp
.text:00006DB5                 push    4
.text:00006DB7                 mov     edx, [ebp+arg_0]
.text:00006DBA                 mov     eax, [edx+30h]
.text:00006DBD                 push    eax
.text:00006DBE                 mov     ecx, [ebp+arg_0]
.text:00006DC1                 push    ecx
.text:00006DC2                 mov     edx, [ebp+var_C]
.text:00006DC5                 push    edx
.text:00006DC6                 mov     eax, [ebp+var_C]
.text:00006DC9                 mov     ecx, [eax+10h]
.text:00006DCC                 call    ecx
.text:00006DCE                 add     esp, 10h
.text:00006DD1                 cmp     esi, esp
.text:00006DD3                 call    __RTC_CheckEsp
.text:00006DD8
.text:00006DD8 loc_6DD8:                               ; CODE XREF: _winctrl_handle_command+E77j
.text:00006DD8                 mov     eax, [ebp+var_18]
.text:00006DDB
.text:00006DDB loc_6DDB:                               ; CODE XREF: _winctrl_handle_command+65j
.text:00006DDB                                         ; _winctrl_handle_command+C3j ...
.text:00006DDB                 push    edx
.text:00006DDC                 mov     ecx, ebp
.text:00006DDE                 push    eax
.text:00006DDF                 lea     edx, $LN82
.text:00006DE5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00006DEA                 pop     eax
.text:00006DEB                 pop     edx
.text:00006DEC                 pop     edi
.text:00006DED                 pop     esi
.text:00006DEE                 mov     ecx, [ebp+var_4]
.text:00006DF1                 xor     ecx, ebp
.text:00006DF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00006DF8                 add     esp, 258h
.text:00006DFE                 cmp     ebp, esp
.text:00006E00                 call    __RTC_CheckEsp
.text:00006E05                 mov     esp, ebp
.text:00006E07                 pop     ebp
.text:00006E08                 retn
.text:00006E08 _winctrl_handle_command endp
.text:00006E08
.text:00006E08 ; ---------------------------------------------------------------------------
.text:00006E09                 align 4
.text:00006E0C $LN82           dd 6                    ; DATA XREF: _winctrl_handle_command+F83o
.text:00006E10                 dd offset $LN81
.text:00006E14 $LN81           db 0CCh                 ; DATA XREF: .text:00006E10o
.text:00006E15                 db 3 dup(0FFh)
.text:00006E18                 dd 10h
.text:00006E1C                 dd offset $LN75         ; "r"
.text:00006E20                 dd 0FFFFFFBCh, 8
.text:00006E28                 dd offset $LN76         ; "s"
.text:00006E2C                 dd 0FFFFFF4Ch, 58h
.text:00006E34                 dd offset $LN77         ; "of"
.text:00006E38                 dd 0FFFFFE40h, 104h
.text:00006E40                 dd offset $LN78         ; "filename"
.text:00006E44                 dd 0FFFFFDFCh, 3Ch
.text:00006E4C                 dd offset $LN79
.text:00006E50                 dd 0FFFFFDB8h, 3Ch
.text:00006E58                 dd offset $LN80
.text:00006E5C $LN80           db 6Ch, 66h, 0          ; DATA XREF: .text:00006E58o
.text:00006E5F $LN79           db 63h                  ; DATA XREF: .text:00006E4Co
.text:00006E60                 db 66h, 0
.text:00006E62 $LN78           db 'filename',0         ; DATA XREF: .text:00006E40o
.text:00006E6B $LN77           db 'of',0               ; DATA XREF: .text:00006E34o
.text:00006E6E $LN76           db 's',0                ; DATA XREF: .text:00006E28o
.text:00006E70 $LN75           db 'r',0                ; DATA XREF: .text:00006E1Co
.text:00006E72                 align 4
.text:00006E74 $LN83           dd offset $LN60         ; DATA XREF: _winctrl_handle_command+22Br
.text:00006E74                 dd offset $LN48         ; jump table for switch statement
.text:00006E74                 dd offset $LN43
.text:00006E74                 dd offset $LN38
.text:00006E74                 dd offset $LN33
.text:00006E74                 dd offset $LN61
.text:00006E74                 dd offset $LN20
.text:00006E74                 dd offset $LN9
.text:00006E94                 db 8 dup(0CCh)
.text:00006E9C
.text:00006E9C ; =============== S U B R O U T I N E =======================================
.text:00006E9C
.text:00006E9C ; Attributes: bp-based frame
.text:00006E9C
.text:00006E9C _winctrl_set_focus proc near            ; CODE XREF: _winctrl_handle_command+293p
.text:00006E9C                                         ; _winctrl_handle_command+2F4p ...
.text:00006E9C
.text:00006E9C arg_0           = dword ptr  8
.text:00006E9C arg_4           = dword ptr  0Ch
.text:00006E9C arg_8           = dword ptr  10h
.text:00006E9C
.text:00006E9C                 push    ebp
.text:00006E9D                 mov     ebp, esp
.text:00006E9F                 cmp     [ebp+arg_8], 0
.text:00006EA3                 jz      short loc_6EC5
.text:00006EA5                 mov     eax, [ebp+arg_4]
.text:00006EA8                 cmp     dword ptr [eax+34h], 0
.text:00006EAC                 jz      short loc_6EBA
.text:00006EAE                 mov     ecx, [ebp+arg_4]
.text:00006EB1                 mov     edx, [ebp+arg_4]
.text:00006EB4                 mov     eax, [edx+34h]
.text:00006EB7                 mov     [ecx+38h], eax
.text:00006EBA
.text:00006EBA loc_6EBA:                               ; CODE XREF: _winctrl_set_focus+10j
.text:00006EBA                 mov     ecx, [ebp+arg_4]
.text:00006EBD                 mov     edx, [ebp+arg_0]
.text:00006EC0                 mov     [ecx+34h], edx
.text:00006EC3                 jmp     short loc_6EEC
.text:00006EC5 ; ---------------------------------------------------------------------------
.text:00006EC5
.text:00006EC5 loc_6EC5:                               ; CODE XREF: _winctrl_set_focus+7j
.text:00006EC5                 cmp     [ebp+arg_8], 0
.text:00006EC9                 jnz     short loc_6EEC
.text:00006ECB                 mov     eax, [ebp+arg_4]
.text:00006ECE                 mov     ecx, [eax+34h]
.text:00006ED1                 cmp     ecx, [ebp+arg_0]
.text:00006ED4                 jnz     short loc_6EEC
.text:00006ED6                 mov     edx, [ebp+arg_4]
.text:00006ED9                 mov     eax, [ebp+arg_4]
.text:00006EDC                 mov     ecx, [eax+34h]
.text:00006EDF                 mov     [edx+38h], ecx
.text:00006EE2                 mov     edx, [ebp+arg_4]
.text:00006EE5                 mov     dword ptr [edx+34h], 0
.text:00006EEC
.text:00006EEC loc_6EEC:                               ; CODE XREF: _winctrl_set_focus+27j
.text:00006EEC                                         ; _winctrl_set_focus+2Dj ...
.text:00006EEC                 pop     ebp
.text:00006EED                 retn
.text:00006EED _winctrl_set_focus endp
.text:00006EED
.text:00006EED ; ---------------------------------------------------------------------------
.text:00006EEE                 db 0Eh dup(0CCh)
.text:00006EFC
.text:00006EFC ; =============== S U B R O U T I N E =======================================
.text:00006EFC
.text:00006EFC ; Attributes: bp-based frame
.text:00006EFC
.text:00006EFC                 public _winctrl_context_help
.text:00006EFC _winctrl_context_help proc near
.text:00006EFC
.text:00006EFC var_8           = dword ptr -8
.text:00006EFC var_4           = dword ptr -4
.text:00006EFC arg_0           = dword ptr  8
.text:00006EFC arg_4           = dword ptr  0Ch
.text:00006EFC arg_8           = dword ptr  10h
.text:00006EFC
.text:00006EFC                 push    ebp
.text:00006EFD                 mov     ebp, esp
.text:00006EFF                 sub     esp, 8
.text:00006F02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006F09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F10                 mov     [ebp+var_8], 0
.text:00006F17                 mov     [ebp+var_4], 0
.text:00006F1E                 jmp     short loc_6F29
.text:00006F20 ; ---------------------------------------------------------------------------
.text:00006F20
.text:00006F20 loc_6F20:                               ; CODE XREF: _winctrl_context_help:loc_6F56j
.text:00006F20                 mov     eax, [ebp+var_4]
.text:00006F23                 add     eax, 1
.text:00006F26                 mov     [ebp+var_4], eax
.text:00006F29
.text:00006F29 loc_6F29:                               ; CODE XREF: _winctrl_context_help+22j
.text:00006F29                 mov     ecx, [ebp+arg_0]
.text:00006F2C                 mov     edx, [ebp+var_4]
.text:00006F2F                 cmp     edx, [ecx+24h]
.text:00006F32                 jge     short loc_6F58
.text:00006F34                 mov     eax, [ebp+arg_8]
.text:00006F37                 push    eax
.text:00006F38                 mov     ecx, [ebp+var_4]
.text:00006F3B                 mov     edx, [ebp+arg_0]
.text:00006F3E                 mov     eax, [edx+ecx*4+4]
.text:00006F42                 push    eax
.text:00006F43                 call    _winctrl_findbyid
.text:00006F48                 add     esp, 8
.text:00006F4B                 mov     [ebp+var_8], eax
.text:00006F4E                 cmp     [ebp+var_8], 0
.text:00006F52                 jz      short loc_6F56
.text:00006F54                 jmp     short loc_6F58
.text:00006F56 ; ---------------------------------------------------------------------------
.text:00006F56
.text:00006F56 loc_6F56:                               ; CODE XREF: _winctrl_context_help+56j
.text:00006F56                 jmp     short loc_6F20
.text:00006F58 ; ---------------------------------------------------------------------------
.text:00006F58
.text:00006F58 loc_6F58:                               ; CODE XREF: _winctrl_context_help+36j
.text:00006F58                                         ; _winctrl_context_help+58j
.text:00006F58                 cmp     [ebp+var_8], 0
.text:00006F5C                 jnz     short loc_6F62
.text:00006F5E                 xor     eax, eax
.text:00006F60                 jmp     short loc_6F93
.text:00006F62 ; ---------------------------------------------------------------------------
.text:00006F62
.text:00006F62 loc_6F62:                               ; CODE XREF: _winctrl_context_help+60j
.text:00006F62                 mov     ecx, [ebp+var_8]
.text:00006F65                 cmp     dword ptr [ecx], 0
.text:00006F68                 jz      short loc_6F75
.text:00006F6A                 mov     edx, [ebp+var_8]
.text:00006F6D                 mov     eax, [edx]
.text:00006F6F                 cmp     dword ptr [eax+18h], 0
.text:00006F73                 jnz     short loc_6F79
.text:00006F75
.text:00006F75 loc_6F75:                               ; CODE XREF: _winctrl_context_help+6Cj
.text:00006F75                 xor     eax, eax
.text:00006F77                 jmp     short loc_6F93
.text:00006F79 ; ---------------------------------------------------------------------------
.text:00006F79
.text:00006F79 loc_6F79:                               ; CODE XREF: _winctrl_context_help+77j
.text:00006F79                 mov     ecx, [ebp+var_8]
.text:00006F7C                 mov     edx, [ecx]
.text:00006F7E                 mov     eax, [edx+18h]
.text:00006F81                 push    eax
.text:00006F82                 mov     ecx, [ebp+arg_4]
.text:00006F85                 push    ecx
.text:00006F86                 call    _launch_help
.text:00006F8B                 add     esp, 8
.text:00006F8E                 mov     eax, 1
.text:00006F93
.text:00006F93 loc_6F93:                               ; CODE XREF: _winctrl_context_help+64j
.text:00006F93                                         ; _winctrl_context_help+7Bj
.text:00006F93                 add     esp, 8
.text:00006F96                 cmp     ebp, esp
.text:00006F98                 call    __RTC_CheckEsp
.text:00006F9D                 mov     esp, ebp
.text:00006F9F                 pop     ebp
.text:00006FA0                 retn
.text:00006FA0 _winctrl_context_help endp
.text:00006FA0
.text:00006FA0 ; ---------------------------------------------------------------------------
.text:00006FA1                 db 0Bh dup(0CCh)
.text:00006FAC
.text:00006FAC ; =============== S U B R O U T I N E =======================================
.text:00006FAC
.text:00006FAC ; Attributes: bp-based frame
.text:00006FAC
.text:00006FAC                 public _dlg_radiobutton_set
.text:00006FAC _dlg_radiobutton_set proc near
.text:00006FAC
.text:00006FAC var_8           = dword ptr -8
.text:00006FAC var_4           = dword ptr -4
.text:00006FAC arg_0           = dword ptr  8
.text:00006FAC arg_4           = dword ptr  0Ch
.text:00006FAC arg_8           = dword ptr  10h
.text:00006FAC
.text:00006FAC                 push    ebp
.text:00006FAD                 mov     ebp, esp
.text:00006FAF                 sub     esp, 8
.text:00006FB2                 push    esi
.text:00006FB3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006FBA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006FC1                 mov     eax, [ebp+arg_4]
.text:00006FC4                 mov     [ebp+var_4], eax
.text:00006FC7                 mov     ecx, [ebp+arg_0]
.text:00006FCA                 push    ecx
.text:00006FCB                 mov     edx, [ebp+var_4]
.text:00006FCE                 push    edx
.text:00006FCF                 call    _dlg_findbyctrl
.text:00006FD4                 add     esp, 8
.text:00006FD7                 mov     [ebp+var_8], eax
.text:00006FDA                 cmp     [ebp+var_8], 0
.text:00006FDE                 jz      short loc_6FEA
.text:00006FE0                 mov     eax, [ebp+var_8]
.text:00006FE3                 mov     ecx, [eax]
.text:00006FE5                 cmp     dword ptr [ecx], 2
.text:00006FE8                 jz      short loc_7001
.text:00006FEA
.text:00006FEA loc_6FEA:                               ; CODE XREF: _dlg_radiobutton_set+32j
.text:00006FEA                 push    80Dh            ; Line
.text:00006FEF                 push    offset $SG89958 ; "..\\..\\winctrls.c"
.text:00006FF4                 push    offset $SG89959 ; "c && c->ctrl->generic.type == CTRL_RADI"...
.text:00006FF9                 call    __wassert
.text:00006FFE ; ---------------------------------------------------------------------------
.text:00006FFE                 add     esp, 0Ch
.text:00007001
.text:00007001 loc_7001:                               ; CODE XREF: _dlg_radiobutton_set+3Cj
.text:00007001                 mov     eax, [ebp+var_8]
.text:00007004                 mov     ecx, [eax+4]
.text:00007007                 mov     edx, [ebp+arg_8]
.text:0000700A                 lea     eax, [ecx+edx+1]
.text:0000700E                 mov     esi, esp
.text:00007010                 push    eax             ; nIDCheckButton
.text:00007011                 mov     ecx, [ebp+var_8]
.text:00007014                 mov     edx, [ecx]
.text:00007016                 mov     eax, [ebp+var_8]
.text:00007019                 mov     ecx, [eax+4]
.text:0000701C                 add     ecx, [edx+24h]
.text:0000701F                 push    ecx             ; nIDLastButton
.text:00007020                 mov     edx, [ebp+var_8]
.text:00007023                 mov     eax, [edx+4]
.text:00007026                 add     eax, 1
.text:00007029                 push    eax             ; nIDFirstButton
.text:0000702A                 mov     ecx, [ebp+var_4]
.text:0000702D                 mov     edx, [ecx]
.text:0000702F                 push    edx             ; hDlg
.text:00007030                 call    dword ptr ds:__imp__CheckRadioButton@16 ; CheckRadioButton(x,x,x,x)
.text:00007036                 cmp     esi, esp
.text:00007038                 call    __RTC_CheckEsp
.text:0000703D                 pop     esi
.text:0000703E                 add     esp, 8
.text:00007041                 cmp     ebp, esp
.text:00007043                 call    __RTC_CheckEsp
.text:00007048                 mov     esp, ebp
.text:0000704A                 pop     ebp
.text:0000704B                 retn
.text:0000704B _dlg_radiobutton_set endp
.text:0000704B
.text:0000704C
.text:0000704C ; =============== S U B R O U T I N E =======================================
.text:0000704C
.text:0000704C ; Attributes: bp-based frame
.text:0000704C
.text:0000704C _dlg_findbyctrl proc near               ; CODE XREF: _dlg_radiobutton_set+23p
.text:0000704C                                         ; _dlg_radiobutton_get+2Ap ...
.text:0000704C
.text:0000704C var_8           = dword ptr -8
.text:0000704C var_4           = dword ptr -4
.text:0000704C arg_0           = dword ptr  8
.text:0000704C arg_4           = dword ptr  0Ch
.text:0000704C
.text:0000704C                 push    ebp
.text:0000704D                 mov     ebp, esp
.text:0000704F                 sub     esp, 8
.text:00007052                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007059                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007060                 mov     [ebp+var_4], 0
.text:00007067                 jmp     short loc_7072
.text:00007069 ; ---------------------------------------------------------------------------
.text:00007069
.text:00007069 loc_7069:                               ; CODE XREF: _dlg_findbyctrl:loc_70A2j
.text:00007069                 mov     eax, [ebp+var_4]
.text:0000706C                 add     eax, 1
.text:0000706F                 mov     [ebp+var_4], eax
.text:00007072
.text:00007072 loc_7072:                               ; CODE XREF: _dlg_findbyctrl+1Bj
.text:00007072                 mov     ecx, [ebp+arg_0]
.text:00007075                 mov     edx, [ebp+var_4]
.text:00007078                 cmp     edx, [ecx+24h]
.text:0000707B                 jge     short loc_70A4
.text:0000707D                 mov     eax, [ebp+arg_4]
.text:00007080                 push    eax
.text:00007081                 mov     ecx, [ebp+var_4]
.text:00007084                 mov     edx, [ebp+arg_0]
.text:00007087                 mov     eax, [edx+ecx*4+4]
.text:0000708B                 push    eax
.text:0000708C                 call    _winctrl_findbyctrl
.text:00007091                 add     esp, 8
.text:00007094                 mov     [ebp+var_8], eax
.text:00007097                 cmp     [ebp+var_8], 0
.text:0000709B                 jz      short loc_70A2
.text:0000709D                 mov     eax, [ebp+var_8]
.text:000070A0                 jmp     short loc_70A6
.text:000070A2 ; ---------------------------------------------------------------------------
.text:000070A2
.text:000070A2 loc_70A2:                               ; CODE XREF: _dlg_findbyctrl+4Fj
.text:000070A2                 jmp     short loc_7069
.text:000070A4 ; ---------------------------------------------------------------------------
.text:000070A4
.text:000070A4 loc_70A4:                               ; CODE XREF: _dlg_findbyctrl+2Fj
.text:000070A4                 xor     eax, eax
.text:000070A6
.text:000070A6 loc_70A6:                               ; CODE XREF: _dlg_findbyctrl+54j
.text:000070A6                 add     esp, 8
.text:000070A9                 cmp     ebp, esp
.text:000070AB                 call    __RTC_CheckEsp
.text:000070B0                 mov     esp, ebp
.text:000070B2                 pop     ebp
.text:000070B3                 retn
.text:000070B3 _dlg_findbyctrl endp
.text:000070B3
.text:000070B3 ; ---------------------------------------------------------------------------
.text:000070B4                 db 8 dup(0CCh)
.text:000070BC
.text:000070BC ; =============== S U B R O U T I N E =======================================
.text:000070BC
.text:000070BC ; Attributes: bp-based frame
.text:000070BC
.text:000070BC                 public _dlg_radiobutton_get
.text:000070BC _dlg_radiobutton_get proc near
.text:000070BC
.text:000070BC var_C           = dword ptr -0Ch
.text:000070BC var_8           = dword ptr -8
.text:000070BC var_4           = dword ptr -4
.text:000070BC arg_0           = dword ptr  8
.text:000070BC arg_4           = dword ptr  0Ch
.text:000070BC
.text:000070BC                 push    ebp
.text:000070BD                 mov     ebp, esp
.text:000070BF                 sub     esp, 0Ch
.text:000070C2                 push    esi
.text:000070C3                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000070CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000070D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070D8                 mov     eax, [ebp+arg_4]
.text:000070DB                 mov     [ebp+var_4], eax
.text:000070DE                 mov     ecx, [ebp+arg_0]
.text:000070E1                 push    ecx
.text:000070E2                 mov     edx, [ebp+var_4]
.text:000070E5                 push    edx
.text:000070E6                 call    _dlg_findbyctrl
.text:000070EB                 add     esp, 8
.text:000070EE                 mov     [ebp+var_8], eax
.text:000070F1                 cmp     [ebp+var_8], 0
.text:000070F5                 jz      short loc_7101
.text:000070F7                 mov     eax, [ebp+var_8]
.text:000070FA                 mov     ecx, [eax]
.text:000070FC                 cmp     dword ptr [ecx], 2
.text:000070FF                 jz      short loc_7118
.text:00007101
.text:00007101 loc_7101:                               ; CODE XREF: _dlg_radiobutton_get+39j
.text:00007101                 push    819h            ; Line
.text:00007106                 push    offset $SG89970 ; "..\\..\\winctrls.c"
.text:0000710B                 push    offset $SG89971 ; "c && c->ctrl->generic.type == CTRL_RADI"...
.text:00007110                 call    __wassert
.text:00007115 ; ---------------------------------------------------------------------------
.text:00007115                 add     esp, 0Ch
.text:00007118
.text:00007118 loc_7118:                               ; CODE XREF: _dlg_radiobutton_get+43j
.text:00007118                 mov     [ebp+var_C], 0
.text:0000711F                 jmp     short loc_712A
.text:00007121 ; ---------------------------------------------------------------------------
.text:00007121
.text:00007121 loc_7121:                               ; CODE XREF: _dlg_radiobutton_get:loc_7163j
.text:00007121                 mov     eax, [ebp+var_C]
.text:00007124                 add     eax, 1
.text:00007127                 mov     [ebp+var_C], eax
.text:0000712A
.text:0000712A loc_712A:                               ; CODE XREF: _dlg_radiobutton_get+63j
.text:0000712A                 mov     ecx, [ebp+var_8]
.text:0000712D                 mov     edx, [ecx]
.text:0000712F                 mov     eax, [ebp+var_C]
.text:00007132                 cmp     eax, [edx+24h]
.text:00007135                 jge     short loc_7165
.text:00007137                 mov     ecx, [ebp+var_8]
.text:0000713A                 mov     edx, [ecx+4]
.text:0000713D                 mov     eax, [ebp+var_C]
.text:00007140                 lea     ecx, [edx+eax+1]
.text:00007144                 mov     esi, esp
.text:00007146                 push    ecx             ; nIDButton
.text:00007147                 mov     edx, [ebp+var_4]
.text:0000714A                 mov     eax, [edx]
.text:0000714C                 push    eax             ; hDlg
.text:0000714D                 call    dword ptr ds:__imp__IsDlgButtonChecked@8 ; IsDlgButtonChecked(x,x)
.text:00007153                 cmp     esi, esp
.text:00007155                 call    __RTC_CheckEsp
.text:0000715A                 test    eax, eax
.text:0000715C                 jz      short loc_7163
.text:0000715E                 mov     eax, [ebp+var_C]
.text:00007161                 jmp     short loc_7187
.text:00007163 ; ---------------------------------------------------------------------------
.text:00007163
.text:00007163 loc_7163:                               ; CODE XREF: _dlg_radiobutton_get+A0j
.text:00007163                 jmp     short loc_7121
.text:00007165 ; ---------------------------------------------------------------------------
.text:00007165
.text:00007165 loc_7165:                               ; CODE XREF: _dlg_radiobutton_get+79j
.text:00007165                 mov     ecx, offset $SG89977 ; "No radio button was checked?!"
.text:0000716A                 test    ecx, ecx
.text:0000716C                 jz      short loc_7185
.text:0000716E                 push    81Dh            ; Line
.text:00007173                 push    offset $SG89978 ; "..\\..\\winctrls.c"
.text:00007178                 push    offset $SG89979 ; "!\"No radio button was checked?!\""
.text:0000717D                 call    __wassert
.text:00007182 ; ---------------------------------------------------------------------------
.text:00007182                 add     esp, 0Ch
.text:00007185
.text:00007185 loc_7185:                               ; CODE XREF: _dlg_radiobutton_get+B0j
.text:00007185                 xor     eax, eax
.text:00007187
.text:00007187 loc_7187:                               ; CODE XREF: _dlg_radiobutton_get+A5j
.text:00007187                 pop     esi
.text:00007188                 add     esp, 0Ch
.text:0000718B                 cmp     ebp, esp
.text:0000718D                 call    __RTC_CheckEsp
.text:00007192                 mov     esp, ebp
.text:00007194                 pop     ebp
.text:00007195                 retn
.text:00007195 _dlg_radiobutton_get endp
.text:00007195
.text:00007195 ; ---------------------------------------------------------------------------
.text:00007196                 db 6 dup(0CCh)
.text:0000719C
.text:0000719C ; =============== S U B R O U T I N E =======================================
.text:0000719C
.text:0000719C ; Attributes: bp-based frame
.text:0000719C
.text:0000719C                 public _dlg_checkbox_set
.text:0000719C _dlg_checkbox_set proc near
.text:0000719C
.text:0000719C var_8           = dword ptr -8
.text:0000719C var_4           = dword ptr -4
.text:0000719C arg_0           = dword ptr  8
.text:0000719C arg_4           = dword ptr  0Ch
.text:0000719C arg_8           = dword ptr  10h
.text:0000719C
.text:0000719C                 push    ebp
.text:0000719D                 mov     ebp, esp
.text:0000719F                 sub     esp, 8
.text:000071A2                 push    esi
.text:000071A3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000071AA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071B1                 mov     eax, [ebp+arg_4]
.text:000071B4                 mov     [ebp+var_4], eax
.text:000071B7                 mov     ecx, [ebp+arg_0]
.text:000071BA                 push    ecx
.text:000071BB                 mov     edx, [ebp+var_4]
.text:000071BE                 push    edx
.text:000071BF                 call    _dlg_findbyctrl
.text:000071C4                 add     esp, 8
.text:000071C7                 mov     [ebp+var_8], eax
.text:000071CA                 cmp     [ebp+var_8], 0
.text:000071CE                 jz      short loc_71DA
.text:000071D0                 mov     eax, [ebp+var_8]
.text:000071D3                 mov     ecx, [eax]
.text:000071D5                 cmp     dword ptr [ecx], 3
.text:000071D8                 jz      short loc_71F1
.text:000071DA
.text:000071DA loc_71DA:                               ; CODE XREF: _dlg_checkbox_set+32j
.text:000071DA                 push    825h            ; Line
.text:000071DF                 push    offset $SG89991 ; "..\\..\\winctrls.c"
.text:000071E4                 push    offset $SG89992 ; "c && c->ctrl->generic.type == CTRL_CHEC"...
.text:000071E9                 call    __wassert
.text:000071EE ; ---------------------------------------------------------------------------
.text:000071EE                 add     esp, 0Ch
.text:000071F1
.text:000071F1 loc_71F1:                               ; CODE XREF: _dlg_checkbox_set+3Cj
.text:000071F1                 xor     eax, eax
.text:000071F3                 cmp     [ebp+arg_8], 0
.text:000071F7                 setnz   al
.text:000071FA                 mov     esi, esp
.text:000071FC                 push    eax             ; uCheck
.text:000071FD                 mov     ecx, [ebp+var_8]
.text:00007200                 mov     edx, [ecx+4]
.text:00007203                 push    edx             ; nIDButton
.text:00007204                 mov     eax, [ebp+var_4]
.text:00007207                 mov     ecx, [eax]
.text:00007209                 push    ecx             ; hDlg
.text:0000720A                 call    dword ptr ds:__imp__CheckDlgButton@12 ; CheckDlgButton(x,x,x)
.text:00007210                 cmp     esi, esp
.text:00007212                 call    __RTC_CheckEsp
.text:00007217                 pop     esi
.text:00007218                 add     esp, 8
.text:0000721B                 cmp     ebp, esp
.text:0000721D                 call    __RTC_CheckEsp
.text:00007222                 mov     esp, ebp
.text:00007224                 pop     ebp
.text:00007225                 retn
.text:00007225 _dlg_checkbox_set endp
.text:00007225
.text:00007225 ; ---------------------------------------------------------------------------
.text:00007226                 db 6 dup(0CCh)
.text:0000722C
.text:0000722C ; =============== S U B R O U T I N E =======================================
.text:0000722C
.text:0000722C ; Attributes: bp-based frame
.text:0000722C
.text:0000722C                 public _dlg_checkbox_get
.text:0000722C _dlg_checkbox_get proc near
.text:0000722C
.text:0000722C var_8           = dword ptr -8
.text:0000722C var_4           = dword ptr -4
.text:0000722C arg_0           = dword ptr  8
.text:0000722C arg_4           = dword ptr  0Ch
.text:0000722C
.text:0000722C                 push    ebp
.text:0000722D                 mov     ebp, esp
.text:0000722F                 sub     esp, 8
.text:00007232                 push    esi
.text:00007233                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000723A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007241                 mov     eax, [ebp+arg_4]
.text:00007244                 mov     [ebp+var_4], eax
.text:00007247                 mov     ecx, [ebp+arg_0]
.text:0000724A                 push    ecx
.text:0000724B                 mov     edx, [ebp+var_4]
.text:0000724E                 push    edx
.text:0000724F                 call    _dlg_findbyctrl
.text:00007254                 add     esp, 8
.text:00007257                 mov     [ebp+var_8], eax
.text:0000725A                 cmp     [ebp+var_8], 0
.text:0000725E                 jz      short loc_726A
.text:00007260                 mov     eax, [ebp+var_8]
.text:00007263                 mov     ecx, [eax]
.text:00007265                 cmp     dword ptr [ecx], 3
.text:00007268                 jz      short loc_7281
.text:0000726A
.text:0000726A loc_726A:                               ; CODE XREF: _dlg_checkbox_get+32j
.text:0000726A                 push    82Dh            ; Line
.text:0000726F                 push    offset $SG90002 ; "..\\..\\winctrls.c"
.text:00007274                 push    offset $SG90003 ; "c && c->ctrl->generic.type == CTRL_CHEC"...
.text:00007279                 call    __wassert
.text:0000727E ; ---------------------------------------------------------------------------
.text:0000727E                 add     esp, 0Ch
.text:00007281
.text:00007281 loc_7281:                               ; CODE XREF: _dlg_checkbox_get+3Cj
.text:00007281                 mov     esi, esp
.text:00007283                 mov     eax, [ebp+var_8]
.text:00007286                 mov     ecx, [eax+4]
.text:00007289                 push    ecx             ; nIDButton
.text:0000728A                 mov     edx, [ebp+var_4]
.text:0000728D                 mov     eax, [edx]
.text:0000728F                 push    eax             ; hDlg
.text:00007290                 call    dword ptr ds:__imp__IsDlgButtonChecked@8 ; IsDlgButtonChecked(x,x)
.text:00007296                 cmp     esi, esp
.text:00007298                 call    __RTC_CheckEsp
.text:0000729D                 neg     eax
.text:0000729F                 sbb     eax, eax
.text:000072A1                 neg     eax
.text:000072A3                 pop     esi
.text:000072A4                 add     esp, 8
.text:000072A7                 cmp     ebp, esp
.text:000072A9                 call    __RTC_CheckEsp
.text:000072AE                 mov     esp, ebp
.text:000072B0                 pop     ebp
.text:000072B1                 retn
.text:000072B1 _dlg_checkbox_get endp
.text:000072B1
.text:000072B1 ; ---------------------------------------------------------------------------
.text:000072B2                 db 0Ah dup(0CCh)
.text:000072BC
.text:000072BC ; =============== S U B R O U T I N E =======================================
.text:000072BC
.text:000072BC ; Attributes: bp-based frame
.text:000072BC
.text:000072BC ; int __cdecl dlg_editbox_set(int, int, LPCSTR lpString)
.text:000072BC                 public _dlg_editbox_set
.text:000072BC _dlg_editbox_set proc near
.text:000072BC
.text:000072BC var_8           = dword ptr -8
.text:000072BC var_4           = dword ptr -4
.text:000072BC arg_0           = dword ptr  8
.text:000072BC arg_4           = dword ptr  0Ch
.text:000072BC lpString        = dword ptr  10h
.text:000072BC
.text:000072BC                 push    ebp
.text:000072BD                 mov     ebp, esp
.text:000072BF                 sub     esp, 8
.text:000072C2                 push    esi
.text:000072C3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000072CA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000072D1                 mov     eax, [ebp+arg_4]
.text:000072D4                 mov     [ebp+var_4], eax
.text:000072D7                 mov     ecx, [ebp+arg_0]
.text:000072DA                 push    ecx
.text:000072DB                 mov     edx, [ebp+var_4]
.text:000072DE                 push    edx
.text:000072DF                 call    _dlg_findbyctrl
.text:000072E4                 add     esp, 8
.text:000072E7                 mov     [ebp+var_8], eax
.text:000072EA                 cmp     [ebp+var_8], 0
.text:000072EE                 jz      short loc_72FA
.text:000072F0                 mov     eax, [ebp+var_8]
.text:000072F3                 mov     ecx, [eax]
.text:000072F5                 cmp     dword ptr [ecx], 1
.text:000072F8                 jz      short loc_7311
.text:000072FA
.text:000072FA loc_72FA:                               ; CODE XREF: _dlg_editbox_set+32j
.text:000072FA                 push    835h            ; Line
.text:000072FF                 push    offset $SG90015 ; "..\\..\\winctrls.c"
.text:00007304                 push    offset $SG90016 ; "c && c->ctrl->generic.type == CTRL_EDIT"...
.text:00007309                 call    __wassert
.text:0000730E ; ---------------------------------------------------------------------------
.text:0000730E                 add     esp, 0Ch
.text:00007311
.text:00007311 loc_7311:                               ; CODE XREF: _dlg_editbox_set+3Cj
.text:00007311                 mov     esi, esp
.text:00007313                 mov     eax, [ebp+lpString]
.text:00007316                 push    eax             ; lpString
.text:00007317                 mov     ecx, [ebp+var_8]
.text:0000731A                 mov     edx, [ecx+4]
.text:0000731D                 add     edx, 1
.text:00007320                 push    edx             ; nIDDlgItem
.text:00007321                 mov     eax, [ebp+var_4]
.text:00007324                 mov     ecx, [eax]
.text:00007326                 push    ecx             ; hDlg
.text:00007327                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:0000732D                 cmp     esi, esp
.text:0000732F                 call    __RTC_CheckEsp
.text:00007334                 pop     esi
.text:00007335                 add     esp, 8
.text:00007338                 cmp     ebp, esp
.text:0000733A                 call    __RTC_CheckEsp
.text:0000733F                 mov     esp, ebp
.text:00007341                 pop     ebp
.text:00007342                 retn
.text:00007342 _dlg_editbox_set endp
.text:00007342
.text:00007342 ; ---------------------------------------------------------------------------
.text:00007343                 db 9 dup(0CCh)
.text:0000734C
.text:0000734C ; =============== S U B R O U T I N E =======================================
.text:0000734C
.text:0000734C ; Attributes: bp-based frame
.text:0000734C
.text:0000734C                 public _dlg_editbox_get
.text:0000734C _dlg_editbox_get proc near
.text:0000734C
.text:0000734C var_8           = dword ptr -8
.text:0000734C var_4           = dword ptr -4
.text:0000734C arg_0           = dword ptr  8
.text:0000734C arg_4           = dword ptr  0Ch
.text:0000734C
.text:0000734C                 push    ebp
.text:0000734D                 mov     ebp, esp
.text:0000734F                 sub     esp, 8
.text:00007352                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007359                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007360                 mov     eax, [ebp+arg_4]
.text:00007363                 mov     [ebp+var_4], eax
.text:00007366                 mov     ecx, [ebp+arg_0]
.text:00007369                 push    ecx
.text:0000736A                 mov     edx, [ebp+var_4]
.text:0000736D                 push    edx
.text:0000736E                 call    _dlg_findbyctrl
.text:00007373                 add     esp, 8
.text:00007376                 mov     [ebp+var_8], eax
.text:00007379                 cmp     [ebp+var_8], 0
.text:0000737D                 jz      short loc_7389
.text:0000737F                 mov     eax, [ebp+var_8]
.text:00007382                 mov     ecx, [eax]
.text:00007384                 cmp     dword ptr [ecx], 1
.text:00007387                 jz      short loc_73A0
.text:00007389
.text:00007389 loc_7389:                               ; CODE XREF: _dlg_editbox_get+31j
.text:00007389                 push    83Dh            ; Line
.text:0000738E                 push    offset $SG90026 ; "..\\..\\winctrls.c"
.text:00007393                 push    offset $SG90027 ; "c && c->ctrl->generic.type == CTRL_EDIT"...
.text:00007398                 call    __wassert
.text:0000739D ; ---------------------------------------------------------------------------
.text:0000739D                 add     esp, 0Ch
.text:000073A0
.text:000073A0 loc_73A0:                               ; CODE XREF: _dlg_editbox_get+3Bj
.text:000073A0                 mov     eax, [ebp+var_8]
.text:000073A3                 mov     ecx, [eax+4]
.text:000073A6                 add     ecx, 1
.text:000073A9                 push    ecx
.text:000073AA                 mov     edx, [ebp+var_4]
.text:000073AD                 mov     eax, [edx]
.text:000073AF                 push    eax
.text:000073B0                 call    _GetDlgItemText_alloc
.text:000073B5                 add     esp, 8
.text:000073B8                 add     esp, 8
.text:000073BB                 cmp     ebp, esp
.text:000073BD                 call    __RTC_CheckEsp
.text:000073C2                 mov     esp, ebp
.text:000073C4                 pop     ebp
.text:000073C5                 retn
.text:000073C5 _dlg_editbox_get endp
.text:000073C5
.text:000073C5 ; ---------------------------------------------------------------------------
.text:000073C6                 db 6 dup(0CCh)
.text:000073CC
.text:000073CC ; =============== S U B R O U T I N E =======================================
.text:000073CC
.text:000073CC ; Attributes: bp-based frame
.text:000073CC
.text:000073CC                 public _dlg_listbox_clear
.text:000073CC _dlg_listbox_clear proc near
.text:000073CC
.text:000073CC var_10          = dword ptr -10h
.text:000073CC Msg             = dword ptr -0Ch
.text:000073CC var_8           = dword ptr -8
.text:000073CC var_4           = dword ptr -4
.text:000073CC arg_0           = dword ptr  8
.text:000073CC arg_4           = dword ptr  0Ch
.text:000073CC
.text:000073CC                 push    ebp
.text:000073CD                 mov     ebp, esp
.text:000073CF                 sub     esp, 10h
.text:000073D2                 push    esi
.text:000073D3                 mov     eax, 0CCCCCCCCh
.text:000073D8                 mov     [ebp+var_10], eax
.text:000073DB                 mov     [ebp+Msg], eax
.text:000073DE                 mov     [ebp+var_8], eax
.text:000073E1                 mov     [ebp+var_4], eax
.text:000073E4                 mov     eax, [ebp+arg_4]
.text:000073E7                 mov     [ebp+var_4], eax
.text:000073EA                 mov     ecx, [ebp+arg_0]
.text:000073ED                 push    ecx
.text:000073EE                 mov     edx, [ebp+var_4]
.text:000073F1                 push    edx
.text:000073F2                 call    _dlg_findbyctrl
.text:000073F7                 add     esp, 8
.text:000073FA                 mov     [ebp+var_8], eax
.text:000073FD                 cmp     [ebp+var_8], 0
.text:00007401                 jz      short loc_7422
.text:00007403                 mov     eax, [ebp+var_8]
.text:00007406                 mov     ecx, [eax]
.text:00007408                 cmp     dword ptr [ecx], 5
.text:0000740B                 jz      short loc_7439
.text:0000740D                 mov     edx, [ebp+var_8]
.text:00007410                 mov     eax, [edx]
.text:00007412                 cmp     dword ptr [eax], 1
.text:00007415                 jnz     short loc_7422
.text:00007417                 mov     ecx, [ebp+var_8]
.text:0000741A                 mov     edx, [ecx]
.text:0000741C                 cmp     dword ptr [edx+28h], 0
.text:00007420                 jnz     short loc_7439
.text:00007422
.text:00007422 loc_7422:                               ; CODE XREF: _dlg_listbox_clear+35j
.text:00007422                                         ; _dlg_listbox_clear+49j
.text:00007422                 push    84Ah            ; Line
.text:00007427                 push    offset $SG90038 ; "..\\..\\winctrls.c"
.text:0000742C                 push    offset $SG90039 ; "c && (c->ctrl->generic.type == CTRL_LIS"...
.text:00007431                 call    __wassert
.text:00007436 ; ---------------------------------------------------------------------------
.text:00007436                 add     esp, 0Ch
.text:00007439
.text:00007439 loc_7439:                               ; CODE XREF: _dlg_listbox_clear+3Fj
.text:00007439                                         ; _dlg_listbox_clear+54j
.text:00007439                 mov     ecx, [ebp+var_8]
.text:0000743C                 mov     edx, [ecx]
.text:0000743E                 cmp     dword ptr [edx], 5
.text:00007441                 jnz     short loc_7457
.text:00007443                 mov     eax, [ebp+var_8]
.text:00007446                 mov     ecx, [eax]
.text:00007448                 cmp     dword ptr [ecx+20h], 0
.text:0000744C                 jz      short loc_7457
.text:0000744E                 mov     [ebp+var_10], 184h
.text:00007455                 jmp     short loc_745E
.text:00007457 ; ---------------------------------------------------------------------------
.text:00007457
.text:00007457 loc_7457:                               ; CODE XREF: _dlg_listbox_clear+75j
.text:00007457                                         ; _dlg_listbox_clear+80j
.text:00007457                 mov     [ebp+var_10], 14Bh
.text:0000745E
.text:0000745E loc_745E:                               ; CODE XREF: _dlg_listbox_clear+89j
.text:0000745E                 mov     edx, [ebp+var_10]
.text:00007461                 mov     [ebp+Msg], edx
.text:00007464                 mov     esi, esp
.text:00007466                 push    0               ; lParam
.text:00007468                 push    0               ; wParam
.text:0000746A                 mov     eax, [ebp+Msg]
.text:0000746D                 push    eax             ; Msg
.text:0000746E                 mov     ecx, [ebp+var_8]
.text:00007471                 mov     edx, [ecx+4]
.text:00007474                 add     edx, 1
.text:00007477                 push    edx             ; nIDDlgItem
.text:00007478                 mov     eax, [ebp+var_4]
.text:0000747B                 mov     ecx, [eax]
.text:0000747D                 push    ecx             ; hDlg
.text:0000747E                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007484                 cmp     esi, esp
.text:00007486                 call    __RTC_CheckEsp
.text:0000748B                 pop     esi
.text:0000748C                 add     esp, 10h
.text:0000748F                 cmp     ebp, esp
.text:00007491                 call    __RTC_CheckEsp
.text:00007496                 mov     esp, ebp
.text:00007498                 pop     ebp
.text:00007499                 retn
.text:00007499 _dlg_listbox_clear endp
.text:00007499
.text:00007499 ; ---------------------------------------------------------------------------
.text:0000749A                 align 4
.text:0000749C
.text:0000749C ; =============== S U B R O U T I N E =======================================
.text:0000749C
.text:0000749C ; Attributes: bp-based frame
.text:0000749C
.text:0000749C ; int __cdecl dlg_listbox_del(int, int, WPARAM wParam)
.text:0000749C                 public _dlg_listbox_del
.text:0000749C _dlg_listbox_del proc near
.text:0000749C
.text:0000749C var_10          = dword ptr -10h
.text:0000749C Msg             = dword ptr -0Ch
.text:0000749C var_8           = dword ptr -8
.text:0000749C var_4           = dword ptr -4
.text:0000749C arg_0           = dword ptr  8
.text:0000749C arg_4           = dword ptr  0Ch
.text:0000749C wParam          = dword ptr  10h
.text:0000749C
.text:0000749C                 push    ebp
.text:0000749D                 mov     ebp, esp
.text:0000749F                 sub     esp, 10h
.text:000074A2                 push    esi
.text:000074A3                 mov     eax, 0CCCCCCCCh
.text:000074A8                 mov     [ebp+var_10], eax
.text:000074AB                 mov     [ebp+Msg], eax
.text:000074AE                 mov     [ebp+var_8], eax
.text:000074B1                 mov     [ebp+var_4], eax
.text:000074B4                 mov     eax, [ebp+arg_4]
.text:000074B7                 mov     [ebp+var_4], eax
.text:000074BA                 mov     ecx, [ebp+arg_0]
.text:000074BD                 push    ecx
.text:000074BE                 mov     edx, [ebp+var_4]
.text:000074C1                 push    edx
.text:000074C2                 call    _dlg_findbyctrl
.text:000074C7                 add     esp, 8
.text:000074CA                 mov     [ebp+var_8], eax
.text:000074CD                 cmp     [ebp+var_8], 0
.text:000074D1                 jz      short loc_74F2
.text:000074D3                 mov     eax, [ebp+var_8]
.text:000074D6                 mov     ecx, [eax]
.text:000074D8                 cmp     dword ptr [ecx], 5
.text:000074DB                 jz      short loc_7509
.text:000074DD                 mov     edx, [ebp+var_8]
.text:000074E0                 mov     eax, [edx]
.text:000074E2                 cmp     dword ptr [eax], 1
.text:000074E5                 jnz     short loc_74F2
.text:000074E7                 mov     ecx, [ebp+var_8]
.text:000074EA                 mov     edx, [ecx]
.text:000074EC                 cmp     dword ptr [edx+28h], 0
.text:000074F0                 jnz     short loc_7509
.text:000074F2
.text:000074F2 loc_74F2:                               ; CODE XREF: _dlg_listbox_del+35j
.text:000074F2                                         ; _dlg_listbox_del+49j
.text:000074F2                 push    858h            ; Line
.text:000074F7                 push    offset $SG90052 ; "..\\..\\winctrls.c"
.text:000074FC                 push    offset $SG90053 ; "c && (c->ctrl->generic.type == CTRL_LIS"...
.text:00007501                 call    __wassert
.text:00007506 ; ---------------------------------------------------------------------------
.text:00007506                 add     esp, 0Ch
.text:00007509
.text:00007509 loc_7509:                               ; CODE XREF: _dlg_listbox_del+3Fj
.text:00007509                                         ; _dlg_listbox_del+54j
.text:00007509                 mov     ecx, [ebp+var_8]
.text:0000750C                 mov     edx, [ecx]
.text:0000750E                 cmp     dword ptr [edx], 5
.text:00007511                 jnz     short loc_7527
.text:00007513                 mov     eax, [ebp+var_8]
.text:00007516                 mov     ecx, [eax]
.text:00007518                 cmp     dword ptr [ecx+20h], 0
.text:0000751C                 jz      short loc_7527
.text:0000751E                 mov     [ebp+var_10], 182h
.text:00007525                 jmp     short loc_752E
.text:00007527 ; ---------------------------------------------------------------------------
.text:00007527
.text:00007527 loc_7527:                               ; CODE XREF: _dlg_listbox_del+75j
.text:00007527                                         ; _dlg_listbox_del+80j
.text:00007527                 mov     [ebp+var_10], 144h
.text:0000752E
.text:0000752E loc_752E:                               ; CODE XREF: _dlg_listbox_del+89j
.text:0000752E                 mov     edx, [ebp+var_10]
.text:00007531                 mov     [ebp+Msg], edx
.text:00007534                 mov     esi, esp
.text:00007536                 push    0               ; lParam
.text:00007538                 mov     eax, [ebp+wParam]
.text:0000753B                 push    eax             ; wParam
.text:0000753C                 mov     ecx, [ebp+Msg]
.text:0000753F                 push    ecx             ; Msg
.text:00007540                 mov     edx, [ebp+var_8]
.text:00007543                 mov     eax, [edx+4]
.text:00007546                 add     eax, 1
.text:00007549                 push    eax             ; nIDDlgItem
.text:0000754A                 mov     ecx, [ebp+var_4]
.text:0000754D                 mov     edx, [ecx]
.text:0000754F                 push    edx             ; hDlg
.text:00007550                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007556                 cmp     esi, esp
.text:00007558                 call    __RTC_CheckEsp
.text:0000755D                 pop     esi
.text:0000755E                 add     esp, 10h
.text:00007561                 cmp     ebp, esp
.text:00007563                 call    __RTC_CheckEsp
.text:00007568                 mov     esp, ebp
.text:0000756A                 pop     ebp
.text:0000756B                 retn
.text:0000756B _dlg_listbox_del endp
.text:0000756B
.text:0000756C
.text:0000756C ; =============== S U B R O U T I N E =======================================
.text:0000756C
.text:0000756C ; Attributes: bp-based frame
.text:0000756C
.text:0000756C ; int __cdecl dlg_listbox_add(int, int, LPARAM lParam)
.text:0000756C                 public _dlg_listbox_add
.text:0000756C _dlg_listbox_add proc near
.text:0000756C
.text:0000756C var_10          = dword ptr -10h
.text:0000756C Msg             = dword ptr -0Ch
.text:0000756C var_8           = dword ptr -8
.text:0000756C var_4           = dword ptr -4
.text:0000756C arg_0           = dword ptr  8
.text:0000756C arg_4           = dword ptr  0Ch
.text:0000756C lParam          = dword ptr  10h
.text:0000756C
.text:0000756C                 push    ebp
.text:0000756D                 mov     ebp, esp
.text:0000756F                 sub     esp, 10h
.text:00007572                 push    esi
.text:00007573                 mov     eax, 0CCCCCCCCh
.text:00007578                 mov     [ebp+var_10], eax
.text:0000757B                 mov     [ebp+Msg], eax
.text:0000757E                 mov     [ebp+var_8], eax
.text:00007581                 mov     [ebp+var_4], eax
.text:00007584                 mov     eax, [ebp+arg_4]
.text:00007587                 mov     [ebp+var_4], eax
.text:0000758A                 mov     ecx, [ebp+arg_0]
.text:0000758D                 push    ecx
.text:0000758E                 mov     edx, [ebp+var_4]
.text:00007591                 push    edx
.text:00007592                 call    _dlg_findbyctrl
.text:00007597                 add     esp, 8
.text:0000759A                 mov     [ebp+var_8], eax
.text:0000759D                 cmp     [ebp+var_8], 0
.text:000075A1                 jz      short loc_75C2
.text:000075A3                 mov     eax, [ebp+var_8]
.text:000075A6                 mov     ecx, [eax]
.text:000075A8                 cmp     dword ptr [ecx], 5
.text:000075AB                 jz      short loc_75D9
.text:000075AD                 mov     edx, [ebp+var_8]
.text:000075B0                 mov     eax, [edx]
.text:000075B2                 cmp     dword ptr [eax], 1
.text:000075B5                 jnz     short loc_75C2
.text:000075B7                 mov     ecx, [ebp+var_8]
.text:000075BA                 mov     edx, [ecx]
.text:000075BC                 cmp     dword ptr [edx+28h], 0
.text:000075C0                 jnz     short loc_75D9
.text:000075C2
.text:000075C2 loc_75C2:                               ; CODE XREF: _dlg_listbox_add+35j
.text:000075C2                                         ; _dlg_listbox_add+49j
.text:000075C2                 push    866h            ; Line
.text:000075C7                 push    offset $SG90066 ; "..\\..\\winctrls.c"
.text:000075CC                 push    offset $SG90067 ; "c && (c->ctrl->generic.type == CTRL_LIS"...
.text:000075D1                 call    __wassert
.text:000075D6 ; ---------------------------------------------------------------------------
.text:000075D6                 add     esp, 0Ch
.text:000075D9
.text:000075D9 loc_75D9:                               ; CODE XREF: _dlg_listbox_add+3Fj
.text:000075D9                                         ; _dlg_listbox_add+54j
.text:000075D9                 mov     ecx, [ebp+var_8]
.text:000075DC                 mov     edx, [ecx]
.text:000075DE                 cmp     dword ptr [edx], 5
.text:000075E1                 jnz     short loc_75F7
.text:000075E3                 mov     eax, [ebp+var_8]
.text:000075E6                 mov     ecx, [eax]
.text:000075E8                 cmp     dword ptr [ecx+20h], 0
.text:000075EC                 jz      short loc_75F7
.text:000075EE                 mov     [ebp+var_10], 180h
.text:000075F5                 jmp     short loc_75FE
.text:000075F7 ; ---------------------------------------------------------------------------
.text:000075F7
.text:000075F7 loc_75F7:                               ; CODE XREF: _dlg_listbox_add+75j
.text:000075F7                                         ; _dlg_listbox_add+80j
.text:000075F7                 mov     [ebp+var_10], 143h
.text:000075FE
.text:000075FE loc_75FE:                               ; CODE XREF: _dlg_listbox_add+89j
.text:000075FE                 mov     edx, [ebp+var_10]
.text:00007601                 mov     [ebp+Msg], edx
.text:00007604                 mov     esi, esp
.text:00007606                 mov     eax, [ebp+lParam]
.text:00007609                 push    eax             ; lParam
.text:0000760A                 push    0               ; wParam
.text:0000760C                 mov     ecx, [ebp+Msg]
.text:0000760F                 push    ecx             ; Msg
.text:00007610                 mov     edx, [ebp+var_8]
.text:00007613                 mov     eax, [edx+4]
.text:00007616                 add     eax, 1
.text:00007619                 push    eax             ; nIDDlgItem
.text:0000761A                 mov     ecx, [ebp+var_4]
.text:0000761D                 mov     edx, [ecx]
.text:0000761F                 push    edx             ; hDlg
.text:00007620                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007626                 cmp     esi, esp
.text:00007628                 call    __RTC_CheckEsp
.text:0000762D                 pop     esi
.text:0000762E                 add     esp, 10h
.text:00007631                 cmp     ebp, esp
.text:00007633                 call    __RTC_CheckEsp
.text:00007638                 mov     esp, ebp
.text:0000763A                 pop     ebp
.text:0000763B                 retn
.text:0000763B _dlg_listbox_add endp
.text:0000763B
.text:0000763C
.text:0000763C ; =============== S U B R O U T I N E =======================================
.text:0000763C
.text:0000763C ; Attributes: bp-based frame
.text:0000763C
.text:0000763C ; int __cdecl dlg_listbox_addwithid(int, int, LPARAM lParam, LPARAM)
.text:0000763C                 public _dlg_listbox_addwithid
.text:0000763C _dlg_listbox_addwithid proc near
.text:0000763C
.text:0000763C var_1C          = dword ptr -1Ch
.text:0000763C var_18          = dword ptr -18h
.text:0000763C wParam          = dword ptr -14h
.text:0000763C var_10          = dword ptr -10h
.text:0000763C Msg             = dword ptr -0Ch
.text:0000763C var_8           = dword ptr -8
.text:0000763C var_4           = dword ptr -4
.text:0000763C arg_0           = dword ptr  8
.text:0000763C arg_4           = dword ptr  0Ch
.text:0000763C lParam          = dword ptr  10h
.text:0000763C arg_C           = dword ptr  14h
.text:0000763C
.text:0000763C                 push    ebp
.text:0000763D                 mov     ebp, esp
.text:0000763F                 sub     esp, 1Ch
.text:00007642                 push    esi
.text:00007643                 mov     eax, 0CCCCCCCCh
.text:00007648                 mov     [ebp+var_1C], eax
.text:0000764B                 mov     [ebp+var_18], eax
.text:0000764E                 mov     [ebp+wParam], eax
.text:00007651                 mov     [ebp+var_10], eax
.text:00007654                 mov     [ebp+Msg], eax
.text:00007657                 mov     [ebp+var_8], eax
.text:0000765A                 mov     [ebp+var_4], eax
.text:0000765D                 mov     eax, [ebp+arg_4]
.text:00007660                 mov     [ebp+var_4], eax
.text:00007663                 mov     ecx, [ebp+arg_0]
.text:00007666                 push    ecx
.text:00007667                 mov     edx, [ebp+var_4]
.text:0000766A                 push    edx
.text:0000766B                 call    _dlg_findbyctrl
.text:00007670                 add     esp, 8
.text:00007673                 mov     [ebp+var_8], eax
.text:00007676                 cmp     [ebp+var_8], 0
.text:0000767A                 jz      short loc_769B
.text:0000767C                 mov     eax, [ebp+var_8]
.text:0000767F                 mov     ecx, [eax]
.text:00007681                 cmp     dword ptr [ecx], 5
.text:00007684                 jz      short loc_76B2
.text:00007686                 mov     edx, [ebp+var_8]
.text:00007689                 mov     eax, [edx]
.text:0000768B                 cmp     dword ptr [eax], 1
.text:0000768E                 jnz     short loc_769B
.text:00007690                 mov     ecx, [ebp+var_8]
.text:00007693                 mov     edx, [ecx]
.text:00007695                 cmp     dword ptr [edx+28h], 0
.text:00007699                 jnz     short loc_76B2
.text:0000769B
.text:0000769B loc_769B:                               ; CODE XREF: _dlg_listbox_addwithid+3Ej
.text:0000769B                                         ; _dlg_listbox_addwithid+52j
.text:0000769B                 push    87Ch            ; Line
.text:000076A0                 push    offset $SG90085 ; "..\\..\\winctrls.c"
.text:000076A5                 push    offset $SG90086 ; "c && (c->ctrl->generic.type == CTRL_LIS"...
.text:000076AA                 call    __wassert
.text:000076AF ; ---------------------------------------------------------------------------
.text:000076AF                 add     esp, 0Ch
.text:000076B2
.text:000076B2 loc_76B2:                               ; CODE XREF: _dlg_listbox_addwithid+48j
.text:000076B2                                         ; _dlg_listbox_addwithid+5Dj
.text:000076B2                 mov     ecx, [ebp+var_8]
.text:000076B5                 mov     edx, [ecx]
.text:000076B7                 cmp     dword ptr [edx], 5
.text:000076BA                 jnz     short loc_76D0
.text:000076BC                 mov     eax, [ebp+var_8]
.text:000076BF                 mov     ecx, [eax]
.text:000076C1                 cmp     dword ptr [ecx+20h], 0
.text:000076C5                 jz      short loc_76D0
.text:000076C7                 mov     [ebp+var_18], 180h
.text:000076CE                 jmp     short loc_76D7
.text:000076D0 ; ---------------------------------------------------------------------------
.text:000076D0
.text:000076D0 loc_76D0:                               ; CODE XREF: _dlg_listbox_addwithid+7Ej
.text:000076D0                                         ; _dlg_listbox_addwithid+89j
.text:000076D0                 mov     [ebp+var_18], 143h
.text:000076D7
.text:000076D7 loc_76D7:                               ; CODE XREF: _dlg_listbox_addwithid+92j
.text:000076D7                 mov     edx, [ebp+var_18]
.text:000076DA                 mov     [ebp+Msg], edx
.text:000076DD                 mov     eax, [ebp+var_8]
.text:000076E0                 mov     ecx, [eax]
.text:000076E2                 cmp     dword ptr [ecx], 5
.text:000076E5                 jnz     short loc_76FB
.text:000076E7                 mov     edx, [ebp+var_8]
.text:000076EA                 mov     eax, [edx]
.text:000076EC                 cmp     dword ptr [eax+20h], 0
.text:000076F0                 jz      short loc_76FB
.text:000076F2                 mov     [ebp+var_1C], 19Ah
.text:000076F9                 jmp     short loc_7702
.text:000076FB ; ---------------------------------------------------------------------------
.text:000076FB
.text:000076FB loc_76FB:                               ; CODE XREF: _dlg_listbox_addwithid+A9j
.text:000076FB                                         ; _dlg_listbox_addwithid+B4j
.text:000076FB                 mov     [ebp+var_1C], 151h
.text:00007702
.text:00007702 loc_7702:                               ; CODE XREF: _dlg_listbox_addwithid+BDj
.text:00007702                 mov     ecx, [ebp+var_1C]
.text:00007705                 mov     [ebp+var_10], ecx
.text:00007708                 mov     esi, esp
.text:0000770A                 mov     edx, [ebp+lParam]
.text:0000770D                 push    edx             ; lParam
.text:0000770E                 push    0               ; wParam
.text:00007710                 mov     eax, [ebp+Msg]
.text:00007713                 push    eax             ; Msg
.text:00007714                 mov     ecx, [ebp+var_8]
.text:00007717                 mov     edx, [ecx+4]
.text:0000771A                 add     edx, 1
.text:0000771D                 push    edx             ; nIDDlgItem
.text:0000771E                 mov     eax, [ebp+var_4]
.text:00007721                 mov     ecx, [eax]
.text:00007723                 push    ecx             ; hDlg
.text:00007724                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:0000772A                 cmp     esi, esp
.text:0000772C                 call    __RTC_CheckEsp
.text:00007731                 mov     [ebp+wParam], eax
.text:00007734                 mov     esi, esp
.text:00007736                 mov     edx, [ebp+arg_C]
.text:00007739                 push    edx             ; lParam
.text:0000773A                 mov     eax, [ebp+wParam]
.text:0000773D                 push    eax             ; wParam
.text:0000773E                 mov     ecx, [ebp+var_10]
.text:00007741                 push    ecx             ; Msg
.text:00007742                 mov     edx, [ebp+var_8]
.text:00007745                 mov     eax, [edx+4]
.text:00007748                 add     eax, 1
.text:0000774B                 push    eax             ; nIDDlgItem
.text:0000774C                 mov     ecx, [ebp+var_4]
.text:0000774F                 mov     edx, [ecx]
.text:00007751                 push    edx             ; hDlg
.text:00007752                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007758                 cmp     esi, esp
.text:0000775A                 call    __RTC_CheckEsp
.text:0000775F                 pop     esi
.text:00007760                 add     esp, 1Ch
.text:00007763                 cmp     ebp, esp
.text:00007765                 call    __RTC_CheckEsp
.text:0000776A                 mov     esp, ebp
.text:0000776C                 pop     ebp
.text:0000776D                 retn
.text:0000776D _dlg_listbox_addwithid endp
.text:0000776D
.text:0000776D ; ---------------------------------------------------------------------------
.text:0000776E                 db 0Eh dup(0CCh)
.text:0000777C
.text:0000777C ; =============== S U B R O U T I N E =======================================
.text:0000777C
.text:0000777C ; Attributes: bp-based frame
.text:0000777C
.text:0000777C ; int __cdecl dlg_listbox_getid(int, int, WPARAM wParam)
.text:0000777C                 public _dlg_listbox_getid
.text:0000777C _dlg_listbox_getid proc near
.text:0000777C
.text:0000777C Msg             = dword ptr -0Ch
.text:0000777C var_8           = dword ptr -8
.text:0000777C var_4           = dword ptr -4
.text:0000777C arg_0           = dword ptr  8
.text:0000777C arg_4           = dword ptr  0Ch
.text:0000777C wParam          = dword ptr  10h
.text:0000777C
.text:0000777C                 push    ebp
.text:0000777D                 mov     ebp, esp
.text:0000777F                 sub     esp, 0Ch
.text:00007782                 push    esi
.text:00007783                 mov     [ebp+Msg], 0CCCCCCCCh
.text:0000778A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007791                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007798                 mov     eax, [ebp+arg_4]
.text:0000779B                 mov     [ebp+var_4], eax
.text:0000779E                 mov     ecx, [ebp+arg_0]
.text:000077A1                 push    ecx
.text:000077A2                 mov     edx, [ebp+var_4]
.text:000077A5                 push    edx
.text:000077A6                 call    _dlg_findbyctrl
.text:000077AB                 add     esp, 8
.text:000077AE                 mov     [ebp+var_8], eax
.text:000077B1                 cmp     [ebp+var_8], 0
.text:000077B5                 jz      short loc_77C1
.text:000077B7                 mov     eax, [ebp+var_8]
.text:000077BA                 mov     ecx, [eax]
.text:000077BC                 cmp     dword ptr [ecx], 5
.text:000077BF                 jz      short loc_77D8
.text:000077C1
.text:000077C1 loc_77C1:                               ; CODE XREF: _dlg_listbox_getid+39j
.text:000077C1                 push    88Ah            ; Line
.text:000077C6                 push    offset $SG90101 ; "..\\..\\winctrls.c"
.text:000077CB                 push    offset $SG90102 ; "c && c->ctrl->generic.type == CTRL_LIST"...
.text:000077D0                 call    __wassert
.text:000077D5 ; ---------------------------------------------------------------------------
.text:000077D5                 add     esp, 0Ch
.text:000077D8
.text:000077D8 loc_77D8:                               ; CODE XREF: _dlg_listbox_getid+43j
.text:000077D8                 mov     eax, [ebp+var_8]
.text:000077DB                 mov     ecx, [eax]
.text:000077DD                 mov     edx, [ecx+20h]
.text:000077E0                 neg     edx
.text:000077E2                 sbb     edx, edx
.text:000077E4                 and     edx, 49h
.text:000077E7                 add     edx, 150h
.text:000077ED                 mov     [ebp+Msg], edx
.text:000077F0                 mov     esi, esp
.text:000077F2                 push    0               ; lParam
.text:000077F4                 mov     eax, [ebp+wParam]
.text:000077F7                 push    eax             ; wParam
.text:000077F8                 mov     ecx, [ebp+Msg]
.text:000077FB                 push    ecx             ; Msg
.text:000077FC                 mov     edx, [ebp+var_8]
.text:000077FF                 mov     eax, [edx+4]
.text:00007802                 add     eax, 1
.text:00007805                 push    eax             ; nIDDlgItem
.text:00007806                 mov     ecx, [ebp+var_4]
.text:00007809                 mov     edx, [ecx]
.text:0000780B                 push    edx             ; hDlg
.text:0000780C                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007812                 cmp     esi, esp
.text:00007814                 call    __RTC_CheckEsp
.text:00007819                 pop     esi
.text:0000781A                 add     esp, 0Ch
.text:0000781D                 cmp     ebp, esp
.text:0000781F                 call    __RTC_CheckEsp
.text:00007824                 mov     esp, ebp
.text:00007826                 pop     ebp
.text:00007827                 retn
.text:00007827 _dlg_listbox_getid endp
.text:00007827
.text:00007827 ; ---------------------------------------------------------------------------
.text:00007828                 db 4 dup(0CCh)
.text:0000782C
.text:0000782C ; =============== S U B R O U T I N E =======================================
.text:0000782C
.text:0000782C ; Attributes: bp-based frame
.text:0000782C
.text:0000782C                 public _dlg_listbox_index
.text:0000782C _dlg_listbox_index proc near
.text:0000782C
.text:0000782C var_10          = dword ptr -10h
.text:0000782C Msg             = dword ptr -0Ch
.text:0000782C var_8           = dword ptr -8
.text:0000782C var_4           = dword ptr -4
.text:0000782C arg_0           = dword ptr  8
.text:0000782C arg_4           = dword ptr  0Ch
.text:0000782C
.text:0000782C                 push    ebp
.text:0000782D                 mov     ebp, esp
.text:0000782F                 sub     esp, 10h
.text:00007832                 push    esi
.text:00007833                 mov     eax, 0CCCCCCCCh
.text:00007838                 mov     [ebp+var_10], eax
.text:0000783B                 mov     [ebp+Msg], eax
.text:0000783E                 mov     [ebp+var_8], eax
.text:00007841                 mov     [ebp+var_4], eax
.text:00007844                 mov     eax, [ebp+arg_4]
.text:00007847                 mov     [ebp+var_4], eax
.text:0000784A                 mov     ecx, [ebp+arg_0]
.text:0000784D                 push    ecx
.text:0000784E                 mov     edx, [ebp+var_4]
.text:00007851                 push    edx
.text:00007852                 call    _dlg_findbyctrl
.text:00007857                 add     esp, 8
.text:0000785A                 mov     [ebp+var_8], eax
.text:0000785D                 cmp     [ebp+var_8], 0
.text:00007861                 jz      short loc_786D
.text:00007863                 mov     eax, [ebp+var_8]
.text:00007866                 mov     ecx, [eax]
.text:00007868                 cmp     dword ptr [ecx], 5
.text:0000786B                 jz      short loc_7884
.text:0000786D
.text:0000786D loc_786D:                               ; CODE XREF: _dlg_listbox_index+35j
.text:0000786D                 push    896h            ; Line
.text:00007872                 push    offset $SG90114 ; "..\\..\\winctrls.c"
.text:00007877                 push    offset $SG90115 ; "c && c->ctrl->generic.type == CTRL_LIST"...
.text:0000787C                 call    __wassert
.text:00007881 ; ---------------------------------------------------------------------------
.text:00007881                 add     esp, 0Ch
.text:00007884
.text:00007884 loc_7884:                               ; CODE XREF: _dlg_listbox_index+3Fj
.text:00007884                 mov     eax, [ebp+var_8]
.text:00007887                 mov     ecx, [eax]
.text:00007889                 cmp     dword ptr [ecx+28h], 0
.text:0000788D                 jz      short loc_78ED
.text:0000788F                 mov     edx, [ebp+var_8]
.text:00007892                 mov     eax, [edx]
.text:00007894                 cmp     dword ptr [eax+20h], 0
.text:00007898                 jnz     short loc_78B1
.text:0000789A                 push    898h            ; Line
.text:0000789F                 push    offset $SG90118 ; "..\\..\\winctrls.c"
.text:000078A4                 push    offset $SG90119 ; "c->ctrl->listbox.height != 0"
.text:000078A9                 call    __wassert
.text:000078AE ; ---------------------------------------------------------------------------
.text:000078AE                 add     esp, 0Ch
.text:000078B1
.text:000078B1 loc_78B1:                               ; CODE XREF: _dlg_listbox_index+6Cj
.text:000078B1                 mov     esi, esp
.text:000078B3                 push    0               ; lParam
.text:000078B5                 push    0               ; wParam
.text:000078B7                 push    190h            ; Msg
.text:000078BC                 mov     edx, [ebp+var_8]
.text:000078BF                 mov     eax, [edx+4]
.text:000078C2                 add     eax, 1
.text:000078C5                 push    eax             ; nIDDlgItem
.text:000078C6                 mov     ecx, [ebp+var_4]
.text:000078C9                 mov     edx, [ecx]
.text:000078CB                 push    edx             ; hDlg
.text:000078CC                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000078D2                 cmp     esi, esp
.text:000078D4                 call    __RTC_CheckEsp
.text:000078D9                 mov     [ebp+var_10], eax
.text:000078DC                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:000078E0                 jz      short loc_78E8
.text:000078E2                 cmp     [ebp+var_10], 1
.text:000078E6                 jle     short loc_78ED
.text:000078E8
.text:000078E8 loc_78E8:                               ; CODE XREF: _dlg_listbox_index+B4j
.text:000078E8                 or      eax, 0FFFFFFFFh
.text:000078EB                 jmp     short loc_793F
.text:000078ED ; ---------------------------------------------------------------------------
.text:000078ED
.text:000078ED loc_78ED:                               ; CODE XREF: _dlg_listbox_index+61j
.text:000078ED                                         ; _dlg_listbox_index+BAj
.text:000078ED                 mov     eax, [ebp+var_8]
.text:000078F0                 mov     ecx, [eax]
.text:000078F2                 mov     edx, [ecx+20h]
.text:000078F5                 neg     edx
.text:000078F7                 sbb     edx, edx
.text:000078F9                 and     edx, 41h
.text:000078FC                 add     edx, 147h
.text:00007902                 mov     [ebp+Msg], edx
.text:00007905                 mov     esi, esp
.text:00007907                 push    0               ; lParam
.text:00007909                 push    0               ; wParam
.text:0000790B                 mov     eax, [ebp+Msg]
.text:0000790E                 push    eax             ; Msg
.text:0000790F                 mov     ecx, [ebp+var_8]
.text:00007912                 mov     edx, [ecx+4]
.text:00007915                 add     edx, 1
.text:00007918                 push    edx             ; nIDDlgItem
.text:00007919                 mov     eax, [ebp+var_4]
.text:0000791C                 mov     ecx, [eax]
.text:0000791E                 push    ecx             ; hDlg
.text:0000791F                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007925                 cmp     esi, esp
.text:00007927                 call    __RTC_CheckEsp
.text:0000792C                 mov     [ebp+var_10], eax
.text:0000792F                 cmp     [ebp+var_10], 0FFFFFFFFh
.text:00007933                 jnz     short loc_793C
.text:00007935                 or      eax, 0FFFFFFFFh
.text:00007938                 jmp     short loc_793F
.text:0000793A ; ---------------------------------------------------------------------------
.text:0000793A                 jmp     short loc_793F
.text:0000793C ; ---------------------------------------------------------------------------
.text:0000793C
.text:0000793C loc_793C:                               ; CODE XREF: _dlg_listbox_index+107j
.text:0000793C                 mov     eax, [ebp+var_10]
.text:0000793F
.text:0000793F loc_793F:                               ; CODE XREF: _dlg_listbox_index+BFj
.text:0000793F                                         ; _dlg_listbox_index+10Cj ...
.text:0000793F                 pop     esi
.text:00007940                 add     esp, 10h
.text:00007943                 cmp     ebp, esp
.text:00007945                 call    __RTC_CheckEsp
.text:0000794A                 mov     esp, ebp
.text:0000794C                 pop     ebp
.text:0000794D                 retn
.text:0000794D _dlg_listbox_index endp
.text:0000794D
.text:0000794D ; ---------------------------------------------------------------------------
.text:0000794E                 db 0Eh dup(0CCh)
.text:0000795C
.text:0000795C ; =============== S U B R O U T I N E =======================================
.text:0000795C
.text:0000795C ; Attributes: bp-based frame
.text:0000795C
.text:0000795C ; int __cdecl dlg_listbox_issel(int, int, WPARAM wParam)
.text:0000795C                 public _dlg_listbox_issel
.text:0000795C _dlg_listbox_issel proc near
.text:0000795C
.text:0000795C var_8           = dword ptr -8
.text:0000795C var_4           = dword ptr -4
.text:0000795C arg_0           = dword ptr  8
.text:0000795C arg_4           = dword ptr  0Ch
.text:0000795C wParam          = dword ptr  10h
.text:0000795C
.text:0000795C                 push    ebp
.text:0000795D                 mov     ebp, esp
.text:0000795F                 sub     esp, 8
.text:00007962                 push    esi
.text:00007963                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000796A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007971                 mov     eax, [ebp+arg_4]
.text:00007974                 mov     [ebp+var_4], eax
.text:00007977                 mov     ecx, [ebp+arg_0]
.text:0000797A                 push    ecx
.text:0000797B                 mov     edx, [ebp+var_4]
.text:0000797E                 push    edx
.text:0000797F                 call    _dlg_findbyctrl
.text:00007984                 add     esp, 8
.text:00007987                 mov     [ebp+var_8], eax
.text:0000798A                 cmp     [ebp+var_8], 0
.text:0000798E                 jz      short loc_79B0
.text:00007990                 mov     eax, [ebp+var_8]
.text:00007993                 mov     ecx, [eax]
.text:00007995                 cmp     dword ptr [ecx], 5
.text:00007998                 jnz     short loc_79B0
.text:0000799A                 mov     edx, [ebp+var_8]
.text:0000799D                 mov     eax, [edx]
.text:0000799F                 cmp     dword ptr [eax+28h], 0
.text:000079A3                 jz      short loc_79B0
.text:000079A5                 mov     ecx, [ebp+var_8]
.text:000079A8                 mov     edx, [ecx]
.text:000079AA                 cmp     dword ptr [edx+20h], 0
.text:000079AE                 jnz     short loc_79C7
.text:000079B0
.text:000079B0 loc_79B0:                               ; CODE XREF: _dlg_listbox_issel+32j
.text:000079B0                                         ; _dlg_listbox_issel+3Cj ...
.text:000079B0                 push    8ABh            ; Line
.text:000079B5                 push    offset $SG90135 ; "..\\..\\winctrls.c"
.text:000079BA                 push    offset $SG90136 ; "c && c->ctrl->generic.type == CTRL_LIST"...
.text:000079BF                 call    __wassert
.text:000079C4 ; ---------------------------------------------------------------------------
.text:000079C4                 add     esp, 0Ch
.text:000079C7
.text:000079C7 loc_79C7:                               ; CODE XREF: _dlg_listbox_issel+52j
.text:000079C7                 mov     esi, esp
.text:000079C9                 push    0               ; lParam
.text:000079CB                 mov     ecx, [ebp+wParam]
.text:000079CE                 push    ecx             ; wParam
.text:000079CF                 push    187h            ; Msg
.text:000079D4                 mov     edx, [ebp+var_8]
.text:000079D7                 mov     eax, [edx+4]
.text:000079DA                 add     eax, 1
.text:000079DD                 push    eax             ; nIDDlgItem
.text:000079DE                 mov     ecx, [ebp+var_4]
.text:000079E1                 mov     edx, [ecx]
.text:000079E3                 push    edx             ; hDlg
.text:000079E4                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000079EA                 cmp     esi, esp
.text:000079EC                 call    __RTC_CheckEsp
.text:000079F1                 pop     esi
.text:000079F2                 add     esp, 8
.text:000079F5                 cmp     ebp, esp
.text:000079F7                 call    __RTC_CheckEsp
.text:000079FC                 mov     esp, ebp
.text:000079FE                 pop     ebp
.text:000079FF                 retn
.text:000079FF _dlg_listbox_issel endp
.text:000079FF
.text:000079FF ; ---------------------------------------------------------------------------
.text:00007A00                 db 0Ch dup(0CCh)
.text:00007A0C
.text:00007A0C ; =============== S U B R O U T I N E =======================================
.text:00007A0C
.text:00007A0C ; Attributes: bp-based frame
.text:00007A0C
.text:00007A0C ; int __cdecl dlg_listbox_select(int, int, WPARAM wParam)
.text:00007A0C                 public _dlg_listbox_select
.text:00007A0C _dlg_listbox_select proc near
.text:00007A0C
.text:00007A0C Msg             = dword ptr -0Ch
.text:00007A0C var_8           = dword ptr -8
.text:00007A0C var_4           = dword ptr -4
.text:00007A0C arg_0           = dword ptr  8
.text:00007A0C arg_4           = dword ptr  0Ch
.text:00007A0C wParam          = dword ptr  10h
.text:00007A0C
.text:00007A0C                 push    ebp
.text:00007A0D                 mov     ebp, esp
.text:00007A0F                 sub     esp, 0Ch
.text:00007A12                 push    esi
.text:00007A13                 mov     [ebp+Msg], 0CCCCCCCCh
.text:00007A1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007A21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007A28                 mov     eax, [ebp+arg_4]
.text:00007A2B                 mov     [ebp+var_4], eax
.text:00007A2E                 mov     ecx, [ebp+arg_0]
.text:00007A31                 push    ecx
.text:00007A32                 mov     edx, [ebp+var_4]
.text:00007A35                 push    edx
.text:00007A36                 call    _dlg_findbyctrl
.text:00007A3B                 add     esp, 8
.text:00007A3E                 mov     [ebp+var_8], eax
.text:00007A41                 cmp     [ebp+var_8], 0
.text:00007A45                 jz      short loc_7A5C
.text:00007A47                 mov     eax, [ebp+var_8]
.text:00007A4A                 mov     ecx, [eax]
.text:00007A4C                 cmp     dword ptr [ecx], 5
.text:00007A4F                 jnz     short loc_7A5C
.text:00007A51                 mov     edx, [ebp+var_8]
.text:00007A54                 mov     eax, [edx]
.text:00007A56                 cmp     dword ptr [eax+28h], 0
.text:00007A5A                 jz      short loc_7A73
.text:00007A5C
.text:00007A5C loc_7A5C:                               ; CODE XREF: _dlg_listbox_select+39j
.text:00007A5C                                         ; _dlg_listbox_select+43j
.text:00007A5C                 push    8B6h            ; Line
.text:00007A61                 push    offset $SG90149 ; "..\\..\\winctrls.c"
.text:00007A66                 push    offset $SG90150 ; "c && c->ctrl->generic.type == CTRL_LIST"...
.text:00007A6B                 call    __wassert
.text:00007A70 ; ---------------------------------------------------------------------------
.text:00007A70                 add     esp, 0Ch
.text:00007A73
.text:00007A73 loc_7A73:                               ; CODE XREF: _dlg_listbox_select+4Ej
.text:00007A73                 mov     edx, [ebp+var_8]
.text:00007A76                 mov     eax, [edx]
.text:00007A78                 mov     ecx, [eax+20h]
.text:00007A7B                 neg     ecx
.text:00007A7D                 sbb     ecx, ecx
.text:00007A7F                 and     ecx, 38h
.text:00007A82                 add     ecx, 14Eh
.text:00007A88                 mov     [ebp+Msg], ecx
.text:00007A8B                 mov     esi, esp
.text:00007A8D                 push    0               ; lParam
.text:00007A8F                 mov     edx, [ebp+wParam]
.text:00007A92                 push    edx             ; wParam
.text:00007A93                 mov     eax, [ebp+Msg]
.text:00007A96                 push    eax             ; Msg
.text:00007A97                 mov     ecx, [ebp+var_8]
.text:00007A9A                 mov     edx, [ecx+4]
.text:00007A9D                 add     edx, 1
.text:00007AA0                 push    edx             ; nIDDlgItem
.text:00007AA1                 mov     eax, [ebp+var_4]
.text:00007AA4                 mov     ecx, [eax]
.text:00007AA6                 push    ecx             ; hDlg
.text:00007AA7                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:00007AAD                 cmp     esi, esp
.text:00007AAF                 call    __RTC_CheckEsp
.text:00007AB4                 pop     esi
.text:00007AB5                 add     esp, 0Ch
.text:00007AB8                 cmp     ebp, esp
.text:00007ABA                 call    __RTC_CheckEsp
.text:00007ABF                 mov     esp, ebp
.text:00007AC1                 pop     ebp
.text:00007AC2                 retn
.text:00007AC2 _dlg_listbox_select endp
.text:00007AC2
.text:00007AC2 ; ---------------------------------------------------------------------------
.text:00007AC3                 db 9 dup(0CCh)
.text:00007ACC
.text:00007ACC ; =============== S U B R O U T I N E =======================================
.text:00007ACC
.text:00007ACC ; Attributes: bp-based frame
.text:00007ACC
.text:00007ACC ; int __cdecl dlg_text_set(int, int, LPCSTR lpString)
.text:00007ACC                 public _dlg_text_set
.text:00007ACC _dlg_text_set   proc near
.text:00007ACC
.text:00007ACC var_8           = dword ptr -8
.text:00007ACC var_4           = dword ptr -4
.text:00007ACC arg_0           = dword ptr  8
.text:00007ACC arg_4           = dword ptr  0Ch
.text:00007ACC lpString        = dword ptr  10h
.text:00007ACC
.text:00007ACC                 push    ebp
.text:00007ACD                 mov     ebp, esp
.text:00007ACF                 sub     esp, 8
.text:00007AD2                 push    esi
.text:00007AD3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007ADA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007AE1                 mov     eax, [ebp+arg_4]
.text:00007AE4                 mov     [ebp+var_4], eax
.text:00007AE7                 mov     ecx, [ebp+arg_0]
.text:00007AEA                 push    ecx
.text:00007AEB                 mov     edx, [ebp+var_4]
.text:00007AEE                 push    edx
.text:00007AEF                 call    _dlg_findbyctrl
.text:00007AF4                 add     esp, 8
.text:00007AF7                 mov     [ebp+var_8], eax
.text:00007AFA                 cmp     [ebp+var_8], 0
.text:00007AFE                 jz      short loc_7B0A
.text:00007B00                 mov     eax, [ebp+var_8]
.text:00007B03                 mov     ecx, [eax]
.text:00007B05                 cmp     dword ptr [ecx], 0
.text:00007B08                 jz      short loc_7B21
.text:00007B0A
.text:00007B0A loc_7B0A:                               ; CODE XREF: _dlg_text_set+32j
.text:00007B0A                 push    8BFh            ; Line
.text:00007B0F                 push    offset $SG90162 ; "..\\..\\winctrls.c"
.text:00007B14                 push    offset $SG90163 ; "c && c->ctrl->generic.type == CTRL_TEXT"
.text:00007B19                 call    __wassert
.text:00007B1E ; ---------------------------------------------------------------------------
.text:00007B1E                 add     esp, 0Ch
.text:00007B21
.text:00007B21 loc_7B21:                               ; CODE XREF: _dlg_text_set+3Cj
.text:00007B21                 mov     esi, esp
.text:00007B23                 mov     eax, [ebp+lpString]
.text:00007B26                 push    eax             ; lpString
.text:00007B27                 mov     ecx, [ebp+var_8]
.text:00007B2A                 mov     edx, [ecx+4]
.text:00007B2D                 push    edx             ; nIDDlgItem
.text:00007B2E                 mov     eax, [ebp+var_4]
.text:00007B31                 mov     ecx, [eax]
.text:00007B33                 push    ecx             ; hDlg
.text:00007B34                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:00007B3A                 cmp     esi, esp
.text:00007B3C                 call    __RTC_CheckEsp
.text:00007B41                 pop     esi
.text:00007B42                 add     esp, 8
.text:00007B45                 cmp     ebp, esp
.text:00007B47                 call    __RTC_CheckEsp
.text:00007B4C                 mov     esp, ebp
.text:00007B4E                 pop     ebp
.text:00007B4F                 retn
.text:00007B4F _dlg_text_set   endp
.text:00007B4F
.text:00007B4F ; ---------------------------------------------------------------------------
.text:00007B50                 db 0Ch dup(0CCh)
.text:00007B5C
.text:00007B5C ; =============== S U B R O U T I N E =======================================
.text:00007B5C
.text:00007B5C ; Attributes: bp-based frame
.text:00007B5C
.text:00007B5C ; int __cdecl dlg_label_change(int, int, char *Str)
.text:00007B5C                 public _dlg_label_change
.text:00007B5C _dlg_label_change proc near
.text:00007B5C
.text:00007B5C var_14          = dword ptr -14h
.text:00007B5C nIDDlgItem      = dword ptr -10h
.text:00007B5C lpString        = dword ptr -0Ch
.text:00007B5C var_8           = dword ptr -8
.text:00007B5C var_4           = dword ptr -4
.text:00007B5C arg_0           = dword ptr  8
.text:00007B5C arg_4           = dword ptr  0Ch
.text:00007B5C Str             = dword ptr  10h
.text:00007B5C
.text:00007B5C                 push    ebp
.text:00007B5D                 mov     ebp, esp
.text:00007B5F                 sub     esp, 14h
.text:00007B62                 push    esi
.text:00007B63                 mov     eax, 0CCCCCCCCh
.text:00007B68                 mov     [ebp+var_14], eax
.text:00007B6B                 mov     [ebp+nIDDlgItem], eax
.text:00007B6E                 mov     [ebp+lpString], eax
.text:00007B71                 mov     [ebp+var_8], eax
.text:00007B74                 mov     [ebp+var_4], eax
.text:00007B77                 mov     eax, [ebp+arg_4]
.text:00007B7A                 mov     [ebp+var_4], eax
.text:00007B7D                 mov     ecx, [ebp+arg_0]
.text:00007B80                 push    ecx
.text:00007B81                 mov     edx, [ebp+var_4]
.text:00007B84                 push    edx
.text:00007B85                 call    _dlg_findbyctrl
.text:00007B8A                 add     esp, 8
.text:00007B8D                 mov     [ebp+var_8], eax
.text:00007B90                 mov     [ebp+lpString], 0
.text:00007B97                 mov     [ebp+nIDDlgItem], 0FFFFFFFFh
.text:00007B9E                 cmp     [ebp+var_8], 0
.text:00007BA2                 jnz     short loc_7BBB
.text:00007BA4                 push    8CAh            ; Line
.text:00007BA9                 push    offset $SG90178 ; "..\\..\\winctrls.c"
.text:00007BAE                 push    offset $SG90179 ; Message
.text:00007BB3                 call    __wassert
.text:00007BB8 ; ---------------------------------------------------------------------------
.text:00007BB8                 add     esp, 0Ch
.text:00007BBB
.text:00007BBB loc_7BBB:                               ; CODE XREF: _dlg_label_change+46j
.text:00007BBB                 mov     ecx, [ebp+var_8]
.text:00007BBE                 mov     edx, [ecx]
.text:00007BC0                 mov     eax, [edx]
.text:00007BC2                 mov     [ebp+var_14], eax
.text:00007BC5                 mov     ecx, [ebp+var_14]
.text:00007BC8                 sub     ecx, 1
.text:00007BCB                 mov     [ebp+var_14], ecx
.text:00007BCE                 cmp     [ebp+var_14], 7 ; switch 8 cases
.text:00007BD2                 ja      $LN2            ; jumptable 00007BDB default case
.text:00007BD8                 mov     edx, [ebp+var_14]
.text:00007BDB                 jmp     ds:$LN16_0[edx*4] ; switch jump
.text:00007BE2 ; ---------------------------------------------------------------------------
.text:00007BE2
.text:00007BE2 $LN9_0:                                 ; CODE XREF: _dlg_label_change+7Fj
.text:00007BE2                                         ; DATA XREF: .text:$LN16_0o
.text:00007BE2                 mov     eax, [ebp+var_8] ; jumptable 00007BDB case 0
.text:00007BE5                 mov     ecx, [eax]
.text:00007BE7                 movzx   edx, byte ptr [ecx+1Ch]
.text:00007BEB                 push    edx             ; char
.text:00007BEC                 mov     eax, [ebp+Str]
.text:00007BEF                 push    eax             ; Str
.text:00007BF0                 call    _shortcut_escape
.text:00007BF5                 add     esp, 8
.text:00007BF8                 mov     [ebp+lpString], eax
.text:00007BFB                 mov     ecx, [ebp+var_8]
.text:00007BFE                 mov     edx, [ecx+4]
.text:00007C01                 mov     [ebp+nIDDlgItem], edx
.text:00007C04                 jmp     loc_7D00
.text:00007C09 ; ---------------------------------------------------------------------------
.text:00007C09
.text:00007C09 $LN8_0:                                 ; CODE XREF: _dlg_label_change+7Fj
.text:00007C09                                         ; DATA XREF: .text:$LN16_0o
.text:00007C09                 mov     eax, [ebp+var_8] ; jumptable 00007BDB case 1
.text:00007C0C                 mov     ecx, [eax]
.text:00007C0E                 movzx   edx, byte ptr [ecx+1Ch]
.text:00007C12                 push    edx             ; char
.text:00007C13                 mov     eax, [ebp+Str]
.text:00007C16                 push    eax             ; Str
.text:00007C17                 call    _shortcut_escape
.text:00007C1C                 add     esp, 8
.text:00007C1F                 mov     [ebp+lpString], eax
.text:00007C22                 mov     ecx, [ebp+var_8]
.text:00007C25                 mov     edx, [ecx+4]
.text:00007C28                 mov     [ebp+nIDDlgItem], edx
.text:00007C2B                 jmp     loc_7D00
.text:00007C30 ; ---------------------------------------------------------------------------
.text:00007C30
.text:00007C30 $LN7_1:                                 ; CODE XREF: _dlg_label_change+7Fj
.text:00007C30                                         ; DATA XREF: .text:$LN16_0o
.text:00007C30                 mov     eax, [ebp+arg_0] ; jumptable 00007BDB case 2
.text:00007C33                 movzx   ecx, byte ptr [eax+1Ch]
.text:00007C37                 push    ecx             ; char
.text:00007C38                 mov     edx, [ebp+Str]
.text:00007C3B                 push    edx             ; Str
.text:00007C3C                 call    _shortcut_escape
.text:00007C41                 add     esp, 8
.text:00007C44                 mov     [ebp+lpString], eax
.text:00007C47                 mov     eax, [ebp+var_8]
.text:00007C4A                 mov     ecx, [eax+4]
.text:00007C4D                 mov     [ebp+nIDDlgItem], ecx
.text:00007C50                 jmp     loc_7D00
.text:00007C55 ; ---------------------------------------------------------------------------
.text:00007C55
.text:00007C55 $LN6_8:                                 ; CODE XREF: _dlg_label_change+7Fj
.text:00007C55                                         ; DATA XREF: .text:$LN16_0o
.text:00007C55                 mov     edx, [ebp+arg_0] ; jumptable 00007BDB case 3
.text:00007C58                 movzx   eax, byte ptr [edx+1Ch]
.text:00007C5C                 push    eax             ; char
.text:00007C5D                 mov     ecx, [ebp+Str]
.text:00007C60                 push    ecx             ; Str
.text:00007C61                 call    _shortcut_escape
.text:00007C66                 add     esp, 8
.text:00007C69                 mov     [ebp+lpString], eax
.text:00007C6C                 mov     edx, [ebp+var_8]
.text:00007C6F                 mov     eax, [edx+4]
.text:00007C72                 mov     [ebp+nIDDlgItem], eax
.text:00007C75                 jmp     loc_7D00
.text:00007C7A ; ---------------------------------------------------------------------------
.text:00007C7A
.text:00007C7A $LN5_19:                                ; CODE XREF: _dlg_label_change+7Fj
.text:00007C7A                                         ; DATA XREF: .text:$LN16_0o
.text:00007C7A                 mov     ecx, [ebp+arg_0] ; jumptable 00007BDB case 4
.text:00007C7D                 movzx   edx, byte ptr [ecx+1Ch]
.text:00007C81                 push    edx             ; char
.text:00007C82                 mov     eax, [ebp+Str]
.text:00007C85                 push    eax             ; Str
.text:00007C86                 call    _shortcut_escape
.text:00007C8B                 add     esp, 8
.text:00007C8E                 mov     [ebp+lpString], eax
.text:00007C91                 mov     ecx, [ebp+var_8]
.text:00007C94                 mov     edx, [ecx+4]
.text:00007C97                 mov     [ebp+nIDDlgItem], edx
.text:00007C9A                 jmp     short loc_7D00
.text:00007C9C ; ---------------------------------------------------------------------------
.text:00007C9C
.text:00007C9C $LN4_18:                                ; CODE XREF: _dlg_label_change+7Fj
.text:00007C9C                                         ; DATA XREF: .text:$LN16_0o
.text:00007C9C                 mov     eax, [ebp+arg_0] ; jumptable 00007BDB case 6
.text:00007C9F                 movzx   ecx, byte ptr [eax+1Ch]
.text:00007CA3                 push    ecx             ; char
.text:00007CA4                 mov     edx, [ebp+Str]
.text:00007CA7                 push    edx             ; Str
.text:00007CA8                 call    _shortcut_escape
.text:00007CAD                 add     esp, 8
.text:00007CB0                 mov     [ebp+lpString], eax
.text:00007CB3                 mov     eax, [ebp+var_8]
.text:00007CB6                 mov     ecx, [eax+4]
.text:00007CB9                 mov     [ebp+nIDDlgItem], ecx
.text:00007CBC                 jmp     short loc_7D00
.text:00007CBE ; ---------------------------------------------------------------------------
.text:00007CBE
.text:00007CBE $LN3_12:                                ; CODE XREF: _dlg_label_change+7Fj
.text:00007CBE                                         ; DATA XREF: .text:$LN16_0o
.text:00007CBE                 mov     edx, [ebp+arg_0] ; jumptable 00007BDB case 7
.text:00007CC1                 movzx   eax, byte ptr [edx+1Ch]
.text:00007CC5                 push    eax             ; char
.text:00007CC6                 mov     ecx, [ebp+Str]
.text:00007CC9                 push    ecx             ; Str
.text:00007CCA                 call    _shortcut_escape
.text:00007CCF                 add     esp, 8
.text:00007CD2                 mov     [ebp+lpString], eax
.text:00007CD5                 mov     edx, [ebp+var_8]
.text:00007CD8                 mov     eax, [edx+4]
.text:00007CDB                 mov     [ebp+nIDDlgItem], eax
.text:00007CDE                 jmp     short loc_7D00
.text:00007CE0 ; ---------------------------------------------------------------------------
.text:00007CE0
.text:00007CE0 $LN2:                                   ; CODE XREF: _dlg_label_change+76j
.text:00007CE0                                         ; _dlg_label_change+7Fj
.text:00007CE0                                         ; DATA XREF: ...
.text:00007CE0                 mov     ecx, offset $SG90193 ; jumptable 00007BDB default case
.text:00007CE5                 test    ecx, ecx
.text:00007CE7                 jz      short loc_7D00
.text:00007CE9                 push    8E9h            ; Line
.text:00007CEE                 push    offset $SG90194 ; "..\\..\\winctrls.c"
.text:00007CF3                 push    offset $SG90195 ; "!\"Can't happen\""
.text:00007CF8                 call    __wassert
.text:00007CFD ; ---------------------------------------------------------------------------
.text:00007CFD                 add     esp, 0Ch
.text:00007D00
.text:00007D00 loc_7D00:                               ; CODE XREF: _dlg_label_change+A8j
.text:00007D00                                         ; _dlg_label_change+CFj ...
.text:00007D00                 cmp     [ebp+lpString], 0
.text:00007D04                 jz      short loc_7D2F
.text:00007D06                 mov     esi, esp
.text:00007D08                 mov     eax, [ebp+lpString]
.text:00007D0B                 push    eax             ; lpString
.text:00007D0C                 mov     ecx, [ebp+nIDDlgItem]
.text:00007D0F                 push    ecx             ; nIDDlgItem
.text:00007D10                 mov     edx, [ebp+var_4]
.text:00007D13                 mov     eax, [edx]
.text:00007D15                 push    eax             ; hDlg
.text:00007D16                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:00007D1C                 cmp     esi, esp
.text:00007D1E                 call    __RTC_CheckEsp
.text:00007D23                 mov     ecx, [ebp+lpString]
.text:00007D26                 push    ecx
.text:00007D27                 call    _safefree
.text:00007D2C                 add     esp, 4
.text:00007D2F
.text:00007D2F loc_7D2F:                               ; CODE XREF: _dlg_label_change+1A8j
.text:00007D2F                 pop     esi
.text:00007D30                 add     esp, 14h
.text:00007D33                 cmp     ebp, esp
.text:00007D35                 call    __RTC_CheckEsp
.text:00007D3A                 mov     esp, ebp
.text:00007D3C                 pop     ebp
.text:00007D3D                 retn
.text:00007D3D _dlg_label_change endp
.text:00007D3D
.text:00007D3D ; ---------------------------------------------------------------------------
.text:00007D3E                 align 10h
.text:00007D40 $LN16_0         dd offset $LN9_0        ; DATA XREF: _dlg_label_change+7Fr
.text:00007D40                 dd offset $LN8_0        ; jump table for switch statement
.text:00007D40                 dd offset $LN7_1
.text:00007D40                 dd offset $LN6_8
.text:00007D40                 dd offset $LN5_19
.text:00007D40                 dd offset $LN2
.text:00007D40                 dd offset $LN4_18
.text:00007D40                 dd offset $LN3_12
.text:00007D60                 db 0Ch dup(0CCh)
.text:00007D6C
.text:00007D6C ; =============== S U B R O U T I N E =======================================
.text:00007D6C
.text:00007D6C ; Attributes: bp-based frame
.text:00007D6C
.text:00007D6C                 public _dlg_filesel_set
.text:00007D6C _dlg_filesel_set proc near
.text:00007D6C
.text:00007D6C var_8           = dword ptr -8
.text:00007D6C var_4           = dword ptr -4
.text:00007D6C arg_0           = dword ptr  8
.text:00007D6C arg_4           = dword ptr  0Ch
.text:00007D6C arg_8           = dword ptr  10h
.text:00007D6C
.text:00007D6C                 push    ebp
.text:00007D6D                 mov     ebp, esp
.text:00007D6F                 sub     esp, 8
.text:00007D72                 push    esi
.text:00007D73                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007D7A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D81                 mov     eax, [ebp+arg_4]
.text:00007D84                 mov     [ebp+var_4], eax
.text:00007D87                 mov     ecx, [ebp+arg_0]
.text:00007D8A                 push    ecx
.text:00007D8B                 mov     edx, [ebp+var_4]
.text:00007D8E                 push    edx
.text:00007D8F                 call    _dlg_findbyctrl
.text:00007D94                 add     esp, 8
.text:00007D97                 mov     [ebp+var_8], eax
.text:00007D9A                 cmp     [ebp+var_8], 0
.text:00007D9E                 jz      short loc_7DAA
.text:00007DA0                 mov     eax, [ebp+var_8]
.text:00007DA3                 mov     ecx, [eax]
.text:00007DA5                 cmp     dword ptr [ecx], 7
.text:00007DA8                 jz      short loc_7DC1
.text:00007DAA
.text:00007DAA loc_7DAA:                               ; CODE XREF: _dlg_filesel_set+32j
.text:00007DAA                 push    8F6h            ; Line
.text:00007DAF                 push    offset $SG90208 ; "..\\..\\winctrls.c"
.text:00007DB4                 push    offset $SG90209 ; "c && c->ctrl->generic.type == CTRL_FILE"...
.text:00007DB9                 call    __wassert
.text:00007DBE ; ---------------------------------------------------------------------------
.text:00007DBE                 add     esp, 0Ch
.text:00007DC1
.text:00007DC1 loc_7DC1:                               ; CODE XREF: _dlg_filesel_set+3Cj
.text:00007DC1                 mov     esi, esp
.text:00007DC3                 mov     eax, [ebp+arg_8]
.text:00007DC6                 mov     ecx, [eax]
.text:00007DC8                 push    ecx             ; lpString
.text:00007DC9                 mov     edx, [ebp+var_8]
.text:00007DCC                 mov     eax, [edx+4]
.text:00007DCF                 add     eax, 1
.text:00007DD2                 push    eax             ; nIDDlgItem
.text:00007DD3                 mov     ecx, [ebp+var_4]
.text:00007DD6                 mov     edx, [ecx]
.text:00007DD8                 push    edx             ; hDlg
.text:00007DD9                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:00007DDF                 cmp     esi, esp
.text:00007DE1                 call    __RTC_CheckEsp
.text:00007DE6                 pop     esi
.text:00007DE7                 add     esp, 8
.text:00007DEA                 cmp     ebp, esp
.text:00007DEC                 call    __RTC_CheckEsp
.text:00007DF1                 mov     esp, ebp
.text:00007DF3                 pop     ebp
.text:00007DF4                 retn
.text:00007DF4 _dlg_filesel_set endp
.text:00007DF4
.text:00007DF4 ; ---------------------------------------------------------------------------
.text:00007DF5                 db 7 dup(0CCh)
.text:00007DFC
.text:00007DFC ; =============== S U B R O U T I N E =======================================
.text:00007DFC
.text:00007DFC ; Attributes: bp-based frame
.text:00007DFC
.text:00007DFC                 public _dlg_filesel_get
.text:00007DFC _dlg_filesel_get proc near
.text:00007DFC
.text:00007DFC var_10          = dword ptr -10h
.text:00007DFC var_C           = dword ptr -0Ch
.text:00007DFC var_8           = dword ptr -8
.text:00007DFC var_4           = dword ptr -4
.text:00007DFC arg_0           = dword ptr  8
.text:00007DFC arg_4           = dword ptr  0Ch
.text:00007DFC
.text:00007DFC                 push    ebp
.text:00007DFD                 mov     ebp, esp
.text:00007DFF                 sub     esp, 10h
.text:00007E02                 mov     eax, 0CCCCCCCCh
.text:00007E07                 mov     [ebp+var_10], eax
.text:00007E0A                 mov     [ebp+var_C], eax
.text:00007E0D                 mov     [ebp+var_8], eax
.text:00007E10                 mov     [ebp+var_4], eax
.text:00007E13                 mov     eax, [ebp+arg_4]
.text:00007E16                 mov     [ebp+var_4], eax
.text:00007E19                 mov     ecx, [ebp+arg_0]
.text:00007E1C                 push    ecx
.text:00007E1D                 mov     edx, [ebp+var_4]
.text:00007E20                 push    edx
.text:00007E21                 call    _dlg_findbyctrl
.text:00007E26                 add     esp, 8
.text:00007E29                 mov     [ebp+var_8], eax
.text:00007E2C                 cmp     [ebp+var_8], 0
.text:00007E30                 jz      short loc_7E3C
.text:00007E32                 mov     eax, [ebp+var_8]
.text:00007E35                 mov     ecx, [eax]
.text:00007E37                 cmp     dword ptr [ecx], 7
.text:00007E3A                 jz      short loc_7E53
.text:00007E3C
.text:00007E3C loc_7E3C:                               ; CODE XREF: _dlg_filesel_get+34j
.text:00007E3C                 push    900h            ; Line
.text:00007E41                 push    offset $SG90221 ; "..\\..\\winctrls.c"
.text:00007E46                 push    offset $SG90222 ; "c && c->ctrl->generic.type == CTRL_FILE"...
.text:00007E4B                 call    __wassert
.text:00007E50 ; ---------------------------------------------------------------------------
.text:00007E50                 add     esp, 0Ch
.text:00007E53
.text:00007E53 loc_7E53:                               ; CODE XREF: _dlg_filesel_get+3Ej
.text:00007E53                 mov     eax, [ebp+var_8]
.text:00007E56                 mov     ecx, [eax+4]
.text:00007E59                 add     ecx, 1
.text:00007E5C                 push    ecx
.text:00007E5D                 mov     edx, [ebp+var_4]
.text:00007E60                 mov     eax, [edx]
.text:00007E62                 push    eax
.text:00007E63                 call    _GetDlgItemText_alloc
.text:00007E68                 add     esp, 8
.text:00007E6B                 mov     [ebp+var_C], eax
.text:00007E6E                 mov     ecx, [ebp+var_C]
.text:00007E71                 push    ecx
.text:00007E72                 call    _filename_from_str
.text:00007E77                 add     esp, 4
.text:00007E7A                 mov     [ebp+var_10], eax
.text:00007E7D                 mov     edx, [ebp+var_C]
.text:00007E80                 push    edx
.text:00007E81                 call    _safefree
.text:00007E86                 add     esp, 4
.text:00007E89                 mov     eax, [ebp+var_10]
.text:00007E8C                 add     esp, 10h
.text:00007E8F                 cmp     ebp, esp
.text:00007E91                 call    __RTC_CheckEsp
.text:00007E96                 mov     esp, ebp
.text:00007E98                 pop     ebp
.text:00007E99                 retn
.text:00007E99 _dlg_filesel_get endp
.text:00007E99
.text:00007E99 ; ---------------------------------------------------------------------------
.text:00007E9A                 align 4
.text:00007E9C
.text:00007E9C ; =============== S U B R O U T I N E =======================================
.text:00007E9C
.text:00007E9C ; Attributes: bp-based frame
.text:00007E9C
.text:00007E9C                 public _dlg_fontsel_set
.text:00007E9C _dlg_fontsel_set proc near              ; CODE XREF: _winctrl_handle_command+E31p
.text:00007E9C
.text:00007E9C var_1C          = dword ptr -1Ch
.text:00007E9C var_18          = dword ptr -18h
.text:00007E9C var_14          = dword ptr -14h
.text:00007E9C var_10          = dword ptr -10h
.text:00007E9C var_C           = dword ptr -0Ch
.text:00007E9C var_8           = dword ptr -8
.text:00007E9C lpString        = dword ptr -4
.text:00007E9C arg_0           = dword ptr  8
.text:00007E9C arg_4           = dword ptr  0Ch
.text:00007E9C arg_8           = dword ptr  10h
.text:00007E9C
.text:00007E9C                 push    ebp
.text:00007E9D                 mov     ebp, esp
.text:00007E9F                 sub     esp, 1Ch
.text:00007EA2                 push    esi
.text:00007EA3                 mov     eax, 0CCCCCCCCh
.text:00007EA8                 mov     [ebp+var_1C], eax
.text:00007EAB                 mov     [ebp+var_18], eax
.text:00007EAE                 mov     [ebp+var_14], eax
.text:00007EB1                 mov     [ebp+var_10], eax
.text:00007EB4                 mov     [ebp+var_C], eax
.text:00007EB7                 mov     [ebp+var_8], eax
.text:00007EBA                 mov     [ebp+lpString], eax
.text:00007EBD                 mov     eax, [ebp+arg_4]
.text:00007EC0                 mov     [ebp+var_C], eax
.text:00007EC3                 mov     ecx, [ebp+arg_0]
.text:00007EC6                 push    ecx
.text:00007EC7                 mov     edx, [ebp+var_C]
.text:00007ECA                 push    edx
.text:00007ECB                 call    _dlg_findbyctrl
.text:00007ED0                 add     esp, 8
.text:00007ED3                 mov     [ebp+var_10], eax
.text:00007ED6                 cmp     [ebp+var_10], 0
.text:00007EDA                 jz      short loc_7EE6
.text:00007EDC                 mov     eax, [ebp+var_10]
.text:00007EDF                 mov     ecx, [eax]
.text:00007EE1                 cmp     dword ptr [ecx], 8
.text:00007EE4                 jz      short loc_7EFD
.text:00007EE6
.text:00007EE6 loc_7EE6:                               ; CODE XREF: _dlg_fontsel_set+3Ej
.text:00007EE6                 push    90Ch            ; Line
.text:00007EEB                 push    offset $SG90236 ; "..\\..\\winctrls.c"
.text:00007EF0                 push    offset $SG90237 ; "c && c->ctrl->generic.type == CTRL_FONT"...
.text:00007EF5                 call    __wassert
.text:00007EFA ; ---------------------------------------------------------------------------
.text:00007EFA                 add     esp, 0Ch
.text:00007EFD
.text:00007EFD loc_7EFD:                               ; CODE XREF: _dlg_fontsel_set+48j
.text:00007EFD                 mov     eax, [ebp+var_10]
.text:00007F00                 mov     ecx, [eax+1Ch]
.text:00007F03                 push    ecx
.text:00007F04                 call    _fontspec_free
.text:00007F09                 add     esp, 4
.text:00007F0C                 mov     edx, [ebp+arg_8]
.text:00007F0F                 push    edx
.text:00007F10                 call    _fontspec_copy
.text:00007F15                 add     esp, 4
.text:00007F18                 mov     ecx, [ebp+var_10]
.text:00007F1B                 mov     [ecx+1Ch], eax
.text:00007F1E                 mov     edx, [ebp+arg_8]
.text:00007F21                 cmp     dword ptr [edx+4], 0
.text:00007F25                 jz      short loc_7F30
.text:00007F27                 mov     [ebp+var_14], offset $SG90239 ; "bold, "
.text:00007F2E                 jmp     short loc_7F37
.text:00007F30 ; ---------------------------------------------------------------------------
.text:00007F30
.text:00007F30 loc_7F30:                               ; CODE XREF: _dlg_fontsel_set+89j
.text:00007F30                 mov     [ebp+var_14], offset $SG90240
.text:00007F37
.text:00007F37 loc_7F37:                               ; CODE XREF: _dlg_fontsel_set+92j
.text:00007F37                 mov     eax, [ebp+var_14]
.text:00007F3A                 mov     [ebp+var_8], eax
.text:00007F3D                 mov     ecx, [ebp+arg_8]
.text:00007F40                 cmp     dword ptr [ecx+8], 0
.text:00007F44                 jnz     short loc_7F62
.text:00007F46                 mov     edx, [ebp+var_8]
.text:00007F49                 push    edx
.text:00007F4A                 mov     eax, [ebp+arg_8]
.text:00007F4D                 mov     ecx, [eax]
.text:00007F4F                 push    ecx
.text:00007F50                 push    offset $SG90242 ; "Font: %s, %sdefault height"
.text:00007F55                 call    _dupprintf
.text:00007F5A                 add     esp, 0Ch
.text:00007F5D                 mov     [ebp+lpString], eax
.text:00007F60                 jmp     short loc_7FBC
.text:00007F62 ; ---------------------------------------------------------------------------
.text:00007F62
.text:00007F62 loc_7F62:                               ; CODE XREF: _dlg_fontsel_set+A8j
.text:00007F62                 mov     edx, [ebp+arg_8]
.text:00007F65                 cmp     dword ptr [edx+8], 0
.text:00007F69                 jge     short loc_7F74
.text:00007F6B                 mov     [ebp+var_18], offset $SG90244 ; "pixel"
.text:00007F72                 jmp     short loc_7F7B
.text:00007F74 ; ---------------------------------------------------------------------------
.text:00007F74
.text:00007F74 loc_7F74:                               ; CODE XREF: _dlg_fontsel_set+CDj
.text:00007F74                 mov     [ebp+var_18], offset $SG90245 ; "point"
.text:00007F7B
.text:00007F7B loc_7F7B:                               ; CODE XREF: _dlg_fontsel_set+D6j
.text:00007F7B                 mov     eax, [ebp+arg_8]
.text:00007F7E                 cmp     dword ptr [eax+8], 0
.text:00007F82                 jge     short loc_7F91
.text:00007F84                 mov     ecx, [ebp+arg_8]
.text:00007F87                 mov     edx, [ecx+8]
.text:00007F8A                 neg     edx
.text:00007F8C                 mov     [ebp+var_1C], edx
.text:00007F8F                 jmp     short loc_7F9A
.text:00007F91 ; ---------------------------------------------------------------------------
.text:00007F91
.text:00007F91 loc_7F91:                               ; CODE XREF: _dlg_fontsel_set+E6j
.text:00007F91                 mov     eax, [ebp+arg_8]
.text:00007F94                 mov     ecx, [eax+8]
.text:00007F97                 mov     [ebp+var_1C], ecx
.text:00007F9A
.text:00007F9A loc_7F9A:                               ; CODE XREF: _dlg_fontsel_set+F3j
.text:00007F9A                 mov     edx, [ebp+var_18]
.text:00007F9D                 push    edx
.text:00007F9E                 mov     eax, [ebp+var_1C]
.text:00007FA1                 push    eax
.text:00007FA2                 mov     ecx, [ebp+var_8]
.text:00007FA5                 push    ecx
.text:00007FA6                 mov     edx, [ebp+arg_8]
.text:00007FA9                 mov     eax, [edx]
.text:00007FAB                 push    eax
.text:00007FAC                 push    offset $SG90246 ; "Font: %s, %s%d-%s"
.text:00007FB1                 call    _dupprintf
.text:00007FB6                 add     esp, 14h
.text:00007FB9                 mov     [ebp+lpString], eax
.text:00007FBC
.text:00007FBC loc_7FBC:                               ; CODE XREF: _dlg_fontsel_set+C4j
.text:00007FBC                 mov     esi, esp
.text:00007FBE                 mov     ecx, [ebp+lpString]
.text:00007FC1                 push    ecx             ; lpString
.text:00007FC2                 mov     edx, [ebp+var_10]
.text:00007FC5                 mov     eax, [edx+4]
.text:00007FC8                 add     eax, 1
.text:00007FCB                 push    eax             ; nIDDlgItem
.text:00007FCC                 mov     ecx, [ebp+var_C]
.text:00007FCF                 mov     edx, [ecx]
.text:00007FD1                 push    edx             ; hDlg
.text:00007FD2                 call    dword ptr ds:__imp__SetDlgItemTextA@12 ; SetDlgItemTextA(x,x,x)
.text:00007FD8                 cmp     esi, esp
.text:00007FDA                 call    __RTC_CheckEsp
.text:00007FDF                 mov     eax, [ebp+lpString]
.text:00007FE2                 push    eax
.text:00007FE3                 call    _safefree
.text:00007FE8                 add     esp, 4
.text:00007FEB                 mov     ecx, [ebp+var_C]
.text:00007FEE                 push    ecx
.text:00007FEF                 call    _dlg_auto_set_fixed_pitch_flag
.text:00007FF4                 add     esp, 4
.text:00007FF7                 pop     esi
.text:00007FF8                 add     esp, 1Ch
.text:00007FFB                 cmp     ebp, esp
.text:00007FFD                 call    __RTC_CheckEsp
.text:00008002                 mov     esp, ebp
.text:00008004                 pop     ebp
.text:00008005                 retn
.text:00008005 _dlg_fontsel_set endp
.text:00008005
.text:00008005 ; ---------------------------------------------------------------------------
.text:00008006                 db 6 dup(0CCh)
.text:0000800C
.text:0000800C ; =============== S U B R O U T I N E =======================================
.text:0000800C
.text:0000800C ; Attributes: bp-based frame
.text:0000800C
.text:0000800C                 public _dlg_fontsel_get
.text:0000800C _dlg_fontsel_get proc near
.text:0000800C
.text:0000800C var_8           = dword ptr -8
.text:0000800C var_4           = dword ptr -4
.text:0000800C arg_0           = dword ptr  8
.text:0000800C arg_4           = dword ptr  0Ch
.text:0000800C
.text:0000800C                 push    ebp
.text:0000800D                 mov     ebp, esp
.text:0000800F                 sub     esp, 8
.text:00008012                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008019                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008020                 mov     eax, [ebp+arg_4]
.text:00008023                 mov     [ebp+var_4], eax
.text:00008026                 mov     ecx, [ebp+arg_0]
.text:00008029                 push    ecx
.text:0000802A                 mov     edx, [ebp+var_4]
.text:0000802D                 push    edx
.text:0000802E                 call    _dlg_findbyctrl
.text:00008033                 add     esp, 8
.text:00008036                 mov     [ebp+var_8], eax
.text:00008039                 cmp     [ebp+var_8], 0
.text:0000803D                 jz      short loc_8049
.text:0000803F                 mov     eax, [ebp+var_8]
.text:00008042                 mov     ecx, [eax]
.text:00008044                 cmp     dword ptr [ecx], 8
.text:00008047                 jz      short loc_8060
.text:00008049
.text:00008049 loc_8049:                               ; CODE XREF: _dlg_fontsel_get+31j
.text:00008049                 push    922h            ; Line
.text:0000804E                 push    offset $SG90256 ; "..\\..\\winctrls.c"
.text:00008053                 push    offset $SG90257 ; "c && c->ctrl->generic.type == CTRL_FONT"...
.text:00008058                 call    __wassert
.text:0000805D ; ---------------------------------------------------------------------------
.text:0000805D                 add     esp, 0Ch
.text:00008060
.text:00008060 loc_8060:                               ; CODE XREF: _dlg_fontsel_get+3Bj
.text:00008060                 mov     eax, [ebp+var_8]
.text:00008063                 mov     ecx, [eax+1Ch]
.text:00008066                 push    ecx
.text:00008067                 call    _fontspec_copy
.text:0000806C                 add     esp, 4
.text:0000806F                 add     esp, 8
.text:00008072                 cmp     ebp, esp
.text:00008074                 call    __RTC_CheckEsp
.text:00008079                 mov     esp, ebp
.text:0000807B                 pop     ebp
.text:0000807C                 retn
.text:0000807C _dlg_fontsel_get endp
.text:0000807C
.text:0000807C ; ---------------------------------------------------------------------------
.text:0000807D                 db 0Fh dup(0CCh)
.text:0000808C
.text:0000808C ; =============== S U B R O U T I N E =======================================
.text:0000808C
.text:0000808C ; Attributes: bp-based frame
.text:0000808C
.text:0000808C                 public _dlg_update_start
.text:0000808C _dlg_update_start proc near
.text:0000808C
.text:0000808C var_8           = dword ptr -8
.text:0000808C var_4           = dword ptr -4
.text:0000808C arg_0           = dword ptr  8
.text:0000808C arg_4           = dword ptr  0Ch
.text:0000808C
.text:0000808C                 push    ebp
.text:0000808D                 mov     ebp, esp
.text:0000808F                 sub     esp, 8
.text:00008092                 push    esi
.text:00008093                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000809A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080A1                 mov     eax, [ebp+arg_4]
.text:000080A4                 mov     [ebp+var_4], eax
.text:000080A7                 mov     ecx, [ebp+arg_0]
.text:000080AA                 push    ecx
.text:000080AB                 mov     edx, [ebp+var_4]
.text:000080AE                 push    edx
.text:000080AF                 call    _dlg_findbyctrl
.text:000080B4                 add     esp, 8
.text:000080B7                 mov     [ebp+var_8], eax
.text:000080BA                 cmp     [ebp+var_8], 0
.text:000080BE                 jz      short loc_80EF
.text:000080C0                 mov     eax, [ebp+var_8]
.text:000080C3                 mov     ecx, [eax]
.text:000080C5                 cmp     dword ptr [ecx], 5
.text:000080C8                 jnz     short loc_80EF
.text:000080CA                 mov     esi, esp
.text:000080CC                 push    0               ; lParam
.text:000080CE                 push    0               ; wParam
.text:000080D0                 push    0Bh             ; Msg
.text:000080D2                 mov     edx, [ebp+var_8]
.text:000080D5                 mov     eax, [edx+4]
.text:000080D8                 add     eax, 1
.text:000080DB                 push    eax             ; nIDDlgItem
.text:000080DC                 mov     ecx, [ebp+var_4]
.text:000080DF                 mov     edx, [ecx]
.text:000080E1                 push    edx             ; hDlg
.text:000080E2                 call    dword ptr ds:__imp__SendDlgItemMessageA@20 ; SendDlgItemMessageA(x,x,x,x,x)
.text:000080E8                 cmp     esi, esp
.text:000080EA                 call    __RTC_CheckEsp
.text:000080EF
.text:000080EF loc_80EF:                               ; CODE XREF: _dlg_update_start+32j
.text:000080EF                                         ; _dlg_update_start+3Cj
.text:000080EF                 pop     esi
.text:000080F0                 add     esp, 8
.text:000080F3                 cmp     ebp, esp
.text:000080F5                 call    __RTC_CheckEsp
.text:000080FA                 mov     esp, ebp
.text:000080FC                 pop     ebp
.text:000080FD                 retn
.text:000080FD _dlg_update_start endp
.text:000080FD
.text:000080FD ; ---------------------------------------------------------------------------
.text:000080FE                 db 0Eh dup(0CCh)
.text:0000810C
.text:0000810C ; =============== S U B R O U T I N E =======================================
.text:0000810C
.text:0000810C ; Attributes: bp-based frame
.text:0000810C
.text:0000810C                 public _dlg_update_done
.text:0000810C _dlg_update_done proc near
.text:0000810C
.text:0000810C hWnd            = dword ptr -0Ch
.text:0000810C var_8           = dword ptr -8
.text:0000810C var_4           = dword ptr -4
.text:0000810C arg_0           = dword ptr  8
.text:0000810C arg_4           = dword ptr  0Ch
.text:0000810C
.text:0000810C                 push    ebp
.text:0000810D                 mov     ebp, esp
.text:0000810F                 sub     esp, 0Ch
.text:00008112                 push    esi
.text:00008113                 mov     [ebp+hWnd], 0CCCCCCCCh
.text:0000811A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008121                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008128                 mov     eax, [ebp+arg_4]
.text:0000812B                 mov     [ebp+var_4], eax
.text:0000812E                 mov     ecx, [ebp+arg_0]
.text:00008131                 push    ecx
.text:00008132                 mov     edx, [ebp+var_4]
.text:00008135                 push    edx
.text:00008136                 call    _dlg_findbyctrl
.text:0000813B                 add     esp, 8
.text:0000813E                 mov     [ebp+var_8], eax
.text:00008141                 cmp     [ebp+var_8], 0
.text:00008145                 jz      short loc_81A3
.text:00008147                 mov     eax, [ebp+var_8]
.text:0000814A                 mov     ecx, [eax]
.text:0000814C                 cmp     dword ptr [ecx], 5
.text:0000814F                 jnz     short loc_81A3
.text:00008151                 mov     edx, [ebp+var_8]
.text:00008154                 mov     eax, [edx+4]
.text:00008157                 add     eax, 1
.text:0000815A                 mov     esi, esp
.text:0000815C                 push    eax             ; nIDDlgItem
.text:0000815D                 mov     ecx, [ebp+var_4]
.text:00008160                 mov     edx, [ecx]
.text:00008162                 push    edx             ; hDlg
.text:00008163                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text:00008169                 cmp     esi, esp
.text:0000816B                 call    __RTC_CheckEsp
.text:00008170                 mov     [ebp+hWnd], eax
.text:00008173                 mov     esi, esp
.text:00008175                 push    0               ; lParam
.text:00008177                 push    1               ; wParam
.text:00008179                 push    0Bh             ; Msg
.text:0000817B                 mov     eax, [ebp+hWnd]
.text:0000817E                 push    eax             ; hWnd
.text:0000817F                 call    dword ptr ds:__imp__SendMessageA@16 ; SendMessageA(x,x,x,x)
.text:00008185                 cmp     esi, esp
.text:00008187                 call    __RTC_CheckEsp
.text:0000818C                 mov     esi, esp
.text:0000818E                 push    1               ; bErase
.text:00008190                 push    0               ; lpRect
.text:00008192                 mov     ecx, [ebp+hWnd]
.text:00008195                 push    ecx             ; hWnd
.text:00008196                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text:0000819C                 cmp     esi, esp
.text:0000819E                 call    __RTC_CheckEsp
.text:000081A3
.text:000081A3 loc_81A3:                               ; CODE XREF: _dlg_update_done+39j
.text:000081A3                                         ; _dlg_update_done+43j
.text:000081A3                 pop     esi
.text:000081A4                 add     esp, 0Ch
.text:000081A7                 cmp     ebp, esp
.text:000081A9                 call    __RTC_CheckEsp
.text:000081AE                 mov     esp, ebp
.text:000081B0                 pop     ebp
.text:000081B1                 retn
.text:000081B1 _dlg_update_done endp
.text:000081B1
.text:000081B1 ; ---------------------------------------------------------------------------
.text:000081B2                 db 0Ah dup(0CCh)
.text:000081BC
.text:000081BC ; =============== S U B R O U T I N E =======================================
.text:000081BC
.text:000081BC ; Attributes: bp-based frame
.text:000081BC
.text:000081BC                 public _dlg_set_focus
.text:000081BC _dlg_set_focus  proc near
.text:000081BC
.text:000081BC var_14          = dword ptr -14h
.text:000081BC hWnd            = dword ptr -10h
.text:000081BC nIDButton       = dword ptr -0Ch
.text:000081BC var_8           = dword ptr -8
.text:000081BC var_4           = dword ptr -4
.text:000081BC arg_0           = dword ptr  8
.text:000081BC arg_4           = dword ptr  0Ch
.text:000081BC
.text:000081BC                 push    ebp
.text:000081BD                 mov     ebp, esp
.text:000081BF                 sub     esp, 14h
.text:000081C2                 push    esi
.text:000081C3                 mov     eax, 0CCCCCCCCh
.text:000081C8                 mov     [ebp+var_14], eax
.text:000081CB                 mov     [ebp+hWnd], eax
.text:000081CE                 mov     [ebp+nIDButton], eax
.text:000081D1                 mov     [ebp+var_8], eax
.text:000081D4                 mov     [ebp+var_4], eax
.text:000081D7                 mov     eax, [ebp+arg_4]
.text:000081DA                 mov     [ebp+var_4], eax
.text:000081DD                 mov     ecx, [ebp+arg_0]
.text:000081E0                 push    ecx
.text:000081E1                 mov     edx, [ebp+var_4]
.text:000081E4                 push    edx
.text:000081E5                 call    _dlg_findbyctrl
.text:000081EA                 add     esp, 8
.text:000081ED                 mov     [ebp+var_8], eax
.text:000081F0                 cmp     [ebp+var_8], 0
.text:000081F4                 jnz     short loc_81FB
.text:000081F6                 jmp     loc_82EC
.text:000081FB ; ---------------------------------------------------------------------------
.text:000081FB
.text:000081FB loc_81FB:                               ; CODE XREF: _dlg_set_focus+38j
.text:000081FB                 mov     eax, [ebp+arg_0]
.text:000081FE                 mov     ecx, [eax]
.text:00008200                 mov     [ebp+var_14], ecx
.text:00008203                 mov     edx, [ebp+var_14]
.text:00008206                 sub     edx, 1
.text:00008209                 mov     [ebp+var_14], edx
.text:0000820C                 cmp     [ebp+var_14], 7 ; switch 8 cases
.text:00008210                 ja      $LN1            ; jumptable 00008219 default case
.text:00008216                 mov     eax, [ebp+var_14]
.text:00008219                 jmp     ds:$LN18_0[eax*4] ; switch jump
.text:00008220 ; ---------------------------------------------------------------------------
.text:00008220
.text:00008220 $LN12_0:                                ; CODE XREF: _dlg_set_focus+5Dj
.text:00008220                                         ; DATA XREF: .text:$LN18_0o
.text:00008220                 mov     ecx, [ebp+var_8] ; jumptable 00008219 case 0
.text:00008223                 mov     edx, [ecx+4]
.text:00008226                 add     edx, 1
.text:00008229                 mov     [ebp+nIDButton], edx
.text:0000822C                 jmp     loc_82BD
.text:00008231 ; ---------------------------------------------------------------------------
.text:00008231
.text:00008231 $LN11_1:                                ; CODE XREF: _dlg_set_focus+5Dj
.text:00008231                                         ; DATA XREF: .text:$LN18_0o
.text:00008231                 mov     eax, [ebp+var_8] ; jumptable 00008219 case 1
.text:00008234                 mov     ecx, [eax+4]
.text:00008237                 mov     edx, [ebp+arg_0]
.text:0000823A                 add     ecx, [edx+24h]
.text:0000823D                 mov     [ebp+nIDButton], ecx
.text:00008240                 jmp     short loc_824B
.text:00008242 ; ---------------------------------------------------------------------------
.text:00008242
.text:00008242 loc_8242:                               ; CODE XREF: _dlg_set_focus:loc_8270j
.text:00008242                 mov     eax, [ebp+nIDButton]
.text:00008245                 sub     eax, 1
.text:00008248                 mov     [ebp+nIDButton], eax
.text:0000824B
.text:0000824B loc_824B:                               ; CODE XREF: _dlg_set_focus+84j
.text:0000824B                 cmp     [ebp+nIDButton], 1
.text:0000824F                 jle     short loc_8272
.text:00008251                 mov     esi, esp
.text:00008253                 mov     ecx, [ebp+nIDButton]
.text:00008256                 push    ecx             ; nIDButton
.text:00008257                 mov     edx, [ebp+var_4]
.text:0000825A                 mov     eax, [edx]
.text:0000825C                 push    eax             ; hDlg
.text:0000825D                 call    dword ptr ds:__imp__IsDlgButtonChecked@8 ; IsDlgButtonChecked(x,x)
.text:00008263                 cmp     esi, esp
.text:00008265                 call    __RTC_CheckEsp
.text:0000826A                 test    eax, eax
.text:0000826C                 jz      short loc_8270
.text:0000826E                 jmp     short loc_8272
.text:00008270 ; ---------------------------------------------------------------------------
.text:00008270
.text:00008270 loc_8270:                               ; CODE XREF: _dlg_set_focus+B0j
.text:00008270                 jmp     short loc_8242
.text:00008272 ; ---------------------------------------------------------------------------
.text:00008272
.text:00008272 loc_8272:                               ; CODE XREF: _dlg_set_focus+93j
.text:00008272                                         ; _dlg_set_focus+B2j
.text:00008272                 jmp     short loc_82BD
.text:00008274 ; ---------------------------------------------------------------------------
.text:00008274
.text:00008274 $LN6_9:                                 ; CODE XREF: _dlg_set_focus+5Dj
.text:00008274                                         ; DATA XREF: .text:$LN18_0o
.text:00008274                 mov     ecx, [ebp+var_8] ; jumptable 00008219 case 2
.text:00008277                 mov     edx, [ecx+4]
.text:0000827A                 mov     [ebp+nIDButton], edx
.text:0000827D                 jmp     short loc_82BD
.text:0000827F ; ---------------------------------------------------------------------------
.text:0000827F
.text:0000827F $LN5_20:                                ; CODE XREF: _dlg_set_focus+5Dj
.text:0000827F                                         ; DATA XREF: .text:$LN18_0o
.text:0000827F                 mov     eax, [ebp+var_8] ; jumptable 00008219 case 3
.text:00008282                 mov     ecx, [eax+4]
.text:00008285                 mov     [ebp+nIDButton], ecx
.text:00008288                 jmp     short loc_82BD
.text:0000828A ; ---------------------------------------------------------------------------
.text:0000828A
.text:0000828A $LN4_19:                                ; CODE XREF: _dlg_set_focus+5Dj
.text:0000828A                                         ; DATA XREF: .text:$LN18_0o
.text:0000828A                 mov     edx, [ebp+var_8] ; jumptable 00008219 case 4
.text:0000828D                 mov     eax, [edx+4]
.text:00008290                 add     eax, 1
.text:00008293                 mov     [ebp+nIDButton], eax
.text:00008296                 jmp     short loc_82BD
.text:00008298 ; ---------------------------------------------------------------------------
.text:00008298
.text:00008298 $LN3_13:                                ; CODE XREF: _dlg_set_focus+5Dj
.text:00008298                                         ; DATA XREF: .text:$LN18_0o
.text:00008298                 mov     ecx, [ebp+var_8] ; jumptable 00008219 case 6
.text:0000829B                 mov     edx, [ecx+4]
.text:0000829E                 add     edx, 1
.text:000082A1                 mov     [ebp+nIDButton], edx
.text:000082A4                 jmp     short loc_82BD
.text:000082A6 ; ---------------------------------------------------------------------------
.text:000082A6
.text:000082A6 $LN2_0:                                 ; CODE XREF: _dlg_set_focus+5Dj
.text:000082A6                                         ; DATA XREF: .text:$LN18_0o
.text:000082A6                 mov     eax, [ebp+var_8] ; jumptable 00008219 case 7
.text:000082A9                 mov     ecx, [eax+4]
.text:000082AC                 add     ecx, 2
.text:000082AF                 mov     [ebp+nIDButton], ecx
.text:000082B2                 jmp     short loc_82BD
.text:000082B4 ; ---------------------------------------------------------------------------
.text:000082B4
.text:000082B4 $LN1:                                   ; CODE XREF: _dlg_set_focus+54j
.text:000082B4                                         ; _dlg_set_focus+5Dj
.text:000082B4                                         ; DATA XREF: ...
.text:000082B4                 mov     edx, [ebp+var_8] ; jumptable 00008219 default case
.text:000082B7                 mov     eax, [edx+4]
.text:000082BA                 mov     [ebp+nIDButton], eax
.text:000082BD
.text:000082BD loc_82BD:                               ; CODE XREF: _dlg_set_focus+70j
.text:000082BD                                         ; _dlg_set_focus:loc_8272j ...
.text:000082BD                 mov     esi, esp
.text:000082BF                 mov     ecx, [ebp+nIDButton]
.text:000082C2                 push    ecx             ; nIDDlgItem
.text:000082C3                 mov     edx, [ebp+var_4]
.text:000082C6                 mov     eax, [edx]
.text:000082C8                 push    eax             ; hDlg
.text:000082C9                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text:000082CF                 cmp     esi, esp
.text:000082D1                 call    __RTC_CheckEsp
.text:000082D6                 mov     [ebp+hWnd], eax
.text:000082D9                 mov     esi, esp
.text:000082DB                 mov     ecx, [ebp+hWnd]
.text:000082DE                 push    ecx             ; hWnd
.text:000082DF                 call    dword ptr ds:__imp__SetFocus@4 ; SetFocus(x)
.text:000082E5                 cmp     esi, esp
.text:000082E7                 call    __RTC_CheckEsp
.text:000082EC
.text:000082EC loc_82EC:                               ; CODE XREF: _dlg_set_focus+3Aj
.text:000082EC                 pop     esi
.text:000082ED                 add     esp, 14h
.text:000082F0                 cmp     ebp, esp
.text:000082F2                 call    __RTC_CheckEsp
.text:000082F7                 mov     esp, ebp
.text:000082F9                 pop     ebp
.text:000082FA                 retn
.text:000082FA _dlg_set_focus  endp
.text:000082FA
.text:000082FA ; ---------------------------------------------------------------------------
.text:000082FB                 align 4
.text:000082FC $LN18_0         dd offset $LN12_0       ; DATA XREF: _dlg_set_focus+5Dr
.text:000082FC                 dd offset $LN11_1       ; jump table for switch statement
.text:000082FC                 dd offset $LN6_9
.text:000082FC                 dd offset $LN5_20
.text:000082FC                 dd offset $LN4_19
.text:000082FC                 dd offset $LN1
.text:000082FC                 dd offset $LN3_13
.text:000082FC                 dd offset $LN2_0
.text:0000831C
.text:0000831C ; =============== S U B R O U T I N E =======================================
.text:0000831C
.text:0000831C ; Attributes: bp-based frame
.text:0000831C
.text:0000831C                 public _dlg_beep
.text:0000831C _dlg_beep       proc near
.text:0000831C                 push    ebp
.text:0000831D                 mov     ebp, esp
.text:0000831F                 push    esi
.text:00008320                 mov     esi, esp
.text:00008322                 push    0               ; uType
.text:00008324                 call    dword ptr ds:__imp__MessageBeep@4 ; MessageBeep(x)
.text:0000832A                 cmp     esi, esp
.text:0000832C                 call    __RTC_CheckEsp
.text:00008331                 pop     esi
.text:00008332                 cmp     ebp, esp
.text:00008334                 call    __RTC_CheckEsp
.text:00008339                 pop     ebp
.text:0000833A                 retn
.text:0000833A _dlg_beep       endp
.text:0000833A
.text:0000833A ; ---------------------------------------------------------------------------
.text:0000833B                 align 4
.text:0000833C
.text:0000833C ; =============== S U B R O U T I N E =======================================
.text:0000833C
.text:0000833C ; Attributes: bp-based frame
.text:0000833C
.text:0000833C ; int __cdecl dlg_error_msg(int, LPCSTR lpText)
.text:0000833C                 public _dlg_error_msg
.text:0000833C _dlg_error_msg  proc near
.text:0000833C
.text:0000833C lpCaption       = dword ptr -8
.text:0000833C var_4           = dword ptr -4
.text:0000833C arg_0           = dword ptr  8
.text:0000833C lpText          = dword ptr  0Ch
.text:0000833C
.text:0000833C                 push    ebp
.text:0000833D                 mov     ebp, esp
.text:0000833F                 sub     esp, 8
.text:00008342                 push    esi
.text:00008343                 mov     [ebp+lpCaption], 0CCCCCCCCh
.text:0000834A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008351                 mov     eax, [ebp+arg_0]
.text:00008354                 mov     [ebp+var_4], eax
.text:00008357                 mov     ecx, [ebp+var_4]
.text:0000835A                 cmp     dword ptr [ecx+2Ch], 0
.text:0000835E                 jz      short loc_836B
.text:00008360                 mov     edx, [ebp+var_4]
.text:00008363                 mov     eax, [edx+2Ch]
.text:00008366                 mov     [ebp+lpCaption], eax
.text:00008369                 jmp     short loc_8372
.text:0000836B ; ---------------------------------------------------------------------------
.text:0000836B
.text:0000836B loc_836B:                               ; CODE XREF: _dlg_error_msg+22j
.text:0000836B                 mov     [ebp+lpCaption], 0
.text:00008372
.text:00008372 loc_8372:                               ; CODE XREF: _dlg_error_msg+2Dj
.text:00008372                 mov     esi, esp
.text:00008374                 push    10h             ; uType
.text:00008376                 mov     ecx, [ebp+lpCaption]
.text:00008379                 push    ecx             ; lpCaption
.text:0000837A                 mov     edx, [ebp+lpText]
.text:0000837D                 push    edx             ; lpText
.text:0000837E                 mov     eax, [ebp+var_4]
.text:00008381                 mov     ecx, [eax]
.text:00008383                 push    ecx             ; hWnd
.text:00008384                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text:0000838A                 cmp     esi, esp
.text:0000838C                 call    __RTC_CheckEsp
.text:00008391                 pop     esi
.text:00008392                 add     esp, 8
.text:00008395                 cmp     ebp, esp
.text:00008397                 call    __RTC_CheckEsp
.text:0000839C                 mov     esp, ebp
.text:0000839E                 pop     ebp
.text:0000839F                 retn
.text:0000839F _dlg_error_msg  endp
.text:0000839F
.text:0000839F ; ---------------------------------------------------------------------------
.text:000083A0                 db 0Ch dup(0CCh)
.text:000083AC
.text:000083AC ; =============== S U B R O U T I N E =======================================
.text:000083AC
.text:000083AC ; Attributes: bp-based frame
.text:000083AC
.text:000083AC                 public _dlg_end
.text:000083AC _dlg_end        proc near
.text:000083AC
.text:000083AC var_4           = dword ptr -4
.text:000083AC arg_0           = dword ptr  8
.text:000083AC arg_4           = dword ptr  0Ch
.text:000083AC
.text:000083AC                 push    ebp
.text:000083AD                 mov     ebp, esp
.text:000083AF                 push    ecx
.text:000083B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083B7                 mov     eax, [ebp+arg_0]
.text:000083BA                 mov     [ebp+var_4], eax
.text:000083BD                 mov     ecx, [ebp+var_4]
.text:000083C0                 mov     dword ptr [ecx+0C8h], 1
.text:000083CA                 mov     edx, [ebp+var_4]
.text:000083CD                 mov     eax, [ebp+arg_4]
.text:000083D0                 mov     [edx+0CCh], eax
.text:000083D6                 mov     esp, ebp
.text:000083D8                 pop     ebp
.text:000083D9                 retn
.text:000083D9 _dlg_end        endp
.text:000083D9
.text:000083D9 ; ---------------------------------------------------------------------------
.text:000083DA                 align 4
.text:000083DC
.text:000083DC ; =============== S U B R O U T I N E =======================================
.text:000083DC
.text:000083DC ; Attributes: bp-based frame
.text:000083DC
.text:000083DC                 public _dlg_refresh
.text:000083DC _dlg_refresh    proc near
.text:000083DC
.text:000083DC var_10          = dword ptr -10h
.text:000083DC var_C           = dword ptr -0Ch
.text:000083DC var_8           = dword ptr -8
.text:000083DC var_4           = dword ptr -4
.text:000083DC arg_0           = dword ptr  8
.text:000083DC arg_4           = dword ptr  0Ch
.text:000083DC
.text:000083DC                 push    ebp
.text:000083DD                 mov     ebp, esp
.text:000083DF                 sub     esp, 10h
.text:000083E2                 push    esi
.text:000083E3                 mov     eax, 0CCCCCCCCh
.text:000083E8                 mov     [ebp+var_10], eax
.text:000083EB                 mov     [ebp+var_C], eax
.text:000083EE                 mov     [ebp+var_8], eax
.text:000083F1                 mov     [ebp+var_4], eax
.text:000083F4                 mov     eax, [ebp+arg_4]
.text:000083F7                 mov     [ebp+var_4], eax
.text:000083FA                 cmp     [ebp+arg_0], 0
.text:000083FE                 jnz     loc_8498
.text:00008404                 mov     [ebp+var_C], 0
.text:0000840B                 jmp     short loc_8416
.text:0000840D ; ---------------------------------------------------------------------------
.text:0000840D
.text:0000840D loc_840D:                               ; CODE XREF: _dlg_refresh:loc_8491j
.text:0000840D                 mov     ecx, [ebp+var_C]
.text:00008410                 add     ecx, 1
.text:00008413                 mov     [ebp+var_C], ecx
.text:00008416
.text:00008416 loc_8416:                               ; CODE XREF: _dlg_refresh+2Fj
.text:00008416                 mov     edx, [ebp+var_4]
.text:00008419                 mov     eax, [ebp+var_C]
.text:0000841C                 cmp     eax, [edx+24h]
.text:0000841F                 jge     short loc_8496
.text:00008421                 mov     [ebp+var_8], 0
.text:00008428                 jmp     short loc_8433
.text:0000842A ; ---------------------------------------------------------------------------
.text:0000842A
.text:0000842A loc_842A:                               ; CODE XREF: _dlg_refresh:loc_848Fj
.text:0000842A                 mov     ecx, [ebp+var_8]
.text:0000842D                 add     ecx, 1
.text:00008430                 mov     [ebp+var_8], ecx
.text:00008433
.text:00008433 loc_8433:                               ; CODE XREF: _dlg_refresh+4Cj
.text:00008433                 mov     edx, [ebp+var_8]
.text:00008436                 push    edx
.text:00008437                 mov     eax, [ebp+var_C]
.text:0000843A                 mov     ecx, [ebp+var_4]
.text:0000843D                 mov     edx, [ecx+eax*4+4]
.text:00008441                 push    edx
.text:00008442                 call    _winctrl_findbyindex
.text:00008447                 add     esp, 8
.text:0000844A                 mov     [ebp+var_10], eax
.text:0000844D                 cmp     [ebp+var_10], 0
.text:00008451                 jz      short loc_8491
.text:00008453                 mov     eax, [ebp+var_10]
.text:00008456                 cmp     dword ptr [eax], 0
.text:00008459                 jz      short loc_848F
.text:0000845B                 mov     ecx, [ebp+var_10]
.text:0000845E                 mov     edx, [ecx]
.text:00008460                 cmp     dword ptr [edx+10h], 0
.text:00008464                 jz      short loc_848F
.text:00008466                 mov     esi, esp
.text:00008468                 push    0
.text:0000846A                 mov     eax, [ebp+var_4]
.text:0000846D                 mov     ecx, [eax+30h]
.text:00008470                 push    ecx
.text:00008471                 mov     edx, [ebp+var_4]
.text:00008474                 push    edx
.text:00008475                 mov     eax, [ebp+var_10]
.text:00008478                 mov     ecx, [eax]
.text:0000847A                 push    ecx
.text:0000847B                 mov     edx, [ebp+var_10]
.text:0000847E                 mov     eax, [edx]
.text:00008480                 mov     ecx, [eax+10h]
.text:00008483                 call    ecx
.text:00008485                 add     esp, 10h
.text:00008488                 cmp     esi, esp
.text:0000848A                 call    __RTC_CheckEsp
.text:0000848F
.text:0000848F loc_848F:                               ; CODE XREF: _dlg_refresh+7Dj
.text:0000848F                                         ; _dlg_refresh+88j
.text:0000848F                 jmp     short loc_842A
.text:00008491 ; ---------------------------------------------------------------------------
.text:00008491
.text:00008491 loc_8491:                               ; CODE XREF: _dlg_refresh+75j
.text:00008491                 jmp     loc_840D
.text:00008496 ; ---------------------------------------------------------------------------
.text:00008496
.text:00008496 loc_8496:                               ; CODE XREF: _dlg_refresh+43j
.text:00008496                 jmp     short loc_84C6
.text:00008498 ; ---------------------------------------------------------------------------
.text:00008498
.text:00008498 loc_8498:                               ; CODE XREF: _dlg_refresh+22j
.text:00008498                 mov     edx, [ebp+arg_0]
.text:0000849B                 cmp     dword ptr [edx+10h], 0
.text:0000849F                 jz      short loc_84C6
.text:000084A1                 mov     esi, esp
.text:000084A3                 push    0
.text:000084A5                 mov     eax, [ebp+var_4]
.text:000084A8                 mov     ecx, [eax+30h]
.text:000084AB                 push    ecx
.text:000084AC                 mov     edx, [ebp+var_4]
.text:000084AF                 push    edx
.text:000084B0                 mov     eax, [ebp+arg_0]
.text:000084B3                 push    eax
.text:000084B4                 mov     ecx, [ebp+arg_0]
.text:000084B7                 mov     edx, [ecx+10h]
.text:000084BA                 call    edx
.text:000084BC                 add     esp, 10h
.text:000084BF                 cmp     esi, esp
.text:000084C1                 call    __RTC_CheckEsp
.text:000084C6
.text:000084C6 loc_84C6:                               ; CODE XREF: _dlg_refresh:loc_8496j
.text:000084C6                                         ; _dlg_refresh+C3j
.text:000084C6                 pop     esi
.text:000084C7                 add     esp, 10h
.text:000084CA                 cmp     ebp, esp
.text:000084CC                 call    __RTC_CheckEsp
.text:000084D1                 mov     esp, ebp
.text:000084D3                 pop     ebp
.text:000084D4                 retn
.text:000084D4 _dlg_refresh    endp
.text:000084D4
.text:000084D4 ; ---------------------------------------------------------------------------
.text:000084D5                 db 7 dup(0CCh)
.text:000084DC
.text:000084DC ; =============== S U B R O U T I N E =======================================
.text:000084DC
.text:000084DC ; Attributes: bp-based frame
.text:000084DC
.text:000084DC                 public _dlg_coloursel_start
.text:000084DC _dlg_coloursel_start proc near
.text:000084DC
.text:000084DC var_4           = dword ptr -4
.text:000084DC arg_4           = dword ptr  0Ch
.text:000084DC arg_8           = byte ptr  10h
.text:000084DC arg_C           = byte ptr  14h
.text:000084DC arg_10          = byte ptr  18h
.text:000084DC
.text:000084DC                 push    ebp
.text:000084DD                 mov     ebp, esp
.text:000084DF                 push    ecx
.text:000084E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084E7                 mov     eax, [ebp+arg_4]
.text:000084EA                 mov     [ebp+var_4], eax
.text:000084ED                 mov     ecx, [ebp+var_4]
.text:000084F0                 mov     dword ptr [ecx+0BCh], 1
.text:000084FA                 mov     edx, [ebp+var_4]
.text:000084FD                 mov     al, [ebp+arg_8]
.text:00008500                 mov     [edx+0C0h], al
.text:00008506                 mov     ecx, [ebp+var_4]
.text:00008509                 mov     dl, [ebp+arg_C]
.text:0000850C                 mov     [ecx+0C1h], dl
.text:00008512                 mov     eax, [ebp+var_4]
.text:00008515                 mov     cl, [ebp+arg_10]
.text:00008518                 mov     [eax+0C2h], cl
.text:0000851E                 mov     esp, ebp
.text:00008520                 pop     ebp
.text:00008521                 retn
.text:00008521 _dlg_coloursel_start endp
.text:00008521
.text:00008521 ; ---------------------------------------------------------------------------
.text:00008522                 db 0Ah dup(0CCh)
.text:0000852C
.text:0000852C ; =============== S U B R O U T I N E =======================================
.text:0000852C
.text:0000852C ; Attributes: bp-based frame
.text:0000852C
.text:0000852C                 public _dlg_coloursel_results
.text:0000852C _dlg_coloursel_results proc near
.text:0000852C
.text:0000852C var_4           = dword ptr -4
.text:0000852C arg_4           = dword ptr  0Ch
.text:0000852C arg_8           = dword ptr  10h
.text:0000852C arg_C           = dword ptr  14h
.text:0000852C arg_10          = dword ptr  18h
.text:0000852C
.text:0000852C                 push    ebp
.text:0000852D                 mov     ebp, esp
.text:0000852F                 push    ecx
.text:00008530                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008537                 mov     eax, [ebp+arg_4]
.text:0000853A                 mov     [ebp+var_4], eax
.text:0000853D                 mov     ecx, [ebp+var_4]
.text:00008540                 movzx   edx, byte ptr [ecx+0C3h]
.text:00008547                 test    edx, edx
.text:00008549                 jz      short loc_8581
.text:0000854B                 mov     eax, [ebp+var_4]
.text:0000854E                 movzx   ecx, byte ptr [eax+0C0h]
.text:00008555                 mov     edx, [ebp+arg_8]
.text:00008558                 mov     [edx], ecx
.text:0000855A                 mov     eax, [ebp+var_4]
.text:0000855D                 movzx   ecx, byte ptr [eax+0C1h]
.text:00008564                 mov     edx, [ebp+arg_C]
.text:00008567                 mov     [edx], ecx
.text:00008569                 mov     eax, [ebp+var_4]
.text:0000856C                 movzx   ecx, byte ptr [eax+0C2h]
.text:00008573                 mov     edx, [ebp+arg_10]
.text:00008576                 mov     [edx], ecx
.text:00008578                 mov     eax, 1
.text:0000857D                 jmp     short loc_8583
.text:0000857F ; ---------------------------------------------------------------------------
.text:0000857F                 jmp     short loc_8583
.text:00008581 ; ---------------------------------------------------------------------------
.text:00008581
.text:00008581 loc_8581:                               ; CODE XREF: _dlg_coloursel_results+1Dj
.text:00008581                 xor     eax, eax
.text:00008583
.text:00008583 loc_8583:                               ; CODE XREF: _dlg_coloursel_results+51j
.text:00008583                                         ; _dlg_coloursel_results+53j
.text:00008583                 mov     esp, ebp
.text:00008585                 pop     ebp
.text:00008586                 retn
.text:00008586 _dlg_coloursel_results endp
.text:00008586
.text:00008586 ; ---------------------------------------------------------------------------
.text:00008587                 db 5 dup(0CCh)
.text:0000858C
.text:0000858C ; =============== S U B R O U T I N E =======================================
.text:0000858C
.text:0000858C ; Attributes: bp-based frame
.text:0000858C
.text:0000858C                 public _dlg_auto_set_fixed_pitch_flag
.text:0000858C _dlg_auto_set_fixed_pitch_flag proc near ; CODE XREF: _dlg_fontsel_set+153p
.text:0000858C
.text:0000858C var_68          = dword ptr -68h
.text:0000858C iQuality        = dword ptr -64h
.text:0000858C var_60          = dword ptr -60h
.text:0000858C tm              = tagTEXTMETRICA ptr -58h
.text:0000858C hdc             = dword ptr -1Ch
.text:0000858C h               = dword ptr -18h
.text:0000858C var_14          = dword ptr -14h
.text:0000858C var_10          = dword ptr -10h
.text:0000858C var_C           = dword ptr -0Ch
.text:0000858C var_8           = dword ptr -8
.text:0000858C var_4           = dword ptr -4
.text:0000858C arg_0           = dword ptr  8
.text:0000858C
.text:0000858C                 push    ebp
.text:0000858D                 mov     ebp, esp
.text:0000858F                 sub     esp, 68h
.text:00008592                 push    esi
.text:00008593                 push    edi
.text:00008594                 lea     edi, [ebp+var_68]
.text:00008597                 mov     ecx, 1Ah
.text:0000859C                 mov     eax, 0CCCCCCCCh
.text:000085A1                 rep stosd
.text:000085A3                 mov     eax, dword ptr ds:___security_cookie
.text:000085A8                 xor     eax, ebp
.text:000085AA                 mov     [ebp+var_4], eax
.text:000085AD                 mov     eax, [ebp+arg_0]
.text:000085B0                 mov     [ebp+var_8], eax
.text:000085B3                 mov     ecx, [ebp+var_8]
.text:000085B6                 mov     edx, [ecx+30h]
.text:000085B9                 mov     [ebp+var_C], edx
.text:000085BC                 push    71h ; 'q'
.text:000085BE                 mov     eax, [ebp+var_C]
.text:000085C1                 push    eax
.text:000085C2                 call    _conf_get_int
.text:000085C7                 add     esp, 8
.text:000085CA                 mov     [ebp+var_14], eax
.text:000085CD                 push    70h ; 'p'
.text:000085CF                 mov     ecx, [ebp+var_C]
.text:000085D2                 push    ecx
.text:000085D3                 call    _conf_get_fontspec
.text:000085D8                 add     esp, 8
.text:000085DB                 mov     [ebp+var_10], eax
.text:000085DE                 cmp     [ebp+var_14], 0
.text:000085E2                 jnz     short loc_85ED
.text:000085E4                 mov     [ebp+iQuality], 0
.text:000085EB                 jmp     short loc_8612
.text:000085ED ; ---------------------------------------------------------------------------
.text:000085ED
.text:000085ED loc_85ED:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+56j
.text:000085ED                 cmp     [ebp+var_14], 1
.text:000085F1                 jnz     short loc_85FC
.text:000085F3                 mov     [ebp+var_68], 4
.text:000085FA                 jmp     short loc_860C
.text:000085FC ; ---------------------------------------------------------------------------
.text:000085FC
.text:000085FC loc_85FC:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+65j
.text:000085FC                 xor     edx, edx
.text:000085FE                 cmp     [ebp+var_14], 2
.text:00008602                 setnz   dl
.text:00008605                 lea     edx, [edx+edx+3]
.text:00008609                 mov     [ebp+var_68], edx
.text:0000860C
.text:0000860C loc_860C:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+6Ej
.text:0000860C                 mov     eax, [ebp+var_68]
.text:0000860F                 mov     [ebp+iQuality], eax
.text:00008612
.text:00008612 loc_8612:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+5Fj
.text:00008612                 mov     esi, esp
.text:00008614                 mov     ecx, [ebp+var_10]
.text:00008617                 mov     edx, [ecx]
.text:00008619                 push    edx             ; pszFaceName
.text:0000861A                 push    1               ; iPitchAndFamily
.text:0000861C                 mov     eax, [ebp+iQuality]
.text:0000861F                 push    eax             ; iQuality
.text:00008620                 push    0               ; iClipPrecision
.text:00008622                 push    0               ; iOutPrecision
.text:00008624                 push    1               ; iCharSet
.text:00008626                 push    0               ; bStrikeOut
.text:00008628                 push    0               ; bUnderline
.text:0000862A                 push    0               ; bItalic
.text:0000862C                 push    0               ; cWeight
.text:0000862E                 push    0               ; cOrientation
.text:00008630                 push    0               ; cEscapement
.text:00008632                 push    0               ; cWidth
.text:00008634                 push    0               ; cHeight
.text:00008636                 call    dword ptr ds:__imp__CreateFontA@56 ; CreateFontA(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text:0000863C                 cmp     esi, esp
.text:0000863E                 call    __RTC_CheckEsp
.text:00008643                 mov     [ebp+h], eax
.text:00008646                 mov     esi, esp
.text:00008648                 push    0               ; hWnd
.text:0000864A                 call    dword ptr ds:__imp__GetDC@4 ; GetDC(x)
.text:00008650                 cmp     esi, esp
.text:00008652                 call    __RTC_CheckEsp
.text:00008657                 mov     [ebp+hdc], eax
.text:0000865A                 cmp     [ebp+hdc], 0
.text:0000865E                 jz      short loc_86A2
.text:00008660                 mov     esi, esp
.text:00008662                 mov     ecx, [ebp+h]
.text:00008665                 push    ecx             ; h
.text:00008666                 mov     edx, [ebp+hdc]
.text:00008669                 push    edx             ; hdc
.text:0000866A                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text:00008670                 cmp     esi, esp
.text:00008672                 call    __RTC_CheckEsp
.text:00008677                 test    eax, eax
.text:00008679                 jz      short loc_86A2
.text:0000867B                 mov     esi, esp
.text:0000867D                 lea     eax, [ebp+tm]
.text:00008680                 push    eax             ; lptm
.text:00008681                 mov     ecx, [ebp+hdc]
.text:00008684                 push    ecx             ; hdc
.text:00008685                 call    dword ptr ds:__imp__GetTextMetricsA@8 ; GetTextMetricsA(x,x)
.text:0000868B                 cmp     esi, esp
.text:0000868D                 call    __RTC_CheckEsp
.text:00008692                 test    eax, eax
.text:00008694                 jz      short loc_86A2
.text:00008696                 movzx   edx, [ebp+tm.tmPitchAndFamily]
.text:0000869A                 and     edx, 1
.text:0000869D                 mov     [ebp+var_60], edx
.text:000086A0                 jmp     short loc_86A9
.text:000086A2 ; ---------------------------------------------------------------------------
.text:000086A2
.text:000086A2 loc_86A2:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+D2j
.text:000086A2                                         ; _dlg_auto_set_fixed_pitch_flag+EDj ...
.text:000086A2                 mov     [ebp+var_60], 0
.text:000086A9
.text:000086A9 loc_86A9:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+114j
.text:000086A9                 cmp     [ebp+hdc], 0
.text:000086AD                 jz      short loc_86C4
.text:000086AF                 mov     esi, esp
.text:000086B1                 mov     eax, [ebp+hdc]
.text:000086B4                 push    eax             ; hDC
.text:000086B5                 push    0               ; hWnd
.text:000086B7                 call    dword ptr ds:__imp__ReleaseDC@8 ; ReleaseDC(x,x)
.text:000086BD                 cmp     esi, esp
.text:000086BF                 call    __RTC_CheckEsp
.text:000086C4
.text:000086C4 loc_86C4:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+121j
.text:000086C4                 cmp     [ebp+h], 0
.text:000086C8                 jz      short loc_86DD
.text:000086CA                 mov     esi, esp
.text:000086CC                 mov     ecx, [ebp+h]
.text:000086CF                 push    ecx             ; ho
.text:000086D0                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text:000086D6                 cmp     esi, esp
.text:000086D8                 call    __RTC_CheckEsp
.text:000086DD
.text:000086DD loc_86DD:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+13Cj
.text:000086DD                 cmp     [ebp+var_60], 0
.text:000086E1                 jz      short loc_86F0
.text:000086E3                 mov     edx, [ebp+var_8]
.text:000086E6                 mov     dword ptr [edx+0D0h], 0
.text:000086F0
.text:000086F0 loc_86F0:                               ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+155j
.text:000086F0                 push    edx
.text:000086F1                 mov     ecx, ebp
.text:000086F3                 push    eax
.text:000086F4                 lea     edx, $LN14_4
.text:000086FA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000086FF                 pop     eax
.text:00008700                 pop     edx
.text:00008701                 pop     edi
.text:00008702                 pop     esi
.text:00008703                 mov     ecx, [ebp+var_4]
.text:00008706                 xor     ecx, ebp
.text:00008708                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000870D                 add     esp, 68h
.text:00008710                 cmp     ebp, esp
.text:00008712                 call    __RTC_CheckEsp
.text:00008717                 mov     esp, ebp
.text:00008719                 pop     ebp
.text:0000871A                 retn
.text:0000871A _dlg_auto_set_fixed_pitch_flag endp
.text:0000871A
.text:0000871A ; ---------------------------------------------------------------------------
.text:0000871B                 align 4
.text:0000871C $LN14_4         dd 1                    ; DATA XREF: _dlg_auto_set_fixed_pitch_flag+168o
.text:00008720                 dd offset $LN13_2
.text:00008724 $LN13_2         dd 0FFFFFFA8h, 38h      ; DATA XREF: .text:00008720o
.text:0000872C                 dd offset $LN12_1
.text:00008730 $LN12_1         dd 0CC006D74h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:0000872Co
.text:0000873C
.text:0000873C ; =============== S U B R O U T I N E =======================================
.text:0000873C
.text:0000873C ; Attributes: bp-based frame
.text:0000873C
.text:0000873C                 public _dlg_get_fixed_pitch_flag
.text:0000873C _dlg_get_fixed_pitch_flag proc near
.text:0000873C
.text:0000873C var_4           = dword ptr -4
.text:0000873C arg_0           = dword ptr  8
.text:0000873C
.text:0000873C                 push    ebp
.text:0000873D                 mov     ebp, esp
.text:0000873F                 push    ecx
.text:00008740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008747                 mov     eax, [ebp+arg_0]
.text:0000874A                 mov     [ebp+var_4], eax
.text:0000874D                 mov     ecx, [ebp+var_4]
.text:00008750                 mov     eax, [ecx+0D0h]
.text:00008756                 mov     esp, ebp
.text:00008758                 pop     ebp
.text:00008759                 retn
.text:00008759 _dlg_get_fixed_pitch_flag endp
.text:00008759
.text:00008759 ; ---------------------------------------------------------------------------
.text:0000875A                 align 4
.text:0000875C
.text:0000875C ; =============== S U B R O U T I N E =======================================
.text:0000875C
.text:0000875C ; Attributes: bp-based frame
.text:0000875C
.text:0000875C                 public _dlg_set_fixed_pitch_flag
.text:0000875C _dlg_set_fixed_pitch_flag proc near
.text:0000875C
.text:0000875C var_4           = dword ptr -4
.text:0000875C arg_0           = dword ptr  8
.text:0000875C arg_4           = dword ptr  0Ch
.text:0000875C
.text:0000875C                 push    ebp
.text:0000875D                 mov     ebp, esp
.text:0000875F                 push    ecx
.text:00008760                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008767                 mov     eax, [ebp+arg_0]
.text:0000876A                 mov     [ebp+var_4], eax
.text:0000876D                 mov     ecx, [ebp+var_4]
.text:00008770                 mov     edx, [ebp+arg_4]
.text:00008773                 mov     [ecx+0D0h], edx
.text:00008779                 mov     esp, ebp
.text:0000877B                 pop     ebp
.text:0000877C                 retn
.text:0000877C _dlg_set_fixed_pitch_flag endp
.text:0000877C
.text:0000877C ; ---------------------------------------------------------------------------
.text:0000877D                 db 0Fh dup(0CCh)
.text:0000878C
.text:0000878C ; =============== S U B R O U T I N E =======================================
.text:0000878C
.text:0000878C ; Attributes: bp-based frame
.text:0000878C
.text:0000878C                 public _dp_init
.text:0000878C _dp_init        proc near
.text:0000878C
.text:0000878C arg_0           = dword ptr  8
.text:0000878C
.text:0000878C                 push    ebp
.text:0000878D                 mov     ebp, esp
.text:0000878F                 mov     eax, [ebp+arg_0]
.text:00008792                 mov     dword ptr [eax+24h], 0
.text:00008799                 mov     ecx, [ebp+arg_0]
.text:0000879C                 mov     dword ptr [ecx+30h], 0
.text:000087A3                 mov     edx, [ebp+arg_0]
.text:000087A6                 mov     dword ptr [edx+0C8h], 0
.text:000087B0                 mov     eax, [ebp+arg_0]
.text:000087B3                 mov     dword ptr [eax+38h], 0
.text:000087BA                 mov     ecx, [ebp+arg_0]
.text:000087BD                 mov     dword ptr [ecx+34h], 0
.text:000087C4                 push    80h ; 'Ç'       ; Size
.text:000087C9                 push    0               ; Val
.text:000087CB                 mov     edx, [ebp+arg_0]
.text:000087CE                 add     edx, 3Ch ; '<'
.text:000087D1                 push    edx             ; Dst
.text:000087D2                 call    _memset
.text:000087D7                 add     esp, 0Ch
.text:000087DA                 mov     eax, [ebp+arg_0]
.text:000087DD                 mov     dword ptr [eax], 0
.text:000087E3                 mov     ecx, [ebp+arg_0]
.text:000087E6                 mov     dword ptr [ecx+2Ch], 0
.text:000087ED                 mov     edx, [ebp+arg_0]
.text:000087F0                 mov     dword ptr [edx+28h], 0
.text:000087F7                 push    offset _perctrl_privdata_cmp
.text:000087FC                 call    _newtree234
.text:00008801                 add     esp, 4
.text:00008804                 mov     ecx, [ebp+arg_0]
.text:00008807                 mov     [ecx+0C4h], eax
.text:0000880D                 mov     edx, [ebp+arg_0]
.text:00008810                 mov     dword ptr [edx+0D0h], 1
.text:0000881A                 cmp     ebp, esp
.text:0000881C                 call    __RTC_CheckEsp
.text:00008821                 pop     ebp
.text:00008822                 retn
.text:00008822 _dp_init        endp
.text:00008822
.text:00008822 ; ---------------------------------------------------------------------------
.text:00008823                 db 9 dup(0CCh)
.text:0000882C
.text:0000882C ; =============== S U B R O U T I N E =======================================
.text:0000882C
.text:0000882C ; Attributes: bp-based frame
.text:0000882C
.text:0000882C _perctrl_privdata_cmp proc near         ; DATA XREF: _dp_init+6Bo
.text:0000882C
.text:0000882C var_8           = dword ptr -8
.text:0000882C var_4           = dword ptr -4
.text:0000882C arg_0           = dword ptr  8
.text:0000882C arg_4           = dword ptr  0Ch
.text:0000882C
.text:0000882C                 push    ebp
.text:0000882D                 mov     ebp, esp
.text:0000882F                 sub     esp, 8
.text:00008832                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008839                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008840                 mov     eax, [ebp+arg_0]
.text:00008843                 mov     [ebp+var_4], eax
.text:00008846                 mov     ecx, [ebp+arg_4]
.text:00008849                 mov     [ebp+var_8], ecx
.text:0000884C                 mov     edx, [ebp+var_4]
.text:0000884F                 mov     eax, [ebp+var_8]
.text:00008852                 mov     ecx, [edx]
.text:00008854                 cmp     ecx, [eax]
.text:00008856                 jnb     short loc_885F
.text:00008858                 or      eax, 0FFFFFFFFh
.text:0000885B                 jmp     short loc_8874
.text:0000885D ; ---------------------------------------------------------------------------
.text:0000885D                 jmp     short loc_8872
.text:0000885F ; ---------------------------------------------------------------------------
.text:0000885F
.text:0000885F loc_885F:                               ; CODE XREF: _perctrl_privdata_cmp+2Aj
.text:0000885F                 mov     edx, [ebp+var_4]
.text:00008862                 mov     eax, [ebp+var_8]
.text:00008865                 mov     ecx, [edx]
.text:00008867                 cmp     ecx, [eax]
.text:00008869                 jbe     short loc_8872
.text:0000886B                 mov     eax, 1
.text:00008870                 jmp     short loc_8874
.text:00008872 ; ---------------------------------------------------------------------------
.text:00008872
.text:00008872 loc_8872:                               ; CODE XREF: _perctrl_privdata_cmp+31j
.text:00008872                                         ; _perctrl_privdata_cmp+3Dj
.text:00008872                 xor     eax, eax
.text:00008874
.text:00008874 loc_8874:                               ; CODE XREF: _perctrl_privdata_cmp+2Fj
.text:00008874                                         ; _perctrl_privdata_cmp+44j
.text:00008874                 mov     esp, ebp
.text:00008876                 pop     ebp
.text:00008877                 retn
.text:00008877 _perctrl_privdata_cmp endp
.text:00008877
.text:00008877 ; ---------------------------------------------------------------------------
.text:00008878                 db 4 dup(0CCh)
.text:0000887C
.text:0000887C ; =============== S U B R O U T I N E =======================================
.text:0000887C
.text:0000887C ; Attributes: bp-based frame
.text:0000887C
.text:0000887C                 public _dp_add_tree
.text:0000887C _dp_add_tree    proc near
.text:0000887C
.text:0000887C arg_0           = dword ptr  8
.text:0000887C arg_4           = dword ptr  0Ch
.text:0000887C
.text:0000887C                 push    ebp
.text:0000887D                 mov     ebp, esp
.text:0000887F                 mov     eax, [ebp+arg_0]
.text:00008882                 cmp     dword ptr [eax+24h], 8
.text:00008886                 jb      short loc_889F
.text:00008888                 push    0A07h           ; Line
.text:0000888D                 push    offset $SG90437 ; "..\\..\\winctrls.c"
.text:00008892                 push    offset $SG90438 ; "dp->nctrltrees < lenof(dp->controltrees"...
.text:00008897                 call    __wassert
.text:0000889C ; ---------------------------------------------------------------------------
.text:0000889C                 add     esp, 0Ch
.text:0000889F
.text:0000889F loc_889F:                               ; CODE XREF: _dp_add_tree+Aj
.text:0000889F                 mov     edx, [ebp+arg_0]
.text:000088A2                 mov     eax, [edx+24h]
.text:000088A5                 mov     ecx, [ebp+arg_0]
.text:000088A8                 mov     edx, [ebp+arg_4]
.text:000088AB                 mov     [ecx+eax*4+4], edx
.text:000088AF                 mov     eax, [ebp+arg_0]
.text:000088B2                 mov     ecx, [eax+24h]
.text:000088B5                 add     ecx, 1
.text:000088B8                 mov     edx, [ebp+arg_0]
.text:000088BB                 mov     [edx+24h], ecx
.text:000088BE                 cmp     ebp, esp
.text:000088C0                 call    __RTC_CheckEsp
.text:000088C5                 pop     ebp
.text:000088C6                 retn
.text:000088C6 _dp_add_tree    endp
.text:000088C6
.text:000088C6 ; ---------------------------------------------------------------------------
.text:000088C7                 db 5 dup(0CCh)
.text:000088CC
.text:000088CC ; =============== S U B R O U T I N E =======================================
.text:000088CC
.text:000088CC ; Attributes: bp-based frame
.text:000088CC
.text:000088CC                 public _dp_cleanup
.text:000088CC _dp_cleanup     proc near
.text:000088CC
.text:000088CC var_4           = dword ptr -4
.text:000088CC arg_0           = dword ptr  8
.text:000088CC
.text:000088CC                 push    ebp
.text:000088CD                 mov     ebp, esp
.text:000088CF                 push    ecx
.text:000088D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000088D7                 mov     eax, [ebp+arg_0]
.text:000088DA                 cmp     dword ptr [eax+0C4h], 0
.text:000088E1                 jz      short loc_895B
.text:000088E3
.text:000088E3 loc_88E3:                               ; CODE XREF: _dp_cleanup+6Ej
.text:000088E3                 push    0
.text:000088E5                 mov     ecx, [ebp+arg_0]
.text:000088E8                 mov     edx, [ecx+0C4h]
.text:000088EE                 push    edx
.text:000088EF                 call    _index234
.text:000088F4                 add     esp, 8
.text:000088F7                 mov     [ebp+var_4], eax
.text:000088FA                 cmp     [ebp+var_4], 0
.text:000088FE                 jz      short loc_893C
.text:00008900                 mov     eax, [ebp+var_4]
.text:00008903                 push    eax
.text:00008904                 mov     ecx, [ebp+arg_0]
.text:00008907                 mov     edx, [ecx+0C4h]
.text:0000890D                 push    edx
.text:0000890E                 call    _del234
.text:00008913                 add     esp, 8
.text:00008916                 mov     eax, [ebp+var_4]
.text:00008919                 cmp     dword ptr [eax+8], 0
.text:0000891D                 jz      short loc_892E
.text:0000891F                 mov     ecx, [ebp+var_4]
.text:00008922                 mov     edx, [ecx+4]
.text:00008925                 push    edx
.text:00008926                 call    _safefree
.text:0000892B                 add     esp, 4
.text:0000892E
.text:0000892E loc_892E:                               ; CODE XREF: _dp_cleanup+51j
.text:0000892E                 mov     eax, [ebp+var_4]
.text:00008931                 push    eax
.text:00008932                 call    _safefree
.text:00008937                 add     esp, 4
.text:0000893A                 jmp     short loc_88E3
.text:0000893C ; ---------------------------------------------------------------------------
.text:0000893C
.text:0000893C loc_893C:                               ; CODE XREF: _dp_cleanup+32j
.text:0000893C                 mov     ecx, [ebp+arg_0]
.text:0000893F                 mov     edx, [ecx+0C4h]
.text:00008945                 push    edx
.text:00008946                 call    _freetree234
.text:0000894B                 add     esp, 4
.text:0000894E                 mov     eax, [ebp+arg_0]
.text:00008951                 mov     dword ptr [eax+0C4h], 0
.text:0000895B
.text:0000895B loc_895B:                               ; CODE XREF: _dp_cleanup+15j
.text:0000895B                 mov     ecx, [ebp+arg_0]
.text:0000895E                 mov     edx, [ecx+28h]
.text:00008961                 push    edx
.text:00008962                 call    _safefree
.text:00008967                 add     esp, 4
.text:0000896A                 mov     eax, [ebp+arg_0]
.text:0000896D                 mov     ecx, [eax+2Ch]
.text:00008970                 push    ecx
.text:00008971                 call    _safefree
.text:00008976                 add     esp, 4
.text:00008979                 add     esp, 4
.text:0000897C                 cmp     ebp, esp
.text:0000897E                 call    __RTC_CheckEsp
.text:00008983                 mov     esp, ebp
.text:00008985                 pop     ebp
.text:00008986                 retn
.text:00008986 _dp_cleanup     endp
.text:00008986
.text:00008986 ; ---------------------------------------------------------------------------
.text:00008987                 db 5 dup(0CCh)
.text:0000898C
.text:0000898C ; =============== S U B R O U T I N E =======================================
.text:0000898C
.text:0000898C ; Attributes: bp-based frame
.text:0000898C
.text:0000898C                 public _dlg_get_privdata
.text:0000898C _dlg_get_privdata proc near
.text:0000898C
.text:0000898C var_1C          = dword ptr -1Ch
.text:0000898C var_18          = dword ptr -18h
.text:0000898C var_14          = dword ptr -14h
.text:0000898C var_10          = dword ptr -10h
.text:0000898C var_C           = dword ptr -0Ch
.text:0000898C var_8           = dword ptr -8
.text:0000898C var_4           = dword ptr -4
.text:0000898C arg_0           = dword ptr  8
.text:0000898C arg_4           = dword ptr  0Ch
.text:0000898C
.text:0000898C                 push    ebp
.text:0000898D                 mov     ebp, esp
.text:0000898F                 sub     esp, 1Ch
.text:00008992                 mov     eax, 0CCCCCCCCh
.text:00008997                 mov     [ebp+var_1C], eax
.text:0000899A                 mov     [ebp+var_18], eax
.text:0000899D                 mov     [ebp+var_14], eax
.text:000089A0                 mov     [ebp+var_10], eax
.text:000089A3                 mov     [ebp+var_C], eax
.text:000089A6                 mov     [ebp+var_8], eax
.text:000089A9                 mov     [ebp+var_4], eax
.text:000089AC                 mov     eax, [ebp+arg_4]
.text:000089AF                 mov     [ebp+var_4], eax
.text:000089B2                 mov     ecx, [ebp+arg_0]
.text:000089B5                 mov     [ebp+var_14], ecx
.text:000089B8                 push    0
.text:000089BA                 lea     edx, [ebp+var_14]
.text:000089BD                 push    edx
.text:000089BE                 mov     eax, [ebp+var_4]
.text:000089C1                 mov     ecx, [eax+0C4h]
.text:000089C7                 push    ecx
.text:000089C8                 call    _find234
.text:000089CD                 add     esp, 0Ch
.text:000089D0                 mov     [ebp+var_1C], eax
.text:000089D3                 cmp     [ebp+var_1C], 0
.text:000089D7                 jz      short loc_89E3
.text:000089D9                 mov     edx, [ebp+var_1C]
.text:000089DC                 mov     eax, [edx+4]
.text:000089DF                 jmp     short loc_89E5
.text:000089E1 ; ---------------------------------------------------------------------------
.text:000089E1                 jmp     short loc_89E5
.text:000089E3 ; ---------------------------------------------------------------------------
.text:000089E3
.text:000089E3 loc_89E3:                               ; CODE XREF: _dlg_get_privdata+4Bj
.text:000089E3                 xor     eax, eax
.text:000089E5
.text:000089E5 loc_89E5:                               ; CODE XREF: _dlg_get_privdata+53j
.text:000089E5                                         ; _dlg_get_privdata+55j
.text:000089E5                 push    edx
.text:000089E6                 mov     ecx, ebp
.text:000089E8                 push    eax
.text:000089E9                 lea     edx, $LN7_2
.text:000089EF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000089F4                 pop     eax
.text:000089F5                 pop     edx
.text:000089F6                 add     esp, 1Ch
.text:000089F9                 cmp     ebp, esp
.text:000089FB                 call    __RTC_CheckEsp
.text:00008A00                 mov     esp, ebp
.text:00008A02                 pop     ebp
.text:00008A03                 retn
.text:00008A03 _dlg_get_privdata endp
.text:00008A03
.text:00008A03 ; ---------------------------------------------------------------------------
.text:00008A04 $LN7_2          dd 1                    ; DATA XREF: _dlg_get_privdata+5Do
.text:00008A08                 dd offset $LN6_10
.text:00008A0C $LN6_10         dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:00008A08o
.text:00008A14                 dd offset $LN5_21
.text:00008A18 $LN5_21         dd 706D74h              ; DATA XREF: .text:00008A14o
.text:00008A1C
.text:00008A1C ; =============== S U B R O U T I N E =======================================
.text:00008A1C
.text:00008A1C ; Attributes: bp-based frame
.text:00008A1C
.text:00008A1C                 public _dlg_set_privdata
.text:00008A1C _dlg_set_privdata proc near
.text:00008A1C
.text:00008A1C var_1C          = dword ptr -1Ch
.text:00008A1C var_18          = dword ptr -18h
.text:00008A1C var_14          = dword ptr -14h
.text:00008A1C var_10          = dword ptr -10h
.text:00008A1C var_C           = dword ptr -0Ch
.text:00008A1C var_8           = dword ptr -8
.text:00008A1C var_4           = dword ptr -4
.text:00008A1C arg_0           = dword ptr  8
.text:00008A1C arg_4           = dword ptr  0Ch
.text:00008A1C arg_8           = dword ptr  10h
.text:00008A1C
.text:00008A1C                 push    ebp
.text:00008A1D                 mov     ebp, esp
.text:00008A1F                 sub     esp, 1Ch
.text:00008A22                 mov     eax, 0CCCCCCCCh
.text:00008A27                 mov     [ebp+var_1C], eax
.text:00008A2A                 mov     [ebp+var_18], eax
.text:00008A2D                 mov     [ebp+var_14], eax
.text:00008A30                 mov     [ebp+var_10], eax
.text:00008A33                 mov     [ebp+var_C], eax
.text:00008A36                 mov     [ebp+var_8], eax
.text:00008A39                 mov     [ebp+var_4], eax
.text:00008A3C                 mov     eax, [ebp+arg_4]
.text:00008A3F                 mov     [ebp+var_4], eax
.text:00008A42                 mov     ecx, [ebp+arg_0]
.text:00008A45                 mov     [ebp+var_14], ecx
.text:00008A48                 push    0
.text:00008A4A                 lea     edx, [ebp+var_14]
.text:00008A4D                 push    edx
.text:00008A4E                 mov     eax, [ebp+var_4]
.text:00008A51                 mov     ecx, [eax+0C4h]
.text:00008A57                 push    ecx
.text:00008A58                 call    _find234
.text:00008A5D                 add     esp, 0Ch
.text:00008A60                 mov     [ebp+var_1C], eax
.text:00008A63                 cmp     [ebp+var_1C], 0
.text:00008A67                 jnz     short loc_8AA0
.text:00008A69                 push    0Ch
.text:00008A6B                 push    1
.text:00008A6D                 call    _safemalloc
.text:00008A72                 add     esp, 8
.text:00008A75                 mov     [ebp+var_1C], eax
.text:00008A78                 mov     edx, [ebp+var_1C]
.text:00008A7B                 mov     eax, [ebp+arg_0]
.text:00008A7E                 mov     [edx], eax
.text:00008A80                 mov     ecx, [ebp+var_1C]
.text:00008A83                 mov     dword ptr [ecx+8], 0
.text:00008A8A                 mov     edx, [ebp+var_1C]
.text:00008A8D                 push    edx
.text:00008A8E                 mov     eax, [ebp+var_4]
.text:00008A91                 mov     ecx, [eax+0C4h]
.text:00008A97                 push    ecx
.text:00008A98                 call    _add234
.text:00008A9D                 add     esp, 8
.text:00008AA0
.text:00008AA0 loc_8AA0:                               ; CODE XREF: _dlg_set_privdata+4Bj
.text:00008AA0                 mov     edx, [ebp+var_1C]
.text:00008AA3                 mov     eax, [ebp+arg_8]
.text:00008AA6                 mov     [edx+4], eax
.text:00008AA9                 push    edx
.text:00008AAA                 mov     ecx, ebp
.text:00008AAC                 push    eax
.text:00008AAD                 lea     edx, $LN6_11
.text:00008AB3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00008AB8                 pop     eax
.text:00008AB9                 pop     edx
.text:00008ABA                 add     esp, 1Ch
.text:00008ABD                 cmp     ebp, esp
.text:00008ABF                 call    __RTC_CheckEsp
.text:00008AC4                 mov     esp, ebp
.text:00008AC6                 pop     ebp
.text:00008AC7                 retn
.text:00008AC7 _dlg_set_privdata endp
.text:00008AC7
.text:00008AC7 ; ---------------------------------------------------------------------------
.text:00008AC8 $LN6_11         dd 1                    ; DATA XREF: _dlg_set_privdata+91o
.text:00008ACC                 dd offset $LN5_22
.text:00008AD0 $LN5_22         dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:00008ACCo
.text:00008AD8                 dd offset $LN4_20
.text:00008ADC $LN4_20         dd 706D74h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00008AD8o
.text:00008AEC
.text:00008AEC ; =============== S U B R O U T I N E =======================================
.text:00008AEC
.text:00008AEC ; Attributes: bp-based frame
.text:00008AEC
.text:00008AEC                 public _dlg_alloc_privdata
.text:00008AEC _dlg_alloc_privdata proc near
.text:00008AEC
.text:00008AEC var_1C          = dword ptr -1Ch
.text:00008AEC var_18          = dword ptr -18h
.text:00008AEC var_14          = dword ptr -14h
.text:00008AEC var_10          = dword ptr -10h
.text:00008AEC var_C           = dword ptr -0Ch
.text:00008AEC var_8           = dword ptr -8
.text:00008AEC var_4           = dword ptr -4
.text:00008AEC arg_0           = dword ptr  8
.text:00008AEC arg_4           = dword ptr  0Ch
.text:00008AEC arg_8           = dword ptr  10h
.text:00008AEC
.text:00008AEC                 push    ebp
.text:00008AED                 mov     ebp, esp
.text:00008AEF                 sub     esp, 1Ch
.text:00008AF2                 mov     eax, 0CCCCCCCCh
.text:00008AF7                 mov     [ebp+var_1C], eax
.text:00008AFA                 mov     [ebp+var_18], eax
.text:00008AFD                 mov     [ebp+var_14], eax
.text:00008B00                 mov     [ebp+var_10], eax
.text:00008B03                 mov     [ebp+var_C], eax
.text:00008B06                 mov     [ebp+var_8], eax
.text:00008B09                 mov     [ebp+var_4], eax
.text:00008B0C                 mov     eax, [ebp+arg_4]
.text:00008B0F                 mov     [ebp+var_4], eax
.text:00008B12                 mov     ecx, [ebp+arg_0]
.text:00008B15                 mov     [ebp+var_14], ecx
.text:00008B18                 push    0
.text:00008B1A                 lea     edx, [ebp+var_14]
.text:00008B1D                 push    edx
.text:00008B1E                 mov     eax, [ebp+var_4]
.text:00008B21                 mov     ecx, [eax+0C4h]
.text:00008B27                 push    ecx
.text:00008B28                 call    _find234
.text:00008B2D                 add     esp, 0Ch
.text:00008B30                 mov     [ebp+var_1C], eax
.text:00008B33                 cmp     [ebp+var_1C], 0
.text:00008B37                 jnz     short loc_8B70
.text:00008B39                 push    0Ch
.text:00008B3B                 push    1
.text:00008B3D                 call    _safemalloc
.text:00008B42                 add     esp, 8
.text:00008B45                 mov     [ebp+var_1C], eax
.text:00008B48                 mov     edx, [ebp+var_1C]
.text:00008B4B                 mov     eax, [ebp+arg_0]
.text:00008B4E                 mov     [edx], eax
.text:00008B50                 mov     ecx, [ebp+var_1C]
.text:00008B53                 mov     dword ptr [ecx+8], 0
.text:00008B5A                 mov     edx, [ebp+var_1C]
.text:00008B5D                 push    edx
.text:00008B5E                 mov     eax, [ebp+var_4]
.text:00008B61                 mov     ecx, [eax+0C4h]
.text:00008B67                 push    ecx
.text:00008B68                 call    _add234
.text:00008B6D                 add     esp, 8
.text:00008B70
.text:00008B70 loc_8B70:                               ; CODE XREF: _dlg_alloc_privdata+4Bj
.text:00008B70                 mov     edx, [ebp+var_1C]
.text:00008B73                 cmp     dword ptr [edx+8], 0
.text:00008B77                 jz      short loc_8B90
.text:00008B79                 push    0A44h           ; Line
.text:00008B7E                 push    offset $SG90494 ; "..\\..\\winctrls.c"
.text:00008B83                 push    offset $SG90495 ; "!p->needs_free"
.text:00008B88                 call    __wassert
.text:00008B8D ; ---------------------------------------------------------------------------
.text:00008B8D                 add     esp, 0Ch
.text:00008B90
.text:00008B90 loc_8B90:                               ; CODE XREF: _dlg_alloc_privdata+8Bj
.text:00008B90                 mov     ecx, [ebp+var_1C]
.text:00008B93                 mov     dword ptr [ecx+8], 1
.text:00008B9A                 push    1
.text:00008B9C                 mov     edx, [ebp+arg_8]
.text:00008B9F                 push    edx
.text:00008BA0                 call    _safemalloc
.text:00008BA5                 add     esp, 8
.text:00008BA8                 mov     ecx, [ebp+var_1C]
.text:00008BAB                 mov     [ecx+4], eax
.text:00008BAE                 mov     edx, [ebp+var_1C]
.text:00008BB1                 mov     eax, [edx+4]
.text:00008BB4                 push    edx
.text:00008BB5                 mov     ecx, ebp
.text:00008BB7                 push    eax
.text:00008BB8                 lea     edx, $LN7_3
.text:00008BBE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00008BC3                 pop     eax
.text:00008BC4                 pop     edx
.text:00008BC5                 add     esp, 1Ch
.text:00008BC8                 cmp     ebp, esp
.text:00008BCA                 call    __RTC_CheckEsp
.text:00008BCF                 mov     esp, ebp
.text:00008BD1                 pop     ebp
.text:00008BD2                 retn
.text:00008BD2 _dlg_alloc_privdata endp
.text:00008BD2
.text:00008BD2 ; ---------------------------------------------------------------------------
.text:00008BD3                 align 4
.text:00008BD4 $LN7_3          dd 1                    ; DATA XREF: _dlg_alloc_privdata+CCo
.text:00008BD8                 dd offset $LN6_12
.text:00008BDC $LN6_12         dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:00008BD8o
.text:00008BE4                 dd offset $LN5_23
.text:00008BE8 $LN5_23         dd 706D74h              ; DATA XREF: .text:00008BE4o
.text:00008BE8 _text           ends
.text:00008BE8
.rtc$TMZ:00008BEC ; ===========================================================================
.rtc$TMZ:00008BEC
.rtc$TMZ:00008BEC ; Segment type: Pure data
.rtc$TMZ:00008BEC ; Segment permissions: Read
.rtc$TMZ:00008BEC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00008BEC                 assume cs:_rtc$TMZ
.rtc$TMZ:00008BEC                 ;org 8BECh
.rtc$TMZ:00008BEC ; COMDAT (pick any)
.rtc$TMZ:00008BEC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00008BEC _rtc$TMZ        ends
.rtc$TMZ:00008BEC
.rtc$IMZ:00008BF0 ; ===========================================================================
.rtc$IMZ:00008BF0
.rtc$IMZ:00008BF0 ; Segment type: Pure data
.rtc$IMZ:00008BF0 ; Segment permissions: Read
.rtc$IMZ:00008BF0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00008BF0                 assume cs:_rtc$IMZ
.rtc$IMZ:00008BF0                 ;org 8BF0h
.rtc$IMZ:00008BF0 ; COMDAT (pick any)
.rtc$IMZ:00008BF0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00008BF0 _rtc$IMZ        ends
.rtc$IMZ:00008BF0
UNDEF:00008C00 ; ===========================================================================
UNDEF:00008C00
UNDEF:00008C00 ; Segment type: Externs
UNDEF:00008C00 ; UNDEF
UNDEF:00008C00 ; BOOL __stdcall MapDialogRect(HWND hDlg, LPRECT lpRect)
UNDEF:00008C00                 extrn __imp__MapDialogRect@8:near
UNDEF:00008C00                                         ; CODE XREF: _ctlposinit+8Dp
UNDEF:00008C00                                         ; _doctl+30p ...
UNDEF:00008C04 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:00008C04                 extrn __imp__GetClientRect@8:near
UNDEF:00008C04                                         ; CODE XREF: _ctlposinit+5Bp
UNDEF:00008C04                                         ; DATA XREF: _ctlposinit+5Br
UNDEF:00008C08 ; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00008C08                 extrn __imp__SendMessageA@16:near
UNDEF:00008C08                                         ; CODE XREF: _ctlposinit+35p
UNDEF:00008C08                                         ; _doctl+9Ep ...
UNDEF:00008C0C                 extrn ___security_cookie:near ; DATA XREF: _ctlposinit+17r
UNDEF:00008C0C                                         ; _bartitle+20r ...
UNDEF:00008C10 ; __fastcall __security_check_cookie(x)
UNDEF:00008C10                 extrn @__security_check_cookie@4:near
UNDEF:00008C10                                         ; CODE XREF: _ctlposinit+EBp
UNDEF:00008C10                                         ; _bartitle+AFp ...
UNDEF:00008C14 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00008C14                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00008C14                                         ; CODE XREF: _ctlposinit+DDp
UNDEF:00008C14                                         ; _doctl+FCp ...
UNDEF:00008C18                 extrn __RTC_CheckEsp:near ; CODE XREF: _ctlposinit+3Dp
UNDEF:00008C18                                         ; _ctlposinit+63p ...
UNDEF:00008C1C                 extrn __RTC_Shutdown:near
UNDEF:00008C1C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00008C20                 extrn __RTC_InitBase:near
UNDEF:00008C20                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00008C24 ; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
UNDEF:00008C24                 extrn __imp__SetWindowPos@28:near ; CODE XREF: _doctl+D9p
UNDEF:00008C24                                         ; DATA XREF: _doctl+D9r
UNDEF:00008C28 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00008C28                 extrn _strcmp:near      ; CODE XREF: _doctl+B4p
UNDEF:00008C2C ; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:00008C2C                 extrn __imp__CreateWindowExA@48:near ; CODE XREF: _doctl+7Dp
UNDEF:00008C2C                                         ; DATA XREF: _doctl+7Dr
UNDEF:00008C30 ; HINSTANCE hinst
UNDEF:00008C30                 extrn _hinst:near       ; DATA XREF: _doctl+4Dr
UNDEF:00008C30                                         ; _winctrl_handle_command+E92r
UNDEF:00008C34                 extrn _safefree:near    ; CODE XREF: _radioline+100p
UNDEF:00008C34                                         ; _bareradioline+F3p ...
UNDEF:00008C38                 extrn _safemalloc:near  ; CODE XREF: _radioline+77p
UNDEF:00008C38                                         ; _bareradioline+6Ep ...
UNDEF:00008C3C                 extrn __RTC_UninitUse:near ; CODE XREF: _radioline_common+5Dp
UNDEF:00008C3C                                         ; _radioline_common+10Cp ...
UNDEF:00008C40 ; int __stdcall ReleaseDC(HWND hWnd, HDC hDC)
UNDEF:00008C40                 extrn __imp__ReleaseDC@8:near ; CODE XREF: _staticwrap+24Fp
UNDEF:00008C40                                         ; _winctrl_handle_command+CCFp ...
UNDEF:00008C44 ; char *__cdecl strncpy(char *Dest, const char *Source, size_t Count)
UNDEF:00008C44                 extrn _strncpy:near     ; CODE XREF: _staticwrap+1CFp
UNDEF:00008C44                                         ; _winctrl_handle_command+D73p
UNDEF:00008C48 ; int __cdecl isspace(int C)
UNDEF:00008C48                 extrn _isspace:near     ; CODE XREF: _staticwrap+1ADp
UNDEF:00008C48                                         ; _staticwrap+207p
UNDEF:00008C4C ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:00008C4C                 extrn _strcpy:near      ; CODE XREF: _staticwrap+17Fp
UNDEF:00008C50 ; BOOL __stdcall GetTextExtentExPointA(HDC hdc, LPCSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize)
UNDEF:00008C50                 extrn __imp__GetTextExtentExPointA@28:near
UNDEF:00008C50                                         ; CODE XREF: _staticwrap+155p
UNDEF:00008C50                                         ; DATA XREF: _staticwrap+155r
UNDEF:00008C54 ; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
UNDEF:00008C54                 extrn __imp__SelectObject@8:near
UNDEF:00008C54                                         ; CODE XREF: _staticwrap+110p
UNDEF:00008C54                                         ; _staticwrap+236p ...
UNDEF:00008C58 ; int __stdcall SetMapMode(HDC hdc, int iMode)
UNDEF:00008C58                 extrn __imp__SetMapMode@8:near ; CODE XREF: _staticwrap+9Dp
UNDEF:00008C58                                         ; _winctrl_handle_command+106p
UNDEF:00008C58                                         ; DATA XREF: ...
UNDEF:00008C5C ; size_t __cdecl strlen(const char *Str)
UNDEF:00008C5C                 extrn _strlen:near      ; CODE XREF: _staticwrap+55p
UNDEF:00008C5C                                         ; _staticwrap+7Ep ...
UNDEF:00008C60 ; int __stdcall GetDeviceCaps(HDC hdc, int index)
UNDEF:00008C60                 extrn __imp__GetDeviceCaps@8:near
UNDEF:00008C60                                         ; CODE XREF: _staticwrap+3Fp
UNDEF:00008C60                                         ; _winctrl_handle_command+C97p
UNDEF:00008C60                                         ; DATA XREF: ...
UNDEF:00008C64 ; HDC __stdcall GetDC(HWND hWnd)
UNDEF:00008C64                 extrn __imp__GetDC@4:near ; CODE XREF: _staticwrap+27p
UNDEF:00008C64                                         ; _winctrl_handle_command+C75p ...
UNDEF:00008C68 ; BOOL __stdcall MakeDragList(HWND hLB)
UNDEF:00008C68                 extrn __imp__MakeDragList@4:near ; CODE XREF: _prefslist+1DFp
UNDEF:00008C68                                         ; DATA XREF: _prefslist+1DFr
UNDEF:00008C6C ; int __stdcall LBItemFromPt(HWND hLB, POINT pt, BOOL bAutoScroll)
UNDEF:00008C6C                 extrn __imp__LBItemFromPt@16:near
UNDEF:00008C6C                                         ; CODE XREF: _pl_itemfrompt+29p
UNDEF:00008C6C                                         ; _pl_itemfrompt+57p ...
UNDEF:00008C70 ; BOOL __stdcall MessageBeep(UINT uType)
UNDEF:00008C70                 extrn __imp__MessageBeep@4:near
UNDEF:00008C70                                         ; CODE XREF: _handle_prefslist+355p
UNDEF:00008C70                                         ; _dlg_beep+8p
UNDEF:00008C70                                         ; DATA XREF: ...
UNDEF:00008C74 ; void __stdcall DrawInsert(HWND handParent, HWND hLB, int nItem)
UNDEF:00008C74                 extrn __imp__DrawInsert@12:near
UNDEF:00008C74                                         ; CODE XREF: _handle_prefslist+107p
UNDEF:00008C74                                         ; _handle_prefslist+1A1p ...
UNDEF:00008C78 ; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00008C78                 extrn __imp__SetWindowLongA@12:near
UNDEF:00008C78                                         ; CODE XREF: _handle_prefslist+DDp
UNDEF:00008C78                                         ; _handle_prefslist+1BEp ...
UNDEF:00008C7C ; LRESULT __stdcall SendDlgItemMessageA(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00008C7C                 extrn __imp__SendDlgItemMessageA@20:near
UNDEF:00008C7C                                         ; CODE XREF: _handle_prefslist+8Dp
UNDEF:00008C7C                                         ; _handle_prefslist+12Ep ...
UNDEF:00008C80 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:00008C80                 extrn __wassert:near    ; CODE XREF: _winctrl_add_shortcuts+6Fp
UNDEF:00008C80                                         ; _winctrl_rem_shortcuts+6Fp ...
UNDEF:00008C84 ; int __cdecl tolower(int C)
UNDEF:00008C84                 extrn _tolower:near     ; CODE XREF: _winctrl_add_shortcuts+45p
UNDEF:00008C84                                         ; _winctrl_rem_shortcuts+45p ...
UNDEF:00008C88                 extrn _newtree234:near  ; CODE XREF: _winctrl_init+8p
UNDEF:00008C88                                         ; _winctrl_init+1Ap ...
UNDEF:00008C8C                 extrn _freetree234:near ; CODE XREF: _winctrl_cleanup+58p
UNDEF:00008C8C                                         ; _winctrl_cleanup+67p ...
UNDEF:00008C90                 extrn _index234:near    ; CODE XREF: _winctrl_cleanup+14p
UNDEF:00008C90                                         ; _winctrl_findbyindex+Ep ...
UNDEF:00008C94                 extrn _add234:near      ; CODE XREF: _winctrl_add+1Dp
UNDEF:00008C94                                         ; _winctrl_add+52p ...
UNDEF:00008C98                 extrn _del234:near      ; CODE XREF: _winctrl_remove+15p
UNDEF:00008C98                                         ; _winctrl_remove+2Bp ...
UNDEF:00008C9C                 extrn _find234:near     ; CODE XREF: _winctrl_findbyctrl+12p
UNDEF:00008C9C                                         ; _winctrl_findbyid+13p ...
UNDEF:00008CA0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00008CA0                 extrn _memcpy:near      ; CODE XREF: _winctrl_layout+1160p
UNDEF:00008CA4                 extrn _fontspec_new:near ; CODE XREF: _winctrl_layout+10AAp
UNDEF:00008CA4                                         ; _winctrl_handle_command+E14p
UNDEF:00008CA8                 extrn _dupstr:near      ; CODE XREF: _winctrl_layout+144p
UNDEF:00008CAC ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00008CAC                 extrn _memset:near      ; CODE XREF: _winctrl_layout+A5p
UNDEF:00008CAC                                         ; _winctrl_layout+163p ...
UNDEF:00008CB0 ; BOOL __stdcall ChooseColorA(LPCHOOSECOLORA)
UNDEF:00008CB0                 extrn __imp__ChooseColorA@4:near
UNDEF:00008CB0                                         ; CODE XREF: _winctrl_handle_command+EE7p
UNDEF:00008CB0                                         ; DATA XREF: _winctrl_handle_command+EE7r
UNDEF:00008CB4                 extrn _fontspec_free:near
UNDEF:00008CB4                                         ; CODE XREF: _winctrl_handle_command+E40p
UNDEF:00008CB4                                         ; _dlg_fontsel_set+68p
UNDEF:00008CB8 ; BOOL __stdcall ChooseFontA(LPCHOOSEFONTA)
UNDEF:00008CB8                 extrn __imp__ChooseFontA@4:near
UNDEF:00008CB8                                         ; CODE XREF: _winctrl_handle_command+DD1p
UNDEF:00008CB8                                         ; DATA XREF: _winctrl_handle_command+DD1r
UNDEF:00008CBC ; int __stdcall MulDiv(int nNumber, int nNumerator, int nDenominator)
UNDEF:00008CBC                 extrn __imp__MulDiv@12:near
UNDEF:00008CBC                                         ; CODE XREF: _winctrl_handle_command+CAFp
UNDEF:00008CBC                                         ; DATA XREF: _winctrl_handle_command+CAFr
UNDEF:00008CC0                 extrn _request_file:near
UNDEF:00008CC0                                         ; CODE XREF: _winctrl_handle_command+B6Ap
UNDEF:00008CC4 ; UINT __stdcall GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax)
UNDEF:00008CC4                 extrn __imp__GetDlgItemTextA@16:near
UNDEF:00008CC4                                         ; CODE XREF: _winctrl_handle_command+B1Dp
UNDEF:00008CC4                                         ; DATA XREF: _winctrl_handle_command+B1Dr
UNDEF:00008CC8 ; HWND __stdcall SetCapture(HWND hWnd)
UNDEF:00008CC8                 extrn __imp__SetCapture@4:near
UNDEF:00008CC8                                         ; CODE XREF: _winctrl_handle_command+8D5p
UNDEF:00008CC8                                         ; DATA XREF: _winctrl_handle_command+8D5r
UNDEF:00008CCC ; UINT __stdcall IsDlgButtonChecked(HWND hDlg, int nIDButton)
UNDEF:00008CCC                 extrn __imp__IsDlgButtonChecked@8:near
UNDEF:00008CCC                                         ; CODE XREF: _winctrl_handle_command+57Ep
UNDEF:00008CCC                                         ; _dlg_radiobutton_get+91p ...
UNDEF:00008CD0 ; BOOL __stdcall SetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPCSTR lpString)
UNDEF:00008CD0                 extrn __imp__SetDlgItemTextA@12:near
UNDEF:00008CD0                                         ; CODE XREF: _winctrl_handle_command+42Ap
UNDEF:00008CD0                                         ; _winctrl_handle_command+B8Fp ...
UNDEF:00008CD4 ; BOOL __stdcall TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c)
UNDEF:00008CD4                 extrn __imp__TextOutA@20:near
UNDEF:00008CD4                                         ; CODE XREF: _winctrl_handle_command+1A0p
UNDEF:00008CD4                                         ; DATA XREF: _winctrl_handle_command+1A0r
UNDEF:00008CD8 ; BOOL __stdcall DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags)
UNDEF:00008CD8                 extrn __imp__DrawEdge@16:near
UNDEF:00008CD8                                         ; CODE XREF: _winctrl_handle_command+152p
UNDEF:00008CD8                                         ; DATA XREF: _winctrl_handle_command+152r
UNDEF:00008CDC ; BOOL __stdcall GetTextExtentPoint32A(HDC hdc, LPCSTR lpString, int c, LPSIZE psizl)
UNDEF:00008CDC                 extrn __imp__GetTextExtentPoint32A@16:near
UNDEF:00008CDC                                         ; CODE XREF: _winctrl_handle_command+134p
UNDEF:00008CDC                                         ; DATA XREF: _winctrl_handle_command+134r
UNDEF:00008CE0 ; UINT __stdcall RegisterWindowMessageA(LPCSTR lpString)
UNDEF:00008CE0                 extrn __imp__RegisterWindowMessageA@4:near
UNDEF:00008CE0                                         ; CODE XREF: _winctrl_handle_command+37p
UNDEF:00008CE0                                         ; DATA XREF: _winctrl_handle_command+37r
UNDEF:00008CE4                 extrn _launch_help:near ; CODE XREF: _winctrl_context_help+8Ap
UNDEF:00008CE8 ; BOOL __stdcall CheckRadioButton(HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton)
UNDEF:00008CE8                 extrn __imp__CheckRadioButton@16:near
UNDEF:00008CE8                                         ; CODE XREF: _dlg_radiobutton_set+84p
UNDEF:00008CE8                                         ; DATA XREF: _dlg_radiobutton_set+84r
UNDEF:00008CEC ; BOOL __stdcall CheckDlgButton(HWND hDlg, int nIDButton, UINT uCheck)
UNDEF:00008CEC                 extrn __imp__CheckDlgButton@12:near
UNDEF:00008CEC                                         ; CODE XREF: _dlg_checkbox_set+6Ep
UNDEF:00008CEC                                         ; DATA XREF: _dlg_checkbox_set+6Er
UNDEF:00008CF0                 extrn _GetDlgItemText_alloc:near
UNDEF:00008CF0                                         ; CODE XREF: _dlg_editbox_get+64p
UNDEF:00008CF0                                         ; _dlg_filesel_get+67p
UNDEF:00008CF4                 extrn _filename_from_str:near
UNDEF:00008CF4                                         ; CODE XREF: _dlg_filesel_get+76p
UNDEF:00008CF8                 extrn _dupprintf:near   ; CODE XREF: _dlg_fontsel_set+B9p
UNDEF:00008CF8                                         ; _dlg_fontsel_set+115p
UNDEF:00008CFC                 extrn _fontspec_copy:near ; CODE XREF: _dlg_fontsel_set+74p
UNDEF:00008CFC                                         ; _dlg_fontsel_get+5Bp
UNDEF:00008D00 ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:00008D00                 extrn __imp__InvalidateRect@12:near
UNDEF:00008D00                                         ; CODE XREF: _dlg_update_done+8Ap
UNDEF:00008D00                                         ; DATA XREF: _dlg_update_done+8Ar
UNDEF:00008D04 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00008D04                 extrn __imp__GetDlgItem@8:near
UNDEF:00008D04                                         ; CODE XREF: _dlg_update_done+57p
UNDEF:00008D04                                         ; _dlg_set_focus+10Dp
UNDEF:00008D04                                         ; DATA XREF: ...
UNDEF:00008D08 ; HWND __stdcall SetFocus(HWND hWnd)
UNDEF:00008D08                 extrn __imp__SetFocus@4:near ; CODE XREF: _dlg_set_focus+123p
UNDEF:00008D08                                         ; DATA XREF: _dlg_set_focus+123r
UNDEF:00008D0C ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:00008D0C                 extrn __imp__MessageBoxA@16:near
UNDEF:00008D0C                                         ; CODE XREF: _dlg_error_msg+48p
UNDEF:00008D0C                                         ; DATA XREF: _dlg_error_msg+48r
UNDEF:00008D10 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:00008D10                 extrn __imp__DeleteObject@4:near
UNDEF:00008D10                                         ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+144p
UNDEF:00008D10                                         ; DATA XREF: _dlg_auto_set_fixed_pitch_flag+144r
UNDEF:00008D14 ; BOOL __stdcall GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm)
UNDEF:00008D14                 extrn __imp__GetTextMetricsA@8:near
UNDEF:00008D14                                         ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+F9p
UNDEF:00008D14                                         ; DATA XREF: _dlg_auto_set_fixed_pitch_flag+F9r
UNDEF:00008D18 ; HFONT __stdcall CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName)
UNDEF:00008D18                 extrn __imp__CreateFontA@56:near
UNDEF:00008D18                                         ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+AAp
UNDEF:00008D18                                         ; DATA XREF: _dlg_auto_set_fixed_pitch_flag+AAr
UNDEF:00008D1C                 extrn _conf_get_fontspec:near
UNDEF:00008D1C                                         ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+47p
UNDEF:00008D20                 extrn _conf_get_int:near
UNDEF:00008D20                                         ; CODE XREF: _dlg_auto_set_fixed_pitch_flag+36p
UNDEF:00008D20
UNDEF:00008D20
UNDEF:00008D20                 end