.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 4FC6A37CD812D4D4828DB1551BB554C4
.rdata:00000000 ; Input CRC32 : D52516A8
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\errsock.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000 .intel_syntax noprefix
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ?socket_fn_table@?1??new_error_socket@@9@9 dd offset _sk_error_plug
.rdata:00000000                                         ; DATA XREF: _new_error_socket+1Do
.rdata:00000004                 dd offset _sk_error_close
.rdata:00000008                 db    0
.rdata:00000009                 db    0
.rdata:0000000A                 db    0
.rdata:0000000B                 db    0
.rdata:0000000C                 db    0
.rdata:0000000D                 db    0
.rdata:0000000E                 db    0
.rdata:0000000F                 db    0
.rdata:00000010                 db    0
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 db    0
.rdata:00000019                 db    0
.rdata:0000001A                 db    0
.rdata:0000001B                 db    0
.rdata:0000001C                 dd offset _sk_error_socket_error
.rdata:0000001C _rdata          ends
.rdata:0000001C
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 _sk_error_plug  proc near               ; DATA XREF: .rdata:?socket_fn_table@?1??new_error_socket@@9@9o
.text:00000020
.text:00000020 var_8           = dword ptr -8
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020 arg_4           = dword ptr  0Ch
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 sub     esp, 8
.text:00000026                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000002D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000034                 mov     eax, [ebp+arg_0]
.text:00000037                 mov     [ebp+var_4], eax
.text:0000003A                 mov     ecx, [ebp+var_4]
.text:0000003D                 mov     edx, [ecx+8]
.text:00000040                 mov     [ebp+var_8], edx
.text:00000043                 cmp     [ebp+arg_4], 0
.text:00000047                 jz      short loc_52
.text:00000049                 mov     eax, [ebp+var_4]
.text:0000004C                 mov     ecx, [ebp+arg_4]
.text:0000004F                 mov     [eax+8], ecx
.text:00000052
.text:00000052 loc_52:                                 ; CODE XREF: _sk_error_plug+27j
.text:00000052                 mov     eax, [ebp+var_8]
.text:00000055                 mov     esp, ebp
.text:00000057                 pop     ebp
.text:00000058                 retn
.text:00000058 _sk_error_plug  endp
.text:00000058
.text:00000058 ; ---------------------------------------------------------------------------
.text:00000059                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 _sk_error_close proc near               ; DATA XREF: .rdata:00000004o
.text:00000060
.text:00000060 var_4           = dword ptr -4
.text:00000060 arg_0           = dword ptr  8
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 push    ecx
.text:00000064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000006B                 mov     eax, [ebp+arg_0]
.text:0000006E                 mov     [ebp+var_4], eax
.text:00000071                 mov     ecx, [ebp+var_4]
.text:00000074                 mov     edx, [ecx+4]
.text:00000077                 push    edx
.text:00000078                 call    _safefree
.text:0000007D                 add     esp, 4
.text:00000080                 mov     eax, [ebp+var_4]
.text:00000083                 push    eax
.text:00000084                 call    _safefree
.text:00000089                 add     esp, 4
.text:0000008C                 add     esp, 4
.text:0000008F                 cmp     ebp, esp
.text:00000091                 call    __RTC_CheckEsp
.text:00000096                 mov     esp, ebp
.text:00000098                 pop     ebp
.text:00000099                 retn
.text:00000099 _sk_error_close endp
.text:00000099
.text:00000099 ; ---------------------------------------------------------------------------
.text:0000009A                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 _sk_error_socket_error proc near        ; DATA XREF: .rdata:0000001Co
.text:000000A0
.text:000000A0 var_4           = dword ptr -4
.text:000000A0 arg_0           = dword ptr  8
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 push    ecx
.text:000000A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000AB                 mov     eax, [ebp+arg_0]
.text:000000AE                 mov     [ebp+var_4], eax
.text:000000B1                 mov     ecx, [ebp+var_4]
.text:000000B4                 mov     eax, [ecx+4]
.text:000000B7                 mov     esp, ebp
.text:000000B9                 pop     ebp
.text:000000BA                 retn
.text:000000BA _sk_error_socket_error endp
.text:000000BA
.text:000000BA ; ---------------------------------------------------------------------------
.text:000000BB                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0                 public _new_error_socket
.text:000000C0 _new_error_socket proc near
.text:000000C0
.text:000000C0 var_4           = dword ptr -4
.text:000000C0 arg_0           = dword ptr  8
.text:000000C0 arg_4           = dword ptr  0Ch
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    ecx
.text:000000C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000CB                 push    0Ch
.text:000000CD                 push    1
.text:000000CF                 call    _safemalloc
.text:000000D4                 add     esp, 8
.text:000000D7                 mov     [ebp+var_4], eax
.text:000000DA                 mov     eax, [ebp+var_4]
.text:000000DD                 mov     dword ptr [eax], offset ?socket_fn_table@?1??new_error_socket@@9@9
.text:000000E3                 mov     ecx, [ebp+var_4]
.text:000000E6                 mov     edx, [ebp+arg_4]
.text:000000E9                 mov     [ecx+8], edx
.text:000000EC                 mov     eax, [ebp+arg_0]
.text:000000EF                 push    eax
.text:000000F0                 call    _dupstr
.text:000000F5                 add     esp, 4
.text:000000F8                 mov     ecx, [ebp+var_4]
.text:000000FB                 mov     [ecx+4], eax
.text:000000FE                 mov     eax, [ebp+var_4]
.text:00000101                 add     esp, 4
.text:00000104                 cmp     ebp, esp
.text:00000106                 call    __RTC_CheckEsp
.text:0000010B                 mov     esp, ebp
.text:0000010D                 pop     ebp
.text:0000010E                 retn
.text:0000010E _new_error_socket endp
.text:0000010E
.text:0000010E ; ---------------------------------------------------------------------------
.text:0000010F                 align 10h
.text:0000010F _text           ends
.text:0000010F
.rtc$TMZ:00000110 ; ===========================================================================
.rtc$TMZ:00000110
.rtc$TMZ:00000110 ; Segment type: Pure data
.rtc$TMZ:00000110 ; Segment permissions: Read
.rtc$TMZ:00000110 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000110                 assume cs:_rtc$TMZ
.rtc$TMZ:00000110                 ;org 110h
.rtc$TMZ:00000110 ; COMDAT (pick any)
.rtc$TMZ:00000110 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000110 _rtc$TMZ        ends
.rtc$TMZ:00000110
.rtc$IMZ:00000114 ; ===========================================================================
.rtc$IMZ:00000114
.rtc$IMZ:00000114 ; Segment type: Pure data
.rtc$IMZ:00000114 ; Segment permissions: Read
.rtc$IMZ:00000114 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000114                 assume cs:_rtc$IMZ
.rtc$IMZ:00000114                 ;org 114h
.rtc$IMZ:00000114 ; COMDAT (pick any)
.rtc$IMZ:00000114 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000114 _rtc$IMZ        ends
.rtc$IMZ:00000114
UNDEF:00000120 ; ===========================================================================
UNDEF:00000120
UNDEF:00000120 ; Segment type: Externs
UNDEF:00000120 ; UNDEF
UNDEF:00000120                 extrn __RTC_Shutdown:near
UNDEF:00000120                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000124                 extrn __RTC_InitBase:near
UNDEF:00000124                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000128                 extrn _safefree:near    ; CODE XREF: _sk_error_close+18p
UNDEF:00000128                                         ; _sk_error_close+24p
UNDEF:0000012C                 extrn __RTC_CheckEsp:near ; CODE XREF: _sk_error_close+31p
UNDEF:0000012C                                         ; _new_error_socket+46p
UNDEF:00000130                 extrn _dupstr:near      ; CODE XREF: _new_error_socket+30p
UNDEF:00000134                 extrn _safemalloc:near  ; CODE XREF: _new_error_socket+Fp
UNDEF:00000134
UNDEF:00000134
UNDEF:00000134                 end