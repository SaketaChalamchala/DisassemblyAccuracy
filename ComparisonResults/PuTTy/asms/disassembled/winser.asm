.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 8C3C92C100882CC95A8E79E16F7ADA29
.data:00000000 ; Input CRC32 : 8F9919CF
.data:00000000
.data:00000000 ; File Name   : C:\workspace\Putty\windows\VS2010\putty\Debug\winser.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 $SG85573        db 'End of file reading from serial device',0
.data:00000000                                         ; DATA XREF: _serial_gotdata+2Fo
.data:00000027                 align 4
.data:00000028 $SG85575        db 'Error reading from serial device',0
.data:00000028                                         ; DATA XREF: _serial_gotdata:loc_4B0o
.data:00000028                                         ; .data:$SG85611o ...
.data:00000049                 align 4
.data:0000004C $SG85576        db '%s',0               ; DATA XREF: _serial_gotdata+71o
.data:0000004F                 align 10h
.data:00000050 $SG85588        db 'Error writing to serial device',0
.data:00000050                                         ; DATA XREF: _serial_sentdata+29o
.data:0000006F                 align 10h
.data:00000070 $SG85589        db '%s',0               ; DATA XREF: _serial_sentdata+62o
.data:00000073                 align 4
.data:00000074 $SG85604        db 'Configuring baud rate %d',0
.data:00000074                                         ; DATA XREF: _serial_configure+DDo
.data:0000008D                 align 10h
.data:00000090 $SG85605        db 'Configuring %d data bits',0
.data:00000090                                         ; DATA XREF: _serial_configure+122o
.data:000000A9                 align 4
.data:000000AC $SG85611        dd offset $SG85575+9    ; DATA XREF: _serial_configure+17Ao
.data:000000AC                                         ; "ding from serial device"
.data:000000B0 $SG85613        db  31h ; 1             ; DATA XREF: _serial_configure+187o
.data:000000B1                 db  2Eh ; .
.data:000000B2                 db  35h ; 5
.data:000000B3                 db    0
.data:000000B4 $SG85615        dd offset $SG85575+0Ah  ; DATA XREF: _serial_configure+194o
.data:000000B4                                         ; "ing from serial device"
.data:000000B8 $SG85617        db 'Invalid number of stop bits (need 1, 1.5 or 2)',0
.data:000000B8                                         ; DATA XREF: _serial_configure:loc_805o
.data:000000E7                 align 4
.data:000000E8 $SG85618        db 'Configuring %s data bits',0
.data:000000E8                                         ; DATA XREF: _serial_configure+1ABo
.data:00000101                 align 4
.data:00000104 $SG85624        db 'no',0               ; DATA XREF: _serial_configure+1FFo
.data:00000107                 align 4
.data:00000108 $SG85626        db 'odd',0              ; DATA XREF: _serial_configure+20Co
.data:0000010C $SG85628        db 'even',0             ; DATA XREF: _serial_configure+219o
.data:00000111                 align 4
.data:00000114 $SG85630        db 'mark',0             ; DATA XREF: _serial_configure+226o
.data:00000119                 align 4
.data:0000011C $SG85632        db 'space',0            ; DATA XREF: _serial_configure+233o
.data:00000122                 align 4
.data:00000124 $SG85633        db 'Configuring %s parity',0
.data:00000124                                         ; DATA XREF: _serial_configure+23Eo
.data:0000013A                 align 4
.data:0000013C $SG85639        db 'no',0               ; DATA XREF: _serial_configure:$LN6o
.data:0000013F                 align 10h
.data:00000140 $SG85641        db 'XON/XOFF',0         ; DATA XREF: _serial_configure+2AEo
.data:00000149                 align 4
.data:0000014C $SG85643        db 'RTS/CTS',0          ; DATA XREF: _serial_configure+2D2o
.data:00000154 $SG85645        db 'DSR/DTR',0          ; DATA XREF: _serial_configure+2F0o
.data:0000015C $SG85646        db 'Configuring %s flow control',0
.data:0000015C                                         ; DATA XREF: _serial_configure+2FBo
.data:00000178 $SG85648        db 'Unable to configure serial port',0
.data:00000178                                         ; DATA XREF: _serial_configure+345o
.data:00000198 $SG85650        db 'Unable to configure serial timeouts',0
.data:00000198                                         ; DATA XREF: _serial_configure+38Ao
.data:000001BC $SG85680        db 'Opening serial device %s',0 ; DATA XREF: _serial_init+87o
.data:000001D5                 align 4
.data:000001D8 $SG85683        db '\\.\',0             ; DATA XREF: _serial_init:loc_37Do
.data:000001DD                 align 10h
.data:000001E0 $SG85684        db '%s%s',0             ; DATA XREF: _serial_init+D4o
.data:000001E5                 align 4
.data:000001E8 $SG85690        db 'Unable to open serial port',0
.data:000001E8                                         ; DATA XREF: _serial_init+11Eo
.data:00000203                 align 4
.data:00000204 $SG85743        db 'Finished serial break',0 ; DATA XREF: _serbreak_timer+44o
.data:0000021A                 align 4
.data:0000021C $SG85753        db 'Starting serial break at user request',0
.data:0000021C                                         ; DATA XREF: _serial_special+20o
.data:00000242                 align 4
.data:00000244 $SG85760        db 'Break',0            ; DATA XREF: .rdata:`serial_get_specials'::`2'::specialso
.data:0000024A                 align 4
.data:0000024C $SG85811        db 'serial',0           ; DATA XREF: .data:00000298o
.data:00000253                 align 8
.data:00000258                 public _serial_backend
.data:00000258 _serial_backend dd offset _serial_init
.data:0000025C                 dd offset _serial_free
.data:00000260                 dd offset _serial_reconfig
.data:00000264                 dd offset _serial_send
.data:00000268                 dd offset _serial_sendbuffer
.data:0000026C                 dd offset _serial_size
.data:00000270                 dd offset _serial_special
.data:00000274                 dd offset _serial_get_specials
.data:00000278                 dd offset _serial_connected
.data:0000027C                 dd offset _serial_exitcode
.data:00000280                 dd offset _serial_sendok
.data:00000284                 dd offset _serial_ldisc
.data:00000288                 dd offset _serial_provide_ldisc
.data:0000028C                 dd offset _serial_provide_logctx
.data:00000290                 dd offset _serial_unthrottle
.data:00000294                 dd offset _serial_cfg_info
.data:00000298                 dd offset $SG85811      ; "serial"
.data:0000029C                 db    4
.data:0000029D                 db    0
.data:0000029E                 db    0
.data:0000029F                 db    0
.data:000002A0                 db    0
.data:000002A1                 db    0
.data:000002A2                 db    0
.data:000002A3                 db    0
.data:000002A3 _data           ends
.data:000002A3
.bss:000002A4 ; ===========================================================================
.bss:000002A4
.bss:000002A4 ; Segment type: Uninitialized
.bss:000002A4 ; Segment permissions: Read/Write
.bss:000002A4 _bss            segment byte public 'BSS' use32
.bss:000002A4                 assume cs:_bss
.bss:000002A4                 ;org 2A4h
.bss:000002A4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000002A4 $SG85682        db    ? ;               ; DATA XREF: _serial_init+BCo
.bss:000002A5                 align 4
.bss:000002A5 _bss            ends
.bss:000002A5
.rdata:000002A8 ; ===========================================================================
.rdata:000002A8
.rdata:000002A8 ; Segment type: Pure data
.rdata:000002A8 ; Segment permissions: Read
.rdata:000002A8 _rdata          segment dword public 'DATA' use32
.rdata:000002A8                 assume cs:_rdata
.rdata:000002A8                 ;org 2A8h
.rdata:000002A8 ; `serial_get_specials'::`2'::specials
.rdata:000002A8 ?specials@?1??serial_get_specials@@9@9 dd offset $SG85760
.rdata:000002A8                                         ; DATA XREF: _serial_get_specials+3o
.rdata:000002A8                                         ; "Break"
.rdata:000002AC                 db    1
.rdata:000002AD                 db    0
.rdata:000002AE                 db    0
.rdata:000002AF                 db    0
.rdata:000002B0                 db    0
.rdata:000002B1                 db    0
.rdata:000002B2                 db    0
.rdata:000002B3                 db    0
.rdata:000002B4                 db  21h ; !
.rdata:000002B5                 db    0
.rdata:000002B6                 db    0
.rdata:000002B7                 db    0
.rdata:000002B7 _rdata          ends
.rdata:000002B7
.text:000002B8 ; ===========================================================================
.text:000002B8
.text:000002B8 ; Segment type: Pure code
.text:000002B8 ; Segment permissions: Read/Execute
.text:000002B8 _text           segment para public 'CODE' use32
.text:000002B8                 assume cs:_text
.text:000002B8                 ;org 2B8h
.text:000002B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000002B8
.text:000002B8 ; =============== S U B R O U T I N E =======================================
.text:000002B8
.text:000002B8 ; Attributes: bp-based frame
.text:000002B8
.text:000002B8 _serial_init    proc near               ; DATA XREF: .data:_serial_backendo
.text:000002B8
.text:000002B8 var_1C          = dword ptr -1Ch
.text:000002B8 lpFileName      = dword ptr -18h
.text:000002B8 var_14          = dword ptr -14h
.text:000002B8 Str             = dword ptr -10h
.text:000002B8 var_C           = dword ptr -0Ch
.text:000002B8 hFile           = dword ptr -8
.text:000002B8 var_4           = dword ptr -4
.text:000002B8 arg_0           = dword ptr  8
.text:000002B8 arg_4           = dword ptr  0Ch
.text:000002B8 arg_8           = dword ptr  10h
.text:000002B8 arg_14          = dword ptr  1Ch
.text:000002B8
.text:000002B8                 push    ebp
.text:000002B9                 mov     ebp, esp
.text:000002BB                 sub     esp, 1Ch
.text:000002BE                 push    esi
.text:000002BF                 mov     eax, 0CCCCCCCCh
.text:000002C4                 mov     [ebp+var_1C], eax
.text:000002C7                 mov     [ebp+lpFileName], eax
.text:000002CA                 mov     [ebp+var_14], eax
.text:000002CD                 mov     [ebp+Str], eax
.text:000002D0                 mov     [ebp+var_C], eax
.text:000002D3                 mov     [ebp+hFile], eax
.text:000002D6                 mov     [ebp+var_4], eax
.text:000002D9                 push    1Ch
.text:000002DB                 push    1
.text:000002DD                 call    _safemalloc
.text:000002E2                 add     esp, 8
.text:000002E5                 mov     [ebp+var_4], eax
.text:000002E8                 mov     eax, [ebp+var_4]
.text:000002EB                 mov     dword ptr [eax], 0FFFFFFFFh
.text:000002F1                 mov     ecx, [ebp+var_4]
.text:000002F4                 mov     dword ptr [ecx+8], 0
.text:000002FB                 mov     edx, [ebp+var_4]
.text:000002FE                 mov     dword ptr [edx+4], 0
.text:00000305                 mov     eax, [ebp+var_4]
.text:00000308                 mov     dword ptr [eax+10h], 0
.text:0000030F                 mov     ecx, [ebp+var_4]
.text:00000312                 mov     dword ptr [ecx+18h], 0
.text:00000319                 mov     edx, [ebp+arg_4]
.text:0000031C                 mov     eax, [ebp+var_4]
.text:0000031F                 mov     [edx], eax
.text:00000321                 mov     ecx, [ebp+var_4]
.text:00000324                 mov     edx, [ebp+arg_0]
.text:00000327                 mov     [ecx+0Ch], edx
.text:0000032A                 push    37h ; '7'
.text:0000032C                 mov     eax, [ebp+arg_8]
.text:0000032F                 push    eax
.text:00000330                 call    _conf_get_str
.text:00000335                 add     esp, 8
.text:00000338                 mov     [ebp+Str], eax
.text:0000033B                 mov     ecx, [ebp+Str]
.text:0000033E                 push    ecx
.text:0000033F                 push    offset $SG85680 ; "Opening serial device %s"
.text:00000344                 call    _dupprintf
.text:00000349                 add     esp, 8
.text:0000034C                 mov     [ebp+var_14], eax
.text:0000034F                 mov     edx, [ebp+var_14]
.text:00000352                 push    edx
.text:00000353                 mov     eax, [ebp+var_4]
.text:00000356                 mov     ecx, [eax+0Ch]
.text:00000359                 push    ecx
.text:0000035A                 call    _logevent
.text:0000035F                 add     esp, 8
.text:00000362                 push    5Ch ; '\'       ; Val
.text:00000364                 mov     edx, [ebp+Str]
.text:00000367                 push    edx             ; Str
.text:00000368                 call    _strchr
.text:0000036D                 add     esp, 8
.text:00000370                 test    eax, eax
.text:00000372                 jz      short loc_37D
.text:00000374                 mov     [ebp+var_1C], offset $SG85682
.text:0000037B                 jmp     short loc_384
.text:0000037D ; ---------------------------------------------------------------------------
.text:0000037D
.text:0000037D loc_37D:                                ; CODE XREF: _serial_init+BAj
.text:0000037D                 mov     [ebp+var_1C], offset $SG85683 ; "\\\\.\\"
.text:00000384
.text:00000384 loc_384:                                ; CODE XREF: _serial_init+C3j
.text:00000384                 mov     eax, [ebp+Str]
.text:00000387                 push    eax
.text:00000388                 mov     ecx, [ebp+var_1C]
.text:0000038B                 push    ecx
.text:0000038C                 push    offset $SG85684 ; "%s%s"
.text:00000391                 call    _dupprintf
.text:00000396                 add     esp, 0Ch
.text:00000399                 mov     [ebp+lpFileName], eax
.text:0000039C                 mov     esi, esp
.text:0000039E                 push    0               ; hTemplateFile
.text:000003A0                 push    40000000h       ; dwFlagsAndAttributes
.text:000003A5                 push    3               ; dwCreationDisposition
.text:000003A7                 push    0               ; lpSecurityAttributes
.text:000003A9                 push    0               ; dwShareMode
.text:000003AB                 push    0C0000000h      ; dwDesiredAccess
.text:000003B0                 mov     edx, [ebp+lpFileName]
.text:000003B3                 push    edx             ; lpFileName
.text:000003B4                 call    dword ptr ds:__imp__CreateFileA@28 ; CreateFileA(x,x,x,x,x,x,x)
.text:000003BA                 cmp     esi, esp
.text:000003BC                 call    __RTC_CheckEsp
.text:000003C1                 mov     [ebp+hFile], eax
.text:000003C4                 mov     eax, [ebp+lpFileName]
.text:000003C7                 push    eax
.text:000003C8                 call    _safefree
.text:000003CD                 add     esp, 4
.text:000003D0                 cmp     [ebp+hFile], 0FFFFFFFFh
.text:000003D4                 jnz     short loc_3E0
.text:000003D6                 mov     eax, offset $SG85690 ; "Unable to open serial port"
.text:000003DB                 jmp     loc_466
.text:000003E0 ; ---------------------------------------------------------------------------
.text:000003E0
.text:000003E0 loc_3E0:                                ; CODE XREF: _serial_init+11Cj
.text:000003E0                 mov     ecx, [ebp+arg_8]
.text:000003E3                 push    ecx             ; int
.text:000003E4                 mov     edx, [ebp+hFile]
.text:000003E7                 push    edx             ; hFile
.text:000003E8                 mov     eax, [ebp+var_4]
.text:000003EB                 push    eax             ; int
.text:000003EC                 call    _serial_configure
.text:000003F1                 add     esp, 0Ch
.text:000003F4                 mov     [ebp+var_C], eax
.text:000003F7                 cmp     [ebp+var_C], 0
.text:000003FB                 jz      short loc_402
.text:000003FD                 mov     eax, [ebp+var_C]
.text:00000400                 jmp     short loc_466
.text:00000402 ; ---------------------------------------------------------------------------
.text:00000402
.text:00000402 loc_402:                                ; CODE XREF: _serial_init+143j
.text:00000402                 mov     ecx, [ebp+var_4]
.text:00000405                 mov     edx, [ebp+hFile]
.text:00000408                 mov     [ecx], edx
.text:0000040A                 push    1
.text:0000040C                 mov     eax, [ebp+var_4]
.text:0000040F                 push    eax
.text:00000410                 push    offset _serial_sentdata
.text:00000415                 mov     ecx, [ebp+hFile]
.text:00000418                 push    ecx
.text:00000419                 call    _handle_output_new
.text:0000041E                 add     esp, 10h
.text:00000421                 mov     edx, [ebp+var_4]
.text:00000424                 mov     [edx+4], eax
.text:00000427                 push    7
.text:00000429                 mov     eax, [ebp+var_4]
.text:0000042C                 push    eax
.text:0000042D                 push    offset _serial_gotdata
.text:00000432                 mov     ecx, [ebp+hFile]
.text:00000435                 push    ecx
.text:00000436                 call    _handle_input_new
.text:0000043B                 add     esp, 10h
.text:0000043E                 mov     edx, [ebp+var_4]
.text:00000441                 mov     [edx+8], eax
.text:00000444                 mov     eax, [ebp+Str]
.text:00000447                 push    eax
.text:00000448                 call    _dupstr
.text:0000044D                 add     esp, 4
.text:00000450                 mov     ecx, [ebp+arg_14]
.text:00000453                 mov     [ecx], eax
.text:00000455                 mov     edx, [ebp+var_4]
.text:00000458                 mov     eax, [edx+0Ch]
.text:0000045B                 push    eax
.text:0000045C                 call    _update_specials_menu
.text:00000461                 add     esp, 4
.text:00000464                 xor     eax, eax
.text:00000466
.text:00000466 loc_466:                                ; CODE XREF: _serial_init+123j
.text:00000466                                         ; _serial_init+148j
.text:00000466                 pop     esi
.text:00000467                 add     esp, 1Ch
.text:0000046A                 cmp     ebp, esp
.text:0000046C                 call    __RTC_CheckEsp
.text:00000471                 mov     esp, ebp
.text:00000473                 pop     ebp
.text:00000474                 retn
.text:00000474 _serial_init    endp
.text:00000474
.text:00000474 ; ---------------------------------------------------------------------------
.text:00000475                 align 4
.text:00000478
.text:00000478 ; =============== S U B R O U T I N E =======================================
.text:00000478
.text:00000478 ; Attributes: bp-based frame
.text:00000478
.text:00000478 _serial_gotdata proc near               ; DATA XREF: _serial_init+175o
.text:00000478
.text:00000478 var_8           = dword ptr -8
.text:00000478 var_4           = dword ptr -4
.text:00000478 arg_0           = dword ptr  8
.text:00000478 arg_4           = dword ptr  0Ch
.text:00000478 arg_8           = dword ptr  10h
.text:00000478
.text:00000478                 push    ebp
.text:00000479                 mov     ebp, esp
.text:0000047B                 sub     esp, 8
.text:0000047E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000485                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048C                 mov     eax, [ebp+arg_0]
.text:0000048F                 push    eax
.text:00000490                 call    _handle_get_privdata
.text:00000495                 add     esp, 4
.text:00000498                 mov     [ebp+var_4], eax
.text:0000049B                 cmp     [ebp+arg_8], 0
.text:0000049F                 jg      short loc_503
.text:000004A1                 cmp     [ebp+arg_8], 0
.text:000004A5                 jnz     short loc_4B0
.text:000004A7                 mov     [ebp+var_8], offset $SG85573 ; "End of file reading from serial device"
.text:000004AE                 jmp     short loc_4B7
.text:000004B0 ; ---------------------------------------------------------------------------
.text:000004B0
.text:000004B0 loc_4B0:                                ; CODE XREF: _serial_gotdata+2Dj
.text:000004B0                 mov     [ebp+var_8], offset $SG85575 ; "Error reading from serial device"
.text:000004B7
.text:000004B7 loc_4B7:                                ; CODE XREF: _serial_gotdata+36j
.text:000004B7                 mov     ecx, [ebp+var_4]
.text:000004BA                 push    ecx
.text:000004BB                 call    _serial_terminate
.text:000004C0                 add     esp, 4
.text:000004C3                 mov     edx, [ebp+var_4]
.text:000004C6                 mov     eax, [edx+0Ch]
.text:000004C9                 push    eax
.text:000004CA                 call    _notify_remote_exit
.text:000004CF                 add     esp, 4
.text:000004D2                 mov     ecx, [ebp+var_8]
.text:000004D5                 push    ecx
.text:000004D6                 mov     edx, [ebp+var_4]
.text:000004D9                 mov     eax, [edx+0Ch]
.text:000004DC                 push    eax
.text:000004DD                 call    _logevent
.text:000004E2                 add     esp, 8
.text:000004E5                 mov     ecx, [ebp+var_8]
.text:000004E8                 push    ecx
.text:000004E9                 push    offset $SG85576 ; "%s"
.text:000004EE                 mov     edx, [ebp+var_4]
.text:000004F1                 mov     eax, [edx+0Ch]
.text:000004F4                 push    eax
.text:000004F5                 call    _connection_fatal
.text:000004FA                 add     esp, 0Ch
.text:000004FD                 xor     eax, eax
.text:000004FF                 jmp     short loc_51C
.text:00000501 ; ---------------------------------------------------------------------------
.text:00000501                 jmp     short loc_51C
.text:00000503 ; ---------------------------------------------------------------------------
.text:00000503
.text:00000503 loc_503:                                ; CODE XREF: _serial_gotdata+27j
.text:00000503                 mov     ecx, [ebp+arg_8]
.text:00000506                 push    ecx
.text:00000507                 mov     edx, [ebp+arg_4]
.text:0000050A                 push    edx
.text:0000050B                 push    0
.text:0000050D                 mov     eax, [ebp+var_4]
.text:00000510                 mov     ecx, [eax+0Ch]
.text:00000513                 push    ecx
.text:00000514                 call    _from_backend
.text:00000519                 add     esp, 10h
.text:0000051C
.text:0000051C loc_51C:                                ; CODE XREF: _serial_gotdata+87j
.text:0000051C                                         ; _serial_gotdata+89j
.text:0000051C                 add     esp, 8
.text:0000051F                 cmp     ebp, esp
.text:00000521                 call    __RTC_CheckEsp
.text:00000526                 mov     esp, ebp
.text:00000528                 pop     ebp
.text:00000529                 retn
.text:00000529 _serial_gotdata endp
.text:00000529
.text:00000529 ; ---------------------------------------------------------------------------
.text:0000052A                 db 0Eh dup(0CCh)
.text:00000538
.text:00000538 ; =============== S U B R O U T I N E =======================================
.text:00000538
.text:00000538 ; Attributes: bp-based frame
.text:00000538
.text:00000538 _serial_terminate proc near             ; CODE XREF: _serial_gotdata+43p
.text:00000538                                         ; _serial_sentdata+34p ...
.text:00000538
.text:00000538 arg_0           = dword ptr  8
.text:00000538
.text:00000538                 push    ebp
.text:00000539                 mov     ebp, esp
.text:0000053B                 push    esi
.text:0000053C                 mov     eax, [ebp+arg_0]
.text:0000053F                 cmp     dword ptr [eax+4], 0
.text:00000543                 jz      short loc_55E
.text:00000545                 mov     ecx, [ebp+arg_0]
.text:00000548                 mov     edx, [ecx+4]
.text:0000054B                 push    edx
.text:0000054C                 call    _handle_free
.text:00000551                 add     esp, 4
.text:00000554                 mov     eax, [ebp+arg_0]
.text:00000557                 mov     dword ptr [eax+4], 0
.text:0000055E
.text:0000055E loc_55E:                                ; CODE XREF: _serial_terminate+Bj
.text:0000055E                 mov     ecx, [ebp+arg_0]
.text:00000561                 cmp     dword ptr [ecx+8], 0
.text:00000565                 jz      short loc_580
.text:00000567                 mov     edx, [ebp+arg_0]
.text:0000056A                 mov     eax, [edx+8]
.text:0000056D                 push    eax
.text:0000056E                 call    _handle_free
.text:00000573                 add     esp, 4
.text:00000576                 mov     ecx, [ebp+arg_0]
.text:00000579                 mov     dword ptr [ecx+8], 0
.text:00000580
.text:00000580 loc_580:                                ; CODE XREF: _serial_terminate+2Dj
.text:00000580                 mov     edx, [ebp+arg_0]
.text:00000583                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:00000586                 jz      short loc_5C4
.text:00000588                 mov     eax, [ebp+arg_0]
.text:0000058B                 cmp     dword ptr [eax+18h], 0
.text:0000058F                 jz      short loc_5A6
.text:00000591                 mov     esi, esp
.text:00000593                 mov     ecx, [ebp+arg_0]
.text:00000596                 mov     edx, [ecx]
.text:00000598                 push    edx             ; hFile
.text:00000599                 call    dword ptr ds:__imp__ClearCommBreak@4 ; ClearCommBreak(x)
.text:0000059F                 cmp     esi, esp
.text:000005A1                 call    __RTC_CheckEsp
.text:000005A6
.text:000005A6 loc_5A6:                                ; CODE XREF: _serial_terminate+57j
.text:000005A6                 mov     esi, esp
.text:000005A8                 mov     eax, [ebp+arg_0]
.text:000005AB                 mov     ecx, [eax]
.text:000005AD                 push    ecx             ; hObject
.text:000005AE                 call    dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
.text:000005B4                 cmp     esi, esp
.text:000005B6                 call    __RTC_CheckEsp
.text:000005BB                 mov     edx, [ebp+arg_0]
.text:000005BE                 mov     dword ptr [edx], 0FFFFFFFFh
.text:000005C4
.text:000005C4 loc_5C4:                                ; CODE XREF: _serial_terminate+4Ej
.text:000005C4                 pop     esi
.text:000005C5                 cmp     ebp, esp
.text:000005C7                 call    __RTC_CheckEsp
.text:000005CC                 pop     ebp
.text:000005CD                 retn
.text:000005CD _serial_terminate endp
.text:000005CD
.text:000005CD ; ---------------------------------------------------------------------------
.text:000005CE                 db 0Ah dup(0CCh)
.text:000005D8
.text:000005D8 ; =============== S U B R O U T I N E =======================================
.text:000005D8
.text:000005D8 ; Attributes: bp-based frame
.text:000005D8
.text:000005D8 _serial_sentdata proc near              ; DATA XREF: _serial_init+158o
.text:000005D8
.text:000005D8 var_8           = dword ptr -8
.text:000005D8 var_4           = dword ptr -4
.text:000005D8 arg_0           = dword ptr  8
.text:000005D8 arg_4           = dword ptr  0Ch
.text:000005D8
.text:000005D8                 push    ebp
.text:000005D9                 mov     ebp, esp
.text:000005DB                 sub     esp, 8
.text:000005DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005EC                 mov     eax, [ebp+arg_0]
.text:000005EF                 push    eax
.text:000005F0                 call    _handle_get_privdata
.text:000005F5                 add     esp, 4
.text:000005F8                 mov     [ebp+var_4], eax
.text:000005FB                 cmp     [ebp+arg_4], 0
.text:000005FF                 jge     short loc_650
.text:00000601                 mov     [ebp+var_8], offset $SG85588 ; "Error writing to serial device"
.text:00000608                 mov     ecx, [ebp+var_4]
.text:0000060B                 push    ecx
.text:0000060C                 call    _serial_terminate
.text:00000611                 add     esp, 4
.text:00000614                 mov     edx, [ebp+var_4]
.text:00000617                 mov     eax, [edx+0Ch]
.text:0000061A                 push    eax
.text:0000061B                 call    _notify_remote_exit
.text:00000620                 add     esp, 4
.text:00000623                 mov     ecx, [ebp+var_8]
.text:00000626                 push    ecx
.text:00000627                 mov     edx, [ebp+var_4]
.text:0000062A                 mov     eax, [edx+0Ch]
.text:0000062D                 push    eax
.text:0000062E                 call    _logevent
.text:00000633                 add     esp, 8
.text:00000636                 mov     ecx, [ebp+var_8]
.text:00000639                 push    ecx
.text:0000063A                 push    offset $SG85589 ; "%s"
.text:0000063F                 mov     edx, [ebp+var_4]
.text:00000642                 mov     eax, [edx+0Ch]
.text:00000645                 push    eax
.text:00000646                 call    _connection_fatal
.text:0000064B                 add     esp, 0Ch
.text:0000064E                 jmp     short loc_659
.text:00000650 ; ---------------------------------------------------------------------------
.text:00000650
.text:00000650 loc_650:                                ; CODE XREF: _serial_sentdata+27j
.text:00000650                 mov     ecx, [ebp+var_4]
.text:00000653                 mov     edx, [ebp+arg_4]
.text:00000656                 mov     [ecx+10h], edx
.text:00000659
.text:00000659 loc_659:                                ; CODE XREF: _serial_sentdata+76j
.text:00000659                 add     esp, 8
.text:0000065C                 cmp     ebp, esp
.text:0000065E                 call    __RTC_CheckEsp
.text:00000663                 mov     esp, ebp
.text:00000665                 pop     ebp
.text:00000666                 retn
.text:00000666 _serial_sentdata endp
.text:00000666
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000667                 align 4
.text:00000668
.text:00000668 ; =============== S U B R O U T I N E =======================================
.text:00000668
.text:00000668 ; Attributes: bp-based frame
.text:00000668
.text:00000668 ; int __cdecl serial_configure(int, HANDLE hFile, int)
.text:00000668 _serial_configure proc near             ; CODE XREF: _serial_init+134p
.text:00000668                                         ; _serial_reconfig+28p
.text:00000668
.text:00000668 var_58          = dword ptr -58h
.text:00000668 var_54          = dword ptr -54h
.text:00000668 var_50          = dword ptr -50h
.text:00000668 var_4C          = dword ptr -4Ch
.text:00000668 var_48          = dword ptr -48h
.text:00000668 CommTimeouts    = _COMMTIMEOUTS ptr -40h
.text:00000668 DCB             = _DCB ptr -24h
.text:00000668 var_4           = dword ptr -4
.text:00000668 arg_0           = dword ptr  8
.text:00000668 hFile           = dword ptr  0Ch
.text:00000668 arg_8           = dword ptr  10h
.text:00000668
.text:00000668                 push    ebp
.text:00000669                 mov     ebp, esp
.text:0000066B                 sub     esp, 58h
.text:0000066E                 push    esi
.text:0000066F                 push    edi
.text:00000670                 lea     edi, [ebp+var_58]
.text:00000673                 mov     ecx, 16h
.text:00000678                 mov     eax, 0CCCCCCCCh
.text:0000067D                 rep stosd
.text:0000067F                 mov     eax, dword ptr ds:___security_cookie
.text:00000684                 xor     eax, ebp
.text:00000686                 mov     [ebp+var_4], eax
.text:00000689                 mov     esi, esp
.text:0000068B                 lea     eax, [ebp+DCB]
.text:0000068E                 push    eax             ; lpDCB
.text:0000068F                 mov     ecx, [ebp+hFile]
.text:00000692                 push    ecx             ; hFile
.text:00000693                 call    dword ptr ds:__imp__GetCommState@8 ; GetCommState(x,x)
.text:00000699                 cmp     esi, esp
.text:0000069B                 call    __RTC_CheckEsp
.text:000006A0                 test    eax, eax
.text:000006A2                 jz      loc_9F9
.text:000006A8                 mov     edx, [ebp+DCB._bf8]
.text:000006AB                 or      edx, 1
.text:000006AE                 mov     [ebp+DCB._bf8], edx
.text:000006B1                 mov     eax, [ebp+DCB._bf8]
.text:000006B4                 and     eax, 0FFFFFFCFh
.text:000006B7                 or      eax, 10h
.text:000006BA                 mov     [ebp+DCB._bf8], eax
.text:000006BD                 mov     ecx, [ebp+DCB._bf8]
.text:000006C0                 and     ecx, 0FFFFFFBFh
.text:000006C3                 mov     [ebp+DCB._bf8], ecx
.text:000006C6                 mov     edx, [ebp+DCB._bf8]
.text:000006C9                 and     edx, 0FFFFFF7Fh
.text:000006CF                 mov     [ebp+DCB._bf8], edx
.text:000006D2                 mov     eax, [ebp+DCB._bf8]
.text:000006D5                 and     eax, 0FFFFFEFFh
.text:000006DA                 mov     [ebp+DCB._bf8], eax
.text:000006DD                 mov     ecx, [ebp+DCB._bf8]
.text:000006E0                 and     ecx, 0FFFFFDFFh
.text:000006E6                 mov     [ebp+DCB._bf8], ecx
.text:000006E9                 mov     edx, [ebp+DCB._bf8]
.text:000006EC                 and     edx, 0FFFFFBFFh
.text:000006F2                 mov     [ebp+DCB._bf8], edx
.text:000006F5                 mov     eax, [ebp+DCB._bf8]
.text:000006F8                 and     eax, 0FFFFF7FFh
.text:000006FD                 mov     [ebp+DCB._bf8], eax
.text:00000700                 mov     ecx, [ebp+DCB._bf8]
.text:00000703                 and     ecx, 0FFFFCFFFh
.text:00000709                 or      ecx, 1000h
.text:0000070F                 mov     [ebp+DCB._bf8], ecx
.text:00000712                 mov     edx, [ebp+DCB._bf8]
.text:00000715                 and     edx, 0FFFFBFFFh
.text:0000071B                 mov     [ebp+DCB._bf8], edx
.text:0000071E                 mov     eax, [ebp+DCB._bf8]
.text:00000721                 and     eax, 0FFFFFFFBh
.text:00000724                 mov     [ebp+DCB._bf8], eax
.text:00000727                 mov     ecx, [ebp+DCB._bf8]
.text:0000072A                 and     ecx, 0FFFFFFF7h
.text:0000072D                 mov     [ebp+DCB._bf8], ecx
.text:00000730                 push    38h ; '8'
.text:00000732                 mov     edx, [ebp+arg_8]
.text:00000735                 push    edx
.text:00000736                 call    _conf_get_int
.text:0000073B                 add     esp, 8
.text:0000073E                 mov     [ebp+DCB.BaudRate], eax
.text:00000741                 mov     eax, [ebp+DCB.BaudRate]
.text:00000744                 push    eax
.text:00000745                 push    offset $SG85604 ; "Configuring baud rate %d"
.text:0000074A                 call    _dupprintf
.text:0000074F                 add     esp, 8
.text:00000752                 mov     [ebp+var_48], eax
.text:00000755                 mov     ecx, [ebp+var_48]
.text:00000758                 push    ecx
.text:00000759                 mov     edx, [ebp+arg_0]
.text:0000075C                 mov     eax, [edx+0Ch]
.text:0000075F                 push    eax
.text:00000760                 call    _logevent
.text:00000765                 add     esp, 8
.text:00000768                 mov     ecx, [ebp+var_48]
.text:0000076B                 push    ecx
.text:0000076C                 call    _safefree
.text:00000771                 add     esp, 4
.text:00000774                 push    39h ; '9'
.text:00000776                 mov     edx, [ebp+arg_8]
.text:00000779                 push    edx
.text:0000077A                 call    _conf_get_int
.text:0000077F                 add     esp, 8
.text:00000782                 mov     [ebp+DCB.ByteSize], al
.text:00000785                 movzx   eax, [ebp+DCB.ByteSize]
.text:00000789                 push    eax
.text:0000078A                 push    offset $SG85605 ; "Configuring %d data bits"
.text:0000078F                 call    _dupprintf
.text:00000794                 add     esp, 8
.text:00000797                 mov     [ebp+var_48], eax
.text:0000079A                 mov     ecx, [ebp+var_48]
.text:0000079D                 push    ecx
.text:0000079E                 mov     edx, [ebp+arg_0]
.text:000007A1                 mov     eax, [edx+0Ch]
.text:000007A4                 push    eax
.text:000007A5                 call    _logevent
.text:000007AA                 add     esp, 8
.text:000007AD                 mov     ecx, [ebp+var_48]
.text:000007B0                 push    ecx
.text:000007B1                 call    _safefree
.text:000007B6                 add     esp, 4
.text:000007B9                 push    3Ah ; ':'
.text:000007BB                 mov     edx, [ebp+arg_8]
.text:000007BE                 push    edx
.text:000007BF                 call    _conf_get_int
.text:000007C4                 add     esp, 8
.text:000007C7                 mov     [ebp+var_50], eax
.text:000007CA                 cmp     [ebp+var_50], 2
.text:000007CE                 jz      short loc_7DE
.text:000007D0                 cmp     [ebp+var_50], 3
.text:000007D4                 jz      short loc_7EB
.text:000007D6                 cmp     [ebp+var_50], 4
.text:000007DA                 jz      short loc_7F8
.text:000007DC                 jmp     short loc_805
.text:000007DE ; ---------------------------------------------------------------------------
.text:000007DE
.text:000007DE loc_7DE:                                ; CODE XREF: _serial_configure+166j
.text:000007DE                 mov     [ebp+DCB.StopBits], 0
.text:000007E2                 mov     [ebp+var_4C], offset $SG85611
.text:000007E9                 jmp     short loc_80F
.text:000007EB ; ---------------------------------------------------------------------------
.text:000007EB
.text:000007EB loc_7EB:                                ; CODE XREF: _serial_configure+16Cj
.text:000007EB                 mov     [ebp+DCB.StopBits], 1
.text:000007EF                 mov     [ebp+var_4C], offset $SG85613
.text:000007F6                 jmp     short loc_80F
.text:000007F8 ; ---------------------------------------------------------------------------
.text:000007F8
.text:000007F8 loc_7F8:                                ; CODE XREF: _serial_configure+172j
.text:000007F8                 mov     [ebp+DCB.StopBits], 2
.text:000007FC                 mov     [ebp+var_4C], offset $SG85615
.text:00000803                 jmp     short loc_80F
.text:00000805 ; ---------------------------------------------------------------------------
.text:00000805
.text:00000805 loc_805:                                ; CODE XREF: _serial_configure+174j
.text:00000805                 mov     eax, offset $SG85617 ; "Invalid number of stop bits (need 1, 1."...
.text:0000080A                 jmp     loc_9FB
.text:0000080F ; ---------------------------------------------------------------------------
.text:0000080F
.text:0000080F loc_80F:                                ; CODE XREF: _serial_configure+181j
.text:0000080F                                         ; _serial_configure+18Ej ...
.text:0000080F                 mov     eax, [ebp+var_4C]
.text:00000812                 push    eax
.text:00000813                 push    offset $SG85618 ; "Configuring %s data bits"
.text:00000818                 call    _dupprintf
.text:0000081D                 add     esp, 8
.text:00000820                 mov     [ebp+var_48], eax
.text:00000823                 mov     ecx, [ebp+var_48]
.text:00000826                 push    ecx
.text:00000827                 mov     edx, [ebp+arg_0]
.text:0000082A                 mov     eax, [edx+0Ch]
.text:0000082D                 push    eax
.text:0000082E                 call    _logevent
.text:00000833                 add     esp, 8
.text:00000836                 mov     ecx, [ebp+var_48]
.text:00000839                 push    ecx
.text:0000083A                 call    _safefree
.text:0000083F                 add     esp, 4
.text:00000842                 push    3Bh ; ';'
.text:00000844                 mov     edx, [ebp+arg_8]
.text:00000847                 push    edx
.text:00000848                 call    _conf_get_int
.text:0000084D                 add     esp, 8
.text:00000850                 mov     [ebp+var_54], eax
.text:00000853                 cmp     [ebp+var_54], 4 ; switch 5 cases
.text:00000857                 ja      short loc_8A2   ; jumptable 0000085C default case
.text:00000859                 mov     eax, [ebp+var_54]
.text:0000085C                 jmp     ds:$LN29[eax*4] ; switch jump
.text:00000863 ; ---------------------------------------------------------------------------
.text:00000863
.text:00000863 $LN13:                                  ; CODE XREF: _serial_configure+1F4j
.text:00000863                                         ; DATA XREF: .text:$LN29o
.text:00000863                 mov     [ebp+DCB.Parity], 0 ; jumptable 0000085C case 0
.text:00000867                 mov     [ebp+var_4C], offset $SG85624 ; "no"
.text:0000086E                 jmp     short loc_8A2   ; jumptable 0000085C default case
.text:00000870 ; ---------------------------------------------------------------------------
.text:00000870
.text:00000870 $LN12:                                  ; CODE XREF: _serial_configure+1F4j
.text:00000870                                         ; DATA XREF: .text:$LN29o
.text:00000870                 mov     [ebp+DCB.Parity], 1 ; jumptable 0000085C case 1
.text:00000874                 mov     [ebp+var_4C], offset $SG85626 ; "odd"
.text:0000087B                 jmp     short loc_8A2   ; jumptable 0000085C default case
.text:0000087D ; ---------------------------------------------------------------------------
.text:0000087D
.text:0000087D $LN11:                                  ; CODE XREF: _serial_configure+1F4j
.text:0000087D                                         ; DATA XREF: .text:$LN29o
.text:0000087D                 mov     [ebp+DCB.Parity], 2 ; jumptable 0000085C case 2
.text:00000881                 mov     [ebp+var_4C], offset $SG85628 ; "even"
.text:00000888                 jmp     short loc_8A2   ; jumptable 0000085C default case
.text:0000088A ; ---------------------------------------------------------------------------
.text:0000088A
.text:0000088A $LN10:                                  ; CODE XREF: _serial_configure+1F4j
.text:0000088A                                         ; DATA XREF: .text:$LN29o
.text:0000088A                 mov     [ebp+DCB.Parity], 3 ; jumptable 0000085C case 3
.text:0000088E                 mov     [ebp+var_4C], offset $SG85630 ; "mark"
.text:00000895                 jmp     short loc_8A2   ; jumptable 0000085C default case
.text:00000897 ; ---------------------------------------------------------------------------
.text:00000897
.text:00000897 $LN9:                                   ; CODE XREF: _serial_configure+1F4j
.text:00000897                                         ; DATA XREF: .text:$LN29o
.text:00000897                 mov     [ebp+DCB.Parity], 4 ; jumptable 0000085C case 4
.text:0000089B                 mov     [ebp+var_4C], offset $SG85632 ; "space"
.text:000008A2
.text:000008A2 loc_8A2:                                ; CODE XREF: _serial_configure+1EFj
.text:000008A2                                         ; _serial_configure+206j ...
.text:000008A2                 mov     ecx, [ebp+var_4C] ; jumptable 0000085C default case
.text:000008A5                 push    ecx
.text:000008A6                 push    offset $SG85633 ; "Configuring %s parity"
.text:000008AB                 call    _dupprintf
.text:000008B0                 add     esp, 8
.text:000008B3                 mov     [ebp+var_48], eax
.text:000008B6                 mov     edx, [ebp+var_48]
.text:000008B9                 push    edx
.text:000008BA                 mov     eax, [ebp+arg_0]
.text:000008BD                 mov     ecx, [eax+0Ch]
.text:000008C0                 push    ecx
.text:000008C1                 call    _logevent
.text:000008C6                 add     esp, 8
.text:000008C9                 mov     edx, [ebp+var_48]
.text:000008CC                 push    edx
.text:000008CD                 call    _safefree
.text:000008D2                 add     esp, 4
.text:000008D5                 push    3Ch ; '<'
.text:000008D7                 mov     eax, [ebp+arg_8]
.text:000008DA                 push    eax
.text:000008DB                 call    _conf_get_int
.text:000008E0                 add     esp, 8
.text:000008E3                 mov     [ebp+var_58], eax
.text:000008E6                 cmp     [ebp+var_58], 3 ; switch 4 cases
.text:000008EA                 ja      short loc_95F   ; jumptable 000008EF default case
.text:000008EC                 mov     ecx, [ebp+var_58]
.text:000008EF                 jmp     ds:$LN30[ecx*4] ; switch jump
.text:000008F6 ; ---------------------------------------------------------------------------
.text:000008F6
.text:000008F6 $LN6:                                   ; CODE XREF: _serial_configure+287j
.text:000008F6                                         ; DATA XREF: .text:$LN30o
.text:000008F6                 mov     [ebp+var_4C], offset $SG85639 ; jumptable 000008EF case 0
.text:000008FD                 jmp     short loc_95F   ; jumptable 000008EF default case
.text:000008FF ; ---------------------------------------------------------------------------
.text:000008FF
.text:000008FF $LN5:                                   ; CODE XREF: _serial_configure+287j
.text:000008FF                                         ; DATA XREF: .text:$LN30o
.text:000008FF                 mov     edx, [ebp+DCB._bf8] ; jumptable 000008EF case 1
.text:00000902                 or      edx, 200h
.text:00000908                 mov     [ebp+DCB._bf8], edx
.text:0000090B                 mov     eax, [ebp+DCB._bf8]
.text:0000090E                 or      eax, 100h
.text:00000913                 mov     [ebp+DCB._bf8], eax
.text:00000916                 mov     [ebp+var_4C], offset $SG85641 ; "XON/XOFF"
.text:0000091D                 jmp     short loc_95F   ; jumptable 000008EF default case
.text:0000091F ; ---------------------------------------------------------------------------
.text:0000091F
.text:0000091F $LN4:                                   ; CODE XREF: _serial_configure+287j
.text:0000091F                                         ; DATA XREF: .text:$LN30o
.text:0000091F                 mov     ecx, [ebp+DCB._bf8] ; jumptable 000008EF case 2
.text:00000922                 and     ecx, 0FFFFCFFFh
.text:00000928                 or      ecx, 2000h
.text:0000092E                 mov     [ebp+DCB._bf8], ecx
.text:00000931                 mov     edx, [ebp+DCB._bf8]
.text:00000934                 or      edx, 4
.text:00000937                 mov     [ebp+DCB._bf8], edx
.text:0000093A                 mov     [ebp+var_4C], offset $SG85643 ; "RTS/CTS"
.text:00000941                 jmp     short loc_95F   ; jumptable 000008EF default case
.text:00000943 ; ---------------------------------------------------------------------------
.text:00000943
.text:00000943 $LN3:                                   ; CODE XREF: _serial_configure+287j
.text:00000943                                         ; DATA XREF: .text:$LN30o
.text:00000943                 mov     eax, [ebp+DCB._bf8] ; jumptable 000008EF case 3
.text:00000946                 and     eax, 0FFFFFFCFh
.text:00000949                 or      eax, 20h
.text:0000094C                 mov     [ebp+DCB._bf8], eax
.text:0000094F                 mov     ecx, [ebp+DCB._bf8]
.text:00000952                 or      ecx, 8
.text:00000955                 mov     [ebp+DCB._bf8], ecx
.text:00000958                 mov     [ebp+var_4C], offset $SG85645 ; "DSR/DTR"
.text:0000095F
.text:0000095F loc_95F:                                ; CODE XREF: _serial_configure+282j
.text:0000095F                                         ; _serial_configure+295j ...
.text:0000095F                 mov     edx, [ebp+var_4C] ; jumptable 000008EF default case
.text:00000962                 push    edx
.text:00000963                 push    offset $SG85646 ; "Configuring %s flow control"
.text:00000968                 call    _dupprintf
.text:0000096D                 add     esp, 8
.text:00000970                 mov     [ebp+var_48], eax
.text:00000973                 mov     eax, [ebp+var_48]
.text:00000976                 push    eax
.text:00000977                 mov     ecx, [ebp+arg_0]
.text:0000097A                 mov     edx, [ecx+0Ch]
.text:0000097D                 push    edx
.text:0000097E                 call    _logevent
.text:00000983                 add     esp, 8
.text:00000986                 mov     eax, [ebp+var_48]
.text:00000989                 push    eax
.text:0000098A                 call    _safefree
.text:0000098F                 add     esp, 4
.text:00000992                 mov     esi, esp
.text:00000994                 lea     ecx, [ebp+DCB]
.text:00000997                 push    ecx             ; lpDCB
.text:00000998                 mov     edx, [ebp+hFile]
.text:0000099B                 push    edx             ; hFile
.text:0000099C                 call    dword ptr ds:__imp__SetCommState@8 ; SetCommState(x,x)
.text:000009A2                 cmp     esi, esp
.text:000009A4                 call    __RTC_CheckEsp
.text:000009A9                 test    eax, eax
.text:000009AB                 jnz     short loc_9B4
.text:000009AD                 mov     eax, offset $SG85648 ; "Unable to configure serial port"
.text:000009B2                 jmp     short loc_9FB
.text:000009B4 ; ---------------------------------------------------------------------------
.text:000009B4
.text:000009B4 loc_9B4:                                ; CODE XREF: _serial_configure+343j
.text:000009B4                 mov     [ebp+CommTimeouts.ReadIntervalTimeout], 1
.text:000009BB                 mov     [ebp+CommTimeouts.ReadTotalTimeoutMultiplier], 0
.text:000009C2                 mov     [ebp+CommTimeouts.ReadTotalTimeoutConstant], 0
.text:000009C9                 mov     [ebp+CommTimeouts.WriteTotalTimeoutMultiplier], 0
.text:000009D0                 mov     [ebp+CommTimeouts.WriteTotalTimeoutConstant], 0
.text:000009D7                 mov     esi, esp
.text:000009D9                 lea     eax, [ebp+CommTimeouts]
.text:000009DC                 push    eax             ; lpCommTimeouts
.text:000009DD                 mov     ecx, [ebp+hFile]
.text:000009E0                 push    ecx             ; hFile
.text:000009E1                 call    dword ptr ds:__imp__SetCommTimeouts@8 ; SetCommTimeouts(x,x)
.text:000009E7                 cmp     esi, esp
.text:000009E9                 call    __RTC_CheckEsp
.text:000009EE                 test    eax, eax
.text:000009F0                 jnz     short loc_9F9
.text:000009F2                 mov     eax, offset $SG85650 ; "Unable to configure serial timeouts"
.text:000009F7                 jmp     short loc_9FB
.text:000009F9 ; ---------------------------------------------------------------------------
.text:000009F9
.text:000009F9 loc_9F9:                                ; CODE XREF: _serial_configure+3Aj
.text:000009F9                                         ; _serial_configure+388j
.text:000009F9                 xor     eax, eax
.text:000009FB
.text:000009FB loc_9FB:                                ; CODE XREF: _serial_configure+1A2j
.text:000009FB                                         ; _serial_configure+34Aj ...
.text:000009FB                 push    edx
.text:000009FC                 mov     ecx, ebp
.text:000009FE                 push    eax
.text:000009FF                 lea     edx, $LN28
.text:00000A05                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A0A                 pop     eax
.text:00000A0B                 pop     edx
.text:00000A0C                 pop     edi
.text:00000A0D                 pop     esi
.text:00000A0E                 mov     ecx, [ebp+var_4]
.text:00000A11                 xor     ecx, ebp
.text:00000A13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000A18                 add     esp, 58h
.text:00000A1B                 cmp     ebp, esp
.text:00000A1D                 call    __RTC_CheckEsp
.text:00000A22                 mov     esp, ebp
.text:00000A24                 pop     ebp
.text:00000A25                 retn
.text:00000A25 _serial_configure endp
.text:00000A25
.text:00000A25 ; ---------------------------------------------------------------------------
.text:00000A26                 align 4
.text:00000A28 $LN28           dd 2                    ; DATA XREF: _serial_configure+397o
.text:00000A2C                 dd offset $LN27
.text:00000A30 $LN27           dd 0FFFFFFDCh, 1Ch      ; DATA XREF: .text:00000A2Co
.text:00000A38                 dd offset $LN25         ; "dcb"
.text:00000A3C                 dd 0FFFFFFC0h, 14h
.text:00000A44                 dd offset $LN26         ; "timeouts"
.text:00000A48 $LN26           db 'timeouts',0         ; DATA XREF: .text:00000A44o
.text:00000A51 $LN25           db 'dcb',0              ; DATA XREF: .text:00000A38o
.text:00000A55                 align 4
.text:00000A58 $LN29           dd offset $LN13         ; DATA XREF: _serial_configure+1F4r
.text:00000A58                 dd offset $LN12         ; jump table for switch statement
.text:00000A58                 dd offset $LN11
.text:00000A58                 dd offset $LN10
.text:00000A58                 dd offset $LN9
.text:00000A6C $LN30           dd offset $LN6          ; DATA XREF: _serial_configure+287r
.text:00000A6C                 dd offset $LN5          ; jump table for switch statement
.text:00000A6C                 dd offset $LN4
.text:00000A6C                 dd offset $LN3
.text:00000A7C                 db 0Ch dup(0CCh)
.text:00000A88
.text:00000A88 ; =============== S U B R O U T I N E =======================================
.text:00000A88
.text:00000A88 ; Attributes: bp-based frame
.text:00000A88
.text:00000A88 _serial_free    proc near               ; DATA XREF: .data:0000025Co
.text:00000A88
.text:00000A88 var_4           = dword ptr -4
.text:00000A88 arg_0           = dword ptr  8
.text:00000A88
.text:00000A88                 push    ebp
.text:00000A89                 mov     ebp, esp
.text:00000A8B                 push    ecx
.text:00000A8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A93                 mov     eax, [ebp+arg_0]
.text:00000A96                 mov     [ebp+var_4], eax
.text:00000A99                 mov     ecx, [ebp+var_4]
.text:00000A9C                 push    ecx
.text:00000A9D                 call    _serial_terminate
.text:00000AA2                 add     esp, 4
.text:00000AA5                 mov     edx, [ebp+var_4]
.text:00000AA8                 push    edx
.text:00000AA9                 call    _expire_timer_context
.text:00000AAE                 add     esp, 4
.text:00000AB1                 mov     eax, [ebp+var_4]
.text:00000AB4                 push    eax
.text:00000AB5                 call    _safefree
.text:00000ABA                 add     esp, 4
.text:00000ABD                 add     esp, 4
.text:00000AC0                 cmp     ebp, esp
.text:00000AC2                 call    __RTC_CheckEsp
.text:00000AC7                 mov     esp, ebp
.text:00000AC9                 pop     ebp
.text:00000ACA                 retn
.text:00000ACA _serial_free    endp
.text:00000ACA
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACB                 db 0Dh dup(0CCh)
.text:00000AD8
.text:00000AD8 ; =============== S U B R O U T I N E =======================================
.text:00000AD8
.text:00000AD8 ; Attributes: bp-based frame
.text:00000AD8
.text:00000AD8 _serial_reconfig proc near              ; DATA XREF: .data:00000260o
.text:00000AD8
.text:00000AD8 var_8           = dword ptr -8
.text:00000AD8 var_4           = dword ptr -4
.text:00000AD8 arg_0           = dword ptr  8
.text:00000AD8 arg_4           = dword ptr  0Ch
.text:00000AD8
.text:00000AD8                 push    ebp
.text:00000AD9                 mov     ebp, esp
.text:00000ADB                 sub     esp, 8
.text:00000ADE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AEC                 mov     eax, [ebp+arg_0]
.text:00000AEF                 mov     [ebp+var_4], eax
.text:00000AF2                 mov     ecx, [ebp+arg_4]
.text:00000AF5                 push    ecx             ; int
.text:00000AF6                 mov     edx, [ebp+var_4]
.text:00000AF9                 mov     eax, [edx]
.text:00000AFB                 push    eax             ; hFile
.text:00000AFC                 mov     ecx, [ebp+var_4]
.text:00000AFF                 push    ecx             ; int
.text:00000B00                 call    _serial_configure
.text:00000B05                 add     esp, 0Ch
.text:00000B08                 mov     [ebp+var_8], eax
.text:00000B0B                 add     esp, 8
.text:00000B0E                 cmp     ebp, esp
.text:00000B10                 call    __RTC_CheckEsp
.text:00000B15                 mov     esp, ebp
.text:00000B17                 pop     ebp
.text:00000B18                 retn
.text:00000B18 _serial_reconfig endp
.text:00000B18
.text:00000B18 ; ---------------------------------------------------------------------------
.text:00000B19                 db 0Fh dup(0CCh)
.text:00000B28
.text:00000B28 ; =============== S U B R O U T I N E =======================================
.text:00000B28
.text:00000B28 ; Attributes: bp-based frame
.text:00000B28
.text:00000B28 _serial_send    proc near               ; DATA XREF: .data:00000264o
.text:00000B28
.text:00000B28 var_4           = dword ptr -4
.text:00000B28 arg_0           = dword ptr  8
.text:00000B28 arg_4           = dword ptr  0Ch
.text:00000B28 arg_8           = dword ptr  10h
.text:00000B28
.text:00000B28                 push    ebp
.text:00000B29                 mov     ebp, esp
.text:00000B2B                 push    ecx
.text:00000B2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B33                 mov     eax, [ebp+arg_0]
.text:00000B36                 mov     [ebp+var_4], eax
.text:00000B39                 mov     ecx, [ebp+var_4]
.text:00000B3C                 cmp     dword ptr [ecx+4], 0
.text:00000B40                 jnz     short loc_B46
.text:00000B42                 xor     eax, eax
.text:00000B44                 jmp     short loc_B69
.text:00000B46 ; ---------------------------------------------------------------------------
.text:00000B46
.text:00000B46 loc_B46:                                ; CODE XREF: _serial_send+18j
.text:00000B46                 mov     edx, [ebp+arg_8]
.text:00000B49                 push    edx
.text:00000B4A                 mov     eax, [ebp+arg_4]
.text:00000B4D                 push    eax
.text:00000B4E                 mov     ecx, [ebp+var_4]
.text:00000B51                 mov     edx, [ecx+4]
.text:00000B54                 push    edx
.text:00000B55                 call    _handle_write
.text:00000B5A                 add     esp, 0Ch
.text:00000B5D                 mov     ecx, [ebp+var_4]
.text:00000B60                 mov     [ecx+10h], eax
.text:00000B63                 mov     edx, [ebp+var_4]
.text:00000B66                 mov     eax, [edx+10h]
.text:00000B69
.text:00000B69 loc_B69:                                ; CODE XREF: _serial_send+1Cj
.text:00000B69                 add     esp, 4
.text:00000B6C                 cmp     ebp, esp
.text:00000B6E                 call    __RTC_CheckEsp
.text:00000B73                 mov     esp, ebp
.text:00000B75                 pop     ebp
.text:00000B76                 retn
.text:00000B76 _serial_send    endp
.text:00000B76
.text:00000B76 ; ---------------------------------------------------------------------------
.text:00000B77                 align 4
.text:00000B78
.text:00000B78 ; =============== S U B R O U T I N E =======================================
.text:00000B78
.text:00000B78 ; Attributes: bp-based frame
.text:00000B78
.text:00000B78 _serial_sendbuffer proc near            ; DATA XREF: .data:00000268o
.text:00000B78
.text:00000B78 var_4           = dword ptr -4
.text:00000B78 arg_0           = dword ptr  8
.text:00000B78
.text:00000B78                 push    ebp
.text:00000B79                 mov     ebp, esp
.text:00000B7B                 push    ecx
.text:00000B7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B83                 mov     eax, [ebp+arg_0]
.text:00000B86                 mov     [ebp+var_4], eax
.text:00000B89                 mov     ecx, [ebp+var_4]
.text:00000B8C                 mov     eax, [ecx+10h]
.text:00000B8F                 mov     esp, ebp
.text:00000B91                 pop     ebp
.text:00000B92                 retn
.text:00000B92 _serial_sendbuffer endp
.text:00000B92
.text:00000B92 ; ---------------------------------------------------------------------------
.text:00000B93                 align 8
.text:00000B98
.text:00000B98 ; =============== S U B R O U T I N E =======================================
.text:00000B98
.text:00000B98 ; Attributes: bp-based frame
.text:00000B98
.text:00000B98 _serial_size    proc near               ; DATA XREF: .data:0000026Co
.text:00000B98                 push    ebp
.text:00000B99                 mov     ebp, esp
.text:00000B9B                 pop     ebp
.text:00000B9C                 retn
.text:00000B9C _serial_size    endp
.text:00000B9C
.text:00000B9C ; ---------------------------------------------------------------------------
.text:00000B9D                 db 0Bh dup(0CCh)
.text:00000BA8
.text:00000BA8 ; =============== S U B R O U T I N E =======================================
.text:00000BA8
.text:00000BA8 ; Attributes: bp-based frame
.text:00000BA8
.text:00000BA8 _serial_special proc near               ; DATA XREF: .data:00000270o
.text:00000BA8
.text:00000BA8 var_4           = dword ptr -4
.text:00000BA8 arg_0           = dword ptr  8
.text:00000BA8 arg_4           = dword ptr  0Ch
.text:00000BA8
.text:00000BA8                 push    ebp
.text:00000BA9                 mov     ebp, esp
.text:00000BAB                 push    ecx
.text:00000BAC                 push    esi
.text:00000BAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BB4                 mov     eax, [ebp+arg_0]
.text:00000BB7                 mov     [ebp+var_4], eax
.text:00000BBA                 mov     ecx, [ebp+var_4]
.text:00000BBD                 cmp     dword ptr [ecx], 0
.text:00000BC0                 jz      short loc_C17
.text:00000BC2                 cmp     [ebp+arg_4], 1
.text:00000BC6                 jnz     short loc_C17
.text:00000BC8                 push    offset $SG85753 ; "Starting serial break at user request"
.text:00000BCD                 mov     edx, [ebp+var_4]
.text:00000BD0                 mov     eax, [edx+0Ch]
.text:00000BD3                 push    eax
.text:00000BD4                 call    _logevent
.text:00000BD9                 add     esp, 8
.text:00000BDC                 mov     esi, esp
.text:00000BDE                 mov     ecx, [ebp+var_4]
.text:00000BE1                 mov     edx, [ecx]
.text:00000BE3                 push    edx             ; hFile
.text:00000BE4                 call    dword ptr ds:__imp__SetCommBreak@4 ; SetCommBreak(x)
.text:00000BEA                 cmp     esi, esp
.text:00000BEC                 call    __RTC_CheckEsp
.text:00000BF1                 mov     eax, [ebp+var_4]
.text:00000BF4                 push    eax
.text:00000BF5                 push    offset _serbreak_timer
.text:00000BFA                 push    190h
.text:00000BFF                 call    _schedule_timer
.text:00000C04                 add     esp, 0Ch
.text:00000C07                 mov     ecx, [ebp+var_4]
.text:00000C0A                 mov     [ecx+14h], eax
.text:00000C0D                 mov     edx, [ebp+var_4]
.text:00000C10                 mov     dword ptr [edx+18h], 1
.text:00000C17
.text:00000C17 loc_C17:                                ; CODE XREF: _serial_special+18j
.text:00000C17                                         ; _serial_special+1Ej
.text:00000C17                 pop     esi
.text:00000C18                 add     esp, 4
.text:00000C1B                 cmp     ebp, esp
.text:00000C1D                 call    __RTC_CheckEsp
.text:00000C22                 mov     esp, ebp
.text:00000C24                 pop     ebp
.text:00000C25                 retn
.text:00000C25 _serial_special endp
.text:00000C25
.text:00000C25 ; ---------------------------------------------------------------------------
.text:00000C26                 align 4
.text:00000C28
.text:00000C28 ; =============== S U B R O U T I N E =======================================
.text:00000C28
.text:00000C28 ; Attributes: bp-based frame
.text:00000C28
.text:00000C28 _serbreak_timer proc near               ; DATA XREF: _serial_special+4Do
.text:00000C28
.text:00000C28 var_4           = dword ptr -4
.text:00000C28 arg_0           = dword ptr  8
.text:00000C28 arg_4           = dword ptr  0Ch
.text:00000C28
.text:00000C28                 push    ebp
.text:00000C29                 mov     ebp, esp
.text:00000C2B                 push    ecx
.text:00000C2C                 push    esi
.text:00000C2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C34                 mov     eax, [ebp+arg_0]
.text:00000C37                 mov     [ebp+var_4], eax
.text:00000C3A                 mov     ecx, [ebp+var_4]
.text:00000C3D                 mov     edx, [ebp+arg_4]
.text:00000C40                 cmp     edx, [ecx+14h]
.text:00000C43                 jnz     short loc_C80
.text:00000C45                 mov     eax, [ebp+var_4]
.text:00000C48                 cmp     dword ptr [eax], 0
.text:00000C4B                 jz      short loc_C80
.text:00000C4D                 mov     esi, esp
.text:00000C4F                 mov     ecx, [ebp+var_4]
.text:00000C52                 mov     edx, [ecx]
.text:00000C54                 push    edx             ; hFile
.text:00000C55                 call    dword ptr ds:__imp__ClearCommBreak@4 ; ClearCommBreak(x)
.text:00000C5B                 cmp     esi, esp
.text:00000C5D                 call    __RTC_CheckEsp
.text:00000C62                 mov     eax, [ebp+var_4]
.text:00000C65                 mov     dword ptr [eax+18h], 0
.text:00000C6C                 push    offset $SG85743 ; "Finished serial break"
.text:00000C71                 mov     ecx, [ebp+var_4]
.text:00000C74                 mov     edx, [ecx+0Ch]
.text:00000C77                 push    edx
.text:00000C78                 call    _logevent
.text:00000C7D                 add     esp, 8
.text:00000C80
.text:00000C80 loc_C80:                                ; CODE XREF: _serbreak_timer+1Bj
.text:00000C80                                         ; _serbreak_timer+23j
.text:00000C80                 pop     esi
.text:00000C81                 add     esp, 4
.text:00000C84                 cmp     ebp, esp
.text:00000C86                 call    __RTC_CheckEsp
.text:00000C8B                 mov     esp, ebp
.text:00000C8D                 pop     ebp
.text:00000C8E                 retn
.text:00000C8E _serbreak_timer endp
.text:00000C8E
.text:00000C8E ; ---------------------------------------------------------------------------
.text:00000C8F                 db 9 dup(0CCh)
.text:00000C98
.text:00000C98 ; =============== S U B R O U T I N E =======================================
.text:00000C98
.text:00000C98 ; Attributes: bp-based frame
.text:00000C98
.text:00000C98 _serial_get_specials proc near          ; DATA XREF: .data:00000274o
.text:00000C98                 push    ebp
.text:00000C99                 mov     ebp, esp
.text:00000C9B                 mov     eax, offset ?specials@?1??serial_get_specials@@9@9 ; `serial_get_specials'::`2'::specials
.text:00000CA0                 pop     ebp
.text:00000CA1                 retn
.text:00000CA1 _serial_get_specials endp
.text:00000CA1
.text:00000CA1 ; ---------------------------------------------------------------------------
.text:00000CA2                 align 8
.text:00000CA8
.text:00000CA8 ; =============== S U B R O U T I N E =======================================
.text:00000CA8
.text:00000CA8 ; Attributes: bp-based frame
.text:00000CA8
.text:00000CA8 _serial_connected proc near             ; DATA XREF: .data:00000278o
.text:00000CA8                 push    ebp
.text:00000CA9                 mov     ebp, esp
.text:00000CAB                 mov     eax, 1
.text:00000CB0                 pop     ebp
.text:00000CB1                 retn
.text:00000CB1 _serial_connected endp
.text:00000CB1
.text:00000CB1 ; ---------------------------------------------------------------------------
.text:00000CB2                 align 8
.text:00000CB8
.text:00000CB8 ; =============== S U B R O U T I N E =======================================
.text:00000CB8
.text:00000CB8 ; Attributes: bp-based frame
.text:00000CB8
.text:00000CB8 _serial_sendok  proc near               ; DATA XREF: .data:00000280o
.text:00000CB8                 push    ebp
.text:00000CB9                 mov     ebp, esp
.text:00000CBB                 mov     eax, 1
.text:00000CC0                 pop     ebp
.text:00000CC1                 retn
.text:00000CC1 _serial_sendok  endp
.text:00000CC1
.text:00000CC1 ; ---------------------------------------------------------------------------
.text:00000CC2                 align 8
.text:00000CC8
.text:00000CC8 ; =============== S U B R O U T I N E =======================================
.text:00000CC8
.text:00000CC8 ; Attributes: bp-based frame
.text:00000CC8
.text:00000CC8 _serial_unthrottle proc near            ; DATA XREF: .data:00000290o
.text:00000CC8
.text:00000CC8 var_4           = dword ptr -4
.text:00000CC8 arg_0           = dword ptr  8
.text:00000CC8 arg_4           = dword ptr  0Ch
.text:00000CC8
.text:00000CC8                 push    ebp
.text:00000CC9                 mov     ebp, esp
.text:00000CCB                 push    ecx
.text:00000CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CD3                 mov     eax, [ebp+arg_0]
.text:00000CD6                 mov     [ebp+var_4], eax
.text:00000CD9                 mov     ecx, [ebp+var_4]
.text:00000CDC                 cmp     dword ptr [ecx+8], 0
.text:00000CE0                 jz      short loc_CF5
.text:00000CE2                 mov     edx, [ebp+arg_4]
.text:00000CE5                 push    edx
.text:00000CE6                 mov     eax, [ebp+var_4]
.text:00000CE9                 mov     ecx, [eax+8]
.text:00000CEC                 push    ecx
.text:00000CED                 call    _handle_unthrottle
.text:00000CF2                 add     esp, 8
.text:00000CF5
.text:00000CF5 loc_CF5:                                ; CODE XREF: _serial_unthrottle+18j
.text:00000CF5                 add     esp, 4
.text:00000CF8                 cmp     ebp, esp
.text:00000CFA                 call    __RTC_CheckEsp
.text:00000CFF                 mov     esp, ebp
.text:00000D01                 pop     ebp
.text:00000D02                 retn
.text:00000D02 _serial_unthrottle endp
.text:00000D02
.text:00000D02 ; ---------------------------------------------------------------------------
.text:00000D03                 align 8
.text:00000D08
.text:00000D08 ; =============== S U B R O U T I N E =======================================
.text:00000D08
.text:00000D08 ; Attributes: bp-based frame
.text:00000D08
.text:00000D08 _serial_ldisc   proc near               ; DATA XREF: .data:00000284o
.text:00000D08                 push    ebp
.text:00000D09                 mov     ebp, esp
.text:00000D0B                 xor     eax, eax
.text:00000D0D                 pop     ebp
.text:00000D0E                 retn
.text:00000D0E _serial_ldisc   endp
.text:00000D0E
.text:00000D0E ; ---------------------------------------------------------------------------
.text:00000D0F                 db 9 dup(0CCh)
.text:00000D18
.text:00000D18 ; =============== S U B R O U T I N E =======================================
.text:00000D18
.text:00000D18 ; Attributes: bp-based frame
.text:00000D18
.text:00000D18 _serial_provide_ldisc proc near         ; DATA XREF: .data:00000288o
.text:00000D18                 push    ebp
.text:00000D19                 mov     ebp, esp
.text:00000D1B                 pop     ebp
.text:00000D1C                 retn
.text:00000D1C _serial_provide_ldisc endp
.text:00000D1C
.text:00000D1C ; ---------------------------------------------------------------------------
.text:00000D1D                 db 0Bh dup(0CCh)
.text:00000D28
.text:00000D28 ; =============== S U B R O U T I N E =======================================
.text:00000D28
.text:00000D28 ; Attributes: bp-based frame
.text:00000D28
.text:00000D28 _serial_provide_logctx proc near        ; DATA XREF: .data:0000028Co
.text:00000D28                 push    ebp
.text:00000D29                 mov     ebp, esp
.text:00000D2B                 pop     ebp
.text:00000D2C                 retn
.text:00000D2C _serial_provide_logctx endp
.text:00000D2C
.text:00000D2C ; ---------------------------------------------------------------------------
.text:00000D2D                 db 0Bh dup(0CCh)
.text:00000D38
.text:00000D38 ; =============== S U B R O U T I N E =======================================
.text:00000D38
.text:00000D38 ; Attributes: bp-based frame
.text:00000D38
.text:00000D38 _serial_exitcode proc near              ; DATA XREF: .data:0000027Co
.text:00000D38
.text:00000D38 var_4           = dword ptr -4
.text:00000D38 arg_0           = dword ptr  8
.text:00000D38
.text:00000D38                 push    ebp
.text:00000D39                 mov     ebp, esp
.text:00000D3B                 push    ecx
.text:00000D3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D43                 mov     eax, [ebp+arg_0]
.text:00000D46                 mov     [ebp+var_4], eax
.text:00000D49                 mov     ecx, [ebp+var_4]
.text:00000D4C                 cmp     dword ptr [ecx], 0FFFFFFFFh
.text:00000D4F                 jz      short loc_D58
.text:00000D51                 or      eax, 0FFFFFFFFh
.text:00000D54                 jmp     short loc_D5D
.text:00000D56 ; ---------------------------------------------------------------------------
.text:00000D56                 jmp     short loc_D5D
.text:00000D58 ; ---------------------------------------------------------------------------
.text:00000D58
.text:00000D58 loc_D58:                                ; CODE XREF: _serial_exitcode+17j
.text:00000D58                 mov     eax, 7FFFFFFFh
.text:00000D5D
.text:00000D5D loc_D5D:                                ; CODE XREF: _serial_exitcode+1Cj
.text:00000D5D                                         ; _serial_exitcode+1Ej
.text:00000D5D                 mov     esp, ebp
.text:00000D5F                 pop     ebp
.text:00000D60                 retn
.text:00000D60 _serial_exitcode endp
.text:00000D60
.text:00000D60 ; ---------------------------------------------------------------------------
.text:00000D61                 align 8
.text:00000D68
.text:00000D68 ; =============== S U B R O U T I N E =======================================
.text:00000D68
.text:00000D68 ; Attributes: bp-based frame
.text:00000D68
.text:00000D68 _serial_cfg_info proc near              ; DATA XREF: .data:00000294o
.text:00000D68                 push    ebp
.text:00000D69                 mov     ebp, esp
.text:00000D6B                 xor     eax, eax
.text:00000D6D                 pop     ebp
.text:00000D6E                 retn
.text:00000D6E _serial_cfg_info endp
.text:00000D6E
.text:00000D6E ; ---------------------------------------------------------------------------
.text:00000D6F                 align 10h
.text:00000D6F _text           ends
.text:00000D6F
.rtc$TMZ:00000D70 ; ===========================================================================
.rtc$TMZ:00000D70
.rtc$TMZ:00000D70 ; Segment type: Pure data
.rtc$TMZ:00000D70 ; Segment permissions: Read
.rtc$TMZ:00000D70 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000D70                 assume cs:_rtc$TMZ
.rtc$TMZ:00000D70                 ;org 0D70h
.rtc$TMZ:00000D70 ; COMDAT (pick any)
.rtc$TMZ:00000D70 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000D70 _rtc$TMZ        ends
.rtc$TMZ:00000D70
.rtc$IMZ:00000D74 ; ===========================================================================
.rtc$IMZ:00000D74
.rtc$IMZ:00000D74 ; Segment type: Pure data
.rtc$IMZ:00000D74 ; Segment permissions: Read
.rtc$IMZ:00000D74 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000D74                 assume cs:_rtc$IMZ
.rtc$IMZ:00000D74                 ;org 0D74h
.rtc$IMZ:00000D74 ; COMDAT (pick any)
.rtc$IMZ:00000D74 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000D74 _rtc$IMZ        ends
.rtc$IMZ:00000D74
UNDEF:00000D80 ; ===========================================================================
UNDEF:00000D80
UNDEF:00000D80 ; Segment type: Externs
UNDEF:00000D80 ; UNDEF
UNDEF:00000D80                 extrn _update_specials_menu:near
UNDEF:00000D80                                         ; CODE XREF: _serial_init+1A4p
UNDEF:00000D84                 extrn _dupstr:near      ; CODE XREF: _serial_init+190p
UNDEF:00000D88                 extrn _handle_input_new:near ; CODE XREF: _serial_init+17Ep
UNDEF:00000D8C                 extrn _handle_output_new:near ; CODE XREF: _serial_init+161p
UNDEF:00000D90                 extrn _safefree:near    ; CODE XREF: _serial_init+110p
UNDEF:00000D90                                         ; _serial_configure+104p ...
UNDEF:00000D94 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
UNDEF:00000D94                 extrn __imp__CreateFileA@28:near
UNDEF:00000D94                                         ; CODE XREF: _serial_init+FCp
UNDEF:00000D94                                         ; DATA XREF: _serial_init+FCr
UNDEF:00000D98 ; char *__cdecl strchr(const char *Str, int Val)
UNDEF:00000D98                 extrn _strchr:near      ; CODE XREF: _serial_init+B0p
UNDEF:00000D9C                 extrn _logevent:near    ; CODE XREF: _serial_init+A2p
UNDEF:00000D9C                                         ; _serial_gotdata+65p ...
UNDEF:00000DA0                 extrn _dupprintf:near   ; CODE XREF: _serial_init+8Cp
UNDEF:00000DA0                                         ; _serial_init+D9p ...
UNDEF:00000DA4                 extrn _conf_get_str:near ; CODE XREF: _serial_init+78p
UNDEF:00000DA8                 extrn _safemalloc:near  ; CODE XREF: _serial_init+25p
UNDEF:00000DAC                 extrn __RTC_CheckEsp:near ; CODE XREF: _serial_init+104p
UNDEF:00000DAC                                         ; _serial_init+1B4p ...
UNDEF:00000DB0                 extrn __RTC_Shutdown:near
UNDEF:00000DB0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000DB4                 extrn __RTC_InitBase:near
UNDEF:00000DB4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000DB8                 extrn _from_backend:near ; CODE XREF: _serial_gotdata+9Cp
UNDEF:00000DBC                 extrn _connection_fatal:near ; CODE XREF: _serial_gotdata+7Dp
UNDEF:00000DBC                                         ; _serial_sentdata+6Ep
UNDEF:00000DC0                 extrn _notify_remote_exit:near
UNDEF:00000DC0                                         ; CODE XREF: _serial_gotdata+52p
UNDEF:00000DC0                                         ; _serial_sentdata+43p
UNDEF:00000DC4                 extrn _handle_get_privdata:near
UNDEF:00000DC4                                         ; CODE XREF: _serial_gotdata+18p
UNDEF:00000DC4                                         ; _serial_sentdata+18p
UNDEF:00000DC8 ; BOOL __stdcall CloseHandle(HANDLE hObject)
UNDEF:00000DC8                 extrn __imp__CloseHandle@4:near
UNDEF:00000DC8                                         ; CODE XREF: _serial_terminate+76p
UNDEF:00000DC8                                         ; DATA XREF: _serial_terminate+76r
UNDEF:00000DCC ; BOOL __stdcall ClearCommBreak(HANDLE hFile)
UNDEF:00000DCC                 extrn __imp__ClearCommBreak@4:near
UNDEF:00000DCC                                         ; CODE XREF: _serial_terminate+61p
UNDEF:00000DCC                                         ; _serbreak_timer+2Dp
UNDEF:00000DCC                                         ; DATA XREF: ...
UNDEF:00000DD0                 extrn _handle_free:near ; CODE XREF: _serial_terminate+14p
UNDEF:00000DD0                                         ; _serial_terminate+36p
UNDEF:00000DD4 ; BOOL __stdcall SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts)
UNDEF:00000DD4                 extrn __imp__SetCommTimeouts@8:near
UNDEF:00000DD4                                         ; CODE XREF: _serial_configure+379p
UNDEF:00000DD4                                         ; DATA XREF: _serial_configure+379r
UNDEF:00000DD8 ; BOOL __stdcall SetCommState(HANDLE hFile, LPDCB lpDCB)
UNDEF:00000DD8                 extrn __imp__SetCommState@8:near
UNDEF:00000DD8                                         ; CODE XREF: _serial_configure+334p
UNDEF:00000DD8                                         ; DATA XREF: _serial_configure+334r
UNDEF:00000DDC                 extrn _conf_get_int:near ; CODE XREF: _serial_configure+CEp
UNDEF:00000DDC                                         ; _serial_configure+112p ...
UNDEF:00000DE0 ; BOOL __stdcall GetCommState(HANDLE hFile, LPDCB lpDCB)
UNDEF:00000DE0                 extrn __imp__GetCommState@8:near
UNDEF:00000DE0                                         ; CODE XREF: _serial_configure+2Bp
UNDEF:00000DE0                                         ; DATA XREF: _serial_configure+2Br
UNDEF:00000DE4                 extrn ___security_cookie:near
UNDEF:00000DE4                                         ; DATA XREF: _serial_configure+17r
UNDEF:00000DE8 ; __fastcall __security_check_cookie(x)
UNDEF:00000DE8                 extrn @__security_check_cookie@4:near
UNDEF:00000DE8                                         ; CODE XREF: _serial_configure+3ABp
UNDEF:00000DEC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000DEC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000DEC                                         ; CODE XREF: _serial_configure+39Dp
UNDEF:00000DF0                 extrn _expire_timer_context:near
UNDEF:00000DF0                                         ; CODE XREF: _serial_free+21p
UNDEF:00000DF4                 extrn _handle_write:near ; CODE XREF: _serial_send+2Dp
UNDEF:00000DF8                 extrn _schedule_timer:near ; CODE XREF: _serial_special+57p
UNDEF:00000DFC ; BOOL __stdcall SetCommBreak(HANDLE hFile)
UNDEF:00000DFC                 extrn __imp__SetCommBreak@4:near
UNDEF:00000DFC                                         ; CODE XREF: _serial_special+3Cp
UNDEF:00000DFC                                         ; DATA XREF: _serial_special+3Cr
UNDEF:00000E00                 extrn _handle_unthrottle:near
UNDEF:00000E00                                         ; CODE XREF: _serial_unthrottle+25p
UNDEF:00000E00
UNDEF:00000E00
UNDEF:00000E00                 end