; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\raw.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_raw_backend
_BSS	SEGMENT
$SG85662 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?fn_table@?1??raw_init@@9@9 DD FLAT:_raw_log		; `raw_init'::`2'::fn_table
	DD	FLAT:_raw_closing
	DD	FLAT:_raw_receive
	DD	FLAT:_raw_sent
	ORG $+4
CONST	ENDS
_DATA	SEGMENT
$SG85581 DB	'Connecting to %s port %d', 00H
	ORG $+3
$SG85583 DB	'Failed to connect to %s: %s', 00H
$SG85606 DB	'%s', 00H
	ORG $+1
$SG85660 DB	' (IPv4)', 00H
$SG85661 DB	' (IPv6)', 00H
$SG85663 DB	'Looking up host "%s"%s', 00H
	ORG $+1
$SG85780 DB	'raw', 00H
_raw_backend DD	FLAT:_raw_init
	DD	FLAT:_raw_free
	DD	FLAT:_raw_reconfig
	DD	FLAT:_raw_send
	DD	FLAT:_raw_sendbuffer
	DD	FLAT:_raw_size
	DD	FLAT:_raw_special
	DD	FLAT:_raw_get_specials
	DD	FLAT:_raw_connected
	DD	FLAT:_raw_exitcode
	DD	FLAT:_raw_sendok
	DD	FLAT:_raw_ldisc
	DD	FLAT:_raw_provide_ldisc
	DD	FLAT:_raw_provide_logctx
	DD	FLAT:_raw_unthrottle
	DD	FLAT:_raw_cfg_info
	DD	FLAT:$SG85780
	DD	00H
	DD	00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_safefree:PROC
EXTRN	_logevent:PROC
EXTRN	_dupprintf:PROC
EXTRN	_sk_getaddr:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\raw.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_msg$ = -276						; size = 4
_addrbuf$ = -268					; size = 256
_raw$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_plug$ = 8						; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_raw_log PROC
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 42
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 45
	push	256					; 00000100H
	lea	ecx, DWORD PTR _addrbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 47
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN2@raw_log
; Line 48
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	lea	ecx, DWORD PTR _addrbuf$[ebp]
	push	ecx
	push	OFFSET $SG85581
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$[ebp], eax
; Line 49
	jmp	SHORT $LN1@raw_log
$LN2@raw_log:
; Line 50
	mov	edx, DWORD PTR _error_msg$[ebp]
	push	edx
	lea	eax, DWORD PTR _addrbuf$[ebp]
	push	eax
	push	OFFSET $SG85583
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$[ebp], eax
$LN1@raw_log:
; Line 52
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_logevent
	add	esp, 8
; Line 53
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 54
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@raw_log
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@raw_log:
	DD	1
	DD	$LN6@raw_log
$LN6@raw_log:
	DD	-268					; fffffef4H
	DD	256					; 00000100H
	DD	$LN5@raw_log
$LN5@raw_log:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_raw_log ENDP
_TEXT	ENDS
EXTRN	_from_backend_eof:PROC
EXTRN	_connection_fatal:PROC
EXTRN	_notify_remote_exit:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_raw$ = -4						; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_raw_closing PROC
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 74
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 76
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN6@raw_closin
; Line 78
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@raw_closin
; Line 79
	mov	esi, esp
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 80
	mov	edx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 81
	mov	eax, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 82
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_notify_remote_exit
	add	esp, 4
$LN5@raw_closin:
; Line 84
	mov	eax, DWORD PTR _error_msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_logevent
	add	esp, 8
; Line 85
	mov	eax, DWORD PTR _error_msg$[ebp]
	push	eax
	push	OFFSET $SG85606
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_connection_fatal
	add	esp, 12					; 0000000cH
; Line 86
	jmp	SHORT $LN4@raw_closin
$LN6@raw_closin:
; Line 88
	mov	eax, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN3@raw_closin
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_from_backend_eof
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@raw_closin
; Line 93
	mov	eax, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN3@raw_closin
; Line 94
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@raw_closin
; Line 95
	mov	esi, esp
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@raw_closin:
; Line 96
	mov	edx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [edx+24], 1
$LN3@raw_closin:
; Line 99
	mov	eax, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 100
	mov	ecx, DWORD PTR _raw$[ebp]
	push	ecx
	call	_raw_check_close
	add	esp, 4
$LN4@raw_closin:
; Line 102
	xor	eax, eax
; Line 103
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_closing ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = 8						; size = 4
_raw_check_close PROC
; Line 57
	push	ebp
	mov	ebp, esp
	push	esi
; Line 62
	mov	eax, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@raw_check_
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@raw_check_
; Line 63
	mov	edx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@raw_check_
; Line 64
	mov	esi, esp
	mov	eax, DWORD PTR _raw$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 65
	mov	eax, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 66
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_notify_remote_exit
	add	esp, 4
$LN3@raw_check_:
; Line 69
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_raw_check_close ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_plug$ = 8						; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_raw_receive PROC
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 107
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 108
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _raw$[ebp]
	push	eax
	call	_c_write
	add	esp, 12					; 0000000cH
; Line 109
	mov	eax, 1
; Line 110
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_receive ENDP
_TEXT	ENDS
EXTRN	_from_backend:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_backlog$ = -4						; size = 4
_raw$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_c_write PROC
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 35
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_from_backend
	add	esp, 16					; 00000010H
	mov	DWORD PTR _backlog$[ebp], eax
; Line 36
	xor	ecx, ecx
	cmp	DWORD PTR _backlog$[ebp], 4096		; 00001000H
	setg	cl
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 37
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_c_write ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_plug$ = 8						; size = 4
_bufsize$ = 12						; size = 4
_raw_sent PROC
; Line 113
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 114
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 115
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR _bufsize$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 116
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_sent ENDP
_TEXT	ENDS
EXTRN	_host_strrchr:PROC
EXTRN	_dupstr:PROC
EXTRN	_conf_get_str:PROC
EXTRN	_new_connection:PROC
EXTRN	_sk_addr_free:PROC
EXTRN	_sk_addr_error:PROC
EXTRN	_name_lookup:PROC
EXTRN	_conf_get_int:PROC
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -36						; size = 4
tv80 = -32						; size = 4
_colon$85671 = -28					; size = 4
_buf$85659 = -24					; size = 4
_loghost$ = -20						; size = 4
_addressfamily$ = -16					; size = 4
_raw$ = -12						; size = 4
_err$ = -8						; size = 4
_addr$ = -4						; size = 4
_frontend_handle$ = 8					; size = 4
_backend_handle$ = 12					; size = 4
_conf$ = 16						; size = 4
_host$ = 20						; size = 4
_port$ = 24						; size = 4
_realhost$ = 28						; size = 4
_nodelay$ = 32						; size = 4
_keepalive$ = 36					; size = 4
_raw_init PROC
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 143
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _raw$[ebp], eax
; Line 144
	mov	eax, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [eax], OFFSET ?fn_table@?1??raw_init@@9@9
; Line 145
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 146
	mov	edx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 147
	mov	eax, DWORD PTR _backend_handle$[ebp]
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 148
	mov	edx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 149
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 151
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR _frontend_handle$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 153
	push	3
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _addressfamily$[ebp], eax
; Line 162
	cmp	DWORD PTR _addressfamily$[ebp], 1
	jne	SHORT $LN10@raw_init
	mov	DWORD PTR tv80[ebp], OFFSET $SG85660
	jmp	SHORT $LN11@raw_init
$LN10@raw_init:
	cmp	DWORD PTR _addressfamily$[ebp], 2
	jne	SHORT $LN8@raw_init
	mov	DWORD PTR tv79[ebp], OFFSET $SG85661
	jmp	SHORT $LN9@raw_init
$LN8@raw_init:
	mov	DWORD PTR tv79[ebp], OFFSET $SG85662
$LN9@raw_init:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv80[ebp], edx
$LN11@raw_init:
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	push	OFFSET $SG85663
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$85659[ebp], eax
; Line 163
	mov	edx, DWORD PTR _buf$85659[ebp]
	push	edx
	mov	eax, DWORD PTR _raw$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_logevent
	add	esp, 8
; Line 164
	mov	edx, DWORD PTR _buf$85659[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 166
	mov	eax, DWORD PTR _addressfamily$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _realhost$[ebp]
	push	edx
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	call	_name_lookup
	add	esp, 20					; 00000014H
	mov	DWORD PTR _addr$[ebp], eax
; Line 167
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_addr_error
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN5@raw_init
; Line 168
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	_sk_addr_free
	add	esp, 4
; Line 169
	mov	eax, DWORD PTR _err$[ebp]
	jmp	$LN6@raw_init
$LN5@raw_init:
; Line 172
	cmp	DWORD PTR _port$[ebp], 0
	jge	SHORT $LN4@raw_init
; Line 173
	mov	DWORD PTR _port$[ebp], 23		; 00000017H
$LN4@raw_init:
; Line 179
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _raw$[ebp]
	push	edx
	mov	eax, DWORD PTR _keepalive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodelay$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _realhost$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_new_connection
	add	esp, 36					; 00000024H
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 180
	mov	esi, esp
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN3@raw_init
; Line 181
	mov	eax, DWORD PTR _err$[ebp]
	jmp	SHORT $LN6@raw_init
$LN3@raw_init:
; Line 183
	push	9
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _loghost$[ebp], eax
; Line 184
	mov	eax, DWORD PTR _loghost$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@raw_init
; Line 187
	mov	edx, DWORD PTR _realhost$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_safefree
	add	esp, 4
; Line 188
	mov	ecx, DWORD PTR _loghost$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _realhost$[ebp]
	mov	DWORD PTR [edx], eax
; Line 190
	push	58					; 0000003aH
	mov	eax, DWORD PTR _realhost$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_host_strrchr
	add	esp, 8
	mov	DWORD PTR _colon$85671[ebp], eax
; Line 191
	cmp	DWORD PTR _colon$85671[ebp], 0
	je	SHORT $LN2@raw_init
; Line 192
	mov	edx, DWORD PTR _colon$85671[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _colon$85671[ebp]
	add	eax, 1
	mov	DWORD PTR _colon$85671[ebp], eax
$LN2@raw_init:
; Line 195
	xor	eax, eax
$LN6@raw_init:
; Line 196
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_init ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_raw_free PROC
; Line 199
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 200
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 202
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@raw_free
; Line 203
	mov	esi, esp
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@raw_free:
; Line 204
	mov	edx, DWORD PTR _raw$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 205
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_free ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_conf$ = 12						; size = 4
_raw_reconfig PROC
; Line 211
	push	ebp
	mov	ebp, esp
; Line 212
	pop	ebp
	ret	0
_raw_reconfig ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_raw_send PROC
; Line 218
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 219
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 221
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@raw_send
; Line 222
	xor	eax, eax
	jmp	SHORT $LN2@raw_send
$LN1@raw_send:
; Line 224
	mov	esi, esp
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _raw$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 226
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+12]
$LN2@raw_send:
; Line 227
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_send ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_raw_sendbuffer PROC
; Line 233
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 234
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 235
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [ecx+12]
; Line 236
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_sendbuffer ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_raw_size PROC
; Line 242
	push	ebp
	mov	ebp, esp
; Line 245
	pop	ebp
	ret	0
_raw_size ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_code$ = 12						; size = 4
_raw_special PROC
; Line 251
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 252
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 253
	cmp	DWORD PTR _code$[ebp], 12		; 0000000cH
	jne	SHORT $LN2@raw_specia
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@raw_specia
; Line 254
	mov	esi, esp
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 255
	mov	edx, DWORD PTR _raw$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 256
	mov	eax, DWORD PTR _raw$[ebp]
	push	eax
	call	_raw_check_close
	add	esp, 4
$LN2@raw_specia:
; Line 260
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_special ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_raw_get_specials PROC
; Line 267
	push	ebp
	mov	ebp, esp
; Line 268
	xor	eax, eax
; Line 269
	pop	ebp
	ret	0
_raw_get_specials ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_raw_connected PROC
; Line 272
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 273
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 274
	mov	ecx, DWORD PTR _raw$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [ecx+4], 0
	setne	al
; Line 275
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_connected ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_raw_sendok PROC
; Line 278
	push	ebp
	mov	ebp, esp
; Line 279
	mov	eax, 1
; Line 280
	pop	ebp
	ret	0
_raw_sendok ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_backlog$ = 12						; size = 4
_raw_unthrottle PROC
; Line 283
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 284
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 285
	xor	ecx, ecx
	cmp	DWORD PTR _backlog$[ebp], 4096		; 00001000H
	setg	cl
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _raw$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _raw$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 286
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_unthrottle ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_option$ = 12						; size = 4
_raw_ldisc PROC
; Line 289
	push	ebp
	mov	ebp, esp
; Line 290
	cmp	DWORD PTR _option$[ebp], 0
	je	SHORT $LN1@raw_ldisc
	cmp	DWORD PTR _option$[ebp], 1
	jne	SHORT $LN2@raw_ldisc
$LN1@raw_ldisc:
; Line 291
	mov	eax, 1
	jmp	SHORT $LN3@raw_ldisc
$LN2@raw_ldisc:
; Line 292
	xor	eax, eax
$LN3@raw_ldisc:
; Line 293
	pop	ebp
	ret	0
_raw_ldisc ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_ldisc$ = 12						; size = 4
_raw_provide_ldisc PROC
; Line 296
	push	ebp
	mov	ebp, esp
; Line 298
	pop	ebp
	ret	0
_raw_provide_ldisc ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_logctx$ = 12						; size = 4
_raw_provide_logctx PROC
; Line 301
	push	ebp
	mov	ebp, esp
; Line 303
	pop	ebp
	ret	0
_raw_provide_logctx ENDP
; Function compile flags: /Odtp /RTCsu
_raw$ = -4						; size = 4
_handle$ = 8						; size = 4
_raw_exitcode PROC
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 307
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _raw$[ebp], eax
; Line 308
	mov	ecx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@raw_exitco
; Line 309
	or	eax, -1
	jmp	SHORT $LN5@raw_exitco
	jmp	SHORT $LN5@raw_exitco
$LN4@raw_exitco:
; Line 310
	mov	edx, DWORD PTR _raw$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@raw_exitco
; Line 311
	mov	eax, 2147483647				; 7fffffffH
	jmp	SHORT $LN5@raw_exitco
; Line 312
	jmp	SHORT $LN5@raw_exitco
$LN2@raw_exitco:
; Line 314
	xor	eax, eax
$LN5@raw_exitco:
; Line 315
	mov	esp, ebp
	pop	ebp
	ret	0
_raw_exitcode ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_raw_cfg_info PROC
; Line 321
	push	ebp
	mov	ebp, esp
; Line 322
	xor	eax, eax
; Line 323
	pop	ebp
	ret	0
_raw_cfg_info ENDP
_TEXT	ENDS
END
