; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\proxy.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG85889 DB	'Proxy error: Unknown proxy method', 00H
	ORG $+2
$SG85895 DB	'Proxy error: Unable to resolve proxy host name', 00H
	ORG $+1
$SG85938 DB	'CONNECT %s:%i HTTP/1.1', 0dH, 0aH, 'Host: %s:%i', 0dH, 0aH
	DB	00H
	ORG $+2
$SG85946 DB	'%s:%s', 00H
	ORG $+2
$SG85949 DB	'Proxy-Authorization: Basic ', 00H
$SG85954 DB	0dH, 0aH, 00H
	ORG $+1
$SG85955 DB	0dH, 0aH, 00H
	ORG $+1
$SG85969 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'x'
	DB	00H, 'y', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85970 DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG85977 DB	'HTTP/%i.%i %n', 00H
	ORG $+2
$SG85978 DB	'Proxy error: HTTP response was absent', 00H
	ORG $+2
$SG85985 DB	'Proxy error: %s', 00H
$SG85988 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'x'
	DB	00H, 'y', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85989 DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG85997 DB	'Proxy error: unexpected proxy error', 00H
$SG86012 DB	'Proxy error: SOCKS version 4 does not support IPv6', 00H
	ORG $+1
$SG86017 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'x'
	DB	00H, 'y', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86018 DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'A', 00H, 'D', 00H, 'D', 00H, 'R', 00H, 'T'
	DB	00H, 'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'A', 00H
	DB	'M', 00H, 'E', 00H, 00H, 00H
$SG86031 DB	'Proxy error: SOCKS proxy responded with unexpected reply'
	DB	' code version', 00H
	ORG $+2
$SG86038 DB	'Proxy error: SOCKS server wanted IDENTD on client', 00H
	ORG $+2
$SG86040 DB	'Proxy error: Username and IDENTD on client don''t agree', 00H
	ORG $+1
$SG86042 DB	'Proxy error: Error while communicating with proxy', 00H
	ORG $+2
$SG86043 DB	'Proxy error: unexpected proxy error', 00H
$SG86065 DB	'Proxy error: SOCKS proxy returned unexpected version', 00H
	ORG $+3
$SG86074 DB	'Proxy error: SOCKS proxy did not accept our authenticati'
	DB	'on', 00H
	ORG $+1
$SG86079 DB	'Proxy error: SOCKS password subnegotiation contained wro'
	DB	'ng version number', 00H
	ORG $+2
$SG86081 DB	'Proxy error: SOCKS proxy refused password authentication'
	DB	00H
	ORG $+3
$SG86094 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'x'
	DB	00H, 'y', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86095 DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'A', 00H, 'D', 00H, 'D', 00H, 'R', 00H, 'T'
	DB	00H, 'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'A', 00H
	DB	'M', 00H, 'E', 00H, 00H, 00H
$SG86103 DB	'Proxy error: SOCKS proxy returned wrong version number', 00H
	ORG $+1
$SG86106 DB	'Proxy error: ', 00H
	ORG $+2
$SG86112 DB	'General SOCKS server failure', 00H
	ORG $+3
$SG86114 DB	'Connection not allowed by ruleset', 00H
	ORG $+2
$SG86116 DB	'Network unreachable', 00H
$SG86118 DB	'Host unreachable', 00H
	ORG $+3
$SG86120 DB	'Connection refused', 00H
	ORG $+1
$SG86122 DB	'TTL expired', 00H
$SG86124 DB	'Command not supported', 00H
	ORG $+2
$SG86126 DB	'Address type not supported', 00H
	ORG $+1
$SG86128 DB	'Unrecognised SOCKS error code %d', 00H
	ORG $+3
$SG86138 DB	'Proxy error: SOCKS proxy returned unrecognised address f'
	DB	'ormat', 00H
	ORG $+2
$SG86141 DB	'Proxy error: We don''t support GSSAPI authentication', 00H
$SG86155 DB	'Proxy error: Server chose username/password authenticati'
	DB	'on but we didn''t offer it!', 00H
	ORG $+1
$SG86159 DB	'Proxy error: Unexpected proxy error', 00H
$SG86281 DB	'host', 00H
	ORG $+3
$SG86293 DB	'port', 00H
	ORG $+3
$SG86296 DB	'%i', 00H
	ORG $+1
$SG86306 DB	'user', 00H
	ORG $+3
$SG86318 DB	'pass', 00H
	ORG $+3
$SG86330 DB	'proxyhost', 00H
	ORG $+2
$SG86342 DB	'proxyport', 00H
	ORG $+2
$SG86346 DB	'%d', 00H
	ORG $+1
$SG86388 DB	'Proxy error: Unexpected proxy error', 00H
_DATA	ENDS
CONST	SEGMENT
?socket_fn_table@?1??new_connection@@9@9 DD FLAT:_sk_proxy_plug ; `new_connection'::`2'::socket_fn_table
	DD	FLAT:_sk_proxy_close
	DD	FLAT:_sk_proxy_write
	DD	FLAT:_sk_proxy_write_oob
	DD	FLAT:_sk_proxy_write_eof
	DD	FLAT:_sk_proxy_flush
	DD	FLAT:_sk_proxy_set_frozen
	DD	FLAT:_sk_proxy_socket_error
?plug_fn_table@?1??new_connection@@9@9 DD FLAT:_plug_proxy_log ; `new_connection'::`2'::plug_fn_table
	DD	FLAT:_plug_proxy_closing
	DD	FLAT:_plug_proxy_receive
	DD	FLAT:_plug_proxy_sent
	DD	FLAT:_plug_proxy_accepting
CONST	ENDS
PUBLIC	_proxy_activate
EXTRN	_bufchain_consume:PROC
EXTRN	_bufchain_prefix:PROC
EXTRN	_bufchain_size:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\proxy.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_output_after$ = -32					; size = 4
_output_before$ = -28					; size = 4
_len$ = -20						; size = 4
_data$ = -8						; size = 4
_p$ = 8							; size = 4
_proxy_activate PROC
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 32
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 0
; Line 37
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 41
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_bufchain_size
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _output_before$[ebp], esi
; Line 43
	mov	DWORD PTR _output_after$[ebp], 0
$LN8@proxy_acti:
; Line 46
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN6@proxy_acti
; Line 47
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
; Line 48
	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _output_after$[ebp]
	mov	DWORD PTR _output_after$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_bufchain_consume
	add	esp, 8
; Line 50
	jmp	SHORT $LN8@proxy_acti
$LN6@proxy_acti:
; Line 53
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN5@proxy_acti
; Line 54
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
; Line 55
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _output_after$[ebp]
	mov	DWORD PTR _output_after$[ebp], eax
; Line 56
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_bufchain_consume
	add	esp, 8
; Line 57
	jmp	SHORT $LN6@proxy_acti
$LN5@proxy_acti:
; Line 60
	mov	ecx, DWORD PTR _output_after$[ebp]
	cmp	ecx, DWORD PTR _output_before$[ebp]
	jge	SHORT $LN4@proxy_acti
; Line 61
	mov	esi, esp
	mov	edx, DWORD PTR _output_after$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@proxy_acti:
; Line 66
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@proxy_acti
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@proxy_acti:
; Line 69
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN2@proxy_acti
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@proxy_acti:
; Line 75
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jne	SHORT $LN9@proxy_acti
; Line 76
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@proxy_acti:
; Line 77
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@proxy_acti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@proxy_acti:
	DD	2
	DD	$LN13@proxy_acti
$LN13@proxy_acti:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@proxy_acti
	DD	-20					; ffffffecH
	DD	4
	DD	$LN12@proxy_acti
$LN12@proxy_acti:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN11@proxy_acti:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_proxy_activate ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -8						; size = 4
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_sk_proxy_plug PROC
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 83
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 84
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _ret$[ebp], edx
; Line 85
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@sk_proxy_p
; Line 86
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN1@sk_proxy_p:
; Line 87
	mov	eax, DWORD PTR _ret$[ebp]
; Line 88
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_plug ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
EXTRN	_sk_addr_free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_proxy_close PROC
; Line 91
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 92
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 94
	mov	esi, esp
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 95
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_sk_addr_free
	add	esp, 4
; Line 96
	mov	eax, DWORD PTR _ps$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 97
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_close ENDP
_TEXT	ENDS
EXTRN	_bufchain_add:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sk_proxy_write PROC
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 101
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 103
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN1@sk_proxy_w
; Line 104
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_bufchain_add
	add	esp, 12					; 0000000cH
; Line 105
	mov	edx, DWORD PTR _ps$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_bufchain_size
	add	esp, 4
	jmp	SHORT $LN2@sk_proxy_w
$LN1@sk_proxy_w:
; Line 107
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_proxy_w:
; Line 108
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_write ENDP
_TEXT	ENDS
EXTRN	_bufchain_clear:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sk_proxy_write_oob PROC
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 112
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN1@sk_proxy_w@2
; Line 115
	mov	edx, DWORD PTR _ps$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_bufchain_clear
	add	esp, 4
; Line 116
	mov	eax, DWORD PTR _ps$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_bufchain_clear
	add	esp, 4
; Line 117
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_bufchain_add
	add	esp, 12					; 0000000cH
; Line 118
	mov	eax, DWORD PTR _len$[ebp]
	jmp	SHORT $LN2@sk_proxy_w@2
$LN1@sk_proxy_w@2:
; Line 120
	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_proxy_w@2:
; Line 121
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_write_oob ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_proxy_write_eof PROC
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 127
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN1@sk_proxy_w@3
; Line 128
	mov	edx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [edx+64], 1
; Line 129
	jmp	SHORT $LN2@sk_proxy_w@3
$LN1@sk_proxy_w@3:
; Line 131
	mov	esi, esp
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_proxy_w@3:
; Line 132
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_write_eof ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_proxy_flush PROC
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 136
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 138
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN1@sk_proxy_f
; Line 139
	mov	edx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [edx+48], 1
; Line 140
	jmp	SHORT $LN2@sk_proxy_f
$LN1@sk_proxy_f:
; Line 142
	mov	esi, esp
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_proxy_f:
; Line 143
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_flush ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$85700 = -548					; size = 4
_databuf$85699 = -536					; size = 512
_data$85698 = -16					; size = 4
_ps$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_is_frozen$ = 12					; size = 4
_sk_proxy_set_frozen PROC
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 552				; 00000228H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-552]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 147
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 149
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@sk_proxy_s
; Line 150
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR _is_frozen$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 151
	jmp	$LN7@sk_proxy_s
$LN6@sk_proxy_s:
; Line 155
	mov	ecx, DWORD PTR _ps$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jle	$LN5@sk_proxy_s
; Line 156
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR _is_frozen$[ebp]
	mov	DWORD PTR [edx+72], eax
$LN4@sk_proxy_s:
; Line 163
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jne	$LN3@sk_proxy_s
	mov	edx, DWORD PTR _ps$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jle	$LN3@sk_proxy_s
; Line 167
	lea	eax, DWORD PTR _len$85700[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$85698[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
; Line 168
	cmp	DWORD PTR _len$85700[ebp], 512		; 00000200H
	jbe	SHORT $LN2@sk_proxy_s
; Line 169
	mov	DWORD PTR _len$85700[ebp], 512		; 00000200H
$LN2@sk_proxy_s:
; Line 170
	mov	eax, DWORD PTR _len$85700[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$85698[ebp]
	push	ecx
	lea	edx, DWORD PTR _databuf$85699[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 171
	mov	eax, DWORD PTR _len$85700[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_consume
	add	esp, 8
; Line 172
	mov	esi, esp
	mov	edx, DWORD PTR _len$85700[ebp]
	push	edx
	lea	eax, DWORD PTR _databuf$85699[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 173
	jmp	$LN4@sk_proxy_s
$LN3@sk_proxy_s:
; Line 178
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN5@sk_proxy_s
	jmp	SHORT $LN7@sk_proxy_s
$LN5@sk_proxy_s:
; Line 181
	mov	esi, esp
	mov	edx, DWORD PTR _is_frozen$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@sk_proxy_s:
; Line 182
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@sk_proxy_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 552				; 00000228H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@sk_proxy_s:
	DD	3
	DD	$LN12@sk_proxy_s
$LN12@sk_proxy_s:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN9@sk_proxy_s
	DD	-536					; fffffde8H
	DD	512					; 00000200H
	DD	$LN10@sk_proxy_s
	DD	-548					; fffffddcH
	DD	4
	DD	$LN11@sk_proxy_s
$LN11@sk_proxy_s:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN10@sk_proxy_s:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN9@sk_proxy_s:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_sk_proxy_set_frozen ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_proxy_socket_error PROC
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 186
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 187
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@sk_proxy_s@2
	mov	edx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN2@sk_proxy_s@2
$LN1@sk_proxy_s@2:
; Line 188
	mov	eax, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $LN3@sk_proxy_s@2
$LN2@sk_proxy_s@2:
; Line 190
	mov	esi, esp
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@sk_proxy_s@2:
; Line 191
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_proxy_socket_error ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -8						; size = 4
_pp$ = -4						; size = 4
_plug$ = 8						; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_plug_proxy_log PROC
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 198
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _pp$[ebp], eax
; Line 199
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ps$[ebp], edx
; Line 201
	mov	esi, esp
	mov	eax, DWORD PTR _error_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _error_msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 202
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_plug_proxy_log ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_plug_proxy_closing PROC
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 207
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax
; Line 208
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ps$[ebp], edx
; Line 210
	mov	eax, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@plug_proxy
; Line 211
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR _error_msg$[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 212
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _error_code$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 213
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR _calling_back$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 214
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@plug_proxy
$LN1@plug_proxy:
; Line 217
	mov	esi, esp
	mov	ecx, DWORD PTR _calling_back$[ebp]
	push	ecx
	mov	edx, DWORD PTR _error_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _error_msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@plug_proxy:
; Line 218
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_plug_proxy_closing ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_plug_proxy_receive PROC
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 222
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax
; Line 223
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ps$[ebp], edx
; Line 225
	mov	eax, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@plug_proxy@2
; Line 230
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_add
	add	esp, 12					; 0000000cH
; Line 231
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR _urgent$[ebp]
	mov	DWORD PTR [ecx+92], edx
; Line 232
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+96], ecx
; Line 233
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+100], eax
; Line 234
	mov	esi, esp
	push	2
	mov	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@plug_proxy@2
$LN1@plug_proxy@2:
; Line 236
	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _urgent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@plug_proxy@2:
; Line 237
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_plug_proxy_receive ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_bufsize$ = 12						; size = 4
_plug_proxy_sent PROC
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 241
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax
; Line 242
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ps$[ebp], edx
; Line 244
	mov	eax, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@plug_proxy@3
; Line 245
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR _bufsize$[ebp]
	mov	DWORD PTR [ecx+104], edx
; Line 246
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 247
	jmp	SHORT $LN2@plug_proxy@3
$LN1@plug_proxy@3:
; Line 249
	mov	esi, esp
	mov	eax, DWORD PTR _bufsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@plug_proxy@3:
; Line 250
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_plug_proxy_sent ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_constructor$ = 12					; size = 4
_ctx$ = 16						; size = 4
_plug_proxy_accepting PROC
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 255
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax
; Line 256
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ps$[ebp], edx
; Line 258
	mov	eax, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@plug_proxy@4
; Line 259
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR _constructor$[ebp]
	mov	DWORD PTR [ecx+108], edx
; Line 260
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+112], ecx
; Line 261
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR _ps$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@plug_proxy@4
$LN1@plug_proxy@4:
; Line 263
	mov	esi, esp
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _constructor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@plug_proxy@4:
; Line 264
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_plug_proxy_accepting ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_proxy_for_destination
EXTRN	_strnicmp:PROC
EXTRN	_isalnum:PROC
EXTRN	_isspace:PROC
EXTRN	_conf_get_str:PROC
EXTRN	_strlen:PROC
EXTRN	_sk_getaddr:PROC
EXTRN	_sk_address_is_local:PROC
EXTRN	_sk_hostname_is_local:PROC
EXTRN	_conf_get_int:PROC
EXTRN	_sk_address_is_special_local:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exclude_list$ = -96					; size = 4
_hostname_len$ = -92					; size = 4
_hostip_len$ = -88					; size = 4
_hostip$ = -80						; size = 64
_e$ = -12						; size = 4
_s$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_addr$ = 8						; size = 4
_hostname$ = 12						; size = 4
_port$ = 16						; size = 4
_conf$ = 20						; size = 4
_proxy_for_destination PROC
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 273
	mov	DWORD PTR _s$[ebp], 0
	mov	DWORD PTR _e$[ebp], 0
; Line 284
	cmp	DWORD PTR _addr$[ebp], 0
	je	SHORT $LN28@proxy_for_
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	_sk_address_is_special_local
	add	esp, 4
	test	eax, eax
	je	SHORT $LN28@proxy_for_
; Line 285
	xor	eax, eax
	jmp	$LN29@proxy_for_
$LN28@proxy_for_:
; Line 293
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@proxy_for_
	mov	edx, DWORD PTR _hostname$[ebp]
	push	edx
	call	_sk_hostname_is_local
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN26@proxy_for_
	cmp	DWORD PTR _addr$[ebp], 0
	je	SHORT $LN27@proxy_for_
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	_sk_address_is_local
	add	esp, 4
	test	eax, eax
	je	SHORT $LN27@proxy_for_
$LN26@proxy_for_:
; Line 294
	xor	eax, eax
	jmp	$LN29@proxy_for_
$LN27@proxy_for_:
; Line 297
	cmp	DWORD PTR _addr$[ebp], 0
	je	SHORT $LN25@proxy_for_
; Line 298
	push	64					; 00000040H
	lea	ecx, DWORD PTR _hostip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 299
	lea	eax, DWORD PTR _hostip$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _hostip_len$[ebp], eax
; Line 300
	jmp	SHORT $LN24@proxy_for_
$LN25@proxy_for_:
; Line 301
	mov	DWORD PTR _hostip_len$[ebp], 0
$LN24@proxy_for_:
; Line 303
	mov	ecx, DWORD PTR _hostname$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _hostname_len$[ebp], eax
; Line 305
	push	10					; 0000000aH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _exclude_list$[ebp], eax
$LN23@proxy_for_:
; Line 311
	mov	eax, DWORD PTR _exclude_list$[ebp]
	add	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN22@proxy_for_
$LN21@proxy_for_:
; Line 314
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN20@proxy_for_
	mov	ecx, DWORD PTR _exclude_list$[ebp]
	add	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN19@proxy_for_
	mov	eax, DWORD PTR _exclude_list$[ebp]
	add	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 44					; 0000002cH
	jne	SHORT $LN20@proxy_for_
$LN19@proxy_for_:
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
	jmp	SHORT $LN21@proxy_for_
$LN20@proxy_for_:
; Line 316
	mov	eax, DWORD PTR _exclude_list$[ebp]
	add	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@proxy_for_
	jmp	$LN22@proxy_for_
$LN18@proxy_for_:
; Line 318
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _e$[ebp], edx
$LN17@proxy_for_:
; Line 324
	mov	eax, DWORD PTR _exclude_list$[ebp]
	add	eax, DWORD PTR _e$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN16@proxy_for_
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _e$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	_isalnum
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@proxy_for_
	mov	ecx, DWORD PTR _exclude_list$[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	je	SHORT $LN15@proxy_for_
	mov	eax, DWORD PTR _exclude_list$[ebp]
	add	eax, DWORD PTR _e$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN15@proxy_for_
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _e$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN16@proxy_for_
$LN15@proxy_for_:
	mov	ecx, DWORD PTR _e$[ebp]
	add	ecx, 1
	mov	DWORD PTR _e$[ebp], ecx
	jmp	SHORT $LN17@proxy_for_
$LN16@proxy_for_:
; Line 326
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN14@proxy_for_
; Line 332
	cmp	DWORD PTR _addr$[ebp], 0
	je	SHORT $LN11@proxy_for_
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _exclude_list$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	push	ecx
	mov	edx, DWORD PTR _hostip_len$[ebp]
	lea	eax, DWORD PTR _hostip$[ebp+edx]
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 1
	sub	eax, ecx
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN12@proxy_for_
$LN11@proxy_for_:
	mov	edx, DWORD PTR _e$[ebp]
	sub	edx, DWORD PTR _s$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _exclude_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	mov	eax, DWORD PTR _hostname$[ebp]
	add	eax, DWORD PTR _hostname_len$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 1
	sub	eax, ecx
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@proxy_for_
$LN12@proxy_for_:
; Line 333
	xor	eax, eax
	jmp	$LN29@proxy_for_
$LN13@proxy_for_:
; Line 335
	jmp	$LN10@proxy_for_
$LN14@proxy_for_:
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _e$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN9@proxy_for_
; Line 339
	cmp	DWORD PTR _addr$[ebp], 0
	je	SHORT $LN6@proxy_for_
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	push	edx
	lea	eax, DWORD PTR _hostip$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@proxy_for_
$LN6@proxy_for_:
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _hostname$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@proxy_for_
$LN7@proxy_for_:
; Line 340
	xor	eax, eax
	jmp	$LN29@proxy_for_
$LN8@proxy_for_:
; Line 342
	jmp	SHORT $LN10@proxy_for_
$LN9@proxy_for_:
; Line 347
	cmp	DWORD PTR _addr$[ebp], 0
	je	SHORT $LN4@proxy_for_
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	push	edx
	lea	eax, DWORD PTR _hostip$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@proxy_for_
; Line 348
	xor	eax, eax
	jmp	SHORT $LN29@proxy_for_
$LN4@proxy_for_:
; Line 349
	mov	ecx, DWORD PTR _e$[ebp]
	sub	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _hostname$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@proxy_for_
; Line 350
	xor	eax, eax
	jmp	SHORT $LN29@proxy_for_
$LN10@proxy_for_:
; Line 353
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _s$[ebp], ecx
$LN2@proxy_for_:
; Line 358
	mov	edx, DWORD PTR _exclude_list$[ebp]
	add	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN1@proxy_for_
	mov	ecx, DWORD PTR _exclude_list$[ebp]
	add	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@proxy_for_
	mov	eax, DWORD PTR _exclude_list$[ebp]
	add	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 44					; 0000002cH
	je	SHORT $LN1@proxy_for_
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
	jmp	SHORT $LN2@proxy_for_
$LN1@proxy_for_:
; Line 359
	jmp	$LN23@proxy_for_
$LN22@proxy_for_:
; Line 362
	mov	eax, 1
$LN29@proxy_for_:
; Line 363
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@proxy_for_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@proxy_for_:
	DD	1
	DD	$LN32@proxy_for_
$LN32@proxy_for_:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN31@proxy_for_
$LN31@proxy_for_:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
_proxy_for_destination ENDP
_TEXT	ENDS
PUBLIC	_name_lookup
EXTRN	_sk_namelookup:PROC
EXTRN	_sk_nonamelookup:PROC
EXTRN	_dupstr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_host$ = 8						; size = 4
_port$ = 12						; size = 4
_canonicalname$ = 16					; size = 4
_conf$ = 20						; size = 4
_addressfamily$ = 24					; size = 4
_name_lookup PROC
; Line 367
	push	ebp
	mov	ebp, esp
; Line 370
	push	13					; 0000000dH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@name_looku
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@name_looku
	push	11					; 0000000bH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 2
	jne	SHORT $LN2@name_looku
	push	13					; 0000000dH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 1
	je	SHORT $LN2@name_looku
$LN1@name_looku:
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _host$[ebp]
	push	eax
	push	0
	call	_proxy_for_destination
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@name_looku
; Line 371
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _canonicalname$[ebp]
	mov	DWORD PTR [edx], eax
; Line 372
	mov	eax, DWORD PTR _host$[ebp]
	push	eax
	call	_sk_nonamelookup
	add	esp, 4
	jmp	SHORT $LN3@name_looku
$LN2@name_looku:
; Line 375
	mov	ecx, DWORD PTR _addressfamily$[ebp]
	push	ecx
	mov	edx, DWORD PTR _canonicalname$[ebp]
	push	edx
	mov	eax, DWORD PTR _host$[ebp]
	push	eax
	call	_sk_namelookup
	add	esp, 12					; 0000000cH
$LN3@name_looku:
; Line 376
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_name_lookup ENDP
_TEXT	ENDS
PUBLIC	_proxy_telnet_negotiate
PUBLIC	_proxy_socks5_negotiate
PUBLIC	_proxy_socks4_negotiate
PUBLIC	_proxy_http_negotiate
PUBLIC	_new_connection
EXTRN	_sk_new:PROC
EXTRN	_sk_addr_error:PROC
EXTRN	_bufchain_init:PROC
EXTRN	_conf_copy:PROC
EXTRN	_safemalloc:PROC
EXTRN	_platform_new_connection:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_type$85873 = -32					; size = 4
_sret$85872 = -28					; size = 4
_proxy_canonical_name$85871 = -20			; size = 4
_proxy_addr$85870 = -12					; size = 4
_pplug$85869 = -8					; size = 4
_ret$85868 = -4						; size = 4
_addr$ = 8						; size = 4
_hostname$ = 12						; size = 4
_port$ = 16						; size = 4
_privport$ = 20						; size = 4
_oobinline$ = 24					; size = 4
_nodelay$ = 28						; size = 4
_keepalive$ = 32					; size = 4
_plug$ = 36						; size = 4
_conf$ = 40						; size = 4
_new_connection PROC
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 403
	push	13					; 0000000dH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	$LN12@new_connec
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _hostname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	_proxy_for_destination
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN12@new_connec
; Line 415
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	mov	eax, DWORD PTR _plug$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keepalive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodelay$[ebp]
	push	edx
	mov	eax, DWORD PTR _oobinline$[ebp]
	push	eax
	mov	ecx, DWORD PTR _privport$[ebp]
	push	ecx
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _hostname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	_platform_new_connection
	add	esp, 36					; 00000024H
	mov	DWORD PTR _sret$85872[ebp], eax
	cmp	DWORD PTR _sret$85872[ebp], 0
	je	SHORT $LN11@new_connec
; Line 416
	mov	eax, DWORD PTR _sret$85872[ebp]
	jmp	$LN13@new_connec
$LN11@new_connec:
; Line 418
	push	136					; 00000088H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$85868[ebp], eax
; Line 419
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [edx], OFFSET ?socket_fn_table@?1??new_connection@@9@9
; Line 420
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_copy
	add	esp, 4
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+116], eax
; Line 421
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 422
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	edx, DWORD PTR _addr$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 423
	mov	eax, DWORD PTR _ret$85868[ebp]
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 425
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 426
	mov	eax, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 427
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+64], 0
; Line 428
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [edx+72], 0
; Line 430
	mov	eax, DWORD PTR _ret$85868[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_init
	add	esp, 4
; Line 431
	mov	ecx, DWORD PTR _ret$85868[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_bufchain_init
	add	esp, 4
; Line 432
	mov	edx, DWORD PTR _ret$85868[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_bufchain_init
	add	esp, 4
; Line 434
	mov	eax, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 435
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+68], -1
; Line 436
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [edx+76], 0
; Line 438
	push	13					; 0000000dH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _type$85873[ebp], eax
; Line 439
	cmp	DWORD PTR _type$85873[ebp], 3
	jne	SHORT $LN10@new_connec
; Line 440
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+76], OFFSET _proxy_http_negotiate
	jmp	SHORT $LN9@new_connec
$LN10@new_connec:
; Line 441
	cmp	DWORD PTR _type$85873[ebp], 1
	jne	SHORT $LN8@new_connec
; Line 442
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [edx+76], OFFSET _proxy_socks4_negotiate
	jmp	SHORT $LN9@new_connec
$LN8@new_connec:
; Line 443
	cmp	DWORD PTR _type$85873[ebp], 2
	jne	SHORT $LN6@new_connec
; Line 444
	mov	eax, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [eax+76], OFFSET _proxy_socks5_negotiate
	jmp	SHORT $LN9@new_connec
$LN6@new_connec:
; Line 445
	cmp	DWORD PTR _type$85873[ebp], 4
	jne	SHORT $LN4@new_connec
; Line 446
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+76], OFFSET _proxy_telnet_negotiate
; Line 447
	jmp	SHORT $LN9@new_connec
$LN4@new_connec:
; Line 448
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [edx+4], OFFSET $SG85889
; Line 449
	mov	eax, DWORD PTR _ret$85868[ebp]
	jmp	$LN13@new_connec
$LN9@new_connec:
; Line 454
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pplug$85869[ebp], eax
; Line 455
	mov	eax, DWORD PTR _pplug$85869[ebp]
	mov	DWORD PTR [eax], OFFSET ?plug_fn_table@?1??new_connection@@9@9
; Line 456
	mov	ecx, DWORD PTR _pplug$85869[ebp]
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 461
	push	3
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _proxy_canonical_name$85871[ebp]
	push	ecx
	push	14					; 0000000eH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
	push	eax
	call	_sk_namelookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _proxy_addr$85870[ebp], eax
; Line 462
	mov	eax, DWORD PTR _proxy_addr$85870[ebp]
	push	eax
	call	_sk_addr_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@new_connec
; Line 463
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+4], OFFSET $SG85895
; Line 464
	mov	edx, DWORD PTR _pplug$85869[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 465
	mov	eax, DWORD PTR _proxy_addr$85870[ebp]
	push	eax
	call	_sk_addr_free
	add	esp, 4
; Line 466
	mov	eax, DWORD PTR _ret$85868[ebp]
	jmp	$LN13@new_connec
$LN2@new_connec:
; Line 468
	mov	ecx, DWORD PTR _proxy_canonical_name$85871[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 476
	mov	edx, DWORD PTR _pplug$85869[ebp]
	push	edx
	mov	eax, DWORD PTR _keepalive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodelay$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oobinline$[ebp]
	push	edx
	mov	eax, DWORD PTR _privport$[ebp]
	push	eax
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _proxy_addr$85870[ebp]
	push	edx
	call	_sk_new
	add	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 477
	mov	esi, esp
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@new_connec
; Line 478
	mov	eax, DWORD PTR _ret$85868[ebp]
	jmp	SHORT $LN13@new_connec
$LN1@new_connec:
; Line 481
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _ret$85868[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ret$85868[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 482
	mov	esi, esp
	push	-1
	mov	edx, DWORD PTR _ret$85868[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$85868[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 484
	mov	eax, DWORD PTR _ret$85868[ebp]
	jmp	SHORT $LN13@new_connec
$LN12@new_connec:
; Line 488
	mov	edx, DWORD PTR _plug$[ebp]
	push	edx
	mov	eax, DWORD PTR _keepalive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodelay$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oobinline$[ebp]
	push	edx
	mov	eax, DWORD PTR _privport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _port$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_new
	add	esp, 28					; 0000001cH
$LN13@new_connec:
; Line 489
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@new_connec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@new_connec:
	DD	1
	DD	$LN16@new_connec
$LN16@new_connec:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN15@new_connec
$LN15@new_connec:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_new_connection ENDP
_TEXT	ENDS
PUBLIC	_new_listener
EXTRN	_sk_newlistener:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcaddr$ = 8						; size = 4
_port$ = 12						; size = 4
_plug$ = 16						; size = 4
_local_host_only$ = 20					; size = 4
_conf$ = 24						; size = 4
_addressfamily$ = 28					; size = 4
_new_listener PROC
; Line 493
	push	ebp
	mov	ebp, esp
; Line 498
	mov	eax, DWORD PTR _addressfamily$[ebp]
	push	eax
	mov	ecx, DWORD PTR _local_host_only$[ebp]
	push	ecx
	mov	edx, DWORD PTR _plug$[ebp]
	push	edx
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcaddr$[ebp]
	push	ecx
	call	_sk_newlistener
	add	esp, 20					; 00000014H
; Line 499
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_new_listener ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_sscanf:PROC
EXTRN	_bufchain_fetch:PROC
EXTRN	__wassert:PROC
EXTRN	_strcpy:PROC
EXTRN	_base64_encode_atom:PROC
EXTRN	_sprintf:PROC
EXTRN	_dupprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv156 = -616						; size = 4
_buf$85980 = -612					; size = 4
_status$85967 = -604					; size = 4
_maj_ver$85966 = -592					; size = 4
_min_ver$85965 = -580					; size = 4
_eol$85963 = -572					; size = 4
_len$85962 = -568					; size = 4
_datap$85961 = -564					; size = 4
_data$85960 = -560					; size = 4
_len$85945 = -556					; size = 4
_j$85944 = -552						; size = 4
_i$85943 = -548						; size = 4
_buf2$85942 = -544					; size = 4
_buf$85941 = -540					; size = 4
_password$85937 = -536					; size = 4
_username$85936 = -532					; size = 4
_dest$85935 = -524					; size = 512
_buf$85934 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_change$ = 12						; size = 4
_proxy_http_negotiate PROC
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 616				; 00000268H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-616]
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 541
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], -1
	jne	$LN23@proxy_http
; Line 550
	push	512					; 00000200H
	lea	ecx, DWORD PTR _dest$85935[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 553
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	eax, DWORD PTR _dest$85935[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	eax, DWORD PTR _dest$85935[ebp]
	push	eax
	push	OFFSET $SG85938
	call	_dupprintf
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buf$85934[ebp], eax
; Line 554
	mov	ecx, DWORD PTR _buf$85934[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _buf$85934[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 555
	mov	eax, DWORD PTR _buf$85934[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 557
	push	16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _username$85936[ebp], eax
; Line 558
	push	17					; 00000011H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _password$85937[ebp], eax
; Line 559
	mov	edx, DWORD PTR _username$85936[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN21@proxy_http
	mov	ecx, DWORD PTR _password$85937[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN22@proxy_http
$LN21@proxy_http:
; Line 562
	mov	eax, DWORD PTR _password$85937[ebp]
	push	eax
	mov	ecx, DWORD PTR _username$85936[ebp]
	push	ecx
	push	OFFSET $SG85946
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$85941[ebp], eax
; Line 563
	mov	edx, DWORD PTR _buf$85941[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$85945[ebp], eax
; Line 564
	push	1
	mov	eax, DWORD PTR _len$85945[ebp]
	shl	eax, 2
	cdq
	mov	ecx, 3
	idiv	ecx
	add	eax, 100				; 00000064H
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buf2$85942[ebp], eax
; Line 565
	push	OFFSET $SG85949
	mov	edx, DWORD PTR _buf2$85942[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
; Line 566
	mov	DWORD PTR _i$85943[ebp], 0
	mov	eax, DWORD PTR _buf2$85942[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _j$85944[ebp], eax
	jmp	SHORT $LN20@proxy_http
$LN19@proxy_http:
	mov	ecx, DWORD PTR _i$85943[ebp]
	add	ecx, 3
	mov	DWORD PTR _i$85943[ebp], ecx
	mov	edx, DWORD PTR _j$85944[ebp]
	add	edx, 4
	mov	DWORD PTR _j$85944[ebp], edx
$LN20@proxy_http:
	mov	eax, DWORD PTR _i$85943[ebp]
	cmp	eax, DWORD PTR _len$85945[ebp]
	jge	SHORT $LN18@proxy_http
; Line 568
	mov	ecx, DWORD PTR _len$85945[ebp]
	sub	ecx, DWORD PTR _i$85943[ebp]
	cmp	ecx, 3
	jle	SHORT $LN26@proxy_http
	mov	DWORD PTR tv156[ebp], 3
	jmp	SHORT $LN27@proxy_http
$LN26@proxy_http:
	mov	edx, DWORD PTR _len$85945[ebp]
	sub	edx, DWORD PTR _i$85943[ebp]
	mov	DWORD PTR tv156[ebp], edx
$LN27@proxy_http:
	mov	eax, DWORD PTR _buf2$85942[ebp]
	add	eax, DWORD PTR _j$85944[ebp]
	push	eax
	mov	ecx, DWORD PTR tv156[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$85941[ebp]
	add	edx, DWORD PTR _i$85943[ebp]
	push	edx
	call	_base64_encode_atom
	add	esp, 12					; 0000000cH
	jmp	$LN19@proxy_http
$LN18@proxy_http:
; Line 569
	push	OFFSET $SG85954
	mov	eax, DWORD PTR _buf2$85942[ebp]
	add	eax, DWORD PTR _j$85944[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 570
	mov	ecx, DWORD PTR _buf2$85942[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _buf2$85942[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 571
	mov	eax, DWORD PTR _buf$85941[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 572
	mov	ecx, DWORD PTR _buf2$85942[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN22@proxy_http:
; Line 575
	mov	esi, esp
	push	2
	push	OFFSET $SG85955
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 577
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+68], 1
; Line 578
	xor	eax, eax
	jmp	$LN24@proxy_http
$LN23@proxy_http:
; Line 581
	cmp	DWORD PTR _change$[ebp], 0
	jne	SHORT $LN17@proxy_http
; Line 590
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN24@proxy_http
$LN17@proxy_http:
; Line 593
	cmp	DWORD PTR _change$[ebp], 1
	jne	SHORT $LN16@proxy_http
; Line 599
	xor	eax, eax
	jmp	$LN24@proxy_http
$LN16@proxy_http:
; Line 602
	cmp	DWORD PTR _change$[ebp], 3
	jne	SHORT $LN15@proxy_http
; Line 609
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN24@proxy_http
$LN15@proxy_http:
; Line 612
	cmp	DWORD PTR _change$[ebp], 2
	jne	$LN14@proxy_http
; Line 621
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], 1
	jne	$LN13@proxy_http
; Line 626
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_size
	add	esp, 4
	mov	DWORD PTR _len$85962[ebp], eax
; Line 627
	cmp	DWORD PTR _len$85962[ebp], 0
	jg	SHORT $LN28@proxy_http
	push	627					; 00000273H
	push	OFFSET $SG85969
	push	OFFSET $SG85970
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@proxy_http:
; Line 628
	push	1
	mov	ecx, DWORD PTR _len$85962[ebp]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _data$85960[ebp], eax
; Line 629
	mov	edx, DWORD PTR _len$85962[ebp]
	push	edx
	mov	eax, DWORD PTR _data$85960[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_fetch
	add	esp, 12					; 0000000cH
; Line 635
	mov	edx, DWORD PTR _data$85960[ebp]
	add	edx, DWORD PTR _len$85962[ebp]
	mov	BYTE PTR [edx], 0
; Line 637
	mov	eax, DWORD PTR _len$85962[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$85960[ebp]
	push	ecx
	call	_get_line_end
	add	esp, 8
	mov	DWORD PTR _eol$85963[ebp], eax
; Line 638
	cmp	DWORD PTR _eol$85963[ebp], 0
	jge	SHORT $LN12@proxy_http
; Line 639
	mov	edx, DWORD PTR _data$85960[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 640
	mov	eax, 1
	jmp	$LN24@proxy_http
$LN12@proxy_http:
; Line 643
	mov	DWORD PTR _status$85967[ebp], -1
; Line 646
	lea	eax, DWORD PTR _status$85967[ebp]
	push	eax
	lea	ecx, DWORD PTR _min_ver$85965[ebp]
	push	ecx
	lea	edx, DWORD PTR _maj_ver$85966[ebp]
	push	edx
	push	OFFSET $SG85977
	mov	eax, DWORD PTR _data$85960[ebp]
	push	eax
	call	_sscanf
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jl	SHORT $LN10@proxy_http
	cmp	DWORD PTR _status$85967[ebp], -1
	jne	SHORT $LN11@proxy_http
$LN10@proxy_http:
; Line 648
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG85978
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 649
	mov	ecx, DWORD PTR _data$85960[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 650
	mov	eax, 1
	jmp	$LN24@proxy_http
$LN11@proxy_http:
; Line 654
	mov	edx, DWORD PTR _eol$85963[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_consume
	add	esp, 8
; Line 655
	mov	ecx, DWORD PTR _data$85960[ebp]
	add	ecx, DWORD PTR _status$85967[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 50					; 00000032H
	je	$LN9@proxy_http
; Line 658
	mov	eax, DWORD PTR _data$85960[ebp]
	add	eax, DWORD PTR _eol$85963[ebp]
	mov	BYTE PTR [eax], 0
$LN8@proxy_http:
; Line 660
	mov	ecx, DWORD PTR _eol$85963[ebp]
	cmp	ecx, DWORD PTR _status$85967[ebp]
	jle	SHORT $LN7@proxy_http
	mov	edx, DWORD PTR _data$85960[ebp]
	add	edx, DWORD PTR _eol$85963[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN6@proxy_http
	mov	ecx, DWORD PTR _data$85960[ebp]
	add	ecx, DWORD PTR _eol$85963[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN7@proxy_http
$LN6@proxy_http:
; Line 661
	mov	eax, DWORD PTR _eol$85963[ebp]
	sub	eax, 1
	mov	DWORD PTR _eol$85963[ebp], eax
	mov	ecx, DWORD PTR _data$85960[ebp]
	add	ecx, DWORD PTR _eol$85963[ebp]
	mov	BYTE PTR [ecx], 0
	jmp	SHORT $LN8@proxy_http
$LN7@proxy_http:
; Line 662
	mov	edx, DWORD PTR _data$85960[ebp]
	add	edx, DWORD PTR _status$85967[ebp]
	push	edx
	push	OFFSET $SG85985
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _buf$85980[ebp], eax
; Line 663
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	mov	eax, DWORD PTR _buf$85980[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 664
	mov	ecx, DWORD PTR _buf$85980[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 665
	mov	edx, DWORD PTR _data$85960[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 666
	mov	eax, 1
	jmp	$LN24@proxy_http
$LN9@proxy_http:
; Line 669
	mov	eax, DWORD PTR _data$85960[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 671
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+68], 2
$LN13@proxy_http:
; Line 674
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+68], 2
	jne	$LN14@proxy_http
; Line 680
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_size
	add	esp, 4
	mov	DWORD PTR _len$85962[ebp], eax
; Line 681
	cmp	DWORD PTR _len$85962[ebp], 0
	jg	SHORT $LN29@proxy_http
	push	681					; 000002a9H
	push	OFFSET $SG85988
	push	OFFSET $SG85989
	call	__wassert
	add	esp, 12					; 0000000cH
$LN29@proxy_http:
; Line 682
	push	1
	mov	edx, DWORD PTR _len$85962[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _data$85960[ebp], eax
; Line 683
	mov	eax, DWORD PTR _data$85960[ebp]
	mov	DWORD PTR _datap$85961[ebp], eax
; Line 684
	mov	ecx, DWORD PTR _len$85962[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$85960[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_fetch
	add	esp, 12					; 0000000cH
; Line 686
	mov	ecx, DWORD PTR _len$85962[ebp]
	push	ecx
	mov	edx, DWORD PTR _datap$85961[ebp]
	push	edx
	call	_get_line_end
	add	esp, 8
	mov	DWORD PTR _eol$85963[ebp], eax
; Line 687
	cmp	DWORD PTR _eol$85963[ebp], 0
	jge	SHORT $LN3@proxy_http
; Line 688
	mov	eax, DWORD PTR _data$85960[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 689
	mov	eax, 1
	jmp	$LN24@proxy_http
$LN3@proxy_http:
; Line 691
	cmp	DWORD PTR _eol$85963[ebp], 2
	jle	SHORT $LN2@proxy_http
; Line 693
	mov	ecx, DWORD PTR _eol$85963[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_consume
	add	esp, 8
; Line 694
	mov	eax, DWORD PTR _datap$85961[ebp]
	add	eax, DWORD PTR _eol$85963[ebp]
	mov	DWORD PTR _datap$85961[ebp], eax
; Line 695
	mov	ecx, DWORD PTR _len$85962[ebp]
	sub	ecx, DWORD PTR _eol$85963[ebp]
	mov	DWORD PTR _len$85962[ebp], ecx
; Line 696
	mov	edx, DWORD PTR _len$85962[ebp]
	push	edx
	mov	eax, DWORD PTR _datap$85961[ebp]
	push	eax
	call	_get_line_end
	add	esp, 8
	mov	DWORD PTR _eol$85963[ebp], eax
; Line 697
	jmp	SHORT $LN3@proxy_http
$LN2@proxy_http:
; Line 699
	cmp	DWORD PTR _eol$85963[ebp], 2
	jne	SHORT $LN1@proxy_http
; Line 701
	push	2
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_consume
	add	esp, 8
; Line 702
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_proxy_activate
	add	esp, 4
; Line 705
	mov	eax, DWORD PTR _data$85960[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 706
	mov	eax, 1
	jmp	SHORT $LN24@proxy_http
$LN1@proxy_http:
; Line 709
	mov	ecx, DWORD PTR _data$85960[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 710
	mov	eax, 1
	jmp	SHORT $LN24@proxy_http
$LN14@proxy_http:
; Line 715
	mov	esi, esp
	push	0
	push	8001					; 00001f41H
	push	OFFSET $SG85997
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 716
	mov	eax, 1
$LN24@proxy_http:
; Line 717
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@proxy_http
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 616				; 00000268H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN35@proxy_http:
	DD	4
	DD	$LN34@proxy_http
$LN34@proxy_http:
	DD	-524					; fffffdf4H
	DD	512					; 00000200H
	DD	$LN30@proxy_http
	DD	-580					; fffffdbcH
	DD	4
	DD	$LN31@proxy_http
	DD	-592					; fffffdb0H
	DD	4
	DD	$LN32@proxy_http
	DD	-604					; fffffda4H
	DD	4
	DD	$LN33@proxy_http
$LN33@proxy_http:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN32@proxy_http:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	106					; 0000006aH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN31@proxy_http:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN30@proxy_http:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_proxy_http_negotiate ENDP
; Function compile flags: /Odtp /RTCsu
_off$ = -4						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_get_line_end PROC
; Line 506
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 507
	mov	DWORD PTR _off$[ebp], 0
$LN5@get_line_e:
; Line 509
	mov	eax, DWORD PTR _off$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@get_line_e
; Line 511
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _off$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN3@get_line_e
; Line 513
	mov	eax, DWORD PTR _off$[ebp]
	add	eax, 1
	mov	DWORD PTR _off$[ebp], eax
; Line 516
	cmp	DWORD PTR _off$[ebp], 2
	jg	SHORT $LN2@get_line_e
	mov	eax, DWORD PTR _off$[ebp]
	jmp	SHORT $LN6@get_line_e
$LN2@get_line_e:
; Line 525
	mov	ecx, DWORD PTR _off$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@get_line_e
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _off$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN1@get_line_e
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _off$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 9
	je	SHORT $LN1@get_line_e
	mov	eax, DWORD PTR _off$[ebp]
	jmp	SHORT $LN6@get_line_e
$LN1@get_line_e:
; Line 530
	mov	eax, DWORD PTR _off$[ebp]
	add	eax, 1
	mov	DWORD PTR _off$[ebp], eax
$LN3@get_line_e:
; Line 533
	mov	ecx, DWORD PTR _off$[ebp]
	add	ecx, 1
	mov	DWORD PTR _off$[ebp], ecx
; Line 534
	jmp	SHORT $LN5@get_line_e
$LN4@get_line_e:
; Line 536
	or	eax, -1
$LN6@get_line_e:
; Line 537
	mov	esp, ebp
	pop	ebp
	ret	0
_get_line_end ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_sk_addrcopy:PROC
EXTRN	_sk_addrtype:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv222 = -576						; size = 4
_data$86028 = -568					; size = 8
_username$86010 = -556					; size = 4
_hostname$86009 = -548					; size = 512
_addr$86008 = -28					; size = 4
_command$86007 = -20					; size = 4
_namelen$86006 = -16					; size = 4
_type$86005 = -12					; size = 4
_length$86004 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_change$ = 12						; size = 4
_proxy_socks4_negotiate PROC
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 576				; 00000240H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 726
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], -1
	jne	$LN18@proxy_sock
; Line 742
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_sk_addrtype
	add	esp, 4
	mov	DWORD PTR _type$86005[ebp], eax
; Line 743
	cmp	DWORD PTR _type$86005[ebp], 2
	jne	SHORT $LN17@proxy_sock
; Line 744
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], OFFSET $SG86012
; Line 745
	mov	eax, 1
	jmp	$LN19@proxy_sock
	jmp	$LN16@proxy_sock
$LN17@proxy_sock:
; Line 746
	cmp	DWORD PTR _type$86005[ebp], 1
	jne	SHORT $LN15@proxy_sock
; Line 747
	mov	DWORD PTR _namelen$86006[ebp], 0
; Line 748
	lea	ecx, DWORD PTR _addr$86008[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_sk_addrcopy
	add	esp, 8
; Line 749
	jmp	SHORT $LN16@proxy_sock
$LN15@proxy_sock:
; Line 750
	cmp	DWORD PTR _type$86005[ebp], 3
	je	SHORT $LN21@proxy_sock
	push	750					; 000002eeH
	push	OFFSET $SG86017
	push	OFFSET $SG86018
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@proxy_sock:
; Line 751
	push	512					; 00000200H
	lea	edx, DWORD PTR _hostname$86009[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 752
	lea	edx, DWORD PTR _hostname$86009[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _namelen$86006[ebp], eax
; Line 753
	mov	BYTE PTR _addr$86008[ebp+2], 0
	mov	al, BYTE PTR _addr$86008[ebp+2]
	mov	BYTE PTR _addr$86008[ebp+1], al
	mov	cl, BYTE PTR _addr$86008[ebp+1]
	mov	BYTE PTR _addr$86008[ebp], cl
; Line 754
	mov	BYTE PTR _addr$86008[ebp+3], 1
$LN16@proxy_sock:
; Line 757
	push	16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _username$86010[ebp], eax
; Line 758
	mov	ecx, DWORD PTR _username$86010[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _namelen$86006[ebp]
	lea	eax, DWORD PTR [eax+edx+9]
	mov	DWORD PTR _length$86004[ebp], eax
; Line 759
	push	1
	mov	ecx, DWORD PTR _length$86004[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _command$86007[ebp], eax
; Line 760
	mov	edx, DWORD PTR _username$86010[ebp]
	push	edx
	mov	eax, DWORD PTR _command$86007[ebp]
	add	eax, 8
	push	eax
	call	_strcpy
	add	esp, 8
; Line 762
	mov	ecx, DWORD PTR _command$86007[ebp]
	mov	BYTE PTR [ecx], 4
; Line 763
	mov	edx, DWORD PTR _command$86007[ebp]
	mov	BYTE PTR [edx+1], 1
; Line 766
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sar	ecx, 8
	movsx	edx, cl
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _command$86007[ebp]
	mov	BYTE PTR [eax+2], dl
; Line 767
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _command$86007[ebp]
	mov	BYTE PTR [eax+3], dl
; Line 770
	push	4
	lea	ecx, DWORD PTR _addr$86008[ebp]
	push	ecx
	mov	edx, DWORD PTR _command$86007[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 774
	mov	eax, DWORD PTR _namelen$86006[ebp]
	push	eax
	lea	ecx, DWORD PTR _hostname$86009[ebp]
	push	ecx
	mov	edx, DWORD PTR _username$86010[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _command$86007[ebp]
	lea	edx, DWORD PTR [ecx+eax+9]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 776
	mov	esi, esp
	mov	eax, DWORD PTR _length$86004[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$86007[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 777
	mov	edx, DWORD PTR _username$86010[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 778
	mov	eax, DWORD PTR _command$86007[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 780
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+68], 1
; Line 781
	xor	eax, eax
	jmp	$LN19@proxy_sock
$LN18@proxy_sock:
; Line 784
	cmp	DWORD PTR _change$[ebp], 0
	jne	SHORT $LN13@proxy_sock
; Line 793
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN19@proxy_sock
$LN13@proxy_sock:
; Line 796
	cmp	DWORD PTR _change$[ebp], 1
	jne	SHORT $LN12@proxy_sock
; Line 802
	xor	eax, eax
	jmp	$LN19@proxy_sock
$LN12@proxy_sock:
; Line 805
	cmp	DWORD PTR _change$[ebp], 3
	jne	SHORT $LN11@proxy_sock
; Line 812
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN19@proxy_sock
$LN11@proxy_sock:
; Line 815
	cmp	DWORD PTR _change$[ebp], 2
	jne	$LN10@proxy_sock
; Line 820
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 1
	jne	$LN10@proxy_sock
; Line 835
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	cmp	eax, 8
	jge	SHORT $LN8@proxy_sock
; Line 836
	mov	eax, 1
	jmp	$LN19@proxy_sock
$LN8@proxy_sock:
; Line 839
	push	8
	lea	edx, DWORD PTR _data$86028[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_fetch
	add	esp, 12					; 0000000cH
; Line 841
	movsx	ecx, BYTE PTR _data$86028[ebp]
	test	ecx, ecx
	je	SHORT $LN7@proxy_sock
; Line 844
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86031
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 845
	mov	eax, 1
	jmp	$LN19@proxy_sock
$LN7@proxy_sock:
; Line 848
	movsx	edx, BYTE PTR _data$86028[ebp+1]
	cmp	edx, 90					; 0000005aH
	je	$LN6@proxy_sock
; Line 850
	mov	al, BYTE PTR _data$86028[ebp+1]
	mov	BYTE PTR tv222[ebp], al
	cmp	BYTE PTR tv222[ebp], 92			; 0000005cH
	je	SHORT $LN3@proxy_sock
	cmp	BYTE PTR tv222[ebp], 93			; 0000005dH
	je	SHORT $LN2@proxy_sock
	jmp	SHORT $LN1@proxy_sock
$LN3@proxy_sock:
; Line 853
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86038
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 854
	jmp	SHORT $LN4@proxy_sock
$LN2@proxy_sock:
; Line 857
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86040
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 858
	jmp	SHORT $LN4@proxy_sock
$LN1@proxy_sock:
; Line 862
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86042
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@proxy_sock:
; Line 866
	mov	eax, 1
	jmp	SHORT $LN19@proxy_sock
$LN6@proxy_sock:
; Line 868
	push	8
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_consume
	add	esp, 8
; Line 871
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_proxy_activate
	add	esp, 4
; Line 874
	mov	eax, 1
	jmp	SHORT $LN19@proxy_sock
$LN10@proxy_sock:
; Line 879
	mov	esi, esp
	push	0
	push	8001					; 00001f41H
	push	OFFSET $SG86043
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 880
	mov	eax, 1
$LN19@proxy_sock:
; Line 881
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@proxy_sock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@proxy_sock:
	DD	3
	DD	$LN25@proxy_sock
$LN25@proxy_sock:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN22@proxy_sock
	DD	-548					; fffffddcH
	DD	512					; 00000200H
	DD	$LN23@proxy_sock
	DD	-568					; fffffdc8H
	DD	8
	DD	$LN24@proxy_sock
$LN24@proxy_sock:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN23@proxy_sock:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN22@proxy_sock:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
_proxy_socks4_negotiate ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_proxy_socks5_selectchap:PROC
EXTRN	_strcat:PROC
EXTRN	_proxy_socks5_handlechap:PROC
EXTRN	_proxy_socks5_offerencryptedauth:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv365 = -1432						; size = 4
tv328 = -1428						; size = 4
_ret$86157 = -1424					; size = 4
_plen$86149 = -1420					; size = 4
_ulen$86148 = -1416					; size = 4
_userpwbuf$86147 = -1408				; size = 513
_password$86144 = -888					; size = 4
_username$86143 = -884					; size = 4
_buf$86105 = -876					; size = 256
_len$86100 = -616					; size = 4
_data$86099 = -608					; size = 5
_type$86088 = -596					; size = 4
_len$86087 = -592					; size = 4
_command$86086 = -584					; size = 512
_ret$86083 = -68					; size = 4
_data$86076 = -60					; size = 2
_data$86062 = -48					; size = 2
_len$86053 = -36					; size = 4
_password$86052 = -28					; size = 4
_username$86051 = -24					; size = 4
_command$86050 = -16					; size = 5
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_change$ = 12						; size = 4
_proxy_socks5_negotiate PROC
; Line 885
	push	ebp
	mov	ebp, esp
	sub	esp, 1432				; 00000598H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1432]
	mov	ecx, 358				; 00000166H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 886
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], -1
	jne	$LN63@proxy_sock@2
; Line 903
	mov	BYTE PTR _command$86050[ebp], 5
; Line 904
	push	16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _username$86051[ebp], eax
; Line 905
	push	17					; 00000011H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _password$86052[ebp], eax
; Line 906
	mov	edx, DWORD PTR _username$86051[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN61@proxy_sock@2
	mov	ecx, DWORD PTR _password$86052[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN62@proxy_sock@2
$LN61@proxy_sock@2:
; Line 907
	mov	BYTE PTR _command$86050[ebp+2], 0
; Line 908
	mov	DWORD PTR _len$86053[ebp], 3
; Line 909
	lea	eax, DWORD PTR _len$86053[ebp]
	push	eax
	lea	ecx, DWORD PTR _command$86050[ebp]
	push	ecx
	call	_proxy_socks5_offerencryptedauth
	add	esp, 8
; Line 910
	mov	edx, DWORD PTR _len$86053[ebp]
	mov	BYTE PTR _command$86050[ebp+edx], 2
	mov	eax, DWORD PTR _len$86053[ebp]
	add	eax, 1
	mov	DWORD PTR _len$86053[ebp], eax
; Line 911
	mov	ecx, DWORD PTR _len$86053[ebp]
	sub	ecx, 2
	mov	BYTE PTR _command$86050[ebp+1], cl
; Line 912
	jmp	SHORT $LN60@proxy_sock@2
$LN62@proxy_sock@2:
; Line 913
	mov	BYTE PTR _command$86050[ebp+1], 1
; Line 914
	mov	BYTE PTR _command$86050[ebp+2], 0
; Line 915
	mov	DWORD PTR _len$86053[ebp], 3
$LN60@proxy_sock@2:
; Line 918
	mov	esi, esp
	mov	edx, DWORD PTR _len$86053[ebp]
	push	edx
	lea	eax, DWORD PTR _command$86050[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 920
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+68], 1
; Line 921
	xor	eax, eax
	jmp	$LN64@proxy_sock@2
$LN63@proxy_sock@2:
; Line 924
	cmp	DWORD PTR _change$[ebp], 0
	jne	SHORT $LN59@proxy_sock@2
; Line 933
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN64@proxy_sock@2
$LN59@proxy_sock@2:
; Line 936
	cmp	DWORD PTR _change$[ebp], 1
	jne	SHORT $LN58@proxy_sock@2
; Line 942
	xor	eax, eax
	jmp	$LN64@proxy_sock@2
$LN58@proxy_sock@2:
; Line 945
	cmp	DWORD PTR _change$[ebp], 3
	jne	SHORT $LN57@proxy_sock@2
; Line 952
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN64@proxy_sock@2
$LN57@proxy_sock@2:
; Line 955
	cmp	DWORD PTR _change$[ebp], 2
	jne	$LN56@proxy_sock@2
; Line 960
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 1
	jne	$LN55@proxy_sock@2
; Line 974
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	cmp	eax, 2
	jge	SHORT $LN54@proxy_sock@2
; Line 975
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN54@proxy_sock@2:
; Line 978
	push	2
	lea	edx, DWORD PTR _data$86062[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_fetch
	add	esp, 12					; 0000000cH
; Line 980
	movsx	ecx, BYTE PTR _data$86062[ebp]
	cmp	ecx, 5
	je	SHORT $LN53@proxy_sock@2
; Line 982
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86065
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 983
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN53@proxy_sock@2:
; Line 986
	movsx	edx, BYTE PTR _data$86062[ebp+1]
	test	edx, edx
	jne	SHORT $LN52@proxy_sock@2
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 2
	jmp	SHORT $LN51@proxy_sock@2
$LN52@proxy_sock@2:
; Line 987
	movsx	ecx, BYTE PTR _data$86062[ebp+1]
	cmp	ecx, 1
	jne	SHORT $LN50@proxy_sock@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+68], 4
	jmp	SHORT $LN51@proxy_sock@2
$LN50@proxy_sock@2:
; Line 988
	movsx	eax, BYTE PTR _data$86062[ebp+1]
	cmp	eax, 2
	jne	SHORT $LN48@proxy_sock@2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+68], 5
	jmp	SHORT $LN51@proxy_sock@2
$LN48@proxy_sock@2:
; Line 989
	movsx	edx, BYTE PTR _data$86062[ebp+1]
	cmp	edx, 3
	jne	SHORT $LN46@proxy_sock@2
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 6
; Line 990
	jmp	SHORT $LN51@proxy_sock@2
$LN46@proxy_sock@2:
; Line 992
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86074
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 993
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN51@proxy_sock@2:
; Line 995
	push	2
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_consume
	add	esp, 8
$LN55@proxy_sock@2:
; Line 998
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+68], 7
	jne	$LN44@proxy_sock@2
; Line 1008
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_size
	add	esp, 4
	cmp	eax, 2
	jge	SHORT $LN43@proxy_sock@2
; Line 1009
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN43@proxy_sock@2:
; Line 1012
	push	2
	lea	ecx, DWORD PTR _data$86076[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_fetch
	add	esp, 12					; 0000000cH
; Line 1014
	movsx	eax, BYTE PTR _data$86076[ebp]
	cmp	eax, 1
	je	SHORT $LN42@proxy_sock@2
; Line 1017
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86079
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1018
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN42@proxy_sock@2:
; Line 1021
	movsx	ecx, BYTE PTR _data$86076[ebp+1]
	test	ecx, ecx
	je	SHORT $LN41@proxy_sock@2
; Line 1025
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86081
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1026
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN41@proxy_sock@2:
; Line 1029
	push	2
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_consume
	add	esp, 8
; Line 1030
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 2
$LN44@proxy_sock@2:
; Line 1033
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], 8
	jne	SHORT $LN40@proxy_sock@2
; Line 1035
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_proxy_socks5_handlechap
	add	esp, 4
	mov	DWORD PTR _ret$86083[ebp], eax
; Line 1036
	cmp	DWORD PTR _ret$86083[ebp], 0
	je	SHORT $LN40@proxy_sock@2
	mov	eax, DWORD PTR _ret$86083[ebp]
	jmp	$LN64@proxy_sock@2
$LN40@proxy_sock@2:
; Line 1039
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 2
	jne	$LN38@proxy_sock@2
; Line 1060
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_sk_addrtype
	add	esp, 4
	mov	DWORD PTR _type$86088[ebp], eax
; Line 1061
	cmp	DWORD PTR _type$86088[ebp], 1
	jne	SHORT $LN37@proxy_sock@2
; Line 1062
	mov	DWORD PTR _len$86087[ebp], 10		; 0000000aH
; Line 1063
	mov	BYTE PTR _command$86086[ebp+3], 1
; Line 1064
	lea	eax, DWORD PTR _command$86086[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_sk_addrcopy
	add	esp, 8
	jmp	$LN36@proxy_sock@2
$LN37@proxy_sock@2:
; Line 1065
	cmp	DWORD PTR _type$86088[ebp], 2
	jne	SHORT $LN35@proxy_sock@2
; Line 1066
	mov	DWORD PTR _len$86087[ebp], 22		; 00000016H
; Line 1067
	mov	BYTE PTR _command$86086[ebp+3], 4
; Line 1068
	lea	eax, DWORD PTR _command$86086[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_sk_addrcopy
	add	esp, 8
; Line 1069
	jmp	SHORT $LN36@proxy_sock@2
$LN35@proxy_sock@2:
; Line 1070
	cmp	DWORD PTR _type$86088[ebp], 3
	je	SHORT $LN66@proxy_sock@2
	push	1070					; 0000042eH
	push	OFFSET $SG86094
	push	OFFSET $SG86095
	call	__wassert
	add	esp, 12					; 0000000cH
$LN66@proxy_sock@2:
; Line 1071
	mov	BYTE PTR _command$86086[ebp+3], 3
; Line 1072
	push	256					; 00000100H
	lea	ecx, DWORD PTR _command$86086[ebp+5]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 1073
	lea	ecx, DWORD PTR _command$86086[ebp+5]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _command$86086[ebp+4], al
; Line 1074
	movsx	edx, BYTE PTR _command$86086[ebp+4]
	add	edx, 7
	mov	DWORD PTR _len$86087[ebp], edx
$LN36@proxy_sock@2:
; Line 1077
	mov	BYTE PTR _command$86086[ebp], 5
; Line 1078
	mov	BYTE PTR _command$86086[ebp+1], 1
; Line 1079
	mov	BYTE PTR _command$86086[ebp+2], 0
; Line 1082
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sar	ecx, 8
	movsx	edx, cl
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _len$86087[ebp]
	mov	BYTE PTR _command$86086[ebp+eax-2], dl
; Line 1083
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _len$86087[ebp]
	mov	BYTE PTR _command$86086[ebp+eax-1], dl
; Line 1085
	mov	esi, esp
	mov	ecx, DWORD PTR _len$86087[ebp]
	push	ecx
	lea	edx, DWORD PTR _command$86086[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1087
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 3
; Line 1088
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN38@proxy_sock@2:
; Line 1091
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], 3
	jne	$LN33@proxy_sock@2
; Line 1117
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_size
	add	esp, 4
	cmp	eax, 5
	jge	SHORT $LN32@proxy_sock@2
; Line 1118
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN32@proxy_sock@2:
; Line 1121
	push	5
	lea	eax, DWORD PTR _data$86099[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_fetch
	add	esp, 12					; 0000000cH
; Line 1123
	movsx	edx, BYTE PTR _data$86099[ebp]
	cmp	edx, 5
	je	SHORT $LN31@proxy_sock@2
; Line 1125
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86103
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1126
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN31@proxy_sock@2:
; Line 1129
	movsx	eax, BYTE PTR _data$86099[ebp+1]
	test	eax, eax
	je	$LN30@proxy_sock@2
; Line 1132
	push	OFFSET $SG86106
	lea	ecx, DWORD PTR _buf$86105[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1134
	movsx	edx, BYTE PTR _data$86099[ebp+1]
	mov	DWORD PTR tv328[ebp], edx
	mov	eax, DWORD PTR tv328[ebp]
	sub	eax, 1
	mov	DWORD PTR tv328[ebp], eax
	cmp	DWORD PTR tv328[ebp], 7
	ja	$LN19@proxy_sock@2
	mov	ecx, DWORD PTR tv328[ebp]
	jmp	DWORD PTR $LN77@proxy_sock@2[ecx*4]
$LN27@proxy_sock@2:
; Line 1135
	push	OFFSET $SG86112
	lea	edx, DWORD PTR _buf$86105[ebp]
	push	edx
	call	_strcat
	add	esp, 8
	jmp	$LN28@proxy_sock@2
$LN26@proxy_sock@2:
; Line 1136
	push	OFFSET $SG86114
	lea	eax, DWORD PTR _buf$86105[ebp]
	push	eax
	call	_strcat
	add	esp, 8
	jmp	$LN28@proxy_sock@2
$LN25@proxy_sock@2:
; Line 1137
	push	OFFSET $SG86116
	lea	ecx, DWORD PTR _buf$86105[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	$LN28@proxy_sock@2
$LN24@proxy_sock@2:
; Line 1138
	push	OFFSET $SG86118
	lea	edx, DWORD PTR _buf$86105[ebp]
	push	edx
	call	_strcat
	add	esp, 8
	jmp	$LN28@proxy_sock@2
$LN23@proxy_sock@2:
; Line 1139
	push	OFFSET $SG86120
	lea	eax, DWORD PTR _buf$86105[ebp]
	push	eax
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN28@proxy_sock@2
$LN22@proxy_sock@2:
; Line 1140
	push	OFFSET $SG86122
	lea	ecx, DWORD PTR _buf$86105[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN28@proxy_sock@2
$LN21@proxy_sock@2:
; Line 1141
	push	OFFSET $SG86124
	lea	edx, DWORD PTR _buf$86105[ebp]
	push	edx
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN28@proxy_sock@2
$LN20@proxy_sock@2:
; Line 1142
	push	OFFSET $SG86126
	lea	eax, DWORD PTR _buf$86105[ebp]
	push	eax
	call	_strcat
	add	esp, 8
	jmp	SHORT $LN28@proxy_sock@2
$LN19@proxy_sock@2:
; Line 1145
	movsx	ecx, BYTE PTR _data$86099[ebp+1]
	push	ecx
	push	OFFSET $SG86128
	lea	edx, DWORD PTR _buf$86105[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	lea	eax, DWORD PTR _buf$86105[ebp+eax]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN28@proxy_sock@2:
; Line 1148
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	lea	ecx, DWORD PTR _buf$86105[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1150
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN30@proxy_sock@2:
; Line 1156
	mov	DWORD PTR _len$86100[ebp], 6
; Line 1157
	mov	dl, BYTE PTR _data$86099[ebp+3]
	mov	BYTE PTR tv365[ebp], dl
	cmp	BYTE PTR tv365[ebp], 1
	je	SHORT $LN16@proxy_sock@2
	cmp	BYTE PTR tv365[ebp], 3
	je	SHORT $LN14@proxy_sock@2
	cmp	BYTE PTR tv365[ebp], 4
	je	SHORT $LN15@proxy_sock@2
	jmp	SHORT $LN13@proxy_sock@2
$LN16@proxy_sock@2:
; Line 1158
	mov	eax, DWORD PTR _len$86100[ebp]
	add	eax, 4
	mov	DWORD PTR _len$86100[ebp], eax
	jmp	SHORT $LN17@proxy_sock@2
$LN15@proxy_sock@2:
; Line 1159
	mov	ecx, DWORD PTR _len$86100[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _len$86100[ebp], ecx
	jmp	SHORT $LN17@proxy_sock@2
$LN14@proxy_sock@2:
; Line 1160
	movzx	edx, BYTE PTR _data$86099[ebp+4]
	add	edx, DWORD PTR _len$86100[ebp]
	mov	DWORD PTR _len$86100[ebp], edx
	jmp	SHORT $LN17@proxy_sock@2
$LN13@proxy_sock@2:
; Line 1164
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86138
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1165
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN17@proxy_sock@2:
; Line 1167
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_bufchain_size
	add	esp, 4
	cmp	eax, DWORD PTR _len$86100[ebp]
	jge	SHORT $LN12@proxy_sock@2
; Line 1168
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN12@proxy_sock@2:
; Line 1169
	mov	ecx, DWORD PTR _len$86100[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_bufchain_consume
	add	esp, 8
; Line 1172
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_proxy_activate
	add	esp, 4
; Line 1173
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN33@proxy_sock@2:
; Line 1176
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], 4
	jne	SHORT $LN11@proxy_sock@2
; Line 1179
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86141
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1180
	mov	eax, 1
	jmp	$LN64@proxy_sock@2
$LN11@proxy_sock@2:
; Line 1183
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+68], 5
	jne	$LN10@proxy_sock@2
; Line 1184
	push	16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _username$86143[ebp], eax
; Line 1185
	push	17					; 00000011H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _password$86144[ebp], eax
; Line 1186
	mov	ecx, DWORD PTR _username$86143[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN8@proxy_sock@2
	mov	eax, DWORD PTR _password$86144[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN9@proxy_sock@2
$LN8@proxy_sock@2:
; Line 1189
	mov	edx, DWORD PTR _username$86143[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _ulen$86148[ebp], eax
; Line 1190
	cmp	DWORD PTR _ulen$86148[ebp], 255		; 000000ffH
	jle	SHORT $LN7@proxy_sock@2
	mov	DWORD PTR _ulen$86148[ebp], 255		; 000000ffH
$LN7@proxy_sock@2:
	cmp	DWORD PTR _ulen$86148[ebp], 1
	jge	SHORT $LN6@proxy_sock@2
	mov	DWORD PTR _ulen$86148[ebp], 1
$LN6@proxy_sock@2:
; Line 1191
	mov	eax, DWORD PTR _password$86144[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _plen$86149[ebp], eax
; Line 1192
	cmp	DWORD PTR _plen$86149[ebp], 255		; 000000ffH
	jle	SHORT $LN5@proxy_sock@2
	mov	DWORD PTR _plen$86149[ebp], 255		; 000000ffH
$LN5@proxy_sock@2:
	cmp	DWORD PTR _plen$86149[ebp], 1
	jge	SHORT $LN4@proxy_sock@2
	mov	DWORD PTR _plen$86149[ebp], 1
$LN4@proxy_sock@2:
; Line 1193
	mov	BYTE PTR _userpwbuf$86147[ebp], 1
; Line 1194
	mov	cl, BYTE PTR _ulen$86148[ebp]
	mov	BYTE PTR _userpwbuf$86147[ebp+1], cl
; Line 1195
	mov	edx, DWORD PTR _ulen$86148[ebp]
	push	edx
	mov	eax, DWORD PTR _username$86143[ebp]
	push	eax
	lea	ecx, DWORD PTR _userpwbuf$86147[ebp+2]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1196
	mov	edx, DWORD PTR _ulen$86148[ebp]
	mov	al, BYTE PTR _plen$86149[ebp]
	mov	BYTE PTR _userpwbuf$86147[ebp+edx+2], al
; Line 1197
	mov	ecx, DWORD PTR _plen$86149[ebp]
	push	ecx
	mov	edx, DWORD PTR _password$86144[ebp]
	push	edx
	mov	eax, DWORD PTR _ulen$86148[ebp]
	lea	ecx, DWORD PTR _userpwbuf$86147[ebp+eax+3]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1198
	mov	edx, DWORD PTR _plen$86149[ebp]
	mov	eax, DWORD PTR _ulen$86148[ebp]
	lea	ecx, DWORD PTR [eax+edx+3]
	mov	esi, esp
	push	ecx
	lea	edx, DWORD PTR _userpwbuf$86147[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1199
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 7
; Line 1200
	jmp	SHORT $LN3@proxy_sock@2
$LN9@proxy_sock@2:
; Line 1204
	mov	esi, esp
	push	0
	push	8000					; 00001f40H
	push	OFFSET $SG86155
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@proxy_sock@2:
; Line 1205
	mov	eax, 1
	jmp	SHORT $LN64@proxy_sock@2
$LN10@proxy_sock@2:
; Line 1208
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], 6
	jne	SHORT $LN56@proxy_sock@2
; Line 1210
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_proxy_socks5_selectchap
	add	esp, 4
	mov	DWORD PTR _ret$86157[ebp], eax
; Line 1211
	cmp	DWORD PTR _ret$86157[ebp], 0
	je	SHORT $LN56@proxy_sock@2
	mov	eax, DWORD PTR _ret$86157[ebp]
	jmp	SHORT $LN64@proxy_sock@2
$LN56@proxy_sock@2:
; Line 1217
	mov	esi, esp
	push	0
	push	8001					; 00001f41H
	push	OFFSET $SG86159
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1218
	mov	eax, 1
$LN64@proxy_sock@2:
; Line 1219
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN76@proxy_sock@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1432				; 00000598H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN76@proxy_sock@2:
	DD	8
	DD	$LN75@proxy_sock@2
$LN75@proxy_sock@2:
	DD	-16					; fffffff0H
	DD	5
	DD	$LN67@proxy_sock@2
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN68@proxy_sock@2
	DD	-48					; ffffffd0H
	DD	2
	DD	$LN69@proxy_sock@2
	DD	-60					; ffffffc4H
	DD	2
	DD	$LN70@proxy_sock@2
	DD	-584					; fffffdb8H
	DD	512					; 00000200H
	DD	$LN71@proxy_sock@2
	DD	-608					; fffffda0H
	DD	5
	DD	$LN72@proxy_sock@2
	DD	-876					; fffffc94H
	DD	256					; 00000100H
	DD	$LN73@proxy_sock@2
	DD	-1408					; fffffa80H
	DD	513					; 00000201H
	DD	$LN74@proxy_sock@2
$LN74@proxy_sock@2:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	112					; 00000070H
	DB	119					; 00000077H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN73@proxy_sock@2:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN72@proxy_sock@2:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN71@proxy_sock@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN70@proxy_sock@2:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN69@proxy_sock@2:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN68@proxy_sock@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN67@proxy_sock@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
	npad	3
$LN77@proxy_sock@2:
	DD	$LN27@proxy_sock@2
	DD	$LN26@proxy_sock@2
	DD	$LN25@proxy_sock@2
	DD	$LN24@proxy_sock@2
	DD	$LN23@proxy_sock@2
	DD	$LN22@proxy_sock@2
	DD	$LN21@proxy_sock@2
	DD	$LN20@proxy_sock@2
_proxy_socks5_negotiate ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_format_telnet_command
EXTRN	_saferealloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv144 = -676						; size = 4
_pplen$86345 = -672					; size = 4
_pport$86344 = -664					; size = 50
_port$86343 = -608					; size = 4
_phlen$86332 = -604					; size = 4
_host$86331 = -600					; size = 4
_passlen$86320 = -596					; size = 4
_password$86319 = -592					; size = 4
_userlen$86308 = -588					; size = 4
_username$86307 = -584					; size = 4
_portlen$86295 = -577					; size = 1
_portstr$86294 = -572					; size = 8
_destlen$86283 = -560					; size = 4
_dest$86282 = -552					; size = 512
_i$86237 = -36						; size = 4
_v$86236 = -29						; size = 1
_eo$ = -28						; size = 4
_so$ = -24						; size = 4
_retsize$ = -20						; size = 4
_retlen$ = -16						; size = 4
_ret$ = -12						; size = 4
_fmt$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_addr$ = 8						; size = 4
_port$ = 12						; size = 4
_conf$ = 16						; size = 4
_format_telnet_command PROC
; Line 1231
	push	ebp
	mov	ebp, esp
	sub	esp, 676				; 000002a4H
	push	edi
	lea	edi, DWORD PTR [ebp-676]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1232
	push	18					; 00000012H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _fmt$[ebp], eax
; Line 1233
	mov	DWORD PTR _ret$[ebp], 0
; Line 1234
	mov	DWORD PTR _retlen$[ebp], 0
	mov	DWORD PTR _retsize$[ebp], 0
; Line 1235
	mov	DWORD PTR _so$[ebp], 0
	mov	DWORD PTR _eo$[ebp], 0
$LN118@format_tel:
; Line 1247
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN117@format_tel
$LN116@format_tel:
; Line 1251
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _eo$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN115@format_tel
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN115@format_tel
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 92					; 0000005cH
	je	SHORT $LN115@format_tel
; Line 1252
	mov	eax, DWORD PTR _eo$[ebp]
	add	eax, 1
	mov	DWORD PTR _eo$[ebp], eax
	jmp	SHORT $LN116@format_tel
$LN115@format_tel:
; Line 1255
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN114@format_tel
	jmp	$LN117@format_tel
$LN114@format_tel:
; Line 1259
	mov	eax, DWORD PTR _eo$[ebp]
	cmp	eax, DWORD PTR _so$[ebp]
	je	SHORT $LN113@format_tel
$LN112@format_tel:
; Line 1260
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	sub	ecx, DWORD PTR _so$[ebp]
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN111@format_tel
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	sub	edx, DWORD PTR _so$[ebp]
	add	edx, 512				; 00000200H
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN111@format_tel:
	xor	edx, edx
	jne	SHORT $LN112@format_tel
; Line 1261
	mov	eax, DWORD PTR _eo$[ebp]
	sub	eax, DWORD PTR _so$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _so$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1262
	mov	eax, DWORD PTR _eo$[ebp]
	sub	eax, DWORD PTR _so$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
$LN113@format_tel:
; Line 1265
	mov	ecx, DWORD PTR _eo$[ebp]
	mov	DWORD PTR _so$[ebp], ecx
	mov	edx, DWORD PTR _eo$[ebp]
	add	edx, 1
	mov	DWORD PTR _eo$[ebp], edx
; Line 1269
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _eo$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN108@format_tel
	jmp	$LN117@format_tel
$LN108@format_tel:
; Line 1271
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _so$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 92					; 0000005cH
	jne	$LN107@format_tel
; Line 1277
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv144[ebp], edx
	mov	eax, DWORD PTR tv144[ebp]
	sub	eax, 37					; 00000025H
	mov	DWORD PTR tv144[ebp], eax
	cmp	DWORD PTR tv144[ebp], 83		; 00000053H
	ja	$LN60@format_tel
	mov	ecx, DWORD PTR tv144[ebp]
	movzx	edx, BYTE PTR $LN121@format_tel[ecx]
	jmp	DWORD PTR $LN127@format_tel[edx*4]
$LN103@format_tel:
; Line 1280
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 1
	cmp	DWORD PTR _retsize$[ebp], eax
	jge	SHORT $LN102@format_tel
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], ecx
	push	1
	mov	edx, DWORD PTR _retsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN102@format_tel:
	xor	ecx, ecx
	jne	SHORT $LN103@format_tel
; Line 1281
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [edx], 92			; 0000005cH
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 1
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1282
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 1
	mov	DWORD PTR _eo$[ebp], ecx
; Line 1283
	jmp	$LN105@format_tel
$LN98@format_tel:
; Line 1286
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN97@format_tel
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _retsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN97@format_tel:
	xor	eax, eax
	jne	SHORT $LN98@format_tel
; Line 1287
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [ecx], 37			; 00000025H
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	mov	DWORD PTR _retlen$[ebp], edx
; Line 1288
	mov	eax, DWORD PTR _eo$[ebp]
	add	eax, 1
	mov	DWORD PTR _eo$[ebp], eax
; Line 1289
	jmp	$LN105@format_tel
$LN93@format_tel:
; Line 1292
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 1
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN92@format_tel
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN92@format_tel:
	xor	edx, edx
	jne	SHORT $LN93@format_tel
; Line 1293
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [eax], 13			; 0000000dH
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _retlen$[ebp], ecx
; Line 1294
	mov	edx, DWORD PTR _eo$[ebp]
	add	edx, 1
	mov	DWORD PTR _eo$[ebp], edx
; Line 1295
	jmp	$LN105@format_tel
$LN88@format_tel:
; Line 1298
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 1
	cmp	DWORD PTR _retsize$[ebp], eax
	jge	SHORT $LN87@format_tel
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], ecx
	push	1
	mov	edx, DWORD PTR _retsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN87@format_tel:
	xor	ecx, ecx
	jne	SHORT $LN88@format_tel
; Line 1299
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [edx], 10			; 0000000aH
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 1
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1300
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 1
	mov	DWORD PTR _eo$[ebp], ecx
; Line 1301
	jmp	$LN105@format_tel
$LN83@format_tel:
; Line 1304
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN82@format_tel
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _retsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN82@format_tel:
	xor	eax, eax
	jne	SHORT $LN83@format_tel
; Line 1305
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [ecx], 9
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	mov	DWORD PTR _retlen$[ebp], edx
; Line 1306
	mov	eax, DWORD PTR _eo$[ebp]
	add	eax, 1
	mov	DWORD PTR _eo$[ebp], eax
; Line 1307
	jmp	$LN105@format_tel
$LN79@format_tel:
; Line 1313
	mov	BYTE PTR _v$86236[ebp], 0
; Line 1314
	mov	DWORD PTR _i$86237[ebp], 0
$LN78@format_tel:
; Line 1317
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 1
	mov	DWORD PTR _eo$[ebp], ecx
; Line 1318
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN76@format_tel
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN76@format_tel
; Line 1319
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _eo$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _v$86236[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	BYTE PTR _v$86236[ebp], al
	jmp	$LN75@format_tel
$LN76@format_tel:
; Line 1320
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN74@format_tel
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _eo$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN74@format_tel
; Line 1321
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	movsx	eax, BYTE PTR [edx]
	movzx	ecx, BYTE PTR _v$86236[ebp]
	lea	edx, DWORD PTR [ecx+eax-87]
	mov	BYTE PTR _v$86236[ebp], dl
	jmp	SHORT $LN75@format_tel
$LN74@format_tel:
; Line 1322
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _eo$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN70@format_tel
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN70@format_tel
; Line 1323
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	movsx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _v$86236[ebp]
	lea	ecx, DWORD PTR [eax+edx-55]
	mov	BYTE PTR _v$86236[ebp], cl
; Line 1324
	jmp	SHORT $LN75@format_tel
$LN70@format_tel:
; Line 1328
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN69@format_tel
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _retsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN69@format_tel:
	xor	eax, eax
	jne	SHORT $LN70@format_tel
; Line 1329
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [ecx], 92			; 0000005cH
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	mov	DWORD PTR _retlen$[ebp], edx
; Line 1330
	mov	eax, DWORD PTR _so$[ebp]
	add	eax, 1
	mov	DWORD PTR _eo$[ebp], eax
; Line 1331
	jmp	SHORT $LN77@format_tel
$LN75@format_tel:
; Line 1335
	cmp	DWORD PTR _i$86237[ebp], 1
	jne	SHORT $LN66@format_tel
$LN65@format_tel:
; Line 1336
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 1
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN64@format_tel
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN64@format_tel:
	xor	edx, edx
	jne	SHORT $LN65@format_tel
; Line 1337
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	cl, BYTE PTR _v$86236[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	mov	DWORD PTR _retlen$[ebp], edx
; Line 1338
	mov	eax, DWORD PTR _eo$[ebp]
	add	eax, 1
	mov	DWORD PTR _eo$[ebp], eax
; Line 1339
	jmp	SHORT $LN77@format_tel
$LN66@format_tel:
; Line 1342
	mov	ecx, DWORD PTR _i$86237[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$86237[ebp], ecx
; Line 1343
	mov	dl, BYTE PTR _v$86236[ebp]
	shl	dl, 4
	mov	BYTE PTR _v$86236[ebp], dl
; Line 1344
	jmp	$LN78@format_tel
$LN77@format_tel:
; Line 1346
	jmp	SHORT $LN105@format_tel
$LN60@format_tel:
; Line 1349
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 2
	cmp	DWORD PTR _retsize$[ebp], eax
	jge	SHORT $LN59@format_tel
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 514				; 00000202H
	mov	DWORD PTR _retsize$[ebp], ecx
	push	1
	mov	edx, DWORD PTR _retsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN59@format_tel:
	xor	ecx, ecx
	jne	SHORT $LN60@format_tel
; Line 1350
	push	2
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _so$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1351
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 2
	mov	DWORD PTR _retlen$[ebp], ecx
; Line 1352
	mov	edx, DWORD PTR _eo$[ebp]
	add	edx, 1
	mov	DWORD PTR _eo$[ebp], edx
$LN105@format_tel:
; Line 1355
	jmp	$LN56@format_tel
$LN107@format_tel:
; Line 1362
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _eo$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 37					; 00000025H
	jne	SHORT $LN55@format_tel
$LN54@format_tel:
; Line 1363
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN53@format_tel
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], eax
	push	1
	mov	ecx, DWORD PTR _retsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN53@format_tel:
	xor	eax, eax
	jne	SHORT $LN54@format_tel
; Line 1364
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [ecx], 37			; 00000025H
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 1
	mov	DWORD PTR _retlen$[ebp], edx
; Line 1365
	mov	eax, DWORD PTR _eo$[ebp]
	add	eax, 1
	mov	DWORD PTR _eo$[ebp], eax
	jmp	$LN56@format_tel
$LN55@format_tel:
; Line 1367
	push	4
	push	OFFSET $SG86281
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN49@format_tel
; Line 1370
	push	512					; 00000200H
	lea	edx, DWORD PTR _dest$86282[ebp]
	push	edx
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 1371
	lea	ecx, DWORD PTR _dest$86282[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _destlen$86283[ebp], eax
$LN48@format_tel:
; Line 1372
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _destlen$86283[ebp]
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN47@format_tel
	mov	eax, DWORD PTR _destlen$86283[ebp]
	mov	ecx, DWORD PTR _retlen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+512]
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN47@format_tel:
	xor	edx, edx
	jne	SHORT $LN48@format_tel
; Line 1373
	mov	eax, DWORD PTR _destlen$86283[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$86282[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1374
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, DWORD PTR _destlen$86283[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1375
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 4
	mov	DWORD PTR _eo$[ebp], ecx
	jmp	$LN56@format_tel
$LN49@format_tel:
; Line 1377
	push	4
	push	OFFSET $SG86293
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN43@format_tel
; Line 1379
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	push	OFFSET $SG86296
	lea	ecx, DWORD PTR _portstr$86294[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _portlen$86295[ebp], al
$LN42@format_tel:
; Line 1380
	movsx	edx, BYTE PTR _portlen$86295[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN41@format_tel
	movsx	eax, BYTE PTR _portlen$86295[ebp]
	mov	ecx, DWORD PTR _retlen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+512]
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN41@format_tel:
	xor	edx, edx
	jne	SHORT $LN42@format_tel
; Line 1381
	movsx	eax, BYTE PTR _portlen$86295[ebp]
	push	eax
	lea	ecx, DWORD PTR _portstr$86294[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1382
	movsx	eax, BYTE PTR _portlen$86295[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1383
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 4
	mov	DWORD PTR _eo$[ebp], ecx
	jmp	$LN56@format_tel
$LN43@format_tel:
; Line 1385
	push	4
	push	OFFSET $SG86306
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN37@format_tel
; Line 1386
	push	16					; 00000010H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _username$86307[ebp], eax
; Line 1387
	mov	ecx, DWORD PTR _username$86307[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _userlen$86308[ebp], eax
$LN36@format_tel:
; Line 1388
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _userlen$86308[ebp]
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN35@format_tel
	mov	eax, DWORD PTR _userlen$86308[ebp]
	mov	ecx, DWORD PTR _retlen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+512]
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN35@format_tel:
	xor	edx, edx
	jne	SHORT $LN36@format_tel
; Line 1389
	mov	eax, DWORD PTR _userlen$86308[ebp]
	push	eax
	mov	ecx, DWORD PTR _username$86307[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1390
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, DWORD PTR _userlen$86308[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1391
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 4
	mov	DWORD PTR _eo$[ebp], ecx
	jmp	$LN56@format_tel
$LN37@format_tel:
; Line 1393
	push	4
	push	OFFSET $SG86318
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN31@format_tel
; Line 1394
	push	17					; 00000011H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _password$86319[ebp], eax
; Line 1395
	mov	ecx, DWORD PTR _password$86319[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _passlen$86320[ebp], eax
$LN30@format_tel:
; Line 1396
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _passlen$86320[ebp]
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN29@format_tel
	mov	eax, DWORD PTR _passlen$86320[ebp]
	mov	ecx, DWORD PTR _retlen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+512]
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN29@format_tel:
	xor	edx, edx
	jne	SHORT $LN30@format_tel
; Line 1397
	mov	eax, DWORD PTR _passlen$86320[ebp]
	push	eax
	mov	ecx, DWORD PTR _password$86319[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1398
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, DWORD PTR _passlen$86320[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1399
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 4
	mov	DWORD PTR _eo$[ebp], ecx
	jmp	$LN56@format_tel
$LN31@format_tel:
; Line 1401
	push	9
	push	OFFSET $SG86330
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN25@format_tel
; Line 1402
	push	14					; 0000000eH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _host$86331[ebp], eax
; Line 1403
	mov	ecx, DWORD PTR _host$86331[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _phlen$86332[ebp], eax
$LN24@format_tel:
; Line 1404
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _phlen$86332[ebp]
	cmp	DWORD PTR _retsize$[ebp], edx
	jge	SHORT $LN23@format_tel
	mov	eax, DWORD PTR _phlen$86332[ebp]
	mov	ecx, DWORD PTR _retlen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+512]
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN23@format_tel:
	xor	edx, edx
	jne	SHORT $LN24@format_tel
; Line 1405
	mov	eax, DWORD PTR _phlen$86332[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$86331[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1406
	mov	eax, DWORD PTR _retlen$[ebp]
	add	eax, DWORD PTR _phlen$86332[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
; Line 1407
	mov	ecx, DWORD PTR _eo$[ebp]
	add	ecx, 9
	mov	DWORD PTR _eo$[ebp], ecx
	jmp	$LN56@format_tel
$LN25@format_tel:
; Line 1409
	push	9
	push	OFFSET $SG86342
	mov	edx, DWORD PTR _fmt$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN13@format_tel
; Line 1410
	push	15					; 0000000fH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _port$86343[ebp], eax
; Line 1413
	mov	ecx, DWORD PTR _port$86343[ebp]
	push	ecx
	push	OFFSET $SG86346
	lea	edx, DWORD PTR _pport$86344[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1414
	lea	eax, DWORD PTR _pport$86344[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _pplen$86345[ebp], eax
$LN18@format_tel:
; Line 1415
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, DWORD PTR _pplen$86345[ebp]
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN17@format_tel
	mov	edx, DWORD PTR _pplen$86345[ebp]
	mov	eax, DWORD PTR _retlen$[ebp]
	lea	ecx, DWORD PTR [eax+edx+512]
	mov	DWORD PTR _retsize$[ebp], ecx
	push	1
	mov	edx, DWORD PTR _retsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN17@format_tel:
	xor	ecx, ecx
	jne	SHORT $LN18@format_tel
; Line 1416
	mov	edx, DWORD PTR _pplen$86345[ebp]
	push	edx
	lea	eax, DWORD PTR _pport$86344[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _retlen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1417
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _pplen$86345[ebp]
	mov	DWORD PTR _retlen$[ebp], edx
; Line 1418
	mov	eax, DWORD PTR _eo$[ebp]
	add	eax, 9
	mov	DWORD PTR _eo$[ebp], eax
; Line 1420
	jmp	SHORT $LN56@format_tel
$LN13@format_tel:
; Line 1425
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 1
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN12@format_tel
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN12@format_tel:
	xor	edx, edx
	jne	SHORT $LN13@format_tel
; Line 1426
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _retlen$[ebp], ecx
$LN56@format_tel:
; Line 1431
	mov	edx, DWORD PTR _eo$[ebp]
	mov	DWORD PTR _so$[ebp], edx
; Line 1432
	jmp	$LN118@format_tel
$LN117@format_tel:
; Line 1435
	mov	eax, DWORD PTR _eo$[ebp]
	cmp	eax, DWORD PTR _so$[ebp]
	je	SHORT $LN4@format_tel
$LN8@format_tel:
; Line 1436
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, DWORD PTR _eo$[ebp]
	sub	ecx, DWORD PTR _so$[ebp]
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN7@format_tel
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, DWORD PTR _eo$[ebp]
	sub	edx, DWORD PTR _so$[ebp]
	add	edx, 512				; 00000200H
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN7@format_tel:
	xor	edx, edx
	jne	SHORT $LN8@format_tel
; Line 1437
	mov	eax, DWORD PTR _eo$[ebp]
	sub	eax, DWORD PTR _so$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	add	ecx, DWORD PTR _so$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _retlen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1438
	mov	eax, DWORD PTR _eo$[ebp]
	sub	eax, DWORD PTR _so$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	DWORD PTR _retlen$[ebp], eax
$LN4@format_tel:
; Line 1441
	mov	ecx, DWORD PTR _retlen$[ebp]
	add	ecx, 1
	cmp	DWORD PTR _retsize$[ebp], ecx
	jge	SHORT $LN3@format_tel
	mov	edx, DWORD PTR _retlen$[ebp]
	add	edx, 513				; 00000201H
	mov	DWORD PTR _retsize$[ebp], edx
	push	1
	mov	eax, DWORD PTR _retsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN3@format_tel:
	xor	edx, edx
	jne	SHORT $LN4@format_tel
; Line 1442
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _retlen$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1443
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1446
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN126@format_tel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 676				; 000002a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN126@format_tel:
	DD	3
	DD	$LN125@format_tel
$LN125@format_tel:
	DD	-552					; fffffdd8H
	DD	512					; 00000200H
	DD	$LN122@format_tel
	DD	-572					; fffffdc4H
	DD	8
	DD	$LN123@format_tel
	DD	-664					; fffffd68H
	DD	50					; 00000032H
	DD	$LN124@format_tel
$LN124@format_tel:
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN123@format_tel:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN122@format_tel:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN127@format_tel:
	DD	$LN98@format_tel
	DD	$LN79@format_tel
	DD	$LN103@format_tel
	DD	$LN88@format_tel
	DD	$LN93@format_tel
	DD	$LN83@format_tel
	DD	$LN60@format_tel
$LN121@format_tel:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	1
_format_telnet_command ENDP
; Function compile flags: /Odtp /RTCsu
_formatted_cmd$86383 = -4				; size = 4
_p$ = 8							; size = 4
_change$ = 12						; size = 4
_proxy_telnet_negotiate PROC
; Line 1449
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1450
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], -1
	jne	SHORT $LN5@proxy_teln
; Line 1454
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_format_telnet_command
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _formatted_cmd$86383[ebp], eax
; Line 1456
	mov	ecx, DWORD PTR _formatted_cmd$86383[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _formatted_cmd$86383[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1457
	mov	eax, DWORD PTR _formatted_cmd$86383[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1459
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+68], 1
; Line 1460
	xor	eax, eax
	jmp	$LN6@proxy_teln
$LN5@proxy_teln:
; Line 1463
	cmp	DWORD PTR _change$[ebp], 0
	jne	SHORT $LN4@proxy_teln
; Line 1472
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@proxy_teln
$LN4@proxy_teln:
; Line 1475
	cmp	DWORD PTR _change$[ebp], 1
	jne	SHORT $LN3@proxy_teln
; Line 1481
	xor	eax, eax
	jmp	$LN6@proxy_teln
$LN3@proxy_teln:
; Line 1484
	cmp	DWORD PTR _change$[ebp], 3
	jne	SHORT $LN2@proxy_teln
; Line 1491
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@proxy_teln
$LN2@proxy_teln:
; Line 1494
	cmp	DWORD PTR _change$[ebp], 2
	jne	SHORT $LN1@proxy_teln
; Line 1500
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_proxy_activate
	add	esp, 4
; Line 1503
	mov	eax, 1
	jmp	SHORT $LN6@proxy_teln
$LN1@proxy_teln:
; Line 1507
	mov	esi, esp
	push	0
	push	8001					; 00001f41H
	push	OFFSET $SG86388
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1508
	mov	eax, 1
$LN6@proxy_teln:
; Line 1509
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_proxy_telnet_negotiate ENDP
_TEXT	ENDS
END
