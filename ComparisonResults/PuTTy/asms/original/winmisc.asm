; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winmisc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_osVersion:BYTE:094H
_DATA	ENDS
_BSS	SEGMENT
?tried_usernameex@?2??get_username@@9@9 DD 01H DUP (?)	; `get_username'::`3'::tried_usernameex
?sysdir@?1??load_system32_dll@@9@9 DD 01H DUP (?)	; `load_system32_dll'::`2'::sysdir
_errstrings DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG86889 DB	'DISPLAY', 00H
$SG86955 DB	'secur32.dll', 00H
$SG86958 DB	'GetUserNameExA', 00H
	ORG $+1
$SG86997 DB	'\', 00H
	ORG $+2
$SG87037 DB	'(unable to format: FormatMessage returned %d)', 00H
	ORG $+2
$SG87041 DB	'Error %d: %s', 00H
_DATA	ENDS
PUBLIC	_platform_get_x_display
EXTRN	_dupstr:PROC
EXTRN	_getenv:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winmisc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_platform_get_x_display PROC
; Line 13
	push	ebp
	mov	ebp, esp
; Line 15
	push	OFFSET $SG86889
	call	_getenv
	add	esp, 4
	push	eax
	call	_dupstr
	add	esp, 4
; Line 16
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_platform_get_x_display ENDP
_TEXT	ENDS
PUBLIC	_filename_from_str
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_str$ = 8						; size = 4
_filename_from_str PROC
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 20
	push	4
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 21
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 22
	mov	eax, DWORD PTR _ret$[ebp]
; Line 23
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filename_from_str ENDP
_TEXT	ENDS
PUBLIC	_filename_copy
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_filename_copy PROC
; Line 26
	push	ebp
	mov	ebp, esp
; Line 27
	mov	eax, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_filename_from_str
	add	esp, 4
; Line 28
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_filename_copy ENDP
_TEXT	ENDS
PUBLIC	_filename_to_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_filename_to_str PROC
; Line 31
	push	ebp
	mov	ebp, esp
; Line 32
	mov	eax, DWORD PTR _fn$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 33
	pop	ebp
	ret	0
_filename_to_str ENDP
_TEXT	ENDS
PUBLIC	_filename_equal
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f1$ = 8						; size = 4
_f2$ = 12						; size = 4
_filename_equal PROC
; Line 36
	push	ebp
	mov	ebp, esp
; Line 37
	mov	eax, DWORD PTR _f2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _f1$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 38
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_filename_equal ENDP
_TEXT	ENDS
PUBLIC	_filename_is_null
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_filename_is_null PROC
; Line 41
	push	ebp
	mov	ebp, esp
; Line 42
	mov	eax, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx]
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 43
	pop	ebp
	ret	0
_filename_is_null ENDP
_TEXT	ENDS
PUBLIC	_filename_free
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_filename_free PROC
; Line 46
	push	ebp
	mov	ebp, esp
; Line 47
	mov	eax, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 48
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 49
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_filename_free ENDP
_TEXT	ENDS
PUBLIC	_filename_serialise
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_data$ = -4						; size = 4
_f$ = 8							; size = 4
_vdata$ = 12						; size = 4
_filename_serialise PROC
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 53
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 54
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 55
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN1@filename_s
; Line 56
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$LN1@filename_s:
; Line 58
	mov	eax, DWORD PTR _len$[ebp]
; Line 59
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filename_serialise ENDP
_TEXT	ENDS
PUBLIC	_filename_deserialise
EXTRN	_memchr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_end$ = -8						; size = 4
_data$ = -4						; size = 4
_vdata$ = 8						; size = 4
_maxsize$ = 12						; size = 4
_used$ = 16						; size = 4
_filename_deserialise PROC
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 62
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 64
	mov	ecx, DWORD PTR _maxsize$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_memchr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _end$[ebp], eax
; Line 65
	cmp	DWORD PTR _end$[ebp], 0
	jne	SHORT $LN1@filename_d
; Line 66
	xor	eax, eax
	jmp	SHORT $LN2@filename_d
$LN1@filename_d:
; Line 67
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 68
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR _used$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 69
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_filename_from_str
	add	esp, 4
$LN2@filename_d:
; Line 70
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filename_deserialise ENDP
_TEXT	ENDS
PUBLIC	_RtlSecureZeroMemory
PUBLIC	_smemclr
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = 8							; size = 4
_n$ = 12						; size = 4
_smemclr PROC
; Line 76
	push	ebp
	mov	ebp, esp
; Line 77
	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN2@smemclr
	cmp	DWORD PTR _n$[ebp], 0
	jbe	SHORT $LN2@smemclr
; Line 78
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_RtlSecureZeroMemory
	add	esp, 8
$LN2@smemclr:
; Line 79
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_smemclr ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _RtlSecureZeroMemory
_TEXT	SEGMENT
_vptr$ = -4						; size = 4
_ptr$ = 8						; size = 4
_cnt$ = 12						; size = 4
_RtlSecureZeroMemory PROC				; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winnt.h
; Line 13069
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 13070
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _vptr$[ebp], eax
$LN2@RtlSecureZ:
; Line 13078
	cmp	DWORD PTR _cnt$[ebp], 0
	je	SHORT $LN1@RtlSecureZ
; Line 13079
	mov	ecx, DWORD PTR _vptr$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 13080
	mov	edx, DWORD PTR _vptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _vptr$[ebp], edx
; Line 13081
	mov	eax, DWORD PTR _cnt$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cnt$[ebp], eax
; Line 13082
	jmp	SHORT $LN2@RtlSecureZ
$LN1@RtlSecureZ:
; Line 13086
	mov	eax, DWORD PTR _ptr$[ebp]
; Line 13087
	mov	esp, ebp
	pop	ebp
	ret	0
_RtlSecureZeroMemory ENDP
_TEXT	ENDS
PUBLIC	_load_system32_dll
PUBLIC	_get_username
EXTRN	__imp__GetUserNameA@8:PROC
EXTRN	_strchr:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_UninitUse:PROC
_BSS	SEGMENT
?p_GetUserNameExA@?1??get_username@@9@9 DD 01H DUP (?)	; `get_username'::`2'::p_GetUserNameExA
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv136 = -40						; size = 4
tv71 = -36						; size = 4
$T87165 = -29						; size = 1
_p$86965 = -28						; size = 4
_secur32$86954 = -24					; size = 4
_got_username$ = -20					; size = 4
_user$ = -16						; size = 4
_namelen$ = -8						; size = 4
_get_username PROC
; File c:\workspace\putty\windows\winmisc.c
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T87165[ebp], 0
; Line 86
	mov	DWORD PTR _got_username$[ebp], 0
; Line 92
	cmp	DWORD PTR ?tried_usernameex@?2??get_username@@9@9, 0
	jne	SHORT $LN8@get_userna
; Line 94
	push	OFFSET $SG86955
	call	_load_system32_dll
	add	esp, 4
	mov	DWORD PTR _secur32$86954[ebp], eax
; Line 95
	cmp	DWORD PTR _secur32$86954[ebp], 0
	je	SHORT $LN11@get_userna
	mov	esi, esp
	push	OFFSET $SG86958
	mov	eax, DWORD PTR _secur32$86954[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN12@get_userna
$LN11@get_userna:
	mov	DWORD PTR tv71[ebp], 0
$LN12@get_userna:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR ?p_GetUserNameExA@?1??get_username@@9@9, ecx
; Line 96
	mov	DWORD PTR ?tried_usernameex@?2??get_username@@9@9, 1
$LN8@get_userna:
; Line 100
	cmp	DWORD PTR ?p_GetUserNameExA@?1??get_username@@9@9, 0
	je	$LN7@get_userna
; Line 108
	mov	DWORD PTR _namelen$[ebp], 0
; Line 109
	mov	esi, esp
	lea	edx, DWORD PTR _namelen$[ebp]
	push	edx
	push	0
	push	8
	call	DWORD PTR ?p_GetUserNameExA@?1??get_username@@9@9
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 111
	push	1
	mov	eax, DWORD PTR _namelen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	BYTE PTR $T87165[ebp], 1
	mov	DWORD PTR _user$[ebp], eax
; Line 112
	cmp	BYTE PTR $T87165[ebp], 0
	jne	SHORT $LN15@get_userna
	push	OFFSET $LN16@get_userna
	call	__RTC_UninitUse
	add	esp, 4
$LN15@get_userna:
	mov	esi, esp
	lea	ecx, DWORD PTR _namelen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _user$[ebp]
	push	edx
	push	8
	call	DWORD PTR ?p_GetUserNameExA@?1??get_username@@9@9
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	mov	DWORD PTR _got_username$[ebp], eax
; Line 113
	cmp	DWORD PTR _got_username$[ebp], 0
	je	SHORT $LN6@get_userna
; Line 114
	cmp	BYTE PTR $T87165[ebp], 0
	jne	SHORT $LN17@get_userna
	push	OFFSET $LN16@get_userna
	call	__RTC_UninitUse
	add	esp, 4
$LN17@get_userna:
	push	64					; 00000040H
	mov	ecx, DWORD PTR _user$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _p$86965[ebp], eax
; Line 115
	cmp	DWORD PTR _p$86965[ebp], 0
	je	SHORT $LN5@get_userna
	mov	edx, DWORD PTR _p$86965[ebp]
	mov	BYTE PTR [edx], 0
$LN5@get_userna:
; Line 116
	jmp	SHORT $LN7@get_userna
$LN6@get_userna:
; Line 117
	cmp	BYTE PTR $T87165[ebp], 0
	jne	SHORT $LN18@get_userna
	push	OFFSET $LN16@get_userna
	call	__RTC_UninitUse
	add	esp, 4
$LN18@get_userna:
	mov	eax, DWORD PTR _user$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN7@get_userna:
; Line 121
	cmp	DWORD PTR _got_username$[ebp], 0
	jne	$LN3@get_userna
; Line 123
	mov	DWORD PTR _namelen$[ebp], 0
; Line 124
	mov	esi, esp
	lea	ecx, DWORD PTR _namelen$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__GetUserNameA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@get_userna
; Line 130
	mov	DWORD PTR _namelen$[ebp], 256		; 00000100H
$LN2@get_userna:
; Line 133
	push	1
	mov	edx, DWORD PTR _namelen$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	BYTE PTR $T87165[ebp], 1
	mov	DWORD PTR _user$[ebp], eax
; Line 134
	cmp	BYTE PTR $T87165[ebp], 0
	jne	SHORT $LN19@get_userna
	push	OFFSET $LN16@get_userna
	call	__RTC_UninitUse
	add	esp, 4
$LN19@get_userna:
	mov	esi, esp
	lea	eax, DWORD PTR _namelen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _user$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetUserNameA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _got_username$[ebp], eax
; Line 135
	cmp	DWORD PTR _got_username$[ebp], 0
	jne	SHORT $LN3@get_userna
; Line 136
	cmp	BYTE PTR $T87165[ebp], 0
	jne	SHORT $LN20@get_userna
	push	OFFSET $LN16@get_userna
	call	__RTC_UninitUse
	add	esp, 4
$LN20@get_userna:
	mov	edx, DWORD PTR _user$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN3@get_userna:
; Line 140
	cmp	DWORD PTR _got_username$[ebp], 0
	je	SHORT $LN13@get_userna
	cmp	BYTE PTR $T87165[ebp], 0
	jne	SHORT $LN21@get_userna
	push	OFFSET $LN16@get_userna
	call	__RTC_UninitUse
	add	esp, 4
$LN21@get_userna:
	mov	eax, DWORD PTR _user$[ebp]
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN14@get_userna
$LN13@get_userna:
	mov	DWORD PTR tv136[ebp], 0
$LN14@get_userna:
	mov	eax, DWORD PTR tv136[ebp]
; Line 141
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@get_userna
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@get_userna:
	DD	1
	DD	$LN23@get_userna
$LN23@get_userna:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@get_userna
$LN22@get_userna:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN16@get_userna:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_get_username ENDP
_TEXT	ENDS
PUBLIC	_init_winver
EXTRN	__imp__GetVersionExA@4:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_init_winver PROC
; Line 144
	push	ebp
	mov	ebp, esp
	push	esi
; Line 145
	push	148					; 00000094H
	push	0
	push	OFFSET _osVersion
	call	_memset
	add	esp, 12					; 0000000cH
; Line 146
	mov	DWORD PTR _osVersion, 148		; 00000094H
; Line 147
	mov	esi, esp
	push	OFFSET _osVersion
	call	DWORD PTR __imp__GetVersionExA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 148
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_init_winver ENDP
_TEXT	ENDS
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	_dupcat:PROC
EXTRN	__imp__GetSystemDirectoryA@8:PROC
EXTRN	_saferealloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$86989 = -16					; size = 4
_size$86988 = -12					; size = 4
_ret$ = -8						; size = 4
_fullpath$ = -4						; size = 4
_libname$ = 8						; size = 4
_load_system32_dll PROC
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 162
	cmp	DWORD PTR ?sysdir@?1??load_system32_dll@@9@9, 0
	jne	SHORT $LN4@load_syste
; Line 163
	mov	DWORD PTR _size$86988[ebp], 0
$LN3@load_syste:
; Line 165
	mov	eax, DWORD PTR _size$86988[ebp]
	imul	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 512				; 00000200H
	mov	DWORD PTR _size$86988[ebp], eax
; Line 166
	push	1
	mov	eax, DWORD PTR _size$86988[ebp]
	push	eax
	mov	ecx, DWORD PTR ?sysdir@?1??load_system32_dll@@9@9
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?sysdir@?1??load_system32_dll@@9@9, eax
; Line 167
	mov	esi, esp
	mov	edx, DWORD PTR _size$86988[ebp]
	push	edx
	mov	eax, DWORD PTR ?sysdir@?1??load_system32_dll@@9@9
	push	eax
	call	DWORD PTR __imp__GetSystemDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$86989[ebp], eax
; Line 168
	mov	ecx, DWORD PTR _len$86989[ebp]
	cmp	ecx, DWORD PTR _size$86988[ebp]
	jge	SHORT $LN3@load_syste
$LN4@load_syste:
; Line 171
	push	0
	mov	edx, DWORD PTR _libname$[ebp]
	push	edx
	push	OFFSET $SG86997
	mov	eax, DWORD PTR ?sysdir@?1??load_system32_dll@@9@9
	push	eax
	call	_dupcat
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullpath$[ebp], eax
; Line 172
	mov	esi, esp
	mov	ecx, DWORD PTR _fullpath$[ebp]
	push	ecx
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 173
	mov	edx, DWORD PTR _fullpath$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 174
	mov	eax, DWORD PTR _ret$[ebp]
; Line 175
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_load_system32_dll ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_win_strerror
EXTRN	_add234:PROC
EXTRN	_dupprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	_find234:PROC
EXTRN	_newtree234:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$87039 = -65556					; size = 4
_msgtext$87029 = -65548					; size = 65536
_es$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_error$ = 8						; size = 4
_win_strerror PROC
; Line 205
	push	ebp
	mov	ebp, esp
	mov	eax, 65556				; 00010014H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-65556]
	mov	ecx, 16389				; 00004005H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 208
	cmp	DWORD PTR _errstrings, 0
	jne	SHORT $LN5@win_strerr
; Line 209
	push	OFFSET _errstring_compare
	call	_newtree234
	add	esp, 4
	mov	DWORD PTR _errstrings, eax
$LN5@win_strerr:
; Line 211
	push	OFFSET _errstring_find
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _errstrings
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _es$[ebp], eax
; Line 213
	cmp	DWORD PTR _es$[ebp], 0
	jne	$LN4@win_strerr
; Line 216
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _es$[ebp], eax
; Line 217
	mov	edx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
; Line 221
	mov	esi, esp
	push	0
	push	65535					; 0000ffffH
	lea	ecx, DWORD PTR _msgtext$87029[ebp]
	push	ecx
	push	1024					; 00000400H
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	push	4608					; 00001200H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@win_strerr
; Line 224
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET $SG87037
	lea	eax, DWORD PTR _msgtext$87029[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 225
	jmp	SHORT $LN2@win_strerr
$LN3@win_strerr:
; Line 226
	lea	ecx, DWORD PTR _msgtext$87029[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$87039[ebp], eax
; Line 227
	cmp	DWORD PTR _len$87039[ebp], 0
	jle	SHORT $LN2@win_strerr
	mov	edx, DWORD PTR _len$87039[ebp]
	movsx	eax, BYTE PTR _msgtext$87029[ebp+edx-1]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN2@win_strerr
; Line 228
	mov	ecx, DWORD PTR _len$87039[ebp]
	mov	BYTE PTR _msgtext$87029[ebp+ecx-1], 0
$LN2@win_strerr:
; Line 230
	lea	edx, DWORD PTR _msgtext$87029[ebp]
	push	edx
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	OFFSET $SG87041
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _es$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 231
	mov	edx, DWORD PTR _es$[ebp]
	push	edx
	mov	eax, DWORD PTR _errstrings
	push	eax
	call	_add234
	add	esp, 8
$LN4@win_strerr:
; Line 234
	mov	ecx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [ecx+4]
; Line 235
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@win_strerr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 65556				; 00010014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@win_strerr:
	DD	1
	DD	$LN9@win_strerr
$LN9@win_strerr:
	DD	-65548					; fffefff4H
	DD	65536					; 00010000H
	DD	$LN8@win_strerr
$LN8@win_strerr:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_win_strerror ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_errstring_find PROC
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 188
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 189
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 190
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN2@errstring_
; Line 191
	or	eax, -1
	jmp	SHORT $LN3@errstring_
$LN2@errstring_:
; Line 192
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN1@errstring_
; Line 193
	mov	eax, 1
	jmp	SHORT $LN3@errstring_
$LN1@errstring_:
; Line 194
	xor	eax, eax
$LN3@errstring_:
; Line 195
	mov	esp, ebp
	pop	ebp
	ret	0
_errstring_find ENDP
; Function compile flags: /Odtp /RTCsu
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_errstring_compare PROC
; Line 197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 198
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 199
	mov	ecx, DWORD PTR _bv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_errstring_find
	add	esp, 8
; Line 200
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_errstring_compare ENDP
_TEXT	ENDS
PUBLIC	_fontspec_new
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f$ = -4						; size = 4
_name$ = 8						; size = 4
_bold$ = 12						; size = 4
_height$ = 16						; size = 4
_charset$ = 20						; size = 4
_fontspec_new PROC
; Line 487
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 488
	push	16					; 00000010H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax
; Line 489
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 490
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR _bold$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 491
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 492
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _charset$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 493
	mov	eax, DWORD PTR _f$[ebp]
; Line 494
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fontspec_new ENDP
_TEXT	ENDS
PUBLIC	_fontspec_copy
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f$ = 8							; size = 4
_fontspec_copy PROC
; Line 496
	push	ebp
	mov	ebp, esp
; Line 497
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fontspec_new
	add	esp, 16					; 00000010H
; Line 498
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_fontspec_copy ENDP
_TEXT	ENDS
PUBLIC	_fontspec_free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f$ = 8							; size = 4
_fontspec_free PROC
; Line 500
	push	ebp
	mov	ebp, esp
; Line 501
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 502
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 503
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_fontspec_free ENDP
_TEXT	ENDS
PUBLIC	_fontspec_serialise
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_data$ = -4						; size = 4
_f$ = 8							; size = 4
_vdata$ = 12						; size = 4
_fontspec_serialise PROC
; Line 505
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 506
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 507
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 508
	cmp	DWORD PTR _data$[ebp], 0
	je	$LN1@fontspec_s
; Line 509
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 510
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+3], dl
; Line 511
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+4], cl
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+5], cl
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+7], dl
; Line 512
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+8], cl
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+9], cl
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx+10], cl
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+11], dl
$LN1@fontspec_s:
; Line 514
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 12					; 0000000cH
; Line 515
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fontspec_serialise ENDP
_TEXT	ENDS
PUBLIC	_fontspec_deserialise
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_end$ = -8						; size = 4
_data$ = -4						; size = 4
_vdata$ = 8						; size = 4
_maxsize$ = 12						; size = 4
_used$ = 16						; size = 4
_fontspec_deserialise PROC
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 518
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 520
	cmp	DWORD PTR _maxsize$[ebp], 13		; 0000000dH
	jge	SHORT $LN2@fontspec_d
; Line 521
	xor	eax, eax
	jmp	$LN3@fontspec_d
$LN2@fontspec_d:
; Line 522
	mov	ecx, DWORD PTR _maxsize$[ebp]
	sub	ecx, 12					; 0000000cH
	push	ecx
	push	0
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_memchr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _end$[ebp], eax
; Line 523
	cmp	DWORD PTR _end$[ebp], 0
	jne	SHORT $LN1@fontspec_d
; Line 524
	xor	eax, eax
	jmp	$LN3@fontspec_d
$LN1@fontspec_d:
; Line 525
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 526
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, DWORD PTR _data$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _used$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 530
	mov	eax, DWORD PTR _end$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _end$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _end$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _end$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	or	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _end$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _end$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _end$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _end$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _end$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _end$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _end$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _end$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_fontspec_new
	add	esp, 16					; 00000010H
$LN3@fontspec_d:
; Line 531
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fontspec_deserialise ENDP
_TEXT	ENDS
END
