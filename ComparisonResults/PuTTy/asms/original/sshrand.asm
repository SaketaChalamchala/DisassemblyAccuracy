; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshrand.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_random_active
_DATA	SEGMENT
COMM	_next_noise_collection:DWORD
_DATA	ENDS
_BSS	SEGMENT
_random_active DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG87174 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87175 DB	'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	'_', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG87180 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87181 DB	'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	'_', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 00H, 00H
_DATA	ENDS
PUBLIC	_random_add_noise
EXTRN	_SHATransform:PROC
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_pool	DB	0510H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshrand.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_noise$ = 8						; size = 4
_length$ = 12						; size = 4
_random_add_noise PROC
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 210
	mov	eax, DWORD PTR _noise$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 213
	cmp	DWORD PTR _random_active, 0
	jne	SHORT $LN7@random_add
; Line 214
	jmp	$LN9@random_add
$LN7@random_add:
; Line 221
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _pool+1288
	cmp	DWORD PTR _length$[ebp], ecx
	jl	$LN6@random_add
; Line 223
	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _pool+1288
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pool+1288
	add	ecx, OFFSET _pool+1224
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 224
	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _pool+1288
	add	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 225
	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _pool+1288
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 226
	push	OFFSET _pool+1224
	push	OFFSET _pool+1204
	call	_SHATransform
	add	esp, 8
; Line 227
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@random_add
$LN4@random_add:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@random_add:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN3@random_add
; Line 228
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _pool[eax+1224]
	mov	edx, DWORD PTR _pool+1200
	movzx	eax, BYTE PTR _pool[edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _pool+1200
	mov	BYTE PTR _pool[ecx], al
	mov	edx, DWORD PTR _pool+1200
	add	edx, 1
	mov	DWORD PTR _pool+1200, edx
; Line 229
	cmp	DWORD PTR _pool+1200, 1200		; 000004b0H
	jl	SHORT $LN2@random_add
; Line 230
	mov	DWORD PTR _pool+1200, 0
$LN2@random_add:
; Line 231
	jmp	SHORT $LN4@random_add
$LN3@random_add:
; Line 232
	cmp	DWORD PTR _pool+1200, 20		; 00000014H
	jge	SHORT $LN1@random_add
; Line 233
	call	_random_stir
$LN1@random_add:
; Line 235
	mov	DWORD PTR _pool+1288, 0
; Line 236
	jmp	$LN7@random_add
$LN6@random_add:
; Line 238
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pool+1288
	add	edx, OFFSET _pool+1224
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 239
	mov	eax, DWORD PTR _pool+1288
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _pool+1288, eax
$LN9@random_add:
; Line 240
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_random_add_noise ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_noise_get_light:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_k$ = -116						; size = 4
_j$ = -112						; size = 4
_i$ = -108						; size = 4
_digest$ = -100						; size = 20
_block$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_random_stir PROC
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 66
	cmp	DWORD PTR _pool+1292, 0
	je	SHORT $LN12@random_sti
; Line 67
	jmp	$LN13@random_sti
$LN12@random_sti:
; Line 68
	mov	DWORD PTR _pool+1292, 1
; Line 70
	push	OFFSET _random_add_noise
	call	_noise_get_light
	add	esp, 4
; Line 96
	push	OFFSET _pool+1224
	push	OFFSET _pool+1204
	call	_SHATransform
	add	esp, 8
; Line 97
	mov	DWORD PTR _pool+1288, 0
; Line 103
	push	20					; 00000014H
	push	OFFSET _pool+1204
	lea	eax, DWORD PTR _digest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 108
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@random_sti
$LN10@random_sti:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@random_sti:
	cmp	DWORD PTR _i$[ebp], 2
	jge	$LN9@random_sti
; Line 116
	push	64					; 00000040H
	push	OFFSET _pool
	lea	edx, DWORD PTR _block$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 125
	mov	DWORD PTR _j$[ebp], 1200		; 000004b0H
$LN8@random_sti:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _j$[ebp], eax
	js	SHORT $LN7@random_sti
; Line 131
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN6@random_sti
$LN5@random_sti:
	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN6@random_sti:
	cmp	DWORD PTR _k$[ebp], 5
	jae	SHORT $LN4@random_sti
; Line 132
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _digest$[ebp+edx*4]
	xor	edx, DWORD PTR _pool[ecx+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _digest$[ebp+eax*4], edx
	jmp	SHORT $LN5@random_sti
$LN4@random_sti:
; Line 138
	lea	ecx, DWORD PTR _block$[ebp]
	push	ecx
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	call	_SHATransform
	add	esp, 8
; Line 144
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN3@random_sti
$LN2@random_sti:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN3@random_sti:
	cmp	DWORD PTR _k$[ebp], 5
	jae	SHORT $LN1@random_sti
; Line 145
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _digest$[ebp+eax*4]
	mov	DWORD PTR _pool[edx+ecx*4], eax
	jmp	SHORT $LN2@random_sti
$LN1@random_sti:
; Line 146
	jmp	SHORT $LN8@random_sti
$LN7@random_sti:
; Line 170
	jmp	$LN10@random_sti
$LN9@random_sti:
; Line 176
	lea	ecx, DWORD PTR _block$[ebp]
	push	ecx
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	call	_SHATransform
	add	esp, 8
; Line 177
	push	20					; 00000014H
	lea	eax, DWORD PTR _digest$[ebp]
	push	eax
	push	OFFSET _pool+1204
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 179
	mov	DWORD PTR _pool+1200, 20		; 00000014H
; Line 181
	mov	DWORD PTR _pool+1292, 0
$LN13@random_sti:
; Line 206
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@random_sti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@random_sti:
	DD	2
	DD	$LN17@random_sti
$LN17@random_sti:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN15@random_sti
	DD	-100					; ffffff9cH
	DD	20					; 00000014H
	DD	$LN16@random_sti
$LN16@random_sti:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN15@random_sti:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_random_stir ENDP
_TEXT	ENDS
PUBLIC	_random_add_heavynoise
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_noise$ = 8						; size = 4
_length$ = 12						; size = 4
_random_add_heavynoise PROC
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 244
	mov	eax, DWORD PTR _noise$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN8@random_add@2:
; Line 247
	cmp	DWORD PTR _length$[ebp], 1200		; 000004b0H
	jl	SHORT $LN7@random_add@2
; Line 248
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@random_add@2
$LN5@random_add@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@random_add@2:
	cmp	DWORD PTR _i$[ebp], 1200		; 000004b0H
	jge	SHORT $LN4@random_add@2
; Line 249
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _pool[ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _pool[eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN5@random_add@2
$LN4@random_add@2:
; Line 250
	call	_random_stir
; Line 251
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 1200				; 000004b0H
	mov	DWORD PTR _length$[ebp], edx
; Line 252
	jmp	SHORT $LN8@random_add@2
$LN7@random_add@2:
; Line 254
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@random_add@2
$LN2@random_add@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@random_add@2:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN1@random_add@2
; Line 255
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _pool[ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _pool[eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN2@random_add@2
$LN1@random_add@2:
; Line 256
	call	_random_stir
; Line 257
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_random_add_heavynoise ENDP
_TEXT	ENDS
PUBLIC	_random_ref
EXTRN	_schedule_timer:PROC
EXTRN	_noise_get_heavy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_random_ref PROC
; Line 287
	push	ebp
	mov	ebp, esp
; Line 288
	cmp	DWORD PTR _random_active, 0
	jne	SHORT $LN1@random_ref
; Line 289
	push	1296					; 00000510H
	push	0
	push	OFFSET _pool
	call	_memset
	add	esp, 12					; 0000000cH
; Line 291
	push	OFFSET _random_add_heavynoise_bitbybit
	call	_noise_get_heavy
	add	esp, 4
; Line 292
	call	_random_stir
; Line 295
	push	OFFSET _pool
	push	OFFSET _random_timer
	push	300000					; 000493e0H
	call	_schedule_timer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _next_noise_collection, eax
$LN1@random_ref:
; Line 297
	mov	eax, DWORD PTR _random_active
	add	eax, 1
	mov	DWORD PTR _random_active, eax
; Line 298
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_random_ref ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_noise$ = 8						; size = 4
_length$ = 12						; size = 4
_random_add_heavynoise_bitbybit PROC
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 261
	mov	eax, DWORD PTR _noise$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN8@random_add@3:
; Line 264
	mov	ecx, 1200				; 000004b0H
	sub	ecx, DWORD PTR _pool+1200
	cmp	DWORD PTR _length$[ebp], ecx
	jl	SHORT $LN7@random_add@3
; Line 265
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@random_add@3
$LN5@random_add@3:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@random_add@3:
	mov	eax, 1200				; 000004b0H
	sub	eax, DWORD PTR _pool+1200
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN4@random_add@3
; Line 266
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _pool+1200
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _pool[eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _pool+1200
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _pool[edx], cl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN5@random_add@3
$LN4@random_add@3:
; Line 267
	call	_random_stir
; Line 268
	mov	ecx, 1200				; 000004b0H
	sub	ecx, DWORD PTR _pool+1200
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 269
	mov	DWORD PTR _pool+1200, 0
; Line 270
	jmp	$LN8@random_add@3
$LN7@random_add@3:
; Line 272
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@random_add@3
$LN2@random_add@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@random_add@3:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN1@random_add@3
; Line 273
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _pool[ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _pool[eax], dl
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN2@random_add@3
$LN1@random_add@3:
; Line 274
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pool+1200, edx
; Line 275
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_random_add_heavynoise_bitbybit ENDP
_TEXT	ENDS
EXTRN	_noise_regular:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_now$ = 12						; size = 4
_random_timer PROC
; Line 278
	push	ebp
	mov	ebp, esp
; Line 279
	cmp	DWORD PTR _random_active, 0
	jle	SHORT $LN2@random_tim
	mov	eax, DWORD PTR _now$[ebp]
	cmp	eax, DWORD PTR _next_noise_collection
	jne	SHORT $LN2@random_tim
; Line 280
	call	_noise_regular
; Line 282
	push	OFFSET _pool
	push	OFFSET _random_timer
	push	300000					; 000493e0H
	call	_schedule_timer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _next_noise_collection, eax
$LN2@random_tim:
; Line 284
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_random_timer ENDP
_TEXT	ENDS
PUBLIC	_random_unref
EXTRN	_expire_timer_context:PROC
EXTRN	_random_save_seed:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_random_unref PROC
; Line 301
	push	ebp
	mov	ebp, esp
; Line 302
	cmp	DWORD PTR _random_active, 0
	jg	SHORT $LN4@random_unr
	push	302					; 0000012eH
	push	OFFSET $SG87174
	push	OFFSET $SG87175
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@random_unr:
; Line 303
	cmp	DWORD PTR _random_active, 1
	jne	SHORT $LN1@random_unr
; Line 304
	call	_random_save_seed
; Line 305
	push	OFFSET _pool
	call	_expire_timer_context
	add	esp, 4
$LN1@random_unr:
; Line 307
	mov	ecx, DWORD PTR _random_active
	sub	ecx, 1
	mov	DWORD PTR _random_active, ecx
; Line 308
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_random_unref ENDP
_TEXT	ENDS
PUBLIC	_random_byte
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -1						; size = 1
_random_byte PROC
; Line 311
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 312
	cmp	DWORD PTR _random_active, 0
	jne	SHORT $LN4@random_byt
	push	312					; 00000138H
	push	OFFSET $SG87180
	push	OFFSET $SG87181
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@random_byt:
; Line 314
	cmp	DWORD PTR _pool+1200, 1200		; 000004b0H
	jl	SHORT $LN1@random_byt
; Line 315
	call	_random_stir
$LN1@random_byt:
; Line 317
	mov	ecx, DWORD PTR _pool+1200
	mov	dl, BYTE PTR _pool[ecx]
	mov	BYTE PTR tv72[ebp], dl
	mov	eax, DWORD PTR _pool+1200
	add	eax, 1
	mov	DWORD PTR _pool+1200, eax
	movzx	eax, BYTE PTR tv72[ebp]
; Line 318
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_random_byte ENDP
_TEXT	ENDS
PUBLIC	_random_get_savedata
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -4						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_random_get_savedata PROC
; Line 321
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 322
	push	1
	push	600					; 00000258H
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buf$[ebp], eax
; Line 323
	call	_random_stir
; Line 324
	push	600					; 00000258H
	mov	eax, DWORD PTR _pool+1200
	add	eax, OFFSET _pool
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 325
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], 600			; 00000258H
; Line 326
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 327
	call	_random_stir
; Line 328
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_random_get_savedata ENDP
_TEXT	ENDS
END
