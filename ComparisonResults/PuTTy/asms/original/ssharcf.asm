; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\ssharcf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh_arcfour128_ssh2
PUBLIC	_ssh_arcfour256_ssh2
PUBLIC	_ssh2_arcfour
CONST	SEGMENT
_ssh_arcfour128_ssh2 DD FLAT:_arcfour_make_context
	DD	FLAT:_arcfour_free_context
	DD	FLAT:_arcfour_iv
	DD	FLAT:_arcfour128_key
	DD	FLAT:_arcfour_block
	DD	FLAT:_arcfour_block
	DD	FLAT:$SG6000
	DD	01H
	DD	080H
	DD	00H
	DD	FLAT:$SG6001
_ssh_arcfour256_ssh2 DD FLAT:_arcfour_make_context
	DD	FLAT:_arcfour_free_context
	DD	FLAT:_arcfour_iv
	DD	FLAT:_arcfour256_key
	DD	FLAT:_arcfour_block
	DD	FLAT:_arcfour_block
	DD	FLAT:$SG6003
	DD	01H
	DD	0100H
	DD	00H
	DD	FLAT:$SG6004
_arcfour_list DD FLAT:_ssh_arcfour256_ssh2
	DD	FLAT:_ssh_arcfour128_ssh2
_ssh2_arcfour DD 02H
	DD	FLAT:_arcfour_list
CONST	ENDS
_DATA	SEGMENT
$SG5953	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, 'c', 00H, 'f', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG5954	DB	'k', 00H, 'e', 00H, 'y', 00H, 'b', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '2'
	DB	00H, '5', 00H, '6', 00H, 00H, 00H
$SG6000	DB	'arcfour128', 00H
	ORG $+1
$SG6001	DB	'Arcfour-128', 00H
$SG6003	DB	'arcfour256', 00H
	ORG $+1
$SG6004	DB	'Arcfour-256', 00H
_DATA	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\ssharcf.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_s$ = -16						; size = 4
_j$ = -11						; size = 1
_i$ = -10						; size = 1
_tmp$ = -9						; size = 1
_k$ = -8						; size = 4
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_arcfour_block PROC
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 16
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 20
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 2
	mov	DWORD PTR _s$[ebp], ecx
; Line 21
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _i$[ebp], al
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR _j$[ebp], dl
; Line 22
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN3@arcfour_bl
$LN2@arcfour_bl:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN3@arcfour_bl:
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	$LN1@arcfour_bl
; Line 23
	movzx	edx, BYTE PTR _i$[ebp]
	add	edx, 1
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _i$[ebp], dl
; Line 24
	movzx	eax, BYTE PTR _j$[ebp]
	movzx	ecx, BYTE PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _j$[ebp], al
; Line 25
	movzx	edx, BYTE PTR _i$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax+edx]
	mov	BYTE PTR _tmp$[ebp], cl
	movzx	edx, BYTE PTR _j$[ebp]
	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [esi+edx]
	mov	BYTE PTR [ecx+eax], dl
	movzx	eax, BYTE PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR _tmp$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 26
	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	movzx	eax, BYTE PTR _j$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	add	edx, eax
	and	edx, 255				; 000000ffH
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	mov	eax, DWORD PTR _blk$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	BYTE PTR [edx], cl
; Line 27
	jmp	$LN2@arcfour_bl
$LN1@arcfour_bl:
; Line 28
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	al, BYTE PTR _j$[ebp]
	mov	BYTE PTR [edx+1], al
; Line 29
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_arcfour_block ENDP
_TEXT	ENDS
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arcfour_make_context PROC
; Line 64
	push	ebp
	mov	ebp, esp
; Line 65
	push	258					; 00000102H
	push	1
	call	_safemalloc
	add	esp, 8
; Line 66
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_arcfour_make_context ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_arcfour_free_context PROC
; Line 69
	push	ebp
	mov	ebp, esp
; Line 70
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 71
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_arcfour_free_context ENDP
; Function compile flags: /Odtp /RTCsu
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_arcfour128_key PROC
; Line 83
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 84
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 85
	push	16					; 00000010H
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_arcfour_setkey
	add	esp, 12					; 0000000cH
; Line 86
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_arcfour_stir
	add	esp, 4
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_arcfour128_key ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__wassert:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$ = -284						; size = 4
_i$ = -280						; size = 4
_s$ = -276						; size = 4
_k$ = -268						; size = 256
_tmp$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_keybytes$ = 16						; size = 4
_arcfour_setkey PROC
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 37
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 38
	cmp	DWORD PTR _keybytes$[ebp], 256		; 00000100H
	jbe	SHORT $LN9@arcfour_se
	push	38					; 00000026H
	push	OFFSET $SG5953
	push	OFFSET $SG5954
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@arcfour_se:
; Line 39
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [edx+1], 0
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [eax], 0
; Line 40
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@arcfour_se
$LN5@arcfour_se:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@arcfour_se:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN4@arcfour_se
; Line 41
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _i$[ebp]
	mov	BYTE PTR [edx], al
; Line 42
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	DWORD PTR _keybytes$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _key$[ebp]
	mov	dl, BYTE PTR [eax+edx]
	mov	BYTE PTR _k$[ebp+ecx], dl
; Line 43
	jmp	SHORT $LN5@arcfour_se
$LN4@arcfour_se:
; Line 44
	mov	DWORD PTR _j$[ebp], 0
; Line 45
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@arcfour_se
$LN2@arcfour_se:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@arcfour_se:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN7@arcfour_se
; Line 46
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _k$[ebp+eax]
	add	edx, ecx
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _j$[ebp], edx
; Line 47
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _tmp$[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	dl, BYTE PTR _tmp$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 48
	jmp	$LN2@arcfour_se
$LN7@arcfour_se:
; Line 49
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@arcfour_se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@arcfour_se:
	DD	1
	DD	$LN11@arcfour_se
$LN11@arcfour_se:
	DD	-268					; fffffef4H
	DD	256					; 00000100H
	DD	$LN10@arcfour_se
$LN10@arcfour_se:
	DB	107					; 0000006bH
	DB	0
_arcfour_setkey ENDP
_TEXT	ENDS
EXTRN	_smemclr:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_junk$ = -4						; size = 4
_ctx$ = 8						; size = 4
_arcfour_stir PROC
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	push	1
	push	1536					; 00000600H
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _junk$[ebp], eax
; Line 76
	push	1536					; 00000600H
	push	0
	mov	eax, DWORD PTR _junk$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 77
	push	1536					; 00000600H
	mov	ecx, DWORD PTR _junk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_arcfour_block
	add	esp, 12					; 0000000cH
; Line 78
	push	1536					; 00000600H
	mov	eax, DWORD PTR _junk$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 79
	mov	ecx, DWORD PTR _junk$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 80
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_arcfour_stir ENDP
; Function compile flags: /Odtp /RTCsu
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_arcfour256_key PROC
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 91
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 92
	push	32					; 00000020H
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_arcfour_setkey
	add	esp, 12					; 0000000cH
; Line 93
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_arcfour_stir
	add	esp, 4
; Line 94
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_arcfour256_key ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_arcfour_iv PROC
; Line 97
	push	ebp
	mov	ebp, esp
; Line 99
	pop	ebp
	ret	0
_arcfour_iv ENDP
_TEXT	ENDS
END
