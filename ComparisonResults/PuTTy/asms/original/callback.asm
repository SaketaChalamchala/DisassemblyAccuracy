; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\callback.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_cbhead
PUBLIC	_cbtail
PUBLIC	_notify_frontend
PUBLIC	_frontend
_BSS	SEGMENT
_cbhead	DD	01H DUP (?)
_cbtail	DD	01H DUP (?)
_notify_frontend DD 01H DUP (?)
_frontend DD	01H DUP (?)
_BSS	ENDS
PUBLIC	_request_callback_notifications
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\callback.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_fn$ = 8						; size = 4
_fr$ = 12						; size = 4
_request_callback_notifications PROC
; Line 24
	push	ebp
	mov	ebp, esp
; Line 25
	mov	eax, DWORD PTR _fn$[ebp]
	mov	DWORD PTR _notify_frontend, eax
; Line 26
	mov	ecx, DWORD PTR _fr$[ebp]
	mov	DWORD PTR _frontend, ecx
; Line 27
	pop	ebp
	ret	0
_request_callback_notifications ENDP
_TEXT	ENDS
PUBLIC	_queue_toplevel_callback
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cb$ = -4						; size = 4
_fn$ = 8						; size = 4
_ctx$ = 12						; size = 4
_queue_toplevel_callback PROC
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 33
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _cb$[ebp], eax
; Line 34
	mov	eax, DWORD PTR _cb$[ebp]
	mov	ecx, DWORD PTR _fn$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 35
	mov	edx, DWORD PTR _cb$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 40
	cmp	DWORD PTR _notify_frontend, 0
	je	SHORT $LN3@queue_topl
	cmp	DWORD PTR _cbhead, 0
	jne	SHORT $LN3@queue_topl
; Line 41
	mov	esi, esp
	mov	ecx, DWORD PTR _frontend
	push	ecx
	call	DWORD PTR _notify_frontend
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@queue_topl:
; Line 43
	cmp	DWORD PTR _cbtail, 0
	je	SHORT $LN2@queue_topl
; Line 44
	mov	edx, DWORD PTR _cbtail
	mov	eax, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [edx], eax
; Line 45
	jmp	SHORT $LN1@queue_topl
$LN2@queue_topl:
; Line 46
	mov	ecx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR _cbhead, ecx
$LN1@queue_topl:
; Line 47
	mov	edx, DWORD PTR _cb$[ebp]
	mov	DWORD PTR _cbtail, edx
; Line 48
	mov	eax, DWORD PTR _cb$[ebp]
	mov	DWORD PTR [eax], 0
; Line 49
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_queue_toplevel_callback ENDP
_TEXT	ENDS
PUBLIC	_run_toplevel_callbacks
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cb$85569 = -4						; size = 4
_run_toplevel_callbacks PROC
; Line 52
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 53
	cmp	DWORD PTR _cbhead, 0
	je	SHORT $LN3@run_toplev
; Line 54
	mov	eax, DWORD PTR _cbhead
	mov	DWORD PTR _cb$85569[ebp], eax
; Line 63
	mov	esi, esp
	mov	ecx, DWORD PTR _cb$85569[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cb$85569[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 64
	mov	edx, DWORD PTR _cb$85569[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cbhead, eax
; Line 65
	mov	ecx, DWORD PTR _cb$85569[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 66
	cmp	DWORD PTR _cbhead, 0
	jne	SHORT $LN3@run_toplev
; Line 67
	mov	DWORD PTR _cbtail, 0
$LN3@run_toplev:
; Line 69
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_run_toplevel_callbacks ENDP
_TEXT	ENDS
PUBLIC	_toplevel_callback_pending
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_toplevel_callback_pending PROC
; Line 72
	push	ebp
	mov	ebp, esp
; Line 73
	xor	eax, eax
	cmp	DWORD PTR _cbhead, 0
	setne	al
; Line 74
	pop	ebp
	ret	0
_toplevel_callback_pending ENDP
_TEXT	ENDS
END
