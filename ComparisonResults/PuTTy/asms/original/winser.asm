; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winser.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_serial_backend
_BSS	SEGMENT
$SG85682 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?specials@?1??serial_get_specials@@9@9 DD FLAT:$SG85760	; `serial_get_specials'::`2'::specials
	DD	01H
	DD	00H
	DD	021H
CONST	ENDS
_DATA	SEGMENT
$SG85573 DB	'End of file reading from serial device', 00H
	ORG $+1
$SG85575 DB	'Error reading from serial device', 00H
	ORG $+3
$SG85576 DB	'%s', 00H
	ORG $+1
$SG85588 DB	'Error writing to serial device', 00H
	ORG $+1
$SG85589 DB	'%s', 00H
	ORG $+1
$SG85604 DB	'Configuring baud rate %d', 00H
	ORG $+3
$SG85605 DB	'Configuring %d data bits', 00H
	ORG $+3
$SG85611 DB	'1', 00H
	ORG $+2
$SG85613 DB	'1.5', 00H
$SG85615 DB	'2', 00H
	ORG $+2
$SG85617 DB	'Invalid number of stop bits (need 1, 1.5 or 2)', 00H
	ORG $+1
$SG85618 DB	'Configuring %s data bits', 00H
	ORG $+3
$SG85624 DB	'no', 00H
	ORG $+1
$SG85626 DB	'odd', 00H
$SG85628 DB	'even', 00H
	ORG $+3
$SG85630 DB	'mark', 00H
	ORG $+3
$SG85632 DB	'space', 00H
	ORG $+2
$SG85633 DB	'Configuring %s parity', 00H
	ORG $+2
$SG85639 DB	'no', 00H
	ORG $+1
$SG85641 DB	'XON/XOFF', 00H
	ORG $+3
$SG85643 DB	'RTS/CTS', 00H
$SG85645 DB	'DSR/DTR', 00H
$SG85646 DB	'Configuring %s flow control', 00H
$SG85648 DB	'Unable to configure serial port', 00H
$SG85650 DB	'Unable to configure serial timeouts', 00H
$SG85680 DB	'Opening serial device %s', 00H
	ORG $+3
$SG85683 DB	'\\.\', 00H
	ORG $+3
$SG85684 DB	'%s%s', 00H
	ORG $+3
$SG85690 DB	'Unable to open serial port', 00H
	ORG $+1
$SG85743 DB	'Finished serial break', 00H
	ORG $+2
$SG85753 DB	'Starting serial break at user request', 00H
	ORG $+2
$SG85760 DB	'Break', 00H
	ORG $+2
$SG85811 DB	'serial', 00H
	ORG $+5
_serial_backend DD FLAT:_serial_init
	DD	FLAT:_serial_free
	DD	FLAT:_serial_reconfig
	DD	FLAT:_serial_send
	DD	FLAT:_serial_sendbuffer
	DD	FLAT:_serial_size
	DD	FLAT:_serial_special
	DD	FLAT:_serial_get_specials
	DD	FLAT:_serial_connected
	DD	FLAT:_serial_exitcode
	DD	FLAT:_serial_sendok
	DD	FLAT:_serial_ldisc
	DD	FLAT:_serial_provide_ldisc
	DD	FLAT:_serial_provide_logctx
	DD	FLAT:_serial_unthrottle
	DD	FLAT:_serial_cfg_info
	DD	FLAT:$SG85811
	DD	04H
	DD	00H
_DATA	ENDS
EXTRN	_update_specials_menu:PROC
EXTRN	_dupstr:PROC
EXTRN	_handle_input_new:PROC
EXTRN	_handle_output_new:PROC
EXTRN	_safefree:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	_strchr:PROC
EXTRN	_logevent:PROC
EXTRN	_dupprintf:PROC
EXTRN	_conf_get_str:PROC
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winser.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv87 = -28						; size = 4
_serfilename$85681 = -24				; size = 4
_msg$85679 = -20					; size = 4
_serline$ = -16						; size = 4
_err$ = -12						; size = 4
_serport$ = -8						; size = 4
_serial$ = -4						; size = 4
_frontend_handle$ = 8					; size = 4
_backend_handle$ = 12					; size = 4
_conf$ = 16						; size = 4
_host$ = 20						; size = 4
_port$ = 24						; size = 4
_realhost$ = 28						; size = 4
_nodelay$ = 32						; size = 4
_keepalive$ = 36					; size = 4
_serial_init PROC
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 210
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _serial$[ebp], eax
; Line 211
	mov	eax, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [eax], -1
; Line 212
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 213
	mov	eax, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 214
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 215
	mov	edx, DWORD PTR _backend_handle$[ebp]
	mov	eax, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [edx], eax
; Line 217
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR _frontend_handle$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 219
	push	55					; 00000037H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _serline$[ebp], eax
; Line 221
	mov	ecx, DWORD PTR _serline$[ebp]
	push	ecx
	push	OFFSET $SG85680
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _msg$85679[ebp], eax
; Line 222
	mov	edx, DWORD PTR _msg$85679[ebp]
	push	edx
	mov	eax, DWORD PTR _serial$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_logevent
	add	esp, 8
; Line 250
	push	92					; 0000005cH
	mov	edx, DWORD PTR _serline$[ebp]
	push	edx
	call	_strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@serial_ini
	mov	DWORD PTR tv87[ebp], OFFSET $SG85682
	jmp	SHORT $LN6@serial_ini
$LN5@serial_ini:
	mov	DWORD PTR tv87[ebp], OFFSET $SG85683
$LN6@serial_ini:
	mov	eax, DWORD PTR _serline$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	push	OFFSET $SG85684
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _serfilename$85681[ebp], eax
; Line 252
	mov	esi, esp
	push	0
	push	1073741824				; 40000000H
	push	3
	push	0
	push	0
	push	-1073741824				; c0000000H
	mov	edx, DWORD PTR _serfilename$85681[ebp]
	push	edx
	call	DWORD PTR __imp__CreateFileA@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _serport$[ebp], eax
; Line 253
	mov	eax, DWORD PTR _serfilename$85681[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 256
	cmp	DWORD PTR _serport$[ebp], -1
	jne	SHORT $LN2@serial_ini
; Line 257
	mov	eax, OFFSET $SG85690
	jmp	$LN3@serial_ini
$LN2@serial_ini:
; Line 259
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _serport$[ebp]
	push	edx
	mov	eax, DWORD PTR _serial$[ebp]
	push	eax
	call	_serial_configure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _err$[ebp], eax
; Line 260
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@serial_ini
; Line 261
	mov	eax, DWORD PTR _err$[ebp]
	jmp	SHORT $LN3@serial_ini
$LN1@serial_ini:
; Line 263
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR _serport$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 265
	push	1
	mov	eax, DWORD PTR _serial$[ebp]
	push	eax
	push	OFFSET _serial_sentdata
	mov	ecx, DWORD PTR _serport$[ebp]
	push	ecx
	call	_handle_output_new
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 269
	push	7
	mov	eax, DWORD PTR _serial$[ebp]
	push	eax
	push	OFFSET _serial_gotdata
	mov	ecx, DWORD PTR _serport$[ebp]
	push	ecx
	call	_handle_input_new
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 271
	mov	eax, DWORD PTR _serline$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _realhost$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 276
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_update_specials_menu
	add	esp, 4
; Line 278
	xor	eax, eax
$LN3@serial_ini:
; Line 279
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_init ENDP
_TEXT	ENDS
EXTRN	_from_backend:PROC
EXTRN	_connection_fatal:PROC
EXTRN	_notify_remote_exit:PROC
EXTRN	_handle_get_privdata:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error_msg$85571 = -8					; size = 4
_serial$ = -4						; size = 4
_h$ = 8							; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_serial_gotdata PROC
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 42
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_handle_get_privdata
	add	esp, 4
	mov	DWORD PTR _serial$[ebp], eax
; Line 43
	cmp	DWORD PTR _len$[ebp], 0
	jg	SHORT $LN4@serial_got
; Line 53
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN3@serial_got
; Line 54
	mov	DWORD PTR _error_msg$85571[ebp], OFFSET $SG85573
; Line 55
	jmp	SHORT $LN2@serial_got
$LN3@serial_got:
; Line 56
	mov	DWORD PTR _error_msg$85571[ebp], OFFSET $SG85575
$LN2@serial_got:
; Line 58
	mov	ecx, DWORD PTR _serial$[ebp]
	push	ecx
	call	_serial_terminate
	add	esp, 4
; Line 60
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_notify_remote_exit
	add	esp, 4
; Line 62
	mov	ecx, DWORD PTR _error_msg$85571[ebp]
	push	ecx
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_logevent
	add	esp, 8
; Line 64
	mov	ecx, DWORD PTR _error_msg$85571[ebp]
	push	ecx
	push	OFFSET $SG85576
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_connection_fatal
	add	esp, 12					; 0000000cH
; Line 66
	xor	eax, eax
	jmp	SHORT $LN5@serial_got
; Line 67
	jmp	SHORT $LN5@serial_got
$LN4@serial_got:
; Line 68
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _serial$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_from_backend
	add	esp, 16					; 00000010H
$LN5@serial_got:
; Line 70
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_gotdata ENDP
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ClearCommBreak@4:PROC
EXTRN	_handle_free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_serial$ = 8						; size = 4
_serial_terminate PROC
; Line 23
	push	ebp
	mov	ebp, esp
	push	esi
; Line 24
	mov	eax, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@serial_ter
; Line 25
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_handle_free
	add	esp, 4
; Line 26
	mov	eax, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@serial_ter:
; Line 28
	mov	ecx, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@serial_ter
; Line 29
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_handle_free
	add	esp, 4
; Line 30
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN3@serial_ter:
; Line 32
	mov	edx, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [edx], -1
	je	SHORT $LN5@serial_ter
; Line 33
	mov	eax, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@serial_ter
; Line 34
	mov	esi, esp
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__ClearCommBreak@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@serial_ter:
; Line 35
	mov	esi, esp
	mov	eax, DWORD PTR _serial$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 36
	mov	edx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [edx], -1
$LN5@serial_ter:
; Line 38
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_serial_terminate ENDP
; Function compile flags: /Odtp /RTCsu
_error_msg$85587 = -8					; size = 4
_serial$ = -4						; size = 4
_h$ = 8							; size = 4
_new_backlog$ = 12					; size = 4
_serial_sentdata PROC
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 74
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_handle_get_privdata
	add	esp, 4
	mov	DWORD PTR _serial$[ebp], eax
; Line 75
	cmp	DWORD PTR _new_backlog$[ebp], 0
	jge	SHORT $LN2@serial_sen
; Line 76
	mov	DWORD PTR _error_msg$85587[ebp], OFFSET $SG85588
; Line 78
	mov	ecx, DWORD PTR _serial$[ebp]
	push	ecx
	call	_serial_terminate
	add	esp, 4
; Line 80
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_notify_remote_exit
	add	esp, 4
; Line 82
	mov	ecx, DWORD PTR _error_msg$85587[ebp]
	push	ecx
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_logevent
	add	esp, 8
; Line 84
	mov	ecx, DWORD PTR _error_msg$85587[ebp]
	push	ecx
	push	OFFSET $SG85589
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_connection_fatal
	add	esp, 12					; 0000000cH
; Line 85
	jmp	SHORT $LN3@serial_sen
$LN2@serial_sen:
; Line 86
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR _new_backlog$[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN3@serial_sen:
; Line 88
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_sentdata ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__SetCommTimeouts@8:PROC
EXTRN	__imp__SetCommState@8:PROC
EXTRN	_conf_get_int:PROC
EXTRN	__imp__GetCommState@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv165 = -88						; size = 4
tv153 = -84						; size = 4
tv139 = -80						; size = 4
_str$85603 = -76					; size = 4
_msg$85602 = -72					; size = 4
_timeouts$ = -64					; size = 20
_dcb$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_serial$ = 8						; size = 4
_serport$ = 12						; size = 4
_conf$ = 16						; size = 4
_serial_configure PROC
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 101
	mov	esi, esp
	lea	eax, DWORD PTR _dcb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _serport$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetCommState@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN22@serial_con
; Line 108
	mov	edx, DWORD PTR _dcb$[ebp+8]
	or	edx, 1
	mov	DWORD PTR _dcb$[ebp+8], edx
; Line 109
	mov	eax, DWORD PTR _dcb$[ebp+8]
	and	eax, -49				; ffffffcfH
	or	eax, 16					; 00000010H
	mov	DWORD PTR _dcb$[ebp+8], eax
; Line 110
	mov	ecx, DWORD PTR _dcb$[ebp+8]
	and	ecx, -65				; ffffffbfH
	mov	DWORD PTR _dcb$[ebp+8], ecx
; Line 111
	mov	edx, DWORD PTR _dcb$[ebp+8]
	and	edx, -129				; ffffff7fH
	mov	DWORD PTR _dcb$[ebp+8], edx
; Line 112
	mov	eax, DWORD PTR _dcb$[ebp+8]
	and	eax, -257				; fffffeffH
	mov	DWORD PTR _dcb$[ebp+8], eax
; Line 113
	mov	ecx, DWORD PTR _dcb$[ebp+8]
	and	ecx, -513				; fffffdffH
	mov	DWORD PTR _dcb$[ebp+8], ecx
; Line 114
	mov	edx, DWORD PTR _dcb$[ebp+8]
	and	edx, -1025				; fffffbffH
	mov	DWORD PTR _dcb$[ebp+8], edx
; Line 115
	mov	eax, DWORD PTR _dcb$[ebp+8]
	and	eax, -2049				; fffff7ffH
	mov	DWORD PTR _dcb$[ebp+8], eax
; Line 116
	mov	ecx, DWORD PTR _dcb$[ebp+8]
	and	ecx, -12289				; ffffcfffH
	or	ecx, 4096				; 00001000H
	mov	DWORD PTR _dcb$[ebp+8], ecx
; Line 117
	mov	edx, DWORD PTR _dcb$[ebp+8]
	and	edx, -16385				; ffffbfffH
	mov	DWORD PTR _dcb$[ebp+8], edx
; Line 118
	mov	eax, DWORD PTR _dcb$[ebp+8]
	and	eax, -5					; fffffffbH
	mov	DWORD PTR _dcb$[ebp+8], eax
; Line 119
	mov	ecx, DWORD PTR _dcb$[ebp+8]
	and	ecx, -9					; fffffff7H
	mov	DWORD PTR _dcb$[ebp+8], ecx
; Line 124
	push	56					; 00000038H
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _dcb$[ebp+4], eax
; Line 125
	mov	eax, DWORD PTR _dcb$[ebp+4]
	push	eax
	push	OFFSET $SG85604
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _msg$85602[ebp], eax
; Line 126
	mov	ecx, DWORD PTR _msg$85602[ebp]
	push	ecx
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_logevent
	add	esp, 8
; Line 127
	mov	ecx, DWORD PTR _msg$85602[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 129
	push	57					; 00000039H
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	BYTE PTR _dcb$[ebp+18], al
; Line 130
	movzx	eax, BYTE PTR _dcb$[ebp+18]
	push	eax
	push	OFFSET $SG85605
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _msg$85602[ebp], eax
; Line 131
	mov	ecx, DWORD PTR _msg$85602[ebp]
	push	ecx
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_logevent
	add	esp, 8
; Line 132
	mov	ecx, DWORD PTR _msg$85602[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 134
	push	58					; 0000003aH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR tv139[ebp], eax
	cmp	DWORD PTR tv139[ebp], 2
	je	SHORT $LN19@serial_con
	cmp	DWORD PTR tv139[ebp], 3
	je	SHORT $LN18@serial_con
	cmp	DWORD PTR tv139[ebp], 4
	je	SHORT $LN17@serial_con
	jmp	SHORT $LN16@serial_con
$LN19@serial_con:
; Line 135
	mov	BYTE PTR _dcb$[ebp+20], 0
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85611
	jmp	SHORT $LN20@serial_con
$LN18@serial_con:
; Line 136
	mov	BYTE PTR _dcb$[ebp+20], 1
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85613
	jmp	SHORT $LN20@serial_con
$LN17@serial_con:
; Line 137
	mov	BYTE PTR _dcb$[ebp+20], 2
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85615
	jmp	SHORT $LN20@serial_con
$LN16@serial_con:
; Line 138
	mov	eax, OFFSET $SG85617
	jmp	$LN23@serial_con
$LN20@serial_con:
; Line 140
	mov	eax, DWORD PTR _str$85603[ebp]
	push	eax
	push	OFFSET $SG85618
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _msg$85602[ebp], eax
; Line 141
	mov	ecx, DWORD PTR _msg$85602[ebp]
	push	ecx
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_logevent
	add	esp, 8
; Line 142
	mov	ecx, DWORD PTR _msg$85602[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 144
	push	59					; 0000003bH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR tv153[ebp], eax
	cmp	DWORD PTR tv153[ebp], 4
	ja	SHORT $LN14@serial_con
	mov	eax, DWORD PTR tv153[ebp]
	jmp	DWORD PTR $LN29@serial_con[eax*4]
$LN13@serial_con:
; Line 145
	mov	BYTE PTR _dcb$[ebp+19], 0
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85624
	jmp	SHORT $LN14@serial_con
$LN12@serial_con:
; Line 146
	mov	BYTE PTR _dcb$[ebp+19], 1
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85626
	jmp	SHORT $LN14@serial_con
$LN11@serial_con:
; Line 147
	mov	BYTE PTR _dcb$[ebp+19], 2
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85628
	jmp	SHORT $LN14@serial_con
$LN10@serial_con:
; Line 148
	mov	BYTE PTR _dcb$[ebp+19], 3
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85630
	jmp	SHORT $LN14@serial_con
$LN9@serial_con:
; Line 149
	mov	BYTE PTR _dcb$[ebp+19], 4
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85632
$LN14@serial_con:
; Line 151
	mov	ecx, DWORD PTR _str$85603[ebp]
	push	ecx
	push	OFFSET $SG85633
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _msg$85602[ebp], eax
; Line 152
	mov	edx, DWORD PTR _msg$85602[ebp]
	push	edx
	mov	eax, DWORD PTR _serial$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_logevent
	add	esp, 8
; Line 153
	mov	edx, DWORD PTR _msg$85602[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 155
	push	60					; 0000003cH
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR tv165[ebp], eax
	cmp	DWORD PTR tv165[ebp], 3
	ja	SHORT $LN7@serial_con
	mov	ecx, DWORD PTR tv165[ebp]
	jmp	DWORD PTR $LN30@serial_con[ecx*4]
$LN6@serial_con:
; Line 157
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85639
; Line 158
	jmp	SHORT $LN7@serial_con
$LN5@serial_con:
; Line 160
	mov	edx, DWORD PTR _dcb$[ebp+8]
	or	edx, 512				; 00000200H
	mov	DWORD PTR _dcb$[ebp+8], edx
	mov	eax, DWORD PTR _dcb$[ebp+8]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _dcb$[ebp+8], eax
; Line 161
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85641
; Line 162
	jmp	SHORT $LN7@serial_con
$LN4@serial_con:
; Line 164
	mov	ecx, DWORD PTR _dcb$[ebp+8]
	and	ecx, -12289				; ffffcfffH
	or	ecx, 8192				; 00002000H
	mov	DWORD PTR _dcb$[ebp+8], ecx
; Line 165
	mov	edx, DWORD PTR _dcb$[ebp+8]
	or	edx, 4
	mov	DWORD PTR _dcb$[ebp+8], edx
; Line 166
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85643
; Line 167
	jmp	SHORT $LN7@serial_con
$LN3@serial_con:
; Line 169
	mov	eax, DWORD PTR _dcb$[ebp+8]
	and	eax, -49				; ffffffcfH
	or	eax, 32					; 00000020H
	mov	DWORD PTR _dcb$[ebp+8], eax
; Line 170
	mov	ecx, DWORD PTR _dcb$[ebp+8]
	or	ecx, 8
	mov	DWORD PTR _dcb$[ebp+8], ecx
; Line 171
	mov	DWORD PTR _str$85603[ebp], OFFSET $SG85645
$LN7@serial_con:
; Line 174
	mov	edx, DWORD PTR _str$85603[ebp]
	push	edx
	push	OFFSET $SG85646
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _msg$85602[ebp], eax
; Line 175
	mov	eax, DWORD PTR _msg$85602[ebp]
	push	eax
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_logevent
	add	esp, 8
; Line 176
	mov	eax, DWORD PTR _msg$85602[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 178
	mov	esi, esp
	lea	ecx, DWORD PTR _dcb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _serport$[ebp]
	push	edx
	call	DWORD PTR __imp__SetCommState@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@serial_con
; Line 179
	mov	eax, OFFSET $SG85648
	jmp	SHORT $LN23@serial_con
$LN2@serial_con:
; Line 181
	mov	DWORD PTR _timeouts$[ebp], 1
; Line 182
	mov	DWORD PTR _timeouts$[ebp+4], 0
; Line 183
	mov	DWORD PTR _timeouts$[ebp+8], 0
; Line 184
	mov	DWORD PTR _timeouts$[ebp+12], 0
; Line 185
	mov	DWORD PTR _timeouts$[ebp+16], 0
; Line 186
	mov	esi, esp
	lea	eax, DWORD PTR _timeouts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _serport$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCommTimeouts@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN22@serial_con
; Line 187
	mov	eax, OFFSET $SG85650
	jmp	SHORT $LN23@serial_con
$LN22@serial_con:
; Line 190
	xor	eax, eax
$LN23@serial_con:
; Line 191
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@serial_con
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@serial_con:
	DD	2
	DD	$LN27@serial_con
$LN27@serial_con:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN25@serial_con
	DD	-64					; ffffffc0H
	DD	20					; 00000014H
	DD	$LN26@serial_con
$LN26@serial_con:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN25@serial_con:
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	0
	npad	3
$LN29@serial_con:
	DD	$LN13@serial_con
	DD	$LN12@serial_con
	DD	$LN11@serial_con
	DD	$LN10@serial_con
	DD	$LN9@serial_con
$LN30@serial_con:
	DD	$LN6@serial_con
	DD	$LN5@serial_con
	DD	$LN4@serial_con
	DD	$LN3@serial_con
_serial_configure ENDP
_TEXT	ENDS
EXTRN	_expire_timer_context:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_serial_free PROC
; Line 282
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 283
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 285
	mov	ecx, DWORD PTR _serial$[ebp]
	push	ecx
	call	_serial_terminate
	add	esp, 4
; Line 286
	mov	edx, DWORD PTR _serial$[ebp]
	push	edx
	call	_expire_timer_context
	add	esp, 4
; Line 287
	mov	eax, DWORD PTR _serial$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 288
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_free ENDP
; Function compile flags: /Odtp /RTCsu
_err$ = -8						; size = 4
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_conf$ = 12						; size = 4
_serial_reconfig PROC
; Line 291
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 292
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 295
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _serial$[ebp]
	push	ecx
	call	_serial_configure
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _err$[ebp], eax
; Line 300
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_reconfig ENDP
_TEXT	ENDS
EXTRN	_handle_write:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_serial_send PROC
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 307
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 309
	mov	ecx, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@serial_sen@2
; Line 310
	xor	eax, eax
	jmp	SHORT $LN2@serial_sen@2
$LN1@serial_sen@2:
; Line 312
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_handle_write
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 313
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+16]
$LN2@serial_sen@2:
; Line 314
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_send ENDP
; Function compile flags: /Odtp /RTCsu
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_serial_sendbuffer PROC
; Line 320
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 321
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 322
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [ecx+16]
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_sendbuffer ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_serial_size PROC
; Line 329
	push	ebp
	mov	ebp, esp
; Line 332
	pop	ebp
	ret	0
_serial_size ENDP
_TEXT	ENDS
EXTRN	_schedule_timer:PROC
EXTRN	__imp__SetCommBreak@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_code$ = 12						; size = 4
_serial_special PROC
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 350
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 352
	mov	ecx, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@serial_spe
	cmp	DWORD PTR _code$[ebp], 1
	jne	SHORT $LN2@serial_spe
; Line 353
	push	OFFSET $SG85753
	mov	edx, DWORD PTR _serial$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_logevent
	add	esp, 8
; Line 354
	mov	esi, esp
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SetCommBreak@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 366
	mov	eax, DWORD PTR _serial$[ebp]
	push	eax
	push	OFFSET _serbreak_timer
	push	400					; 00000190H
	call	_schedule_timer
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 367
	mov	edx, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [edx+24], 1
$LN2@serial_spe:
; Line 371
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_special ENDP
; Function compile flags: /Odtp /RTCsu
_serial$ = -4						; size = 4
_ctx$ = 8						; size = 4
_now$ = 12						; size = 4
_serbreak_timer PROC
; Line 335
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 336
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 338
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR _now$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN2@serbreak_t
	mov	eax, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@serbreak_t
; Line 339
	mov	esi, esp
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__ClearCommBreak@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 340
	mov	eax, DWORD PTR _serial$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 341
	push	OFFSET $SG85743
	mov	ecx, DWORD PTR _serial$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_logevent
	add	esp, 8
$LN2@serbreak_t:
; Line 343
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serbreak_timer ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_serial_get_specials PROC
; Line 378
	push	ebp
	mov	ebp, esp
; Line 383
	mov	eax, OFFSET ?specials@?1??serial_get_specials@@9@9
; Line 384
	pop	ebp
	ret	0
_serial_get_specials ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_serial_connected PROC
; Line 387
	push	ebp
	mov	ebp, esp
; Line 388
	mov	eax, 1
; Line 389
	pop	ebp
	ret	0
_serial_connected ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_serial_sendok PROC
; Line 392
	push	ebp
	mov	ebp, esp
; Line 393
	mov	eax, 1
; Line 394
	pop	ebp
	ret	0
_serial_sendok ENDP
_TEXT	ENDS
EXTRN	_handle_unthrottle:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_backlog$ = 12						; size = 4
_serial_unthrottle PROC
; Line 397
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 398
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 399
	mov	ecx, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@serial_unt
; Line 400
	mov	edx, DWORD PTR _backlog$[ebp]
	push	edx
	mov	eax, DWORD PTR _serial$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_handle_unthrottle
	add	esp, 8
$LN2@serial_unt:
; Line 401
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_unthrottle ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_option$ = 12						; size = 4
_serial_ldisc PROC
; Line 404
	push	ebp
	mov	ebp, esp
; Line 408
	xor	eax, eax
; Line 409
	pop	ebp
	ret	0
_serial_ldisc ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_ldisc$ = 12						; size = 4
_serial_provide_ldisc PROC
; Line 412
	push	ebp
	mov	ebp, esp
; Line 414
	pop	ebp
	ret	0
_serial_provide_ldisc ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_logctx$ = 12						; size = 4
_serial_provide_logctx PROC
; Line 417
	push	ebp
	mov	ebp, esp
; Line 419
	pop	ebp
	ret	0
_serial_provide_logctx ENDP
; Function compile flags: /Odtp /RTCsu
_serial$ = -4						; size = 4
_handle$ = 8						; size = 4
_serial_exitcode PROC
; Line 422
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 423
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _serial$[ebp], eax
; Line 424
	mov	ecx, DWORD PTR _serial$[ebp]
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN2@serial_exi
; Line 425
	or	eax, -1
	jmp	SHORT $LN3@serial_exi
; Line 426
	jmp	SHORT $LN3@serial_exi
$LN2@serial_exi:
; Line 428
	mov	eax, 2147483647				; 7fffffffH
$LN3@serial_exi:
; Line 429
	mov	esp, ebp
	pop	ebp
	ret	0
_serial_exitcode ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_serial_cfg_info PROC
; Line 435
	push	ebp
	mov	ebp, esp
; Line 436
	xor	eax, eax
; Line 437
	pop	ebp
	ret	0
_serial_cfg_info ENDP
_TEXT	ENDS
END
