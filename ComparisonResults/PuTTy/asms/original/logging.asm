; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\logging.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG85750 DB	01H DUP (?)
$SG85754 DB	01H DUP (?)
$SG85769 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG85578 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 'g'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85579 DB	'c', 00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'l', 00H
	DB	'g', 00H, 'f', 00H, 'p', 00H, 00H, 00H
$SG85582 DB	'Disabled writing session log due to error while writing', 00H
$SG85616 DB	'ab', 00H
	ORG $+1
$SG85617 DB	'wb', 00H
	ORG $+1
$SG85621 DB	'%Y.%m.%d %H:%M:%S', 00H
	ORG $+2
$SG85622 DB	'=~=~=~=~=~=~=~=~=~=~=~= PuTTY log %s =~=~=~=~=~=~=~=~=~='
	DB	'~=~=', 0dH, 0aH, 00H
	ORG $+1
$SG85623 DB	'ASCII', 00H
	ORG $+2
$SG85624 DB	'raw', 00H
$SG85625 DB	'SSH packets', 00H
$SG85626 DB	'SSH raw data', 00H
	ORG $+3
$SG85627 DB	'unknown', 00H
$SG85628 DB	'Disabled writing', 00H
	ORG $+3
$SG85629 DB	'Error writing', 00H
	ORG $+2
$SG85630 DB	'Appending', 00H
	ORG $+2
$SG85631 DB	'Writing new', 00H
$SG85632 DB	'%s session log (%s mode) to file: %s', 00H
	ORG $+3
$SG85634 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 'g'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85635 DB	'c', 00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'L', 00H, '_', 00H, 'O', 00H, 'P', 00H, 'E', 00H
	DB	'N', 00H, 'I', 00H, 'N', 00H, 'G', 00H, 00H, 00H
$SG85651 DB	'r', 00H
	ORG $+2
$SG85685 DB	'%s', 0aH, 00H
$SG85688 DB	'Event Log: %s', 0dH, 0aH, 00H
$SG85723 DB	'Incoming', 00H
	ORG $+3
$SG85724 DB	'Outgoing', 00H
	ORG $+3
$SG85725 DB	'%s packet ', 00H
	ORG $+1
$SG85727 DB	'#0x%lx, ', 00H
	ORG $+3
$SG85728 DB	'type %d / 0x%02x (%s)', 00H
	ORG $+2
$SG85730 DB	' on behalf of downstream #%u', 00H
	ORG $+3
$SG85732 DB	' (%s)', 00H
	ORG $+2
$SG85733 DB	0dH, 0aH, 00H
	ORG $+1
$SG85737 DB	'%Y-%m-%d %H:%M:%S', 00H
	ORG $+2
$SG85738 DB	'Incoming', 00H
	ORG $+3
$SG85739 DB	'Outgoing', 00H
	ORG $+3
$SG85740 DB	'%s raw data at %s', 0dH, 0aH, 00H
$SG85751 DB	's', 00H
	ORG $+2
$SG85752 DB	'  (%d byte%s omitted)', 0dH, 0aH, 00H
$SG85755 DB	'  %08x%*s', 0dH, 0aH, 00H
$SG85760 DB	'XX', 00H
	ORG $+1
$SG85763 DB	'%02x', 00H
	ORG $+3
$SG85767 DB	0dH, 0aH, 00H
	ORG $+1
$SG85770 DB	's', 00H
	ORG $+2
$SG85771 DB	'  (%d byte%s omitted)', 0dH, 0aH, 00H
$SG85830 DB	'%Y', 00H
	ORG $+1
$SG85832 DB	'%m', 00H
	ORG $+1
$SG85834 DB	'%d', 00H
	ORG $+1
$SG85836 DB	'%H%M%S', 00H
_DATA	ENDS
PUBLIC	_logflush
EXTRN	_fflush:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\logging.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_logflush PROC
; Line 77
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 78
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 79
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jle	SHORT $LN3@logflush
; Line 80
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN3@logflush
; Line 81
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fflush
	add	esp, 4
$LN3@logflush:
; Line 82
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_logflush ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_logfopen
EXTRN	_askappend:PROC
EXTRN	_fclose:PROC
EXTRN	_conf_get_int:PROC
EXTRN	_fopen:PROC
EXTRN	_conf_get_filename:PROC
EXTRN	_conf_get_str:PROC
EXTRN	_filename_free:PROC
EXTRN	_ltime:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T85869 = -96						; size = 36
_logxfovr$85653 = -60					; size = 4
_mode$ = -56						; size = 4
_tm$ = -48						; size = 36
_ctx$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_logfopen PROC
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 144
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 149
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN9@logfopen
; Line 150
	jmp	$LN10@logfopen
$LN9@logfopen:
; Line 152
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN8@logfopen
; Line 153
	jmp	$LN10@logfopen
$LN8@logfopen:
; Line 155
	lea	eax, DWORD PTR $T85869[ebp]
	push	eax
	call	_ltime
	add	esp, 4
	mov	ecx, 9
	mov	esi, eax
	lea	edi, DWORD PTR _tm$[ebp]
	rep movsd
; Line 158
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN7@logfopen
; Line 159
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_filename_free
	add	esp, 4
$LN7@logfopen:
; Line 162
	lea	ecx, DWORD PTR _tm$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_conf_get_str
	add	esp, 8
	push	eax
	push	114					; 00000072H
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_conf_get_filename
	add	esp, 8
	push	eax
	call	_xlatlognam
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 164
	push	OFFSET $SG85651
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx], eax
; Line 165
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@logfopen
; Line 166
	push	116					; 00000074H
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _logxfovr$85653[ebp], eax
; Line 167
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fclose
	add	esp, 4
; Line 168
	cmp	DWORD PTR _logxfovr$85653[ebp], -1
	je	SHORT $LN5@logfopen
; Line 169
	mov	edx, DWORD PTR _logxfovr$85653[ebp]
	sub	edx, 1
	neg	edx
	sbb	edx, edx
	add	edx, 2
	mov	DWORD PTR _mode$[ebp], edx
; Line 170
	jmp	SHORT $LN4@logfopen
$LN5@logfopen:
; Line 172
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	push	OFFSET _logfopen_callback
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_askappend
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mode$[ebp], eax
$LN4@logfopen:
; Line 173
	jmp	SHORT $LN3@logfopen
$LN6@logfopen:
; Line 174
	mov	DWORD PTR _mode$[ebp], 2
$LN3@logfopen:
; Line 176
	cmp	DWORD PTR _mode$[ebp], 0
	jge	SHORT $LN2@logfopen
; Line 177
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 178
	jmp	SHORT $LN10@logfopen
$LN2@logfopen:
; Line 179
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logfopen_callback
	add	esp, 8
$LN10@logfopen:
; Line 180
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@logfopen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@logfopen:
	DD	1
	DD	$LN13@logfopen
$LN13@logfopen:
	DD	-48					; ffffffd0H
	DD	36					; 00000024H
	DD	$LN12@logfopen
$LN12@logfopen:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	0
_logfopen ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_bufchain_consume:PROC
EXTRN	_bufchain_prefix:PROC
EXTRN	_bufchain_size:PROC
EXTRN	__wassert:PROC
EXTRN	_safefree:PROC
EXTRN	_logevent:PROC
EXTRN	_dupprintf:PROC
EXTRN	_filename_to_str:PROC
EXTRN	_strftime:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -416						; size = 4
tv144 = -412						; size = 4
tv141 = -408						; size = 4
tv133 = -404						; size = 4
tv134 = -400						; size = 4
tv135 = -396						; size = 4
tv136 = -392						; size = 4
tv67 = -388						; size = 4
$T85880 = -384						; size = 36
_len$85640 = -344					; size = 4
_data$85639 = -332					; size = 4
_fmode$ = -324						; size = 4
_tm$ = -316						; size = 36
_event$ = -276						; size = 4
_buf$ = -268						; size = 256
_ctx$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_mode$ = 12						; size = 4
_logfopen_callback PROC
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 86
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 91
	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN7@logfopen_c
; Line 92
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4], 3
; Line 93
	jmp	SHORT $LN6@logfopen_c
$LN7@logfopen_c:
; Line 94
	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN10@logfopen_c
	mov	DWORD PTR tv67[ebp], OFFSET $SG85616
	jmp	SHORT $LN11@logfopen_c
$LN10@logfopen_c:
	mov	DWORD PTR tv67[ebp], OFFSET $SG85617
$LN11@logfopen_c:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _fmode$[ebp], edx
; Line 95
	mov	eax, DWORD PTR _fmode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_fopen
	add	esp, 8
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 96
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@logfopen_c
; Line 97
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+4], 2
; Line 98
	jmp	SHORT $LN6@logfopen_c
$LN5@logfopen_c:
; Line 99
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4], 3
$LN6@logfopen_c:
; Line 102
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN3@logfopen_c
; Line 104
	lea	eax, DWORD PTR $T85880[ebp]
	push	eax
	call	_ltime
	add	esp, 4
	mov	ecx, 9
	mov	esi, eax
	lea	edi, DWORD PTR _tm$[ebp]
	rep movsd
; Line 105
	lea	ecx, DWORD PTR _tm$[ebp]
	push	ecx
	push	OFFSET $SG85621
	push	24					; 00000018H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_strftime
	add	esp, 16					; 00000010H
; Line 107
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET $SG85622
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 12					; 0000000cH
$LN3@logfopen_c:
; Line 119
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN18@logfopen_c
	mov	DWORD PTR tv136[ebp], OFFSET $SG85623
	jmp	SHORT $LN19@logfopen_c
$LN18@logfopen_c:
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+32], 2
	jne	SHORT $LN16@logfopen_c
	mov	DWORD PTR tv135[ebp], OFFSET $SG85624
	jmp	SHORT $LN17@logfopen_c
$LN16@logfopen_c:
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+32], 3
	jne	SHORT $LN14@logfopen_c
	mov	DWORD PTR tv134[ebp], OFFSET $SG85625
	jmp	SHORT $LN15@logfopen_c
$LN14@logfopen_c:
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 4
	jne	SHORT $LN12@logfopen_c
	mov	DWORD PTR tv133[ebp], OFFSET $SG85626
	jmp	SHORT $LN13@logfopen_c
$LN12@logfopen_c:
	mov	DWORD PTR tv133[ebp], OFFSET $SG85627
$LN13@logfopen_c:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN15@logfopen_c:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv135[ebp], ecx
$LN17@logfopen_c:
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR tv136[ebp], edx
$LN19@logfopen_c:
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 3
	jne	SHORT $LN24@logfopen_c
	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN20@logfopen_c
	mov	DWORD PTR tv141[ebp], OFFSET $SG85628
	jmp	SHORT $LN21@logfopen_c
$LN20@logfopen_c:
	mov	DWORD PTR tv141[ebp], OFFSET $SG85629
$LN21@logfopen_c:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN25@logfopen_c
$LN24@logfopen_c:
	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN22@logfopen_c
	mov	DWORD PTR tv143[ebp], OFFSET $SG85630
	jmp	SHORT $LN23@logfopen_c
$LN22@logfopen_c:
	mov	DWORD PTR tv143[ebp], OFFSET $SG85631
$LN23@logfopen_c:
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv144[ebp], edx
$LN25@logfopen_c:
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_filename_to_str
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	mov	eax, DWORD PTR tv144[ebp]
	push	eax
	push	OFFSET $SG85632
	call	_dupprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _event$[ebp], eax
; Line 120
	mov	ecx, DWORD PTR _event$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_logevent
	add	esp, 8
; Line 121
	mov	ecx, DWORD PTR _event$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 127
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN2@logfopen_c
	push	127					; 0000007fH
	push	OFFSET $SG85634
	push	OFFSET $SG85635
	call	__wassert
	add	esp, 12					; 0000000cH
$LN2@logfopen_c:
; Line 128
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 8
	push	ecx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@logfopen_c
; Line 131
	lea	edx, DWORD PTR _len$85640[ebp]
	push	edx
	lea	eax, DWORD PTR _data$85639[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 8
	push	ecx
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
; Line 132
	mov	edx, DWORD PTR _len$85640[ebp]
	push	edx
	mov	eax, DWORD PTR _data$85639[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logwrite
	add	esp, 12					; 0000000cH
; Line 133
	mov	edx, DWORD PTR _len$85640[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 8
	push	eax
	call	_bufchain_consume
	add	esp, 8
; Line 134
	jmp	SHORT $LN2@logfopen_c
$LN8@logfopen_c:
; Line 135
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@logfopen_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@logfopen_c:
	DD	4
	DD	$LN31@logfopen_c
$LN31@logfopen_c:
	DD	-268					; fffffef4H
	DD	256					; 00000100H
	DD	$LN27@logfopen_c
	DD	-316					; fffffec4H
	DD	36					; 00000024H
	DD	$LN28@logfopen_c
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN29@logfopen_c
	DD	-344					; fffffea8H
	DD	4
	DD	$LN30@logfopen_c
$LN30@logfopen_c:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN29@logfopen_c:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN28@logfopen_c:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	0
$LN27@logfopen_c:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_logfopen_callback ENDP
_TEXT	ENDS
PUBLIC	_logfclose
EXTRN	_fwrite:PROC
EXTRN	_bufchain_add:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_logwrite PROC
; Line 34
	push	ebp
	mov	ebp, esp
; Line 40
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@logwrite
; Line 41
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logfopen
	add	esp, 4
$LN5@logwrite:
; Line 43
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN4@logwrite
; Line 44
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 8
	push	edx
	call	_bufchain_add
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@logwrite
$LN4@logwrite:
; Line 45
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jne	SHORT $LN6@logwrite
; Line 46
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN8@logwrite
	push	46					; 0000002eH
	push	OFFSET $SG85578
	push	OFFSET $SG85579
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@logwrite:
; Line 47
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN6@logwrite
; Line 48
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logfclose
	add	esp, 4
; Line 49
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4], 3
; Line 52
	push	OFFSET $SG85582
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_logevent
	add	esp, 8
$LN6@logwrite:
; Line 55
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_logwrite ENDP
_TEXT	ENDS
EXTRN	_strlen:PROC
EXTRN	_dupvprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = -8						; size = 4
_ap$ = -4						; size = 4
_ctx$ = 8						; size = 4
_fmt$ = 12						; size = 4
_logprintf PROC
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 66
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 67
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _data$[ebp], eax
; Line 68
	mov	DWORD PTR _ap$[ebp], 0
; Line 70
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_logwrite
	add	esp, 12					; 0000000cH
; Line 71
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 72
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_logprintf ENDP
; Function compile flags: /Odtp /RTCsu
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_logfclose PROC
; Line 183
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 184
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@logfclose
; Line 186
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_fclose
	add	esp, 4
; Line 187
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@logfclose:
; Line 189
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 190
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_logfclose ENDP
_TEXT	ENDS
PUBLIC	_logtraffic
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_c$ = 12						; size = 1
_logmode$ = 16						; size = 4
_logtraffic PROC
; Line 196
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 197
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 198
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jle	SHORT $LN3@logtraffic
; Line 199
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR _logmode$[ebp]
	jne	SHORT $LN3@logtraffic
; Line 200
	push	1
	lea	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_logwrite
	add	esp, 12					; 0000000cH
$LN3@logtraffic:
; Line 202
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_logtraffic ENDP
_TEXT	ENDS
PUBLIC	_log_eventlog
EXTRN	_fprintf:PROC
EXTRN	___iob_func:PROC
EXTRN	_flags:DWORD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_event$ = 12						; size = 4
_log_eventlog PROC
; Line 214
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 215
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 216
	mov	ecx, DWORD PTR _flags
	and	ecx, 2
	je	SHORT $LN3@log_eventl
	mov	edx, DWORD PTR _flags
	and	edx, 1
	je	SHORT $LN3@log_eventl
; Line 217
	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	push	OFFSET $SG85685
	call	___iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 218
	call	___iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	_fflush
	add	esp, 4
$LN3@log_eventl:
; Line 221
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@log_eventl
; Line 222
	jmp	SHORT $LN4@log_eventl
$LN2@log_eventl:
; Line 224
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+32], 3
	je	SHORT $LN1@log_eventl
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 4
	je	SHORT $LN1@log_eventl
; Line 225
	jmp	SHORT $LN4@log_eventl
$LN1@log_eventl:
; Line 226
	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	push	OFFSET $SG85688
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 12					; 0000000cH
; Line 227
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_logflush
	add	esp, 4
$LN4@log_eventl:
; Line 228
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_log_eventlog ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_log_packet
EXTRN	_strcpy:PROC
EXTRN	_isprint:PROC
EXTRN	_sprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv230 = -500						; size = 4
tv206 = -496						; size = 4
tv166 = -492						; size = 4
tv135 = -488						; size = 4
tv71 = -484						; size = 4
$T85912 = -480						; size = 36
_c$85758 = -444						; size = 4
_blktype$85744 = -440					; size = 4
_tm$85736 = -432					; size = 36
_buf$85735 = -388					; size = 256
_output_pos$ = -128					; size = 4
_omitted$ = -124					; size = 4
_b$ = -120						; size = 4
_p$ = -116						; size = 4
_smalldata$ = -108					; size = 5
_dumpdata$ = -92					; size = 80
_ctx$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_direction$ = 12					; size = 4
_type$ = 16						; size = 4
_texttype$ = 20						; size = 4
_data$ = 24						; size = 4
_len$ = 28						; size = 4
_n_blanks$ = 32						; size = 4
_blanks$ = 36						; size = 4
_seq$ = 40						; size = 4
_downstream_id$ = 44					; size = 4
_additional_log_text$ = 48				; size = 4
_log_packet PROC
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-500]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 241
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 243
	mov	DWORD PTR _p$[ebp], 0
	mov	DWORD PTR _b$[ebp], 0
	mov	DWORD PTR _omitted$[ebp], 0
; Line 244
	mov	DWORD PTR _output_pos$[ebp], 0
; Line 247
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+32], 4
	je	SHORT $LN22@log_packet
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 3
	jne	SHORT $LN21@log_packet
	cmp	DWORD PTR _texttype$[ebp], 0
	jne	SHORT $LN22@log_packet
$LN21@log_packet:
; Line 248
	jmp	$LN23@log_packet
$LN22@log_packet:
; Line 251
	cmp	DWORD PTR _texttype$[ebp], 0
	je	$LN20@log_packet
; Line 253
	cmp	DWORD PTR _direction$[ebp], 0
	jne	SHORT $LN25@log_packet
	mov	DWORD PTR tv71[ebp], OFFSET $SG85723
	jmp	SHORT $LN26@log_packet
$LN25@log_packet:
	mov	DWORD PTR tv71[ebp], OFFSET $SG85724
$LN26@log_packet:
	mov	eax, DWORD PTR tv71[ebp]
	push	eax
	push	OFFSET $SG85725
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 12					; 0000000cH
; Line 255
	cmp	DWORD PTR _seq$[ebp], 0
	je	SHORT $LN19@log_packet
; Line 256
	mov	edx, DWORD PTR _seq$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG85727
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 12					; 0000000cH
$LN19@log_packet:
; Line 258
	mov	edx, DWORD PTR _texttype$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	OFFSET $SG85728
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_logprintf
	add	esp, 20					; 00000014H
; Line 260
	cmp	DWORD PTR _downstream_id$[ebp], 0
	je	SHORT $LN18@log_packet
; Line 261
	mov	eax, DWORD PTR _downstream_id$[ebp]
	push	eax
	push	OFFSET $SG85730
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 12					; 0000000cH
; Line 262
	cmp	DWORD PTR _additional_log_text$[ebp], 0
	je	SHORT $LN18@log_packet
; Line 263
	mov	edx, DWORD PTR _additional_log_text$[ebp]
	push	edx
	push	OFFSET $SG85732
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_logprintf
	add	esp, 12					; 0000000cH
$LN18@log_packet:
; Line 266
	push	OFFSET $SG85733
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 8
; Line 267
	jmp	SHORT $LN15@log_packet
$LN20@log_packet:
; Line 278
	lea	edx, DWORD PTR $T85912[ebp]
	push	edx
	call	_ltime
	add	esp, 4
	mov	ecx, 9
	mov	esi, eax
	lea	edi, DWORD PTR _tm$85736[ebp]
	rep movsd
; Line 279
	lea	eax, DWORD PTR _tm$85736[ebp]
	push	eax
	push	OFFSET $SG85737
	push	24					; 00000018H
	lea	ecx, DWORD PTR _buf$85735[ebp]
	push	ecx
	call	_strftime
	add	esp, 16					; 00000010H
; Line 282
	cmp	DWORD PTR _direction$[ebp], 0
	jne	SHORT $LN27@log_packet
	mov	DWORD PTR tv135[ebp], OFFSET $SG85738
	jmp	SHORT $LN28@log_packet
$LN27@log_packet:
	mov	DWORD PTR tv135[ebp], OFFSET $SG85739
$LN28@log_packet:
	lea	edx, DWORD PTR _buf$85735[ebp]
	push	edx
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	push	OFFSET $SG85740
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 16					; 00000010H
$LN15@log_packet:
; Line 289
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	$LN14@log_packet
$LN13@log_packet:
; Line 294
	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _n_blanks$[ebp]
	jge	SHORT $LN12@log_packet
	mov	ecx, DWORD PTR _b$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _b$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _blanks$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _blanks$[ebp]
	add	ecx, DWORD PTR [eax+edx+4]
	cmp	DWORD PTR _p$[ebp], ecx
	jl	SHORT $LN12@log_packet
; Line 295
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, 1
	mov	DWORD PTR _b$[ebp], ecx
	jmp	SHORT $LN13@log_packet
$LN12@log_packet:
; Line 298
	mov	DWORD PTR _blktype$85744[ebp], 0
; Line 301
	mov	edx, DWORD PTR _b$[ebp]
	cmp	edx, DWORD PTR _n_blanks$[ebp]
	jge	SHORT $LN11@log_packet
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _blanks$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR [ecx+eax]
	jl	SHORT $LN11@log_packet
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _b$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _blanks$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _blanks$[ebp]
	add	eax, DWORD PTR [edx+ecx+4]
	cmp	DWORD PTR _p$[ebp], eax
	jge	SHORT $LN11@log_packet
; Line 302
	mov	eax, DWORD PTR _b$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _blanks$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _blktype$85744[ebp], edx
$LN11@log_packet:
; Line 306
	cmp	DWORD PTR _blktype$85744[ebp], 2
	je	SHORT $LN10@log_packet
	cmp	DWORD PTR _omitted$[ebp], 0
	je	SHORT $LN10@log_packet
; Line 308
	cmp	DWORD PTR _omitted$[ebp], 1
	jne	SHORT $LN29@log_packet
	mov	DWORD PTR tv166[ebp], OFFSET $SG85750
	jmp	SHORT $LN30@log_packet
$LN29@log_packet:
	mov	DWORD PTR tv166[ebp], OFFSET $SG85751
$LN30@log_packet:
	mov	eax, DWORD PTR tv166[ebp]
	push	eax
	mov	ecx, DWORD PTR _omitted$[ebp]
	push	ecx
	push	OFFSET $SG85752
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_logprintf
	add	esp, 16					; 00000010H
; Line 309
	mov	DWORD PTR _omitted$[ebp], 0
$LN10@log_packet:
; Line 314
	cmp	DWORD PTR _output_pos$[ebp], 0
	jne	SHORT $LN9@log_packet
	cmp	DWORD PTR _omitted$[ebp], 0
	jne	SHORT $LN9@log_packet
; Line 315
	push	OFFSET $SG85754
	push	67					; 00000043H
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN41@log_packet
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN41@log_packet:
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, eax
	push	ecx
	push	OFFSET $SG85755
	lea	edx, DWORD PTR _dumpdata$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN9@log_packet:
; Line 318
	cmp	DWORD PTR _blktype$85744[ebp], 2
	jne	SHORT $LN8@log_packet
; Line 319
	mov	eax, DWORD PTR _omitted$[ebp]
	add	eax, 1
	mov	DWORD PTR _omitted$[ebp], eax
; Line 320
	jmp	$LN7@log_packet
$LN8@log_packet:
; Line 322
	cmp	DWORD PTR _blktype$85744[ebp], 1
	jne	SHORT $LN6@log_packet
; Line 323
	mov	DWORD PTR _c$85758[ebp], 88		; 00000058H
; Line 324
	push	OFFSET $SG85760
	lea	ecx, DWORD PTR _smalldata$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
; Line 325
	jmp	SHORT $LN5@log_packet
$LN6@log_packet:
; Line 326
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _c$85758[ebp], eax
; Line 327
	mov	ecx, DWORD PTR _c$85758[ebp]
	push	ecx
	push	OFFSET $SG85763
	lea	edx, DWORD PTR _smalldata$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN5@log_packet:
; Line 329
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN42@log_packet
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN42@log_packet:
	imul	eax, 3
	mov	cl, BYTE PTR _smalldata$[ebp]
	mov	BYTE PTR _dumpdata$[ebp+eax+12], cl
; Line 330
	mov	edx, DWORD PTR _p$[ebp]
	and	edx, -2147483633			; 8000000fH
	jns	SHORT $LN43@log_packet
	dec	edx
	or	edx, -16				; fffffff0H
	inc	edx
$LN43@log_packet:
	imul	edx, 3
	mov	al, BYTE PTR _smalldata$[ebp+1]
	mov	BYTE PTR _dumpdata$[ebp+edx+13], al
; Line 331
	mov	ecx, DWORD PTR _c$85758[ebp]
	push	ecx
	call	_isprint
	add	esp, 4
	test	eax, eax
	je	SHORT $LN31@log_packet
	mov	edx, DWORD PTR _c$85758[ebp]
	mov	DWORD PTR tv206[ebp], edx
	jmp	SHORT $LN32@log_packet
$LN31@log_packet:
	mov	DWORD PTR tv206[ebp], 46		; 0000002eH
$LN32@log_packet:
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN44@log_packet
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN44@log_packet:
	mov	cl, BYTE PTR tv206[ebp]
	mov	BYTE PTR _dumpdata$[ebp+eax+61], cl
; Line 332
	mov	edx, DWORD PTR _p$[ebp]
	and	edx, -2147483633			; 8000000fH
	jns	SHORT $LN45@log_packet
	dec	edx
	or	edx, -16				; fffffff0H
	inc	edx
$LN45@log_packet:
	add	edx, 1
	mov	DWORD PTR _output_pos$[ebp], edx
$LN7@log_packet:
; Line 335
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 338
	mov	ecx, DWORD PTR _p$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN46@log_packet
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN46@log_packet:
	test	ecx, ecx
	je	SHORT $LN3@log_packet
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	je	SHORT $LN3@log_packet
	cmp	DWORD PTR _omitted$[ebp], 0
	je	SHORT $LN4@log_packet
$LN3@log_packet:
; Line 339
	cmp	DWORD PTR _output_pos$[ebp], 0
	je	SHORT $LN4@log_packet
; Line 340
	push	OFFSET $SG85767
	mov	eax, DWORD PTR _output_pos$[ebp]
	lea	ecx, DWORD PTR _dumpdata$[ebp+eax+61]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 341
	lea	edx, DWORD PTR _dumpdata$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _dumpdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logwrite
	add	esp, 12					; 0000000cH
; Line 342
	mov	DWORD PTR _output_pos$[ebp], 0
$LN4@log_packet:
; Line 346
	jmp	$LN15@log_packet
$LN14@log_packet:
; Line 349
	cmp	DWORD PTR _omitted$[ebp], 0
	je	SHORT $LN1@log_packet
; Line 351
	cmp	DWORD PTR _omitted$[ebp], 1
	jne	SHORT $LN33@log_packet
	mov	DWORD PTR tv230[ebp], OFFSET $SG85769
	jmp	SHORT $LN34@log_packet
$LN33@log_packet:
	mov	DWORD PTR tv230[ebp], OFFSET $SG85770
$LN34@log_packet:
	mov	edx, DWORD PTR tv230[ebp]
	push	edx
	mov	eax, DWORD PTR _omitted$[ebp]
	push	eax
	push	OFFSET $SG85771
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logprintf
	add	esp, 16					; 00000010H
$LN1@log_packet:
; Line 352
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_logflush
	add	esp, 4
$LN23@log_packet:
; Line 353
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@log_packet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 500				; 000001f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN40@log_packet:
	DD	4
	DD	$LN39@log_packet
$LN39@log_packet:
	DD	-92					; ffffffa4H
	DD	80					; 00000050H
	DD	$LN35@log_packet
	DD	-108					; ffffff94H
	DD	5
	DD	$LN36@log_packet
	DD	-388					; fffffe7cH
	DD	256					; 00000100H
	DD	$LN37@log_packet
	DD	-432					; fffffe50H
	DD	36					; 00000024H
	DD	$LN38@log_packet
$LN38@log_packet:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	0
$LN37@log_packet:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN36@log_packet:
	DB	115					; 00000073H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN35@log_packet:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_log_packet ENDP
_TEXT	ENDS
PUBLIC	_log_init
EXTRN	_bufchain_init:PROC
EXTRN	_conf_copy:PROC
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_frontend$ = 8						; size = 4
_conf$ = 12						; size = 4
_log_init PROC
; Line 356
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 357
	push	36					; 00000024H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ctx$[ebp], eax
; Line 358
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax], 0
; Line 359
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 360
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _frontend$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 361
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_copy
	add	esp, 4
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 362
	push	115					; 00000073H
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 363
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 364
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 8
	push	ecx
	call	_bufchain_init
	add	esp, 4
; Line 365
	mov	eax, DWORD PTR _ctx$[ebp]
; Line 366
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_log_init ENDP
_TEXT	ENDS
PUBLIC	_log_free
EXTRN	_conf_free:PROC
EXTRN	_bufchain_clear:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_log_free PROC
; Line 369
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 370
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 372
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logfclose
	add	esp, 4
; Line 373
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 8
	push	edx
	call	_bufchain_clear
	add	esp, 4
; Line 374
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@log_free
; Line 375
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_filename_free
	add	esp, 4
$LN1@log_free:
; Line 376
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_conf_free
	add	esp, 4
; Line 377
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 378
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_log_free ENDP
_TEXT	ENDS
PUBLIC	_log_reconfig
EXTRN	_filename_equal:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_reset_logging$ = -8					; size = 4
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_conf$ = 12						; size = 4
_log_reconfig PROC
; Line 381
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 382
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 388
	push	114					; 00000072H
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_filename
	add	esp, 8
	push	eax
	push	114					; 00000072H
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_conf_get_filename
	add	esp, 8
	push	eax
	call	_filename_equal
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@log_reconf
	push	115					; 00000073H
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	115					; 00000073H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	je	SHORT $LN5@log_reconf
$LN4@log_reconf:
; Line 389
	mov	DWORD PTR _reset_logging$[ebp], 1
; Line 390
	jmp	SHORT $LN3@log_reconf
$LN5@log_reconf:
; Line 391
	mov	DWORD PTR _reset_logging$[ebp], 0
$LN3@log_reconf:
; Line 393
	cmp	DWORD PTR _reset_logging$[ebp], 0
	je	SHORT $LN2@log_reconf
; Line 394
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_logfclose
	add	esp, 4
$LN2@log_reconf:
; Line 396
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_conf_free
	add	esp, 4
; Line 397
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_copy
	add	esp, 4
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 399
	push	115					; 00000073H
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 401
	cmp	DWORD PTR _reset_logging$[ebp], 0
	je	SHORT $LN6@log_reconf
; Line 402
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_logfopen
	add	esp, 4
$LN6@log_reconf:
; Line 403
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_log_reconfig ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_filename_from_str:PROC
EXTRN	_memcpy:PROC
EXTRN	_saferealloc:PROC
EXTRN	_tolower:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -60						; size = 4
_c$85822 = -53						; size = 1
_ret$ = -52						; size = 4
_s$ = -48						; size = 4
_bufsize$ = -44						; size = 4
_buflen$ = -40						; size = 4
_buffer$ = -36						; size = 4
_size$ = -32						; size = 4
_bufp$ = -28						; size = 4
_buf$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_hostname$ = 12						; size = 4
_tm$ = 16						; size = 4
_xlatlognam PROC
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 420
	mov	DWORD PTR _bufsize$[ebp], 260		; 00000104H
; Line 421
	push	1
	mov	eax, DWORD PTR _bufsize$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buffer$[ebp], eax
; Line 422
	mov	DWORD PTR _buflen$[ebp], 0
; Line 423
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	call	_filename_to_str
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
$LN15@xlatlognam:
; Line 425
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN14@xlatlognam
; Line 427
	lea	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _bufp$[ebp], ecx
; Line 428
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 38					; 00000026H
	jne	$LN13@xlatlognam
; Line 430
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 431
	mov	DWORD PTR _size$[ebp], 0
; Line 432
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN12@xlatlognam
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$85822[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	movzx	ecx, BYTE PTR _c$85822[ebp]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	DWORD PTR tv80[ebp], eax
	mov	edx, DWORD PTR tv80[ebp]
	sub	edx, 100				; 00000064H
	mov	DWORD PTR tv80[ebp], edx
	cmp	DWORD PTR tv80[ebp], 21			; 00000015H
	ja	$LN4@xlatlognam
	mov	eax, DWORD PTR tv80[ebp]
	movzx	ecx, BYTE PTR $LN18@xlatlognam[eax]
	jmp	DWORD PTR $LN22@xlatlognam[ecx*4]
$LN9@xlatlognam:
; Line 434
	mov	edx, DWORD PTR _tm$[ebp]
	push	edx
	push	OFFSET $SG85830
	push	10					; 0000000aH
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strftime
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	jmp	$LN12@xlatlognam
$LN8@xlatlognam:
; Line 437
	mov	ecx, DWORD PTR _tm$[ebp]
	push	ecx
	push	OFFSET $SG85832
	push	10					; 0000000aH
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_strftime
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax
; Line 438
	jmp	SHORT $LN12@xlatlognam
$LN7@xlatlognam:
; Line 440
	mov	eax, DWORD PTR _tm$[ebp]
	push	eax
	push	OFFSET $SG85834
	push	10					; 0000000aH
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_strftime
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax
; Line 441
	jmp	SHORT $LN12@xlatlognam
$LN6@xlatlognam:
; Line 443
	mov	edx, DWORD PTR _tm$[ebp]
	push	edx
	push	OFFSET $SG85836
	push	10					; 0000000aH
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strftime
	add	esp, 16					; 00000010H
	mov	DWORD PTR _size$[ebp], eax
; Line 444
	jmp	SHORT $LN12@xlatlognam
$LN5@xlatlognam:
; Line 446
	mov	ecx, DWORD PTR _hostname$[ebp]
	mov	DWORD PTR _bufp$[ebp], ecx
; Line 447
	mov	edx, DWORD PTR _bufp$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 448
	jmp	SHORT $LN12@xlatlognam
$LN4@xlatlognam:
; Line 450
	mov	BYTE PTR _buf$[ebp], 38			; 00000026H
; Line 451
	mov	DWORD PTR _size$[ebp], 1
; Line 452
	movsx	eax, BYTE PTR _c$85822[ebp]
	cmp	eax, 38					; 00000026H
	je	SHORT $LN12@xlatlognam
; Line 453
	mov	ecx, DWORD PTR _size$[ebp]
	mov	dl, BYTE PTR _c$85822[ebp]
	mov	BYTE PTR _buf$[ebp+ecx], dl
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
$LN12@xlatlognam:
; Line 455
	jmp	SHORT $LN2@xlatlognam
$LN13@xlatlognam:
; Line 456
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _buf$[ebp], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 457
	mov	DWORD PTR _size$[ebp], 1
$LN2@xlatlognam:
; Line 459
	mov	ecx, DWORD PTR _buflen$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR _bufsize$[ebp], ecx
	jg	SHORT $LN1@xlatlognam
; Line 460
	mov	eax, DWORD PTR _buflen$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	imul	eax, 5
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, 512				; 00000200H
	mov	DWORD PTR _bufsize$[ebp], eax
; Line 461
	push	1
	mov	edx, DWORD PTR _bufsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buffer$[ebp], eax
$LN1@xlatlognam:
; Line 463
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bufp$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _buflen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 464
	mov	ecx, DWORD PTR _buflen$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _buflen$[ebp], ecx
; Line 465
	jmp	$LN15@xlatlognam
$LN14@xlatlognam:
; Line 466
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _buflen$[ebp]
	mov	BYTE PTR [edx], 0
; Line 468
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_filename_from_str
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 469
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 470
	mov	eax, DWORD PTR _ret$[ebp]
; Line 471
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@xlatlognam
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@xlatlognam:
	DD	1
	DD	$LN20@xlatlognam
$LN20@xlatlognam:
	DD	-20					; ffffffecH
	DD	10					; 0000000aH
	DD	$LN19@xlatlognam
$LN19@xlatlognam:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN22@xlatlognam:
	DD	$LN7@xlatlognam
	DD	$LN5@xlatlognam
	DD	$LN8@xlatlognam
	DD	$LN6@xlatlognam
	DD	$LN9@xlatlognam
	DD	$LN4@xlatlognam
$LN18@xlatlognam:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_xlatlognam ENDP
_TEXT	ENDS
END
