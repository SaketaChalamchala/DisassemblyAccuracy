; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshshare.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG87998 DB	01H DUP (?)
$SG88038 DB	01H DUP (?)
$SG88050 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?reason@?2??share_try_cleanup@@9@9 DB 'PuTTY downstream no longer availab'
	DB	'le', 00H					; `share_try_cleanup'::`3'::reason
	ORG $+3
?lang@?2??share_try_cleanup@@9@9 DB 'en', 00H		; `share_try_cleanup'::`3'::lang
	ORG $+1
?request@?8??share_try_cleanup@@9@9 DB 'cancel-tcpip-forward', 00H ; `share_try_cleanup'::`9'::request
	ORG $+3
?lang@?1??share_disconnect@@9@9 DB 'en', 00H		; `share_disconnect'::`2'::lang
	ORG $+1
?expected_verstring_prefix@?1??share_receive@@9@9 DB 'SSHCONNECTION@putty'
	DB	'.projects.tartarus.org-2.0-', 00H		; `share_receive'::`2'::expected_verstring_prefix
	ORG $+1
?connection_fn_table@?1??share_listen_accepting@@9@9 DD 00H ; `share_listen_accepting'::`2'::connection_fn_table
	DD	FLAT:_share_closing
	DD	FLAT:_share_receive
	DD	FLAT:_share_sent
	DD	00H
?listen_fn_table@?1??ssh_connection_sharing_init@@9@9 DD 00H ; `ssh_connection_sharing_init'::`2'::listen_fn_table
	DD	FLAT:_share_listen_closing
	DD	00H
	DD	00H
	DD	FLAT:_share_listen_accepting
CONST	ENDS
_DATA	SEGMENT
$SG87174 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG87175 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'd', 00H, '2'
	DB	00H, '3', 00H, '4', 00H, '(', 00H, 's', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, ',', 00H, ' ', 00H, '&', 00H, 'd', 00H, 'u', 00H, 'm', 00H
	DB	'm', 00H, 'y', 00H, ',', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG87377 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG87378 DB	'n', 00H, 'e', 00H, 'w', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'U'
	DB	00H, 'N', 00H, 'A', 00H, 'C', 00H, 'K', 00H, 'N', 00H, 'O', 00H
	DB	'W', 00H, 'L', 00H, 'E', 00H, 'D', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, 00H, 00H
	ORG $+2
$SG87555 DB	'cleanup after downstream went away', 00H
	ORG $+1
$SG87568 DB	'cleanup after downstream went away', 00H
	ORG $+1
$SG87595 DB	'cleanup after downstream went away', 00H
	ORG $+1
$SG87641 DB	'%s', 00H
	ORG $+1
$SG87669 DB	'%.*s', 00H
	ORG $+3
$SG87726 DB	'downstream refused X channel open', 00H
	ORG $+2
$SG87759 DB	'window adjustment after downstream accepted X channel', 00H
	ORG $+2
$SG87771 DB	'downstream refused X channel open', 00H
	ORG $+2
$SG87821 DB	'x11', 00H
$SG87881 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG87882 DB	'i', 00H, 'd', 00H, '_', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG87894 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG87895 DB	'p', 00H, 'k', 00H, 't', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
$SG87935 DB	'This packet type should never have come from ssh.c', 00H
	ORG $+1
$SG87936 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG87937 DB	'!', 00H, '"', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 'h', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' '
	DB	00H, 'n', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'h', 00H, 'a', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, ' ', 00H, 's', 00H, 's', 00H, 'h', 00H, '.', 00H, 'c'
	DB	00H, '"', 00H, 00H, 00H
$SG87968 DB	'Truncated GLOBAL_REQUEST packet', 00H
$SG87971 DB	'tcpip-forward', 00H
	ORG $+2
$SG87979 DB	'Truncated GLOBAL_REQUEST packet', 00H
$SG87982 DB	'Truncated GLOBAL_REQUEST packet', 00H
$SG87985 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG87986 DB	'h', 00H, 'o', 00H, 's', 00H, 't', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H
	ORG $+2
$SG88002 DB	'upstream added want_reply flag', 00H
	ORG $+1
$SG88011 DB	'cancel-tcpip-forward', 00H
	ORG $+3
$SG88019 DB	'Truncated GLOBAL_REQUEST packet', 00H
$SG88022 DB	'Truncated GLOBAL_REQUEST packet', 00H
$SG88025 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG88026 DB	'h', 00H, 'o', 00H, 's', 00H, 't', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H
	ORG $+2
$SG88042 DB	'upstream added want_reply flag', 00H
	ORG $+1
$SG88047 DB	'Truncated GLOBAL_REQUEST packet', 00H
$SG88054 DB	'Truncated CHANNEL_OPEN packet', 00H
	ORG $+2
$SG88078 DB	'Truncated CHANNEL_OPEN_CONFIRMATION packet', 00H
	ORG $+1
$SG88104 DB	'CHANNEL_OPEN_CONFIRMATION packet cited unknown channel %'
	DB	'u', 00H
	ORG $+2
$SG88156 DB	'auth-agent-req@openssh.com', 00H
	ORG $+1
$SG88131 DB	'Initial window size for x11 channel must be at least 256'
	DB	' (got %u)', 00H
	ORG $+2
$SG88134 DB	'Truncated CHANNEL_OPEN_FAILURE packet', 00H
	ORG $+2
$SG88151 DB	'CHANNEL_OPEN_FAILURE packet cited unknown channel %u', 00H
	ORG $+3
$SG88175 DB	'Agent forwarding request for unrecognised channel %u', 00H
	ORG $+3
$SG88177 DB	'x11-req', 00H
$SG88198 DB	'X11 forwarding request for unrecognised channel %u', 00H
	ORG $+1
$SG88200 DB	'Truncated CHANNEL_REQUEST("x11") packet', 00H
$SG88202 DB	'Truncated CHANNEL_REQUEST("x11") packet', 00H
$SG88228 DB	'x11-req', 00H
$SG88256 DB	'Unexpected packet type %d', 0aH, 00H
	ORG $+1
$SG88259 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG88260 DB	'e', 00H, 'r', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG88296 DB	'Version string far too long', 0aH, 00H
	ORG $+3
$SG88301 DB	'Version string did not have expected prefix', 0aH, 00H
	ORG $+3
$SG88303 DB	'Downstream version string: %.*s', 00H
$SG88330 DB	'Bad packet length %u', 0aH, 00H
	ORG $+2
$SG88361 DB	'listening socket: %s', 00H
	ORG $+3
$SG88369 DB	0dH, 0aH, 00H
	ORG $+1
$SG88370 DB	'SSHCONNECTION@putty.projects.tartarus.org-2.0-', 00H
	ORG $+1
$SG88388 DB	'-', 00H
	ORG $+2
$SG88396 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG88397 DB	'!', 00H, 'c', 00H, 's', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	00H, 00H
$SG88458 DB	'%s@%s', 00H
	ORG $+2
$SG88460 DB	'%s', 00H
	ORG $+1
$SG88463 DB	'%s@%s:%d', 00H
	ORG $+3
$SG88465 DB	'%s:%d', 00H
	ORG $+2
$SG88480 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG88481 DB	's', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H
_DATA	ENDS
PUBLIC	_sharestate_free
EXTRN	_safefree:PROC
EXTRN	_freetree234:PROC
EXTRN	_delpos234:PROC
EXTRN	_platform_ssh_share_cleanup:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshshare.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_cs$ = -8						; size = 4
_sharestate$ = -4					; size = 4
_v$ = 8							; size = 4
_sharestate_free PROC
; Line 509
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 510
	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _sharestate$[ebp], eax
; Line 513
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_platform_ssh_share_cleanup
	add	esp, 4
$LN3@sharestate:
; Line 516
	push	0
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _cs$[ebp], eax
	cmp	DWORD PTR _cs$[ebp], 0
	je	SHORT $LN2@sharestate
; Line 517
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_connstate_free
	add	esp, 4
; Line 518
	jmp	SHORT $LN3@sharestate
$LN2@sharestate:
; Line 519
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_freetree234
	add	esp, 4
; Line 520
	mov	edx, DWORD PTR _sharestate$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN1@sharestate
; Line 521
	mov	esi, esp
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 522
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@sharestate:
; Line 524
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_safefree
	add	esp, 4
; Line 525
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 526
	mov	edx, DWORD PTR _sharestate$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 527
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sharestate_free ENDP
; Function compile flags: /Odtp /RTCsu
_globreq$87302 = -20					; size = 4
_fwd$ = -16						; size = 4
_chan$ = -12						; size = 4
_xc$ = -8						; size = 4
_hc$ = -4						; size = 4
_cs$ = 8						; size = 4
_share_connstate_free PROC
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN10@share_conn:
; Line 473
	push	0
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16436]
	push	ecx
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax
	cmp	DWORD PTR _hc$[ebp], 0
	je	SHORT $LN9@share_conn
; Line 474
	mov	edx, DWORD PTR _hc$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
	jmp	SHORT $LN10@share_conn
$LN9@share_conn:
; Line 475
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16436]
	push	ecx
	call	_freetree234
	add	esp, 4
; Line 480
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16444]
	push	eax
	call	_freetree234
	add	esp, 4
$LN8@share_conn:
; Line 482
	push	0
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16440]
	push	edx
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
	cmp	DWORD PTR _chan$[ebp], 0
	je	SHORT $LN7@share_conn
; Line 483
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
	jmp	SHORT $LN8@share_conn
$LN7@share_conn:
; Line 484
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16440]
	push	edx
	call	_freetree234
	add	esp, 4
$LN6@share_conn:
; Line 489
	push	0
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16448]
	push	ecx
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _xc$[ebp], eax
	cmp	DWORD PTR _xc$[ebp], 0
	je	SHORT $LN5@share_conn
; Line 490
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	call	_share_xchannel_free
	add	esp, 4
	jmp	SHORT $LN6@share_conn
$LN5@share_conn:
; Line 491
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16448]
	push	ecx
	call	_freetree234
	add	esp, 4
; Line 492
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16452]
	push	eax
	call	_freetree234
	add	esp, 4
$LN4@share_conn:
; Line 495
	push	0
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16456]
	push	edx
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _fwd$[ebp], eax
	cmp	DWORD PTR _fwd$[ebp], 0
	je	SHORT $LN3@share_conn
; Line 496
	mov	eax, DWORD PTR _fwd$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
	jmp	SHORT $LN4@share_conn
$LN3@share_conn:
; Line 497
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16456]
	push	edx
	call	_freetree234
	add	esp, 4
$LN2@share_conn:
; Line 499
	mov	eax, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [eax+16460], 0
	je	SHORT $LN1@share_conn
; Line 500
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16460]
	mov	DWORD PTR _globreq$87302[ebp], edx
; Line 501
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16460]
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16460], eax
; Line 502
	mov	ecx, DWORD PTR _globreq$87302[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 503
	jmp	SHORT $LN2@share_conn
$LN1@share_conn:
; Line 505
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 506
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_connstate_free ENDP
; Function compile flags: /Odtp /RTCsu
_tmp$87270 = -4					; size = 4
_xc$ = 8						; size = 4
_share_xchannel_free PROC
; Line 456
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@share_xcha:
; Line 457
	mov	eax, DWORD PTR _xc$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@share_xcha
; Line 458
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _tmp$87270[ebp], edx
; Line 459
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _tmp$87270[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
; Line 460
	mov	eax, DWORD PTR _tmp$87270[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 461
	jmp	SHORT $LN2@share_xcha
$LN1@share_xcha:
; Line 462
	mov	ecx, DWORD PTR _xc$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 463
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_xchannel_free ENDP
_TEXT	ENDS
EXTRN	_ssh_sharing_logf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cs$ = -4						; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_share_closing PROC
; Line 912
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 913
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _cs$[ebp], eax
; Line 914
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN1@share_clos
; Line 915
	mov	ecx, DWORD PTR _error_msg$[ebp]
	push	ecx
	push	OFFSET $SG87641
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_sharing_logf
	add	esp, 16					; 00000010H
$LN1@share_clos:
; Line 916
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_begin_cleanup
	add	esp, 4
; Line 917
	mov	eax, 1
; Line 918
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_closing ENDP
; Function compile flags: /Odtp /RTCsu
_cs$ = 8						; size = 4
_share_begin_cleanup PROC
; Line 880
	push	ebp
	mov	ebp, esp
	push	esi
; Line 882
	mov	esi, esp
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 883
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 885
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_try_cleanup
	add	esp, 4
; Line 886
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_share_begin_cleanup ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_ssh_sharing_downstream_disconnected:PROC
EXTRN	_del234:PROC
EXTRN	_count234:PROC
EXTRN	_safemalloc:PROC
EXTRN	_ssh_delete_sharing_channel:PROC
EXTRN	_ssh_send_packet_from_downstream:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_index234:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$87582 = -564					; size = 4
_packet$87579 = -560					; size = 4
_pos$87562 = -556					; size = 4
_packet$87561 = -548					; size = 256
_pos$87538 = -288					; size = 4
_packet$87537 = -280					; size = 256
_fwd$ = -20						; size = 4
_chan$ = -16						; size = 4
_hc$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cs$ = 8						; size = 4
_share_try_cleanup PROC
; Line 762
	push	ebp
	mov	ebp, esp
	sub	esp, 564				; 00000234H
	push	edi
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 141				; 0000008dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN13@share_try_:
; Line 774
	push	0
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16436]
	push	ecx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax
	cmp	DWORD PTR _hc$[ebp], 0
	je	$LN12@share_try_
; Line 778
	mov	DWORD PTR _pos$87538[ebp], 0
; Line 780
	mov	edx, DWORD PTR _hc$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx], al
	mov	edx, DWORD PTR _hc$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+1], al
	mov	edx, DWORD PTR _hc$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+2], al
	mov	edx, DWORD PTR _pos$87538[ebp]
	mov	eax, DWORD PTR _hc$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _packet$87537[ebp+edx+3], cl
	mov	edx, DWORD PTR _pos$87538[ebp]
	add	edx, 4
	mov	DWORD PTR _pos$87538[ebp], edx
; Line 781
	mov	eax, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+eax], 0
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+1], 0
	mov	edx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+edx+2], 0
	mov	eax, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+eax+3], 2
	mov	ecx, DWORD PTR _pos$87538[ebp]
	add	ecx, 4
	mov	DWORD PTR _pos$87538[ebp], ecx
; Line 782
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	edx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+edx], al
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+1], al
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	edx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+edx+2], al
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+3], al
	mov	edx, DWORD PTR _pos$87538[ebp]
	add	edx, 4
	mov	DWORD PTR _pos$87538[ebp], edx
; Line 783
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	mov	eax, DWORD PTR _pos$87538[ebp]
	lea	ecx, DWORD PTR _packet$87537[ebp+eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	push	OFFSET ?reason@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _pos$87538[ebp]
	mov	DWORD PTR _pos$87538[ebp], eax
; Line 784
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	edx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+edx], al
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+1], al
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	edx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+edx+2], al
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pos$87538[ebp]
	mov	BYTE PTR _packet$87537[ebp+ecx+3], al
	mov	edx, DWORD PTR _pos$87538[ebp]
	add	edx, 4
	mov	DWORD PTR _pos$87538[ebp], edx
; Line 785
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	mov	eax, DWORD PTR _pos$87538[ebp]
	lea	ecx, DWORD PTR _packet$87537[ebp+eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	push	OFFSET ?lang@?2??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _pos$87538[ebp]
	mov	DWORD PTR _pos$87538[ebp], eax
; Line 789
	push	OFFSET $SG87555
	mov	edx, DWORD PTR _pos$87538[ebp]
	push	edx
	lea	eax, DWORD PTR _packet$87537[ebp]
	push	eax
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 791
	mov	eax, DWORD PTR _hc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_remove_halfchannel
	add	esp, 8
; Line 792
	jmp	$LN13@share_try_
$LN12@share_try_:
; Line 808
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@share_try_
$LN10@share_try_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN11@share_try_:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16440]
	push	edx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
	cmp	DWORD PTR _chan$[ebp], 0
	je	$LN9@share_try_
; Line 810
	mov	DWORD PTR _pos$87562[ebp], 0
; Line 812
	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+16], 1
	je	$LN8@share_try_
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+16], 3
	je	$LN8@share_try_
; Line 813
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pos$87562[ebp]
	mov	BYTE PTR _packet$87561[ebp+ecx], al
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$87562[ebp]
	mov	BYTE PTR _packet$87561[ebp+ecx+1], al
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 8
	mov	ecx, DWORD PTR _pos$87562[ebp]
	mov	BYTE PTR _packet$87561[ebp+ecx+2], al
	mov	edx, DWORD PTR _pos$87562[ebp]
	mov	eax, DWORD PTR _chan$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _packet$87561[ebp+edx+3], cl
	mov	edx, DWORD PTR _pos$87562[ebp]
	add	edx, 4
	mov	DWORD PTR _pos$87562[ebp], edx
; Line 817
	push	OFFSET $SG87568
	mov	eax, DWORD PTR _pos$87562[ebp]
	push	eax
	lea	ecx, DWORD PTR _packet$87561[ebp]
	push	ecx
	push	97					; 00000061H
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 818
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+16], 2
	je	SHORT $LN7@share_try_
; Line 819
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+16], 1
; Line 820
	jmp	SHORT $LN8@share_try_
$LN7@share_try_:
; Line 822
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_delete_sharing_channel
	add	esp, 8
; Line 823
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_remove_channel
	add	esp, 8
; Line 824
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@share_try_:
; Line 827
	jmp	$LN10@share_try_
$LN9@share_try_:
; Line 838
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@share_try_
$LN4@share_try_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@share_try_:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16456]
	push	edx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _fwd$[ebp], eax
	cmp	DWORD PTR _fwd$[ebp], 0
	je	$LN3@share_try_
; Line 839
	mov	eax, DWORD PTR _fwd$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN2@share_try_
; Line 841
	push	1
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 256				; 00000100H
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _packet$87579[ebp], eax
; Line 842
	mov	DWORD PTR _pos$87582[ebp], 0
; Line 844
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [ecx], al
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	edx, DWORD PTR _packet$87579[ebp]
	add	edx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [edx+1], al
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [ecx+2], al
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _packet$87579[ebp]
	add	edx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _pos$87582[ebp]
	add	eax, 4
	mov	DWORD PTR _pos$87582[ebp], eax
; Line 845
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 846
	push	OFFSET ?request@?8??share_try_cleanup@@9@9
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _pos$87582[ebp]
	mov	DWORD PTR _pos$87582[ebp], eax
; Line 848
	mov	edx, DWORD PTR _packet$87579[ebp]
	add	edx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _pos$87582[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$87582[ebp], eax
; Line 850
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _pos$87582[ebp]
	add	edx, 4
	mov	DWORD PTR _pos$87582[ebp], edx
; Line 851
	mov	eax, DWORD PTR _fwd$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 852
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _pos$87582[ebp]
	mov	DWORD PTR _pos$87582[ebp], eax
; Line 854
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _packet$87579[ebp]
	add	eax, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _packet$87579[ebp]
	add	eax, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sar	edx, 8
	mov	eax, DWORD PTR _packet$87579[ebp]
	add	eax, DWORD PTR _pos$87582[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _packet$87579[ebp]
	add	ecx, DWORD PTR _pos$87582[ebp]
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	al, BYTE PTR [edx+4]
	mov	BYTE PTR [ecx+3], al
	mov	ecx, DWORD PTR _pos$87582[ebp]
	add	ecx, 4
	mov	DWORD PTR _pos$87582[ebp], ecx
; Line 859
	push	OFFSET $SG87595
	mov	edx, DWORD PTR _pos$87582[ebp]
	push	edx
	mov	eax, DWORD PTR _packet$87579[ebp]
	push	eax
	push	80					; 00000050H
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 860
	mov	eax, DWORD PTR _packet$87579[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 862
	mov	ecx, DWORD PTR _fwd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_remove_forwarding
	add	esp, 8
; Line 863
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN2@share_try_:
; Line 865
	jmp	$LN4@share_try_
$LN3@share_try_:
; Line 869
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16436]
	push	edx
	call	_count234
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@share_try_
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16440]
	push	ecx
	call	_count234
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@share_try_
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16456]
	push	eax
	call	_count234
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@share_try_
; Line 873
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_del234
	add	esp, 8
; Line 874
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_sharing_downstream_disconnected
	add	esp, 8
; Line 875
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_connstate_free
	add	esp, 4
$LN14@share_try_:
; Line 877
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@share_try_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@share_try_:
	DD	2
	DD	$LN18@share_try_
$LN18@share_try_:
	DD	-280					; fffffee8H
	DD	256					; 00000100H
	DD	$LN16@share_try_
	DD	-548					; fffffddcH
	DD	256					; 00000100H
	DD	$LN17@share_try_
$LN17@share_try_:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN16@share_try_:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_share_try_cleanup ENDP
; Function compile flags: /Odtp /RTCsu
_cs$ = 8						; size = 4
_hc$ = 12						; size = 4
_share_remove_halfchannel PROC
; Line 553
	push	ebp
	mov	ebp, esp
; Line 554
	mov	eax, DWORD PTR _hc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16436]
	push	edx
	call	_del234
	add	esp, 8
; Line 555
	mov	eax, DWORD PTR _hc$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 556
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_share_remove_halfchannel ENDP
_TEXT	ENDS
EXTRN	_ssh_sharing_remove_x11_display:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_chan$ = 12						; size = 4
_share_remove_channel PROC
; Line 615
	push	ebp
	mov	ebp, esp
; Line 616
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16440]
	push	edx
	call	_del234
	add	esp, 8
; Line 617
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16444]
	push	edx
	call	_del234
	add	esp, 8
; Line 618
	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@share_remo
; Line 620
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_sharing_remove_x11_display
	add	esp, 8
$LN1@share_remo:
; Line 621
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 622
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 623
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_share_remove_channel ENDP
; Function compile flags: /Odtp /RTCsu
_cs$ = 8						; size = 4
_fwd$ = 12						; size = 4
_share_remove_forwarding PROC
; Line 699
	push	ebp
	mov	ebp, esp
; Line 700
	mov	eax, DWORD PTR _fwd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16456]
	push	edx
	call	_del234
	add	esp, 8
; Line 701
	mov	eax, DWORD PTR _fwd$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 702
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_share_remove_forwarding ENDP
_TEXT	ENDS
PUBLIC	_share_xchannel_add_message
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_msg$ = -8						; size = 4
_block$ = -4						; size = 4
_xc$ = 8						; size = 4
_type$ = 12						; size = 4
_len$ = 16						; size = 4
_share_xchannel_add_message PROC
; Line 965
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 974
	push	1
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _block$[ebp], eax
; Line 975
	mov	ecx, DWORD PTR _block$[ebp]
	mov	DWORD PTR _msg$[ebp], ecx
; Line 976
	mov	edx, DWORD PTR _block$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 977
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 978
	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 983
	mov	edx, DWORD PTR _xc$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN2@share_xcha@2
; Line 984
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 985
	jmp	SHORT $LN1@share_xcha@2
$LN2@share_xcha@2:
; Line 986
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@share_xcha@2:
; Line 987
	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [edx], 0
; Line 988
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 990
	mov	eax, DWORD PTR _msg$[ebp]
; Line 991
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_xchannel_add_message ENDP
_TEXT	ENDS
PUBLIC	_share_dead_xchannel_respond
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_id$87721 = -20						; size = 4
_wantreplypos$87719 = -12				; size = 4
_msg$87717 = -8						; size = 4
_delete$ = -4						; size = 4
_cs$ = 8						; size = 4
_xc$ = 12						; size = 4
_share_dead_xchannel_respond PROC
; Line 995
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1000
	mov	DWORD PTR _delete$[ebp], 0
$LN7@share_dead:
; Line 1001
	mov	eax, DWORD PTR _xc$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN6@share_dead
; Line 1002
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _msg$87717[ebp], edx
; Line 1003
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _msg$87717[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
; Line 1005
	mov	eax, DWORD PTR _msg$87717[ebp]
	cmp	DWORD PTR [eax+4], 98			; 00000062H
	jne	$LN5@share_dead
	mov	ecx, DWORD PTR _msg$87717[ebp]
	cmp	DWORD PTR [ecx+12], 4
	jle	$LN5@share_dead
; Line 1010
	mov	edx, DWORD PTR _msg$87717[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _msg$87717[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _wantreplypos$87719[ebp], eax
; Line 1012
	cmp	DWORD PTR _wantreplypos$87719[ebp], 0
	jle	SHORT $LN4@share_dead
	mov	eax, DWORD PTR _msg$87717[ebp]
	mov	ecx, DWORD PTR _wantreplypos$87719[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN4@share_dead
	mov	edx, DWORD PTR _msg$87717[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _wantreplypos$87719[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	test	edx, edx
	je	SHORT $LN4@share_dead
; Line 1014
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR _id$87721[ebp], cl
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _id$87721[ebp+1], al
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	mov	BYTE PTR _id$87721[ebp+2], dl
	mov	eax, DWORD PTR _xc$[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR _id$87721[ebp+3], cl
; Line 1017
	push	OFFSET $SG87726
	push	4
	lea	edx, DWORD PTR _id$87721[ebp]
	push	edx
	push	100					; 00000064H
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
$LN4@share_dead:
; Line 1018
	jmp	SHORT $LN3@share_dead
$LN5@share_dead:
; Line 1019
	mov	edx, DWORD PTR _msg$87717[ebp]
	cmp	DWORD PTR [edx+4], 97			; 00000061H
	jne	SHORT $LN3@share_dead
; Line 1023
	mov	DWORD PTR _delete$[ebp], 1
$LN3@share_dead:
; Line 1026
	mov	eax, DWORD PTR _msg$87717[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1027
	jmp	$LN7@share_dead
$LN6@share_dead:
; Line 1028
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 1029
	cmp	DWORD PTR _delete$[ebp], 0
	je	SHORT $LN8@share_dead
; Line 1030
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_delete_sharing_channel
	add	esp, 8
; Line 1031
	mov	ecx, DWORD PTR _xc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_remove_xchannel
	add	esp, 8
$LN8@share_dead:
; Line 1033
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@share_dead
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@share_dead:
	DD	1
	DD	$LN11@share_dead
$LN11@share_dead:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@share_dead
$LN10@share_dead:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_share_dead_xchannel_respond ENDP
; Function compile flags: /Odtp /RTCsu
_cs$ = 8						; size = 4
_xc$ = 12						; size = 4
_share_remove_xchannel PROC
; Line 664
	push	ebp
	mov	ebp, esp
; Line 665
	mov	eax, DWORD PTR _xc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16448]
	push	edx
	call	_del234
	add	esp, 8
; Line 666
	mov	eax, DWORD PTR _xc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16452]
	push	edx
	call	_del234
	add	esp, 8
; Line 667
	mov	eax, DWORD PTR _xc$[ebp]
	push	eax
	call	_share_xchannel_free
	add	esp, 4
; Line 668
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_share_remove_xchannel ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -8						; size = 4
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_getstring_size PROC
; Line 950
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 952
	lea	eax, DWORD PTR _ret$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _datalen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_getstring_inner
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@getstring_
; Line 953
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN3@getstring_
; Line 954
	jmp	SHORT $LN3@getstring_
$LN2@getstring_:
; Line 955
	or	eax, -1
$LN3@getstring_:
; Line 956
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@getstring_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@getstring_:
	DD	1
	DD	$LN6@getstring_
$LN6@getstring_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@getstring_
$LN5@getstring_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_getstring_size ENDP
_TEXT	ENDS
EXTRN	_dupprintf:PROC
EXTRN	_toint:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_data$ = -4						; size = 4
_vdata$ = 8						; size = 4
_datalen$ = 12						; size = 4
_out$ = 16						; size = 4
_outlen$ = 20						; size = 4
_getstring_inner PROC
; Line 922
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 923
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 926
	cmp	DWORD PTR _datalen$[ebp], 4
	jge	SHORT $LN5@getstring_@2
; Line 927
	xor	eax, eax
	jmp	$LN6@getstring_@2
$LN5@getstring_@2:
; Line 929
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	push	edx
	call	_toint
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 930
	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN3@getstring_@2
	mov	edx, DWORD PTR _datalen$[ebp]
	sub	edx, 4
	cmp	DWORD PTR _len$[ebp], edx
	jle	SHORT $LN4@getstring_@2
$LN3@getstring_@2:
; Line 931
	xor	eax, eax
	jmp	SHORT $LN6@getstring_@2
$LN4@getstring_@2:
; Line 933
	cmp	DWORD PTR _outlen$[ebp], 0
	je	SHORT $LN2@getstring_@2
; Line 934
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _outlen$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@getstring_@2:
; Line 935
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN1@getstring_@2
; Line 936
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	push	OFFSET $SG87669
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@getstring_@2:
; Line 937
	mov	eax, 1
$LN6@getstring_@2:
; Line 938
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getstring_inner ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_share_xchannel_confirmation
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_msg$87745 = -24					; size = 4
_window_adjust$ = -16					; size = 8
__$ArrayPad$ = -4					; size = 4
_cs$ = 8						; size = 4
_xc$ = 12						; size = 4
_chan$ = 16						; size = 4
_downstream_window$ = 20				; size = 4
_share_xchannel_confirmation PROC
; Line 1039
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
$LN3@share_xcha@3:
; Line 1045
	mov	eax, DWORD PTR _xc$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN2@share_xcha@3
; Line 1046
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _msg$87745[ebp], edx
; Line 1047
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _msg$87745[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
; Line 1049
	mov	eax, DWORD PTR _msg$87745[ebp]
	cmp	DWORD PTR [eax+12], 4
	jl	SHORT $LN1@share_xcha@3
; Line 1050
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _msg$87745[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _msg$87745[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 8
	mov	edx, DWORD PTR _msg$87745[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+2], cl
	mov	ecx, DWORD PTR _msg$87745[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _chan$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+3], cl
$LN1@share_xcha@3:
; Line 1052
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$87745[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _msg$87745[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _msg$87745[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 1054
	mov	ecx, DWORD PTR _msg$87745[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1055
	jmp	$LN3@share_xcha@3
$LN2@share_xcha@3:
; Line 1062
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _window_adjust$[ebp], al
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _window_adjust$[ebp+1], dl
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 8
	mov	BYTE PTR _window_adjust$[ebp+2], cl
	mov	edx, DWORD PTR _xc$[ebp]
	mov	al, BYTE PTR [edx+4]
	mov	BYTE PTR _window_adjust$[ebp+3], al
; Line 1063
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR _downstream_window$[ebp]
	sub	edx, DWORD PTR [ecx+12]
	shr	edx, 24					; 00000018H
	mov	BYTE PTR _window_adjust$[ebp+4], dl
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _downstream_window$[ebp]
	sub	ecx, DWORD PTR [eax+12]
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _window_adjust$[ebp+5], cl
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR _downstream_window$[ebp]
	sub	eax, DWORD PTR [edx+12]
	shr	eax, 8
	mov	BYTE PTR _window_adjust$[ebp+6], al
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR _downstream_window$[ebp]
	sub	edx, DWORD PTR [ecx+12]
	mov	BYTE PTR _window_adjust$[ebp+7], dl
; Line 1067
	push	OFFSET $SG87759
	push	8
	lea	eax, DWORD PTR _window_adjust$[ebp]
	push	eax
	push	93					; 0000005dH
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1068
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@share_xcha@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@share_xcha@3:
	DD	1
	DD	$LN7@share_xcha@3
$LN7@share_xcha@3:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN6@share_xcha@3
$LN6@share_xcha@3:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	106					; 0000006aH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_share_xchannel_confirmation ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv95 = -64						; size = 4
_header$87515 = -56					; size = 9
_this_len$87501 = -40					; size = 4
_len$87487 = -36					; size = 4
_header$87486 = -28					; size = 13
_upkt$87484 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_cs$ = 8						; size = 4
_type$ = 12						; size = 4
_pkt$ = 16						; size = 4
_pktlen$ = 20						; size = 4
_chan$ = 24						; size = 4
_send_packet_to_downstream PROC
; Line 707
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 708
	mov	eax, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@send_packe
; Line 709
	jmp	$LN9@send_packe
$LN8@send_packe:
; Line 711
	cmp	DWORD PTR _type$[ebp], 94		; 0000005eH
	jne	$LN7@send_packe
; Line 727
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	DWORD PTR _upkt$87484[ebp], ecx
; Line 730
	mov	edx, DWORD PTR _upkt$87484[ebp]
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _upkt$87484[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _upkt$87484[ebp]
	movzx	edx, BYTE PTR [ecx+6]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _upkt$87484[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	or	eax, edx
	push	eax
	call	_toint
	add	esp, 4
	mov	DWORD PTR _len$87487[ebp], eax
; Line 731
	mov	eax, DWORD PTR _upkt$87484[ebp]
	add	eax, 8
	mov	DWORD PTR _upkt$87484[ebp], eax
; Line 733
	cmp	DWORD PTR _len$87487[ebp], 0
	jl	SHORT $LN5@send_packe
	mov	ecx, DWORD PTR _pktlen$[ebp]
	sub	ecx, 8
	cmp	DWORD PTR _len$87487[ebp], ecx
	jle	SHORT $LN4@send_packe
$LN5@send_packe:
; Line 734
	mov	edx, DWORD PTR _pktlen$[ebp]
	sub	edx, 8
	mov	DWORD PTR _len$87487[ebp], edx
$LN4@send_packe:
; Line 738
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _len$87487[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN11@send_packe
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN12@send_packe
$LN11@send_packe:
	mov	ecx, DWORD PTR _len$87487[ebp]
	mov	DWORD PTR tv95[ebp], ecx
$LN12@send_packe:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _this_len$87501[ebp], edx
; Line 739
	mov	eax, DWORD PTR _this_len$87501[ebp]
	add	eax, 9
	sar	eax, 24					; 00000018H
	mov	BYTE PTR _header$87486[ebp], al
	mov	ecx, DWORD PTR _this_len$87501[ebp]
	add	ecx, 9
	sar	ecx, 16					; 00000010H
	mov	BYTE PTR _header$87486[ebp+1], cl
	mov	edx, DWORD PTR _this_len$87501[ebp]
	add	edx, 9
	sar	edx, 8
	mov	BYTE PTR _header$87486[ebp+2], dl
	mov	eax, DWORD PTR _this_len$87501[ebp]
	add	eax, 9
	mov	BYTE PTR _header$87486[ebp+3], al
; Line 740
	mov	cl, BYTE PTR _type$[ebp]
	mov	BYTE PTR _header$87486[ebp+4], cl
; Line 741
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _header$87486[ebp+5], al
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _header$87486[ebp+6], dl
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 8
	mov	BYTE PTR _header$87486[ebp+7], cl
	mov	edx, DWORD PTR _chan$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _header$87486[ebp+8], al
; Line 742
	mov	ecx, DWORD PTR _this_len$87501[ebp]
	sar	ecx, 24					; 00000018H
	mov	BYTE PTR _header$87486[ebp+9], cl
	mov	edx, DWORD PTR _this_len$87501[ebp]
	sar	edx, 16					; 00000010H
	mov	BYTE PTR _header$87486[ebp+10], dl
	mov	eax, DWORD PTR _this_len$87501[ebp]
	sar	eax, 8
	mov	BYTE PTR _header$87486[ebp+11], al
	mov	cl, BYTE PTR _this_len$87501[ebp]
	mov	BYTE PTR _header$87486[ebp+12], cl
; Line 743
	mov	esi, esp
	push	13					; 0000000dH
	lea	edx, DWORD PTR _header$87486[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 744
	mov	esi, esp
	mov	eax, DWORD PTR _this_len$87501[ebp]
	push	eax
	mov	ecx, DWORD PTR _upkt$87484[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 745
	mov	edx, DWORD PTR _len$87487[ebp]
	sub	edx, DWORD PTR _this_len$87501[ebp]
	mov	DWORD PTR _len$87487[ebp], edx
; Line 746
	mov	eax, DWORD PTR _upkt$87484[ebp]
	add	eax, DWORD PTR _this_len$87501[ebp]
	mov	DWORD PTR _upkt$87484[ebp], eax
; Line 747
	cmp	DWORD PTR _len$87487[ebp], 0
	jg	$LN4@send_packe
; Line 748
	jmp	$LN9@send_packe
$LN7@send_packe:
; Line 754
	mov	ecx, DWORD PTR _pktlen$[ebp]
	add	ecx, 1
	sar	ecx, 24					; 00000018H
	mov	BYTE PTR _header$87515[ebp], cl
	mov	edx, DWORD PTR _pktlen$[ebp]
	add	edx, 1
	sar	edx, 16					; 00000010H
	mov	BYTE PTR _header$87515[ebp+1], dl
	mov	eax, DWORD PTR _pktlen$[ebp]
	add	eax, 1
	sar	eax, 8
	mov	BYTE PTR _header$87515[ebp+2], al
	mov	ecx, DWORD PTR _pktlen$[ebp]
	add	ecx, 1
	mov	BYTE PTR _header$87515[ebp+3], cl
; Line 755
	mov	dl, BYTE PTR _type$[ebp]
	mov	BYTE PTR _header$87515[ebp+4], dl
; Line 756
	mov	esi, esp
	push	5
	lea	eax, DWORD PTR _header$87515[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 757
	mov	esi, esp
	mov	ecx, DWORD PTR _pktlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkt$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@send_packe:
; Line 759
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@send_packe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@send_packe:
	DD	2
	DD	$LN15@send_packe
$LN15@send_packe:
	DD	-28					; ffffffe4H
	DD	13					; 0000000dH
	DD	$LN13@send_packe
	DD	-56					; ffffffc8H
	DD	9
	DD	$LN14@send_packe
$LN14@send_packe:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN13@send_packe:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_send_packet_to_downstream ENDP
_TEXT	ENDS
PUBLIC	_share_xchannel_failure
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_id$ = -8						; size = 4
_cs$ = 8						; size = 4
_xc$ = 12						; size = 4
_share_xchannel_failure PROC
; Line 1072
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1078
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR _id$[ebp], cl
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _id$[ebp+1], al
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	mov	BYTE PTR _id$[ebp+2], dl
	mov	eax, DWORD PTR _xc$[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR _id$[ebp+3], cl
; Line 1081
	push	OFFSET $SG87771
	push	4
	lea	edx, DWORD PTR _id$[ebp]
	push	edx
	push	97					; 00000061H
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1087
	mov	edx, DWORD PTR _xc$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 1088
	mov	eax, DWORD PTR _xc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_dead_xchannel_respond
	add	esp, 8
; Line 1089
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_xcha@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@share_xcha@4:
	DD	1
	DD	$LN4@share_xcha@4
$LN4@share_xcha@4:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@share_xcha@4
$LN3@share_xcha@4:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_share_xchannel_failure ENDP
_TEXT	ENDS
PUBLIC	_share_setup_x11_channel
EXTRN	_x11_make_greeting:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pktlen$ = -40						; size = 4
_pkt$ = -36						; size = 4
_greeting_len$ = -28					; size = 4
_greeting$ = -20					; size = 4
_msg$ = -16						; size = 4
_xc$ = -12						; size = 4
_chan$ = -8						; size = 4
_cs$ = -4						; size = 4
_csv$ = 8						; size = 4
_chanv$ = 12						; size = 4
_upstream_id$ = 16					; size = 4
_server_id$ = 20					; size = 4
_server_currwin$ = 24					; size = 4
_server_maxpkt$ = 28					; size = 4
_client_adjusted_window$ = 32				; size = 4
_peer_addr$ = 36					; size = 4
_peer_port$ = 40					; size = 4
_endian$ = 44						; size = 4
_protomajor$ = 48					; size = 4
_protominor$ = 52					; size = 4
_initial_data$ = 56					; size = 4
_initial_len$ = 60					; size = 4
_share_setup_x11_channel PROC
; Line 1098
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1099
	mov	eax, DWORD PTR _csv$[ebp]
	mov	DWORD PTR _cs$[ebp], eax
; Line 1100
	mov	ecx, DWORD PTR _chanv$[ebp]
	mov	DWORD PTR _chan$[ebp], ecx
; Line 1114
	mov	edx, DWORD PTR _server_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _upstream_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_add_xchannel
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _xc$[ebp], eax
; Line 1118
	lea	edx, DWORD PTR _greeting_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _peer_port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _peer_addr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _protominor$[ebp]
	push	edx
	mov	eax, DWORD PTR _protomajor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _endian$[ebp]
	push	ecx
	call	_x11_make_greeting
	add	esp, 36					; 00000024H
	mov	DWORD PTR _greeting$[ebp], eax
; Line 1120
	mov	edx, DWORD PTR _initial_len$[ebp]
	mov	eax, DWORD PTR _greeting_len$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	push	94					; 0000005eH
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	call	_share_xchannel_add_message
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$[ebp], eax
; Line 1123
	mov	eax, DWORD PTR _greeting_len$[ebp]
	add	eax, DWORD PTR _initial_len$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR _greeting_len$[ebp]
	add	eax, DWORD PTR _initial_len$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+5], al
	mov	eax, DWORD PTR _greeting_len$[ebp]
	add	eax, DWORD PTR _initial_len$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+6], al
	mov	eax, DWORD PTR _greeting_len$[ebp]
	add	eax, DWORD PTR _initial_len$[ebp]
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+7], al
; Line 1124
	mov	eax, DWORD PTR _greeting_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _greeting$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 8
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1125
	mov	ecx, DWORD PTR _initial_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _initial_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _greeting_len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1126
	mov	ecx, DWORD PTR _greeting$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1128
	mov	edx, DWORD PTR _client_adjusted_window$[ebp]
	add	edx, DWORD PTR _greeting_len$[ebp]
	mov	eax, DWORD PTR _xc$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1133
	mov	ecx, DWORD PTR _peer_addr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 27					; 0000001bH
	mov	DWORD PTR _pktlen$[ebp], eax
; Line 1134
	push	1
	mov	edx, DWORD PTR _pktlen$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pkt$[ebp], eax
; Line 1135
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax+3], 3
; Line 1136
	push	3
	push	OFFSET $SG87821
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, 4
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1137
	mov	edx, DWORD PTR _server_id$[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax+7], dl
	mov	ecx, DWORD PTR _server_id$[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+8], cl
	mov	eax, DWORD PTR _server_id$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+9], al
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	al, BYTE PTR _server_id$[ebp]
	mov	BYTE PTR [edx+10], al
; Line 1138
	mov	ecx, DWORD PTR _server_currwin$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+11], cl
	mov	eax, DWORD PTR _server_currwin$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+12], al
	mov	edx, DWORD PTR _server_currwin$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax+13], dl
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	dl, BYTE PTR _server_currwin$[ebp]
	mov	BYTE PTR [ecx+14], dl
; Line 1139
	mov	eax, DWORD PTR _server_maxpkt$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+15], al
	mov	edx, DWORD PTR _server_maxpkt$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax+16], dl
	mov	ecx, DWORD PTR _server_maxpkt$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+17], cl
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	cl, BYTE PTR _server_maxpkt$[ebp]
	mov	BYTE PTR [eax+18], cl
; Line 1140
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+19], al
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+20], al
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+21], al
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+22], al
; Line 1141
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _peer_addr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, 23					; 00000017H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1142
	mov	ebx, DWORD PTR _peer_port$[ebp]
	sar	ebx, 24					; 00000018H
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+eax+23], bl
	mov	ebx, DWORD PTR _peer_port$[ebp]
	sar	ebx, 16					; 00000010H
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+eax+24], bl
	mov	ebx, DWORD PTR _peer_port$[ebp]
	sar	ebx, 8
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+eax+25], bl
	mov	edx, DWORD PTR _peer_addr$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	dl, BYTE PTR _peer_port$[ebp]
	mov	BYTE PTR [ecx+eax+26], dl
; Line 1143
	push	0
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	push	90					; 0000005aH
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 1144
	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1149
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@share_setu
; Line 1151
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_sharing_remove_x11_display
	add	esp, 8
; Line 1152
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 1153
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1154
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+24], -1
; Line 1155
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 1156
	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN2@share_setu:
; Line 1158
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@share_setu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	ebx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@share_setu:
	DD	1
	DD	$LN5@share_setu
$LN5@share_setu:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN4@share_setu
$LN4@share_setu:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_share_setup_x11_channel ENDP
_TEXT	ENDS
EXTRN	_add234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xc$ = -4						; size = 4
_cs$ = 8						; size = 4
_upstream_id$ = 12					; size = 4
_server_id$ = 16					; size = 4
_share_add_xchannel PROC
; Line 628
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 629
	push	24					; 00000018H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _xc$[ebp], eax
; Line 630
	mov	eax, DWORD PTR _xc$[ebp]
	mov	ecx, DWORD PTR _upstream_id$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 631
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 632
	mov	ecx, DWORD PTR _xc$[ebp]
	mov	DWORD PTR [ecx+8], 1
; Line 633
	mov	edx, DWORD PTR _xc$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _xc$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 634
	mov	ecx, DWORD PTR _xc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16448]
	push	eax
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _xc$[ebp]
	je	SHORT $LN2@share_add_
; Line 635
	mov	ecx, DWORD PTR _xc$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 636
	xor	eax, eax
	jmp	SHORT $LN3@share_add_
$LN2@share_add_:
; Line 638
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16452]
	push	ecx
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _xc$[ebp]
	je	SHORT $LN1@share_add_
; Line 639
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16448]
	push	ecx
	call	_del234
	add	esp, 8
; Line 640
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 641
	xor	eax, eax
	jmp	SHORT $LN3@share_add_
$LN1@share_add_:
; Line 643
	mov	eax, DWORD PTR _xc$[ebp]
$LN3@share_add_:
; Line 644
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_add_xchannel ENDP
_TEXT	ENDS
PUBLIC	_share_got_pkt_from_server
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -36						; size = 4
_msg$87931 = -32					; size = 4
_xc$ = -28						; size = 4
_chan$ = -24						; size = 4
_server_id$ = -20					; size = 4
_upstream_id$ = -16					; size = 4
_id_pos$ = -12						; size = 4
_globreq$ = -8						; size = 4
_cs$ = -4						; size = 4
_csv$ = 8						; size = 4
_type$ = 12						; size = 4
_pkt$ = 16						; size = 4
_pktlen$ = 20						; size = 4
_share_got_pkt_from_server PROC
; Line 1162
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1163
	mov	eax, DWORD PTR _csv$[ebp]
	mov	DWORD PTR _cs$[ebp], eax
; Line 1170
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], ecx
	mov	edx, DWORD PTR tv64[ebp]
	sub	edx, 81					; 00000051H
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 19			; 00000013H
	ja	$LN1@share_got_
	mov	eax, DWORD PTR tv64[ebp]
	movzx	ecx, BYTE PTR $LN35@share_got_[eax]
	jmp	DWORD PTR $LN36@share_got_[ecx*4]
$LN27@share_got_:
; Line 1173
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16460]
	mov	DWORD PTR _globreq$[ebp], eax
; Line 1174
	mov	ecx, DWORD PTR _globreq$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN26@share_got_
; Line 1175
	cmp	DWORD PTR _type$[ebp], 82		; 00000052H
	jne	SHORT $LN25@share_got_
; Line 1176
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_remove_forwarding
	add	esp, 8
; Line 1177
	jmp	SHORT $LN24@share_got_
$LN25@share_got_:
; Line 1178
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+8], 1
$LN24@share_got_:
; Line 1179
	jmp	SHORT $LN23@share_got_
$LN26@share_got_:
; Line 1180
	mov	ecx, DWORD PTR _globreq$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN23@share_got_
; Line 1181
	cmp	DWORD PTR _type$[ebp], 81		; 00000051H
	jne	SHORT $LN23@share_got_
; Line 1182
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_remove_forwarding
	add	esp, 8
$LN23@share_got_:
; Line 1185
	mov	edx, DWORD PTR _globreq$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN20@share_got_
; Line 1186
	push	0
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
$LN20@share_got_:
; Line 1188
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+16460], eax
; Line 1189
	mov	ecx, DWORD PTR _globreq$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1190
	mov	edx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [edx+16460], 0
	jne	SHORT $LN19@share_got_
; Line 1191
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+16464], 0
$LN19@share_got_:
; Line 1193
	mov	ecx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN18@share_got_
; Line 1196
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_try_cleanup
	add	esp, 4
$LN18@share_got_:
; Line 1199
	jmp	$LN30@share_got_
$LN17@share_got_:
; Line 1202
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _id_pos$[ebp], eax
; Line 1203
	cmp	DWORD PTR _id_pos$[ebp], 0
	jge	SHORT $LN32@share_got_
	push	1203					; 000004b3H
	push	OFFSET $SG87881
	push	OFFSET $SG87882
	call	__wassert
	add	esp, 12					; 0000000cH
$LN32@share_got_:
; Line 1204
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _server_id$[ebp], ecx
; Line 1205
	mov	ecx, DWORD PTR _server_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_add_halfchannel
	add	esp, 8
; Line 1207
	push	0
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 1208
	jmp	$LN30@share_got_
$LN16@share_got_:
; Line 1225
	cmp	DWORD PTR _pktlen$[ebp], 4
	jge	SHORT $LN33@share_got_
	push	1225					; 000004c9H
	push	OFFSET $SG87894
	push	OFFSET $SG87895
	call	__wassert
	add	esp, 12					; 0000000cH
$LN33@share_got_:
; Line 1226
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _upstream_id$[ebp], eax
; Line 1227
	mov	eax, DWORD PTR _upstream_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_find_channel_by_upstream
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
	cmp	DWORD PTR _chan$[ebp], 0
	je	$LN15@share_got_
; Line 1231
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	eax, DWORD PTR _chan$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+3], cl
; Line 1232
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 1237
	cmp	DWORD PTR _type$[ebp], 91		; 0000005bH
	jne	SHORT $LN14@share_got_
; Line 1238
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+16], 3
	jne	SHORT $LN13@share_got_
	cmp	DWORD PTR _pktlen$[ebp], 8
	jl	SHORT $LN13@share_got_
; Line 1240
	push	0
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+6]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_channel_set_server_id
	add	esp, 16					; 00000010H
; Line 1241
	mov	edx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN13@share_got_
; Line 1245
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_try_cleanup
	add	esp, 4
$LN13@share_got_:
; Line 1247
	jmp	$LN11@share_got_
$LN14@share_got_:
; Line 1248
	cmp	DWORD PTR _type$[ebp], 92		; 0000005cH
	jne	SHORT $LN10@share_got_
; Line 1249
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_delete_sharing_channel
	add	esp, 8
; Line 1250
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_remove_channel
	add	esp, 8
	jmp	SHORT $LN11@share_got_
$LN10@share_got_:
; Line 1251
	cmp	DWORD PTR _type$[ebp], 97		; 00000061H
	jne	SHORT $LN11@share_got_
; Line 1252
	mov	edx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [edx+16], 1
	jne	SHORT $LN7@share_got_
; Line 1254
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_delete_sharing_channel
	add	esp, 8
; Line 1255
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_remove_channel
	add	esp, 8
; Line 1256
	mov	ecx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN6@share_got_
; Line 1260
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_try_cleanup
	add	esp, 4
$LN6@share_got_:
; Line 1262
	jmp	SHORT $LN11@share_got_
$LN7@share_got_:
; Line 1263
	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+16], 2
$LN11@share_got_:
; Line 1266
	jmp	SHORT $LN4@share_got_
$LN15@share_got_:
; Line 1267
	mov	ecx, DWORD PTR _upstream_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_find_xchannel_by_upstream
	add	esp, 8
	mov	DWORD PTR _xc$[ebp], eax
	cmp	DWORD PTR _xc$[ebp], 0
	je	SHORT $LN4@share_got_
; Line 1274
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	call	_share_xchannel_add_message
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$87931[ebp], eax
; Line 1275
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$87931[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1279
	mov	ecx, DWORD PTR _xc$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN4@share_got_
; Line 1280
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_dead_xchannel_respond
	add	esp, 8
$LN4@share_got_:
; Line 1282
	jmp	SHORT $LN30@share_got_
$LN1@share_got_:
; Line 1285
	mov	ecx, OFFSET $SG87935
	test	ecx, ecx
	je	SHORT $LN30@share_got_
	push	1285					; 00000505H
	push	OFFSET $SG87936
	push	OFFSET $SG87937
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@share_got_:
; Line 1288
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN36@share_got_:
	DD	$LN27@share_got_
	DD	$LN17@share_got_
	DD	$LN16@share_got_
	DD	$LN1@share_got_
$LN35@share_got_:
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
_share_got_pkt_from_server ENDP
; Function compile flags: /Odtp /RTCsu
_hc$ = -4						; size = 4
_cs$ = 8						; size = 4
_server_id$ = 12					; size = 4
_share_add_halfchannel PROC
; Line 531
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 532
	push	4
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax
; Line 533
	mov	eax, DWORD PTR _hc$[ebp]
	mov	ecx, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 534
	mov	edx, DWORD PTR _hc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16436]
	push	ecx
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _hc$[ebp]
	je	SHORT $LN2@share_add_@2
; Line 536
	mov	edx, DWORD PTR _hc$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 537
	xor	eax, eax
	jmp	SHORT $LN3@share_add_@2
; Line 538
	jmp	SHORT $LN3@share_add_@2
$LN2@share_add_@2:
; Line 539
	mov	eax, DWORD PTR _hc$[ebp]
$LN3@share_add_@2:
; Line 541
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_add_halfchannel ENDP
; Function compile flags: /Odtp /RTCsu
_cs$ = 8						; size = 4
_chan$ = 12						; size = 4
_server_id$ = 16					; size = 4
_newstate$ = 20						; size = 4
_share_channel_set_server_id PROC
; Line 590
	push	ebp
	mov	ebp, esp
; Line 591
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 592
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR _newstate$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 593
	cmp	DWORD PTR _newstate$[ebp], 3
	jne	SHORT $LN3@share_chan
	push	593					; 00000251H
	push	OFFSET $SG87377
	push	OFFSET $SG87378
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@share_chan:
; Line 594
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16444]
	push	ecx
	call	_add234
	add	esp, 8
; Line 595
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_share_channel_set_server_id ENDP
_TEXT	ENDS
EXTRN	_find234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dummychan$ = -44					; size = 40
_cs$ = 8						; size = 4
_upstream_id$ = 12					; size = 4
_share_find_channel_by_upstream PROC
; Line 599
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 601
	mov	eax, DWORD PTR _upstream_id$[ebp]
	mov	DWORD PTR _dummychan$[ebp+4], eax
; Line 602
	push	0
	lea	ecx, DWORD PTR _dummychan$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16440]
	push	eax
	call	_find234
	add	esp, 12					; 0000000cH
; Line 603
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_find
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@share_find:
	DD	1
	DD	$LN4@share_find
$LN4@share_find:
	DD	-44					; ffffffd4H
	DD	40					; 00000028H
	DD	$LN3@share_find
$LN3@share_find:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
_share_find_channel_by_upstream ENDP
; Function compile flags: /Odtp /RTCsu
_dummyxc$ = -28					; size = 24
_cs$ = 8						; size = 4
_upstream_id$ = 12					; size = 4
_share_find_xchannel_by_upstream PROC
; Line 648
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 650
	mov	eax, DWORD PTR _upstream_id$[ebp]
	mov	DWORD PTR _dummyxc$[ebp], eax
; Line 651
	push	0
	lea	ecx, DWORD PTR _dummyxc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16448]
	push	eax
	call	_find234
	add	esp, 12					; 0000000cH
; Line 652
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_find@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@share_find@2:
	DD	1
	DD	$LN4@share_find@2
$LN4@share_find@2:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN3@share_find@2
$LN3@share_find@2:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	120					; 00000078H
	DB	99					; 00000063H
	DB	0
_share_find_xchannel_by_upstream ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -28						; size = 4
_buf$88328 = -24					; size = 4
_buf$88300 = -20					; size = 4
_buf$88295 = -16					; size = 4
_crLine$88276 = -12					; size = 4
_c$ = -5						; size = 1
_cs$ = -4						; size = 4
_plug$ = 8						; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_share_receive PROC
; Line 1768
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1769
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _cs$[ebp], eax
; Line 1774
	mov	ecx, DWORD PTR _cs$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _crLine$88276[ebp], ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 1817		; 00000719H
	jg	SHORT $LN39@share_rece
	cmp	DWORD PTR tv66[ebp], 1817		; 00000719H
	je	$LN11@share_rece
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN34@share_rece
	cmp	DWORD PTR tv66[ebp], 1781		; 000006f5H
	je	SHORT $LN26@share_rece
	jmp	$dead$88297
$LN39@share_rece:
	cmp	DWORD PTR tv66[ebp], 1830		; 00000726H
	je	$LN1@share_rece
	jmp	$dead$88297
$LN34@share_rece:
; Line 1779
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16432], 0
$LN33@share_rece:
; Line 1780
	mov	edx, 1
	test	edx, edx
	je	$LN32@share_rece
$LN28@share_rece:
; Line 1781
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN27@share_rece
	mov	eax, DWORD PTR _crLine$88276[ebp]
	mov	DWORD PTR [eax], 1781			; 000006f5H
	mov	eax, 1
	jmp	$LN37@share_rece
$LN26@share_rece:
	jmp	SHORT $LN28@share_rece
$LN27@share_rece:
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$[ebp], al
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN28@share_rece
; Line 1782
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN25@share_rece
; Line 1783
	jmp	SHORT $LN32@share_rece
$LN25@share_rece:
; Line 1784
	mov	ecx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [ecx+16432], 16400		; 00004010H
	jb	SHORT $LN24@share_rece
; Line 1785
	push	OFFSET $SG88296
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _buf$88295[ebp], eax
; Line 1786
	mov	edx, DWORD PTR _buf$88295[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_disconnect
	add	esp, 8
; Line 1787
	mov	ecx, DWORD PTR _buf$88295[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1788
	jmp	$dead$88297
$LN24@share_rece:
; Line 1790
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16432]
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+eax+32], dl
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16432]
	add	ecx, 1
	mov	edx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [edx+16432], ecx
; Line 1791
	jmp	$LN33@share_rece
$LN32@share_rece:
; Line 1799
	mov	eax, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [eax+16432], 46		; 0000002eH
	jb	SHORT $LN22@share_rece
	push	46					; 0000002eH
	push	OFFSET ?expected_verstring_prefix@?1??share_receive@@9@9
	mov	ecx, DWORD PTR _cs$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@share_rece
$LN22@share_rece:
; Line 1800
	push	OFFSET $SG88301
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _buf$88300[ebp], eax
; Line 1801
	mov	edx, DWORD PTR _buf$88300[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_disconnect
	add	esp, 8
; Line 1802
	mov	ecx, DWORD PTR _buf$88300[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1803
	jmp	$dead$88297
$LN23@share_rece:
; Line 1805
	mov	edx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [edx+16432], 0
	jle	SHORT $LN21@share_rece
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16432]
	mov	edx, DWORD PTR _cs$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+31]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN21@share_rece
; Line 1806
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16432]
	sub	edx, 1
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+16432], edx
$LN21@share_rece:
; Line 1809
	mov	ecx, DWORD PTR _cs$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16432]
	push	eax
	push	OFFSET $SG88303
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_sharing_logf
	add	esp, 20					; 00000014H
$LN20@share_rece:
; Line 1814
	mov	eax, 1
	test	eax, eax
	je	$dead$88297
; Line 1815
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16432], 0
$LN18@share_rece:
; Line 1816
	mov	edx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [edx+16432], 4
	jge	SHORT $LN17@share_rece
$LN13@share_rece:
; Line 1817
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN12@share_rece
	mov	eax, DWORD PTR _crLine$88276[ebp]
	mov	DWORD PTR [eax], 1817			; 00000719H
	mov	eax, 1
	jmp	$LN37@share_rece
$LN11@share_rece:
	jmp	SHORT $LN13@share_rece
$LN12@share_rece:
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$[ebp], al
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN13@share_rece
; Line 1818
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16432]
	mov	edx, DWORD PTR _cs$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx+32], al
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16432]
	add	edx, 1
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+16432], edx
; Line 1819
	jmp	SHORT $LN18@share_rece
$LN17@share_rece:
; Line 1820
	mov	ecx, DWORD PTR _cs$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _cs$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _cs$[ebp]
	movzx	ecx, BYTE PTR [eax+34]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _cs$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	or	edx, ecx
	add	edx, 4
	push	edx
	call	_toint
	add	esp, 4
	mov	edx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 1822
	mov	eax, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [eax+28], 5
	jl	SHORT $LN9@share_rece
	mov	ecx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [ecx+28], 16400		; 00004010H
	jbe	SHORT $LN8@share_rece
$LN9@share_rece:
; Line 1824
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	push	OFFSET $SG88330
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _buf$88328[ebp], eax
; Line 1825
	mov	ecx, DWORD PTR _buf$88328[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_disconnect
	add	esp, 8
; Line 1826
	mov	eax, DWORD PTR _buf$88328[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1827
	jmp	$dead$88297
$LN8@share_rece:
; Line 1829
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [ecx+16432]
	cmp	eax, DWORD PTR [edx+28]
	jge	SHORT $LN7@share_rece
$LN3@share_rece:
; Line 1830
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@share_rece
	mov	ecx, DWORD PTR _crLine$88276[ebp]
	mov	DWORD PTR [ecx], 1830			; 00000726H
	mov	eax, 1
	jmp	$LN37@share_rece
$LN1@share_rece:
	jmp	SHORT $LN3@share_rece
$LN2@share_rece:
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN3@share_rece
; Line 1831
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16432]
	mov	eax, DWORD PTR _cs$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+edx+32], cl
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16432]
	add	eax, 1
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16432], eax
; Line 1832
	jmp	SHORT $LN8@share_rece
$LN7@share_rece:
; Line 1835
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16432]
	sub	eax, 5
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	add	ecx, 37					; 00000025H
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	movzx	eax, BYTE PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_got_pkt_from_downstream
	add	esp, 16					; 00000010H
; Line 1836
	jmp	$LN20@share_rece
$dead$88297:
; Line 1839
	mov	edx, DWORD PTR _crLine$88276[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, 1
$LN37@share_rece:
; Line 1840
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_receive ENDP
; Function compile flags: /Odtp /RTCsu
_pos$ = -12						; size = 4
_packet$ = -8						; size = 4
_msglen$ = -4						; size = 4
_cs$ = 8						; size = 4
_message$ = 12						; size = 4
_share_disconnect PROC
; Line 890
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 892
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _msglen$[ebp], eax
; Line 893
	push	1
	mov	ecx, DWORD PTR _msglen$[ebp]
	add	ecx, 256				; 00000100H
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _packet$[ebp], eax
; Line 894
	mov	DWORD PTR _pos$[ebp], 0
; Line 896
	mov	edx, DWORD PTR _packet$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [eax+1], 0
	mov	ecx, DWORD PTR _packet$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [ecx+2], 0
	mov	edx, DWORD PTR _packet$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [edx+3], 2
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 898
	mov	ecx, DWORD PTR _msglen$[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _packet$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _msglen$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _packet$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _msglen$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _packet$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR _msglen$[ebp]
	mov	BYTE PTR [ecx+3], dl
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 899
	mov	ecx, DWORD PTR _msglen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 900
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR _msglen$[ebp]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 902
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	edx, DWORD PTR _packet$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [edx], al
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _packet$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [ecx+1], al
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	edx, DWORD PTR _packet$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [edx+2], al
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _packet$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 4
	mov	DWORD PTR _pos$[ebp], edx
; Line 903
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	push	OFFSET ?lang@?1??share_disconnect@@9@9
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 905
	push	0
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _packet$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 907
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_begin_cleanup
	add	esp, 4
; Line 908
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_disconnect ENDP
_TEXT	ENDS
EXTRN	_ssh_sharing_add_x11_display:PROC
EXTRN	_x11_dehexify:PROC
EXTRN	_x11_identify_auth_proto:PROC
EXTRN	_ssh_agent_forwarding_permitted:PROC
EXTRN	_ssh_alloc_sharing_channel:PROC
EXTRN	_ssh_sharing_queue_global_request:PROC
EXTRN	_ssh_alloc_sharing_rportfwd:PROC
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -180						; size = 4
_recipient_id$88212 = -172				; size = 4
_buf$88197 = -164					; size = 4
_pos$88195 = -160					; size = 4
_datalen$88194 = -156					; size = 4
_protolen$88193 = -152					; size = 4
_auth_proto$88192 = -148				; size = 4
_auth_data$88191 = -144					; size = 4
_auth_proto_str$88190 = -140				; size = 4
_screen$88189 = -136					; size = 4
_single_connection$88188 = -132				; size = 4
_want_reply$88187 = -128				; size = 4
_server_id$88178 = -124					; size = 4
_buf$88174 = -120					; size = 4
_recipient_id$88166 = -112				; size = 4
_server_id$88157 = -104					; size = 4
_downstream_window$88121 = -100				; size = 4
_wantreplypos$88044 = -96				; size = 4
_old_wantreply$88040 = -92				; size = 4
_fwd$88016 = -88					; size = 4
_host$88015 = -84					; size = 4
_port$88014 = -80					; size = 4
_orig_wantreply$88013 = -76				; size = 4
_wantreplypos$88012 = -72				; size = 4
_old_wantreply$88000 = -68				; size = 4
_host$87976 = -64					; size = 4
_ret$87975 = -60					; size = 4
_port$87974 = -56					; size = 4
_orig_wantreply$87973 = -52				; size = 4
_wantreplypos$87972 = -48				; size = 4
_err$ = -44						; size = 4
_xc$ = -40						; size = 4
_hc$ = -36						; size = 4
_chan$ = -32						; size = 4
_globreq$ = -28						; size = 4
_server_id$ = -24					; size = 4
_new_id$ = -20						; size = 4
_old_id$ = -16						; size = 4
_id_pos$ = -12						; size = 4
_fwd$ = -8						; size = 4
_request_name$ = -4					; size = 4
_cs$ = 8						; size = 4
_type$ = 12						; size = 4
_pkt$ = 16						; size = 4
_pktlen$ = 20						; size = 4
_share_got_pkt_from_downstream PROC
; Line 1293
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1302
	mov	DWORD PTR _err$[ebp], 0
; Line 1304
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 99			; 00000063H
	ja	$LN1@share_got_@2
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN69@share_got_@2[edx]
	jmp	DWORD PTR $LN74@share_got_@2[eax*4]
$LN61@share_got_@2:
; Line 1312
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_begin_cleanup
	add	esp, 4
; Line 1313
	jmp	$LN64@share_got_@2
$LN60@share_got_@2:
; Line 1323
	mov	edx, DWORD PTR _pktlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	call	_getstring
	add	esp, 8
	mov	DWORD PTR _request_name$[ebp], eax
; Line 1324
	cmp	DWORD PTR _request_name$[ebp], 0
	jne	SHORT $LN59@share_got_@2
; Line 1325
	push	OFFSET $SG87968
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1326
	jmp	$confused$87969
$LN59@share_got_@2:
; Line 1329
	push	OFFSET $SG87971
	mov	ecx, DWORD PTR _request_name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN58@share_got_@2
; Line 1333
	mov	edx, DWORD PTR _request_name$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1339
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _wantreplypos$87972[ebp], eax
; Line 1340
	cmp	DWORD PTR _wantreplypos$87972[ebp], 0
	jl	SHORT $LN56@share_got_@2
	mov	edx, DWORD PTR _wantreplypos$87972[ebp]
	cmp	edx, DWORD PTR _pktlen$[ebp]
	jl	SHORT $LN57@share_got_@2
$LN56@share_got_@2:
; Line 1341
	push	OFFSET $SG87979
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1342
	jmp	$confused$87969
$LN57@share_got_@2:
; Line 1344
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _wantreplypos$87972[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _orig_wantreply$87973[ebp], ecx
; Line 1346
	mov	edx, DWORD PTR _wantreplypos$87972[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pktlen$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _wantreplypos$87972[ebp]
	mov	edx, DWORD PTR _pkt$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	push	eax
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _port$87974[ebp], eax
; Line 1347
	mov	ecx, DWORD PTR _wantreplypos$87972[ebp]
	mov	edx, DWORD PTR _port$87974[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _port$87974[ebp], eax
; Line 1348
	cmp	DWORD PTR _port$87974[ebp], 0
	jl	SHORT $LN54@share_got_@2
	mov	ecx, DWORD PTR _pktlen$[ebp]
	sub	ecx, 4
	cmp	DWORD PTR _port$87974[ebp], ecx
	jle	SHORT $LN55@share_got_@2
$LN54@share_got_@2:
; Line 1349
	push	OFFSET $SG87982
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1350
	jmp	$confused$87969
$LN55@share_got_@2:
; Line 1353
	mov	edx, DWORD PTR _wantreplypos$87972[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pktlen$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _wantreplypos$87972[ebp]
	mov	edx, DWORD PTR _pkt$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	push	eax
	call	_getstring
	add	esp, 8
	mov	DWORD PTR _host$87976[ebp], eax
; Line 1354
	cmp	DWORD PTR _host$87976[ebp], 0
	jne	SHORT $LN66@share_got_@2
	push	1354					; 0000054aH
	push	OFFSET $SG87985
	push	OFFSET $SG87986
	call	__wassert
	add	esp, 12					; 0000000cH
$LN66@share_got_@2:
; Line 1355
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _port$87974[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _port$87974[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _port$87974[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _port$87974[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _port$87974[ebp], eax
; Line 1365
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _port$87974[ebp]
	push	ecx
	mov	edx, DWORD PTR _host$87976[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_alloc_sharing_rportfwd
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$87975[ebp], eax
; Line 1366
	cmp	DWORD PTR _ret$87975[ebp], 0
	jne	SHORT $LN53@share_got_@2
; Line 1367
	cmp	DWORD PTR _orig_wantreply$87973[ebp], 0
	je	SHORT $LN52@share_got_@2
; Line 1369
	push	0
	push	0
	push	OFFSET $SG87998
	push	82					; 00000052H
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
$LN52@share_got_@2:
; Line 1371
	jmp	$LN51@share_got_@2
$LN53@share_got_@2:
; Line 1379
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _wantreplypos$87972[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _old_wantreply$88000[ebp], edx
; Line 1380
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _wantreplypos$87972[ebp]
	mov	BYTE PTR [eax], 1
; Line 1383
	mov	ecx, DWORD PTR _old_wantreply$88000[ebp]
	neg	ecx
	sbb	ecx, ecx
	not	ecx
	and	ecx, OFFSET $SG88002
	push	ecx
	mov	edx, DWORD PTR _pktlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1384
	mov	ecx, DWORD PTR _port$87974[ebp]
	push	ecx
	mov	edx, DWORD PTR _host$87976[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_add_forwarding
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fwd$[ebp], eax
; Line 1385
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_sharing_queue_global_request
	add	esp, 8
; Line 1387
	cmp	DWORD PTR _fwd$[ebp], 0
	je	SHORT $LN51@share_got_@2
; Line 1388
	push	16					; 00000010H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _globreq$[ebp], eax
; Line 1389
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1390
	mov	eax, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [eax+16464], 0
	je	SHORT $LN49@share_got_@2
; Line 1391
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16464]
	mov	eax, DWORD PTR _globreq$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1392
	jmp	SHORT $LN48@share_got_@2
$LN49@share_got_@2:
; Line 1393
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	DWORD PTR [ecx+16460], edx
$LN48@share_got_@2:
; Line 1394
	mov	eax, DWORD PTR _globreq$[ebp]
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1395
	mov	edx, DWORD PTR _globreq$[ebp]
	mov	eax, DWORD PTR _orig_wantreply$87973[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1396
	mov	ecx, DWORD PTR _globreq$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN51@share_got_@2:
; Line 1400
	mov	edx, DWORD PTR _host$87976[ebp]
	push	edx
	call	_safefree
	add	esp, 4
	jmp	$LN47@share_got_@2
$LN58@share_got_@2:
; Line 1401
	push	OFFSET $SG88011
	mov	eax, DWORD PTR _request_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN46@share_got_@2
; Line 1406
	mov	ecx, DWORD PTR _request_name$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1412
	mov	edx, DWORD PTR _pktlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _wantreplypos$88012[ebp], eax
; Line 1413
	cmp	DWORD PTR _wantreplypos$88012[ebp], 0
	jl	SHORT $LN44@share_got_@2
	mov	ecx, DWORD PTR _wantreplypos$88012[ebp]
	cmp	ecx, DWORD PTR _pktlen$[ebp]
	jl	SHORT $LN45@share_got_@2
$LN44@share_got_@2:
; Line 1414
	push	OFFSET $SG88019
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1415
	jmp	$confused$87969
$LN45@share_got_@2:
; Line 1417
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _wantreplypos$88012[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _orig_wantreply$88013[ebp], eax
; Line 1419
	mov	ecx, DWORD PTR _wantreplypos$88012[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _pktlen$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _wantreplypos$88012[ebp]
	mov	ecx, DWORD PTR _pkt$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _port$88014[ebp], eax
; Line 1420
	mov	eax, DWORD PTR _wantreplypos$88012[ebp]
	mov	ecx, DWORD PTR _port$88014[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _port$88014[ebp], edx
; Line 1421
	cmp	DWORD PTR _port$88014[ebp], 0
	jl	SHORT $LN42@share_got_@2
	mov	eax, DWORD PTR _pktlen$[ebp]
	sub	eax, 4
	cmp	DWORD PTR _port$88014[ebp], eax
	jle	SHORT $LN43@share_got_@2
$LN42@share_got_@2:
; Line 1422
	push	OFFSET $SG88022
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1423
	jmp	$confused$87969
$LN43@share_got_@2:
; Line 1426
	mov	ecx, DWORD PTR _wantreplypos$88012[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _pktlen$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _wantreplypos$88012[ebp]
	mov	ecx, DWORD PTR _pkt$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	call	_getstring
	add	esp, 8
	mov	DWORD PTR _host$88015[ebp], eax
; Line 1427
	cmp	DWORD PTR _host$88015[ebp], 0
	jne	SHORT $LN67@share_got_@2
	push	1427					; 00000593H
	push	OFFSET $SG88025
	push	OFFSET $SG88026
	call	__wassert
	add	esp, 12					; 0000000cH
$LN67@share_got_@2:
; Line 1428
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _port$88014[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _port$88014[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _port$88014[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _port$88014[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	mov	DWORD PTR _port$88014[ebp], edx
; Line 1433
	mov	edx, DWORD PTR _port$88014[ebp]
	push	edx
	mov	eax, DWORD PTR _host$88015[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_find_forwarding
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fwd$88016[ebp], eax
; Line 1434
	cmp	DWORD PTR _fwd$88016[ebp], 0
	jne	SHORT $LN41@share_got_@2
; Line 1435
	cmp	DWORD PTR _orig_wantreply$88013[ebp], 0
	je	SHORT $LN40@share_got_@2
; Line 1437
	push	0
	push	0
	push	OFFSET $SG88038
	push	82					; 00000052H
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
$LN40@share_got_@2:
; Line 1439
	jmp	SHORT $LN39@share_got_@2
$LN41@share_got_@2:
; Line 1446
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _wantreplypos$88012[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _old_wantreply$88040[ebp], ecx
; Line 1447
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _wantreplypos$88012[ebp]
	mov	BYTE PTR [edx], 1
; Line 1450
	mov	eax, DWORD PTR _old_wantreply$88040[ebp]
	neg	eax
	sbb	eax, eax
	not	eax
	and	eax, OFFSET $SG88042
	push	eax
	mov	ecx, DWORD PTR _pktlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkt$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1451
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_sharing_queue_global_request
	add	esp, 8
$LN39@share_got_@2:
; Line 1454
	mov	ecx, DWORD PTR _host$88015[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1455
	jmp	SHORT $LN47@share_got_@2
$LN46@share_got_@2:
; Line 1462
	mov	edx, DWORD PTR _request_name$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1464
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _wantreplypos$88044[ebp], eax
; Line 1465
	cmp	DWORD PTR _wantreplypos$88044[ebp], 0
	jl	SHORT $LN36@share_got_@2
	mov	edx, DWORD PTR _wantreplypos$88044[ebp]
	cmp	edx, DWORD PTR _pktlen$[ebp]
	jl	SHORT $LN37@share_got_@2
$LN36@share_got_@2:
; Line 1466
	push	OFFSET $SG88047
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1467
	jmp	$confused$87969
$LN37@share_got_@2:
; Line 1469
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _wantreplypos$88044[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN47@share_got_@2
; Line 1471
	push	0
	push	0
	push	OFFSET $SG88050
	push	82					; 00000052H
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
$LN47@share_got_@2:
; Line 1473
	jmp	$LN64@share_got_@2
$LN34@share_got_@2:
; Line 1477
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	call	_getstring_size
	add	esp, 8
	mov	DWORD PTR _id_pos$[ebp], eax
; Line 1478
	cmp	DWORD PTR _id_pos$[ebp], 0
	jl	SHORT $LN32@share_got_@2
	mov	edx, DWORD PTR _pktlen$[ebp]
	sub	edx, 12					; 0000000cH
	cmp	DWORD PTR _id_pos$[ebp], edx
	jle	SHORT $LN33@share_got_@2
$LN32@share_got_@2:
; Line 1479
	push	OFFSET $SG88054
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1480
	jmp	$confused$87969
$LN33@share_got_@2:
; Line 1483
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _old_id$[ebp], ecx
; Line 1484
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_alloc_sharing_channel
	add	esp, 8
	mov	DWORD PTR _new_id$[ebp], eax
; Line 1486
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _id_pos$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _id_pos$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _id_pos$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	or	eax, edx
	push	eax
	push	3
	push	0
	mov	eax, DWORD PTR _new_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_add_channel
	add	esp, 24					; 00000018H
; Line 1487
	mov	eax, DWORD PTR _new_id$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _id_pos$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _new_id$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _new_id$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	mov	cl, BYTE PTR _new_id$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 1489
	push	0
	mov	edx, DWORD PTR _pktlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1490
	jmp	$LN64@share_got_@2
$LN31@share_got_@2:
; Line 1493
	cmp	DWORD PTR _pktlen$[ebp], 16		; 00000010H
	jge	SHORT $LN30@share_got_@2
; Line 1494
	push	OFFSET $SG88078
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1495
	jmp	$confused$87969
$LN30@share_got_@2:
; Line 1498
	mov	DWORD PTR _id_pos$[ebp], 4
; Line 1499
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _id_pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	mov	DWORD PTR _old_id$[ebp], edx
; Line 1501
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _server_id$[ebp], eax
; Line 1503
	mov	DWORD PTR _hc$[ebp], 0
	mov	DWORD PTR _xc$[ebp], 0
; Line 1504
	mov	eax, DWORD PTR _server_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_find_halfchannel
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax
	cmp	DWORD PTR _hc$[ebp], 0
	je	SHORT $LN29@share_got_@2
; Line 1505
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_alloc_sharing_channel
	add	esp, 8
	mov	DWORD PTR _new_id$[ebp], eax
; Line 1506
	jmp	SHORT $LN28@share_got_@2
$LN29@share_got_@2:
; Line 1507
	mov	eax, DWORD PTR _server_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_find_xchannel_by_server
	add	esp, 8
	mov	DWORD PTR _xc$[ebp], eax
	cmp	DWORD PTR _xc$[ebp], 0
	je	SHORT $LN27@share_got_@2
; Line 1508
	mov	edx, DWORD PTR _xc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _new_id$[ebp], eax
; Line 1509
	jmp	SHORT $LN28@share_got_@2
$LN27@share_got_@2:
; Line 1510
	mov	ecx, DWORD PTR _server_id$[ebp]
	push	ecx
	push	OFFSET $SG88104
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax
; Line 1511
	jmp	$confused$87969
$LN28@share_got_@2:
; Line 1514
	mov	edx, DWORD PTR _new_id$[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _id_pos$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _new_id$[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _new_id$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _id_pos$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _id_pos$[ebp]
	mov	al, BYTE PTR _new_id$[ebp]
	mov	BYTE PTR [edx+3], al
; Line 1517
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	or	edx, ecx
	push	edx
	push	0
	mov	edx, DWORD PTR _server_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_add_channel
	add	esp, 24					; 00000018H
	mov	DWORD PTR _chan$[ebp], eax
; Line 1519
	cmp	DWORD PTR _hc$[ebp], 0
	je	SHORT $LN25@share_got_@2
; Line 1521
	push	0
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1522
	mov	edx, DWORD PTR _hc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_remove_halfchannel
	add	esp, 8
	jmp	SHORT $LN24@share_got_@2
$LN25@share_got_@2:
; Line 1523
	cmp	DWORD PTR _xc$[ebp], 0
	je	SHORT $LN24@share_got_@2
; Line 1524
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	or	edx, ecx
	mov	DWORD PTR _downstream_window$88121[ebp], edx
; Line 1525
	cmp	DWORD PTR _downstream_window$88121[ebp], 256 ; 00000100H
	jae	SHORT $LN22@share_got_@2
; Line 1526
	mov	edx, DWORD PTR _downstream_window$88121[ebp]
	push	edx
	push	OFFSET $SG88131
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax
; Line 1527
	jmp	$confused$87969
$LN22@share_got_@2:
; Line 1529
	mov	eax, DWORD PTR _downstream_window$88121[ebp]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_xchannel_confirmation
	add	esp, 16					; 00000010H
; Line 1530
	mov	ecx, DWORD PTR _xc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_remove_xchannel
	add	esp, 8
$LN24@share_got_@2:
; Line 1533
	jmp	$LN64@share_got_@2
$LN21@share_got_@2:
; Line 1536
	cmp	DWORD PTR _pktlen$[ebp], 4
	jge	SHORT $LN20@share_got_@2
; Line 1537
	push	OFFSET $SG88134
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1538
	jmp	$confused$87969
$LN20@share_got_@2:
; Line 1541
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _server_id$[ebp], ecx
; Line 1543
	mov	ecx, DWORD PTR _server_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_find_halfchannel
	add	esp, 8
	mov	DWORD PTR _hc$[ebp], eax
	cmp	DWORD PTR _hc$[ebp], 0
	je	SHORT $LN19@share_got_@2
; Line 1545
	push	0
	mov	eax, DWORD PTR _pktlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1546
	mov	edx, DWORD PTR _hc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_remove_halfchannel
	add	esp, 8
; Line 1547
	jmp	SHORT $LN18@share_got_@2
$LN19@share_got_@2:
; Line 1548
	mov	ecx, DWORD PTR _server_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_find_xchannel_by_server
	add	esp, 8
	mov	DWORD PTR _xc$[ebp], eax
	cmp	DWORD PTR _xc$[ebp], 0
	je	SHORT $LN17@share_got_@2
; Line 1549
	mov	eax, DWORD PTR _xc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_xchannel_failure
	add	esp, 8
; Line 1550
	jmp	SHORT $LN18@share_got_@2
$LN17@share_got_@2:
; Line 1551
	mov	edx, DWORD PTR _server_id$[ebp]
	push	edx
	push	OFFSET $SG88151
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax
; Line 1552
	jmp	$confused$87969
$LN18@share_got_@2:
; Line 1555
	jmp	$LN64@share_got_@2
$LN15@share_got_@2:
; Line 1568
	cmp	DWORD PTR _type$[ebp], 98		; 00000062H
	jne	$LN14@share_got_@2
	mov	eax, DWORD PTR _pktlen$[ebp]
	sub	eax, 4
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, 4
	push	ecx
	call	_getstring
	add	esp, 8
	mov	DWORD PTR _request_name$[ebp], eax
	cmp	DWORD PTR _request_name$[ebp], 0
	je	$LN14@share_got_@2
; Line 1595
	push	OFFSET $SG88156
	mov	edx, DWORD PTR _request_name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN13@share_got_@2
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_agent_forwarding_permitted
	add	esp, 4
	test	eax, eax
	jne	$LN13@share_got_@2
; Line 1596
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _server_id$88157[ebp], ecx
; Line 1599
	mov	ecx, DWORD PTR _request_name$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1601
	mov	edx, DWORD PTR _server_id$88157[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_find_channel_by_server
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
; Line 1602
	cmp	DWORD PTR _chan$[ebp], 0
	je	SHORT $LN12@share_got_@2
; Line 1603
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 24					; 00000018H
	mov	BYTE PTR _recipient_id$88166[ebp], dl
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _recipient_id$88166[ebp+1], cl
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	mov	BYTE PTR _recipient_id$88166[ebp+2], al
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _recipient_id$88166[ebp+3], dl
; Line 1605
	push	0
	push	4
	lea	eax, DWORD PTR _recipient_id$88166[ebp]
	push	eax
	push	100					; 00000064H
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 1606
	jmp	SHORT $LN11@share_got_@2
$LN12@share_got_@2:
; Line 1608
	mov	edx, DWORD PTR _server_id$88157[ebp]
	push	edx
	push	OFFSET $SG88175
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _buf$88174[ebp], eax
; Line 1609
	mov	eax, DWORD PTR _buf$88174[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_disconnect
	add	esp, 8
; Line 1610
	mov	edx, DWORD PTR _buf$88174[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1611
	jmp	$LN64@share_got_@2
$LN11@share_got_@2:
; Line 1613
	jmp	$LN64@share_got_@2
$LN13@share_got_@2:
; Line 1625
	push	OFFSET $SG88177
	mov	eax, DWORD PTR _request_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN10@share_got_@2
; Line 1626
	mov	ecx, DWORD PTR _pkt$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	mov	DWORD PTR _server_id$88178[ebp], edx
; Line 1632
	mov	edx, DWORD PTR _request_name$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1634
	mov	eax, DWORD PTR _server_id$88178[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_find_channel_by_server
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
; Line 1635
	cmp	DWORD PTR _chan$[ebp], 0
	jne	SHORT $LN9@share_got_@2
; Line 1637
	mov	edx, DWORD PTR _server_id$88178[ebp]
	push	edx
	push	OFFSET $SG88198
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _buf$88197[ebp], eax
; Line 1638
	mov	eax, DWORD PTR _buf$88197[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_disconnect
	add	esp, 8
; Line 1639
	mov	edx, DWORD PTR _buf$88197[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1640
	jmp	$LN64@share_got_@2
$LN9@share_got_@2:
; Line 1648
	cmp	DWORD PTR _pktlen$[ebp], 17		; 00000011H
	jge	SHORT $LN8@share_got_@2
; Line 1649
	push	OFFSET $SG88200
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1650
	jmp	$confused$87969
$LN8@share_got_@2:
; Line 1652
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _want_reply$88187[ebp], ecx
; Line 1653
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _single_connection$88188[ebp], eax
; Line 1654
	mov	ecx, DWORD PTR _pktlen$[ebp]
	sub	ecx, 17					; 00000011H
	push	ecx
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, 17					; 00000011H
	push	edx
	call	_getstring
	add	esp, 8
	mov	DWORD PTR _auth_proto_str$88190[ebp], eax
; Line 1655
	mov	eax, DWORD PTR _auth_proto_str$88190[ebp]
	push	eax
	call	_x11_identify_auth_proto
	add	esp, 4
	mov	DWORD PTR _auth_proto$88192[ebp], eax
; Line 1656
	mov	ecx, DWORD PTR _auth_proto_str$88190[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1657
	mov	edx, DWORD PTR _pktlen$[ebp]
	sub	edx, 17					; 00000011H
	push	edx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, 17					; 00000011H
	push	eax
	call	_getstring_size
	add	esp, 8
	add	eax, 17					; 00000011H
	mov	DWORD PTR _pos$88195[ebp], eax
; Line 1658
	mov	ecx, DWORD PTR _pktlen$[ebp]
	sub	ecx, DWORD PTR _pos$88195[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _pos$88195[ebp]
	push	edx
	call	_getstring
	add	esp, 8
	mov	DWORD PTR _auth_data$88191[ebp], eax
; Line 1659
	mov	eax, DWORD PTR _pktlen$[ebp]
	sub	eax, DWORD PTR _pos$88195[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _pos$88195[ebp]
	push	ecx
	call	_getstring_size
	add	esp, 8
	add	eax, DWORD PTR _pos$88195[ebp]
	mov	DWORD PTR _pos$88195[ebp], eax
; Line 1661
	mov	edx, DWORD PTR _pos$88195[ebp]
	add	edx, 4
	cmp	DWORD PTR _pktlen$[ebp], edx
	jge	SHORT $LN7@share_got_@2
; Line 1662
	push	OFFSET $SG88202
	call	_dupprintf
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1663
	mov	eax, DWORD PTR _auth_data$88191[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1664
	jmp	$confused$87969
$LN7@share_got_@2:
; Line 1666
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _pos$88195[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _pos$88195[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _pos$88195[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _pos$88195[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	mov	DWORD PTR _screen$88189[ebp], edx
; Line 1668
	cmp	DWORD PTR _auth_proto$88192[ebp], 0
	jge	SHORT $LN6@share_got_@2
; Line 1672
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _recipient_id$88212[ebp], al
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _recipient_id$88212[ebp+1], dl
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 8
	mov	BYTE PTR _recipient_id$88212[ebp+2], cl
	mov	edx, DWORD PTR _chan$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _recipient_id$88212[ebp+3], al
; Line 1674
	push	0
	push	4
	lea	ecx, DWORD PTR _recipient_id$88212[ebp]
	push	ecx
	push	100					; 00000064H
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_send_packet_to_downstream
	add	esp, 20					; 00000014H
; Line 1675
	mov	eax, DWORD PTR _auth_data$88191[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1676
	jmp	$LN64@share_got_@2
$LN6@share_got_@2:
; Line 1679
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _auth_proto$88192[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1681
	mov	eax, DWORD PTR _chan$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _auth_data$88191[ebp]
	push	ecx
	call	_x11_dehexify
	add	esp, 8
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 1682
	mov	eax, DWORD PTR _auth_data$88191[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1685
	mov	ecx, DWORD PTR _chan$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	mov	eax, DWORD PTR _auth_proto$88192[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_sharing_add_x11_display
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 1686
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR _single_connection$88188[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 1693
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _protolen$88193[ebp], eax
; Line 1694
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _datalen$88194[ebp], eax
; Line 1695
	mov	ecx, DWORD PTR _datalen$88194[ebp]
	mov	edx, DWORD PTR _protolen$88193[ebp]
	lea	eax, DWORD PTR [edx+ecx+29]
	mov	DWORD PTR _pktlen$[ebp], eax
; Line 1696
	push	1
	mov	ecx, DWORD PTR _pktlen$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pkt$[ebp], eax
; Line 1697
	mov	edx, DWORD PTR _server_id$88178[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _server_id$88178[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _server_id$88178[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	al, BYTE PTR _server_id$88178[ebp]
	mov	BYTE PTR [edx+3], al
; Line 1698
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+5], 0
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax+6], 0
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+7], 7
; Line 1699
	push	7
	push	OFFSET $SG88228
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, 8
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1700
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	cl, BYTE PTR _want_reply$88187[ebp]
	mov	BYTE PTR [eax+15], cl
; Line 1701
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	al, BYTE PTR _single_connection$88188[ebp]
	mov	BYTE PTR [edx+16], al
; Line 1702
	mov	ecx, DWORD PTR _protolen$88193[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [edx+17], cl
	mov	eax, DWORD PTR _protolen$88193[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [ecx+18], al
	mov	edx, DWORD PTR _protolen$88193[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _pkt$[ebp]
	mov	BYTE PTR [eax+19], dl
	mov	ecx, DWORD PTR _pkt$[ebp]
	mov	dl, BYTE PTR _protolen$88193[ebp]
	mov	BYTE PTR [ecx+20], dl
; Line 1703
	mov	eax, DWORD PTR _protolen$88193[ebp]
	push	eax
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, 21					; 00000015H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1704
	mov	edx, DWORD PTR _datalen$88194[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pkt$[ebp]
	add	eax, DWORD PTR _protolen$88193[ebp]
	mov	BYTE PTR [eax+21], dl
	mov	ecx, DWORD PTR _datalen$88194[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _protolen$88193[ebp]
	mov	BYTE PTR [edx+22], cl
	mov	eax, DWORD PTR _datalen$88194[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _pkt$[ebp]
	add	ecx, DWORD PTR _protolen$88193[ebp]
	mov	BYTE PTR [ecx+23], al
	mov	edx, DWORD PTR _pkt$[ebp]
	add	edx, DWORD PTR _protolen$88193[ebp]
	mov	al, BYTE PTR _datalen$88194[ebp]
	mov	BYTE PTR [edx+24], al
; Line 1706
	mov	ecx, DWORD PTR _datalen$88194[ebp]
	push	ecx
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _protolen$88193[ebp]
	mov	eax, DWORD PTR _pkt$[ebp]
	lea	ecx, DWORD PTR [eax+edx+25]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1707
	mov	edx, DWORD PTR _screen$88189[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _protolen$88193[ebp]
	mov	ecx, DWORD PTR _pkt$[ebp]
	lea	eax, DWORD PTR [ecx+eax+25]
	mov	ecx, DWORD PTR _datalen$88194[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	edx, DWORD PTR _screen$88189[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _protolen$88193[ebp]
	mov	ecx, DWORD PTR _pkt$[ebp]
	lea	eax, DWORD PTR [ecx+eax+25]
	mov	ecx, DWORD PTR _datalen$88194[ebp]
	mov	BYTE PTR [eax+ecx+1], dl
	mov	edx, DWORD PTR _screen$88189[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _protolen$88193[ebp]
	mov	ecx, DWORD PTR _pkt$[ebp]
	lea	eax, DWORD PTR [ecx+eax+25]
	mov	ecx, DWORD PTR _datalen$88194[ebp]
	mov	BYTE PTR [eax+ecx+2], dl
	mov	edx, DWORD PTR _protolen$88193[ebp]
	mov	eax, DWORD PTR _pkt$[ebp]
	lea	ecx, DWORD PTR [eax+edx+25]
	mov	edx, DWORD PTR _datalen$88194[ebp]
	mov	al, BYTE PTR _screen$88189[ebp]
	mov	BYTE PTR [ecx+edx+3], al
; Line 1710
	push	0
	mov	ecx, DWORD PTR _pktlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkt$[ebp]
	push	edx
	push	98					; 00000062H
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1711
	mov	edx, DWORD PTR _pkt$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1713
	jmp	$LN64@share_got_@2
$LN10@share_got_@2:
; Line 1716
	mov	eax, DWORD PTR _request_name$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN14@share_got_@2:
; Line 1720
	push	0
	mov	ecx, DWORD PTR _pktlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkt$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_send_packet_from_downstream
	add	esp, 24					; 00000018H
; Line 1721
	cmp	DWORD PTR _type$[ebp], 97		; 00000061H
	jne	$LN5@share_got_@2
	cmp	DWORD PTR _pktlen$[ebp], 4
	jl	$LN5@share_got_@2
; Line 1722
	mov	eax, DWORD PTR _pkt$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pkt$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _server_id$[ebp], ecx
; Line 1723
	mov	ecx, DWORD PTR _server_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_find_channel_by_server
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
; Line 1724
	cmp	DWORD PTR _chan$[ebp], 0
	je	SHORT $LN5@share_got_@2
; Line 1725
	mov	eax, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [eax+16], 2
	jne	SHORT $LN3@share_got_@2
; Line 1727
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_delete_sharing_channel
	add	esp, 8
; Line 1728
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	push	ecx
	call	_share_remove_channel
	add	esp, 8
; Line 1729
	jmp	SHORT $LN5@share_got_@2
$LN3@share_got_@2:
; Line 1730
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+16], 1
$LN5@share_got_@2:
; Line 1734
	jmp	SHORT $LN64@share_got_@2
$LN1@share_got_@2:
; Line 1737
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	OFFSET $SG88256
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _err$[ebp], eax
$confused$87969:
; Line 1746
	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN68@share_got_@2
	push	1746					; 000006d2H
	push	OFFSET $SG88259
	push	OFFSET $SG88260
	call	__wassert
	add	esp, 12					; 0000000cH
$LN68@share_got_@2:
; Line 1747
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_disconnect
	add	esp, 8
; Line 1748
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN64@share_got_@2:
; Line 1751
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN73@share_got_@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN73@share_got_@2:
	DD	2
	DD	$LN72@share_got_@2
$LN72@share_got_@2:
	DD	-112					; ffffff90H
	DD	4
	DD	$LN70@share_got_@2
	DD	-172					; ffffff54H
	DD	4
	DD	$LN71@share_got_@2
$LN71@share_got_@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN70@share_got_@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
	npad	2
$LN74@share_got_@2:
	DD	$LN61@share_got_@2
	DD	$LN15@share_got_@2
	DD	$LN60@share_got_@2
	DD	$LN34@share_got_@2
	DD	$LN31@share_got_@2
	DD	$LN21@share_got_@2
	DD	$LN1@share_got_@2
$LN69@share_got_@2:
	DB	0
	DB	1
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	4
	DB	5
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
_share_got_pkt_from_downstream ENDP
; Function compile flags: /Odtp /RTCsu
_dummyhc$ = -8						; size = 4
_cs$ = 8						; size = 4
_server_id$ = 12					; size = 4
_share_find_halfchannel PROC
; Line 545
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 547
	mov	eax, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR _dummyhc$[ebp], eax
; Line 548
	push	0
	lea	ecx, DWORD PTR _dummyhc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16436]
	push	eax
	call	_find234
	add	esp, 12					; 0000000cH
; Line 549
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_find@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@share_find@3:
	DD	1
	DD	$LN4@share_find@3
$LN4@share_find@3:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@share_find@3
$LN3@share_find@3:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	104					; 00000068H
	DB	99					; 00000063H
	DB	0
_share_find_halfchannel ENDP
; Function compile flags: /Odtp /RTCsu
_chan$ = -4						; size = 4
_cs$ = 8						; size = 4
_downstream_id$ = 12					; size = 4
_upstream_id$ = 16					; size = 4
_server_id$ = 20					; size = 4
_state$ = 24						; size = 4
_maxpkt$ = 28						; size = 4
_share_add_channel PROC
; Line 561
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 562
	push	40					; 00000028H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _chan$[ebp], eax
; Line 563
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _downstream_id$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 564
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR _upstream_id$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 565
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	edx, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 566
	mov	eax, DWORD PTR _chan$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 567
	mov	edx, DWORD PTR _chan$[ebp]
	mov	eax, DWORD PTR _maxpkt$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 568
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 569
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 570
	mov	eax, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [eax+24], -1
; Line 571
	mov	ecx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 572
	mov	edx, DWORD PTR _chan$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 573
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+16440]
	push	edx
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _chan$[ebp]
	je	SHORT $LN3@share_add_@3
; Line 574
	mov	eax, DWORD PTR _chan$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 575
	xor	eax, eax
	jmp	SHORT $LN4@share_add_@3
$LN3@share_add_@3:
; Line 577
	mov	ecx, DWORD PTR _chan$[ebp]
	cmp	DWORD PTR [ecx+16], 3
	je	SHORT $LN2@share_add_@3
; Line 578
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16444]
	push	ecx
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _chan$[ebp]
	je	SHORT $LN2@share_add_@3
; Line 579
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16440]
	push	ecx
	call	_del234
	add	esp, 8
; Line 580
	mov	edx, DWORD PTR _chan$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 581
	xor	eax, eax
	jmp	SHORT $LN4@share_add_@3
$LN2@share_add_@3:
; Line 584
	mov	eax, DWORD PTR _chan$[ebp]
$LN4@share_add_@3:
; Line 585
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_add_channel ENDP
; Function compile flags: /Odtp /RTCsu
_dummychan$ = -44					; size = 40
_cs$ = 8						; size = 4
_server_id$ = 12					; size = 4
_share_find_channel_by_server PROC
; Line 607
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 609
	mov	eax, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR _dummychan$[ebp+8], eax
; Line 610
	push	0
	lea	ecx, DWORD PTR _dummychan$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16444]
	push	eax
	call	_find234
	add	esp, 12					; 0000000cH
; Line 611
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_find@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@share_find@4:
	DD	1
	DD	$LN4@share_find@4
$LN4@share_find@4:
	DD	-44					; ffffffd4H
	DD	40					; 00000028H
	DD	$LN3@share_find@4
$LN3@share_find@4:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
_share_find_channel_by_server ENDP
; Function compile flags: /Odtp /RTCsu
_dummyxc$ = -28					; size = 24
_cs$ = 8						; size = 4
_server_id$ = 12					; size = 4
_share_find_xchannel_by_server PROC
; Line 656
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 658
	mov	eax, DWORD PTR _server_id$[ebp]
	mov	DWORD PTR _dummyxc$[ebp+4], eax
; Line 659
	push	0
	lea	ecx, DWORD PTR _dummyxc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+16452]
	push	eax
	call	_find234
	add	esp, 12					; 0000000cH
; Line 660
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_find@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@share_find@5:
	DD	1
	DD	$LN4@share_find@5
$LN4@share_find@5:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN3@share_find@5
$LN3@share_find@5:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	120					; 00000078H
	DB	99					; 00000063H
	DB	0
_share_find_xchannel_by_server ENDP
_TEXT	ENDS
EXTRN	_dupstr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fwd$ = -4						; size = 4
_cs$ = 8						; size = 4
_host$ = 12						; size = 4
_port$ = 16						; size = 4
_share_add_forwarding PROC
; Line 673
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 674
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _fwd$[ebp], eax
; Line 675
	mov	eax, DWORD PTR _host$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 676
	mov	edx, DWORD PTR _fwd$[ebp]
	mov	eax, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 677
	mov	ecx, DWORD PTR _fwd$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 678
	mov	edx, DWORD PTR _fwd$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16456]
	push	ecx
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _fwd$[ebp]
	je	SHORT $LN1@share_add_@4
; Line 680
	mov	edx, DWORD PTR _fwd$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 681
	xor	eax, eax
	jmp	SHORT $LN2@share_add_@4
$LN1@share_add_@4:
; Line 683
	mov	eax, DWORD PTR _fwd$[ebp]
$LN2@share_add_@4:
; Line 684
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_add_forwarding ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -24						; size = 4
_dummyfwd$ = -16					; size = 12
_cs$ = 8						; size = 4
_host$ = 12						; size = 4
_port$ = 16						; size = 4
_share_find_forwarding PROC
; Line 688
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 690
	mov	eax, DWORD PTR _host$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _dummyfwd$[ebp], eax
; Line 691
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR _dummyfwd$[ebp+4], ecx
; Line 692
	push	0
	lea	edx, DWORD PTR _dummyfwd$[ebp]
	push	edx
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+16456]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
; Line 693
	mov	edx, DWORD PTR _dummyfwd$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 694
	mov	eax, DWORD PTR _ret$[ebp]
; Line 695
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@share_find@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@share_find@6:
	DD	1
	DD	$LN4@share_find@6
$LN4@share_find@6:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@share_find@6
$LN3@share_find@6:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	102					; 00000066H
	DB	119					; 00000077H
	DB	100					; 00000064H
	DB	0
_share_find_forwarding ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -8						; size = 4
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_getstring PROC
; Line 941
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 943
	push	0
	lea	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _datalen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_getstring_inner
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@getstring
; Line 944
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN3@getstring
; Line 945
	jmp	SHORT $LN3@getstring
$LN2@getstring:
; Line 946
	xor	eax, eax
$LN3@getstring:
; Line 947
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@getstring
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@getstring:
	DD	1
	DD	$LN6@getstring
$LN6@getstring:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@getstring
$LN5@getstring:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_getstring ENDP
; Function compile flags: /Odtp /RTCsu
_plug$ = 8						; size = 4
_bufsize$ = 12						; size = 4
_share_sent PROC
; Line 1843
	push	ebp
	mov	ebp, esp
; Line 1854
	pop	ebp
	ret	0
_share_sent ENDP
; Function compile flags: /Odtp /RTCsu
_sharestate$ = -4					; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_share_listen_closing PROC
; Line 1858
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1859
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _sharestate$[ebp], eax
; Line 1860
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN1@share_list
; Line 1862
	mov	ecx, DWORD PTR _error_msg$[ebp]
	push	ecx
	push	OFFSET $SG88361
	push	0
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh_sharing_logf
	add	esp, 16					; 00000010H
$LN1@share_list:
; Line 1863
	mov	esi, esp
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1864
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1865
	mov	eax, 1
; Line 1866
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_listen_closing ENDP
_TEXT	ENDS
PUBLIC	_share_ndownstreams
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sharestate$ = -4					; size = 4
_state$ = 8						; size = 4
_share_ndownstreams PROC
; Line 1879
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1880
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR _sharestate$[ebp], eax
; Line 1881
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_count234
	add	esp, 4
; Line 1882
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_ndownstreams ENDP
_TEXT	ENDS
PUBLIC	_share_activate
EXTRN	_strcspn:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_cs$ = -8						; size = 4
_sharestate$ = -4					; size = 4
_state$ = 8						; size = 4
_server_verstring$ = 12					; size = 4
_share_activate PROC
; Line 1885
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1890
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR _sharestate$[ebp], eax
; Line 1899
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@share_acti
$LN6@share_acti:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@share_acti:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN5@share_acti
; Line 1900
	push	OFFSET $SG88388
	mov	edx, DWORD PTR _server_verstring$[ebp]
	push	edx
	call	_strcspn
	add	esp, 8
	add	eax, DWORD PTR _server_verstring$[ebp]
	mov	DWORD PTR _server_verstring$[ebp], eax
; Line 1901
	mov	eax, DWORD PTR _server_verstring$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@share_acti
; Line 1902
	mov	edx, DWORD PTR _server_verstring$[ebp]
	add	edx, 1
	mov	DWORD PTR _server_verstring$[ebp], edx
$LN4@share_acti:
; Line 1903
	jmp	SHORT $LN6@share_acti
$LN5@share_acti:
; Line 1905
	mov	eax, DWORD PTR _server_verstring$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1908
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@share_acti
$LN2@share_acti:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@share_acti:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _cs$[ebp], eax
	cmp	DWORD PTR _cs$[ebp], 0
	je	SHORT $LN8@share_acti
; Line 1909
	mov	eax, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN10@share_acti
	push	1909					; 00000775H
	push	OFFSET $SG88396
	push	OFFSET $SG88397
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@share_acti:
; Line 1910
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_share_send_verstring
	add	esp, 4
; Line 1911
	jmp	SHORT $LN2@share_acti
$LN8@share_acti:
; Line 1912
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_activate ENDP
_TEXT	ENDS
EXTRN	_dupcat:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fullstring$ = -4					; size = 4
_cs$ = 8						; size = 4
_share_send_verstring PROC
; Line 1869
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1871
	push	0
	push	OFFSET $SG88369
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	OFFSET $SG88370
	call	_dupcat
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullstring$[ebp], eax
; Line 1872
	mov	eax, DWORD PTR _fullstring$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _fullstring$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1873
	mov	edx, DWORD PTR _fullstring$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1875
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 1876
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_send_verstring ENDP
_TEXT	ENDS
EXTRN	_ssh_sharing_downstream_connected:PROC
EXTRN	_newtree234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -20						; size = 4
tv69 = -16						; size = 4
_err$ = -12						; size = 4
_cs$ = -8						; size = 4
_sharestate$ = -4					; size = 4
_plug$ = 8						; size = 4
_constructor$ = 12					; size = 4
_ctx$ = 16						; size = 4
_share_listen_accepting PROC
; Line 1916
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1924
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _sharestate$[ebp], eax
; Line 1931
	push	16468					; 00004054H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _cs$[ebp], eax
; Line 1932
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?connection_fn_table@?1??share_listen_accepting@@9@9
; Line 1933
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1936
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _sharestate$[ebp]
	push	eax
	call	_share_find_unused_id
	add	esp, 8
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR tv69[ebp], 0
	jne	SHORT $LN4@share_list@2
	push	1
	mov	eax, DWORD PTR _sharestate$[ebp]
	push	eax
	call	_share_find_unused_id
	add	esp, 8
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN4@share_list@2
; Line 1937
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1938
	mov	eax, 1
	jmp	$LN5@share_list@2
$LN4@share_list@2:
; Line 1940
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 1941
	mov	ecx, DWORD PTR _sharestate$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN3@share_list@2
; Line 1942
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@share_list@2:
; Line 1944
	mov	esi, esp
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	DWORD PTR _constructor$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1945
	mov	esi, esp
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN2@share_list@2
; Line 1946
	mov	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1947
	xor	eax, eax
	cmp	DWORD PTR _err$[ebp], 0
	setne	al
	jmp	$LN5@share_list@2
$LN2@share_list@2:
; Line 1950
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1952
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_add234
	add	esp, 8
; Line 1954
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 1955
	mov	edx, DWORD PTR _sharestate$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN1@share_list@2
; Line 1956
	mov	eax, DWORD PTR _cs$[ebp]
	push	eax
	call	_share_send_verstring
	add	esp, 4
$LN1@share_list@2:
; Line 1958
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 1959
	mov	edx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [edx+16432], 0
; Line 1960
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 1961
	push	OFFSET _share_halfchannel_cmp
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16436], eax
; Line 1962
	push	OFFSET _share_channel_us_cmp
	call	_newtree234
	add	esp, 4
	mov	edx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [edx+16440], eax
; Line 1963
	push	OFFSET _share_channel_server_cmp
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16444], eax
; Line 1964
	push	OFFSET _share_xchannel_us_cmp
	call	_newtree234
	add	esp, 4
	mov	edx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [edx+16448], eax
; Line 1965
	push	OFFSET _share_xchannel_server_cmp
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16452], eax
; Line 1966
	push	OFFSET _share_forwarding_cmp
	call	_newtree234
	add	esp, 4
	mov	edx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [edx+16456], eax
; Line 1967
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [eax+16464], 0
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	DWORD PTR [ecx+16460], 0
; Line 1969
	mov	edx, DWORD PTR _cs$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh_sharing_downstream_connected
	add	esp, 8
; Line 1971
	xor	eax, eax
$LN5@share_list@2:
; Line 1972
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_listen_accepting ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_findrelpos234:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dummy$87170 = -32988					; size = 16468
_dummy$87162 = -16512					; size = 16468
_ret$ = -40						; size = 4
_cs$ = -36						; size = 4
_high_orig$ = -32					; size = 4
_high$ = -28						; size = 4
_mid$ = -24						; size = 4
_low$ = -20						; size = 4
_low_orig$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_sharestate$ = 8					; size = 4
_first$ = 12						; size = 4
_share_find_unused_id PROC
; Line 315
	push	ebp
	mov	ebp, esp
	mov	eax, 32992				; 000080e0H
	call	__chkstk
	push	edi
	lea	edi, DWORD PTR [ebp-32992]
	mov	ecx, 8248				; 00002038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 330
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _dummy$87162[ebp+4], eax
; Line 332
	lea	ecx, DWORD PTR _low_orig$[ebp]
	push	ecx
	push	4
	push	0
	lea	edx, DWORD PTR _dummy$87162[ebp]
	push	edx
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_findrelpos234
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cs$[ebp], eax
; Line 333
	cmp	DWORD PTR _cs$[ebp], 0
	jne	SHORT $LN5@share_find@7
; Line 334
	mov	eax, DWORD PTR _first$[ebp]
	jmp	$LN6@share_find@7
$LN5@share_find@7:
; Line 342
	mov	edx, DWORD PTR _low_orig$[ebp]
	mov	DWORD PTR _low$[ebp], edx
; Line 343
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_count234
	add	esp, 4
	mov	DWORD PTR _high_orig$[ebp], eax
	mov	edx, DWORD PTR _high_orig$[ebp]
	mov	DWORD PTR _high$[ebp], edx
$LN4@share_find@7:
; Line 344
	mov	eax, DWORD PTR _high$[ebp]
	sub	eax, DWORD PTR _low$[ebp]
	cmp	eax, 1
	jle	SHORT $LN3@share_find@7
; Line 345
	mov	eax, DWORD PTR _high$[ebp]
	add	eax, DWORD PTR _low$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 346
	mov	ecx, DWORD PTR _mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_index234
	add	esp, 8
	mov	DWORD PTR _cs$[ebp], eax
; Line 347
	mov	ecx, DWORD PTR _mid$[ebp]
	sub	ecx, DWORD PTR _low_orig$[ebp]
	add	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	cmp	DWORD PTR [edx+4], ecx
	jne	SHORT $LN2@share_find@7
; Line 348
	mov	eax, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _low$[ebp], eax
; Line 349
	jmp	SHORT $LN1@share_find@7
$LN2@share_find@7:
; Line 350
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _high$[ebp], ecx
$LN1@share_find@7:
; Line 351
	jmp	SHORT $LN4@share_find@7
$LN3@share_find@7:
; Line 365
	mov	edx, DWORD PTR _low$[ebp]
	sub	edx, DWORD PTR _low_orig$[ebp]
	mov	eax, DWORD PTR _first$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _ret$[ebp], ecx
; Line 368
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _dummy$87170[ebp+4], edx
; Line 369
	push	0
	lea	eax, DWORD PTR _dummy$87170[ebp]
	push	eax
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@share_find@7
	push	369					; 00000171H
	push	OFFSET $SG87174
	push	OFFSET $SG87175
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@share_find@7:
; Line 371
	mov	eax, DWORD PTR _ret$[ebp]
$LN6@share_find@7:
; Line 372
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@share_find@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32992				; 000080e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@share_find@7:
	DD	3
	DD	$LN12@share_find@7
$LN12@share_find@7:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@share_find@7
	DD	-16512					; ffffbf80H
	DD	16468					; 00004054H
	DD	$LN10@share_find@7
	DD	-32988					; ffff7f24H
	DD	16468					; 00004054H
	DD	$LN11@share_find@7
$LN11@share_find@7:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN10@share_find@7:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN9@share_find@7:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
_share_find_unused_id ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_halfchannel_cmp PROC
; Line 375
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 376
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 377
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 379
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN4@share_half
; Line 380
	or	eax, -1
	jmp	SHORT $LN5@share_half
	jmp	SHORT $LN5@share_half
$LN4@share_half:
; Line 381
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN2@share_half
; Line 382
	mov	eax, 1
	jmp	SHORT $LN5@share_half
; Line 383
	jmp	SHORT $LN5@share_half
$LN2@share_half:
; Line 384
	xor	eax, eax
$LN5@share_half:
; Line 385
	mov	esp, ebp
	pop	ebp
	ret	0
_share_halfchannel_cmp ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_channel_us_cmp PROC
; Line 388
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 389
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 390
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 392
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@share_chan@2
; Line 393
	or	eax, -1
	jmp	SHORT $LN5@share_chan@2
	jmp	SHORT $LN5@share_chan@2
$LN4@share_chan@2:
; Line 394
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN2@share_chan@2
; Line 395
	mov	eax, 1
	jmp	SHORT $LN5@share_chan@2
; Line 396
	jmp	SHORT $LN5@share_chan@2
$LN2@share_chan@2:
; Line 397
	xor	eax, eax
$LN5@share_chan@2:
; Line 398
	mov	esp, ebp
	pop	ebp
	ret	0
_share_channel_us_cmp ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_channel_server_cmp PROC
; Line 401
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 402
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 403
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 405
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN4@share_chan@3
; Line 406
	or	eax, -1
	jmp	SHORT $LN5@share_chan@3
	jmp	SHORT $LN5@share_chan@3
$LN4@share_chan@3:
; Line 407
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@share_chan@3
; Line 408
	mov	eax, 1
	jmp	SHORT $LN5@share_chan@3
; Line 409
	jmp	SHORT $LN5@share_chan@3
$LN2@share_chan@3:
; Line 410
	xor	eax, eax
$LN5@share_chan@3:
; Line 411
	mov	esp, ebp
	pop	ebp
	ret	0
_share_channel_server_cmp ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_xchannel_us_cmp PROC
; Line 414
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 415
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 418
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN4@share_xcha@5
; Line 419
	or	eax, -1
	jmp	SHORT $LN5@share_xcha@5
	jmp	SHORT $LN5@share_xcha@5
$LN4@share_xcha@5:
; Line 420
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN2@share_xcha@5
; Line 421
	mov	eax, 1
	jmp	SHORT $LN5@share_xcha@5
; Line 422
	jmp	SHORT $LN5@share_xcha@5
$LN2@share_xcha@5:
; Line 423
	xor	eax, eax
$LN5@share_xcha@5:
; Line 424
	mov	esp, ebp
	pop	ebp
	ret	0
_share_xchannel_us_cmp ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_xchannel_server_cmp PROC
; Line 427
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 428
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 429
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 431
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@share_xcha@6
; Line 432
	or	eax, -1
	jmp	SHORT $LN5@share_xcha@6
	jmp	SHORT $LN5@share_xcha@6
$LN4@share_xcha@6:
; Line 433
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN2@share_xcha@6
; Line 434
	mov	eax, 1
	jmp	SHORT $LN5@share_xcha@6
; Line 435
	jmp	SHORT $LN5@share_xcha@6
$LN2@share_xcha@6:
; Line 436
	xor	eax, eax
$LN5@share_xcha@6:
; Line 437
	mov	esp, ebp
	pop	ebp
	ret	0
_share_xchannel_server_cmp ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_forwarding_cmp PROC
; Line 440
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 441
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 442
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 445
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN6@share_forw
; Line 446
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN7@share_forw
	jmp	SHORT $LN7@share_forw
$LN6@share_forw:
; Line 447
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN4@share_forw
; Line 448
	or	eax, -1
	jmp	SHORT $LN7@share_forw
	jmp	SHORT $LN7@share_forw
$LN4@share_forw:
; Line 449
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN2@share_forw
; Line 450
	mov	eax, 1
	jmp	SHORT $LN7@share_forw
; Line 451
	jmp	SHORT $LN7@share_forw
$LN2@share_forw:
; Line 452
	xor	eax, eax
$LN7@share_forw:
; Line 453
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_share_forwarding_cmp ENDP
_TEXT	ENDS
PUBLIC	_ssh_connection_sharing_init
EXTRN	_ssh_connshare_log:PROC
EXTRN	_platform_ssh_share:PROC
EXTRN	_get_remote_username:PROC
EXTRN	_share_can_be_downstream:DWORD
EXTRN	_share_can_be_upstream:DWORD
EXTRN	_conf_get_int:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -84						; size = 4
tv79 = -80						; size = 4
tv73 = -76						; size = 4
_username$88455 = -72					; size = 4
_sharestate$ = -68					; size = 4
_sock$ = -60						; size = 4
_sockname$ = -52					; size = 4
_us_err$ = -44						; size = 4
_ds_err$ = -32						; size = 4
_logtext$ = -20						; size = 4
_can_downstream$ = -12					; size = 4
_can_upstream$ = -8					; size = 4
_result$ = -4						; size = 4
_host$ = 8						; size = 4
_port$ = 12						; size = 4
_conf$ = 16						; size = 4
_ssh$ = 20						; size = 4
_state$ = 24						; size = 4
_ssh_connection_sharing_init PROC
; Line 1991
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2006
	push	164					; 000000a4H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ssh_connec
; Line 2007
	xor	eax, eax
	jmp	$LN14@ssh_connec
$LN13@ssh_connec:
; Line 2009
	cmp	DWORD PTR _share_can_be_upstream, 0
	je	SHORT $LN16@ssh_connec
	push	165					; 000000a5H
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@ssh_connec
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN17@ssh_connec
$LN16@ssh_connec:
	mov	DWORD PTR tv73[ebp], 0
$LN17@ssh_connec:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _can_upstream$[ebp], edx
; Line 2011
	cmp	DWORD PTR _share_can_be_downstream, 0
	je	SHORT $LN18@ssh_connec
	push	166					; 000000a6H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@ssh_connec
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN19@ssh_connec
$LN18@ssh_connec:
	mov	DWORD PTR tv79[ebp], 0
$LN19@ssh_connec:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _can_downstream$[ebp], ecx
; Line 2012
	cmp	DWORD PTR _can_upstream$[ebp], 0
	jne	SHORT $LN12@ssh_connec
	cmp	DWORD PTR _can_downstream$[ebp], 0
	jne	SHORT $LN12@ssh_connec
; Line 2013
	xor	eax, eax
	jmp	$LN14@ssh_connec
$LN12@ssh_connec:
; Line 2033
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_get_remote_username
	add	esp, 4
	mov	DWORD PTR _username$88455[ebp], eax
; Line 2035
	cmp	DWORD PTR _port$[ebp], 22		; 00000016H
	jne	SHORT $LN11@ssh_connec
; Line 2036
	cmp	DWORD PTR _username$88455[ebp], 0
	je	SHORT $LN10@ssh_connec
; Line 2037
	mov	eax, DWORD PTR _host$[ebp]
	push	eax
	mov	ecx, DWORD PTR _username$88455[ebp]
	push	ecx
	push	OFFSET $SG88458
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sockname$[ebp], eax
; Line 2038
	jmp	SHORT $LN9@ssh_connec
$LN10@ssh_connec:
; Line 2039
	mov	edx, DWORD PTR _host$[ebp]
	push	edx
	push	OFFSET $SG88460
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _sockname$[ebp], eax
$LN9@ssh_connec:
; Line 2040
	jmp	SHORT $LN8@ssh_connec
$LN11@ssh_connec:
; Line 2041
	cmp	DWORD PTR _username$88455[ebp], 0
	je	SHORT $LN7@ssh_connec
; Line 2042
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	mov	edx, DWORD PTR _username$88455[ebp]
	push	edx
	push	OFFSET $SG88463
	call	_dupprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _sockname$[ebp], eax
; Line 2043
	jmp	SHORT $LN8@ssh_connec
$LN7@ssh_connec:
; Line 2044
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	push	OFFSET $SG88465
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sockname$[ebp], eax
$LN8@ssh_connec:
; Line 2047
	mov	edx, DWORD PTR _username$88455[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 2061
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _sharestate$[ebp], eax
; Line 2062
	mov	eax, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [eax], OFFSET ?listen_fn_table@?1??ssh_connection_sharing_init@@9@9
; Line 2063
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 2072
	mov	DWORD PTR _sock$[ebp], 0
; Line 2073
	mov	DWORD PTR _us_err$[ebp], 0
	mov	edx, DWORD PTR _us_err$[ebp]
	mov	DWORD PTR _ds_err$[ebp], edx
	mov	eax, DWORD PTR _ds_err$[ebp]
	mov	DWORD PTR _logtext$[ebp], eax
; Line 2076
	mov	ecx, DWORD PTR _can_downstream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _can_upstream$[ebp]
	push	edx
	lea	eax, DWORD PTR _us_err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ds_err$[ebp]
	push	ecx
	lea	edx, DWORD PTR _logtext$[ebp]
	push	edx
	lea	eax, DWORD PTR _sock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sharestate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ssh$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sockname$[ebp]
	push	ecx
	call	_platform_ssh_share
	add	esp, 40					; 00000028H
	mov	DWORD PTR _result$[ebp], eax
; Line 2077
	mov	edx, DWORD PTR _us_err$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds_err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _logtext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	mov	eax, DWORD PTR _ssh$[ebp]
	push	eax
	call	_ssh_connshare_log
	add	esp, 20					; 00000014H
; Line 2078
	mov	ecx, DWORD PTR _logtext$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 2079
	mov	edx, DWORD PTR _ds_err$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 2080
	mov	eax, DWORD PTR _us_err$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 2081
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv159[ebp], ecx
	cmp	DWORD PTR tv159[ebp], 0
	je	SHORT $LN3@ssh_connec
	cmp	DWORD PTR tv159[ebp], 1
	je	SHORT $LN2@ssh_connec
	cmp	DWORD PTR tv159[ebp], 2
	je	SHORT $LN1@ssh_connec
	jmp	$LN4@ssh_connec
$LN3@ssh_connec:
; Line 2088
	cmp	DWORD PTR _sock$[ebp], 0
	je	SHORT $LN20@ssh_connec
	push	2088					; 00000828H
	push	OFFSET $SG88480
	push	OFFSET $SG88481
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@ssh_connec:
; Line 2089
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2090
	mov	ecx, DWORD PTR _sharestate$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 2091
	mov	edx, DWORD PTR _sockname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 2092
	xor	eax, eax
	jmp	SHORT $LN14@ssh_connec
$LN2@ssh_connec:
; Line 2100
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2101
	mov	ecx, DWORD PTR _sharestate$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 2102
	mov	edx, DWORD PTR _sockname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 2103
	mov	eax, DWORD PTR _sock$[ebp]
	jmp	SHORT $LN14@ssh_connec
$LN1@ssh_connec:
; Line 2111
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2112
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2113
	push	OFFSET _share_connstate_cmp
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2114
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR _ssh$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 2115
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 2116
	mov	edx, DWORD PTR _sharestate$[ebp]
	mov	eax, DWORD PTR _sockname$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2117
	mov	ecx, DWORD PTR _sharestate$[ebp]
	mov	DWORD PTR [ecx+16], 1
; Line 2118
	xor	eax, eax
	jmp	SHORT $LN14@ssh_connec
$LN4@ssh_connec:
; Line 2121
	xor	eax, eax
$LN14@ssh_connec:
; Line 2122
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@ssh_connec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@ssh_connec:
	DD	4
	DD	$LN25@ssh_connec
$LN25@ssh_connec:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN21@ssh_connec
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN22@ssh_connec
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN23@ssh_connec
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN24@ssh_connec
$LN24@ssh_connec:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN23@ssh_connec:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN22@ssh_connec:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN21@ssh_connec:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_ssh_connection_sharing_init ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_share_connstate_cmp PROC
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 301
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 303
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 305
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@share_conn@2
; Line 306
	or	eax, -1
	jmp	SHORT $LN5@share_conn@2
	jmp	SHORT $LN5@share_conn@2
$LN4@share_conn@2:
; Line 307
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN2@share_conn@2
; Line 308
	mov	eax, 1
	jmp	SHORT $LN5@share_conn@2
; Line 309
	jmp	SHORT $LN5@share_conn@2
$LN2@share_conn@2:
; Line 310
	xor	eax, eax
$LN5@share_conn@2:
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	0
_share_connstate_cmp ENDP
_TEXT	ENDS
END
