; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winctrls.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG88607 DB	01H DUP (?)
	ALIGN	4

$SG88623 DB	01H DUP (?)
	ALIGN	4

$SG88637 DB	01H DUP (?)
	ALIGN	4

$SG88996 DB	01H DUP (?)
	ALIGN	4

$SG89037 DB	01H DUP (?)
	ALIGN	4

$SG89057 DB	01H DUP (?)
	ALIGN	4

$SG89072 DB	01H DUP (?)
	ALIGN	4

$SG89088 DB	01H DUP (?)
	ALIGN	4

$SG89108 DB	01H DUP (?)
	ALIGN	4

$SG89132 DB	01H DUP (?)
	ALIGN	4

$SG89134 DB	01H DUP (?)
	ALIGN	4

$SG89155 DB	01H DUP (?)
	ALIGN	4

$SG89201 DB	01H DUP (?)
	ALIGN	4

$SG89279 DB	01H DUP (?)
	ALIGN	4

$SG89324 DB	01H DUP (?)
	ALIGN	4

$SG89634 DB	01H DUP (?)
	ALIGN	4

$SG89635 DB	01H DUP (?)
	ALIGN	4

?draglistmsg@?1??winctrl_handle_command@@9@9 DD 01H DUP (?) ; `winctrl_handle_command'::`2'::draglistmsg
?custom@?BF@??winctrl_handle_command@@9@9 DD 010H DUP (?) ; `winctrl_handle_command'::`21'::custom
$SG90240 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?BIGGAP@?1??ersatztab@@9@9 DD 0fH			; `ersatztab'::`2'::BIGGAP
?MEDGAP@?1??ersatztab@@9@9 DD 03H			; `ersatztab'::`2'::MEDGAP
?percents@?1??prefslist@@9@9 DD 05H			; `prefslist'::`2'::percents
	DD	04bH
	DD	014H
CONST	ENDS
_DATA	SEGMENT
$SG88581 DB	'LISTBOX', 00H
$SG88593 DB	'STATIC', 00H
	ORG $+1
$SG88608 DB	'BUTTON', 00H
	ORG $+1
$SG88622 DB	'STATIC', 00H
	ORG $+1
$SG88624 DB	'EDIT', 00H
	ORG $+3
$SG88636 DB	'STATIC', 00H
	ORG $+1
$SG88638 DB	'COMBOBOX', 00H
	ORG $+3
$SG88661 DB	'STATIC', 00H
	ORG $+1
$SG88670 DB	'BUTTON', 00H
	ORG $+1
$SG88854 DB	'BUTTON', 00H
	ORG $+1
$SG88910 DB	'STATIC', 00H
	ORG $+1
$SG88919 DB	'STATIC', 00H
	ORG $+1
$SG88936 DB	'STATIC', 00H
	ORG $+1
$SG88937 DB	'BUTTON', 00H
	ORG $+1
$SG88950 DB	'BUTTON', 00H
	ORG $+1
$SG88973 DB	'STATIC', 00H
	ORG $+1
$SG88974 DB	'BUTTON', 00H
	ORG $+1
$SG88975 DB	'BUTTON', 00H
	ORG $+1
$SG88995 DB	'STATIC', 00H
	ORG $+1
$SG88997 DB	'EDIT', 00H
	ORG $+3
$SG89036 DB	'STATIC', 00H
	ORG $+1
$SG89038 DB	'COMBOBOX', 00H
	ORG $+3
$SG89056 DB	'STATIC', 00H
	ORG $+1
$SG89058 DB	'COMBOBOX', 00H
	ORG $+3
$SG89071 DB	'STATIC', 00H
	ORG $+1
$SG89073 DB	'COMBOBOX', 00H
	ORG $+3
$SG89087 DB	'STATIC', 00H
	ORG $+1
$SG89089 DB	'EDIT', 00H
	ORG $+3
$SG89107 DB	'STATIC', 00H
	ORG $+1
$SG89109 DB	'LISTBOX', 00H
$SG89131 DB	'STATIC', 00H
	ORG $+1
$SG89133 DB	'COMBOBOX', 00H
	ORG $+3
$SG89135 DB	'STATIC', 00H
	ORG $+1
$SG89154 DB	'STATIC', 00H
	ORG $+1
$SG89156 DB	'EDIT', 00H
	ORG $+3
$SG89157 DB	'BUTTON', 00H
	ORG $+1
$SG89187 DB	'STATIC', 00H
	ORG $+1
$SG89202 DB	'LISTBOX', 00H
$SG89204 DB	'&Up', 00H
$SG89205 DB	'BUTTON', 00H
	ORG $+1
$SG89206 DB	'&Down', 00H
	ORG $+2
$SG89207 DB	'BUTTON', 00H
	ORG $+1
$SG89325 DB	'msctls_progress32', 00H
	ORG $+2
$SG89361 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89362 DB	'!', 00H, 'd', 00H, 'p', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'h', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'c', 00H, 'u', 00H, 't'
	DB	00H, 's', 00H, '[', 00H, 's', 00H, ']', 00H, 00H, 00H
$SG89376 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89377 DB	'd', 00H, 'p', 00H, '-', 00H, '>', 00H, 's', 00H, 'h', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'c', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, '[', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG89454 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89455 DB	'r', 00H, 'e', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89457 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89458 DB	'r', 00H, 'e', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89466 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89467 DB	'r', 00H, 'e', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89527 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89528 DB	'(', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n'
	DB	00H, 's', 00H, '.', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, ')'
	DB	00H, ' ', 00H, '^', 00H, ' ', 00H, '(', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'l', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
$SG89536 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89537 DB	'n', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 's', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	'm', 00H, 'n', 00H, 's', 00H, ')', 00H, 00H, 00H
$SG89555 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89556 DB	'!', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H
	DB	'>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'i'
	DB	00H, 'c', 00H, '.', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'd', 00H
	DB	'e', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 00H, 00H
$SG89562 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89563 DB	'i', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'n', 00H, 't', 00H
	DB	'a', 00H, 'b', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 'a', 00H, 'y'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG89572 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89573 DB	'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'd', 00H, 'e', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, 's', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 'o', 00H, 'f', 00H, '(', 00H
	DB	't', 00H, 'a', 00H, 'b', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 'a'
	DB	00H, 'y', 00H, 's', 00H, ')', 00H, 00H, 00H
$SG89602 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89631 DB	'Bro&wse...', 00H
	ORG $+1
$SG89603 DB	'n', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'c', 00H, 'u', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'M', 00H, 'A', 00H, 'X', 00H, '_', 00H, 'S', 00H, 'H', 00H
	DB	'O', 00H, 'R', 00H, 'T', 00H, 'C', 00H, 'U', 00H, 'T', 00H, 'S'
	DB	00H, '_', 00H, 'P', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'C', 00H
	DB	'T', 00H, 'R', 00H, 'L', 00H, 00H, 00H
$SG89633 DB	'Change...', 00H
	ORG $+2
$SG89638 DB	'Can''t happen', 00H
	ORG $+3
$SG89639 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89640 DB	'!', 00H, '"', 00H, 'C', 00H, 'a', 00H, 'n', 00H, '''', 00H
	DB	't', 00H, ' ', 00H, 'h', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, '"', 00H, 00H, 00H
$SG89694 DB	'commctrl_DragListMsg', 00H
	ORG $+3
$SG89874 DB	'All Files (*.*)', 00H, '*', 00H, 00H, 00H, 00H
	ORG $+3
$SG89958 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89970 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89959 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'R', 00H, 'A', 00H, 'D', 00H, 'I'
	DB	00H, 'O', 00H, 00H, 00H
	ORG $+2
$SG89978 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89971 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'R', 00H, 'A', 00H, 'D', 00H, 'I'
	DB	00H, 'O', 00H, 00H, 00H
	ORG $+2
$SG89977 DB	'No radio button was checked?!', 00H
	ORG $+2
$SG89991 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89979 DB	'!', 00H, '"', 00H, 'N', 00H, 'o', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'b', 00H, 'u'
	DB	00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H
	DB	'a', 00H, 's', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, 'e', 00H, 'd', 00H, '?', 00H, '!', 00H, '"', 00H
	DB	00H, 00H
	ORG $+2
$SG90002 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89992 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'E', 00H, 'C'
	DB	00H, 'K', 00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
$SG90003 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'E', 00H, 'C'
	DB	00H, 'K', 00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
$SG90015 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90026 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90016 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'E', 00H, 'D', 00H, 'I', 00H, 'T'
	DB	00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG90027 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'E', 00H, 'D', 00H, 'I', 00H, 'T'
	DB	00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG90038 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90052 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90039 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H
	DB	'T', 00H, 'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, 'c', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'C', 00H, 'T', 00H, 'R', 00H, 'L', 00H, '_'
	DB	00H, 'E', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 'B', 00H, 'O', 00H
	DB	'X', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'b', 00H, 'o'
	DB	00H, 'x', 00H, '.', 00H, 'h', 00H, 'a', 00H, 's', 00H, '_', 00H
	DB	'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG90066 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90053 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H
	DB	'T', 00H, 'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, 'c', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'C', 00H, 'T', 00H, 'R', 00H, 'L', 00H, '_'
	DB	00H, 'E', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 'B', 00H, 'O', 00H
	DB	'X', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'b', 00H, 'o'
	DB	00H, 'x', 00H, '.', 00H, 'h', 00H, 'a', 00H, 's', 00H, '_', 00H
	DB	'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG90085 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90067 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H
	DB	'T', 00H, 'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, 'c', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'C', 00H, 'T', 00H, 'R', 00H, 'L', 00H, '_'
	DB	00H, 'E', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 'B', 00H, 'O', 00H
	DB	'X', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'b', 00H, 'o'
	DB	00H, 'x', 00H, '.', 00H, 'h', 00H, 'a', 00H, 's', 00H, '_', 00H
	DB	'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG90101 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90086 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H
	DB	'T', 00H, 'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, 'c', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'C', 00H, 'T', 00H, 'R', 00H, 'L', 00H, '_'
	DB	00H, 'E', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 'B', 00H, 'O', 00H
	DB	'X', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'b', 00H, 'o'
	DB	00H, 'x', 00H, '.', 00H, 'h', 00H, 'a', 00H, 's', 00H, '_', 00H
	DB	'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG90114 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90102 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG90115 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'B', 00H, 'O', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG90118 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90119 DB	'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H
	DB	'l', 00H, '-', 00H, '>', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, 'b', 00H, 'o', 00H, 'x', 00H, '.', 00H, 'h', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG90135 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90149 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90136 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'B', 00H, 'O', 00H, 'X', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r'
	DB	00H, 'l', 00H, '-', 00H, '>', 00H, 'l', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'o', 00H, 'x', 00H, '.', 00H, 'm', 00H, 'u'
	DB	00H, 'l', 00H, 't', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-', 00H, '>'
	DB	00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'i', 00H, 's', 00H, 't', 00H, 'b', 00H, 'o', 00H, 'x'
	DB	00H, '.', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H
	DB	't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
$SG90150 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'B', 00H, 'O', 00H, 'X', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '!', 00H, 'c', 00H, '-', 00H, '>', 00H, 'c', 00H, 't'
	DB	00H, 'r', 00H, 'l', 00H, '-', 00H, '>', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, 'o', 00H, 'x', 00H, '.', 00H, 'm'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 's', 00H, 'e', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+2
$SG90162 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90163 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T'
	DB	00H, 00H, 00H
$SG90178 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90179 DB	'c', 00H, 00H, 00H
$SG90193 DB	'Can''t happen', 00H
	ORG $+3
$SG90194 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90195 DB	'!', 00H, '"', 00H, 'C', 00H, 'a', 00H, 'n', 00H, '''', 00H
	DB	't', 00H, ' ', 00H, 'h', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, '"', 00H, 00H, 00H
$SG90208 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90209 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E'
	DB	00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T', 00H
	DB	00H, 00H
$SG90221 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90222 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E'
	DB	00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T', 00H
	DB	00H, 00H
$SG90236 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90237 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H, 'T'
	DB	00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T', 00H
	DB	00H, 00H
$SG90239 DB	'bold, ', 00H
	ORG $+1
$SG90242 DB	'Font: %s, %sdefault height', 00H
	ORG $+1
$SG90244 DB	'pixel', 00H
	ORG $+2
$SG90245 DB	'point', 00H
	ORG $+2
$SG90246 DB	'Font: %s, %s%d-%s', 00H
	ORG $+2
$SG90256 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90257 DB	'c', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'i', 00H, 'c', 00H, '.', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'R', 00H, 'L', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H, 'T'
	DB	00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T', 00H
	DB	00H, 00H
$SG90437 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90438 DB	'd', 00H, 'p', 00H, '-', 00H, '>', 00H, 'n', 00H, 'c', 00H
	DB	't', 00H, 'r', 00H, 'l', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'e'
	DB	00H, 's', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'd', 00H, 'p', 00H, '-'
	DB	00H, '>', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'l', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 's'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG90494 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'r', 00H, 'l'
	DB	00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG90495 DB	'!', 00H, 'p', 00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H
	DB	'e', 00H, 'd', 00H, 's', 00H, '_', 00H, 'f', 00H, 'r', 00H, 'e'
	DB	00H, 'e', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ctlposinit
EXTRN	__imp__MapDialogRect@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winctrls.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_r2$ = -48						; size = 16
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_leftborder$ = 16					; size = 4
_rightborder$ = 20					; size = 4
_topborder$ = 24					; size = 4
_ctlposinit PROC
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 45
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 46
	mov	esi, esp
	push	0
	push	0
	push	49					; 00000031H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 47
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR _topborder$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 48
	mov	esi, esp
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 49
	mov	DWORD PTR _r2$[ebp+4], 0
	mov	eax, DWORD PTR _r2$[ebp+4]
	mov	DWORD PTR _r2$[ebp], eax
; Line 50
	mov	DWORD PTR _r2$[ebp+8], 4
; Line 51
	mov	DWORD PTR _r2$[ebp+12], 8
; Line 52
	mov	esi, esp
	lea	ecx, DWORD PTR _r2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__MapDialogRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 53
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _r2$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 54
	mov	eax, DWORD PTR _r$[ebp+8]
	shl	eax, 2
	cdq
	idiv	DWORD PTR _r2$[ebp+8]
	sub	eax, 6
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 55
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _leftborder$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 56
	mov	edx, DWORD PTR _leftborder$[ebp]
	add	edx, DWORD PTR _rightborder$[ebp]
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, edx
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 57
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ctlposinit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@ctlposinit:
	DD	2
	DD	$LN5@ctlposinit
$LN5@ctlposinit:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@ctlposinit
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN4@ctlposinit
$LN4@ctlposinit:
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN3@ctlposinit:
	DB	114					; 00000072H
	DB	0
_ctlposinit ENDP
_TEXT	ENDS
PUBLIC	_doctl
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	_hinst:DWORD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctl$ = -4						; size = 4
_cp$ = 8						; size = 4
_r$ = 12						; size = 16
_wclass$ = 28						; size = 4
_wstyle$ = 32						; size = 4
_exstyle$ = 36						; size = 4
_wtext$ = 40						; size = 4
_wid$ = 44						; size = 4
_doctl	PROC
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 69
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _r$[ebp], ecx
; Line 70
	mov	esi, esp
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__MapDialogRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 76
	mov	edx, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN3@doctl
; Line 79
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hinst
	push	eax
	mov	ecx, DWORD PTR _wid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _r$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wstyle$[ebp]
	push	edx
	mov	eax, DWORD PTR _wtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wclass$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exstyle$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateWindowExA@48
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ctl$[ebp], eax
; Line 80
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	48					; 00000030H
	mov	edx, DWORD PTR _ctl$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 82
	push	OFFSET $SG88581
	mov	eax, DWORD PTR _wclass$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@doctl
; Line 93
	mov	esi, esp
	push	278					; 00000116H
	mov	ecx, DWORD PTR _r$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp+8]
	push	edx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _ctl$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@doctl:
; Line 95
	jmp	SHORT $LN1@doctl
$LN3@doctl:
; Line 96
	mov	DWORD PTR _ctl$[ebp], 0
$LN1@doctl:
; Line 97
	mov	eax, DWORD PTR _ctl$[ebp]
; Line 98
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@doctl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@doctl:
	DD	1
	DD	$LN7@doctl
$LN7@doctl:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@doctl
$LN6@doctl:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
_doctl	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_bartitle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_name$ = 12						; size = 4
_id$ = 16						; size = 4
_bartitle PROC
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 107
	mov	DWORD PTR _r$[ebp], 3
; Line 108
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 109
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 110
	mov	DWORD PTR _r$[ebp+12], 8
; Line 111
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+3]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 112
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88593
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 113
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@bartitle
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@bartitle:
	DD	1
	DD	$LN4@bartitle
$LN4@bartitle:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@bartitle
$LN3@bartitle:
	DB	114					; 00000072H
	DB	0
_bartitle ENDP
_TEXT	ENDS
PUBLIC	_beginbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cp$ = 8						; size = 4
_name$ = 12						; size = 4
_idbox$ = 16						; size = 4
_beginbox PROC
; Line 119
	push	ebp
	mov	ebp, esp
; Line 120
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx
; Line 121
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@beginbox
; Line 122
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, 4
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN2@beginbox:
; Line 123
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@beginbox
; Line 124
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 8
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN1@beginbox:
; Line 125
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 4
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 126
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 127
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 7
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 128
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _idbox$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 129
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR _name$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 130
	pop	ebp
	ret	0
_beginbox ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_endbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv84 = -32						; size = 4
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_endbox	PROC
; Line 136
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 138
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 7
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 139
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 140
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 141
	mov	DWORD PTR _r$[ebp], 3
; Line 142
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 143
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 144
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _r$[ebp+12], eax
; Line 146
	mov	ecx, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN3@endbox
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@endbox
$LN3@endbox:
	mov	DWORD PTR tv84[ebp], OFFSET $SG88607
$LN4@endbox:
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR tv84[ebp]
	push	eax
	push	0
	push	1342177287				; 50000007H
	push	OFFSET $SG88608
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 147
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 148
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@endbox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@endbox:
	DD	1
	DD	$LN6@endbox
$LN6@endbox:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN5@endbox
$LN5@endbox:
	DB	114					; 00000072H
	DB	0
_endbox	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_editboxfw
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_password$ = 12						; size = 4
_text$ = 16						; size = 4
_staticid$ = 20						; size = 4
_editid$ = 24						; size = 4
_editboxfw PROC
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 158
	mov	DWORD PTR _r$[ebp], 3
; Line 159
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 161
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN1@editboxfw
; Line 162
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 163
	mov	DWORD PTR _r$[ebp+12], 8
; Line 164
	mov	ecx, DWORD PTR _staticid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88622
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 165
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 9
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN1@editboxfw:
; Line 167
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], edx
; Line 168
	mov	DWORD PTR _r$[ebp+12], 12		; 0000000cH
; Line 172
	mov	eax, DWORD PTR _editid$[ebp]
	push	eax
	push	OFFSET $SG88623
	push	512					; 00000200H
	mov	ecx, DWORD PTR _password$[ebp]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 32					; 00000020H
	or	ecx, 1342242944				; 50010080H
	push	ecx
	push	OFFSET $SG88624
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 173
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 174
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@editboxfw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@editboxfw:
	DD	1
	DD	$LN5@editboxfw
$LN5@editboxfw:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@editboxfw
$LN4@editboxfw:
	DB	114					; 00000072H
	DB	0
_editboxfw ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_combobox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_text$ = 12						; size = 4
_staticid$ = 16						; size = 4
_listid$ = 20						; size = 4
_combobox PROC
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 183
	mov	DWORD PTR _r$[ebp], 3
; Line 184
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 186
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN1@combobox
; Line 187
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 188
	mov	DWORD PTR _r$[ebp+12], 8
; Line 189
	mov	ecx, DWORD PTR _staticid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88636
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 190
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 9
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN1@combobox:
; Line 192
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], edx
; Line 193
	mov	DWORD PTR _r$[ebp+12], 120		; 00000078H
; Line 196
	mov	eax, DWORD PTR _listid$[ebp]
	push	eax
	push	OFFSET $SG88637
	push	512					; 00000200H
	push	1344340482				; 50210202H
	push	OFFSET $SG88638
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 197
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 198
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@combobox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@combobox:
	DD	1
	DD	$LN5@combobox
$LN5@combobox:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@combobox
$LN4@combobox:
	DB	114					; 00000072H
	DB	0
_combobox ENDP
_TEXT	ENDS
PUBLIC	_radioline
EXTRN	_safefree:PROC
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bid$88698 = -24					; size = 4
_btext$88690 = -20					; size = 4
_nbuttons$ = -16					; size = 4
_i$ = -12						; size = 4
_buttons$ = -8						; size = 4
_ap$ = -4						; size = 4
_cp$ = 8						; size = 4
_text$ = 12						; size = 4
_id$ = 16						; size = 4
_nacross$ = 20						; size = 4
_radioline PROC
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 266
	lea	eax, DWORD PTR _nacross$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 267
	mov	DWORD PTR _nbuttons$[ebp], 0
$LN6@radioline:
; Line 268
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@radioline
; Line 269
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _btext$88690[ebp], ecx
; Line 271
	cmp	DWORD PTR _btext$88690[ebp], 0
	jne	SHORT $LN4@radioline
; Line 272
	jmp	SHORT $LN5@radioline
$LN4@radioline:
; Line 273
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _bid$88698[ebp], ecx
; Line 274
	mov	edx, DWORD PTR _nbuttons$[ebp]
	add	edx, 1
	mov	DWORD PTR _nbuttons$[ebp], edx
; Line 275
	jmp	SHORT $LN6@radioline
$LN5@radioline:
; Line 276
	mov	DWORD PTR _ap$[ebp], 0
; Line 277
	push	8
	mov	eax, DWORD PTR _nbuttons$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buttons$[ebp], eax
; Line 278
	lea	ecx, DWORD PTR _nacross$[ebp+4]
	mov	DWORD PTR _ap$[ebp], ecx
; Line 279
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@radioline
$LN2@radioline:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@radioline:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nbuttons$[ebp]
	jge	SHORT $LN1@radioline
; Line 280
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _buttons$[ebp]
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 281
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _buttons$[ebp]
	mov	edx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [edx-4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 282
	jmp	SHORT $LN2@radioline
$LN1@radioline:
; Line 283
	mov	DWORD PTR _ap$[ebp], 0
; Line 284
	mov	eax, DWORD PTR _nbuttons$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buttons$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nacross$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_radioline_common
	add	esp, 24					; 00000018H
; Line 285
	mov	eax, DWORD PTR _buttons$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 286
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_radioline ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T90594 = -49						; size = 1
_bid$88666 = -48					; size = 4
_btext$88665 = -44					; size = 4
_j$ = -40						; size = 4
_i$ = -36						; size = 4
_group$ = -32						; size = 4
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_text$ = 12						; size = 4
_id$ = 16						; size = 4
_nacross$ = 20						; size = 4
_buttons$ = 24						; size = 4
_nbuttons$ = 28						; size = 4
_radioline_common PROC
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	BYTE PTR $T90594[ebp], 0
; Line 210
	cmp	DWORD PTR _text$[ebp], 0
	je	$LN7@radioline_
; Line 211
	mov	DWORD PTR _r$[ebp], 3
; Line 212
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 213
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 214
	mov	BYTE PTR $T90594[ebp], 1
	mov	DWORD PTR _r$[ebp+12], 8
; Line 215
	cmp	BYTE PTR $T90594[ebp], 0
	jne	SHORT $LN10@radioline_
	push	OFFSET $LN11@radioline_
	call	__RTC_UninitUse
	add	esp, 4
$LN10@radioline_:
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 216
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88661
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
$LN7@radioline_:
; Line 219
	mov	DWORD PTR _group$[ebp], 131072		; 00020000H
; Line 220
	mov	DWORD PTR _i$[ebp], 0
; Line 221
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@radioline_
$LN5@radioline_:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@radioline_:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _nbuttons$[ebp]
	jge	$LN4@radioline_
; Line 222
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _buttons$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _btext$88665[ebp], ecx
; Line 223
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _buttons$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _bid$88666[ebp], ecx
; Line 225
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nacross$[ebp]
	jne	SHORT $LN3@radioline_
; Line 226
	cmp	BYTE PTR $T90594[ebp], 0
	jne	SHORT $LN12@radioline_
	push	OFFSET $LN11@radioline_
	call	__RTC_UninitUse
	add	esp, 4
$LN12@radioline_:
	xor	eax, eax
	cmp	DWORD PTR _nacross$[ebp], 1
	setg	al
	lea	eax, DWORD PTR [eax+eax+1]
	add	eax, DWORD PTR _r$[ebp+12]
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 227
	mov	DWORD PTR _i$[ebp], 0
$LN3@radioline_:
; Line 229
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 3
	mov	eax, ecx
	imul	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _nacross$[ebp]
	add	eax, 3
	mov	DWORD PTR _r$[ebp], eax
; Line 230
	mov	edx, DWORD PTR _nbuttons$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $LN2@radioline_
; Line 232
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 3
	imul	eax, edx
	cdq
	idiv	DWORD PTR _nacross$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 233
	jmp	SHORT $LN1@radioline_
$LN2@radioline_:
; Line 234
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _r$[ebp+8], ecx
$LN1@radioline_:
; Line 235
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 236
	mov	BYTE PTR $T90594[ebp], 1
	mov	DWORD PTR _r$[ebp+12], 8
; Line 239
	mov	ecx, DWORD PTR _bid$88666[ebp]
	push	ecx
	mov	edx, DWORD PTR _btext$88665[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _group$[ebp]
	or	eax, 1342259209				; 50014009H
	push	eax
	push	OFFSET $SG88670
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 240
	mov	DWORD PTR _group$[ebp], 0
; Line 241
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 242
	jmp	$LN5@radioline_
$LN4@radioline_:
; Line 243
	cmp	BYTE PTR $T90594[ebp], 0
	jne	SHORT $LN13@radioline_
	push	OFFSET $LN11@radioline_
	call	__RTC_UninitUse
	add	esp, 4
$LN13@radioline_:
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _r$[ebp+12]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 244
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@radioline_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@radioline_:
	DD	1
	DD	$LN14@radioline_
$LN14@radioline_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN11@radioline_
$LN11@radioline_:
	DB	114					; 00000072H
	DB	0
_radioline_common ENDP
_TEXT	ENDS
PUBLIC	_bareradioline
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bid$88754 = -24					; size = 4
_btext$88746 = -20					; size = 4
_nbuttons$ = -16					; size = 4
_i$ = -12						; size = 4
_buttons$ = -8						; size = 4
_ap$ = -4						; size = 4
_cp$ = 8						; size = 4
_nacross$ = 12						; size = 4
_bareradioline PROC
; Line 293
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 298
	lea	eax, DWORD PTR _nacross$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 299
	mov	DWORD PTR _nbuttons$[ebp], 0
$LN6@bareradiol:
; Line 300
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@bareradiol
; Line 301
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _btext$88746[ebp], ecx
; Line 303
	cmp	DWORD PTR _btext$88746[ebp], 0
	jne	SHORT $LN4@bareradiol
; Line 304
	jmp	SHORT $LN5@bareradiol
$LN4@bareradiol:
; Line 305
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _bid$88754[ebp], ecx
; Line 306
	jmp	SHORT $LN6@bareradiol
$LN5@bareradiol:
; Line 307
	mov	DWORD PTR _ap$[ebp], 0
; Line 308
	push	8
	mov	edx, DWORD PTR _nbuttons$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buttons$[ebp], eax
; Line 309
	lea	eax, DWORD PTR _nacross$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 310
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@bareradiol
$LN2@bareradiol:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@bareradiol:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbuttons$[ebp]
	jge	SHORT $LN1@bareradiol
; Line 311
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _buttons$[ebp]
	mov	eax, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [eax-4]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 312
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _buttons$[ebp]
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 313
	jmp	SHORT $LN2@bareradiol
$LN1@bareradiol:
; Line 314
	mov	DWORD PTR _ap$[ebp], 0
; Line 315
	mov	edx, DWORD PTR _nbuttons$[ebp]
	push	edx
	mov	eax, DWORD PTR _buttons$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nacross$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_radioline_common
	add	esp, 24					; 00000018H
; Line 316
	mov	eax, DWORD PTR _buttons$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 317
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bareradioline ENDP
_TEXT	ENDS
PUBLIC	_radiobig
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bid$88813 = -24					; size = 4
_btext$88805 = -20					; size = 4
_nbuttons$ = -16					; size = 4
_i$ = -12						; size = 4
_buttons$ = -8						; size = 4
_ap$ = -4						; size = 4
_cp$ = 8						; size = 4
_text$ = 12						; size = 4
_id$ = 16						; size = 4
_radiobig PROC
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 329
	lea	eax, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 330
	mov	DWORD PTR _nbuttons$[ebp], 0
$LN6@radiobig:
; Line 331
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@radiobig
; Line 332
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _btext$88805[ebp], ecx
; Line 334
	cmp	DWORD PTR _btext$88805[ebp], 0
	jne	SHORT $LN4@radiobig
; Line 335
	jmp	SHORT $LN5@radiobig
$LN4@radiobig:
; Line 336
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _bid$88813[ebp], ecx
; Line 337
	jmp	SHORT $LN6@radiobig
$LN5@radiobig:
; Line 338
	mov	DWORD PTR _ap$[ebp], 0
; Line 339
	push	8
	mov	edx, DWORD PTR _nbuttons$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buttons$[ebp], eax
; Line 340
	lea	eax, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 341
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@radiobig
$LN2@radiobig:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@radiobig:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbuttons$[ebp]
	jge	SHORT $LN1@radiobig
; Line 342
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _buttons$[ebp]
	mov	eax, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [eax-4]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 343
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _buttons$[ebp]
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 344
	jmp	SHORT $LN2@radiobig
$LN1@radiobig:
; Line 345
	mov	DWORD PTR _ap$[ebp], 0
; Line 346
	mov	edx, DWORD PTR _nbuttons$[ebp]
	push	edx
	mov	eax, DWORD PTR _buttons$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_radioline_common
	add	esp, 24					; 00000018H
; Line 347
	mov	ecx, DWORD PTR _buttons$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 348
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_radiobig ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_checkbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_text$ = 12						; size = 4
_id$ = 16						; size = 4
_checkbox PROC
; Line 354
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 357
	mov	DWORD PTR _r$[ebp], 3
; Line 358
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 359
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 360
	mov	DWORD PTR _r$[ebp+12], 8
; Line 361
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+3]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 364
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	push	0
	push	1342259203				; 50014003H
	push	OFFSET $SG88854
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 365
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@checkbox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@checkbox:
	DD	1
	DD	$LN4@checkbox
$LN4@checkbox:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@checkbox
$LN3@checkbox:
	DB	114					; 00000072H
	DB	0
_checkbox ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_staticwrap
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	_strncpy:PROC
EXTRN	_isspace:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__GetTextExtentExPointA@28:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetMapMode@8:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__GetDC@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newfont$ = -100					; size = 4
_oldfont$ = -96						; size = 4
_r$ = -88						; size = 16
_q$ = -68						; size = 4
_p$ = -64						; size = 4
_ret$ = -60						; size = 4
_size$ = -52						; size = 8
_nfit$ = -36						; size = 4
_pwidths$ = -28						; size = 4
_j$ = -24						; size = 4
_nlines$ = -20						; size = 4
_width$ = -16						; size = 4
_lpx$ = -12						; size = 4
_hdc$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_text$ = 16						; size = 4
_lines$ = 20						; size = 4
_staticwrap PROC
; Line 373
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 374
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 375
	mov	esi, esp
	push	88					; 00000058H
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpx$[ebp], eax
; Line 383
	push	1
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 384
	mov	eax, DWORD PTR _text$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 385
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _q$[ebp], ecx
; Line 386
	push	4
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pwidths$[ebp], eax
; Line 393
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetMapMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 394
	mov	DWORD PTR _r$[ebp+12], 0
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR _r$[ebp+4], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR _r$[ebp], edx
; Line 395
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 396
	mov	esi, esp
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__MapDialogRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 397
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR _width$[ebp], ecx
; Line 399
	mov	DWORD PTR _nlines$[ebp], 1
; Line 405
	mov	esi, esp
	push	0
	push	0
	push	49					; 00000031H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newfont$[ebp], eax
; Line 406
	mov	esi, esp
	mov	eax, DWORD PTR _newfont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldfont$[ebp], eax
$LN11@staticwrap:
; Line 408
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN10@staticwrap
; Line 411
	mov	esi, esp
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pwidths$[ebp]
	push	edx
	lea	eax, DWORD PTR _nfit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetTextExtentExPointA@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN8@staticwrap
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _nfit$[ebp], eax
	jb	SHORT $LN9@staticwrap
$LN8@staticwrap:
; Line 418
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 419
	jmp	$LN10@staticwrap
$LN9@staticwrap:
; Line 428
	mov	edx, DWORD PTR _nfit$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN7@staticwrap
$LN6@staticwrap:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@staticwrap:
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN5@staticwrap
; Line 429
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@staticwrap
; Line 430
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _nfit$[ebp], eax
; Line 431
	jmp	SHORT $LN5@staticwrap
$LN4@staticwrap:
; Line 433
	jmp	SHORT $LN6@staticwrap
$LN5@staticwrap:
; Line 435
	mov	ecx, DWORD PTR _nfit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 436
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, DWORD PTR _nfit$[ebp]
	mov	BYTE PTR [ecx], 10			; 0000000aH
; Line 437
	mov	edx, DWORD PTR _nfit$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _q$[ebp], ecx
; Line 439
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _nfit$[ebp]
	mov	DWORD PTR _p$[ebp], edx
$LN3@staticwrap:
; Line 440
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@staticwrap
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@staticwrap
; Line 441
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN3@staticwrap
$LN2@staticwrap:
; Line 443
	mov	edx, DWORD PTR _nlines$[ebp]
	add	edx, 1
	mov	DWORD PTR _nlines$[ebp], edx
; Line 444
	jmp	$LN11@staticwrap
$LN10@staticwrap:
; Line 446
	mov	esi, esp
	mov	eax, DWORD PTR _oldfont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 447
	mov	esi, esp
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 449
	cmp	DWORD PTR _lines$[ebp], 0
	je	SHORT $LN1@staticwrap
	mov	edx, DWORD PTR _lines$[ebp]
	mov	eax, DWORD PTR _nlines$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@staticwrap:
; Line 451
	mov	ecx, DWORD PTR _pwidths$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 453
	mov	eax, DWORD PTR _ret$[ebp]
; Line 454
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@staticwrap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@staticwrap:
	DD	3
	DD	$LN17@staticwrap
$LN17@staticwrap:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@staticwrap
	DD	-52					; ffffffccH
	DD	8
	DD	$LN15@staticwrap
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN16@staticwrap
$LN16@staticwrap:
	DB	114					; 00000072H
	DB	0
$LN15@staticwrap:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN14@staticwrap:
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_staticwrap ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_statictext
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_text$ = 12						; size = 4
_lines$ = 16						; size = 4
_id$ = 20						; size = 4
_statictext PROC
; Line 460
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 463
	mov	DWORD PTR _r$[ebp], 3
; Line 464
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 465
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 466
	mov	ecx, DWORD PTR _lines$[ebp]
	shl	ecx, 3
	mov	DWORD PTR _r$[ebp+12], ecx
; Line 467
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _r$[ebp+12]
	lea	edx, DWORD PTR [ecx+eax+3]
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 470
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	push	0
	push	1342177292				; 5000000cH
	push	OFFSET $SG88910
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 471
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@statictext
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@statictext:
	DD	1
	DD	$LN4@statictext
$LN4@statictext:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@statictext
$LN3@statictext:
	DB	114					; 00000072H
	DB	0
_statictext ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_paneltitle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_id$ = 12						; size = 4
_paneltitle PROC
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 480
	mov	DWORD PTR _r$[ebp], 3
; Line 481
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 482
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 483
	mov	DWORD PTR _r$[ebp+12], 12		; 0000000cH
; Line 484
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+3]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 486
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	0
	push	0
	push	1342177293				; 5000000dH
	push	OFFSET $SG88919
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 487
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@paneltitle
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@paneltitle:
	DD	1
	DD	$LN4@paneltitle
$LN4@paneltitle:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@paneltitle
$LN3@paneltitle:
	DB	114					; 00000072H
	DB	0
_paneltitle ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_staticbtn
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos$ = -44						; size = 4
_rwid$ = -40						; size = 4
_lwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_btext$ = 20						; size = 4
_bid$ = 24						; size = 4
_staticbtn PROC
; Line 494
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 496
	mov	DWORD PTR _height$[ebp], 14		; 0000000eH
; Line 500
	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 3
	imul	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, 3
	mov	DWORD PTR _rpos$[ebp], eax
; Line 501
	mov	ecx, DWORD PTR _rpos$[ebp]
	sub	ecx, 6
	mov	DWORD PTR _lwid$[ebp], ecx
; Line 502
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 3
	sub	eax, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _rwid$[ebp], eax
; Line 504
	mov	DWORD PTR _r$[ebp], 3
; Line 505
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 506
	mov	edx, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 507
	mov	DWORD PTR _r$[ebp+12], 8
; Line 508
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stext$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88936
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 510
	mov	eax, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 511
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 14					; 0000000eH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 512
	mov	edx, DWORD PTR _rwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 513
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 516
	mov	eax, DWORD PTR _bid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _btext$[ebp]
	push	ecx
	push	0
	push	1342259200				; 50014000H
	push	OFFSET $SG88937
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 518
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _height$[ebp]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 519
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@staticbtn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@staticbtn:
	DD	1
	DD	$LN4@staticbtn
$LN4@staticbtn:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@staticbtn
$LN3@staticbtn:
	DB	114					; 00000072H
	DB	0
_staticbtn ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_button
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_btext$ = 12						; size = 4
_bid$ = 16						; size = 4
_defbtn$ = 20						; size = 4
_button	PROC
; Line 525
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 528
	mov	DWORD PTR _r$[ebp], 3
; Line 529
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 530
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 531
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 535
	cmp	DWORD PTR _defbtn$[ebp], 0
	je	SHORT $LN1@button
	mov	ecx, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@button
; Line 536
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _bid$[ebp]
	push	edx
	push	1025					; 00000401H
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@button:
; Line 541
	mov	edx, DWORD PTR _bid$[ebp]
	push	edx
	mov	eax, DWORD PTR _btext$[ebp]
	push	eax
	push	0
	xor	ecx, ecx
	cmp	DWORD PTR _defbtn$[ebp], 0
	setne	cl
	or	ecx, 1342259200				; 50014000H
	push	ecx
	push	OFFSET $SG88950
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 543
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 544
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@button
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@button:
	DD	1
	DD	$LN5@button
$LN5@button:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@button
$LN4@button:
	DB	114					; 00000072H
	DB	0
_button	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_static2btn
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos2$ = -52						; size = 4
_rpos1$ = -48						; size = 4
_rwid2$ = -44						; size = 4
_rwid1$ = -40						; size = 4
_lwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_btext1$ = 20						; size = 4
_bid1$ = 24						; size = 4
_btext2$ = 28						; size = 4
_bid2$ = 32						; size = 4
_static2btn PROC
; Line 551
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 553
	mov	DWORD PTR _height$[ebp], 14		; 0000000eH
; Line 557
	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 3
	mov	DWORD PTR _rpos1$[ebp], eax
; Line 558
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	add	eax, 3
	imul	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, 3
	mov	DWORD PTR _rpos2$[ebp], eax
; Line 559
	mov	edx, DWORD PTR _rpos1$[ebp]
	sub	edx, 6
	mov	DWORD PTR _lwid$[ebp], edx
; Line 560
	mov	eax, DWORD PTR _rpos2$[ebp]
	sub	eax, DWORD PTR _rpos1$[ebp]
	sub	eax, 3
	mov	DWORD PTR _rwid1$[ebp], eax
; Line 561
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 3
	sub	edx, DWORD PTR _rpos2$[ebp]
	mov	DWORD PTR _rwid2$[ebp], edx
; Line 563
	mov	DWORD PTR _r$[ebp], 3
; Line 564
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 565
	mov	edx, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 566
	mov	DWORD PTR _r$[ebp+12], 8
; Line 567
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stext$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88973
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 569
	mov	eax, DWORD PTR _rpos1$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 570
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 14					; 0000000eH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 571
	mov	edx, DWORD PTR _rwid1$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 572
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 575
	mov	eax, DWORD PTR _bid1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _btext1$[ebp]
	push	ecx
	push	0
	push	1342259200				; 50014000H
	push	OFFSET $SG88974
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 577
	mov	eax, DWORD PTR _rpos2$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 578
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 14					; 0000000eH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 579
	mov	edx, DWORD PTR _rwid2$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 580
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 583
	mov	eax, DWORD PTR _bid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _btext2$[ebp]
	push	ecx
	push	0
	push	1342259200				; 50014000H
	push	OFFSET $SG88975
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 585
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _height$[ebp]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 586
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@static2btn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@static2btn:
	DD	1
	DD	$LN4@static2btn
$LN4@static2btn:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@static2btn
$LN3@static2btn:
	DB	114					; 00000072H
	DB	0
_static2btn ENDP
_TEXT	ENDS
PUBLIC	_staticedit
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_eid$ = 20						; size = 4
_percentedit$ = 24					; size = 4
_staticedit PROC
; Line 624
	push	ebp
	mov	ebp, esp
; Line 625
	push	0
	mov	eax, DWORD PTR _percentedit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sid$[ebp]
	push	edx
	mov	eax, DWORD PTR _stext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_staticedit_internal
	add	esp, 24					; 00000018H
; Line 626
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_staticedit ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos$ = -44						; size = 4
_rwid$ = -40						; size = 4
_lwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_eid$ = 20						; size = 4
_percentedit$ = 24					; size = 4
_style$ = 28						; size = 4
_staticedit_internal PROC
; Line 594
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 596
	mov	DWORD PTR _height$[ebp], 12		; 0000000cH
; Line 601
	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _percentedit$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 3
	imul	eax, edx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, 3
	mov	DWORD PTR _rpos$[ebp], eax
; Line 602
	mov	edx, DWORD PTR _rpos$[ebp]
	sub	edx, 6
	mov	DWORD PTR _lwid$[ebp], edx
; Line 603
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 3
	sub	ecx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _rwid$[ebp], ecx
; Line 605
	mov	DWORD PTR _r$[ebp], 3
; Line 606
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 607
	mov	eax, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 608
	mov	DWORD PTR _r$[ebp+12], 8
; Line 609
	mov	ecx, DWORD PTR _sid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stext$[ebp]
	push	edx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG88995
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 611
	mov	ecx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 612
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 12					; 0000000cH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 613
	mov	eax, DWORD PTR _rwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 614
	mov	DWORD PTR _r$[ebp+12], 12		; 0000000cH
; Line 617
	mov	ecx, DWORD PTR _eid$[ebp]
	push	ecx
	push	OFFSET $SG88996
	push	512					; 00000200H
	mov	edx, DWORD PTR _style$[ebp]
	or	edx, 1342242944				; 50010080H
	push	edx
	push	OFFSET $SG88997
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 619
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _height$[ebp]
	lea	ecx, DWORD PTR [eax+edx+3]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 620
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@staticedit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@staticedit:
	DD	1
	DD	$LN4@staticedit
$LN4@staticedit:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@staticedit
$LN3@staticedit:
	DB	114					; 00000072H
	DB	0
_staticedit_internal ENDP
_TEXT	ENDS
PUBLIC	_staticpassedit
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_eid$ = 20						; size = 4
_percentedit$ = 24					; size = 4
_staticpassedit PROC
; Line 630
	push	ebp
	mov	ebp, esp
; Line 631
	push	32					; 00000020H
	mov	eax, DWORD PTR _percentedit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sid$[ebp]
	push	edx
	mov	eax, DWORD PTR _stext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_staticedit_internal
	add	esp, 24					; 00000018H
; Line 632
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_staticpassedit ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_staticddl
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos$ = -44						; size = 4
_rwid$ = -40						; size = 4
_lwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_lid$ = 20						; size = 4
_percentlist$ = 24					; size = 4
_staticddl PROC
; Line 640
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 642
	mov	DWORD PTR _height$[ebp], 12		; 0000000cH
; Line 647
	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _percentlist$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 3
	imul	eax, edx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, 3
	mov	DWORD PTR _rpos$[ebp], eax
; Line 648
	mov	edx, DWORD PTR _rpos$[ebp]
	sub	edx, 6
	mov	DWORD PTR _lwid$[ebp], edx
; Line 649
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 3
	sub	ecx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _rwid$[ebp], ecx
; Line 651
	mov	DWORD PTR _r$[ebp], 3
; Line 652
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 653
	mov	eax, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 654
	mov	DWORD PTR _r$[ebp+12], 8
; Line 655
	mov	ecx, DWORD PTR _sid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stext$[ebp]
	push	edx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89036
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 657
	mov	ecx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 658
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 12					; 0000000cH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 659
	mov	eax, DWORD PTR _rwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 660
	mov	DWORD PTR _r$[ebp+12], 48		; 00000030H
; Line 663
	mov	ecx, DWORD PTR _lid$[ebp]
	push	ecx
	push	OFFSET $SG89037
	push	512					; 00000200H
	push	1344340483				; 50210203H
	push	OFFSET $SG89038
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 665
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _height$[ebp]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 666
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@staticddl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@staticddl:
	DD	1
	DD	$LN4@staticddl
$LN4@staticddl:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@staticddl
$LN3@staticddl:
	DB	114					; 00000072H
	DB	0
_staticddl ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_staticcombo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos$ = -44						; size = 4
_rwid$ = -40						; size = 4
_lwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_lid$ = 20						; size = 4
_percentlist$ = 24					; size = 4
_staticcombo PROC
; Line 673
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 675
	mov	DWORD PTR _height$[ebp], 12		; 0000000cH
; Line 680
	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _percentlist$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 3
	imul	eax, edx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, 3
	mov	DWORD PTR _rpos$[ebp], eax
; Line 681
	mov	edx, DWORD PTR _rpos$[ebp]
	sub	edx, 6
	mov	DWORD PTR _lwid$[ebp], edx
; Line 682
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 3
	sub	ecx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _rwid$[ebp], ecx
; Line 684
	mov	DWORD PTR _r$[ebp], 3
; Line 685
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 686
	mov	eax, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 687
	mov	DWORD PTR _r$[ebp+12], 8
; Line 688
	mov	ecx, DWORD PTR _sid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stext$[ebp]
	push	edx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89056
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 690
	mov	ecx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 691
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 12					; 0000000cH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 692
	mov	eax, DWORD PTR _rwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 693
	mov	DWORD PTR _r$[ebp+12], 120		; 00000078H
; Line 696
	mov	ecx, DWORD PTR _lid$[ebp]
	push	ecx
	push	OFFSET $SG89057
	push	512					; 00000200H
	push	1344340482				; 50210202H
	push	OFFSET $SG89058
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 698
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _height$[ebp]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 699
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@staticcomb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@staticcomb:
	DD	1
	DD	$LN4@staticcomb
$LN4@staticcomb:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@staticcomb
$LN3@staticcomb:
	DB	114					; 00000072H
	DB	0
_staticcombo ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_staticddlbig
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_lid$ = 20						; size = 4
_staticddlbig PROC
; Line 706
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 709
	cmp	DWORD PTR _stext$[ebp], 0
	je	SHORT $LN1@staticddlb
; Line 710
	mov	DWORD PTR _r$[ebp], 3
; Line 711
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 712
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 713
	mov	DWORD PTR _r$[ebp+12], 8
; Line 714
	mov	ecx, DWORD PTR _sid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stext$[ebp]
	push	edx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89071
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 715
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 8
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN1@staticddlb:
; Line 718
	mov	DWORD PTR _r$[ebp], 3
; Line 719
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], edx
; Line 720
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 721
	mov	DWORD PTR _r$[ebp+12], 48		; 00000030H
; Line 724
	mov	edx, DWORD PTR _lid$[ebp]
	push	edx
	push	OFFSET $SG89072
	push	512					; 00000200H
	push	1344340483				; 50210203H
	push	OFFSET $SG89073
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 725
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 726
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@staticddlb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@staticddlb:
	DD	1
	DD	$LN5@staticddlb
$LN5@staticddlb:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@staticddlb
$LN4@staticddlb:
	DB	114					; 00000072H
	DB	0
_staticddlbig ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_bigeditctrl
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_eid$ = 20						; size = 4
_lines$ = 24						; size = 4
_bigeditctrl PROC
; Line 733
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 736
	cmp	DWORD PTR _stext$[ebp], 0
	je	SHORT $LN1@bigeditctr
; Line 737
	mov	DWORD PTR _r$[ebp], 3
; Line 738
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 739
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 740
	mov	DWORD PTR _r$[ebp+12], 8
; Line 741
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 742
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stext$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89087
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
$LN1@bigeditctr:
; Line 745
	mov	DWORD PTR _r$[ebp], 3
; Line 746
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 747
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 748
	mov	ecx, DWORD PTR _lines$[ebp]
	lea	edx, DWORD PTR [ecx*8+4]
	mov	DWORD PTR _r$[ebp+12], edx
; Line 749
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _r$[ebp+12]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 752
	mov	edx, DWORD PTR _eid$[ebp]
	push	edx
	push	OFFSET $SG89088
	push	512					; 00000200H
	push	1344339972				; 50210004H
	push	OFFSET $SG89089
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 753
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@bigeditctr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@bigeditctr:
	DD	1
	DD	$LN5@bigeditctr
$LN5@bigeditctr:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@bigeditctr
$LN4@bigeditctr:
	DB	114					; 00000072H
	DB	0
_bigeditctrl ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_listbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_lid$ = 20						; size = 4
_lines$ = 24						; size = 4
_multi$ = 28						; size = 4
_listbox PROC
; Line 760
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 763
	cmp	DWORD PTR _stext$[ebp], 0
	je	SHORT $LN1@listbox
; Line 764
	mov	DWORD PTR _r$[ebp], 3
; Line 765
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 766
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 767
	mov	DWORD PTR _r$[ebp+12], 8
; Line 768
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 769
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stext$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89107
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
$LN1@listbox:
; Line 772
	mov	DWORD PTR _r$[ebp], 3
; Line 773
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 774
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 775
	mov	ecx, DWORD PTR _lines$[ebp]
	lea	edx, DWORD PTR [ecx*8+3]
	mov	DWORD PTR _r$[ebp+12], edx
; Line 776
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _r$[ebp+12]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 781
	mov	edx, DWORD PTR _lid$[ebp]
	push	edx
	push	OFFSET $SG89108
	push	512					; 00000200H
	mov	eax, DWORD PTR _multi$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 8
	or	eax, 1344340161				; 502100c1H
	push	eax
	push	OFFSET $SG89109
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 782
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@listbox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@listbox:
	DD	1
	DD	$LN5@listbox
$LN5@listbox:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@listbox
$LN4@listbox:
	DB	114					; 00000072H
	DB	0
_listbox ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ersatztab
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos$ = -48						; size = 4
_rwid$ = -44						; size = 4
_lwid$ = -40						; size = 4
_bigwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_lid$ = 20						; size = 4
_s2id$ = 24						; size = 4
_ersatztab PROC
; Line 788
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 790
	mov	DWORD PTR _height$[ebp], 12		; 0000000cH
; Line 796
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 6
	mov	edx, DWORD PTR ?BIGGAP@?1??ersatztab@@9@9
	shl	edx, 1
	sub	ecx, edx
	mov	DWORD PTR _bigwid$[ebp], ecx
; Line 797
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR ?MEDGAP@?1??ersatztab@@9@9
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 798
	mov	eax, DWORD PTR _bigwid$[ebp]
	add	eax, DWORD PTR ?BIGGAP@?1??ersatztab@@9@9
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR ?BIGGAP@?1??ersatztab@@9@9
	mov	DWORD PTR _rpos$[ebp], eax
; Line 799
	mov	eax, DWORD PTR ?BIGGAP@?1??ersatztab@@9@9
	shl	eax, 1
	mov	ecx, DWORD PTR _rpos$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lwid$[ebp], ecx
; Line 800
	mov	edx, DWORD PTR _bigwid$[ebp]
	add	edx, DWORD PTR ?BIGGAP@?1??ersatztab@@9@9
	sub	edx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _rwid$[ebp], edx
; Line 802
	mov	eax, DWORD PTR ?BIGGAP@?1??ersatztab@@9@9
	mov	DWORD PTR _r$[ebp], eax
; Line 803
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 8
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 804
	mov	edx, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 805
	mov	DWORD PTR _r$[ebp+12], 8
; Line 806
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stext$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89131
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 808
	mov	eax, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _r$[ebp], eax
; Line 809
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 12					; 0000000cH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 810
	mov	edx, DWORD PTR _rwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 811
	mov	DWORD PTR _r$[ebp+12], 120		; 00000078H
; Line 814
	mov	eax, DWORD PTR _lid$[ebp]
	push	eax
	push	OFFSET $SG89132
	push	512					; 00000200H
	push	1342243331				; 50010203H
	push	OFFSET $SG89133
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 816
	mov	edx, DWORD PTR _height$[ebp]
	add	edx, DWORD PTR ?MEDGAP@?1??ersatztab@@9@9
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	lea	edx, DWORD PTR [edx+ecx+3]
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 818
	mov	DWORD PTR _r$[ebp], 3
; Line 819
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], edx
; Line 820
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 821
	mov	DWORD PTR _r$[ebp+12], 2
; Line 823
	mov	edx, DWORD PTR _s2id$[ebp]
	push	edx
	push	OFFSET $SG89134
	push	0
	push	1342177296				; 50000010H
	push	OFFSET $SG89135
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_doctl
	add	esp, 40					; 00000028H
; Line 824
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ersatztab
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@ersatztab:
	DD	1
	DD	$LN4@ersatztab
$LN4@ersatztab:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@ersatztab
$LN3@ersatztab:
	DB	114					; 00000072H
	DB	0
_ersatztab ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_editbutton
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rpos$ = -44						; size = 4
_rwid$ = -40						; size = 4
_lwid$ = -36						; size = 4
_r$ = -28						; size = 16
_height$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_stext$ = 12						; size = 4
_sid$ = 16						; size = 4
_eid$ = 20						; size = 4
_btext$ = 24						; size = 4
_bid$ = 28						; size = 4
_editbutton PROC
; Line 832
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 834
	mov	DWORD PTR _height$[ebp], 14		; 0000000eH
; Line 838
	mov	DWORD PTR _r$[ebp], 3
; Line 839
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 840
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 841
	mov	DWORD PTR _r$[ebp+12], 8
; Line 842
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 843
	mov	eax, DWORD PTR _sid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stext$[ebp]
	push	ecx
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89154
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 845
	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 3
	imul	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, 3
	mov	DWORD PTR _rpos$[ebp], eax
; Line 846
	mov	ecx, DWORD PTR _rpos$[ebp]
	sub	ecx, 6
	mov	DWORD PTR _lwid$[ebp], ecx
; Line 847
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 3
	sub	eax, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _rwid$[ebp], eax
; Line 849
	mov	DWORD PTR _r$[ebp], 3
; Line 850
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 12					; 0000000cH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 851
	mov	edx, DWORD PTR _lwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 852
	mov	DWORD PTR _r$[ebp+12], 12		; 0000000cH
; Line 855
	mov	eax, DWORD PTR _eid$[ebp]
	push	eax
	push	OFFSET $SG89155
	push	512					; 00000200H
	push	1342242944				; 50010080H
	push	OFFSET $SG89156
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 857
	mov	edx, DWORD PTR _rpos$[ebp]
	mov	DWORD PTR _r$[ebp], edx
; Line 858
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 14					; 0000000eH
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _cp$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 859
	mov	edx, DWORD PTR _rwid$[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 860
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 863
	mov	eax, DWORD PTR _bid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _btext$[ebp]
	push	ecx
	push	0
	push	1342259200				; 50014000H
	push	OFFSET $SG89157
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 865
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _height$[ebp]
	lea	eax, DWORD PTR [edx+ecx+3]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 866
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@editbutton
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@editbutton:
	DD	1
	DD	$LN4@editbutton
$LN4@editbutton:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@editbutton
$LN3@editbutton:
	DB	114					; 00000072H
	DB	0
_editbutton ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_prefslist
EXTRN	__imp__MakeDragList@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv133 = -72						; size = 4
_ctl$89200 = -68					; size = 4
_wid$89194 = -64					; size = 4
_left$89193 = -60					; size = 4
_buttonpos$ = -56					; size = 4
_totalheight$ = -52					; size = 4
_BTNSHEIGHT$ = -48					; size = 4
_listheight$ = -44					; size = 4
_i$ = -40						; size = 4
_percent$ = -36						; size = 4
_xpos$ = -32						; size = 4
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_hdl$ = 8						; size = 4
_cp$ = 12						; size = 4
_lines$ = 16						; size = 4
_stext$ = 20						; size = 4
_sid$ = 24						; size = 4
_listid$ = 28						; size = 4
_upbid$ = 32						; size = 4
_dnbid$ = 36						; size = 4
_prefslist PROC
; Line 875
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 878
	mov	DWORD PTR _percent$[ebp], 0
; Line 879
	mov	eax, DWORD PTR _lines$[ebp]
	lea	ecx, DWORD PTR [eax*8+3]
	mov	DWORD PTR _listheight$[ebp], ecx
; Line 880
	mov	DWORD PTR _BTNSHEIGHT$[ebp], 31		; 0000001fH
; Line 884
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	eax, DWORD PTR _listid$[ebp]
	mov	DWORD PTR [edx], eax
; Line 885
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR _upbid$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 886
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	ecx, DWORD PTR _dnbid$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 889
	cmp	DWORD PTR _stext$[ebp], 0
	je	SHORT $LN10@prefslist
; Line 890
	mov	DWORD PTR _r$[ebp], 3
; Line 891
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _r$[ebp+4], eax
; Line 892
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 893
	mov	DWORD PTR _r$[ebp+12], 8
; Line 894
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _r$[ebp+12]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 895
	mov	edx, DWORD PTR _sid$[ebp]
	push	edx
	mov	eax, DWORD PTR _stext$[ebp]
	push	eax
	push	0
	push	1342177280				; 50000000H
	push	OFFSET $SG89187
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
$LN10@prefslist:
; Line 898
	mov	edx, DWORD PTR _listheight$[ebp]
	cmp	edx, DWORD PTR _BTNSHEIGHT$[ebp]
	jle	SHORT $LN9@prefslist
; Line 899
	mov	eax, DWORD PTR _listheight$[ebp]
	mov	DWORD PTR _totalheight$[ebp], eax
; Line 900
	mov	eax, DWORD PTR _listheight$[ebp]
	sub	eax, DWORD PTR _BTNSHEIGHT$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _buttonpos$[ebp], eax
; Line 901
	jmp	SHORT $LN8@prefslist
$LN9@prefslist:
; Line 902
	mov	ecx, DWORD PTR _BTNSHEIGHT$[ebp]
	mov	DWORD PTR _totalheight$[ebp], ecx
; Line 903
	mov	DWORD PTR _buttonpos$[ebp], 0
$LN8@prefslist:
; Line 906
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@prefslist
$LN6@prefslist:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@prefslist:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN5@prefslist
; Line 908
	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 3
	imul	eax, DWORD PTR _percent$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _xpos$[ebp], eax
; Line 909
	mov	edx, DWORD PTR _xpos$[ebp]
	add	edx, 3
	mov	DWORD PTR _left$89193[ebp], edx
; Line 910
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _percent$[ebp]
	add	ecx, DWORD PTR ?percents@?1??prefslist@@9@9[eax*4]
	mov	DWORD PTR _percent$[ebp], ecx
; Line 911
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 3
	imul	eax, DWORD PTR _percent$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _xpos$[ebp], eax
; Line 912
	mov	edx, DWORD PTR _xpos$[ebp]
	sub	edx, DWORD PTR _left$89193[ebp]
	mov	DWORD PTR _wid$89194[ebp], edx
; Line 914
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	cmp	DWORD PTR tv133[ebp], 1
	je	SHORT $LN2@prefslist
	cmp	DWORD PTR tv133[ebp], 2
	je	SHORT $LN1@prefslist
	jmp	$LN3@prefslist
$LN2@prefslist:
; Line 917
	mov	ecx, DWORD PTR _left$89193[ebp]
	mov	DWORD PTR _r$[ebp], ecx
	mov	edx, DWORD PTR _wid$89194[ebp]
	mov	DWORD PTR _r$[ebp+8], edx
; Line 918
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
	mov	edx, DWORD PTR _listheight$[ebp]
	mov	DWORD PTR _r$[ebp+12], edx
; Line 925
	mov	eax, DWORD PTR _listid$[ebp]
	push	eax
	push	OFFSET $SG89201
	push	512					; 00000200H
	push	1344340160				; 502100c0H
	push	OFFSET $SG89202
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
	mov	DWORD PTR _ctl$89200[ebp], eax
; Line 926
	mov	esi, esp
	mov	edx, DWORD PTR _ctl$89200[ebp]
	push	edx
	call	DWORD PTR __imp__MakeDragList@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 928
	jmp	$LN3@prefslist
$LN1@prefslist:
; Line 934
	mov	eax, DWORD PTR _left$89193[ebp]
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _wid$89194[ebp]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 935
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _buttonpos$[ebp]
	mov	DWORD PTR _r$[ebp+4], eax
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 939
	mov	ecx, DWORD PTR _upbid$[ebp]
	push	ecx
	push	OFFSET $SG89204
	push	0
	push	1342259200				; 50014000H
	push	OFFSET $SG89205
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 941
	mov	eax, DWORD PTR _left$89193[ebp]
	mov	DWORD PTR _r$[ebp], eax
	mov	ecx, DWORD PTR _wid$89194[ebp]
	mov	DWORD PTR _r$[ebp+8], ecx
; Line 942
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _buttonpos$[ebp]
	lea	edx, DWORD PTR [eax+ecx+17]
	mov	DWORD PTR _r$[ebp+4], edx
; Line 943
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 947
	mov	eax, DWORD PTR _dnbid$[ebp]
	push	eax
	push	OFFSET $SG89206
	push	0
	push	1342259200				; 50014000H
	push	OFFSET $SG89207
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
$LN3@prefslist:
; Line 952
	jmp	$LN6@prefslist
$LN5@prefslist:
; Line 954
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _totalheight$[ebp]
	lea	edx, DWORD PTR [ecx+eax+3]
	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 956
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@prefslist
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@prefslist:
	DD	1
	DD	$LN14@prefslist
$LN14@prefslist:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN13@prefslist
$LN13@prefslist:
	DB	114					; 00000072H
	DB	0
_prefslist ENDP
_TEXT	ENDS
PUBLIC	_pl_itemfrompt
EXTRN	__imp__LBItemFromPt@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -56						; size = 4
_downitem$ = -52					; size = 4
_upitem$ = -48						; size = 4
_downdist$ = -44					; size = 4
_updist$ = -40						; size = 4
_downpoint$ = -32					; size = 8
_uppoint$ = -16						; size = 8
_ret$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_cursor$ = 12						; size = 8
_scroll$ = 20						; size = 4
_pl_itemfrompt PROC
; Line 985
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1001
	mov	esi, esp
	mov	eax, DWORD PTR _scroll$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cursor$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__LBItemFromPt@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 1002
	cmp	DWORD PTR _ret$[ebp], -1
	jne	SHORT $LN8@pl_itemfro
; Line 1003
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN9@pl_itemfro
$LN8@pl_itemfro:
; Line 1004
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _cursor$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cursor$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__LBItemFromPt@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 1005
	mov	DWORD PTR _downdist$[ebp], 0
	mov	ecx, DWORD PTR _downdist$[ebp]
	mov	DWORD PTR _updist$[ebp], ecx
; Line 1006
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@pl_itemfro
$LN6@pl_itemfro:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@pl_itemfro:
	cmp	DWORD PTR _i$[ebp], 4096		; 00001000H
	jge	$LN5@pl_itemfro
	cmp	DWORD PTR _updist$[ebp], 0
	je	SHORT $LN4@pl_itemfro
	cmp	DWORD PTR _downdist$[ebp], 0
	jne	$LN5@pl_itemfro
$LN4@pl_itemfro:
; Line 1007
	mov	eax, DWORD PTR _cursor$[ebp]
	mov	DWORD PTR _downpoint$[ebp], eax
	mov	ecx, DWORD PTR _cursor$[ebp+4]
	mov	DWORD PTR _downpoint$[ebp+4], ecx
	mov	edx, DWORD PTR _downpoint$[ebp]
	mov	DWORD PTR _uppoint$[ebp], edx
	mov	eax, DWORD PTR _downpoint$[ebp+4]
	mov	DWORD PTR _uppoint$[ebp+4], eax
; Line 1008
	mov	ecx, DWORD PTR _uppoint$[ebp+4]
	sub	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _uppoint$[ebp+4], ecx
; Line 1009
	mov	edx, DWORD PTR _downpoint$[ebp+4]
	add	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _downpoint$[ebp+4], edx
; Line 1010
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _uppoint$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uppoint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__LBItemFromPt@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _upitem$[ebp], eax
; Line 1011
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _downpoint$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _downpoint$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__LBItemFromPt@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _downitem$[ebp], eax
; Line 1012
	cmp	DWORD PTR _updist$[ebp], 0
	jne	SHORT $LN3@pl_itemfro
	mov	eax, DWORD PTR _upitem$[ebp]
	cmp	eax, DWORD PTR _ret$[ebp]
	je	SHORT $LN3@pl_itemfro
; Line 1013
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _updist$[ebp], ecx
$LN3@pl_itemfro:
; Line 1014
	cmp	DWORD PTR _downdist$[ebp], 0
	jne	SHORT $LN2@pl_itemfro
	mov	edx, DWORD PTR _downitem$[ebp]
	cmp	edx, DWORD PTR _ret$[ebp]
	je	SHORT $LN2@pl_itemfro
; Line 1015
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _downdist$[ebp], eax
$LN2@pl_itemfro:
; Line 1016
	jmp	$LN6@pl_itemfro
$LN5@pl_itemfro:
; Line 1017
	mov	ecx, DWORD PTR _downdist$[ebp]
	cmp	ecx, DWORD PTR _updist$[ebp]
	jge	SHORT $LN1@pl_itemfro
; Line 1018
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, 1
	mov	DWORD PTR _ret$[ebp], edx
$LN1@pl_itemfro:
; Line 1019
	mov	eax, DWORD PTR _ret$[ebp]
$LN9@pl_itemfro:
; Line 1020
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@pl_itemfro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@pl_itemfro:
	DD	2
	DD	$LN13@pl_itemfro
$LN13@pl_itemfro:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN11@pl_itemfro
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN12@pl_itemfro
$LN12@pl_itemfro:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN11@pl_itemfro:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_pl_itemfrompt ENDP
_TEXT	ENDS
PUBLIC	_handle_prefslist
EXTRN	__imp__MessageBeep@4:PROC
EXTRN	__imp__DrawInsert@12:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__SendDlgItemMessageA@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -28						; size = 4
_nitems$89306 = -24					; size = 4
_selection$89303 = -20					; size = 4
_dest$89272 = -16					; size = 4
_dlm$89270 = -12					; size = 4
_ret$ = -8						; size = 4
_i$ = -4						; size = 4
_hdl$ = 8						; size = 4
_array$ = 12						; size = 4
_maxmemb$ = 16						; size = 4
_is_dlmsg$ = 20						; size = 4
_hwnd$ = 24						; size = 4
_wParam$ = 28						; size = 4
_lParam$ = 32						; size = 4
_handle_prefslist PROC
; Line 1033
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1035
	mov	DWORD PTR _ret$[ebp], 0
; Line 1037
	cmp	DWORD PTR _is_dlmsg$[ebp], 0
	je	$LN29@handle_pre
; Line 1039
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	ecx, DWORD PTR _wParam$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN28@handle_pre
; Line 1040
	mov	edx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _dlm$89270[ebp], edx
; Line 1041
	mov	DWORD PTR _dest$89272[ebp], 0
; Line 1042
	mov	eax, DWORD PTR _dlm$89270[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	sub	edx, 1157				; 00000485H
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 3
	ja	$LN28@handle_pre
	mov	eax, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN32@handle_pre[eax*4]
$LN25@handle_pre:
; Line 1050
	mov	esi, esp
	push	OFFSET $SG89279
	push	0
	push	384					; 00000180H
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1052
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _dlm$89270[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	edx, DWORD PTR _dlm$89270[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__LBItemFromPt@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1053
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 1055
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1056
	mov	ecx, DWORD PTR _ret$[ebp]
	or	ecx, 1
	mov	DWORD PTR _ret$[ebp], ecx
	jmp	$LN28@handle_pre
$LN24@handle_pre:
; Line 1058
	mov	esi, esp
	push	-1
	mov	edx, DWORD PTR _dlm$89270[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DrawInsert@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1060
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	386					; 00000182H
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1061
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 1062
	mov	edx, DWORD PTR _ret$[ebp]
	or	edx, 1
	mov	DWORD PTR _ret$[ebp], edx
	jmp	$LN28@handle_pre
$LN23@handle_pre:
; Line 1064
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 1065
	push	1
	mov	ecx, DWORD PTR _dlm$89270[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _dlm$89270[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_pl_itemfrompt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _dest$89272[ebp], eax
; Line 1066
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	ecx, DWORD PTR _dest$89272[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jle	SHORT $LN22@handle_pre
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _dest$89272[ebp], eax
$LN22@handle_pre:
; Line 1067
	mov	esi, esp
	mov	ecx, DWORD PTR _dest$89272[ebp]
	push	ecx
	mov	edx, DWORD PTR _dlm$89270[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DrawInsert@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1068
	cmp	DWORD PTR _dest$89272[ebp], 0
	jl	SHORT $LN21@handle_pre
; Line 1069
	mov	esi, esp
	push	3
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1070
	jmp	SHORT $LN20@handle_pre
$LN21@handle_pre:
; Line 1071
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@handle_pre:
; Line 1072
	mov	ecx, DWORD PTR _ret$[ebp]
	or	ecx, 1
	mov	DWORD PTR _ret$[ebp], ecx
	jmp	$LN28@handle_pre
$LN19@handle_pre:
; Line 1074
	mov	edx, DWORD PTR _hdl$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN18@handle_pre
; Line 1075
	push	1
	mov	eax, DWORD PTR _dlm$89270[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _dlm$89270[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_pl_itemfrompt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _dest$89272[ebp], eax
; Line 1076
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	eax, DWORD PTR _dest$89272[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jle	SHORT $LN17@handle_pre
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _dest$89272[ebp], edx
$LN17@handle_pre:
; Line 1077
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _dlm$89270[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DrawInsert@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@handle_pre:
; Line 1080
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	386					; 00000182H
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1081
	mov	edx, DWORD PTR _hdl$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN16@handle_pre
; Line 1082
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 1083
	cmp	DWORD PTR _dest$89272[ebp], 0
	jl	SHORT $LN15@handle_pre
; Line 1085
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR _dest$89272[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jle	SHORT $LN14@handle_pre
	mov	eax, DWORD PTR _dest$89272[ebp]
	sub	eax, 1
	mov	DWORD PTR _dest$89272[ebp], eax
$LN14@handle_pre:
; Line 1086
	mov	ecx, DWORD PTR _dest$89272[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdl$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	_pl_moveitem
	add	esp, 16					; 00000010H
$LN15@handle_pre:
; Line 1088
	mov	ecx, DWORD PTR _ret$[ebp]
	or	ecx, 2
	mov	DWORD PTR _ret$[ebp], ecx
$LN16@handle_pre:
; Line 1090
	mov	edx, DWORD PTR _ret$[ebp]
	or	edx, 1
	mov	DWORD PTR _ret$[ebp], edx
$LN28@handle_pre:
; Line 1094
	jmp	$LN13@handle_pre
$LN29@handle_pre:
; Line 1099
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	edx, DWORD PTR _hdl$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	je	SHORT $LN11@handle_pre
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	edx, DWORD PTR _hdl$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jne	$LN13@handle_pre
$LN11@handle_pre:
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	test	ecx, ecx
	je	SHORT $LN10@handle_pre
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 5
	jne	$LN13@handle_pre
$LN10@handle_pre:
; Line 1102
	mov	esi, esp
	push	0
	push	0
	push	392					; 00000188H
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _selection$89303[ebp], eax
; Line 1103
	cmp	DWORD PTR _selection$89303[ebp], -1
	jne	SHORT $LN9@handle_pre
; Line 1104
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__MessageBeep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1105
	jmp	$LN13@handle_pre
$LN9@handle_pre:
; Line 1108
	mov	esi, esp
	push	0
	push	0
	push	395					; 0000018bH
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nitems$89306[ebp], eax
; Line 1110
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	eax, DWORD PTR _hdl$[ebp]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN7@handle_pre
	cmp	DWORD PTR _selection$89303[ebp], 0
	jle	SHORT $LN7@handle_pre
; Line 1111
	mov	ecx, DWORD PTR _selection$89303[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _selection$89303[ebp]
	push	edx
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_pl_moveitem
	add	esp, 16					; 00000010H
	jmp	SHORT $LN6@handle_pre
$LN7@handle_pre:
; Line 1112
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	edx, DWORD PTR _hdl$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jne	SHORT $LN6@handle_pre
	mov	eax, DWORD PTR _nitems$89306[ebp]
	sub	eax, 1
	cmp	DWORD PTR _selection$89303[ebp], eax
	jge	SHORT $LN6@handle_pre
; Line 1113
	mov	ecx, DWORD PTR _selection$89303[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _selection$89303[ebp]
	push	edx
	mov	eax, DWORD PTR _hdl$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_pl_moveitem
	add	esp, 16					; 00000010H
$LN6@handle_pre:
; Line 1114
	mov	eax, DWORD PTR _ret$[ebp]
	or	eax, 2
	mov	DWORD PTR _ret$[ebp], eax
$LN13@handle_pre:
; Line 1121
	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN4@handle_pre
; Line 1123
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@handle_pre
$LN2@handle_pre:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@handle_pre:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _maxmemb$[ebp]
	jge	SHORT $LN4@handle_pre
; Line 1125
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	409					; 00000199H
	mov	ecx, DWORD PTR _hdl$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _array$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN2@handle_pre
$LN4@handle_pre:
; Line 1128
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1129
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@handle_pre:
	DD	$LN25@handle_pre
	DD	$LN23@handle_pre
	DD	$LN19@handle_pre
	DD	$LN24@handle_pre
_handle_prefslist ENDP
; Function compile flags: /Odtp /RTCsu
_txt$ = -12						; size = 4
_val$ = -8						; size = 4
_tlen$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_listid$ = 12						; size = 4
_src$ = 16						; size = 4
_dst$ = 20						; size = 4
_pl_moveitem PROC
; Line 962
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 966
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	push	394					; 0000018aH
	mov	ecx, DWORD PTR _listid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tlen$[ebp], eax
; Line 967
	push	1
	mov	eax, DWORD PTR _tlen$[ebp]
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _txt$[ebp], eax
; Line 968
	mov	esi, esp
	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	push	393					; 00000189H
	mov	eax, DWORD PTR _listid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 969
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	push	409					; 00000199H
	mov	eax, DWORD PTR _listid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _val$[ebp], eax
; Line 971
	mov	esi, esp
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	push	0
	push	389					; 00000185H
	mov	eax, DWORD PTR _listid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 973
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	push	386					; 00000182H
	mov	eax, DWORD PTR _listid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 976
	mov	esi, esp
	mov	edx, DWORD PTR _txt$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	push	385					; 00000181H
	mov	ecx, DWORD PTR _listid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 978
	mov	esi, esp
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	push	410					; 0000019aH
	mov	edx, DWORD PTR _listid$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 980
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	push	390					; 00000186H
	mov	edx, DWORD PTR _listid$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 981
	mov	ecx, DWORD PTR _txt$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 982
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pl_moveitem ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_progressbar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cp$ = 8						; size = 4
_id$ = 12						; size = 4
_progressbar PROC
; Line 1137
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1140
	mov	DWORD PTR _r$[ebp], 3
; Line 1141
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$[ebp+4], ecx
; Line 1142
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _r$[ebp+8], eax
; Line 1143
	mov	DWORD PTR _r$[ebp+12], 14		; 0000000eH
; Line 1144
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _r$[ebp+12]
	lea	ecx, DWORD PTR [eax+edx+3]
	mov	edx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 1150
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET $SG89324
	push	512					; 00000200H
	push	1342177281				; 50000001H
	push	OFFSET $SG89325
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _r$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_doctl
	add	esp, 40					; 00000028H
; Line 1151
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@progressba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@progressba:
	DD	1
	DD	$LN4@progressba
$LN4@progressba:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@progressba
$LN3@progressba:
	DB	114					; 00000072H
	DB	0
_progressbar ENDP
_TEXT	ENDS
PUBLIC	_winctrl_add_shortcuts
EXTRN	__wassert:PROC
EXTRN	_tolower:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$89358 = -5						; size = 1
_i$ = -4						; size = 4
_dp$ = 8						; size = 4
_c$ = 12						; size = 4
_winctrl_add_shortcuts PROC
; Line 1195
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1197
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@winctrl_ad
$LN3@winctrl_ad:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@winctrl_ad:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN5@winctrl_ad
; Line 1198
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN1@winctrl_ad
; Line 1199
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	BYTE PTR _s$89358[ebp], al
; Line 1200
	movzx	edx, BYTE PTR _s$89358[ebp]
	mov	eax, DWORD PTR _dp$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+60]
	test	ecx, ecx
	je	SHORT $LN7@winctrl_ad
	push	1200					; 000004b0H
	push	OFFSET $SG89361
	push	OFFSET $SG89362
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@winctrl_ad:
; Line 1201
	movzx	eax, BYTE PTR _s$89358[ebp]
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [ecx+eax+60], 1
$LN1@winctrl_ad:
; Line 1203
	jmp	SHORT $LN3@winctrl_ad
$LN5@winctrl_ad:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_add_shortcuts ENDP
_TEXT	ENDS
PUBLIC	_winctrl_rem_shortcuts
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$89373 = -5						; size = 1
_i$ = -4						; size = 4
_dp$ = 8						; size = 4
_c$ = 12						; size = 4
_winctrl_rem_shortcuts PROC
; Line 1206
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1208
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@winctrl_re
$LN3@winctrl_re:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@winctrl_re:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN5@winctrl_re
; Line 1209
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	je	SHORT $LN1@winctrl_re
; Line 1210
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	BYTE PTR _s$89373[ebp], al
; Line 1211
	movzx	edx, BYTE PTR _s$89373[ebp]
	mov	eax, DWORD PTR _dp$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+60]
	test	ecx, ecx
	jne	SHORT $LN7@winctrl_re
	push	1211					; 000004bbH
	push	OFFSET $SG89376
	push	OFFSET $SG89377
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@winctrl_re:
; Line 1212
	movzx	eax, BYTE PTR _s$89373[ebp]
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [ecx+eax+60], 0
$LN1@winctrl_re:
; Line 1214
	jmp	SHORT $LN3@winctrl_re
$LN5@winctrl_re:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_rem_shortcuts ENDP
_TEXT	ENDS
PUBLIC	_winctrl_init
EXTRN	_newtree234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_wc$ = 8						; size = 4
_winctrl_init PROC
; Line 1262
	push	ebp
	mov	ebp, esp
; Line 1263
	push	OFFSET _winctrl_cmp_byctrl
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1264
	push	OFFSET _winctrl_cmp_byid
	call	_newtree234
	add	esp, 4
	mov	edx, DWORD PTR _wc$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1265
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_winctrl_init ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_winctrl_cmp_byctrl PROC
; Line 1217
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1218
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 1219
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 1220
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN4@winctrl_cm
; Line 1221
	or	eax, -1
	jmp	SHORT $LN5@winctrl_cm
	jmp	SHORT $LN5@winctrl_cm
$LN4@winctrl_cm:
; Line 1222
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN2@winctrl_cm
; Line 1223
	mov	eax, 1
	jmp	SHORT $LN5@winctrl_cm
; Line 1224
	jmp	SHORT $LN5@winctrl_cm
$LN2@winctrl_cm:
; Line 1225
	xor	eax, eax
$LN5@winctrl_cm:
; Line 1226
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_cmp_byctrl ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_winctrl_cmp_byid PROC
; Line 1228
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1229
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 1230
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 1231
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN4@winctrl_cm@2
; Line 1232
	or	eax, -1
	jmp	SHORT $LN5@winctrl_cm@2
	jmp	SHORT $LN5@winctrl_cm@2
$LN4@winctrl_cm@2:
; Line 1233
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN2@winctrl_cm@2
; Line 1234
	mov	eax, 1
	jmp	SHORT $LN5@winctrl_cm@2
; Line 1235
	jmp	SHORT $LN5@winctrl_cm@2
$LN2@winctrl_cm@2:
; Line 1236
	xor	eax, eax
$LN5@winctrl_cm@2:
; Line 1237
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_cmp_byid ENDP
_TEXT	ENDS
PUBLIC	_winctrl_remove
PUBLIC	_winctrl_cleanup
EXTRN	_freetree234:PROC
EXTRN	_index234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -4						; size = 4
_wc$ = 8						; size = 4
_winctrl_cleanup PROC
; Line 1267
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@winctrl_cl:
; Line 1270
	push	0
	mov	eax, DWORD PTR _wc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN1@winctrl_cl
; Line 1271
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _wc$[ebp]
	push	eax
	call	_winctrl_remove
	add	esp, 8
; Line 1272
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1273
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1274
	jmp	SHORT $LN2@winctrl_cl
$LN1@winctrl_cl:
; Line 1276
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_freetree234
	add	esp, 4
; Line 1277
	mov	eax, DWORD PTR _wc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_freetree234
	add	esp, 4
; Line 1278
	mov	edx, DWORD PTR _wc$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _wc$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1279
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_cleanup ENDP
_TEXT	ENDS
PUBLIC	_winctrl_add
EXTRN	_add234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_wc$ = 8						; size = 4
_c$ = 12						; size = 4
_winctrl_add PROC
; Line 1282
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1284
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@winctrl_ad@2
; Line 1285
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_add234
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1286
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	ecx, DWORD PTR _c$[ebp]
	je	SHORT $LN1@winctrl_ad@2
	push	1286					; 00000506H
	push	OFFSET $SG89454
	push	OFFSET $SG89455
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@winctrl_ad@2:
; Line 1288
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_add234
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1289
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	je	SHORT $LN2@winctrl_ad@2
	push	1289					; 00000509H
	push	OFFSET $SG89457
	push	OFFSET $SG89458
	call	__wassert
	add	esp, 12					; 0000000cH
$LN2@winctrl_ad@2:
; Line 1290
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_add ENDP
_TEXT	ENDS
EXTRN	_del234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_wc$ = 8						; size = 4
_c$ = 12						; size = 4
_winctrl_remove PROC
; Line 1293
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1295
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_del234
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1296
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_del234
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1297
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	je	SHORT $LN1@winctrl_re@2
	push	1297					; 00000511H
	push	OFFSET $SG89466
	push	OFFSET $SG89467
	call	__wassert
	add	esp, 12					; 0000000cH
$LN1@winctrl_re@2:
; Line 1298
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_remove ENDP
_TEXT	ENDS
PUBLIC	_winctrl_findbyctrl
EXTRN	_find234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_wc$ = 8						; size = 4
_ctrl$ = 12						; size = 4
_winctrl_findbyctrl PROC
; Line 1301
	push	ebp
	mov	ebp, esp
; Line 1302
	push	OFFSET _winctrl_cmp_byctrl_find
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
; Line 1303
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_winctrl_findbyctrl ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_winctrl_cmp_byctrl_find PROC
; Line 1239
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1240
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 1241
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 1242
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN4@winctrl_cm@3
; Line 1243
	or	eax, -1
	jmp	SHORT $LN5@winctrl_cm@3
	jmp	SHORT $LN5@winctrl_cm@3
$LN4@winctrl_cm@3:
; Line 1244
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN2@winctrl_cm@3
; Line 1245
	mov	eax, 1
	jmp	SHORT $LN5@winctrl_cm@3
; Line 1246
	jmp	SHORT $LN5@winctrl_cm@3
$LN2@winctrl_cm@3:
; Line 1247
	xor	eax, eax
$LN5@winctrl_cm@3:
; Line 1248
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_cmp_byctrl_find ENDP
_TEXT	ENDS
PUBLIC	_winctrl_findbyid
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_wc$ = 8						; size = 4
_id$ = 12						; size = 4
_winctrl_findbyid PROC
; Line 1306
	push	ebp
	mov	ebp, esp
; Line 1307
	push	OFFSET _winctrl_cmp_byid_find
	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
; Line 1308
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_winctrl_findbyid ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_winctrl_cmp_byid_find PROC
; Line 1250
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1251
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 1252
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 1253
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN4@winctrl_cm@4
; Line 1254
	or	eax, -1
	jmp	SHORT $LN5@winctrl_cm@4
	jmp	SHORT $LN5@winctrl_cm@4
$LN4@winctrl_cm@4:
; Line 1255
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], eax
	jl	SHORT $LN2@winctrl_cm@4
; Line 1256
	mov	eax, 1
	jmp	SHORT $LN5@winctrl_cm@4
; Line 1257
	jmp	SHORT $LN5@winctrl_cm@4
$LN2@winctrl_cm@4:
; Line 1258
	xor	eax, eax
$LN5@winctrl_cm@4:
; Line 1259
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_cmp_byid_find ENDP
_TEXT	ENDS
PUBLIC	_winctrl_findbyindex
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_wc$ = 8						; size = 4
_index$ = 12						; size = 4
_winctrl_findbyindex PROC
; Line 1311
	push	ebp
	mov	ebp, esp
; Line 1312
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_index234
	add	esp, 8
; Line 1313
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_winctrl_findbyindex ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_winctrl_layout
EXTRN	_memcpy:PROC
EXTRN	_fontspec_new:PROC
EXTRN	_dupstr:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv402 = -1468						; size = 4
tv368 = -1464						; size = 4
tv282 = -1460						; size = 4
_i$89648 = -1456					; size = 4
_c$89642 = -1452					; size = 4
_percent$89623 = -1448					; size = 4
_i$89622 = -1444					; size = 4
_tabarray$89621 = -1440					; size = 4
_width$89620 = -1436					; size = 4
_i$89593 = -1432					; size = 4
_buttons$89592 = -1428					; size = 4
_lines$89583 = -1420					; size = 4
_escaped$89582 = -1412					; size = 4
_wrapped$89581 = -1408					; size = 4
_col$89565 = -1404					; size = 4
_i$89553 = -1400					; size = 4
_i$89546 = -1396					; size = 4
_maxy$89545 = -1392					; size = 4
_i$89534 = -1388					; size = 4
_rx$89533 = -1384					; size = 4
_lx$89532 = -1380					; size = 4
_rpercent$89531 = -1376					; size = 4
_lpercent$89530 = -1372					; size = 4
_ctrl$89524 = -1368					; size = 4
_c$89517 = -1364					; size = 4
_c$89511 = -1360					; size = 4
_data$ = -1356						; size = 4
_num_ids$ = -1352					; size = 4
_base_id$ = -1348					; size = 4
_actual_base_id$ = -1344				; size = 4
_i$ = -1340						; size = 4
_escaped$ = -1336					; size = 4
_nshortcuts$ = -1332					; size = 4
_shortcuts$ = -1324					; size = 16
_pos$ = -1300						; size = 36
_ntabdelays$ = -1260					; size = 4
_tabdelayed$ = -1252					; size = 64
_tabdelays$ = -1180					; size = 576
_colspan$ = -600					; size = 4
_colstart$ = -596					; size = 4
_ncols$ = -592						; size = 4
_columns$ = -584					; size = 576
__$ArrayPad$ = -4					; size = 4
_dp$ = 8						; size = 4
_wc$ = 12						; size = 4
_cp$ = 16						; size = 4
_s$ = 20						; size = 4
_id$ = 24						; size = 4
_winctrl_layout PROC
; Line 1317
	push	ebp
	mov	ebp, esp
	sub	esp, 1468				; 000005bcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1468]
	mov	ecx, 367				; 0000016fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1333
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _base_id$[ebp], ecx
; Line 1336
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN77@winctrl_la
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN77@winctrl_la
; Line 1337
	push	32					; 00000020H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _c$89511[ebp], eax
; Line 1338
	mov	eax, DWORD PTR _c$89511[ebp]
	mov	DWORD PTR [eax], 0
; Line 1339
	mov	ecx, DWORD PTR _c$89511[ebp]
	mov	edx, DWORD PTR _base_id$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1340
	mov	eax, DWORD PTR _c$89511[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 1341
	mov	ecx, DWORD PTR _c$89511[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 1342
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _c$89511[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1343
	mov	eax, DWORD PTR _c$89511[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	push	ecx
	call	_winctrl_add
	add	esp, 8
; Line 1344
	mov	edx, DWORD PTR _base_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cp$[ebp]
	push	edx
	call	_beginbox
	add	esp, 12					; 0000000cH
; Line 1345
	mov	eax, DWORD PTR _base_id$[ebp]
	add	eax, 1
	mov	DWORD PTR _base_id$[ebp], eax
$LN77@winctrl_la:
; Line 1349
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	$LN76@winctrl_la
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	$LN76@winctrl_la
; Line 1350
	push	32					; 00000020H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _c$89517[ebp], eax
; Line 1351
	mov	eax, DWORD PTR _c$89517[ebp]
	mov	DWORD PTR [eax], 0
; Line 1352
	mov	ecx, DWORD PTR _c$89517[ebp]
	mov	edx, DWORD PTR _base_id$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1353
	mov	eax, DWORD PTR _c$89517[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 1354
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _c$89517[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1355
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _c$89517[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1356
	mov	eax, DWORD PTR _c$89517[ebp]
	push	eax
	mov	ecx, DWORD PTR _wc$[ebp]
	push	ecx
	call	_winctrl_add
	add	esp, 8
; Line 1357
	mov	edx, DWORD PTR _base_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_paneltitle
	add	esp, 8
; Line 1358
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, 1
	mov	DWORD PTR _base_id$[ebp], ecx
$LN76@winctrl_la:
; Line 1362
	mov	DWORD PTR _ncols$[ebp], 1
; Line 1363
	mov	esi, DWORD PTR _cp$[ebp]
	mov	ecx, 9
	lea	edi, DWORD PTR _columns$[ebp]
	rep movsd
; Line 1366
	mov	DWORD PTR _ntabdelays$[ebp], 0
; Line 1369
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN75@winctrl_la
$LN74@winctrl_la:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN75@winctrl_la:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN73@winctrl_la
; Line 1370
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ctrl$89524[ebp], edx
; Line 1383
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [eax], 6
	jne	$LN72@winctrl_la
; Line 1384
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+28], 1
	sete	dl
	xor	eax, eax
	cmp	DWORD PTR _ncols$[ebp], 1
	sete	al
	xor	edx, eax
	jne	SHORT $LN80@winctrl_la
	push	1384					; 00000568H
	push	OFFSET $SG89527
	push	OFFSET $SG89528
	call	__wassert
	add	esp, 12					; 0000000cH
$LN80@winctrl_la:
; Line 1386
	cmp	DWORD PTR _ncols$[ebp], 1
	jne	$LN71@winctrl_la
; Line 1392
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _ncols$[ebp], eax
; Line 1393
	cmp	DWORD PTR _ncols$[ebp], 16		; 00000010H
	jbe	SHORT $LN81@winctrl_la
	push	1393					; 00000571H
	push	OFFSET $SG89536
	push	OFFSET $SG89537
	call	__wassert
	add	esp, 12					; 0000000cH
$LN81@winctrl_la:
; Line 1394
	mov	DWORD PTR _i$89534[ebp], 1
	jmp	SHORT $LN70@winctrl_la
$LN69@winctrl_la:
	mov	edx, DWORD PTR _i$89534[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89534[ebp], edx
$LN70@winctrl_la:
	mov	eax, DWORD PTR _i$89534[ebp]
	cmp	eax, DWORD PTR _ncols$[ebp]
	jge	SHORT $LN68@winctrl_la
; Line 1395
	mov	ecx, DWORD PTR _i$89534[ebp]
	imul	ecx, 36					; 00000024H
	lea	edi, DWORD PTR _columns$[ebp+ecx]
	mov	ecx, 9
	lea	esi, DWORD PTR _columns$[ebp]
	rep movsd
	jmp	SHORT $LN69@winctrl_la
$LN68@winctrl_la:
; Line 1397
	mov	DWORD PTR _lpercent$89530[ebp], 0
; Line 1398
	mov	DWORD PTR _i$89534[ebp], 0
	jmp	SHORT $LN67@winctrl_la
$LN66@winctrl_la:
	mov	edx, DWORD PTR _i$89534[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89534[ebp], edx
$LN67@winctrl_la:
	mov	eax, DWORD PTR _i$89534[ebp]
	cmp	eax, DWORD PTR _ncols$[ebp]
	jge	$LN65@winctrl_la
; Line 1399
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$89534[ebp]
	mov	ecx, DWORD PTR _lpercent$89530[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _rpercent$89531[ebp], ecx
; Line 1401
	mov	ecx, DWORD PTR _i$89534[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _i$89534[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _columns$[ebp+edx+16]
	add	eax, 3
	imul	eax, DWORD PTR _lpercent$89530[ebp]
	cdq
	mov	esi, 100				; 00000064H
	idiv	esi
	add	eax, DWORD PTR _columns$[ebp+ecx+20]
	mov	DWORD PTR _lx$89532[ebp], eax
; Line 1403
	mov	ecx, DWORD PTR _i$89534[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _i$89534[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _columns$[ebp+edx+16]
	add	eax, 3
	imul	eax, DWORD PTR _rpercent$89531[ebp]
	cdq
	mov	esi, 100				; 00000064H
	idiv	esi
	add	eax, DWORD PTR _columns$[ebp+ecx+20]
	mov	DWORD PTR _rx$89533[ebp], eax
; Line 1404
	mov	ecx, DWORD PTR _i$89534[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _lx$89532[ebp]
	mov	DWORD PTR _columns$[ebp+ecx+20], edx
; Line 1405
	mov	eax, DWORD PTR _rx$89533[ebp]
	sub	eax, DWORD PTR _lx$89532[ebp]
	sub	eax, 3
	mov	ecx, DWORD PTR _i$89534[ebp]
	imul	ecx, 36					; 00000024H
	mov	DWORD PTR _columns$[ebp+ecx+16], eax
; Line 1406
	mov	edx, DWORD PTR _rpercent$89531[ebp]
	mov	DWORD PTR _lpercent$89530[ebp], edx
; Line 1407
	jmp	$LN66@winctrl_la
$LN65@winctrl_la:
; Line 1408
	jmp	$LN64@winctrl_la
$LN71@winctrl_la:
; Line 1412
	mov	eax, DWORD PTR _columns$[ebp+12]
	mov	DWORD PTR _maxy$89545[ebp], eax
; Line 1414
	mov	DWORD PTR _i$89546[ebp], 1
	jmp	SHORT $LN63@winctrl_la
$LN62@winctrl_la:
	mov	ecx, DWORD PTR _i$89546[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89546[ebp], ecx
$LN63@winctrl_la:
	mov	edx, DWORD PTR _i$89546[ebp]
	cmp	edx, DWORD PTR _ncols$[ebp]
	jge	SHORT $LN61@winctrl_la
; Line 1415
	mov	eax, DWORD PTR _i$89546[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _maxy$89545[ebp]
	cmp	ecx, DWORD PTR _columns$[ebp+eax+12]
	jge	SHORT $LN60@winctrl_la
; Line 1416
	mov	edx, DWORD PTR _i$89546[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _columns$[ebp+edx+12]
	mov	DWORD PTR _maxy$89545[ebp], eax
$LN60@winctrl_la:
; Line 1417
	jmp	SHORT $LN62@winctrl_la
$LN61@winctrl_la:
	mov	DWORD PTR _ncols$[ebp], 1
; Line 1418
	mov	esi, DWORD PTR _cp$[ebp]
	mov	ecx, 9
	lea	edi, DWORD PTR _columns$[ebp]
	rep movsd
; Line 1419
	mov	ecx, DWORD PTR _maxy$89545[ebp]
	mov	DWORD PTR _columns$[ebp+12], ecx
$LN64@winctrl_la:
; Line 1422
	jmp	$LN74@winctrl_la
	jmp	$LN59@winctrl_la
$LN72@winctrl_la:
; Line 1423
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [edx], 9
	jne	$LN58@winctrl_la
; Line 1426
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN82@winctrl_la
	push	1426					; 00000592H
	push	OFFSET $SG89555
	push	OFFSET $SG89556
	call	__wassert
	add	esp, 12					; 0000000cH
$LN82@winctrl_la:
; Line 1427
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _ctrl$89524[ebp], eax
; Line 1429
	mov	DWORD PTR _i$89553[ebp], 0
	jmp	SHORT $LN57@winctrl_la
$LN56@winctrl_la:
	mov	ecx, DWORD PTR _i$89553[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89553[ebp], ecx
$LN57@winctrl_la:
	mov	edx, DWORD PTR _i$89553[ebp]
	cmp	edx, DWORD PTR _ntabdelays$[ebp]
	jge	SHORT $LN55@winctrl_la
; Line 1430
	mov	eax, DWORD PTR _i$89553[ebp]
	mov	ecx, DWORD PTR _tabdelayed$[ebp+eax*4]
	cmp	ecx, DWORD PTR _ctrl$89524[ebp]
	jne	SHORT $LN54@winctrl_la
; Line 1431
	jmp	SHORT $LN55@winctrl_la
$LN54@winctrl_la:
; Line 1432
	jmp	SHORT $LN56@winctrl_la
$LN55@winctrl_la:
	mov	edx, DWORD PTR _i$89553[ebp]
	cmp	edx, DWORD PTR _ntabdelays$[ebp]
	jl	SHORT $LN83@winctrl_la
	push	1432					; 00000598H
	push	OFFSET $SG89562
	push	OFFSET $SG89563
	call	__wassert
	add	esp, 12					; 0000000cH
$LN83@winctrl_la:
; Line 1434
	mov	ecx, DWORD PTR _i$89553[ebp]
	imul	ecx, 36					; 00000024H
	lea	esi, DWORD PTR _tabdelays$[ebp+ecx]
	mov	ecx, 9
	lea	edi, DWORD PTR _pos$[ebp]
	rep movsd
; Line 1436
	mov	DWORD PTR _colspan$[ebp], -1
	mov	edx, DWORD PTR _colspan$[ebp]
	mov	DWORD PTR _colstart$[ebp], edx
; Line 1438
	jmp	$LN59@winctrl_la
$LN58@winctrl_la:
; Line 1446
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _colstart$[ebp], ecx
; Line 1447
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+12]
	sar	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	add	eax, 1
	mov	DWORD PTR _colspan$[ebp], eax
; Line 1449
	mov	ecx, DWORD PTR _colstart$[ebp]
	imul	ecx, 36					; 00000024H
	lea	esi, DWORD PTR _columns$[ebp+ecx]
	mov	ecx, 9
	lea	edi, DWORD PTR _pos$[ebp]
	rep movsd
; Line 1451
	mov	edx, DWORD PTR _colspan$[ebp]
	mov	eax, DWORD PTR _colstart$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _colspan$[ebp]
	mov	eax, DWORD PTR _colstart$[ebp]
	lea	edx, DWORD PTR [eax+edx-1]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _colstart$[ebp]
	imul	eax, 36					; 00000024H
	mov	edx, DWORD PTR _columns$[ebp+edx+20]
	sub	edx, DWORD PTR _columns$[ebp+eax+20]
	add	edx, DWORD PTR _columns$[ebp+ecx+16]
	mov	DWORD PTR _pos$[ebp+16], edx
; Line 1453
	mov	eax, DWORD PTR _colstart$[ebp]
	mov	DWORD PTR _col$89565[ebp], eax
	jmp	SHORT $LN52@winctrl_la
$LN51@winctrl_la:
	mov	ecx, DWORD PTR _col$89565[ebp]
	add	ecx, 1
	mov	DWORD PTR _col$89565[ebp], ecx
$LN52@winctrl_la:
	mov	edx, DWORD PTR _colstart$[ebp]
	add	edx, DWORD PTR _colspan$[ebp]
	cmp	DWORD PTR _col$89565[ebp], edx
	jge	SHORT $LN50@winctrl_la
; Line 1454
	mov	eax, DWORD PTR _col$89565[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _pos$[ebp+12]
	cmp	ecx, DWORD PTR _columns$[ebp+eax+12]
	jge	SHORT $LN49@winctrl_la
; Line 1455
	mov	edx, DWORD PTR _col$89565[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _columns$[ebp+edx+12]
	mov	DWORD PTR _pos$[ebp+12], eax
$LN49@winctrl_la:
; Line 1462
	jmp	SHORT $LN51@winctrl_la
$LN50@winctrl_la:
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN59@winctrl_la
; Line 1463
	cmp	DWORD PTR _ntabdelays$[ebp], 16		; 00000010H
	jb	SHORT $LN84@winctrl_la
	push	1463					; 000005b7H
	push	OFFSET $SG89572
	push	OFFSET $SG89573
	call	__wassert
	add	esp, 12					; 0000000cH
$LN84@winctrl_la:
; Line 1464
	mov	eax, DWORD PTR _ntabdelays$[ebp]
	imul	eax, 36					; 00000024H
	lea	edi, DWORD PTR _tabdelays$[ebp+eax]
	mov	ecx, 9
	lea	esi, DWORD PTR _pos$[ebp]
	rep movsd
; Line 1465
	mov	ecx, DWORD PTR _ntabdelays$[ebp]
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	DWORD PTR _tabdelayed$[ebp+ecx*4], edx
; Line 1466
	mov	eax, DWORD PTR _ntabdelays$[ebp]
	add	eax, 1
	mov	DWORD PTR _ntabdelays$[ebp], eax
; Line 1467
	mov	DWORD PTR _pos$[ebp], 0
$LN59@winctrl_la:
; Line 1472
	mov	DWORD PTR _data$[ebp], 0
; Line 1475
	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _shortcuts$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1476
	mov	DWORD PTR _nshortcuts$[ebp], 0
; Line 1479
	mov	edx, DWORD PTR _base_id$[ebp]
	mov	DWORD PTR _actual_base_id$[ebp], edx
; Line 1485
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv282[ebp], ecx
	cmp	DWORD PTR tv282[ebp], 8
	ja	$LN13@winctrl_la
	mov	edx, DWORD PTR tv282[ebp]
	jmp	DWORD PTR $LN99@winctrl_la[edx*4]
$LN45@winctrl_la:
; Line 1490
	mov	DWORD PTR _num_ids$[ebp], 1
; Line 1492
	lea	eax, DWORD PTR _lines$89583[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_staticwrap
	add	esp, 16					; 00000010H
	mov	DWORD PTR _wrapped$89581[ebp], eax
; Line 1493
	push	0
	mov	eax, DWORD PTR _wrapped$89581[ebp]
	push	eax
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$89582[ebp], eax
; Line 1494
	mov	ecx, DWORD PTR _base_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lines$89583[ebp]
	push	edx
	mov	eax, DWORD PTR _escaped$89582[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_statictext
	add	esp, 16					; 00000010H
; Line 1495
	mov	edx, DWORD PTR _escaped$89582[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1496
	mov	eax, DWORD PTR _wrapped$89581[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1498
	jmp	$LN46@winctrl_la
$LN44@winctrl_la:
; Line 1500
	mov	DWORD PTR _num_ids$[ebp], 2
; Line 1502
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	movzx	edx, BYTE PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1503
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	cl, BYTE PTR [eax+28]
	mov	BYTE PTR _shortcuts$[ebp+edx], cl
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	add	edx, 1
	mov	DWORD PTR _nshortcuts$[ebp], edx
; Line 1504
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [eax+32], 100			; 00000064H
	jne	SHORT $LN43@winctrl_la
; Line 1505
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN42@winctrl_la
; Line 1507
	mov	edx, DWORD PTR _base_id$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _base_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_combobox
	add	esp, 16					; 00000010H
; Line 1508
	jmp	SHORT $LN41@winctrl_la
$LN42@winctrl_la:
; Line 1510
	mov	eax, DWORD PTR _base_id$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _base_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _escaped$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_editboxfw
	add	esp, 20					; 00000014H
$LN41@winctrl_la:
; Line 1511
	jmp	$LN40@winctrl_la
$LN43@winctrl_la:
; Line 1512
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN39@winctrl_la
; Line 1514
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _base_id$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _base_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _escaped$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_staticcombo
	add	esp, 20					; 00000014H
; Line 1515
	jmp	SHORT $LN40@winctrl_la
$LN39@winctrl_la:
; Line 1518
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN85@winctrl_la
	mov	DWORD PTR tv368[ebp], OFFSET _staticpassedit
	jmp	SHORT $LN86@winctrl_la
$LN85@winctrl_la:
	mov	DWORD PTR tv368[ebp], OFFSET _staticedit
$LN86@winctrl_la:
	mov	esi, esp
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _base_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _escaped$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	DWORD PTR tv368[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@winctrl_la:
; Line 1521
	mov	edx, DWORD PTR _escaped$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1522
	jmp	$LN46@winctrl_la
$LN37@winctrl_la:
; Line 1524
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	DWORD PTR _num_ids$[ebp], ecx
; Line 1530
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1531
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR _shortcuts$[ebp+eax], dl
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1533
	push	8
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buttons$89592[ebp], eax
; Line 1535
	mov	DWORD PTR _i$89593[ebp], 0
	jmp	SHORT $LN36@winctrl_la
$LN35@winctrl_la:
	mov	eax, DWORD PTR _i$89593[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89593[ebp], eax
$LN36@winctrl_la:
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR _i$89593[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	$LN34@winctrl_la
; Line 1540
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN87@winctrl_la
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _i$89593[ebp]
	movsx	ecx, BYTE PTR [edx+eax]
	mov	DWORD PTR tv402[ebp], ecx
	jmp	SHORT $LN88@winctrl_la
$LN87@winctrl_la:
	mov	DWORD PTR tv402[ebp], 0
$LN88@winctrl_la:
	movzx	edx, BYTE PTR tv402[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$89593[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_shortcut_escape
	add	esp, 8
	mov	ecx, DWORD PTR _i$89593[ebp]
	mov	edx, DWORD PTR _buttons$89592[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 1541
	mov	eax, DWORD PTR _i$89593[ebp]
	mov	ecx, DWORD PTR _base_id$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _i$89593[ebp]
	mov	ecx, DWORD PTR _buttons$89592[ebp]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 1542
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN33@winctrl_la
; Line 1543
	cmp	DWORD PTR _nshortcuts$[ebp], 16		; 00000010H
	jl	SHORT $LN89@winctrl_la
	push	1543					; 00000607H
	push	OFFSET $SG89602
	push	OFFSET $SG89603
	call	__wassert
	add	esp, 12					; 0000000cH
$LN89@winctrl_la:
; Line 1544
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	mov	ecx, DWORD PTR _i$89593[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _shortcuts$[ebp+eax], dl
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
$LN33@winctrl_la:
; Line 1546
	jmp	$LN35@winctrl_la
$LN34@winctrl_la:
; Line 1550
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _buttons$89592[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _base_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_radioline_common
	add	esp, 24					; 00000018H
; Line 1552
	mov	DWORD PTR _i$89593[ebp], 0
	jmp	SHORT $LN32@winctrl_la
$LN31@winctrl_la:
	mov	eax, DWORD PTR _i$89593[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89593[ebp], eax
$LN32@winctrl_la:
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR _i$89593[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN30@winctrl_la
; Line 1553
	mov	eax, DWORD PTR _i$89593[ebp]
	mov	ecx, DWORD PTR _buttons$89592[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1554
	jmp	SHORT $LN31@winctrl_la
$LN30@winctrl_la:
; Line 1555
	mov	eax, DWORD PTR _buttons$89592[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1556
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1558
	jmp	$LN46@winctrl_la
$LN29@winctrl_la:
; Line 1560
	mov	DWORD PTR _num_ids$[ebp], 1
; Line 1562
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1563
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR _shortcuts$[ebp+eax], dl
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1564
	mov	ecx, DWORD PTR _base_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _escaped$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_checkbox
	add	esp, 12					; 0000000cH
; Line 1565
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1566
	jmp	$LN46@winctrl_la
$LN28@winctrl_la:
; Line 1569
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1570
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR _shortcuts$[ebp+eax], dl
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1571
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN27@winctrl_la
; Line 1572
	mov	DWORD PTR _actual_base_id$[ebp], 2
$LN27@winctrl_la:
; Line 1573
	mov	DWORD PTR _num_ids$[ebp], 1
; Line 1574
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _actual_base_id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _escaped$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_button
	add	esp, 16					; 00000010H
; Line 1575
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1576
	jmp	$LN46@winctrl_la
$LN26@winctrl_la:
; Line 1578
	mov	DWORD PTR _num_ids$[ebp], 2
; Line 1580
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1581
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR _shortcuts$[ebp+eax], dl
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1582
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN25@winctrl_la
; Line 1583
	push	24					; 00000018H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _data$[ebp], eax
; Line 1584
	mov	DWORD PTR _num_ids$[ebp], 4
; Line 1586
	mov	edx, DWORD PTR _base_id$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _base_id$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _base_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _escaped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_prefslist
	add	esp, 32					; 00000020H
; Line 1587
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	mov	BYTE PTR _shortcuts$[ebp+edx], 117	; 00000075H
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1588
	mov	ecx, DWORD PTR _nshortcuts$[ebp]
	mov	BYTE PTR _shortcuts$[ebp+ecx], 100	; 00000064H
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	add	edx, 1
	mov	DWORD PTR _nshortcuts$[ebp], edx
	jmp	$LN24@winctrl_la
$LN25@winctrl_la:
; Line 1589
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN23@winctrl_la
; Line 1591
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [ecx+44], 100			; 00000064H
	jne	SHORT $LN22@winctrl_la
; Line 1593
	mov	edx, DWORD PTR _base_id$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _base_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_staticddlbig
	add	esp, 16					; 00000010H
; Line 1594
	jmp	SHORT $LN21@winctrl_la
$LN22@winctrl_la:
; Line 1596
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _base_id$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _base_id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_staticddl
	add	esp, 20					; 00000014H
$LN21@winctrl_la:
; Line 1598
	jmp	SHORT $LN24@winctrl_la
$LN23@winctrl_la:
; Line 1601
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _base_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _escaped$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_listbox
	add	esp, 24					; 00000018H
$LN24@winctrl_la:
; Line 1603
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN19@winctrl_la
; Line 1611
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _width$89620[ebp], edx
; Line 1615
	push	4
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _tabarray$89621[ebp], eax
; Line 1616
	mov	DWORD PTR _percent$89623[ebp], 0
; Line 1617
	mov	DWORD PTR _i$89622[ebp], 0
	jmp	SHORT $LN18@winctrl_la
$LN17@winctrl_la:
	mov	edx, DWORD PTR _i$89622[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89622[ebp], edx
$LN18@winctrl_la:
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	cmp	DWORD PTR _i$89622[ebp], ecx
	jge	SHORT $LN16@winctrl_la
; Line 1618
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _i$89622[ebp]
	mov	edx, DWORD PTR _percent$89623[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _percent$89623[ebp], edx
; Line 1619
	mov	eax, DWORD PTR _width$89620[ebp]
	imul	eax, DWORD PTR _percent$89623[ebp]
	cdq
	mov	ecx, 10000				; 00002710H
	idiv	ecx
	mov	edx, DWORD PTR _i$89622[ebp]
	mov	ecx, DWORD PTR _tabarray$89621[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 1620
	jmp	SHORT $LN17@winctrl_la
$LN16@winctrl_la:
; Line 1622
	mov	esi, esp
	mov	edx, DWORD PTR _tabarray$89621[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	push	ecx
	push	402					; 00000192H
	mov	edx, DWORD PTR _base_id$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1623
	mov	edx, DWORD PTR _tabarray$89621[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN19@winctrl_la:
; Line 1625
	mov	eax, DWORD PTR _escaped$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1626
	jmp	$LN46@winctrl_la
$LN15@winctrl_la:
; Line 1628
	mov	DWORD PTR _num_ids$[ebp], 3
; Line 1630
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	movzx	edx, BYTE PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1631
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	mov	eax, DWORD PTR _ctrl$89524[ebp]
	mov	cl, BYTE PTR [eax+28]
	mov	BYTE PTR _shortcuts$[ebp+edx], cl
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	add	edx, 1
	mov	DWORD PTR _nshortcuts$[ebp], edx
; Line 1633
	mov	eax, DWORD PTR _base_id$[ebp]
	add	eax, 2
	push	eax
	push	OFFSET $SG89631
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _base_id$[ebp]
	push	edx
	mov	eax, DWORD PTR _escaped$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_editbutton
	add	esp, 24					; 00000018H
; Line 1634
	mov	edx, DWORD PTR _nshortcuts$[ebp]
	mov	BYTE PTR _shortcuts$[ebp+edx], 119	; 00000077H
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1635
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1636
	jmp	$LN46@winctrl_la
$LN14@winctrl_la:
; Line 1638
	mov	DWORD PTR _num_ids$[ebp], 3
; Line 1640
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 1641
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	mov	ecx, DWORD PTR _ctrl$89524[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR _shortcuts$[ebp+eax], dl
	mov	eax, DWORD PTR _nshortcuts$[ebp]
	add	eax, 1
	mov	DWORD PTR _nshortcuts$[ebp], eax
; Line 1642
	mov	ecx, DWORD PTR _base_id$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _escaped$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_statictext
	add	esp, 16					; 00000010H
; Line 1643
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, 2
	push	ecx
	push	OFFSET $SG89633
	mov	edx, DWORD PTR _base_id$[ebp]
	add	edx, 1
	push	edx
	push	OFFSET $SG89634
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_staticbtn
	add	esp, 20					; 00000014H
; Line 1644
	push	0
	push	0
	push	0
	push	OFFSET $SG89635
	call	_fontspec_new
	add	esp, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], eax
; Line 1645
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1646
	jmp	SHORT $LN46@winctrl_la
$LN13@winctrl_la:
; Line 1648
	mov	edx, OFFSET $SG89638
	test	edx, edx
	je	SHORT $LN90@winctrl_la
	push	1648					; 00000670H
	push	OFFSET $SG89639
	push	OFFSET $SG89640
	call	__wassert
	add	esp, 12					; 0000000cH
$LN90@winctrl_la:
; Line 1649
	mov	DWORD PTR _num_ids$[ebp], 0
$LN46@winctrl_la:
; Line 1658
	cmp	DWORD PTR _pos$[ebp], 0
	je	$LN12@winctrl_la
; Line 1659
	push	32					; 00000020H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _c$89642[ebp], eax
; Line 1661
	mov	ecx, DWORD PTR _c$89642[ebp]
	mov	edx, DWORD PTR _ctrl$89524[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1662
	mov	eax, DWORD PTR _c$89642[ebp]
	mov	ecx, DWORD PTR _actual_base_id$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1663
	mov	edx, DWORD PTR _c$89642[ebp]
	mov	eax, DWORD PTR _num_ids$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1664
	mov	ecx, DWORD PTR _c$89642[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 1665
	push	16					; 00000010H
	lea	eax, DWORD PTR _shortcuts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$89642[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1666
	mov	edx, DWORD PTR _c$89642[ebp]
	push	edx
	mov	eax, DWORD PTR _wc$[ebp]
	push	eax
	call	_winctrl_add
	add	esp, 8
; Line 1667
	mov	ecx, DWORD PTR _c$89642[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_winctrl_add_shortcuts
	add	esp, 8
; Line 1668
	mov	eax, DWORD PTR _actual_base_id$[ebp]
	cmp	eax, DWORD PTR _base_id$[ebp]
	jne	SHORT $LN11@winctrl_la
; Line 1669
	mov	ecx, DWORD PTR _base_id$[ebp]
	add	ecx, DWORD PTR _num_ids$[ebp]
	mov	DWORD PTR _base_id$[ebp], ecx
$LN11@winctrl_la:
; Line 1670
	jmp	SHORT $LN10@winctrl_la
$LN12@winctrl_la:
; Line 1671
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN10@winctrl_la:
; Line 1674
	cmp	DWORD PTR _colstart$[ebp], 0
	jl	SHORT $LN9@winctrl_la
; Line 1680
	mov	eax, DWORD PTR _colstart$[ebp]
	mov	DWORD PTR _i$89648[ebp], eax
	jmp	SHORT $LN8@winctrl_la
$LN7@winctrl_la:
	mov	ecx, DWORD PTR _i$89648[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89648[ebp], ecx
$LN8@winctrl_la:
	mov	edx, DWORD PTR _colstart$[ebp]
	add	edx, DWORD PTR _colspan$[ebp]
	cmp	DWORD PTR _i$89648[ebp], edx
	jge	SHORT $LN9@winctrl_la
; Line 1681
	mov	eax, DWORD PTR _i$89648[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _pos$[ebp+12]
	mov	DWORD PTR _columns$[ebp+eax+12], ecx
	jmp	SHORT $LN7@winctrl_la
$LN9@winctrl_la:
; Line 1683
	jmp	$LN74@winctrl_la
$LN73@winctrl_la:
; Line 1690
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@winctrl_la
$LN4@winctrl_la:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@winctrl_la:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ncols$[ebp]
	jge	SHORT $LN3@winctrl_la
; Line 1691
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _columns$[ebp+ecx+12]
	jge	SHORT $LN2@winctrl_la
; Line 1692
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR _columns$[ebp+ecx+12]
	mov	DWORD PTR [edx+12], eax
$LN2@winctrl_la:
; Line 1693
	jmp	SHORT $LN4@winctrl_la
$LN3@winctrl_la:
	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR _base_id$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1695
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN78@winctrl_la
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN78@winctrl_la
; Line 1696
	mov	ecx, DWORD PTR _cp$[ebp]
	push	ecx
	call	_endbox
	add	esp, 4
$LN78@winctrl_la:
; Line 1697
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN98@winctrl_la
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1468				; 000005bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN98@winctrl_la:
	DD	6
	DD	$LN97@winctrl_la
$LN97@winctrl_la:
	DD	-584					; fffffdb8H
	DD	576					; 00000240H
	DD	$LN91@winctrl_la
	DD	-1180					; fffffb64H
	DD	576					; 00000240H
	DD	$LN92@winctrl_la
	DD	-1252					; fffffb1cH
	DD	64					; 00000040H
	DD	$LN93@winctrl_la
	DD	-1300					; fffffaecH
	DD	36					; 00000024H
	DD	$LN94@winctrl_la
	DD	-1324					; fffffad4H
	DD	16					; 00000010H
	DD	$LN95@winctrl_la
	DD	-1420					; fffffa74H
	DD	4
	DD	$LN96@winctrl_la
$LN96@winctrl_la:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN95@winctrl_la:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN94@winctrl_la:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN93@winctrl_la:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN92@winctrl_la:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN91@winctrl_la:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
	npad	3
$LN99@winctrl_la:
	DD	$LN45@winctrl_la
	DD	$LN44@winctrl_la
	DD	$LN37@winctrl_la
	DD	$LN29@winctrl_la
	DD	$LN28@winctrl_la
	DD	$LN26@winctrl_la
	DD	$LN13@winctrl_la
	DD	$LN15@winctrl_la
	DD	$LN14@winctrl_la
_winctrl_layout ENDP
; Function compile flags: /Odtp /RTCsu
_q$ = -12						; size = 4
_p$ = -8						; size = 4
_ret$ = -4						; size = 4
_text$ = 8						; size = 4
_shortcut$ = 12						; size = 1
_shortcut_escape PROC
; Line 1167
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1172
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN6@shortcut_e
; Line 1173
	xor	eax, eax
	jmp	$LN7@shortcut_e
$LN6@shortcut_e:
; Line 1175
	push	1
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR [eax+eax+1]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1176
	movzx	edx, BYTE PTR _shortcut$[ebp]
	push	edx
	call	_tolower
	add	esp, 4
	mov	BYTE PTR _shortcut$[ebp], al
; Line 1178
	mov	eax, DWORD PTR _text$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1179
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _q$[ebp], ecx
$LN5@shortcut_e:
; Line 1180
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN4@shortcut_e
; Line 1182
	movsx	ecx, BYTE PTR _shortcut$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@shortcut_e
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	_tolower
	add	esp, 4
	movsx	ecx, BYTE PTR _shortcut$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN3@shortcut_e
; Line 1183
	mov	edx, DWORD PTR _q$[ebp]
	mov	BYTE PTR [edx], 38			; 00000026H
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 1
	mov	DWORD PTR _q$[ebp], eax
; Line 1184
	mov	BYTE PTR _shortcut$[ebp], 0
	jmp	SHORT $LN2@shortcut_e
$LN3@shortcut_e:
; Line 1185
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 38					; 00000026H
	jne	SHORT $LN2@shortcut_e
; Line 1186
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$[ebp], ecx
$LN2@shortcut_e:
; Line 1188
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 1189
	jmp	SHORT $LN5@shortcut_e
$LN4@shortcut_e:
; Line 1190
	mov	ecx, DWORD PTR _q$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 1191
	mov	eax, DWORD PTR _ret$[ebp]
$LN7@shortcut_e:
; Line 1192
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_shortcut_escape ENDP
_TEXT	ENDS
PUBLIC	_dlg_last_focused
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_last_focused PROC
; Line 1713
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1714
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 1715
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	cmp	edx, DWORD PTR _ctrl$[ebp]
	jne	SHORT $LN3@dlg_last_f
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN4@dlg_last_f
$LN3@dlg_last_f:
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR tv68[ebp], eax
$LN4@dlg_last_f:
	mov	eax, DWORD PTR tv68[ebp]
; Line 1716
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_last_focused ENDP
_TEXT	ENDS
PUBLIC	_dlg_fontsel_set
PUBLIC	__$ArrayPad$
PUBLIC	_winctrl_handle_command
EXTRN	__imp__ChooseColorA@4:PROC
EXTRN	_fontspec_free:PROC
EXTRN	__imp__ChooseFontA@4:PROC
EXTRN	__imp__MulDiv@12:PROC
EXTRN	_request_file:PROC
EXTRN	__imp__GetDlgItemTextA@16:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__IsDlgButtonChecked@8:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__DrawEdge@16:PROC
EXTRN	__imp__GetTextExtentPoint32A@16:PROC
EXTRN	__imp__RegisterWindowMessageA@4:PROC
_BSS	SEGMENT
	ALIGN	4

?cc@?BF@??winctrl_handle_command@@9@9 DB 024H DUP (?)	; `winctrl_handle_command'::`21'::cc
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv160 = -600						; size = 4
_fs$89897 = -596					; size = 4
_hdc$89896 = -592					; size = 4
_lf$89895 = -584					; size = 60
_cf$89894 = -516					; size = 60
_filename$89871 = -448					; size = 260
_of$89870 = -180					; size = 88
_pret$89833 = -88					; size = 4
_text$89748 = -84					; size = 4
_len$89747 = -80					; size = 4
_index$89746 = -76					; size = 4
_s$89709 = -68						; size = 8
_r$89708 = -52						; size = 16
_hdc$89707 = -32					; size = 4
_di$89705 = -28						; size = 4
_ret$ = -24						; size = 4
_id$ = -20						; size = 4
_i$ = -16						; size = 4
_ctrl$ = -12						; size = 4
_c$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dp$ = 8						; size = 4
_msg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_winctrl_handle_command PROC
; Line 1724
	push	ebp
	mov	ebp, esp
	sub	esp, 600				; 00000258H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1734
	cmp	DWORD PTR ?draglistmsg@?1??winctrl_handle_command@@9@9, 0
	jne	SHORT $LN72@winctrl_ha
; Line 1735
	mov	esi, esp
	push	OFFSET $SG89694
	call	DWORD PTR __imp__RegisterWindowMessageA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?draglistmsg@?1??winctrl_handle_command@@9@9, eax
$LN72@winctrl_ha:
; Line 1737
	mov	eax, DWORD PTR _msg$[ebp]
	cmp	eax, DWORD PTR ?draglistmsg@?1??winctrl_handle_command@@9@9
	je	SHORT $LN71@winctrl_ha
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	je	SHORT $LN71@winctrl_ha
	cmp	DWORD PTR _msg$[ebp], 43		; 0000002bH
	je	SHORT $LN71@winctrl_ha
; Line 1738
	xor	eax, eax
	jmp	$LN73@winctrl_ha
$LN71@winctrl_ha:
; Line 1743
	mov	DWORD PTR _c$[ebp], 0
; Line 1744
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN70@winctrl_ha
$LN69@winctrl_ha:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN70@winctrl_ha:
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	SHORT $LN68@winctrl_ha
; Line 1745
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	call	_winctrl_findbyid
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 1746
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN67@winctrl_ha
; Line 1747
	jmp	SHORT $LN68@winctrl_ha
$LN67@winctrl_ha:
; Line 1748
	jmp	SHORT $LN69@winctrl_ha
$LN68@winctrl_ha:
; Line 1749
	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN66@winctrl_ha
; Line 1750
	xor	eax, eax
	jmp	$LN73@winctrl_ha
$LN66@winctrl_ha:
; Line 1752
	cmp	DWORD PTR _msg$[ebp], 43		; 0000002bH
	jne	$LN65@winctrl_ha
; Line 1756
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _di$89705[ebp], eax
; Line 1757
	mov	ecx, DWORD PTR _di$89705[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _hdc$89707[ebp], edx
; Line 1758
	mov	eax, DWORD PTR _di$89705[ebp]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _r$89708[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _r$89708[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _r$89708[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _r$89708[ebp+12], edx
; Line 1761
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hdc$89707[ebp]
	push	eax
	call	DWORD PTR __imp__SetMapMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1764
	mov	esi, esp
	lea	ecx, DWORD PTR _s$89709[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _hdc$89707[ebp]
	push	eax
	call	DWORD PTR __imp__GetTextExtentPoint32A@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1765
	mov	esi, esp
	push	8207					; 0000200fH
	push	6
	lea	ecx, DWORD PTR _r$89708[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$89707[ebp]
	push	edx
	call	DWORD PTR __imp__DrawEdge@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1769
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	eax, DWORD PTR _r$89708[ebp+12]
	sub	eax, DWORD PTR _r$89708[ebp+4]
	sub	eax, DWORD PTR _s$89709[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _r$89708[ebp+4]
	push	eax
	mov	eax, DWORD PTR _r$89708[ebp+8]
	sub	eax, DWORD PTR _r$89708[ebp]
	sub	eax, DWORD PTR _s$89709[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _r$89708[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$89707[ebp]
	push	ecx
	call	DWORD PTR __imp__TextOutA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1771
	mov	eax, 1
	jmp	$LN73@winctrl_ha
$LN65@winctrl_ha:
; Line 1774
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ctrl$[ebp], eax
; Line 1775
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	eax, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _id$[ebp], edx
; Line 1777
	cmp	DWORD PTR _ctrl$[ebp], 0
	je	SHORT $LN63@winctrl_ha
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN64@winctrl_ha
$LN63@winctrl_ha:
; Line 1778
	xor	eax, eax
	jmp	$LN73@winctrl_ha
$LN64@winctrl_ha:
; Line 1787
	mov	DWORD PTR _ret$[ebp], 0
; Line 1788
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+188], 0
; Line 1793
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv160[ebp], ecx
	mov	edx, DWORD PTR tv160[ebp]
	sub	edx, 1
	mov	DWORD PTR tv160[ebp], edx
	cmp	DWORD PTR tv160[ebp], 7
	ja	$LN61@winctrl_ha
	mov	eax, DWORD PTR tv160[ebp]
	jmp	DWORD PTR $LN83@winctrl_ha[eax*4]
$LN60@winctrl_ha:
; Line 1796
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN59@winctrl_ha
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN59@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 256				; 00000100H
	je	SHORT $LN58@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 512				; 00000200H
	jne	SHORT $LN59@winctrl_ha
$LN58@winctrl_ha:
; Line 1797
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	xor	edx, edx
	cmp	ecx, 256				; 00000100H
	sete	dl
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN59@winctrl_ha:
; Line 1799
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN57@winctrl_ha
	mov	edx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN57@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 3
	je	SHORT $LN56@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 4
	jne	SHORT $LN57@winctrl_ha
$LN56@winctrl_ha:
; Line 1800
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	xor	eax, eax
	cmp	edx, 3
	sete	al
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN57@winctrl_ha:
; Line 1803
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN55@winctrl_ha
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN55@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 768				; 00000300H
	jne	SHORT $LN55@winctrl_ha
; Line 1804
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN55@winctrl_ha:
; Line 1806
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	$LN54@winctrl_ha
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN54@winctrl_ha
; Line 1807
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1
	jne	$LN53@winctrl_ha
; Line 1812
	mov	esi, esp
	push	0
	push	0
	push	327					; 00000147H
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$89746[ebp], eax
; Line 1814
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _index$89746[ebp]
	push	ecx
	push	329					; 00000149H
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$89747[ebp], eax
; Line 1815
	push	1
	mov	eax, DWORD PTR _len$89747[ebp]
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _text$89748[ebp], eax
; Line 1817
	mov	esi, esp
	mov	ecx, DWORD PTR _text$89748[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$89746[ebp]
	push	edx
	push	328					; 00000148H
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1818
	mov	esi, esp
	mov	ecx, DWORD PTR _text$89748[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1819
	mov	eax, DWORD PTR _text$89748[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1820
	mov	esi, esp
	push	2
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN54@winctrl_ha
$LN53@winctrl_ha:
; Line 1821
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 5
	jne	SHORT $LN51@winctrl_ha
; Line 1822
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN54@winctrl_ha
$LN51@winctrl_ha:
; Line 1823
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 4
	jne	SHORT $LN54@winctrl_ha
; Line 1824
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN54@winctrl_ha:
; Line 1828
	jmp	$LN61@winctrl_ha
$LN48@winctrl_ha:
; Line 1831
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN47@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 6
	je	SHORT $LN46@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 7
	jne	SHORT $LN47@winctrl_ha
$LN46@winctrl_ha:
; Line 1832
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	xor	edx, edx
	cmp	ecx, 6
	sete	dl
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN47@winctrl_ha:
; Line 1843
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN45@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	test	eax, eax
	je	SHORT $LN44@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 5
	jne	SHORT $LN45@winctrl_ha
$LN44@winctrl_ha:
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN45@winctrl_ha
; Line 1844
	mov	esi, esp
	push	2
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN45@winctrl_ha:
; Line 1846
	jmp	$LN61@winctrl_ha
$LN43@winctrl_ha:
; Line 1849
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN42@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 6
	je	SHORT $LN41@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 7
	jne	SHORT $LN42@winctrl_ha
$LN41@winctrl_ha:
; Line 1850
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	xor	ecx, ecx
	cmp	eax, 6
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN42@winctrl_ha:
; Line 1853
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN40@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	test	edx, edx
	je	SHORT $LN39@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 5
	jne	SHORT $LN40@winctrl_ha
$LN39@winctrl_ha:
; Line 1854
	mov	esi, esp
	push	2
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@winctrl_ha:
; Line 1856
	jmp	$LN61@winctrl_ha
$LN38@winctrl_ha:
; Line 1859
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN37@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 6
	je	SHORT $LN36@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 7
	jne	SHORT $LN37@winctrl_ha
$LN36@winctrl_ha:
; Line 1860
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	xor	edx, edx
	cmp	ecx, 6
	sete	dl
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN37@winctrl_ha:
; Line 1863
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN35@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	test	eax, eax
	je	SHORT $LN34@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 5
	jne	SHORT $LN35@winctrl_ha
$LN34@winctrl_ha:
; Line 1864
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@winctrl_ha:
; Line 1866
	jmp	$LN61@winctrl_ha
$LN33@winctrl_ha:
; Line 1869
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN32@winctrl_ha
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN32@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 4
	je	SHORT $LN31@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 5
	jne	SHORT $LN32@winctrl_ha
$LN31@winctrl_ha:
; Line 1870
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	xor	ecx, ecx
	cmp	eax, 4
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN32@winctrl_ha:
; Line 1872
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN30@winctrl_ha
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN30@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 3
	je	SHORT $LN29@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 4
	jne	SHORT $LN30@winctrl_ha
$LN29@winctrl_ha:
; Line 1873
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN30@winctrl_ha:
; Line 1875
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN28@winctrl_ha
	cmp	DWORD PTR _id$[ebp], 2
	jl	SHORT $LN28@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 6
	je	SHORT $LN27@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 7
	jne	SHORT $LN28@winctrl_ha
$LN27@winctrl_ha:
; Line 1876
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	xor	edx, edx
	cmp	ecx, 6
	sete	dl
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN28@winctrl_ha:
; Line 1877
	mov	edx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN26@winctrl_ha
; Line 1880
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	xor	ecx, ecx
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	setne	cl
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_handle_prefslist
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _pret$89833[ebp], eax
; Line 1881
	mov	ecx, DWORD PTR _pret$89833[ebp]
	and	ecx, 2
	je	SHORT $LN25@winctrl_ha
; Line 1882
	mov	esi, esp
	push	2
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@winctrl_ha:
; Line 1883
	mov	edx, DWORD PTR _pret$89833[ebp]
	and	edx, 1
	mov	DWORD PTR _ret$[ebp], edx
; Line 1884
	jmp	$LN24@winctrl_ha
$LN26@winctrl_ha:
; Line 1885
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN23@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 2
	jne	SHORT $LN23@winctrl_ha
; Line 1886
	mov	esi, esp
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1887
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN24@winctrl_ha
$LN23@winctrl_ha:
; Line 1888
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN24@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1
	jne	SHORT $LN24@winctrl_ha
; Line 1889
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@winctrl_ha:
; Line 1892
	jmp	$LN61@winctrl_ha
$LN20@winctrl_ha:
; Line 1895
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN19@winctrl_ha
	cmp	DWORD PTR _id$[ebp], 1
	jne	SHORT $LN19@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 256				; 00000100H
	je	SHORT $LN18@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 512				; 00000200H
	jne	SHORT $LN19@winctrl_ha
$LN18@winctrl_ha:
; Line 1896
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	xor	eax, eax
	cmp	edx, 256				; 00000100H
	sete	al
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN19@winctrl_ha:
; Line 1898
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN17@winctrl_ha
	cmp	DWORD PTR _id$[ebp], 2
	jne	SHORT $LN17@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 6
	je	SHORT $LN16@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 7
	jne	SHORT $LN17@winctrl_ha
$LN16@winctrl_ha:
; Line 1899
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	xor	eax, eax
	cmp	edx, 6
	sete	al
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN17@winctrl_ha:
; Line 1900
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN15@winctrl_ha
	cmp	DWORD PTR _id$[ebp], 1
	jne	SHORT $LN15@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN15@winctrl_ha
; Line 1901
	mov	esi, esp
	push	2
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@winctrl_ha:
; Line 1905
	cmp	DWORD PTR _id$[ebp], 2
	jne	$LN14@winctrl_ha
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	$LN14@winctrl_ha
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	test	eax, eax
	je	SHORT $LN13@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 5
	jne	$LN14@winctrl_ha
$LN13@winctrl_ha:
; Line 1909
	push	88					; 00000058H
	push	0
	lea	eax, DWORD PTR _of$89870[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1910
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _of$89870[ebp+4], edx
; Line 1911
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN12@winctrl_ha
; Line 1912
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _of$89870[ebp+12], edx
; Line 1913
	jmp	SHORT $LN11@winctrl_ha
$LN12@winctrl_ha:
; Line 1914
	mov	DWORD PTR _of$89870[ebp+12], OFFSET $SG89874
$LN11@winctrl_ha:
; Line 1915
	mov	DWORD PTR _of$89870[ebp+16], 0
; Line 1916
	mov	DWORD PTR _of$89870[ebp+24], 1
; Line 1917
	lea	eax, DWORD PTR _filename$89871[ebp]
	mov	DWORD PTR _of$89870[ebp+28], eax
; Line 1918
	mov	esi, esp
	push	260					; 00000104H
	lea	ecx, DWORD PTR _filename$89871[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GetDlgItemTextA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1919
	mov	BYTE PTR _filename$89871[ebp+259], 0
; Line 1920
	mov	DWORD PTR _of$89870[ebp+32], 260	; 00000104H
; Line 1921
	mov	DWORD PTR _of$89870[ebp+36], 0
; Line 1922
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _of$89870[ebp+48], ecx
; Line 1923
	mov	DWORD PTR _of$89870[ebp+52], 0
; Line 1924
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	push	0
	lea	ecx, DWORD PTR _of$89870[ebp]
	push	ecx
	push	0
	call	_request_file
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@winctrl_ha
; Line 1925
	mov	esi, esp
	lea	edx, DWORD PTR _filename$89871[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1926
	mov	esi, esp
	push	2
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@winctrl_ha:
; Line 1929
	jmp	$LN61@winctrl_ha
$LN9@winctrl_ha:
; Line 1932
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	SHORT $LN8@winctrl_ha
	cmp	DWORD PTR _id$[ebp], 2
	jne	SHORT $LN8@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 6
	je	SHORT $LN7@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 7
	jne	SHORT $LN8@winctrl_ha
$LN7@winctrl_ha:
; Line 1933
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	xor	ecx, ecx
	cmp	eax, 6
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	call	_winctrl_set_focus
	add	esp, 12					; 0000000cH
$LN8@winctrl_ha:
; Line 1937
	cmp	DWORD PTR _id$[ebp], 2
	jne	$LN61@winctrl_ha
	cmp	DWORD PTR _msg$[ebp], 273		; 00000111H
	jne	$LN61@winctrl_ha
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	test	edx, edx
	je	SHORT $LN5@winctrl_ha
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 5
	jne	$LN61@winctrl_ha
$LN5@winctrl_ha:
; Line 1941
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _fs$89897[ebp], eax
; Line 1943
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$89896[ebp], eax
; Line 1945
	mov	esi, esp
	push	72					; 00000048H
	mov	edi, esp
	push	90					; 0000005aH
	mov	ecx, DWORD PTR _hdc$89896[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _fs$89897[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__MulDiv@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	mov	DWORD PTR _lf$89895[ebp], eax
; Line 1946
	mov	esi, esp
	mov	ecx, DWORD PTR _hdc$89896[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1947
	mov	DWORD PTR _lf$89895[ebp+12], 0
	mov	edx, DWORD PTR _lf$89895[ebp+12]
	mov	DWORD PTR _lf$89895[ebp+8], edx
	mov	eax, DWORD PTR _lf$89895[ebp+8]
	mov	DWORD PTR _lf$89895[ebp+4], eax
; Line 1948
	mov	BYTE PTR _lf$89895[ebp+22], 0
	mov	cl, BYTE PTR _lf$89895[ebp+22]
	mov	BYTE PTR _lf$89895[ebp+21], cl
	mov	dl, BYTE PTR _lf$89895[ebp+21]
	mov	BYTE PTR _lf$89895[ebp+20], dl
; Line 1949
	mov	eax, DWORD PTR _fs$89897[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 700				; 000002bcH
	mov	DWORD PTR _lf$89895[ebp+16], ecx
; Line 1950
	mov	edx, DWORD PTR _fs$89897[ebp]
	mov	al, BYTE PTR [edx+12]
	mov	BYTE PTR _lf$89895[ebp+23], al
; Line 1951
	mov	BYTE PTR _lf$89895[ebp+24], 0
; Line 1952
	mov	BYTE PTR _lf$89895[ebp+25], 0
; Line 1953
	mov	BYTE PTR _lf$89895[ebp+26], 0
; Line 1954
	mov	BYTE PTR _lf$89895[ebp+27], 1
; Line 1956
	push	31					; 0000001fH
	mov	ecx, DWORD PTR _fs$89897[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _lf$89895[ebp+28]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 1957
	mov	BYTE PTR _lf$89895[ebp+59], 0
; Line 1959
	mov	DWORD PTR _cf$89894[ebp], 60		; 0000003cH
; Line 1960
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cf$89894[ebp+4], edx
; Line 1961
	lea	eax, DWORD PTR _lf$89895[ebp]
	mov	DWORD PTR _cf$89894[ebp+12], eax
; Line 1963
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	neg	edx
	sbb	edx, edx
	and	edx, 16384				; 00004000H
	or	edx, 65536				; 00010000H
	or	edx, 64					; 00000040H
	or	edx, 1
	mov	DWORD PTR _cf$89894[ebp+20], edx
; Line 1965
	mov	esi, esp
	lea	eax, DWORD PTR _cf$89894[ebp]
	push	eax
	call	DWORD PTR __imp__ChooseFontA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN61@winctrl_ha
; Line 1967
	movzx	ecx, BYTE PTR _lf$89895[ebp+23]
	push	ecx
	mov	eax, DWORD PTR _cf$89894[ebp+16]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	push	eax
	xor	edx, edx
	cmp	DWORD PTR _lf$89895[ebp+16], 700	; 000002bcH
	sete	dl
	push	edx
	lea	eax, DWORD PTR _lf$89895[ebp+28]
	push	eax
	call	_fontspec_new
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fs$89897[ebp], eax
; Line 1968
	mov	ecx, DWORD PTR _fs$89897[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	call	_dlg_fontsel_set
	add	esp, 12					; 0000000cH
; Line 1969
	mov	ecx, DWORD PTR _fs$89897[ebp]
	push	ecx
	call	_fontspec_free
	add	esp, 4
; Line 1971
	mov	esi, esp
	push	2
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN61@winctrl_ha:
; Line 1981
	mov	edx, DWORD PTR _dp$[ebp]
	cmp	DWORD PTR [edx+188], 0
	je	$LN3@winctrl_ha
; Line 1984
	mov	DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9, 36 ; 00000024H
; Line 1985
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+4, ecx
; Line 1986
	mov	edx, DWORD PTR _hinst
	mov	DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+8, edx
; Line 1987
	mov	DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+16, OFFSET ?custom@?BF@??winctrl_handle_command@@9@9
; Line 1990
	mov	eax, DWORD PTR _dp$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	mov	edx, DWORD PTR _dp$[ebp]
	movzx	eax, BYTE PTR [edx+193]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _dp$[ebp]
	movzx	eax, BYTE PTR [edx+194]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+12, ecx
; Line 1991
	mov	DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+20, 3
; Line 1992
	mov	esi, esp
	push	OFFSET ?cc@?BF@??winctrl_handle_command@@9@9
	call	DWORD PTR __imp__ChooseColorA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@winctrl_ha
; Line 1994
	mov	ecx, DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+12
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [edx+192], cl
; Line 1996
	mov	eax, DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+12
	shr	eax, 8
	movzx	ecx, al
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [edx+193], cl
; Line 1998
	mov	eax, DWORD PTR ?cc@?BF@??winctrl_handle_command@@9@9+12
	shr	eax, 16					; 00000010H
	movzx	ecx, al
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [edx+194], cl
; Line 1999
	mov	eax, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [eax+195], 1
; Line 2000
	jmp	SHORT $LN1@winctrl_ha
$LN2@winctrl_ha:
; Line 2001
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	BYTE PTR [ecx+195], 0
$LN1@winctrl_ha:
; Line 2002
	mov	esi, esp
	push	4
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@winctrl_ha:
; Line 2005
	mov	eax, DWORD PTR _ret$[ebp]
$LN73@winctrl_ha:
; Line 2006
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN82@winctrl_ha
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 600				; 00000258H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN82@winctrl_ha:
	DD	6
	DD	$LN81@winctrl_ha
$LN81@winctrl_ha:
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN75@winctrl_ha
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN76@winctrl_ha
	DD	-180					; ffffff4cH
	DD	88					; 00000058H
	DD	$LN77@winctrl_ha
	DD	-448					; fffffe40H
	DD	260					; 00000104H
	DD	$LN78@winctrl_ha
	DD	-516					; fffffdfcH
	DD	60					; 0000003cH
	DD	$LN79@winctrl_ha
	DD	-584					; fffffdb8H
	DD	60					; 0000003cH
	DD	$LN80@winctrl_ha
$LN80@winctrl_ha:
	DB	108					; 0000006cH
	DB	102					; 00000066H
	DB	0
$LN79@winctrl_ha:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
$LN78@winctrl_ha:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN77@winctrl_ha:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	0
$LN76@winctrl_ha:
	DB	115					; 00000073H
	DB	0
$LN75@winctrl_ha:
	DB	114					; 00000072H
	DB	0
	npad	2
$LN83@winctrl_ha:
	DD	$LN60@winctrl_ha
	DD	$LN48@winctrl_ha
	DD	$LN43@winctrl_ha
	DD	$LN38@winctrl_ha
	DD	$LN33@winctrl_ha
	DD	$LN61@winctrl_ha
	DD	$LN20@winctrl_ha
	DD	$LN9@winctrl_ha
_winctrl_handle_command ENDP
; Function compile flags: /Odtp /RTCsu
_ctrl$ = 8						; size = 4
_dp$ = 12						; size = 4
_has_focus$ = 16					; size = 4
_winctrl_set_focus PROC
; Line 1701
	push	ebp
	mov	ebp, esp
; Line 1702
	cmp	DWORD PTR _has_focus$[ebp], 0
	je	SHORT $LN4@winctrl_se
; Line 1703
	mov	eax, DWORD PTR _dp$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN3@winctrl_se
; Line 1704
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+56], eax
$LN3@winctrl_se:
; Line 1705
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR [ecx+52], edx
	jmp	SHORT $LN5@winctrl_se
$LN4@winctrl_se:
; Line 1706
	cmp	DWORD PTR _has_focus$[ebp], 0
	jne	SHORT $LN5@winctrl_se
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	cmp	ecx, DWORD PTR _ctrl$[ebp]
	jne	SHORT $LN5@winctrl_se
; Line 1707
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+56], ecx
; Line 1708
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+52], 0
$LN5@winctrl_se:
; Line 1710
	pop	ebp
	ret	0
_winctrl_set_focus ENDP
_TEXT	ENDS
PUBLIC	_winctrl_context_help
EXTRN	_launch_help:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_i$ = -4						; size = 4
_dp$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_id$ = 16						; size = 4
_winctrl_context_help PROC
; Line 2013
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2020
	mov	DWORD PTR _c$[ebp], 0
; Line 2021
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@winctrl_co
$LN6@winctrl_co:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@winctrl_co:
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN5@winctrl_co
; Line 2022
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	_winctrl_findbyid
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2023
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN4@winctrl_co
; Line 2024
	jmp	SHORT $LN5@winctrl_co
$LN4@winctrl_co:
; Line 2025
	jmp	SHORT $LN6@winctrl_co
$LN5@winctrl_co:
; Line 2026
	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN3@winctrl_co
; Line 2027
	xor	eax, eax
	jmp	SHORT $LN8@winctrl_co
$LN3@winctrl_co:
; Line 2033
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@winctrl_co
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN2@winctrl_co
$LN1@winctrl_co:
; Line 2034
	xor	eax, eax
	jmp	SHORT $LN8@winctrl_co
$LN2@winctrl_co:
; Line 2036
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	_launch_help
	add	esp, 8
; Line 2037
	mov	eax, 1
$LN8@winctrl_co:
; Line 2038
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_winctrl_context_help ENDP
_TEXT	ENDS
PUBLIC	_dlg_radiobutton_set
EXTRN	__imp__CheckRadioButton@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_whichbutton$ = 16					; size = 4
_dlg_radiobutton_set PROC
; Line 2058
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2059
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2060
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2061
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_radiob
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 2
	je	SHORT $LN4@dlg_radiob
$LN3@dlg_radiob:
	push	2061					; 0000080dH
	push	OFFSET $SG89958
	push	OFFSET $SG89959
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_radiob:
; Line 2065
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _whichbutton$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR [edx+36]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CheckRadioButton@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2066
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_radiobutton_set ENDP
; Function compile flags: /Odtp /RTCsu
_c$89944 = -8						; size = 4
_i$ = -4						; size = 4
_dp$ = 8						; size = 4
_ctrl$ = 12						; size = 4
_dlg_findbyctrl PROC
; Line 2046
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2049
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@dlg_findby
$LN3@dlg_findby:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@dlg_findby:
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN2@dlg_findby
; Line 2050
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	_winctrl_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$89944[ebp], eax
; Line 2051
	cmp	DWORD PTR _c$89944[ebp], 0
	je	SHORT $LN1@dlg_findby
; Line 2052
	mov	eax, DWORD PTR _c$89944[ebp]
	jmp	SHORT $LN5@dlg_findby
$LN1@dlg_findby:
; Line 2053
	jmp	SHORT $LN3@dlg_findby
$LN2@dlg_findby:
; Line 2054
	xor	eax, eax
$LN5@dlg_findby:
; Line 2055
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_findbyctrl ENDP
_TEXT	ENDS
PUBLIC	_dlg_radiobutton_get
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_radiobutton_get PROC
; Line 2069
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2070
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2071
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2073
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN7@dlg_radiob@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 2
	je	SHORT $LN8@dlg_radiob@2
$LN7@dlg_radiob@2:
	push	2073					; 00000819H
	push	OFFSET $SG89970
	push	OFFSET $SG89971
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@dlg_radiob@2:
; Line 2074
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@dlg_radiob@2
$LN3@dlg_radiob@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@dlg_radiob@2:
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	SHORT $LN2@dlg_radiob@2
; Line 2075
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@dlg_radiob@2
; Line 2076
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@dlg_radiob@2
$LN1@dlg_radiob@2:
; Line 2077
	jmp	SHORT $LN3@dlg_radiob@2
$LN2@dlg_radiob@2:
	mov	ecx, OFFSET $SG89977
	test	ecx, ecx
	je	SHORT $LN9@dlg_radiob@2
	push	2077					; 0000081dH
	push	OFFSET $SG89978
	push	OFFSET $SG89979
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@dlg_radiob@2:
; Line 2078
	xor	eax, eax
$LN5@dlg_radiob@2:
; Line 2079
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_radiobutton_get ENDP
_TEXT	ENDS
PUBLIC	_dlg_checkbox_set
EXTRN	__imp__CheckDlgButton@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_checked$ = 16						; size = 4
_dlg_checkbox_set PROC
; Line 2082
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2083
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2084
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2085
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_checkb
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN4@dlg_checkb
$LN3@dlg_checkb:
	push	2085					; 00000825H
	push	OFFSET $SG89991
	push	OFFSET $SG89992
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_checkb:
; Line 2086
	xor	eax, eax
	cmp	DWORD PTR _checked$[ebp], 0
	setne	al
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__CheckDlgButton@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2087
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_checkbox_set ENDP
_TEXT	ENDS
PUBLIC	_dlg_checkbox_get
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_checkbox_get PROC
; Line 2090
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2091
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2092
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2093
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_checkb@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN4@dlg_checkb@2
$LN3@dlg_checkb@2:
	push	2093					; 0000082dH
	push	OFFSET $SG90002
	push	OFFSET $SG90003
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_checkb@2:
; Line 2094
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 2095
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_checkbox_get ENDP
_TEXT	ENDS
PUBLIC	_dlg_editbox_set
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_text$ = 16						; size = 4
_dlg_editbox_set PROC
; Line 2098
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2099
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2100
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2101
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_editbo
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN4@dlg_editbo
$LN3@dlg_editbo:
	push	2101					; 00000835H
	push	OFFSET $SG90015
	push	OFFSET $SG90016
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_editbo:
; Line 2102
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2103
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_editbox_set ENDP
_TEXT	ENDS
PUBLIC	_dlg_editbox_get
EXTRN	_GetDlgItemText_alloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_editbox_get PROC
; Line 2106
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2107
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2108
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2109
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_editbo@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN4@dlg_editbo@2
$LN3@dlg_editbo@2:
	push	2109					; 0000083dH
	push	OFFSET $SG90026
	push	OFFSET $SG90027
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_editbo@2:
; Line 2110
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_GetDlgItemText_alloc
	add	esp, 8
; Line 2111
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_editbox_get ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_clear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -16						; size = 4
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_listbox_clear PROC
; Line 2115
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2116
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2117
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2122
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	je	SHORT $LN4@dlg_listbo
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@dlg_listbo
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN4@dlg_listbo
$LN3@dlg_listbo:
	push	2122					; 0000084aH
	push	OFFSET $SG90038
	push	OFFSET $SG90039
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo:
; Line 2124
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 5
	jne	SHORT $LN6@dlg_listbo
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN6@dlg_listbo
	mov	DWORD PTR tv82[ebp], 388		; 00000184H
	jmp	SHORT $LN7@dlg_listbo
$LN6@dlg_listbo:
	mov	DWORD PTR tv82[ebp], 331		; 0000014bH
$LN7@dlg_listbo:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _msg$[ebp], edx
; Line 2125
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2126
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_clear ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_del
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -16						; size = 4
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_index$ = 16						; size = 4
_dlg_listbox_del PROC
; Line 2129
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2130
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2131
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2136
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	je	SHORT $LN4@dlg_listbo@2
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@dlg_listbo@2
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN4@dlg_listbo@2
$LN3@dlg_listbo@2:
	push	2136					; 00000858H
	push	OFFSET $SG90052
	push	OFFSET $SG90053
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo@2:
; Line 2138
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 5
	jne	SHORT $LN6@dlg_listbo@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN6@dlg_listbo@2
	mov	DWORD PTR tv82[ebp], 386		; 00000182H
	jmp	SHORT $LN7@dlg_listbo@2
$LN6@dlg_listbo@2:
	mov	DWORD PTR tv82[ebp], 324		; 00000144H
$LN7@dlg_listbo@2:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _msg$[ebp], edx
; Line 2139
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2140
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_del ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_add
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -16						; size = 4
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_text$ = 16						; size = 4
_dlg_listbox_add PROC
; Line 2143
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2144
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2145
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2150
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo@3
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	je	SHORT $LN4@dlg_listbo@3
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@dlg_listbo@3
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN4@dlg_listbo@3
$LN3@dlg_listbo@3:
	push	2150					; 00000866H
	push	OFFSET $SG90066
	push	OFFSET $SG90067
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo@3:
; Line 2152
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 5
	jne	SHORT $LN6@dlg_listbo@3
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN6@dlg_listbo@3
	mov	DWORD PTR tv82[ebp], 384		; 00000180H
	jmp	SHORT $LN7@dlg_listbo@3
$LN6@dlg_listbo@3:
	mov	DWORD PTR tv82[ebp], 323		; 00000143H
$LN7@dlg_listbo@3:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _msg$[ebp], edx
; Line 2153
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2154
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_add ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_addwithid
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -28						; size = 4
tv82 = -24						; size = 4
_index$ = -20						; size = 4
_msg2$ = -16						; size = 4
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_text$ = 16						; size = 4
_id$ = 20						; size = 4
_dlg_listbox_addwithid PROC
; Line 2165
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2166
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2167
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2172
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo@4
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	je	SHORT $LN4@dlg_listbo@4
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@dlg_listbo@4
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN4@dlg_listbo@4
$LN3@dlg_listbo@4:
	push	2172					; 0000087cH
	push	OFFSET $SG90085
	push	OFFSET $SG90086
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo@4:
; Line 2174
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 5
	jne	SHORT $LN6@dlg_listbo@4
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN6@dlg_listbo@4
	mov	DWORD PTR tv82[ebp], 384		; 00000180H
	jmp	SHORT $LN7@dlg_listbo@4
$LN6@dlg_listbo@4:
	mov	DWORD PTR tv82[ebp], 323		; 00000143H
$LN7@dlg_listbo@4:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _msg$[ebp], edx
; Line 2176
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN8@dlg_listbo@4
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN8@dlg_listbo@4
	mov	DWORD PTR tv87[ebp], 410		; 0000019aH
	jmp	SHORT $LN9@dlg_listbo@4
$LN8@dlg_listbo@4:
	mov	DWORD PTR tv87[ebp], 337		; 00000151H
$LN9@dlg_listbo@4:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _msg2$[ebp], ecx
; Line 2177
	mov	esi, esp
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax
; Line 2178
	mov	esi, esp
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2179
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_addwithid ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_getid
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_index$ = 16						; size = 4
_dlg_listbox_getid PROC
; Line 2182
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2183
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2184
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2186
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo@5
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	je	SHORT $LN4@dlg_listbo@5
$LN3@dlg_listbo@5:
	push	2186					; 0000088aH
	push	OFFSET $SG90101
	push	OFFSET $SG90102
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo@5:
; Line 2187
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	neg	edx
	sbb	edx, edx
	and	edx, 73					; 00000049H
	add	edx, 336				; 00000150H
	mov	DWORD PTR _msg$[ebp], edx
; Line 2189
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2190
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_getid ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_index
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -16						; size = 4
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_listbox_index PROC
; Line 2194
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2195
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2196
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2198
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN8@dlg_listbo@6
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	je	SHORT $LN9@dlg_listbo@6
$LN8@dlg_listbo@6:
	push	2198					; 00000896H
	push	OFFSET $SG90114
	push	OFFSET $SG90115
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@dlg_listbo@6:
; Line 2199
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN5@dlg_listbo@6
; Line 2200
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN10@dlg_listbo@6
	push	2200					; 00000898H
	push	OFFSET $SG90118
	push	OFFSET $SG90119
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@dlg_listbo@6:
; Line 2201
	mov	esi, esp
	push	0
	push	0
	push	400					; 00000190H
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 2202
	cmp	DWORD PTR _ret$[ebp], -1
	je	SHORT $LN3@dlg_listbo@6
	cmp	DWORD PTR _ret$[ebp], 1
	jle	SHORT $LN5@dlg_listbo@6
$LN3@dlg_listbo@6:
; Line 2203
	or	eax, -1
	jmp	SHORT $LN6@dlg_listbo@6
$LN5@dlg_listbo@6:
; Line 2205
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	neg	edx
	sbb	edx, edx
	and	edx, 65					; 00000041H
	add	edx, 327				; 00000147H
	mov	DWORD PTR _msg$[ebp], edx
; Line 2206
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 2207
	cmp	DWORD PTR _ret$[ebp], -1
	jne	SHORT $LN2@dlg_listbo@6
; Line 2208
	or	eax, -1
	jmp	SHORT $LN6@dlg_listbo@6
; Line 2209
	jmp	SHORT $LN6@dlg_listbo@6
$LN2@dlg_listbo@6:
; Line 2210
	mov	eax, DWORD PTR _ret$[ebp]
$LN6@dlg_listbo@6:
; Line 2211
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_index ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_issel
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_index$ = 16						; size = 4
_dlg_listbox_issel PROC
; Line 2214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2215
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2216
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2219
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo@7
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN3@dlg_listbo@7
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN3@dlg_listbo@7
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN4@dlg_listbo@7
$LN3@dlg_listbo@7:
	push	2219					; 000008abH
	push	OFFSET $SG90135
	push	OFFSET $SG90136
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo@7:
; Line 2221
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	push	391					; 00000187H
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2222
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_issel ENDP
_TEXT	ENDS
PUBLIC	_dlg_listbox_select
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_msg$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_index$ = 16						; size = 4
_dlg_listbox_select PROC
; Line 2225
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2226
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2227
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2230
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_listbo@8
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN3@dlg_listbo@8
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN4@dlg_listbo@8
$LN3@dlg_listbo@8:
	push	2230					; 000008b6H
	push	OFFSET $SG90149
	push	OFFSET $SG90150
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_listbo@8:
; Line 2231
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 56					; 00000038H
	add	ecx, 334				; 0000014eH
	mov	DWORD PTR _msg$[ebp], ecx
; Line 2232
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2233
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_listbox_select ENDP
_TEXT	ENDS
PUBLIC	_dlg_text_set
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_text$ = 16						; size = 4
_dlg_text_set PROC
; Line 2236
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2237
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2238
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2239
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_text_s
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@dlg_text_s
$LN3@dlg_text_s:
	push	2239					; 000008bfH
	push	OFFSET $SG90162
	push	OFFSET $SG90163
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_text_s:
; Line 2240
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2241
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_text_set ENDP
_TEXT	ENDS
PUBLIC	_dlg_label_change
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -20						; size = 4
_id$ = -16						; size = 4
_escaped$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_text$ = 16						; size = 4
_dlg_label_change PROC
; Line 2244
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2245
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2246
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2247
	mov	DWORD PTR _escaped$[ebp], 0
; Line 2248
	mov	DWORD PTR _id$[ebp], -1
; Line 2250
	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN14@dlg_label_
	push	2250					; 000008caH
	push	OFFSET $SG90178
	push	OFFSET $SG90179
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@dlg_label_:
; Line 2251
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 7
	ja	$LN2@dlg_label_
	mov	edx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN16@dlg_label_[edx*4]
$LN9@dlg_label_:
; Line 2253
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2254
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _id$[ebp], edx
; Line 2255
	jmp	$LN10@dlg_label_
$LN8@dlg_label_:
; Line 2257
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2258
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _id$[ebp], edx
; Line 2259
	jmp	$LN10@dlg_label_
$LN7@dlg_label_:
; Line 2261
	mov	eax, DWORD PTR _ctrl$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2262
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _id$[ebp], ecx
; Line 2263
	jmp	$LN10@dlg_label_
$LN6@dlg_label_:
; Line 2265
	mov	edx, DWORD PTR _ctrl$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2266
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _id$[ebp], eax
; Line 2267
	jmp	$LN10@dlg_label_
$LN5@dlg_label_:
; Line 2269
	mov	ecx, DWORD PTR _ctrl$[ebp]
	movzx	edx, BYTE PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2270
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _id$[ebp], edx
; Line 2271
	jmp	SHORT $LN10@dlg_label_
$LN4@dlg_label_:
; Line 2273
	mov	eax, DWORD PTR _ctrl$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2274
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _id$[ebp], ecx
; Line 2275
	jmp	SHORT $LN10@dlg_label_
$LN3@dlg_label_:
; Line 2277
	mov	edx, DWORD PTR _ctrl$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	_shortcut_escape
	add	esp, 8
	mov	DWORD PTR _escaped$[ebp], eax
; Line 2278
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _id$[ebp], eax
; Line 2279
	jmp	SHORT $LN10@dlg_label_
$LN2@dlg_label_:
; Line 2281
	mov	ecx, OFFSET $SG90193
	test	ecx, ecx
	je	SHORT $LN10@dlg_label_
	push	2281					; 000008e9H
	push	OFFSET $SG90194
	push	OFFSET $SG90195
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@dlg_label_:
; Line 2284
	cmp	DWORD PTR _escaped$[ebp], 0
	je	SHORT $LN12@dlg_label_
; Line 2285
	mov	esi, esp
	mov	eax, DWORD PTR _escaped$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2286
	mov	ecx, DWORD PTR _escaped$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN12@dlg_label_:
; Line 2288
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@dlg_label_:
	DD	$LN9@dlg_label_
	DD	$LN8@dlg_label_
	DD	$LN7@dlg_label_
	DD	$LN6@dlg_label_
	DD	$LN5@dlg_label_
	DD	$LN2@dlg_label_
	DD	$LN4@dlg_label_
	DD	$LN3@dlg_label_
_dlg_label_change ENDP
_TEXT	ENDS
PUBLIC	_dlg_filesel_set
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_fn$ = 16						; size = 4
_dlg_filesel_set PROC
; Line 2291
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2292
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2293
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2294
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_filese
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 7
	je	SHORT $LN4@dlg_filese
$LN3@dlg_filese:
	push	2294					; 000008f6H
	push	OFFSET $SG90208
	push	OFFSET $SG90209
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_filese:
; Line 2295
	mov	esi, esp
	mov	eax, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2296
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_filesel_set ENDP
_TEXT	ENDS
PUBLIC	_dlg_filesel_get
EXTRN	_filename_from_str:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -16						; size = 4
_tmp$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_filesel_get PROC
; Line 2299
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2300
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2301
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2304
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_filese@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 7
	je	SHORT $LN4@dlg_filese@2
$LN3@dlg_filese@2:
	push	2304					; 00000900H
	push	OFFSET $SG90221
	push	OFFSET $SG90222
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_filese@2:
; Line 2305
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_GetDlgItemText_alloc
	add	esp, 8
	mov	DWORD PTR _tmp$[ebp], eax
; Line 2306
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	call	_filename_from_str
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 2307
	mov	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 2308
	mov	eax, DWORD PTR _ret$[ebp]
; Line 2309
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_filesel_get ENDP
_TEXT	ENDS
PUBLIC	_dlg_auto_set_fixed_pitch_flag
EXTRN	_dupprintf:PROC
EXTRN	_fontspec_copy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv130 = -28						; size = 4
tv91 = -24						; size = 4
tv81 = -20						; size = 4
_c$ = -16						; size = 4
_dp$ = -12						; size = 4
_boldstr$ = -8						; size = 4
_buf$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_fs$ = 16						; size = 4
_dlg_fontsel_set PROC
; Line 2312
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2314
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2315
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2316
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN5@dlg_fontse
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 8
	je	SHORT $LN6@dlg_fontse
$LN5@dlg_fontse:
	push	2316					; 0000090cH
	push	OFFSET $SG90236
	push	OFFSET $SG90237
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@dlg_fontse:
; Line 2318
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_fontspec_free
	add	esp, 4
; Line 2319
	mov	edx, DWORD PTR _fs$[ebp]
	push	edx
	call	_fontspec_copy
	add	esp, 4
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 2321
	mov	edx, DWORD PTR _fs$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN7@dlg_fontse
	mov	DWORD PTR tv81[ebp], OFFSET $SG90239
	jmp	SHORT $LN8@dlg_fontse
$LN7@dlg_fontse:
	mov	DWORD PTR tv81[ebp], OFFSET $SG90240
$LN8@dlg_fontse:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _boldstr$[ebp], eax
; Line 2322
	mov	ecx, DWORD PTR _fs$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@dlg_fontse
; Line 2323
	mov	edx, DWORD PTR _boldstr$[ebp]
	push	edx
	mov	eax, DWORD PTR _fs$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG90242
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax
; Line 2324
	jmp	SHORT $LN1@dlg_fontse
$LN2@dlg_fontse:
; Line 2327
	mov	edx, DWORD PTR _fs$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jge	SHORT $LN9@dlg_fontse
	mov	DWORD PTR tv91[ebp], OFFSET $SG90244
	jmp	SHORT $LN10@dlg_fontse
$LN9@dlg_fontse:
	mov	DWORD PTR tv91[ebp], OFFSET $SG90245
$LN10@dlg_fontse:
	mov	eax, DWORD PTR _fs$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jge	SHORT $LN11@dlg_fontse
	mov	ecx, DWORD PTR _fs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	neg	edx
	mov	DWORD PTR tv130[ebp], edx
	jmp	SHORT $LN12@dlg_fontse
$LN11@dlg_fontse:
	mov	eax, DWORD PTR _fs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv130[ebp], ecx
$LN12@dlg_fontse:
	mov	edx, DWORD PTR tv91[ebp]
	push	edx
	mov	eax, DWORD PTR tv130[ebp]
	push	eax
	mov	ecx, DWORD PTR _boldstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fs$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG90246
	call	_dupprintf
	add	esp, 20					; 00000014H
	mov	DWORD PTR _buf$[ebp], eax
$LN1@dlg_fontse:
; Line 2328
	mov	esi, esp
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2329
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 2331
	mov	ecx, DWORD PTR _dp$[ebp]
	push	ecx
	call	_dlg_auto_set_fixed_pitch_flag
	add	esp, 4
; Line 2332
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_fontsel_set ENDP
_TEXT	ENDS
PUBLIC	_dlg_fontsel_get
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_fontsel_get PROC
; Line 2335
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2336
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2337
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2338
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN3@dlg_fontse@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 8
	je	SHORT $LN4@dlg_fontse@2
$LN3@dlg_fontse@2:
	push	2338					; 00000922H
	push	OFFSET $SG90256
	push	OFFSET $SG90257
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_fontse@2:
; Line 2339
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_fontspec_copy
	add	esp, 4
; Line 2340
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_fontsel_get ENDP
_TEXT	ENDS
PUBLIC	_dlg_update_start
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_update_start PROC
; Line 2348
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2349
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2350
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2351
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN2@dlg_update
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN2@dlg_update
; Line 2352
	mov	esi, esp
	push	0
	push	0
	push	11					; 0000000bH
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SendDlgItemMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@dlg_update:
; Line 2354
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_update_start ENDP
_TEXT	ENDS
PUBLIC	_dlg_update_done
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__GetDlgItem@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hw$90277 = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_update_done PROC
; Line 2357
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2358
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2359
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2360
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN2@dlg_update@2
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN2@dlg_update@2
; Line 2361
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hw$90277[ebp], eax
; Line 2362
	mov	esi, esp
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, DWORD PTR _hw$90277[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2363
	mov	esi, esp
	push	1
	push	0
	mov	ecx, DWORD PTR _hw$90277[ebp]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@dlg_update@2:
; Line 2365
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_update_done ENDP
_TEXT	ENDS
PUBLIC	_dlg_set_focus
EXTRN	__imp__SetFocus@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -20						; size = 4
_ctl$ = -16						; size = 4
_id$ = -12						; size = 4
_c$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_set_focus PROC
; Line 2368
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2369
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2370
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	call	_dlg_findbyctrl
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 2373
	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN15@dlg_set_fo
; Line 2374
	jmp	$LN16@dlg_set_fo
$LN15@dlg_set_fo:
; Line 2375
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 1
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 7
	ja	$LN1@dlg_set_fo
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN18@dlg_set_fo[eax*4]
$LN12@dlg_set_fo:
; Line 2376
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR _id$[ebp], edx
	jmp	$LN13@dlg_set_fo
$LN11@dlg_set_fo:
; Line 2378
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ctrl$[ebp]
	add	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN10@dlg_set_fo
$LN9@dlg_set_fo:
	mov	eax, DWORD PTR _id$[ebp]
	sub	eax, 1
	mov	DWORD PTR _id$[ebp], eax
$LN10@dlg_set_fo:
	cmp	DWORD PTR _id$[ebp], 1
	jle	SHORT $LN8@dlg_set_fo
; Line 2379
	mov	esi, esp
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN7@dlg_set_fo
; Line 2380
	jmp	SHORT $LN8@dlg_set_fo
$LN7@dlg_set_fo:
; Line 2386
	jmp	SHORT $LN9@dlg_set_fo
$LN8@dlg_set_fo:
	jmp	SHORT $LN13@dlg_set_fo
$LN6@dlg_set_fo:
; Line 2387
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN13@dlg_set_fo
$LN5@dlg_set_fo:
; Line 2388
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN13@dlg_set_fo
$LN4@dlg_set_fo:
; Line 2389
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	DWORD PTR _id$[ebp], eax
	jmp	SHORT $LN13@dlg_set_fo
$LN3@dlg_set_fo:
; Line 2390
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR _id$[ebp], edx
	jmp	SHORT $LN13@dlg_set_fo
$LN2@dlg_set_fo:
; Line 2391
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	DWORD PTR _id$[ebp], ecx
	jmp	SHORT $LN13@dlg_set_fo
$LN1@dlg_set_fo:
; Line 2392
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _id$[ebp], eax
$LN13@dlg_set_fo:
; Line 2394
	mov	esi, esp
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ctl$[ebp], eax
; Line 2395
	mov	esi, esp
	mov	ecx, DWORD PTR _ctl$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetFocus@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@dlg_set_fo:
; Line 2396
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@dlg_set_fo:
	DD	$LN12@dlg_set_fo
	DD	$LN11@dlg_set_fo
	DD	$LN6@dlg_set_fo
	DD	$LN5@dlg_set_fo
	DD	$LN4@dlg_set_fo
	DD	$LN1@dlg_set_fo
	DD	$LN3@dlg_set_fo
	DD	$LN2@dlg_set_fo
_dlg_set_focus ENDP
_TEXT	ENDS
PUBLIC	_dlg_beep
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dlg$ = 8						; size = 4
_dlg_beep PROC
; Line 2404
	push	ebp
	mov	ebp, esp
	push	esi
; Line 2406
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__MessageBeep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2407
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_dlg_beep ENDP
_TEXT	ENDS
PUBLIC	_dlg_error_msg
EXTRN	__imp__MessageBoxA@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -8						; size = 4
_dp$ = -4						; size = 4
_dlg$ = 8						; size = 4
_msg$ = 12						; size = 4
_dlg_error_msg PROC
; Line 2410
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2411
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2414
	mov	ecx, DWORD PTR _dp$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN3@dlg_error_
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@dlg_error_
$LN3@dlg_error_:
	mov	DWORD PTR tv69[ebp], 0
$LN4@dlg_error_:
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2415
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_error_msg ENDP
_TEXT	ENDS
PUBLIC	_dlg_end
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = -4						; size = 4
_dlg$ = 8						; size = 4
_value$ = 12						; size = 4
_dlg_end PROC
; Line 2423
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2424
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2425
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [ecx+200], 1
; Line 2426
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+204], eax
; Line 2427
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_end ENDP
_TEXT	ENDS
PUBLIC	_dlg_refresh
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_refresh PROC
; Line 2430
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2431
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2435
	cmp	DWORD PTR _ctrl$[ebp], 0
	jne	$LN10@dlg_refres
; Line 2439
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@dlg_refres
$LN8@dlg_refres:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN9@dlg_refres:
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	SHORT $LN7@dlg_refres
; Line 2442
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@dlg_refres
$LN5@dlg_refres:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@dlg_refres:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	call	_winctrl_findbyindex
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN4@dlg_refres
; Line 2443
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@dlg_refres
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN3@dlg_refres
; Line 2445
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@dlg_refres:
; Line 2446
	jmp	SHORT $LN5@dlg_refres
$LN4@dlg_refres:
; Line 2447
	jmp	$LN8@dlg_refres
$LN7@dlg_refres:
; Line 2448
	jmp	SHORT $LN11@dlg_refres
$LN10@dlg_refres:
; Line 2452
	mov	edx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN11@dlg_refres
; Line 2453
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@dlg_refres:
; Line 2455
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_refresh ENDP
_TEXT	ENDS
PUBLIC	_dlg_coloursel_start
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_r$ = 16						; size = 4
_g$ = 20						; size = 4
_b$ = 24						; size = 4
_dlg_coloursel_start PROC
; Line 2458
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2459
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2460
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [ecx+188], 1
; Line 2461
	mov	edx, DWORD PTR _dp$[ebp]
	mov	al, BYTE PTR _r$[ebp]
	mov	BYTE PTR [edx+192], al
; Line 2462
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	dl, BYTE PTR _g$[ebp]
	mov	BYTE PTR [ecx+193], dl
; Line 2463
	mov	eax, DWORD PTR _dp$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+194], cl
; Line 2464
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_coloursel_start ENDP
_TEXT	ENDS
PUBLIC	_dlg_coloursel_results
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_r$ = 16						; size = 4
_g$ = 20						; size = 4
_b$ = 24						; size = 4
_dlg_coloursel_results PROC
; Line 2468
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2469
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2470
	mov	ecx, DWORD PTR _dp$[ebp]
	movzx	edx, BYTE PTR [ecx+195]
	test	edx, edx
	je	SHORT $LN2@dlg_colour
; Line 2471
	mov	eax, DWORD PTR _dp$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 2472
	mov	eax, DWORD PTR _dp$[ebp]
	movzx	ecx, BYTE PTR [eax+193]
	mov	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 2473
	mov	eax, DWORD PTR _dp$[ebp]
	movzx	ecx, BYTE PTR [eax+194]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 2474
	mov	eax, 1
	jmp	SHORT $LN3@dlg_colour
; Line 2475
	jmp	SHORT $LN3@dlg_colour
$LN2@dlg_colour:
; Line 2476
	xor	eax, eax
$LN3@dlg_colour:
; Line 2477
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_coloursel_results ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetTextMetricsA@8:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	_conf_get_fontspec:PROC
EXTRN	_conf_get_int:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -104						; size = 4
tv79 = -100						; size = 4
_is_var$ = -96						; size = 4
_tm$ = -88						; size = 56
_hdc$ = -28						; size = 4
_hfont$ = -24						; size = 4
_quality$ = -20						; size = 4
_fs$ = -16						; size = 4
_conf$ = -12						; size = 4
_dp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dlg$ = 8						; size = 4
_dlg_auto_set_fixed_pitch_flag PROC
; Line 2480
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2481
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2482
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _conf$[ebp], edx
; Line 2500
	push	113					; 00000071H
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _quality$[ebp], eax
; Line 2501
	push	112					; 00000070H
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_fontspec
	add	esp, 8
	mov	DWORD PTR _fs$[ebp], eax
; Line 2506
	cmp	DWORD PTR _quality$[ebp], 0
	jne	SHORT $LN10@dlg_auto_s
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN11@dlg_auto_s
$LN10@dlg_auto_s:
	cmp	DWORD PTR _quality$[ebp], 1
	jne	SHORT $LN8@dlg_auto_s
	mov	DWORD PTR tv78[ebp], 4
	jmp	SHORT $LN9@dlg_auto_s
$LN8@dlg_auto_s:
	xor	edx, edx
	cmp	DWORD PTR _quality$[ebp], 2
	setne	dl
	lea	edx, DWORD PTR [edx+edx+3]
	mov	DWORD PTR tv78[ebp], edx
$LN9@dlg_auto_s:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN11@dlg_auto_s:
	mov	esi, esp
	mov	ecx, DWORD PTR _fs$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	1
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	push	0
	push	0
	push	1
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hfont$[ebp], eax
; Line 2507
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 2508
	cmp	DWORD PTR _hdc$[ebp], 0
	je	SHORT $LN5@dlg_auto_s
	mov	esi, esp
	mov	ecx, DWORD PTR _hfont$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@dlg_auto_s
	mov	esi, esp
	lea	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetTextMetricsA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@dlg_auto_s
; Line 2510
	movzx	edx, BYTE PTR _tm$[ebp+51]
	and	edx, 1
	mov	DWORD PTR _is_var$[ebp], edx
; Line 2511
	jmp	SHORT $LN4@dlg_auto_s
$LN5@dlg_auto_s:
; Line 2512
	mov	DWORD PTR _is_var$[ebp], 0
$LN4@dlg_auto_s:
; Line 2514
	cmp	DWORD PTR _hdc$[ebp], 0
	je	SHORT $LN3@dlg_auto_s
; Line 2515
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@dlg_auto_s:
; Line 2516
	cmp	DWORD PTR _hfont$[ebp], 0
	je	SHORT $LN2@dlg_auto_s
; Line 2517
	mov	esi, esp
	mov	ecx, DWORD PTR _hfont$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@dlg_auto_s:
; Line 2519
	cmp	DWORD PTR _is_var$[ebp], 0
	je	SHORT $LN6@dlg_auto_s
; Line 2520
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+208], 0
$LN6@dlg_auto_s:
; Line 2521
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@dlg_auto_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@dlg_auto_s:
	DD	1
	DD	$LN13@dlg_auto_s
$LN13@dlg_auto_s:
	DD	-88					; ffffffa8H
	DD	56					; 00000038H
	DD	$LN12@dlg_auto_s
$LN12@dlg_auto_s:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	0
_dlg_auto_set_fixed_pitch_flag ENDP
_TEXT	ENDS
PUBLIC	_dlg_get_fixed_pitch_flag
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = -4						; size = 4
_dlg$ = 8						; size = 4
_dlg_get_fixed_pitch_flag PROC
; Line 2524
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2525
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2526
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [ecx+208]
; Line 2527
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_get_fixed_pitch_flag ENDP
_TEXT	ENDS
PUBLIC	_dlg_set_fixed_pitch_flag
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = -4						; size = 4
_dlg$ = 8						; size = 4
_flag$ = 12						; size = 4
_dlg_set_fixed_pitch_flag PROC
; Line 2530
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2531
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2532
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR _flag$[ebp]
	mov	DWORD PTR [ecx+208], edx
; Line 2533
	mov	esp, ebp
	pop	ebp
	ret	0
_dlg_set_fixed_pitch_flag ENDP
_TEXT	ENDS
PUBLIC	_dp_init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_dp_init PROC
; Line 2553
	push	ebp
	mov	ebp, esp
; Line 2554
	mov	eax, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 2555
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 2556
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+200], 0
; Line 2557
	mov	eax, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [ecx+52], 0
; Line 2558
	push	128					; 00000080H
	push	0
	mov	edx, DWORD PTR _dp$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2559
	mov	eax, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2560
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [ecx+44], 0
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 2561
	push	OFFSET _perctrl_privdata_cmp
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [ecx+196], eax
; Line 2562
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+208], 1
; Line 2563
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_dp_init ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_perctrl_privdata_cmp PROC
; Line 2542
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2543
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 2544
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 2545
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN3@perctrl_pr
; Line 2546
	or	eax, -1
	jmp	SHORT $LN4@perctrl_pr
	jmp	SHORT $LN2@perctrl_pr
$LN3@perctrl_pr:
; Line 2547
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN2@perctrl_pr
; Line 2548
	mov	eax, 1
	jmp	SHORT $LN4@perctrl_pr
$LN2@perctrl_pr:
; Line 2549
	xor	eax, eax
$LN4@perctrl_pr:
; Line 2550
	mov	esp, ebp
	pop	ebp
	ret	0
_perctrl_privdata_cmp ENDP
_TEXT	ENDS
PUBLIC	_dp_add_tree
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dp$ = 8						; size = 4
_wc$ = 12						; size = 4
_dp_add_tree PROC
; Line 2566
	push	ebp
	mov	ebp, esp
; Line 2567
	mov	eax, DWORD PTR _dp$[ebp]
	cmp	DWORD PTR [eax+36], 8
	jb	SHORT $LN3@dp_add_tre
	push	2567					; 00000a07H
	push	OFFSET $SG90437
	push	OFFSET $SG90438
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@dp_add_tre:
; Line 2568
	mov	edx, DWORD PTR _dp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR _wc$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 2569
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_dp_add_tree ENDP
_TEXT	ENDS
PUBLIC	_dp_cleanup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_dp$ = 8						; size = 4
_dp_cleanup PROC
; Line 2572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2575
	mov	eax, DWORD PTR _dp$[ebp]
	cmp	DWORD PTR [eax+196], 0
	je	SHORT $LN4@dp_cleanup
$LN3@dp_cleanup:
; Line 2576
	push	0
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	push	edx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@dp_cleanup
; Line 2577
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	push	edx
	call	_del234
	add	esp, 8
; Line 2578
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@dp_cleanup
; Line 2579
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_safefree
	add	esp, 4
$LN1@dp_cleanup:
; Line 2580
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 2581
	jmp	SHORT $LN3@dp_cleanup
$LN2@dp_cleanup:
; Line 2582
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	push	edx
	call	_freetree234
	add	esp, 4
; Line 2583
	mov	eax, DWORD PTR _dp$[ebp]
	mov	DWORD PTR [eax+196], 0
$LN4@dp_cleanup:
; Line 2585
	mov	ecx, DWORD PTR _dp$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_safefree
	add	esp, 4
; Line 2586
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 2587
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dp_cleanup ENDP
_TEXT	ENDS
PUBLIC	_dlg_get_privdata
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -28						; size = 4
_tmp$ = -20						; size = 12
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_dlg_get_privdata PROC
; Line 2590
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2591
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2593
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 2594
	push	0
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 2595
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@dlg_get_pr
; Line 2596
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN3@dlg_get_pr
; Line 2597
	jmp	SHORT $LN3@dlg_get_pr
$LN2@dlg_get_pr:
; Line 2598
	xor	eax, eax
$LN3@dlg_get_pr:
; Line 2599
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@dlg_get_pr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@dlg_get_pr:
	DD	1
	DD	$LN6@dlg_get_pr
$LN6@dlg_get_pr:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@dlg_get_pr
$LN5@dlg_get_pr:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dlg_get_privdata ENDP
_TEXT	ENDS
PUBLIC	_dlg_set_privdata
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -28						; size = 4
_tmp$ = -20						; size = 12
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_ptr$ = 16						; size = 4
_dlg_set_privdata PROC
; Line 2602
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2603
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2605
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 2606
	push	0
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 2607
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@dlg_set_pr
; Line 2608
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 2609
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2610
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 2611
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_add234
	add	esp, 8
$LN1@dlg_set_pr:
; Line 2613
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2614
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@dlg_set_pr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@dlg_set_pr:
	DD	1
	DD	$LN5@dlg_set_pr
$LN5@dlg_set_pr:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN4@dlg_set_pr
$LN4@dlg_set_pr:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dlg_set_privdata ENDP
_TEXT	ENDS
PUBLIC	_dlg_alloc_privdata
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -28						; size = 4
_tmp$ = -20						; size = 12
_dp$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_dlg$ = 12						; size = 4
_size$ = 16						; size = 4
_dlg_alloc_privdata PROC
; Line 2617
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2618
	mov	eax, DWORD PTR _dlg$[ebp]
	mov	DWORD PTR _dp$[ebp], eax
; Line 2620
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 2621
	push	0
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 2622
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@dlg_alloc_
; Line 2623
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 2624
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2625
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 2626
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _dp$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	call	_add234
	add	esp, 8
$LN1@dlg_alloc_:
; Line 2628
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@dlg_alloc_
	push	2628					; 00000a44H
	push	OFFSET $SG90494
	push	OFFSET $SG90495
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@dlg_alloc_:
; Line 2629
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 1
; Line 2634
	push	1
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2635
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
; Line 2636
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@dlg_alloc_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@dlg_alloc_:
	DD	1
	DD	$LN6@dlg_alloc_
$LN6@dlg_alloc_:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@dlg_alloc_
$LN5@dlg_alloc_:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dlg_alloc_privdata ENDP
_TEXT	ENDS
END
