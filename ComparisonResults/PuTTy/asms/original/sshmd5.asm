; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshmd5.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_hmacmd5_free_context
PUBLIC	_hmacmd5_make_context
PUBLIC	_ssh_hmac_md5
CONST	SEGMENT
_ssh_hmac_md5 DD FLAT:_hmacmd5_make_context
	DD	FLAT:_hmacmd5_free_context
	DD	FLAT:_hmacmd5_key_16
	DD	FLAT:_hmacmd5_generate
	DD	FLAT:_hmacmd5_verify
	DD	FLAT:_hmacmd5_start
	DD	FLAT:_hmacmd5_bytes
	DD	FLAT:_hmacmd5_genresult
	DD	FLAT:_hmacmd5_verresult
	DD	FLAT:$SG6164
	DD	010H
	DD	FLAT:$SG6165
CONST	ENDS
_DATA	SEGMENT
$SG6164	DB	'hmac-md5', 00H
	ORG $+3
$SG6165	DB	'HMAC-MD5', 00H
_DATA	ENDS
PUBLIC	_MD5Init
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshmd5.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_s$ = 8							; size = 4
_MD5Init PROC
; Line 119
	push	ebp
	mov	ebp, esp
; Line 120
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_MD5_Core_Init
	add	esp, 4
; Line 121
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 122
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+88], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+84], 0
; Line 123
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_MD5Init ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = 8						; size = 4
_MD5_Core_Init PROC
; Line 23
	push	ebp
	mov	ebp, esp
; Line 24
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 1732584193		; 67452301H
; Line 25
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], -271733879		; efcdab89H
; Line 26
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], -1732584194		; 98badcfeH
; Line 27
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+12], 271733878		; 10325476H
; Line 28
	pop	ebp
	ret	0
_MD5_Core_Init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MD5Update
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -88						; size = 4
_lenw$ = -84						; size = 4
_wordblock$ = -76					; size = 64
_q$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_len$ = 16						; size = 4
_MD5Update PROC
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 127
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 129
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _lenw$[ebp], ecx
; Line 135
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+88]
	add	eax, DWORD PTR _lenw$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+88], eax
; Line 136
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+88]
	cmp	eax, DWORD PTR _lenw$[ebp]
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+84]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+84], ecx
; Line 138
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	add	edx, DWORD PTR _len$[ebp]
	cmp	edx, 64					; 00000040H
	jae	SHORT $LN5@MD5Update
; Line 142
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 143
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+80], ecx
; Line 144
	jmp	$LN8@MD5Update
$LN5@MD5Update:
; Line 148
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 64					; 00000040H
	jb	$LN4@MD5Update
; Line 149
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 150
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _q$[ebp], ecx
; Line 151
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _len$[ebp], ecx
; Line 153
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MD5Update
$LN2@MD5Update:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@MD5Update:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN1@MD5Update
; Line 158
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+eax*4+19]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx+eax*4+18]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx*4+17]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [ecx+eax*4+16]
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _wordblock$[ebp+ecx*4], edx
; Line 159
	jmp	SHORT $LN2@MD5Update
$LN1@MD5Update:
; Line 160
	lea	edx, DWORD PTR _wordblock$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_MD5_Block
	add	esp, 8
; Line 161
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 162
	jmp	$LN5@MD5Update
$LN4@MD5Update:
; Line 163
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 164
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+80], eax
$LN8@MD5Update:
; Line 166
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@MD5Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@MD5Update:
	DD	1
	DD	$LN11@MD5Update
$LN11@MD5Update:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN10@MD5Update
$LN10@MD5Update:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_MD5Update ENDP
; Function compile flags: /Odtp /RTCsu
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_s$ = 8							; size = 4
_block$ = 12						; size = 4
_MD5_Block PROC
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 34
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
; Line 35
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 36
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 37
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _d$[ebp], ecx
; Line 39
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [edx+eax-680876936]
	shl	ecx, 7
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+eax-680876936]
	shr	edx, 25					; 00000019H
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 40
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [eax+ecx-389564586]
	shl	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+ecx-389564586]
	shr	eax, 20					; 00000014H
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 41
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+8]
	lea	eax, DWORD PTR [ecx+edx+606105819]
	shl	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+edx+606105819]
	shr	ecx, 15					; 0000000fH
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 42
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	lea	ecx, DWORD PTR [edx+eax-1044525330]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+12]
	lea	edx, DWORD PTR [edx+eax-1044525330]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 43
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	lea	edx, DWORD PTR [eax+ecx-176418897]
	shl	edx, 7
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [eax+ecx-176418897]
	shr	eax, 25					; 00000019H
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 44
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+20]
	lea	eax, DWORD PTR [ecx+edx+1200080426]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [ecx+edx+1200080426]
	shr	ecx, 20					; 00000014H
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 45
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _b$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	lea	ecx, DWORD PTR [edx+eax-1473231341]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _b$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [edx+eax-1473231341]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	lea	edx, DWORD PTR [eax+ecx-45705983]
	shl	edx, 22					; 00000016H
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	lea	eax, DWORD PTR [eax+ecx-45705983]
	shr	eax, 10					; 0000000aH
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 47
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+32]
	lea	eax, DWORD PTR [ecx+edx+1770035416]
	shl	eax, 7
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [ecx+edx+1770035416]
	shr	ecx, 25					; 00000019H
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 48
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	lea	ecx, DWORD PTR [edx+eax-1958414417]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+36]
	lea	edx, DWORD PTR [edx+eax-1958414417]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 49
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	lea	edx, DWORD PTR [eax+ecx-42063]
	shl	edx, 17					; 00000011H
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	lea	eax, DWORD PTR [eax+ecx-42063]
	shr	eax, 15					; 0000000fH
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 50
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+44]
	lea	eax, DWORD PTR [ecx+edx-1990404162]
	shl	eax, 22					; 00000016H
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+44]
	lea	ecx, DWORD PTR [ecx+edx-1990404162]
	shr	ecx, 10					; 0000000aH
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 51
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	lea	ecx, DWORD PTR [edx+eax+1804603682]
	shl	ecx, 7
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+48]
	lea	edx, DWORD PTR [edx+eax+1804603682]
	shr	edx, 25					; 00000019H
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 52
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	lea	edx, DWORD PTR [eax+ecx-40341101]
	shl	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	lea	eax, DWORD PTR [eax+ecx-40341101]
	shr	eax, 20					; 00000014H
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 53
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+56]
	lea	eax, DWORD PTR [ecx+edx-1502002290]
	shl	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+56]
	lea	ecx, DWORD PTR [ecx+edx-1502002290]
	shr	ecx, 15					; 0000000fH
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 54
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	lea	ecx, DWORD PTR [edx+eax+1236535329]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+60]
	lea	edx, DWORD PTR [edx+eax+1236535329]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 55
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	lea	edx, DWORD PTR [eax+ecx-165796510]
	shl	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+ecx-165796510]
	shr	eax, 27					; 0000001bH
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 56
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+24]
	lea	eax, DWORD PTR [ecx+edx-1069501632]
	shl	eax, 9
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ecx+edx-1069501632]
	shr	ecx, 23					; 00000017H
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 57
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	lea	ecx, DWORD PTR [edx+eax+643717713]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+44]
	lea	edx, DWORD PTR [edx+eax+643717713]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [eax+ecx-373897302]
	shl	edx, 20					; 00000014H
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+ecx-373897302]
	shr	eax, 12					; 0000000cH
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 59
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+20]
	lea	eax, DWORD PTR [ecx+edx-701558691]
	shl	eax, 5
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [ecx+edx-701558691]
	shr	ecx, 27					; 0000001bH
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 60
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _b$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	lea	ecx, DWORD PTR [edx+eax+38016083]
	shl	ecx, 9
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	and	eax, DWORD PTR _b$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+40]
	lea	edx, DWORD PTR [edx+eax+38016083]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	lea	edx, DWORD PTR [eax+ecx-660478335]
	shl	edx, 14					; 0000000eH
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	lea	eax, DWORD PTR [eax+ecx-660478335]
	shr	eax, 18					; 00000012H
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 62
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+16]
	lea	eax, DWORD PTR [ecx+edx-405537848]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [ecx+edx-405537848]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 63
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	lea	ecx, DWORD PTR [edx+eax+568446438]
	shl	ecx, 5
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	and	eax, DWORD PTR _c$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+36]
	lea	edx, DWORD PTR [edx+eax+568446438]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 64
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	lea	edx, DWORD PTR [eax+ecx-1019803690]
	shl	edx, 9
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	lea	eax, DWORD PTR [eax+ecx-1019803690]
	shr	eax, 23					; 00000017H
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 65
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+12]
	lea	eax, DWORD PTR [ecx+edx-187363961]
	shl	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [ecx+edx-187363961]
	shr	ecx, 18					; 00000012H
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 66
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	lea	ecx, DWORD PTR [edx+eax+1163531501]
	shl	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+32]
	lea	edx, DWORD PTR [edx+eax+1163531501]
	shr	edx, 12					; 0000000cH
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	lea	edx, DWORD PTR [eax+ecx-1444681467]
	shl	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	lea	eax, DWORD PTR [eax+ecx-1444681467]
	shr	eax, 27					; 0000001bH
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 68
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+8]
	lea	eax, DWORD PTR [ecx+edx-51403784]
	shl	eax, 9
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+edx-51403784]
	shr	ecx, 23					; 00000017H
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 69
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	lea	ecx, DWORD PTR [edx+eax+1735328473]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+28]
	lea	edx, DWORD PTR [edx+eax+1735328473]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	lea	edx, DWORD PTR [eax+ecx-1926607734]
	shl	edx, 20					; 00000014H
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	lea	eax, DWORD PTR [eax+ecx-1926607734]
	shr	eax, 12					; 0000000cH
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 71
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [ecx+eax-378558]
	shl	ecx, 4
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+20]
	lea	edx, DWORD PTR [edx+eax-378558]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	lea	eax, DWORD PTR [eax+edx-2022574463]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [ecx+edx-2022574463]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 73
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	lea	edx, DWORD PTR [edx+ecx+1839030562]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+44]
	lea	eax, DWORD PTR [eax+ecx+1839030562]
	shr	eax, 16					; 00000010H
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 74
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+56]
	lea	ecx, DWORD PTR [ecx+eax-35309556]
	shl	ecx, 23					; 00000017H
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+56]
	lea	edx, DWORD PTR [edx+eax-35309556]
	shr	edx, 9
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+edx-1530992060]
	shl	eax, 4
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+edx-1530992060]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 76
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	lea	edx, DWORD PTR [edx+ecx+1272893353]
	shl	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [eax+ecx+1272893353]
	shr	eax, 21					; 00000015H
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 77
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+28]
	lea	ecx, DWORD PTR [ecx+eax-155497632]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+28]
	lea	edx, DWORD PTR [edx+eax-155497632]
	shr	edx, 16					; 00000010H
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 78
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	lea	eax, DWORD PTR [eax+edx-1094730640]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+40]
	lea	ecx, DWORD PTR [ecx+edx-1094730640]
	shr	ecx, 9
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 79
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	lea	edx, DWORD PTR [edx+ecx+681279174]
	shl	edx, 4
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	lea	eax, DWORD PTR [eax+ecx+681279174]
	shr	eax, 28					; 0000001cH
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 80
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-358537222]
	shl	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [edx+eax-358537222]
	shr	edx, 21					; 00000015H
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 81
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [eax+edx-722521979]
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [ecx+edx-722521979]
	shr	ecx, 16					; 00000010H
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 82
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [edx+ecx+76029189]
	shl	edx, 23					; 00000017H
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+ecx+76029189]
	shr	eax, 9
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 83
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+36]
	lea	ecx, DWORD PTR [ecx+eax-640364487]
	shl	ecx, 4
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+36]
	lea	edx, DWORD PTR [edx+eax-640364487]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 84
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	lea	eax, DWORD PTR [eax+edx-421815835]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+48]
	lea	ecx, DWORD PTR [ecx+edx-421815835]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 85
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	lea	edx, DWORD PTR [edx+ecx+530742520]
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	lea	eax, DWORD PTR [eax+ecx+530742520]
	shr	eax, 16					; 00000010H
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 86
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax-995338651]
	shl	ecx, 23					; 00000017H
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [edx+eax-995338651]
	shr	edx, 9
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 87
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-198630844]
	shl	eax, 6
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	or	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+edx-198630844]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 88
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	or	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	lea	edx, DWORD PTR [edx+ecx+1126891415]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	lea	eax, DWORD PTR [eax+ecx+1126891415]
	shr	eax, 22					; 00000016H
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 89
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	or	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+56]
	lea	ecx, DWORD PTR [ecx+eax-1416354905]
	shl	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	or	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+56]
	lea	edx, DWORD PTR [edx+eax-1416354905]
	shr	edx, 17					; 00000011H
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx-57434055]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	or	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [ecx+edx-57434055]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 91
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	or	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	lea	edx, DWORD PTR [edx+ecx+1700485571]
	shl	edx, 6
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	lea	eax, DWORD PTR [eax+ecx+1700485571]
	shr	eax, 26					; 0000001aH
	or	edx, eax
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 92
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	or	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [ecx+eax-1894986606]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	or	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+12]
	lea	edx, DWORD PTR [edx+eax-1894986606]
	shr	edx, 22					; 00000016H
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 93
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	lea	eax, DWORD PTR [eax+edx-1051523]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	or	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+40]
	lea	ecx, DWORD PTR [ecx+edx-1051523]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 94
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	or	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+ecx-2054922799]
	shl	edx, 21					; 00000015H
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+ecx-2054922799]
	shr	eax, 11					; 0000000bH
	or	edx, eax
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 95
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	or	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [ecx+eax+1873313359]
	shl	ecx, 6
	mov	edx, DWORD PTR _d$[ebp]
	not	edx
	or	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+32]
	lea	edx, DWORD PTR [edx+eax+1873313359]
	shr	edx, 26					; 0000001aH
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	lea	eax, DWORD PTR [eax+edx-30611744]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	or	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+60]
	lea	ecx, DWORD PTR [ecx+edx-30611744]
	shr	ecx, 22					; 00000016H
	or	eax, ecx
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 97
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	or	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [edx+ecx-1560198380]
	shl	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	lea	eax, DWORD PTR [eax+ecx-1560198380]
	shr	eax, 17					; 00000011H
	or	edx, eax
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 98
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	or	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+52]
	lea	ecx, DWORD PTR [ecx+eax+1309151649]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _a$[ebp]
	not	edx
	or	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+52]
	lea	edx, DWORD PTR [edx+eax+1309151649]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [eax+edx-145523070]
	shl	eax, 6
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	or	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [ecx+edx-145523070]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 100
	mov	edx, DWORD PTR _c$[ebp]
	not	edx
	or	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	lea	edx, DWORD PTR [edx+ecx-1120210379]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [ecx+44]
	lea	eax, DWORD PTR [eax+ecx-1120210379]
	shr	eax, 22					; 00000016H
	or	edx, eax
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 101
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	or	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [ecx+eax+718787259]
	shl	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _b$[ebp]
	not	edx
	or	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [edx+eax+718787259]
	shr	edx, 17					; 00000011H
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	lea	eax, DWORD PTR [eax+edx-343485551]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	or	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [edx+36]
	lea	ecx, DWORD PTR [ecx+edx-343485551]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 104
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 105
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 106
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 107
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 108
	mov	esp, ebp
	pop	ebp
	ret	0
_MD5_Block ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MD5Final
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lenlo$ = -92						; size = 4
_lenhi$ = -88						; size = 4
_c$ = -80						; size = 64
_pad$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_output$ = 8						; size = 4
_s$ = 12						; size = 4
_MD5Final PROC
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 175
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+80], 56			; 00000038H
	jl	SHORT $LN5@MD5Final
; Line 176
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 120				; 00000078H
	sub	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR _pad$[ebp], edx
; Line 177
	jmp	SHORT $LN4@MD5Final
$LN5@MD5Final:
; Line 178
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 56					; 00000038H
	sub	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _pad$[ebp], ecx
$LN4@MD5Final:
; Line 180
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+84]
	shl	eax, 3
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	shr	edx, 29					; 0000001dH
	or	eax, edx
	mov	DWORD PTR _lenhi$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	shl	ecx, 3
	mov	DWORD PTR _lenlo$[ebp], ecx
; Line 183
	mov	edx, DWORD PTR _pad$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 184
	mov	BYTE PTR _c$[ebp], 128			; 00000080H
; Line 185
	mov	ecx, DWORD PTR _pad$[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 187
	mov	ecx, DWORD PTR _lenhi$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+7], cl
; Line 188
	mov	edx, DWORD PTR _lenhi$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+6], dl
; Line 189
	mov	eax, DWORD PTR _lenhi$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+5], al
; Line 190
	mov	ecx, DWORD PTR _lenhi$[ebp]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+4], cl
; Line 191
	mov	edx, DWORD PTR _lenlo$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+3], dl
; Line 192
	mov	eax, DWORD PTR _lenlo$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+2], al
; Line 193
	mov	ecx, DWORD PTR _lenlo$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+1], cl
; Line 194
	mov	edx, DWORD PTR _lenlo$[ebp]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp], dl
; Line 196
	push	8
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 198
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MD5Final
$LN2@MD5Final:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@MD5Final:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN6@MD5Final
; Line 199
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx+eax*4+3], dl
; Line 200
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	mov	BYTE PTR [eax+edx*4+2], cl
; Line 201
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [edx+ecx*4+1], al
; Line 202
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx+eax*4], dl
; Line 203
	jmp	SHORT $LN2@MD5Final
$LN6@MD5Final:
; Line 204
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@MD5Final
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@MD5Final:
	DD	1
	DD	$LN9@MD5Final
$LN9@MD5Final:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN8@MD5Final
$LN8@MD5Final:
	DB	99					; 00000063H
	DB	0
_MD5Final ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MD5Simple
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -100						; size = 92
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
_output$ = 16						; size = 4
_MD5Simple PROC
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 210
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_MD5Init
	add	esp, 4
; Line 211
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 212
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_MD5Final
	add	esp, 8
; Line 213
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MD5Simple
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@MD5Simple:
	DD	1
	DD	$LN4@MD5Simple
$LN4@MD5Simple:
	DD	-100					; ffffff9cH
	DD	92					; 0000005cH
	DD	$LN3@MD5Simple
$LN3@MD5Simple:
	DB	115					; 00000073H
	DB	0
_MD5Simple ENDP
_TEXT	ENDS
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hmacmd5_make_context PROC
; Line 224
	push	ebp
	mov	ebp, esp
; Line 225
	push	92					; 0000005cH
	push	3
	call	_safemalloc
	add	esp, 8
; Line 226
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_hmacmd5_make_context ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_hmacmd5_free_context PROC
; Line 229
	push	ebp
	mov	ebp, esp
; Line 230
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 231
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_hmacmd5_free_context ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_hmacmd5_key
EXTRN	_smemclr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -88						; size = 4
_key$ = -84						; size = 4
_foo$ = -76						; size = 64
_keys$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_keyv$ = 12						; size = 4
_len$ = 16						; size = 4
_hmacmd5_key PROC
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 235
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 237
	mov	ecx, DWORD PTR _keyv$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 240
	push	64					; 00000040H
	push	54					; 00000036H
	lea	edx, DWORD PTR _foo$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 241
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@hmacmd5_ke
$LN5@hmacmd5_ke:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@hmacmd5_ke:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@hmacmd5_ke
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN4@hmacmd5_ke
; Line 242
	mov	edx, DWORD PTR _key$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _foo$[ebp+ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _foo$[ebp+eax], dl
	jmp	SHORT $LN5@hmacmd5_ke
$LN4@hmacmd5_ke:
; Line 243
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	call	_MD5Init
	add	esp, 4
; Line 244
	push	64					; 00000040H
	lea	edx, DWORD PTR _foo$[ebp]
	push	edx
	mov	eax, DWORD PTR _keys$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 246
	push	64					; 00000040H
	push	92					; 0000005cH
	lea	ecx, DWORD PTR _foo$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 247
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@hmacmd5_ke
$LN2@hmacmd5_ke:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@hmacmd5_ke:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@hmacmd5_ke
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN1@hmacmd5_ke
; Line 248
	mov	ecx, DWORD PTR _key$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _foo$[ebp+eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _foo$[ebp+edx], cl
	jmp	SHORT $LN2@hmacmd5_ke
$LN1@hmacmd5_ke:
; Line 249
	mov	eax, DWORD PTR _keys$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	call	_MD5Init
	add	esp, 4
; Line 250
	push	64					; 00000040H
	lea	ecx, DWORD PTR _foo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keys$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 252
	push	64					; 00000040H
	lea	eax, DWORD PTR _foo$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 253
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@hmacmd5_ke
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@hmacmd5_ke:
	DD	1
	DD	$LN10@hmacmd5_ke
$LN10@hmacmd5_ke:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN9@hmacmd5_ke
$LN9@hmacmd5_ke:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	0
_hmacmd5_key ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_hmacmd5_key_16 PROC
; Line 256
	push	ebp
	mov	ebp, esp
; Line 257
	push	16					; 00000010H
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacmd5_key
	add	esp, 12					; 0000000cH
; Line 258
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_hmacmd5_key_16 ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_hmacmd5_start PROC
; Line 261
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 262
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 264
	mov	esi, DWORD PTR _keys$[ebp]
	mov	edi, DWORD PTR _keys$[ebp]
	add	edi, 184				; 000000b8H
	mov	ecx, 23					; 00000017H
	rep movsd
; Line 265
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_hmacmd5_start ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_hmacmd5_bytes PROC
; Line 268
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 269
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 270
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _keys$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 271
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hmacmd5_bytes ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_intermediate$ = -128					; size = 16
_s$ = -104						; size = 92
_keys$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacmd5_genresult PROC
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 33					; 00000021H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 275
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 279
	mov	esi, DWORD PTR _keys$[ebp]
	add	esi, 184				; 000000b8H
	mov	ecx, 23					; 00000017H
	lea	edi, DWORD PTR _s$[ebp]
	rep movsd
; Line 280
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	edx, DWORD PTR _intermediate$[ebp]
	push	edx
	call	_MD5Final
	add	esp, 8
; Line 281
	mov	esi, DWORD PTR _keys$[ebp]
	add	esi, 92					; 0000005cH
	mov	ecx, 23					; 00000017H
	lea	edi, DWORD PTR _s$[ebp]
	rep movsd
; Line 282
	push	16					; 00000010H
	lea	eax, DWORD PTR _intermediate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 283
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _hmac$[ebp]
	push	eax
	call	_MD5Final
	add	esp, 8
; Line 284
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@hmacmd5_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@hmacmd5_ge:
	DD	2
	DD	$LN5@hmacmd5_ge
$LN5@hmacmd5_ge:
	DD	-104					; ffffff98H
	DD	92					; 0000005cH
	DD	$LN3@hmacmd5_ge
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN4@hmacmd5_ge
$LN4@hmacmd5_ge:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN3@hmacmd5_ge:
	DB	115					; 00000073H
	DB	0
_hmacmd5_genresult ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacmd5_verresult PROC
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 289
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacmd5_genresult
	add	esp, 8
; Line 290
	push	16					; 00000010H
	mov	edx, DWORD PTR _hmac$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 291
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacmd5_ve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@hmacmd5_ve:
	DD	1
	DD	$LN4@hmacmd5_ve
$LN4@hmacmd5_ve:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@hmacmd5_ve
$LN3@hmacmd5_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_hmacmd5_verresult ENDP
_TEXT	ENDS
PUBLIC	_hmacmd5_do_hmac
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_hmac$ = 20						; size = 4
_hmacmd5_do_hmac PROC
; Line 306
	push	ebp
	mov	ebp, esp
; Line 307
	mov	eax, DWORD PTR _hmac$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacmd5_do_hmac_internal
	add	esp, 24					; 00000018H
; Line 308
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_hmacmd5_do_hmac ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_blk2$ = 20						; size = 4
_len2$ = 24						; size = 4
_hmac$ = 28						; size = 4
_hmacmd5_do_hmac_internal PROC
; Line 297
	push	ebp
	mov	ebp, esp
; Line 298
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacmd5_start
	add	esp, 4
; Line 299
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacmd5_bytes
	add	esp, 12					; 0000000cH
; Line 300
	cmp	DWORD PTR _blk2$[ebp], 0
	je	SHORT $LN1@hmacmd5_do
	mov	ecx, DWORD PTR _len2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk2$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacmd5_bytes
	add	esp, 12					; 0000000cH
$LN1@hmacmd5_do:
; Line 301
	mov	ecx, DWORD PTR _hmac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_hmacmd5_genresult
	add	esp, 8
; Line 302
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_hmacmd5_do_hmac_internal ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_hmacmd5_generate PROC
; Line 321
	push	ebp
	mov	ebp, esp
; Line 322
	mov	eax, DWORD PTR _blk$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacmd5_do_hmac_ssh
	add	esp, 20					; 00000014H
; Line 323
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_hmacmd5_generate ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_seqbuf$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_hmac$ = 24						; size = 4
_hmacmd5_do_hmac_ssh PROC
; Line 312
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 315
	mov	eax, DWORD PTR _seq$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _seqbuf$[ebp], al
	mov	ecx, DWORD PTR _seq$[ebp]
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _seqbuf$[ebp+1], cl
	mov	edx, DWORD PTR _seq$[ebp]
	shr	edx, 8
	mov	BYTE PTR _seqbuf$[ebp+2], dl
	mov	al, BYTE PTR _seq$[ebp]
	mov	BYTE PTR _seqbuf$[ebp+3], al
; Line 316
	mov	ecx, DWORD PTR _hmac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _seqbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_hmacmd5_do_hmac_internal
	add	esp, 24					; 00000018H
; Line 317
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacmd5_do@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@hmacmd5_do@2:
	DD	1
	DD	$LN4@hmacmd5_do@2
$LN4@hmacmd5_do@2:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@hmacmd5_do@2
$LN3@hmacmd5_do@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_hmacmd5_do_hmac_ssh ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_hmacmd5_verify PROC
; Line 327
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 329
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacmd5_do_hmac_ssh
	add	esp, 20					; 00000014H
; Line 330
	push	16					; 00000010H
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 331
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacmd5_ve@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@hmacmd5_ve@2:
	DD	1
	DD	$LN4@hmacmd5_ve@2
$LN4@hmacmd5_ve@2:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@hmacmd5_ve@2
$LN3@hmacmd5_ve@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_hmacmd5_verify ENDP
_TEXT	ENDS
END
