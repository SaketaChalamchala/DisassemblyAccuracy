; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\portfwd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?fn_table@?1??pfd_connect@@9@9 DD FLAT:_pfd_log		; `pfd_connect'::`2'::fn_table
	DD	FLAT:_pfd_closing
	DD	FLAT:_pfd_receive
	DD	FLAT:_pfd_sent
	DD	00H
?fn_table@?1??pfl_accepting@@9@9 DD FLAT:_pfd_log	; `pfl_accepting'::`2'::fn_table
	DD	FLAT:_pfd_closing
	DD	FLAT:_pfd_receive
	DD	FLAT:_pfd_sent
	DD	00H
?fn_table@?1??pfl_listen@@9@9 DD FLAT:_pfl_log		; `pfl_listen'::`2'::fn_table
	DD	FLAT:_pfl_closing
	DD	00H
	DD	00H
	DD	FLAT:_pfl_accepting
CONST	ENDS
_DATA	SEGMENT
$SG87209 DB	'%d.%d.%d.%d', 00H
$SG87249 DB	'%d.%d.%d.%d', 00H
$SG87261 DB	'forwarding', 00H
	ORG $+1
$SG87332 DB	'forwarding', 00H
_DATA	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\portfwd.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_plug$ = 8						; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_pfd_log PROC
; Line 110
	push	ebp
	mov	ebp, esp
; Line 112
	pop	ebp
	ret	0
_pfd_log ENDP
; Function compile flags: /Odtp /RTCsu
_plug$ = 8						; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_pfl_log PROC
; Line 116
	push	ebp
	mov	ebp, esp
; Line 118
	pop	ebp
	ret	0
_pfl_log ENDP
_TEXT	ENDS
PUBLIC	_pfd_close
EXTRN	_sshfwd_write_eof:PROC
EXTRN	_sshfwd_unclean_close:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pf$ = -4						; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_pfd_closing PROC
; Line 122
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 123
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _pf$[ebp], eax
; Line 125
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN5@pfd_closin
; Line 129
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@pfd_closin
; Line 130
	mov	edx, DWORD PTR _error_msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_sshfwd_unclean_close
	add	esp, 8
; Line 131
	jmp	SHORT $LN3@pfd_closin
$LN4@pfd_closin:
; Line 138
	mov	edx, DWORD PTR _pf$[ebp]
	push	edx
	call	_pfd_close
	add	esp, 4
$LN3@pfd_closin:
; Line 140
	jmp	SHORT $LN2@pfd_closin
$LN5@pfd_closin:
; Line 145
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@pfd_closin
; Line 146
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_sshfwd_write_eof
	add	esp, 4
$LN2@pfd_closin:
; Line 149
	mov	eax, 1
; Line 150
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfd_closing ENDP
_TEXT	ENDS
PUBLIC	_pfl_terminate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pl$ = -4						; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_pfl_closing PROC
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 155
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _pl$[ebp], eax
; Line 156
	mov	ecx, DWORD PTR _pl$[ebp]
	push	ecx
	call	_pfl_terminate
	add	esp, 4
; Line 157
	mov	eax, 1
; Line 158
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfl_closing ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_sshfwd_write:PROC
EXTRN	_ssh_send_port_open:PROC
EXTRN	_new_sock_channel:PROC
EXTRN	_safefree:PROC
EXTRN	_dupprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_safemalloc:PROC
EXTRN	_memset:PROC
EXTRN	_saferealloc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -80						; size = 4
_alen$87228 = -76					; size = 4
_atype$87227 = -72					; size = 4
_reply$87226 = -64					; size = 10
_data$87216 = -44					; size = 2
_method$87215 = -36					; size = 4
_i$87214 = -32						; size = 4
_len$87191 = -28					; size = 4
_data$87187 = -20					; size = 8
_pf$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_plug$ = 8						; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_pfd_receive PROC
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 162
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _pf$[ebp], eax
; Line 163
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	$LN41@pfd_receiv
$LN40@pfd_receiv:
; Line 164
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	cmp	DWORD PTR tv67[ebp], 0
	je	$LN39@pfd_receiv
; Line 165
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, DWORD PTR [edx+48]
	jl	SHORT $LN38@pfd_receiv
; Line 166
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	imul	eax, 5
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, 256				; 00000100H
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 167
	push	1
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN38@pfd_receiv:
; Line 169
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+edx], cl
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+44], eax
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx
; Line 176
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+28], 1
	je	SHORT $LN36@pfd_receiv
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sar	edx, 12					; 0000000cH
	cmp	edx, 4
	jne	$LN37@pfd_receiv
$LN36@pfd_receiv:
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 4
	jne	$LN37@pfd_receiv
; Line 180
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+28], 1
	jne	SHORT $LN35@pfd_receiv
; Line 181
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+28], 16384		; 00004000H
$LN35@pfd_receiv:
; Line 182
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+44], 2
	jge	SHORT $LN34@pfd_receiv
; Line 183
	jmp	$LN40@pfd_receiv
$LN34@pfd_receiv:
; Line 184
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 1
	je	SHORT $LN33@pfd_receiv
; Line 188
	push	8
	push	0
	lea	eax, DWORD PTR _data$87187[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 189
	mov	BYTE PTR _data$87187[ebp+1], 91		; 0000005bH
; Line 190
	mov	esi, esp
	push	8
	lea	ecx, DWORD PTR _data$87187[ebp]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 191
	mov	edx, DWORD PTR _pf$[ebp]
	push	edx
	call	_pfd_close
	add	esp, 4
; Line 192
	mov	eax, 1
	jmp	$LN42@pfd_receiv
$LN33@pfd_receiv:
; Line 194
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+44], 8
	jg	SHORT $LN32@pfd_receiv
; Line 195
	jmp	$LN40@pfd_receiv
$LN32@pfd_receiv:
; Line 196
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+edx-1]
	test	edx, edx
	je	SHORT $LN31@pfd_receiv
; Line 197
	jmp	$LN40@pfd_receiv
$LN31@pfd_receiv:
; Line 203
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	jne	$LN30@pfd_receiv
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+5]
	test	edx, edx
	jne	$LN30@pfd_receiv
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+6]
	test	edx, edx
	jne	$LN30@pfd_receiv
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+7]
	test	edx, edx
	je	$LN30@pfd_receiv
; Line 211
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+28], 16384		; 00004000H
	jne	SHORT $LN29@pfd_receiv
; Line 212
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+28], 16385		; 00004001H
; Line 213
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+44], 8
; Line 214
	jmp	$LN40@pfd_receiv
$LN29@pfd_receiv:
; Line 216
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	BYTE PTR [ecx], 0
; Line 217
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	BYTE PTR [eax+1], 90			; 0000005aH
; Line 218
	mov	esi, esp
	push	8
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 219
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 8
	mov	DWORD PTR _len$87191[ebp], ecx
; Line 220
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	edx, BYTE PTR [eax+3]
	or	ecx, edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 221
	push	1
	mov	ecx, DWORD PTR _len$87191[ebp]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 222
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _len$87191[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 223
	mov	eax, DWORD PTR _len$87191[ebp]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 224
	jmp	$connect$87199
; Line 225
	jmp	$LN37@pfd_receiv
$LN30@pfd_receiv:
; Line 231
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	BYTE PTR [eax], 0
; Line 232
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	BYTE PTR [edx+1], 90			; 0000005aH
; Line 233
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 234
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	edx, BYTE PTR [eax+3]
	or	ecx, edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 239
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx+7]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx+6]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx+5]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx+4]
	push	eax
	push	OFFSET $SG87209
	call	_dupprintf
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 240
	jmp	$connect$87199
$LN37@pfd_receiv:
; Line 245
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+28], 1
	je	SHORT $LN26@pfd_receiv
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sar	ecx, 12					; 0000000cH
	cmp	ecx, 5
	jne	$LN27@pfd_receiv
$LN26@pfd_receiv:
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 5
	jne	$LN27@pfd_receiv
; Line 249
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+28], 1
	jne	SHORT $LN25@pfd_receiv
; Line 250
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+28], 20480		; 00005000H
$LN25@pfd_receiv:
; Line 252
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+28], 20480		; 00005000H
	jne	$LN24@pfd_receiv
; Line 258
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+44], 2
	jge	SHORT $LN23@pfd_receiv
; Line 259
	jmp	$LN40@pfd_receiv
$LN23@pfd_receiv:
; Line 260
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, 2
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+44], edx
	jge	SHORT $LN22@pfd_receiv
; Line 261
	jmp	$LN40@pfd_receiv
$LN22@pfd_receiv:
; Line 262
	mov	DWORD PTR _method$87215[ebp], 255	; 000000ffH
; Line 263
	mov	DWORD PTR _i$87214[ebp], 0
	jmp	SHORT $LN21@pfd_receiv
$LN20@pfd_receiv:
	mov	ecx, DWORD PTR _i$87214[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$87214[ebp], ecx
$LN21@pfd_receiv:
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	DWORD PTR _i$87214[ebp], ecx
	jge	SHORT $LN19@pfd_receiv
; Line 264
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _i$87214[ebp]
	movsx	edx, BYTE PTR [eax+ecx+2]
	test	edx, edx
	jne	SHORT $LN18@pfd_receiv
; Line 265
	mov	DWORD PTR _method$87215[ebp], 0
; Line 266
	jmp	SHORT $LN19@pfd_receiv
$LN18@pfd_receiv:
; Line 267
	jmp	SHORT $LN20@pfd_receiv
$LN19@pfd_receiv:
; Line 268
	mov	BYTE PTR _data$87216[ebp], 5
; Line 269
	mov	al, BYTE PTR _method$87215[ebp]
	mov	BYTE PTR _data$87216[ebp+1], al
; Line 270
	mov	esi, esp
	push	2
	lea	ecx, DWORD PTR _data$87216[ebp]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 271
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+28], 20481		; 00005001H
; Line 272
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 273
	jmp	$LN40@pfd_receiv
$LN24@pfd_receiv:
; Line 276
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+28], 20481		; 00005001H
	jne	$LN27@pfd_receiv
; Line 281
	mov	DWORD PTR _alen$87228[ebp], 0
; Line 290
	push	10					; 0000000aH
	push	0
	lea	edx, DWORD PTR _reply$87226[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 291
	mov	BYTE PTR _reply$87226[ebp], 5
; Line 292
	mov	BYTE PTR _reply$87226[ebp+3], 1
; Line 294
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+44], 6
	jge	SHORT $LN16@pfd_receiv
	jmp	$LN40@pfd_receiv
$LN16@pfd_receiv:
; Line 295
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx+3]
	mov	DWORD PTR _atype$87227[ebp], eax
; Line 296
	cmp	DWORD PTR _atype$87227[ebp], 1
	jne	SHORT $LN15@pfd_receiv
; Line 297
	mov	DWORD PTR _alen$87228[ebp], 4
$LN15@pfd_receiv:
; Line 298
	cmp	DWORD PTR _atype$87227[ebp], 4
	jne	SHORT $LN14@pfd_receiv
; Line 299
	mov	DWORD PTR _alen$87228[ebp], 16		; 00000010H
$LN14@pfd_receiv:
; Line 300
	cmp	DWORD PTR _atype$87227[ebp], 3
	jne	SHORT $LN13@pfd_receiv
; Line 301
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx+4]
	add	eax, 1
	mov	DWORD PTR _alen$87228[ebp], eax
$LN13@pfd_receiv:
; Line 302
	mov	ecx, DWORD PTR _alen$87228[ebp]
	add	ecx, 6
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+44], ecx
	jge	SHORT $LN12@pfd_receiv
	jmp	$LN40@pfd_receiv
$LN12@pfd_receiv:
; Line 303
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 1
	jne	SHORT $LN10@pfd_receiv
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+2]
	test	edx, edx
	je	SHORT $LN11@pfd_receiv
$LN10@pfd_receiv:
; Line 305
	mov	BYTE PTR _reply$87226[ebp+1], 1
; Line 306
	mov	esi, esp
	push	10					; 0000000aH
	lea	eax, DWORD PTR _reply$87226[ebp]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 307
	mov	ecx, DWORD PTR _pf$[ebp]
	push	ecx
	call	_pfd_close
	add	esp, 4
; Line 308
	mov	eax, 1
	jmp	$LN42@pfd_receiv
$LN11@pfd_receiv:
; Line 314
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _alen$87228[ebp]
	movzx	edx, BYTE PTR [eax+ecx+4]
	shl	edx, 8
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR _alen$87228[ebp]
	movzx	ecx, BYTE PTR [ecx+eax+5]
	or	edx, ecx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 315
	cmp	DWORD PTR _atype$87227[ebp], 1
	jne	SHORT $LN9@pfd_receiv
; Line 317
	mov	esi, esp
	push	10					; 0000000aH
	lea	ecx, DWORD PTR _reply$87226[ebp]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 322
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+7]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+6]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+5]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	ecx, BYTE PTR [eax+4]
	push	ecx
	push	OFFSET $SG87249
	call	_dupprintf
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 323
	jmp	$connect$87199
	jmp	$LN27@pfd_receiv
$LN9@pfd_receiv:
; Line 324
	cmp	DWORD PTR _atype$87227[ebp], 3
	jne	SHORT $LN7@pfd_receiv
; Line 326
	mov	esi, esp
	push	10					; 0000000aH
	lea	eax, DWORD PTR _reply$87226[ebp]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 327
	push	1
	mov	ecx, DWORD PTR _alen$87228[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 328
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _alen$87228[ebp]
	mov	BYTE PTR [edx+ecx-1], 0
; Line 329
	mov	eax, DWORD PTR _alen$87228[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 330
	jmp	SHORT $connect$87199
; Line 331
	jmp	SHORT $LN27@pfd_receiv
$LN7@pfd_receiv:
; Line 335
	mov	BYTE PTR _reply$87226[ebp+1], 8
; Line 336
	mov	esi, esp
	push	10					; 0000000aH
	lea	edx, DWORD PTR _reply$87226[ebp]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 337
	mov	eax, DWORD PTR _pf$[ebp]
	push	eax
	call	_pfd_close
	add	esp, 4
; Line 338
	mov	eax, 1
	jmp	$LN42@pfd_receiv
$LN27@pfd_receiv:
; Line 349
	mov	ecx, DWORD PTR _pf$[ebp]
	push	ecx
	call	_pfd_close
	add	esp, 4
; Line 350
	mov	eax, 1
	jmp	$LN42@pfd_receiv
; Line 351
	jmp	$LN40@pfd_receiv
$LN39@pfd_receiv:
; Line 352
	mov	eax, 1
	jmp	$LN42@pfd_receiv
$connect$87199:
; Line 359
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_safefree
	add	esp, 4
; Line 360
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 366
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 368
	mov	edx, DWORD PTR _pf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_new_sock_channel
	add	esp, 8
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 369
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@pfd_receiv
; Line 370
	mov	ecx, DWORD PTR _pf$[ebp]
	push	ecx
	call	_pfd_close
	add	esp, 4
; Line 371
	mov	eax, 1
	jmp	$LN42@pfd_receiv
; Line 372
	jmp	SHORT $LN4@pfd_receiv
$LN5@pfd_receiv:
; Line 374
	push	OFFSET $SG87261
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ssh_send_port_open
	add	esp, 16					; 00000010H
$LN4@pfd_receiv:
; Line 376
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 382
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN41@pfd_receiv
; Line 383
	push	1
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 384
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 385
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN41@pfd_receiv:
; Line 388
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN2@pfd_receiv
; Line 389
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_sshfwd_write
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN2@pfd_receiv
; Line 390
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+16], 1
; Line 391
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@pfd_receiv:
; Line 394
	mov	eax, 1
$LN42@pfd_receiv:
; Line 395
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@pfd_receiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN56@pfd_receiv:
	DD	3
	DD	$LN55@pfd_receiv
$LN55@pfd_receiv:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN52@pfd_receiv
	DD	-44					; ffffffd4H
	DD	2
	DD	$LN53@pfd_receiv
	DD	-64					; ffffffc0H
	DD	10					; 0000000aH
	DD	$LN54@pfd_receiv
$LN54@pfd_receiv:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	0
$LN53@pfd_receiv:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN52@pfd_receiv:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_pfd_receive ENDP
_TEXT	ENDS
EXTRN	_sshfwd_unthrottle:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pf$ = -4						; size = 4
_plug$ = 8						; size = 4
_bufsize$ = 12						; size = 4
_pfd_sent PROC
; Line 398
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 399
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _pf$[ebp], eax
; Line 401
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@pfd_sent
; Line 402
	mov	edx, DWORD PTR _bufsize$[ebp]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_sshfwd_unthrottle
	add	esp, 8
$LN2@pfd_sent:
; Line 403
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfd_sent ENDP
_TEXT	ENDS
PUBLIC	_pfd_connect
EXTRN	_new_connection:PROC
EXTRN	_sk_addr_free:PROC
EXTRN	_dupstr:PROC
EXTRN	_sk_addr_error:PROC
EXTRN	_name_lookup:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err_ret$87303 = -32					; size = 4
_err_ret$87298 = -28					; size = 4
_pf$ = -24						; size = 4
_dummy_realhost$ = -16					; size = 4
_err$ = -8						; size = 4
_addr$ = -4						; size = 4
_pf_ret$ = 8						; size = 4
_hostname$ = 12						; size = 4
_port$ = 16						; size = 4
_c$ = 20						; size = 4
_conf$ = 24						; size = 4
_addressfamily$ = 28					; size = 4
_pfd_connect PROC
; Line 414
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 431
	mov	eax, DWORD PTR _addressfamily$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dummy_realhost$[ebp]
	push	edx
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hostname$[ebp]
	push	ecx
	call	_name_lookup
	add	esp, 20					; 00000014H
	mov	DWORD PTR _addr$[ebp], eax
; Line 432
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_addr_error
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN2@pfd_connec
; Line 433
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _err_ret$87298[ebp], eax
; Line 434
	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	_sk_addr_free
	add	esp, 4
; Line 435
	mov	edx, DWORD PTR _dummy_realhost$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 436
	mov	eax, DWORD PTR _err_ret$87298[ebp]
	jmp	$LN3@pfd_connec
$LN2@pfd_connec:
; Line 442
	call	_new_portfwd_state
	mov	ecx, DWORD PTR _pf_ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pf_ret$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pf$[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?fn_table@?1??pfd_connect@@9@9
; Line 444
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 445
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+24], 1
; Line 446
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 447
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 448
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 451
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	push	ecx
	push	0
	push	0
	push	1
	push	0
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _dummy_realhost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	_new_connection
	add	esp, 36					; 00000024H
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 452
	mov	eax, DWORD PTR _dummy_realhost$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 453
	mov	esi, esp
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@pfd_connec
; Line 454
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _err_ret$87303[ebp], eax
; Line 455
	mov	esi, esp
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 456
	mov	edx, DWORD PTR _pf$[ebp]
	push	edx
	call	_free_portfwd_state
	add	esp, 4
; Line 457
	mov	eax, DWORD PTR _pf_ret$[ebp]
	mov	DWORD PTR [eax], 0
; Line 458
	mov	eax, DWORD PTR _err_ret$87303[ebp]
	jmp	SHORT $LN3@pfd_connec
$LN1@pfd_connec:
; Line 461
	xor	eax, eax
$LN3@pfd_connec:
; Line 462
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@pfd_connec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@pfd_connec:
	DD	1
	DD	$LN6@pfd_connec
$LN6@pfd_connec:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN5@pfd_connec
$LN5@pfd_connec:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_pfd_connect ENDP
; Function compile flags: /Odtp /RTCsu
_pf$ = -4						; size = 4
_new_portfwd_state PROC
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	push	60					; 0000003cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pf$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 77
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 78
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+48], 0
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 79
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+52], 0
; Line 80
	mov	eax, DWORD PTR _pf$[ebp]
; Line 81
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_new_portfwd_state ENDP
; Function compile flags: /Odtp /RTCsu
_pf$ = 8						; size = 4
_free_portfwd_state PROC
; Line 84
	push	ebp
	mov	ebp, esp
; Line 85
	cmp	DWORD PTR _pf$[ebp], 0
	jne	SHORT $LN1@free_portf
; Line 86
	jmp	SHORT $LN2@free_portf
$LN1@free_portf:
; Line 87
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 88
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_safefree
	add	esp, 4
; Line 89
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_safefree
	add	esp, 4
; Line 90
	mov	eax, DWORD PTR _pf$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN2@free_portf:
; Line 91
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_free_portfwd_state ENDP
; Function compile flags: /Odtp /RTCsu
_err$ = -16						; size = 4
_s$ = -12						; size = 4
_pl$ = -8						; size = 4
_pf$ = -4						; size = 4
_p$ = 8							; size = 4
_constructor$ = 12					; size = 4
_ctx$ = 16						; size = 4
_pfl_accepting PROC
; Line 469
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 482
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pl$[ebp], eax
; Line 483
	call	_new_portfwd_state
	mov	DWORD PTR _pf$[ebp], eax
; Line 484
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?fn_table@?1??pfl_accepting@@9@9
; Line 486
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 487
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 489
	mov	esi, esp
	mov	eax, DWORD PTR _pf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	DWORD PTR _constructor$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$[ebp], eax
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 490
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN5@pfl_accept
; Line 491
	mov	edx, DWORD PTR _pf$[ebp]
	push	edx
	call	_free_portfwd_state
	add	esp, 4
; Line 492
	xor	eax, eax
	cmp	DWORD PTR _err$[ebp], 0
	setne	al
	jmp	$LN6@pfl_accept
$LN5@pfl_accept:
; Line 495
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 496
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 498
	mov	eax, DWORD PTR _pl$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@pfl_accept
; Line 499
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 500
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 501
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 502
	jmp	$LN3@pfl_accept
$LN4@pfl_accept:
; Line 503
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 504
	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 505
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+36], ecx
; Line 506
	mov	edx, DWORD PTR _pf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_new_sock_channel
	add	esp, 8
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 508
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@pfl_accept
; Line 509
	mov	ecx, DWORD PTR _pf$[ebp]
	push	ecx
	call	_free_portfwd_state
	add	esp, 4
; Line 510
	mov	eax, 1
	jmp	SHORT $LN6@pfl_accept
; Line 511
	jmp	SHORT $LN3@pfl_accept
$LN2@pfl_accept:
; Line 513
	push	OFFSET $SG87332
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ssh_send_port_open
	add	esp, 16					; 00000010H
$LN3@pfl_accept:
; Line 517
	xor	eax, eax
$LN6@pfl_accept:
; Line 518
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfl_accepting ENDP
_TEXT	ENDS
PUBLIC	_pfl_listen
EXTRN	_new_listener:PROC
EXTRN	_conf_get_int:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err_ret$87361 = -12					; size = 4
_pl$ = -8						; size = 4
_err$ = -4						; size = 4
_desthost$ = 8						; size = 4
_destport$ = 12						; size = 4
_srcaddr$ = 16						; size = 4
_port$ = 20						; size = 4
_backhandle$ = 24					; size = 4
_conf$ = 28						; size = 4
_pl_ret$ = 32						; size = 4
_address_family$ = 36					; size = 4
_pfl_listen PROC
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 545
	call	_new_portlistener_state
	mov	ecx, DWORD PTR _pl_ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pl_ret$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pl$[ebp], eax
; Line 546
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?fn_table@?1??pfl_listen@@9@9
; Line 547
	cmp	DWORD PTR _desthost$[ebp], 0
	je	SHORT $LN3@pfl_listen
; Line 548
	mov	edx, DWORD PTR _desthost$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 549
	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR _destport$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 550
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 551
	jmp	SHORT $LN2@pfl_listen
$LN3@pfl_listen:
; Line 552
	mov	edx, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN2@pfl_listen:
; Line 553
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR _backhandle$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 557
	mov	edx, DWORD PTR _address_family$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	push	148					; 00000094H
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
	push	eax
	mov	edx, DWORD PTR _pl$[ebp]
	push	edx
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcaddr$[ebp]
	push	ecx
	call	_new_listener
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 558
	mov	esi, esp
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@pfl_listen
; Line 559
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _err_ret$87361[ebp], eax
; Line 560
	mov	esi, esp
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 561
	mov	ecx, DWORD PTR _pl$[ebp]
	push	ecx
	call	_free_portlistener_state
	add	esp, 4
; Line 562
	mov	edx, DWORD PTR _pl_ret$[ebp]
	mov	DWORD PTR [edx], 0
; Line 563
	mov	eax, DWORD PTR _err_ret$87361[ebp]
	jmp	SHORT $LN4@pfl_listen
$LN1@pfl_listen:
; Line 566
	xor	eax, eax
$LN4@pfl_listen:
; Line 567
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfl_listen ENDP
; Function compile flags: /Odtp /RTCsu
_pl$ = -4						; size = 4
_new_portlistener_state PROC
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 95
	push	24					; 00000018H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pl$[ebp], eax
; Line 96
	mov	eax, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 97
	mov	eax, DWORD PTR _pl$[ebp]
; Line 98
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_new_portlistener_state ENDP
; Function compile flags: /Odtp /RTCsu
_pl$ = 8						; size = 4
_free_portlistener_state PROC
; Line 101
	push	ebp
	mov	ebp, esp
; Line 102
	cmp	DWORD PTR _pl$[ebp], 0
	jne	SHORT $LN1@free_portl
; Line 103
	jmp	SHORT $LN2@free_portl
$LN1@free_portl:
; Line 104
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 105
	mov	edx, DWORD PTR _pl$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN2@free_portl:
; Line 106
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_free_portlistener_state ENDP
; Function compile flags: /Odtp /RTCsu
_pf$ = 8						; size = 4
_pfd_close PROC
; Line 570
	push	ebp
	mov	ebp, esp
	push	esi
; Line 571
	cmp	DWORD PTR _pf$[ebp], 0
	jne	SHORT $LN1@pfd_close
; Line 572
	jmp	SHORT $LN2@pfd_close
$LN1@pfd_close:
; Line 574
	mov	esi, esp
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 575
	mov	eax, DWORD PTR _pf$[ebp]
	push	eax
	call	_free_portfwd_state
	add	esp, 4
$LN2@pfd_close:
; Line 576
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfd_close ENDP
; Function compile flags: /Odtp /RTCsu
_pl$ = 8						; size = 4
_pfl_terminate PROC
; Line 582
	push	ebp
	mov	ebp, esp
	push	esi
; Line 583
	cmp	DWORD PTR _pl$[ebp], 0
	jne	SHORT $LN1@pfl_termin
; Line 584
	jmp	SHORT $LN2@pfl_termin
$LN1@pfl_termin:
; Line 586
	mov	esi, esp
	mov	eax, DWORD PTR _pl$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pl$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 587
	mov	eax, DWORD PTR _pl$[ebp]
	push	eax
	call	_free_portlistener_state
	add	esp, 4
$LN2@pfl_termin:
; Line 588
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfl_terminate ENDP
_TEXT	ENDS
PUBLIC	_pfd_unthrottle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -4						; size = 4
_pf$ = 8						; size = 4
_pfd_unthrottle PROC
; Line 591
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 592
	cmp	DWORD PTR _pf$[ebp], 0
	jne	SHORT $LN1@pfd_unthro
; Line 593
	jmp	SHORT $LN2@pfd_unthro
$LN1@pfd_unthro:
; Line 595
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 596
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN4@pfd_unthro
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN4@pfd_unthro
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@pfd_unthro
$LN4@pfd_unthro:
	mov	DWORD PTR tv73[ebp], 1
$LN5@pfd_unthro:
	mov	esi, esp
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@pfd_unthro:
; Line 597
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfd_unthrottle ENDP
_TEXT	ENDS
PUBLIC	_pfd_override_throttle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -4						; size = 4
_pf$ = 8						; size = 4
_enable$ = 12						; size = 4
_pfd_override_throttle PROC
; Line 600
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 601
	cmp	DWORD PTR _pf$[ebp], 0
	jne	SHORT $LN1@pfd_overri
; Line 602
	jmp	SHORT $LN2@pfd_overri
$LN1@pfd_overri:
; Line 604
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR _enable$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 605
	mov	edx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN4@pfd_overri
	mov	eax, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@pfd_overri
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@pfd_overri
$LN4@pfd_overri:
	mov	DWORD PTR tv73[ebp], 1
$LN5@pfd_overri:
	mov	esi, esp
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@pfd_overri:
; Line 606
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pfd_override_throttle ENDP
_TEXT	ENDS
PUBLIC	_pfd_send
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pf$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_pfd_send PROC
; Line 612
	push	ebp
	mov	ebp, esp
	push	esi
; Line 613
	cmp	DWORD PTR _pf$[ebp], 0
	jne	SHORT $LN1@pfd_send
; Line 614
	xor	eax, eax
	jmp	SHORT $LN2@pfd_send
$LN1@pfd_send:
; Line 615
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@pfd_send:
; Line 616
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfd_send ENDP
_TEXT	ENDS
PUBLIC	_pfd_send_eof
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pf$ = 8						; size = 4
_pfd_send_eof PROC
; Line 619
	push	ebp
	mov	ebp, esp
	push	esi
; Line 620
	mov	esi, esp
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 621
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfd_send_eof ENDP
_TEXT	ENDS
PUBLIC	_pfd_confirm
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pf$ = 8						; size = 4
_pfd_confirm PROC
; Line 624
	push	ebp
	mov	ebp, esp
	push	esi
; Line 625
	cmp	DWORD PTR _pf$[ebp], 0
	jne	SHORT $LN2@pfd_confir
; Line 626
	jmp	$LN3@pfd_confir
$LN2@pfd_confir:
; Line 628
	mov	eax, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [eax+24], 1
; Line 629
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 630
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 631
	mov	ecx, DWORD PTR _pf$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN3@pfd_confir
; Line 632
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_sshfwd_write
	add	esp, 12					; 0000000cH
; Line 633
	mov	edx, DWORD PTR _pf$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_safefree
	add	esp, 4
; Line 634
	mov	ecx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN3@pfd_confir:
; Line 636
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pfd_confirm ENDP
_TEXT	ENDS
END
