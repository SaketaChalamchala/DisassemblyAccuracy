; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshrsa.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh_rsa
PUBLIC	_ssh_rsa_kex
EXTRN	_ssh_sha256:BYTE
EXTRN	_ssh_sha1:BYTE
_BSS	SEGMENT
$SG7348	DB	01H DUP (?)
$SG7697	DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?hex@?1??rsastr_fmt@@9@9 DB '0123456789abcdef', 00H	; `rsastr_fmt'::`2'::hex
	ORG $+3
_asn1_weird_stuff DB 00H
	DB	030H
	DB	021H
	DB	030H
	DB	09H
	DB	06H
	DB	05H
	DB	02bH
	DB	0eH
	DB	03H
	DB	02H
	DB	01aH
	DB	05H
	DB	00H
	DB	04H
	DB	014H
_ssh_rsa DD	FLAT:_rsa2_newkey
	DD	FLAT:_rsa2_freekey
	DD	FLAT:_rsa2_fmtkey
	DD	FLAT:_rsa2_public_blob
	DD	FLAT:_rsa2_private_blob
	DD	FLAT:_rsa2_createkey
	DD	FLAT:_rsa2_openssh_createkey
	DD	FLAT:_rsa2_openssh_fmtkey
	DD	FLAT:_rsa2_pubkey_bits
	DD	FLAT:_rsa2_fingerprint
	DD	FLAT:_rsa2_verifysig
	DD	FLAT:_rsa2_sign
	DD	FLAT:$SG7796
	DD	FLAT:$SG7797
_ssh_rsa_kex_sha1 DD FLAT:$SG7879
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ssh_sha1
_ssh_rsa_kex_sha256 DD FLAT:$SG7884
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ssh_sha256
_rsa_kex_list DD FLAT:_ssh_rsa_kex_sha256
	DD	FLAT:_ssh_rsa_kex_sha1
_ssh_rsa_kex DD	02H
	DD	FLAT:_rsa_kex_list
CONST	ENDS
_DATA	SEGMENT
$SG7284	DB	'RSA deterministic blinding', 00H
	ORG $+1
$SG7312	DB	'0x', 00H
	ORG $+1
$SG7317	DB	',0x', 00H
$SG7343	DB	'%d ', 00H
$SG7347	DB	':', 00H
	ORG $+2
$SG7349	DB	'%s%02x', 00H
	ORG $+1
$SG7454	DB	'ssh-rsa', 00H
$SG7497	DB	'ssh-rsa', 00H
$SG7513	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 's', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7514	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'b', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG7562	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 's', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7563	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'b', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG7675	DB	00H, 00H, 00H, 07H, 'ssh-rsa', 00H
$SG7692	DB	'ssh-rsa %d ', 00H
$SG7696	DB	':', 00H
	ORG $+2
$SG7698	DB	'%s%02x', 00H
	ORG $+1
$SG7728	DB	'ssh-rsa', 00H
$SG7767	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 's', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7768	DB	'1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'n', 00H
	DB	'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, '2', 00H, '0', 00H, ' ', 00H, '-', 00H, ' ', 00H
	DB	'A', 00H, 'S', 00H, 'N', 00H, '1', 00H, '_', 00H, 'L', 00H, 'E'
	DB	00H, 'N', 00H, 00H, 00H
$SG7788	DB	'ssh-rsa', 00H
$SG7796	DB	'ssh-rsa', 00H
$SG7797	DB	'rsa2', 00H
	ORG $+3
$SG7835	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 's', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7836	DB	'h', 00H, '-', 00H, '>', 00H, 'h', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'S'
	DB	00H, 'H', 00H, '2', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'X', 00H
	DB	'_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, '_', 00H, 'H', 00H, 'A'
	DB	00H, 'S', 00H, 'H', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'N', 00H
	DB	00H, 00H
	ORG $+2
$SG7866	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 's', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7867	DB	'i', 00H, 'n', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'k', 00H, ' ', 00H, '-', 00H, ' '
	DB	00H, '2', 00H, '*', 00H, 'H', 00H, 'L', 00H, 'E', 00H, 'N', 00H
	DB	' ', 00H, '-', 00H, ' ', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG7869	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'r'
	DB	00H, 's', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7870	DB	'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'k', 00H, 00H, 00H
$SG7879	DB	'rsa1024-sha1', 00H
	ORG $+3
$SG7884	DB	'rsa2048-sha256', 00H
_DATA	ENDS
PUBLIC	_makekey
EXTRN	_bignum_bitcount:PROC
EXTRN	_ssh1_read_bignum:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshrsa.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv141 = -24						; size = 4
tv88 = -20						; size = 4
tv78 = -16						; size = 4
_n$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_result$ = 16						; size = 4
_keystr$ = 20						; size = 4
_order$ = 24						; size = 4
_makekey PROC
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 16
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 19
	cmp	DWORD PTR _len$[ebp], 4
	jge	SHORT $LN14@makekey
; Line 20
	or	eax, -1
	jmp	$LN15@makekey
$LN14@makekey:
; Line 22
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@makekey
; Line 23
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 24
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@makekey
$LN11@makekey:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@makekey:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN10@makekey
; Line 25
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	add	ecx, eax
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN11@makekey
$LN10@makekey:
; Line 26
	jmp	SHORT $LN9@makekey
$LN13@makekey:
; Line 27
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
$LN9@makekey:
; Line 29
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 4
	mov	DWORD PTR _len$[ebp], edx
; Line 37
	cmp	DWORD PTR _order$[ebp], 0
	jne	SHORT $LN8@makekey
; Line 38
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@makekey
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN18@makekey
$LN17@makekey:
	mov	DWORD PTR tv78[ebp], 0
$LN18@makekey:
	mov	ecx, DWORD PTR tv78[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
; Line 39
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN7@makekey
	or	eax, -1
	jmp	$LN15@makekey
$LN7@makekey:
; Line 40
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 41
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _len$[ebp], edx
$LN8@makekey:
; Line 44
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@makekey
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 8
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN20@makekey
$LN19@makekey:
	mov	DWORD PTR tv88[ebp], 0
$LN20@makekey:
	mov	ecx, DWORD PTR tv88[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
; Line 45
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN5@makekey
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@makekey
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@makekey
$LN5@makekey:
	or	eax, -1
	jmp	$LN15@makekey
$LN6@makekey:
; Line 46
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@makekey
; Line 47
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 2
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@makekey:
; Line 48
	cmp	DWORD PTR _keystr$[ebp], 0
	je	SHORT $LN3@makekey
; Line 49
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	eax, DWORD PTR _keystr$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@makekey:
; Line 50
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 51
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 53
	cmp	DWORD PTR _order$[ebp], 1
	jne	SHORT $LN2@makekey
; Line 54
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@makekey
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN22@makekey
$LN21@makekey:
	mov	DWORD PTR tv141[ebp], 0
$LN22@makekey:
	mov	ecx, DWORD PTR tv141[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
; Line 55
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@makekey
	or	eax, -1
	jmp	SHORT $LN15@makekey
$LN1@makekey:
; Line 56
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 57
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _len$[ebp], edx
$LN2@makekey:
; Line 59
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _data$[ebp]
$LN15@makekey:
; Line 60
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_makekey ENDP
_TEXT	ENDS
PUBLIC	_makeprivate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_result$ = 16						; size = 4
_makeprivate PROC
; Line 63
	push	ebp
	mov	ebp, esp
; Line 64
	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
; Line 65
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_makeprivate ENDP
_TEXT	ENDS
PUBLIC	_rsaencrypt
EXTRN	_freebn:PROC
EXTRN	_bignum_byte:PROC
EXTRN	_modpow:PROC
EXTRN	_bignum_from_bytes:PROC
EXTRN	_random_byte:PROC
EXTRN	_memmove:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv133 = -20						; size = 4
_p$ = -16						; size = 4
_i$ = -12						; size = 4
_b2$ = -8						; size = 4
_b1$ = -4						; size = 4
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_key$ = 16						; size = 4
_rsaencrypt PROC
; Line 68
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 73
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jge	SHORT $LN9@rsaencrypt
; Line 74
	xor	eax, eax
	jmp	$LN10@rsaencrypt
$LN9@rsaencrypt:
; Line 76
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _length$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 77
	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax], 0
; Line 78
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx+1], 2
; Line 80
	mov	DWORD PTR _i$[ebp], 2
	jmp	SHORT $LN8@rsaencrypt
$LN7@rsaencrypt:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@rsaencrypt:
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _length$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN6@rsaencrypt
$LN5@rsaencrypt:
; Line 82
	call	_random_byte
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], al
; Line 83
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@rsaencrypt
; Line 84
	jmp	SHORT $LN7@rsaencrypt
$LN6@rsaencrypt:
; Line 85
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx+eax-1], 0
; Line 87
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _b1$[ebp], eax
; Line 89
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b2$[ebp], eax
; Line 91
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 92
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
$LN2@rsaencrypt:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv133[ebp], 0
	je	SHORT $LN1@rsaencrypt
; Line 93
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b2$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 94
	jmp	SHORT $LN2@rsaencrypt
$LN1@rsaencrypt:
; Line 96
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 97
	mov	edx, DWORD PTR _b2$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 99
	mov	eax, 1
$LN10@rsaencrypt:
; Line 100
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsaencrypt ENDP
_TEXT	ENDS
PUBLIC	_crt_modpow
EXTRN	_bigmuladd:PROC
EXTRN	_bigmul:PROC
EXTRN	_bigsub:PROC
EXTRN	_bigadd:PROC
EXTRN	_bignum_cmp:PROC
EXTRN	_bigmod:PROC
EXTRN	_decbn:PROC
EXTRN	_copybn:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tmp$7250 = -44						; size = 4
_ret$ = -40						; size = 4
_ret0$ = -36						; size = 4
_multiplier$ = -32					; size = 4
_diff$ = -28						; size = 4
_qresult$ = -24						; size = 4
_presult$ = -20						; size = 4
_qexp$ = -16						; size = 4
_pexp$ = -12						; size = 4
_qm1$ = -8						; size = 4
_pm1$ = -4						; size = 4
_base$ = 8						; size = 4
_exp$ = 12						; size = 4
_mod$ = 16						; size = 4
_p$ = 20						; size = 4
_q$ = 24						; size = 4
_iqmp$ = 28						; size = 4
_crt_modpow PROC
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 132
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _pm1$[ebp], eax
; Line 133
	mov	ecx, DWORD PTR _pm1$[ebp]
	push	ecx
	call	_decbn
	add	esp, 4
; Line 134
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _qm1$[ebp], eax
; Line 135
	mov	eax, DWORD PTR _qm1$[ebp]
	push	eax
	call	_decbn
	add	esp, 4
; Line 136
	mov	ecx, DWORD PTR _pm1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _exp$[ebp]
	push	edx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _pexp$[ebp], eax
; Line 137
	mov	eax, DWORD PTR _qm1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exp$[ebp]
	push	ecx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _qexp$[ebp], eax
; Line 142
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _pexp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _presult$[ebp], eax
; Line 143
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _qexp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _qresult$[ebp], eax
; Line 155
	mov	edx, DWORD PTR _qresult$[ebp]
	push	edx
	mov	eax, DWORD PTR _presult$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN1@crt_modpow
; Line 160
	mov	ecx, DWORD PTR _presult$[ebp]
	mov	DWORD PTR _tmp$7250[ebp], ecx
; Line 161
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _presult$[ebp]
	push	eax
	call	_bigadd
	add	esp, 8
	mov	DWORD PTR _presult$[ebp], eax
; Line 162
	mov	ecx, DWORD PTR _tmp$7250[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
$LN1@crt_modpow:
; Line 164
	mov	edx, DWORD PTR _qresult$[ebp]
	push	edx
	mov	eax, DWORD PTR _presult$[ebp]
	push	eax
	call	_bigsub
	add	esp, 8
	mov	DWORD PTR _diff$[ebp], eax
; Line 165
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iqmp$[ebp]
	push	edx
	call	_bigmul
	add	esp, 8
	mov	DWORD PTR _multiplier$[ebp], eax
; Line 166
	mov	eax, DWORD PTR _qresult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _diff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _multiplier$[ebp]
	push	edx
	call	_bigmuladd
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret0$[ebp], eax
; Line 171
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret0$[ebp]
	push	ecx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 176
	mov	edx, DWORD PTR _pm1$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 177
	mov	eax, DWORD PTR _qm1$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 178
	mov	ecx, DWORD PTR _pexp$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 179
	mov	edx, DWORD PTR _qexp$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 180
	mov	eax, DWORD PTR _presult$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 181
	mov	ecx, DWORD PTR _qresult$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 182
	mov	edx, DWORD PTR _diff$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 183
	mov	eax, DWORD PTR _multiplier$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 184
	mov	ecx, DWORD PTR _ret0$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 186
	mov	eax, DWORD PTR _ret$[ebp]
; Line 187
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_crt_modpow ENDP
_TEXT	ENDS
PUBLIC	_rsadecrypt
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_input$ = 8						; size = 4
_key$ = 12						; size = 4
_rsadecrypt PROC
; Line 322
	push	ebp
	mov	ebp, esp
; Line 323
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_rsa_privkey_op
	add	esp, 8
; Line 324
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_rsadecrypt ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_modmul:PROC
EXTRN	_modinv:PROC
EXTRN	_Zero:DWORD
EXTRN	_bn_restore_invariant:PROC
EXTRN	_bignum_set_bit:PROC
EXTRN	_SHA512_Final:PROC
EXTRN	_SHA512_Bytes:PROC
EXTRN	_SHA512_Init:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -360						; size = 4
_seqbuf$7279 = -352					; size = 4
_v$7273 = -344						; size = 4
_bitsleft$7272 = -340					; size = 4
_byte$7271 = -336					; size = 4
_bits$7270 = -332					; size = 4
_hashseq$ = -328					; size = 4
_digestused$ = -324					; size = 4
_digest512$ = -316					; size = 64
_ss$ = -244						; size = 212
_ret$ = -28						; size = 4
_ret_blinded$ = -24					; size = 4
_input_blinded$ = -20					; size = 4
_random_inverse$ = -16					; size = 4
_random_encrypted$ = -12				; size = 4
_random$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 4
_key$ = 12						; size = 4
_rsa_privkey_op PROC
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 203
	mov	DWORD PTR _digestused$[ebp], 64		; 00000040H
; Line 204
	mov	DWORD PTR _hashseq$[ebp], 0
$LN9@rsa_privke:
; Line 221
	mov	eax, 1
	test	eax, eax
	je	$LN8@rsa_privke
; Line 223
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _random$[ebp], eax
; Line 229
	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	mov	DWORD PTR _bits$7270[ebp], eax
; Line 230
	mov	DWORD PTR _byte$7271[ebp], 0
; Line 231
	mov	DWORD PTR _bitsleft$7272[ebp], 0
$LN7@rsa_privke:
; Line 232
	mov	ecx, DWORD PTR _bits$7270[ebp]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _bits$7270[ebp]
	sub	edx, 1
	mov	DWORD PTR _bits$7270[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	$LN6@rsa_privke
; Line 233
	cmp	DWORD PTR _bitsleft$7272[ebp], 0
	jg	$LN5@rsa_privke
; Line 234
	mov	DWORD PTR _bitsleft$7272[ebp], 8
; Line 239
	cmp	DWORD PTR _digestused$[ebp], 64		; 00000040H
	jb	$LN4@rsa_privke
; Line 241
	mov	eax, DWORD PTR _hashseq$[ebp]
	sar	eax, 24					; 00000018H
	mov	BYTE PTR _seqbuf$7279[ebp], al
	mov	ecx, DWORD PTR _hashseq$[ebp]
	sar	ecx, 16					; 00000010H
	mov	BYTE PTR _seqbuf$7279[ebp+1], cl
	mov	edx, DWORD PTR _hashseq$[ebp]
	sar	edx, 8
	mov	BYTE PTR _seqbuf$7279[ebp+2], dl
	mov	al, BYTE PTR _hashseq$[ebp]
	mov	BYTE PTR _seqbuf$7279[ebp+3], al
; Line 242
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_SHA512_Init
	add	esp, 4
; Line 243
	push	26					; 0000001aH
	push	OFFSET $SG7284
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 244
	push	4
	lea	eax, DWORD PTR _seqbuf$7279[ebp]
	push	eax
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 245
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_sha512_mpint
	add	esp, 8
; Line 246
	lea	edx, DWORD PTR _digest512$[ebp]
	push	edx
	lea	eax, DWORD PTR _ss$[ebp]
	push	eax
	call	_SHA512_Final
	add	esp, 8
; Line 247
	mov	ecx, DWORD PTR _hashseq$[ebp]
	add	ecx, 1
	mov	DWORD PTR _hashseq$[ebp], ecx
; Line 253
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_SHA512_Init
	add	esp, 4
; Line 254
	push	64					; 00000040H
	lea	eax, DWORD PTR _digest512$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 255
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	lea	eax, DWORD PTR _ss$[ebp]
	push	eax
	call	_sha512_mpint
	add	esp, 8
; Line 256
	lea	ecx, DWORD PTR _digest512$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_SHA512_Final
	add	esp, 8
; Line 258
	mov	DWORD PTR _digestused$[ebp], 0
$LN4@rsa_privke:
; Line 260
	mov	eax, DWORD PTR _digestused$[ebp]
	movzx	ecx, BYTE PTR _digest512$[ebp+eax]
	mov	DWORD PTR _byte$7271[ebp], ecx
	mov	edx, DWORD PTR _digestused$[ebp]
	add	edx, 1
	mov	DWORD PTR _digestused$[ebp], edx
$LN5@rsa_privke:
; Line 262
	mov	eax, DWORD PTR _byte$7271[ebp]
	and	eax, 1
	mov	DWORD PTR _v$7273[ebp], eax
; Line 263
	mov	ecx, DWORD PTR _byte$7271[ebp]
	sar	ecx, 1
	mov	DWORD PTR _byte$7271[ebp], ecx
; Line 264
	mov	edx, DWORD PTR _bitsleft$7272[ebp]
	sub	edx, 1
	mov	DWORD PTR _bitsleft$7272[ebp], edx
; Line 265
	mov	eax, DWORD PTR _v$7273[ebp]
	push	eax
	mov	ecx, DWORD PTR _bits$7270[ebp]
	push	ecx
	mov	edx, DWORD PTR _random$[ebp]
	push	edx
	call	_bignum_set_bit
	add	esp, 12					; 0000000cH
; Line 266
	jmp	$LN7@rsa_privke
$LN6@rsa_privke:
; Line 267
	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	call	_bn_restore_invariant
	add	esp, 4
; Line 274
	mov	ecx, DWORD PTR _Zero
	push	ecx
	mov	edx, DWORD PTR _random$[ebp]
	push	edx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN2@rsa_privke
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _random$[ebp]
	push	edx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN3@rsa_privke
$LN2@rsa_privke:
; Line 275
	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 276
	jmp	$LN9@rsa_privke
$LN3@rsa_privke:
; Line 282
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	call	_modinv
	add	esp, 8
	mov	DWORD PTR _random_inverse$[ebp], eax
; Line 283
	cmp	DWORD PTR _random_inverse$[ebp], 0
	jne	SHORT $LN1@rsa_privke
; Line 284
	mov	ecx, DWORD PTR _random$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 285
	jmp	$LN9@rsa_privke
$LN1@rsa_privke:
; Line 288
	jmp	SHORT $LN8@rsa_privke
; Line 289
	jmp	$LN9@rsa_privke
$LN8@rsa_privke:
; Line 306
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	call	_crt_modpow
	add	esp, 24					; 00000018H
	mov	DWORD PTR _random_encrypted$[ebp], eax
; Line 307
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _random_encrypted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _input_blinded$[ebp], eax
; Line 309
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _input_blinded$[ebp]
	push	eax
	call	_crt_modpow
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret_blinded$[ebp], eax
; Line 310
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _random_inverse$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret_blinded$[ebp]
	push	ecx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
; Line 312
	mov	edx, DWORD PTR _ret_blinded$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 313
	mov	eax, DWORD PTR _input_blinded$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 314
	mov	ecx, DWORD PTR _random_inverse$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 315
	mov	edx, DWORD PTR _random_encrypted$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 316
	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 318
	mov	eax, DWORD PTR _ret$[ebp]
; Line 319
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@rsa_privke
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@rsa_privke:
	DD	3
	DD	$LN16@rsa_privke
$LN16@rsa_privke:
	DD	-244					; ffffff0cH
	DD	212					; 000000d4H
	DD	$LN13@rsa_privke
	DD	-316					; fffffec4H
	DD	64					; 00000040H
	DD	$LN14@rsa_privke
	DD	-352					; fffffea0H
	DD	4
	DD	$LN15@rsa_privke
$LN15@rsa_privke:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@rsa_privke:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	53					; 00000035H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	0
$LN13@rsa_privke:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_rsa_privkey_op ENDP
_TEXT	ENDS
EXTRN	_smemclr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -20						; size = 4
_len$ = -16						; size = 4
_lenbuf$ = -8						; size = 4
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_sha512_mpint PROC
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 106
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _len$[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _len$[ebp]
	sar	ecx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], cl
	mov	edx, DWORD PTR _len$[ebp]
	sar	edx, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], dl
	mov	eax, DWORD PTR _len$[ebp]
	sar	eax, 8
	mov	BYTE PTR _lenbuf$[ebp+2], al
	mov	cl, BYTE PTR _len$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], cl
; Line 108
	push	4
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
$LN2@sha512_mpi:
; Line 109
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN5@sha512_mpi
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN6@sha512_mpi
$LN5@sha512_mpi:
	mov	DWORD PTR tv82[ebp], 0
$LN6@sha512_mpi:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN1@sha512_mpi
; Line 110
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _lenbuf$[ebp], al
; Line 111
	push	1
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 112
	jmp	SHORT $LN2@sha512_mpi
$LN1@sha512_mpi:
; Line 113
	push	4
	lea	ecx, DWORD PTR _lenbuf$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 114
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@sha512_mpi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@sha512_mpi:
	DD	1
	DD	$LN8@sha512_mpi
$LN8@sha512_mpi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@sha512_mpi
$LN7@sha512_mpi:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_sha512_mpint ENDP
_TEXT	ENDS
PUBLIC	_rsastr_len
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_exlen$ = -16						; size = 4
_mdlen$ = -12						; size = 4
_ex$ = -8						; size = 4
_md$ = -4						; size = 4
_key$ = 8						; size = 4
_rsastr_len PROC
; Line 327
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 331
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _md$[ebp], ecx
; Line 332
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _ex$[ebp], eax
; Line 333
	mov	ecx, DWORD PTR _md$[ebp]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 15					; 0000000fH
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _mdlen$[ebp], eax
; Line 334
	mov	edx, DWORD PTR _ex$[ebp]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 15					; 0000000fH
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _exlen$[ebp], eax
; Line 335
	mov	eax, DWORD PTR _mdlen$[ebp]
	add	eax, DWORD PTR _exlen$[ebp]
	lea	eax, DWORD PTR [eax*4+20]
; Line 336
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsastr_len ENDP
_TEXT	ENDS
PUBLIC	_rsastr_fmt
EXTRN	_sprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv133 = -28						; size = 4
tv77 = -24						; size = 4
_nibbles$ = -20						; size = 4
_i$ = -16						; size = 4
_len$ = -12						; size = 4
_ex$ = -8						; size = 4
_md$ = -4						; size = 4
_str$ = 8						; size = 4
_key$ = 12						; size = 4
_rsastr_fmt PROC
; Line 339
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 341
	mov	DWORD PTR _len$[ebp], 0
; Line 344
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _md$[ebp], ecx
; Line 345
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _ex$[ebp], eax
; Line 347
	push	OFFSET $SG7312
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 349
	mov	edx, DWORD PTR _ex$[ebp]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nibbles$[ebp], eax
; Line 350
	cmp	DWORD PTR _nibbles$[ebp], 1
	jge	SHORT $LN6@rsastr_fmt
; Line 351
	mov	DWORD PTR _nibbles$[ebp], 1
$LN6@rsastr_fmt:
; Line 352
	mov	eax, DWORD PTR _nibbles$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN5@rsastr_fmt:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN4@rsastr_fmt
; Line 353
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _ex$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN9@rsastr_fmt
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN9@rsastr_fmt:
	shl	ecx, 2
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR ?hex@?1??rsastr_fmt@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN5@rsastr_fmt
$LN4@rsastr_fmt:
; Line 355
	push	OFFSET $SG7317
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 357
	mov	edx, DWORD PTR _md$[ebp]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nibbles$[ebp], eax
; Line 358
	cmp	DWORD PTR _nibbles$[ebp], 1
	jge	SHORT $LN3@rsastr_fmt
; Line 359
	mov	DWORD PTR _nibbles$[ebp], 1
$LN3@rsastr_fmt:
; Line 360
	mov	eax, DWORD PTR _nibbles$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@rsastr_fmt:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv133[ebp], 0
	je	SHORT $LN1@rsastr_fmt
; Line 361
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _md$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN10@rsastr_fmt
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN10@rsastr_fmt:
	shl	ecx, 2
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR ?hex@?1??rsastr_fmt@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN2@rsastr_fmt
$LN1@rsastr_fmt:
; Line 363
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 364
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsastr_fmt ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_rsa_fingerprint
EXTRN	_strncpy:PROC
EXTRN	_strlen:PROC
EXTRN	_MD5Final:PROC
EXTRN	_MD5Update:PROC
EXTRN	_ssh1_bignum_length:PROC
EXTRN	_MD5Init:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv142 = -272						; size = 4
tv85 = -268						; size = 4
tv70 = -264						; size = 4
_c$7342 = -253						; size = 1
_c$7338 = -241						; size = 1
_i$ = -236						; size = 4
_slen$ = -232						; size = 4
_numlen$ = -228						; size = 4
_buffer$ = -220						; size = 88
_digest$ = -124						; size = 16
_md5c$ = -100						; size = 92
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
_len$ = 12						; size = 4
_key$ = 16						; size = 4
_rsa_fingerprint PROC
; Line 371
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 377
	lea	eax, DWORD PTR _md5c$[ebp]
	push	eax
	call	_MD5Init
	add	esp, 4
; Line 378
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_ssh1_bignum_length
	add	esp, 4
	sub	eax, 2
	mov	DWORD PTR _numlen$[ebp], eax
; Line 379
	mov	eax, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN8@rsa_finger:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN7@rsa_finger
; Line 380
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7338[ebp], al
; Line 381
	push	1
	lea	eax, DWORD PTR _c$7338[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 382
	jmp	SHORT $LN8@rsa_finger
$LN7@rsa_finger:
; Line 383
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_ssh1_bignum_length
	add	esp, 4
	sub	eax, 2
	mov	DWORD PTR _numlen$[ebp], eax
; Line 384
	mov	ecx, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN6@rsa_finger:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv85[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv85[ebp], 0
	je	SHORT $LN5@rsa_finger
; Line 385
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7342[ebp], al
; Line 386
	push	1
	lea	ecx, DWORD PTR _c$7342[ebp]
	push	ecx
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 387
	jmp	SHORT $LN6@rsa_finger
$LN5@rsa_finger:
; Line 388
	lea	eax, DWORD PTR _md5c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _digest$[ebp]
	push	ecx
	call	_MD5Final
	add	esp, 8
; Line 390
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	push	eax
	push	OFFSET $SG7343
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 391
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@rsa_finger
$LN3@rsa_finger:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@rsa_finger:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN2@rsa_finger
; Line 393
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN11@rsa_finger
	mov	DWORD PTR tv142[ebp], OFFSET $SG7347
	jmp	SHORT $LN12@rsa_finger
$LN11@rsa_finger:
	mov	DWORD PTR tv142[ebp], OFFSET $SG7348
$LN12@rsa_finger:
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _digest$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR tv142[ebp]
	push	edx
	push	OFFSET $SG7349
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR _buffer$[ebp+eax]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@rsa_finger
$LN2@rsa_finger:
; Line 394
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 395
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx-1], 0
; Line 396
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _slen$[ebp], eax
; Line 397
	mov	ecx, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN9@rsa_finger
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _slen$[ebp], edx
	jge	SHORT $LN9@rsa_finger
; Line 398
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _slen$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
; Line 399
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _slen$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _slen$[ebp]
	mov	edx, DWORD PTR _str$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 400
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx-1], 0
$LN9@rsa_finger:
; Line 402
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@rsa_finger
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@rsa_finger:
	DD	5
	DD	$LN18@rsa_finger
$LN18@rsa_finger:
	DD	-100					; ffffff9cH
	DD	92					; 0000005cH
	DD	$LN13@rsa_finger
	DD	-124					; ffffff84H
	DD	16					; 00000010H
	DD	$LN14@rsa_finger
	DD	-220					; ffffff24H
	DD	88					; 00000058H
	DD	$LN15@rsa_finger
	DD	-241					; ffffff0fH
	DD	1
	DD	$LN16@rsa_finger
	DD	-253					; ffffff03H
	DD	1
	DD	$LN17@rsa_finger
$LN17@rsa_finger:
	DB	99					; 00000063H
	DB	0
$LN16@rsa_finger:
	DB	99					; 00000063H
	DB	0
$LN15@rsa_finger:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN14@rsa_finger:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN13@rsa_finger:
	DB	109					; 0000006dH
	DB	100					; 00000064H
	DB	53					; 00000035H
	DB	99					; 00000063H
	DB	0
_rsa_fingerprint ENDP
_TEXT	ENDS
PUBLIC	_rsa_verify
EXTRN	_One:DWORD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tmp$7363 = -24						; size = 4
_cmp$ = -20						; size = 4
_qm1$ = -16						; size = 4
_pm1$ = -12						; size = 4
_ed$ = -8						; size = 4
_n$ = -4						; size = 4
_key$ = 8						; size = 4
_rsa_verify PROC
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 415
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_bigmul
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	mov	DWORD PTR _cmp$[ebp], eax
; Line 417
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 418
	cmp	DWORD PTR _cmp$[ebp], 0
	je	SHORT $LN6@rsa_verify
; Line 419
	xor	eax, eax
	jmp	$LN7@rsa_verify
$LN6@rsa_verify:
; Line 422
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _pm1$[ebp], eax
; Line 423
	mov	ecx, DWORD PTR _pm1$[ebp]
	push	ecx
	call	_decbn
	add	esp, 4
; Line 424
	mov	edx, DWORD PTR _pm1$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ed$[ebp], eax
; Line 425
	mov	ecx, DWORD PTR _pm1$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 426
	mov	edx, DWORD PTR _One
	push	edx
	mov	eax, DWORD PTR _ed$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	mov	DWORD PTR _cmp$[ebp], eax
; Line 427
	mov	ecx, DWORD PTR _ed$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 428
	cmp	DWORD PTR _cmp$[ebp], 0
	je	SHORT $LN5@rsa_verify
; Line 429
	xor	eax, eax
	jmp	$LN7@rsa_verify
$LN5@rsa_verify:
; Line 431
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _qm1$[ebp], eax
; Line 432
	mov	ecx, DWORD PTR _qm1$[ebp]
	push	ecx
	call	_decbn
	add	esp, 4
; Line 433
	mov	edx, DWORD PTR _qm1$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ed$[ebp], eax
; Line 434
	mov	ecx, DWORD PTR _qm1$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 435
	mov	edx, DWORD PTR _One
	push	edx
	mov	eax, DWORD PTR _ed$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	mov	DWORD PTR _cmp$[ebp], eax
; Line 436
	mov	ecx, DWORD PTR _ed$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 437
	cmp	DWORD PTR _cmp$[ebp], 0
	je	SHORT $LN4@rsa_verify
; Line 438
	xor	eax, eax
	jmp	$LN7@rsa_verify
$LN4@rsa_verify:
; Line 448
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN3@rsa_verify
; Line 449
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _tmp$7363[ebp], ecx
; Line 450
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+20], ecx
; Line 451
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR _tmp$7363[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 453
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_freebn
	add	esp, 4
; Line 454
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_modinv
	add	esp, 8
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 455
	mov	edx, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN3@rsa_verify
; Line 456
	xor	eax, eax
	jmp	SHORT $LN7@rsa_verify
$LN3@rsa_verify:
; Line 462
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
; Line 463
	mov	eax, DWORD PTR _One
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_bignum_cmp
	add	esp, 8
	mov	DWORD PTR _cmp$[ebp], eax
; Line 464
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 465
	cmp	DWORD PTR _cmp$[ebp], 0
	je	SHORT $LN1@rsa_verify
; Line 466
	xor	eax, eax
	jmp	SHORT $LN7@rsa_verify
$LN1@rsa_verify:
; Line 468
	mov	eax, 1
$LN7@rsa_verify:
; Line 469
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa_verify ENDP
_TEXT	ENDS
PUBLIC	_rsa_public_blob
EXTRN	_ssh1_write_bignum:PROC
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -12						; size = 4
_pos$ = -8						; size = 4
_length$ = -4						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_rsa_public_blob PROC
; Line 473
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 478
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ssh1_bignum_length
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_ssh1_bignum_length
	add	esp, 4
	lea	ecx, DWORD PTR [esi+eax+4]
	mov	DWORD PTR _length$[ebp], ecx
; Line 479
	push	1
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 481
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	sar	eax, 8
	mov	edx, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [edx+3], al
; Line 482
	mov	DWORD PTR _pos$[ebp], 4
; Line 483
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 484
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 486
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 487
	mov	eax, DWORD PTR _ret$[ebp]
; Line 488
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa_public_blob ENDP
_TEXT	ENDS
PUBLIC	_rsa_public_blob_len
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_data$ = 8						; size = 4
_maxlen$ = 12						; size = 4
_rsa_public_blob_len PROC
; Line 492
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 493
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 496
	cmp	DWORD PTR _maxlen$[ebp], 4
	jge	SHORT $LN3@rsa_public
; Line 497
	or	eax, -1
	jmp	SHORT $LN4@rsa_public
$LN3@rsa_public:
; Line 498
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 499
	mov	edx, DWORD PTR _maxlen$[ebp]
	sub	edx, 4
	mov	DWORD PTR _maxlen$[ebp], edx
; Line 501
	push	0
	mov	eax, DWORD PTR _maxlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
; Line 502
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@rsa_public
; Line 503
	or	eax, -1
	jmp	SHORT $LN4@rsa_public
$LN2@rsa_public:
; Line 504
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 506
	push	0
	mov	eax, DWORD PTR _maxlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _n$[ebp], eax
; Line 507
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@rsa_public
; Line 508
	or	eax, -1
	jmp	SHORT $LN4@rsa_public
$LN1@rsa_public:
; Line 509
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 511
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _data$[ebp]
$LN4@rsa_public:
; Line 512
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa_public_blob_len ENDP
_TEXT	ENDS
PUBLIC	_freersakey
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_key$ = 8						; size = 4
_freersakey PROC
; Line 515
	push	ebp
	mov	ebp, esp
; Line 516
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@freersakey
; Line 517
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_freebn
	add	esp, 4
$LN7@freersakey:
; Line 518
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@freersakey
; Line 519
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_freebn
	add	esp, 4
$LN6@freersakey:
; Line 520
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN5@freersakey
; Line 521
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_freebn
	add	esp, 4
$LN5@freersakey:
; Line 522
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@freersakey
; Line 523
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_freebn
	add	esp, 4
$LN4@freersakey:
; Line 524
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN3@freersakey
; Line 525
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_freebn
	add	esp, 4
$LN3@freersakey:
; Line 526
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@freersakey
; Line 527
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_freebn
	add	esp, 4
$LN2@freersakey:
; Line 528
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN8@freersakey
; Line 529
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_safefree
	add	esp, 4
$LN8@freersakey:
; Line 530
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_freersakey ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rsa$ = -28						; size = 4
_slen$ = -20						; size = 4
_p$ = -8						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_rsa2_newkey PROC
; Line 568
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 573
	push	36					; 00000024H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _rsa$[ebp], eax
; Line 574
	lea	eax, DWORD PTR _slen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_getstring
	add	esp, 16					; 00000010H
; Line 576
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@rsa2_newke
	cmp	DWORD PTR _slen$[ebp], 7
	jne	SHORT $LN3@rsa2_newke
	push	7
	push	OFFSET $SG7454
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@rsa2_newke
$LN3@rsa2_newke:
; Line 577
	mov	edx, DWORD PTR _rsa$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 578
	xor	eax, eax
	jmp	$LN5@rsa2_newke
$LN4@rsa2_newke:
; Line 580
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 581
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 582
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 583
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 584
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 586
	mov	edx, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@rsa2_newke
	mov	eax, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@rsa2_newke
$LN1@rsa2_newke:
; Line 587
	mov	ecx, DWORD PTR _rsa$[ebp]
	push	ecx
	call	_rsa2_freekey
	add	esp, 4
; Line 588
	xor	eax, eax
	jmp	SHORT $LN5@rsa2_newke
$LN2@rsa2_newke:
; Line 591
	mov	eax, DWORD PTR _rsa$[ebp]
$LN5@rsa2_newke:
; Line 592
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@rsa2_newke
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@rsa2_newke:
	DD	2
	DD	$LN9@rsa2_newke
$LN9@rsa2_newke:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@rsa2_newke
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@rsa2_newke
$LN8@rsa2_newke:
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN7@rsa2_newke:
	DB	112					; 00000070H
	DB	0
_rsa2_newkey ENDP
_TEXT	ENDS
EXTRN	_toint:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_p$ = 16						; size = 4
_length$ = 20						; size = 4
_getstring PROC
; Line 537
	push	ebp
	mov	ebp, esp
; Line 538
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 539
	mov	ecx, DWORD PTR _datalen$[ebp]
	cmp	DWORD PTR [ecx], 4
	jge	SHORT $LN3@getstring
; Line 540
	jmp	$LN4@getstring
$LN3@getstring:
; Line 541
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, BYTE PTR [eax+1]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, BYTE PTR [eax+3]
	or	ecx, edx
	push	ecx
	call	_toint
	add	esp, 4
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 542
	mov	edx, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [edx], 0
	jge	SHORT $LN2@getstring
; Line 543
	jmp	SHORT $LN4@getstring
$LN2@getstring:
; Line 544
	mov	eax, DWORD PTR _datalen$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 4
	mov	edx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 545
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 546
	mov	eax, DWORD PTR _datalen$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN1@getstring
; Line 547
	jmp	SHORT $LN4@getstring
$LN1@getstring:
; Line 548
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 549
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _length$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 550
	mov	ecx, DWORD PTR _datalen$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@getstring:
; Line 551
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_getstring ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -28						; size = 4
_length$ = -20						; size = 4
_p$ = -8						; size = 4
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_getmp	PROC
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 558
	lea	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _datalen$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_getstring
	add	esp, 16					; 00000010H
; Line 559
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@getmp
; Line 560
	xor	eax, eax
	jmp	SHORT $LN2@getmp
$LN1@getmp:
; Line 561
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 562
	mov	eax, DWORD PTR _b$[ebp]
$LN2@getmp:
; Line 563
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@getmp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@getmp:
	DD	2
	DD	$LN6@getmp
$LN6@getmp:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@getmp
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@getmp
$LN5@getmp:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN4@getmp:
	DB	112					; 00000070H
	DB	0
_getmp	ENDP
; Function compile flags: /Odtp /RTCsu
_rsa$ = -4						; size = 4
_key$ = 8						; size = 4
_rsa2_freekey PROC
; Line 595
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 596
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 597
	mov	ecx, DWORD PTR _rsa$[ebp]
	push	ecx
	call	_freersakey
	add	esp, 4
; Line 598
	mov	edx, DWORD PTR _rsa$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 599
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_freekey ENDP
; Function compile flags: /Odtp /RTCsu
_len$ = -12						; size = 4
_p$ = -8						; size = 4
_rsa$ = -4						; size = 4
_key$ = 8						; size = 4
_rsa2_fmtkey PROC
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 603
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 607
	mov	ecx, DWORD PTR _rsa$[ebp]
	push	ecx
	call	_rsastr_len
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 608
	push	1
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 609
	mov	eax, DWORD PTR _rsa$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_rsastr_fmt
	add	esp, 8
; Line 610
	mov	eax, DWORD PTR _p$[ebp]
; Line 611
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_fmtkey ENDP
_TEXT	ENDS
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv149 = -36						; size = 4
tv130 = -32						; size = 4
_p$ = -28						; size = 4
_blob$ = -24						; size = 4
_i$ = -20						; size = 4
_bloblen$ = -16						; size = 4
_mlen$ = -12						; size = 4
_elen$ = -8						; size = 4
_rsa$ = -4						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_rsa2_public_blob PROC
; Line 614
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 615
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 620
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _elen$[ebp], eax
; Line 621
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _mlen$[ebp], eax
; Line 627
	mov	edx, DWORD PTR _mlen$[ebp]
	mov	eax, DWORD PTR _elen$[ebp]
	lea	ecx, DWORD PTR [eax+edx+19]
	mov	DWORD PTR _bloblen$[ebp], ecx
; Line 628
	push	1
	mov	edx, DWORD PTR _bloblen$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _blob$[ebp], eax
; Line 629
	mov	eax, DWORD PTR _blob$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 630
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+1], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+2], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+3], 7
; Line 631
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 632
	push	7
	push	OFFSET $SG7497
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 633
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 7
	mov	DWORD PTR _p$[ebp], ecx
; Line 634
	mov	edx, DWORD PTR _elen$[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _elen$[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _elen$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR _elen$[ebp]
	mov	BYTE PTR [edx+3], al
; Line 635
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 636
	mov	edx, DWORD PTR _elen$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN4@rsa2_publi:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv130[ebp], 0
	je	SHORT $LN3@rsa2_publi
; Line 637
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN4@rsa2_publi
$LN3@rsa2_publi:
; Line 638
	mov	ecx, DWORD PTR _mlen$[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _mlen$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _mlen$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR _mlen$[ebp]
	mov	BYTE PTR [ecx+3], dl
; Line 639
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 640
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN2@rsa2_publi:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv149[ebp], 0
	je	SHORT $LN1@rsa2_publi
; Line 641
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN2@rsa2_publi
$LN1@rsa2_publi:
; Line 642
	mov	eax, DWORD PTR _blob$[ebp]
	add	eax, DWORD PTR _bloblen$[ebp]
	cmp	DWORD PTR _p$[ebp], eax
	je	SHORT $LN7@rsa2_publi
	push	642					; 00000282H
	push	OFFSET $SG7513
	push	OFFSET $SG7514
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@rsa2_publi:
; Line 643
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _bloblen$[ebp]
	mov	DWORD PTR [edx], eax
; Line 644
	mov	eax, DWORD PTR _blob$[ebp]
; Line 645
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_public_blob ENDP
; Function compile flags: /Odtp /RTCsu
tv191 = -52						; size = 4
tv172 = -48						; size = 4
tv153 = -44						; size = 4
tv134 = -40						; size = 4
_p$ = -36						; size = 4
_blob$ = -32						; size = 4
_i$ = -28						; size = 4
_bloblen$ = -24						; size = 4
_ulen$ = -20						; size = 4
_qlen$ = -16						; size = 4
_plen$ = -12						; size = 4
_dlen$ = -8						; size = 4
_rsa$ = -4						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_rsa2_private_blob PROC
; Line 648
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 649
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 654
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _dlen$[ebp], eax
; Line 655
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _plen$[ebp], eax
; Line 656
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _qlen$[ebp], eax
; Line 657
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _ulen$[ebp], eax
; Line 663
	mov	eax, DWORD PTR _plen$[ebp]
	mov	ecx, DWORD PTR _dlen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	add	edx, DWORD PTR _qlen$[ebp]
	add	edx, DWORD PTR _ulen$[ebp]
	mov	DWORD PTR _bloblen$[ebp], edx
; Line 664
	push	1
	mov	eax, DWORD PTR _bloblen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _blob$[ebp], eax
; Line 665
	mov	ecx, DWORD PTR _blob$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 666
	mov	edx, DWORD PTR _dlen$[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _dlen$[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _dlen$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR _dlen$[ebp]
	mov	BYTE PTR [edx+3], al
; Line 667
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 668
	mov	edx, DWORD PTR _dlen$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN8@rsa2_priva:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv134[ebp], 0
	je	SHORT $LN7@rsa2_priva
; Line 669
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN8@rsa2_priva
$LN7@rsa2_priva:
; Line 670
	mov	ecx, DWORD PTR _plen$[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _plen$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _plen$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR _plen$[ebp]
	mov	BYTE PTR [ecx+3], dl
; Line 671
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 672
	mov	ecx, DWORD PTR _plen$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN6@rsa2_priva:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv153[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv153[ebp], 0
	je	SHORT $LN5@rsa2_priva
; Line 673
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN6@rsa2_priva
$LN5@rsa2_priva:
; Line 674
	mov	eax, DWORD PTR _qlen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _qlen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _qlen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _qlen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 675
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 676
	mov	eax, DWORD PTR _qlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@rsa2_priva:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv172[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv172[ebp], 0
	je	SHORT $LN3@rsa2_priva
; Line 677
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN4@rsa2_priva
$LN3@rsa2_priva:
; Line 678
	mov	eax, DWORD PTR _ulen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _ulen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _ulen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _ulen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 679
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 680
	mov	eax, DWORD PTR _ulen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@rsa2_priva:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv191[ebp], 0
	je	SHORT $LN1@rsa2_priva
; Line 681
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN2@rsa2_priva
$LN1@rsa2_priva:
; Line 682
	mov	eax, DWORD PTR _blob$[ebp]
	add	eax, DWORD PTR _bloblen$[ebp]
	cmp	DWORD PTR _p$[ebp], eax
	je	SHORT $LN11@rsa2_priva
	push	682					; 000002aaH
	push	OFFSET $SG7562
	push	OFFSET $SG7563
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@rsa2_priva:
; Line 683
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _bloblen$[ebp]
	mov	DWORD PTR [edx], eax
; Line 684
	mov	eax, DWORD PTR _blob$[ebp]
; Line 685
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_private_blob ENDP
; Function compile flags: /Odtp /RTCsu
_pb$ = -12						; size = 4
_rsa$ = -4						; size = 4
_pub_blob$ = 8						; size = 4
_pub_len$ = 12						; size = 4
_priv_blob$ = 16					; size = 4
_priv_len$ = 20						; size = 4
_rsa2_createkey PROC
; Line 689
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 691
	mov	eax, DWORD PTR _priv_blob$[ebp]
	mov	DWORD PTR _pb$[ebp], eax
; Line 693
	mov	ecx, DWORD PTR _pub_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pub_blob$[ebp]
	push	edx
	call	_rsa2_newkey
	add	esp, 8
	mov	DWORD PTR _rsa$[ebp], eax
; Line 694
	lea	eax, DWORD PTR _priv_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pb$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 695
	lea	eax, DWORD PTR _priv_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pb$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 696
	lea	eax, DWORD PTR _priv_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pb$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 697
	lea	eax, DWORD PTR _priv_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pb$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 699
	mov	eax, DWORD PTR _rsa$[ebp]
	push	eax
	call	_rsa_verify
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@rsa2_creat
; Line 700
	mov	ecx, DWORD PTR _rsa$[ebp]
	push	ecx
	call	_rsa2_freekey
	add	esp, 4
; Line 701
	xor	eax, eax
	jmp	SHORT $LN2@rsa2_creat
$LN1@rsa2_creat:
; Line 704
	mov	eax, DWORD PTR _rsa$[ebp]
$LN2@rsa2_creat:
; Line 705
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@rsa2_creat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@rsa2_creat:
	DD	1
	DD	$LN5@rsa2_creat
$LN5@rsa2_creat:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@rsa2_creat
$LN4@rsa2_creat:
	DB	112					; 00000070H
	DB	98					; 00000062H
	DB	0
_rsa2_createkey ENDP
; Function compile flags: /Odtp /RTCsu
_rsa$ = -8						; size = 4
_b$ = -4						; size = 4
_blob$ = 8						; size = 4
_len$ = 12						; size = 4
_rsa2_openssh_createkey PROC
; Line 708
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 709
	mov	eax, DWORD PTR _blob$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 712
	push	36					; 00000024H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _rsa$[ebp], eax
; Line 713
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 715
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 716
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 717
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 718
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 719
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 720
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 723
	mov	edx, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@rsa2_opens
	mov	eax, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@rsa2_opens
	mov	ecx, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN2@rsa2_opens
	mov	edx, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN2@rsa2_opens
	mov	eax, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@rsa2_opens
	mov	ecx, DWORD PTR _rsa$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN3@rsa2_opens
$LN2@rsa2_opens:
; Line 724
	mov	edx, DWORD PTR _rsa$[ebp]
	push	edx
	call	_rsa2_freekey
	add	esp, 4
; Line 725
	xor	eax, eax
	jmp	SHORT $LN4@rsa2_opens
$LN3@rsa2_opens:
; Line 728
	mov	eax, DWORD PTR _rsa$[ebp]
	push	eax
	call	_rsa_verify
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@rsa2_opens
; Line 729
	mov	ecx, DWORD PTR _rsa$[ebp]
	push	ecx
	call	_rsa2_freekey
	add	esp, 4
; Line 730
	xor	eax, eax
	jmp	SHORT $LN4@rsa2_opens
$LN1@rsa2_opens:
; Line 733
	mov	eax, DWORD PTR _rsa$[ebp]
$LN4@rsa2_opens:
; Line 734
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_openssh_createkey ENDP
_TEXT	ENDS
EXTRN	_ssh2_bignum_length:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv381 = -36						; size = 4
tv336 = -32						; size = 4
tv291 = -28						; size = 4
tv246 = -24						; size = 4
tv201 = -20						; size = 4
tv156 = -16						; size = 4
_i$ = -12						; size = 4
_bloblen$ = -8						; size = 4
_rsa$ = -4						; size = 4
_key$ = 8						; size = 4
_blob$ = 12						; size = 4
_len$ = 16						; size = 4
_rsa2_openssh_fmtkey PROC
; Line 737
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 738
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 746
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _bloblen$[ebp], esi
; Line 748
	mov	ecx, DWORD PTR _bloblen$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jle	SHORT $LN13@rsa2_opens@2
; Line 749
	mov	eax, DWORD PTR _bloblen$[ebp]
	jmp	$LN14@rsa2_opens@2
$LN13@rsa2_opens@2:
; Line 751
	mov	DWORD PTR _bloblen$[ebp], 0
; Line 755
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 4
	mov	DWORD PTR _bloblen$[ebp], edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN12@rsa2_opens@2:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv156[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv156[ebp], 0
	je	SHORT $LN11@rsa2_opens@2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 1
	mov	DWORD PTR _bloblen$[ebp], edx
	jmp	SHORT $LN12@rsa2_opens@2
$LN11@rsa2_opens@2:
; Line 756
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN10@rsa2_opens@2:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv201[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv201[ebp], 0
	je	SHORT $LN9@rsa2_opens@2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 1
	mov	DWORD PTR _bloblen$[ebp], eax
	jmp	SHORT $LN10@rsa2_opens@2
$LN9@rsa2_opens@2:
; Line 757
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 4
	mov	DWORD PTR _bloblen$[ebp], edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN8@rsa2_opens@2:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv246[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv246[ebp], 0
	je	SHORT $LN7@rsa2_opens@2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 1
	mov	DWORD PTR _bloblen$[ebp], edx
	jmp	SHORT $LN8@rsa2_opens@2
$LN7@rsa2_opens@2:
; Line 758
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN6@rsa2_opens@2:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv291[ebp], 0
	je	SHORT $LN5@rsa2_opens@2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 1
	mov	DWORD PTR _bloblen$[ebp], eax
	jmp	SHORT $LN6@rsa2_opens@2
$LN5@rsa2_opens@2:
; Line 759
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 4
	mov	DWORD PTR _bloblen$[ebp], edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN4@rsa2_opens@2:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv336[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv336[ebp], 0
	je	SHORT $LN3@rsa2_opens@2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 1
	mov	DWORD PTR _bloblen$[ebp], edx
	jmp	SHORT $LN4@rsa2_opens@2
$LN3@rsa2_opens@2:
; Line 760
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN2@rsa2_opens@2:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv381[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv381[ebp], 0
	je	SHORT $LN1@rsa2_opens@2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 1
	mov	DWORD PTR _bloblen$[ebp], eax
	jmp	SHORT $LN2@rsa2_opens@2
$LN1@rsa2_opens@2:
; Line 762
	mov	eax, DWORD PTR _bloblen$[ebp]
$LN14@rsa2_opens@2:
; Line 763
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_openssh_fmtkey ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -8						; size = 4
_rsa$ = -4						; size = 4
_blob$ = 8						; size = 4
_len$ = 12						; size = 4
_rsa2_pubkey_bits PROC
; Line 766
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 770
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	push	ecx
	call	_rsa2_newkey
	add	esp, 8
	mov	DWORD PTR _rsa$[ebp], eax
; Line 771
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 772
	mov	ecx, DWORD PTR _rsa$[ebp]
	push	ecx
	call	_rsa2_freekey
	add	esp, 4
; Line 774
	mov	eax, DWORD PTR _ret$[ebp]
; Line 775
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rsa2_pubkey_bits ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv171 = -288						; size = 4
tv146 = -284						; size = 4
tv86 = -280						; size = 4
_c$7691 = -269						; size = 1
_c$7683 = -257						; size = 1
_i$ = -252						; size = 4
_numlen$ = -248						; size = 4
_ret$ = -244						; size = 4
_buffer$ = -236						; size = 88
_lenbuf$ = -140						; size = 4
_digest$ = -128						; size = 16
_md5c$ = -104						; size = 92
_rsa$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_rsa2_fingerprint PROC
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 779
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 786
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Init
	add	esp, 4
; Line 787
	push	11					; 0000000bH
	push	OFFSET $SG7675
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 796
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _numlen$[ebp], eax
	mov	edx, DWORD PTR _numlen$[ebp]
	sar	edx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], dl
	mov	eax, DWORD PTR _numlen$[ebp]
	sar	eax, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], al
	mov	ecx, DWORD PTR _numlen$[ebp]
	sar	ecx, 8
	mov	BYTE PTR _lenbuf$[ebp+2], cl
	mov	dl, BYTE PTR _numlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], dl
	push	4
	lea	eax, DWORD PTR _lenbuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN8@rsa2_finge:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN7@rsa2_finge
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7683[ebp], al
	push	1
	lea	edx, DWORD PTR _c$7683[ebp]
	push	edx
	lea	eax, DWORD PTR _md5c$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@rsa2_finge
$LN7@rsa2_finge:
; Line 797
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _numlen$[ebp], eax
	mov	eax, DWORD PTR _numlen$[ebp]
	sar	eax, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], al
	mov	ecx, DWORD PTR _numlen$[ebp]
	sar	ecx, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], cl
	mov	edx, DWORD PTR _numlen$[ebp]
	sar	edx, 8
	mov	BYTE PTR _lenbuf$[ebp+2], dl
	mov	al, BYTE PTR _numlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], al
	push	4
	lea	ecx, DWORD PTR _lenbuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN6@rsa2_finge:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv146[ebp], 0
	je	SHORT $LN5@rsa2_finge
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7691[ebp], al
	push	1
	lea	eax, DWORD PTR _c$7691[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@rsa2_finge
$LN5@rsa2_finge:
; Line 800
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	lea	eax, DWORD PTR _digest$[ebp]
	push	eax
	call	_MD5Final
	add	esp, 8
; Line 802
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	push	eax
	push	OFFSET $SG7692
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 803
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@rsa2_finge
$LN3@rsa2_finge:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@rsa2_finge:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN2@rsa2_finge
; Line 805
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN11@rsa2_finge
	mov	DWORD PTR tv171[ebp], OFFSET $SG7696
	jmp	SHORT $LN12@rsa2_finge
$LN11@rsa2_finge:
	mov	DWORD PTR tv171[ebp], OFFSET $SG7697
$LN12@rsa2_finge:
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _digest$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR tv171[ebp]
	push	ecx
	push	OFFSET $SG7698
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	lea	eax, DWORD PTR _buffer$[ebp+eax]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@rsa2_finge
$LN2@rsa2_finge:
; Line 806
	push	1
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 807
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@rsa2_finge
; Line 808
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN1@rsa2_finge:
; Line 809
	mov	eax, DWORD PTR _ret$[ebp]
; Line 810
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@rsa2_finge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@rsa2_finge:
	DD	6
	DD	$LN19@rsa2_finge
$LN19@rsa2_finge:
	DD	-104					; ffffff98H
	DD	92					; 0000005cH
	DD	$LN13@rsa2_finge
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN14@rsa2_finge
	DD	-140					; ffffff74H
	DD	4
	DD	$LN15@rsa2_finge
	DD	-236					; ffffff14H
	DD	88					; 00000058H
	DD	$LN16@rsa2_finge
	DD	-257					; fffffeffH
	DD	1
	DD	$LN17@rsa2_finge
	DD	-269					; fffffef3H
	DD	1
	DD	$LN18@rsa2_finge
$LN18@rsa2_finge:
	DB	99					; 00000063H
	DB	0
$LN17@rsa2_finge:
	DB	99					; 00000063H
	DB	0
$LN16@rsa2_finge:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@rsa2_finge:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@rsa2_finge:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN13@rsa2_finge:
	DB	109					; 0000006dH
	DB	100					; 00000064H
	DB	53					; 00000035H
	DB	99					; 00000063H
	DB	0
_rsa2_fingerprint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_SHA_Simple:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hash$ = -80						; size = 20
_ret$ = -56						; size = 4
_j$ = -52						; size = 4
_i$ = -48						; size = 4
_bytes$ = -44						; size = 4
_slen$ = -36						; size = 4
_p$ = -24						; size = 4
_out$ = -16						; size = 4
_in$ = -12						; size = 4
_rsa$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_sig$ = 12						; size = 4
_siglen$ = 16						; size = 4
_data$ = 20						; size = 4
_datalen$ = 24						; size = 4
_rsa2_verifysig PROC
; Line 845
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 846
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 853
	lea	ecx, DWORD PTR _slen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _siglen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sig$[ebp]
	push	ecx
	call	_getstring
	add	esp, 16					; 00000010H
; Line 854
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN16@rsa2_verif
	cmp	DWORD PTR _slen$[ebp], 7
	jne	SHORT $LN16@rsa2_verif
	push	7
	push	OFFSET $SG7728
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN17@rsa2_verif
$LN16@rsa2_verif:
; Line 855
	xor	eax, eax
	jmp	$LN18@rsa2_verif
$LN17@rsa2_verif:
; Line 857
	lea	eax, DWORD PTR _siglen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sig$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax
; Line 858
	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN15@rsa2_verif
; Line 859
	xor	eax, eax
	jmp	$LN18@rsa2_verif
$LN15@rsa2_verif:
; Line 860
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _out$[ebp], eax
; Line 861
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 863
	mov	DWORD PTR _ret$[ebp], 1
; Line 865
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _bytes$[ebp], eax
; Line 867
	mov	ecx, DWORD PTR _bytes$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_bignum_byte
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@rsa2_verif
; Line 868
	mov	DWORD PTR _ret$[ebp], 0
$LN14@rsa2_verif:
; Line 870
	mov	eax, DWORD PTR _bytes$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	cmp	eax, 1
	je	SHORT $LN13@rsa2_verif
; Line 871
	mov	DWORD PTR _ret$[ebp], 0
$LN13@rsa2_verif:
; Line 873
	mov	edx, DWORD PTR _bytes$[ebp]
	sub	edx, 3
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN12@rsa2_verif
$LN11@rsa2_verif:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@rsa2_verif:
	cmp	DWORD PTR _i$[ebp], 36			; 00000024H
	jl	SHORT $LN10@rsa2_verif
; Line 874
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_bignum_byte
	add	esp, 8
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN9@rsa2_verif
; Line 875
	mov	DWORD PTR _ret$[ebp], 0
$LN9@rsa2_verif:
; Line 876
	jmp	SHORT $LN11@rsa2_verif
$LN10@rsa2_verif:
; Line 878
	mov	DWORD PTR _i$[ebp], 35			; 00000023H
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN8@rsa2_verif
$LN7@rsa2_verif:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN8@rsa2_verif:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jl	SHORT $LN6@rsa2_verif
; Line 879
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR _asn1_weird_stuff[ecx]
	cmp	eax, edx
	je	SHORT $LN5@rsa2_verif
; Line 880
	mov	DWORD PTR _ret$[ebp], 0
$LN5@rsa2_verif:
; Line 881
	jmp	SHORT $LN7@rsa2_verif
$LN6@rsa2_verif:
; Line 883
	lea	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _datalen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_SHA_Simple
	add	esp, 12					; 0000000cH
; Line 884
	mov	DWORD PTR _i$[ebp], 19			; 00000013H
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@rsa2_verif
$LN3@rsa2_verif:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN4@rsa2_verif:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@rsa2_verif
; Line 885
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR _hash$[ebp+ecx]
	cmp	eax, edx
	je	SHORT $LN1@rsa2_verif
; Line 886
	mov	DWORD PTR _ret$[ebp], 0
$LN1@rsa2_verif:
; Line 887
	jmp	SHORT $LN3@rsa2_verif
$LN2@rsa2_verif:
; Line 888
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 890
	mov	eax, DWORD PTR _ret$[ebp]
$LN18@rsa2_verif:
; Line 891
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@rsa2_verif
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@rsa2_verif:
	DD	3
	DD	$LN23@rsa2_verif
$LN23@rsa2_verif:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN20@rsa2_verif
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN21@rsa2_verif
	DD	-80					; ffffffb0H
	DD	20					; 00000014H
	DD	$LN22@rsa2_verif
$LN22@rsa2_verif:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN21@rsa2_verif:
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN20@rsa2_verif:
	DB	112					; 00000070H
	DB	0
_rsa2_verifysig ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$ = -60						; size = 4
_i$ = -56						; size = 4
_out$ = -52						; size = 4
_in$ = -48						; size = 4
_hash$ = -40						; size = 20
_nbytes$ = -16						; size = 4
_bytes$ = -12						; size = 4
_rsa$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_data$ = 12						; size = 4
_datalen$ = 16						; size = 4
_siglen$ = 20						; size = 4
_rsa2_sign PROC
; Line 895
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 896
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 903
	lea	ecx, DWORD PTR _hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _datalen$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_SHA_Simple
	add	esp, 12					; 0000000cH
; Line 905
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	sub	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _nbytes$[ebp], eax
; Line 906
	mov	eax, DWORD PTR _nbytes$[ebp]
	sub	eax, 36					; 00000024H
	cmp	eax, 1
	jge	SHORT $LN15@rsa2_sign
	push	906					; 0000038aH
	push	OFFSET $SG7767
	push	OFFSET $SG7768
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@rsa2_sign:
; Line 907
	push	1
	mov	edx, DWORD PTR _nbytes$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _bytes$[ebp], eax
; Line 909
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax], 1
; Line 910
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN12@rsa2_sign
$LN11@rsa2_sign:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@rsa2_sign:
	mov	edx, DWORD PTR _nbytes$[ebp]
	sub	edx, 36					; 00000024H
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN10@rsa2_sign
; Line 911
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH
	jmp	SHORT $LN11@rsa2_sign
$LN10@rsa2_sign:
; Line 912
	mov	ecx, DWORD PTR _nbytes$[ebp]
	sub	ecx, 36					; 00000024H
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@rsa2_sign
$LN8@rsa2_sign:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@rsa2_sign:
	mov	ecx, DWORD PTR _nbytes$[ebp]
	sub	ecx, 20					; 00000014H
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN7@rsa2_sign
; Line 913
	mov	edx, DWORD PTR _bytes$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	cl, BYTE PTR _asn1_weird_stuff[eax]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN8@rsa2_sign
$LN7@rsa2_sign:
; Line 914
	mov	edx, DWORD PTR _nbytes$[ebp]
	sub	edx, 20					; 00000014H
	mov	DWORD PTR _i$[ebp], edx
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@rsa2_sign
$LN5@rsa2_sign:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN6@rsa2_sign:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nbytes$[ebp]
	jge	SHORT $LN4@rsa2_sign
; Line 915
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	dl, BYTE PTR _hash$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN5@rsa2_sign
$LN4@rsa2_sign:
; Line 917
	mov	eax, DWORD PTR _nbytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _in$[ebp], eax
; Line 918
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 920
	mov	eax, DWORD PTR _rsa$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_rsa_privkey_op
	add	esp, 8
	mov	DWORD PTR _out$[ebp], eax
; Line 921
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 923
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _nbytes$[ebp], eax
; Line 924
	push	1
	mov	ecx, DWORD PTR _nbytes$[ebp]
	add	ecx, 15					; 0000000fH
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _bytes$[ebp], eax
; Line 925
	mov	edx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax+1], 0
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [ecx+2], 0
	mov	edx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [edx+3], 7
; Line 926
	push	7
	push	OFFSET $SG7788
	mov	eax, DWORD PTR _bytes$[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 927
	mov	ecx, DWORD PTR _nbytes$[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [edx+11], cl
	mov	eax, DWORD PTR _nbytes$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [ecx+12], al
	mov	edx, DWORD PTR _nbytes$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax+13], dl
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	dl, BYTE PTR _nbytes$[ebp]
	mov	BYTE PTR [ecx+14], dl
; Line 928
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@rsa2_sign
$LN2@rsa2_sign:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@rsa2_sign:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbytes$[ebp]
	jge	SHORT $LN1@rsa2_sign
; Line 929
	mov	edx, DWORD PTR _nbytes$[ebp]
	sub	edx, 1
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+15], al
	jmp	SHORT $LN2@rsa2_sign
$LN1@rsa2_sign:
; Line 930
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 932
	mov	eax, DWORD PTR _nbytes$[ebp]
	add	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _siglen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 933
	mov	eax, DWORD PTR _bytes$[ebp]
; Line 934
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@rsa2_sign
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@rsa2_sign:
	DD	1
	DD	$LN17@rsa2_sign
$LN17@rsa2_sign:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN16@rsa2_sign
$LN16@rsa2_sign:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
_rsa2_sign ENDP
_TEXT	ENDS
PUBLIC	_ssh_rsakex_newkey
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_ssh_rsakex_newkey PROC
; Line 954
	push	ebp
	mov	ebp, esp
; Line 955
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_rsa2_newkey
	add	esp, 8
; Line 956
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ssh_rsakex_newkey ENDP
_TEXT	ENDS
PUBLIC	_ssh_rsakex_freekey
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_key$ = 8						; size = 4
_ssh_rsakex_freekey PROC
; Line 959
	push	ebp
	mov	ebp, esp
; Line 960
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_rsa2_freekey
	add	esp, 4
; Line 961
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ssh_rsakex_freekey ENDP
_TEXT	ENDS
PUBLIC	_ssh_rsakex_klen
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rsa$ = -4						; size = 4
_key$ = 8						; size = 4
_ssh_rsakex_klen PROC
; Line 964
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 965
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 967
	mov	ecx, DWORD PTR _rsa$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
; Line 968
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ssh_rsakex_klen ENDP
_TEXT	ENDS
PUBLIC	_ssh_rsakex_encrypt
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv175 = -32						; size = 4
_HLEN$ = -28						; size = 4
_p$ = -24						; size = 4
_i$ = -20						; size = 4
_k$ = -16						; size = 4
_rsa$ = -12						; size = 4
_b2$ = -8						; size = 4
_b1$ = -4						; size = 4
_h$ = 8							; size = 4
_in$ = 12						; size = 4
_inlen$ = 16						; size = 4
_out$ = 20						; size = 4
_outlen$ = 24						; size = 4
_key$ = 28						; size = 4
_ssh_rsakex_encrypt PROC
; Line 1000
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1002
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _rsa$[ebp], eax
; Line 1005
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _HLEN$[ebp], edx
; Line 1035
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _k$[ebp], eax
; Line 1038
	cmp	DWORD PTR _inlen$[ebp], 0
	jle	SHORT $LN8@ssh_rsakex
	mov	edx, DWORD PTR _HLEN$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, edx
	sub	eax, 2
	cmp	DWORD PTR _inlen$[ebp], eax
	jle	SHORT $LN9@ssh_rsakex
$LN8@ssh_rsakex:
	push	1038					; 0000040eH
	push	OFFSET $SG7866
	push	OFFSET $SG7867
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@ssh_rsakex:
; Line 1041
	mov	edx, DWORD PTR _outlen$[ebp]
	cmp	edx, DWORD PTR _k$[ebp]
	je	SHORT $LN10@ssh_rsakex
	push	1041					; 00000411H
	push	OFFSET $SG7869
	push	OFFSET $SG7870
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@ssh_rsakex:
; Line 1048
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 1050
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@ssh_rsakex
$LN4@ssh_rsakex:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@ssh_rsakex:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _HLEN$[ebp]
	jge	SHORT $LN3@ssh_rsakex
; Line 1051
	call	_random_byte
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+1], al
	jmp	SHORT $LN4@ssh_rsakex
$LN3@ssh_rsakex:
; Line 1054
	mov	edx, DWORD PTR _HLEN$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	mov	edi, esp
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1056
	mov	eax, DWORD PTR _HLEN$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	edx, DWORD PTR _outlen$[ebp]
	sub	edx, ecx
	push	edx
	push	0
	mov	eax, DWORD PTR _HLEN$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+1]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1058
	mov	eax, DWORD PTR _outlen$[ebp]
	sub	eax, DWORD PTR _inlen$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+eax-1], 1
; Line 1059
	mov	edx, DWORD PTR _inlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, DWORD PTR _outlen$[ebp]
	sub	ecx, DWORD PTR _inlen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1064
	mov	edx, DWORD PTR _outlen$[ebp]
	sub	edx, DWORD PTR _HLEN$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _HLEN$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	mov	eax, DWORD PTR _HLEN$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	_oaep_mask
	add	esp, 20					; 00000014H
; Line 1069
	mov	eax, DWORD PTR _HLEN$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _outlen$[ebp]
	sub	edx, DWORD PTR _HLEN$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _HLEN$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_oaep_mask
	add	esp, 20					; 00000014H
; Line 1075
	mov	ecx, DWORD PTR _outlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _b1$[ebp], eax
; Line 1076
	mov	eax, DWORD PTR _rsa$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _rsa$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b2$[ebp], eax
; Line 1077
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 1078
	mov	eax, DWORD PTR _outlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@ssh_rsakex:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv175[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv175[ebp], 0
	je	SHORT $LN1@ssh_rsakex
; Line 1079
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b2$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 1080
	jmp	SHORT $LN2@ssh_rsakex
$LN1@ssh_rsakex:
; Line 1081
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1082
	mov	edx, DWORD PTR _b2$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 1087
	pop	edi
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ssh_rsakex_encrypt ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -80						; size = 4
_hash$7833 = -72					; size = 32
_counter$7832 = -32					; size = 4
_s$7831 = -24						; size = 4
_max$7830 = -20						; size = 4
_i$7829 = -16						; size = 4
_count$ = -12						; size = 4
_data$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_h$ = 8							; size = 4
_seed$ = 12						; size = 4
_seedlen$ = 16						; size = 4
_vdata$ = 20						; size = 4
_datalen$ = 24						; size = 4
_oaep_mask PROC
; Line 972
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 973
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 974
	mov	DWORD PTR _count$[ebp], 0
$LN5@oaep_mask:
; Line 976
	cmp	DWORD PTR _datalen$[ebp], 0
	jle	$LN6@oaep_mask
; Line 977
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _datalen$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jle	SHORT $LN8@oaep_mask
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN9@oaep_mask
$LN8@oaep_mask:
	mov	edx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR tv68[ebp], edx
$LN9@oaep_mask:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR _max$7830[ebp], eax
; Line 981
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [ecx+12], 32			; 00000020H
	jle	SHORT $LN10@oaep_mask
	push	981					; 000003d5H
	push	OFFSET $SG7835
	push	OFFSET $SG7836
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@oaep_mask:
; Line 982
	mov	eax, DWORD PTR _count$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _counter$7832[ebp], al
	mov	ecx, DWORD PTR _count$[ebp]
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _counter$7832[ebp+1], cl
	mov	edx, DWORD PTR _count$[ebp]
	shr	edx, 8
	mov	BYTE PTR _counter$7832[ebp+2], dl
	mov	al, BYTE PTR _count$[ebp]
	mov	BYTE PTR _counter$7832[ebp+3], al
; Line 983
	mov	ecx, DWORD PTR _h$[ebp]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$7831[ebp], eax
; Line 984
	mov	esi, esp
	mov	eax, DWORD PTR _seedlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seed$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$7831[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 985
	mov	esi, esp
	push	4
	lea	edx, DWORD PTR _counter$7832[ebp]
	push	edx
	mov	eax, DWORD PTR _s$7831[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 986
	mov	esi, esp
	lea	eax, DWORD PTR _hash$7833[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$7831[ebp]
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 987
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
; Line 989
	mov	DWORD PTR _i$7829[ebp], 0
	jmp	SHORT $LN3@oaep_mask
$LN2@oaep_mask:
	mov	edx, DWORD PTR _i$7829[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7829[ebp], edx
$LN3@oaep_mask:
	mov	eax, DWORD PTR _i$7829[ebp]
	cmp	eax, DWORD PTR _max$7830[ebp]
	jge	SHORT $LN1@oaep_mask
; Line 990
	mov	ecx, DWORD PTR _i$7829[ebp]
	movzx	edx, BYTE PTR _hash$7833[ebp+ecx]
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$7829[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$7829[ebp]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN2@oaep_mask
$LN1@oaep_mask:
; Line 992
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _max$7830[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 993
	mov	ecx, DWORD PTR _datalen$[ebp]
	sub	ecx, DWORD PTR _max$7830[ebp]
	mov	DWORD PTR _datalen$[ebp], ecx
; Line 994
	jmp	$LN5@oaep_mask
$LN6@oaep_mask:
; Line 995
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@oaep_mask
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@oaep_mask:
	DD	2
	DD	$LN13@oaep_mask
$LN13@oaep_mask:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN11@oaep_mask
	DD	-72					; ffffffb8H
	DD	32					; 00000020H
	DD	$LN12@oaep_mask
$LN12@oaep_mask:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN11@oaep_mask:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_oaep_mask ENDP
_TEXT	ENDS
END
