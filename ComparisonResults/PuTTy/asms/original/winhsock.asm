; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winhsock.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?socket_fn_table@?1??make_handle_socket@@9@9 DD FLAT:_sk_handle_plug ; `make_handle_socket'::`2'::socket_fn_table
	DD	FLAT:_sk_handle_close
	DD	FLAT:_sk_handle_write
	DD	FLAT:_sk_handle_write_oob
	DD	FLAT:_sk_handle_write_eof
	DD	FLAT:_sk_handle_flush
	DD	FLAT:_sk_handle_set_frozen
	DD	FLAT:_sk_handle_socket_error
CONST	ENDS
_DATA	SEGMENT
$SG85572 DB	'Read error from handle', 00H
	ORG $+1
$SG85578 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 's', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG85579 DB	'p', 00H, 's', 00H, '-', 00H, '>', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'z', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'F', 00H, 'R', 00H, 'E', 00H, 'E', 00H, 'Z', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'p', 00H, 's', 00H, '-', 00H, '>', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'z', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'T', 00H, 'H', 00H, 'A', 00H, 'W', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, 00H, 00H
$SG85646 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 's', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85647 DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG85674 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 's', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85675 DB	'b', 00H, 'u', 00H, 'f', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'i', 00H, 'n', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, '(', 00H, '&', 00H, 'p', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H
_DATA	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winhsock.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_sk_handle_plug PROC
; Line 86
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 87
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 88
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _ret$[ebp], edx
; Line 89
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@sk_handle_
; Line 90
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN1@sk_handle_:
; Line 91
	mov	eax, DWORD PTR _ret$[ebp]
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_handle_plug ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
EXTRN	_bufchain_clear:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	_handle_free:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_handle_close PROC
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 96
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 98
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_handle_free
	add	esp, 4
; Line 99
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_handle_free
	add	esp, 4
; Line 100
	mov	esi, esp
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 101
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN1@sk_handle_@2
; Line 102
	mov	esi, esp
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sk_handle_@2:
; Line 103
	mov	eax, DWORD PTR _ps$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_bufchain_clear
	add	esp, 4
; Line 105
	mov	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 106
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_handle_close ENDP
_TEXT	ENDS
EXTRN	_handle_write:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sk_handle_write PROC
; Line 109
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 110
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 112
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_handle_write
	add	esp, 12					; 0000000cH
; Line 113
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_handle_write ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_sk_handle_write_oob PROC
; Line 116
	push	ebp
	mov	ebp, esp
; Line 121
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_sk_handle_write
	add	esp, 12					; 0000000cH
; Line 122
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sk_handle_write_oob ENDP
_TEXT	ENDS
EXTRN	_handle_write_eof:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_handle_write_eof PROC
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 126
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 128
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_handle_write_eof
	add	esp, 4
; Line 129
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_handle_write_eof ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = 8						; size = 4
_sk_handle_flush PROC
; Line 132
	push	ebp
	mov	ebp, esp
; Line 135
	pop	ebp
	ret	0
_sk_handle_flush ENDP
_TEXT	ENDS
EXTRN	_queue_toplevel_callback:PROC
EXTRN	__wassert:PROC
EXTRN	_bufchain_size:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -12						; size = 4
tv66 = -8						; size = 4
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_is_frozen$ = 12					; size = 4
_sk_handle_set_frozen PROC
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 178
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 180
	cmp	DWORD PTR _is_frozen$[ebp], 0
	je	SHORT $LN12@sk_handle_@3
; Line 181
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 3
	ja	SHORT $LN10@sk_handle_@3
	mov	eax, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN16@sk_handle_@3[eax*4]
$LN9@sk_handle_@3:
; Line 184
	jmp	$LN13@sk_handle_@3
$LN8@sk_handle_@3:
; Line 193
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [ecx+20], 2
; Line 194
	jmp	SHORT $LN10@sk_handle_@3
$LN7@sk_handle_@3:
; Line 201
	mov	edx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [edx+20], 1
$LN10@sk_handle_@3:
; Line 204
	jmp	SHORT $LN13@sk_handle_@3
$LN12@sk_handle_@3:
; Line 205
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 3
	ja	SHORT $LN13@sk_handle_@3
	mov	edx, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN17@sk_handle_@3[edx*4]
$LN3@sk_handle_@3:
; Line 208
	jmp	SHORT $LN13@sk_handle_@3
$LN2@sk_handle_@3:
; Line 216
	mov	eax, DWORD PTR _ps$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	je	SHORT $LN15@sk_handle_@3
	push	216					; 000000d8H
	push	OFFSET $SG85674
	push	OFFSET $SG85675
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@sk_handle_@3:
; Line 217
	mov	edx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 218
	jmp	SHORT $LN13@sk_handle_@3
$LN1@sk_handle_@3:
; Line 225
	mov	eax, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [eax+20], 3
; Line 226
	mov	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	push	OFFSET _handle_socket_unfreeze
	call	_queue_toplevel_callback
	add	esp, 8
$LN13@sk_handle_@3:
; Line 229
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@sk_handle_@3:
	DD	$LN7@sk_handle_@3
	DD	$LN9@sk_handle_@3
	DD	$LN9@sk_handle_@3
	DD	$LN8@sk_handle_@3
$LN17@sk_handle_@3:
	DD	$LN3@sk_handle_@3
	DD	$LN2@sk_handle_@3
	DD	$LN1@sk_handle_@3
	DD	$LN3@sk_handle_@3
_sk_handle_set_frozen ENDP
_TEXT	ENDS
EXTRN	_handle_unthrottle:PROC
EXTRN	_bufchain_prefix:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_new_backlog$ = -32					; size = 4
_len$ = -24						; size = 4
_data$ = -12						; size = 4
_ps$ = -4						; size = 4
_psv$ = 8						; size = 4
_handle_socket_unfreeze PROC
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 139
	mov	eax, DWORD PTR _psv$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 147
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+20], 3
	je	SHORT $LN3@handle_soc
; Line 148
	jmp	$LN4@handle_soc
$LN3@handle_soc:
; Line 153
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
; Line 154
	cmp	DWORD PTR _len$[ebp], 0
	jg	SHORT $LN6@handle_soc
	push	154					; 0000009aH
	push	OFFSET $SG85646
	push	OFFSET $SG85647
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@handle_soc:
; Line 159
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _new_backlog$[ebp], eax
; Line 161
	mov	edx, DWORD PTR _ps$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN2@handle_soc
; Line 166
	mov	eax, DWORD PTR _ps$[ebp]
	push	eax
	push	OFFSET _handle_socket_unfreeze
	call	_queue_toplevel_callback
	add	esp, 8
; Line 167
	jmp	SHORT $LN4@handle_soc
$LN2@handle_soc:
; Line 171
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 172
	mov	edx, DWORD PTR _new_backlog$[ebp]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_handle_unthrottle
	add	esp, 8
$LN4@handle_soc:
; Line 174
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@handle_soc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@handle_soc:
	DD	2
	DD	$LN9@handle_soc
$LN9@handle_soc:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@handle_soc
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@handle_soc
$LN8@handle_soc:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN7@handle_soc:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_handle_socket_unfreeze ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -4						; size = 4
_s$ = 8							; size = 4
_sk_handle_socket_error PROC
; Line 232
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 233
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ps$[ebp], eax
; Line 234
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [ecx+36]
; Line 235
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_handle_socket_error ENDP
_TEXT	ENDS
PUBLIC	_make_handle_socket
EXTRN	_handle_output_new:PROC
EXTRN	_handle_input_new:PROC
EXTRN	_bufchain_init:PROC
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flags$ = -8						; size = 4
_ret$ = -4						; size = 4
_send_H$ = 8						; size = 4
_recv_H$ = 12						; size = 4
_plug$ = 16						; size = 4
_overlapped$ = 20					; size = 4
_make_handle_socket PROC
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 252
	xor	eax, eax
	cmp	DWORD PTR _overlapped$[ebp], 0
	setne	al
	mov	DWORD PTR _flags$[ebp], eax
; Line 254
	push	44					; 0000002cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 255
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?socket_fn_table@?1??make_handle_socket@@9@9
; Line 256
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 257
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 258
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 259
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_bufchain_init
	add	esp, 4
; Line 261
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _recv_H$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 262
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	push	OFFSET _handle_gotdata
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_handle_input_new
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 263
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _send_H$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 264
	mov	ecx, DWORD PTR _flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	push	OFFSET _handle_sentdata
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_handle_output_new
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 266
	mov	eax, DWORD PTR _ret$[ebp]
; Line 267
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_make_handle_socket ENDP
_TEXT	ENDS
EXTRN	_bufchain_add:PROC
EXTRN	_handle_get_privdata:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ps$ = -4						; size = 4
_h$ = 8							; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_handle_gotdata PROC
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 49
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_handle_get_privdata
	add	esp, 4
	mov	DWORD PTR _ps$[ebp], eax
; Line 51
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN6@handle_got
; Line 53
	mov	esi, esp
	push	0
	push	0
	push	OFFSET $SG85572
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN7@handle_got
	jmp	$LN7@handle_got
$LN6@handle_got:
; Line 54
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN4@handle_got
; Line 55
	mov	esi, esp
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN7@handle_got
; Line 56
	jmp	SHORT $LN7@handle_got
$LN4@handle_got:
; Line 57
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+20], 1
	je	SHORT $LN9@handle_got
	mov	edx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [edx+20], 3
	jne	SHORT $LN10@handle_got
$LN9@handle_got:
	push	57					; 00000039H
	push	OFFSET $SG85578
	push	OFFSET $SG85579
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@handle_got:
; Line 58
	mov	ecx, DWORD PTR _ps$[ebp]
	cmp	DWORD PTR [ecx+20], 1
	jne	SHORT $LN2@handle_got
; Line 65
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_bufchain_add
	add	esp, 12					; 0000000cH
; Line 71
	mov	eax, 2147483647				; 7fffffffH
	jmp	SHORT $LN7@handle_got
; Line 72
	jmp	SHORT $LN7@handle_got
$LN2@handle_got:
; Line 73
	mov	esi, esp
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@handle_got:
; Line 76
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_gotdata ENDP
; Function compile flags: /Odtp /RTCsu
_ps$ = -4						; size = 4
_h$ = 8							; size = 4
_new_backlog$ = 12					; size = 4
_handle_sentdata PROC
; Line 79
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 80
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	call	_handle_get_privdata
	add	esp, 4
	mov	DWORD PTR _ps$[ebp], eax
; Line 82
	mov	esi, esp
	mov	ecx, DWORD PTR _new_backlog$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 83
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_sentdata ENDP
_TEXT	ENDS
END
