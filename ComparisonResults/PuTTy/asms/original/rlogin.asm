; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\rlogin.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_rlogin_backend
_BSS	SEGMENT
$SG85676 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?fn_table@?1??rlogin_init@@9@9 DD FLAT:_rlogin_log	; `rlogin_init'::`2'::fn_table
	DD	FLAT:_rlogin_closing
	DD	FLAT:_rlogin_receive
	DD	FLAT:_rlogin_sent
	ORG $+4
CONST	ENDS
_DATA	SEGMENT
$SG85585 DB	'Connecting to %s port %d', 00H
	ORG $+3
$SG85587 DB	'Failed to connect to %s: %s', 00H
$SG85604 DB	'%s', 00H
	ORG $+1
$SG85640 DB	'/', 00H
	ORG $+2
$SG85641 DB	'0123456789', 00H
	ORG $+1
$SG85674 DB	' (IPv4)', 00H
$SG85675 DB	' (IPv6)', 00H
$SG85677 DB	'Looking up host "%s"%s', 00H
	ORG $+1
$SG85691 DB	'Rlogin login name', 00H
	ORG $+2
$SG85692 DB	'rlogin username: ', 00H
	ORG $+2
$SG85809 DB	'rlogin', 00H
	ORG $+5
_rlogin_backend DD FLAT:_rlogin_init
	DD	FLAT:_rlogin_free
	DD	FLAT:_rlogin_reconfig
	DD	FLAT:_rlogin_send
	DD	FLAT:_rlogin_sendbuffer
	DD	FLAT:_rlogin_size
	DD	FLAT:_rlogin_special
	DD	FLAT:_rlogin_get_specials
	DD	FLAT:_rlogin_connected
	DD	FLAT:_rlogin_exitcode
	DD	FLAT:_rlogin_sendok
	DD	FLAT:_rlogin_ldisc
	DD	FLAT:_rlogin_provide_ldisc
	DD	FLAT:_rlogin_provide_logctx
	DD	FLAT:_rlogin_unthrottle
	DD	FLAT:_rlogin_cfg_info
	DD	FLAT:$SG85809
	DD	02H
	DD	0201H
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_safefree:PROC
EXTRN	_logevent:PROC
EXTRN	_dupprintf:PROC
EXTRN	_sk_getaddr:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\rlogin.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_msg$ = -276						; size = 4
_addrbuf$ = -268					; size = 256
_rlogin$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_plug$ = 8						; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_rlogin_log PROC
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 53
	push	256					; 00000100H
	lea	ecx, DWORD PTR _addrbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_getaddr
	add	esp, 12					; 0000000cH
; Line 55
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN2@rlogin_log
; Line 56
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	lea	ecx, DWORD PTR _addrbuf$[ebp]
	push	ecx
	push	OFFSET $SG85585
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$[ebp], eax
; Line 57
	jmp	SHORT $LN1@rlogin_log
$LN2@rlogin_log:
; Line 58
	mov	edx, DWORD PTR _error_msg$[ebp]
	push	edx
	lea	eax, DWORD PTR _addrbuf$[ebp]
	push	eax
	push	OFFSET $SG85587
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _msg$[ebp], eax
$LN1@rlogin_log:
; Line 60
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_logevent
	add	esp, 8
; Line 61
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 62
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@rlogin_log
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@rlogin_log:
	DD	1
	DD	$LN6@rlogin_log
$LN6@rlogin_log:
	DD	-268					; fffffef4H
	DD	256					; 00000100H
	DD	$LN5@rlogin_log
$LN5@rlogin_log:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_rlogin_log ENDP
_TEXT	ENDS
EXTRN	_connection_fatal:PROC
EXTRN	_notify_remote_exit:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rlogin$ = -4						; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_rlogin_closing PROC
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 67
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 75
	mov	ecx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@rlogin_clo
; Line 76
	mov	esi, esp
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 77
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 78
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN2@rlogin_clo
; Line 79
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [eax+8], 1
$LN2@rlogin_clo:
; Line 80
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_notify_remote_exit
	add	esp, 4
$LN3@rlogin_clo:
; Line 82
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN1@rlogin_clo
; Line 84
	mov	eax, DWORD PTR _error_msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_logevent
	add	esp, 8
; Line 85
	mov	eax, DWORD PTR _error_msg$[ebp]
	push	eax
	push	OFFSET $SG85604
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_connection_fatal
	add	esp, 12					; 0000000cH
$LN1@rlogin_clo:
; Line 87
	xor	eax, eax
; Line 88
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_closing ENDP
; Function compile flags: /Odtp /RTCsu
_c$85618 = -5						; size = 1
_rlogin$ = -4						; size = 4
_plug$ = 8						; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_rlogin_receive PROC
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 92
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 93
	cmp	DWORD PTR _urgent$[ebp], 2
	jne	SHORT $LN6@rlogin_rec
; Line 96
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$85618[ebp], dl
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax
; Line 97
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 98
	movsx	edx, BYTE PTR _c$85618[ebp]
	cmp	edx, -128				; ffffff80H
	jne	SHORT $LN5@rlogin_rec
; Line 99
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 100
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	push	edx
	call	_rlogin_size
	add	esp, 12					; 0000000cH
$LN5@rlogin_rec:
; Line 108
	jmp	SHORT $LN4@rlogin_rec
$LN6@rlogin_rec:
; Line 114
	mov	eax, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@rlogin_rec
; Line 115
	mov	ecx, DWORD PTR _data$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN2@rlogin_rec
; Line 116
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
$LN2@rlogin_rec:
; Line 119
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN3@rlogin_rec:
; Line 121
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN4@rlogin_rec
; Line 122
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	push	edx
	call	_c_write
	add	esp, 12					; 0000000cH
$LN4@rlogin_rec:
; Line 124
	mov	eax, 1
; Line 125
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_receive ENDP
_TEXT	ENDS
EXTRN	_from_backend:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_backlog$ = -4						; size = 4
_rlogin$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_c_write PROC
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 43
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_from_backend
	add	esp, 16					; 00000010H
	mov	DWORD PTR _backlog$[ebp], eax
; Line 44
	xor	ecx, ecx
	cmp	DWORD PTR _backlog$[ebp], 4096		; 00001000H
	setg	cl
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 45
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_c_write ENDP
; Function compile flags: /Odtp /RTCsu
_rlogin$ = -4						; size = 4
_plug$ = 8						; size = 4
_bufsize$ = 12						; size = 4
_rlogin_sent PROC
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 129
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 130
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR _bufsize$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 131
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_sent ENDP
_TEXT	ENDS
EXTRN	_get_userpass_input:PROC
EXTRN	_add_prompt:PROC
EXTRN	_new_prompts:PROC
EXTRN	_get_remote_username:PROC
EXTRN	_host_strrchr:PROC
EXTRN	_dupstr:PROC
EXTRN	_conf_get_str:PROC
EXTRN	_new_connection:PROC
EXTRN	_sk_addr_free:PROC
EXTRN	_sk_addr_error:PROC
EXTRN	_name_lookup:PROC
EXTRN	_conf_copy:PROC
EXTRN	_conf_get_int:PROC
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv90 = -44						; size = 4
tv91 = -40						; size = 4
_ret$85690 = -36					; size = 4
_colon$85685 = -32					; size = 4
_buf$85673 = -28					; size = 4
_loghost$ = -24						; size = 4
_addressfamily$ = -20					; size = 4
_ruser$ = -16						; size = 4
_rlogin$ = -12						; size = 4
_err$ = -8						; size = 4
_addr$ = -4						; size = 4
_frontend_handle$ = 8					; size = 4
_backend_handle$ = 12					; size = 4
_conf$ = 16						; size = 4
_host$ = 20						; size = 4
_port$ = 24						; size = 4
_realhost$ = 28						; size = 4
_nodelay$ = 32						; size = 4
_keepalive$ = 36					; size = 4
_rlogin_init PROC
; Line 166
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 180
	push	44					; 0000002cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [eax], OFFSET ?fn_table@?1??rlogin_init@@9@9
; Line 182
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 183
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 184
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR _frontend_handle$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 185
	push	110					; 0000006eH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 186
	push	111					; 0000006fH
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 187
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [edx+16], 1
; Line 188
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 189
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 190
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_copy
	add	esp, 4
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 191
	mov	edx, DWORD PTR _backend_handle$[ebp]
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [edx], eax
; Line 193
	push	3
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _addressfamily$[ebp], eax
; Line 202
	cmp	DWORD PTR _addressfamily$[ebp], 1
	jne	SHORT $LN13@rlogin_ini
	mov	DWORD PTR tv91[ebp], OFFSET $SG85674
	jmp	SHORT $LN14@rlogin_ini
$LN13@rlogin_ini:
	cmp	DWORD PTR _addressfamily$[ebp], 2
	jne	SHORT $LN11@rlogin_ini
	mov	DWORD PTR tv90[ebp], OFFSET $SG85675
	jmp	SHORT $LN12@rlogin_ini
$LN11@rlogin_ini:
	mov	DWORD PTR tv90[ebp], OFFSET $SG85676
$LN12@rlogin_ini:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv91[ebp], edx
$LN14@rlogin_ini:
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	push	OFFSET $SG85677
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$85673[ebp], eax
; Line 203
	mov	edx, DWORD PTR _buf$85673[ebp]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_logevent
	add	esp, 8
; Line 204
	mov	edx, DWORD PTR _buf$85673[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 206
	mov	eax, DWORD PTR _addressfamily$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _realhost$[ebp]
	push	edx
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	call	_name_lookup
	add	esp, 20					; 00000014H
	mov	DWORD PTR _addr$[ebp], eax
; Line 207
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_sk_addr_error
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN8@rlogin_ini
; Line 208
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	_sk_addr_free
	add	esp, 4
; Line 209
	mov	eax, DWORD PTR _err$[ebp]
	jmp	$LN9@rlogin_ini
$LN8@rlogin_ini:
; Line 212
	cmp	DWORD PTR _port$[ebp], 0
	jge	SHORT $LN7@rlogin_ini
; Line 213
	mov	DWORD PTR _port$[ebp], 513		; 00000201H
$LN7@rlogin_ini:
; Line 219
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	push	edx
	mov	eax, DWORD PTR _keepalive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodelay$[ebp]
	push	ecx
	push	0
	push	1
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _realhost$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_new_connection
	add	esp, 36					; 00000024H
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 220
	mov	esi, esp
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN6@rlogin_ini
; Line 221
	mov	eax, DWORD PTR _err$[ebp]
	jmp	$LN9@rlogin_ini
$LN6@rlogin_ini:
; Line 223
	push	9
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _loghost$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _loghost$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@rlogin_ini
; Line 227
	mov	edx, DWORD PTR _realhost$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_safefree
	add	esp, 4
; Line 228
	mov	ecx, DWORD PTR _loghost$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _realhost$[ebp]
	mov	DWORD PTR [edx], eax
; Line 230
	push	58					; 0000003aH
	mov	eax, DWORD PTR _realhost$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_host_strrchr
	add	esp, 8
	mov	DWORD PTR _colon$85685[ebp], eax
; Line 231
	cmp	DWORD PTR _colon$85685[ebp], 0
	je	SHORT $LN5@rlogin_ini
; Line 232
	mov	edx, DWORD PTR _colon$85685[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _colon$85685[ebp]
	add	eax, 1
	mov	DWORD PTR _colon$85685[ebp], eax
$LN5@rlogin_ini:
; Line 241
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_get_remote_username
	add	esp, 4
	mov	DWORD PTR _ruser$[ebp], eax
	cmp	DWORD PTR _ruser$[ebp], 0
	je	SHORT $LN3@rlogin_ini
; Line 242
	mov	edx, DWORD PTR _ruser$[ebp]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	push	eax
	call	_rlogin_startup
	add	esp, 8
; Line 243
	mov	ecx, DWORD PTR _ruser$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 244
	jmp	$LN2@rlogin_ini
$LN3@rlogin_ini:
; Line 247
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_new_prompts
	add	esp, 4
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 248
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [eax], 1
; Line 249
	push	OFFSET $SG85691
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [edx+4], eax
; Line 250
	push	1
	push	OFFSET $SG85692
	call	_dupstr
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_add_prompt
	add	esp, 12					; 0000000cH
; Line 251
	push	0
	push	0
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_get_userpass_input
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$85690[ebp], eax
; Line 252
	cmp	DWORD PTR _ret$85690[ebp], 0
	jl	SHORT $LN2@rlogin_ini
; Line 253
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	push	eax
	call	_rlogin_startup
	add	esp, 8
$LN2@rlogin_ini:
; Line 257
	xor	eax, eax
$LN9@rlogin_ini:
; Line 258
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_init ENDP
_TEXT	ENDS
EXTRN	_strspn:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -16						; size = 4
_z$ = -5						; size = 1
_rlogin$ = 8						; size = 4
_ruser$ = 12						; size = 4
_rlogin_startup PROC
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 135
	mov	BYTE PTR _z$[ebp], 0
; Line 138
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 139
	push	52					; 00000034H
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 140
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 141
	mov	esi, esp
	push	1
	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 142
	mov	eax, DWORD PTR _ruser$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ruser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 143
	mov	esi, esp
	push	1
	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 144
	push	46					; 0000002eH
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 145
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 146
	mov	esi, esp
	push	1
	push	OFFSET $SG85640
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 147
	push	47					; 0000002fH
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 148
	push	OFFSET $SG85641
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_strspn
	add	esp, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 149
	mov	esi, esp
	push	1
	lea	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 151
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 152
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@rlogin_sta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@rlogin_sta:
	DD	1
	DD	$LN4@rlogin_sta
$LN4@rlogin_sta:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@rlogin_sta
$LN3@rlogin_sta:
	DB	122					; 0000007aH
	DB	0
_rlogin_startup ENDP
_TEXT	ENDS
EXTRN	_conf_free:PROC
EXTRN	_free_prompts:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rlogin$ = -4						; size = 4
_handle$ = 8						; size = 4
_rlogin_free PROC
; Line 261
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 262
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 264
	mov	ecx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN2@rlogin_fre
; Line 265
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_free_prompts
	add	esp, 4
$LN2@rlogin_fre:
; Line 266
	mov	ecx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@rlogin_fre
; Line 267
	mov	esi, esp
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@rlogin_fre:
; Line 268
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_conf_free
	add	esp, 4
; Line 269
	mov	ecx, DWORD PTR _rlogin$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 270
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_free ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_conf$ = 12						; size = 4
_rlogin_reconfig PROC
; Line 276
	push	ebp
	mov	ebp, esp
; Line 277
	pop	ebp
	ret	0
_rlogin_reconfig ENDP
; Function compile flags: /Odtp /RTCsu
_ret$85723 = -8					; size = 4
_rlogin$ = -4						; size = 4
_handle$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_rlogin_send PROC
; Line 283
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 284
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN4@rlogin_sen
; Line 287
	xor	eax, eax
	jmp	SHORT $LN5@rlogin_sen
$LN4@rlogin_sen:
; Line 289
	mov	edx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN3@rlogin_sen
; Line 295
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_get_userpass_input
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$85723[ebp], eax
; Line 296
	cmp	DWORD PTR _ret$85723[ebp], 0
	jl	SHORT $LN2@rlogin_sen
; Line 297
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	push	eax
	call	_rlogin_startup
	add	esp, 8
$LN2@rlogin_sen:
; Line 301
	jmp	SHORT $LN1@rlogin_sen
$LN3@rlogin_sen:
; Line 302
	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@rlogin_sen:
; Line 305
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+12]
$LN5@rlogin_sen:
; Line 306
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_send ENDP
; Function compile flags: /Odtp /RTCsu
_rlogin$ = -4						; size = 4
_handle$ = 8						; size = 4
_rlogin_sendbuffer PROC
; Line 312
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 313
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 314
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [ecx+12]
; Line 315
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_sendbuffer ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -24						; size = 12
_rlogin$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_rlogin_size PROC
; Line 321
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 322
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 323
	mov	BYTE PTR _b$[ebp], -1
	mov	BYTE PTR _b$[ebp+1], -1
	mov	BYTE PTR _b$[ebp+2], 115		; 00000073H
	mov	BYTE PTR _b$[ebp+3], 115		; 00000073H
	mov	BYTE PTR _b$[ebp+4], 0
	mov	BYTE PTR _b$[ebp+5], 0
	mov	BYTE PTR _b$[ebp+6], 0
	mov	BYTE PTR _b$[ebp+7], 0
	mov	BYTE PTR _b$[ebp+8], 0
	mov	BYTE PTR _b$[ebp+9], 0
	mov	BYTE PTR _b$[ebp+10], 0
	mov	BYTE PTR _b$[ebp+11], 0
; Line 325
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 326
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 328
	mov	edx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@rlogin_siz
	mov	eax, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@rlogin_siz
$LN1@rlogin_siz:
; Line 329
	jmp	SHORT $LN3@rlogin_siz
$LN2@rlogin_siz:
; Line 331
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	sar	edx, 8
	mov	BYTE PTR _b$[ebp+6], dl
; Line 332
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _b$[ebp+7], cl
; Line 333
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+28]
	sar	eax, 8
	mov	BYTE PTR _b$[ebp+4], al
; Line 334
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _b$[ebp+5], dl
; Line 335
	mov	esi, esp
	push	12					; 0000000cH
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rlogin$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@rlogin_siz:
; Line 337
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@rlogin_siz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@rlogin_siz:
	DD	1
	DD	$LN6@rlogin_siz
$LN6@rlogin_siz:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN5@rlogin_siz
$LN5@rlogin_siz:
	DB	98					; 00000062H
	DB	0
_rlogin_size ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_code$ = 12						; size = 4
_rlogin_special PROC
; Line 343
	push	ebp
	mov	ebp, esp
; Line 346
	pop	ebp
	ret	0
_rlogin_special ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_rlogin_get_specials PROC
; Line 353
	push	ebp
	mov	ebp, esp
; Line 354
	xor	eax, eax
; Line 355
	pop	ebp
	ret	0
_rlogin_get_specials ENDP
; Function compile flags: /Odtp /RTCsu
_rlogin$ = -4						; size = 4
_handle$ = 8						; size = 4
_rlogin_connected PROC
; Line 358
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 359
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 360
	mov	ecx, DWORD PTR _rlogin$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [ecx+4], 0
	setne	al
; Line 361
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_connected ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_rlogin_sendok PROC
; Line 364
	push	ebp
	mov	ebp, esp
; Line 366
	mov	eax, 1
; Line 367
	pop	ebp
	ret	0
_rlogin_sendok ENDP
; Function compile flags: /Odtp /RTCsu
_rlogin$ = -4						; size = 4
_handle$ = 8						; size = 4
_backlog$ = 12						; size = 4
_rlogin_unthrottle PROC
; Line 370
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 371
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 372
	xor	ecx, ecx
	cmp	DWORD PTR _backlog$[ebp], 4096		; 00001000H
	setg	cl
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _rlogin$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rlogin$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 373
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_unthrottle ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_option$ = 12						; size = 4
_rlogin_ldisc PROC
; Line 376
	push	ebp
	mov	ebp, esp
; Line 378
	xor	eax, eax
; Line 379
	pop	ebp
	ret	0
_rlogin_ldisc ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_ldisc$ = 12						; size = 4
_rlogin_provide_ldisc PROC
; Line 382
	push	ebp
	mov	ebp, esp
; Line 384
	pop	ebp
	ret	0
_rlogin_provide_ldisc ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_logctx$ = 12						; size = 4
_rlogin_provide_logctx PROC
; Line 387
	push	ebp
	mov	ebp, esp
; Line 389
	pop	ebp
	ret	0
_rlogin_provide_logctx ENDP
; Function compile flags: /Odtp /RTCsu
_rlogin$ = -4						; size = 4
_handle$ = 8						; size = 4
_rlogin_exitcode PROC
; Line 392
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 393
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _rlogin$[ebp], eax
; Line 394
	mov	ecx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@rlogin_exi
; Line 395
	or	eax, -1
	jmp	SHORT $LN5@rlogin_exi
	jmp	SHORT $LN5@rlogin_exi
$LN4@rlogin_exi:
; Line 396
	mov	edx, DWORD PTR _rlogin$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@rlogin_exi
; Line 397
	mov	eax, 2147483647				; 7fffffffH
	jmp	SHORT $LN5@rlogin_exi
; Line 398
	jmp	SHORT $LN5@rlogin_exi
$LN2@rlogin_exi:
; Line 400
	xor	eax, eax
$LN5@rlogin_exi:
; Line 401
	mov	esp, ebp
	pop	ebp
	ret	0
_rlogin_exitcode ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_rlogin_cfg_info PROC
; Line 407
	push	ebp
	mov	ebp, esp
; Line 408
	xor	eax, eax
; Line 409
	pop	ebp
	ret	0
_rlogin_cfg_info ENDP
_TEXT	ENDS
END
