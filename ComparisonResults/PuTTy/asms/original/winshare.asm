; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winshare.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG88010 DB	'%02x', 00H
	ORG $+3
$SG88019 DB	'%s.%s.%s', 00H
	ORG $+3
$SG88059 DB	'Unable to call CryptProtectMemory: %s', 00H
	ORG $+2
$SG88061 DB	'Local\putty-connshare-mutex', 00H
$SG88064 DB	'CreateMutex("%s") failed: %s', 00H
	ORG $+3
$SG88065 DB	'\\.\pipe\putty-connshare', 00H
	ORG $+3
$SG88070 DB	'%s: %s', 00H
	ORG $+1
$SG88074 DB	'%s: %s', 00H
	ORG $+1
$SG88076 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG88077 DB	'*', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 't', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '*'
	DB	00H, 'd', 00H, 's', 00H, '_', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '*', 00H, 'u', 00H, 's'
	DB	00H, '_', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_platform_ssh_share
EXTRN	__wassert:PROC
EXTRN	_new_named_pipe_listener:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	_new_named_pipe_client:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__CreateMutexA@12:PROC
EXTRN	_memset:PROC
EXTRN	_safefree:PROC
EXTRN	_make_private_security_descriptor:PROC
EXTRN	_dupprintf:PROC
EXTRN	_win_strerror:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winshare.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_sa$88060 = -60						; size = 12
_acl$ = -40						; size = 4
_psd$ = -28						; size = 4
_retsock$ = -20						; size = 4
_mutex$ = -16						; size = 4
_pipename$ = -12					; size = 4
_mutexname$ = -8					; size = 4
_name$ = -4						; size = 4
_pi_name$ = 8						; size = 4
_conf$ = 12						; size = 4
_downplug$ = 16						; size = 4
_upplug$ = 20						; size = 4
_sock$ = 24						; size = 4
_logtext$ = 28						; size = 4
_ds_err$ = 32						; size = 4
_us_err$ = 36						; size = 4
_can_upstream$ = 40					; size = 4
_can_downstream$ = 44					; size = 4
_platform_ssh_share PROC
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 142
	mov	eax, DWORD PTR _pi_name$[ebp]
	push	eax
	call	_obfuscate_name
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax
; Line 143
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN7@platform_s
; Line 145
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_win_strerror
	add	esp, 4
	push	eax
	push	OFFSET $SG88059
	call	_dupprintf
	add	esp, 8
	mov	ecx, DWORD PTR _logtext$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 146
	xor	eax, eax
	jmp	$LN8@platform_s
$LN7@platform_s:
; Line 156
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET $SG88061
	call	_make_name
	add	esp, 8
	mov	DWORD PTR _mutexname$[ebp], eax
; Line 158
	mov	eax, DWORD PTR _logtext$[ebp]
	push	eax
	lea	ecx, DWORD PTR _acl$[ebp]
	push	ecx
	lea	edx, DWORD PTR _psd$[ebp]
	push	edx
	push	2031617					; 001f0001H
	call	_make_private_security_descriptor
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN6@platform_s
; Line 159
	mov	eax, DWORD PTR _mutexname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 160
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 161
	xor	eax, eax
	jmp	$LN8@platform_s
$LN6@platform_s:
; Line 164
	push	12					; 0000000cH
	push	0
	lea	edx, DWORD PTR _sa$88060[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 165
	mov	DWORD PTR _sa$88060[ebp], 12		; 0000000cH
; Line 166
	mov	eax, DWORD PTR _psd$[ebp]
	mov	DWORD PTR _sa$88060[ebp+4], eax
; Line 167
	mov	DWORD PTR _sa$88060[ebp+8], 0
; Line 169
	mov	esi, esp
	mov	ecx, DWORD PTR _mutexname$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _sa$88060[ebp]
	push	edx
	call	DWORD PTR __imp__CreateMutexA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _mutex$[ebp], eax
; Line 171
	cmp	DWORD PTR _mutex$[ebp], 0
	jne	SHORT $LN5@platform_s
; Line 173
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_win_strerror
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _mutexname$[ebp]
	push	eax
	push	OFFSET $SG88064
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _logtext$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 174
	mov	edx, DWORD PTR _mutexname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 176
	mov	esi, esp
	mov	ecx, DWORD PTR _psd$[ebp]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	mov	esi, esp
	mov	edx, DWORD PTR _acl$[ebp]
	push	edx
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 178
	xor	eax, eax
	jmp	$LN8@platform_s
$LN5@platform_s:
; Line 181
	mov	eax, DWORD PTR _mutexname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 182
	mov	esi, esp
	mov	ecx, DWORD PTR _psd$[ebp]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 183
	mov	esi, esp
	mov	edx, DWORD PTR _acl$[ebp]
	push	edx
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 185
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _mutex$[ebp]
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 188
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET $SG88065
	call	_make_name
	add	esp, 8
	mov	DWORD PTR _pipename$[ebp], eax
; Line 190
	mov	edx, DWORD PTR _logtext$[ebp]
	mov	DWORD PTR [edx], 0
; Line 192
	cmp	DWORD PTR _can_downstream$[ebp], 0
	je	$LN4@platform_s
; Line 193
	mov	eax, DWORD PTR _downplug$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pipename$[ebp]
	push	ecx
	call	_new_named_pipe_client
	add	esp, 8
	mov	DWORD PTR _retsock$[ebp], eax
; Line 194
	mov	esi, esp
	mov	edx, DWORD PTR _retsock$[ebp]
	push	edx
	mov	eax, DWORD PTR _retsock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@platform_s
; Line 195
	mov	eax, DWORD PTR _logtext$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 196
	mov	edx, DWORD PTR _logtext$[ebp]
	mov	eax, DWORD PTR _pipename$[ebp]
	mov	DWORD PTR [edx], eax
; Line 197
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR _retsock$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 198
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 199
	mov	esi, esp
	mov	ecx, DWORD PTR _mutex$[ebp]
	push	ecx
	call	DWORD PTR __imp__ReleaseMutex@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 200
	mov	esi, esp
	mov	edx, DWORD PTR _mutex$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 201
	mov	eax, 1
	jmp	$LN8@platform_s
$LN3@platform_s:
; Line 203
	mov	eax, DWORD PTR _ds_err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 204
	mov	esi, esp
	mov	edx, DWORD PTR _retsock$[ebp]
	push	edx
	mov	eax, DWORD PTR _retsock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _pipename$[ebp]
	push	eax
	push	OFFSET $SG88070
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ds_err$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 205
	mov	esi, esp
	mov	edx, DWORD PTR _retsock$[ebp]
	push	edx
	mov	eax, DWORD PTR _retsock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@platform_s:
; Line 208
	cmp	DWORD PTR _can_upstream$[ebp], 0
	je	$LN2@platform_s
; Line 209
	mov	eax, DWORD PTR _upplug$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pipename$[ebp]
	push	ecx
	call	_new_named_pipe_listener
	add	esp, 8
	mov	DWORD PTR _retsock$[ebp], eax
; Line 210
	mov	esi, esp
	mov	edx, DWORD PTR _retsock$[ebp]
	push	edx
	mov	eax, DWORD PTR _retsock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@platform_s
; Line 211
	mov	eax, DWORD PTR _logtext$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 212
	mov	edx, DWORD PTR _logtext$[ebp]
	mov	eax, DWORD PTR _pipename$[ebp]
	mov	DWORD PTR [edx], eax
; Line 213
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR _retsock$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 214
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 215
	mov	esi, esp
	mov	ecx, DWORD PTR _mutex$[ebp]
	push	ecx
	call	DWORD PTR __imp__ReleaseMutex@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 216
	mov	esi, esp
	mov	edx, DWORD PTR _mutex$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 217
	mov	eax, 2
	jmp	$LN8@platform_s
$LN1@platform_s:
; Line 219
	mov	eax, DWORD PTR _us_err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 220
	mov	esi, esp
	mov	edx, DWORD PTR _retsock$[ebp]
	push	edx
	mov	eax, DWORD PTR _retsock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _pipename$[ebp]
	push	eax
	push	OFFSET $SG88074
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _us_err$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 221
	mov	esi, esp
	mov	edx, DWORD PTR _retsock$[ebp]
	push	edx
	mov	eax, DWORD PTR _retsock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@platform_s:
; Line 225
	mov	eax, DWORD PTR _logtext$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@platform_s
	mov	ecx, DWORD PTR _ds_err$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN10@platform_s
	mov	edx, DWORD PTR _us_err$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN10@platform_s
	push	225					; 000000e1H
	push	OFFSET $SG88076
	push	OFFSET $SG88077
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@platform_s:
; Line 227
	mov	ecx, DWORD PTR _pipename$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 228
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 229
	mov	esi, esp
	mov	eax, DWORD PTR _mutex$[ebp]
	push	eax
	call	DWORD PTR __imp__ReleaseMutex@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 230
	mov	esi, esp
	mov	ecx, DWORD PTR _mutex$[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 231
	xor	eax, eax
$LN8@platform_s:
; Line 232
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@platform_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@platform_s:
	DD	3
	DD	$LN14@platform_s
$LN14@platform_s:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN11@platform_s
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@platform_s
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN13@platform_s
$LN13@platform_s:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
$LN12@platform_s:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN11@platform_s:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	100					; 00000064H
	DB	0
_platform_ssh_share ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_dupstr:PROC
EXTRN	_sprintf:PROC
EXTRN	_SHA256_Final:PROC
EXTRN	_SHA256_Bytes:PROC
EXTRN	_SHA256_Init:PROC
EXTRN	_p_CryptProtectMemory:DWORD
EXTRN	_got_crypt:PROC
EXTRN	_strcpy:PROC
EXTRN	_safemalloc:PROC
EXTRN	_strlen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -260						; size = 4
_retbuf$ = -252						; size = 65
_digest$ = -176						; size = 32
_lenbuf$ = -136						; size = 4
_sha$ = -124						; size = 108
_cryptlen$ = -12					; size = 4
_cryptdata$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_realname$ = 8						; size = 4
_obfuscate_name PROC
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 56
	mov	eax, DWORD PTR _realname$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _cryptlen$[ebp], eax
; Line 57
	mov	ecx, DWORD PTR _cryptlen$[ebp]
	add	ecx, 15					; 0000000fH
	mov	DWORD PTR _cryptlen$[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _cryptlen$[ebp]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	mov	DWORD PTR _cryptlen$[ebp], eax
; Line 59
	mov	edx, DWORD PTR _cryptlen$[ebp]
	shl	edx, 4
	mov	DWORD PTR _cryptlen$[ebp], edx
; Line 61
	push	1
	mov	eax, DWORD PTR _cryptlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _cryptdata$[ebp], eax
; Line 62
	mov	ecx, DWORD PTR _cryptlen$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cryptdata$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 63
	mov	eax, DWORD PTR _realname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cryptdata$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 83
	call	_got_crypt
	test	eax, eax
	je	SHORT $LN4@obfuscate_
; Line 85
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _cryptlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _cryptdata$[ebp]
	push	eax
	call	DWORD PTR _p_CryptProtectMemory
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@obfuscate_:
; Line 91
	lea	ecx, DWORD PTR _sha$[ebp]
	push	ecx
	call	_SHA256_Init
	add	esp, 4
; Line 92
	mov	edx, DWORD PTR _cryptlen$[ebp]
	sar	edx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], dl
	mov	eax, DWORD PTR _cryptlen$[ebp]
	sar	eax, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], al
	mov	ecx, DWORD PTR _cryptlen$[ebp]
	sar	ecx, 8
	mov	BYTE PTR _lenbuf$[ebp+2], cl
	mov	dl, BYTE PTR _cryptlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], dl
; Line 93
	push	4
	lea	eax, DWORD PTR _lenbuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sha$[ebp]
	push	ecx
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 94
	mov	edx, DWORD PTR _cryptlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _cryptdata$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sha$[ebp]
	push	ecx
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 95
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	lea	eax, DWORD PTR _sha$[ebp]
	push	eax
	call	_SHA256_Final
	add	esp, 8
; Line 97
	mov	ecx, DWORD PTR _cryptdata$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 102
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@obfuscate_
$LN2@obfuscate_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@obfuscate_:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN1@obfuscate_
; Line 103
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _digest$[ebp+eax]
	push	ecx
	push	OFFSET $SG88010
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _retbuf$[ebp+edx*2]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 105
	jmp	SHORT $LN2@obfuscate_
$LN1@obfuscate_:
; Line 107
	lea	ecx, DWORD PTR _retbuf$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
; Line 108
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@obfuscate_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@obfuscate_:
	DD	4
	DD	$LN11@obfuscate_
$LN11@obfuscate_:
	DD	-124					; ffffff84H
	DD	108					; 0000006cH
	DD	$LN7@obfuscate_
	DD	-136					; ffffff78H
	DD	4
	DD	$LN8@obfuscate_
	DD	-176					; ffffff50H
	DD	32					; 00000020H
	DD	$LN9@obfuscate_
	DD	-252					; ffffff04H
	DD	65					; 00000041H
	DD	$LN10@obfuscate_
$LN10@obfuscate_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN9@obfuscate_:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN8@obfuscate_:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN7@obfuscate_:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	0
_obfuscate_name ENDP
_TEXT	ENDS
EXTRN	_get_username:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_retname$ = -8						; size = 4
_username$ = -4						; size = 4
_prefix$ = 8						; size = 4
_name$ = 12						; size = 4
_make_name PROC
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 114
	call	_get_username
	mov	DWORD PTR _username$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _username$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	push	OFFSET $SG88019
	call	_dupprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _retname$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _username$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 118
	mov	eax, DWORD PTR _retname$[ebp]
; Line 119
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_make_name ENDP
_TEXT	ENDS
PUBLIC	_platform_ssh_share_cleanup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = 8						; size = 4
_platform_ssh_share_cleanup PROC
; Line 235
	push	ebp
	mov	ebp, esp
; Line 236
	pop	ebp
	ret	0
_platform_ssh_share_cleanup ENDP
_TEXT	ENDS
END
