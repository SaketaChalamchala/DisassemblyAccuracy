; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winhandl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG85795 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85796 DB	'h', 00H, '-', 00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'H', 00H, 'T'
	DB	00H, '_', 00H, 'O', 00H, 'U', 00H, 'T', 00H, 'P', 00H, 'U', 00H
	DB	'T', 00H, 00H, 00H
	ORG $+2
$SG85798 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85799 DB	'h', 00H, '-', 00H, '>', 00H, 'u', 00H, '.', 00H, 'o', 00H
	DB	'.', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'g', 00H, 'o', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, 'o', 00H, 'f', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'E', 00H, 'O', 00H, 'F', 00H, '_'
	DB	00H, 'N', 00H, 'O', 00H, 00H, 00H
	ORG $+2
$SG85804 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85805 DB	'h', 00H, '-', 00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'H', 00H, 'T'
	DB	00H, '_', 00H, 'O', 00H, 'U', 00H, 'T', 00H, 'P', 00H, 'U', 00H
	DB	'T', 00H, 00H, 00H
	ORG $+2
$SG85835 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85836 DB	'h', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '!', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'u', 00H, '.', 00H, 'g', 00H, '.'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'b', 00H, 'u', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
$SG85846 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85847 DB	'h', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H
	DB	's', 00H, '_', 00H, 'b', 00H, 'y', 00H, '_', 00H, 'e', 00H, 'v'
	DB	00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	00H, 00H
$SG85871 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85872 DB	'h', 00H, '-', 00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'H', 00H, 'T'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H, 'U', 00H, 'T', 00H
	DB	00H, 00H
$SG85877 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG85878 DB	'h', 00H, '-', 00H, '>', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'H', 00H, 'T'
	DB	00H, '_', 00H, 'O', 00H, 'U', 00H, 'T', 00H, 'P', 00H, 'U', 00H
	DB	'T', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_handle_input_new
EXTRN	__imp__CreateThread@24:PROC
EXTRN	_add234:PROC
EXTRN	_newtree234:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	_safemalloc:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_handles_by_evtomain DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winhandl.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_in_threadid$ = -12					; size = 4
_h$ = -4						; size = 4
_handle$ = 8						; size = 4
_gotdata$ = 12						; size = 4
_privdata$ = 16						; size = 4
_flags$ = 20						; size = 4
_handle_input_new PROC
; Line 407
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 408
	push	4148					; 00001034H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _h$[ebp], eax
; Line 411
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], 0
; Line 412
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _handle$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 413
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 414
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 415
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _gotdata$[ebp]
	mov	DWORD PTR [eax+4144], ecx
; Line 416
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 417
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 418
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 419
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _privdata$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 420
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 422
	cmp	DWORD PTR _handles_by_evtomain, 0
	jne	SHORT $LN1@handle_inp
; Line 423
	push	OFFSET _handle_cmp_evtomain
	call	_newtree234
	add	esp, 4
	mov	DWORD PTR _handles_by_evtomain, eax
$LN1@handle_inp:
; Line 424
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handles_by_evtomain
	push	ecx
	call	_add234
	add	esp, 8
; Line 427
	mov	esi, esp
	lea	edx, DWORD PTR _in_threadid$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET _handle_input_threadfunc@4
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 428
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 430
	mov	eax, DWORD PTR _h$[ebp]
; Line 431
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@handle_inp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@handle_inp:
	DD	1
	DD	$LN5@handle_inp
$LN5@handle_inp:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@handle_inp
$LN4@handle_inp:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_handle_input_new ENDP
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__GetOverlappedResult@16:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	_memset:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T85919 = -49						; size = 1
_readlen$ = -48						; size = 4
_readret$ = -44						; size = 4
_oev$ = -40						; size = 4
_povl$ = -36						; size = 4
_ovl$ = -28						; size = 20
_ctx$ = -4						; size = 4
_param$ = 8						; size = 4
_handle_input_threadfunc@4 PROC
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T85919[ebp], 0
; Line 115
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 120
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 1
	je	SHORT $LN18@handle_inp@2
; Line 121
	lea	eax, DWORD PTR _ovl$[ebp]
	mov	DWORD PTR _povl$[ebp], eax
; Line 122
	mov	esi, esp
	push	0
	push	0
	push	1
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR $T85919[ebp], 1
	mov	DWORD PTR _oev$[ebp], eax
; Line 123
	jmp	SHORT $LN17@handle_inp@2
$LN18@handle_inp@2:
; Line 124
	mov	DWORD PTR _povl$[ebp], 0
$LN17@handle_inp@2:
; Line 127
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 4
	je	SHORT $LN16@handle_inp@2
; Line 128
	mov	DWORD PTR _readlen$[ebp], 1
; Line 129
	jmp	SHORT $LN14@handle_inp@2
$LN16@handle_inp@2:
; Line 130
	mov	DWORD PTR _readlen$[ebp], 4096		; 00001000H
$LN14@handle_inp@2:
; Line 132
	mov	eax, 1
	test	eax, eax
	je	$LN13@handle_inp@2
; Line 133
	cmp	DWORD PTR _povl$[ebp], 0
	je	SHORT $LN12@handle_inp@2
; Line 134
	push	20					; 00000014H
	push	0
	mov	ecx, DWORD PTR _povl$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 135
	cmp	BYTE PTR $T85919[ebp], 0
	jne	SHORT $LN22@handle_inp@2
	push	OFFSET $LN23@handle_inp@2
	call	__RTC_UninitUse
	add	esp, 4
$LN22@handle_inp@2:
	mov	edx, DWORD PTR _povl$[ebp]
	mov	eax, DWORD PTR _oev$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN12@handle_inp@2:
; Line 137
	mov	esi, esp
	mov	ecx, DWORD PTR _povl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 4132				; 00001024H
	push	edx
	mov	eax, DWORD PTR _readlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _readret$[ebp], eax
; Line 138
	cmp	DWORD PTR _readret$[ebp], 0
	jne	SHORT $LN11@handle_inp@2
; Line 139
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4136], eax
; Line 140
	jmp	SHORT $LN10@handle_inp@2
$LN11@handle_inp@2:
; Line 141
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4136], 0
$LN10@handle_inp@2:
; Line 142
	cmp	DWORD PTR _povl$[ebp], 0
	je	$LN9@handle_inp@2
	cmp	DWORD PTR _readret$[ebp], 0
	jne	SHORT $LN9@handle_inp@2
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4136], 997		; 000003e5H
	jne	SHORT $LN9@handle_inp@2
; Line 143
	mov	esi, esp
	push	-1
	mov	ecx, DWORD PTR _povl$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 144
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 4132				; 00001024H
	push	eax
	mov	ecx, DWORD PTR _povl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__GetOverlappedResult@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _readret$[ebp], eax
; Line 145
	cmp	DWORD PTR _readret$[ebp], 0
	jne	SHORT $LN8@handle_inp@2
; Line 146
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4136], eax
; Line 147
	jmp	SHORT $LN9@handle_inp@2
$LN8@handle_inp@2:
; Line 148
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4136], 0
$LN9@handle_inp@2:
; Line 151
	cmp	DWORD PTR _readret$[ebp], 0
	jne	SHORT $LN6@handle_inp@2
; Line 159
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4136], 109		; 0000006dH
	jne	SHORT $LN5@handle_inp@2
; Line 160
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+4136], 0
$LN5@handle_inp@2:
; Line 161
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+4132], 0
$LN6@handle_inp@2:
; Line 165
	cmp	DWORD PTR _readret$[ebp], 0
	je	SHORT $LN4@handle_inp@2
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4132], 0
	jne	SHORT $LN4@handle_inp@2
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 2
	je	SHORT $LN4@handle_inp@2
; Line 166
	jmp	$LN14@handle_inp@2
$LN4@handle_inp@2:
; Line 168
	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 170
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4132], 0
	jne	SHORT $LN3@handle_inp@2
; Line 171
	jmp	SHORT $LN13@handle_inp@2
$LN3@handle_inp@2:
; Line 173
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 174
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@handle_inp@2
; Line 175
	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 176
	jmp	SHORT $LN13@handle_inp@2
$LN2@handle_inp@2:
; Line 178
	jmp	$LN14@handle_inp@2
$LN13@handle_inp@2:
; Line 180
	cmp	DWORD PTR _povl$[ebp], 0
	je	SHORT $LN1@handle_inp@2
; Line 181
	cmp	BYTE PTR $T85919[ebp], 0
	jne	SHORT $LN24@handle_inp@2
	push	OFFSET $LN23@handle_inp@2
	call	__RTC_UninitUse
	add	esp, 4
$LN24@handle_inp@2:
	mov	esi, esp
	mov	edx, DWORD PTR _oev$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@handle_inp@2:
; Line 183
	xor	eax, eax
; Line 184
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@handle_inp@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN27@handle_inp@2:
	DD	1
	DD	$LN26@handle_inp@2
$LN26@handle_inp@2:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN25@handle_inp@2
$LN25@handle_inp@2:
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	108					; 0000006cH
	DB	0
$LN23@handle_inp@2:
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
_handle_input_threadfunc@4 ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_handle_cmp_evtomain PROC
; Line 380
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 381
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 382
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 384
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN4@handle_cmp
; Line 385
	or	eax, -1
	jmp	SHORT $LN5@handle_cmp
	jmp	SHORT $LN5@handle_cmp
$LN4@handle_cmp:
; Line 386
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@handle_cmp
; Line 387
	mov	eax, 1
	jmp	SHORT $LN5@handle_cmp
; Line 388
	jmp	SHORT $LN5@handle_cmp
$LN2@handle_cmp:
; Line 389
	xor	eax, eax
$LN5@handle_cmp:
; Line 390
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_cmp_evtomain ENDP
_TEXT	ENDS
PUBLIC	_handle_output_new
EXTRN	_bufchain_init:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_out_threadid$ = -12					; size = 4
_h$ = -4						; size = 4
_handle$ = 8						; size = 4
_sentdata$ = 12						; size = 4
_privdata$ = 16						; size = 4
_flags$ = 20						; size = 4
_handle_output_new PROC
; Line 435
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 436
	push	4148					; 00001034H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _h$[ebp], eax
; Line 439
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], 1
; Line 440
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _handle$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 441
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 442
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 443
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 444
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 445
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 446
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 447
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _privdata$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 448
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	_bufchain_init
	add	esp, 4
; Line 449
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+68], 0
; Line 450
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _sentdata$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 451
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 453
	cmp	DWORD PTR _handles_by_evtomain, 0
	jne	SHORT $LN1@handle_out
; Line 454
	push	OFFSET _handle_cmp_evtomain
	call	_newtree234
	add	esp, 4
	mov	DWORD PTR _handles_by_evtomain, eax
$LN1@handle_out:
; Line 455
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handles_by_evtomain
	push	ecx
	call	_add234
	add	esp, 8
; Line 458
	mov	esi, esp
	lea	edx, DWORD PTR _out_threadid$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET _handle_output_threadfunc@4
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 460
	mov	eax, DWORD PTR _h$[ebp]
; Line 461
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@handle_out
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@handle_out:
	DD	1
	DD	$LN5@handle_out
$LN5@handle_out:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@handle_out
$LN4@handle_out:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_handle_output_new ENDP
_TEXT	ENDS
EXTRN	__imp__WriteFile@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T85933 = -45						; size = 1
_writeret$ = -44					; size = 4
_oev$ = -40						; size = 4
_povl$ = -36						; size = 4
_ovl$ = -28						; size = 20
_ctx$ = -4						; size = 4
_param$ = 8						; size = 4
_handle_output_threadfunc@4 PROC
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T85933[ebp], 0
; Line 268
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 273
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 1
	je	SHORT $LN13@handle_out@2
; Line 274
	lea	eax, DWORD PTR _ovl$[ebp]
	mov	DWORD PTR _povl$[ebp], eax
; Line 275
	mov	esi, esp
	push	0
	push	0
	push	1
	push	0
	call	DWORD PTR __imp__CreateEventA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR $T85933[ebp], 1
	mov	DWORD PTR _oev$[ebp], eax
; Line 276
	jmp	SHORT $LN11@handle_out@2
$LN13@handle_out@2:
; Line 277
	mov	DWORD PTR _povl$[ebp], 0
$LN11@handle_out@2:
; Line 280
	mov	ecx, 1
	test	ecx, ecx
	je	$LN10@handle_out@2
; Line 281
	mov	esi, esp
	push	-1
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 282
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN9@handle_out@2
; Line 283
	mov	esi, esp
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 284
	jmp	$LN10@handle_out@2
$LN9@handle_out@2:
; Line 286
	cmp	DWORD PTR _povl$[ebp], 0
	je	SHORT $LN8@handle_out@2
; Line 287
	push	20					; 00000014H
	push	0
	mov	ecx, DWORD PTR _povl$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 288
	cmp	BYTE PTR $T85933[ebp], 0
	jne	SHORT $LN16@handle_out@2
	push	OFFSET $LN17@handle_out@2
	call	__RTC_UninitUse
	add	esp, 4
$LN16@handle_out@2:
	mov	edx, DWORD PTR _povl$[ebp]
	mov	eax, DWORD PTR _oev$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN8@handle_out@2:
; Line 292
	mov	esi, esp
	mov	ecx, DWORD PTR _povl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__WriteFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _writeret$[ebp], eax
; Line 293
	cmp	DWORD PTR _writeret$[ebp], 0
	jne	SHORT $LN7@handle_out@2
; Line 294
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 295
	jmp	SHORT $LN6@handle_out@2
$LN7@handle_out@2:
; Line 296
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+48], 0
$LN6@handle_out@2:
; Line 297
	cmp	DWORD PTR _povl$[ebp], 0
	je	SHORT $LN5@handle_out@2
	cmp	DWORD PTR _writeret$[ebp], 0
	jne	SHORT $LN5@handle_out@2
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 997				; 000003e5H
	jne	SHORT $LN5@handle_out@2
; Line 299
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _povl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__GetOverlappedResult@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _writeret$[ebp], eax
; Line 300
	cmp	DWORD PTR _writeret$[ebp], 0
	jne	SHORT $LN4@handle_out@2
; Line 301
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 302
	jmp	SHORT $LN5@handle_out@2
$LN4@handle_out@2:
; Line 303
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+48], 0
$LN5@handle_out@2:
; Line 306
	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 307
	cmp	DWORD PTR _writeret$[ebp], 0
	jne	SHORT $LN2@handle_out@2
; Line 308
	jmp	SHORT $LN10@handle_out@2
$LN2@handle_out@2:
; Line 309
	jmp	$LN11@handle_out@2
$LN10@handle_out@2:
; Line 311
	cmp	DWORD PTR _povl$[ebp], 0
	je	SHORT $LN1@handle_out@2
; Line 312
	cmp	BYTE PTR $T85933[ebp], 0
	jne	SHORT $LN18@handle_out@2
	push	OFFSET $LN17@handle_out@2
	call	__RTC_UninitUse
	add	esp, 4
$LN18@handle_out@2:
	mov	esi, esp
	mov	edx, DWORD PTR _oev$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@handle_out@2:
; Line 314
	xor	eax, eax
; Line 315
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@handle_out@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN21@handle_out@2:
	DD	1
	DD	$LN20@handle_out@2
$LN20@handle_out@2:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN19@handle_out@2
$LN19@handle_out@2:
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	108					; 0000006cH
	DB	0
$LN17@handle_out@2:
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
_handle_output_threadfunc@4 ENDP
_TEXT	ENDS
PUBLIC	_handle_add_foreign_event
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = -4						; size = 4
_event$ = 8						; size = 4
_callback$ = 12						; size = 4
_ctx$ = 16						; size = 4
_handle_add_foreign_event PROC
; Line 465
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 466
	push	4148					; 00001034H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _h$[ebp], eax
; Line 468
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], 2
; Line 469
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+4], -1
; Line 470
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _event$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 471
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+12], -1
; Line 472
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 473
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 474
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 475
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 476
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 477
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 478
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 480
	cmp	DWORD PTR _handles_by_evtomain, 0
	jne	SHORT $LN1@handle_add
; Line 481
	push	OFFSET _handle_cmp_evtomain
	call	_newtree234
	add	esp, 4
	mov	DWORD PTR _handles_by_evtomain, eax
$LN1@handle_add:
; Line 482
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	mov	eax, DWORD PTR _handles_by_evtomain
	push	eax
	call	_add234
	add	esp, 8
; Line 484
	mov	eax, DWORD PTR _h$[ebp]
; Line 485
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_add_foreign_event ENDP
_TEXT	ENDS
PUBLIC	_handle_write
EXTRN	_bufchain_size:PROC
EXTRN	_bufchain_add:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_handle_write PROC
; Line 488
	push	ebp
	mov	ebp, esp
; Line 489
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN3@handle_wri
	push	489					; 000001e9H
	push	OFFSET $SG85795
	push	OFFSET $SG85796
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@handle_wri:
; Line 490
	mov	edx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN4@handle_wri
	push	490					; 000001eaH
	push	OFFSET $SG85798
	push	OFFSET $SG85799
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@handle_wri:
; Line 491
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	_bufchain_add
	add	esp, 12					; 0000000cH
; Line 492
	mov	ecx, DWORD PTR _h$[ebp]
	add	ecx, 4
	push	ecx
	call	_handle_try_output
	add	esp, 4
; Line 493
	mov	edx, DWORD PTR _h$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	_bufchain_size
	add	esp, 4
; Line 494
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_write ENDP
_TEXT	ENDS
EXTRN	_bufchain_prefix:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sendlen$ = -20						; size = 4
_senddata$ = -8						; size = 4
_ctx$ = 8						; size = 4
_handle_try_output PROC
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 322
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN3@handle_try@2
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@handle_try@2
; Line 323
	lea	edx, DWORD PTR _sendlen$[ebp]
	push	edx
	lea	eax, DWORD PTR _senddata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
; Line 324
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _senddata$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 325
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _sendlen$[ebp]
	mov	DWORD PTR [ecx+40], edx
; Line 326
	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 327
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 328
	jmp	SHORT $LN4@handle_try@2
$LN3@handle_try@2:
; Line 329
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN4@handle_try@2
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@handle_try@2
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+64], 1
	jne	SHORT $LN4@handle_try@2
; Line 330
	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 331
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx], -1
; Line 332
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+64], 2
$LN4@handle_try@2:
; Line 334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@handle_try@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@handle_try@2:
	DD	2
	DD	$LN8@handle_try@2
$LN8@handle_try@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@handle_try@2
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@handle_try@2
$LN7@handle_try@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN6@handle_try@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_handle_try_output ENDP
_TEXT	ENDS
PUBLIC	_handle_write_eof
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_handle_write_eof PROC
; Line 497
	push	ebp
	mov	ebp, esp
; Line 505
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN4@handle_wri@3
	push	505					; 000001f9H
	push	OFFSET $SG85804
	push	OFFSET $SG85805
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@handle_wri@3:
; Line 506
	mov	edx, DWORD PTR _h$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+68], 0
	sete	al
	test	eax, eax
	jne	SHORT $LN2@handle_wri@3
; Line 507
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+68], 1
; Line 508
	mov	edx, DWORD PTR _h$[ebp]
	add	edx, 4
	push	edx
	call	_handle_try_output
	add	esp, 4
$LN2@handle_wri@3:
; Line 510
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_write_eof ENDP
_TEXT	ENDS
PUBLIC	_handle_get_events
EXTRN	_saferealloc:PROC
EXTRN	_index234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -20						; size = 4
_n$ = -16						; size = 4
_i$ = -12						; size = 4
_h$ = -8						; size = 4
_ret$ = -4						; size = 4
_nevents$ = 8						; size = 4
_handle_get_events PROC
; Line 513
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 522
	mov	DWORD PTR _ret$[ebp], 0
; Line 523
	mov	DWORD PTR _size$[ebp], 0
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _n$[ebp], eax
; Line 524
	cmp	DWORD PTR _handles_by_evtomain, 0
	je	SHORT $LN6@handle_get
; Line 525
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@handle_get
$LN4@handle_get:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@handle_get:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _handles_by_evtomain
	push	eax
	call	_index234
	add	esp, 8
	mov	DWORD PTR _h$[ebp], eax
	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN6@handle_get
; Line 526
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN2@handle_get
; Line 527
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jl	SHORT $LN1@handle_get
; Line 528
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _size$[ebp], eax
; Line 529
	push	4
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN1@handle_get:
; Line 531
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN2@handle_get:
; Line 533
	jmp	SHORT $LN4@handle_get
$LN6@handle_get:
; Line 536
	mov	ecx, DWORD PTR _nevents$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 537
	mov	eax, DWORD PTR _ret$[ebp]
; Line 538
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_get_events ENDP
_TEXT	ENDS
PUBLIC	_handle_free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_handle_free PROC
; Line 551
	push	ebp
	mov	ebp, esp
	push	esi
; Line 558
	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN7@handle_fre
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@handle_fre
$LN7@handle_fre:
	push	558					; 0000022eH
	push	OFFSET $SG85835
	push	OFFSET $SG85836
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@handle_fre:
; Line 559
	mov	edx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN4@handle_fre
; Line 564
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+16], 1
	jmp	SHORT $LN5@handle_fre
$LN4@handle_fre:
; Line 565
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN2@handle_fre
; Line 570
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	_handle_destroy
	add	esp, 4
; Line 571
	jmp	SHORT $LN5@handle_fre
$LN2@handle_fre:
; Line 577
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+16], 1
; Line 578
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+20], 1
; Line 579
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+28], 1
; Line 580
	mov	esi, esp
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@handle_fre:
; Line 582
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_free ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
EXTRN	_del234:PROC
EXTRN	_bufchain_clear:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_handle_destroy PROC
; Line 541
	push	ebp
	mov	ebp, esp
	push	esi
; Line 542
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@handle_des
; Line 543
	mov	ecx, DWORD PTR _h$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	call	_bufchain_clear
	add	esp, 4
$LN1@handle_des:
; Line 544
	mov	esi, esp
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 545
	mov	esi, esp
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 546
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handles_by_evtomain
	push	ecx
	call	_del234
	add	esp, 8
; Line 547
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 548
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_destroy ENDP
_TEXT	ENDS
PUBLIC	_handle_got_event
EXTRN	_bufchain_consume:PROC
EXTRN	_find234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -12						; size = 4
_backlog$85856 = -8					; size = 4
_h$ = -4						; size = 4
_event$ = 8						; size = 4
_handle_got_event PROC
; Line 585
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 588
	cmp	DWORD PTR _handles_by_evtomain, 0
	jne	SHORT $LN16@handle_got
	push	588					; 0000024cH
	push	OFFSET $SG85846
	push	OFFSET $SG85847
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@handle_got:
; Line 589
	push	OFFSET _handle_find_evtomain
	lea	ecx, DWORD PTR _event$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handles_by_evtomain
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _h$[ebp], eax
; Line 590
	cmp	DWORD PTR _h$[ebp], 0
	jne	SHORT $LN13@handle_got
; Line 599
	jmp	$LN14@handle_got
$LN13@handle_got:
; Line 602
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN12@handle_got
; Line 609
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN11@handle_got
; Line 610
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	_handle_destroy
	add	esp, 4
; Line 611
	jmp	SHORT $LN10@handle_got
$LN11@handle_got:
; Line 612
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 613
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 614
	mov	esi, esp
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@handle_got:
; Line 616
	jmp	$LN14@handle_got
$LN12@handle_got:
; Line 619
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv81[ebp], edx
	cmp	DWORD PTR tv81[ebp], 0
	je	SHORT $LN7@handle_got
	cmp	DWORD PTR tv81[ebp], 1
	je	$LN4@handle_got
	cmp	DWORD PTR tv81[ebp], 2
	je	$LN1@handle_got
	jmp	$LN14@handle_got
$LN7@handle_got:
; Line 623
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 628
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [ecx+4136], 0
	jne	SHORT $LN6@handle_got
; Line 632
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 633
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+4140]
	neg	ecx
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+4144]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 634
	jmp	SHORT $LN5@handle_got
$LN6@handle_got:
; Line 635
	mov	esi, esp
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+4136]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+4144]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _backlog$85856[ebp], eax
; Line 636
	mov	edx, DWORD PTR _backlog$85856[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 4
	push	eax
	call	_handle_throttle
	add	esp, 8
$LN5@handle_got:
; Line 638
	jmp	$LN14@handle_got
$LN4@handle_got:
; Line 641
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 648
	mov	edx, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN3@handle_got
; Line 654
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+24], 1
; Line 655
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	neg	edx
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 656
	jmp	SHORT $LN2@handle_got
$LN3@handle_got:
; Line 657
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	_bufchain_consume
	add	esp, 8
; Line 658
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	_bufchain_size
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 659
	mov	ecx, DWORD PTR _h$[ebp]
	add	ecx, 4
	push	ecx
	call	_handle_try_output
	add	esp, 4
$LN2@handle_got:
; Line 661
	jmp	SHORT $LN14@handle_got
$LN1@handle_got:
; Line 665
	mov	esi, esp
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@handle_got:
; Line 668
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_got_event ENDP
; Function compile flags: /Odtp /RTCsu
_ctx$ = 8						; size = 4
_backlog$ = 12						; size = 4
_handle_throttle PROC
; Line 192
	push	ebp
	mov	ebp, esp
	push	esi
; Line 193
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@handle_thr
; Line 194
	jmp	SHORT $LN4@handle_thr
$LN3@handle_thr:
; Line 201
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN2@handle_thr
; Line 202
	jmp	SHORT $LN4@handle_thr
$LN2@handle_thr:
; Line 208
	cmp	DWORD PTR _backlog$[ebp], 32768		; 00008000H
	jge	SHORT $LN4@handle_thr
; Line 209
	mov	esi, esp
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 210
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+24], 1
$LN4@handle_thr:
; Line 212
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_throttle ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_handle_find_evtomain PROC
; Line 393
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 394
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 395
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 397
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN4@handle_fin
; Line 398
	or	eax, -1
	jmp	SHORT $LN5@handle_fin
	jmp	SHORT $LN5@handle_fin
$LN4@handle_fin:
; Line 399
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@handle_fin
; Line 400
	mov	eax, 1
	jmp	SHORT $LN5@handle_fin
; Line 401
	jmp	SHORT $LN5@handle_fin
$LN2@handle_fin:
; Line 402
	xor	eax, eax
$LN5@handle_fin:
; Line 403
	mov	esp, ebp
	pop	ebp
	ret	0
_handle_find_evtomain ENDP
_TEXT	ENDS
PUBLIC	_handle_unthrottle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_backlog$ = 12						; size = 4
_handle_unthrottle PROC
; Line 671
	push	ebp
	mov	ebp, esp
; Line 672
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@handle_unt
	push	672					; 000002a0H
	push	OFFSET $SG85871
	push	OFFSET $SG85872
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@handle_unt:
; Line 673
	mov	edx, DWORD PTR _backlog$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	add	eax, 4
	push	eax
	call	_handle_throttle
	add	esp, 8
; Line 674
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_unthrottle ENDP
_TEXT	ENDS
PUBLIC	_handle_backlog
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_handle_backlog PROC
; Line 677
	push	ebp
	mov	ebp, esp
; Line 678
	mov	eax, DWORD PTR _h$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN3@handle_bac
	push	678					; 000002a6H
	push	OFFSET $SG85877
	push	OFFSET $SG85878
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@handle_bac:
; Line 679
	mov	edx, DWORD PTR _h$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	_bufchain_size
	add	esp, 4
; Line 680
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_handle_backlog ENDP
_TEXT	ENDS
PUBLIC	_handle_get_privdata
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_h$ = 8							; size = 4
_handle_get_privdata PROC
; Line 683
	push	ebp
	mov	ebp, esp
; Line 684
	mov	eax, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [eax+32]
; Line 685
	pop	ebp
	ret	0
_handle_get_privdata ENDP
_TEXT	ENDS
END
