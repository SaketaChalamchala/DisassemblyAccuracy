; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshsha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh_sha1
PUBLIC	_ssh_hmac_sha1
PUBLIC	_ssh_hmac_sha1_96
PUBLIC	_ssh_hmac_sha1_buggy
PUBLIC	_ssh_hmac_sha1_96_buggy
CONST	SEGMENT
_ssh_sha1 DD	FLAT:_sha1_init
	DD	FLAT:_sha1_bytes
	DD	FLAT:_sha1_final
	DD	014H
	DD	FLAT:$SG6027
_ssh_hmac_sha1 DD FLAT:_sha1_make_context
	DD	FLAT:_sha1_free_context
	DD	FLAT:_sha1_key
	DD	FLAT:_sha1_generate
	DD	FLAT:_sha1_verify
	DD	FLAT:_hmacsha1_start
	DD	FLAT:_hmacsha1_bytes
	DD	FLAT:_hmacsha1_genresult
	DD	FLAT:_hmacsha1_verresult
	DD	FLAT:$SG6188
	DD	014H
	DD	FLAT:$SG6189
_ssh_hmac_sha1_96 DD FLAT:_sha1_make_context
	DD	FLAT:_sha1_free_context
	DD	FLAT:_sha1_key
	DD	FLAT:_sha1_96_generate
	DD	FLAT:_sha1_96_verify
	DD	FLAT:_hmacsha1_start
	DD	FLAT:_hmacsha1_bytes
	DD	FLAT:_hmacsha1_96_genresult
	DD	FLAT:_hmacsha1_96_verresult
	DD	FLAT:$SG6190
	DD	0cH
	DD	FLAT:$SG6191
_ssh_hmac_sha1_buggy DD FLAT:_sha1_make_context
	DD	FLAT:_sha1_free_context
	DD	FLAT:_sha1_key_buggy
	DD	FLAT:_sha1_generate
	DD	FLAT:_sha1_verify
	DD	FLAT:_hmacsha1_start
	DD	FLAT:_hmacsha1_bytes
	DD	FLAT:_hmacsha1_genresult
	DD	FLAT:_hmacsha1_verresult
	DD	FLAT:$SG6192
	DD	014H
	DD	FLAT:$SG6193
_ssh_hmac_sha1_96_buggy DD FLAT:_sha1_make_context
	DD	FLAT:_sha1_free_context
	DD	FLAT:_sha1_key_buggy
	DD	FLAT:_sha1_96_generate
	DD	FLAT:_sha1_96_verify
	DD	FLAT:_hmacsha1_start
	DD	FLAT:_hmacsha1_bytes
	DD	FLAT:_hmacsha1_96_genresult
	DD	FLAT:_hmacsha1_96_verresult
	DD	FLAT:$SG6194
	DD	0cH
	DD	FLAT:$SG6195
CONST	ENDS
_DATA	SEGMENT
$SG6027	DB	'SHA-1', 00H
	ORG $+2
$SG6188	DB	'hmac-sha1', 00H
	ORG $+2
$SG6189	DB	'HMAC-SHA1', 00H
	ORG $+2
$SG6190	DB	'hmac-sha1-96', 00H
	ORG $+3
$SG6191	DB	'HMAC-SHA1-96', 00H
	ORG $+3
$SG6192	DB	'hmac-sha1', 00H
	ORG $+2
$SG6193	DB	'bug-compatible HMAC-SHA1', 00H
	ORG $+3
$SG6194	DB	'hmac-sha1-96', 00H
	ORG $+3
$SG6195	DB	'bug-compatible HMAC-SHA1-96', 00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHATransform
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshsha.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_tmp$5952 = -376					; size = 4
_tmp$5946 = -372					; size = 4
_tmp$5940 = -368					; size = 4
_tmp$5934 = -364					; size = 4
_tmp$5929 = -360					; size = 4
_t$ = -356						; size = 4
_e$ = -352						; size = 4
_d$ = -348						; size = 4
_c$ = -344						; size = 4
_b$ = -340						; size = 4
_a$ = -336						; size = 4
_w$ = -328						; size = 320
__$ArrayPad$ = -4					; size = 4
_digest$ = 8						; size = 4
_block$ = 12						; size = 4
_SHATransform PROC
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 46
	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN18@SHATransfo
$LN17@SHATransfo:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN18@SHATransfo:
	cmp	DWORD PTR _t$[ebp], 16			; 00000010H
	jge	SHORT $LN16@SHATransfo
; Line 47
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _w$[ebp+ecx*4], edx
	jmp	SHORT $LN17@SHATransfo
$LN16@SHATransfo:
; Line 49
	mov	DWORD PTR _t$[ebp], 16			; 00000010H
	jmp	SHORT $LN15@SHATransfo
$LN14@SHATransfo:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN15@SHATransfo:
	cmp	DWORD PTR _t$[ebp], 80			; 00000050H
	jge	SHORT $LN13@SHATransfo
; Line 50
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+ecx*4-12]
	xor	eax, DWORD PTR _w$[ebp+edx*4-32]
	mov	ecx, DWORD PTR _t$[ebp]
	xor	eax, DWORD PTR _w$[ebp+ecx*4-56]
	mov	edx, DWORD PTR _t$[ebp]
	xor	eax, DWORD PTR _w$[ebp+edx*4-64]
	mov	DWORD PTR _tmp$5929[ebp], eax
; Line 51
	mov	eax, DWORD PTR _tmp$5929[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _tmp$5929[ebp]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _w$[ebp+edx*4], eax
; Line 52
	jmp	SHORT $LN14@SHATransfo
$LN13@SHATransfo:
; Line 54
	mov	eax, DWORD PTR _digest$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
; Line 55
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 56
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 57
	mov	eax, DWORD PTR _digest$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _d$[ebp], ecx
; Line 58
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _e$[ebp], eax
; Line 60
	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN12@SHATransfo
$LN11@SHATransfo:
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
$LN12@SHATransfo:
	cmp	DWORD PTR _t$[ebp], 20			; 00000014H
	jge	$LN10@SHATransfo
; Line 62
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	or	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _d$[ebp]
	or	ecx, eax
	add	edx, DWORD PTR _e$[ebp]
	add	ecx, edx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+edx*4]
	lea	ecx, DWORD PTR [ecx+eax+1518500249]
	mov	DWORD PTR _tmp$5934[ebp], ecx
; Line 63
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _e$[ebp], edx
; Line 64
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 2
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
; Line 66
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 67
	mov	ecx, DWORD PTR _tmp$5934[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 68
	jmp	$LN11@SHATransfo
$LN10@SHATransfo:
; Line 69
	mov	DWORD PTR _t$[ebp], 20			; 00000014H
	jmp	SHORT $LN9@SHATransfo
$LN8@SHATransfo:
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 1
	mov	DWORD PTR _t$[ebp], edx
$LN9@SHATransfo:
	cmp	DWORD PTR _t$[ebp], 40			; 00000028H
	jge	$LN7@SHATransfo
; Line 70
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	or	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _e$[ebp]
	add	edx, eax
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _w$[ebp+eax*4]
	lea	edx, DWORD PTR [edx+ecx+1859775393]
	mov	DWORD PTR _tmp$5940[ebp], edx
; Line 71
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _e$[ebp], eax
; Line 72
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _d$[ebp], ecx
; Line 73
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
; Line 74
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 75
	mov	edx, DWORD PTR _tmp$5940[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 76
	jmp	$LN8@SHATransfo
$LN7@SHATransfo:
; Line 77
	mov	DWORD PTR _t$[ebp], 40			; 00000028H
	jmp	SHORT $LN6@SHATransfo
$LN5@SHATransfo:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN6@SHATransfo:
	cmp	DWORD PTR _t$[ebp], 60			; 0000003cH
	jge	$LN4@SHATransfo
; Line 80
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	or	eax, edx
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	or	eax, edx
	add	ecx, DWORD PTR _e$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _w$[ebp+ecx*4]
	lea	eax, DWORD PTR [eax+edx-1894007588]
	mov	DWORD PTR _tmp$5946[ebp], eax
; Line 81
	mov	ecx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _e$[ebp], ecx
; Line 82
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 83
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 84
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 85
	mov	eax, DWORD PTR _tmp$5946[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 86
	jmp	$LN5@SHATransfo
$LN4@SHATransfo:
; Line 87
	mov	DWORD PTR _t$[ebp], 60			; 0000003cH
	jmp	SHORT $LN3@SHATransfo
$LN2@SHATransfo:
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
$LN3@SHATransfo:
	cmp	DWORD PTR _t$[ebp], 80			; 00000050H
	jge	$LN1@SHATransfo
; Line 88
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	or	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _e$[ebp]
	add	ecx, edx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+edx*4]
	lea	ecx, DWORD PTR [ecx+eax-899497514]
	mov	DWORD PTR _tmp$5952[ebp], ecx
; Line 89
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _e$[ebp], edx
; Line 90
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _d$[ebp], eax
; Line 91
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 30					; 0000001eH
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 2
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
; Line 92
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 93
	mov	ecx, DWORD PTR _tmp$5952[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 94
	jmp	$LN2@SHATransfo
$LN1@SHATransfo:
; Line 96
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 97
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 98
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 99
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 100
	mov	edx, DWORD PTR _digest$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 114
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@SHATransfo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@SHATransfo:
	DD	1
	DD	$LN22@SHATransfo
$LN22@SHATransfo:
	DD	-328					; fffffeb8H
	DD	320					; 00000140H
	DD	$LN21@SHATransfo
$LN21@SHATransfo:
	DB	119					; 00000077H
	DB	0
_SHATransform ENDP
_TEXT	ENDS
PUBLIC	_SHA_Init
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_SHA_Init PROC
; Line 123
	push	ebp
	mov	ebp, esp
; Line 124
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Core_Init
	add	esp, 4
; Line 125
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 126
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+92], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 127
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_SHA_Init ENDP
; Function compile flags: /Odtp /RTCsu
_h$ = 8						; size = 4
_SHA_Core_Init PROC
; Line 17
	push	ebp
	mov	ebp, esp
; Line 18
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax], 1732584193		; 67452301H
; Line 19
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+4], -271733879		; efcdab89H
; Line 20
	mov	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+8], -1732584194		; 98badcfeH
; Line 21
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+12], 271733878		; 10325476H
; Line 22
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx+16], -1009589776		; c3d2e1f0H
; Line 23
	pop	ebp
	ret	0
_SHA_Core_Init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA_Bytes
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -88						; size = 4
_lenw$ = -84						; size = 4
_wordblock$ = -76					; size = 64
_q$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_len$ = 16						; size = 4
_SHA_Bytes PROC
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 133
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _lenw$[ebp], ecx
; Line 139
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+92]
	add	eax, DWORD PTR _lenw$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+92], eax
; Line 140
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+92]
	cmp	eax, DWORD PTR _lenw$[ebp]
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+88]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 142
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	je	SHORT $LN5@SHA_Bytes
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, DWORD PTR _len$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN5@SHA_Bytes
; Line 146
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 147
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+84], edx
; Line 148
	jmp	$LN8@SHA_Bytes
$LN5@SHA_Bytes:
; Line 152
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, DWORD PTR _len$[ebp]
	cmp	edx, 64					; 00000040H
	jl	$LN4@SHA_Bytes
; Line 153
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 154
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR [ecx+84]
	add	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _q$[ebp], edx
; Line 155
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _len$[ebp], edx
; Line 157
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SHA_Bytes
$LN2@SHA_Bytes:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SHA_Bytes:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN1@SHA_Bytes
; Line 162
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+ecx*4+20]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+21]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+edx*4+22]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+23]
	or	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _wordblock$[ebp+edx*4], eax
; Line 163
	jmp	SHORT $LN2@SHA_Bytes
$LN1@SHA_Bytes:
; Line 164
	lea	eax, DWORD PTR _wordblock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SHATransform
	add	esp, 8
; Line 165
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+84], 0
; Line 166
	jmp	$LN5@SHA_Bytes
$LN4@SHA_Bytes:
; Line 167
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 168
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+84], ecx
$LN8@SHA_Bytes:
; Line 170
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SHA_Bytes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@SHA_Bytes:
	DD	1
	DD	$LN11@SHA_Bytes
$LN11@SHA_Bytes:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN10@SHA_Bytes
$LN10@SHA_Bytes:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_SHA_Bytes ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA_Final
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lenlo$ = -92						; size = 4
_lenhi$ = -88						; size = 4
_c$ = -80						; size = 64
_pad$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_output$ = 12						; size = 4
_SHA_Final PROC
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 179
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+84], 56			; 00000038H
	jl	SHORT $LN5@SHA_Final
; Line 180
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 120				; 00000078H
	sub	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _pad$[ebp], edx
; Line 181
	jmp	SHORT $LN4@SHA_Final
$LN5@SHA_Final:
; Line 182
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 56					; 00000038H
	sub	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _pad$[ebp], ecx
$LN4@SHA_Final:
; Line 184
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+88]
	shl	eax, 3
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	shr	edx, 29					; 0000001dH
	or	eax, edx
	mov	DWORD PTR _lenhi$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	shl	ecx, 3
	mov	DWORD PTR _lenlo$[ebp], ecx
; Line 187
	mov	edx, DWORD PTR _pad$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 188
	mov	BYTE PTR _c$[ebp], 128			; 00000080H
; Line 189
	mov	ecx, DWORD PTR _pad$[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 191
	mov	ecx, DWORD PTR _lenhi$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp], cl
; Line 192
	mov	edx, DWORD PTR _lenhi$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+1], dl
; Line 193
	mov	eax, DWORD PTR _lenhi$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+2], al
; Line 194
	mov	ecx, DWORD PTR _lenhi$[ebp]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+3], cl
; Line 195
	mov	edx, DWORD PTR _lenlo$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+4], dl
; Line 196
	mov	eax, DWORD PTR _lenlo$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+5], al
; Line 197
	mov	ecx, DWORD PTR _lenlo$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+6], cl
; Line 198
	mov	edx, DWORD PTR _lenlo$[ebp]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+7], dl
; Line 200
	push	8
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 202
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SHA_Final
$LN2@SHA_Final:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@SHA_Final:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN6@SHA_Final
; Line 203
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx+eax*4], dl
; Line 204
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _output$[ebp]
	mov	BYTE PTR [eax+edx*4+1], cl
; Line 205
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [edx+ecx*4+2], al
; Line 206
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx+eax*4+3], dl
; Line 207
	jmp	SHORT $LN2@SHA_Final
$LN6@SHA_Final:
; Line 208
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SHA_Final
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@SHA_Final:
	DD	1
	DD	$LN9@SHA_Final
$LN9@SHA_Final:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN8@SHA_Final
$LN8@SHA_Final:
	DB	99					; 00000063H
	DB	0
_SHA_Final ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA_Simple
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -104						; size = 96
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
_output$ = 16						; size = 4
_SHA_Simple PROC
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 214
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 215
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 216
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA_Final
	add	esp, 8
; Line 217
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SHA_Simple
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@SHA_Simple:
	DD	1
	DD	$LN4@SHA_Simple
$LN4@SHA_Simple:
	DD	-104					; ffffff98H
	DD	96					; 00000060H
	DD	$LN3@SHA_Simple
$LN3@SHA_Simple:
	DB	115					; 00000073H
	DB	0
_SHA_Simple ENDP
_TEXT	ENDS
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_sha1_init PROC
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 227
	push	96					; 00000060H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 229
	mov	eax, DWORD PTR _s$[ebp]
; Line 230
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sha1_init ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = -4						; size = 4
_handle$ = 8						; size = 4
_p$ = 12						; size = 4
_len$ = 16						; size = 4
_sha1_bytes PROC
; Line 233
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 234
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 236
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 237
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sha1_bytes ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_handle$ = 8						; size = 4
_output$ = 12						; size = 4
_sha1_final PROC
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 241
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 243
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA_Final
	add	esp, 8
; Line 244
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 245
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sha1_final ENDP
; Function compile flags: /Odtp /RTCsu
_sha1_make_context PROC
; Line 257
	push	ebp
	mov	ebp, esp
; Line 258
	push	96					; 00000060H
	push	3
	call	_safemalloc
	add	esp, 8
; Line 259
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha1_make_context ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_sha1_free_context PROC
; Line 262
	push	ebp
	mov	ebp, esp
; Line 263
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 264
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha1_free_context ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_sha1_key PROC
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	push	20					; 00000014H
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha1_key_internal
	add	esp, 12					; 0000000cH
; Line 290
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha1_key ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_smemclr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -84						; size = 4
_foo$ = -76						; size = 64
_keys$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_len$ = 16						; size = 4
_sha1_key_internal PROC
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 268
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 272
	push	64					; 00000040H
	push	54					; 00000036H
	lea	ecx, DWORD PTR _foo$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 273
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@sha1_key_i
$LN5@sha1_key_i:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@sha1_key_i:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@sha1_key_i
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN4@sha1_key_i
; Line 274
	mov	ecx, DWORD PTR _key$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _foo$[ebp+eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _foo$[ebp+edx], cl
	jmp	SHORT $LN5@sha1_key_i
$LN4@sha1_key_i:
; Line 275
	mov	eax, DWORD PTR _keys$[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 276
	push	64					; 00000040H
	lea	ecx, DWORD PTR _foo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keys$[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 278
	push	64					; 00000040H
	push	92					; 0000005cH
	lea	eax, DWORD PTR _foo$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 279
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@sha1_key_i
$LN2@sha1_key_i:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@sha1_key_i:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@sha1_key_i
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN1@sha1_key_i
; Line 280
	mov	eax, DWORD PTR _key$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _foo$[ebp+edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _foo$[ebp+ecx], al
	jmp	SHORT $LN2@sha1_key_i
$LN1@sha1_key_i:
; Line 281
	mov	edx, DWORD PTR _keys$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_SHA_Init
	add	esp, 4
; Line 282
	push	64					; 00000040H
	lea	eax, DWORD PTR _foo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 284
	push	64					; 00000040H
	lea	edx, DWORD PTR _foo$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 285
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@sha1_key_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@sha1_key_i:
	DD	1
	DD	$LN10@sha1_key_i
$LN10@sha1_key_i:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN9@sha1_key_i
$LN9@sha1_key_i:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	0
_sha1_key_internal ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_sha1_key_buggy PROC
; Line 293
	push	ebp
	mov	ebp, esp
; Line 294
	push	16					; 00000010H
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha1_key_internal
	add	esp, 12					; 0000000cH
; Line 295
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha1_key_buggy ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_hmacsha1_start PROC
; Line 298
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 299
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 301
	mov	esi, DWORD PTR _keys$[ebp]
	mov	edi, DWORD PTR _keys$[ebp]
	add	edi, 192				; 000000c0H
	mov	ecx, 24					; 00000018H
	rep movsd
; Line 302
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_hmacsha1_start ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_hmacsha1_bytes PROC
; Line 305
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 306
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 307
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _keys$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 308
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hmacsha1_bytes ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_intermediate$ = -136					; size = 20
_s$ = -108						; size = 96
_keys$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacsha1_genresult PROC
; Line 311
	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 312
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 316
	mov	esi, DWORD PTR _keys$[ebp]
	add	esi, 192				; 000000c0H
	mov	ecx, 24					; 00000018H
	lea	edi, DWORD PTR _s$[ebp]
	rep movsd
; Line 317
	lea	ecx, DWORD PTR _intermediate$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA_Final
	add	esp, 8
; Line 318
	mov	esi, DWORD PTR _keys$[ebp]
	add	esi, 96					; 00000060H
	mov	ecx, 24					; 00000018H
	lea	edi, DWORD PTR _s$[ebp]
	rep movsd
; Line 319
	push	20					; 00000014H
	lea	eax, DWORD PTR _intermediate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 320
	mov	edx, DWORD PTR _hmac$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Final
	add	esp, 8
; Line 321
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@hmacsha1_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@hmacsha1_g:
	DD	2
	DD	$LN5@hmacsha1_g
$LN5@hmacsha1_g:
	DD	-108					; ffffff94H
	DD	96					; 00000060H
	DD	$LN3@hmacsha1_g
	DD	-136					; ffffff78H
	DD	20					; 00000014H
	DD	$LN4@hmacsha1_g
$LN4@hmacsha1_g:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN3@hmacsha1_g:
	DB	115					; 00000073H
	DB	0
_hmacsha1_genresult ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_sha1_generate PROC
; Line 337
	push	ebp
	mov	ebp, esp
; Line 338
	mov	eax, DWORD PTR _blk$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha1_do_hmac
	add	esp, 20					; 00000014H
; Line 339
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha1_generate ENDP
; Function compile flags: /Odtp /RTCsu
_seqbuf$ = -8						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_hmac$ = 24						; size = 4
_sha1_do_hmac PROC
; Line 325
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 328
	mov	eax, DWORD PTR _seq$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _seqbuf$[ebp], al
	mov	ecx, DWORD PTR _seq$[ebp]
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _seqbuf$[ebp+1], cl
	mov	edx, DWORD PTR _seq$[ebp]
	shr	edx, 8
	mov	BYTE PTR _seqbuf$[ebp+2], dl
	mov	al, BYTE PTR _seq$[ebp]
	mov	BYTE PTR _seqbuf$[ebp+3], al
; Line 329
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacsha1_start
	add	esp, 4
; Line 330
	push	4
	lea	edx, DWORD PTR _seqbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacsha1_bytes
	add	esp, 12					; 0000000cH
; Line 331
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacsha1_bytes
	add	esp, 12					; 0000000cH
; Line 332
	mov	ecx, DWORD PTR _hmac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_hmacsha1_genresult
	add	esp, 8
; Line 333
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sha1_do_hm
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@sha1_do_hm:
	DD	1
	DD	$LN4@sha1_do_hm
$LN4@sha1_do_hm:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@sha1_do_hm
$LN3@sha1_do_hm:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_sha1_do_hmac ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacsha1_verresult PROC
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 344
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacsha1_genresult
	add	esp, 8
; Line 345
	push	20					; 00000014H
	mov	edx, DWORD PTR _hmac$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 346
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacsha1_v
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@hmacsha1_v:
	DD	1
	DD	$LN4@hmacsha1_v
$LN4@hmacsha1_v:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@hmacsha1_v
$LN3@hmacsha1_v:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_hmacsha1_verresult ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_sha1_verify PROC
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 352
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha1_do_hmac
	add	esp, 20					; 00000014H
; Line 353
	push	20					; 00000014H
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 354
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sha1_verif
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@sha1_verif:
	DD	1
	DD	$LN4@sha1_verif
$LN4@sha1_verif:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@sha1_verif
$LN3@sha1_verif:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_sha1_verify ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_full$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacsha1_96_genresult PROC
; Line 357
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 359
	lea	eax, DWORD PTR _full$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacsha1_genresult
	add	esp, 8
; Line 360
	push	12					; 0000000cH
	lea	edx, DWORD PTR _full$[ebp]
	push	edx
	mov	eax, DWORD PTR _hmac$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacsha1_9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@hmacsha1_9:
	DD	1
	DD	$LN4@hmacsha1_9
$LN4@hmacsha1_9:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@hmacsha1_9
$LN3@hmacsha1_9:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	0
_hmacsha1_96_genresult ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_full$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_sha1_96_generate PROC
; Line 365
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 367
	lea	eax, DWORD PTR _full$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha1_do_hmac
	add	esp, 20					; 00000014H
; Line 368
	push	12					; 0000000cH
	lea	edx, DWORD PTR _full$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 369
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sha1_96_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@sha1_96_ge:
	DD	1
	DD	$LN4@sha1_96_ge
$LN4@sha1_96_ge:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@sha1_96_ge
$LN3@sha1_96_ge:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	0
_sha1_96_generate ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacsha1_96_verresult PROC
; Line 372
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 374
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacsha1_genresult
	add	esp, 8
; Line 375
	push	12					; 0000000cH
	mov	edx, DWORD PTR _hmac$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 376
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacsha1_9@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@hmacsha1_9@2:
	DD	1
	DD	$LN4@hmacsha1_9@2
$LN4@hmacsha1_9@2:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@hmacsha1_9@2
$LN3@hmacsha1_9@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_hmacsha1_96_verresult ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_sha1_96_verify PROC
; Line 380
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 382
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha1_do_hmac
	add	esp, 20					; 00000014H
; Line 383
	push	12					; 0000000cH
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 384
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sha1_96_ve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@sha1_96_ve:
	DD	1
	DD	$LN4@sha1_96_ve
$LN4@sha1_96_ve:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@sha1_96_ve
$LN3@sha1_96_ve:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_sha1_96_verify ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_hmac_sha1_simple
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_intermediate$ = -228					; size = 20
_states$ = -200						; size = 192
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_keylen$ = 12						; size = 4
_data$ = 16						; size = 4
_datalen$ = 20						; size = 4
_output$ = 24						; size = 4
_hmac_sha1_simple PROC
; Line 387
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 391
	mov	eax, DWORD PTR _keylen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	lea	edx, DWORD PTR _states$[ebp]
	push	edx
	call	_sha1_key_internal
	add	esp, 12					; 0000000cH
; Line 392
	mov	eax, DWORD PTR _datalen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _states$[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 393
	lea	eax, DWORD PTR _intermediate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _states$[ebp]
	push	ecx
	call	_SHA_Final
	add	esp, 8
; Line 395
	push	20					; 00000014H
	lea	edx, DWORD PTR _intermediate$[ebp]
	push	edx
	lea	eax, DWORD PTR _states$[ebp+96]
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 396
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _states$[ebp+96]
	push	edx
	call	_SHA_Final
	add	esp, 8
; Line 397
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@hmac_sha1_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@hmac_sha1_:
	DD	2
	DD	$LN5@hmac_sha1_
$LN5@hmac_sha1_:
	DD	-200					; ffffff38H
	DD	192					; 000000c0H
	DD	$LN3@hmac_sha1_
	DD	-228					; ffffff1cH
	DD	20					; 00000014H
	DD	$LN4@hmac_sha1_
$LN4@hmac_sha1_:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN3@hmac_sha1_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_hmac_sha1_simple ENDP
_TEXT	ENDS
END
