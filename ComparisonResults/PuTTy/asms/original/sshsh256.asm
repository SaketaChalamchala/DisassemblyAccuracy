; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshsh256.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh_sha256
PUBLIC	_ssh_hmac_sha256
_DATA	SEGMENT
$SG6066	DB	'SHA-256', 00H
$SG6172	DB	'hmac-sha2-256', 00H
	ORG $+2
$SG6173	DB	'HMAC-SHA-256', 00H
_DATA	ENDS
CONST	SEGMENT
?k@?1??SHA256_Block@@9@9 DD 0428a2f98H			; `SHA256_Block'::`2'::k
	DD	071374491H
	DD	0b5c0fbcfH
	DD	0e9b5dba5H
	DD	03956c25bH
	DD	059f111f1H
	DD	0923f82a4H
	DD	0ab1c5ed5H
	DD	0d807aa98H
	DD	012835b01H
	DD	0243185beH
	DD	0550c7dc3H
	DD	072be5d74H
	DD	080deb1feH
	DD	09bdc06a7H
	DD	0c19bf174H
	DD	0e49b69c1H
	DD	0efbe4786H
	DD	0fc19dc6H
	DD	0240ca1ccH
	DD	02de92c6fH
	DD	04a7484aaH
	DD	05cb0a9dcH
	DD	076f988daH
	DD	0983e5152H
	DD	0a831c66dH
	DD	0b00327c8H
	DD	0bf597fc7H
	DD	0c6e00bf3H
	DD	0d5a79147H
	DD	06ca6351H
	DD	014292967H
	DD	027b70a85H
	DD	02e1b2138H
	DD	04d2c6dfcH
	DD	053380d13H
	DD	0650a7354H
	DD	0766a0abbH
	DD	081c2c92eH
	DD	092722c85H
	DD	0a2bfe8a1H
	DD	0a81a664bH
	DD	0c24b8b70H
	DD	0c76c51a3H
	DD	0d192e819H
	DD	0d6990624H
	DD	0f40e3585H
	DD	0106aa070H
	DD	019a4c116H
	DD	01e376c08H
	DD	02748774cH
	DD	034b0bcb5H
	DD	0391c0cb3H
	DD	04ed8aa4aH
	DD	05b9cca4fH
	DD	0682e6ff3H
	DD	0748f82eeH
	DD	078a5636fH
	DD	084c87814H
	DD	08cc70208H
	DD	090befffaH
	DD	0a4506cebH
	DD	0bef9a3f7H
	DD	0c67178f2H
_ssh_sha256 DD	FLAT:_sha256_init
	DD	FLAT:_sha256_bytes
	DD	FLAT:_sha256_final
	DD	020H
	DD	FLAT:$SG6066
_ssh_hmac_sha256 DD FLAT:_sha256_make_context
	DD	FLAT:_sha256_free_context
	DD	FLAT:_sha256_key
	DD	FLAT:_sha256_generate
	DD	FLAT:_sha256_verify
	DD	FLAT:_hmacsha256_start
	DD	FLAT:_hmacsha256_bytes
	DD	FLAT:_hmacsha256_genresult
	DD	FLAT:_hmacsha256_verresult
	DD	FLAT:$SG6172
	DD	020H
	DD	FLAT:$SG6173
CONST	ENDS
PUBLIC	_SHA256_Core_Init
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshsh256.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_s$ = 8							; size = 4
_SHA256_Core_Init PROC
; Line 22
	push	ebp
	mov	ebp, esp
; Line 23
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], 1779033703		; 6a09e667H
; Line 24
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], -1150833019		; bb67ae85H
; Line 25
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], 1013904242		; 3c6ef372H
; Line 26
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+12], -1521486534		; a54ff53aH
; Line 27
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], 1359893119		; 510e527fH
; Line 28
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], -1694144372		; 9b05688cH
; Line 29
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+24], 528734635		; 1f83d9abH
; Line 30
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+28], 1541459225		; 5be0cd19H
; Line 31
	pop	ebp
	ret	0
_SHA256_Core_Init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA256_Block
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t2$5945 = -376						; size = 4
_t1$5944 = -372						; size = 4
_t$ = -368						; size = 4
_h$ = -364						; size = 4
_g$ = -360						; size = 4
_f$ = -356						; size = 4
_e$ = -352						; size = 4
_d$ = -348						; size = 4
_c$ = -344						; size = 4
_b$ = -340						; size = 4
_a$ = -336						; size = 4
_w$ = -328						; size = 320
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_block$ = 12						; size = 4
_SHA256_Block PROC
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 57
	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN9@SHA256_Blo
$LN8@SHA256_Blo:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN9@SHA256_Blo:
	cmp	DWORD PTR _t$[ebp], 16			; 00000010H
	jge	SHORT $LN7@SHA256_Blo
; Line 58
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _w$[ebp+ecx*4], edx
	jmp	SHORT $LN8@SHA256_Blo
$LN7@SHA256_Blo:
; Line 60
	mov	DWORD PTR _t$[ebp], 16			; 00000010H
	jmp	SHORT $LN6@SHA256_Blo
$LN5@SHA256_Blo:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN6@SHA256_Blo:
	cmp	DWORD PTR _t$[ebp], 64			; 00000040H
	jge	$LN4@SHA256_Blo
; Line 61
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _w$[ebp+ecx*4-8]
	shl	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _w$[ebp+eax*4-8]
	shr	ecx, 17					; 00000011H
	or	edx, ecx
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _w$[ebp+eax*4-8]
	shl	ecx, 13					; 0000000dH
	mov	eax, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+eax*4-8]
	shr	eax, 19					; 00000013H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+ecx*4-8]
	shr	eax, 10					; 0000000aH
	xor	edx, eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	edx, DWORD PTR _w$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _w$[ebp+eax*4-60]
	shl	ecx, 25					; 00000019H
	mov	eax, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+eax*4-60]
	shr	eax, 7
	or	ecx, eax
	mov	eax, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+eax*4-60]
	shl	eax, 14					; 0000000eH
	mov	esi, DWORD PTR _t$[ebp]
	mov	esi, DWORD PTR _w$[ebp+esi*4-60]
	shr	esi, 18					; 00000012H
	or	eax, esi
	xor	ecx, eax
	mov	eax, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR _w$[ebp+eax*4-60]
	shr	eax, 3
	xor	ecx, eax
	add	edx, ecx
	mov	ecx, DWORD PTR _t$[ebp]
	add	edx, DWORD PTR _w$[ebp+ecx*4-64]
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _w$[ebp+eax*4], edx
	jmp	$LN5@SHA256_Blo
$LN4@SHA256_Blo:
; Line 63
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _d$[ebp], edx
; Line 64
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _f$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _g$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _h$[ebp], ecx
; Line 66
	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN3@SHA256_Blo
$LN2@SHA256_Blo:
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 8
	mov	DWORD PTR _t$[ebp], edx
$LN3@SHA256_Blo:
	cmp	DWORD PTR _t$[ebp], 64			; 00000040H
	jge	$LN1@SHA256_Blo
; Line 74
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	not	ecx
	and	ecx, DWORD PTR _g$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _h$[ebp], edx
; Line 75
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	not	ecx
	and	ecx, DWORD PTR _f$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+4]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+4]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _h$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _h$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _h$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _h$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _h$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _h$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _h$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _g$[ebp], edx
; Line 76
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	not	ecx
	and	ecx, DWORD PTR _e$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+8]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+8]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _g$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _g$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _g$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _g$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _g$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _g$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _g$[ebp]
	and	ecx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _g$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _h$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _f$[ebp], edx
; Line 77
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	not	ecx
	and	ecx, DWORD PTR _d$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+12]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+12]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _f$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _f$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _f$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _f$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _f$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _f$[ebp]
	and	ecx, DWORD PTR _g$[ebp]
	mov	eax, DWORD PTR _f$[ebp]
	and	eax, DWORD PTR _h$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _g$[ebp]
	and	eax, DWORD PTR _h$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _e$[ebp], edx
; Line 78
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	not	ecx
	and	ecx, DWORD PTR _c$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+16]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+16]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _e$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _e$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _e$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _e$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _e$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _g$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _f$[ebp]
	and	eax, DWORD PTR _g$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _h$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _h$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _d$[ebp], edx
; Line 79
	mov	eax, DWORD PTR _h$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _h$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _h$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _h$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _h$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _h$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _h$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	not	ecx
	and	ecx, DWORD PTR _b$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+20]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+20]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _f$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _f$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _g$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _g$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 80
	mov	eax, DWORD PTR _g$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _g$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _g$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	and	edx, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR _g$[ebp]
	not	ecx
	and	ecx, DWORD PTR _a$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+24]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+24]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _f$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 81
	mov	eax, DWORD PTR _f$[ebp]
	shl	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _f$[ebp]
	shr	ecx, 6
	or	eax, ecx
	mov	edx, DWORD PTR _f$[ebp]
	shl	edx, 21					; 00000015H
	mov	ecx, DWORD PTR _f$[ebp]
	shr	ecx, 11					; 0000000bH
	or	edx, ecx
	xor	eax, edx
	mov	edx, DWORD PTR _f$[ebp]
	shl	edx, 7
	mov	ecx, DWORD PTR _f$[ebp]
	shr	ecx, 25					; 00000019H
	or	edx, ecx
	xor	eax, edx
	add	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	and	edx, DWORD PTR _g$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	not	ecx
	and	ecx, DWORD PTR _h$[ebp]
	xor	edx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR ?k@?1??SHA256_Block@@9@9[edx*4+28]
	mov	ecx, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _w$[ebp+ecx*4+28]
	mov	DWORD PTR _t1$5944[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 2
	or	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 19					; 00000013H
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 13					; 0000000dH
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 22					; 00000016H
	or	ecx, eax
	xor	edx, ecx
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	ecx, eax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	ecx, eax
	add	edx, ecx
	mov	DWORD PTR _t2$5945[ebp], edx
	mov	ecx, DWORD PTR _e$[ebp]
	add	ecx, DWORD PTR _t1$5944[ebp]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _t1$5944[ebp]
	add	edx, DWORD PTR _t2$5945[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 82
	jmp	$LN2@SHA256_Blo
$LN1@SHA256_Blo:
; Line 84
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 85
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 86
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SHA256_Blo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@SHA256_Blo:
	DD	1
	DD	$LN13@SHA256_Blo
$LN13@SHA256_Blo:
	DD	-328					; fffffeb8H
	DD	320					; 00000140H
	DD	$LN12@SHA256_Blo
$LN12@SHA256_Blo:
	DB	119					; 00000077H
	DB	0
_SHA256_Block ENDP
_TEXT	ENDS
PUBLIC	_SHA256_Init
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_SHA256_Init PROC
; Line 96
	push	ebp
	mov	ebp, esp
; Line 97
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Core_Init
	add	esp, 4
; Line 98
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 99
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+104], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 100
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_SHA256_Init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA256_Bytes
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -88						; size = 4
_lenw$ = -84						; size = 4
_wordblock$ = -76					; size = 64
_q$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_len$ = 16						; size = 4
_SHA256_Bytes PROC
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 105
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _lenw$[ebp], ecx
; Line 111
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+104]
	add	eax, DWORD PTR _lenw$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 112
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+104]
	cmp	eax, DWORD PTR _lenw$[ebp]
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+100], ecx
; Line 114
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	je	SHORT $LN5@SHA256_Byt
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+96]
	add	eax, DWORD PTR _len$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN5@SHA256_Byt
; Line 118
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 119
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+96], edx
; Line 120
	jmp	$LN8@SHA256_Byt
$LN5@SHA256_Byt:
; Line 124
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	add	edx, DWORD PTR _len$[ebp]
	cmp	edx, 64					; 00000040H
	jl	$LN4@SHA256_Byt
; Line 125
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 126
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR [ecx+96]
	add	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _q$[ebp], edx
; Line 127
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _len$[ebp], edx
; Line 129
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SHA256_Byt
$LN2@SHA256_Byt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SHA256_Byt:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN1@SHA256_Byt
; Line 134
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+ecx*4+32]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+33]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+edx*4+34]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+35]
	or	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _wordblock$[ebp+edx*4], eax
; Line 135
	jmp	SHORT $LN2@SHA256_Byt
$LN1@SHA256_Byt:
; Line 136
	lea	eax, DWORD PTR _wordblock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SHA256_Block
	add	esp, 8
; Line 137
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 138
	jmp	$LN5@SHA256_Byt
$LN4@SHA256_Byt:
; Line 139
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 140
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+96], ecx
$LN8@SHA256_Byt:
; Line 142
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SHA256_Byt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@SHA256_Byt:
	DD	1
	DD	$LN11@SHA256_Byt
$LN11@SHA256_Byt:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN10@SHA256_Byt
$LN10@SHA256_Byt:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_SHA256_Bytes ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA256_Final
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lenlo$ = -92						; size = 4
_lenhi$ = -88						; size = 4
_c$ = -80						; size = 64
_pad$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_digest$ = 12						; size = 4
_SHA256_Final PROC
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+96], 56			; 00000038H
	jl	SHORT $LN5@SHA256_Fin
; Line 151
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, 120				; 00000078H
	sub	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _pad$[ebp], edx
; Line 152
	jmp	SHORT $LN4@SHA256_Fin
$LN5@SHA256_Fin:
; Line 153
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, 56					; 00000038H
	sub	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _pad$[ebp], ecx
$LN4@SHA256_Fin:
; Line 155
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+100]
	shl	eax, 3
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	shr	edx, 29					; 0000001dH
	or	eax, edx
	mov	DWORD PTR _lenhi$[ebp], eax
; Line 156
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	shl	ecx, 3
	mov	DWORD PTR _lenlo$[ebp], ecx
; Line 158
	mov	edx, DWORD PTR _pad$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 159
	mov	BYTE PTR _c$[ebp], 128			; 00000080H
; Line 160
	mov	ecx, DWORD PTR _pad$[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 162
	mov	ecx, DWORD PTR _lenhi$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp], cl
; Line 163
	mov	edx, DWORD PTR _lenhi$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+1], dl
; Line 164
	mov	eax, DWORD PTR _lenhi$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+2], al
; Line 165
	mov	ecx, DWORD PTR _lenhi$[ebp]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+3], cl
; Line 166
	mov	edx, DWORD PTR _lenlo$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+4], dl
; Line 167
	mov	eax, DWORD PTR _lenlo$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+5], al
; Line 168
	mov	ecx, DWORD PTR _lenlo$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+6], cl
; Line 169
	mov	edx, DWORD PTR _lenlo$[ebp]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _c$[ebp+7], dl
; Line 171
	push	8
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 173
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SHA256_Fin
$LN2@SHA256_Fin:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@SHA256_Fin:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN6@SHA256_Fin
; Line 174
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	BYTE PTR [ecx+eax*4], dl
; Line 175
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _digest$[ebp]
	mov	BYTE PTR [eax+edx*4+1], cl
; Line 176
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _digest$[ebp]
	mov	BYTE PTR [edx+ecx*4+2], al
; Line 177
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	BYTE PTR [ecx+eax*4+3], dl
; Line 178
	jmp	SHORT $LN2@SHA256_Fin
$LN6@SHA256_Fin:
; Line 179
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SHA256_Fin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@SHA256_Fin:
	DD	1
	DD	$LN9@SHA256_Fin
$LN9@SHA256_Fin:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN8@SHA256_Fin
$LN8@SHA256_Fin:
	DB	99					; 00000063H
	DB	0
_SHA256_Final ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_SHA256_Simple
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -116						; size = 108
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
_output$ = 16						; size = 4
_SHA256_Simple PROC
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 184
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Init
	add	esp, 4
; Line 185
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 186
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA256_Final
	add	esp, 8
; Line 187
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SHA256_Sim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@SHA256_Sim:
	DD	1
	DD	$LN4@SHA256_Sim
$LN4@SHA256_Sim:
	DD	-116					; ffffff8cH
	DD	108					; 0000006cH
	DD	$LN3@SHA256_Sim
$LN3@SHA256_Sim:
	DB	115					; 00000073H
	DB	0
_SHA256_Simple ENDP
_TEXT	ENDS
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_sha256_init PROC
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 197
	push	108					; 0000006cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 198
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Init
	add	esp, 4
; Line 199
	mov	eax, DWORD PTR _s$[ebp]
; Line 200
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sha256_init ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = -4						; size = 4
_handle$ = 8						; size = 4
_p$ = 12						; size = 4
_len$ = 16						; size = 4
_sha256_bytes PROC
; Line 203
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 204
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 206
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 207
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sha256_bytes ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_handle$ = 8						; size = 4
_output$ = 12						; size = 4
_sha256_final PROC
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 211
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 213
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA256_Final
	add	esp, 8
; Line 214
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sha256_final ENDP
; Function compile flags: /Odtp /RTCsu
_sha256_make_context PROC
; Line 227
	push	ebp
	mov	ebp, esp
; Line 228
	push	108					; 0000006cH
	push	3
	call	_safemalloc
	add	esp, 8
; Line 229
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha256_make_context ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_sha256_free_context PROC
; Line 232
	push	ebp
	mov	ebp, esp
; Line 233
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 234
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha256_free_context ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_sha256_key PROC
; Line 258
	push	ebp
	mov	ebp, esp
; Line 259
	push	32					; 00000020H
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha256_key_internal
	add	esp, 12					; 0000000cH
; Line 260
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha256_key ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_smemclr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -84						; size = 4
_foo$ = -76						; size = 64
_keys$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_len$ = 16						; size = 4
_sha256_key_internal PROC
; Line 237
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 238
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 242
	push	64					; 00000040H
	push	54					; 00000036H
	lea	ecx, DWORD PTR _foo$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 243
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@sha256_key
$LN5@sha256_key:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@sha256_key:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@sha256_key
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN4@sha256_key
; Line 244
	mov	ecx, DWORD PTR _key$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _foo$[ebp+eax]
	xor	ecx, edx
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _foo$[ebp+edx], cl
	jmp	SHORT $LN5@sha256_key
$LN4@sha256_key:
; Line 245
	mov	eax, DWORD PTR _keys$[ebp]
	push	eax
	call	_SHA256_Init
	add	esp, 4
; Line 246
	push	64					; 00000040H
	lea	ecx, DWORD PTR _foo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keys$[ebp]
	push	edx
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 248
	push	64					; 00000040H
	push	92					; 0000005cH
	lea	eax, DWORD PTR _foo$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 249
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@sha256_key
$LN2@sha256_key:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@sha256_key:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@sha256_key
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN1@sha256_key
; Line 250
	mov	eax, DWORD PTR _key$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _foo$[ebp+edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _foo$[ebp+ecx], al
	jmp	SHORT $LN2@sha256_key
$LN1@sha256_key:
; Line 251
	mov	edx, DWORD PTR _keys$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_SHA256_Init
	add	esp, 4
; Line 252
	push	64					; 00000040H
	lea	eax, DWORD PTR _foo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 254
	push	64					; 00000040H
	lea	edx, DWORD PTR _foo$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 255
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@sha256_key
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@sha256_key:
	DD	1
	DD	$LN10@sha256_key
$LN10@sha256_key:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN9@sha256_key
$LN9@sha256_key:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	0
_sha256_key_internal ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_hmacsha256_start PROC
; Line 263
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 264
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 266
	mov	esi, DWORD PTR _keys$[ebp]
	mov	edi, DWORD PTR _keys$[ebp]
	add	edi, 216				; 000000d8H
	mov	ecx, 27					; 0000001bH
	rep movsd
; Line 267
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_hmacsha256_start ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_hmacsha256_bytes PROC
; Line 270
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 271
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _keys$[ebp]
	add	eax, 216				; 000000d8H
	push	eax
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 273
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hmacsha256_bytes ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_intermediate$ = -160					; size = 32
_s$ = -120						; size = 108
_keys$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacsha256_genresult PROC
; Line 276
	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-164]
	mov	ecx, 41					; 00000029H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 277
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 281
	mov	esi, DWORD PTR _keys$[ebp]
	add	esi, 216				; 000000d8H
	mov	ecx, 27					; 0000001bH
	lea	edi, DWORD PTR _s$[ebp]
	rep movsd
; Line 282
	lea	ecx, DWORD PTR _intermediate$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA256_Final
	add	esp, 8
; Line 283
	mov	esi, DWORD PTR _keys$[ebp]
	add	esi, 108				; 0000006cH
	mov	ecx, 27					; 0000001bH
	lea	edi, DWORD PTR _s$[ebp]
	rep movsd
; Line 284
	push	32					; 00000020H
	lea	eax, DWORD PTR _intermediate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_SHA256_Bytes
	add	esp, 12					; 0000000cH
; Line 285
	mov	edx, DWORD PTR _hmac$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA256_Final
	add	esp, 8
; Line 286
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@hmacsha256
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 164				; 000000a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@hmacsha256:
	DD	2
	DD	$LN5@hmacsha256
$LN5@hmacsha256:
	DD	-120					; ffffff88H
	DD	108					; 0000006cH
	DD	$LN3@hmacsha256
	DD	-160					; ffffff60H
	DD	32					; 00000020H
	DD	$LN4@hmacsha256
$LN4@hmacsha256:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN3@hmacsha256:
	DB	115					; 00000073H
	DB	0
_hmacsha256_genresult ENDP
; Function compile flags: /Odtp /RTCsu
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_sha256_generate PROC
; Line 302
	push	ebp
	mov	ebp, esp
; Line 303
	mov	eax, DWORD PTR _blk$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha256_do_hmac
	add	esp, 20					; 00000014H
; Line 304
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sha256_generate ENDP
; Function compile flags: /Odtp /RTCsu
_seqbuf$ = -8						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_hmac$ = 24						; size = 4
_sha256_do_hmac PROC
; Line 290
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 293
	mov	eax, DWORD PTR _seq$[ebp]
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _seqbuf$[ebp], al
	mov	ecx, DWORD PTR _seq$[ebp]
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _seqbuf$[ebp+1], cl
	mov	edx, DWORD PTR _seq$[ebp]
	shr	edx, 8
	mov	BYTE PTR _seqbuf$[ebp+2], dl
	mov	al, BYTE PTR _seq$[ebp]
	mov	BYTE PTR _seqbuf$[ebp+3], al
; Line 294
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacsha256_start
	add	esp, 4
; Line 295
	push	4
	lea	edx, DWORD PTR _seqbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacsha256_bytes
	add	esp, 12					; 0000000cH
; Line 296
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_hmacsha256_bytes
	add	esp, 12					; 0000000cH
; Line 297
	mov	ecx, DWORD PTR _hmac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_hmacsha256_genresult
	add	esp, 8
; Line 298
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sha256_do_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@sha256_do_:
	DD	1
	DD	$LN4@sha256_do_
$LN4@sha256_do_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@sha256_do_
$LN3@sha256_do_:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_sha256_do_hmac ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_hmac$ = 12						; size = 4
_hmacsha256_verresult PROC
; Line 307
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 309
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_hmacsha256_genresult
	add	esp, 8
; Line 310
	push	32					; 00000020H
	mov	edx, DWORD PTR _hmac$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 311
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@hmacsha256@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@hmacsha256@2:
	DD	1
	DD	$LN4@hmacsha256@2
$LN4@hmacsha256@2:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@hmacsha256@2
$LN3@hmacsha256@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_hmacsha256_verresult ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_correct$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_seq$ = 20						; size = 4
_sha256_verify PROC
; Line 315
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 317
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_sha256_do_hmac
	add	esp, 20					; 00000014H
; Line 318
	push	32					; 00000020H
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _correct$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 319
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sha256_ver
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@sha256_ver:
	DD	1
	DD	$LN4@sha256_ver
$LN4@sha256_ver:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@sha256_ver
$LN3@sha256_ver:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
_sha256_verify ENDP
_TEXT	ENDS
END
