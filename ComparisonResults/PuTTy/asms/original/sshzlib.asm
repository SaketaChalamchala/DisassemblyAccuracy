; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_zlib_decompress_block
PUBLIC	_zlib_decompress_cleanup
PUBLIC	_zlib_decompress_init
PUBLIC	_zlib_compress_block
PUBLIC	_zlib_compress_cleanup
PUBLIC	_zlib_compress_init
PUBLIC	_ssh_zlib
CONST	SEGMENT
_mirrorbytes DB	00H
	DB	080H
	DB	040H
	DB	0c0H
	DB	020H
	DB	0a0H
	DB	060H
	DB	0e0H
	DB	010H
	DB	090H
	DB	050H
	DB	0d0H
	DB	030H
	DB	0b0H
	DB	070H
	DB	0f0H
	DB	08H
	DB	088H
	DB	048H
	DB	0c8H
	DB	028H
	DB	0a8H
	DB	068H
	DB	0e8H
	DB	018H
	DB	098H
	DB	058H
	DB	0d8H
	DB	038H
	DB	0b8H
	DB	078H
	DB	0f8H
	DB	04H
	DB	084H
	DB	044H
	DB	0c4H
	DB	024H
	DB	0a4H
	DB	064H
	DB	0e4H
	DB	014H
	DB	094H
	DB	054H
	DB	0d4H
	DB	034H
	DB	0b4H
	DB	074H
	DB	0f4H
	DB	0cH
	DB	08cH
	DB	04cH
	DB	0ccH
	DB	02cH
	DB	0acH
	DB	06cH
	DB	0ecH
	DB	01cH
	DB	09cH
	DB	05cH
	DB	0dcH
	DB	03cH
	DB	0bcH
	DB	07cH
	DB	0fcH
	DB	02H
	DB	082H
	DB	042H
	DB	0c2H
	DB	022H
	DB	0a2H
	DB	062H
	DB	0e2H
	DB	012H
	DB	092H
	DB	052H
	DB	0d2H
	DB	032H
	DB	0b2H
	DB	072H
	DB	0f2H
	DB	0aH
	DB	08aH
	DB	04aH
	DB	0caH
	DB	02aH
	DB	0aaH
	DB	06aH
	DB	0eaH
	DB	01aH
	DB	09aH
	DB	05aH
	DB	0daH
	DB	03aH
	DB	0baH
	DB	07aH
	DB	0faH
	DB	06H
	DB	086H
	DB	046H
	DB	0c6H
	DB	026H
	DB	0a6H
	DB	066H
	DB	0e6H
	DB	016H
	DB	096H
	DB	056H
	DB	0d6H
	DB	036H
	DB	0b6H
	DB	076H
	DB	0f6H
	DB	0eH
	DB	08eH
	DB	04eH
	DB	0ceH
	DB	02eH
	DB	0aeH
	DB	06eH
	DB	0eeH
	DB	01eH
	DB	09eH
	DB	05eH
	DB	0deH
	DB	03eH
	DB	0beH
	DB	07eH
	DB	0feH
	DB	01H
	DB	081H
	DB	041H
	DB	0c1H
	DB	021H
	DB	0a1H
	DB	061H
	DB	0e1H
	DB	011H
	DB	091H
	DB	051H
	DB	0d1H
	DB	031H
	DB	0b1H
	DB	071H
	DB	0f1H
	DB	09H
	DB	089H
	DB	049H
	DB	0c9H
	DB	029H
	DB	0a9H
	DB	069H
	DB	0e9H
	DB	019H
	DB	099H
	DB	059H
	DB	0d9H
	DB	039H
	DB	0b9H
	DB	079H
	DB	0f9H
	DB	05H
	DB	085H
	DB	045H
	DB	0c5H
	DB	025H
	DB	0a5H
	DB	065H
	DB	0e5H
	DB	015H
	DB	095H
	DB	055H
	DB	0d5H
	DB	035H
	DB	0b5H
	DB	075H
	DB	0f5H
	DB	0dH
	DB	08dH
	DB	04dH
	DB	0cdH
	DB	02dH
	DB	0adH
	DB	06dH
	DB	0edH
	DB	01dH
	DB	09dH
	DB	05dH
	DB	0ddH
	DB	03dH
	DB	0bdH
	DB	07dH
	DB	0fdH
	DB	03H
	DB	083H
	DB	043H
	DB	0c3H
	DB	023H
	DB	0a3H
	DB	063H
	DB	0e3H
	DB	013H
	DB	093H
	DB	053H
	DB	0d3H
	DB	033H
	DB	0b3H
	DB	073H
	DB	0f3H
	DB	0bH
	DB	08bH
	DB	04bH
	DB	0cbH
	DB	02bH
	DB	0abH
	DB	06bH
	DB	0ebH
	DB	01bH
	DB	09bH
	DB	05bH
	DB	0dbH
	DB	03bH
	DB	0bbH
	DB	07bH
	DB	0fbH
	DB	07H
	DB	087H
	DB	047H
	DB	0c7H
	DB	027H
	DB	0a7H
	DB	067H
	DB	0e7H
	DB	017H
	DB	097H
	DB	057H
	DB	0d7H
	DB	037H
	DB	0b7H
	DB	077H
	DB	0f7H
	DB	0fH
	DB	08fH
	DB	04fH
	DB	0cfH
	DB	02fH
	DB	0afH
	DB	06fH
	DB	0efH
	DB	01fH
	DB	09fH
	DB	05fH
	DB	0dfH
	DB	03fH
	DB	0bfH
	DB	07fH
	DB	0ffH
_lencodes DW	0101H
	DW	00H
	DD	03H
	DD	03H
	DW	0102H
	DW	00H
	DD	04H
	DD	04H
	DW	0103H
	DW	00H
	DD	05H
	DD	05H
	DW	0104H
	DW	00H
	DD	06H
	DD	06H
	DW	0105H
	DW	00H
	DD	07H
	DD	07H
	DW	0106H
	DW	00H
	DD	08H
	DD	08H
	DW	0107H
	DW	00H
	DD	09H
	DD	09H
	DW	0108H
	DW	00H
	DD	0aH
	DD	0aH
	DW	0109H
	DW	01H
	DD	0bH
	DD	0cH
	DW	010aH
	DW	01H
	DD	0dH
	DD	0eH
	DW	010bH
	DW	01H
	DD	0fH
	DD	010H
	DW	010cH
	DW	01H
	DD	011H
	DD	012H
	DW	010dH
	DW	02H
	DD	013H
	DD	016H
	DW	010eH
	DW	02H
	DD	017H
	DD	01aH
	DW	010fH
	DW	02H
	DD	01bH
	DD	01eH
	DW	0110H
	DW	02H
	DD	01fH
	DD	022H
	DW	0111H
	DW	03H
	DD	023H
	DD	02aH
	DW	0112H
	DW	03H
	DD	02bH
	DD	032H
	DW	0113H
	DW	03H
	DD	033H
	DD	03aH
	DW	0114H
	DW	03H
	DD	03bH
	DD	042H
	DW	0115H
	DW	04H
	DD	043H
	DD	052H
	DW	0116H
	DW	04H
	DD	053H
	DD	062H
	DW	0117H
	DW	04H
	DD	063H
	DD	072H
	DW	0118H
	DW	04H
	DD	073H
	DD	082H
	DW	0119H
	DW	05H
	DD	083H
	DD	0a2H
	DW	011aH
	DW	05H
	DD	0a3H
	DD	0c2H
	DW	011bH
	DW	05H
	DD	0c3H
	DD	0e2H
	DW	011cH
	DW	05H
	DD	0e3H
	DD	0101H
	DW	011dH
	DW	00H
	DD	0102H
	DD	0102H
?lenlenmap@?1??zlib_decompress_block@@9@9 DB 010H	; `zlib_decompress_block'::`2'::lenlenmap
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+1
_distcodes DW	00H
	DW	00H
	DD	01H
	DD	01H
	DW	01H
	DW	00H
	DD	02H
	DD	02H
	DW	02H
	DW	00H
	DD	03H
	DD	03H
	DW	03H
	DW	00H
	DD	04H
	DD	04H
	DW	04H
	DW	01H
	DD	05H
	DD	06H
	DW	05H
	DW	01H
	DD	07H
	DD	08H
	DW	06H
	DW	02H
	DD	09H
	DD	0cH
	DW	07H
	DW	02H
	DD	0dH
	DD	010H
	DW	08H
	DW	03H
	DD	011H
	DD	018H
	DW	09H
	DW	03H
	DD	019H
	DD	020H
	DW	0aH
	DW	04H
	DD	021H
	DD	030H
	DW	0bH
	DW	04H
	DD	031H
	DD	040H
	DW	0cH
	DW	05H
	DD	041H
	DD	060H
	DW	0dH
	DW	05H
	DD	061H
	DD	080H
	DW	0eH
	DW	06H
	DD	081H
	DD	0c0H
	DW	0fH
	DW	06H
	DD	0c1H
	DD	0100H
	DW	010H
	DW	07H
	DD	0101H
	DD	0180H
	DW	011H
	DW	07H
	DD	0181H
	DD	0200H
	DW	012H
	DW	08H
	DD	0201H
	DD	0300H
	DW	013H
	DW	08H
	DD	0301H
	DD	0400H
	DW	014H
	DW	09H
	DD	0401H
	DD	0600H
	DW	015H
	DW	09H
	DD	0601H
	DD	0800H
	DW	016H
	DW	0aH
	DD	0801H
	DD	0c00H
	DW	017H
	DW	0aH
	DD	0c01H
	DD	01000H
	DW	018H
	DW	0bH
	DD	01001H
	DD	01800H
	DW	019H
	DW	0bH
	DD	01801H
	DD	02000H
	DW	01aH
	DW	0cH
	DD	02001H
	DD	03000H
	DW	01bH
	DW	0cH
	DD	03001H
	DD	04000H
	DW	01cH
	DW	0dH
	DD	04001H
	DD	06000H
	DW	01dH
	DW	0dH
	DD	06001H
	DD	08000H
_ssh_zlib DD	FLAT:$SG7728
	DD	FLAT:$SG7729
	DD	FLAT:_zlib_compress_init
	DD	FLAT:_zlib_compress_cleanup
	DD	FLAT:_zlib_compress_block
	DD	FLAT:_zlib_decompress_init
	DD	FLAT:_zlib_decompress_cleanup
	DD	FLAT:_zlib_decompress_block
	DD	FLAT:_zlib_disable_compression
	DD	FLAT:$SG7730
CONST	ENDS
_DATA	SEGMENT
$SG7246	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'z'
	DB	00H, 'l', 00H, 'i', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7247	DB	's', 00H, 't', 00H, '-', 00H, '>', 00H, 'n', 00H, 'p', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'H', 00H, 'A', 00H, 'S', 00H
	DB	'H', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, 'S', 00H, 00H
	DB	00H
$SG7298	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'z'
	DB	00H, 'l', 00H, 'i', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7299	DB	's', 00H, 't', 00H, '-', 00H, '>', 00H, 'n', 00H, 'p', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'H', 00H, 'A', 00H, 'S', 00H, 'H', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG7317	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'z'
	DB	00H, 'l', 00H, 'i', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7318	DB	'o', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 'b', 00H, 'i', 00H, 't', 00H, 's'
	DB	00H, ' ', 00H, '+', 00H, ' ', 00H, 'n', 00H, 'b', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3'
	DB	00H, '2', 00H, 00H, 00H
$SG7363	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'z'
	DB	00H, 'l', 00H, 'i', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7364	DB	'!', 00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, '_', 00H, 'd', 00H, 'i'
	DB	00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
$SG7373	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'z'
	DB	00H, 'l', 00H, 'i', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7374	DB	'j', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'i', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG7386	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'z'
	DB	00H, 'l', 00H, 'i', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7387	DB	'j', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'i', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG7728	DB	'zlib', 00H
	ORG $+3
$SG7729	DB	'zlib@openssh.com', 00H
	ORG $+3
$SG7730	DB	'zlib (RFC1950)', 00H
_DATA	ENDS
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshzlib.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ectx$ = -8						; size = 4
_out$ = -4						; size = 4
_zlib_compress_init PROC
; Line 612
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 614
	push	16					; 00000010H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ectx$[ebp], eax
; Line 616
	mov	eax, DWORD PTR _ectx$[ebp]
	push	eax
	call	_lz77_init
	add	esp, 4
; Line 617
	mov	ecx, DWORD PTR _ectx$[ebp]
	mov	DWORD PTR [ecx+8], OFFSET _zlib_literal
; Line 618
	mov	edx, DWORD PTR _ectx$[ebp]
	mov	DWORD PTR [edx+12], OFFSET _zlib_match
; Line 620
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _out$[ebp], eax
; Line 621
	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 622
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [edx+20], 1
; Line 623
	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 624
	mov	ecx, DWORD PTR _ectx$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 626
	mov	eax, DWORD PTR _ectx$[ebp]
; Line 627
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_compress_init ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -8						; size = 4
_st$ = -4						; size = 4
_ctx$ = 8						; size = 4
_lz77_init PROC
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 148
	push	233468					; 00038ffcH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _st$[ebp], eax
; Line 149
	cmp	DWORD PTR _st$[ebp], 0
	jne	SHORT $LN7@lz77_init
; Line 150
	xor	eax, eax
	jmp	$LN8@lz77_init
$LN7@lz77_init:
; Line 152
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 154
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@lz77_init
$LN5@lz77_init:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@lz77_init:
	cmp	DWORD PTR _i$[ebp], 32768		; 00008000H
	jge	SHORT $LN4@lz77_init
; Line 155
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	or	ecx, -1
	mov	edx, DWORD PTR _st$[ebp]
	mov	WORD PTR [edx+eax+4], cx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	or	ecx, -1
	mov	edx, DWORD PTR _st$[ebp]
	mov	WORD PTR [edx+eax+2], cx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 6
	or	ecx, -1
	mov	edx, DWORD PTR _st$[ebp]
	mov	WORD PTR [edx+eax], cx
	jmp	SHORT $LN5@lz77_init
$LN4@lz77_init:
; Line 156
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@lz77_init
$LN2@lz77_init:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@lz77_init:
	cmp	DWORD PTR _i$[ebp], 2039		; 000007f7H
	jge	SHORT $LN1@lz77_init
; Line 157
	or	ecx, -1
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	mov	WORD PTR [eax+edx*2+229380], cx
	jmp	SHORT $LN2@lz77_init
$LN1@lz77_init:
; Line 158
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+229376], 0
; Line 160
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+233464], 0
; Line 162
	mov	eax, 1
$LN8@lz77_init:
; Line 163
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lz77_init ENDP
; Function compile flags: /Odtp /RTCsu
_out$ = -4						; size = 4
_ectx$ = 8						; size = 4
_c$ = 12						; size = 1
_zlib_literal PROC
; Line 499
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 500
	mov	eax, DWORD PTR _ectx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _out$[ebp], ecx
; Line 502
	mov	edx, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN3@zlib_liter
; Line 506
	push	8
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 507
	jmp	SHORT $LN4@zlib_liter
$LN3@zlib_liter:
; Line 510
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 143				; 0000008fH
	jg	SHORT $LN2@zlib_liter
; Line 512
	push	8
	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR _mirrorbytes[eax+48]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 513
	jmp	SHORT $LN4@zlib_liter
$LN2@zlib_liter:
; Line 515
	push	9
	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR _mirrorbytes[eax]
	lea	edx, DWORD PTR [ecx+ecx+1]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_outbits
	add	esp, 12					; 0000000cH
$LN4@zlib_liter:
; Line 517
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_literal ENDP
_TEXT	ENDS
EXTRN	_saferealloc:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_out$ = 8						; size = 4
_bits$ = 12						; size = 4
_nbits$ = 16						; size = 4
_outbits PROC
; Line 378
	push	ebp
	mov	ebp, esp
; Line 379
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _nbits$[ebp]
	cmp	ecx, 32					; 00000020H
	jle	SHORT $LN6@outbits
	push	379					; 0000017bH
	push	OFFSET $SG7317
	push	OFFSET $SG7318
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@outbits:
; Line 380
	mov	eax, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	edx, cl
	mov	eax, DWORD PTR _out$[ebp]
	or	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 381
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _nbits$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@outbits:
; Line 382
	mov	edx, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [edx+16], 8
	jl	$LN4@outbits
; Line 383
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LN1@outbits
; Line 384
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 385
	push	1
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@outbits:
; Line 387
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+ecx], al
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 388
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 8
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 389
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, 8
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 390
	jmp	$LN3@outbits
$LN4@outbits:
; Line 391
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_outbits ENDP
; Function compile flags: /Odtp /RTCsu
tv75 = -36						; size = 4
tv76 = -32						; size = 4
_thislen$7368 = -28					; size = 4
_out$ = -24						; size = 4
_k$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_l$ = -8						; size = 4
_d$ = -4						; size = 4
_ectx$ = 8						; size = 4
_distance$ = 12						; size = 4
_len$ = 16						; size = 4
_zlib_match PROC
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 523
	mov	eax, DWORD PTR _ectx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _out$[ebp], ecx
; Line 525
	mov	edx, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN18@zlib_match
	push	525					; 0000020dH
	push	OFFSET $SG7363
	push	OFFSET $SG7364
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@zlib_match:
; Line 527
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN19@zlib_match
; Line 540
	cmp	DWORD PTR _len$[ebp], 260		; 00000104H
	jle	SHORT $LN24@zlib_match
	mov	DWORD PTR tv76[ebp], 258		; 00000102H
	jmp	SHORT $LN25@zlib_match
$LN24@zlib_match:
	cmp	DWORD PTR _len$[ebp], 258		; 00000102H
	jg	SHORT $LN22@zlib_match
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN23@zlib_match
$LN22@zlib_match:
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 3
	mov	DWORD PTR tv75[ebp], edx
$LN23@zlib_match:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], eax
$LN25@zlib_match:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _thislen$7368[ebp], ecx
; Line 541
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _thislen$7368[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 547
	mov	DWORD PTR _i$[ebp], -1
; Line 548
	mov	DWORD PTR _j$[ebp], 29			; 0000001dH
$LN16@zlib_match:
; Line 549
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN15@zlib_match
; Line 550
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, 2
	jge	SHORT $LN26@zlib_match
	push	550					; 00000226H
	push	OFFSET $SG7373
	push	OFFSET $SG7374
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@zlib_match:
; Line 551
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _k$[ebp], eax
; Line 552
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _thislen$7368[ebp]
	cmp	ecx, DWORD PTR _lencodes[eax+4]
	jge	SHORT $LN14@zlib_match
; Line 553
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN13@zlib_match
$LN14@zlib_match:
; Line 554
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _thislen$7368[ebp]
	cmp	ecx, DWORD PTR _lencodes[eax+8]
	jle	SHORT $LN12@zlib_match
; Line 555
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _i$[ebp], edx
; Line 556
	jmp	SHORT $LN13@zlib_match
$LN12@zlib_match:
; Line 557
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, OFFSET _lencodes
	mov	DWORD PTR _l$[ebp], eax
; Line 558
	jmp	SHORT $LN15@zlib_match
$LN13@zlib_match:
; Line 560
	jmp	SHORT $LN16@zlib_match
$LN15@zlib_match:
; Line 567
	mov	ecx, DWORD PTR _l$[ebp]
	movsx	edx, WORD PTR [ecx]
	cmp	edx, 279				; 00000117H
	jg	SHORT $LN10@zlib_match
; Line 568
	push	7
	mov	eax, DWORD PTR _l$[ebp]
	movsx	ecx, WORD PTR [eax]
	movzx	edx, BYTE PTR _mirrorbytes[ecx*2-512]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 569
	jmp	SHORT $LN9@zlib_match
$LN10@zlib_match:
; Line 570
	push	8
	mov	ecx, DWORD PTR _l$[ebp]
	movsx	edx, WORD PTR [ecx]
	movzx	eax, BYTE PTR _mirrorbytes[edx-88]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN9@zlib_match:
; Line 576
	mov	edx, DWORD PTR _l$[ebp]
	movsx	eax, WORD PTR [edx+2]
	test	eax, eax
	je	SHORT $LN8@zlib_match
; Line 577
	mov	ecx, DWORD PTR _l$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _thislen$7368[ebp]
	sub	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN8@zlib_match:
; Line 583
	mov	DWORD PTR _i$[ebp], -1
; Line 584
	mov	DWORD PTR _j$[ebp], 30			; 0000001eH
$LN7@zlib_match:
; Line 585
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@zlib_match
; Line 586
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, 2
	jge	SHORT $LN27@zlib_match
	push	586					; 0000024aH
	push	OFFSET $SG7386
	push	OFFSET $SG7387
	call	__wassert
	add	esp, 12					; 0000000cH
$LN27@zlib_match:
; Line 587
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _k$[ebp], eax
; Line 588
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _distance$[ebp]
	cmp	ecx, DWORD PTR _distcodes[eax+4]
	jge	SHORT $LN5@zlib_match
; Line 589
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	jmp	SHORT $LN4@zlib_match
$LN5@zlib_match:
; Line 590
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _distance$[ebp]
	cmp	ecx, DWORD PTR _distcodes[eax+8]
	jle	SHORT $LN3@zlib_match
; Line 591
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _i$[ebp], edx
; Line 592
	jmp	SHORT $LN4@zlib_match
$LN3@zlib_match:
; Line 593
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, OFFSET _distcodes
	mov	DWORD PTR _d$[ebp], eax
; Line 594
	jmp	SHORT $LN6@zlib_match
$LN4@zlib_match:
; Line 596
	jmp	SHORT $LN7@zlib_match
$LN6@zlib_match:
; Line 601
	push	5
	mov	ecx, DWORD PTR _d$[ebp]
	movsx	edx, WORD PTR [ecx]
	movzx	eax, BYTE PTR _mirrorbytes[edx*8]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 606
	mov	edx, DWORD PTR _d$[ebp]
	movsx	eax, WORD PTR [edx+2]
	test	eax, eax
	je	SHORT $LN1@zlib_match
; Line 607
	mov	ecx, DWORD PTR _d$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _distance$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN1@zlib_match:
; Line 608
	jmp	$LN18@zlib_match
$LN19@zlib_match:
; Line 609
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_match ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ectx$ = -4						; size = 4
_handle$ = 8						; size = 4
_zlib_compress_cleanup PROC
; Line 630
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 631
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ectx$[ebp], eax
; Line 632
	mov	ecx, DWORD PTR _ectx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_safefree
	add	esp, 4
; Line 633
	mov	eax, DWORD PTR _ectx$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 634
	mov	edx, DWORD PTR _ectx$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 635
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_compress_cleanup ENDP
; Function compile flags: /Odtp /RTCsu
_n$ = -12						; size = 4
_out$ = -8						; size = 4
_ectx$ = -4						; size = 4
_handle$ = 8						; size = 4
_zlib_disable_compression PROC
; Line 644
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 645
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ectx$[ebp], eax
; Line 646
	mov	ecx, DWORD PTR _ectx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _out$[ebp], edx
; Line 649
	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+24], 1
; Line 651
	mov	DWORD PTR _n$[ebp], 0
; Line 658
	mov	ecx, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN2@zlib_disab
; Line 659
	mov	DWORD PTR _n$[ebp], 3
; Line 660
	jmp	SHORT $LN1@zlib_disab
$LN2@zlib_disab:
; Line 667
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 10					; 0000000aH
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax
$LN1@zlib_disab:
; Line 674
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 4
	mov	DWORD PTR _n$[ebp], eax
; Line 676
	mov	eax, DWORD PTR _n$[ebp]
; Line 677
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_disable_compression ENDP
; Function compile flags: /Odtp /RTCsu
tv81 = -20						; size = 4
_blen$7441 = -16					; size = 4
_in_block$ = -12					; size = 4
_out$ = -8						; size = 4
_ectx$ = -4						; size = 4
_handle$ = 8						; size = 4
_block$ = 12						; size = 4
_len$ = 16						; size = 4
_outblock$ = 20						; size = 4
_outlen$ = 24						; size = 4
_zlib_compress_block PROC
; Line 681
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 682
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ectx$[ebp], eax
; Line 683
	mov	ecx, DWORD PTR _ectx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _out$[ebp], edx
; Line 686
	mov	eax, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax], 0
; Line 687
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 694
	mov	eax, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN9@zlib_compr
; Line 695
	push	16					; 00000010H
	push	40056					; 00009c78H
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 696
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 698
	mov	DWORD PTR _in_block$[ebp], 0
; Line 699
	jmp	SHORT $LN8@zlib_compr
$LN9@zlib_compr:
; Line 700
	mov	DWORD PTR _in_block$[ebp], 1
$LN8@zlib_compr:
; Line 702
	mov	eax, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	$LN7@zlib_compr
; Line 703
	cmp	DWORD PTR _in_block$[ebp], 0
	je	SHORT $LN5@zlib_compr
; Line 704
	push	7
	push	0
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN5@zlib_compr:
; Line 706
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN4@zlib_compr
; Line 707
	cmp	DWORD PTR _len$[ebp], 65535		; 0000ffffH
	jge	SHORT $LN12@zlib_compr
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN13@zlib_compr
$LN12@zlib_compr:
	mov	DWORD PTR tv81[ebp], 65535		; 0000ffffH
$LN13@zlib_compr:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _blen$7441[ebp], eax
; Line 715
	push	3
	push	0
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 720
	mov	edx, DWORD PTR _out$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN3@zlib_compr
; Line 721
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, 8
	sub	ecx, DWORD PTR [eax+16]
	push	ecx
	push	0
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN3@zlib_compr:
; Line 729
	push	16					; 00000010H
	mov	eax, DWORD PTR _blen$7441[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 730
	push	16					; 00000010H
	mov	edx, DWORD PTR _blen$7441[ebp]
	xor	edx, 65535				; 0000ffffH
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 742
	push	0
	mov	ecx, DWORD PTR _blen$7441[ebp]
	push	ecx
	mov	edx, DWORD PTR _block$[ebp]
	push	edx
	mov	eax, DWORD PTR _ectx$[ebp]
	push	eax
	call	_lz77_compress
	add	esp, 16					; 00000010H
; Line 744
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _blen$7441[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 745
	mov	edx, DWORD PTR _block$[ebp]
	add	edx, DWORD PTR _blen$7441[ebp]
	mov	DWORD PTR _block$[ebp], edx
; Line 746
	jmp	$LN5@zlib_compr
$LN4@zlib_compr:
; Line 747
	push	3
	push	2
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 748
	jmp	SHORT $LN2@zlib_compr
$LN7@zlib_compr:
; Line 749
	cmp	DWORD PTR _in_block$[ebp], 0
	jne	SHORT $LN1@zlib_compr
; Line 756
	push	3
	push	2
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN1@zlib_compr:
; Line 762
	push	1
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ectx$[ebp]
	push	ecx
	call	_lz77_compress
	add	esp, 16					; 00000010H
; Line 787
	push	7
	push	0
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 788
	push	10					; 0000000aH
	push	2
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_outbits
	add	esp, 12					; 0000000cH
; Line 789
	push	3
	push	2
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_outbits
	add	esp, 12					; 0000000cH
$LN2@zlib_compr:
; Line 792
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 794
	mov	eax, DWORD PTR _outblock$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 795
	mov	eax, DWORD PTR _outlen$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 797
	mov	eax, 1
; Line 798
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_compress_block ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv226 = -360						; size = 4
tv207 = -356						; size = 4
tv184 = -352						; size = 4
tv171 = -348						; size = 4
tv132 = -344						; size = 4
_j$7278 = -340						; size = 4
_j$7252 = -336						; size = 4
_foo$7251 = -328					; size = 3
_deferchr$ = -320					; size = 4
_matches$ = -312					; size = 256
_defermatch$ = -48					; size = 8
_advance$ = -36						; size = 4
_matchlen$ = -32					; size = 4
_nmatch$ = -28						; size = 4
_off$ = -24						; size = 4
_distance$ = -20					; size = 4
_hash$ = -16						; size = 4
_i$ = -12						; size = 4
_st$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_compress$ = 20						; size = 4
_lz77_compress PROC
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 203
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _st$[ebp], ecx
; Line 208
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+233464], 3
	jle	SHORT $LN45@lz77_compr
	push	208					; 000000d0H
	push	OFFSET $SG7246
	push	OFFSET $SG7247
	call	__wassert
	add	esp, 12					; 0000000cH
$LN45@lz77_compr:
; Line 219
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN42@lz77_compr
$LN41@lz77_compr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN42@lz77_compr:
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+233464]
	jge	$LN40@lz77_compr
; Line 222
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, DWORD PTR [ecx+233464]
	sub	edx, DWORD PTR _i$[ebp]
	cmp	edx, 3
	jge	SHORT $LN39@lz77_compr
; Line 224
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$7252[ebp], eax
	jmp	SHORT $LN38@lz77_compr
$LN37@lz77_compr:
	mov	ecx, DWORD PTR _j$7252[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$7252[ebp], ecx
$LN38@lz77_compr:
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _j$7252[ebp]
	cmp	eax, DWORD PTR [edx+233464]
	jge	SHORT $LN36@lz77_compr
; Line 225
	mov	ecx, DWORD PTR _j$7252[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, DWORD PTR _j$7252[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	mov	dl, BYTE PTR [edx+233458]
	mov	BYTE PTR [eax+ecx+233458], dl
	jmp	SHORT $LN37@lz77_compr
$LN36@lz77_compr:
; Line 226
	jmp	$LN40@lz77_compr
$LN39@lz77_compr:
; Line 228
	mov	DWORD PTR _j$7252[ebp], 0
	jmp	SHORT $LN35@lz77_compr
$LN34@lz77_compr:
	mov	eax, DWORD PTR _j$7252[ebp]
	add	eax, 1
	mov	DWORD PTR _j$7252[ebp], eax
$LN35@lz77_compr:
	cmp	DWORD PTR _j$7252[ebp], 3
	jge	SHORT $LN33@lz77_compr
; Line 230
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$7252[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	cmp	ecx, DWORD PTR [edx+233464]
	jge	SHORT $LN46@lz77_compr
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$7252[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+233458]
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN47@lz77_compr
$LN46@lz77_compr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$7252[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [ecx+233464]
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	mov	DWORD PTR tv132[ebp], eax
$LN47@lz77_compr:
	mov	ecx, DWORD PTR _j$7252[ebp]
	mov	dl, BYTE PTR tv132[ebp]
	mov	BYTE PTR _foo$7251[ebp+ecx], dl
	jmp	SHORT $LN34@lz77_compr
$LN33@lz77_compr:
; Line 231
	lea	eax, DWORD PTR _foo$7251[ebp]
	push	eax
	call	_lz77_hash
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR _foo$7251[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	push	edx
	call	_lz77_advance
	add	esp, 12					; 0000000cH
; Line 232
	jmp	$LN41@lz77_compr
$LN40@lz77_compr:
; Line 233
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+233464]
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+233464], ecx
; Line 235
	mov	DWORD PTR _defermatch$[ebp], 0
; Line 236
	mov	DWORD PTR _defermatch$[ebp+4], 0
; Line 237
	mov	DWORD PTR _deferchr$[ebp], 0
$LN32@lz77_compr:
; Line 238
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN43@lz77_compr
; Line 241
	cmp	DWORD PTR _compress$[ebp], 0
	je	$LN30@lz77_compr
	cmp	DWORD PTR _len$[ebp], 3
	jl	$LN30@lz77_compr
; Line 245
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_lz77_hash
	add	esp, 4
	mov	DWORD PTR _hash$[ebp], eax
; Line 251
	mov	DWORD PTR _nmatch$[ebp], 0
; Line 253
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+229380]
	mov	DWORD PTR _off$[ebp], eax
	jmp	SHORT $LN29@lz77_compr
$LN28@lz77_compr:
	mov	ecx, DWORD PTR _off$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _st$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	DWORD PTR _off$[ebp], eax
$LN29@lz77_compr:
	cmp	DWORD PTR _off$[ebp], -1
	je	$LN27@lz77_compr
; Line 257
	mov	ecx, DWORD PTR _off$[ebp]
	add	ecx, 32768				; 00008000H
	mov	edx, DWORD PTR _st$[ebp]
	sub	ecx, DWORD PTR [edx+229376]
	and	ecx, -2147450881			; 80007fffH
	jns	SHORT $LN62@lz77_compr
	dec	ecx
	or	ecx, -32768				; ffff8000H
	inc	ecx
$LN62@lz77_compr:
	mov	eax, 32768				; 00008000H
	sub	eax, ecx
	mov	DWORD PTR _distance$[ebp], eax
; Line 258
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@lz77_compr
$LN25@lz77_compr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN26@lz77_compr:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN24@lz77_compr
; Line 259
	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LN48@lz77_compr
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+229376]
	add	eax, DWORD PTR _i$[ebp]
	and	eax, 32767				; 00007fffH
	mov	ecx, DWORD PTR _st$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+196608]
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN49@lz77_compr
$LN48@lz77_compr:
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv171[ebp], ecx
$LN49@lz77_compr:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, DWORD PTR _distance$[ebp]
	jns	SHORT $LN50@lz77_compr
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+229376]
	add	ecx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR _distance$[ebp]
	and	ecx, 32767				; 00007fffH
	mov	edx, DWORD PTR _st$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+196608]
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN51@lz77_compr
$LN50@lz77_compr:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR _distance$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR tv184[ebp], eax
$LN51@lz77_compr:
	mov	ecx, DWORD PTR tv171[ebp]
	cmp	ecx, DWORD PTR tv184[ebp]
	je	SHORT $LN23@lz77_compr
; Line 260
	jmp	SHORT $LN24@lz77_compr
$LN23@lz77_compr:
; Line 261
	jmp	$LN25@lz77_compr
$LN24@lz77_compr:
	cmp	DWORD PTR _i$[ebp], 3
	jne	SHORT $LN22@lz77_compr
; Line 262
	mov	edx, DWORD PTR _nmatch$[ebp]
	mov	eax, DWORD PTR _distance$[ebp]
	mov	DWORD PTR _matches$[ebp+edx*8], eax
; Line 263
	mov	ecx, DWORD PTR _nmatch$[ebp]
	mov	DWORD PTR _matches$[ebp+ecx*8+4], 3
; Line 264
	mov	edx, DWORD PTR _nmatch$[ebp]
	add	edx, 1
	mov	DWORD PTR _nmatch$[ebp], edx
	cmp	DWORD PTR _nmatch$[ebp], 32		; 00000020H
	jl	SHORT $LN22@lz77_compr
; Line 265
	jmp	SHORT $LN27@lz77_compr
$LN22@lz77_compr:
; Line 267
	jmp	$LN28@lz77_compr
$LN27@lz77_compr:
; Line 268
	jmp	SHORT $LN20@lz77_compr
$LN30@lz77_compr:
; Line 269
	mov	DWORD PTR _nmatch$[ebp], 0
; Line 270
	mov	DWORD PTR _hash$[ebp], -1
$LN20@lz77_compr:
; Line 273
	cmp	DWORD PTR _nmatch$[ebp], 0
	jle	$LN19@lz77_compr
; Line 280
	mov	DWORD PTR _matchlen$[ebp], 3
$LN18@lz77_compr:
; Line 281
	mov	eax, DWORD PTR _matchlen$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN17@lz77_compr
; Line 283
	mov	DWORD PTR _j$7278[ebp], 0
	mov	ecx, DWORD PTR _j$7278[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN16@lz77_compr
$LN15@lz77_compr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN16@lz77_compr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nmatch$[ebp]
	jge	$LN14@lz77_compr
; Line 285
	cmp	DWORD PTR _matchlen$[ebp], 0
	jge	SHORT $LN52@lz77_compr
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+229376]
	add	edx, DWORD PTR _matchlen$[ebp]
	and	edx, 32767				; 00007fffH
	mov	eax, DWORD PTR _st$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+196608]
	mov	DWORD PTR tv207[ebp], ecx
	jmp	SHORT $LN53@lz77_compr
$LN52@lz77_compr:
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _matchlen$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv207[ebp], eax
$LN53@lz77_compr:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _matchlen$[ebp]
	sub	edx, DWORD PTR _matches$[ebp+ecx*8]
	jns	SHORT $LN54@lz77_compr
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+229376]
	add	ecx, DWORD PTR _matchlen$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR _matches$[ebp+edx*8]
	and	ecx, 32767				; 00007fffH
	mov	eax, DWORD PTR _st$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx+196608]
	mov	DWORD PTR tv226[ebp], ecx
	jmp	SHORT $LN55@lz77_compr
$LN54@lz77_compr:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _matchlen$[ebp]
	sub	eax, DWORD PTR _matches$[ebp+edx*8]
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR tv226[ebp], edx
$LN55@lz77_compr:
	mov	eax, DWORD PTR tv207[ebp]
	cmp	eax, DWORD PTR tv226[ebp]
	jne	SHORT $LN13@lz77_compr
; Line 286
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _matches$[ebp+ecx*8]
	mov	eax, DWORD PTR _matches$[ebp+ecx*8+4]
	mov	ecx, DWORD PTR _j$7278[ebp]
	mov	DWORD PTR _matches$[ebp+ecx*8], edx
	mov	DWORD PTR _matches$[ebp+ecx*8+4], eax
	mov	edx, DWORD PTR _j$7278[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7278[ebp], edx
$LN13@lz77_compr:
; Line 288
	jmp	$LN15@lz77_compr
$LN14@lz77_compr:
; Line 289
	cmp	DWORD PTR _j$7278[ebp], 0
	jne	SHORT $LN12@lz77_compr
; Line 290
	jmp	SHORT $LN17@lz77_compr
$LN12@lz77_compr:
; Line 291
	mov	eax, DWORD PTR _matchlen$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchlen$[ebp], eax
; Line 292
	mov	ecx, DWORD PTR _j$7278[ebp]
	mov	DWORD PTR _nmatch$[ebp], ecx
; Line 293
	jmp	$LN18@lz77_compr
$LN17@lz77_compr:
; Line 300
	mov	edx, DWORD PTR _matchlen$[ebp]
	mov	DWORD PTR _matches$[ebp+4], edx
; Line 301
	cmp	DWORD PTR _defermatch$[ebp+4], 0
	jle	$LN11@lz77_compr
; Line 302
	mov	eax, DWORD PTR _defermatch$[ebp+4]
	add	eax, 1
	cmp	DWORD PTR _matches$[ebp+4], eax
	jle	SHORT $LN10@lz77_compr
; Line 305
	mov	esi, esp
	movzx	ecx, BYTE PTR _deferchr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 306
	mov	edx, DWORD PTR _matches$[ebp]
	mov	DWORD PTR _defermatch$[ebp], edx
	mov	eax, DWORD PTR _matches$[ebp+4]
	mov	DWORD PTR _defermatch$[ebp+4], eax
; Line 307
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _deferchr$[ebp], edx
; Line 308
	mov	DWORD PTR _advance$[ebp], 1
; Line 309
	jmp	SHORT $LN9@lz77_compr
$LN10@lz77_compr:
; Line 311
	mov	esi, esp
	mov	eax, DWORD PTR _defermatch$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _defermatch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 312
	mov	edx, DWORD PTR _defermatch$[ebp+4]
	sub	edx, 1
	mov	DWORD PTR _advance$[ebp], edx
; Line 313
	mov	DWORD PTR _defermatch$[ebp+4], 0
$LN9@lz77_compr:
; Line 315
	jmp	SHORT $LN8@lz77_compr
$LN11@lz77_compr:
; Line 317
	mov	eax, DWORD PTR _matches$[ebp]
	mov	DWORD PTR _defermatch$[ebp], eax
	mov	ecx, DWORD PTR _matches$[ebp+4]
	mov	DWORD PTR _defermatch$[ebp+4], ecx
; Line 318
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _deferchr$[ebp], eax
; Line 319
	mov	DWORD PTR _advance$[ebp], 1
$LN8@lz77_compr:
; Line 321
	jmp	SHORT $LN4@lz77_compr
$LN19@lz77_compr:
; Line 326
	cmp	DWORD PTR _defermatch$[ebp+4], 0
	jle	SHORT $LN6@lz77_compr
; Line 327
	mov	esi, esp
	mov	ecx, DWORD PTR _defermatch$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _defermatch$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 328
	mov	eax, DWORD PTR _defermatch$[ebp+4]
	sub	eax, 1
	mov	DWORD PTR _advance$[ebp], eax
; Line 329
	mov	DWORD PTR _defermatch$[ebp+4], 0
; Line 330
	jmp	SHORT $LN4@lz77_compr
$LN6@lz77_compr:
; Line 331
	mov	esi, esp
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 332
	mov	DWORD PTR _advance$[ebp], 1
$LN4@lz77_compr:
; Line 340
	cmp	DWORD PTR _advance$[ebp], 0
	jle	$LN3@lz77_compr
; Line 341
	cmp	DWORD PTR _len$[ebp], 3
	jl	SHORT $LN2@lz77_compr
; Line 342
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_lz77_hash
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	push	eax
	call	_lz77_advance
	add	esp, 12					; 0000000cH
; Line 343
	jmp	SHORT $LN1@lz77_compr
$LN2@lz77_compr:
; Line 344
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+233464], 3
	jl	SHORT $LN56@lz77_compr
	push	344					; 00000158H
	push	OFFSET $SG7298
	push	OFFSET $SG7299
	call	__wassert
	add	esp, 12					; 0000000cH
$LN56@lz77_compr:
; Line 345
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+233464]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+233458], al
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+233464]
	add	edx, 1
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+233464], edx
$LN1@lz77_compr:
; Line 347
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
; Line 348
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
; Line 349
	mov	eax, DWORD PTR _advance$[ebp]
	sub	eax, 1
	mov	DWORD PTR _advance$[ebp], eax
; Line 350
	jmp	$LN4@lz77_compr
$LN3@lz77_compr:
; Line 351
	jmp	$LN32@lz77_compr
$LN43@lz77_compr:
; Line 352
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN61@lz77_compr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN61@lz77_compr:
	DD	3
	DD	$LN60@lz77_compr
$LN60@lz77_compr:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN57@lz77_compr
	DD	-312					; fffffec8H
	DD	256					; 00000100H
	DD	$LN58@lz77_compr
	DD	-328					; fffffeb8H
	DD	3
	DD	$LN59@lz77_compr
$LN59@lz77_compr:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	0
$LN58@lz77_compr:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN57@lz77_compr:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_lz77_compress ENDP
; Function compile flags: /Odtp /RTCsu
_data$ = 8						; size = 4
_lz77_hash PROC
; Line 139
	push	ebp
	mov	ebp, esp
; Line 140
	mov	eax, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [eax]
	imul	eax, 257				; 00000101H
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	imul	edx, 263				; 00000107H
	add	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	imul	edx, 269				; 0000010dH
	add	eax, edx
	cdq
	mov	ecx, 2039				; 000007f7H
	idiv	ecx
	mov	eax, edx
; Line 141
	pop	ebp
	ret	0
_lz77_hash ENDP
; Function compile flags: /Odtp /RTCsu
_off$ = -4						; size = 4
_st$ = 8						; size = 4
_c$ = 12						; size = 1
_hash$ = 16						; size = 4
_lz77_advance PROC
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 174
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+229376]
	imul	ecx, 6
	mov	edx, DWORD PTR _st$[ebp]
	movsx	eax, WORD PTR [edx+ecx+2]
	cmp	eax, -1
	je	SHORT $LN4@lz77_advan
; Line 175
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+229376]
	imul	edx, 6
	mov	eax, DWORD PTR _st$[ebp]
	movsx	ecx, WORD PTR [eax+edx+2]
	imul	ecx, 6
	or	edx, -1
	mov	eax, DWORD PTR _st$[ebp]
	mov	WORD PTR [eax+ecx], dx
	jmp	SHORT $LN3@lz77_advan
$LN4@lz77_advan:
; Line 176
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+229376]
	imul	edx, 6
	mov	eax, DWORD PTR _st$[ebp]
	movsx	ecx, WORD PTR [eax+edx+4]
	cmp	ecx, -1
	je	SHORT $LN3@lz77_advan
; Line 177
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+229376]
	imul	eax, 6
	mov	ecx, DWORD PTR _st$[ebp]
	movsx	edx, WORD PTR [ecx+eax+4]
	or	eax, -1
	mov	ecx, DWORD PTR _st$[ebp]
	mov	WORD PTR [ecx+edx*2+229380], ax
$LN3@lz77_advan:
; Line 184
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+229376]
	imul	eax, 6
	mov	ecx, DWORD PTR _st$[ebp]
	mov	dx, WORD PTR _hash$[ebp]
	mov	WORD PTR [ecx+eax+4], dx
; Line 185
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+229376]
	imul	ecx, 6
	mov	edx, -1
	mov	eax, DWORD PTR _st$[ebp]
	mov	WORD PTR [eax+ecx+2], dx
; Line 186
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+229376]
	imul	edx, 6
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	esi, DWORD PTR _st$[ebp]
	mov	cx, WORD PTR [esi+ecx*2+229380]
	mov	WORD PTR [eax+edx], cx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+229376]
	imul	eax, 6
	mov	ecx, DWORD PTR _st$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _off$[ebp], edx
; Line 187
	mov	eax, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	dx, WORD PTR [edx+229376]
	mov	WORD PTR [ecx+eax*2+229380], dx
; Line 188
	cmp	DWORD PTR _off$[ebp], -1
	je	SHORT $LN1@lz77_advan
; Line 189
	mov	eax, DWORD PTR _off$[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	dx, WORD PTR [edx+229376]
	mov	WORD PTR [ecx+eax+2], dx
$LN1@lz77_advan:
; Line 190
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+229376]
	mov	edx, DWORD PTR _st$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx+196608], al
; Line 195
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+229376]
	add	edx, 1
	and	edx, 32767				; 00007fffH
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+229376], edx
; Line 196
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_lz77_advance ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lengths$ = -300					; size = 288
_dctx$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_zlib_decompress_init PROC
; Line 973
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 974
	push	33196					; 000081acH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _dctx$[ebp], eax
; Line 977
	push	144					; 00000090H
	push	8
	lea	eax, DWORD PTR _lengths$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 978
	push	112					; 00000070H
	push	9
	lea	ecx, DWORD PTR _lengths$[ebp+144]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 979
	push	24					; 00000018H
	push	7
	lea	edx, DWORD PTR _lengths$[ebp+256]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 980
	push	8
	push	8
	lea	eax, DWORD PTR _lengths$[ebp+280]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 981
	push	288					; 00000120H
	lea	ecx, DWORD PTR _lengths$[ebp]
	push	ecx
	call	_zlib_mktable
	add	esp, 8
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx], eax
; Line 982
	push	32					; 00000020H
	push	5
	lea	eax, DWORD PTR _lengths$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 983
	push	32					; 00000020H
	lea	ecx, DWORD PTR _lengths$[ebp]
	push	ecx
	call	_zlib_mktable
	add	esp, 8
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 984
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 985
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 986
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+404], 0
; Line 987
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], 0
; Line 988
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+33180], 0
; Line 990
	mov	eax, DWORD PTR _dctx$[ebp]
; Line 991
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@zlib_decom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@zlib_decom:
	DD	1
	DD	$LN4@zlib_decom
$LN4@zlib_decom:
	DD	-300					; fffffed4H
	DD	288					; 00000120H
	DD	$LN3@zlib_decom
$LN3@zlib_decom:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
_zlib_decompress_init ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -1328						; size = 4
_j$ = -1324						; size = 4
_i$ = -1320						; size = 4
_maxlen$ = -1316					; size = 4
_code$ = -1312						; size = 4
_codes$ = -1304						; size = 1152
_startcode$ = -144					; size = 64
_count$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_lengths$ = 8						; size = 4
_nlengths$ = 12						; size = 4
_zlib_mktable PROC
; Line 885
	push	ebp
	mov	ebp, esp
	sub	esp, 1328				; 00000530H
	push	edi
	lea	edi, DWORD PTR [ebp-1328]
	mov	ecx, 332				; 0000014cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 891
	mov	DWORD PTR _maxlen$[ebp], 0
; Line 892
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN16@zlib_mktab
$LN15@zlib_mktab:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@zlib_mktab:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN14@zlib_mktab
; Line 893
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _count$[ebp+ecx*4], 0
	jmp	SHORT $LN15@zlib_mktab
$LN14@zlib_mktab:
; Line 894
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@zlib_mktab
$LN12@zlib_mktab:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@zlib_mktab:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nlengths$[ebp]
	jge	SHORT $LN11@zlib_mktab
; Line 895
	mov	ecx, DWORD PTR _lengths$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _count$[ebp+edx*4]
	add	eax, 1
	mov	ecx, DWORD PTR _lengths$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _count$[ebp+edx*4], eax
; Line 896
	mov	eax, DWORD PTR _lengths$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _maxlen$[ebp], ecx
	jge	SHORT $LN10@zlib_mktab
; Line 897
	mov	edx, DWORD PTR _lengths$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _maxlen$[ebp], eax
$LN10@zlib_mktab:
; Line 898
	jmp	SHORT $LN12@zlib_mktab
$LN11@zlib_mktab:
; Line 900
	mov	DWORD PTR _code$[ebp], 0
; Line 901
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN9@zlib_mktab
$LN8@zlib_mktab:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@zlib_mktab:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN7@zlib_mktab
; Line 902
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	mov	DWORD PTR _startcode$[ebp+edx*4], eax
; Line 903
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _code$[ebp]
	add	edx, DWORD PTR _count$[ebp+ecx*4]
	mov	DWORD PTR _code$[ebp], edx
; Line 904
	mov	eax, DWORD PTR _code$[ebp]
	shl	eax, 1
	mov	DWORD PTR _code$[ebp], eax
; Line 905
	jmp	SHORT $LN8@zlib_mktab
$LN7@zlib_mktab:
; Line 907
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@zlib_mktab
$LN5@zlib_mktab:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@zlib_mktab:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nlengths$[ebp]
	jge	$LN4@zlib_mktab
; Line 908
	mov	eax, DWORD PTR _lengths$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _startcode$[ebp+ecx*4]
	mov	DWORD PTR _code$[ebp], edx
	mov	eax, DWORD PTR _lengths$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _startcode$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _lengths$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _startcode$[ebp+ecx*4], edx
; Line 909
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _codes$[ebp+edx*4], 0
; Line 910
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@zlib_mktab
$LN2@zlib_mktab:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@zlib_mktab:
	mov	ecx, DWORD PTR _lengths$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	DWORD PTR _j$[ebp], edx
	jge	SHORT $LN1@zlib_mktab
; Line 911
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _codes$[ebp+eax*4]
	shl	ecx, 1
	mov	edx, DWORD PTR _code$[ebp]
	and	edx, 1
	or	ecx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _codes$[ebp+eax*4], ecx
; Line 912
	mov	ecx, DWORD PTR _code$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _code$[ebp], ecx
; Line 913
	jmp	SHORT $LN2@zlib_mktab
$LN1@zlib_mktab:
; Line 914
	jmp	$LN5@zlib_mktab
$LN4@zlib_mktab:
; Line 921
	cmp	DWORD PTR _maxlen$[ebp], 9
	jge	SHORT $LN19@zlib_mktab
	mov	edx, DWORD PTR _maxlen$[ebp]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN20@zlib_mktab
$LN19@zlib_mktab:
	mov	DWORD PTR tv159[ebp], 9
$LN20@zlib_mktab:
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _nlengths$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lengths$[ebp]
	push	edx
	lea	eax, DWORD PTR _codes$[ebp]
	push	eax
	call	_zlib_mkonetab
	add	esp, 24					; 00000018H
; Line 922
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@zlib_mktab
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1328				; 00000530H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@zlib_mktab:
	DD	3
	DD	$LN24@zlib_mktab
$LN24@zlib_mktab:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN21@zlib_mktab
	DD	-144					; ffffff70H
	DD	64					; 00000040H
	DD	$LN22@zlib_mktab
	DD	-1304					; fffffae8H
	DD	1152					; 00000480H
	DD	$LN23@zlib_mktab
$LN23@zlib_mktab:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN22@zlib_mktab:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN21@zlib_mktab:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_zlib_mktable ENDP
; Function compile flags: /Odtp /RTCsu
_code$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_nbits$ = -12						; size = 4
_pfxmask$ = -8						; size = 4
_tab$ = -4						; size = 4
_codes$ = 8						; size = 4
_lengths$ = 12						; size = 4
_nsyms$ = 16						; size = 4
_pfx$ = 20						; size = 4
_pfxbits$ = 24						; size = 4
_bits$ = 28						; size = 4
_zlib_mkonetab PROC
; Line 838
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 839
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _tab$[ebp], eax
; Line 840
	mov	eax, 1
	mov	ecx, DWORD PTR _pfxbits$[ebp]
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _pfxmask$[ebp], eax
; Line 843
	push	8
	mov	edx, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 844
	mov	edx, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	sub	edx, 1
	mov	eax, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [eax], edx
; Line 846
	mov	DWORD PTR _code$[ebp], 0
	jmp	SHORT $LN17@zlib_mkone
$LN16@zlib_mkone:
	mov	ecx, DWORD PTR _code$[ebp]
	add	ecx, 1
	mov	DWORD PTR _code$[ebp], ecx
$LN17@zlib_mkone:
	mov	edx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN15@zlib_mkone
; Line 847
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	or	eax, -1
	mov	ecx, DWORD PTR _code$[ebp]
	mov	WORD PTR [edx+ecx*8+2], ax
; Line 848
	mov	edx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _code$[ebp]
	mov	BYTE PTR [eax+ecx*8], 0
; Line 849
	mov	edx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR [eax+ecx*8+4], 0
; Line 850
	jmp	SHORT $LN16@zlib_mkone
$LN15@zlib_mkone:
; Line 852
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@zlib_mkone
$LN13@zlib_mkone:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN14@zlib_mkone:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nsyms$[ebp]
	jge	$LN12@zlib_mkone
; Line 853
	mov	ecx, DWORD PTR _lengths$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, DWORD PTR _pfxbits$[ebp]
	jle	SHORT $LN10@zlib_mkone
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _codes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, DWORD PTR _pfxmask$[ebp]
	cmp	edx, DWORD PTR _pfx$[ebp]
	je	SHORT $LN11@zlib_mkone
$LN10@zlib_mkone:
; Line 854
	jmp	SHORT $LN13@zlib_mkone
$LN11@zlib_mkone:
; Line 855
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _codes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _pfxbits$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _tab$[ebp]
	and	edx, DWORD PTR [eax]
	mov	DWORD PTR _code$[ebp], edx
; Line 856
	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN9@zlib_mkone
$LN8@zlib_mkone:
	mov	edx, DWORD PTR _lengths$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx]
	sub	ecx, DWORD PTR _pfxbits$[ebp]
	mov	eax, 1
	shl	eax, cl
	add	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN9@zlib_mkone:
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN7@zlib_mkone
; Line 857
	mov	eax, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR [ecx+edx*8+2], ax
; Line 858
	mov	ecx, DWORD PTR _lengths$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, DWORD PTR _pfxbits$[ebp]
	mov	DWORD PTR _nbits$[ebp], edx
; Line 859
	mov	eax, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR [ecx+edx*8]
	cmp	eax, DWORD PTR _nbits$[ebp]
	jge	SHORT $LN6@zlib_mkone
; Line 860
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	cl, BYTE PTR _nbits$[ebp]
	mov	BYTE PTR [edx+eax*8], cl
$LN6@zlib_mkone:
; Line 861
	jmp	SHORT $LN8@zlib_mkone
$LN7@zlib_mkone:
; Line 862
	jmp	$LN13@zlib_mkone
$LN12@zlib_mkone:
; Line 863
	mov	DWORD PTR _code$[ebp], 0
	jmp	SHORT $LN5@zlib_mkone
$LN4@zlib_mkone:
	mov	edx, DWORD PTR _code$[ebp]
	add	edx, 1
	mov	DWORD PTR _code$[ebp], edx
$LN5@zlib_mkone:
	mov	eax, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR _code$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	$LN3@zlib_mkone
; Line 864
	mov	edx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _code$[ebp]
	movzx	edx, BYTE PTR [eax+ecx*8]
	cmp	edx, DWORD PTR _bits$[ebp]
	jg	SHORT $LN2@zlib_mkone
; Line 865
	jmp	SHORT $LN4@zlib_mkone
$LN2@zlib_mkone:
; Line 867
	mov	eax, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	edx, -1
	mov	eax, DWORD PTR _code$[ebp]
	mov	WORD PTR [ecx+eax*8+2], dx
; Line 868
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _code$[ebp]
	movzx	ecx, BYTE PTR [edx+eax*8]
	sub	ecx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _nbits$[ebp], ecx
; Line 869
	cmp	DWORD PTR _nbits$[ebp], 7
	jle	SHORT $LN1@zlib_mkone
; Line 870
	mov	DWORD PTR _nbits$[ebp], 7
$LN1@zlib_mkone:
; Line 871
	mov	edx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _code$[ebp]
	mov	dl, BYTE PTR _bits$[ebp]
	mov	BYTE PTR [eax+ecx*8], dl
; Line 874
	mov	eax, DWORD PTR _nbits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pfxbits$[ebp]
	add	ecx, DWORD PTR _bits$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _pfxbits$[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _pfx$[ebp]
	push	edx
	mov	eax, DWORD PTR _nsyms$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lengths$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codes$[ebp]
	push	edx
	call	_zlib_mkonetab
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 875
	jmp	$LN4@zlib_mkone
$LN3@zlib_mkone:
; Line 877
	mov	eax, DWORD PTR _tab$[ebp]
; Line 878
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_mkonetab ENDP
; Function compile flags: /Odtp /RTCsu
_dctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_zlib_decompress_cleanup PROC
; Line 994
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 995
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _dctx$[ebp], eax
; Line 997
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@zlib_decom@2
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@zlib_decom@2
; Line 998
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 8
	push	edx
	call	_zlib_freetable
	add	esp, 4
$LN3@zlib_decom@2:
; Line 999
	mov	eax, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@zlib_decom@2
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN2@zlib_decom@2
; Line 1000
	mov	ecx, DWORD PTR _dctx$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_zlib_freetable
	add	esp, 4
$LN2@zlib_decom@2:
; Line 1001
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@zlib_decom@2
; Line 1002
	mov	eax, DWORD PTR _dctx$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_zlib_freetable
	add	esp, 4
$LN1@zlib_decom@2:
; Line 1003
	mov	ecx, DWORD PTR _dctx$[ebp]
	push	ecx
	call	_zlib_freetable
	add	esp, 4
; Line 1004
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 4
	push	edx
	call	_zlib_freetable
	add	esp, 4
; Line 1005
	mov	eax, DWORD PTR _dctx$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1006
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_decompress_cleanup ENDP
; Function compile flags: /Odtp /RTCsu
_code$ = -8						; size = 4
_tab$ = -4						; size = 4
_ztab$ = 8						; size = 4
_zlib_freetable PROC
; Line 925
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 929
	cmp	DWORD PTR _ztab$[ebp], 0
	jne	SHORT $LN6@zlib_freet
; Line 930
	or	eax, -1
	jmp	$LN7@zlib_freet
$LN6@zlib_freet:
; Line 932
	mov	eax, DWORD PTR _ztab$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@zlib_freet
; Line 933
	xor	eax, eax
	jmp	SHORT $LN7@zlib_freet
$LN5@zlib_freet:
; Line 935
	mov	ecx, DWORD PTR _ztab$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tab$[ebp], edx
; Line 937
	mov	DWORD PTR _code$[ebp], 0
	jmp	SHORT $LN4@zlib_freet
$LN3@zlib_freet:
	mov	eax, DWORD PTR _code$[ebp]
	add	eax, 1
	mov	DWORD PTR _code$[ebp], eax
$LN4@zlib_freet:
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR _code$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN2@zlib_freet
; Line 938
	mov	eax, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _code$[ebp]
	cmp	DWORD PTR [ecx+edx*8+4], 0
	je	SHORT $LN1@zlib_freet
; Line 939
	mov	eax, DWORD PTR _tab$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _code$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+4]
	push	eax
	call	_zlib_freetable
	add	esp, 4
$LN1@zlib_freet:
; Line 941
	jmp	SHORT $LN3@zlib_freet
$LN2@zlib_freet:
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_safefree
	add	esp, 4
; Line 942
	mov	eax, DWORD PTR _tab$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 944
	mov	ecx, DWORD PTR _tab$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 945
	mov	edx, DWORD PTR _ztab$[ebp]
	mov	DWORD PTR [edx], 0
; Line 947
	xor	eax, eax
$LN7@zlib_freet:
; Line 948
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_freetable ENDP
; Function compile flags: /Odtp /RTCsu
tv493 = -56						; size = 4
tv440 = -52						; size = 4
tv306 = -48						; size = 4
tv293 = -44						; size = 4
tv88 = -40						; size = 4
_to_eat$7667 = -36					; size = 4
_header$ = -32						; size = 4
_nlen$ = -28						; size = 4
_dist$ = -24						; size = 4
_rep$ = -20						; size = 4
_blktype$ = -16						; size = 4
_code$ = -12						; size = 4
_rec$ = -8						; size = 4
_dctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_block$ = 12						; size = 4
_len$ = 16						; size = 4
_outblock$ = 20						; size = 4
_outlen$ = 24						; size = 4
_zlib_decompress_block PROC
; Line 1055
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1056
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _dctx$[ebp], eax
; Line 1063
	push	1
	push	256					; 00000100H
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+33184], eax
; Line 1064
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+33192], 256		; 00000100H
; Line 1065
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+33188], 0
$LN65@zlib_decom@3:
; Line 1067
	cmp	DWORD PTR _len$[ebp], 0
	jg	SHORT $LN62@zlib_decom@3
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+408], 0
	jle	$finished$7660
$LN62@zlib_decom@3:
; Line 1068
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+408], 24			; 00000018H
	jge	SHORT $LN61@zlib_decom@3
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN61@zlib_decom@3
; Line 1069
	mov	eax, DWORD PTR _block$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	shl	edx, cl
	mov	ecx, DWORD PTR _dctx$[ebp]
	or	edx, DWORD PTR [ecx+404]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
	mov	ecx, DWORD PTR _block$[ebp]
	add	ecx, 1
	mov	DWORD PTR _block$[ebp], ecx
; Line 1070
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+408]
	add	eax, 8
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+408], eax
; Line 1071
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
; Line 1072
	jmp	SHORT $LN62@zlib_decom@3
$LN61@zlib_decom@3:
; Line 1073
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 12			; 0000000cH
	ja	$LN59@zlib_decom@3
	mov	edx, DWORD PTR tv88[ebp]
	jmp	DWORD PTR $LN72@zlib_decom@3[edx*4]
$LN58@zlib_decom@3:
; Line 1076
	mov	eax, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [eax+408], 16			; 00000010H
	jge	SHORT $LN57@zlib_decom@3
; Line 1077
	jmp	$finished$7660
$LN57@zlib_decom@3:
; Line 1085
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	edx, ecx
	mov	DWORD PTR _header$[ebp], edx
; Line 1086
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+408]
	sub	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+408], eax
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+404]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+404], eax
; Line 1101
	mov	edx, DWORD PTR _header$[ebp]
	and	edx, 3840				; 00000f00H
	cmp	edx, 2048				; 00000800H
	jne	SHORT $LN55@zlib_decom@3
	mov	eax, DWORD PTR _header$[ebp]
	and	eax, 61440				; 0000f000H
	cmp	eax, 28672				; 00007000H
	jg	SHORT $LN55@zlib_decom@3
	mov	ecx, DWORD PTR _header$[ebp]
	and	ecx, 32					; 00000020H
	jne	SHORT $LN55@zlib_decom@3
	mov	eax, DWORD PTR _header$[ebp]
	cdq
	mov	ecx, 31					; 0000001fH
	idiv	ecx
	test	edx, edx
	je	SHORT $LN56@zlib_decom@3
$LN55@zlib_decom@3:
; Line 1102
	jmp	$decode_error$7663
$LN56@zlib_decom@3:
; Line 1104
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 1
; Line 1105
	jmp	$LN59@zlib_decom@3
$LN54@zlib_decom@3:
; Line 1108
	mov	eax, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [eax+408], 3
	jge	SHORT $LN53@zlib_decom@3
; Line 1109
	jmp	$finished$7660
$LN53@zlib_decom@3:
; Line 1110
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	sub	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+408], edx
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	shr	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
; Line 1111
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	and	edx, 3
	mov	DWORD PTR _blktype$[ebp], edx
; Line 1112
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	sub	ecx, 2
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], ecx
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	shr	ecx, 2
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+404], ecx
; Line 1113
	cmp	DWORD PTR _blktype$[ebp], 0
	jne	SHORT $LN52@zlib_decom@3
; Line 1114
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	and	ecx, 7
	mov	DWORD PTR _to_eat$7667[ebp], ecx
; Line 1115
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 10			; 0000000aH
; Line 1116
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	sub	ecx, DWORD PTR _to_eat$7667[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], ecx
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [eax+404]
	mov	ecx, DWORD PTR _to_eat$7667[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
	jmp	SHORT $LN51@zlib_decom@3
$LN52@zlib_decom@3:
; Line 1117
	cmp	DWORD PTR _blktype$[ebp], 1
	jne	SHORT $LN50@zlib_decom@3
; Line 1118
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
; Line 1119
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+12], eax
; Line 1120
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+20], 6
	jmp	SHORT $LN51@zlib_decom@3
$LN50@zlib_decom@3:
; Line 1121
	cmp	DWORD PTR _blktype$[ebp], 2
	jne	SHORT $LN51@zlib_decom@3
; Line 1122
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 2
$LN51@zlib_decom@3:
; Line 1124
	jmp	$LN59@zlib_decom@3
$LN47@zlib_decom@3:
; Line 1130
	mov	eax, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [eax+408], 14			; 0000000eH
	jge	SHORT $LN46@zlib_decom@3
; Line 1131
	jmp	$finished$7660
$LN46@zlib_decom@3:
; Line 1132
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	and	edx, 31					; 0000001fH
	add	edx, 257				; 00000101H
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 1133
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	sub	edx, 5
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+408], edx
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	shr	edx, 5
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
; Line 1134
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	and	edx, 31					; 0000001fH
	add	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+32], edx
; Line 1135
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	sub	edx, 5
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+408], edx
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	shr	edx, 5
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
; Line 1136
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	and	edx, 15					; 0000000fH
	add	edx, 4
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 1137
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	sub	edx, 4
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+408], edx
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	shr	edx, 4
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
; Line 1138
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 1139
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 3
; Line 1140
	push	19					; 00000013H
	push	0
	mov	eax, DWORD PTR _dctx$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1141
	jmp	$LN59@zlib_decom@3
$LN45@zlib_decom@3:
; Line 1143
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+408], 3
	jge	SHORT $LN43@zlib_decom@3
; Line 1144
	jmp	$finished$7660
$LN43@zlib_decom@3:
; Line 1145
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN42@zlib_decom@3
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+408], 3
	jl	SHORT $LN42@zlib_decom@3
; Line 1147
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	and	ecx, 7
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movzx	edx, BYTE PTR ?lenlenmap@?1??zlib_decompress_block@@9@9[eax]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	BYTE PTR [eax+edx+64], cl
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 1148
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	sub	edx, 3
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+408], edx
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	shr	edx, 3
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
; Line 1149
	jmp	SHORT $LN43@zlib_decom@3
$LN42@zlib_decom@3:
; Line 1150
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	cmp	eax, DWORD PTR [edx+36]
	jne	SHORT $LN41@zlib_decom@3
; Line 1151
	push	19					; 00000013H
	mov	ecx, DWORD PTR _dctx$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_zlib_mktable
	add	esp, 8
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1152
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+20], 4
; Line 1153
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+40], 0
$LN41@zlib_decom@3:
; Line 1155
	jmp	$LN59@zlib_decom@3
$LN40@zlib_decom@3:
; Line 1157
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _dctx$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+40], eax
	jl	SHORT $LN39@zlib_decom@3
; Line 1158
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 83					; 00000053H
	push	edx
	call	_zlib_mktable
	add	esp, 8
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1160
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _dctx$[ebp]
	lea	ecx, DWORD PTR [eax+edx+83]
	push	ecx
	call	_zlib_mktable
	add	esp, 8
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1161
	mov	eax, DWORD PTR _dctx$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_zlib_freetable
	add	esp, 4
; Line 1162
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 1163
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 6
; Line 1164
	jmp	$LN59@zlib_decom@3
$LN39@zlib_decom@3:
; Line 1167
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 408				; 00000198H
	push	edx
	mov	eax, DWORD PTR _dctx$[ebp]
	add	eax, 404				; 00000194H
	push	eax
	call	_zlib_huflookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _code$[ebp], eax
; Line 1168
	cmp	DWORD PTR _code$[ebp], -1
	jne	SHORT $LN38@zlib_decom@3
; Line 1169
	jmp	$finished$7660
$LN38@zlib_decom@3:
; Line 1170
	cmp	DWORD PTR _code$[ebp], -2		; fffffffeH
	jne	SHORT $LN37@zlib_decom@3
; Line 1171
	jmp	$decode_error$7663
$LN37@zlib_decom@3:
; Line 1172
	cmp	DWORD PTR _code$[ebp], 16		; 00000010H
	jge	SHORT $LN36@zlib_decom@3
; Line 1173
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	cl, BYTE PTR _code$[ebp]
	mov	BYTE PTR [eax+edx+83], cl
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 1
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 1174
	jmp	SHORT $LN35@zlib_decom@3
$LN36@zlib_decom@3:
; Line 1175
	cmp	DWORD PTR _code$[ebp], 16		; 00000010H
	jne	SHORT $LN68@zlib_decom@3
	mov	DWORD PTR tv293[ebp], 2
	jmp	SHORT $LN69@zlib_decom@3
$LN68@zlib_decom@3:
	xor	edx, edx
	cmp	DWORD PTR _code$[ebp], 17		; 00000011H
	setne	dl
	lea	edx, DWORD PTR [edx*4+3]
	mov	DWORD PTR tv293[ebp], edx
$LN69@zlib_decom@3:
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR tv293[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 1176
	xor	edx, edx
	cmp	DWORD PTR _code$[ebp], 18		; 00000012H
	sete	dl
	lea	edx, DWORD PTR [edx*8+3]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 1178
	cmp	DWORD PTR _code$[ebp], 16		; 00000010H
	jne	SHORT $LN70@zlib_decom@3
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN70@zlib_decom@3
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _dctx$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+82]
	mov	DWORD PTR tv306[ebp], edx
	jmp	SHORT $LN71@zlib_decom@3
$LN70@zlib_decom@3:
	mov	DWORD PTR tv306[ebp], 0
$LN71@zlib_decom@3:
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR tv306[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1179
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 5
$LN35@zlib_decom@3:
; Line 1181
	jmp	$LN59@zlib_decom@3
$LN34@zlib_decom@3:
; Line 1183
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [eax+408]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN33@zlib_decom@3
; Line 1184
	jmp	$finished$7660
$LN33@zlib_decom@3:
; Line 1187
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+44]
	shl	edx, cl
	sub	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	and	edx, DWORD PTR [eax+404]
	mov	ecx, DWORD PTR _dctx$[ebp]
	add	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _rep$[ebp], edx
; Line 1188
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	sub	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], ecx
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [eax+404]
	mov	ecx, DWORD PTR [ecx+44]
	shr	edx, cl
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+404], edx
$LN32@zlib_decom@3:
; Line 1189
	cmp	DWORD PTR _rep$[ebp], 0
	jle	SHORT $LN31@zlib_decom@3
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _dctx$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+40], edx
	jge	SHORT $LN31@zlib_decom@3
; Line 1190
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	dl, BYTE PTR [edx+56]
	mov	BYTE PTR [ecx+eax+83], dl
; Line 1191
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 1192
	mov	eax, DWORD PTR _rep$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rep$[ebp], eax
; Line 1193
	jmp	SHORT $LN32@zlib_decom@3
$LN31@zlib_decom@3:
; Line 1194
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+20], 4
; Line 1195
	jmp	$LN59@zlib_decom@3
$LN30@zlib_decom@3:
; Line 1198
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _dctx$[ebp]
	add	ecx, 408				; 00000198H
	push	ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 404				; 00000194H
	push	edx
	call	_zlib_huflookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _code$[ebp], eax
; Line 1199
	cmp	DWORD PTR _code$[ebp], -1
	jne	SHORT $LN29@zlib_decom@3
; Line 1200
	jmp	$finished$7660
$LN29@zlib_decom@3:
; Line 1201
	cmp	DWORD PTR _code$[ebp], -2		; fffffffeH
	jne	SHORT $LN28@zlib_decom@3
; Line 1202
	jmp	$decode_error$7663
$LN28@zlib_decom@3:
; Line 1203
	cmp	DWORD PTR _code$[ebp], 256		; 00000100H
	jge	SHORT $LN27@zlib_decom@3
; Line 1204
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dctx$[ebp]
	push	ecx
	call	_zlib_emit_char
	add	esp, 8
	jmp	SHORT $LN26@zlib_decom@3
$LN27@zlib_decom@3:
; Line 1205
	cmp	DWORD PTR _code$[ebp], 256		; 00000100H
	jne	SHORT $LN25@zlib_decom@3
; Line 1206
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 1
; Line 1207
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN24@zlib_decom@3
; Line 1208
	mov	eax, DWORD PTR _dctx$[ebp]
	add	eax, 8
	push	eax
	call	_zlib_freetable
	add	esp, 4
; Line 1209
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN24@zlib_decom@3:
; Line 1211
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN23@zlib_decom@3
; Line 1212
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_zlib_freetable
	add	esp, 4
; Line 1213
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN23@zlib_decom@3:
; Line 1214
	jmp	SHORT $LN26@zlib_decom@3
$LN25@zlib_decom@3:
; Line 1215
	cmp	DWORD PTR _code$[ebp], 286		; 0000011eH
	jge	SHORT $LN26@zlib_decom@3
; Line 1216
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+20], 7
; Line 1217
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN26@zlib_decom@3:
; Line 1219
	jmp	$LN59@zlib_decom@3
$LN20@zlib_decom@3:
; Line 1221
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, 257				; 00000101H
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _lencodes
	mov	DWORD PTR _rec$[ebp], edx
; Line 1222
	mov	eax, DWORD PTR _rec$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+408], ecx
	jge	SHORT $LN19@zlib_decom@3
; Line 1223
	jmp	$finished$7660
$LN19@zlib_decom@3:
; Line 1225
	mov	eax, DWORD PTR _rec$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	and	edx, DWORD PTR [eax+404]
	mov	ecx, DWORD PTR _rec$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 1226
	mov	ecx, DWORD PTR _rec$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	sub	ecx, edx
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], ecx
	mov	eax, DWORD PTR _rec$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+404]
	shr	eax, cl
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+404], eax
; Line 1227
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 8
; Line 1228
	jmp	$LN59@zlib_decom@3
$LN18@zlib_decom@3:
; Line 1232
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	add	edx, 408				; 00000198H
	push	edx
	mov	eax, DWORD PTR _dctx$[ebp]
	add	eax, 404				; 00000194H
	push	eax
	call	_zlib_huflookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _code$[ebp], eax
; Line 1233
	cmp	DWORD PTR _code$[ebp], -1
	jne	SHORT $LN17@zlib_decom@3
; Line 1234
	jmp	$finished$7660
$LN17@zlib_decom@3:
; Line 1235
	cmp	DWORD PTR _code$[ebp], -2		; fffffffeH
	jne	SHORT $LN16@zlib_decom@3
; Line 1236
	jmp	$decode_error$7663
$LN16@zlib_decom@3:
; Line 1237
	cmp	DWORD PTR _code$[ebp], 30		; 0000001eH
	jl	SHORT $LN15@zlib_decom@3
; Line 1238
	jmp	$decode_error$7663
$LN15@zlib_decom@3:
; Line 1239
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+20], 9
; Line 1240
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1241
	jmp	$LN59@zlib_decom@3
$LN14@zlib_decom@3:
; Line 1243
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	imul	edx, 12					; 0000000cH
	add	edx, OFFSET _distcodes
	mov	DWORD PTR _rec$[ebp], edx
; Line 1244
	mov	eax, DWORD PTR _rec$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+408], ecx
	jge	SHORT $LN13@zlib_decom@3
; Line 1245
	jmp	$finished$7660
$LN13@zlib_decom@3:
; Line 1246
	mov	eax, DWORD PTR _rec$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	eax, DWORD PTR _dctx$[ebp]
	and	edx, DWORD PTR [eax+404]
	mov	ecx, DWORD PTR _rec$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _dist$[ebp], edx
; Line 1247
	mov	edx, DWORD PTR _rec$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	sub	edx, eax
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+408], edx
	mov	ecx, DWORD PTR _rec$[ebp]
	movsx	ecx, WORD PTR [ecx+2]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+404]
	shr	eax, cl
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+404], eax
; Line 1248
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 6
$LN12@zlib_decom@3:
; Line 1249
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR tv440[ebp], ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, 1
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+52], eax
	cmp	DWORD PTR tv440[ebp], 0
	je	SHORT $LN11@zlib_decom@3
; Line 1251
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+33180]
	sub	eax, DWORD PTR _dist$[ebp]
	and	eax, 32767				; 00007fffH
	mov	ecx, DWORD PTR _dctx$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+412]
	push	edx
	mov	eax, DWORD PTR _dctx$[ebp]
	push	eax
	call	_zlib_emit_char
	add	esp, 8
	jmp	SHORT $LN12@zlib_decom@3
$LN11@zlib_decom@3:
; Line 1252
	jmp	$LN59@zlib_decom@3
$LN10@zlib_decom@3:
; Line 1257
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+408], 16			; 00000010H
	jge	SHORT $LN9@zlib_decom@3
; Line 1258
	jmp	$finished$7660
$LN9@zlib_decom@3:
; Line 1259
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+404]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 1260
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+408]
	sub	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+408], eax
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+404]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+404], eax
; Line 1261
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+20], 11			; 0000000bH
; Line 1262
	jmp	$LN59@zlib_decom@3
$LN8@zlib_decom@3:
; Line 1269
	mov	eax, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [eax+408], 16			; 00000010H
	jge	SHORT $LN7@zlib_decom@3
; Line 1270
	jmp	$finished$7660
$LN7@zlib_decom@3:
; Line 1271
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _nlen$[ebp], edx
; Line 1272
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], ecx
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+404], ecx
; Line 1273
	mov	eax, DWORD PTR _nlen$[ebp]
	xor	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [ecx+60], eax
	je	SHORT $LN6@zlib_decom@3
; Line 1274
	jmp	$decode_error$7663
$LN6@zlib_decom@3:
; Line 1275
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+60], 0
	jne	SHORT $LN5@zlib_decom@3
; Line 1276
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 1277
	jmp	SHORT $LN4@zlib_decom@3
$LN5@zlib_decom@3:
; Line 1278
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+20], 12			; 0000000cH
$LN4@zlib_decom@3:
; Line 1279
	jmp	SHORT $LN59@zlib_decom@3
$LN3@zlib_decom@3:
; Line 1281
	mov	edx, DWORD PTR _dctx$[ebp]
	cmp	DWORD PTR [edx+408], 8
	jge	SHORT $LN2@zlib_decom@3
; Line 1282
	jmp	SHORT $finished$7660
$LN2@zlib_decom@3:
; Line 1283
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	push	edx
	call	_zlib_emit_char
	add	esp, 8
; Line 1284
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	sub	ecx, 8
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+408], ecx
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	shr	ecx, 8
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+404], ecx
; Line 1285
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 1
	mov	DWORD PTR tv493[ebp], ecx
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR tv493[ebp]
	mov	DWORD PTR [edx+60], eax
	cmp	DWORD PTR tv493[ebp], 0
	jne	SHORT $LN59@zlib_decom@3
; Line 1286
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+20], 1
$LN59@zlib_decom@3:
; Line 1289
	jmp	$LN65@zlib_decom@3
$finished$7660:
; Line 1292
	mov	edx, DWORD PTR _outblock$[ebp]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+33184]
	mov	DWORD PTR [edx], ecx
; Line 1293
	mov	edx, DWORD PTR _outlen$[ebp]
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+33188]
	mov	DWORD PTR [edx], ecx
; Line 1294
	mov	eax, 1
	jmp	SHORT $LN66@zlib_decom@3
$decode_error$7663:
; Line 1297
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+33184]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1298
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [ecx+33184], 0
	mov	edx, DWORD PTR _outblock$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1299
	mov	eax, DWORD PTR _outlen$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1300
	xor	eax, eax
$LN66@zlib_decom@3:
; Line 1301
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN72@zlib_decom@3:
	DD	$LN58@zlib_decom@3
	DD	$LN54@zlib_decom@3
	DD	$LN47@zlib_decom@3
	DD	$LN45@zlib_decom@3
	DD	$LN40@zlib_decom@3
	DD	$LN34@zlib_decom@3
	DD	$LN30@zlib_decom@3
	DD	$LN20@zlib_decom@3
	DD	$LN18@zlib_decom@3
	DD	$LN14@zlib_decom@3
	DD	$LN10@zlib_decom@3
	DD	$LN8@zlib_decom@3
	DD	$LN3@zlib_decom@3
_zlib_decompress_block ENDP
; Function compile flags: /Odtp /RTCsu
_ent$7608 = -12					; size = 4
_nbits$ = -8						; size = 4
_bits$ = -4						; size = 4
_bitsp$ = 8						; size = 4
_nbitsp$ = 12						; size = 4
_tab$ = 16						; size = 4
_zlib_huflookup PROC
; Line 1010
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1011
	mov	eax, DWORD PTR _bitsp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bits$[ebp], ecx
; Line 1012
	mov	edx, DWORD PTR _nbitsp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _nbits$[ebp], eax
$LN6@zlib_huflo:
; Line 1013
	mov	ecx, 1
	test	ecx, ecx
	je	$LN7@zlib_huflo
; Line 1015
	mov	edx, DWORD PTR _tab$[ebp]
	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _tab$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _ent$7608[ebp], eax
; Line 1016
	mov	ecx, DWORD PTR _ent$7608[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, DWORD PTR _nbits$[ebp]
	jle	SHORT $LN4@zlib_huflo
; Line 1017
	or	eax, -1
	jmp	SHORT $LN7@zlib_huflo
$LN4@zlib_huflo:
; Line 1018
	mov	eax, DWORD PTR _ent$7608[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _bits$[ebp]
	shr	edx, cl
	mov	DWORD PTR _bits$[ebp], edx
; Line 1019
	mov	eax, DWORD PTR _ent$7608[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nbits$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _nbits$[ebp], edx
; Line 1020
	mov	eax, DWORD PTR _ent$7608[ebp]
	movsx	ecx, WORD PTR [eax+2]
	cmp	ecx, -1
	jne	SHORT $LN3@zlib_huflo
; Line 1021
	mov	edx, DWORD PTR _ent$7608[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _tab$[ebp], eax
; Line 1022
	jmp	SHORT $LN2@zlib_huflo
$LN3@zlib_huflo:
; Line 1023
	mov	ecx, DWORD PTR _bitsp$[ebp]
	mov	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1024
	mov	eax, DWORD PTR _nbitsp$[ebp]
	mov	ecx, DWORD PTR _nbits$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1025
	mov	edx, DWORD PTR _ent$7608[ebp]
	movsx	eax, WORD PTR [edx+2]
	jmp	SHORT $LN7@zlib_huflo
$LN2@zlib_huflo:
; Line 1028
	cmp	DWORD PTR _tab$[ebp], 0
	jne	SHORT $LN1@zlib_huflo
; Line 1035
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN7@zlib_huflo
$LN1@zlib_huflo:
; Line 1037
	jmp	$LN6@zlib_huflo
$LN7@zlib_huflo:
; Line 1038
	mov	esp, ebp
	pop	ebp
	ret	0
_zlib_huflookup ENDP
; Function compile flags: /Odtp /RTCsu
_dctx$ = 8						; size = 4
_c$ = 12						; size = 4
_zlib_emit_char PROC
; Line 1041
	push	ebp
	mov	ebp, esp
; Line 1042
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+33180]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx+412], al
; Line 1043
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+33180]
	add	edx, 1
	and	edx, 32767				; 00007fffH
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+33180], edx
; Line 1044
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [ecx+33188]
	cmp	eax, DWORD PTR [edx+33192]
	jl	SHORT $LN1@zlib_emit_
; Line 1045
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+33188]
	add	edx, 512				; 00000200H
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [eax+33192], edx
; Line 1046
	push	1
	mov	ecx, DWORD PTR _dctx$[ebp]
	mov	edx, DWORD PTR [ecx+33192]
	push	edx
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+33184]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+33184], eax
$LN1@zlib_emit_:
; Line 1048
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+33184]
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	eax, DWORD PTR [edx+33188]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _dctx$[ebp]
	mov	ecx, DWORD PTR [eax+33188]
	add	ecx, 1
	mov	edx, DWORD PTR _dctx$[ebp]
	mov	DWORD PTR [edx+33188], ecx
; Line 1049
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_zlib_emit_char ENDP
_TEXT	ENDS
END
