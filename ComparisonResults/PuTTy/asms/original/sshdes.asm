; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshdes.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh2_3des
PUBLIC	_ssh2_des
PUBLIC	_ssh_3des
PUBLIC	_ssh_des
_DATA	SEGMENT
$SG6000	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 'e', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG6001	DB	'(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '7', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG6044	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 'e', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG6045	DB	'(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '7', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG6094	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 'e', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG6095	DB	'(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '7', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG6146	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 'e', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG6147	DB	'(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '7', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG6189	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 'e', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG6190	DB	'(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '7', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG6733	DB	'3des-cbc', 00H
	ORG $+3
$SG6734	DB	'triple-DES CBC', 00H
	ORG $+1
$SG6736	DB	'3des-ctr', 00H
	ORG $+3
$SG6737	DB	'triple-DES SDCTR', 00H
	ORG $+3
$SG6739	DB	'des-cbc', 00H
$SG6740	DB	'single-DES CBC', 00H
	ORG $+1
$SG6742	DB	'des-cbc@ssh.com', 00H
$SG6743	DB	'single-DES CBC', 00H
	ORG $+1
$SG6746	DB	'triple-DES inner-CBC', 00H
	ORG $+3
$SG6775	DB	'single-DES CBC', 00H
_DATA	ENDS
CONST	SEGMENT
?PC1_Cbits@?1??des_key_setup@@9@9 DD 07H		; `des_key_setup'::`2'::PC1_Cbits
	DD	0fH
	DD	017H
	DD	01fH
	DD	027H
	DD	02fH
	DD	037H
	DD	03fH
	DD	06H
	DD	0eH
	DD	016H
	DD	01eH
	DD	026H
	DD	02eH
	DD	036H
	DD	03eH
	DD	05H
	DD	0dH
	DD	015H
	DD	01dH
	DD	025H
	DD	02dH
	DD	035H
	DD	03dH
	DD	04H
	DD	0cH
	DD	014H
	DD	01cH
?PC1_Dbits@?1??des_key_setup@@9@9 DD 01H		; `des_key_setup'::`2'::PC1_Dbits
	DD	09H
	DD	011H
	DD	019H
	DD	021H
	DD	029H
	DD	031H
	DD	039H
	DD	02H
	DD	0aH
	DD	012H
	DD	01aH
	DD	022H
	DD	02aH
	DD	032H
	DD	03aH
	DD	03H
	DD	0bH
	DD	013H
	DD	01bH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	024H
	DD	02cH
	DD	034H
	DD	03cH
?PC2_0246@?1??des_key_setup@@9@9 DD 031H		; `des_key_setup'::`2'::PC2_0246
	DD	024H
	DD	03bH
	DD	037H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	025H
	DD	029H
	DD	030H
	DD	038H
	DD	022H
	DD	034H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0fH
	DD	04H
	DD	019H
	DD	013H
	DD	09H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0cH
	DD	07H
	DD	011H
	DD	00H
	DD	016H
	DD	03H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	02eH
	DD	02bH
?PC2_1357@?1??des_key_setup@@9@9 DD 0ffffffffH		; `des_key_setup'::`2'::PC2_1357
	DD	0ffffffffH
	DD	039H
	DD	020H
	DD	02dH
	DD	036H
	DD	027H
	DD	032H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	02cH
	DD	035H
	DD	021H
	DD	028H
	DD	02fH
	DD	03aH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01aH
	DD	010H
	DD	05H
	DD	0bH
	DD	017H
	DD	08H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0aH
	DD	0eH
	DD	06H
	DD	014H
	DD	01bH
	DD	018H
?leftshifts@?1??des_key_setup@@9@9 DD 01H		; `des_key_setup'::`2'::leftshifts
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
_SPboxes DD	01010400H
	DD	00H
	DD	010000H
	DD	01010404H
	DD	01010004H
	DD	010404H
	DD	04H
	DD	010000H
	DD	0400H
	DD	01010400H
	DD	01010404H
	DD	0400H
	DD	01000404H
	DD	01010004H
	DD	01000000H
	DD	04H
	DD	0404H
	DD	01000400H
	DD	01000400H
	DD	010400H
	DD	010400H
	DD	01010000H
	DD	01010000H
	DD	01000404H
	DD	010004H
	DD	01000004H
	DD	01000004H
	DD	010004H
	DD	00H
	DD	0404H
	DD	010404H
	DD	01000000H
	DD	010000H
	DD	01010404H
	DD	04H
	DD	01010000H
	DD	01010400H
	DD	01000000H
	DD	01000000H
	DD	0400H
	DD	01010004H
	DD	010000H
	DD	010400H
	DD	01000004H
	DD	0400H
	DD	04H
	DD	01000404H
	DD	010404H
	DD	01010404H
	DD	010004H
	DD	01010000H
	DD	01000404H
	DD	01000004H
	DD	0404H
	DD	010404H
	DD	01010400H
	DD	0404H
	DD	01000400H
	DD	01000400H
	DD	00H
	DD	010004H
	DD	010400H
	DD	00H
	DD	01010004H
	DD	080108020H
	DD	080008000H
	DD	08000H
	DD	0108020H
	DD	0100000H
	DD	020H
	DD	080100020H
	DD	080008020H
	DD	080000020H
	DD	080108020H
	DD	080108000H
	DD	080000000H
	DD	080008000H
	DD	0100000H
	DD	020H
	DD	080100020H
	DD	0108000H
	DD	0100020H
	DD	080008020H
	DD	00H
	DD	080000000H
	DD	08000H
	DD	0108020H
	DD	080100000H
	DD	0100020H
	DD	080000020H
	DD	00H
	DD	0108000H
	DD	08020H
	DD	080108000H
	DD	080100000H
	DD	08020H
	DD	00H
	DD	0108020H
	DD	080100020H
	DD	0100000H
	DD	080008020H
	DD	080100000H
	DD	080108000H
	DD	08000H
	DD	080100000H
	DD	080008000H
	DD	020H
	DD	080108020H
	DD	0108020H
	DD	020H
	DD	08000H
	DD	080000000H
	DD	08020H
	DD	080108000H
	DD	0100000H
	DD	080000020H
	DD	0100020H
	DD	080008020H
	DD	080000020H
	DD	0100020H
	DD	0108000H
	DD	00H
	DD	080008000H
	DD	08020H
	DD	080000000H
	DD	080100020H
	DD	080108020H
	DD	0108000H
	DD	0208H
	DD	08020200H
	DD	00H
	DD	08020008H
	DD	08000200H
	DD	00H
	DD	020208H
	DD	08000200H
	DD	020008H
	DD	08000008H
	DD	08000008H
	DD	020000H
	DD	08020208H
	DD	020008H
	DD	08020000H
	DD	0208H
	DD	08000000H
	DD	08H
	DD	08020200H
	DD	0200H
	DD	020200H
	DD	08020000H
	DD	08020008H
	DD	020208H
	DD	08000208H
	DD	020200H
	DD	020000H
	DD	08000208H
	DD	08H
	DD	08020208H
	DD	0200H
	DD	08000000H
	DD	08020200H
	DD	08000000H
	DD	020008H
	DD	0208H
	DD	020000H
	DD	08020200H
	DD	08000200H
	DD	00H
	DD	0200H
	DD	020008H
	DD	08020208H
	DD	08000200H
	DD	08000008H
	DD	0200H
	DD	00H
	DD	08020008H
	DD	08000208H
	DD	020000H
	DD	08000000H
	DD	08020208H
	DD	08H
	DD	020208H
	DD	020200H
	DD	08000008H
	DD	08020000H
	DD	08000208H
	DD	0208H
	DD	08020000H
	DD	020208H
	DD	08H
	DD	08020008H
	DD	020200H
	DD	0802001H
	DD	02081H
	DD	02081H
	DD	080H
	DD	0802080H
	DD	0800081H
	DD	0800001H
	DD	02001H
	DD	00H
	DD	0802000H
	DD	0802000H
	DD	0802081H
	DD	081H
	DD	00H
	DD	0800080H
	DD	0800001H
	DD	01H
	DD	02000H
	DD	0800000H
	DD	0802001H
	DD	080H
	DD	0800000H
	DD	02001H
	DD	02080H
	DD	0800081H
	DD	01H
	DD	02080H
	DD	0800080H
	DD	02000H
	DD	0802080H
	DD	0802081H
	DD	081H
	DD	0800080H
	DD	0800001H
	DD	0802000H
	DD	0802081H
	DD	081H
	DD	00H
	DD	00H
	DD	0802000H
	DD	02080H
	DD	0800080H
	DD	0800081H
	DD	01H
	DD	0802001H
	DD	02081H
	DD	02081H
	DD	080H
	DD	0802081H
	DD	081H
	DD	01H
	DD	02000H
	DD	0800001H
	DD	02001H
	DD	0802080H
	DD	0800081H
	DD	02001H
	DD	02080H
	DD	0800000H
	DD	0802001H
	DD	080H
	DD	0800000H
	DD	02000H
	DD	0802080H
	DD	0100H
	DD	02080100H
	DD	02080000H
	DD	042000100H
	DD	080000H
	DD	0100H
	DD	040000000H
	DD	02080000H
	DD	040080100H
	DD	080000H
	DD	02000100H
	DD	040080100H
	DD	042000100H
	DD	042080000H
	DD	080100H
	DD	040000000H
	DD	02000000H
	DD	040080000H
	DD	040080000H
	DD	00H
	DD	040000100H
	DD	042080100H
	DD	042080100H
	DD	02000100H
	DD	042080000H
	DD	040000100H
	DD	00H
	DD	042000000H
	DD	02080100H
	DD	02000000H
	DD	042000000H
	DD	080100H
	DD	080000H
	DD	042000100H
	DD	0100H
	DD	02000000H
	DD	040000000H
	DD	02080000H
	DD	042000100H
	DD	040080100H
	DD	02000100H
	DD	040000000H
	DD	042080000H
	DD	02080100H
	DD	040080100H
	DD	0100H
	DD	02000000H
	DD	042080000H
	DD	042080100H
	DD	080100H
	DD	042000000H
	DD	042080100H
	DD	02080000H
	DD	00H
	DD	040080000H
	DD	042000000H
	DD	080100H
	DD	02000100H
	DD	040000100H
	DD	080000H
	DD	00H
	DD	040080000H
	DD	02080100H
	DD	040000100H
	DD	020000010H
	DD	020400000H
	DD	04000H
	DD	020404010H
	DD	020400000H
	DD	010H
	DD	020404010H
	DD	0400000H
	DD	020004000H
	DD	0404010H
	DD	0400000H
	DD	020000010H
	DD	0400010H
	DD	020004000H
	DD	020000000H
	DD	04010H
	DD	00H
	DD	0400010H
	DD	020004010H
	DD	04000H
	DD	0404000H
	DD	020004010H
	DD	010H
	DD	020400010H
	DD	020400010H
	DD	00H
	DD	0404010H
	DD	020404000H
	DD	04010H
	DD	0404000H
	DD	020404000H
	DD	020000000H
	DD	020004000H
	DD	010H
	DD	020400010H
	DD	0404000H
	DD	020404010H
	DD	0400000H
	DD	04010H
	DD	020000010H
	DD	0400000H
	DD	020004000H
	DD	020000000H
	DD	04010H
	DD	020000010H
	DD	020404010H
	DD	0404000H
	DD	020400000H
	DD	0404010H
	DD	020404000H
	DD	00H
	DD	020400010H
	DD	010H
	DD	04000H
	DD	020400000H
	DD	0404010H
	DD	04000H
	DD	0400010H
	DD	020004010H
	DD	00H
	DD	020404000H
	DD	020000000H
	DD	0400010H
	DD	020004010H
	DD	0200000H
	DD	04200002H
	DD	04000802H
	DD	00H
	DD	0800H
	DD	04000802H
	DD	0200802H
	DD	04200800H
	DD	04200802H
	DD	0200000H
	DD	00H
	DD	04000002H
	DD	02H
	DD	04000000H
	DD	04200002H
	DD	0802H
	DD	04000800H
	DD	0200802H
	DD	0200002H
	DD	04000800H
	DD	04000002H
	DD	04200000H
	DD	04200800H
	DD	0200002H
	DD	04200000H
	DD	0800H
	DD	0802H
	DD	04200802H
	DD	0200800H
	DD	02H
	DD	04000000H
	DD	0200800H
	DD	04000000H
	DD	0200800H
	DD	0200000H
	DD	04000802H
	DD	04000802H
	DD	04200002H
	DD	04200002H
	DD	02H
	DD	0200002H
	DD	04000000H
	DD	04000800H
	DD	0200000H
	DD	04200800H
	DD	0802H
	DD	0200802H
	DD	04200800H
	DD	0802H
	DD	04000002H
	DD	04200802H
	DD	04200000H
	DD	0200800H
	DD	00H
	DD	02H
	DD	04200802H
	DD	00H
	DD	0200802H
	DD	04200000H
	DD	0800H
	DD	04000002H
	DD	04000800H
	DD	0800H
	DD	0200002H
	DD	010001040H
	DD	01000H
	DD	040000H
	DD	010041040H
	DD	010000000H
	DD	010001040H
	DD	040H
	DD	010000000H
	DD	040040H
	DD	010040000H
	DD	010041040H
	DD	041000H
	DD	010041000H
	DD	041040H
	DD	01000H
	DD	040H
	DD	010040000H
	DD	010000040H
	DD	010001000H
	DD	01040H
	DD	041000H
	DD	040040H
	DD	010040040H
	DD	010041000H
	DD	01040H
	DD	00H
	DD	00H
	DD	010040040H
	DD	010000040H
	DD	010001000H
	DD	041040H
	DD	040000H
	DD	041040H
	DD	040000H
	DD	010041000H
	DD	01000H
	DD	040H
	DD	010040040H
	DD	01000H
	DD	041040H
	DD	010001000H
	DD	040H
	DD	010000040H
	DD	010040000H
	DD	010040040H
	DD	010000000H
	DD	040000H
	DD	010001040H
	DD	00H
	DD	010041040H
	DD	040040H
	DD	010000040H
	DD	010040000H
	DD	010001000H
	DD	010001040H
	DD	00H
	DD	010041040H
	DD	041000H
	DD	041000H
	DD	01040H
	DD	01040H
	DD	040040H
	DD	010000000H
	DD	010041000H
_ssh_3des_ssh2 DD FLAT:_des3_make_context
	DD	FLAT:_des3_free_context
	DD	FLAT:_des3_iv
	DD	FLAT:_des3_key
	DD	FLAT:_des3_ssh2_encrypt_blk
	DD	FLAT:_des3_ssh2_decrypt_blk
	DD	FLAT:$SG6733
	DD	08H
	DD	0a8H
	DD	01H
	DD	FLAT:$SG6734
_ssh_3des_ssh2_ctr DD FLAT:_des3_make_context
	DD	FLAT:_des3_free_context
	DD	FLAT:_des3_iv
	DD	FLAT:_des3_key
	DD	FLAT:_des3_ssh2_sdctr
	DD	FLAT:_des3_ssh2_sdctr
	DD	FLAT:$SG6736
	DD	08H
	DD	0a8H
	DD	00H
	DD	FLAT:$SG6737
_ssh_des_ssh2 DD FLAT:_des_make_context
	DD	FLAT:_des3_free_context
	DD	FLAT:_des3_iv
	DD	FLAT:_des_key
	DD	FLAT:_des_ssh2_encrypt_blk
	DD	FLAT:_des_ssh2_decrypt_blk
	DD	FLAT:$SG6739
	DD	08H
	DD	038H
	DD	01H
	DD	FLAT:$SG6740
_ssh_des_sshcom_ssh2 DD FLAT:_des_make_context
	DD	FLAT:_des3_free_context
	DD	FLAT:_des3_iv
	DD	FLAT:_des_key
	DD	FLAT:_des_ssh2_encrypt_blk
	DD	FLAT:_des_ssh2_decrypt_blk
	DD	FLAT:$SG6742
	DD	08H
	DD	038H
	DD	01H
	DD	FLAT:$SG6743
_des3_list DD	FLAT:_ssh_3des_ssh2_ctr
	DD	FLAT:_ssh_3des_ssh2
_ssh2_3des DD	02H
	DD	FLAT:_des3_list
_des_list DD	FLAT:_ssh_des_ssh2
	DD	FLAT:_ssh_des_sshcom_ssh2
_ssh2_des DD	02H
	DD	FLAT:_des_list
_ssh_3des DD	FLAT:_des3_ssh1_make_context
	DD	FLAT:_des3_free_context
	DD	FLAT:_des3_sesskey
	DD	FLAT:_des3_encrypt_blk
	DD	FLAT:_des3_decrypt_blk
	DD	08H
	DD	FLAT:$SG6746
_ssh_des DD	FLAT:_des_ssh1_make_context
	DD	FLAT:_des3_free_context
	DD	FLAT:_des_sesskey
	DD	FLAT:_des_encrypt_blk
	DD	FLAT:_des_decrypt_blk
	DD	08H
	DD	FLAT:$SG6775
CONST	ENDS
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshdes.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_des3_make_context PROC
; Line 751
	push	ebp
	mov	ebp, esp
; Line 752
	push	136					; 00000088H
	push	3
	call	_safemalloc
	add	esp, 8
; Line 753
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des3_make_context ENDP
; Function compile flags: /Odtp /RTCsu
_des3_ssh1_make_context PROC
; Line 756
	push	ebp
	mov	ebp, esp
; Line 758
	push	136					; 00000088H
	push	6
	call	_safemalloc
	add	esp, 8
; Line 759
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des3_ssh1_make_context ENDP
; Function compile flags: /Odtp /RTCsu
_des_make_context PROC
; Line 762
	push	ebp
	mov	ebp, esp
; Line 763
	push	136					; 00000088H
	push	1
	call	_safemalloc
	add	esp, 8
; Line 764
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des_make_context ENDP
; Function compile flags: /Odtp /RTCsu
_des_ssh1_make_context PROC
; Line 767
	push	ebp
	mov	ebp, esp
; Line 769
	push	136					; 00000088H
	push	2
	call	_safemalloc
	add	esp, 8
; Line 770
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des_ssh1_make_context ENDP
_TEXT	ENDS
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_des3_free_context PROC
; Line 773
	push	ebp
	mov	ebp, esp
; Line 774
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 775
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des3_free_context ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_des3_key PROC
; Line 778
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 779
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 781
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+6]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	push	ecx
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 783
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 136				; 00000088H
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+14]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+15]
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	or	ecx, eax
	push	ecx
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 785
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+21]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+22]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+23]
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+19]
	or	ecx, eax
	push	ecx
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 786
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_key ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -28						; size = 4
_buf$ = -20						; size = 8
_D$ = -8						; size = 4
_C$ = -4						; size = 4
_key_msw$ = 8						; size = 4
_key_lsw$ = 12						; size = 4
_sched$ = 16						; size = 4
_des_key_setup PROC
; Line 300
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 333
	mov	eax, DWORD PTR _key_lsw$[ebp]
	mov	DWORD PTR _buf$[ebp], eax
; Line 334
	mov	ecx, DWORD PTR _key_msw$[ebp]
	mov	DWORD PTR _buf$[ebp+4], ecx
; Line 336
	push	28					; 0000001cH
	push	OFFSET ?PC1_Cbits@?1??des_key_setup@@9@9
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_bitsel
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _C$[ebp], eax
; Line 337
	push	28					; 0000001cH
	push	OFFSET ?PC1_Dbits@?1??des_key_setup@@9@9
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_bitsel
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _D$[ebp], eax
; Line 339
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@des_key_se
$LN2@des_key_se:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@des_key_se:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN1@des_key_se
; Line 340
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR ?leftshifts@?1??des_key_setup@@9@9[edx*4]
	shl	eax, cl
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, 28					; 0000001cH
	sub	edx, DWORD PTR ?leftshifts@?1??des_key_setup@@9@9[ecx*4]
	mov	esi, DWORD PTR _C$[ebp]
	mov	ecx, edx
	shr	esi, cl
	or	eax, esi
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _C$[ebp], eax
; Line 341
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _D$[ebp]
	mov	ecx, DWORD PTR ?leftshifts@?1??des_key_setup@@9@9[eax*4]
	shl	edx, cl
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, 28					; 0000001cH
	sub	ecx, DWORD PTR ?leftshifts@?1??des_key_setup@@9@9[eax*4]
	mov	eax, DWORD PTR _D$[ebp]
	shr	eax, cl
	or	edx, eax
	and	edx, 268435455				; 0fffffffH
	mov	DWORD PTR _D$[ebp], edx
; Line 342
	mov	ecx, DWORD PTR _D$[ebp]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 343
	mov	edx, DWORD PTR _C$[ebp]
	mov	DWORD PTR _buf$[ebp+4], edx
; Line 344
	push	32					; 00000020H
	push	OFFSET ?PC2_0246@?1??des_key_setup@@9@9
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_bitsel
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _sched$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 345
	push	32					; 00000020H
	push	OFFSET ?PC2_1357@?1??des_key_setup@@9@9
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_bitsel
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _sched$[ebp]
	mov	DWORD PTR [edx+ecx*4+64], eax
; Line 346
	jmp	$LN2@des_key_se
$LN1@des_key_se:
; Line 348
	mov	eax, DWORD PTR _sched$[ebp]
	mov	DWORD PTR [eax+132], 0
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	DWORD PTR [ecx+128], 0
; Line 349
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@des_key_se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@des_key_se:
	DD	1
	DD	$LN7@des_key_se
$LN7@des_key_se:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN6@des_key_se
$LN6@des_key_se:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_des_key_setup ENDP
; Function compile flags: /Odtp /RTCsu
tv65 = -12						; size = 4
_bitpos$5933 = -8					; size = 4
_ret$ = -4						; size = 4
_input$ = 8						; size = 4
_bitnums$ = 12						; size = 4
_size$ = 16						; size = 4
_bitsel	PROC
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 289
	mov	DWORD PTR _ret$[ebp], 0
$LN3@bitsel:
; Line 290
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN2@bitsel
; Line 291
	mov	edx, DWORD PTR _bitnums$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _bitpos$5933[ebp], eax
	mov	ecx, DWORD PTR _bitnums$[ebp]
	add	ecx, 4
	mov	DWORD PTR _bitnums$[ebp], ecx
; Line 292
	mov	edx, DWORD PTR _ret$[ebp]
	shl	edx, 1
	mov	DWORD PTR _ret$[ebp], edx
; Line 293
	cmp	DWORD PTR _bitpos$5933[ebp], 0
	jl	SHORT $LN1@bitsel
; Line 294
	mov	eax, DWORD PTR _bitpos$5933[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	mov	ecx, DWORD PTR _bitpos$5933[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN6@bitsel
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN6@bitsel:
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	shr	eax, cl
	and	eax, 1
	or	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
$LN1@bitsel:
; Line 295
	jmp	SHORT $LN3@bitsel
$LN2@bitsel:
; Line 296
	mov	eax, DWORD PTR _ret$[ebp]
; Line 297
	mov	esp, ebp
	pop	ebp
	ret	0
_bitsel	ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_des3_iv PROC
; Line 789
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 790
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 791
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	mov	eax, DWORD PTR _keys$[ebp]
	mov	DWORD PTR [eax+128], edx
; Line 792
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	mov	eax, DWORD PTR _keys$[ebp]
	mov	DWORD PTR [eax+132], edx
; Line 793
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_iv ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_des_key PROC
; Line 796
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 797
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 799
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+6]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	or	eax, edx
	push	eax
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	push	ecx
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 800
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des_key ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_des3_sesskey PROC
; Line 803
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 804
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 805
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keys$[ebp]
	push	edx
	call	_des3_key
	add	esp, 8
; Line 806
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 408				; 00000198H
	push	ecx
	call	_des3_key
	add	esp, 8
; Line 807
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_sesskey ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_encrypt_blk PROC
; Line 810
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 811
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 812
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_3cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 813
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_encrypt_blk ENDP
; Function compile flags: /Odtp /RTCsu
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_scheds$ = 16						; size = 4
_des_3cbc_encrypt PROC
; Line 655
	push	ebp
	mov	ebp, esp
; Line 656
	mov	eax, DWORD PTR _scheds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 657
	mov	eax, DWORD PTR _scheds$[ebp]
	add	eax, 136				; 00000088H
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 658
	mov	eax, DWORD PTR _scheds$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 659
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des_3cbc_encrypt ENDP
_TEXT	ENDS
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -28						; size = 4
_iv1$ = -24						; size = 4
_iv0$ = -20						; size = 4
_out$ = -12						; size = 8
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_sched$ = 16						; size = 4
_des_cbc_encrypt PROC
; Line 605
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 609
	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 7
	je	SHORT $LN6@des_cbc_en
	push	609					; 00000261H
	push	OFFSET $SG6000
	push	OFFSET $SG6001
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@des_cbc_en:
; Line 611
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 612
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 613
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@des_cbc_en
$LN2@des_cbc_en:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 8
	mov	DWORD PTR _i$[ebp], eax
$LN3@des_cbc_en:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	$LN1@des_cbc_en
; Line 614
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	xor	eax, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 615
	mov	eax, DWORD PTR _blk$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	or	ecx, eax
	xor	ecx, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR _iv1$[ebp], ecx
; Line 616
	mov	ecx, DWORD PTR _sched$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iv1$[ebp]
	push	edx
	mov	eax, DWORD PTR _iv0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_des_encipher
	add	esp, 16					; 00000010H
; Line 617
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR _iv0$[ebp], edx
; Line 618
	mov	eax, DWORD PTR _out$[ebp+4]
	mov	DWORD PTR _iv1$[ebp], eax
; Line 619
	mov	ecx, DWORD PTR _iv0$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _iv0$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _iv0$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	dl, BYTE PTR _iv0$[ebp]
	mov	BYTE PTR [ecx+3], dl
; Line 620
	mov	eax, DWORD PTR _iv1$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+4], al
	mov	edx, DWORD PTR _iv1$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+5], dl
	mov	ecx, DWORD PTR _iv1$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	eax, DWORD PTR _blk$[ebp]
	mov	cl, BYTE PTR _iv1$[ebp]
	mov	BYTE PTR [eax+7], cl
; Line 621
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, 8
	mov	DWORD PTR _blk$[ebp], edx
; Line 622
	jmp	$LN2@des_cbc_en
$LN1@des_cbc_en:
; Line 623
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 624
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR [edx+132], eax
; Line 625
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@des_cbc_en
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@des_cbc_en:
	DD	1
	DD	$LN8@des_cbc_en
$LN8@des_cbc_en:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@des_cbc_en
$LN7@des_cbc_en:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_des_cbc_encrypt ENDP
; Function compile flags: /Odtp /RTCsu
_s1357$ = -12						; size = 4
_s0246$ = -8						; size = 4
_swap$ = -4						; size = 4
_output$ = 8						; size = 4
_L$ = 12						; size = 4
_R$ = 16						; size = 4
_sched$ = 20						; size = 4
_des_encipher PROC
; Line 525
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 528
	mov	eax, DWORD PTR _L$[ebp]
	shr	eax, 4
	xor	eax, DWORD PTR _R$[ebp]
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 4
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	shr	eax, 16					; 00000010H
	xor	eax, DWORD PTR _R$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 16					; 00000010H
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 2
	xor	eax, DWORD PTR _L$[ebp]
	and	eax, 858993459				; 33333333H
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 2
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 8
	xor	eax, DWORD PTR _L$[ebp]
	and	eax, 16711935				; 00ff00ffH
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 8
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	shr	eax, 1
	xor	eax, DWORD PTR _R$[ebp]
	and	eax, 1431655765				; 55555555H
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 1
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 530
	mov	eax, DWORD PTR _L$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR _L$[ebp], eax
; Line 531
	mov	edx, DWORD PTR _R$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 31					; 0000001fH
	or	edx, eax
	mov	DWORD PTR _R$[ebp], edx
; Line 533
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], eax
; Line 534
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 535
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
; Line 536
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 537
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
; Line 538
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
; Line 539
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], eax
; Line 540
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+92]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 541
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
; Line 542
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 543
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+104]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
; Line 544
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
; Line 545
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], eax
; Line 546
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+116]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 547
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
; Line 548
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 550
	mov	eax, DWORD PTR _L$[ebp]
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 1
	or	eax, ecx
	mov	DWORD PTR _L$[ebp], eax
; Line 551
	mov	edx, DWORD PTR _R$[ebp]
	shl	edx, 31					; 0000001fH
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 1
	or	edx, eax
	mov	DWORD PTR _R$[ebp], edx
; Line 553
	mov	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _swap$[ebp], ecx
; Line 554
	mov	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _L$[ebp], edx
; Line 555
	mov	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 557
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 1
	xor	ecx, DWORD PTR _R$[ebp]
	and	ecx, 1431655765				; 55555555H
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 1
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
	mov	ecx, DWORD PTR _R$[ebp]
	shr	ecx, 8
	xor	ecx, DWORD PTR _L$[ebp]
	and	ecx, 16711935				; 00ff00ffH
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 8
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], eax
	mov	ecx, DWORD PTR _R$[ebp]
	shr	ecx, 2
	xor	ecx, DWORD PTR _L$[ebp]
	and	ecx, 858993459				; 33333333H
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 2
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 16					; 00000010H
	xor	ecx, DWORD PTR _R$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 16					; 00000010H
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 4
	xor	ecx, DWORD PTR _R$[ebp]
	and	ecx, 252645135				; 0f0f0f0fH
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 4
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 559
	mov	ecx, DWORD PTR _output$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 560
	mov	eax, DWORD PTR _output$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 561
	mov	esp, ebp
	pop	ebp
	ret	0
_des_encipher ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -36						; size = 4
_xR$ = -32						; size = 4
_xL$ = -28						; size = 4
_iv1$ = -24						; size = 4
_iv0$ = -20						; size = 4
_out$ = -12						; size = 8
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_sched$ = 16						; size = 4
_des_cbc_decrypt PROC
; Line 629
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 633
	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 7
	je	SHORT $LN6@des_cbc_de
	push	633					; 00000279H
	push	OFFSET $SG6044
	push	OFFSET $SG6045
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@des_cbc_de:
; Line 635
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 636
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 637
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@des_cbc_de
$LN2@des_cbc_de:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 8
	mov	DWORD PTR _i$[ebp], eax
$LN3@des_cbc_de:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	$LN1@des_cbc_de
; Line 638
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _xL$[ebp], eax
; Line 639
	mov	eax, DWORD PTR _blk$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	or	ecx, eax
	mov	DWORD PTR _xR$[ebp], ecx
; Line 640
	mov	ecx, DWORD PTR _sched$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xR$[ebp]
	push	edx
	mov	eax, DWORD PTR _xL$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_des_decipher
	add	esp, 16					; 00000010H
; Line 641
	mov	edx, DWORD PTR _iv0$[ebp]
	xor	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR _iv0$[ebp], edx
; Line 642
	mov	eax, DWORD PTR _iv1$[ebp]
	xor	eax, DWORD PTR _out$[ebp+4]
	mov	DWORD PTR _iv1$[ebp], eax
; Line 643
	mov	ecx, DWORD PTR _iv0$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _iv0$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _iv0$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	dl, BYTE PTR _iv0$[ebp]
	mov	BYTE PTR [ecx+3], dl
; Line 644
	mov	eax, DWORD PTR _iv1$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+4], al
	mov	edx, DWORD PTR _iv1$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+5], dl
	mov	ecx, DWORD PTR _iv1$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	eax, DWORD PTR _blk$[ebp]
	mov	cl, BYTE PTR _iv1$[ebp]
	mov	BYTE PTR [eax+7], cl
; Line 645
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, 8
	mov	DWORD PTR _blk$[ebp], edx
; Line 646
	mov	eax, DWORD PTR _xL$[ebp]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 647
	mov	ecx, DWORD PTR _xR$[ebp]
	mov	DWORD PTR _iv1$[ebp], ecx
; Line 648
	jmp	$LN2@des_cbc_de
$LN1@des_cbc_de:
; Line 649
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR [edx+128], eax
; Line 650
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR [ecx+132], edx
; Line 651
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@des_cbc_de
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@des_cbc_de:
	DD	1
	DD	$LN8@des_cbc_de
$LN8@des_cbc_de:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@des_cbc_de
$LN7@des_cbc_de:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_des_cbc_decrypt ENDP
; Function compile flags: /Odtp /RTCsu
_s1357$ = -12						; size = 4
_s0246$ = -8						; size = 4
_swap$ = -4						; size = 4
_output$ = 8						; size = 4
_L$ = 12						; size = 4
_R$ = 16						; size = 4
_sched$ = 20						; size = 4
_des_decipher PROC
; Line 565
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 568
	mov	eax, DWORD PTR _L$[ebp]
	shr	eax, 4
	xor	eax, DWORD PTR _R$[ebp]
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 4
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	shr	eax, 16					; 00000010H
	xor	eax, DWORD PTR _R$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 16					; 00000010H
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 2
	xor	eax, DWORD PTR _L$[ebp]
	and	eax, 858993459				; 33333333H
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 2
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 8
	xor	eax, DWORD PTR _L$[ebp]
	and	eax, 16711935				; 00ff00ffH
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 8
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	shr	eax, 1
	xor	eax, DWORD PTR _R$[ebp]
	and	eax, 1431655765				; 55555555H
	mov	DWORD PTR _swap$[ebp], eax
	mov	ecx, DWORD PTR _swap$[ebp]
	shl	ecx, 1
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 570
	mov	eax, DWORD PTR _L$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR _L$[ebp], eax
; Line 571
	mov	edx, DWORD PTR _R$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 31					; 0000001fH
	or	edx, eax
	mov	DWORD PTR _R$[ebp], edx
; Line 573
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], eax
; Line 574
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+120]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 575
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
; Line 576
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 577
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
; Line 578
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
; Line 579
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], eax
; Line 580
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 581
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
; Line 582
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 583
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
; Line 584
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], ecx
; Line 585
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	xor	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], eax
; Line 586
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _s1357$[ebp], eax
	mov	ecx, DWORD PTR _s0246$[ebp]
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 4
	or	ecx, edx
	mov	DWORD PTR _s0246$[ebp], ecx
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _SPboxes[eax*4]
	or	edx, DWORD PTR _SPboxes[ecx*4+256]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+512]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+768]
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1024]
	mov	ecx, DWORD PTR _s1357$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1280]
	mov	eax, DWORD PTR _s0246$[ebp]
	and	eax, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[eax*4+1536]
	mov	ecx, DWORD PTR _s1357$[ebp]
	and	ecx, 63					; 0000003fH
	or	edx, DWORD PTR _SPboxes[ecx*4+1792]
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
; Line 587
	mov	edx, DWORD PTR _sched$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s0246$[ebp], eax
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _R$[ebp]
	xor	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _s1357$[ebp], edx
	mov	eax, DWORD PTR _s0246$[ebp]
	shl	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR _s0246$[ebp], eax
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _SPboxes[edx*4]
	or	ecx, DWORD PTR _SPboxes[eax*4+256]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+512]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+768]
	mov	edx, DWORD PTR _s0246$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1024]
	mov	eax, DWORD PTR _s1357$[ebp]
	shr	eax, 8
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1280]
	mov	edx, DWORD PTR _s0246$[ebp]
	and	edx, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[edx*4+1536]
	mov	eax, DWORD PTR _s1357$[ebp]
	and	eax, 63					; 0000003fH
	or	ecx, DWORD PTR _SPboxes[eax*4+1792]
	xor	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], ecx
; Line 588
	mov	ecx, DWORD PTR _sched$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	xor	edx, DWORD PTR [ecx]
	mov	DWORD PTR _s0246$[ebp], edx
	mov	eax, DWORD PTR _sched$[ebp]
	mov	ecx, DWORD PTR _L$[ebp]
	xor	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _s1357$[ebp], ecx
	mov	edx, DWORD PTR _s0246$[ebp]
	shl	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _s0246$[ebp]
	shr	eax, 4
	or	edx, eax
	mov	DWORD PTR _s0246$[ebp], edx
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 63					; 0000003fH
	mov	eax, DWORD PTR _SPboxes[ecx*4]
	or	eax, DWORD PTR _SPboxes[edx*4+256]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+512]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+768]
	mov	ecx, DWORD PTR _s0246$[ebp]
	shr	ecx, 8
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1024]
	mov	edx, DWORD PTR _s1357$[ebp]
	shr	edx, 8
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1280]
	mov	ecx, DWORD PTR _s0246$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[ecx*4+1536]
	mov	edx, DWORD PTR _s1357$[ebp]
	and	edx, 63					; 0000003fH
	or	eax, DWORD PTR _SPboxes[edx*4+1792]
	xor	eax, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 590
	mov	eax, DWORD PTR _L$[ebp]
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 1
	or	eax, ecx
	mov	DWORD PTR _L$[ebp], eax
; Line 591
	mov	edx, DWORD PTR _R$[ebp]
	shl	edx, 31					; 0000001fH
	mov	eax, DWORD PTR _R$[ebp]
	shr	eax, 1
	or	edx, eax
	mov	DWORD PTR _R$[ebp], edx
; Line 593
	mov	ecx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _swap$[ebp], ecx
; Line 594
	mov	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _L$[ebp], edx
; Line 595
	mov	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 597
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 1
	xor	ecx, DWORD PTR _R$[ebp]
	and	ecx, 1431655765				; 55555555H
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 1
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
	mov	ecx, DWORD PTR _R$[ebp]
	shr	ecx, 8
	xor	ecx, DWORD PTR _L$[ebp]
	and	ecx, 16711935				; 00ff00ffH
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 8
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], eax
	mov	ecx, DWORD PTR _R$[ebp]
	shr	ecx, 2
	xor	ecx, DWORD PTR _L$[ebp]
	and	ecx, 858993459				; 33333333H
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 2
	xor	edx, DWORD PTR _R$[ebp]
	mov	DWORD PTR _R$[ebp], edx
	mov	eax, DWORD PTR _L$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _L$[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 16					; 00000010H
	xor	ecx, DWORD PTR _R$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 16					; 00000010H
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	shr	ecx, 4
	xor	ecx, DWORD PTR _R$[ebp]
	and	ecx, 252645135				; 0f0f0f0fH
	mov	DWORD PTR _swap$[ebp], ecx
	mov	edx, DWORD PTR _swap$[ebp]
	shl	edx, 4
	xor	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR _L$[ebp], edx
	mov	eax, DWORD PTR _R$[ebp]
	xor	eax, DWORD PTR _swap$[ebp]
	mov	DWORD PTR _R$[ebp], eax
; Line 599
	mov	ecx, DWORD PTR _output$[ebp]
	mov	edx, DWORD PTR _L$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 600
	mov	eax, DWORD PTR _output$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 601
	mov	esp, ebp
	pop	ebp
	ret	0
_des_decipher ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_decrypt_blk PROC
; Line 816
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 817
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 818
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 408				; 00000198H
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_3cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 819
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_decrypt_blk ENDP
; Function compile flags: /Odtp /RTCsu
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_scheds$ = 16						; size = 4
_des_3cbc_decrypt PROC
; Line 689
	push	ebp
	mov	ebp, esp
; Line 690
	mov	eax, DWORD PTR _scheds$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 691
	mov	eax, DWORD PTR _scheds$[ebp]
	add	eax, 136				; 00000088H
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 692
	mov	eax, DWORD PTR _scheds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 693
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_des_3cbc_decrypt ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_ssh2_encrypt_blk PROC
; Line 822
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 823
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 824
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_cbc3_encrypt
	add	esp, 12					; 0000000cH
; Line 825
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_ssh2_encrypt_blk ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -28						; size = 4
_iv1$ = -24						; size = 4
_iv0$ = -20						; size = 4
_out$ = -12						; size = 8
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_scheds$ = 16						; size = 4
_des_cbc3_encrypt PROC
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 667
	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 7
	je	SHORT $LN6@des_cbc3_e
	push	667					; 0000029bH
	push	OFFSET $SG6094
	push	OFFSET $SG6095
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@des_cbc3_e:
; Line 669
	mov	edx, DWORD PTR _scheds$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 670
	mov	ecx, DWORD PTR _scheds$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 671
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@des_cbc3_e
$LN2@des_cbc3_e:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 8
	mov	DWORD PTR _i$[ebp], eax
$LN3@des_cbc3_e:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	$LN1@des_cbc3_e
; Line 672
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	xor	eax, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 673
	mov	eax, DWORD PTR _blk$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	or	ecx, eax
	xor	ecx, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR _iv1$[ebp], ecx
; Line 674
	mov	ecx, DWORD PTR _scheds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iv1$[ebp]
	push	edx
	mov	eax, DWORD PTR _iv0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_des_encipher
	add	esp, 16					; 00000010H
; Line 675
	mov	edx, DWORD PTR _scheds$[ebp]
	add	edx, 136				; 00000088H
	push	edx
	mov	eax, DWORD PTR _out$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_des_decipher
	add	esp, 16					; 00000010H
; Line 676
	mov	eax, DWORD PTR _scheds$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	mov	ecx, DWORD PTR _out$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_des_encipher
	add	esp, 16					; 00000010H
; Line 677
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR _iv0$[ebp], ecx
; Line 678
	mov	edx, DWORD PTR _out$[ebp+4]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 679
	mov	eax, DWORD PTR _iv0$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _iv0$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _iv0$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _blk$[ebp]
	mov	cl, BYTE PTR _iv0$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 680
	mov	edx, DWORD PTR _iv1$[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+4], dl
	mov	ecx, DWORD PTR _iv1$[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+5], cl
	mov	eax, DWORD PTR _iv1$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+6], al
	mov	edx, DWORD PTR _blk$[ebp]
	mov	al, BYTE PTR _iv1$[ebp]
	mov	BYTE PTR [edx+7], al
; Line 681
	mov	ecx, DWORD PTR _blk$[ebp]
	add	ecx, 8
	mov	DWORD PTR _blk$[ebp], ecx
; Line 682
	jmp	$LN2@des_cbc3_e
$LN1@des_cbc3_e:
; Line 683
	mov	edx, DWORD PTR _scheds$[ebp]
	mov	eax, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR [edx+128], eax
; Line 684
	mov	ecx, DWORD PTR _scheds$[ebp]
	mov	edx, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR [ecx+132], edx
; Line 685
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@des_cbc3_e
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@des_cbc3_e:
	DD	1
	DD	$LN8@des_cbc3_e
$LN8@des_cbc3_e:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@des_cbc3_e
$LN7@des_cbc3_e:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_des_cbc3_encrypt ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_ssh2_decrypt_blk PROC
; Line 828
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 829
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 830
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_cbc3_decrypt
	add	esp, 12					; 0000000cH
; Line 831
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_ssh2_decrypt_blk ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -36						; size = 4
_xR$ = -32						; size = 4
_xL$ = -28						; size = 4
_iv1$ = -24						; size = 4
_iv0$ = -20						; size = 4
_out$ = -12						; size = 8
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_scheds$ = 16						; size = 4
_des_cbc3_decrypt PROC
; Line 697
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 701
	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 7
	je	SHORT $LN6@des_cbc3_d
	push	701					; 000002bdH
	push	OFFSET $SG6146
	push	OFFSET $SG6147
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@des_cbc3_d:
; Line 703
	mov	edx, DWORD PTR _scheds$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 704
	mov	ecx, DWORD PTR _scheds$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 705
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@des_cbc3_d
$LN2@des_cbc3_d:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 8
	mov	DWORD PTR _i$[ebp], eax
$LN3@des_cbc3_d:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	$LN1@des_cbc3_d
; Line 706
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _xL$[ebp], eax
; Line 707
	mov	eax, DWORD PTR _blk$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+5]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	or	ecx, eax
	mov	DWORD PTR _xR$[ebp], ecx
; Line 708
	mov	ecx, DWORD PTR _scheds$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	edx, DWORD PTR _xR$[ebp]
	push	edx
	mov	eax, DWORD PTR _xL$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_des_decipher
	add	esp, 16					; 00000010H
; Line 709
	mov	edx, DWORD PTR _scheds$[ebp]
	add	edx, 136				; 00000088H
	push	edx
	mov	eax, DWORD PTR _out$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_des_encipher
	add	esp, 16					; 00000010H
; Line 710
	mov	eax, DWORD PTR _scheds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_des_decipher
	add	esp, 16					; 00000010H
; Line 711
	mov	ecx, DWORD PTR _iv0$[ebp]
	xor	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR _iv0$[ebp], ecx
; Line 712
	mov	edx, DWORD PTR _iv1$[ebp]
	xor	edx, DWORD PTR _out$[ebp+4]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 713
	mov	eax, DWORD PTR _iv0$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _iv0$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _iv0$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _blk$[ebp]
	mov	cl, BYTE PTR _iv0$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 714
	mov	edx, DWORD PTR _iv1$[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+4], dl
	mov	ecx, DWORD PTR _iv1$[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+5], cl
	mov	eax, DWORD PTR _iv1$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+6], al
	mov	edx, DWORD PTR _blk$[ebp]
	mov	al, BYTE PTR _iv1$[ebp]
	mov	BYTE PTR [edx+7], al
; Line 715
	mov	ecx, DWORD PTR _blk$[ebp]
	add	ecx, 8
	mov	DWORD PTR _blk$[ebp], ecx
; Line 716
	mov	edx, DWORD PTR _xL$[ebp]
	mov	DWORD PTR _iv0$[ebp], edx
; Line 717
	mov	eax, DWORD PTR _xR$[ebp]
	mov	DWORD PTR _iv1$[ebp], eax
; Line 718
	jmp	$LN2@des_cbc3_d
$LN1@des_cbc3_d:
; Line 719
	mov	ecx, DWORD PTR _scheds$[ebp]
	mov	edx, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR [ecx+128], edx
; Line 720
	mov	eax, DWORD PTR _scheds$[ebp]
	mov	ecx, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 721
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@des_cbc3_d
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@des_cbc3_d:
	DD	1
	DD	$LN8@des_cbc3_d
$LN8@des_cbc3_d:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@des_cbc3_d
$LN7@des_cbc3_d:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_des_cbc3_decrypt ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_ssh2_sdctr PROC
; Line 834
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 835
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 836
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_sdctr3
	add	esp, 12					; 0000000cH
; Line 837
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des3_ssh2_sdctr ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -32						; size = 4
_tmp$ = -28						; size = 4
_iv1$ = -24						; size = 4
_iv0$ = -20						; size = 4
_b$ = -12						; size = 8
_blk$ = 8						; size = 4
_len$ = 12						; size = 4
_scheds$ = 16						; size = 4
_des_sdctr3 PROC
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 729
	mov	eax, DWORD PTR _len$[ebp]
	and	eax, 7
	je	SHORT $LN7@des_sdctr3
	push	729					; 000002d9H
	push	OFFSET $SG6189
	push	OFFSET $SG6190
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@des_sdctr3:
; Line 731
	mov	edx, DWORD PTR _scheds$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR _iv0$[ebp], eax
; Line 732
	mov	ecx, DWORD PTR _scheds$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR _iv1$[ebp], edx
; Line 733
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@des_sdctr3
$LN3@des_sdctr3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 8
	mov	DWORD PTR _i$[ebp], eax
$LN4@des_sdctr3:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	$LN2@des_sdctr3
; Line 734
	mov	edx, DWORD PTR _scheds$[ebp]
	push	edx
	mov	eax, DWORD PTR _iv1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iv0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_des_encipher
	add	esp, 16					; 00000010H
; Line 735
	mov	eax, DWORD PTR _scheds$[ebp]
	add	eax, 136				; 00000088H
	push	eax
	mov	ecx, DWORD PTR _b$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_des_decipher
	add	esp, 16					; 00000010H
; Line 736
	mov	ecx, DWORD PTR _scheds$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_des_encipher
	add	esp, 16					; 00000010H
; Line 737
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _blk$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _tmp$[ebp], eax
; Line 738
	mov	eax, DWORD PTR _tmp$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _tmp$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _tmp$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _tmp$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 739
	mov	edx, DWORD PTR _blk$[ebp]
	add	edx, 4
	mov	DWORD PTR _blk$[ebp], edx
; Line 740
	mov	eax, DWORD PTR _blk$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _blk$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 741
	mov	ecx, DWORD PTR _tmp$[ebp]
	xor	ecx, DWORD PTR _b$[ebp+4]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _tmp$[ebp]
	xor	eax, DWORD PTR _b$[ebp+4]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _tmp$[ebp]
	xor	edx, DWORD PTR _b$[ebp+4]
	shr	edx, 8
	mov	eax, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _tmp$[ebp]
	xor	ecx, DWORD PTR _b$[ebp+4]
	mov	edx, DWORD PTR _blk$[ebp]
	mov	BYTE PTR [edx+3], cl
; Line 742
	mov	eax, DWORD PTR _blk$[ebp]
	add	eax, 4
	mov	DWORD PTR _blk$[ebp], eax
; Line 743
	mov	ecx, DWORD PTR _iv1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iv1$[ebp], ecx
	jne	SHORT $LN1@des_sdctr3
; Line 744
	mov	edx, DWORD PTR _iv0$[ebp]
	add	edx, 1
	mov	DWORD PTR _iv0$[ebp], edx
$LN1@des_sdctr3:
; Line 745
	jmp	$LN3@des_sdctr3
$LN2@des_sdctr3:
; Line 746
	mov	eax, DWORD PTR _scheds$[ebp]
	mov	ecx, DWORD PTR _iv0$[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 747
	mov	edx, DWORD PTR _scheds$[ebp]
	mov	eax, DWORD PTR _iv1$[ebp]
	mov	DWORD PTR [edx+132], eax
; Line 748
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@des_sdctr3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@des_sdctr3:
	DD	1
	DD	$LN9@des_sdctr3
$LN9@des_sdctr3:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@des_sdctr3
$LN8@des_sdctr3:
	DB	98					; 00000062H
	DB	0
_des_sdctr3 ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des_ssh2_encrypt_blk PROC
; Line 840
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 841
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 842
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 843
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des_ssh2_encrypt_blk ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des_ssh2_decrypt_blk PROC
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 847
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 848
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 849
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des_ssh2_decrypt_blk ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_des3_decrypt_pubkey
EXTRN	_smemclr:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ourkeys$ = -416					; size = 408
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_decrypt_pubkey PROC
; Line 852
	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 855
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 857
	lea	eax, DWORD PTR _ourkeys$[ebp+136]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 859
	lea	eax, DWORD PTR _ourkeys$[ebp+272]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 860
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_3cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 861
	push	408					; 00000198H
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 862
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@des3_decry
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@des3_decry:
	DD	1
	DD	$LN4@des3_decry
$LN4@des3_decry:
	DD	-416					; fffffe60H
	DD	408					; 00000198H
	DD	$LN3@des3_decry
$LN3@des3_decry:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
_des3_decrypt_pubkey ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_des3_encrypt_pubkey
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ourkeys$ = -416					; size = 408
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des3_encrypt_pubkey PROC
; Line 865
	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 868
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 870
	lea	eax, DWORD PTR _ourkeys$[ebp+136]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 872
	lea	eax, DWORD PTR _ourkeys$[ebp+272]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 873
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk$[ebp]
	push	edx
	call	_des_3cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 874
	push	408					; 00000198H
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 875
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@des3_encry
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@des3_encry:
	DD	1
	DD	$LN4@des3_encry
$LN4@des3_encry:
	DD	-416					; fffffe60H
	DD	408					; 00000198H
	DD	$LN3@des3_encry
$LN3@des3_encry:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
_des3_encrypt_pubkey ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_des3_decrypt_pubkey_ossh
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ourkeys$ = -416					; size = 408
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_iv$ = 12						; size = 4
_blk$ = 16						; size = 4
_len$ = 20						; size = 4
_des3_decrypt_pubkey_ossh PROC
; Line 879
	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 882
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 884
	lea	eax, DWORD PTR _ourkeys$[ebp+136]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 886
	lea	eax, DWORD PTR _ourkeys$[ebp+272]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+23]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+17]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+19]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 887
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _iv$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _iv$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _iv$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _ourkeys$[ebp+128], ecx
; Line 888
	mov	ecx, DWORD PTR _iv$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	mov	DWORD PTR _ourkeys$[ebp+132], edx
; Line 889
	lea	edx, DWORD PTR _ourkeys$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blk$[ebp]
	push	ecx
	call	_des_cbc3_decrypt
	add	esp, 12					; 0000000cH
; Line 890
	push	408					; 00000198H
	lea	edx, DWORD PTR _ourkeys$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 891
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@des3_decry@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@des3_decry@2:
	DD	1
	DD	$LN4@des3_decry@2
$LN4@des3_decry@2:
	DD	-416					; fffffe60H
	DD	408					; 00000198H
	DD	$LN3@des3_decry@2
$LN3@des3_decry@2:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
_des3_decrypt_pubkey_ossh ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_des3_encrypt_pubkey_ossh
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ourkeys$ = -416					; size = 408
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_iv$ = 12						; size = 4
_blk$ = 16						; size = 4
_len$ = 20						; size = 4
_des3_encrypt_pubkey_ossh PROC
; Line 895
	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 898
	lea	eax, DWORD PTR _ourkeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 900
	lea	eax, DWORD PTR _ourkeys$[ebp+136]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 902
	lea	eax, DWORD PTR _ourkeys$[ebp+272]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+20]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax+23]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _key$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+17]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _key$[ebp]
	movzx	edx, BYTE PTR [ecx+19]
	or	eax, edx
	push	eax
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 903
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _iv$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _iv$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _iv$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _ourkeys$[ebp+128], ecx
; Line 904
	mov	ecx, DWORD PTR _iv$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _iv$[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	or	edx, ecx
	mov	DWORD PTR _ourkeys$[ebp+132], edx
; Line 905
	lea	edx, DWORD PTR _ourkeys$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blk$[ebp]
	push	ecx
	call	_des_cbc3_encrypt
	add	esp, 12					; 0000000cH
; Line 906
	push	408					; 00000198H
	lea	edx, DWORD PTR _ourkeys$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 907
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@des3_encry@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@des3_encry@2:
	DD	1
	DD	$LN4@des3_encry@2
$LN4@des3_encry@2:
	DD	-416					; fffffe60H
	DD	408					; 00000198H
	DD	$LN3@des3_encry@2
$LN3@des3_encry@2:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
_des3_encrypt_pubkey_ossh ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_des_encrypt_xdmauth
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dc$ = -144						; size = 136
__$ArrayPad$ = -4					; size = 4
_keydata$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des_encrypt_xdmauth PROC
; Line 934
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 936
	lea	eax, DWORD PTR _dc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keydata$[ebp]
	push	ecx
	call	_des_keysetup_xdmauth
	add	esp, 8
; Line 937
	lea	edx, DWORD PTR _dc$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blk$[ebp]
	push	ecx
	call	_des_cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 938
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@des_encryp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@des_encryp:
	DD	1
	DD	$LN4@des_encryp
$LN4@des_encryp:
	DD	-144					; ffffff70H
	DD	136					; 00000088H
	DD	$LN3@des_encryp
$LN3@des_encryp:
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	0
_des_encrypt_xdmauth ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bits$ = -36						; size = 4
_j$ = -32						; size = 4
_nbits$ = -28						; size = 4
_i$ = -24						; size = 4
_key$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_keydata$ = 8						; size = 4
_dc$ = 12						; size = 4
_des_keysetup_xdmauth PROC
; Line 910
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 915
	mov	DWORD PTR _bits$[ebp], 0
; Line 916
	mov	DWORD PTR _nbits$[ebp], 0
; Line 917
	mov	DWORD PTR _j$[ebp], 0
; Line 918
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@des_keyset
$LN3@des_keyset:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@des_keyset:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN2@des_keyset
; Line 919
	cmp	DWORD PTR _nbits$[ebp], 7
	jge	SHORT $LN1@des_keyset
; Line 920
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _keydata$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
; Line 921
	mov	ecx, DWORD PTR _nbits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _nbits$[ebp], ecx
; Line 922
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN1@des_keyset:
; Line 924
	mov	ecx, DWORD PTR _nbits$[ebp]
	sub	ecx, 7
	mov	eax, DWORD PTR _bits$[ebp]
	shr	eax, cl
	shl	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _key$[ebp+ecx], al
; Line 925
	mov	ecx, DWORD PTR _nbits$[ebp]
	sub	ecx, 7
	mov	edx, 127				; 0000007fH
	shl	edx, cl
	not	edx
	and	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR _bits$[ebp], edx
; Line 926
	mov	eax, DWORD PTR _nbits$[ebp]
	sub	eax, 7
	mov	DWORD PTR _nbits$[ebp], eax
; Line 927
	jmp	SHORT $LN3@des_keyset
$LN2@des_keyset:
; Line 929
	mov	ecx, DWORD PTR _dc$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _key$[ebp+4]
	shl	edx, 24					; 00000018H
	movzx	eax, BYTE PTR _key$[ebp+5]
	shl	eax, 16					; 00000010H
	or	edx, eax
	movzx	ecx, BYTE PTR _key$[ebp+6]
	shl	ecx, 8
	or	edx, ecx
	movzx	eax, BYTE PTR _key$[ebp+7]
	or	edx, eax
	push	edx
	movzx	ecx, BYTE PTR _key$[ebp]
	shl	ecx, 24					; 00000018H
	movzx	edx, BYTE PTR _key$[ebp+1]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	movzx	eax, BYTE PTR _key$[ebp+2]
	shl	eax, 8
	or	ecx, eax
	movzx	edx, BYTE PTR _key$[ebp+3]
	or	ecx, edx
	push	ecx
	call	_des_key_setup
	add	esp, 12					; 0000000cH
; Line 930
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@des_keyset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@des_keyset:
	DD	1
	DD	$LN8@des_keyset
$LN8@des_keyset:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN7@des_keyset
$LN7@des_keyset:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_des_keysetup_xdmauth ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_des_decrypt_xdmauth
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dc$ = -144						; size = 136
__$ArrayPad$ = -4					; size = 4
_keydata$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des_decrypt_xdmauth PROC
; Line 942
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 944
	lea	eax, DWORD PTR _dc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keydata$[ebp]
	push	ecx
	call	_des_keysetup_xdmauth
	add	esp, 8
; Line 945
	lea	edx, DWORD PTR _dc$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blk$[ebp]
	push	ecx
	call	_des_cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 946
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@des_decryp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@des_decryp:
	DD	1
	DD	$LN4@des_decryp
$LN4@des_decryp:
	DD	-144					; ffffff70H
	DD	136					; 00000088H
	DD	$LN3@des_decryp
$LN3@des_decryp:
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	0
_des_decrypt_xdmauth ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_des_sesskey PROC
; Line 1011
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1012
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 1013
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keys$[ebp]
	push	edx
	call	_des_key
	add	esp, 8
; Line 1014
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 136				; 00000088H
	push	ecx
	call	_des_key
	add	esp, 8
; Line 1015
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des_sesskey ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des_encrypt_blk PROC
; Line 1018
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1019
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 1020
	mov	ecx, DWORD PTR _keys$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_cbc_encrypt
	add	esp, 12					; 0000000cH
; Line 1021
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des_encrypt_blk ENDP
; Function compile flags: /Odtp /RTCsu
_keys$ = -4						; size = 4
_handle$ = 8						; size = 4
_blk$ = 12						; size = 4
_len$ = 16						; size = 4
_des_decrypt_blk PROC
; Line 1024
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1025
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _keys$[ebp], eax
; Line 1026
	mov	ecx, DWORD PTR _keys$[ebp]
	add	ecx, 136				; 00000088H
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _blk$[ebp]
	push	eax
	call	_des_cbc_decrypt
	add	esp, 12					; 0000000cH
; Line 1027
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_des_decrypt_blk ENDP
_TEXT	ENDS
END
