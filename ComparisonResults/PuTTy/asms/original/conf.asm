; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\conf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG85790 DB	01H DUP (?)
$SG85811 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_subkeytypes DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_valuetypes DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	01H
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	03H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	04H
	DD	04H
	DD	04H
	DD	01H
	DD	01H
	DD	02H
$SG85668 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85669 DB	'o', 00H, 'l', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'y', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG85696 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85704 DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG85697 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85699 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85723 DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG85700 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 00H, 00H
$SG85703 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85715 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85716 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H
	DB	00H, 00H
	ORG $+2
$SG85718 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85719 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 00H, 00H
$SG85722 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85732 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85733 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85735 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85736 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85739 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85740 DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG85751 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85752 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG85754 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85755 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85768 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85769 DB	'r', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG85782 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85783 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG85785 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85786 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85806 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85807 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG85809 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85810 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85827 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85828 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85830 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85831 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H
	DB	'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG85834 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85835 DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG85844 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85845 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85847 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85848 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H
	DB	00H, 00H
	ORG $+2
$SG85851 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85852 DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG85864 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85865 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85867 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85868 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 00H, 00H
$SG85882 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85883 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H
	DB	00H, 00H
	ORG $+2
$SG85885 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85886 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 00H, 00H
$SG85898 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85899 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85901 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85902 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85916 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85917 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG85919 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85920 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85931 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85932 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG85934 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85935 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 00H, 00H
$SG85950 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85951 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85953 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85954 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H
	DB	'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG85966 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85967 DB	's', 00H, 'u', 00H, 'b', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p'
	DB	00H, 'r', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y'
	DB	00H, 'P', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 00H, 00H
$SG85969 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG85970 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '[', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ']', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'Y', 00H, 'P'
	DB	00H, 'E', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H
	DB	00H, 00H
_DATA	ENDS
PUBLIC	_conf_new
EXTRN	_newtree234:PROC
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\conf.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_conf$ = -4						; size = 4
_conf_new PROC
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 168
	push	4
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _conf$[ebp], eax
; Line 170
	push	OFFSET _conf_cmp
	call	_newtree234
	add	esp, 4
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 172
	mov	eax, DWORD PTR _conf$[ebp]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_new ENDP
_TEXT	ENDS
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_conf_cmp PROC
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 70
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 71
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 73
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN11@conf_cmp
; Line 74
	or	eax, -1
	jmp	SHORT $LN12@conf_cmp
	jmp	SHORT $LN10@conf_cmp
$LN11@conf_cmp:
; Line 75
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN10@conf_cmp
; Line 76
	mov	eax, 1
	jmp	SHORT $LN12@conf_cmp
$LN10@conf_cmp:
; Line 77
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _subkeytypes[eax*4]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 1
	je	SHORT $LN6@conf_cmp
	cmp	DWORD PTR tv68[ebp], 2
	je	SHORT $LN2@conf_cmp
	jmp	SHORT $LN1@conf_cmp
$LN6@conf_cmp:
; Line 79
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN5@conf_cmp
; Line 80
	or	eax, -1
	jmp	SHORT $LN12@conf_cmp
	jmp	SHORT $LN4@conf_cmp
$LN5@conf_cmp:
; Line 81
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN4@conf_cmp
; Line 82
	mov	eax, 1
	jmp	SHORT $LN12@conf_cmp
$LN4@conf_cmp:
; Line 83
	xor	eax, eax
	jmp	SHORT $LN12@conf_cmp
$LN2@conf_cmp:
; Line 85
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_strcmp
	add	esp, 8
	jmp	SHORT $LN12@conf_cmp
$LN1@conf_cmp:
; Line 87
	xor	eax, eax
$LN12@conf_cmp:
; Line 89
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_cmp ENDP
_TEXT	ENDS
PUBLIC	_conf_free
EXTRN	_safefree:PROC
EXTRN	_freetree234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_conf_free PROC
; Line 184
	push	ebp
	mov	ebp, esp
; Line 185
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_clear
	add	esp, 4
; Line 186
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_freetree234
	add	esp, 4
; Line 187
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 188
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_conf_free ENDP
_TEXT	ENDS
EXTRN	_delpos234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_conf_clear PROC
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@conf_clear:
; Line 179
	push	0
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN3@conf_clear
; Line 180
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	call	_free_entry
	add	esp, 4
	jmp	SHORT $LN2@conf_clear
$LN3@conf_clear:
; Line 181
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_clear ENDP
; Function compile flags: /Odtp /RTCsu
_entry$ = 8						; size = 4
_free_entry PROC
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_free_key
	add	esp, 4
; Line 162
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _valuetypes[edx*4]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	add	ecx, 8
	push	ecx
	call	_free_value
	add	esp, 8
; Line 163
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 164
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_free_entry ENDP
; Function compile flags: /Odtp /RTCsu
_key$ = 8						; size = 4
_free_key PROC
; Line 97
	push	ebp
	mov	ebp, esp
; Line 98
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR _subkeytypes[ecx*4], 2
	jne	SHORT $LN2@free_key
; Line 99
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_safefree
	add	esp, 4
$LN2@free_key:
; Line 100
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_free_key ENDP
_TEXT	ENDS
EXTRN	_fontspec_free:PROC
EXTRN	_filename_free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = 8						; size = 4
_type$ = 12						; size = 4
_free_value PROC
; Line 125
	push	ebp
	mov	ebp, esp
; Line 126
	cmp	DWORD PTR _type$[ebp], 2
	jne	SHORT $LN5@free_value
; Line 127
	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
	jmp	SHORT $LN6@free_value
$LN5@free_value:
; Line 128
	cmp	DWORD PTR _type$[ebp], 3
	jne	SHORT $LN3@free_value
; Line 129
	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_filename_free
	add	esp, 4
	jmp	SHORT $LN6@free_value
$LN3@free_value:
; Line 130
	cmp	DWORD PTR _type$[ebp], 4
	jne	SHORT $LN6@free_value
; Line 131
	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_fontspec_free
	add	esp, 4
$LN6@free_value:
; Line 132
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_free_value ENDP
_TEXT	ENDS
PUBLIC	_conf_copy_into
EXTRN	_add234:PROC
EXTRN	_index234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_entry2$ = -8						; size = 4
_entry$ = -4						; size = 4
_newconf$ = 8						; size = 4
_oldconf$ = 12						; size = 4
_conf_copy_into PROC
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 206
	mov	eax, DWORD PTR _newconf$[ebp]
	push	eax
	call	_conf_clear
	add	esp, 4
; Line 208
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@conf_copy_
$LN2@conf_copy_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@conf_copy_:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _oldconf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN4@conf_copy_
; Line 209
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry2$[ebp], eax
; Line 210
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry2$[ebp]
	push	eax
	call	_copy_key
	add	esp, 8
; Line 212
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _valuetypes[edx*4]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _entry2$[ebp]
	add	edx, 8
	push	edx
	call	_copy_value
	add	esp, 12					; 0000000cH
; Line 213
	mov	eax, DWORD PTR _entry2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newconf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_add234
	add	esp, 8
; Line 214
	jmp	SHORT $LN2@conf_copy_
$LN4@conf_copy_:
; Line 215
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_copy_into ENDP
_TEXT	ENDS
EXTRN	_dupstr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_to$ = 8						; size = 4
_from$ = 12						; size = 4
_copy_key PROC
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 108
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 109
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _subkeytypes[ecx*4]
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN2@copy_key
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN1@copy_key
	jmp	SHORT $LN5@copy_key
$LN2@copy_key:
; Line 111
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 112
	jmp	SHORT $LN5@copy_key
$LN1@copy_key:
; Line 114
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN5@copy_key:
; Line 117
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_key ENDP
_TEXT	ENDS
EXTRN	_fontspec_copy:PROC
EXTRN	_filename_copy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_to$ = 8						; size = 4
_from$ = 12						; size = 4
_type$ = 16						; size = 4
_copy_value PROC
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 140
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN7@copy_value
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN9@copy_value[edx*4]
$LN4@copy_value:
; Line 142
	mov	eax, DWORD PTR _to$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 143
	jmp	SHORT $LN7@copy_value
$LN3@copy_value:
; Line 145
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [edx], eax
; Line 146
	jmp	SHORT $LN7@copy_value
$LN2@copy_value:
; Line 148
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_filename_copy
	add	esp, 4
	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [edx], eax
; Line 149
	jmp	SHORT $LN7@copy_value
$LN1@copy_value:
; Line 151
	mov	eax, DWORD PTR _from$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fontspec_copy
	add	esp, 4
	mov	edx, DWORD PTR _to$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@copy_value:
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@copy_value:
	DD	$LN4@copy_value
	DD	$LN3@copy_value
	DD	$LN2@copy_value
	DD	$LN1@copy_value
_copy_value ENDP
_TEXT	ENDS
PUBLIC	_conf_copy
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newconf$ = -4						; size = 4
_oldconf$ = 8						; size = 4
_conf_copy PROC
; Line 218
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 219
	call	_conf_new
	mov	DWORD PTR _newconf$[ebp], eax
; Line 221
	mov	eax, DWORD PTR _oldconf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newconf$[ebp]
	push	ecx
	call	_conf_copy_into
	add	esp, 8
; Line 223
	mov	eax, DWORD PTR _newconf$[ebp]
; Line 224
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_copy ENDP
_TEXT	ENDS
PUBLIC	_conf_get_int
EXTRN	_find234:PROC
EXTRN	__wassert:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_conf_get_int PROC
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 231
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_get_i
	push	231					; 000000e7H
	push	OFFSET $SG85696
	push	OFFSET $SG85697
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_i:
; Line 232
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 1
	je	SHORT $LN4@conf_get_i
	push	232					; 000000e8H
	push	OFFSET $SG85699
	push	OFFSET $SG85700
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_get_i:
; Line 233
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 234
	push	0
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 235
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@conf_get_i
	push	235					; 000000ebH
	push	OFFSET $SG85703
	push	OFFSET $SG85704
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@conf_get_i:
; Line 236
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 237
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@conf_get_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@conf_get_i:
	DD	1
	DD	$LN7@conf_get_i
$LN7@conf_get_i:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@conf_get_i
$LN6@conf_get_i:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_int ENDP
_TEXT	ENDS
PUBLIC	_conf_get_int_int
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
_conf_get_int_int PROC
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 244
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 1
	je	SHORT $LN3@conf_get_i@2
	push	244					; 000000f4H
	push	OFFSET $SG85715
	push	OFFSET $SG85716
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_i@2:
; Line 245
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 1
	je	SHORT $LN4@conf_get_i@2
	push	245					; 000000f5H
	push	OFFSET $SG85718
	push	OFFSET $SG85719
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_get_i@2:
; Line 246
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 247
	mov	edx, DWORD PTR _secondary$[ebp]
	mov	DWORD PTR _key$[ebp+4], edx
; Line 248
	push	0
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 249
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@conf_get_i@2
	push	249					; 000000f9H
	push	OFFSET $SG85722
	push	OFFSET $SG85723
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@conf_get_i@2:
; Line 250
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+8]
; Line 251
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@conf_get_i@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@conf_get_i@2:
	DD	1
	DD	$LN7@conf_get_i@2
$LN7@conf_get_i@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@conf_get_i@2
$LN6@conf_get_i@2:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_int_int ENDP
_TEXT	ENDS
PUBLIC	_conf_get_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_conf_get_str PROC
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 258
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_get_s
	push	258					; 00000102H
	push	OFFSET $SG85732
	push	OFFSET $SG85733
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_s:
; Line 259
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN4@conf_get_s
	push	259					; 00000103H
	push	OFFSET $SG85735
	push	OFFSET $SG85736
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_get_s:
; Line 260
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 261
	push	0
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 262
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@conf_get_s
	push	262					; 00000106H
	push	OFFSET $SG85739
	push	OFFSET $SG85740
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@conf_get_s:
; Line 263
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 264
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@conf_get_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@conf_get_s:
	DD	1
	DD	$LN7@conf_get_s
$LN7@conf_get_s:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@conf_get_s
$LN6@conf_get_s:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_str ENDP
_TEXT	ENDS
PUBLIC	_conf_get_str_str_opt
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv84 = -24						; size = 4
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
_conf_get_str_str_opt PROC
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 271
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 2
	je	SHORT $LN3@conf_get_s@2
	push	271					; 0000010fH
	push	OFFSET $SG85751
	push	OFFSET $SG85752
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_s@2:
; Line 272
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN4@conf_get_s@2
	push	272					; 00000110H
	push	OFFSET $SG85754
	push	OFFSET $SG85755
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_get_s@2:
; Line 273
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 274
	mov	edx, DWORD PTR _secondary$[ebp]
	mov	DWORD PTR _key$[ebp+4], edx
; Line 275
	push	0
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 276
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN5@conf_get_s@2
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN6@conf_get_s@2
$LN5@conf_get_s@2:
	mov	DWORD PTR tv84[ebp], 0
$LN6@conf_get_s@2:
	mov	eax, DWORD PTR tv84[ebp]
; Line 277
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@conf_get_s@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@conf_get_s@2:
	DD	1
	DD	$LN8@conf_get_s@2
$LN8@conf_get_s@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@conf_get_s@2
$LN7@conf_get_s@2:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_str_str_opt ENDP
_TEXT	ENDS
PUBLIC	_conf_get_str_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
_conf_get_str_str PROC
; Line 280
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 281
	mov	eax, DWORD PTR _secondary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _primary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str_str_opt
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
; Line 282
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@conf_get_s@3
	push	282					; 0000011aH
	push	OFFSET $SG85768
	push	OFFSET $SG85769
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_s@3:
; Line 283
	mov	eax, DWORD PTR _ret$[ebp]
; Line 284
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_get_str_str ENDP
_TEXT	ENDS
PUBLIC	_conf_get_str_strs
EXTRN	_findrel234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_subkeyin$ = 16						; size = 4
_subkeyout$ = 20					; size = 4
_conf_get_str_strs PROC
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 292
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 2
	je	SHORT $LN7@conf_get_s@4
	push	292					; 00000124H
	push	OFFSET $SG85782
	push	OFFSET $SG85783
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@conf_get_s@4:
; Line 293
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN8@conf_get_s@4
	push	293					; 00000125H
	push	OFFSET $SG85785
	push	OFFSET $SG85786
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@conf_get_s@4:
; Line 294
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 295
	cmp	DWORD PTR _subkeyin$[ebp], 0
	je	SHORT $LN4@conf_get_s@4
; Line 296
	mov	edx, DWORD PTR _subkeyin$[ebp]
	mov	DWORD PTR _key$[ebp+4], edx
; Line 297
	push	3
	push	0
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_findrel234
	add	esp, 16					; 00000010H
	mov	DWORD PTR _entry$[ebp], eax
; Line 298
	jmp	SHORT $LN3@conf_get_s@4
$LN4@conf_get_s@4:
; Line 299
	mov	DWORD PTR _key$[ebp+4], OFFSET $SG85790
; Line 300
	push	4
	push	0
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_findrel234
	add	esp, 16					; 00000010H
	mov	DWORD PTR _entry$[ebp], eax
$LN3@conf_get_s@4:
; Line 302
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@conf_get_s@4
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _primary$[ebp]
	je	SHORT $LN2@conf_get_s@4
$LN1@conf_get_s@4:
; Line 303
	xor	eax, eax
	jmp	SHORT $LN5@conf_get_s@4
$LN2@conf_get_s@4:
; Line 304
	mov	edx, DWORD PTR _subkeyout$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 305
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+8]
$LN5@conf_get_s@4:
; Line 306
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@conf_get_s@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@conf_get_s@4:
	DD	1
	DD	$LN10@conf_get_s@4
$LN10@conf_get_s@4:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@conf_get_s@4
$LN9@conf_get_s@4:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_str_strs ENDP
_TEXT	ENDS
PUBLIC	_conf_get_str_nthstrkey
EXTRN	_findrelpos234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index$ = -28						; size = 4
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_n$ = 16						; size = 4
_conf_get_str_nthstrkey PROC
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 314
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 2
	je	SHORT $LN7@conf_get_s@5
	push	314					; 0000013aH
	push	OFFSET $SG85806
	push	OFFSET $SG85807
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@conf_get_s@5:
; Line 315
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN8@conf_get_s@5
	push	315					; 0000013bH
	push	OFFSET $SG85809
	push	OFFSET $SG85810
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@conf_get_s@5:
; Line 316
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 317
	mov	DWORD PTR _key$[ebp+4], OFFSET $SG85811
; Line 318
	lea	edx, DWORD PTR _index$[ebp]
	push	edx
	push	4
	push	0
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_findrelpos234
	add	esp, 20					; 00000014H
	mov	DWORD PTR _entry$[ebp], eax
; Line 319
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN3@conf_get_s@5
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _primary$[ebp]
	je	SHORT $LN4@conf_get_s@5
$LN3@conf_get_s@5:
; Line 320
	xor	eax, eax
	jmp	SHORT $LN5@conf_get_s@5
$LN4@conf_get_s@5:
; Line 321
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 322
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@conf_get_s@5
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _primary$[ebp]
	je	SHORT $LN2@conf_get_s@5
$LN1@conf_get_s@5:
; Line 323
	xor	eax, eax
	jmp	SHORT $LN5@conf_get_s@5
$LN2@conf_get_s@5:
; Line 324
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+4]
$LN5@conf_get_s@5:
; Line 325
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@conf_get_s@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@conf_get_s@5:
	DD	2
	DD	$LN11@conf_get_s@5
$LN11@conf_get_s@5:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@conf_get_s@5
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@conf_get_s@5
$LN10@conf_get_s@5:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN9@conf_get_s@5:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_str_nthstrkey ENDP
_TEXT	ENDS
PUBLIC	_conf_get_filename
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_conf_get_filename PROC
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 332
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_get_f
	push	332					; 0000014cH
	push	OFFSET $SG85827
	push	OFFSET $SG85828
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_f:
; Line 333
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 3
	je	SHORT $LN4@conf_get_f
	push	333					; 0000014dH
	push	OFFSET $SG85830
	push	OFFSET $SG85831
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_get_f:
; Line 334
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 335
	push	0
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 336
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@conf_get_f
	push	336					; 00000150H
	push	OFFSET $SG85834
	push	OFFSET $SG85835
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@conf_get_f:
; Line 337
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 338
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@conf_get_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@conf_get_f:
	DD	1
	DD	$LN7@conf_get_f
$LN7@conf_get_f:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@conf_get_f
$LN6@conf_get_f:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_filename ENDP
_TEXT	ENDS
PUBLIC	_conf_get_fontspec
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_conf_get_fontspec PROC
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 345
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_get_f@2
	push	345					; 00000159H
	push	OFFSET $SG85844
	push	OFFSET $SG85845
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_get_f@2:
; Line 346
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 4
	je	SHORT $LN4@conf_get_f@2
	push	346					; 0000015aH
	push	OFFSET $SG85847
	push	OFFSET $SG85848
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_get_f@2:
; Line 347
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 348
	push	0
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 349
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN5@conf_get_f@2
	push	349					; 0000015dH
	push	OFFSET $SG85851
	push	OFFSET $SG85852
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@conf_get_f@2:
; Line 350
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 351
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@conf_get_f@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@conf_get_f@2:
	DD	1
	DD	$LN7@conf_get_f@2
$LN7@conf_get_f@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@conf_get_f@2
$LN6@conf_get_f@2:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_get_fontspec ENDP
_TEXT	ENDS
PUBLIC	_conf_set_int
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_value$ = 16						; size = 4
_conf_set_int PROC
; Line 354
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 355
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 357
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_set_i
	push	357					; 00000165H
	push	OFFSET $SG85864
	push	OFFSET $SG85865
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_set_i:
; Line 358
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 1
	je	SHORT $LN4@conf_set_i
	push	358					; 00000166H
	push	OFFSET $SG85867
	push	OFFSET $SG85868
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_set_i:
; Line 359
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 360
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 361
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_insert
	add	esp, 8
; Line 362
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_set_int ENDP
_TEXT	ENDS
EXTRN	_del234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_oldentry$ = -4						; size = 4
_conf$ = 8						; size = 4
_entry$ = 12						; size = 4
_conf_insert PROC
; Line 191
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 192
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_add234
	add	esp, 8
	mov	DWORD PTR _oldentry$[ebp], eax
; Line 193
	cmp	DWORD PTR _oldentry$[ebp], 0
	je	SHORT $LN2@conf_inser
	mov	eax, DWORD PTR _oldentry$[ebp]
	cmp	eax, DWORD PTR _entry$[ebp]
	je	SHORT $LN2@conf_inser
; Line 194
	mov	ecx, DWORD PTR _oldentry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _conf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_del234
	add	esp, 8
; Line 195
	mov	ecx, DWORD PTR _oldentry$[ebp]
	push	ecx
	call	_free_entry
	add	esp, 4
; Line 196
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_add234
	add	esp, 8
	mov	DWORD PTR _oldentry$[ebp], eax
; Line 197
	mov	edx, DWORD PTR _oldentry$[ebp]
	cmp	edx, DWORD PTR _entry$[ebp]
	je	SHORT $LN2@conf_inser
	push	197					; 000000c5H
	push	OFFSET $SG85668
	push	OFFSET $SG85669
	call	__wassert
	add	esp, 12					; 0000000cH
$LN2@conf_inser:
; Line 199
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_insert ENDP
_TEXT	ENDS
PUBLIC	_conf_set_int_int
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
_value$ = 20						; size = 4
_conf_set_int_int PROC
; Line 365
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 366
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 368
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 1
	je	SHORT $LN3@conf_set_i@2
	push	368					; 00000170H
	push	OFFSET $SG85882
	push	OFFSET $SG85883
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_set_i@2:
; Line 369
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 1
	je	SHORT $LN4@conf_set_i@2
	push	369					; 00000171H
	push	OFFSET $SG85885
	push	OFFSET $SG85886
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_set_i@2:
; Line 370
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 371
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _secondary$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 372
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 373
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_insert
	add	esp, 8
; Line 374
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_set_int_int ENDP
_TEXT	ENDS
PUBLIC	_conf_set_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_value$ = 16						; size = 4
_conf_set_str PROC
; Line 377
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 378
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 380
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_set_s
	push	380					; 0000017cH
	push	OFFSET $SG85898
	push	OFFSET $SG85899
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_set_s:
; Line 381
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN4@conf_set_s
	push	381					; 0000017dH
	push	OFFSET $SG85901
	push	OFFSET $SG85902
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_set_s:
; Line 382
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 383
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 384
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_insert
	add	esp, 8
; Line 385
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_set_str ENDP
_TEXT	ENDS
PUBLIC	_conf_set_str_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
_value$ = 20						; size = 4
_conf_set_str_str PROC
; Line 389
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 390
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 2
	je	SHORT $LN3@conf_set_s@2
	push	392					; 00000188H
	push	OFFSET $SG85916
	push	OFFSET $SG85917
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_set_s@2:
; Line 393
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN4@conf_set_s@2
	push	393					; 00000189H
	push	OFFSET $SG85919
	push	OFFSET $SG85920
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_set_s@2:
; Line 394
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 395
	mov	eax, DWORD PTR _secondary$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 396
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 397
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_insert
	add	esp, 8
; Line 398
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_set_str_str ENDP
_TEXT	ENDS
PUBLIC	_conf_del_str_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -20						; size = 4
_key$ = -12						; size = 8
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_secondary$ = 16					; size = 4
_conf_del_str_str PROC
; Line 401
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 405
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 2
	je	SHORT $LN4@conf_del_s
	push	405					; 00000195H
	push	OFFSET $SG85931
	push	OFFSET $SG85932
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_del_s:
; Line 406
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 2
	je	SHORT $LN5@conf_del_s
	push	406					; 00000196H
	push	OFFSET $SG85934
	push	OFFSET $SG85935
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@conf_del_s:
; Line 407
	mov	ecx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
; Line 408
	mov	edx, DWORD PTR _secondary$[ebp]
	mov	DWORD PTR _key$[ebp+4], edx
; Line 409
	push	0
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _entry$[ebp], eax
; Line 410
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@conf_del_s
; Line 411
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _conf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_del234
	add	esp, 8
; Line 412
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_free_entry
	add	esp, 4
$LN2@conf_del_s:
; Line 414
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@conf_del_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@conf_del_s:
	DD	1
	DD	$LN7@conf_del_s
$LN7@conf_del_s:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@conf_del_s
$LN6@conf_del_s:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_conf_del_str_str ENDP
_TEXT	ENDS
PUBLIC	_conf_set_filename
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_value$ = 16						; size = 4
_conf_set_filename PROC
; Line 417
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 418
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 420
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_set_f
	push	420					; 000001a4H
	push	OFFSET $SG85950
	push	OFFSET $SG85951
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_set_f:
; Line 421
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 3
	je	SHORT $LN4@conf_set_f
	push	421					; 000001a5H
	push	OFFSET $SG85953
	push	OFFSET $SG85954
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_set_f:
; Line 422
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 423
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_filename_copy
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 424
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_insert
	add	esp, 8
; Line 425
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_set_filename ENDP
_TEXT	ENDS
PUBLIC	_conf_set_fontspec
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_conf$ = 8						; size = 4
_primary$ = 12						; size = 4
_value$ = 16						; size = 4
_conf_set_fontspec PROC
; Line 428
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 429
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 431
	mov	eax, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _subkeytypes[eax*4], 0
	je	SHORT $LN3@conf_set_f@2
	push	431					; 000001afH
	push	OFFSET $SG85966
	push	OFFSET $SG85967
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@conf_set_f@2:
; Line 432
	mov	edx, DWORD PTR _primary$[ebp]
	cmp	DWORD PTR _valuetypes[edx*4], 4
	je	SHORT $LN4@conf_set_f@2
	push	432					; 000001b0H
	push	OFFSET $SG85969
	push	OFFSET $SG85970
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@conf_set_f@2:
; Line 433
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 434
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_fontspec_copy
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 435
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_insert
	add	esp, 8
; Line 436
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conf_set_fontspec ENDP
_TEXT	ENDS
PUBLIC	_conf_serialised_size
EXTRN	_fontspec_serialise:PROC
EXTRN	_filename_serialise:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -20						; size = 4
tv72 = -16						; size = 4
_size$ = -12						; size = 4
_entry$ = -8						; size = 4
_i$ = -4						; size = 4
_conf$ = 8						; size = 4
_conf_serialised_size PROC
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 442
	mov	DWORD PTR _size$[ebp], 0
; Line 444
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@conf_seria
$LN12@conf_seria:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@conf_seria:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _conf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_index234
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
	cmp	DWORD PTR _entry$[ebp], 0
	je	$LN11@conf_seria
; Line 445
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 4
	mov	DWORD PTR _size$[ebp], ecx
; Line 446
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _subkeytypes[eax*4]
	mov	DWORD PTR tv72[ebp], ecx
	cmp	DWORD PTR tv72[ebp], 1
	je	SHORT $LN8@conf_seria
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN7@conf_seria
	jmp	SHORT $LN9@conf_seria
$LN8@conf_seria:
; Line 448
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 4
	mov	DWORD PTR _size$[ebp], edx
; Line 449
	jmp	SHORT $LN9@conf_seria
$LN7@conf_seria:
; Line 451
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _size$[ebp]
	lea	eax, DWORD PTR [edx+eax+1]
	mov	DWORD PTR _size$[ebp], eax
$LN9@conf_seria:
; Line 454
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _valuetypes[edx*4]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv83[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 3
	ja	SHORT $LN5@conf_seria
	mov	edx, DWORD PTR tv83[ebp]
	jmp	DWORD PTR $LN16@conf_seria[edx*4]
$LN4@conf_seria:
; Line 456
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 457
	jmp	SHORT $LN5@conf_seria
$LN3@conf_seria:
; Line 459
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _size$[ebp], edx
; Line 460
	jmp	SHORT $LN5@conf_seria
$LN2@conf_seria:
; Line 462
	push	0
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_filename_serialise
	add	esp, 8
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 463
	jmp	SHORT $LN5@conf_seria
$LN1@conf_seria:
; Line 465
	push	0
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_fontspec_serialise
	add	esp, 8
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN5@conf_seria:
; Line 468
	jmp	$LN12@conf_seria
$LN11@conf_seria:
; Line 470
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 4
	mov	DWORD PTR _size$[ebp], ecx
; Line 472
	mov	eax, DWORD PTR _size$[ebp]
; Line 473
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@conf_seria:
	DD	$LN4@conf_seria
	DD	$LN3@conf_seria
	DD	$LN2@conf_seria
	DD	$LN1@conf_seria
_conf_serialised_size ENDP
_TEXT	ENDS
PUBLIC	_conf_serialise
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv141 = -24						; size = 4
tv81 = -20						; size = 4
_entry$ = -16						; size = 4
_len$ = -12						; size = 4
_i$ = -8						; size = 4
_data$ = -4						; size = 4
_conf$ = 8						; size = 4
_vdata$ = 12						; size = 4
_conf_serialise PROC
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 477
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 481
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@conf_seria@2
$LN12@conf_seria@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@conf_seria@2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
	cmp	DWORD PTR _entry$[ebp], 0
	je	$LN11@conf_seria@2
; Line 482
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	sar	eax, 8
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+3], cl
; Line 483
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 4
	mov	DWORD PTR _data$[ebp], edx
; Line 485
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _subkeytypes[ecx*4]
	mov	DWORD PTR tv81[ebp], edx
	cmp	DWORD PTR tv81[ebp], 1
	je	SHORT $LN8@conf_seria@2
	cmp	DWORD PTR tv81[ebp], 2
	je	SHORT $LN7@conf_seria@2
	jmp	$LN9@conf_seria@2
$LN8@conf_seria@2:
; Line 487
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sar	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+3], dl
; Line 488
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
; Line 489
	jmp	SHORT $LN9@conf_seria@2
$LN7@conf_seria@2:
; Line 491
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 492
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 493
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _data$[ebp], ecx
; Line 494
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax
$LN9@conf_seria@2:
; Line 497
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _valuetypes[edx*4]
	mov	DWORD PTR tv141[ebp], eax
	mov	ecx, DWORD PTR tv141[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv141[ebp], ecx
	cmp	DWORD PTR tv141[ebp], 3
	ja	$LN5@conf_seria@2
	mov	edx, DWORD PTR tv141[ebp]
	jmp	DWORD PTR $LN16@conf_seria@2[edx*4]
$LN4@conf_seria@2:
; Line 499
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+3], dl
; Line 500
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
; Line 501
	jmp	SHORT $LN5@conf_seria@2
$LN3@conf_seria@2:
; Line 503
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 504
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 505
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _data$[ebp], ecx
; Line 506
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax
; Line 507
	jmp	SHORT $LN5@conf_seria@2
$LN2@conf_seria@2:
; Line 509
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_filename_serialise
	add	esp, 8
	add	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 510
	jmp	SHORT $LN5@conf_seria@2
$LN1@conf_seria@2:
; Line 512
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_fontspec_serialise
	add	esp, 8
	add	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], eax
$LN5@conf_seria@2:
; Line 515
	jmp	$LN12@conf_seria@2
$LN11@conf_seria@2:
; Line 517
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [edx+1], 255			; 000000ffH
	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax+2], 255			; 000000ffH
	mov	ecx, DWORD PTR _data$[ebp]
	mov	BYTE PTR [ecx+3], 255			; 000000ffH
; Line 518
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@conf_seria@2:
	DD	$LN4@conf_seria@2
	DD	$LN3@conf_seria@2
	DD	$LN2@conf_seria@2
	DD	$LN1@conf_seria@2
_conf_serialise ENDP
_TEXT	ENDS
PUBLIC	_conf_deserialise
EXTRN	_fontspec_deserialise:PROC
EXTRN	_filename_deserialise:PROC
EXTRN	_memchr:PROC
EXTRN	_toint:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv156 = -40						; size = 4
tv86 = -36						; size = 4
_zero$ = -32						; size = 4
_used$ = -24						; size = 4
_primary$ = -16						; size = 4
_entry$ = -12						; size = 4
_start$ = -8						; size = 4
_data$ = -4						; size = 4
_conf$ = 8						; size = 4
_vdata$ = 12						; size = 4
_maxsize$ = 16						; size = 4
_conf_deserialise PROC
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 522
	mov	eax, DWORD PTR _vdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 523
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _start$[ebp], ecx
$LN23@conf_deser:
; Line 529
	cmp	DWORD PTR _maxsize$[ebp], 4
	jl	$done$86075
; Line 530
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _primary$[ebp], eax
; Line 531
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR _maxsize$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _maxsize$[ebp], ecx
; Line 533
	cmp	DWORD PTR _primary$[ebp], 178		; 000000b2H
	jb	SHORT $LN21@conf_deser
; Line 534
	jmp	$done$86075
$LN21@conf_deser:
; Line 536
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 537
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _primary$[ebp]
	mov	DWORD PTR [edx], eax
; Line 539
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _subkeytypes[edx*4]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 1
	je	SHORT $LN18@conf_deser
	cmp	DWORD PTR tv86[ebp], 2
	je	SHORT $LN16@conf_deser
	jmp	$LN19@conf_deser
$LN18@conf_deser:
; Line 541
	cmp	DWORD PTR _maxsize$[ebp], 4
	jge	SHORT $LN17@conf_deser
; Line 542
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 543
	jmp	$done$86075
$LN17@conf_deser:
; Line 545
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	push	eax
	call	_toint
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 546
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 4
	mov	DWORD PTR _data$[ebp], edx
	mov	eax, DWORD PTR _maxsize$[ebp]
	sub	eax, 4
	mov	DWORD PTR _maxsize$[ebp], eax
; Line 547
	jmp	SHORT $LN19@conf_deser
$LN16@conf_deser:
; Line 549
	mov	ecx, DWORD PTR _maxsize$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_memchr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _zero$[ebp], eax
; Line 550
	cmp	DWORD PTR _zero$[ebp], 0
	jne	SHORT $LN15@conf_deser
; Line 551
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 552
	jmp	$done$86075
$LN15@conf_deser:
; Line 554
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 555
	mov	eax, DWORD PTR _zero$[ebp]
	add	eax, 1
	sub	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _maxsize$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _maxsize$[ebp], ecx
; Line 556
	mov	edx, DWORD PTR _zero$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx
$LN19@conf_deser:
; Line 560
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _valuetypes[ecx*4]
	mov	DWORD PTR tv156[ebp], edx
	mov	eax, DWORD PTR tv156[ebp]
	sub	eax, 1
	mov	DWORD PTR tv156[ebp], eax
	cmp	DWORD PTR tv156[ebp], 3
	ja	$LN13@conf_deser
	mov	ecx, DWORD PTR tv156[ebp]
	jmp	DWORD PTR $LN29@conf_deser[ecx*4]
$LN12@conf_deser:
; Line 562
	cmp	DWORD PTR _maxsize$[ebp], 4
	jge	SHORT $LN11@conf_deser
; Line 563
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR _subkeytypes[eax*4], 2
	jne	SHORT $LN10@conf_deser
; Line 564
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_safefree
	add	esp, 4
$LN10@conf_deser:
; Line 565
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 566
	jmp	$done$86075
$LN11@conf_deser:
; Line 568
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	push	edx
	call	_toint
	add	esp, 4
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 569
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
	mov	ecx, DWORD PTR _maxsize$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _maxsize$[ebp], ecx
; Line 570
	jmp	$LN13@conf_deser
$LN9@conf_deser:
; Line 572
	mov	edx, DWORD PTR _maxsize$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memchr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _zero$[ebp], eax
; Line 573
	cmp	DWORD PTR _zero$[ebp], 0
	jne	SHORT $LN8@conf_deser
; Line 574
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR _subkeytypes[edx*4], 2
	jne	SHORT $LN7@conf_deser
; Line 575
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
$LN7@conf_deser:
; Line 576
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 577
	jmp	$done$86075
$LN8@conf_deser:
; Line 579
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 580
	mov	edx, DWORD PTR _zero$[ebp]
	add	edx, 1
	sub	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _maxsize$[ebp]
	sub	eax, edx
	mov	DWORD PTR _maxsize$[ebp], eax
; Line 581
	mov	ecx, DWORD PTR _zero$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
; Line 582
	jmp	$LN13@conf_deser
$LN6@conf_deser:
; Line 585
	lea	edx, DWORD PTR _used$[ebp]
	push	edx
	mov	eax, DWORD PTR _maxsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_filename_deserialise
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 586
	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@conf_deser
; Line 587
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR _subkeytypes[edx*4], 2
	jne	SHORT $LN4@conf_deser
; Line 588
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
$LN4@conf_deser:
; Line 589
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 590
	jmp	$done$86075
$LN5@conf_deser:
; Line 592
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _used$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 593
	mov	ecx, DWORD PTR _maxsize$[ebp]
	sub	ecx, DWORD PTR _used$[ebp]
	mov	DWORD PTR _maxsize$[ebp], ecx
; Line 594
	jmp	SHORT $LN13@conf_deser
$LN3@conf_deser:
; Line 597
	lea	edx, DWORD PTR _used$[ebp]
	push	edx
	mov	eax, DWORD PTR _maxsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_fontspec_deserialise
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 598
	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@conf_deser
; Line 599
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR _subkeytypes[edx*4], 2
	jne	SHORT $LN1@conf_deser
; Line 600
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
$LN1@conf_deser:
; Line 601
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 602
	jmp	SHORT $done$86075
$LN2@conf_deser:
; Line 604
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _used$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 605
	mov	ecx, DWORD PTR _maxsize$[ebp]
	sub	ecx, DWORD PTR _used$[ebp]
	mov	DWORD PTR _maxsize$[ebp], ecx
$LN13@conf_deser:
; Line 608
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_insert
	add	esp, 8
; Line 609
	jmp	$LN23@conf_deser
$done$86075:
; Line 612
	mov	eax, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
; Line 613
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@conf_deser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@conf_deser:
	DD	1
	DD	$LN27@conf_deser
$LN27@conf_deser:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN26@conf_deser
$LN26@conf_deser:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
	npad	3
$LN29@conf_deser:
	DD	$LN12@conf_deser
	DD	$LN9@conf_deser
	DD	$LN6@conf_deser
	DD	$LN3@conf_deser
_conf_deserialise ENDP
_TEXT	ENDS
END
