; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\window.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_g_pfnGetSystemMetrics
PUBLIC	_g_pfnMonitorFromWindow
PUBLIC	_g_pfnMonitorFromRect
PUBLIC	_g_pfnMonitorFromPoint
PUBLIC	_g_pfnGetMonitorInfo
PUBLIC	_g_pfnEnumDisplayMonitors
PUBLIC	_g_pfnEnumDisplayDevices
PUBLIC	_g_fMultiMonInitDone
PUBLIC	_g_fMultimonPlatformNT
PUBLIC	_share_can_be_downstream
PUBLIC	_share_can_be_upstream
_DATA	SEGMENT
COMM	_hinst:DWORD
COMM	_cursor_type:DWORD
COMM	_p_WSAEventSelect:DWORD
COMM	_loaded_session:DWORD
COMM	_p_WSAEnumNetworkEvents:DWORD
COMM	_cmdline_session_name:DWORD
COMM	_vtmode:DWORD
COMM	_hwnd:DWORD
COMM	_flags:DWORD
COMM	_p_select:DWORD
COMM	_term:DWORD
COMM	_p_WSAAsyncSelect:DWORD
COMM	_logbox:DWORD
COMM	_logctx:DWORD
COMM	_default_port:DWORD
COMM	_conf:DWORD
COMM	_p_WSAGetLastError:DWORD
COMM	_default_protocol:DWORD
_DATA	ENDS
_BSS	SEGMENT
_g_pfnGetSystemMetrics DD 01H DUP (?)
_g_pfnMonitorFromWindow DD 01H DUP (?)
_g_pfnMonitorFromRect DD 01H DUP (?)
_g_pfnMonitorFromPoint DD 01H DUP (?)
_g_pfnGetMonitorInfo DD 01H DUP (?)
_g_pfnEnumDisplayMonitors DD 01H DUP (?)
_g_pfnEnumDisplayDevices DD 01H DUP (?)
_g_fMultiMonInitDone DD 01H DUP (?)
_g_fMultimonPlatformNT DD 01H DUP (?)
_was_zoomed DD	01H DUP (?)
_reconfiguring DD 01H DUP (?)
_specials DD	01H DUP (?)
_specials_menu DD 01H DUP (?)
_n_specials DD	01H DUP (?)
_send_raw_mouse DD 01H DUP (?)
_wheel_accumulator DD 01H DUP (?)
_busy_status DD	01H DUP (?)
_compose_state DD 01H DUP (?)
?forced_visible@?1??update_mouse_pointer@@9@9 DD 01H DUP (?) ; `update_mouse_pointer'::`2'::forced_visible
?ignore_clip@?1??WndProc@@9@9 DD 01H DUP (?)		; `WndProc'::`2'::ignore_clip
?need_backend_resize@?1??WndProc@@9@9 DD 01H DUP (?)	; `WndProc'::`2'::need_backend_resize
?fullscr_on_max@?1??WndProc@@9@9 DD 01H DUP (?)		; `WndProc'::`2'::fullscr_on_max
?processed_resize@?1??WndProc@@9@9 DD 01H DUP (?)	; `WndProc'::`2'::processed_resize
?last_mousemove@?1??WndProc@@9@9 DD 01H DUP (?)		; `WndProc'::`2'::last_mousemove
?wp@?CK@??WndProc@@9@9 DD 01H DUP (?)			; `WndProc'::`42'::wp
?lp@?CK@??WndProc@@9@9 DD 01H DUP (?)			; `WndProc'::`42'::lp
?wp@?CN@??WndProc@@9@9 DD 01H DUP (?)			; `WndProc'::`45'::wp
?lp@?CN@??WndProc@@9@9 DD 01H DUP (?)			; `WndProc'::`45'::lp
?lpDx@?1??do_text_internal@@9@9 DD 01H DUP (?)		; `do_text_internal'::`2'::lpDx
?lpDx_len@?1??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`2'::lpDx_len
?uni_buf@?BO@??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`30'::uni_buf
?uni_len@?BO@??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`30'::uni_len
?directbuf@?CE@??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`36'::directbuf
?directlen@?CE@??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`36'::directlen
?wbuf@?CH@??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`39'::wbuf
?wlen@?CH@??do_text_internal@@9@9 DD 01H DUP (?)	; `do_text_internal'::`39'::wlen
?alt_sum@?1??TranslateKey@@9@9 DD 01H DUP (?)		; `TranslateKey'::`2'::alt_sum
?compose_char@?1??TranslateKey@@9@9 DD 01H DUP (?)	; `TranslateKey'::`2'::compose_char
?compose_keycode@?1??TranslateKey@@9@9 DD 01H DUP (?)	; `TranslateKey'::`2'::compose_keycode
_flashing DD	01H DUP (?)
?lastbeep@?2??do_beep@@9@9 DD 01H DUP (?)		; `do_beep'::`3'::lastbeep
?lastbeep@?5??do_beep@@9@9 DD 01H DUP (?)		; `do_beep'::`6'::lastbeep
_BSS	ENDS
CONST	SEGMENT
_share_can_be_downstream DD 01H
_share_can_be_upstream DD 01H
?ww@?1??conftopalette@@9@9 DD 0100H			; `conftopalette'::`2'::ww
	DD	0101H
	DD	0102H
	DD	0103H
	DD	0104H
	DD	0105H
	DD	00H
	DD	08H
	DD	01H
	DD	09H
	DD	02H
	DD	0aH
	DD	03H
	DD	0bH
	DD	04H
	DD	0cH
	DD	05H
	DD	0dH
	DD	06H
	DD	0eH
	DD	07H
	DD	0fH
?or@?1??systopalette@@9@9 DD 08H			; `systopalette'::`2'::or
	DD	0100H
	DD	0101H
	DD	05H
	DD	0102H
	DD	0103H
	DD	0eH
	DD	0104H
	DD	0104H
	DD	0dH
	DD	0105H
	DD	0105H
CONST	ENDS
_DATA	SEGMENT
$SG85935 DB	'USER32', 00H
	ORG $+1
$SG85951 DB	'GetSystemMetrics', 00H
	ORG $+3
$SG85952 DB	'MonitorFromWindow', 00H
	ORG $+2
$SG85953 DB	'MonitorFromRect', 00H
$SG85954 DB	'MonitorFromPoint', 00H
	ORG $+3
$SG85955 DB	'EnumDisplayMonitors', 00H
$SG85956 DB	'GetMonitorInfoA', 00H
$SG85957 DB	'EnumDisplayDevicesA', 00H
$SG86032 DB	'DISPLAY', 00H
$SG86083 DB	'DISPLAY', 00H
$SG86087 DB	'DISPLAY', 00H
_caret_x DD	0ffffffffH
_caret_y DD	0ffffffffH
_wm_mousewheel DD 020aH
$SG88969 DB	'%s Internal Error', 00H
	ORG $+2
$SG88971 DB	'Unsupported protocol number found', 00H
	ORG $+2
$SG88975 DB	'%s Error', 00H
	ORG $+3
$SG88976 DB	'Unable to open connection to', 0aH, '%.800s', 0aH, '%s', 00H
	ORG $+1
$SG88980 DB	'%s - %s', 00H
$SG88993 DB	'%.70s (inactive)', 00H
	ORG $+3
$SG89007 DB	'&Restart Session', 00H
	ORG $+3
$SG89025 DB	'%s Fatal Error', 00H
	ORG $+1
$SG89027 DB	'Windows refuses to report a version', 00H
$SG89030 DB	'MSWHEEL_ROLLMSG', 00H
$SG89036 DB	'%s Fatal Error', 00H
	ORG $+1
$SG89038 DB	'Failed to initialize COM subsystem', 00H
	ORG $+1
$SG89061 DB	'%p:%u', 00H
	ORG $+2
$SG89076 DB	'option "%s" requires an argument', 00H
	ORG $+3
$SG89084 DB	'-cleanup', 00H
	ORG $+3
$SG89085 DB	'-cleanup-during-uninstall', 00H
	ORG $+2
$SG89089 DB	'-cleanup-during-uninstall', 00H
	ORG $+2
$SG89091 DB	'%s Uninstallation', 00H
	ORG $+2
$SG89090 DB	'Remove saved sessions and random seed file?', 0aH, 0aH, 'I'
	DB	'f you hit Yes, ALL Registry entries associated', 0aH, 'with %'
	DB	's will be removed, as well as the', 0aH, 'random seed file. T'
	DB	'HIS PROCESS WILL', 0aH, 'DESTROY YOUR SAVED SESSIONS.', 0aH, '('
	DB	'This only affects the currently logged-in user.)', 0aH, 0aH, 'I'
	DB	'f you hit No, uninstallation will proceed, but', 0aH, 'saved '
	DB	'sessions etc will be left on the machine.', 00H
	ORG $+3
$SG89094 DB	'%s Warning', 00H
	ORG $+1
$SG89093 DB	'This procedure will remove ALL Registry entries', 0aH, 'a'
	DB	'ssociated with %s, and will also remove', 0aH, 'the random se'
	DB	'ed file. (This only affects the', 0aH, 'currently logged-in u'
	DB	'ser.)', 0aH, 0aH, 'THIS PROCESS WILL DESTROY YOUR SAVED SESSI'
	DB	'ONS.', 0aH, 'Are you really sure you want to continue?', 00H
	ORG $+1
$SG89098 DB	'-pgpfp', 00H
	ORG $+1
$SG89104 DB	'-P', 00H
	ORG $+1
$SG89106 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89107 DB	'r', 00H, 'e', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG89110 DB	'telnet:', 00H
$SG89113 DB	':/', 00H
	ORG $+1
$SG89123 DB	'unknown option "%s"', 00H
$SG89132 DB	' ', 09H, 00H
	ORG $+1
$SG89181 DB	'&Paste', 00H
	ORG $+1
$SG89185 DB	'&Event Log', 00H
	ORG $+1
$SG89186 DB	'Ne&w Session...', 00H
$SG89187 DB	'&Duplicate Session', 00H
	ORG $+1
$SG89189 DB	'Sa&ved Sessions', 00H
$SG89190 DB	'Chan&ge Settings...', 00H
$SG89191 DB	'C&opy All to Clipboard', 00H
	ORG $+1
$SG89192 DB	'C&lear Scrollback', 00H
	ORG $+2
$SG89193 DB	'Rese&t Terminal', 00H
$SG89194 DB	'&Full Screen', 00H
	ORG $+3
$SG89196 DB	'&Help', 00H
	ORG $+2
$SG89197 DB	'&About %s', 00H
	ORG $+2
$SG89239 DB	'do_select(): internal error (hwnd==NULL)', 00H
	ORG $+3
$SG89246 DB	'Network is down', 00H
$SG89248 DB	'WSAAsyncSelect(): unknown error', 00H
$SG89260 DB	'(No sessions)', 00H
	ORG $+2
$SG89278 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89279 DB	'I', 00H, 'D', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'P', 00H
	DB	'E', 00H, 'C', 00H, 'I', 00H, 'A', 00H, 'L', 00H, '_', 00H, 'M'
	DB	00H, 'I', 00H, 'N', 00H, ' ', 00H, '+', 00H, ' ', 00H, '0', 00H
	DB	'x', 00H, '1', 00H, '0', 00H, ' ', 00H, '*', 00H, ' ', 00H, 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'I', 00H, 'D', 00H, 'M', 00H
	DB	'_', 00H, 'S', 00H, 'P', 00H, 'E', 00H, 'C', 00H, 'I', 00H, 'A'
	DB	00H, 'L', 00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG89287 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89288 DB	'n', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, 00H, 00H
$SG89303 DB	'S&pecial Command', 00H
	ORG $+3
$SG89334 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG89335 DB	'0', 00H, 00H, 00H
$SG89362 DB	'%.70s Fatal Error', 00H
	ORG $+2
$SG89376 DB	'%.70s Command Line Error', 00H
	ORG $+3
$SG89593 DB	' ', 00H
	ORG $+2
?first_time@?3??request_resize@@9@9 DD 01H		; `request_resize'::`4'::first_time
?cursor_visible@?1??show_mouseptr@@9@9 DD 01H		; `show_mouseptr'::`2'::cursor_visible
$SG89794 DB	'Connection closed by remote host', 00H
	ORG $+3
$SG89839 DB	'%s Exit Confirmation', 00H
	ORG $+3
$SG89842 DB	'Are you sure you want to close this session?', 00H
	ORG $+3
$SG89876 DB	'putty &%p:%u', 00H
	ORG $+3
$SG89883 DB	'putty @%s', 00H
	ORG $+2
$SG89901 DB	'----- Session restarted -----', 00H
	ORG $+2
$SG90683 DB	'user32.dll', 00H
	ORG $+1
$SG90686 DB	'FlashWindowEx', 00H
	ORG $+2
$SG90689 DB	'ToUnicodeEx', 00H
$SG90809 DB	'bB', 02H, 02H, 00H
	ORG $+3
$SG90811 DB	'jJ', 0aH, 0aH, 00H
	ORG $+3
$SG90813 DB	'nN', 0eH, 0eH, 00H
	ORG $+3
$SG90815 DB	'hH', 08H, 08H, 00H
	ORG $+3
$SG90818 DB	'lL', 0cH, 0cH, 00H
	ORG $+3
$SG90820 DB	'yY', 019H, 019H, 00H
	ORG $+3
$SG90822 DB	'kK', 0bH, 0bH, 00H
	ORG $+3
$SG90824 DB	'uU', 015H, 015H, 00H
	ORG $+3
$SG90874 DB	01bH, '%c', 00H
$SG90877 DB	01bH, '?%c', 00H
	ORG $+3
$SG90880 DB	01bH, 'O%c', 00H
	ORG $+3
$SG90890 DB	00H, 01bH, 01cH, 01dH, 01eH, 01fH, 07fH, 00H
$SG90933 DB	00H, 02H, 01H, 04H, 05H, 03H, 06H, 00H
$SG90936 DB	' HLMEIG', 00H
$SG90937 DB	01bH, '%c', 00H
$SG90940 DB	'MNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@[\]^_`{', 00H
	ORG $+3
$SG90961 DB	01bH, '[%c', 00H
	ORG $+3
$SG90964 DB	'HL.FIG', 00H
	ORG $+1
$SG90968 DB	01bH, '[%c', 00H
	ORG $+3
$SG90976 DB	01bH, '%c', 00H
$SG90979 DB	01bH, 'O%c', 00H
	ORG $+3
$SG90982 DB	01bH, '[[%c', 00H
	ORG $+2
$SG90986 DB	01bH, '%c', 00H
$SG90989 DB	01bH, 'O%c', 00H
	ORG $+3
$SG90993 DB	01bH, '[H', 00H
$SG90994 DB	01bH, 'Ow', 00H
$SG90997 DB	01bH, '[%d~', 00H
	ORG $+2
$SG91248 DB	'{\rtf1\ansi\deff0{\fonttbl\f0\fmodern %s;}\f0\fs%d', 00H
	ORG $+1
$SG91270 DB	'{\colortbl ;', 00H
	ORG $+3
$SG91275 DB	'\red%d\green%d\blue%d;', 00H
	ORG $+1
$SG91276 DB	'}', 00H
	ORG $+2
$SG91303 DB	'\cf%d ', 00H
	ORG $+1
$SG91305 DB	'\highlight%d ', 00H
	ORG $+2
$SG91307 DB	'\b ', 00H
$SG91308 DB	'\b0 ', 00H
	ORG $+3
$SG91309 DB	'%s', 00H
	ORG $+1
$SG91311 DB	'\ul ', 00H
	ORG $+3
$SG91312 DB	'\ulnone ', 00H
	ORG $+3
$SG91313 DB	'%s', 00H
	ORG $+1
$SG91320 DB	'{\uc%d\u%d', 00H
	ORG $+1
$SG91321 DB	'}', 00H
	ORG $+2
$SG91323 DB	'\u%d', 00H
	ORG $+3
$SG91325 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG91326 DB	't', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 'm', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '2', 00H, 00H
	DB	00H
$SG91351 DB	'\par', 0dH, 0aH, 00H
	ORG $+1
$SG91355 DB	'\''%02x', 00H
	ORG $+1
$SG91364 DB	'Rich Text Format', 00H
	ORG $+3
$SG91428 DB	'%.70s Fatal Error', 00H
	ORG $+2
$SG91439 DB	'%.70s Fatal Error', 00H
	ORG $+2
$SG91450 DB	'%.70s Error', 00H
$SG91507 DB	'Unable to play sound file', 0aH, '%s', 0aH, 'Using defau'
	DB	'lt sound instead', 00H
	ORG $+3
$SG91508 DB	'%.70s Sound Error', 00H
	ORG $+2
$SG91595 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG91596 DB	'I', 00H, 's', 00H, 'Z', 00H, 'o', 00H, 'o', 00H, 'm', 00H
	DB	'e', 00H, 'd', 00H, '(', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd'
	DB	00H, ')', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_IsPlatformNT
EXTRN	__imp__GetVersionExA@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	_memset:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\multimon.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_osvi$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
_IsPlatformNT PROC
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 178
	mov	DWORD PTR _osvi$[ebp], 0
	push	144					; 00000090H
	push	0
	lea	eax, DWORD PTR _osvi$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 179
	mov	DWORD PTR _osvi$[ebp], 148		; 00000094H
; Line 180
	mov	esi, esp
	lea	ecx, DWORD PTR _osvi$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetVersionExA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 181
	xor	eax, eax
	cmp	DWORD PTR _osvi$[ebp+16], 2
	sete	al
; Line 182
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@IsPlatform
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 160				; 000000a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@IsPlatform:
	DD	1
	DD	$LN4@IsPlatform
$LN4@IsPlatform:
	DD	-156					; ffffff64H
	DD	148					; 00000094H
	DD	$LN3@IsPlatform
$LN3@IsPlatform:
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	0
_IsPlatformNT ENDP
_TEXT	ENDS
PUBLIC	_InitMultipleMonitorStubs
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hUser32$ = -4						; size = 4
_InitMultipleMonitorStubs PROC
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 187
	cmp	DWORD PTR _g_fMultiMonInitDone, 0
	je	SHORT $LN3@InitMultip
; Line 189
	xor	eax, eax
	cmp	DWORD PTR _g_pfnGetMonitorInfo, 0
	setne	al
	jmp	$LN4@InitMultip
$LN3@InitMultip:
; Line 192
	call	_IsPlatformNT
	mov	DWORD PTR _g_fMultimonPlatformNT, eax
; Line 193
	mov	esi, esp
	push	OFFSET $SG85935
	call	DWORD PTR __imp__GetModuleHandleA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hUser32$[ebp], eax
; Line 208
	cmp	DWORD PTR _hUser32$[ebp], 0
	je	$LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85951
	mov	eax, DWORD PTR _hUser32$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnGetSystemMetrics, eax
	cmp	DWORD PTR _g_pfnGetSystemMetrics, 0
	je	$LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85952
	mov	ecx, DWORD PTR _hUser32$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnMonitorFromWindow, eax
	cmp	DWORD PTR _g_pfnMonitorFromWindow, 0
	je	$LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85953
	mov	edx, DWORD PTR _hUser32$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnMonitorFromRect, eax
	cmp	DWORD PTR _g_pfnMonitorFromRect, 0
	je	$LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85954
	mov	eax, DWORD PTR _hUser32$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnMonitorFromPoint, eax
	cmp	DWORD PTR _g_pfnMonitorFromPoint, 0
	je	$LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85955
	mov	ecx, DWORD PTR _hUser32$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnEnumDisplayMonitors, eax
	cmp	DWORD PTR _g_pfnEnumDisplayMonitors, 0
	je	SHORT $LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85956
	mov	edx, DWORD PTR _hUser32$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnGetMonitorInfo, eax
	cmp	DWORD PTR _g_pfnGetMonitorInfo, 0
	je	SHORT $LN2@InitMultip
	mov	esi, esp
	push	OFFSET $SG85957
	mov	eax, DWORD PTR _hUser32$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_pfnEnumDisplayDevices, eax
	cmp	DWORD PTR _g_pfnEnumDisplayDevices, 0
	je	SHORT $LN2@InitMultip
; Line 209
	mov	DWORD PTR _g_fMultiMonInitDone, 1
; Line 210
	mov	eax, 1
	jmp	SHORT $LN4@InitMultip
; Line 212
	jmp	SHORT $LN4@InitMultip
$LN2@InitMultip:
; Line 214
	mov	DWORD PTR _g_pfnGetSystemMetrics, 0
; Line 215
	mov	DWORD PTR _g_pfnMonitorFromWindow, 0
; Line 216
	mov	DWORD PTR _g_pfnMonitorFromRect, 0
; Line 217
	mov	DWORD PTR _g_pfnMonitorFromPoint, 0
; Line 218
	mov	DWORD PTR _g_pfnGetMonitorInfo, 0
; Line 219
	mov	DWORD PTR _g_pfnEnumDisplayMonitors, 0
; Line 220
	mov	DWORD PTR _g_pfnEnumDisplayDevices, 0
; Line 222
	mov	DWORD PTR _g_fMultiMonInitDone, 1
; Line 223
	xor	eax, eax
$LN4@InitMultip:
; Line 225
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InitMultipleMonitorStubs ENDP
_TEXT	ENDS
PUBLIC	_xGetSystemMetrics@4
EXTRN	__imp__GetSystemMetrics@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_nIndex$ = 8						; size = 4
_xGetSystemMetrics@4 PROC
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 237
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN7@xGetSystem
; Line 238
	mov	esi, esp
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	call	DWORD PTR _g_pfnGetSystemMetrics
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN8@xGetSystem
$LN7@xGetSystem:
; Line 240
	mov	ecx, DWORD PTR _nIndex$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 76					; 0000004cH
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 5
	ja	SHORT $LN5@xGetSystem
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN10@xGetSystem[eax*4]
$LN4@xGetSystem:
; Line 244
	mov	eax, 1
	jmp	SHORT $LN8@xGetSystem
$LN3@xGetSystem:
; Line 248
	xor	eax, eax
	jmp	SHORT $LN8@xGetSystem
$LN2@xGetSystem:
; Line 251
	mov	DWORD PTR _nIndex$[ebp], 0
; Line 252
	jmp	SHORT $LN5@xGetSystem
$LN1@xGetSystem:
; Line 255
	mov	DWORD PTR _nIndex$[ebp], 1
$LN5@xGetSystem:
; Line 259
	mov	esi, esp
	mov	ecx, DWORD PTR _nIndex$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xGetSystem:
; Line 260
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@xGetSystem:
	DD	$LN3@xGetSystem
	DD	$LN3@xGetSystem
	DD	$LN2@xGetSystem
	DD	$LN1@xGetSystem
	DD	$LN4@xGetSystem
	DD	$LN4@xGetSystem
_xGetSystemMetrics@4 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromPoint@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ptScreenCoords$ = 8					; size = 8
_dwFlags$ = 16						; size = 4
_xMonitorFromPoint@12 PROC
; Line 266
	push	ebp
	mov	ebp, esp
	push	esi
; Line 267
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN3@xMonitorFr
; Line 268
	mov	esi, esp
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptScreenCoords$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ptScreenCoords$[ebp]
	push	edx
	call	DWORD PTR _g_pfnMonitorFromPoint
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@xMonitorFr
$LN3@xMonitorFr:
; Line 274
	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 3
	jne	SHORT $LN1@xMonitorFr
	cmp	DWORD PTR _ptScreenCoords$[ebp], 0
	jl	SHORT $LN2@xMonitorFr
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _ptScreenCoords$[ebp], eax
	jge	SHORT $LN2@xMonitorFr
	cmp	DWORD PTR _ptScreenCoords$[ebp+4], 0
	jl	SHORT $LN2@xMonitorFr
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _ptScreenCoords$[ebp+4], eax
	jge	SHORT $LN2@xMonitorFr
$LN1@xMonitorFr:
; Line 276
	mov	eax, 305397826				; 12340042H
	jmp	SHORT $LN4@xMonitorFr
$LN2@xMonitorFr:
; Line 279
	xor	eax, eax
$LN4@xMonitorFr:
; Line 280
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_xMonitorFromPoint@12 ENDP
_TEXT	ENDS
PUBLIC	_xMonitorFromRect@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lprcScreenCoords$ = 8					; size = 4
_dwFlags$ = 12						; size = 4
_xMonitorFromRect@8 PROC
; Line 284
	push	ebp
	mov	ebp, esp
	push	esi
; Line 285
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN3@xMonitorFr@2
; Line 286
	mov	esi, esp
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lprcScreenCoords$[ebp]
	push	ecx
	call	DWORD PTR _g_pfnMonitorFromRect
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@xMonitorFr@2
$LN3@xMonitorFr@2:
; Line 292
	mov	edx, DWORD PTR _dwFlags$[ebp]
	and	edx, 3
	jne	SHORT $LN1@xMonitorFr@2
	mov	eax, DWORD PTR _lprcScreenCoords$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@xMonitorFr@2
	mov	ecx, DWORD PTR _lprcScreenCoords$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jle	SHORT $LN2@xMonitorFr@2
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _lprcScreenCoords$[ebp]
	cmp	DWORD PTR [edx], eax
	jge	SHORT $LN2@xMonitorFr@2
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _lprcScreenCoords$[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jge	SHORT $LN2@xMonitorFr@2
$LN1@xMonitorFr@2:
; Line 294
	mov	eax, 305397826				; 12340042H
	jmp	SHORT $LN4@xMonitorFr@2
$LN2@xMonitorFr@2:
; Line 297
	xor	eax, eax
$LN4@xMonitorFr@2:
; Line 298
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_xMonitorFromRect@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_xMonitorFromWindow@8
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__GetWindowPlacement@8:PROC
EXTRN	__imp__IsIconic@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -60						; size = 4
_wp$ = -52						; size = 44
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_xMonitorFromWindow@8 PROC
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 305
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN3@xMonitorFr@3
; Line 306
	mov	esi, esp
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR _g_pfnMonitorFromWindow
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@xMonitorFr@3
$LN3@xMonitorFr@3:
; Line 308
	mov	edx, DWORD PTR _dwFlags$[ebp]
	and	edx, 3
	je	SHORT $LN2@xMonitorFr@3
; Line 309
	mov	eax, 305397826				; 12340042H
	jmp	SHORT $LN4@xMonitorFr@3
$LN2@xMonitorFr@3:
; Line 313
	mov	esi, esp
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@xMonitorFr@3
	mov	esi, esp
	lea	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowPlacement@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@xMonitorFr@3
$LN6@xMonitorFr@3:
	mov	esi, esp
	lea	eax, DWORD PTR _wp$[ebp+28]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
$LN7@xMonitorFr@3:
	cmp	DWORD PTR tv80[ebp], 0
	je	SHORT $LN1@xMonitorFr@3
; Line 315
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	lea	eax, DWORD PTR _wp$[ebp+28]
	push	eax
	call	_xMonitorFromRect@8
	jmp	SHORT $LN4@xMonitorFr@3
$LN1@xMonitorFr@3:
; Line 318
	xor	eax, eax
$LN4@xMonitorFr@3:
; Line 319
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@xMonitorFr@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN10@xMonitorFr@3:
	DD	1
	DD	$LN9@xMonitorFr@3
$LN9@xMonitorFr@3:
	DD	-52					; ffffffccH
	DD	44					; 0000002cH
	DD	$LN8@xMonitorFr@3
$LN8@xMonitorFr@3:
	DB	119					; 00000077H
	DB	112					; 00000070H
	DB	0
_xMonitorFromWindow@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_xGetMonitorInfo@8
EXTRN	_strncpy_s:PROC
EXTRN	__imp__SystemParametersInfoA@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f$86021 = -32						; size = 4
_rcWork$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_hMonitor$ = 8						; size = 4
_lpMonitorInfo$ = 12					; size = 4
_xGetMonitorInfo@8 PROC
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 326
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN3@xGetMonito
; Line 328
	mov	esi, esp
	mov	eax, DWORD PTR _lpMonitorInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMonitor$[ebp]
	push	ecx
	call	DWORD PTR _g_pfnGetMonitorInfo
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _f$86021[ebp], eax
; Line 337
	mov	eax, DWORD PTR _f$86021[ebp]
	jmp	$LN4@xGetMonito
$LN3@xGetMonito:
; Line 343
	cmp	DWORD PTR _hMonitor$[ebp], 305397826	; 12340042H
	jne	$LN2@xGetMonito
	cmp	DWORD PTR _lpMonitorInfo$[ebp], 0
	je	$LN2@xGetMonito
	mov	edx, DWORD PTR _lpMonitorInfo$[ebp]
	cmp	DWORD PTR [edx], 40			; 00000028H
	jb	$LN2@xGetMonito
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _rcWork$[ebp]
	push	eax
	push	0
	push	48					; 00000030H
	call	DWORD PTR __imp__SystemParametersInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN2@xGetMonito
; Line 345
	mov	ecx, DWORD PTR _lpMonitorInfo$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 346
	mov	edx, DWORD PTR _lpMonitorInfo$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 347
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _lpMonitorInfo$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 348
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _lpMonitorInfo$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 349
	mov	eax, DWORD PTR _lpMonitorInfo$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _rcWork$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rcWork$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rcWork$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rcWork$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 350
	mov	eax, DWORD PTR _lpMonitorInfo$[ebp]
	mov	DWORD PTR [eax+36], 1
; Line 352
	mov	ecx, DWORD PTR _lpMonitorInfo$[ebp]
	cmp	DWORD PTR [ecx], 72			; 00000048H
	jb	SHORT $LN1@xGetMonito
; Line 358
	push	31					; 0000001fH
	push	OFFSET $SG86032
	push	32					; 00000020H
	mov	edx, DWORD PTR _lpMonitorInfo$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	call	_strncpy_s
	add	esp, 16					; 00000010H
$LN1@xGetMonito:
; Line 365
	mov	eax, 1
	jmp	SHORT $LN4@xGetMonito
$LN2@xGetMonito:
; Line 368
	xor	eax, eax
$LN4@xGetMonito:
; Line 369
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@xGetMonito
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN8@xGetMonito:
	DD	1
	DD	$LN7@xGetMonito
$LN7@xGetMonito:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN6@xGetMonito
$LN6@xGetMonito:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	0
_xGetMonitorInfo@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_xEnumDisplayMonitors@16
EXTRN	__imp__IntersectRect@12:PROC
EXTRN	__imp__OffsetRect@12:PROC
EXTRN	__imp__GetDCOrgEx@8:PROC
EXTRN	__imp__GetClipBox@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -72						; size = 4
_ptOrg$86048 = -64					; size = 8
_rcClip$86047 = -48					; size = 16
_rcLimit$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_hdcOptionalForPainting$ = 8				; size = 4
_lprcEnumMonitorsThatIntersect$ = 12			; size = 4
_lpfnEnumProc$ = 16					; size = 4
_dwData$ = 20						; size = 4
_xEnumDisplayMonitors@16 PROC
; Line 377
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 380
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN13@xEnumDispl
; Line 385
	mov	esi, esp
	mov	eax, DWORD PTR _dwData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpfnEnumProc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdcOptionalForPainting$[ebp]
	push	eax
	call	DWORD PTR _g_pfnEnumDisplayMonitors
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN14@xEnumDispl
$LN13@xEnumDispl:
; Line 388
	cmp	DWORD PTR _lpfnEnumProc$[ebp], 0
	jne	SHORT $LN12@xEnumDispl
; Line 389
	xor	eax, eax
	jmp	$LN14@xEnumDispl
$LN12@xEnumDispl:
; Line 391
	mov	DWORD PTR _rcLimit$[ebp], 0
; Line 392
	mov	DWORD PTR _rcLimit$[ebp+4], 0
; Line 393
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rcLimit$[ebp+8], eax
; Line 394
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__GetSystemMetrics@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rcLimit$[ebp+12], eax
; Line 396
	cmp	DWORD PTR _hdcOptionalForPainting$[ebp], 0
	je	$LN11@xEnumDispl
; Line 401
	mov	esi, esp
	lea	ecx, DWORD PTR _rcClip$86047[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdcOptionalForPainting$[ebp]
	push	edx
	call	DWORD PTR __imp__GetClipBox@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	cmp	DWORD PTR tv80[ebp], 0
	je	$LN3@xEnumDispl
	cmp	DWORD PTR tv80[ebp], 1
	je	$LN4@xEnumDispl
; Line 404
	mov	esi, esp
	lea	eax, DWORD PTR _ptOrg$86048[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdcOptionalForPainting$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDCOrgEx@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@xEnumDispl
; Line 405
	xor	eax, eax
	jmp	$LN14@xEnumDispl
$LN7@xEnumDispl:
; Line 407
	mov	edx, DWORD PTR _ptOrg$86048[ebp+4]
	neg	edx
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ptOrg$86048[ebp]
	neg	eax
	push	eax
	lea	ecx, DWORD PTR _rcLimit$[ebp]
	push	ecx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 410
	mov	esi, esp
	lea	edx, DWORD PTR _rcClip$86047[ebp]
	push	edx
	lea	eax, DWORD PTR _rcLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rcLimit$[ebp]
	push	ecx
	call	DWORD PTR __imp__IntersectRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@xEnumDispl
	cmp	DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp], 0
	je	SHORT $LN5@xEnumDispl
	mov	esi, esp
	mov	edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
	push	edx
	lea	eax, DWORD PTR _rcLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rcLimit$[ebp]
	push	ecx
	call	DWORD PTR __imp__IntersectRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@xEnumDispl
$LN5@xEnumDispl:
; Line 412
	jmp	SHORT $LN9@xEnumDispl
$LN4@xEnumDispl:
; Line 416
	mov	eax, 1
	jmp	SHORT $LN14@xEnumDispl
$LN3@xEnumDispl:
; Line 418
	xor	eax, eax
	jmp	SHORT $LN14@xEnumDispl
$LN9@xEnumDispl:
; Line 420
	jmp	SHORT $LN2@xEnumDispl
$LN11@xEnumDispl:
; Line 422
	cmp	DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp], 0
	je	SHORT $LN2@xEnumDispl
	mov	esi, esp
	mov	edx, DWORD PTR _lprcEnumMonitorsThatIntersect$[ebp]
	push	edx
	lea	eax, DWORD PTR _rcLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rcLimit$[ebp]
	push	ecx
	call	DWORD PTR __imp__IntersectRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@xEnumDispl
; Line 424
	mov	eax, 1
	jmp	SHORT $LN14@xEnumDispl
$LN2@xEnumDispl:
; Line 432
	mov	esi, esp
	mov	edx, DWORD PTR _dwData$[ebp]
	push	edx
	lea	eax, DWORD PTR _rcLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdcOptionalForPainting$[ebp]
	push	ecx
	push	305397826				; 12340042H
	call	DWORD PTR _lpfnEnumProc$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xEnumDispl:
; Line 433
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@xEnumDispl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN20@xEnumDispl:
	DD	3
	DD	$LN19@xEnumDispl
$LN19@xEnumDispl:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN16@xEnumDispl
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN17@xEnumDispl
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN18@xEnumDispl
$LN18@xEnumDispl:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
$LN17@xEnumDispl:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN16@xEnumDispl:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_xEnumDisplayMonitors@16 ENDP
_TEXT	ENDS
PUBLIC	_xEnumDisplayDevices@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_Unused$ = 8						; size = 4
_iDevNum$ = 12						; size = 4
_lpDisplayDevice$ = 16					; size = 4
_dwFlags$ = 20						; size = 4
_xEnumDisplayDevices@16 PROC
; Line 441
	push	ebp
	mov	ebp, esp
	push	esi
; Line 442
	call	_InitMultipleMonitorStubs
	test	eax, eax
	je	SHORT $LN5@xEnumDispl@2
; Line 443
	mov	esi, esp
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpDisplayDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDevNum$[ebp]
	push	edx
	mov	eax, DWORD PTR _Unused$[ebp]
	push	eax
	call	DWORD PTR _g_pfnEnumDisplayDevices
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@xEnumDispl@2
$LN5@xEnumDispl@2:
; Line 445
	cmp	DWORD PTR _Unused$[ebp], 0
	je	SHORT $LN4@xEnumDispl@2
; Line 446
	xor	eax, eax
	jmp	SHORT $LN6@xEnumDispl@2
$LN4@xEnumDispl@2:
; Line 448
	cmp	DWORD PTR _iDevNum$[ebp], 0
	je	SHORT $LN3@xEnumDispl@2
; Line 449
	xor	eax, eax
	jmp	SHORT $LN6@xEnumDispl@2
$LN3@xEnumDispl@2:
; Line 451
	cmp	DWORD PTR _lpDisplayDevice$[ebp], 0
	je	SHORT $LN1@xEnumDispl@2
	mov	ecx, DWORD PTR _lpDisplayDevice$[ebp]
	cmp	DWORD PTR [ecx], 424			; 000001a8H
	jae	SHORT $LN2@xEnumDispl@2
$LN1@xEnumDispl@2:
; Line 452
	xor	eax, eax
	jmp	SHORT $LN6@xEnumDispl@2
$LN2@xEnumDispl@2:
; Line 459
	push	31					; 0000001fH
	push	OFFSET $SG86083
	push	32					; 00000020H
	mov	edx, DWORD PTR _lpDisplayDevice$[ebp]
	add	edx, 4
	push	edx
	call	_strncpy_s
	add	esp, 16					; 00000010H
; Line 460
	push	31					; 0000001fH
	push	OFFSET $SG86087
	push	128					; 00000080H
	mov	eax, DWORD PTR _lpDisplayDevice$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_strncpy_s
	add	esp, 16					; 00000010H
; Line 467
	mov	ecx, DWORD PTR _lpDisplayDevice$[ebp]
	mov	DWORD PTR [ecx+164], 5
; Line 469
	mov	eax, 1
$LN6@xEnumDispl@2:
; Line 470
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
_xEnumDisplayDevices@16 ENDP
_TEXT	ENDS
PUBLIC	_ldisc_update
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_echo$ = 12						; size = 4
_edit$ = 16						; size = 4
_ldisc_update PROC
; File c:\workspace\putty\windows\window.c
; Line 223
	push	ebp
	mov	ebp, esp
; Line 224
	pop	ebp
	ret	0
_ldisc_update ENDP
_TEXT	ENDS
PUBLIC	_get_ttymode
EXTRN	_term_get_ttymode:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_mode$ = 12						; size = 4
_get_ttymode PROC
; Line 227
	push	ebp
	mov	ebp, esp
; Line 228
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_get_ttymode
	add	esp, 8
; Line 229
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_get_ttymode ENDP
_TEXT	ENDS
PUBLIC	_cmdline_error
PUBLIC	_cleanup_exit
PUBLIC	__$ArrayPad$
PUBLIC	_WinMain@16
EXTRN	_run_toplevel_callbacks:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__IsDialogMessageA@8:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	_handle_got_event:PROC
EXTRN	__imp__MsgWaitForMultipleObjects@20:PROC
EXTRN	_handle_get_events:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	_toplevel_callback_pending:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	_term_set_focus:PROC
EXTRN	__imp__GetForegroundWindow@0:PROC
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	_has_help:PROC
EXTRN	_get_sesslist:PROC
EXTRN	__imp__CreateMenu@0:PROC
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp__CreatePopupMenu@0:PROC
EXTRN	__imp__GetSystemMenu@8:PROC
EXTRN	__imp__GetDoubleClickTime@0:PROC
EXTRN	__imp__SetScrollInfo@16:PROC
EXTRN	__imp__CreateCaret@16:PROC
EXTRN	__imp__CreateBitmap@20:PROC
EXTRN	_safemalloc:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	_term_size:PROC
EXTRN	_term_provide_logctx:PROC
EXTRN	_log_init:PROC
EXTRN	_term_init:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	_conf_get_int:PROC
EXTRN	_memset:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	_host_strchr:PROC
EXTRN	_strrchr:PROC
EXTRN	_strspn:PROC
EXTRN	_dupstr:PROC
EXTRN	_conf_get_str:PROC
EXTRN	_cmdline_run_saved:PROC
EXTRN	_conf_set_str:PROC
EXTRN	_atoi:PROC
EXTRN	_host_strcspn:PROC
EXTRN	_strncmp:PROC
EXTRN	__wassert:PROC
EXTRN	_pgp_fingerprints:PROC
EXTRN	_exit:PROC
EXTRN	_cleanup_all:PROC
EXTRN	_message_box:PROC
EXTRN	_strcmp:PROC
EXTRN	_cmdline_process_param:PROC
EXTRN	_split_into_argv:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	_conf_deserialise:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	_sscanf:PROC
EXTRN	_do_config:PROC
EXTRN	_conf_launchable:PROC
EXTRN	_strlen:PROC
EXTRN	_isspace:PROC
EXTRN	_do_defaults:PROC
EXTRN	_conf_set_int:PROC
EXTRN	_backend_from_proto:PROC
EXTRN	_be_default_protocol:DWORD
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	_conf_new:PROC
EXTRN	_init_help:PROC
EXTRN	__imp__RegisterWindowMessageA@4:PROC
EXTRN	_osVersion:BYTE
EXTRN	_safefree:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_dupprintf:PROC
EXTRN	_appname:DWORD
EXTRN	_init_winver:PROC
EXTRN	_defuse_showwindow:PROC
EXTRN	__imp__InitCommonControls@0:PROC
EXTRN	_sk_init:PROC
_BSS	SEGMENT
_logpal	DD	01H DUP (?)
_pal	DD	01H DUP (?)
_sesslist DB	0cH DUP (?)
_savedsess_menu DD 01H DUP (?)
_popup_menus DD	02H DUP (?)
_dbltime DD	01H DUP (?)
_lastbtn DD	01H DUP (?)
_lastact DD	01H DUP (?)
_caretbm DD	01H DUP (?)
_offset_width DD 01H DUP (?)
_offset_height DD 01H DUP (?)
_extra_height DD 01H DUP (?)
_extra_width DD	01H DUP (?)
_font_height DD	01H DUP (?)
_font_width DD	01H DUP (?)
_ucsdata DB	0b10H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv202 = -404						; size = 4
_timeout$89206 = -400					; size = 4
_n$89205 = -396						; size = 4
_nhandles$89204 = -388					; size = 4
_handles$89203 = -380					; size = 4
_str$89180 = -376					; size = 4
_j$89179 = -372						; size = 4
_m$89178 = -368						; size = 4
_si$89177 = -360					; size = 28
_size$89174 = -328					; size = 4
_bits$89173 = -324					; size = 4
_wr$89171 = -316					; size = 16
_cr$89170 = -292					; size = 16
_exwinmode$89158 = -272					; size = 4
_winmode$89157 = -268					; size = 4
_r$89154 = -260						; size = 16
_d$89138 = -240						; size = 4
_c$89136 = -236						; size = 4
_atsign$89134 = -232					; size = 4
_q$89131 = -228						; size = 4
_p$89130 = -224						; size = 4
_host$89129 = -220					; size = 4
_hostbuf$89128 = -216					; size = 4
_c$89111 = -209						; size = 1
_ret$89103 = -208					; size = 4
_q$89101 = -204						; size = 4
_s2$89087 = -200					; size = 4
_s1$89086 = -196					; size = 4
_ret$89073 = -192					; size = 4
_p$89072 = -188						; size = 4
_argv$89067 = -180					; size = 4
_i$89066 = -172						; size = 4
_argc$89065 = -164					; size = 4
_cpsize$89058 = -152					; size = 4
_cp$89057 = -144					; size = 4
_filemap$89056 = -136					; size = 4
_i$89049 = -128						; size = 4
_b$89042 = -124						; size = 4
_allow_launch$89041 = -120				; size = 4
_got_host$89040 = -116					; size = 4
_p$89039 = -112						; size = 4
_str$89035 = -108					; size = 4
_str$89024 = -104					; size = 4
_guess_height$ = -100					; size = 4
_guess_width$ = -96					; size = 4
_hr$ = -92						; size = 4
_msg$ = -84						; size = 28
_wndclass$ = -48					; size = 40
__$ArrayPad$ = -4					; size = 4
_inst$ = 8						; size = 4
_prev$ = 12						; size = 4
_cmdline$ = 16						; size = 4
_show$ = 20						; size = 4
_WinMain@16 PROC
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 340
	mov	eax, DWORD PTR _inst$[ebp]
	mov	DWORD PTR _hinst, eax
; Line 341
	mov	DWORD PTR _hwnd, 0
; Line 342
	mov	DWORD PTR _flags, 5
; Line 344
	call	_sk_init
; Line 346
	mov	esi, esp
	call	DWORD PTR __imp__InitCommonControls@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 350
	call	_defuse_showwindow
; Line 352
	call	_init_winver
	test	eax, eax
	jne	SHORT $LN80@WinMain
; Line 354
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG89025
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _str$89024[ebp], eax
; Line 356
	mov	esi, esp
	push	48					; 00000030H
	mov	edx, DWORD PTR _str$89024[ebp]
	push	edx
	push	OFFSET $SG89027
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 357
	mov	eax, DWORD PTR _str$89024[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 358
	mov	eax, 1
	jmp	$LN82@WinMain
$LN80@WinMain:
; Line 368
	cmp	DWORD PTR _osVersion+4, 4
	jb	SHORT $LN78@WinMain
	cmp	DWORD PTR _osVersion+4, 4
	jne	SHORT $LN79@WinMain
	cmp	DWORD PTR _osVersion+16, 2
	je	SHORT $LN79@WinMain
$LN78@WinMain:
; Line 369
	mov	esi, esp
	push	OFFSET $SG89030
	call	DWORD PTR __imp__RegisterWindowMessageA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wm_mousewheel, eax
$LN79@WinMain:
; Line 371
	call	_init_help
; Line 373
	call	_init_winfuncs
; Line 375
	call	_conf_new
	mov	DWORD PTR _conf, eax
; Line 380
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CoInitialize@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 381
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN77@WinMain
	cmp	DWORD PTR _hr$[ebp], 1
	je	SHORT $LN77@WinMain
; Line 382
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG89036
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _str$89035[ebp], eax
; Line 384
	mov	esi, esp
	push	48					; 00000030H
	mov	edx, DWORD PTR _str$89035[ebp]
	push	edx
	push	OFFSET $SG89038
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 385
	mov	eax, DWORD PTR _str$89035[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 386
	mov	eax, 1
	jmp	$LN82@WinMain
$LN77@WinMain:
; Line 394
	mov	DWORD PTR _got_host$89040[ebp], 0
; Line 398
	mov	DWORD PTR _allow_launch$89041[ebp], 0
; Line 400
	mov	ecx, DWORD PTR _be_default_protocol
	mov	DWORD PTR _default_protocol, ecx
; Line 403
	mov	edx, DWORD PTR _default_protocol
	push	edx
	call	_backend_from_proto
	add	esp, 4
	mov	DWORD PTR _b$89042[ebp], eax
; Line 404
	mov	DWORD PTR _default_port, 0
; Line 405
	cmp	DWORD PTR _b$89042[ebp], 0
	je	SHORT $LN76@WinMain
; Line 406
	mov	eax, DWORD PTR _b$89042[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _default_port, ecx
$LN76@WinMain:
; Line 408
	push	0
	push	115					; 00000073H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 410
	mov	eax, DWORD PTR _conf
	push	eax
	push	0
	call	_do_defaults
	add	esp, 8
; Line 412
	mov	ecx, DWORD PTR _cmdline$[ebp]
	mov	DWORD PTR _p$89039[ebp], ecx
$LN75@WinMain:
; Line 421
	mov	edx, DWORD PTR _p$89039[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN74@WinMain
	mov	ecx, DWORD PTR _p$89039[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN74@WinMain
; Line 422
	mov	eax, DWORD PTR _p$89039[ebp]
	add	eax, 1
	mov	DWORD PTR _p$89039[ebp], eax
	jmp	SHORT $LN75@WinMain
$LN74@WinMain:
; Line 423
	mov	ecx, DWORD PTR _p$89039[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 64					; 00000040H
	jne	$LN73@WinMain
; Line 431
	mov	eax, DWORD PTR _p$89039[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _i$89049[ebp], eax
$LN72@WinMain:
; Line 432
	cmp	DWORD PTR _i$89049[ebp], 1
	jle	SHORT $LN71@WinMain
	mov	ecx, DWORD PTR _p$89039[ebp]
	add	ecx, DWORD PTR _i$89049[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN71@WinMain
; Line 433
	mov	eax, DWORD PTR _i$89049[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$89049[ebp], eax
	jmp	SHORT $LN72@WinMain
$LN71@WinMain:
; Line 434
	mov	ecx, DWORD PTR _p$89039[ebp]
	add	ecx, DWORD PTR _i$89049[ebp]
	mov	BYTE PTR [ecx], 0
; Line 435
	mov	edx, DWORD PTR _conf
	push	edx
	mov	eax, DWORD PTR _p$89039[ebp]
	add	eax, 1
	push	eax
	call	_do_defaults
	add	esp, 8
; Line 436
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_launchable
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN70@WinMain
	call	_do_config
	test	eax, eax
	jne	SHORT $LN70@WinMain
; Line 437
	push	0
	call	_cleanup_exit
	add	esp, 4
$LN70@WinMain:
; Line 439
	mov	DWORD PTR _allow_launch$89041[ebp], 1
	jmp	$LN69@WinMain
$LN73@WinMain:
; Line 440
	mov	edx, DWORD PTR _p$89039[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 38					; 00000026H
	jne	$LN68@WinMain
; Line 452
	lea	ecx, DWORD PTR _cpsize$89058[ebp]
	push	ecx
	lea	edx, DWORD PTR _filemap$89056[ebp]
	push	edx
	push	OFFSET $SG89061
	mov	eax, DWORD PTR _p$89039[ebp]
	add	eax, 1
	push	eax
	call	_sscanf
	add	esp, 16					; 00000010H
	cmp	eax, 2
	jne	SHORT $LN67@WinMain
	mov	esi, esp
	mov	ecx, DWORD PTR _cpsize$89058[ebp]
	push	ecx
	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _filemap$89056[ebp]
	push	edx
	call	DWORD PTR __imp__MapViewOfFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cp$89057[ebp], eax
	cmp	DWORD PTR _cp$89057[ebp], 0
	je	SHORT $LN67@WinMain
; Line 453
	mov	eax, DWORD PTR _cpsize$89058[ebp]
	push	eax
	mov	ecx, DWORD PTR _cp$89057[ebp]
	push	ecx
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_deserialise
	add	esp, 12					; 0000000cH
; Line 454
	mov	esi, esp
	mov	eax, DWORD PTR _cp$89057[ebp]
	push	eax
	call	DWORD PTR __imp__UnmapViewOfFile@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 455
	mov	esi, esp
	mov	ecx, DWORD PTR _filemap$89056[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN66@WinMain
$LN67@WinMain:
; Line 456
	call	_do_config
	test	eax, eax
	jne	SHORT $LN66@WinMain
; Line 457
	push	0
	call	_cleanup_exit
	add	esp, 4
$LN66@WinMain:
; Line 459
	mov	DWORD PTR _allow_launch$89041[ebp], 1
; Line 460
	jmp	$LN69@WinMain
$LN68@WinMain:
; Line 468
	push	0
	lea	edx, DWORD PTR _argv$89067[ebp]
	push	edx
	lea	eax, DWORD PTR _argc$89065[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmdline$[ebp]
	push	ecx
	call	_split_into_argv
	add	esp, 16					; 00000010H
; Line 470
	mov	DWORD PTR _i$89066[ebp], 0
	jmp	SHORT $LN63@WinMain
$LN62@WinMain:
	mov	edx, DWORD PTR _i$89066[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89066[ebp], edx
$LN63@WinMain:
	mov	eax, DWORD PTR _i$89066[ebp]
	cmp	eax, DWORD PTR _argc$89065[ebp]
	jge	$LN69@WinMain
; Line 471
	mov	ecx, DWORD PTR _i$89066[ebp]
	mov	edx, DWORD PTR _argv$89067[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _p$89072[ebp], eax
; Line 475
	mov	ecx, DWORD PTR _i$89066[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _argc$89065[ebp]
	jge	SHORT $LN83@WinMain
	mov	edx, DWORD PTR _i$89066[ebp]
	mov	eax, DWORD PTR _argv$89067[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR tv202[ebp], ecx
	jmp	SHORT $LN84@WinMain
$LN83@WinMain:
	mov	DWORD PTR tv202[ebp], 0
$LN84@WinMain:
	mov	edx, DWORD PTR _conf
	push	edx
	push	1
	mov	eax, DWORD PTR tv202[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$89072[ebp]
	push	ecx
	call	_cmdline_process_param
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$89073[ebp], eax
; Line 476
	cmp	DWORD PTR _ret$89073[ebp], -2		; fffffffeH
	jne	SHORT $LN60@WinMain
; Line 477
	mov	edx, DWORD PTR _p$89072[ebp]
	push	edx
	push	OFFSET $SG89076
	call	_cmdline_error
	add	esp, 8
	jmp	$LN59@WinMain
$LN60@WinMain:
; Line 478
	cmp	DWORD PTR _ret$89073[ebp], 2
	jne	SHORT $LN58@WinMain
; Line 479
	mov	eax, DWORD PTR _i$89066[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89066[ebp], eax
	jmp	$LN59@WinMain
$LN58@WinMain:
; Line 480
	cmp	DWORD PTR _ret$89073[ebp], 1
	jne	SHORT $LN56@WinMain
; Line 481
	jmp	$LN62@WinMain
; Line 482
	jmp	$LN59@WinMain
$LN56@WinMain:
; Line 483
	push	OFFSET $SG89084
	mov	ecx, DWORD PTR _p$89072[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN53@WinMain
	push	OFFSET $SG89085
	mov	edx, DWORD PTR _p$89072[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN54@WinMain
$LN53@WinMain:
; Line 491
	push	OFFSET $SG89089
	mov	eax, DWORD PTR _p$89072[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN52@WinMain
; Line 502
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG89090
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _s1$89086[ebp], eax
; Line 503
	mov	edx, DWORD PTR _appname
	push	edx
	push	OFFSET $SG89091
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _s2$89087[ebp], eax
; Line 504
	jmp	SHORT $LN51@WinMain
$LN52@WinMain:
; Line 512
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG89093
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _s1$89086[ebp], eax
; Line 513
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG89094
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _s2$89087[ebp], eax
$LN51@WinMain:
; Line 517
	push	4
	push	308					; 00000134H
	mov	edx, DWORD PTR _s2$89087[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$89086[ebp]
	push	eax
	call	_message_box
	add	esp, 16					; 00000010H
	cmp	eax, 6
	jne	SHORT $LN50@WinMain
; Line 518
	call	_cleanup_all
$LN50@WinMain:
; Line 520
	mov	ecx, DWORD PTR _s1$89086[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 521
	mov	edx, DWORD PTR _s2$89087[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 522
	push	0
	call	_exit
	jmp	$LN59@WinMain
$LN54@WinMain:
; Line 523
	push	OFFSET $SG89098
	mov	eax, DWORD PTR _p$89072[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN48@WinMain
; Line 524
	call	_pgp_fingerprints
; Line 525
	push	1
	call	_exit
	jmp	$LN59@WinMain
$LN48@WinMain:
; Line 526
	mov	ecx, DWORD PTR _p$89072[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	je	$LN46@WinMain
; Line 527
	mov	eax, DWORD PTR _p$89072[ebp]
	mov	DWORD PTR _q$89101[ebp], eax
; Line 528
	cmp	DWORD PTR _got_host$89040[ebp], 0
	je	SHORT $LN45@WinMain
; Line 536
	mov	ecx, DWORD PTR _conf
	push	ecx
	push	1
	mov	edx, DWORD PTR _p$89072[ebp]
	push	edx
	push	OFFSET $SG89104
	call	_cmdline_process_param
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$89103[ebp], eax
; Line 537
	cmp	DWORD PTR _ret$89103[ebp], 2
	je	SHORT $LN85@WinMain
	push	537					; 00000219H
	push	OFFSET $SG89106
	push	OFFSET $SG89107
	call	__wassert
	add	esp, 12					; 0000000cH
$LN85@WinMain:
; Line 538
	jmp	$LN44@WinMain
$LN45@WinMain:
	push	7
	push	OFFSET $SG89110
	mov	ecx, DWORD PTR _q$89101[ebp]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN37@WinMain
; Line 546
	mov	edx, DWORD PTR _q$89101[ebp]
	add	edx, 7
	mov	DWORD PTR _q$89101[ebp], edx
; Line 547
	mov	eax, DWORD PTR _q$89101[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN42@WinMain
	mov	edx, DWORD PTR _q$89101[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN42@WinMain
; Line 548
	mov	ecx, DWORD PTR _q$89101[ebp]
	add	ecx, 2
	mov	DWORD PTR _q$89101[ebp], ecx
$LN42@WinMain:
; Line 549
	push	1
	push	2
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 550
	mov	eax, DWORD PTR _q$89101[ebp]
	mov	DWORD PTR _p$89072[ebp], eax
; Line 551
	push	OFFSET $SG89113
	mov	ecx, DWORD PTR _p$89072[ebp]
	push	ecx
	call	_host_strcspn
	add	esp, 8
	add	eax, DWORD PTR _p$89072[ebp]
	mov	DWORD PTR _p$89072[ebp], eax
; Line 552
	mov	edx, DWORD PTR _p$89072[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$89111[ebp], al
; Line 553
	mov	ecx, DWORD PTR _p$89072[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN41@WinMain
; Line 554
	mov	eax, DWORD PTR _p$89072[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _p$89072[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$89072[ebp], ecx
$LN41@WinMain:
; Line 555
	movsx	edx, BYTE PTR _c$89111[ebp]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN40@WinMain
; Line 556
	mov	eax, DWORD PTR _p$89072[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	push	1
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 557
	jmp	SHORT $LN39@WinMain
$LN40@WinMain:
; Line 558
	push	-1
	push	1
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
$LN39@WinMain:
; Line 559
	mov	eax, DWORD PTR _q$89101[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_set_str
	add	esp, 12					; 0000000cH
; Line 560
	mov	DWORD PTR _got_host$89040[ebp], 1
; Line 561
	jmp	SHORT $LN44@WinMain
$LN37@WinMain:
; Line 566
	mov	edx, DWORD PTR _p$89072[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN36@WinMain
	mov	ecx, DWORD PTR _p$89072[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN36@WinMain
; Line 567
	mov	eax, DWORD PTR _p$89072[ebp]
	add	eax, 1
	mov	DWORD PTR _p$89072[ebp], eax
	jmp	SHORT $LN37@WinMain
$LN36@WinMain:
; Line 568
	mov	ecx, DWORD PTR _p$89072[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN35@WinMain
; Line 569
	mov	eax, DWORD PTR _p$89072[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _p$89072[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$89072[ebp], ecx
$LN35@WinMain:
; Line 570
	mov	edx, DWORD PTR _q$89101[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_set_str
	add	esp, 12					; 0000000cH
; Line 571
	mov	DWORD PTR _got_host$89040[ebp], 1
$LN44@WinMain:
; Line 573
	jmp	SHORT $LN59@WinMain
$LN46@WinMain:
; Line 574
	mov	ecx, DWORD PTR _p$89072[ebp]
	push	ecx
	push	OFFSET $SG89123
	call	_cmdline_error
	add	esp, 8
$LN59@WinMain:
; Line 576
	jmp	$LN62@WinMain
$LN69@WinMain:
; Line 579
	mov	edx, DWORD PTR _conf
	push	edx
	call	_cmdline_run_saved
	add	esp, 4
; Line 581
	cmp	DWORD PTR _loaded_session, 0
	jne	SHORT $LN32@WinMain
	cmp	DWORD PTR _got_host$89040[ebp], 0
	je	SHORT $LN33@WinMain
$LN32@WinMain:
; Line 582
	mov	DWORD PTR _allow_launch$89041[ebp], 1
$LN33@WinMain:
; Line 584
	cmp	DWORD PTR _allow_launch$89041[ebp], 0
	je	SHORT $LN30@WinMain
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_launchable
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN31@WinMain
$LN30@WinMain:
	call	_do_config
	test	eax, eax
	jne	SHORT $LN31@WinMain
; Line 585
	push	0
	call	_cleanup_exit
	add	esp, 4
$LN31@WinMain:
; Line 592
	push	0
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_str
	add	esp, 8
	push	eax
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _hostbuf$89128[ebp], eax
; Line 593
	mov	edx, DWORD PTR _hostbuf$89128[ebp]
	mov	DWORD PTR _host$89129[ebp], edx
; Line 599
	push	OFFSET $SG89132
	mov	eax, DWORD PTR _host$89129[ebp]
	push	eax
	call	_strspn
	add	esp, 8
	add	eax, DWORD PTR _host$89129[ebp]
	mov	DWORD PTR _host$89129[ebp], eax
; Line 605
	mov	ecx, DWORD PTR _host$89129[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN29@WinMain
; Line 606
	push	64					; 00000040H
	mov	eax, DWORD PTR _host$89129[ebp]
	push	eax
	call	_strrchr
	add	esp, 8
	mov	DWORD PTR _atsign$89134[ebp], eax
; Line 607
	cmp	DWORD PTR _atsign$89134[ebp], 0
	je	SHORT $LN29@WinMain
; Line 608
	mov	ecx, DWORD PTR _atsign$89134[ebp]
	mov	BYTE PTR [ecx], 0
; Line 609
	mov	edx, DWORD PTR _host$89129[ebp]
	push	edx
	push	50					; 00000032H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_set_str
	add	esp, 12					; 0000000cH
; Line 610
	mov	ecx, DWORD PTR _atsign$89134[ebp]
	add	ecx, 1
	mov	DWORD PTR _host$89129[ebp], ecx
$LN29@WinMain:
; Line 621
	push	58					; 0000003aH
	mov	edx, DWORD PTR _host$89129[ebp]
	push	edx
	call	_host_strchr
	add	esp, 8
	mov	DWORD PTR _c$89136[ebp], eax
; Line 623
	cmp	DWORD PTR _c$89136[ebp], 0
	je	SHORT $LN27@WinMain
; Line 624
	push	58					; 0000003aH
	mov	eax, DWORD PTR _c$89136[ebp]
	add	eax, 1
	push	eax
	call	_host_strchr
	add	esp, 8
	mov	DWORD PTR _d$89138[ebp], eax
; Line 625
	cmp	DWORD PTR _d$89138[ebp], 0
	jne	SHORT $LN27@WinMain
; Line 626
	mov	ecx, DWORD PTR _c$89136[ebp]
	mov	BYTE PTR [ecx], 0
$LN27@WinMain:
; Line 633
	mov	edx, DWORD PTR _hostbuf$89128[ebp]
	mov	DWORD PTR _p$89130[ebp], edx
; Line 634
	mov	eax, DWORD PTR _host$89129[ebp]
	mov	DWORD PTR _q$89131[ebp], eax
$LN25@WinMain:
; Line 635
	mov	ecx, DWORD PTR _q$89131[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN24@WinMain
; Line 636
	mov	eax, DWORD PTR _q$89131[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN23@WinMain
	mov	edx, DWORD PTR _q$89131[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 9
	je	SHORT $LN23@WinMain
; Line 637
	mov	ecx, DWORD PTR _p$89130[ebp]
	mov	edx, DWORD PTR _q$89131[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _p$89130[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$89130[ebp], ecx
$LN23@WinMain:
; Line 638
	mov	edx, DWORD PTR _q$89131[ebp]
	add	edx, 1
	mov	DWORD PTR _q$89131[ebp], edx
; Line 639
	jmp	SHORT $LN25@WinMain
$LN24@WinMain:
; Line 640
	mov	eax, DWORD PTR _p$89130[ebp]
	mov	BYTE PTR [eax], 0
; Line 642
	mov	ecx, DWORD PTR _hostbuf$89128[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_str
	add	esp, 12					; 0000000cH
; Line 643
	mov	eax, DWORD PTR _hostbuf$89128[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 647
	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN22@WinMain
; Line 648
	mov	DWORD PTR _wndclass$[ebp], 0
; Line 649
	mov	DWORD PTR _wndclass$[ebp+4], OFFSET _WndProc@16
; Line 650
	mov	DWORD PTR _wndclass$[ebp+8], 0
; Line 651
	mov	DWORD PTR _wndclass$[ebp+12], 0
; Line 652
	mov	ecx, DWORD PTR _inst$[ebp]
	mov	DWORD PTR _wndclass$[ebp+16], ecx
; Line 653
	mov	esi, esp
	push	200					; 000000c8H
	mov	edx, DWORD PTR _inst$[ebp]
	push	edx
	call	DWORD PTR __imp__LoadIconA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wndclass$[ebp+20], eax
; Line 654
	mov	esi, esp
	push	32513					; 00007f01H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wndclass$[ebp+24], eax
; Line 655
	mov	DWORD PTR _wndclass$[ebp+28], 0
; Line 656
	mov	DWORD PTR _wndclass$[ebp+32], 0
; Line 657
	mov	eax, DWORD PTR _appname
	mov	DWORD PTR _wndclass$[ebp+36], eax
; Line 659
	mov	esi, esp
	lea	ecx, DWORD PTR _wndclass$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegisterClassA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@WinMain:
; Line 662
	push	2832					; 00000b10H
	push	0
	push	OFFSET _ucsdata
	call	_memset
	add	esp, 12					; 0000000cH
; Line 664
	call	_conf_cache_data
; Line 666
	call	_conftopalette
; Line 675
	mov	DWORD PTR _font_width, 10		; 0000000aH
; Line 676
	mov	DWORD PTR _font_height, 20		; 00000014H
; Line 677
	mov	DWORD PTR _extra_width, 25		; 00000019H
; Line 678
	mov	DWORD PTR _extra_height, 28		; 0000001cH
; Line 679
	push	110					; 0000006eH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	imul	eax, DWORD PTR _font_width
	add	eax, DWORD PTR _extra_width
	mov	DWORD PTR _guess_width$[ebp], eax
; Line 680
	push	111					; 0000006fH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	imul	eax, DWORD PTR _font_height
	add	eax, DWORD PTR _extra_height
	mov	DWORD PTR _guess_height$[ebp], eax
; Line 683
	lea	ecx, DWORD PTR _r$89154[ebp]
	push	ecx
	call	_get_fullscreen_rect
	add	esp, 4
; Line 684
	mov	edx, DWORD PTR _r$89154[ebp+8]
	sub	edx, DWORD PTR _r$89154[ebp]
	cmp	DWORD PTR _guess_width$[ebp], edx
	jle	SHORT $LN21@WinMain
; Line 685
	mov	eax, DWORD PTR _r$89154[ebp+8]
	sub	eax, DWORD PTR _r$89154[ebp]
	mov	DWORD PTR _guess_width$[ebp], eax
$LN21@WinMain:
; Line 686
	mov	ecx, DWORD PTR _r$89154[ebp+12]
	sub	ecx, DWORD PTR _r$89154[ebp+4]
	cmp	DWORD PTR _guess_height$[ebp], ecx
	jle	SHORT $LN20@WinMain
; Line 687
	mov	edx, DWORD PTR _r$89154[ebp+12]
	sub	edx, DWORD PTR _r$89154[ebp+4]
	mov	DWORD PTR _guess_height$[ebp], edx
$LN20@WinMain:
; Line 691
	mov	DWORD PTR _winmode$89157[ebp], 15663104	; 00ef0000H
; Line 692
	mov	DWORD PTR _exwinmode$89158[ebp], 0
; Line 693
	push	104					; 00000068H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@WinMain
; Line 694
	mov	ecx, DWORD PTR _winmode$89157[ebp]
	and	ecx, -2097153				; ffdfffffH
	mov	DWORD PTR _winmode$89157[ebp], ecx
$LN19@WinMain:
; Line 695
	push	106					; 0000006aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN18@WinMain
; Line 696
	mov	eax, DWORD PTR _winmode$89157[ebp]
	and	eax, -327681				; fffaffffH
	mov	DWORD PTR _winmode$89157[ebp], eax
$LN18@WinMain:
; Line 697
	push	83					; 00000053H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@WinMain
; Line 698
	mov	edx, DWORD PTR _exwinmode$89158[ebp]
	or	edx, 8
	mov	DWORD PTR _exwinmode$89158[ebp], edx
$LN17@WinMain:
; Line 699
	push	121					; 00000079H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@WinMain
; Line 700
	mov	ecx, DWORD PTR _exwinmode$89158[ebp]
	or	ecx, 512				; 00000200H
	mov	DWORD PTR _exwinmode$89158[ebp], ecx
$LN16@WinMain:
; Line 704
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _inst$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _guess_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guess_width$[ebp]
	push	ecx
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _winmode$89157[ebp]
	push	edx
	mov	eax, DWORD PTR _appname
	push	eax
	mov	ecx, DWORD PTR _appname
	push	ecx
	mov	edx, DWORD PTR _exwinmode$89158[ebp]
	push	edx
	call	DWORD PTR __imp__CreateWindowExA@48
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hwnd, eax
; Line 711
	push	0
	push	0
	call	_init_fonts
	add	esp, 8
; Line 719
	push	0
	push	OFFSET _ucsdata
	mov	eax, DWORD PTR _conf
	push	eax
	call	_term_init
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _term, eax
; Line 720
	mov	ecx, DWORD PTR _conf
	push	ecx
	push	0
	call	_log_init
	add	esp, 8
	mov	DWORD PTR _logctx, eax
; Line 721
	mov	edx, DWORD PTR _logctx
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_provide_logctx
	add	esp, 8
; Line 724
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	110					; 0000006eH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	111					; 0000006fH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_size
	add	esp, 16					; 00000010H
; Line 731
	mov	esi, esp
	lea	edx, DWORD PTR _wr$89171[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 732
	mov	esi, esp
	lea	ecx, DWORD PTR _cr$89170[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 733
	push	122					; 0000007aH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _offset_height, eax
	mov	ecx, DWORD PTR _offset_height
	mov	DWORD PTR _offset_width, ecx
; Line 734
	mov	edx, DWORD PTR _wr$89171[ebp+8]
	sub	edx, DWORD PTR _wr$89171[ebp]
	sub	edx, DWORD PTR _cr$89170[ebp+8]
	add	edx, DWORD PTR _cr$89170[ebp]
	mov	eax, DWORD PTR _offset_width
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _extra_width, ecx
; Line 735
	mov	edx, DWORD PTR _wr$89171[ebp+12]
	sub	edx, DWORD PTR _wr$89171[ebp+4]
	sub	edx, DWORD PTR _cr$89170[ebp+12]
	add	edx, DWORD PTR _cr$89170[ebp+4]
	mov	eax, DWORD PTR _offset_height
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _extra_height, ecx
; Line 742
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	add	eax, DWORD PTR _extra_width
	mov	DWORD PTR _guess_width$[ebp], eax
; Line 743
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_height
	imul	edx, DWORD PTR [ecx+296]
	add	edx, DWORD PTR _extra_height
	mov	DWORD PTR _guess_height$[ebp], edx
; Line 745
	mov	esi, esp
	push	14					; 0000000eH
	mov	eax, DWORD PTR _guess_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guess_width$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 752
	mov	eax, DWORD PTR _font_width
	add	eax, 15					; 0000000fH
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	shl	eax, 1
	imul	eax, DWORD PTR _font_height
	mov	DWORD PTR _size$89174[ebp], eax
; Line 753
	push	1
	mov	eax, DWORD PTR _size$89174[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _bits$89173[ebp], eax
; Line 754
	mov	ecx, DWORD PTR _size$89174[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _bits$89173[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 755
	mov	esi, esp
	mov	eax, DWORD PTR _bits$89173[ebp]
	push	eax
	push	1
	push	1
	mov	ecx, DWORD PTR _font_height
	push	ecx
	mov	edx, DWORD PTR _font_width
	push	edx
	call	DWORD PTR __imp__CreateBitmap@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _caretbm, eax
; Line 756
	mov	eax, DWORD PTR _bits$89173[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 758
	mov	esi, esp
	mov	ecx, DWORD PTR _font_height
	push	ecx
	mov	edx, DWORD PTR _font_width
	push	edx
	mov	eax, DWORD PTR _caretbm
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__CreateCaret@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 766
	mov	DWORD PTR _si$89177[ebp], 28		; 0000001cH
; Line 767
	mov	DWORD PTR _si$89177[ebp+4], 31		; 0000001fH
; Line 768
	mov	DWORD PTR _si$89177[ebp+8], 0
; Line 769
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	sub	eax, 1
	mov	DWORD PTR _si$89177[ebp+12], eax
; Line 770
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR [ecx+296]
	mov	DWORD PTR _si$89177[ebp+16], edx
; Line 771
	mov	DWORD PTR _si$89177[ebp+20], 0
; Line 772
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _si$89177[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SetScrollInfo@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 778
	mov	DWORD PTR _lastact, 0
; Line 779
	mov	DWORD PTR _lastbtn, 0
; Line 780
	mov	esi, esp
	call	DWORD PTR __imp__GetDoubleClickTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dbltime, eax
; Line 790
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__GetSystemMenu@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _popup_menus, eax
; Line 791
	mov	esi, esp
	call	DWORD PTR __imp__CreatePopupMenu@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _popup_menus+4, eax
; Line 792
	mov	esi, esp
	push	OFFSET $SG89181
	push	400					; 00000190H
	push	0
	mov	eax, DWORD PTR _popup_menus+4
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 794
	mov	esi, esp
	call	DWORD PTR __imp__CreateMenu@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _savedsess_menu, eax
; Line 795
	push	1
	push	OFFSET _sesslist
	call	_get_sesslist
	add	esp, 8
; Line 796
	call	_update_savedsess_menu
; Line 798
	mov	DWORD PTR _j$89179[ebp], 0
	jmp	SHORT $LN15@WinMain
$LN14@WinMain:
	mov	ecx, DWORD PTR _j$89179[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$89179[ebp], ecx
$LN15@WinMain:
	cmp	DWORD PTR _j$89179[ebp], 2
	jae	$LN13@WinMain
; Line 799
	mov	edx, DWORD PTR _j$89179[ebp]
	mov	eax, DWORD PTR _popup_menus[edx*4]
	mov	DWORD PTR _m$89178[ebp], eax
; Line 801
	mov	esi, esp
	push	0
	push	0
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _m$89178[ebp]
	push	ecx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 802
	mov	esi, esp
	push	OFFSET $SG89185
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _m$89178[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 803
	mov	esi, esp
	push	0
	push	0
	push	2048					; 00000800H
	mov	eax, DWORD PTR _m$89178[ebp]
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 804
	mov	esi, esp
	push	OFFSET $SG89186
	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _m$89178[ebp]
	push	ecx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 805
	mov	esi, esp
	push	OFFSET $SG89187
	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _m$89178[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 807
	mov	esi, esp
	push	OFFSET $SG89189
	mov	eax, DWORD PTR _savedsess_menu
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _m$89178[ebp]
	push	ecx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 808
	mov	esi, esp
	push	OFFSET $SG89190
	push	80					; 00000050H
	push	0
	mov	edx, DWORD PTR _m$89178[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 809
	mov	esi, esp
	push	0
	push	0
	push	2048					; 00000800H
	mov	eax, DWORD PTR _m$89178[ebp]
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 810
	mov	esi, esp
	push	OFFSET $SG89191
	push	368					; 00000170H
	push	0
	mov	ecx, DWORD PTR _m$89178[ebp]
	push	ecx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 811
	mov	esi, esp
	push	OFFSET $SG89192
	push	96					; 00000060H
	push	0
	mov	edx, DWORD PTR _m$89178[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 812
	mov	esi, esp
	push	OFFSET $SG89193
	push	112					; 00000070H
	push	0
	mov	eax, DWORD PTR _m$89178[ebp]
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 813
	mov	esi, esp
	push	0
	push	0
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _m$89178[ebp]
	push	ecx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 816
	mov	esi, esp
	push	OFFSET $SG89194
	push	384					; 00000180H
	push	106					; 0000006aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _m$89178[ebp]
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 817
	mov	esi, esp
	push	0
	push	0
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _m$89178[ebp]
	push	ecx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 818
	call	_has_help
	test	eax, eax
	je	SHORT $LN12@WinMain
; Line 819
	mov	esi, esp
	push	OFFSET $SG89196
	push	320					; 00000140H
	push	0
	mov	edx, DWORD PTR _m$89178[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@WinMain:
; Line 820
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG89197
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _str$89180[ebp], eax
; Line 821
	mov	esi, esp
	mov	ecx, DWORD PTR _str$89180[ebp]
	push	ecx
	push	336					; 00000150H
	push	0
	mov	edx, DWORD PTR _m$89178[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 822
	mov	eax, DWORD PTR _str$89180[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 823
	jmp	$LN14@WinMain
$LN13@WinMain:
; Line 826
	call	_start_backend
; Line 831
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetKeyboardLayout@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_set_input_locale
	add	esp, 4
; Line 836
	mov	esi, esp
	mov	ecx, DWORD PTR _show$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 837
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__SetForegroundWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 842
	mov	DWORD PTR _pal, 0
; Line 843
	mov	DWORD PTR _logpal, 0
; Line 844
	call	_init_palette
; Line 846
	mov	esi, esp
	call	DWORD PTR __imp__GetForegroundWindow@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	ecx, ecx
	cmp	eax, DWORD PTR _hwnd
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_set_focus
	add	esp, 8
; Line 847
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__UpdateWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@WinMain:
; Line 849
	mov	ecx, 1
	test	ecx, ecx
	je	$finished$89220
; Line 855
	call	_toplevel_callback_pending
	test	eax, eax
	jne	SHORT $LN8@WinMain
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__PeekMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN9@WinMain
$LN8@WinMain:
; Line 873
	mov	DWORD PTR _timeout$89206[ebp], 0
; Line 874
	jmp	SHORT $LN7@WinMain
$LN9@WinMain:
; Line 875
	mov	DWORD PTR _timeout$89206[ebp], -1
; Line 877
	mov	esi, esp
	call	DWORD PTR __imp__GetForegroundWindow@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	ecx, ecx
	cmp	eax, DWORD PTR _hwnd
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_set_focus
	add	esp, 8
$LN7@WinMain:
; Line 880
	lea	eax, DWORD PTR _nhandles$89204[ebp]
	push	eax
	call	_handle_get_events
	add	esp, 4
	mov	DWORD PTR _handles$89203[ebp], eax
; Line 883
	mov	esi, esp
	push	1279					; 000004ffH
	mov	ecx, DWORD PTR _timeout$89206[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _handles$89203[ebp]
	push	edx
	mov	eax, DWORD PTR _nhandles$89204[ebp]
	push	eax
	call	DWORD PTR __imp__MsgWaitForMultipleObjects@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$89205[ebp], eax
; Line 885
	mov	ecx, DWORD PTR _n$89205[ebp]
	cmp	ecx, DWORD PTR _nhandles$89204[ebp]
	jae	SHORT $LN6@WinMain
; Line 886
	mov	edx, DWORD PTR _n$89205[ebp]
	mov	eax, DWORD PTR _handles$89203[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_handle_got_event
	add	esp, 4
; Line 887
	mov	edx, DWORD PTR _handles$89203[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 888
	jmp	SHORT $LN5@WinMain
$LN6@WinMain:
; Line 889
	mov	eax, DWORD PTR _handles$89203[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN5@WinMain:
; Line 891
	mov	esi, esp
	push	1
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__PeekMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@WinMain
; Line 892
	cmp	DWORD PTR _msg$[ebp+4], 18		; 00000012H
	jne	SHORT $LN3@WinMain
; Line 893
	jmp	SHORT $finished$89220
$LN3@WinMain:
; Line 895
	mov	esi, esp
	mov	edx, DWORD PTR _logbox
	push	edx
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@WinMain
	mov	esi, esp
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _logbox
	push	ecx
	call	DWORD PTR __imp__IsDialogMessageA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@WinMain
$LN1@WinMain:
; Line 896
	mov	esi, esp
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@WinMain:
; Line 899
	call	_run_toplevel_callbacks
; Line 900
	jmp	$LN11@WinMain
$finished$89220:
; Line 903
	mov	eax, DWORD PTR _msg$[ebp+8]
	push	eax
	call	_cleanup_exit
	add	esp, 4
; Line 904
	mov	eax, DWORD PTR _msg$[ebp+8]
$LN82@WinMain:
; Line 905
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN98@WinMain
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN98@WinMain:
	DD	11					; 0000000bH
	DD	$LN97@WinMain
$LN97@WinMain:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN86@WinMain
	DD	-84					; ffffffacH
	DD	28					; 0000001cH
	DD	$LN87@WinMain
	DD	-136					; ffffff78H
	DD	4
	DD	$LN88@WinMain
	DD	-152					; ffffff68H
	DD	4
	DD	$LN89@WinMain
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN90@WinMain
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN91@WinMain
	DD	-260					; fffffefcH
	DD	16					; 00000010H
	DD	$LN92@WinMain
	DD	-292					; fffffedcH
	DD	16					; 00000010H
	DD	$LN93@WinMain
	DD	-316					; fffffec4H
	DD	16					; 00000010H
	DD	$LN94@WinMain
	DD	-360					; fffffe98H
	DD	28					; 0000001cH
	DD	$LN95@WinMain
	DD	-388					; fffffe7cH
	DD	4
	DD	$LN96@WinMain
$LN96@WinMain:
	DB	110					; 0000006eH
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN95@WinMain:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	0
$LN94@WinMain:
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	0
$LN93@WinMain:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	0
$LN92@WinMain:
	DB	114					; 00000072H
	DB	0
$LN91@WinMain:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	118					; 00000076H
	DB	0
$LN90@WinMain:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	99					; 00000063H
	DB	0
$LN89@WinMain:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN88@WinMain:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN87@WinMain:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN86@WinMain:
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_WinMain@16 ENDP
_TEXT	ENDS
PUBLIC	_set_icon
PUBLIC	_set_title
PUBLIC	__$ArrayPad$
EXTRN	__imp__DeleteMenu@12:PROC
EXTRN	_ldisc_create:PROC
EXTRN	_term_provide_resize_fn:PROC
EXTRN	_sprintf:PROC
EXTRN	_conf_dest:PROC
_BSS	SEGMENT
_session_closed DD 01H DUP (?)
_ldisc	DD	01H DUP (?)
_window_name DD	01H DUP (?)
_icon_name DD	01H DUP (?)
_backhandle DD	01H DUP (?)
_back	DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_str$88974 = -1068					; size = 4
_str$88968 = -1064					; size = 4
_i$ = -1060						; size = 4
_realhost$ = -1052					; size = 4
_title$ = -1044						; size = 4
_msg$ = -1036						; size = 1024
_error$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_start_backend PROC
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 1068				; 0000042cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1068]
	mov	ecx, 267				; 0000010bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 242
	push	2
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	call	_backend_from_proto
	add	esp, 4
	mov	DWORD PTR _back, eax
; Line 243
	cmp	DWORD PTR _back, 0
	jne	SHORT $LN6@start_back
; Line 244
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG88969
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _str$88968[ebp], eax
; Line 246
	mov	esi, esp
	push	48					; 00000030H
	mov	edx, DWORD PTR _str$88968[ebp]
	push	edx
	push	OFFSET $SG88971
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 247
	mov	eax, DWORD PTR _str$88968[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 248
	push	1
	call	_cleanup_exit
	add	esp, 4
$LN6@start_back:
; Line 256
	push	8
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	esi, esp
	push	eax
	push	7
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _realhost$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	0
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_str
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _conf
	push	eax
	push	OFFSET _backhandle
	push	0
	mov	ecx, DWORD PTR _back
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
; Line 257
	mov	esi, esp
	mov	eax, DWORD PTR _logctx
	push	eax
	mov	ecx, DWORD PTR _backhandle
	push	ecx
	mov	edx, DWORD PTR _back
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 258
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@start_back
; Line 259
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG88975
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _str$88974[ebp], eax
; Line 261
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_dest
	add	esp, 4
	push	eax
	push	OFFSET $SG88976
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 262
	mov	esi, esp
	push	16					; 00000010H
	mov	edx, DWORD PTR _str$88974[ebp]
	push	edx
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 263
	mov	ecx, DWORD PTR _str$88974[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 264
	push	0
	call	_exit
$LN5@start_back:
; Line 266
	mov	DWORD PTR _icon_name, 0
	mov	edx, DWORD PTR _icon_name
	mov	DWORD PTR _window_name, edx
; Line 267
	push	90					; 0000005aH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_str
	add	esp, 8
	mov	DWORD PTR _title$[ebp], eax
; Line 268
	mov	ecx, DWORD PTR _title$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN4@start_back
; Line 269
	mov	eax, DWORD PTR _appname
	push	eax
	mov	ecx, DWORD PTR _realhost$[ebp]
	push	ecx
	push	OFFSET $SG88980
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 270
	lea	eax, DWORD PTR _msg$[ebp]
	mov	DWORD PTR _title$[ebp], eax
$LN4@start_back:
; Line 272
	mov	ecx, DWORD PTR _realhost$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 273
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	push	0
	call	_set_title
	add	esp, 8
; Line 274
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	push	0
	call	_set_icon
	add	esp, 8
; Line 279
	mov	ecx, DWORD PTR _backhandle
	push	ecx
	mov	edx, DWORD PTR _back
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_provide_resize_fn
	add	esp, 12					; 0000000cH
; Line 284
	push	0
	mov	edx, DWORD PTR _backhandle
	push	edx
	mov	eax, DWORD PTR _back
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	mov	edx, DWORD PTR _conf
	push	edx
	call	_ldisc_create
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ldisc, eax
; Line 293
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@start_back
$LN2@start_back:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@start_back:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN1@start_back
; Line 294
	mov	esi, esp
	push	0
	push	64					; 00000040H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _popup_menus[ecx*4]
	push	edx
	call	DWORD PTR __imp__DeleteMenu@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 295
	jmp	SHORT $LN2@start_back
$LN1@start_back:
; Line 297
	mov	DWORD PTR _session_closed, 0
$LN8@start_back:
; Line 298
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@start_back
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1068				; 0000042cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@start_back:
	DD	2
	DD	$LN11@start_back
$LN11@start_back:
	DD	-1036					; fffffbf4H
	DD	1024					; 00000400H
	DD	$LN9@start_back
	DD	-1052					; fffffbe4H
	DD	4
	DD	$LN10@start_back
$LN10@start_back:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN9@start_back:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_start_backend ENDP
_TEXT	ENDS
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	_shutdown_help:PROC
EXTRN	_random_save_seed:PROC
EXTRN	_sk_cleanup:PROC
EXTRN	__imp__DeleteObject@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_code$ = 8						; size = 4
_cleanup_exit PROC
; Line 911
	push	ebp
	mov	ebp, esp
	push	esi
; Line 915
	call	_deinit_fonts
; Line 916
	mov	eax, DWORD PTR _logpal
	push	eax
	call	_safefree
	add	esp, 4
; Line 917
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN2@cleanup_ex
; Line 918
	mov	esi, esp
	mov	ecx, DWORD PTR _pal
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@cleanup_ex:
; Line 919
	call	_sk_cleanup
; Line 921
	push	2
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 3
	jne	SHORT $LN1@cleanup_ex
; Line 922
	call	_random_save_seed
$LN1@cleanup_ex:
; Line 927
	call	_shutdown_help
; Line 930
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 932
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	_exit
$LN4@cleanup_ex:
; Line 933
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_cleanup_exit ENDP
_TEXT	ENDS
PUBLIC	_do_select
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -12						; size = 4
_events$ = -8						; size = 4
_msg$ = -4						; size = 4
_skt$ = 8						; size = 4
_startup$ = 12						; size = 4
_do_select PROC
; Line 939
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 941
	cmp	DWORD PTR _startup$[ebp], 0
	je	SHORT $LN8@do_select
; Line 942
	mov	DWORD PTR _msg$[ebp], 32773		; 00008005H
; Line 944
	mov	DWORD PTR _events$[ebp], 63		; 0000003fH
; Line 945
	jmp	SHORT $LN7@do_select
$LN8@do_select:
; Line 946
	mov	DWORD PTR _events$[ebp], 0
	mov	eax, DWORD PTR _events$[ebp]
	mov	DWORD PTR _msg$[ebp], eax
$LN7@do_select:
; Line 948
	cmp	DWORD PTR _hwnd, 0
	jne	SHORT $LN6@do_select
; Line 949
	mov	eax, OFFSET $SG89239
	jmp	SHORT $LN9@do_select
$LN6@do_select:
; Line 950
	mov	esi, esp
	mov	ecx, DWORD PTR _events$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd
	push	eax
	mov	ecx, DWORD PTR _skt$[ebp]
	push	ecx
	call	DWORD PTR _p_WSAAsyncSelect
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN5@do_select
; Line 951
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 10050		; 00002742H
	je	SHORT $LN2@do_select
	jmp	SHORT $LN1@do_select
$LN2@do_select:
; Line 953
	mov	eax, OFFSET $SG89246
	jmp	SHORT $LN9@do_select
$LN1@do_select:
; Line 955
	mov	eax, OFFSET $SG89248
	jmp	SHORT $LN9@do_select
$LN5@do_select:
; Line 958
	xor	eax, eax
$LN9@do_select:
; Line 959
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_do_select ENDP
; Function compile flags: /Odtp /RTCsu
tv71 = -8						; size = 4
_i$ = -4						; size = 4
_update_savedsess_menu PROC
; Line 965
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@update_sav:
; Line 967
	mov	esi, esp
	push	1024					; 00000400H
	push	0
	mov	eax, DWORD PTR _savedsess_menu
	push	eax
	call	DWORD PTR __imp__DeleteMenu@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@update_sav
	jmp	SHORT $LN6@update_sav
$LN5@update_sav:
; Line 972
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@update_sav
$LN3@update_sav:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@update_sav:
	cmp	DWORD PTR _sesslist, 1025		; 00000401H
	jg	SHORT $LN9@update_sav
	mov	edx, DWORD PTR _sesslist
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN10@update_sav
$LN9@update_sav:
	mov	DWORD PTR tv71[ebp], 1025		; 00000401H
$LN10@update_sav:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR tv71[ebp]
	jge	SHORT $LN2@update_sav
; Line 975
	mov	esi, esp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _sesslist+4
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	shl	ecx, 4
	add	ecx, 4096				; 00001000H
	push	ecx
	push	0
	mov	edx, DWORD PTR _savedsess_menu
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@update_sav
$LN2@update_sav:
; Line 976
	cmp	DWORD PTR _sesslist, 1
	jg	SHORT $LN7@update_sav
; Line 977
	mov	esi, esp
	push	OFFSET $SG89260
	push	4096					; 00001000H
	push	1
	mov	eax, DWORD PTR _savedsess_menu
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@update_sav:
; Line 978
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_update_savedsess_menu ENDP
_TEXT	ENDS
PUBLIC	_update_specials_menu
EXTRN	__imp__InsertMenuA@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -24						; size = 4
_nesting$89273 = -20					; size = 4
_saved_menu$89271 = -16					; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_new_menu$ = -4						; size = 4
_frontend$ = 8						; size = 4
_update_specials_menu PROC
; Line 984
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 988
	cmp	DWORD PTR _back, 0
	je	SHORT $LN19@update_spe
; Line 989
	mov	esi, esp
	mov	eax, DWORD PTR _backhandle
	push	eax
	mov	ecx, DWORD PTR _back
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _specials, eax
; Line 990
	jmp	SHORT $LN18@update_spe
$LN19@update_spe:
; Line 991
	mov	DWORD PTR _specials, 0
$LN18@update_spe:
; Line 993
	cmp	DWORD PTR _specials, 0
	je	$LN17@update_spe
; Line 996
	mov	DWORD PTR _saved_menu$89271[ebp], 0
; Line 997
	mov	DWORD PTR _nesting$89273[ebp], 1
; Line 998
	mov	esi, esp
	call	DWORD PTR __imp__CreatePopupMenu@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _new_menu$[ebp], eax
; Line 999
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@update_spe
$LN15@update_spe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@update_spe:
	cmp	DWORD PTR _nesting$89273[ebp], 0
	jle	$LN14@update_spe
; Line 1000
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	add	ecx, 1024				; 00000400H
	cmp	ecx, 2048				; 00000800H
	jl	SHORT $LN22@update_spe
	push	1000					; 000003e8H
	push	OFFSET $SG89278
	push	OFFSET $SG89279
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@update_spe:
; Line 1001
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _specials
	mov	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR tv82[ebp], edx
	cmp	DWORD PTR tv82[ebp], 31			; 0000001fH
	je	SHORT $LN11@update_spe
	cmp	DWORD PTR tv82[ebp], 32			; 00000020H
	je	SHORT $LN10@update_spe
	cmp	DWORD PTR tv82[ebp], 33			; 00000021H
	je	$LN9@update_spe
	jmp	$LN7@update_spe
$LN11@update_spe:
; Line 1003
	mov	esi, esp
	push	0
	push	0
	push	2048					; 00000800H
	mov	eax, DWORD PTR _new_menu$[ebp]
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1004
	jmp	$LN12@update_spe
$LN10@update_spe:
; Line 1006
	cmp	DWORD PTR _nesting$89273[ebp], 2
	jl	SHORT $LN23@update_spe
	push	1006					; 000003eeH
	push	OFFSET $SG89287
	push	OFFSET $SG89288
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@update_spe:
; Line 1007
	mov	edx, DWORD PTR _nesting$89273[ebp]
	add	edx, 1
	mov	DWORD PTR _nesting$89273[ebp], edx
; Line 1008
	mov	eax, DWORD PTR _new_menu$[ebp]
	mov	DWORD PTR _saved_menu$89271[ebp], eax
; Line 1009
	mov	esi, esp
	call	DWORD PTR __imp__CreatePopupMenu@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _new_menu$[ebp], eax
; Line 1011
	mov	esi, esp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _specials
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _new_menu$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _saved_menu$89271[ebp]
	push	edx
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1012
	jmp	SHORT $LN12@update_spe
$LN9@update_spe:
; Line 1014
	mov	eax, DWORD PTR _nesting$89273[ebp]
	sub	eax, 1
	mov	DWORD PTR _nesting$89273[ebp], eax
; Line 1015
	je	SHORT $LN8@update_spe
; Line 1016
	mov	ecx, DWORD PTR _saved_menu$89271[ebp]
	mov	DWORD PTR _new_menu$[ebp], ecx
; Line 1017
	mov	DWORD PTR _saved_menu$89271[ebp], 0
$LN8@update_spe:
; Line 1019
	jmp	SHORT $LN12@update_spe
$LN7@update_spe:
; Line 1022
	mov	esi, esp
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _specials
	mov	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	add	edx, 1024				; 00000400H
	push	edx
	push	0
	mov	eax, DWORD PTR _new_menu$[ebp]
	push	eax
	call	DWORD PTR __imp__AppendMenuA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@update_spe:
; Line 1025
	jmp	$LN15@update_spe
$LN14@update_spe:
; Line 1027
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n_specials, ecx
; Line 1028
	jmp	SHORT $LN6@update_spe
$LN17@update_spe:
; Line 1029
	mov	DWORD PTR _new_menu$[ebp], 0
; Line 1030
	mov	DWORD PTR _n_specials, 0
$LN6@update_spe:
; Line 1033
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@update_spe
$LN4@update_spe:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN5@update_spe:
	cmp	DWORD PTR _j$[ebp], 2
	jae	$LN3@update_spe
; Line 1034
	cmp	DWORD PTR _specials_menu, 0
	je	SHORT $LN2@update_spe
; Line 1036
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _specials_menu
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _popup_menus[ecx*4]
	push	edx
	call	DWORD PTR __imp__DeleteMenu@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1037
	mov	esi, esp
	push	0
	push	512					; 00000200H
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _popup_menus[eax*4]
	push	ecx
	call	DWORD PTR __imp__DeleteMenu@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@update_spe:
; Line 1039
	cmp	DWORD PTR _new_menu$[ebp], 0
	je	SHORT $LN1@update_spe
; Line 1042
	mov	esi, esp
	push	OFFSET $SG89303
	mov	edx, DWORD PTR _new_menu$[ebp]
	push	edx
	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _popup_menus[eax*4]
	push	ecx
	call	DWORD PTR __imp__InsertMenuA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1044
	mov	esi, esp
	push	0
	push	512					; 00000200H
	push	2048					; 00000800H
	push	16					; 00000010H
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _popup_menus[edx*4]
	push	eax
	call	DWORD PTR __imp__InsertMenuA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@update_spe:
; Line 1046
	jmp	$LN4@update_spe
$LN3@update_spe:
; Line 1047
	mov	ecx, DWORD PTR _new_menu$[ebp]
	mov	DWORD PTR _specials_menu, ecx
; Line 1048
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_update_specials_menu ENDP
_TEXT	ENDS
PUBLIC	_set_busy_status
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_status$ = 12						; size = 4
_set_busy_status PROC
; Line 1089
	push	ebp
	mov	ebp, esp
; Line 1090
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR _busy_status, eax
; Line 1091
	call	_update_mouse_pointer
; Line 1092
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_set_busy_status ENDP
_TEXT	ENDS
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__SetClassLongA@12:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -20						; size = 4
$T91912 = -13						; size = 1
_cursor$89336 = -12					; size = 4
_force_visible$ = -8					; size = 4
_curstype$ = -4						; size = 4
_update_mouse_pointer PROC
; Line 1051
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	BYTE PTR $T91912[ebp], 0
; Line 1053
	mov	DWORD PTR _force_visible$[ebp], 0
; Line 1055
	mov	eax, DWORD PTR _busy_status
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN7@update_mou
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@update_mou
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN3@update_mou
	jmp	SHORT $LN2@update_mou
$LN7@update_mou:
; Line 1057
	cmp	DWORD PTR _send_raw_mouse, 0
	je	SHORT $LN6@update_mou
; Line 1058
	mov	BYTE PTR $T91912[ebp], 1
	mov	DWORD PTR _curstype$[ebp], 32512	; 00007f00H
; Line 1059
	jmp	SHORT $LN5@update_mou
$LN6@update_mou:
; Line 1060
	mov	BYTE PTR $T91912[ebp], 1
	mov	DWORD PTR _curstype$[ebp], 32513	; 00007f01H
$LN5@update_mou:
; Line 1061
	jmp	SHORT $LN8@update_mou
$LN4@update_mou:
; Line 1063
	mov	BYTE PTR $T91912[ebp], 1
	mov	DWORD PTR _curstype$[ebp], 32650	; 00007f8aH
; Line 1064
	mov	DWORD PTR _force_visible$[ebp], 1
; Line 1065
	jmp	SHORT $LN8@update_mou
$LN3@update_mou:
; Line 1067
	mov	BYTE PTR $T91912[ebp], 1
	mov	DWORD PTR _curstype$[ebp], 32514	; 00007f02H
; Line 1068
	mov	DWORD PTR _force_visible$[ebp], 1
; Line 1069
	jmp	SHORT $LN8@update_mou
$LN2@update_mou:
; Line 1071
	xor	ecx, ecx
	jne	SHORT $LN8@update_mou
	push	1071					; 0000042fH
	push	OFFSET $SG89334
	push	OFFSET $SG89335
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@update_mou:
; Line 1074
	cmp	BYTE PTR $T91912[ebp], 0
	jne	SHORT $LN13@update_mou
	push	OFFSET $LN14@update_mou
	call	__RTC_UninitUse
	add	esp, 4
$LN13@update_mou:
	mov	esi, esp
	mov	eax, DWORD PTR _curstype$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cursor$89336[ebp], eax
; Line 1075
	mov	esi, esp
	mov	ecx, DWORD PTR _cursor$89336[ebp]
	push	ecx
	push	-12					; fffffff4H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetClassLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1076
	mov	esi, esp
	mov	eax, DWORD PTR _cursor$89336[ebp]
	push	eax
	call	DWORD PTR __imp__SetCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1078
	mov	ecx, DWORD PTR _force_visible$[ebp]
	cmp	ecx, DWORD PTR ?forced_visible@?1??update_mouse_pointer@@9@9
	je	SHORT $LN10@update_mou
; Line 1083
	mov	esi, esp
	mov	edx, DWORD PTR _force_visible$[ebp]
	push	edx
	call	DWORD PTR __imp__ShowCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1084
	mov	eax, DWORD PTR _force_visible$[ebp]
	mov	DWORD PTR ?forced_visible@?1??update_mouse_pointer@@9@9, eax
$LN10@update_mou:
; Line 1086
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@update_mou:
$LN14@update_mou:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_update_mouse_pointer ENDP
_TEXT	ENDS
PUBLIC	_set_raw_mouse_mode
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -4						; size = 4
_frontend$ = 8						; size = 4
_activate$ = 12						; size = 4
_set_raw_mouse_mode PROC
; Line 1098
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1099
	cmp	DWORD PTR _activate$[ebp], 0
	je	SHORT $LN3@set_raw_mo
	push	66					; 00000042H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@set_raw_mo
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@set_raw_mo
$LN3@set_raw_mo:
	mov	DWORD PTR tv69[ebp], 0
$LN4@set_raw_mo:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _activate$[ebp], ecx
; Line 1100
	mov	edx, DWORD PTR _activate$[ebp]
	mov	DWORD PTR _send_raw_mouse, edx
; Line 1101
	call	_update_mouse_pointer
; Line 1102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_set_raw_mouse_mode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_connection_fatal
EXTRN	_queue_toplevel_callback:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	_dupvprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_morestuff$ = -116					; size = 100
_stuff$ = -12						; size = 4
_ap$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_frontend$ = 8						; size = 4
_fmt$ = 12						; size = 4
_connection_fatal PROC
; Line 1108
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1112
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 1113
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _stuff$[ebp], eax
; Line 1114
	mov	DWORD PTR _ap$[ebp], 0
; Line 1115
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG89362
	lea	ecx, DWORD PTR _morestuff$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1116
	mov	esi, esp
	push	16					; 00000010H
	lea	edx, DWORD PTR _morestuff$[ebp]
	push	edx
	mov	eax, DWORD PTR _stuff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1117
	mov	edx, DWORD PTR _stuff$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1119
	push	4
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@connection
; Line 1120
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__PostQuitMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1121
	jmp	SHORT $LN3@connection
$LN2@connection:
; Line 1122
	push	0
	push	OFFSET _close_session
	call	_queue_toplevel_callback
	add	esp, 8
$LN3@connection:
; Line 1124
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@connection
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@connection:
	DD	1
	DD	$LN6@connection
$LN6@connection:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN5@connection
$LN5@connection:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_connection_fatal ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_ldisc_free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -116						; size = 4
_morestuff$ = -108					; size = 100
__$ArrayPad$ = -4					; size = 4
_ignored_context$ = 8					; size = 4
_close_session PROC
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 305
	mov	DWORD PTR _session_closed, 1
; Line 306
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG88993
	lea	ecx, DWORD PTR _morestuff$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 307
	lea	edx, DWORD PTR _morestuff$[ebp]
	push	edx
	push	0
	call	_set_icon
	add	esp, 8
; Line 308
	lea	eax, DWORD PTR _morestuff$[ebp]
	push	eax
	push	0
	call	_set_title
	add	esp, 8
; Line 310
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN5@close_sess
; Line 311
	mov	ecx, DWORD PTR _ldisc
	push	ecx
	call	_ldisc_free
	add	esp, 4
; Line 312
	mov	DWORD PTR _ldisc, 0
$LN5@close_sess:
; Line 314
	cmp	DWORD PTR _back, 0
	je	SHORT $LN4@close_sess
; Line 315
	mov	esi, esp
	mov	edx, DWORD PTR _backhandle
	push	edx
	mov	eax, DWORD PTR _back
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 316
	mov	DWORD PTR _backhandle, 0
; Line 317
	mov	DWORD PTR _back, 0
; Line 318
	push	0
	push	0
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_provide_resize_fn
	add	esp, 12					; 0000000cH
; Line 319
	push	0
	call	_update_specials_menu
	add	esp, 4
$LN4@close_sess:
; Line 326
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@close_sess
$LN2@close_sess:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@close_sess:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN6@close_sess
; Line 327
	mov	esi, esp
	push	0
	push	64					; 00000040H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _popup_menus[ecx*4]
	push	edx
	call	DWORD PTR __imp__DeleteMenu@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 329
	mov	esi, esp
	push	OFFSET $SG89007
	push	64					; 00000040H
	push	0
	push	48					; 00000030H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _popup_menus[eax*4]
	push	ecx
	call	DWORD PTR __imp__InsertMenuA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 330
	jmp	SHORT $LN2@close_sess
$LN6@close_sess:
; Line 331
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@close_sess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@close_sess:
	DD	1
	DD	$LN9@close_sess
$LN9@close_sess:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN8@close_sess
$LN8@close_sess:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_close_session ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_morestuff$ = -116					; size = 100
_stuff$ = -12						; size = 4
_ap$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fmt$ = 8						; size = 4
_cmdline_error PROC
; Line 1130
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1134
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 1135
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _stuff$[ebp], eax
; Line 1136
	mov	DWORD PTR _ap$[ebp], 0
; Line 1137
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG89376
	lea	ecx, DWORD PTR _morestuff$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 1138
	mov	esi, esp
	push	16					; 00000010H
	lea	edx, DWORD PTR _morestuff$[ebp]
	push	edx
	mov	eax, DWORD PTR _stuff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1139
	mov	edx, DWORD PTR _stuff$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1140
	push	1
	call	_exit
$LN2@cmdline_er:
; Line 1141
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@cmdline_er
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@cmdline_er:
	DD	1
	DD	$LN4@cmdline_er
$LN4@cmdline_er:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN3@cmdline_er
$LN3@cmdline_er:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_cmdline_error ENDP
_TEXT	ENDS
EXTRN	_conf_get_int_int:PROC
_BSS	SEGMENT
_defpal	DB	0312H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv159 = -36						; size = 4
tv151 = -32						; size = 4
tv142 = -28						; size = 4
_shade$89400 = -24					; size = 4
_b$89398 = -20						; size = 4
_g$89397 = -16						; size = 4
_r$89396 = -12						; size = 4
_w$89391 = -8						; size = 4
_i$ = -4						; size = 4
_conftopalette PROC
; Line 1158
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1166
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@conftopale
$LN8@conftopale:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@conftopale:
	cmp	DWORD PTR _i$[ebp], 22			; 00000016H
	jge	$LN7@conftopale
; Line 1167
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?ww@?1??conftopalette@@9@9[ecx*4]
	mov	DWORD PTR _w$89391[ebp], edx
; Line 1168
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	push	eax
	push	132					; 00000084H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int_int
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _w$89391[ebp]
	imul	edx, 3
	mov	BYTE PTR _defpal[edx+2], al
; Line 1169
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	add	eax, 1
	push	eax
	push	132					; 00000084H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int_int
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _w$89391[ebp]
	imul	edx, 3
	mov	BYTE PTR _defpal[edx+1], al
; Line 1170
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	add	eax, 2
	push	eax
	push	132					; 00000084H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int_int
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _w$89391[ebp]
	imul	edx, 3
	mov	BYTE PTR _defpal[edx], al
; Line 1171
	jmp	$LN8@conftopale
$LN7@conftopale:
; Line 1172
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@conftopale
$LN5@conftopale:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@conftopale:
	cmp	DWORD PTR _i$[ebp], 240			; 000000f0H
	jge	$LN4@conftopale
; Line 1173
	cmp	DWORD PTR _i$[ebp], 216			; 000000d8H
	jge	$LN3@conftopale
; Line 1174
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, 36					; 00000024H
	idiv	ecx
	mov	DWORD PTR _r$89396[ebp], eax
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _g$89397[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _b$89398[ebp], edx
; Line 1175
	cmp	DWORD PTR _r$89396[ebp], 0
	je	SHORT $LN12@conftopale
	mov	edx, DWORD PTR _r$89396[ebp]
	imul	edx, 40					; 00000028H
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv142[ebp], edx
	jmp	SHORT $LN13@conftopale
$LN12@conftopale:
	mov	DWORD PTR tv142[ebp], 0
$LN13@conftopale:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 3
	mov	cl, BYTE PTR tv142[ebp]
	mov	BYTE PTR _defpal[eax+2], cl
; Line 1176
	cmp	DWORD PTR _g$89397[ebp], 0
	je	SHORT $LN14@conftopale
	mov	edx, DWORD PTR _g$89397[ebp]
	imul	edx, 40					; 00000028H
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv151[ebp], edx
	jmp	SHORT $LN15@conftopale
$LN14@conftopale:
	mov	DWORD PTR tv151[ebp], 0
$LN15@conftopale:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 3
	mov	cl, BYTE PTR tv151[ebp]
	mov	BYTE PTR _defpal[eax+1], cl
; Line 1177
	cmp	DWORD PTR _b$89398[ebp], 0
	je	SHORT $LN16@conftopale
	mov	edx, DWORD PTR _b$89398[ebp]
	imul	edx, 40					; 00000028H
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN17@conftopale
$LN16@conftopale:
	mov	DWORD PTR tv159[ebp], 0
$LN17@conftopale:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 3
	mov	cl, BYTE PTR tv159[ebp]
	mov	BYTE PTR _defpal[eax], cl
; Line 1178
	jmp	SHORT $LN2@conftopale
$LN3@conftopale:
; Line 1179
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 216				; 000000d8H
	mov	DWORD PTR _shade$89400[ebp], edx
; Line 1180
	mov	eax, DWORD PTR _shade$89400[ebp]
	imul	eax, 10					; 0000000aH
	add	eax, 8
	mov	DWORD PTR _shade$89400[ebp], eax
; Line 1182
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 16					; 00000010H
	imul	ecx, 3
	mov	dl, BYTE PTR _shade$89400[ebp]
	mov	BYTE PTR _defpal[ecx], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	imul	eax, 3
	mov	cl, BYTE PTR _shade$89400[ebp]
	mov	BYTE PTR _defpal[eax+1], cl
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 16					; 00000010H
	imul	edx, 3
	mov	al, BYTE PTR _shade$89400[ebp]
	mov	BYTE PTR _defpal[edx+2], al
$LN2@conftopale:
; Line 1184
	jmp	$LN5@conftopale
$LN4@conftopale:
; Line 1187
	push	129					; 00000081H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@conftopale
; Line 1188
	call	_systopalette
$LN10@conftopale:
; Line 1189
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_conftopalette ENDP
_TEXT	ENDS
EXTRN	__imp__GetSysColor@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -20						; size = 4
tv130 = -16						; size = 4
tv82 = -12						; size = 4
_colour$89414 = -8					; size = 4
_i$ = -4						; size = 4
_systopalette PROC
; Line 1198
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1208
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@systopalet
$LN2@systopalet:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@systopalet:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN4@systopalet
; Line 1209
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	esi, esp
	mov	edx, DWORD PTR ?or@?1??systopalette@@9@9[ecx]
	push	edx
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _colour$89414[ebp], eax
; Line 1211
	mov	eax, DWORD PTR _colour$89414[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?or@?1??systopalette@@9@9[ecx+8]
	imul	edx, 3
	mov	al, BYTE PTR tv82[ebp]
	mov	BYTE PTR _defpal[edx+2], al
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ?or@?1??systopalette@@9@9[ecx+4]
	imul	edx, 3
	mov	al, BYTE PTR tv82[ebp]
	mov	BYTE PTR _defpal[edx+2], al
; Line 1213
	movzx	ecx, WORD PTR _colour$89414[ebp]
	sar	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?or@?1??systopalette@@9@9[edx+8]
	imul	eax, 3
	mov	cl, BYTE PTR tv130[ebp]
	mov	BYTE PTR _defpal[eax+1], cl
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR ?or@?1??systopalette@@9@9[edx+4]
	imul	eax, 3
	mov	cl, BYTE PTR tv130[ebp]
	mov	BYTE PTR _defpal[eax+1], cl
; Line 1215
	mov	edx, DWORD PTR _colour$89414[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv143[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?or@?1??systopalette@@9@9[eax+8]
	imul	ecx, 3
	mov	dl, BYTE PTR tv143[ebp]
	mov	BYTE PTR _defpal[ecx], dl
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?or@?1??systopalette@@9@9[eax+4]
	imul	ecx, 3
	mov	dl, BYTE PTR tv143[ebp]
	mov	BYTE PTR _defpal[ecx], dl
; Line 1216
	jmp	$LN2@systopalet
$LN4@systopalet:
; Line 1217
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_systopalette ENDP
_TEXT	ENDS
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__GetStockObject@4:PROC
EXTRN	__imp__RealizePalette@4:PROC
EXTRN	__imp__SelectPalette@12:PROC
EXTRN	__imp__CreatePalette@4:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__GetDC@4:PROC
_BSS	SEGMENT
	ALIGN	4

_colours DD	0106H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_hdc$ = -8						; size = 4
_i$ = -4						; size = 4
_init_palette PROC
; Line 1223
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1225
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 1226
	cmp	DWORD PTR _hdc$[ebp], 0
	je	$LN14@init_palet
; Line 1228
	push	130					; 00000082H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	$LN13@init_palet
	mov	esi, esp
	push	38					; 00000026H
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 256				; 00000100H
	je	$LN13@init_palet
; Line 1235
	push	1
	push	1052					; 0000041cH
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _logpal, eax
; Line 1236
	mov	eax, 768				; 00000300H
	mov	ecx, DWORD PTR _logpal
	mov	WORD PTR [ecx], ax
; Line 1237
	mov	edx, 262				; 00000106H
	mov	eax, DWORD PTR _logpal
	mov	WORD PTR [eax+2], dx
; Line 1238
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@init_palet
$LN11@init_palet:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@init_palet:
	cmp	DWORD PTR _i$[ebp], 262			; 00000106H
	jge	SHORT $LN10@init_palet
; Line 1239
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _logpal
	mov	dl, BYTE PTR _defpal[edx+2]
	mov	BYTE PTR [ecx+eax*4+4], dl
; Line 1240
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _logpal
	mov	al, BYTE PTR _defpal[eax+1]
	mov	BYTE PTR [edx+ecx*4+5], al
; Line 1241
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _logpal
	mov	cl, BYTE PTR _defpal[ecx]
	mov	BYTE PTR [eax+edx*4+6], cl
; Line 1242
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _logpal
	mov	BYTE PTR [eax+edx*4+7], 4
; Line 1243
	jmp	SHORT $LN11@init_palet
$LN10@init_palet:
; Line 1244
	mov	esi, esp
	mov	ecx, DWORD PTR _logpal
	push	ecx
	call	DWORD PTR __imp__CreatePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pal, eax
; Line 1245
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN13@init_palet
; Line 1246
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _pal
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1247
	mov	esi, esp
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1248
	mov	esi, esp
	push	0
	mov	edi, esp
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetStockObject@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@init_palet:
; Line 1251
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@init_palet:
; Line 1253
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN8@init_palet
; Line 1254
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@init_palet
$LN6@init_palet:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@init_palet:
	cmp	DWORD PTR _i$[ebp], 262			; 00000106H
	jge	SHORT $LN5@init_palet
; Line 1257
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	movzx	ecx, BYTE PTR _defpal[eax+2]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	or	ecx, 33554432				; 02000000H
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _colours[edx*4], ecx
	jmp	SHORT $LN6@init_palet
$LN5@init_palet:
; Line 1258
	jmp	SHORT $LN15@init_palet
$LN8@init_palet:
; Line 1259
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@init_palet
$LN2@init_palet:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@init_palet:
	cmp	DWORD PTR _i$[ebp], 262			; 00000106H
	jge	SHORT $LN15@init_palet
; Line 1261
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 3
	movzx	edx, BYTE PTR _defpal[ecx+2]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	movzx	ecx, BYTE PTR _defpal[eax+1]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	movzx	ecx, BYTE PTR _defpal[eax]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _colours[eax*4], edx
	jmp	SHORT $LN2@init_palet
$LN15@init_palet:
; Line 1262
	pop	edi
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_init_palette ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_init_ucs:PROC
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__GetPixel@12:PROC
EXTRN	__imp__ExtTextOutA@32:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__SetBkColor@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__SetTextAlign@8:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__GetCPInfo@8:PROC
EXTRN	__imp__TranslateCharsetInfo@12:PROC
EXTRN	__imp__GetOEMCP@0:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__GetTextMetricsA@8:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	__imp__MulDiv@12:PROC
EXTRN	_conf_get_fontspec:PROC
_BSS	SEGMENT
_fontflag DD	040H DUP (?)
_descent DD	01H DUP (?)
_font_dualwidth DD 01H DUP (?)
_font_varpitch DD 01H DUP (?)
_lfont	DB	03cH DUP (?)
_und_mode DD	01H DUP (?)
_bold_colours DD 01H DUP (?)
_bold_font_mode DD 01H DUP (?)
_fonts	DD	040H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv263 = -232						; size = 4
tv264 = -228						; size = 4
tv195 = -224						; size = 4
tv196 = -220						; size = 4
tv140 = -216						; size = 4
tv141 = -212						; size = 4
_c$89578 = -208						; size = 4
_gotit$89577 = -204					; size = 4
_i$89576 = -200						; size = 4
_und_oldbm$89575 = -196					; size = 4
_und_bm$89574 = -192					; size = 4
_und_dc$89573 = -188					; size = 4
_cset$89567 = -184					; size = 4
_info$89566 = -176					; size = 32
_fw_bold$ = -140					; size = 4
_fw_dontcare$ = -136					; size = 4
_hdc$ = -132						; size = 4
_quality$ = -128					; size = 4
_i$ = -124						; size = 4
_fontsize$ = -116					; size = 12
_font$ = -100						; size = 4
_cpinfo$ = -92						; size = 20
_tm$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
_pick_width$ = 8					; size = 4
_pick_height$ = 12					; size = 4
_init_fonts PROC
; Line 1408
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1418
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN32@init_fonts
$LN31@init_fonts:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN32@init_fonts:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN30@init_fonts
; Line 1419
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fonts[ecx*4], 0
	jmp	SHORT $LN31@init_fonts
$LN30@init_fonts:
; Line 1422
	push	131					; 00000083H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 2
	mov	DWORD PTR _bold_font_mode, eax
; Line 1423
	push	131					; 00000083H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	and	eax, 2
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _bold_colours, eax
; Line 1424
	mov	DWORD PTR _und_mode, 1
; Line 1426
	push	112					; 00000070H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_fontspec
	add	esp, 8
	mov	DWORD PTR _font$[ebp], eax
; Line 1427
	mov	edx, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN29@init_fonts
; Line 1428
	mov	DWORD PTR _fw_dontcare$[ebp], 700	; 000002bcH
; Line 1429
	mov	DWORD PTR _fw_bold$[ebp], 900		; 00000384H
; Line 1430
	jmp	SHORT $LN28@init_fonts
$LN29@init_fonts:
; Line 1431
	mov	DWORD PTR _fw_dontcare$[ebp], 0
; Line 1432
	mov	DWORD PTR _fw_bold$[ebp], 700		; 000002bcH
$LN28@init_fonts:
; Line 1435
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 1437
	cmp	DWORD PTR _pick_height$[ebp], 0
	je	SHORT $LN27@init_fonts
; Line 1438
	mov	ecx, DWORD PTR _pick_height$[ebp]
	mov	DWORD PTR _font_height, ecx
; Line 1439
	jmp	SHORT $LN26@init_fonts
$LN27@init_fonts:
; Line 1440
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _font_height, eax
; Line 1441
	cmp	DWORD PTR _font_height, 0
	jle	SHORT $LN26@init_fonts
; Line 1443
	mov	esi, esp
	push	72					; 00000048H
	mov	edi, esp
	push	90					; 0000005aH
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _font_height
	push	edx
	call	DWORD PTR __imp__MulDiv@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	mov	DWORD PTR _font_height, eax
$LN26@init_fonts:
; Line 1446
	mov	eax, DWORD PTR _pick_width$[ebp]
	mov	DWORD PTR _font_width, eax
; Line 1448
	push	113					; 00000071H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _quality$[ebp], eax
; Line 1455
	cmp	DWORD PTR _quality$[ebp], 0
	jne	SHORT $LN37@init_fonts
	mov	DWORD PTR tv141[ebp], 0
	jmp	SHORT $LN38@init_fonts
$LN37@init_fonts:
	cmp	DWORD PTR _quality$[ebp], 1
	jne	SHORT $LN35@init_fonts
	mov	DWORD PTR tv140[ebp], 4
	jmp	SHORT $LN36@init_fonts
$LN35@init_fonts:
	xor	edx, edx
	cmp	DWORD PTR _quality$[ebp], 2
	setne	dl
	lea	edx, DWORD PTR [edx+edx+3]
	mov	DWORD PTR tv140[ebp], edx
$LN36@init_fonts:
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv141[ebp], eax
$LN38@init_fonts:
	mov	esi, esp
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	1
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _fw_dontcare$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _font_width
	push	ecx
	mov	edx, DWORD PTR _font_height
	push	edx
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fonts, eax
; Line 1457
	mov	esi, esp
	mov	eax, DWORD PTR _fonts
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1458
	mov	esi, esp
	lea	edx, DWORD PTR _tm$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetTextMetricsA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1460
	mov	esi, esp
	push	OFFSET _lfont
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _fonts
	push	ecx
	call	DWORD PTR __imp__GetObjectA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1463
	movzx	edx, BYTE PTR _tm$[ebp+51]
	and	edx, 1
	jne	SHORT $LN24@init_fonts
; Line 1464
	mov	DWORD PTR _font_varpitch, 0
; Line 1465
	mov	eax, DWORD PTR _tm$[ebp+20]
	xor	ecx, ecx
	cmp	eax, DWORD PTR _tm$[ebp+24]
	setne	cl
	mov	DWORD PTR _font_dualwidth, ecx
; Line 1466
	jmp	SHORT $LN23@init_fonts
$LN24@init_fonts:
; Line 1467
	mov	DWORD PTR _font_varpitch, 1
; Line 1468
	mov	DWORD PTR _font_dualwidth, 1
$LN23@init_fonts:
; Line 1470
	cmp	DWORD PTR _pick_width$[ebp], 0
	je	SHORT $LN21@init_fonts
	cmp	DWORD PTR _pick_height$[ebp], 0
	jne	SHORT $LN22@init_fonts
$LN21@init_fonts:
; Line 1471
	mov	edx, DWORD PTR _tm$[ebp]
	mov	DWORD PTR _font_height, edx
; Line 1472
	lea	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	_get_font_width
	add	esp, 8
	mov	DWORD PTR _font_width, eax
$LN22@init_fonts:
; Line 1482
	movzx	edx, BYTE PTR _tm$[ebp+52]
	mov	DWORD PTR _cset$89567[ebp], edx
; Line 1483
	push	32					; 00000020H
	push	255					; 000000ffH
	lea	eax, DWORD PTR _info$89566[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1486
	cmp	DWORD PTR _cset$89567[ebp], 255		; 000000ffH
	jne	SHORT $LN20@init_fonts
; Line 1487
	mov	esi, esp
	call	DWORD PTR __imp__GetOEMCP@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ucsdata+8, eax
; Line 1488
	jmp	SHORT $LN19@init_fonts
$LN20@init_fonts:
; Line 1489
	mov	esi, esp
	push	1
	lea	ecx, DWORD PTR _info$89566[ebp]
	push	ecx
	mov	edx, DWORD PTR _cset$89567[ebp]
	push	edx
	call	DWORD PTR __imp__TranslateCharsetInfo@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN18@init_fonts
; Line 1490
	mov	eax, DWORD PTR _info$89566[ebp+4]
	mov	DWORD PTR _ucsdata+8, eax
; Line 1491
	jmp	SHORT $LN19@init_fonts
$LN18@init_fonts:
; Line 1492
	mov	DWORD PTR _ucsdata+8, -1
$LN19@init_fonts:
; Line 1494
	mov	esi, esp
	lea	ecx, DWORD PTR _cpinfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ucsdata+8
	push	edx
	call	DWORD PTR __imp__GetCPInfo@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1495
	mov	eax, 1
	cmp	eax, DWORD PTR _cpinfo$[ebp]
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _ucsdata+4, ecx
; Line 1498
	cmp	DWORD PTR _quality$[ebp], 0
	jne	SHORT $LN41@init_fonts
	mov	DWORD PTR tv196[ebp], 0
	jmp	SHORT $LN42@init_fonts
$LN41@init_fonts:
	cmp	DWORD PTR _quality$[ebp], 1
	jne	SHORT $LN39@init_fonts
	mov	DWORD PTR tv195[ebp], 4
	jmp	SHORT $LN40@init_fonts
$LN39@init_fonts:
	xor	edx, edx
	cmp	DWORD PTR _quality$[ebp], 2
	setne	dl
	lea	edx, DWORD PTR [edx+edx+3]
	mov	DWORD PTR tv195[ebp], edx
$LN40@init_fonts:
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv196[ebp], eax
$LN42@init_fonts:
	mov	esi, esp
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	1
	mov	eax, DWORD PTR tv196[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	0
	push	1
	push	0
	mov	eax, DWORD PTR _fw_dontcare$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _font_width
	push	ecx
	mov	edx, DWORD PTR _font_height
	push	edx
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fonts+8, eax
; Line 1523
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateCompatibleDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _und_dc$89573[ebp], eax
; Line 1524
	mov	esi, esp
	mov	ecx, DWORD PTR _font_height
	push	ecx
	mov	edx, DWORD PTR _font_width
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _und_bm$89574[ebp], eax
; Line 1525
	mov	esi, esp
	mov	ecx, DWORD PTR _und_bm$89574[ebp]
	push	ecx
	mov	edx, DWORD PTR _und_dc$89573[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _und_oldbm$89575[ebp], eax
; Line 1526
	mov	esi, esp
	mov	eax, DWORD PTR _fonts+8
	push	eax
	mov	ecx, DWORD PTR _und_dc$89573[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1527
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _und_dc$89573[ebp]
	push	edx
	call	DWORD PTR __imp__SetTextAlign@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1528
	mov	esi, esp
	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _und_dc$89573[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1529
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _und_dc$89573[ebp]
	push	ecx
	call	DWORD PTR __imp__SetBkColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1530
	mov	esi, esp
	push	2
	mov	edx, DWORD PTR _und_dc$89573[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1531
	mov	esi, esp
	push	0
	push	1
	push	OFFSET $SG89593
	push	0
	push	2
	push	0
	push	0
	mov	eax, DWORD PTR _und_dc$89573[ebp]
	push	eax
	call	DWORD PTR __imp__ExtTextOutA@32
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1532
	mov	DWORD PTR _gotit$89577[ebp], 0
; Line 1533
	mov	DWORD PTR _i$89576[ebp], 0
	jmp	SHORT $LN16@init_fonts
$LN15@init_fonts:
	mov	ecx, DWORD PTR _i$89576[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$89576[ebp], ecx
$LN16@init_fonts:
	mov	edx, DWORD PTR _i$89576[ebp]
	cmp	edx, DWORD PTR _font_height
	jge	SHORT $LN14@init_fonts
; Line 1534
	mov	esi, esp
	mov	eax, DWORD PTR _i$89576[ebp]
	push	eax
	mov	eax, DWORD PTR _font_width
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _und_dc$89573[ebp]
	push	ecx
	call	DWORD PTR __imp__GetPixel@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$89578[ebp], eax
; Line 1535
	cmp	DWORD PTR _c$89578[ebp], 0
	je	SHORT $LN13@init_fonts
; Line 1536
	mov	DWORD PTR _gotit$89577[ebp], 1
$LN13@init_fonts:
; Line 1537
	jmp	SHORT $LN15@init_fonts
$LN14@init_fonts:
; Line 1538
	mov	esi, esp
	mov	edx, DWORD PTR _und_oldbm$89575[ebp]
	push	edx
	mov	eax, DWORD PTR _und_dc$89573[ebp]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1539
	mov	esi, esp
	mov	ecx, DWORD PTR _und_bm$89574[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1540
	mov	esi, esp
	mov	edx, DWORD PTR _und_dc$89573[ebp]
	push	edx
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1541
	cmp	DWORD PTR _gotit$89577[ebp], 0
	jne	SHORT $LN12@init_fonts
; Line 1542
	mov	DWORD PTR _und_mode, 0
; Line 1543
	mov	esi, esp
	mov	eax, DWORD PTR _fonts+8
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1544
	mov	DWORD PTR _fonts+8, 0
$LN12@init_fonts:
; Line 1548
	cmp	DWORD PTR _bold_font_mode, 2
	jne	$LN11@init_fonts
; Line 1549
	cmp	DWORD PTR _quality$[ebp], 0
	jne	SHORT $LN45@init_fonts
	mov	DWORD PTR tv264[ebp], 0
	jmp	SHORT $LN46@init_fonts
$LN45@init_fonts:
	cmp	DWORD PTR _quality$[ebp], 1
	jne	SHORT $LN43@init_fonts
	mov	DWORD PTR tv263[ebp], 4
	jmp	SHORT $LN44@init_fonts
$LN43@init_fonts:
	xor	ecx, ecx
	cmp	DWORD PTR _quality$[ebp], 2
	setne	cl
	lea	ecx, DWORD PTR [ecx+ecx+3]
	mov	DWORD PTR tv263[ebp], ecx
$LN44@init_fonts:
	mov	edx, DWORD PTR tv263[ebp]
	mov	DWORD PTR tv264[ebp], edx
$LN46@init_fonts:
	mov	esi, esp
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	1
	mov	edx, DWORD PTR tv264[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _fw_bold$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _font_width
	push	eax
	mov	ecx, DWORD PTR _font_height
	push	ecx
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fonts+4, eax
$LN11@init_fonts:
; Line 1553
	mov	edx, DWORD PTR _tm$[ebp+4]
	add	edx, 1
	mov	DWORD PTR _descent, edx
; Line 1554
	mov	eax, DWORD PTR _descent
	cmp	eax, DWORD PTR _font_height
	jl	SHORT $LN10@init_fonts
; Line 1555
	mov	ecx, DWORD PTR _font_height
	sub	ecx, 1
	mov	DWORD PTR _descent, ecx
$LN10@init_fonts:
; Line 1557
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@init_fonts
$LN8@init_fonts:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@init_fonts:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN7@init_fonts
; Line 1558
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _fonts[eax*4], 0
	je	SHORT $LN6@init_fonts
; Line 1559
	mov	esi, esp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _fonts[ecx*4]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@init_fonts
	mov	esi, esp
	lea	ecx, DWORD PTR _tm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetTextMetricsA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@init_fonts
; Line 1560
	lea	eax, DWORD PTR _tm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	_get_font_width
	add	esp, 8
	mov	edx, DWORD PTR _tm$[ebp]
	shl	edx, 8
	add	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fontsize$[ebp+ecx*4], eax
; Line 1561
	jmp	SHORT $LN4@init_fonts
$LN5@init_fonts:
; Line 1562
	mov	edx, DWORD PTR _i$[ebp]
	neg	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fontsize$[ebp+eax*4], edx
$LN4@init_fonts:
; Line 1563
	jmp	SHORT $LN3@init_fonts
$LN6@init_fonts:
; Line 1564
	mov	ecx, DWORD PTR _i$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fontsize$[ebp+edx*4], ecx
$LN3@init_fonts:
; Line 1565
	jmp	$LN8@init_fonts
$LN7@init_fonts:
; Line 1567
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1569
	mov	edx, DWORD PTR _fontsize$[ebp+8]
	cmp	edx, DWORD PTR _fontsize$[ebp]
	je	SHORT $LN2@init_fonts
; Line 1570
	mov	DWORD PTR _und_mode, 0
; Line 1571
	mov	esi, esp
	mov	eax, DWORD PTR _fonts+8
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1572
	mov	DWORD PTR _fonts+8, 0
$LN2@init_fonts:
; Line 1576
	cmp	DWORD PTR _bold_font_mode, 2
	jne	SHORT $LN1@init_fonts
	mov	ecx, DWORD PTR _fontsize$[ebp+4]
	cmp	ecx, DWORD PTR _fontsize$[ebp]
	je	SHORT $LN1@init_fonts
; Line 1577
	mov	DWORD PTR _bold_font_mode, 1
; Line 1578
	mov	esi, esp
	mov	edx, DWORD PTR _fonts+4
	push	edx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1579
	mov	DWORD PTR _fonts+4, 0
$LN1@init_fonts:
; Line 1581
	mov	DWORD PTR _fontflag+8, 1
	mov	eax, DWORD PTR _fontflag+8
	mov	DWORD PTR _fontflag+4, eax
	mov	ecx, DWORD PTR _fontflag+4
	mov	DWORD PTR _fontflag, ecx
; Line 1583
	push	OFFSET _ucsdata
	mov	edx, DWORD PTR _conf
	push	edx
	call	_init_ucs
	add	esp, 8
; Line 1584
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@init_fonts
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN52@init_fonts:
	DD	4
	DD	$LN51@init_fonts
$LN51@init_fonts:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN47@init_fonts
	DD	-92					; ffffffa4H
	DD	20					; 00000014H
	DD	$LN48@init_fonts
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN49@init_fonts
	DD	-176					; ffffff50H
	DD	32					; 00000020H
	DD	$LN50@init_fonts
$LN50@init_fonts:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN49@init_fonts:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN48@init_fonts:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN47@init_fonts:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	0
_init_fonts ENDP
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetCharABCWidthsFloatA@16:PROC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
_width$89534 = -144					; size = 4
_j$89529 = -140						; size = 4
_widths$89528 = -132					; size = 120
_ret$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hdc$ = 8						; size = 4
_tm$ = 12						; size = 4
_get_font_width PROC
; Line 1360
	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1363
	mov	eax, DWORD PTR _tm$[ebp]
	movzx	ecx, BYTE PTR [eax+51]
	and	ecx, 1
	jne	SHORT $LN8@get_font_w
; Line 1364
	mov	edx, DWORD PTR _tm$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _ret$[ebp], eax
; Line 1365
	jmp	$LN1@get_font_w
$LN8@get_font_w:
; Line 1371
	mov	DWORD PTR _font_varpitch, 1
; Line 1372
	mov	DWORD PTR _font_dualwidth, 1
; Line 1373
	mov	esi, esp
	lea	ecx, DWORD PTR _widths$89528[ebp]
	push	ecx
	push	57					; 00000039H
	push	48					; 00000030H
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetCharABCWidthsFloatA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@get_font_w
; Line 1374
	mov	DWORD PTR _ret$[ebp], 0
; Line 1375
	mov	DWORD PTR _j$89529[ebp], 0
	jmp	SHORT $LN5@get_font_w
$LN4@get_font_w:
	mov	eax, DWORD PTR _j$89529[ebp]
	add	eax, 1
	mov	DWORD PTR _j$89529[ebp], eax
$LN5@get_font_w:
	cmp	DWORD PTR _j$89529[ebp], 10		; 0000000aH
	jae	SHORT $LN3@get_font_w
; Line 1377
	mov	ecx, DWORD PTR _j$89529[ebp]
	imul	ecx, 12					; 0000000cH
	fld	DWORD PTR _widths$89528[ebp+ecx]
	fadd	QWORD PTR __real@3fe0000000000000
	mov	edx, DWORD PTR _j$89529[ebp]
	imul	edx, 12					; 0000000cH
	fadd	DWORD PTR _widths$89528[ebp+edx+4]
	mov	eax, DWORD PTR _j$89529[ebp]
	imul	eax, 12					; 0000000cH
	fadd	DWORD PTR _widths$89528[ebp+eax+8]
	call	__ftol2_sse
	mov	DWORD PTR _width$89534[ebp], eax
; Line 1378
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	ecx, DWORD PTR _width$89534[ebp]
	jge	SHORT $LN2@get_font_w
; Line 1379
	mov	edx, DWORD PTR _width$89534[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN2@get_font_w:
; Line 1380
	jmp	SHORT $LN4@get_font_w
$LN3@get_font_w:
; Line 1381
	jmp	SHORT $LN1@get_font_w
$LN6@get_font_w:
; Line 1382
	mov	eax, DWORD PTR _tm$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _ret$[ebp], ecx
$LN1@get_font_w:
; Line 1387
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1388
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_font_w
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@get_font_w:
	DD	1
	DD	$LN12@get_font_w
$LN12@get_font_w:
	DD	-132					; ffffff7cH
	DD	120					; 00000078H
	DD	$LN11@get_font_w
$LN11@get_font_w:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
_get_font_width ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -4						; size = 4
_deinit_fonts PROC
; Line 1640
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1642
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@deinit_fon
$LN3@deinit_fon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@deinit_fon:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN5@deinit_fon
; Line 1643
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _fonts[ecx*4], 0
	je	SHORT $LN1@deinit_fon
; Line 1644
	mov	esi, esp
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _fonts[edx*4]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@deinit_fon:
; Line 1645
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fonts[ecx*4], 0
; Line 1646
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _fontflag[edx*4], 0
; Line 1647
	jmp	SHORT $LN3@deinit_fon
$LN5@deinit_fon:
; Line 1648
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_deinit_fonts ENDP
_TEXT	ENDS
PUBLIC	_request_resize
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__IsZoomed@4:PROC
_BSS	SEGMENT
?ss@?3??request_resize@@9@9 DB 010H DUP (?)		; `request_resize'::`4'::ss
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv79 = -12						; size = 4
_height$ = -8						; size = 4
_width$ = -4						; size = 4
_frontend$ = 8						; size = 4
_w$ = 12						; size = 4
_h$ = 16						; size = 4
_request_resize PROC
; Line 1651
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1655
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN16@request_re
; Line 1656
	push	106					; 0000006aH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@request_re
; Line 1657
	jmp	$LN17@request_re
$LN16@request_re:
; Line 1660
	push	106					; 0000006aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN14@request_re
	jmp	$LN17@request_re
$LN14@request_re:
; Line 1661
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _h$[ebp]
	cmp	ecx, DWORD PTR [eax+296]
	jne	SHORT $LN13@request_re
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _w$[ebp]
	cmp	eax, DWORD PTR [edx+300]
	jne	SHORT $LN13@request_re
	jmp	$LN17@request_re
$LN13@request_re:
; Line 1668
	mov	ecx, DWORD PTR ?first_time@?3??request_resize@@9@9
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN7@request_re
	cmp	DWORD PTR tv79[ebp], 1
	je	SHORT $LN10@request_re
	jmp	$LN11@request_re
$LN10@request_re:
; Line 1671
	push	OFFSET ?ss@?3??request_resize@@9@9
	call	_get_fullscreen_rect
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@request_re
; Line 1673
	jmp	SHORT $LN7@request_re
$LN9@request_re:
; Line 1674
	mov	DWORD PTR ?first_time@?3??request_resize@@9@9, 2
; Line 1675
	jmp	SHORT $LN11@request_re
$LN7@request_re:
; Line 1679
	mov	eax, DWORD PTR ?ss@?3??request_resize@@9@9+8
	sub	eax, DWORD PTR ?ss@?3??request_resize@@9@9
	sub	eax, DWORD PTR _extra_width
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _width$[ebp], eax
; Line 1680
	mov	eax, DWORD PTR ?ss@?3??request_resize@@9@9+12
	sub	eax, DWORD PTR ?ss@?3??request_resize@@9@9+4
	sub	eax, DWORD PTR _extra_height
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	DWORD PTR _height$[ebp], eax
; Line 1682
	mov	edx, DWORD PTR _w$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jg	SHORT $LN5@request_re
	mov	eax, DWORD PTR _h$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jle	SHORT $LN6@request_re
$LN5@request_re:
; Line 1683
	jmp	$LN17@request_re
$LN6@request_re:
; Line 1684
	cmp	DWORD PTR _w$[ebp], 15			; 0000000fH
	jge	SHORT $LN4@request_re
; Line 1685
	mov	DWORD PTR _w$[ebp], 15			; 0000000fH
$LN4@request_re:
; Line 1686
	cmp	DWORD PTR _h$[ebp], 1
	jge	SHORT $LN11@request_re
; Line 1687
	mov	DWORD PTR _h$[ebp], 1
$LN11@request_re:
; Line 1691
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_size
	add	esp, 16					; 00000010H
; Line 1694
	push	106					; 0000006aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 2
	je	SHORT $LN2@request_re
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@request_re
; Line 1695
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR _w$[ebp]
	add	ecx, DWORD PTR _extra_width
	mov	DWORD PTR _width$[ebp], ecx
; Line 1696
	mov	edx, DWORD PTR _font_height
	imul	edx, DWORD PTR _h$[ebp]
	add	edx, DWORD PTR _extra_height
	mov	DWORD PTR _height$[ebp], edx
; Line 1700
	mov	esi, esp
	push	278					; 00000116H
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1701
	jmp	SHORT $LN1@request_re
$LN2@request_re:
; Line 1702
	push	0
	call	_reset_window
	add	esp, 4
$LN1@request_re:
; Line 1704
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@request_re:
; Line 1705
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_request_resize ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
_BSS	SEGMENT
?ss@?N@??reset_window@@9@9 DB 010H DUP (?)		; `reset_window'::`13'::ss
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_height$89718 = -76					; size = 4
_width$89717 = -72					; size = 4
_wr$ = -64						; size = 16
_cr$ = -40						; size = 16
_window_border$ = -20					; size = 4
_resize_action$ = -16					; size = 4
_win_height$ = -12					; size = 4
_win_width$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_reinit$ = 8						; size = 4
_reset_window PROC
; Line 1707
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1723
	mov	esi, esp
	lea	eax, DWORD PTR _wr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1724
	mov	esi, esp
	lea	edx, DWORD PTR _cr$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1726
	mov	ecx, DWORD PTR _cr$[ebp+8]
	sub	ecx, DWORD PTR _cr$[ebp]
	mov	DWORD PTR _win_width$[ebp], ecx
; Line 1727
	mov	edx, DWORD PTR _cr$[ebp+12]
	sub	edx, DWORD PTR _cr$[ebp+4]
	mov	DWORD PTR _win_height$[ebp], edx
; Line 1729
	push	106					; 0000006aH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _resize_action$[ebp], eax
; Line 1730
	push	122					; 0000007aH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _window_border$[ebp], eax
; Line 1732
	cmp	DWORD PTR _resize_action$[ebp], 1
	jne	SHORT $LN32@reset_wind
; Line 1733
	mov	DWORD PTR _reinit$[ebp], 2
$LN32@reset_wind:
; Line 1736
	cmp	DWORD PTR _reinit$[ebp], 1
	jle	SHORT $LN31@reset_wind
; Line 1740
	call	_deinit_fonts
; Line 1741
	push	0
	push	0
	call	_init_fonts
	add	esp, 8
$LN31@reset_wind:
; Line 1745
	cmp	DWORD PTR _win_width$[ebp], 0
	je	SHORT $LN29@reset_wind
	cmp	DWORD PTR _win_height$[ebp], 0
	jne	SHORT $LN30@reset_wind
$LN29@reset_wind:
; Line 1746
	jmp	$LN33@reset_wind
$LN30@reset_wind:
; Line 1751
	cmp	DWORD PTR _reinit$[ebp], 0
	jne	$LN28@reset_wind
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	mov	ecx, DWORD PTR _win_width$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _offset_width, eax
	jne	SHORT $LN27@reset_wind
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_height
	imul	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _win_height$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _offset_height, eax
	je	SHORT $LN28@reset_wind
$LN27@reset_wind:
; Line 1752
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	mov	ecx, DWORD PTR _win_width$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_width, eax
; Line 1753
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_height
	imul	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _win_height$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_height, eax
; Line 1754
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@reset_wind:
; Line 1760
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN26@reset_wind
; Line 1765
	mov	ecx, DWORD PTR _wr$[ebp+8]
	sub	ecx, DWORD PTR _wr$[ebp]
	sub	ecx, DWORD PTR _cr$[ebp+8]
	add	ecx, DWORD PTR _cr$[ebp]
	mov	DWORD PTR _extra_width, ecx
; Line 1766
	mov	edx, DWORD PTR _wr$[ebp+12]
	sub	edx, DWORD PTR _wr$[ebp+4]
	sub	edx, DWORD PTR _cr$[ebp+12]
	add	edx, DWORD PTR _cr$[ebp+4]
	mov	DWORD PTR _extra_height, edx
; Line 1768
	cmp	DWORD PTR _resize_action$[ebp], 0
	je	$LN25@reset_wind
; Line 1770
	mov	ecx, DWORD PTR _term
	mov	eax, DWORD PTR _win_width$[ebp]
	cdq
	idiv	DWORD PTR [ecx+300]
	cmp	DWORD PTR _font_width, eax
	jne	SHORT $LN23@reset_wind
	mov	ecx, DWORD PTR _term
	mov	eax, DWORD PTR _win_height$[ebp]
	cdq
	idiv	DWORD PTR [ecx+296]
	cmp	DWORD PTR _font_height, eax
	je	$LN24@reset_wind
$LN23@reset_wind:
; Line 1771
	call	_deinit_fonts
; Line 1772
	mov	ecx, DWORD PTR _term
	mov	eax, DWORD PTR _win_height$[ebp]
	cdq
	idiv	DWORD PTR [ecx+296]
	push	eax
	mov	ecx, DWORD PTR _term
	mov	eax, DWORD PTR _win_width$[ebp]
	cdq
	idiv	DWORD PTR [ecx+300]
	push	eax
	call	_init_fonts
	add	esp, 8
; Line 1773
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	mov	ecx, DWORD PTR _win_width$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_width, eax
; Line 1774
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_height
	imul	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _win_height$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_height, eax
; Line 1775
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@reset_wind:
; Line 1781
	jmp	$LN22@reset_wind
$LN25@reset_wind:
; Line 1783
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR [eax+300]
	cmp	ecx, DWORD PTR _win_width$[ebp]
	jne	SHORT $LN20@reset_wind
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_height
	imul	eax, DWORD PTR [edx+296]
	cmp	eax, DWORD PTR _win_height$[ebp]
	je	$LN22@reset_wind
$LN20@reset_wind:
; Line 1788
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _win_width$[ebp]
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	mov	eax, DWORD PTR _win_height$[ebp]
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_size
	add	esp, 16					; 00000010H
; Line 1789
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR [eax+300]
	mov	eax, DWORD PTR _win_width$[ebp]
	sub	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_width, eax
; Line 1790
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_height
	imul	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _win_height$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_height, eax
; Line 1791
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@reset_wind:
; Line 1797
	jmp	$LN33@reset_wind
$LN26@reset_wind:
; Line 1803
	cmp	DWORD PTR _reinit$[ebp], 0
	jle	$LN19@reset_wind
; Line 1808
	mov	eax, DWORD PTR _window_border$[ebp]
	mov	DWORD PTR _offset_height, eax
	mov	ecx, DWORD PTR _offset_height
	mov	DWORD PTR _offset_width, ecx
; Line 1809
	mov	edx, DWORD PTR _wr$[ebp+8]
	sub	edx, DWORD PTR _wr$[ebp]
	sub	edx, DWORD PTR _cr$[ebp+8]
	add	edx, DWORD PTR _cr$[ebp]
	mov	eax, DWORD PTR _offset_width
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _extra_width, ecx
; Line 1810
	mov	edx, DWORD PTR _wr$[ebp+12]
	sub	edx, DWORD PTR _wr$[ebp+4]
	sub	edx, DWORD PTR _cr$[ebp+12]
	add	edx, DWORD PTR _cr$[ebp+4]
	mov	eax, DWORD PTR _offset_height
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _extra_height, ecx
; Line 1813
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	mov	ecx, DWORD PTR _offset_width
	lea	edx, DWORD PTR [eax+ecx*2]
	cmp	DWORD PTR _win_width$[ebp], edx
	jne	SHORT $LN17@reset_wind
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_height
	imul	ecx, DWORD PTR [eax+296]
	mov	edx, DWORD PTR _offset_height
	lea	eax, DWORD PTR [ecx+edx*2]
	cmp	DWORD PTR _win_height$[ebp], eax
	je	SHORT $LN18@reset_wind
$LN17@reset_wind:
; Line 1822
	mov	esi, esp
	push	6
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_height
	imul	edx, DWORD PTR [ecx+296]
	add	edx, DWORD PTR _extra_height
	push	edx
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR [eax+300]
	add	ecx, DWORD PTR _extra_width
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@reset_wind:
; Line 1825
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1826
	jmp	$LN33@reset_wind
$LN19@reset_wind:
; Line 1835
	cmp	DWORD PTR _resize_action$[ebp], 0
	jne	SHORT $LN14@reset_wind
	cmp	DWORD PTR _reinit$[ebp], 0
	jle	SHORT $LN15@reset_wind
$LN14@reset_wind:
	cmp	DWORD PTR _resize_action$[ebp], 3
	jne	SHORT $LN13@reset_wind
	cmp	DWORD PTR _reinit$[ebp], 0
	jl	SHORT $LN15@reset_wind
$LN13@reset_wind:
	cmp	DWORD PTR _reinit$[ebp], 0
	jle	$LN16@reset_wind
$LN15@reset_wind:
; Line 1836
	mov	ecx, DWORD PTR _window_border$[ebp]
	mov	DWORD PTR _offset_height, ecx
	mov	edx, DWORD PTR _offset_height
	mov	DWORD PTR _offset_width, edx
; Line 1837
	mov	eax, DWORD PTR _wr$[ebp+8]
	sub	eax, DWORD PTR _wr$[ebp]
	sub	eax, DWORD PTR _cr$[ebp+8]
	add	eax, DWORD PTR _cr$[ebp]
	mov	ecx, DWORD PTR _offset_width
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _extra_width, edx
; Line 1838
	mov	eax, DWORD PTR _wr$[ebp+12]
	sub	eax, DWORD PTR _wr$[ebp+4]
	sub	eax, DWORD PTR _cr$[ebp+12]
	add	eax, DWORD PTR _cr$[ebp+4]
	mov	ecx, DWORD PTR _offset_height
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _extra_height, edx
; Line 1841
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR _offset_width
	lea	eax, DWORD PTR [ecx+edx*2]
	cmp	DWORD PTR _win_width$[ebp], eax
	jne	SHORT $LN11@reset_wind
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_height
	imul	edx, DWORD PTR [ecx+296]
	mov	eax, DWORD PTR _offset_height
	lea	ecx, DWORD PTR [edx+eax*2]
	cmp	DWORD PTR _win_height$[ebp], ecx
	je	$LN12@reset_wind
$LN11@reset_wind:
; Line 1846
	push	OFFSET ?ss@?N@??reset_window@@9@9
	call	_get_fullscreen_rect
	add	esp, 4
; Line 1848
	mov	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+8
	sub	eax, DWORD PTR ?ss@?N@??reset_window@@9@9
	sub	eax, DWORD PTR _extra_width
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _width$89717[ebp], eax
; Line 1849
	mov	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+12
	sub	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+4
	sub	eax, DWORD PTR _extra_height
	cdq
	idiv	DWORD PTR _font_height
	mov	DWORD PTR _height$89718[ebp], eax
; Line 1852
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	cmp	eax, DWORD PTR _height$89718[ebp]
	jg	SHORT $LN9@reset_wind
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR [ecx+300]
	cmp	edx, DWORD PTR _width$89717[ebp]
	jle	$LN10@reset_wind
$LN9@reset_wind:
; Line 1853
	cmp	DWORD PTR _resize_action$[ebp], 3
	jne	$LN8@reset_wind
; Line 1855
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR [eax+300]
	cmp	ecx, DWORD PTR _width$89717[ebp]
	jle	SHORT $LN7@reset_wind
; Line 1857
	mov	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+8
	sub	eax, DWORD PTR ?ss@?N@??reset_window@@9@9
	sub	eax, DWORD PTR _extra_width
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+300]
	mov	DWORD PTR _font_width, eax
$LN7@reset_wind:
; Line 1858
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	cmp	eax, DWORD PTR _height$89718[ebp]
	jle	SHORT $LN6@reset_wind
; Line 1860
	mov	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+12
	sub	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+4
	sub	eax, DWORD PTR _extra_height
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+296]
	mov	DWORD PTR _font_height, eax
$LN6@reset_wind:
; Line 1862
	call	_deinit_fonts
; Line 1863
	mov	edx, DWORD PTR _font_height
	push	edx
	mov	eax, DWORD PTR _font_width
	push	eax
	call	_init_fonts
	add	esp, 8
; Line 1865
	mov	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+8
	sub	eax, DWORD PTR ?ss@?N@??reset_window@@9@9
	sub	eax, DWORD PTR _extra_width
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _width$89717[ebp], eax
; Line 1866
	mov	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+12
	sub	eax, DWORD PTR ?ss@?N@??reset_window@@9@9+4
	sub	eax, DWORD PTR _extra_height
	cdq
	idiv	DWORD PTR _font_height
	mov	DWORD PTR _height$89718[ebp], eax
; Line 1867
	jmp	SHORT $LN10@reset_wind
$LN8@reset_wind:
; Line 1868
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _height$89718[ebp]
	cmp	edx, DWORD PTR [ecx+296]
	jle	SHORT $LN4@reset_wind
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR _height$89718[ebp], ecx
$LN4@reset_wind:
; Line 1869
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _width$89717[ebp]
	cmp	eax, DWORD PTR [edx+300]
	jle	SHORT $LN3@reset_wind
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR [ecx+300]
	mov	DWORD PTR _width$89717[ebp], edx
$LN3@reset_wind:
; Line 1871
	push	91					; 0000005bH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _width$89717[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$89718[ebp]
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_size
	add	esp, 16					; 00000010H
$LN10@reset_wind:
; Line 1882
	mov	esi, esp
	push	6
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_height
	imul	edx, DWORD PTR [ecx+296]
	add	edx, DWORD PTR _extra_height
	push	edx
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR [eax+300]
	add	ecx, DWORD PTR _extra_width
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1884
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@reset_wind:
; Line 1891
	jmp	$LN33@reset_wind
$LN16@reset_wind:
; Line 1897
	mov	ecx, DWORD PTR _window_border$[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _win_width$[ebp]
	sub	eax, ecx
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+300]
	cmp	DWORD PTR _font_width, eax
	jne	SHORT $LN1@reset_wind
	mov	edx, DWORD PTR _window_border$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _win_height$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+296]
	cmp	DWORD PTR _font_height, eax
	je	$LN33@reset_wind
$LN1@reset_wind:
; Line 1899
	call	_deinit_fonts
; Line 1901
	mov	edx, DWORD PTR _window_border$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _win_height$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+296]
	push	eax
	mov	edx, DWORD PTR _window_border$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _win_width$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+300]
	push	eax
	call	_init_fonts
	add	esp, 8
; Line 1902
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	mov	ecx, DWORD PTR _win_width$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_width, eax
; Line 1903
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_height
	imul	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _win_height$[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset_height, eax
; Line 1905
	mov	edx, DWORD PTR _wr$[ebp+8]
	sub	edx, DWORD PTR _wr$[ebp]
	sub	edx, DWORD PTR _cr$[ebp+8]
	add	edx, DWORD PTR _cr$[ebp]
	mov	eax, DWORD PTR _offset_width
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _extra_width, ecx
; Line 1906
	mov	edx, DWORD PTR _wr$[ebp+12]
	sub	edx, DWORD PTR _wr$[ebp+4]
	sub	edx, DWORD PTR _cr$[ebp+12]
	add	edx, DWORD PTR _cr$[ebp+4]
	mov	eax, DWORD PTR _offset_height
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _extra_height, ecx
; Line 1908
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@reset_wind:
; Line 1914
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@reset_wind
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN38@reset_wind:
	DD	2
	DD	$LN37@reset_wind
$LN37@reset_wind:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN35@reset_wind
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN36@reset_wind
$LN36@reset_wind:
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	0
$LN35@reset_wind:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	0
_reset_window ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetLocaleInfoA@16:PROC
_BSS	SEGMENT
_kbd_codepage DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_lbuf$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_kl$ = 8						; size = 4
_set_input_locale PROC
; Line 1917
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1921
	mov	esi, esp
	push	20					; 00000014H
	lea	eax, DWORD PTR _lbuf$[ebp]
	push	eax
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _kl$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	push	edx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1923
	lea	eax, DWORD PTR _lbuf$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _kbd_codepage, eax
; Line 1924
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@set_input_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@set_input_:
	DD	1
	DD	$LN4@set_input_
$LN4@set_input_:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@set_input_
$LN3@set_input_:
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_set_input_locale ENDP
_TEXT	ENDS
PUBLIC	_notify_remote_exit
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_close_on_exit$ = -8					; size = 4
_exitcode$ = -4						; size = 4
_fe$ = 8						; size = 4
_notify_remote_exit PROC
; Line 1999
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2003
	cmp	DWORD PTR _session_closed, 0
	jne	$LN6@notify_rem
	mov	esi, esp
	mov	eax, DWORD PTR _backhandle
	push	eax
	mov	ecx, DWORD PTR _back
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _exitcode$[ebp], eax
	cmp	DWORD PTR _exitcode$[ebp], 0
	jl	$LN6@notify_rem
; Line 2004
	push	4
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _close_on_exit$[ebp], eax
; Line 2008
	cmp	DWORD PTR _close_on_exit$[ebp], 0
	je	SHORT $LN3@notify_rem
	cmp	DWORD PTR _close_on_exit$[ebp], 2
	jne	SHORT $LN4@notify_rem
	cmp	DWORD PTR _exitcode$[ebp], 2147483647	; 7fffffffH
	je	SHORT $LN4@notify_rem
$LN3@notify_rem:
; Line 2009
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2010
	jmp	SHORT $LN6@notify_rem
$LN4@notify_rem:
; Line 2011
	push	0
	push	OFFSET _close_session
	call	_queue_toplevel_callback
	add	esp, 8
; Line 2012
	mov	DWORD PTR _session_closed, 1
; Line 2016
	cmp	DWORD PTR _exitcode$[ebp], 2147483647	; 7fffffffH
	je	SHORT $LN6@notify_rem
; Line 2018
	mov	esi, esp
	push	64					; 00000040H
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG89794
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@notify_rem:
; Line 2021
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_notify_remote_exit ENDP
_TEXT	ENDS
PUBLIC	_timer_change_notify
EXTRN	__imp__SetTimer@16:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	__imp__GetTickCount@0:PROC
_BSS	SEGMENT
_timing_next_time DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_ticks$ = -8						; size = 4
_now$ = -4						; size = 4
_next$ = 8						; size = 4
_timer_change_notify PROC
; Line 2024
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2025
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _now$[ebp], eax
; Line 2027
	mov	eax, DWORD PTR _now$[ebp]
	sub	eax, DWORD PTR _next$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jae	SHORT $LN2@timer_chan
; Line 2028
	mov	DWORD PTR _ticks$[ebp], 0
; Line 2029
	jmp	SHORT $LN1@timer_chan
$LN2@timer_chan:
; Line 2030
	mov	ecx, DWORD PTR _next$[ebp]
	sub	ecx, DWORD PTR _now$[ebp]
	mov	DWORD PTR _ticks$[ebp], ecx
$LN1@timer_chan:
; Line 2031
	mov	esi, esp
	push	1234					; 000004d2H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__KillTimer@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2032
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ticks$[ebp]
	push	eax
	push	1234					; 000004d2H
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SetTimer@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2033
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _timing_next_time, edx
; Line 2034
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_timer_change_notify ENDP
; Function compile flags: /Odtp /RTCsu
_conf_cache_data PROC
; Line 2037
	push	ebp
	mov	ebp, esp
; Line 2039
	push	95					; 0000005fH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _cursor_type, eax
; Line 2040
	push	139					; 0000008bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _vtmode, eax
; Line 2041
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_conf_cache_data ENDP
_TEXT	ENDS
PUBLIC	_free_ctx
PUBLIC	_get_ctx
PUBLIC	_request_paste
PUBLIC	__$ArrayPad$
EXTRN	__imp__ScreenToClient@8:PROC
EXTRN	_abs:PROC
EXTRN	__imp__GetKeyboardState@4:PROC
EXTRN	_term_do_paste:PROC
EXTRN	_term_invalidate:PROC
EXTRN	_lpage_send:PROC
EXTRN	_free:PROC
EXTRN	_luni_send:PROC
EXTRN	_ImmGetCompositionStringW@16:PROC
EXTRN	_ImmReleaseContext@8:PROC
EXTRN	_ImmSetCompositionFontA@8:PROC
EXTRN	_ImmGetContext@4:PROC
EXTRN	_term_seen_key_event:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__UpdateColors@4:PROC
EXTRN	__imp__GetScrollInfo@12:PROC
EXTRN	_term_scroll:PROC
EXTRN	_UpdateSizeTip:PROC
EXTRN	_EnableSizeTip:PROC
EXTRN	__imp__DestroyCaret@0:PROC
EXTRN	_term_update:PROC
EXTRN	__imp__ShowCaret@4:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__Rectangle@20:PROC
EXTRN	__imp__ExcludeClipRect@20:PROC
EXTRN	__imp__IntersectClipRect@20:PROC
EXTRN	__imp__CreatePen@12:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	_term_paint:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__HideCaret@4:PROC
EXTRN	_term_deselect:PROC
EXTRN	__imp__GetCapture@0:PROC
EXTRN	_noise_ultralight:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	_term_mouse:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__TrackPopupMenu@28:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	_launch_help:PROC
EXTRN	_showabout:PROC
EXTRN	_term_clrsb:PROC
EXTRN	_term_copyall:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	_force_normal:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__GetWindowLongA@8:PROC
EXTRN	_term_reconfig:PROC
EXTRN	_ldisc_send:PROC
EXTRN	_ldisc_configure:PROC
EXTRN	_log_reconfig:PROC
EXTRN	__imp__EnableMenuItem@12:PROC
EXTRN	_conf_free:PROC
EXTRN	_do_reconfig:PROC
EXTRN	_conf_copy:PROC
EXTRN	_term_pwron:PROC
EXTRN	_logevent:PROC
EXTRN	__imp__CreateProcessA@40:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	_conf_serialise:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
EXTRN	_conf_serialised_size:PROC
EXTRN	_showeventlog:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	_run_timers:PROC
_BSS	SEGMENT
_prev_cols DD	01H DUP (?)
_prev_rows DD	01H DUP (?)
_resizing DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv1535 = -3132						; size = 4
tv1519 = -3128						; size = 4
tv1512 = -3124						; size = 4
tv1243 = -3120						; size = 4
tv1143 = -3116						; size = 4
tv784 = -3112						; size = 4
tv768 = -3108						; size = 4
tv690 = -3104						; size = 4
tv674 = -3100						; size = 4
tv647 = -3096						; size = 4
tv631 = -3092						; size = 4
tv530 = -3088						; size = 4
tv409 = -3084						; size = 4
tv235 = -3080						; size = 4
tv130 = -3076						; size = 4
tv64 = -3072						; size = 4
_p$90336 = -3064					; size = 8
_b$90329 = -3052					; size = 4
_keys$90323 = -3044					; size = 256
_control_pressed$90313 = -2784				; size = 4
_shift_pressed$90312 = -2780				; size = 4
_c$90304 = -2776					; size = 4
_c$90298 = -2765					; size = 1
_c$90294 = -2753					; size = 1
_buf$90291 = -2744					; size = 2
_ls$90284 = -2736					; size = 2
_hs$90281 = -2732					; size = 2
_i$90274 = -2728					; size = 4
_buff$90268 = -2724					; size = 4
_n$90267 = -2720					; size = 4
_hIMC$90266 = -2716					; size = 4
_hImc$90264 = -2712					; size = 4
_m$90255 = -2704					; size = 28
_len$90252 = -2672					; size = 4
_buf$90251 = -2664					; size = 20
_hdc$90246 = -2640					; size = 4
_hdc$90239 = -2636					; size = 4
_si$90231 = -2628					; size = 28
_window_border$90188 = -2596				; size = 4
_h$90187 = -2592					; size = 4
_w$90186 = -2588					; size = 4
_height$90185 = -2584					; size = 4
_width$90184 = -2580					; size = 4
_r$90162 = -2576					; size = 4
_ex_height$90161 = -2572				; size = 4
_ex_width$90160 = -2568					; size = 4
_window_border$90159 = -2564				; size = 4
_rv$90158 = -2560					; size = 4
_h$90157 = -2556					; size = 4
_w$90156 = -2552					; size = 4
_height$90155 = -2548					; size = 4
_width$90154 = -2544					; size = 4
_r$90135 = -2540					; size = 4
_eh$90134 = -2536					; size = 4
_ew$90133 = -2532					; size = 4
_h$90132 = -2528					; size = 4
_w$90131 = -2524					; size = 4
_height$90130 = -2520					; size = 4
_width$90129 = -2516					; size = 4
_params$90117 = -2512					; size = 4
_oldpen$90115 = -2508					; size = 4
_edge$90114 = -2504					; size = 4
_oldbrush$90113 = -2500					; size = 4
_fillcolour$90112 = -2496				; size = 4
_p$90108 = -2488					; size = 64
_b$90068 = -2420					; size = 4
_mi$89995 = -2412					; size = 40
_mon$89994 = -2368					; size = 4
_pt$89993 = -2360					; size = 8
_mouse_on_hotspot$89992 = -2345				; size = 1
_press$89980 = -2344					; size = 4
_button$89979 = -2340					; size = 4
_cursorpos$89977 = -2332				; size = 8
_i$89971 = -2320					; size = 4
_prev_font$89950 = -2316				; size = 4
_font$89949 = -2312					; size = 4
_exflag$89926 = -2308					; size = 4
_nexflag$89925 = -2304					; size = 4
_flag$89924 = -2300					; size = 4
_nflg$89923 = -2296					; size = 4
_i$89909 = -2292					; size = 4
_reconfig_result$89905 = -2288				; size = 4
_init_lvl$89904 = -2284					; size = 4
_prev_conf$89903 = -2280				; size = 4
_session$89882 = -2276					; size = 4
_sessno$89879 = -2272					; size = 4
_size$89866 = -2268					; size = 4
_p$89865 = -2264					; size = 4
_sa$89864 = -2256					; size = 12
_filemap$89861 = -2240					; size = 4
_pi$89860 = -2232					; size = 16
_si$89859 = -2208					; size = 68
_inherit_handles$89858 = -2136				; size = 4
_freecl$89857 = -2132					; size = 4
_cl$89856 = -2128					; size = 4
_c$89855 = -2120					; size = 30
_b$89854 = -2080					; size = 2048
_str$89838 = -28					; size = 4
_next$89833 = -20					; size = 4
_resize_action$ = -12					; size = 4
_hdc$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_WndProc@16 PROC
; Line 2045
	push	ebp
	mov	ebp, esp
	sub	esp, 3132				; 00000c3cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3132]
	mov	ecx, 783				; 0000030fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2054
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 257		; 00000101H
	ja	SHORT $LN282@WndProc
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	jae	$LN49@WndProc
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 159		; 0000009fH
	ja	$LN16@WndProc
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN287@WndProc[edx]
	jmp	DWORD PTR $LN310@WndProc[eax*4]
$LN282@WndProc:
	cmp	DWORD PTR tv64[ebp], 269		; 0000010dH
	ja	SHORT $LN283@WndProc
	cmp	DWORD PTR tv64[ebp], 269		; 0000010dH
	je	$LN40@WndProc
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 258				; 00000102H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 4
	ja	$LN16@WndProc
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN311@WndProc[edx*4]
$LN283@WndProc:
	cmp	DWORD PTR tv64[ebp], 512		; 00000200H
	ja	SHORT $LN284@WndProc
	cmp	DWORD PTR tv64[ebp], 512		; 00000200H
	je	$LN155@WndProc
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 271				; 0000010fH
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 8
	ja	$LN16@WndProc
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN312@WndProc[ecx*4]
$LN284@WndProc:
	cmp	DWORD PTR tv64[ebp], 775		; 00000307H
	ja	SHORT $LN285@WndProc
	cmp	DWORD PTR tv64[ebp], 775		; 00000307H
	je	$LN143@WndProc
	mov	edx, DWORD PTR tv64[ebp]
	sub	edx, 513				; 00000201H
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 133		; 00000085H
	ja	$LN16@WndProc
	mov	eax, DWORD PTR tv64[ebp]
	movzx	ecx, BYTE PTR $LN288@WndProc[eax]
	jmp	DWORD PTR $LN313@WndProc[ecx*4]
$LN285@WndProc:
	cmp	DWORD PTR tv64[ebp], 32770		; 00008002H
	ja	SHORT $LN286@WndProc
	cmp	DWORD PTR tv64[ebp], 32770		; 00008002H
	je	$LN144@WndProc
	cmp	DWORD PTR tv64[ebp], 783		; 0000030fH
	je	$LN53@WndProc
	cmp	DWORD PTR tv64[ebp], 785		; 00000311H
	je	$LN57@WndProc
	jmp	$LN16@WndProc
$LN286@WndProc:
	mov	edx, DWORD PTR tv64[ebp]
	sub	edx, 32771				; 00008003H
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 3
	ja	$LN16@WndProc
	mov	eax, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN314@WndProc[eax*4]
$LN251@WndProc:
; Line 2056
	cmp	DWORD PTR _wParam$[ebp], 1234		; 000004d2H
	jne	SHORT $LN250@WndProc
; Line 2059
	mov	esi, esp
	push	1234					; 000004d2H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__KillTimer@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2060
	lea	edx, DWORD PTR _next$89833[ebp]
	push	edx
	mov	eax, DWORD PTR _timing_next_time
	push	eax
	call	_run_timers
	add	esp, 8
	test	eax, eax
	je	SHORT $LN250@WndProc
; Line 2061
	mov	ecx, DWORD PTR _next$89833[ebp]
	push	ecx
	call	_timer_change_notify
	add	esp, 4
$LN250@WndProc:
; Line 2065
	xor	eax, eax
	jmp	$LN254@WndProc
$LN247@WndProc:
; Line 2067
	jmp	$LN252@WndProc
$LN246@WndProc:
; Line 2071
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2072
	mov	edx, DWORD PTR _appname
	push	edx
	push	OFFSET $SG89839
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _str$89838[ebp], eax
; Line 2077
	cmp	DWORD PTR _session_closed, 0
	jne	SHORT $LN244@WndProc
	push	5
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN244@WndProc
	mov	esi, esp
	push	49					; 00000031H
	mov	ecx, DWORD PTR _str$89838[ebp]
	push	ecx
	push	OFFSET $SG89842
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN245@WndProc
$LN244@WndProc:
; Line 2078
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN245@WndProc:
; Line 2079
	mov	ecx, DWORD PTR _str$89838[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 2081
	xor	eax, eax
	jmp	$LN254@WndProc
$LN243@WndProc:
; Line 2083
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2084
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2085
	xor	eax, eax
	jmp	$LN254@WndProc
$LN242@WndProc:
; Line 2087
	mov	edx, DWORD PTR _wParam$[ebp]
	cmp	edx, DWORD PTR _savedsess_menu
	jne	SHORT $LN241@WndProc
; Line 2090
	push	0
	push	OFFSET _sesslist
	call	_get_sesslist
	add	esp, 8
; Line 2091
	push	1
	push	OFFSET _sesslist
	call	_get_sesslist
	add	esp, 8
; Line 2092
	call	_update_savedsess_menu
; Line 2093
	xor	eax, eax
	jmp	$LN254@WndProc
$LN241@WndProc:
; Line 2095
	jmp	$LN252@WndProc
$LN240@WndProc:
; Line 2098
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 320		; 00000140H
	ja	SHORT $LN260@WndProc
	cmp	DWORD PTR tv130[ebp], 320		; 00000140H
	je	$LN183@WndProc
	mov	ecx, DWORD PTR tv130[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv130[ebp], ecx
	cmp	DWORD PTR tv130[ebp], 96		; 00000060H
	ja	$LN178@WndProc
	mov	edx, DWORD PTR tv130[ebp]
	movzx	eax, BYTE PTR $LN289@WndProc[edx]
	jmp	DWORD PTR $LN315@WndProc[eax*4]
$LN260@WndProc:
	cmp	DWORD PTR tv130[ebp], 384		; 00000180H
	ja	SHORT $LN261@WndProc
	cmp	DWORD PTR tv130[ebp], 384		; 00000180H
	je	$LN179@WndProc
	cmp	DWORD PTR tv130[ebp], 336		; 00000150H
	je	$LN184@WndProc
	cmp	DWORD PTR tv130[ebp], 352		; 00000160H
	je	SHORT $LN236@WndProc
	cmp	DWORD PTR tv130[ebp], 368		; 00000170H
	je	$LN189@WndProc
	jmp	$LN178@WndProc
$LN261@WndProc:
	cmp	DWORD PTR tv130[ebp], 400		; 00000190H
	je	$LN188@WndProc
	cmp	DWORD PTR tv130[ebp], 61584		; 0000f090H
	je	$LN182@WndProc
	cmp	DWORD PTR tv130[ebp], 61696		; 0000f100H
	je	$LN181@WndProc
	jmp	$LN178@WndProc
$LN237@WndProc:
; Line 2100
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	_showeventlog
	add	esp, 4
; Line 2101
	jmp	$LN238@WndProc
$LN236@WndProc:
; Line 2108
	mov	DWORD PTR _freecl$89857[ebp], 0
; Line 2112
	mov	DWORD PTR _filemap$89861[ebp], 0
; Line 2114
	cmp	DWORD PTR _wParam$[ebp], 48		; 00000030H
	jne	$LN235@WndProc
; Line 2123
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_serialised_size
	add	esp, 4
	mov	DWORD PTR _size$89866[ebp], eax
; Line 2125
	mov	DWORD PTR _sa$89864[ebp], 12		; 0000000cH
; Line 2126
	mov	DWORD PTR _sa$89864[ebp+4], 0
; Line 2127
	mov	DWORD PTR _sa$89864[ebp+8], 1
; Line 2131
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _size$89866[ebp]
	push	eax
	push	0
	push	4
	lea	ecx, DWORD PTR _sa$89864[ebp]
	push	ecx
	push	-1
	call	DWORD PTR __imp__CreateFileMappingA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _filemap$89861[ebp], eax
; Line 2132
	cmp	DWORD PTR _filemap$89861[ebp], 0
	je	SHORT $LN234@WndProc
	cmp	DWORD PTR _filemap$89861[ebp], -1
	je	SHORT $LN234@WndProc
; Line 2133
	mov	esi, esp
	mov	edx, DWORD PTR _size$89866[ebp]
	push	edx
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _filemap$89861[ebp]
	push	eax
	call	DWORD PTR __imp__MapViewOfFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$89865[ebp], eax
; Line 2134
	cmp	DWORD PTR _p$89865[ebp], 0
	je	SHORT $LN234@WndProc
; Line 2135
	mov	ecx, DWORD PTR _p$89865[ebp]
	push	ecx
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_serialise
	add	esp, 8
; Line 2136
	mov	esi, esp
	mov	eax, DWORD PTR _p$89865[ebp]
	push	eax
	call	DWORD PTR __imp__UnmapViewOfFile@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN234@WndProc:
; Line 2139
	mov	DWORD PTR _inherit_handles$89858[ebp], 1
; Line 2140
	mov	ecx, DWORD PTR _size$89866[ebp]
	push	ecx
	mov	edx, DWORD PTR _filemap$89861[ebp]
	push	edx
	push	OFFSET $SG89876
	lea	eax, DWORD PTR _c$89855[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 2141
	lea	ecx, DWORD PTR _c$89855[ebp]
	mov	DWORD PTR _cl$89856[ebp], ecx
	jmp	$LN232@WndProc
$LN235@WndProc:
; Line 2142
	cmp	DWORD PTR _wParam$[ebp], 352		; 00000160H
	jne	SHORT $LN231@WndProc
; Line 2144
	mov	eax, DWORD PTR _lParam$[ebp]
	sub	eax, 4096				; 00001000H
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, 1
	mov	DWORD PTR _sessno$89879[ebp], eax
; Line 2145
	mov	edx, DWORD PTR _sessno$89879[ebp]
	cmp	edx, DWORD PTR _sesslist
	jae	SHORT $LN230@WndProc
; Line 2146
	mov	eax, DWORD PTR _sessno$89879[ebp]
	mov	ecx, DWORD PTR _sesslist+4
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _session$89882[ebp], edx
; Line 2147
	mov	eax, DWORD PTR _session$89882[ebp]
	push	eax
	push	OFFSET $SG89883
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _cl$89856[ebp], eax
; Line 2148
	mov	DWORD PTR _inherit_handles$89858[ebp], 0
; Line 2149
	mov	DWORD PTR _freecl$89857[ebp], 1
; Line 2150
	jmp	SHORT $LN229@WndProc
$LN230@WndProc:
; Line 2151
	jmp	$LN238@WndProc
$LN229@WndProc:
; Line 2152
	jmp	SHORT $LN232@WndProc
$LN231@WndProc:
; Line 2153
	mov	DWORD PTR _cl$89856[ebp], 0
; Line 2154
	mov	DWORD PTR _inherit_handles$89858[ebp], 0
$LN232@WndProc:
; Line 2157
	mov	esi, esp
	push	2047					; 000007ffH
	lea	ecx, DWORD PTR _b$89854[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2158
	mov	DWORD PTR _si$89859[ebp], 68		; 00000044H
; Line 2159
	mov	DWORD PTR _si$89859[ebp+4], 0
; Line 2160
	mov	DWORD PTR _si$89859[ebp+8], 0
; Line 2161
	mov	DWORD PTR _si$89859[ebp+12], 0
; Line 2162
	mov	DWORD PTR _si$89859[ebp+44], 0
; Line 2163
	xor	edx, edx
	mov	WORD PTR _si$89859[ebp+50], dx
; Line 2164
	mov	DWORD PTR _si$89859[ebp+52], 0
; Line 2166
	mov	esi, esp
	lea	eax, DWORD PTR _pi$89860[ebp]
	push	eax
	lea	ecx, DWORD PTR _si$89859[ebp]
	push	ecx
	push	0
	push	0
	push	32					; 00000020H
	mov	edx, DWORD PTR _inherit_handles$89858[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _cl$89856[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$89854[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateProcessA@40
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2167
	mov	esi, esp
	mov	edx, DWORD PTR _pi$89860[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2168
	mov	esi, esp
	mov	eax, DWORD PTR _pi$89860[ebp+4]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2170
	cmp	DWORD PTR _filemap$89861[ebp], 0
	je	SHORT $LN227@WndProc
; Line 2171
	mov	esi, esp
	mov	ecx, DWORD PTR _filemap$89861[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN227@WndProc:
; Line 2172
	cmp	DWORD PTR _freecl$89857[ebp], 0
	je	SHORT $LN226@WndProc
; Line 2173
	mov	edx, DWORD PTR _cl$89856[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN226@WndProc:
; Line 2175
	jmp	$LN238@WndProc
$LN225@WndProc:
; Line 2177
	cmp	DWORD PTR _back, 0
	jne	SHORT $LN224@WndProc
; Line 2178
	push	OFFSET $SG89901
	push	0
	call	_logevent
	add	esp, 8
; Line 2179
	push	0
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_pwron
	add	esp, 8
; Line 2180
	call	_start_backend
$LN224@WndProc:
; Line 2183
	jmp	$LN238@WndProc
$LN223@WndProc:
; Line 2187
	mov	DWORD PTR _init_lvl$89904[ebp], 1
; Line 2190
	cmp	DWORD PTR _reconfiguring, 0
	je	SHORT $LN222@WndProc
; Line 2191
	jmp	$LN238@WndProc
; Line 2192
	jmp	SHORT $LN221@WndProc
$LN222@WndProc:
; Line 2193
	mov	DWORD PTR _reconfiguring, 1
$LN221@WndProc:
; Line 2201
	mov	ecx, DWORD PTR _window_name
	push	ecx
	push	90					; 0000005aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_str
	add	esp, 12					; 0000000cH
; Line 2203
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_copy
	add	esp, 4
	mov	DWORD PTR _prev_conf$89903[ebp], eax
; Line 2206
	cmp	DWORD PTR _back, 0
	je	SHORT $LN256@WndProc
	mov	esi, esp
	mov	ecx, DWORD PTR _backhandle
	push	ecx
	mov	edx, DWORD PTR _back
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv235[ebp], eax
	jmp	SHORT $LN257@WndProc
$LN256@WndProc:
	mov	DWORD PTR tv235[ebp], 0
$LN257@WndProc:
	mov	ecx, DWORD PTR tv235[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_do_reconfig
	add	esp, 8
	mov	DWORD PTR _reconfig_result$89905[ebp], eax
; Line 2207
	mov	DWORD PTR _reconfiguring, 0
; Line 2208
	cmp	DWORD PTR _reconfig_result$89905[ebp], 0
	jne	SHORT $LN220@WndProc
; Line 2209
	mov	eax, DWORD PTR _prev_conf$89903[ebp]
	push	eax
	call	_conf_free
	add	esp, 4
; Line 2210
	jmp	$LN238@WndProc
$LN220@WndProc:
; Line 2213
	call	_conf_cache_data
; Line 2215
	push	106					; 0000006aH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _resize_action$[ebp], eax
; Line 2219
	mov	DWORD PTR _i$89909[ebp], 0
	jmp	SHORT $LN219@WndProc
$LN218@WndProc:
	mov	edx, DWORD PTR _i$89909[ebp]
	add	edx, 1
	mov	DWORD PTR _i$89909[ebp], edx
$LN219@WndProc:
	cmp	DWORD PTR _i$89909[ebp], 2
	jae	SHORT $LN217@WndProc
; Line 2223
	xor	eax, eax
	cmp	DWORD PTR _resize_action$[ebp], 1
	sete	al
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esi, esp
	push	eax
	push	384					; 00000180H
	mov	ecx, DWORD PTR _i$89909[ebp]
	mov	edx, DWORD PTR _popup_menus[ecx*4]
	push	edx
	call	DWORD PTR __imp__EnableMenuItem@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN218@WndProc
$LN217@WndProc:
; Line 2225
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN216@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 1
	jne	SHORT $LN216@WndProc
; Line 2226
	mov	esi, esp
	push	9
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN216@WndProc:
; Line 2230
	mov	edx, DWORD PTR _conf
	push	edx
	mov	eax, DWORD PTR _logctx
	push	eax
	call	_log_reconfig
	add	esp, 8
; Line 2232
	mov	ecx, DWORD PTR _logpal
	push	ecx
	call	_safefree
	add	esp, 4
; Line 2237
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN215@WndProc
; Line 2238
	mov	edx, DWORD PTR _conf
	push	edx
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_ldisc_configure
	add	esp, 8
; Line 2239
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _ldisc
	push	ecx
	call	_ldisc_send
	add	esp, 16					; 00000010H
$LN215@WndProc:
; Line 2241
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN214@WndProc
; Line 2242
	mov	esi, esp
	mov	edx, DWORD PTR _pal
	push	edx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN214@WndProc:
; Line 2243
	mov	DWORD PTR _logpal, 0
; Line 2244
	mov	DWORD PTR _pal, 0
; Line 2245
	call	_conftopalette
; Line 2246
	call	_init_palette
; Line 2249
	mov	eax, DWORD PTR _conf
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_reconfig
	add	esp, 8
; Line 2252
	cmp	DWORD PTR _back, 0
	je	SHORT $LN213@WndProc
; Line 2253
	mov	esi, esp
	mov	edx, DWORD PTR _conf
	push	edx
	mov	eax, DWORD PTR _backhandle
	push	eax
	mov	ecx, DWORD PTR _back
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN213@WndProc:
; Line 2264
	push	111					; 0000006fH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	111					; 0000006fH
	mov	ecx, DWORD PTR _prev_conf$89903[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN211@WndProc
	push	110					; 0000006eH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	110					; 0000006eH
	mov	eax, DWORD PTR _prev_conf$89903[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN211@WndProc
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	91					; 0000005bH
	mov	edx, DWORD PTR _prev_conf$89903[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN211@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 2
	je	SHORT $LN211@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 3
	jne	SHORT $LN210@WndProc
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN211@WndProc
$LN210@WndProc:
	cmp	DWORD PTR _resize_action$[ebp], 1
	jne	SHORT $LN212@WndProc
$LN211@WndProc:
; Line 2267
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	110					; 0000006eH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	111					; 0000006fH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_size
	add	esp, 16					; 00000010H
$LN212@WndProc:
; Line 2271
	mov	esi, esp
	push	-16					; fffffff0H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _flag$89924[ebp], eax
; Line 2273
	mov	esi, esp
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _exflag$89926[ebp], eax
; Line 2275
	mov	ecx, DWORD PTR _exflag$89926[ebp]
	mov	DWORD PTR _nexflag$89925[ebp], ecx
; Line 2277
	push	83					; 00000053H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	83					; 00000053H
	mov	eax, DWORD PTR _prev_conf$89903[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	je	SHORT $LN209@WndProc
; Line 2278
	push	83					; 00000053H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN208@WndProc
; Line 2279
	mov	edx, DWORD PTR _nexflag$89925[ebp]
	or	edx, 8
	mov	DWORD PTR _nexflag$89925[ebp], edx
; Line 2281
	mov	esi, esp
	push	3
	push	0
	push	0
	push	0
	push	0
	push	-1
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2282
	jmp	SHORT $LN209@WndProc
$LN208@WndProc:
; Line 2283
	mov	ecx, DWORD PTR _nexflag$89925[ebp]
	and	ecx, -9					; fffffff7H
	mov	DWORD PTR _nexflag$89925[ebp], ecx
; Line 2285
	mov	esi, esp
	push	3
	push	0
	push	0
	push	0
	push	0
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN209@WndProc:
; Line 2288
	push	121					; 00000079H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN206@WndProc
; Line 2289
	mov	ecx, DWORD PTR _nexflag$89925[ebp]
	or	ecx, 512				; 00000200H
	mov	DWORD PTR _nexflag$89925[ebp], ecx
; Line 2290
	jmp	SHORT $LN205@WndProc
$LN206@WndProc:
; Line 2291
	mov	edx, DWORD PTR _nexflag$89925[ebp]
	and	edx, -513				; fffffdffH
	mov	DWORD PTR _nexflag$89925[ebp], edx
$LN205@WndProc:
; Line 2293
	mov	eax, DWORD PTR _flag$89924[ebp]
	mov	DWORD PTR _nflg$89923[ebp], eax
; Line 2296
	call	_is_full_screen
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 104				; 00000068H
	push	eax
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN204@WndProc
; Line 2297
	mov	edx, DWORD PTR _nflg$89923[ebp]
	or	edx, 2097152				; 00200000H
	mov	DWORD PTR _nflg$89923[ebp], edx
; Line 2298
	jmp	SHORT $LN203@WndProc
$LN204@WndProc:
; Line 2299
	mov	eax, DWORD PTR _nflg$89923[ebp]
	and	eax, -2097153				; ffdfffffH
	mov	DWORD PTR _nflg$89923[ebp], eax
$LN203@WndProc:
; Line 2302
	cmp	DWORD PTR _resize_action$[ebp], 1
	je	SHORT $LN201@WndProc
	call	_is_full_screen
	test	eax, eax
	je	SHORT $LN202@WndProc
$LN201@WndProc:
; Line 2303
	mov	ecx, DWORD PTR _nflg$89923[ebp]
	and	ecx, -262145				; fffbffffH
	mov	DWORD PTR _nflg$89923[ebp], ecx
; Line 2304
	jmp	SHORT $LN200@WndProc
$LN202@WndProc:
; Line 2305
	mov	edx, DWORD PTR _nflg$89923[ebp]
	or	edx, 262144				; 00040000H
	mov	DWORD PTR _nflg$89923[ebp], edx
$LN200@WndProc:
; Line 2307
	cmp	DWORD PTR _resize_action$[ebp], 1
	jne	SHORT $LN199@WndProc
; Line 2308
	mov	eax, DWORD PTR _nflg$89923[ebp]
	and	eax, -65537				; fffeffffH
	mov	DWORD PTR _nflg$89923[ebp], eax
; Line 2309
	jmp	SHORT $LN198@WndProc
$LN199@WndProc:
; Line 2310
	mov	ecx, DWORD PTR _nflg$89923[ebp]
	or	ecx, 65536				; 00010000H
	mov	DWORD PTR _nflg$89923[ebp], ecx
$LN198@WndProc:
; Line 2312
	mov	edx, DWORD PTR _nflg$89923[ebp]
	cmp	edx, DWORD PTR _flag$89924[ebp]
	jne	SHORT $LN196@WndProc
	mov	eax, DWORD PTR _nexflag$89925[ebp]
	cmp	eax, DWORD PTR _exflag$89926[ebp]
	je	$LN197@WndProc
$LN196@WndProc:
; Line 2313
	mov	ecx, DWORD PTR _nflg$89923[ebp]
	cmp	ecx, DWORD PTR _flag$89924[ebp]
	je	SHORT $LN195@WndProc
; Line 2314
	mov	esi, esp
	mov	edx, DWORD PTR _nflg$89923[ebp]
	push	edx
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN195@WndProc:
; Line 2315
	mov	ecx, DWORD PTR _nexflag$89925[ebp]
	cmp	ecx, DWORD PTR _exflag$89926[ebp]
	je	SHORT $LN194@WndProc
; Line 2316
	mov	esi, esp
	mov	edx, DWORD PTR _nexflag$89925[ebp]
	push	edx
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN194@WndProc:
; Line 2321
	mov	esi, esp
	push	311					; 00000137H
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2323
	mov	DWORD PTR _init_lvl$89904[ebp], 2
$LN197@WndProc:
; Line 2328
	cmp	DWORD PTR _resize_action$[ebp], 1
	jne	SHORT $LN193@WndProc
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN193@WndProc
; Line 2329
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	_force_normal
	add	esp, 4
; Line 2330
	mov	DWORD PTR _init_lvl$89904[ebp], 2
$LN193@WndProc:
; Line 2333
	push	90					; 0000005aH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_str
	add	esp, 8
	push	eax
	push	0
	call	_set_title
	add	esp, 8
; Line 2334
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN192@WndProc
; Line 2337
	push	109					; 0000006dH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN258@WndProc
	mov	ecx, DWORD PTR _window_name
	mov	DWORD PTR tv409[ebp], ecx
	jmp	SHORT $LN259@WndProc
$LN258@WndProc:
	mov	edx, DWORD PTR _icon_name
	mov	DWORD PTR tv409[ebp], edx
$LN259@WndProc:
	mov	esi, esp
	mov	eax, DWORD PTR tv409[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowTextA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN192@WndProc:
; Line 2341
	push	112					; 00000070H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_fontspec
	add	esp, 8
	mov	DWORD PTR _font$89949[ebp], eax
; Line 2343
	push	112					; 00000070H
	mov	eax, DWORD PTR _prev_conf$89903[ebp]
	push	eax
	call	_conf_get_fontspec
	add	esp, 8
	mov	DWORD PTR _prev_font$89950[ebp], eax
; Line 2360
	mov	ecx, DWORD PTR _prev_font$89950[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _font$89949[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	$LN190@WndProc
	push	140					; 0000008cH
	mov	edx, DWORD PTR _prev_conf$89903[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
	push	eax
	push	140					; 0000008cH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_str
	add	esp, 8
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	$LN190@WndProc
	mov	ecx, DWORD PTR _font$89949[ebp]
	mov	edx, DWORD PTR _prev_font$89950[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jne	$LN190@WndProc
	mov	ecx, DWORD PTR _font$89949[ebp]
	mov	edx, DWORD PTR _prev_font$89950[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	$LN190@WndProc
	mov	ecx, DWORD PTR _font$89949[ebp]
	mov	edx, DWORD PTR _prev_font$89950[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+12]
	jne	$LN190@WndProc
	push	113					; 00000071H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	113					; 00000071H
	mov	edx, DWORD PTR _prev_conf$89903[ebp]
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN190@WndProc
	push	139					; 0000008bH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	139					; 0000008bH
	mov	ecx, DWORD PTR _prev_conf$89903[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN190@WndProc
	push	131					; 00000083H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	esi, eax
	push	131					; 00000083H
	mov	eax, DWORD PTR _prev_conf$89903[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN190@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 1
	je	SHORT $LN190@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 3
	je	SHORT $LN190@WndProc
	push	106					; 0000006aH
	mov	ecx, DWORD PTR _prev_conf$89903[ebp]
	push	ecx
	call	_conf_get_int
	add	esp, 8
	cmp	DWORD PTR _resize_action$[ebp], eax
	je	SHORT $LN191@WndProc
$LN190@WndProc:
; Line 2361
	mov	DWORD PTR _init_lvl$89904[ebp], 2
$LN191@WndProc:
; Line 2364
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2365
	mov	eax, DWORD PTR _init_lvl$89904[ebp]
	push	eax
	call	_reset_window
	add	esp, 4
; Line 2367
	mov	ecx, DWORD PTR _prev_conf$89903[ebp]
	push	ecx
	call	_conf_free
	add	esp, 4
; Line 2369
	jmp	$LN238@WndProc
$LN189@WndProc:
; Line 2371
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_copyall
	add	esp, 4
; Line 2372
	jmp	$LN238@WndProc
$LN188@WndProc:
; Line 2374
	push	0
	call	_request_paste
	add	esp, 4
; Line 2375
	jmp	$LN238@WndProc
$LN187@WndProc:
; Line 2377
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_clrsb
	add	esp, 4
; Line 2378
	jmp	$LN238@WndProc
$LN186@WndProc:
; Line 2380
	push	1
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_pwron
	add	esp, 8
; Line 2381
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN185@WndProc
; Line 2382
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _ldisc
	push	edx
	call	_ldisc_send
	add	esp, 16					; 00000010H
$LN185@WndProc:
; Line 2383
	jmp	$LN238@WndProc
$LN184@WndProc:
; Line 2385
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	_showabout
	add	esp, 4
; Line 2386
	jmp	$LN238@WndProc
$LN183@WndProc:
; Line 2388
	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	_launch_help
	add	esp, 8
; Line 2389
	jmp	$LN238@WndProc
$LN182@WndProc:
; Line 2395
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2396
	jmp	$LN238@WndProc
$LN181@WndProc:
; Line 2406
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2407
	cmp	DWORD PTR _lParam$[ebp], 0
	jne	SHORT $LN180@WndProc
; Line 2408
	mov	esi, esp
	push	0
	push	32					; 00000020H
	push	258					; 00000102H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__PostMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN180@WndProc:
; Line 2409
	jmp	$LN238@WndProc
$LN179@WndProc:
; Line 2411
	call	_flip_full_screen
; Line 2412
	jmp	$LN238@WndProc
$LN178@WndProc:
; Line 2414
	cmp	DWORD PTR _wParam$[ebp], 4096		; 00001000H
	jb	SHORT $LN177@WndProc
	cmp	DWORD PTR _wParam$[ebp], 20480		; 00005000H
	jae	SHORT $LN177@WndProc
; Line 2415
	mov	esi, esp
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	push	352					; 00000160H
	push	274					; 00000112H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN177@WndProc:
; Line 2417
	cmp	DWORD PTR _wParam$[ebp], 1024		; 00000400H
	jb	SHORT $LN238@WndProc
	cmp	DWORD PTR _wParam$[ebp], 2048		; 00000800H
	ja	SHORT $LN238@WndProc
; Line 2418
	mov	edx, DWORD PTR _wParam$[ebp]
	sub	edx, 1024				; 00000400H
	shr	edx, 4
	mov	DWORD PTR _i$89971[ebp], edx
; Line 2424
	mov	eax, DWORD PTR _i$89971[ebp]
	cmp	eax, DWORD PTR _n_specials
	jl	SHORT $LN175@WndProc
; Line 2425
	jmp	SHORT $LN238@WndProc
$LN175@WndProc:
; Line 2426
	cmp	DWORD PTR _back, 0
	je	SHORT $LN238@WndProc
; Line 2427
	mov	esi, esp
	mov	ecx, DWORD PTR _i$89971[ebp]
	mov	edx, DWORD PTR _specials
	mov	eax, DWORD PTR [edx+ecx*8+4]
	push	eax
	mov	ecx, DWORD PTR _backhandle
	push	ecx
	mov	edx, DWORD PTR _back
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN238@WndProc:
; Line 2430
	jmp	$LN252@WndProc
$LN173@WndProc:
; Line 2445
	cmp	DWORD PTR _message$[ebp], 516		; 00000204H
	jne	SHORT $LN172@WndProc
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 8
	jne	SHORT $LN171@WndProc
	push	133					; 00000085H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 2
	jne	SHORT $LN172@WndProc
$LN171@WndProc:
; Line 2448
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2449
	mov	esi, esp
	lea	eax, DWORD PTR _cursorpos$89977[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2453
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cursorpos$89977[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cursorpos$89977[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _popup_menus+4
	push	ecx
	call	DWORD PTR __imp__TrackPopupMenu@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2454
	jmp	$LN252@WndProc
$LN172@WndProc:
; Line 2459
	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv530[ebp], edx
	mov	eax, DWORD PTR tv530[ebp]
	sub	eax, 513				; 00000201H
	mov	DWORD PTR tv530[ebp], eax
	cmp	DWORD PTR tv530[ebp], 7
	ja	$LN162@WndProc
	mov	ecx, DWORD PTR tv530[ebp]
	jmp	DWORD PTR $LN316@WndProc[ecx*4]
$LN168@WndProc:
; Line 2461
	mov	DWORD PTR _button$89979[ebp], 1
; Line 2462
	mov	edx, DWORD PTR _wParam$[ebp]
	or	edx, 1
	mov	DWORD PTR _wParam$[ebp], edx
; Line 2463
	mov	DWORD PTR _press$89980[ebp], 1
; Line 2464
	jmp	$LN169@WndProc
$LN167@WndProc:
; Line 2466
	mov	DWORD PTR _button$89979[ebp], 2
; Line 2467
	mov	eax, DWORD PTR _wParam$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _wParam$[ebp], eax
; Line 2468
	mov	DWORD PTR _press$89980[ebp], 1
; Line 2469
	jmp	$LN169@WndProc
$LN166@WndProc:
; Line 2471
	mov	DWORD PTR _button$89979[ebp], 3
; Line 2472
	mov	ecx, DWORD PTR _wParam$[ebp]
	or	ecx, 2
	mov	DWORD PTR _wParam$[ebp], ecx
; Line 2473
	mov	DWORD PTR _press$89980[ebp], 1
; Line 2474
	jmp	SHORT $LN169@WndProc
$LN165@WndProc:
; Line 2476
	mov	DWORD PTR _button$89979[ebp], 1
; Line 2477
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, -2					; fffffffeH
	mov	DWORD PTR _wParam$[ebp], edx
; Line 2478
	mov	DWORD PTR _press$89980[ebp], 0
; Line 2479
	jmp	SHORT $LN169@WndProc
$LN164@WndProc:
; Line 2481
	mov	DWORD PTR _button$89979[ebp], 2
; Line 2482
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, -17				; ffffffefH
	mov	DWORD PTR _wParam$[ebp], eax
; Line 2483
	mov	DWORD PTR _press$89980[ebp], 0
; Line 2484
	jmp	SHORT $LN169@WndProc
$LN163@WndProc:
; Line 2486
	mov	DWORD PTR _button$89979[ebp], 3
; Line 2487
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, -3					; fffffffdH
	mov	DWORD PTR _wParam$[ebp], ecx
; Line 2488
	mov	DWORD PTR _press$89980[ebp], 0
; Line 2489
	jmp	SHORT $LN169@WndProc
$LN162@WndProc:
; Line 2491
	mov	DWORD PTR _press$89980[ebp], 0
	mov	edx, DWORD PTR _press$89980[ebp]
	mov	DWORD PTR _button$89979[ebp], edx
$LN169@WndProc:
; Line 2493
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2501
	mov	BYTE PTR _mouse_on_hotspot$89992[ebp], 0
; Line 2504
	mov	esi, esp
	lea	eax, DWORD PTR _pt$89993[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2510
	push	0
	mov	ecx, DWORD PTR _pt$89993[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pt$89993[ebp]
	push	edx
	call	_xMonitorFromPoint@12
	mov	DWORD PTR _mon$89994[ebp], eax
; Line 2512
	cmp	DWORD PTR _mon$89994[ebp], 0
	je	SHORT $LN161@WndProc
; Line 2513
	mov	DWORD PTR _mi$89995[ebp], 40		; 00000028H
; Line 2514
	lea	eax, DWORD PTR _mi$89995[ebp]
	push	eax
	mov	ecx, DWORD PTR _mon$89994[ebp]
	push	ecx
	call	_xGetMonitorInfo@8
; Line 2517
	mov	edx, DWORD PTR _mi$89995[ebp+4]
	cmp	edx, DWORD PTR _pt$89993[ebp]
	jne	SHORT $LN161@WndProc
	mov	eax, DWORD PTR _mi$89995[ebp+8]
	cmp	eax, DWORD PTR _pt$89993[ebp+4]
	jne	SHORT $LN161@WndProc
; Line 2518
	mov	BYTE PTR _mouse_on_hotspot$89992[ebp], 1
$LN161@WndProc:
; Line 2528
	call	_is_full_screen
	test	eax, eax
	je	SHORT $LN159@WndProc
	cmp	DWORD PTR _press$89980[ebp], 0
	je	SHORT $LN159@WndProc
	cmp	DWORD PTR _button$89979[ebp], 1
	jne	SHORT $LN159@WndProc
	movsx	ecx, BYTE PTR _mouse_on_hotspot$89992[ebp]
	test	ecx, ecx
	je	SHORT $LN159@WndProc
; Line 2530
	mov	edx, DWORD PTR _pt$89993[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	mov	ecx, DWORD PTR _pt$89993[ebp+4]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	esi, esp
	push	eax
	push	61584					; 0000f090H
	push	274					; 00000112H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2531
	xor	eax, eax
	jmp	$LN254@WndProc
$LN159@WndProc:
; Line 2535
	cmp	DWORD PTR _press$89980[ebp], 0
	je	$LN158@WndProc
; Line 2539
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	test	edx, edx
	jge	SHORT $LN262@WndProc
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	sub	ecx, DWORD PTR _font_height
	add	ecx, 1
	mov	DWORD PTR tv631[ebp], ecx
	jmp	SHORT $LN263@WndProc
$LN262@WndProc:
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR tv631[ebp], eax
$LN263@WndProc:
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	test	edx, edx
	jge	SHORT $LN264@WndProc
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	sub	ecx, DWORD PTR _font_width
	add	ecx, 1
	mov	DWORD PTR tv647[ebp], ecx
	jmp	SHORT $LN265@WndProc
$LN264@WndProc:
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR tv647[ebp], eax
$LN265@WndProc:
	call	_is_alt_pressed
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 4
	push	edx
	mov	eax, DWORD PTR tv631[ebp]
	sub	eax, DWORD PTR _offset_height
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	eax, DWORD PTR tv647[ebp]
	sub	eax, DWORD PTR _offset_width
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	mov	eax, DWORD PTR _button$89979[ebp]
	push	eax
	call	_click
	add	esp, 24					; 00000018H
; Line 2540
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2541
	jmp	$LN157@WndProc
$LN158@WndProc:
; Line 2545
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	test	eax, eax
	jge	SHORT $LN266@WndProc
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	sub	edx, DWORD PTR _font_height
	add	edx, 1
	mov	DWORD PTR tv674[ebp], edx
	jmp	SHORT $LN267@WndProc
$LN266@WndProc:
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR tv674[ebp], ecx
$LN267@WndProc:
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	test	eax, eax
	jge	SHORT $LN268@WndProc
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	sub	edx, DWORD PTR _font_width
	add	edx, 1
	mov	DWORD PTR tv690[ebp], edx
	jmp	SHORT $LN269@WndProc
$LN268@WndProc:
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR tv690[ebp], ecx
$LN269@WndProc:
	call	_is_alt_pressed
	push	eax
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 8
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 4
	push	eax
	mov	eax, DWORD PTR tv674[ebp]
	sub	eax, DWORD PTR _offset_height
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	eax, DWORD PTR tv690[ebp]
	sub	eax, DWORD PTR _offset_width
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	push	5
	mov	ecx, DWORD PTR _button$89979[ebp]
	push	ecx
	call	_translate_button
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _button$89979[ebp]
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_mouse
	add	esp, 36					; 00000024H
; Line 2546
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 19					; 00000013H
	jne	SHORT $LN157@WndProc
; Line 2547
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN157@WndProc:
; Line 2550
	xor	eax, eax
	jmp	$LN254@WndProc
$LN155@WndProc:
; Line 2561
	mov	edx, DWORD PTR _wParam$[ebp]
	cmp	edx, DWORD PTR ?wp@?CK@??WndProc@@9@9
	jne	SHORT $LN153@WndProc
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	eax, DWORD PTR ?lp@?CK@??WndProc@@9@9
	jne	SHORT $LN153@WndProc
	cmp	DWORD PTR ?last_mousemove@?1??WndProc@@9@9, 512 ; 00000200H
	je	SHORT $LN154@WndProc
$LN153@WndProc:
; Line 2562
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2563
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR ?wp@?CK@??WndProc@@9@9, ecx
	mov	edx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR ?lp@?CK@??WndProc@@9@9, edx
; Line 2564
	mov	DWORD PTR ?last_mousemove@?1??WndProc@@9@9, 512 ; 00000200H
$LN154@WndProc:
; Line 2571
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	call	_noise_ultralight
	add	esp, 4
; Line 2574
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 19					; 00000013H
	je	$LN152@WndProc
	mov	esi, esp
	call	DWORD PTR __imp__GetCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _hwnd$[ebp]
	jne	$LN152@WndProc
; Line 2576
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 1
	je	SHORT $LN151@WndProc
; Line 2577
	mov	DWORD PTR _b$90068[ebp], 1
	jmp	SHORT $LN150@WndProc
$LN151@WndProc:
; Line 2578
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN149@WndProc
; Line 2579
	mov	DWORD PTR _b$90068[ebp], 2
; Line 2580
	jmp	SHORT $LN150@WndProc
$LN149@WndProc:
; Line 2581
	mov	DWORD PTR _b$90068[ebp], 3
$LN150@WndProc:
; Line 2585
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	test	edx, edx
	jge	SHORT $LN270@WndProc
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	sub	ecx, DWORD PTR _font_height
	add	ecx, 1
	mov	DWORD PTR tv768[ebp], ecx
	jmp	SHORT $LN271@WndProc
$LN270@WndProc:
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR tv768[ebp], eax
$LN271@WndProc:
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	test	edx, edx
	jge	SHORT $LN272@WndProc
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	sub	ecx, DWORD PTR _font_width
	add	ecx, 1
	mov	DWORD PTR tv784[ebp], ecx
	jmp	SHORT $LN273@WndProc
$LN272@WndProc:
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR tv784[ebp], eax
$LN273@WndProc:
	call	_is_alt_pressed
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 4
	push	edx
	mov	eax, DWORD PTR tv768[ebp]
	sub	eax, DWORD PTR _offset_height
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	eax, DWORD PTR tv784[ebp]
	sub	eax, DWORD PTR _offset_width
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	push	4
	mov	eax, DWORD PTR _b$90068[ebp]
	push	eax
	call	_translate_button
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _b$90068[ebp]
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_mouse
	add	esp, 36					; 00000024H
$LN152@WndProc:
; Line 2587
	xor	eax, eax
	jmp	$LN254@WndProc
$LN147@WndProc:
; Line 2593
	mov	eax, DWORD PTR _wParam$[ebp]
	cmp	eax, DWORD PTR ?wp@?CN@??WndProc@@9@9
	jne	SHORT $LN145@WndProc
	mov	ecx, DWORD PTR _lParam$[ebp]
	cmp	ecx, DWORD PTR ?lp@?CN@??WndProc@@9@9
	jne	SHORT $LN145@WndProc
	cmp	DWORD PTR ?last_mousemove@?1??WndProc@@9@9, 160 ; 000000a0H
	je	SHORT $LN146@WndProc
$LN145@WndProc:
; Line 2594
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2595
	mov	edx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR ?wp@?CN@??WndProc@@9@9, edx
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR ?lp@?CN@??WndProc@@9@9, eax
; Line 2596
	mov	DWORD PTR ?last_mousemove@?1??WndProc@@9@9, 160 ; 000000a0H
$LN146@WndProc:
; Line 2599
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	_noise_ultralight
	add	esp, 4
; Line 2600
	jmp	$LN252@WndProc
$LN144@WndProc:
; Line 2602
	mov	edx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR ?ignore_clip@?1??WndProc@@9@9, edx
; Line 2603
	jmp	$LN252@WndProc
$LN143@WndProc:
; Line 2605
	cmp	DWORD PTR ?ignore_clip@?1??WndProc@@9@9, 0
	jne	SHORT $LN142@WndProc
; Line 2606
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_deselect
	add	esp, 4
$LN142@WndProc:
; Line 2607
	mov	DWORD PTR ?ignore_clip@?1??WndProc@@9@9, 0
; Line 2608
	xor	eax, eax
	jmp	$LN254@WndProc
$LN141@WndProc:
; Line 2613
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__HideCaret@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2614
	mov	esi, esp
	lea	edx, DWORD PTR _p$90108[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__BeginPaint@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 2615
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN140@WndProc
; Line 2616
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _pal
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2617
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN140@WndProc:
; Line 2657
	mov	ecx, DWORD PTR _term
	xor	edx, edx
	cmp	DWORD PTR [ecx+4252], 0
	sete	dl
	push	edx
	mov	eax, DWORD PTR _p$90108[ebp+20]
	sub	eax, DWORD PTR _offset_height
	sub	eax, 1
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	eax, DWORD PTR _p$90108[ebp+16]
	sub	eax, DWORD PTR _offset_width
	sub	eax, 1
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	mov	eax, DWORD PTR _p$90108[ebp+12]
	sub	eax, DWORD PTR _offset_height
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	eax, DWORD PTR _p$90108[ebp+8]
	sub	eax, DWORD PTR _offset_width
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_paint
	add	esp, 28					; 0000001cH
; Line 2663
	cmp	DWORD PTR _p$90108[ebp+4], 0
	jne	SHORT $LN138@WndProc
	mov	edx, DWORD PTR _p$90108[ebp+8]
	cmp	edx, DWORD PTR _offset_width
	jl	SHORT $LN138@WndProc
	mov	eax, DWORD PTR _p$90108[ebp+12]
	cmp	eax, DWORD PTR _offset_height
	jl	SHORT $LN138@WndProc
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_width
	imul	edx, DWORD PTR [ecx+300]
	add	edx, DWORD PTR _offset_width
	cmp	DWORD PTR _p$90108[ebp+16], edx
	jge	SHORT $LN138@WndProc
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_height
	imul	ecx, DWORD PTR [eax+296]
	add	ecx, DWORD PTR _offset_height
	cmp	DWORD PTR _p$90108[ebp+20], ecx
	jl	$LN139@WndProc
$LN138@WndProc:
; Line 2668
	mov	esi, esp
	mov	edx, DWORD PTR _colours+1032
	push	edx
	call	DWORD PTR __imp__CreateSolidBrush@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fillcolour$90112[ebp], eax
; Line 2669
	mov	esi, esp
	mov	eax, DWORD PTR _fillcolour$90112[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldbrush$90113[ebp], eax
; Line 2671
	mov	esi, esp
	mov	edx, DWORD PTR _colours+1032
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp__CreatePen@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _edge$90114[ebp], eax
; Line 2672
	mov	esi, esp
	mov	eax, DWORD PTR _edge$90114[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90115[ebp], eax
; Line 2683
	mov	esi, esp
	mov	edx, DWORD PTR _p$90108[ebp+20]
	push	edx
	mov	eax, DWORD PTR _p$90108[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _p$90108[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _p$90108[ebp+8]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__IntersectClipRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2688
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_height
	imul	edx, DWORD PTR [ecx+296]
	add	edx, DWORD PTR _offset_height
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _font_width
	imul	ecx, DWORD PTR [eax+300]
	add	ecx, DWORD PTR _offset_width
	push	ecx
	mov	edx, DWORD PTR _offset_height
	push	edx
	mov	eax, DWORD PTR _offset_width
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__ExcludeClipRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2691
	mov	esi, esp
	mov	edx, DWORD PTR _p$90108[ebp+20]
	push	edx
	mov	eax, DWORD PTR _p$90108[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _p$90108[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _p$90108[ebp+8]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__Rectangle@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2695
	mov	esi, esp
	mov	ecx, DWORD PTR _oldbrush$90113[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2696
	mov	esi, esp
	mov	eax, DWORD PTR _fillcolour$90112[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2697
	mov	esi, esp
	mov	ecx, DWORD PTR _oldpen$90115[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2698
	mov	esi, esp
	mov	eax, DWORD PTR _edge$90114[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN139@WndProc:
; Line 2700
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__GetStockObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2701
	mov	esi, esp
	push	6
	call	DWORD PTR __imp__GetStockObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2702
	mov	esi, esp
	lea	eax, DWORD PTR _p$90108[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__EndPaint@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2703
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ShowCaret@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2705
	xor	eax, eax
	jmp	$LN254@WndProc
$LN137@WndProc:
; Line 2716
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _params$90117[ebp], eax
; Line 2717
	mov	eax, DWORD PTR _params$90117[ebp]
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2718
	mov	edx, DWORD PTR _params$90117[ebp]
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2719
	mov	ecx, DWORD PTR _params$90117[ebp]
	push	ecx
	push	OFFSET _wm_netevent_callback
	call	_queue_toplevel_callback
	add	esp, 8
; Line 2721
	xor	eax, eax
	jmp	$LN254@WndProc
$LN136@WndProc:
; Line 2723
	push	1
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_set_focus
	add	esp, 8
; Line 2724
	mov	esi, esp
	mov	eax, DWORD PTR _font_height
	push	eax
	mov	ecx, DWORD PTR _font_width
	push	ecx
	mov	edx, DWORD PTR _caretbm
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateCaret@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2725
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ShowCaret@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2726
	push	0
	call	_flash_window
	add	esp, 4
; Line 2727
	mov	DWORD PTR _compose_state, 0
; Line 2728
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_update
	add	esp, 4
; Line 2729
	jmp	$LN252@WndProc
$LN135@WndProc:
; Line 2731
	push	1
	call	_show_mouseptr
	add	esp, 4
; Line 2732
	push	0
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_set_focus
	add	esp, 8
; Line 2733
	mov	esi, esp
	call	DWORD PTR __imp__DestroyCaret@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2734
	mov	DWORD PTR _caret_y, -1
	mov	ecx, DWORD PTR _caret_y
	mov	DWORD PTR _caret_x, ecx
; Line 2735
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_update
	add	esp, 4
; Line 2736
	jmp	$LN252@WndProc
$LN134@WndProc:
; Line 2741
	push	1
	call	_EnableSizeTip
	add	esp, 4
; Line 2742
	mov	DWORD PTR _resizing, 1
; Line 2743
	mov	DWORD PTR ?need_backend_resize@?1??WndProc@@9@9, 0
; Line 2744
	jmp	$LN252@WndProc
$LN133@WndProc:
; Line 2746
	push	0
	call	_EnableSizeTip
	add	esp, 4
; Line 2747
	mov	DWORD PTR _resizing, 0
; Line 2751
	cmp	DWORD PTR ?need_backend_resize@?1??WndProc@@9@9, 0
	je	SHORT $LN132@WndProc
; Line 2754
	push	91					; 0000005bH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	110					; 0000006eH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	push	111					; 0000006fH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_size
	add	esp, 16					; 00000010H
; Line 2755
	mov	esi, esp
	push	1
	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN132@WndProc:
; Line 2757
	jmp	$LN252@WndProc
$LN131@WndProc:
; Line 2764
	push	106					; 0000006aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _resize_action$[ebp], eax
; Line 2766
	cmp	DWORD PTR _resize_action$[ebp], 0
	je	SHORT $LN129@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 3
	jne	$LN130@WndProc
	call	_is_alt_pressed
	test	eax, eax
	jne	$LN130@WndProc
$LN129@WndProc:
; Line 2768
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _r$90135[ebp], eax
; Line 2772
	cmp	DWORD PTR ?need_backend_resize@?1??WndProc@@9@9, 0
	jne	$LN128@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 3
	jne	$LN128@WndProc
	push	111					; 0000006fH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	edx, DWORD PTR _term
	cmp	eax, DWORD PTR [edx+296]
	jne	SHORT $LN127@WndProc
	push	110					; 0000006eH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	ecx, DWORD PTR _term
	cmp	eax, DWORD PTR [ecx+300]
	je	SHORT $LN128@WndProc
$LN127@WndProc:
; Line 2782
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	push	eax
	push	111					; 0000006fH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 2783
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+300]
	push	eax
	push	110					; 0000006eH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 2785
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2786
	mov	DWORD PTR ?need_backend_resize@?1??WndProc@@9@9, 1
$LN128@WndProc:
; Line 2789
	mov	eax, DWORD PTR _r$90135[ebp]
	mov	ecx, DWORD PTR _r$90135[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _extra_width
	mov	DWORD PTR _width$90129[ebp], edx
; Line 2790
	mov	eax, DWORD PTR _r$90135[ebp]
	mov	ecx, DWORD PTR _r$90135[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _extra_height
	mov	DWORD PTR _height$90130[ebp], edx
; Line 2791
	mov	eax, DWORD PTR _font_width
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _width$90129[ebp]
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _w$90131[ebp], eax
; Line 2792
	cmp	DWORD PTR _w$90131[ebp], 1
	jge	SHORT $LN126@WndProc
; Line 2793
	mov	DWORD PTR _w$90131[ebp], 1
$LN126@WndProc:
; Line 2794
	mov	eax, DWORD PTR _font_height
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _height$90130[ebp]
	cdq
	idiv	DWORD PTR _font_height
	mov	DWORD PTR _h$90132[ebp], eax
; Line 2795
	cmp	DWORD PTR _h$90132[ebp], 1
	jge	SHORT $LN125@WndProc
; Line 2796
	mov	DWORD PTR _h$90132[ebp], 1
$LN125@WndProc:
; Line 2797
	mov	eax, DWORD PTR _h$90132[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$90131[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_UpdateSizeTip
	add	esp, 12					; 0000000cH
; Line 2798
	mov	eax, DWORD PTR _w$90131[ebp]
	imul	eax, DWORD PTR _font_width
	mov	ecx, DWORD PTR _width$90129[ebp]
	sub	ecx, eax
	mov	DWORD PTR _ew$90133[ebp], ecx
; Line 2799
	mov	edx, DWORD PTR _h$90132[ebp]
	imul	edx, DWORD PTR _font_height
	mov	eax, DWORD PTR _height$90130[ebp]
	sub	eax, edx
	mov	DWORD PTR _eh$90134[ebp], eax
; Line 2800
	cmp	DWORD PTR _ew$90133[ebp], 0
	je	SHORT $LN124@WndProc
; Line 2802
	cmp	DWORD PTR _wParam$[ebp], 1
	je	SHORT $LN122@WndProc
	cmp	DWORD PTR _wParam$[ebp], 7
	je	SHORT $LN122@WndProc
	cmp	DWORD PTR _wParam$[ebp], 4
	jne	SHORT $LN123@WndProc
$LN122@WndProc:
; Line 2803
	mov	ecx, DWORD PTR _r$90135[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _ew$90133[ebp]
	mov	eax, DWORD PTR _r$90135[ebp]
	mov	DWORD PTR [eax], edx
; Line 2804
	jmp	SHORT $LN124@WndProc
$LN123@WndProc:
; Line 2805
	mov	ecx, DWORD PTR _r$90135[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _ew$90133[ebp]
	mov	eax, DWORD PTR _r$90135[ebp]
	mov	DWORD PTR [eax+8], edx
$LN124@WndProc:
; Line 2807
	cmp	DWORD PTR _eh$90134[ebp], 0
	je	SHORT $LN120@WndProc
; Line 2809
	cmp	DWORD PTR _wParam$[ebp], 3
	je	SHORT $LN118@WndProc
	cmp	DWORD PTR _wParam$[ebp], 5
	je	SHORT $LN118@WndProc
	cmp	DWORD PTR _wParam$[ebp], 4
	jne	SHORT $LN119@WndProc
$LN118@WndProc:
; Line 2810
	mov	ecx, DWORD PTR _r$90135[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _eh$90134[ebp]
	mov	eax, DWORD PTR _r$90135[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 2811
	jmp	SHORT $LN120@WndProc
$LN119@WndProc:
; Line 2812
	mov	ecx, DWORD PTR _r$90135[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _eh$90134[ebp]
	mov	eax, DWORD PTR _r$90135[ebp]
	mov	DWORD PTR [eax+12], edx
$LN120@WndProc:
; Line 2814
	cmp	DWORD PTR _ew$90133[ebp], 0
	jne	SHORT $LN115@WndProc
	cmp	DWORD PTR _eh$90134[ebp], 0
	je	SHORT $LN116@WndProc
$LN115@WndProc:
; Line 2815
	mov	eax, 1
	jmp	$LN254@WndProc
; Line 2816
	jmp	SHORT $LN114@WndProc
$LN116@WndProc:
; Line 2817
	xor	eax, eax
	jmp	$LN254@WndProc
$LN114@WndProc:
; Line 2818
	jmp	$LN104@WndProc
$LN130@WndProc:
; Line 2819
	mov	DWORD PTR _rv$90158[ebp], 0
; Line 2820
	push	122					; 0000007aH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _window_border$90159[ebp], eax
; Line 2821
	mov	edx, DWORD PTR _window_border$90159[ebp]
	sub	edx, DWORD PTR _offset_width
	mov	eax, DWORD PTR _extra_width
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _ex_width$90160[ebp], ecx
; Line 2822
	mov	edx, DWORD PTR _window_border$90159[ebp]
	sub	edx, DWORD PTR _offset_height
	mov	eax, DWORD PTR _extra_height
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _ex_height$90161[ebp], ecx
; Line 2823
	mov	edx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _r$90162[ebp], edx
; Line 2825
	mov	eax, DWORD PTR _r$90162[ebp]
	mov	ecx, DWORD PTR _r$90162[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _ex_width$90160[ebp]
	mov	DWORD PTR _width$90154[ebp], edx
; Line 2826
	mov	eax, DWORD PTR _r$90162[ebp]
	mov	ecx, DWORD PTR _r$90162[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _ex_height$90161[ebp]
	mov	DWORD PTR _height$90155[ebp], edx
; Line 2828
	mov	eax, DWORD PTR _term
	mov	eax, DWORD PTR [eax+300]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _width$90154[ebp]
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+300]
	mov	DWORD PTR _w$90156[ebp], eax
; Line 2829
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _height$90155[ebp]
	mov	ecx, DWORD PTR _term
	cdq
	idiv	DWORD PTR [ecx+296]
	mov	DWORD PTR _h$90157[ebp], eax
; Line 2830
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _w$90156[ebp]
	imul	eax, DWORD PTR [edx+300]
	mov	ecx, DWORD PTR _r$90162[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	add	edx, DWORD PTR _ex_width$90160[ebp]
	mov	eax, DWORD PTR _r$90162[ebp]
	cmp	DWORD PTR [eax+8], edx
	je	SHORT $LN112@WndProc
; Line 2831
	mov	DWORD PTR _rv$90158[ebp], 1
$LN112@WndProc:
; Line 2834
	cmp	DWORD PTR _wParam$[ebp], 1
	je	SHORT $LN110@WndProc
	cmp	DWORD PTR _wParam$[ebp], 7
	je	SHORT $LN110@WndProc
	cmp	DWORD PTR _wParam$[ebp], 4
	jne	SHORT $LN111@WndProc
$LN110@WndProc:
; Line 2835
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _w$90156[ebp]
	imul	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _r$90162[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	sub	ecx, DWORD PTR _ex_width$90160[ebp]
	mov	edx, DWORD PTR _r$90162[ebp]
	mov	DWORD PTR [edx], ecx
; Line 2836
	jmp	SHORT $LN109@WndProc
$LN111@WndProc:
; Line 2837
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _w$90156[ebp]
	imul	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR _r$90162[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	add	eax, DWORD PTR _ex_width$90160[ebp]
	mov	ecx, DWORD PTR _r$90162[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN109@WndProc:
; Line 2839
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _h$90157[ebp]
	imul	eax, DWORD PTR [edx+296]
	mov	ecx, DWORD PTR _r$90162[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	add	edx, DWORD PTR _ex_height$90161[ebp]
	mov	eax, DWORD PTR _r$90162[ebp]
	cmp	DWORD PTR [eax+12], edx
	je	SHORT $LN108@WndProc
; Line 2840
	mov	DWORD PTR _rv$90158[ebp], 1
$LN108@WndProc:
; Line 2843
	cmp	DWORD PTR _wParam$[ebp], 3
	je	SHORT $LN106@WndProc
	cmp	DWORD PTR _wParam$[ebp], 5
	je	SHORT $LN106@WndProc
	cmp	DWORD PTR _wParam$[ebp], 4
	jne	SHORT $LN107@WndProc
$LN106@WndProc:
; Line 2844
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _h$90157[ebp]
	imul	edx, DWORD PTR [ecx+296]
	mov	eax, DWORD PTR _r$90162[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, edx
	sub	ecx, DWORD PTR _ex_height$90161[ebp]
	mov	edx, DWORD PTR _r$90162[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 2845
	jmp	SHORT $LN105@WndProc
$LN107@WndProc:
; Line 2846
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR _h$90157[ebp]
	imul	ecx, DWORD PTR [eax+296]
	mov	edx, DWORD PTR _r$90162[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, ecx
	add	eax, DWORD PTR _ex_height$90161[ebp]
	mov	ecx, DWORD PTR _r$90162[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN105@WndProc:
; Line 2848
	mov	eax, DWORD PTR _rv$90158[ebp]
	jmp	$LN254@WndProc
$LN104@WndProc:
; Line 2852
	mov	DWORD PTR ?fullscr_on_max@?1??WndProc@@9@9, 1
; Line 2853
	jmp	$LN252@WndProc
$LN103@WndProc:
; Line 2855
	call	_sys_cursor_update
; Line 2856
	jmp	$LN252@WndProc
$LN102@WndProc:
; Line 2858
	push	106					; 0000006aH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _resize_action$[ebp], eax
; Line 2868
	cmp	DWORD PTR _wParam$[ebp], 1
	jne	SHORT $LN101@WndProc
; Line 2871
	push	109					; 0000006dH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN274@WndProc
	mov	ecx, DWORD PTR _window_name
	mov	DWORD PTR tv1143[ebp], ecx
	jmp	SHORT $LN275@WndProc
$LN274@WndProc:
	mov	edx, DWORD PTR _icon_name
	mov	DWORD PTR tv1143[ebp], edx
$LN275@WndProc:
	mov	esi, esp
	mov	eax, DWORD PTR tv1143[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowTextA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN101@WndProc:
; Line 2872
	cmp	DWORD PTR _wParam$[ebp], 0
	je	SHORT $LN99@WndProc
	cmp	DWORD PTR _wParam$[ebp], 2
	jne	SHORT $LN100@WndProc
$LN99@WndProc:
; Line 2873
	mov	esi, esp
	mov	edx, DWORD PTR _window_name
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowTextA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN100@WndProc:
; Line 2874
	cmp	DWORD PTR _wParam$[ebp], 0
	jne	SHORT $LN98@WndProc
; Line 2875
	mov	DWORD PTR ?processed_resize@?1??WndProc@@9@9, 0
; Line 2876
	call	_clear_full_screen
; Line 2877
	cmp	DWORD PTR ?processed_resize@?1??WndProc@@9@9, 0
	je	SHORT $LN98@WndProc
; Line 2884
	xor	eax, eax
	jmp	$LN254@WndProc
$LN98@WndProc:
; Line 2887
	cmp	DWORD PTR _wParam$[ebp], 2
	jne	SHORT $LN96@WndProc
	cmp	DWORD PTR ?fullscr_on_max@?1??WndProc@@9@9, 0
	je	SHORT $LN96@WndProc
; Line 2888
	mov	DWORD PTR ?fullscr_on_max@?1??WndProc@@9@9, 0
; Line 2889
	mov	DWORD PTR ?processed_resize@?1??WndProc@@9@9, 0
; Line 2890
	call	_make_full_screen
; Line 2891
	cmp	DWORD PTR ?processed_resize@?1??WndProc@@9@9, 0
	je	SHORT $LN96@WndProc
; Line 2898
	xor	eax, eax
	jmp	$LN254@WndProc
$LN96@WndProc:
; Line 2902
	mov	DWORD PTR ?processed_resize@?1??WndProc@@9@9, 1
; Line 2904
	cmp	DWORD PTR _resize_action$[ebp], 1
	jne	SHORT $LN94@WndProc
; Line 2906
	push	-1
	call	_reset_window
	add	esp, 4
; Line 2907
	jmp	$LN93@WndProc
$LN94@WndProc:
; Line 2910
	push	122					; 0000007aH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _window_border$90188[ebp], eax
; Line 2912
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	mov	DWORD PTR _width$90184[ebp], eax
; Line 2913
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR _height$90185[ebp], edx
; Line 2915
	cmp	DWORD PTR _wParam$[ebp], 2
	jne	$LN92@WndProc
	cmp	DWORD PTR _was_zoomed, 0
	jne	$LN92@WndProc
; Line 2916
	mov	DWORD PTR _was_zoomed, 1
; Line 2917
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR _prev_rows, ecx
; Line 2918
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+300]
	mov	DWORD PTR _prev_cols, eax
; Line 2919
	cmp	DWORD PTR _resize_action$[ebp], 0
	jne	$LN91@WndProc
; Line 2920
	mov	eax, DWORD PTR _width$90184[ebp]
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _w$90186[ebp], eax
; Line 2921
	cmp	DWORD PTR _w$90186[ebp], 1
	jge	SHORT $LN90@WndProc
	mov	DWORD PTR _w$90186[ebp], 1
$LN90@WndProc:
; Line 2922
	mov	eax, DWORD PTR _height$90185[ebp]
	cdq
	idiv	DWORD PTR _font_height
	mov	DWORD PTR _h$90187[ebp], eax
; Line 2923
	cmp	DWORD PTR _h$90187[ebp], 1
	jge	SHORT $LN89@WndProc
	mov	DWORD PTR _h$90187[ebp], 1
$LN89@WndProc:
; Line 2925
	cmp	DWORD PTR _resizing, 0
	je	SHORT $LN88@WndProc
; Line 2933
	mov	DWORD PTR ?need_backend_resize@?1??WndProc@@9@9, 1
; Line 2934
	mov	ecx, DWORD PTR _h$90187[ebp]
	push	ecx
	push	111					; 0000006fH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 2935
	mov	eax, DWORD PTR _w$90186[ebp]
	push	eax
	push	110					; 0000006eH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 2936
	jmp	SHORT $LN91@WndProc
$LN88@WndProc:
; Line 2938
	push	91					; 0000005bH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _w$90186[ebp]
	push	eax
	mov	ecx, DWORD PTR _h$90187[ebp]
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_size
	add	esp, 16					; 00000010H
$LN91@WndProc:
; Line 2941
	push	0
	call	_reset_window
	add	esp, 4
	jmp	$LN93@WndProc
$LN92@WndProc:
; Line 2942
	cmp	DWORD PTR _wParam$[ebp], 0
	jne	$LN85@WndProc
	cmp	DWORD PTR _was_zoomed, 0
	je	$LN85@WndProc
; Line 2943
	mov	DWORD PTR _was_zoomed, 0
; Line 2944
	cmp	DWORD PTR _resize_action$[ebp], 0
	jne	$LN84@WndProc
; Line 2945
	mov	eax, DWORD PTR _window_border$90188[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _width$90184[ebp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _w$90186[ebp], eax
; Line 2946
	cmp	DWORD PTR _w$90186[ebp], 1
	jge	SHORT $LN83@WndProc
	mov	DWORD PTR _w$90186[ebp], 1
$LN83@WndProc:
; Line 2947
	mov	edx, DWORD PTR _window_border$90188[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _height$90185[ebp]
	sub	eax, edx
	cdq
	idiv	DWORD PTR _font_height
	mov	DWORD PTR _h$90187[ebp], eax
; Line 2948
	cmp	DWORD PTR _h$90187[ebp], 1
	jge	SHORT $LN82@WndProc
	mov	DWORD PTR _h$90187[ebp], 1
$LN82@WndProc:
; Line 2949
	push	91					; 0000005bH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _w$90186[ebp]
	push	ecx
	mov	edx, DWORD PTR _h$90187[ebp]
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_size
	add	esp, 16					; 00000010H
; Line 2950
	push	2
	call	_reset_window
	add	esp, 4
	jmp	SHORT $LN81@WndProc
$LN84@WndProc:
; Line 2951
	cmp	DWORD PTR _resize_action$[ebp], 2
	je	SHORT $LN80@WndProc
; Line 2952
	push	2
	call	_reset_window
	add	esp, 4
; Line 2953
	jmp	SHORT $LN81@WndProc
$LN80@WndProc:
; Line 2954
	push	0
	call	_reset_window
	add	esp, 4
$LN81@WndProc:
; Line 2955
	jmp	$LN93@WndProc
$LN85@WndProc:
	cmp	DWORD PTR _wParam$[ebp], 1
	jne	SHORT $LN77@WndProc
; Line 2957
	jmp	$LN93@WndProc
$LN77@WndProc:
; Line 2959
	cmp	DWORD PTR _resize_action$[ebp], 0
	je	SHORT $LN74@WndProc
	cmp	DWORD PTR _resize_action$[ebp], 3
	jne	$LN75@WndProc
	call	_is_alt_pressed
	test	eax, eax
	jne	$LN75@WndProc
$LN74@WndProc:
; Line 2960
	mov	ecx, DWORD PTR _window_border$90188[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _width$90184[ebp]
	sub	eax, ecx
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _w$90186[ebp], eax
; Line 2961
	cmp	DWORD PTR _w$90186[ebp], 1
	jge	SHORT $LN73@WndProc
	mov	DWORD PTR _w$90186[ebp], 1
$LN73@WndProc:
; Line 2962
	mov	edx, DWORD PTR _window_border$90188[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _height$90185[ebp]
	sub	eax, edx
	cdq
	idiv	DWORD PTR _font_height
	mov	DWORD PTR _h$90187[ebp], eax
; Line 2963
	cmp	DWORD PTR _h$90187[ebp], 1
	jge	SHORT $LN72@WndProc
	mov	DWORD PTR _h$90187[ebp], 1
$LN72@WndProc:
; Line 2965
	cmp	DWORD PTR _resizing, 0
	je	SHORT $LN71@WndProc
; Line 2972
	mov	DWORD PTR ?need_backend_resize@?1??WndProc@@9@9, 1
; Line 2973
	mov	eax, DWORD PTR _h$90187[ebp]
	push	eax
	push	111					; 0000006fH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 2974
	mov	edx, DWORD PTR _w$90186[ebp]
	push	edx
	push	110					; 0000006eH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_set_int
	add	esp, 12					; 0000000cH
; Line 2975
	jmp	SHORT $LN70@WndProc
$LN71@WndProc:
; Line 2976
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _w$90186[ebp]
	push	edx
	mov	eax, DWORD PTR _h$90187[ebp]
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_size
	add	esp, 16					; 00000010H
$LN70@WndProc:
; Line 2978
	jmp	SHORT $LN93@WndProc
$LN75@WndProc:
; Line 2979
	push	0
	call	_reset_window
	add	esp, 4
$LN93@WndProc:
; Line 2982
	call	_sys_cursor_update
; Line 2983
	xor	eax, eax
	jmp	$LN254@WndProc
$LN68@WndProc:
; Line 2985
	mov	edx, DWORD PTR _wParam$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	mov	DWORD PTR tv1243[ebp], eax
	cmp	DWORD PTR tv1243[ebp], 7
	ja	$LN66@WndProc
	mov	ecx, DWORD PTR tv1243[ebp]
	jmp	DWORD PTR $LN317@WndProc[ecx*4]
$LN65@WndProc:
; Line 2987
	push	0
	push	-1
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_scroll
	add	esp, 12					; 0000000cH
; Line 2988
	jmp	$LN66@WndProc
$LN64@WndProc:
; Line 2990
	push	0
	push	1
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_scroll
	add	esp, 12					; 0000000cH
; Line 2991
	jmp	$LN66@WndProc
$LN63@WndProc:
; Line 2993
	push	1
	push	0
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_scroll
	add	esp, 12					; 0000000cH
; Line 2994
	jmp	$LN66@WndProc
$LN62@WndProc:
; Line 2996
	push	-1
	push	0
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_scroll
	add	esp, 12					; 0000000cH
; Line 2997
	jmp	$LN66@WndProc
$LN61@WndProc:
; Line 2999
	mov	eax, DWORD PTR _term
	mov	eax, DWORD PTR [eax+296]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_scroll
	add	esp, 12					; 0000000cH
; Line 3000
	jmp	$LN66@WndProc
$LN60@WndProc:
; Line 3002
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	neg	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	0
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_scroll
	add	esp, 12					; 0000000cH
; Line 3003
	jmp	SHORT $LN66@WndProc
$LN59@WndProc:
; Line 3013
	mov	DWORD PTR _si$90231[ebp], 28		; 0000001cH
; Line 3014
	mov	DWORD PTR _si$90231[ebp+4], 16		; 00000010H
; Line 3015
	mov	esi, esp
	lea	ecx, DWORD PTR _si$90231[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetScrollInfo@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN58@WndProc
; Line 3016
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR _si$90231[ebp+24], ecx
$LN58@WndProc:
; Line 3017
	mov	edx, DWORD PTR _si$90231[ebp+24]
	push	edx
	push	1
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_scroll
	add	esp, 12					; 0000000cH
$LN66@WndProc:
; Line 3021
	jmp	$LN252@WndProc
$LN57@WndProc:
; Line 3023
	mov	ecx, DWORD PTR _wParam$[ebp]
	cmp	ecx, DWORD PTR _hwnd$[ebp]
	je	SHORT $LN56@WndProc
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN56@WndProc
; Line 3024
	push	0
	call	_get_ctx
	add	esp, 4
	mov	DWORD PTR _hdc$90239[ebp], eax
; Line 3025
	cmp	DWORD PTR _hdc$90239[ebp], 0
	je	SHORT $LN56@WndProc
; Line 3026
	mov	esi, esp
	mov	edx, DWORD PTR _hdc$90239[ebp]
	push	edx
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jbe	SHORT $LN54@WndProc
; Line 3027
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$90239[ebp]
	push	eax
	call	DWORD PTR __imp__UpdateColors@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN54@WndProc:
; Line 3028
	mov	ecx, DWORD PTR _hdc$90239[ebp]
	push	ecx
	call	_free_ctx
	add	esp, 4
$LN56@WndProc:
; Line 3031
	jmp	$LN252@WndProc
$LN53@WndProc:
; Line 3033
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN52@WndProc
; Line 3034
	push	0
	call	_get_ctx
	add	esp, 4
	mov	DWORD PTR _hdc$90246[ebp], eax
; Line 3035
	cmp	DWORD PTR _hdc$90246[ebp], 0
	je	SHORT $LN52@WndProc
; Line 3036
	mov	esi, esp
	mov	edx, DWORD PTR _hdc$90246[ebp]
	push	edx
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jbe	SHORT $LN50@WndProc
; Line 3037
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$90246[ebp]
	push	eax
	call	DWORD PTR __imp__UpdateColors@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN50@WndProc:
; Line 3038
	mov	ecx, DWORD PTR _hdc$90246[ebp]
	push	ecx
	call	_free_ctx
	add	esp, 4
; Line 3039
	mov	eax, 1
	jmp	$LN254@WndProc
$LN52@WndProc:
; Line 3042
	xor	eax, eax
	jmp	$LN254@WndProc
$LN49@WndProc:
; Line 3051
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	call	_noise_ultralight
	add	esp, 4
; Line 3064
	cmp	DWORD PTR _wParam$[ebp], 229		; 000000e5H
	jne	SHORT $LN48@WndProc
; Line 3065
	cmp	DWORD PTR _message$[ebp], 256		; 00000100H
	jne	SHORT $LN47@WndProc
; Line 3067
	mov	eax, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _m$90255[ebp], eax
; Line 3068
	mov	DWORD PTR _m$90255[ebp+4], 256		; 00000100H
; Line 3069
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR _m$90255[ebp+8], ecx
; Line 3070
	mov	edx, DWORD PTR _lParam$[ebp]
	and	edx, 57343				; 0000dfffH
	mov	DWORD PTR _m$90255[ebp+12], edx
; Line 3071
	mov	esi, esp
	lea	eax, DWORD PTR _m$90255[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3072
	jmp	SHORT $LN46@WndProc
$LN47@WndProc:
	jmp	$LN252@WndProc
$LN46@WndProc:
; Line 3073
	jmp	$LN45@WndProc
$LN48@WndProc:
; Line 3074
	lea	ecx, DWORD PTR _buf$90251[ebp]
	push	ecx
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	call	_TranslateKey
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$90252[ebp], eax
; Line 3075
	cmp	DWORD PTR _len$90252[ebp], -1
	jne	SHORT $LN44@WndProc
; Line 3076
	mov	esi, esp
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DefWindowProcA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN254@WndProc
$LN44@WndProc:
; Line 3078
	cmp	DWORD PTR _len$90252[ebp], 0
	je	SHORT $LN45@WndProc
; Line 3087
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_seen_key_event
	add	esp, 4
; Line 3088
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN42@WndProc
; Line 3089
	push	1
	mov	ecx, DWORD PTR _len$90252[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$90251[ebp]
	push	edx
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_ldisc_send
	add	esp, 16					; 00000010H
$LN42@WndProc:
; Line 3090
	push	0
	call	_show_mouseptr
	add	esp, 4
$LN45@WndProc:
; Line 3094
	xor	eax, eax
	jmp	$LN254@WndProc
$LN41@WndProc:
; Line 3098
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	_set_input_locale
	add	esp, 4
; Line 3099
	call	_sys_cursor_update
; Line 3100
	jmp	$LN252@WndProc
$LN40@WndProc:
; Line 3103
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_ImmGetContext@4
	mov	DWORD PTR _hImc$90264[ebp], eax
; Line 3104
	push	OFFSET _lfont
	mov	eax, DWORD PTR _hImc$90264[ebp]
	push	eax
	call	_ImmSetCompositionFontA@8
; Line 3105
	mov	ecx, DWORD PTR _hImc$90264[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_ImmReleaseContext@8
; Line 3107
	jmp	$LN252@WndProc
$LN39@WndProc:
; Line 3115
	cmp	DWORD PTR _osVersion+16, 1
	je	SHORT $LN37@WndProc
	cmp	DWORD PTR _osVersion+16, 0
	jne	SHORT $LN38@WndProc
$LN37@WndProc:
	jmp	$LN252@WndProc
$LN38@WndProc:
; Line 3117
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 2048				; 00000800H
	jne	SHORT $LN36@WndProc
; Line 3118
	jmp	$LN252@WndProc
$LN36@WndProc:
; Line 3120
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	_ImmGetContext@4
	mov	DWORD PTR _hIMC$90266[ebp], eax
; Line 3121
	push	0
	push	0
	push	2048					; 00000800H
	mov	edx, DWORD PTR _hIMC$90266[ebp]
	push	edx
	call	_ImmGetCompositionStringW@16
	mov	DWORD PTR _n$90267[ebp], eax
; Line 3123
	cmp	DWORD PTR _n$90267[ebp], 0
	jle	$LN35@WndProc
; Line 3125
	push	1
	mov	eax, DWORD PTR _n$90267[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buff$90268[ebp], eax
; Line 3126
	mov	ecx, DWORD PTR _n$90267[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$90268[ebp]
	push	edx
	push	2048					; 00000800H
	mov	eax, DWORD PTR _hIMC$90266[ebp]
	push	eax
	call	_ImmGetCompositionStringW@16
; Line 3133
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_seen_key_event
	add	esp, 4
; Line 3135
	cmp	DWORD PTR _ldisc, 0
	je	$LN34@WndProc
; Line 3136
	mov	DWORD PTR _i$90274[ebp], 0
	jmp	SHORT $LN33@WndProc
$LN32@WndProc:
	mov	edx, DWORD PTR _i$90274[ebp]
	add	edx, 2
	mov	DWORD PTR _i$90274[ebp], edx
$LN33@WndProc:
	mov	eax, DWORD PTR _i$90274[ebp]
	cmp	eax, DWORD PTR _n$90267[ebp]
	jge	$LN34@WndProc
; Line 3137
	mov	ecx, DWORD PTR _buff$90268[ebp]
	add	ecx, DWORD PTR _i$90274[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _hs$90281[ebp], dx
; Line 3138
	movzx	eax, WORD PTR _hs$90281[ebp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN30@WndProc
	movzx	ecx, WORD PTR _hs$90281[ebp]
	cmp	ecx, 56319				; 0000dbffH
	jg	SHORT $LN30@WndProc
	mov	edx, DWORD PTR _i$90274[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _n$90267[ebp]
	jge	SHORT $LN30@WndProc
; Line 3139
	mov	eax, DWORD PTR _buff$90268[ebp]
	add	eax, DWORD PTR _i$90274[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR _ls$90284[ebp], cx
; Line 3140
	movzx	edx, WORD PTR _ls$90284[ebp]
	cmp	edx, 56320				; 0000dc00H
	jl	SHORT $LN30@WndProc
	movzx	eax, WORD PTR _ls$90284[ebp]
	cmp	eax, 57343				; 0000dfffH
	jg	SHORT $LN30@WndProc
; Line 3141
	push	1
	push	2
	mov	ecx, DWORD PTR _buff$90268[ebp]
	add	ecx, DWORD PTR _i$90274[ebp]
	push	ecx
	mov	edx, DWORD PTR _ldisc
	push	edx
	call	_luni_send
	add	esp, 16					; 00000010H
; Line 3142
	mov	eax, DWORD PTR _i$90274[ebp]
	add	eax, 2
	mov	DWORD PTR _i$90274[ebp], eax
; Line 3143
	jmp	$LN32@WndProc
$LN30@WndProc:
; Line 3146
	push	1
	push	1
	mov	ecx, DWORD PTR _buff$90268[ebp]
	add	ecx, DWORD PTR _i$90274[ebp]
	push	ecx
	mov	edx, DWORD PTR _ldisc
	push	edx
	call	_luni_send
	add	esp, 16					; 00000010H
; Line 3147
	jmp	$LN32@WndProc
$LN34@WndProc:
; Line 3149
	mov	eax, DWORD PTR _buff$90268[ebp]
	push	eax
	call	_free
	add	esp, 4
$LN35@WndProc:
; Line 3151
	mov	ecx, DWORD PTR _hIMC$90266[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	_ImmReleaseContext@8
; Line 3152
	mov	eax, 1
	jmp	$LN254@WndProc
$LN28@WndProc:
; Line 3156
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN27@WndProc
; Line 3159
	mov	cl, BYTE PTR _wParam$[ebp]
	mov	BYTE PTR _buf$90291[ebp+1], cl
; Line 3160
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 8
	mov	BYTE PTR _buf$90291[ebp], dl
; Line 3161
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_seen_key_event
	add	esp, 4
; Line 3162
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN26@WndProc
; Line 3163
	push	1
	push	2
	lea	ecx, DWORD PTR _buf$90291[ebp]
	push	ecx
	mov	edx, DWORD PTR _kbd_codepage
	push	edx
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_lpage_send
	add	esp, 20					; 00000014H
$LN26@WndProc:
; Line 3164
	jmp	SHORT $LN25@WndProc
$LN27@WndProc:
; Line 3165
	mov	cl, BYTE PTR _wParam$[ebp]
	mov	BYTE PTR _c$90294[ebp], cl
; Line 3166
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_seen_key_event
	add	esp, 4
; Line 3167
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN25@WndProc
; Line 3168
	push	1
	push	1
	lea	eax, DWORD PTR _c$90294[ebp]
	push	eax
	mov	ecx, DWORD PTR _kbd_codepage
	push	ecx
	mov	edx, DWORD PTR _ldisc
	push	edx
	call	_lpage_send
	add	esp, 20					; 00000014H
$LN25@WndProc:
; Line 3170
	xor	eax, eax
	jmp	$LN254@WndProc
$LN23@WndProc:
; Line 3180
	mov	al, BYTE PTR _wParam$[ebp]
	mov	BYTE PTR _c$90298[ebp], al
; Line 3181
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_seen_key_event
	add	esp, 4
; Line 3182
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN22@WndProc
; Line 3183
	push	1
	push	1
	lea	edx, DWORD PTR _c$90298[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_lpage_send
	add	esp, 20					; 00000014H
$LN22@WndProc:
; Line 3185
	xor	eax, eax
	jmp	$LN254@WndProc
$LN21@WndProc:
; Line 3187
	push	129					; 00000081H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@WndProc
; Line 3190
	call	_systopalette
; Line 3191
	call	_init_palette
; Line 3193
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_invalidate
	add	esp, 4
$LN20@WndProc:
; Line 3195
	jmp	$LN252@WndProc
$LN19@WndProc:
; Line 3198
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _c$90304[ebp], eax
; Line 3199
	mov	esi, esp
	mov	ecx, DWORD PTR _c$90304[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _c$90304[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _c$90304[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _c$90304[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3200
	mov	eax, DWORD PTR _c$90304[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 3202
	xor	eax, eax
	jmp	$LN254@WndProc
$LN18@WndProc:
; Line 3204
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	call	_process_clipdata
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@WndProc
; Line 3205
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_do_paste
	add	esp, 4
$LN17@WndProc:
; Line 3206
	xor	eax, eax
	jmp	$LN254@WndProc
$LN16@WndProc:
; Line 3208
	mov	ecx, DWORD PTR _message$[ebp]
	cmp	ecx, DWORD PTR _wm_mousewheel
	je	SHORT $LN14@WndProc
	cmp	DWORD PTR _message$[ebp], 522		; 0000020aH
	jne	$LN252@WndProc
$LN14@WndProc:
; Line 3209
	mov	DWORD PTR _shift_pressed$90312[ebp], 0
	mov	DWORD PTR _control_pressed$90313[ebp], 0
; Line 3211
	cmp	DWORD PTR _message$[ebp], 522		; 0000020aH
	jne	SHORT $LN13@WndProc
; Line 3212
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	add	eax, DWORD PTR _wheel_accumulator
	mov	DWORD PTR _wheel_accumulator, eax
; Line 3213
	mov	ecx, DWORD PTR _wParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 4
	mov	DWORD PTR _shift_pressed$90312[ebp], edx
; Line 3214
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 8
	mov	DWORD PTR _control_pressed$90313[ebp], ecx
; Line 3215
	jmp	SHORT $LN10@WndProc
$LN13@WndProc:
; Line 3217
	mov	edx, DWORD PTR _wheel_accumulator
	add	edx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR _wheel_accumulator, edx
; Line 3218
	mov	esi, esp
	lea	eax, DWORD PTR _keys$90323[ebp]
	push	eax
	call	DWORD PTR __imp__GetKeyboardState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN10@WndProc
; Line 3219
	movzx	ecx, BYTE PTR _keys$90323[ebp+16]
	and	ecx, 128				; 00000080H
	mov	DWORD PTR _shift_pressed$90312[ebp], ecx
; Line 3220
	movzx	edx, BYTE PTR _keys$90323[ebp+17]
	and	edx, 128				; 00000080H
	mov	DWORD PTR _control_pressed$90313[ebp], edx
$LN10@WndProc:
; Line 3225
	mov	eax, DWORD PTR _wheel_accumulator
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 120				; 00000078H
	jl	$LN9@WndProc
; Line 3229
	cmp	DWORD PTR _wheel_accumulator, 0
	jle	SHORT $LN8@WndProc
; Line 3230
	mov	DWORD PTR _b$90329[ebp], 7
; Line 3231
	mov	ecx, DWORD PTR _wheel_accumulator
	sub	ecx, 120				; 00000078H
	mov	DWORD PTR _wheel_accumulator, ecx
	jmp	SHORT $LN7@WndProc
$LN8@WndProc:
; Line 3232
	cmp	DWORD PTR _wheel_accumulator, 0
	jge	SHORT $LN6@WndProc
; Line 3233
	mov	DWORD PTR _b$90329[ebp], 8
; Line 3234
	mov	edx, DWORD PTR _wheel_accumulator
	add	edx, 120				; 00000078H
	mov	DWORD PTR _wheel_accumulator, edx
; Line 3235
	jmp	SHORT $LN7@WndProc
$LN6@WndProc:
; Line 3236
	jmp	$LN9@WndProc
$LN7@WndProc:
; Line 3240
	cmp	DWORD PTR _send_raw_mouse, 0
	je	$LN4@WndProc
	push	137					; 00000089H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@WndProc
	cmp	DWORD PTR _shift_pressed$90312[ebp], 0
	jne	$LN4@WndProc
$LN3@WndProc:
; Line 3244
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	mov	DWORD PTR _p$90336[ebp], edx
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _p$90336[ebp+4], ecx
; Line 3245
	mov	esi, esp
	lea	edx, DWORD PTR _p$90336[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__ScreenToClient@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN2@WndProc
; Line 3251
	cmp	DWORD PTR _p$90336[ebp+4], 0
	jge	SHORT $LN276@WndProc
	mov	ecx, DWORD PTR _p$90336[ebp+4]
	sub	ecx, DWORD PTR _font_height
	add	ecx, 1
	mov	DWORD PTR tv1512[ebp], ecx
	jmp	SHORT $LN277@WndProc
$LN276@WndProc:
	mov	edx, DWORD PTR _p$90336[ebp+4]
	mov	DWORD PTR tv1512[ebp], edx
$LN277@WndProc:
	cmp	DWORD PTR _p$90336[ebp], 0
	jge	SHORT $LN278@WndProc
	mov	eax, DWORD PTR _p$90336[ebp]
	sub	eax, DWORD PTR _font_width
	add	eax, 1
	mov	DWORD PTR tv1519[ebp], eax
	jmp	SHORT $LN279@WndProc
$LN278@WndProc:
	mov	ecx, DWORD PTR _p$90336[ebp]
	mov	DWORD PTR tv1519[ebp], ecx
$LN279@WndProc:
	call	_is_alt_pressed
	push	eax
	mov	edx, DWORD PTR _control_pressed$90313[ebp]
	push	edx
	mov	eax, DWORD PTR _shift_pressed$90312[ebp]
	push	eax
	mov	eax, DWORD PTR tv1512[ebp]
	sub	eax, DWORD PTR _offset_height
	cdq
	idiv	DWORD PTR _font_height
	push	eax
	mov	eax, DWORD PTR tv1519[ebp]
	sub	eax, DWORD PTR _offset_width
	cdq
	idiv	DWORD PTR _font_width
	push	eax
	push	1
	mov	ecx, DWORD PTR _b$90329[ebp]
	push	ecx
	call	_translate_button
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _b$90329[ebp]
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_mouse
	add	esp, 36					; 00000024H
$LN2@WndProc:
; Line 3253
	jmp	SHORT $LN1@WndProc
$LN4@WndProc:
; Line 3257
	cmp	DWORD PTR _b$90329[ebp], 7
	jne	SHORT $LN280@WndProc
	mov	ecx, DWORD PTR _term
	mov	eax, DWORD PTR [ecx+296]
	neg	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv1535[ebp], eax
	jmp	SHORT $LN281@WndProc
$LN280@WndProc:
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+296]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv1535[ebp], eax
$LN281@WndProc:
	mov	eax, DWORD PTR tv1535[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_scroll
	add	esp, 12					; 0000000cH
$LN1@WndProc:
; Line 3259
	jmp	$LN10@WndProc
$LN9@WndProc:
; Line 3260
	xor	eax, eax
	jmp	SHORT $LN254@WndProc
$LN252@WndProc:
; Line 3268
	mov	esi, esp
	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DefWindowProcA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN254@WndProc:
; Line 3269
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN309@WndProc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3132				; 00000c3cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN309@WndProc:
	DD	18					; 00000012H
	DD	$LN308@WndProc
$LN308@WndProc:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN290@WndProc
	DD	-2080					; fffff7e0H
	DD	2048					; 00000800H
	DD	$LN291@WndProc
	DD	-2120					; fffff7b8H
	DD	30					; 0000001eH
	DD	$LN292@WndProc
	DD	-2208					; fffff760H
	DD	68					; 00000044H
	DD	$LN293@WndProc
	DD	-2232					; fffff748H
	DD	16					; 00000010H
	DD	$LN294@WndProc
	DD	-2256					; fffff730H
	DD	12					; 0000000cH
	DD	$LN295@WndProc
	DD	-2332					; fffff6e4H
	DD	8
	DD	$LN296@WndProc
	DD	-2360					; fffff6c8H
	DD	8
	DD	$LN297@WndProc
	DD	-2412					; fffff694H
	DD	40					; 00000028H
	DD	$LN298@WndProc
	DD	-2488					; fffff648H
	DD	64					; 00000040H
	DD	$LN299@WndProc
	DD	-2628					; fffff5bcH
	DD	28					; 0000001cH
	DD	$LN300@WndProc
	DD	-2664					; fffff598H
	DD	20					; 00000014H
	DD	$LN301@WndProc
	DD	-2704					; fffff570H
	DD	28					; 0000001cH
	DD	$LN302@WndProc
	DD	-2744					; fffff548H
	DD	2
	DD	$LN303@WndProc
	DD	-2753					; fffff53fH
	DD	1
	DD	$LN304@WndProc
	DD	-2765					; fffff533H
	DD	1
	DD	$LN305@WndProc
	DD	-3044					; fffff41cH
	DD	256					; 00000100H
	DD	$LN306@WndProc
	DD	-3064					; fffff408H
	DD	8
	DD	$LN307@WndProc
$LN307@WndProc:
	DB	112					; 00000070H
	DB	0
$LN306@WndProc:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	0
$LN305@WndProc:
	DB	99					; 00000063H
	DB	0
$LN304@WndProc:
	DB	99					; 00000063H
	DB	0
$LN303@WndProc:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN302@WndProc:
	DB	109					; 0000006dH
	DB	0
$LN301@WndProc:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN300@WndProc:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	0
$LN299@WndProc:
	DB	112					; 00000070H
	DB	0
$LN298@WndProc:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN297@WndProc:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
$LN296@WndProc:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN295@WndProc:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
$LN294@WndProc:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	0
$LN293@WndProc:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	0
$LN292@WndProc:
	DB	99					; 00000063H
	DB	0
$LN291@WndProc:
	DB	98					; 00000062H
	DB	0
$LN290@WndProc:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN310@WndProc:
	DD	$LN247@WndProc
	DD	$LN243@WndProc
	DD	$LN103@WndProc
	DD	$LN102@WndProc
	DD	$LN136@WndProc
	DD	$LN135@WndProc
	DD	$LN141@WndProc
	DD	$LN246@WndProc
	DD	$LN21@WndProc
	DD	$LN41@WndProc
	DD	$LN147@WndProc
	DD	$LN16@WndProc
$LN287@WndProc:
	DB	0
	DB	1
	DB	2
	DB	11					; 0000000bH
	DB	3
	DB	11					; 0000000bH
	DB	4
	DB	5
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	6
	DB	7
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	8
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	9
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
$LN311@WndProc:
	DD	$LN23@WndProc
	DD	$LN16@WndProc
	DD	$LN49@WndProc
	DD	$LN49@WndProc
	DD	$LN23@WndProc
$LN312@WndProc:
	DD	$LN39@WndProc
	DD	$LN16@WndProc
	DD	$LN240@WndProc
	DD	$LN240@WndProc
	DD	$LN251@WndProc
	DD	$LN16@WndProc
	DD	$LN68@WndProc
	DD	$LN16@WndProc
	DD	$LN242@WndProc
$LN313@WndProc:
	DD	$LN173@WndProc
	DD	$LN131@WndProc
	DD	$LN134@WndProc
	DD	$LN133@WndProc
	DD	$LN28@WndProc
	DD	$LN16@WndProc
$LN288@WndProc:
	DB	0
	DB	0
	DB	5
	DB	0
	DB	0
	DB	5
	DB	0
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	npad	2
$LN314@WndProc:
	DD	$LN104@WndProc
	DD	$LN19@WndProc
	DD	$LN137@WndProc
	DD	$LN18@WndProc
$LN315@WndProc:
	DD	$LN237@WndProc
	DD	$LN236@WndProc
	DD	$LN225@WndProc
	DD	$LN223@WndProc
	DD	$LN187@WndProc
	DD	$LN186@WndProc
	DD	$LN178@WndProc
$LN289@WndProc:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	npad	3
$LN316@WndProc:
	DD	$LN168@WndProc
	DD	$LN165@WndProc
	DD	$LN162@WndProc
	DD	$LN166@WndProc
	DD	$LN163@WndProc
	DD	$LN162@WndProc
	DD	$LN167@WndProc
	DD	$LN164@WndProc
$LN317@WndProc:
	DD	$LN62@WndProc
	DD	$LN63@WndProc
	DD	$LN60@WndProc
	DD	$LN61@WndProc
	DD	$LN59@WndProc
	DD	$LN59@WndProc
	DD	$LN64@WndProc
	DD	$LN65@WndProc
_WndProc@16 ENDP
_TEXT	ENDS
EXTRN	_select_result:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_params$ = -4						; size = 4
_vctx$ = 8						; size = 4
_wm_netevent_callback PROC
; Line 1147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1148
	mov	eax, DWORD PTR _vctx$[ebp]
	mov	DWORD PTR _params$[ebp], eax
; Line 1149
	mov	ecx, DWORD PTR _params$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _params$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_select_result
	add	esp, 8
; Line 1150
	mov	edx, DWORD PTR _vctx$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1151
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wm_netevent_callback ENDP
_TEXT	ENDS
EXTRN	__imp__GetMessageTime@0:PROC
_BSS	SEGMENT
_lasttime DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv89 = -12						; size = 4
tv90 = -8						; size = 4
_thistime$ = -4						; size = 4
_b$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_shift$ = 20						; size = 4
_ctrl$ = 24						; size = 4
_alt$ = 28						; size = 4
_click	PROC
; Line 1927
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1928
	mov	esi, esp
	call	DWORD PTR __imp__GetMessageTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _thistime$[ebp], eax
; Line 1931
	cmp	DWORD PTR _send_raw_mouse, 0
	je	SHORT $LN5@click
	cmp	DWORD PTR _shift$[ebp], 0
	je	SHORT $LN4@click
	push	137					; 00000089H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@click
$LN4@click:
; Line 1932
	mov	DWORD PTR _lastbtn, 0
; Line 1934
	mov	ecx, DWORD PTR _alt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	mov	eax, DWORD PTR _shift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_translate_button
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_mouse
	add	esp, 36					; 00000024H
; Line 1935
	jmp	$LN6@click
$LN5@click:
; Line 1938
	mov	eax, DWORD PTR _lastbtn
	cmp	eax, DWORD PTR _b$[ebp]
	jne	SHORT $LN3@click
	mov	ecx, DWORD PTR _thistime$[ebp]
	sub	ecx, DWORD PTR _lasttime
	cmp	ecx, DWORD PTR _dbltime
	jge	SHORT $LN3@click
; Line 1941
	cmp	DWORD PTR _lastact, 1
	jne	SHORT $LN10@click
	mov	DWORD PTR tv90[ebp], 2
	jmp	SHORT $LN11@click
$LN10@click:
	cmp	DWORD PTR _lastact, 2
	jne	SHORT $LN8@click
	mov	DWORD PTR tv89[ebp], 3
	jmp	SHORT $LN9@click
$LN8@click:
	xor	edx, edx
	cmp	DWORD PTR _lastact, 3
	sete	dl
	mov	DWORD PTR tv89[ebp], edx
$LN9@click:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv90[ebp], eax
$LN11@click:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _lastact, ecx
; Line 1942
	jmp	SHORT $LN2@click
$LN3@click:
; Line 1943
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _lastbtn, edx
; Line 1944
	mov	DWORD PTR _lastact, 1
$LN2@click:
; Line 1946
	cmp	DWORD PTR _lastact, 0
	je	SHORT $LN1@click
; Line 1948
	mov	eax, DWORD PTR _alt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _shift$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lastact
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_translate_button
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_mouse
	add	esp, 36					; 00000024H
$LN1@click:
; Line 1949
	mov	eax, DWORD PTR _thistime$[ebp]
	mov	DWORD PTR _lasttime, eax
$LN6@click:
; Line 1950
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_click	ENDP
; Function compile flags: /Odtp /RTCsu
_button$ = 8						; size = 4
_translate_button PROC
; Line 1957
	push	ebp
	mov	ebp, esp
; Line 1958
	cmp	DWORD PTR _button$[ebp], 1
	jne	SHORT $LN3@translate_
; Line 1959
	mov	eax, 4
	jmp	SHORT $LN4@translate_
$LN3@translate_:
; Line 1960
	cmp	DWORD PTR _button$[ebp], 2
	jne	SHORT $LN2@translate_
; Line 1962
	push	133					; 00000085H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 6
	jmp	SHORT $LN4@translate_
$LN2@translate_:
; Line 1963
	cmp	DWORD PTR _button$[ebp], 3
	jne	SHORT $LN1@translate_
; Line 1965
	push	133					; 00000085H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 5
	jmp	SHORT $LN4@translate_
$LN1@translate_:
; Line 1966
	xor	eax, eax
$LN4@translate_:
; Line 1967
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_translate_button ENDP
; Function compile flags: /Odtp /RTCsu
_show$ = 8						; size = 4
_show_mouseptr PROC
; Line 1970
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1974
	push	120					; 00000078H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@show_mouse
; Line 1975
	mov	DWORD PTR _show$[ebp], 1
$LN4@show_mouse:
; Line 1976
	cmp	DWORD PTR ?cursor_visible@?1??show_mouseptr@@9@9, 0
	je	SHORT $LN3@show_mouse
	cmp	DWORD PTR _show$[ebp], 0
	jne	SHORT $LN3@show_mouse
; Line 1977
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__ShowCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@show_mouse
$LN3@show_mouse:
; Line 1978
	cmp	DWORD PTR ?cursor_visible@?1??show_mouseptr@@9@9, 0
	jne	SHORT $LN2@show_mouse
	cmp	DWORD PTR _show$[ebp], 0
	je	SHORT $LN2@show_mouse
; Line 1979
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__ShowCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@show_mouse:
; Line 1980
	mov	ecx, DWORD PTR _show$[ebp]
	mov	DWORD PTR ?cursor_visible@?1??show_mouseptr@@9@9, ecx
; Line 1981
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_show_mouseptr ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -272						; size = 4
_keystate$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_is_alt_pressed PROC
; Line 1984
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1986
	mov	esi, esp
	lea	eax, DWORD PTR _keystate$[ebp]
	push	eax
	call	DWORD PTR __imp__GetKeyboardState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax
; Line 1987
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@is_alt_pre
; Line 1988
	xor	eax, eax
	jmp	SHORT $LN4@is_alt_pre
$LN3@is_alt_pre:
; Line 1989
	movzx	ecx, BYTE PTR _keystate$[ebp+18]
	and	ecx, 128				; 00000080H
	je	SHORT $LN2@is_alt_pre
; Line 1990
	mov	eax, 1
	jmp	SHORT $LN4@is_alt_pre
$LN2@is_alt_pre:
; Line 1991
	movzx	edx, BYTE PTR _keystate$[ebp+165]
	and	edx, 128				; 00000080H
	je	SHORT $LN1@is_alt_pre
; Line 1992
	mov	eax, 1
	jmp	SHORT $LN4@is_alt_pre
$LN1@is_alt_pre:
; Line 1993
	xor	eax, eax
$LN4@is_alt_pre:
; Line 1994
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@is_alt_pre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@is_alt_pre:
	DD	1
	DD	$LN7@is_alt_pre
$LN7@is_alt_pre:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN6@is_alt_pre
$LN6@is_alt_pre:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_is_alt_pressed ENDP
_TEXT	ENDS
PUBLIC	_sys_cursor
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cy$ = -8						; size = 4
_cx$ = -4						; size = 4
_frontend$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_sys_cursor PROC
; Line 3278
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3281
	mov	eax, DWORD PTR _term
	cmp	DWORD PTR [eax+308], 0
	jne	SHORT $LN2@sys_cursor
	jmp	SHORT $LN3@sys_cursor
$LN2@sys_cursor:
; Line 3287
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _font_width
	add	ecx, DWORD PTR _offset_width
	mov	DWORD PTR _cx$[ebp], ecx
; Line 3288
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _font_height
	add	edx, DWORD PTR _offset_height
	mov	DWORD PTR _cy$[ebp], edx
; Line 3289
	mov	eax, DWORD PTR _cx$[ebp]
	cmp	eax, DWORD PTR _caret_x
	jne	SHORT $LN1@sys_cursor
	mov	ecx, DWORD PTR _cy$[ebp]
	cmp	ecx, DWORD PTR _caret_y
	jne	SHORT $LN1@sys_cursor
; Line 3290
	jmp	SHORT $LN3@sys_cursor
$LN1@sys_cursor:
; Line 3291
	mov	edx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR _caret_x, edx
; Line 3292
	mov	eax, DWORD PTR _cy$[ebp]
	mov	DWORD PTR _caret_y, eax
; Line 3294
	call	_sys_cursor_update
$LN3@sys_cursor:
; Line 3295
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sys_cursor ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_ImmSetCompositionWindow@8:PROC
EXTRN	__imp__SetCaretPos@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hIMC$ = -44						; size = 4
_cf$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_sys_cursor_update PROC
; Line 3298
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3302
	mov	eax, DWORD PTR _term
	cmp	DWORD PTR [eax+308], 0
	jne	SHORT $LN5@sys_cursor@2
	jmp	$LN6@sys_cursor@2
$LN5@sys_cursor@2:
; Line 3304
	cmp	DWORD PTR _caret_x, 0
	jl	SHORT $LN3@sys_cursor@2
	cmp	DWORD PTR _caret_y, 0
	jge	SHORT $LN4@sys_cursor@2
$LN3@sys_cursor@2:
; Line 3305
	jmp	SHORT $LN6@sys_cursor@2
$LN4@sys_cursor@2:
; Line 3307
	mov	esi, esp
	mov	ecx, DWORD PTR _caret_y
	push	ecx
	mov	edx, DWORD PTR _caret_x
	push	edx
	call	DWORD PTR __imp__SetCaretPos@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3310
	cmp	DWORD PTR _osVersion+16, 0
	jne	SHORT $LN2@sys_cursor@2
	jmp	SHORT $LN6@sys_cursor@2
$LN2@sys_cursor@2:
; Line 3313
	cmp	DWORD PTR _osVersion+16, 1
	jne	SHORT $LN1@sys_cursor@2
	cmp	DWORD PTR _osVersion+8, 0
	jne	SHORT $LN1@sys_cursor@2
	jmp	SHORT $LN6@sys_cursor@2
$LN1@sys_cursor@2:
; Line 3316
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	_ImmGetContext@4
	mov	DWORD PTR _hIMC$[ebp], eax
; Line 3317
	mov	DWORD PTR _cf$[ebp], 2
; Line 3318
	mov	ecx, DWORD PTR _caret_x
	mov	DWORD PTR _cf$[ebp+4], ecx
; Line 3319
	mov	edx, DWORD PTR _caret_y
	mov	DWORD PTR _cf$[ebp+8], edx
; Line 3320
	lea	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hIMC$[ebp]
	push	ecx
	call	_ImmSetCompositionWindow@8
; Line 3322
	mov	edx, DWORD PTR _hIMC$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	_ImmReleaseContext@8
$LN6@sys_cursor@2:
; Line 3323
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@sys_cursor@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@sys_cursor@2:
	DD	1
	DD	$LN9@sys_cursor@2
$LN9@sys_cursor@2:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN8@sys_cursor@2
$LN8@sys_cursor@2:
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
_sys_cursor_update ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_do_text_internal
EXTRN	__imp__LineTo@12:PROC
EXTRN	__imp__MoveToEx@16:PROC
EXTRN	__imp__ExtTextOutW@32:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__IsDBCSLeadByteEx@8:PROC
EXTRN	_saferealloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv643 = -180						; size = 4
tv344 = -176						; size = 4
tv134 = -172						; size = 4
tv89 = -168						; size = 4
_dec$90557 = -164					; size = 4
_oldpen$90556 = -160					; size = 4
_i$90546 = -156						; size = 4
_i$90531 = -152						; size = 4
_dbcstext$90521 = -141					; size = 1
_dbcstext$90519 = -132					; size = 2
_mptr$90510 = -124					; size = 4
_nlen$90509 = -120					; size = 4
_i$90491 = -116						; size = 4
_rc_width$90460 = -112					; size = 4
_i$90459 = -108						; size = 4
_i$90438 = -104						; size = 4
_len2$ = -100						; size = 4
_lpDx_maybe$ = -96					; size = 4
_is_cursor$ = -92					; size = 4
_opaque$ = -88						; size = 4
_remaining$ = -84					; size = 4
_maxlen$ = -80						; size = 4
_xoffset$ = -76						; size = 4
_text_adjust$ = -72					; size = 4
_char_width$ = -68					; size = 4
_fnt_width$ = -64					; size = 4
_force_manual_underline$ = -60				; size = 4
_line_box$ = -52					; size = 16
_hdc$ = -32						; size = 4
_nfont$ = -28						; size = 4
_nbg$ = -24						; size = 4
_nfg$ = -20						; size = 4
_t$ = -16						; size = 4
_bg$ = -12						; size = 4
_fg$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_text$ = 20						; size = 4
_len$ = 24						; size = 4
_attr$ = 28						; size = 4
_lattr$ = 32						; size = 4
_do_text_internal PROC
; Line 3333
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3336
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _hdc$[ebp], eax
; Line 3338
	mov	DWORD PTR _force_manual_underline$[ebp], 0
; Line 3340
	mov	DWORD PTR _text_adjust$[ebp], 0
; Line 3341
	mov	DWORD PTR _xoffset$[ebp], 0
; Line 3343
	mov	DWORD PTR _is_cursor$[ebp], 0
; Line 3349
	mov	ecx, DWORD PTR _lattr$[ebp]
	and	ecx, 3
	mov	DWORD PTR _lattr$[ebp], ecx
; Line 3351
	xor	edx, edx
	cmp	DWORD PTR _lattr$[ebp], 0
	setne	dl
	add	edx, 1
	imul	edx, DWORD PTR _font_width
	mov	DWORD PTR _fnt_width$[ebp], edx
	mov	eax, DWORD PTR _fnt_width$[ebp]
	mov	DWORD PTR _char_width$[ebp], eax
; Line 3353
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 4194304				; 00400000H
	je	SHORT $LN109@do_text_in
; Line 3354
	mov	edx, DWORD PTR _char_width$[ebp]
	shl	edx, 1
	mov	DWORD PTR _char_width$[ebp], edx
$LN109@do_text_in:
; Line 3357
	cmp	DWORD PTR _lattr$[ebp], 0
	je	SHORT $LN108@do_text_in
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _term
	cmp	eax, DWORD PTR [ecx+300]
	jl	SHORT $LN108@do_text_in
; Line 3358
	jmp	$LN110@do_text_in
$LN108@do_text_in:
; Line 3360
	mov	edx, DWORD PTR _x$[ebp]
	imul	edx, DWORD PTR _fnt_width$[ebp]
	mov	DWORD PTR _x$[ebp], edx
; Line 3361
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _font_height
	mov	DWORD PTR _y$[ebp], eax
; Line 3362
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _offset_width
	mov	DWORD PTR _x$[ebp], ecx
; Line 3363
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _offset_height
	mov	DWORD PTR _y$[ebp], edx
; Line 3365
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN107@do_text_in
	cmp	DWORD PTR _cursor_type, 0
	je	SHORT $LN106@do_text_in
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+344], 0
	je	SHORT $LN107@do_text_in
$LN106@do_text_in:
; Line 3366
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, -3407872				; ffcc0000H
	mov	DWORD PTR _attr$[ebp], edx
; Line 3368
	mov	eax, DWORD PTR _attr$[ebp]
	or	eax, 133892				; 00020b04H
	mov	DWORD PTR _attr$[ebp], eax
; Line 3369
	mov	DWORD PTR _is_cursor$[ebp], 1
$LN107@do_text_in:
; Line 3372
	mov	DWORD PTR _nfont$[ebp], 0
; Line 3373
	cmp	DWORD PTR _vtmode, 3
	jne	SHORT $LN105@do_text_in
	cmp	DWORD PTR _lattr$[ebp], 0
	je	SHORT $LN105@do_text_in
; Line 3375
	mov	DWORD PTR _lattr$[ebp], 1
; Line 3376
	jmp	SHORT $LN104@do_text_in
$LN105@do_text_in:
; Line 3377
	mov	ecx, DWORD PTR _lattr$[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN101@do_text_in
	cmp	DWORD PTR tv89[ebp], 1
	je	SHORT $LN100@do_text_in
	jmp	SHORT $LN99@do_text_in
$LN101@do_text_in:
; Line 3379
	jmp	SHORT $LN104@do_text_in
$LN100@do_text_in:
; Line 3381
	mov	edx, DWORD PTR _nfont$[ebp]
	or	edx, 4
	mov	DWORD PTR _nfont$[ebp], edx
; Line 3382
	jmp	SHORT $LN104@do_text_in
$LN99@do_text_in:
; Line 3384
	mov	eax, DWORD PTR _nfont$[ebp]
	or	eax, 12					; 0000000cH
	mov	DWORD PTR _nfont$[ebp], eax
$LN104@do_text_in:
; Line 3387
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN98@do_text_in
; Line 3388
	mov	edx, DWORD PTR _nfont$[ebp]
	or	edx, 16					; 00000010H
	mov	DWORD PTR _nfont$[ebp], edx
$LN98@do_text_in:
; Line 3392
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 9146				; 000023baH
	jl	$LN97@do_text_in
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 9149				; 000023bdH
	jg	$LN97@do_text_in
; Line 3393
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv134[ebp], edx
	mov	eax, DWORD PTR tv134[ebp]
	sub	eax, 186				; 000000baH
	mov	DWORD PTR tv134[ebp], eax
	cmp	DWORD PTR tv134[ebp], 3
	ja	SHORT $LN95@do_text_in
	mov	ecx, DWORD PTR tv134[ebp]
	jmp	DWORD PTR $LN121@do_text_in[ecx*4]
$LN94@do_text_in:
; Line 3395
	mov	eax, DWORD PTR _font_height
	imul	eax, -2					; fffffffeH
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _text_adjust$[ebp], eax
; Line 3396
	jmp	SHORT $LN95@do_text_in
$LN93@do_text_in:
; Line 3398
	mov	eax, DWORD PTR _font_height
	imul	eax, -1
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _text_adjust$[ebp], eax
; Line 3399
	jmp	SHORT $LN95@do_text_in
$LN92@do_text_in:
; Line 3401
	mov	eax, DWORD PTR _font_height
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _text_adjust$[ebp], eax
; Line 3402
	jmp	SHORT $LN95@do_text_in
$LN91@do_text_in:
; Line 3404
	mov	eax, DWORD PTR _font_height
	shl	eax, 1
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _text_adjust$[ebp], eax
$LN95@do_text_in:
; Line 3407
	cmp	DWORD PTR _lattr$[ebp], 2
	je	SHORT $LN89@do_text_in
	cmp	DWORD PTR _lattr$[ebp], 3
	jne	SHORT $LN90@do_text_in
$LN89@do_text_in:
; Line 3408
	mov	edx, DWORD PTR _text_adjust$[ebp]
	shl	edx, 1
	mov	DWORD PTR _text_adjust$[ebp], edx
$LN90@do_text_in:
; Line 3409
	mov	eax, DWORD PTR _text$[ebp]
	mov	cx, WORD PTR _ucsdata+1778
	mov	WORD PTR [eax], cx
; Line 3410
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 524288				; 00080000H
	je	SHORT $LN97@do_text_in
; Line 3411
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, -524289				; fff7ffffH
	mov	DWORD PTR _attr$[ebp], eax
; Line 3412
	mov	DWORD PTR _force_manual_underline$[ebp], 1
$LN97@do_text_in:
; Line 3419
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN87@do_text_in
	cmp	DWORD PTR _len$[ebp], 2
	jl	SHORT $LN86@do_text_in
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 55296				; 0000d800H
	jl	SHORT $LN86@do_text_in
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 56319				; 0000dbffH
	jg	SHORT $LN86@do_text_in
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	edx, 56320				; 0000dc00H
	jl	SHORT $LN86@do_text_in
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 57343				; 0000dfffH
	jle	SHORT $LN87@do_text_in
$LN86@do_text_in:
; Line 3421
	mov	DWORD PTR _i$90438[ebp], 0
	jmp	SHORT $LN83@do_text_in
$LN82@do_text_in:
	mov	edx, DWORD PTR _i$90438[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90438[ebp], edx
$LN83@do_text_in:
	mov	eax, DWORD PTR _i$90438[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN87@do_text_in
; Line 3422
	mov	ecx, 65533				; 0000fffdH
	mov	edx, DWORD PTR _i$90438[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN82@do_text_in
$LN87@do_text_in:
; Line 3426
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, -256				; ffffff00H
	cmp	edx, 61440				; 0000f000H
	jne	SHORT $LN80@do_text_in
; Line 3427
	mov	eax, DWORD PTR _nfont$[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _nfont$[ebp], eax
$LN80@do_text_in:
; Line 3429
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 511				; 000001ffH
	mov	DWORD PTR _nfg$[ebp], ecx
; Line 3430
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 261632				; 0003fe00H
	shr	edx, 9
	mov	DWORD PTR _nbg$[ebp], edx
; Line 3431
	cmp	DWORD PTR _bold_font_mode, 2
	jne	SHORT $LN79@do_text_in
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 262144				; 00040000H
	je	SHORT $LN79@do_text_in
; Line 3432
	mov	ecx, DWORD PTR _nfont$[ebp]
	or	ecx, 1
	mov	DWORD PTR _nfont$[ebp], ecx
$LN79@do_text_in:
; Line 3433
	cmp	DWORD PTR _und_mode, 1
	jne	SHORT $LN78@do_text_in
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 524288				; 00080000H
	je	SHORT $LN78@do_text_in
; Line 3434
	mov	eax, DWORD PTR _nfont$[ebp]
	or	eax, 2
	mov	DWORD PTR _nfont$[ebp], eax
$LN78@do_text_in:
; Line 3435
	mov	ecx, DWORD PTR _nfont$[ebp]
	push	ecx
	call	_another_font
	add	esp, 4
; Line 3436
	mov	edx, DWORD PTR _nfont$[ebp]
	cmp	DWORD PTR _fonts[edx*4], 0
	jne	SHORT $LN77@do_text_in
; Line 3437
	mov	eax, DWORD PTR _nfont$[ebp]
	and	eax, 2
	je	SHORT $LN76@do_text_in
; Line 3438
	mov	DWORD PTR _force_manual_underline$[ebp], 1
$LN76@do_text_in:
; Line 3441
	mov	ecx, DWORD PTR _nfont$[ebp]
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _nfont$[ebp], ecx
$LN77@do_text_in:
; Line 3443
	mov	edx, DWORD PTR _nfont$[ebp]
	push	edx
	call	_another_font
	add	esp, 4
; Line 3444
	mov	eax, DWORD PTR _nfont$[ebp]
	cmp	DWORD PTR _fonts[eax*4], 0
	jne	SHORT $LN75@do_text_in
; Line 3445
	mov	DWORD PTR _nfont$[ebp], 0
$LN75@do_text_in:
; Line 3446
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 1048576				; 00100000H
	je	SHORT $LN74@do_text_in
; Line 3447
	mov	edx, DWORD PTR _nfg$[ebp]
	mov	DWORD PTR _t$[ebp], edx
; Line 3448
	mov	eax, DWORD PTR _nbg$[ebp]
	mov	DWORD PTR _nfg$[ebp], eax
; Line 3449
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _nbg$[ebp], ecx
$LN74@do_text_in:
; Line 3451
	cmp	DWORD PTR _bold_colours, 0
	je	SHORT $LN73@do_text_in
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 262144				; 00040000H
	je	SHORT $LN73@do_text_in
	cmp	DWORD PTR _is_cursor$[ebp], 0
	jne	SHORT $LN73@do_text_in
; Line 3452
	cmp	DWORD PTR _nfg$[ebp], 16		; 00000010H
	jge	SHORT $LN72@do_text_in
	mov	eax, DWORD PTR _nfg$[ebp]
	or	eax, 8
	mov	DWORD PTR _nfg$[ebp], eax
	jmp	SHORT $LN73@do_text_in
$LN72@do_text_in:
; Line 3453
	cmp	DWORD PTR _nfg$[ebp], 256		; 00000100H
	jl	SHORT $LN73@do_text_in
	mov	ecx, DWORD PTR _nfg$[ebp]
	or	ecx, 1
	mov	DWORD PTR _nfg$[ebp], ecx
$LN73@do_text_in:
; Line 3455
	cmp	DWORD PTR _bold_colours, 0
	je	SHORT $LN69@do_text_in
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 2097152				; 00200000H
	je	SHORT $LN69@do_text_in
; Line 3456
	cmp	DWORD PTR _nbg$[ebp], 16		; 00000010H
	jge	SHORT $LN68@do_text_in
	mov	eax, DWORD PTR _nbg$[ebp]
	or	eax, 8
	mov	DWORD PTR _nbg$[ebp], eax
	jmp	SHORT $LN69@do_text_in
$LN68@do_text_in:
; Line 3457
	cmp	DWORD PTR _nbg$[ebp], 256		; 00000100H
	jl	SHORT $LN69@do_text_in
	mov	ecx, DWORD PTR _nbg$[ebp]
	or	ecx, 1
	mov	DWORD PTR _nbg$[ebp], ecx
$LN69@do_text_in:
; Line 3459
	mov	edx, DWORD PTR _nfg$[ebp]
	mov	eax, DWORD PTR _colours[edx*4]
	mov	DWORD PTR _fg$[ebp], eax
; Line 3460
	mov	ecx, DWORD PTR _nbg$[ebp]
	mov	edx, DWORD PTR _colours[ecx*4]
	mov	DWORD PTR _bg$[ebp], edx
; Line 3461
	mov	esi, esp
	mov	eax, DWORD PTR _nfont$[ebp]
	mov	ecx, DWORD PTR _fonts[eax*4]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3462
	mov	esi, esp
	mov	eax, DWORD PTR _fg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetTextColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3463
	mov	esi, esp
	mov	edx, DWORD PTR _bg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetBkColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3464
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, -2147483648			; 80000000H
	je	SHORT $LN65@do_text_in
; Line 3465
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3466
	jmp	SHORT $LN64@do_text_in
$LN65@do_text_in:
; Line 3467
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN64@do_text_in:
; Line 3468
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _line_box$[ebp], ecx
; Line 3469
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _line_box$[ebp+4], edx
; Line 3470
	mov	eax, DWORD PTR _char_width$[ebp]
	imul	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _line_box$[ebp+8], eax
; Line 3471
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _font_height
	mov	DWORD PTR _line_box$[ebp+12], ecx
; Line 3475
	mov	DWORD PTR _rc_width$90460[ebp], 0
; Line 3476
	mov	DWORD PTR _i$90459[ebp], 0
	jmp	SHORT $LN63@do_text_in
$LN62@do_text_in:
	mov	edx, DWORD PTR _i$90459[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90459[ebp], edx
$LN63@do_text_in:
	mov	eax, DWORD PTR _i$90459[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN61@do_text_in
; Line 3477
	mov	ecx, DWORD PTR _i$90459[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN60@do_text_in
	mov	edx, DWORD PTR _i$90459[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 56128				; 0000db40H
	jne	SHORT $LN60@do_text_in
	mov	edx, DWORD PTR _i$90459[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 56576				; 0000dd00H
	jl	SHORT $LN60@do_text_in
	mov	edx, DWORD PTR _i$90459[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 56815				; 0000ddefH
	jg	SHORT $LN60@do_text_in
; Line 3478
	mov	edx, DWORD PTR _i$90459[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90459[ebp], edx
	jmp	$LN59@do_text_in
$LN60@do_text_in:
; Line 3479
	mov	eax, DWORD PTR _i$90459[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN58@do_text_in
	mov	ecx, DWORD PTR _i$90459[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 55296				; 0000d800H
	jl	SHORT $LN58@do_text_in
	mov	ecx, DWORD PTR _i$90459[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 56319				; 0000dbffH
	jg	SHORT $LN58@do_text_in
	mov	ecx, DWORD PTR _i$90459[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+2]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN58@do_text_in
	mov	ecx, DWORD PTR _i$90459[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+2]
	cmp	eax, 57343				; 0000dfffH
	jg	SHORT $LN58@do_text_in
; Line 3480
	mov	ecx, DWORD PTR _rc_width$90460[ebp]
	add	ecx, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR _rc_width$90460[ebp], ecx
; Line 3481
	mov	edx, DWORD PTR _i$90459[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90459[ebp], edx
	jmp	SHORT $LN59@do_text_in
$LN58@do_text_in:
; Line 3482
	mov	eax, DWORD PTR _i$90459[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 6155				; 0000180bH
	jl	SHORT $LN54@do_text_in
	mov	eax, DWORD PTR _i$90459[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 6157				; 0000180dH
	jle	SHORT $LN55@do_text_in
$LN54@do_text_in:
	mov	eax, DWORD PTR _i$90459[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65024				; 0000fe00H
	jl	SHORT $LN56@do_text_in
	mov	eax, DWORD PTR _i$90459[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65039				; 0000fe0fH
	jg	SHORT $LN56@do_text_in
$LN55@do_text_in:
; Line 3484
	jmp	SHORT $LN59@do_text_in
$LN56@do_text_in:
; Line 3485
	mov	eax, DWORD PTR _rc_width$90460[ebp]
	add	eax, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR _rc_width$90460[ebp], eax
$LN59@do_text_in:
; Line 3487
	jmp	$LN62@do_text_in
$LN61@do_text_in:
; Line 3488
	mov	ecx, DWORD PTR _line_box$[ebp]
	add	ecx, DWORD PTR _rc_width$90460[ebp]
	mov	DWORD PTR _line_box$[ebp+8], ecx
; Line 3492
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR _font_width
	imul	eax, DWORD PTR [edx+300]
	add	eax, DWORD PTR _offset_width
	cmp	DWORD PTR _line_box$[ebp+8], eax
	jle	SHORT $LN52@do_text_in
; Line 3493
	mov	ecx, DWORD PTR _term
	mov	edx, DWORD PTR _font_width
	imul	edx, DWORD PTR [ecx+300]
	add	edx, DWORD PTR _offset_width
	mov	DWORD PTR _line_box$[ebp+8], edx
$LN52@do_text_in:
; Line 3495
	cmp	DWORD PTR _font_varpitch, 0
	je	SHORT $LN51@do_text_in
; Line 3503
	mov	eax, DWORD PTR _char_width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _xoffset$[ebp], eax
; Line 3504
	mov	esi, esp
	push	6
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextAlign@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3505
	mov	DWORD PTR _lpDx_maybe$[ebp], 0
; Line 3506
	mov	DWORD PTR _maxlen$[ebp], 1
; Line 3507
	jmp	SHORT $LN50@do_text_in
$LN51@do_text_in:
; Line 3512
	mov	DWORD PTR _xoffset$[ebp], 0
; Line 3513
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetTextAlign@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3514
	mov	edx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR _lpDx_maybe$[ebp], edx
; Line 3515
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _maxlen$[ebp], eax
$LN50@do_text_in:
; Line 3518
	mov	DWORD PTR _opaque$[ebp], 1
; Line 3520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _remaining$[ebp], ecx
	jmp	SHORT $LN49@do_text_in
$LN48@do_text_in:
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _text$[ebp], ecx
	mov	edx, DWORD PTR _remaining$[ebp]
	sub	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _remaining$[ebp], edx
	mov	eax, DWORD PTR _char_width$[ebp]
	imul	eax, DWORD PTR _len2$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN49@do_text_in:
	cmp	DWORD PTR _remaining$[ebp], 0
	jle	$LN47@do_text_in
; Line 3521
	mov	ecx, DWORD PTR _maxlen$[ebp]
	cmp	ecx, DWORD PTR _remaining$[ebp]
	jge	SHORT $LN112@do_text_in
	mov	edx, DWORD PTR _maxlen$[ebp]
	mov	DWORD PTR tv344[ebp], edx
	jmp	SHORT $LN113@do_text_in
$LN112@do_text_in:
	mov	eax, DWORD PTR _remaining$[ebp]
	mov	DWORD PTR tv344[ebp], eax
$LN113@do_text_in:
	mov	ecx, DWORD PTR tv344[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 3523
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len2$[ebp], edx
; Line 3524
	cmp	DWORD PTR _maxlen$[ebp], 1
	jne	$LN46@do_text_in
; Line 3525
	cmp	DWORD PTR _remaining$[ebp], 1
	jl	SHORT $LN45@do_text_in
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 55296				; 0000d800H
	jl	SHORT $LN45@do_text_in
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 56319				; 0000dbffH
	jg	SHORT $LN45@do_text_in
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	edx, 56320				; 0000dc00H
	jl	SHORT $LN45@do_text_in
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 57343				; 0000dfffH
	jg	SHORT $LN45@do_text_in
; Line 3526
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx
$LN45@do_text_in:
; Line 3527
	mov	eax, DWORD PTR _remaining$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	cmp	eax, 1
	jl	SHORT $LN44@do_text_in
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 6155				; 0000180bH
	jl	SHORT $LN42@do_text_in
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 6157				; 0000180dH
	jle	SHORT $LN43@do_text_in
$LN42@do_text_in:
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN44@do_text_in
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 65039				; 0000fe0fH
	jg	SHORT $LN44@do_text_in
$LN43@do_text_in:
; Line 3528
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 3529
	jmp	SHORT $LN46@do_text_in
$LN44@do_text_in:
; Line 3530
	mov	edx, DWORD PTR _remaining$[ebp]
	sub	edx, DWORD PTR _len$[ebp]
	cmp	edx, 2
	jl	SHORT $LN46@do_text_in
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 56128				; 0000db40H
	jne	SHORT $LN46@do_text_in
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 56576				; 0000dd00H
	jl	SHORT $LN46@do_text_in
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 56815				; 0000ddefH
	jg	SHORT $LN46@do_text_in
; Line 3531
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 2
	mov	DWORD PTR _len$[ebp], eax
$LN46@do_text_in:
; Line 3534
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR ?lpDx_len@?1??do_text_internal@@9@9
	jle	SHORT $LN39@do_text_in
; Line 3535
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, 9
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 16					; 00000010H
	mov	DWORD PTR ?lpDx_len@?1??do_text_internal@@9@9, eax
; Line 3536
	push	4
	mov	edx, DWORD PTR ?lpDx_len@?1??do_text_internal@@9@9
	push	edx
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?lpDx@?1??do_text_internal@@9@9, eax
; Line 3538
	cmp	DWORD PTR _lpDx_maybe$[ebp], 0
	je	SHORT $LN39@do_text_in
	mov	ecx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR _lpDx_maybe$[ebp], ecx
$LN39@do_text_in:
; Line 3545
	mov	DWORD PTR _i$90491[ebp], 0
	jmp	SHORT $LN37@do_text_in
$LN36@do_text_in:
	mov	edx, DWORD PTR _i$90491[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90491[ebp], edx
$LN37@do_text_in:
	mov	eax, DWORD PTR _i$90491[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN35@do_text_in
; Line 3546
	mov	ecx, DWORD PTR _i$90491[ebp]
	mov	edx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	eax, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 3547
	mov	ecx, DWORD PTR _i$90491[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN34@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 56128				; 0000db40H
	jne	SHORT $LN34@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 56576				; 0000dd00H
	jl	SHORT $LN34@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 56815				; 0000ddefH
	jg	SHORT $LN34@do_text_in
; Line 3548
	cmp	DWORD PTR _i$90491[ebp], 0
	jle	SHORT $LN33@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR [eax+edx*4-4], 0
$LN33@do_text_in:
; Line 3549
	mov	ecx, DWORD PTR _i$90491[ebp]
	mov	edx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR [edx+ecx*4], 0
; Line 3550
	mov	eax, DWORD PTR _i$90491[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90491[ebp], eax
; Line 3551
	mov	ecx, DWORD PTR _i$90491[ebp]
	mov	edx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	eax, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	$LN32@do_text_in
$LN34@do_text_in:
; Line 3552
	mov	ecx, DWORD PTR _i$90491[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN31@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 55296				; 0000d800H
	jl	SHORT $LN31@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 56319				; 0000dbffH
	jg	SHORT $LN31@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 56320				; 0000dc00H
	jl	SHORT $LN31@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	cmp	ecx, 57343				; 0000dfffH
	jg	SHORT $LN31@do_text_in
; Line 3553
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR [eax+edx*4], 0
; Line 3554
	mov	ecx, DWORD PTR _i$90491[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90491[ebp], ecx
; Line 3555
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	ecx, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN32@do_text_in
$LN31@do_text_in:
; Line 3556
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 6155				; 0000180bH
	jl	SHORT $LN27@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 6157				; 0000180dH
	jle	SHORT $LN28@do_text_in
$LN27@do_text_in:
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 65024				; 0000fe00H
	jl	SHORT $LN32@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	cmp	ecx, 65039				; 0000fe0fH
	jg	SHORT $LN32@do_text_in
$LN28@do_text_in:
; Line 3557
	cmp	DWORD PTR _i$90491[ebp], 0
	jle	SHORT $LN26@do_text_in
	mov	edx, DWORD PTR _i$90491[ebp]
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR [eax+edx*4-4], 0
$LN26@do_text_in:
; Line 3558
	mov	ecx, DWORD PTR _i$90491[ebp]
	mov	edx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	eax, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN32@do_text_in:
; Line 3560
	jmp	$LN36@do_text_in
$LN35@do_text_in:
; Line 3564
	cmp	DWORD PTR _ucsdata+4, 0
	je	$LN25@do_text_in
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, -256				; ffffff00H
	cmp	edx, 61696				; 0000f100H
	jne	$LN25@do_text_in
; Line 3570
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR ?uni_len@?BO@??do_text_internal@@9@9
	jle	SHORT $LN24@do_text_in
; Line 3571
	mov	ecx, DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9
	push	ecx
	call	_safefree
	add	esp, 4
; Line 3572
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR ?uni_len@?BO@??do_text_internal@@9@9, edx
; Line 3573
	push	2
	mov	eax, DWORD PTR ?uni_len@?BO@??do_text_internal@@9@9
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9, eax
$LN24@do_text_in:
; Line 3576
	mov	DWORD PTR _mptr$90510[ebp], 0
	mov	ecx, DWORD PTR _mptr$90510[ebp]
	mov	DWORD PTR _nlen$90509[ebp], ecx
	jmp	SHORT $LN23@do_text_in
$LN22@do_text_in:
	mov	edx, DWORD PTR _mptr$90510[ebp]
	add	edx, 1
	mov	DWORD PTR _mptr$90510[ebp], edx
$LN23@do_text_in:
	mov	eax, DWORD PTR _mptr$90510[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN21@do_text_in
; Line 3577
	mov	ecx, 65533				; 0000fffdH
	mov	edx, DWORD PTR _nlen$90509[ebp]
	mov	eax, DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9
	mov	WORD PTR [eax+edx*2], cx
; Line 3579
	mov	esi, esp
	mov	ecx, DWORD PTR _mptr$90510[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, BYTE PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ucsdata+8
	push	ecx
	call	DWORD PTR __imp__IsDBCSLeadByteEx@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN20@do_text_in
; Line 3581
	mov	edx, DWORD PTR _mptr$90510[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _dbcstext$90519[ebp], cl
; Line 3582
	mov	edx, DWORD PTR _mptr$90510[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _dbcstext$90519[ebp+1], cl
; Line 3583
	mov	edx, DWORD PTR _nlen$90509[ebp]
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	ecx, DWORD PTR [eax+edx*4]
	add	ecx, DWORD PTR _char_width$[ebp]
	mov	edx, DWORD PTR _nlen$90509[ebp]
	mov	eax, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR [eax+edx*4], ecx
; Line 3585
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _nlen$90509[ebp]
	mov	edx, DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	push	2
	lea	ecx, DWORD PTR _dbcstext$90519[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _ucsdata+8
	push	edx
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3586
	mov	eax, DWORD PTR _mptr$90510[ebp]
	add	eax, 1
	mov	DWORD PTR _mptr$90510[ebp], eax
; Line 3588
	jmp	SHORT $LN19@do_text_in
$LN20@do_text_in:
; Line 3591
	mov	ecx, DWORD PTR _mptr$90510[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _dbcstext$90521[ebp], al
; Line 3593
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _nlen$90509[ebp]
	mov	edx, DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	push	1
	lea	ecx, DWORD PTR _dbcstext$90521[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _ucsdata+8
	push	edx
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@do_text_in:
; Line 3595
	mov	eax, DWORD PTR _nlen$90509[ebp]
	add	eax, 1
	mov	DWORD PTR _nlen$90509[ebp], eax
; Line 3596
	jmp	$LN22@do_text_in
$LN21@do_text_in:
; Line 3597
	cmp	DWORD PTR _nlen$90509[ebp], 0
	jg	SHORT $LN18@do_text_in
; Line 3598
	jmp	$LN110@do_text_in
$LN18@do_text_in:
; Line 3604
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDx_maybe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nlen$90509[ebp]
	push	edx
	mov	eax, DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9
	push	eax
	lea	ecx, DWORD PTR _line_box$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opaque$[ebp]
	neg	edx
	sbb	edx, edx
	and	edx, 2
	or	edx, 4
	push	edx
	xor	eax, eax
	cmp	DWORD PTR _lattr$[ebp], 3
	sete	al
	imul	eax, DWORD PTR _font_height
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, eax
	add	ecx, DWORD PTR _text_adjust$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _xoffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__ExtTextOutW@32
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3605
	cmp	DWORD PTR _bold_font_mode, 1
	jne	SHORT $LN17@do_text_in
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN17@do_text_in
; Line 3606
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3610
	mov	esi, esp
	mov	eax, DWORD PTR _lpDx_maybe$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nlen$90509[ebp]
	push	ecx
	mov	edx, DWORD PTR ?uni_buf@?BO@??do_text_internal@@9@9
	push	edx
	lea	eax, DWORD PTR _line_box$[ebp]
	push	eax
	push	4
	xor	ecx, ecx
	cmp	DWORD PTR _lattr$[ebp], 3
	sete	cl
	imul	ecx, DWORD PTR _font_height
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	add	edx, DWORD PTR _text_adjust$[ebp]
	push	edx
	mov	eax, DWORD PTR _xoffset$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__ExtTextOutW@32
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@do_text_in:
; Line 3613
	mov	ecx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	mov	DWORD PTR [ecx], -1
	jmp	$LN16@do_text_in
$LN25@do_text_in:
; Line 3614
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, -512				; fffffe00H
	cmp	eax, 61440				; 0000f000H
	jne	$LN15@do_text_in
; Line 3618
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR ?directlen@?CE@??do_text_internal@@9@9
	jle	SHORT $LN14@do_text_in
; Line 3619
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR ?directlen@?CE@??do_text_internal@@9@9, edx
; Line 3620
	push	1
	mov	eax, DWORD PTR ?directlen@?CE@??do_text_internal@@9@9
	push	eax
	mov	ecx, DWORD PTR ?directbuf@?CE@??do_text_internal@@9@9
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?directbuf@?CE@??do_text_internal@@9@9, eax
$LN14@do_text_in:
; Line 3623
	mov	DWORD PTR _i$90531[ebp], 0
	jmp	SHORT $LN13@do_text_in
$LN12@do_text_in:
	mov	edx, DWORD PTR _i$90531[ebp]
	add	edx, 1
	mov	DWORD PTR _i$90531[ebp], edx
$LN13@do_text_in:
	mov	eax, DWORD PTR _i$90531[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN11@do_text_in
; Line 3624
	mov	ecx, DWORD PTR _i$90531[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR ?directbuf@?CE@??do_text_internal@@9@9
	add	ecx, DWORD PTR _i$90531[ebp]
	mov	BYTE PTR [ecx], al
	jmp	SHORT $LN12@do_text_in
$LN11@do_text_in:
; Line 3629
	mov	esi, esp
	mov	edx, DWORD PTR _lpDx_maybe$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?directbuf@?CE@??do_text_internal@@9@9
	push	ecx
	lea	edx, DWORD PTR _line_box$[ebp]
	push	edx
	mov	eax, DWORD PTR _opaque$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	or	eax, 4
	push	eax
	xor	ecx, ecx
	cmp	DWORD PTR _lattr$[ebp], 3
	sete	cl
	imul	ecx, DWORD PTR _font_height
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, ecx
	add	edx, DWORD PTR _text_adjust$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _xoffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__ExtTextOutA@32
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3630
	cmp	DWORD PTR _bold_font_mode, 1
	jne	SHORT $LN10@do_text_in
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 262144				; 00040000H
	je	SHORT $LN10@do_text_in
; Line 3631
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3645
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDx_maybe$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR ?directbuf@?CE@??do_text_internal@@9@9
	push	eax
	lea	ecx, DWORD PTR _line_box$[ebp]
	push	ecx
	push	4
	xor	edx, edx
	cmp	DWORD PTR _lattr$[ebp], 3
	sete	dl
	imul	edx, DWORD PTR _font_height
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, edx
	add	eax, DWORD PTR _text_adjust$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xoffset$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__ExtTextOutA@32
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@do_text_in:
; Line 3647
	jmp	$LN16@do_text_in
$LN15@do_text_in:
; Line 3653
	mov	edx, DWORD PTR ?wlen@?CH@??do_text_internal@@9@9
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN8@do_text_in
; Line 3654
	mov	eax, DWORD PTR ?wbuf@?CH@??do_text_internal@@9@9
	push	eax
	call	_safefree
	add	esp, 4
; Line 3655
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR ?wlen@?CH@??do_text_internal@@9@9, ecx
; Line 3656
	push	2
	mov	edx, DWORD PTR ?wlen@?CH@??do_text_internal@@9@9
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR ?wbuf@?CH@??do_text_internal@@9@9, eax
$LN8@do_text_in:
; Line 3659
	mov	DWORD PTR _i$90546[ebp], 0
	jmp	SHORT $LN7@do_text_in
$LN6@do_text_in:
	mov	eax, DWORD PTR _i$90546[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90546[ebp], eax
$LN7@do_text_in:
	mov	ecx, DWORD PTR _i$90546[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN5@do_text_in
; Line 3660
	mov	edx, DWORD PTR _i$90546[ebp]
	mov	eax, DWORD PTR ?wbuf@?CH@??do_text_internal@@9@9
	mov	ecx, DWORD PTR _i$90546[ebp]
	mov	esi, DWORD PTR _text$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN6@do_text_in
$LN5@do_text_in:
; Line 3666
	cmp	DWORD PTR _opaque$[ebp], 0
	je	SHORT $LN114@do_text_in
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, -2147483648			; 80000000H
	jne	SHORT $LN114@do_text_in
	mov	DWORD PTR tv643[ebp], 1
	jmp	SHORT $LN115@do_text_in
$LN114@do_text_in:
	mov	DWORD PTR tv643[ebp], 0
$LN115@do_text_in:
	mov	eax, DWORD PTR tv643[ebp]
	push	eax
	mov	ecx, DWORD PTR ?lpDx@?1??do_text_internal@@9@9
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR ?wbuf@?CH@??do_text_internal@@9@9
	push	eax
	lea	ecx, DWORD PTR _line_box$[ebp]
	push	ecx
	xor	edx, edx
	cmp	DWORD PTR _lattr$[ebp], 3
	sete	dl
	imul	edx, DWORD PTR _font_height
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, edx
	add	eax, DWORD PTR _text_adjust$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _xoffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	_general_textout
	add	esp, 32					; 00000020H
; Line 3669
	cmp	DWORD PTR _bold_font_mode, 1
	jne	SHORT $LN16@do_text_in
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 262144				; 00040000H
	je	SHORT $LN16@do_text_in
; Line 3670
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3674
	mov	esi, esp
	mov	edx, DWORD PTR _lpDx_maybe$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?wbuf@?CH@??do_text_internal@@9@9
	push	ecx
	lea	edx, DWORD PTR _line_box$[ebp]
	push	edx
	push	4
	xor	eax, eax
	cmp	DWORD PTR _lattr$[ebp], 3
	sete	al
	imul	eax, DWORD PTR _font_height
	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, eax
	add	ecx, DWORD PTR _text_adjust$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xoffset$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__ExtTextOutW@32
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@do_text_in:
; Line 3682
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3683
	mov	DWORD PTR _opaque$[ebp], 0
; Line 3684
	jmp	$LN48@do_text_in
$LN47@do_text_in:
; Line 3687
	cmp	DWORD PTR _lattr$[ebp], 2
	je	$LN110@do_text_in
	cmp	DWORD PTR _force_manual_underline$[ebp], 0
	jne	SHORT $LN2@do_text_in
	cmp	DWORD PTR _und_mode, 0
	jne	$LN110@do_text_in
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 524288				; 00080000H
	je	$LN110@do_text_in
$LN2@do_text_in:
; Line 3689
	mov	edx, DWORD PTR _descent
	mov	DWORD PTR _dec$90557[ebp], edx
; Line 3690
	cmp	DWORD PTR _lattr$[ebp], 3
	jne	SHORT $LN1@do_text_in
; Line 3691
	mov	eax, DWORD PTR _dec$90557[ebp]
	shl	eax, 1
	sub	eax, DWORD PTR _font_height
	mov	DWORD PTR _dec$90557[ebp], eax
$LN1@do_text_in:
; Line 3693
	mov	esi, esp
	mov	ecx, DWORD PTR _fg$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__CreatePen@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90556[ebp], eax
; Line 3694
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _line_box$[ebp+4]
	add	eax, DWORD PTR _dec$90557[ebp]
	push	eax
	mov	ecx, DWORD PTR _line_box$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__MoveToEx@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3695
	mov	eax, DWORD PTR _line_box$[ebp+4]
	add	eax, DWORD PTR _dec$90557[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _line_box$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__LineTo@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3696
	mov	esi, esp
	mov	eax, DWORD PTR _oldpen$90556[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90556[ebp], eax
; Line 3697
	mov	esi, esp
	mov	edx, DWORD PTR _oldpen$90556[ebp]
	push	edx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN110@do_text_in:
; Line 3699
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN120@do_text_in
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN120@do_text_in:
	DD	3
	DD	$LN119@do_text_in
$LN119@do_text_in:
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN116@do_text_in
	DD	-132					; ffffff7cH
	DD	2
	DD	$LN117@do_text_in
	DD	-141					; ffffff73H
	DD	1
	DD	$LN118@do_text_in
$LN118@do_text_in:
	DB	100					; 00000064H
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN117@do_text_in:
	DB	100					; 00000064H
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN116@do_text_in:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
	npad	1
$LN121@do_text_in:
	DD	$LN94@do_text_in
	DD	$LN93@do_text_in
	DD	$LN92@do_text_in
	DD	$LN91@do_text_in
_do_text_internal ENDP
_TEXT	ENDS
EXTRN	__imp__GetBkMode@4:PROC
EXTRN	_is_rtl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv137 = -36						; size = 4
tv90 = -32						; size = 4
_rtl$89508 = -28					; size = 4
_got_bkmode$ = -24					; size = 4
_bkmode$ = -20						; size = 4
_xn$ = -16						; size = 4
_xp$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_hdc$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lprc$ = 20						; size = 4
_lpString$ = 24						; size = 4
_cbCount$ = 28						; size = 4
_lpDx$ = 32						; size = 4
_opaque$ = 36						; size = 4
_general_textout PROC
; Line 1315
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1317
	mov	DWORD PTR _bkmode$[ebp], 0
	mov	DWORD PTR _got_bkmode$[ebp], 0
; Line 1319
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xn$[ebp], eax
	mov	ecx, DWORD PTR _xn$[ebp]
	mov	DWORD PTR _xp$[ebp], ecx
; Line 1321
	mov	DWORD PTR _i$[ebp], 0
$LN9@general_te:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _cbCount$[ebp]
	jge	$LN8@general_te
; Line 1322
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _lpString$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_is_rtl
	add	esp, 4
	mov	DWORD PTR _rtl$89508[ebp], eax
; Line 1324
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _lpDx$[ebp]
	mov	edx, DWORD PTR _xn$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xn$[ebp], edx
; Line 1326
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN7@general_te
$LN6@general_te:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@general_te:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _cbCount$[ebp]
	jge	SHORT $LN5@general_te
; Line 1327
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _lpString$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_is_rtl
	add	esp, 4
	cmp	DWORD PTR _rtl$89508[ebp], eax
	je	SHORT $LN4@general_te
; Line 1328
	jmp	SHORT $LN5@general_te
$LN4@general_te:
; Line 1329
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _lpDx$[ebp]
	mov	edx, DWORD PTR _xn$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xn$[ebp], edx
; Line 1330
	jmp	SHORT $LN6@general_te
$LN5@general_te:
; Line 1337
	cmp	DWORD PTR _rtl$89508[ebp], 0
	je	SHORT $LN3@general_te
; Line 1339
	cmp	DWORD PTR _font_varpitch, 0
	je	SHORT $LN12@general_te
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN13@general_te
$LN12@general_te:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _lpDx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv90[ebp], edx
$LN13@general_te:
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv90[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _lpString$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _lprc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xp$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	_exact_textout
	add	esp, 32					; 00000020H
; Line 1340
	jmp	SHORT $LN2@general_te
$LN3@general_te:
; Line 1343
	cmp	DWORD PTR _font_varpitch, 0
	je	SHORT $LN14@general_te
	mov	DWORD PTR tv137[ebp], 0
	jmp	SHORT $LN15@general_te
$LN14@general_te:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _lpDx$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv137[ebp], eax
$LN15@general_te:
	mov	esi, esp
	mov	ecx, DWORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _lpString$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _lprc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opaque$[ebp]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2
	or	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__ExtTextOutW@32
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@general_te:
; Line 1346
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], edx
; Line 1347
	mov	eax, DWORD PTR _xn$[ebp]
	mov	DWORD PTR _xp$[ebp], eax
; Line 1349
	mov	esi, esp
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetBkMode@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bkmode$[ebp], eax
; Line 1350
	mov	DWORD PTR _got_bkmode$[ebp], 1
; Line 1351
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1352
	mov	DWORD PTR _opaque$[ebp], 0
; Line 1353
	jmp	$LN9@general_te
$LN8@general_te:
; Line 1355
	cmp	DWORD PTR _got_bkmode$[ebp], 0
	je	SHORT $LN10@general_te
; Line 1356
	mov	esi, esp
	mov	eax, DWORD PTR _bkmode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetBkMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@general_te:
; Line 1357
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_general_textout ENDP
_TEXT	ENDS
EXTRN	__imp__GetCharacterPlacementW@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_classbuffer$ = -52					; size = 4
_buffer$ = -48						; size = 4
_gcpr$ = -40						; size = 36
_hdc$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lprc$ = 20						; size = 4
_lpString$ = 24						; size = 4
_cbCount$ = 28						; size = 4
_lpDx$ = 32						; size = 4
_opaque$ = 36						; size = 4
_exact_textout PROC
; Line 1273
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1285
	push	1
	mov	eax, DWORD PTR _cbCount$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buffer$[ebp], eax
; Line 1286
	push	1
	mov	edx, DWORD PTR _cbCount$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _classbuffer$[ebp], eax
; Line 1287
	push	36					; 00000024H
	push	0
	lea	eax, DWORD PTR _gcpr$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1288
	mov	ecx, DWORD PTR _cbCount$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	push	edx
	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1289
	mov	ecx, DWORD PTR _cbCount$[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _classbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1291
	mov	DWORD PTR _gcpr$[ebp], 36		; 00000024H
; Line 1292
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _gcpr$[ebp+24], eax
; Line 1293
	mov	ecx, DWORD PTR _classbuffer$[ebp]
	mov	DWORD PTR _gcpr$[ebp+20], ecx
; Line 1294
	mov	edx, DWORD PTR _cbCount$[ebp]
	mov	DWORD PTR _gcpr$[ebp+28], edx
; Line 1296
	mov	esi, esp
	push	528699					; 0008113bH
	lea	eax, DWORD PTR _gcpr$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _cbCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpString$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCharacterPlacementW@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1300
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lprc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opaque$[ebp]
	neg	edx
	sbb	edx, edx
	and	edx, 2
	or	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__ExtTextOutA@32
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1301
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@exact_text
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@exact_text:
	DD	1
	DD	$LN4@exact_text
$LN4@exact_text:
	DD	-40					; ffffffd8H
	DD	36					; 00000024H
	DD	$LN3@exact_text
$LN3@exact_text:
	DB	103					; 00000067H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	0
_exact_textout ENDP
; Function compile flags: /Odtp /RTCsu
tv138 = -48						; size = 4
tv139 = -44						; size = 4
_font$ = -40						; size = 4
_s$ = -36						; size = 4
_x$ = -32						; size = 4
_w$ = -28						; size = 4
_u$ = -24						; size = 4
_c$ = -20						; size = 4
_quality$ = -16						; size = 4
_fw_bold$ = -12						; size = 4
_fw_dontcare$ = -8					; size = 4
_basefont$ = -4						; size = 4
_fontno$ = 8						; size = 4
_another_font PROC
; Line 1587
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1594
	cmp	DWORD PTR _fontno$[ebp], 0
	jl	SHORT $LN9@another_fo
	cmp	DWORD PTR _fontno$[ebp], 64		; 00000040H
	jge	SHORT $LN9@another_fo
	mov	eax, DWORD PTR _fontno$[ebp]
	cmp	DWORD PTR _fontflag[eax*4], 0
	je	SHORT $LN10@another_fo
$LN9@another_fo:
; Line 1595
	jmp	$LN11@another_fo
$LN10@another_fo:
; Line 1597
	mov	ecx, DWORD PTR _fontno$[ebp]
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _basefont$[ebp], ecx
; Line 1598
	mov	edx, DWORD PTR _basefont$[ebp]
	cmp	edx, DWORD PTR _fontno$[ebp]
	je	SHORT $LN8@another_fo
	mov	eax, DWORD PTR _basefont$[ebp]
	cmp	DWORD PTR _fontflag[eax*4], 0
	jne	SHORT $LN8@another_fo
; Line 1599
	mov	ecx, DWORD PTR _basefont$[ebp]
	push	ecx
	call	_another_font
	add	esp, 4
$LN8@another_fo:
; Line 1601
	push	112					; 00000070H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_fontspec
	add	esp, 8
	mov	DWORD PTR _font$[ebp], eax
; Line 1603
	mov	eax, DWORD PTR _font$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@another_fo
; Line 1604
	mov	DWORD PTR _fw_dontcare$[ebp], 700	; 000002bcH
; Line 1605
	mov	DWORD PTR _fw_bold$[ebp], 900		; 00000384H
; Line 1606
	jmp	SHORT $LN6@another_fo
$LN7@another_fo:
; Line 1607
	mov	DWORD PTR _fw_dontcare$[ebp], 0
; Line 1608
	mov	DWORD PTR _fw_bold$[ebp], 700		; 000002bcH
$LN6@another_fo:
; Line 1611
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _c$[ebp], edx
; Line 1612
	mov	eax, DWORD PTR _fw_dontcare$[ebp]
	mov	DWORD PTR _w$[ebp], eax
; Line 1613
	mov	DWORD PTR _u$[ebp], 0
; Line 1614
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _s$[ebp], edx
; Line 1615
	mov	eax, DWORD PTR _font_width
	mov	DWORD PTR _x$[ebp], eax
; Line 1617
	mov	ecx, DWORD PTR _fontno$[ebp]
	and	ecx, 4
	je	SHORT $LN5@another_fo
; Line 1618
	mov	edx, DWORD PTR _x$[ebp]
	shl	edx, 1
	mov	DWORD PTR _x$[ebp], edx
$LN5@another_fo:
; Line 1619
	mov	eax, DWORD PTR _fontno$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@another_fo
; Line 1620
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN4@another_fo:
; Line 1621
	mov	ecx, DWORD PTR _fontno$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@another_fo
; Line 1622
	mov	DWORD PTR _c$[ebp], 255			; 000000ffH
$LN3@another_fo:
; Line 1623
	mov	edx, DWORD PTR _fontno$[ebp]
	and	edx, 1
	je	SHORT $LN2@another_fo
; Line 1624
	mov	eax, DWORD PTR _fw_bold$[ebp]
	mov	DWORD PTR _w$[ebp], eax
$LN2@another_fo:
; Line 1625
	mov	ecx, DWORD PTR _fontno$[ebp]
	and	ecx, 2
	je	SHORT $LN1@another_fo
; Line 1626
	mov	DWORD PTR _u$[ebp], 1
$LN1@another_fo:
; Line 1628
	push	113					; 00000071H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _quality$[ebp], eax
; Line 1634
	cmp	DWORD PTR _quality$[ebp], 0
	jne	SHORT $LN15@another_fo
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN16@another_fo
$LN15@another_fo:
	cmp	DWORD PTR _quality$[ebp], 1
	jne	SHORT $LN13@another_fo
	mov	DWORD PTR tv138[ebp], 4
	jmp	SHORT $LN14@another_fo
$LN13@another_fo:
	xor	eax, eax
	cmp	DWORD PTR _quality$[ebp], 2
	setne	al
	lea	eax, DWORD PTR [eax+eax+3]
	mov	DWORD PTR tv138[ebp], eax
$LN14@another_fo:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], ecx
$LN16@another_fo:
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR tv139[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fontno$[ebp]
	and	edx, 8
	neg	edx
	sbb	edx, edx
	neg	edx
	add	edx, 1
	imul	edx, DWORD PTR _font_height
	push	edx
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _fontno$[ebp]
	mov	DWORD PTR _fonts[ecx*4], eax
; Line 1636
	mov	edx, DWORD PTR _fontno$[ebp]
	mov	DWORD PTR _fontflag[edx*4], 1
$LN11@another_fo:
; Line 1637
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_another_font ENDP
_TEXT	ENDS
PUBLIC	_do_text
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv173 = -12						; size = 4
_len0$90577 = -8					; size = 4
_a$90576 = -4						; size = 4
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_text$ = 20						; size = 4
_len$ = 24						; size = 4
_attr$ = 28						; size = 4
_lattr$ = 32						; size = 4
_do_text PROC
; Line 3706
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3707
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, -2147483648			; 80000000H
	je	$LN13@do_text
; Line 3708
	mov	DWORD PTR _a$90576[ebp], 0
; Line 3709
	mov	DWORD PTR _len0$90577[ebp], 1
; Line 3711
	cmp	DWORD PTR _len$[ebp], 2
	jl	SHORT $LN12@do_text
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 55296				; 0000d800H
	jl	SHORT $LN12@do_text
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 56319				; 0000dbffH
	jg	SHORT $LN12@do_text
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN12@do_text
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	edx, 57343				; 0000dfffH
	jg	SHORT $LN12@do_text
; Line 3712
	mov	DWORD PTR _len0$90577[ebp], 2
$LN12@do_text:
; Line 3713
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _len0$90577[ebp]
	cmp	eax, 1
	jl	$LN11@do_text
	mov	ecx, DWORD PTR _len0$90577[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 6155				; 0000180bH
	jl	SHORT $LN9@do_text
	mov	ecx, DWORD PTR _len0$90577[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 6157				; 0000180dH
	jle	SHORT $LN10@do_text
$LN9@do_text:
	mov	ecx, DWORD PTR _len0$90577[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN11@do_text
	mov	ecx, DWORD PTR _len0$90577[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 65039				; 0000fe0fH
	jg	SHORT $LN11@do_text
$LN10@do_text:
; Line 3714
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _attr$[ebp], ecx
; Line 3715
	mov	edx, DWORD PTR _lattr$[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len0$90577[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_do_text_internal
	add	esp, 28					; 0000001cH
; Line 3716
	mov	eax, DWORD PTR _len0$90577[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _text$[ebp], edx
; Line 3717
	mov	eax, DWORD PTR _len0$90577[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _len$[ebp], ecx
; Line 3718
	mov	DWORD PTR _a$90576[ebp], -2147483648	; 80000000H
	jmp	$LN5@do_text
$LN11@do_text:
; Line 3719
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _len0$90577[ebp]
	cmp	edx, 2
	jl	$LN7@do_text
	mov	eax, DWORD PTR _len0$90577[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 56128				; 0000db40H
	jne	SHORT $LN7@do_text
	mov	eax, DWORD PTR _len0$90577[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 56576				; 0000dd00H
	jl	SHORT $LN7@do_text
	mov	eax, DWORD PTR _len0$90577[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 56815				; 0000ddefH
	jg	SHORT $LN7@do_text
; Line 3720
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _attr$[ebp], eax
; Line 3721
	mov	ecx, DWORD PTR _lattr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _len0$90577[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_do_text_internal
	add	esp, 28					; 0000001cH
; Line 3722
	mov	edx, DWORD PTR _len0$90577[ebp]
	mov	eax, DWORD PTR _text$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+4]
	mov	DWORD PTR _text$[ebp], ecx
; Line 3723
	mov	edx, DWORD PTR _len0$90577[ebp]
	add	edx, 2
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, edx
	mov	DWORD PTR _len$[ebp], eax
; Line 3724
	mov	DWORD PTR _a$90576[ebp], -2147483648	; 80000000H
; Line 3725
	jmp	SHORT $LN5@do_text
$LN7@do_text:
; Line 3726
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _attr$[ebp], ecx
$LN5@do_text:
; Line 3729
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv173[ebp], edx
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	cmp	DWORD PTR tv173[ebp], 0
	je	$LN4@do_text
; Line 3730
	cmp	DWORD PTR _len$[ebp], 1
	jl	SHORT $LN3@do_text
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 55296				; 0000d800H
	jl	SHORT $LN3@do_text
	mov	eax, DWORD PTR _text$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 56319				; 0000dbffH
	jg	SHORT $LN3@do_text
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN3@do_text
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	edx, 57343				; 0000dfffH
	jg	SHORT $LN3@do_text
; Line 3731
	mov	eax, DWORD PTR _lattr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	or	ecx, DWORD PTR _a$90576[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_do_text_internal
	add	esp, 28					; 0000001cH
; Line 3732
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 3733
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, 2
	mov	DWORD PTR _text$[ebp], ecx
; Line 3734
	jmp	SHORT $LN2@do_text
$LN3@do_text:
; Line 3735
	mov	edx, DWORD PTR _lattr$[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	or	eax, DWORD PTR _a$90576[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_do_text_internal
	add	esp, 28					; 0000001cH
$LN2@do_text:
; Line 3738
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, 2
	mov	DWORD PTR _text$[ebp], edx
; Line 3739
	mov	DWORD PTR _a$90576[ebp], -2147483648	; 80000000H
; Line 3740
	jmp	$LN5@do_text
$LN4@do_text:
; Line 3741
	jmp	SHORT $LN14@do_text
$LN13@do_text:
; Line 3742
	mov	eax, DWORD PTR _lattr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_do_text_internal
	add	esp, 28					; 0000001cH
$LN14@do_text:
; Line 3743
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_do_text ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_do_cursor
EXTRN	__imp__SetPixel@16:PROC
EXTRN	__imp__Polyline@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_oldpen$90631 = -104					; size = 4
_xadjust$90628 = -100					; size = 4
_i$90625 = -96						; size = 4
_length$90624 = -92					; size = 4
_dy$90623 = -88						; size = 4
_dx$90622 = -84						; size = 4
_starty$90621 = -80					; size = 4
_startx$90620 = -76					; size = 4
_oldpen$90617 = -72					; size = 4
_pts$90616 = -64					; size = 40
_ctype$ = -20						; size = 4
_hdc$ = -16						; size = 4
_char_width$ = -12					; size = 4
_fnt_width$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_ctx$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_text$ = 20						; size = 4
_len$ = 24						; size = 4
_attr$ = 28						; size = 4
_lattr$ = 32						; size = 4
_do_cursor PROC
; Line 3747
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3751
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _hdc$[ebp], eax
; Line 3752
	mov	ecx, DWORD PTR _cursor_type
	mov	DWORD PTR _ctype$[ebp], ecx
; Line 3754
	mov	edx, DWORD PTR _lattr$[ebp]
	and	edx, 3
	mov	DWORD PTR _lattr$[ebp], edx
; Line 3756
	mov	eax, DWORD PTR _attr$[ebp]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN17@do_cursor
	cmp	DWORD PTR _ctype$[ebp], 0
	je	SHORT $LN16@do_cursor
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+344], 0
	je	SHORT $LN17@do_cursor
$LN16@do_cursor:
; Line 3757
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57343				; 0000dfffH
	je	SHORT $LN15@do_cursor
; Line 3758
	mov	ecx, DWORD PTR _lattr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_do_text
	add	esp, 28					; 0000001cH
; Line 3759
	jmp	$LN18@do_cursor
$LN15@do_cursor:
; Line 3761
	mov	DWORD PTR _ctype$[ebp], 2
; Line 3762
	mov	edx, DWORD PTR _attr$[ebp]
	or	edx, 268435456				; 10000000H
	mov	DWORD PTR _attr$[ebp], edx
$LN17@do_cursor:
; Line 3765
	xor	eax, eax
	cmp	DWORD PTR _lattr$[ebp], 0
	setne	al
	add	eax, 1
	imul	eax, DWORD PTR _font_width
	mov	DWORD PTR _char_width$[ebp], eax
	mov	ecx, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR _fnt_width$[ebp], ecx
; Line 3766
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN14@do_cursor
; Line 3767
	mov	eax, DWORD PTR _char_width$[ebp]
	shl	eax, 1
	mov	DWORD PTR _char_width$[ebp], eax
$LN14@do_cursor:
; Line 3768
	mov	ecx, DWORD PTR _x$[ebp]
	imul	ecx, DWORD PTR _fnt_width$[ebp]
	mov	DWORD PTR _x$[ebp], ecx
; Line 3769
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _font_height
	mov	DWORD PTR _y$[ebp], edx
; Line 3770
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _offset_width
	mov	DWORD PTR _x$[ebp], eax
; Line 3771
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _offset_height
	mov	DWORD PTR _y$[ebp], ecx
; Line 3773
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 536870912				; 20000000H
	je	$LN13@do_cursor
	cmp	DWORD PTR _ctype$[ebp], 0
	je	SHORT $LN12@do_cursor
	mov	eax, DWORD PTR _term
	cmp	DWORD PTR [eax+344], 0
	je	$LN13@do_cursor
$LN12@do_cursor:
; Line 3776
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pts$90616[ebp+32], ecx
	mov	edx, DWORD PTR _pts$90616[ebp+32]
	mov	DWORD PTR _pts$90616[ebp+8], edx
	mov	eax, DWORD PTR _pts$90616[ebp+8]
	mov	DWORD PTR _pts$90616[ebp], eax
; Line 3777
	mov	ecx, DWORD PTR _char_width$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _pts$90616[ebp+24], eax
	mov	ecx, DWORD PTR _pts$90616[ebp+24]
	mov	DWORD PTR _pts$90616[ebp+16], ecx
; Line 3778
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _pts$90616[ebp+36], edx
	mov	eax, DWORD PTR _pts$90616[ebp+36]
	mov	DWORD PTR _pts$90616[ebp+28], eax
	mov	ecx, DWORD PTR _pts$90616[ebp+28]
	mov	DWORD PTR _pts$90616[ebp+4], ecx
; Line 3779
	mov	edx, DWORD PTR _font_height
	mov	eax, DWORD PTR _y$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	DWORD PTR _pts$90616[ebp+20], ecx
	mov	edx, DWORD PTR _pts$90616[ebp+20]
	mov	DWORD PTR _pts$90616[ebp+12], edx
; Line 3780
	mov	esi, esp
	mov	eax, DWORD PTR _colours+1044
	push	eax
	push	0
	push	0
	call	DWORD PTR __imp__CreatePen@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90617[ebp], eax
; Line 3781
	mov	esi, esp
	push	5
	lea	edx, DWORD PTR _pts$90616[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__Polyline@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3782
	mov	esi, esp
	mov	ecx, DWORD PTR _oldpen$90617[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90617[ebp], eax
; Line 3783
	mov	esi, esp
	mov	eax, DWORD PTR _oldpen$90617[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN18@do_cursor
$LN13@do_cursor:
; Line 3784
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 1610612736				; 60000000H
	je	$LN18@do_cursor
	cmp	DWORD PTR _ctype$[ebp], 0
	je	$LN18@do_cursor
; Line 3786
	cmp	DWORD PTR _ctype$[ebp], 1
	jne	SHORT $LN9@do_cursor
; Line 3787
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _startx$90620[ebp], edx
; Line 3788
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _descent
	mov	DWORD PTR _starty$90621[ebp], eax
; Line 3789
	mov	DWORD PTR _dx$90622[ebp], 1
; Line 3790
	mov	DWORD PTR _dy$90623[ebp], 0
; Line 3791
	mov	ecx, DWORD PTR _char_width$[ebp]
	mov	DWORD PTR _length$90624[ebp], ecx
; Line 3792
	jmp	SHORT $LN8@do_cursor
$LN9@do_cursor:
; Line 3793
	mov	DWORD PTR _xadjust$90628[ebp], 0
; Line 3794
	mov	edx, DWORD PTR _attr$[ebp]
	and	edx, 268435456				; 10000000H
	je	SHORT $LN7@do_cursor
; Line 3795
	mov	eax, DWORD PTR _char_width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xadjust$90628[ebp], eax
$LN7@do_cursor:
; Line 3796
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _xadjust$90628[ebp]
	mov	DWORD PTR _startx$90620[ebp], ecx
; Line 3797
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _starty$90621[ebp], edx
; Line 3798
	mov	DWORD PTR _dx$90622[ebp], 0
; Line 3799
	mov	DWORD PTR _dy$90623[ebp], 1
; Line 3800
	mov	eax, DWORD PTR _font_height
	mov	DWORD PTR _length$90624[ebp], eax
$LN8@do_cursor:
; Line 3802
	mov	ecx, DWORD PTR _attr$[ebp]
	and	ecx, 1073741824				; 40000000H
	je	$LN6@do_cursor
; Line 3805
	mov	esi, esp
	mov	edx, DWORD PTR _colours+1044
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp__CreatePen@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90631[ebp], eax
; Line 3806
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _starty$90621[ebp]
	push	ecx
	mov	edx, DWORD PTR _startx$90620[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__MoveToEx@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3807
	mov	ecx, DWORD PTR _dy$90623[ebp]
	imul	ecx, DWORD PTR _length$90624[ebp]
	add	ecx, DWORD PTR _starty$90621[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _dx$90622[ebp]
	imul	edx, DWORD PTR _length$90624[ebp]
	add	edx, DWORD PTR _startx$90620[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__LineTo@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3808
	mov	esi, esp
	mov	ecx, DWORD PTR _oldpen$90631[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldpen$90631[ebp], eax
; Line 3809
	mov	esi, esp
	mov	eax, DWORD PTR _oldpen$90631[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3810
	jmp	SHORT $LN18@do_cursor
$LN6@do_cursor:
; Line 3811
	mov	DWORD PTR _i$90625[ebp], 0
	jmp	SHORT $LN4@do_cursor
$LN3@do_cursor:
	mov	ecx, DWORD PTR _i$90625[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$90625[ebp], ecx
$LN4@do_cursor:
	mov	edx, DWORD PTR _i$90625[ebp]
	cmp	edx, DWORD PTR _length$90624[ebp]
	jge	SHORT $LN18@do_cursor
; Line 3812
	mov	eax, DWORD PTR _i$90625[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN23@do_cursor
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN23@do_cursor:
	test	eax, eax
	jne	SHORT $LN1@do_cursor
; Line 3813
	mov	esi, esp
	mov	ecx, DWORD PTR _colours+1044
	push	ecx
	mov	edx, DWORD PTR _starty$90621[ebp]
	push	edx
	mov	eax, DWORD PTR _startx$90620[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetPixel@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@do_cursor:
; Line 3815
	mov	edx, DWORD PTR _startx$90620[ebp]
	add	edx, DWORD PTR _dx$90622[ebp]
	mov	DWORD PTR _startx$90620[ebp], edx
; Line 3816
	mov	eax, DWORD PTR _starty$90621[ebp]
	add	eax, DWORD PTR _dy$90623[ebp]
	mov	DWORD PTR _starty$90621[ebp], eax
; Line 3817
	jmp	SHORT $LN3@do_cursor
$LN18@do_cursor:
; Line 3820
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@do_cursor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@do_cursor:
	DD	1
	DD	$LN21@do_cursor
$LN21@do_cursor:
	DD	-64					; ffffffc0H
	DD	40					; 00000028H
	DD	$LN20@do_cursor
$LN20@do_cursor:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_do_cursor ENDP
_TEXT	ENDS
PUBLIC	_char_width
EXTRN	__imp__GetCharWidthW@16:PROC
EXTRN	__imp__GetCharWidth32W@16:PROC
EXTRN	__imp__GetCharWidthA@16:PROC
EXTRN	__imp__GetCharWidth32A@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -20						; size = 4
_ibuf$ = -12						; size = 4
_hdc$ = -4						; size = 4
_ctx$ = 8						; size = 4
_uc$ = 12						; size = 4
_char_width PROC
; Line 3824
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3825
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _hdc$[ebp], eax
; Line 3826
	mov	DWORD PTR _ibuf$[ebp], 0
; Line 3831
	cmp	DWORD PTR _font_dualwidth, 0
	jne	SHORT $LN21@char_width
	mov	eax, 1
	jmp	$LN22@char_width
$LN21@char_width:
; Line 3833
	mov	ecx, DWORD PTR _uc$[ebp]
	and	ecx, -256				; ffffff00H
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 55296		; 0000d800H
	je	SHORT $LN18@char_width
	cmp	DWORD PTR tv66[ebp], 55552		; 0000d900H
	je	SHORT $LN17@char_width
	cmp	DWORD PTR tv66[ebp], 55808		; 0000da00H
	je	SHORT $LN16@char_width
	jmp	SHORT $LN19@char_width
$LN18@char_width:
; Line 3835
	mov	edx, DWORD PTR _uc$[ebp]
	and	edx, 255				; 000000ffH
	movzx	eax, WORD PTR _ucsdata[edx*2+528]
	mov	DWORD PTR _uc$[ebp], eax
; Line 3836
	jmp	SHORT $LN19@char_width
$LN17@char_width:
; Line 3838
	mov	ecx, DWORD PTR _uc$[ebp]
	and	ecx, 255				; 000000ffH
	movzx	edx, WORD PTR _ucsdata[ecx*2+1552]
	mov	DWORD PTR _uc$[ebp], edx
; Line 3839
	jmp	SHORT $LN19@char_width
$LN16@char_width:
; Line 3841
	mov	eax, DWORD PTR _uc$[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, WORD PTR _ucsdata[eax*2+16]
	mov	DWORD PTR _uc$[ebp], ecx
$LN19@char_width:
; Line 3844
	mov	edx, DWORD PTR _uc$[ebp]
	and	edx, -512				; fffffe00H
	cmp	edx, 61440				; 0000f000H
	jne	$LN15@char_width
; Line 3845
	cmp	DWORD PTR _ucsdata+4, 0
	je	SHORT $LN14@char_width
	mov	eax, 1
	jmp	$LN22@char_width
$LN14@char_width:
; Line 3848
	mov	eax, DWORD PTR _uc$[ebp]
	and	eax, 255				; 000000ffH
	cmp	eax, 32					; 00000020H
	jb	SHORT $LN13@char_width
	mov	ecx, DWORD PTR _uc$[ebp]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 126				; 0000007eH
	ja	SHORT $LN13@char_width
; Line 3849
	mov	eax, 1
	jmp	$LN22@char_width
$LN13@char_width:
; Line 3851
	mov	edx, DWORD PTR _uc$[ebp]
	and	edx, -256				; ffffff00H
	cmp	edx, 61696				; 0000f100H
	jne	SHORT $LN12@char_width
; Line 3852
	mov	esi, esp
	mov	eax, DWORD PTR _fonts
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN11@char_width
$LN12@char_width:
; Line 3853
	mov	edx, DWORD PTR _uc$[ebp]
	and	edx, -256				; ffffff00H
	cmp	edx, 61440				; 0000f000H
	jne	SHORT $LN10@char_width
; Line 3854
	push	32					; 00000020H
	call	_another_font
	add	esp, 4
; Line 3855
	cmp	DWORD PTR _fonts+128, 0
	jne	SHORT $LN9@char_width
	xor	eax, eax
	jmp	$LN22@char_width
$LN9@char_width:
; Line 3857
	mov	esi, esp
	mov	eax, DWORD PTR _fonts+128
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3858
	jmp	SHORT $LN11@char_width
$LN10@char_width:
; Line 3859
	xor	eax, eax
	jmp	$LN22@char_width
$LN11@char_width:
; Line 3862
	mov	esi, esp
	lea	edx, DWORD PTR _ibuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _uc$[ebp]
	and	eax, 255				; 000000ffH
	push	eax
	mov	ecx, DWORD PTR _uc$[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetCharWidth32A@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	je	SHORT $LN7@char_width
	mov	esi, esp
	lea	eax, DWORD PTR _ibuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uc$[ebp]
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _uc$[ebp]
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCharWidthA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	je	SHORT $LN7@char_width
; Line 3863
	xor	eax, eax
	jmp	$LN22@char_width
$LN7@char_width:
; Line 3864
	jmp	$LN6@char_width
$LN15@char_width:
; Line 3866
	cmp	DWORD PTR _uc$[ebp], 32			; 00000020H
	jl	SHORT $LN5@char_width
	cmp	DWORD PTR _uc$[ebp], 126		; 0000007eH
	jg	SHORT $LN5@char_width
	mov	eax, 1
	jmp	$LN22@char_width
$LN5@char_width:
; Line 3868
	mov	esi, esp
	mov	ecx, DWORD PTR _fonts
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3869
	mov	esi, esp
	lea	eax, DWORD PTR _ibuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uc$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCharWidth32W@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@char_width
	jmp	SHORT $LN6@char_width
$LN4@char_width:
; Line 3871
	mov	esi, esp
	lea	ecx, DWORD PTR _ibuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uc$[ebp]
	push	edx
	mov	eax, DWORD PTR _uc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetCharWidthW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@char_width
; Line 3873
	jmp	SHORT $LN6@char_width
$LN2@char_width:
; Line 3874
	xor	eax, eax
	jmp	SHORT $LN22@char_width
$LN6@char_width:
; Line 3877
	mov	eax, DWORD PTR _font_width
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _ibuf$[ebp]
	lea	eax, DWORD PTR [edx+eax-1]
	mov	DWORD PTR _ibuf$[ebp], eax
; Line 3878
	mov	eax, DWORD PTR _ibuf$[ebp]
	cdq
	idiv	DWORD PTR _font_width
	mov	DWORD PTR _ibuf$[ebp], eax
; Line 3880
	mov	eax, DWORD PTR _ibuf$[ebp]
$LN22@char_width:
; Line 3881
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@char_width
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@char_width:
	DD	1
	DD	$LN25@char_width
$LN25@char_width:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN24@char_width
$LN24@char_width:
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_char_width ENDP
_TEXT	ENDS
EXTRN	_load_system32_dll:PROC
_BSS	SEGMENT
_p_ToUnicodeEx DD 01H DUP (?)
_p_FlashWindowEx DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv75 = -12						; size = 4
tv70 = -8						; size = 4
_user32_module$ = -4					; size = 4
_init_winfuncs PROC
; Line 3888
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3889
	push	OFFSET $SG90683
	call	_load_system32_dll
	add	esp, 4
	mov	DWORD PTR _user32_module$[ebp], eax
; Line 3890
	cmp	DWORD PTR _user32_module$[ebp], 0
	je	SHORT $LN3@init_winfu
	mov	esi, esp
	push	OFFSET $SG90686
	mov	eax, DWORD PTR _user32_module$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@init_winfu
$LN3@init_winfu:
	mov	DWORD PTR tv70[ebp], 0
$LN4@init_winfu:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _p_FlashWindowEx, ecx
; Line 3891
	cmp	DWORD PTR _user32_module$[ebp], 0
	je	SHORT $LN5@init_winfu
	mov	esi, esp
	push	OFFSET $SG90689
	mov	edx, DWORD PTR _user32_module$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@init_winfu
$LN5@init_winfu:
	mov	DWORD PTR tv75[ebp], 0
$LN6@init_winfu:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _p_ToUnicodeEx, eax
; Line 3892
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_init_winfuncs ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_xlat_uskbd2cyrllic:PROC
EXTRN	__imp__MessageBeep@4:PROC
EXTRN	_check_compose:PROC
EXTRN	__imp__ToAsciiEx@24:PROC
EXTRN	_format_arrow_key:PROC
EXTRN	_term_scroll_to_selection:PROC
EXTRN	__imp__SetKeyboardState@4:PROC
_BSS	SEGMENT
?keysb@?EC@??TranslateKey@@9@9 DB 03H DUP (?)		; `TranslateKey'::`66'::keysb
	ALIGN	4

?keys@?EC@??TranslateKey@@9@9 DW 03H DUP (?)		; `TranslateKey'::`66'::keys
	ALIGN	4

?keys_unicode@?1??TranslateKey@@9@9 DW 03H DUP (?)	; `TranslateKey'::`2'::keys_unicode
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv693 = -524						; size = 4
tv681 = -520						; size = 4
tv574 = -516						; size = 4
tv547 = -512						; size = 4
tv492 = -508						; size = 4
tv385 = -504						; size = 4
tv379 = -500						; size = 4
tv333 = -496						; size = 4
tv243 = -492						; size = 4
_cbuf$91054 = -484					; size = 4
_cbuf$91051 = -472					; size = 4
_ch$91044 = -457					; size = 1
_nc$91035 = -452					; size = 4
_wch$91032 = -444					; size = 2
_keybuf$91028 = -432					; size = 2
_i$91016 = -424						; size = 4
_capsOn$91012 = -420					; size = 4
_xkey$90998 = -413					; size = 1
_offt$90971 = -412					; size = 4
_codes$90963 = -404					; size = 7
_index$90941 = -392					; size = 4
_codes$90939 = -384					; size = 49
_xkey$90826 = -328					; size = 4
_nParam$90768 = -324					; size = 4
_kbd_layout$ = -320					; size = 4
_nethack_keypad$ = -316					; size = 4
_ctrlaltkeys$ = -312					; size = 4
_no_applic_k$ = -308					; size = 4
_funky_type$ = -304					; size = 4
_p$ = -300						; size = 4
_code$ = -296						; size = 4
_i$ = -292						; size = 4
_r$ = -288						; size = 4
_shift_state$ = -284					; size = 4
_key_down$ = -280					; size = 4
_left_alt$ = -276					; size = 4
_scan$ = -272						; size = 4
_keystate$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
_output$ = 20						; size = 4
_TranslateKey PROC
; Line 3902
	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3904
	mov	DWORD PTR _left_alt$[ebp], 0
; Line 3906
	mov	eax, DWORD PTR _output$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 3908
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _funky_type$[ebp], eax
; Line 3909
	push	65					; 00000041H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _no_applic_k$[ebp], eax
; Line 3910
	push	89					; 00000059H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _ctrlaltkeys$[ebp], eax
; Line 3911
	push	75					; 0000004bH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _nethack_keypad$[ebp], eax
; Line 3913
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetKeyboardLayout@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _kbd_layout$[ebp], eax
; Line 3919
	mov	esi, esp
	lea	edx, DWORD PTR _keystate$[ebp]
	push	edx
	call	DWORD PTR __imp__GetKeyboardState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax
; Line 3920
	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN237@TranslateK
; Line 3921
	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _keystate$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 3922
	jmp	$LN236@TranslateK
$LN237@TranslateK:
; Line 3998
	cmp	DWORD PTR _wParam$[ebp], 18		; 00000012H
	jne	SHORT $LN235@TranslateK
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 256				; 00000100H
	je	SHORT $LN235@TranslateK
; Line 3999
	mov	al, BYTE PTR _keystate$[ebp+18]
	mov	BYTE PTR _keystate$[ebp+165], al
$LN235@TranslateK:
; Line 4007
	cmp	DWORD PTR _funky_type$[ebp], 3
	je	SHORT $LN233@TranslateK
	cmp	DWORD PTR _funky_type$[ebp], 1
	jg	SHORT $LN234@TranslateK
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+324], 0
	je	SHORT $LN234@TranslateK
	cmp	DWORD PTR _no_applic_k$[ebp], 0
	jne	SHORT $LN234@TranslateK
$LN233@TranslateK:
	cmp	DWORD PTR _wParam$[ebp], 144		; 00000090H
	jne	SHORT $LN234@TranslateK
	movzx	edx, BYTE PTR _keystate$[ebp+16]
	and	edx, 128				; 00000080H
	jne	SHORT $LN234@TranslateK
; Line 4009
	mov	DWORD PTR _wParam$[ebp], 43		; 0000002bH
; Line 4012
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 49152				; 0000c000H
	jne	SHORT $LN234@TranslateK
; Line 4013
	movzx	edx, BYTE PTR _keystate$[ebp+144]
	xor	edx, 1
	mov	BYTE PTR _keystate$[ebp+144], dl
$LN234@TranslateK:
; Line 4017
	mov	esi, esp
	lea	eax, DWORD PTR _keystate$[ebp]
	push	eax
	call	DWORD PTR __imp__SetKeyboardState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN236@TranslateK:
; Line 4022
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN231@TranslateK
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 49152				; 0000c000H
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN231@TranslateK
; Line 4023
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN231@TranslateK:
; Line 4025
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 8192				; 00002000H
	je	SHORT $LN230@TranslateK
	movzx	eax, BYTE PTR _keystate$[ebp+165]
	and	eax, 128				; 00000080H
	jne	SHORT $LN230@TranslateK
; Line 4026
	mov	DWORD PTR _left_alt$[ebp], 1
$LN230@TranslateK:
; Line 4028
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 32768				; 00008000H
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	DWORD PTR _key_down$[ebp], edx
; Line 4031
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN229@TranslateK
	movzx	eax, BYTE PTR _keystate$[ebp+17]
	and	eax, 128				; 00000080H
	je	SHORT $LN229@TranslateK
; Line 4032
	cmp	DWORD PTR _ctrlaltkeys$[ebp], 0
	je	SHORT $LN228@TranslateK
; Line 4033
	mov	BYTE PTR _keystate$[ebp+18], 0
; Line 4034
	jmp	SHORT $LN229@TranslateK
$LN228@TranslateK:
; Line 4035
	mov	BYTE PTR _keystate$[ebp+165], 128	; 00000080H
; Line 4036
	mov	DWORD PTR _left_alt$[ebp], 0
$LN229@TranslateK:
; Line 4040
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 33279				; 000081ffH
	mov	DWORD PTR _scan$[ebp], edx
; Line 4042
	movzx	eax, BYTE PTR _keystate$[ebp+16]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	neg	eax
	movzx	ecx, BYTE PTR _keystate$[ebp+17]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _shift_state$[ebp], edx
; Line 4045
	cmp	DWORD PTR _compose_state, 0
	jne	SHORT $LN226@TranslateK
; Line 4046
	mov	DWORD PTR ?compose_keycode@?1??TranslateKey@@9@9, 256 ; 00000100H
; Line 4047
	push	88					; 00000058H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN225@TranslateK
; Line 4048
	cmp	DWORD PTR _wParam$[ebp], 18		; 00000012H
	jne	SHORT $LN225@TranslateK
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 256				; 00000100H
	je	SHORT $LN225@TranslateK
; Line 4049
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR ?compose_keycode@?1??TranslateKey@@9@9, eax
$LN225@TranslateK:
; Line 4051
	cmp	DWORD PTR _wParam$[ebp], 93		; 0000005dH
	jne	SHORT $LN226@TranslateK
; Line 4052
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR ?compose_keycode@?1??TranslateKey@@9@9, ecx
$LN226@TranslateK:
; Line 4055
	mov	edx, DWORD PTR _wParam$[ebp]
	cmp	edx, DWORD PTR ?compose_keycode@?1??TranslateKey@@9@9
	jne	SHORT $LN222@TranslateK
; Line 4057
	cmp	DWORD PTR _compose_state, 0
	jne	SHORT $LN221@TranslateK
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 49152				; 0000c000H
	jne	SHORT $LN221@TranslateK
; Line 4058
	mov	DWORD PTR _compose_state, 1
	jmp	SHORT $LN220@TranslateK
$LN221@TranslateK:
; Line 4059
	cmp	DWORD PTR _compose_state, 1
	jne	SHORT $LN219@TranslateK
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 32768				; 00008000H
	je	SHORT $LN219@TranslateK
; Line 4060
	mov	DWORD PTR _compose_state, 2
; Line 4061
	jmp	SHORT $LN220@TranslateK
$LN219@TranslateK:
; Line 4062
	mov	DWORD PTR _compose_state, 0
$LN220@TranslateK:
; Line 4063
	jmp	SHORT $LN217@TranslateK
$LN222@TranslateK:
	cmp	DWORD PTR _compose_state, 1
	jne	SHORT $LN217@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 17		; 00000011H
	je	SHORT $LN217@TranslateK
; Line 4064
	mov	DWORD PTR _compose_state, 0
$LN217@TranslateK:
; Line 4066
	cmp	DWORD PTR _compose_state, 1
	jle	SHORT $LN215@TranslateK
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN215@TranslateK
; Line 4067
	mov	DWORD PTR _compose_state, 0
$LN215@TranslateK:
; Line 4072
	cmp	DWORD PTR _left_alt$[ebp], 0
	jne	SHORT $LN213@TranslateK
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+324], 0
	je	SHORT $LN212@TranslateK
	cmp	DWORD PTR _no_applic_k$[ebp], 0
	jne	SHORT $LN212@TranslateK
	cmp	DWORD PTR _funky_type$[ebp], 2
	jne	SHORT $LN213@TranslateK
$LN212@TranslateK:
	cmp	DWORD PTR _funky_type$[ebp], 3
	je	SHORT $LN213@TranslateK
	cmp	DWORD PTR _nethack_keypad$[ebp], 0
	jne	SHORT $LN213@TranslateK
	cmp	DWORD PTR _compose_state, 0
	je	$LN214@TranslateK
$LN213@TranslateK:
; Line 4073
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 256				; 00000100H
	jne	$LN214@TranslateK
; Line 4074
	mov	DWORD PTR _nParam$90768[ebp], 0
; Line 4075
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv243[ebp], ecx
	mov	edx, DWORD PTR tv243[ebp]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR tv243[ebp], edx
	cmp	DWORD PTR tv243[ebp], 34		; 00000022H
	ja	$LN209@TranslateK
	mov	eax, DWORD PTR tv243[ebp]
	movzx	ecx, BYTE PTR $LN242@TranslateK[eax]
	jmp	DWORD PTR $LN257@TranslateK[ecx*4]
$LN208@TranslateK:
; Line 4077
	mov	DWORD PTR _nParam$90768[ebp], 96	; 00000060H
; Line 4078
	jmp	SHORT $LN209@TranslateK
$LN207@TranslateK:
; Line 4080
	mov	DWORD PTR _nParam$90768[ebp], 97	; 00000061H
; Line 4081
	jmp	SHORT $LN209@TranslateK
$LN206@TranslateK:
; Line 4083
	mov	DWORD PTR _nParam$90768[ebp], 98	; 00000062H
; Line 4084
	jmp	SHORT $LN209@TranslateK
$LN205@TranslateK:
; Line 4086
	mov	DWORD PTR _nParam$90768[ebp], 99	; 00000063H
; Line 4087
	jmp	SHORT $LN209@TranslateK
$LN204@TranslateK:
; Line 4089
	mov	DWORD PTR _nParam$90768[ebp], 100	; 00000064H
; Line 4090
	jmp	SHORT $LN209@TranslateK
$LN203@TranslateK:
; Line 4092
	mov	DWORD PTR _nParam$90768[ebp], 101	; 00000065H
; Line 4093
	jmp	SHORT $LN209@TranslateK
$LN202@TranslateK:
; Line 4095
	mov	DWORD PTR _nParam$90768[ebp], 102	; 00000066H
; Line 4096
	jmp	SHORT $LN209@TranslateK
$LN201@TranslateK:
; Line 4098
	mov	DWORD PTR _nParam$90768[ebp], 103	; 00000067H
; Line 4099
	jmp	SHORT $LN209@TranslateK
$LN200@TranslateK:
; Line 4101
	mov	DWORD PTR _nParam$90768[ebp], 104	; 00000068H
; Line 4102
	jmp	SHORT $LN209@TranslateK
$LN199@TranslateK:
; Line 4104
	mov	DWORD PTR _nParam$90768[ebp], 105	; 00000069H
; Line 4105
	jmp	SHORT $LN209@TranslateK
$LN198@TranslateK:
; Line 4107
	mov	DWORD PTR _nParam$90768[ebp], 110	; 0000006eH
$LN209@TranslateK:
; Line 4110
	cmp	DWORD PTR _nParam$90768[ebp], 0
	je	SHORT $LN214@TranslateK
; Line 4111
	movzx	edx, BYTE PTR _keystate$[ebp+144]
	and	edx, 1
	je	SHORT $LN196@TranslateK
; Line 4112
	mov	eax, DWORD PTR _shift_state$[ebp]
	or	eax, 1
	mov	DWORD PTR _shift_state$[ebp], eax
$LN196@TranslateK:
; Line 4113
	mov	ecx, DWORD PTR _nParam$90768[ebp]
	mov	DWORD PTR _wParam$[ebp], ecx
$LN214@TranslateK:
; Line 4119
	cmp	DWORD PTR _key_down$[ebp], 0
	je	$LN195@TranslateK
	movzx	edx, BYTE PTR _keystate$[ebp+165]
	and	edx, 128				; 00000080H
	jne	$LN195@TranslateK
	cmp	DWORD PTR _compose_state, 0
	jne	$LN195@TranslateK
; Line 4121
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN194@TranslateK
; Line 4122
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 27			; 0000001bH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN194@TranslateK:
; Line 4125
	cmp	DWORD PTR _wParam$[ebp], 33		; 00000021H
	jne	SHORT $LN193@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 1
	jne	SHORT $LN193@TranslateK
; Line 4126
	mov	esi, esp
	push	0
	push	2
	push	277					; 00000115H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4127
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN193@TranslateK:
; Line 4129
	cmp	DWORD PTR _wParam$[ebp], 33		; 00000021H
	jne	SHORT $LN192@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN192@TranslateK
; Line 4130
	mov	esi, esp
	push	0
	push	0
	push	277					; 00000115H
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4131
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN192@TranslateK:
; Line 4133
	cmp	DWORD PTR _wParam$[ebp], 34		; 00000022H
	jne	SHORT $LN191@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 1
	jne	SHORT $LN191@TranslateK
; Line 4134
	mov	esi, esp
	push	0
	push	3
	push	277					; 00000115H
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4135
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN191@TranslateK:
; Line 4137
	cmp	DWORD PTR _wParam$[ebp], 34		; 00000022H
	jne	SHORT $LN190@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN190@TranslateK
; Line 4138
	mov	esi, esp
	push	0
	push	1
	push	277					; 00000115H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4139
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN190@TranslateK:
; Line 4141
	cmp	DWORD PTR _wParam$[ebp], 33		; 00000021H
	je	SHORT $LN188@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 34		; 00000022H
	jne	SHORT $LN189@TranslateK
$LN188@TranslateK:
	cmp	DWORD PTR _shift_state$[ebp], 3
	jne	SHORT $LN189@TranslateK
; Line 4142
	xor	eax, eax
	cmp	DWORD PTR _wParam$[ebp], 33		; 00000021H
	setne	al
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_scroll_to_selection
	add	esp, 8
; Line 4143
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN189@TranslateK:
; Line 4145
	cmp	DWORD PTR _wParam$[ebp], 45		; 0000002dH
	jne	SHORT $LN187@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 1
	jne	SHORT $LN187@TranslateK
; Line 4146
	push	0
	call	_request_paste
	add	esp, 4
; Line 4147
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN187@TranslateK:
; Line 4149
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN186@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 115		; 00000073H
	jne	SHORT $LN186@TranslateK
	push	78					; 0000004eH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN186@TranslateK
; Line 4150
	or	eax, -1
	jmp	$LN238@TranslateK
$LN186@TranslateK:
; Line 4153
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN185@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 32		; 00000020H
	jne	SHORT $LN185@TranslateK
	push	79					; 0000004fH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN185@TranslateK
; Line 4154
	mov	esi, esp
	push	0
	push	61696					; 0000f100H
	push	274					; 00000112H
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4155
	or	eax, -1
	jmp	$LN238@TranslateK
$LN185@TranslateK:
; Line 4159
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN184@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 13		; 0000000dH
	jne	SHORT $LN184@TranslateK
	push	84					; 00000054H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN184@TranslateK
	push	106					; 0000006aH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 1
	je	SHORT $LN184@TranslateK
; Line 4160
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 49152				; 0000c000H
	cmp	edx, 16384				; 00004000H
	je	SHORT $LN183@TranslateK
; Line 4161
	call	_flip_full_screen
$LN183@TranslateK:
; Line 4162
	or	eax, -1
	jmp	$LN238@TranslateK
$LN184@TranslateK:
; Line 4165
	cmp	DWORD PTR _wParam$[ebp], 19		; 00000013H
	jne	SHORT $LN182@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN182@TranslateK
; Line 4166
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR [eax+324]
	xor	ecx, 1
	mov	edx, DWORD PTR _term
	mov	DWORD PTR [edx+324], ecx
; Line 4167
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN182@TranslateK:
; Line 4171
	cmp	DWORD PTR _nethack_keypad$[ebp], 0
	je	$LN181@TranslateK
	cmp	DWORD PTR _left_alt$[ebp], 0
	jne	$LN181@TranslateK
; Line 4172
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv333[ebp], eax
	mov	ecx, DWORD PTR tv333[ebp]
	sub	ecx, 97					; 00000061H
	mov	DWORD PTR tv333[ebp], ecx
	cmp	DWORD PTR tv333[ebp], 8
	ja	$LN181@TranslateK
	mov	edx, DWORD PTR tv333[ebp]
	jmp	DWORD PTR $LN258@TranslateK[edx*4]
$LN178@TranslateK:
; Line 4174
	mov	eax, DWORD PTR _shift_state$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR $SG90809[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4175
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN177@TranslateK:
; Line 4177
	mov	ecx, DWORD PTR _shift_state$[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR $SG90811[ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4178
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN176@TranslateK:
; Line 4180
	mov	edx, DWORD PTR _shift_state$[ebp]
	and	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR $SG90813[edx]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4181
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN175@TranslateK:
; Line 4183
	mov	eax, DWORD PTR _shift_state$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR $SG90815[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4184
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN174@TranslateK:
; Line 4186
	mov	ecx, DWORD PTR _shift_state$[ebp]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 0
	add	ecx, 46					; 0000002eH
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4187
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN173@TranslateK:
; Line 4189
	mov	ecx, DWORD PTR _shift_state$[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR $SG90818[ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4190
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN172@TranslateK:
; Line 4192
	mov	edx, DWORD PTR _shift_state$[ebp]
	and	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR $SG90820[edx]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4193
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN171@TranslateK:
; Line 4195
	mov	eax, DWORD PTR _shift_state$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR $SG90822[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4196
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN170@TranslateK:
; Line 4198
	mov	ecx, DWORD PTR _shift_state$[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR $SG90824[ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4199
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN181@TranslateK:
; Line 4204
	cmp	DWORD PTR _left_alt$[ebp], 0
	jne	$LN169@TranslateK
; Line 4205
	mov	DWORD PTR _xkey$90826[ebp], 0
; Line 4209
	cmp	DWORD PTR _funky_type$[ebp], 3
	je	SHORT $LN167@TranslateK
	cmp	DWORD PTR _funky_type$[ebp], 1
	jg	SHORT $LN168@TranslateK
	mov	edx, DWORD PTR _term
	cmp	DWORD PTR [edx+324], 0
	je	SHORT $LN168@TranslateK
	cmp	DWORD PTR _no_applic_k$[ebp], 0
	jne	SHORT $LN168@TranslateK
$LN167@TranslateK:
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv379[ebp], eax
	mov	ecx, DWORD PTR tv379[ebp]
	sub	ecx, 43					; 0000002bH
	mov	DWORD PTR tv379[ebp], ecx
	cmp	DWORD PTR tv379[ebp], 68		; 00000044H
	ja	SHORT $LN168@TranslateK
	mov	edx, DWORD PTR tv379[ebp]
	movzx	eax, BYTE PTR $LN243@TranslateK[edx]
	jmp	DWORD PTR $LN259@TranslateK[eax*4]
$LN164@TranslateK:
; Line 4211
	mov	DWORD PTR _xkey$90826[ebp], 80		; 00000050H
; Line 4212
	jmp	SHORT $LN168@TranslateK
$LN163@TranslateK:
; Line 4214
	mov	DWORD PTR _xkey$90826[ebp], 81		; 00000051H
; Line 4215
	jmp	SHORT $LN168@TranslateK
$LN162@TranslateK:
; Line 4217
	mov	DWORD PTR _xkey$90826[ebp], 82		; 00000052H
; Line 4218
	jmp	SHORT $LN168@TranslateK
$LN161@TranslateK:
; Line 4220
	mov	DWORD PTR _xkey$90826[ebp], 83		; 00000053H
$LN168@TranslateK:
; Line 4223
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+324], 0
	je	$LN160@TranslateK
	cmp	DWORD PTR _no_applic_k$[ebp], 0
	jne	$LN160@TranslateK
; Line 4224
	mov	edx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv385[ebp], edx
	mov	eax, DWORD PTR tv385[ebp]
	sub	eax, 13					; 0000000dH
	mov	DWORD PTR tv385[ebp], eax
	cmp	DWORD PTR tv385[ebp], 98		; 00000062H
	ja	$LN160@TranslateK
	mov	ecx, DWORD PTR tv385[ebp]
	movzx	edx, BYTE PTR $LN244@TranslateK[ecx]
	jmp	DWORD PTR $LN260@TranslateK[edx*4]
$LN157@TranslateK:
; Line 4226
	mov	DWORD PTR _xkey$90826[ebp], 112		; 00000070H
; Line 4227
	jmp	$LN160@TranslateK
$LN156@TranslateK:
; Line 4229
	mov	DWORD PTR _xkey$90826[ebp], 113		; 00000071H
; Line 4230
	jmp	$LN160@TranslateK
$LN155@TranslateK:
; Line 4232
	mov	DWORD PTR _xkey$90826[ebp], 114		; 00000072H
; Line 4233
	jmp	$LN160@TranslateK
$LN154@TranslateK:
; Line 4235
	mov	DWORD PTR _xkey$90826[ebp], 115		; 00000073H
; Line 4236
	jmp	$LN160@TranslateK
$LN153@TranslateK:
; Line 4238
	mov	DWORD PTR _xkey$90826[ebp], 116		; 00000074H
; Line 4239
	jmp	$LN160@TranslateK
$LN152@TranslateK:
; Line 4241
	mov	DWORD PTR _xkey$90826[ebp], 117		; 00000075H
; Line 4242
	jmp	$LN160@TranslateK
$LN151@TranslateK:
; Line 4244
	mov	DWORD PTR _xkey$90826[ebp], 118		; 00000076H
; Line 4245
	jmp	$LN160@TranslateK
$LN150@TranslateK:
; Line 4247
	mov	DWORD PTR _xkey$90826[ebp], 119		; 00000077H
; Line 4248
	jmp	$LN160@TranslateK
$LN149@TranslateK:
; Line 4250
	mov	DWORD PTR _xkey$90826[ebp], 120		; 00000078H
; Line 4251
	jmp	$LN160@TranslateK
$LN148@TranslateK:
; Line 4253
	mov	DWORD PTR _xkey$90826[ebp], 121		; 00000079H
; Line 4254
	jmp	$LN160@TranslateK
$LN147@TranslateK:
; Line 4257
	mov	DWORD PTR _xkey$90826[ebp], 110		; 0000006eH
; Line 4258
	jmp	$LN160@TranslateK
$LN146@TranslateK:
; Line 4260
	cmp	DWORD PTR _funky_type$[ebp], 2
	jne	SHORT $LN145@TranslateK
; Line 4261
	cmp	DWORD PTR _shift_state$[ebp], 0
	je	SHORT $LN144@TranslateK
; Line 4262
	mov	DWORD PTR _xkey$90826[ebp], 108		; 0000006cH
; Line 4263
	jmp	SHORT $LN143@TranslateK
$LN144@TranslateK:
; Line 4264
	mov	DWORD PTR _xkey$90826[ebp], 107		; 0000006bH
$LN143@TranslateK:
; Line 4265
	jmp	SHORT $LN142@TranslateK
$LN145@TranslateK:
	cmp	DWORD PTR _shift_state$[ebp], 0
	je	SHORT $LN141@TranslateK
; Line 4266
	mov	DWORD PTR _xkey$90826[ebp], 109		; 0000006dH
; Line 4267
	jmp	SHORT $LN142@TranslateK
$LN141@TranslateK:
; Line 4268
	mov	DWORD PTR _xkey$90826[ebp], 108		; 0000006cH
$LN142@TranslateK:
; Line 4269
	jmp	SHORT $LN160@TranslateK
$LN139@TranslateK:
; Line 4272
	cmp	DWORD PTR _funky_type$[ebp], 2
	jne	SHORT $LN138@TranslateK
; Line 4273
	mov	DWORD PTR _xkey$90826[ebp], 111		; 0000006fH
$LN138@TranslateK:
; Line 4274
	jmp	SHORT $LN160@TranslateK
$LN137@TranslateK:
; Line 4276
	cmp	DWORD PTR _funky_type$[ebp], 2
	jne	SHORT $LN136@TranslateK
; Line 4277
	mov	DWORD PTR _xkey$90826[ebp], 106		; 0000006aH
$LN136@TranslateK:
; Line 4278
	jmp	SHORT $LN160@TranslateK
$LN135@TranslateK:
; Line 4280
	cmp	DWORD PTR _funky_type$[ebp], 2
	jne	SHORT $LN134@TranslateK
; Line 4281
	mov	DWORD PTR _xkey$90826[ebp], 109		; 0000006dH
$LN134@TranslateK:
; Line 4282
	jmp	SHORT $LN160@TranslateK
$LN133@TranslateK:
; Line 4285
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 256				; 00000100H
	je	SHORT $LN160@TranslateK
; Line 4286
	mov	DWORD PTR _xkey$90826[ebp], 77		; 0000004dH
$LN160@TranslateK:
; Line 4289
	cmp	DWORD PTR _xkey$90826[ebp], 0
	je	$LN169@TranslateK
; Line 4290
	mov	edx, DWORD PTR _term
	cmp	DWORD PTR [edx+328], 0
	je	SHORT $LN130@TranslateK
; Line 4291
	cmp	DWORD PTR _xkey$90826[ebp], 80		; 00000050H
	jl	SHORT $LN129@TranslateK
	cmp	DWORD PTR _xkey$90826[ebp], 83		; 00000053H
	jg	SHORT $LN129@TranslateK
; Line 4292
	mov	eax, DWORD PTR _xkey$90826[ebp]
	push	eax
	push	OFFSET $SG90874
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4293
	jmp	SHORT $LN128@TranslateK
$LN129@TranslateK:
; Line 4294
	mov	edx, DWORD PTR _xkey$90826[ebp]
	push	edx
	push	OFFSET $SG90877
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN128@TranslateK:
; Line 4295
	jmp	SHORT $LN127@TranslateK
$LN130@TranslateK:
; Line 4296
	mov	ecx, DWORD PTR _xkey$90826[ebp]
	push	ecx
	push	OFFSET $SG90880
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN127@TranslateK:
; Line 4297
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN169@TranslateK:
; Line 4301
	cmp	DWORD PTR _wParam$[ebp], 8
	jne	SHORT $LN126@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 0
	jne	SHORT $LN126@TranslateK
; Line 4302
	push	61					; 0000003dH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	eax, 119				; 00000077H
	add	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4303
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4304
	mov	eax, -2					; fffffffeH
	jmp	$LN238@TranslateK
$LN126@TranslateK:
; Line 4306
	cmp	DWORD PTR _wParam$[ebp], 8
	jne	SHORT $LN125@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 1
	jne	SHORT $LN125@TranslateK
; Line 4308
	push	61					; 0000003dH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	eax, -119				; ffffff89H
	add	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4309
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4310
	mov	eax, -2					; fffffffeH
	jmp	$LN238@TranslateK
$LN125@TranslateK:
; Line 4312
	cmp	DWORD PTR _wParam$[ebp], 9
	jne	SHORT $LN124@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 1
	jne	SHORT $LN124@TranslateK
; Line 4313
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 27			; 0000001bH
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4314
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], 91			; 0000005bH
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4315
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 90			; 0000005aH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4316
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN124@TranslateK:
; Line 4318
	cmp	DWORD PTR _wParam$[ebp], 32		; 00000020H
	jne	SHORT $LN123@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN123@TranslateK
; Line 4319
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4320
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN123@TranslateK:
; Line 4322
	cmp	DWORD PTR _wParam$[ebp], 32		; 00000020H
	jne	SHORT $LN122@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 3
	jne	SHORT $LN122@TranslateK
; Line 4323
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], 160			; 000000a0H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4324
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN122@TranslateK:
; Line 4326
	cmp	DWORD PTR _wParam$[ebp], 3
	jne	SHORT $LN121@TranslateK
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN121@TranslateK
; Line 4327
	cmp	DWORD PTR _back, 0
	je	SHORT $LN120@TranslateK
; Line 4328
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _backhandle
	push	eax
	mov	ecx, DWORD PTR _back
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN120@TranslateK:
; Line 4329
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN121@TranslateK:
; Line 4331
	cmp	DWORD PTR _wParam$[ebp], 19		; 00000013H
	jne	SHORT $LN119@TranslateK
; Line 4332
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 26			; 0000001aH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4333
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4334
	mov	eax, -2					; fffffffeH
	jmp	$LN238@TranslateK
$LN119@TranslateK:
; Line 4337
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN118@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 50		; 00000032H
	jb	SHORT $LN118@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 56		; 00000038H
	ja	SHORT $LN118@TranslateK
; Line 4338
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _wParam$[ebp]
	mov	al, BYTE PTR $SG90890[edx-50]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4339
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN118@TranslateK:
; Line 4341
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN117@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 189		; 000000bdH
	je	SHORT $LN116@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 191		; 000000bfH
	jne	SHORT $LN117@TranslateK
$LN116@TranslateK:
; Line 4342
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 31			; 0000001fH
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4343
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN117@TranslateK:
; Line 4345
	cmp	DWORD PTR _shift_state$[ebp], 2
	jne	SHORT $LN115@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 223		; 000000dfH
	je	SHORT $LN114@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 220		; 000000dcH
	jne	SHORT $LN115@TranslateK
$LN114@TranslateK:
; Line 4346
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], 28			; 0000001cH
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 4347
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN115@TranslateK:
; Line 4349
	cmp	DWORD PTR _shift_state$[ebp], 3
	jne	SHORT $LN113@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 222		; 000000deH
	jne	SHORT $LN113@TranslateK
; Line 4350
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4351
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN113@TranslateK:
; Line 4353
	cmp	DWORD PTR _shift_state$[ebp], 0
	jne	SHORT $LN112@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 13		; 0000000dH
	jne	SHORT $LN112@TranslateK
	mov	edx, DWORD PTR _term
	cmp	DWORD PTR [edx+336], 0
	je	SHORT $LN112@TranslateK
; Line 4354
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 13			; 0000000dH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4355
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 10			; 0000000aH
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4356
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN112@TranslateK:
; Line 4368
	mov	DWORD PTR _code$[ebp], 0
; Line 4369
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv492[ebp], ecx
	mov	edx, DWORD PTR tv492[ebp]
	sub	edx, 112				; 00000070H
	mov	DWORD PTR tv492[ebp], edx
	cmp	DWORD PTR tv492[ebp], 19		; 00000013H
	ja	$LN110@TranslateK
	mov	eax, DWORD PTR tv492[ebp]
	jmp	DWORD PTR $LN261@TranslateK[eax*4]
$LN109@TranslateK:
; Line 4371
	movzx	ecx, BYTE PTR _keystate$[ebp+16]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 12					; 0000000cH
	add	ecx, 11					; 0000000bH
	mov	DWORD PTR _code$[ebp], ecx
; Line 4372
	jmp	$LN110@TranslateK
$LN108@TranslateK:
; Line 4374
	movzx	edx, BYTE PTR _keystate$[ebp+16]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	and	edx, 12					; 0000000cH
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _code$[ebp], edx
; Line 4375
	jmp	$LN110@TranslateK
$LN107@TranslateK:
; Line 4377
	movzx	eax, BYTE PTR _keystate$[ebp+16]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	and	eax, 12					; 0000000cH
	add	eax, 13					; 0000000dH
	mov	DWORD PTR _code$[ebp], eax
; Line 4378
	jmp	$LN110@TranslateK
$LN106@TranslateK:
; Line 4380
	movzx	ecx, BYTE PTR _keystate$[ebp+16]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 12					; 0000000cH
	add	ecx, 14					; 0000000eH
	mov	DWORD PTR _code$[ebp], ecx
; Line 4381
	jmp	$LN110@TranslateK
$LN105@TranslateK:
; Line 4383
	movzx	edx, BYTE PTR _keystate$[ebp+16]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	and	edx, 13					; 0000000dH
	add	edx, 15					; 0000000fH
	mov	DWORD PTR _code$[ebp], edx
; Line 4384
	jmp	$LN110@TranslateK
$LN104@TranslateK:
; Line 4386
	movzx	eax, BYTE PTR _keystate$[ebp+16]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	and	eax, 12					; 0000000cH
	add	eax, 17					; 00000011H
	mov	DWORD PTR _code$[ebp], eax
; Line 4387
	jmp	$LN110@TranslateK
$LN103@TranslateK:
; Line 4389
	movzx	ecx, BYTE PTR _keystate$[ebp+16]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 13					; 0000000dH
	add	ecx, 18					; 00000012H
	mov	DWORD PTR _code$[ebp], ecx
; Line 4390
	jmp	$LN110@TranslateK
$LN102@TranslateK:
; Line 4392
	movzx	edx, BYTE PTR _keystate$[ebp+16]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	and	edx, 13					; 0000000dH
	add	edx, 19					; 00000013H
	mov	DWORD PTR _code$[ebp], edx
; Line 4393
	jmp	$LN110@TranslateK
$LN101@TranslateK:
; Line 4395
	movzx	eax, BYTE PTR _keystate$[ebp+16]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	and	eax, 13					; 0000000dH
	add	eax, 20					; 00000014H
	mov	DWORD PTR _code$[ebp], eax
; Line 4396
	jmp	$LN110@TranslateK
$LN100@TranslateK:
; Line 4398
	movzx	ecx, BYTE PTR _keystate$[ebp+16]
	and	ecx, 128				; 00000080H
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 13					; 0000000dH
	add	ecx, 21					; 00000015H
	mov	DWORD PTR _code$[ebp], ecx
; Line 4399
	jmp	SHORT $LN110@TranslateK
$LN99@TranslateK:
; Line 4401
	mov	DWORD PTR _code$[ebp], 23		; 00000017H
; Line 4402
	jmp	SHORT $LN110@TranslateK
$LN98@TranslateK:
; Line 4404
	mov	DWORD PTR _code$[ebp], 24		; 00000018H
; Line 4405
	jmp	SHORT $LN110@TranslateK
$LN97@TranslateK:
; Line 4407
	mov	DWORD PTR _code$[ebp], 25		; 00000019H
; Line 4408
	jmp	SHORT $LN110@TranslateK
$LN96@TranslateK:
; Line 4410
	mov	DWORD PTR _code$[ebp], 26		; 0000001aH
; Line 4411
	jmp	SHORT $LN110@TranslateK
$LN95@TranslateK:
; Line 4413
	mov	DWORD PTR _code$[ebp], 28		; 0000001cH
; Line 4414
	jmp	SHORT $LN110@TranslateK
$LN94@TranslateK:
; Line 4416
	mov	DWORD PTR _code$[ebp], 29		; 0000001dH
; Line 4417
	jmp	SHORT $LN110@TranslateK
$LN93@TranslateK:
; Line 4419
	mov	DWORD PTR _code$[ebp], 31		; 0000001fH
; Line 4420
	jmp	SHORT $LN110@TranslateK
$LN92@TranslateK:
; Line 4422
	mov	DWORD PTR _code$[ebp], 32		; 00000020H
; Line 4423
	jmp	SHORT $LN110@TranslateK
$LN91@TranslateK:
; Line 4425
	mov	DWORD PTR _code$[ebp], 33		; 00000021H
; Line 4426
	jmp	SHORT $LN110@TranslateK
$LN90@TranslateK:
; Line 4428
	mov	DWORD PTR _code$[ebp], 34		; 00000022H
$LN110@TranslateK:
; Line 4431
	mov	edx, DWORD PTR _shift_state$[ebp]
	and	edx, 2
	jne	SHORT $LN89@TranslateK
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv547[ebp], eax
	mov	ecx, DWORD PTR tv547[ebp]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR tv547[ebp], ecx
	cmp	DWORD PTR tv547[ebp], 13		; 0000000dH
	ja	SHORT $LN89@TranslateK
	mov	edx, DWORD PTR tv547[ebp]
	movzx	eax, BYTE PTR $LN245@TranslateK[edx]
	jmp	DWORD PTR $LN262@TranslateK[eax*4]
$LN86@TranslateK:
; Line 4433
	mov	DWORD PTR _code$[ebp], 1
; Line 4434
	jmp	SHORT $LN89@TranslateK
$LN85@TranslateK:
; Line 4436
	mov	DWORD PTR _code$[ebp], 2
; Line 4437
	jmp	SHORT $LN89@TranslateK
$LN84@TranslateK:
; Line 4439
	mov	DWORD PTR _code$[ebp], 3
; Line 4440
	jmp	SHORT $LN89@TranslateK
$LN83@TranslateK:
; Line 4442
	mov	DWORD PTR _code$[ebp], 4
; Line 4443
	jmp	SHORT $LN89@TranslateK
$LN82@TranslateK:
; Line 4445
	mov	DWORD PTR _code$[ebp], 5
; Line 4446
	jmp	SHORT $LN89@TranslateK
$LN81@TranslateK:
; Line 4448
	mov	DWORD PTR _code$[ebp], 6
$LN89@TranslateK:
; Line 4452
	cmp	DWORD PTR _funky_type$[ebp], 3
	jne	SHORT $LN80@TranslateK
	cmp	DWORD PTR _code$[ebp], 6
	jg	SHORT $LN80@TranslateK
; Line 4453
	mov	ecx, DWORD PTR _code$[ebp]
	movsx	edx, BYTE PTR $SG90933[ecx]
	mov	DWORD PTR _code$[ebp], edx
$LN80@TranslateK:
; Line 4455
	mov	eax, DWORD PTR _term
	cmp	DWORD PTR [eax+328], 0
	je	SHORT $LN79@TranslateK
	cmp	DWORD PTR _code$[ebp], 0
	jle	SHORT $LN79@TranslateK
	cmp	DWORD PTR _code$[ebp], 6
	jg	SHORT $LN79@TranslateK
; Line 4456
	mov	ecx, DWORD PTR _code$[ebp]
	movsx	edx, BYTE PTR $SG90936[ecx]
	push	edx
	push	OFFSET $SG90937
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4457
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN79@TranslateK:
; Line 4460
	cmp	DWORD PTR _funky_type$[ebp], 5
	jne	$LN78@TranslateK
	cmp	DWORD PTR _code$[ebp], 11		; 0000000bH
	jl	$LN78@TranslateK
	cmp	DWORD PTR _code$[ebp], 34		; 00000022H
	jg	$LN78@TranslateK
; Line 4462
	mov	ecx, 12					; 0000000cH
	mov	esi, OFFSET $SG90940
	lea	edi, DWORD PTR _codes$90939[ebp]
	rep movsd
	movsb
; Line 4463
	mov	DWORD PTR _index$90941[ebp], 0
; Line 4464
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv574[ebp], ecx
	mov	edx, DWORD PTR tv574[ebp]
	sub	edx, 112				; 00000070H
	mov	DWORD PTR tv574[ebp], edx
	cmp	DWORD PTR tv574[ebp], 11		; 0000000bH
	ja	$LN76@TranslateK
	mov	eax, DWORD PTR tv574[ebp]
	jmp	DWORD PTR $LN263@TranslateK[eax*4]
$LN75@TranslateK:
; Line 4465
	mov	DWORD PTR _index$90941[ebp], 0
	jmp	$LN76@TranslateK
$LN74@TranslateK:
; Line 4466
	mov	DWORD PTR _index$90941[ebp], 1
	jmp	SHORT $LN76@TranslateK
$LN73@TranslateK:
; Line 4467
	mov	DWORD PTR _index$90941[ebp], 2
	jmp	SHORT $LN76@TranslateK
$LN72@TranslateK:
; Line 4468
	mov	DWORD PTR _index$90941[ebp], 3
	jmp	SHORT $LN76@TranslateK
$LN71@TranslateK:
; Line 4469
	mov	DWORD PTR _index$90941[ebp], 4
	jmp	SHORT $LN76@TranslateK
$LN70@TranslateK:
; Line 4470
	mov	DWORD PTR _index$90941[ebp], 5
	jmp	SHORT $LN76@TranslateK
$LN69@TranslateK:
; Line 4471
	mov	DWORD PTR _index$90941[ebp], 6
	jmp	SHORT $LN76@TranslateK
$LN68@TranslateK:
; Line 4472
	mov	DWORD PTR _index$90941[ebp], 7
	jmp	SHORT $LN76@TranslateK
$LN67@TranslateK:
; Line 4473
	mov	DWORD PTR _index$90941[ebp], 8
	jmp	SHORT $LN76@TranslateK
$LN66@TranslateK:
; Line 4474
	mov	DWORD PTR _index$90941[ebp], 9
	jmp	SHORT $LN76@TranslateK
$LN65@TranslateK:
; Line 4475
	mov	DWORD PTR _index$90941[ebp], 10		; 0000000aH
	jmp	SHORT $LN76@TranslateK
$LN64@TranslateK:
; Line 4476
	mov	DWORD PTR _index$90941[ebp], 11		; 0000000bH
$LN76@TranslateK:
; Line 4478
	movzx	ecx, BYTE PTR _keystate$[ebp+16]
	and	ecx, 128				; 00000080H
	je	SHORT $LN63@TranslateK
	mov	edx, DWORD PTR _index$90941[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _index$90941[ebp], edx
$LN63@TranslateK:
; Line 4479
	movzx	eax, BYTE PTR _keystate$[ebp+17]
	and	eax, 128				; 00000080H
	je	SHORT $LN62@TranslateK
	mov	ecx, DWORD PTR _index$90941[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _index$90941[ebp], ecx
$LN62@TranslateK:
; Line 4480
	mov	edx, DWORD PTR _index$90941[ebp]
	movsx	eax, BYTE PTR _codes$90939[ebp+edx]
	push	eax
	push	OFFSET $SG90961
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4481
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN78@TranslateK:
; Line 4484
	cmp	DWORD PTR _funky_type$[ebp], 5
	jne	$LN61@TranslateK
	cmp	DWORD PTR _code$[ebp], 1
	jl	$LN61@TranslateK
	cmp	DWORD PTR _code$[ebp], 6
	jg	$LN61@TranslateK
; Line 4485
	mov	edx, DWORD PTR $SG90964
	mov	DWORD PTR _codes$90963[ebp], edx
	mov	ax, WORD PTR $SG90964+4
	mov	WORD PTR _codes$90963[ebp+4], ax
	mov	cl, BYTE PTR $SG90964+6
	mov	BYTE PTR _codes$90963[ebp+6], cl
; Line 4486
	cmp	DWORD PTR _code$[ebp], 3
	jne	SHORT $LN60@TranslateK
; Line 4487
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 127			; 0000007fH
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4488
	jmp	SHORT $LN59@TranslateK
$LN60@TranslateK:
; Line 4489
	mov	ecx, DWORD PTR _code$[ebp]
	movsx	edx, BYTE PTR _codes$90963[ebp+ecx-1]
	push	edx
	push	OFFSET $SG90968
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN59@TranslateK:
; Line 4491
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN61@TranslateK:
; Line 4493
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+328], 0
	jne	SHORT $LN57@TranslateK
	cmp	DWORD PTR _funky_type$[ebp], 4
	jne	$LN58@TranslateK
$LN57@TranslateK:
	cmp	DWORD PTR _code$[ebp], 11		; 0000000bH
	jl	$LN58@TranslateK
	cmp	DWORD PTR _code$[ebp], 24		; 00000018H
	jg	$LN58@TranslateK
; Line 4494
	mov	DWORD PTR _offt$90971[ebp], 0
; Line 4495
	cmp	DWORD PTR _code$[ebp], 15		; 0000000fH
	jle	SHORT $LN56@TranslateK
; Line 4496
	mov	edx, DWORD PTR _offt$90971[ebp]
	add	edx, 1
	mov	DWORD PTR _offt$90971[ebp], edx
$LN56@TranslateK:
; Line 4497
	cmp	DWORD PTR _code$[ebp], 21		; 00000015H
	jle	SHORT $LN55@TranslateK
; Line 4498
	mov	eax, DWORD PTR _offt$90971[ebp]
	add	eax, 1
	mov	DWORD PTR _offt$90971[ebp], eax
$LN55@TranslateK:
; Line 4499
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+328], 0
	je	SHORT $LN54@TranslateK
; Line 4500
	mov	edx, DWORD PTR _code$[ebp]
	add	edx, 69					; 00000045H
	sub	edx, DWORD PTR _offt$90971[ebp]
	push	edx
	push	OFFSET $SG90976
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4501
	jmp	SHORT $LN53@TranslateK
$LN54@TranslateK:
; Line 4503
	mov	ecx, DWORD PTR _code$[ebp]
	add	ecx, 69					; 00000045H
	sub	ecx, DWORD PTR _offt$90971[ebp]
	push	ecx
	push	OFFSET $SG90979
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN53@TranslateK:
; Line 4504
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN58@TranslateK:
; Line 4506
	cmp	DWORD PTR _funky_type$[ebp], 1
	jne	SHORT $LN52@TranslateK
	cmp	DWORD PTR _code$[ebp], 11		; 0000000bH
	jl	SHORT $LN52@TranslateK
	cmp	DWORD PTR _code$[ebp], 15		; 0000000fH
	jg	SHORT $LN52@TranslateK
; Line 4507
	mov	eax, DWORD PTR _code$[ebp]
	add	eax, 54					; 00000036H
	push	eax
	push	OFFSET $SG90982
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4508
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN52@TranslateK:
; Line 4510
	cmp	DWORD PTR _funky_type$[ebp], 2
	jne	$LN51@TranslateK
	cmp	DWORD PTR _code$[ebp], 11		; 0000000bH
	jl	SHORT $LN51@TranslateK
	cmp	DWORD PTR _code$[ebp], 14		; 0000000eH
	jg	SHORT $LN51@TranslateK
; Line 4511
	mov	edx, DWORD PTR _term
	cmp	DWORD PTR [edx+328], 0
	je	SHORT $LN50@TranslateK
; Line 4512
	mov	eax, DWORD PTR _code$[ebp]
	add	eax, 69					; 00000045H
	push	eax
	push	OFFSET $SG90986
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4513
	jmp	SHORT $LN49@TranslateK
$LN50@TranslateK:
; Line 4514
	mov	edx, DWORD PTR _code$[ebp]
	add	edx, 69					; 00000045H
	push	edx
	push	OFFSET $SG90989
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN49@TranslateK:
; Line 4515
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN51@TranslateK:
; Line 4518
	cmp	DWORD PTR _code$[ebp], 1
	je	SHORT $LN47@TranslateK
	cmp	DWORD PTR _code$[ebp], 4
	jne	SHORT $LN48@TranslateK
$LN47@TranslateK:
	push	62					; 0000003eH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN48@TranslateK
; Line 4519
	cmp	DWORD PTR _code$[ebp], 1
	jne	SHORT $LN240@TranslateK
	mov	DWORD PTR tv681[ebp], OFFSET $SG90993
	jmp	SHORT $LN241@TranslateK
$LN240@TranslateK:
	mov	DWORD PTR tv681[ebp], OFFSET $SG90994
$LN241@TranslateK:
	mov	edx, DWORD PTR tv681[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4520
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN48@TranslateK:
; Line 4522
	cmp	DWORD PTR _code$[ebp], 0
	je	SHORT $LN46@TranslateK
; Line 4523
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	push	OFFSET $SG90997
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4524
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN46@TranslateK:
; Line 4532
	mov	BYTE PTR _xkey$90998[ebp], 0
; Line 4533
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv693[ebp], eax
	mov	ecx, DWORD PTR tv693[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR tv693[ebp], ecx
	cmp	DWORD PTR tv693[ebp], 28		; 0000001cH
	ja	SHORT $LN44@TranslateK
	mov	edx, DWORD PTR tv693[ebp]
	movzx	eax, BYTE PTR $LN246@TranslateK[edx]
	jmp	DWORD PTR $LN264@TranslateK[eax*4]
$LN43@TranslateK:
; Line 4535
	mov	BYTE PTR _xkey$90998[ebp], 65		; 00000041H
; Line 4536
	jmp	SHORT $LN44@TranslateK
$LN42@TranslateK:
; Line 4538
	mov	BYTE PTR _xkey$90998[ebp], 66		; 00000042H
; Line 4539
	jmp	SHORT $LN44@TranslateK
$LN41@TranslateK:
; Line 4541
	mov	BYTE PTR _xkey$90998[ebp], 67		; 00000043H
; Line 4542
	jmp	SHORT $LN44@TranslateK
$LN40@TranslateK:
; Line 4544
	mov	BYTE PTR _xkey$90998[ebp], 68		; 00000044H
; Line 4545
	jmp	SHORT $LN44@TranslateK
$LN39@TranslateK:
; Line 4547
	mov	BYTE PTR _xkey$90998[ebp], 71		; 00000047H
$LN44@TranslateK:
; Line 4550
	movsx	ecx, BYTE PTR _xkey$90998[ebp]
	test	ecx, ecx
	je	SHORT $LN38@TranslateK
; Line 4551
	mov	edx, DWORD PTR _shift_state$[ebp]
	push	edx
	movsx	eax, BYTE PTR _xkey$90998[ebp]
	push	eax
	mov	ecx, DWORD PTR _term
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_format_arrow_key
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4552
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	$LN238@TranslateK
$LN38@TranslateK:
; Line 4560
	cmp	DWORD PTR _wParam$[ebp], 13		; 0000000dH
	jne	SHORT $LN37@TranslateK
; Line 4561
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 13			; 0000000dH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 4562
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 4563
	mov	eax, -2					; fffffffeH
	jmp	$LN238@TranslateK
$LN37@TranslateK:
; Line 4566
	cmp	DWORD PTR _left_alt$[ebp], 0
	je	SHORT $LN36@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 96		; 00000060H
	jb	SHORT $LN36@TranslateK
	cmp	DWORD PTR _wParam$[ebp], 105		; 00000069H
	ja	SHORT $LN36@TranslateK
; Line 4567
	mov	ecx, DWORD PTR ?alt_sum@?1??TranslateKey@@9@9
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _wParam$[ebp]
	lea	eax, DWORD PTR [ecx+edx-96]
	mov	DWORD PTR ?alt_sum@?1??TranslateKey@@9@9, eax
; Line 4568
	jmp	SHORT $LN195@TranslateK
$LN36@TranslateK:
; Line 4569
	mov	DWORD PTR ?alt_sum@?1??TranslateKey@@9@9, 0
$LN195@TranslateK:
; Line 4575
	mov	DWORD PTR _capsOn$91012[ebp], 0
; Line 4579
	movzx	ecx, BYTE PTR _keystate$[ebp+20]
	test	ecx, ecx
	je	SHORT $LN34@TranslateK
	push	143					; 0000008fH
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@TranslateK
; Line 4580
	xor	eax, eax
	cmp	DWORD PTR _left_alt$[ebp], 0
	sete	al
	mov	DWORD PTR _capsOn$91012[ebp], eax
; Line 4581
	mov	BYTE PTR _keystate$[ebp+20], 0
$LN34@TranslateK:
; Line 4587
	cmp	DWORD PTR _osVersion+16, 2
	jne	SHORT $LN33@TranslateK
	cmp	DWORD PTR _p_ToUnicodeEx, 0
	je	SHORT $LN33@TranslateK
; Line 4589
	mov	esi, esp
	mov	ecx, DWORD PTR _kbd_layout$[ebp]
	push	ecx
	push	0
	push	3
	push	OFFSET ?keys_unicode@?1??TranslateKey@@9@9
	lea	edx, DWORD PTR _keystate$[ebp]
	push	edx
	mov	eax, DWORD PTR _scan$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	call	DWORD PTR _p_ToUnicodeEx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax
; Line 4590
	jmp	$LN32@TranslateK
$LN33@TranslateK:
; Line 4604
	mov	esi, esp
	mov	edx, DWORD PTR _kbd_layout$[ebp]
	push	edx
	push	0
	push	OFFSET ?keys@?EC@??TranslateKey@@9@9
	lea	eax, DWORD PTR _keystate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scan$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	call	DWORD PTR __imp__ToAsciiEx@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax
; Line 4605
	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN32@TranslateK
; Line 4606
	mov	DWORD PTR _i$91016[ebp], 0
	jmp	SHORT $LN30@TranslateK
$LN29@TranslateK:
	mov	eax, DWORD PTR _i$91016[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91016[ebp], eax
$LN30@TranslateK:
	mov	ecx, DWORD PTR _i$91016[ebp]
	cmp	ecx, DWORD PTR _r$[ebp]
	jge	SHORT $LN28@TranslateK
; Line 4607
	mov	edx, DWORD PTR _i$91016[ebp]
	mov	eax, DWORD PTR _i$91016[ebp]
	mov	cl, BYTE PTR ?keys@?EC@??TranslateKey@@9@9[eax*2]
	mov	BYTE PTR ?keysb@?EC@??TranslateKey@@9@9[edx], cl
; Line 4608
	jmp	SHORT $LN29@TranslateK
$LN28@TranslateK:
; Line 4610
	mov	esi, esp
	push	3
	push	OFFSET ?keys_unicode@?1??TranslateKey@@9@9
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	push	OFFSET ?keysb@?EC@??TranslateKey@@9@9
	push	0
	push	0
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@TranslateK:
; Line 4632
	cmp	DWORD PTR _r$[ebp], 0
	jle	$LN27@TranslateK
; Line 4635
	mov	eax, DWORD PTR _output$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 4636
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@TranslateK
$LN25@TranslateK:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN26@TranslateK:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _r$[ebp]
	jge	$LN24@TranslateK
; Line 4637
	mov	eax, DWORD PTR _i$[ebp]
	mov	cx, WORD PTR ?keys_unicode@?1??TranslateKey@@9@9[eax*2]
	mov	WORD PTR _wch$91032[ebp], cx
; Line 4639
	cmp	DWORD PTR _compose_state, 2
	jne	SHORT $LN23@TranslateK
	movzx	edx, WORD PTR _wch$91032[ebp]
	cmp	edx, 32					; 00000020H
	jl	SHORT $LN23@TranslateK
	movzx	eax, WORD PTR _wch$91032[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN23@TranslateK
; Line 4640
	movzx	ecx, WORD PTR _wch$91032[ebp]
	mov	DWORD PTR ?compose_char@?1??TranslateKey@@9@9, ecx
; Line 4641
	mov	edx, DWORD PTR _compose_state
	add	edx, 1
	mov	DWORD PTR _compose_state, edx
; Line 4642
	jmp	SHORT $LN25@TranslateK
$LN23@TranslateK:
; Line 4644
	cmp	DWORD PTR _compose_state, 3
	jne	$LN22@TranslateK
	movzx	eax, WORD PTR _wch$91032[ebp]
	cmp	eax, 32					; 00000020H
	jl	$LN22@TranslateK
	movzx	ecx, WORD PTR _wch$91032[ebp]
	cmp	ecx, 128				; 00000080H
	jge	$LN22@TranslateK
; Line 4646
	mov	DWORD PTR _compose_state, 0
; Line 4648
	movzx	edx, WORD PTR _wch$91032[ebp]
	push	edx
	mov	eax, DWORD PTR ?compose_char@?1??TranslateKey@@9@9
	push	eax
	call	_check_compose
	add	esp, 8
	mov	DWORD PTR _nc$91035[ebp], eax
	cmp	DWORD PTR _nc$91035[ebp], -1
	jne	SHORT $LN21@TranslateK
; Line 4649
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__MessageBeep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4650
	xor	eax, eax
	jmp	$LN238@TranslateK
$LN21@TranslateK:
; Line 4652
	mov	cx, WORD PTR _nc$91035[ebp]
	mov	WORD PTR _keybuf$91028[ebp], cx
; Line 4653
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_seen_key_event
	add	esp, 4
; Line 4654
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN20@TranslateK
; Line 4655
	push	1
	push	1
	lea	eax, DWORD PTR _keybuf$91028[ebp]
	push	eax
	mov	ecx, DWORD PTR _ldisc
	push	ecx
	call	_luni_send
	add	esp, 16					; 00000010H
$LN20@TranslateK:
; Line 4656
	jmp	$LN25@TranslateK
$LN22@TranslateK:
; Line 4659
	mov	DWORD PTR _compose_state, 0
; Line 4661
	cmp	DWORD PTR _key_down$[ebp], 0
	jne	$LN19@TranslateK
; Line 4662
	cmp	DWORD PTR ?alt_sum@?1??TranslateKey@@9@9, 0
	je	$LN18@TranslateK
; Line 4663
	mov	edx, DWORD PTR _term
	cmp	DWORD PTR [edx+220], 0
	jne	SHORT $LN16@TranslateK
	mov	eax, DWORD PTR _term
	mov	ecx, DWORD PTR [eax+4240]
	cmp	DWORD PTR [ecx+12], 65001		; 0000fde9H
	je	SHORT $LN16@TranslateK
	cmp	DWORD PTR _ucsdata+4, 0
	je	SHORT $LN17@TranslateK
$LN16@TranslateK:
; Line 4664
	mov	dx, WORD PTR ?alt_sum@?1??TranslateKey@@9@9
	mov	WORD PTR _keybuf$91028[ebp], dx
; Line 4665
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_seen_key_event
	add	esp, 4
; Line 4666
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN15@TranslateK
; Line 4667
	push	1
	push	1
	lea	ecx, DWORD PTR _keybuf$91028[ebp]
	push	ecx
	mov	edx, DWORD PTR _ldisc
	push	edx
	call	_luni_send
	add	esp, 16					; 00000010H
$LN15@TranslateK:
; Line 4668
	jmp	SHORT $LN14@TranslateK
$LN17@TranslateK:
; Line 4669
	mov	al, BYTE PTR ?alt_sum@?1??TranslateKey@@9@9
	mov	BYTE PTR _ch$91044[ebp], al
; Line 4679
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_seen_key_event
	add	esp, 4
; Line 4680
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN14@TranslateK
; Line 4681
	push	1
	push	1
	lea	edx, DWORD PTR _ch$91044[ebp]
	push	edx
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_ldisc_send
	add	esp, 16					; 00000010H
$LN14@TranslateK:
; Line 4683
	mov	DWORD PTR ?alt_sum@?1??TranslateKey@@9@9, 0
; Line 4684
	jmp	SHORT $LN12@TranslateK
$LN18@TranslateK:
; Line 4685
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_seen_key_event
	add	esp, 4
; Line 4686
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN12@TranslateK
; Line 4687
	push	1
	push	1
	lea	edx, DWORD PTR _wch$91032[ebp]
	push	edx
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_luni_send
	add	esp, 16					; 00000010H
$LN12@TranslateK:
; Line 4689
	jmp	$LN10@TranslateK
$LN19@TranslateK:
; Line 4690
	cmp	DWORD PTR _capsOn$91012[ebp], 0
	je	$LN9@TranslateK
	movzx	ecx, WORD PTR _wch$91032[ebp]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN9@TranslateK
; Line 4692
	mov	edx, 27					; 0000001bH
	mov	WORD PTR _cbuf$91051[ebp], dx
; Line 4693
	movzx	eax, WORD PTR _wch$91032[ebp]
	push	eax
	call	_xlat_uskbd2cyrllic
	add	esp, 4
	mov	WORD PTR _cbuf$91051[ebp+2], ax
; Line 4694
	mov	ecx, DWORD PTR _term
	push	ecx
	call	_term_seen_key_event
	add	esp, 4
; Line 4695
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN8@TranslateK
; Line 4696
	push	1
	xor	edx, edx
	cmp	DWORD PTR _left_alt$[ebp], 0
	setne	dl
	add	edx, 1
	push	edx
	xor	eax, eax
	cmp	DWORD PTR _left_alt$[ebp], 0
	sete	al
	lea	ecx, DWORD PTR _cbuf$91051[ebp+eax*2]
	push	ecx
	mov	edx, DWORD PTR _ldisc
	push	edx
	call	_luni_send
	add	esp, 16					; 00000010H
$LN8@TranslateK:
; Line 4697
	jmp	SHORT $LN10@TranslateK
$LN9@TranslateK:
; Line 4699
	mov	eax, 27					; 0000001bH
	mov	WORD PTR _cbuf$91054[ebp], ax
; Line 4700
	mov	cx, WORD PTR _wch$91032[ebp]
	mov	WORD PTR _cbuf$91054[ebp+2], cx
; Line 4701
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_seen_key_event
	add	esp, 4
; Line 4702
	cmp	DWORD PTR _ldisc, 0
	je	SHORT $LN10@TranslateK
; Line 4703
	push	1
	xor	eax, eax
	cmp	DWORD PTR _left_alt$[ebp], 0
	setne	al
	add	eax, 1
	push	eax
	xor	ecx, ecx
	cmp	DWORD PTR _left_alt$[ebp], 0
	sete	cl
	lea	edx, DWORD PTR _cbuf$91054[ebp+ecx*2]
	push	edx
	mov	eax, DWORD PTR _ldisc
	push	eax
	call	_luni_send
	add	esp, 16					; 00000010H
$LN10@TranslateK:
; Line 4706
	push	0
	call	_show_mouseptr
	add	esp, 4
; Line 4707
	jmp	$LN25@TranslateK
$LN24@TranslateK:
; Line 4710
	xor	ecx, ecx
	mov	WORD PTR ?keys_unicode@?1??TranslateKey@@9@9, cx
; Line 4712
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _output$[ebp]
	jmp	SHORT $LN238@TranslateK
$LN27@TranslateK:
; Line 4715
	cmp	DWORD PTR _left_alt$[ebp], 0
	jne	SHORT $LN5@TranslateK
; Line 4716
	xor	edx, edx
	mov	WORD PTR ?keys_unicode@?1??TranslateKey@@9@9, dx
	jmp	SHORT $LN4@TranslateK
$LN5@TranslateK:
; Line 4718
	movzx	eax, WORD PTR ?keys_unicode@?1??TranslateKey@@9@9
	test	eax, eax
	je	SHORT $LN4@TranslateK
	mov	ecx, DWORD PTR _term
	cmp	DWORD PTR [ecx+220], 0
	jne	SHORT $LN2@TranslateK
	mov	edx, DWORD PTR _term
	mov	eax, DWORD PTR [edx+4240]
	cmp	DWORD PTR [eax+12], 65001		; 0000fde9H
	je	SHORT $LN2@TranslateK
	cmp	DWORD PTR _ucsdata+4, 0
	je	SHORT $LN4@TranslateK
$LN2@TranslateK:
; Line 4719
	mov	ecx, 10					; 0000000aH
	mov	WORD PTR ?keys_unicode@?1??TranslateKey@@9@9, cx
$LN4@TranslateK:
; Line 4729
	cmp	DWORD PTR _wParam$[ebp], 18		; 00000012H
	jne	SHORT $LN1@TranslateK
	push	80					; 00000050H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@TranslateK
; Line 4730
	xor	eax, eax
	jmp	SHORT $LN238@TranslateK
$LN1@TranslateK:
; Line 4732
	or	eax, -1
$LN238@TranslateK:
; Line 4733
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN256@TranslateK
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN256@TranslateK:
	DD	8
	DD	$LN255@TranslateK
$LN255@TranslateK:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN247@TranslateK
	DD	-384					; fffffe80H
	DD	49					; 00000031H
	DD	$LN248@TranslateK
	DD	-404					; fffffe6cH
	DD	7
	DD	$LN249@TranslateK
	DD	-432					; fffffe50H
	DD	2
	DD	$LN250@TranslateK
	DD	-444					; fffffe44H
	DD	2
	DD	$LN251@TranslateK
	DD	-457					; fffffe37H
	DD	1
	DD	$LN252@TranslateK
	DD	-472					; fffffe28H
	DD	4
	DD	$LN253@TranslateK
	DD	-484					; fffffe1cH
	DD	4
	DD	$LN254@TranslateK
$LN254@TranslateK:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN253@TranslateK:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN252@TranslateK:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN251@TranslateK:
	DB	119					; 00000077H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN250@TranslateK:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN249@TranslateK:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN248@TranslateK:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN247@TranslateK:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
	npad	3
$LN257@TranslateK:
	DD	$LN203@TranslateK
	DD	$LN199@TranslateK
	DD	$LN205@TranslateK
	DD	$LN207@TranslateK
	DD	$LN201@TranslateK
	DD	$LN204@TranslateK
	DD	$LN200@TranslateK
	DD	$LN202@TranslateK
	DD	$LN206@TranslateK
	DD	$LN208@TranslateK
	DD	$LN198@TranslateK
	DD	$LN209@TranslateK
$LN242@TranslateK:
	DB	0
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	9
	DB	10					; 0000000aH
	npad	1
$LN258@TranslateK:
	DD	$LN178@TranslateK
	DD	$LN177@TranslateK
	DD	$LN176@TranslateK
	DD	$LN175@TranslateK
	DD	$LN174@TranslateK
	DD	$LN173@TranslateK
	DD	$LN172@TranslateK
	DD	$LN171@TranslateK
	DD	$LN170@TranslateK
$LN259@TranslateK:
	DD	$LN164@TranslateK
	DD	$LN162@TranslateK
	DD	$LN161@TranslateK
	DD	$LN163@TranslateK
	DD	$LN168@TranslateK
$LN243@TranslateK:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	2
	DB	4
	DB	3
	npad	3
$LN260@TranslateK:
	DD	$LN133@TranslateK
	DD	$LN157@TranslateK
	DD	$LN156@TranslateK
	DD	$LN155@TranslateK
	DD	$LN154@TranslateK
	DD	$LN153@TranslateK
	DD	$LN152@TranslateK
	DD	$LN151@TranslateK
	DD	$LN150@TranslateK
	DD	$LN149@TranslateK
	DD	$LN148@TranslateK
	DD	$LN137@TranslateK
	DD	$LN146@TranslateK
	DD	$LN135@TranslateK
	DD	$LN147@TranslateK
	DD	$LN139@TranslateK
	DD	$LN160@TranslateK
$LN244@TranslateK:
	DB	0
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	16					; 00000010H
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	npad	1
$LN261@TranslateK:
	DD	$LN109@TranslateK
	DD	$LN108@TranslateK
	DD	$LN107@TranslateK
	DD	$LN106@TranslateK
	DD	$LN105@TranslateK
	DD	$LN104@TranslateK
	DD	$LN103@TranslateK
	DD	$LN102@TranslateK
	DD	$LN101@TranslateK
	DD	$LN100@TranslateK
	DD	$LN99@TranslateK
	DD	$LN98@TranslateK
	DD	$LN97@TranslateK
	DD	$LN96@TranslateK
	DD	$LN95@TranslateK
	DD	$LN94@TranslateK
	DD	$LN93@TranslateK
	DD	$LN92@TranslateK
	DD	$LN91@TranslateK
	DD	$LN90@TranslateK
$LN262@TranslateK:
	DD	$LN82@TranslateK
	DD	$LN81@TranslateK
	DD	$LN83@TranslateK
	DD	$LN86@TranslateK
	DD	$LN85@TranslateK
	DD	$LN84@TranslateK
	DD	$LN89@TranslateK
$LN245@TranslateK:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	5
	npad	2
$LN263@TranslateK:
	DD	$LN75@TranslateK
	DD	$LN74@TranslateK
	DD	$LN73@TranslateK
	DD	$LN72@TranslateK
	DD	$LN71@TranslateK
	DD	$LN70@TranslateK
	DD	$LN69@TranslateK
	DD	$LN68@TranslateK
	DD	$LN67@TranslateK
	DD	$LN66@TranslateK
	DD	$LN65@TranslateK
	DD	$LN64@TranslateK
$LN264@TranslateK:
	DD	$LN39@TranslateK
	DD	$LN40@TranslateK
	DD	$LN43@TranslateK
	DD	$LN41@TranslateK
	DD	$LN42@TranslateK
	DD	$LN44@TranslateK
$LN246@TranslateK:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	4
_TranslateKey ENDP
_TEXT	ENDS
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_title$ = 12						; size = 4
_set_title PROC
; Line 4736
	push	ebp
	mov	ebp, esp
	push	esi
; Line 4737
	mov	eax, DWORD PTR _window_name
	push	eax
	call	_safefree
	add	esp, 4
; Line 4738
	push	1
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _window_name, eax
; Line 4739
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	mov	eax, DWORD PTR _window_name
	push	eax
	call	_strcpy
	add	esp, 8
; Line 4740
	push	109					; 0000006dH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@set_title
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@set_title
$LN1@set_title:
; Line 4741
	mov	esi, esp
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SetWindowTextA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@set_title:
; Line 4742
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_set_title ENDP
; Function compile flags: /Odtp /RTCsu
_frontend$ = 8						; size = 4
_title$ = 12						; size = 4
_set_icon PROC
; Line 4745
	push	ebp
	mov	ebp, esp
	push	esi
; Line 4746
	mov	eax, DWORD PTR _icon_name
	push	eax
	call	_safefree
	add	esp, 4
; Line 4747
	push	1
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _icon_name, eax
; Line 4748
	mov	edx, DWORD PTR _title$[ebp]
	push	edx
	mov	eax, DWORD PTR _icon_name
	push	eax
	call	_strcpy
	add	esp, 8
; Line 4749
	push	109					; 0000006dH
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@set_icon
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@set_icon
; Line 4750
	mov	esi, esp
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SetWindowTextA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@set_icon:
; Line 4751
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_set_icon ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_set_sbar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_si$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_frontend$ = 8						; size = 4
_total$ = 12						; size = 4
_start$ = 16						; size = 4
_page$ = 20						; size = 4
_set_sbar PROC
; Line 4754
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 4758
	call	_is_full_screen
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 104				; 00000068H
	push	eax
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@set_sbar
; Line 4759
	jmp	SHORT $LN3@set_sbar
$LN2@set_sbar:
; Line 4761
	mov	DWORD PTR _si$[ebp], 28			; 0000001cH
; Line 4762
	mov	DWORD PTR _si$[ebp+4], 31		; 0000001fH
; Line 4763
	mov	DWORD PTR _si$[ebp+8], 0
; Line 4764
	mov	ecx, DWORD PTR _total$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _si$[ebp+12], ecx
; Line 4765
	mov	edx, DWORD PTR _page$[ebp]
	mov	DWORD PTR _si$[ebp+16], edx
; Line 4766
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _si$[ebp+20], eax
; Line 4767
	cmp	DWORD PTR _hwnd, 0
	je	SHORT $LN3@set_sbar
; Line 4768
	mov	esi, esp
	push	1
	lea	ecx, DWORD PTR _si$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetScrollInfo@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@set_sbar:
; Line 4769
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@set_sbar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@set_sbar:
	DD	1
	DD	$LN6@set_sbar
$LN6@set_sbar:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN5@set_sbar
$LN5@set_sbar:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	0
_set_sbar ENDP
; Function compile flags: /Odtp /RTCsu
_hdc$ = -4						; size = 4
_frontend$ = 8						; size = 4
_get_ctx PROC
; Line 4772
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4774
	cmp	DWORD PTR _hwnd, 0
	je	SHORT $LN3@get_ctx
; Line 4775
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 4776
	cmp	DWORD PTR _hdc$[ebp], 0
	je	SHORT $LN2@get_ctx
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN2@get_ctx
; Line 4777
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _pal
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@get_ctx:
; Line 4778
	mov	eax, DWORD PTR _hdc$[ebp]
	jmp	SHORT $LN4@get_ctx
; Line 4779
	jmp	SHORT $LN4@get_ctx
$LN3@get_ctx:
; Line 4780
	xor	eax, eax
$LN4@get_ctx:
; Line 4781
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_ctx ENDP
; Function compile flags: /Odtp /RTCsu
_ctx$ = 8						; size = 4
_free_ctx PROC
; Line 4784
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 4785
	mov	esi, esp
	push	0
	mov	edi, esp
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetStockObject@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4786
	mov	esi, esp
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4787
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_free_ctx ENDP
_TEXT	ENDS
PUBLIC	_palette_set
EXTRN	__imp__UnrealizeObject@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hdc$91139 = -4						; size = 4
_frontend$ = 8						; size = 4
_n$ = 12						; size = 4
_r$ = 16						; size = 4
_g$ = 20						; size = 4
_b$ = 24						; size = 4
_palette_set PROC
; Line 4803
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4804
	cmp	DWORD PTR _n$[ebp], 16			; 00000010H
	jl	SHORT $LN5@palette_se
; Line 4805
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 240				; 000000f0H
	mov	DWORD PTR _n$[ebp], eax
$LN5@palette_se:
; Line 4806
	cmp	DWORD PTR _n$[ebp], 262			; 00000106H
	jl	SHORT $LN4@palette_se
; Line 4807
	jmp	$LN6@palette_se
$LN4@palette_se:
; Line 4808
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _g$[ebp]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_real_palette_set
	add	esp, 16					; 00000010H
; Line 4809
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN3@palette_se
; Line 4810
	mov	edx, DWORD PTR _frontend$[ebp]
	push	edx
	call	_get_ctx
	add	esp, 4
	mov	DWORD PTR _hdc$91139[ebp], eax
; Line 4811
	mov	esi, esp
	mov	eax, DWORD PTR _pal
	push	eax
	call	DWORD PTR __imp__UnrealizeObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4812
	mov	esi, esp
	mov	ecx, DWORD PTR _hdc$91139[ebp]
	push	ecx
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4813
	mov	edx, DWORD PTR _hdc$91139[ebp]
	push	edx
	call	_free_ctx
	add	esp, 4
; Line 4814
	jmp	SHORT $LN6@palette_se
$LN3@palette_se:
; Line 4815
	cmp	DWORD PTR _n$[ebp], 258			; 00000102H
	jne	SHORT $LN6@palette_se
; Line 4819
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@palette_se:
; Line 4821
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_palette_set ENDP
_TEXT	ENDS
EXTRN	__imp__SetPaletteEntries@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = 8							; size = 4
_r$ = 12						; size = 4
_g$ = 16						; size = 4
_b$ = 20						; size = 4
_real_palette_set PROC
; Line 4790
	push	ebp
	mov	ebp, esp
	push	esi
; Line 4791
	cmp	DWORD PTR _pal, 0
	je	$LN2@real_palet
; Line 4792
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _logpal
	mov	dl, BYTE PTR _r$[ebp]
	mov	BYTE PTR [ecx+eax*4+4], dl
; Line 4793
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _logpal
	mov	dl, BYTE PTR _g$[ebp]
	mov	BYTE PTR [ecx+eax*4+5], dl
; Line 4794
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _logpal
	mov	dl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+eax*4+6], dl
; Line 4795
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _logpal
	mov	BYTE PTR [ecx+eax*4+7], 4
; Line 4796
	movzx	edx, BYTE PTR _r$[ebp]
	movzx	eax, BYTE PTR _g$[ebp]
	shl	eax, 8
	or	edx, eax
	movzx	ecx, BYTE PTR _b$[ebp]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	or	edx, 33554432				; 02000000H
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _colours[eax*4], edx
; Line 4797
	mov	ecx, DWORD PTR _logpal
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	262					; 00000106H
	push	0
	mov	edx, DWORD PTR _pal
	push	edx
	call	DWORD PTR __imp__SetPaletteEntries@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4798
	jmp	SHORT $LN3@real_palet
$LN2@real_palet:
; Line 4799
	movzx	eax, BYTE PTR _r$[ebp]
	movzx	ecx, BYTE PTR _g$[ebp]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _b$[ebp]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _colours[ecx*4], eax
$LN3@real_palet:
; Line 4800
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_real_palette_set ENDP
_TEXT	ENDS
PUBLIC	_palette_reset
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hdc$91165 = -8						; size = 4
_i$ = -4						; size = 4
_frontend$ = 8						; size = 4
_palette_reset PROC
; Line 4824
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4828
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@palette_re
$LN6@palette_re:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@palette_re:
	cmp	DWORD PTR _i$[ebp], 262			; 00000106H
	jge	$LN5@palette_re
; Line 4829
	cmp	DWORD PTR _pal, 0
	je	$LN4@palette_re
; Line 4830
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _logpal
	mov	cl, BYTE PTR _defpal[ecx+2]
	mov	BYTE PTR [eax+edx*4+4], cl
; Line 4831
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _logpal
	mov	dl, BYTE PTR _defpal[edx+1]
	mov	BYTE PTR [ecx+eax*4+5], dl
; Line 4832
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _logpal
	mov	al, BYTE PTR _defpal[eax]
	mov	BYTE PTR [edx+ecx*4+6], al
; Line 4833
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _logpal
	mov	BYTE PTR [edx+ecx*4+7], 0
; Line 4836
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	movzx	ecx, BYTE PTR _defpal[eax+2]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	or	ecx, 33554432				; 02000000H
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _colours[edx*4], ecx
; Line 4837
	jmp	SHORT $LN3@palette_re
$LN4@palette_re:
; Line 4839
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 3
	movzx	ecx, BYTE PTR _defpal[eax+2]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _colours[edx*4], ecx
$LN3@palette_re:
; Line 4840
	jmp	$LN6@palette_re
$LN5@palette_re:
; Line 4842
	cmp	DWORD PTR _pal, 0
	je	SHORT $LN2@palette_re
; Line 4844
	mov	eax, DWORD PTR _logpal
	add	eax, 4
	mov	esi, esp
	push	eax
	push	262					; 00000106H
	push	0
	mov	ecx, DWORD PTR _pal
	push	ecx
	call	DWORD PTR __imp__SetPaletteEntries@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4845
	mov	edx, DWORD PTR _frontend$[ebp]
	push	edx
	call	_get_ctx
	add	esp, 4
	mov	DWORD PTR _hdc$91165[ebp], eax
; Line 4846
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$91165[ebp]
	push	eax
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4847
	mov	ecx, DWORD PTR _hdc$91165[ebp]
	push	ecx
	call	_free_ctx
	add	esp, 4
; Line 4848
	jmp	SHORT $LN8@palette_re
$LN2@palette_re:
; Line 4851
	mov	esi, esp
	push	1
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@palette_re:
; Line 4853
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_palette_reset ENDP
_TEXT	ENDS
PUBLIC	_write_aclip
EXTRN	__imp__GlobalFree@4:PROC
EXTRN	__imp__CloseClipboard@0:PROC
EXTRN	__imp__SetClipboardData@8:PROC
EXTRN	__imp__EmptyClipboard@0:PROC
EXTRN	__imp__OpenClipboard@4:PROC
EXTRN	__imp__GlobalUnlock@4:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__GlobalLock@4:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lock$ = -8						; size = 4
_clipdata$ = -4						; size = 4
_frontend$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_must_deselect$ = 20					; size = 4
_write_aclip PROC
; Line 4856
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4860
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	push	8194					; 00002002H
	call	DWORD PTR __imp__GlobalAlloc@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _clipdata$[ebp], eax
; Line 4861
	cmp	DWORD PTR _clipdata$[ebp], 0
	jne	SHORT $LN6@write_acli
; Line 4862
	jmp	$LN7@write_acli
$LN6@write_acli:
; Line 4863
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lock$[ebp], eax
; Line 4864
	cmp	DWORD PTR _lock$[ebp], 0
	jne	SHORT $LN5@write_acli
; Line 4865
	jmp	$LN7@write_acli
$LN5@write_acli:
; Line 4866
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lock$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 4867
	mov	edx, DWORD PTR _lock$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx], 0
; Line 4868
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4870
	cmp	DWORD PTR _must_deselect$[ebp], 0
	jne	SHORT $LN4@write_acli
; Line 4871
	mov	esi, esp
	push	0
	push	1
	push	32770					; 00008002H
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@write_acli:
; Line 4873
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__OpenClipboard@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@write_acli
; Line 4874
	mov	esi, esp
	call	DWORD PTR __imp__EmptyClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4875
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata$[ebp]
	push	eax
	push	1
	call	DWORD PTR __imp__SetClipboardData@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4876
	mov	esi, esp
	call	DWORD PTR __imp__CloseClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4877
	jmp	SHORT $LN2@write_acli
$LN3@write_acli:
; Line 4878
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@write_acli:
; Line 4880
	cmp	DWORD PTR _must_deselect$[ebp], 0
	jne	SHORT $LN7@write_acli
; Line 4881
	mov	esi, esp
	push	0
	push	0
	push	32770					; 00008002H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@write_acli:
; Line 4882
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_write_aclip ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_write_clip
EXTRN	__imp__RegisterClipboardFormatA@4:PROC
EXTRN	_strcat:PROC
EXTRN	_get_unitab:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv398 = -1756						; size = 4
tv389 = -1752						; size = 4
tv380 = -1748						; size = 4
tv369 = -1744						; size = 4
_tmpcolour$91287 = -1740				; size = 4
_tmpcolour$91254 = -1736				; size = 4
_font$91245 = -1732					; size = 4
_numcolours$91244 = -1728				; size = 4
_palette$91243 = -1720					; size = 1048
_lastAttrUnder$91242 = -668				; size = 4
_attrUnder$91241 = -664					; size = 4
_lastAttrBold$91240 = -660				; size = 4
_attrBold$91239 = -656					; size = 4
_lastbgcolour$91238 = -652				; size = 4
_bgcolour$91237 = -648					; size = 4
_lastfgcolour$91236 = -644				; size = 4
_fgcolour$91235 = -640					; size = 4
_after$91234 = -632					; size = 4
_before$91233 = -620					; size = 16
_i$91232 = -600						; size = 4
_totallen$91231 = -596					; size = 4
_alen$91230 = -592					; size = 4
_blen$91229 = -588					; size = 4
_multilen$91228 = -584					; size = 4
_rtfsize$91227 = -580					; size = 4
_tindex$91226 = -576					; size = 4
_uindex$91225 = -572					; size = 4
_rtflen$91224 = -568					; size = 4
_udata$91222 = -564					; size = 4
_tdata$91220 = -560					; size = 4
_rtf$91218 = -556					; size = 4
_unitab$91217 = -548					; size = 512
_lock3$ = -32						; size = 4
_lock2$ = -28						; size = 4
_lock$ = -24						; size = 4
_len2$ = -20						; size = 4
_clipdata3$ = -16					; size = 4
_clipdata2$ = -12					; size = 4
_clipdata$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_frontend$ = 8						; size = 4
_data$ = 12						; size = 4
_attr$ = 16						; size = 4
_len$ = 20						; size = 4
_must_deselect$ = 24					; size = 4
_write_clip PROC
; Line 4888
	push	ebp
	mov	ebp, esp
	sub	esp, 1756				; 000006dcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1756]
	mov	ecx, 439				; 000001b7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 4893
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len2$[ebp], eax
; Line 4896
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 1
	mov	esi, esp
	push	edx
	push	8194					; 00002002H
	call	DWORD PTR __imp__GlobalAlloc@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _clipdata$[ebp], eax
; Line 4897
	mov	esi, esp
	mov	eax, DWORD PTR _len2$[ebp]
	push	eax
	push	8194					; 00002002H
	call	DWORD PTR __imp__GlobalAlloc@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _clipdata2$[ebp], eax
; Line 4899
	cmp	DWORD PTR _clipdata$[ebp], 0
	je	SHORT $LN87@write_clip
	cmp	DWORD PTR _clipdata2$[ebp], 0
	jne	SHORT $LN88@write_clip
$LN87@write_clip:
; Line 4900
	cmp	DWORD PTR _clipdata$[ebp], 0
	je	SHORT $LN86@write_clip
; Line 4901
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN86@write_clip:
; Line 4902
	cmp	DWORD PTR _clipdata2$[ebp], 0
	je	SHORT $LN85@write_clip
; Line 4903
	mov	esi, esp
	mov	edx, DWORD PTR _clipdata2$[ebp]
	push	edx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN85@write_clip:
; Line 4904
	jmp	$LN89@write_clip
$LN88@write_clip:
; Line 4906
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lock$[ebp], eax
	cmp	DWORD PTR _lock$[ebp], 0
	jne	SHORT $LN84@write_clip
; Line 4907
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4908
	mov	esi, esp
	mov	edx, DWORD PTR _clipdata2$[ebp]
	push	edx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4909
	jmp	$LN89@write_clip
$LN84@write_clip:
; Line 4911
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata2$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lock2$[ebp], eax
	cmp	DWORD PTR _lock2$[ebp], 0
	jne	SHORT $LN83@write_clip
; Line 4912
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4913
	mov	esi, esp
	mov	edx, DWORD PTR _clipdata$[ebp]
	push	edx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4914
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata2$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4915
	jmp	$LN89@write_clip
$LN83@write_clip:
; Line 4918
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _lock$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 4919
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _len2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lock2$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4921
	push	136					; 00000088H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	$LN82@write_clip
; Line 4923
	mov	DWORD PTR _rtf$91218[ebp], 0
; Line 4924
	mov	eax, DWORD PTR _lock2$[ebp]
	mov	DWORD PTR _tdata$91220[ebp], eax
; Line 4925
	mov	ecx, DWORD PTR _lock$[ebp]
	mov	DWORD PTR _udata$91222[ebp], ecx
; Line 4926
	mov	DWORD PTR _rtflen$91224[ebp], 0
	mov	DWORD PTR _uindex$91225[ebp], 0
	mov	DWORD PTR _tindex$91226[ebp], 0
; Line 4927
	mov	DWORD PTR _rtfsize$91227[ebp], 0
; Line 4930
	mov	DWORD PTR _lastfgcolour$91236[ebp], 0
; Line 4931
	mov	DWORD PTR _lastbgcolour$91238[ebp], 0
; Line 4932
	mov	DWORD PTR _lastAttrBold$91240[ebp], 0
; Line 4933
	mov	DWORD PTR _lastAttrUnder$91242[ebp], 0
; Line 4936
	push	112					; 00000070H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_get_fontspec
	add	esp, 8
	mov	DWORD PTR _font$91245[ebp], eax
; Line 4938
	push	0
	lea	eax, DWORD PTR _unitab$91217[ebp]
	push	eax
	push	0
	call	_get_unitab
	add	esp, 12					; 0000000cH
; Line 4940
	mov	ecx, DWORD PTR _font$91245[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 100				; 00000064H
	mov	DWORD PTR _rtfsize$91227[ebp], eax
; Line 4941
	push	1
	mov	eax, DWORD PTR _rtfsize$91227[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _rtf$91218[ebp], eax
; Line 4943
	mov	ecx, DWORD PTR _font$91245[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _font$91245[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG91248
	mov	edx, DWORD PTR _rtf$91218[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rtflen$91224[ebp], eax
; Line 4954
	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN60@write_clip
; Line 4955
	push	1048					; 00000418H
	push	0
	lea	eax, DWORD PTR _palette$91243[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 4956
	mov	DWORD PTR _i$91232[ebp], 0
	jmp	SHORT $LN80@write_clip
$LN79@write_clip:
	mov	ecx, DWORD PTR _i$91232[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$91232[ebp], ecx
$LN80@write_clip:
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _i$91232[ebp], edx
	jge	$LN78@write_clip
; Line 4957
	mov	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 511				; 000001ffH
	mov	DWORD PTR _fgcolour$91235[ebp], edx
; Line 4958
	mov	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 261632				; 0003fe00H
	shr	edx, 9
	mov	DWORD PTR _bgcolour$91237[ebp], edx
; Line 4960
	mov	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 1048576				; 00100000H
	je	SHORT $LN77@write_clip
; Line 4961
	mov	eax, DWORD PTR _fgcolour$91235[ebp]
	mov	DWORD PTR _tmpcolour$91254[ebp], eax
; Line 4962
	mov	ecx, DWORD PTR _bgcolour$91237[ebp]
	mov	DWORD PTR _fgcolour$91235[ebp], ecx
; Line 4963
	mov	edx, DWORD PTR _tmpcolour$91254[ebp]
	mov	DWORD PTR _bgcolour$91237[ebp], edx
$LN77@write_clip:
; Line 4966
	cmp	DWORD PTR _bold_colours, 0
	je	SHORT $LN76@write_clip
	mov	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 262144				; 00040000H
	je	SHORT $LN76@write_clip
; Line 4967
	cmp	DWORD PTR _fgcolour$91235[ebp], 8
	jge	SHORT $LN75@write_clip
; Line 4968
	mov	eax, DWORD PTR _fgcolour$91235[ebp]
	add	eax, 8
	mov	DWORD PTR _fgcolour$91235[ebp], eax
	jmp	SHORT $LN76@write_clip
$LN75@write_clip:
; Line 4969
	cmp	DWORD PTR _fgcolour$91235[ebp], 256	; 00000100H
	jl	SHORT $LN76@write_clip
; Line 4970
	mov	ecx, DWORD PTR _fgcolour$91235[ebp]
	add	ecx, 1
	mov	DWORD PTR _fgcolour$91235[ebp], ecx
$LN76@write_clip:
; Line 4973
	mov	edx, DWORD PTR _i$91232[ebp]
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, 2097152				; 00200000H
	je	SHORT $LN72@write_clip
; Line 4974
	cmp	DWORD PTR _bgcolour$91237[ebp], 8
	jge	SHORT $LN71@write_clip
; Line 4975
	mov	edx, DWORD PTR _bgcolour$91237[ebp]
	add	edx, 8
	mov	DWORD PTR _bgcolour$91237[ebp], edx
	jmp	SHORT $LN72@write_clip
$LN71@write_clip:
; Line 4976
	cmp	DWORD PTR _bgcolour$91237[ebp], 256	; 00000100H
	jl	SHORT $LN72@write_clip
; Line 4977
	mov	eax, DWORD PTR _bgcolour$91237[ebp]
	add	eax, 1
	mov	DWORD PTR _bgcolour$91237[ebp], eax
$LN72@write_clip:
; Line 4980
	mov	ecx, DWORD PTR _fgcolour$91235[ebp]
	mov	edx, DWORD PTR _palette$91243[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _fgcolour$91235[ebp]
	mov	DWORD PTR _palette$91243[ebp+eax*4], edx
; Line 4981
	mov	ecx, DWORD PTR _bgcolour$91237[ebp]
	mov	edx, DWORD PTR _palette$91243[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _bgcolour$91237[ebp]
	mov	DWORD PTR _palette$91243[ebp+eax*4], edx
; Line 4982
	jmp	$LN79@write_clip
$LN78@write_clip:
; Line 4987
	mov	DWORD PTR _numcolours$91244[ebp], 0
; Line 4988
	mov	DWORD PTR _i$91232[ebp], 0
	jmp	SHORT $LN68@write_clip
$LN67@write_clip:
	mov	ecx, DWORD PTR _i$91232[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$91232[ebp], ecx
$LN68@write_clip:
	cmp	DWORD PTR _i$91232[ebp], 262		; 00000106H
	jge	SHORT $LN66@write_clip
; Line 4989
	mov	edx, DWORD PTR _i$91232[ebp]
	cmp	DWORD PTR _palette$91243[ebp+edx*4], 0
	je	SHORT $LN65@write_clip
; Line 4990
	mov	eax, DWORD PTR _numcolours$91244[ebp]
	add	eax, 1
	mov	DWORD PTR _numcolours$91244[ebp], eax
	mov	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _numcolours$91244[ebp]
	mov	DWORD PTR _palette$91243[ebp+ecx*4], edx
$LN65@write_clip:
; Line 4991
	jmp	SHORT $LN67@write_clip
$LN66@write_clip:
; Line 4996
	push	1
	mov	eax, DWORD PTR _numcolours$91244[ebp]
	imul	eax, 25					; 00000019H
	add	eax, DWORD PTR _rtfsize$91227[ebp]
	push	eax
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rtf$91218[ebp], eax
; Line 4997
	push	OFFSET $SG91270
	mov	edx, DWORD PTR _rtf$91218[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 4998
	mov	eax, DWORD PTR _rtf$91218[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _rtflen$91224[ebp], eax
; Line 5000
	mov	DWORD PTR _i$91232[ebp], 0
	jmp	SHORT $LN64@write_clip
$LN63@write_clip:
	mov	ecx, DWORD PTR _i$91232[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$91232[ebp], ecx
$LN64@write_clip:
	cmp	DWORD PTR _i$91232[ebp], 262		; 00000106H
	jge	SHORT $LN62@write_clip
; Line 5001
	mov	edx, DWORD PTR _i$91232[ebp]
	cmp	DWORD PTR _palette$91243[ebp+edx*4], 0
	je	SHORT $LN61@write_clip
; Line 5002
	mov	eax, DWORD PTR _i$91232[ebp]
	imul	eax, 3
	movzx	ecx, BYTE PTR _defpal[eax]
	push	ecx
	mov	edx, DWORD PTR _i$91232[ebp]
	imul	edx, 3
	movzx	eax, BYTE PTR _defpal[edx+1]
	push	eax
	mov	ecx, DWORD PTR _i$91232[ebp]
	imul	ecx, 3
	movzx	edx, BYTE PTR _defpal[ecx+2]
	push	edx
	push	OFFSET $SG91275
	mov	eax, DWORD PTR _rtf$91218[ebp]
	add	eax, DWORD PTR _rtflen$91224[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
$LN61@write_clip:
; Line 5004
	jmp	$LN63@write_clip
$LN62@write_clip:
; Line 5005
	push	OFFSET $SG91276
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 5006
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	add	edx, 1
	mov	DWORD PTR _rtflen$91224[ebp], edx
$LN60@write_clip:
; Line 5028
	mov	eax, DWORD PTR _tindex$91226[ebp]
	cmp	eax, DWORD PTR _len2$[ebp]
	jge	$LN59@write_clip
	mov	ecx, DWORD PTR _uindex$91225[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	$LN59@write_clip
	mov	edx, DWORD PTR _tdata$91220[ebp]
	add	edx, DWORD PTR _tindex$91226[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN59@write_clip
	mov	ecx, DWORD PTR _uindex$91225[ebp]
	mov	edx, DWORD PTR _udata$91222[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	$LN59@write_clip
; Line 5031
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _len2$[ebp]
	jge	SHORT $LN58@write_clip
	mov	edx, DWORD PTR _tdata$91220[ebp]
	add	edx, DWORD PTR _tindex$91226[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN58@write_clip
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	add	ecx, DWORD PTR _tindex$91226[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN58@write_clip
; Line 5032
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, 1
	mov	DWORD PTR _tindex$91226[ebp], eax
; Line 5033
	mov	ecx, DWORD PTR _uindex$91225[ebp]
	add	ecx, 1
	mov	DWORD PTR _uindex$91225[ebp], ecx
$LN58@write_clip:
; Line 5039
	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN57@write_clip
; Line 5040
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	add	edx, 64					; 00000040H
	cmp	DWORD PTR _rtfsize$91227[ebp], edx
	jge	SHORT $LN56@write_clip
; Line 5041
	mov	eax, DWORD PTR _rtflen$91224[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _rtfsize$91227[ebp], eax
; Line 5042
	push	1
	mov	ecx, DWORD PTR _rtfsize$91227[ebp]
	push	ecx
	mov	edx, DWORD PTR _rtf$91218[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rtf$91218[ebp], eax
$LN56@write_clip:
; Line 5048
	mov	eax, DWORD PTR _tindex$91226[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 511				; 000001ffH
	mov	DWORD PTR _fgcolour$91235[ebp], edx
; Line 5049
	mov	eax, DWORD PTR _tindex$91226[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 261632				; 0003fe00H
	shr	edx, 9
	mov	DWORD PTR _bgcolour$91237[ebp], edx
; Line 5051
	mov	eax, DWORD PTR _tindex$91226[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 1048576				; 00100000H
	je	SHORT $LN55@write_clip
; Line 5052
	mov	eax, DWORD PTR _fgcolour$91235[ebp]
	mov	DWORD PTR _tmpcolour$91287[ebp], eax
; Line 5053
	mov	ecx, DWORD PTR _bgcolour$91237[ebp]
	mov	DWORD PTR _fgcolour$91235[ebp], ecx
; Line 5054
	mov	edx, DWORD PTR _tmpcolour$91287[ebp]
	mov	DWORD PTR _bgcolour$91237[ebp], edx
$LN55@write_clip:
; Line 5057
	cmp	DWORD PTR _bold_colours, 0
	je	SHORT $LN54@write_clip
	mov	eax, DWORD PTR _tindex$91226[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 262144				; 00040000H
	je	SHORT $LN54@write_clip
; Line 5058
	cmp	DWORD PTR _fgcolour$91235[ebp], 8
	jge	SHORT $LN53@write_clip
; Line 5059
	mov	eax, DWORD PTR _fgcolour$91235[ebp]
	add	eax, 8
	mov	DWORD PTR _fgcolour$91235[ebp], eax
	jmp	SHORT $LN54@write_clip
$LN53@write_clip:
; Line 5060
	cmp	DWORD PTR _fgcolour$91235[ebp], 256	; 00000100H
	jl	SHORT $LN54@write_clip
; Line 5061
	mov	ecx, DWORD PTR _fgcolour$91235[ebp]
	add	ecx, 1
	mov	DWORD PTR _fgcolour$91235[ebp], ecx
$LN54@write_clip:
; Line 5064
	mov	edx, DWORD PTR _tindex$91226[ebp]
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, 2097152				; 00200000H
	je	SHORT $LN50@write_clip
; Line 5065
	cmp	DWORD PTR _bgcolour$91237[ebp], 8
	jge	SHORT $LN49@write_clip
; Line 5066
	mov	edx, DWORD PTR _bgcolour$91237[ebp]
	add	edx, 8
	mov	DWORD PTR _bgcolour$91237[ebp], edx
	jmp	SHORT $LN50@write_clip
$LN49@write_clip:
; Line 5067
	cmp	DWORD PTR _bgcolour$91237[ebp], 256	; 00000100H
	jl	SHORT $LN50@write_clip
; Line 5068
	mov	eax, DWORD PTR _bgcolour$91237[ebp]
	add	eax, 1
	mov	DWORD PTR _bgcolour$91237[ebp], eax
$LN50@write_clip:
; Line 5074
	cmp	DWORD PTR _bold_font_mode, 0
	je	SHORT $LN46@write_clip
; Line 5075
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 262144				; 00040000H
	mov	DWORD PTR _attrBold$91239[ebp], eax
; Line 5076
	jmp	SHORT $LN45@write_clip
$LN46@write_clip:
; Line 5077
	mov	DWORD PTR _attrBold$91239[ebp], 0
$LN45@write_clip:
; Line 5079
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 524288				; 00080000H
	mov	DWORD PTR _attrUnder$91241[ebp], eax
; Line 5088
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 1048576				; 00100000H
	jne	SHORT $LN44@write_clip
; Line 5089
	cmp	DWORD PTR _bgcolour$91237[ebp], 256	; 00000100H
	jl	SHORT $LN43@write_clip
; Line 5090
	mov	DWORD PTR _bgcolour$91237[ebp], -1
$LN43@write_clip:
; Line 5092
	cmp	DWORD PTR _fgcolour$91235[ebp], 256	; 00000100H
	jl	SHORT $LN44@write_clip
; Line 5093
	cmp	DWORD PTR _bold_colours, 0
	je	SHORT $LN41@write_clip
	mov	ecx, DWORD PTR _fgcolour$91235[ebp]
	and	ecx, 1
	je	SHORT $LN41@write_clip
	cmp	DWORD PTR _bgcolour$91237[ebp], -1
	jne	SHORT $LN41@write_clip
; Line 5094
	mov	DWORD PTR _attrBold$91239[ebp], 262144	; 00040000H
$LN41@write_clip:
; Line 5096
	mov	DWORD PTR _fgcolour$91235[ebp], -1
$LN44@write_clip:
; Line 5103
	mov	edx, DWORD PTR _lastfgcolour$91236[ebp]
	cmp	edx, DWORD PTR _fgcolour$91235[ebp]
	je	SHORT $LN40@write_clip
; Line 5104
	mov	eax, DWORD PTR _fgcolour$91235[ebp]
	mov	DWORD PTR _lastfgcolour$91236[ebp], eax
; Line 5105
	cmp	DWORD PTR _fgcolour$91235[ebp], 0
	jl	SHORT $LN91@write_clip
	mov	ecx, DWORD PTR _fgcolour$91235[ebp]
	mov	edx, DWORD PTR _palette$91243[ebp+ecx*4]
	mov	DWORD PTR tv369[ebp], edx
	jmp	SHORT $LN92@write_clip
$LN91@write_clip:
	mov	DWORD PTR tv369[ebp], 0
$LN92@write_clip:
	mov	eax, DWORD PTR tv369[ebp]
	push	eax
	push	OFFSET $SG91303
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
$LN40@write_clip:
; Line 5108
	mov	edx, DWORD PTR _lastbgcolour$91238[ebp]
	cmp	edx, DWORD PTR _bgcolour$91237[ebp]
	je	SHORT $LN39@write_clip
; Line 5109
	mov	eax, DWORD PTR _bgcolour$91237[ebp]
	mov	DWORD PTR _lastbgcolour$91238[ebp], eax
; Line 5110
	cmp	DWORD PTR _bgcolour$91237[ebp], 0
	jl	SHORT $LN93@write_clip
	mov	ecx, DWORD PTR _bgcolour$91237[ebp]
	mov	edx, DWORD PTR _palette$91243[ebp+ecx*4]
	mov	DWORD PTR tv380[ebp], edx
	jmp	SHORT $LN94@write_clip
$LN93@write_clip:
	mov	DWORD PTR tv380[ebp], 0
$LN94@write_clip:
	mov	eax, DWORD PTR tv380[ebp]
	push	eax
	push	OFFSET $SG91305
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
$LN39@write_clip:
; Line 5113
	mov	edx, DWORD PTR _lastAttrBold$91240[ebp]
	cmp	edx, DWORD PTR _attrBold$91239[ebp]
	je	SHORT $LN38@write_clip
; Line 5114
	mov	eax, DWORD PTR _attrBold$91239[ebp]
	mov	DWORD PTR _lastAttrBold$91240[ebp], eax
; Line 5115
	cmp	DWORD PTR _attrBold$91239[ebp], 0
	je	SHORT $LN95@write_clip
	mov	DWORD PTR tv389[ebp], OFFSET $SG91307
	jmp	SHORT $LN96@write_clip
$LN95@write_clip:
	mov	DWORD PTR tv389[ebp], OFFSET $SG91308
$LN96@write_clip:
	mov	ecx, DWORD PTR tv389[ebp]
	push	ecx
	push	OFFSET $SG91309
	mov	edx, DWORD PTR _rtf$91218[ebp]
	add	edx, DWORD PTR _rtflen$91224[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
$LN38@write_clip:
; Line 5118
	mov	eax, DWORD PTR _lastAttrUnder$91242[ebp]
	cmp	eax, DWORD PTR _attrUnder$91241[ebp]
	je	SHORT $LN57@write_clip
; Line 5119
	mov	ecx, DWORD PTR _attrUnder$91241[ebp]
	mov	DWORD PTR _lastAttrUnder$91242[ebp], ecx
; Line 5120
	cmp	DWORD PTR _attrUnder$91241[ebp], 0
	je	SHORT $LN97@write_clip
	mov	DWORD PTR tv398[ebp], OFFSET $SG91311
	jmp	SHORT $LN98@write_clip
$LN97@write_clip:
	mov	DWORD PTR tv398[ebp], OFFSET $SG91312
$LN98@write_clip:
	mov	edx, DWORD PTR tv398[ebp]
	push	edx
	push	OFFSET $SG91313
	mov	eax, DWORD PTR _rtf$91218[ebp]
	add	eax, DWORD PTR _rtflen$91224[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
$LN57@write_clip:
; Line 5124
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	add	ecx, DWORD PTR _tindex$91226[ebp]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, WORD PTR _unitab$91217[ebp+edx*2]
	mov	ecx, DWORD PTR _uindex$91225[ebp]
	mov	edx, DWORD PTR _udata$91222[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jne	SHORT $LN36@write_clip
; Line 5125
	mov	DWORD PTR _multilen$91228[ebp], 1
; Line 5126
	mov	BYTE PTR _before$91233[ebp], 0
; Line 5127
	mov	BYTE PTR _after$91234[ebp], 0
; Line 5128
	mov	DWORD PTR _alen$91230[ebp], 0
	mov	edx, DWORD PTR _alen$91230[ebp]
	mov	DWORD PTR _blen$91229[ebp], edx
; Line 5129
	jmp	$LN35@write_clip
$LN36@write_clip:
; Line 5131
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	push	1
	mov	eax, DWORD PTR _uindex$91225[ebp]
	lea	ecx, DWORD PTR _unitab$91217[ebp+eax*2]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _multilen$91228[ebp], eax
; Line 5132
	cmp	DWORD PTR _multilen$91228[ebp], 1
	je	SHORT $LN34@write_clip
; Line 5134
	mov	edx, DWORD PTR _uindex$91225[ebp]
	mov	eax, DWORD PTR _udata$91222[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	mov	edx, DWORD PTR _multilen$91228[ebp]
	push	edx
	push	OFFSET $SG91320
	lea	eax, DWORD PTR _before$91233[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _blen$91229[ebp], eax
; Line 5135
	mov	DWORD PTR _alen$91230[ebp], 1
	push	OFFSET $SG91321
	lea	ecx, DWORD PTR _after$91234[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 5136
	jmp	SHORT $LN35@write_clip
$LN34@write_clip:
; Line 5137
	mov	edx, DWORD PTR _uindex$91225[ebp]
	mov	eax, DWORD PTR _udata$91222[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	push	ecx
	push	OFFSET $SG91323
	lea	edx, DWORD PTR _before$91233[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _blen$91229[ebp], eax
; Line 5138
	mov	DWORD PTR _alen$91230[ebp], 0
	mov	BYTE PTR _after$91234[ebp], 0
$LN35@write_clip:
; Line 5141
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _multilen$91228[ebp]
	cmp	eax, DWORD PTR _len2$[ebp]
	jle	SHORT $LN99@write_clip
	push	5141					; 00001415H
	push	OFFSET $SG91325
	push	OFFSET $SG91326
	call	__wassert
	add	esp, 12					; 0000000cH
$LN99@write_clip:
; Line 5142
	mov	edx, DWORD PTR _blen$91229[ebp]
	add	edx, DWORD PTR _alen$91230[ebp]
	mov	DWORD PTR _totallen$91231[ebp], edx
; Line 5143
	mov	DWORD PTR _i$91232[ebp], 0
	jmp	SHORT $LN32@write_clip
$LN31@write_clip:
	mov	eax, DWORD PTR _i$91232[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91232[ebp], eax
$LN32@write_clip:
	mov	ecx, DWORD PTR _i$91232[ebp]
	cmp	ecx, DWORD PTR _multilen$91228[ebp]
	jge	$LN30@write_clip
; Line 5146
	mov	edx, DWORD PTR _tindex$91226[ebp]
	add	edx, DWORD PTR _i$91232[ebp]
	mov	eax, DWORD PTR _tdata$91220[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN28@write_clip
	mov	edx, DWORD PTR _tindex$91226[ebp]
	add	edx, DWORD PTR _i$91232[ebp]
	mov	eax, DWORD PTR _tdata$91220[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 123				; 0000007bH
	je	SHORT $LN28@write_clip
	mov	edx, DWORD PTR _tindex$91226[ebp]
	add	edx, DWORD PTR _i$91232[ebp]
	mov	eax, DWORD PTR _tdata$91220[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 125				; 0000007dH
	jne	SHORT $LN29@write_clip
$LN28@write_clip:
; Line 5147
	mov	edx, DWORD PTR _totallen$91231[ebp]
	add	edx, 2
	mov	DWORD PTR _totallen$91231[ebp], edx
	jmp	$LN27@write_clip
$LN29@write_clip:
; Line 5148
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN25@write_clip
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN26@write_clip
$LN25@write_clip:
; Line 5149
	mov	eax, DWORD PTR _totallen$91231[ebp]
	add	eax, 6
	mov	DWORD PTR _totallen$91231[ebp], eax
	jmp	SHORT $LN27@write_clip
$LN26@write_clip:
; Line 5150
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _tdata$91220[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN22@write_clip
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _tdata$91220[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN23@write_clip
$LN22@write_clip:
; Line 5151
	mov	ecx, DWORD PTR _totallen$91231[ebp]
	add	ecx, 4
	mov	DWORD PTR _totallen$91231[ebp], ecx
; Line 5152
	jmp	SHORT $LN27@write_clip
$LN23@write_clip:
; Line 5153
	mov	edx, DWORD PTR _totallen$91231[ebp]
	add	edx, 1
	mov	DWORD PTR _totallen$91231[ebp], edx
$LN27@write_clip:
; Line 5154
	jmp	$LN31@write_clip
$LN30@write_clip:
; Line 5156
	mov	eax, DWORD PTR _totallen$91231[ebp]
	mov	ecx, DWORD PTR _rtflen$91224[ebp]
	lea	edx, DWORD PTR [ecx+eax+3]
	cmp	DWORD PTR _rtfsize$91227[ebp], edx
	jge	SHORT $LN20@write_clip
; Line 5157
	mov	eax, DWORD PTR _totallen$91231[ebp]
	mov	ecx, DWORD PTR _rtflen$91224[ebp]
	lea	edx, DWORD PTR [ecx+eax+512]
	mov	DWORD PTR _rtfsize$91227[ebp], edx
; Line 5158
	push	1
	mov	eax, DWORD PTR _rtfsize$91227[ebp]
	push	eax
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rtf$91218[ebp], eax
$LN20@write_clip:
; Line 5161
	lea	edx, DWORD PTR _before$91233[ebp]
	push	edx
	mov	eax, DWORD PTR _rtf$91218[ebp]
	add	eax, DWORD PTR _rtflen$91224[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
	mov	ecx, DWORD PTR _rtflen$91224[ebp]
	add	ecx, DWORD PTR _blen$91229[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], ecx
; Line 5162
	mov	DWORD PTR _i$91232[ebp], 0
	jmp	SHORT $LN19@write_clip
$LN18@write_clip:
	mov	edx, DWORD PTR _i$91232[ebp]
	add	edx, 1
	mov	DWORD PTR _i$91232[ebp], edx
$LN19@write_clip:
	mov	eax, DWORD PTR _i$91232[ebp]
	cmp	eax, DWORD PTR _multilen$91228[ebp]
	jge	$LN17@write_clip
; Line 5165
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _tdata$91220[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN15@write_clip
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _tdata$91220[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 123				; 0000007bH
	je	SHORT $LN15@write_clip
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _tdata$91220[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 125				; 0000007dH
	jne	SHORT $LN16@write_clip
$LN15@write_clip:
; Line 5166
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	mov	BYTE PTR [ecx], 92			; 0000005cH
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	add	edx, 1
	mov	DWORD PTR _rtflen$91224[ebp], edx
; Line 5167
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	mov	edx, DWORD PTR _tdata$91220[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _rtflen$91224[ebp]
	add	ecx, 1
	mov	DWORD PTR _rtflen$91224[ebp], ecx
	jmp	$LN14@write_clip
$LN16@write_clip:
; Line 5168
	mov	edx, DWORD PTR _tindex$91226[ebp]
	add	edx, DWORD PTR _i$91232[ebp]
	mov	eax, DWORD PTR _tdata$91220[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN12@write_clip
	mov	edx, DWORD PTR _tindex$91226[ebp]
	add	edx, DWORD PTR _i$91232[ebp]
	mov	eax, DWORD PTR _tdata$91220[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN13@write_clip
$LN12@write_clip:
; Line 5169
	push	OFFSET $SG91351
	mov	edx, DWORD PTR _rtf$91218[ebp]
	add	edx, DWORD PTR _rtflen$91224[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
	jmp	$LN14@write_clip
$LN13@write_clip:
; Line 5170
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 126				; 0000007eH
	jg	SHORT $LN9@write_clip
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	jge	SHORT $LN10@write_clip
$LN9@write_clip:
; Line 5171
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _i$91232[ebp]
	mov	ecx, DWORD PTR _tdata$91220[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	push	edx
	push	OFFSET $SG91355
	mov	eax, DWORD PTR _rtf$91218[ebp]
	add	eax, DWORD PTR _rtflen$91224[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], eax
; Line 5172
	jmp	SHORT $LN14@write_clip
$LN10@write_clip:
; Line 5173
	mov	ecx, DWORD PTR _tindex$91226[ebp]
	add	ecx, DWORD PTR _i$91232[ebp]
	mov	edx, DWORD PTR _rtf$91218[ebp]
	add	edx, DWORD PTR _rtflen$91224[ebp]
	mov	eax, DWORD PTR _tdata$91220[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	add	edx, 1
	mov	DWORD PTR _rtflen$91224[ebp], edx
$LN14@write_clip:
; Line 5175
	jmp	$LN18@write_clip
$LN17@write_clip:
; Line 5176
	lea	eax, DWORD PTR _after$91234[ebp]
	push	eax
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	add	edx, DWORD PTR _alen$91230[ebp]
	mov	DWORD PTR _rtflen$91224[ebp], edx
; Line 5178
	mov	eax, DWORD PTR _tindex$91226[ebp]
	add	eax, DWORD PTR _multilen$91228[ebp]
	mov	DWORD PTR _tindex$91226[ebp], eax
; Line 5179
	mov	ecx, DWORD PTR _uindex$91225[ebp]
	add	ecx, 1
	mov	DWORD PTR _uindex$91225[ebp], ecx
; Line 5180
	jmp	$LN60@write_clip
$LN59@write_clip:
; Line 5182
	mov	edx, DWORD PTR _rtf$91218[ebp]
	add	edx, DWORD PTR _rtflen$91224[ebp]
	mov	BYTE PTR [edx], 125			; 0000007dH
	mov	eax, DWORD PTR _rtflen$91224[ebp]
	add	eax, 1
	mov	DWORD PTR _rtflen$91224[ebp], eax
; Line 5183
	mov	ecx, DWORD PTR _rtf$91218[ebp]
	add	ecx, DWORD PTR _rtflen$91224[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	add	edx, 1
	mov	DWORD PTR _rtflen$91224[ebp], edx
; Line 5184
	mov	eax, DWORD PTR _rtf$91218[ebp]
	add	eax, DWORD PTR _rtflen$91224[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _rtflen$91224[ebp]
	add	ecx, 1
	mov	DWORD PTR _rtflen$91224[ebp], ecx
; Line 5186
	mov	esi, esp
	mov	edx, DWORD PTR _rtflen$91224[ebp]
	push	edx
	push	8194					; 00002002H
	call	DWORD PTR __imp__GlobalAlloc@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _clipdata3$[ebp], eax
; Line 5187
	cmp	DWORD PTR _clipdata3$[ebp], 0
	je	SHORT $LN7@write_clip
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata3$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lock3$[ebp], eax
	cmp	DWORD PTR _lock3$[ebp], 0
	je	SHORT $LN7@write_clip
; Line 5188
	mov	ecx, DWORD PTR _rtflen$91224[ebp]
	push	ecx
	mov	edx, DWORD PTR _rtf$91218[ebp]
	push	edx
	mov	eax, DWORD PTR _lock3$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 5189
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata3$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@write_clip:
; Line 5191
	mov	edx, DWORD PTR _rtf$91218[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 5192
	jmp	SHORT $LN6@write_clip
$LN82@write_clip:
; Line 5193
	mov	DWORD PTR _clipdata3$[ebp], 0
$LN6@write_clip:
; Line 5195
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata$[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5196
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata2$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5198
	cmp	DWORD PTR _must_deselect$[ebp], 0
	jne	SHORT $LN5@write_clip
; Line 5199
	mov	esi, esp
	push	0
	push	1
	push	32770					; 00008002H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@write_clip:
; Line 5201
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__OpenClipboard@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@write_clip
; Line 5202
	mov	esi, esp
	call	DWORD PTR __imp__EmptyClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5203
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	push	13					; 0000000dH
	call	DWORD PTR __imp__SetClipboardData@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5204
	mov	esi, esp
	mov	edx, DWORD PTR _clipdata2$[ebp]
	push	edx
	push	1
	call	DWORD PTR __imp__SetClipboardData@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5205
	cmp	DWORD PTR _clipdata3$[ebp], 0
	je	SHORT $LN3@write_clip
; Line 5206
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata3$[ebp]
	push	eax
	mov	edi, esp
	push	OFFSET $SG91364
	call	DWORD PTR __imp__RegisterClipboardFormatA@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__SetClipboardData@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@write_clip:
; Line 5207
	mov	esi, esp
	call	DWORD PTR __imp__CloseClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5208
	jmp	SHORT $LN2@write_clip
$LN4@write_clip:
; Line 5209
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5210
	mov	esi, esp
	mov	edx, DWORD PTR _clipdata2$[ebp]
	push	edx
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@write_clip:
; Line 5213
	cmp	DWORD PTR _must_deselect$[ebp], 0
	jne	SHORT $LN89@write_clip
; Line 5214
	mov	esi, esp
	push	0
	push	0
	push	32770					; 00008002H
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN89@write_clip:
; Line 5215
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN105@write_clip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1756				; 000006dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN105@write_clip:
	DD	4
	DD	$LN104@write_clip
$LN104@write_clip:
	DD	-548					; fffffddcH
	DD	512					; 00000200H
	DD	$LN100@write_clip
	DD	-620					; fffffd94H
	DD	16					; 00000010H
	DD	$LN101@write_clip
	DD	-632					; fffffd88H
	DD	4
	DD	$LN102@write_clip
	DD	-1720					; fffff948H
	DD	1048					; 00000418H
	DD	$LN103@write_clip
$LN103@write_clip:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN102@write_clip:
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN101@write_clip:
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN100@write_clip:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	0
_write_clip ENDP
_TEXT	ENDS
_BSS	SEGMENT
	ALIGN	4

_clipboard_length DD 01H DUP (?)
_clipboard_contents DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_i$91401 = -16						; size = 4
_s$91400 = -12						; size = 4
_p2$91391 = -8						; size = 4
_p$91390 = -4						; size = 4
_clipdata$ = 8						; size = 4
_unicode$ = 12						; size = 4
_process_clipdata PROC
; Line 5235
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 5236
	mov	eax, DWORD PTR _clipboard_contents
	push	eax
	call	_safefree
	add	esp, 4
; Line 5237
	mov	DWORD PTR _clipboard_contents, 0
; Line 5238
	mov	DWORD PTR _clipboard_length, 0
; Line 5240
	cmp	DWORD PTR _unicode$[ebp], 0
	je	$LN7@process_cl
; Line 5241
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$91390[ebp], eax
; Line 5244
	cmp	DWORD PTR _p$91390[ebp], 0
	je	SHORT $LN6@process_cl
; Line 5246
	mov	edx, DWORD PTR _p$91390[ebp]
	mov	DWORD PTR _p2$91391[ebp], edx
	jmp	SHORT $LN5@process_cl
$LN4@process_cl:
	mov	eax, DWORD PTR _p2$91391[ebp]
	add	eax, 2
	mov	DWORD PTR _p2$91391[ebp], eax
$LN5@process_cl:
	mov	ecx, DWORD PTR _p2$91391[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@process_cl
	jmp	SHORT $LN4@process_cl
$LN3@process_cl:
; Line 5247
	mov	eax, DWORD PTR _p2$91391[ebp]
	sub	eax, DWORD PTR _p$91390[ebp]
	sar	eax, 1
	mov	DWORD PTR _clipboard_length, eax
; Line 5248
	push	2
	mov	ecx, DWORD PTR _clipboard_length
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _clipboard_contents, eax
; Line 5249
	mov	edx, DWORD PTR _clipboard_length
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$91390[ebp]
	push	eax
	mov	ecx, DWORD PTR _clipboard_contents
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 5250
	xor	edx, edx
	mov	eax, DWORD PTR _clipboard_length
	mov	ecx, DWORD PTR _clipboard_contents
	mov	WORD PTR [ecx+eax*2], dx
; Line 5251
	mov	eax, 1
	jmp	$LN8@process_cl
$LN6@process_cl:
; Line 5253
	jmp	$LN2@process_cl
$LN7@process_cl:
; Line 5254
	mov	esi, esp
	mov	edx, DWORD PTR _clipdata$[ebp]
	push	edx
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$91400[ebp], eax
; Line 5257
	cmp	DWORD PTR _s$91400[ebp], 0
	je	$LN2@process_cl
; Line 5258
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _s$91400[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$91400[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _i$91401[ebp], eax
; Line 5259
	push	2
	mov	edx, DWORD PTR _i$91401[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _clipboard_contents, eax
; Line 5261
	mov	esi, esp
	mov	eax, DWORD PTR _i$91401[ebp]
	push	eax
	mov	ecx, DWORD PTR _clipboard_contents
	push	ecx
	mov	edx, DWORD PTR _s$91400[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _s$91400[ebp]
	push	eax
	push	0
	push	0
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5262
	mov	ecx, DWORD PTR _i$91401[ebp]
	sub	ecx, 1
	mov	DWORD PTR _clipboard_length, ecx
; Line 5263
	xor	edx, edx
	mov	eax, DWORD PTR _clipboard_length
	mov	ecx, DWORD PTR _clipboard_contents
	mov	WORD PTR [ecx+eax*2], dx
; Line 5264
	mov	eax, 1
	jmp	SHORT $LN8@process_cl
$LN2@process_cl:
; Line 5268
	xor	eax, eax
$LN8@process_cl:
; Line 5269
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_process_clipdata ENDP
_TEXT	ENDS
EXTRN	__imp__CreateThread@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_in_threadid$ = -8					; size = 4
_frontend$ = 8						; size = 4
_request_paste PROC
; Line 5272
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5291
	mov	esi, esp
	lea	eax, DWORD PTR _in_threadid$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	push	OFFSET _clipboard_read_threadfunc@4
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5292
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@request_pa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@request_pa:
	DD	1
	DD	$LN4@request_pa
$LN4@request_pa:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@request_pa
$LN3@request_pa:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_request_paste ENDP
_TEXT	ENDS
EXTRN	__imp__GetClipboardData@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_clipdata$ = -8						; size = 4
_hwnd$ = -4						; size = 4
_param$ = 8						; size = 4
_clipboard_read_threadfunc@4 PROC
; Line 5218
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5219
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _hwnd$[ebp], eax
; Line 5222
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__OpenClipboard@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN4@clipboard_
; Line 5223
	mov	esi, esp
	push	13					; 0000000dH
	call	DWORD PTR __imp__GetClipboardData@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _clipdata$[ebp], eax
	cmp	DWORD PTR _clipdata$[ebp], 0
	je	SHORT $LN3@clipboard_
; Line 5224
	mov	esi, esp
	mov	ecx, DWORD PTR _clipdata$[ebp]
	push	ecx
	push	1
	push	32774					; 00008006H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@clipboard_
$LN3@clipboard_:
; Line 5225
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__GetClipboardData@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _clipdata$[ebp], eax
	cmp	DWORD PTR _clipdata$[ebp], 0
	je	SHORT $LN2@clipboard_
; Line 5226
	mov	esi, esp
	mov	eax, DWORD PTR _clipdata$[ebp]
	push	eax
	push	0
	push	32774					; 00008006H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@clipboard_:
; Line 5228
	mov	esi, esp
	call	DWORD PTR __imp__CloseClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@clipboard_:
; Line 5231
	xor	eax, eax
; Line 5232
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_clipboard_read_threadfunc@4 ENDP
_TEXT	ENDS
PUBLIC	_get_clip
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_p$ = 12						; size = 4
_len$ = 16						; size = 4
_get_clip PROC
; Line 5295
	push	ebp
	mov	ebp, esp
; Line 5296
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@get_clip
; Line 5297
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _clipboard_contents
	mov	DWORD PTR [eax], ecx
; Line 5298
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _clipboard_length
	mov	DWORD PTR [edx], eax
$LN2@get_clip:
; Line 5300
	pop	ebp
	ret	0
_get_clip ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_fatalbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_morestuff$ = -116					; size = 100
_stuff$ = -12						; size = 4
_ap$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fmt$ = 8						; size = 4
_fatalbox PROC
; Line 5327
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5331
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 5332
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _stuff$[ebp], eax
; Line 5333
	mov	DWORD PTR _ap$[ebp], 0
; Line 5334
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG91428
	lea	ecx, DWORD PTR _morestuff$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 5335
	mov	esi, esp
	push	16					; 00000010H
	lea	edx, DWORD PTR _morestuff$[ebp]
	push	edx
	mov	eax, DWORD PTR _stuff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5336
	mov	edx, DWORD PTR _stuff$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 5337
	push	1
	call	_cleanup_exit
	add	esp, 4
; Line 5338
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@fatalbox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@fatalbox:
	DD	1
	DD	$LN4@fatalbox
$LN4@fatalbox:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN3@fatalbox
$LN3@fatalbox:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_fatalbox ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_modalfatalbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_morestuff$ = -116					; size = 100
_stuff$ = -12						; size = 4
_ap$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fmt$ = 8						; size = 4
_modalfatalbox PROC
; Line 5344
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5348
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 5349
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _stuff$[ebp], eax
; Line 5350
	mov	DWORD PTR _ap$[ebp], 0
; Line 5351
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG91439
	lea	ecx, DWORD PTR _morestuff$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 5353
	mov	esi, esp
	push	4112					; 00001010H
	lea	edx, DWORD PTR _morestuff$[ebp]
	push	edx
	mov	eax, DWORD PTR _stuff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5354
	mov	edx, DWORD PTR _stuff$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 5355
	push	1
	call	_cleanup_exit
	add	esp, 4
; Line 5356
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@modalfatal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@modalfatal:
	DD	1
	DD	$LN4@modalfatal
$LN4@modalfatal:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN3@modalfatal
$LN3@modalfatal:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_modalfatalbox ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_nonfatal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_morestuff$ = -116					; size = 100
_stuff$ = -12						; size = 4
_ap$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fmt$ = 8						; size = 4
_nonfatal PROC
; Line 5362
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5366
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 5367
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _stuff$[ebp], eax
; Line 5368
	mov	DWORD PTR _ap$[ebp], 0
; Line 5369
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG91450
	lea	ecx, DWORD PTR _morestuff$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 5370
	mov	esi, esp
	push	16					; 00000010H
	lea	edx, DWORD PTR _morestuff$[ebp]
	push	edx
	mov	eax, DWORD PTR _stuff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5371
	mov	edx, DWORD PTR _stuff$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 5372
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nonfatal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@nonfatal:
	DD	1
	DD	$LN4@nonfatal
$LN4@nonfatal:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN3@nonfatal
$LN3@nonfatal:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_nonfatal ENDP
_TEXT	ENDS
EXTRN	_schedule_timer:PROC
EXTRN	__imp__FlashWindow@8:PROC
_BSS	SEGMENT
_next_flash DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_beep_ind$ = -4						; size = 4
_mode$ = 8						; size = 4
_flash_window PROC
; Line 5409
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5410
	push	98					; 00000062H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _beep_ind$[ebp], eax
; Line 5411
	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN12@flash_wind
	cmp	DWORD PTR _beep_ind$[ebp], 0
	jne	SHORT $LN13@flash_wind
$LN12@flash_wind:
; Line 5413
	cmp	DWORD PTR _flashing, 0
	je	SHORT $LN11@flash_wind
; Line 5414
	mov	DWORD PTR _flashing, 0
; Line 5415
	cmp	DWORD PTR _p_FlashWindowEx, 0
	je	SHORT $LN10@flash_wind
; Line 5416
	push	0
	push	0
	push	0
	call	_flash_window_ex
	add	esp, 12					; 0000000cH
; Line 5417
	jmp	SHORT $LN11@flash_wind
$LN10@flash_wind:
; Line 5418
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__FlashWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@flash_wind:
; Line 5419
	jmp	$LN14@flash_wind
$LN13@flash_wind:
; Line 5421
	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN7@flash_wind
; Line 5423
	cmp	DWORD PTR _flashing, 0
	jne	SHORT $LN6@flash_wind
; Line 5424
	mov	DWORD PTR _flashing, 1
; Line 5425
	cmp	DWORD PTR _p_FlashWindowEx, 0
	je	SHORT $LN5@flash_wind
; Line 5434
	push	0
	mov	edx, DWORD PTR _beep_ind$[ebp]
	sub	edx, 1
	neg	edx
	sbb	edx, edx
	and	edx, 2
	push	edx
	push	7
	call	_flash_window_ex
	add	esp, 12					; 0000000cH
; Line 5436
	jmp	SHORT $LN6@flash_wind
$LN5@flash_wind:
; Line 5437
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__FlashWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5438
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	push	OFFSET _flash_window_timer
	push	450					; 000001c2H
	call	_schedule_timer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _next_flash, eax
$LN6@flash_wind:
; Line 5440
	jmp	SHORT $LN14@flash_wind
$LN7@flash_wind:
; Line 5442
	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN14@flash_wind
	cmp	DWORD PTR _beep_ind$[ebp], 1
	jne	SHORT $LN14@flash_wind
; Line 5444
	cmp	DWORD PTR _flashing, 0
	je	SHORT $LN14@flash_wind
	cmp	DWORD PTR _p_FlashWindowEx, 0
	jne	SHORT $LN14@flash_wind
; Line 5445
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__FlashWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5446
	mov	eax, DWORD PTR _hwnd
	push	eax
	push	OFFSET _flash_window_timer
	push	450					; 000001c2H
	call	_schedule_timer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _next_flash, eax
$LN14@flash_wind:
; Line 5449
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_flash_window ENDP
; Function compile flags: /Odtp /RTCsu
_fi$91460 = -24					; size = 20
_dwFlags$ = 8						; size = 4
_uCount$ = 12						; size = 4
_dwTimeout$ = 16					; size = 4
_flash_window_ex PROC
; Line 5375
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 5376
	cmp	DWORD PTR _p_FlashWindowEx, 0
	je	SHORT $LN2@flash_wind@2
; Line 5378
	mov	DWORD PTR _fi$91460[ebp], 20		; 00000014H
; Line 5379
	mov	eax, DWORD PTR _hwnd
	mov	DWORD PTR _fi$91460[ebp+4], eax
; Line 5380
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	mov	DWORD PTR _fi$91460[ebp+8], ecx
; Line 5381
	mov	edx, DWORD PTR _uCount$[ebp]
	mov	DWORD PTR _fi$91460[ebp+12], edx
; Line 5382
	mov	eax, DWORD PTR _dwTimeout$[ebp]
	mov	DWORD PTR _fi$91460[ebp+16], eax
; Line 5383
	mov	esi, esp
	lea	ecx, DWORD PTR _fi$91460[ebp]
	push	ecx
	call	DWORD PTR _p_FlashWindowEx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@flash_wind@2
; Line 5385
	jmp	SHORT $LN3@flash_wind@2
$LN2@flash_wind@2:
; Line 5386
	xor	eax, eax
$LN3@flash_wind@2:
; Line 5387
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@flash_wind@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@flash_wind@2:
	DD	1
	DD	$LN6@flash_wind@2
$LN6@flash_wind@2:
	DD	-24					; ffffffe8H
	DD	20					; 00000014H
	DD	$LN5@flash_wind@2
$LN5@flash_wind@2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
_flash_window_ex ENDP
; Function compile flags: /Odtp /RTCsu
_ctx$ = 8						; size = 4
_now$ = 12						; size = 4
_flash_window_timer PROC
; Line 5398
	push	ebp
	mov	ebp, esp
; Line 5399
	cmp	DWORD PTR _flashing, 0
	je	SHORT $LN2@flash_wind@3
	mov	eax, DWORD PTR _now$[ebp]
	cmp	eax, DWORD PTR _next_flash
	jne	SHORT $LN2@flash_wind@3
; Line 5400
	push	1
	call	_flash_window
	add	esp, 4
$LN2@flash_wind@3:
; Line 5402
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_flash_window_timer ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_do_beep
EXTRN	__imp__Beep@8:PROC
EXTRN	__imp__PlaySoundA@12:PROC
EXTRN	_conf_get_filename:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_beepdiff$91513 = -216					; size = 4
_otherbuf$91506 = -208					; size = 100
_buf$91505 = -100					; size = 84
_bell_wavefile$91502 = -12				; size = 4
_beepdiff$91498 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_frontend$ = 8						; size = 4
_mode$ = 12						; size = 4
_do_beep PROC
; Line 5455
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5456
	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN11@do_beep
; Line 5466
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR ?lastbeep@?2??do_beep@@9@9
	mov	DWORD PTR _beepdiff$91498[ebp], eax
; Line 5467
	js	SHORT $LN10@do_beep
	cmp	DWORD PTR _beepdiff$91498[ebp], 50	; 00000032H
	jge	SHORT $LN10@do_beep
; Line 5468
	jmp	$LN12@do_beep
$LN10@do_beep:
; Line 5469
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__MessageBeep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5474
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?lastbeep@?2??do_beep@@9@9, eax
	jmp	$LN9@do_beep
$LN11@do_beep:
; Line 5475
	cmp	DWORD PTR _mode$[ebp], 3
	jne	$LN8@do_beep
; Line 5476
	push	103					; 00000067H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_filename
	add	esp, 8
	mov	DWORD PTR _bell_wavefile$91502[ebp], eax
; Line 5478
	mov	esi, esp
	push	131073					; 00020001H
	push	0
	mov	ecx, DWORD PTR _bell_wavefile$91502[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__PlaySoundA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@do_beep
; Line 5482
	mov	eax, DWORD PTR _bell_wavefile$91502[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG91507
	lea	edx, DWORD PTR _buf$91505[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 5483
	mov	eax, DWORD PTR _appname
	push	eax
	push	OFFSET $SG91508
	lea	ecx, DWORD PTR _otherbuf$91506[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 5485
	mov	esi, esp
	push	48					; 00000030H
	lea	edx, DWORD PTR _otherbuf$91506[ebp]
	push	edx
	lea	eax, DWORD PTR _buf$91505[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5486
	push	1
	push	97					; 00000061H
	mov	edx, DWORD PTR _conf
	push	edx
	call	_conf_set_int
	add	esp, 12					; 0000000cH
$LN7@do_beep:
; Line 5487
	jmp	SHORT $LN9@do_beep
$LN8@do_beep:
; Line 5488
	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN9@do_beep
; Line 5492
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR ?lastbeep@?5??do_beep@@9@9
	mov	DWORD PTR _beepdiff$91513[ebp], eax
; Line 5493
	js	SHORT $LN4@do_beep
	cmp	DWORD PTR _beepdiff$91513[ebp], 50	; 00000032H
	jge	SHORT $LN4@do_beep
; Line 5494
	jmp	SHORT $LN12@do_beep
$LN4@do_beep:
; Line 5500
	cmp	DWORD PTR _osVersion+16, 2
	jne	SHORT $LN3@do_beep
; Line 5501
	mov	esi, esp
	push	100					; 00000064H
	push	800					; 00000320H
	call	DWORD PTR __imp__Beep@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5502
	jmp	SHORT $LN2@do_beep
$LN3@do_beep:
; Line 5503
	mov	esi, esp
	push	-1
	call	DWORD PTR __imp__MessageBeep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@do_beep:
; Line 5504
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?lastbeep@?5??do_beep@@9@9, eax
$LN9@do_beep:
; Line 5507
	mov	eax, DWORD PTR _term
	cmp	DWORD PTR [eax+308], 0
	jne	SHORT $LN12@do_beep
; Line 5508
	push	2
	call	_flash_window
	add	esp, 4
$LN12@do_beep:
; Line 5510
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@do_beep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@do_beep:
	DD	2
	DD	$LN16@do_beep
$LN16@do_beep:
	DD	-100					; ffffff9cH
	DD	84					; 00000054H
	DD	$LN14@do_beep
	DD	-208					; ffffff30H
	DD	100					; 00000064H
	DD	$LN15@do_beep
$LN15@do_beep:
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@do_beep:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_do_beep ENDP
_TEXT	ENDS
PUBLIC	_set_iconic
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_iconic$ = 12						; size = 4
_set_iconic PROC
; Line 5517
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5518
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@set_iconic
; Line 5519
	cmp	DWORD PTR _iconic$[ebp], 0
	jne	SHORT $LN3@set_iconic
; Line 5520
	mov	esi, esp
	push	9
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@set_iconic:
; Line 5521
	jmp	SHORT $LN5@set_iconic
$LN4@set_iconic:
; Line 5522
	cmp	DWORD PTR _iconic$[ebp], 0
	je	SHORT $LN5@set_iconic
; Line 5523
	mov	esi, esp
	push	6
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@set_iconic:
; Line 5525
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_set_iconic ENDP
_TEXT	ENDS
PUBLIC	_move_window
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_resize_action$ = -4					; size = 4
_frontend$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_move_window PROC
; Line 5531
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5532
	push	106					; 0000006aH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	mov	DWORD PTR _resize_action$[ebp], eax
; Line 5535
	cmp	DWORD PTR _resize_action$[ebp], 1
	je	SHORT $LN1@move_windo
	cmp	DWORD PTR _resize_action$[ebp], 2
	je	SHORT $LN1@move_windo
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@move_windo
$LN1@move_windo:
; Line 5536
	jmp	SHORT $LN3@move_windo
$LN2@move_windo:
; Line 5538
	mov	esi, esp
	push	5
	push	0
	push	0
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@move_windo:
; Line 5539
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_move_window ENDP
_TEXT	ENDS
PUBLIC	_set_zorder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_top$ = 12						; size = 4
_set_zorder PROC
; Line 5546
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5547
	push	83					; 00000053H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@set_zorder
; Line 5548
	jmp	SHORT $LN2@set_zorder
$LN1@set_zorder:
; Line 5550
	mov	esi, esp
	push	3
	push	0
	push	0
	push	0
	push	0
	xor	ecx, ecx
	cmp	DWORD PTR _top$[ebp], 0
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@set_zorder:
; Line 5551
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_set_zorder ENDP
_TEXT	ENDS
PUBLIC	_refresh_window
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_refresh_window PROC
; Line 5557
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5558
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5559
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_refresh_window ENDP
_TEXT	ENDS
PUBLIC	_set_zoomed
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_zoomed$ = 12						; size = 4
_set_zoomed PROC
; Line 5566
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5567
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@set_zoomed
; Line 5568
	cmp	DWORD PTR _zoomed$[ebp], 0
	jne	SHORT $LN3@set_zoomed
; Line 5569
	mov	esi, esp
	push	9
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@set_zoomed:
; Line 5570
	jmp	SHORT $LN5@set_zoomed
$LN4@set_zoomed:
; Line 5571
	cmp	DWORD PTR _zoomed$[ebp], 0
	je	SHORT $LN5@set_zoomed
; Line 5572
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@set_zoomed:
; Line 5574
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_set_zoomed ENDP
_TEXT	ENDS
PUBLIC	_is_iconic
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_is_iconic PROC
; Line 5580
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5581
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsIconic@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5582
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_is_iconic ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_get_window_pos
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_frontend$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_get_window_pos PROC
; Line 5588
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5590
	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5591
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
; Line 5592
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [ecx], edx
; Line 5593
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@get_window
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@get_window:
	DD	1
	DD	$LN4@get_window
$LN4@get_window:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@get_window
$LN3@get_window:
	DB	114					; 00000072H
	DB	0
_get_window_pos ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_get_window_pixels
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_frontend$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_get_window_pixels PROC
; Line 5599
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5601
	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5602
	mov	edx, DWORD PTR _r$[ebp+8]
	sub	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], edx
; Line 5603
	mov	ecx, DWORD PTR _r$[ebp+12]
	sub	ecx, DWORD PTR _r$[ebp+4]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 5604
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@get_window@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@get_window@2:
	DD	1
	DD	$LN4@get_window@2
$LN4@get_window@2:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@get_window@2
$LN3@get_window@2:
	DB	114					; 00000072H
	DB	0
_get_window_pixels ENDP
_TEXT	ENDS
PUBLIC	_get_window_title
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -4						; size = 4
_frontend$ = 8						; size = 4
_icon$ = 12						; size = 4
_get_window_title PROC
; Line 5610
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5611
	cmp	DWORD PTR _icon$[ebp], 0
	je	SHORT $LN3@get_window@3
	mov	eax, DWORD PTR _icon_name
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@get_window@3
$LN3@get_window@3:
	mov	ecx, DWORD PTR _window_name
	mov	DWORD PTR tv65[ebp], ecx
$LN4@get_window@3:
	mov	eax, DWORD PTR tv65[ebp]
; Line 5612
	mov	esp, ebp
	pop	ebp
	ret	0
_get_window_title ENDP
; Function compile flags: /Odtp /RTCsu
_is_full_screen PROC
; Line 5618
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5619
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@is_full_sc
; Line 5620
	xor	eax, eax
	jmp	SHORT $LN3@is_full_sc
$LN2@is_full_sc:
; Line 5621
	mov	esi, esp
	push	-16					; fffffff0H
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__GetWindowLongA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 12582912				; 00c00000H
	je	SHORT $LN1@is_full_sc
; Line 5622
	xor	eax, eax
	jmp	SHORT $LN3@is_full_sc
$LN1@is_full_sc:
; Line 5623
	mov	eax, 1
$LN3@is_full_sc:
; Line 5624
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_is_full_screen ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mi$ = -52						; size = 40
_mon$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ss$ = 8						; size = 4
_get_fullscreen_rect PROC
; Line 5630
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5634
	push	2
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	_xMonitorFromWindow@8
	mov	DWORD PTR _mon$[ebp], eax
; Line 5635
	mov	DWORD PTR _mi$[ebp], 40			; 00000028H
; Line 5636
	lea	ecx, DWORD PTR _mi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mon$[ebp]
	push	edx
	call	_xGetMonitorInfo@8
; Line 5639
	mov	eax, DWORD PTR _ss$[ebp]
	mov	ecx, DWORD PTR _mi$[ebp+4]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _mi$[ebp+8]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _mi$[ebp+12]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _mi$[ebp+16]
	mov	DWORD PTR [eax+12], edx
; Line 5640
	mov	eax, 1
; Line 5649
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@get_fullsc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@get_fullsc:
	DD	1
	DD	$LN4@get_fullsc
$LN4@get_fullsc:
	DD	-52					; ffffffccH
	DD	40					; 00000028H
	DD	$LN3@get_fullsc
$LN3@get_fullsc:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
_get_fullscreen_rect ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__CheckMenuItem@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$91601 = -36						; size = 4
_ss$ = -28						; size = 16
_style$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_make_full_screen PROC
; Line 5657
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5661
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN9@make_full_
	push	5661					; 0000161dH
	push	OFFSET $SG91595
	push	OFFSET $SG91596
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@make_full_:
; Line 5663
	call	_is_full_screen
	test	eax, eax
	je	SHORT $LN6@make_full_
; Line 5664
	jmp	$LN7@make_full_
$LN6@make_full_:
; Line 5667
	mov	esi, esp
	push	-16					; fffffff0H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__GetWindowLongA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _style$[ebp], eax
; Line 5668
	mov	eax, DWORD PTR _style$[ebp]
	and	eax, -12845057				; ff3bffffH
	mov	DWORD PTR _style$[ebp], eax
; Line 5669
	push	105					; 00000069H
	mov	ecx, DWORD PTR _conf
	push	ecx
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@make_full_
; Line 5670
	mov	edx, DWORD PTR _style$[ebp]
	or	edx, 2097152				; 00200000H
	mov	DWORD PTR _style$[ebp], edx
; Line 5671
	jmp	SHORT $LN4@make_full_
$LN5@make_full_:
; Line 5672
	mov	eax, DWORD PTR _style$[ebp]
	and	eax, -2097153				; ffdfffffH
	mov	DWORD PTR _style$[ebp], eax
$LN4@make_full_:
; Line 5673
	mov	esi, esp
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	push	-16					; fffffff0H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5676
	lea	eax, DWORD PTR _ss$[ebp]
	push	eax
	call	_get_fullscreen_rect
	add	esp, 4
; Line 5680
	mov	esi, esp
	push	32					; 00000020H
	mov	ecx, DWORD PTR _ss$[ebp+12]
	sub	ecx, DWORD PTR _ss$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ss$[ebp+8]
	sub	edx, DWORD PTR _ss$[ebp]
	push	edx
	mov	eax, DWORD PTR _ss$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5684
	push	0
	call	_reset_window
	add	esp, 4
; Line 5689
	mov	DWORD PTR _i$91601[ebp], 0
	jmp	SHORT $LN3@make_full_
$LN2@make_full_:
	mov	eax, DWORD PTR _i$91601[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91601[ebp], eax
$LN3@make_full_:
	cmp	DWORD PTR _i$91601[ebp], 2
	jae	SHORT $LN7@make_full_
; Line 5690
	mov	esi, esp
	push	8
	push	384					; 00000180H
	mov	ecx, DWORD PTR _i$91601[ebp]
	mov	edx, DWORD PTR _popup_menus[ecx*4]
	push	edx
	call	DWORD PTR __imp__CheckMenuItem@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@make_full_
$LN7@make_full_:
; Line 5692
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@make_full_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@make_full_:
	DD	1
	DD	$LN11@make_full_
$LN11@make_full_:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN10@make_full_
$LN10@make_full_:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_make_full_screen ENDP
; Function compile flags: /Odtp /RTCsu
_i$91614 = -12						; size = 4
_style$ = -8						; size = 4
_oldstyle$ = -4						; size = 4
_clear_full_screen PROC
; Line 5698
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5702
	mov	esi, esp
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__GetWindowLongA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _oldstyle$[ebp], eax
	mov	ecx, DWORD PTR _oldstyle$[ebp]
	mov	DWORD PTR _style$[ebp], ecx
; Line 5703
	mov	edx, DWORD PTR _style$[ebp]
	or	edx, 12582912				; 00c00000H
	mov	DWORD PTR _style$[ebp], edx
; Line 5704
	push	106					; 0000006aH
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN8@clear_full
; Line 5705
	mov	ecx, DWORD PTR _style$[ebp]
	and	ecx, -262145				; fffbffffH
	mov	DWORD PTR _style$[ebp], ecx
; Line 5706
	jmp	SHORT $LN7@clear_full
$LN8@clear_full:
; Line 5707
	mov	edx, DWORD PTR _style$[ebp]
	or	edx, 262144				; 00040000H
	mov	DWORD PTR _style$[ebp], edx
$LN7@clear_full:
; Line 5708
	push	104					; 00000068H
	mov	eax, DWORD PTR _conf
	push	eax
	call	_conf_get_int
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@clear_full
; Line 5709
	mov	ecx, DWORD PTR _style$[ebp]
	or	ecx, 2097152				; 00200000H
	mov	DWORD PTR _style$[ebp], ecx
; Line 5710
	jmp	SHORT $LN5@clear_full
$LN6@clear_full:
; Line 5711
	mov	edx, DWORD PTR _style$[ebp]
	and	edx, -2097153				; ffdfffffH
	mov	DWORD PTR _style$[ebp], edx
$LN5@clear_full:
; Line 5712
	mov	eax, DWORD PTR _style$[ebp]
	cmp	eax, DWORD PTR _oldstyle$[ebp]
	je	SHORT $LN4@clear_full
; Line 5713
	mov	esi, esp
	mov	ecx, DWORD PTR _style$[ebp]
	push	ecx
	push	-16					; fffffff0H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SetWindowLongA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5716
	mov	esi, esp
	push	39					; 00000027H
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@clear_full:
; Line 5722
	mov	DWORD PTR _i$91614[ebp], 0
	jmp	SHORT $LN3@clear_full
$LN2@clear_full:
	mov	ecx, DWORD PTR _i$91614[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$91614[ebp], ecx
$LN3@clear_full:
	cmp	DWORD PTR _i$91614[ebp], 2
	jae	SHORT $LN9@clear_full
; Line 5723
	mov	esi, esp
	push	0
	push	384					; 00000180H
	mov	edx, DWORD PTR _i$91614[ebp]
	mov	eax, DWORD PTR _popup_menus[edx*4]
	push	eax
	call	DWORD PTR __imp__CheckMenuItem@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@clear_full
$LN9@clear_full:
; Line 5725
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_clear_full_screen ENDP
; Function compile flags: /Odtp /RTCsu
_flip_full_screen PROC
; Line 5731
	push	ebp
	mov	ebp, esp
	push	esi
; Line 5732
	call	_is_full_screen
	test	eax, eax
	je	SHORT $LN4@flip_full_
; Line 5733
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@flip_full_
$LN4@flip_full_:
; Line 5734
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd
	push	ecx
	call	DWORD PTR __imp__IsZoomed@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@flip_full_
; Line 5735
	call	_make_full_screen
; Line 5736
	jmp	SHORT $LN5@flip_full_
$LN2@flip_full_:
; Line 5737
	mov	esi, esp
	push	0
	push	0
	push	32771					; 00008003H
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5738
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@flip_full_:
; Line 5740
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_flip_full_screen ENDP
_TEXT	ENDS
PUBLIC	_frontend_keypress
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_frontend_keypress PROC
; Line 5743
	push	ebp
	mov	ebp, esp
; Line 5751
	pop	ebp
	ret	0
_frontend_keypress ENDP
_TEXT	ENDS
PUBLIC	_from_backend
EXTRN	_term_data:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_is_stderr$ = 12					; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_from_backend PROC
; Line 5754
	push	ebp
	mov	ebp, esp
; Line 5755
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is_stderr$[ebp]
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_data
	add	esp, 16					; 00000010H
; Line 5756
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_from_backend ENDP
_TEXT	ENDS
PUBLIC	_from_backend_untrusted
EXTRN	_term_data_untrusted:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_from_backend_untrusted PROC
; Line 5759
	push	ebp
	mov	ebp, esp
; Line 5760
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _term
	push	edx
	call	_term_data_untrusted
	add	esp, 12					; 0000000cH
; Line 5761
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_from_backend_untrusted ENDP
_TEXT	ENDS
PUBLIC	_from_backend_eof
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_frontend$ = 8						; size = 4
_from_backend_eof PROC
; Line 5764
	push	ebp
	mov	ebp, esp
; Line 5765
	mov	eax, 1
; Line 5766
	pop	ebp
	ret	0
_from_backend_eof ENDP
_TEXT	ENDS
PUBLIC	_get_userpass_input
EXTRN	_term_get_userpass_input:PROC
EXTRN	_cmdline_get_passwd_input:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_p$ = 8							; size = 4
_in$ = 12						; size = 4
_inlen$ = 16						; size = 4
_get_userpass_input PROC
; Line 5769
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5771
	mov	eax, DWORD PTR _inlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_cmdline_get_passwd_input
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
; Line 5772
	cmp	DWORD PTR _ret$[ebp], -1
	jne	SHORT $LN1@get_userpa
; Line 5773
	mov	eax, DWORD PTR _inlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _term
	push	eax
	call	_term_get_userpass_input
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
$LN1@get_userpa:
; Line 5774
	mov	eax, DWORD PTR _ret$[ebp]
; Line 5775
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_userpass_input ENDP
_TEXT	ENDS
PUBLIC	_agent_schedule_callback
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -4						; size = 4
_callback$ = 8						; size = 4
_callback_ctx$ = 12					; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_agent_schedule_callback PROC
; Line 5779
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5780
	push	16					; 00000010H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 5781
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 5782
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _callback_ctx$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 5783
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 5784
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 5785
	mov	esi, esp
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	push	0
	push	32772					; 00008004H
	mov	eax, DWORD PTR _hwnd
	push	eax
	call	DWORD PTR __imp__PostMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5786
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_agent_schedule_callback ENDP
_TEXT	ENDS
END
