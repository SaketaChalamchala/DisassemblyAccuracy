; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\misc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?base64_chars@?1??base64_encode_atom@@9@9 DB 'ABCDEFGHIJKLMNOPQRSTUVWXYZa'
	DB	'bcdefghijklmnopqrstuvwxyz0123456789+/', 00H	; `base64_encode_atom'::`2'::base64_chars
CONST	ENDS
_DATA	SEGMENT
$SG85650 DB	'%.*s', 00H
	ORG $+3
$SG85911 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85912 DB	'c', 00H, 'h', 00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, 00H, 00H
$SG85919 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85920 DB	'c', 00H, 'h', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG85943 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85944 DB	'c', 00H, 'h', 00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, 00H, 00H
$SG85951 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H
$SG85952 DB	't', 00H, 'm', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG85966 DB	'Out of memory!', 00H
	ORG $+1
$SG85982 DB	'Out of memory!', 00H
	ORG $+1
$SG86007 DB	' ', 09H, 00H
	ORG $+1
$SG86008 DB	' ', 09H, 00H
	ORG $+1
$SG86011 DB	'0123456789abcdefABCDEF:', 00H
	ORG $+4
$SG86031 DB	'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrst'
	DB	'uvwxyz+/=', 00H
_DATA	ENDS
PUBLIC	_parse_blocksize
EXTRN	_isspace:PROC
EXTRN	_strtoul:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\misc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv78 = -20						; size = 4
_r$ = -16						; size = 4
_suf$ = -8						; size = 4
_bs$ = 8						; size = 4
_parse_blocksize PROC
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 25
	push	10					; 0000000aH
	lea	eax, DWORD PTR _suf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bs$[ebp]
	push	ecx
	call	_strtoul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
; Line 26
	mov	edx, DWORD PTR _suf$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN9@parse_bloc
$LN8@parse_bloc:
; Line 27
	mov	ecx, DWORD PTR _suf$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN7@parse_bloc
	mov	eax, DWORD PTR _suf$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@parse_bloc
	mov	edx, DWORD PTR _suf$[ebp]
	add	edx, 1
	mov	DWORD PTR _suf$[ebp], edx
	jmp	SHORT $LN8@parse_bloc
$LN7@parse_bloc:
; Line 28
	mov	eax, DWORD PTR _suf$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	sub	edx, 71					; 00000047H
	mov	DWORD PTR tv78[ebp], edx
	cmp	DWORD PTR tv78[ebp], 38			; 00000026H
	ja	SHORT $LN9@parse_bloc
	mov	eax, DWORD PTR tv78[ebp]
	movzx	ecx, BYTE PTR $LN12@parse_bloc[eax]
	jmp	DWORD PTR $LN16@parse_bloc[ecx*4]
$LN4@parse_bloc:
; Line 30
	mov	edx, DWORD PTR _r$[ebp]
	shl	edx, 10					; 0000000aH
	mov	DWORD PTR _r$[ebp], edx
; Line 31
	jmp	SHORT $LN9@parse_bloc
$LN3@parse_bloc:
; Line 33
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 20					; 00000014H
	mov	DWORD PTR _r$[ebp], eax
; Line 34
	jmp	SHORT $LN9@parse_bloc
$LN2@parse_bloc:
; Line 36
	mov	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 30					; 0000001eH
	mov	DWORD PTR _r$[ebp], ecx
$LN9@parse_bloc:
; Line 43
	mov	eax, DWORD PTR _r$[ebp]
; Line 44
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@parse_bloc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@parse_bloc:
	DD	1
	DD	$LN14@parse_bloc
$LN14@parse_bloc:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@parse_bloc
$LN13@parse_bloc:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN16@parse_bloc:
	DD	$LN2@parse_bloc
	DD	$LN4@parse_bloc
	DD	$LN3@parse_bloc
	DD	$LN9@parse_bloc
$LN12@parse_bloc:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	2
_parse_blocksize ENDP
_TEXT	ENDS
PUBLIC	_ctrlparse
EXTRN	_strtol:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -1						; size = 1
_s$ = 8							; size = 4
_next$ = 12						; size = 4
_ctrlparse PROC
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 61
	mov	BYTE PTR _c$[ebp], 0
; Line 62
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 94					; 0000005eH
	je	SHORT $LN16@ctrlparse
; Line 63
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], 0
; Line 64
	jmp	$LN15@ctrlparse
$LN16@ctrlparse:
; Line 65
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 66
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN14@ctrlparse
; Line 67
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	$LN15@ctrlparse
$LN14@ctrlparse:
; Line 68
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 60					; 0000003cH
	jne	SHORT $LN12@ctrlparse
; Line 69
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 70
	push	0
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_strtol
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _c$[ebp], al
; Line 71
	mov	eax, DWORD PTR _next$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _s$[ebp]
	je	SHORT $LN10@ctrlparse
	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN11@ctrlparse
$LN10@ctrlparse:
; Line 72
	mov	BYTE PTR _c$[ebp], 0
; Line 73
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], 0
; Line 74
	jmp	SHORT $LN9@ctrlparse
$LN11@ctrlparse:
; Line 75
	mov	eax, DWORD PTR _next$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], ecx
$LN9@ctrlparse:
; Line 76
	jmp	$LN15@ctrlparse
$LN12@ctrlparse:
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN7@ctrlparse
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN7@ctrlparse
; Line 77
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	sub	edx, 96					; 00000060H
	mov	BYTE PTR _c$[ebp], dl
; Line 78
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN15@ctrlparse
$LN7@ctrlparse:
; Line 79
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 64					; 00000040H
	jl	SHORT $LN3@ctrlparse
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 95					; 0000005fH
	jle	SHORT $LN4@ctrlparse
$LN3@ctrlparse:
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 63					; 0000003fH
	je	SHORT $LN4@ctrlparse
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	and	eax, 128				; 00000080H
	je	SHORT $LN5@ctrlparse
$LN4@ctrlparse:
; Line 80
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	xor	edx, 64					; 00000040H
	mov	BYTE PTR _c$[ebp], dl
; Line 81
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN15@ctrlparse
$LN5@ctrlparse:
; Line 82
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 126				; 0000007eH
	jne	SHORT $LN15@ctrlparse
; Line 83
	mov	BYTE PTR _c$[ebp], 94			; 0000005eH
; Line 84
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], ecx
$LN15@ctrlparse:
; Line 87
	mov	al, BYTE PTR _c$[ebp]
; Line 88
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrlparse ENDP
_TEXT	ENDS
PUBLIC	_host_strcspn
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_answer$ = -4						; size = 4
_s$ = 8							; size = 4
_set$ = 12						; size = 4
_host_strcspn PROC
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 125
	push	1
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_host_strchr_internal
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _answer$[ebp], eax
; Line 126
	cmp	DWORD PTR _answer$[ebp], 0
	je	SHORT $LN2@host_strcs
; Line 127
	mov	eax, DWORD PTR _answer$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	jmp	SHORT $LN3@host_strcs
; Line 128
	jmp	SHORT $LN3@host_strcs
$LN2@host_strcs:
; Line 129
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
$LN3@host_strcs:
; Line 130
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_host_strcspn ENDP
_TEXT	ENDS
EXTRN	_strchr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_brackets$ = -4						; size = 4
_s$ = 8							; size = 4
_set$ = 12						; size = 4
_first$ = 16						; size = 4
_host_strchr_internal PROC
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 101
	mov	DWORD PTR _brackets$[ebp], 0
; Line 102
	mov	DWORD PTR _ret$[ebp], 0
$LN11@host_strch:
; Line 104
	mov	eax, 1
	test	eax, eax
	je	$LN12@host_strch
; Line 105
	mov	ecx, DWORD PTR _s$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN9@host_strch
; Line 106
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN12@host_strch
$LN9@host_strch:
; Line 108
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN8@host_strch
; Line 109
	mov	edx, DWORD PTR _brackets$[ebp]
	add	edx, 1
	mov	DWORD PTR _brackets$[ebp], edx
	jmp	SHORT $LN7@host_strch
$LN8@host_strch:
; Line 110
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN6@host_strch
	cmp	DWORD PTR _brackets$[ebp], 0
	jle	SHORT $LN6@host_strch
; Line 111
	mov	edx, DWORD PTR _brackets$[ebp]
	sub	edx, 1
	mov	DWORD PTR _brackets$[ebp], edx
	jmp	SHORT $LN7@host_strch
$LN6@host_strch:
; Line 112
	cmp	DWORD PTR _brackets$[ebp], 0
	je	SHORT $LN4@host_strch
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN4@host_strch
	jmp	SHORT $LN7@host_strch
$LN4@host_strch:
; Line 114
	mov	edx, DWORD PTR _s$[ebp]
	movsx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@host_strch
; Line 115
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _ret$[ebp], edx
; Line 116
	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN7@host_strch
; Line 117
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN12@host_strch
$LN7@host_strch:
; Line 120
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 121
	jmp	$LN11@host_strch
$LN12@host_strch:
; Line 122
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_host_strchr_internal ENDP
_TEXT	ENDS
PUBLIC	_host_strchr
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_set$ = -8						; size = 2
_s$ = 8							; size = 4
_c$ = 12						; size = 4
_host_strchr PROC
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 134
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _set$[ebp], al
; Line 135
	mov	BYTE PTR _set$[ebp+1], 0
; Line 136
	push	1
	lea	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_host_strchr_internal
	add	esp, 12					; 0000000cH
; Line 137
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@host_strch@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@host_strch@2:
	DD	1
	DD	$LN4@host_strch@2
$LN4@host_strch@2:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN3@host_strch@2
$LN3@host_strch@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_host_strchr ENDP
_TEXT	ENDS
PUBLIC	_host_strrchr
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_set$ = -8						; size = 2
_s$ = 8							; size = 4
_c$ = 12						; size = 4
_host_strrchr PROC
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 141
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _set$[ebp], al
; Line 142
	mov	BYTE PTR _set$[ebp+1], 0
; Line 143
	push	0
	lea	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_host_strchr_internal
	add	esp, 12					; 0000000cH
; Line 144
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@host_strrc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@host_strrc:
	DD	1
	DD	$LN4@host_strrc
$LN4@host_strrc:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN3@host_strrc
$LN3@host_strrc:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_host_strrchr ENDP
_TEXT	ENDS
PUBLIC	_dupstr
PUBLIC	_dupprintf
PUBLIC	_host_strduptrim
EXTRN	_isxdigit:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_colons$85639 = -8					; size = 4
_p$85638 = -4						; size = 4
_s$ = 8							; size = 4
_host_strduptrim PROC
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 189
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 91					; 0000005bH
	jne	$LN8@host_strdu
; Line 190
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$85638[ebp], edx
; Line 191
	mov	DWORD PTR _colons$85639[ebp], 0
$LN7@host_strdu:
; Line 192
	mov	eax, DWORD PTR _p$85638[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@host_strdu
	mov	edx, DWORD PTR _p$85638[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN6@host_strdu
; Line 193
	mov	ecx, DWORD PTR _p$85638[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_isxdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@host_strdu
	jmp	SHORT $LN4@host_strdu
$LN5@host_strdu:
; Line 195
	mov	eax, DWORD PTR _p$85638[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN3@host_strdu
; Line 196
	mov	edx, DWORD PTR _colons$85639[ebp]
	add	edx, 1
	mov	DWORD PTR _colons$85639[ebp], edx
; Line 197
	jmp	SHORT $LN4@host_strdu
$LN3@host_strdu:
; Line 198
	jmp	SHORT $LN6@host_strdu
$LN4@host_strdu:
; Line 199
	mov	eax, DWORD PTR _p$85638[ebp]
	add	eax, 1
	mov	DWORD PTR _p$85638[ebp], eax
; Line 200
	jmp	SHORT $LN7@host_strdu
$LN6@host_strdu:
; Line 201
	mov	ecx, DWORD PTR _p$85638[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 93					; 0000005dH
	jne	SHORT $LN8@host_strdu
	mov	eax, DWORD PTR _p$85638[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN8@host_strdu
	cmp	DWORD PTR _colons$85639[ebp], 1
	jle	SHORT $LN8@host_strdu
; Line 207
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _p$85638[ebp]
	sub	ecx, eax
	push	ecx
	push	OFFSET $SG85650
	call	_dupprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN9@host_strdu
$LN8@host_strdu:
; Line 214
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
$LN9@host_strdu:
; Line 215
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_host_strduptrim ENDP
_TEXT	ENDS
PUBLIC	_safemalloc
PUBLIC	_new_prompts
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_frontend$ = 8						; size = 4
_new_prompts PROC
; Line 218
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 219
	push	36					; 00000024H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 220
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 221
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 222
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _frontend$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 223
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 224
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], 1
; Line 225
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 226
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 227
	mov	eax, DWORD PTR _p$[ebp]
; Line 228
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_new_prompts ENDP
_TEXT	ENDS
PUBLIC	_saferealloc
PUBLIC	_add_prompt
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pr$ = -4						; size = 4
_p$ = 8							; size = 4
_promptstr$ = 12					; size = 4
_echo$ = 16						; size = 4
_add_prompt PROC
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 231
	push	16					; 00000010H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _pr$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _pr$[ebp]
	mov	ecx, DWORD PTR _promptstr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 233
	mov	edx, DWORD PTR _pr$[ebp]
	mov	eax, DWORD PTR _echo$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 234
	mov	ecx, DWORD PTR _pr$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 235
	mov	edx, DWORD PTR _pr$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 236
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 237
	push	4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 238
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _pr$[ebp]
	mov	DWORD PTR [edx+eax*4-4], ecx
; Line 239
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_add_prompt ENDP
_TEXT	ENDS
PUBLIC	_safefree
PUBLIC	_prompt_ensure_result_size
EXTRN	_smemclr:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newbuf$85681 = -4					; size = 4
_pr$ = 8						; size = 4
_newlen$ = 12						; size = 4
_prompt_ensure_result_size PROC
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 242
	mov	eax, DWORD PTR _pr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _newlen$[ebp]
	jge	SHORT $LN2@prompt_ens
; Line 244
	mov	eax, DWORD PTR _newlen$[ebp]
	imul	eax, 5
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, 512				; 00000200H
	mov	DWORD PTR _newlen$[ebp], eax
; Line 252
	push	1
	mov	edx, DWORD PTR _newlen$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _newbuf$85681[ebp], eax
; Line 253
	mov	eax, DWORD PTR _pr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _newbuf$85681[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 254
	mov	edx, DWORD PTR _pr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 255
	mov	eax, DWORD PTR _pr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 256
	mov	edx, DWORD PTR _pr$[ebp]
	mov	eax, DWORD PTR _newbuf$85681[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 257
	mov	ecx, DWORD PTR _pr$[ebp]
	mov	edx, DWORD PTR _newlen$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN2@prompt_ens:
; Line 259
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_prompt_ensure_result_size ENDP
_TEXT	ENDS
PUBLIC	_prompt_set_result
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pr$ = 8						; size = 4
_newstr$ = 12						; size = 4
_prompt_set_result PROC
; Line 261
	push	ebp
	mov	ebp, esp
; Line 262
	mov	eax, DWORD PTR _newstr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pr$[ebp]
	push	ecx
	call	_prompt_ensure_result_size
	add	esp, 8
; Line 263
	mov	edx, DWORD PTR _newstr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 264
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_prompt_set_result ENDP
_TEXT	ENDS
PUBLIC	_free_prompts
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pr$85696 = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_free_prompts PROC
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 268
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@free_promp
$LN2@free_promp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@free_promp:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jae	SHORT $LN1@free_promp
; Line 269
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pr$85696[ebp], eax
; Line 270
	mov	ecx, DWORD PTR _pr$85696[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pr$85696[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 271
	mov	edx, DWORD PTR _pr$85696[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_safefree
	add	esp, 4
; Line 272
	mov	ecx, DWORD PTR _pr$85696[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_safefree
	add	esp, 4
; Line 273
	mov	eax, DWORD PTR _pr$85696[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 274
	jmp	SHORT $LN2@free_promp
$LN1@free_promp:
; Line 275
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_safefree
	add	esp, 4
; Line 276
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 277
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_safefree
	add	esp, 4
; Line 278
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 279
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_free_prompts ENDP
; Function compile flags: /Odtp /RTCsu
_len$85703 = -8					; size = 4
_p$ = -4						; size = 4
_s$ = 8							; size = 4
_dupstr	PROC
; Line 286
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 287
	mov	DWORD PTR _p$[ebp], 0
; Line 288
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN1@dupstr
; Line 289
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$85703[ebp], eax
; Line 290
	push	1
	mov	ecx, DWORD PTR _len$85703[ebp]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 291
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN1@dupstr:
; Line 293
	mov	eax, DWORD PTR _p$[ebp]
; Line 294
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupstr	ENDP
_TEXT	ENDS
PUBLIC	_dupcat
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ap$ = -20						; size = 4
_sn$ = -16						; size = 4
_q$ = -12						; size = 4
_p$ = -8						; size = 4
_len$ = -4						; size = 4
_s1$ = 8						; size = 4
_dupcat	PROC
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 303
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 304
	lea	ecx, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR _ap$[ebp], ecx
$LN6@dupcat:
; Line 305
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@dupcat
; Line 306
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _sn$[ebp], edx
; Line 307
	cmp	DWORD PTR _sn$[ebp], 0
	jne	SHORT $LN4@dupcat
; Line 308
	jmp	SHORT $LN5@dupcat
$LN4@dupcat:
; Line 309
	mov	eax, DWORD PTR _sn$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 310
	jmp	SHORT $LN6@dupcat
$LN5@dupcat:
; Line 311
	mov	DWORD PTR _ap$[ebp], 0
; Line 313
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 314
	mov	edx, DWORD PTR _s1$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 315
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 317
	lea	edx, DWORD PTR _s1$[ebp+4]
	mov	DWORD PTR _ap$[ebp], edx
$LN3@dupcat:
; Line 318
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@dupcat
; Line 319
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _sn$[ebp], eax
; Line 320
	cmp	DWORD PTR _sn$[ebp], 0
	jne	SHORT $LN1@dupcat
; Line 321
	jmp	SHORT $LN2@dupcat
$LN1@dupcat:
; Line 322
	mov	ecx, DWORD PTR _sn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 323
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 324
	jmp	SHORT $LN3@dupcat
$LN2@dupcat:
; Line 325
	mov	DWORD PTR _ap$[ebp], 0
; Line 327
	mov	eax, DWORD PTR _p$[ebp]
; Line 328
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupcat	ENDP
_TEXT	ENDS
PUBLIC	_burnstr
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_string$ = 8						; size = 4
_burnstr PROC
; Line 331
	push	ebp
	mov	ebp, esp
; Line 332
	cmp	DWORD PTR _string$[ebp], 0
	je	SHORT $LN2@burnstr
; Line 333
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 334
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN2@burnstr:
; Line 336
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_burnstr ENDP
_TEXT	ENDS
PUBLIC	_toint
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_u$ = 8							; size = 4
_toint	PROC
; Line 339
	push	ebp
	mov	ebp, esp
; Line 353
	cmp	DWORD PTR _u$[ebp], 2147483647		; 7fffffffH
	ja	SHORT $LN4@toint
; Line 354
	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN5@toint
	jmp	SHORT $LN5@toint
$LN4@toint:
; Line 355
	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jb	SHORT $LN2@toint
; Line 356
	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN5@toint
; Line 357
	jmp	SHORT $LN5@toint
$LN2@toint:
; Line 358
	mov	eax, -2147483648			; 80000000H
$LN5@toint:
; Line 359
	pop	ebp
	ret	0
_toint	ENDP
_TEXT	ENDS
PUBLIC	_dupvprintf
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ap$ = -8						; size = 4
_ret$ = -4						; size = 4
_fmt$ = 8						; size = 4
_dupprintf PROC
; Line 397
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 400
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 401
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	call	_dupvprintf
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 402
	mov	DWORD PTR _ap$[ebp], 0
; Line 403
	mov	eax, DWORD PTR _ret$[ebp]
; Line 404
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupprintf ENDP
_TEXT	ENDS
EXTRN	__vsnprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -12						; size = 4
_len$ = -8						; size = 4
_buf$ = -4						; size = 4
_fmt$ = 8						; size = 4
_ap$ = 12						; size = 4
_dupvprintf PROC
; Line 406
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 410
	push	1
	push	512					; 00000200H
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buf$[ebp], eax
; Line 411
	mov	DWORD PTR _size$[ebp], 512		; 00000200H
$LN6@dupvprintf:
; Line 413
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN7@dupvprintf
; Line 433
	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 435
	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN4@dupvprintf
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@dupvprintf
; Line 438
	mov	eax, DWORD PTR _buf$[ebp]
	jmp	SHORT $LN7@dupvprintf
	jmp	SHORT $LN3@dupvprintf
$LN4@dupvprintf:
; Line 439
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN2@dupvprintf
; Line 442
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 443
	jmp	SHORT $LN3@dupvprintf
$LN2@dupvprintf:
; Line 446
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 512				; 00000200H
	mov	DWORD PTR _size$[ebp], ecx
$LN3@dupvprintf:
; Line 448
	push	1
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax
; Line 449
	jmp	SHORT $LN6@dupvprintf
$LN7@dupvprintf:
; Line 450
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupvprintf ENDP
_TEXT	ENDS
PUBLIC	_fgetline
EXTRN	_fgets:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -12						; size = 4
_size$ = -8						; size = 4
_ret$ = -4						; size = 4
_fp$ = 8						; size = 4
_fgetline PROC
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 458
	push	1
	push	512					; 00000200H
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 459
	mov	DWORD PTR _size$[ebp], 512		; 00000200H
	mov	DWORD PTR _len$[ebp], 0
$LN4@fgetline:
; Line 460
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@fgetline
; Line 461
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 462
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN2@fgetline
; Line 463
	jmp	SHORT $LN3@fgetline
$LN2@fgetline:
; Line 464
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR _size$[ebp], eax
; Line 465
	push	1
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
; Line 466
	jmp	SHORT $LN4@fgetline
$LN3@fgetline:
; Line 467
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN1@fgetline
; Line 468
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 469
	xor	eax, eax
	jmp	SHORT $LN5@fgetline
$LN1@fgetline:
; Line 471
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 472
	mov	eax, DWORD PTR _ret$[ebp]
$LN5@fgetline:
; Line 473
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fgetline ENDP
_TEXT	ENDS
PUBLIC	_base64_encode_atom
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_word$ = -4						; size = 4
_data$ = 8						; size = 4
_n$ = 12						; size = 4
_out$ = 16						; size = 4
_base64_encode_atom PROC
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 486
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	DWORD PTR _word$[ebp], ecx
; Line 487
	cmp	DWORD PTR _n$[ebp], 1
	jle	SHORT $LN6@base64_enc
; Line 488
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	eax, DWORD PTR _word$[ebp]
	mov	DWORD PTR _word$[ebp], eax
$LN6@base64_enc:
; Line 489
	cmp	DWORD PTR _n$[ebp], 2
	jle	SHORT $LN5@base64_enc
; Line 490
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	or	edx, DWORD PTR _word$[ebp]
	mov	DWORD PTR _word$[ebp], edx
$LN5@base64_enc:
; Line 491
	mov	eax, DWORD PTR _word$[ebp]
	shr	eax, 18					; 00000012H
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	dl, BYTE PTR ?base64_chars@?1??base64_encode_atom@@9@9[eax]
	mov	BYTE PTR [ecx], dl
; Line 492
	mov	eax, DWORD PTR _word$[ebp]
	shr	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	dl, BYTE PTR ?base64_chars@?1??base64_encode_atom@@9@9[eax]
	mov	BYTE PTR [ecx+1], dl
; Line 493
	cmp	DWORD PTR _n$[ebp], 1
	jle	SHORT $LN4@base64_enc
; Line 494
	mov	eax, DWORD PTR _word$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	dl, BYTE PTR ?base64_chars@?1??base64_encode_atom@@9@9[eax]
	mov	BYTE PTR [ecx+2], dl
; Line 495
	jmp	SHORT $LN3@base64_enc
$LN4@base64_enc:
; Line 496
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+2], 61			; 0000003dH
$LN3@base64_enc:
; Line 497
	cmp	DWORD PTR _n$[ebp], 2
	jle	SHORT $LN2@base64_enc
; Line 498
	mov	ecx, DWORD PTR _word$[ebp]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _out$[ebp]
	mov	al, BYTE PTR ?base64_chars@?1??base64_encode_atom@@9@9[ecx]
	mov	BYTE PTR [edx+3], al
; Line 499
	jmp	SHORT $LN7@base64_enc
$LN2@base64_enc:
; Line 500
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+3], 61			; 0000003dH
$LN7@base64_enc:
; Line 501
	mov	esp, ebp
	pop	ebp
	ret	0
_base64_encode_atom ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_base64_decode_atom
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -45						; size = 1
_word$ = -44						; size = 4
_len$ = -40						; size = 4
_v$ = -36						; size = 4
_i$ = -32						; size = 4
_vals$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_atom$ = 8						; size = 4
_out$ = 12						; size = 4
_base64_decode_atom PROC
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 510
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@base64_dec
$LN23@base64_dec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@base64_dec:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN22@base64_dec
; Line 511
	mov	ecx, DWORD PTR _atom$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$[ebp], dl
; Line 512
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN21@base64_dec
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN21@base64_dec
; Line 513
	movsx	edx, BYTE PTR _c$[ebp]
	sub	edx, 65					; 00000041H
	mov	DWORD PTR _v$[ebp], edx
	jmp	SHORT $LN20@base64_dec
$LN21@base64_dec:
; Line 514
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN19@base64_dec
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 122				; 0000007aH
	jg	SHORT $LN19@base64_dec
; Line 515
	movsx	edx, BYTE PTR _c$[ebp]
	sub	edx, 71					; 00000047H
	mov	DWORD PTR _v$[ebp], edx
	jmp	SHORT $LN20@base64_dec
$LN19@base64_dec:
; Line 516
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN17@base64_dec
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN17@base64_dec
; Line 517
	movsx	edx, BYTE PTR _c$[ebp]
	add	edx, 4
	mov	DWORD PTR _v$[ebp], edx
	jmp	SHORT $LN20@base64_dec
$LN17@base64_dec:
; Line 518
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN15@base64_dec
; Line 519
	mov	DWORD PTR _v$[ebp], 62			; 0000003eH
	jmp	SHORT $LN20@base64_dec
$LN15@base64_dec:
; Line 520
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN13@base64_dec
; Line 521
	mov	DWORD PTR _v$[ebp], 63			; 0000003fH
	jmp	SHORT $LN20@base64_dec
$LN13@base64_dec:
; Line 522
	movsx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 61					; 0000003dH
	jne	SHORT $LN11@base64_dec
; Line 523
	mov	DWORD PTR _v$[ebp], -1
; Line 524
	jmp	SHORT $LN20@base64_dec
$LN11@base64_dec:
; Line 525
	xor	eax, eax
	jmp	$LN25@base64_dec
$LN20@base64_dec:
; Line 526
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _vals$[ebp+eax*4], ecx
; Line 527
	jmp	$LN23@base64_dec
$LN22@base64_dec:
; Line 529
	cmp	DWORD PTR _vals$[ebp], -1
	je	SHORT $LN8@base64_dec
	cmp	DWORD PTR _vals$[ebp+4], -1
	jne	SHORT $LN9@base64_dec
$LN8@base64_dec:
; Line 530
	xor	eax, eax
	jmp	$LN25@base64_dec
$LN9@base64_dec:
; Line 531
	cmp	DWORD PTR _vals$[ebp+8], -1
	jne	SHORT $LN7@base64_dec
	cmp	DWORD PTR _vals$[ebp+12], -1
	je	SHORT $LN7@base64_dec
; Line 532
	xor	eax, eax
	jmp	$LN25@base64_dec
$LN7@base64_dec:
; Line 534
	cmp	DWORD PTR _vals$[ebp+12], -1
	je	SHORT $LN6@base64_dec
; Line 535
	mov	DWORD PTR _len$[ebp], 3
	jmp	SHORT $LN5@base64_dec
$LN6@base64_dec:
; Line 536
	cmp	DWORD PTR _vals$[ebp+8], -1
	je	SHORT $LN4@base64_dec
; Line 537
	mov	DWORD PTR _len$[ebp], 2
; Line 538
	jmp	SHORT $LN5@base64_dec
$LN4@base64_dec:
; Line 539
	mov	DWORD PTR _len$[ebp], 1
$LN5@base64_dec:
; Line 542
	mov	edx, DWORD PTR _vals$[ebp]
	shl	edx, 18					; 00000012H
	mov	eax, DWORD PTR _vals$[ebp+4]
	shl	eax, 12					; 0000000cH
	or	edx, eax
	mov	ecx, DWORD PTR _vals$[ebp+8]
	and	ecx, 63					; 0000003fH
	shl	ecx, 6
	or	edx, ecx
	mov	eax, DWORD PTR _vals$[ebp+12]
	and	eax, 63					; 0000003fH
	or	edx, eax
	mov	DWORD PTR _word$[ebp], edx
; Line 543
	mov	ecx, DWORD PTR _word$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], cl
; Line 544
	cmp	DWORD PTR _len$[ebp], 1
	jle	SHORT $LN2@base64_dec
; Line 545
	mov	eax, DWORD PTR _word$[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx+1], al
$LN2@base64_dec:
; Line 546
	cmp	DWORD PTR _len$[ebp], 2
	jle	SHORT $LN1@base64_dec
; Line 547
	mov	edx, DWORD PTR _word$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+2], dl
$LN1@base64_dec:
; Line 548
	mov	eax, DWORD PTR _len$[ebp]
$LN25@base64_dec:
; Line 549
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@base64_dec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@base64_dec:
	DD	1
	DD	$LN28@base64_dec
$LN28@base64_dec:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN27@base64_dec
$LN27@base64_dec:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
_base64_decode_atom ENDP
_TEXT	ENDS
PUBLIC	_bufchain_init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_bufchain_init PROC
; Line 572
	push	ebp
	mov	ebp, esp
; Line 573
	mov	eax, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 574
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 575
	pop	ebp
	ret	0
_bufchain_init ENDP
_TEXT	ENDS
PUBLIC	_bufchain_clear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -4						; size = 4
_ch$ = 8						; size = 4
_bufchain_clear PROC
; Line 578
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@bufchain_c:
; Line 580
	mov	eax, DWORD PTR _ch$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@bufchain_c
; Line 581
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _b$[ebp], edx
; Line 582
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 583
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 584
	jmp	SHORT $LN2@bufchain_c
$LN1@bufchain_c:
; Line 585
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 586
	mov	eax, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 587
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bufchain_clear ENDP
_TEXT	ENDS
PUBLIC	_bufchain_size
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_bufchain_size PROC
; Line 590
	push	ebp
	mov	ebp, esp
; Line 591
	mov	eax, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 592
	pop	ebp
	ret	0
_bufchain_size ENDP
_TEXT	ENDS
PUBLIC	_bufchain_add
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv142 = -28						; size = 4
tv136 = -24						; size = 4
tv87 = -20						; size = 4
_newbuf$85897 = -16					; size = 4
_grainlen$85894 = -12					; size = 4
_copylen$85892 = -8					; size = 4
_buf$ = -4						; size = 4
_ch$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_bufchain_add PROC
; Line 595
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 596
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _buf$[ebp], eax
; Line 598
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN7@bufchain_a
	jmp	$LN8@bufchain_a
$LN7@bufchain_a:
; Line 600
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN6@bufchain_a:
; Line 602
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN8@bufchain_a
; Line 603
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN4@bufchain_a
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, DWORD PTR [edx+12]
	jae	SHORT $LN4@bufchain_a
; Line 604
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx+12]
	sub	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR _len$[ebp], edx
	jge	SHORT $LN10@bufchain_a
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN11@bufchain_a
$LN10@bufchain_a:
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv87[ebp], edx
$LN11@bufchain_a:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR _copylen$85892[ebp], eax
; Line 605
	mov	ecx, DWORD PTR _copylen$85892[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 606
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _copylen$85892[ebp]
	mov	DWORD PTR _buf$[ebp], eax
; Line 607
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _copylen$85892[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 608
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _copylen$85892[ebp]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+8], ecx
$LN4@bufchain_a:
; Line 610
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN3@bufchain_a
; Line 612
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 16					; 00000010H
	cmp	ecx, 512				; 00000200H
	jbe	SHORT $LN12@bufchain_a
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv136[ebp], edx
	jmp	SHORT $LN13@bufchain_a
$LN12@bufchain_a:
	mov	DWORD PTR tv136[ebp], 512		; 00000200H
$LN13@bufchain_a:
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR _grainlen$85894[ebp], eax
; Line 614
	push	1
	mov	ecx, DWORD PTR _grainlen$85894[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _newbuf$85897[ebp], eax
; Line 616
	mov	edx, DWORD PTR _newbuf$85897[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv142[ebp], edx
	mov	eax, DWORD PTR _newbuf$85897[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _newbuf$85897[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 617
	mov	ecx, DWORD PTR _newbuf$85897[ebp]
	add	ecx, DWORD PTR _grainlen$85894[ebp]
	mov	edx, DWORD PTR _newbuf$85897[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 618
	mov	eax, DWORD PTR _newbuf$85897[ebp]
	mov	DWORD PTR [eax], 0
; Line 619
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@bufchain_a
; Line 620
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _newbuf$85897[ebp]
	mov	DWORD PTR [eax], ecx
; Line 621
	jmp	SHORT $LN1@bufchain_a
$LN2@bufchain_a:
; Line 622
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR _newbuf$85897[ebp]
	mov	DWORD PTR [edx], eax
$LN1@bufchain_a:
; Line 623
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR _newbuf$85897[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN3@bufchain_a:
; Line 625
	jmp	$LN6@bufchain_a
$LN8@bufchain_a:
; Line 626
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bufchain_add ENDP
_TEXT	ENDS
PUBLIC	_bufchain_consume
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_remlen$85916 = -8					; size = 4
_tmp$ = -4						; size = 4
_ch$ = 8						; size = 4
_len$ = 12						; size = 4
_bufchain_consume PROC
; Line 629
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 632
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN5@bufchain_c@2
	push	632					; 00000278H
	push	OFFSET $SG85911
	push	OFFSET $SG85912
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@bufchain_c@2:
; Line 633
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN6@bufchain_c@2
; Line 634
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _remlen$85916[ebp], eax
; Line 635
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN9@bufchain_c@2
	push	635					; 0000027bH
	push	OFFSET $SG85919
	push	OFFSET $SG85920
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@bufchain_c@2:
; Line 636
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR _remlen$85916[ebp], ecx
	jl	SHORT $LN3@bufchain_c@2
; Line 637
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _remlen$85916[ebp], eax
; Line 638
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tmp$[ebp], edx
; Line 639
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 640
	mov	eax, DWORD PTR _ch$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@bufchain_c@2
; Line 641
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@bufchain_c@2:
; Line 642
	mov	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 643
	jmp	SHORT $LN1@bufchain_c@2
$LN3@bufchain_c@2:
; Line 644
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _remlen$85916[ebp]
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
$LN1@bufchain_c@2:
; Line 645
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _remlen$85916[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 646
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _remlen$85916[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 647
	jmp	$LN5@bufchain_c@2
$LN6@bufchain_c@2:
; Line 648
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bufchain_consume ENDP
_TEXT	ENDS
PUBLIC	_bufchain_prefix
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ch$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_bufchain_prefix PROC
; Line 651
	push	ebp
	mov	ebp, esp
; Line 652
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 653
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
; Line 654
	pop	ebp
	ret	0
_bufchain_prefix ENDP
_TEXT	ENDS
PUBLIC	_bufchain_fetch
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_remlen$85948 = -12					; size = 4
_data_c$ = -8						; size = 4
_tmp$ = -4						; size = 4
_ch$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_bufchain_fetch PROC
; Line 657
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 659
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data_c$[ebp], eax
; Line 661
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tmp$[ebp], edx
; Line 663
	mov	eax, DWORD PTR _ch$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN3@bufchain_f
	push	663					; 00000297H
	push	OFFSET $SG85943
	push	OFFSET $SG85944
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@bufchain_f:
; Line 664
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN4@bufchain_f
; Line 665
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _remlen$85948[ebp], eax
; Line 667
	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN7@bufchain_f
	push	667					; 0000029bH
	push	OFFSET $SG85951
	push	OFFSET $SG85952
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@bufchain_f:
; Line 668
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR _remlen$85948[ebp], ecx
	jl	SHORT $LN1@bufchain_f
; Line 669
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _remlen$85948[ebp], ecx
$LN1@bufchain_f:
; Line 670
	mov	edx, DWORD PTR _remlen$85948[ebp]
	push	edx
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _data_c$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 672
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 673
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _remlen$85948[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 674
	mov	eax, DWORD PTR _data_c$[ebp]
	add	eax, DWORD PTR _remlen$85948[ebp]
	mov	DWORD PTR _data_c$[ebp], eax
; Line 675
	jmp	SHORT $LN3@bufchain_f
$LN4@bufchain_f:
; Line 676
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bufchain_fetch ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_modalfatalbox:PROC
EXTRN	_malloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_str$85965 = -212					; size = 200
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_n$ = 8							; size = 4
_size$ = 12						; size = 4
_safemalloc PROC
; Line 714
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 717
	mov	eax, 2147483647				; 7fffffffH
	xor	edx, edx
	div	DWORD PTR _size$[ebp]
	cmp	DWORD PTR _n$[ebp], eax
	jbe	SHORT $LN4@safemalloc
; Line 718
	mov	DWORD PTR _p$[ebp], 0
; Line 719
	jmp	SHORT $LN3@safemalloc
$LN4@safemalloc:
; Line 720
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 721
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@safemalloc
	mov	DWORD PTR _size$[ebp], 1
$LN2@safemalloc:
; Line 725
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
$LN3@safemalloc:
; Line 729
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@safemalloc
; Line 737
	push	OFFSET $SG85966
	lea	edx, DWORD PTR _str$85965[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 739
	lea	eax, DWORD PTR _str$85965[ebp]
	push	eax
	call	_modalfatalbox
	add	esp, 4
$LN1@safemalloc:
; Line 745
	mov	eax, DWORD PTR _p$[ebp]
; Line 746
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@safemalloc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@safemalloc:
	DD	1
	DD	$LN8@safemalloc
$LN8@safemalloc:
	DD	-212					; ffffff2cH
	DD	200					; 000000c8H
	DD	$LN7@safemalloc
$LN7@safemalloc:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_safemalloc ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_realloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_str$85981 = -212					; size = 200
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ptr$ = 8						; size = 4
_n$ = 12						; size = 4
_size$ = 16						; size = 4
_saferealloc PROC
; Line 749
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 752
	mov	eax, 2147483647				; 7fffffffH
	xor	edx, edx
	div	DWORD PTR _size$[ebp]
	cmp	DWORD PTR _n$[ebp], eax
	jbe	SHORT $LN5@safereallo
; Line 753
	mov	DWORD PTR _p$[ebp], 0
; Line 754
	jmp	SHORT $LN4@safereallo
$LN5@safereallo:
; Line 755
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 756
	cmp	DWORD PTR _ptr$[ebp], 0
	jne	SHORT $LN3@safereallo
; Line 760
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 762
	jmp	SHORT $LN4@safereallo
$LN3@safereallo:
; Line 766
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
$LN4@safereallo:
; Line 771
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@safereallo
; Line 779
	push	OFFSET $SG85982
	lea	ecx, DWORD PTR _str$85981[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 781
	lea	edx, DWORD PTR _str$85981[ebp]
	push	edx
	call	_modalfatalbox
	add	esp, 4
$LN1@safereallo:
; Line 787
	mov	eax, DWORD PTR _p$[ebp]
; Line 788
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@safereallo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@safereallo:
	DD	1
	DD	$LN9@safereallo
$LN9@safereallo:
	DD	-212					; ffffff2cH
	DD	200					; 000000c8H
	DD	$LN8@safereallo
$LN8@safereallo:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_saferealloc ENDP
_TEXT	ENDS
EXTRN	_free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_safefree PROC
; Line 791
	push	ebp
	mov	ebp, esp
; Line 792
	cmp	DWORD PTR _ptr$[ebp], 0
	je	SHORT $LN2@safefree
; Line 800
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_free
	add	esp, 4
$LN2@safefree:
; Line 807
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_safefree ENDP
_TEXT	ENDS
PUBLIC	_conf_launchable
EXTRN	_conf_get_str:PROC
EXTRN	_conf_get_int:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_conf_launchable PROC
; Line 871
	push	ebp
	mov	ebp, esp
; Line 872
	push	2
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 4
	jne	SHORT $LN2@conf_launc
; Line 873
	push	55					; 00000037H
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_str
	add	esp, 8
	movsx	eax, BYTE PTR [eax]
	neg	eax
	sbb	eax, eax
	neg	eax
	jmp	SHORT $LN3@conf_launc
; Line 874
	jmp	SHORT $LN3@conf_launc
$LN2@conf_launc:
; Line 875
	push	0
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
	movsx	eax, BYTE PTR [eax]
	neg	eax
	sbb	eax, eax
	neg	eax
$LN3@conf_launc:
; Line 876
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_conf_launchable ENDP
_TEXT	ENDS
PUBLIC	_conf_dest
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_conf$ = 8						; size = 4
_conf_dest PROC
; Line 879
	push	ebp
	mov	ebp, esp
; Line 880
	push	2
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_conf_get_int
	add	esp, 8
	cmp	eax, 4
	jne	SHORT $LN2@conf_dest
; Line 881
	push	55					; 00000037H
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_conf_get_str
	add	esp, 8
	jmp	SHORT $LN3@conf_dest
; Line 882
	jmp	SHORT $LN3@conf_dest
$LN2@conf_dest:
; Line 883
	push	0
	mov	edx, DWORD PTR _conf$[ebp]
	push	edx
	call	_conf_get_str
	add	esp, 8
$LN3@conf_dest:
; Line 884
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_conf_dest ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_validate_manual_hostkey
EXTRN	_tolower:PROC
EXTRN	_strcspn:PROC
EXTRN	_strspn:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$86035 = -52					; size = 4
_minlen$86034 = -48					; size = 4
_alglen$86033 = -44					; size = 4
_decoded$86032 = -36					; size = 6
_i$86012 = -24						; size = 4
_s$ = -20						; size = 4
_r$ = -16						; size = 4
_q$ = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_validate_manual_hostkey PROC
; Line 935
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 942
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN25@validate_m:
; Line 943
	push	OFFSET $SG86007
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_strspn
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN24@validate_m
; Line 944
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], ecx
; Line 945
	push	OFFSET $SG86008
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_strcspn
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 946
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN23@validate_m
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN23@validate_m:
; Line 953
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	eax, 47					; 0000002fH
	jne	$not_fingerprint$86018
	push	OFFSET $SG86011
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_strspn
	add	esp, 8
	mov	ecx, DWORD PTR _q$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	$not_fingerprint$86018
; Line 960
	mov	DWORD PTR _i$86012[ebp], 0
	jmp	SHORT $LN21@validate_m
$LN20@validate_m:
	mov	eax, DWORD PTR _i$86012[ebp]
	add	eax, 1
	mov	DWORD PTR _i$86012[ebp], eax
$LN21@validate_m:
	cmp	DWORD PTR _i$86012[ebp], 16		; 00000010H
	jge	SHORT $LN19@validate_m
; Line 961
	mov	ecx, DWORD PTR _i$86012[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR _q$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN17@validate_m
	mov	ecx, DWORD PTR _i$86012[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR _q$[ebp]
	movsx	eax, BYTE PTR [edx+ecx+1]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN18@validate_m
$LN17@validate_m:
; Line 962
	jmp	SHORT $not_fingerprint$86018
$LN18@validate_m:
; Line 963
	jmp	SHORT $LN20@validate_m
$LN19@validate_m:
	mov	DWORD PTR _i$86012[ebp], 0
	jmp	SHORT $LN16@validate_m
$LN15@validate_m:
	mov	ecx, DWORD PTR _i$86012[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$86012[ebp], ecx
$LN16@validate_m:
	cmp	DWORD PTR _i$86012[ebp], 15		; 0000000fH
	jge	SHORT $LN14@validate_m
; Line 964
	mov	edx, DWORD PTR _i$86012[ebp]
	imul	edx, 3
	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+2]
	cmp	ecx, 58					; 0000003aH
	je	SHORT $LN13@validate_m
; Line 965
	jmp	SHORT $not_fingerprint$86018
$LN13@validate_m:
; Line 966
	jmp	SHORT $LN15@validate_m
$LN14@validate_m:
	mov	DWORD PTR _i$86012[ebp], 0
	jmp	SHORT $LN12@validate_m
$LN11@validate_m:
	mov	edx, DWORD PTR _i$86012[ebp]
	add	edx, 1
	mov	DWORD PTR _i$86012[ebp], edx
$LN12@validate_m:
	cmp	DWORD PTR _i$86012[ebp], 47		; 0000002fH
	jge	SHORT $LN10@validate_m
; Line 967
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, DWORD PTR _i$86012[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	edx, DWORD PTR _key$[ebp]
	add	edx, DWORD PTR _i$86012[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN11@validate_m
$LN10@validate_m:
; Line 968
	mov	eax, DWORD PTR _key$[ebp]
	mov	BYTE PTR [eax+47], 0
; Line 969
	mov	eax, 1
	jmp	$LN26@validate_m
$not_fingerprint$86018:
; Line 978
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _r$[ebp], edx
	jmp	SHORT $LN9@validate_m
$LN8@validate_m:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN9@validate_m:
	mov	ecx, DWORD PTR _r$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN7@validate_m
; Line 979
	mov	eax, DWORD PTR _r$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN6@validate_m
	mov	edx, DWORD PTR _r$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN6@validate_m
; Line 980
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _r$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
$LN6@validate_m:
; Line 981
	jmp	SHORT $LN8@validate_m
$LN7@validate_m:
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 0
; Line 985
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	$not_ssh2_blob$86037
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	eax, 8
	jbe	$not_ssh2_blob$86037
	push	OFFSET $SG86031
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	call	_strspn
	add	esp, 8
	mov	ecx, DWORD PTR _q$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	$not_ssh2_blob$86037
; Line 997
	mov	DWORD PTR _len$86035[ebp], 0
; Line 999
	mov	eax, DWORD PTR _len$86035[ebp]
	lea	ecx, DWORD PTR _decoded$86032[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_base64_decode_atom
	add	esp, 8
	add	eax, DWORD PTR _len$86035[ebp]
	mov	DWORD PTR _len$86035[ebp], eax
; Line 1000
	cmp	DWORD PTR _len$86035[ebp], 3
	jge	SHORT $LN4@validate_m
; Line 1001
	jmp	$not_ssh2_blob$86037
$LN4@validate_m:
; Line 1002
	mov	eax, DWORD PTR _len$86035[ebp]
	lea	ecx, DWORD PTR _decoded$86032[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 4
	push	edx
	call	_base64_decode_atom
	add	esp, 8
	add	eax, DWORD PTR _len$86035[ebp]
	mov	DWORD PTR _len$86035[ebp], eax
; Line 1003
	cmp	DWORD PTR _len$86035[ebp], 4
	jge	SHORT $LN3@validate_m
; Line 1004
	jmp	SHORT $not_ssh2_blob$86037
$LN3@validate_m:
; Line 1006
	movzx	eax, BYTE PTR _decoded$86032[ebp]
	shl	eax, 24					; 00000018H
	movzx	ecx, BYTE PTR _decoded$86032[ebp+1]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	movzx	edx, BYTE PTR _decoded$86032[ebp+2]
	shl	edx, 8
	or	eax, edx
	movzx	ecx, BYTE PTR _decoded$86032[ebp+3]
	or	eax, ecx
	mov	DWORD PTR _alglen$86033[ebp], eax
; Line 1007
	cmp	DWORD PTR _alglen$86033[ebp], 64	; 00000040H
	jbe	SHORT $LN2@validate_m
; Line 1008
	jmp	SHORT $not_ssh2_blob$86037
$LN2@validate_m:
; Line 1010
	mov	eax, DWORD PTR _alglen$86033[ebp]
	add	eax, 6
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	DWORD PTR _minlen$86034[ebp], eax
; Line 1011
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	cmp	eax, DWORD PTR _minlen$86034[ebp]
	jae	SHORT $LN1@validate_m
; Line 1012
	jmp	SHORT $not_ssh2_blob$86037
$LN1@validate_m:
; Line 1014
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1015
	mov	eax, 1
	jmp	SHORT $LN26@validate_m
$not_ssh2_blob$86037:
; Line 1018
	jmp	$LN25@validate_m
$LN24@validate_m:
; Line 1020
	xor	eax, eax
$LN26@validate_m:
; Line 1021
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@validate_m
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN30@validate_m:
	DD	1
	DD	$LN29@validate_m
$LN29@validate_m:
	DD	-36					; ffffffdcH
	DD	6
	DD	$LN28@validate_m
$LN28@validate_m:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_validate_manual_hostkey ENDP
_TEXT	ENDS
END
