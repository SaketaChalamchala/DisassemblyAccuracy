; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\wildcard.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG85557 DB	''''' occurred at end of string (expected another charact'
	DB	'er)', 00H
	ORG $+2
$SG85559 DB	'expected '']'' to close character class', 00H
	ORG $+2
$SG85561 DB	'character range was not terminated ('']'' just after ''-'
	DB	''')', 00H
$SG85562 DB	'INTERNAL ERROR: unrecognised wildcard error number', 00H
	ORG $+1
$SG85620 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'l', 00H, 'd'
	DB	00H, 'c', 00H, 'a', 00H, 'r', 00H, 'd', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
$SG85621 DB	'*', 00H, 'w', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'c', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '''', 00H, '*', 00H, '''', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_wc_error
EXTRN	_abs:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\wildcard.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv66 = -4						; size = 4
_value$ = 8						; size = 4
_wc_error PROC
; Line 79
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 80
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _value$[ebp], eax
; Line 81
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN3@wc_error
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN2@wc_error
	cmp	DWORD PTR tv66[ebp], 3
	je	SHORT $LN1@wc_error
	jmp	SHORT $LN4@wc_error
$LN3@wc_error:
; Line 83
	mov	eax, OFFSET $SG85557
	jmp	SHORT $LN6@wc_error
$LN2@wc_error:
; Line 85
	mov	eax, OFFSET $SG85559
	jmp	SHORT $LN6@wc_error
$LN1@wc_error:
; Line 87
	mov	eax, OFFSET $SG85561
	jmp	SHORT $LN6@wc_error
$LN4@wc_error:
; Line 89
	mov	eax, OFFSET $SG85562
$LN6@wc_error:
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wc_error ENDP
_TEXT	ENDS
PUBLIC	_wc_match
EXTRN	_strlen:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_save_t$85630 = -12					; size = 4
_save_w$85629 = -8					; size = 4
_ret$ = -4						; size = 4
_wildcard$ = 8						; size = 4
_target$ = 12						; size = 4
_wc_match PROC
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 218
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN11@wc_match
; Line 219
	lea	edx, DWORD PTR _target$[ebp]
	push	edx
	lea	eax, DWORD PTR _wildcard$[ebp]
	push	eax
	call	_wc_match_fragment
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 220
	cmp	DWORD PTR _ret$[ebp], 0
	jg	SHORT $LN11@wc_match
; Line 221
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN14@wc_match
$LN11@wc_match:
; Line 224
	mov	ecx, DWORD PTR _wildcard$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN10@wc_match
; Line 225
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN9@wc_match
	push	225					; 000000e1H
	push	OFFSET $SG85620
	push	OFFSET $SG85621
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@wc_match:
; Line 226
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN8@wc_match
; Line 227
	mov	edx, DWORD PTR _wildcard$[ebp]
	add	edx, 1
	mov	DWORD PTR _wildcard$[ebp], edx
	jmp	SHORT $LN9@wc_match
$LN8@wc_match:
; Line 234
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@wc_match
; Line 235
	mov	eax, 1
	jmp	$LN14@wc_match
$LN7@wc_match:
; Line 244
	mov	DWORD PTR _ret$[ebp], 0
$LN6@wc_match:
; Line 245
	mov	edx, DWORD PTR _target$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN5@wc_match
; Line 246
	mov	ecx, DWORD PTR _wildcard$[ebp]
	mov	DWORD PTR _save_w$85629[ebp], ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _save_t$85630[ebp], edx
; Line 248
	lea	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wildcard$[ebp]
	push	ecx
	call	_wc_match_fragment
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 250
	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN4@wc_match
; Line 251
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN14@wc_match
$LN4@wc_match:
; Line 253
	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN3@wc_match
	mov	edx, DWORD PTR _wildcard$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN3@wc_match
	mov	ecx, DWORD PTR _target$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@wc_match
; Line 275
	mov	eax, DWORD PTR _save_t$85630[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _save_t$85630[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, DWORD PTR _save_t$85630[ebp]
	sub	eax, ecx
	mov	DWORD PTR _target$[ebp], eax
; Line 276
	mov	edx, DWORD PTR _save_w$85629[ebp]
	mov	DWORD PTR _wildcard$[ebp], edx
; Line 277
	lea	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wildcard$[ebp]
	push	ecx
	call	_wc_match_fragment
	add	esp, 8
	jmp	SHORT $LN14@wc_match
$LN3@wc_match:
; Line 280
	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN2@wc_match
; Line 281
	jmp	SHORT $LN5@wc_match
$LN2@wc_match:
; Line 282
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 283
	jmp	$LN6@wc_match
$LN5@wc_match:
; Line 284
	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN1@wc_match
; Line 285
	jmp	$LN11@wc_match
$LN1@wc_match:
; Line 286
	xor	eax, eax
	jmp	SHORT $LN14@wc_match
; Line 287
	jmp	$LN11@wc_match
$LN10@wc_match:
; Line 295
	mov	eax, DWORD PTR _target$[ebp]
	movsx	eax, BYTE PTR [eax]
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN14@wc_match:
; Line 296
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wc_match ENDP
; Function compile flags: /Odtp /RTCsu
tv151 = -36						; size = 4
_t$85600 = -32						; size = 4
_ourchr$85592 = -28					; size = 4
_upper$85591 = -24					; size = 4
_lower$85590 = -20					; size = 4
_matched$85582 = -16					; size = 4
_invert$85581 = -12					; size = 4
_t$ = -8						; size = 4
_f$ = -4						; size = 4
_fragment$ = 8						; size = 4
_target$ = 12						; size = 4
_wc_match_fragment PROC
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 104
	mov	eax, DWORD PTR _fragment$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _f$[ebp], ecx
; Line 105
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _t$[ebp], eax
$LN26@wc_match_f:
; Line 110
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN25@wc_match_f
	mov	eax, DWORD PTR _f$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	$LN25@wc_match_f
	mov	edx, DWORD PTR _t$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN25@wc_match_f
; Line 116
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 92					; 0000005cH
	jne	SHORT $LN24@wc_match_f
; Line 122
	mov	eax, DWORD PTR _f$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN23@wc_match_f
; Line 123
	or	eax, -1
	jmp	$LN27@wc_match_f
$LN23@wc_match_f:
; Line 124
	mov	edx, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN22@wc_match_f
; Line 125
	xor	eax, eax
	jmp	$LN27@wc_match_f
$LN22@wc_match_f:
; Line 126
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 2
	mov	DWORD PTR _f$[ebp], eax
	jmp	$LN21@wc_match_f
$LN24@wc_match_f:
; Line 127
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 63					; 0000003fH
	jne	SHORT $LN20@wc_match_f
; Line 131
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
	jmp	$LN21@wc_match_f
$LN20@wc_match_f:
; Line 132
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 91					; 0000005bH
	jne	$LN18@wc_match_f
; Line 133
	mov	DWORD PTR _invert$85581[ebp], 0
; Line 134
	mov	DWORD PTR _matched$85582[ebp], 0
; Line 138
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
; Line 139
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 94					; 0000005eH
	jne	SHORT $LN16@wc_match_f
; Line 140
	mov	DWORD PTR _invert$85581[ebp], 1
; Line 141
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
$LN16@wc_match_f:
; Line 143
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 93					; 0000005dH
	je	$LN15@wc_match_f
; Line 144
	mov	eax, DWORD PTR _f$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN14@wc_match_f
; Line 145
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 1
	mov	DWORD PTR _f$[ebp], edx
$LN14@wc_match_f:
; Line 146
	mov	eax, DWORD PTR _f$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN13@wc_match_f
; Line 147
	mov	eax, -2					; fffffffeH
	jmp	$LN27@wc_match_f
$LN13@wc_match_f:
; Line 148
	mov	edx, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 45					; 0000002dH
	jne	$LN12@wc_match_f
; Line 150
	mov	ecx, DWORD PTR _f$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _lower$85590[ebp], edx
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
; Line 151
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	mov	DWORD PTR _f$[ebp], ecx
; Line 152
	mov	edx, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN11@wc_match_f
; Line 153
	mov	eax, -3					; fffffffdH
	jmp	$LN27@wc_match_f
$LN11@wc_match_f:
; Line 154
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 92					; 0000005cH
	jne	SHORT $LN10@wc_match_f
; Line 155
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
$LN10@wc_match_f:
; Line 156
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN9@wc_match_f
; Line 157
	mov	eax, -2					; fffffffeH
	jmp	$LN27@wc_match_f
$LN9@wc_match_f:
; Line 158
	mov	eax, DWORD PTR _f$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _upper$85591[ebp], ecx
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, 1
	mov	DWORD PTR _f$[ebp], edx
; Line 159
	mov	eax, DWORD PTR _t$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ourchr$85592[ebp], ecx
; Line 160
	mov	edx, DWORD PTR _lower$85590[ebp]
	cmp	edx, DWORD PTR _upper$85591[ebp]
	jle	SHORT $LN8@wc_match_f
; Line 161
	mov	eax, DWORD PTR _lower$85590[ebp]
	mov	DWORD PTR _t$85600[ebp], eax
	mov	ecx, DWORD PTR _upper$85591[ebp]
	mov	DWORD PTR _lower$85590[ebp], ecx
	mov	edx, DWORD PTR _t$85600[ebp]
	mov	DWORD PTR _upper$85591[ebp], edx
$LN8@wc_match_f:
; Line 163
	mov	eax, DWORD PTR _ourchr$85592[ebp]
	cmp	eax, DWORD PTR _lower$85590[ebp]
	jl	SHORT $LN7@wc_match_f
	mov	ecx, DWORD PTR _ourchr$85592[ebp]
	cmp	ecx, DWORD PTR _upper$85591[ebp]
	jg	SHORT $LN7@wc_match_f
; Line 164
	mov	DWORD PTR _matched$85582[ebp], 1
$LN7@wc_match_f:
; Line 165
	jmp	SHORT $LN6@wc_match_f
$LN12@wc_match_f:
; Line 166
	mov	edx, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	mov	DWORD PTR _f$[ebp], ecx
	cmp	edx, eax
	jne	SHORT $LN29@wc_match_f
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN30@wc_match_f
$LN29@wc_match_f:
	mov	DWORD PTR tv151[ebp], 0
$LN30@wc_match_f:
	mov	edx, DWORD PTR _matched$85582[ebp]
	or	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR _matched$85582[ebp], edx
$LN6@wc_match_f:
; Line 168
	jmp	$LN16@wc_match_f
$LN15@wc_match_f:
; Line 169
	mov	eax, DWORD PTR _invert$85581[ebp]
	cmp	eax, DWORD PTR _matched$85582[ebp]
	jne	SHORT $LN5@wc_match_f
; Line 170
	xor	eax, eax
	jmp	SHORT $LN27@wc_match_f
$LN5@wc_match_f:
; Line 171
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 1
	mov	DWORD PTR _f$[ebp], ecx
; Line 172
	jmp	SHORT $LN21@wc_match_f
$LN18@wc_match_f:
; Line 176
	mov	edx, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _t$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN3@wc_match_f
; Line 177
	xor	eax, eax
	jmp	SHORT $LN27@wc_match_f
$LN3@wc_match_f:
; Line 178
	mov	eax, DWORD PTR _f$[ebp]
	add	eax, 1
	mov	DWORD PTR _f$[ebp], eax
$LN21@wc_match_f:
; Line 184
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
; Line 185
	jmp	$LN26@wc_match_f
$LN25@wc_match_f:
; Line 186
	mov	edx, DWORD PTR _f$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN1@wc_match_f
	mov	ecx, DWORD PTR _f$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN2@wc_match_f
$LN1@wc_match_f:
; Line 191
	mov	eax, DWORD PTR _fragment$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 192
	mov	edx, DWORD PTR _target$[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx], eax
; Line 193
	mov	eax, 1
	jmp	SHORT $LN27@wc_match_f
$LN2@wc_match_f:
; Line 199
	xor	eax, eax
$LN27@wc_match_f:
; Line 200
	mov	esp, ebp
	pop	ebp
	ret	0
_wc_match_fragment ENDP
_TEXT	ENDS
PUBLIC	_wc_unescape
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_output$ = 8						; size = 4
_wildcard$ = 12						; size = 4
_wc_unescape PROC
; Line 310
	push	ebp
	mov	ebp, esp
$LN11@wc_unescap:
; Line 311
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN10@wc_unescap
; Line 312
	mov	edx, DWORD PTR _wildcard$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN9@wc_unescap
; Line 313
	mov	ecx, DWORD PTR _wildcard$[ebp]
	add	ecx, 1
	mov	DWORD PTR _wildcard$[ebp], ecx
; Line 315
	mov	edx, DWORD PTR _wildcard$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN8@wc_unescap
; Line 316
	cmp	DWORD PTR _output$[ebp], 0
	je	SHORT $LN7@wc_unescap
; Line 317
	mov	ecx, DWORD PTR _output$[ebp]
	mov	edx, DWORD PTR _wildcard$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _output$[ebp]
	add	ecx, 1
	mov	DWORD PTR _output$[ebp], ecx
$LN7@wc_unescap:
; Line 318
	mov	edx, DWORD PTR _wildcard$[ebp]
	add	edx, 1
	mov	DWORD PTR _wildcard$[ebp], edx
$LN8@wc_unescap:
; Line 320
	jmp	SHORT $LN6@wc_unescap
$LN9@wc_unescap:
; Line 321
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN4@wc_unescap
	mov	edx, DWORD PTR _wildcard$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN4@wc_unescap
	mov	ecx, DWORD PTR _wildcard$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 91					; 0000005bH
	je	SHORT $LN4@wc_unescap
	mov	eax, DWORD PTR _wildcard$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LN5@wc_unescap
$LN4@wc_unescap:
; Line 322
	xor	eax, eax
	jmp	SHORT $LN12@wc_unescap
; Line 323
	jmp	SHORT $LN6@wc_unescap
$LN5@wc_unescap:
; Line 324
	cmp	DWORD PTR _output$[ebp], 0
	je	SHORT $LN2@wc_unescap
; Line 325
	mov	edx, DWORD PTR _output$[ebp]
	mov	eax, DWORD PTR _wildcard$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _output$[ebp]
	add	edx, 1
	mov	DWORD PTR _output$[ebp], edx
$LN2@wc_unescap:
; Line 326
	mov	eax, DWORD PTR _wildcard$[ebp]
	add	eax, 1
	mov	DWORD PTR _wildcard$[ebp], eax
$LN6@wc_unescap:
; Line 328
	jmp	$LN11@wc_unescap
$LN10@wc_unescap:
; Line 329
	cmp	DWORD PTR _output$[ebp], 0
	je	SHORT $LN1@wc_unescap
; Line 330
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], 0
$LN1@wc_unescap:
; Line 331
	mov	eax, 1
$LN12@wc_unescap:
; Line 332
	pop	ebp
	ret	0
_wc_unescape ENDP
_TEXT	ENDS
END
