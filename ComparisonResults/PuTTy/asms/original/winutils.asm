; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winutils.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG85584 DB	'errors.hostkey.absent:errors-hostkey-absent', 00H
$SG85589 DB	'errors.hostkey.changed:errors-hostkey-wrong', 00H
$SG85594 DB	'errors.cantloadkey:errors-cant-load-key', 00H
$SG85599 DB	'options.cleanup:using-cleanup', 00H
	ORG $+2
$SG85604 DB	'pgpfingerprints:pgpkeys', 00H
$SG85619 DB	'PGP fingerprints', 00H
	ORG $+7
$SG85620 DB	'These are the fingerprints of the PuTTY PGP Master Keys.'
	DB	' They can', 0aH, 'be used to establish a trust path from this'
	DB	' executable to another', 0aH, 'one. See the manual for more i'
	DB	'nformation.', 0aH, '(Note: these fingerprints have nothing to'
	DB	' do with SSH!)', 0aH, 0aH, 'PuTTY Master Key (RSA), 1024-bit:'
	DB	0aH, '  8F 15 97 DA 25 30 AB 0D  88 D1 92 54 11 CF 0C 4C', 0aH
	DB	'PuTTY Master Key (DSA), 1024-bit:', 0aH, '  313C 3E76 4B74 C2'
	DB	'C5 F2AE  83A8 4F5E 6DF5 6A93 B34E', 00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_request_file
EXTRN	__imp__SetCurrentDirectoryA@4:PROC
EXTRN	__imp__GetOpenFileNameA@4:PROC
EXTRN	__imp__GetSaveFileNameA@4:PROC
EXTRN	__imp__GetCurrentDirectoryA@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winutils.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv80 = -292						; size = 4
tv74 = -288						; size = 4
_r$85561 = -284						; size = 4
_r$85550 = -280						; size = 4
_ret$ = -276						; size = 4
_cwd$ = -268						; size = 260
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_of$ = 12						; size = 4
_preserve$ = 16						; size = 4
_save$ = 20						; size = 4
_request_file PROC
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 43
	cmp	DWORD PTR _preserve$[ebp], 0
	je	SHORT $LN7@request_fi
; Line 44
	mov	esi, esp
	lea	eax, DWORD PTR _cwd$[ebp]
	push	eax
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$85550[ebp], eax
; Line 45
	cmp	DWORD PTR _r$85550[ebp], 0
	je	SHORT $LN5@request_fi
	cmp	DWORD PTR _r$85550[ebp], 260		; 00000104H
	jb	SHORT $LN7@request_fi
$LN5@request_fi:
; Line 47
	mov	DWORD PTR _preserve$[ebp], 0
$LN7@request_fi:
; Line 53
	mov	ecx, DWORD PTR _of$[ebp]
	mov	DWORD PTR [ecx], 76			; 0000004cH
; Line 57
	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN10@request_fi
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN10@request_fi
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN11@request_fi
$LN10@request_fi:
	mov	DWORD PTR tv74[ebp], 0
$LN11@request_fi:
	mov	edx, DWORD PTR _of$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 59
	cmp	DWORD PTR _save$[ebp], 0
	je	SHORT $LN12@request_fi
	mov	esi, esp
	mov	ecx, DWORD PTR _of$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetSaveFileNameA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN13@request_fi
$LN12@request_fi:
	mov	esi, esp
	mov	edx, DWORD PTR _of$[ebp]
	push	edx
	call	DWORD PTR __imp__GetOpenFileNameA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv80[ebp], eax
$LN13@request_fi:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _ret$[ebp], eax
; Line 63
	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN4@request_fi
; Line 64
	mov	esi, esp
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$85561[ebp], eax
; Line 65
	cmp	DWORD PTR _r$85561[ebp], 0
	je	SHORT $LN2@request_fi
	cmp	DWORD PTR _r$85561[ebp], 260		; 00000104H
	jb	SHORT $LN4@request_fi
$LN2@request_fi:
; Line 67
	mov	edx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [edx], 0
$LN4@request_fi:
; Line 71
	cmp	DWORD PTR _preserve$[ebp], 0
	je	SHORT $LN1@request_fi
; Line 73
	mov	esi, esp
	lea	eax, DWORD PTR _cwd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCurrentDirectoryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@request_fi:
; Line 75
	mov	eax, DWORD PTR _ret$[ebp]
; Line 76
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@request_fi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@request_fi:
	DD	1
	DD	$LN15@request_fi
$LN15@request_fi:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN14@request_fi
$LN14@request_fi:
	DB	99					; 00000063H
	DB	119					; 00000077H
	DB	100					; 00000064H
	DB	0
_request_file ENDP
_TEXT	ENDS
PUBLIC	_filereq_new
EXTRN	_safemalloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_filereq_new PROC
; Line 79
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 80
	push	260					; 00000104H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 81
	mov	eax, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [eax], 0
; Line 82
	mov	eax, DWORD PTR _ret$[ebp]
; Line 83
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filereq_new ENDP
_TEXT	ENDS
PUBLIC	_filereq_free
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_state$ = 8						; size = 4
_filereq_free PROC
; Line 86
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 88
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_filereq_free ENDP
_TEXT	ENDS
PUBLIC	_message_box
EXTRN	__imp__MessageBoxIndirectA@4:PROC
EXTRN	_has_help:PROC
EXTRN	_hwnd:DWORD
EXTRN	_hinst:DWORD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mbox$ = -44						; size = 40
_text$ = 8						; size = 4
_caption$ = 12						; size = 4
_style$ = 16						; size = 4
_helpctxid$ = 20					; size = 4
_message_box PROC
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 121
	mov	DWORD PTR _mbox$[ebp], 40		; 00000028H
; Line 123
	mov	eax, DWORD PTR _hinst
	mov	DWORD PTR _mbox$[ebp+8], eax
; Line 124
	mov	ecx, DWORD PTR _hwnd
	mov	DWORD PTR _mbox$[ebp+4], ecx
; Line 125
	mov	DWORD PTR _mbox$[ebp+32], OFFSET _message_box_help_callback@4
; Line 126
	mov	DWORD PTR _mbox$[ebp+36], 0
; Line 127
	mov	edx, DWORD PTR _text$[ebp]
	mov	DWORD PTR _mbox$[ebp+12], edx
; Line 128
	mov	eax, DWORD PTR _caption$[ebp]
	mov	DWORD PTR _mbox$[ebp+16], eax
; Line 129
	mov	ecx, DWORD PTR _helpctxid$[ebp]
	mov	DWORD PTR _mbox$[ebp+28], ecx
; Line 130
	mov	edx, DWORD PTR _style$[ebp]
	mov	DWORD PTR _mbox$[ebp+20], edx
; Line 131
	cmp	DWORD PTR _helpctxid$[ebp], 0
	je	SHORT $LN1@message_bo
	call	_has_help
	test	eax, eax
	je	SHORT $LN1@message_bo
	mov	eax, DWORD PTR _mbox$[ebp+20]
	or	eax, 16384				; 00004000H
	mov	DWORD PTR _mbox$[ebp+20], eax
$LN1@message_bo:
; Line 132
	mov	esi, esp
	lea	ecx, DWORD PTR _mbox$[ebp]
	push	ecx
	call	DWORD PTR __imp__MessageBoxIndirectA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 133
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@message_bo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@message_bo:
	DD	1
	DD	$LN5@message_bo
$LN5@message_bo:
	DD	-44					; ffffffd4H
	DD	40					; 00000028H
	DD	$LN4@message_bo
$LN4@message_bo:
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
_message_box ENDP
_TEXT	ENDS
EXTRN	_launch_help:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_context$ = -4						; size = 4
_lpHelpInfo$ = 8					; size = 4
_message_box_help_callback@4 PROC
; Line 96
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 97
	mov	DWORD PTR _context$[ebp], 0
$LN21@message_bo@2:
; Line 103
	mov	eax, DWORD PTR _lpHelpInfo$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $LN20@message_bo@2
	mov	DWORD PTR _context$[ebp], OFFSET $SG85584
$LN20@message_bo@2:
	xor	ecx, ecx
	jne	SHORT $LN21@message_bo@2
$LN17@message_bo@2:
; Line 104
	mov	edx, DWORD PTR _lpHelpInfo$[ebp]
	cmp	DWORD PTR [edx+16], 2
	jne	SHORT $LN16@message_bo@2
	mov	DWORD PTR _context$[ebp], OFFSET $SG85589
$LN16@message_bo@2:
	xor	eax, eax
	jne	SHORT $LN17@message_bo@2
$LN13@message_bo@2:
; Line 105
	mov	ecx, DWORD PTR _lpHelpInfo$[ebp]
	cmp	DWORD PTR [ecx+16], 3
	jne	SHORT $LN12@message_bo@2
	mov	DWORD PTR _context$[ebp], OFFSET $SG85594
$LN12@message_bo@2:
	xor	edx, edx
	jne	SHORT $LN13@message_bo@2
$LN9@message_bo@2:
; Line 106
	mov	eax, DWORD PTR _lpHelpInfo$[ebp]
	cmp	DWORD PTR [eax+16], 4
	jne	SHORT $LN8@message_bo@2
	mov	DWORD PTR _context$[ebp], OFFSET $SG85599
$LN8@message_bo@2:
	xor	ecx, ecx
	jne	SHORT $LN9@message_bo@2
$LN5@message_bo@2:
; Line 107
	mov	edx, DWORD PTR _lpHelpInfo$[ebp]
	cmp	DWORD PTR [edx+16], 5
	jne	SHORT $LN4@message_bo@2
	mov	DWORD PTR _context$[ebp], OFFSET $SG85604
$LN4@message_bo@2:
	xor	eax, eax
	jne	SHORT $LN5@message_bo@2
; Line 109
	cmp	DWORD PTR _context$[ebp], 0
	je	SHORT $LN22@message_bo@2
; Line 110
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd
	push	edx
	call	_launch_help
	add	esp, 8
$LN22@message_bo@2:
; Line 111
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_message_box_help_callback@4 ENDP
_TEXT	ENDS
PUBLIC	_pgp_fingerprints
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pgp_fingerprints PROC
; Line 139
	push	ebp
	mov	ebp, esp
; Line 150
	push	5
	push	64					; 00000040H
	push	OFFSET $SG85619
	push	OFFSET $SG85620
	call	_message_box
	add	esp, 16					; 00000010H
; Line 151
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_pgp_fingerprints ENDP
_TEXT	ENDS
PUBLIC	_GetDlgItemText_alloc
EXTRN	_memchr:PROC
EXTRN	__imp__GetDlgItemTextA@16:PROC
EXTRN	_saferealloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -8						; size = 4
_ret$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_id$ = 12						; size = 4
_GetDlgItemText_alloc PROC
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 160
	mov	DWORD PTR _ret$[ebp], 0
; Line 161
	mov	DWORD PTR _size$[ebp], 0
$LN3@GetDlgItem:
; Line 164
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	cdq
	mov	ecx, 3
	idiv	ecx
	add	eax, 512				; 00000200H
	mov	DWORD PTR _size$[ebp], eax
; Line 165
	push	1
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
; Line 166
	mov	esi, esp
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItemTextA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 167
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@GetDlgItem
; Line 169
	mov	eax, DWORD PTR _ret$[ebp]
; Line 170
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetDlgItemText_alloc ENDP
_TEXT	ENDS
PUBLIC	_split_into_argv
EXTRN	_strlen:PROC
EXTRN	_isspace:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv161 = -44						; size = 4
_quotes$85681 = -40					; size = 4
_slashes$85680 = -36					; size = 4
_i$85679 = -32						; size = 4
_quote$85668 = -28					; size = 4
_outputargc$ = -24					; size = 4
_outputargstart$ = -20					; size = 4
_outputargv$ = -16					; size = 4
_q$ = -12						; size = 4
_outputline$ = -8					; size = 4
_p$ = -4						; size = 4
_cmdline$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_argstart$ = 20						; size = 4
_split_into_argv PROC
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN38@split_into:
; Line 303
	mov	eax, DWORD PTR _cmdline$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN37@split_into
	mov	edx, DWORD PTR _cmdline$[ebp]
	movsx	eax, BYTE PTR [edx]
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN37@split_into
	mov	ecx, DWORD PTR _cmdline$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cmdline$[ebp], ecx
	jmp	SHORT $LN38@split_into
$LN37@split_into:
; Line 304
	mov	edx, DWORD PTR _cmdline$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN36@split_into
; Line 305
	cmp	DWORD PTR _argc$[ebp], 0
	je	SHORT $LN35@split_into
	mov	ecx, DWORD PTR _argc$[ebp]
	mov	DWORD PTR [ecx], 0
$LN35@split_into:
; Line 306
	cmp	DWORD PTR _argv$[ebp], 0
	je	SHORT $LN34@split_into
	mov	edx, DWORD PTR _argv$[ebp]
	mov	DWORD PTR [edx], 0
$LN34@split_into:
; Line 307
	cmp	DWORD PTR _argstart$[ebp], 0
	je	SHORT $LN33@split_into
	mov	eax, DWORD PTR _argstart$[ebp]
	mov	DWORD PTR [eax], 0
$LN33@split_into:
; Line 308
	jmp	$LN39@split_into
$LN36@split_into:
; Line 315
	push	1
	mov	ecx, DWORD PTR _cmdline$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _outputline$[ebp], eax
; Line 316
	push	4
	mov	edx, DWORD PTR _cmdline$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _outputargv$[ebp], eax
; Line 317
	push	4
	mov	eax, DWORD PTR _cmdline$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _outputargstart$[ebp], eax
; Line 319
	mov	ecx, DWORD PTR _cmdline$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _outputline$[ebp]
	mov	DWORD PTR _q$[ebp], edx
	mov	DWORD PTR _outputargc$[ebp], 0
$LN32@split_into:
; Line 321
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN31@split_into
$LN30@split_into:
; Line 325
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN29@split_into
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN29@split_into
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN30@split_into
$LN29@split_into:
; Line 326
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN28@split_into
	jmp	$LN31@split_into
$LN28@split_into:
; Line 329
	mov	eax, DWORD PTR _outputargc$[ebp]
	mov	ecx, DWORD PTR _outputargv$[ebp]
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 330
	mov	eax, DWORD PTR _outputargc$[ebp]
	mov	ecx, DWORD PTR _outputargstart$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 331
	mov	eax, DWORD PTR _outputargc$[ebp]
	add	eax, 1
	mov	DWORD PTR _outputargc$[ebp], eax
; Line 332
	mov	DWORD PTR _quote$85668[ebp], 0
$LN27@split_into:
; Line 335
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN26@split_into
; Line 336
	cmp	DWORD PTR _quote$85668[ebp], 0
	jne	SHORT $LN25@split_into
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN25@split_into
; Line 337
	jmp	$LN26@split_into
$LN25@split_into:
; Line 339
	mov	edx, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 34					; 00000022H
	je	SHORT $LN23@split_into
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 92					; 0000005cH
	jne	$LN24@split_into
$LN23@split_into:
; Line 346
	mov	DWORD PTR _slashes$85680[ebp], 0
	mov	DWORD PTR _quotes$85681[ebp], 0
$LN22@split_into:
; Line 347
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN20@split_into
	mov	edx, DWORD PTR _slashes$85680[ebp]
	add	edx, 1
	mov	DWORD PTR _slashes$85680[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN22@split_into
$LN20@split_into:
; Line 348
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	jne	SHORT $LN19@split_into
	mov	eax, DWORD PTR _quotes$85681[ebp]
	add	eax, 1
	mov	DWORD PTR _quotes$85681[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN20@split_into
$LN19@split_into:
; Line 350
	cmp	DWORD PTR _quotes$85681[ebp], 0
	jne	SHORT $LN14@split_into
$LN17@split_into:
; Line 356
	mov	edx, DWORD PTR _slashes$85680[ebp]
	mov	DWORD PTR tv161[ebp], edx
	mov	eax, DWORD PTR _slashes$85680[ebp]
	sub	eax, 1
	mov	DWORD PTR _slashes$85680[ebp], eax
	cmp	DWORD PTR tv161[ebp], 0
	je	SHORT $LN16@split_into
	mov	ecx, DWORD PTR _q$[ebp]
	mov	BYTE PTR [ecx], 92			; 0000005cH
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
	jmp	SHORT $LN17@split_into
$LN16@split_into:
; Line 357
	jmp	$LN15@split_into
$LN14@split_into:
; Line 359
	cmp	DWORD PTR _slashes$85680[ebp], 2
	jl	SHORT $LN13@split_into
	mov	eax, DWORD PTR _slashes$85680[ebp]
	sub	eax, 2
	mov	DWORD PTR _slashes$85680[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]
	mov	BYTE PTR [ecx], 92			; 0000005cH
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
	jmp	SHORT $LN14@split_into
$LN13@split_into:
; Line 362
	cmp	DWORD PTR _slashes$85680[ebp], 0
	je	SHORT $LN12@split_into
	mov	eax, DWORD PTR _quotes$85681[ebp]
	sub	eax, 1
	mov	DWORD PTR _quotes$85681[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]
	mov	BYTE PTR [ecx], 34			; 00000022H
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
$LN12@split_into:
; Line 364
	cmp	DWORD PTR _quotes$85681[ebp], 0
	jle	SHORT $LN15@split_into
; Line 366
	cmp	DWORD PTR _quote$85668[ebp], 0
	jne	SHORT $LN10@split_into
	mov	eax, DWORD PTR _quotes$85681[ebp]
	sub	eax, 1
	mov	DWORD PTR _quotes$85681[ebp], eax
	mov	DWORD PTR _quote$85668[ebp], 1
$LN10@split_into:
; Line 369
	mov	DWORD PTR _i$85679[ebp], 3
	jmp	SHORT $LN9@split_into
$LN8@split_into:
	mov	ecx, DWORD PTR _i$85679[ebp]
	add	ecx, 3
	mov	DWORD PTR _i$85679[ebp], ecx
$LN9@split_into:
	mov	edx, DWORD PTR _quotes$85681[ebp]
	add	edx, 1
	cmp	DWORD PTR _i$85679[ebp], edx
	jg	SHORT $LN7@split_into
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 34			; 00000022H
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$[ebp], ecx
	jmp	SHORT $LN8@split_into
$LN7@split_into:
; Line 372
	mov	eax, DWORD PTR _quotes$85681[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	DWORD PTR _quote$85668[ebp], edx
$LN15@split_into:
; Line 375
	jmp	SHORT $LN6@split_into
$LN24@split_into:
; Line 376
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN6@split_into:
; Line 378
	jmp	$LN27@split_into
$LN26@split_into:
; Line 381
	mov	ecx, DWORD PTR _q$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _q$[ebp]
	add	edx, 1
	mov	DWORD PTR _q$[ebp], edx
; Line 382
	jmp	$LN32@split_into
$LN31@split_into:
; Line 384
	push	4
	mov	eax, DWORD PTR _outputargc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outputargv$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _outputargv$[ebp], eax
; Line 385
	push	4
	mov	edx, DWORD PTR _outputargc$[ebp]
	push	edx
	mov	eax, DWORD PTR _outputargstart$[ebp]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _outputargstart$[ebp], eax
; Line 387
	cmp	DWORD PTR _argc$[ebp], 0
	je	SHORT $LN5@split_into
	mov	ecx, DWORD PTR _argc$[ebp]
	mov	edx, DWORD PTR _outputargc$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@split_into:
; Line 388
	cmp	DWORD PTR _argv$[ebp], 0
	je	SHORT $LN4@split_into
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR _outputargv$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@split_into
$LN4@split_into:
	mov	edx, DWORD PTR _outputargv$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN3@split_into:
; Line 389
	cmp	DWORD PTR _argstart$[ebp], 0
	je	SHORT $LN2@split_into
	mov	eax, DWORD PTR _argstart$[ebp]
	mov	ecx, DWORD PTR _outputargstart$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN39@split_into
$LN2@split_into:
	mov	edx, DWORD PTR _outputargstart$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN39@split_into:
; Line 390
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_split_into_argv ENDP
_TEXT	ENDS
END
