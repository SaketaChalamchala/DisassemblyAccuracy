; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshpubk.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh2_wrong_passphrase
_BSS	SEGMENT
_ssh2_wrong_passphrase DB 0cH DUP (?)
$SG87426 DB	05H DUP (?)
	ALIGN	4

$SG87682 DB	05H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG87092 DB	'error reading file', 00H
	ORG $+1
$SG87094 DB	'file format error', 00H
	ORG $+2
$SG87128 DB	'wrong passphrase', 00H
	ORG $+3
$SG87134 DB	'rsa_verify failed', 00H
	ORG $+2
$SG87150 DB	'rb', 00H
	ORG $+1
$SG87152 DB	'can''t open file', 00H
$SG87155 DB	'SSH PRIVATE KEY FILE FORMAT 1.1', 0aH, 00H
	ORG $+3
$SG87158 DB	'not an SSH-1 RSA file', 00H
	ORG $+2
$SG87168 DB	'rb', 00H
	ORG $+1
$SG87171 DB	'SSH PRIVATE KEY FILE FORMAT 1.1', 0aH, 00H
	ORG $+3
$SG87193 DB	'rb', 00H
	ORG $+1
$SG87195 DB	'can''t open file', 00H
$SG87198 DB	'SSH PRIVATE KEY FILE FORMAT 1.1', 0aH, 00H
	ORG $+3
$SG87203 DB	'not an SSH-1 RSA file', 00H
	ORG $+2
$SG87219 DB	'SSH PRIVATE KEY FILE FORMAT 1.1', 0aH, 00H
	ORG $+3
$SG87243 DB	'wb', 00H
	ORG $+1
$SG87323 DB	'ssh-rsa', 00H
$SG87326 DB	'ssh-dss', 00H
$SG87359 DB	'rb', 00H
	ORG $+1
$SG87361 DB	'can''t open file', 00H
$SG87365 DB	'PuTTY-User-Key-File-2', 00H
	ORG $+2
$SG87368 DB	'PuTTY-User-Key-File-1', 00H
	ORG $+2
$SG87371 DB	'PuTTY-User-Key-File-', 00H
	ORG $+3
$SG87372 DB	'PuTTY key format too new', 00H
	ORG $+3
$SG87374 DB	'not a PuTTY SSH-2 private key', 00H
	ORG $+2
$SG87375 DB	'file format error', 00H
	ORG $+2
$SG87381 DB	'Encryption', 00H
	ORG $+1
$SG87385 DB	'aes256-cbc', 00H
	ORG $+1
$SG87388 DB	'none', 00H
	ORG $+3
$SG87392 DB	'Comment', 00H
$SG87397 DB	'Public-Lines', 00H
	ORG $+3
$SG87404 DB	'Private-Lines', 00H
	ORG $+2
$SG87411 DB	'Private-MAC', 00H
$SG87416 DB	'Private-Hash', 00H
	ORG $+3
$SG87427 DB	00H, 00H, 00H, 01H, 00H
	ORG $+3
$SG87465 DB	'putty-private-key-file-mac-key', 00H
	ORG $+1
$SG87472 DB	'%02x', 00H
	ORG $+3
$SG87475 DB	'wrong passphrase', 00H
	ORG $+3
$SG87477 DB	'MAC failed', 00H
	ORG $+1
$SG87484 DB	'createkey failed', 00H
	ORG $+3
$SG87516 DB	'rb', 00H
	ORG $+1
$SG87518 DB	'can''t open file', 00H
$SG87522 DB	'PuTTY-User-Key-File-2', 00H
	ORG $+2
$SG87523 DB	'PuTTY-User-Key-File-1', 00H
	ORG $+2
$SG87525 DB	'PuTTY-User-Key-File-', 00H
	ORG $+3
$SG87526 DB	'PuTTY key format too new', 00H
	ORG $+3
$SG87528 DB	'not a PuTTY SSH-2 private key', 00H
	ORG $+2
$SG87529 DB	'file format error', 00H
	ORG $+2
$SG87535 DB	'Encryption', 00H
	ORG $+1
$SG87540 DB	'Comment', 00H
$SG87547 DB	'Public-Lines', 00H
	ORG $+3
$SG87570 DB	'rb', 00H
	ORG $+1
$SG87574 DB	'PuTTY-User-Key-File-2', 00H
	ORG $+2
$SG87575 DB	'PuTTY-User-Key-File-1', 00H
	ORG $+2
$SG87580 DB	'Encryption', 00H
	ORG $+1
$SG87585 DB	'Comment', 00H
$SG87591 DB	'aes256-cbc', 00H
	ORG $+1
$SG87638 DB	'aes256-cbc', 00H
	ORG $+1
$SG87640 DB	'none', 00H
	ORG $+3
$SG87644 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'p'
	DB	00H, 'u', 00H, 'b', 00H, 'k', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87655 DB	'putty-private-key-file-mac-key', 00H
	ORG $+1
$SG87684 DB	'w', 00H
	ORG $+2
$SG87645 DB	'p', 00H, 'r', 00H, 'i', 00H, 'v', 00H, '_', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'r', 00H, 'y', 00H, 'p', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'-', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'i', 00H, 'v', 00H, '_'
	DB	00H, 'b', 00H, 'l', 00H, 'o', 00H, 'b', 00H, '_', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '0'
	DB	00H, 00H, 00H
$SG87683 DB	00H, 00H, 00H, 01H, 00H
	ORG $+3
$SG87686 DB	'PuTTY-User-Key-File-2: %s', 0aH, 00H
	ORG $+1
$SG87687 DB	'Encryption: %s', 0aH, 00H
$SG87688 DB	'Comment: %s', 0aH, 00H
	ORG $+3
$SG87689 DB	'Public-Lines: %d', 0aH, 00H
	ORG $+2
$SG87690 DB	'Private-Lines: %d', 0aH, 00H
	ORG $+1
$SG87691 DB	'Private-MAC: ', 00H
	ORG $+2
$SG87695 DB	'%02x', 00H
	ORG $+3
$SG87696 DB	0aH, 00H
	ORG $+2
$SG87703 DB	'PuTTY-User-Key-File-', 00H
	ORG $+3
$SG87705 DB	'---- BEGIN SSH2 ENCRYPTED PRIVAT', 00H
	ORG $+3
$SG87707 DB	'-----BEGIN ', 00H
$SG87709 DB	'r', 00H
	ORG $+2
$SG87714 DB	'SSH PRIVATE KEY FILE FORMAT 1.1', 0aH, 00H
	ORG $+3
$SG87726 DB	'unable to open file', 00H
$SG87728 DB	'not a private key', 00H
	ORG $+2
$SG87730 DB	'SSH-1 private key', 00H
	ORG $+2
$SG87732 DB	'PuTTY SSH-2 private key', 00H
$SG87734 DB	'OpenSSH SSH-2 private key', 00H
	ORG $+2
$SG87736 DB	'ssh.com SSH-2 private key', 00H
	ORG $+2
$SG87738 DB	'INTERNAL ERROR', 00H
_DATA	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_loadrsakey
EXTRN	_fclose:PROC
EXTRN	_strcmp:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshpubk.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_error$ = -92						; size = 4
_ret$ = -84						; size = 4
_buf$ = -76						; size = 64
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_key$ = 12						; size = 4
_passphrase$ = 16					; size = 4
_errorstr$ = 20						; size = 4
_loadrsakey PROC
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 163
	mov	DWORD PTR _ret$[ebp], 0
; Line 164
	mov	DWORD PTR _error$[ebp], 0
; Line 166
	push	OFFSET $SG87150
	mov	eax, DWORD PTR _filename$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 167
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN4@loadrsakey
; Line 168
	mov	DWORD PTR _error$[ebp], OFFSET $SG87152
; Line 169
	jmp	SHORT $end$87153
$LN4@loadrsakey:
; Line 176
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	64					; 00000040H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@loadrsakey
	push	OFFSET $SG87155
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@loadrsakey
; Line 180
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_loadrsakey_main
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax
; Line 181
	mov	DWORD PTR _fp$[ebp], 0
; Line 182
	jmp	SHORT $end$87153
$LN3@loadrsakey:
; Line 188
	mov	DWORD PTR _error$[ebp], OFFSET $SG87158
$end$87153:
; Line 191
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN2@loadrsakey
; Line 192
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN2@loadrsakey:
; Line 193
	cmp	DWORD PTR _ret$[ebp], 1
	je	SHORT $LN1@loadrsakey
	cmp	DWORD PTR _errorstr$[ebp], 0
	je	SHORT $LN1@loadrsakey
; Line 194
	mov	ecx, DWORD PTR _errorstr$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@loadrsakey:
; Line 195
	mov	eax, DWORD PTR _ret$[ebp]
; Line 196
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@loadrsakey
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@loadrsakey:
	DD	2
	DD	$LN9@loadrsakey
$LN9@loadrsakey:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN7@loadrsakey
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN8@loadrsakey
$LN8@loadrsakey:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN7@loadrsakey:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_loadrsakey ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_freersakey:PROC
EXTRN	_rsa_verify:PROC
EXTRN	_ssh1_read_bignum:PROC
EXTRN	_makeprivate:PROC
EXTRN	_smemclr:PROC
EXTRN	_des3_decrypt_pubkey:PROC
EXTRN	_MD5Final:PROC
EXTRN	_MD5Update:PROC
EXTRN	_strlen:PROC
EXTRN	_MD5Init:PROC
EXTRN	_safefree:PROC
EXTRN	_dupstr:PROC
EXTRN	_memcpy:PROC
EXTRN	_safemalloc:PROC
EXTRN	_toint:PROC
EXTRN	_makekey:PROC
EXTRN	_fread:PROC
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_comment$ = -16544					; size = 4
_md5c$ = -16536						; size = 92
_ret$ = -16440						; size = 4
_ciphertype$ = -16436					; size = 4
_j$ = -16432						; size = 4
_i$ = -16428						; size = 4
_len$ = -16424						; size = 4
_keybuf$ = -16416					; size = 16
_buf$ = -16392						; size = 16384
__$ArrayPad$ = -4					; size = 4
_fp$ = 8						; size = 4
_key$ = 12						; size = 4
_pub_only$ = 16						; size = 4
_commentptr$ = 20					; size = 4
_passphrase$ = 24					; size = 4
_error$ = 28						; size = 4
_loadrsakey_main PROC
; Line 27
	push	ebp
	mov	ebp, esp
	mov	eax, 16544				; 000040a0H
	call	__chkstk
	push	edi
	lea	edi, DWORD PTR [ebp-16544]
	mov	ecx, 4136				; 00001028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 32
	mov	DWORD PTR _ret$[ebp], 0
; Line 36
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 0
; Line 39
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	16384					; 00004000H
	push	1
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 40
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
; Line 41
	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN27@loadrsakey@2
	cmp	DWORD PTR _len$[ebp], 16384		; 00004000H
	jne	SHORT $LN28@loadrsakey@2
$LN27@loadrsakey@2:
; Line 42
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], OFFSET $SG87092
; Line 43
	jmp	$end$87093
$LN28@loadrsakey@2:
; Line 46
	mov	DWORD PTR _i$[ebp], 0
; Line 47
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], OFFSET $SG87094
; Line 52
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	cmp	eax, 1
	jl	SHORT $LN25@loadrsakey@2
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx]
	test	edx, edx
	je	SHORT $LN26@loadrsakey@2
$LN25@loadrsakey@2:
; Line 53
	jmp	$end$87093
$LN26@loadrsakey@2:
; Line 54
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 57
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, 1
	jge	SHORT $LN24@loadrsakey@2
; Line 58
	jmp	$end$87093
$LN24@loadrsakey@2:
; Line 59
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx]
	mov	DWORD PTR _ciphertype$[ebp], eax
; Line 60
	cmp	DWORD PTR _ciphertype$[ebp], 0
	je	SHORT $LN23@loadrsakey@2
	cmp	DWORD PTR _ciphertype$[ebp], 3
	je	SHORT $LN23@loadrsakey@2
; Line 61
	jmp	$end$87093
$LN23@loadrsakey@2:
; Line 62
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 63
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	cmp	edx, 4
	jge	SHORT $LN22@loadrsakey@2
; Line 64
	jmp	$end$87093
$LN22@loadrsakey@2:
; Line 66
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax]
	test	ecx, ecx
	jne	SHORT $LN20@loadrsakey@2
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx+1]
	test	eax, eax
	jne	SHORT $LN20@loadrsakey@2
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx+2]
	test	edx, edx
	jne	SHORT $LN20@loadrsakey@2
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax+3]
	test	ecx, ecx
	je	SHORT $LN21@loadrsakey@2
$LN20@loadrsakey@2:
	jmp	$end$87093
$LN21@loadrsakey@2:
; Line 67
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 4
	mov	DWORD PTR _i$[ebp], edx
; Line 70
	push	1
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _buf$[ebp+edx]
	push	eax
	call	_makekey
	add	esp, 20					; 00000014H
	mov	DWORD PTR _j$[ebp], eax
; Line 71
	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN19@loadrsakey@2
; Line 72
	jmp	$end$87093
$LN19@loadrsakey@2:
; Line 73
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
; Line 76
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx+3]
	or	eax, edx
	push	eax
	call	_toint
	add	esp, 4
	mov	DWORD PTR _j$[ebp], eax
; Line 77
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 78
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN17@loadrsakey@2
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _j$[ebp]
	jge	SHORT $LN18@loadrsakey@2
$LN17@loadrsakey@2:
; Line 79
	jmp	$end$87093
$LN18@loadrsakey@2:
; Line 80
	push	1
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _comment$[ebp], eax
; Line 81
	cmp	DWORD PTR _comment$[ebp], 0
	je	SHORT $LN16@loadrsakey@2
; Line 82
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR _buf$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 83
	mov	ecx, DWORD PTR _comment$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	BYTE PTR [ecx], 0
$LN16@loadrsakey@2:
; Line 85
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], edx
; Line 86
	cmp	DWORD PTR _commentptr$[ebp], 0
	je	SHORT $LN15@loadrsakey@2
; Line 87
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _commentptr$[ebp]
	mov	DWORD PTR [ecx], eax
$LN15@loadrsakey@2:
; Line 88
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN14@loadrsakey@2
; Line 89
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR _comment$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 90
	jmp	SHORT $LN13@loadrsakey@2
$LN14@loadrsakey@2:
; Line 91
	mov	ecx, DWORD PTR _comment$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN13@loadrsakey@2:
; Line 93
	cmp	DWORD PTR _pub_only$[ebp], 0
	je	SHORT $LN12@loadrsakey@2
; Line 94
	mov	DWORD PTR _ret$[ebp], 1
; Line 95
	jmp	$end$87093
$LN12@loadrsakey@2:
; Line 98
	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN11@loadrsakey@2
; Line 99
	xor	edx, edx
	cmp	DWORD PTR _ciphertype$[ebp], 0
	setne	dl
	mov	DWORD PTR _ret$[ebp], edx
; Line 100
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 0
; Line 101
	jmp	$end$87093
$LN11@loadrsakey@2:
; Line 107
	cmp	DWORD PTR _ciphertype$[ebp], 0
	je	$LN10@loadrsakey@2
; Line 108
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Init
	add	esp, 4
; Line 109
	mov	edx, DWORD PTR _passphrase$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 110
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	lea	eax, DWORD PTR _keybuf$[ebp]
	push	eax
	call	_MD5Final
	add	esp, 8
; Line 111
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	add	ecx, 7
	and	ecx, -8					; fffffff8H
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _buf$[ebp+edx]
	push	eax
	lea	ecx, DWORD PTR _keybuf$[ebp]
	push	ecx
	call	_des3_decrypt_pubkey
	add	esp, 12					; 0000000cH
; Line 112
	push	16					; 00000010H
	lea	edx, DWORD PTR _keybuf$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
$LN10@loadrsakey@2:
; Line 119
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	cmp	eax, 4
	jge	SHORT $LN9@loadrsakey@2
; Line 120
	jmp	$end$87093
$LN9@loadrsakey@2:
; Line 121
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax+2]
	cmp	edx, ecx
	jne	SHORT $LN7@loadrsakey@2
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx+1]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx+3]
	cmp	eax, edx
	je	SHORT $LN8@loadrsakey@2
$LN7@loadrsakey@2:
; Line 122
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], OFFSET $SG87128
; Line 123
	mov	DWORD PTR _ret$[ebp], -1
; Line 124
	jmp	$end$87093
$LN8@loadrsakey@2:
; Line 126
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 4
	mov	DWORD PTR _i$[ebp], ecx
; Line 133
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR _buf$[ebp+ecx]
	push	edx
	call	_makeprivate
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _j$[ebp], eax
; Line 134
	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN6@loadrsakey@2
	jmp	$end$87093
$LN6@loadrsakey@2:
; Line 135
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 136
	mov	ecx, DWORD PTR _key$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _buf$[ebp+eax]
	push	ecx
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _j$[ebp], eax
; Line 137
	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN5@loadrsakey@2
	jmp	$end$87093
$LN5@loadrsakey@2:
; Line 138
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], edx
; Line 139
	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _buf$[ebp+edx]
	push	eax
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _j$[ebp], eax
; Line 140
	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN4@loadrsakey@2
	jmp	$end$87093
$LN4@loadrsakey@2:
; Line 141
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
; Line 142
	mov	edx, DWORD PTR _key$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR _buf$[ebp+ecx]
	push	edx
	call	_ssh1_read_bignum
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _j$[ebp], eax
; Line 143
	cmp	DWORD PTR _j$[ebp], 0
	jge	SHORT $LN3@loadrsakey@2
	jmp	SHORT $end$87093
$LN3@loadrsakey@2:
; Line 144
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 146
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_rsa_verify
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@loadrsakey@2
; Line 147
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], OFFSET $SG87134
; Line 148
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_freersakey
	add	esp, 4
; Line 149
	mov	DWORD PTR _ret$[ebp], 0
; Line 150
	jmp	SHORT $end$87093
$LN2@loadrsakey@2:
; Line 151
	mov	DWORD PTR _ret$[ebp], 1
$end$87093:
; Line 154
	push	16384					; 00004000H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 155
	mov	eax, DWORD PTR _ret$[ebp]
; Line 156
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@loadrsakey@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16544				; 000040a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@loadrsakey@2:
	DD	3
	DD	$LN34@loadrsakey@2
$LN34@loadrsakey@2:
	DD	-16392					; ffffbff8H
	DD	16384					; 00004000H
	DD	$LN31@loadrsakey@2
	DD	-16416					; ffffbfe0H
	DD	16					; 00000010H
	DD	$LN32@loadrsakey@2
	DD	-16536					; ffffbf68H
	DD	92					; 0000005cH
	DD	$LN33@loadrsakey@2
$LN33@loadrsakey@2:
	DB	109					; 0000006dH
	DB	100					; 00000064H
	DB	53					; 00000035H
	DB	99					; 00000063H
	DB	0
$LN32@loadrsakey@2:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN31@loadrsakey@2:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_loadrsakey_main ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_rsakey_encrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dummy$87172 = -88					; size = 4
_buf$ = -76						; size = 64
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_comment$ = 12						; size = 4
_rsakey_encrypted PROC
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 207
	push	OFFSET $SG87168
	mov	eax, DWORD PTR _filename$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 208
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN2@rsakey_enc
; Line 209
	xor	eax, eax
	jmp	SHORT $LN3@rsakey_enc
$LN2@rsakey_enc:
; Line 215
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	64					; 00000040H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@rsakey_enc
	push	OFFSET $SG87171
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@rsakey_enc
; Line 220
	lea	edx, DWORD PTR _dummy$87172[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_loadrsakey_main
	add	esp, 24					; 00000018H
	jmp	SHORT $LN3@rsakey_enc
$LN1@rsakey_enc:
; Line 222
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 223
	xor	eax, eax
$LN3@rsakey_enc:
; Line 224
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@rsakey_enc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@rsakey_enc:
	DD	2
	DD	$LN7@rsakey_enc
$LN7@rsakey_enc:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN5@rsakey_enc
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN6@rsakey_enc
$LN6@rsakey_enc:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN5@rsakey_enc:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_rsakey_encrypted ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_rsakey_pubblob
EXTRN	_rsa_public_blob:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_error$ = -136						; size = 4
_ret$ = -128						; size = 4
_key$ = -120						; size = 36
_buf$ = -76						; size = 64
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_blob$ = 12						; size = 4
_bloblen$ = 16						; size = 4
_commentptr$ = 20					; size = 4
_errorstr$ = 24						; size = 4
_rsakey_pubblob PROC
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 238
	mov	DWORD PTR _error$[ebp], 0
; Line 241
	mov	eax, DWORD PTR _blob$[ebp]
	mov	DWORD PTR [eax], 0
; Line 242
	mov	ecx, DWORD PTR _bloblen$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 243
	mov	DWORD PTR _ret$[ebp], 0
; Line 245
	push	OFFSET $SG87193
	mov	edx, DWORD PTR _filename$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 246
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN6@rsakey_pub
; Line 247
	mov	DWORD PTR _error$[ebp], OFFSET $SG87195
; Line 248
	jmp	$end$87196
$LN6@rsakey_pub:
; Line 255
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	push	64					; 00000040H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@rsakey_pub
	push	OFFSET $SG87198
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@rsakey_pub
; Line 256
	push	36					; 00000024H
	push	0
	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 257
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _commentptr$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_loadrsakey_main
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN4@rsakey_pub
; Line 258
	mov	eax, DWORD PTR _bloblen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_rsa_public_blob
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	mov	DWORD PTR [edx], eax
; Line 259
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_freersakey
	add	esp, 4
; Line 260
	mov	DWORD PTR _ret$[ebp], 1
$LN4@rsakey_pub:
; Line 262
	mov	DWORD PTR _fp$[ebp], 0
; Line 263
	jmp	SHORT $end$87196
$LN5@rsakey_pub:
; Line 264
	mov	DWORD PTR _error$[ebp], OFFSET $SG87203
$end$87196:
; Line 268
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN2@rsakey_pub
; Line 269
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
$LN2@rsakey_pub:
; Line 270
	cmp	DWORD PTR _ret$[ebp], 1
	je	SHORT $LN1@rsakey_pub
	cmp	DWORD PTR _errorstr$[ebp], 0
	je	SHORT $LN1@rsakey_pub
; Line 271
	mov	edx, DWORD PTR _errorstr$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@rsakey_pub:
; Line 272
	mov	eax, DWORD PTR _ret$[ebp]
; Line 273
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@rsakey_pub
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@rsakey_pub:
	DD	3
	DD	$LN12@rsakey_pub
$LN12@rsakey_pub:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN9@rsakey_pub
	DD	-120					; ffffff88H
	DD	36					; 00000024H
	DD	$LN10@rsakey_pub
	DD	-136					; ffffff78H
	DD	4
	DD	$LN11@rsakey_pub
$LN11@rsakey_pub:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN10@rsakey_pub:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN9@rsakey_pub:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_rsakey_pubblob ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_saversakey
EXTRN	_fwrite:PROC
EXTRN	_des3_encrypt_pubkey:PROC
EXTRN	_random_byte:PROC
EXTRN	_ssh1_write_bignum:PROC
EXTRN	_bignum_bitcount:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$87245 = -16536					; size = 4
_fp$ = -16532						; size = 4
_estart$ = -16528					; size = 4
_p$ = -16524						; size = 4
_md5c$ = -16516						; size = 92
_keybuf$ = -16416					; size = 16
_buf$ = -16392						; size = 16384
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_key$ = 12						; size = 4
_passphrase$ = 16					; size = 4
_saversakey PROC
; Line 279
	push	ebp
	mov	ebp, esp
	mov	eax, 16536				; 00004098H
	call	__chkstk
	push	edi
	lea	edi, DWORD PTR [ebp-16536]
	mov	ecx, 4134				; 00001026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 289
	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 290
	push	33					; 00000021H
	push	OFFSET $SG87219
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 291
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 33					; 00000021H
	mov	DWORD PTR _p$[ebp], edx
; Line 297
	mov	eax, DWORD PTR _passphrase$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 298
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+3], 0
; Line 299
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 306
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	sar	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 307
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 308
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 309
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 314
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	$LN8@saversakey
; Line 315
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_strlen
	add	esp, 4
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_strlen
	add	esp, 4
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_strlen
	add	esp, 4
	shr	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 316
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 317
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 318
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 319
	jmp	SHORT $LN7@saversakey
$LN8@saversakey:
; Line 320
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+1], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+2], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+3], 0
; Line 321
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
$LN7@saversakey:
; Line 327
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _estart$[ebp], eax
; Line 332
	call	_random_byte
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 333
	call	_random_byte
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 334
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx-2]
	mov	BYTE PTR [eax], dl
; Line 335
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx-1]
	mov	BYTE PTR [eax+1], dl
; Line 336
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 342
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 343
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 344
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 345
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ssh1_write_bignum
	add	esp, 8
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN6@saversakey:
; Line 351
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _estart$[ebp]
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN16@saversakey
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN16@saversakey:
	test	ecx, ecx
	je	SHORT $LN5@saversakey
; Line 352
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN6@saversakey
$LN5@saversakey:
; Line 357
	cmp	DWORD PTR _passphrase$[ebp], 0
	je	SHORT $LN4@saversakey
; Line 358
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Init
	add	esp, 4
; Line 359
	mov	edx, DWORD PTR _passphrase$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 360
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	lea	eax, DWORD PTR _keybuf$[ebp]
	push	eax
	call	_MD5Final
	add	esp, 8
; Line 361
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _estart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _estart$[ebp]
	push	edx
	lea	eax, DWORD PTR _keybuf$[ebp]
	push	eax
	call	_des3_encrypt_pubkey
	add	esp, 12					; 0000000cH
; Line 362
	push	16					; 00000010H
	lea	ecx, DWORD PTR _keybuf$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
$LN4@saversakey:
; Line 368
	push	OFFSET $SG87243
	mov	edx, DWORD PTR _filename$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 369
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN3@saversakey
; Line 370
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR _buf$[ebp]
	sub	edx, eax
	push	edx
	push	1
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR _buf$[ebp]
	sub	edx, ecx
	xor	ecx, ecx
	cmp	eax, edx
	sete	cl
	mov	DWORD PTR _ret$87245[ebp], ecx
; Line 371
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@saversakey
; Line 372
	mov	DWORD PTR _ret$87245[ebp], 0
$LN2@saversakey:
; Line 373
	mov	eax, DWORD PTR _ret$87245[ebp]
	jmp	SHORT $LN9@saversakey
; Line 374
	jmp	SHORT $LN9@saversakey
$LN3@saversakey:
; Line 375
	xor	eax, eax
$LN9@saversakey:
; Line 376
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@saversakey
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16536				; 00004098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@saversakey:
	DD	3
	DD	$LN14@saversakey
$LN14@saversakey:
	DD	-16392					; ffffbff8H
	DD	16384					; 00004000H
	DD	$LN11@saversakey
	DD	-16416					; ffffbfe0H
	DD	16					; 00000010H
	DD	$LN12@saversakey
	DD	-16516					; ffffbf7cH
	DD	92					; 0000005cH
	DD	$LN13@saversakey
$LN13@saversakey:
	DB	109					; 0000006dH
	DB	100					; 00000064H
	DB	53					; 00000035H
	DB	99					; 00000063H
	DB	0
$LN12@saversakey:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN11@saversakey:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_saversakey ENDP
_TEXT	ENDS
PUBLIC	_find_pubkey_alg
EXTRN	_ssh_dss:BYTE
EXTRN	_ssh_rsa:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = 8						; size = 4
_find_pubkey_alg PROC
; Line 561
	push	ebp
	mov	ebp, esp
; Line 562
	push	OFFSET $SG87323
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@find_pubke
; Line 563
	mov	eax, OFFSET _ssh_rsa
	jmp	SHORT $LN5@find_pubke
	jmp	SHORT $LN5@find_pubke
$LN4@find_pubke:
; Line 564
	push	OFFSET $SG87326
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@find_pubke
; Line 565
	mov	eax, OFFSET _ssh_dss
	jmp	SHORT $LN5@find_pubke
; Line 566
	jmp	SHORT $LN5@find_pubke
$LN2@find_pubke:
; Line 567
	xor	eax, eax
$LN5@find_pubke:
; Line 568
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_find_pubkey_alg ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ssh2_load_userkey
EXTRN	_sprintf:PROC
EXTRN	_SHA_Simple:PROC
EXTRN	_hmac_sha1_simple:PROC
EXTRN	_aes256_decrypt_pubkey:PROC
EXTRN	_SHA_Final:PROC
EXTRN	_SHA_Bytes:PROC
EXTRN	_SHA_Init:PROC
EXTRN	_atoi:PROC
EXTRN	_strncmp:PROC
EXTRN	_old_keyfile_warning:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -580						; size = 4
$T87803 = -573						; size = 1
_header$87464 = -568					; size = 31
_mackey$87463 = -528					; size = 20
_s$87462 = -500						; size = 96
_commlen$87438 = -400					; size = 4
_enclen$87437 = -396					; size = 4
_namelen$87436 = -392					; size = 4
_p$87435 = -388						; size = 4
_free_macdata$87432 = -384				; size = 4
_maclen$87431 = -380					; size = 4
_macdata$87430 = -376					; size = 4
_binary$87429 = -368					; size = 20
_realmac$87428 = -340					; size = 41
_s$87423 = -288						; size = 96
_key$87422 = -184					; size = 40
_error$ = -140						; size = 4
_passlen$ = -136					; size = 4
_old_fmt$ = -132					; size = 4
_is_mac$ = -128						; size = 4
_i$ = -124						; size = 4
_private_blob_len$ = -116				; size = 4
_public_blob_len$ = -104				; size = 4
_private_blob$ = -96					; size = 4
_public_blob$ = -92					; size = 4
_cipherblk$ = -88					; size = 4
_cipher$ = -84						; size = 4
_ret$ = -80						; size = 4
_alg$ = -76						; size = 4
_mac$ = -72						; size = 4
_comment$ = -68						; size = 4
_encryption$ = -64					; size = 4
_b$ = -60						; size = 4
_header$ = -52						; size = 40
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_passphrase$ = 12					; size = 4
_errorstr$ = 16						; size = 4
_ssh2_load_userkey PROC
; Line 572
	push	ebp
	mov	ebp, esp
	sub	esp, 580				; 00000244H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-580]
	mov	ecx, 145				; 00000091H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	BYTE PTR $T87803[ebp], 0
; Line 581
	cmp	DWORD PTR _passphrase$[ebp], 0
	je	SHORT $LN62@ssh2_load_
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN63@ssh2_load_
$LN62@ssh2_load_:
	mov	DWORD PTR tv67[ebp], 0
$LN63@ssh2_load_:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _passlen$[ebp], ecx
; Line 582
	mov	DWORD PTR _error$[ebp], 0
; Line 584
	mov	DWORD PTR _ret$[ebp], 0
; Line 585
	mov	DWORD PTR _mac$[ebp], 0
	mov	edx, DWORD PTR _mac$[ebp]
	mov	DWORD PTR _comment$[ebp], edx
	mov	eax, DWORD PTR _comment$[ebp]
	mov	DWORD PTR _encryption$[ebp], eax
; Line 586
	mov	DWORD PTR _private_blob$[ebp], 0
	mov	ecx, DWORD PTR _private_blob$[ebp]
	mov	DWORD PTR _public_blob$[ebp], ecx
; Line 588
	push	OFFSET $SG87359
	mov	edx, DWORD PTR _filename$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 589
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN59@ssh2_load_
; Line 590
	mov	DWORD PTR _error$[ebp], OFFSET $SG87361
; Line 591
	jmp	$error$87362
$LN59@ssh2_load_:
; Line 595
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_header
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN58@ssh2_load_
; Line 596
	jmp	$error$87362
$LN58@ssh2_load_:
; Line 597
	push	OFFSET $SG87365
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN57@ssh2_load_
; Line 598
	mov	DWORD PTR _old_fmt$[ebp], 0
	jmp	SHORT $LN56@ssh2_load_
$LN57@ssh2_load_:
; Line 599
	push	OFFSET $SG87368
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN55@ssh2_load_
; Line 601
	call	_old_keyfile_warning
; Line 602
	mov	DWORD PTR _old_fmt$[ebp], 1
	jmp	SHORT $LN56@ssh2_load_
$LN55@ssh2_load_:
; Line 603
	push	20					; 00000014H
	push	OFFSET $SG87371
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN53@ssh2_load_
; Line 606
	mov	DWORD PTR _error$[ebp], OFFSET $SG87372
; Line 607
	jmp	$error$87362
; Line 608
	jmp	SHORT $LN56@ssh2_load_
$LN53@ssh2_load_:
; Line 609
	mov	DWORD PTR _error$[ebp], OFFSET $SG87374
; Line 610
	jmp	$error$87362
$LN56@ssh2_load_:
; Line 612
	mov	DWORD PTR _error$[ebp], OFFSET $SG87375
; Line 613
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN51@ssh2_load_
; Line 614
	jmp	$error$87362
$LN51@ssh2_load_:
; Line 616
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_find_pubkey_alg
	add	esp, 4
	mov	DWORD PTR _alg$[ebp], eax
; Line 617
	cmp	DWORD PTR _alg$[ebp], 0
	jne	SHORT $LN50@ssh2_load_
; Line 618
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 619
	jmp	$error$87362
$LN50@ssh2_load_:
; Line 621
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 624
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN48@ssh2_load_
	push	OFFSET $SG87381
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN49@ssh2_load_
$LN48@ssh2_load_:
; Line 625
	jmp	$error$87362
$LN49@ssh2_load_:
; Line 626
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _encryption$[ebp], eax
	cmp	DWORD PTR _encryption$[ebp], 0
	jne	SHORT $LN47@ssh2_load_
; Line 627
	jmp	$error$87362
$LN47@ssh2_load_:
; Line 628
	push	OFFSET $SG87385
	mov	edx, DWORD PTR _encryption$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN46@ssh2_load_
; Line 629
	mov	DWORD PTR _cipher$[ebp], 1
; Line 630
	mov	DWORD PTR _cipherblk$[ebp], 16		; 00000010H
	jmp	SHORT $LN45@ssh2_load_
$LN46@ssh2_load_:
; Line 631
	push	OFFSET $SG87388
	mov	eax, DWORD PTR _encryption$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN44@ssh2_load_
; Line 632
	mov	DWORD PTR _cipher$[ebp], 0
; Line 633
	mov	DWORD PTR _cipherblk$[ebp], 1
; Line 634
	jmp	SHORT $LN45@ssh2_load_
$LN44@ssh2_load_:
; Line 635
	jmp	$error$87362
$LN45@ssh2_load_:
; Line 639
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN41@ssh2_load_
	push	OFFSET $SG87392
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN42@ssh2_load_
$LN41@ssh2_load_:
; Line 640
	jmp	$error$87362
$LN42@ssh2_load_:
; Line 641
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _comment$[ebp], eax
	cmp	DWORD PTR _comment$[ebp], 0
	jne	SHORT $LN40@ssh2_load_
; Line 642
	jmp	$error$87362
$LN40@ssh2_load_:
; Line 645
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN38@ssh2_load_
	push	OFFSET $SG87397
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN39@ssh2_load_
$LN38@ssh2_load_:
; Line 646
	jmp	$error$87362
$LN39@ssh2_load_:
; Line 647
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN37@ssh2_load_
; Line 648
	jmp	$error$87362
$LN37@ssh2_load_:
; Line 649
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 650
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 651
	lea	edx, DWORD PTR _public_blob_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_blob
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _public_blob$[ebp], eax
	cmp	DWORD PTR _public_blob$[ebp], 0
	jne	SHORT $LN36@ssh2_load_
; Line 652
	jmp	$error$87362
$LN36@ssh2_load_:
; Line 655
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@ssh2_load_
	push	OFFSET $SG87404
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN35@ssh2_load_
$LN34@ssh2_load_:
; Line 656
	jmp	$error$87362
$LN35@ssh2_load_:
; Line 657
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN33@ssh2_load_
; Line 658
	jmp	$error$87362
$LN33@ssh2_load_:
; Line 659
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 660
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 661
	mov	BYTE PTR $T87803[ebp], 1
	lea	edx, DWORD PTR _private_blob_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_blob
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _private_blob$[ebp], eax
	cmp	DWORD PTR _private_blob$[ebp], 0
	jne	SHORT $LN32@ssh2_load_
; Line 662
	jmp	$error$87362
$LN32@ssh2_load_:
; Line 665
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@ssh2_load_
; Line 666
	jmp	$error$87362
$LN31@ssh2_load_:
; Line 667
	push	OFFSET $SG87411
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN30@ssh2_load_
; Line 668
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _mac$[ebp], eax
	cmp	DWORD PTR _mac$[ebp], 0
	jne	SHORT $LN29@ssh2_load_
; Line 669
	jmp	$error$87362
$LN29@ssh2_load_:
; Line 670
	mov	DWORD PTR _is_mac$[ebp], 1
	jmp	SHORT $LN28@ssh2_load_
$LN30@ssh2_load_:
; Line 671
	push	OFFSET $SG87416
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@ssh2_load_
	cmp	DWORD PTR _old_fmt$[ebp], 0
	je	SHORT $LN27@ssh2_load_
; Line 672
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _mac$[ebp], eax
	cmp	DWORD PTR _mac$[ebp], 0
	jne	SHORT $LN26@ssh2_load_
; Line 673
	jmp	$error$87362
$LN26@ssh2_load_:
; Line 674
	mov	DWORD PTR _is_mac$[ebp], 0
; Line 675
	jmp	SHORT $LN28@ssh2_load_
$LN27@ssh2_load_:
; Line 676
	jmp	$error$87362
$LN28@ssh2_load_:
; Line 678
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 679
	mov	DWORD PTR _fp$[ebp], 0
; Line 684
	cmp	DWORD PTR _cipher$[ebp], 0
	je	$LN24@ssh2_load_
; Line 688
	cmp	DWORD PTR _passphrase$[ebp], 0
	jne	SHORT $LN23@ssh2_load_
; Line 689
	jmp	$error$87362
$LN23@ssh2_load_:
; Line 690
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN64@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN64@ssh2_load_:
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	cdq
	idiv	DWORD PTR _cipherblk$[ebp]
	test	edx, edx
	je	SHORT $LN22@ssh2_load_
; Line 691
	jmp	$error$87362
$LN22@ssh2_load_:
; Line 693
	lea	eax, DWORD PTR _s$87423[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 694
	push	4
	push	OFFSET $SG87426
	lea	ecx, DWORD PTR _s$87423[ebp]
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 695
	mov	edx, DWORD PTR _passlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$87423[ebp]
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 696
	lea	edx, DWORD PTR _key$87422[ebp]
	push	edx
	lea	eax, DWORD PTR _s$87423[ebp]
	push	eax
	call	_SHA_Final
	add	esp, 8
; Line 697
	lea	ecx, DWORD PTR _s$87423[ebp]
	push	ecx
	call	_SHA_Init
	add	esp, 4
; Line 698
	push	4
	push	OFFSET $SG87427
	lea	edx, DWORD PTR _s$87423[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 699
	mov	eax, DWORD PTR _passlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passphrase$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$87423[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 700
	lea	eax, DWORD PTR _key$87422[ebp+20]
	push	eax
	lea	ecx, DWORD PTR _s$87423[ebp]
	push	ecx
	call	_SHA_Final
	add	esp, 8
; Line 701
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN66@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN66@ssh2_load_:
	mov	edx, DWORD PTR _private_blob_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _private_blob$[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$87422[ebp]
	push	ecx
	call	_aes256_decrypt_pubkey
	add	esp, 12					; 0000000cH
$LN24@ssh2_load_:
; Line 714
	cmp	DWORD PTR _old_fmt$[ebp], 0
	je	SHORT $LN21@ssh2_load_
; Line 716
	mov	edx, DWORD PTR _private_blob$[ebp]
	mov	DWORD PTR _macdata$87430[ebp], edx
; Line 717
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN67@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN67@ssh2_load_:
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	mov	DWORD PTR _maclen$87431[ebp], eax
; Line 718
	mov	DWORD PTR _free_macdata$87432[ebp], 0
; Line 719
	jmp	$LN20@ssh2_load_
$LN21@ssh2_load_:
; Line 721
	mov	ecx, DWORD PTR _alg$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _namelen$87436[ebp], eax
; Line 722
	mov	eax, DWORD PTR _encryption$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _enclen$87437[ebp], eax
; Line 723
	mov	ecx, DWORD PTR _comment$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _commlen$87438[ebp], eax
; Line 728
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN68@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN68@ssh2_load_:
	mov	edx, DWORD PTR _enclen$87437[ebp]
	mov	eax, DWORD PTR _namelen$87436[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR _commlen$87438[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR _public_blob_len$[ebp]
	lea	edx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	lea	ecx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _maclen$87431[ebp], ecx
; Line 729
	push	1
	mov	edx, DWORD PTR _maclen$87431[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _macdata$87430[ebp], eax
; Line 730
	mov	eax, DWORD PTR _macdata$87430[ebp]
	mov	DWORD PTR _p$87435[ebp], eax
; Line 732
	mov	ecx, DWORD PTR _namelen$87436[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _namelen$87436[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _namelen$87436[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	dl, BYTE PTR _namelen$87436[ebp]
	mov	BYTE PTR [ecx+3], dl
	mov	eax, DWORD PTR _namelen$87436[ebp]
	push	eax
	mov	ecx, DWORD PTR _alg$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _p$87435[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _namelen$87436[ebp]
	mov	edx, DWORD PTR _p$87435[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _p$87435[ebp], eax
; Line 733
	mov	ecx, DWORD PTR _enclen$87437[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _enclen$87437[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _enclen$87437[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	dl, BYTE PTR _enclen$87437[ebp]
	mov	BYTE PTR [ecx+3], dl
	mov	eax, DWORD PTR _enclen$87437[ebp]
	push	eax
	mov	ecx, DWORD PTR _encryption$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$87435[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _enclen$87437[ebp]
	mov	ecx, DWORD PTR _p$87435[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _p$87435[ebp], edx
; Line 734
	mov	eax, DWORD PTR _commlen$87438[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _commlen$87438[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _commlen$87438[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$87435[ebp]
	mov	cl, BYTE PTR _commlen$87438[ebp]
	mov	BYTE PTR [eax+3], cl
	mov	edx, DWORD PTR _commlen$87438[ebp]
	push	edx
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$87435[ebp]
	add	ecx, 4
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _commlen$87438[ebp]
	mov	eax, DWORD PTR _p$87435[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _p$87435[ebp], ecx
; Line 735
	mov	edx, DWORD PTR _public_blob_len$[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _public_blob_len$[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _public_blob_len$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _p$87435[ebp]
	mov	al, BYTE PTR _public_blob_len$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	ecx, DWORD PTR _public_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _public_blob$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$87435[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _public_blob_len$[ebp]
	mov	edx, DWORD PTR _p$87435[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _p$87435[ebp], eax
; Line 736
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN69@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN69@ssh2_load_:
	mov	ecx, DWORD PTR _private_blob_len$[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [edx], cl
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN70@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN70@ssh2_load_:
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [ecx+1], al
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN71@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN71@ssh2_load_:
	mov	edx, DWORD PTR _private_blob_len$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _p$87435[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _p$87435[ebp]
	mov	dl, BYTE PTR _private_blob_len$[ebp]
	mov	BYTE PTR [ecx+3], dl
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN72@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN72@ssh2_load_:
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _private_blob$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$87435[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN73@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN73@ssh2_load_:
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	mov	ecx, DWORD PTR _p$87435[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _p$87435[ebp], edx
; Line 738
	mov	DWORD PTR _free_macdata$87432[ebp], 1
$LN20@ssh2_load_:
; Line 741
	cmp	DWORD PTR _is_mac$[ebp], 0
	je	$LN19@ssh2_load_
; Line 744
	mov	ecx, 7
	mov	esi, OFFSET $SG87465
	lea	edi, DWORD PTR _header$87464[ebp]
	rep movsd
	movsw
	movsb
; Line 746
	lea	eax, DWORD PTR _s$87462[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 747
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _header$87464[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$87462[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 748
	cmp	DWORD PTR _cipher$[ebp], 0
	je	SHORT $LN18@ssh2_load_
	cmp	DWORD PTR _passphrase$[ebp], 0
	je	SHORT $LN18@ssh2_load_
; Line 749
	mov	eax, DWORD PTR _passlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passphrase$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$87462[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
$LN18@ssh2_load_:
; Line 750
	lea	eax, DWORD PTR _mackey$87463[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$87462[ebp]
	push	ecx
	call	_SHA_Final
	add	esp, 8
; Line 752
	lea	edx, DWORD PTR _binary$87429[ebp]
	push	edx
	mov	eax, DWORD PTR _maclen$87431[ebp]
	push	eax
	mov	ecx, DWORD PTR _macdata$87430[ebp]
	push	ecx
	push	20					; 00000014H
	lea	edx, DWORD PTR _mackey$87463[ebp]
	push	edx
	call	_hmac_sha1_simple
	add	esp, 20					; 00000014H
; Line 754
	push	20					; 00000014H
	lea	eax, DWORD PTR _mackey$87463[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 755
	push	96					; 00000060H
	lea	ecx, DWORD PTR _s$87462[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 756
	jmp	SHORT $LN17@ssh2_load_
$LN19@ssh2_load_:
; Line 757
	lea	edx, DWORD PTR _binary$87429[ebp]
	push	edx
	mov	eax, DWORD PTR _maclen$87431[ebp]
	push	eax
	mov	ecx, DWORD PTR _macdata$87430[ebp]
	push	ecx
	call	_SHA_Simple
	add	esp, 12					; 0000000cH
$LN17@ssh2_load_:
; Line 760
	cmp	DWORD PTR _free_macdata$87432[ebp], 0
	je	SHORT $LN16@ssh2_load_
; Line 761
	mov	edx, DWORD PTR _maclen$87431[ebp]
	push	edx
	mov	eax, DWORD PTR _macdata$87430[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 762
	mov	ecx, DWORD PTR _macdata$87430[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN16@ssh2_load_:
; Line 765
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@ssh2_load_
$LN14@ssh2_load_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@ssh2_load_:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN13@ssh2_load_
; Line 766
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _binary$87429[ebp+eax]
	push	ecx
	push	OFFSET $SG87472
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _realmac$87428[ebp+edx*2]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN14@ssh2_load_
$LN13@ssh2_load_:
; Line 768
	lea	ecx, DWORD PTR _realmac$87428[ebp]
	push	ecx
	mov	edx, DWORD PTR _mac$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@ssh2_load_
; Line 771
	cmp	DWORD PTR _cipher$[ebp], 0
	je	SHORT $LN11@ssh2_load_
; Line 772
	mov	DWORD PTR _error$[ebp], OFFSET $SG87475
; Line 773
	mov	DWORD PTR _ret$[ebp], OFFSET _ssh2_wrong_passphrase
; Line 774
	jmp	SHORT $LN10@ssh2_load_
$LN11@ssh2_load_:
; Line 775
	mov	DWORD PTR _error$[ebp], OFFSET $SG87477
; Line 776
	mov	DWORD PTR _ret$[ebp], 0
$LN10@ssh2_load_:
; Line 778
	jmp	$error$87362
$LN12@ssh2_load_:
; Line 781
	mov	eax, DWORD PTR _mac$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 782
	mov	DWORD PTR _mac$[ebp], 0
; Line 787
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 788
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _alg$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 789
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _comment$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 791
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN74@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN74@ssh2_load_:
	mov	esi, esp
	mov	edx, DWORD PTR _private_blob_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _private_blob$[ebp]
	push	eax
	mov	ecx, DWORD PTR _public_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _public_blob$[ebp]
	push	edx
	mov	eax, DWORD PTR _alg$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 792
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@ssh2_load_
; Line 793
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 794
	mov	DWORD PTR _ret$[ebp], 0
; Line 795
	mov	DWORD PTR _error$[ebp], OFFSET $SG87484
; Line 796
	jmp	SHORT $error$87362
$LN9@ssh2_load_:
; Line 798
	mov	edx, DWORD PTR _public_blob$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 799
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN75@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN75@ssh2_load_:
	mov	eax, DWORD PTR _private_blob_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _private_blob$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 800
	mov	edx, DWORD PTR _private_blob$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 801
	mov	eax, DWORD PTR _encryption$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 802
	cmp	DWORD PTR _errorstr$[ebp], 0
	je	SHORT $LN8@ssh2_load_
; Line 803
	mov	ecx, DWORD PTR _errorstr$[ebp]
	mov	DWORD PTR [ecx], 0
$LN8@ssh2_load_:
; Line 804
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN60@ssh2_load_
$error$87362:
; Line 810
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN7@ssh2_load_
; Line 811
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
$LN7@ssh2_load_:
; Line 812
	cmp	DWORD PTR _comment$[ebp], 0
	je	SHORT $LN6@ssh2_load_
; Line 813
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN6@ssh2_load_:
; Line 814
	cmp	DWORD PTR _encryption$[ebp], 0
	je	SHORT $LN5@ssh2_load_
; Line 815
	mov	ecx, DWORD PTR _encryption$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN5@ssh2_load_:
; Line 816
	cmp	DWORD PTR _mac$[ebp], 0
	je	SHORT $LN4@ssh2_load_
; Line 817
	mov	edx, DWORD PTR _mac$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN4@ssh2_load_:
; Line 818
	cmp	DWORD PTR _public_blob$[ebp], 0
	je	SHORT $LN3@ssh2_load_
; Line 819
	mov	eax, DWORD PTR _public_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN3@ssh2_load_:
; Line 820
	cmp	DWORD PTR _private_blob$[ebp], 0
	je	SHORT $LN2@ssh2_load_
; Line 821
	cmp	BYTE PTR $T87803[ebp], 0
	jne	SHORT $LN76@ssh2_load_
	push	OFFSET $LN65@ssh2_load_
	call	__RTC_UninitUse
	add	esp, 4
$LN76@ssh2_load_:
	mov	ecx, DWORD PTR _private_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _private_blob$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 822
	mov	eax, DWORD PTR _private_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN2@ssh2_load_:
; Line 824
	cmp	DWORD PTR _errorstr$[ebp], 0
	je	SHORT $LN1@ssh2_load_
; Line 825
	mov	ecx, DWORD PTR _errorstr$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@ssh2_load_:
; Line 826
	mov	eax, DWORD PTR _ret$[ebp]
$LN60@ssh2_load_:
; Line 827
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN87@ssh2_load_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 580				; 00000244H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN87@ssh2_load_:
	DD	10					; 0000000aH
	DD	$LN86@ssh2_load_
$LN86@ssh2_load_:
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN65@ssh2_load_
	DD	-52					; ffffffccH
	DD	40					; 00000028H
	DD	$LN77@ssh2_load_
	DD	-104					; ffffff98H
	DD	4
	DD	$LN78@ssh2_load_
	DD	-184					; ffffff48H
	DD	40					; 00000028H
	DD	$LN79@ssh2_load_
	DD	-288					; fffffee0H
	DD	96					; 00000060H
	DD	$LN80@ssh2_load_
	DD	-340					; fffffeacH
	DD	41					; 00000029H
	DD	$LN81@ssh2_load_
	DD	-368					; fffffe90H
	DD	20					; 00000014H
	DD	$LN82@ssh2_load_
	DD	-500					; fffffe0cH
	DD	96					; 00000060H
	DD	$LN83@ssh2_load_
	DD	-528					; fffffdf0H
	DD	20					; 00000014H
	DD	$LN84@ssh2_load_
	DD	-568					; fffffdc8H
	DD	31					; 0000001fH
	DD	$LN85@ssh2_load_
$LN85@ssh2_load_:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN84@ssh2_load_:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN83@ssh2_load_:
	DB	115					; 00000073H
	DB	0
$LN82@ssh2_load_:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN81@ssh2_load_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	0
$LN80@ssh2_load_:
	DB	115					; 00000073H
	DB	0
$LN79@ssh2_load_:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN78@ssh2_load_:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN77@ssh2_load_:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN65@ssh2_load_:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_ssh2_load_userkey ENDP
_TEXT	ENDS
EXTRN	_fgetc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -8						; size = 4
_len$ = -4						; size = 4
_fp$ = 8						; size = 4
_header$ = 12						; size = 4
_read_header PROC
; Line 462
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 463
	mov	DWORD PTR _len$[ebp], 39		; 00000027H
$LN7@read_heade:
; Line 466
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@read_heade
; Line 467
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
; Line 468
	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	je	SHORT $LN4@read_heade
	cmp	DWORD PTR _c$[ebp], 13			; 0000000dH
	je	SHORT $LN4@read_heade
	cmp	DWORD PTR _c$[ebp], -1
	jne	SHORT $LN5@read_heade
$LN4@read_heade:
; Line 469
	xor	eax, eax
	jmp	SHORT $LN8@read_heade
$LN5@read_heade:
; Line 470
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	jne	SHORT $LN3@read_heade
; Line 471
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
; Line 472
	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	SHORT $LN2@read_heade
; Line 473
	xor	eax, eax
	jmp	SHORT $LN8@read_heade
$LN2@read_heade:
; Line 474
	mov	eax, DWORD PTR _header$[ebp]
	mov	BYTE PTR [eax], 0
; Line 475
	mov	eax, 1
	jmp	SHORT $LN8@read_heade
$LN3@read_heade:
; Line 477
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN1@read_heade
; Line 478
	xor	eax, eax
	jmp	SHORT $LN8@read_heade
$LN1@read_heade:
; Line 479
	mov	ecx, DWORD PTR _header$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, 1
	mov	DWORD PTR _header$[ebp], eax
; Line 480
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 481
	jmp	SHORT $LN7@read_heade
$LN6@read_heade:
; Line 482
	xor	eax, eax
$LN8@read_heade:
; Line 483
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_read_header ENDP
_TEXT	ENDS
EXTRN	_saferealloc:PROC
EXTRN	_ungetc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -16						; size = 4
_size$ = -12						; size = 4
_len$ = -8						; size = 4
_text$ = -4						; size = 4
_fp$ = 8						; size = 4
_read_body PROC
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 492
	mov	DWORD PTR _size$[ebp], 128		; 00000080H
; Line 493
	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _text$[ebp], eax
; Line 494
	mov	DWORD PTR _len$[ebp], 0
; Line 495
	mov	ecx, DWORD PTR _text$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
$LN7@read_body:
; Line 497
	mov	edx, 1
	test	edx, edx
	je	$LN8@read_body
; Line 498
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
; Line 499
	cmp	DWORD PTR _c$[ebp], 13			; 0000000dH
	je	SHORT $LN4@read_body
	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	je	SHORT $LN4@read_body
	cmp	DWORD PTR _c$[ebp], -1
	jne	SHORT $LN5@read_body
$LN4@read_body:
; Line 500
	cmp	DWORD PTR _c$[ebp], -1
	je	SHORT $LN3@read_body
; Line 501
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
; Line 502
	cmp	DWORD PTR _c$[ebp], 13			; 0000000dH
	je	SHORT $LN3@read_body
	cmp	DWORD PTR _c$[ebp], 10			; 0000000aH
	je	SHORT $LN3@read_body
; Line 503
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_ungetc
	add	esp, 8
$LN3@read_body:
; Line 505
	mov	eax, DWORD PTR _text$[ebp]
	jmp	SHORT $LN8@read_body
$LN5@read_body:
; Line 507
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _size$[ebp]
	jl	SHORT $LN1@read_body
; Line 508
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _size$[ebp], edx
; Line 509
	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _text$[ebp], eax
$LN1@read_body:
; Line 511
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 512
	mov	edx, DWORD PTR _text$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx], 0
; Line 513
	jmp	$LN7@read_body
$LN8@read_body:
; Line 514
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_read_body ENDP
_TEXT	ENDS
EXTRN	_base64_decode_atom:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_k$ = -28						; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_len$ = -16						; size = 4
_linelen$ = -12						; size = 4
_line$ = -8						; size = 4
_blob$ = -4						; size = 4
_fp$ = 8						; size = 4
_nlines$ = 12						; size = 4
_bloblen$ = 16						; size = 4
_read_blob PROC
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 524
	push	1
	mov	eax, DWORD PTR _nlines$[ebp]
	imul	eax, 48					; 00000030H
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _blob$[ebp], eax
; Line 525
	mov	DWORD PTR _len$[ebp], 0
; Line 526
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@read_blob
$LN9@read_blob:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN10@read_blob:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nlines$[ebp]
	jge	$LN8@read_blob
; Line 527
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _line$[ebp], eax
; Line 528
	cmp	DWORD PTR _line$[ebp], 0
	jne	SHORT $LN7@read_blob
; Line 529
	mov	ecx, DWORD PTR _blob$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 530
	xor	eax, eax
	jmp	$LN11@read_blob
$LN7@read_blob:
; Line 532
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _linelen$[ebp], eax
; Line 533
	mov	eax, DWORD PTR _linelen$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN13@read_blob
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN13@read_blob:
	test	eax, eax
	jne	SHORT $LN5@read_blob
	cmp	DWORD PTR _linelen$[ebp], 64		; 00000040H
	jle	SHORT $LN6@read_blob
$LN5@read_blob:
; Line 534
	mov	ecx, DWORD PTR _blob$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 535
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 536
	xor	eax, eax
	jmp	SHORT $LN11@read_blob
$LN6@read_blob:
; Line 538
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@read_blob
$LN3@read_blob:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 4
	mov	DWORD PTR _j$[ebp], eax
$LN4@read_blob:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _linelen$[ebp]
	jge	SHORT $LN2@read_blob
; Line 539
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _line$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	push	eax
	call	_base64_decode_atom
	add	esp, 8
	mov	DWORD PTR _k$[ebp], eax
; Line 540
	cmp	DWORD PTR _k$[ebp], 0
	jne	SHORT $LN1@read_blob
; Line 541
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 542
	mov	edx, DWORD PTR _blob$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 543
	xor	eax, eax
	jmp	SHORT $LN11@read_blob
$LN1@read_blob:
; Line 545
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 546
	jmp	SHORT $LN3@read_blob
$LN2@read_blob:
; Line 547
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 548
	jmp	$LN9@read_blob
$LN8@read_blob:
; Line 549
	mov	edx, DWORD PTR _bloblen$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], eax
; Line 550
	mov	eax, DWORD PTR _blob$[ebp]
$LN11@read_blob:
; Line 551
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_read_blob ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ssh2_userkey_loadpub
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_comment$ = -92						; size = 4
_error$ = -88						; size = 4
_i$ = -84						; size = 4
_public_blob_len$ = -76					; size = 4
_public_blob$ = -68					; size = 4
_alg$ = -64						; size = 4
_b$ = -60						; size = 4
_header$ = -52						; size = 40
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_algorithm$ = 12					; size = 4
_pub_blob_len$ = 16					; size = 4
_commentptr$ = 20					; size = 4
_errorstr$ = 24						; size = 4
_ssh2_userkey_loadpub PROC
; Line 832
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 839
	mov	DWORD PTR _error$[ebp], 0
; Line 842
	mov	DWORD PTR _public_blob$[ebp], 0
; Line 844
	push	OFFSET $SG87516
	mov	eax, DWORD PTR _filename$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 845
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN24@ssh2_userk
; Line 846
	mov	DWORD PTR _error$[ebp], OFFSET $SG87518
; Line 847
	jmp	$error$87519
$LN24@ssh2_userk:
; Line 853
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@ssh2_userk
	push	OFFSET $SG87522
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@ssh2_userk
	push	OFFSET $SG87523
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@ssh2_userk
$LN22@ssh2_userk:
; Line 854
	push	20					; 00000014H
	push	OFFSET $SG87525
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@ssh2_userk
; Line 855
	mov	DWORD PTR _error$[ebp], OFFSET $SG87526
; Line 856
	jmp	SHORT $LN20@ssh2_userk
$LN21@ssh2_userk:
; Line 857
	mov	DWORD PTR _error$[ebp], OFFSET $SG87528
$LN20@ssh2_userk:
; Line 858
	jmp	$error$87519
$LN23@ssh2_userk:
; Line 860
	mov	DWORD PTR _error$[ebp], OFFSET $SG87529
; Line 861
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN19@ssh2_userk
; Line 862
	jmp	$error$87519
$LN19@ssh2_userk:
; Line 864
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_find_pubkey_alg
	add	esp, 4
	mov	DWORD PTR _alg$[ebp], eax
; Line 865
	cmp	DWORD PTR _alg$[ebp], 0
	jne	SHORT $LN18@ssh2_userk
; Line 866
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 867
	jmp	$error$87519
$LN18@ssh2_userk:
; Line 869
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 872
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@ssh2_userk
	push	OFFSET $SG87535
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@ssh2_userk
$LN16@ssh2_userk:
; Line 873
	jmp	$error$87519
$LN17@ssh2_userk:
; Line 874
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN15@ssh2_userk
; Line 875
	jmp	$error$87519
$LN15@ssh2_userk:
; Line 876
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 879
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ssh2_userk
	push	OFFSET $SG87540
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@ssh2_userk
$LN13@ssh2_userk:
; Line 880
	jmp	$error$87519
$LN14@ssh2_userk:
; Line 881
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _comment$[ebp], eax
	cmp	DWORD PTR _comment$[ebp], 0
	jne	SHORT $LN12@ssh2_userk
; Line 882
	jmp	$error$87519
$LN12@ssh2_userk:
; Line 884
	cmp	DWORD PTR _commentptr$[ebp], 0
	je	SHORT $LN11@ssh2_userk
; Line 885
	mov	edx, DWORD PTR _commentptr$[ebp]
	mov	eax, DWORD PTR _comment$[ebp]
	mov	DWORD PTR [edx], eax
; Line 886
	jmp	SHORT $LN10@ssh2_userk
$LN11@ssh2_userk:
; Line 887
	mov	ecx, DWORD PTR _comment$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN10@ssh2_userk:
; Line 890
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@ssh2_userk
	push	OFFSET $SG87547
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@ssh2_userk
$LN8@ssh2_userk:
; Line 891
	jmp	$error$87519
$LN9@ssh2_userk:
; Line 892
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN7@ssh2_userk
; Line 893
	jmp	SHORT $error$87519
$LN7@ssh2_userk:
; Line 894
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 895
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 896
	lea	edx, DWORD PTR _public_blob_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_blob
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _public_blob$[ebp], eax
	cmp	DWORD PTR _public_blob$[ebp], 0
	jne	SHORT $LN6@ssh2_userk
; Line 897
	jmp	SHORT $error$87519
$LN6@ssh2_userk:
; Line 899
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 900
	cmp	DWORD PTR _pub_blob_len$[ebp], 0
	je	SHORT $LN5@ssh2_userk
; Line 901
	mov	eax, DWORD PTR _pub_blob_len$[ebp]
	mov	ecx, DWORD PTR _public_blob_len$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@ssh2_userk:
; Line 902
	cmp	DWORD PTR _algorithm$[ebp], 0
	je	SHORT $LN4@ssh2_userk
; Line 903
	mov	edx, DWORD PTR _algorithm$[ebp]
	mov	eax, DWORD PTR _alg$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx], ecx
$LN4@ssh2_userk:
; Line 904
	mov	eax, DWORD PTR _public_blob$[ebp]
	jmp	SHORT $LN25@ssh2_userk
$error$87519:
; Line 910
	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN3@ssh2_userk
; Line 911
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
$LN3@ssh2_userk:
; Line 912
	cmp	DWORD PTR _public_blob$[ebp], 0
	je	SHORT $LN2@ssh2_userk
; Line 913
	mov	eax, DWORD PTR _public_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN2@ssh2_userk:
; Line 914
	cmp	DWORD PTR _errorstr$[ebp], 0
	je	SHORT $LN1@ssh2_userk
; Line 915
	mov	ecx, DWORD PTR _errorstr$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@ssh2_userk:
; Line 916
	xor	eax, eax
$LN25@ssh2_userk:
; Line 917
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@ssh2_userk
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@ssh2_userk:
	DD	2
	DD	$LN29@ssh2_userk
$LN29@ssh2_userk:
	DD	-52					; ffffffccH
	DD	40					; 00000028H
	DD	$LN27@ssh2_userk
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN28@ssh2_userk
$LN28@ssh2_userk:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN27@ssh2_userk:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ssh2_userkey_loadpub ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ssh2_userkey_encrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -68						; size = 4
_comment$ = -64						; size = 4
_b$ = -60						; size = 4
_header$ = -52						; size = 40
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_commentptr$ = 12					; size = 4
_ssh2_userkey_encrypted PROC
; Line 920
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 925
	cmp	DWORD PTR _commentptr$[ebp], 0
	je	SHORT $LN15@ssh2_userk@2
; Line 926
	mov	eax, DWORD PTR _commentptr$[ebp]
	mov	DWORD PTR [eax], 0
$LN15@ssh2_userk@2:
; Line 928
	push	OFFSET $SG87570
	mov	ecx, DWORD PTR _filename$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 929
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN14@ssh2_userk@2
; Line 930
	xor	eax, eax
	jmp	$LN16@ssh2_userk@2
$LN14@ssh2_userk@2:
; Line 933
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@ssh2_userk@2
	push	OFFSET $SG87574
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ssh2_userk@2
	push	OFFSET $SG87575
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ssh2_userk@2
$LN12@ssh2_userk@2:
; Line 934
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
; Line 935
	xor	eax, eax
	jmp	$LN16@ssh2_userk@2
$LN13@ssh2_userk@2:
; Line 937
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN11@ssh2_userk@2
; Line 938
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
; Line 939
	xor	eax, eax
	jmp	$LN16@ssh2_userk@2
$LN11@ssh2_userk@2:
; Line 941
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 943
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@ssh2_userk@2
	push	OFFSET $SG87580
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@ssh2_userk@2
$LN9@ssh2_userk@2:
; Line 944
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 945
	xor	eax, eax
	jmp	$LN16@ssh2_userk@2
$LN10@ssh2_userk@2:
; Line 947
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN8@ssh2_userk@2
; Line 948
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
; Line 949
	xor	eax, eax
	jmp	$LN16@ssh2_userk@2
$LN8@ssh2_userk@2:
; Line 953
	lea	edx, DWORD PTR _header$[ebp]
	push	edx
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_read_header
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ssh2_userk@2
	push	OFFSET $SG87585
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@ssh2_userk@2
$LN6@ssh2_userk@2:
; Line 954
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 955
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 956
	mov	eax, 1
	jmp	$LN16@ssh2_userk@2
$LN7@ssh2_userk@2:
; Line 958
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_read_body
	add	esp, 4
	mov	DWORD PTR _comment$[ebp], eax
	cmp	DWORD PTR _comment$[ebp], 0
	jne	SHORT $LN5@ssh2_userk@2
; Line 959
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 960
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 961
	mov	eax, 1
	jmp	SHORT $LN16@ssh2_userk@2
$LN5@ssh2_userk@2:
; Line 964
	cmp	DWORD PTR _commentptr$[ebp], 0
	je	SHORT $LN4@ssh2_userk@2
; Line 965
	mov	ecx, DWORD PTR _commentptr$[ebp]
	mov	edx, DWORD PTR _comment$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 966
	jmp	SHORT $LN3@ssh2_userk@2
$LN4@ssh2_userk@2:
; Line 967
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN3@ssh2_userk@2:
; Line 969
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
; Line 970
	push	OFFSET $SG87591
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ssh2_userk@2
; Line 971
	mov	DWORD PTR _ret$[ebp], 1
; Line 972
	jmp	SHORT $LN1@ssh2_userk@2
$LN2@ssh2_userk@2:
; Line 973
	mov	DWORD PTR _ret$[ebp], 0
$LN1@ssh2_userk@2:
; Line 974
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 975
	mov	eax, DWORD PTR _ret$[ebp]
$LN16@ssh2_userk@2:
; Line 976
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ssh2_userk@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@ssh2_userk@2:
	DD	1
	DD	$LN19@ssh2_userk@2
$LN19@ssh2_userk@2:
	DD	-52					; ffffffccH
	DD	40					; 00000028H
	DD	$LN18@ssh2_userk@2
$LN18@ssh2_userk@2:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ssh2_userkey_encrypted ENDP
_TEXT	ENDS
PUBLIC	_base64_lines
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_datalen$ = 8						; size = 4
_base64_lines PROC
; Line 979
	push	ebp
	mov	ebp, esp
; Line 981
	mov	eax, DWORD PTR _datalen$[ebp]
	add	eax, 47					; 0000002fH
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
; Line 982
	pop	ebp
	ret	0
_base64_lines ENDP
_TEXT	ENDS
PUBLIC	_base64_encode
EXTRN	_fputc:PROC
EXTRN	_base64_encode_atom:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -28						; size = 4
_i$ = -24						; size = 4
_n$ = -20						; size = 4
_out$ = -12						; size = 4
_linelen$ = -4						; size = 4
_fp$ = 8						; size = 4
_data$ = 12						; size = 4
_datalen$ = 16						; size = 4
_cpl$ = 20						; size = 4
_base64_encode PROC
; Line 985
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 986
	mov	DWORD PTR _linelen$[ebp], 0
$LN6@base64_enc:
; Line 990
	cmp	DWORD PTR _datalen$[ebp], 0
	jle	$LN5@base64_enc
; Line 991
	cmp	DWORD PTR _datalen$[ebp], 3
	jge	SHORT $LN9@base64_enc
	mov	eax, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN10@base64_enc
$LN9@base64_enc:
	mov	DWORD PTR tv66[ebp], 3
$LN10@base64_enc:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _n$[ebp], ecx
; Line 992
	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_base64_encode_atom
	add	esp, 12					; 0000000cH
; Line 993
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _data$[ebp], edx
; Line 994
	mov	eax, DWORD PTR _datalen$[ebp]
	sub	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _datalen$[ebp], eax
; Line 995
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@base64_enc
$LN3@base64_enc:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@base64_enc:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN2@base64_enc
; Line 996
	mov	edx, DWORD PTR _linelen$[ebp]
	cmp	edx, DWORD PTR _cpl$[ebp]
	jl	SHORT $LN1@base64_enc
; Line 997
	mov	DWORD PTR _linelen$[ebp], 0
; Line 998
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	10					; 0000000aH
	call	_fputc
	add	esp, 8
$LN1@base64_enc:
; Line 1000
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR _out$[ebp+edx]
	push	eax
	call	_fputc
	add	esp, 8
; Line 1001
	mov	ecx, DWORD PTR _linelen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _linelen$[ebp], ecx
; Line 1002
	jmp	SHORT $LN3@base64_enc
$LN2@base64_enc:
; Line 1003
	jmp	$LN6@base64_enc
$LN5@base64_enc:
; Line 1004
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	10					; 0000000aH
	call	_fputc
	add	esp, 8
; Line 1005
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@base64_enc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@base64_enc:
	DD	1
	DD	$LN12@base64_enc
$LN12@base64_enc:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@base64_enc
$LN11@base64_enc:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_base64_encode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ssh2_save_userkey
EXTRN	_fprintf:PROC
EXTRN	_aes256_encrypt_pubkey:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$87681 = -436						; size = 96
_key$87680 = -332					; size = 40
_header$87654 = -284					; size = 31
_mackey$87653 = -244					; size = 20
_s$87652 = -216						; size = 96
_commlen$87651 = -116					; size = 4
_enclen$87650 = -112					; size = 4
_namelen$87649 = -108					; size = 4
_p$87648 = -104						; size = 4
_maclen$87647 = -100					; size = 4
_macdata$87646 = -96					; size = 4
_priv_mac$ = -88					; size = 20
_cipherstr$ = -64					; size = 4
_i$ = -60						; size = 4
_cipherblk$ = -56					; size = 4
_passlen$ = -52						; size = 4
_priv_encrypted_len$ = -48				; size = 4
_priv_blob_len$ = -40					; size = 4
_pub_blob_len$ = -28					; size = 4
_priv_blob_encrypted$ = -20				; size = 4
_priv_blob$ = -16					; size = 4
_pub_blob$ = -12					; size = 4
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_key$ = 12						; size = 4
_passphrase$ = 16					; size = 4
_ssh2_save_userkey PROC
; Line 1009
	push	ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1022
	mov	esi, esp
	lea	eax, DWORD PTR _pub_blob_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pub_blob$[ebp], eax
; Line 1023
	mov	esi, esp
	lea	eax, DWORD PTR _priv_blob_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _priv_blob$[ebp], eax
; Line 1024
	cmp	DWORD PTR _pub_blob$[ebp], 0
	je	SHORT $LN9@ssh2_save_
	cmp	DWORD PTR _priv_blob$[ebp], 0
	jne	SHORT $LN10@ssh2_save_
$LN9@ssh2_save_:
; Line 1025
	mov	eax, DWORD PTR _pub_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1026
	mov	ecx, DWORD PTR _priv_blob$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1027
	xor	eax, eax
	jmp	$LN11@ssh2_save_
$LN10@ssh2_save_:
; Line 1033
	cmp	DWORD PTR _passphrase$[ebp], 0
	je	SHORT $LN8@ssh2_save_
; Line 1034
	mov	DWORD PTR _cipherstr$[ebp], OFFSET $SG87638
; Line 1035
	mov	DWORD PTR _cipherblk$[ebp], 16		; 00000010H
; Line 1036
	jmp	SHORT $LN7@ssh2_save_
$LN8@ssh2_save_:
; Line 1037
	mov	DWORD PTR _cipherstr$[ebp], OFFSET $SG87640
; Line 1038
	mov	DWORD PTR _cipherblk$[ebp], 1
$LN7@ssh2_save_:
; Line 1040
	mov	edx, DWORD PTR _cipherblk$[ebp]
	mov	eax, DWORD PTR _priv_blob_len$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	DWORD PTR _priv_encrypted_len$[ebp], ecx
; Line 1041
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	cdq
	idiv	DWORD PTR _cipherblk$[ebp]
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	sub	eax, edx
	mov	DWORD PTR _priv_encrypted_len$[ebp], eax
; Line 1042
	push	1
	mov	ecx, DWORD PTR _priv_encrypted_len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _priv_blob_encrypted$[ebp], eax
; Line 1043
	mov	edx, DWORD PTR _priv_encrypted_len$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _priv_blob_encrypted$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1044
	mov	ecx, DWORD PTR _priv_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob$[ebp]
	push	edx
	mov	eax, DWORD PTR _priv_blob_encrypted$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1047
	lea	ecx, DWORD PTR _priv_mac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _priv_blob$[ebp]
	push	eax
	call	_SHA_Simple
	add	esp, 12					; 0000000cH
; Line 1048
	mov	ecx, DWORD PTR _priv_encrypted_len$[ebp]
	sub	ecx, DWORD PTR _priv_blob_len$[ebp]
	cmp	ecx, 20					; 00000014H
	jl	SHORT $LN13@ssh2_save_
	push	1048					; 00000418H
	push	OFFSET $SG87644
	push	OFFSET $SG87645
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@ssh2_save_:
; Line 1050
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	sub	eax, DWORD PTR _priv_blob_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _priv_mac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob_encrypted$[ebp]
	add	edx, DWORD PTR _priv_blob_len$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1057
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _namelen$87649[ebp], eax
; Line 1058
	mov	eax, DWORD PTR _cipherstr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _enclen$87650[ebp], eax
; Line 1059
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _commlen$87651[ebp], eax
; Line 1062
	mov	ecx, 7
	mov	esi, OFFSET $SG87655
	lea	edi, DWORD PTR _header$87654[ebp]
	rep movsd
	movsw
	movsb
; Line 1068
	mov	eax, DWORD PTR _enclen$87650[ebp]
	mov	ecx, DWORD PTR _namelen$87649[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, DWORD PTR _commlen$87651[ebp]
	lea	ecx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _pub_blob_len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR _priv_encrypted_len$[ebp]
	lea	edx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _maclen$87647[ebp], edx
; Line 1069
	push	1
	mov	eax, DWORD PTR _maclen$87647[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _macdata$87646[ebp], eax
; Line 1070
	mov	ecx, DWORD PTR _macdata$87646[ebp]
	mov	DWORD PTR _p$87648[ebp], ecx
; Line 1072
	mov	edx, DWORD PTR _namelen$87649[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _namelen$87649[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _namelen$87649[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	al, BYTE PTR _namelen$87649[ebp]
	mov	BYTE PTR [edx+3], al
	mov	ecx, DWORD PTR _namelen$87649[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _p$87648[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _namelen$87649[ebp]
	mov	ecx, DWORD PTR _p$87648[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _p$87648[ebp], edx
; Line 1073
	mov	eax, DWORD PTR _enclen$87650[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _enclen$87650[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _enclen$87650[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$87648[ebp]
	mov	cl, BYTE PTR _enclen$87650[ebp]
	mov	BYTE PTR [eax+3], cl
	mov	edx, DWORD PTR _enclen$87650[ebp]
	push	edx
	mov	eax, DWORD PTR _cipherstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$87648[ebp]
	add	ecx, 4
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _enclen$87650[ebp]
	mov	eax, DWORD PTR _p$87648[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _p$87648[ebp], ecx
; Line 1074
	mov	edx, DWORD PTR _commlen$87651[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _commlen$87651[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _commlen$87651[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	al, BYTE PTR _commlen$87651[ebp]
	mov	BYTE PTR [edx+3], al
	mov	ecx, DWORD PTR _commlen$87651[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$87648[ebp]
	add	ecx, 4
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _commlen$87651[ebp]
	mov	eax, DWORD PTR _p$87648[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _p$87648[ebp], ecx
; Line 1075
	mov	edx, DWORD PTR _pub_blob_len$[ebp]
	sar	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _pub_blob_len$[ebp]
	sar	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [edx+1], cl
	mov	eax, DWORD PTR _pub_blob_len$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	al, BYTE PTR _pub_blob_len$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	ecx, DWORD PTR _pub_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pub_blob$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$87648[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _pub_blob_len$[ebp]
	mov	edx, DWORD PTR _p$87648[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	DWORD PTR _p$87648[ebp], eax
; Line 1076
	mov	ecx, DWORD PTR _priv_encrypted_len$[ebp]
	sar	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _priv_encrypted_len$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _p$87648[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _p$87648[ebp]
	mov	dl, BYTE PTR _priv_encrypted_len$[ebp]
	mov	BYTE PTR [ecx+3], dl
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _priv_blob_encrypted$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$87648[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	mov	ecx, DWORD PTR _p$87648[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _p$87648[ebp], edx
; Line 1078
	lea	eax, DWORD PTR _s$87652[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 1079
	push	30					; 0000001eH
	lea	ecx, DWORD PTR _header$87654[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$87652[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 1080
	cmp	DWORD PTR _passphrase$[ebp], 0
	je	SHORT $LN6@ssh2_save_
; Line 1081
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _passphrase$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$87652[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
$LN6@ssh2_save_:
; Line 1082
	lea	eax, DWORD PTR _mackey$87653[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$87652[ebp]
	push	ecx
	call	_SHA_Final
	add	esp, 8
; Line 1083
	lea	edx, DWORD PTR _priv_mac$[ebp]
	push	edx
	mov	eax, DWORD PTR _maclen$87647[ebp]
	push	eax
	mov	ecx, DWORD PTR _macdata$87646[ebp]
	push	ecx
	push	20					; 00000014H
	lea	edx, DWORD PTR _mackey$87653[ebp]
	push	edx
	call	_hmac_sha1_simple
	add	esp, 20					; 00000014H
; Line 1084
	mov	eax, DWORD PTR _maclen$87647[ebp]
	push	eax
	mov	ecx, DWORD PTR _macdata$87646[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 1085
	mov	edx, DWORD PTR _macdata$87646[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1086
	push	20					; 00000014H
	lea	eax, DWORD PTR _mackey$87653[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1087
	push	96					; 00000060H
	lea	ecx, DWORD PTR _s$87652[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 1090
	cmp	DWORD PTR _passphrase$[ebp], 0
	je	$LN5@ssh2_save_
; Line 1094
	mov	edx, DWORD PTR _passphrase$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _passlen$[ebp], eax
; Line 1096
	lea	eax, DWORD PTR _s$87681[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 1097
	push	4
	push	OFFSET $SG87682
	lea	ecx, DWORD PTR _s$87681[ebp]
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 1098
	mov	edx, DWORD PTR _passlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _passphrase$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$87681[ebp]
	push	ecx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 1099
	lea	edx, DWORD PTR _key$87680[ebp]
	push	edx
	lea	eax, DWORD PTR _s$87681[ebp]
	push	eax
	call	_SHA_Final
	add	esp, 8
; Line 1100
	lea	ecx, DWORD PTR _s$87681[ebp]
	push	ecx
	call	_SHA_Init
	add	esp, 4
; Line 1101
	push	4
	push	OFFSET $SG87683
	lea	edx, DWORD PTR _s$87681[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 1102
	mov	eax, DWORD PTR _passlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passphrase$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$87681[ebp]
	push	edx
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 1103
	lea	eax, DWORD PTR _key$87680[ebp+20]
	push	eax
	lea	ecx, DWORD PTR _s$87681[ebp]
	push	ecx
	call	_SHA_Final
	add	esp, 8
; Line 1105
	mov	edx, DWORD PTR _priv_encrypted_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _priv_blob_encrypted$[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$87680[ebp]
	push	ecx
	call	_aes256_encrypt_pubkey
	add	esp, 12					; 0000000cH
; Line 1107
	push	40					; 00000028H
	lea	edx, DWORD PTR _key$87680[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 1108
	push	96					; 00000060H
	lea	eax, DWORD PTR _s$87681[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
$LN5@ssh2_save_:
; Line 1111
	push	OFFSET $SG87684
	mov	ecx, DWORD PTR _filename$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 1112
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN4@ssh2_save_
; Line 1113
	mov	eax, DWORD PTR _pub_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1114
	mov	ecx, DWORD PTR _priv_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 1115
	mov	eax, DWORD PTR _priv_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1116
	mov	ecx, DWORD PTR _priv_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob_encrypted$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 1117
	mov	eax, DWORD PTR _priv_blob_encrypted$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1118
	xor	eax, eax
	jmp	$LN11@ssh2_save_
$LN4@ssh2_save_:
; Line 1120
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	push	OFFSET $SG87686
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1121
	mov	edx, DWORD PTR _cipherstr$[ebp]
	push	edx
	push	OFFSET $SG87687
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1122
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET $SG87688
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1123
	mov	ecx, DWORD PTR _pub_blob_len$[ebp]
	push	ecx
	call	_base64_lines
	add	esp, 4
	push	eax
	push	OFFSET $SG87689
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1124
	push	64					; 00000040H
	mov	eax, DWORD PTR _pub_blob_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pub_blob$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_base64_encode
	add	esp, 16					; 00000010H
; Line 1125
	mov	eax, DWORD PTR _priv_encrypted_len$[ebp]
	push	eax
	call	_base64_lines
	add	esp, 4
	push	eax
	push	OFFSET $SG87690
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1126
	push	64					; 00000040H
	mov	edx, DWORD PTR _priv_encrypted_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _priv_blob_encrypted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_base64_encode
	add	esp, 16					; 00000010H
; Line 1127
	push	OFFSET $SG87691
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
; Line 1128
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ssh2_save_
$LN2@ssh2_save_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ssh2_save_:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN1@ssh2_save_
; Line 1129
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _priv_mac$[ebp+ecx]
	push	edx
	push	OFFSET $SG87695
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@ssh2_save_
$LN1@ssh2_save_:
; Line 1130
	push	OFFSET $SG87696
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
; Line 1131
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fclose
	add	esp, 4
; Line 1133
	mov	eax, DWORD PTR _pub_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1134
	mov	ecx, DWORD PTR _priv_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 1135
	mov	eax, DWORD PTR _priv_blob$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1136
	mov	ecx, DWORD PTR _priv_blob_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _priv_blob_encrypted$[ebp]
	push	edx
	call	_smemclr
	add	esp, 8
; Line 1137
	mov	eax, DWORD PTR _priv_blob_encrypted$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 1138
	mov	eax, 1
$LN11@ssh2_save_:
; Line 1139
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ssh2_save_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@ssh2_save_:
	DD	8
	DD	$LN22@ssh2_save_
$LN22@ssh2_save_:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN14@ssh2_save_
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN15@ssh2_save_
	DD	-88					; ffffffa8H
	DD	20					; 00000014H
	DD	$LN16@ssh2_save_
	DD	-216					; ffffff28H
	DD	96					; 00000060H
	DD	$LN17@ssh2_save_
	DD	-244					; ffffff0cH
	DD	20					; 00000014H
	DD	$LN18@ssh2_save_
	DD	-284					; fffffee4H
	DD	31					; 0000001fH
	DD	$LN19@ssh2_save_
	DD	-332					; fffffeb4H
	DD	40					; 00000028H
	DD	$LN20@ssh2_save_
	DD	-436					; fffffe4cH
	DD	96					; 00000060H
	DD	$LN21@ssh2_save_
$LN21@ssh2_save_:
	DB	115					; 00000073H
	DB	0
$LN20@ssh2_save_:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN19@ssh2_save_:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN18@ssh2_save_:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN17@ssh2_save_:
	DB	115					; 00000073H
	DB	0
$LN16@ssh2_save_:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	0
$LN15@ssh2_save_:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN14@ssh2_save_:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_ssh2_save_userkey ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_key_type
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -148						; size = 4
_openssh_sig$ = -140					; size = 12
_sshcom_sig$ = -120					; size = 33
_putty2_sig$ = -76					; size = 21
_buf$ = -44						; size = 32
_fp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
_key_type PROC
; Line 1146
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1149
	mov	eax, DWORD PTR $SG87703
	mov	DWORD PTR _putty2_sig$[ebp], eax
	mov	ecx, DWORD PTR $SG87703+4
	mov	DWORD PTR _putty2_sig$[ebp+4], ecx
	mov	edx, DWORD PTR $SG87703+8
	mov	DWORD PTR _putty2_sig$[ebp+8], edx
	mov	eax, DWORD PTR $SG87703+12
	mov	DWORD PTR _putty2_sig$[ebp+12], eax
	mov	ecx, DWORD PTR $SG87703+16
	mov	DWORD PTR _putty2_sig$[ebp+16], ecx
	mov	dl, BYTE PTR $SG87703+20
	mov	BYTE PTR _putty2_sig$[ebp+20], dl
; Line 1150
	mov	ecx, 8
	mov	esi, OFFSET $SG87705
	lea	edi, DWORD PTR _sshcom_sig$[ebp]
	rep movsd
	movsb
; Line 1151
	mov	eax, DWORD PTR $SG87707
	mov	DWORD PTR _openssh_sig$[ebp], eax
	mov	ecx, DWORD PTR $SG87707+4
	mov	DWORD PTR _openssh_sig$[ebp+4], ecx
	mov	edx, DWORD PTR $SG87707+8
	mov	DWORD PTR _openssh_sig$[ebp+8], edx
; Line 1154
	push	OFFSET $SG87709
	mov	eax, DWORD PTR _filename$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 1155
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN7@key_type
; Line 1156
	xor	eax, eax
	jmp	$LN8@key_type
$LN7@key_type:
; Line 1157
	mov	edx, DWORD PTR _fp$[ebp]
	push	edx
	push	32					; 00000020H
	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	mov	DWORD PTR _i$[ebp], eax
; Line 1158
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
; Line 1159
	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LN6@key_type
; Line 1160
	xor	eax, eax
	jmp	$LN8@key_type
$LN6@key_type:
; Line 1161
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN5@key_type
; Line 1162
	mov	eax, 1
	jmp	SHORT $LN8@key_type
$LN5@key_type:
; Line 1163
	push	32					; 00000020H
	push	OFFSET $SG87714
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@key_type
; Line 1164
	mov	eax, 2
	jmp	SHORT $LN8@key_type
$LN4@key_type:
; Line 1165
	push	20					; 00000014H
	lea	eax, DWORD PTR _putty2_sig$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@key_type
; Line 1166
	mov	eax, 3
	jmp	SHORT $LN8@key_type
$LN3@key_type:
; Line 1167
	push	11					; 0000000bH
	lea	edx, DWORD PTR _openssh_sig$[ebp]
	push	edx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@key_type
; Line 1168
	mov	eax, 4
	jmp	SHORT $LN8@key_type
$LN2@key_type:
; Line 1169
	push	32					; 00000020H
	lea	ecx, DWORD PTR _sshcom_sig$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@key_type
; Line 1170
	mov	eax, 5
	jmp	SHORT $LN8@key_type
$LN1@key_type:
; Line 1171
	mov	eax, 1
$LN8@key_type:
; Line 1172
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@key_type
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@key_type:
	DD	4
	DD	$LN14@key_type
$LN14@key_type:
	DD	-44					; ffffffd4H
	DD	32					; 00000020H
	DD	$LN10@key_type
	DD	-76					; ffffffb4H
	DD	21					; 00000015H
	DD	$LN11@key_type
	DD	-120					; ffffff88H
	DD	33					; 00000021H
	DD	$LN12@key_type
	DD	-140					; ffffff74H
	DD	12					; 0000000cH
	DD	$LN13@key_type
$LN13@key_type:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
$LN12@key_type:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
$LN11@key_type:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
$LN10@key_type:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_key_type ENDP
_TEXT	ENDS
PUBLIC	_key_type_to_str
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_type$ = 8						; size = 4
_key_type_to_str PROC
; Line 1179
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1180
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 5
	ja	SHORT $LN1@key_type_t
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN12@key_type_t[ecx*4]
$LN7@key_type_t:
; Line 1181
	mov	eax, OFFSET $SG87726
	jmp	SHORT $LN10@key_type_t
	jmp	SHORT $LN10@key_type_t
$LN6@key_type_t:
; Line 1182
	mov	eax, OFFSET $SG87728
	jmp	SHORT $LN10@key_type_t
	jmp	SHORT $LN10@key_type_t
$LN5@key_type_t:
; Line 1183
	mov	eax, OFFSET $SG87730
	jmp	SHORT $LN10@key_type_t
	jmp	SHORT $LN10@key_type_t
$LN4@key_type_t:
; Line 1184
	mov	eax, OFFSET $SG87732
	jmp	SHORT $LN10@key_type_t
	jmp	SHORT $LN10@key_type_t
$LN3@key_type_t:
; Line 1185
	mov	eax, OFFSET $SG87734
	jmp	SHORT $LN10@key_type_t
	jmp	SHORT $LN10@key_type_t
$LN2@key_type_t:
; Line 1186
	mov	eax, OFFSET $SG87736
	jmp	SHORT $LN10@key_type_t
	jmp	SHORT $LN10@key_type_t
$LN1@key_type_t:
; Line 1187
	mov	eax, OFFSET $SG87738
$LN10@key_type_t:
; Line 1189
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@key_type_t:
	DD	$LN7@key_type_t
	DD	$LN6@key_type_t
	DD	$LN5@key_type_t
	DD	$LN4@key_type_t
	DD	$LN3@key_type_t
	DD	$LN2@key_type_t
_key_type_to_str ENDP
_TEXT	ENDS
END
