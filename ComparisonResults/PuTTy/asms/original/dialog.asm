; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\dialog.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG86314 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'l'
	DB	00H, 'o', 00H, 'g', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG86315 DB	's', 00H, '-', 00H, '>', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm'
	DB	00H, 'n', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'1', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_I
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\dialog.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_i$ = 8							; size = 4
_I	PROC
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
	mov	eax, DWORD PTR _ret$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@I:
	DD	1
	DD	$LN4@I
$LN4@I:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@I
$LN3@I:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_I	ENDP
_TEXT	ENDS
PUBLIC	_P
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_p$ = 8							; size = 4
_P	PROC
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
	mov	eax, DWORD PTR _ret$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@P
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@P:
	DD	1
	DD	$LN4@P
$LN4@P:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@P
$LN3@P:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_P	ENDP
_TEXT	ENDS
PUBLIC	_ctrl_path_elements
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_path$ = 8						; size = 4
_ctrl_path_elements PROC
; File c:\workspace\putty\dialog.c
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 18
	mov	DWORD PTR _i$[ebp], 1
$LN3@ctrl_path_:
; Line 19
	mov	eax, DWORD PTR _path$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@ctrl_path_
; Line 20
	mov	edx, DWORD PTR _path$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN1@ctrl_path_
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN1@ctrl_path_:
; Line 21
	mov	edx, DWORD PTR _path$[ebp]
	add	edx, 1
	mov	DWORD PTR _path$[ebp], edx
; Line 22
	jmp	SHORT $LN3@ctrl_path_
$LN2@ctrl_path_:
; Line 23
	mov	eax, DWORD PTR _i$[ebp]
; Line 24
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_path_elements ENDP
_TEXT	ENDS
PUBLIC	_ctrl_path_compare
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_ctrl_path_compare PROC
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 30
	mov	DWORD PTR _i$[ebp], 0
$LN7@ctrl_path_@2:
; Line 31
	mov	eax, DWORD PTR _p1$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@ctrl_path_@2
	mov	edx, DWORD PTR _p2$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN6@ctrl_path_@2
$LN5@ctrl_path_@2:
; Line 33
	mov	ecx, DWORD PTR _p1$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN3@ctrl_path_@2
	mov	eax, DWORD PTR _p1$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@ctrl_path_@2
$LN3@ctrl_path_@2:
	mov	edx, DWORD PTR _p2$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN2@ctrl_path_@2
	mov	ecx, DWORD PTR _p2$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN4@ctrl_path_@2
$LN2@ctrl_path_@2:
; Line 34
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ctrl_path_@2:
; Line 35
	mov	ecx, DWORD PTR _p1$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p2$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN1@ctrl_path_@2
; Line 36
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN8@ctrl_path_@2
$LN1@ctrl_path_@2:
; Line 37
	mov	edx, DWORD PTR _p1$[ebp]
	add	edx, 1
	mov	DWORD PTR _p1$[ebp], edx
	mov	eax, DWORD PTR _p2$[ebp]
	add	eax, 1
	mov	DWORD PTR _p2$[ebp], eax
; Line 38
	jmp	SHORT $LN7@ctrl_path_@2
$LN6@ctrl_path_@2:
; Line 39
	mov	eax, 2147483647				; 7fffffffH
$LN8@ctrl_path_@2:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_path_compare ENDP
_TEXT	ENDS
PUBLIC	_ctrl_new_box
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctrl_new_box PROC
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 44
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 46
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 47
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 48
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 49
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 50
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 52
	mov	eax, DWORD PTR _ret$[ebp]
; Line 53
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_new_box ENDP
_TEXT	ENDS
PUBLIC	_ctrl_free_set
PUBLIC	_ctrl_free_box
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_b$ = 8							; size = 4
_ctrl_free_box PROC
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 59
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ctrl_free_
$LN5@ctrl_free_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ctrl_free_:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@ctrl_free_
; Line 60
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_ctrl_free_set
	add	esp, 4
; Line 61
	jmp	SHORT $LN5@ctrl_free_
$LN4@ctrl_free_:
; Line 62
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ctrl_free_
$LN2@ctrl_free_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@ctrl_free_:
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN1@ctrl_free_
; Line 63
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@ctrl_free_
$LN1@ctrl_free_:
; Line 64
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 65
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_safefree
	add	esp, 4
; Line 66
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_safefree
	add	esp, 4
; Line 67
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 68
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_free_box ENDP
_TEXT	ENDS
PUBLIC	_ctrl_free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
_ctrl_free_set PROC
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 74
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 75
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_safefree
	add	esp, 4
; Line 76
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_safefree
	add	esp, 4
; Line 77
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ctrl_free_@2
$LN2@ctrl_free_@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ctrl_free_@2:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN1@ctrl_free_@2
; Line 78
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_ctrl_free
	add	esp, 4
; Line 79
	jmp	SHORT $LN2@ctrl_free_@2
$LN1@ctrl_free_@2:
; Line 80
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_safefree
	add	esp, 4
; Line 81
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 82
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_free_set ENDP
_TEXT	ENDS
PUBLIC	_ctrl_find_path
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = 8							; size = 4
_path$ = 12						; size = 4
_index$ = 16						; size = 4
_ctrl_find_path PROC
; Line 116
	push	ebp
	mov	ebp, esp
; Line 117
	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN4@ctrl_find_
; Line 118
	push	1
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_ctrl_find_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _index$[ebp], eax
; Line 119
	jmp	SHORT $LN3@ctrl_find_
$LN4@ctrl_find_:
; Line 120
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
$LN3@ctrl_find_:
; Line 122
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN2@ctrl_find_
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ctrl_find_
; Line 123
	mov	eax, DWORD PTR _index$[ebp]
	jmp	SHORT $LN5@ctrl_find_
; Line 124
	jmp	SHORT $LN5@ctrl_find_
$LN2@ctrl_find_:
; Line 125
	or	eax, -1
$LN5@ctrl_find_:
; Line 126
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ctrl_find_path ENDP
; Function compile flags: /Odtp /RTCsu
_thisone$ = -12					; size = 4
_last$ = -8						; size = 4
_i$ = -4						; size = 4
_b$ = 8							; size = 4
_path$ = 12						; size = 4
_start$ = 16						; size = 4
_ctrl_find_set PROC
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 93
	mov	DWORD PTR _last$[ebp], 0
; Line 94
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ctrl_find_@2
$LN5@ctrl_find_@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ctrl_find_@2:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@ctrl_find_@2
; Line 95
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_ctrl_path_compare
	add	esp, 8
	mov	DWORD PTR _thisone$[ebp], eax
; Line 103
	cmp	DWORD PTR _start$[ebp], 0
	je	SHORT $LN1@ctrl_find_@2
	cmp	DWORD PTR _thisone$[ebp], 2147483647	; 7fffffffH
	je	SHORT $LN2@ctrl_find_@2
$LN1@ctrl_find_@2:
	mov	eax, DWORD PTR _thisone$[ebp]
	cmp	eax, DWORD PTR _last$[ebp]
	jge	SHORT $LN3@ctrl_find_@2
$LN2@ctrl_find_@2:
; Line 104
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN7@ctrl_find_@2
$LN3@ctrl_find_@2:
; Line 105
	mov	ecx, DWORD PTR _thisone$[ebp]
	mov	DWORD PTR _last$[ebp], ecx
; Line 106
	jmp	SHORT $LN5@ctrl_find_@2
$LN4@ctrl_find_@2:
; Line 107
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
$LN7@ctrl_find_@2:
; Line 108
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_find_set ENDP
_TEXT	ENDS
PUBLIC	_ctrl_settitle
EXTRN	_memmove:PROC
EXTRN	_saferealloc:PROC
EXTRN	_dupstr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index$ = -8						; size = 4
_s$ = -4						; size = 4
_b$ = 8							; size = 4
_path$ = 12						; size = 4
_title$ = 16						; size = 4
_ctrl_settitle PROC
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 133
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 134
	push	1
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_ctrl_find_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _index$[ebp], eax
; Line 135
	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 136
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 137
	mov	eax, DWORD PTR _title$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 138
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 139
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 140
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 141
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN2@ctrl_setti
; Line 142
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 143
	push	4
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN2@ctrl_setti:
; Line 145
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN1@ctrl_setti
; Line 147
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _index$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+4]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
$LN1@ctrl_setti:
; Line 148
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 149
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 150
	mov	eax, DWORD PTR _s$[ebp]
; Line 151
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_settitle ENDP
_TEXT	ENDS
PUBLIC	_ctrl_getset
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv138 = -12						; size = 4
_index$ = -8						; size = 4
_s$ = -4						; size = 4
_b$ = 8							; size = 4
_path$ = 12						; size = 4
_name$ = 16						; size = 4
_boxtitle$ = 20						; size = 4
_ctrl_getset PROC
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 158
	push	1
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_ctrl_find_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _index$[ebp], eax
$LN5@ctrl_getse:
; Line 160
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN4@ctrl_getse
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@ctrl_getse
; Line 162
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@ctrl_getse
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@ctrl_getse
; Line 163
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	$LN6@ctrl_getse
$LN3@ctrl_getse:
; Line 164
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
; Line 165
	jmp	SHORT $LN5@ctrl_getse
$LN4@ctrl_getse:
; Line 166
	push	28					; 0000001cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 167
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 168
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 169
	cmp	DWORD PTR _boxtitle$[ebp], 0
	je	SHORT $LN8@ctrl_getse
	mov	edx, DWORD PTR _boxtitle$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN9@ctrl_getse
$LN8@ctrl_getse:
	mov	DWORD PTR tv138[ebp], 0
$LN9@ctrl_getse:
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 170
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+12], 1
; Line 171
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 172
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 173
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jl	SHORT $LN2@ctrl_getse
; Line 174
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 175
	push	4
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN2@ctrl_getse:
; Line 177
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN1@ctrl_getse
; Line 179
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _index$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+4]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
$LN1@ctrl_getse:
; Line 180
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 181
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 182
	mov	eax, DWORD PTR _s$[ebp]
$LN6@ctrl_getse:
; Line 183
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_getset ENDP
_TEXT	ENDS
PUBLIC	_ctrl_alloc_with_free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_b$ = 8							; size = 4
_size$ = 12						; size = 4
_freefunc$ = 16						; size = 4
_ctrl_alloc_with_free PROC
; Line 188
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 194
	push	1
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 195
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+16]
	jl	SHORT $LN1@ctrl_alloc
; Line 196
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 197
	push	4
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 198
	push	4
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@ctrl_alloc:
; Line 200
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 201
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _freefunc$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 202
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 203
	mov	eax, DWORD PTR _p$[ebp]
; Line 204
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_alloc_with_free ENDP
_TEXT	ENDS
PUBLIC	_ctrl_alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = 8							; size = 4
_size$ = 12						; size = 4
_ctrl_alloc PROC
; Line 212
	push	ebp
	mov	ebp, esp
; Line 213
	push	OFFSET _ctrl_default_free
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_ctrl_alloc_with_free
	add	esp, 12					; 0000000cH
; Line 214
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ctrl_alloc ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_ctrl_default_free PROC
; Line 207
	push	ebp
	mov	ebp, esp
; Line 208
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 209
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ctrl_default_free ENDP
_TEXT	ENDS
PUBLIC	_ctrl_columns
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$86320 = -12						; size = 4
_ap$86319 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_ncolumns$ = 12						; size = 4
_ctrl_columns PROC
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 242
	push	0
	call	_P
	add	esp, 4
	push	eax
	push	0
	push	0
	call	_P
	add	esp, 4
	push	eax
	push	6
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 243
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+12], 1
	je	SHORT $LN8@ctrl_colum
	cmp	DWORD PTR _ncolumns$[ebp], 1
	je	SHORT $LN8@ctrl_colum
	push	243					; 000000f3H
	push	OFFSET $SG86314
	push	OFFSET $SG86315
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@ctrl_colum:
; Line 244
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _ncolumns$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 245
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _ncolumns$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 246
	cmp	DWORD PTR _ncolumns$[ebp], 1
	jne	SHORT $LN5@ctrl_colum
; Line 247
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 248
	jmp	SHORT $LN4@ctrl_colum
$LN5@ctrl_colum:
; Line 251
	push	4
	mov	edx, DWORD PTR _ncolumns$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 252
	lea	edx, DWORD PTR _ncolumns$[ebp+4]
	mov	DWORD PTR _ap$86319[ebp], edx
; Line 253
	mov	DWORD PTR _i$86320[ebp], 0
	jmp	SHORT $LN3@ctrl_colum
$LN2@ctrl_colum:
	mov	eax, DWORD PTR _i$86320[ebp]
	add	eax, 1
	mov	DWORD PTR _i$86320[ebp], eax
$LN3@ctrl_colum:
	mov	ecx, DWORD PTR _i$86320[ebp]
	cmp	ecx, DWORD PTR _ncolumns$[ebp]
	jge	SHORT $LN1@ctrl_colum
; Line 254
	mov	edx, DWORD PTR _ap$86319[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$86319[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _i$86320[ebp]
	mov	eax, DWORD PTR _ap$86319[ebp]
	mov	eax, DWORD PTR [eax-4]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN2@ctrl_colum
$LN1@ctrl_colum:
; Line 255
	mov	DWORD PTR _ap$86319[ebp], 0
$LN4@ctrl_colum:
; Line 257
	mov	eax, DWORD PTR _c$[ebp]
; Line 258
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_columns ENDP
; Function compile flags: /Odtp /RTCsu
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_type$ = 12						; size = 4
_helpctx$ = 16						; size = 4
_handler$ = 20						; size = 4
_context$ = 24						; size = 4
_ctrl_new PROC
; Line 219
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 220
	push	60					; 0000003cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 221
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN1@ctrl_new
; Line 222
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 223
	push	4
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN1@ctrl_new:
; Line 225
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 229
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], eax
; Line 230
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 231
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 1
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 232
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _helpctx$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 233
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _handler$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 234
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _context$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 235
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 236
	mov	eax, DWORD PTR _c$[ebp]
; Line 237
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_new ENDP
_TEXT	ENDS
PUBLIC	_ctrl_editbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_percentage$ = 20					; size = 4
_helpctx$ = 24						; size = 4
_handler$ = 28						; size = 4
_context$ = 32						; size = 4
_context2$ = 36						; size = 4
_ctrl_editbox PROC
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 265
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 266
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_editb
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_editb
$LN3@ctrl_editb:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_editb:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 267
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 268
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _percentage$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 269
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 270
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 271
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _context2$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 272
	mov	eax, DWORD PTR _c$[ebp]
; Line 273
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_editbox ENDP
_TEXT	ENDS
PUBLIC	_ctrl_combobox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_percentage$ = 20					; size = 4
_helpctx$ = 24						; size = 4
_handler$ = 28						; size = 4
_context$ = 32						; size = 4
_context2$ = 36						; size = 4
_ctrl_combobox PROC
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 280
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 281
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_combo
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_combo
$LN3@ctrl_combo:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_combo:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 282
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 283
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _percentage$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 284
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 285
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+40], 1
; Line 286
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _context2$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 287
	mov	eax, DWORD PTR _c$[ebp]
; Line 288
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_combobox ENDP
_TEXT	ENDS
PUBLIC	_ctrl_radiobuttons
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -16						; size = 4
_c$ = -12						; size = 4
_i$ = -8						; size = 4
_ap$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_ncolumns$ = 20						; size = 4
_helpctx$ = 24						; size = 4
_handler$ = 28						; size = 4
_context$ = 32						; size = 4
_ctrl_radiobuttons PROC
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 302
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 303
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN12@ctrl_radio
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN13@ctrl_radio
$LN12@ctrl_radio:
	mov	DWORD PTR tv74[ebp], 0
$LN13@ctrl_radio:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 304
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 305
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _ncolumns$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 310
	lea	edx, DWORD PTR _context$[ebp+4]
	mov	DWORD PTR _ap$[ebp], edx
; Line 311
	mov	DWORD PTR _i$[ebp], 0
$LN9@ctrl_radio:
; Line 312
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN8@ctrl_radio
; Line 313
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 314
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN7@ctrl_radio
; Line 315
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
$LN7@ctrl_radio:
; Line 316
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
; Line 317
	jmp	SHORT $LN9@ctrl_radio
$LN8@ctrl_radio:
; Line 318
	mov	DWORD PTR _ap$[ebp], 0
; Line 319
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 320
	mov	eax, DWORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN6@ctrl_radio
; Line 321
	push	1
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 322
	jmp	SHORT $LN5@ctrl_radio
$LN6@ctrl_radio:
; Line 323
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+44], 0
$LN5@ctrl_radio:
; Line 324
	push	4
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 325
	push	4
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 330
	lea	eax, DWORD PTR _context$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 331
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ctrl_radio
$LN3@ctrl_radio:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ctrl_radio:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jge	SHORT $LN2@ctrl_radio
; Line 332
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [edx-4]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 333
	mov	edx, DWORD PTR _c$[ebp]
	movsx	eax, BYTE PTR [edx+28]
	test	eax, eax
	jne	SHORT $LN1@ctrl_radio
; Line 334
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ap$[ebp]
	mov	dl, BYTE PTR [edx-4]
	mov	BYTE PTR [eax+ecx], dl
$LN1@ctrl_radio:
; Line 336
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 337
	jmp	SHORT $LN3@ctrl_radio
$LN2@ctrl_radio:
; Line 338
	mov	DWORD PTR _ap$[ebp], 0
; Line 339
	mov	eax, DWORD PTR _c$[ebp]
; Line 340
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_radiobuttons ENDP
_TEXT	ENDS
PUBLIC	_ctrl_pushbutton
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_helpctx$ = 20						; size = 4
_handler$ = 24						; size = 4
_context$ = 28						; size = 4
_ctrl_pushbutton PROC
; Line 345
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 346
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 347
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_pushb
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_pushb
$LN3@ctrl_pushb:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_pushb:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 348
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 349
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 350
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 351
	mov	eax, DWORD PTR _c$[ebp]
; Line 352
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_pushbutton ENDP
_TEXT	ENDS
PUBLIC	_ctrl_listbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_helpctx$ = 20						; size = 4
_handler$ = 24						; size = 4
_context$ = 28						; size = 4
_ctrl_listbox PROC
; Line 357
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 358
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 359
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_listb
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_listb
$LN3@ctrl_listb:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_listb:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 360
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 361
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+32], 5
; Line 362
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 363
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 364
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+44], 100			; 00000064H
; Line 365
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 366
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+52], 0
; Line 367
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+56], 1
; Line 368
	mov	eax, DWORD PTR _c$[ebp]
; Line 369
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_listbox ENDP
_TEXT	ENDS
PUBLIC	_ctrl_droplist
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_percentage$ = 20					; size = 4
_helpctx$ = 24						; size = 4
_handler$ = 28						; size = 4
_context$ = 32						; size = 4
_ctrl_droplist PROC
; Line 374
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 375
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 376
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_dropl
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_dropl
$LN3@ctrl_dropl:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_dropl:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 377
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 378
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 379
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+36], 0
; Line 380
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 381
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _percentage$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 382
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+48], 0
; Line 383
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 384
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+56], 0
; Line 385
	mov	eax, DWORD PTR _c$[ebp]
; Line 386
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_droplist ENDP
_TEXT	ENDS
PUBLIC	_ctrl_draglist
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_helpctx$ = 20						; size = 4
_handler$ = 24						; size = 4
_context$ = 28						; size = 4
_ctrl_draglist PROC
; Line 391
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 392
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 393
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_dragl
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_dragl
$LN3@ctrl_dragl:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_dragl:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 394
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 395
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+32], 5
; Line 396
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+36], 1
; Line 397
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 398
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+44], 100			; 00000064H
; Line 399
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 400
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+52], 0
; Line 401
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 402
	mov	eax, DWORD PTR _c$[ebp]
; Line 403
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_draglist ENDP
_TEXT	ENDS
PUBLIC	_ctrl_filesel
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_filter$ = 20						; size = 4
_write$ = 24						; size = 4
_title$ = 28						; size = 4
_helpctx$ = 32						; size = 4
_handler$ = 36						; size = 4
_context$ = 40						; size = 4
_ctrl_filesel PROC
; Line 409
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 410
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 411
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_files
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_files
$LN3@ctrl_files:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_files:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 412
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 413
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _filter$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 414
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _write$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 415
	mov	ecx, DWORD PTR _title$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 416
	mov	eax, DWORD PTR _c$[ebp]
; Line 417
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_filesel ENDP
_TEXT	ENDS
PUBLIC	_ctrl_fontsel
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_helpctx$ = 20						; size = 4
_handler$ = 24						; size = 4
_context$ = 28						; size = 4
_ctrl_fontsel PROC
; Line 422
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 423
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 424
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_fonts
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_fonts
$LN3@ctrl_fonts:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_fonts:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 425
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 426
	mov	eax, DWORD PTR _c$[ebp]
; Line 427
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_fontsel ENDP
_TEXT	ENDS
PUBLIC	_ctrl_tabdelay
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_ctrl$ = 12						; size = 4
_ctrl_tabdelay PROC
; Line 430
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 431
	push	0
	call	_P
	add	esp, 4
	push	eax
	push	0
	push	0
	call	_P
	add	esp, 4
	push	eax
	push	9
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 432
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 433
	mov	eax, DWORD PTR _c$[ebp]
; Line 434
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_tabdelay ENDP
_TEXT	ENDS
PUBLIC	_ctrl_text
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_text$ = 12						; size = 4
_helpctx$ = 16						; size = 4
_ctrl_text PROC
; Line 437
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 438
	push	0
	call	_P
	add	esp, 4
	push	eax
	push	0
	mov	eax, DWORD PTR _helpctx$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 439
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 440
	mov	eax, DWORD PTR _c$[ebp]
; Line 441
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_text ENDP
_TEXT	ENDS
PUBLIC	_ctrl_checkbox
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -8						; size = 4
_c$ = -4						; size = 4
_s$ = 8							; size = 4
_label$ = 12						; size = 4
_shortcut$ = 16						; size = 1
_helpctx$ = 20						; size = 4
_handler$ = 24						; size = 4
_context$ = 28						; size = 4
_ctrl_checkbox PROC
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 447
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _helpctx$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_ctrl_new
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 448
	cmp	DWORD PTR _label$[ebp], 0
	je	SHORT $LN3@ctrl_check
	mov	ecx, DWORD PTR _label$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@ctrl_check
$LN3@ctrl_check:
	mov	DWORD PTR tv74[ebp], 0
$LN4@ctrl_check:
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 449
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR _shortcut$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 450
	mov	eax, DWORD PTR _c$[ebp]
; Line 451
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ctrl_checkbox ENDP
; Function compile flags: /Odtp /RTCsu
tv66 = -8						; size = 4
_i$ = -4						; size = 4
_ctrl$ = 8						; size = 4
_ctrl_free PROC
; Line 454
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 457
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 458
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 5
	ja	$LN8@ctrl_free
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN12@ctrl_free[edx*4]
$LN7@ctrl_free:
; Line 460
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ctrl_free
$LN5@ctrl_free:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ctrl_free:
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN4@ctrl_free
; Line 461
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_safefree
	add	esp, 4
	jmp	SHORT $LN5@ctrl_free
$LN4@ctrl_free:
; Line 462
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_safefree
	add	esp, 4
; Line 463
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 464
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_safefree
	add	esp, 4
; Line 465
	jmp	SHORT $LN8@ctrl_free
$LN3@ctrl_free:
; Line 467
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_safefree
	add	esp, 4
; Line 468
	jmp	SHORT $LN8@ctrl_free
$LN2@ctrl_free:
; Line 470
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 471
	jmp	SHORT $LN8@ctrl_free
$LN1@ctrl_free:
; Line 473
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_safefree
	add	esp, 4
$LN8@ctrl_free:
; Line 476
	mov	ecx, DWORD PTR _ctrl$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 477
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@ctrl_free:
	DD	$LN7@ctrl_free
	DD	$LN8@ctrl_free
	DD	$LN8@ctrl_free
	DD	$LN2@ctrl_free
	DD	$LN3@ctrl_free
	DD	$LN1@ctrl_free
_ctrl_free ENDP
_TEXT	ENDS
END
