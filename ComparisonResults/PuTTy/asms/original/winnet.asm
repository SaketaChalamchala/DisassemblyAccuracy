; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winnet.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_in6addr_any
PUBLIC	_in6addr_loopback
_BSS	SEGMENT
_winsock_module DD 01H DUP (?)
_winsock2_module DD 01H DUP (?)
_wship6_module DD 01H DUP (?)
_errstrings DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG86468 DB	'ws2_32.dll', 00H
	ORG $+1
$SG86470 DB	'wsock32.dll', 00H
$SG86472 DB	'Unable to load any WinSock library', 00H
	ORG $+1
$SG86475 DB	'getaddrinfo', 00H
$SG86478 DB	'getaddrinfo', 00H
$SG86481 DB	'freeaddrinfo', 00H
	ORG $+3
$SG86484 DB	'getnameinfo', 00H
$SG86487 DB	'gai_strerror', 00H
	ORG $+3
$SG86489 DB	'wship6.dll', 00H
	ORG $+1
$SG86493 DB	'getaddrinfo', 00H
$SG86496 DB	'freeaddrinfo', 00H
	ORG $+3
$SG86499 DB	'getnameinfo', 00H
$SG86502 DB	'gai_strerror', 00H
	ORG $+3
$SG86506 DB	'WSAAddressToStringA', 00H
$SG86509 DB	'WSAAsyncSelect', 00H
	ORG $+1
$SG86512 DB	'WSAEventSelect', 00H
	ORG $+1
$SG86515 DB	'select', 00H
	ORG $+1
$SG86518 DB	'WSAGetLastError', 00H
$SG86521 DB	'WSAEnumNetworkEvents', 00H
	ORG $+3
$SG86524 DB	'WSAStartup', 00H
	ORG $+1
$SG86527 DB	'WSACleanup', 00H
	ORG $+1
$SG86530 DB	'closesocket', 00H
$SG86533 DB	'ntohl', 00H
	ORG $+2
$SG86536 DB	'htonl', 00H
	ORG $+2
$SG86539 DB	'htons', 00H
	ORG $+2
$SG86542 DB	'ntohs', 00H
	ORG $+2
$SG86545 DB	'gethostname', 00H
$SG86548 DB	'gethostbyname', 00H
	ORG $+2
$SG86551 DB	'getservbyname', 00H
	ORG $+2
$SG86554 DB	'inet_addr', 00H
	ORG $+2
$SG86557 DB	'inet_ntoa', 00H
	ORG $+2
$SG86560 DB	'connect', 00H
$SG86563 DB	'bind', 00H
	ORG $+3
$SG86566 DB	'setsockopt', 00H
	ORG $+1
$SG86569 DB	'socket', 00H
	ORG $+1
$SG86572 DB	'listen', 00H
	ORG $+1
$SG86575 DB	'send', 00H
	ORG $+3
$SG86578 DB	'shutdown', 00H
	ORG $+3
$SG86581 DB	'ioctlsocket', 00H
$SG86584 DB	'accept', 00H
	ORG $+1
$SG86587 DB	'recv', 00H
	ORG $+3
$SG86590 DB	'WSAIoctl', 00H
	ORG $+3
$SG86592 DB	'Unable to initialise WinSock', 00H
	ORG $+3
$SG86636 DB	'Network error: ', 00H
$SG86643 DB	'Network error: Permission denied', 00H
	ORG $+3
$SG86645 DB	'Network error: Address already in use', 00H
	ORG $+2
$SG86647 DB	'Network error: Cannot assign requested address', 00H
	ORG $+1
$SG86649 DB	'Network error: Address family not supported by protocol '
	DB	'family', 00H
	ORG $+1
$SG86651 DB	'Network error: Operation already in progress', 00H
	ORG $+3
$SG86653 DB	'Network error: Software caused connection abort', 00H
$SG86655 DB	'Network error: Connection refused', 00H
	ORG $+2
$SG86657 DB	'Network error: Connection reset by peer', 00H
$SG86659 DB	'Network error: Destination address required', 00H
$SG86661 DB	'Network error: Bad address', 00H
	ORG $+1
$SG86663 DB	'Network error: Host is down', 00H
$SG86665 DB	'Network error: No route to host', 00H
$SG86667 DB	'Network error: Operation now in progress', 00H
	ORG $+3
$SG86669 DB	'Network error: Interrupted function call', 00H
	ORG $+3
$SG86671 DB	'Network error: Invalid argument', 00H
$SG86673 DB	'Network error: Socket is already connected', 00H
	ORG $+1
$SG86675 DB	'Network error: Too many open files', 00H
	ORG $+1
$SG86677 DB	'Network error: Message too long', 00H
$SG86679 DB	'Network error: Network is down', 00H
	ORG $+1
$SG86681 DB	'Network error: Network dropped connection on reset', 00H
	ORG $+1
$SG86683 DB	'Network error: Network is unreachable', 00H
	ORG $+2
$SG86685 DB	'Network error: No buffer space available', 00H
	ORG $+3
$SG86687 DB	'Network error: Bad protocol option', 00H
	ORG $+1
$SG86689 DB	'Network error: Socket is not connected', 00H
	ORG $+1
$SG86691 DB	'Network error: Socket operation on non-socket', 00H
	ORG $+2
$SG86693 DB	'Network error: Operation not supported', 00H
	ORG $+1
$SG86695 DB	'Network error: Protocol family not supported', 00H
	ORG $+3
$SG86697 DB	'Network error: Too many processes', 00H
	ORG $+2
$SG86699 DB	'Network error: Protocol not supported', 00H
	ORG $+2
$SG86701 DB	'Network error: Protocol wrong type for socket', 00H
	ORG $+2
$SG86703 DB	'Network error: Cannot send after socket shutdown', 00H
	ORG $+3
$SG86705 DB	'Network error: Socket type not supported', 00H
	ORG $+3
$SG86707 DB	'Network error: Connection timed out', 00H
$SG86709 DB	'Network error: Resource temporarily unavailable', 00H
$SG86711 DB	'Network error: Graceful shutdown in progress', 00H
	ORG $+3
$SG86725 DB	'Windows error code %d (and FormatMessage returned %d)', 00H
	ORG $+2
$SG86762 DB	'Network is down', 00H
$SG86763 DB	'Host does not exist', 00H
$SG86764 DB	'Host not found', 00H
	ORG $+1
$SG86765 DB	'gethostbyname: unknown error', 00H
	ORG $+3
$SG86835 DB	'<unknown>', 00H
	ORG $+2
$SG86840 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86841 DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'e', 00H, 's', 00H, 00H
	DB	00H
$SG86849 DB	'localhost', 00H
	ORG $+2
$SG86850 DB	'::1', 00H
$SG86851 DB	'127.', 00H
	ORG $+3
$SG86871 DB	'Unable to get list of local IP addresses', 00H
	ORG $+3
$SG86894 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86899 DB	'f', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'l', 00H, 'y', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'A', 00H, 'F', 00H, '_'
	DB	00H, 'U', 00H, 'N', 00H, 'S', 00H, 'P', 00H, 'E', 00H, 'C', 00H
	DB	00H, 00H
$SG86929 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
$SG86895 DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'e', 00H, 's', 00H, 00H
	DB	00H
$SG86898 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86916 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86917 DB	'f', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'l', 00H, 'y', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'A', 00H, 'F', 00H, '_'
	DB	00H, 'U', 00H, 'N', 00H, 'S', 00H, 'P', 00H, 'E', 00H, 'C', 00H
	DB	00H, 00H
$SG86928 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86934 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG86935 DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'e', 00H, 's', 00H, 00H
	DB	00H
$SG87070 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87071 DB	's', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H
	DB	'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, '-', 00H, '>', 00H, 'a'
	DB	00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'e', 00H, 's', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 's'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	't', 00H, 'e', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '-'
	DB	00H, '>', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, '-', 00H
	DB	'>', 00H, 'n', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG87225 DB	'%s', 00H
	ORG $+1
$SG87242 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87243 DB	's', 00H, '-', 00H, '>', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'g', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'E', 00H
	DB	'O', 00H, 'F', 00H, '_', 00H, 'N', 00H, 'O', 00H, 00H, 00H
	ORG $+2
$SG87255 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87256 DB	's', 00H, '-', 00H, '>', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'g', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'E', 00H
	DB	'O', 00H, 'F', 00H, '_', 00H, 'N', 00H, 'O', 00H, 00H, 00H
	ORG $+2
$SG87258 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87259 DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 's', 00H, '-', 00H, '>', 00H, 'o', 00H, 'o', 00H
	DB	'b', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, 00H
	DB	00H
$SG87267 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG87268 DB	's', 00H, '-', 00H, '>', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'g', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'E', 00H
	DB	'O', 00H, 'F', 00H, '_', 00H, 'N', 00H, 'O', 00H, 00H, 00H
	ORG $+2
$SG87318 DB	'Internal networking trouble', 00H
$SG87320 DB	'%s', 00H
	ORG $+1
$SG87431 DB	'unix sockets not supported on this platform', 00H
_DATA	ENDS
CONST	SEGMENT
_in6addr_any DB	00H
	ORG $+15
_in6addr_loopback DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?fn_table@?1??sk_tcp_accept@@9@9 DD FLAT:_sk_tcp_plug	; `sk_tcp_accept'::`2'::fn_table
	DD	FLAT:_sk_tcp_close
	DD	FLAT:_sk_tcp_write
	DD	FLAT:_sk_tcp_write_oob
	DD	FLAT:_sk_tcp_write_eof
	DD	FLAT:_sk_tcp_flush
	DD	FLAT:_sk_tcp_set_frozen
	DD	FLAT:_sk_tcp_socket_error
?fn_table@?1??sk_new@@9@9 DD FLAT:_sk_tcp_plug		; `sk_new'::`2'::fn_table
	DD	FLAT:_sk_tcp_close
	DD	FLAT:_sk_tcp_write
	DD	FLAT:_sk_tcp_write_oob
	DD	FLAT:_sk_tcp_write_eof
	DD	FLAT:_sk_tcp_flush
	DD	FLAT:_sk_tcp_set_frozen
	DD	FLAT:_sk_tcp_socket_error
?fn_table@?1??sk_newlistener@@9@9 DD FLAT:_sk_tcp_plug	; `sk_newlistener'::`2'::fn_table
	DD	FLAT:_sk_tcp_close
	DD	FLAT:_sk_tcp_write
	DD	FLAT:_sk_tcp_write_oob
	DD	FLAT:_sk_tcp_write_eof
	DD	FLAT:_sk_tcp_flush
	DD	FLAT:_sk_tcp_set_frozen
	DD	FLAT:_sk_tcp_socket_error
CONST	ENDS
PUBLIC	_sk_startup
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_p_WSAStartup DD 01H DUP (?)
_wsadata DB	0190H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winnet.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_winsock_ver$ = -4					; size = 2
_hi$ = 8						; size = 4
_lo$ = 12						; size = 4
_sk_startup PROC
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 208
	mov	eax, DWORD PTR _hi$[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, al
	mov	edx, DWORD PTR _lo$[ebp]
	and	edx, 255				; 000000ffH
	movzx	eax, dl
	shl	eax, 8
	or	ecx, eax
	mov	WORD PTR _winsock_ver$[ebp], cx
; Line 210
	mov	esi, esp
	push	OFFSET _wsadata
	movzx	ecx, WORD PTR _winsock_ver$[ebp]
	push	ecx
	call	DWORD PTR _p_WSAStartup
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@sk_startup
; Line 211
	xor	eax, eax
	jmp	SHORT $LN3@sk_startup
$LN2@sk_startup:
; Line 214
	movzx	edx, WORD PTR _wsadata
	and	edx, 255				; 000000ffH
	movzx	eax, dl
	movzx	ecx, WORD PTR _winsock_ver$[ebp]
	and	ecx, 255				; 000000ffH
	movzx	edx, cl
	cmp	eax, edx
	je	SHORT $LN1@sk_startup
; Line 215
	xor	eax, eax
	jmp	SHORT $LN3@sk_startup
$LN1@sk_startup:
; Line 225
	mov	eax, 1
$LN3@sk_startup:
; Line 226
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_startup ENDP
_TEXT	ENDS
PUBLIC	_sk_init
EXTRN	_newtree234:PROC
EXTRN	_p_WSAEnumNetworkEvents:DWORD
EXTRN	_p_WSAGetLastError:DWORD
EXTRN	_p_select:DWORD
EXTRN	_p_WSAEventSelect:DWORD
EXTRN	_p_WSAAsyncSelect:DWORD
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	_fatalbox:PROC
EXTRN	_load_system32_dll:PROC
_BSS	SEGMENT
_sktree	DD	01H DUP (?)
_p_WSAIoctl DD	01H DUP (?)
_p_recv	DD	01H DUP (?)
_p_accept DD	01H DUP (?)
_p_ioctlsocket DD 01H DUP (?)
_p_shutdown DD	01H DUP (?)
_p_send	DD	01H DUP (?)
_p_listen DD	01H DUP (?)
_p_socket DD	01H DUP (?)
_p_setsockopt DD 01H DUP (?)
_p_bind	DD	01H DUP (?)
_p_connect DD	01H DUP (?)
_p_inet_ntoa DD	01H DUP (?)
_p_inet_addr DD	01H DUP (?)
_p_getservbyname DD 01H DUP (?)
_p_gethostbyname DD 01H DUP (?)
_p_gethostname DD 01H DUP (?)
_p_ntohs DD	01H DUP (?)
_p_htons DD	01H DUP (?)
_p_htonl DD	01H DUP (?)
_p_ntohl DD	01H DUP (?)
_p_closesocket DD 01H DUP (?)
_p_WSACleanup DD 01H DUP (?)
_p_WSAAddressToStringA DD 01H DUP (?)
_p_gai_strerror DD 01H DUP (?)
_p_getnameinfo DD 01H DUP (?)
_p_freeaddrinfo DD 01H DUP (?)
_p_getaddrinfo DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv358 = -148						; size = 4
tv353 = -144						; size = 4
tv316 = -140						; size = 4
tv311 = -136						; size = 4
tv306 = -132						; size = 4
tv301 = -128						; size = 4
tv296 = -124						; size = 4
tv291 = -120						; size = 4
tv286 = -116						; size = 4
tv281 = -112						; size = 4
tv276 = -108						; size = 4
tv271 = -104						; size = 4
tv266 = -100						; size = 4
tv261 = -96						; size = 4
tv256 = -92						; size = 4
tv251 = -88						; size = 4
tv246 = -84						; size = 4
tv241 = -80						; size = 4
tv236 = -76						; size = 4
tv231 = -72						; size = 4
tv226 = -68						; size = 4
tv189 = -64						; size = 4
tv184 = -60						; size = 4
tv179 = -56						; size = 4
tv174 = -52						; size = 4
tv169 = -48						; size = 4
tv164 = -44						; size = 4
tv159 = -40						; size = 4
tv154 = -36						; size = 4
tv149 = -32						; size = 4
tv144 = -28						; size = 4
tv139 = -24						; size = 4
tv134 = -20						; size = 4
tv94 = -16						; size = 4
tv89 = -12						; size = 4
tv84 = -8						; size = 4
tv79 = -4						; size = 4
_sk_init PROC
; Line 229
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 233
	push	OFFSET $SG86468
	call	_load_system32_dll
	add	esp, 4
	mov	DWORD PTR _winsock_module, eax
	mov	eax, DWORD PTR _winsock_module
	mov	DWORD PTR _winsock2_module, eax
; Line 234
	cmp	DWORD PTR _winsock_module, 0
	jne	SHORT $LN7@sk_init
; Line 235
	push	OFFSET $SG86470
	call	_load_system32_dll
	add	esp, 4
	mov	DWORD PTR _winsock_module, eax
$LN7@sk_init:
; Line 237
	cmp	DWORD PTR _winsock_module, 0
	jne	SHORT $LN6@sk_init
; Line 238
	push	OFFSET $SG86472
	call	_fatalbox
	add	esp, 4
$LN6@sk_init:
; Line 242
	mov	esi, esp
	push	OFFSET $SG86475
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN5@sk_init
; Line 246
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN10@sk_init
	mov	esi, esp
	push	OFFSET $SG86478
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN11@sk_init
$LN10@sk_init:
	mov	DWORD PTR tv79[ebp], 0
$LN11@sk_init:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _p_getaddrinfo, eax
; Line 247
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN12@sk_init
	mov	esi, esp
	push	OFFSET $SG86481
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN13@sk_init
$LN12@sk_init:
	mov	DWORD PTR tv84[ebp], 0
$LN13@sk_init:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _p_freeaddrinfo, edx
; Line 248
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN14@sk_init
	mov	esi, esp
	push	OFFSET $SG86484
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN15@sk_init
$LN14@sk_init:
	mov	DWORD PTR tv89[ebp], 0
$LN15@sk_init:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _p_getnameinfo, ecx
; Line 249
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN16@sk_init
	mov	esi, esp
	push	OFFSET $SG86487
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN17@sk_init
$LN16@sk_init:
	mov	DWORD PTR tv94[ebp], 0
$LN17@sk_init:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _p_gai_strerror, eax
; Line 250
	jmp	$LN4@sk_init
$LN5@sk_init:
; Line 252
	push	OFFSET $SG86489
	call	_load_system32_dll
	add	esp, 4
	mov	DWORD PTR _wship6_module, eax
; Line 253
	cmp	DWORD PTR _wship6_module, 0
	je	$LN4@sk_init
; Line 257
	cmp	DWORD PTR _wship6_module, 0
	je	SHORT $LN18@sk_init
	mov	esi, esp
	push	OFFSET $SG86493
	mov	ecx, DWORD PTR _wship6_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN19@sk_init
$LN18@sk_init:
	mov	DWORD PTR tv134[ebp], 0
$LN19@sk_init:
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _p_getaddrinfo, edx
; Line 258
	cmp	DWORD PTR _wship6_module, 0
	je	SHORT $LN20@sk_init
	mov	esi, esp
	push	OFFSET $SG86496
	mov	eax, DWORD PTR _wship6_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN21@sk_init
$LN20@sk_init:
	mov	DWORD PTR tv139[ebp], 0
$LN21@sk_init:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _p_freeaddrinfo, ecx
; Line 259
	cmp	DWORD PTR _wship6_module, 0
	je	SHORT $LN22@sk_init
	mov	esi, esp
	push	OFFSET $SG86499
	mov	edx, DWORD PTR _wship6_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN23@sk_init
$LN22@sk_init:
	mov	DWORD PTR tv144[ebp], 0
$LN23@sk_init:
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR _p_getnameinfo, eax
; Line 260
	cmp	DWORD PTR _wship6_module, 0
	je	SHORT $LN24@sk_init
	mov	esi, esp
	push	OFFSET $SG86502
	mov	ecx, DWORD PTR _wship6_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN25@sk_init
$LN24@sk_init:
	mov	DWORD PTR tv149[ebp], 0
$LN25@sk_init:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR _p_gai_strerror, edx
$LN4@sk_init:
; Line 267
	cmp	DWORD PTR _winsock2_module, 0
	je	SHORT $LN26@sk_init
	mov	esi, esp
	push	OFFSET $SG86506
	mov	eax, DWORD PTR _winsock2_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN27@sk_init
$LN26@sk_init:
	mov	DWORD PTR tv154[ebp], 0
$LN27@sk_init:
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR _p_WSAAddressToStringA, ecx
; Line 274
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN28@sk_init
	mov	esi, esp
	push	OFFSET $SG86509
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN29@sk_init
$LN28@sk_init:
	mov	DWORD PTR tv159[ebp], 0
$LN29@sk_init:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR _p_WSAAsyncSelect, eax
; Line 275
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN30@sk_init
	mov	esi, esp
	push	OFFSET $SG86512
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN31@sk_init
$LN30@sk_init:
	mov	DWORD PTR tv164[ebp], 0
$LN31@sk_init:
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _p_WSAEventSelect, edx
; Line 276
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN32@sk_init
	mov	esi, esp
	push	OFFSET $SG86515
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv169[ebp], eax
	jmp	SHORT $LN33@sk_init
$LN32@sk_init:
	mov	DWORD PTR tv169[ebp], 0
$LN33@sk_init:
	mov	ecx, DWORD PTR tv169[ebp]
	mov	DWORD PTR _p_select, ecx
; Line 277
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN34@sk_init
	mov	esi, esp
	push	OFFSET $SG86518
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv174[ebp], eax
	jmp	SHORT $LN35@sk_init
$LN34@sk_init:
	mov	DWORD PTR tv174[ebp], 0
$LN35@sk_init:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR _p_WSAGetLastError, eax
; Line 278
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN36@sk_init
	mov	esi, esp
	push	OFFSET $SG86521
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv179[ebp], eax
	jmp	SHORT $LN37@sk_init
$LN36@sk_init:
	mov	DWORD PTR tv179[ebp], 0
$LN37@sk_init:
	mov	edx, DWORD PTR tv179[ebp]
	mov	DWORD PTR _p_WSAEnumNetworkEvents, edx
; Line 279
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN38@sk_init
	mov	esi, esp
	push	OFFSET $SG86524
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN39@sk_init
$LN38@sk_init:
	mov	DWORD PTR tv184[ebp], 0
$LN39@sk_init:
	mov	ecx, DWORD PTR tv184[ebp]
	mov	DWORD PTR _p_WSAStartup, ecx
; Line 280
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN40@sk_init
	mov	esi, esp
	push	OFFSET $SG86527
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN41@sk_init
$LN40@sk_init:
	mov	DWORD PTR tv189[ebp], 0
$LN41@sk_init:
	mov	eax, DWORD PTR tv189[ebp]
	mov	DWORD PTR _p_WSACleanup, eax
; Line 281
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN42@sk_init
	mov	esi, esp
	push	OFFSET $SG86530
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv226[ebp], eax
	jmp	SHORT $LN43@sk_init
$LN42@sk_init:
	mov	DWORD PTR tv226[ebp], 0
$LN43@sk_init:
	mov	edx, DWORD PTR tv226[ebp]
	mov	DWORD PTR _p_closesocket, edx
; Line 282
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN44@sk_init
	mov	esi, esp
	push	OFFSET $SG86533
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv231[ebp], eax
	jmp	SHORT $LN45@sk_init
$LN44@sk_init:
	mov	DWORD PTR tv231[ebp], 0
$LN45@sk_init:
	mov	ecx, DWORD PTR tv231[ebp]
	mov	DWORD PTR _p_ntohl, ecx
; Line 283
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN46@sk_init
	mov	esi, esp
	push	OFFSET $SG86536
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv236[ebp], eax
	jmp	SHORT $LN47@sk_init
$LN46@sk_init:
	mov	DWORD PTR tv236[ebp], 0
$LN47@sk_init:
	mov	eax, DWORD PTR tv236[ebp]
	mov	DWORD PTR _p_htonl, eax
; Line 284
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN48@sk_init
	mov	esi, esp
	push	OFFSET $SG86539
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv241[ebp], eax
	jmp	SHORT $LN49@sk_init
$LN48@sk_init:
	mov	DWORD PTR tv241[ebp], 0
$LN49@sk_init:
	mov	edx, DWORD PTR tv241[ebp]
	mov	DWORD PTR _p_htons, edx
; Line 285
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN50@sk_init
	mov	esi, esp
	push	OFFSET $SG86542
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv246[ebp], eax
	jmp	SHORT $LN51@sk_init
$LN50@sk_init:
	mov	DWORD PTR tv246[ebp], 0
$LN51@sk_init:
	mov	ecx, DWORD PTR tv246[ebp]
	mov	DWORD PTR _p_ntohs, ecx
; Line 286
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN52@sk_init
	mov	esi, esp
	push	OFFSET $SG86545
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv251[ebp], eax
	jmp	SHORT $LN53@sk_init
$LN52@sk_init:
	mov	DWORD PTR tv251[ebp], 0
$LN53@sk_init:
	mov	eax, DWORD PTR tv251[ebp]
	mov	DWORD PTR _p_gethostname, eax
; Line 287
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN54@sk_init
	mov	esi, esp
	push	OFFSET $SG86548
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv256[ebp], eax
	jmp	SHORT $LN55@sk_init
$LN54@sk_init:
	mov	DWORD PTR tv256[ebp], 0
$LN55@sk_init:
	mov	edx, DWORD PTR tv256[ebp]
	mov	DWORD PTR _p_gethostbyname, edx
; Line 288
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN56@sk_init
	mov	esi, esp
	push	OFFSET $SG86551
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv261[ebp], eax
	jmp	SHORT $LN57@sk_init
$LN56@sk_init:
	mov	DWORD PTR tv261[ebp], 0
$LN57@sk_init:
	mov	ecx, DWORD PTR tv261[ebp]
	mov	DWORD PTR _p_getservbyname, ecx
; Line 289
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN58@sk_init
	mov	esi, esp
	push	OFFSET $SG86554
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv266[ebp], eax
	jmp	SHORT $LN59@sk_init
$LN58@sk_init:
	mov	DWORD PTR tv266[ebp], 0
$LN59@sk_init:
	mov	eax, DWORD PTR tv266[ebp]
	mov	DWORD PTR _p_inet_addr, eax
; Line 290
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN60@sk_init
	mov	esi, esp
	push	OFFSET $SG86557
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv271[ebp], eax
	jmp	SHORT $LN61@sk_init
$LN60@sk_init:
	mov	DWORD PTR tv271[ebp], 0
$LN61@sk_init:
	mov	edx, DWORD PTR tv271[ebp]
	mov	DWORD PTR _p_inet_ntoa, edx
; Line 291
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN62@sk_init
	mov	esi, esp
	push	OFFSET $SG86560
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv276[ebp], eax
	jmp	SHORT $LN63@sk_init
$LN62@sk_init:
	mov	DWORD PTR tv276[ebp], 0
$LN63@sk_init:
	mov	ecx, DWORD PTR tv276[ebp]
	mov	DWORD PTR _p_connect, ecx
; Line 292
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN64@sk_init
	mov	esi, esp
	push	OFFSET $SG86563
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN65@sk_init
$LN64@sk_init:
	mov	DWORD PTR tv281[ebp], 0
$LN65@sk_init:
	mov	eax, DWORD PTR tv281[ebp]
	mov	DWORD PTR _p_bind, eax
; Line 293
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN66@sk_init
	mov	esi, esp
	push	OFFSET $SG86566
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv286[ebp], eax
	jmp	SHORT $LN67@sk_init
$LN66@sk_init:
	mov	DWORD PTR tv286[ebp], 0
$LN67@sk_init:
	mov	edx, DWORD PTR tv286[ebp]
	mov	DWORD PTR _p_setsockopt, edx
; Line 294
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN68@sk_init
	mov	esi, esp
	push	OFFSET $SG86569
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	jmp	SHORT $LN69@sk_init
$LN68@sk_init:
	mov	DWORD PTR tv291[ebp], 0
$LN69@sk_init:
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR _p_socket, ecx
; Line 295
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN70@sk_init
	mov	esi, esp
	push	OFFSET $SG86572
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv296[ebp], eax
	jmp	SHORT $LN71@sk_init
$LN70@sk_init:
	mov	DWORD PTR tv296[ebp], 0
$LN71@sk_init:
	mov	eax, DWORD PTR tv296[ebp]
	mov	DWORD PTR _p_listen, eax
; Line 296
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN72@sk_init
	mov	esi, esp
	push	OFFSET $SG86575
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv301[ebp], eax
	jmp	SHORT $LN73@sk_init
$LN72@sk_init:
	mov	DWORD PTR tv301[ebp], 0
$LN73@sk_init:
	mov	edx, DWORD PTR tv301[ebp]
	mov	DWORD PTR _p_send, edx
; Line 297
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN74@sk_init
	mov	esi, esp
	push	OFFSET $SG86578
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv306[ebp], eax
	jmp	SHORT $LN75@sk_init
$LN74@sk_init:
	mov	DWORD PTR tv306[ebp], 0
$LN75@sk_init:
	mov	ecx, DWORD PTR tv306[ebp]
	mov	DWORD PTR _p_shutdown, ecx
; Line 298
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN76@sk_init
	mov	esi, esp
	push	OFFSET $SG86581
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv311[ebp], eax
	jmp	SHORT $LN77@sk_init
$LN76@sk_init:
	mov	DWORD PTR tv311[ebp], 0
$LN77@sk_init:
	mov	eax, DWORD PTR tv311[ebp]
	mov	DWORD PTR _p_ioctlsocket, eax
; Line 299
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN78@sk_init
	mov	esi, esp
	push	OFFSET $SG86584
	mov	ecx, DWORD PTR _winsock_module
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv316[ebp], eax
	jmp	SHORT $LN79@sk_init
$LN78@sk_init:
	mov	DWORD PTR tv316[ebp], 0
$LN79@sk_init:
	mov	edx, DWORD PTR tv316[ebp]
	mov	DWORD PTR _p_accept, edx
; Line 300
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN80@sk_init
	mov	esi, esp
	push	OFFSET $SG86587
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv353[ebp], eax
	jmp	SHORT $LN81@sk_init
$LN80@sk_init:
	mov	DWORD PTR tv353[ebp], 0
$LN81@sk_init:
	mov	ecx, DWORD PTR tv353[ebp]
	mov	DWORD PTR _p_recv, ecx
; Line 301
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN82@sk_init
	mov	esi, esp
	push	OFFSET $SG86590
	mov	edx, DWORD PTR _winsock_module
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv358[ebp], eax
	jmp	SHORT $LN83@sk_init
$LN82@sk_init:
	mov	DWORD PTR tv358[ebp], 0
$LN83@sk_init:
	mov	eax, DWORD PTR tv358[ebp]
	mov	DWORD PTR _p_WSAIoctl, eax
; Line 306
	push	2
	push	2
	call	_sk_startup
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@sk_init
	push	0
	push	2
	call	_sk_startup
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@sk_init
	push	1
	push	1
	call	_sk_startup
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@sk_init
; Line 307
	push	OFFSET $SG86592
	call	_fatalbox
	add	esp, 4
$LN1@sk_init:
; Line 310
	push	OFFSET _cmpfortree
	call	_newtree234
	add	esp, 4
	mov	DWORD PTR _sktree, eax
; Line 311
	pop	edi
	pop	esi
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_init ENDP
; Function compile flags: /Odtp /RTCsu
_bs$ = -16						; size = 4
_as$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_cmpfortree PROC
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 125
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 126
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _as$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _bs$[ebp], edx
; Line 127
	mov	eax, DWORD PTR _as$[ebp]
	cmp	eax, DWORD PTR _bs$[ebp]
	jae	SHORT $LN4@cmpfortree
; Line 128
	or	eax, -1
	jmp	SHORT $LN5@cmpfortree
$LN4@cmpfortree:
; Line 129
	mov	ecx, DWORD PTR _as$[ebp]
	cmp	ecx, DWORD PTR _bs$[ebp]
	jbe	SHORT $LN3@cmpfortree
; Line 130
	mov	eax, 1
	jmp	SHORT $LN5@cmpfortree
$LN3@cmpfortree:
; Line 131
	mov	edx, DWORD PTR _a$[ebp]
	cmp	edx, DWORD PTR _b$[ebp]
	jae	SHORT $LN2@cmpfortree
; Line 132
	or	eax, -1
	jmp	SHORT $LN5@cmpfortree
$LN2@cmpfortree:
; Line 133
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jbe	SHORT $LN1@cmpfortree
; Line 134
	mov	eax, 1
	jmp	SHORT $LN5@cmpfortree
$LN1@cmpfortree:
; Line 135
	xor	eax, eax
$LN5@cmpfortree:
; Line 136
	mov	esp, ebp
	pop	ebp
	ret	0
_cmpfortree ENDP
_TEXT	ENDS
PUBLIC	_sk_cleanup
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	_freetree234:PROC
EXTRN	_index234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -8						; size = 4
_s$ = -4						; size = 4
_sk_cleanup PROC
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 318
	cmp	DWORD PTR _sktree, 0
	je	SHORT $LN7@sk_cleanup
; Line 319
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@sk_cleanup
$LN5@sk_cleanup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@sk_cleanup:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN4@sk_cleanup
; Line 320
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 321
	jmp	SHORT $LN5@sk_cleanup
$LN4@sk_cleanup:
; Line 322
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_freetree234
	add	esp, 4
; Line 323
	mov	DWORD PTR _sktree, 0
$LN7@sk_cleanup:
; Line 326
	cmp	DWORD PTR _p_WSACleanup, 0
	je	SHORT $LN3@sk_cleanup
; Line 327
	mov	esi, esp
	call	DWORD PTR _p_WSACleanup
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@sk_cleanup:
; Line 328
	cmp	DWORD PTR _winsock_module, 0
	je	SHORT $LN2@sk_cleanup
; Line 329
	mov	esi, esp
	mov	eax, DWORD PTR _winsock_module
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_cleanup:
; Line 331
	cmp	DWORD PTR _wship6_module, 0
	je	SHORT $LN8@sk_cleanup
; Line 332
	mov	esi, esp
	mov	ecx, DWORD PTR _wship6_module
	push	ecx
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@sk_cleanup:
; Line 334
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_cleanup ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_winsock_error_string
EXTRN	_add234:PROC
EXTRN	_saferealloc:PROC
EXTRN	_sprintf:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	_strlen:PROC
EXTRN	_strcpy:PROC
EXTRN	_safemalloc:PROC
EXTRN	_find234:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -48						; size = 4
_len$86727 = -44					; size = 4
_bufused$86715 = -40					; size = 4
_bufsize$86714 = -36					; size = 4
_es$ = -32						; size = 4
_prefix$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_error$ = 8						; size = 4
_winsock_error_string PROC
; Line 360
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 361
	mov	eax, DWORD PTR $SG86636
	mov	DWORD PTR _prefix$[ebp], eax
	mov	ecx, DWORD PTR $SG86636+4
	mov	DWORD PTR _prefix$[ebp+4], ecx
	mov	edx, DWORD PTR $SG86636+8
	mov	DWORD PTR _prefix$[ebp+8], edx
	mov	eax, DWORD PTR $SG86636+12
	mov	DWORD PTR _prefix$[ebp+12], eax
; Line 368
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 10004				; 00002714H
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 97			; 00000061H
	ja	$LN41@winsock_er
	mov	eax, DWORD PTR tv69[ebp]
	movzx	ecx, BYTE PTR $LN45@winsock_er[eax]
	jmp	DWORD PTR $LN49@winsock_er[ecx*4]
$LN40@winsock_er:
; Line 370
	mov	eax, OFFSET $SG86643
	jmp	$LN43@winsock_er
$LN39@winsock_er:
; Line 372
	mov	eax, OFFSET $SG86645
	jmp	$LN43@winsock_er
$LN38@winsock_er:
; Line 374
	mov	eax, OFFSET $SG86647
	jmp	$LN43@winsock_er
$LN37@winsock_er:
; Line 377
	mov	eax, OFFSET $SG86649
	jmp	$LN43@winsock_er
$LN36@winsock_er:
; Line 379
	mov	eax, OFFSET $SG86651
	jmp	$LN43@winsock_er
$LN35@winsock_er:
; Line 381
	mov	eax, OFFSET $SG86653
	jmp	$LN43@winsock_er
$LN34@winsock_er:
; Line 383
	mov	eax, OFFSET $SG86655
	jmp	$LN43@winsock_er
$LN33@winsock_er:
; Line 385
	mov	eax, OFFSET $SG86657
	jmp	$LN43@winsock_er
$LN32@winsock_er:
; Line 387
	mov	eax, OFFSET $SG86659
	jmp	$LN43@winsock_er
$LN31@winsock_er:
; Line 389
	mov	eax, OFFSET $SG86661
	jmp	$LN43@winsock_er
$LN30@winsock_er:
; Line 391
	mov	eax, OFFSET $SG86663
	jmp	$LN43@winsock_er
$LN29@winsock_er:
; Line 393
	mov	eax, OFFSET $SG86665
	jmp	$LN43@winsock_er
$LN28@winsock_er:
; Line 395
	mov	eax, OFFSET $SG86667
	jmp	$LN43@winsock_er
$LN27@winsock_er:
; Line 397
	mov	eax, OFFSET $SG86669
	jmp	$LN43@winsock_er
$LN26@winsock_er:
; Line 399
	mov	eax, OFFSET $SG86671
	jmp	$LN43@winsock_er
$LN25@winsock_er:
; Line 401
	mov	eax, OFFSET $SG86673
	jmp	$LN43@winsock_er
$LN24@winsock_er:
; Line 403
	mov	eax, OFFSET $SG86675
	jmp	$LN43@winsock_er
$LN23@winsock_er:
; Line 405
	mov	eax, OFFSET $SG86677
	jmp	$LN43@winsock_er
$LN22@winsock_er:
; Line 407
	mov	eax, OFFSET $SG86679
	jmp	$LN43@winsock_er
$LN21@winsock_er:
; Line 409
	mov	eax, OFFSET $SG86681
	jmp	$LN43@winsock_er
$LN20@winsock_er:
; Line 411
	mov	eax, OFFSET $SG86683
	jmp	$LN43@winsock_er
$LN19@winsock_er:
; Line 413
	mov	eax, OFFSET $SG86685
	jmp	$LN43@winsock_er
$LN18@winsock_er:
; Line 415
	mov	eax, OFFSET $SG86687
	jmp	$LN43@winsock_er
$LN17@winsock_er:
; Line 417
	mov	eax, OFFSET $SG86689
	jmp	$LN43@winsock_er
$LN16@winsock_er:
; Line 419
	mov	eax, OFFSET $SG86691
	jmp	$LN43@winsock_er
$LN15@winsock_er:
; Line 421
	mov	eax, OFFSET $SG86693
	jmp	$LN43@winsock_er
$LN14@winsock_er:
; Line 423
	mov	eax, OFFSET $SG86695
	jmp	$LN43@winsock_er
$LN13@winsock_er:
; Line 425
	mov	eax, OFFSET $SG86697
	jmp	$LN43@winsock_er
$LN12@winsock_er:
; Line 427
	mov	eax, OFFSET $SG86699
	jmp	$LN43@winsock_er
$LN11@winsock_er:
; Line 429
	mov	eax, OFFSET $SG86701
	jmp	$LN43@winsock_er
$LN10@winsock_er:
; Line 431
	mov	eax, OFFSET $SG86703
	jmp	$LN43@winsock_er
$LN9@winsock_er:
; Line 433
	mov	eax, OFFSET $SG86705
	jmp	$LN43@winsock_er
$LN8@winsock_er:
; Line 435
	mov	eax, OFFSET $SG86707
	jmp	$LN43@winsock_er
$LN7@winsock_er:
; Line 437
	mov	eax, OFFSET $SG86709
	jmp	$LN43@winsock_er
$LN6@winsock_er:
; Line 439
	mov	eax, OFFSET $SG86711
	jmp	$LN43@winsock_er
$LN41@winsock_er:
; Line 455
	cmp	DWORD PTR _errstrings, 0
	jne	SHORT $LN5@winsock_er
; Line 456
	push	OFFSET _errstring_compare
	call	_newtree234
	add	esp, 4
	mov	DWORD PTR _errstrings, eax
$LN5@winsock_er:
; Line 458
	push	OFFSET _errstring_find
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _errstrings
	push	eax
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _es$[ebp], eax
; Line 460
	cmp	DWORD PTR _es$[ebp], 0
	jne	$LN4@winsock_er
; Line 463
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _es$[ebp], eax
; Line 464
	mov	ecx, DWORD PTR _es$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 466
	mov	DWORD PTR _bufsize$86714[ebp], 65551	; 0001000fH
; Line 467
	push	1
	mov	eax, DWORD PTR _bufsize$86714[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _es$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 468
	lea	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _es$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 469
	mov	edx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _bufused$86715[ebp], eax
; Line 473
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _bufsize$86714[ebp]
	sub	ecx, DWORD PTR _bufused$86715[ebp]
	push	ecx
	mov	edx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _bufused$86715[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	0
	push	4608					; 00001200H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@winsock_er
; Line 476
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	OFFSET $SG86725
	mov	eax, DWORD PTR _es$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _bufused$86715[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 477
	jmp	SHORT $LN2@winsock_er
$LN3@winsock_er:
; Line 478
	mov	edx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$86727[ebp], eax
; Line 479
	cmp	DWORD PTR _len$86727[ebp], 0
	jle	SHORT $LN2@winsock_er
	mov	ecx, DWORD PTR _es$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _len$86727[ebp]
	movsx	ecx, BYTE PTR [edx+eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN2@winsock_er
; Line 480
	mov	edx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _len$86727[ebp]
	mov	BYTE PTR [ecx+eax-1], 0
$LN2@winsock_er:
; Line 482
	push	1
	mov	edx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _es$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _es$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 483
	mov	edx, DWORD PTR _es$[ebp]
	push	edx
	mov	eax, DWORD PTR _errstrings
	push	eax
	call	_add234
	add	esp, 8
$LN4@winsock_er:
; Line 486
	mov	ecx, DWORD PTR _es$[ebp]
	mov	eax, DWORD PTR [ecx+4]
$LN43@winsock_er:
; Line 487
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@winsock_er
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN48@winsock_er:
	DD	1
	DD	$LN47@winsock_er
$LN47@winsock_er:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN46@winsock_er
$LN46@winsock_er:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
	npad	1
$LN49@winsock_er:
	DD	$LN27@winsock_er
	DD	$LN40@winsock_er
	DD	$LN31@winsock_er
	DD	$LN26@winsock_er
	DD	$LN24@winsock_er
	DD	$LN7@winsock_er
	DD	$LN28@winsock_er
	DD	$LN36@winsock_er
	DD	$LN16@winsock_er
	DD	$LN32@winsock_er
	DD	$LN23@winsock_er
	DD	$LN11@winsock_er
	DD	$LN18@winsock_er
	DD	$LN12@winsock_er
	DD	$LN9@winsock_er
	DD	$LN15@winsock_er
	DD	$LN14@winsock_er
	DD	$LN37@winsock_er
	DD	$LN39@winsock_er
	DD	$LN38@winsock_er
	DD	$LN22@winsock_er
	DD	$LN20@winsock_er
	DD	$LN21@winsock_er
	DD	$LN35@winsock_er
	DD	$LN33@winsock_er
	DD	$LN19@winsock_er
	DD	$LN25@winsock_er
	DD	$LN17@winsock_er
	DD	$LN10@winsock_er
	DD	$LN8@winsock_er
	DD	$LN34@winsock_er
	DD	$LN30@winsock_er
	DD	$LN29@winsock_er
	DD	$LN13@winsock_er
	DD	$LN6@winsock_er
	DD	$LN41@winsock_er
$LN45@winsock_er:
	DB	0
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	1
	DB	2
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	3
	DB	35					; 00000023H
	DB	4
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	35					; 00000023H
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	35					; 00000023H
	DB	33					; 00000021H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	35					; 00000023H
	DB	34					; 00000022H
_winsock_error_string ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_errstring_find PROC
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 343
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 344
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 345
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN2@errstring_
; Line 346
	or	eax, -1
	jmp	SHORT $LN3@errstring_
$LN2@errstring_:
; Line 347
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN1@errstring_
; Line 348
	mov	eax, 1
	jmp	SHORT $LN3@errstring_
$LN1@errstring_:
; Line 349
	xor	eax, eax
$LN3@errstring_:
; Line 350
	mov	esp, ebp
	pop	ebp
	ret	0
_errstring_find ENDP
; Function compile flags: /Odtp /RTCsu
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_errstring_compare PROC
; Line 352
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 353
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 354
	mov	ecx, DWORD PTR _bv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_errstring_find
	add	esp, 8
; Line 355
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_errstring_compare ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_sk_namelookup
EXTRN	_strncpy:PROC
EXTRN	_memcpy:PROC
EXTRN	_safefree:PROC
EXTRN	_host_strduptrim:PROC
EXTRN	_memset:PROC
EXTRN	__chkstk:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -8304						; size = 4
tv144 = -8300						; size = 4
tv145 = -8296						; size = 4
tv146 = -8292						; size = 4
tv70 = -8288						; size = 4
$T87574 = -8281						; size = 1
_n$86775 = -8280					; size = 4
_trimmed_host$86755 = -8276				; size = 4
_hints$86754 = -8268					; size = 32
_err$86752 = -8232					; size = 4
_h$86750 = -8228					; size = 4
_hint_family$ = -8224					; size = 4
_realhost$ = -8216					; size = 8192
_a$ = -16						; size = 4
_ret$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_host$ = 8						; size = 4
_canonicalname$ = 12					; size = 4
_address_family$ = 16					; size = 4
_sk_namelookup PROC
; Line 491
	push	ebp
	mov	ebp, esp
	mov	eax, 8304				; 00002070H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-8304]
	mov	ecx, 2076				; 0000081cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 492
	push	540					; 0000021cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 502
	cmp	DWORD PTR _address_family$[ebp], 1
	jne	SHORT $LN23@sk_nameloo
	mov	DWORD PTR tv70[ebp], 2
	jmp	SHORT $LN24@sk_nameloo
$LN23@sk_nameloo:
	xor	eax, eax
	cmp	DWORD PTR _address_family$[ebp], 2
	setne	al
	sub	eax, 1
	and	eax, 23					; 00000017H
	mov	DWORD PTR tv70[ebp], eax
$LN24@sk_nameloo:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _hint_family$[ebp], ecx
; Line 505
	push	540					; 0000021cH
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 507
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 509
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 510
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 511
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 512
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 513
	mov	BYTE PTR _realhost$[ebp], 0
; Line 515
	mov	esi, esp
	mov	edx, DWORD PTR _host$[ebp]
	push	edx
	call	DWORD PTR _p_inet_addr
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], -1
	jne	$LN20@sk_nameloo
	mov	BYTE PTR $T87574[ebp], 0
; Line 516
	mov	DWORD PTR _h$86750[ebp], 0
; Line 522
	cmp	DWORD PTR _p_getaddrinfo, 0
	je	$LN19@sk_nameloo
; Line 527
	push	32					; 00000020H
	push	0
	lea	eax, DWORD PTR _hints$86754[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 528
	mov	ecx, DWORD PTR _hint_family$[ebp]
	mov	DWORD PTR _hints$86754[ebp+4], ecx
; Line 529
	mov	DWORD PTR _hints$86754[ebp], 2
; Line 532
	mov	edx, DWORD PTR _host$[ebp]
	push	edx
	call	_host_strduptrim
	add	esp, 4
	mov	DWORD PTR _trimmed_host$86755[ebp], eax
; Line 533
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _hints$86754[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _trimmed_host$86755[ebp]
	push	edx
	call	DWORD PTR _p_getaddrinfo
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR $T87574[ebp], 1
	mov	DWORD PTR _err$86752[ebp], eax
; Line 534
	mov	eax, DWORD PTR _trimmed_host$86755[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 536
	cmp	BYTE PTR $T87574[ebp], 0
	jne	SHORT $LN33@sk_nameloo
	push	OFFSET $LN34@sk_nameloo
	call	__RTC_UninitUse
	add	esp, 4
$LN33@sk_nameloo:
	cmp	DWORD PTR _err$86752[ebp], 0
	jne	SHORT $LN18@sk_nameloo
; Line 537
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN18@sk_nameloo:
; Line 538
	jmp	SHORT $LN17@sk_nameloo
$LN19@sk_nameloo:
; Line 548
	mov	esi, esp
	mov	edx, DWORD PTR _host$[ebp]
	push	edx
	call	DWORD PTR _p_gethostbyname
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _h$86750[ebp], eax
	cmp	DWORD PTR _h$86750[ebp], 0
	je	SHORT $LN16@sk_nameloo
; Line 549
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 550
	jmp	SHORT $LN17@sk_nameloo
$LN16@sk_nameloo:
; Line 551
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR $T87574[ebp], 1
	mov	DWORD PTR _err$86752[ebp], eax
$LN17@sk_nameloo:
; Line 554
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	$LN14@sk_nameloo
; Line 561
	cmp	BYTE PTR $T87574[ebp], 0
	jne	SHORT $LN35@sk_nameloo
	push	OFFSET $LN34@sk_nameloo
	call	__RTC_UninitUse
	add	esp, 4
$LN35@sk_nameloo:
	cmp	DWORD PTR _err$86752[ebp], 10050	; 00002742H
	jne	SHORT $LN31@sk_nameloo
	mov	DWORD PTR tv146[ebp], OFFSET $SG86762
	jmp	$LN32@sk_nameloo
$LN31@sk_nameloo:
	cmp	BYTE PTR $T87574[ebp], 0
	jne	SHORT $LN36@sk_nameloo
	push	OFFSET $LN34@sk_nameloo
	call	__RTC_UninitUse
	add	esp, 4
$LN36@sk_nameloo:
	cmp	DWORD PTR _err$86752[ebp], 11001	; 00002af9H
	jne	SHORT $LN29@sk_nameloo
	mov	DWORD PTR tv145[ebp], OFFSET $SG86763
	jmp	$LN30@sk_nameloo
$LN29@sk_nameloo:
	cmp	BYTE PTR $T87574[ebp], 0
	jne	SHORT $LN37@sk_nameloo
	push	OFFSET $LN34@sk_nameloo
	call	__RTC_UninitUse
	add	esp, 4
$LN37@sk_nameloo:
	cmp	DWORD PTR _err$86752[ebp], 11002	; 00002afaH
	jne	SHORT $LN27@sk_nameloo
	mov	DWORD PTR tv144[ebp], OFFSET $SG86764
	jmp	SHORT $LN28@sk_nameloo
$LN27@sk_nameloo:
	cmp	DWORD PTR _p_getaddrinfo, 0
	je	SHORT $LN25@sk_nameloo
	cmp	DWORD PTR _p_gai_strerror, 0
	je	SHORT $LN25@sk_nameloo
	cmp	BYTE PTR $T87574[ebp], 0
	jne	SHORT $LN38@sk_nameloo
	push	OFFSET $LN34@sk_nameloo
	call	__RTC_UninitUse
	add	esp, 4
$LN38@sk_nameloo:
	mov	esi, esp
	mov	edx, DWORD PTR _err$86752[ebp]
	push	edx
	call	DWORD PTR _p_gai_strerror
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN26@sk_nameloo
$LN25@sk_nameloo:
	mov	DWORD PTR tv143[ebp], OFFSET $SG86765
$LN26@sk_nameloo:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv144[ebp], eax
$LN28@sk_nameloo:
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv145[ebp], ecx
$LN30@sk_nameloo:
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv146[ebp], edx
$LN32@sk_nameloo:
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR tv146[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 562
	jmp	$LN13@sk_nameloo
$LN14@sk_nameloo:
; Line 563
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 567
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN12@sk_nameloo
; Line 570
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN11@sk_nameloo
; Line 573
	push	4
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN11@sk_nameloo:
; Line 575
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN10@sk_nameloo
; Line 576
	push	8192					; 00002000H
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	eax, DWORD PTR _realhost$[ebp]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 577
	jmp	SHORT $LN9@sk_nameloo
$LN10@sk_nameloo:
; Line 578
	push	8192					; 00002000H
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	lea	edx, DWORD PTR _realhost$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
$LN9@sk_nameloo:
; Line 581
	jmp	$LN13@sk_nameloo
$LN12@sk_nameloo:
; Line 585
	mov	DWORD PTR _n$86775[ebp], 0
	jmp	SHORT $LN7@sk_nameloo
$LN6@sk_nameloo:
	mov	eax, DWORD PTR _n$86775[ebp]
	add	eax, 1
	mov	DWORD PTR _n$86775[ebp], eax
$LN7@sk_nameloo:
	mov	ecx, DWORD PTR _h$86750[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _n$86775[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN5@sk_nameloo
	jmp	SHORT $LN6@sk_nameloo
$LN5@sk_nameloo:
; Line 586
	push	4
	mov	ecx, DWORD PTR _n$86775[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 587
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _n$86775[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 588
	mov	DWORD PTR _n$86775[ebp], 0
	jmp	SHORT $LN4@sk_nameloo
$LN3@sk_nameloo:
	mov	edx, DWORD PTR _n$86775[ebp]
	add	edx, 1
	mov	DWORD PTR _n$86775[ebp], edx
$LN4@sk_nameloo:
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _n$86775[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN2@sk_nameloo
; Line 589
	push	4
	mov	edx, DWORD PTR _h$86750[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _n$86775[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 590
	mov	esi, esp
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	DWORD PTR _p_ntohl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _n$86775[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 591
	jmp	SHORT $LN3@sk_nameloo
$LN2@sk_nameloo:
; Line 592
	push	4
	mov	eax, DWORD PTR _h$86750[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 594
	push	8192					; 00002000H
	mov	ecx, DWORD PTR _h$86750[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _realhost$[ebp]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
$LN13@sk_nameloo:
; Line 597
	jmp	SHORT $LN1@sk_nameloo
$LN20@sk_nameloo:
; Line 602
	push	4
	push	1
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 603
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 604
	mov	esi, esp
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	DWORD PTR _p_ntohl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx], eax
; Line 605
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 606
	push	8192					; 00002000H
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	lea	edx, DWORD PTR _realhost$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
$LN1@sk_nameloo:
; Line 608
	mov	BYTE PTR _realhost$[ebp+8191], 0
; Line 609
	push	1
	lea	eax, DWORD PTR _realhost$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _canonicalname$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 610
	lea	edx, DWORD PTR _realhost$[ebp]
	push	edx
	mov	eax, DWORD PTR _canonicalname$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 611
	mov	eax, DWORD PTR _ret$[ebp]
; Line 612
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@sk_nameloo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 8304				; 00002070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN43@sk_nameloo:
	DD	3
	DD	$LN42@sk_nameloo
$LN42@sk_nameloo:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN39@sk_nameloo
	DD	-8216					; ffffdfe8H
	DD	8192					; 00002000H
	DD	$LN40@sk_nameloo
	DD	-8268					; ffffdfb4H
	DD	32					; 00000020H
	DD	$LN41@sk_nameloo
$LN41@sk_nameloo:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN40@sk_nameloo:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN39@sk_nameloo:
	DB	97					; 00000061H
	DB	0
$LN34@sk_nameloo:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
_sk_namelookup ENDP
_TEXT	ENDS
PUBLIC	_sk_nonamelookup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_host$ = 8						; size = 4
_sk_nonamelookup PROC
; Line 615
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 616
	push	540					; 0000021cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 617
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 618
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 620
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 622
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 623
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 624
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 625
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], 1
; Line 626
	push	512					; 00000200H
	mov	ecx, DWORD PTR _host$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 627
	mov	eax, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [eax+539], 0
; Line 628
	mov	eax, DWORD PTR _ret$[ebp]
; Line 629
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_nonamelookup ENDP
_TEXT	ENDS
PUBLIC	_sk_namedpipe_addr
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_pipename$ = 8						; size = 4
_sk_namedpipe_addr PROC
; Line 632
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 633
	push	540					; 0000021cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 634
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 635
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 637
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 639
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+12], 1
; Line 640
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 641
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 642
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], 1
; Line 643
	push	512					; 00000200H
	mov	ecx, DWORD PTR _pipename$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 644
	mov	eax, DWORD PTR _ret$[ebp]
	mov	BYTE PTR [eax+539], 0
; Line 645
	mov	eax, DWORD PTR _ret$[ebp]
; Line 646
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_namedpipe_addr ENDP
_TEXT	ENDS
PUBLIC	_sk_nextaddr
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_addr$ = 8						; size = 4
_step$ = 12						; size = 4
_sk_nextaddr PROC
; Line 649
	push	ebp
	mov	ebp, esp
; Line 651
	mov	eax, DWORD PTR _step$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@sk_nextadd
; Line 652
	mov	ecx, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN4@sk_nextadd
; Line 653
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _step$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], eax
; Line 654
	mov	eax, 1
	jmp	SHORT $LN6@sk_nextadd
; Line 655
	jmp	SHORT $LN5@sk_nextadd
$LN4@sk_nextadd:
; Line 656
	xor	eax, eax
	jmp	SHORT $LN6@sk_nextadd
$LN5@sk_nextadd:
; Line 659
	mov	ecx, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _addr$[ebp]
	cmp	edx, DWORD PTR [eax+24]
	jge	SHORT $LN2@sk_nextadd
; Line 660
	mov	ecx, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 661
	mov	eax, 1
	jmp	SHORT $LN6@sk_nextadd
; Line 662
	jmp	SHORT $LN6@sk_nextadd
$LN2@sk_nextadd:
; Line 663
	xor	eax, eax
$LN6@sk_nextadd:
; Line 665
	pop	ebp
	ret	0
_sk_nextaddr ENDP
_TEXT	ENDS
PUBLIC	_sk_getaddr
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -52						; size = 4
tv92 = -48						; size = 4
_a$86838 = -40						; size = 4
_dwbuflen$86830 = -28					; size = 4
_err$86828 = -20					; size = 4
_step$ = -12						; size = 8
_addr$ = 8						; size = 4
_buf$ = 12						; size = 4
_buflen$ = 16						; size = 4
_sk_getaddr PROC
; Line 668
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 670
	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _step$[ebp], ecx
	mov	DWORD PTR _step$[ebp+4], 0
; Line 673
	cmp	DWORD PTR _step$[ebp], 0
	je	$LN8@sk_getaddr
; Line 674
	mov	DWORD PTR _err$86828[ebp], 0
; Line 675
	cmp	DWORD PTR _p_WSAAddressToStringA, 0
	je	SHORT $LN7@sk_getaddr
; Line 676
	mov	edx, DWORD PTR _buflen$[ebp]
	mov	DWORD PTR _dwbuflen$86830[ebp], edx
; Line 678
	mov	esi, esp
	lea	eax, DWORD PTR _dwbuflen$86830[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _step$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _p_WSAAddressToStringA
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$86828[ebp], eax
; Line 679
	jmp	SHORT $LN6@sk_getaddr
$LN7@sk_getaddr:
; Line 680
	mov	DWORD PTR _err$86828[ebp], -1
$LN6@sk_getaddr:
; Line 681
	cmp	DWORD PTR _err$86828[ebp], 0
	je	SHORT $LN5@sk_getaddr
; Line 682
	mov	eax, DWORD PTR _buflen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addr$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 683
	mov	eax, DWORD PTR _buf$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@sk_getaddr
; Line 684
	mov	edx, DWORD PTR _buflen$[ebp]
	push	edx
	push	OFFSET $SG86835
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
$LN4@sk_getaddr:
; Line 685
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _buflen$[ebp]
	mov	BYTE PTR [ecx-1], 0
$LN5@sk_getaddr:
; Line 687
	jmp	$LN9@sk_getaddr
$LN8@sk_getaddr:
; Line 689
	mov	edx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN13@sk_getaddr
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN14@sk_getaddr
$LN13@sk_getaddr:
	cmp	DWORD PTR _step$[ebp], 0
	je	SHORT $LN11@sk_getaddr
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN12@sk_getaddr
$LN11@sk_getaddr:
	mov	DWORD PTR tv91[ebp], 2
$LN12@sk_getaddr:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR tv92[ebp], edx
$LN14@sk_getaddr:
	cmp	DWORD PTR tv92[ebp], 2
	jne	SHORT $LN2@sk_getaddr
; Line 691
	mov	eax, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN15@sk_getaddr
	mov	ecx, DWORD PTR _addr$[ebp]
	mov	edx, DWORD PTR _step$[ebp+4]
	cmp	edx, DWORD PTR [ecx+24]
	jl	SHORT $LN16@sk_getaddr
$LN15@sk_getaddr:
	push	691					; 000002b3H
	push	OFFSET $SG86840
	push	OFFSET $SG86841
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@sk_getaddr:
; Line 692
	mov	ecx, DWORD PTR _addr$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	esi, esp
	mov	eax, DWORD PTR _step$[ebp+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$86838[ebp], eax
; Line 693
	mov	edx, DWORD PTR _buflen$[ebp]
	push	edx
	mov	esi, esp
	mov	eax, DWORD PTR _a$86838[ebp]
	push	eax
	call	DWORD PTR _p_inet_ntoa
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 694
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _buflen$[ebp]
	mov	BYTE PTR [edx-1], 0
; Line 695
	jmp	SHORT $LN9@sk_getaddr
$LN2@sk_getaddr:
; Line 696
	mov	eax, DWORD PTR _buflen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addr$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 697
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _buflen$[ebp]
	mov	BYTE PTR [eax-1], 0
$LN9@sk_getaddr:
; Line 699
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@sk_getaddr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@sk_getaddr:
	DD	3
	DD	$LN20@sk_getaddr
$LN20@sk_getaddr:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN17@sk_getaddr
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN18@sk_getaddr
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN19@sk_getaddr
$LN19@sk_getaddr:
	DB	97					; 00000061H
	DB	0
$LN18@sk_getaddr:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN17@sk_getaddr:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	0
_sk_getaddr ENDP
_TEXT	ENDS
PUBLIC	_sk_addr_needs_port
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_addr$ = 8						; size = 4
_sk_addr_needs_port PROC
; Line 702
	push	ebp
	mov	ebp, esp
; Line 703
	mov	eax, DWORD PTR _addr$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 0
	sete	cl
	mov	eax, ecx
; Line 704
	pop	ebp
	ret	0
_sk_addr_needs_port ENDP
_TEXT	ENDS
PUBLIC	_sk_hostname_is_local
EXTRN	_strncmp:PROC
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -4						; size = 4
_name$ = 8						; size = 4
_sk_hostname_is_local PROC
; Line 707
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 710
	push	OFFSET $SG86849
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@sk_hostnam
	push	OFFSET $SG86850
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@sk_hostnam
	push	4
	push	OFFSET $SG86851
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@sk_hostnam
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@sk_hostnam
$LN3@sk_hostnam:
	mov	DWORD PTR tv77[ebp], 1
$LN4@sk_hostnam:
	mov	eax, DWORD PTR tv77[ebp]
; Line 711
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_hostname_is_local ENDP
_TEXT	ENDS
PUBLIC	_IN6_IS_ADDR_LOOPBACK
PUBLIC	_sk_address_is_local
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -40						; size = 4
tv70 = -36						; size = 4
_a$86892 = -28						; size = 4
_family$ = -20						; size = 4
_step$ = -12						; size = 8
_addr$ = 8						; size = 4
_sk_address_is_local PROC
; Line 745
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _step$[ebp], ecx
	mov	DWORD PTR _step$[ebp+4], 0
; Line 749
	mov	edx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN11@sk_address
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN12@sk_address
$LN11@sk_address:
	cmp	DWORD PTR _step$[ebp], 0
	je	SHORT $LN9@sk_address
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN10@sk_address
$LN9@sk_address:
	mov	DWORD PTR tv69[ebp], 2
$LN10@sk_address:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], edx
$LN12@sk_address:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 752
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	jne	SHORT $LN6@sk_address
; Line 753
	mov	ecx, DWORD PTR _step$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 8
	push	edx
	call	_IN6_IS_ADDR_LOOPBACK
	add	esp, 4
	movzx	eax, al
	jmp	$LN7@sk_address
; Line 754
	jmp	$LN7@sk_address
$LN6@sk_address:
; Line 756
	cmp	DWORD PTR _family$[ebp], 2
	jne	SHORT $LN4@sk_address
; Line 758
	cmp	DWORD PTR _step$[ebp], 0
	je	SHORT $LN3@sk_address
; Line 760
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_ipv4_is_local_addr
	add	esp, 4
	jmp	SHORT $LN7@sk_address
; Line 761
	jmp	SHORT $LN2@sk_address
$LN3@sk_address:
; Line 765
	mov	eax, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN13@sk_address
	mov	ecx, DWORD PTR _addr$[ebp]
	mov	edx, DWORD PTR _step$[ebp+4]
	cmp	edx, DWORD PTR [ecx+24]
	jl	SHORT $LN14@sk_address
$LN13@sk_address:
	push	765					; 000002fdH
	push	OFFSET $SG86894
	push	OFFSET $SG86895
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@sk_address:
; Line 766
	mov	ecx, DWORD PTR _addr$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	esi, esp
	mov	eax, DWORD PTR _step$[ebp+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$86892[ebp], eax
; Line 767
	mov	edx, DWORD PTR _a$86892[ebp]
	push	edx
	call	_ipv4_is_local_addr
	add	esp, 4
	jmp	SHORT $LN7@sk_address
$LN2@sk_address:
; Line 769
	jmp	SHORT $LN7@sk_address
$LN4@sk_address:
; Line 770
	cmp	DWORD PTR _family$[ebp], 0
	je	SHORT $LN15@sk_address
	push	770					; 00000302H
	push	OFFSET $SG86898
	push	OFFSET $SG86899
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@sk_address:
; Line 771
	xor	eax, eax
$LN7@sk_address:
; Line 773
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@sk_address
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@sk_address:
	DD	2
	DD	$LN18@sk_address
$LN18@sk_address:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN16@sk_address
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN17@sk_address
$LN17@sk_address:
	DB	97					; 00000061H
	DB	0
$LN16@sk_address:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	0
_sk_address_is_local ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _IN6_IS_ADDR_LOOPBACK
_TEXT	SEGMENT
tv87 = -1						; size = 1
_a$ = 8							; size = 4
_IN6_IS_ADDR_LOOPBACK PROC				; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\ws2ipdef.h
; Line 373
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 385
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@IN6_IS_ADD
	mov	edx, DWORD PTR _a$[ebp]
	movzx	eax, WORD PTR [edx+2]
	test	eax, eax
	jne	SHORT $LN3@IN6_IS_ADD
	mov	ecx, DWORD PTR _a$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@IN6_IS_ADD
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN3@IN6_IS_ADD
	mov	edx, DWORD PTR _a$[ebp]
	movzx	eax, WORD PTR [edx+8]
	test	eax, eax
	jne	SHORT $LN3@IN6_IS_ADD
	mov	ecx, DWORD PTR _a$[ebp]
	movzx	edx, WORD PTR [ecx+10]
	test	edx, edx
	jne	SHORT $LN3@IN6_IS_ADD
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN3@IN6_IS_ADD
	mov	edx, DWORD PTR _a$[ebp]
	movzx	eax, WORD PTR [edx+14]
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN3@IN6_IS_ADD
	mov	BYTE PTR tv87[ebp], 1
	jmp	SHORT $LN4@IN6_IS_ADD
$LN3@IN6_IS_ADD:
	mov	BYTE PTR tv87[ebp], 0
$LN4@IN6_IS_ADD:
	mov	al, BYTE PTR tv87[ebp]
; Line 386
	mov	esp, ebp
	pop	ebp
	ret	0
_IN6_IS_ADDR_LOOPBACK ENDP
_TEXT	ENDS
EXTRN	_logevent:PROC
_BSS	SEGMENT
_local_interfaces DB 04c0H DUP (?)
_n_local_interfaces DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_address$86877 = -24					; size = 4
_i$86873 = -20						; size = 4
_retbytes$86861 = -12					; size = 4
_s$86860 = -4						; size = 4
_addr$ = 8						; size = 4
_ipv4_is_local_addr PROC
; File c:\workspace\putty\windows\winnet.c
; Line 717
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 718
	mov	esi, esp
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	DWORD PTR _p_ntohl
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -16777216				; ff000000H
	cmp	eax, 2130706432				; 7f000000H
	jne	SHORT $LN9@ipv4_is_lo
; Line 719
	mov	eax, 1
	jmp	$LN10@ipv4_is_lo
$LN9@ipv4_is_lo:
; Line 720
	cmp	DWORD PTR _n_local_interfaces, 0
	jne	SHORT $LN8@ipv4_is_lo
; Line 721
	mov	esi, esp
	push	0
	push	2
	push	2
	call	DWORD PTR _p_socket
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$86860[ebp], eax
; Line 727
	cmp	DWORD PTR _p_WSAIoctl, 0
	je	SHORT $LN7@ipv4_is_lo
	mov	esi, esp
	push	0
	push	0
	lea	ecx, DWORD PTR _retbytes$86861[ebp]
	push	ecx
	push	1216					; 000004c0H
	push	OFFSET _local_interfaces
	push	0
	push	0
	push	1074033791				; 4004747fH
	mov	edx, DWORD PTR _s$86860[ebp]
	push	edx
	call	DWORD PTR _p_WSAIoctl
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@ipv4_is_lo
; Line 728
	mov	eax, DWORD PTR _retbytes$86861[ebp]
	xor	edx, edx
	mov	ecx, 76					; 0000004cH
	div	ecx
	mov	DWORD PTR _n_local_interfaces, eax
; Line 729
	jmp	SHORT $LN8@ipv4_is_lo
$LN7@ipv4_is_lo:
; Line 730
	push	OFFSET $SG86871
	push	0
	call	_logevent
	add	esp, 8
$LN8@ipv4_is_lo:
; Line 732
	cmp	DWORD PTR _n_local_interfaces, 0
	jle	SHORT $LN5@ipv4_is_lo
; Line 734
	mov	DWORD PTR _i$86873[ebp], 0
	jmp	SHORT $LN4@ipv4_is_lo
$LN3@ipv4_is_lo:
	mov	edx, DWORD PTR _i$86873[ebp]
	add	edx, 1
	mov	DWORD PTR _i$86873[ebp], edx
$LN4@ipv4_is_lo:
	mov	eax, DWORD PTR _i$86873[ebp]
	cmp	eax, DWORD PTR _n_local_interfaces
	jge	SHORT $LN5@ipv4_is_lo
; Line 736
	mov	ecx, DWORD PTR _i$86873[ebp]
	imul	ecx, 76					; 0000004cH
	add	ecx, OFFSET _local_interfaces+4
	mov	DWORD PTR _address$86877[ebp], ecx
; Line 737
	mov	edx, DWORD PTR _address$86877[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _addr$[ebp]
	jne	SHORT $LN1@ipv4_is_lo
; Line 738
	mov	eax, 1
	jmp	SHORT $LN10@ipv4_is_lo
$LN1@ipv4_is_lo:
; Line 739
	jmp	SHORT $LN3@ipv4_is_lo
$LN5@ipv4_is_lo:
; Line 741
	xor	eax, eax
$LN10@ipv4_is_lo:
; Line 742
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ipv4_is_lo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@ipv4_is_lo:
	DD	1
	DD	$LN13@ipv4_is_lo
$LN13@ipv4_is_lo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@ipv4_is_lo
$LN12@ipv4_is_lo:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_ipv4_is_local_addr ENDP
_TEXT	ENDS
PUBLIC	_sk_address_is_special_local
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_addr$ = 8						; size = 4
_sk_address_is_special_local PROC
; Line 776
	push	ebp
	mov	ebp, esp
; Line 777
	xor	eax, eax
; Line 778
	pop	ebp
	ret	0
_sk_address_is_special_local ENDP
_TEXT	ENDS
PUBLIC	_sk_addrtype
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv69 = -28						; size = 4
tv70 = -24						; size = 4
_family$ = -20						; size = 4
_step$ = -12						; size = 8
_addr$ = 8						; size = 4
_sk_addrtype PROC
; Line 781
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 784
	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _step$[ebp], ecx
	mov	DWORD PTR _step$[ebp+4], 0
; Line 785
	mov	edx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN5@sk_addrtyp
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN6@sk_addrtyp
$LN5@sk_addrtyp:
	cmp	DWORD PTR _step$[ebp], 0
	je	SHORT $LN3@sk_addrtyp
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@sk_addrtyp
$LN3@sk_addrtyp:
	mov	DWORD PTR tv69[ebp], 2
$LN4@sk_addrtyp:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], edx
$LN6@sk_addrtyp:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 791
	cmp	DWORD PTR _family$[ebp], 2
	jne	SHORT $LN7@sk_addrtyp
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@sk_addrtyp
$LN7@sk_addrtyp:
	xor	ecx, ecx
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	setne	cl
	add	ecx, 2
	mov	DWORD PTR tv74[ebp], ecx
$LN8@sk_addrtyp:
	mov	eax, DWORD PTR tv74[ebp]
; Line 792
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@sk_addrtyp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@sk_addrtyp:
	DD	1
	DD	$LN10@sk_addrtyp
$LN10@sk_addrtyp:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@sk_addrtyp
$LN9@sk_addrtyp:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	0
_sk_addrtype ENDP
_TEXT	ENDS
PUBLIC	_sk_addrcopy
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -40						; size = 4
tv70 = -36						; size = 4
_a$86932 = -28						; size = 4
_family$ = -20						; size = 4
_step$ = -12						; size = 8
_addr$ = 8						; size = 4
_buf$ = 12						; size = 4
_sk_addrcopy PROC
; Line 795
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 798
	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _step$[ebp], ecx
	mov	DWORD PTR _step$[ebp+4], 0
; Line 799
	mov	edx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN12@sk_addrcop
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN13@sk_addrcop
$LN12@sk_addrcop:
	cmp	DWORD PTR _step$[ebp], 0
	je	SHORT $LN10@sk_addrcop
	mov	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN11@sk_addrcop
$LN10@sk_addrcop:
	mov	DWORD PTR tv69[ebp], 2
$LN11@sk_addrcop:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], edx
$LN13@sk_addrcop:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 801
	cmp	DWORD PTR _family$[ebp], 0
	jne	SHORT $LN14@sk_addrcop
	push	801					; 00000321H
	push	OFFSET $SG86916
	push	OFFSET $SG86917
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@sk_addrcop:
; Line 803
	cmp	DWORD PTR _step$[ebp], 0
	je	SHORT $LN7@sk_addrcop
; Line 804
	cmp	DWORD PTR _family$[ebp], 2
	jne	SHORT $LN6@sk_addrcop
; Line 806
	push	4
	mov	edx, DWORD PTR _step$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@sk_addrcop
$LN6@sk_addrcop:
; Line 807
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	jne	SHORT $LN4@sk_addrcop
; Line 809
	push	16					; 00000010H
	mov	edx, DWORD PTR _step$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 810
	jmp	SHORT $LN5@sk_addrcop
$LN4@sk_addrcop:
; Line 811
	xor	edx, edx
	jne	SHORT $LN5@sk_addrcop
	push	811					; 0000032bH
	push	OFFSET $SG86928
	push	OFFSET $SG86929
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@sk_addrcop:
; Line 812
	jmp	SHORT $LN8@sk_addrcop
$LN7@sk_addrcop:
; Line 814
	cmp	DWORD PTR _family$[ebp], 2
	jne	SHORT $LN8@sk_addrcop
; Line 816
	mov	ecx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN16@sk_addrcop
	mov	edx, DWORD PTR _addr$[ebp]
	mov	eax, DWORD PTR _step$[ebp+4]
	cmp	eax, DWORD PTR [edx+24]
	jl	SHORT $LN17@sk_addrcop
$LN16@sk_addrcop:
	push	816					; 00000330H
	push	OFFSET $SG86934
	push	OFFSET $SG86935
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@sk_addrcop:
; Line 817
	mov	edx, DWORD PTR _addr$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	esi, esp
	mov	ecx, DWORD PTR _step$[ebp+4]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$86932[ebp], eax
; Line 818
	push	4
	lea	eax, DWORD PTR _a$86932[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@sk_addrcop:
; Line 820
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@sk_addrcop
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@sk_addrcop:
	DD	2
	DD	$LN20@sk_addrcop
$LN20@sk_addrcop:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN18@sk_addrcop
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN19@sk_addrcop
$LN19@sk_addrcop:
	DB	97					; 00000061H
	DB	0
$LN18@sk_addrcop:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	0
_sk_addrcopy ENDP
_TEXT	ENDS
PUBLIC	_sk_addr_free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_addr$ = 8						; size = 4
_sk_addr_free PROC
; Line 823
	push	ebp
	mov	ebp, esp
	push	esi
; Line 824
	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _addr$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@sk_addr_fr
; Line 825
	jmp	SHORT $LN4@sk_addr_fr
$LN3@sk_addr_fr:
; Line 827
	mov	ecx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN2@sk_addr_fr
	cmp	DWORD PTR _p_freeaddrinfo, 0
	je	SHORT $LN2@sk_addr_fr
; Line 828
	mov	esi, esp
	mov	edx, DWORD PTR _addr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR _p_freeaddrinfo
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_addr_fr:
; Line 830
	mov	ecx, DWORD PTR _addr$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN1@sk_addr_fr
; Line 831
	mov	edx, DWORD PTR _addr$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_safefree
	add	esp, 4
$LN1@sk_addr_fr:
; Line 832
	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN4@sk_addr_fr:
; Line 833
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_sk_addr_free ENDP
_TEXT	ENDS
PUBLIC	_sk_addr_dup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_addr$ = 8						; size = 4
_sk_addr_dup PROC
; Line 836
	push	ebp
	mov	ebp, esp
; Line 837
	mov	eax, DWORD PTR _addr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _addr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 838
	mov	eax, DWORD PTR _addr$[ebp]
; Line 839
	pop	ebp
	ret	0
_sk_addr_dup ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -8						; size = 4
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_p$ = 12						; size = 4
_sk_tcp_plug PROC
; Line 842
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 843
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 844
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _ret$[ebp], edx
; Line 845
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@sk_tcp_plu
; Line 846
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN1@sk_tcp_plu:
; Line 847
	mov	eax, DWORD PTR _ret$[ebp]
; Line 848
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_plug ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = 8						; size = 4
_sk_tcp_flush PROC
; Line 851
	push	ebp
	mov	ebp, esp
; Line 856
	pop	ebp
	ret	0
_sk_tcp_flush ENDP
_TEXT	ENDS
PUBLIC	_sk_new
EXTRN	_bufchain_init:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err$ = -8						; size = 4
_ret$ = -4						; size = 4
_addr$ = 8						; size = 4
_port$ = 12						; size = 4
_privport$ = 16						; size = 4
_oobinline$ = 20					; size = 4
_nodelay$ = 24						; size = 4
_keepalive$ = 28					; size = 4
_plug$ = 32						; size = 4
_sk_new	PROC
; Line 1116
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1134
	push	104					; 00000068H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1135
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], OFFSET ?fn_table@?1??sk_new@@9@9
; Line 1136
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1137
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1138
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_bufchain_init
	add	esp, 4
; Line 1139
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 1140
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 1141
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+52], 0
; Line 1142
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+72], 0
; Line 1143
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 1144
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 1145
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+44], 0
; Line 1146
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 1147
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+100], 0
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 1148
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _oobinline$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1149
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _nodelay$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 1150
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _keepalive$[ebp]
	mov	DWORD PTR [ecx+64], edx
; Line 1151
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _privport$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 1152
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _port$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 1153
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _addr$[ebp]
	mov	DWORD PTR [ecx+76], edx
; Line 1154
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+80], eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 1155
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], -1
; Line 1157
	mov	DWORD PTR _err$[ebp], 0
$LN4@sk_new:
; Line 1159
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_try_connect
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1160
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN2@sk_new
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	_sk_nextaddr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@sk_new
$LN2@sk_new:
; Line 1162
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1163
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_new	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_del234:PROC
EXTRN	_do_select:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv244 = -140						; size = 4
tv175 = -136						; size = 4
tv90 = -132						; size = 4
tv91 = -128						; size = 4
_sockcode$87047 = -124					; size = 4
_b$87040 = -116						; size = 4
_b$87037 = -104						; size = 4
_b$87034 = -92						; size = 4
_family$ = -84						; size = 4
_localport$ = -80					; size = 2
_errstr$ = -76						; size = 4
_err$ = -72						; size = 4
_a$ = -64						; size = 16
_a6$ = -40						; size = 28
_s$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_sock$ = 8						; size = 4
_try_connect PROC
; Line 926
	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 937
	mov	eax, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN26@try_connec
; Line 938
	push	0
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_do_select
	add	esp, 8
; Line 939
	mov	esi, esp
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@try_connec:
; Line 942
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	push	0
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 947
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN31@try_connec
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN32@try_connec
$LN31@try_connec:
	mov	edx, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN29@try_connec
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN30@try_connec
$LN29@try_connec:
	mov	DWORD PTR tv90[ebp], 2
$LN30@try_connec:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN32@try_connec:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _family$[ebp], ecx
; Line 955
	mov	edx, DWORD PTR _sock$[ebp]
	push	edx
	mov	eax, DWORD PTR _sktree
	push	eax
	call	_del234
	add	esp, 8
; Line 957
	mov	esi, esp
	push	0
	push	1
	mov	ecx, DWORD PTR _family$[ebp]
	push	ecx
	call	DWORD PTR _p_socket
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$[ebp], eax
; Line 958
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 960
	cmp	DWORD PTR _s$[ebp], -1
	jne	SHORT $LN25@try_connec
; Line 961
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 962
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	call	_winsock_error_string
	add	esp, 4
	mov	edx, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 963
	jmp	$ret$87032
$LN25@try_connec:
; Line 966
	mov	eax, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN24@try_connec
; Line 967
	mov	DWORD PTR _b$87034[ebp], 1
; Line 968
	mov	esi, esp
	push	4
	lea	ecx, DWORD PTR _b$87034[ebp]
	push	ecx
	push	256					; 00000100H
	push	65535					; 0000ffffH
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR _p_setsockopt
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@try_connec:
; Line 971
	mov	eax, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN23@try_connec
; Line 972
	mov	DWORD PTR _b$87037[ebp], 1
; Line 973
	mov	esi, esp
	push	4
	lea	ecx, DWORD PTR _b$87037[ebp]
	push	ecx
	push	1
	push	6
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR _p_setsockopt
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@try_connec:
; Line 976
	mov	eax, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN22@try_connec
; Line 977
	mov	DWORD PTR _b$87040[ebp], 1
; Line 978
	mov	esi, esp
	push	4
	lea	ecx, DWORD PTR _b$87040[ebp]
	push	ecx
	push	8
	push	65535					; 0000ffffH
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR _p_setsockopt
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@try_connec:
; Line 984
	mov	eax, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN21@try_connec
; Line 985
	mov	ecx, 1023				; 000003ffH
	mov	WORD PTR _localport$[ebp], cx
; Line 986
	jmp	SHORT $LN19@try_connec
$LN21@try_connec:
; Line 987
	xor	edx, edx
	mov	WORD PTR _localport$[ebp], dx
$LN19@try_connec:
; Line 990
	mov	eax, 1
	test	eax, eax
	je	$LN18@try_connec
; Line 994
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	jne	SHORT $LN17@try_connec
; Line 995
	push	28					; 0000001cH
	push	0
	lea	ecx, DWORD PTR _a6$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 996
	mov	edx, 23					; 00000017H
	mov	WORD PTR _a6$[ebp], dx
; Line 998
	mov	esi, esp
	movzx	eax, WORD PTR _localport$[ebp]
	push	eax
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a6$[ebp+2], ax
; Line 999
	jmp	SHORT $LN16@try_connec
$LN17@try_connec:
; Line 1002
	mov	ecx, 2
	mov	WORD PTR _a$[ebp], cx
; Line 1003
	mov	esi, esp
	push	0
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp+4], eax
; Line 1004
	mov	esi, esp
	movzx	edx, WORD PTR _localport$[ebp]
	push	edx
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a$[ebp+2], ax
$LN16@try_connec:
; Line 1010
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	jne	SHORT $LN33@try_connec
	lea	eax, DWORD PTR _a6$[ebp]
	mov	DWORD PTR tv175[ebp], eax
	jmp	SHORT $LN34@try_connec
$LN33@try_connec:
	lea	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv175[ebp], ecx
$LN34@try_connec:
	mov	edx, DWORD PTR _family$[ebp]
	sub	edx, 23					; 00000017H
	neg	edx
	sbb	edx, edx
	and	edx, -12				; fffffff4H
	add	edx, 28					; 0000001cH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR tv175[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR _p_bind
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sockcode$87047[ebp], eax
; Line 1014
	cmp	DWORD PTR _sockcode$87047[ebp], -1
	je	SHORT $LN15@try_connec
; Line 1015
	mov	DWORD PTR _err$[ebp], 0
; Line 1016
	jmp	SHORT $LN18@try_connec
; Line 1017
	jmp	SHORT $LN14@try_connec
$LN15@try_connec:
; Line 1018
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 1019
	cmp	DWORD PTR _err$[ebp], 10048		; 00002740H
	je	SHORT $LN14@try_connec
; Line 1020
	jmp	SHORT $LN18@try_connec
$LN14@try_connec:
; Line 1023
	movsx	edx, WORD PTR _localport$[ebp]
	test	edx, edx
	jne	SHORT $LN12@try_connec
; Line 1024
	jmp	SHORT $LN18@try_connec
$LN12@try_connec:
; Line 1025
	mov	ax, WORD PTR _localport$[ebp]
	sub	ax, 1
	mov	WORD PTR _localport$[ebp], ax
; Line 1026
	movsx	ecx, WORD PTR _localport$[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@try_connec
; Line 1027
	jmp	SHORT $LN18@try_connec
$LN11@try_connec:
; Line 1028
	jmp	$LN19@try_connec
$LN18@try_connec:
; Line 1030
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN10@try_connec
; Line 1031
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	_winsock_error_string
	add	esp, 4
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1032
	jmp	$ret$87032
$LN10@try_connec:
; Line 1039
	mov	edx, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [edx+80], 0
	je	$LN9@try_connec
; Line 1040
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	jne	SHORT $LN8@try_connec
; Line 1041
	mov	eax, 23					; 00000017H
	mov	WORD PTR _a6$[ebp], ax
; Line 1042
	mov	esi, esp
	mov	ecx, DWORD PTR _sock$[ebp]
	movzx	edx, WORD PTR [ecx+88]
	push	edx
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a6$[ebp+2], ax
; Line 1044
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 8
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _a6$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _a6$[ebp+12], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _a6$[ebp+16], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _a6$[ebp+20], ecx
; Line 1045
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _a6$[ebp+4], edx
; Line 1046
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _a6$[ebp+24], eax
; Line 1047
	jmp	SHORT $LN7@try_connec
$LN8@try_connec:
; Line 1048
	mov	ecx, 2
	mov	WORD PTR _a$[ebp], cx
; Line 1050
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _a$[ebp+4], edx
; Line 1051
	mov	esi, esp
	mov	eax, DWORD PTR _sock$[ebp]
	movzx	ecx, WORD PTR [eax+88]
	push	ecx
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a$[ebp+2], ax
$LN7@try_connec:
; Line 1053
	jmp	SHORT $LN6@try_connec
$LN9@try_connec:
; Line 1056
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+76]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN35@try_connec
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	cmp	ecx, DWORD PTR [edx+24]
	jl	SHORT $LN36@try_connec
$LN35@try_connec:
	push	1056					; 00000420H
	push	OFFSET $SG87070
	push	OFFSET $SG87071
	call	__wassert
	add	esp, 12					; 0000000cH
$LN36@try_connec:
; Line 1057
	mov	eax, 2
	mov	WORD PTR _a$[ebp], ax
; Line 1058
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx+20]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp+4], eax
; Line 1059
	mov	esi, esp
	mov	ecx, DWORD PTR _sock$[ebp]
	movzx	edx, WORD PTR [ecx+88]
	push	edx
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a$[ebp+2], ax
$LN6@try_connec:
; Line 1064
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_do_select
	add	esp, 8
	mov	DWORD PTR _errstr$[ebp], eax
; Line 1065
	cmp	DWORD PTR _errstr$[ebp], 0
	je	SHORT $LN5@try_connec
; Line 1066
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR _errstr$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1067
	mov	DWORD PTR _err$[ebp], 1
; Line 1068
	jmp	$ret$87032
$LN5@try_connec:
; Line 1080
	cmp	DWORD PTR _family$[ebp], 23		; 00000017H
	jne	SHORT $LN37@try_connec
	lea	eax, DWORD PTR _a6$[ebp]
	mov	DWORD PTR tv244[ebp], eax
	jmp	SHORT $LN38@try_connec
$LN37@try_connec:
	lea	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv244[ebp], ecx
$LN38@try_connec:
	mov	edx, DWORD PTR _family$[ebp]
	sub	edx, 23					; 00000017H
	neg	edx
	sbb	edx, edx
	and	edx, -12				; fffffff4H
	add	edx, 28					; 0000001cH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR tv244[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR _p_connect
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN4@try_connec
; Line 1081
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 1088
	cmp	DWORD PTR _err$[ebp], 10035		; 00002733H
	je	SHORT $LN3@try_connec
; Line 1089
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	_winsock_error_string
	add	esp, 4
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1090
	jmp	SHORT $ret$87032
$LN3@try_connec:
; Line 1092
	jmp	SHORT $LN2@try_connec
$LN4@try_connec:
; Line 1097
	mov	edx, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [edx+32], 1
$LN2@try_connec:
; Line 1100
	mov	DWORD PTR _err$[ebp], 0
$ret$87032:
; Line 1107
	mov	eax, DWORD PTR _sock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sktree
	push	ecx
	call	_add234
	add	esp, 8
; Line 1109
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@try_connec
; Line 1110
	mov	esi, esp
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	push	1
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@try_connec:
; Line 1111
	mov	eax, DWORD PTR _err$[ebp]
; Line 1112
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@try_connec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN45@try_connec:
	DD	5
	DD	$LN44@try_connec
$LN44@try_connec:
	DD	-40					; ffffffd8H
	DD	28					; 0000001cH
	DD	$LN39@try_connec
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN40@try_connec
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN41@try_connec
	DD	-104					; ffffff98H
	DD	4
	DD	$LN42@try_connec
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN43@try_connec
$LN43@try_connec:
	DB	98					; 00000062H
	DB	0
$LN42@try_connec:
	DB	98					; 00000062H
	DB	0
$LN41@try_connec:
	DB	98					; 00000062H
	DB	0
$LN40@try_connec:
	DB	97					; 00000061H
	DB	0
$LN39@try_connec:
	DB	97					; 00000061H
	DB	54					; 00000036H
	DB	0
_try_connect ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_sk_newlistener
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv183 = -176						; size = 4
tv84 = -172						; size = 4
_other$87173 = -168					; size = 4
_got_addr$87154 = -164					; size = 4
_trimmed_addr$87149 = -160				; size = 4
_err$87148 = -156					; size = 4
_ai$87147 = -148					; size = 4
_hints$87146 = -136					; size = 32
_address_family$ = -100					; size = 4
_on$ = -92						; size = 4
_retcode$ = -84						; size = 4
_ret$ = -80						; size = 4
_errstr$ = -76						; size = 4
_err$ = -72						; size = 4
_a$ = -64						; size = 16
_a6$ = -40						; size = 28
_s$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_srcaddr$ = 8						; size = 4
_port$ = 12						; size = 4
_plug$ = 16						; size = 4
_local_host_only$ = 20					; size = 4
_orig_address_family$ = 24				; size = 4
_sk_newlistener PROC
; Line 1167
	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1189
	mov	DWORD PTR _on$[ebp], 1
; Line 1196
	push	104					; 00000068H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1197
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], OFFSET ?fn_table@?1??sk_newlistener@@9@9
; Line 1198
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1199
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1200
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_bufchain_init
	add	esp, 4
; Line 1201
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 1202
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 1203
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+72], 0
; Line 1204
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 1205
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 1206
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _local_host_only$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 1207
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 1208
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+100], 0
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 1209
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 1219
	cmp	DWORD PTR _orig_address_family$[ebp], 1
	jne	SHORT $LN25@sk_newlist
	mov	DWORD PTR tv84[ebp], 2
	jmp	SHORT $LN26@sk_newlist
$LN25@sk_newlist:
	xor	ecx, ecx
	cmp	DWORD PTR _orig_address_family$[ebp], 2
	setne	cl
	sub	ecx, 1
	and	ecx, 23					; 00000017H
	mov	DWORD PTR tv84[ebp], ecx
$LN26@sk_newlist:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _address_family$[ebp], edx
; Line 1228
	cmp	DWORD PTR _address_family$[ebp], 0
	jne	SHORT $LN22@sk_newlist
	mov	DWORD PTR _address_family$[ebp], 2
$LN22@sk_newlist:
; Line 1233
	mov	esi, esp
	push	0
	push	1
	mov	eax, DWORD PTR _address_family$[ebp]
	push	eax
	call	DWORD PTR _p_socket
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$[ebp], eax
; Line 1234
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 1236
	cmp	DWORD PTR _s$[ebp], -1
	jne	SHORT $LN21@sk_newlist
; Line 1237
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 1238
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_winsock_error_string
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1239
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN23@sk_newlist
$LN21@sk_newlist:
; Line 1242
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+56], 0
; Line 1244
	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _on$[ebp]
	push	eax
	push	4
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR _p_setsockopt
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1247
	cmp	DWORD PTR _address_family$[ebp], 23	; 00000017H
	jne	$LN20@sk_newlist
; Line 1248
	push	28					; 0000001cH
	push	0
	lea	edx, DWORD PTR _a6$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1249
	mov	eax, 23					; 00000017H
	mov	WORD PTR _a6$[ebp], ax
; Line 1250
	cmp	DWORD PTR _local_host_only$[ebp], 0
	je	SHORT $LN19@sk_newlist
; Line 1251
	mov	ecx, DWORD PTR _in6addr_loopback
	mov	DWORD PTR _a6$[ebp+8], ecx
	mov	edx, DWORD PTR _in6addr_loopback+4
	mov	DWORD PTR _a6$[ebp+12], edx
	mov	eax, DWORD PTR _in6addr_loopback+8
	mov	DWORD PTR _a6$[ebp+16], eax
	mov	ecx, DWORD PTR _in6addr_loopback+12
	mov	DWORD PTR _a6$[ebp+20], ecx
; Line 1252
	jmp	SHORT $LN18@sk_newlist
$LN19@sk_newlist:
; Line 1253
	mov	edx, DWORD PTR _in6addr_any
	mov	DWORD PTR _a6$[ebp+8], edx
	mov	eax, DWORD PTR _in6addr_any+4
	mov	DWORD PTR _a6$[ebp+12], eax
	mov	ecx, DWORD PTR _in6addr_any+8
	mov	DWORD PTR _a6$[ebp+16], ecx
	mov	edx, DWORD PTR _in6addr_any+12
	mov	DWORD PTR _a6$[ebp+20], edx
$LN18@sk_newlist:
; Line 1254
	cmp	DWORD PTR _srcaddr$[ebp], 0
	je	$LN17@sk_newlist
	cmp	DWORD PTR _p_getaddrinfo, 0
	je	$LN17@sk_newlist
; Line 1259
	push	32					; 00000020H
	push	0
	lea	eax, DWORD PTR _hints$87146[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1260
	mov	DWORD PTR _hints$87146[ebp+4], 23	; 00000017H
; Line 1261
	mov	DWORD PTR _hints$87146[ebp], 0
; Line 1264
	mov	ecx, DWORD PTR _srcaddr$[ebp]
	push	ecx
	call	_host_strduptrim
	add	esp, 4
	mov	DWORD PTR _trimmed_addr$87149[ebp], eax
; Line 1265
	mov	esi, esp
	lea	edx, DWORD PTR _ai$87147[ebp]
	push	edx
	lea	eax, DWORD PTR _hints$87146[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _trimmed_addr$87149[ebp]
	push	ecx
	call	DWORD PTR _p_getaddrinfo
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$87148[ebp], eax
; Line 1266
	mov	edx, DWORD PTR _trimmed_addr$87149[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1268
	cmp	DWORD PTR _err$87148[ebp], 0
	jne	SHORT $LN17@sk_newlist
	mov	eax, DWORD PTR _ai$87147[ebp]
	cmp	DWORD PTR [eax+4], 23			; 00000017H
	jne	SHORT $LN17@sk_newlist
; Line 1270
	mov	ecx, DWORD PTR _ai$87147[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 8
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _a6$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _a6$[ebp+12], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _a6$[ebp+16], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _a6$[ebp+20], ecx
$LN17@sk_newlist:
; Line 1273
	mov	esi, esp
	movzx	edx, WORD PTR _port$[ebp]
	push	edx
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a6$[ebp+2], ax
; Line 1274
	jmp	$LN15@sk_newlist
$LN20@sk_newlist:
; Line 1277
	mov	DWORD PTR _got_addr$87154[ebp], 0
; Line 1278
	mov	eax, 2
	mov	WORD PTR _a$[ebp], ax
; Line 1284
	cmp	DWORD PTR _srcaddr$[ebp], 0
	je	SHORT $LN14@sk_newlist
; Line 1285
	mov	esi, esp
	mov	ecx, DWORD PTR _srcaddr$[ebp]
	push	ecx
	call	DWORD PTR _p_inet_addr
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp+4], eax
; Line 1286
	cmp	DWORD PTR _a$[ebp+4], -1
	je	SHORT $LN14@sk_newlist
; Line 1288
	mov	esi, esp
	mov	edx, DWORD PTR _a$[ebp+4]
	push	edx
	call	DWORD PTR _p_ntohl
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -16777216				; ff000000H
	xor	ecx, ecx
	cmp	eax, 2130706432				; 7f000000H
	sete	cl
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 1289
	mov	DWORD PTR _got_addr$87154[ebp], 1
$LN14@sk_newlist:
; Line 1296
	cmp	DWORD PTR _got_addr$87154[ebp], 0
	jne	SHORT $LN12@sk_newlist
; Line 1297
	cmp	DWORD PTR _local_host_only$[ebp], 0
	je	SHORT $LN11@sk_newlist
; Line 1298
	mov	esi, esp
	push	2130706433				; 7f000001H
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp+4], eax
; Line 1299
	jmp	SHORT $LN12@sk_newlist
$LN11@sk_newlist:
; Line 1300
	mov	esi, esp
	push	0
	call	DWORD PTR _p_htonl
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp+4], eax
$LN12@sk_newlist:
; Line 1303
	mov	esi, esp
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR _p_htons
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _a$[ebp+2], ax
$LN15@sk_newlist:
; Line 1310
	cmp	DWORD PTR _address_family$[ebp], 23	; 00000017H
	jne	SHORT $LN27@sk_newlist
	lea	ecx, DWORD PTR _a6$[ebp]
	mov	DWORD PTR tv183[ebp], ecx
	jmp	SHORT $LN28@sk_newlist
$LN27@sk_newlist:
	lea	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv183[ebp], edx
$LN28@sk_newlist:
	mov	eax, DWORD PTR _address_family$[ebp]
	sub	eax, 23					; 00000017H
	neg	eax
	sbb	eax, eax
	and	eax, -12				; fffffff4H
	add	eax, 28					; 0000001cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR _p_bind
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _retcode$[ebp], eax
; Line 1314
	cmp	DWORD PTR _retcode$[ebp], -1
	je	SHORT $LN9@sk_newlist
; Line 1315
	mov	DWORD PTR _err$[ebp], 0
; Line 1316
	jmp	SHORT $LN8@sk_newlist
$LN9@sk_newlist:
; Line 1317
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
$LN8@sk_newlist:
; Line 1320
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN7@sk_newlist
; Line 1321
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1322
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	call	_winsock_error_string
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1323
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN23@sk_newlist
$LN7@sk_newlist:
; Line 1327
	mov	esi, esp
	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR _p_listen
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN6@sk_newlist
; Line 1328
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1329
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_winsock_error_string
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1330
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN23@sk_newlist
$LN6@sk_newlist:
; Line 1335
	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_do_select
	add	esp, 8
	mov	DWORD PTR _errstr$[ebp], eax
; Line 1336
	cmp	DWORD PTR _errstr$[ebp], 0
	je	SHORT $LN5@sk_newlist
; Line 1337
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1338
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _errstr$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1339
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN23@sk_newlist
$LN5@sk_newlist:
; Line 1342
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_add234
	add	esp, 8
; Line 1349
	cmp	DWORD PTR _address_family$[ebp], 2
	jne	SHORT $LN4@sk_newlist
	cmp	DWORD PTR _orig_address_family$[ebp], 0
	jne	SHORT $LN4@sk_newlist
; Line 1353
	push	2
	mov	eax, DWORD PTR _local_host_only$[ebp]
	push	eax
	mov	ecx, DWORD PTR _plug$[ebp]
	push	ecx
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcaddr$[ebp]
	push	eax
	call	_sk_newlistener
	add	esp, 20					; 00000014H
	mov	DWORD PTR _other$87173[ebp], eax
; Line 1355
	cmp	DWORD PTR _other$87173[ebp], 0
	je	SHORT $LN4@sk_newlist
; Line 1356
	mov	ecx, DWORD PTR _other$87173[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@sk_newlist
; Line 1357
	mov	edx, DWORD PTR _other$87173[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 1358
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _other$87173[ebp]
	mov	DWORD PTR [ecx+100], edx
; Line 1359
	jmp	SHORT $LN4@sk_newlist
$LN2@sk_newlist:
; Line 1360
	mov	eax, DWORD PTR _other$87173[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN4@sk_newlist:
; Line 1366
	mov	eax, DWORD PTR _ret$[ebp]
$LN23@sk_newlist:
; Line 1367
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@sk_newlist
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 176				; 000000b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN35@sk_newlist:
	DD	5
	DD	$LN34@sk_newlist
$LN34@sk_newlist:
	DD	-40					; ffffffd8H
	DD	28					; 0000001cH
	DD	$LN29@sk_newlist
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN30@sk_newlist
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN31@sk_newlist
	DD	-136					; ffffff78H
	DD	32					; 00000020H
	DD	$LN32@sk_newlist
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN33@sk_newlist
$LN33@sk_newlist:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	0
$LN32@sk_newlist:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN31@sk_newlist:
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN30@sk_newlist:
	DB	97					; 00000061H
	DB	0
$LN29@sk_newlist:
	DB	97					; 00000061H
	DB	54					; 00000036H
	DB	0
_sk_newlistener ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_sk_tcp_close PROC
; Line 1370
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1372
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1374
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	SHORT $LN2@sk_tcp_clo
; Line 1375
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	call	_sk_tcp_close
	add	esp, 4
$LN2@sk_tcp_clo:
; Line 1377
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_del234
	add	esp, 8
; Line 1378
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_do_select
	add	esp, 8
; Line 1379
	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1380
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN1@sk_tcp_clo
; Line 1381
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	_sk_addr_free
	add	esp, 4
$LN1@sk_tcp_clo:
; Line 1382
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1383
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_close ENDP
_TEXT	ENDS
PUBLIC	_try_send
EXTRN	_bufchain_consume:PROC
EXTRN	_memmove:PROC
EXTRN	_queue_toplevel_callback:PROC
EXTRN	_noise_ultralight:PROC
EXTRN	_bufchain_prefix:PROC
EXTRN	_bufchain_size:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv88 = -40						; size = 4
_urgentflag$87213 = -36					; size = 4
_len$87212 = -28					; size = 4
_data$87211 = -16					; size = 4
_err$87210 = -8						; size = 4
_nsent$87209 = -4					; size = 4
_s$ = 8							; size = 4
_try_send PROC
; Line 1411
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN19@try_send:
; Line 1412
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN17@try_send
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	test	eax, eax
	jle	$LN18@try_send
$LN17@try_send:
; Line 1418
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN16@try_send
; Line 1419
	mov	DWORD PTR _urgentflag$87213[ebp], 1
; Line 1420
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _len$87212[ebp], ecx
; Line 1421
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _data$87211[ebp], edx
; Line 1422
	jmp	SHORT $LN15@try_send
$LN16@try_send:
; Line 1423
	mov	DWORD PTR _urgentflag$87213[ebp], 0
; Line 1424
	lea	eax, DWORD PTR _len$87212[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$87211[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_bufchain_prefix
	add	esp, 12					; 0000000cH
$LN15@try_send:
; Line 1426
	mov	esi, esp
	mov	eax, DWORD PTR _urgentflag$87213[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$87212[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$87211[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _p_send
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nsent$87209[ebp], eax
; Line 1427
	mov	edx, DWORD PTR _nsent$87209[ebp]
	push	edx
	call	_noise_ultralight
	add	esp, 4
; Line 1428
	cmp	DWORD PTR _nsent$87209[ebp], 0
	jg	$LN14@try_send
; Line 1429
	cmp	DWORD PTR _nsent$87209[ebp], 0
	jge	SHORT $LN22@try_send
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN23@try_send
$LN22@try_send:
	mov	DWORD PTR tv88[ebp], 0
$LN23@try_send:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _err$87210[ebp], eax
; Line 1430
	cmp	DWORD PTR _err$87210[ebp], 10000	; 00002710H
	jae	SHORT $LN11@try_send
	cmp	DWORD PTR _nsent$87209[ebp], 0
	jl	SHORT $LN12@try_send
$LN11@try_send:
	cmp	DWORD PTR _err$87210[ebp], 10035	; 00002733H
	jne	SHORT $LN13@try_send
$LN12@try_send:
; Line 1440
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 1441
	jmp	$LN20@try_send
; Line 1442
	jmp	SHORT $LN10@try_send
$LN13@try_send:
; Line 1443
	cmp	DWORD PTR _nsent$87209[ebp], 0
	je	SHORT $LN8@try_send
	cmp	DWORD PTR _err$87210[ebp], 10053	; 00002745H
	je	SHORT $LN8@try_send
	cmp	DWORD PTR _err$87210[ebp], 10054	; 00002746H
	jne	SHORT $LN9@try_send
$LN8@try_send:
; Line 1454
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _err$87210[ebp]
	mov	DWORD PTR [edx+92], eax
; Line 1455
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	OFFSET _socket_error_callback
	call	_queue_toplevel_callback
	add	esp, 8
; Line 1456
	jmp	$LN20@try_send
; Line 1457
	jmp	SHORT $LN10@try_send
$LN9@try_send:
; Line 1460
	mov	edx, DWORD PTR _err$87210[ebp]
	push	edx
	call	_winsock_error_string
	add	esp, 4
	push	eax
	push	0
	call	_logevent
	add	esp, 8
; Line 1461
	mov	eax, DWORD PTR _err$87210[ebp]
	push	eax
	call	_winsock_error_string
	add	esp, 4
	push	eax
	push	OFFSET $SG87225
	call	_fatalbox
	add	esp, 8
$LN10@try_send:
; Line 1463
	jmp	SHORT $LN6@try_send
$LN14@try_send:
; Line 1464
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN5@try_send
; Line 1465
	mov	edx, DWORD PTR _nsent$87209[ebp]
	cmp	edx, DWORD PTR _len$87212[ebp]
	jge	SHORT $LN4@try_send
; Line 1466
	mov	eax, DWORD PTR _len$87212[ebp]
	sub	eax, DWORD PTR _nsent$87209[ebp]
	push	eax
	mov	ecx, DWORD PTR _nsent$87209[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	lea	eax, DWORD PTR [edx+ecx+48]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1467
	mov	edx, DWORD PTR _len$87212[ebp]
	sub	edx, DWORD PTR _nsent$87209[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 1468
	jmp	SHORT $LN3@try_send
$LN4@try_send:
; Line 1469
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN3@try_send:
; Line 1471
	jmp	SHORT $LN6@try_send
$LN5@try_send:
; Line 1472
	mov	edx, DWORD PTR _nsent$87209[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_bufchain_consume
	add	esp, 8
$LN6@try_send:
; Line 1475
	jmp	$LN19@try_send
$LN18@try_send:
; Line 1481
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+72], 1
	jne	SHORT $LN20@try_send
; Line 1482
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _p_shutdown
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1483
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+72], 2
$LN20@try_send:
; Line 1485
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@try_send
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@try_send:
	DD	2
	DD	$LN26@try_send
$LN26@try_send:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN24@try_send
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN25@try_send
$LN25@try_send:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN24@try_send:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_try_send ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = -4						; size = 4
_vs$ = 8						; size = 4
_socket_error_callback PROC
; Line 1389
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1390
	mov	eax, DWORD PTR _vs$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1396
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@socket_err
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $LN2@socket_err
$LN1@socket_err:
; Line 1397
	jmp	SHORT $LN3@socket_err
$LN2@socket_err:
; Line 1403
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	_winsock_error_string
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@socket_err:
; Line 1404
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_socket_error_callback ENDP
_TEXT	ENDS
EXTRN	_bufchain_add:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_sk_tcp_write PROC
; Line 1488
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1489
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1491
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN4@sk_tcp_wri
	push	1491					; 000005d3H
	push	OFFSET $SG87242
	push	OFFSET $SG87243
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@sk_tcp_wri:
; Line 1496
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_bufchain_add
	add	esp, 12					; 0000000cH
; Line 1501
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@sk_tcp_wri
; Line 1502
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_try_send
	add	esp, 4
$LN1@sk_tcp_wri:
; Line 1504
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_bufchain_size
	add	esp, 4
; Line 1505
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_write ENDP
_TEXT	ENDS
EXTRN	_bufchain_clear:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_sk_tcp_write_oob PROC
; Line 1508
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1509
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1511
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN4@sk_tcp_wri@2
	push	1511					; 000005e7H
	push	OFFSET $SG87255
	push	OFFSET $SG87256
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@sk_tcp_wri@2:
; Line 1516
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_bufchain_clear
	add	esp, 4
; Line 1517
	cmp	DWORD PTR _len$[ebp], 1
	jbe	SHORT $LN5@sk_tcp_wri@2
	push	1517					; 000005edH
	push	OFFSET $SG87258
	push	OFFSET $SG87259
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@sk_tcp_wri@2:
; Line 1518
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1519
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 1524
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN1@sk_tcp_wri@2
; Line 1525
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_try_send
	add	esp, 4
$LN1@sk_tcp_wri@2:
; Line 1527
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+52]
; Line 1528
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_write_oob ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_sk_tcp_write_eof PROC
; Line 1531
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1532
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1534
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN4@sk_tcp_wri@3
	push	1534					; 000005feH
	push	OFFSET $SG87267
	push	OFFSET $SG87268
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@sk_tcp_wri@3:
; Line 1539
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+72], 1
; Line 1544
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN2@sk_tcp_wri@3
; Line 1545
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_try_send
	add	esp, 4
$LN2@sk_tcp_wri@3:
; Line 1546
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_write_eof ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_select_result
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv221 = -20704						; size = 4
tv149 = -20700						; size = 4
_actx$87340 = -20692					; size = 4
_t$87339 = -20684					; size = 4
_addrlen$87338 = -20676					; size = 4
_isa$87337 = -20664					; size = 128
_bufsize_after$87324 = -20532				; size = 4
_bufsize_before$87323 = -20528				; size = 4
_str$87317 = -20524					; size = 4
_atmark$ = -20516					; size = 4
_s$ = -20508						; size = 4
_buf$ = -20500						; size = 20480
_err$ = -16						; size = 4
_open$ = -12						; size = 4
_ret$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
_select_result PROC
; Line 1549
	push	ebp
	mov	ebp, esp
	mov	eax, 20704				; 000050e0H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-20704]
	mov	ecx, 5176				; 00001438H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1558
	cmp	DWORD PTR _wParam$[ebp], 0
	jne	SHORT $LN42@select_res
; Line 1559
	mov	eax, 1
	jmp	$LN43@select_res
$LN42@select_res:
; Line 1561
	push	OFFSET _cmpforsearch
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sktree
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax
; Line 1562
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN41@select_res
; Line 1563
	mov	eax, 1
	jmp	$LN43@select_res
$LN41@select_res:
; Line 1565
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	je	$LN40@select_res
; Line 1570
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	$LN39@select_res
; Line 1572
	mov	esi, esp
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_winsock_error_string
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@select_res:
; Line 1573
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN39@select_res
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_sk_nextaddr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN39@select_res
; Line 1574
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_try_connect
	add	esp, 4
	mov	DWORD PTR _err$[ebp], eax
; Line 1575
	jmp	SHORT $LN38@select_res
$LN39@select_res:
; Line 1577
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN36@select_res
; Line 1578
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	_winsock_error_string
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN43@select_res
; Line 1579
	jmp	SHORT $LN40@select_res
$LN36@select_res:
; Line 1580
	mov	eax, 1
	jmp	$LN43@select_res
$LN40@select_res:
; Line 1583
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	call	_noise_ultralight
	add	esp, 4
; Line 1585
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR tv149[ebp]
	sub	eax, 1
	mov	DWORD PTR tv149[ebp], eax
	cmp	DWORD PTR tv149[ebp], 31		; 0000001fH
	ja	$LN33@select_res
	mov	ecx, DWORD PTR tv149[ebp]
	movzx	edx, BYTE PTR $LN47@select_res[ecx]
	jmp	DWORD PTR $LN55@select_res[edx*4]
$LN32@select_res:
; Line 1587
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+28], 1
; Line 1593
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN31@select_res
; Line 1594
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_sk_addr_free
	add	esp, 4
; Line 1595
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+76], 0
$LN31@select_res:
; Line 1597
	jmp	$LN33@select_res
$LN30@select_res:
; Line 1600
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN29@select_res
; Line 1601
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx+40], 1
; Line 1602
	jmp	$LN33@select_res
$LN29@select_res:
; Line 1611
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN28@select_res
; Line 1612
	mov	DWORD PTR _atmark$[ebp], 1
; Line 1613
	mov	esi, esp
	lea	eax, DWORD PTR _atmark$[ebp]
	push	eax
	push	1074033415				; 40047307H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _p_ioctlsocket
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1621
	jmp	SHORT $LN27@select_res
$LN28@select_res:
; Line 1622
	mov	DWORD PTR _atmark$[ebp], 1
$LN27@select_res:
; Line 1624
	mov	esi, esp
	push	0
	push	20480					; 00005000H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _p_recv
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 1625
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_noise_ultralight
	add	esp, 4
; Line 1626
	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN26@select_res
; Line 1627
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 1628
	cmp	DWORD PTR _err$[ebp], 10035		; 00002733H
	jne	SHORT $LN26@select_res
; Line 1629
	jmp	$LN33@select_res
$LN26@select_res:
; Line 1632
	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN24@select_res
; Line 1634
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	_winsock_error_string
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN43@select_res
	jmp	SHORT $LN23@select_res
$LN24@select_res:
; Line 1635
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN22@select_res
; Line 1636
	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN43@select_res
; Line 1637
	jmp	SHORT $LN23@select_res
$LN22@select_res:
; Line 1638
	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	xor	edx, edx
	cmp	DWORD PTR _atmark$[ebp], 0
	sete	dl
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN43@select_res
$LN23@select_res:
; Line 1640
	jmp	$LN33@select_res
$LN20@select_res:
; Line 1648
	mov	esi, esp
	push	1
	push	20480					; 00005000H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _p_recv
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 1649
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_noise_ultralight
	add	esp, 4
; Line 1650
	cmp	DWORD PTR _ret$[ebp], 0
	jg	SHORT $LN19@select_res
; Line 1652
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN45@select_res
	mov	DWORD PTR tv221[ebp], OFFSET $SG87318
	jmp	SHORT $LN46@select_res
$LN45@select_res:
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_winsock_error_string
	add	esp, 4
	mov	DWORD PTR tv221[ebp], eax
$LN46@select_res:
	mov	ecx, DWORD PTR tv221[ebp]
	mov	DWORD PTR _str$87317[ebp], ecx
; Line 1655
	mov	edx, DWORD PTR _str$87317[ebp]
	push	edx
	push	0
	call	_logevent
	add	esp, 8
; Line 1656
	mov	eax, DWORD PTR _str$87317[ebp]
	push	eax
	push	OFFSET $SG87320
	call	_fatalbox
	add	esp, 8
; Line 1657
	jmp	SHORT $LN18@select_res
$LN19@select_res:
; Line 1658
	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN43@select_res
$LN18@select_res:
; Line 1660
	jmp	$LN33@select_res
$LN17@select_res:
; Line 1664
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+32], 1
; Line 1665
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _bufsize_before$87323[ebp], eax
; Line 1666
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_try_send
	add	esp, 4
; Line 1667
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_bufchain_size
	add	esp, 4
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _bufsize_after$87324[ebp], eax
; Line 1668
	mov	eax, DWORD PTR _bufsize_after$87324[ebp]
	cmp	eax, DWORD PTR _bufsize_before$87323[ebp]
	jge	SHORT $LN16@select_res
; Line 1669
	mov	esi, esp
	mov	ecx, DWORD PTR _bufsize_after$87324[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@select_res:
; Line 1671
	jmp	$LN33@select_res
$LN15@select_res:
; Line 1674
	mov	DWORD PTR _open$[ebp], 1
$LN14@select_res:
; Line 1676
	mov	esi, esp
	push	0
	push	20480					; 00005000H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _p_recv
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 1677
	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN11@select_res
; Line 1678
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 1679
	cmp	DWORD PTR _err$[ebp], 10035		; 00002733H
	jne	SHORT $LN10@select_res
; Line 1680
	jmp	$LN12@select_res
$LN10@select_res:
; Line 1682
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_winsock_error_string
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN43@select_res
; Line 1683
	jmp	SHORT $LN13@select_res
$LN11@select_res:
; Line 1684
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN8@select_res
; Line 1685
	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, DWORD PTR _open$[ebp]
	mov	DWORD PTR _open$[ebp], eax
; Line 1686
	jmp	SHORT $LN13@select_res
$LN8@select_res:
; Line 1687
	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, DWORD PTR _open$[ebp]
	mov	DWORD PTR _open$[ebp], eax
$LN13@select_res:
; Line 1689
	cmp	DWORD PTR _ret$[ebp], 0
	jg	$LN14@select_res
$LN12@select_res:
; Line 1690
	mov	eax, DWORD PTR _open$[ebp]
	jmp	$LN43@select_res
$LN6@select_res:
; Line 1698
	mov	DWORD PTR _addrlen$87338[ebp], 128	; 00000080H
; Line 1702
	push	128					; 00000080H
	push	0
	lea	eax, DWORD PTR _isa$87337[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1703
	mov	DWORD PTR _err$[ebp], 0
; Line 1704
	mov	esi, esp
	lea	ecx, DWORD PTR _addrlen$87338[ebp]
	push	ecx
	lea	edx, DWORD PTR _isa$87337[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _p_accept
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$87339[ebp], eax
; Line 1705
	cmp	DWORD PTR _t$87339[ebp], -1
	jne	SHORT $LN5@select_res
; Line 1707
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 1708
	cmp	DWORD PTR _err$[ebp], 11002		; 00002afaH
	jne	SHORT $LN5@select_res
; Line 1709
	jmp	$LN33@select_res
$LN5@select_res:
; Line 1712
	mov	edx, DWORD PTR _t$87339[ebp]
	mov	DWORD PTR _actx$87340[ebp], edx
; Line 1717
	movzx	eax, WORD PTR _isa$87337[ebp]
	cmp	eax, 2
	jne	SHORT $LN3@select_res
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN3@select_res
	mov	edx, DWORD PTR _isa$87337[ebp+4]
	push	edx
	call	_ipv4_is_local_addr
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@select_res
; Line 1722
	mov	esi, esp
	mov	eax, DWORD PTR _t$87339[ebp]
	push	eax
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN33@select_res
$LN3@select_res:
; Line 1723
	mov	esi, esp
	mov	ecx, DWORD PTR _actx$87340[ebp]
	push	ecx
	push	OFFSET _sk_tcp_accept
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN33@select_res
; Line 1724
	mov	esi, esp
	mov	edx, DWORD PTR _t$87339[ebp]
	push	edx
	call	DWORD PTR _p_closesocket
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@select_res:
; Line 1729
	mov	eax, 1
$LN43@select_res:
; Line 1730
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN54@select_res
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 20704				; 000050e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN54@select_res:
	DD	5
	DD	$LN53@select_res
$LN53@select_res:
	DD	-20500					; ffffafecH
	DD	20480					; 00005000H
	DD	$LN48@select_res
	DD	-20516					; ffffafdcH
	DD	4
	DD	$LN49@select_res
	DD	-20664					; ffffaf48H
	DD	128					; 00000080H
	DD	$LN50@select_res
	DD	-20676					; ffffaf3cH
	DD	4
	DD	$LN51@select_res
	DD	-20692					; ffffaf2cH
	DD	4
	DD	$LN52@select_res
$LN52@select_res:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN51@select_res:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN50@select_res:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
$LN49@select_res:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	0
$LN48@select_res:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN55@select_res:
	DD	$LN30@select_res
	DD	$LN17@select_res
	DD	$LN20@select_res
	DD	$LN6@select_res
	DD	$LN32@select_res
	DD	$LN15@select_res
	DD	$LN33@select_res
$LN47@select_res:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_select_result ENDP
; Function compile flags: /Odtp /RTCsu
_bs$ = -12						; size = 4
_as$ = -8						; size = 4
_b$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_cmpforsearch PROC
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 140
	mov	eax, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 141
	mov	ecx, DWORD PTR _av$[ebp]
	mov	DWORD PTR _as$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _bs$[ebp], eax
; Line 142
	mov	ecx, DWORD PTR _as$[ebp]
	cmp	ecx, DWORD PTR _bs$[ebp]
	jae	SHORT $LN2@cmpforsear
; Line 143
	or	eax, -1
	jmp	SHORT $LN3@cmpforsear
$LN2@cmpforsear:
; Line 144
	mov	edx, DWORD PTR _as$[ebp]
	cmp	edx, DWORD PTR _bs$[ebp]
	jbe	SHORT $LN1@cmpforsear
; Line 145
	mov	eax, 1
	jmp	SHORT $LN3@cmpforsear
$LN1@cmpforsear:
; Line 146
	xor	eax, eax
$LN3@cmpforsear:
; Line 147
	mov	esp, ebp
	pop	ebp
	ret	0
_cmpforsearch ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -12						; size = 4
_errstr$ = -8						; size = 4
_err$ = -4						; size = 4
_ctx$ = 8						; size = 4
_plug$ = 12						; size = 4
_sk_tcp_accept PROC
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 887
	push	104					; 00000068H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 888
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], OFFSET ?fn_table@?1??sk_tcp_accept@@9@9
; Line 889
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 890
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 891
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_bufchain_init
	add	esp, 4
; Line 892
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+32], 1
; Line 893
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 894
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+72], 0
; Line 895
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+36], 1
; Line 896
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 897
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+44], 0
; Line 898
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+92], 0
; Line 899
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+100], 0
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 900
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+76], 0
; Line 902
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 904
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+8], -1
	jne	SHORT $LN2@sk_tcp_acc
; Line 905
	mov	esi, esp
	call	DWORD PTR _p_WSAGetLastError
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 906
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_winsock_error_string
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 907
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN3@sk_tcp_acc
$LN2@sk_tcp_acc:
; Line 910
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+56], 0
; Line 914
	push	1
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_do_select
	add	esp, 8
	mov	DWORD PTR _errstr$[ebp], eax
; Line 915
	cmp	DWORD PTR _errstr$[ebp], 0
	je	SHORT $LN1@sk_tcp_acc
; Line 916
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _errstr$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 917
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN3@sk_tcp_acc
$LN1@sk_tcp_acc:
; Line 920
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_add234
	add	esp, 8
; Line 922
	mov	eax, DWORD PTR _ret$[ebp]
$LN3@sk_tcp_acc:
; Line 923
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_accept ENDP
_TEXT	ENDS
PUBLIC	_sk_addr_error
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_addr$ = 8						; size = 4
_sk_addr_error PROC
; Line 1738
	push	ebp
	mov	ebp, esp
; Line 1739
	mov	eax, DWORD PTR _addr$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 1740
	pop	ebp
	ret	0
_sk_addr_error ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_sk_tcp_socket_error PROC
; Line 1742
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1743
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1744
	mov	ecx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+4]
; Line 1745
	mov	esp, ebp
	pop	ebp
	ret	0
_sk_tcp_socket_error ENDP
; Function compile flags: /Odtp /RTCsu
_c$87368 = -9						; size = 1
_s$ = -4						; size = 4
_sock$ = 8						; size = 4
_is_frozen$ = 12					; size = 4
_sk_tcp_set_frozen PROC
; Line 1748
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1749
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 1750
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	edx, DWORD PTR _is_frozen$[ebp]
	jne	SHORT $LN3@sk_tcp_set
; Line 1751
	jmp	SHORT $LN4@sk_tcp_set
$LN3@sk_tcp_set:
; Line 1752
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _is_frozen$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 1753
	cmp	DWORD PTR _is_frozen$[ebp], 0
	jne	SHORT $LN2@sk_tcp_set
; Line 1754
	push	1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_do_select
	add	esp, 8
; Line 1755
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN2@sk_tcp_set
; Line 1757
	mov	esi, esp
	push	2
	push	1
	lea	edx, DWORD PTR _c$87368[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _p_recv
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sk_tcp_set:
; Line 1760
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN4@sk_tcp_set:
; Line 1761
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@sk_tcp_set
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@sk_tcp_set:
	DD	1
	DD	$LN7@sk_tcp_set
$LN7@sk_tcp_set:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN6@sk_tcp_set
$LN6@sk_tcp_set:
	DB	99					; 00000063H
	DB	0
_sk_tcp_set_frozen ENDP
_TEXT	ENDS
PUBLIC	_socket_reselect_all
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -8						; size = 4
_s$ = -4						; size = 4
_socket_reselect_all PROC
; Line 1764
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1768
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@socket_res
$LN3@socket_res:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@socket_res:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sktree
	push	edx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN5@socket_res
; Line 1769
	mov	eax, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN1@socket_res
; Line 1770
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_do_select
	add	esp, 8
$LN1@socket_res:
; Line 1771
	jmp	SHORT $LN3@socket_res
$LN5@socket_res:
; Line 1772
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_socket_reselect_all ENDP
_TEXT	ENDS
PUBLIC	_first_socket
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -12						; size = 4
tv66 = -8						; size = 4
_s$ = -4						; size = 4
_state$ = 8						; size = 4
_first_socket PROC
; Line 1778
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1780
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1781
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv66[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR tv66[ebp]
	push	eax
	mov	ecx, DWORD PTR _sktree
	push	ecx
	call	_index234
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1782
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@first_sock
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@first_sock
$LN3@first_sock:
	mov	DWORD PTR tv71[ebp], -1
$LN4@first_sock:
	mov	eax, DWORD PTR tv71[ebp]
; Line 1783
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_first_socket ENDP
_TEXT	ENDS
PUBLIC	_next_socket
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -12						; size = 4
tv66 = -8						; size = 4
_s$ = -4						; size = 4
_state$ = 8						; size = 4
_next_socket PROC
; Line 1786
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1787
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR tv66[ebp]
	push	edx
	mov	eax, DWORD PTR _sktree
	push	eax
	call	_index234
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 1788
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@next_socke
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN4@next_socke
$LN3@next_socke:
	mov	DWORD PTR tv71[ebp], -1
$LN4@next_socke:
	mov	eax, DWORD PTR tv71[ebp]
; Line 1789
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_next_socket ENDP
_TEXT	ENDS
PUBLIC	_socket_writable
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_skt$ = 8						; size = 4
_socket_writable PROC
; Line 1792
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1793
	push	OFFSET _cmpforsearch
	mov	eax, DWORD PTR _skt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sktree
	push	ecx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax
; Line 1795
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN2@socket_wri
; Line 1796
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_bufchain_size
	add	esp, 4
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	eax, ecx
	jmp	SHORT $LN3@socket_wri
; Line 1797
	jmp	SHORT $LN3@socket_wri
$LN2@socket_wri:
; Line 1798
	xor	eax, eax
$LN3@socket_wri:
; Line 1799
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_socket_writable ENDP
_TEXT	ENDS
PUBLIC	_net_service_lookup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_se$ = -4						; size = 4
_service$ = 8						; size = 4
_net_service_lookup PROC
; Line 1802
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1804
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _service$[ebp]
	push	eax
	call	DWORD PTR _p_getservbyname
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _se$[ebp], eax
; Line 1805
	cmp	DWORD PTR _se$[ebp], 0
	je	SHORT $LN2@net_servic
; Line 1806
	mov	esi, esp
	mov	ecx, DWORD PTR _se$[ebp]
	movzx	edx, WORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _p_ntohs
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, ax
	jmp	SHORT $LN3@net_servic
; Line 1807
	jmp	SHORT $LN3@net_servic
$LN2@net_servic:
; Line 1808
	xor	eax, eax
$LN3@net_servic:
; Line 1809
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_net_service_lookup ENDP
_TEXT	ENDS
PUBLIC	_get_hostname
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hostname$ = -8						; size = 4
_len$ = -4						; size = 4
_get_hostname PROC
; Line 1812
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1813
	mov	DWORD PTR _len$[ebp], 128		; 00000080H
; Line 1814
	mov	DWORD PTR _hostname$[ebp], 0
$LN4@get_hostna:
; Line 1816
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 1817
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hostname$[ebp]
	push	edx
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hostname$[ebp], eax
; Line 1818
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hostname$[ebp]
	push	ecx
	call	DWORD PTR _p_gethostname
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN3@get_hostna
; Line 1819
	mov	edx, DWORD PTR _hostname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1820
	mov	DWORD PTR _hostname$[ebp], 0
; Line 1821
	jmp	SHORT $LN2@get_hostna
$LN3@get_hostna:
; Line 1823
	mov	eax, DWORD PTR _hostname$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jae	SHORT $LN4@get_hostna
$LN2@get_hostna:
; Line 1824
	mov	eax, DWORD PTR _hostname$[ebp]
; Line 1825
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_hostname ENDP
_TEXT	ENDS
PUBLIC	_platform_get_x11_unix_address
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_display$ = 8						; size = 4
_displaynum$ = 12					; size = 4
_canonicalname$ = 16					; size = 4
_platform_get_x11_unix_address PROC
; Line 1829
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1830
	push	540					; 0000021cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1831
	push	540					; 0000021cH
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1832
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET $SG87431
; Line 1833
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], 1
; Line 1834
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1835
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_platform_get_x11_unix_address ENDP
_TEXT	ENDS
END
