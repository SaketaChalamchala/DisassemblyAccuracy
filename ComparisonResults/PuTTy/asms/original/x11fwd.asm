; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\x11fwd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_x11_authnames
_BSS	SEGMENT
$SG87066 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_x11_authnames DD FLAT:$SG87066
	DD	FLAT:$SG87067
	DD	FLAT:$SG87068
_dummy_plug DD	FLAT:_dummy_plug_log
	DD	FLAT:_dummy_plug_closing
	DD	FLAT:_dummy_plug_receive
	DD	FLAT:_dummy_plug_sent
	DD	FLAT:_dummy_plug_accepting
?fn_table@?1??x11_init@@9@9 DD FLAT:_x11_log		; `x11_init'::`2'::fn_table
	DD	FLAT:_x11_closing
	DD	FLAT:_x11_receive
	DD	FLAT:_x11_sent
	DD	00H
CONST	ENDS
_DATA	SEGMENT
$SG87067 DB	'MIT-MAGIC-COOKIE-1', 00H
	ORG $+1
$SG87068 DB	'XDM-AUTHORIZATION-1', 00H
$SG87171 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'x', 00H, '1', 00H, '1', 00H, 'f'
	DB	00H, 'w', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG87172 DB	'a', 00H, 'u', 00H, 't', 00H, 'h', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'X'
	DB	00H, '1', 00H, '1', 00H, '_', 00H, 'X', 00H, 'D', 00H, 'M', 00H
	DB	00H, 00H
$SG87189 DB	'%02x', 00H
	ORG $+3
$SG87221 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'x', 00H, '1', 00H, '1', 00H, 'f'
	DB	00H, 'w', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG87222 DB	'a', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'o', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'X'
	DB	00H, '1', 00H, '1', 00H, '_', 00H, 'X', 00H, 'D', 00H, 'M', 00H
	DB	00H, 00H
$SG87236 DB	':0', 00H
	ORG $+1
$SG87257 DB	'local', 00H
	ORG $+2
$SG87258 DB	'unix', 00H
	ORG $+3
$SG87262 DB	'unix', 00H
	ORG $+3
$SG87265 DB	'localhost', 00H
	ORG $+2
$SG87287 DB	'unix:%d', 00H
$SG87315 DB	'Unsupported authorisation protocol', 00H
	ORG $+1
$SG87318 DB	'Authorisation not recognised', 00H
	ORG $+3
$SG87326 DB	'XDM-AUTHORIZATION-1 data was wrong length', 00H
	ORG $+2
$SG87328 DB	'cannot do XDM-AUTHORIZATION-1 without remote address dat'
	DB	'a', 00H
	ORG $+2
$SG87330 DB	'XDM-AUTHORIZATION-1 data failed check', 00H
	ORG $+2
$SG87340 DB	'XDM-AUTHORIZATION-1 data failed check', 00H
	ORG $+2
$SG87347 DB	'XDM-AUTHORIZATION-1 data failed check', 00H
	ORG $+2
$SG87360 DB	'XDM-AUTHORIZATION-1 data failed check', 00H
	ORG $+2
$SG87363 DB	'XDM-AUTHORIZATION-1 time stamp was too far out', 00H
	ORG $+1
$SG87368 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'x', 00H, '1', 00H, '1', 00H, 'f'
	DB	00H, 'w', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG87369 DB	'a', 00H, 'u', 00H, 't', 00H, 'h', 00H, '-', 00H, '>', 00H
	DB	'x', 00H, 'd', 00H, 'm', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, 00H, 00H
$SG87371 DB	'XDM-AUTHORIZATION-1 data replayed', 00H
	ORG $+2
$SG87377 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'x', 00H, '1', 00H, '1', 00H, 'f'
	DB	00H, 'w', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG87378 DB	's', 00H, 'e', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H
	ORG $+2
$SG87396 DB	'rb', 00H
	ORG $+1
$SG87498 DB	'unable to connect to forwarded X server: %s', 00H
$SG87527 DB	':', 00H
	ORG $+2
$SG87529 DB	'.', 00H
	ORG $+2
$SG87577 DB	'%s X11 proxy: %s', 0aH, 00H
	ORG $+2
$SG87593 DB	'%d.%d.%d.%d', 00H
$SG87668 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'x', 00H, '1', 00H, '1', 00H, 'f'
	DB	00H, 'w', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG87669 DB	'!', 00H, 'x', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 00H, 00H
$SG87674 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 'x', 00H, '1', 00H, '1', 00H, 'f'
	DB	00H, 'w', 00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG87675 DB	'a', 00H, 'u', 00H, 't', 00H, 'h', 00H, '_', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG87681 DB	'unable to connect to forwarded X server: %s', 00H
$SG87684 DB	'%d.%d.%d.%d', 00H
$SG87690 DB	'0.0.0.0', 00H
$SG87720 DB	'%x', 00H
_DATA	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\x11fwd.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_dummy_plug_log PROC
; Line 60
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_dummy_plug_log ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_dummy_plug_closing PROC
; Line 63
	push	ebp
	mov	ebp, esp
	mov	eax, 1
	pop	ebp
	ret	0
_dummy_plug_closing ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_dummy_plug_receive PROC
; Line 65
	push	ebp
	mov	ebp, esp
	mov	eax, 1
	pop	ebp
	ret	0
_dummy_plug_receive ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_bufsize$ = 12						; size = 4
_dummy_plug_sent PROC
; Line 66
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_dummy_plug_sent ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_constructor$ = 12					; size = 4
_ctx$ = 16						; size = 4
_dummy_plug_accepting PROC
; Line 67
	push	ebp
	mov	ebp, esp
	mov	eax, 1
	pop	ebp
	ret	0
_dummy_plug_accepting ENDP
_TEXT	ENDS
PUBLIC	_x11_invent_fake_auth
EXTRN	_sprintf:PROC
EXTRN	_dupstr:PROC
EXTRN	_newtree234:PROC
EXTRN	_des_encrypt_xdmauth:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__wassert:PROC
EXTRN	_add234:PROC
EXTRN	_random_byte:PROC
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv147 = -12						; size = 4
_i$ = -8						; size = 4
_auth$ = -4						; size = 4
_authtree$ = 8						; size = 4
_authtype$ = 12						; size = 4
_x11_invent_fake_auth PROC
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	push	40					; 00000028H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _auth$[ebp], eax
; Line 103
	cmp	DWORD PTR _authtype$[ebp], 1
	jne	$LN17@x11_invent
; Line 104
	mov	eax, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [eax], 1
; Line 107
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+8], 16			; 00000010H
; Line 108
	push	1
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 109
	mov	edx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [edx+20], 0
$LN16@x11_invent:
; Line 111
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN15@x11_invent
; Line 112
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@x11_invent
$LN13@x11_invent:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@x11_invent:
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN12@x11_invent
; Line 113
	call	_random_byte
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+ecx], al
	jmp	SHORT $LN13@x11_invent
$LN12@x11_invent:
; Line 114
	mov	edx, DWORD PTR _auth$[ebp]
	push	edx
	mov	eax, DWORD PTR _authtree$[ebp]
	push	eax
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _auth$[ebp]
	jne	SHORT $LN11@x11_invent
; Line 115
	jmp	SHORT $LN15@x11_invent
$LN11@x11_invent:
; Line 116
	jmp	SHORT $LN16@x11_invent
$LN15@x11_invent:
; Line 118
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 119
	jmp	$LN10@x11_invent
$LN17@x11_invent:
; Line 120
	cmp	DWORD PTR _authtype$[ebp], 2
	je	SHORT $LN20@x11_invent
	push	120					; 00000078H
	push	OFFSET $SG87171
	push	OFFSET $SG87172
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@x11_invent:
; Line 121
	mov	eax, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [eax], 2
; Line 124
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+8], 16			; 00000010H
; Line 125
	push	1
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 126
	push	1
	push	8
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 127
	push	8
	push	0
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN9@x11_invent:
; Line 129
	mov	edx, 1
	test	edx, edx
	je	$LN8@x11_invent
; Line 130
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@x11_invent
$LN6@x11_invent:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@x11_invent:
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN5@x11_invent
; Line 131
	cmp	DWORD PTR _i$[ebp], 8
	jne	SHORT $LN21@x11_invent
	mov	DWORD PTR tv147[ebp], 0
	jmp	SHORT $LN22@x11_invent
$LN21@x11_invent:
	call	_random_byte
	mov	DWORD PTR tv147[ebp], eax
$LN22@x11_invent:
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR tv147[ebp]
	mov	BYTE PTR [ecx+edx], al
	jmp	SHORT $LN6@x11_invent
$LN5@x11_invent:
; Line 132
	push	8
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 133
	push	8
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 9
	push	edx
	call	_des_encrypt_xdmauth
	add	esp, 12					; 0000000cH
; Line 134
	mov	eax, DWORD PTR _auth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _authtree$[ebp]
	push	ecx
	call	_add234
	add	esp, 8
	cmp	eax, DWORD PTR _auth$[ebp]
	jne	SHORT $LN4@x11_invent
; Line 135
	jmp	SHORT $LN8@x11_invent
$LN4@x11_invent:
; Line 136
	jmp	$LN9@x11_invent
$LN8@x11_invent:
; Line 138
	push	OFFSET _xdmseen_cmp
	call	_newtree234
	add	esp, 4
	mov	edx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN10@x11_invent:
; Line 140
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _x11_authnames[ecx*4]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 141
	push	1
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+eax+1]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 142
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@x11_invent
$LN2@x11_invent:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@x11_invent:
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@x11_invent
; Line 144
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	push	eax
	push	OFFSET $SG87189
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@x11_invent
$LN1@x11_invent:
; Line 146
	mov	edx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 147
	mov	eax, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 149
	mov	eax, DWORD PTR _auth$[ebp]
; Line 150
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_invent_fake_auth ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -16						; size = 4
tv73 = -12						; size = 4
_sb$ = -8						; size = 4
_sa$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_xdmseen_cmp PROC
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 49
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _sa$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _sb$[ebp], ecx
; Line 52
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR _sb$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN5@xdmseen_cm
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@xdmseen_cm
$LN5@xdmseen_cm:
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR _sb$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN3@xdmseen_cm
	mov	DWORD PTR tv72[ebp], -1
	jmp	SHORT $LN4@xdmseen_cm
$LN3@xdmseen_cm:
	push	6
	mov	edx, DWORD PTR _sb$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _sa$[ebp]
	add	eax, 4
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv72[ebp], eax
$LN4@xdmseen_cm:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv73[ebp], ecx
$LN6@xdmseen_cm:
	mov	eax, DWORD PTR tv73[ebp]
; Line 53
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xdmseen_cmp ENDP
_TEXT	ENDS
PUBLIC	_x11_free_fake_auth
EXTRN	_freetree234:PROC
EXTRN	_delpos234:PROC
EXTRN	_safefree:PROC
EXTRN	_smemclr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_seen$87198 = -4					; size = 4
_auth$ = 8						; size = 4
_x11_free_fake_auth PROC
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 154
	mov	eax, DWORD PTR _auth$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@x11_free_f
; Line 155
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_smemclr
	add	esp, 8
$LN4@x11_free_f:
; Line 156
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_safefree
	add	esp, 4
; Line 157
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_safefree
	add	esp, 4
; Line 158
	mov	eax, DWORD PTR _auth$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 159
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_safefree
	add	esp, 4
; Line 160
	mov	ecx, DWORD PTR _auth$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@x11_free_f
$LN2@x11_free_f:
; Line 162
	push	0
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_delpos234
	add	esp, 8
	mov	DWORD PTR _seen$87198[ebp], eax
	cmp	DWORD PTR _seen$87198[ebp], 0
	je	SHORT $LN1@x11_free_f
; Line 163
	mov	ecx, DWORD PTR _seen$87198[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
	jmp	SHORT $LN2@x11_free_f
$LN1@x11_free_f:
; Line 164
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_freetree234
	add	esp, 4
$LN3@x11_free_f:
; Line 166
	mov	ecx, DWORD PTR _auth$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 167
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_free_fake_auth ENDP
_TEXT	ENDS
PUBLIC	_x11_authcmp
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_x11_authcmp PROC
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 171
	mov	eax, DWORD PTR _av$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _bv$[ebp]
	mov	DWORD PTR _b$[ebp], ecx
; Line 174
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN8@x11_authcm
; Line 175
	or	eax, -1
	jmp	$LN9@x11_authcm
	jmp	SHORT $LN7@x11_authcm
$LN8@x11_authcm:
; Line 176
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN7@x11_authcm
; Line 177
	mov	eax, 1
	jmp	$LN9@x11_authcm
$LN7@x11_authcm:
; Line 179
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN5@x11_authcm
; Line 180
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN4@x11_authcm
; Line 181
	or	eax, -1
	jmp	SHORT $LN9@x11_authcm
	jmp	SHORT $LN3@x11_authcm
$LN4@x11_authcm:
; Line 182
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jle	SHORT $LN3@x11_authcm
; Line 183
	mov	eax, 1
	jmp	SHORT $LN9@x11_authcm
$LN3@x11_authcm:
; Line 185
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN9@x11_authcm
; Line 186
	jmp	SHORT $LN9@x11_authcm
$LN5@x11_authcm:
; Line 187
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 2
	je	SHORT $LN11@x11_authcm
	push	187					; 000000bbH
	push	OFFSET $SG87221
	push	OFFSET $SG87222
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@x11_authcm:
; Line 189
	push	8
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
$LN9@x11_authcm:
; Line 191
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_authcmp ENDP
_TEXT	ENDS
PUBLIC	_x11_setup_display
EXTRN	_platform_get_x11_auth:PROC
EXTRN	_dupprintf:PROC
EXTRN	_sk_new:PROC
EXTRN	_sk_addr_dup:PROC
EXTRN	_platform_get_x11_unix_address:PROC
EXTRN	_sk_address_is_local:PROC
EXTRN	_sk_addr_free:PROC
EXTRN	_sk_addr_error:PROC
EXTRN	_name_lookup:PROC
EXTRN	_platform_uses_x11_unix_by_default:DWORD
EXTRN	_strcmp:PROC
EXTRN	_atoi:PROC
EXTRN	_strchr:PROC
EXTRN	_host_strrchr:PROC
EXTRN	_platform_get_x_display:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -64						; size = 4
tv149 = -60						; size = 4
_s$87279 = -56						; size = 4
_dummy$87278 = -48					; size = 4
_err$87276 = -40					; size = 4
_ux$87274 = -36						; size = 4
_err$87269 = -32					; size = 4
_hostname$87246 = -28					; size = 4
_protocol$87245 = -24					; size = 4
_slash$87244 = -20					; size = 4
_dot$87243 = -16					; size = 4
_colon$87242 = -12					; size = 4
_localcopy$ = -8					; size = 4
_disp$ = -4						; size = 4
_display$ = 8						; size = 4
_conf$ = 12						; size = 4
_x11_setup_display PROC
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	push	44					; 0000002cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax
; Line 198
	cmp	DWORD PTR _display$[ebp], 0
	je	SHORT $LN28@x11_setup_
	mov	eax, DWORD PTR _display$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN29@x11_setup_
$LN28@x11_setup_:
; Line 199
	call	_platform_get_x_display
	mov	DWORD PTR _localcopy$[ebp], eax
; Line 200
	cmp	DWORD PTR _localcopy$[ebp], 0
	je	SHORT $LN26@x11_setup_
	mov	edx, DWORD PTR _localcopy$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN27@x11_setup_
$LN26@x11_setup_:
; Line 201
	mov	ecx, DWORD PTR _localcopy$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 202
	push	OFFSET $SG87236
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _localcopy$[ebp], eax
$LN27@x11_setup_:
; Line 204
	jmp	SHORT $LN25@x11_setup_
$LN29@x11_setup_:
; Line 205
	mov	edx, DWORD PTR _display$[ebp]
	push	edx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR _localcopy$[ebp], eax
$LN25@x11_setup_:
; Line 222
	mov	eax, DWORD PTR _localcopy$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN24@x11_setup_
; Line 223
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR _localcopy$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 224
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 225
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 226
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax+8], -1
; Line 227
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 228
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 229
	jmp	$LN23@x11_setup_
$LN24@x11_setup_:
; Line 233
	push	58					; 0000003aH
	mov	eax, DWORD PTR _localcopy$[ebp]
	push	eax
	call	_host_strrchr
	add	esp, 8
	mov	DWORD PTR _colon$87242[ebp], eax
; Line 234
	cmp	DWORD PTR _colon$87242[ebp], 0
	jne	SHORT $LN22@x11_setup_
; Line 235
	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 236
	mov	edx, DWORD PTR _localcopy$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 237
	xor	eax, eax
	jmp	$LN30@x11_setup_
$LN22@x11_setup_:
; Line 240
	mov	eax, DWORD PTR _colon$87242[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _colon$87242[ebp]
	add	ecx, 1
	mov	DWORD PTR _colon$87242[ebp], ecx
; Line 241
	push	46					; 0000002eH
	mov	edx, DWORD PTR _colon$87242[ebp]
	push	edx
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _dot$87243[ebp], eax
; Line 242
	cmp	DWORD PTR _dot$87243[ebp], 0
	je	SHORT $LN21@x11_setup_
; Line 243
	mov	eax, DWORD PTR _dot$87243[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _dot$87243[ebp]
	add	ecx, 1
	mov	DWORD PTR _dot$87243[ebp], ecx
$LN21@x11_setup_:
; Line 245
	mov	edx, DWORD PTR _colon$87242[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 246
	cmp	DWORD PTR _dot$87243[ebp], 0
	je	SHORT $LN20@x11_setup_
; Line 247
	mov	edx, DWORD PTR _dot$87243[ebp]
	push	edx
	call	_atoi
	add	esp, 4
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 248
	jmp	SHORT $LN19@x11_setup_
$LN20@x11_setup_:
; Line 249
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN19@x11_setup_:
; Line 251
	mov	DWORD PTR _protocol$87245[ebp], 0
; Line 252
	mov	eax, DWORD PTR _localcopy$[ebp]
	mov	DWORD PTR _hostname$87246[ebp], eax
; Line 253
	mov	ecx, DWORD PTR _colon$87242[ebp]
	cmp	ecx, DWORD PTR _localcopy$[ebp]
	jbe	SHORT $LN18@x11_setup_
; Line 254
	push	47					; 0000002fH
	mov	edx, DWORD PTR _localcopy$[ebp]
	push	edx
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _slash$87244[ebp], eax
; Line 255
	cmp	DWORD PTR _slash$87244[ebp], 0
	je	SHORT $LN18@x11_setup_
; Line 256
	mov	eax, DWORD PTR _slash$87244[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _slash$87244[ebp]
	add	ecx, 1
	mov	DWORD PTR _slash$87244[ebp], ecx
; Line 257
	mov	edx, DWORD PTR _localcopy$[ebp]
	mov	DWORD PTR _protocol$87245[ebp], edx
; Line 258
	mov	eax, DWORD PTR _slash$87244[ebp]
	mov	DWORD PTR _hostname$87246[ebp], eax
$LN18@x11_setup_:
; Line 262
	mov	ecx, DWORD PTR _hostname$87246[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN32@x11_setup_
	mov	eax, DWORD PTR _hostname$87246[ebp]
	push	eax
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN33@x11_setup_
$LN32@x11_setup_:
	mov	DWORD PTR tv149[ebp], 0
$LN33@x11_setup_:
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 264
	cmp	DWORD PTR _protocol$87245[ebp], 0
	je	SHORT $LN16@x11_setup_
; Line 266
	push	OFFSET $SG87257
	mov	eax, DWORD PTR _protocol$87245[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@x11_setup_
	push	OFFSET $SG87258
	mov	ecx, DWORD PTR _protocol$87245[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@x11_setup_
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN35@x11_setup_
$LN34@x11_setup_:
	mov	DWORD PTR tv159[ebp], 1
$LN35@x11_setup_:
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN15@x11_setup_
$LN16@x11_setup_:
; Line 267
	mov	ecx, DWORD PTR _hostname$87246[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN13@x11_setup_
	push	OFFSET $SG87262
	mov	eax, DWORD PTR _hostname$87246[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@x11_setup_
$LN13@x11_setup_:
; Line 268
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR _platform_uses_x11_unix_by_default
	mov	DWORD PTR [ecx], edx
; Line 269
	jmp	SHORT $LN15@x11_setup_
$LN14@x11_setup_:
; Line 270
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax], 0
$LN15@x11_setup_:
; Line 272
	mov	ecx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN11@x11_setup_
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@x11_setup_
; Line 273
	push	OFFSET $SG87265
	call	_dupstr
	add	esp, 4
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN11@x11_setup_:
; Line 275
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 276
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 278
	mov	ecx, DWORD PTR _localcopy$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN23@x11_setup_:
; Line 284
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	$LN10@x11_setup_
; Line 287
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 6000				; 00001770H
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 289
	push	0
	mov	eax, DWORD PTR _conf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _disp$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_name_lookup
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 291
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_sk_addr_error
	add	esp, 4
	mov	DWORD PTR _err$87269[ebp], eax
	cmp	DWORD PTR _err$87269[ebp], 0
	je	SHORT $LN10@x11_setup_
; Line 292
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_sk_addr_free
	add	esp, 4
; Line 293
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 294
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_safefree
	add	esp, 4
; Line 295
	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 296
	xor	eax, eax
	jmp	$LN30@x11_setup_
$LN10@x11_setup_:
; Line 304
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	$LN8@x11_setup_
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_sk_address_is_local
	add	esp, 4
	test	eax, eax
	je	$LN8@x11_setup_
; Line 305
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	0
	call	_platform_get_x11_unix_address
	add	esp, 8
	mov	DWORD PTR _ux$87274[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _ux$87274[ebp]
	push	ecx
	call	_sk_addr_error
	add	esp, 4
	mov	DWORD PTR _err$87276[ebp], eax
; Line 307
	cmp	DWORD PTR _err$87276[ebp], 0
	jne	SHORT $LN7@x11_setup_
; Line 310
	mov	DWORD PTR _dummy$87278[ebp], OFFSET _dummy_plug
; Line 311
	lea	edx, DWORD PTR _dummy$87278[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _ux$87274[ebp]
	push	eax
	call	_sk_addr_dup
	add	esp, 4
	push	eax
	call	_sk_new
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _s$87279[ebp], eax
; Line 312
	mov	esi, esp
	mov	ecx, DWORD PTR _s$87279[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$87279[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$87276[ebp], eax
; Line 313
	mov	esi, esp
	mov	edx, DWORD PTR _s$87279[ebp]
	push	edx
	mov	eax, DWORD PTR _s$87279[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@x11_setup_:
; Line 315
	cmp	DWORD PTR _err$87276[ebp], 0
	je	SHORT $LN6@x11_setup_
; Line 316
	mov	eax, DWORD PTR _ux$87274[ebp]
	push	eax
	call	_sk_addr_free
	add	esp, 4
; Line 317
	jmp	SHORT $LN8@x11_setup_
$LN6@x11_setup_:
; Line 318
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_sk_addr_free
	add	esp, 4
; Line 319
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax], 1
; Line 320
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR _ux$87274[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN8@x11_setup_:
; Line 325
	mov	eax, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@x11_setup_
; Line 326
	mov	ecx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN3@x11_setup_
; Line 328
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_platform_get_x11_unix_address
	add	esp, 8
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN3@x11_setup_:
; Line 329
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@x11_setup_
; Line 330
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 331
	jmp	SHORT $LN1@x11_setup_
$LN2@x11_setup_:
; Line 332
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG87287
	call	_dupprintf
	add	esp, 8
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN1@x11_setup_:
; Line 333
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN4@x11_setup_:
; Line 339
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 340
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 341
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 342
	mov	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	call	_platform_get_x11_auth
	add	esp, 8
; Line 344
	mov	eax, DWORD PTR _disp$[ebp]
$LN30@x11_setup_:
; Line 345
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@x11_setup_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN38@x11_setup_:
	DD	1
	DD	$LN37@x11_setup_
$LN37@x11_setup_:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN36@x11_setup_
$LN36@x11_setup_:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_x11_setup_display ENDP
_TEXT	ENDS
PUBLIC	_x11_free_display
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_disp$ = 8						; size = 4
_x11_free_display PROC
; Line 348
	push	ebp
	mov	ebp, esp
; Line 349
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 350
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_safefree
	add	esp, 4
; Line 351
	mov	ecx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN1@x11_free_d
; Line 352
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_smemclr
	add	esp, 8
$LN1@x11_free_d:
; Line 353
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 354
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_sk_addr_free
	add	esp, 4
; Line 355
	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 356
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_x11_free_display ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_x11_get_auth_from_authfile
EXTRN	_fclose:PROC
EXTRN	_sk_addrcopy:PROC
EXTRN	_sk_addrtype:PROC
EXTRN	_fgetc:PROC
EXTRN	_get_hostname:PROC
EXTRN	_fopen:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv173 = -144						; size = 4
tv69 = -140						; size = 4
_buf$87456 = -132					; size = 16
_buf$87452 = -108					; size = 4
_match$87406 = -100					; size = 4
_j$87405 = -96						; size = 4
_i$87404 = -92						; size = 4
_c$87403 = -88						; size = 4
_localhost$ = -84					; size = 4
_ourhostname$ = -80					; size = 4
_ideal_match$ = -76					; size = 4
_protocol$ = -72					; size = 4
_family$ = -68						; size = 4
_len$ = -60						; size = 16
_str$ = -36						; size = 16
_ptr$ = -16						; size = 4
_buf$ = -12						; size = 4
_authfp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_disp$ = 8						; size = 4
_authfilename$ = 12					; size = 4
_x11_get_auth_from_authfile PROC
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 456
	mov	DWORD PTR _ideal_match$[ebp], 0
; Line 480
	mov	eax, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN51@x11_get_au
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_sk_address_is_local
	add	esp, 4
	test	eax, eax
	je	SHORT $LN51@x11_get_au
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN52@x11_get_au
$LN51@x11_get_au:
	mov	DWORD PTR tv69[ebp], 0
$LN52@x11_get_au:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _localhost$[ebp], eax
; Line 482
	push	OFFSET $SG87396
	mov	ecx, DWORD PTR _authfilename$[ebp]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _authfp$[ebp], eax
; Line 483
	cmp	DWORD PTR _authfp$[ebp], 0
	jne	SHORT $LN48@x11_get_au
; Line 484
	jmp	$LN49@x11_get_au
$LN48@x11_get_au:
; Line 486
	call	_get_hostname
	mov	DWORD PTR _ourhostname$[ebp], eax
; Line 489
	push	1
	push	262148					; 00040004H
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _buf$[ebp], eax
$LN47@x11_get_au:
; Line 491
	cmp	DWORD PTR _ideal_match$[ebp], 0
	jne	$done$87411
; Line 492
	mov	DWORD PTR _match$87406[ebp], 0
$LN45@x11_get_au:
; Line 496
	mov	edx, DWORD PTR _authfp$[ebp]
	push	edx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$87403[ebp], eax
	cmp	DWORD PTR _c$87403[ebp], -1
	jne	SHORT $LN42@x11_get_au
	jmp	$done$87411
$LN42@x11_get_au:
	movzx	eax, BYTE PTR _c$87403[ebp]
	mov	DWORD PTR _c$87403[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN45@x11_get_au
	mov	edx, DWORD PTR _c$87403[ebp]
	mov	DWORD PTR _family$[ebp], edx
$LN41@x11_get_au:
; Line 497
	mov	eax, DWORD PTR _authfp$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$87403[ebp], eax
	cmp	DWORD PTR _c$87403[ebp], -1
	jne	SHORT $LN38@x11_get_au
	jmp	$done$87411
$LN38@x11_get_au:
	movzx	ecx, BYTE PTR _c$87403[ebp]
	mov	DWORD PTR _c$87403[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN41@x11_get_au
	mov	eax, DWORD PTR _family$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _c$87403[ebp]
	mov	DWORD PTR _family$[ebp], eax
; Line 500
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 501
	mov	DWORD PTR _i$87404[ebp], 0
	jmp	SHORT $LN37@x11_get_au
$LN36@x11_get_au:
	mov	edx, DWORD PTR _i$87404[ebp]
	add	edx, 1
	mov	DWORD PTR _i$87404[ebp], edx
$LN37@x11_get_au:
	cmp	DWORD PTR _i$87404[ebp], 4
	jge	$LN35@x11_get_au
$LN34@x11_get_au:
; Line 502
	mov	eax, DWORD PTR _authfp$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$87403[ebp], eax
	cmp	DWORD PTR _c$87403[ebp], -1
	jne	SHORT $LN31@x11_get_au
	jmp	$done$87411
$LN31@x11_get_au:
	movzx	ecx, BYTE PTR _c$87403[ebp]
	mov	DWORD PTR _c$87403[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN34@x11_get_au
	mov	eax, DWORD PTR _i$87404[ebp]
	mov	ecx, DWORD PTR _c$87403[ebp]
	mov	DWORD PTR _len$[ebp+eax*4], ecx
$LN30@x11_get_au:
; Line 503
	mov	edx, DWORD PTR _authfp$[ebp]
	push	edx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$87403[ebp], eax
	cmp	DWORD PTR _c$87403[ebp], -1
	jne	SHORT $LN27@x11_get_au
	jmp	$done$87411
$LN27@x11_get_au:
	movzx	eax, BYTE PTR _c$87403[ebp]
	mov	DWORD PTR _c$87403[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN30@x11_get_au
	mov	edx, DWORD PTR _i$87404[ebp]
	mov	eax, DWORD PTR _len$[ebp+edx*4]
	shl	eax, 8
	or	eax, DWORD PTR _c$87403[ebp]
	mov	ecx, DWORD PTR _i$87404[ebp]
	mov	DWORD PTR _len$[ebp+ecx*4], eax
; Line 504
	mov	edx, DWORD PTR _i$87404[ebp]
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _str$[ebp+edx*4], eax
; Line 505
	mov	DWORD PTR _j$87405[ebp], 0
	jmp	SHORT $LN26@x11_get_au
$LN25@x11_get_au:
	mov	ecx, DWORD PTR _j$87405[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$87405[ebp], ecx
$LN26@x11_get_au:
	mov	edx, DWORD PTR _i$87404[ebp]
	mov	eax, DWORD PTR _j$87405[ebp]
	cmp	eax, DWORD PTR _len$[ebp+edx*4]
	jge	SHORT $LN24@x11_get_au
$LN23@x11_get_au:
; Line 506
	mov	ecx, DWORD PTR _authfp$[ebp]
	push	ecx
	call	_fgetc
	add	esp, 4
	mov	DWORD PTR _c$87403[ebp], eax
	cmp	DWORD PTR _c$87403[ebp], -1
	jne	SHORT $LN20@x11_get_au
	jmp	$done$87411
$LN20@x11_get_au:
	movzx	edx, BYTE PTR _c$87403[ebp]
	mov	DWORD PTR _c$87403[ebp], edx
	xor	eax, eax
	jne	SHORT $LN23@x11_get_au
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	dl, BYTE PTR _c$87403[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$[ebp], eax
; Line 507
	jmp	SHORT $LN25@x11_get_au
$LN24@x11_get_au:
; Line 508
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _ptr$[ebp], edx
; Line 509
	jmp	$LN36@x11_get_au
$LN35@x11_get_au:
; Line 548
	mov	eax, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jl	SHORT $LN18@x11_get_au
	mov	ecx, DWORD PTR _str$[ebp+4]
	push	ecx
	call	_atoi
	add	esp, 4
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx+8], eax
	je	SHORT $LN19@x11_get_au
$LN18@x11_get_au:
; Line 549
	jmp	$LN47@x11_get_au
$LN19@x11_get_au:
; Line 551
	mov	DWORD PTR _protocol$[ebp], 1
	jmp	SHORT $LN17@x11_get_au
$LN16@x11_get_au:
	mov	eax, DWORD PTR _protocol$[ebp]
	add	eax, 1
	mov	DWORD PTR _protocol$[ebp], eax
$LN17@x11_get_au:
	cmp	DWORD PTR _protocol$[ebp], 3
	jae	SHORT $LN15@x11_get_au
; Line 552
	mov	ecx, DWORD PTR _protocol$[ebp]
	mov	edx, DWORD PTR _x11_authnames[ecx*4]
	push	edx
	mov	eax, DWORD PTR _str$[ebp+8]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@x11_get_au
; Line 553
	jmp	SHORT $LN15@x11_get_au
$LN14@x11_get_au:
; Line 554
	jmp	SHORT $LN16@x11_get_au
$LN15@x11_get_au:
	cmp	DWORD PTR _protocol$[ebp], 3
	jne	SHORT $LN13@x11_get_au
; Line 555
	jmp	$LN47@x11_get_au
$LN13@x11_get_au:
; Line 557
	mov	ecx, DWORD PTR _family$[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	cmp	DWORD PTR tv173[ebp], 0
	je	SHORT $LN10@x11_get_au
	cmp	DWORD PTR tv173[ebp], 6
	je	SHORT $LN7@x11_get_au
	cmp	DWORD PTR tv173[ebp], 256		; 00000100H
	je	$LN4@x11_get_au
	jmp	$LN11@x11_get_au
$LN10@x11_get_au:
; Line 560
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN9@x11_get_au
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_sk_addrtype
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN9@x11_get_au
; Line 562
	lea	edx, DWORD PTR _buf$87452[ebp]
	push	edx
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_sk_addrcopy
	add	esp, 8
; Line 563
	cmp	DWORD PTR _len$[ebp], 4
	jne	SHORT $LN9@x11_get_au
	push	4
	lea	edx, DWORD PTR _buf$87452[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@x11_get_au
; Line 564
	mov	DWORD PTR _match$87406[ebp], 1
; Line 567
	xor	ecx, ecx
	cmp	DWORD PTR _localhost$[ebp], 0
	sete	cl
	mov	DWORD PTR _ideal_match$[ebp], ecx
$LN9@x11_get_au:
; Line 570
	jmp	$LN11@x11_get_au
$LN7@x11_get_au:
; Line 573
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN6@x11_get_au
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_sk_addrtype
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN6@x11_get_au
; Line 575
	lea	edx, DWORD PTR _buf$87456[ebp]
	push	edx
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_sk_addrcopy
	add	esp, 8
; Line 576
	cmp	DWORD PTR _len$[ebp], 16		; 00000010H
	jne	SHORT $LN6@x11_get_au
	push	16					; 00000010H
	lea	edx, DWORD PTR _buf$87456[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@x11_get_au
; Line 577
	mov	DWORD PTR _match$87406[ebp], 1
; Line 578
	xor	ecx, ecx
	cmp	DWORD PTR _localhost$[ebp], 0
	sete	cl
	mov	DWORD PTR _ideal_match$[ebp], ecx
$LN6@x11_get_au:
; Line 581
	jmp	SHORT $LN11@x11_get_au
$LN4@x11_get_au:
; Line 584
	mov	edx, DWORD PTR _disp$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN2@x11_get_au
	cmp	DWORD PTR _localhost$[ebp], 0
	je	SHORT $LN11@x11_get_au
$LN2@x11_get_au:
	cmp	DWORD PTR _ourhostname$[ebp], 0
	je	SHORT $LN11@x11_get_au
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ourhostname$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@x11_get_au
; Line 587
	mov	DWORD PTR _ideal_match$[ebp], 1
	mov	edx, DWORD PTR _ideal_match$[ebp]
	mov	DWORD PTR _match$87406[ebp], edx
$LN11@x11_get_au:
; Line 591
	cmp	DWORD PTR _match$87406[ebp], 0
	je	SHORT $LN1@x11_get_au
; Line 593
	mov	eax, DWORD PTR _disp$[ebp]
	mov	ecx, DWORD PTR _protocol$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 594
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_safefree
	add	esp, 4
; Line 595
	push	1
	mov	ecx, DWORD PTR _len$[ebp+12]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 596
	mov	eax, DWORD PTR _len$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _disp$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 597
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	edx, DWORD PTR _len$[ebp+12]
	mov	DWORD PTR [ecx+40], edx
$LN1@x11_get_au:
; Line 599
	jmp	$LN47@x11_get_au
$done$87411:
; Line 602
	mov	eax, DWORD PTR _authfp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
; Line 603
	push	262148					; 00040004H
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 604
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 605
	mov	eax, DWORD PTR _ourhostname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
$LN49@x11_get_au:
; Line 606
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@x11_get_au
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN60@x11_get_au:
	DD	4
	DD	$LN59@x11_get_au
$LN59@x11_get_au:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN55@x11_get_au
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN56@x11_get_au
	DD	-108					; ffffff94H
	DD	4
	DD	$LN57@x11_get_au
	DD	-132					; ffffff7cH
	DD	16					; 00000010H
	DD	$LN58@x11_get_au
$LN58@x11_get_au:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN57@x11_get_au:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN56@x11_get_au:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN55@x11_get_au:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_x11_get_auth_from_authfile ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_type$ = 12						; size = 4
_addr$ = 16						; size = 4
_port$ = 20						; size = 4
_error_msg$ = 24					; size = 4
_error_code$ = 28					; size = 4
_x11_log PROC
; Line 610
	push	ebp
	mov	ebp, esp
; Line 612
	pop	ebp
	ret	0
_x11_log ENDP
_TEXT	ENDS
EXTRN	_sshfwd_write_eof:PROC
EXTRN	_sshfwd_unclean_close:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_err_message$87497 = -8					; size = 4
_xconn$ = -4						; size = 4
_plug$ = 8						; size = 4
_error_msg$ = 12					; size = 4
_error_code$ = 16					; size = 4
_calling_back$ = 20					; size = 4
_x11_closing PROC
; Line 619
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 620
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _xconn$[ebp], eax
; Line 622
	cmp	DWORD PTR _error_msg$[ebp], 0
	je	SHORT $LN4@x11_closin
; Line 627
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN3@x11_closin
; Line 629
	mov	edx, DWORD PTR _error_msg$[ebp]
	push	edx
	push	OFFSET $SG87498
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _err_message$87497[ebp], eax
; Line 630
	mov	eax, DWORD PTR _err_message$87497[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	push	ecx
	call	_x11_send_init_error
	add	esp, 8
; Line 631
	mov	edx, DWORD PTR _err_message$87497[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN3@x11_closin:
; Line 638
	mov	eax, DWORD PTR _error_msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_sshfwd_unclean_close
	add	esp, 8
; Line 639
	jmp	SHORT $LN2@x11_closin
$LN4@x11_closin:
; Line 644
	mov	eax, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN2@x11_closin
; Line 645
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_sshfwd_write_eof
	add	esp, 4
$LN2@x11_closin:
; Line 648
	mov	eax, 1
; Line 649
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_closing ENDP
_TEXT	ENDS
EXTRN	_sshfwd_write:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xconn$ = -4						; size = 4
_plug$ = 8						; size = 4
_urgent$ = 12						; size = 4
_data$ = 16						; size = 4
_len$ = 20						; size = 4
_x11_receive PROC
; Line 652
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 653
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _xconn$[ebp], eax
; Line 655
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_sshfwd_write
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN1@x11_receiv
; Line 656
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+56], 1
; Line 657
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 658
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@x11_receiv:
; Line 661
	mov	eax, 1
; Line 662
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_receive ENDP
_TEXT	ENDS
EXTRN	_sshfwd_unthrottle:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xconn$ = -4						; size = 4
_plug$ = 8						; size = 4
_bufsize$ = 12						; size = 4
_x11_sent PROC
; Line 665
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 666
	mov	eax, DWORD PTR _plug$[ebp]
	mov	DWORD PTR _xconn$[ebp], eax
; Line 668
	mov	ecx, DWORD PTR _bufsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	_sshfwd_unthrottle
	add	esp, 8
; Line 669
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_sent ENDP
_TEXT	ENDS
PUBLIC	_x11_get_screen_number
EXTRN	_strcspn:PROC
EXTRN	_host_strcspn:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -4						; size = 4
_display$ = 8						; size = 4
_x11_get_screen_number PROC
; Line 677
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 680
	push	OFFSET $SG87527
	mov	eax, DWORD PTR _display$[ebp]
	push	eax
	call	_host_strcspn
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 681
	mov	ecx, DWORD PTR _display$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN2@x11_get_sc
; Line 682
	xor	eax, eax
	jmp	SHORT $LN3@x11_get_sc
$LN2@x11_get_sc:
; Line 683
	push	OFFSET $SG87529
	mov	eax, DWORD PTR _display$[ebp]
	push	eax
	call	_strcspn
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 684
	mov	ecx, DWORD PTR _display$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN1@x11_get_sc
; Line 685
	xor	eax, eax
	jmp	SHORT $LN3@x11_get_sc
$LN1@x11_get_sc:
; Line 686
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _display$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	call	_atoi
	add	esp, 4
$LN3@x11_get_sc:
; Line 687
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_get_screen_number ENDP
_TEXT	ENDS
PUBLIC	_x11_init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -8						; size = 4
_xconn$ = -4						; size = 4
_authtree$ = 8						; size = 4
_c$ = 12						; size = 4
_peeraddr$ = 16						; size = 4
_peerport$ = 20						; size = 4
_x11_init PROC
; Line 695
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 709
	push	84					; 00000054H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _xconn$[ebp], eax
; Line 710
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax], OFFSET ?fn_table@?1??x11_init@@9@9
; Line 711
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 712
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR _authtree$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 713
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [ecx+52], 0
; Line 714
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 715
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [ecx+56], 0
; Line 716
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+64], 1
; Line 717
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 727
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 728
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 733
	cmp	DWORD PTR _peeraddr$[ebp], 0
	je	SHORT $LN3@x11_init
	mov	ecx, DWORD PTR _peeraddr$[ebp]
	push	ecx
	call	_dupstr
	add	esp, 4
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN4@x11_init
$LN3@x11_init:
	mov	DWORD PTR tv81[ebp], 0
$LN4@x11_init:
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 734
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR _peerport$[ebp]
	mov	DWORD PTR [ecx+72], edx
; Line 736
	mov	eax, DWORD PTR _xconn$[ebp]
; Line 737
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_init ENDP
_TEXT	ENDS
PUBLIC	_x11_close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xconn$ = 8						; size = 4
_x11_close PROC
; Line 740
	push	ebp
	mov	ebp, esp
	push	esi
; Line 741
	cmp	DWORD PTR _xconn$[ebp], 0
	jne	SHORT $LN3@x11_close
; Line 742
	jmp	SHORT $LN4@x11_close
$LN3@x11_close:
; Line 744
	mov	eax, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@x11_close
; Line 745
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_safefree
	add	esp, 4
; Line 746
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_safefree
	add	esp, 4
$LN2@x11_close:
; Line 749
	mov	edx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN1@x11_close
; Line 750
	mov	esi, esp
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@x11_close:
; Line 752
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 753
	mov	edx, DWORD PTR _xconn$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN4@x11_close:
; Line 754
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_x11_close ENDP
_TEXT	ENDS
PUBLIC	_x11_unthrottle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -4						; size = 4
_xconn$ = 8						; size = 4
_x11_unthrottle PROC
; Line 757
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 758
	cmp	DWORD PTR _xconn$[ebp], 0
	jne	SHORT $LN2@x11_unthro
; Line 759
	jmp	SHORT $LN3@x11_unthro
$LN2@x11_unthro:
; Line 761
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 762
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	SHORT $LN3@x11_unthro
; Line 763
	mov	edx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN5@x11_unthro
	mov	eax, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN5@x11_unthro
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN6@x11_unthro
$LN5@x11_unthro:
	mov	DWORD PTR tv75[ebp], 1
$LN6@x11_unthro:
	mov	esi, esp
	mov	ecx, DWORD PTR tv75[ebp]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@x11_unthro:
; Line 764
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_unthrottle ENDP
_TEXT	ENDS
PUBLIC	_x11_override_throttle
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -4						; size = 4
_xconn$ = 8						; size = 4
_enable$ = 12						; size = 4
_x11_override_throttle PROC
; Line 767
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 768
	cmp	DWORD PTR _xconn$[ebp], 0
	jne	SHORT $LN2@x11_overri
; Line 769
	jmp	SHORT $LN3@x11_overri
$LN2@x11_overri:
; Line 771
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR _enable$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 772
	mov	edx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN3@x11_overri
; Line 773
	mov	eax, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN5@x11_overri
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN5@x11_overri
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN6@x11_overri
$LN5@x11_overri:
	mov	DWORD PTR tv75[ebp], 1
$LN6@x11_overri:
	mov	esi, esp
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@x11_overri:
; Line 774
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_override_throttle ENDP
_TEXT	ENDS
EXTRN	_strlen:PROC
EXTRN	_appname:DWORD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv138 = -28						; size = 4
tv141 = -24						; size = 4
tv128 = -20						; size = 4
_reply$ = -16						; size = 4
_msgsize$ = -12						; size = 4
_msglen$ = -8						; size = 4
_full_message$ = -4					; size = 4
_xconn$ = 8						; size = 4
_err_message$ = 12					; size = 4
_x11_send_init_error PROC
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 783
	mov	eax, DWORD PTR _err_message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _appname
	push	ecx
	push	OFFSET $SG87577
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _full_message$[ebp], eax
; Line 785
	mov	edx, DWORD PTR _full_message$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _msglen$[ebp], eax
; Line 786
	push	1
	mov	eax, DWORD PTR _msglen$[ebp]
	add	eax, 13					; 0000000dH
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _reply$[ebp], eax
; Line 787
	mov	ecx, DWORD PTR _msglen$[ebp]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _msgsize$[ebp], ecx
; Line 788
	mov	edx, DWORD PTR _reply$[ebp]
	mov	BYTE PTR [edx], 0
; Line 789
	mov	eax, DWORD PTR _reply$[ebp]
	mov	cl, BYTE PTR _msglen$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 790
	push	4
	mov	edx, DWORD PTR _xconn$[ebp]
	add	edx, 6
	push	edx
	mov	eax, DWORD PTR _reply$[ebp]
	add	eax, 2
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 791
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cmp	edx, 66					; 00000042H
	jne	SHORT $LN3@x11_send_i
	mov	eax, DWORD PTR _msgsize$[ebp]
	sar	eax, 2
	sar	eax, 8
	mov	ecx, DWORD PTR _reply$[ebp]
	mov	BYTE PTR [ecx+6], al
	mov	edx, DWORD PTR _msgsize$[ebp]
	sar	edx, 2
	mov	DWORD PTR tv128[ebp], edx
	mov	eax, DWORD PTR _reply$[ebp]
	mov	cl, BYTE PTR tv128[ebp]
	mov	BYTE PTR [eax+7], cl
	movzx	edx, BYTE PTR tv128[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN4@x11_send_i
$LN3@x11_send_i:
	mov	eax, DWORD PTR _msgsize$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _reply$[ebp]
	mov	BYTE PTR [ecx+6], al
	mov	edx, DWORD PTR _msgsize$[ebp]
	sar	edx, 2
	sar	edx, 8
	mov	DWORD PTR tv138[ebp], edx
	mov	eax, DWORD PTR _reply$[ebp]
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR [eax+7], cl
	movzx	edx, BYTE PTR tv138[ebp]
	mov	DWORD PTR tv141[ebp], edx
$LN4@x11_send_i:
; Line 792
	mov	eax, DWORD PTR _msgsize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _reply$[ebp]
	add	ecx, 8
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 793
	mov	edx, DWORD PTR _msglen$[ebp]
	push	edx
	mov	eax, DWORD PTR _full_message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reply$[ebp]
	add	ecx, 8
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 794
	mov	edx, DWORD PTR _msgsize$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _reply$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_sshfwd_write
	add	esp, 12					; 0000000cH
; Line 795
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_sshfwd_write_eof
	add	esp, 4
; Line 796
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+64], 0
; Line 797
	mov	eax, DWORD PTR _reply$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 798
	mov	ecx, DWORD PTR _full_message$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 799
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_send_init_error ENDP
_TEXT	ENDS
PUBLIC	_x11_make_greeting
PUBLIC	__$ArrayPad$
PUBLIC	_x11_send
EXTRN	_strcpy:PROC
EXTRN	_new_connection:PROC
EXTRN	_sshfwd_get_conf:PROC
EXTRN	_sshfwd_x11_is_local:PROC
EXTRN	_sshfwd_x11_sharing_handover:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv272 = -136						; size = 4
tv247 = -132						; size = 4
tv163 = -128						; size = 4
tv137 = -124						; size = 4
$T87877 = -117						; size = 1
_err_message$87680 = -116				; size = 4
_new_peer_port$87650 = -112				; size = 4
_new_peer_addr$87649 = -104				; size = 32
_socketdatalen$87648 = -68				; size = 4
_socketdata$87647 = -64					; size = 4
_greeting_len$87646 = -56				; size = 4
_greeting$87645 = -48					; size = 4
_protominor$87644 = -44					; size = 4
_protomajor$87643 = -40					; size = 4
_peer_port$87642 = -36					; size = 4
_peer_ip$87641 = -28					; size = 4
_auth_matched$87639 = -16				; size = 4
_err$87638 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_xconn$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_x11_send PROC
; Line 822
	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 823
	cmp	DWORD PTR _xconn$[ebp], 0
	jne	SHORT $LN17@x11_send
; Line 824
	xor	eax, eax
	jmp	$LN19@x11_send
$LN17@x11_send:
; Line 829
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN16@x11_send
	mov	eax, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [eax+32], 12			; 0000000cH
	jge	SHORT $LN16@x11_send
; Line 830
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax+4], dl
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 1
	mov	DWORD PTR _data$[ebp], eax
	jmp	SHORT $LN17@x11_send
$LN16@x11_send:
; Line 831
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+32], 12			; 0000000cH
	jge	SHORT $LN15@x11_send
; Line 832
	xor	eax, eax
	jmp	$LN19@x11_send
$LN15@x11_send:
; Line 838
	mov	edx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	$LN13@x11_send
; Line 839
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 66					; 00000042H
	jne	SHORT $LN21@x11_send
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	shl	eax, 8
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	or	eax, edx
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN22@x11_send
$LN21@x11_send:
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR tv137[ebp], ecx
$LN22@x11_send:
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 840
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 66					; 00000042H
	jne	SHORT $LN23@x11_send
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	shl	eax, 8
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	or	eax, edx
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN24@x11_send
$LN23@x11_send:
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR tv163[ebp], ecx
$LN24@x11_send:
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 841
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 842
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 844
	push	1
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 845
	push	1
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN13@x11_send:
; Line 852
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN11@x11_send
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [edx+32], ecx
	jge	SHORT $LN11@x11_send
; Line 853
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx-12], al
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
	jmp	SHORT $LN13@x11_send
$LN11@x11_send:
; Line 855
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN10@x11_send
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	lea	eax, DWORD PTR [eax+edx+12]
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jge	SHORT $LN10@x11_send
; Line 857
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _xconn$[ebp]
	sub	ecx, DWORD PTR [edx+40]
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx], al
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
	jmp	SHORT $LN11@x11_send
$LN10@x11_send:
; Line 858
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	lea	eax, DWORD PTR [eax+edx+12]
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jge	SHORT $LN9@x11_send
; Line 859
	xor	eax, eax
	jmp	$LN19@x11_send
$LN9@x11_send:
; Line 864
	mov	edx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	$LN8@x11_send
	mov	BYTE PTR $T87877[ebp], 0
; Line 866
	mov	DWORD PTR _auth_matched$87639[ebp], 0
; Line 877
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 66					; 00000042H
	jne	SHORT $LN25@x11_send
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	shl	eax, 8
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	or	eax, edx
	mov	DWORD PTR tv247[ebp], eax
	jmp	SHORT $LN26@x11_send
$LN25@x11_send:
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+7]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR tv247[ebp], ecx
$LN26@x11_send:
	mov	ecx, DWORD PTR tv247[ebp]
	mov	DWORD PTR _protomajor$87643[ebp], ecx
; Line 878
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN27@x11_send
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	shl	edx, 8
	mov	eax, DWORD PTR _xconn$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	or	edx, ecx
	mov	DWORD PTR tv272[ebp], edx
	jmp	SHORT $LN28@x11_send
$LN27@x11_send:
	mov	edx, DWORD PTR _xconn$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	shl	edx, 8
	or	eax, edx
	mov	DWORD PTR tv272[ebp], eax
$LN28@x11_send:
	mov	eax, DWORD PTR tv272[ebp]
	mov	DWORD PTR _protominor$87644[ebp], eax
; Line 880
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	SHORT $LN29@x11_send
	push	880					; 00000370H
	push	OFFSET $SG87668
	push	OFFSET $SG87669
	call	__wassert
	add	esp, 12					; 0000000cH
$LN29@x11_send:
; Line 882
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	BYTE PTR [ecx+eax], 0
; Line 884
	mov	DWORD PTR _peer_ip$87641[ebp], 0
; Line 885
	lea	ecx, DWORD PTR _peer_ip$87641[ebp]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_x11_parse_ip
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@x11_send
; Line 886
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _peer_port$87642[ebp], edx
; Line 887
	jmp	SHORT $LN6@x11_send
$LN7@x11_send:
; Line 888
	mov	DWORD PTR _peer_port$87642[ebp], -1
$LN6@x11_send:
; Line 892
	lea	eax, DWORD PTR _auth_matched$87639[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _peer_port$87642[ebp]
	push	eax
	mov	ecx, DWORD PTR _peer_ip$87641[ebp]
	push	ecx
	call	_x11_verify
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _err$87638[ebp], eax
; Line 893
	cmp	DWORD PTR _err$87638[ebp], 0
	je	SHORT $LN5@x11_send
; Line 894
	mov	edx, DWORD PTR _err$87638[ebp]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	push	eax
	call	_x11_send_init_error
	add	esp, 8
; Line 895
	xor	eax, eax
	jmp	$LN19@x11_send
$LN5@x11_send:
; Line 897
	cmp	DWORD PTR _auth_matched$87639[ebp], 0
	jne	SHORT $LN30@x11_send
	push	897					; 00000381H
	push	OFFSET $SG87674
	push	OFFSET $SG87675
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@x11_send:
; Line 904
	mov	edx, DWORD PTR _auth_matched$87639[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN4@x11_send
; Line 909
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _protominor$87644[ebp]
	push	edx
	mov	eax, DWORD PTR _protomajor$87643[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _auth_matched$87639[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _auth_matched$87639[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	_sshfwd_x11_sharing_handover
	add	esp, 40					; 00000028H
; Line 910
	xor	eax, eax
	jmp	$LN19@x11_send
$LN4@x11_send:
; Line 917
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	call	_sshfwd_x11_is_local
	add	esp, 4
; Line 918
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR _auth_matched$87639[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+20], edx
; Line 922
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_sshfwd_get_conf
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _xconn$[ebp]
	push	edx
	push	0
	push	0
	push	1
	push	0
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_sk_addr_dup
	add	esp, 4
	push	eax
	call	_new_connection
	add	esp, 36					; 00000024H
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [ecx+80], eax
; Line 923
	mov	esi, esp
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$87638[ebp], eax
	cmp	DWORD PTR _err$87638[ebp], 0
	je	SHORT $LN3@x11_send
; Line 925
	mov	edx, DWORD PTR _err$87638[ebp]
	push	edx
	push	OFFSET $SG87681
	call	_dupprintf
	add	esp, 8
	mov	DWORD PTR _err_message$87680[ebp], eax
; Line 926
	mov	eax, DWORD PTR _err_message$87680[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	push	ecx
	call	_x11_send_init_error
	add	esp, 8
; Line 927
	mov	edx, DWORD PTR _err_message$87680[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 928
	xor	eax, eax
	jmp	$LN19@x11_send
$LN3@x11_send:
; Line 936
	mov	DWORD PTR _socketdata$87647[ebp], 0
; Line 937
	cmp	DWORD PTR _socketdata$87647[ebp], 0
	je	SHORT $LN2@x11_send
	cmp	BYTE PTR $T87877[ebp], 0
	jne	SHORT $LN31@x11_send
	push	OFFSET $LN32@x11_send
	call	__RTC_UninitUse
	add	esp, 4
$LN31@x11_send:
	cmp	DWORD PTR _socketdatalen$87648[ebp], 6
	jne	SHORT $LN2@x11_send
; Line 939
	mov	eax, DWORD PTR _socketdata$87647[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	push	ecx
	mov	edx, DWORD PTR _socketdata$87647[ebp]
	movzx	eax, BYTE PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR _socketdata$87647[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _socketdata$87647[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	push	OFFSET $SG87684
	lea	edx, DWORD PTR _new_peer_addr$87649[ebp]
	push	edx
	call	_sprintf
	add	esp, 24					; 00000018H
; Line 940
	mov	eax, DWORD PTR _socketdata$87647[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	shl	ecx, 8
	mov	edx, DWORD PTR _socketdata$87647[ebp]
	movzx	eax, BYTE PTR [edx+5]
	or	ecx, eax
	mov	DWORD PTR _new_peer_port$87650[ebp], ecx
; Line 941
	jmp	SHORT $LN1@x11_send
$LN2@x11_send:
; Line 942
	push	OFFSET $SG87690
	lea	ecx, DWORD PTR _new_peer_addr$87649[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 943
	mov	DWORD PTR _new_peer_port$87650[ebp], 0
$LN1@x11_send:
; Line 952
	lea	edx, DWORD PTR _greeting_len$87646[ebp]
	push	edx
	mov	eax, DWORD PTR _new_peer_port$87650[ebp]
	push	eax
	lea	ecx, DWORD PTR _new_peer_addr$87649[ebp]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _protominor$87644[ebp]
	push	edx
	mov	eax, DWORD PTR _protomajor$87643[ebp]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	push	edx
	call	_x11_make_greeting
	add	esp, 36					; 00000024H
	mov	DWORD PTR _greeting$87645[ebp], eax
; Line 954
	mov	esi, esp
	mov	eax, DWORD PTR _greeting_len$87646[ebp]
	push	eax
	mov	ecx, DWORD PTR _greeting$87645[ebp]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 956
	mov	edx, DWORD PTR _greeting_len$87646[ebp]
	push	edx
	mov	eax, DWORD PTR _greeting$87645[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 957
	mov	ecx, DWORD PTR _greeting$87645[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 962
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	DWORD PTR [edx+52], 1
$LN8@x11_send:
; Line 969
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@x11_send:
; Line 970
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@x11_send
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 136				; 00000088H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN38@x11_send:
	DD	4
	DD	$LN37@x11_send
$LN37@x11_send:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN33@x11_send
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN34@x11_send
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN35@x11_send
	DD	-104					; ffffff98H
	DD	32					; 00000020H
	DD	$LN36@x11_send
$LN36@x11_send:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
$LN35@x11_send:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN34@x11_send:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN33@x11_send:
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN32@x11_send:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_x11_send ENDP
_TEXT	ENDS
EXTRN	_index234:PROC
EXTRN	_abs:PROC
EXTRN	_des_decrypt_xdmauth:PROC
EXTRN	_find234:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$87324 = -76					; size = 4
_seen$87323 = -72					; size = 4
_i$87322 = -68						; size = 4
_tim$87321 = -64					; size = 8
_t$87320 = -56						; size = 4
_auth$ = -52						; size = 4
_match_dummy$ = -44					; size = 40
_peer_ip$ = 8						; size = 4
_peer_port$ = 12					; size = 4
_authtree$ = 16						; size = 4
_proto$ = 20						; size = 4
_data$ = 24						; size = 4
_dlen$ = 28						; size = 4
_auth_ret$ = 32						; size = 4
_x11_verify PROC
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 372
	mov	eax, DWORD PTR _x11_authnames+4
	push	eax
	mov	ecx, DWORD PTR _proto$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@x11_verify
; Line 378
	mov	DWORD PTR _match_dummy$[ebp], 1
; Line 379
	mov	edx, DWORD PTR _dlen$[ebp]
	mov	DWORD PTR _match_dummy$[ebp+8], edx
; Line 380
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _match_dummy$[ebp+4], eax
	jmp	SHORT $LN19@x11_verify
$LN20@x11_verify:
; Line 381
	mov	ecx, DWORD PTR _x11_authnames+8
	push	ecx
	mov	edx, DWORD PTR _proto$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@x11_verify
; Line 387
	mov	DWORD PTR _match_dummy$[ebp], 2
; Line 388
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _match_dummy$[ebp+20], eax
; Line 389
	jmp	SHORT $LN19@x11_verify
$LN18@x11_verify:
; Line 390
	mov	eax, OFFSET $SG87315
	jmp	$LN21@x11_verify
$LN19@x11_verify:
; Line 393
	push	0
	lea	ecx, DWORD PTR _match_dummy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _authtree$[ebp]
	push	edx
	call	_find234
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _auth$[ebp], eax
	cmp	DWORD PTR _auth$[ebp], 0
	jne	SHORT $LN16@x11_verify
; Line 394
	mov	eax, OFFSET $SG87318
	jmp	$LN21@x11_verify
$LN16@x11_verify:
; Line 401
	mov	eax, DWORD PTR _auth$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	$LN15@x11_verify
; Line 407
	cmp	DWORD PTR _dlen$[ebp], 24		; 00000018H
	je	SHORT $LN14@x11_verify
; Line 408
	mov	eax, OFFSET $SG87326
	jmp	$LN21@x11_verify
$LN14@x11_verify:
; Line 409
	cmp	DWORD PTR _peer_port$[ebp], -1
	jne	SHORT $LN13@x11_verify
; Line 410
	mov	eax, OFFSET $SG87328
	jmp	$LN21@x11_verify
$LN13@x11_verify:
; Line 411
	push	24					; 00000018H
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 9
	push	eax
	call	_des_decrypt_xdmauth
	add	esp, 12					; 0000000cH
; Line 412
	push	8
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN12@x11_verify
; Line 413
	mov	eax, OFFSET $SG87330
	jmp	$LN21@x11_verify
$LN12@x11_verify:
; Line 414
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	or	edx, ecx
	cmp	edx, DWORD PTR _peer_ip$[ebp]
	je	SHORT $LN11@x11_verify
; Line 415
	mov	eax, OFFSET $SG87340
	jmp	$LN21@x11_verify
$LN11@x11_verify:
; Line 416
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	shl	eax, 8
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	or	eax, edx
	cmp	eax, DWORD PTR _peer_port$[ebp]
	je	SHORT $LN10@x11_verify
; Line 417
	mov	eax, OFFSET $SG87347
	jmp	$LN21@x11_verify
$LN10@x11_verify:
; Line 418
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+15]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	or	ecx, eax
	mov	DWORD PTR _t$87320[ebp], ecx
; Line 419
	mov	DWORD PTR _i$87322[ebp], 18		; 00000012H
	jmp	SHORT $LN9@x11_verify
$LN8@x11_verify:
	mov	ecx, DWORD PTR _i$87322[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$87322[ebp], ecx
$LN9@x11_verify:
	cmp	DWORD PTR _i$87322[ebp], 24		; 00000018H
	jge	SHORT $LN7@x11_verify
; Line 420
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$87322[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN6@x11_verify
; Line 421
	mov	eax, OFFSET $SG87360
	jmp	$LN21@x11_verify
$LN6@x11_verify:
; Line 422
	jmp	SHORT $LN8@x11_verify
$LN7@x11_verify:
	push	0
	call	_time
	add	esp, 4
	mov	DWORD PTR _tim$87321[ebp], eax
	mov	DWORD PTR _tim$87321[ebp+4], edx
; Line 423
	mov	ecx, DWORD PTR _t$87320[ebp]
	xor	edx, edx
	sub	ecx, DWORD PTR _tim$87321[ebp]
	sbb	edx, DWORD PTR _tim$87321[ebp+4]
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 1200				; 000004b0H
	jle	SHORT $LN5@x11_verify
; Line 424
	mov	eax, OFFSET $SG87363
	jmp	$LN21@x11_verify
$LN5@x11_verify:
; Line 425
	push	12					; 0000000cH
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _seen$87323[ebp], eax
; Line 426
	mov	eax, DWORD PTR _seen$87323[ebp]
	mov	ecx, DWORD PTR _t$87320[ebp]
	mov	DWORD PTR [eax], ecx
; Line 427
	push	6
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _seen$87323[ebp]
	add	eax, 4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 428
	mov	ecx, DWORD PTR _auth$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN23@x11_verify
	push	428					; 000001acH
	push	OFFSET $SG87368
	push	OFFSET $SG87369
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@x11_verify:
; Line 429
	mov	eax, DWORD PTR _seen$87323[ebp]
	push	eax
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_add234
	add	esp, 8
	mov	DWORD PTR _ret$87324[ebp], eax
; Line 430
	mov	eax, DWORD PTR _ret$87324[ebp]
	cmp	eax, DWORD PTR _seen$87323[ebp]
	je	SHORT $LN3@x11_verify
; Line 431
	mov	ecx, DWORD PTR _seen$87323[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 432
	mov	eax, OFFSET $SG87371
	jmp	SHORT $LN21@x11_verify
$LN3@x11_verify:
; Line 436
	push	0
	mov	edx, DWORD PTR _auth$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_index234
	add	esp, 8
	mov	DWORD PTR _seen$87323[ebp], eax
; Line 437
	cmp	DWORD PTR _seen$87323[ebp], 0
	jne	SHORT $LN24@x11_verify
	push	437					; 000001b5H
	push	OFFSET $SG87377
	push	OFFSET $SG87378
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@x11_verify:
; Line 438
	mov	edx, DWORD PTR _seen$87323[ebp]
	mov	eax, DWORD PTR _t$87320[ebp]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 1200				; 000004b0H
	ja	SHORT $LN1@x11_verify
; Line 439
	jmp	SHORT $LN15@x11_verify
$LN1@x11_verify:
; Line 440
	push	0
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_delpos234
	add	esp, 8
	push	eax
	call	_safefree
	add	esp, 4
; Line 441
	jmp	SHORT $LN3@x11_verify
$LN15@x11_verify:
; Line 445
	mov	eax, DWORD PTR _auth_ret$[ebp]
	mov	ecx, DWORD PTR _auth$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 446
	xor	eax, eax
$LN21@x11_verify:
; Line 447
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@x11_verify
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@x11_verify:
	DD	1
	DD	$LN26@x11_verify
$LN26@x11_verify:
	DD	-44					; ffffffd4H
	DD	40					; 00000028H
	DD	$LN25@x11_verify
$LN25@x11_verify:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_x11_verify ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 132
	push	ebp
	mov	ebp, esp
; Line 133
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4
; Line 134
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_sscanf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_addr_string$ = 8					; size = 4
_ip$ = 12						; size = 4
_x11_parse_ip PROC
; File c:\workspace\putty\x11fwd.c
; Line 802
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 810
	cmp	DWORD PTR _addr_string$[ebp], 0
	je	SHORT $LN2@x11_parse_
	lea	eax, DWORD PTR _i$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _i$[ebp+4]
	push	edx
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG87593
	mov	ecx, DWORD PTR _addr_string$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	cmp	eax, 4
	jne	SHORT $LN2@x11_parse_
; Line 811
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _i$[ebp+4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp+8]
	shl	ecx, 8
	or	edx, ecx
	or	edx, DWORD PTR _i$[ebp+12]
	mov	eax, DWORD PTR _ip$[ebp]
	mov	DWORD PTR [eax], edx
; Line 812
	mov	eax, 1
	jmp	SHORT $LN3@x11_parse_
; Line 813
	jmp	SHORT $LN3@x11_parse_
$LN2@x11_parse_:
; Line 814
	xor	eax, eax
$LN3@x11_parse_:
; Line 816
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@x11_parse_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@x11_parse_:
	DD	1
	DD	$LN6@x11_parse_
$LN6@x11_parse_:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN5@x11_parse_
$LN5@x11_parse_:
	DB	105					; 00000069H
	DB	0
_x11_parse_ip ENDP
_TEXT	ENDS
PUBLIC	_x11_send_eof
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xconn$ = 8						; size = 4
_x11_send_eof PROC
; Line 973
	push	ebp
	mov	ebp, esp
	push	esi
; Line 974
	mov	eax, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@x11_send_e
; Line 975
	mov	esi, esp
	mov	ecx, DWORD PTR _xconn$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _xconn$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 976
	jmp	SHORT $LN4@x11_send_e
$LN3@x11_send_e:
; Line 983
	mov	ecx, DWORD PTR _xconn$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN4@x11_send_e
; Line 984
	mov	edx, DWORD PTR _xconn$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	_sshfwd_write_eof
	add	esp, 4
$LN4@x11_send_e:
; Line 986
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_x11_send_eof ENDP
_TEXT	ENDS
PUBLIC	_x11_identify_auth_proto
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_protocol$ = -4						; size = 4
_protoname$ = 8						; size = 4
_x11_identify_auth_proto PROC
; Line 994
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 997
	mov	DWORD PTR _protocol$[ebp], 1
	jmp	SHORT $LN4@x11_identi
$LN3@x11_identi:
	mov	eax, DWORD PTR _protocol$[ebp]
	add	eax, 1
	mov	DWORD PTR _protocol$[ebp], eax
$LN4@x11_identi:
	cmp	DWORD PTR _protocol$[ebp], 3
	jae	SHORT $LN2@x11_identi
; Line 998
	mov	ecx, DWORD PTR _protocol$[ebp]
	mov	edx, DWORD PTR _x11_authnames[ecx*4]
	push	edx
	mov	eax, DWORD PTR _protoname$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@x11_identi
; Line 999
	mov	eax, DWORD PTR _protocol$[ebp]
	jmp	SHORT $LN5@x11_identi
$LN1@x11_identi:
; Line 1000
	jmp	SHORT $LN3@x11_identi
$LN2@x11_identi:
	or	eax, -1
$LN5@x11_identi:
; Line 1001
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_x11_identify_auth_proto ENDP
_TEXT	ENDS
PUBLIC	_x11_dehexify
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$87719 = -32					; size = 4
_bytestr$87718 = -20					; size = 3
_ret$ = -12						; size = 4
_i$ = -8						; size = 4
_len$ = -4						; size = 4
_hex$ = 8						; size = 4
_outlen$ = 12						; size = 4
_x11_dehexify PROC
; Line 1004
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1008
	mov	eax, DWORD PTR _hex$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	shr	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 1009
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1011
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@x11_dehexi
$LN2@x11_dehexi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@x11_dehexi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@x11_dehexi
; Line 1013
	mov	DWORD PTR _val$87719[ebp], 0
; Line 1014
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _hex$[ebp]
	mov	al, BYTE PTR [edx+ecx*2]
	mov	BYTE PTR _bytestr$87718[ebp], al
; Line 1015
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _hex$[ebp]
	mov	al, BYTE PTR [edx+ecx*2+1]
	mov	BYTE PTR _bytestr$87718[ebp+1], al
; Line 1016
	mov	BYTE PTR _bytestr$87718[ebp+2], 0
; Line 1017
	lea	ecx, DWORD PTR _val$87719[ebp]
	push	ecx
	push	OFFSET $SG87720
	lea	edx, DWORD PTR _bytestr$87718[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
; Line 1018
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _val$87719[ebp]
	mov	BYTE PTR [eax], cl
; Line 1019
	jmp	SHORT $LN2@x11_dehexi
$LN1@x11_dehexi:
; Line 1021
	mov	edx, DWORD PTR _outlen$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1022
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1023
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@x11_dehexi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@x11_dehexi:
	DD	2
	DD	$LN8@x11_dehexi
$LN8@x11_dehexi:
	DD	-20					; ffffffecH
	DD	3
	DD	$LN6@x11_dehexi
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@x11_dehexi
$LN7@x11_dehexi:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN6@x11_dehexi:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_x11_dehexify ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__allshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv256 = -160						; size = 4
tv259 = -156						; size = 4
tv240 = -152						; size = 4
tv243 = -148						; size = 4
tv224 = -144						; size = 4
tv227 = -140						; size = 4
tv208 = -136						; size = 4
tv211 = -132						; size = 4
_peer_ip$87753 = -124					; size = 4
_t$87752 = -116						; size = 8
_greeting_len$ = -108					; size = 4
_authdatalen_pad$ = -104				; size = 4
_authdatalen$ = -100					; size = 4
_authnamelen_pad$ = -96					; size = 4
_authnamelen$ = -92					; size = 4
_authdata$ = -88					; size = 4
_authname$ = -84					; size = 4
_realauthdata$ = -76					; size = 64
_greeting$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_endian$ = 8						; size = 4
_protomajor$ = 12					; size = 4
_protominor$ = 16					; size = 4
_auth_proto$ = 20					; size = 4
_auth_data$ = 24					; size = 4
_auth_len$ = 28						; size = 4
_peer_addr$ = 32					; size = 4
_peer_port$ = 36					; size = 4
_outlen$ = 40						; size = 4
_x11_make_greeting PROC
; Line 1033
	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1042
	mov	eax, DWORD PTR _auth_proto$[ebp]
	mov	ecx, DWORD PTR _x11_authnames[eax*4]
	mov	DWORD PTR _authname$[ebp], ecx
; Line 1043
	mov	edx, DWORD PTR _authname$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _authnamelen$[ebp], eax
; Line 1044
	mov	eax, DWORD PTR _authnamelen$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _authnamelen_pad$[ebp], eax
; Line 1046
	cmp	DWORD PTR _auth_proto$[ebp], 1
	jne	SHORT $LN4@x11_make_g
; Line 1047
	mov	ecx, DWORD PTR _auth_data$[ebp]
	mov	DWORD PTR _authdata$[ebp], ecx
; Line 1048
	mov	edx, DWORD PTR _auth_len$[ebp]
	mov	DWORD PTR _authdatalen$[ebp], edx
	jmp	$LN3@x11_make_g
$LN4@x11_make_g:
; Line 1049
	cmp	DWORD PTR _auth_proto$[ebp], 2
	jne	$LN2@x11_make_g
	cmp	DWORD PTR _auth_len$[ebp], 16		; 00000010H
	jne	$LN2@x11_make_g
; Line 1051
	mov	DWORD PTR _peer_ip$87753[ebp], 0
; Line 1053
	lea	eax, DWORD PTR _peer_ip$87753[ebp]
	push	eax
	mov	ecx, DWORD PTR _peer_addr$[ebp]
	push	ecx
	call	_x11_parse_ip
	add	esp, 8
; Line 1055
	lea	edx, DWORD PTR _realauthdata$[ebp]
	mov	DWORD PTR _authdata$[ebp], edx
; Line 1056
	mov	DWORD PTR _authdatalen$[ebp], 24	; 00000018H
; Line 1057
	mov	eax, DWORD PTR _authdatalen$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _realauthdata$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1058
	push	8
	mov	edx, DWORD PTR _auth_data$[ebp]
	push	edx
	lea	eax, DWORD PTR _realauthdata$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1059
	mov	ecx, DWORD PTR _peer_ip$87753[ebp]
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR _realauthdata$[ebp+8], cl
	mov	edx, DWORD PTR _peer_ip$87753[ebp]
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _realauthdata$[ebp+9], dl
	mov	eax, DWORD PTR _peer_ip$87753[ebp]
	shr	eax, 8
	mov	BYTE PTR _realauthdata$[ebp+10], al
	mov	cl, BYTE PTR _peer_ip$87753[ebp]
	mov	BYTE PTR _realauthdata$[ebp+11], cl
; Line 1060
	mov	edx, DWORD PTR _peer_port$[ebp]
	sar	edx, 8
	mov	BYTE PTR _realauthdata$[ebp+12], dl
	mov	al, BYTE PTR _peer_port$[ebp]
	mov	BYTE PTR _realauthdata$[ebp+13], al
; Line 1061
	push	0
	call	_time
	add	esp, 4
	mov	DWORD PTR _t$87752[ebp], eax
	mov	DWORD PTR _t$87752[ebp+4], edx
; Line 1062
	mov	eax, DWORD PTR _t$87752[ebp]
	mov	edx, DWORD PTR _t$87752[ebp+4]
	mov	cl, 24					; 00000018H
	call	__allshr
	mov	BYTE PTR _realauthdata$[ebp+14], al
	mov	eax, DWORD PTR _t$87752[ebp]
	mov	edx, DWORD PTR _t$87752[ebp+4]
	mov	cl, 16					; 00000010H
	call	__allshr
	mov	BYTE PTR _realauthdata$[ebp+15], al
	mov	eax, DWORD PTR _t$87752[ebp]
	mov	edx, DWORD PTR _t$87752[ebp+4]
	mov	cl, 8
	call	__allshr
	mov	BYTE PTR _realauthdata$[ebp+16], al
	mov	cl, BYTE PTR _t$87752[ebp]
	mov	BYTE PTR _realauthdata$[ebp+17], cl
; Line 1065
	mov	edx, DWORD PTR _authdatalen$[ebp]
	push	edx
	lea	eax, DWORD PTR _realauthdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auth_data$[ebp]
	add	ecx, 9
	push	ecx
	call	_des_encrypt_xdmauth
	add	esp, 12					; 0000000cH
; Line 1066
	jmp	SHORT $LN3@x11_make_g
$LN2@x11_make_g:
; Line 1067
	lea	edx, DWORD PTR _realauthdata$[ebp]
	mov	DWORD PTR _authdata$[ebp], edx
; Line 1068
	mov	DWORD PTR _authdatalen$[ebp], 0
$LN3@x11_make_g:
; Line 1071
	mov	eax, DWORD PTR _authdatalen$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _authdatalen_pad$[ebp], eax
; Line 1072
	mov	ecx, DWORD PTR _authdatalen_pad$[ebp]
	mov	edx, DWORD PTR _authnamelen_pad$[ebp]
	lea	eax, DWORD PTR [edx+ecx+12]
	mov	DWORD PTR _greeting_len$[ebp], eax
; Line 1074
	push	1
	mov	ecx, DWORD PTR _greeting_len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _greeting$[ebp], eax
; Line 1075
	mov	edx, DWORD PTR _greeting_len$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _greeting$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1076
	mov	ecx, DWORD PTR _greeting$[ebp]
	mov	dl, BYTE PTR _endian$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 1077
	cmp	DWORD PTR _endian$[ebp], 66		; 00000042H
	jne	SHORT $LN7@x11_make_g
	mov	eax, DWORD PTR _protomajor$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _greeting$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	al, BYTE PTR _protomajor$[ebp]
	mov	BYTE PTR [edx+3], al
	movzx	ecx, BYTE PTR _protomajor$[ebp]
	mov	DWORD PTR tv211[ebp], ecx
	jmp	SHORT $LN8@x11_make_g
$LN7@x11_make_g:
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	al, BYTE PTR _protomajor$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	ecx, DWORD PTR _protomajor$[ebp]
	sar	ecx, 8
	mov	DWORD PTR tv208[ebp], ecx
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	al, BYTE PTR tv208[ebp]
	mov	BYTE PTR [edx+3], al
	movzx	ecx, BYTE PTR tv208[ebp]
	mov	DWORD PTR tv211[ebp], ecx
$LN8@x11_make_g:
; Line 1078
	cmp	DWORD PTR _endian$[ebp], 66		; 00000042H
	jne	SHORT $LN9@x11_make_g
	mov	edx, DWORD PTR _protominor$[ebp]
	sar	edx, 8
	mov	eax, DWORD PTR _greeting$[ebp]
	mov	BYTE PTR [eax+4], dl
	mov	ecx, DWORD PTR _greeting$[ebp]
	mov	dl, BYTE PTR _protominor$[ebp]
	mov	BYTE PTR [ecx+5], dl
	movzx	eax, BYTE PTR _protominor$[ebp]
	mov	DWORD PTR tv227[ebp], eax
	jmp	SHORT $LN10@x11_make_g
$LN9@x11_make_g:
	mov	ecx, DWORD PTR _greeting$[ebp]
	mov	dl, BYTE PTR _protominor$[ebp]
	mov	BYTE PTR [ecx+4], dl
	mov	eax, DWORD PTR _protominor$[ebp]
	sar	eax, 8
	mov	DWORD PTR tv224[ebp], eax
	mov	ecx, DWORD PTR _greeting$[ebp]
	mov	dl, BYTE PTR tv224[ebp]
	mov	BYTE PTR [ecx+5], dl
	movzx	eax, BYTE PTR tv224[ebp]
	mov	DWORD PTR tv227[ebp], eax
$LN10@x11_make_g:
; Line 1079
	cmp	DWORD PTR _endian$[ebp], 66		; 00000042H
	jne	SHORT $LN11@x11_make_g
	mov	ecx, DWORD PTR _authnamelen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	eax, DWORD PTR _greeting$[ebp]
	mov	cl, BYTE PTR _authnamelen$[ebp]
	mov	BYTE PTR [eax+7], cl
	movzx	edx, BYTE PTR _authnamelen$[ebp]
	mov	DWORD PTR tv243[ebp], edx
	jmp	SHORT $LN12@x11_make_g
$LN11@x11_make_g:
	mov	eax, DWORD PTR _greeting$[ebp]
	mov	cl, BYTE PTR _authnamelen$[ebp]
	mov	BYTE PTR [eax+6], cl
	mov	edx, DWORD PTR _authnamelen$[ebp]
	sar	edx, 8
	mov	DWORD PTR tv240[ebp], edx
	mov	eax, DWORD PTR _greeting$[ebp]
	mov	cl, BYTE PTR tv240[ebp]
	mov	BYTE PTR [eax+7], cl
	movzx	edx, BYTE PTR tv240[ebp]
	mov	DWORD PTR tv243[ebp], edx
$LN12@x11_make_g:
; Line 1080
	cmp	DWORD PTR _endian$[ebp], 66		; 00000042H
	jne	SHORT $LN13@x11_make_g
	mov	eax, DWORD PTR _authdatalen$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _greeting$[ebp]
	mov	BYTE PTR [ecx+8], al
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	al, BYTE PTR _authdatalen$[ebp]
	mov	BYTE PTR [edx+9], al
	movzx	ecx, BYTE PTR _authdatalen$[ebp]
	mov	DWORD PTR tv259[ebp], ecx
	jmp	SHORT $LN14@x11_make_g
$LN13@x11_make_g:
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	al, BYTE PTR _authdatalen$[ebp]
	mov	BYTE PTR [edx+8], al
	mov	ecx, DWORD PTR _authdatalen$[ebp]
	sar	ecx, 8
	mov	DWORD PTR tv256[ebp], ecx
	mov	edx, DWORD PTR _greeting$[ebp]
	mov	al, BYTE PTR tv256[ebp]
	mov	BYTE PTR [edx+9], al
	movzx	ecx, BYTE PTR tv256[ebp]
	mov	DWORD PTR tv259[ebp], ecx
$LN14@x11_make_g:
; Line 1081
	mov	edx, DWORD PTR _authnamelen$[ebp]
	push	edx
	mov	eax, DWORD PTR _authname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _greeting$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1082
	mov	edx, DWORD PTR _authdatalen$[ebp]
	push	edx
	mov	eax, DWORD PTR _authdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _authnamelen_pad$[ebp]
	mov	edx, DWORD PTR _greeting$[ebp]
	lea	eax, DWORD PTR [edx+ecx+12]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1084
	push	64					; 00000040H
	lea	ecx, DWORD PTR _realauthdata$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 1086
	mov	edx, DWORD PTR _outlen$[ebp]
	mov	eax, DWORD PTR _greeting_len$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1087
	mov	eax, DWORD PTR _greeting$[ebp]
; Line 1088
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@x11_make_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 160				; 000000a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@x11_make_g:
	DD	2
	DD	$LN17@x11_make_g
$LN17@x11_make_g:
	DD	-76					; ffffffb4H
	DD	64					; 00000040H
	DD	$LN15@x11_make_g
	DD	-124					; ffffff84H
	DD	4
	DD	$LN16@x11_make_g
$LN16@x11_make_g:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN15@x11_make_g:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_x11_make_greeting ENDP
_TEXT	ENDS
END
