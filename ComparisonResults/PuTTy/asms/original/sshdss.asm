; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshdss.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ssh_dss
_BSS	SEGMENT
$SG7350	DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?hex@?1??dss_fmtkey@@9@9 DB '0123456789abcdef', 00H	; `dss_fmtkey'::`2'::hex
	ORG $+3
_ssh_dss DD	FLAT:_dss_newkey
	DD	FLAT:_dss_freekey
	DD	FLAT:_dss_fmtkey
	DD	FLAT:_dss_public_blob
	DD	FLAT:_dss_private_blob
	DD	FLAT:_dss_createkey
	DD	FLAT:_dss_openssh_createkey
	DD	FLAT:_dss_openssh_fmtkey
	DD	FLAT:_dss_pubkey_bits
	DD	FLAT:_dss_fingerprint
	DD	FLAT:_dss_verifysig
	DD	FLAT:_dss_sign
	DD	FLAT:$SG7621
	DD	FLAT:$SG7622
CONST	ENDS
_DATA	SEGMENT
$SG7243	DB	'ssh-dss', 00H
$SG7278	DB	'0x', 00H
	ORG $+1
$SG7283	DB	',0x', 00H
$SG7288	DB	',0x', 00H
$SG7293	DB	',0x', 00H
$SG7312	DB	00H, 00H, 00H, 07H, 'ssh-dss', 00H
$SG7345	DB	'ssh-dss %d ', 00H
$SG7349	DB	':', 00H
	ORG $+2
$SG7351	DB	'%s%02x', 00H
	ORG $+1
$SG7387	DB	'ssh-dss', 00H
$SG7417	DB	'ssh-dss', 00H
$SG7447	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 's', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7448	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'b', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG7472	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'd'
	DB	00H, 's', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7473	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'b', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'b'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG7600	DB	'DSA deterministic k generator', 00H
	ORG $+2
$SG7606	DB	'x', 00H
	ORG $+2
$SG7613	DB	'ssh-dss', 00H
$SG7621	DB	'ssh-dss', 00H
$SG7622	DB	'dss', 00H
_DATA	ENDS
EXTRN	_bignum_cmp:PROC
EXTRN	_Zero:DWORD
EXTRN	_safefree:PROC
EXTRN	_memcmp:PROC
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshdss.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_dss$ = -28						; size = 4
_slen$ = -20						; size = 4
_p$ = -8						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_dss_newkey PROC
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 93
	push	20					; 00000014H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _dss$[ebp], eax
; Line 94
	lea	eax, DWORD PTR _slen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_getstring
	add	esp, 16					; 00000010H
; Line 106
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@dss_newkey
	cmp	DWORD PTR _slen$[ebp], 7
	jne	SHORT $LN3@dss_newkey
	push	7
	push	OFFSET $SG7243
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@dss_newkey
$LN3@dss_newkey:
; Line 107
	mov	edx, DWORD PTR _dss$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 108
	xor	eax, eax
	jmp	$LN5@dss_newkey
$LN4@dss_newkey:
; Line 110
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [edx], eax
; Line 111
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 112
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 113
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 114
	mov	eax, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 117
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@dss_newkey
	mov	edx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@dss_newkey
	mov	eax, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@dss_newkey
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN1@dss_newkey
	mov	edx, DWORD PTR _Zero
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@dss_newkey
	mov	edx, DWORD PTR _Zero
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@dss_newkey
$LN1@dss_newkey:
; Line 119
	mov	edx, DWORD PTR _dss$[ebp]
	push	edx
	call	_dss_freekey
	add	esp, 4
; Line 120
	xor	eax, eax
	jmp	SHORT $LN5@dss_newkey
$LN2@dss_newkey:
; Line 123
	mov	eax, DWORD PTR _dss$[ebp]
$LN5@dss_newkey:
; Line 124
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@dss_newkey
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@dss_newkey:
	DD	2
	DD	$LN9@dss_newkey
$LN9@dss_newkey:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@dss_newkey
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@dss_newkey
$LN8@dss_newkey:
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN7@dss_newkey:
	DB	112					; 00000070H
	DB	0
_dss_newkey ENDP
_TEXT	ENDS
EXTRN	_toint:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_p$ = 16						; size = 4
_length$ = 20						; size = 4
_getstring PROC
; Line 41
	push	ebp
	mov	ebp, esp
; Line 42
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 43
	mov	ecx, DWORD PTR _datalen$[ebp]
	cmp	DWORD PTR [ecx], 4
	jge	SHORT $LN3@getstring
; Line 44
	jmp	$LN4@getstring
$LN3@getstring:
; Line 45
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, BYTE PTR [eax+1]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	eax, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, BYTE PTR [eax+3]
	or	ecx, edx
	push	ecx
	call	_toint
	add	esp, 4
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 46
	mov	edx, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [edx], 0
	jge	SHORT $LN2@getstring
; Line 47
	jmp	SHORT $LN4@getstring
$LN2@getstring:
; Line 48
	mov	eax, DWORD PTR _datalen$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 4
	mov	edx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 49
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 50
	mov	eax, DWORD PTR _datalen$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN1@getstring
; Line 51
	jmp	SHORT $LN4@getstring
$LN1@getstring:
; Line 52
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 53
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _length$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 54
	mov	ecx, DWORD PTR _datalen$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@getstring:
; Line 55
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_getstring ENDP
_TEXT	ENDS
EXTRN	_bignum_from_bytes:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -28						; size = 4
_length$ = -20						; size = 4
_p$ = -8						; size = 4
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_getmp	PROC
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 62
	lea	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _datalen$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_getstring
	add	esp, 16					; 00000010H
; Line 63
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@getmp
; Line 64
	xor	eax, eax
	jmp	SHORT $LN3@getmp
$LN2@getmp:
; Line 65
	mov	ecx, DWORD PTR _p$[ebp]
	movsx	edx, BYTE PTR [ecx]
	and	edx, 128				; 00000080H
	je	SHORT $LN1@getmp
; Line 66
	xor	eax, eax
	jmp	SHORT $LN3@getmp
$LN1@getmp:
; Line 67
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 68
	mov	eax, DWORD PTR _b$[ebp]
$LN3@getmp:
; Line 69
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@getmp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@getmp:
	DD	2
	DD	$LN7@getmp
$LN7@getmp:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@getmp
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@getmp
$LN6@getmp:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN5@getmp:
	DB	112					; 00000070H
	DB	0
_getmp	ENDP
_TEXT	ENDS
EXTRN	_freebn:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dss$ = -4						; size = 4
_key$ = 8						; size = 4
_dss_freekey PROC
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 128
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 129
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN5@dss_freeke
; Line 130
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_freebn
	add	esp, 4
$LN5@dss_freeke:
; Line 131
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@dss_freeke
; Line 132
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_freebn
	add	esp, 4
$LN4@dss_freeke:
; Line 133
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@dss_freeke
; Line 134
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_freebn
	add	esp, 4
$LN3@dss_freeke:
; Line 135
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN2@dss_freeke
; Line 136
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_freebn
	add	esp, 4
$LN2@dss_freeke:
; Line 137
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN1@dss_freeke
; Line 138
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_freebn
	add	esp, 4
$LN1@dss_freeke:
; Line 139
	mov	ecx, DWORD PTR _dss$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 140
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_freekey ENDP
_TEXT	ENDS
EXTRN	_bignum_byte:PROC
EXTRN	_sprintf:PROC
EXTRN	_bignum_bitcount:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv216 = -40						; size = 4
tv190 = -36						; size = 4
tv164 = -32						; size = 4
tv139 = -28						; size = 4
_nibbles$ = -24						; size = 4
_pos$ = -20						; size = 4
_i$ = -16						; size = 4
_len$ = -12						; size = 4
_p$ = -8						; size = 4
_dss$ = -4						; size = 4
_key$ = 8						; size = 4
_dss_fmtkey PROC
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 144
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 148
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN14@dss_fmtkey
; Line 149
	xor	eax, eax
	jmp	$LN15@dss_fmtkey
$LN14@dss_fmtkey:
; Line 150
	mov	DWORD PTR _len$[ebp], 13		; 0000000dH
; Line 151
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	lea	eax, DWORD PTR [eax*4+60]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 152
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	lea	eax, DWORD PTR [eax*4+60]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 153
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	lea	eax, DWORD PTR [eax*4+60]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 154
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	lea	eax, DWORD PTR [eax*4+60]
	cdq
	and	edx, 15					; 0000000fH
	add	eax, edx
	sar	eax, 4
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 155
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 156
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN13@dss_fmtkey
; Line 157
	xor	eax, eax
	jmp	$LN15@dss_fmtkey
$LN13@dss_fmtkey:
; Line 159
	mov	DWORD PTR _pos$[ebp], 0
; Line 160
	push	OFFSET $SG7278
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 161
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nibbles$[ebp], eax
; Line 162
	cmp	DWORD PTR _nibbles$[ebp], 1
	jge	SHORT $LN12@dss_fmtkey
; Line 163
	mov	DWORD PTR _nibbles$[ebp], 1
$LN12@dss_fmtkey:
; Line 164
	mov	edx, DWORD PTR _nibbles$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN11@dss_fmtkey:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv139[ebp], 0
	je	SHORT $LN10@dss_fmtkey
; Line 166
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN17@dss_fmtkey
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN17@dss_fmtkey:
	shl	ecx, 2
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR ?hex@?1??dss_fmtkey@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN11@dss_fmtkey
$LN10@dss_fmtkey:
; Line 167
	push	OFFSET $SG7283
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 168
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nibbles$[ebp], eax
; Line 169
	cmp	DWORD PTR _nibbles$[ebp], 1
	jge	SHORT $LN9@dss_fmtkey
; Line 170
	mov	DWORD PTR _nibbles$[ebp], 1
$LN9@dss_fmtkey:
; Line 171
	mov	ecx, DWORD PTR _nibbles$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN8@dss_fmtkey:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv164[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv164[ebp], 0
	je	SHORT $LN7@dss_fmtkey
; Line 173
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN18@dss_fmtkey
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN18@dss_fmtkey:
	shl	ecx, 2
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR ?hex@?1??dss_fmtkey@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN8@dss_fmtkey
$LN7@dss_fmtkey:
; Line 174
	push	OFFSET $SG7288
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 175
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nibbles$[ebp], eax
; Line 176
	cmp	DWORD PTR _nibbles$[ebp], 1
	jge	SHORT $LN6@dss_fmtkey
; Line 177
	mov	DWORD PTR _nibbles$[ebp], 1
$LN6@dss_fmtkey:
; Line 178
	mov	ecx, DWORD PTR _nibbles$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN5@dss_fmtkey:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv190[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv190[ebp], 0
	je	SHORT $LN4@dss_fmtkey
; Line 180
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN19@dss_fmtkey
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN19@dss_fmtkey:
	shl	ecx, 2
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR ?hex@?1??dss_fmtkey@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN5@dss_fmtkey
$LN4@dss_fmtkey:
; Line 181
	push	OFFSET $SG7293
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 182
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nibbles$[ebp], eax
; Line 183
	cmp	DWORD PTR _nibbles$[ebp], 1
	jge	SHORT $LN3@dss_fmtkey
; Line 184
	mov	DWORD PTR _nibbles$[ebp], 1
$LN3@dss_fmtkey:
; Line 185
	mov	ecx, DWORD PTR _nibbles$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN2@dss_fmtkey:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv216[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv216[ebp], 0
	je	SHORT $LN1@dss_fmtkey
; Line 187
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN20@dss_fmtkey
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN20@dss_fmtkey:
	shl	ecx, 2
	sar	eax, cl
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR ?hex@?1??dss_fmtkey@@9@9[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN2@dss_fmtkey
$LN1@dss_fmtkey:
; Line 188
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 189
	mov	eax, DWORD PTR _p$[ebp]
$LN15@dss_fmtkey:
; Line 190
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_fmtkey ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_MD5Final:PROC
EXTRN	_MD5Update:PROC
EXTRN	_MD5Init:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv224 = -320						; size = 4
tv200 = -316						; size = 4
tv172 = -312						; size = 4
tv144 = -308						; size = 4
tv85 = -304						; size = 4
_c$7344 = -293						; size = 1
_c$7336 = -281						; size = 1
_c$7328 = -269						; size = 1
_c$7320 = -257						; size = 1
_i$ = -252						; size = 4
_numlen$ = -248						; size = 4
_ret$ = -244						; size = 4
_buffer$ = -236						; size = 88
_lenbuf$ = -140						; size = 4
_digest$ = -128						; size = 16
_md5c$ = -104						; size = 92
_dss$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_dss_fingerprint PROC
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 194
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 201
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Init
	add	esp, 4
; Line 202
	push	11					; 0000000bH
	push	OFFSET $SG7312
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
; Line 211
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _numlen$[ebp], eax
	mov	edx, DWORD PTR _numlen$[ebp]
	sar	edx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], dl
	mov	eax, DWORD PTR _numlen$[ebp]
	sar	eax, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], al
	mov	ecx, DWORD PTR _numlen$[ebp]
	sar	ecx, 8
	mov	BYTE PTR _lenbuf$[ebp+2], cl
	mov	dl, BYTE PTR _numlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], dl
	push	4
	lea	eax, DWORD PTR _lenbuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN12@dss_finger:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 0
	je	SHORT $LN11@dss_finger
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7320[ebp], al
	push	1
	lea	edx, DWORD PTR _c$7320[ebp]
	push	edx
	lea	eax, DWORD PTR _md5c$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN12@dss_finger
$LN11@dss_finger:
; Line 212
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _numlen$[ebp], eax
	mov	eax, DWORD PTR _numlen$[ebp]
	sar	eax, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], al
	mov	ecx, DWORD PTR _numlen$[ebp]
	sar	ecx, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], cl
	mov	edx, DWORD PTR _numlen$[ebp]
	sar	edx, 8
	mov	BYTE PTR _lenbuf$[ebp+2], dl
	mov	al, BYTE PTR _numlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], al
	push	4
	lea	ecx, DWORD PTR _lenbuf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN10@dss_finger:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv144[ebp], 0
	je	SHORT $LN9@dss_finger
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7328[ebp], al
	push	1
	lea	eax, DWORD PTR _c$7328[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN10@dss_finger
$LN9@dss_finger:
; Line 213
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _numlen$[ebp], eax
	mov	ecx, DWORD PTR _numlen$[ebp]
	sar	ecx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], cl
	mov	edx, DWORD PTR _numlen$[ebp]
	sar	edx, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], dl
	mov	eax, DWORD PTR _numlen$[ebp]
	sar	eax, 8
	mov	BYTE PTR _lenbuf$[ebp+2], al
	mov	cl, BYTE PTR _numlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], cl
	push	4
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _md5c$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN8@dss_finger:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv172[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv172[ebp], 0
	je	SHORT $LN7@dss_finger
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7336[ebp], al
	push	1
	lea	ecx, DWORD PTR _c$7336[ebp]
	push	ecx
	lea	edx, DWORD PTR _md5c$[ebp]
	push	edx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@dss_finger
$LN7@dss_finger:
; Line 214
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _numlen$[ebp], eax
	mov	edx, DWORD PTR _numlen$[ebp]
	sar	edx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], dl
	mov	eax, DWORD PTR _numlen$[ebp]
	sar	eax, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], al
	mov	ecx, DWORD PTR _numlen$[ebp]
	sar	ecx, 8
	mov	BYTE PTR _lenbuf$[ebp+2], cl
	mov	dl, BYTE PTR _numlen$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], dl
	push	4
	lea	eax, DWORD PTR _lenbuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	call	_MD5Update
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _numlen$[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN6@dss_finger:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv200[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv200[ebp], 0
	je	SHORT $LN5@dss_finger
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _c$7344[ebp], al
	push	1
	lea	edx, DWORD PTR _c$7344[ebp]
	push	edx
	lea	eax, DWORD PTR _md5c$[ebp]
	push	eax
	call	_MD5Update
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@dss_finger
$LN5@dss_finger:
; Line 217
	lea	ecx, DWORD PTR _md5c$[ebp]
	push	ecx
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	call	_MD5Final
	add	esp, 8
; Line 219
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	push	eax
	push	OFFSET $SG7345
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 220
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@dss_finger
$LN3@dss_finger:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@dss_finger:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN2@dss_finger
; Line 222
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN15@dss_finger
	mov	DWORD PTR tv224[ebp], OFFSET $SG7349
	jmp	SHORT $LN16@dss_finger
$LN15@dss_finger:
	mov	DWORD PTR tv224[ebp], OFFSET $SG7350
$LN16@dss_finger:
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _digest$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR tv224[ebp]
	push	eax
	push	OFFSET $SG7351
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	lea	edx, DWORD PTR _buffer$[ebp+eax]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@dss_finger
$LN2@dss_finger:
; Line 223
	push	1
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 224
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@dss_finger
; Line 225
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$LN1@dss_finger:
; Line 226
	mov	eax, DWORD PTR _ret$[ebp]
; Line 227
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@dss_finger
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@dss_finger:
	DD	8
	DD	$LN25@dss_finger
$LN25@dss_finger:
	DD	-104					; ffffff98H
	DD	92					; 0000005cH
	DD	$LN17@dss_finger
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN18@dss_finger
	DD	-140					; ffffff74H
	DD	4
	DD	$LN19@dss_finger
	DD	-236					; ffffff14H
	DD	88					; 00000058H
	DD	$LN20@dss_finger
	DD	-257					; fffffeffH
	DD	1
	DD	$LN21@dss_finger
	DD	-269					; fffffef3H
	DD	1
	DD	$LN22@dss_finger
	DD	-281					; fffffee7H
	DD	1
	DD	$LN23@dss_finger
	DD	-293					; fffffedbH
	DD	1
	DD	$LN24@dss_finger
$LN24@dss_finger:
	DB	99					; 00000063H
	DB	0
$LN23@dss_finger:
	DB	99					; 00000063H
	DB	0
$LN22@dss_finger:
	DB	99					; 00000063H
	DB	0
$LN21@dss_finger:
	DB	99					; 00000063H
	DB	0
$LN20@dss_finger:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN19@dss_finger:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@dss_finger:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN17@dss_finger:
	DB	109					; 0000006dH
	DB	100					; 00000064H
	DB	53					; 00000035H
	DB	99					; 00000063H
	DB	0
_dss_fingerprint ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_One:DWORD
EXTRN	_modpow:PROC
EXTRN	_modmul:PROC
EXTRN	_SHA_Simple:PROC
EXTRN	_modinv:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -104						; size = 4
_v$ = -100						; size = 4
_sha$ = -96						; size = 4
_u2$ = -92						; size = 4
_u1$ = -88						; size = 4
_gu1yu2p$ = -84						; size = 4
_yu2p$ = -80						; size = 4
_gu1p$ = -76						; size = 4
_w$ = -72						; size = 4
_s$ = -68						; size = 4
_r$ = -64						; size = 4
_hash$ = -56						; size = 20
_slen$ = -28						; size = 4
_p$ = -16						; size = 4
_dss$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_sig$ = 12						; size = 4
_siglen$ = 16						; size = 4
_data$ = 20						; size = 4
_datalen$ = 24						; size = 4
_dss_verifysig PROC
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 232
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 239
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN10@dss_verify
; Line 240
	xor	eax, eax
	jmp	$LN11@dss_verify
$LN10@dss_verify:
; Line 262
	cmp	DWORD PTR _siglen$[ebp], 40		; 00000028H
	je	SHORT $LN9@dss_verify
; Line 263
	lea	edx, DWORD PTR _slen$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	lea	ecx, DWORD PTR _siglen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sig$[ebp]
	push	edx
	call	_getstring
	add	esp, 16					; 00000010H
; Line 264
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN7@dss_verify
	cmp	DWORD PTR _slen$[ebp], 7
	jne	SHORT $LN7@dss_verify
	push	7
	push	OFFSET $SG7387
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@dss_verify
$LN7@dss_verify:
; Line 265
	xor	eax, eax
	jmp	$LN11@dss_verify
$LN8@dss_verify:
; Line 267
	mov	ecx, DWORD PTR _sig$[ebp]
	add	ecx, 4
	mov	DWORD PTR _sig$[ebp], ecx
	mov	edx, DWORD PTR _siglen$[ebp]
	sub	edx, 4
	mov	DWORD PTR _siglen$[ebp], edx
$LN9@dss_verify:
; Line 269
	lea	eax, DWORD PTR _siglen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sig$[ebp]
	push	ecx
	call	_get160
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 270
	lea	edx, DWORD PTR _siglen$[ebp]
	push	edx
	lea	eax, DWORD PTR _sig$[ebp]
	push	eax
	call	_get160
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 271
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN5@dss_verify
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN6@dss_verify
$LN5@dss_verify:
; Line 272
	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN4@dss_verify
; Line 273
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
$LN4@dss_verify:
; Line 274
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@dss_verify
; Line 275
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
$LN3@dss_verify:
; Line 276
	xor	eax, eax
	jmp	$LN11@dss_verify
$LN6@dss_verify:
; Line 279
	mov	eax, DWORD PTR _Zero
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@dss_verify
; Line 280
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 281
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 282
	xor	eax, eax
	jmp	$LN11@dss_verify
$LN2@dss_verify:
; Line 288
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_modinv
	add	esp, 8
	mov	DWORD PTR _w$[ebp], eax
; Line 289
	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN1@dss_verify
; Line 290
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 291
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 292
	xor	eax, eax
	jmp	$LN11@dss_verify
$LN1@dss_verify:
; Line 298
	lea	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _datalen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_SHA_Simple
	add	esp, 12					; 0000000cH
; Line 299
	lea	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 300
	mov	DWORD PTR _slen$[ebp], 20		; 00000014H
; Line 301
	lea	ecx, DWORD PTR _slen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_get160
	add	esp, 8
	mov	DWORD PTR _sha$[ebp], eax
; Line 302
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _sha$[ebp]
	push	eax
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u1$[ebp], eax
; Line 307
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u2$[ebp], eax
; Line 312
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gu1p$[ebp], eax
; Line 313
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _u2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _yu2p$[ebp], eax
; Line 314
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _yu2p$[ebp]
	push	edx
	mov	eax, DWORD PTR _gu1p$[ebp]
	push	eax
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gu1yu2p$[ebp], eax
; Line 315
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _One
	push	eax
	mov	ecx, DWORD PTR _gu1yu2p$[ebp]
	push	ecx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v$[ebp], eax
; Line 321
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	DWORD PTR _ret$[ebp], eax
; Line 323
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 324
	mov	edx, DWORD PTR _sha$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 325
	mov	eax, DWORD PTR _u1$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 326
	mov	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 327
	mov	edx, DWORD PTR _gu1p$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 328
	mov	eax, DWORD PTR _yu2p$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 329
	mov	ecx, DWORD PTR _gu1yu2p$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 330
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 331
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 332
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 334
	mov	eax, DWORD PTR _ret$[ebp]
$LN11@dss_verify:
; Line 335
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@dss_verify
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@dss_verify:
	DD	3
	DD	$LN16@dss_verify
$LN16@dss_verify:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN13@dss_verify
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN14@dss_verify
	DD	-56					; ffffffc8H
	DD	20					; 00000014H
	DD	$LN15@dss_verify
$LN15@dss_verify:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN14@dss_verify:
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN13@dss_verify:
	DB	112					; 00000070H
	DB	0
_dss_verifysig ENDP
; Function compile flags: /Odtp /RTCsu
_b$ = -4						; size = 4
_data$ = 8						; size = 4
_datalen$ = 12						; size = 4
_get160	PROC
; Line 72
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 75
	mov	eax, DWORD PTR _datalen$[ebp]
	cmp	DWORD PTR [eax], 20			; 00000014H
	jge	SHORT $LN1@get160
; Line 76
	xor	eax, eax
	jmp	SHORT $LN2@get160
$LN1@get160:
; Line 78
	push	20					; 00000014H
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 80
	mov	eax, DWORD PTR _datalen$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 82
	mov	eax, DWORD PTR _b$[ebp]
$LN2@get160:
; Line 83
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get160	ENDP
_TEXT	ENDS
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv197 = -52						; size = 4
tv178 = -48						; size = 4
tv159 = -44						; size = 4
tv141 = -40						; size = 4
_p$ = -36						; size = 4
_blob$ = -32						; size = 4
_i$ = -28						; size = 4
_bloblen$ = -24						; size = 4
_ylen$ = -20						; size = 4
_glen$ = -16						; size = 4
_qlen$ = -12						; size = 4
_plen$ = -8						; size = 4
_dss$ = -4						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_dss_public_blob PROC
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 339
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 344
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _plen$[ebp], eax
; Line 345
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _qlen$[ebp], eax
; Line 346
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _glen$[ebp], eax
; Line 347
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _ylen$[ebp], eax
; Line 353
	mov	eax, DWORD PTR _qlen$[ebp]
	mov	ecx, DWORD PTR _plen$[ebp]
	lea	edx, DWORD PTR [ecx+eax+27]
	add	edx, DWORD PTR _glen$[ebp]
	add	edx, DWORD PTR _ylen$[ebp]
	mov	DWORD PTR _bloblen$[ebp], edx
; Line 354
	push	1
	mov	eax, DWORD PTR _bloblen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _blob$[ebp], eax
; Line 355
	mov	ecx, DWORD PTR _blob$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 356
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+2], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+3], 7
; Line 357
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 358
	push	7
	push	OFFSET $SG7417
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 359
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 7
	mov	DWORD PTR _p$[ebp], edx
; Line 360
	mov	eax, DWORD PTR _plen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _plen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _plen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _plen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 361
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 362
	mov	eax, DWORD PTR _plen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN8@dss_public:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv141[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv141[ebp], 0
	je	SHORT $LN7@dss_public
; Line 363
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN8@dss_public
$LN7@dss_public:
; Line 364
	mov	eax, DWORD PTR _qlen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _qlen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _qlen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _qlen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 365
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 366
	mov	eax, DWORD PTR _qlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN6@dss_public:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv159[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv159[ebp], 0
	je	SHORT $LN5@dss_public
; Line 367
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN6@dss_public
$LN5@dss_public:
; Line 368
	mov	eax, DWORD PTR _glen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _glen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _glen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _glen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 369
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 370
	mov	eax, DWORD PTR _glen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@dss_public:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv178[ebp], 0
	je	SHORT $LN3@dss_public
; Line 371
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN4@dss_public
$LN3@dss_public:
; Line 372
	mov	eax, DWORD PTR _ylen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _ylen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _ylen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _ylen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 373
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 374
	mov	eax, DWORD PTR _ylen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@dss_public:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv197[ebp], 0
	je	SHORT $LN1@dss_public
; Line 375
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN2@dss_public
$LN1@dss_public:
; Line 376
	mov	eax, DWORD PTR _blob$[ebp]
	add	eax, DWORD PTR _bloblen$[ebp]
	cmp	DWORD PTR _p$[ebp], eax
	je	SHORT $LN11@dss_public
	push	376					; 00000178H
	push	OFFSET $SG7447
	push	OFFSET $SG7448
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@dss_public:
; Line 377
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _bloblen$[ebp]
	mov	DWORD PTR [edx], eax
; Line 378
	mov	eax, DWORD PTR _blob$[ebp]
; Line 379
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_public_blob ENDP
; Function compile flags: /Odtp /RTCsu
tv84 = -28						; size = 4
_p$ = -24						; size = 4
_blob$ = -20						; size = 4
_i$ = -16						; size = 4
_bloblen$ = -12						; size = 4
_xlen$ = -8						; size = 4
_dss$ = -4						; size = 4
_key$ = 8						; size = 4
_len$ = 12						; size = 4
_dss_private_blob PROC
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 383
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 388
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _xlen$[ebp], eax
; Line 393
	mov	eax, DWORD PTR _xlen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
; Line 394
	push	1
	mov	ecx, DWORD PTR _bloblen$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _blob$[ebp], eax
; Line 395
	mov	edx, DWORD PTR _blob$[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 396
	mov	eax, DWORD PTR _xlen$[ebp]
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _xlen$[ebp]
	sar	edx, 16					; 00000010H
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1], dl
	mov	ecx, DWORD PTR _xlen$[ebp]
	sar	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+2], cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _xlen$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 397
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 398
	mov	eax, DWORD PTR _xlen$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@dss_privat:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv84[ebp], 0
	je	SHORT $LN1@dss_privat
; Line 399
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN2@dss_privat
$LN1@dss_privat:
; Line 400
	mov	eax, DWORD PTR _blob$[ebp]
	add	eax, DWORD PTR _bloblen$[ebp]
	cmp	DWORD PTR _p$[ebp], eax
	je	SHORT $LN5@dss_privat
	push	400					; 00000190H
	push	OFFSET $SG7472
	push	OFFSET $SG7473
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@dss_privat:
; Line 401
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _bloblen$[ebp]
	mov	DWORD PTR [edx], eax
; Line 402
	mov	eax, DWORD PTR _blob$[ebp]
; Line 403
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_private_blob ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_SHA_Final:PROC
EXTRN	_SHA_Init:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ytest$ = -180						; size = 4
_digest$ = -172						; size = 20
_s$ = -144						; size = 96
_hashlen$ = -40						; size = 4
_hash$ = -28						; size = 4
_pb$ = -16						; size = 4
_dss$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pub_blob$ = 8						; size = 4
_pub_len$ = 12						; size = 4
_priv_blob$ = 16					; size = 4
_priv_len$ = 20						; size = 4
_dss_createkey PROC
; Line 407
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _priv_blob$[ebp]
	mov	DWORD PTR _pb$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _pub_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pub_blob$[ebp]
	push	edx
	call	_dss_newkey
	add	esp, 8
	mov	DWORD PTR _dss$[ebp], eax
; Line 417
	cmp	DWORD PTR _dss$[ebp], 0
	jne	SHORT $LN5@dss_create
; Line 418
	xor	eax, eax
	jmp	$LN6@dss_create
$LN5@dss_create:
; Line 419
	lea	eax, DWORD PTR _priv_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pb$[ebp]
	push	ecx
	call	_getmp
	add	esp, 8
	mov	edx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 420
	mov	eax, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@dss_create
; Line 421
	mov	ecx, DWORD PTR _dss$[ebp]
	push	ecx
	call	_dss_freekey
	add	esp, 4
; Line 422
	xor	eax, eax
	jmp	$LN6@dss_create
$LN4@dss_create:
; Line 428
	mov	DWORD PTR _hashlen$[ebp], -1
; Line 429
	lea	edx, DWORD PTR _hashlen$[ebp]
	push	edx
	lea	eax, DWORD PTR _hash$[ebp]
	push	eax
	lea	ecx, DWORD PTR _priv_len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pb$[ebp]
	push	edx
	call	_getstring
	add	esp, 16					; 00000010H
; Line 430
	cmp	DWORD PTR _hashlen$[ebp], 20		; 00000014H
	jne	$LN3@dss_create
; Line 431
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Init
	add	esp, 4
; Line 432
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sha_mpint
	add	esp, 8
; Line 433
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sha_mpint
	add	esp, 8
; Line 434
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sha_mpint
	add	esp, 8
; Line 435
	lea	ecx, DWORD PTR _digest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_SHA_Final
	add	esp, 8
; Line 436
	push	20					; 00000014H
	lea	eax, DWORD PTR _digest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hash$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@dss_create
; Line 437
	mov	edx, DWORD PTR _dss$[ebp]
	push	edx
	call	_dss_freekey
	add	esp, 4
; Line 438
	xor	eax, eax
	jmp	SHORT $LN6@dss_create
$LN3@dss_create:
; Line 445
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ytest$[ebp], eax
; Line 446
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ytest$[ebp]
	push	edx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@dss_create
; Line 447
	mov	eax, DWORD PTR _dss$[ebp]
	push	eax
	call	_dss_freekey
	add	esp, 4
; Line 448
	mov	ecx, DWORD PTR _ytest$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 449
	xor	eax, eax
	jmp	SHORT $LN6@dss_create
$LN1@dss_create:
; Line 451
	mov	edx, DWORD PTR _ytest$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 453
	mov	eax, DWORD PTR _dss$[ebp]
$LN6@dss_create:
; Line 454
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@dss_create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@dss_create:
	DD	5
	DD	$LN13@dss_create
$LN13@dss_create:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@dss_create
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN9@dss_create
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN10@dss_create
	DD	-144					; ffffff70H
	DD	96					; 00000060H
	DD	$LN11@dss_create
	DD	-172					; ffffff54H
	DD	20					; 00000014H
	DD	$LN12@dss_create
$LN12@dss_create:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN11@dss_create:
	DB	115					; 00000073H
	DB	0
$LN10@dss_create:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN9@dss_create:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN8@dss_create:
	DB	112					; 00000070H
	DB	98					; 00000062H
	DB	0
_dss_createkey ENDP
_TEXT	ENDS
EXTRN	_smemclr:PROC
EXTRN	_SHA_Bytes:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -20						; size = 4
_len$ = -16						; size = 4
_lenbuf$ = -8						; size = 4
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_sha_mpint PROC
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 16
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _len$[ebp], eax
; Line 17
	mov	ecx, DWORD PTR _len$[ebp]
	sar	ecx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], cl
	mov	edx, DWORD PTR _len$[ebp]
	sar	edx, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], dl
	mov	eax, DWORD PTR _len$[ebp]
	sar	eax, 8
	mov	BYTE PTR _lenbuf$[ebp+2], al
	mov	cl, BYTE PTR _len$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], cl
; Line 18
	push	4
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
$LN2@sha_mpint:
; Line 19
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN5@sha_mpint
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN6@sha_mpint
$LN5@sha_mpint:
	mov	DWORD PTR tv82[ebp], 0
$LN6@sha_mpint:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN1@sha_mpint
; Line 20
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _lenbuf$[ebp], al
; Line 21
	push	1
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA_Bytes
	add	esp, 12					; 0000000cH
; Line 22
	jmp	SHORT $LN2@sha_mpint
$LN1@sha_mpint:
; Line 23
	push	4
	lea	ecx, DWORD PTR _lenbuf$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 24
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@sha_mpint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@sha_mpint:
	DD	1
	DD	$LN8@sha_mpint
$LN8@sha_mpint:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@sha_mpint
$LN7@sha_mpint:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_sha_mpint ENDP
; Function compile flags: /Odtp /RTCsu
_dss$ = -8						; size = 4
_b$ = -4						; size = 4
_blob$ = 8						; size = 4
_len$ = 12						; size = 4
_dss_openssh_createkey PROC
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 458
	mov	eax, DWORD PTR _blob$[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 461
	push	20					; 00000014H
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _dss$[ebp], eax
; Line 463
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 464
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 465
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 466
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 467
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_getmp
	add	esp, 8
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 470
	mov	edx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@dss_openss
	mov	eax, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@dss_openss
	mov	ecx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN1@dss_openss
	mov	edx, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@dss_openss
	mov	eax, DWORD PTR _dss$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@dss_openss
	mov	ecx, DWORD PTR _Zero
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@dss_openss
	mov	ecx, DWORD PTR _Zero
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@dss_openss
$LN1@dss_openss:
; Line 472
	mov	ecx, DWORD PTR _dss$[ebp]
	push	ecx
	call	_dss_freekey
	add	esp, 4
; Line 473
	xor	eax, eax
	jmp	SHORT $LN3@dss_openss
$LN2@dss_openss:
; Line 476
	mov	eax, DWORD PTR _dss$[ebp]
$LN3@dss_openss:
; Line 477
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_openssh_createkey ENDP
_TEXT	ENDS
EXTRN	_ssh2_bignum_length:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv325 = -32						; size = 4
tv280 = -28						; size = 4
tv235 = -24						; size = 4
tv190 = -20						; size = 4
tv146 = -16						; size = 4
_i$ = -12						; size = 4
_bloblen$ = -8						; size = 4
_dss$ = -4						; size = 4
_key$ = 8						; size = 4
_blob$ = 12						; size = 4
_len$ = 16						; size = 4
_dss_openssh_fmtkey PROC
; Line 480
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 481
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 489
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _bloblen$[ebp], esi
; Line 491
	mov	edx, DWORD PTR _bloblen$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jle	SHORT $LN11@dss_openss@2
; Line 492
	mov	eax, DWORD PTR _bloblen$[ebp]
	jmp	$LN12@dss_openss@2
$LN11@dss_openss@2:
; Line 494
	mov	DWORD PTR _bloblen$[ebp], 0
; Line 498
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN10@dss_openss@2:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv146[ebp], 0
	je	SHORT $LN9@dss_openss@2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 1
	mov	DWORD PTR _bloblen$[ebp], eax
	jmp	SHORT $LN10@dss_openss@2
$LN9@dss_openss@2:
; Line 499
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 4
	mov	DWORD PTR _bloblen$[ebp], edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN8@dss_openss@2:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv190[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv190[ebp], 0
	je	SHORT $LN7@dss_openss@2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 1
	mov	DWORD PTR _bloblen$[ebp], edx
	jmp	SHORT $LN8@dss_openss@2
$LN7@dss_openss@2:
; Line 500
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN6@dss_openss@2:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv235[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv235[ebp], 0
	je	SHORT $LN5@dss_openss@2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 1
	mov	DWORD PTR _bloblen$[ebp], eax
	jmp	SHORT $LN6@dss_openss@2
$LN5@dss_openss@2:
; Line 501
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+1], al
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+2], al
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 4
	mov	DWORD PTR _bloblen$[ebp], edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN4@dss_openss@2:
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv280[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR tv280[ebp], 0
	je	SHORT $LN3@dss_openss@2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _blob$[ebp]
	add	ecx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _bloblen$[ebp]
	add	edx, 1
	mov	DWORD PTR _bloblen$[ebp], edx
	jmp	SHORT $LN4@dss_openss@2
$LN3@dss_openss@2:
; Line 502
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 24					; 00000018H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 16					; 00000010H
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+1], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	sar	eax, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+2], al
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx+3], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 4
	mov	DWORD PTR _bloblen$[ebp], eax
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_ssh2_bignum_length
	add	esp, 4
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN2@dss_openss@2:
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv325[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR tv325[ebp], 0
	je	SHORT $LN1@dss_openss@2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _blob$[ebp]
	add	edx, DWORD PTR _bloblen$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _bloblen$[ebp]
	add	eax, 1
	mov	DWORD PTR _bloblen$[ebp], eax
	jmp	SHORT $LN2@dss_openss@2
$LN1@dss_openss@2:
; Line 504
	mov	eax, DWORD PTR _bloblen$[ebp]
$LN12@dss_openss@2:
; Line 505
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_openssh_fmtkey ENDP
; Function compile flags: /Odtp /RTCsu
_ret$ = -8						; size = 4
_dss$ = -4						; size = 4
_blob$ = 8						; size = 4
_len$ = 12						; size = 4
_dss_pubkey_bits PROC
; Line 508
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 512
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	push	ecx
	call	_dss_newkey
	add	esp, 8
	mov	DWORD PTR _dss$[ebp], eax
; Line 513
	cmp	DWORD PTR _dss$[ebp], 0
	jne	SHORT $LN1@dss_pubkey
; Line 514
	or	eax, -1
	jmp	SHORT $LN2@dss_pubkey
$LN1@dss_pubkey:
; Line 515
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 516
	mov	ecx, DWORD PTR _dss$[ebp]
	push	ecx
	call	_dss_freekey
	add	esp, 4
; Line 518
	mov	eax, DWORD PTR _ret$[ebp]
$LN2@dss_pubkey:
; Line 519
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dss_pubkey_bits ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_bigmuladd:PROC
EXTRN	_bigmod:PROC
EXTRN	_SHA512_Final:PROC
EXTRN	_SHA512_Bytes:PROC
EXTRN	_SHA512_Init:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ss2$7604 = -588					; size = 212
_i$ = -372						; size = 4
_nbytes$ = -368						; size = 4
_bytes$ = -364						; size = 4
_s$ = -360						; size = 4
_r$ = -356						; size = 4
_hxr$ = -352						; size = 4
_kinv$ = -348						; size = 4
_hash$ = -344						; size = 4
_gkp$ = -340						; size = 4
_k$ = -336						; size = 4
_proto_k$ = -332					; size = 4
_digest512$ = -324					; size = 64
_digest$ = -252						; size = 20
_ss$ = -224						; size = 212
_dss$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_data$ = 12						; size = 4
_datalen$ = 16						; size = 4
_siglen$ = 20						; size = 4
_dss_sign PROC
; Line 522
	push	ebp
	mov	ebp, esp
	sub	esp, 592				; 00000250H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-592]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 594
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _dss$[ebp], eax
; Line 601
	lea	ecx, DWORD PTR _digest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _datalen$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_SHA_Simple
	add	esp, 12					; 0000000cH
; Line 606
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_SHA512_Init
	add	esp, 4
; Line 607
	push	30					; 0000001eH
	push	OFFSET $SG7600
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 608
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_sha512_mpint
	add	esp, 8
; Line 609
	lea	eax, DWORD PTR _digest512$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_SHA512_Final
	add	esp, 8
; Line 614
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_SHA512_Init
	add	esp, 4
; Line 615
	push	64					; 00000040H
	lea	eax, DWORD PTR _digest512$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ss$[ebp]
	push	ecx
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 616
	push	20					; 00000014H
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	lea	eax, DWORD PTR _ss$[ebp]
	push	eax
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
$LN6@dss_sign:
; Line 618
	mov	ecx, 1
	test	ecx, ecx
	je	$LN5@dss_sign
; Line 619
	mov	ecx, 53					; 00000035H
	lea	esi, DWORD PTR _ss$[ebp]
	lea	edi, DWORD PTR _ss2$7604[ebp]
	rep movsd
; Line 620
	lea	edx, DWORD PTR _digest512$[ebp]
	push	edx
	lea	eax, DWORD PTR _ss2$7604[ebp]
	push	eax
	call	_SHA512_Final
	add	esp, 8
; Line 622
	push	212					; 000000d4H
	lea	ecx, DWORD PTR _ss2$7604[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 627
	push	64					; 00000040H
	lea	edx, DWORD PTR _digest512$[ebp]
	push	edx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _proto_k$[ebp], eax
; Line 628
	mov	eax, DWORD PTR _dss$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _proto_k$[ebp]
	push	edx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _k$[ebp], eax
; Line 629
	mov	eax, DWORD PTR _proto_k$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 630
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_modinv
	add	esp, 8
	mov	DWORD PTR _kinv$[ebp], eax
; Line 631
	cmp	DWORD PTR _kinv$[ebp], 0
	jne	SHORT $LN4@dss_sign
; Line 632
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 634
	push	1
	push	OFFSET $SG7606
	lea	edx, DWORD PTR _ss$[ebp]
	push	edx
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 636
	jmp	$LN6@dss_sign
$LN4@dss_sign:
; Line 639
	jmp	SHORT $LN5@dss_sign
; Line 640
	jmp	$LN6@dss_sign
$LN5@dss_sign:
; Line 642
	push	212					; 000000d4H
	lea	eax, DWORD PTR _ss$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 644
	push	64					; 00000040H
	lea	ecx, DWORD PTR _digest512$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 649
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_modpow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gkp$[ebp], eax
; Line 650
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _gkp$[ebp]
	push	eax
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _r$[ebp], eax
; Line 651
	mov	ecx, DWORD PTR _gkp$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 653
	push	20					; 00000014H
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	call	_bignum_from_bytes
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax
; Line 654
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dss$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_bigmuladd
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hxr$[ebp], eax
; Line 655
	mov	ecx, DWORD PTR _dss$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _hxr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kinv$[ebp]
	push	ecx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax
; Line 656
	mov	edx, DWORD PTR _hxr$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 657
	mov	eax, DWORD PTR _kinv$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 658
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 659
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 669
	mov	DWORD PTR _nbytes$[ebp], 55		; 00000037H
; Line 670
	push	1
	mov	eax, DWORD PTR _nbytes$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _bytes$[ebp], eax
; Line 671
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [edx+1], 0
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax+2], 0
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [ecx+3], 7
; Line 672
	push	7
	push	OFFSET $SG7613
	mov	edx, DWORD PTR _bytes$[ebp]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 673
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax+11], 0
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [ecx+12], 0
	mov	edx, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [edx+13], 0
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax+14], 40			; 00000028H
; Line 674
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@dss_sign
$LN2@dss_sign:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@dss_sign:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN1@dss_sign
; Line 675
	mov	edx, 19					; 00000013H
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+15], al
; Line 676
	mov	edx, 19					; 00000013H
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_bignum_byte
	add	esp, 8
	mov	ecx, DWORD PTR _bytes$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+35], al
; Line 677
	jmp	SHORT $LN2@dss_sign
$LN1@dss_sign:
; Line 678
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 679
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 681
	mov	ecx, DWORD PTR _siglen$[ebp]
	mov	edx, DWORD PTR _nbytes$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 682
	mov	eax, DWORD PTR _bytes$[ebp]
; Line 683
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@dss_sign
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 592				; 00000250H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@dss_sign:
	DD	4
	DD	$LN13@dss_sign
$LN13@dss_sign:
	DD	-224					; ffffff20H
	DD	212					; 000000d4H
	DD	$LN9@dss_sign
	DD	-252					; ffffff04H
	DD	20					; 00000014H
	DD	$LN10@dss_sign
	DD	-324					; fffffebcH
	DD	64					; 00000040H
	DD	$LN11@dss_sign
	DD	-588					; fffffdb4H
	DD	212					; 000000d4H
	DD	$LN12@dss_sign
$LN12@dss_sign:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN11@dss_sign:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	53					; 00000035H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	0
$LN10@dss_sign:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN9@dss_sign:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_dss_sign ENDP
; Function compile flags: /Odtp /RTCsu
tv82 = -20						; size = 4
_len$ = -16						; size = 4
_lenbuf$ = -8						; size = 4
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_sha512_mpint PROC
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 30
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _len$[ebp], eax
; Line 31
	mov	ecx, DWORD PTR _len$[ebp]
	sar	ecx, 24					; 00000018H
	mov	BYTE PTR _lenbuf$[ebp], cl
	mov	edx, DWORD PTR _len$[ebp]
	sar	edx, 16					; 00000010H
	mov	BYTE PTR _lenbuf$[ebp+1], dl
	mov	eax, DWORD PTR _len$[ebp]
	sar	eax, 8
	mov	BYTE PTR _lenbuf$[ebp+2], al
	mov	cl, BYTE PTR _len$[ebp]
	mov	BYTE PTR _lenbuf$[ebp+3], cl
; Line 32
	push	4
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
$LN2@sha512_mpi:
; Line 33
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN5@sha512_mpi
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN6@sha512_mpi
$LN5@sha512_mpi:
	mov	DWORD PTR tv82[ebp], 0
$LN6@sha512_mpi:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN1@sha512_mpi
; Line 34
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	BYTE PTR _lenbuf$[ebp], al
; Line 35
	push	1
	lea	edx, DWORD PTR _lenbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SHA512_Bytes
	add	esp, 12					; 0000000cH
; Line 36
	jmp	SHORT $LN2@sha512_mpi
$LN1@sha512_mpi:
; Line 37
	push	4
	lea	ecx, DWORD PTR _lenbuf$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 38
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@sha512_mpi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@sha512_mpi:
	DD	1
	DD	$LN8@sha512_mpi
$LN8@sha512_mpi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@sha512_mpi
$LN7@sha512_mpi:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_sha512_mpint ENDP
_TEXT	ENDS
END
