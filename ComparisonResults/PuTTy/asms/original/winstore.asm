; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\windows\winstore.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_tried_shgetfolderpath DD 01H DUP (?)
_shell32_module DD 01H DUP (?)
$SG119903 DB	02H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_reg_jumplist_key DD FLAT:$SG119520
_reg_jumplist_value DD FLAT:$SG119522
_puttystr DD	FLAT:$SG119524
_hex	DB	'0123456789ABCDEF'
CONST	ENDS
_DATA	SEGMENT
$SG119520 DB	'Software\SimonTatham\PuTTY\Jumplist', 00H
$SG119522 DB	'Recent sessions', 00H
$SG119524 DB	'Software\SimonTatham\PuTTY\Sessions', 00H
$SG119580 DB	'Default Settings', 00H
	ORG $+3
$SG119587 DB	'Unable to create registry key', 0aH, 'HKEY_CURRENT_USER\'
	DB	'%s', 00H
	ORG $+1
$SG119590 DB	'Unable to create registry key', 0aH, 'HKEY_CURRENT_USER\'
	DB	'%s\%s', 00H
	ORG $+2
$SG119624 DB	'Default Settings', 00H
	ORG $+3
$SG119659 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG119660 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG119690 DB	'IsBold', 00H
	ORG $+1
$SG119694 DB	'CharSet', 00H
$SG119698 DB	'Height', 00H
	ORG $+1
$SG119710 DB	'IsBold', 00H
	ORG $+1
$SG119712 DB	'CharSet', 00H
$SG119714 DB	'Height', 00H
	ORG $+1
$SG119793 DB	'@', 00H
	ORG $+2
$SG119794 DB	'%d:', 00H
$SG119818 DB	'Software\SimonTatham\PuTTY\SshHostKeys', 00H
	ORG $+1
$SG119823 DB	'rsa', 00H
$SG119825 DB	':', 00H
	ORG $+2
$SG119840 DB	'/', 00H
	ORG $+2
$SG119872 DB	'Software\SimonTatham\PuTTY\SshHostKeys', 00H
	ORG $+1
$SG119887 DB	'Unable to delete ''%s'': %s', 00H
	ORG $+2
$SG119908 DB	'Software\SimonTatham\PuTTY', 00H
	ORG $+1
$SG119910 DB	'RandSeedFile', 00H
	ORG $+3
$SG119915 DB	'shell32.dll', 00H
$SG119918 DB	'SHGetFolderPathA', 00H
	ORG $+3
$SG119924 DB	'\PUTTY.RND', 00H
	ORG $+1
$SG119930 DB	'\PUTTY.RND', 00H
	ORG $+1
$SG119934 DB	'HOMEDRIVE', 00H
	ORG $+2
$SG119935 DB	'HOMEPATH', 00H
	ORG $+3
$SG119937 DB	'\PUTTY.RND', 00H
	ORG $+1
$SG119939 DB	'\PUTTY.RND', 00H
	ORG $+1
$SG120066 DB	'Software\SimonTatham\PuTTY', 00H
	ORG $+1
$SG120071 DB	'Software\SimonTatham', 00H
	ORG $+3
$SG120072 DB	'PuTTY', 00H
	ORG $+2
$SG120078 DB	'Software', 00H
	ORG $+3
$SG120079 DB	'SimonTatham', 00H
_DATA	ENDS
PUBLIC	_open_settings_w
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	_dupprintf:PROC
EXTRN	_safefree:PROC
EXTRN	__imp__RegCreateKeyA@12:PROC
EXTRN	_safemalloc:PROC
EXTRN	_strlen:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\windows\winstore.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = -32						; size = 4
_ret$ = -28						; size = 4
_sesskey$ = -20						; size = 4
_subkey1$ = -8						; size = 4
_sessionname$ = 8					; size = 4
_errmsg$ = 12						; size = 4
_open_settings_w PROC
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 83
	mov	eax, DWORD PTR _errmsg$[ebp]
	mov	DWORD PTR [eax], 0
; Line 85
	cmp	DWORD PTR _sessionname$[ebp], 0
	je	SHORT $LN3@open_setti
	mov	ecx, DWORD PTR _sessionname$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN4@open_setti
$LN3@open_setti:
; Line 86
	mov	DWORD PTR _sessionname$[ebp], OFFSET $SG119580
$LN4@open_setti:
; Line 88
	push	1
	mov	eax, DWORD PTR _sessionname$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	imul	eax, 3
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 89
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sessionname$[ebp]
	push	edx
	call	_mungestr
	add	esp, 8
; Line 91
	mov	esi, esp
	lea	eax, DWORD PTR _subkey1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _puttystr
	push	ecx
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegCreateKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 92
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN2@open_setti
; Line 93
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 95
	mov	eax, DWORD PTR _puttystr
	push	eax
	push	OFFSET $SG119587
	call	_dupprintf
	add	esp, 8
	mov	ecx, DWORD PTR _errmsg$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 96
	xor	eax, eax
	jmp	SHORT $LN5@open_setti
$LN2@open_setti:
; Line 98
	mov	esi, esp
	lea	edx, DWORD PTR _sesskey$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subkey1$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCreateKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 99
	mov	esi, esp
	mov	edx, DWORD PTR _subkey1$[ebp]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 100
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@open_setti
; Line 102
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _puttystr
	push	ecx
	push	OFFSET $SG119590
	call	_dupprintf
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _errmsg$[ebp]
	mov	DWORD PTR [edx], eax
; Line 103
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 104
	xor	eax, eax
	jmp	SHORT $LN5@open_setti
$LN1@open_setti:
; Line 106
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 107
	mov	eax, DWORD PTR _sesskey$[ebp]
$LN5@open_setti:
; Line 108
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@open_setti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@open_setti:
	DD	2
	DD	$LN9@open_setti
$LN9@open_setti:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@open_setti
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@open_setti
$LN8@open_setti:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN7@open_setti:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
_open_settings_w ENDP
; Function compile flags: /Odtp /RTCsu
_candot$ = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_mungestr PROC
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 34
	mov	DWORD PTR _candot$[ebp], 0
$LN5@mungestr:
; Line 36
	mov	eax, DWORD PTR _in$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN4@mungestr
; Line 39
	mov	edx, DWORD PTR _in$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN2@mungestr
	mov	ecx, DWORD PTR _in$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 92					; 0000005cH
	je	SHORT $LN2@mungestr
	mov	eax, DWORD PTR _in$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN2@mungestr
	mov	edx, DWORD PTR _in$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN2@mungestr
	mov	ecx, DWORD PTR _in$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 37					; 00000025H
	je	SHORT $LN2@mungestr
	mov	eax, DWORD PTR _in$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LN2@mungestr
	mov	edx, DWORD PTR _in$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN2@mungestr
	mov	ecx, DWORD PTR _in$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN3@mungestr
	cmp	DWORD PTR _candot$[ebp], 0
	jne	SHORT $LN3@mungestr
$LN2@mungestr:
; Line 40
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 41
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	sar	eax, 4
	mov	ecx, DWORD PTR _out$[ebp]
	mov	dl, BYTE PTR _hex[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
; Line 42
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _out$[ebp]
	mov	cl, BYTE PTR _hex[edx]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx
; Line 43
	jmp	SHORT $LN1@mungestr
$LN3@mungestr:
; Line 44
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
$LN1@mungestr:
; Line 45
	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$[ebp], ecx
; Line 46
	mov	DWORD PTR _candot$[ebp], 1
; Line 47
	jmp	$LN5@mungestr
$LN4@mungestr:
; Line 48
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 0
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	0
_mungestr ENDP
_TEXT	ENDS
PUBLIC	_write_setting_s
EXTRN	__imp__RegSetValueExA@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_value$ = 16						; size = 4
_write_setting_s PROC
; Line 111
	push	ebp
	mov	ebp, esp
	push	esi
; Line 112
	cmp	DWORD PTR _handle$[ebp], 0
	je	SHORT $LN2@write_sett
; Line 114
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@write_sett:
; Line 115
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_write_setting_s ENDP
_TEXT	ENDS
PUBLIC	_write_setting_i
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_value$ = 16						; size = 4
_write_setting_i PROC
; Line 118
	push	ebp
	mov	ebp, esp
	push	esi
; Line 119
	cmp	DWORD PTR _handle$[ebp], 0
	je	SHORT $LN2@write_sett@2
; Line 121
	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	push	4
	push	0
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@write_sett@2:
; Line 122
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_write_setting_i ENDP
_TEXT	ENDS
PUBLIC	_close_settings_w
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_close_settings_w PROC
; Line 125
	push	ebp
	mov	ebp, esp
	push	esi
; Line 126
	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 127
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_close_settings_w ENDP
_TEXT	ENDS
PUBLIC	_open_settings_r
EXTRN	__imp__RegOpenKeyA@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -28						; size = 4
_sesskey$ = -20						; size = 4
_subkey1$ = -8						; size = 4
_sessionname$ = 8					; size = 4
_open_settings_r PROC
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 134
	cmp	DWORD PTR _sessionname$[ebp], 0
	je	SHORT $LN4@open_setti@2
	mov	eax, DWORD PTR _sessionname$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@open_setti@2
$LN4@open_setti@2:
; Line 135
	mov	DWORD PTR _sessionname$[ebp], OFFSET $SG119624
$LN5@open_setti@2:
; Line 137
	push	1
	mov	edx, DWORD PTR _sessionname$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	imul	eax, 3
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 138
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sessionname$[ebp]
	push	ecx
	call	_mungestr
	add	esp, 8
; Line 140
	mov	esi, esp
	lea	edx, DWORD PTR _subkey1$[ebp]
	push	edx
	mov	eax, DWORD PTR _puttystr
	push	eax
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@open_setti@2
; Line 141
	mov	DWORD PTR _sesskey$[ebp], 0
; Line 142
	jmp	SHORT $LN2@open_setti@2
$LN3@open_setti@2:
; Line 143
	mov	esi, esp
	lea	ecx, DWORD PTR _sesskey$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _subkey1$[ebp]
	push	eax
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@open_setti@2
; Line 144
	mov	DWORD PTR _sesskey$[ebp], 0
$LN1@open_setti@2:
; Line 146
	mov	esi, esp
	mov	ecx, DWORD PTR _subkey1$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@open_setti@2:
; Line 149
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 151
	mov	eax, DWORD PTR _sesskey$[ebp]
; Line 152
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@open_setti@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@open_setti@2:
	DD	2
	DD	$LN10@open_setti@2
$LN10@open_setti@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@open_setti@2
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@open_setti@2
$LN9@open_setti@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN8@open_setti@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
_open_settings_r ENDP
_TEXT	ENDS
PUBLIC	_read_setting_s
EXTRN	__wassert:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -32						; size = 4
_size$ = -24						; size = 4
_allocsize$ = -16					; size = 4
_type$ = -8						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_read_setting_s PROC
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 159
	cmp	DWORD PTR _handle$[ebp], 0
	jne	SHORT $LN5@read_setti
; Line 160
	xor	eax, eax
	jmp	$LN6@read_setti
$LN5@read_setti:
; Line 165
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@read_setti
	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN4@read_setti
$LN3@read_setti:
; Line 166
	xor	eax, eax
	jmp	$LN6@read_setti
$LN4@read_setti:
; Line 168
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	mov	DWORD PTR _allocsize$[ebp], ecx
; Line 169
	push	1
	mov	edx, DWORD PTR _allocsize$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 172
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	lea	edx, DWORD PTR _type$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@read_setti
	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN2@read_setti
$LN1@read_setti:
; Line 173
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 174
	xor	eax, eax
	jmp	SHORT $LN6@read_setti
$LN2@read_setti:
; Line 176
	mov	eax, DWORD PTR _size$[ebp]
	cmp	eax, DWORD PTR _allocsize$[ebp]
	jb	SHORT $LN8@read_setti
	push	176					; 000000b0H
	push	OFFSET $SG119659
	push	OFFSET $SG119660
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@read_setti:
; Line 177
	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [edx], 0
; Line 180
	mov	eax, DWORD PTR _ret$[ebp]
$LN6@read_setti:
; Line 181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@read_setti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@read_setti:
	DD	2
	DD	$LN11@read_setti
$LN11@read_setti:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@read_setti
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@read_setti
$LN10@read_setti:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN9@read_setti:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_read_setting_s ENDP
_TEXT	ENDS
PUBLIC	_read_setting_i
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -32						; size = 4
_val$ = -20						; size = 4
_type$ = -8						; size = 4
_handle$ = 8						; size = 4
_key$ = 12						; size = 4
_defvalue$ = 16						; size = 4
_read_setting_i PROC
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 186
	mov	DWORD PTR _size$[ebp], 4
; Line 191
	cmp	DWORD PTR _handle$[ebp], 0
	je	SHORT $LN2@read_setti@2
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _val$[ebp]
	push	ecx
	lea	edx, DWORD PTR _type$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@read_setti@2
	cmp	DWORD PTR _size$[ebp], 4
	jne	SHORT $LN2@read_setti@2
	cmp	DWORD PTR _type$[ebp], 4
	je	SHORT $LN3@read_setti@2
$LN2@read_setti@2:
; Line 192
	mov	eax, DWORD PTR _defvalue$[ebp]
	jmp	SHORT $LN4@read_setti@2
; Line 193
	jmp	SHORT $LN4@read_setti@2
$LN3@read_setti@2:
; Line 194
	mov	eax, DWORD PTR _val$[ebp]
$LN4@read_setti@2:
; Line 195
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@read_setti@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@read_setti@2:
	DD	3
	DD	$LN9@read_setti@2
$LN9@read_setti@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@read_setti@2
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@read_setti@2
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@read_setti@2
$LN8@read_setti@2:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN7@read_setti@2:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN6@read_setti@2:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_read_setting_i ENDP
_TEXT	ENDS
PUBLIC	_read_setting_fontspec
EXTRN	_fontspec_new:PROC
EXTRN	_dupcat:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_charset$ = -24						; size = 4
_height$ = -20						; size = 4
_isbold$ = -16						; size = 4
_ret$ = -12						; size = 4
_fontname$ = -8						; size = 4
_settingname$ = -4					; size = 4
_handle$ = 8						; size = 4
_name$ = 12						; size = 4
_read_setting_fontspec PROC
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 204
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_read_setting_s
	add	esp, 8
	mov	DWORD PTR _fontname$[ebp], eax
; Line 205
	cmp	DWORD PTR _fontname$[ebp], 0
	jne	SHORT $LN4@read_setti@3
; Line 206
	xor	eax, eax
	jmp	$LN5@read_setti@3
$LN4@read_setti@3:
; Line 208
	push	0
	push	OFFSET $SG119690
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_dupcat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _settingname$[ebp], eax
; Line 209
	push	-1
	mov	eax, DWORD PTR _settingname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_read_setting_i
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _isbold$[ebp], eax
; Line 210
	mov	edx, DWORD PTR _settingname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 211
	cmp	DWORD PTR _isbold$[ebp], -1
	jne	SHORT $LN3@read_setti@3
; Line 212
	mov	eax, DWORD PTR _fontname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 213
	xor	eax, eax
	jmp	$LN5@read_setti@3
$LN3@read_setti@3:
; Line 216
	push	0
	push	OFFSET $SG119694
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_dupcat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _settingname$[ebp], eax
; Line 217
	push	-1
	mov	edx, DWORD PTR _settingname$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_read_setting_i
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _charset$[ebp], eax
; Line 218
	mov	ecx, DWORD PTR _settingname$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 219
	cmp	DWORD PTR _charset$[ebp], -1
	jne	SHORT $LN2@read_setti@3
; Line 220
	mov	edx, DWORD PTR _fontname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 221
	xor	eax, eax
	jmp	SHORT $LN5@read_setti@3
$LN2@read_setti@3:
; Line 224
	push	0
	push	OFFSET $SG119698
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_dupcat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _settingname$[ebp], eax
; Line 225
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _settingname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_read_setting_i
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _height$[ebp], eax
; Line 226
	mov	eax, DWORD PTR _settingname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 227
	cmp	DWORD PTR _height$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN1@read_setti@3
; Line 228
	mov	ecx, DWORD PTR _fontname$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 229
	xor	eax, eax
	jmp	SHORT $LN5@read_setti@3
$LN1@read_setti@3:
; Line 232
	mov	edx, DWORD PTR _charset$[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _isbold$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fontname$[ebp]
	push	edx
	call	_fontspec_new
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
; Line 233
	mov	eax, DWORD PTR _fontname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 234
	mov	eax, DWORD PTR _ret$[ebp]
$LN5@read_setti@3:
; Line 235
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_read_setting_fontspec ENDP
_TEXT	ENDS
PUBLIC	_write_setting_fontspec
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_settingname$ = -4					; size = 4
_handle$ = 8						; size = 4
_name$ = 12						; size = 4
_font$ = 16						; size = 4
_write_setting_fontspec PROC
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 241
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_write_setting_s
	add	esp, 12					; 0000000cH
; Line 242
	push	0
	push	OFFSET $SG119710
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_dupcat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _settingname$[ebp], eax
; Line 243
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _settingname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_write_setting_i
	add	esp, 12					; 0000000cH
; Line 244
	mov	eax, DWORD PTR _settingname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 245
	push	0
	push	OFFSET $SG119712
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_dupcat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _settingname$[ebp], eax
; Line 246
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _settingname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_write_setting_i
	add	esp, 12					; 0000000cH
; Line 247
	mov	eax, DWORD PTR _settingname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 248
	push	0
	push	OFFSET $SG119714
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_dupcat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _settingname$[ebp], eax
; Line 249
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _settingname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _handle$[ebp]
	push	edx
	call	_write_setting_i
	add	esp, 12					; 0000000cH
; Line 250
	mov	eax, DWORD PTR _settingname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 251
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_write_setting_fontspec ENDP
_TEXT	ENDS
PUBLIC	_read_setting_filename
EXTRN	_filename_from_str:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$119722 = -8					; size = 4
_tmp$ = -4						; size = 4
_handle$ = 8						; size = 4
_name$ = 12						; size = 4
_read_setting_filename PROC
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 255
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_read_setting_s
	add	esp, 8
	mov	DWORD PTR _tmp$[ebp], eax
; Line 256
	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN2@read_setti@4
; Line 257
	mov	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_filename_from_str
	add	esp, 4
	mov	DWORD PTR _ret$119722[ebp], eax
; Line 258
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 259
	mov	eax, DWORD PTR _ret$119722[ebp]
	jmp	SHORT $LN3@read_setti@4
; Line 260
	jmp	SHORT $LN3@read_setti@4
$LN2@read_setti@4:
; Line 261
	xor	eax, eax
$LN3@read_setti@4:
; Line 262
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_read_setting_filename ENDP
_TEXT	ENDS
PUBLIC	_write_setting_filename
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_name$ = 12						; size = 4
_result$ = 16						; size = 4
_write_setting_filename PROC
; Line 265
	push	ebp
	mov	ebp, esp
; Line 266
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_write_setting_s
	add	esp, 12					; 0000000cH
; Line 267
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_write_setting_filename ENDP
_TEXT	ENDS
PUBLIC	_close_settings_r
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_close_settings_r PROC
; Line 270
	push	ebp
	mov	ebp, esp
	push	esi
; Line 271
	mov	esi, esp
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 272
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_close_settings_r ENDP
_TEXT	ENDS
PUBLIC	_del_settings
EXTRN	_remove_session_from_jumplist:PROC
EXTRN	__imp__RegDeleteKeyA@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -16						; size = 4
_subkey1$ = -8						; size = 4
_sessionname$ = 8					; size = 4
_del_settings PROC
; Line 275
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 279
	mov	esi, esp
	lea	eax, DWORD PTR _subkey1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _puttystr
	push	ecx
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@del_settin
; Line 280
	jmp	SHORT $LN2@del_settin
$LN1@del_settin:
; Line 282
	push	1
	mov	edx, DWORD PTR _sessionname$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	imul	eax, 3
	add	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 283
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sessionname$[ebp]
	push	ecx
	call	_mungestr
	add	esp, 8
; Line 284
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _subkey1$[ebp]
	push	eax
	call	DWORD PTR __imp__RegDeleteKeyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 285
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 287
	mov	esi, esp
	mov	edx, DWORD PTR _subkey1$[ebp]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 289
	mov	eax, DWORD PTR _sessionname$[ebp]
	push	eax
	call	_remove_session_from_jumplist
	add	esp, 4
$LN2@del_settin:
; Line 290
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@del_settin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@del_settin:
	DD	1
	DD	$LN5@del_settin
$LN5@del_settin:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@del_settin
$LN4@del_settin:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
_del_settings ENDP
_TEXT	ENDS
PUBLIC	_enum_settings_start
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_key$ = -12						; size = 4
_ret$ = -4						; size = 4
_enum_settings_start PROC
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 302
	mov	esi, esp
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _puttystr
	push	ecx
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@enum_setti
; Line 303
	xor	eax, eax
	jmp	SHORT $LN3@enum_setti
$LN2@enum_setti:
; Line 305
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 306
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@enum_setti
; Line 307
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR [edx], eax
; Line 308
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN1@enum_setti:
; Line 311
	mov	eax, DWORD PTR _ret$[ebp]
$LN3@enum_setti:
; Line 312
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@enum_setti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@enum_setti:
	DD	1
	DD	$LN6@enum_setti
$LN6@enum_setti:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@enum_setti
$LN5@enum_setti:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_enum_settings_start ENDP
_TEXT	ENDS
PUBLIC	_enum_settings_next
EXTRN	__imp__RegEnumKeyA@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -12						; size = 4
_otherbuf$ = -8						; size = 4
_e$ = -4						; size = 4
_handle$ = 8						; size = 4
_buffer$ = 12						; size = 4
_buflen$ = 16						; size = 4
_enum_settings_next PROC
; Line 315
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 316
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _e$[ebp], eax
; Line 318
	push	1
	mov	ecx, DWORD PTR _buflen$[ebp]
	imul	ecx, 3
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _otherbuf$[ebp], eax
; Line 319
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _buflen$[ebp]
	imul	ecx, 3
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _otherbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__RegEnumKeyA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@enum_setti@2
; Line 320
	mov	eax, DWORD PTR _buflen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _otherbuf$[ebp]
	push	edx
	call	_unmungestr
	add	esp, 12					; 0000000cH
; Line 321
	mov	eax, DWORD PTR _otherbuf$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 322
	mov	eax, DWORD PTR _buffer$[ebp]
	jmp	SHORT $LN3@enum_setti@2
; Line 323
	jmp	SHORT $LN3@enum_setti@2
$LN2@enum_setti@2:
; Line 324
	mov	ecx, DWORD PTR _otherbuf$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 325
	xor	eax, eax
$LN3@enum_setti@2:
; Line 327
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_enum_settings_next ENDP
; Function compile flags: /Odtp /RTCsu
_j$119564 = -8						; size = 4
_i$119563 = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_outlen$ = 16						; size = 4
_unmungestr PROC
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN6@unmungestr:
; Line 54
	mov	eax, DWORD PTR _in$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN5@unmungestr
; Line 55
	mov	edx, DWORD PTR _in$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 37					; 00000025H
	jne	$LN4@unmungestr
	mov	ecx, DWORD PTR _in$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	je	$LN4@unmungestr
	mov	eax, DWORD PTR _in$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN4@unmungestr
; Line 58
	mov	edx, DWORD PTR _in$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _i$119563[ebp], eax
; Line 59
	xor	ecx, ecx
	cmp	DWORD PTR _i$119563[ebp], 9
	setle	cl
	sub	ecx, 1
	and	ecx, 7
	mov	edx, DWORD PTR _i$119563[ebp]
	sub	edx, ecx
	mov	DWORD PTR _i$119563[ebp], edx
; Line 60
	mov	eax, DWORD PTR _in$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _j$119564[ebp], ecx
; Line 61
	xor	edx, edx
	cmp	DWORD PTR _j$119564[ebp], 9
	setle	dl
	sub	edx, 1
	and	edx, 7
	mov	eax, DWORD PTR _j$119564[ebp]
	sub	eax, edx
	mov	DWORD PTR _j$119564[ebp], eax
; Line 63
	mov	ecx, DWORD PTR _i$119563[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _j$119564[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
; Line 64
	mov	ecx, DWORD PTR _outlen$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _outlen$[ebp], ecx
	jne	SHORT $LN3@unmungestr
; Line 65
	jmp	SHORT $LN7@unmungestr
$LN3@unmungestr:
; Line 66
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 3
	mov	DWORD PTR _in$[ebp], edx
; Line 67
	jmp	SHORT $LN2@unmungestr
$LN4@unmungestr:
; Line 68
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$[ebp], ecx
; Line 69
	mov	edx, DWORD PTR _outlen$[ebp]
	sub	edx, 1
	mov	DWORD PTR _outlen$[ebp], edx
	jne	SHORT $LN2@unmungestr
; Line 70
	jmp	SHORT $LN7@unmungestr
$LN2@unmungestr:
; Line 72
	jmp	$LN6@unmungestr
$LN5@unmungestr:
; Line 73
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 0
$LN7@unmungestr:
; Line 75
	mov	esp, ebp
	pop	ebp
	ret	0
_unmungestr ENDP
_TEXT	ENDS
PUBLIC	_enum_settings_finish
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_e$ = -4						; size = 4
_handle$ = 8						; size = 4
_enum_settings_finish PROC
; Line 330
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 331
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _e$[ebp], eax
; Line 332
	mov	esi, esp
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 333
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 334
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_enum_settings_finish ENDP
_TEXT	ENDS
PUBLIC	_verify_host_key
EXTRN	_strcspn:PROC
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nwords$119839 = -88					; size = 4
_ndigits$119838 = -84					; size = 4
_j$119834 = -80						; size = 4
_i$119833 = -76						; size = 4
_q$119832 = -72						; size = 4
_p$119831 = -68						; size = 4
_oldstyle$119826 = -64					; size = 4
_justhost$119824 = -60					; size = 4
_compare$ = -56						; size = 4
_ret$ = -52						; size = 4
_type$ = -44						; size = 4
_readlen$ = -32						; size = 4
_rkey$ = -20						; size = 4
_len$ = -12						; size = 4
_regname$ = -8						; size = 4
_otherstr$ = -4						; size = 4
_hostname$ = 8						; size = 4
_port$ = 12						; size = 4
_keytype$ = 16						; size = 4
_key$ = 20						; size = 4
_verify_host_key PROC
; Line 349
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 357
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 363
	push	1
	mov	ecx, DWORD PTR _hostname$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _keytype$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	esi, eax
	imul	esi, 3
	add	esi, 15					; 0000000fH
	push	esi
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _regname$[ebp], eax
; Line 365
	mov	eax, DWORD PTR _keytype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _port$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hostname$[ebp]
	push	edx
	mov	eax, DWORD PTR _regname$[ebp]
	push	eax
	call	_hostkey_regname
	add	esp, 16					; 00000010H
; Line 368
	mov	esi, esp
	lea	ecx, DWORD PTR _rkey$[ebp]
	push	ecx
	push	OFFSET $SG119818
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN19@verify_hos
; Line 369
	mov	edx, DWORD PTR _regname$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 370
	mov	eax, 1
	jmp	$LN20@verify_hos
$LN19@verify_hos:
; Line 373
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _readlen$[ebp], eax
; Line 374
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _otherstr$[ebp], eax
; Line 375
	mov	esi, esp
	lea	edx, DWORD PTR _readlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _otherstr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _regname$[ebp]
	push	edx
	mov	eax, DWORD PTR _rkey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 378
	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN18@verify_hos
	cmp	DWORD PTR _ret$[ebp], 234		; 000000eaH
	je	$LN18@verify_hos
	push	OFFSET $SG119823
	mov	ecx, DWORD PTR _keytype$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN18@verify_hos
; Line 384
	push	OFFSET $SG119825
	mov	edx, DWORD PTR _regname$[ebp]
	push	edx
	call	_strcspn
	add	esp, 8
	mov	ecx, DWORD PTR _regname$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _justhost$119824[ebp], edx
; Line 385
	push	1
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 10					; 0000000aH
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _oldstyle$119826[ebp], eax
; Line 386
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _readlen$[ebp], ecx
; Line 388
	mov	esi, esp
	lea	edx, DWORD PTR _readlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _oldstyle$119826[ebp]
	push	eax
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _justhost$119824[ebp]
	push	edx
	mov	eax, DWORD PTR _rkey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 390
	cmp	DWORD PTR _ret$[ebp], 0
	jne	$LN17@verify_hos
	cmp	DWORD PTR _type$[ebp], 1
	jne	$LN17@verify_hos
; Line 403
	mov	ecx, DWORD PTR _otherstr$[ebp]
	mov	DWORD PTR _p$119831[ebp], ecx
; Line 404
	mov	edx, DWORD PTR _oldstyle$119826[ebp]
	mov	DWORD PTR _q$119832[ebp], edx
; Line 407
	mov	DWORD PTR _i$119833[ebp], 0
	jmp	SHORT $LN16@verify_hos
$LN15@verify_hos:
	mov	eax, DWORD PTR _i$119833[ebp]
	add	eax, 1
	mov	DWORD PTR _i$119833[ebp], eax
$LN16@verify_hos:
	cmp	DWORD PTR _i$119833[ebp], 2
	jge	$LN14@verify_hos
; Line 409
	mov	ecx, DWORD PTR _p$119831[ebp]
	mov	BYTE PTR [ecx], 48			; 00000030H
	mov	edx, DWORD PTR _p$119831[ebp]
	add	edx, 1
	mov	DWORD PTR _p$119831[ebp], edx
; Line 410
	mov	eax, DWORD PTR _p$119831[ebp]
	mov	BYTE PTR [eax], 120			; 00000078H
	mov	ecx, DWORD PTR _p$119831[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$119831[ebp], ecx
; Line 411
	push	OFFSET $SG119840
	mov	edx, DWORD PTR _q$119832[ebp]
	push	edx
	call	_strcspn
	add	esp, 8
	mov	DWORD PTR _ndigits$119838[ebp], eax
; Line 412
	mov	eax, DWORD PTR _ndigits$119838[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _nwords$119839[ebp], eax
$LN13@verify_hos:
; Line 414
	mov	eax, DWORD PTR _ndigits$119838[ebp]
	sub	eax, 1
	xor	eax, 3
	mov	ecx, DWORD PTR _q$119832[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN12@verify_hos
	cmp	DWORD PTR _ndigits$119838[ebp], 1
	jle	SHORT $LN12@verify_hos
; Line 415
	mov	eax, DWORD PTR _ndigits$119838[ebp]
	sub	eax, 1
	mov	DWORD PTR _ndigits$119838[ebp], eax
	jmp	SHORT $LN13@verify_hos
$LN12@verify_hos:
; Line 417
	mov	DWORD PTR _j$119834[ebp], 0
	jmp	SHORT $LN11@verify_hos
$LN10@verify_hos:
	mov	ecx, DWORD PTR _j$119834[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$119834[ebp], ecx
$LN11@verify_hos:
	mov	edx, DWORD PTR _j$119834[ebp]
	cmp	edx, DWORD PTR _ndigits$119838[ebp]
	jge	SHORT $LN9@verify_hos
; Line 418
	mov	eax, DWORD PTR _j$119834[ebp]
	xor	eax, 3
	mov	ecx, DWORD PTR _ndigits$119838[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR _j$119834[ebp]
	mov	edx, DWORD PTR _p$119831[ebp]
	mov	esi, DWORD PTR _q$119832[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [edx+ecx], al
	jmp	SHORT $LN10@verify_hos
$LN9@verify_hos:
; Line 419
	mov	ecx, DWORD PTR _p$119831[ebp]
	add	ecx, DWORD PTR _ndigits$119838[ebp]
	mov	DWORD PTR _p$119831[ebp], ecx
; Line 420
	mov	edx, DWORD PTR _nwords$119839[ebp]
	mov	eax, DWORD PTR _q$119832[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _q$119832[ebp], ecx
; Line 421
	mov	edx, DWORD PTR _q$119832[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN8@verify_hos
; Line 422
	mov	ecx, DWORD PTR _q$119832[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$119832[ebp], ecx
; Line 423
	mov	edx, DWORD PTR _p$119831[ebp]
	mov	BYTE PTR [edx], 44			; 0000002cH
	mov	eax, DWORD PTR _p$119831[ebp]
	add	eax, 1
	mov	DWORD PTR _p$119831[ebp], eax
$LN8@verify_hos:
; Line 425
	mov	ecx, DWORD PTR _p$119831[ebp]
	mov	BYTE PTR [ecx], 0
; Line 426
	jmp	$LN15@verify_hos
$LN14@verify_hos:
; Line 433
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _otherstr$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@verify_hos
; Line 435
	mov	ecx, DWORD PTR _otherstr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _otherstr$[ebp]
	push	edx
	push	1
	push	0
	mov	eax, DWORD PTR _regname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rkey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@verify_hos:
; Line 438
	mov	edx, DWORD PTR _oldstyle$119826[ebp]
	push	edx
	call	_safefree
	add	esp, 4
$LN18@verify_hos:
; Line 441
	mov	esi, esp
	mov	eax, DWORD PTR _rkey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 443
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _otherstr$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _compare$[ebp], eax
; Line 445
	mov	eax, DWORD PTR _otherstr$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 446
	mov	ecx, DWORD PTR _regname$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 449
	cmp	DWORD PTR _ret$[ebp], 234		; 000000eaH
	je	SHORT $LN5@verify_hos
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN6@verify_hos
	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN6@verify_hos
	cmp	DWORD PTR _compare$[ebp], 0
	je	SHORT $LN6@verify_hos
$LN5@verify_hos:
; Line 450
	mov	eax, 2
	jmp	SHORT $LN20@verify_hos
	jmp	SHORT $LN20@verify_hos
$LN6@verify_hos:
; Line 451
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@verify_hos
	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN3@verify_hos
$LN2@verify_hos:
; Line 452
	mov	eax, 1
	jmp	SHORT $LN20@verify_hos
; Line 453
	jmp	SHORT $LN20@verify_hos
$LN3@verify_hos:
; Line 454
	xor	eax, eax
$LN20@verify_hos:
; Line 455
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@verify_hos
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN26@verify_hos:
	DD	3
	DD	$LN25@verify_hos
$LN25@verify_hos:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@verify_hos
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN23@verify_hos
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN24@verify_hos
$LN24@verify_hos:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN23@verify_hos:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN22@verify_hos:
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_verify_host_key ENDP
_TEXT	ENDS
EXTRN	_sprintf:PROC
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -4						; size = 4
_buffer$ = 8						; size = 4
_hostname$ = 12						; size = 4
_port$ = 16						; size = 4
_keytype$ = 20						; size = 4
_hostkey_regname PROC
; Line 338
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 340
	mov	eax, DWORD PTR _keytype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 341
	push	OFFSET $SG119793
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 342
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 343
	mov	ecx, DWORD PTR _port$[ebp]
	push	ecx
	push	OFFSET $SG119794
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 344
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hostname$[ebp]
	push	ecx
	call	_mungestr
	add	esp, 8
; Line 345
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hostkey_regname ENDP
_TEXT	ENDS
PUBLIC	_store_host_key
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rkey$ = -12						; size = 4
_regname$ = -4						; size = 4
_hostname$ = 8						; size = 4
_port$ = 12						; size = 4
_keytype$ = 16						; size = 4
_key$ = 20						; size = 4
_store_host_key PROC
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 463
	push	1
	mov	eax, DWORD PTR _hostname$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _keytype$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	esi, eax
	imul	esi, 3
	add	esi, 15					; 0000000fH
	push	esi
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _regname$[ebp], eax
; Line 465
	mov	edx, DWORD PTR _keytype$[ebp]
	push	edx
	mov	eax, DWORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hostname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regname$[ebp]
	push	edx
	call	_hostkey_regname
	add	esp, 16					; 00000010H
; Line 468
	mov	esi, esp
	lea	eax, DWORD PTR _rkey$[ebp]
	push	eax
	push	OFFSET $SG119872
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegCreateKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@store_host
; Line 469
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	push	1
	push	0
	mov	eax, DWORD PTR _regname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rkey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 470
	mov	esi, esp
	mov	edx, DWORD PTR _rkey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@store_host:
; Line 473
	mov	eax, DWORD PTR _regname$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 474
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@store_host
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@store_host:
	DD	1
	DD	$LN5@store_host
$LN5@store_host:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@store_host
$LN4@store_host:
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_store_host_key ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_read_random_seed
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$119954 = -1048					; size = 4
_buf$119953 = -1036					; size = 1024
_seedf$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_consumer$ = 8						; size = 4
_read_random_seed PROC
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 1052				; 0000041cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1052]
	mov	ecx, 263				; 00000107H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 607
	push	1
	call	_access_random_seed
	add	esp, 4
	mov	DWORD PTR _seedf$[ebp], eax
; Line 609
	cmp	DWORD PTR _seedf$[ebp], -1
	je	SHORT $LN6@read_rando
$LN4@read_rando:
; Line 610
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@read_rando
; Line 614
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _len$119954[ebp]
	push	ecx
	push	1024					; 00000400H
	lea	edx, DWORD PTR _buf$119953[ebp]
	push	edx
	mov	eax, DWORD PTR _seedf$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@read_rando
	cmp	DWORD PTR _len$119954[ebp], 0
	je	SHORT $LN2@read_rando
; Line 615
	mov	esi, esp
	mov	ecx, DWORD PTR _len$119954[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$119953[ebp]
	push	edx
	call	DWORD PTR _consumer$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 616
	jmp	SHORT $LN1@read_rando
$LN2@read_rando:
; Line 617
	jmp	SHORT $LN3@read_rando
$LN1@read_rando:
; Line 618
	jmp	SHORT $LN4@read_rando
$LN3@read_rando:
; Line 619
	mov	esi, esp
	mov	eax, DWORD PTR _seedf$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@read_rando:
; Line 621
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@read_rando
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1052				; 0000041cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@read_rando:
	DD	2
	DD	$LN10@read_rando
$LN10@read_rando:
	DD	-1036					; fffffbf4H
	DD	1024					; 00000400H
	DD	$LN8@read_rando
	DD	-1048					; fffffbe8H
	DD	4
	DD	$LN9@read_rando
$LN9@read_rando:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN8@read_rando:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_read_random_seed ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetWindowsDirectoryA@8:PROC
EXTRN	__imp__GetEnvironmentVariableA@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	_load_system32_dll:PROC
EXTRN	_memset:PROC
_BSS	SEGMENT
	ALIGN	4

_p_SHGetFolderPathA DD 01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
tv133 = -608						; size = 4
_ret$119933 = -604					; size = 4
_len$119932 = -600					; size = 4
_ret$119909 = -596					; size = 4
_seedpath$ = -588					; size = 530
_rethandle$ = -48					; size = 4
_size$ = -36						; size = 4
_type$ = -24						; size = 4
_rkey$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_action$ = 8						; size = 4
_access_random_seed PROC
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 608				; 00000260H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-608]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 508
	mov	ax, WORD PTR $SG119903
	mov	WORD PTR _seedpath$[ebp], ax
	push	528					; 00000210H
	push	0
	lea	ecx, DWORD PTR _seedpath$[ebp+2]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 525
	mov	DWORD PTR _size$[ebp], 530		; 00000212H
; Line 527
	mov	esi, esp
	lea	edx, DWORD PTR _rkey$[ebp]
	push	edx
	push	OFFSET $SG119908
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN13@access_ran
; Line 529
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _seedpath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _type$[ebp]
	push	edx
	push	0
	push	OFFSET $SG119910
	mov	eax, DWORD PTR _rkey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$119909[ebp], eax
; Line 530
	cmp	DWORD PTR _ret$119909[ebp], 0
	jne	SHORT $LN11@access_ran
	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN12@access_ran
$LN11@access_ran:
; Line 531
	mov	BYTE PTR _seedpath$[ebp], 0
$LN12@access_ran:
; Line 532
	mov	esi, esp
	mov	ecx, DWORD PTR _rkey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 534
	movsx	edx, BYTE PTR _seedpath$[ebp]
	test	edx, edx
	je	SHORT $LN13@access_ran
	lea	eax, DWORD PTR _rethandle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _action$[ebp]
	push	ecx
	lea	edx, DWORD PTR _seedpath$[ebp]
	push	edx
	call	_try_random_seed
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@access_ran
; Line 535
	mov	eax, DWORD PTR _rethandle$[ebp]
	jmp	$LN14@access_ran
$LN13@access_ran:
; Line 544
	cmp	DWORD PTR _tried_shgetfolderpath, 0
	jne	SHORT $LN9@access_ran
; Line 551
	push	OFFSET $SG119915
	call	_load_system32_dll
	add	esp, 4
	mov	DWORD PTR _shell32_module, eax
; Line 552
	cmp	DWORD PTR _shell32_module, 0
	je	SHORT $LN16@access_ran
	mov	esi, esp
	push	OFFSET $SG119918
	mov	eax, DWORD PTR _shell32_module
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN17@access_ran
$LN16@access_ran:
	mov	DWORD PTR tv133[ebp], 0
$LN17@access_ran:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _p_SHGetFolderPathA, ecx
; Line 553
	mov	DWORD PTR _tried_shgetfolderpath, 1
$LN9@access_ran:
; Line 555
	cmp	DWORD PTR _p_SHGetFolderPathA, 0
	je	$LN8@access_ran
; Line 557
	mov	esi, esp
	lea	edx, DWORD PTR _seedpath$[ebp]
	push	edx
	push	0
	push	0
	push	28					; 0000001cH
	push	0
	call	DWORD PTR _p_SHGetFolderPathA
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN7@access_ran
; Line 558
	push	OFFSET $SG119924
	lea	eax, DWORD PTR _seedpath$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 559
	lea	ecx, DWORD PTR _rethandle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _action$[ebp]
	push	edx
	lea	eax, DWORD PTR _seedpath$[ebp]
	push	eax
	call	_try_random_seed
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@access_ran
; Line 560
	mov	eax, DWORD PTR _rethandle$[ebp]
	jmp	$LN14@access_ran
$LN7@access_ran:
; Line 564
	mov	esi, esp
	lea	ecx, DWORD PTR _seedpath$[ebp]
	push	ecx
	push	0
	push	0
	push	26					; 0000001aH
	push	0
	call	DWORD PTR _p_SHGetFolderPathA
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN8@access_ran
; Line 565
	push	OFFSET $SG119930
	lea	edx, DWORD PTR _seedpath$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 566
	lea	eax, DWORD PTR _rethandle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _action$[ebp]
	push	ecx
	lea	edx, DWORD PTR _seedpath$[ebp]
	push	edx
	call	_try_random_seed
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@access_ran
; Line 567
	mov	eax, DWORD PTR _rethandle$[ebp]
	jmp	$LN14@access_ran
$LN8@access_ran:
; Line 580
	mov	esi, esp
	push	530					; 00000212H
	lea	eax, DWORD PTR _seedpath$[ebp]
	push	eax
	push	OFFSET $SG119934
	call	DWORD PTR __imp__GetEnvironmentVariableA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$119932[ebp], eax
; Line 583
	mov	ecx, 530				; 00000212H
	sub	ecx, DWORD PTR _len$119932[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _len$119932[ebp]
	lea	eax, DWORD PTR _seedpath$[ebp+edx]
	push	eax
	push	OFFSET $SG119935
	call	DWORD PTR __imp__GetEnvironmentVariableA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$119933[ebp], eax
; Line 584
	cmp	DWORD PTR _ret$119933[ebp], 0
	je	SHORT $LN3@access_ran
; Line 585
	push	OFFSET $SG119937
	lea	ecx, DWORD PTR _seedpath$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
; Line 586
	lea	edx, DWORD PTR _rethandle$[ebp]
	push	edx
	mov	eax, DWORD PTR _action$[ebp]
	push	eax
	lea	ecx, DWORD PTR _seedpath$[ebp]
	push	ecx
	call	_try_random_seed
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@access_ran
; Line 587
	mov	eax, DWORD PTR _rethandle$[ebp]
	jmp	SHORT $LN14@access_ran
$LN3@access_ran:
; Line 594
	mov	esi, esp
	push	530					; 00000212H
	lea	edx, DWORD PTR _seedpath$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowsDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 595
	push	OFFSET $SG119939
	lea	eax, DWORD PTR _seedpath$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 596
	lea	ecx, DWORD PTR _rethandle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _action$[ebp]
	push	edx
	lea	eax, DWORD PTR _seedpath$[ebp]
	push	eax
	call	_try_random_seed
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@access_ran
; Line 597
	mov	eax, DWORD PTR _rethandle$[ebp]
	jmp	SHORT $LN14@access_ran
$LN1@access_ran:
; Line 602
	or	eax, -1
$LN14@access_ran:
; Line 603
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@access_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 608				; 00000260H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@access_ran:
	DD	5
	DD	$LN23@access_ran
$LN23@access_ran:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@access_ran
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN19@access_ran
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@access_ran
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN21@access_ran
	DD	-588					; fffffdb4H
	DD	530					; 00000212H
	DD	$LN22@access_ran
$LN22@access_ran:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN21@access_ran:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN20@access_ran:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@access_ran:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN18@access_ran:
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_access_random_seed ENDP
_TEXT	ENDS
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	_nonfatal:PROC
EXTRN	_win_strerror:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__DeleteFileA@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_path$ = 8						; size = 4
_action$ = 12						; size = 4
_ret$ = 16						; size = 4
_try_random_seed PROC
; Line 481
	push	ebp
	mov	ebp, esp
	push	esi
; Line 482
	cmp	DWORD PTR _action$[ebp], 0
	jne	SHORT $LN2@try_random
; Line 483
	mov	esi, esp
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteFileA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@try_random
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN1@try_random
; Line 485
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_win_strerror
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	push	OFFSET $SG119887
	call	_nonfatal
	add	esp, 12					; 0000000cH
$LN1@try_random:
; Line 487
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], -1
; Line 488
	xor	eax, eax
	jmp	SHORT $LN3@try_random
$LN2@try_random:
; Line 498
	mov	esi, esp
	push	0
	xor	eax, eax
	cmp	DWORD PTR _action$[ebp], 2
	setne	al
	sub	eax, 1
	and	eax, 128				; 00000080H
	push	eax
	xor	ecx, ecx
	cmp	DWORD PTR _action$[ebp], 2
	setne	cl
	add	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _action$[ebp]
	sub	edx, 2
	neg	edx
	sbb	edx, edx
	and	edx, 3
	push	edx
	mov	eax, DWORD PTR _action$[ebp]
	sub	eax, 2
	neg	eax
	sbb	eax, eax
	and	eax, 1073741824				; 40000000H
	add	eax, 1073741824				; 40000000H
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateFileA@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax
; Line 500
	mov	eax, DWORD PTR _ret$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1
	setne	cl
	mov	eax, ecx
$LN3@try_random:
; Line 501
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_try_random_seed ENDP
_TEXT	ENDS
PUBLIC	_write_random_seed
EXTRN	__imp__WriteFile@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lenwritten$119967 = -12				; size = 4
_seedf$ = -4						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_write_random_seed PROC
; Line 624
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 625
	push	2
	call	_access_random_seed
	add	esp, 4
	mov	DWORD PTR _seedf$[ebp], eax
; Line 627
	cmp	DWORD PTR _seedf$[ebp], -1
	je	SHORT $LN2@write_rand
; Line 630
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _lenwritten$119967[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _seedf$[ebp]
	push	eax
	call	DWORD PTR __imp__WriteFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 631
	mov	esi, esp
	mov	ecx, DWORD PTR _seedf$[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@write_rand:
; Line 633
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@write_rand
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@write_rand:
	DD	1
	DD	$LN5@write_rand
$LN5@write_rand:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@write_rand
$LN4@write_rand:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_write_random_seed ENDP
_TEXT	ENDS
PUBLIC	_add_to_jumplist_registry
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_item$ = 8						; size = 4
_add_to_jumplist_registry PROC
; Line 774
	push	ebp
	mov	ebp, esp
; Line 775
	push	0
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	call	_transform_jumplist_registry
	add	esp, 12					; 0000000cH
; Line 776
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_add_to_jumplist_registry ENDP
_TEXT	ENDS
EXTRN	__imp__RegDeleteValueA@8:PROC
EXTRN	__imp__RegCreateKeyExA@36:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv163 = -68						; size = 4
_piterator_tmp$ = -64					; size = 4
_piterator_new$ = -60					; size = 4
_piterator_old$ = -56					; size = 4
_new_value$ = -52					; size = 4
_old_value$ = -48					; size = 4
_value_length$ = -40					; size = 4
_type$ = -28						; size = 4
_psettings_tmp$ = -20					; size = 4
_pjumplist_key$ = -12					; size = 4
_ret$ = -4						; size = 4
_add$ = 8						; size = 4
_rem$ = 12						; size = 4
_out$ = 16						; size = 4
_transform_jumplist_registry PROC
; Line 646
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 656
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _pjumplist_key$[ebp]
	push	eax
	push	0
	push	131103					; 0002001fH
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _reg_jumplist_key
	push	ecx
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegCreateKeyExA@36
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 657
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN25@transform_
; Line 658
	mov	eax, 2
	jmp	$LN26@transform_
$LN25@transform_:
; Line 662
	mov	DWORD PTR _value_length$[ebp], 200	; 000000c8H
; Line 663
	push	1
	mov	edx, DWORD PTR _value_length$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _old_value$[ebp], eax
; Line 665
	mov	esi, esp
	lea	eax, DWORD PTR _value_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _old_value$[ebp]
	push	ecx
	lea	edx, DWORD PTR _type$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _reg_jumplist_value
	push	eax
	mov	ecx, DWORD PTR _pjumplist_key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 669
	cmp	DWORD PTR _ret$[ebp], 234		; 000000eaH
	jne	SHORT $LN24@transform_
; Line 670
	mov	edx, DWORD PTR _old_value$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 671
	push	1
	mov	eax, DWORD PTR _value_length$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _old_value$[ebp], eax
; Line 673
	mov	esi, esp
	lea	ecx, DWORD PTR _value_length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _old_value$[ebp]
	push	edx
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _reg_jumplist_value
	push	ecx
	mov	edx, DWORD PTR _pjumplist_key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
$LN24@transform_:
; Line 676
	cmp	DWORD PTR _ret$[ebp], 2
	jne	SHORT $LN23@transform_
; Line 678
	mov	eax, DWORD PTR _old_value$[ebp]
	mov	BYTE PTR [eax], 0
; Line 679
	mov	ecx, DWORD PTR _old_value$[ebp]
	mov	BYTE PTR [ecx+1], 0
	jmp	$LN22@transform_
$LN23@transform_:
; Line 680
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN21@transform_
; Line 682
	mov	edx, DWORD PTR _old_value$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 683
	mov	esi, esp
	mov	eax, DWORD PTR _pjumplist_key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 684
	mov	eax, 3
	jmp	$LN26@transform_
	jmp	SHORT $LN22@transform_
$LN21@transform_:
; Line 685
	cmp	DWORD PTR _type$[ebp], 7
	je	SHORT $LN22@transform_
; Line 688
	mov	esi, esp
	mov	ecx, DWORD PTR _reg_jumplist_value
	push	ecx
	mov	edx, DWORD PTR _pjumplist_key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegDeleteValueA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 689
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN18@transform_
; Line 690
	mov	eax, DWORD PTR _old_value$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 691
	mov	esi, esp
	mov	ecx, DWORD PTR _pjumplist_key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 692
	mov	eax, 3
	jmp	$LN26@transform_
$LN18@transform_:
; Line 695
	mov	edx, DWORD PTR _old_value$[ebp]
	mov	BYTE PTR [edx], 0
; Line 696
	mov	eax, DWORD PTR _old_value$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN22@transform_:
; Line 701
	mov	ecx, DWORD PTR _old_value$[ebp]
	mov	DWORD PTR _piterator_tmp$[ebp], ecx
$LN17@transform_:
; Line 703
	mov	edx, DWORD PTR _piterator_tmp$[ebp]
	sub	edx, DWORD PTR _old_value$[ebp]
	mov	eax, DWORD PTR _value_length$[ebp]
	sub	eax, 1
	cmp	edx, eax
	jge	SHORT $LN16@transform_
	mov	ecx, DWORD PTR _piterator_tmp$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN15@transform_
	mov	eax, DWORD PTR _piterator_tmp$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN16@transform_
$LN15@transform_:
; Line 704
	mov	edx, DWORD PTR _piterator_tmp$[ebp]
	add	edx, 1
	mov	DWORD PTR _piterator_tmp$[ebp], edx
; Line 705
	jmp	SHORT $LN17@transform_
$LN16@transform_:
; Line 707
	mov	eax, DWORD PTR _piterator_tmp$[ebp]
	sub	eax, DWORD PTR _old_value$[ebp]
	mov	ecx, DWORD PTR _value_length$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jl	SHORT $LN14@transform_
; Line 709
	mov	edx, DWORD PTR _old_value$[ebp]
	mov	BYTE PTR [edx], 0
; Line 710
	mov	eax, DWORD PTR _old_value$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN14@transform_:
; Line 716
	cmp	DWORD PTR _add$[ebp], 0
	jne	SHORT $LN12@transform_
	cmp	DWORD PTR _rem$[ebp], 0
	je	$LN13@transform_
$LN12@transform_:
; Line 719
	cmp	DWORD PTR _add$[ebp], 0
	je	SHORT $LN28@transform_
	mov	ecx, DWORD PTR _add$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN29@transform_
$LN28@transform_:
	mov	DWORD PTR tv163[ebp], 0
$LN29@transform_:
	push	1
	mov	edx, DWORD PTR _value_length$[ebp]
	add	edx, DWORD PTR tv163[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _new_value$[ebp], eax
; Line 720
	mov	eax, DWORD PTR _new_value$[ebp]
	mov	DWORD PTR _piterator_new$[ebp], eax
; Line 721
	mov	ecx, DWORD PTR _old_value$[ebp]
	mov	DWORD PTR _piterator_old$[ebp], ecx
; Line 724
	cmp	DWORD PTR _add$[ebp], 0
	je	SHORT $LN10@transform_
; Line 725
	mov	edx, DWORD PTR _add$[ebp]
	push	edx
	mov	eax, DWORD PTR _piterator_new$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 726
	mov	ecx, DWORD PTR _piterator_new$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _piterator_new$[ebp]
	lea	eax, DWORD PTR [edx+eax+1]
	mov	DWORD PTR _piterator_new$[ebp], eax
$LN10@transform_:
; Line 730
	mov	ecx, DWORD PTR _piterator_old$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN9@transform_
; Line 731
	cmp	DWORD PTR _rem$[ebp], 0
	je	SHORT $LN7@transform_
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piterator_old$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@transform_
$LN7@transform_:
; Line 733
	mov	edx, DWORD PTR _piterator_old$[ebp]
	push	edx
	call	_open_settings_r
	add	esp, 4
	mov	DWORD PTR _psettings_tmp$[ebp], eax
; Line 734
	cmp	DWORD PTR _psettings_tmp$[ebp], 0
	je	SHORT $LN8@transform_
; Line 735
	mov	eax, DWORD PTR _psettings_tmp$[ebp]
	push	eax
	call	_close_settings_r
	add	esp, 4
; Line 736
	mov	ecx, DWORD PTR _piterator_old$[ebp]
	push	ecx
	mov	edx, DWORD PTR _piterator_new$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 737
	mov	eax, DWORD PTR _piterator_new$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _piterator_new$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _piterator_new$[ebp], edx
$LN8@transform_:
; Line 740
	mov	eax, DWORD PTR _piterator_old$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _piterator_old$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _piterator_old$[ebp], edx
; Line 741
	jmp	$LN10@transform_
$LN9@transform_:
; Line 742
	mov	eax, DWORD PTR _piterator_new$[ebp]
	mov	BYTE PTR [eax], 0
; Line 743
	mov	ecx, DWORD PTR _piterator_new$[ebp]
	add	ecx, 1
	mov	DWORD PTR _piterator_new$[ebp], ecx
; Line 747
	mov	edx, DWORD PTR _piterator_new$[ebp]
	sub	edx, DWORD PTR _new_value$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _new_value$[ebp]
	push	eax
	push	7
	push	0
	mov	ecx, DWORD PTR _reg_jumplist_value
	push	ecx
	mov	edx, DWORD PTR _pjumplist_key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 749
	mov	eax, DWORD PTR _old_value$[ebp]
	push	eax
	call	_safefree
	add	esp, 4
; Line 750
	mov	ecx, DWORD PTR _new_value$[ebp]
	mov	DWORD PTR _old_value$[ebp], ecx
; Line 751
	jmp	SHORT $LN5@transform_
$LN13@transform_:
; Line 752
	mov	DWORD PTR _ret$[ebp], 0
$LN5@transform_:
; Line 757
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN4@transform_
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN4@transform_
; Line 758
	mov	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _old_value$[ebp]
	mov	DWORD PTR [edx], eax
; Line 759
	jmp	SHORT $LN3@transform_
$LN4@transform_:
; Line 760
	mov	ecx, DWORD PTR _old_value$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN3@transform_:
; Line 763
	mov	esi, esp
	mov	edx, DWORD PTR _pjumplist_key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 765
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN2@transform_
; Line 766
	mov	eax, 4
	jmp	SHORT $LN26@transform_
; Line 767
	jmp	SHORT $LN26@transform_
$LN2@transform_:
; Line 768
	xor	eax, eax
$LN26@transform_:
; Line 770
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@transform_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN34@transform_:
	DD	3
	DD	$LN33@transform_
$LN33@transform_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN30@transform_
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN31@transform_
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN32@transform_
$LN32@transform_:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN31@transform_:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN30@transform_:
	DB	112					; 00000070H
	DB	106					; 0000006aH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_transform_jumplist_registry ENDP
_TEXT	ENDS
PUBLIC	_remove_from_jumplist_registry
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_item$ = 8						; size = 4
_remove_from_jumplist_registry PROC
; Line 780
	push	ebp
	mov	ebp, esp
; Line 781
	push	0
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	push	0
	call	_transform_jumplist_registry
	add	esp, 12					; 0000000cH
; Line 782
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_remove_from_jumplist_registry ENDP
_TEXT	ENDS
PUBLIC	_get_jumplist_registry_entries
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_list_value$ = -8					; size = 4
_get_jumplist_registry_entries PROC
; Line 787
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 790
	lea	eax, DWORD PTR _list_value$[ebp]
	push	eax
	push	0
	push	0
	call	_transform_jumplist_registry
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@get_jumpli
; Line 791
	push	1
	push	2
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _list_value$[ebp], eax
; Line 792
	mov	ecx, DWORD PTR _list_value$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 793
	mov	edx, DWORD PTR _list_value$[ebp]
	mov	BYTE PTR [edx+1], 0
$LN1@get_jumpli:
; Line 795
	mov	eax, DWORD PTR _list_value$[ebp]
; Line 796
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@get_jumpli
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@get_jumpli:
	DD	1
	DD	$LN5@get_jumpli
$LN5@get_jumpli:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@get_jumpli
$LN4@get_jumpli:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_get_jumplist_registry_entries ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_cleanup_all
EXTRN	_clear_jumplist:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = -288						; size = 261
_ret$ = -20						; size = 4
_key$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_cleanup_all PROC
; Line 818
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 827
	push	0
	call	_access_random_seed
	add	esp, 4
; Line 833
	call	_clear_jumplist
; Line 843
	mov	esi, esp
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	push	OFFSET $SG120066
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@cleanup_al
; Line 844
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_registry_recursive_remove
	add	esp, 4
; Line 845
	mov	esi, esp
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@cleanup_al:
; Line 853
	mov	esi, esp
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	push	OFFSET $SG120071
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN5@cleanup_al
; Line 854
	mov	esi, esp
	push	OFFSET $SG120072
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegDeleteKeyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 855
	mov	esi, esp
	push	261					; 00000105H
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegEnumKeyA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
; Line 856
	mov	esi, esp
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 862
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN5@cleanup_al
; Line 864
	mov	esi, esp
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	push	OFFSET $SG120078
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@cleanup_al
; Line 865
	mov	esi, esp
	push	OFFSET $SG120079
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegDeleteKeyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 866
	mov	esi, esp
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@cleanup_al:
; Line 873
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@cleanup_al
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@cleanup_al:
	DD	2
	DD	$LN9@cleanup_al
$LN9@cleanup_al:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@cleanup_al
	DD	-288					; fffffee0H
	DD	261					; 00000105H
	DD	$LN8@cleanup_al
$LN8@cleanup_al:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN7@cleanup_al:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_cleanup_all ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_subkey$ = -288						; size = 4
_name$ = -276						; size = 261
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_registry_recursive_remove PROC
; Line 802
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 807
	mov	DWORD PTR _i$[ebp], 0
$LN3@registry_r:
; Line 808
	mov	esi, esp
	push	261					; 00000105H
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegEnumKeyA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@registry_r
; Line 809
	mov	esi, esp
	lea	eax, DWORD PTR _subkey$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegOpenKeyA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@registry_r
; Line 810
	mov	eax, DWORD PTR _subkey$[ebp]
	push	eax
	call	_registry_recursive_remove
	add	esp, 4
; Line 811
	mov	esi, esp
	mov	ecx, DWORD PTR _subkey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@registry_r:
; Line 813
	mov	esi, esp
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__RegDeleteKeyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 814
	jmp	$LN3@registry_r
$LN4@registry_r:
; Line 815
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@registry_r
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@registry_r:
	DD	2
	DD	$LN8@registry_r
$LN8@registry_r:
	DD	-276					; fffffeecH
	DD	261					; 00000105H
	DD	$LN6@registry_r
	DD	-288					; fffffee0H
	DD	4
	DD	$LN7@registry_r
$LN7@registry_r:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN6@registry_r:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_registry_recursive_remove ENDP
_TEXT	ENDS
END
