; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshbn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_bnZero
PUBLIC	_bnOne
PUBLIC	_Zero
PUBLIC	_One
_BSS	SEGMENT
_bnZero	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_bnOne	DD	01H
	DD	01H
_Zero	DD	FLAT:_bnZero
_One	DD	FLAT:_bnOne
$SG7161	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG7162	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'I', 00H, 'N'
	DB	00H, 'T', 00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H
	DB	'/', 00H, ' ', 00H, 'B', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'U'
	DB	00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '_', 00H
	DB	'B', 00H, 'I', 00H, 'T', 00H, 'S', 00H, 00H, 00H
$SG7187	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7188	DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG7263	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7264	DB	'i', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG7365	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7366	DB	'w', 00H, 'o', 00H, 'r', 00H, 'd', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, '[', 00H, '0', 00H, ']', 00H, 00H, 00H
$SG7388	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7389	DB	'm', 00H, '0', 00H, ' ', 00H, '>', 00H, '>', 00H, ' ', 00H
	DB	'(', 00H, 'B', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'U', 00H, 'M'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '_', 00H, 'B', 00H
	DB	'I', 00H, 'T', 00H, 'S', 00H, '-', 00H, '1', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG7451	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7452	DB	'm', 00H, 'o', 00H, 'd', 00H, '[', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, '[', 00H, '0', 00H, ']', 00H, ']', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG7539	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7540	DB	'm', 00H, 'o', 00H, 'd', 00H, '[', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, '[', 00H, '0', 00H, ']', 00H, ']', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG7543	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7544	DB	'i', 00H, 'n', 00H, 'v', 00H, 00H, 00H
$SG7617	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7618	DB	'm', 00H, 'o', 00H, 'd', 00H, '[', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, '[', 00H, '0', 00H, ']', 00H, ']', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG7688	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7689	DB	'm', 00H, 'o', 00H, 'd', 00H, '[', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, '[', 00H, '0', 00H, ']', 00H, ']', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG7743	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7744	DB	'n', 00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'n', 00H, 'b', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'I', 00H, 'N'
	DB	00H, 'T', 00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, '/', 00H
	DB	'8', 00H, 00H, 00H
$SG7841	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7842	DB	'a', 00H, 'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 'a', 00H, '[', 00H, 'a', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	']', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
$SG7844	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7845	DB	'b', 00H, 'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 'b', 00H, '[', 00H, 'b', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	']', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
$SG7867	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG7868	DB	's', 00H, 'h', 00H, 'i', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG8058	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG8059	DB	'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H
	DB	'[', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r'
	DB	00H, '[', 00H, '0', 00H, ']', 00H, ']', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG8061	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'b'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG8062	DB	'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, '[', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l'
	DB	00H, 'u', 00H, 's', 00H, '[', 00H, '0', 00H, ']', 00H, ']', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_bn_restore_invariant
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshbn.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_b$ = 8							; size = 4
_bn_restore_invariant PROC
; Line 137
	push	ebp
	mov	ebp, esp
$LN2@bn_restore:
; Line 138
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 1
	jbe	SHORT $LN3@bn_restore
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN3@bn_restore
; Line 139
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@bn_restore
$LN3@bn_restore:
; Line 140
	pop	ebp
	ret	0
_bn_restore_invariant ENDP
_TEXT	ENDS
PUBLIC	_copybn
EXTRN	_memcpy:PROC
EXTRN	_abort:PROC
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -4						; size = 4
_orig$ = 8						; size = 4
_copybn	PROC
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 144
	push	4
	mov	eax, DWORD PTR _orig$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 145
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN1@copybn
; Line 146
	call	_abort
$LN1@copybn:
; Line 147
	mov	edx, DWORD PTR _orig$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 148
	mov	eax, DWORD PTR _b$[ebp]
; Line 149
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copybn	ENDP
_TEXT	ENDS
PUBLIC	_freebn
EXTRN	_safefree:PROC
EXTRN	_smemclr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = 8							; size = 4
_freebn	PROC
; Line 152
	push	ebp
	mov	ebp, esp
; Line 156
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx*4+4]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 157
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 158
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_freebn	ENDP
_TEXT	ENDS
PUBLIC	_bignum_set_bit
PUBLIC	_bn_power_2
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_n$ = 8							; size = 4
_bn_power_2 PROC
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 164
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN3@bn_power_2
	push	164					; 000000a4H
	push	OFFSET $SG7187
	push	OFFSET $SG7188
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@bn_power_2:
; Line 166
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 1
	push	eax
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 167
	push	1
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_bignum_set_bit
	add	esp, 12					; 0000000cH
; Line 168
	mov	eax, DWORD PTR _ret$[ebp]
; Line 169
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bn_power_2 ENDP
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -4						; size = 4
_length$ = 8						; size = 4
_newbn	PROC
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 126
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN4@newbn
	cmp	DWORD PTR _length$[ebp], 67108863	; 03ffffffH
	jl	SHORT $LN5@newbn
$LN4@newbn:
	push	126					; 0000007eH
	push	OFFSET $SG7161
	push	OFFSET $SG7162
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@newbn:
; Line 128
	push	4
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 129
	cmp	DWORD PTR _b$[ebp], 0
	jne	SHORT $LN1@newbn
; Line 130
	call	_abort
$LN1@newbn:
; Line 131
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [edx*4+4]
	push	eax
	push	0
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 132
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx], eax
; Line 133
	mov	eax, DWORD PTR _b$[ebp]
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newbn	ENDP
_TEXT	ENDS
PUBLIC	_bigmod
PUBLIC	_modpow_simple
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t$7500 = -52						; size = 4
_result$ = -48						; size = 4
_base$ = -44						; size = 4
_j$ = -40						; size = 4
_i$ = -36						; size = 4
_scratchlen$ = -32					; size = 4
_mlen$ = -28						; size = 4
_mshift$ = -24						; size = 4
_scratch$ = -20						; size = 4
_m$ = -16						; size = 4
_n$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base_in$ = 8						; size = 4
_exp$ = 12						; size = 4
_mod$ = 16						; size = 4
_modpow_simple PROC
; Line 726
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN44@modpow_sim
	push	736					; 000002e0H
	push	OFFSET $SG7451
	push	OFFSET $SG7452
	call	__wassert
	add	esp, 12					; 0000000cH
$LN44@modpow_sim:
; Line 742
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base_in$[ebp]
	push	edx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _base$[ebp], eax
; Line 746
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mlen$[ebp], ecx
; Line 747
	push	4
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _m$[ebp], eax
; Line 748
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN41@modpow_sim
$LN40@modpow_sim:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN41@modpow_sim:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _mlen$[ebp]
	jge	SHORT $LN39@modpow_sim
; Line 749
	mov	edx, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN40@modpow_sim
$LN39@modpow_sim:
; Line 752
	mov	DWORD PTR _mshift$[ebp], 0
	jmp	SHORT $LN38@modpow_sim
$LN37@modpow_sim:
	mov	ecx, DWORD PTR _mshift$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mshift$[ebp], ecx
$LN38@modpow_sim:
	cmp	DWORD PTR _mshift$[ebp], 31		; 0000001fH
	jge	SHORT $LN36@modpow_sim
; Line 753
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN35@modpow_sim
; Line 754
	jmp	SHORT $LN36@modpow_sim
$LN35@modpow_sim:
; Line 755
	jmp	SHORT $LN37@modpow_sim
$LN36@modpow_sim:
	cmp	DWORD PTR _mshift$[ebp], 0
	je	SHORT $LN34@modpow_sim
; Line 756
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@modpow_sim
$LN32@modpow_sim:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN33@modpow_sim:
	mov	edx, DWORD PTR _mlen$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN31@modpow_sim
; Line 757
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4]
	shr	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN32@modpow_sim
$LN31@modpow_sim:
; Line 758
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+ecx*4-4], eax
$LN34@modpow_sim:
; Line 762
	push	4
	mov	eax, DWORD PTR _mlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 763
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _mlen$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _i$[ebp], edx
; Line 764
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN30@modpow_sim
$LN29@modpow_sim:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN30@modpow_sim:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _i$[ebp]
	jge	SHORT $LN28@modpow_sim
; Line 765
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
	jmp	SHORT $LN29@modpow_sim
$LN28@modpow_sim:
; Line 766
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN27@modpow_sim
$LN26@modpow_sim:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN27@modpow_sim:
	mov	edx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN25@modpow_sim
; Line 767
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN26@modpow_sim
$LN25@modpow_sim:
; Line 770
	push	4
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
; Line 771
	push	4
	mov	ecx, DWORD PTR _mlen$[ebp]
	shl	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 772
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@modpow_sim
$LN23@modpow_sim:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN24@modpow_sim:
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN22@modpow_sim
; Line 773
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN23@modpow_sim
$LN22@modpow_sim:
; Line 774
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax*4-4], 1
; Line 777
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	call	_mul_compute_scratch
	add	esp, 4
	mov	DWORD PTR _scratchlen$[ebp], eax
; Line 778
	push	4
	mov	eax, DWORD PTR _scratchlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _scratch$[ebp], eax
; Line 781
	mov	DWORD PTR _i$[ebp], 0
; Line 782
	mov	DWORD PTR _j$[ebp], 31			; 0000001fH
$LN21@modpow_sim:
; Line 783
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN18@modpow_sim
	mov	eax, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _exp$[ebp]
	and	eax, DWORD PTR [ecx+edx*4]
	jne	SHORT $LN18@modpow_sim
; Line 784
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
; Line 785
	jns	SHORT $LN19@modpow_sim
; Line 786
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 787
	mov	DWORD PTR _j$[ebp], 31			; 0000001fH
$LN19@modpow_sim:
; Line 789
	jmp	SHORT $LN21@modpow_sim
$LN18@modpow_sim:
; Line 792
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN17@modpow_sim
$LN16@modpow_sim:
; Line 793
	cmp	DWORD PTR _j$[ebp], 0
	jl	$LN15@modpow_sim
; Line 794
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _mlen$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _mlen$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 795
	push	0
	push	0
	mov	eax, DWORD PTR _mlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mlen$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 796
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _exp$[ebp]
	and	eax, DWORD PTR [ecx+edx*4]
	je	SHORT $LN14@modpow_sim
; Line 797
	mov	edx, DWORD PTR _scratch$[ebp]
	push	edx
	mov	eax, DWORD PTR _mlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _mlen$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 798
	push	0
	push	0
	mov	eax, DWORD PTR _mlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mlen$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 799
	jmp	SHORT $LN13@modpow_sim
$LN14@modpow_sim:
; Line 801
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _t$7500[ebp], ecx
; Line 802
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 803
	mov	eax, DWORD PTR _t$7500[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN13@modpow_sim:
; Line 805
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
; Line 806
	jmp	$LN16@modpow_sim
$LN15@modpow_sim:
; Line 807
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 808
	mov	DWORD PTR _j$[ebp], 31			; 0000001fH
; Line 809
	jmp	$LN18@modpow_sim
$LN17@modpow_sim:
; Line 812
	cmp	DWORD PTR _mshift$[ebp], 0
	je	$LN12@modpow_sim
; Line 813
	mov	eax, DWORD PTR _mlen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN11@modpow_sim
$LN10@modpow_sim:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@modpow_sim:
	mov	edx, DWORD PTR _mlen$[ebp]
	lea	eax, DWORD PTR [edx+edx-1]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN9@modpow_sim
; Line 814
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	shr	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN10@modpow_sim
$LN9@modpow_sim:
; Line 815
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax*4-4], edx
; Line 816
	push	0
	push	0
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mlen$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 817
	mov	eax, DWORD PTR _mlen$[ebp]
	lea	ecx, DWORD PTR [eax+eax-1]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN8@modpow_sim
$LN7@modpow_sim:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@modpow_sim:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mlen$[ebp]
	jl	SHORT $LN12@modpow_sim
; Line 818
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shr	eax, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [esi+edx*4-4]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN7@modpow_sim
$LN12@modpow_sim:
; Line 822
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 823
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@modpow_sim
$LN4@modpow_sim:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@modpow_sim:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mlen$[ebp]
	jge	SHORT $LN2@modpow_sim
; Line 824
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [edx+eax*4], ecx
	jmp	SHORT $LN4@modpow_sim
$LN2@modpow_sim:
; Line 825
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx], 1
	jbe	SHORT $LN1@modpow_sim
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN1@modpow_sim
; Line 826
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@modpow_sim
$LN1@modpow_sim:
; Line 829
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 830
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 831
	mov	eax, DWORD PTR _scratchlen$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 832
	mov	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 833
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 1
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 834
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 835
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 836
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 837
	mov	eax, DWORD PTR _mlen$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 838
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 840
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 842
	mov	eax, DWORD PTR _result$[ebp]
; Line 843
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_modpow_simple ENDP
; Function compile flags: /Odtp /RTCsu
_midlen$7234 = -16					; size = 4
_botlen$7233 = -12					; size = 4
_toplen$7232 = -8					; size = 4
_ret$ = -4						; size = 4
_len$ = 8						; size = 4
_mul_compute_scratch PROC
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 221
	mov	DWORD PTR _ret$[ebp], 0
$LN2@mul_comput:
; Line 222
	cmp	DWORD PTR _len$[ebp], 50		; 00000032H
	jle	SHORT $LN1@mul_comput
; Line 223
	mov	eax, DWORD PTR _len$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _toplen$7232[ebp], eax
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _toplen$7232[ebp]
	mov	DWORD PTR _botlen$7233[ebp], eax
; Line 224
	mov	ecx, DWORD PTR _botlen$7233[ebp]
	add	ecx, 1
	mov	DWORD PTR _midlen$7234[ebp], ecx
; Line 225
	mov	edx, DWORD PTR _midlen$7234[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _ret$[ebp], ecx
; Line 226
	mov	edx, DWORD PTR _midlen$7234[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 227
	jmp	SHORT $LN2@mul_comput
$LN1@mul_comput:
; Line 228
	mov	eax, DWORD PTR _ret$[ebp]
; Line 229
	mov	esp, ebp
	pop	ebp
	ret	0
_mul_compute_scratch ENDP
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv278 = -64						; size = 4
tv271 = -60						; size = 4
_cps$7273 = -56						; size = 4
_cp$7272 = -52						; size = 4
_bp$7271 = -48						; size = 4
_ap$7270 = -44						; size = 4
_t$7269 = -40						; size = 8
_carry$7268 = -32					; size = 4
_i$7267 = -28						; size = 4
_carry$7252 = -24					; size = 8
_midlen$7251 = -16					; size = 4
_botlen$7250 = -12					; size = 4
_toplen$7249 = -8					; size = 4
_i$7248 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_len$ = 20						; size = 4
_scratch$ = 24						; size = 4
_internal_mul PROC
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 233
	cmp	DWORD PTR _len$[ebp], 50		; 00000032H
	jle	$LN18@internal_m
; Line 268
	mov	eax, DWORD PTR _len$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _toplen$7249[ebp], eax
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _toplen$7249[ebp]
	mov	DWORD PTR _botlen$7250[ebp], eax
; Line 269
	mov	ecx, DWORD PTR _botlen$7250[ebp]
	add	ecx, 1
	mov	DWORD PTR _midlen$7251[ebp], ecx
; Line 297
	mov	edx, DWORD PTR _scratch$[ebp]
	push	edx
	mov	eax, DWORD PTR _toplen$7249[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 307
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _botlen$7250[ebp]
	push	edx
	mov	eax, DWORD PTR _toplen$7249[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _toplen$7249[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _toplen$7249[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 319
	mov	eax, DWORD PTR _midlen$7251[ebp]
	mov	ecx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], 0
	mov	edx, DWORD PTR _midlen$7251[ebp]
	mov	eax, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
	mov	ecx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [edx], 0
; Line 321
	mov	DWORD PTR _i$7248[ebp], 0
	jmp	SHORT $LN17@internal_m
$LN16@internal_m:
	mov	eax, DWORD PTR _i$7248[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7248[ebp], eax
$LN17@internal_m:
	mov	ecx, DWORD PTR _i$7248[ebp]
	cmp	ecx, DWORD PTR _toplen$7249[ebp]
	jge	SHORT $LN15@internal_m
; Line 322
	mov	edx, DWORD PTR _midlen$7251[ebp]
	sub	edx, DWORD PTR _toplen$7249[ebp]
	add	edx, DWORD PTR _i$7248[ebp]
	mov	eax, DWORD PTR _scratch$[ebp]
	mov	ecx, DWORD PTR _i$7248[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 323
	mov	edx, DWORD PTR _midlen$7251[ebp]
	shl	edx, 1
	sub	edx, DWORD PTR _toplen$7249[ebp]
	add	edx, DWORD PTR _i$7248[ebp]
	mov	eax, DWORD PTR _scratch$[ebp]
	mov	ecx, DWORD PTR _i$7248[ebp]
	mov	esi, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 324
	jmp	SHORT $LN16@internal_m
$LN15@internal_m:
; Line 327
	mov	edx, DWORD PTR _botlen$7250[ebp]
	push	edx
	mov	eax, DWORD PTR _scratch$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _toplen$7249[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	add	ecx, 4
	push	ecx
	call	_internal_add
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [edx], eax
; Line 337
	mov	eax, DWORD PTR _botlen$7250[ebp]
	push	eax
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _toplen$7249[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	_internal_add
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	mov	edx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 350
	mov	eax, DWORD PTR _midlen$7251[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _scratch$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _midlen$7251[ebp]
	push	eax
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 364
	mov	edx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [edx], 0
; Line 365
	mov	DWORD PTR _i$7248[ebp], 0
	jmp	SHORT $LN14@internal_m
$LN13@internal_m:
	mov	eax, DWORD PTR _i$7248[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7248[ebp], eax
$LN14@internal_m:
	mov	ecx, DWORD PTR _toplen$7249[ebp]
	shl	ecx, 1
	cmp	DWORD PTR _i$7248[ebp], ecx
	jge	SHORT $LN12@internal_m
; Line 366
	mov	edx, DWORD PTR _midlen$7251[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _toplen$7249[ebp]
	shl	eax, 1
	sub	edx, eax
	add	edx, DWORD PTR _i$7248[ebp]
	mov	ecx, DWORD PTR _scratch$[ebp]
	mov	eax, DWORD PTR _i$7248[ebp]
	mov	esi, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN13@internal_m
$LN12@internal_m:
; Line 368
	mov	ecx, DWORD PTR _botlen$7250[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _scratch$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _toplen$7249[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _scratch$[ebp]
	add	eax, 8
	push	eax
	call	_internal_add
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _scratch$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 378
	mov	edx, DWORD PTR _midlen$7251[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _midlen$7251[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _scratch$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_internal_sub
	add	esp, 16					; 00000010H
; Line 395
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _botlen$7250[ebp]
	shl	edx, 2
	sub	ecx, edx
	mov	eax, DWORD PTR _midlen$7251[ebp]
	shl	eax, 1
	shl	eax, 2
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _midlen$7251[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _botlen$7250[ebp]
	shl	ecx, 2
	sub	eax, ecx
	mov	edx, DWORD PTR _midlen$7251[ebp]
	shl	edx, 1
	shl	edx, 2
	sub	eax, edx
	push	eax
	call	_internal_add
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	mov	DWORD PTR _carry$7252[ebp], eax
	mov	DWORD PTR _carry$7252[ebp+4], ecx
; Line 396
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 1
	sub	edx, DWORD PTR _botlen$7250[ebp]
	mov	eax, DWORD PTR _midlen$7251[ebp]
	shl	eax, 1
	sub	edx, eax
	sub	edx, 1
	mov	DWORD PTR _i$7248[ebp], edx
$LN11@internal_m:
; Line 397
	mov	ecx, DWORD PTR _carry$7252[ebp]
	or	ecx, DWORD PTR _carry$7252[ebp+4]
	je	SHORT $LN10@internal_m
; Line 398
	cmp	DWORD PTR _i$7248[ebp], 0
	jge	SHORT $LN21@internal_m
	push	398					; 0000018eH
	push	OFFSET $SG7263
	push	OFFSET $SG7264
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@internal_m:
; Line 399
	mov	eax, DWORD PTR _i$7248[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	xor	eax, eax
	add	edx, DWORD PTR _carry$7252[ebp]
	adc	eax, DWORD PTR _carry$7252[ebp+4]
	mov	DWORD PTR _carry$7252[ebp], edx
	mov	DWORD PTR _carry$7252[ebp+4], eax
; Line 400
	mov	ecx, DWORD PTR _carry$7252[ebp]
	mov	edx, DWORD PTR _i$7248[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 401
	mov	eax, DWORD PTR _carry$7252[ebp]
	mov	edx, DWORD PTR _carry$7252[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$7252[ebp], eax
	mov	DWORD PTR _carry$7252[ebp+4], edx
; Line 402
	mov	ecx, DWORD PTR _i$7248[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$7248[ebp], ecx
; Line 403
	jmp	SHORT $LN11@internal_m
$LN10@internal_m:
; Line 412
	jmp	$LN19@internal_m
$LN18@internal_m:
; Line 423
	mov	DWORD PTR _i$7267[ebp], 0
	jmp	SHORT $LN8@internal_m
$LN7@internal_m:
	mov	edx, DWORD PTR _i$7267[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7267[ebp], edx
$LN8@internal_m:
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$7267[ebp], eax
	jge	SHORT $LN6@internal_m
; Line 424
	mov	ecx, DWORD PTR _i$7267[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN7@internal_m
$LN6@internal_m:
; Line 426
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cps$7273[ebp], edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ap$7270[ebp], edx
	jmp	SHORT $LN5@internal_m
$LN4@internal_m:
	mov	eax, DWORD PTR _cps$7273[ebp]
	sub	eax, 4
	mov	DWORD PTR _cps$7273[ebp], eax
$LN5@internal_m:
	mov	ecx, DWORD PTR _ap$7270[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _ap$7270[ebp]
	sub	eax, 4
	mov	DWORD PTR _ap$7270[ebp], eax
	cmp	ecx, edx
	jbe	SHORT $LN22@internal_m
	mov	DWORD PTR tv271[ebp], 1
	jmp	SHORT $LN23@internal_m
$LN22@internal_m:
	mov	DWORD PTR tv271[ebp], 0
$LN23@internal_m:
	cmp	DWORD PTR tv271[ebp], 0
	je	$LN19@internal_m
; Line 427
	mov	DWORD PTR _carry$7268[ebp], 0
; Line 428
	mov	ecx, DWORD PTR _cps$7273[ebp]
	mov	DWORD PTR _cp$7272[ebp], ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _bp$7271[ebp], ecx
$LN2@internal_m:
	mov	edx, DWORD PTR _cp$7272[ebp]
	sub	edx, 4
	mov	DWORD PTR _cp$7272[ebp], edx
	mov	eax, DWORD PTR _bp$7271[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _bp$7271[ebp]
	sub	edx, 4
	mov	DWORD PTR _bp$7271[ebp], edx
	cmp	eax, ecx
	jbe	SHORT $LN24@internal_m
	mov	DWORD PTR tv278[ebp], 1
	jmp	SHORT $LN25@internal_m
$LN24@internal_m:
	mov	DWORD PTR tv278[ebp], 0
$LN25@internal_m:
	cmp	DWORD PTR tv278[ebp], 0
	je	SHORT $LN1@internal_m
; Line 429
	mov	eax, DWORD PTR _ap$7270[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bp$7271[ebp]
	mov	edx, DWORD PTR [ecx]
	mul	edx
	mov	ecx, DWORD PTR _carry$7268[ebp]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	ecx, DWORD PTR _cp$7272[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _t$7269[ebp], eax
	mov	DWORD PTR _t$7269[ebp+4], edx
; Line 430
	mov	edx, DWORD PTR _t$7269[ebp]
	mov	eax, DWORD PTR _cp$7272[ebp]
	mov	DWORD PTR [eax], edx
; Line 431
	mov	eax, DWORD PTR _t$7269[ebp]
	mov	edx, DWORD PTR _t$7269[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$7268[ebp], eax
; Line 432
	jmp	SHORT $LN2@internal_m
$LN1@internal_m:
; Line 433
	mov	ecx, DWORD PTR _cp$7272[ebp]
	mov	edx, DWORD PTR _carry$7268[ebp]
	mov	DWORD PTR [ecx], edx
; Line 434
	jmp	$LN4@internal_m
$LN19@internal_m:
; Line 436
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_internal_mul ENDP
; Function compile flags: /Odtp /RTCsu
_carry$ = -12						; size = 8
_i$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_len$ = 20						; size = 4
_internal_add PROC
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 180
	mov	DWORD PTR _carry$[ebp], 0
	mov	DWORD PTR _carry$[ebp+4], 0
; Line 182
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@internal_a
$LN2@internal_a:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@internal_a:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN1@internal_a
; Line 183
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	xor	esi, esi
	add	ecx, eax
	adc	edx, esi
	add	ecx, DWORD PTR _carry$[ebp]
	adc	edx, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], ecx
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 184
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 185
	mov	eax, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _carry$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 186
	jmp	SHORT $LN2@internal_a
$LN1@internal_a:
; Line 188
	mov	eax, DWORD PTR _carry$[ebp]
; Line 189
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_internal_add ENDP
; Function compile flags: /Odtp /RTCsu
_carry$ = -12						; size = 8
_i$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_len$ = 20						; size = 4
_internal_sub PROC
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 200
	mov	DWORD PTR _carry$[ebp], 1
	mov	DWORD PTR _carry$[ebp+4], 0
; Line 202
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@internal_s
$LN2@internal_s:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@internal_s:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@internal_s
; Line 203
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	xor	eax, -1
	xor	esi, esi
	add	ecx, eax
	adc	edx, esi
	add	ecx, DWORD PTR _carry$[ebp]
	adc	edx, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], ecx
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 204
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 205
	mov	eax, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _carry$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 206
	jmp	SHORT $LN2@internal_s
$LN4@internal_s:
; Line 207
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_internal_sub ENDP
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv291 = -80						; size = 8
tv268 = -72						; size = 8
tv265 = -64						; size = 8
tv245 = -56						; size = 8
_tmplo$7406 = -48					; size = 4
_ai1$7399 = -44						; size = 4
_c$7398 = -40						; size = 4
_r$7397 = -36						; size = 4
_q$7396 = -32						; size = 4
_t$7395 = -28						; size = 8
_k$ = -20						; size = 4
_i$ = -16						; size = 4
_h$ = -12						; size = 4
_m1$ = -8						; size = 4
_m0$ = -4						; size = 4
_a$ = 8							; size = 4
_alen$ = 12						; size = 4
_m$ = 16						; size = 4
_mlen$ = 20						; size = 4
_quot$ = 24						; size = 4
_qshift$ = 28						; size = 4
_internal_mod PROC
; Line 631
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 636
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _m0$[ebp], ecx
; Line 637
	mov	edx, DWORD PTR _m0$[ebp]
	shr	edx, 31					; 0000001fH
	cmp	edx, 1
	je	SHORT $LN28@internal_m@2
	push	637					; 0000027dH
	push	OFFSET $SG7388
	push	OFFSET $SG7389
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@internal_m@2:
; Line 638
	cmp	DWORD PTR _mlen$[ebp], 1
	jle	SHORT $LN25@internal_m@2
; Line 639
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _m1$[ebp], edx
; Line 640
	jmp	SHORT $LN24@internal_m@2
$LN25@internal_m@2:
; Line 641
	mov	DWORD PTR _m1$[ebp], 0
$LN24@internal_m@2:
; Line 643
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@internal_m@2
$LN22@internal_m@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@internal_m@2:
	mov	ecx, DWORD PTR _alen$[ebp]
	sub	ecx, DWORD PTR _mlen$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jg	$LN26@internal_m@2
; Line 647
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN20@internal_m@2
; Line 648
	mov	DWORD PTR _h$[ebp], 0
; Line 649
	jmp	SHORT $LN19@internal_m@2
$LN20@internal_m@2:
; Line 650
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	mov	DWORD PTR _h$[ebp], ecx
; Line 651
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx*4-4], 0
$LN19@internal_m@2:
; Line 654
	mov	ecx, DWORD PTR _alen$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jne	SHORT $LN18@internal_m@2
; Line 655
	mov	DWORD PTR _ai1$7399[ebp], 0
; Line 656
	jmp	SHORT $LN17@internal_m@2
$LN18@internal_m@2:
; Line 657
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _ai1$7399[ebp], ecx
$LN17@internal_m@2:
; Line 660
	mov	edx, DWORD PTR _h$[ebp]
	cmp	edx, DWORD PTR _m0$[ebp]
	jb	SHORT $LN16@internal_m@2
; Line 676
	mov	DWORD PTR _q$7396[ebp], -1
; Line 677
	jmp	$LN15@internal_m@2
$LN16@internal_m@2:
; Line 680
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _tmplo$7406[ebp], edx
$LN14@internal_m@2:
; Line 681
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR _tmplo$7406[ebp]
	div	DWORD PTR _m0$[ebp]
	mov	DWORD PTR _r$7397[ebp], edx
	mov	DWORD PTR _q$7396[ebp], eax
	xor	eax, eax
	jne	SHORT $LN14@internal_m@2
; Line 685
	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _q$7396[ebp]
	mul	ecx
	mov	DWORD PTR _t$7395[ebp], eax
	mov	DWORD PTR _t$7395[ebp+4], edx
; Line 686
	mov	eax, DWORD PTR _r$7397[ebp]
	xor	edx, edx
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, DWORD PTR _ai1$7399[ebp]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR tv245[ebp], eax
	mov	DWORD PTR tv245[ebp+4], edx
	mov	edx, DWORD PTR _t$7395[ebp+4]
	cmp	edx, DWORD PTR tv245[ebp+4]
	jb	$LN15@internal_m@2
	ja	SHORT $LN29@internal_m@2
	mov	eax, DWORD PTR _t$7395[ebp]
	cmp	eax, DWORD PTR tv245[ebp]
	jbe	$LN15@internal_m@2
$LN29@internal_m@2:
; Line 687
	mov	ecx, DWORD PTR _q$7396[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q$7396[ebp], ecx
; Line 688
	mov	edx, DWORD PTR _m1$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _t$7395[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _t$7395[ebp+4]
	sbb	edx, eax
	mov	DWORD PTR _t$7395[ebp], ecx
	mov	DWORD PTR _t$7395[ebp+4], edx
; Line 689
	mov	eax, DWORD PTR _r$7397[ebp]
	add	eax, DWORD PTR _m0$[ebp]
	mov	DWORD PTR _r$7397[ebp], eax
; Line 691
	mov	ecx, DWORD PTR _r$7397[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _m0$[ebp]
	xor	esi, esi
	mov	DWORD PTR tv265[ebp], ecx
	mov	DWORD PTR tv265[ebp+4], edx
	mov	DWORD PTR tv268[ebp], eax
	mov	DWORD PTR tv268[ebp+4], esi
	mov	ecx, DWORD PTR tv265[ebp+4]
	cmp	ecx, DWORD PTR tv268[ebp+4]
	jb	SHORT $LN15@internal_m@2
	ja	SHORT $LN30@internal_m@2
	mov	edx, DWORD PTR tv265[ebp]
	cmp	edx, DWORD PTR tv268[ebp]
	jb	SHORT $LN15@internal_m@2
$LN30@internal_m@2:
	mov	eax, DWORD PTR _r$7397[ebp]
	xor	edx, edx
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, DWORD PTR _ai1$7399[ebp]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR tv291[ebp], eax
	mov	DWORD PTR tv291[ebp+4], edx
	mov	edx, DWORD PTR _t$7395[ebp+4]
	cmp	edx, DWORD PTR tv291[ebp+4]
	jb	SHORT $LN15@internal_m@2
	ja	SHORT $LN31@internal_m@2
	mov	eax, DWORD PTR _t$7395[ebp]
	cmp	eax, DWORD PTR tv291[ebp]
	jbe	SHORT $LN15@internal_m@2
$LN31@internal_m@2:
	mov	ecx, DWORD PTR _q$7396[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q$7396[ebp], ecx
$LN15@internal_m@2:
; Line 696
	mov	DWORD PTR _c$7398[ebp], 0
; Line 697
	mov	edx, DWORD PTR _mlen$[ebp]
	sub	edx, 1
	mov	DWORD PTR _k$[ebp], edx
	jmp	SHORT $LN9@internal_m@2
$LN8@internal_m@2:
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN9@internal_m@2:
	cmp	DWORD PTR _k$[ebp], 0
	jl	SHORT $LN7@internal_m@2
; Line 698
	mov	eax, DWORD PTR _q$7396[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mul	ecx
	mov	DWORD PTR _t$7395[ebp], eax
	mov	DWORD PTR _t$7395[ebp+4], edx
; Line 699
	mov	edx, DWORD PTR _c$7398[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _t$7395[ebp]
	adc	eax, DWORD PTR _t$7395[ebp+4]
	mov	DWORD PTR _t$7395[ebp], edx
	mov	DWORD PTR _t$7395[ebp+4], eax
; Line 700
	mov	eax, DWORD PTR _t$7395[ebp]
	mov	edx, DWORD PTR _t$7395[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _c$7398[ebp], eax
; Line 701
	mov	ecx, DWORD PTR _t$7395[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR [eax+edx*4]
	jbe	SHORT $LN6@internal_m@2
; Line 702
	mov	ecx, DWORD PTR _c$7398[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$7398[ebp], ecx
$LN6@internal_m@2:
; Line 703
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _t$7395[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	sub	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 704
	jmp	SHORT $LN8@internal_m@2
$LN7@internal_m@2:
; Line 707
	mov	edx, DWORD PTR _c$7398[ebp]
	cmp	edx, DWORD PTR _h$[ebp]
	je	$LN5@internal_m@2
; Line 708
	mov	DWORD PTR _t$7395[ebp], 0
	mov	DWORD PTR _t$7395[ebp+4], 0
; Line 709
	mov	eax, DWORD PTR _mlen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN4@internal_m@2
$LN3@internal_m@2:
	mov	ecx, DWORD PTR _k$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN4@internal_m@2:
	cmp	DWORD PTR _k$[ebp], 0
	jl	SHORT $LN2@internal_m@2
; Line 710
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	xor	edx, edx
	add	ecx, DWORD PTR _t$7395[ebp]
	adc	edx, DWORD PTR _t$7395[ebp+4]
	mov	DWORD PTR _t$7395[ebp], ecx
	mov	DWORD PTR _t$7395[ebp+4], edx
; Line 711
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	xor	eax, eax
	add	edx, DWORD PTR _t$7395[ebp]
	adc	eax, DWORD PTR _t$7395[ebp+4]
	mov	DWORD PTR _t$7395[ebp], edx
	mov	DWORD PTR _t$7395[ebp+4], eax
; Line 712
	mov	ecx, DWORD PTR _t$7395[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 713
	mov	eax, DWORD PTR _t$7395[ebp]
	mov	edx, DWORD PTR _t$7395[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _t$7395[ebp], eax
	mov	DWORD PTR _t$7395[ebp+4], edx
; Line 714
	jmp	SHORT $LN3@internal_m@2
$LN2@internal_m@2:
; Line 715
	mov	ecx, DWORD PTR _q$7396[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q$7396[ebp], ecx
$LN5@internal_m@2:
; Line 717
	cmp	DWORD PTR _quot$[ebp], 0
	je	SHORT $LN1@internal_m@2
; Line 718
	mov	edx, DWORD PTR _alen$[ebp]
	sub	edx, DWORD PTR _mlen$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR _qshift$[ebp]
	push	edx
	mov	eax, DWORD PTR _q$7396[ebp]
	push	eax
	mov	ecx, DWORD PTR _quot$[ebp]
	push	ecx
	call	_internal_add_shifted
	add	esp, 12					; 0000000cH
$LN1@internal_m@2:
; Line 719
	jmp	$LN22@internal_m@2
$LN26@internal_m@2:
; Line 720
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_internal_mod ENDP
; Function compile flags: /Odtp /RTCsu
_addend$ = -16						; size = 8
_bshift$ = -8						; size = 4
_word$ = -4						; size = 4
_number$ = 8						; size = 4
_n$ = 12						; size = 4
_shift$ = 16						; size = 4
_internal_add_shifted PROC
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 603
	mov	eax, DWORD PTR _shift$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 1
	mov	DWORD PTR _word$[ebp], eax
; Line 604
	mov	eax, DWORD PTR _shift$[ebp]
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN6@internal_a@2
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN6@internal_a@2:
	mov	DWORD PTR _bshift$[ebp], eax
; Line 607
	mov	eax, DWORD PTR _n$[ebp]
	xor	edx, edx
	mov	ecx, DWORD PTR _bshift$[ebp]
	call	__allshl
	mov	DWORD PTR _addend$[ebp], eax
	mov	DWORD PTR _addend$[ebp+4], edx
$LN2@internal_a@2:
; Line 609
	mov	ecx, DWORD PTR _addend$[ebp]
	or	ecx, DWORD PTR _addend$[ebp+4]
	je	SHORT $LN3@internal_a@2
; Line 610
	mov	edx, DWORD PTR _number$[ebp]
	mov	eax, DWORD PTR _word$[ebp]
	cmp	eax, DWORD PTR [edx]
	jbe	SHORT $LN5@internal_a@2
	push	610					; 00000262H
	push	OFFSET $SG7365
	push	OFFSET $SG7366
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@internal_a@2:
; Line 611
	mov	edx, DWORD PTR _word$[ebp]
	mov	eax, DWORD PTR _number$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	xor	edx, edx
	add	ecx, DWORD PTR _addend$[ebp]
	adc	edx, DWORD PTR _addend$[ebp+4]
	mov	DWORD PTR _addend$[ebp], ecx
	mov	DWORD PTR _addend$[ebp+4], edx
; Line 612
	mov	eax, DWORD PTR _addend$[ebp]
	mov	ecx, DWORD PTR _word$[ebp]
	mov	edx, DWORD PTR _number$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 613
	mov	eax, DWORD PTR _addend$[ebp]
	mov	edx, DWORD PTR _addend$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _addend$[ebp], eax
	mov	DWORD PTR _addend$[ebp+4], edx
; Line 614
	mov	eax, DWORD PTR _word$[ebp]
	add	eax, 1
	mov	DWORD PTR _word$[ebp], eax
; Line 615
	jmp	SHORT $LN2@internal_a@2
$LN3@internal_a@2:
; Line 616
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_internal_add_shifted ENDP
_TEXT	ENDS
PUBLIC	_modmul
PUBLIC	_modinv
PUBLIC	_modpow
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv202 = -80						; size = 4
tv181 = -76						; size = 4
tv158 = -72						; size = 4
_t$7589 = -68						; size = 4
_result$ = -64						; size = 4
_inv$ = -60						; size = 4
_rn$ = -56						; size = 4
_r$ = -52						; size = 4
_base2$ = -48						; size = 4
_base$ = -44						; size = 4
_j$ = -40						; size = 4
_i$ = -36						; size = 4
_scratchlen$ = -32					; size = 4
_len$ = -28						; size = 4
_scratch$ = -24						; size = 4
_mninv$ = -20						; size = 4
_n$ = -16						; size = 4
_x$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_base_in$ = 8						; size = 4
_exp$ = 12						; size = 4
_mod$ = 16						; size = 4
_modpow	PROC
; Line 850
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 859
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN33@modpow
	push	859					; 0000035bH
	push	OFFSET $SG7539
	push	OFFSET $SG7540
	call	__wassert
	add	esp, 12					; 0000000cH
$LN33@modpow:
; Line 865
	mov	ecx, DWORD PTR _mod$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 1
	jne	SHORT $LN30@modpow
; Line 866
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	mov	ecx, DWORD PTR _exp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base_in$[ebp]
	push	edx
	call	_modpow_simple
	add	esp, 12					; 0000000cH
	jmp	$LN31@modpow
$LN30@modpow:
; Line 872
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_in$[ebp]
	push	ecx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _base$[ebp], eax
; Line 879
	mov	edx, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _len$[ebp], eax
; Line 880
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 5
	push	ecx
	call	_bn_power_2
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 881
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _mod$[ebp]
	push	eax
	call	_modinv
	add	esp, 8
	mov	DWORD PTR _inv$[ebp], eax
; Line 882
	cmp	DWORD PTR _inv$[ebp], 0
	jne	SHORT $LN34@modpow
	push	882					; 00000372H
	push	OFFSET $SG7543
	push	OFFSET $SG7544
	call	__wassert
	add	esp, 12					; 0000000cH
$LN34@modpow:
; Line 888
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_modmul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _base2$[ebp], eax
; Line 889
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 890
	mov	eax, DWORD PTR _base2$[ebp]
	mov	DWORD PTR _base$[ebp], eax
; Line 892
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_bigmod
	add	esp, 8
	mov	DWORD PTR _rn$[ebp], eax
; Line 894
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 901
	push	4
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 902
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN29@modpow
$LN28@modpow:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN29@modpow:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN27@modpow
; Line 903
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _mod$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN28@modpow
$LN27@modpow:
; Line 905
	push	4
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _mninv$[ebp], eax
; Line 906
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN26@modpow
$LN25@modpow:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN26@modpow:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN24@modpow
; Line 907
	mov	ecx, DWORD PTR _inv$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN35@modpow
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _inv$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR tv158[ebp], edx
	jmp	SHORT $LN36@modpow
$LN35@modpow:
	mov	DWORD PTR tv158[ebp], 0
$LN36@modpow:
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _mninv$[ebp]
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN25@modpow
$LN24@modpow:
; Line 908
	mov	eax, DWORD PTR _inv$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 910
	push	4
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
; Line 911
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN23@modpow
$LN22@modpow:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN23@modpow:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN21@modpow
; Line 912
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN22@modpow
$LN21@modpow:
; Line 913
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mninv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mninv$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_internal_sub
	add	esp, 16					; 00000010H
; Line 916
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN20@modpow
$LN19@modpow:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN20@modpow:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN18@modpow
; Line 917
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN37@modpow
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR tv181[ebp], ecx
	jmp	SHORT $LN38@modpow
$LN37@modpow:
	mov	DWORD PTR tv181[ebp], 0
$LN38@modpow:
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	sub	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN19@modpow
$LN18@modpow:
; Line 918
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 920
	push	4
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
; Line 921
	push	4
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 1
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _b$[ebp], eax
; Line 922
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN17@modpow
$LN16@modpow:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN17@modpow:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN15@modpow
; Line 923
	mov	ecx, DWORD PTR _rn$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN39@modpow
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _rn$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR tv202[ebp], edx
	jmp	SHORT $LN40@modpow
$LN39@modpow:
	mov	DWORD PTR tv202[ebp], 0
$LN40@modpow:
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax-1]
	sub	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN16@modpow
$LN15@modpow:
; Line 924
	mov	ecx, DWORD PTR _rn$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 927
	mov	esi, DWORD PTR _len$[ebp]
	imul	esi, 3
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_mul_compute_scratch
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scratchlen$[ebp], esi
; Line 928
	push	4
	mov	eax, DWORD PTR _scratchlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _scratch$[ebp], eax
; Line 931
	mov	DWORD PTR _i$[ebp], 0
; Line 932
	mov	DWORD PTR _j$[ebp], 31			; 0000001fH
$LN14@modpow:
; Line 933
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN11@modpow
	mov	eax, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _exp$[ebp]
	and	eax, DWORD PTR [ecx+edx*4]
	jne	SHORT $LN11@modpow
; Line 934
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
; Line 935
	jns	SHORT $LN12@modpow
; Line 936
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 937
	mov	DWORD PTR _j$[ebp], 31			; 0000001fH
$LN12@modpow:
; Line 939
	jmp	SHORT $LN14@modpow
$LN11@modpow:
; Line 942
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN10@modpow
$LN9@modpow:
; Line 943
	cmp	DWORD PTR _j$[ebp], 0
	jl	$LN8@modpow
; Line 944
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 945
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mninv$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_monty_reduce
	add	esp, 20					; 00000014H
; Line 946
	mov	edx, DWORD PTR _exp$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _i$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR _j$[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR _exp$[ebp]
	and	edx, DWORD PTR [ecx+eax*4]
	je	SHORT $LN7@modpow
; Line 947
	mov	edx, DWORD PTR _scratch$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 948
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mninv$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_monty_reduce
	add	esp, 20					; 00000014H
; Line 949
	jmp	SHORT $LN6@modpow
$LN7@modpow:
; Line 951
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _t$7589[ebp], edx
; Line 952
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
; Line 953
	mov	ecx, DWORD PTR _t$7589[ebp]
	mov	DWORD PTR _b$[ebp], ecx
$LN6@modpow:
; Line 955
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, 1
	mov	DWORD PTR _j$[ebp], edx
; Line 956
	jmp	$LN9@modpow
$LN8@modpow:
; Line 957
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 958
	mov	DWORD PTR _j$[ebp], 31			; 0000001fH
; Line 959
	jmp	$LN11@modpow
$LN10@modpow:
; Line 965
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scratch$[ebp]
	push	edx
	mov	eax, DWORD PTR _mninv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_monty_reduce
	add	esp, 20					; 00000014H
; Line 968
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 969
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@modpow
$LN4@modpow:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@modpow:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN2@modpow
; Line 970
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [edx+eax*4], ecx
	jmp	SHORT $LN4@modpow
$LN2@modpow:
; Line 971
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx], 1
	jbe	SHORT $LN1@modpow
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN1@modpow
; Line 972
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@modpow
$LN1@modpow:
; Line 975
	mov	eax, DWORD PTR _scratchlen$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 976
	mov	edx, DWORD PTR _scratch$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 977
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 978
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 979
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 980
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 981
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _mninv$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 982
	mov	edx, DWORD PTR _mninv$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 983
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 984
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 985
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 986
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 988
	mov	eax, DWORD PTR _result$[ebp]
$LN31@modpow:
; Line 989
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_modpow	ENDP
; Function compile flags: /Odtp /RTCsu
_carry$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_n$ = 12						; size = 4
_mninv$ = 16						; size = 4
_tmp$ = 20						; size = 4
_len$ = 24						; size = 4
_monty_reduce PROC
; Line 555
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 564
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _tmp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mninv$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_internal_mul_low
	add	esp, 20					; 00000014H
; Line 575
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _tmp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 576
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_internal_add
	add	esp, 16					; 00000010H
	mov	DWORD PTR _carry$[ebp], eax
; Line 577
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@monty_redu
$LN9@monty_redu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@monty_redu:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN8@monty_redu
; Line 578
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
	jmp	SHORT $LN9@monty_redu
$LN8@monty_redu:
; Line 591
	cmp	DWORD PTR _carry$[ebp], 0
	jne	SHORT $LN7@monty_redu
; Line 592
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@monty_redu
$LN5@monty_redu:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@monty_redu:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN7@monty_redu
; Line 593
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	je	SHORT $LN3@monty_redu
; Line 594
	jmp	SHORT $LN7@monty_redu
$LN3@monty_redu:
; Line 595
	jmp	SHORT $LN5@monty_redu
$LN7@monty_redu:
; Line 596
	cmp	DWORD PTR _carry$[ebp], 0
	jne	SHORT $LN1@monty_redu
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@monty_redu
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	cmp	edx, DWORD PTR [esi+ecx*4]
	jbe	SHORT $LN11@monty_redu
$LN1@monty_redu:
; Line 597
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_internal_sub
	add	esp, 16					; 00000010H
$LN11@monty_redu:
; Line 598
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_monty_reduce ENDP
; Function compile flags: /Odtp /RTCsu
tv185 = -52						; size = 4
tv178 = -48						; size = 4
_cps$7312 = -44						; size = 4
_cp$7311 = -40						; size = 4
_bp$7310 = -36						; size = 4
_ap$7309 = -32						; size = 4
_t$7308 = -28						; size = 8
_carry$7307 = -20					; size = 4
_i$7306 = -16						; size = 4
_botlen$7301 = -12					; size = 4
_toplen$7300 = -8					; size = 4
_i$7299 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_len$ = 20						; size = 4
_scratch$ = 24						; size = 4
_internal_mul_low PROC
; Line 445
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 446
	cmp	DWORD PTR _len$[ebp], 50		; 00000032H
	jle	$LN13@internal_m@3
; Line 481
	mov	eax, DWORD PTR _len$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _toplen$7300[ebp], eax
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _toplen$7300[ebp]
	mov	DWORD PTR _botlen$7301[ebp], eax
; Line 493
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _botlen$7301[ebp]
	push	ecx
	mov	edx, DWORD PTR _toplen$7300[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _scratch$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _toplen$7300[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _toplen$7300[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 497
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _scratch$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _toplen$7300[ebp]
	push	edx
	mov	eax, DWORD PTR _toplen$7300[ebp]
	mov	ecx, DWORD PTR _scratch$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _toplen$7300[ebp]
	shl	eax, 2
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_internal_mul_low
	add	esp, 20					; 00000014H
; Line 501
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _scratch$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _toplen$7300[ebp]
	push	edx
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _toplen$7300[ebp]
	shl	edx, 2
	sub	ecx, edx
	push	ecx
	call	_internal_mul_low
	add	esp, 20					; 00000014H
; Line 504
	mov	DWORD PTR _i$7299[ebp], 0
	jmp	SHORT $LN12@internal_m@3
$LN11@internal_m@3:
	mov	eax, DWORD PTR _i$7299[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7299[ebp], eax
$LN12@internal_m@3:
	mov	ecx, DWORD PTR _i$7299[ebp]
	cmp	ecx, DWORD PTR _botlen$7301[ebp]
	jge	SHORT $LN10@internal_m@3
; Line 505
	mov	edx, DWORD PTR _toplen$7300[ebp]
	mov	eax, DWORD PTR _botlen$7301[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	add	ecx, DWORD PTR _i$7299[ebp]
	mov	edx, DWORD PTR _toplen$7300[ebp]
	add	edx, DWORD PTR _i$7299[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	mov	esi, DWORD PTR _scratch$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN11@internal_m@3
$LN10@internal_m@3:
; Line 508
	mov	edx, DWORD PTR _toplen$7300[ebp]
	push	edx
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toplen$7300[ebp]
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_internal_add
	add	esp, 16					; 00000010H
; Line 512
	mov	edx, DWORD PTR _toplen$7300[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toplen$7300[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _scratch$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _botlen$7301[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _toplen$7300[ebp]
	shl	eax, 2
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_internal_add
	add	esp, 16					; 00000010H
; Line 514
	jmp	$LN14@internal_m@3
$LN13@internal_m@3:
; Line 525
	mov	DWORD PTR _i$7306[ebp], 0
	jmp	SHORT $LN8@internal_m@3
$LN7@internal_m@3:
	mov	edx, DWORD PTR _i$7306[ebp]
	add	edx, 1
	mov	DWORD PTR _i$7306[ebp], edx
$LN8@internal_m@3:
	mov	eax, DWORD PTR _i$7306[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN6@internal_m@3
; Line 526
	mov	ecx, DWORD PTR _i$7306[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN7@internal_m@3
$LN6@internal_m@3:
; Line 528
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cps$7312[ebp], edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ap$7309[ebp], edx
	jmp	SHORT $LN5@internal_m@3
$LN4@internal_m@3:
	mov	eax, DWORD PTR _cps$7312[ebp]
	sub	eax, 4
	mov	DWORD PTR _cps$7312[ebp], eax
$LN5@internal_m@3:
	mov	ecx, DWORD PTR _ap$7309[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _ap$7309[ebp]
	sub	eax, 4
	mov	DWORD PTR _ap$7309[ebp], eax
	cmp	ecx, edx
	jbe	SHORT $LN16@internal_m@3
	mov	DWORD PTR tv178[ebp], 1
	jmp	SHORT $LN17@internal_m@3
$LN16@internal_m@3:
	mov	DWORD PTR tv178[ebp], 0
$LN17@internal_m@3:
	cmp	DWORD PTR tv178[ebp], 0
	je	$LN14@internal_m@3
; Line 529
	mov	DWORD PTR _carry$7307[ebp], 0
; Line 530
	mov	ecx, DWORD PTR _cps$7312[ebp]
	mov	DWORD PTR _cp$7311[ebp], ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _bp$7310[ebp], ecx
$LN2@internal_m@3:
	mov	edx, DWORD PTR _bp$7310[ebp]
	sub	edx, 4
	mov	DWORD PTR _bp$7310[ebp], edx
	mov	eax, DWORD PTR _cp$7311[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _cp$7311[ebp]
	sub	edx, 4
	mov	DWORD PTR _cp$7311[ebp], edx
	cmp	eax, ecx
	jbe	SHORT $LN18@internal_m@3
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN19@internal_m@3
$LN18@internal_m@3:
	mov	DWORD PTR tv185[ebp], 0
$LN19@internal_m@3:
	cmp	DWORD PTR tv185[ebp], 0
	je	SHORT $LN1@internal_m@3
; Line 531
	mov	eax, DWORD PTR _ap$7309[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bp$7310[ebp]
	mov	edx, DWORD PTR [ecx]
	mul	edx
	mov	ecx, DWORD PTR _carry$7307[ebp]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	ecx, DWORD PTR _cp$7311[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _t$7308[ebp], eax
	mov	DWORD PTR _t$7308[ebp+4], edx
; Line 532
	mov	edx, DWORD PTR _t$7308[ebp]
	mov	eax, DWORD PTR _cp$7311[ebp]
	mov	DWORD PTR [eax], edx
; Line 533
	mov	eax, DWORD PTR _t$7308[ebp]
	mov	edx, DWORD PTR _t$7308[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$7307[ebp], eax
; Line 534
	jmp	SHORT $LN2@internal_m@3
$LN1@internal_m@3:
; Line 535
	jmp	$LN4@internal_m@3
$LN14@internal_m@3:
; Line 537
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_internal_mul_low ENDP
; Function compile flags: /Odtp /RTCsu
tv254 = -60						; size = 4
tv141 = -56						; size = 4
_result$ = -52						; size = 4
_j$ = -48						; size = 4
_i$ = -44						; size = 4
_rlen$ = -40						; size = 4
_mlen$ = -36						; size = 4
_pqlen$ = -32						; size = 4
_scratchlen$ = -28					; size = 4
_mshift$ = -24						; size = 4
_scratch$ = -20						; size = 4
_o$ = -16						; size = 4
_m$ = -12						; size = 4
_n$ = -8						; size = 4
_a$ = -4						; size = 4
_p$ = 8							; size = 4
_q$ = 12						; size = 4
_mod$ = 16						; size = 4
_modmul	PROC
; Line 997
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1007
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN39@modmul
	push	1007					; 000003efH
	push	OFFSET $SG7617
	push	OFFSET $SG7618
	call	__wassert
	add	esp, 12					; 0000000cH
$LN39@modmul:
; Line 1011
	mov	ecx, DWORD PTR _mod$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _mlen$[ebp], edx
; Line 1012
	push	4
	mov	eax, DWORD PTR _mlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _m$[ebp], eax
; Line 1013
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN36@modmul
$LN35@modmul:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN36@modmul:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _mlen$[ebp]
	jge	SHORT $LN34@modmul
; Line 1014
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN35@modmul
$LN34@modmul:
; Line 1017
	mov	DWORD PTR _mshift$[ebp], 0
	jmp	SHORT $LN33@modmul
$LN32@modmul:
	mov	edx, DWORD PTR _mshift$[ebp]
	add	edx, 1
	mov	DWORD PTR _mshift$[ebp], edx
$LN33@modmul:
	cmp	DWORD PTR _mshift$[ebp], 31		; 0000001fH
	jge	SHORT $LN31@modmul
; Line 1018
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	and	edx, -2147483648			; 80000000H
	je	SHORT $LN30@modmul
; Line 1019
	jmp	SHORT $LN31@modmul
$LN30@modmul:
; Line 1020
	jmp	SHORT $LN32@modmul
$LN31@modmul:
	cmp	DWORD PTR _mshift$[ebp], 0
	je	SHORT $LN29@modmul
; Line 1021
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@modmul
$LN27@modmul:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@modmul:
	mov	ecx, DWORD PTR _mlen$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN26@modmul
; Line 1022
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4]
	shr	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN27@modmul
$LN26@modmul:
; Line 1023
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+ecx*4-4], eax
$LN29@modmul:
; Line 1026
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN40@modmul
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv141[ebp], ecx
	jmp	SHORT $LN41@modmul
$LN40@modmul:
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv141[ebp], eax
$LN41@modmul:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _pqlen$[ebp], ecx
; Line 1032
	mov	edx, DWORD PTR _pqlen$[ebp]
	shl	edx, 1
	cmp	edx, DWORD PTR _mlen$[ebp]
	jg	SHORT $LN25@modmul
; Line 1033
	mov	eax, DWORD PTR _mlen$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 1
	mov	DWORD PTR _pqlen$[ebp], eax
$LN25@modmul:
; Line 1036
	push	4
	mov	eax, DWORD PTR _pqlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 1037
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _pqlen$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _i$[ebp], edx
; Line 1038
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN24@modmul
$LN23@modmul:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN24@modmul:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _i$[ebp]
	jge	SHORT $LN22@modmul
; Line 1039
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
	jmp	SHORT $LN23@modmul
$LN22@modmul:
; Line 1040
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN21@modmul
$LN20@modmul:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN21@modmul:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN19@modmul
; Line 1041
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN20@modmul
$LN19@modmul:
; Line 1044
	push	4
	mov	eax, DWORD PTR _pqlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _o$[ebp], eax
; Line 1045
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR _pqlen$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _i$[ebp], edx
; Line 1046
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN18@modmul
$LN17@modmul:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN18@modmul:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _i$[ebp]
	jge	SHORT $LN16@modmul
; Line 1047
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
	jmp	SHORT $LN17@modmul
$LN16@modmul:
; Line 1048
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN15@modmul
$LN14@modmul:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN15@modmul:
	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN13@modmul
; Line 1049
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	esi, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN14@modmul
$LN13@modmul:
; Line 1052
	push	4
	mov	eax, DWORD PTR _pqlen$[ebp]
	shl	eax, 1
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
; Line 1055
	mov	ecx, DWORD PTR _pqlen$[ebp]
	push	ecx
	call	_mul_compute_scratch
	add	esp, 4
	mov	DWORD PTR _scratchlen$[ebp], eax
; Line 1056
	push	4
	mov	edx, DWORD PTR _scratchlen$[ebp]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _scratch$[ebp], eax
; Line 1059
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pqlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 1060
	push	0
	push	0
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pqlen$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 1063
	cmp	DWORD PTR _mshift$[ebp], 0
	je	$LN12@modmul
; Line 1064
	mov	eax, DWORD PTR _pqlen$[ebp]
	shl	eax, 1
	sub	eax, DWORD PTR _mlen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN11@modmul
$LN10@modmul:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@modmul:
	mov	edx, DWORD PTR _pqlen$[ebp]
	lea	eax, DWORD PTR [edx+edx-1]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN9@modmul
; Line 1065
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	shr	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN10@modmul
$LN9@modmul:
; Line 1066
	mov	eax, DWORD PTR _pqlen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pqlen$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax*4-4], edx
; Line 1067
	push	0
	push	0
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pqlen$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 1068
	mov	eax, DWORD PTR _pqlen$[ebp]
	lea	ecx, DWORD PTR [eax+eax-1]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN8@modmul
$LN7@modmul:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@modmul:
	mov	eax, DWORD PTR _pqlen$[ebp]
	shl	eax, 1
	sub	eax, DWORD PTR _mlen$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN12@modmul
; Line 1069
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shr	eax, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [esi+edx*4-4]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN7@modmul
$LN12@modmul:
; Line 1073
	mov	eax, DWORD PTR _pqlen$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _mlen$[ebp], eax
	jge	SHORT $LN42@modmul
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	DWORD PTR tv254[ebp], ecx
	jmp	SHORT $LN43@modmul
$LN42@modmul:
	mov	edx, DWORD PTR _pqlen$[ebp]
	shl	edx, 1
	mov	DWORD PTR tv254[ebp], edx
$LN43@modmul:
	mov	eax, DWORD PTR tv254[ebp]
	mov	DWORD PTR _rlen$[ebp], eax
; Line 1074
	mov	ecx, DWORD PTR _rlen$[ebp]
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 1075
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@modmul
$LN4@modmul:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@modmul:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _rlen$[ebp]
	jge	SHORT $LN2@modmul
; Line 1076
	mov	ecx, DWORD PTR _pqlen$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	sub	eax, DWORD PTR _rlen$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN4@modmul
$LN2@modmul:
; Line 1077
	mov	ecx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [ecx], 1
	jbe	SHORT $LN1@modmul
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN1@modmul
; Line 1078
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN2@modmul
$LN1@modmul:
; Line 1081
	mov	edx, DWORD PTR _scratchlen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _scratch$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1082
	mov	ecx, DWORD PTR _scratch$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1083
	mov	edx, DWORD PTR _pqlen$[ebp]
	shl	edx, 1
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1084
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1085
	mov	edx, DWORD PTR _mlen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1086
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1087
	mov	edx, DWORD PTR _pqlen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1088
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1089
	mov	edx, DWORD PTR _pqlen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1090
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1092
	mov	eax, DWORD PTR _result$[ebp]
; Line 1093
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_modmul	ENDP
_TEXT	ENDS
PUBLIC	_decbn
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_bn$ = 8						; size = 4
_decbn	PROC
; Line 1175
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1176
	mov	DWORD PTR _i$[ebp], 1
$LN2@decbn:
; Line 1177
	mov	eax, DWORD PTR _bn$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN1@decbn
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bn$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN1@decbn
; Line 1178
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bn$[ebp]
	mov	DWORD PTR [edx+ecx*4], -1
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN2@decbn
$LN1@decbn:
; Line 1179
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bn$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	sub	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bn$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1180
	mov	esp, ebp
	pop	ebp
	ret	0
_decbn	ENDP
_TEXT	ENDS
PUBLIC	_bignum_from_bytes
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -20						; size = 4
_byte$7751 = -13					; size = 1
_i$ = -12						; size = 4
_w$ = -8						; size = 4
_result$ = -4						; size = 4
_data$ = 8						; size = 4
_nbytes$ = 12						; size = 4
_bignum_from_bytes PROC
; Line 1183
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1187
	cmp	DWORD PTR _nbytes$[ebp], 0
	jl	SHORT $LN10@bignum_fro
	cmp	DWORD PTR _nbytes$[ebp], 268435455	; 0fffffffH
	jl	SHORT $LN11@bignum_fro
$LN10@bignum_fro:
	push	1187					; 000004a3H
	push	OFFSET $SG7743
	push	OFFSET $SG7744
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@bignum_fro:
; Line 1189
	mov	eax, DWORD PTR _nbytes$[ebp]
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _w$[ebp], eax
; Line 1191
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 1192
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@bignum_fro
$LN6@bignum_fro:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@bignum_fro:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _w$[ebp]
	jg	SHORT $LN5@bignum_fro
; Line 1193
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN6@bignum_fro
$LN5@bignum_fro:
; Line 1194
	mov	eax, DWORD PTR _nbytes$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@bignum_fro:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv80[ebp], 0
	je	SHORT $LN2@bignum_fro
; Line 1195
	mov	eax, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _byte$7751[ebp], cl
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx
; Line 1196
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	esi, BYTE PTR _byte$7751[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 3
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN12@bignum_fro
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN12@bignum_fro:
	shl	esi, cl
	mov	edx, DWORD PTR _result$[ebp]
	or	esi, DWORD PTR [edx+eax*4+4]
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], esi
; Line 1197
	jmp	SHORT $LN4@bignum_fro
$LN2@bignum_fro:
; Line 1199
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx], 1
	jbe	SHORT $LN1@bignum_fro
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN1@bignum_fro
; Line 1200
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@bignum_fro
$LN1@bignum_fro:
; Line 1201
	mov	eax, DWORD PTR _result$[ebp]
; Line 1202
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_from_bytes ENDP
_TEXT	ENDS
PUBLIC	_ssh1_read_bignum
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -16						; size = 4
_w$ = -12						; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
_result$ = 16						; size = 4
_ssh1_read_bignum PROC
; Line 1209
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1210
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1214
	cmp	DWORD PTR _len$[ebp], 2
	jge	SHORT $LN6@ssh1_read_
; Line 1215
	or	eax, -1
	jmp	$LN7@ssh1_read_
$LN6@ssh1_read_:
; Line 1217
	mov	DWORD PTR _w$[ebp], 0
; Line 1218
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@ssh1_read_
$LN4@ssh1_read_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@ssh1_read_:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN3@ssh1_read_
; Line 1219
	mov	edx, DWORD PTR _w$[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	edx, ecx
	mov	DWORD PTR _w$[ebp], edx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN4@ssh1_read_
$LN3@ssh1_read_:
; Line 1220
	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _b$[ebp], eax
; Line 1222
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 2
	cmp	DWORD PTR _len$[ebp], eax
	jge	SHORT $LN2@ssh1_read_
; Line 1223
	or	eax, -1
	jmp	SHORT $LN7@ssh1_read_
$LN2@ssh1_read_:
; Line 1225
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN1@ssh1_read_
; Line 1226
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, 2
	jmp	SHORT $LN7@ssh1_read_
$LN1@ssh1_read_:
; Line 1228
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_bignum_from_bytes
	add	esp, 8
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1230
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _data$[ebp]
$LN7@ssh1_read_:
; Line 1231
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ssh1_read_bignum ENDP
_TEXT	ENDS
PUBLIC	_bignum_bitcount
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bitcount$ = -4						; size = 4
_bn$ = 8						; size = 4
_bignum_bitcount PROC
; Line 1237
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1238
	mov	eax, DWORD PTR _bn$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 5
	sub	ecx, 1
	mov	DWORD PTR _bitcount$[ebp], ecx
$LN2@bignum_bit:
; Line 1240
	cmp	DWORD PTR _bitcount$[ebp], 0
	jl	SHORT $LN1@bignum_bit
	mov	eax, DWORD PTR _bitcount$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	mov	ecx, DWORD PTR _bitcount$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN5@bignum_bit
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN5@bignum_bit:
	mov	edx, DWORD PTR _bn$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	shr	eax, cl
	test	eax, eax
	jne	SHORT $LN1@bignum_bit
	mov	ecx, DWORD PTR _bitcount$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _bitcount$[ebp], ecx
	jmp	SHORT $LN2@bignum_bit
$LN1@bignum_bit:
; Line 1241
	mov	eax, DWORD PTR _bitcount$[ebp]
	add	eax, 1
; Line 1242
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_bitcount ENDP
_TEXT	ENDS
PUBLIC	_ssh1_bignum_length
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bn$ = 8						; size = 4
_ssh1_bignum_length PROC
; Line 1248
	push	ebp
	mov	ebp, esp
; Line 1249
	mov	eax, DWORD PTR _bn$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 2
; Line 1250
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ssh1_bignum_length ENDP
_TEXT	ENDS
PUBLIC	_ssh2_bignum_length
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bn$ = 8						; size = 4
_ssh2_bignum_length PROC
; Line 1256
	push	ebp
	mov	ebp, esp
; Line 1257
	mov	eax, DWORD PTR _bn$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	add	eax, 8
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 4
; Line 1258
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ssh2_bignum_length ENDP
_TEXT	ENDS
PUBLIC	_bignum_byte
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bn$ = 8						; size = 4
_i$ = 12						; size = 4
_bignum_byte PROC
; Line 1264
	push	ebp
	mov	ebp, esp
; Line 1265
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@bignum_byt
	mov	eax, DWORD PTR _bn$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN3@bignum_byt
$LN2@bignum_byt:
; Line 1266
	xor	eax, eax
	jmp	SHORT $LN4@bignum_byt
; Line 1267
	jmp	SHORT $LN4@bignum_byt
$LN3@bignum_byt:
; Line 1269
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN6@bignum_byt
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN6@bignum_byt:
	shl	ecx, 3
	mov	edx, DWORD PTR _bn$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	shr	eax, cl
	and	eax, 255				; 000000ffH
$LN4@bignum_byt:
; Line 1270
	pop	ebp
	ret	0
_bignum_byte ENDP
_TEXT	ENDS
PUBLIC	_bignum_bit
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bn$ = 8						; size = 4
_i$ = 12						; size = 4
_bignum_bit PROC
; Line 1276
	push	ebp
	mov	ebp, esp
; Line 1277
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@bignum_bit@2
	mov	eax, DWORD PTR _bn$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 5
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN3@bignum_bit@2
$LN2@bignum_bit@2:
; Line 1278
	xor	eax, eax
	jmp	SHORT $LN4@bignum_bit@2
; Line 1279
	jmp	SHORT $LN4@bignum_bit@2
$LN3@bignum_bit@2:
; Line 1280
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN6@bignum_bit@2
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN6@bignum_bit@2:
	mov	edx, DWORD PTR _bn$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	shr	eax, cl
	and	eax, 1
$LN4@bignum_bit@2:
; Line 1281
	pop	ebp
	ret	0
_bignum_bit ENDP
; Function compile flags: /Odtp /RTCsu
_mask$7815 = -8					; size = 4
_v$7814 = -4						; size = 4
_bn$ = 8						; size = 4
_bitnum$ = 12						; size = 4
_value$ = 16						; size = 4
_bignum_set_bit PROC
; Line 1287
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1288
	cmp	DWORD PTR _bitnum$[ebp], 0
	jl	SHORT $LN4@bignum_set
	mov	eax, DWORD PTR _bn$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 5
	cmp	DWORD PTR _bitnum$[ebp], ecx
	jl	SHORT $LN5@bignum_set
$LN4@bignum_set:
; Line 1289
	call	_abort
; Line 1290
	jmp	SHORT $LN6@bignum_set
$LN5@bignum_set:
; Line 1291
	mov	eax, DWORD PTR _bitnum$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 1
	mov	DWORD PTR _v$7814[ebp], eax
; Line 1292
	mov	ecx, DWORD PTR _bitnum$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN8@bignum_set
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN8@bignum_set:
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _mask$7815[ebp], edx
; Line 1293
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN2@bignum_set
; Line 1294
	mov	eax, DWORD PTR _v$7814[ebp]
	mov	ecx, DWORD PTR _bn$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	or	edx, DWORD PTR _mask$7815[ebp]
	mov	eax, DWORD PTR _v$7814[ebp]
	mov	ecx, DWORD PTR _bn$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1295
	jmp	SHORT $LN6@bignum_set
$LN2@bignum_set:
; Line 1296
	mov	edx, DWORD PTR _mask$7815[ebp]
	not	edx
	mov	eax, DWORD PTR _v$7814[ebp]
	mov	ecx, DWORD PTR _bn$[ebp]
	and	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _v$7814[ebp]
	mov	ecx, DWORD PTR _bn$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN6@bignum_set:
; Line 1298
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_set_bit ENDP
_TEXT	ENDS
PUBLIC	_ssh1_write_bignum
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -20						; size = 4
_bitc$ = -16						; size = 4
_i$ = -12						; size = 4
_len$ = -8						; size = 4
_p$ = -4						; size = 4
_data$ = 8						; size = 4
_bn$ = 12						; size = 4
_ssh1_write_bignum PROC
; Line 1305
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1306
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1307
	mov	ecx, DWORD PTR _bn$[ebp]
	push	ecx
	call	_ssh1_bignum_length
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1309
	mov	edx, DWORD PTR _bn$[ebp]
	push	edx
	call	_bignum_bitcount
	add	esp, 4
	mov	DWORD PTR _bitc$[ebp], eax
; Line 1311
	mov	eax, DWORD PTR _bitc$[ebp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 1312
	mov	eax, DWORD PTR _bitc$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 1313
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 2
	mov	DWORD PTR _i$[ebp], eax
$LN2@ssh1_write:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN1@ssh1_write
; Line 1314
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bn$[ebp]
	push	ecx
	call	_bignum_byte
	add	esp, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN2@ssh1_write
$LN1@ssh1_write:
; Line 1315
	mov	eax, DWORD PTR _len$[ebp]
; Line 1316
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ssh1_write_bignum ENDP
_TEXT	ENDS
PUBLIC	_bignum_cmp
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv130 = -32						; size = 4
tv94 = -28						; size = 4
tv89 = -24						; size = 4
_bval$7850 = -20					; size = 4
_aval$7849 = -16					; size = 4
_i$ = -12						; size = 4
_bmax$ = -8						; size = 4
_amax$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bignum_cmp PROC
; Line 1322
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1323
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _amax$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _bmax$[ebp], eax
; Line 1327
	cmp	DWORD PTR _amax$[ebp], 1
	jne	SHORT $LN6@bignum_cmp
	mov	ecx, DWORD PTR _amax$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN6@bignum_cmp
; Line 1328
	mov	DWORD PTR _amax$[ebp], 0
$LN6@bignum_cmp:
; Line 1329
	cmp	DWORD PTR _bmax$[ebp], 1
	jne	SHORT $LN5@bignum_cmp
	mov	eax, DWORD PTR _bmax$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN5@bignum_cmp
; Line 1330
	mov	DWORD PTR _bmax$[ebp], 0
$LN5@bignum_cmp:
; Line 1332
	cmp	DWORD PTR _amax$[ebp], 0
	je	SHORT $LN9@bignum_cmp
	mov	edx, DWORD PTR _amax$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN9@bignum_cmp
	push	1332					; 00000534H
	push	OFFSET $SG7841
	push	OFFSET $SG7842
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@bignum_cmp:
; Line 1333
	cmp	DWORD PTR _bmax$[ebp], 0
	je	SHORT $LN10@bignum_cmp
	mov	edx, DWORD PTR _bmax$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN10@bignum_cmp
	push	1333					; 00000535H
	push	OFFSET $SG7844
	push	OFFSET $SG7845
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@bignum_cmp:
; Line 1335
	mov	edx, DWORD PTR _amax$[ebp]
	cmp	edx, DWORD PTR _bmax$[ebp]
	jle	SHORT $LN11@bignum_cmp
	mov	eax, DWORD PTR _amax$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN12@bignum_cmp
$LN11@bignum_cmp:
	mov	ecx, DWORD PTR _bmax$[ebp]
	mov	DWORD PTR tv89[ebp], ecx
$LN12@bignum_cmp:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _i$[ebp], edx
$LN4@bignum_cmp:
; Line 1336
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN3@bignum_cmp
; Line 1337
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _amax$[ebp]
	jle	SHORT $LN13@bignum_cmp
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN14@bignum_cmp
$LN13@bignum_cmp:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv94[ebp], eax
$LN14@bignum_cmp:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _aval$7849[ebp], ecx
; Line 1338
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _bmax$[ebp]
	jle	SHORT $LN15@bignum_cmp
	mov	DWORD PTR tv130[ebp], 0
	jmp	SHORT $LN16@bignum_cmp
$LN15@bignum_cmp:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv130[ebp], edx
$LN16@bignum_cmp:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _bval$7850[ebp], eax
; Line 1339
	mov	ecx, DWORD PTR _aval$7849[ebp]
	cmp	ecx, DWORD PTR _bval$7850[ebp]
	jae	SHORT $LN2@bignum_cmp
; Line 1340
	or	eax, -1
	jmp	SHORT $LN7@bignum_cmp
$LN2@bignum_cmp:
; Line 1341
	mov	edx, DWORD PTR _aval$7849[ebp]
	cmp	edx, DWORD PTR _bval$7850[ebp]
	jbe	SHORT $LN1@bignum_cmp
; Line 1342
	mov	eax, 1
	jmp	SHORT $LN7@bignum_cmp
$LN1@bignum_cmp:
; Line 1343
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1344
	jmp	SHORT $LN4@bignum_cmp
$LN3@bignum_cmp:
; Line 1345
	xor	eax, eax
$LN7@bignum_cmp:
; Line 1346
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_cmp ENDP
_TEXT	ENDS
PUBLIC	_bignum_rshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv93 = -36						; size = 4
_ai1$ = -32						; size = 4
_ai$ = -28						; size = 4
_bits$ = -24						; size = 4
_shiftbb$ = -20						; size = 4
_shiftb$ = -16						; size = 4
_shiftw$ = -12						; size = 4
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_a$ = 8							; size = 4
_shift$ = 12						; size = 4
_bignum_rshift PROC
; Line 1352
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1357
	cmp	DWORD PTR _shift$[ebp], 0
	jge	SHORT $LN7@bignum_rsh
	push	1357					; 0000054dH
	push	OFFSET $SG7867
	push	OFFSET $SG7868
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@bignum_rsh:
; Line 1359
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_bignum_bitcount
	add	esp, 4
	sub	eax, DWORD PTR _shift$[ebp]
	mov	DWORD PTR _bits$[ebp], eax
; Line 1360
	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 31					; 0000001fH
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	push	eax
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1362
	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN4@bignum_rsh
; Line 1363
	mov	eax, DWORD PTR _shift$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	mov	DWORD PTR _shiftw$[ebp], eax
; Line 1364
	mov	edx, DWORD PTR _shift$[ebp]
	and	edx, -2147483617			; 8000001fH
	jns	SHORT $LN10@bignum_rsh
	dec	edx
	or	edx, -32				; ffffffe0H
	inc	edx
$LN10@bignum_rsh:
	mov	DWORD PTR _shiftb$[ebp], edx
; Line 1365
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _shiftb$[ebp]
	mov	DWORD PTR _shiftbb$[ebp], eax
; Line 1367
	mov	ecx, DWORD PTR _shiftw$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _ai1$[ebp], eax
; Line 1368
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@bignum_rsh
$LN2@bignum_rsh:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@bignum_rsh:
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN4@bignum_rsh
; Line 1369
	mov	ecx, DWORD PTR _ai1$[ebp]
	mov	DWORD PTR _ai$[ebp], ecx
; Line 1370
	mov	edx, DWORD PTR _shiftw$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jg	SHORT $LN8@bignum_rsh
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _shiftw$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN9@bignum_rsh
$LN8@bignum_rsh:
	mov	DWORD PTR tv93[ebp], 0
$LN9@bignum_rsh:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR _ai1$[ebp], eax
; Line 1371
	mov	edx, DWORD PTR _ai$[ebp]
	mov	ecx, DWORD PTR _shiftb$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _ai1$[ebp]
	mov	ecx, DWORD PTR _shiftbb$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 1372
	jmp	SHORT $LN2@bignum_rsh
$LN4@bignum_rsh:
; Line 1375
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1376
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_rshift ENDP
_TEXT	ENDS
PUBLIC	_bigmuladd
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv175 = -68						; size = 4
tv169 = -64						; size = 4
tv159 = -60						; size = 4
tv93 = -56						; size = 4
tv84 = -52						; size = 4
tv65 = -48						; size = 4
_carry$7906 = -44					; size = 8
_ret$ = -36						; size = 4
_workspace$ = -32					; size = 4
_wslen$ = -28						; size = 4
_maxspot$ = -24						; size = 4
_i$ = -20						; size = 4
_rlen$ = -16						; size = 4
_mlen$ = -12						; size = 4
_blen$ = -8						; size = 4
_alen$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_addend$ = 16						; size = 4
_bigmuladd PROC
; Line 1382
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1383
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _alen$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _blen$[ebp], eax
; Line 1384
	mov	ecx, DWORD PTR _alen$[ebp]
	cmp	ecx, DWORD PTR _blen$[ebp]
	jle	SHORT $LN16@bigmuladd
	mov	edx, DWORD PTR _alen$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	jmp	SHORT $LN17@bigmuladd
$LN16@bigmuladd:
	mov	eax, DWORD PTR _blen$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN17@bigmuladd:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _mlen$[ebp], ecx
; Line 1392
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	call	_mul_compute_scratch
	add	esp, 4
	mov	ecx, DWORD PTR _mlen$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _wslen$[ebp], edx
; Line 1393
	push	4
	mov	eax, DWORD PTR _wslen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _workspace$[ebp], eax
; Line 1394
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@bigmuladd
$LN12@bigmuladd:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@bigmuladd:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _mlen$[ebp]
	jge	SHORT $LN11@bigmuladd
; Line 1395
	mov	eax, DWORD PTR _mlen$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR [ecx]
	jg	SHORT $LN18@bigmuladd
	mov	edx, DWORD PTR _mlen$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN19@bigmuladd
$LN18@bigmuladd:
	mov	DWORD PTR tv84[ebp], 0
$LN19@bigmuladd:
	mov	edx, DWORD PTR _mlen$[ebp]
	imul	edx, 0
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _workspace$[ebp]
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1396
	mov	edx, DWORD PTR _mlen$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	cmp	edx, DWORD PTR [eax]
	jg	SHORT $LN20@bigmuladd
	mov	ecx, DWORD PTR _mlen$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN21@bigmuladd
$LN20@bigmuladd:
	mov	DWORD PTR tv93[ebp], 0
$LN21@bigmuladd:
	mov	ecx, DWORD PTR _mlen$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _workspace$[ebp]
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1397
	jmp	SHORT $LN12@bigmuladd
$LN11@bigmuladd:
; Line 1400
	mov	ecx, DWORD PTR _mlen$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _workspace$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _mlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mlen$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _workspace$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _mlen$[ebp]
	mov	eax, DWORD PTR _workspace$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _mlen$[ebp]
	imul	edx, 0
	mov	eax, DWORD PTR _workspace$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_internal_mul
	add	esp, 20					; 00000014H
; Line 1403
	mov	edx, DWORD PTR _blen$[ebp]
	mov	eax, DWORD PTR _alen$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _rlen$[ebp], ecx
; Line 1404
	cmp	DWORD PTR _addend$[ebp], 0
	je	SHORT $LN10@bigmuladd
	mov	edx, DWORD PTR _addend$[ebp]
	mov	eax, DWORD PTR _rlen$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN10@bigmuladd
; Line 1405
	mov	ecx, DWORD PTR _addend$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	DWORD PTR _rlen$[ebp], edx
$LN10@bigmuladd:
; Line 1406
	mov	eax, DWORD PTR _rlen$[ebp]
	push	eax
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1407
	mov	DWORD PTR _maxspot$[ebp], 0
; Line 1408
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN9@bigmuladd
$LN8@bigmuladd:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@bigmuladd:
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN7@bigmuladd
; Line 1409
	mov	ecx, DWORD PTR _mlen$[ebp]
	shl	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jg	SHORT $LN22@bigmuladd
	mov	edx, DWORD PTR _mlen$[ebp]
	shl	edx, 2
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _workspace$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv159[ebp], ecx
	jmp	SHORT $LN23@bigmuladd
$LN22@bigmuladd:
	mov	DWORD PTR tv159[ebp], 0
$LN23@bigmuladd:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1410
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN6@bigmuladd
; Line 1411
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _maxspot$[ebp], ecx
$LN6@bigmuladd:
; Line 1412
	jmp	SHORT $LN8@bigmuladd
$LN7@bigmuladd:
; Line 1413
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _maxspot$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1416
	cmp	DWORD PTR _addend$[ebp], 0
	je	$LN5@bigmuladd
; Line 1417
	mov	DWORD PTR _carry$7906[ebp], 0
	mov	DWORD PTR _carry$7906[ebp+4], 0
; Line 1418
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@bigmuladd
$LN3@bigmuladd:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@bigmuladd:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _rlen$[ebp]
	jg	$LN5@bigmuladd
; Line 1419
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN24@bigmuladd
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv169[ebp], ecx
	jmp	SHORT $LN25@bigmuladd
$LN24@bigmuladd:
	mov	DWORD PTR tv169[ebp], 0
$LN25@bigmuladd:
	mov	edx, DWORD PTR tv169[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _carry$7906[ebp]
	adc	eax, DWORD PTR _carry$7906[ebp+4]
	mov	DWORD PTR _carry$7906[ebp], edx
	mov	DWORD PTR _carry$7906[ebp+4], eax
; Line 1420
	mov	ecx, DWORD PTR _addend$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN26@bigmuladd
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _addend$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv175[ebp], edx
	jmp	SHORT $LN27@bigmuladd
$LN26@bigmuladd:
	mov	DWORD PTR tv175[ebp], 0
$LN27@bigmuladd:
	mov	eax, DWORD PTR tv175[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _carry$7906[ebp]
	adc	ecx, DWORD PTR _carry$7906[ebp+4]
	mov	DWORD PTR _carry$7906[ebp], eax
	mov	DWORD PTR _carry$7906[ebp+4], ecx
; Line 1421
	mov	edx, DWORD PTR _carry$7906[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1422
	mov	eax, DWORD PTR _carry$7906[ebp]
	mov	edx, DWORD PTR _carry$7906[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$7906[ebp], eax
	mov	DWORD PTR _carry$7906[ebp+4], edx
; Line 1423
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN1@bigmuladd
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _maxspot$[ebp]
	jle	SHORT $LN1@bigmuladd
; Line 1424
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _maxspot$[ebp], edx
$LN1@bigmuladd:
; Line 1425
	jmp	$LN3@bigmuladd
$LN5@bigmuladd:
; Line 1427
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _maxspot$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1429
	mov	edx, DWORD PTR _wslen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _workspace$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1430
	mov	ecx, DWORD PTR _workspace$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1431
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1432
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bigmuladd ENDP
_TEXT	ENDS
PUBLIC	_bigmul
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bigmul	PROC
; Line 1438
	push	ebp
	mov	ebp, esp
; Line 1439
	push	0
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_bigmuladd
	add	esp, 12					; 0000000cH
; Line 1440
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_bigmul	ENDP
_TEXT	ENDS
PUBLIC	_bigadd
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -44						; size = 4
tv74 = -40						; size = 4
tv65 = -36						; size = 4
_carry$ = -32						; size = 8
_ret$ = -24						; size = 4
_maxspot$ = -20						; size = 4
_i$ = -16						; size = 4
_rlen$ = -12						; size = 4
_blen$ = -8						; size = 4
_alen$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bigadd	PROC
; Line 1446
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1447
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _alen$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _blen$[ebp], eax
; Line 1448
	mov	ecx, DWORD PTR _alen$[ebp]
	cmp	ecx, DWORD PTR _blen$[ebp]
	jle	SHORT $LN7@bigadd
	mov	edx, DWORD PTR _alen$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	jmp	SHORT $LN8@bigadd
$LN7@bigadd:
	mov	eax, DWORD PTR _blen$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN8@bigadd:
	mov	ecx, DWORD PTR tv65[ebp]
	add	ecx, 1
	mov	DWORD PTR _rlen$[ebp], ecx
; Line 1453
	mov	edx, DWORD PTR _rlen$[ebp]
	push	edx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1455
	mov	DWORD PTR _carry$[ebp], 0
	mov	DWORD PTR _carry$[ebp+4], 0
; Line 1456
	mov	DWORD PTR _maxspot$[ebp], 0
; Line 1457
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@bigadd
$LN3@bigadd:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@bigadd:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _rlen$[ebp]
	jg	$LN2@bigadd
; Line 1458
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN9@bigadd
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN10@bigadd
$LN9@bigadd:
	mov	DWORD PTR tv74[ebp], 0
$LN10@bigadd:
	mov	ecx, DWORD PTR tv74[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _carry$[ebp]
	adc	edx, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], ecx
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1459
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN11@bigadd
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN12@bigadd
$LN11@bigadd:
	mov	DWORD PTR tv80[ebp], 0
$LN12@bigadd:
	mov	edx, DWORD PTR tv80[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _carry$[ebp]
	adc	eax, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], edx
	mov	DWORD PTR _carry$[ebp+4], eax
; Line 1460
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1461
	mov	eax, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _carry$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1462
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN1@bigadd
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _maxspot$[ebp]
	jle	SHORT $LN1@bigadd
; Line 1463
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _maxspot$[ebp], ecx
$LN1@bigadd:
; Line 1464
	jmp	$LN3@bigadd
$LN2@bigadd:
; Line 1465
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _maxspot$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1467
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1468
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bigadd	ENDP
_TEXT	ENDS
PUBLIC	_bigsub
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -44						; size = 4
tv73 = -40						; size = 4
tv65 = -36						; size = 4
_carry$ = -32						; size = 8
_ret$ = -24						; size = 4
_maxspot$ = -20						; size = 4
_i$ = -16						; size = 4
_rlen$ = -12						; size = 4
_blen$ = -8						; size = 4
_alen$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bigsub	PROC
; Line 1476
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1477
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _alen$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _blen$[ebp], eax
; Line 1478
	mov	ecx, DWORD PTR _alen$[ebp]
	cmp	ecx, DWORD PTR _blen$[ebp]
	jle	SHORT $LN8@bigsub
	mov	edx, DWORD PTR _alen$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	jmp	SHORT $LN9@bigsub
$LN8@bigsub:
	mov	eax, DWORD PTR _blen$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN9@bigsub:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _rlen$[ebp], ecx
; Line 1483
	mov	edx, DWORD PTR _rlen$[ebp]
	push	edx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1485
	mov	DWORD PTR _carry$[ebp], 1
	mov	DWORD PTR _carry$[ebp+4], 0
; Line 1486
	mov	DWORD PTR _maxspot$[ebp], 0
; Line 1487
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN5@bigsub
$LN4@bigsub:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@bigsub:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _rlen$[ebp]
	jg	$LN3@bigsub
; Line 1488
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN10@bigsub
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN11@bigsub
$LN10@bigsub:
	mov	DWORD PTR tv73[ebp], 0
$LN11@bigsub:
	mov	ecx, DWORD PTR tv73[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _carry$[ebp]
	adc	edx, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], ecx
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1489
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN12@bigsub
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	xor	ecx, -1
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN13@bigsub
$LN12@bigsub:
	mov	DWORD PTR tv80[ebp], -1
$LN13@bigsub:
	mov	edx, DWORD PTR tv80[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _carry$[ebp]
	adc	eax, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], edx
	mov	DWORD PTR _carry$[ebp+4], eax
; Line 1490
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1491
	mov	eax, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _carry$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1492
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN2@bigsub
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _maxspot$[ebp]
	jle	SHORT $LN2@bigsub
; Line 1493
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _maxspot$[ebp], ecx
$LN2@bigsub:
; Line 1494
	jmp	$LN4@bigsub
$LN3@bigsub:
; Line 1495
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _maxspot$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1497
	mov	ecx, DWORD PTR _carry$[ebp]
	or	ecx, DWORD PTR _carry$[ebp+4]
	jne	SHORT $LN1@bigsub
; Line 1498
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 1499
	xor	eax, eax
	jmp	SHORT $LN6@bigsub
$LN1@bigsub:
; Line 1502
	mov	eax, DWORD PTR _ret$[ebp]
$LN6@bigsub:
; Line 1503
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bigsub	ENDP
_TEXT	ENDS
PUBLIC	_bignum_bitmask
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_n$ = 8							; size = 4
_bignum_bitmask PROC
; Line 1511
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1512
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1516
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _i$[ebp], edx
$LN7@bignum_bit@3:
; Line 1517
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN6@bignum_bit@3
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN6@bignum_bit@3
; Line 1518
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN7@bignum_bit@3
$LN6@bignum_bit@3:
; Line 1519
	cmp	DWORD PTR _i$[ebp], 0
	jg	SHORT $LN5@bignum_bit@3
; Line 1520
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN8@bignum_bit@3
$LN5@bignum_bit@3:
; Line 1521
	mov	DWORD PTR _j$[ebp], 1
$LN4@bignum_bit@3:
; Line 1522
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jae	SHORT $LN3@bignum_bit@3
; Line 1523
	mov	eax, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN4@bignum_bit@3
$LN3@bignum_bit@3:
; Line 1524
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
$LN2@bignum_bit@3:
; Line 1525
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN1@bignum_bit@3
; Line 1526
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+eax*4], -1
	jmp	SHORT $LN2@bignum_bit@3
$LN1@bignum_bit@3:
; Line 1527
	mov	eax, DWORD PTR _ret$[ebp]
$LN8@bignum_bit@3:
; Line 1528
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_bitmask ENDP
_TEXT	ENDS
PUBLIC	_bignum_from_long
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -12						; size = 8
_ret$ = -4						; size = 4
_nn$ = 8						; size = 4
_bignum_from_long PROC
; Line 1534
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1536
	mov	eax, DWORD PTR _nn$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _n$[ebp], eax
	mov	DWORD PTR _n$[ebp+4], ecx
; Line 1538
	push	3
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1539
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _n$[ebp+4]
	and	eax, 0
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1540
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _n$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	and	edx, 0
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 1541
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1542
	mov	ecx, DWORD PTR _ret$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+8], 0
	setne	dl
	add	edx, 1
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1543
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1544
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_from_long ENDP
_TEXT	ENDS
PUBLIC	_bignum_add_long
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -32						; size = 4
_addend$ = -28						; size = 8
_carry$ = -20						; size = 8
_maxspot$ = -12						; size = 4
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_number$ = 8						; size = 4
_addendx$ = 12						; size = 4
_bignum_add_long PROC
; Line 1550
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1551
	mov	eax, DWORD PTR _number$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
; Line 1552
	mov	DWORD PTR _maxspot$[ebp], 0
; Line 1553
	mov	DWORD PTR _carry$[ebp], 0
	mov	DWORD PTR _carry$[ebp+4], 0
	mov	edx, DWORD PTR _addendx$[ebp]
	xor	eax, eax
	mov	DWORD PTR _addend$[ebp], edx
	mov	DWORD PTR _addend$[ebp+4], eax
; Line 1555
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@bignum_add
$LN3@bignum_add:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@bignum_add:
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	$LN2@bignum_add
; Line 1556
	mov	ecx, DWORD PTR _addend$[ebp]
	mov	edx, DWORD PTR _addend$[ebp+4]
	and	edx, 0
	add	ecx, DWORD PTR _carry$[ebp]
	adc	edx, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], ecx
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1557
	mov	eax, DWORD PTR _number$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN7@bignum_add
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _number$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN8@bignum_add
$LN7@bignum_add:
	mov	DWORD PTR tv75[ebp], 0
$LN8@bignum_add:
	mov	edx, DWORD PTR tv75[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _carry$[ebp]
	adc	eax, DWORD PTR _carry$[ebp+4]
	mov	DWORD PTR _carry$[ebp], edx
	mov	DWORD PTR _carry$[ebp+4], eax
; Line 1558
	mov	eax, DWORD PTR _addend$[ebp]
	mov	edx, DWORD PTR _addend$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _addend$[ebp], eax
	mov	DWORD PTR _addend$[ebp+4], edx
; Line 1559
	mov	ecx, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1560
	mov	eax, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _carry$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1561
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN1@bignum_add
; Line 1562
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _maxspot$[ebp], eax
$LN1@bignum_add:
; Line 1563
	jmp	$LN3@bignum_add
$LN2@bignum_add:
; Line 1564
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _maxspot$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1565
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1566
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_add_long ENDP
_TEXT	ENDS
PUBLIC	_bignum_mod_short
EXTRN	__allmul:PROC
EXTRN	__aullrem:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -20						; size = 4
_r$ = -16						; size = 8
_mod$ = -8						; size = 8
_number$ = 8						; size = 4
_modulus$ = 12						; size = 2
_bignum_mod_short PROC
; Line 1572
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1576
	mov	DWORD PTR _r$[ebp], 0
	mov	DWORD PTR _r$[ebp+4], 0
; Line 1577
	movzx	eax, WORD PTR _modulus$[ebp]
	cdq
	mov	DWORD PTR _mod$[ebp], eax
	mov	DWORD PTR _mod$[ebp+4], edx
; Line 1578
	mov	eax, DWORD PTR _number$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@bignum_mod
$LN2@bignum_mod:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@bignum_mod:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN1@bignum_mod
; Line 1579
	mov	eax, DWORD PTR _mod$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	push	0
	push	-2147483648				; 80000000H
	call	__aullrem
	push	edx
	push	eax
	mov	edx, DWORD PTR _r$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__allmul
	push	0
	push	2
	push	edx
	push	eax
	call	__allmul
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _number$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	xor	ecx, ecx
	mov	edx, DWORD PTR _mod$[ebp+4]
	push	edx
	mov	edx, DWORD PTR _mod$[ebp]
	push	edx
	push	ecx
	push	eax
	call	__aullrem
	add	esi, eax
	adc	edi, edx
	mov	eax, DWORD PTR _mod$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _mod$[ebp]
	push	ecx
	push	edi
	push	esi
	call	__aullrem
	mov	DWORD PTR _r$[ebp], eax
	mov	DWORD PTR _r$[ebp+4], edx
	jmp	SHORT $LN2@bignum_mod
$LN1@bignum_mod:
; Line 1580
	mov	ax, WORD PTR _r$[ebp]
; Line 1581
	pop	edi
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_mod_short ENDP
_TEXT	ENDS
PUBLIC	_bigdiv
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_q$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bigdiv	PROC
; Line 1610
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1611
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _q$[ebp], eax
; Line 1612
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_bigdivmod
	add	esp, 16					; 00000010H
$LN2@bigdiv:
; Line 1613
	mov	edx, DWORD PTR _q$[ebp]
	cmp	DWORD PTR [edx], 1
	jbe	SHORT $LN1@bigdiv
	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _q$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN1@bigdiv
; Line 1614
	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@bigdiv
$LN1@bigdiv:
; Line 1615
	mov	eax, DWORD PTR _q$[ebp]
; Line 1616
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bigdiv	ENDP
; Function compile flags: /Odtp /RTCsu
tv216 = -36						; size = 4
_j$7725 = -32						; size = 4
_j$ = -28						; size = 4
_i$ = -24						; size = 4
_mlen$ = -20						; size = 4
_plen$ = -16						; size = 4
_mshift$ = -12						; size = 4
_m$ = -8						; size = 4
_n$ = -4						; size = 4
_p$ = 8							; size = 4
_mod$ = 12						; size = 4
_result$ = 16						; size = 4
_quotient$ = 20						; size = 4
_bigdivmod PROC
; Line 1103
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1112
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _mod$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN32@bigdivmod
	push	1112					; 00000458H
	push	OFFSET $SG7688
	push	OFFSET $SG7689
	call	__wassert
	add	esp, 12					; 0000000cH
$LN32@bigdivmod:
; Line 1116
	mov	ecx, DWORD PTR _mod$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _mlen$[ebp], edx
; Line 1117
	push	4
	mov	eax, DWORD PTR _mlen$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _m$[ebp], eax
; Line 1118
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN29@bigdivmod
$LN28@bigdivmod:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN29@bigdivmod:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _mlen$[ebp]
	jge	SHORT $LN27@bigdivmod
; Line 1119
	mov	eax, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	esi, DWORD PTR _mod$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN28@bigdivmod
$LN27@bigdivmod:
; Line 1122
	mov	DWORD PTR _mshift$[ebp], 0
	jmp	SHORT $LN26@bigdivmod
$LN25@bigdivmod:
	mov	edx, DWORD PTR _mshift$[ebp]
	add	edx, 1
	mov	DWORD PTR _mshift$[ebp], edx
$LN26@bigdivmod:
	cmp	DWORD PTR _mshift$[ebp], 31		; 0000001fH
	jge	SHORT $LN24@bigdivmod
; Line 1123
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	and	edx, -2147483648			; 80000000H
	je	SHORT $LN23@bigdivmod
; Line 1124
	jmp	SHORT $LN24@bigdivmod
$LN23@bigdivmod:
; Line 1125
	jmp	SHORT $LN25@bigdivmod
$LN24@bigdivmod:
	cmp	DWORD PTR _mshift$[ebp], 0
	je	SHORT $LN22@bigdivmod
; Line 1126
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@bigdivmod
$LN20@bigdivmod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@bigdivmod:
	mov	ecx, DWORD PTR _mlen$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN19@bigdivmod
; Line 1127
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4]
	shr	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN20@bigdivmod
$LN19@bigdivmod:
; Line 1128
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [edx+ecx*4-4], eax
$LN22@bigdivmod:
; Line 1131
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _plen$[ebp], ecx
; Line 1133
	mov	edx, DWORD PTR _plen$[ebp]
	cmp	edx, DWORD PTR _mlen$[ebp]
	jg	SHORT $LN18@bigdivmod
; Line 1134
	mov	eax, DWORD PTR _mlen$[ebp]
	add	eax, 1
	mov	DWORD PTR _plen$[ebp], eax
$LN18@bigdivmod:
; Line 1137
	push	4
	mov	ecx, DWORD PTR _plen$[ebp]
	push	ecx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _n$[ebp], eax
; Line 1138
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN17@bigdivmod
$LN16@bigdivmod:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN17@bigdivmod:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _plen$[ebp]
	jge	SHORT $LN15@bigdivmod
; Line 1139
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	jmp	SHORT $LN16@bigdivmod
$LN15@bigdivmod:
; Line 1140
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN14@bigdivmod
$LN13@bigdivmod:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@bigdivmod:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN12@bigdivmod
; Line 1141
	mov	eax, DWORD PTR _plen$[ebp]
	sub	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN13@bigdivmod
$LN12@bigdivmod:
; Line 1144
	mov	eax, DWORD PTR _mshift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _quotient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _plen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 1147
	cmp	DWORD PTR _mshift$[ebp], 0
	je	$LN11@bigdivmod
; Line 1148
	mov	eax, DWORD PTR _plen$[ebp]
	sub	eax, DWORD PTR _mlen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN10@bigdivmod
$LN9@bigdivmod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN10@bigdivmod:
	mov	edx, DWORD PTR _plen$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN8@bigdivmod
; Line 1149
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4]
	shr	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN9@bigdivmod
$LN8@bigdivmod:
; Line 1150
	mov	ecx, DWORD PTR _plen$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _plen$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*4-4], eax
; Line 1151
	push	0
	mov	eax, DWORD PTR _quotient$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mlen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _plen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_internal_mod
	add	esp, 24					; 00000018H
; Line 1152
	mov	edx, DWORD PTR _plen$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN7@bigdivmod
$LN6@bigdivmod:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@bigdivmod:
	mov	ecx, DWORD PTR _plen$[ebp]
	sub	ecx, DWORD PTR _mlen$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jl	SHORT $LN11@bigdivmod
; Line 1153
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _mshift$[ebp]
	shr	edx, cl
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _mshift$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [esi+eax*4-4]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN6@bigdivmod
$LN11@bigdivmod:
; Line 1157
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@bigdivmod
; Line 1158
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@bigdivmod
$LN2@bigdivmod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@bigdivmod:
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	SHORT $LN4@bigdivmod
; Line 1159
	mov	ecx, DWORD PTR _plen$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _j$7725[ebp], ecx
; Line 1160
	js	SHORT $LN33@bigdivmod
	mov	edx, DWORD PTR _j$7725[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv216[ebp], ecx
	jmp	SHORT $LN34@bigdivmod
$LN33@bigdivmod:
	mov	DWORD PTR tv216[ebp], 0
$LN34@bigdivmod:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR tv216[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1161
	jmp	SHORT $LN2@bigdivmod
$LN4@bigdivmod:
; Line 1165
	mov	edx, DWORD PTR _mlen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1166
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1167
	mov	edx, DWORD PTR _plen$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	_smemclr
	add	esp, 8
; Line 1168
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
; Line 1169
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bigdivmod ENDP
; Function compile flags: /Odtp /RTCsu
_r$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bigmod	PROC
; Line 1622
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1623
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _r$[ebp], eax
; Line 1624
	push	0
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_bigdivmod
	add	esp, 16					; 00000010H
$LN2@bigmod:
; Line 1625
	mov	edx, DWORD PTR _r$[ebp]
	cmp	DWORD PTR [edx], 1
	jbe	SHORT $LN1@bigmod
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _r$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN1@bigmod
; Line 1626
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN2@bigmod
$LN1@bigmod:
; Line 1627
	mov	eax, DWORD PTR _r$[ebp]
; Line 1628
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bigmod	ENDP
_TEXT	ENDS
PUBLIC	_biggcd
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t$8042 = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_av$ = 8						; size = 4
_bv$ = 12						; size = 4
_biggcd	PROC
; Line 1634
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1635
	mov	eax, DWORD PTR _av$[ebp]
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _a$[ebp], eax
; Line 1636
	mov	ecx, DWORD PTR _bv$[ebp]
	push	ecx
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
$LN4@biggcd:
; Line 1638
	mov	edx, DWORD PTR _Zero
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@biggcd
; Line 1639
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _t$8042[ebp], eax
; Line 1640
	push	0
	mov	eax, DWORD PTR _t$8042[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_bigdivmod
	add	esp, 16					; 00000010H
$LN2@biggcd:
; Line 1641
	mov	eax, DWORD PTR _t$8042[ebp]
	cmp	DWORD PTR [eax], 1
	jbe	SHORT $LN1@biggcd
	mov	ecx, DWORD PTR _t$8042[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _t$8042[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN1@biggcd
; Line 1642
	mov	ecx, DWORD PTR _t$8042[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _t$8042[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@biggcd
$LN1@biggcd:
; Line 1643
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1644
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx
; Line 1645
	mov	eax, DWORD PTR _t$8042[ebp]
	mov	DWORD PTR _b$[ebp], eax
; Line 1646
	jmp	SHORT $LN4@biggcd
$LN3@biggcd:
; Line 1648
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1649
	mov	eax, DWORD PTR _a$[ebp]
; Line 1650
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_biggcd	ENDP
; Function compile flags: /Odtp /RTCsu
tv186 = -64						; size = 4
tv171 = -60						; size = 4
tv167 = -56						; size = 4
_bword$8087 = -52					; size = 4
_aword$8085 = -48					; size = 4
_i$8080 = -44						; size = 4
_maxspot$8079 = -40					; size = 4
_carry$8078 = -36					; size = 4
_newx$8077 = -32					; size = 4
_q$8067 = -28						; size = 4
_t$8066 = -24						; size = 4
_sign$ = -20						; size = 4
_x$ = -16						; size = 4
_xp$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_number$ = 8						; size = 4
_modulus$ = 12						; size = 4
_modinv	PROC
; Line 1656
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1657
	mov	eax, DWORD PTR _modulus$[ebp]
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _a$[ebp], eax
; Line 1658
	mov	ecx, DWORD PTR _number$[ebp]
	push	ecx
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _b$[ebp], eax
; Line 1659
	mov	edx, DWORD PTR _Zero
	push	edx
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _xp$[ebp], eax
; Line 1660
	mov	eax, DWORD PTR _One
	push	eax
	call	_copybn
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax
; Line 1661
	mov	DWORD PTR _sign$[ebp], 1
; Line 1663
	mov	ecx, DWORD PTR _number$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _number$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	jne	SHORT $LN15@modinv
	push	1663					; 0000067fH
	push	OFFSET $SG8058
	push	OFFSET $SG8059
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@modinv:
; Line 1664
	mov	edx, DWORD PTR _modulus$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _modulus$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN12@modinv
	push	1664					; 00000680H
	push	OFFSET $SG8061
	push	OFFSET $SG8062
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@modinv:
; Line 1666
	mov	eax, DWORD PTR _One
	push	eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	je	$LN11@modinv
; Line 1669
	mov	edx, DWORD PTR _Zero
	push	edx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	call	_bignum_cmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@modinv
; Line 1674
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1675
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 1676
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 1677
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1678
	xor	eax, eax
	jmp	$LN13@modinv
$LN10@modinv:
; Line 1681
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _t$8066[ebp], eax
; Line 1682
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _q$8067[ebp], eax
; Line 1683
	mov	eax, DWORD PTR _q$8067[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$8066[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_bigdivmod
	add	esp, 16					; 00000010H
$LN9@modinv:
; Line 1684
	mov	ecx, DWORD PTR _t$8066[ebp]
	cmp	DWORD PTR [ecx], 1
	jbe	SHORT $LN7@modinv
	mov	edx, DWORD PTR _t$8066[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _t$8066[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN7@modinv
; Line 1685
	mov	edx, DWORD PTR _t$8066[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _t$8066[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN9@modinv
$LN7@modinv:
; Line 1686
	mov	edx, DWORD PTR _q$8067[ebp]
	cmp	DWORD PTR [edx], 1
	jbe	SHORT $LN6@modinv
	mov	eax, DWORD PTR _q$8067[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _q$8067[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN6@modinv
; Line 1687
	mov	eax, DWORD PTR _q$8067[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _q$8067[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN7@modinv
$LN6@modinv:
; Line 1688
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 1689
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], ecx
; Line 1690
	mov	edx, DWORD PTR _t$8066[ebp]
	mov	DWORD PTR _b$[ebp], edx
; Line 1691
	mov	eax, DWORD PTR _xp$[ebp]
	mov	DWORD PTR _t$8066[ebp], eax
; Line 1692
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xp$[ebp], ecx
; Line 1693
	mov	edx, DWORD PTR _t$8066[ebp]
	push	edx
	mov	eax, DWORD PTR _xp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$8067[ebp]
	push	ecx
	call	_bigmuladd
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _x$[ebp], eax
; Line 1694
	mov	edx, DWORD PTR _sign$[ebp]
	neg	edx
	mov	DWORD PTR _sign$[ebp], edx
; Line 1695
	mov	eax, DWORD PTR _t$8066[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 1696
	mov	ecx, DWORD PTR _q$8067[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1697
	jmp	$LN12@modinv
$LN11@modinv:
; Line 1699
	mov	edx, DWORD PTR _b$[ebp]
	push	edx
	call	_freebn
	add	esp, 4
; Line 1700
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_freebn
	add	esp, 4
; Line 1701
	mov	ecx, DWORD PTR _xp$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1704
	cmp	DWORD PTR _sign$[ebp], 0
	jge	$LN5@modinv
; Line 1706
	mov	edx, DWORD PTR _modulus$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_newbn
	add	esp, 4
	mov	DWORD PTR _newx$8077[ebp], eax
; Line 1707
	mov	DWORD PTR _carry$8078[ebp], 0
; Line 1708
	mov	DWORD PTR _maxspot$8079[ebp], 1
; Line 1711
	mov	DWORD PTR _i$8080[ebp], 1
	jmp	SHORT $LN4@modinv
$LN3@modinv:
	mov	ecx, DWORD PTR _i$8080[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$8080[ebp], ecx
$LN4@modinv:
	mov	edx, DWORD PTR _newx$8077[ebp]
	mov	eax, DWORD PTR _i$8080[ebp]
	cmp	eax, DWORD PTR [edx]
	jg	$LN2@modinv
; Line 1712
	mov	ecx, DWORD PTR _modulus$[ebp]
	mov	edx, DWORD PTR _i$8080[ebp]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN17@modinv
	mov	eax, DWORD PTR _i$8080[ebp]
	mov	ecx, DWORD PTR _modulus$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN18@modinv
$LN17@modinv:
	mov	DWORD PTR tv167[ebp], 0
$LN18@modinv:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR _aword$8085[ebp], eax
; Line 1713
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$8080[ebp]
	cmp	edx, DWORD PTR [ecx]
	jg	SHORT $LN19@modinv
	mov	eax, DWORD PTR _i$8080[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN20@modinv
$LN19@modinv:
	mov	DWORD PTR tv171[ebp], 0
$LN20@modinv:
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR _bword$8087[ebp], eax
; Line 1714
	mov	ecx, DWORD PTR _aword$8085[ebp]
	sub	ecx, DWORD PTR _bword$8087[ebp]
	sub	ecx, DWORD PTR _carry$8078[ebp]
	mov	edx, DWORD PTR _i$8080[ebp]
	mov	eax, DWORD PTR _newx$8077[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1715
	mov	ecx, DWORD PTR _bword$8087[ebp]
	not	ecx
	mov	DWORD PTR _bword$8087[ebp], ecx
; Line 1716
	cmp	DWORD PTR _carry$8078[ebp], 0
	je	SHORT $LN21@modinv
	mov	edx, DWORD PTR _i$8080[ebp]
	mov	eax, DWORD PTR _newx$8077[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, DWORD PTR _bword$8087[ebp]
	sbb	edx, edx
	add	edx, 1
	mov	DWORD PTR tv186[ebp], edx
	jmp	SHORT $LN22@modinv
$LN21@modinv:
	mov	eax, DWORD PTR _i$8080[ebp]
	mov	ecx, DWORD PTR _newx$8077[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR _bword$8087[ebp], edx
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR tv186[ebp], eax
$LN22@modinv:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR _carry$8078[ebp], ecx
; Line 1717
	mov	edx, DWORD PTR _i$8080[ebp]
	mov	eax, DWORD PTR _newx$8077[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN1@modinv
; Line 1718
	mov	ecx, DWORD PTR _i$8080[ebp]
	mov	DWORD PTR _maxspot$8079[ebp], ecx
$LN1@modinv:
; Line 1719
	jmp	$LN3@modinv
$LN2@modinv:
; Line 1720
	mov	edx, DWORD PTR _newx$8077[ebp]
	mov	eax, DWORD PTR _maxspot$8079[ebp]
	mov	DWORD PTR [edx], eax
; Line 1721
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_freebn
	add	esp, 4
; Line 1722
	mov	edx, DWORD PTR _newx$8077[ebp]
	mov	DWORD PTR _x$[ebp], edx
$LN5@modinv:
; Line 1726
	mov	eax, DWORD PTR _x$[ebp]
$LN13@modinv:
; Line 1727
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_modinv	ENDP
_TEXT	ENDS
PUBLIC	_bignum_decimal
EXTRN	_memmove:PROC
EXTRN	__aulldiv:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_workspace$ = -32					; size = 4
_ret$ = -28						; size = 4
_carry$ = -24						; size = 8
_iszero$ = -16						; size = 4
_i$ = -12						; size = 4
_ndigit$ = -8						; size = 4
_ndigits$ = -4						; size = 4
_x$ = 8							; size = 4
_bignum_decimal PROC
; Line 1734
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1756
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_bignum_bitcount
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax
; Line 1757
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN13@bignum_dec
; Line 1758
	mov	DWORD PTR _ndigits$[ebp], 1
; Line 1759
	jmp	SHORT $LN12@bignum_dec
$LN13@bignum_dec:
; Line 1760
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, 92					; 0000005cH
	cdq
	mov	ecx, 93					; 0000005dH
	idiv	ecx
	mov	DWORD PTR _ndigits$[ebp], eax
$LN12@bignum_dec:
; Line 1761
	mov	edx, DWORD PTR _ndigits$[ebp]
	add	edx, 1
	mov	DWORD PTR _ndigits$[ebp], edx
; Line 1762
	push	1
	mov	eax, DWORD PTR _ndigits$[ebp]
	push	eax
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 1769
	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _workspace$[ebp], eax
; Line 1770
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@bignum_dec
$LN10@bignum_dec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@bignum_dec:
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN9@bignum_dec
; Line 1771
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _workspace$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN10@bignum_dec
$LN9@bignum_dec:
; Line 1778
	mov	edx, DWORD PTR _ndigits$[ebp]
	sub	edx, 1
	mov	DWORD PTR _ndigit$[ebp], edx
; Line 1779
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _ndigit$[ebp]
	mov	BYTE PTR [eax], 0
$LN8@bignum_dec:
; Line 1781
	mov	DWORD PTR _iszero$[ebp], 1
; Line 1782
	mov	DWORD PTR _carry$[ebp], 0
	mov	DWORD PTR _carry$[ebp+4], 0
; Line 1783
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@bignum_dec
$LN4@bignum_dec:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@bignum_dec:
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@bignum_dec
; Line 1784
	mov	eax, DWORD PTR _carry$[ebp]
	mov	edx, DWORD PTR _carry$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _workspace$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1785
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _carry$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _carry$[ebp]
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _workspace$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1786
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _workspace$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN2@bignum_dec
; Line 1787
	mov	DWORD PTR _iszero$[ebp], 0
$LN2@bignum_dec:
; Line 1788
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _carry$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _carry$[ebp]
	push	eax
	call	__aullrem
	mov	DWORD PTR _carry$[ebp], eax
	mov	DWORD PTR _carry$[ebp+4], edx
; Line 1789
	jmp	SHORT $LN4@bignum_dec
$LN3@bignum_dec:
; Line 1790
	mov	ecx, DWORD PTR _ndigit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _ndigit$[ebp], ecx
	mov	edx, DWORD PTR _carry$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _carry$[ebp+4]
	adc	eax, 0
	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _ndigit$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 1791
	cmp	DWORD PTR _iszero$[ebp], 0
	je	$LN8@bignum_dec
; Line 1797
	cmp	DWORD PTR _ndigit$[ebp], 0
	jle	SHORT $LN1@bignum_dec
; Line 1798
	mov	edx, DWORD PTR _ndigits$[ebp]
	sub	edx, DWORD PTR _ndigit$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _ndigit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
$LN1@bignum_dec:
; Line 1803
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _workspace$[ebp]
	push	ecx
	call	_smemclr
	add	esp, 8
; Line 1804
	mov	edx, DWORD PTR _workspace$[ebp]
	push	edx
	call	_safefree
	add	esp, 4
; Line 1805
	mov	eax, DWORD PTR _ret$[ebp]
; Line 1806
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bignum_decimal ENDP
_TEXT	ENDS
END
