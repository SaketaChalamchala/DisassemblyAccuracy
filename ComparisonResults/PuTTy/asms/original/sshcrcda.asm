; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\Putty\sshcrcda.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_ONE
PUBLIC	_ZERO
_BSS	SEGMENT
_ZERO	DB	04H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_ONE	DB	01H
	DB	00H
	DB	00H
	DB	00H
$SG5977	DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	'.', 00H, '.', 00H, '\', 00H, 's', 00H, 's', 00H, 'h', 00H, 'c'
	DB	00H, 'r', 00H, 'c', 00H, 'd', 00H, 'a', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+4
$SG5978	DB	'!', 00H, '(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '(', 00H, 'S', 00H, 'S', 00H, 'H', 00H, '_'
	DB	00H, 'M', 00H, 'A', 00H, 'X', 00H, 'B', 00H, 'L', 00H, 'O', 00H
	DB	'C', 00H, 'K', 00H, 'S', 00H, ' ', 00H, '*', 00H, ' ', 00H, 'S'
	DB	00H, 'S', 00H, 'H', 00H, '_', 00H, 'B', 00H, 'L', 00H, 'O', 00H
	DB	'C', 00H, 'K', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, ')'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, ' ', 00H, '%', 00H, ' ', 00H, 'S', 00H, 'S', 00H, 'H'
	DB	00H, '_', 00H, 'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H
	DB	'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_crcda_make_context
EXTRN	_safemalloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\putty\sshcrcda.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_crcda_make_context PROC
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 60
	push	8
	push	1
	call	_safemalloc
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
; Line 61
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], 0
; Line 62
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 4096			; 00001000H
; Line 63
	mov	eax, DWORD PTR _ret$[ebp]
; Line 64
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_crcda_make_context ENDP
_TEXT	ENDS
PUBLIC	_crcda_free_context
EXTRN	_safefree:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_crcda_free_context PROC
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 68
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 69
	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN2@crcda_free
; Line 70
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_safefree
	add	esp, 4
; Line 71
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax], 0
; Line 72
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_safefree
	add	esp, 4
$LN2@crcda_free:
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_crcda_free_context ENDP
_TEXT	ENDS
PUBLIC	_detect_attack
EXTRN	_memset:PROC
EXTRN	_memcmp:PROC
EXTRN	_saferealloc:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$ = -24						; size = 4
_c$ = -20						; size = 4
_l$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_ctx$ = -4						; size = 4
_handle$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_IV$ = 20						; size = 4
_detect_attack PROC
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 107
	mov	eax, DWORD PTR _handle$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax
; Line 114
	cmp	DWORD PTR _len$[ebp], 262144		; 00040000H
	ja	SHORT $LN37@detect_att
	mov	eax, DWORD PTR _len$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	test	edx, edx
	je	SHORT $LN38@detect_att
$LN37@detect_att:
	push	114					; 00000072H
	push	OFFSET $SG5977
	push	OFFSET $SG5978
	call	__wassert
	add	esp, 12					; 0000000cH
$LN38@detect_att:
; Line 115
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _l$[ebp], ecx
	jmp	SHORT $LN34@detect_att
$LN33@detect_att:
	mov	edx, DWORD PTR _l$[ebp]
	shl	edx, 2
	mov	DWORD PTR _l$[ebp], edx
$LN34@detect_att:
	mov	eax, DWORD PTR _len$[ebp]
	shr	eax, 3
	imul	eax, 3
	shr	eax, 1
	cmp	DWORD PTR _l$[ebp], eax
	jae	SHORT $LN32@detect_att
; Line 116
	jmp	SHORT $LN33@detect_att
$LN32@detect_att:
; Line 118
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN31@detect_att
; Line 119
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 120
	push	2
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_safemalloc
	add	esp, 8
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 121
	jmp	SHORT $LN30@detect_att
$LN31@detect_att:
; Line 122
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN30@detect_att
; Line 123
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _l$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 124
	push	2
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_saferealloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx], eax
$LN30@detect_att:
; Line 128
	cmp	DWORD PTR _len$[ebp], 56		; 00000038H
	ja	$LN28@detect_att
; Line 129
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _c$[ebp], edx
	jmp	SHORT $LN27@detect_att
$LN26@detect_att:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 8
	mov	DWORD PTR _c$[ebp], eax
$LN27@detect_att:
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	cmp	DWORD PTR _c$[ebp], ecx
	jae	$LN25@detect_att
; Line 130
	cmp	DWORD PTR _IV$[ebp], 0
	je	SHORT $LN24@detect_att
	push	8
	mov	edx, DWORD PTR _IV$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN24@detect_att
; Line 131
	mov	ecx, DWORD PTR _IV$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_check_crc
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN23@detect_att
; Line 132
	mov	eax, 1
	jmp	$LN35@detect_att
; Line 133
	jmp	SHORT $LN24@detect_att
$LN23@detect_att:
; Line 134
	jmp	SHORT $LN25@detect_att
$LN24@detect_att:
; Line 136
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _d$[ebp], edx
	jmp	SHORT $LN21@detect_att
$LN20@detect_att:
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 8
	mov	DWORD PTR _d$[ebp], eax
$LN21@detect_att:
	mov	ecx, DWORD PTR _d$[ebp]
	cmp	ecx, DWORD PTR _c$[ebp]
	jae	SHORT $LN19@detect_att
; Line 137
	push	8
	mov	edx, DWORD PTR _d$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@detect_att
; Line 138
	mov	ecx, DWORD PTR _IV$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_check_crc
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN17@detect_att
; Line 139
	mov	eax, 1
	jmp	$LN35@detect_att
; Line 140
	jmp	SHORT $LN18@detect_att
$LN17@detect_att:
; Line 141
	jmp	SHORT $LN19@detect_att
$LN18@detect_att:
; Line 143
	jmp	SHORT $LN20@detect_att
$LN19@detect_att:
; Line 144
	jmp	$LN26@detect_att
$LN25@detect_att:
; Line 145
	xor	eax, eax
	jmp	$LN35@detect_att
$LN28@detect_att:
; Line 147
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	push	eax
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 149
	cmp	DWORD PTR _IV$[ebp], 0
	je	SHORT $LN15@detect_att
; Line 150
	mov	eax, DWORD PTR _IV$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _IV$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _IV$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _IV$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	and	ecx, eax
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, 65534				; 0000fffeH
	mov	WORD PTR [eax+ecx*2], dx
$LN15@detect_att:
; Line 152
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@detect_att
$LN13@detect_att:
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 8
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN14@detect_att:
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	cmp	DWORD PTR _c$[ebp], eax
	jae	$LN12@detect_att
; Line 154
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	or	edx, ecx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	and	edx, ecx
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN11@detect_att
$LN10@detect_att:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	and	edx, ecx
	mov	DWORD PTR _i$[ebp], edx
$LN11@detect_att:
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	cmp	edx, 65535				; 0000ffffH
	je	$LN9@detect_att
; Line 155
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN8@detect_att
; Line 156
	push	8
	mov	ecx, DWORD PTR _IV$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@detect_att
; Line 157
	mov	eax, DWORD PTR _IV$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_check_crc
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN6@detect_att
; Line 158
	mov	eax, 1
	jmp	SHORT $LN35@detect_att
; Line 159
	jmp	SHORT $LN7@detect_att
$LN6@detect_att:
; Line 160
	jmp	SHORT $LN9@detect_att
$LN7@detect_att:
; Line 161
	jmp	SHORT $LN4@detect_att
$LN8@detect_att:
; Line 162
	push	8
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _buf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@detect_att
; Line 163
	mov	edx, DWORD PTR _IV$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_check_crc
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@detect_att
; Line 164
	mov	eax, 1
	jmp	SHORT $LN35@detect_att
; Line 165
	jmp	SHORT $LN4@detect_att
$LN2@detect_att:
; Line 166
	jmp	SHORT $LN9@detect_att
$LN4@detect_att:
; Line 168
	jmp	$LN10@detect_att
$LN9@detect_att:
; Line 169
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ax, WORD PTR _j$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
; Line 170
	jmp	$LN13@detect_att
$LN12@detect_att:
; Line 171
	xor	eax, eax
$LN35@detect_att:
; Line 172
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_detect_attack ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -16						; size = 4
_crc$ = -8						; size = 4
_S$ = 8							; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_IV$ = 20						; size = 4
_check_crc PROC
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 87
	mov	DWORD PTR _crc$[ebp], 0
; Line 88
	cmp	DWORD PTR _IV$[ebp], 0
	je	SHORT $LN6@check_crc
	push	8
	mov	eax, DWORD PTR _IV$[ebp]
	push	eax
	mov	ecx, DWORD PTR _S$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@check_crc
; Line 89
	push	OFFSET _ONE
	lea	edx, DWORD PTR _crc$[ebp]
	push	edx
	call	_crc_update
	add	esp, 8
; Line 90
	push	OFFSET _ZERO
	lea	eax, DWORD PTR _crc$[ebp]
	push	eax
	call	_crc_update
	add	esp, 8
$LN6@check_crc:
; Line 92
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _c$[ebp], ecx
	jmp	SHORT $LN5@check_crc
$LN4@check_crc:
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 8
	mov	DWORD PTR _c$[ebp], edx
$LN5@check_crc:
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	cmp	DWORD PTR _c$[ebp], eax
	jae	SHORT $LN3@check_crc
; Line 93
	push	8
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _S$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@check_crc
; Line 94
	push	OFFSET _ONE
	lea	eax, DWORD PTR _crc$[ebp]
	push	eax
	call	_crc_update
	add	esp, 8
; Line 95
	push	OFFSET _ZERO
	lea	ecx, DWORD PTR _crc$[ebp]
	push	ecx
	call	_crc_update
	add	esp, 8
; Line 96
	jmp	SHORT $LN1@check_crc
$LN2@check_crc:
; Line 97
	push	OFFSET _ZERO
	lea	edx, DWORD PTR _crc$[ebp]
	push	edx
	call	_crc_update
	add	esp, 8
; Line 98
	push	OFFSET _ZERO
	lea	eax, DWORD PTR _crc$[ebp]
	push	eax
	call	_crc_update
	add	esp, 8
$LN1@check_crc:
; Line 100
	jmp	SHORT $LN4@check_crc
$LN3@check_crc:
; Line 101
	xor	eax, eax
	cmp	DWORD PTR _crc$[ebp], 0
	sete	al
; Line 102
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@check_crc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@check_crc:
	DD	1
	DD	$LN10@check_crc
$LN10@check_crc:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@check_crc
$LN9@check_crc:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
_check_crc ENDP
_TEXT	ENDS
EXTRN	_crc32_update:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_crc_update PROC
; Line 77
	push	ebp
	mov	ebp, esp
; Line 78
	push	4
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_crc32_update
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 79
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_crc_update ENDP
_TEXT	ENDS
END
